
itsdk-example-murata-lora.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001f668  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001f9c  0801f728  0801f728  0002f728  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080216c4  080216c4  00040288  2**0
                  CONTENTS
  4 .ARM          00000008  080216c4  080216c4  000316c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080216cc  080216cc  00040288  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080216cc  080216cc  000316cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080216d0  080216d0  000316d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000288  20000000  080216d4  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000014b4  20000288  0802195c  00040288  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000173c  0802195c  0004173c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00040288  2**0
                  CONTENTS, READONLY
 12 .debug_info   00068554  00000000  00000000  000402b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000a413  00000000  00000000  000a8804  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002830  00000000  00000000  000b2c18  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002460  00000000  00000000  000b5448  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00027456  00000000  00000000  000b78a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000381ba  00000000  00000000  000decfe  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ada6d  00000000  00000000  00116eb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001c4925  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009608  00000000  00000000  001c49a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000288 	.word	0x20000288
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0801f710 	.word	0x0801f710

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000028c 	.word	0x2000028c
 8000104:	0801f710 	.word	0x0801f710

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	; 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	; 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			; (mov r8, r8)

08000404 <__aeabi_cdrcmple>:
 8000404:	4684      	mov	ip, r0
 8000406:	1c10      	adds	r0, r2, #0
 8000408:	4662      	mov	r2, ip
 800040a:	468c      	mov	ip, r1
 800040c:	1c19      	adds	r1, r3, #0
 800040e:	4663      	mov	r3, ip
 8000410:	e000      	b.n	8000414 <__aeabi_cdcmpeq>
 8000412:	46c0      	nop			; (mov r8, r8)

08000414 <__aeabi_cdcmpeq>:
 8000414:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000416:	f001 fa5f 	bl	80018d8 <__ledf2>
 800041a:	2800      	cmp	r0, #0
 800041c:	d401      	bmi.n	8000422 <__aeabi_cdcmpeq+0xe>
 800041e:	2100      	movs	r1, #0
 8000420:	42c8      	cmn	r0, r1
 8000422:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000424 <__aeabi_dcmpeq>:
 8000424:	b510      	push	{r4, lr}
 8000426:	f001 f9b7 	bl	8001798 <__eqdf2>
 800042a:	4240      	negs	r0, r0
 800042c:	3001      	adds	r0, #1
 800042e:	bd10      	pop	{r4, pc}

08000430 <__aeabi_dcmplt>:
 8000430:	b510      	push	{r4, lr}
 8000432:	f001 fa51 	bl	80018d8 <__ledf2>
 8000436:	2800      	cmp	r0, #0
 8000438:	db01      	blt.n	800043e <__aeabi_dcmplt+0xe>
 800043a:	2000      	movs	r0, #0
 800043c:	bd10      	pop	{r4, pc}
 800043e:	2001      	movs	r0, #1
 8000440:	bd10      	pop	{r4, pc}
 8000442:	46c0      	nop			; (mov r8, r8)

08000444 <__aeabi_dcmple>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f001 fa47 	bl	80018d8 <__ledf2>
 800044a:	2800      	cmp	r0, #0
 800044c:	dd01      	ble.n	8000452 <__aeabi_dcmple+0xe>
 800044e:	2000      	movs	r0, #0
 8000450:	bd10      	pop	{r4, pc}
 8000452:	2001      	movs	r0, #1
 8000454:	bd10      	pop	{r4, pc}
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <__aeabi_dcmpgt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 f9d9 	bl	8001810 <__gedf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	dc01      	bgt.n	8000466 <__aeabi_dcmpgt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmpge>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 f9cf 	bl	8001810 <__gedf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	da01      	bge.n	800047a <__aeabi_dcmpge+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_ldivmod>:
 8000480:	2b00      	cmp	r3, #0
 8000482:	d115      	bne.n	80004b0 <__aeabi_ldivmod+0x30>
 8000484:	2a00      	cmp	r2, #0
 8000486:	d113      	bne.n	80004b0 <__aeabi_ldivmod+0x30>
 8000488:	2900      	cmp	r1, #0
 800048a:	db06      	blt.n	800049a <__aeabi_ldivmod+0x1a>
 800048c:	dc01      	bgt.n	8000492 <__aeabi_ldivmod+0x12>
 800048e:	2800      	cmp	r0, #0
 8000490:	d006      	beq.n	80004a0 <__aeabi_ldivmod+0x20>
 8000492:	2000      	movs	r0, #0
 8000494:	43c0      	mvns	r0, r0
 8000496:	0841      	lsrs	r1, r0, #1
 8000498:	e002      	b.n	80004a0 <__aeabi_ldivmod+0x20>
 800049a:	2180      	movs	r1, #128	; 0x80
 800049c:	0609      	lsls	r1, r1, #24
 800049e:	2000      	movs	r0, #0
 80004a0:	b407      	push	{r0, r1, r2}
 80004a2:	4802      	ldr	r0, [pc, #8]	; (80004ac <__aeabi_ldivmod+0x2c>)
 80004a4:	a101      	add	r1, pc, #4	; (adr r1, 80004ac <__aeabi_ldivmod+0x2c>)
 80004a6:	1840      	adds	r0, r0, r1
 80004a8:	9002      	str	r0, [sp, #8]
 80004aa:	bd03      	pop	{r0, r1, pc}
 80004ac:	ffffff55 	.word	0xffffff55
 80004b0:	b403      	push	{r0, r1}
 80004b2:	4668      	mov	r0, sp
 80004b4:	b501      	push	{r0, lr}
 80004b6:	9802      	ldr	r0, [sp, #8]
 80004b8:	f000 f930 	bl	800071c <__gnu_ldivmod_helper>
 80004bc:	9b01      	ldr	r3, [sp, #4]
 80004be:	469e      	mov	lr, r3
 80004c0:	b002      	add	sp, #8
 80004c2:	bc0c      	pop	{r2, r3}
 80004c4:	4770      	bx	lr
 80004c6:	46c0      	nop			; (mov r8, r8)

080004c8 <__aeabi_uldivmod>:
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d111      	bne.n	80004f0 <__aeabi_uldivmod+0x28>
 80004cc:	2a00      	cmp	r2, #0
 80004ce:	d10f      	bne.n	80004f0 <__aeabi_uldivmod+0x28>
 80004d0:	2900      	cmp	r1, #0
 80004d2:	d100      	bne.n	80004d6 <__aeabi_uldivmod+0xe>
 80004d4:	2800      	cmp	r0, #0
 80004d6:	d002      	beq.n	80004de <__aeabi_uldivmod+0x16>
 80004d8:	2100      	movs	r1, #0
 80004da:	43c9      	mvns	r1, r1
 80004dc:	1c08      	adds	r0, r1, #0
 80004de:	b407      	push	{r0, r1, r2}
 80004e0:	4802      	ldr	r0, [pc, #8]	; (80004ec <__aeabi_uldivmod+0x24>)
 80004e2:	a102      	add	r1, pc, #8	; (adr r1, 80004ec <__aeabi_uldivmod+0x24>)
 80004e4:	1840      	adds	r0, r0, r1
 80004e6:	9002      	str	r0, [sp, #8]
 80004e8:	bd03      	pop	{r0, r1, pc}
 80004ea:	46c0      	nop			; (mov r8, r8)
 80004ec:	ffffff15 	.word	0xffffff15
 80004f0:	b403      	push	{r0, r1}
 80004f2:	4668      	mov	r0, sp
 80004f4:	b501      	push	{r0, lr}
 80004f6:	9802      	ldr	r0, [sp, #8]
 80004f8:	f000 f84e 	bl	8000598 <__udivmoddi4>
 80004fc:	9b01      	ldr	r3, [sp, #4]
 80004fe:	469e      	mov	lr, r3
 8000500:	b002      	add	sp, #8
 8000502:	bc0c      	pop	{r2, r3}
 8000504:	4770      	bx	lr
 8000506:	46c0      	nop			; (mov r8, r8)

08000508 <__aeabi_lmul>:
 8000508:	b5f0      	push	{r4, r5, r6, r7, lr}
 800050a:	46ce      	mov	lr, r9
 800050c:	4647      	mov	r7, r8
 800050e:	0415      	lsls	r5, r2, #16
 8000510:	0c2d      	lsrs	r5, r5, #16
 8000512:	002e      	movs	r6, r5
 8000514:	b580      	push	{r7, lr}
 8000516:	0407      	lsls	r7, r0, #16
 8000518:	0c14      	lsrs	r4, r2, #16
 800051a:	0c3f      	lsrs	r7, r7, #16
 800051c:	4699      	mov	r9, r3
 800051e:	0c03      	lsrs	r3, r0, #16
 8000520:	437e      	muls	r6, r7
 8000522:	435d      	muls	r5, r3
 8000524:	4367      	muls	r7, r4
 8000526:	4363      	muls	r3, r4
 8000528:	197f      	adds	r7, r7, r5
 800052a:	0c34      	lsrs	r4, r6, #16
 800052c:	19e4      	adds	r4, r4, r7
 800052e:	469c      	mov	ip, r3
 8000530:	42a5      	cmp	r5, r4
 8000532:	d903      	bls.n	800053c <__aeabi_lmul+0x34>
 8000534:	2380      	movs	r3, #128	; 0x80
 8000536:	025b      	lsls	r3, r3, #9
 8000538:	4698      	mov	r8, r3
 800053a:	44c4      	add	ip, r8
 800053c:	464b      	mov	r3, r9
 800053e:	4343      	muls	r3, r0
 8000540:	4351      	muls	r1, r2
 8000542:	0c25      	lsrs	r5, r4, #16
 8000544:	0436      	lsls	r6, r6, #16
 8000546:	4465      	add	r5, ip
 8000548:	0c36      	lsrs	r6, r6, #16
 800054a:	0424      	lsls	r4, r4, #16
 800054c:	19a4      	adds	r4, r4, r6
 800054e:	195b      	adds	r3, r3, r5
 8000550:	1859      	adds	r1, r3, r1
 8000552:	0020      	movs	r0, r4
 8000554:	bc0c      	pop	{r2, r3}
 8000556:	4690      	mov	r8, r2
 8000558:	4699      	mov	r9, r3
 800055a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800055c <__aeabi_d2uiz>:
 800055c:	b570      	push	{r4, r5, r6, lr}
 800055e:	2200      	movs	r2, #0
 8000560:	4b0c      	ldr	r3, [pc, #48]	; (8000594 <__aeabi_d2uiz+0x38>)
 8000562:	0004      	movs	r4, r0
 8000564:	000d      	movs	r5, r1
 8000566:	f7ff ff81 	bl	800046c <__aeabi_dcmpge>
 800056a:	2800      	cmp	r0, #0
 800056c:	d104      	bne.n	8000578 <__aeabi_d2uiz+0x1c>
 800056e:	0020      	movs	r0, r4
 8000570:	0029      	movs	r1, r5
 8000572:	f001 ffd3 	bl	800251c <__aeabi_d2iz>
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	4b06      	ldr	r3, [pc, #24]	; (8000594 <__aeabi_d2uiz+0x38>)
 800057a:	2200      	movs	r2, #0
 800057c:	0020      	movs	r0, r4
 800057e:	0029      	movs	r1, r5
 8000580:	f001 fc84 	bl	8001e8c <__aeabi_dsub>
 8000584:	f001 ffca 	bl	800251c <__aeabi_d2iz>
 8000588:	2380      	movs	r3, #128	; 0x80
 800058a:	061b      	lsls	r3, r3, #24
 800058c:	469c      	mov	ip, r3
 800058e:	4460      	add	r0, ip
 8000590:	e7f1      	b.n	8000576 <__aeabi_d2uiz+0x1a>
 8000592:	46c0      	nop			; (mov r8, r8)
 8000594:	41e00000 	.word	0x41e00000

08000598 <__udivmoddi4>:
 8000598:	b5f0      	push	{r4, r5, r6, r7, lr}
 800059a:	464f      	mov	r7, r9
 800059c:	4646      	mov	r6, r8
 800059e:	46d6      	mov	lr, sl
 80005a0:	b5c0      	push	{r6, r7, lr}
 80005a2:	0004      	movs	r4, r0
 80005a4:	b082      	sub	sp, #8
 80005a6:	000d      	movs	r5, r1
 80005a8:	4691      	mov	r9, r2
 80005aa:	4698      	mov	r8, r3
 80005ac:	428b      	cmp	r3, r1
 80005ae:	d82f      	bhi.n	8000610 <__udivmoddi4+0x78>
 80005b0:	d02c      	beq.n	800060c <__udivmoddi4+0x74>
 80005b2:	4641      	mov	r1, r8
 80005b4:	4648      	mov	r0, r9
 80005b6:	f002 f8c3 	bl	8002740 <__clzdi2>
 80005ba:	0029      	movs	r1, r5
 80005bc:	0006      	movs	r6, r0
 80005be:	0020      	movs	r0, r4
 80005c0:	f002 f8be 	bl	8002740 <__clzdi2>
 80005c4:	1a33      	subs	r3, r6, r0
 80005c6:	469c      	mov	ip, r3
 80005c8:	3b20      	subs	r3, #32
 80005ca:	469a      	mov	sl, r3
 80005cc:	d500      	bpl.n	80005d0 <__udivmoddi4+0x38>
 80005ce:	e076      	b.n	80006be <__udivmoddi4+0x126>
 80005d0:	464b      	mov	r3, r9
 80005d2:	4652      	mov	r2, sl
 80005d4:	4093      	lsls	r3, r2
 80005d6:	001f      	movs	r7, r3
 80005d8:	464b      	mov	r3, r9
 80005da:	4662      	mov	r2, ip
 80005dc:	4093      	lsls	r3, r2
 80005de:	001e      	movs	r6, r3
 80005e0:	42af      	cmp	r7, r5
 80005e2:	d828      	bhi.n	8000636 <__udivmoddi4+0x9e>
 80005e4:	d025      	beq.n	8000632 <__udivmoddi4+0x9a>
 80005e6:	4653      	mov	r3, sl
 80005e8:	1ba4      	subs	r4, r4, r6
 80005ea:	41bd      	sbcs	r5, r7
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	da00      	bge.n	80005f2 <__udivmoddi4+0x5a>
 80005f0:	e07b      	b.n	80006ea <__udivmoddi4+0x152>
 80005f2:	2200      	movs	r2, #0
 80005f4:	2300      	movs	r3, #0
 80005f6:	9200      	str	r2, [sp, #0]
 80005f8:	9301      	str	r3, [sp, #4]
 80005fa:	2301      	movs	r3, #1
 80005fc:	4652      	mov	r2, sl
 80005fe:	4093      	lsls	r3, r2
 8000600:	9301      	str	r3, [sp, #4]
 8000602:	2301      	movs	r3, #1
 8000604:	4662      	mov	r2, ip
 8000606:	4093      	lsls	r3, r2
 8000608:	9300      	str	r3, [sp, #0]
 800060a:	e018      	b.n	800063e <__udivmoddi4+0xa6>
 800060c:	4282      	cmp	r2, r0
 800060e:	d9d0      	bls.n	80005b2 <__udivmoddi4+0x1a>
 8000610:	2200      	movs	r2, #0
 8000612:	2300      	movs	r3, #0
 8000614:	9200      	str	r2, [sp, #0]
 8000616:	9301      	str	r3, [sp, #4]
 8000618:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <__udivmoddi4+0x8a>
 800061e:	601c      	str	r4, [r3, #0]
 8000620:	605d      	str	r5, [r3, #4]
 8000622:	9800      	ldr	r0, [sp, #0]
 8000624:	9901      	ldr	r1, [sp, #4]
 8000626:	b002      	add	sp, #8
 8000628:	bc1c      	pop	{r2, r3, r4}
 800062a:	4690      	mov	r8, r2
 800062c:	4699      	mov	r9, r3
 800062e:	46a2      	mov	sl, r4
 8000630:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000632:	42a3      	cmp	r3, r4
 8000634:	d9d7      	bls.n	80005e6 <__udivmoddi4+0x4e>
 8000636:	2200      	movs	r2, #0
 8000638:	2300      	movs	r3, #0
 800063a:	9200      	str	r2, [sp, #0]
 800063c:	9301      	str	r3, [sp, #4]
 800063e:	4663      	mov	r3, ip
 8000640:	2b00      	cmp	r3, #0
 8000642:	d0e9      	beq.n	8000618 <__udivmoddi4+0x80>
 8000644:	07fb      	lsls	r3, r7, #31
 8000646:	4698      	mov	r8, r3
 8000648:	4641      	mov	r1, r8
 800064a:	0872      	lsrs	r2, r6, #1
 800064c:	430a      	orrs	r2, r1
 800064e:	087b      	lsrs	r3, r7, #1
 8000650:	4666      	mov	r6, ip
 8000652:	e00e      	b.n	8000672 <__udivmoddi4+0xda>
 8000654:	42ab      	cmp	r3, r5
 8000656:	d101      	bne.n	800065c <__udivmoddi4+0xc4>
 8000658:	42a2      	cmp	r2, r4
 800065a:	d80c      	bhi.n	8000676 <__udivmoddi4+0xde>
 800065c:	1aa4      	subs	r4, r4, r2
 800065e:	419d      	sbcs	r5, r3
 8000660:	2001      	movs	r0, #1
 8000662:	1924      	adds	r4, r4, r4
 8000664:	416d      	adcs	r5, r5
 8000666:	2100      	movs	r1, #0
 8000668:	3e01      	subs	r6, #1
 800066a:	1824      	adds	r4, r4, r0
 800066c:	414d      	adcs	r5, r1
 800066e:	2e00      	cmp	r6, #0
 8000670:	d006      	beq.n	8000680 <__udivmoddi4+0xe8>
 8000672:	42ab      	cmp	r3, r5
 8000674:	d9ee      	bls.n	8000654 <__udivmoddi4+0xbc>
 8000676:	3e01      	subs	r6, #1
 8000678:	1924      	adds	r4, r4, r4
 800067a:	416d      	adcs	r5, r5
 800067c:	2e00      	cmp	r6, #0
 800067e:	d1f8      	bne.n	8000672 <__udivmoddi4+0xda>
 8000680:	9800      	ldr	r0, [sp, #0]
 8000682:	9901      	ldr	r1, [sp, #4]
 8000684:	4653      	mov	r3, sl
 8000686:	1900      	adds	r0, r0, r4
 8000688:	4169      	adcs	r1, r5
 800068a:	2b00      	cmp	r3, #0
 800068c:	db23      	blt.n	80006d6 <__udivmoddi4+0x13e>
 800068e:	002b      	movs	r3, r5
 8000690:	4652      	mov	r2, sl
 8000692:	40d3      	lsrs	r3, r2
 8000694:	002a      	movs	r2, r5
 8000696:	4664      	mov	r4, ip
 8000698:	40e2      	lsrs	r2, r4
 800069a:	001c      	movs	r4, r3
 800069c:	4653      	mov	r3, sl
 800069e:	0015      	movs	r5, r2
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	db2d      	blt.n	8000700 <__udivmoddi4+0x168>
 80006a4:	0026      	movs	r6, r4
 80006a6:	4657      	mov	r7, sl
 80006a8:	40be      	lsls	r6, r7
 80006aa:	0033      	movs	r3, r6
 80006ac:	0026      	movs	r6, r4
 80006ae:	4667      	mov	r7, ip
 80006b0:	40be      	lsls	r6, r7
 80006b2:	0032      	movs	r2, r6
 80006b4:	1a80      	subs	r0, r0, r2
 80006b6:	4199      	sbcs	r1, r3
 80006b8:	9000      	str	r0, [sp, #0]
 80006ba:	9101      	str	r1, [sp, #4]
 80006bc:	e7ac      	b.n	8000618 <__udivmoddi4+0x80>
 80006be:	4662      	mov	r2, ip
 80006c0:	2320      	movs	r3, #32
 80006c2:	1a9b      	subs	r3, r3, r2
 80006c4:	464a      	mov	r2, r9
 80006c6:	40da      	lsrs	r2, r3
 80006c8:	4661      	mov	r1, ip
 80006ca:	0013      	movs	r3, r2
 80006cc:	4642      	mov	r2, r8
 80006ce:	408a      	lsls	r2, r1
 80006d0:	0017      	movs	r7, r2
 80006d2:	431f      	orrs	r7, r3
 80006d4:	e780      	b.n	80005d8 <__udivmoddi4+0x40>
 80006d6:	4662      	mov	r2, ip
 80006d8:	2320      	movs	r3, #32
 80006da:	1a9b      	subs	r3, r3, r2
 80006dc:	002a      	movs	r2, r5
 80006de:	4666      	mov	r6, ip
 80006e0:	409a      	lsls	r2, r3
 80006e2:	0023      	movs	r3, r4
 80006e4:	40f3      	lsrs	r3, r6
 80006e6:	4313      	orrs	r3, r2
 80006e8:	e7d4      	b.n	8000694 <__udivmoddi4+0xfc>
 80006ea:	4662      	mov	r2, ip
 80006ec:	2320      	movs	r3, #32
 80006ee:	2100      	movs	r1, #0
 80006f0:	1a9b      	subs	r3, r3, r2
 80006f2:	2200      	movs	r2, #0
 80006f4:	9100      	str	r1, [sp, #0]
 80006f6:	9201      	str	r2, [sp, #4]
 80006f8:	2201      	movs	r2, #1
 80006fa:	40da      	lsrs	r2, r3
 80006fc:	9201      	str	r2, [sp, #4]
 80006fe:	e780      	b.n	8000602 <__udivmoddi4+0x6a>
 8000700:	2320      	movs	r3, #32
 8000702:	4662      	mov	r2, ip
 8000704:	0026      	movs	r6, r4
 8000706:	1a9b      	subs	r3, r3, r2
 8000708:	40de      	lsrs	r6, r3
 800070a:	002f      	movs	r7, r5
 800070c:	46b0      	mov	r8, r6
 800070e:	4666      	mov	r6, ip
 8000710:	40b7      	lsls	r7, r6
 8000712:	4646      	mov	r6, r8
 8000714:	003b      	movs	r3, r7
 8000716:	4333      	orrs	r3, r6
 8000718:	e7c8      	b.n	80006ac <__udivmoddi4+0x114>
 800071a:	46c0      	nop			; (mov r8, r8)

0800071c <__gnu_ldivmod_helper>:
 800071c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800071e:	b083      	sub	sp, #12
 8000720:	0016      	movs	r6, r2
 8000722:	001f      	movs	r7, r3
 8000724:	9000      	str	r0, [sp, #0]
 8000726:	9101      	str	r1, [sp, #4]
 8000728:	f002 f816 	bl	8002758 <__divdi3>
 800072c:	0004      	movs	r4, r0
 800072e:	000d      	movs	r5, r1
 8000730:	0002      	movs	r2, r0
 8000732:	000b      	movs	r3, r1
 8000734:	0030      	movs	r0, r6
 8000736:	0039      	movs	r1, r7
 8000738:	f7ff fee6 	bl	8000508 <__aeabi_lmul>
 800073c:	9a00      	ldr	r2, [sp, #0]
 800073e:	9b01      	ldr	r3, [sp, #4]
 8000740:	1a12      	subs	r2, r2, r0
 8000742:	418b      	sbcs	r3, r1
 8000744:	9908      	ldr	r1, [sp, #32]
 8000746:	0020      	movs	r0, r4
 8000748:	600a      	str	r2, [r1, #0]
 800074a:	604b      	str	r3, [r1, #4]
 800074c:	0029      	movs	r1, r5
 800074e:	b003      	add	sp, #12
 8000750:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000752:	46c0      	nop			; (mov r8, r8)

08000754 <__aeabi_fsub>:
 8000754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000756:	4647      	mov	r7, r8
 8000758:	46ce      	mov	lr, r9
 800075a:	0044      	lsls	r4, r0, #1
 800075c:	0fc2      	lsrs	r2, r0, #31
 800075e:	b580      	push	{r7, lr}
 8000760:	0247      	lsls	r7, r0, #9
 8000762:	0248      	lsls	r0, r1, #9
 8000764:	0a40      	lsrs	r0, r0, #9
 8000766:	4684      	mov	ip, r0
 8000768:	4666      	mov	r6, ip
 800076a:	0048      	lsls	r0, r1, #1
 800076c:	0a7f      	lsrs	r7, r7, #9
 800076e:	0e24      	lsrs	r4, r4, #24
 8000770:	00f6      	lsls	r6, r6, #3
 8000772:	0025      	movs	r5, r4
 8000774:	4690      	mov	r8, r2
 8000776:	00fb      	lsls	r3, r7, #3
 8000778:	0e00      	lsrs	r0, r0, #24
 800077a:	0fc9      	lsrs	r1, r1, #31
 800077c:	46b1      	mov	r9, r6
 800077e:	28ff      	cmp	r0, #255	; 0xff
 8000780:	d100      	bne.n	8000784 <__aeabi_fsub+0x30>
 8000782:	e085      	b.n	8000890 <__aeabi_fsub+0x13c>
 8000784:	2601      	movs	r6, #1
 8000786:	4071      	eors	r1, r6
 8000788:	1a26      	subs	r6, r4, r0
 800078a:	4291      	cmp	r1, r2
 800078c:	d057      	beq.n	800083e <__aeabi_fsub+0xea>
 800078e:	2e00      	cmp	r6, #0
 8000790:	dd43      	ble.n	800081a <__aeabi_fsub+0xc6>
 8000792:	2800      	cmp	r0, #0
 8000794:	d000      	beq.n	8000798 <__aeabi_fsub+0x44>
 8000796:	e07f      	b.n	8000898 <__aeabi_fsub+0x144>
 8000798:	4649      	mov	r1, r9
 800079a:	2900      	cmp	r1, #0
 800079c:	d100      	bne.n	80007a0 <__aeabi_fsub+0x4c>
 800079e:	e0aa      	b.n	80008f6 <__aeabi_fsub+0x1a2>
 80007a0:	3e01      	subs	r6, #1
 80007a2:	2e00      	cmp	r6, #0
 80007a4:	d000      	beq.n	80007a8 <__aeabi_fsub+0x54>
 80007a6:	e0f7      	b.n	8000998 <__aeabi_fsub+0x244>
 80007a8:	1a5b      	subs	r3, r3, r1
 80007aa:	015a      	lsls	r2, r3, #5
 80007ac:	d400      	bmi.n	80007b0 <__aeabi_fsub+0x5c>
 80007ae:	e08b      	b.n	80008c8 <__aeabi_fsub+0x174>
 80007b0:	019b      	lsls	r3, r3, #6
 80007b2:	099c      	lsrs	r4, r3, #6
 80007b4:	0020      	movs	r0, r4
 80007b6:	f001 ffa5 	bl	8002704 <__clzsi2>
 80007ba:	3805      	subs	r0, #5
 80007bc:	4084      	lsls	r4, r0
 80007be:	4285      	cmp	r5, r0
 80007c0:	dd00      	ble.n	80007c4 <__aeabi_fsub+0x70>
 80007c2:	e0d3      	b.n	800096c <__aeabi_fsub+0x218>
 80007c4:	1b45      	subs	r5, r0, r5
 80007c6:	0023      	movs	r3, r4
 80007c8:	2020      	movs	r0, #32
 80007ca:	3501      	adds	r5, #1
 80007cc:	40eb      	lsrs	r3, r5
 80007ce:	1b45      	subs	r5, r0, r5
 80007d0:	40ac      	lsls	r4, r5
 80007d2:	1e62      	subs	r2, r4, #1
 80007d4:	4194      	sbcs	r4, r2
 80007d6:	4323      	orrs	r3, r4
 80007d8:	2407      	movs	r4, #7
 80007da:	2500      	movs	r5, #0
 80007dc:	401c      	ands	r4, r3
 80007de:	2201      	movs	r2, #1
 80007e0:	4641      	mov	r1, r8
 80007e2:	400a      	ands	r2, r1
 80007e4:	2c00      	cmp	r4, #0
 80007e6:	d004      	beq.n	80007f2 <__aeabi_fsub+0x9e>
 80007e8:	210f      	movs	r1, #15
 80007ea:	4019      	ands	r1, r3
 80007ec:	2904      	cmp	r1, #4
 80007ee:	d000      	beq.n	80007f2 <__aeabi_fsub+0x9e>
 80007f0:	3304      	adds	r3, #4
 80007f2:	0159      	lsls	r1, r3, #5
 80007f4:	d400      	bmi.n	80007f8 <__aeabi_fsub+0xa4>
 80007f6:	e080      	b.n	80008fa <__aeabi_fsub+0x1a6>
 80007f8:	3501      	adds	r5, #1
 80007fa:	b2ec      	uxtb	r4, r5
 80007fc:	2dff      	cmp	r5, #255	; 0xff
 80007fe:	d000      	beq.n	8000802 <__aeabi_fsub+0xae>
 8000800:	e0a3      	b.n	800094a <__aeabi_fsub+0x1f6>
 8000802:	24ff      	movs	r4, #255	; 0xff
 8000804:	2300      	movs	r3, #0
 8000806:	025b      	lsls	r3, r3, #9
 8000808:	05e4      	lsls	r4, r4, #23
 800080a:	0a58      	lsrs	r0, r3, #9
 800080c:	07d2      	lsls	r2, r2, #31
 800080e:	4320      	orrs	r0, r4
 8000810:	4310      	orrs	r0, r2
 8000812:	bc0c      	pop	{r2, r3}
 8000814:	4690      	mov	r8, r2
 8000816:	4699      	mov	r9, r3
 8000818:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800081a:	2e00      	cmp	r6, #0
 800081c:	d174      	bne.n	8000908 <__aeabi_fsub+0x1b4>
 800081e:	1c60      	adds	r0, r4, #1
 8000820:	b2c0      	uxtb	r0, r0
 8000822:	2801      	cmp	r0, #1
 8000824:	dc00      	bgt.n	8000828 <__aeabi_fsub+0xd4>
 8000826:	e0a7      	b.n	8000978 <__aeabi_fsub+0x224>
 8000828:	464a      	mov	r2, r9
 800082a:	1a9c      	subs	r4, r3, r2
 800082c:	0162      	lsls	r2, r4, #5
 800082e:	d500      	bpl.n	8000832 <__aeabi_fsub+0xde>
 8000830:	e0b6      	b.n	80009a0 <__aeabi_fsub+0x24c>
 8000832:	2c00      	cmp	r4, #0
 8000834:	d1be      	bne.n	80007b4 <__aeabi_fsub+0x60>
 8000836:	2200      	movs	r2, #0
 8000838:	2400      	movs	r4, #0
 800083a:	2300      	movs	r3, #0
 800083c:	e7e3      	b.n	8000806 <__aeabi_fsub+0xb2>
 800083e:	2e00      	cmp	r6, #0
 8000840:	dc00      	bgt.n	8000844 <__aeabi_fsub+0xf0>
 8000842:	e085      	b.n	8000950 <__aeabi_fsub+0x1fc>
 8000844:	2800      	cmp	r0, #0
 8000846:	d046      	beq.n	80008d6 <__aeabi_fsub+0x182>
 8000848:	2cff      	cmp	r4, #255	; 0xff
 800084a:	d049      	beq.n	80008e0 <__aeabi_fsub+0x18c>
 800084c:	2280      	movs	r2, #128	; 0x80
 800084e:	4648      	mov	r0, r9
 8000850:	04d2      	lsls	r2, r2, #19
 8000852:	4310      	orrs	r0, r2
 8000854:	4681      	mov	r9, r0
 8000856:	2201      	movs	r2, #1
 8000858:	2e1b      	cmp	r6, #27
 800085a:	dc09      	bgt.n	8000870 <__aeabi_fsub+0x11c>
 800085c:	2020      	movs	r0, #32
 800085e:	464c      	mov	r4, r9
 8000860:	1b80      	subs	r0, r0, r6
 8000862:	4084      	lsls	r4, r0
 8000864:	464a      	mov	r2, r9
 8000866:	0020      	movs	r0, r4
 8000868:	40f2      	lsrs	r2, r6
 800086a:	1e44      	subs	r4, r0, #1
 800086c:	41a0      	sbcs	r0, r4
 800086e:	4302      	orrs	r2, r0
 8000870:	189b      	adds	r3, r3, r2
 8000872:	015a      	lsls	r2, r3, #5
 8000874:	d528      	bpl.n	80008c8 <__aeabi_fsub+0x174>
 8000876:	3501      	adds	r5, #1
 8000878:	2dff      	cmp	r5, #255	; 0xff
 800087a:	d100      	bne.n	800087e <__aeabi_fsub+0x12a>
 800087c:	e0a8      	b.n	80009d0 <__aeabi_fsub+0x27c>
 800087e:	2201      	movs	r2, #1
 8000880:	2407      	movs	r4, #7
 8000882:	4994      	ldr	r1, [pc, #592]	; (8000ad4 <__aeabi_fsub+0x380>)
 8000884:	401a      	ands	r2, r3
 8000886:	085b      	lsrs	r3, r3, #1
 8000888:	400b      	ands	r3, r1
 800088a:	4313      	orrs	r3, r2
 800088c:	401c      	ands	r4, r3
 800088e:	e7a6      	b.n	80007de <__aeabi_fsub+0x8a>
 8000890:	2e00      	cmp	r6, #0
 8000892:	d000      	beq.n	8000896 <__aeabi_fsub+0x142>
 8000894:	e778      	b.n	8000788 <__aeabi_fsub+0x34>
 8000896:	e775      	b.n	8000784 <__aeabi_fsub+0x30>
 8000898:	2cff      	cmp	r4, #255	; 0xff
 800089a:	d054      	beq.n	8000946 <__aeabi_fsub+0x1f2>
 800089c:	2280      	movs	r2, #128	; 0x80
 800089e:	4649      	mov	r1, r9
 80008a0:	04d2      	lsls	r2, r2, #19
 80008a2:	4311      	orrs	r1, r2
 80008a4:	4689      	mov	r9, r1
 80008a6:	2201      	movs	r2, #1
 80008a8:	2e1b      	cmp	r6, #27
 80008aa:	dc09      	bgt.n	80008c0 <__aeabi_fsub+0x16c>
 80008ac:	2120      	movs	r1, #32
 80008ae:	4648      	mov	r0, r9
 80008b0:	1b89      	subs	r1, r1, r6
 80008b2:	4088      	lsls	r0, r1
 80008b4:	464a      	mov	r2, r9
 80008b6:	0001      	movs	r1, r0
 80008b8:	40f2      	lsrs	r2, r6
 80008ba:	1e48      	subs	r0, r1, #1
 80008bc:	4181      	sbcs	r1, r0
 80008be:	430a      	orrs	r2, r1
 80008c0:	1a9b      	subs	r3, r3, r2
 80008c2:	015a      	lsls	r2, r3, #5
 80008c4:	d500      	bpl.n	80008c8 <__aeabi_fsub+0x174>
 80008c6:	e773      	b.n	80007b0 <__aeabi_fsub+0x5c>
 80008c8:	2201      	movs	r2, #1
 80008ca:	4641      	mov	r1, r8
 80008cc:	400a      	ands	r2, r1
 80008ce:	0759      	lsls	r1, r3, #29
 80008d0:	d000      	beq.n	80008d4 <__aeabi_fsub+0x180>
 80008d2:	e789      	b.n	80007e8 <__aeabi_fsub+0x94>
 80008d4:	e011      	b.n	80008fa <__aeabi_fsub+0x1a6>
 80008d6:	4648      	mov	r0, r9
 80008d8:	2800      	cmp	r0, #0
 80008da:	d158      	bne.n	800098e <__aeabi_fsub+0x23a>
 80008dc:	2cff      	cmp	r4, #255	; 0xff
 80008de:	d10c      	bne.n	80008fa <__aeabi_fsub+0x1a6>
 80008e0:	08db      	lsrs	r3, r3, #3
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d100      	bne.n	80008e8 <__aeabi_fsub+0x194>
 80008e6:	e78c      	b.n	8000802 <__aeabi_fsub+0xae>
 80008e8:	2080      	movs	r0, #128	; 0x80
 80008ea:	03c0      	lsls	r0, r0, #15
 80008ec:	4303      	orrs	r3, r0
 80008ee:	025b      	lsls	r3, r3, #9
 80008f0:	0a5b      	lsrs	r3, r3, #9
 80008f2:	24ff      	movs	r4, #255	; 0xff
 80008f4:	e787      	b.n	8000806 <__aeabi_fsub+0xb2>
 80008f6:	2cff      	cmp	r4, #255	; 0xff
 80008f8:	d025      	beq.n	8000946 <__aeabi_fsub+0x1f2>
 80008fa:	08db      	lsrs	r3, r3, #3
 80008fc:	2dff      	cmp	r5, #255	; 0xff
 80008fe:	d0f0      	beq.n	80008e2 <__aeabi_fsub+0x18e>
 8000900:	025b      	lsls	r3, r3, #9
 8000902:	0a5b      	lsrs	r3, r3, #9
 8000904:	b2ec      	uxtb	r4, r5
 8000906:	e77e      	b.n	8000806 <__aeabi_fsub+0xb2>
 8000908:	2c00      	cmp	r4, #0
 800090a:	d04d      	beq.n	80009a8 <__aeabi_fsub+0x254>
 800090c:	28ff      	cmp	r0, #255	; 0xff
 800090e:	d018      	beq.n	8000942 <__aeabi_fsub+0x1ee>
 8000910:	2480      	movs	r4, #128	; 0x80
 8000912:	04e4      	lsls	r4, r4, #19
 8000914:	4272      	negs	r2, r6
 8000916:	4323      	orrs	r3, r4
 8000918:	2a1b      	cmp	r2, #27
 800091a:	dd00      	ble.n	800091e <__aeabi_fsub+0x1ca>
 800091c:	e0c4      	b.n	8000aa8 <__aeabi_fsub+0x354>
 800091e:	001c      	movs	r4, r3
 8000920:	2520      	movs	r5, #32
 8000922:	40d4      	lsrs	r4, r2
 8000924:	1aaa      	subs	r2, r5, r2
 8000926:	4093      	lsls	r3, r2
 8000928:	1e5a      	subs	r2, r3, #1
 800092a:	4193      	sbcs	r3, r2
 800092c:	4323      	orrs	r3, r4
 800092e:	464a      	mov	r2, r9
 8000930:	0005      	movs	r5, r0
 8000932:	1ad3      	subs	r3, r2, r3
 8000934:	4688      	mov	r8, r1
 8000936:	e738      	b.n	80007aa <__aeabi_fsub+0x56>
 8000938:	1c72      	adds	r2, r6, #1
 800093a:	d0f8      	beq.n	800092e <__aeabi_fsub+0x1da>
 800093c:	43f2      	mvns	r2, r6
 800093e:	28ff      	cmp	r0, #255	; 0xff
 8000940:	d1ea      	bne.n	8000918 <__aeabi_fsub+0x1c4>
 8000942:	000a      	movs	r2, r1
 8000944:	464b      	mov	r3, r9
 8000946:	25ff      	movs	r5, #255	; 0xff
 8000948:	e7d7      	b.n	80008fa <__aeabi_fsub+0x1a6>
 800094a:	019b      	lsls	r3, r3, #6
 800094c:	0a5b      	lsrs	r3, r3, #9
 800094e:	e75a      	b.n	8000806 <__aeabi_fsub+0xb2>
 8000950:	2e00      	cmp	r6, #0
 8000952:	d141      	bne.n	80009d8 <__aeabi_fsub+0x284>
 8000954:	1c65      	adds	r5, r4, #1
 8000956:	b2e9      	uxtb	r1, r5
 8000958:	2901      	cmp	r1, #1
 800095a:	dd45      	ble.n	80009e8 <__aeabi_fsub+0x294>
 800095c:	2dff      	cmp	r5, #255	; 0xff
 800095e:	d100      	bne.n	8000962 <__aeabi_fsub+0x20e>
 8000960:	e74f      	b.n	8000802 <__aeabi_fsub+0xae>
 8000962:	2407      	movs	r4, #7
 8000964:	444b      	add	r3, r9
 8000966:	085b      	lsrs	r3, r3, #1
 8000968:	401c      	ands	r4, r3
 800096a:	e738      	b.n	80007de <__aeabi_fsub+0x8a>
 800096c:	2207      	movs	r2, #7
 800096e:	4b5a      	ldr	r3, [pc, #360]	; (8000ad8 <__aeabi_fsub+0x384>)
 8000970:	1a2d      	subs	r5, r5, r0
 8000972:	4023      	ands	r3, r4
 8000974:	4014      	ands	r4, r2
 8000976:	e732      	b.n	80007de <__aeabi_fsub+0x8a>
 8000978:	2c00      	cmp	r4, #0
 800097a:	d11d      	bne.n	80009b8 <__aeabi_fsub+0x264>
 800097c:	2b00      	cmp	r3, #0
 800097e:	d17a      	bne.n	8000a76 <__aeabi_fsub+0x322>
 8000980:	464b      	mov	r3, r9
 8000982:	2b00      	cmp	r3, #0
 8000984:	d100      	bne.n	8000988 <__aeabi_fsub+0x234>
 8000986:	e091      	b.n	8000aac <__aeabi_fsub+0x358>
 8000988:	000a      	movs	r2, r1
 800098a:	2500      	movs	r5, #0
 800098c:	e7b5      	b.n	80008fa <__aeabi_fsub+0x1a6>
 800098e:	3e01      	subs	r6, #1
 8000990:	2e00      	cmp	r6, #0
 8000992:	d119      	bne.n	80009c8 <__aeabi_fsub+0x274>
 8000994:	444b      	add	r3, r9
 8000996:	e76c      	b.n	8000872 <__aeabi_fsub+0x11e>
 8000998:	2cff      	cmp	r4, #255	; 0xff
 800099a:	d184      	bne.n	80008a6 <__aeabi_fsub+0x152>
 800099c:	25ff      	movs	r5, #255	; 0xff
 800099e:	e7ac      	b.n	80008fa <__aeabi_fsub+0x1a6>
 80009a0:	464a      	mov	r2, r9
 80009a2:	4688      	mov	r8, r1
 80009a4:	1ad4      	subs	r4, r2, r3
 80009a6:	e705      	b.n	80007b4 <__aeabi_fsub+0x60>
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d1c5      	bne.n	8000938 <__aeabi_fsub+0x1e4>
 80009ac:	000a      	movs	r2, r1
 80009ae:	28ff      	cmp	r0, #255	; 0xff
 80009b0:	d0c8      	beq.n	8000944 <__aeabi_fsub+0x1f0>
 80009b2:	0005      	movs	r5, r0
 80009b4:	464b      	mov	r3, r9
 80009b6:	e7a0      	b.n	80008fa <__aeabi_fsub+0x1a6>
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d149      	bne.n	8000a50 <__aeabi_fsub+0x2fc>
 80009bc:	464b      	mov	r3, r9
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d077      	beq.n	8000ab2 <__aeabi_fsub+0x35e>
 80009c2:	000a      	movs	r2, r1
 80009c4:	25ff      	movs	r5, #255	; 0xff
 80009c6:	e798      	b.n	80008fa <__aeabi_fsub+0x1a6>
 80009c8:	2cff      	cmp	r4, #255	; 0xff
 80009ca:	d000      	beq.n	80009ce <__aeabi_fsub+0x27a>
 80009cc:	e743      	b.n	8000856 <__aeabi_fsub+0x102>
 80009ce:	e787      	b.n	80008e0 <__aeabi_fsub+0x18c>
 80009d0:	000a      	movs	r2, r1
 80009d2:	24ff      	movs	r4, #255	; 0xff
 80009d4:	2300      	movs	r3, #0
 80009d6:	e716      	b.n	8000806 <__aeabi_fsub+0xb2>
 80009d8:	2c00      	cmp	r4, #0
 80009da:	d115      	bne.n	8000a08 <__aeabi_fsub+0x2b4>
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d157      	bne.n	8000a90 <__aeabi_fsub+0x33c>
 80009e0:	28ff      	cmp	r0, #255	; 0xff
 80009e2:	d1e6      	bne.n	80009b2 <__aeabi_fsub+0x25e>
 80009e4:	464b      	mov	r3, r9
 80009e6:	e77b      	b.n	80008e0 <__aeabi_fsub+0x18c>
 80009e8:	2c00      	cmp	r4, #0
 80009ea:	d120      	bne.n	8000a2e <__aeabi_fsub+0x2da>
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d057      	beq.n	8000aa0 <__aeabi_fsub+0x34c>
 80009f0:	4649      	mov	r1, r9
 80009f2:	2900      	cmp	r1, #0
 80009f4:	d053      	beq.n	8000a9e <__aeabi_fsub+0x34a>
 80009f6:	444b      	add	r3, r9
 80009f8:	015a      	lsls	r2, r3, #5
 80009fa:	d568      	bpl.n	8000ace <__aeabi_fsub+0x37a>
 80009fc:	2407      	movs	r4, #7
 80009fe:	4a36      	ldr	r2, [pc, #216]	; (8000ad8 <__aeabi_fsub+0x384>)
 8000a00:	401c      	ands	r4, r3
 8000a02:	2501      	movs	r5, #1
 8000a04:	4013      	ands	r3, r2
 8000a06:	e6ea      	b.n	80007de <__aeabi_fsub+0x8a>
 8000a08:	28ff      	cmp	r0, #255	; 0xff
 8000a0a:	d0eb      	beq.n	80009e4 <__aeabi_fsub+0x290>
 8000a0c:	2280      	movs	r2, #128	; 0x80
 8000a0e:	04d2      	lsls	r2, r2, #19
 8000a10:	4276      	negs	r6, r6
 8000a12:	4313      	orrs	r3, r2
 8000a14:	2e1b      	cmp	r6, #27
 8000a16:	dc53      	bgt.n	8000ac0 <__aeabi_fsub+0x36c>
 8000a18:	2520      	movs	r5, #32
 8000a1a:	1bad      	subs	r5, r5, r6
 8000a1c:	001a      	movs	r2, r3
 8000a1e:	40ab      	lsls	r3, r5
 8000a20:	40f2      	lsrs	r2, r6
 8000a22:	1e5c      	subs	r4, r3, #1
 8000a24:	41a3      	sbcs	r3, r4
 8000a26:	4313      	orrs	r3, r2
 8000a28:	444b      	add	r3, r9
 8000a2a:	0005      	movs	r5, r0
 8000a2c:	e721      	b.n	8000872 <__aeabi_fsub+0x11e>
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d0d8      	beq.n	80009e4 <__aeabi_fsub+0x290>
 8000a32:	4649      	mov	r1, r9
 8000a34:	2900      	cmp	r1, #0
 8000a36:	d100      	bne.n	8000a3a <__aeabi_fsub+0x2e6>
 8000a38:	e752      	b.n	80008e0 <__aeabi_fsub+0x18c>
 8000a3a:	2180      	movs	r1, #128	; 0x80
 8000a3c:	03c9      	lsls	r1, r1, #15
 8000a3e:	420f      	tst	r7, r1
 8000a40:	d100      	bne.n	8000a44 <__aeabi_fsub+0x2f0>
 8000a42:	e74d      	b.n	80008e0 <__aeabi_fsub+0x18c>
 8000a44:	4660      	mov	r0, ip
 8000a46:	4208      	tst	r0, r1
 8000a48:	d000      	beq.n	8000a4c <__aeabi_fsub+0x2f8>
 8000a4a:	e749      	b.n	80008e0 <__aeabi_fsub+0x18c>
 8000a4c:	464b      	mov	r3, r9
 8000a4e:	e747      	b.n	80008e0 <__aeabi_fsub+0x18c>
 8000a50:	4648      	mov	r0, r9
 8000a52:	25ff      	movs	r5, #255	; 0xff
 8000a54:	2800      	cmp	r0, #0
 8000a56:	d100      	bne.n	8000a5a <__aeabi_fsub+0x306>
 8000a58:	e74f      	b.n	80008fa <__aeabi_fsub+0x1a6>
 8000a5a:	2280      	movs	r2, #128	; 0x80
 8000a5c:	03d2      	lsls	r2, r2, #15
 8000a5e:	4217      	tst	r7, r2
 8000a60:	d004      	beq.n	8000a6c <__aeabi_fsub+0x318>
 8000a62:	4660      	mov	r0, ip
 8000a64:	4210      	tst	r0, r2
 8000a66:	d101      	bne.n	8000a6c <__aeabi_fsub+0x318>
 8000a68:	464b      	mov	r3, r9
 8000a6a:	4688      	mov	r8, r1
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	4641      	mov	r1, r8
 8000a70:	25ff      	movs	r5, #255	; 0xff
 8000a72:	400a      	ands	r2, r1
 8000a74:	e741      	b.n	80008fa <__aeabi_fsub+0x1a6>
 8000a76:	4648      	mov	r0, r9
 8000a78:	2800      	cmp	r0, #0
 8000a7a:	d01f      	beq.n	8000abc <__aeabi_fsub+0x368>
 8000a7c:	1a1a      	subs	r2, r3, r0
 8000a7e:	0150      	lsls	r0, r2, #5
 8000a80:	d520      	bpl.n	8000ac4 <__aeabi_fsub+0x370>
 8000a82:	464a      	mov	r2, r9
 8000a84:	2407      	movs	r4, #7
 8000a86:	1ad3      	subs	r3, r2, r3
 8000a88:	401c      	ands	r4, r3
 8000a8a:	4688      	mov	r8, r1
 8000a8c:	2500      	movs	r5, #0
 8000a8e:	e6a6      	b.n	80007de <__aeabi_fsub+0x8a>
 8000a90:	1c74      	adds	r4, r6, #1
 8000a92:	d0c9      	beq.n	8000a28 <__aeabi_fsub+0x2d4>
 8000a94:	43f6      	mvns	r6, r6
 8000a96:	28ff      	cmp	r0, #255	; 0xff
 8000a98:	d1bc      	bne.n	8000a14 <__aeabi_fsub+0x2c0>
 8000a9a:	464b      	mov	r3, r9
 8000a9c:	e720      	b.n	80008e0 <__aeabi_fsub+0x18c>
 8000a9e:	4699      	mov	r9, r3
 8000aa0:	464b      	mov	r3, r9
 8000aa2:	2500      	movs	r5, #0
 8000aa4:	08db      	lsrs	r3, r3, #3
 8000aa6:	e72b      	b.n	8000900 <__aeabi_fsub+0x1ac>
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	e740      	b.n	800092e <__aeabi_fsub+0x1da>
 8000aac:	2200      	movs	r2, #0
 8000aae:	2300      	movs	r3, #0
 8000ab0:	e6a9      	b.n	8000806 <__aeabi_fsub+0xb2>
 8000ab2:	2380      	movs	r3, #128	; 0x80
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	03db      	lsls	r3, r3, #15
 8000ab8:	24ff      	movs	r4, #255	; 0xff
 8000aba:	e6a4      	b.n	8000806 <__aeabi_fsub+0xb2>
 8000abc:	2500      	movs	r5, #0
 8000abe:	e71c      	b.n	80008fa <__aeabi_fsub+0x1a6>
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	e7b1      	b.n	8000a28 <__aeabi_fsub+0x2d4>
 8000ac4:	2a00      	cmp	r2, #0
 8000ac6:	d0f1      	beq.n	8000aac <__aeabi_fsub+0x358>
 8000ac8:	0013      	movs	r3, r2
 8000aca:	2500      	movs	r5, #0
 8000acc:	e6fc      	b.n	80008c8 <__aeabi_fsub+0x174>
 8000ace:	2500      	movs	r5, #0
 8000ad0:	e6fa      	b.n	80008c8 <__aeabi_fsub+0x174>
 8000ad2:	46c0      	nop			; (mov r8, r8)
 8000ad4:	7dffffff 	.word	0x7dffffff
 8000ad8:	fbffffff 	.word	0xfbffffff

08000adc <__aeabi_ui2f>:
 8000adc:	b570      	push	{r4, r5, r6, lr}
 8000ade:	1e04      	subs	r4, r0, #0
 8000ae0:	d034      	beq.n	8000b4c <__aeabi_ui2f+0x70>
 8000ae2:	f001 fe0f 	bl	8002704 <__clzsi2>
 8000ae6:	229e      	movs	r2, #158	; 0x9e
 8000ae8:	1a12      	subs	r2, r2, r0
 8000aea:	2a96      	cmp	r2, #150	; 0x96
 8000aec:	dc07      	bgt.n	8000afe <__aeabi_ui2f+0x22>
 8000aee:	b2d2      	uxtb	r2, r2
 8000af0:	2808      	cmp	r0, #8
 8000af2:	dd2e      	ble.n	8000b52 <__aeabi_ui2f+0x76>
 8000af4:	3808      	subs	r0, #8
 8000af6:	4084      	lsls	r4, r0
 8000af8:	0260      	lsls	r0, r4, #9
 8000afa:	0a40      	lsrs	r0, r0, #9
 8000afc:	e021      	b.n	8000b42 <__aeabi_ui2f+0x66>
 8000afe:	2a99      	cmp	r2, #153	; 0x99
 8000b00:	dd09      	ble.n	8000b16 <__aeabi_ui2f+0x3a>
 8000b02:	0003      	movs	r3, r0
 8000b04:	0021      	movs	r1, r4
 8000b06:	331b      	adds	r3, #27
 8000b08:	4099      	lsls	r1, r3
 8000b0a:	1e4b      	subs	r3, r1, #1
 8000b0c:	4199      	sbcs	r1, r3
 8000b0e:	2305      	movs	r3, #5
 8000b10:	1a1b      	subs	r3, r3, r0
 8000b12:	40dc      	lsrs	r4, r3
 8000b14:	430c      	orrs	r4, r1
 8000b16:	2805      	cmp	r0, #5
 8000b18:	dd01      	ble.n	8000b1e <__aeabi_ui2f+0x42>
 8000b1a:	1f43      	subs	r3, r0, #5
 8000b1c:	409c      	lsls	r4, r3
 8000b1e:	0023      	movs	r3, r4
 8000b20:	490d      	ldr	r1, [pc, #52]	; (8000b58 <__aeabi_ui2f+0x7c>)
 8000b22:	400b      	ands	r3, r1
 8000b24:	0765      	lsls	r5, r4, #29
 8000b26:	d009      	beq.n	8000b3c <__aeabi_ui2f+0x60>
 8000b28:	250f      	movs	r5, #15
 8000b2a:	402c      	ands	r4, r5
 8000b2c:	2c04      	cmp	r4, #4
 8000b2e:	d005      	beq.n	8000b3c <__aeabi_ui2f+0x60>
 8000b30:	3304      	adds	r3, #4
 8000b32:	015c      	lsls	r4, r3, #5
 8000b34:	d502      	bpl.n	8000b3c <__aeabi_ui2f+0x60>
 8000b36:	229f      	movs	r2, #159	; 0x9f
 8000b38:	400b      	ands	r3, r1
 8000b3a:	1a12      	subs	r2, r2, r0
 8000b3c:	019b      	lsls	r3, r3, #6
 8000b3e:	0a58      	lsrs	r0, r3, #9
 8000b40:	b2d2      	uxtb	r2, r2
 8000b42:	0240      	lsls	r0, r0, #9
 8000b44:	05d2      	lsls	r2, r2, #23
 8000b46:	0a40      	lsrs	r0, r0, #9
 8000b48:	4310      	orrs	r0, r2
 8000b4a:	bd70      	pop	{r4, r5, r6, pc}
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	2000      	movs	r0, #0
 8000b50:	e7f7      	b.n	8000b42 <__aeabi_ui2f+0x66>
 8000b52:	0260      	lsls	r0, r4, #9
 8000b54:	0a40      	lsrs	r0, r0, #9
 8000b56:	e7f4      	b.n	8000b42 <__aeabi_ui2f+0x66>
 8000b58:	fbffffff 	.word	0xfbffffff

08000b5c <__aeabi_dadd>:
 8000b5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b5e:	464f      	mov	r7, r9
 8000b60:	4646      	mov	r6, r8
 8000b62:	46d6      	mov	lr, sl
 8000b64:	000c      	movs	r4, r1
 8000b66:	0309      	lsls	r1, r1, #12
 8000b68:	b5c0      	push	{r6, r7, lr}
 8000b6a:	0a49      	lsrs	r1, r1, #9
 8000b6c:	0f47      	lsrs	r7, r0, #29
 8000b6e:	005e      	lsls	r6, r3, #1
 8000b70:	4339      	orrs	r1, r7
 8000b72:	031f      	lsls	r7, r3, #12
 8000b74:	0fdb      	lsrs	r3, r3, #31
 8000b76:	469c      	mov	ip, r3
 8000b78:	0065      	lsls	r5, r4, #1
 8000b7a:	0a7b      	lsrs	r3, r7, #9
 8000b7c:	0f57      	lsrs	r7, r2, #29
 8000b7e:	431f      	orrs	r7, r3
 8000b80:	0d6d      	lsrs	r5, r5, #21
 8000b82:	0fe4      	lsrs	r4, r4, #31
 8000b84:	0d76      	lsrs	r6, r6, #21
 8000b86:	46a1      	mov	r9, r4
 8000b88:	00c0      	lsls	r0, r0, #3
 8000b8a:	46b8      	mov	r8, r7
 8000b8c:	00d2      	lsls	r2, r2, #3
 8000b8e:	1bab      	subs	r3, r5, r6
 8000b90:	4564      	cmp	r4, ip
 8000b92:	d07b      	beq.n	8000c8c <__aeabi_dadd+0x130>
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	dd5f      	ble.n	8000c58 <__aeabi_dadd+0xfc>
 8000b98:	2e00      	cmp	r6, #0
 8000b9a:	d000      	beq.n	8000b9e <__aeabi_dadd+0x42>
 8000b9c:	e0a4      	b.n	8000ce8 <__aeabi_dadd+0x18c>
 8000b9e:	003e      	movs	r6, r7
 8000ba0:	4316      	orrs	r6, r2
 8000ba2:	d100      	bne.n	8000ba6 <__aeabi_dadd+0x4a>
 8000ba4:	e112      	b.n	8000dcc <__aeabi_dadd+0x270>
 8000ba6:	1e5e      	subs	r6, r3, #1
 8000ba8:	2e00      	cmp	r6, #0
 8000baa:	d000      	beq.n	8000bae <__aeabi_dadd+0x52>
 8000bac:	e19e      	b.n	8000eec <__aeabi_dadd+0x390>
 8000bae:	1a87      	subs	r7, r0, r2
 8000bb0:	4643      	mov	r3, r8
 8000bb2:	42b8      	cmp	r0, r7
 8000bb4:	4180      	sbcs	r0, r0
 8000bb6:	2501      	movs	r5, #1
 8000bb8:	1ac9      	subs	r1, r1, r3
 8000bba:	4240      	negs	r0, r0
 8000bbc:	1a09      	subs	r1, r1, r0
 8000bbe:	020b      	lsls	r3, r1, #8
 8000bc0:	d400      	bmi.n	8000bc4 <__aeabi_dadd+0x68>
 8000bc2:	e131      	b.n	8000e28 <__aeabi_dadd+0x2cc>
 8000bc4:	0249      	lsls	r1, r1, #9
 8000bc6:	0a4e      	lsrs	r6, r1, #9
 8000bc8:	2e00      	cmp	r6, #0
 8000bca:	d100      	bne.n	8000bce <__aeabi_dadd+0x72>
 8000bcc:	e16e      	b.n	8000eac <__aeabi_dadd+0x350>
 8000bce:	0030      	movs	r0, r6
 8000bd0:	f001 fd98 	bl	8002704 <__clzsi2>
 8000bd4:	0003      	movs	r3, r0
 8000bd6:	3b08      	subs	r3, #8
 8000bd8:	2b1f      	cmp	r3, #31
 8000bda:	dd00      	ble.n	8000bde <__aeabi_dadd+0x82>
 8000bdc:	e161      	b.n	8000ea2 <__aeabi_dadd+0x346>
 8000bde:	2220      	movs	r2, #32
 8000be0:	0039      	movs	r1, r7
 8000be2:	1ad2      	subs	r2, r2, r3
 8000be4:	409e      	lsls	r6, r3
 8000be6:	40d1      	lsrs	r1, r2
 8000be8:	409f      	lsls	r7, r3
 8000bea:	430e      	orrs	r6, r1
 8000bec:	429d      	cmp	r5, r3
 8000bee:	dd00      	ble.n	8000bf2 <__aeabi_dadd+0x96>
 8000bf0:	e151      	b.n	8000e96 <__aeabi_dadd+0x33a>
 8000bf2:	1b5d      	subs	r5, r3, r5
 8000bf4:	1c6b      	adds	r3, r5, #1
 8000bf6:	2b1f      	cmp	r3, #31
 8000bf8:	dd00      	ble.n	8000bfc <__aeabi_dadd+0xa0>
 8000bfa:	e17c      	b.n	8000ef6 <__aeabi_dadd+0x39a>
 8000bfc:	2120      	movs	r1, #32
 8000bfe:	1ac9      	subs	r1, r1, r3
 8000c00:	003d      	movs	r5, r7
 8000c02:	0030      	movs	r0, r6
 8000c04:	408f      	lsls	r7, r1
 8000c06:	4088      	lsls	r0, r1
 8000c08:	40dd      	lsrs	r5, r3
 8000c0a:	1e79      	subs	r1, r7, #1
 8000c0c:	418f      	sbcs	r7, r1
 8000c0e:	0031      	movs	r1, r6
 8000c10:	2207      	movs	r2, #7
 8000c12:	4328      	orrs	r0, r5
 8000c14:	40d9      	lsrs	r1, r3
 8000c16:	2500      	movs	r5, #0
 8000c18:	4307      	orrs	r7, r0
 8000c1a:	403a      	ands	r2, r7
 8000c1c:	2a00      	cmp	r2, #0
 8000c1e:	d009      	beq.n	8000c34 <__aeabi_dadd+0xd8>
 8000c20:	230f      	movs	r3, #15
 8000c22:	403b      	ands	r3, r7
 8000c24:	2b04      	cmp	r3, #4
 8000c26:	d005      	beq.n	8000c34 <__aeabi_dadd+0xd8>
 8000c28:	1d3b      	adds	r3, r7, #4
 8000c2a:	42bb      	cmp	r3, r7
 8000c2c:	41bf      	sbcs	r7, r7
 8000c2e:	427f      	negs	r7, r7
 8000c30:	19c9      	adds	r1, r1, r7
 8000c32:	001f      	movs	r7, r3
 8000c34:	020b      	lsls	r3, r1, #8
 8000c36:	d400      	bmi.n	8000c3a <__aeabi_dadd+0xde>
 8000c38:	e226      	b.n	8001088 <__aeabi_dadd+0x52c>
 8000c3a:	1c6a      	adds	r2, r5, #1
 8000c3c:	4bc6      	ldr	r3, [pc, #792]	; (8000f58 <__aeabi_dadd+0x3fc>)
 8000c3e:	0555      	lsls	r5, r2, #21
 8000c40:	0d6d      	lsrs	r5, r5, #21
 8000c42:	429a      	cmp	r2, r3
 8000c44:	d100      	bne.n	8000c48 <__aeabi_dadd+0xec>
 8000c46:	e106      	b.n	8000e56 <__aeabi_dadd+0x2fa>
 8000c48:	4ac4      	ldr	r2, [pc, #784]	; (8000f5c <__aeabi_dadd+0x400>)
 8000c4a:	08ff      	lsrs	r7, r7, #3
 8000c4c:	400a      	ands	r2, r1
 8000c4e:	0753      	lsls	r3, r2, #29
 8000c50:	0252      	lsls	r2, r2, #9
 8000c52:	433b      	orrs	r3, r7
 8000c54:	0b12      	lsrs	r2, r2, #12
 8000c56:	e08e      	b.n	8000d76 <__aeabi_dadd+0x21a>
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d000      	beq.n	8000c5e <__aeabi_dadd+0x102>
 8000c5c:	e0b8      	b.n	8000dd0 <__aeabi_dadd+0x274>
 8000c5e:	1c6b      	adds	r3, r5, #1
 8000c60:	055b      	lsls	r3, r3, #21
 8000c62:	0d5b      	lsrs	r3, r3, #21
 8000c64:	2b01      	cmp	r3, #1
 8000c66:	dc00      	bgt.n	8000c6a <__aeabi_dadd+0x10e>
 8000c68:	e130      	b.n	8000ecc <__aeabi_dadd+0x370>
 8000c6a:	1a87      	subs	r7, r0, r2
 8000c6c:	4643      	mov	r3, r8
 8000c6e:	42b8      	cmp	r0, r7
 8000c70:	41b6      	sbcs	r6, r6
 8000c72:	1acb      	subs	r3, r1, r3
 8000c74:	4276      	negs	r6, r6
 8000c76:	1b9e      	subs	r6, r3, r6
 8000c78:	0233      	lsls	r3, r6, #8
 8000c7a:	d500      	bpl.n	8000c7e <__aeabi_dadd+0x122>
 8000c7c:	e14c      	b.n	8000f18 <__aeabi_dadd+0x3bc>
 8000c7e:	003b      	movs	r3, r7
 8000c80:	4333      	orrs	r3, r6
 8000c82:	d1a1      	bne.n	8000bc8 <__aeabi_dadd+0x6c>
 8000c84:	2200      	movs	r2, #0
 8000c86:	2400      	movs	r4, #0
 8000c88:	2500      	movs	r5, #0
 8000c8a:	e070      	b.n	8000d6e <__aeabi_dadd+0x212>
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	dc00      	bgt.n	8000c92 <__aeabi_dadd+0x136>
 8000c90:	e0e5      	b.n	8000e5e <__aeabi_dadd+0x302>
 8000c92:	2e00      	cmp	r6, #0
 8000c94:	d100      	bne.n	8000c98 <__aeabi_dadd+0x13c>
 8000c96:	e083      	b.n	8000da0 <__aeabi_dadd+0x244>
 8000c98:	4eaf      	ldr	r6, [pc, #700]	; (8000f58 <__aeabi_dadd+0x3fc>)
 8000c9a:	42b5      	cmp	r5, r6
 8000c9c:	d060      	beq.n	8000d60 <__aeabi_dadd+0x204>
 8000c9e:	2680      	movs	r6, #128	; 0x80
 8000ca0:	0436      	lsls	r6, r6, #16
 8000ca2:	4337      	orrs	r7, r6
 8000ca4:	46b8      	mov	r8, r7
 8000ca6:	2b38      	cmp	r3, #56	; 0x38
 8000ca8:	dc00      	bgt.n	8000cac <__aeabi_dadd+0x150>
 8000caa:	e13e      	b.n	8000f2a <__aeabi_dadd+0x3ce>
 8000cac:	4643      	mov	r3, r8
 8000cae:	4313      	orrs	r3, r2
 8000cb0:	001f      	movs	r7, r3
 8000cb2:	1e7a      	subs	r2, r7, #1
 8000cb4:	4197      	sbcs	r7, r2
 8000cb6:	183f      	adds	r7, r7, r0
 8000cb8:	4287      	cmp	r7, r0
 8000cba:	4180      	sbcs	r0, r0
 8000cbc:	4240      	negs	r0, r0
 8000cbe:	1809      	adds	r1, r1, r0
 8000cc0:	020b      	lsls	r3, r1, #8
 8000cc2:	d400      	bmi.n	8000cc6 <__aeabi_dadd+0x16a>
 8000cc4:	e0b0      	b.n	8000e28 <__aeabi_dadd+0x2cc>
 8000cc6:	4ba4      	ldr	r3, [pc, #656]	; (8000f58 <__aeabi_dadd+0x3fc>)
 8000cc8:	3501      	adds	r5, #1
 8000cca:	429d      	cmp	r5, r3
 8000ccc:	d100      	bne.n	8000cd0 <__aeabi_dadd+0x174>
 8000cce:	e0c3      	b.n	8000e58 <__aeabi_dadd+0x2fc>
 8000cd0:	4aa2      	ldr	r2, [pc, #648]	; (8000f5c <__aeabi_dadd+0x400>)
 8000cd2:	087b      	lsrs	r3, r7, #1
 8000cd4:	400a      	ands	r2, r1
 8000cd6:	2101      	movs	r1, #1
 8000cd8:	400f      	ands	r7, r1
 8000cda:	431f      	orrs	r7, r3
 8000cdc:	0851      	lsrs	r1, r2, #1
 8000cde:	07d3      	lsls	r3, r2, #31
 8000ce0:	2207      	movs	r2, #7
 8000ce2:	431f      	orrs	r7, r3
 8000ce4:	403a      	ands	r2, r7
 8000ce6:	e799      	b.n	8000c1c <__aeabi_dadd+0xc0>
 8000ce8:	4e9b      	ldr	r6, [pc, #620]	; (8000f58 <__aeabi_dadd+0x3fc>)
 8000cea:	42b5      	cmp	r5, r6
 8000cec:	d038      	beq.n	8000d60 <__aeabi_dadd+0x204>
 8000cee:	2680      	movs	r6, #128	; 0x80
 8000cf0:	0436      	lsls	r6, r6, #16
 8000cf2:	4337      	orrs	r7, r6
 8000cf4:	46b8      	mov	r8, r7
 8000cf6:	2b38      	cmp	r3, #56	; 0x38
 8000cf8:	dd00      	ble.n	8000cfc <__aeabi_dadd+0x1a0>
 8000cfa:	e0dc      	b.n	8000eb6 <__aeabi_dadd+0x35a>
 8000cfc:	2b1f      	cmp	r3, #31
 8000cfe:	dc00      	bgt.n	8000d02 <__aeabi_dadd+0x1a6>
 8000d00:	e130      	b.n	8000f64 <__aeabi_dadd+0x408>
 8000d02:	001e      	movs	r6, r3
 8000d04:	4647      	mov	r7, r8
 8000d06:	3e20      	subs	r6, #32
 8000d08:	40f7      	lsrs	r7, r6
 8000d0a:	46bc      	mov	ip, r7
 8000d0c:	2b20      	cmp	r3, #32
 8000d0e:	d004      	beq.n	8000d1a <__aeabi_dadd+0x1be>
 8000d10:	2640      	movs	r6, #64	; 0x40
 8000d12:	1af3      	subs	r3, r6, r3
 8000d14:	4646      	mov	r6, r8
 8000d16:	409e      	lsls	r6, r3
 8000d18:	4332      	orrs	r2, r6
 8000d1a:	0017      	movs	r7, r2
 8000d1c:	4663      	mov	r3, ip
 8000d1e:	1e7a      	subs	r2, r7, #1
 8000d20:	4197      	sbcs	r7, r2
 8000d22:	431f      	orrs	r7, r3
 8000d24:	e0cc      	b.n	8000ec0 <__aeabi_dadd+0x364>
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d100      	bne.n	8000d2c <__aeabi_dadd+0x1d0>
 8000d2a:	e204      	b.n	8001136 <__aeabi_dadd+0x5da>
 8000d2c:	4643      	mov	r3, r8
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	d100      	bne.n	8000d34 <__aeabi_dadd+0x1d8>
 8000d32:	e159      	b.n	8000fe8 <__aeabi_dadd+0x48c>
 8000d34:	074b      	lsls	r3, r1, #29
 8000d36:	08c0      	lsrs	r0, r0, #3
 8000d38:	4318      	orrs	r0, r3
 8000d3a:	2380      	movs	r3, #128	; 0x80
 8000d3c:	08c9      	lsrs	r1, r1, #3
 8000d3e:	031b      	lsls	r3, r3, #12
 8000d40:	4219      	tst	r1, r3
 8000d42:	d008      	beq.n	8000d56 <__aeabi_dadd+0x1fa>
 8000d44:	4645      	mov	r5, r8
 8000d46:	08ed      	lsrs	r5, r5, #3
 8000d48:	421d      	tst	r5, r3
 8000d4a:	d104      	bne.n	8000d56 <__aeabi_dadd+0x1fa>
 8000d4c:	4643      	mov	r3, r8
 8000d4e:	08d0      	lsrs	r0, r2, #3
 8000d50:	0759      	lsls	r1, r3, #29
 8000d52:	4308      	orrs	r0, r1
 8000d54:	0029      	movs	r1, r5
 8000d56:	0f42      	lsrs	r2, r0, #29
 8000d58:	00c9      	lsls	r1, r1, #3
 8000d5a:	4d7f      	ldr	r5, [pc, #508]	; (8000f58 <__aeabi_dadd+0x3fc>)
 8000d5c:	4311      	orrs	r1, r2
 8000d5e:	00c0      	lsls	r0, r0, #3
 8000d60:	074b      	lsls	r3, r1, #29
 8000d62:	08ca      	lsrs	r2, r1, #3
 8000d64:	497c      	ldr	r1, [pc, #496]	; (8000f58 <__aeabi_dadd+0x3fc>)
 8000d66:	08c0      	lsrs	r0, r0, #3
 8000d68:	4303      	orrs	r3, r0
 8000d6a:	428d      	cmp	r5, r1
 8000d6c:	d068      	beq.n	8000e40 <__aeabi_dadd+0x2e4>
 8000d6e:	0312      	lsls	r2, r2, #12
 8000d70:	056d      	lsls	r5, r5, #21
 8000d72:	0b12      	lsrs	r2, r2, #12
 8000d74:	0d6d      	lsrs	r5, r5, #21
 8000d76:	2100      	movs	r1, #0
 8000d78:	0312      	lsls	r2, r2, #12
 8000d7a:	0018      	movs	r0, r3
 8000d7c:	0b13      	lsrs	r3, r2, #12
 8000d7e:	0d0a      	lsrs	r2, r1, #20
 8000d80:	0512      	lsls	r2, r2, #20
 8000d82:	431a      	orrs	r2, r3
 8000d84:	4b76      	ldr	r3, [pc, #472]	; (8000f60 <__aeabi_dadd+0x404>)
 8000d86:	052d      	lsls	r5, r5, #20
 8000d88:	4013      	ands	r3, r2
 8000d8a:	432b      	orrs	r3, r5
 8000d8c:	005b      	lsls	r3, r3, #1
 8000d8e:	07e4      	lsls	r4, r4, #31
 8000d90:	085b      	lsrs	r3, r3, #1
 8000d92:	4323      	orrs	r3, r4
 8000d94:	0019      	movs	r1, r3
 8000d96:	bc1c      	pop	{r2, r3, r4}
 8000d98:	4690      	mov	r8, r2
 8000d9a:	4699      	mov	r9, r3
 8000d9c:	46a2      	mov	sl, r4
 8000d9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000da0:	003e      	movs	r6, r7
 8000da2:	4316      	orrs	r6, r2
 8000da4:	d012      	beq.n	8000dcc <__aeabi_dadd+0x270>
 8000da6:	1e5e      	subs	r6, r3, #1
 8000da8:	2e00      	cmp	r6, #0
 8000daa:	d000      	beq.n	8000dae <__aeabi_dadd+0x252>
 8000dac:	e100      	b.n	8000fb0 <__aeabi_dadd+0x454>
 8000dae:	1887      	adds	r7, r0, r2
 8000db0:	4287      	cmp	r7, r0
 8000db2:	4180      	sbcs	r0, r0
 8000db4:	4441      	add	r1, r8
 8000db6:	4240      	negs	r0, r0
 8000db8:	1809      	adds	r1, r1, r0
 8000dba:	2501      	movs	r5, #1
 8000dbc:	020b      	lsls	r3, r1, #8
 8000dbe:	d533      	bpl.n	8000e28 <__aeabi_dadd+0x2cc>
 8000dc0:	2502      	movs	r5, #2
 8000dc2:	e785      	b.n	8000cd0 <__aeabi_dadd+0x174>
 8000dc4:	4664      	mov	r4, ip
 8000dc6:	0033      	movs	r3, r6
 8000dc8:	4641      	mov	r1, r8
 8000dca:	0010      	movs	r0, r2
 8000dcc:	001d      	movs	r5, r3
 8000dce:	e7c7      	b.n	8000d60 <__aeabi_dadd+0x204>
 8000dd0:	2d00      	cmp	r5, #0
 8000dd2:	d000      	beq.n	8000dd6 <__aeabi_dadd+0x27a>
 8000dd4:	e0da      	b.n	8000f8c <__aeabi_dadd+0x430>
 8000dd6:	000c      	movs	r4, r1
 8000dd8:	4304      	orrs	r4, r0
 8000dda:	d0f3      	beq.n	8000dc4 <__aeabi_dadd+0x268>
 8000ddc:	1c5c      	adds	r4, r3, #1
 8000dde:	d100      	bne.n	8000de2 <__aeabi_dadd+0x286>
 8000de0:	e19f      	b.n	8001122 <__aeabi_dadd+0x5c6>
 8000de2:	4c5d      	ldr	r4, [pc, #372]	; (8000f58 <__aeabi_dadd+0x3fc>)
 8000de4:	42a6      	cmp	r6, r4
 8000de6:	d100      	bne.n	8000dea <__aeabi_dadd+0x28e>
 8000de8:	e12f      	b.n	800104a <__aeabi_dadd+0x4ee>
 8000dea:	43db      	mvns	r3, r3
 8000dec:	2b38      	cmp	r3, #56	; 0x38
 8000dee:	dd00      	ble.n	8000df2 <__aeabi_dadd+0x296>
 8000df0:	e166      	b.n	80010c0 <__aeabi_dadd+0x564>
 8000df2:	2b1f      	cmp	r3, #31
 8000df4:	dd00      	ble.n	8000df8 <__aeabi_dadd+0x29c>
 8000df6:	e183      	b.n	8001100 <__aeabi_dadd+0x5a4>
 8000df8:	2420      	movs	r4, #32
 8000dfa:	0005      	movs	r5, r0
 8000dfc:	1ae4      	subs	r4, r4, r3
 8000dfe:	000f      	movs	r7, r1
 8000e00:	40dd      	lsrs	r5, r3
 8000e02:	40d9      	lsrs	r1, r3
 8000e04:	40a0      	lsls	r0, r4
 8000e06:	4643      	mov	r3, r8
 8000e08:	40a7      	lsls	r7, r4
 8000e0a:	1a5b      	subs	r3, r3, r1
 8000e0c:	1e44      	subs	r4, r0, #1
 8000e0e:	41a0      	sbcs	r0, r4
 8000e10:	4698      	mov	r8, r3
 8000e12:	432f      	orrs	r7, r5
 8000e14:	4338      	orrs	r0, r7
 8000e16:	1a17      	subs	r7, r2, r0
 8000e18:	42ba      	cmp	r2, r7
 8000e1a:	4192      	sbcs	r2, r2
 8000e1c:	4643      	mov	r3, r8
 8000e1e:	4252      	negs	r2, r2
 8000e20:	1a99      	subs	r1, r3, r2
 8000e22:	4664      	mov	r4, ip
 8000e24:	0035      	movs	r5, r6
 8000e26:	e6ca      	b.n	8000bbe <__aeabi_dadd+0x62>
 8000e28:	2207      	movs	r2, #7
 8000e2a:	403a      	ands	r2, r7
 8000e2c:	2a00      	cmp	r2, #0
 8000e2e:	d000      	beq.n	8000e32 <__aeabi_dadd+0x2d6>
 8000e30:	e6f6      	b.n	8000c20 <__aeabi_dadd+0xc4>
 8000e32:	074b      	lsls	r3, r1, #29
 8000e34:	08ca      	lsrs	r2, r1, #3
 8000e36:	4948      	ldr	r1, [pc, #288]	; (8000f58 <__aeabi_dadd+0x3fc>)
 8000e38:	08ff      	lsrs	r7, r7, #3
 8000e3a:	433b      	orrs	r3, r7
 8000e3c:	428d      	cmp	r5, r1
 8000e3e:	d196      	bne.n	8000d6e <__aeabi_dadd+0x212>
 8000e40:	0019      	movs	r1, r3
 8000e42:	4311      	orrs	r1, r2
 8000e44:	d100      	bne.n	8000e48 <__aeabi_dadd+0x2ec>
 8000e46:	e19e      	b.n	8001186 <__aeabi_dadd+0x62a>
 8000e48:	2180      	movs	r1, #128	; 0x80
 8000e4a:	0309      	lsls	r1, r1, #12
 8000e4c:	430a      	orrs	r2, r1
 8000e4e:	0312      	lsls	r2, r2, #12
 8000e50:	0b12      	lsrs	r2, r2, #12
 8000e52:	4d41      	ldr	r5, [pc, #260]	; (8000f58 <__aeabi_dadd+0x3fc>)
 8000e54:	e78f      	b.n	8000d76 <__aeabi_dadd+0x21a>
 8000e56:	0015      	movs	r5, r2
 8000e58:	2200      	movs	r2, #0
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	e78b      	b.n	8000d76 <__aeabi_dadd+0x21a>
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d000      	beq.n	8000e64 <__aeabi_dadd+0x308>
 8000e62:	e0c7      	b.n	8000ff4 <__aeabi_dadd+0x498>
 8000e64:	1c6b      	adds	r3, r5, #1
 8000e66:	055f      	lsls	r7, r3, #21
 8000e68:	0d7f      	lsrs	r7, r7, #21
 8000e6a:	2f01      	cmp	r7, #1
 8000e6c:	dc00      	bgt.n	8000e70 <__aeabi_dadd+0x314>
 8000e6e:	e0f1      	b.n	8001054 <__aeabi_dadd+0x4f8>
 8000e70:	4d39      	ldr	r5, [pc, #228]	; (8000f58 <__aeabi_dadd+0x3fc>)
 8000e72:	42ab      	cmp	r3, r5
 8000e74:	d100      	bne.n	8000e78 <__aeabi_dadd+0x31c>
 8000e76:	e0b9      	b.n	8000fec <__aeabi_dadd+0x490>
 8000e78:	1885      	adds	r5, r0, r2
 8000e7a:	000a      	movs	r2, r1
 8000e7c:	4285      	cmp	r5, r0
 8000e7e:	4189      	sbcs	r1, r1
 8000e80:	4442      	add	r2, r8
 8000e82:	4249      	negs	r1, r1
 8000e84:	1851      	adds	r1, r2, r1
 8000e86:	2207      	movs	r2, #7
 8000e88:	07cf      	lsls	r7, r1, #31
 8000e8a:	086d      	lsrs	r5, r5, #1
 8000e8c:	432f      	orrs	r7, r5
 8000e8e:	0849      	lsrs	r1, r1, #1
 8000e90:	403a      	ands	r2, r7
 8000e92:	001d      	movs	r5, r3
 8000e94:	e6c2      	b.n	8000c1c <__aeabi_dadd+0xc0>
 8000e96:	2207      	movs	r2, #7
 8000e98:	4930      	ldr	r1, [pc, #192]	; (8000f5c <__aeabi_dadd+0x400>)
 8000e9a:	1aed      	subs	r5, r5, r3
 8000e9c:	4031      	ands	r1, r6
 8000e9e:	403a      	ands	r2, r7
 8000ea0:	e6bc      	b.n	8000c1c <__aeabi_dadd+0xc0>
 8000ea2:	003e      	movs	r6, r7
 8000ea4:	3828      	subs	r0, #40	; 0x28
 8000ea6:	4086      	lsls	r6, r0
 8000ea8:	2700      	movs	r7, #0
 8000eaa:	e69f      	b.n	8000bec <__aeabi_dadd+0x90>
 8000eac:	0038      	movs	r0, r7
 8000eae:	f001 fc29 	bl	8002704 <__clzsi2>
 8000eb2:	3020      	adds	r0, #32
 8000eb4:	e68e      	b.n	8000bd4 <__aeabi_dadd+0x78>
 8000eb6:	4643      	mov	r3, r8
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	001f      	movs	r7, r3
 8000ebc:	1e7a      	subs	r2, r7, #1
 8000ebe:	4197      	sbcs	r7, r2
 8000ec0:	1bc7      	subs	r7, r0, r7
 8000ec2:	42b8      	cmp	r0, r7
 8000ec4:	4180      	sbcs	r0, r0
 8000ec6:	4240      	negs	r0, r0
 8000ec8:	1a09      	subs	r1, r1, r0
 8000eca:	e678      	b.n	8000bbe <__aeabi_dadd+0x62>
 8000ecc:	000e      	movs	r6, r1
 8000ece:	003b      	movs	r3, r7
 8000ed0:	4306      	orrs	r6, r0
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	2d00      	cmp	r5, #0
 8000ed6:	d161      	bne.n	8000f9c <__aeabi_dadd+0x440>
 8000ed8:	2e00      	cmp	r6, #0
 8000eda:	d000      	beq.n	8000ede <__aeabi_dadd+0x382>
 8000edc:	e0f4      	b.n	80010c8 <__aeabi_dadd+0x56c>
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d100      	bne.n	8000ee4 <__aeabi_dadd+0x388>
 8000ee2:	e11b      	b.n	800111c <__aeabi_dadd+0x5c0>
 8000ee4:	4664      	mov	r4, ip
 8000ee6:	0039      	movs	r1, r7
 8000ee8:	0010      	movs	r0, r2
 8000eea:	e739      	b.n	8000d60 <__aeabi_dadd+0x204>
 8000eec:	4f1a      	ldr	r7, [pc, #104]	; (8000f58 <__aeabi_dadd+0x3fc>)
 8000eee:	42bb      	cmp	r3, r7
 8000ef0:	d07a      	beq.n	8000fe8 <__aeabi_dadd+0x48c>
 8000ef2:	0033      	movs	r3, r6
 8000ef4:	e6ff      	b.n	8000cf6 <__aeabi_dadd+0x19a>
 8000ef6:	0030      	movs	r0, r6
 8000ef8:	3d1f      	subs	r5, #31
 8000efa:	40e8      	lsrs	r0, r5
 8000efc:	2b20      	cmp	r3, #32
 8000efe:	d003      	beq.n	8000f08 <__aeabi_dadd+0x3ac>
 8000f00:	2140      	movs	r1, #64	; 0x40
 8000f02:	1acb      	subs	r3, r1, r3
 8000f04:	409e      	lsls	r6, r3
 8000f06:	4337      	orrs	r7, r6
 8000f08:	1e7b      	subs	r3, r7, #1
 8000f0a:	419f      	sbcs	r7, r3
 8000f0c:	2207      	movs	r2, #7
 8000f0e:	4307      	orrs	r7, r0
 8000f10:	403a      	ands	r2, r7
 8000f12:	2100      	movs	r1, #0
 8000f14:	2500      	movs	r5, #0
 8000f16:	e789      	b.n	8000e2c <__aeabi_dadd+0x2d0>
 8000f18:	1a17      	subs	r7, r2, r0
 8000f1a:	4643      	mov	r3, r8
 8000f1c:	42ba      	cmp	r2, r7
 8000f1e:	41b6      	sbcs	r6, r6
 8000f20:	1a59      	subs	r1, r3, r1
 8000f22:	4276      	negs	r6, r6
 8000f24:	1b8e      	subs	r6, r1, r6
 8000f26:	4664      	mov	r4, ip
 8000f28:	e64e      	b.n	8000bc8 <__aeabi_dadd+0x6c>
 8000f2a:	2b1f      	cmp	r3, #31
 8000f2c:	dd00      	ble.n	8000f30 <__aeabi_dadd+0x3d4>
 8000f2e:	e0ad      	b.n	800108c <__aeabi_dadd+0x530>
 8000f30:	2620      	movs	r6, #32
 8000f32:	4647      	mov	r7, r8
 8000f34:	1af6      	subs	r6, r6, r3
 8000f36:	40b7      	lsls	r7, r6
 8000f38:	46b9      	mov	r9, r7
 8000f3a:	0017      	movs	r7, r2
 8000f3c:	46b2      	mov	sl, r6
 8000f3e:	40df      	lsrs	r7, r3
 8000f40:	464e      	mov	r6, r9
 8000f42:	433e      	orrs	r6, r7
 8000f44:	0037      	movs	r7, r6
 8000f46:	4656      	mov	r6, sl
 8000f48:	40b2      	lsls	r2, r6
 8000f4a:	1e56      	subs	r6, r2, #1
 8000f4c:	41b2      	sbcs	r2, r6
 8000f4e:	4317      	orrs	r7, r2
 8000f50:	4642      	mov	r2, r8
 8000f52:	40da      	lsrs	r2, r3
 8000f54:	1889      	adds	r1, r1, r2
 8000f56:	e6ae      	b.n	8000cb6 <__aeabi_dadd+0x15a>
 8000f58:	000007ff 	.word	0x000007ff
 8000f5c:	ff7fffff 	.word	0xff7fffff
 8000f60:	800fffff 	.word	0x800fffff
 8000f64:	2620      	movs	r6, #32
 8000f66:	4647      	mov	r7, r8
 8000f68:	1af6      	subs	r6, r6, r3
 8000f6a:	40b7      	lsls	r7, r6
 8000f6c:	46b9      	mov	r9, r7
 8000f6e:	0017      	movs	r7, r2
 8000f70:	46b2      	mov	sl, r6
 8000f72:	40df      	lsrs	r7, r3
 8000f74:	464e      	mov	r6, r9
 8000f76:	433e      	orrs	r6, r7
 8000f78:	0037      	movs	r7, r6
 8000f7a:	4656      	mov	r6, sl
 8000f7c:	40b2      	lsls	r2, r6
 8000f7e:	1e56      	subs	r6, r2, #1
 8000f80:	41b2      	sbcs	r2, r6
 8000f82:	4317      	orrs	r7, r2
 8000f84:	4642      	mov	r2, r8
 8000f86:	40da      	lsrs	r2, r3
 8000f88:	1a89      	subs	r1, r1, r2
 8000f8a:	e799      	b.n	8000ec0 <__aeabi_dadd+0x364>
 8000f8c:	4c7f      	ldr	r4, [pc, #508]	; (800118c <__aeabi_dadd+0x630>)
 8000f8e:	42a6      	cmp	r6, r4
 8000f90:	d05b      	beq.n	800104a <__aeabi_dadd+0x4ee>
 8000f92:	2480      	movs	r4, #128	; 0x80
 8000f94:	0424      	lsls	r4, r4, #16
 8000f96:	425b      	negs	r3, r3
 8000f98:	4321      	orrs	r1, r4
 8000f9a:	e727      	b.n	8000dec <__aeabi_dadd+0x290>
 8000f9c:	2e00      	cmp	r6, #0
 8000f9e:	d10c      	bne.n	8000fba <__aeabi_dadd+0x45e>
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d100      	bne.n	8000fa6 <__aeabi_dadd+0x44a>
 8000fa4:	e0cb      	b.n	800113e <__aeabi_dadd+0x5e2>
 8000fa6:	4664      	mov	r4, ip
 8000fa8:	0039      	movs	r1, r7
 8000faa:	0010      	movs	r0, r2
 8000fac:	4d77      	ldr	r5, [pc, #476]	; (800118c <__aeabi_dadd+0x630>)
 8000fae:	e6d7      	b.n	8000d60 <__aeabi_dadd+0x204>
 8000fb0:	4f76      	ldr	r7, [pc, #472]	; (800118c <__aeabi_dadd+0x630>)
 8000fb2:	42bb      	cmp	r3, r7
 8000fb4:	d018      	beq.n	8000fe8 <__aeabi_dadd+0x48c>
 8000fb6:	0033      	movs	r3, r6
 8000fb8:	e675      	b.n	8000ca6 <__aeabi_dadd+0x14a>
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d014      	beq.n	8000fe8 <__aeabi_dadd+0x48c>
 8000fbe:	074b      	lsls	r3, r1, #29
 8000fc0:	08c0      	lsrs	r0, r0, #3
 8000fc2:	4318      	orrs	r0, r3
 8000fc4:	2380      	movs	r3, #128	; 0x80
 8000fc6:	08c9      	lsrs	r1, r1, #3
 8000fc8:	031b      	lsls	r3, r3, #12
 8000fca:	4219      	tst	r1, r3
 8000fcc:	d007      	beq.n	8000fde <__aeabi_dadd+0x482>
 8000fce:	08fc      	lsrs	r4, r7, #3
 8000fd0:	421c      	tst	r4, r3
 8000fd2:	d104      	bne.n	8000fde <__aeabi_dadd+0x482>
 8000fd4:	0779      	lsls	r1, r7, #29
 8000fd6:	08d0      	lsrs	r0, r2, #3
 8000fd8:	4308      	orrs	r0, r1
 8000fda:	46e1      	mov	r9, ip
 8000fdc:	0021      	movs	r1, r4
 8000fde:	464c      	mov	r4, r9
 8000fe0:	0f42      	lsrs	r2, r0, #29
 8000fe2:	00c9      	lsls	r1, r1, #3
 8000fe4:	4311      	orrs	r1, r2
 8000fe6:	00c0      	lsls	r0, r0, #3
 8000fe8:	4d68      	ldr	r5, [pc, #416]	; (800118c <__aeabi_dadd+0x630>)
 8000fea:	e6b9      	b.n	8000d60 <__aeabi_dadd+0x204>
 8000fec:	001d      	movs	r5, r3
 8000fee:	2200      	movs	r2, #0
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	e6c0      	b.n	8000d76 <__aeabi_dadd+0x21a>
 8000ff4:	2d00      	cmp	r5, #0
 8000ff6:	d15b      	bne.n	80010b0 <__aeabi_dadd+0x554>
 8000ff8:	000d      	movs	r5, r1
 8000ffa:	4305      	orrs	r5, r0
 8000ffc:	d100      	bne.n	8001000 <__aeabi_dadd+0x4a4>
 8000ffe:	e6e2      	b.n	8000dc6 <__aeabi_dadd+0x26a>
 8001000:	1c5d      	adds	r5, r3, #1
 8001002:	d100      	bne.n	8001006 <__aeabi_dadd+0x4aa>
 8001004:	e0b0      	b.n	8001168 <__aeabi_dadd+0x60c>
 8001006:	4d61      	ldr	r5, [pc, #388]	; (800118c <__aeabi_dadd+0x630>)
 8001008:	42ae      	cmp	r6, r5
 800100a:	d01f      	beq.n	800104c <__aeabi_dadd+0x4f0>
 800100c:	43db      	mvns	r3, r3
 800100e:	2b38      	cmp	r3, #56	; 0x38
 8001010:	dc71      	bgt.n	80010f6 <__aeabi_dadd+0x59a>
 8001012:	2b1f      	cmp	r3, #31
 8001014:	dd00      	ble.n	8001018 <__aeabi_dadd+0x4bc>
 8001016:	e096      	b.n	8001146 <__aeabi_dadd+0x5ea>
 8001018:	2520      	movs	r5, #32
 800101a:	000f      	movs	r7, r1
 800101c:	1aed      	subs	r5, r5, r3
 800101e:	40af      	lsls	r7, r5
 8001020:	46b9      	mov	r9, r7
 8001022:	0007      	movs	r7, r0
 8001024:	46aa      	mov	sl, r5
 8001026:	40df      	lsrs	r7, r3
 8001028:	464d      	mov	r5, r9
 800102a:	433d      	orrs	r5, r7
 800102c:	002f      	movs	r7, r5
 800102e:	4655      	mov	r5, sl
 8001030:	40a8      	lsls	r0, r5
 8001032:	40d9      	lsrs	r1, r3
 8001034:	1e45      	subs	r5, r0, #1
 8001036:	41a8      	sbcs	r0, r5
 8001038:	4488      	add	r8, r1
 800103a:	4307      	orrs	r7, r0
 800103c:	18bf      	adds	r7, r7, r2
 800103e:	4297      	cmp	r7, r2
 8001040:	4192      	sbcs	r2, r2
 8001042:	4251      	negs	r1, r2
 8001044:	4441      	add	r1, r8
 8001046:	0035      	movs	r5, r6
 8001048:	e63a      	b.n	8000cc0 <__aeabi_dadd+0x164>
 800104a:	4664      	mov	r4, ip
 800104c:	0035      	movs	r5, r6
 800104e:	4641      	mov	r1, r8
 8001050:	0010      	movs	r0, r2
 8001052:	e685      	b.n	8000d60 <__aeabi_dadd+0x204>
 8001054:	000b      	movs	r3, r1
 8001056:	4303      	orrs	r3, r0
 8001058:	2d00      	cmp	r5, #0
 800105a:	d000      	beq.n	800105e <__aeabi_dadd+0x502>
 800105c:	e663      	b.n	8000d26 <__aeabi_dadd+0x1ca>
 800105e:	2b00      	cmp	r3, #0
 8001060:	d0f5      	beq.n	800104e <__aeabi_dadd+0x4f2>
 8001062:	4643      	mov	r3, r8
 8001064:	4313      	orrs	r3, r2
 8001066:	d100      	bne.n	800106a <__aeabi_dadd+0x50e>
 8001068:	e67a      	b.n	8000d60 <__aeabi_dadd+0x204>
 800106a:	1887      	adds	r7, r0, r2
 800106c:	4287      	cmp	r7, r0
 800106e:	4180      	sbcs	r0, r0
 8001070:	2207      	movs	r2, #7
 8001072:	4441      	add	r1, r8
 8001074:	4240      	negs	r0, r0
 8001076:	1809      	adds	r1, r1, r0
 8001078:	403a      	ands	r2, r7
 800107a:	020b      	lsls	r3, r1, #8
 800107c:	d400      	bmi.n	8001080 <__aeabi_dadd+0x524>
 800107e:	e6d5      	b.n	8000e2c <__aeabi_dadd+0x2d0>
 8001080:	4b43      	ldr	r3, [pc, #268]	; (8001190 <__aeabi_dadd+0x634>)
 8001082:	3501      	adds	r5, #1
 8001084:	4019      	ands	r1, r3
 8001086:	e5c9      	b.n	8000c1c <__aeabi_dadd+0xc0>
 8001088:	0038      	movs	r0, r7
 800108a:	e669      	b.n	8000d60 <__aeabi_dadd+0x204>
 800108c:	001e      	movs	r6, r3
 800108e:	4647      	mov	r7, r8
 8001090:	3e20      	subs	r6, #32
 8001092:	40f7      	lsrs	r7, r6
 8001094:	46bc      	mov	ip, r7
 8001096:	2b20      	cmp	r3, #32
 8001098:	d004      	beq.n	80010a4 <__aeabi_dadd+0x548>
 800109a:	2640      	movs	r6, #64	; 0x40
 800109c:	1af3      	subs	r3, r6, r3
 800109e:	4646      	mov	r6, r8
 80010a0:	409e      	lsls	r6, r3
 80010a2:	4332      	orrs	r2, r6
 80010a4:	0017      	movs	r7, r2
 80010a6:	4663      	mov	r3, ip
 80010a8:	1e7a      	subs	r2, r7, #1
 80010aa:	4197      	sbcs	r7, r2
 80010ac:	431f      	orrs	r7, r3
 80010ae:	e602      	b.n	8000cb6 <__aeabi_dadd+0x15a>
 80010b0:	4d36      	ldr	r5, [pc, #216]	; (800118c <__aeabi_dadd+0x630>)
 80010b2:	42ae      	cmp	r6, r5
 80010b4:	d0ca      	beq.n	800104c <__aeabi_dadd+0x4f0>
 80010b6:	2580      	movs	r5, #128	; 0x80
 80010b8:	042d      	lsls	r5, r5, #16
 80010ba:	425b      	negs	r3, r3
 80010bc:	4329      	orrs	r1, r5
 80010be:	e7a6      	b.n	800100e <__aeabi_dadd+0x4b2>
 80010c0:	4308      	orrs	r0, r1
 80010c2:	1e41      	subs	r1, r0, #1
 80010c4:	4188      	sbcs	r0, r1
 80010c6:	e6a6      	b.n	8000e16 <__aeabi_dadd+0x2ba>
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d100      	bne.n	80010ce <__aeabi_dadd+0x572>
 80010cc:	e648      	b.n	8000d60 <__aeabi_dadd+0x204>
 80010ce:	1a87      	subs	r7, r0, r2
 80010d0:	4643      	mov	r3, r8
 80010d2:	42b8      	cmp	r0, r7
 80010d4:	41b6      	sbcs	r6, r6
 80010d6:	1acb      	subs	r3, r1, r3
 80010d8:	4276      	negs	r6, r6
 80010da:	1b9e      	subs	r6, r3, r6
 80010dc:	0233      	lsls	r3, r6, #8
 80010de:	d54b      	bpl.n	8001178 <__aeabi_dadd+0x61c>
 80010e0:	1a17      	subs	r7, r2, r0
 80010e2:	4643      	mov	r3, r8
 80010e4:	42ba      	cmp	r2, r7
 80010e6:	4192      	sbcs	r2, r2
 80010e8:	1a59      	subs	r1, r3, r1
 80010ea:	4252      	negs	r2, r2
 80010ec:	1a89      	subs	r1, r1, r2
 80010ee:	2207      	movs	r2, #7
 80010f0:	4664      	mov	r4, ip
 80010f2:	403a      	ands	r2, r7
 80010f4:	e592      	b.n	8000c1c <__aeabi_dadd+0xc0>
 80010f6:	4301      	orrs	r1, r0
 80010f8:	000f      	movs	r7, r1
 80010fa:	1e79      	subs	r1, r7, #1
 80010fc:	418f      	sbcs	r7, r1
 80010fe:	e79d      	b.n	800103c <__aeabi_dadd+0x4e0>
 8001100:	001c      	movs	r4, r3
 8001102:	000f      	movs	r7, r1
 8001104:	3c20      	subs	r4, #32
 8001106:	40e7      	lsrs	r7, r4
 8001108:	2b20      	cmp	r3, #32
 800110a:	d003      	beq.n	8001114 <__aeabi_dadd+0x5b8>
 800110c:	2440      	movs	r4, #64	; 0x40
 800110e:	1ae3      	subs	r3, r4, r3
 8001110:	4099      	lsls	r1, r3
 8001112:	4308      	orrs	r0, r1
 8001114:	1e41      	subs	r1, r0, #1
 8001116:	4188      	sbcs	r0, r1
 8001118:	4338      	orrs	r0, r7
 800111a:	e67c      	b.n	8000e16 <__aeabi_dadd+0x2ba>
 800111c:	2200      	movs	r2, #0
 800111e:	2400      	movs	r4, #0
 8001120:	e625      	b.n	8000d6e <__aeabi_dadd+0x212>
 8001122:	1a17      	subs	r7, r2, r0
 8001124:	4643      	mov	r3, r8
 8001126:	42ba      	cmp	r2, r7
 8001128:	4192      	sbcs	r2, r2
 800112a:	1a59      	subs	r1, r3, r1
 800112c:	4252      	negs	r2, r2
 800112e:	1a89      	subs	r1, r1, r2
 8001130:	4664      	mov	r4, ip
 8001132:	0035      	movs	r5, r6
 8001134:	e543      	b.n	8000bbe <__aeabi_dadd+0x62>
 8001136:	4641      	mov	r1, r8
 8001138:	0010      	movs	r0, r2
 800113a:	4d14      	ldr	r5, [pc, #80]	; (800118c <__aeabi_dadd+0x630>)
 800113c:	e610      	b.n	8000d60 <__aeabi_dadd+0x204>
 800113e:	2280      	movs	r2, #128	; 0x80
 8001140:	2400      	movs	r4, #0
 8001142:	0312      	lsls	r2, r2, #12
 8001144:	e680      	b.n	8000e48 <__aeabi_dadd+0x2ec>
 8001146:	001d      	movs	r5, r3
 8001148:	000f      	movs	r7, r1
 800114a:	3d20      	subs	r5, #32
 800114c:	40ef      	lsrs	r7, r5
 800114e:	46bc      	mov	ip, r7
 8001150:	2b20      	cmp	r3, #32
 8001152:	d003      	beq.n	800115c <__aeabi_dadd+0x600>
 8001154:	2540      	movs	r5, #64	; 0x40
 8001156:	1aeb      	subs	r3, r5, r3
 8001158:	4099      	lsls	r1, r3
 800115a:	4308      	orrs	r0, r1
 800115c:	0007      	movs	r7, r0
 800115e:	4663      	mov	r3, ip
 8001160:	1e78      	subs	r0, r7, #1
 8001162:	4187      	sbcs	r7, r0
 8001164:	431f      	orrs	r7, r3
 8001166:	e769      	b.n	800103c <__aeabi_dadd+0x4e0>
 8001168:	1887      	adds	r7, r0, r2
 800116a:	4297      	cmp	r7, r2
 800116c:	419b      	sbcs	r3, r3
 800116e:	4441      	add	r1, r8
 8001170:	425b      	negs	r3, r3
 8001172:	18c9      	adds	r1, r1, r3
 8001174:	0035      	movs	r5, r6
 8001176:	e5a3      	b.n	8000cc0 <__aeabi_dadd+0x164>
 8001178:	003b      	movs	r3, r7
 800117a:	4333      	orrs	r3, r6
 800117c:	d0ce      	beq.n	800111c <__aeabi_dadd+0x5c0>
 800117e:	2207      	movs	r2, #7
 8001180:	0031      	movs	r1, r6
 8001182:	403a      	ands	r2, r7
 8001184:	e652      	b.n	8000e2c <__aeabi_dadd+0x2d0>
 8001186:	2300      	movs	r3, #0
 8001188:	001a      	movs	r2, r3
 800118a:	e5f4      	b.n	8000d76 <__aeabi_dadd+0x21a>
 800118c:	000007ff 	.word	0x000007ff
 8001190:	ff7fffff 	.word	0xff7fffff

08001194 <__aeabi_ddiv>:
 8001194:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001196:	4657      	mov	r7, sl
 8001198:	46de      	mov	lr, fp
 800119a:	464e      	mov	r6, r9
 800119c:	4645      	mov	r5, r8
 800119e:	b5e0      	push	{r5, r6, r7, lr}
 80011a0:	4683      	mov	fp, r0
 80011a2:	0007      	movs	r7, r0
 80011a4:	030e      	lsls	r6, r1, #12
 80011a6:	0048      	lsls	r0, r1, #1
 80011a8:	b085      	sub	sp, #20
 80011aa:	4692      	mov	sl, r2
 80011ac:	001c      	movs	r4, r3
 80011ae:	0b36      	lsrs	r6, r6, #12
 80011b0:	0d40      	lsrs	r0, r0, #21
 80011b2:	0fcd      	lsrs	r5, r1, #31
 80011b4:	2800      	cmp	r0, #0
 80011b6:	d100      	bne.n	80011ba <__aeabi_ddiv+0x26>
 80011b8:	e09d      	b.n	80012f6 <__aeabi_ddiv+0x162>
 80011ba:	4b95      	ldr	r3, [pc, #596]	; (8001410 <__aeabi_ddiv+0x27c>)
 80011bc:	4298      	cmp	r0, r3
 80011be:	d039      	beq.n	8001234 <__aeabi_ddiv+0xa0>
 80011c0:	2380      	movs	r3, #128	; 0x80
 80011c2:	00f6      	lsls	r6, r6, #3
 80011c4:	041b      	lsls	r3, r3, #16
 80011c6:	431e      	orrs	r6, r3
 80011c8:	4a92      	ldr	r2, [pc, #584]	; (8001414 <__aeabi_ddiv+0x280>)
 80011ca:	0f7b      	lsrs	r3, r7, #29
 80011cc:	4333      	orrs	r3, r6
 80011ce:	4699      	mov	r9, r3
 80011d0:	4694      	mov	ip, r2
 80011d2:	0003      	movs	r3, r0
 80011d4:	4463      	add	r3, ip
 80011d6:	9300      	str	r3, [sp, #0]
 80011d8:	2300      	movs	r3, #0
 80011da:	2600      	movs	r6, #0
 80011dc:	00ff      	lsls	r7, r7, #3
 80011de:	9302      	str	r3, [sp, #8]
 80011e0:	0323      	lsls	r3, r4, #12
 80011e2:	0b1b      	lsrs	r3, r3, #12
 80011e4:	4698      	mov	r8, r3
 80011e6:	0063      	lsls	r3, r4, #1
 80011e8:	0fe4      	lsrs	r4, r4, #31
 80011ea:	4652      	mov	r2, sl
 80011ec:	0d5b      	lsrs	r3, r3, #21
 80011ee:	9401      	str	r4, [sp, #4]
 80011f0:	d100      	bne.n	80011f4 <__aeabi_ddiv+0x60>
 80011f2:	e0b3      	b.n	800135c <__aeabi_ddiv+0x1c8>
 80011f4:	4986      	ldr	r1, [pc, #536]	; (8001410 <__aeabi_ddiv+0x27c>)
 80011f6:	428b      	cmp	r3, r1
 80011f8:	d100      	bne.n	80011fc <__aeabi_ddiv+0x68>
 80011fa:	e09e      	b.n	800133a <__aeabi_ddiv+0x1a6>
 80011fc:	4642      	mov	r2, r8
 80011fe:	00d1      	lsls	r1, r2, #3
 8001200:	2280      	movs	r2, #128	; 0x80
 8001202:	0412      	lsls	r2, r2, #16
 8001204:	430a      	orrs	r2, r1
 8001206:	4651      	mov	r1, sl
 8001208:	0f49      	lsrs	r1, r1, #29
 800120a:	4311      	orrs	r1, r2
 800120c:	468b      	mov	fp, r1
 800120e:	4981      	ldr	r1, [pc, #516]	; (8001414 <__aeabi_ddiv+0x280>)
 8001210:	4652      	mov	r2, sl
 8001212:	468c      	mov	ip, r1
 8001214:	9900      	ldr	r1, [sp, #0]
 8001216:	4463      	add	r3, ip
 8001218:	1acb      	subs	r3, r1, r3
 800121a:	2100      	movs	r1, #0
 800121c:	00d2      	lsls	r2, r2, #3
 800121e:	9300      	str	r3, [sp, #0]
 8001220:	002b      	movs	r3, r5
 8001222:	4063      	eors	r3, r4
 8001224:	469a      	mov	sl, r3
 8001226:	2e0f      	cmp	r6, #15
 8001228:	d900      	bls.n	800122c <__aeabi_ddiv+0x98>
 800122a:	e105      	b.n	8001438 <__aeabi_ddiv+0x2a4>
 800122c:	4b7a      	ldr	r3, [pc, #488]	; (8001418 <__aeabi_ddiv+0x284>)
 800122e:	00b6      	lsls	r6, r6, #2
 8001230:	599b      	ldr	r3, [r3, r6]
 8001232:	469f      	mov	pc, r3
 8001234:	465b      	mov	r3, fp
 8001236:	4333      	orrs	r3, r6
 8001238:	4699      	mov	r9, r3
 800123a:	d000      	beq.n	800123e <__aeabi_ddiv+0xaa>
 800123c:	e0b8      	b.n	80013b0 <__aeabi_ddiv+0x21c>
 800123e:	2302      	movs	r3, #2
 8001240:	2608      	movs	r6, #8
 8001242:	2700      	movs	r7, #0
 8001244:	9000      	str	r0, [sp, #0]
 8001246:	9302      	str	r3, [sp, #8]
 8001248:	e7ca      	b.n	80011e0 <__aeabi_ddiv+0x4c>
 800124a:	46cb      	mov	fp, r9
 800124c:	003a      	movs	r2, r7
 800124e:	9902      	ldr	r1, [sp, #8]
 8001250:	9501      	str	r5, [sp, #4]
 8001252:	9b01      	ldr	r3, [sp, #4]
 8001254:	469a      	mov	sl, r3
 8001256:	2902      	cmp	r1, #2
 8001258:	d027      	beq.n	80012aa <__aeabi_ddiv+0x116>
 800125a:	2903      	cmp	r1, #3
 800125c:	d100      	bne.n	8001260 <__aeabi_ddiv+0xcc>
 800125e:	e280      	b.n	8001762 <__aeabi_ddiv+0x5ce>
 8001260:	2901      	cmp	r1, #1
 8001262:	d044      	beq.n	80012ee <__aeabi_ddiv+0x15a>
 8001264:	496d      	ldr	r1, [pc, #436]	; (800141c <__aeabi_ddiv+0x288>)
 8001266:	9b00      	ldr	r3, [sp, #0]
 8001268:	468c      	mov	ip, r1
 800126a:	4463      	add	r3, ip
 800126c:	001c      	movs	r4, r3
 800126e:	2c00      	cmp	r4, #0
 8001270:	dd38      	ble.n	80012e4 <__aeabi_ddiv+0x150>
 8001272:	0753      	lsls	r3, r2, #29
 8001274:	d000      	beq.n	8001278 <__aeabi_ddiv+0xe4>
 8001276:	e213      	b.n	80016a0 <__aeabi_ddiv+0x50c>
 8001278:	08d2      	lsrs	r2, r2, #3
 800127a:	465b      	mov	r3, fp
 800127c:	01db      	lsls	r3, r3, #7
 800127e:	d509      	bpl.n	8001294 <__aeabi_ddiv+0x100>
 8001280:	4659      	mov	r1, fp
 8001282:	4b67      	ldr	r3, [pc, #412]	; (8001420 <__aeabi_ddiv+0x28c>)
 8001284:	4019      	ands	r1, r3
 8001286:	468b      	mov	fp, r1
 8001288:	2180      	movs	r1, #128	; 0x80
 800128a:	00c9      	lsls	r1, r1, #3
 800128c:	468c      	mov	ip, r1
 800128e:	9b00      	ldr	r3, [sp, #0]
 8001290:	4463      	add	r3, ip
 8001292:	001c      	movs	r4, r3
 8001294:	4b63      	ldr	r3, [pc, #396]	; (8001424 <__aeabi_ddiv+0x290>)
 8001296:	429c      	cmp	r4, r3
 8001298:	dc07      	bgt.n	80012aa <__aeabi_ddiv+0x116>
 800129a:	465b      	mov	r3, fp
 800129c:	0564      	lsls	r4, r4, #21
 800129e:	075f      	lsls	r7, r3, #29
 80012a0:	025b      	lsls	r3, r3, #9
 80012a2:	4317      	orrs	r7, r2
 80012a4:	0b1b      	lsrs	r3, r3, #12
 80012a6:	0d62      	lsrs	r2, r4, #21
 80012a8:	e002      	b.n	80012b0 <__aeabi_ddiv+0x11c>
 80012aa:	2300      	movs	r3, #0
 80012ac:	2700      	movs	r7, #0
 80012ae:	4a58      	ldr	r2, [pc, #352]	; (8001410 <__aeabi_ddiv+0x27c>)
 80012b0:	2100      	movs	r1, #0
 80012b2:	031b      	lsls	r3, r3, #12
 80012b4:	0b1c      	lsrs	r4, r3, #12
 80012b6:	0d0b      	lsrs	r3, r1, #20
 80012b8:	051b      	lsls	r3, r3, #20
 80012ba:	4323      	orrs	r3, r4
 80012bc:	0514      	lsls	r4, r2, #20
 80012be:	4a5a      	ldr	r2, [pc, #360]	; (8001428 <__aeabi_ddiv+0x294>)
 80012c0:	0038      	movs	r0, r7
 80012c2:	4013      	ands	r3, r2
 80012c4:	431c      	orrs	r4, r3
 80012c6:	4653      	mov	r3, sl
 80012c8:	0064      	lsls	r4, r4, #1
 80012ca:	07db      	lsls	r3, r3, #31
 80012cc:	0864      	lsrs	r4, r4, #1
 80012ce:	431c      	orrs	r4, r3
 80012d0:	0021      	movs	r1, r4
 80012d2:	b005      	add	sp, #20
 80012d4:	bc3c      	pop	{r2, r3, r4, r5}
 80012d6:	4690      	mov	r8, r2
 80012d8:	4699      	mov	r9, r3
 80012da:	46a2      	mov	sl, r4
 80012dc:	46ab      	mov	fp, r5
 80012de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012e0:	2201      	movs	r2, #1
 80012e2:	4252      	negs	r2, r2
 80012e4:	2301      	movs	r3, #1
 80012e6:	1b1b      	subs	r3, r3, r4
 80012e8:	2b38      	cmp	r3, #56	; 0x38
 80012ea:	dc00      	bgt.n	80012ee <__aeabi_ddiv+0x15a>
 80012ec:	e1ad      	b.n	800164a <__aeabi_ddiv+0x4b6>
 80012ee:	2200      	movs	r2, #0
 80012f0:	2300      	movs	r3, #0
 80012f2:	2700      	movs	r7, #0
 80012f4:	e7dc      	b.n	80012b0 <__aeabi_ddiv+0x11c>
 80012f6:	465b      	mov	r3, fp
 80012f8:	4333      	orrs	r3, r6
 80012fa:	4699      	mov	r9, r3
 80012fc:	d05e      	beq.n	80013bc <__aeabi_ddiv+0x228>
 80012fe:	2e00      	cmp	r6, #0
 8001300:	d100      	bne.n	8001304 <__aeabi_ddiv+0x170>
 8001302:	e18a      	b.n	800161a <__aeabi_ddiv+0x486>
 8001304:	0030      	movs	r0, r6
 8001306:	f001 f9fd 	bl	8002704 <__clzsi2>
 800130a:	0003      	movs	r3, r0
 800130c:	3b0b      	subs	r3, #11
 800130e:	2b1c      	cmp	r3, #28
 8001310:	dd00      	ble.n	8001314 <__aeabi_ddiv+0x180>
 8001312:	e17b      	b.n	800160c <__aeabi_ddiv+0x478>
 8001314:	221d      	movs	r2, #29
 8001316:	1ad3      	subs	r3, r2, r3
 8001318:	465a      	mov	r2, fp
 800131a:	0001      	movs	r1, r0
 800131c:	40da      	lsrs	r2, r3
 800131e:	3908      	subs	r1, #8
 8001320:	408e      	lsls	r6, r1
 8001322:	0013      	movs	r3, r2
 8001324:	465f      	mov	r7, fp
 8001326:	4333      	orrs	r3, r6
 8001328:	4699      	mov	r9, r3
 800132a:	408f      	lsls	r7, r1
 800132c:	4b3f      	ldr	r3, [pc, #252]	; (800142c <__aeabi_ddiv+0x298>)
 800132e:	2600      	movs	r6, #0
 8001330:	1a1b      	subs	r3, r3, r0
 8001332:	9300      	str	r3, [sp, #0]
 8001334:	2300      	movs	r3, #0
 8001336:	9302      	str	r3, [sp, #8]
 8001338:	e752      	b.n	80011e0 <__aeabi_ddiv+0x4c>
 800133a:	4641      	mov	r1, r8
 800133c:	4653      	mov	r3, sl
 800133e:	430b      	orrs	r3, r1
 8001340:	493b      	ldr	r1, [pc, #236]	; (8001430 <__aeabi_ddiv+0x29c>)
 8001342:	469b      	mov	fp, r3
 8001344:	468c      	mov	ip, r1
 8001346:	9b00      	ldr	r3, [sp, #0]
 8001348:	4463      	add	r3, ip
 800134a:	9300      	str	r3, [sp, #0]
 800134c:	465b      	mov	r3, fp
 800134e:	2b00      	cmp	r3, #0
 8001350:	d13b      	bne.n	80013ca <__aeabi_ddiv+0x236>
 8001352:	2302      	movs	r3, #2
 8001354:	2200      	movs	r2, #0
 8001356:	431e      	orrs	r6, r3
 8001358:	2102      	movs	r1, #2
 800135a:	e761      	b.n	8001220 <__aeabi_ddiv+0x8c>
 800135c:	4643      	mov	r3, r8
 800135e:	4313      	orrs	r3, r2
 8001360:	469b      	mov	fp, r3
 8001362:	d037      	beq.n	80013d4 <__aeabi_ddiv+0x240>
 8001364:	4643      	mov	r3, r8
 8001366:	2b00      	cmp	r3, #0
 8001368:	d100      	bne.n	800136c <__aeabi_ddiv+0x1d8>
 800136a:	e162      	b.n	8001632 <__aeabi_ddiv+0x49e>
 800136c:	4640      	mov	r0, r8
 800136e:	f001 f9c9 	bl	8002704 <__clzsi2>
 8001372:	0003      	movs	r3, r0
 8001374:	3b0b      	subs	r3, #11
 8001376:	2b1c      	cmp	r3, #28
 8001378:	dd00      	ble.n	800137c <__aeabi_ddiv+0x1e8>
 800137a:	e153      	b.n	8001624 <__aeabi_ddiv+0x490>
 800137c:	0002      	movs	r2, r0
 800137e:	4641      	mov	r1, r8
 8001380:	3a08      	subs	r2, #8
 8001382:	4091      	lsls	r1, r2
 8001384:	4688      	mov	r8, r1
 8001386:	211d      	movs	r1, #29
 8001388:	1acb      	subs	r3, r1, r3
 800138a:	4651      	mov	r1, sl
 800138c:	40d9      	lsrs	r1, r3
 800138e:	000b      	movs	r3, r1
 8001390:	4641      	mov	r1, r8
 8001392:	430b      	orrs	r3, r1
 8001394:	469b      	mov	fp, r3
 8001396:	4653      	mov	r3, sl
 8001398:	4093      	lsls	r3, r2
 800139a:	001a      	movs	r2, r3
 800139c:	9b00      	ldr	r3, [sp, #0]
 800139e:	4925      	ldr	r1, [pc, #148]	; (8001434 <__aeabi_ddiv+0x2a0>)
 80013a0:	469c      	mov	ip, r3
 80013a2:	4460      	add	r0, ip
 80013a4:	0003      	movs	r3, r0
 80013a6:	468c      	mov	ip, r1
 80013a8:	4463      	add	r3, ip
 80013aa:	9300      	str	r3, [sp, #0]
 80013ac:	2100      	movs	r1, #0
 80013ae:	e737      	b.n	8001220 <__aeabi_ddiv+0x8c>
 80013b0:	2303      	movs	r3, #3
 80013b2:	46b1      	mov	r9, r6
 80013b4:	9000      	str	r0, [sp, #0]
 80013b6:	260c      	movs	r6, #12
 80013b8:	9302      	str	r3, [sp, #8]
 80013ba:	e711      	b.n	80011e0 <__aeabi_ddiv+0x4c>
 80013bc:	2300      	movs	r3, #0
 80013be:	9300      	str	r3, [sp, #0]
 80013c0:	3301      	adds	r3, #1
 80013c2:	2604      	movs	r6, #4
 80013c4:	2700      	movs	r7, #0
 80013c6:	9302      	str	r3, [sp, #8]
 80013c8:	e70a      	b.n	80011e0 <__aeabi_ddiv+0x4c>
 80013ca:	2303      	movs	r3, #3
 80013cc:	46c3      	mov	fp, r8
 80013ce:	431e      	orrs	r6, r3
 80013d0:	2103      	movs	r1, #3
 80013d2:	e725      	b.n	8001220 <__aeabi_ddiv+0x8c>
 80013d4:	3301      	adds	r3, #1
 80013d6:	431e      	orrs	r6, r3
 80013d8:	2200      	movs	r2, #0
 80013da:	2101      	movs	r1, #1
 80013dc:	e720      	b.n	8001220 <__aeabi_ddiv+0x8c>
 80013de:	2300      	movs	r3, #0
 80013e0:	469a      	mov	sl, r3
 80013e2:	2380      	movs	r3, #128	; 0x80
 80013e4:	2700      	movs	r7, #0
 80013e6:	031b      	lsls	r3, r3, #12
 80013e8:	4a09      	ldr	r2, [pc, #36]	; (8001410 <__aeabi_ddiv+0x27c>)
 80013ea:	e761      	b.n	80012b0 <__aeabi_ddiv+0x11c>
 80013ec:	2380      	movs	r3, #128	; 0x80
 80013ee:	4649      	mov	r1, r9
 80013f0:	031b      	lsls	r3, r3, #12
 80013f2:	4219      	tst	r1, r3
 80013f4:	d100      	bne.n	80013f8 <__aeabi_ddiv+0x264>
 80013f6:	e0e2      	b.n	80015be <__aeabi_ddiv+0x42a>
 80013f8:	4659      	mov	r1, fp
 80013fa:	4219      	tst	r1, r3
 80013fc:	d000      	beq.n	8001400 <__aeabi_ddiv+0x26c>
 80013fe:	e0de      	b.n	80015be <__aeabi_ddiv+0x42a>
 8001400:	430b      	orrs	r3, r1
 8001402:	031b      	lsls	r3, r3, #12
 8001404:	0017      	movs	r7, r2
 8001406:	0b1b      	lsrs	r3, r3, #12
 8001408:	46a2      	mov	sl, r4
 800140a:	4a01      	ldr	r2, [pc, #4]	; (8001410 <__aeabi_ddiv+0x27c>)
 800140c:	e750      	b.n	80012b0 <__aeabi_ddiv+0x11c>
 800140e:	46c0      	nop			; (mov r8, r8)
 8001410:	000007ff 	.word	0x000007ff
 8001414:	fffffc01 	.word	0xfffffc01
 8001418:	080203f0 	.word	0x080203f0
 800141c:	000003ff 	.word	0x000003ff
 8001420:	feffffff 	.word	0xfeffffff
 8001424:	000007fe 	.word	0x000007fe
 8001428:	800fffff 	.word	0x800fffff
 800142c:	fffffc0d 	.word	0xfffffc0d
 8001430:	fffff801 	.word	0xfffff801
 8001434:	000003f3 	.word	0x000003f3
 8001438:	45d9      	cmp	r9, fp
 800143a:	d900      	bls.n	800143e <__aeabi_ddiv+0x2aa>
 800143c:	e0cb      	b.n	80015d6 <__aeabi_ddiv+0x442>
 800143e:	d100      	bne.n	8001442 <__aeabi_ddiv+0x2ae>
 8001440:	e0c6      	b.n	80015d0 <__aeabi_ddiv+0x43c>
 8001442:	003c      	movs	r4, r7
 8001444:	4648      	mov	r0, r9
 8001446:	2700      	movs	r7, #0
 8001448:	9b00      	ldr	r3, [sp, #0]
 800144a:	3b01      	subs	r3, #1
 800144c:	9300      	str	r3, [sp, #0]
 800144e:	465b      	mov	r3, fp
 8001450:	0e16      	lsrs	r6, r2, #24
 8001452:	021b      	lsls	r3, r3, #8
 8001454:	431e      	orrs	r6, r3
 8001456:	0213      	lsls	r3, r2, #8
 8001458:	4698      	mov	r8, r3
 800145a:	0433      	lsls	r3, r6, #16
 800145c:	0c1b      	lsrs	r3, r3, #16
 800145e:	4699      	mov	r9, r3
 8001460:	0c31      	lsrs	r1, r6, #16
 8001462:	9101      	str	r1, [sp, #4]
 8001464:	f7fe fede 	bl	8000224 <__aeabi_uidivmod>
 8001468:	464a      	mov	r2, r9
 800146a:	4342      	muls	r2, r0
 800146c:	040b      	lsls	r3, r1, #16
 800146e:	0c21      	lsrs	r1, r4, #16
 8001470:	0005      	movs	r5, r0
 8001472:	4319      	orrs	r1, r3
 8001474:	428a      	cmp	r2, r1
 8001476:	d907      	bls.n	8001488 <__aeabi_ddiv+0x2f4>
 8001478:	1989      	adds	r1, r1, r6
 800147a:	3d01      	subs	r5, #1
 800147c:	428e      	cmp	r6, r1
 800147e:	d803      	bhi.n	8001488 <__aeabi_ddiv+0x2f4>
 8001480:	428a      	cmp	r2, r1
 8001482:	d901      	bls.n	8001488 <__aeabi_ddiv+0x2f4>
 8001484:	1e85      	subs	r5, r0, #2
 8001486:	1989      	adds	r1, r1, r6
 8001488:	1a88      	subs	r0, r1, r2
 800148a:	9901      	ldr	r1, [sp, #4]
 800148c:	f7fe feca 	bl	8000224 <__aeabi_uidivmod>
 8001490:	0409      	lsls	r1, r1, #16
 8001492:	468c      	mov	ip, r1
 8001494:	464a      	mov	r2, r9
 8001496:	0421      	lsls	r1, r4, #16
 8001498:	4664      	mov	r4, ip
 800149a:	4342      	muls	r2, r0
 800149c:	0c09      	lsrs	r1, r1, #16
 800149e:	0003      	movs	r3, r0
 80014a0:	4321      	orrs	r1, r4
 80014a2:	428a      	cmp	r2, r1
 80014a4:	d904      	bls.n	80014b0 <__aeabi_ddiv+0x31c>
 80014a6:	1989      	adds	r1, r1, r6
 80014a8:	3b01      	subs	r3, #1
 80014aa:	428e      	cmp	r6, r1
 80014ac:	d800      	bhi.n	80014b0 <__aeabi_ddiv+0x31c>
 80014ae:	e0f1      	b.n	8001694 <__aeabi_ddiv+0x500>
 80014b0:	042d      	lsls	r5, r5, #16
 80014b2:	431d      	orrs	r5, r3
 80014b4:	46ab      	mov	fp, r5
 80014b6:	4643      	mov	r3, r8
 80014b8:	1a89      	subs	r1, r1, r2
 80014ba:	4642      	mov	r2, r8
 80014bc:	0c28      	lsrs	r0, r5, #16
 80014be:	0412      	lsls	r2, r2, #16
 80014c0:	0c1d      	lsrs	r5, r3, #16
 80014c2:	465b      	mov	r3, fp
 80014c4:	0c14      	lsrs	r4, r2, #16
 80014c6:	0022      	movs	r2, r4
 80014c8:	041b      	lsls	r3, r3, #16
 80014ca:	0c1b      	lsrs	r3, r3, #16
 80014cc:	435a      	muls	r2, r3
 80014ce:	9403      	str	r4, [sp, #12]
 80014d0:	436b      	muls	r3, r5
 80014d2:	4344      	muls	r4, r0
 80014d4:	9502      	str	r5, [sp, #8]
 80014d6:	4368      	muls	r0, r5
 80014d8:	191b      	adds	r3, r3, r4
 80014da:	0c15      	lsrs	r5, r2, #16
 80014dc:	18eb      	adds	r3, r5, r3
 80014de:	429c      	cmp	r4, r3
 80014e0:	d903      	bls.n	80014ea <__aeabi_ddiv+0x356>
 80014e2:	2480      	movs	r4, #128	; 0x80
 80014e4:	0264      	lsls	r4, r4, #9
 80014e6:	46a4      	mov	ip, r4
 80014e8:	4460      	add	r0, ip
 80014ea:	0c1c      	lsrs	r4, r3, #16
 80014ec:	0415      	lsls	r5, r2, #16
 80014ee:	041b      	lsls	r3, r3, #16
 80014f0:	0c2d      	lsrs	r5, r5, #16
 80014f2:	1820      	adds	r0, r4, r0
 80014f4:	195d      	adds	r5, r3, r5
 80014f6:	4281      	cmp	r1, r0
 80014f8:	d377      	bcc.n	80015ea <__aeabi_ddiv+0x456>
 80014fa:	d073      	beq.n	80015e4 <__aeabi_ddiv+0x450>
 80014fc:	1a0c      	subs	r4, r1, r0
 80014fe:	4aa2      	ldr	r2, [pc, #648]	; (8001788 <__aeabi_ddiv+0x5f4>)
 8001500:	1b7d      	subs	r5, r7, r5
 8001502:	42af      	cmp	r7, r5
 8001504:	41bf      	sbcs	r7, r7
 8001506:	4694      	mov	ip, r2
 8001508:	9b00      	ldr	r3, [sp, #0]
 800150a:	427f      	negs	r7, r7
 800150c:	4463      	add	r3, ip
 800150e:	1be0      	subs	r0, r4, r7
 8001510:	001c      	movs	r4, r3
 8001512:	4286      	cmp	r6, r0
 8001514:	d100      	bne.n	8001518 <__aeabi_ddiv+0x384>
 8001516:	e0db      	b.n	80016d0 <__aeabi_ddiv+0x53c>
 8001518:	9901      	ldr	r1, [sp, #4]
 800151a:	f7fe fe83 	bl	8000224 <__aeabi_uidivmod>
 800151e:	464a      	mov	r2, r9
 8001520:	4342      	muls	r2, r0
 8001522:	040b      	lsls	r3, r1, #16
 8001524:	0c29      	lsrs	r1, r5, #16
 8001526:	0007      	movs	r7, r0
 8001528:	4319      	orrs	r1, r3
 800152a:	428a      	cmp	r2, r1
 800152c:	d907      	bls.n	800153e <__aeabi_ddiv+0x3aa>
 800152e:	1989      	adds	r1, r1, r6
 8001530:	3f01      	subs	r7, #1
 8001532:	428e      	cmp	r6, r1
 8001534:	d803      	bhi.n	800153e <__aeabi_ddiv+0x3aa>
 8001536:	428a      	cmp	r2, r1
 8001538:	d901      	bls.n	800153e <__aeabi_ddiv+0x3aa>
 800153a:	1e87      	subs	r7, r0, #2
 800153c:	1989      	adds	r1, r1, r6
 800153e:	1a88      	subs	r0, r1, r2
 8001540:	9901      	ldr	r1, [sp, #4]
 8001542:	f7fe fe6f 	bl	8000224 <__aeabi_uidivmod>
 8001546:	0409      	lsls	r1, r1, #16
 8001548:	464a      	mov	r2, r9
 800154a:	4689      	mov	r9, r1
 800154c:	0429      	lsls	r1, r5, #16
 800154e:	464d      	mov	r5, r9
 8001550:	4342      	muls	r2, r0
 8001552:	0c09      	lsrs	r1, r1, #16
 8001554:	0003      	movs	r3, r0
 8001556:	4329      	orrs	r1, r5
 8001558:	428a      	cmp	r2, r1
 800155a:	d907      	bls.n	800156c <__aeabi_ddiv+0x3d8>
 800155c:	1989      	adds	r1, r1, r6
 800155e:	3b01      	subs	r3, #1
 8001560:	428e      	cmp	r6, r1
 8001562:	d803      	bhi.n	800156c <__aeabi_ddiv+0x3d8>
 8001564:	428a      	cmp	r2, r1
 8001566:	d901      	bls.n	800156c <__aeabi_ddiv+0x3d8>
 8001568:	1e83      	subs	r3, r0, #2
 800156a:	1989      	adds	r1, r1, r6
 800156c:	043f      	lsls	r7, r7, #16
 800156e:	1a89      	subs	r1, r1, r2
 8001570:	003a      	movs	r2, r7
 8001572:	9f03      	ldr	r7, [sp, #12]
 8001574:	431a      	orrs	r2, r3
 8001576:	0038      	movs	r0, r7
 8001578:	0413      	lsls	r3, r2, #16
 800157a:	0c1b      	lsrs	r3, r3, #16
 800157c:	4358      	muls	r0, r3
 800157e:	4681      	mov	r9, r0
 8001580:	9802      	ldr	r0, [sp, #8]
 8001582:	0c15      	lsrs	r5, r2, #16
 8001584:	436f      	muls	r7, r5
 8001586:	4343      	muls	r3, r0
 8001588:	4345      	muls	r5, r0
 800158a:	4648      	mov	r0, r9
 800158c:	0c00      	lsrs	r0, r0, #16
 800158e:	4684      	mov	ip, r0
 8001590:	19db      	adds	r3, r3, r7
 8001592:	4463      	add	r3, ip
 8001594:	429f      	cmp	r7, r3
 8001596:	d903      	bls.n	80015a0 <__aeabi_ddiv+0x40c>
 8001598:	2080      	movs	r0, #128	; 0x80
 800159a:	0240      	lsls	r0, r0, #9
 800159c:	4684      	mov	ip, r0
 800159e:	4465      	add	r5, ip
 80015a0:	4648      	mov	r0, r9
 80015a2:	0c1f      	lsrs	r7, r3, #16
 80015a4:	0400      	lsls	r0, r0, #16
 80015a6:	041b      	lsls	r3, r3, #16
 80015a8:	0c00      	lsrs	r0, r0, #16
 80015aa:	197d      	adds	r5, r7, r5
 80015ac:	1818      	adds	r0, r3, r0
 80015ae:	42a9      	cmp	r1, r5
 80015b0:	d200      	bcs.n	80015b4 <__aeabi_ddiv+0x420>
 80015b2:	e084      	b.n	80016be <__aeabi_ddiv+0x52a>
 80015b4:	d100      	bne.n	80015b8 <__aeabi_ddiv+0x424>
 80015b6:	e07f      	b.n	80016b8 <__aeabi_ddiv+0x524>
 80015b8:	2301      	movs	r3, #1
 80015ba:	431a      	orrs	r2, r3
 80015bc:	e657      	b.n	800126e <__aeabi_ddiv+0xda>
 80015be:	2380      	movs	r3, #128	; 0x80
 80015c0:	464a      	mov	r2, r9
 80015c2:	031b      	lsls	r3, r3, #12
 80015c4:	4313      	orrs	r3, r2
 80015c6:	031b      	lsls	r3, r3, #12
 80015c8:	0b1b      	lsrs	r3, r3, #12
 80015ca:	46aa      	mov	sl, r5
 80015cc:	4a6f      	ldr	r2, [pc, #444]	; (800178c <__aeabi_ddiv+0x5f8>)
 80015ce:	e66f      	b.n	80012b0 <__aeabi_ddiv+0x11c>
 80015d0:	42ba      	cmp	r2, r7
 80015d2:	d900      	bls.n	80015d6 <__aeabi_ddiv+0x442>
 80015d4:	e735      	b.n	8001442 <__aeabi_ddiv+0x2ae>
 80015d6:	464b      	mov	r3, r9
 80015d8:	07dc      	lsls	r4, r3, #31
 80015da:	0858      	lsrs	r0, r3, #1
 80015dc:	087b      	lsrs	r3, r7, #1
 80015de:	431c      	orrs	r4, r3
 80015e0:	07ff      	lsls	r7, r7, #31
 80015e2:	e734      	b.n	800144e <__aeabi_ddiv+0x2ba>
 80015e4:	2400      	movs	r4, #0
 80015e6:	42af      	cmp	r7, r5
 80015e8:	d289      	bcs.n	80014fe <__aeabi_ddiv+0x36a>
 80015ea:	4447      	add	r7, r8
 80015ec:	4547      	cmp	r7, r8
 80015ee:	41a4      	sbcs	r4, r4
 80015f0:	465b      	mov	r3, fp
 80015f2:	4264      	negs	r4, r4
 80015f4:	19a4      	adds	r4, r4, r6
 80015f6:	1864      	adds	r4, r4, r1
 80015f8:	3b01      	subs	r3, #1
 80015fa:	42a6      	cmp	r6, r4
 80015fc:	d21e      	bcs.n	800163c <__aeabi_ddiv+0x4a8>
 80015fe:	42a0      	cmp	r0, r4
 8001600:	d86d      	bhi.n	80016de <__aeabi_ddiv+0x54a>
 8001602:	d100      	bne.n	8001606 <__aeabi_ddiv+0x472>
 8001604:	e0b6      	b.n	8001774 <__aeabi_ddiv+0x5e0>
 8001606:	1a24      	subs	r4, r4, r0
 8001608:	469b      	mov	fp, r3
 800160a:	e778      	b.n	80014fe <__aeabi_ddiv+0x36a>
 800160c:	0003      	movs	r3, r0
 800160e:	465a      	mov	r2, fp
 8001610:	3b28      	subs	r3, #40	; 0x28
 8001612:	409a      	lsls	r2, r3
 8001614:	2700      	movs	r7, #0
 8001616:	4691      	mov	r9, r2
 8001618:	e688      	b.n	800132c <__aeabi_ddiv+0x198>
 800161a:	4658      	mov	r0, fp
 800161c:	f001 f872 	bl	8002704 <__clzsi2>
 8001620:	3020      	adds	r0, #32
 8001622:	e672      	b.n	800130a <__aeabi_ddiv+0x176>
 8001624:	0003      	movs	r3, r0
 8001626:	4652      	mov	r2, sl
 8001628:	3b28      	subs	r3, #40	; 0x28
 800162a:	409a      	lsls	r2, r3
 800162c:	4693      	mov	fp, r2
 800162e:	2200      	movs	r2, #0
 8001630:	e6b4      	b.n	800139c <__aeabi_ddiv+0x208>
 8001632:	4650      	mov	r0, sl
 8001634:	f001 f866 	bl	8002704 <__clzsi2>
 8001638:	3020      	adds	r0, #32
 800163a:	e69a      	b.n	8001372 <__aeabi_ddiv+0x1de>
 800163c:	42a6      	cmp	r6, r4
 800163e:	d1e2      	bne.n	8001606 <__aeabi_ddiv+0x472>
 8001640:	45b8      	cmp	r8, r7
 8001642:	d9dc      	bls.n	80015fe <__aeabi_ddiv+0x46a>
 8001644:	1a34      	subs	r4, r6, r0
 8001646:	469b      	mov	fp, r3
 8001648:	e759      	b.n	80014fe <__aeabi_ddiv+0x36a>
 800164a:	2b1f      	cmp	r3, #31
 800164c:	dc65      	bgt.n	800171a <__aeabi_ddiv+0x586>
 800164e:	4c50      	ldr	r4, [pc, #320]	; (8001790 <__aeabi_ddiv+0x5fc>)
 8001650:	9900      	ldr	r1, [sp, #0]
 8001652:	46a4      	mov	ip, r4
 8001654:	465c      	mov	r4, fp
 8001656:	4461      	add	r1, ip
 8001658:	0008      	movs	r0, r1
 800165a:	408c      	lsls	r4, r1
 800165c:	0011      	movs	r1, r2
 800165e:	4082      	lsls	r2, r0
 8001660:	40d9      	lsrs	r1, r3
 8001662:	1e50      	subs	r0, r2, #1
 8001664:	4182      	sbcs	r2, r0
 8001666:	430c      	orrs	r4, r1
 8001668:	4314      	orrs	r4, r2
 800166a:	465a      	mov	r2, fp
 800166c:	40da      	lsrs	r2, r3
 800166e:	0013      	movs	r3, r2
 8001670:	0762      	lsls	r2, r4, #29
 8001672:	d009      	beq.n	8001688 <__aeabi_ddiv+0x4f4>
 8001674:	220f      	movs	r2, #15
 8001676:	4022      	ands	r2, r4
 8001678:	2a04      	cmp	r2, #4
 800167a:	d005      	beq.n	8001688 <__aeabi_ddiv+0x4f4>
 800167c:	0022      	movs	r2, r4
 800167e:	1d14      	adds	r4, r2, #4
 8001680:	4294      	cmp	r4, r2
 8001682:	4189      	sbcs	r1, r1
 8001684:	4249      	negs	r1, r1
 8001686:	185b      	adds	r3, r3, r1
 8001688:	021a      	lsls	r2, r3, #8
 800168a:	d562      	bpl.n	8001752 <__aeabi_ddiv+0x5be>
 800168c:	2201      	movs	r2, #1
 800168e:	2300      	movs	r3, #0
 8001690:	2700      	movs	r7, #0
 8001692:	e60d      	b.n	80012b0 <__aeabi_ddiv+0x11c>
 8001694:	428a      	cmp	r2, r1
 8001696:	d800      	bhi.n	800169a <__aeabi_ddiv+0x506>
 8001698:	e70a      	b.n	80014b0 <__aeabi_ddiv+0x31c>
 800169a:	1e83      	subs	r3, r0, #2
 800169c:	1989      	adds	r1, r1, r6
 800169e:	e707      	b.n	80014b0 <__aeabi_ddiv+0x31c>
 80016a0:	230f      	movs	r3, #15
 80016a2:	4013      	ands	r3, r2
 80016a4:	2b04      	cmp	r3, #4
 80016a6:	d100      	bne.n	80016aa <__aeabi_ddiv+0x516>
 80016a8:	e5e6      	b.n	8001278 <__aeabi_ddiv+0xe4>
 80016aa:	1d17      	adds	r7, r2, #4
 80016ac:	4297      	cmp	r7, r2
 80016ae:	4192      	sbcs	r2, r2
 80016b0:	4253      	negs	r3, r2
 80016b2:	449b      	add	fp, r3
 80016b4:	08fa      	lsrs	r2, r7, #3
 80016b6:	e5e0      	b.n	800127a <__aeabi_ddiv+0xe6>
 80016b8:	2800      	cmp	r0, #0
 80016ba:	d100      	bne.n	80016be <__aeabi_ddiv+0x52a>
 80016bc:	e5d7      	b.n	800126e <__aeabi_ddiv+0xda>
 80016be:	1871      	adds	r1, r6, r1
 80016c0:	1e53      	subs	r3, r2, #1
 80016c2:	42b1      	cmp	r1, r6
 80016c4:	d327      	bcc.n	8001716 <__aeabi_ddiv+0x582>
 80016c6:	42a9      	cmp	r1, r5
 80016c8:	d315      	bcc.n	80016f6 <__aeabi_ddiv+0x562>
 80016ca:	d058      	beq.n	800177e <__aeabi_ddiv+0x5ea>
 80016cc:	001a      	movs	r2, r3
 80016ce:	e773      	b.n	80015b8 <__aeabi_ddiv+0x424>
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	dc00      	bgt.n	80016d6 <__aeabi_ddiv+0x542>
 80016d4:	e604      	b.n	80012e0 <__aeabi_ddiv+0x14c>
 80016d6:	2301      	movs	r3, #1
 80016d8:	2200      	movs	r2, #0
 80016da:	449b      	add	fp, r3
 80016dc:	e5cd      	b.n	800127a <__aeabi_ddiv+0xe6>
 80016de:	2302      	movs	r3, #2
 80016e0:	4447      	add	r7, r8
 80016e2:	4547      	cmp	r7, r8
 80016e4:	4189      	sbcs	r1, r1
 80016e6:	425b      	negs	r3, r3
 80016e8:	469c      	mov	ip, r3
 80016ea:	4249      	negs	r1, r1
 80016ec:	1989      	adds	r1, r1, r6
 80016ee:	190c      	adds	r4, r1, r4
 80016f0:	44e3      	add	fp, ip
 80016f2:	1a24      	subs	r4, r4, r0
 80016f4:	e703      	b.n	80014fe <__aeabi_ddiv+0x36a>
 80016f6:	4643      	mov	r3, r8
 80016f8:	005f      	lsls	r7, r3, #1
 80016fa:	4547      	cmp	r7, r8
 80016fc:	419b      	sbcs	r3, r3
 80016fe:	46b8      	mov	r8, r7
 8001700:	425b      	negs	r3, r3
 8001702:	199e      	adds	r6, r3, r6
 8001704:	3a02      	subs	r2, #2
 8001706:	1989      	adds	r1, r1, r6
 8001708:	42a9      	cmp	r1, r5
 800170a:	d000      	beq.n	800170e <__aeabi_ddiv+0x57a>
 800170c:	e754      	b.n	80015b8 <__aeabi_ddiv+0x424>
 800170e:	4540      	cmp	r0, r8
 8001710:	d000      	beq.n	8001714 <__aeabi_ddiv+0x580>
 8001712:	e751      	b.n	80015b8 <__aeabi_ddiv+0x424>
 8001714:	e5ab      	b.n	800126e <__aeabi_ddiv+0xda>
 8001716:	001a      	movs	r2, r3
 8001718:	e7f6      	b.n	8001708 <__aeabi_ddiv+0x574>
 800171a:	211f      	movs	r1, #31
 800171c:	465f      	mov	r7, fp
 800171e:	4249      	negs	r1, r1
 8001720:	1b0c      	subs	r4, r1, r4
 8001722:	40e7      	lsrs	r7, r4
 8001724:	2b20      	cmp	r3, #32
 8001726:	d007      	beq.n	8001738 <__aeabi_ddiv+0x5a4>
 8001728:	491a      	ldr	r1, [pc, #104]	; (8001794 <__aeabi_ddiv+0x600>)
 800172a:	9b00      	ldr	r3, [sp, #0]
 800172c:	468c      	mov	ip, r1
 800172e:	4463      	add	r3, ip
 8001730:	0018      	movs	r0, r3
 8001732:	465b      	mov	r3, fp
 8001734:	4083      	lsls	r3, r0
 8001736:	431a      	orrs	r2, r3
 8001738:	1e50      	subs	r0, r2, #1
 800173a:	4182      	sbcs	r2, r0
 800173c:	433a      	orrs	r2, r7
 800173e:	2707      	movs	r7, #7
 8001740:	2300      	movs	r3, #0
 8001742:	4017      	ands	r7, r2
 8001744:	d009      	beq.n	800175a <__aeabi_ddiv+0x5c6>
 8001746:	210f      	movs	r1, #15
 8001748:	2300      	movs	r3, #0
 800174a:	4011      	ands	r1, r2
 800174c:	0014      	movs	r4, r2
 800174e:	2904      	cmp	r1, #4
 8001750:	d195      	bne.n	800167e <__aeabi_ddiv+0x4ea>
 8001752:	0022      	movs	r2, r4
 8001754:	075f      	lsls	r7, r3, #29
 8001756:	025b      	lsls	r3, r3, #9
 8001758:	0b1b      	lsrs	r3, r3, #12
 800175a:	08d2      	lsrs	r2, r2, #3
 800175c:	4317      	orrs	r7, r2
 800175e:	2200      	movs	r2, #0
 8001760:	e5a6      	b.n	80012b0 <__aeabi_ddiv+0x11c>
 8001762:	2380      	movs	r3, #128	; 0x80
 8001764:	4659      	mov	r1, fp
 8001766:	031b      	lsls	r3, r3, #12
 8001768:	430b      	orrs	r3, r1
 800176a:	031b      	lsls	r3, r3, #12
 800176c:	0017      	movs	r7, r2
 800176e:	0b1b      	lsrs	r3, r3, #12
 8001770:	4a06      	ldr	r2, [pc, #24]	; (800178c <__aeabi_ddiv+0x5f8>)
 8001772:	e59d      	b.n	80012b0 <__aeabi_ddiv+0x11c>
 8001774:	42bd      	cmp	r5, r7
 8001776:	d8b2      	bhi.n	80016de <__aeabi_ddiv+0x54a>
 8001778:	469b      	mov	fp, r3
 800177a:	2400      	movs	r4, #0
 800177c:	e6bf      	b.n	80014fe <__aeabi_ddiv+0x36a>
 800177e:	4580      	cmp	r8, r0
 8001780:	d3b9      	bcc.n	80016f6 <__aeabi_ddiv+0x562>
 8001782:	001a      	movs	r2, r3
 8001784:	e7c3      	b.n	800170e <__aeabi_ddiv+0x57a>
 8001786:	46c0      	nop			; (mov r8, r8)
 8001788:	000003ff 	.word	0x000003ff
 800178c:	000007ff 	.word	0x000007ff
 8001790:	0000041e 	.word	0x0000041e
 8001794:	0000043e 	.word	0x0000043e

08001798 <__eqdf2>:
 8001798:	b5f0      	push	{r4, r5, r6, r7, lr}
 800179a:	464f      	mov	r7, r9
 800179c:	4646      	mov	r6, r8
 800179e:	46d6      	mov	lr, sl
 80017a0:	4684      	mov	ip, r0
 80017a2:	b5c0      	push	{r6, r7, lr}
 80017a4:	4680      	mov	r8, r0
 80017a6:	4e19      	ldr	r6, [pc, #100]	; (800180c <__eqdf2+0x74>)
 80017a8:	0318      	lsls	r0, r3, #12
 80017aa:	030f      	lsls	r7, r1, #12
 80017ac:	004d      	lsls	r5, r1, #1
 80017ae:	0b00      	lsrs	r0, r0, #12
 80017b0:	005c      	lsls	r4, r3, #1
 80017b2:	4682      	mov	sl, r0
 80017b4:	0b3f      	lsrs	r7, r7, #12
 80017b6:	0d6d      	lsrs	r5, r5, #21
 80017b8:	0fc9      	lsrs	r1, r1, #31
 80017ba:	4691      	mov	r9, r2
 80017bc:	0d64      	lsrs	r4, r4, #21
 80017be:	0fdb      	lsrs	r3, r3, #31
 80017c0:	2001      	movs	r0, #1
 80017c2:	42b5      	cmp	r5, r6
 80017c4:	d00a      	beq.n	80017dc <__eqdf2+0x44>
 80017c6:	42b4      	cmp	r4, r6
 80017c8:	d003      	beq.n	80017d2 <__eqdf2+0x3a>
 80017ca:	42a5      	cmp	r5, r4
 80017cc:	d101      	bne.n	80017d2 <__eqdf2+0x3a>
 80017ce:	4557      	cmp	r7, sl
 80017d0:	d00c      	beq.n	80017ec <__eqdf2+0x54>
 80017d2:	bc1c      	pop	{r2, r3, r4}
 80017d4:	4690      	mov	r8, r2
 80017d6:	4699      	mov	r9, r3
 80017d8:	46a2      	mov	sl, r4
 80017da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017dc:	4666      	mov	r6, ip
 80017de:	433e      	orrs	r6, r7
 80017e0:	d1f7      	bne.n	80017d2 <__eqdf2+0x3a>
 80017e2:	42ac      	cmp	r4, r5
 80017e4:	d1f5      	bne.n	80017d2 <__eqdf2+0x3a>
 80017e6:	4654      	mov	r4, sl
 80017e8:	4314      	orrs	r4, r2
 80017ea:	d1f2      	bne.n	80017d2 <__eqdf2+0x3a>
 80017ec:	2001      	movs	r0, #1
 80017ee:	45c8      	cmp	r8, r9
 80017f0:	d1ef      	bne.n	80017d2 <__eqdf2+0x3a>
 80017f2:	4299      	cmp	r1, r3
 80017f4:	d007      	beq.n	8001806 <__eqdf2+0x6e>
 80017f6:	2d00      	cmp	r5, #0
 80017f8:	d1eb      	bne.n	80017d2 <__eqdf2+0x3a>
 80017fa:	4663      	mov	r3, ip
 80017fc:	431f      	orrs	r7, r3
 80017fe:	0038      	movs	r0, r7
 8001800:	1e47      	subs	r7, r0, #1
 8001802:	41b8      	sbcs	r0, r7
 8001804:	e7e5      	b.n	80017d2 <__eqdf2+0x3a>
 8001806:	2000      	movs	r0, #0
 8001808:	e7e3      	b.n	80017d2 <__eqdf2+0x3a>
 800180a:	46c0      	nop			; (mov r8, r8)
 800180c:	000007ff 	.word	0x000007ff

08001810 <__gedf2>:
 8001810:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001812:	464f      	mov	r7, r9
 8001814:	4646      	mov	r6, r8
 8001816:	46d6      	mov	lr, sl
 8001818:	004d      	lsls	r5, r1, #1
 800181a:	b5c0      	push	{r6, r7, lr}
 800181c:	030e      	lsls	r6, r1, #12
 800181e:	0fc9      	lsrs	r1, r1, #31
 8001820:	468a      	mov	sl, r1
 8001822:	492c      	ldr	r1, [pc, #176]	; (80018d4 <__gedf2+0xc4>)
 8001824:	031f      	lsls	r7, r3, #12
 8001826:	005c      	lsls	r4, r3, #1
 8001828:	4680      	mov	r8, r0
 800182a:	0b36      	lsrs	r6, r6, #12
 800182c:	0d6d      	lsrs	r5, r5, #21
 800182e:	4691      	mov	r9, r2
 8001830:	0b3f      	lsrs	r7, r7, #12
 8001832:	0d64      	lsrs	r4, r4, #21
 8001834:	0fdb      	lsrs	r3, r3, #31
 8001836:	428d      	cmp	r5, r1
 8001838:	d01e      	beq.n	8001878 <__gedf2+0x68>
 800183a:	428c      	cmp	r4, r1
 800183c:	d016      	beq.n	800186c <__gedf2+0x5c>
 800183e:	2d00      	cmp	r5, #0
 8001840:	d11e      	bne.n	8001880 <__gedf2+0x70>
 8001842:	4330      	orrs	r0, r6
 8001844:	4684      	mov	ip, r0
 8001846:	2c00      	cmp	r4, #0
 8001848:	d101      	bne.n	800184e <__gedf2+0x3e>
 800184a:	433a      	orrs	r2, r7
 800184c:	d023      	beq.n	8001896 <__gedf2+0x86>
 800184e:	4662      	mov	r2, ip
 8001850:	2a00      	cmp	r2, #0
 8001852:	d01a      	beq.n	800188a <__gedf2+0x7a>
 8001854:	459a      	cmp	sl, r3
 8001856:	d029      	beq.n	80018ac <__gedf2+0x9c>
 8001858:	4651      	mov	r1, sl
 800185a:	2002      	movs	r0, #2
 800185c:	3901      	subs	r1, #1
 800185e:	4008      	ands	r0, r1
 8001860:	3801      	subs	r0, #1
 8001862:	bc1c      	pop	{r2, r3, r4}
 8001864:	4690      	mov	r8, r2
 8001866:	4699      	mov	r9, r3
 8001868:	46a2      	mov	sl, r4
 800186a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800186c:	0039      	movs	r1, r7
 800186e:	4311      	orrs	r1, r2
 8001870:	d0e5      	beq.n	800183e <__gedf2+0x2e>
 8001872:	2002      	movs	r0, #2
 8001874:	4240      	negs	r0, r0
 8001876:	e7f4      	b.n	8001862 <__gedf2+0x52>
 8001878:	4330      	orrs	r0, r6
 800187a:	d1fa      	bne.n	8001872 <__gedf2+0x62>
 800187c:	42ac      	cmp	r4, r5
 800187e:	d00f      	beq.n	80018a0 <__gedf2+0x90>
 8001880:	2c00      	cmp	r4, #0
 8001882:	d10f      	bne.n	80018a4 <__gedf2+0x94>
 8001884:	433a      	orrs	r2, r7
 8001886:	d0e7      	beq.n	8001858 <__gedf2+0x48>
 8001888:	e00c      	b.n	80018a4 <__gedf2+0x94>
 800188a:	2201      	movs	r2, #1
 800188c:	3b01      	subs	r3, #1
 800188e:	4393      	bics	r3, r2
 8001890:	0018      	movs	r0, r3
 8001892:	3001      	adds	r0, #1
 8001894:	e7e5      	b.n	8001862 <__gedf2+0x52>
 8001896:	4663      	mov	r3, ip
 8001898:	2000      	movs	r0, #0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d0e1      	beq.n	8001862 <__gedf2+0x52>
 800189e:	e7db      	b.n	8001858 <__gedf2+0x48>
 80018a0:	433a      	orrs	r2, r7
 80018a2:	d1e6      	bne.n	8001872 <__gedf2+0x62>
 80018a4:	459a      	cmp	sl, r3
 80018a6:	d1d7      	bne.n	8001858 <__gedf2+0x48>
 80018a8:	42a5      	cmp	r5, r4
 80018aa:	dcd5      	bgt.n	8001858 <__gedf2+0x48>
 80018ac:	42a5      	cmp	r5, r4
 80018ae:	db05      	blt.n	80018bc <__gedf2+0xac>
 80018b0:	42be      	cmp	r6, r7
 80018b2:	d8d1      	bhi.n	8001858 <__gedf2+0x48>
 80018b4:	d008      	beq.n	80018c8 <__gedf2+0xb8>
 80018b6:	2000      	movs	r0, #0
 80018b8:	42be      	cmp	r6, r7
 80018ba:	d2d2      	bcs.n	8001862 <__gedf2+0x52>
 80018bc:	4650      	mov	r0, sl
 80018be:	2301      	movs	r3, #1
 80018c0:	3801      	subs	r0, #1
 80018c2:	4398      	bics	r0, r3
 80018c4:	3001      	adds	r0, #1
 80018c6:	e7cc      	b.n	8001862 <__gedf2+0x52>
 80018c8:	45c8      	cmp	r8, r9
 80018ca:	d8c5      	bhi.n	8001858 <__gedf2+0x48>
 80018cc:	2000      	movs	r0, #0
 80018ce:	45c8      	cmp	r8, r9
 80018d0:	d3f4      	bcc.n	80018bc <__gedf2+0xac>
 80018d2:	e7c6      	b.n	8001862 <__gedf2+0x52>
 80018d4:	000007ff 	.word	0x000007ff

080018d8 <__ledf2>:
 80018d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018da:	464f      	mov	r7, r9
 80018dc:	4646      	mov	r6, r8
 80018de:	46d6      	mov	lr, sl
 80018e0:	004d      	lsls	r5, r1, #1
 80018e2:	b5c0      	push	{r6, r7, lr}
 80018e4:	030e      	lsls	r6, r1, #12
 80018e6:	0fc9      	lsrs	r1, r1, #31
 80018e8:	468a      	mov	sl, r1
 80018ea:	492e      	ldr	r1, [pc, #184]	; (80019a4 <__ledf2+0xcc>)
 80018ec:	031f      	lsls	r7, r3, #12
 80018ee:	005c      	lsls	r4, r3, #1
 80018f0:	4680      	mov	r8, r0
 80018f2:	0b36      	lsrs	r6, r6, #12
 80018f4:	0d6d      	lsrs	r5, r5, #21
 80018f6:	4691      	mov	r9, r2
 80018f8:	0b3f      	lsrs	r7, r7, #12
 80018fa:	0d64      	lsrs	r4, r4, #21
 80018fc:	0fdb      	lsrs	r3, r3, #31
 80018fe:	428d      	cmp	r5, r1
 8001900:	d018      	beq.n	8001934 <__ledf2+0x5c>
 8001902:	428c      	cmp	r4, r1
 8001904:	d011      	beq.n	800192a <__ledf2+0x52>
 8001906:	2d00      	cmp	r5, #0
 8001908:	d118      	bne.n	800193c <__ledf2+0x64>
 800190a:	4330      	orrs	r0, r6
 800190c:	4684      	mov	ip, r0
 800190e:	2c00      	cmp	r4, #0
 8001910:	d11e      	bne.n	8001950 <__ledf2+0x78>
 8001912:	433a      	orrs	r2, r7
 8001914:	d11c      	bne.n	8001950 <__ledf2+0x78>
 8001916:	4663      	mov	r3, ip
 8001918:	2000      	movs	r0, #0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d030      	beq.n	8001980 <__ledf2+0xa8>
 800191e:	4651      	mov	r1, sl
 8001920:	2002      	movs	r0, #2
 8001922:	3901      	subs	r1, #1
 8001924:	4008      	ands	r0, r1
 8001926:	3801      	subs	r0, #1
 8001928:	e02a      	b.n	8001980 <__ledf2+0xa8>
 800192a:	0039      	movs	r1, r7
 800192c:	4311      	orrs	r1, r2
 800192e:	d0ea      	beq.n	8001906 <__ledf2+0x2e>
 8001930:	2002      	movs	r0, #2
 8001932:	e025      	b.n	8001980 <__ledf2+0xa8>
 8001934:	4330      	orrs	r0, r6
 8001936:	d1fb      	bne.n	8001930 <__ledf2+0x58>
 8001938:	42ac      	cmp	r4, r5
 800193a:	d026      	beq.n	800198a <__ledf2+0xb2>
 800193c:	2c00      	cmp	r4, #0
 800193e:	d126      	bne.n	800198e <__ledf2+0xb6>
 8001940:	433a      	orrs	r2, r7
 8001942:	d124      	bne.n	800198e <__ledf2+0xb6>
 8001944:	4651      	mov	r1, sl
 8001946:	2002      	movs	r0, #2
 8001948:	3901      	subs	r1, #1
 800194a:	4008      	ands	r0, r1
 800194c:	3801      	subs	r0, #1
 800194e:	e017      	b.n	8001980 <__ledf2+0xa8>
 8001950:	4662      	mov	r2, ip
 8001952:	2a00      	cmp	r2, #0
 8001954:	d00f      	beq.n	8001976 <__ledf2+0x9e>
 8001956:	459a      	cmp	sl, r3
 8001958:	d1e1      	bne.n	800191e <__ledf2+0x46>
 800195a:	42a5      	cmp	r5, r4
 800195c:	db05      	blt.n	800196a <__ledf2+0x92>
 800195e:	42be      	cmp	r6, r7
 8001960:	d8dd      	bhi.n	800191e <__ledf2+0x46>
 8001962:	d019      	beq.n	8001998 <__ledf2+0xc0>
 8001964:	2000      	movs	r0, #0
 8001966:	42be      	cmp	r6, r7
 8001968:	d20a      	bcs.n	8001980 <__ledf2+0xa8>
 800196a:	4650      	mov	r0, sl
 800196c:	2301      	movs	r3, #1
 800196e:	3801      	subs	r0, #1
 8001970:	4398      	bics	r0, r3
 8001972:	3001      	adds	r0, #1
 8001974:	e004      	b.n	8001980 <__ledf2+0xa8>
 8001976:	2201      	movs	r2, #1
 8001978:	3b01      	subs	r3, #1
 800197a:	4393      	bics	r3, r2
 800197c:	0018      	movs	r0, r3
 800197e:	3001      	adds	r0, #1
 8001980:	bc1c      	pop	{r2, r3, r4}
 8001982:	4690      	mov	r8, r2
 8001984:	4699      	mov	r9, r3
 8001986:	46a2      	mov	sl, r4
 8001988:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800198a:	433a      	orrs	r2, r7
 800198c:	d1d0      	bne.n	8001930 <__ledf2+0x58>
 800198e:	459a      	cmp	sl, r3
 8001990:	d1c5      	bne.n	800191e <__ledf2+0x46>
 8001992:	42a5      	cmp	r5, r4
 8001994:	dcc3      	bgt.n	800191e <__ledf2+0x46>
 8001996:	e7e0      	b.n	800195a <__ledf2+0x82>
 8001998:	45c8      	cmp	r8, r9
 800199a:	d8c0      	bhi.n	800191e <__ledf2+0x46>
 800199c:	2000      	movs	r0, #0
 800199e:	45c8      	cmp	r8, r9
 80019a0:	d3e3      	bcc.n	800196a <__ledf2+0x92>
 80019a2:	e7ed      	b.n	8001980 <__ledf2+0xa8>
 80019a4:	000007ff 	.word	0x000007ff

080019a8 <__aeabi_dmul>:
 80019a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019aa:	4657      	mov	r7, sl
 80019ac:	46de      	mov	lr, fp
 80019ae:	464e      	mov	r6, r9
 80019b0:	4645      	mov	r5, r8
 80019b2:	b5e0      	push	{r5, r6, r7, lr}
 80019b4:	4683      	mov	fp, r0
 80019b6:	0006      	movs	r6, r0
 80019b8:	030f      	lsls	r7, r1, #12
 80019ba:	0048      	lsls	r0, r1, #1
 80019bc:	b087      	sub	sp, #28
 80019be:	4692      	mov	sl, r2
 80019c0:	001d      	movs	r5, r3
 80019c2:	0b3f      	lsrs	r7, r7, #12
 80019c4:	0d40      	lsrs	r0, r0, #21
 80019c6:	0fcc      	lsrs	r4, r1, #31
 80019c8:	2800      	cmp	r0, #0
 80019ca:	d100      	bne.n	80019ce <__aeabi_dmul+0x26>
 80019cc:	e06f      	b.n	8001aae <__aeabi_dmul+0x106>
 80019ce:	4bde      	ldr	r3, [pc, #888]	; (8001d48 <__aeabi_dmul+0x3a0>)
 80019d0:	4298      	cmp	r0, r3
 80019d2:	d038      	beq.n	8001a46 <__aeabi_dmul+0x9e>
 80019d4:	2380      	movs	r3, #128	; 0x80
 80019d6:	00ff      	lsls	r7, r7, #3
 80019d8:	041b      	lsls	r3, r3, #16
 80019da:	431f      	orrs	r7, r3
 80019dc:	0f73      	lsrs	r3, r6, #29
 80019de:	433b      	orrs	r3, r7
 80019e0:	9301      	str	r3, [sp, #4]
 80019e2:	4bda      	ldr	r3, [pc, #872]	; (8001d4c <__aeabi_dmul+0x3a4>)
 80019e4:	2700      	movs	r7, #0
 80019e6:	4699      	mov	r9, r3
 80019e8:	2300      	movs	r3, #0
 80019ea:	469b      	mov	fp, r3
 80019ec:	00f6      	lsls	r6, r6, #3
 80019ee:	4481      	add	r9, r0
 80019f0:	032b      	lsls	r3, r5, #12
 80019f2:	0069      	lsls	r1, r5, #1
 80019f4:	0b1b      	lsrs	r3, r3, #12
 80019f6:	4652      	mov	r2, sl
 80019f8:	4698      	mov	r8, r3
 80019fa:	0d49      	lsrs	r1, r1, #21
 80019fc:	0fed      	lsrs	r5, r5, #31
 80019fe:	2900      	cmp	r1, #0
 8001a00:	d100      	bne.n	8001a04 <__aeabi_dmul+0x5c>
 8001a02:	e085      	b.n	8001b10 <__aeabi_dmul+0x168>
 8001a04:	4bd0      	ldr	r3, [pc, #832]	; (8001d48 <__aeabi_dmul+0x3a0>)
 8001a06:	4299      	cmp	r1, r3
 8001a08:	d100      	bne.n	8001a0c <__aeabi_dmul+0x64>
 8001a0a:	e073      	b.n	8001af4 <__aeabi_dmul+0x14c>
 8001a0c:	4643      	mov	r3, r8
 8001a0e:	00da      	lsls	r2, r3, #3
 8001a10:	2380      	movs	r3, #128	; 0x80
 8001a12:	041b      	lsls	r3, r3, #16
 8001a14:	4313      	orrs	r3, r2
 8001a16:	4652      	mov	r2, sl
 8001a18:	48cc      	ldr	r0, [pc, #816]	; (8001d4c <__aeabi_dmul+0x3a4>)
 8001a1a:	0f52      	lsrs	r2, r2, #29
 8001a1c:	4684      	mov	ip, r0
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	4652      	mov	r2, sl
 8001a22:	2000      	movs	r0, #0
 8001a24:	4461      	add	r1, ip
 8001a26:	00d2      	lsls	r2, r2, #3
 8001a28:	4489      	add	r9, r1
 8001a2a:	0021      	movs	r1, r4
 8001a2c:	4069      	eors	r1, r5
 8001a2e:	9100      	str	r1, [sp, #0]
 8001a30:	468c      	mov	ip, r1
 8001a32:	2101      	movs	r1, #1
 8001a34:	4449      	add	r1, r9
 8001a36:	468a      	mov	sl, r1
 8001a38:	2f0f      	cmp	r7, #15
 8001a3a:	d900      	bls.n	8001a3e <__aeabi_dmul+0x96>
 8001a3c:	e090      	b.n	8001b60 <__aeabi_dmul+0x1b8>
 8001a3e:	49c4      	ldr	r1, [pc, #784]	; (8001d50 <__aeabi_dmul+0x3a8>)
 8001a40:	00bf      	lsls	r7, r7, #2
 8001a42:	59cf      	ldr	r7, [r1, r7]
 8001a44:	46bf      	mov	pc, r7
 8001a46:	465b      	mov	r3, fp
 8001a48:	433b      	orrs	r3, r7
 8001a4a:	9301      	str	r3, [sp, #4]
 8001a4c:	d000      	beq.n	8001a50 <__aeabi_dmul+0xa8>
 8001a4e:	e16a      	b.n	8001d26 <__aeabi_dmul+0x37e>
 8001a50:	2302      	movs	r3, #2
 8001a52:	2708      	movs	r7, #8
 8001a54:	2600      	movs	r6, #0
 8001a56:	4681      	mov	r9, r0
 8001a58:	469b      	mov	fp, r3
 8001a5a:	e7c9      	b.n	80019f0 <__aeabi_dmul+0x48>
 8001a5c:	0032      	movs	r2, r6
 8001a5e:	4658      	mov	r0, fp
 8001a60:	9b01      	ldr	r3, [sp, #4]
 8001a62:	4661      	mov	r1, ip
 8001a64:	9100      	str	r1, [sp, #0]
 8001a66:	2802      	cmp	r0, #2
 8001a68:	d100      	bne.n	8001a6c <__aeabi_dmul+0xc4>
 8001a6a:	e075      	b.n	8001b58 <__aeabi_dmul+0x1b0>
 8001a6c:	2803      	cmp	r0, #3
 8001a6e:	d100      	bne.n	8001a72 <__aeabi_dmul+0xca>
 8001a70:	e1fe      	b.n	8001e70 <__aeabi_dmul+0x4c8>
 8001a72:	2801      	cmp	r0, #1
 8001a74:	d000      	beq.n	8001a78 <__aeabi_dmul+0xd0>
 8001a76:	e12c      	b.n	8001cd2 <__aeabi_dmul+0x32a>
 8001a78:	2300      	movs	r3, #0
 8001a7a:	2700      	movs	r7, #0
 8001a7c:	2600      	movs	r6, #0
 8001a7e:	2500      	movs	r5, #0
 8001a80:	033f      	lsls	r7, r7, #12
 8001a82:	0d2a      	lsrs	r2, r5, #20
 8001a84:	0b3f      	lsrs	r7, r7, #12
 8001a86:	48b3      	ldr	r0, [pc, #716]	; (8001d54 <__aeabi_dmul+0x3ac>)
 8001a88:	0512      	lsls	r2, r2, #20
 8001a8a:	433a      	orrs	r2, r7
 8001a8c:	4002      	ands	r2, r0
 8001a8e:	051b      	lsls	r3, r3, #20
 8001a90:	4313      	orrs	r3, r2
 8001a92:	9a00      	ldr	r2, [sp, #0]
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	07d1      	lsls	r1, r2, #31
 8001a98:	085b      	lsrs	r3, r3, #1
 8001a9a:	430b      	orrs	r3, r1
 8001a9c:	0030      	movs	r0, r6
 8001a9e:	0019      	movs	r1, r3
 8001aa0:	b007      	add	sp, #28
 8001aa2:	bc3c      	pop	{r2, r3, r4, r5}
 8001aa4:	4690      	mov	r8, r2
 8001aa6:	4699      	mov	r9, r3
 8001aa8:	46a2      	mov	sl, r4
 8001aaa:	46ab      	mov	fp, r5
 8001aac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001aae:	465b      	mov	r3, fp
 8001ab0:	433b      	orrs	r3, r7
 8001ab2:	9301      	str	r3, [sp, #4]
 8001ab4:	d100      	bne.n	8001ab8 <__aeabi_dmul+0x110>
 8001ab6:	e12f      	b.n	8001d18 <__aeabi_dmul+0x370>
 8001ab8:	2f00      	cmp	r7, #0
 8001aba:	d100      	bne.n	8001abe <__aeabi_dmul+0x116>
 8001abc:	e1a5      	b.n	8001e0a <__aeabi_dmul+0x462>
 8001abe:	0038      	movs	r0, r7
 8001ac0:	f000 fe20 	bl	8002704 <__clzsi2>
 8001ac4:	0003      	movs	r3, r0
 8001ac6:	3b0b      	subs	r3, #11
 8001ac8:	2b1c      	cmp	r3, #28
 8001aca:	dd00      	ble.n	8001ace <__aeabi_dmul+0x126>
 8001acc:	e196      	b.n	8001dfc <__aeabi_dmul+0x454>
 8001ace:	221d      	movs	r2, #29
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	465a      	mov	r2, fp
 8001ad4:	0001      	movs	r1, r0
 8001ad6:	40da      	lsrs	r2, r3
 8001ad8:	465e      	mov	r6, fp
 8001ada:	3908      	subs	r1, #8
 8001adc:	408f      	lsls	r7, r1
 8001ade:	0013      	movs	r3, r2
 8001ae0:	408e      	lsls	r6, r1
 8001ae2:	433b      	orrs	r3, r7
 8001ae4:	9301      	str	r3, [sp, #4]
 8001ae6:	4b9c      	ldr	r3, [pc, #624]	; (8001d58 <__aeabi_dmul+0x3b0>)
 8001ae8:	2700      	movs	r7, #0
 8001aea:	1a1b      	subs	r3, r3, r0
 8001aec:	4699      	mov	r9, r3
 8001aee:	2300      	movs	r3, #0
 8001af0:	469b      	mov	fp, r3
 8001af2:	e77d      	b.n	80019f0 <__aeabi_dmul+0x48>
 8001af4:	4641      	mov	r1, r8
 8001af6:	4653      	mov	r3, sl
 8001af8:	430b      	orrs	r3, r1
 8001afa:	4993      	ldr	r1, [pc, #588]	; (8001d48 <__aeabi_dmul+0x3a0>)
 8001afc:	468c      	mov	ip, r1
 8001afe:	44e1      	add	r9, ip
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d000      	beq.n	8001b06 <__aeabi_dmul+0x15e>
 8001b04:	e11a      	b.n	8001d3c <__aeabi_dmul+0x394>
 8001b06:	2202      	movs	r2, #2
 8001b08:	2002      	movs	r0, #2
 8001b0a:	4317      	orrs	r7, r2
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	e78c      	b.n	8001a2a <__aeabi_dmul+0x82>
 8001b10:	4313      	orrs	r3, r2
 8001b12:	d100      	bne.n	8001b16 <__aeabi_dmul+0x16e>
 8001b14:	e10d      	b.n	8001d32 <__aeabi_dmul+0x38a>
 8001b16:	4643      	mov	r3, r8
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d100      	bne.n	8001b1e <__aeabi_dmul+0x176>
 8001b1c:	e181      	b.n	8001e22 <__aeabi_dmul+0x47a>
 8001b1e:	4640      	mov	r0, r8
 8001b20:	f000 fdf0 	bl	8002704 <__clzsi2>
 8001b24:	0002      	movs	r2, r0
 8001b26:	3a0b      	subs	r2, #11
 8001b28:	2a1c      	cmp	r2, #28
 8001b2a:	dd00      	ble.n	8001b2e <__aeabi_dmul+0x186>
 8001b2c:	e172      	b.n	8001e14 <__aeabi_dmul+0x46c>
 8001b2e:	0001      	movs	r1, r0
 8001b30:	4643      	mov	r3, r8
 8001b32:	3908      	subs	r1, #8
 8001b34:	408b      	lsls	r3, r1
 8001b36:	4698      	mov	r8, r3
 8001b38:	231d      	movs	r3, #29
 8001b3a:	1a9a      	subs	r2, r3, r2
 8001b3c:	4653      	mov	r3, sl
 8001b3e:	40d3      	lsrs	r3, r2
 8001b40:	001a      	movs	r2, r3
 8001b42:	4643      	mov	r3, r8
 8001b44:	4313      	orrs	r3, r2
 8001b46:	4652      	mov	r2, sl
 8001b48:	408a      	lsls	r2, r1
 8001b4a:	4649      	mov	r1, r9
 8001b4c:	1a08      	subs	r0, r1, r0
 8001b4e:	4982      	ldr	r1, [pc, #520]	; (8001d58 <__aeabi_dmul+0x3b0>)
 8001b50:	4689      	mov	r9, r1
 8001b52:	4481      	add	r9, r0
 8001b54:	2000      	movs	r0, #0
 8001b56:	e768      	b.n	8001a2a <__aeabi_dmul+0x82>
 8001b58:	4b7b      	ldr	r3, [pc, #492]	; (8001d48 <__aeabi_dmul+0x3a0>)
 8001b5a:	2700      	movs	r7, #0
 8001b5c:	2600      	movs	r6, #0
 8001b5e:	e78e      	b.n	8001a7e <__aeabi_dmul+0xd6>
 8001b60:	0c14      	lsrs	r4, r2, #16
 8001b62:	0412      	lsls	r2, r2, #16
 8001b64:	0c12      	lsrs	r2, r2, #16
 8001b66:	0011      	movs	r1, r2
 8001b68:	0c37      	lsrs	r7, r6, #16
 8001b6a:	0436      	lsls	r6, r6, #16
 8001b6c:	0c35      	lsrs	r5, r6, #16
 8001b6e:	4379      	muls	r1, r7
 8001b70:	0028      	movs	r0, r5
 8001b72:	468c      	mov	ip, r1
 8001b74:	002e      	movs	r6, r5
 8001b76:	4360      	muls	r0, r4
 8001b78:	4460      	add	r0, ip
 8001b7a:	4683      	mov	fp, r0
 8001b7c:	4356      	muls	r6, r2
 8001b7e:	0021      	movs	r1, r4
 8001b80:	0c30      	lsrs	r0, r6, #16
 8001b82:	4680      	mov	r8, r0
 8001b84:	4658      	mov	r0, fp
 8001b86:	4379      	muls	r1, r7
 8001b88:	4440      	add	r0, r8
 8001b8a:	9102      	str	r1, [sp, #8]
 8001b8c:	4584      	cmp	ip, r0
 8001b8e:	d906      	bls.n	8001b9e <__aeabi_dmul+0x1f6>
 8001b90:	4688      	mov	r8, r1
 8001b92:	2180      	movs	r1, #128	; 0x80
 8001b94:	0249      	lsls	r1, r1, #9
 8001b96:	468c      	mov	ip, r1
 8001b98:	44e0      	add	r8, ip
 8001b9a:	4641      	mov	r1, r8
 8001b9c:	9102      	str	r1, [sp, #8]
 8001b9e:	0436      	lsls	r6, r6, #16
 8001ba0:	0c01      	lsrs	r1, r0, #16
 8001ba2:	0c36      	lsrs	r6, r6, #16
 8001ba4:	0400      	lsls	r0, r0, #16
 8001ba6:	468b      	mov	fp, r1
 8001ba8:	1981      	adds	r1, r0, r6
 8001baa:	0c1e      	lsrs	r6, r3, #16
 8001bac:	041b      	lsls	r3, r3, #16
 8001bae:	0c1b      	lsrs	r3, r3, #16
 8001bb0:	9103      	str	r1, [sp, #12]
 8001bb2:	0019      	movs	r1, r3
 8001bb4:	4379      	muls	r1, r7
 8001bb6:	468c      	mov	ip, r1
 8001bb8:	0028      	movs	r0, r5
 8001bba:	4375      	muls	r5, r6
 8001bbc:	4465      	add	r5, ip
 8001bbe:	46a8      	mov	r8, r5
 8001bc0:	4358      	muls	r0, r3
 8001bc2:	0c05      	lsrs	r5, r0, #16
 8001bc4:	4445      	add	r5, r8
 8001bc6:	4377      	muls	r7, r6
 8001bc8:	42a9      	cmp	r1, r5
 8001bca:	d903      	bls.n	8001bd4 <__aeabi_dmul+0x22c>
 8001bcc:	2180      	movs	r1, #128	; 0x80
 8001bce:	0249      	lsls	r1, r1, #9
 8001bd0:	468c      	mov	ip, r1
 8001bd2:	4467      	add	r7, ip
 8001bd4:	0c29      	lsrs	r1, r5, #16
 8001bd6:	468c      	mov	ip, r1
 8001bd8:	0039      	movs	r1, r7
 8001bda:	0400      	lsls	r0, r0, #16
 8001bdc:	0c00      	lsrs	r0, r0, #16
 8001bde:	042d      	lsls	r5, r5, #16
 8001be0:	182d      	adds	r5, r5, r0
 8001be2:	4461      	add	r1, ip
 8001be4:	44ab      	add	fp, r5
 8001be6:	9105      	str	r1, [sp, #20]
 8001be8:	4659      	mov	r1, fp
 8001bea:	9104      	str	r1, [sp, #16]
 8001bec:	9901      	ldr	r1, [sp, #4]
 8001bee:	040f      	lsls	r7, r1, #16
 8001bf0:	0c3f      	lsrs	r7, r7, #16
 8001bf2:	0c08      	lsrs	r0, r1, #16
 8001bf4:	0039      	movs	r1, r7
 8001bf6:	4351      	muls	r1, r2
 8001bf8:	4342      	muls	r2, r0
 8001bfa:	4690      	mov	r8, r2
 8001bfc:	0002      	movs	r2, r0
 8001bfe:	468c      	mov	ip, r1
 8001c00:	0c09      	lsrs	r1, r1, #16
 8001c02:	468b      	mov	fp, r1
 8001c04:	4362      	muls	r2, r4
 8001c06:	437c      	muls	r4, r7
 8001c08:	4444      	add	r4, r8
 8001c0a:	445c      	add	r4, fp
 8001c0c:	45a0      	cmp	r8, r4
 8001c0e:	d903      	bls.n	8001c18 <__aeabi_dmul+0x270>
 8001c10:	2180      	movs	r1, #128	; 0x80
 8001c12:	0249      	lsls	r1, r1, #9
 8001c14:	4688      	mov	r8, r1
 8001c16:	4442      	add	r2, r8
 8001c18:	0c21      	lsrs	r1, r4, #16
 8001c1a:	4688      	mov	r8, r1
 8001c1c:	4661      	mov	r1, ip
 8001c1e:	0409      	lsls	r1, r1, #16
 8001c20:	0c09      	lsrs	r1, r1, #16
 8001c22:	468c      	mov	ip, r1
 8001c24:	0039      	movs	r1, r7
 8001c26:	4359      	muls	r1, r3
 8001c28:	4343      	muls	r3, r0
 8001c2a:	4370      	muls	r0, r6
 8001c2c:	437e      	muls	r6, r7
 8001c2e:	0c0f      	lsrs	r7, r1, #16
 8001c30:	18f6      	adds	r6, r6, r3
 8001c32:	0424      	lsls	r4, r4, #16
 8001c34:	19be      	adds	r6, r7, r6
 8001c36:	4464      	add	r4, ip
 8001c38:	4442      	add	r2, r8
 8001c3a:	468c      	mov	ip, r1
 8001c3c:	42b3      	cmp	r3, r6
 8001c3e:	d903      	bls.n	8001c48 <__aeabi_dmul+0x2a0>
 8001c40:	2380      	movs	r3, #128	; 0x80
 8001c42:	025b      	lsls	r3, r3, #9
 8001c44:	4698      	mov	r8, r3
 8001c46:	4440      	add	r0, r8
 8001c48:	9b02      	ldr	r3, [sp, #8]
 8001c4a:	4661      	mov	r1, ip
 8001c4c:	4698      	mov	r8, r3
 8001c4e:	9b04      	ldr	r3, [sp, #16]
 8001c50:	0437      	lsls	r7, r6, #16
 8001c52:	4443      	add	r3, r8
 8001c54:	469b      	mov	fp, r3
 8001c56:	45ab      	cmp	fp, r5
 8001c58:	41ad      	sbcs	r5, r5
 8001c5a:	426b      	negs	r3, r5
 8001c5c:	040d      	lsls	r5, r1, #16
 8001c5e:	9905      	ldr	r1, [sp, #20]
 8001c60:	0c2d      	lsrs	r5, r5, #16
 8001c62:	468c      	mov	ip, r1
 8001c64:	197f      	adds	r7, r7, r5
 8001c66:	4467      	add	r7, ip
 8001c68:	18fd      	adds	r5, r7, r3
 8001c6a:	46a8      	mov	r8, r5
 8001c6c:	465d      	mov	r5, fp
 8001c6e:	192d      	adds	r5, r5, r4
 8001c70:	42a5      	cmp	r5, r4
 8001c72:	41a4      	sbcs	r4, r4
 8001c74:	4693      	mov	fp, r2
 8001c76:	4264      	negs	r4, r4
 8001c78:	46a4      	mov	ip, r4
 8001c7a:	44c3      	add	fp, r8
 8001c7c:	44dc      	add	ip, fp
 8001c7e:	428f      	cmp	r7, r1
 8001c80:	41bf      	sbcs	r7, r7
 8001c82:	4598      	cmp	r8, r3
 8001c84:	419b      	sbcs	r3, r3
 8001c86:	4593      	cmp	fp, r2
 8001c88:	4192      	sbcs	r2, r2
 8001c8a:	45a4      	cmp	ip, r4
 8001c8c:	41a4      	sbcs	r4, r4
 8001c8e:	425b      	negs	r3, r3
 8001c90:	427f      	negs	r7, r7
 8001c92:	431f      	orrs	r7, r3
 8001c94:	0c36      	lsrs	r6, r6, #16
 8001c96:	4252      	negs	r2, r2
 8001c98:	4264      	negs	r4, r4
 8001c9a:	19bf      	adds	r7, r7, r6
 8001c9c:	4322      	orrs	r2, r4
 8001c9e:	18bf      	adds	r7, r7, r2
 8001ca0:	4662      	mov	r2, ip
 8001ca2:	1838      	adds	r0, r7, r0
 8001ca4:	0243      	lsls	r3, r0, #9
 8001ca6:	0dd2      	lsrs	r2, r2, #23
 8001ca8:	9903      	ldr	r1, [sp, #12]
 8001caa:	4313      	orrs	r3, r2
 8001cac:	026a      	lsls	r2, r5, #9
 8001cae:	430a      	orrs	r2, r1
 8001cb0:	1e50      	subs	r0, r2, #1
 8001cb2:	4182      	sbcs	r2, r0
 8001cb4:	4661      	mov	r1, ip
 8001cb6:	0ded      	lsrs	r5, r5, #23
 8001cb8:	432a      	orrs	r2, r5
 8001cba:	024e      	lsls	r6, r1, #9
 8001cbc:	4332      	orrs	r2, r6
 8001cbe:	01d9      	lsls	r1, r3, #7
 8001cc0:	d400      	bmi.n	8001cc4 <__aeabi_dmul+0x31c>
 8001cc2:	e0b3      	b.n	8001e2c <__aeabi_dmul+0x484>
 8001cc4:	2601      	movs	r6, #1
 8001cc6:	0850      	lsrs	r0, r2, #1
 8001cc8:	4032      	ands	r2, r6
 8001cca:	4302      	orrs	r2, r0
 8001ccc:	07de      	lsls	r6, r3, #31
 8001cce:	4332      	orrs	r2, r6
 8001cd0:	085b      	lsrs	r3, r3, #1
 8001cd2:	4c22      	ldr	r4, [pc, #136]	; (8001d5c <__aeabi_dmul+0x3b4>)
 8001cd4:	4454      	add	r4, sl
 8001cd6:	2c00      	cmp	r4, #0
 8001cd8:	dd62      	ble.n	8001da0 <__aeabi_dmul+0x3f8>
 8001cda:	0751      	lsls	r1, r2, #29
 8001cdc:	d009      	beq.n	8001cf2 <__aeabi_dmul+0x34a>
 8001cde:	200f      	movs	r0, #15
 8001ce0:	4010      	ands	r0, r2
 8001ce2:	2804      	cmp	r0, #4
 8001ce4:	d005      	beq.n	8001cf2 <__aeabi_dmul+0x34a>
 8001ce6:	1d10      	adds	r0, r2, #4
 8001ce8:	4290      	cmp	r0, r2
 8001cea:	4192      	sbcs	r2, r2
 8001cec:	4252      	negs	r2, r2
 8001cee:	189b      	adds	r3, r3, r2
 8001cf0:	0002      	movs	r2, r0
 8001cf2:	01d9      	lsls	r1, r3, #7
 8001cf4:	d504      	bpl.n	8001d00 <__aeabi_dmul+0x358>
 8001cf6:	2480      	movs	r4, #128	; 0x80
 8001cf8:	4819      	ldr	r0, [pc, #100]	; (8001d60 <__aeabi_dmul+0x3b8>)
 8001cfa:	00e4      	lsls	r4, r4, #3
 8001cfc:	4003      	ands	r3, r0
 8001cfe:	4454      	add	r4, sl
 8001d00:	4818      	ldr	r0, [pc, #96]	; (8001d64 <__aeabi_dmul+0x3bc>)
 8001d02:	4284      	cmp	r4, r0
 8001d04:	dd00      	ble.n	8001d08 <__aeabi_dmul+0x360>
 8001d06:	e727      	b.n	8001b58 <__aeabi_dmul+0x1b0>
 8001d08:	075e      	lsls	r6, r3, #29
 8001d0a:	025b      	lsls	r3, r3, #9
 8001d0c:	08d2      	lsrs	r2, r2, #3
 8001d0e:	0b1f      	lsrs	r7, r3, #12
 8001d10:	0563      	lsls	r3, r4, #21
 8001d12:	4316      	orrs	r6, r2
 8001d14:	0d5b      	lsrs	r3, r3, #21
 8001d16:	e6b2      	b.n	8001a7e <__aeabi_dmul+0xd6>
 8001d18:	2300      	movs	r3, #0
 8001d1a:	4699      	mov	r9, r3
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	2704      	movs	r7, #4
 8001d20:	2600      	movs	r6, #0
 8001d22:	469b      	mov	fp, r3
 8001d24:	e664      	b.n	80019f0 <__aeabi_dmul+0x48>
 8001d26:	2303      	movs	r3, #3
 8001d28:	9701      	str	r7, [sp, #4]
 8001d2a:	4681      	mov	r9, r0
 8001d2c:	270c      	movs	r7, #12
 8001d2e:	469b      	mov	fp, r3
 8001d30:	e65e      	b.n	80019f0 <__aeabi_dmul+0x48>
 8001d32:	2201      	movs	r2, #1
 8001d34:	2001      	movs	r0, #1
 8001d36:	4317      	orrs	r7, r2
 8001d38:	2200      	movs	r2, #0
 8001d3a:	e676      	b.n	8001a2a <__aeabi_dmul+0x82>
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	2003      	movs	r0, #3
 8001d40:	431f      	orrs	r7, r3
 8001d42:	4643      	mov	r3, r8
 8001d44:	e671      	b.n	8001a2a <__aeabi_dmul+0x82>
 8001d46:	46c0      	nop			; (mov r8, r8)
 8001d48:	000007ff 	.word	0x000007ff
 8001d4c:	fffffc01 	.word	0xfffffc01
 8001d50:	08020430 	.word	0x08020430
 8001d54:	800fffff 	.word	0x800fffff
 8001d58:	fffffc0d 	.word	0xfffffc0d
 8001d5c:	000003ff 	.word	0x000003ff
 8001d60:	feffffff 	.word	0xfeffffff
 8001d64:	000007fe 	.word	0x000007fe
 8001d68:	2300      	movs	r3, #0
 8001d6a:	2780      	movs	r7, #128	; 0x80
 8001d6c:	9300      	str	r3, [sp, #0]
 8001d6e:	033f      	lsls	r7, r7, #12
 8001d70:	2600      	movs	r6, #0
 8001d72:	4b43      	ldr	r3, [pc, #268]	; (8001e80 <__aeabi_dmul+0x4d8>)
 8001d74:	e683      	b.n	8001a7e <__aeabi_dmul+0xd6>
 8001d76:	9b01      	ldr	r3, [sp, #4]
 8001d78:	0032      	movs	r2, r6
 8001d7a:	46a4      	mov	ip, r4
 8001d7c:	4658      	mov	r0, fp
 8001d7e:	e670      	b.n	8001a62 <__aeabi_dmul+0xba>
 8001d80:	46ac      	mov	ip, r5
 8001d82:	e66e      	b.n	8001a62 <__aeabi_dmul+0xba>
 8001d84:	2780      	movs	r7, #128	; 0x80
 8001d86:	9901      	ldr	r1, [sp, #4]
 8001d88:	033f      	lsls	r7, r7, #12
 8001d8a:	4239      	tst	r1, r7
 8001d8c:	d02d      	beq.n	8001dea <__aeabi_dmul+0x442>
 8001d8e:	423b      	tst	r3, r7
 8001d90:	d12b      	bne.n	8001dea <__aeabi_dmul+0x442>
 8001d92:	431f      	orrs	r7, r3
 8001d94:	033f      	lsls	r7, r7, #12
 8001d96:	0b3f      	lsrs	r7, r7, #12
 8001d98:	9500      	str	r5, [sp, #0]
 8001d9a:	0016      	movs	r6, r2
 8001d9c:	4b38      	ldr	r3, [pc, #224]	; (8001e80 <__aeabi_dmul+0x4d8>)
 8001d9e:	e66e      	b.n	8001a7e <__aeabi_dmul+0xd6>
 8001da0:	2501      	movs	r5, #1
 8001da2:	1b2d      	subs	r5, r5, r4
 8001da4:	2d38      	cmp	r5, #56	; 0x38
 8001da6:	dd00      	ble.n	8001daa <__aeabi_dmul+0x402>
 8001da8:	e666      	b.n	8001a78 <__aeabi_dmul+0xd0>
 8001daa:	2d1f      	cmp	r5, #31
 8001dac:	dc40      	bgt.n	8001e30 <__aeabi_dmul+0x488>
 8001dae:	4835      	ldr	r0, [pc, #212]	; (8001e84 <__aeabi_dmul+0x4dc>)
 8001db0:	001c      	movs	r4, r3
 8001db2:	4450      	add	r0, sl
 8001db4:	0016      	movs	r6, r2
 8001db6:	4082      	lsls	r2, r0
 8001db8:	4084      	lsls	r4, r0
 8001dba:	40ee      	lsrs	r6, r5
 8001dbc:	1e50      	subs	r0, r2, #1
 8001dbe:	4182      	sbcs	r2, r0
 8001dc0:	4334      	orrs	r4, r6
 8001dc2:	4314      	orrs	r4, r2
 8001dc4:	40eb      	lsrs	r3, r5
 8001dc6:	0762      	lsls	r2, r4, #29
 8001dc8:	d009      	beq.n	8001dde <__aeabi_dmul+0x436>
 8001dca:	220f      	movs	r2, #15
 8001dcc:	4022      	ands	r2, r4
 8001dce:	2a04      	cmp	r2, #4
 8001dd0:	d005      	beq.n	8001dde <__aeabi_dmul+0x436>
 8001dd2:	0022      	movs	r2, r4
 8001dd4:	1d14      	adds	r4, r2, #4
 8001dd6:	4294      	cmp	r4, r2
 8001dd8:	4180      	sbcs	r0, r0
 8001dda:	4240      	negs	r0, r0
 8001ddc:	181b      	adds	r3, r3, r0
 8001dde:	021a      	lsls	r2, r3, #8
 8001de0:	d53e      	bpl.n	8001e60 <__aeabi_dmul+0x4b8>
 8001de2:	2301      	movs	r3, #1
 8001de4:	2700      	movs	r7, #0
 8001de6:	2600      	movs	r6, #0
 8001de8:	e649      	b.n	8001a7e <__aeabi_dmul+0xd6>
 8001dea:	2780      	movs	r7, #128	; 0x80
 8001dec:	9b01      	ldr	r3, [sp, #4]
 8001dee:	033f      	lsls	r7, r7, #12
 8001df0:	431f      	orrs	r7, r3
 8001df2:	033f      	lsls	r7, r7, #12
 8001df4:	0b3f      	lsrs	r7, r7, #12
 8001df6:	9400      	str	r4, [sp, #0]
 8001df8:	4b21      	ldr	r3, [pc, #132]	; (8001e80 <__aeabi_dmul+0x4d8>)
 8001dfa:	e640      	b.n	8001a7e <__aeabi_dmul+0xd6>
 8001dfc:	0003      	movs	r3, r0
 8001dfe:	465a      	mov	r2, fp
 8001e00:	3b28      	subs	r3, #40	; 0x28
 8001e02:	409a      	lsls	r2, r3
 8001e04:	2600      	movs	r6, #0
 8001e06:	9201      	str	r2, [sp, #4]
 8001e08:	e66d      	b.n	8001ae6 <__aeabi_dmul+0x13e>
 8001e0a:	4658      	mov	r0, fp
 8001e0c:	f000 fc7a 	bl	8002704 <__clzsi2>
 8001e10:	3020      	adds	r0, #32
 8001e12:	e657      	b.n	8001ac4 <__aeabi_dmul+0x11c>
 8001e14:	0003      	movs	r3, r0
 8001e16:	4652      	mov	r2, sl
 8001e18:	3b28      	subs	r3, #40	; 0x28
 8001e1a:	409a      	lsls	r2, r3
 8001e1c:	0013      	movs	r3, r2
 8001e1e:	2200      	movs	r2, #0
 8001e20:	e693      	b.n	8001b4a <__aeabi_dmul+0x1a2>
 8001e22:	4650      	mov	r0, sl
 8001e24:	f000 fc6e 	bl	8002704 <__clzsi2>
 8001e28:	3020      	adds	r0, #32
 8001e2a:	e67b      	b.n	8001b24 <__aeabi_dmul+0x17c>
 8001e2c:	46ca      	mov	sl, r9
 8001e2e:	e750      	b.n	8001cd2 <__aeabi_dmul+0x32a>
 8001e30:	201f      	movs	r0, #31
 8001e32:	001e      	movs	r6, r3
 8001e34:	4240      	negs	r0, r0
 8001e36:	1b04      	subs	r4, r0, r4
 8001e38:	40e6      	lsrs	r6, r4
 8001e3a:	2d20      	cmp	r5, #32
 8001e3c:	d003      	beq.n	8001e46 <__aeabi_dmul+0x49e>
 8001e3e:	4c12      	ldr	r4, [pc, #72]	; (8001e88 <__aeabi_dmul+0x4e0>)
 8001e40:	4454      	add	r4, sl
 8001e42:	40a3      	lsls	r3, r4
 8001e44:	431a      	orrs	r2, r3
 8001e46:	1e50      	subs	r0, r2, #1
 8001e48:	4182      	sbcs	r2, r0
 8001e4a:	4332      	orrs	r2, r6
 8001e4c:	2607      	movs	r6, #7
 8001e4e:	2700      	movs	r7, #0
 8001e50:	4016      	ands	r6, r2
 8001e52:	d009      	beq.n	8001e68 <__aeabi_dmul+0x4c0>
 8001e54:	200f      	movs	r0, #15
 8001e56:	2300      	movs	r3, #0
 8001e58:	4010      	ands	r0, r2
 8001e5a:	0014      	movs	r4, r2
 8001e5c:	2804      	cmp	r0, #4
 8001e5e:	d1b9      	bne.n	8001dd4 <__aeabi_dmul+0x42c>
 8001e60:	0022      	movs	r2, r4
 8001e62:	075e      	lsls	r6, r3, #29
 8001e64:	025b      	lsls	r3, r3, #9
 8001e66:	0b1f      	lsrs	r7, r3, #12
 8001e68:	08d2      	lsrs	r2, r2, #3
 8001e6a:	4316      	orrs	r6, r2
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	e606      	b.n	8001a7e <__aeabi_dmul+0xd6>
 8001e70:	2780      	movs	r7, #128	; 0x80
 8001e72:	033f      	lsls	r7, r7, #12
 8001e74:	431f      	orrs	r7, r3
 8001e76:	033f      	lsls	r7, r7, #12
 8001e78:	0b3f      	lsrs	r7, r7, #12
 8001e7a:	0016      	movs	r6, r2
 8001e7c:	4b00      	ldr	r3, [pc, #0]	; (8001e80 <__aeabi_dmul+0x4d8>)
 8001e7e:	e5fe      	b.n	8001a7e <__aeabi_dmul+0xd6>
 8001e80:	000007ff 	.word	0x000007ff
 8001e84:	0000041e 	.word	0x0000041e
 8001e88:	0000043e 	.word	0x0000043e

08001e8c <__aeabi_dsub>:
 8001e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e8e:	4657      	mov	r7, sl
 8001e90:	464e      	mov	r6, r9
 8001e92:	4645      	mov	r5, r8
 8001e94:	46de      	mov	lr, fp
 8001e96:	000c      	movs	r4, r1
 8001e98:	0309      	lsls	r1, r1, #12
 8001e9a:	b5e0      	push	{r5, r6, r7, lr}
 8001e9c:	0a49      	lsrs	r1, r1, #9
 8001e9e:	0f46      	lsrs	r6, r0, #29
 8001ea0:	005f      	lsls	r7, r3, #1
 8001ea2:	4331      	orrs	r1, r6
 8001ea4:	031e      	lsls	r6, r3, #12
 8001ea6:	0fdb      	lsrs	r3, r3, #31
 8001ea8:	0a76      	lsrs	r6, r6, #9
 8001eaa:	469b      	mov	fp, r3
 8001eac:	0f53      	lsrs	r3, r2, #29
 8001eae:	4333      	orrs	r3, r6
 8001eb0:	4ec8      	ldr	r6, [pc, #800]	; (80021d4 <__aeabi_dsub+0x348>)
 8001eb2:	0065      	lsls	r5, r4, #1
 8001eb4:	00c0      	lsls	r0, r0, #3
 8001eb6:	0fe4      	lsrs	r4, r4, #31
 8001eb8:	00d2      	lsls	r2, r2, #3
 8001eba:	0d6d      	lsrs	r5, r5, #21
 8001ebc:	46a2      	mov	sl, r4
 8001ebe:	4681      	mov	r9, r0
 8001ec0:	0d7f      	lsrs	r7, r7, #21
 8001ec2:	469c      	mov	ip, r3
 8001ec4:	4690      	mov	r8, r2
 8001ec6:	42b7      	cmp	r7, r6
 8001ec8:	d100      	bne.n	8001ecc <__aeabi_dsub+0x40>
 8001eca:	e0b9      	b.n	8002040 <__aeabi_dsub+0x1b4>
 8001ecc:	465b      	mov	r3, fp
 8001ece:	2601      	movs	r6, #1
 8001ed0:	4073      	eors	r3, r6
 8001ed2:	469b      	mov	fp, r3
 8001ed4:	1bee      	subs	r6, r5, r7
 8001ed6:	45a3      	cmp	fp, r4
 8001ed8:	d100      	bne.n	8001edc <__aeabi_dsub+0x50>
 8001eda:	e083      	b.n	8001fe4 <__aeabi_dsub+0x158>
 8001edc:	2e00      	cmp	r6, #0
 8001ede:	dd63      	ble.n	8001fa8 <__aeabi_dsub+0x11c>
 8001ee0:	2f00      	cmp	r7, #0
 8001ee2:	d000      	beq.n	8001ee6 <__aeabi_dsub+0x5a>
 8001ee4:	e0b1      	b.n	800204a <__aeabi_dsub+0x1be>
 8001ee6:	4663      	mov	r3, ip
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	d100      	bne.n	8001eee <__aeabi_dsub+0x62>
 8001eec:	e123      	b.n	8002136 <__aeabi_dsub+0x2aa>
 8001eee:	1e73      	subs	r3, r6, #1
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d000      	beq.n	8001ef6 <__aeabi_dsub+0x6a>
 8001ef4:	e1ba      	b.n	800226c <__aeabi_dsub+0x3e0>
 8001ef6:	1a86      	subs	r6, r0, r2
 8001ef8:	4663      	mov	r3, ip
 8001efa:	42b0      	cmp	r0, r6
 8001efc:	4180      	sbcs	r0, r0
 8001efe:	2501      	movs	r5, #1
 8001f00:	1ac9      	subs	r1, r1, r3
 8001f02:	4240      	negs	r0, r0
 8001f04:	1a09      	subs	r1, r1, r0
 8001f06:	020b      	lsls	r3, r1, #8
 8001f08:	d400      	bmi.n	8001f0c <__aeabi_dsub+0x80>
 8001f0a:	e147      	b.n	800219c <__aeabi_dsub+0x310>
 8001f0c:	0249      	lsls	r1, r1, #9
 8001f0e:	0a4b      	lsrs	r3, r1, #9
 8001f10:	4698      	mov	r8, r3
 8001f12:	4643      	mov	r3, r8
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d100      	bne.n	8001f1a <__aeabi_dsub+0x8e>
 8001f18:	e189      	b.n	800222e <__aeabi_dsub+0x3a2>
 8001f1a:	4640      	mov	r0, r8
 8001f1c:	f000 fbf2 	bl	8002704 <__clzsi2>
 8001f20:	0003      	movs	r3, r0
 8001f22:	3b08      	subs	r3, #8
 8001f24:	2b1f      	cmp	r3, #31
 8001f26:	dd00      	ble.n	8001f2a <__aeabi_dsub+0x9e>
 8001f28:	e17c      	b.n	8002224 <__aeabi_dsub+0x398>
 8001f2a:	2220      	movs	r2, #32
 8001f2c:	0030      	movs	r0, r6
 8001f2e:	1ad2      	subs	r2, r2, r3
 8001f30:	4641      	mov	r1, r8
 8001f32:	40d0      	lsrs	r0, r2
 8001f34:	4099      	lsls	r1, r3
 8001f36:	0002      	movs	r2, r0
 8001f38:	409e      	lsls	r6, r3
 8001f3a:	430a      	orrs	r2, r1
 8001f3c:	429d      	cmp	r5, r3
 8001f3e:	dd00      	ble.n	8001f42 <__aeabi_dsub+0xb6>
 8001f40:	e16a      	b.n	8002218 <__aeabi_dsub+0x38c>
 8001f42:	1b5d      	subs	r5, r3, r5
 8001f44:	1c6b      	adds	r3, r5, #1
 8001f46:	2b1f      	cmp	r3, #31
 8001f48:	dd00      	ble.n	8001f4c <__aeabi_dsub+0xc0>
 8001f4a:	e194      	b.n	8002276 <__aeabi_dsub+0x3ea>
 8001f4c:	2120      	movs	r1, #32
 8001f4e:	0010      	movs	r0, r2
 8001f50:	0035      	movs	r5, r6
 8001f52:	1ac9      	subs	r1, r1, r3
 8001f54:	408e      	lsls	r6, r1
 8001f56:	40da      	lsrs	r2, r3
 8001f58:	4088      	lsls	r0, r1
 8001f5a:	40dd      	lsrs	r5, r3
 8001f5c:	1e71      	subs	r1, r6, #1
 8001f5e:	418e      	sbcs	r6, r1
 8001f60:	0011      	movs	r1, r2
 8001f62:	2207      	movs	r2, #7
 8001f64:	4328      	orrs	r0, r5
 8001f66:	2500      	movs	r5, #0
 8001f68:	4306      	orrs	r6, r0
 8001f6a:	4032      	ands	r2, r6
 8001f6c:	2a00      	cmp	r2, #0
 8001f6e:	d009      	beq.n	8001f84 <__aeabi_dsub+0xf8>
 8001f70:	230f      	movs	r3, #15
 8001f72:	4033      	ands	r3, r6
 8001f74:	2b04      	cmp	r3, #4
 8001f76:	d005      	beq.n	8001f84 <__aeabi_dsub+0xf8>
 8001f78:	1d33      	adds	r3, r6, #4
 8001f7a:	42b3      	cmp	r3, r6
 8001f7c:	41b6      	sbcs	r6, r6
 8001f7e:	4276      	negs	r6, r6
 8001f80:	1989      	adds	r1, r1, r6
 8001f82:	001e      	movs	r6, r3
 8001f84:	020b      	lsls	r3, r1, #8
 8001f86:	d400      	bmi.n	8001f8a <__aeabi_dsub+0xfe>
 8001f88:	e23d      	b.n	8002406 <__aeabi_dsub+0x57a>
 8001f8a:	1c6a      	adds	r2, r5, #1
 8001f8c:	4b91      	ldr	r3, [pc, #580]	; (80021d4 <__aeabi_dsub+0x348>)
 8001f8e:	0555      	lsls	r5, r2, #21
 8001f90:	0d6d      	lsrs	r5, r5, #21
 8001f92:	429a      	cmp	r2, r3
 8001f94:	d100      	bne.n	8001f98 <__aeabi_dsub+0x10c>
 8001f96:	e119      	b.n	80021cc <__aeabi_dsub+0x340>
 8001f98:	4a8f      	ldr	r2, [pc, #572]	; (80021d8 <__aeabi_dsub+0x34c>)
 8001f9a:	08f6      	lsrs	r6, r6, #3
 8001f9c:	400a      	ands	r2, r1
 8001f9e:	0757      	lsls	r7, r2, #29
 8001fa0:	0252      	lsls	r2, r2, #9
 8001fa2:	4337      	orrs	r7, r6
 8001fa4:	0b12      	lsrs	r2, r2, #12
 8001fa6:	e09b      	b.n	80020e0 <__aeabi_dsub+0x254>
 8001fa8:	2e00      	cmp	r6, #0
 8001faa:	d000      	beq.n	8001fae <__aeabi_dsub+0x122>
 8001fac:	e0c5      	b.n	800213a <__aeabi_dsub+0x2ae>
 8001fae:	1c6e      	adds	r6, r5, #1
 8001fb0:	0576      	lsls	r6, r6, #21
 8001fb2:	0d76      	lsrs	r6, r6, #21
 8001fb4:	2e01      	cmp	r6, #1
 8001fb6:	dc00      	bgt.n	8001fba <__aeabi_dsub+0x12e>
 8001fb8:	e148      	b.n	800224c <__aeabi_dsub+0x3c0>
 8001fba:	4667      	mov	r7, ip
 8001fbc:	1a86      	subs	r6, r0, r2
 8001fbe:	1bcb      	subs	r3, r1, r7
 8001fc0:	42b0      	cmp	r0, r6
 8001fc2:	41bf      	sbcs	r7, r7
 8001fc4:	427f      	negs	r7, r7
 8001fc6:	46b8      	mov	r8, r7
 8001fc8:	001f      	movs	r7, r3
 8001fca:	4643      	mov	r3, r8
 8001fcc:	1aff      	subs	r7, r7, r3
 8001fce:	003b      	movs	r3, r7
 8001fd0:	46b8      	mov	r8, r7
 8001fd2:	021b      	lsls	r3, r3, #8
 8001fd4:	d500      	bpl.n	8001fd8 <__aeabi_dsub+0x14c>
 8001fd6:	e15f      	b.n	8002298 <__aeabi_dsub+0x40c>
 8001fd8:	4337      	orrs	r7, r6
 8001fda:	d19a      	bne.n	8001f12 <__aeabi_dsub+0x86>
 8001fdc:	2200      	movs	r2, #0
 8001fde:	2400      	movs	r4, #0
 8001fe0:	2500      	movs	r5, #0
 8001fe2:	e079      	b.n	80020d8 <__aeabi_dsub+0x24c>
 8001fe4:	2e00      	cmp	r6, #0
 8001fe6:	dc00      	bgt.n	8001fea <__aeabi_dsub+0x15e>
 8001fe8:	e0fa      	b.n	80021e0 <__aeabi_dsub+0x354>
 8001fea:	2f00      	cmp	r7, #0
 8001fec:	d100      	bne.n	8001ff0 <__aeabi_dsub+0x164>
 8001fee:	e08d      	b.n	800210c <__aeabi_dsub+0x280>
 8001ff0:	4b78      	ldr	r3, [pc, #480]	; (80021d4 <__aeabi_dsub+0x348>)
 8001ff2:	429d      	cmp	r5, r3
 8001ff4:	d067      	beq.n	80020c6 <__aeabi_dsub+0x23a>
 8001ff6:	2380      	movs	r3, #128	; 0x80
 8001ff8:	4667      	mov	r7, ip
 8001ffa:	041b      	lsls	r3, r3, #16
 8001ffc:	431f      	orrs	r7, r3
 8001ffe:	46bc      	mov	ip, r7
 8002000:	2e38      	cmp	r6, #56	; 0x38
 8002002:	dc00      	bgt.n	8002006 <__aeabi_dsub+0x17a>
 8002004:	e152      	b.n	80022ac <__aeabi_dsub+0x420>
 8002006:	4663      	mov	r3, ip
 8002008:	4313      	orrs	r3, r2
 800200a:	1e5a      	subs	r2, r3, #1
 800200c:	4193      	sbcs	r3, r2
 800200e:	181e      	adds	r6, r3, r0
 8002010:	4286      	cmp	r6, r0
 8002012:	4180      	sbcs	r0, r0
 8002014:	4240      	negs	r0, r0
 8002016:	1809      	adds	r1, r1, r0
 8002018:	020b      	lsls	r3, r1, #8
 800201a:	d400      	bmi.n	800201e <__aeabi_dsub+0x192>
 800201c:	e0be      	b.n	800219c <__aeabi_dsub+0x310>
 800201e:	4b6d      	ldr	r3, [pc, #436]	; (80021d4 <__aeabi_dsub+0x348>)
 8002020:	3501      	adds	r5, #1
 8002022:	429d      	cmp	r5, r3
 8002024:	d100      	bne.n	8002028 <__aeabi_dsub+0x19c>
 8002026:	e0d2      	b.n	80021ce <__aeabi_dsub+0x342>
 8002028:	4a6b      	ldr	r2, [pc, #428]	; (80021d8 <__aeabi_dsub+0x34c>)
 800202a:	0873      	lsrs	r3, r6, #1
 800202c:	400a      	ands	r2, r1
 800202e:	2101      	movs	r1, #1
 8002030:	400e      	ands	r6, r1
 8002032:	431e      	orrs	r6, r3
 8002034:	0851      	lsrs	r1, r2, #1
 8002036:	07d3      	lsls	r3, r2, #31
 8002038:	2207      	movs	r2, #7
 800203a:	431e      	orrs	r6, r3
 800203c:	4032      	ands	r2, r6
 800203e:	e795      	b.n	8001f6c <__aeabi_dsub+0xe0>
 8002040:	001e      	movs	r6, r3
 8002042:	4316      	orrs	r6, r2
 8002044:	d000      	beq.n	8002048 <__aeabi_dsub+0x1bc>
 8002046:	e745      	b.n	8001ed4 <__aeabi_dsub+0x48>
 8002048:	e740      	b.n	8001ecc <__aeabi_dsub+0x40>
 800204a:	4b62      	ldr	r3, [pc, #392]	; (80021d4 <__aeabi_dsub+0x348>)
 800204c:	429d      	cmp	r5, r3
 800204e:	d03a      	beq.n	80020c6 <__aeabi_dsub+0x23a>
 8002050:	2380      	movs	r3, #128	; 0x80
 8002052:	4667      	mov	r7, ip
 8002054:	041b      	lsls	r3, r3, #16
 8002056:	431f      	orrs	r7, r3
 8002058:	46bc      	mov	ip, r7
 800205a:	2e38      	cmp	r6, #56	; 0x38
 800205c:	dd00      	ble.n	8002060 <__aeabi_dsub+0x1d4>
 800205e:	e0eb      	b.n	8002238 <__aeabi_dsub+0x3ac>
 8002060:	2e1f      	cmp	r6, #31
 8002062:	dc00      	bgt.n	8002066 <__aeabi_dsub+0x1da>
 8002064:	e13a      	b.n	80022dc <__aeabi_dsub+0x450>
 8002066:	0033      	movs	r3, r6
 8002068:	4667      	mov	r7, ip
 800206a:	3b20      	subs	r3, #32
 800206c:	40df      	lsrs	r7, r3
 800206e:	003b      	movs	r3, r7
 8002070:	2e20      	cmp	r6, #32
 8002072:	d005      	beq.n	8002080 <__aeabi_dsub+0x1f4>
 8002074:	2740      	movs	r7, #64	; 0x40
 8002076:	1bbf      	subs	r7, r7, r6
 8002078:	4666      	mov	r6, ip
 800207a:	40be      	lsls	r6, r7
 800207c:	4332      	orrs	r2, r6
 800207e:	4690      	mov	r8, r2
 8002080:	4646      	mov	r6, r8
 8002082:	1e72      	subs	r2, r6, #1
 8002084:	4196      	sbcs	r6, r2
 8002086:	4333      	orrs	r3, r6
 8002088:	e0da      	b.n	8002240 <__aeabi_dsub+0x3b4>
 800208a:	2b00      	cmp	r3, #0
 800208c:	d100      	bne.n	8002090 <__aeabi_dsub+0x204>
 800208e:	e214      	b.n	80024ba <__aeabi_dsub+0x62e>
 8002090:	4663      	mov	r3, ip
 8002092:	4313      	orrs	r3, r2
 8002094:	d100      	bne.n	8002098 <__aeabi_dsub+0x20c>
 8002096:	e168      	b.n	800236a <__aeabi_dsub+0x4de>
 8002098:	2380      	movs	r3, #128	; 0x80
 800209a:	074e      	lsls	r6, r1, #29
 800209c:	08c0      	lsrs	r0, r0, #3
 800209e:	08c9      	lsrs	r1, r1, #3
 80020a0:	031b      	lsls	r3, r3, #12
 80020a2:	4306      	orrs	r6, r0
 80020a4:	4219      	tst	r1, r3
 80020a6:	d008      	beq.n	80020ba <__aeabi_dsub+0x22e>
 80020a8:	4660      	mov	r0, ip
 80020aa:	08c0      	lsrs	r0, r0, #3
 80020ac:	4218      	tst	r0, r3
 80020ae:	d104      	bne.n	80020ba <__aeabi_dsub+0x22e>
 80020b0:	4663      	mov	r3, ip
 80020b2:	0001      	movs	r1, r0
 80020b4:	08d2      	lsrs	r2, r2, #3
 80020b6:	075e      	lsls	r6, r3, #29
 80020b8:	4316      	orrs	r6, r2
 80020ba:	00f3      	lsls	r3, r6, #3
 80020bc:	4699      	mov	r9, r3
 80020be:	00c9      	lsls	r1, r1, #3
 80020c0:	0f72      	lsrs	r2, r6, #29
 80020c2:	4d44      	ldr	r5, [pc, #272]	; (80021d4 <__aeabi_dsub+0x348>)
 80020c4:	4311      	orrs	r1, r2
 80020c6:	464b      	mov	r3, r9
 80020c8:	08de      	lsrs	r6, r3, #3
 80020ca:	4b42      	ldr	r3, [pc, #264]	; (80021d4 <__aeabi_dsub+0x348>)
 80020cc:	074f      	lsls	r7, r1, #29
 80020ce:	4337      	orrs	r7, r6
 80020d0:	08ca      	lsrs	r2, r1, #3
 80020d2:	429d      	cmp	r5, r3
 80020d4:	d100      	bne.n	80020d8 <__aeabi_dsub+0x24c>
 80020d6:	e06e      	b.n	80021b6 <__aeabi_dsub+0x32a>
 80020d8:	0312      	lsls	r2, r2, #12
 80020da:	056d      	lsls	r5, r5, #21
 80020dc:	0b12      	lsrs	r2, r2, #12
 80020de:	0d6d      	lsrs	r5, r5, #21
 80020e0:	2100      	movs	r1, #0
 80020e2:	0312      	lsls	r2, r2, #12
 80020e4:	0b13      	lsrs	r3, r2, #12
 80020e6:	0d0a      	lsrs	r2, r1, #20
 80020e8:	0512      	lsls	r2, r2, #20
 80020ea:	431a      	orrs	r2, r3
 80020ec:	4b3b      	ldr	r3, [pc, #236]	; (80021dc <__aeabi_dsub+0x350>)
 80020ee:	052d      	lsls	r5, r5, #20
 80020f0:	4013      	ands	r3, r2
 80020f2:	432b      	orrs	r3, r5
 80020f4:	005b      	lsls	r3, r3, #1
 80020f6:	07e4      	lsls	r4, r4, #31
 80020f8:	085b      	lsrs	r3, r3, #1
 80020fa:	4323      	orrs	r3, r4
 80020fc:	0038      	movs	r0, r7
 80020fe:	0019      	movs	r1, r3
 8002100:	bc3c      	pop	{r2, r3, r4, r5}
 8002102:	4690      	mov	r8, r2
 8002104:	4699      	mov	r9, r3
 8002106:	46a2      	mov	sl, r4
 8002108:	46ab      	mov	fp, r5
 800210a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800210c:	4663      	mov	r3, ip
 800210e:	4313      	orrs	r3, r2
 8002110:	d011      	beq.n	8002136 <__aeabi_dsub+0x2aa>
 8002112:	1e73      	subs	r3, r6, #1
 8002114:	2b00      	cmp	r3, #0
 8002116:	d000      	beq.n	800211a <__aeabi_dsub+0x28e>
 8002118:	e107      	b.n	800232a <__aeabi_dsub+0x49e>
 800211a:	1886      	adds	r6, r0, r2
 800211c:	4286      	cmp	r6, r0
 800211e:	4180      	sbcs	r0, r0
 8002120:	4461      	add	r1, ip
 8002122:	4240      	negs	r0, r0
 8002124:	1809      	adds	r1, r1, r0
 8002126:	2501      	movs	r5, #1
 8002128:	020b      	lsls	r3, r1, #8
 800212a:	d537      	bpl.n	800219c <__aeabi_dsub+0x310>
 800212c:	2502      	movs	r5, #2
 800212e:	e77b      	b.n	8002028 <__aeabi_dsub+0x19c>
 8002130:	003e      	movs	r6, r7
 8002132:	4661      	mov	r1, ip
 8002134:	4691      	mov	r9, r2
 8002136:	0035      	movs	r5, r6
 8002138:	e7c5      	b.n	80020c6 <__aeabi_dsub+0x23a>
 800213a:	465c      	mov	r4, fp
 800213c:	2d00      	cmp	r5, #0
 800213e:	d000      	beq.n	8002142 <__aeabi_dsub+0x2b6>
 8002140:	e0e1      	b.n	8002306 <__aeabi_dsub+0x47a>
 8002142:	000b      	movs	r3, r1
 8002144:	4303      	orrs	r3, r0
 8002146:	d0f3      	beq.n	8002130 <__aeabi_dsub+0x2a4>
 8002148:	1c73      	adds	r3, r6, #1
 800214a:	d100      	bne.n	800214e <__aeabi_dsub+0x2c2>
 800214c:	e1ac      	b.n	80024a8 <__aeabi_dsub+0x61c>
 800214e:	4b21      	ldr	r3, [pc, #132]	; (80021d4 <__aeabi_dsub+0x348>)
 8002150:	429f      	cmp	r7, r3
 8002152:	d100      	bne.n	8002156 <__aeabi_dsub+0x2ca>
 8002154:	e13a      	b.n	80023cc <__aeabi_dsub+0x540>
 8002156:	43f3      	mvns	r3, r6
 8002158:	2b38      	cmp	r3, #56	; 0x38
 800215a:	dd00      	ble.n	800215e <__aeabi_dsub+0x2d2>
 800215c:	e16f      	b.n	800243e <__aeabi_dsub+0x5b2>
 800215e:	2b1f      	cmp	r3, #31
 8002160:	dd00      	ble.n	8002164 <__aeabi_dsub+0x2d8>
 8002162:	e18c      	b.n	800247e <__aeabi_dsub+0x5f2>
 8002164:	2520      	movs	r5, #32
 8002166:	000e      	movs	r6, r1
 8002168:	1aed      	subs	r5, r5, r3
 800216a:	40ae      	lsls	r6, r5
 800216c:	46b0      	mov	r8, r6
 800216e:	0006      	movs	r6, r0
 8002170:	46aa      	mov	sl, r5
 8002172:	40de      	lsrs	r6, r3
 8002174:	4645      	mov	r5, r8
 8002176:	4335      	orrs	r5, r6
 8002178:	002e      	movs	r6, r5
 800217a:	4655      	mov	r5, sl
 800217c:	40d9      	lsrs	r1, r3
 800217e:	40a8      	lsls	r0, r5
 8002180:	4663      	mov	r3, ip
 8002182:	1e45      	subs	r5, r0, #1
 8002184:	41a8      	sbcs	r0, r5
 8002186:	1a5b      	subs	r3, r3, r1
 8002188:	469c      	mov	ip, r3
 800218a:	4330      	orrs	r0, r6
 800218c:	1a16      	subs	r6, r2, r0
 800218e:	42b2      	cmp	r2, r6
 8002190:	4192      	sbcs	r2, r2
 8002192:	4663      	mov	r3, ip
 8002194:	4252      	negs	r2, r2
 8002196:	1a99      	subs	r1, r3, r2
 8002198:	003d      	movs	r5, r7
 800219a:	e6b4      	b.n	8001f06 <__aeabi_dsub+0x7a>
 800219c:	2207      	movs	r2, #7
 800219e:	4032      	ands	r2, r6
 80021a0:	2a00      	cmp	r2, #0
 80021a2:	d000      	beq.n	80021a6 <__aeabi_dsub+0x31a>
 80021a4:	e6e4      	b.n	8001f70 <__aeabi_dsub+0xe4>
 80021a6:	4b0b      	ldr	r3, [pc, #44]	; (80021d4 <__aeabi_dsub+0x348>)
 80021a8:	08f6      	lsrs	r6, r6, #3
 80021aa:	074f      	lsls	r7, r1, #29
 80021ac:	4337      	orrs	r7, r6
 80021ae:	08ca      	lsrs	r2, r1, #3
 80021b0:	429d      	cmp	r5, r3
 80021b2:	d000      	beq.n	80021b6 <__aeabi_dsub+0x32a>
 80021b4:	e790      	b.n	80020d8 <__aeabi_dsub+0x24c>
 80021b6:	003b      	movs	r3, r7
 80021b8:	4313      	orrs	r3, r2
 80021ba:	d100      	bne.n	80021be <__aeabi_dsub+0x332>
 80021bc:	e1a6      	b.n	800250c <__aeabi_dsub+0x680>
 80021be:	2380      	movs	r3, #128	; 0x80
 80021c0:	031b      	lsls	r3, r3, #12
 80021c2:	431a      	orrs	r2, r3
 80021c4:	0312      	lsls	r2, r2, #12
 80021c6:	0b12      	lsrs	r2, r2, #12
 80021c8:	4d02      	ldr	r5, [pc, #8]	; (80021d4 <__aeabi_dsub+0x348>)
 80021ca:	e789      	b.n	80020e0 <__aeabi_dsub+0x254>
 80021cc:	0015      	movs	r5, r2
 80021ce:	2200      	movs	r2, #0
 80021d0:	2700      	movs	r7, #0
 80021d2:	e785      	b.n	80020e0 <__aeabi_dsub+0x254>
 80021d4:	000007ff 	.word	0x000007ff
 80021d8:	ff7fffff 	.word	0xff7fffff
 80021dc:	800fffff 	.word	0x800fffff
 80021e0:	2e00      	cmp	r6, #0
 80021e2:	d000      	beq.n	80021e6 <__aeabi_dsub+0x35a>
 80021e4:	e0c7      	b.n	8002376 <__aeabi_dsub+0x4ea>
 80021e6:	1c6b      	adds	r3, r5, #1
 80021e8:	055e      	lsls	r6, r3, #21
 80021ea:	0d76      	lsrs	r6, r6, #21
 80021ec:	2e01      	cmp	r6, #1
 80021ee:	dc00      	bgt.n	80021f2 <__aeabi_dsub+0x366>
 80021f0:	e0f0      	b.n	80023d4 <__aeabi_dsub+0x548>
 80021f2:	4dc8      	ldr	r5, [pc, #800]	; (8002514 <__aeabi_dsub+0x688>)
 80021f4:	42ab      	cmp	r3, r5
 80021f6:	d100      	bne.n	80021fa <__aeabi_dsub+0x36e>
 80021f8:	e0b9      	b.n	800236e <__aeabi_dsub+0x4e2>
 80021fa:	1885      	adds	r5, r0, r2
 80021fc:	000a      	movs	r2, r1
 80021fe:	4285      	cmp	r5, r0
 8002200:	4189      	sbcs	r1, r1
 8002202:	4462      	add	r2, ip
 8002204:	4249      	negs	r1, r1
 8002206:	1851      	adds	r1, r2, r1
 8002208:	2207      	movs	r2, #7
 800220a:	07ce      	lsls	r6, r1, #31
 800220c:	086d      	lsrs	r5, r5, #1
 800220e:	432e      	orrs	r6, r5
 8002210:	0849      	lsrs	r1, r1, #1
 8002212:	4032      	ands	r2, r6
 8002214:	001d      	movs	r5, r3
 8002216:	e6a9      	b.n	8001f6c <__aeabi_dsub+0xe0>
 8002218:	49bf      	ldr	r1, [pc, #764]	; (8002518 <__aeabi_dsub+0x68c>)
 800221a:	1aed      	subs	r5, r5, r3
 800221c:	4011      	ands	r1, r2
 800221e:	2207      	movs	r2, #7
 8002220:	4032      	ands	r2, r6
 8002222:	e6a3      	b.n	8001f6c <__aeabi_dsub+0xe0>
 8002224:	0032      	movs	r2, r6
 8002226:	3828      	subs	r0, #40	; 0x28
 8002228:	4082      	lsls	r2, r0
 800222a:	2600      	movs	r6, #0
 800222c:	e686      	b.n	8001f3c <__aeabi_dsub+0xb0>
 800222e:	0030      	movs	r0, r6
 8002230:	f000 fa68 	bl	8002704 <__clzsi2>
 8002234:	3020      	adds	r0, #32
 8002236:	e673      	b.n	8001f20 <__aeabi_dsub+0x94>
 8002238:	4663      	mov	r3, ip
 800223a:	4313      	orrs	r3, r2
 800223c:	1e5a      	subs	r2, r3, #1
 800223e:	4193      	sbcs	r3, r2
 8002240:	1ac6      	subs	r6, r0, r3
 8002242:	42b0      	cmp	r0, r6
 8002244:	4180      	sbcs	r0, r0
 8002246:	4240      	negs	r0, r0
 8002248:	1a09      	subs	r1, r1, r0
 800224a:	e65c      	b.n	8001f06 <__aeabi_dsub+0x7a>
 800224c:	000e      	movs	r6, r1
 800224e:	4667      	mov	r7, ip
 8002250:	4306      	orrs	r6, r0
 8002252:	4317      	orrs	r7, r2
 8002254:	2d00      	cmp	r5, #0
 8002256:	d15e      	bne.n	8002316 <__aeabi_dsub+0x48a>
 8002258:	2e00      	cmp	r6, #0
 800225a:	d000      	beq.n	800225e <__aeabi_dsub+0x3d2>
 800225c:	e0f3      	b.n	8002446 <__aeabi_dsub+0x5ba>
 800225e:	2f00      	cmp	r7, #0
 8002260:	d100      	bne.n	8002264 <__aeabi_dsub+0x3d8>
 8002262:	e11e      	b.n	80024a2 <__aeabi_dsub+0x616>
 8002264:	465c      	mov	r4, fp
 8002266:	4661      	mov	r1, ip
 8002268:	4691      	mov	r9, r2
 800226a:	e72c      	b.n	80020c6 <__aeabi_dsub+0x23a>
 800226c:	4fa9      	ldr	r7, [pc, #676]	; (8002514 <__aeabi_dsub+0x688>)
 800226e:	42be      	cmp	r6, r7
 8002270:	d07b      	beq.n	800236a <__aeabi_dsub+0x4de>
 8002272:	001e      	movs	r6, r3
 8002274:	e6f1      	b.n	800205a <__aeabi_dsub+0x1ce>
 8002276:	0010      	movs	r0, r2
 8002278:	3d1f      	subs	r5, #31
 800227a:	40e8      	lsrs	r0, r5
 800227c:	2b20      	cmp	r3, #32
 800227e:	d003      	beq.n	8002288 <__aeabi_dsub+0x3fc>
 8002280:	2140      	movs	r1, #64	; 0x40
 8002282:	1acb      	subs	r3, r1, r3
 8002284:	409a      	lsls	r2, r3
 8002286:	4316      	orrs	r6, r2
 8002288:	1e73      	subs	r3, r6, #1
 800228a:	419e      	sbcs	r6, r3
 800228c:	2207      	movs	r2, #7
 800228e:	4306      	orrs	r6, r0
 8002290:	4032      	ands	r2, r6
 8002292:	2100      	movs	r1, #0
 8002294:	2500      	movs	r5, #0
 8002296:	e783      	b.n	80021a0 <__aeabi_dsub+0x314>
 8002298:	1a16      	subs	r6, r2, r0
 800229a:	4663      	mov	r3, ip
 800229c:	42b2      	cmp	r2, r6
 800229e:	4180      	sbcs	r0, r0
 80022a0:	1a59      	subs	r1, r3, r1
 80022a2:	4240      	negs	r0, r0
 80022a4:	1a0b      	subs	r3, r1, r0
 80022a6:	4698      	mov	r8, r3
 80022a8:	465c      	mov	r4, fp
 80022aa:	e632      	b.n	8001f12 <__aeabi_dsub+0x86>
 80022ac:	2e1f      	cmp	r6, #31
 80022ae:	dd00      	ble.n	80022b2 <__aeabi_dsub+0x426>
 80022b0:	e0ab      	b.n	800240a <__aeabi_dsub+0x57e>
 80022b2:	2720      	movs	r7, #32
 80022b4:	1bbb      	subs	r3, r7, r6
 80022b6:	469a      	mov	sl, r3
 80022b8:	4663      	mov	r3, ip
 80022ba:	4657      	mov	r7, sl
 80022bc:	40bb      	lsls	r3, r7
 80022be:	4699      	mov	r9, r3
 80022c0:	0013      	movs	r3, r2
 80022c2:	464f      	mov	r7, r9
 80022c4:	40f3      	lsrs	r3, r6
 80022c6:	431f      	orrs	r7, r3
 80022c8:	003b      	movs	r3, r7
 80022ca:	4657      	mov	r7, sl
 80022cc:	40ba      	lsls	r2, r7
 80022ce:	1e57      	subs	r7, r2, #1
 80022d0:	41ba      	sbcs	r2, r7
 80022d2:	4313      	orrs	r3, r2
 80022d4:	4662      	mov	r2, ip
 80022d6:	40f2      	lsrs	r2, r6
 80022d8:	1889      	adds	r1, r1, r2
 80022da:	e698      	b.n	800200e <__aeabi_dsub+0x182>
 80022dc:	2720      	movs	r7, #32
 80022de:	1bbb      	subs	r3, r7, r6
 80022e0:	469a      	mov	sl, r3
 80022e2:	4663      	mov	r3, ip
 80022e4:	4657      	mov	r7, sl
 80022e6:	40bb      	lsls	r3, r7
 80022e8:	4699      	mov	r9, r3
 80022ea:	0013      	movs	r3, r2
 80022ec:	464f      	mov	r7, r9
 80022ee:	40f3      	lsrs	r3, r6
 80022f0:	431f      	orrs	r7, r3
 80022f2:	003b      	movs	r3, r7
 80022f4:	4657      	mov	r7, sl
 80022f6:	40ba      	lsls	r2, r7
 80022f8:	1e57      	subs	r7, r2, #1
 80022fa:	41ba      	sbcs	r2, r7
 80022fc:	4313      	orrs	r3, r2
 80022fe:	4662      	mov	r2, ip
 8002300:	40f2      	lsrs	r2, r6
 8002302:	1a89      	subs	r1, r1, r2
 8002304:	e79c      	b.n	8002240 <__aeabi_dsub+0x3b4>
 8002306:	4b83      	ldr	r3, [pc, #524]	; (8002514 <__aeabi_dsub+0x688>)
 8002308:	429f      	cmp	r7, r3
 800230a:	d05f      	beq.n	80023cc <__aeabi_dsub+0x540>
 800230c:	2580      	movs	r5, #128	; 0x80
 800230e:	042d      	lsls	r5, r5, #16
 8002310:	4273      	negs	r3, r6
 8002312:	4329      	orrs	r1, r5
 8002314:	e720      	b.n	8002158 <__aeabi_dsub+0x2cc>
 8002316:	2e00      	cmp	r6, #0
 8002318:	d10c      	bne.n	8002334 <__aeabi_dsub+0x4a8>
 800231a:	2f00      	cmp	r7, #0
 800231c:	d100      	bne.n	8002320 <__aeabi_dsub+0x494>
 800231e:	e0d0      	b.n	80024c2 <__aeabi_dsub+0x636>
 8002320:	465c      	mov	r4, fp
 8002322:	4661      	mov	r1, ip
 8002324:	4691      	mov	r9, r2
 8002326:	4d7b      	ldr	r5, [pc, #492]	; (8002514 <__aeabi_dsub+0x688>)
 8002328:	e6cd      	b.n	80020c6 <__aeabi_dsub+0x23a>
 800232a:	4f7a      	ldr	r7, [pc, #488]	; (8002514 <__aeabi_dsub+0x688>)
 800232c:	42be      	cmp	r6, r7
 800232e:	d01c      	beq.n	800236a <__aeabi_dsub+0x4de>
 8002330:	001e      	movs	r6, r3
 8002332:	e665      	b.n	8002000 <__aeabi_dsub+0x174>
 8002334:	2f00      	cmp	r7, #0
 8002336:	d018      	beq.n	800236a <__aeabi_dsub+0x4de>
 8002338:	08c0      	lsrs	r0, r0, #3
 800233a:	074e      	lsls	r6, r1, #29
 800233c:	4306      	orrs	r6, r0
 800233e:	2080      	movs	r0, #128	; 0x80
 8002340:	08c9      	lsrs	r1, r1, #3
 8002342:	0300      	lsls	r0, r0, #12
 8002344:	4201      	tst	r1, r0
 8002346:	d008      	beq.n	800235a <__aeabi_dsub+0x4ce>
 8002348:	4663      	mov	r3, ip
 800234a:	08dc      	lsrs	r4, r3, #3
 800234c:	4204      	tst	r4, r0
 800234e:	d104      	bne.n	800235a <__aeabi_dsub+0x4ce>
 8002350:	0021      	movs	r1, r4
 8002352:	46da      	mov	sl, fp
 8002354:	08d2      	lsrs	r2, r2, #3
 8002356:	075e      	lsls	r6, r3, #29
 8002358:	4316      	orrs	r6, r2
 800235a:	00f3      	lsls	r3, r6, #3
 800235c:	4699      	mov	r9, r3
 800235e:	2401      	movs	r4, #1
 8002360:	4653      	mov	r3, sl
 8002362:	00c9      	lsls	r1, r1, #3
 8002364:	0f72      	lsrs	r2, r6, #29
 8002366:	4311      	orrs	r1, r2
 8002368:	401c      	ands	r4, r3
 800236a:	4d6a      	ldr	r5, [pc, #424]	; (8002514 <__aeabi_dsub+0x688>)
 800236c:	e6ab      	b.n	80020c6 <__aeabi_dsub+0x23a>
 800236e:	001d      	movs	r5, r3
 8002370:	2200      	movs	r2, #0
 8002372:	2700      	movs	r7, #0
 8002374:	e6b4      	b.n	80020e0 <__aeabi_dsub+0x254>
 8002376:	2d00      	cmp	r5, #0
 8002378:	d159      	bne.n	800242e <__aeabi_dsub+0x5a2>
 800237a:	000b      	movs	r3, r1
 800237c:	4303      	orrs	r3, r0
 800237e:	d100      	bne.n	8002382 <__aeabi_dsub+0x4f6>
 8002380:	e6d6      	b.n	8002130 <__aeabi_dsub+0x2a4>
 8002382:	1c73      	adds	r3, r6, #1
 8002384:	d100      	bne.n	8002388 <__aeabi_dsub+0x4fc>
 8002386:	e0b2      	b.n	80024ee <__aeabi_dsub+0x662>
 8002388:	4b62      	ldr	r3, [pc, #392]	; (8002514 <__aeabi_dsub+0x688>)
 800238a:	429f      	cmp	r7, r3
 800238c:	d01e      	beq.n	80023cc <__aeabi_dsub+0x540>
 800238e:	43f3      	mvns	r3, r6
 8002390:	2b38      	cmp	r3, #56	; 0x38
 8002392:	dc6f      	bgt.n	8002474 <__aeabi_dsub+0x5e8>
 8002394:	2b1f      	cmp	r3, #31
 8002396:	dd00      	ble.n	800239a <__aeabi_dsub+0x50e>
 8002398:	e097      	b.n	80024ca <__aeabi_dsub+0x63e>
 800239a:	2520      	movs	r5, #32
 800239c:	000e      	movs	r6, r1
 800239e:	1aed      	subs	r5, r5, r3
 80023a0:	40ae      	lsls	r6, r5
 80023a2:	46b0      	mov	r8, r6
 80023a4:	0006      	movs	r6, r0
 80023a6:	46aa      	mov	sl, r5
 80023a8:	40de      	lsrs	r6, r3
 80023aa:	4645      	mov	r5, r8
 80023ac:	4335      	orrs	r5, r6
 80023ae:	002e      	movs	r6, r5
 80023b0:	4655      	mov	r5, sl
 80023b2:	40a8      	lsls	r0, r5
 80023b4:	40d9      	lsrs	r1, r3
 80023b6:	1e45      	subs	r5, r0, #1
 80023b8:	41a8      	sbcs	r0, r5
 80023ba:	448c      	add	ip, r1
 80023bc:	4306      	orrs	r6, r0
 80023be:	18b6      	adds	r6, r6, r2
 80023c0:	4296      	cmp	r6, r2
 80023c2:	4192      	sbcs	r2, r2
 80023c4:	4251      	negs	r1, r2
 80023c6:	4461      	add	r1, ip
 80023c8:	003d      	movs	r5, r7
 80023ca:	e625      	b.n	8002018 <__aeabi_dsub+0x18c>
 80023cc:	003d      	movs	r5, r7
 80023ce:	4661      	mov	r1, ip
 80023d0:	4691      	mov	r9, r2
 80023d2:	e678      	b.n	80020c6 <__aeabi_dsub+0x23a>
 80023d4:	000b      	movs	r3, r1
 80023d6:	4303      	orrs	r3, r0
 80023d8:	2d00      	cmp	r5, #0
 80023da:	d000      	beq.n	80023de <__aeabi_dsub+0x552>
 80023dc:	e655      	b.n	800208a <__aeabi_dsub+0x1fe>
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d0f5      	beq.n	80023ce <__aeabi_dsub+0x542>
 80023e2:	4663      	mov	r3, ip
 80023e4:	4313      	orrs	r3, r2
 80023e6:	d100      	bne.n	80023ea <__aeabi_dsub+0x55e>
 80023e8:	e66d      	b.n	80020c6 <__aeabi_dsub+0x23a>
 80023ea:	1886      	adds	r6, r0, r2
 80023ec:	4286      	cmp	r6, r0
 80023ee:	4180      	sbcs	r0, r0
 80023f0:	4461      	add	r1, ip
 80023f2:	4240      	negs	r0, r0
 80023f4:	1809      	adds	r1, r1, r0
 80023f6:	2200      	movs	r2, #0
 80023f8:	020b      	lsls	r3, r1, #8
 80023fa:	d400      	bmi.n	80023fe <__aeabi_dsub+0x572>
 80023fc:	e6d0      	b.n	80021a0 <__aeabi_dsub+0x314>
 80023fe:	4b46      	ldr	r3, [pc, #280]	; (8002518 <__aeabi_dsub+0x68c>)
 8002400:	3501      	adds	r5, #1
 8002402:	4019      	ands	r1, r3
 8002404:	e5b2      	b.n	8001f6c <__aeabi_dsub+0xe0>
 8002406:	46b1      	mov	r9, r6
 8002408:	e65d      	b.n	80020c6 <__aeabi_dsub+0x23a>
 800240a:	0033      	movs	r3, r6
 800240c:	4667      	mov	r7, ip
 800240e:	3b20      	subs	r3, #32
 8002410:	40df      	lsrs	r7, r3
 8002412:	003b      	movs	r3, r7
 8002414:	2e20      	cmp	r6, #32
 8002416:	d005      	beq.n	8002424 <__aeabi_dsub+0x598>
 8002418:	2740      	movs	r7, #64	; 0x40
 800241a:	1bbf      	subs	r7, r7, r6
 800241c:	4666      	mov	r6, ip
 800241e:	40be      	lsls	r6, r7
 8002420:	4332      	orrs	r2, r6
 8002422:	4690      	mov	r8, r2
 8002424:	4646      	mov	r6, r8
 8002426:	1e72      	subs	r2, r6, #1
 8002428:	4196      	sbcs	r6, r2
 800242a:	4333      	orrs	r3, r6
 800242c:	e5ef      	b.n	800200e <__aeabi_dsub+0x182>
 800242e:	4b39      	ldr	r3, [pc, #228]	; (8002514 <__aeabi_dsub+0x688>)
 8002430:	429f      	cmp	r7, r3
 8002432:	d0cb      	beq.n	80023cc <__aeabi_dsub+0x540>
 8002434:	2580      	movs	r5, #128	; 0x80
 8002436:	042d      	lsls	r5, r5, #16
 8002438:	4273      	negs	r3, r6
 800243a:	4329      	orrs	r1, r5
 800243c:	e7a8      	b.n	8002390 <__aeabi_dsub+0x504>
 800243e:	4308      	orrs	r0, r1
 8002440:	1e41      	subs	r1, r0, #1
 8002442:	4188      	sbcs	r0, r1
 8002444:	e6a2      	b.n	800218c <__aeabi_dsub+0x300>
 8002446:	2f00      	cmp	r7, #0
 8002448:	d100      	bne.n	800244c <__aeabi_dsub+0x5c0>
 800244a:	e63c      	b.n	80020c6 <__aeabi_dsub+0x23a>
 800244c:	4663      	mov	r3, ip
 800244e:	1a86      	subs	r6, r0, r2
 8002450:	1acf      	subs	r7, r1, r3
 8002452:	42b0      	cmp	r0, r6
 8002454:	419b      	sbcs	r3, r3
 8002456:	425b      	negs	r3, r3
 8002458:	1afb      	subs	r3, r7, r3
 800245a:	4698      	mov	r8, r3
 800245c:	021b      	lsls	r3, r3, #8
 800245e:	d54e      	bpl.n	80024fe <__aeabi_dsub+0x672>
 8002460:	1a16      	subs	r6, r2, r0
 8002462:	4663      	mov	r3, ip
 8002464:	42b2      	cmp	r2, r6
 8002466:	4192      	sbcs	r2, r2
 8002468:	1a59      	subs	r1, r3, r1
 800246a:	4252      	negs	r2, r2
 800246c:	1a89      	subs	r1, r1, r2
 800246e:	465c      	mov	r4, fp
 8002470:	2200      	movs	r2, #0
 8002472:	e57b      	b.n	8001f6c <__aeabi_dsub+0xe0>
 8002474:	4301      	orrs	r1, r0
 8002476:	000e      	movs	r6, r1
 8002478:	1e71      	subs	r1, r6, #1
 800247a:	418e      	sbcs	r6, r1
 800247c:	e79f      	b.n	80023be <__aeabi_dsub+0x532>
 800247e:	001d      	movs	r5, r3
 8002480:	000e      	movs	r6, r1
 8002482:	3d20      	subs	r5, #32
 8002484:	40ee      	lsrs	r6, r5
 8002486:	46b0      	mov	r8, r6
 8002488:	2b20      	cmp	r3, #32
 800248a:	d004      	beq.n	8002496 <__aeabi_dsub+0x60a>
 800248c:	2540      	movs	r5, #64	; 0x40
 800248e:	1aeb      	subs	r3, r5, r3
 8002490:	4099      	lsls	r1, r3
 8002492:	4308      	orrs	r0, r1
 8002494:	4681      	mov	r9, r0
 8002496:	4648      	mov	r0, r9
 8002498:	4643      	mov	r3, r8
 800249a:	1e41      	subs	r1, r0, #1
 800249c:	4188      	sbcs	r0, r1
 800249e:	4318      	orrs	r0, r3
 80024a0:	e674      	b.n	800218c <__aeabi_dsub+0x300>
 80024a2:	2200      	movs	r2, #0
 80024a4:	2400      	movs	r4, #0
 80024a6:	e617      	b.n	80020d8 <__aeabi_dsub+0x24c>
 80024a8:	1a16      	subs	r6, r2, r0
 80024aa:	4663      	mov	r3, ip
 80024ac:	42b2      	cmp	r2, r6
 80024ae:	4192      	sbcs	r2, r2
 80024b0:	1a59      	subs	r1, r3, r1
 80024b2:	4252      	negs	r2, r2
 80024b4:	1a89      	subs	r1, r1, r2
 80024b6:	003d      	movs	r5, r7
 80024b8:	e525      	b.n	8001f06 <__aeabi_dsub+0x7a>
 80024ba:	4661      	mov	r1, ip
 80024bc:	4691      	mov	r9, r2
 80024be:	4d15      	ldr	r5, [pc, #84]	; (8002514 <__aeabi_dsub+0x688>)
 80024c0:	e601      	b.n	80020c6 <__aeabi_dsub+0x23a>
 80024c2:	2280      	movs	r2, #128	; 0x80
 80024c4:	2400      	movs	r4, #0
 80024c6:	0312      	lsls	r2, r2, #12
 80024c8:	e679      	b.n	80021be <__aeabi_dsub+0x332>
 80024ca:	001d      	movs	r5, r3
 80024cc:	000e      	movs	r6, r1
 80024ce:	3d20      	subs	r5, #32
 80024d0:	40ee      	lsrs	r6, r5
 80024d2:	46b0      	mov	r8, r6
 80024d4:	2b20      	cmp	r3, #32
 80024d6:	d004      	beq.n	80024e2 <__aeabi_dsub+0x656>
 80024d8:	2540      	movs	r5, #64	; 0x40
 80024da:	1aeb      	subs	r3, r5, r3
 80024dc:	4099      	lsls	r1, r3
 80024de:	4308      	orrs	r0, r1
 80024e0:	4681      	mov	r9, r0
 80024e2:	464e      	mov	r6, r9
 80024e4:	4643      	mov	r3, r8
 80024e6:	1e71      	subs	r1, r6, #1
 80024e8:	418e      	sbcs	r6, r1
 80024ea:	431e      	orrs	r6, r3
 80024ec:	e767      	b.n	80023be <__aeabi_dsub+0x532>
 80024ee:	1886      	adds	r6, r0, r2
 80024f0:	4296      	cmp	r6, r2
 80024f2:	419b      	sbcs	r3, r3
 80024f4:	4461      	add	r1, ip
 80024f6:	425b      	negs	r3, r3
 80024f8:	18c9      	adds	r1, r1, r3
 80024fa:	003d      	movs	r5, r7
 80024fc:	e58c      	b.n	8002018 <__aeabi_dsub+0x18c>
 80024fe:	4647      	mov	r7, r8
 8002500:	4337      	orrs	r7, r6
 8002502:	d0ce      	beq.n	80024a2 <__aeabi_dsub+0x616>
 8002504:	2207      	movs	r2, #7
 8002506:	4641      	mov	r1, r8
 8002508:	4032      	ands	r2, r6
 800250a:	e649      	b.n	80021a0 <__aeabi_dsub+0x314>
 800250c:	2700      	movs	r7, #0
 800250e:	003a      	movs	r2, r7
 8002510:	e5e6      	b.n	80020e0 <__aeabi_dsub+0x254>
 8002512:	46c0      	nop			; (mov r8, r8)
 8002514:	000007ff 	.word	0x000007ff
 8002518:	ff7fffff 	.word	0xff7fffff

0800251c <__aeabi_d2iz>:
 800251c:	b530      	push	{r4, r5, lr}
 800251e:	4d14      	ldr	r5, [pc, #80]	; (8002570 <__aeabi_d2iz+0x54>)
 8002520:	030a      	lsls	r2, r1, #12
 8002522:	004b      	lsls	r3, r1, #1
 8002524:	0b12      	lsrs	r2, r2, #12
 8002526:	0d5b      	lsrs	r3, r3, #21
 8002528:	0fc9      	lsrs	r1, r1, #31
 800252a:	2400      	movs	r4, #0
 800252c:	42ab      	cmp	r3, r5
 800252e:	dd11      	ble.n	8002554 <__aeabi_d2iz+0x38>
 8002530:	4c10      	ldr	r4, [pc, #64]	; (8002574 <__aeabi_d2iz+0x58>)
 8002532:	42a3      	cmp	r3, r4
 8002534:	dc10      	bgt.n	8002558 <__aeabi_d2iz+0x3c>
 8002536:	2480      	movs	r4, #128	; 0x80
 8002538:	0364      	lsls	r4, r4, #13
 800253a:	4322      	orrs	r2, r4
 800253c:	4c0e      	ldr	r4, [pc, #56]	; (8002578 <__aeabi_d2iz+0x5c>)
 800253e:	1ae4      	subs	r4, r4, r3
 8002540:	2c1f      	cmp	r4, #31
 8002542:	dd0c      	ble.n	800255e <__aeabi_d2iz+0x42>
 8002544:	480d      	ldr	r0, [pc, #52]	; (800257c <__aeabi_d2iz+0x60>)
 8002546:	1ac3      	subs	r3, r0, r3
 8002548:	40da      	lsrs	r2, r3
 800254a:	0013      	movs	r3, r2
 800254c:	425c      	negs	r4, r3
 800254e:	2900      	cmp	r1, #0
 8002550:	d100      	bne.n	8002554 <__aeabi_d2iz+0x38>
 8002552:	001c      	movs	r4, r3
 8002554:	0020      	movs	r0, r4
 8002556:	bd30      	pop	{r4, r5, pc}
 8002558:	4b09      	ldr	r3, [pc, #36]	; (8002580 <__aeabi_d2iz+0x64>)
 800255a:	18cc      	adds	r4, r1, r3
 800255c:	e7fa      	b.n	8002554 <__aeabi_d2iz+0x38>
 800255e:	4d09      	ldr	r5, [pc, #36]	; (8002584 <__aeabi_d2iz+0x68>)
 8002560:	40e0      	lsrs	r0, r4
 8002562:	46ac      	mov	ip, r5
 8002564:	4463      	add	r3, ip
 8002566:	409a      	lsls	r2, r3
 8002568:	0013      	movs	r3, r2
 800256a:	4303      	orrs	r3, r0
 800256c:	e7ee      	b.n	800254c <__aeabi_d2iz+0x30>
 800256e:	46c0      	nop			; (mov r8, r8)
 8002570:	000003fe 	.word	0x000003fe
 8002574:	0000041d 	.word	0x0000041d
 8002578:	00000433 	.word	0x00000433
 800257c:	00000413 	.word	0x00000413
 8002580:	7fffffff 	.word	0x7fffffff
 8002584:	fffffbed 	.word	0xfffffbed

08002588 <__aeabi_i2d>:
 8002588:	b570      	push	{r4, r5, r6, lr}
 800258a:	2800      	cmp	r0, #0
 800258c:	d02d      	beq.n	80025ea <__aeabi_i2d+0x62>
 800258e:	17c3      	asrs	r3, r0, #31
 8002590:	18c5      	adds	r5, r0, r3
 8002592:	405d      	eors	r5, r3
 8002594:	0fc4      	lsrs	r4, r0, #31
 8002596:	0028      	movs	r0, r5
 8002598:	f000 f8b4 	bl	8002704 <__clzsi2>
 800259c:	4b15      	ldr	r3, [pc, #84]	; (80025f4 <__aeabi_i2d+0x6c>)
 800259e:	1a1b      	subs	r3, r3, r0
 80025a0:	055b      	lsls	r3, r3, #21
 80025a2:	0d5b      	lsrs	r3, r3, #21
 80025a4:	280a      	cmp	r0, #10
 80025a6:	dd15      	ble.n	80025d4 <__aeabi_i2d+0x4c>
 80025a8:	380b      	subs	r0, #11
 80025aa:	4085      	lsls	r5, r0
 80025ac:	2200      	movs	r2, #0
 80025ae:	032d      	lsls	r5, r5, #12
 80025b0:	0b2d      	lsrs	r5, r5, #12
 80025b2:	2100      	movs	r1, #0
 80025b4:	0010      	movs	r0, r2
 80025b6:	032d      	lsls	r5, r5, #12
 80025b8:	0d0a      	lsrs	r2, r1, #20
 80025ba:	0b2d      	lsrs	r5, r5, #12
 80025bc:	0512      	lsls	r2, r2, #20
 80025be:	432a      	orrs	r2, r5
 80025c0:	4d0d      	ldr	r5, [pc, #52]	; (80025f8 <__aeabi_i2d+0x70>)
 80025c2:	051b      	lsls	r3, r3, #20
 80025c4:	402a      	ands	r2, r5
 80025c6:	4313      	orrs	r3, r2
 80025c8:	005b      	lsls	r3, r3, #1
 80025ca:	07e4      	lsls	r4, r4, #31
 80025cc:	085b      	lsrs	r3, r3, #1
 80025ce:	4323      	orrs	r3, r4
 80025d0:	0019      	movs	r1, r3
 80025d2:	bd70      	pop	{r4, r5, r6, pc}
 80025d4:	0002      	movs	r2, r0
 80025d6:	0029      	movs	r1, r5
 80025d8:	3215      	adds	r2, #21
 80025da:	4091      	lsls	r1, r2
 80025dc:	000a      	movs	r2, r1
 80025de:	210b      	movs	r1, #11
 80025e0:	1a08      	subs	r0, r1, r0
 80025e2:	40c5      	lsrs	r5, r0
 80025e4:	032d      	lsls	r5, r5, #12
 80025e6:	0b2d      	lsrs	r5, r5, #12
 80025e8:	e7e3      	b.n	80025b2 <__aeabi_i2d+0x2a>
 80025ea:	2400      	movs	r4, #0
 80025ec:	2300      	movs	r3, #0
 80025ee:	2500      	movs	r5, #0
 80025f0:	2200      	movs	r2, #0
 80025f2:	e7de      	b.n	80025b2 <__aeabi_i2d+0x2a>
 80025f4:	0000041e 	.word	0x0000041e
 80025f8:	800fffff 	.word	0x800fffff

080025fc <__aeabi_ui2d>:
 80025fc:	b510      	push	{r4, lr}
 80025fe:	1e04      	subs	r4, r0, #0
 8002600:	d025      	beq.n	800264e <__aeabi_ui2d+0x52>
 8002602:	f000 f87f 	bl	8002704 <__clzsi2>
 8002606:	4b14      	ldr	r3, [pc, #80]	; (8002658 <__aeabi_ui2d+0x5c>)
 8002608:	1a1b      	subs	r3, r3, r0
 800260a:	055b      	lsls	r3, r3, #21
 800260c:	0d5b      	lsrs	r3, r3, #21
 800260e:	280a      	cmp	r0, #10
 8002610:	dd12      	ble.n	8002638 <__aeabi_ui2d+0x3c>
 8002612:	380b      	subs	r0, #11
 8002614:	4084      	lsls	r4, r0
 8002616:	2200      	movs	r2, #0
 8002618:	0324      	lsls	r4, r4, #12
 800261a:	0b24      	lsrs	r4, r4, #12
 800261c:	2100      	movs	r1, #0
 800261e:	0010      	movs	r0, r2
 8002620:	0324      	lsls	r4, r4, #12
 8002622:	0d0a      	lsrs	r2, r1, #20
 8002624:	0b24      	lsrs	r4, r4, #12
 8002626:	0512      	lsls	r2, r2, #20
 8002628:	4322      	orrs	r2, r4
 800262a:	4c0c      	ldr	r4, [pc, #48]	; (800265c <__aeabi_ui2d+0x60>)
 800262c:	051b      	lsls	r3, r3, #20
 800262e:	4022      	ands	r2, r4
 8002630:	4313      	orrs	r3, r2
 8002632:	005b      	lsls	r3, r3, #1
 8002634:	0859      	lsrs	r1, r3, #1
 8002636:	bd10      	pop	{r4, pc}
 8002638:	0002      	movs	r2, r0
 800263a:	0021      	movs	r1, r4
 800263c:	3215      	adds	r2, #21
 800263e:	4091      	lsls	r1, r2
 8002640:	000a      	movs	r2, r1
 8002642:	210b      	movs	r1, #11
 8002644:	1a08      	subs	r0, r1, r0
 8002646:	40c4      	lsrs	r4, r0
 8002648:	0324      	lsls	r4, r4, #12
 800264a:	0b24      	lsrs	r4, r4, #12
 800264c:	e7e6      	b.n	800261c <__aeabi_ui2d+0x20>
 800264e:	2300      	movs	r3, #0
 8002650:	2400      	movs	r4, #0
 8002652:	2200      	movs	r2, #0
 8002654:	e7e2      	b.n	800261c <__aeabi_ui2d+0x20>
 8002656:	46c0      	nop			; (mov r8, r8)
 8002658:	0000041e 	.word	0x0000041e
 800265c:	800fffff 	.word	0x800fffff

08002660 <__aeabi_f2d>:
 8002660:	0041      	lsls	r1, r0, #1
 8002662:	0e09      	lsrs	r1, r1, #24
 8002664:	1c4b      	adds	r3, r1, #1
 8002666:	b570      	push	{r4, r5, r6, lr}
 8002668:	b2db      	uxtb	r3, r3
 800266a:	0246      	lsls	r6, r0, #9
 800266c:	0a75      	lsrs	r5, r6, #9
 800266e:	0fc4      	lsrs	r4, r0, #31
 8002670:	2b01      	cmp	r3, #1
 8002672:	dd14      	ble.n	800269e <__aeabi_f2d+0x3e>
 8002674:	23e0      	movs	r3, #224	; 0xe0
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	076d      	lsls	r5, r5, #29
 800267a:	0b36      	lsrs	r6, r6, #12
 800267c:	18cb      	adds	r3, r1, r3
 800267e:	2100      	movs	r1, #0
 8002680:	0d0a      	lsrs	r2, r1, #20
 8002682:	0028      	movs	r0, r5
 8002684:	0512      	lsls	r2, r2, #20
 8002686:	4d1c      	ldr	r5, [pc, #112]	; (80026f8 <__aeabi_f2d+0x98>)
 8002688:	4332      	orrs	r2, r6
 800268a:	055b      	lsls	r3, r3, #21
 800268c:	402a      	ands	r2, r5
 800268e:	085b      	lsrs	r3, r3, #1
 8002690:	4313      	orrs	r3, r2
 8002692:	005b      	lsls	r3, r3, #1
 8002694:	07e4      	lsls	r4, r4, #31
 8002696:	085b      	lsrs	r3, r3, #1
 8002698:	4323      	orrs	r3, r4
 800269a:	0019      	movs	r1, r3
 800269c:	bd70      	pop	{r4, r5, r6, pc}
 800269e:	2900      	cmp	r1, #0
 80026a0:	d114      	bne.n	80026cc <__aeabi_f2d+0x6c>
 80026a2:	2d00      	cmp	r5, #0
 80026a4:	d01e      	beq.n	80026e4 <__aeabi_f2d+0x84>
 80026a6:	0028      	movs	r0, r5
 80026a8:	f000 f82c 	bl	8002704 <__clzsi2>
 80026ac:	280a      	cmp	r0, #10
 80026ae:	dc1c      	bgt.n	80026ea <__aeabi_f2d+0x8a>
 80026b0:	230b      	movs	r3, #11
 80026b2:	002a      	movs	r2, r5
 80026b4:	1a1b      	subs	r3, r3, r0
 80026b6:	40da      	lsrs	r2, r3
 80026b8:	0003      	movs	r3, r0
 80026ba:	3315      	adds	r3, #21
 80026bc:	409d      	lsls	r5, r3
 80026be:	4b0f      	ldr	r3, [pc, #60]	; (80026fc <__aeabi_f2d+0x9c>)
 80026c0:	0312      	lsls	r2, r2, #12
 80026c2:	1a1b      	subs	r3, r3, r0
 80026c4:	055b      	lsls	r3, r3, #21
 80026c6:	0b16      	lsrs	r6, r2, #12
 80026c8:	0d5b      	lsrs	r3, r3, #21
 80026ca:	e7d8      	b.n	800267e <__aeabi_f2d+0x1e>
 80026cc:	2d00      	cmp	r5, #0
 80026ce:	d006      	beq.n	80026de <__aeabi_f2d+0x7e>
 80026d0:	0b32      	lsrs	r2, r6, #12
 80026d2:	2680      	movs	r6, #128	; 0x80
 80026d4:	0336      	lsls	r6, r6, #12
 80026d6:	076d      	lsls	r5, r5, #29
 80026d8:	4316      	orrs	r6, r2
 80026da:	4b09      	ldr	r3, [pc, #36]	; (8002700 <__aeabi_f2d+0xa0>)
 80026dc:	e7cf      	b.n	800267e <__aeabi_f2d+0x1e>
 80026de:	4b08      	ldr	r3, [pc, #32]	; (8002700 <__aeabi_f2d+0xa0>)
 80026e0:	2600      	movs	r6, #0
 80026e2:	e7cc      	b.n	800267e <__aeabi_f2d+0x1e>
 80026e4:	2300      	movs	r3, #0
 80026e6:	2600      	movs	r6, #0
 80026e8:	e7c9      	b.n	800267e <__aeabi_f2d+0x1e>
 80026ea:	0003      	movs	r3, r0
 80026ec:	002a      	movs	r2, r5
 80026ee:	3b0b      	subs	r3, #11
 80026f0:	409a      	lsls	r2, r3
 80026f2:	2500      	movs	r5, #0
 80026f4:	e7e3      	b.n	80026be <__aeabi_f2d+0x5e>
 80026f6:	46c0      	nop			; (mov r8, r8)
 80026f8:	800fffff 	.word	0x800fffff
 80026fc:	00000389 	.word	0x00000389
 8002700:	000007ff 	.word	0x000007ff

08002704 <__clzsi2>:
 8002704:	211c      	movs	r1, #28
 8002706:	2301      	movs	r3, #1
 8002708:	041b      	lsls	r3, r3, #16
 800270a:	4298      	cmp	r0, r3
 800270c:	d301      	bcc.n	8002712 <__clzsi2+0xe>
 800270e:	0c00      	lsrs	r0, r0, #16
 8002710:	3910      	subs	r1, #16
 8002712:	0a1b      	lsrs	r3, r3, #8
 8002714:	4298      	cmp	r0, r3
 8002716:	d301      	bcc.n	800271c <__clzsi2+0x18>
 8002718:	0a00      	lsrs	r0, r0, #8
 800271a:	3908      	subs	r1, #8
 800271c:	091b      	lsrs	r3, r3, #4
 800271e:	4298      	cmp	r0, r3
 8002720:	d301      	bcc.n	8002726 <__clzsi2+0x22>
 8002722:	0900      	lsrs	r0, r0, #4
 8002724:	3904      	subs	r1, #4
 8002726:	a202      	add	r2, pc, #8	; (adr r2, 8002730 <__clzsi2+0x2c>)
 8002728:	5c10      	ldrb	r0, [r2, r0]
 800272a:	1840      	adds	r0, r0, r1
 800272c:	4770      	bx	lr
 800272e:	46c0      	nop			; (mov r8, r8)
 8002730:	02020304 	.word	0x02020304
 8002734:	01010101 	.word	0x01010101
	...

08002740 <__clzdi2>:
 8002740:	b510      	push	{r4, lr}
 8002742:	2900      	cmp	r1, #0
 8002744:	d103      	bne.n	800274e <__clzdi2+0xe>
 8002746:	f7ff ffdd 	bl	8002704 <__clzsi2>
 800274a:	3020      	adds	r0, #32
 800274c:	e002      	b.n	8002754 <__clzdi2+0x14>
 800274e:	1c08      	adds	r0, r1, #0
 8002750:	f7ff ffd8 	bl	8002704 <__clzsi2>
 8002754:	bd10      	pop	{r4, pc}
 8002756:	46c0      	nop			; (mov r8, r8)

08002758 <__divdi3>:
 8002758:	b5f0      	push	{r4, r5, r6, r7, lr}
 800275a:	464e      	mov	r6, r9
 800275c:	4657      	mov	r7, sl
 800275e:	46de      	mov	lr, fp
 8002760:	4645      	mov	r5, r8
 8002762:	b5e0      	push	{r5, r6, r7, lr}
 8002764:	000f      	movs	r7, r1
 8002766:	2100      	movs	r1, #0
 8002768:	b083      	sub	sp, #12
 800276a:	0006      	movs	r6, r0
 800276c:	4689      	mov	r9, r1
 800276e:	2f00      	cmp	r7, #0
 8002770:	da06      	bge.n	8002780 <__divdi3+0x28>
 8002772:	0039      	movs	r1, r7
 8002774:	2700      	movs	r7, #0
 8002776:	4246      	negs	r6, r0
 8002778:	418f      	sbcs	r7, r1
 800277a:	2101      	movs	r1, #1
 800277c:	4249      	negs	r1, r1
 800277e:	4689      	mov	r9, r1
 8002780:	2b00      	cmp	r3, #0
 8002782:	da07      	bge.n	8002794 <__divdi3+0x3c>
 8002784:	4649      	mov	r1, r9
 8002786:	43c9      	mvns	r1, r1
 8002788:	0010      	movs	r0, r2
 800278a:	4689      	mov	r9, r1
 800278c:	0019      	movs	r1, r3
 800278e:	2300      	movs	r3, #0
 8002790:	4242      	negs	r2, r0
 8002792:	418b      	sbcs	r3, r1
 8002794:	0034      	movs	r4, r6
 8002796:	003d      	movs	r5, r7
 8002798:	4692      	mov	sl, r2
 800279a:	4698      	mov	r8, r3
 800279c:	42bb      	cmp	r3, r7
 800279e:	d869      	bhi.n	8002874 <__divdi3+0x11c>
 80027a0:	d066      	beq.n	8002870 <__divdi3+0x118>
 80027a2:	4641      	mov	r1, r8
 80027a4:	4650      	mov	r0, sl
 80027a6:	f7ff ffcb 	bl	8002740 <__clzdi2>
 80027aa:	4683      	mov	fp, r0
 80027ac:	0039      	movs	r1, r7
 80027ae:	0030      	movs	r0, r6
 80027b0:	f7ff ffc6 	bl	8002740 <__clzdi2>
 80027b4:	465b      	mov	r3, fp
 80027b6:	1a1b      	subs	r3, r3, r0
 80027b8:	469c      	mov	ip, r3
 80027ba:	3b20      	subs	r3, #32
 80027bc:	469b      	mov	fp, r3
 80027be:	d500      	bpl.n	80027c2 <__divdi3+0x6a>
 80027c0:	e075      	b.n	80028ae <__divdi3+0x156>
 80027c2:	4651      	mov	r1, sl
 80027c4:	4658      	mov	r0, fp
 80027c6:	4081      	lsls	r1, r0
 80027c8:	000b      	movs	r3, r1
 80027ca:	4651      	mov	r1, sl
 80027cc:	4660      	mov	r0, ip
 80027ce:	4081      	lsls	r1, r0
 80027d0:	000a      	movs	r2, r1
 80027d2:	42bb      	cmp	r3, r7
 80027d4:	d861      	bhi.n	800289a <__divdi3+0x142>
 80027d6:	d05e      	beq.n	8002896 <__divdi3+0x13e>
 80027d8:	0034      	movs	r4, r6
 80027da:	003d      	movs	r5, r7
 80027dc:	4659      	mov	r1, fp
 80027de:	1aa4      	subs	r4, r4, r2
 80027e0:	419d      	sbcs	r5, r3
 80027e2:	2900      	cmp	r1, #0
 80027e4:	da00      	bge.n	80027e8 <__divdi3+0x90>
 80027e6:	e07a      	b.n	80028de <__divdi3+0x186>
 80027e8:	2100      	movs	r1, #0
 80027ea:	2000      	movs	r0, #0
 80027ec:	2601      	movs	r6, #1
 80027ee:	9000      	str	r0, [sp, #0]
 80027f0:	9101      	str	r1, [sp, #4]
 80027f2:	4659      	mov	r1, fp
 80027f4:	408e      	lsls	r6, r1
 80027f6:	9601      	str	r6, [sp, #4]
 80027f8:	4661      	mov	r1, ip
 80027fa:	2601      	movs	r6, #1
 80027fc:	408e      	lsls	r6, r1
 80027fe:	4661      	mov	r1, ip
 8002800:	9600      	str	r6, [sp, #0]
 8002802:	2900      	cmp	r1, #0
 8002804:	d050      	beq.n	80028a8 <__divdi3+0x150>
 8002806:	07d9      	lsls	r1, r3, #31
 8002808:	0856      	lsrs	r6, r2, #1
 800280a:	085f      	lsrs	r7, r3, #1
 800280c:	430e      	orrs	r6, r1
 800280e:	4663      	mov	r3, ip
 8002810:	e00e      	b.n	8002830 <__divdi3+0xd8>
 8002812:	42af      	cmp	r7, r5
 8002814:	d101      	bne.n	800281a <__divdi3+0xc2>
 8002816:	42a6      	cmp	r6, r4
 8002818:	d80c      	bhi.n	8002834 <__divdi3+0xdc>
 800281a:	1ba4      	subs	r4, r4, r6
 800281c:	41bd      	sbcs	r5, r7
 800281e:	2101      	movs	r1, #1
 8002820:	1924      	adds	r4, r4, r4
 8002822:	416d      	adcs	r5, r5
 8002824:	2200      	movs	r2, #0
 8002826:	3b01      	subs	r3, #1
 8002828:	1864      	adds	r4, r4, r1
 800282a:	4155      	adcs	r5, r2
 800282c:	2b00      	cmp	r3, #0
 800282e:	d006      	beq.n	800283e <__divdi3+0xe6>
 8002830:	42af      	cmp	r7, r5
 8002832:	d9ee      	bls.n	8002812 <__divdi3+0xba>
 8002834:	3b01      	subs	r3, #1
 8002836:	1924      	adds	r4, r4, r4
 8002838:	416d      	adcs	r5, r5
 800283a:	2b00      	cmp	r3, #0
 800283c:	d1f8      	bne.n	8002830 <__divdi3+0xd8>
 800283e:	9800      	ldr	r0, [sp, #0]
 8002840:	9901      	ldr	r1, [sp, #4]
 8002842:	465b      	mov	r3, fp
 8002844:	1900      	adds	r0, r0, r4
 8002846:	4169      	adcs	r1, r5
 8002848:	2b00      	cmp	r3, #0
 800284a:	db3d      	blt.n	80028c8 <__divdi3+0x170>
 800284c:	002e      	movs	r6, r5
 800284e:	40de      	lsrs	r6, r3
 8002850:	4663      	mov	r3, ip
 8002852:	002c      	movs	r4, r5
 8002854:	40dc      	lsrs	r4, r3
 8002856:	465b      	mov	r3, fp
 8002858:	2b00      	cmp	r3, #0
 800285a:	db4b      	blt.n	80028f4 <__divdi3+0x19c>
 800285c:	0034      	movs	r4, r6
 800285e:	465d      	mov	r5, fp
 8002860:	40ac      	lsls	r4, r5
 8002862:	0023      	movs	r3, r4
 8002864:	4664      	mov	r4, ip
 8002866:	40a6      	lsls	r6, r4
 8002868:	0032      	movs	r2, r6
 800286a:	1a80      	subs	r0, r0, r2
 800286c:	4199      	sbcs	r1, r3
 800286e:	e003      	b.n	8002878 <__divdi3+0x120>
 8002870:	42b2      	cmp	r2, r6
 8002872:	d996      	bls.n	80027a2 <__divdi3+0x4a>
 8002874:	2000      	movs	r0, #0
 8002876:	2100      	movs	r1, #0
 8002878:	464b      	mov	r3, r9
 800287a:	2b00      	cmp	r3, #0
 800287c:	d004      	beq.n	8002888 <__divdi3+0x130>
 800287e:	0003      	movs	r3, r0
 8002880:	000c      	movs	r4, r1
 8002882:	2100      	movs	r1, #0
 8002884:	4258      	negs	r0, r3
 8002886:	41a1      	sbcs	r1, r4
 8002888:	b003      	add	sp, #12
 800288a:	bc3c      	pop	{r2, r3, r4, r5}
 800288c:	4690      	mov	r8, r2
 800288e:	4699      	mov	r9, r3
 8002890:	46a2      	mov	sl, r4
 8002892:	46ab      	mov	fp, r5
 8002894:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002896:	42b1      	cmp	r1, r6
 8002898:	d99e      	bls.n	80027d8 <__divdi3+0x80>
 800289a:	2100      	movs	r1, #0
 800289c:	2000      	movs	r0, #0
 800289e:	9000      	str	r0, [sp, #0]
 80028a0:	9101      	str	r1, [sp, #4]
 80028a2:	4661      	mov	r1, ip
 80028a4:	2900      	cmp	r1, #0
 80028a6:	d1ae      	bne.n	8002806 <__divdi3+0xae>
 80028a8:	9800      	ldr	r0, [sp, #0]
 80028aa:	9901      	ldr	r1, [sp, #4]
 80028ac:	e7e4      	b.n	8002878 <__divdi3+0x120>
 80028ae:	2320      	movs	r3, #32
 80028b0:	4662      	mov	r2, ip
 80028b2:	4651      	mov	r1, sl
 80028b4:	1a9b      	subs	r3, r3, r2
 80028b6:	40d9      	lsrs	r1, r3
 80028b8:	4640      	mov	r0, r8
 80028ba:	9100      	str	r1, [sp, #0]
 80028bc:	4661      	mov	r1, ip
 80028be:	4088      	lsls	r0, r1
 80028c0:	0003      	movs	r3, r0
 80028c2:	9900      	ldr	r1, [sp, #0]
 80028c4:	430b      	orrs	r3, r1
 80028c6:	e780      	b.n	80027ca <__divdi3+0x72>
 80028c8:	4662      	mov	r2, ip
 80028ca:	2320      	movs	r3, #32
 80028cc:	1a9b      	subs	r3, r3, r2
 80028ce:	002a      	movs	r2, r5
 80028d0:	409a      	lsls	r2, r3
 80028d2:	0026      	movs	r6, r4
 80028d4:	0013      	movs	r3, r2
 80028d6:	4662      	mov	r2, ip
 80028d8:	40d6      	lsrs	r6, r2
 80028da:	431e      	orrs	r6, r3
 80028dc:	e7b8      	b.n	8002850 <__divdi3+0xf8>
 80028de:	4661      	mov	r1, ip
 80028e0:	2620      	movs	r6, #32
 80028e2:	2701      	movs	r7, #1
 80028e4:	1a76      	subs	r6, r6, r1
 80028e6:	2000      	movs	r0, #0
 80028e8:	2100      	movs	r1, #0
 80028ea:	40f7      	lsrs	r7, r6
 80028ec:	9000      	str	r0, [sp, #0]
 80028ee:	9101      	str	r1, [sp, #4]
 80028f0:	9701      	str	r7, [sp, #4]
 80028f2:	e781      	b.n	80027f8 <__divdi3+0xa0>
 80028f4:	4667      	mov	r7, ip
 80028f6:	2320      	movs	r3, #32
 80028f8:	4662      	mov	r2, ip
 80028fa:	0035      	movs	r5, r6
 80028fc:	40bc      	lsls	r4, r7
 80028fe:	1a9b      	subs	r3, r3, r2
 8002900:	40dd      	lsrs	r5, r3
 8002902:	0023      	movs	r3, r4
 8002904:	432b      	orrs	r3, r5
 8002906:	e7ad      	b.n	8002864 <__divdi3+0x10c>

08002908 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b082      	sub	sp, #8
 800290c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800290e:	003b      	movs	r3, r7
 8002910:	0018      	movs	r0, r3
 8002912:	2308      	movs	r3, #8
 8002914:	001a      	movs	r2, r3
 8002916:	2100      	movs	r1, #0
 8002918:	f01b fc80 	bl	801e21c <memset>

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 800291c:	4b2a      	ldr	r3, [pc, #168]	; (80029c8 <MX_ADC_Init+0xc0>)
 800291e:	4a2b      	ldr	r2, [pc, #172]	; (80029cc <MX_ADC_Init+0xc4>)
 8002920:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8002922:	4b29      	ldr	r3, [pc, #164]	; (80029c8 <MX_ADC_Init+0xc0>)
 8002924:	2200      	movs	r2, #0
 8002926:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002928:	4b27      	ldr	r3, [pc, #156]	; (80029c8 <MX_ADC_Init+0xc0>)
 800292a:	2280      	movs	r2, #128	; 0x80
 800292c:	05d2      	lsls	r2, r2, #23
 800292e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8002930:	4b25      	ldr	r3, [pc, #148]	; (80029c8 <MX_ADC_Init+0xc0>)
 8002932:	2200      	movs	r2, #0
 8002934:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002936:	4b24      	ldr	r3, [pc, #144]	; (80029c8 <MX_ADC_Init+0xc0>)
 8002938:	2200      	movs	r2, #0
 800293a:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800293c:	4b22      	ldr	r3, [pc, #136]	; (80029c8 <MX_ADC_Init+0xc0>)
 800293e:	2201      	movs	r2, #1
 8002940:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002942:	4b21      	ldr	r3, [pc, #132]	; (80029c8 <MX_ADC_Init+0xc0>)
 8002944:	2200      	movs	r2, #0
 8002946:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8002948:	4b1f      	ldr	r3, [pc, #124]	; (80029c8 <MX_ADC_Init+0xc0>)
 800294a:	2220      	movs	r2, #32
 800294c:	2100      	movs	r1, #0
 800294e:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8002950:	4b1d      	ldr	r3, [pc, #116]	; (80029c8 <MX_ADC_Init+0xc0>)
 8002952:	2221      	movs	r2, #33	; 0x21
 8002954:	2100      	movs	r1, #0
 8002956:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002958:	4b1b      	ldr	r3, [pc, #108]	; (80029c8 <MX_ADC_Init+0xc0>)
 800295a:	2200      	movs	r2, #0
 800295c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800295e:	4b1a      	ldr	r3, [pc, #104]	; (80029c8 <MX_ADC_Init+0xc0>)
 8002960:	22c2      	movs	r2, #194	; 0xc2
 8002962:	32ff      	adds	r2, #255	; 0xff
 8002964:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8002966:	4b18      	ldr	r3, [pc, #96]	; (80029c8 <MX_ADC_Init+0xc0>)
 8002968:	222c      	movs	r2, #44	; 0x2c
 800296a:	2100      	movs	r1, #0
 800296c:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800296e:	4b16      	ldr	r3, [pc, #88]	; (80029c8 <MX_ADC_Init+0xc0>)
 8002970:	2204      	movs	r2, #4
 8002972:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002974:	4b14      	ldr	r3, [pc, #80]	; (80029c8 <MX_ADC_Init+0xc0>)
 8002976:	2200      	movs	r2, #0
 8002978:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 800297a:	4b13      	ldr	r3, [pc, #76]	; (80029c8 <MX_ADC_Init+0xc0>)
 800297c:	2200      	movs	r2, #0
 800297e:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8002980:	4b11      	ldr	r3, [pc, #68]	; (80029c8 <MX_ADC_Init+0xc0>)
 8002982:	2200      	movs	r2, #0
 8002984:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8002986:	4b10      	ldr	r3, [pc, #64]	; (80029c8 <MX_ADC_Init+0xc0>)
 8002988:	2200      	movs	r2, #0
 800298a:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800298c:	4b0e      	ldr	r3, [pc, #56]	; (80029c8 <MX_ADC_Init+0xc0>)
 800298e:	0018      	movs	r0, r3
 8002990:	f001 fad6 	bl	8003f40 <HAL_ADC_Init>
 8002994:	1e03      	subs	r3, r0, #0
 8002996:	d001      	beq.n	800299c <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8002998:	f000 fb54 	bl	8003044 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800299c:	003b      	movs	r3, r7
 800299e:	4a0c      	ldr	r2, [pc, #48]	; (80029d0 <MX_ADC_Init+0xc8>)
 80029a0:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80029a2:	003b      	movs	r3, r7
 80029a4:	2280      	movs	r2, #128	; 0x80
 80029a6:	0152      	lsls	r2, r2, #5
 80029a8:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80029aa:	003a      	movs	r2, r7
 80029ac:	4b06      	ldr	r3, [pc, #24]	; (80029c8 <MX_ADC_Init+0xc0>)
 80029ae:	0011      	movs	r1, r2
 80029b0:	0018      	movs	r0, r3
 80029b2:	f001 fc39 	bl	8004228 <HAL_ADC_ConfigChannel>
 80029b6:	1e03      	subs	r3, r0, #0
 80029b8:	d001      	beq.n	80029be <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 80029ba:	f000 fb43 	bl	8003044 <Error_Handler>
  }

}
 80029be:	46c0      	nop			; (mov r8, r8)
 80029c0:	46bd      	mov	sp, r7
 80029c2:	b002      	add	sp, #8
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	46c0      	nop			; (mov r8, r8)
 80029c8:	200012f4 	.word	0x200012f4
 80029cc:	40012400 	.word	0x40012400
 80029d0:	48040000 	.word	0x48040000

080029d4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b082      	sub	sp, #8
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC1)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a06      	ldr	r2, [pc, #24]	; (80029fc <HAL_ADC_MspInit+0x28>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d106      	bne.n	80029f4 <HAL_ADC_MspInit+0x20>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80029e6:	4b06      	ldr	r3, [pc, #24]	; (8002a00 <HAL_ADC_MspInit+0x2c>)
 80029e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029ea:	4b05      	ldr	r3, [pc, #20]	; (8002a00 <HAL_ADC_MspInit+0x2c>)
 80029ec:	2180      	movs	r1, #128	; 0x80
 80029ee:	0089      	lsls	r1, r1, #2
 80029f0:	430a      	orrs	r2, r1
 80029f2:	635a      	str	r2, [r3, #52]	; 0x34
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80029f4:	46c0      	nop			; (mov r8, r8)
 80029f6:	46bd      	mov	sp, r7
 80029f8:	b002      	add	sp, #8
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	40012400 	.word	0x40012400
 8002a00:	40021000 	.word	0x40021000

08002a04 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8002a04:	b590      	push	{r4, r7, lr}
 8002a06:	b08f      	sub	sp, #60	; 0x3c
 8002a08:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a0a:	2424      	movs	r4, #36	; 0x24
 8002a0c:	193b      	adds	r3, r7, r4
 8002a0e:	0018      	movs	r0, r3
 8002a10:	2314      	movs	r3, #20
 8002a12:	001a      	movs	r2, r3
 8002a14:	2100      	movs	r1, #0
 8002a16:	f01b fc01 	bl	801e21c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a1a:	4bbf      	ldr	r3, [pc, #764]	; (8002d18 <MX_GPIO_Init+0x314>)
 8002a1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a1e:	4bbe      	ldr	r3, [pc, #760]	; (8002d18 <MX_GPIO_Init+0x314>)
 8002a20:	2101      	movs	r1, #1
 8002a22:	430a      	orrs	r2, r1
 8002a24:	62da      	str	r2, [r3, #44]	; 0x2c
 8002a26:	4bbc      	ldr	r3, [pc, #752]	; (8002d18 <MX_GPIO_Init+0x314>)
 8002a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	60fb      	str	r3, [r7, #12]
 8002a30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a32:	4bb9      	ldr	r3, [pc, #740]	; (8002d18 <MX_GPIO_Init+0x314>)
 8002a34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a36:	4bb8      	ldr	r3, [pc, #736]	; (8002d18 <MX_GPIO_Init+0x314>)
 8002a38:	2102      	movs	r1, #2
 8002a3a:	430a      	orrs	r2, r1
 8002a3c:	62da      	str	r2, [r3, #44]	; 0x2c
 8002a3e:	4bb6      	ldr	r3, [pc, #728]	; (8002d18 <MX_GPIO_Init+0x314>)
 8002a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a42:	2202      	movs	r2, #2
 8002a44:	4013      	ands	r3, r2
 8002a46:	60bb      	str	r3, [r7, #8]
 8002a48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a4a:	4bb3      	ldr	r3, [pc, #716]	; (8002d18 <MX_GPIO_Init+0x314>)
 8002a4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a4e:	4bb2      	ldr	r3, [pc, #712]	; (8002d18 <MX_GPIO_Init+0x314>)
 8002a50:	2104      	movs	r1, #4
 8002a52:	430a      	orrs	r2, r1
 8002a54:	62da      	str	r2, [r3, #44]	; 0x2c
 8002a56:	4bb0      	ldr	r3, [pc, #704]	; (8002d18 <MX_GPIO_Init+0x314>)
 8002a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a5a:	2204      	movs	r2, #4
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	607b      	str	r3, [r7, #4]
 8002a60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002a62:	4bad      	ldr	r3, [pc, #692]	; (8002d18 <MX_GPIO_Init+0x314>)
 8002a64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a66:	4bac      	ldr	r3, [pc, #688]	; (8002d18 <MX_GPIO_Init+0x314>)
 8002a68:	2180      	movs	r1, #128	; 0x80
 8002a6a:	430a      	orrs	r2, r1
 8002a6c:	62da      	str	r2, [r3, #44]	; 0x2c
 8002a6e:	4baa      	ldr	r3, [pc, #680]	; (8002d18 <MX_GPIO_Init+0x314>)
 8002a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a72:	2280      	movs	r2, #128	; 0x80
 8002a74:	4013      	ands	r3, r2
 8002a76:	603b      	str	r3, [r7, #0]
 8002a78:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RADIO_NSS_Pin|RADIO_TCXO_VCC_Pin|RADIO_ANT_SWITCH_RX_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002a7a:	49a8      	ldr	r1, [pc, #672]	; (8002d1c <MX_GPIO_Init+0x318>)
 8002a7c:	23a0      	movs	r3, #160	; 0xa0
 8002a7e:	05db      	lsls	r3, r3, #23
 8002a80:	2200      	movs	r2, #0
 8002a82:	0018      	movs	r0, r3
 8002a84:	f001 ff14 	bl	80048b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8002a88:	4ba5      	ldr	r3, [pc, #660]	; (8002d20 <MX_GPIO_Init+0x31c>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	21e0      	movs	r1, #224	; 0xe0
 8002a8e:	0018      	movs	r0, r3
 8002a90:	f001 ff0e 	bl	80048b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RADIO_ANT_SWITCH_TX_BOOST_Pin|RADIO_RESET_Pin|RADIO_ANT_SWITCH_TX_RFO_Pin, GPIO_PIN_RESET);
 8002a94:	4ba3      	ldr	r3, [pc, #652]	; (8002d24 <MX_GPIO_Init+0x320>)
 8002a96:	2200      	movs	r2, #0
 8002a98:	2107      	movs	r1, #7
 8002a9a:	0018      	movs	r0, r3
 8002a9c:	f001 ff08 	bl	80048b0 <HAL_GPIO_WritePin>


  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RADIO_NSS_Pin|RADIO_TCXO_VCC_Pin|RADIO_ANT_SWITCH_RX_Pin;
 8002aa0:	193b      	adds	r3, r7, r4
 8002aa2:	4aa1      	ldr	r2, [pc, #644]	; (8002d28 <MX_GPIO_Init+0x324>)
 8002aa4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002aa6:	193b      	adds	r3, r7, r4
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aac:	193b      	adds	r3, r7, r4
 8002aae:	2200      	movs	r2, #0
 8002ab0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ab2:	193b      	adds	r3, r7, r4
 8002ab4:	2202      	movs	r2, #2
 8002ab6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ab8:	193a      	adds	r2, r7, r4
 8002aba:	23a0      	movs	r3, #160	; 0xa0
 8002abc:	05db      	lsls	r3, r3, #23
 8002abe:	0011      	movs	r1, r2
 8002ac0:	0018      	movs	r0, r3
 8002ac2:	f001 fd77 	bl	80045b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD4_Pin;
 8002ac6:	0021      	movs	r1, r4
 8002ac8:	187b      	adds	r3, r7, r1
 8002aca:	22e0      	movs	r2, #224	; 0xe0
 8002acc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ace:	187b      	adds	r3, r7, r1
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad4:	187b      	adds	r3, r7, r1
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ada:	187b      	adds	r3, r7, r1
 8002adc:	2200      	movs	r2, #0
 8002ade:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ae0:	000c      	movs	r4, r1
 8002ae2:	187b      	adds	r3, r7, r1
 8002ae4:	4a8e      	ldr	r2, [pc, #568]	; (8002d20 <MX_GPIO_Init+0x31c>)
 8002ae6:	0019      	movs	r1, r3
 8002ae8:	0010      	movs	r0, r2
 8002aea:	f001 fd63 	bl	80045b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB9 PB8 PB11 PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_10;
 8002aee:	0021      	movs	r1, r4
 8002af0:	187b      	adds	r3, r7, r1
 8002af2:	22f0      	movs	r2, #240	; 0xf0
 8002af4:	0112      	lsls	r2, r2, #4
 8002af6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002af8:	000c      	movs	r4, r1
 8002afa:	193b      	adds	r3, r7, r4
 8002afc:	2203      	movs	r2, #3
 8002afe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b00:	193b      	adds	r3, r7, r4
 8002b02:	2200      	movs	r2, #0
 8002b04:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b06:	193b      	adds	r3, r7, r4
 8002b08:	4a85      	ldr	r2, [pc, #532]	; (8002d20 <MX_GPIO_Init+0x31c>)
 8002b0a:	0019      	movs	r1, r3
 8002b0c:	0010      	movs	r0, r2
 8002b0e:	f001 fd51 	bl	80045b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA14 PA10 PA13 PA8
                           PA11 PA9 PA0 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_10|GPIO_PIN_13|GPIO_PIN_8
 8002b12:	193b      	adds	r3, r7, r4
 8002b14:	4a85      	ldr	r2, [pc, #532]	; (8002d2c <MX_GPIO_Init+0x328>)
 8002b16:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_11|GPIO_PIN_9|GPIO_PIN_0|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b18:	193b      	adds	r3, r7, r4
 8002b1a:	2203      	movs	r2, #3
 8002b1c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b1e:	193b      	adds	r3, r7, r4
 8002b20:	2200      	movs	r2, #0
 8002b22:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b24:	193a      	adds	r2, r7, r4
 8002b26:	23a0      	movs	r3, #160	; 0xa0
 8002b28:	05db      	lsls	r3, r3, #23
 8002b2a:	0011      	movs	r1, r2
 8002b2c:	0018      	movs	r0, r3
 8002b2e:	f001 fd41 	bl	80045b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = RADIO_DIO_0_Pin|RADIO_DIO_1_Pin|RADIO_DIO_2_Pin;
 8002b32:	193b      	adds	r3, r7, r4
 8002b34:	2213      	movs	r2, #19
 8002b36:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002b38:	193b      	adds	r3, r7, r4
 8002b3a:	4a7d      	ldr	r2, [pc, #500]	; (8002d30 <MX_GPIO_Init+0x32c>)
 8002b3c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b3e:	193b      	adds	r3, r7, r4
 8002b40:	2200      	movs	r2, #0
 8002b42:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b44:	193b      	adds	r3, r7, r4
 8002b46:	4a76      	ldr	r2, [pc, #472]	; (8002d20 <MX_GPIO_Init+0x31c>)
 8002b48:	0019      	movs	r1, r3
 8002b4a:	0010      	movs	r0, r2
 8002b4c:	f001 fd32 	bl	80045b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RADIO_DIO_3_Pin;
 8002b50:	0021      	movs	r1, r4
 8002b52:	187b      	adds	r3, r7, r1
 8002b54:	2280      	movs	r2, #128	; 0x80
 8002b56:	0192      	lsls	r2, r2, #6
 8002b58:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002b5a:	000c      	movs	r4, r1
 8002b5c:	193b      	adds	r3, r7, r4
 8002b5e:	4a74      	ldr	r2, [pc, #464]	; (8002d30 <MX_GPIO_Init+0x32c>)
 8002b60:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b62:	193b      	adds	r3, r7, r4
 8002b64:	2200      	movs	r2, #0
 8002b66:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(RADIO_DIO_3_GPIO_Port, &GPIO_InitStruct);
 8002b68:	193b      	adds	r3, r7, r4
 8002b6a:	4a6e      	ldr	r2, [pc, #440]	; (8002d24 <MX_GPIO_Init+0x320>)
 8002b6c:	0019      	movs	r1, r3
 8002b6e:	0010      	movs	r0, r2
 8002b70:	f001 fd20 	bl	80045b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RADIO_ANT_SWITCH_TX_BOOST_Pin|RADIO_RESET_Pin|RADIO_ANT_SWITCH_TX_RFO_Pin;
 8002b74:	193b      	adds	r3, r7, r4
 8002b76:	2207      	movs	r2, #7
 8002b78:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b7a:	193b      	adds	r3, r7, r4
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b80:	193b      	adds	r3, r7, r4
 8002b82:	2200      	movs	r2, #0
 8002b84:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b86:	193b      	adds	r3, r7, r4
 8002b88:	2202      	movs	r2, #2
 8002b8a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b8c:	193b      	adds	r3, r7, r4
 8002b8e:	4a65      	ldr	r2, [pc, #404]	; (8002d24 <MX_GPIO_Init+0x320>)
 8002b90:	0019      	movs	r1, r3
 8002b92:	0010      	movs	r0, r2
 8002b94:	f001 fd0e 	bl	80045b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002b98:	193b      	adds	r3, r7, r4
 8002b9a:	2204      	movs	r2, #4
 8002b9c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b9e:	193b      	adds	r3, r7, r4
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ba4:	193b      	adds	r3, r7, r4
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002baa:	193b      	adds	r3, r7, r4
 8002bac:	4a5c      	ldr	r2, [pc, #368]	; (8002d20 <MX_GPIO_Init+0x31c>)
 8002bae:	0019      	movs	r1, r3
 8002bb0:	0010      	movs	r0, r2
 8002bb2:	f001 fcff 	bl	80045b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002bb6:	193b      	adds	r3, r7, r4
 8002bb8:	2220      	movs	r2, #32
 8002bba:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bbc:	193b      	adds	r3, r7, r4
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc2:	193b      	adds	r3, r7, r4
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bc8:	193b      	adds	r3, r7, r4
 8002bca:	2200      	movs	r2, #0
 8002bcc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002bce:	193a      	adds	r2, r7, r4
 8002bd0:	23a0      	movs	r3, #160	; 0xa0
 8002bd2:	05db      	lsls	r3, r3, #23
 8002bd4:	0011      	movs	r1, r2
 8002bd6:	0018      	movs	r0, r3
 8002bd8:	f001 fcec 	bl	80045b4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8002bdc:	2200      	movs	r2, #0
 8002bde:	2100      	movs	r1, #0
 8002be0:	2005      	movs	r0, #5
 8002be2:	f001 fc6d 	bl	80044c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8002be6:	2005      	movs	r0, #5
 8002be8:	f001 fc7f 	bl	80044ea <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8002bec:	2200      	movs	r2, #0
 8002bee:	2100      	movs	r1, #0
 8002bf0:	2007      	movs	r0, #7
 8002bf2:	f001 fc65 	bl	80044c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8002bf6:	2007      	movs	r0, #7
 8002bf8:	f001 fc77 	bl	80044ea <HAL_NVIC_EnableIRQ>

  /* pim testing low power */


  GPIO_InitStruct.Pin = GPIO_PIN_14 | GPIO_PIN_13 | GPIO_PIN_10 | GPIO_PIN_9 | GPIO_PIN_8 | GPIO_PIN_5| GPIO_PIN_4 | GPIO_PIN_2| GPIO_PIN_0;
 8002bfc:	193b      	adds	r3, r7, r4
 8002bfe:	4a4d      	ldr	r2, [pc, #308]	; (8002d34 <MX_GPIO_Init+0x330>)
 8002c00:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c02:	193b      	adds	r3, r7, r4
 8002c04:	2203      	movs	r2, #3
 8002c06:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c08:	193b      	adds	r3, r7, r4
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c0e:	193a      	adds	r2, r7, r4
 8002c10:	23a0      	movs	r3, #160	; 0xa0
 8002c12:	05db      	lsls	r3, r3, #23
 8002c14:	0011      	movs	r1, r2
 8002c16:	0018      	movs	r0, r3
 8002c18:	f001 fccc 	bl	80045b4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002c1c:	193b      	adds	r3, r7, r4
 8002c1e:	2208      	movs	r2, #8
 8002c20:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c22:	193b      	adds	r3, r7, r4
 8002c24:	2203      	movs	r2, #3
 8002c26:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c28:	193b      	adds	r3, r7, r4
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c2e:	193a      	adds	r2, r7, r4
 8002c30:	23a0      	movs	r3, #160	; 0xa0
 8002c32:	05db      	lsls	r3, r3, #23
 8002c34:	0011      	movs	r1, r2
 8002c36:	0018      	movs	r0, r3
 8002c38:	f001 fcbc 	bl	80045b4 <HAL_GPIO_Init>



  // disable power supply & relay
  GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_8;
 8002c3c:	0021      	movs	r1, r4
 8002c3e:	187b      	adds	r3, r7, r1
 8002c40:	2290      	movs	r2, #144	; 0x90
 8002c42:	0112      	lsls	r2, r2, #4
 8002c44:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c46:	000c      	movs	r4, r1
 8002c48:	193b      	adds	r3, r7, r4
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c4e:	193b      	adds	r3, r7, r4
 8002c50:	2200      	movs	r2, #0
 8002c52:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c54:	193b      	adds	r3, r7, r4
 8002c56:	2200      	movs	r2, #0
 8002c58:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c5a:	193a      	adds	r2, r7, r4
 8002c5c:	23a0      	movs	r3, #160	; 0xa0
 8002c5e:	05db      	lsls	r3, r3, #23
 8002c60:	0011      	movs	r1, r2
 8002c62:	0018      	movs	r0, r3
 8002c64:	f001 fca6 	bl	80045b4 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIOA,GPIO_InitStruct.Pin, GPIO_PIN_RESET);
 8002c68:	193b      	adds	r3, r7, r4
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	b299      	uxth	r1, r3
 8002c6e:	23a0      	movs	r3, #160	; 0xa0
 8002c70:	05db      	lsls	r3, r3, #23
 8002c72:	2200      	movs	r2, #0
 8002c74:	0018      	movs	r0, r3
 8002c76:	f001 fe1b 	bl	80048b0 <HAL_GPIO_WritePin>

  // disable bat mes & spi_cs
  GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_12;
 8002c7a:	193b      	adds	r3, r7, r4
 8002c7c:	4a2e      	ldr	r2, [pc, #184]	; (8002d38 <MX_GPIO_Init+0x334>)
 8002c7e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c80:	193b      	adds	r3, r7, r4
 8002c82:	2201      	movs	r2, #1
 8002c84:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c86:	193b      	adds	r3, r7, r4
 8002c88:	2200      	movs	r2, #0
 8002c8a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c8c:	193b      	adds	r3, r7, r4
 8002c8e:	2200      	movs	r2, #0
 8002c90:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c92:	193b      	adds	r3, r7, r4
 8002c94:	4a22      	ldr	r2, [pc, #136]	; (8002d20 <MX_GPIO_Init+0x31c>)
 8002c96:	0019      	movs	r1, r3
 8002c98:	0010      	movs	r0, r2
 8002c9a:	f001 fc8b 	bl	80045b4 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIOB,GPIO_InitStruct.Pin, GPIO_PIN_RESET);
 8002c9e:	193b      	adds	r3, r7, r4
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	b29b      	uxth	r3, r3
 8002ca4:	481e      	ldr	r0, [pc, #120]	; (8002d20 <MX_GPIO_Init+0x31c>)
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	0019      	movs	r1, r3
 8002caa:	f001 fe01 	bl	80048b0 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin = GPIO_PIN_0| GPIO_PIN_1;
 8002cae:	193b      	adds	r3, r7, r4
 8002cb0:	2203      	movs	r2, #3
 8002cb2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002cb4:	193b      	adds	r3, r7, r4
 8002cb6:	2203      	movs	r2, #3
 8002cb8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cba:	193b      	adds	r3, r7, r4
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002cc0:	193b      	adds	r3, r7, r4
 8002cc2:	4a1e      	ldr	r2, [pc, #120]	; (8002d3c <MX_GPIO_Init+0x338>)
 8002cc4:	0019      	movs	r1, r3
 8002cc6:	0010      	movs	r0, r2
 8002cc8:	f001 fc74 	bl	80045b4 <HAL_GPIO_Init>


  //desable for lowpower
  GPIO_InitTypeDef GPIO_InitStructure;

  GPIO_InitStructure.Mode = GPIO_MODE_ANALOG;
 8002ccc:	2110      	movs	r1, #16
 8002cce:	187b      	adds	r3, r7, r1
 8002cd0:	2203      	movs	r2, #3
 8002cd2:	605a      	str	r2, [r3, #4]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8002cd4:	187b      	adds	r3, r7, r1
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	609a      	str	r2, [r3, #8]
  GPIO_InitStructure.Pin = (GPIO_PIN_13 | GPIO_PIN_14);
 8002cda:	187b      	adds	r3, r7, r1
 8002cdc:	22c0      	movs	r2, #192	; 0xc0
 8002cde:	01d2      	lsls	r2, r2, #7
 8002ce0:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002ce2:	187a      	adds	r2, r7, r1
 8002ce4:	23a0      	movs	r3, #160	; 0xa0
 8002ce6:	05db      	lsls	r3, r3, #23
 8002ce8:	0011      	movs	r1, r2
 8002cea:	0018      	movs	r0, r3
 8002cec:	f001 fc62 	bl	80045b4 <HAL_GPIO_Init>

  __HAL_RCC_DBGMCU_CLK_ENABLE();
 8002cf0:	4b09      	ldr	r3, [pc, #36]	; (8002d18 <MX_GPIO_Init+0x314>)
 8002cf2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cf4:	4b08      	ldr	r3, [pc, #32]	; (8002d18 <MX_GPIO_Init+0x314>)
 8002cf6:	2180      	movs	r1, #128	; 0x80
 8002cf8:	03c9      	lsls	r1, r1, #15
 8002cfa:	430a      	orrs	r2, r1
 8002cfc:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_DBGMCU_DisableDBGStopMode();
 8002cfe:	f001 f911 	bl	8003f24 <HAL_DBGMCU_DisableDBGStopMode>
  __HAL_RCC_DBGMCU_CLK_DISABLE();
 8002d02:	4b05      	ldr	r3, [pc, #20]	; (8002d18 <MX_GPIO_Init+0x314>)
 8002d04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d06:	4b04      	ldr	r3, [pc, #16]	; (8002d18 <MX_GPIO_Init+0x314>)
 8002d08:	490d      	ldr	r1, [pc, #52]	; (8002d40 <MX_GPIO_Init+0x33c>)
 8002d0a:	400a      	ands	r2, r1
 8002d0c:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002d0e:	46c0      	nop			; (mov r8, r8)
 8002d10:	46bd      	mov	sp, r7
 8002d12:	b00f      	add	sp, #60	; 0x3c
 8002d14:	bd90      	pop	{r4, r7, pc}
 8002d16:	46c0      	nop			; (mov r8, r8)
 8002d18:	40021000 	.word	0x40021000
 8002d1c:	00009022 	.word	0x00009022
 8002d20:	50000400 	.word	0x50000400
 8002d24:	50000800 	.word	0x50000800
 8002d28:	00009002 	.word	0x00009002
 8002d2c:	00006f11 	.word	0x00006f11
 8002d30:	10110000 	.word	0x10110000
 8002d34:	00006735 	.word	0x00006735
 8002d38:	00001004 	.word	0x00001004
 8002d3c:	50001c00 	.word	0x50001c00
 8002d40:	ffbfffff 	.word	0xffbfffff

08002d44 <main>:

/**
 * main loop
 */
int main(void)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002d48:	f001 f86c 	bl	8003e24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002d4c:	f000 f8f0 	bl	8002f30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002d50:	f7ff fe58 	bl	8002a04 <MX_GPIO_Init>
  MX_RTC_Init();
 8002d54:	f000 fcda 	bl	800370c <MX_RTC_Init>
  MX_SPI1_Init();
 8002d58:	f000 fda0 	bl	800389c <MX_SPI1_Init>
//  MX_SPI2_Init();
  MX_USART2_UART_Init();
 8002d5c:	f000 ff82 	bl	8003c64 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8002d60:	f000 ff50 	bl	8003c04 <MX_USART1_UART_Init>


//  MX_IWDG_Init();
  MX_ADC_Init();
 8002d64:	f7ff fdd0 	bl	8002908 <MX_ADC_Init>
//  MX_TIM21_Init();

  /* USER CODE BEGIN 2 */
  itsdk_setup();
 8002d68:	f019 f9b4 	bl	801c0d4 <itsdk_setup>
	/* USER CODE BEGIN 3 */


	// itsdk_loop();

	  test_relay();
 8002d6c:	f000 f802 	bl	8002d74 <test_relay>
 8002d70:	e7fc      	b.n	8002d6c <main+0x28>
	...

08002d74 <test_relay>:
  }
  /* USER CODE END 3 */
}

void test_relay()
{
 8002d74:	b590      	push	{r4, r7, lr}
 8002d76:	b08b      	sub	sp, #44	; 0x2c
 8002d78:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef gpRelay = {
 8002d7a:	2114      	movs	r1, #20
 8002d7c:	000c      	movs	r4, r1
 8002d7e:	187b      	adds	r3, r7, r1
 8002d80:	0018      	movs	r0, r3
 8002d82:	2314      	movs	r3, #20
 8002d84:	001a      	movs	r2, r3
 8002d86:	2100      	movs	r1, #0
 8002d88:	f01b fa48 	bl	801e21c <memset>
 8002d8c:	0021      	movs	r1, r4
 8002d8e:	187b      	adds	r3, r7, r1
 8002d90:	2280      	movs	r2, #128	; 0x80
 8002d92:	0052      	lsls	r2, r2, #1
 8002d94:	601a      	str	r2, [r3, #0]
 8002d96:	187b      	adds	r3, r7, r1
 8002d98:	2201      	movs	r2, #1
 8002d9a:	605a      	str	r2, [r3, #4]
      .Pin  = RELAY_PIN,
      .Mode = GPIO_MODE_OUTPUT_PP,
  };
  HAL_GPIO_Init(GPIOA, &gpRelay);
 8002d9c:	187a      	adds	r2, r7, r1
 8002d9e:	23a0      	movs	r3, #160	; 0xa0
 8002da0:	05db      	lsls	r3, r3, #23
 8002da2:	0011      	movs	r1, r2
 8002da4:	0018      	movs	r0, r3
 8002da6:	f001 fc05 	bl	80045b4 <HAL_GPIO_Init>

  GPIO_InitTypeDef gpSPICS = {
 8002daa:	003b      	movs	r3, r7
 8002dac:	0018      	movs	r0, r3
 8002dae:	2314      	movs	r3, #20
 8002db0:	001a      	movs	r2, r3
 8002db2:	2100      	movs	r1, #0
 8002db4:	f01b fa32 	bl	801e21c <memset>
 8002db8:	003b      	movs	r3, r7
 8002dba:	2280      	movs	r2, #128	; 0x80
 8002dbc:	0152      	lsls	r2, r2, #5
 8002dbe:	601a      	str	r2, [r3, #0]
 8002dc0:	003b      	movs	r3, r7
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	605a      	str	r2, [r3, #4]
        .Pin  = SPICS_PIN,
        .Mode = GPIO_MODE_OUTPUT_PP,
  };
  HAL_GPIO_Init(GPIOB, &gpSPICS);
 8002dc6:	003b      	movs	r3, r7
 8002dc8:	4a35      	ldr	r2, [pc, #212]	; (8002ea0 <test_relay+0x12c>)
 8002dca:	0019      	movs	r1, r3
 8002dcc:	0010      	movs	r0, r2
 8002dce:	f001 fbf1 	bl	80045b4 <HAL_GPIO_Init>

  HAL_Delay(1000);
 8002dd2:	23fa      	movs	r3, #250	; 0xfa
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	0018      	movs	r0, r3
 8002dd8:	f001 f882 	bl	8003ee0 <HAL_Delay>

  log_info("test relay \n\r");
 8002ddc:	4b31      	ldr	r3, [pc, #196]	; (8002ea4 <test_relay+0x130>)
 8002dde:	0018      	movs	r0, r3
 8002de0:	f018 fe58 	bl	801ba94 <log_info>
  enable_vcc_sensor();
 8002de4:	f000 f868 	bl	8002eb8 <enable_vcc_sensor>
  HAL_Delay(1000);
 8002de8:	23fa      	movs	r3, #250	; 0xfa
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	0018      	movs	r0, r3
 8002dee:	f001 f877 	bl	8003ee0 <HAL_Delay>
  if(relay_state == 0){
 8002df2:	4b2d      	ldr	r3, [pc, #180]	; (8002ea8 <test_relay+0x134>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d119      	bne.n	8002e2e <test_relay+0xba>
	 // 0 on spi_cs 1 on relayopen
	  relay_state = 1;
 8002dfa:	4b2b      	ldr	r3, [pc, #172]	; (8002ea8 <test_relay+0x134>)
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	601a      	str	r2, [r3, #0]

	  HAL_GPIO_WritePin(RELAY_PORT, gpRelay.Pin, 1);
 8002e00:	2314      	movs	r3, #20
 8002e02:	18fb      	adds	r3, r7, r3
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	b299      	uxth	r1, r3
 8002e08:	23a0      	movs	r3, #160	; 0xa0
 8002e0a:	05db      	lsls	r3, r3, #23
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	0018      	movs	r0, r3
 8002e10:	f001 fd4e 	bl	80048b0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(SPICS_PORT, gpSPICS.Pin, 0);
 8002e14:	003b      	movs	r3, r7
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	b29b      	uxth	r3, r3
 8002e1a:	4821      	ldr	r0, [pc, #132]	; (8002ea0 <test_relay+0x12c>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	0019      	movs	r1, r3
 8002e20:	f001 fd46 	bl	80048b0 <HAL_GPIO_WritePin>
	  log_info("relay open\n\r");
 8002e24:	4b21      	ldr	r3, [pc, #132]	; (8002eac <test_relay+0x138>)
 8002e26:	0018      	movs	r0, r3
 8002e28:	f018 fe34 	bl	801ba94 <log_info>
 8002e2c:	e018      	b.n	8002e60 <test_relay+0xec>
  }else{
	  // 1 on spi_cs 0 on relayopen
	  relay_state = 0;
 8002e2e:	4b1e      	ldr	r3, [pc, #120]	; (8002ea8 <test_relay+0x134>)
 8002e30:	2200      	movs	r2, #0
 8002e32:	601a      	str	r2, [r3, #0]

	  HAL_GPIO_WritePin(RELAY_PORT, gpRelay.Pin, 0);
 8002e34:	2314      	movs	r3, #20
 8002e36:	18fb      	adds	r3, r7, r3
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	b299      	uxth	r1, r3
 8002e3c:	23a0      	movs	r3, #160	; 0xa0
 8002e3e:	05db      	lsls	r3, r3, #23
 8002e40:	2200      	movs	r2, #0
 8002e42:	0018      	movs	r0, r3
 8002e44:	f001 fd34 	bl	80048b0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(SPICS_PORT, gpSPICS.Pin, 1);
 8002e48:	003b      	movs	r3, r7
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	b29b      	uxth	r3, r3
 8002e4e:	4814      	ldr	r0, [pc, #80]	; (8002ea0 <test_relay+0x12c>)
 8002e50:	2201      	movs	r2, #1
 8002e52:	0019      	movs	r1, r3
 8002e54:	f001 fd2c 	bl	80048b0 <HAL_GPIO_WritePin>
	  log_info("relay close \n\r");
 8002e58:	4b15      	ldr	r3, [pc, #84]	; (8002eb0 <test_relay+0x13c>)
 8002e5a:	0018      	movs	r0, r3
 8002e5c:	f018 fe1a 	bl	801ba94 <log_info>
  }
  HAL_Delay(4);   // max commutating time is 4ms
 8002e60:	2004      	movs	r0, #4
 8002e62:	f001 f83d 	bl	8003ee0 <HAL_Delay>

  HAL_GPIO_WritePin(RELAY_PORT, gpRelay.Pin, 0);
 8002e66:	2314      	movs	r3, #20
 8002e68:	18fb      	adds	r3, r7, r3
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	b299      	uxth	r1, r3
 8002e6e:	23a0      	movs	r3, #160	; 0xa0
 8002e70:	05db      	lsls	r3, r3, #23
 8002e72:	2200      	movs	r2, #0
 8002e74:	0018      	movs	r0, r3
 8002e76:	f001 fd1b 	bl	80048b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SPICS_PORT, gpSPICS.Pin, 0);
 8002e7a:	003b      	movs	r3, r7
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	b29b      	uxth	r3, r3
 8002e80:	4807      	ldr	r0, [pc, #28]	; (8002ea0 <test_relay+0x12c>)
 8002e82:	2200      	movs	r2, #0
 8002e84:	0019      	movs	r1, r3
 8002e86:	f001 fd13 	bl	80048b0 <HAL_GPIO_WritePin>

  disable_vcc_sensor();
 8002e8a:	f000 f833 	bl	8002ef4 <disable_vcc_sensor>


  HAL_Delay(5000);
 8002e8e:	4b09      	ldr	r3, [pc, #36]	; (8002eb4 <test_relay+0x140>)
 8002e90:	0018      	movs	r0, r3
 8002e92:	f001 f825 	bl	8003ee0 <HAL_Delay>

}
 8002e96:	46c0      	nop			; (mov r8, r8)
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	b00b      	add	sp, #44	; 0x2c
 8002e9c:	bd90      	pop	{r4, r7, pc}
 8002e9e:	46c0      	nop			; (mov r8, r8)
 8002ea0:	50000400 	.word	0x50000400
 8002ea4:	0801f728 	.word	0x0801f728
 8002ea8:	200002a4 	.word	0x200002a4
 8002eac:	0801f738 	.word	0x0801f738
 8002eb0:	0801f748 	.word	0x0801f748
 8002eb4:	00001388 	.word	0x00001388

08002eb8 <enable_vcc_sensor>:

void enable_vcc_sensor()
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b086      	sub	sp, #24
 8002ebc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef gp = {
 8002ebe:	1d3b      	adds	r3, r7, #4
 8002ec0:	0018      	movs	r0, r3
 8002ec2:	2314      	movs	r3, #20
 8002ec4:	001a      	movs	r2, r3
 8002ec6:	2100      	movs	r1, #0
 8002ec8:	f01b f9a8 	bl	801e21c <memset>
 8002ecc:	1d3b      	adds	r3, r7, #4
 8002ece:	2280      	movs	r2, #128	; 0x80
 8002ed0:	0112      	lsls	r2, r2, #4
 8002ed2:	601a      	str	r2, [r3, #0]
 8002ed4:	1d3b      	adds	r3, r7, #4
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	605a      	str	r2, [r3, #4]
      .Pin  = VCC_SENSOR_PIN,
      .Mode = GPIO_MODE_OUTPUT_PP,
  };
  //HAL_GPIO_Init(GPIOA, &gp);
  HAL_GPIO_WritePin(GPIOA, gp.Pin, 1);
 8002eda:	1d3b      	adds	r3, r7, #4
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	b299      	uxth	r1, r3
 8002ee0:	23a0      	movs	r3, #160	; 0xa0
 8002ee2:	05db      	lsls	r3, r3, #23
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	0018      	movs	r0, r3
 8002ee8:	f001 fce2 	bl	80048b0 <HAL_GPIO_WritePin>
}
 8002eec:	46c0      	nop			; (mov r8, r8)
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	b006      	add	sp, #24
 8002ef2:	bd80      	pop	{r7, pc}

08002ef4 <disable_vcc_sensor>:

void disable_vcc_sensor()
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b086      	sub	sp, #24
 8002ef8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef gp = {
 8002efa:	1d3b      	adds	r3, r7, #4
 8002efc:	0018      	movs	r0, r3
 8002efe:	2314      	movs	r3, #20
 8002f00:	001a      	movs	r2, r3
 8002f02:	2100      	movs	r1, #0
 8002f04:	f01b f98a 	bl	801e21c <memset>
 8002f08:	1d3b      	adds	r3, r7, #4
 8002f0a:	2280      	movs	r2, #128	; 0x80
 8002f0c:	0112      	lsls	r2, r2, #4
 8002f0e:	601a      	str	r2, [r3, #0]
 8002f10:	1d3b      	adds	r3, r7, #4
 8002f12:	2201      	movs	r2, #1
 8002f14:	605a      	str	r2, [r3, #4]
      .Pin  = VCC_SENSOR_PIN,
      .Mode = GPIO_MODE_OUTPUT_PP,
  };
  //HAL_GPIO_Init(GPIOA, &gp);
  HAL_GPIO_WritePin(GPIOA, gp.Pin, 0);
 8002f16:	1d3b      	adds	r3, r7, #4
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	b299      	uxth	r1, r3
 8002f1c:	23a0      	movs	r3, #160	; 0xa0
 8002f1e:	05db      	lsls	r3, r3, #23
 8002f20:	2200      	movs	r2, #0
 8002f22:	0018      	movs	r0, r3
 8002f24:	f001 fcc4 	bl	80048b0 <HAL_GPIO_WritePin>
}
 8002f28:	46c0      	nop			; (mov r8, r8)
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	b006      	add	sp, #24
 8002f2e:	bd80      	pop	{r7, pc}

08002f30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002f30:	b590      	push	{r4, r7, lr}
 8002f32:	b09d      	sub	sp, #116	; 0x74
 8002f34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002f36:	2438      	movs	r4, #56	; 0x38
 8002f38:	193b      	adds	r3, r7, r4
 8002f3a:	0018      	movs	r0, r3
 8002f3c:	2338      	movs	r3, #56	; 0x38
 8002f3e:	001a      	movs	r2, r3
 8002f40:	2100      	movs	r1, #0
 8002f42:	f01b f96b 	bl	801e21c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002f46:	2324      	movs	r3, #36	; 0x24
 8002f48:	18fb      	adds	r3, r7, r3
 8002f4a:	0018      	movs	r0, r3
 8002f4c:	2314      	movs	r3, #20
 8002f4e:	001a      	movs	r2, r3
 8002f50:	2100      	movs	r1, #0
 8002f52:	f01b f963 	bl	801e21c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002f56:	003b      	movs	r3, r7
 8002f58:	0018      	movs	r0, r3
 8002f5a:	2324      	movs	r3, #36	; 0x24
 8002f5c:	001a      	movs	r2, r3
 8002f5e:	2100      	movs	r1, #0
 8002f60:	f01b f95c 	bl	801e21c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f64:	4b34      	ldr	r3, [pc, #208]	; (8003038 <SystemClock_Config+0x108>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a34      	ldr	r2, [pc, #208]	; (800303c <SystemClock_Config+0x10c>)
 8002f6a:	401a      	ands	r2, r3
 8002f6c:	4b32      	ldr	r3, [pc, #200]	; (8003038 <SystemClock_Config+0x108>)
 8002f6e:	2180      	movs	r1, #128	; 0x80
 8002f70:	0109      	lsls	r1, r1, #4
 8002f72:	430a      	orrs	r2, r1
 8002f74:	601a      	str	r2, [r3, #0]
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002f76:	f001 fcd5 	bl	8004924 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002f7a:	4b31      	ldr	r3, [pc, #196]	; (8003040 <SystemClock_Config+0x110>)
 8002f7c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002f7e:	4b30      	ldr	r3, [pc, #192]	; (8003040 <SystemClock_Config+0x110>)
 8002f80:	492e      	ldr	r1, [pc, #184]	; (800303c <SystemClock_Config+0x10c>)
 8002f82:	400a      	ands	r2, r1
 8002f84:	651a      	str	r2, [r3, #80]	; 0x50
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8002f86:	193b      	adds	r3, r7, r4
 8002f88:	220e      	movs	r2, #14
 8002f8a:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002f8c:	193b      	adds	r3, r7, r4
 8002f8e:	2280      	movs	r2, #128	; 0x80
 8002f90:	0052      	lsls	r2, r2, #1
 8002f92:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002f94:	0021      	movs	r1, r4
 8002f96:	187b      	adds	r3, r7, r1
 8002f98:	2201      	movs	r2, #1
 8002f9a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002f9c:	187b      	adds	r3, r7, r1
 8002f9e:	2210      	movs	r2, #16
 8002fa0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002fa2:	187b      	adds	r3, r7, r1
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002fa8:	187b      	adds	r3, r7, r1
 8002faa:	2202      	movs	r2, #2
 8002fac:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002fae:	187b      	adds	r3, r7, r1
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_6;
 8002fb4:	187b      	adds	r3, r7, r1
 8002fb6:	2280      	movs	r2, #128	; 0x80
 8002fb8:	0312      	lsls	r2, r2, #12
 8002fba:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 8002fbc:	187b      	adds	r3, r7, r1
 8002fbe:	2280      	movs	r2, #128	; 0x80
 8002fc0:	0412      	lsls	r2, r2, #16
 8002fc2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002fc4:	187b      	adds	r3, r7, r1
 8002fc6:	0018      	movs	r0, r3
 8002fc8:	f001 fcba 	bl	8004940 <HAL_RCC_OscConfig>
 8002fcc:	1e03      	subs	r3, r0, #0
 8002fce:	d001      	beq.n	8002fd4 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8002fd0:	f000 f838 	bl	8003044 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002fd4:	2124      	movs	r1, #36	; 0x24
 8002fd6:	187b      	adds	r3, r7, r1
 8002fd8:	220f      	movs	r2, #15
 8002fda:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002fdc:	187b      	adds	r3, r7, r1
 8002fde:	2203      	movs	r2, #3
 8002fe0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002fe2:	187b      	adds	r3, r7, r1
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002fe8:	187b      	adds	r3, r7, r1
 8002fea:	2200      	movs	r2, #0
 8002fec:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002fee:	187b      	adds	r3, r7, r1
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002ff4:	187b      	adds	r3, r7, r1
 8002ff6:	2101      	movs	r1, #1
 8002ff8:	0018      	movs	r0, r3
 8002ffa:	f002 f871 	bl	80050e0 <HAL_RCC_ClockConfig>
 8002ffe:	1e03      	subs	r3, r0, #0
 8003000:	d001      	beq.n	8003006 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8003002:	f000 f81f 	bl	8003044 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_RTC;
 8003006:	003b      	movs	r3, r7
 8003008:	2223      	movs	r2, #35	; 0x23
 800300a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_HSI;
 800300c:	003b      	movs	r3, r7
 800300e:	2208      	movs	r2, #8
 8003010:	60da      	str	r2, [r3, #12]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003012:	003b      	movs	r3, r7
 8003014:	2200      	movs	r2, #0
 8003016:	609a      	str	r2, [r3, #8]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003018:	003b      	movs	r3, r7
 800301a:	2280      	movs	r2, #128	; 0x80
 800301c:	0252      	lsls	r2, r2, #9
 800301e:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003020:	003b      	movs	r3, r7
 8003022:	0018      	movs	r0, r3
 8003024:	f002 fa40 	bl	80054a8 <HAL_RCCEx_PeriphCLKConfig>
 8003028:	1e03      	subs	r3, r0, #0
 800302a:	d001      	beq.n	8003030 <SystemClock_Config+0x100>
  {
    Error_Handler();
 800302c:	f000 f80a 	bl	8003044 <Error_Handler>
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
    if(HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK){
  	  Error_Handler();
    }*/

}
 8003030:	46c0      	nop			; (mov r8, r8)
 8003032:	46bd      	mov	sp, r7
 8003034:	b01d      	add	sp, #116	; 0x74
 8003036:	bd90      	pop	{r4, r7, pc}
 8003038:	40007000 	.word	0x40007000
 800303c:	ffffe7ff 	.word	0xffffe7ff
 8003040:	40021000 	.word	0x40021000

08003044 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003048:	46c0      	nop			; (mov r8, r8)
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
	...

08003050 <task>:
void resetMeasure(uint8_t * array, uint8_t size);
uint16_t measureUart;												//measure as int
uint8_t numberMeasure = 90;
/**************************/

void task() {
 8003050:	b5b0      	push	{r4, r5, r7, lr}
 8003052:	b084      	sub	sp, #16
 8003054:	af00      	add	r7, sp, #0

// readUart();
	/**
	 * if not joined set the green led to 1
	 */
	if(!itsdk_lorawan_hasjoined()){
 8003056:	f018 fe8b 	bl	801bd70 <itsdk_lorawan_hasjoined>
 800305a:	0003      	movs	r3, r0
 800305c:	001a      	movs	r2, r3
 800305e:	2301      	movs	r3, #1
 8003060:	4053      	eors	r3, r2
 8003062:	b2db      	uxtb	r3, r3
 8003064:	2b00      	cmp	r3, #0
 8003066:	d003      	beq.n	8003070 <task+0x20>
		gpio_set(LEDGreen_PORT,LEDGreen_PIN);
 8003068:	2180      	movs	r1, #128	; 0x80
 800306a:	2001      	movs	r0, #1
 800306c:	f01a fa18 	bl	801d4a0 <gpio_set>
	}


	// wait for the board configuration
	uint8_t i = 0;
 8003070:	230f      	movs	r3, #15
 8003072:	18fb      	adds	r3, r7, r3
 8003074:	2200      	movs	r2, #0
 8003076:	701a      	strb	r2, [r3, #0]
	uint8_t devEui[8] = {0};
 8003078:	1d3b      	adds	r3, r7, #4
 800307a:	0018      	movs	r0, r3
 800307c:	2308      	movs	r3, #8
 800307e:	001a      	movs	r2, r3
 8003080:	2100      	movs	r1, #0
 8003082:	f01b f8cb 	bl	801e21c <memset>
	itsdk_lorawan_getDeviceEUI(devEui);
 8003086:	1d3b      	adds	r3, r7, #4
 8003088:	0018      	movs	r0, r3
 800308a:	f018 ff2d 	bl	801bee8 <itsdk_lorawan_getDeviceEUI>
	while ( i < 8 && devEui[i] == 0 ) i++;
 800308e:	e005      	b.n	800309c <task+0x4c>
 8003090:	210f      	movs	r1, #15
 8003092:	187b      	adds	r3, r7, r1
 8003094:	781a      	ldrb	r2, [r3, #0]
 8003096:	187b      	adds	r3, r7, r1
 8003098:	3201      	adds	r2, #1
 800309a:	701a      	strb	r2, [r3, #0]
 800309c:	230f      	movs	r3, #15
 800309e:	18fb      	adds	r3, r7, r3
 80030a0:	781b      	ldrb	r3, [r3, #0]
 80030a2:	2b07      	cmp	r3, #7
 80030a4:	d806      	bhi.n	80030b4 <task+0x64>
 80030a6:	230f      	movs	r3, #15
 80030a8:	18fb      	adds	r3, r7, r3
 80030aa:	781b      	ldrb	r3, [r3, #0]
 80030ac:	1d3a      	adds	r2, r7, #4
 80030ae:	5cd3      	ldrb	r3, [r2, r3]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d0ed      	beq.n	8003090 <task+0x40>
	if  ( i < 8 ) {
 80030b4:	230f      	movs	r3, #15
 80030b6:	18fb      	adds	r3, r7, r3
 80030b8:	781b      	ldrb	r3, [r3, #0]
 80030ba:	2b07      	cmp	r3, #7
 80030bc:	d86b      	bhi.n	8003196 <task+0x146>
		if ( s_state.setup == BOOL_FALSE) {
 80030be:	4b38      	ldr	r3, [pc, #224]	; (80031a0 <task+0x150>)
 80030c0:	791b      	ldrb	r3, [r3, #4]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d11e      	bne.n	8003104 <task+0xb4>
			log_info("Init LoRawan Stack ");
 80030c6:	4b37      	ldr	r3, [pc, #220]	; (80031a4 <task+0x154>)
 80030c8:	0018      	movs	r0, r3
 80030ca:	f018 fce3 	bl	801ba94 <log_info>
			itsdk_lorawan_init_t r;
			#ifdef ITSDK_LORAWAN_CHANNEL
				static itsdk_lorawan_channelInit_t channels= ITSDK_LORAWAN_CHANNEL;
				r = itsdk_lorawan_setup(itsdk_config.sdk.activeRegion,&channels);
 80030ce:	4b36      	ldr	r3, [pc, #216]	; (80031a8 <task+0x158>)
 80030d0:	891b      	ldrh	r3, [r3, #8]
 80030d2:	250e      	movs	r5, #14
 80030d4:	197c      	adds	r4, r7, r5
 80030d6:	4a35      	ldr	r2, [pc, #212]	; (80031ac <task+0x15c>)
 80030d8:	0011      	movs	r1, r2
 80030da:	0018      	movs	r0, r3
 80030dc:	f018 fd20 	bl	801bb20 <itsdk_lorawan_setup>
 80030e0:	0003      	movs	r3, r0
 80030e2:	7023      	strb	r3, [r4, #0]
			#else
				r = itsdk_lorawan_setup(itsdk_config.sdk.activeRegion,NULL);
			#endif
			if ( r == LORAWAN_INIT_SUCESS ) {
 80030e4:	197b      	adds	r3, r7, r5
 80030e6:	781b      	ldrb	r3, [r3, #0]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d107      	bne.n	80030fc <task+0xac>
				log_info("success\r\n");
 80030ec:	4b30      	ldr	r3, [pc, #192]	; (80031b0 <task+0x160>)
 80030ee:	0018      	movs	r0, r3
 80030f0:	f018 fcd0 	bl	801ba94 <log_info>
				s_state.setup = BOOL_TRUE;
 80030f4:	4b2a      	ldr	r3, [pc, #168]	; (80031a0 <task+0x150>)
 80030f6:	2201      	movs	r2, #1
 80030f8:	711a      	strb	r2, [r3, #4]
 80030fa:	e003      	b.n	8003104 <task+0xb4>
			} else {
				log_info("failed\r\n");
 80030fc:	4b2d      	ldr	r3, [pc, #180]	; (80031b4 <task+0x164>)
 80030fe:	0018      	movs	r0, r3
 8003100:	f018 fcc8 	bl	801ba94 <log_info>
			}
		}
		if ( s_state.setup == BOOL_TRUE && s_state.lastComMS > COMFREQS) {
 8003104:	4b26      	ldr	r3, [pc, #152]	; (80031a0 <task+0x150>)
 8003106:	791b      	ldrb	r3, [r3, #4]
 8003108:	2b01      	cmp	r3, #1
 800310a:	d13d      	bne.n	8003188 <task+0x138>
 800310c:	4b24      	ldr	r3, [pc, #144]	; (80031a0 <task+0x150>)
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	4b29      	ldr	r3, [pc, #164]	; (80031b8 <task+0x168>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	429a      	cmp	r2, r3
 8003116:	dd37      	ble.n	8003188 <task+0x138>
			//check if joined
			if ( !itsdk_lorawan_hasjoined() ) {
 8003118:	f018 fe2a 	bl	801bd70 <itsdk_lorawan_hasjoined>
 800311c:	0003      	movs	r3, r0
 800311e:	001a      	movs	r2, r3
 8003120:	2301      	movs	r3, #1
 8003122:	4053      	eors	r3, r2
 8003124:	b2db      	uxtb	r3, r3
 8003126:	2b00      	cmp	r3, #0
 8003128:	d01c      	beq.n	8003164 <task+0x114>
				log_info("Connecting LoRaWAN ");
 800312a:	4b24      	ldr	r3, [pc, #144]	; (80031bc <task+0x16c>)
 800312c:	0018      	movs	r0, r3
 800312e:	f018 fcb1 	bl	801ba94 <log_info>
				if ( itsdk_lorawan_join_sync() == LORAWAN_JOIN_SUCCESS ) {
 8003132:	f018 fdf3 	bl	801bd1c <itsdk_lorawan_join_sync>
 8003136:	0003      	movs	r3, r0
 8003138:	2b01      	cmp	r3, #1
 800313a:	d108      	bne.n	800314e <task+0xfe>
					gpio_reset(LEDGreen_PORT,LEDGreen_PIN);
 800313c:	2180      	movs	r1, #128	; 0x80
 800313e:	2001      	movs	r0, #1
 8003140:	f01a f9c6 	bl	801d4d0 <gpio_reset>
					log_info("success\r\n");
 8003144:	4b1a      	ldr	r3, [pc, #104]	; (80031b0 <task+0x160>)
 8003146:	0018      	movs	r0, r3
 8003148:	f018 fca4 	bl	801ba94 <log_info>
			if ( !itsdk_lorawan_hasjoined() ) {
 800314c:	e023      	b.n	8003196 <task+0x146>
				} else {
					log_info("failed\r\n");
 800314e:	4b19      	ldr	r3, [pc, #100]	; (80031b4 <task+0x164>)
 8003150:	0018      	movs	r0, r3
 8003152:	f018 fc9f 	bl	801ba94 <log_info>
					s_state.lastComMS = COMFREQS - 30*1000; // retry in 30 seconds
 8003156:	4b18      	ldr	r3, [pc, #96]	; (80031b8 <task+0x168>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a19      	ldr	r2, [pc, #100]	; (80031c0 <task+0x170>)
 800315c:	189a      	adds	r2, r3, r2
 800315e:	4b10      	ldr	r3, [pc, #64]	; (80031a0 <task+0x150>)
 8003160:	601a      	str	r2, [r3, #0]
			if ( !itsdk_lorawan_hasjoined() ) {
 8003162:	e018      	b.n	8003196 <task+0x146>
				}
			} else {
				// Send a LoRaWan Frame
				uint8_t measureValidity = readUart();
 8003164:	250d      	movs	r5, #13
 8003166:	197c      	adds	r4, r7, r5
 8003168:	f000 fa1e 	bl	80035a8 <readUart>
 800316c:	0003      	movs	r3, r0
 800316e:	7023      	strb	r3, [r4, #0]

				sendUplink(measureUart, measureValidity);
 8003170:	4b14      	ldr	r3, [pc, #80]	; (80031c4 <task+0x174>)
 8003172:	881a      	ldrh	r2, [r3, #0]
 8003174:	197b      	adds	r3, r7, r5
 8003176:	781b      	ldrb	r3, [r3, #0]
 8003178:	0019      	movs	r1, r3
 800317a:	0010      	movs	r0, r2
 800317c:	f000 f826 	bl	80031cc <sendUplink>
				s_state.lastComMS = 0;
 8003180:	4b07      	ldr	r3, [pc, #28]	; (80031a0 <task+0x150>)
 8003182:	2200      	movs	r2, #0
 8003184:	601a      	str	r2, [r3, #0]
			if ( !itsdk_lorawan_hasjoined() ) {
 8003186:	e006      	b.n	8003196 <task+0x146>
			}
		} else {
			s_state.lastComMS += TASKDELAYMS;
 8003188:	4b05      	ldr	r3, [pc, #20]	; (80031a0 <task+0x150>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a0e      	ldr	r2, [pc, #56]	; (80031c8 <task+0x178>)
 800318e:	189a      	adds	r2, r3, r2
 8003190:	4b03      	ldr	r3, [pc, #12]	; (80031a0 <task+0x150>)
 8003192:	601a      	str	r2, [r3, #0]
		}
	}
}
 8003194:	e7ff      	b.n	8003196 <task+0x146>
 8003196:	46c0      	nop			; (mov r8, r8)
 8003198:	46bd      	mov	sp, r7
 800319a:	b004      	add	sp, #16
 800319c:	bdb0      	pop	{r4, r5, r7, pc}
 800319e:	46c0      	nop			; (mov r8, r8)
 80031a0:	20001350 	.word	0x20001350
 80031a4:	0801f758 	.word	0x0801f758
 80031a8:	20001654 	.word	0x20001654
 80031ac:	20000008 	.word	0x20000008
 80031b0:	0801f76c 	.word	0x0801f76c
 80031b4:	0801f778 	.word	0x0801f778
 80031b8:	20000000 	.word	0x20000000
 80031bc:	0801f784 	.word	0x0801f784
 80031c0:	ffff8ad0 	.word	0xffff8ad0
 80031c4:	20001358 	.word	0x20001358
 80031c8:	00002710 	.word	0x00002710

080031cc <sendUplink>:


/****************************************************************************************
 * SendUplink packet
 ****************************************************************************************/
void sendUplink(uint16_t measure, uint8_t validity){
 80031cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031ce:	b095      	sub	sp, #84	; 0x54
 80031d0:	af06      	add	r7, sp, #24
 80031d2:	0002      	movs	r2, r0
 80031d4:	1dbb      	adds	r3, r7, #6
 80031d6:	801a      	strh	r2, [r3, #0]
 80031d8:	1d7b      	adds	r3, r7, #5
 80031da:	1c0a      	adds	r2, r1, #0
 80031dc:	701a      	strb	r2, [r3, #0]
	log_info("Fire a LoRaWAN message \n\r");
 80031de:	4b5b      	ldr	r3, [pc, #364]	; (800334c <sendUplink+0x180>)
 80031e0:	0018      	movs	r0, r3
 80031e2:	f018 fc57 	bl	801ba94 <log_info>

	uint16_t vbat = getBatteryLevel();
 80031e6:	2636      	movs	r6, #54	; 0x36
 80031e8:	19bc      	adds	r4, r7, r6
 80031ea:	f000 f98b 	bl	8003504 <getBatteryLevel>
 80031ee:	0003      	movs	r3, r0
 80031f0:	8023      	strh	r3, [r4, #0]
	uint8_t port;
	uint8_t size=16;
 80031f2:	2332      	movs	r3, #50	; 0x32
 80031f4:	18fb      	adds	r3, r7, r3
 80031f6:	2210      	movs	r2, #16
 80031f8:	701a      	strb	r2, [r3, #0]
	uint8_t rx[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
 80031fa:	2220      	movs	r2, #32
 80031fc:	18bb      	adds	r3, r7, r2
 80031fe:	0018      	movs	r0, r3
 8003200:	2310      	movs	r3, #16
 8003202:	001a      	movs	r2, r3
 8003204:	2100      	movs	r1, #0
 8003206:	f01b f809 	bl	801e21c <memset>
	uint8_t sendBuff[20];
	uint8_t sendBuffIndex = 0; //uint32
 800320a:	2035      	movs	r0, #53	; 0x35
 800320c:	183b      	adds	r3, r7, r0
 800320e:	2200      	movs	r2, #0
 8003210:	701a      	strb	r2, [r3, #0]
	
	sendBuff[sendBuffIndex++] = (vbat >> 8 ) & 0xFF; 	//send Vbat on 2bytes
 8003212:	19bb      	adds	r3, r7, r6
 8003214:	881b      	ldrh	r3, [r3, #0]
 8003216:	0a1b      	lsrs	r3, r3, #8
 8003218:	b299      	uxth	r1, r3
 800321a:	183b      	adds	r3, r7, r0
 800321c:	781b      	ldrb	r3, [r3, #0]
 800321e:	0004      	movs	r4, r0
 8003220:	183a      	adds	r2, r7, r0
 8003222:	1c58      	adds	r0, r3, #1
 8003224:	7010      	strb	r0, [r2, #0]
 8003226:	001a      	movs	r2, r3
 8003228:	b2c9      	uxtb	r1, r1
 800322a:	250c      	movs	r5, #12
 800322c:	197b      	adds	r3, r7, r5
 800322e:	5499      	strb	r1, [r3, r2]
	sendBuff[sendBuffIndex++] = vbat & 0xFF;			//
 8003230:	0020      	movs	r0, r4
 8003232:	183b      	adds	r3, r7, r0
 8003234:	781b      	ldrb	r3, [r3, #0]
 8003236:	183a      	adds	r2, r7, r0
 8003238:	1c59      	adds	r1, r3, #1
 800323a:	7011      	strb	r1, [r2, #0]
 800323c:	001a      	movs	r2, r3
 800323e:	19bb      	adds	r3, r7, r6
 8003240:	881b      	ldrh	r3, [r3, #0]
 8003242:	b2d9      	uxtb	r1, r3
 8003244:	197b      	adds	r3, r7, r5
 8003246:	5499      	strb	r1, [r3, r2]


	sendBuff[sendBuffIndex++] = (measure >> 8 ) & 0xFF;	//send uart measure on 2bytes
 8003248:	1dbb      	adds	r3, r7, #6
 800324a:	881b      	ldrh	r3, [r3, #0]
 800324c:	0a1b      	lsrs	r3, r3, #8
 800324e:	b299      	uxth	r1, r3
 8003250:	183b      	adds	r3, r7, r0
 8003252:	781b      	ldrb	r3, [r3, #0]
 8003254:	0004      	movs	r4, r0
 8003256:	183a      	adds	r2, r7, r0
 8003258:	1c58      	adds	r0, r3, #1
 800325a:	7010      	strb	r0, [r2, #0]
 800325c:	001a      	movs	r2, r3
 800325e:	b2c9      	uxtb	r1, r1
 8003260:	197b      	adds	r3, r7, r5
 8003262:	5499      	strb	r1, [r3, r2]
	sendBuff[sendBuffIndex++] = measure & 0xFF;			//
 8003264:	0020      	movs	r0, r4
 8003266:	183b      	adds	r3, r7, r0
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	183a      	adds	r2, r7, r0
 800326c:	1c59      	adds	r1, r3, #1
 800326e:	7011      	strb	r1, [r2, #0]
 8003270:	001a      	movs	r2, r3
 8003272:	1dbb      	adds	r3, r7, #6
 8003274:	881b      	ldrh	r3, [r3, #0]
 8003276:	b2d9      	uxtb	r1, r3
 8003278:	197b      	adds	r3, r7, r5
 800327a:	5499      	strb	r1, [r3, r2]
	sendBuff[sendBuffIndex++] = validity;				//send uart measure validity on 1byte
 800327c:	183b      	adds	r3, r7, r0
 800327e:	781b      	ldrb	r3, [r3, #0]
 8003280:	183a      	adds	r2, r7, r0
 8003282:	1c59      	adds	r1, r3, #1
 8003284:	7011      	strb	r1, [r2, #0]
 8003286:	0019      	movs	r1, r3
 8003288:	197b      	adds	r3, r7, r5
 800328a:	1d7a      	adds	r2, r7, #5
 800328c:	7812      	ldrb	r2, [r2, #0]
 800328e:	545a      	strb	r2, [r3, r1]


	
	itsdk_lorawan_send_t r = itsdk_lorawan_send_sync(
 8003290:	4b2f      	ldr	r3, [pc, #188]	; (8003350 <sendUplink+0x184>)
 8003292:	781a      	ldrb	r2, [r3, #0]
 8003294:	2634      	movs	r6, #52	; 0x34
 8003296:	19bc      	adds	r4, r7, r6
 8003298:	183b      	adds	r3, r7, r0
 800329a:	7819      	ldrb	r1, [r3, #0]
 800329c:	1978      	adds	r0, r7, r5
 800329e:	2300      	movs	r3, #0
 80032a0:	9305      	str	r3, [sp, #20]
 80032a2:	2520      	movs	r5, #32
 80032a4:	197b      	adds	r3, r7, r5
 80032a6:	9304      	str	r3, [sp, #16]
 80032a8:	2332      	movs	r3, #50	; 0x32
 80032aa:	18fb      	adds	r3, r7, r3
 80032ac:	9303      	str	r3, [sp, #12]
 80032ae:	2333      	movs	r3, #51	; 0x33
 80032b0:	18fb      	adds	r3, r7, r3
 80032b2:	9302      	str	r3, [sp, #8]
 80032b4:	2300      	movs	r3, #0
 80032b6:	9301      	str	r3, [sp, #4]
 80032b8:	2301      	movs	r3, #1
 80032ba:	9300      	str	r3, [sp, #0]
 80032bc:	0013      	movs	r3, r2
 80032be:	2201      	movs	r2, #1
 80032c0:	f018 fd72 	bl	801bda8 <itsdk_lorawan_send_sync>
 80032c4:	0003      	movs	r3, r0
 80032c6:	7023      	strb	r3, [r4, #0]
			&port,							// In case of reception - Port (uint8_t)
			&size,							// In case of reception - Size (uint8_t) - init with buffer max size
			rx,								// In case of reception - Data (uint8_t[] bcopied)
			PAYLOAD_ENCRYPT_NONE			// End to End encryption mode
	);
	if ( r == LORAWAN_SEND_SENT || r == LORAWAN_SEND_ACKED || r == LORAWAN_SEND_ACKED_WITH_DOWNLINK || r == LORAWAN_SEND_ACKED_WITH_DOWNLINK_PENDING) {
 80032c8:	19bb      	adds	r3, r7, r6
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d00e      	beq.n	80032ee <sendUplink+0x122>
 80032d0:	2334      	movs	r3, #52	; 0x34
 80032d2:	18fb      	adds	r3, r7, r3
 80032d4:	781b      	ldrb	r3, [r3, #0]
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	d009      	beq.n	80032ee <sendUplink+0x122>
 80032da:	2334      	movs	r3, #52	; 0x34
 80032dc:	18fb      	adds	r3, r7, r3
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	2b03      	cmp	r3, #3
 80032e2:	d004      	beq.n	80032ee <sendUplink+0x122>
 80032e4:	2334      	movs	r3, #52	; 0x34
 80032e6:	18fb      	adds	r3, r7, r3
 80032e8:	781b      	ldrb	r3, [r3, #0]
 80032ea:	2b04      	cmp	r3, #4
 80032ec:	d122      	bne.n	8003334 <sendUplink+0x168>
		gpio_set(LEDGreen_PORT,LEDGreen_PIN);
 80032ee:	2180      	movs	r1, #128	; 0x80
 80032f0:	2001      	movs	r0, #1
 80032f2:	f01a f8d5 	bl	801d4a0 <gpio_set>
		log_info("Send Success\r\n",r);
 80032f6:	2334      	movs	r3, #52	; 0x34
 80032f8:	18fb      	adds	r3, r7, r3
 80032fa:	781a      	ldrb	r2, [r3, #0]
 80032fc:	4b15      	ldr	r3, [pc, #84]	; (8003354 <sendUplink+0x188>)
 80032fe:	0011      	movs	r1, r2
 8003300:	0018      	movs	r0, r3
 8003302:	f018 fbc7 	bl	801ba94 <log_info>
		itsdk_delayMs(500);
 8003306:	23fa      	movs	r3, #250	; 0xfa
 8003308:	005b      	lsls	r3, r3, #1
 800330a:	0018      	movs	r0, r3
 800330c:	f01a fa1a 	bl	801d744 <itsdk_delayMs>
		gpio_reset(LEDGreen_PORT,LEDGreen_PIN);
 8003310:	2180      	movs	r1, #128	; 0x80
 8003312:	2001      	movs	r0, #1
 8003314:	f01a f8dc 	bl	801d4d0 <gpio_reset>
		process_downlink(port, rx);
 8003318:	2433      	movs	r4, #51	; 0x33
 800331a:	193b      	adds	r3, r7, r4
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	001a      	movs	r2, r3
 8003320:	2320      	movs	r3, #32
 8003322:	18fb      	adds	r3, r7, r3
 8003324:	0019      	movs	r1, r3
 8003326:	0010      	movs	r0, r2
 8003328:	f000 f818 	bl	800335c <process_downlink>
		port = 0;
 800332c:	193b      	adds	r3, r7, r4
 800332e:	2200      	movs	r2, #0
 8003330:	701a      	strb	r2, [r3, #0]
	if ( r == LORAWAN_SEND_SENT || r == LORAWAN_SEND_ACKED || r == LORAWAN_SEND_ACKED_WITH_DOWNLINK || r == LORAWAN_SEND_ACKED_WITH_DOWNLINK_PENDING) {
 8003332:	e007      	b.n	8003344 <sendUplink+0x178>
	}else {
		log_info("Send Failed (%d)\r\n",r);
 8003334:	2334      	movs	r3, #52	; 0x34
 8003336:	18fb      	adds	r3, r7, r3
 8003338:	781a      	ldrb	r2, [r3, #0]
 800333a:	4b07      	ldr	r3, [pc, #28]	; (8003358 <sendUplink+0x18c>)
 800333c:	0011      	movs	r1, r2
 800333e:	0018      	movs	r0, r3
 8003340:	f018 fba8 	bl	801ba94 <log_info>
	}
}
 8003344:	46c0      	nop			; (mov r8, r8)
 8003346:	46bd      	mov	sp, r7
 8003348:	b00f      	add	sp, #60	; 0x3c
 800334a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800334c:	0801f798 	.word	0x0801f798
 8003350:	20000004 	.word	0x20000004
 8003354:	0801f7b4 	.word	0x0801f7b4
 8003358:	0801f7c4 	.word	0x0801f7c4

0800335c <process_downlink>:
	*	A201 : adr off
	*	A202 : adr on
	* 0xA3 : set Datarate
 * Send on port 3
 ****************************************************************************************/
void process_downlink(uint8_t port, uint8_t rx[]){
 800335c:	b580      	push	{r7, lr}
 800335e:	b084      	sub	sp, #16
 8003360:	af00      	add	r7, sp, #0
 8003362:	0002      	movs	r2, r0
 8003364:	6039      	str	r1, [r7, #0]
 8003366:	1dfb      	adds	r3, r7, #7
 8003368:	701a      	strb	r2, [r3, #0]

	if(port == 3 && rx[0] != 0){
 800336a:	1dfb      	adds	r3, r7, #7
 800336c:	781b      	ldrb	r3, [r3, #0]
 800336e:	2b03      	cmp	r3, #3
 8003370:	d000      	beq.n	8003374 <process_downlink+0x18>
 8003372:	e08c      	b.n	800348e <process_downlink+0x132>
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	781b      	ldrb	r3, [r3, #0]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d100      	bne.n	800337e <process_downlink+0x22>
 800337c:	e087      	b.n	800348e <process_downlink+0x132>
		log_info("Downlink received \n\r");
 800337e:	4b48      	ldr	r3, [pc, #288]	; (80034a0 <process_downlink+0x144>)
 8003380:	0018      	movs	r0, r3
 8003382:	f018 fb87 	bl	801ba94 <log_info>
		log_info("Port : %d\n\r", port);
 8003386:	1dfb      	adds	r3, r7, #7
 8003388:	781a      	ldrb	r2, [r3, #0]
 800338a:	4b46      	ldr	r3, [pc, #280]	; (80034a4 <process_downlink+0x148>)
 800338c:	0011      	movs	r1, r2
 800338e:	0018      	movs	r0, r3
 8003390:	f018 fb80 	bl	801ba94 <log_info>
		log_info_array("RX : ",rx, 16);
 8003394:	4b44      	ldr	r3, [pc, #272]	; (80034a8 <process_downlink+0x14c>)
 8003396:	0018      	movs	r0, r3
 8003398:	f018 fb7c 	bl	801ba94 <log_info>
 800339c:	2300      	movs	r3, #0
 800339e:	60fb      	str	r3, [r7, #12]
 80033a0:	e00c      	b.n	80033bc <process_downlink+0x60>
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	683a      	ldr	r2, [r7, #0]
 80033a6:	18d3      	adds	r3, r2, r3
 80033a8:	781b      	ldrb	r3, [r3, #0]
 80033aa:	001a      	movs	r2, r3
 80033ac:	4b3f      	ldr	r3, [pc, #252]	; (80034ac <process_downlink+0x150>)
 80033ae:	0011      	movs	r1, r2
 80033b0:	0018      	movs	r0, r3
 80033b2:	f018 fb6f 	bl	801ba94 <log_info>
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	3301      	adds	r3, #1
 80033ba:	60fb      	str	r3, [r7, #12]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2b0f      	cmp	r3, #15
 80033c0:	ddef      	ble.n	80033a2 <process_downlink+0x46>
 80033c2:	4b3b      	ldr	r3, [pc, #236]	; (80034b0 <process_downlink+0x154>)
 80033c4:	0018      	movs	r0, r3
 80033c6:	f018 fb65 	bl	801ba94 <log_info>
		switch(rx[0]){
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	781b      	ldrb	r3, [r3, #0]
 80033ce:	2b04      	cmp	r3, #4
 80033d0:	d01f      	beq.n	8003412 <process_downlink+0xb6>
 80033d2:	dc02      	bgt.n	80033da <process_downlink+0x7e>
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d005      	beq.n	80033e4 <process_downlink+0x88>
			case 163:
				//set datarate
				dataRate = setDataRate(rx[1]);
				break;
			default:
				break;
 80033d8:	e05e      	b.n	8003498 <process_downlink+0x13c>
		switch(rx[0]){
 80033da:	2ba2      	cmp	r3, #162	; 0xa2
 80033dc:	d021      	beq.n	8003422 <process_downlink+0xc6>
 80033de:	2ba3      	cmp	r3, #163	; 0xa3
 80033e0:	d04a      	beq.n	8003478 <process_downlink+0x11c>
				break;
 80033e2:	e059      	b.n	8003498 <process_downlink+0x13c>
				COMFREQS = ((rx[1]<<16) + (rx[2]<<8) + (rx[3]<<0))*1000;
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	3301      	adds	r3, #1
 80033e8:	781b      	ldrb	r3, [r3, #0]
 80033ea:	041a      	lsls	r2, r3, #16
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	3302      	adds	r3, #2
 80033f0:	781b      	ldrb	r3, [r3, #0]
 80033f2:	021b      	lsls	r3, r3, #8
 80033f4:	18d3      	adds	r3, r2, r3
 80033f6:	683a      	ldr	r2, [r7, #0]
 80033f8:	3203      	adds	r2, #3
 80033fa:	7812      	ldrb	r2, [r2, #0]
 80033fc:	189a      	adds	r2, r3, r2
 80033fe:	0013      	movs	r3, r2
 8003400:	015b      	lsls	r3, r3, #5
 8003402:	1a9b      	subs	r3, r3, r2
 8003404:	009b      	lsls	r3, r3, #2
 8003406:	189b      	adds	r3, r3, r2
 8003408:	00db      	lsls	r3, r3, #3
 800340a:	001a      	movs	r2, r3
 800340c:	4b29      	ldr	r3, [pc, #164]	; (80034b4 <process_downlink+0x158>)
 800340e:	601a      	str	r2, [r3, #0]
				break;
 8003410:	e042      	b.n	8003498 <process_downlink+0x13c>
				if(rx[1] == 15){
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	3301      	adds	r3, #1
 8003416:	781b      	ldrb	r3, [r3, #0]
 8003418:	2b0f      	cmp	r3, #15
 800341a:	d13a      	bne.n	8003492 <process_downlink+0x136>
					itsdk_reset();
 800341c:	f01a f940 	bl	801d6a0 <itsdk_reset>
				break;
 8003420:	e037      	b.n	8003492 <process_downlink+0x136>
				if(rx[1]==01){
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	3301      	adds	r3, #1
 8003426:	781b      	ldrb	r3, [r3, #0]
 8003428:	2b01      	cmp	r3, #1
 800342a:	d10f      	bne.n	800344c <process_downlink+0xf0>
					itsdk_config_shadow.sdk.lorawan.adrMode = __LORAWAN_ADR_OFF;
 800342c:	4b22      	ldr	r3, [pc, #136]	; (80034b8 <process_downlink+0x15c>)
 800342e:	7a9a      	ldrb	r2, [r3, #10]
 8003430:	213f      	movs	r1, #63	; 0x3f
 8003432:	400a      	ands	r2, r1
 8003434:	1c11      	adds	r1, r2, #0
 8003436:	2240      	movs	r2, #64	; 0x40
 8003438:	430a      	orrs	r2, r1
 800343a:	729a      	strb	r2, [r3, #10]
					itsdk_config_commitConfiguration(CONFIG_COMMIT_SAVE);
 800343c:	2001      	movs	r0, #1
 800343e:	f015 fc1f 	bl	8018c80 <itsdk_config_commitConfiguration>
					_itsdk_console_printf("OK\r\n");
 8003442:	4b1e      	ldr	r3, [pc, #120]	; (80034bc <process_downlink+0x160>)
 8003444:	0018      	movs	r0, r3
 8003446:	f015 f953 	bl	80186f0 <_itsdk_console_printf>
				break;
 800344a:	e024      	b.n	8003496 <process_downlink+0x13a>
				}else if(rx[1]==02){
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	3301      	adds	r3, #1
 8003450:	781b      	ldrb	r3, [r3, #0]
 8003452:	2b02      	cmp	r3, #2
 8003454:	d11f      	bne.n	8003496 <process_downlink+0x13a>
					itsdk_config_shadow.sdk.lorawan.adrMode = __LORAWAN_ADR_ON;
 8003456:	4b18      	ldr	r3, [pc, #96]	; (80034b8 <process_downlink+0x15c>)
 8003458:	7a9a      	ldrb	r2, [r3, #10]
 800345a:	213f      	movs	r1, #63	; 0x3f
 800345c:	400a      	ands	r2, r1
 800345e:	1c11      	adds	r1, r2, #0
 8003460:	2280      	movs	r2, #128	; 0x80
 8003462:	4252      	negs	r2, r2
 8003464:	430a      	orrs	r2, r1
 8003466:	729a      	strb	r2, [r3, #10]
					itsdk_config_commitConfiguration(CONFIG_COMMIT_SAVE);
 8003468:	2001      	movs	r0, #1
 800346a:	f015 fc09 	bl	8018c80 <itsdk_config_commitConfiguration>
					_itsdk_console_printf("OK\r\n");
 800346e:	4b13      	ldr	r3, [pc, #76]	; (80034bc <process_downlink+0x160>)
 8003470:	0018      	movs	r0, r3
 8003472:	f015 f93d 	bl	80186f0 <_itsdk_console_printf>
				break;
 8003476:	e00e      	b.n	8003496 <process_downlink+0x13a>
				dataRate = setDataRate(rx[1]);
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	3301      	adds	r3, #1
 800347c:	781b      	ldrb	r3, [r3, #0]
 800347e:	0018      	movs	r0, r3
 8003480:	f000 f820 	bl	80034c4 <setDataRate>
 8003484:	0003      	movs	r3, r0
 8003486:	001a      	movs	r2, r3
 8003488:	4b0d      	ldr	r3, [pc, #52]	; (80034c0 <process_downlink+0x164>)
 800348a:	701a      	strb	r2, [r3, #0]
				break;
 800348c:	e004      	b.n	8003498 <process_downlink+0x13c>
		}

	}
 800348e:	46c0      	nop			; (mov r8, r8)
 8003490:	e002      	b.n	8003498 <process_downlink+0x13c>
				break;
 8003492:	46c0      	nop			; (mov r8, r8)
 8003494:	e000      	b.n	8003498 <process_downlink+0x13c>
				break;
 8003496:	46c0      	nop			; (mov r8, r8)
}
 8003498:	46c0      	nop			; (mov r8, r8)
 800349a:	46bd      	mov	sp, r7
 800349c:	b004      	add	sp, #16
 800349e:	bd80      	pop	{r7, pc}
 80034a0:	0801f7d8 	.word	0x0801f7d8
 80034a4:	0801f7f0 	.word	0x0801f7f0
 80034a8:	0801f7fc 	.word	0x0801f7fc
 80034ac:	0801f804 	.word	0x0801f804
 80034b0:	0801f80c 	.word	0x0801f80c
 80034b4:	20000000 	.word	0x20000000
 80034b8:	20001638 	.word	0x20001638
 80034bc:	0801f810 	.word	0x0801f810
 80034c0:	20000004 	.word	0x20000004

080034c4 <setDataRate>:
/****************************************************************************************
 * return datarate in Function of a number
 ****************************************************************************************/
uint8_t setDataRate(uint8_t nbr){
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b082      	sub	sp, #8
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	0002      	movs	r2, r0
 80034cc:	1dfb      	adds	r3, r7, #7
 80034ce:	701a      	strb	r2, [r3, #0]
	switch(nbr){
 80034d0:	1dfb      	adds	r3, r7, #7
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	2b04      	cmp	r3, #4
 80034d6:	d80e      	bhi.n	80034f6 <setDataRate+0x32>
 80034d8:	009a      	lsls	r2, r3, #2
 80034da:	4b09      	ldr	r3, [pc, #36]	; (8003500 <setDataRate+0x3c>)
 80034dc:	18d3      	adds	r3, r2, r3
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	469f      	mov	pc, r3
	case 0:
		return __LORAWAN_DR_0;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e008      	b.n	80034f8 <setDataRate+0x34>
		break;
	case 1:
		return __LORAWAN_DR_1;
 80034e6:	2302      	movs	r3, #2
 80034e8:	e006      	b.n	80034f8 <setDataRate+0x34>
		break;
	case 2:
		return __LORAWAN_DR_2;
 80034ea:	2303      	movs	r3, #3
 80034ec:	e004      	b.n	80034f8 <setDataRate+0x34>
		break;
	case 3:
		return __LORAWAN_DR_3;
 80034ee:	2304      	movs	r3, #4
 80034f0:	e002      	b.n	80034f8 <setDataRate+0x34>
		break;
	case 4:
		return __LORAWAN_DR_4;
 80034f2:	2305      	movs	r3, #5
 80034f4:	e000      	b.n	80034f8 <setDataRate+0x34>
		break;
	default :
		return __LORAWAN_DR_0;
 80034f6:	2301      	movs	r3, #1
		break;

	}
}
 80034f8:	0018      	movs	r0, r3
 80034fa:	46bd      	mov	sp, r7
 80034fc:	b002      	add	sp, #8
 80034fe:	bd80      	pop	{r7, pc}
 8003500:	08020470 	.word	0x08020470

08003504 <getBatteryLevel>:


/****************************************************************************************
 *	Get the Battery level and print it on console
 ****************************************************************************************/
uint16_t getBatteryLevel(){
 8003504:	b590      	push	{r4, r7, lr}
 8003506:	b083      	sub	sp, #12
 8003508:	af00      	add	r7, sp, #0
	HAL_Delay(8);			//recommended by DISK91
 800350a:	2008      	movs	r0, #8
 800350c:	f000 fce8 	bl	8003ee0 <HAL_Delay>
	uint16_t battery=0;
 8003510:	1dbb      	adds	r3, r7, #6
 8003512:	2200      	movs	r2, #0
 8003514:	801a      	strh	r2, [r3, #0]
	gpio_set(__BANK_B, __LP_GPIO_2);
 8003516:	2104      	movs	r1, #4
 8003518:	2001      	movs	r0, #1
 800351a:	f019 ffc1 	bl	801d4a0 <gpio_set>
	battery = adc_getVBat();
 800351e:	1dbc      	adds	r4, r7, #6
 8003520:	f019 fc0a 	bl	801cd38 <adc_getVBat>
 8003524:	0003      	movs	r3, r0
 8003526:	8023      	strh	r3, [r4, #0]

	gpio_reset(VBAT_DIV2_PORT, VBAT_DIV2_PIN);
 8003528:	2104      	movs	r1, #4
 800352a:	2001      	movs	r0, #1
 800352c:	f019 ffd0 	bl	801d4d0 <gpio_reset>

	log_info("ADC value get vbat: %d\n\r", battery);
 8003530:	1dbb      	adds	r3, r7, #6
 8003532:	881a      	ldrh	r2, [r3, #0]
 8003534:	4b05      	ldr	r3, [pc, #20]	; (800354c <getBatteryLevel+0x48>)
 8003536:	0011      	movs	r1, r2
 8003538:	0018      	movs	r0, r3
 800353a:	f018 faab 	bl	801ba94 <log_info>
	return battery;
 800353e:	1dbb      	adds	r3, r7, #6
 8003540:	881b      	ldrh	r3, [r3, #0]
}
 8003542:	0018      	movs	r0, r3
 8003544:	46bd      	mov	sp, r7
 8003546:	b003      	add	sp, #12
 8003548:	bd90      	pop	{r4, r7, pc}
 800354a:	46c0      	nop			; (mov r8, r8)
 800354c:	0801f818 	.word	0x0801f818

08003550 <project_setup>:

/****************************************************************************************
 * Setup
 ****************************************************************************************/
void project_setup() {
 8003550:	b580      	push	{r7, lr}
 8003552:	af00      	add	r7, sp, #0
	SX1276InitLowPower();
 8003554:	f012 f91e 	bl	8015794 <SX1276InitLowPower>
	log_info("Starting up\r\n");				// print a message on the USART2
 8003558:	4b0e      	ldr	r3, [pc, #56]	; (8003594 <project_setup+0x44>)
 800355a:	0018      	movs	r0, r3
 800355c:	f018 fa9a 	bl	801ba94 <log_info>
	itsdk_delayMs(2000);
 8003560:	23fa      	movs	r3, #250	; 0xfa
 8003562:	00db      	lsls	r3, r3, #3
 8003564:	0018      	movs	r0, r3
 8003566:	f01a f8ed 	bl	801d744 <itsdk_delayMs>
	s_state.lastComMS = COMFREQS;
 800356a:	4b0b      	ldr	r3, [pc, #44]	; (8003598 <project_setup+0x48>)
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	4b0b      	ldr	r3, [pc, #44]	; (800359c <project_setup+0x4c>)
 8003570:	601a      	str	r2, [r3, #0]
	s_state.setup = BOOL_FALSE;
 8003572:	4b0a      	ldr	r3, [pc, #40]	; (800359c <project_setup+0x4c>)
 8003574:	2200      	movs	r2, #0
 8003576:	711a      	strb	r2, [r3, #4]
	gpio_reset(LEDGreen_PORT,LEDGreen_PIN);		//set led to 0
 8003578:	2180      	movs	r1, #128	; 0x80
 800357a:	2001      	movs	r0, #1
 800357c:	f019 ffa8 	bl	801d4d0 <gpio_reset>
	itdt_sched_registerSched(TASKDELAYMS,ITSDK_SCHED_CONF_IMMEDIATE, &task);
 8003580:	4a07      	ldr	r2, [pc, #28]	; (80035a0 <project_setup+0x50>)
 8003582:	2380      	movs	r3, #128	; 0x80
 8003584:	005b      	lsls	r3, r3, #1
 8003586:	4807      	ldr	r0, [pc, #28]	; (80035a4 <project_setup+0x54>)
 8003588:	0019      	movs	r1, r3
 800358a:	f018 ffb1 	bl	801c4f0 <itdt_sched_registerSched>
}
 800358e:	46c0      	nop			; (mov r8, r8)
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}
 8003594:	0801f834 	.word	0x0801f834
 8003598:	20000000 	.word	0x20000000
 800359c:	20001350 	.word	0x20001350
 80035a0:	08003051 	.word	0x08003051
 80035a4:	00002710 	.word	0x00002710

080035a8 <readUart>:

/****************************************************************************************
 * UART sensor part
 ****************************************************************************************/
#define debugUart   0
uint8_t readUart(){
 80035a8:	b590      	push	{r4, r7, lr}
 80035aa:	b089      	sub	sp, #36	; 0x24
 80035ac:	af00      	add	r7, sp, #0

	  GPIO_InitTypeDef POWER_ACTIVE;
	  POWER_ACTIVE.Pin   = GPIO_PIN_11 ;
 80035ae:	2408      	movs	r4, #8
 80035b0:	193b      	adds	r3, r7, r4
 80035b2:	2280      	movs	r2, #128	; 0x80
 80035b4:	0112      	lsls	r2, r2, #4
 80035b6:	601a      	str	r2, [r3, #0]
	  POWER_ACTIVE.Mode  = GPIO_MODE_OUTPUT_PP;
 80035b8:	193b      	adds	r3, r7, r4
 80035ba:	2201      	movs	r2, #1
 80035bc:	605a      	str	r2, [r3, #4]


	 int measureAttempt = 0;
 80035be:	2300      	movs	r3, #0
 80035c0:	61fb      	str	r3, [r7, #28]
	 resetMeasure(&tabToPrint[0], 4); 							//Reset the return array
 80035c2:	4b39      	ldr	r3, [pc, #228]	; (80036a8 <readUart+0x100>)
 80035c4:	2104      	movs	r1, #4
 80035c6:	0018      	movs	r0, r3
 80035c8:	f000 f884 	bl	80036d4 <resetMeasure>
	 HAL_GPIO_WritePin(GPIOA, POWER_ACTIVE.Pin, GPIO_PIN_SET);  //Set on the ultrasonic sensor
 80035cc:	193b      	adds	r3, r7, r4
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	b299      	uxth	r1, r3
 80035d2:	23a0      	movs	r3, #160	; 0xa0
 80035d4:	05db      	lsls	r3, r3, #23
 80035d6:	2201      	movs	r2, #1
 80035d8:	0018      	movs	r0, r3
 80035da:	f001 f969 	bl	80048b0 <HAL_GPIO_WritePin>
	 	HAL_Delay(50);											//
 80035de:	2032      	movs	r0, #50	; 0x32
 80035e0:	f000 fc7e 	bl	8003ee0 <HAL_Delay>

	 log_info("Start the measure !\r\n");
 80035e4:	4b31      	ldr	r3, [pc, #196]	; (80036ac <readUart+0x104>)
 80035e6:	0018      	movs	r0, r3
 80035e8:	f018 fa54 	bl	801ba94 <log_info>
	 while(measureAttempt < numberMeasure){
 80035ec:	e00b      	b.n	8003606 <readUart+0x5e>
	 	HAL_UART_Receive_IT(&huart1, &byte, 1); 				//start measure, result is into tabToPrint
 80035ee:	4930      	ldr	r1, [pc, #192]	; (80036b0 <readUart+0x108>)
 80035f0:	4b30      	ldr	r3, [pc, #192]	; (80036b4 <readUart+0x10c>)
 80035f2:	2201      	movs	r2, #1
 80035f4:	0018      	movs	r0, r3
 80035f6:	f003 fa6b 	bl	8006ad0 <HAL_UART_Receive_IT>
	 	HAL_Delay(50);											//
 80035fa:	2032      	movs	r0, #50	; 0x32
 80035fc:	f000 fc70 	bl	8003ee0 <HAL_Delay>
		#if debugUart											//DEBUG
	 	log_info("Measure #%d : ", measureAttempt);				//Print all 90 measure
	 		HAL_UART_Transmit(&huart2, &tabToPrint[0], 5, 500); //
	 		log_info("\n\r");									//
		#endif
	 	measureAttempt++;
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	3301      	adds	r3, #1
 8003604:	61fb      	str	r3, [r7, #28]
	 while(measureAttempt < numberMeasure){
 8003606:	4b2c      	ldr	r3, [pc, #176]	; (80036b8 <readUart+0x110>)
 8003608:	781b      	ldrb	r3, [r3, #0]
 800360a:	001a      	movs	r2, r3
 800360c:	69fb      	ldr	r3, [r7, #28]
 800360e:	4293      	cmp	r3, r2
 8003610:	dbed      	blt.n	80035ee <readUart+0x46>
	 }

	 HAL_GPIO_WritePin(GPIOA, POWER_ACTIVE.Pin, GPIO_PIN_RESET);//PowerOff the sensor
 8003612:	2308      	movs	r3, #8
 8003614:	18fb      	adds	r3, r7, r3
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	b299      	uxth	r1, r3
 800361a:	23a0      	movs	r3, #160	; 0xa0
 800361c:	05db      	lsls	r3, r3, #23
 800361e:	2200      	movs	r2, #0
 8003620:	0018      	movs	r0, r3
 8003622:	f001 f945 	bl	80048b0 <HAL_GPIO_WritePin>

     uint8_t tabToConvert[4];									//remove first 'R' char
	 tabToConvert[0] = tabToPrint[1];							//
 8003626:	4b20      	ldr	r3, [pc, #128]	; (80036a8 <readUart+0x100>)
 8003628:	785a      	ldrb	r2, [r3, #1]
 800362a:	1d3b      	adds	r3, r7, #4
 800362c:	701a      	strb	r2, [r3, #0]
	 tabToConvert[1] = tabToPrint[2];							//
 800362e:	4b1e      	ldr	r3, [pc, #120]	; (80036a8 <readUart+0x100>)
 8003630:	789a      	ldrb	r2, [r3, #2]
 8003632:	1d3b      	adds	r3, r7, #4
 8003634:	705a      	strb	r2, [r3, #1]
	 tabToConvert[2] = tabToPrint[3];							//
 8003636:	4b1c      	ldr	r3, [pc, #112]	; (80036a8 <readUart+0x100>)
 8003638:	78da      	ldrb	r2, [r3, #3]
 800363a:	1d3b      	adds	r3, r7, #4
 800363c:	709a      	strb	r2, [r3, #2]
	 tabToConvert[3] = tabToPrint[4];							//
 800363e:	4b1a      	ldr	r3, [pc, #104]	; (80036a8 <readUart+0x100>)
 8003640:	791a      	ldrb	r2, [r3, #4]
 8003642:	1d3b      	adds	r3, r7, #4
 8003644:	70da      	strb	r2, [r3, #3]


	 sscanf(tabToConvert, "%d", &measureUart);					//convert char[] to int
 8003646:	4a1d      	ldr	r2, [pc, #116]	; (80036bc <readUart+0x114>)
 8003648:	491d      	ldr	r1, [pc, #116]	; (80036c0 <readUart+0x118>)
 800364a:	1d3b      	adds	r3, r7, #4
 800364c:	0018      	movs	r0, r3
 800364e:	f01a fded 	bl	801e22c <siscanf>
	 log_info("Final measure : %d", measureUart);				//print final measure
 8003652:	4b1a      	ldr	r3, [pc, #104]	; (80036bc <readUart+0x114>)
 8003654:	881b      	ldrh	r3, [r3, #0]
 8003656:	001a      	movs	r2, r3
 8003658:	4b1a      	ldr	r3, [pc, #104]	; (80036c4 <readUart+0x11c>)
 800365a:	0011      	movs	r1, r2
 800365c:	0018      	movs	r0, r3
 800365e:	f018 fa19 	bl	801ba94 <log_info>


	 if(measureUart==0 || measureUart<=500 || measureUart>=5000 || measureUart == 4999){	//check if the measure is valid or not
 8003662:	4b16      	ldr	r3, [pc, #88]	; (80036bc <readUart+0x114>)
 8003664:	881b      	ldrh	r3, [r3, #0]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d00f      	beq.n	800368a <readUart+0xe2>
 800366a:	4b14      	ldr	r3, [pc, #80]	; (80036bc <readUart+0x114>)
 800366c:	881a      	ldrh	r2, [r3, #0]
 800366e:	23fa      	movs	r3, #250	; 0xfa
 8003670:	005b      	lsls	r3, r3, #1
 8003672:	429a      	cmp	r2, r3
 8003674:	d909      	bls.n	800368a <readUart+0xe2>
 8003676:	4b11      	ldr	r3, [pc, #68]	; (80036bc <readUart+0x114>)
 8003678:	881b      	ldrh	r3, [r3, #0]
 800367a:	4a13      	ldr	r2, [pc, #76]	; (80036c8 <readUart+0x120>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d804      	bhi.n	800368a <readUart+0xe2>
 8003680:	4b0e      	ldr	r3, [pc, #56]	; (80036bc <readUart+0x114>)
 8003682:	881b      	ldrh	r3, [r3, #0]
 8003684:	4a10      	ldr	r2, [pc, #64]	; (80036c8 <readUart+0x120>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d105      	bne.n	8003696 <readUart+0xee>
		log_info(" Measure is not valid\r\n");
 800368a:	4b10      	ldr	r3, [pc, #64]	; (80036cc <readUart+0x124>)
 800368c:	0018      	movs	r0, r3
 800368e:	f018 fa01 	bl	801ba94 <log_info>
	 	return 0;
 8003692:	2300      	movs	r3, #0
 8003694:	e004      	b.n	80036a0 <readUart+0xf8>
	 }else{
	 	log_info(" Measure is valid\r\n");
 8003696:	4b0e      	ldr	r3, [pc, #56]	; (80036d0 <readUart+0x128>)
 8003698:	0018      	movs	r0, r3
 800369a:	f018 f9fb 	bl	801ba94 <log_info>
	 	return 1;
 800369e:	2301      	movs	r3, #1
	 }


}
 80036a0:	0018      	movs	r0, r3
 80036a2:	46bd      	mov	sp, r7
 80036a4:	b009      	add	sp, #36	; 0x24
 80036a6:	bd90      	pop	{r4, r7, pc}
 80036a8:	200016e0 	.word	0x200016e0
 80036ac:	0801f844 	.word	0x0801f844
 80036b0:	200016e5 	.word	0x200016e5
 80036b4:	2000135c 	.word	0x2000135c
 80036b8:	20000005 	.word	0x20000005
 80036bc:	20001358 	.word	0x20001358
 80036c0:	0801f85c 	.word	0x0801f85c
 80036c4:	0801f860 	.word	0x0801f860
 80036c8:	00001387 	.word	0x00001387
 80036cc:	0801f874 	.word	0x0801f874
 80036d0:	0801f88c 	.word	0x0801f88c

080036d4 <resetMeasure>:


/**
 * Reset the Uart Buffer
 */
void resetMeasure(uint8_t * array, uint8_t size){
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b084      	sub	sp, #16
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
 80036dc:	000a      	movs	r2, r1
 80036de:	1cfb      	adds	r3, r7, #3
 80036e0:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < size; i++){
 80036e2:	2300      	movs	r3, #0
 80036e4:	60fb      	str	r3, [r7, #12]
 80036e6:	e007      	b.n	80036f8 <resetMeasure+0x24>
		array[i] = 0x30; //Set to 0
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	687a      	ldr	r2, [r7, #4]
 80036ec:	18d3      	adds	r3, r2, r3
 80036ee:	2230      	movs	r2, #48	; 0x30
 80036f0:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < size; i++){
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	3301      	adds	r3, #1
 80036f6:	60fb      	str	r3, [r7, #12]
 80036f8:	1cfb      	adds	r3, r7, #3
 80036fa:	781b      	ldrb	r3, [r3, #0]
 80036fc:	68fa      	ldr	r2, [r7, #12]
 80036fe:	429a      	cmp	r2, r3
 8003700:	dbf2      	blt.n	80036e8 <resetMeasure+0x14>
	}
}
 8003702:	46c0      	nop			; (mov r8, r8)
 8003704:	46bd      	mov	sp, r7
 8003706:	b004      	add	sp, #16
 8003708:	bd80      	pop	{r7, pc}
	...

0800370c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b090      	sub	sp, #64	; 0x40
 8003710:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 8003712:	232c      	movs	r3, #44	; 0x2c
 8003714:	18fb      	adds	r3, r7, r3
 8003716:	0018      	movs	r0, r3
 8003718:	2314      	movs	r3, #20
 800371a:	001a      	movs	r2, r3
 800371c:	2100      	movs	r1, #0
 800371e:	f01a fd7d 	bl	801e21c <memset>
  RTC_DateTypeDef sDate = {0};
 8003722:	2328      	movs	r3, #40	; 0x28
 8003724:	18fb      	adds	r3, r7, r3
 8003726:	2200      	movs	r2, #0
 8003728:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 800372a:	003b      	movs	r3, r7
 800372c:	0018      	movs	r0, r3
 800372e:	2328      	movs	r3, #40	; 0x28
 8003730:	001a      	movs	r2, r3
 8003732:	2100      	movs	r1, #0
 8003734:	f01a fd72 	bl	801e21c <memset>

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003738:	4b46      	ldr	r3, [pc, #280]	; (8003854 <MX_RTC_Init+0x148>)
 800373a:	4a47      	ldr	r2, [pc, #284]	; (8003858 <MX_RTC_Init+0x14c>)
 800373c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800373e:	4b45      	ldr	r3, [pc, #276]	; (8003854 <MX_RTC_Init+0x148>)
 8003740:	2200      	movs	r2, #0
 8003742:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003744:	4b43      	ldr	r3, [pc, #268]	; (8003854 <MX_RTC_Init+0x148>)
 8003746:	227f      	movs	r2, #127	; 0x7f
 8003748:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800374a:	4b42      	ldr	r3, [pc, #264]	; (8003854 <MX_RTC_Init+0x148>)
 800374c:	22ff      	movs	r2, #255	; 0xff
 800374e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003750:	4b40      	ldr	r3, [pc, #256]	; (8003854 <MX_RTC_Init+0x148>)
 8003752:	2200      	movs	r2, #0
 8003754:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8003756:	4b3f      	ldr	r3, [pc, #252]	; (8003854 <MX_RTC_Init+0x148>)
 8003758:	2200      	movs	r2, #0
 800375a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800375c:	4b3d      	ldr	r3, [pc, #244]	; (8003854 <MX_RTC_Init+0x148>)
 800375e:	2200      	movs	r2, #0
 8003760:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003762:	4b3c      	ldr	r3, [pc, #240]	; (8003854 <MX_RTC_Init+0x148>)
 8003764:	2200      	movs	r2, #0
 8003766:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003768:	4b3a      	ldr	r3, [pc, #232]	; (8003854 <MX_RTC_Init+0x148>)
 800376a:	0018      	movs	r0, r3
 800376c:	f001 fff4 	bl	8005758 <HAL_RTC_Init>
 8003770:	1e03      	subs	r3, r0, #0
 8003772:	d001      	beq.n	8003778 <MX_RTC_Init+0x6c>
  {
    Error_Handler();
 8003774:	f7ff fc66 	bl	8003044 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8003778:	212c      	movs	r1, #44	; 0x2c
 800377a:	187b      	adds	r3, r7, r1
 800377c:	2200      	movs	r2, #0
 800377e:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 8003780:	187b      	adds	r3, r7, r1
 8003782:	2200      	movs	r2, #0
 8003784:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 8003786:	187b      	adds	r3, r7, r1
 8003788:	2200      	movs	r2, #0
 800378a:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800378c:	187b      	adds	r3, r7, r1
 800378e:	2200      	movs	r2, #0
 8003790:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003792:	187b      	adds	r3, r7, r1
 8003794:	2200      	movs	r2, #0
 8003796:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8003798:	1879      	adds	r1, r7, r1
 800379a:	4b2e      	ldr	r3, [pc, #184]	; (8003854 <MX_RTC_Init+0x148>)
 800379c:	2200      	movs	r2, #0
 800379e:	0018      	movs	r0, r3
 80037a0:	f002 f878 	bl	8005894 <HAL_RTC_SetTime>
 80037a4:	1e03      	subs	r3, r0, #0
 80037a6:	d001      	beq.n	80037ac <MX_RTC_Init+0xa0>
  {
    Error_Handler();
 80037a8:	f7ff fc4c 	bl	8003044 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80037ac:	2128      	movs	r1, #40	; 0x28
 80037ae:	187b      	adds	r3, r7, r1
 80037b0:	2201      	movs	r2, #1
 80037b2:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80037b4:	187b      	adds	r3, r7, r1
 80037b6:	2201      	movs	r2, #1
 80037b8:	705a      	strb	r2, [r3, #1]
  sDate.Date = 1;
 80037ba:	187b      	adds	r3, r7, r1
 80037bc:	2201      	movs	r2, #1
 80037be:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0;
 80037c0:	187b      	adds	r3, r7, r1
 80037c2:	2200      	movs	r2, #0
 80037c4:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80037c6:	1879      	adds	r1, r7, r1
 80037c8:	4b22      	ldr	r3, [pc, #136]	; (8003854 <MX_RTC_Init+0x148>)
 80037ca:	2200      	movs	r2, #0
 80037cc:	0018      	movs	r0, r3
 80037ce:	f002 f981 	bl	8005ad4 <HAL_RTC_SetDate>
 80037d2:	1e03      	subs	r3, r0, #0
 80037d4:	d001      	beq.n	80037da <MX_RTC_Init+0xce>
  {
    Error_Handler();
 80037d6:	f7ff fc35 	bl	8003044 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 80037da:	003b      	movs	r3, r7
 80037dc:	2200      	movs	r2, #0
 80037de:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0;
 80037e0:	003b      	movs	r3, r7
 80037e2:	2200      	movs	r2, #0
 80037e4:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0;
 80037e6:	003b      	movs	r3, r7
 80037e8:	2200      	movs	r2, #0
 80037ea:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 80037ec:	003b      	movs	r3, r7
 80037ee:	2200      	movs	r2, #0
 80037f0:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80037f2:	003b      	movs	r3, r7
 80037f4:	2200      	movs	r2, #0
 80037f6:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80037f8:	003b      	movs	r3, r7
 80037fa:	2200      	movs	r2, #0
 80037fc:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80037fe:	003b      	movs	r3, r7
 8003800:	2200      	movs	r2, #0
 8003802:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_NONE;
 8003804:	003b      	movs	r3, r7
 8003806:	22f0      	movs	r2, #240	; 0xf0
 8003808:	0512      	lsls	r2, r2, #20
 800380a:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800380c:	003b      	movs	r3, r7
 800380e:	2200      	movs	r2, #0
 8003810:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 1;
 8003812:	003b      	movs	r3, r7
 8003814:	2220      	movs	r2, #32
 8003816:	2101      	movs	r1, #1
 8003818:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 800381a:	003b      	movs	r3, r7
 800381c:	2280      	movs	r2, #128	; 0x80
 800381e:	0052      	lsls	r2, r2, #1
 8003820:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8003822:	0039      	movs	r1, r7
 8003824:	4b0b      	ldr	r3, [pc, #44]	; (8003854 <MX_RTC_Init+0x148>)
 8003826:	2200      	movs	r2, #0
 8003828:	0018      	movs	r0, r3
 800382a:	f002 fa4f 	bl	8005ccc <HAL_RTC_SetAlarm_IT>
 800382e:	1e03      	subs	r3, r0, #0
 8003830:	d001      	beq.n	8003836 <MX_RTC_Init+0x12a>
  {
    Error_Handler();
 8003832:	f7ff fc07 	bl	8003044 <Error_Handler>
  }
  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8003836:	4b07      	ldr	r3, [pc, #28]	; (8003854 <MX_RTC_Init+0x148>)
 8003838:	2200      	movs	r2, #0
 800383a:	2100      	movs	r1, #0
 800383c:	0018      	movs	r0, r3
 800383e:	f002 fc7f 	bl	8006140 <HAL_RTCEx_SetWakeUpTimer_IT>
 8003842:	1e03      	subs	r3, r0, #0
 8003844:	d001      	beq.n	800384a <MX_RTC_Init+0x13e>
  {
    Error_Handler();
 8003846:	f7ff fbfd 	bl	8003044 <Error_Handler>
  }

}
 800384a:	46c0      	nop			; (mov r8, r8)
 800384c:	46bd      	mov	sp, r7
 800384e:	b010      	add	sp, #64	; 0x40
 8003850:	bd80      	pop	{r7, pc}
 8003852:	46c0      	nop			; (mov r8, r8)
 8003854:	200013dc 	.word	0x200013dc
 8003858:	40002800 	.word	0x40002800

0800385c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b082      	sub	sp, #8
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a0a      	ldr	r2, [pc, #40]	; (8003894 <HAL_RTC_MspInit+0x38>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d10e      	bne.n	800388c <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800386e:	4b0a      	ldr	r3, [pc, #40]	; (8003898 <HAL_RTC_MspInit+0x3c>)
 8003870:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003872:	4b09      	ldr	r3, [pc, #36]	; (8003898 <HAL_RTC_MspInit+0x3c>)
 8003874:	2180      	movs	r1, #128	; 0x80
 8003876:	02c9      	lsls	r1, r1, #11
 8003878:	430a      	orrs	r2, r1
 800387a:	651a      	str	r2, [r3, #80]	; 0x50

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 800387c:	2200      	movs	r2, #0
 800387e:	2100      	movs	r1, #0
 8003880:	2002      	movs	r0, #2
 8003882:	f000 fe1d 	bl	80044c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8003886:	2002      	movs	r0, #2
 8003888:	f000 fe2f 	bl	80044ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800388c:	46c0      	nop			; (mov r8, r8)
 800388e:	46bd      	mov	sp, r7
 8003890:	b002      	add	sp, #8
 8003892:	bd80      	pop	{r7, pc}
 8003894:	40002800 	.word	0x40002800
 8003898:	40021000 	.word	0x40021000

0800389c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 80038a0:	4b18      	ldr	r3, [pc, #96]	; (8003904 <MX_SPI1_Init+0x68>)
 80038a2:	4a19      	ldr	r2, [pc, #100]	; (8003908 <MX_SPI1_Init+0x6c>)
 80038a4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80038a6:	4b17      	ldr	r3, [pc, #92]	; (8003904 <MX_SPI1_Init+0x68>)
 80038a8:	2282      	movs	r2, #130	; 0x82
 80038aa:	0052      	lsls	r2, r2, #1
 80038ac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80038ae:	4b15      	ldr	r3, [pc, #84]	; (8003904 <MX_SPI1_Init+0x68>)
 80038b0:	2200      	movs	r2, #0
 80038b2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80038b4:	4b13      	ldr	r3, [pc, #76]	; (8003904 <MX_SPI1_Init+0x68>)
 80038b6:	2200      	movs	r2, #0
 80038b8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80038ba:	4b12      	ldr	r3, [pc, #72]	; (8003904 <MX_SPI1_Init+0x68>)
 80038bc:	2200      	movs	r2, #0
 80038be:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80038c0:	4b10      	ldr	r3, [pc, #64]	; (8003904 <MX_SPI1_Init+0x68>)
 80038c2:	2200      	movs	r2, #0
 80038c4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80038c6:	4b0f      	ldr	r3, [pc, #60]	; (8003904 <MX_SPI1_Init+0x68>)
 80038c8:	2280      	movs	r2, #128	; 0x80
 80038ca:	0092      	lsls	r2, r2, #2
 80038cc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80038ce:	4b0d      	ldr	r3, [pc, #52]	; (8003904 <MX_SPI1_Init+0x68>)
 80038d0:	2220      	movs	r2, #32
 80038d2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80038d4:	4b0b      	ldr	r3, [pc, #44]	; (8003904 <MX_SPI1_Init+0x68>)
 80038d6:	2200      	movs	r2, #0
 80038d8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80038da:	4b0a      	ldr	r3, [pc, #40]	; (8003904 <MX_SPI1_Init+0x68>)
 80038dc:	2200      	movs	r2, #0
 80038de:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80038e0:	4b08      	ldr	r3, [pc, #32]	; (8003904 <MX_SPI1_Init+0x68>)
 80038e2:	2200      	movs	r2, #0
 80038e4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80038e6:	4b07      	ldr	r3, [pc, #28]	; (8003904 <MX_SPI1_Init+0x68>)
 80038e8:	2207      	movs	r2, #7
 80038ea:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80038ec:	4b05      	ldr	r3, [pc, #20]	; (8003904 <MX_SPI1_Init+0x68>)
 80038ee:	0018      	movs	r0, r3
 80038f0:	f002 fd1e 	bl	8006330 <HAL_SPI_Init>
 80038f4:	1e03      	subs	r3, r0, #0
 80038f6:	d001      	beq.n	80038fc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80038f8:	f7ff fba4 	bl	8003044 <Error_Handler>
  }

}
 80038fc:	46c0      	nop			; (mov r8, r8)
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
 8003902:	46c0      	nop			; (mov r8, r8)
 8003904:	20001458 	.word	0x20001458
 8003908:	40013000 	.word	0x40013000

0800390c <HAL_SPI_MspInit>:
  }

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800390c:	b590      	push	{r4, r7, lr}
 800390e:	b08b      	sub	sp, #44	; 0x2c
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003914:	2314      	movs	r3, #20
 8003916:	18fb      	adds	r3, r7, r3
 8003918:	0018      	movs	r0, r3
 800391a:	2314      	movs	r3, #20
 800391c:	001a      	movs	r2, r3
 800391e:	2100      	movs	r1, #0
 8003920:	f01a fc7c 	bl	801e21c <memset>
  if(spiHandle->Instance==SPI1)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a41      	ldr	r2, [pc, #260]	; (8003a30 <HAL_SPI_MspInit+0x124>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d14d      	bne.n	80039ca <HAL_SPI_MspInit+0xbe>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800392e:	4b41      	ldr	r3, [pc, #260]	; (8003a34 <HAL_SPI_MspInit+0x128>)
 8003930:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003932:	4b40      	ldr	r3, [pc, #256]	; (8003a34 <HAL_SPI_MspInit+0x128>)
 8003934:	2180      	movs	r1, #128	; 0x80
 8003936:	0149      	lsls	r1, r1, #5
 8003938:	430a      	orrs	r2, r1
 800393a:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800393c:	4b3d      	ldr	r3, [pc, #244]	; (8003a34 <HAL_SPI_MspInit+0x128>)
 800393e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003940:	4b3c      	ldr	r3, [pc, #240]	; (8003a34 <HAL_SPI_MspInit+0x128>)
 8003942:	2102      	movs	r1, #2
 8003944:	430a      	orrs	r2, r1
 8003946:	62da      	str	r2, [r3, #44]	; 0x2c
 8003948:	4b3a      	ldr	r3, [pc, #232]	; (8003a34 <HAL_SPI_MspInit+0x128>)
 800394a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800394c:	2202      	movs	r2, #2
 800394e:	4013      	ands	r3, r2
 8003950:	613b      	str	r3, [r7, #16]
 8003952:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003954:	4b37      	ldr	r3, [pc, #220]	; (8003a34 <HAL_SPI_MspInit+0x128>)
 8003956:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003958:	4b36      	ldr	r3, [pc, #216]	; (8003a34 <HAL_SPI_MspInit+0x128>)
 800395a:	2101      	movs	r1, #1
 800395c:	430a      	orrs	r2, r1
 800395e:	62da      	str	r2, [r3, #44]	; 0x2c
 8003960:	4b34      	ldr	r3, [pc, #208]	; (8003a34 <HAL_SPI_MspInit+0x128>)
 8003962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003964:	2201      	movs	r2, #1
 8003966:	4013      	ands	r3, r2
 8003968:	60fb      	str	r3, [r7, #12]
 800396a:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = RADIO_SCLK_Pin;
 800396c:	2114      	movs	r1, #20
 800396e:	187b      	adds	r3, r7, r1
 8003970:	2208      	movs	r2, #8
 8003972:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003974:	187b      	adds	r3, r7, r1
 8003976:	2202      	movs	r2, #2
 8003978:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800397a:	187b      	adds	r3, r7, r1
 800397c:	2200      	movs	r2, #0
 800397e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003980:	187b      	adds	r3, r7, r1
 8003982:	2203      	movs	r2, #3
 8003984:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8003986:	187b      	adds	r3, r7, r1
 8003988:	2200      	movs	r2, #0
 800398a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(RADIO_SCLK_GPIO_Port, &GPIO_InitStruct);
 800398c:	000c      	movs	r4, r1
 800398e:	187b      	adds	r3, r7, r1
 8003990:	4a29      	ldr	r2, [pc, #164]	; (8003a38 <HAL_SPI_MspInit+0x12c>)
 8003992:	0019      	movs	r1, r3
 8003994:	0010      	movs	r0, r2
 8003996:	f000 fe0d 	bl	80045b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RADIO_MOSI_Pin|RADIO_MISO_Pin;
 800399a:	0021      	movs	r1, r4
 800399c:	187b      	adds	r3, r7, r1
 800399e:	22c0      	movs	r2, #192	; 0xc0
 80039a0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039a2:	187b      	adds	r3, r7, r1
 80039a4:	2202      	movs	r2, #2
 80039a6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039a8:	187b      	adds	r3, r7, r1
 80039aa:	2200      	movs	r2, #0
 80039ac:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039ae:	187b      	adds	r3, r7, r1
 80039b0:	2203      	movs	r2, #3
 80039b2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80039b4:	187b      	adds	r3, r7, r1
 80039b6:	2200      	movs	r2, #0
 80039b8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039ba:	187a      	adds	r2, r7, r1
 80039bc:	23a0      	movs	r3, #160	; 0xa0
 80039be:	05db      	lsls	r3, r3, #23
 80039c0:	0011      	movs	r1, r2
 80039c2:	0018      	movs	r0, r3
 80039c4:	f000 fdf6 	bl	80045b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80039c8:	e02e      	b.n	8003a28 <HAL_SPI_MspInit+0x11c>
  else if(spiHandle->Instance==SPI2)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a1b      	ldr	r2, [pc, #108]	; (8003a3c <HAL_SPI_MspInit+0x130>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d129      	bne.n	8003a28 <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80039d4:	4b17      	ldr	r3, [pc, #92]	; (8003a34 <HAL_SPI_MspInit+0x128>)
 80039d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039d8:	4b16      	ldr	r3, [pc, #88]	; (8003a34 <HAL_SPI_MspInit+0x128>)
 80039da:	2180      	movs	r1, #128	; 0x80
 80039dc:	01c9      	lsls	r1, r1, #7
 80039de:	430a      	orrs	r2, r1
 80039e0:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039e2:	4b14      	ldr	r3, [pc, #80]	; (8003a34 <HAL_SPI_MspInit+0x128>)
 80039e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039e6:	4b13      	ldr	r3, [pc, #76]	; (8003a34 <HAL_SPI_MspInit+0x128>)
 80039e8:	2102      	movs	r1, #2
 80039ea:	430a      	orrs	r2, r1
 80039ec:	62da      	str	r2, [r3, #44]	; 0x2c
 80039ee:	4b11      	ldr	r3, [pc, #68]	; (8003a34 <HAL_SPI_MspInit+0x128>)
 80039f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f2:	2202      	movs	r2, #2
 80039f4:	4013      	ands	r3, r2
 80039f6:	60bb      	str	r3, [r7, #8]
 80039f8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_12;
 80039fa:	2114      	movs	r1, #20
 80039fc:	187b      	adds	r3, r7, r1
 80039fe:	22f0      	movs	r2, #240	; 0xf0
 8003a00:	0212      	lsls	r2, r2, #8
 8003a02:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a04:	187b      	adds	r3, r7, r1
 8003a06:	2202      	movs	r2, #2
 8003a08:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a0a:	187b      	adds	r3, r7, r1
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a10:	187b      	adds	r3, r7, r1
 8003a12:	2203      	movs	r2, #3
 8003a14:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8003a16:	187b      	adds	r3, r7, r1
 8003a18:	2200      	movs	r2, #0
 8003a1a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a1c:	187b      	adds	r3, r7, r1
 8003a1e:	4a06      	ldr	r2, [pc, #24]	; (8003a38 <HAL_SPI_MspInit+0x12c>)
 8003a20:	0019      	movs	r1, r3
 8003a22:	0010      	movs	r0, r2
 8003a24:	f000 fdc6 	bl	80045b4 <HAL_GPIO_Init>
}
 8003a28:	46c0      	nop			; (mov r8, r8)
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	b00b      	add	sp, #44	; 0x2c
 8003a2e:	bd90      	pop	{r4, r7, pc}
 8003a30:	40013000 	.word	0x40013000
 8003a34:	40021000 	.word	0x40021000
 8003a38:	50000400 	.word	0x50000400
 8003a3c:	40003800 	.word	0x40003800

08003a40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a44:	4b07      	ldr	r3, [pc, #28]	; (8003a64 <HAL_MspInit+0x24>)
 8003a46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a48:	4b06      	ldr	r3, [pc, #24]	; (8003a64 <HAL_MspInit+0x24>)
 8003a4a:	2101      	movs	r1, #1
 8003a4c:	430a      	orrs	r2, r1
 8003a4e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a50:	4b04      	ldr	r3, [pc, #16]	; (8003a64 <HAL_MspInit+0x24>)
 8003a52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a54:	4b03      	ldr	r3, [pc, #12]	; (8003a64 <HAL_MspInit+0x24>)
 8003a56:	2180      	movs	r1, #128	; 0x80
 8003a58:	0549      	lsls	r1, r1, #21
 8003a5a:	430a      	orrs	r2, r1
 8003a5c:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a5e:	46c0      	nop			; (mov r8, r8)
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}
 8003a64:	40021000 	.word	0x40021000

08003a68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003a6c:	46c0      	nop			; (mov r8, r8)
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}

08003a72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a72:	b580      	push	{r7, lr}
 8003a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a76:	e7fe      	b.n	8003a76 <HardFault_Handler+0x4>

08003a78 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003a7c:	46c0      	nop			; (mov r8, r8)
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}

08003a82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003a82:	b580      	push	{r7, lr}
 8003a84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003a86:	46c0      	nop			; (mov r8, r8)
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}

08003a8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003a90:	f01a fab6 	bl	801e000 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003a94:	46c0      	nop			; (mov r8, r8)
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}
	...

08003a9c <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8003aa0:	4b05      	ldr	r3, [pc, #20]	; (8003ab8 <RTC_IRQHandler+0x1c>)
 8003aa2:	0018      	movs	r0, r3
 8003aa4:	f002 fa5e 	bl	8005f64 <HAL_RTC_AlarmIRQHandler>
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8003aa8:	4b03      	ldr	r3, [pc, #12]	; (8003ab8 <RTC_IRQHandler+0x1c>)
 8003aaa:	0018      	movs	r0, r3
 8003aac:	f002 fc0e 	bl	80062cc <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8003ab0:	46c0      	nop			; (mov r8, r8)
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	46c0      	nop			; (mov r8, r8)
 8003ab8:	200013dc 	.word	0x200013dc

08003abc <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8003ac0:	2001      	movs	r0, #1
 8003ac2:	f000 ff13 	bl	80048ec <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8003ac6:	2002      	movs	r0, #2
 8003ac8:	f000 ff10 	bl	80048ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8003acc:	46c0      	nop			; (mov r8, r8)
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}

08003ad2 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8003ad2:	b580      	push	{r7, lr}
 8003ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8003ad6:	2010      	movs	r0, #16
 8003ad8:	f000 ff08 	bl	80048ec <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003adc:	2380      	movs	r3, #128	; 0x80
 8003ade:	019b      	lsls	r3, r3, #6
 8003ae0:	0018      	movs	r0, r3
 8003ae2:	f000 ff03 	bl	80048ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8003ae6:	46c0      	nop			; (mov r8, r8)
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}

08003aec <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003af0:	4b03      	ldr	r3, [pc, #12]	; (8003b00 <USART1_IRQHandler+0x14>)
 8003af2:	0018      	movs	r0, r3
 8003af4:	f003 f8a4 	bl	8006c40 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003af8:	46c0      	nop			; (mov r8, r8)
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	46c0      	nop			; (mov r8, r8)
 8003b00:	2000135c 	.word	0x2000135c

08003b04 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003b08:	4b03      	ldr	r3, [pc, #12]	; (8003b18 <USART2_IRQHandler+0x14>)
 8003b0a:	0018      	movs	r0, r3
 8003b0c:	f003 f898 	bl	8006c40 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003b10:	46c0      	nop			; (mov r8, r8)
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
 8003b16:	46c0      	nop			; (mov r8, r8)
 8003b18:	200014b0 	.word	0x200014b0

08003b1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b086      	sub	sp, #24
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003b24:	4a14      	ldr	r2, [pc, #80]	; (8003b78 <_sbrk+0x5c>)
 8003b26:	4b15      	ldr	r3, [pc, #84]	; (8003b7c <_sbrk+0x60>)
 8003b28:	1ad3      	subs	r3, r2, r3
 8003b2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003b30:	4b13      	ldr	r3, [pc, #76]	; (8003b80 <_sbrk+0x64>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d102      	bne.n	8003b3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003b38:	4b11      	ldr	r3, [pc, #68]	; (8003b80 <_sbrk+0x64>)
 8003b3a:	4a12      	ldr	r2, [pc, #72]	; (8003b84 <_sbrk+0x68>)
 8003b3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003b3e:	4b10      	ldr	r3, [pc, #64]	; (8003b80 <_sbrk+0x64>)
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	18d3      	adds	r3, r2, r3
 8003b46:	693a      	ldr	r2, [r7, #16]
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d207      	bcs.n	8003b5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003b4c:	f01a fb20 	bl	801e190 <__errno>
 8003b50:	0003      	movs	r3, r0
 8003b52:	220c      	movs	r2, #12
 8003b54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003b56:	2301      	movs	r3, #1
 8003b58:	425b      	negs	r3, r3
 8003b5a:	e009      	b.n	8003b70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003b5c:	4b08      	ldr	r3, [pc, #32]	; (8003b80 <_sbrk+0x64>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003b62:	4b07      	ldr	r3, [pc, #28]	; (8003b80 <_sbrk+0x64>)
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	18d2      	adds	r2, r2, r3
 8003b6a:	4b05      	ldr	r3, [pc, #20]	; (8003b80 <_sbrk+0x64>)
 8003b6c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
}
 8003b70:	0018      	movs	r0, r3
 8003b72:	46bd      	mov	sp, r7
 8003b74:	b006      	add	sp, #24
 8003b76:	bd80      	pop	{r7, pc}
 8003b78:	20005000 	.word	0x20005000
 8003b7c:	00000400 	.word	0x00000400
 8003b80:	200002a8 	.word	0x200002a8
 8003b84:	20001740 	.word	0x20001740

08003b88 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8003b8c:	4b17      	ldr	r3, [pc, #92]	; (8003bec <SystemInit+0x64>)
 8003b8e:	681a      	ldr	r2, [r3, #0]
 8003b90:	4b16      	ldr	r3, [pc, #88]	; (8003bec <SystemInit+0x64>)
 8003b92:	2180      	movs	r1, #128	; 0x80
 8003b94:	0049      	lsls	r1, r1, #1
 8003b96:	430a      	orrs	r2, r1
 8003b98:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8003b9a:	4b14      	ldr	r3, [pc, #80]	; (8003bec <SystemInit+0x64>)
 8003b9c:	68da      	ldr	r2, [r3, #12]
 8003b9e:	4b13      	ldr	r3, [pc, #76]	; (8003bec <SystemInit+0x64>)
 8003ba0:	4913      	ldr	r1, [pc, #76]	; (8003bf0 <SystemInit+0x68>)
 8003ba2:	400a      	ands	r2, r1
 8003ba4:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8003ba6:	4b11      	ldr	r3, [pc, #68]	; (8003bec <SystemInit+0x64>)
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	4b10      	ldr	r3, [pc, #64]	; (8003bec <SystemInit+0x64>)
 8003bac:	4911      	ldr	r1, [pc, #68]	; (8003bf4 <SystemInit+0x6c>)
 8003bae:	400a      	ands	r2, r1
 8003bb0:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8003bb2:	4b0e      	ldr	r3, [pc, #56]	; (8003bec <SystemInit+0x64>)
 8003bb4:	689a      	ldr	r2, [r3, #8]
 8003bb6:	4b0d      	ldr	r3, [pc, #52]	; (8003bec <SystemInit+0x64>)
 8003bb8:	2101      	movs	r1, #1
 8003bba:	438a      	bics	r2, r1
 8003bbc:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8003bbe:	4b0b      	ldr	r3, [pc, #44]	; (8003bec <SystemInit+0x64>)
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	4b0a      	ldr	r3, [pc, #40]	; (8003bec <SystemInit+0x64>)
 8003bc4:	490c      	ldr	r1, [pc, #48]	; (8003bf8 <SystemInit+0x70>)
 8003bc6:	400a      	ands	r2, r1
 8003bc8:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8003bca:	4b08      	ldr	r3, [pc, #32]	; (8003bec <SystemInit+0x64>)
 8003bcc:	68da      	ldr	r2, [r3, #12]
 8003bce:	4b07      	ldr	r3, [pc, #28]	; (8003bec <SystemInit+0x64>)
 8003bd0:	490a      	ldr	r1, [pc, #40]	; (8003bfc <SystemInit+0x74>)
 8003bd2:	400a      	ands	r2, r1
 8003bd4:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8003bd6:	4b05      	ldr	r3, [pc, #20]	; (8003bec <SystemInit+0x64>)
 8003bd8:	2200      	movs	r2, #0
 8003bda:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003bdc:	4b08      	ldr	r3, [pc, #32]	; (8003c00 <SystemInit+0x78>)
 8003bde:	2280      	movs	r2, #128	; 0x80
 8003be0:	0512      	lsls	r2, r2, #20
 8003be2:	609a      	str	r2, [r3, #8]
#endif
}
 8003be4:	46c0      	nop			; (mov r8, r8)
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	46c0      	nop			; (mov r8, r8)
 8003bec:	40021000 	.word	0x40021000
 8003bf0:	88ff400c 	.word	0x88ff400c
 8003bf4:	fef6fff6 	.word	0xfef6fff6
 8003bf8:	fffbffff 	.word	0xfffbffff
 8003bfc:	ff02ffff 	.word	0xff02ffff
 8003c00:	e000ed00 	.word	0xe000ed00

08003c04 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8003c08:	4b14      	ldr	r3, [pc, #80]	; (8003c5c <MX_USART1_UART_Init+0x58>)
 8003c0a:	4a15      	ldr	r2, [pc, #84]	; (8003c60 <MX_USART1_UART_Init+0x5c>)
 8003c0c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8003c0e:	4b13      	ldr	r3, [pc, #76]	; (8003c5c <MX_USART1_UART_Init+0x58>)
 8003c10:	2296      	movs	r2, #150	; 0x96
 8003c12:	0192      	lsls	r2, r2, #6
 8003c14:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003c16:	4b11      	ldr	r3, [pc, #68]	; (8003c5c <MX_USART1_UART_Init+0x58>)
 8003c18:	2200      	movs	r2, #0
 8003c1a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003c1c:	4b0f      	ldr	r3, [pc, #60]	; (8003c5c <MX_USART1_UART_Init+0x58>)
 8003c1e:	2200      	movs	r2, #0
 8003c20:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003c22:	4b0e      	ldr	r3, [pc, #56]	; (8003c5c <MX_USART1_UART_Init+0x58>)
 8003c24:	2200      	movs	r2, #0
 8003c26:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;//;
 8003c28:	4b0c      	ldr	r3, [pc, #48]	; (8003c5c <MX_USART1_UART_Init+0x58>)
 8003c2a:	220c      	movs	r2, #12
 8003c2c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003c2e:	4b0b      	ldr	r3, [pc, #44]	; (8003c5c <MX_USART1_UART_Init+0x58>)
 8003c30:	2200      	movs	r2, #0
 8003c32:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003c34:	4b09      	ldr	r3, [pc, #36]	; (8003c5c <MX_USART1_UART_Init+0x58>)
 8003c36:	2200      	movs	r2, #0
 8003c38:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003c3a:	4b08      	ldr	r3, [pc, #32]	; (8003c5c <MX_USART1_UART_Init+0x58>)
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	621a      	str	r2, [r3, #32]
  //huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_TXINVERT_INIT|UART_ADVFEATURE_RXINVERT_INIT;
  //huart1.AdvancedInit.TxPinLevelInvert = UART_ADVFEATURE_TXINV_ENABLE;
  //huart1.AdvancedInit.RxPinLevelInvert = UART_ADVFEATURE_RXINV_ENABLE;
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003c40:	4b06      	ldr	r3, [pc, #24]	; (8003c5c <MX_USART1_UART_Init+0x58>)
 8003c42:	2200      	movs	r2, #0
 8003c44:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003c46:	4b05      	ldr	r3, [pc, #20]	; (8003c5c <MX_USART1_UART_Init+0x58>)
 8003c48:	0018      	movs	r0, r3
 8003c4a:	f002 fe45 	bl	80068d8 <HAL_UART_Init>
 8003c4e:	1e03      	subs	r3, r0, #0
 8003c50:	d001      	beq.n	8003c56 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8003c52:	f7ff f9f7 	bl	8003044 <Error_Handler>
  }

}
 8003c56:	46c0      	nop			; (mov r8, r8)
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}
 8003c5c:	2000135c 	.word	0x2000135c
 8003c60:	40013800 	.word	0x40013800

08003c64 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8003c68:	4b14      	ldr	r3, [pc, #80]	; (8003cbc <MX_USART2_UART_Init+0x58>)
 8003c6a:	4a15      	ldr	r2, [pc, #84]	; (8003cc0 <MX_USART2_UART_Init+0x5c>)
 8003c6c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8003c6e:	4b13      	ldr	r3, [pc, #76]	; (8003cbc <MX_USART2_UART_Init+0x58>)
 8003c70:	2296      	movs	r2, #150	; 0x96
 8003c72:	0192      	lsls	r2, r2, #6
 8003c74:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003c76:	4b11      	ldr	r3, [pc, #68]	; (8003cbc <MX_USART2_UART_Init+0x58>)
 8003c78:	2200      	movs	r2, #0
 8003c7a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003c7c:	4b0f      	ldr	r3, [pc, #60]	; (8003cbc <MX_USART2_UART_Init+0x58>)
 8003c7e:	2200      	movs	r2, #0
 8003c80:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003c82:	4b0e      	ldr	r3, [pc, #56]	; (8003cbc <MX_USART2_UART_Init+0x58>)
 8003c84:	2200      	movs	r2, #0
 8003c86:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003c88:	4b0c      	ldr	r3, [pc, #48]	; (8003cbc <MX_USART2_UART_Init+0x58>)
 8003c8a:	220c      	movs	r2, #12
 8003c8c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003c8e:	4b0b      	ldr	r3, [pc, #44]	; (8003cbc <MX_USART2_UART_Init+0x58>)
 8003c90:	2200      	movs	r2, #0
 8003c92:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003c94:	4b09      	ldr	r3, [pc, #36]	; (8003cbc <MX_USART2_UART_Init+0x58>)
 8003c96:	2200      	movs	r2, #0
 8003c98:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003c9a:	4b08      	ldr	r3, [pc, #32]	; (8003cbc <MX_USART2_UART_Init+0x58>)
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003ca0:	4b06      	ldr	r3, [pc, #24]	; (8003cbc <MX_USART2_UART_Init+0x58>)
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003ca6:	4b05      	ldr	r3, [pc, #20]	; (8003cbc <MX_USART2_UART_Init+0x58>)
 8003ca8:	0018      	movs	r0, r3
 8003caa:	f002 fe15 	bl	80068d8 <HAL_UART_Init>
 8003cae:	1e03      	subs	r3, r0, #0
 8003cb0:	d001      	beq.n	8003cb6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8003cb2:	f7ff f9c7 	bl	8003044 <Error_Handler>
  }

}
 8003cb6:	46c0      	nop			; (mov r8, r8)
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}
 8003cbc:	200014b0 	.word	0x200014b0
 8003cc0:	40004400 	.word	0x40004400

08003cc4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b08a      	sub	sp, #40	; 0x28
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ccc:	2314      	movs	r3, #20
 8003cce:	18fb      	adds	r3, r7, r3
 8003cd0:	0018      	movs	r0, r3
 8003cd2:	2314      	movs	r3, #20
 8003cd4:	001a      	movs	r2, r3
 8003cd6:	2100      	movs	r1, #0
 8003cd8:	f01a faa0 	bl	801e21c <memset>
  if(uartHandle->Instance==USART1)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a38      	ldr	r2, [pc, #224]	; (8003dc4 <HAL_UART_MspInit+0x100>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d133      	bne.n	8003d4e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003ce6:	4b38      	ldr	r3, [pc, #224]	; (8003dc8 <HAL_UART_MspInit+0x104>)
 8003ce8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cea:	4b37      	ldr	r3, [pc, #220]	; (8003dc8 <HAL_UART_MspInit+0x104>)
 8003cec:	2180      	movs	r1, #128	; 0x80
 8003cee:	01c9      	lsls	r1, r1, #7
 8003cf0:	430a      	orrs	r2, r1
 8003cf2:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cf4:	4b34      	ldr	r3, [pc, #208]	; (8003dc8 <HAL_UART_MspInit+0x104>)
 8003cf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cf8:	4b33      	ldr	r3, [pc, #204]	; (8003dc8 <HAL_UART_MspInit+0x104>)
 8003cfa:	2101      	movs	r1, #1
 8003cfc:	430a      	orrs	r2, r1
 8003cfe:	62da      	str	r2, [r3, #44]	; 0x2c
 8003d00:	4b31      	ldr	r3, [pc, #196]	; (8003dc8 <HAL_UART_MspInit+0x104>)
 8003d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d04:	2201      	movs	r2, #1
 8003d06:	4013      	ands	r3, r2
 8003d08:	613b      	str	r3, [r7, #16]
 8003d0a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8003d0c:	2114      	movs	r1, #20
 8003d0e:	187b      	adds	r3, r7, r1
 8003d10:	22c0      	movs	r2, #192	; 0xc0
 8003d12:	00d2      	lsls	r2, r2, #3
 8003d14:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d16:	187b      	adds	r3, r7, r1
 8003d18:	2202      	movs	r2, #2
 8003d1a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d1c:	187b      	adds	r3, r7, r1
 8003d1e:	2200      	movs	r2, #0
 8003d20:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d22:	187b      	adds	r3, r7, r1
 8003d24:	2203      	movs	r2, #3
 8003d26:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8003d28:	187b      	adds	r3, r7, r1
 8003d2a:	2204      	movs	r2, #4
 8003d2c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d2e:	187a      	adds	r2, r7, r1
 8003d30:	23a0      	movs	r3, #160	; 0xa0
 8003d32:	05db      	lsls	r3, r3, #23
 8003d34:	0011      	movs	r1, r2
 8003d36:	0018      	movs	r0, r3
 8003d38:	f000 fc3c 	bl	80045b4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	2100      	movs	r1, #0
 8003d40:	201b      	movs	r0, #27
 8003d42:	f000 fbbd 	bl	80044c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003d46:	201b      	movs	r0, #27
 8003d48:	f000 fbcf 	bl	80044ea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003d4c:	e036      	b.n	8003dbc <HAL_UART_MspInit+0xf8>
  else if(uartHandle->Instance==USART2)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a1e      	ldr	r2, [pc, #120]	; (8003dcc <HAL_UART_MspInit+0x108>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d131      	bne.n	8003dbc <HAL_UART_MspInit+0xf8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003d58:	4b1b      	ldr	r3, [pc, #108]	; (8003dc8 <HAL_UART_MspInit+0x104>)
 8003d5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d5c:	4b1a      	ldr	r3, [pc, #104]	; (8003dc8 <HAL_UART_MspInit+0x104>)
 8003d5e:	2180      	movs	r1, #128	; 0x80
 8003d60:	0289      	lsls	r1, r1, #10
 8003d62:	430a      	orrs	r2, r1
 8003d64:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d66:	4b18      	ldr	r3, [pc, #96]	; (8003dc8 <HAL_UART_MspInit+0x104>)
 8003d68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d6a:	4b17      	ldr	r3, [pc, #92]	; (8003dc8 <HAL_UART_MspInit+0x104>)
 8003d6c:	2101      	movs	r1, #1
 8003d6e:	430a      	orrs	r2, r1
 8003d70:	62da      	str	r2, [r3, #44]	; 0x2c
 8003d72:	4b15      	ldr	r3, [pc, #84]	; (8003dc8 <HAL_UART_MspInit+0x104>)
 8003d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d76:	2201      	movs	r2, #1
 8003d78:	4013      	ands	r3, r2
 8003d7a:	60fb      	str	r3, [r7, #12]
 8003d7c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8003d7e:	2114      	movs	r1, #20
 8003d80:	187b      	adds	r3, r7, r1
 8003d82:	220c      	movs	r2, #12
 8003d84:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d86:	187b      	adds	r3, r7, r1
 8003d88:	2202      	movs	r2, #2
 8003d8a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP; //GPIO_NOPULL
 8003d8c:	187b      	adds	r3, r7, r1
 8003d8e:	2201      	movs	r2, #1
 8003d90:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d92:	187b      	adds	r3, r7, r1
 8003d94:	2203      	movs	r2, #3
 8003d96:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8003d98:	187b      	adds	r3, r7, r1
 8003d9a:	2204      	movs	r2, #4
 8003d9c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d9e:	187a      	adds	r2, r7, r1
 8003da0:	23a0      	movs	r3, #160	; 0xa0
 8003da2:	05db      	lsls	r3, r3, #23
 8003da4:	0011      	movs	r1, r2
 8003da6:	0018      	movs	r0, r3
 8003da8:	f000 fc04 	bl	80045b4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003dac:	2200      	movs	r2, #0
 8003dae:	2100      	movs	r1, #0
 8003db0:	201c      	movs	r0, #28
 8003db2:	f000 fb85 	bl	80044c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003db6:	201c      	movs	r0, #28
 8003db8:	f000 fb97 	bl	80044ea <HAL_NVIC_EnableIRQ>
}
 8003dbc:	46c0      	nop			; (mov r8, r8)
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	b00a      	add	sp, #40	; 0x28
 8003dc2:	bd80      	pop	{r7, pc}
 8003dc4:	40013800 	.word	0x40013800
 8003dc8:	40021000 	.word	0x40021000
 8003dcc:	40004400 	.word	0x40004400

08003dd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8003dd0:	480d      	ldr	r0, [pc, #52]	; (8003e08 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8003dd2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8003dd4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003dd6:	e003      	b.n	8003de0 <LoopCopyDataInit>

08003dd8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003dd8:	4b0c      	ldr	r3, [pc, #48]	; (8003e0c <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8003dda:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003ddc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003dde:	3104      	adds	r1, #4

08003de0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8003de0:	480b      	ldr	r0, [pc, #44]	; (8003e10 <LoopForever+0xa>)
  ldr  r3, =_edata
 8003de2:	4b0c      	ldr	r3, [pc, #48]	; (8003e14 <LoopForever+0xe>)
  adds  r2, r0, r1
 8003de4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003de6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003de8:	d3f6      	bcc.n	8003dd8 <CopyDataInit>
  ldr  r2, =_sbss
 8003dea:	4a0b      	ldr	r2, [pc, #44]	; (8003e18 <LoopForever+0x12>)
  b  LoopFillZerobss
 8003dec:	e002      	b.n	8003df4 <LoopFillZerobss>

08003dee <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8003dee:	2300      	movs	r3, #0
  str  r3, [r2]
 8003df0:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003df2:	3204      	adds	r2, #4

08003df4 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8003df4:	4b09      	ldr	r3, [pc, #36]	; (8003e1c <LoopForever+0x16>)
  cmp  r2, r3
 8003df6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003df8:	d3f9      	bcc.n	8003dee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003dfa:	f7ff fec5 	bl	8003b88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003dfe:	f01a f9cd 	bl	801e19c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003e02:	f7fe ff9f 	bl	8002d44 <main>

08003e06 <LoopForever>:

LoopForever:
    b LoopForever
 8003e06:	e7fe      	b.n	8003e06 <LoopForever>
   ldr   r0, =_estack
 8003e08:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 8003e0c:	080216d4 	.word	0x080216d4
  ldr  r0, =_sdata
 8003e10:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003e14:	20000288 	.word	0x20000288
  ldr  r2, =_sbss
 8003e18:	20000288 	.word	0x20000288
  ldr  r3, = _ebss
 8003e1c:	2000173c 	.word	0x2000173c

08003e20 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003e20:	e7fe      	b.n	8003e20 <ADC1_COMP_IRQHandler>
	...

08003e24 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b082      	sub	sp, #8
 8003e28:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003e2a:	1dfb      	adds	r3, r7, #7
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8003e30:	4b0b      	ldr	r3, [pc, #44]	; (8003e60 <HAL_Init+0x3c>)
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	4b0a      	ldr	r3, [pc, #40]	; (8003e60 <HAL_Init+0x3c>)
 8003e36:	2140      	movs	r1, #64	; 0x40
 8003e38:	430a      	orrs	r2, r1
 8003e3a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003e3c:	2000      	movs	r0, #0
 8003e3e:	f000 f811 	bl	8003e64 <HAL_InitTick>
 8003e42:	1e03      	subs	r3, r0, #0
 8003e44:	d003      	beq.n	8003e4e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8003e46:	1dfb      	adds	r3, r7, #7
 8003e48:	2201      	movs	r2, #1
 8003e4a:	701a      	strb	r2, [r3, #0]
 8003e4c:	e001      	b.n	8003e52 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003e4e:	f7ff fdf7 	bl	8003a40 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003e52:	1dfb      	adds	r3, r7, #7
 8003e54:	781b      	ldrb	r3, [r3, #0]
}
 8003e56:	0018      	movs	r0, r3
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	b002      	add	sp, #8
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	46c0      	nop			; (mov r8, r8)
 8003e60:	40022000 	.word	0x40022000

08003e64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003e64:	b590      	push	{r4, r7, lr}
 8003e66:	b083      	sub	sp, #12
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003e6c:	4b14      	ldr	r3, [pc, #80]	; (8003ec0 <HAL_InitTick+0x5c>)
 8003e6e:	681c      	ldr	r4, [r3, #0]
 8003e70:	4b14      	ldr	r3, [pc, #80]	; (8003ec4 <HAL_InitTick+0x60>)
 8003e72:	781b      	ldrb	r3, [r3, #0]
 8003e74:	0019      	movs	r1, r3
 8003e76:	23fa      	movs	r3, #250	; 0xfa
 8003e78:	0098      	lsls	r0, r3, #2
 8003e7a:	f7fc f94d 	bl	8000118 <__udivsi3>
 8003e7e:	0003      	movs	r3, r0
 8003e80:	0019      	movs	r1, r3
 8003e82:	0020      	movs	r0, r4
 8003e84:	f7fc f948 	bl	8000118 <__udivsi3>
 8003e88:	0003      	movs	r3, r0
 8003e8a:	0018      	movs	r0, r3
 8003e8c:	f000 fb3d 	bl	800450a <HAL_SYSTICK_Config>
 8003e90:	1e03      	subs	r3, r0, #0
 8003e92:	d001      	beq.n	8003e98 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	e00f      	b.n	8003eb8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2b03      	cmp	r3, #3
 8003e9c:	d80b      	bhi.n	8003eb6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003e9e:	6879      	ldr	r1, [r7, #4]
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	425b      	negs	r3, r3
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	0018      	movs	r0, r3
 8003ea8:	f000 fb0a 	bl	80044c0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003eac:	4b06      	ldr	r3, [pc, #24]	; (8003ec8 <HAL_InitTick+0x64>)
 8003eae:	687a      	ldr	r2, [r7, #4]
 8003eb0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	e000      	b.n	8003eb8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
}
 8003eb8:	0018      	movs	r0, r3
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	b003      	add	sp, #12
 8003ebe:	bd90      	pop	{r4, r7, pc}
 8003ec0:	2000005c 	.word	0x2000005c
 8003ec4:	20000064 	.word	0x20000064
 8003ec8:	20000060 	.word	0x20000060

08003ecc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	af00      	add	r7, sp, #0
  return uwTick;
 8003ed0:	4b02      	ldr	r3, [pc, #8]	; (8003edc <HAL_GetTick+0x10>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
}
 8003ed4:	0018      	movs	r0, r3
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}
 8003eda:	46c0      	nop			; (mov r8, r8)
 8003edc:	20001530 	.word	0x20001530

08003ee0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b084      	sub	sp, #16
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003ee8:	f7ff fff0 	bl	8003ecc <HAL_GetTick>
 8003eec:	0003      	movs	r3, r0
 8003eee:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	3301      	adds	r3, #1
 8003ef8:	d005      	beq.n	8003f06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003efa:	4b09      	ldr	r3, [pc, #36]	; (8003f20 <HAL_Delay+0x40>)
 8003efc:	781b      	ldrb	r3, [r3, #0]
 8003efe:	001a      	movs	r2, r3
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	189b      	adds	r3, r3, r2
 8003f04:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003f06:	46c0      	nop			; (mov r8, r8)
 8003f08:	f7ff ffe0 	bl	8003ecc <HAL_GetTick>
 8003f0c:	0002      	movs	r2, r0
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	68fa      	ldr	r2, [r7, #12]
 8003f14:	429a      	cmp	r2, r3
 8003f16:	d8f7      	bhi.n	8003f08 <HAL_Delay+0x28>
  {
  }
}
 8003f18:	46c0      	nop			; (mov r8, r8)
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	b004      	add	sp, #16
 8003f1e:	bd80      	pop	{r7, pc}
 8003f20:	20000064 	.word	0x20000064

08003f24 <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disables the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8003f28:	4b04      	ldr	r3, [pc, #16]	; (8003f3c <HAL_DBGMCU_DisableDBGStopMode+0x18>)
 8003f2a:	685a      	ldr	r2, [r3, #4]
 8003f2c:	4b03      	ldr	r3, [pc, #12]	; (8003f3c <HAL_DBGMCU_DisableDBGStopMode+0x18>)
 8003f2e:	2102      	movs	r1, #2
 8003f30:	438a      	bics	r2, r1
 8003f32:	605a      	str	r2, [r3, #4]
}
 8003f34:	46c0      	nop			; (mov r8, r8)
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	46c0      	nop			; (mov r8, r8)
 8003f3c:	40015800 	.word	0x40015800

08003f40 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b082      	sub	sp, #8
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d101      	bne.n	8003f52 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e159      	b.n	8004206 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d10a      	bne.n	8003f70 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2250      	movs	r2, #80	; 0x50
 8003f64:	2100      	movs	r1, #0
 8003f66:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	0018      	movs	r0, r3
 8003f6c:	f7fe fd32 	bl	80029d4 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f74:	2210      	movs	r2, #16
 8003f76:	4013      	ands	r3, r2
 8003f78:	2b10      	cmp	r3, #16
 8003f7a:	d005      	beq.n	8003f88 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	2204      	movs	r2, #4
 8003f84:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8003f86:	d00b      	beq.n	8003fa0 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f8c:	2210      	movs	r2, #16
 8003f8e:	431a      	orrs	r2, r3
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2250      	movs	r2, #80	; 0x50
 8003f98:	2100      	movs	r1, #0
 8003f9a:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	e132      	b.n	8004206 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fa4:	4a9a      	ldr	r2, [pc, #616]	; (8004210 <HAL_ADC_Init+0x2d0>)
 8003fa6:	4013      	ands	r3, r2
 8003fa8:	2202      	movs	r2, #2
 8003faa:	431a      	orrs	r2, r3
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	2203      	movs	r2, #3
 8003fb8:	4013      	ands	r3, r2
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	d108      	bne.n	8003fd0 <HAL_ADC_Init+0x90>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	4013      	ands	r3, r2
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d101      	bne.n	8003fd0 <HAL_ADC_Init+0x90>
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e000      	b.n	8003fd2 <HAL_ADC_Init+0x92>
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d149      	bne.n	800406a <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	685a      	ldr	r2, [r3, #4]
 8003fda:	23c0      	movs	r3, #192	; 0xc0
 8003fdc:	061b      	lsls	r3, r3, #24
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	d00b      	beq.n	8003ffa <HAL_ADC_Init+0xba>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	685a      	ldr	r2, [r3, #4]
 8003fe6:	2380      	movs	r3, #128	; 0x80
 8003fe8:	05db      	lsls	r3, r3, #23
 8003fea:	429a      	cmp	r2, r3
 8003fec:	d005      	beq.n	8003ffa <HAL_ADC_Init+0xba>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	685a      	ldr	r2, [r3, #4]
 8003ff2:	2380      	movs	r3, #128	; 0x80
 8003ff4:	061b      	lsls	r3, r3, #24
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d111      	bne.n	800401e <HAL_ADC_Init+0xde>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	691a      	ldr	r2, [r3, #16]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	0092      	lsls	r2, r2, #2
 8004006:	0892      	lsrs	r2, r2, #2
 8004008:	611a      	str	r2, [r3, #16]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	6919      	ldr	r1, [r3, #16]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	685a      	ldr	r2, [r3, #4]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	430a      	orrs	r2, r1
 800401a:	611a      	str	r2, [r3, #16]
 800401c:	e014      	b.n	8004048 <HAL_ADC_Init+0x108>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	691a      	ldr	r2, [r3, #16]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	0092      	lsls	r2, r2, #2
 800402a:	0892      	lsrs	r2, r2, #2
 800402c:	611a      	str	r2, [r3, #16]
 800402e:	4b79      	ldr	r3, [pc, #484]	; (8004214 <HAL_ADC_Init+0x2d4>)
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	4b78      	ldr	r3, [pc, #480]	; (8004214 <HAL_ADC_Init+0x2d4>)
 8004034:	4978      	ldr	r1, [pc, #480]	; (8004218 <HAL_ADC_Init+0x2d8>)
 8004036:	400a      	ands	r2, r1
 8004038:	601a      	str	r2, [r3, #0]
 800403a:	4b76      	ldr	r3, [pc, #472]	; (8004214 <HAL_ADC_Init+0x2d4>)
 800403c:	6819      	ldr	r1, [r3, #0]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	685a      	ldr	r2, [r3, #4]
 8004042:	4b74      	ldr	r3, [pc, #464]	; (8004214 <HAL_ADC_Init+0x2d4>)
 8004044:	430a      	orrs	r2, r1
 8004046:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	68da      	ldr	r2, [r3, #12]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	2118      	movs	r1, #24
 8004054:	438a      	bics	r2, r1
 8004056:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	68d9      	ldr	r1, [r3, #12]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	689a      	ldr	r2, [r3, #8]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	430a      	orrs	r2, r1
 8004068:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 800406a:	4b6a      	ldr	r3, [pc, #424]	; (8004214 <HAL_ADC_Init+0x2d4>)
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	4b69      	ldr	r3, [pc, #420]	; (8004214 <HAL_ADC_Init+0x2d4>)
 8004070:	496a      	ldr	r1, [pc, #424]	; (800421c <HAL_ADC_Init+0x2dc>)
 8004072:	400a      	ands	r2, r1
 8004074:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8004076:	4b67      	ldr	r3, [pc, #412]	; (8004214 <HAL_ADC_Init+0x2d4>)
 8004078:	6819      	ldr	r1, [r3, #0]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800407e:	065a      	lsls	r2, r3, #25
 8004080:	4b64      	ldr	r3, [pc, #400]	; (8004214 <HAL_ADC_Init+0x2d4>)
 8004082:	430a      	orrs	r2, r1
 8004084:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	689a      	ldr	r2, [r3, #8]
 800408c:	2380      	movs	r3, #128	; 0x80
 800408e:	055b      	lsls	r3, r3, #21
 8004090:	4013      	ands	r3, r2
 8004092:	d108      	bne.n	80040a6 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	689a      	ldr	r2, [r3, #8]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	2180      	movs	r1, #128	; 0x80
 80040a0:	0549      	lsls	r1, r1, #21
 80040a2:	430a      	orrs	r2, r1
 80040a4:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	68da      	ldr	r2, [r3, #12]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	495b      	ldr	r1, [pc, #364]	; (8004220 <HAL_ADC_Init+0x2e0>)
 80040b2:	400a      	ands	r2, r1
 80040b4:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	68d9      	ldr	r1, [r3, #12]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	691b      	ldr	r3, [r3, #16]
 80040c4:	2b02      	cmp	r3, #2
 80040c6:	d101      	bne.n	80040cc <HAL_ADC_Init+0x18c>
 80040c8:	2304      	movs	r3, #4
 80040ca:	e000      	b.n	80040ce <HAL_ADC_Init+0x18e>
 80040cc:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80040ce:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2020      	movs	r0, #32
 80040d4:	5c1b      	ldrb	r3, [r3, r0]
 80040d6:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80040d8:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	202c      	movs	r0, #44	; 0x2c
 80040de:	5c1b      	ldrb	r3, [r3, r0]
 80040e0:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80040e2:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80040e8:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	699b      	ldr	r3, [r3, #24]
 80040ee:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 80040f0:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	69db      	ldr	r3, [r3, #28]
 80040f6:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80040f8:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	430a      	orrs	r2, r1
 8004100:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004106:	23c2      	movs	r3, #194	; 0xc2
 8004108:	33ff      	adds	r3, #255	; 0xff
 800410a:	429a      	cmp	r2, r3
 800410c:	d00b      	beq.n	8004126 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	68d9      	ldr	r1, [r3, #12]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800411c:	431a      	orrs	r2, r3
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	430a      	orrs	r2, r1
 8004124:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2221      	movs	r2, #33	; 0x21
 800412a:	5c9b      	ldrb	r3, [r3, r2]
 800412c:	2b01      	cmp	r3, #1
 800412e:	d11a      	bne.n	8004166 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2220      	movs	r2, #32
 8004134:	5c9b      	ldrb	r3, [r3, r2]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d109      	bne.n	800414e <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	68da      	ldr	r2, [r3, #12]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	2180      	movs	r1, #128	; 0x80
 8004146:	0249      	lsls	r1, r1, #9
 8004148:	430a      	orrs	r2, r1
 800414a:	60da      	str	r2, [r3, #12]
 800414c:	e00b      	b.n	8004166 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004152:	2220      	movs	r2, #32
 8004154:	431a      	orrs	r2, r3
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800415e:	2201      	movs	r2, #1
 8004160:	431a      	orrs	r2, r3
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800416a:	2b01      	cmp	r3, #1
 800416c:	d11f      	bne.n	80041ae <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	691a      	ldr	r2, [r3, #16]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	492a      	ldr	r1, [pc, #168]	; (8004224 <HAL_ADC_Init+0x2e4>)
 800417a:	400a      	ands	r2, r1
 800417c:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	6919      	ldr	r1, [r3, #16]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 800418c:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 8004192:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	430a      	orrs	r2, r1
 800419a:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	691a      	ldr	r2, [r3, #16]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	2101      	movs	r1, #1
 80041a8:	430a      	orrs	r2, r1
 80041aa:	611a      	str	r2, [r3, #16]
 80041ac:	e00e      	b.n	80041cc <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	691b      	ldr	r3, [r3, #16]
 80041b4:	2201      	movs	r2, #1
 80041b6:	4013      	ands	r3, r2
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d107      	bne.n	80041cc <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	691a      	ldr	r2, [r3, #16]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	2101      	movs	r1, #1
 80041c8:	438a      	bics	r2, r1
 80041ca:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	695a      	ldr	r2, [r3, #20]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	2107      	movs	r1, #7
 80041d8:	438a      	bics	r2, r1
 80041da:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	6959      	ldr	r1, [r3, #20]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	430a      	orrs	r2, r1
 80041ec:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2200      	movs	r2, #0
 80041f2:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041f8:	2203      	movs	r2, #3
 80041fa:	4393      	bics	r3, r2
 80041fc:	2201      	movs	r2, #1
 80041fe:	431a      	orrs	r2, r3
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8004204:	2300      	movs	r3, #0
}
 8004206:	0018      	movs	r0, r3
 8004208:	46bd      	mov	sp, r7
 800420a:	b002      	add	sp, #8
 800420c:	bd80      	pop	{r7, pc}
 800420e:	46c0      	nop			; (mov r8, r8)
 8004210:	fffffefd 	.word	0xfffffefd
 8004214:	40012708 	.word	0x40012708
 8004218:	ffc3ffff 	.word	0xffc3ffff
 800421c:	fdffffff 	.word	0xfdffffff
 8004220:	fffe0219 	.word	0xfffe0219
 8004224:	fffffc03 	.word	0xfffffc03

08004228 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b082      	sub	sp, #8
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
 8004230:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2250      	movs	r2, #80	; 0x50
 8004236:	5c9b      	ldrb	r3, [r3, r2]
 8004238:	2b01      	cmp	r3, #1
 800423a:	d101      	bne.n	8004240 <HAL_ADC_ConfigChannel+0x18>
 800423c:	2302      	movs	r3, #2
 800423e:	e06c      	b.n	800431a <HAL_ADC_ConfigChannel+0xf2>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2250      	movs	r2, #80	; 0x50
 8004244:	2101      	movs	r1, #1
 8004246:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	2204      	movs	r2, #4
 8004250:	4013      	ands	r3, r2
 8004252:	d00b      	beq.n	800426c <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004258:	2220      	movs	r2, #32
 800425a:	431a      	orrs	r2, r3
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2250      	movs	r2, #80	; 0x50
 8004264:	2100      	movs	r1, #0
 8004266:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	e056      	b.n	800431a <HAL_ADC_ConfigChannel+0xf2>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	4a2c      	ldr	r2, [pc, #176]	; (8004324 <HAL_ADC_ConfigChannel+0xfc>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d028      	beq.n	80042c8 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	035b      	lsls	r3, r3, #13
 8004282:	0b5a      	lsrs	r2, r3, #13
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	430a      	orrs	r2, r1
 800428a:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	2380      	movs	r3, #128	; 0x80
 8004292:	02db      	lsls	r3, r3, #11
 8004294:	4013      	ands	r3, r2
 8004296:	d009      	beq.n	80042ac <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 8004298:	4b23      	ldr	r3, [pc, #140]	; (8004328 <HAL_ADC_ConfigChannel+0x100>)
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	4b22      	ldr	r3, [pc, #136]	; (8004328 <HAL_ADC_ConfigChannel+0x100>)
 800429e:	2180      	movs	r1, #128	; 0x80
 80042a0:	0409      	lsls	r1, r1, #16
 80042a2:	430a      	orrs	r2, r1
 80042a4:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 80042a6:	200a      	movs	r0, #10
 80042a8:	f000 f844 	bl	8004334 <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	2380      	movs	r3, #128	; 0x80
 80042b2:	029b      	lsls	r3, r3, #10
 80042b4:	4013      	ands	r3, r2
 80042b6:	d02b      	beq.n	8004310 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 80042b8:	4b1b      	ldr	r3, [pc, #108]	; (8004328 <HAL_ADC_ConfigChannel+0x100>)
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	4b1a      	ldr	r3, [pc, #104]	; (8004328 <HAL_ADC_ConfigChannel+0x100>)
 80042be:	2180      	movs	r1, #128	; 0x80
 80042c0:	03c9      	lsls	r1, r1, #15
 80042c2:	430a      	orrs	r2, r1
 80042c4:	601a      	str	r2, [r3, #0]
 80042c6:	e023      	b.n	8004310 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	035b      	lsls	r3, r3, #13
 80042d4:	0b5b      	lsrs	r3, r3, #13
 80042d6:	43d9      	mvns	r1, r3
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	400a      	ands	r2, r1
 80042de:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	2380      	movs	r3, #128	; 0x80
 80042e6:	02db      	lsls	r3, r3, #11
 80042e8:	4013      	ands	r3, r2
 80042ea:	d005      	beq.n	80042f8 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 80042ec:	4b0e      	ldr	r3, [pc, #56]	; (8004328 <HAL_ADC_ConfigChannel+0x100>)
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	4b0d      	ldr	r3, [pc, #52]	; (8004328 <HAL_ADC_ConfigChannel+0x100>)
 80042f2:	490e      	ldr	r1, [pc, #56]	; (800432c <HAL_ADC_ConfigChannel+0x104>)
 80042f4:	400a      	ands	r2, r1
 80042f6:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	2380      	movs	r3, #128	; 0x80
 80042fe:	029b      	lsls	r3, r3, #10
 8004300:	4013      	ands	r3, r2
 8004302:	d005      	beq.n	8004310 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8004304:	4b08      	ldr	r3, [pc, #32]	; (8004328 <HAL_ADC_ConfigChannel+0x100>)
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	4b07      	ldr	r3, [pc, #28]	; (8004328 <HAL_ADC_ConfigChannel+0x100>)
 800430a:	4909      	ldr	r1, [pc, #36]	; (8004330 <HAL_ADC_ConfigChannel+0x108>)
 800430c:	400a      	ands	r2, r1
 800430e:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2250      	movs	r2, #80	; 0x50
 8004314:	2100      	movs	r1, #0
 8004316:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 8004318:	2300      	movs	r3, #0
}
 800431a:	0018      	movs	r0, r3
 800431c:	46bd      	mov	sp, r7
 800431e:	b002      	add	sp, #8
 8004320:	bd80      	pop	{r7, pc}
 8004322:	46c0      	nop			; (mov r8, r8)
 8004324:	00001001 	.word	0x00001001
 8004328:	40012708 	.word	0x40012708
 800432c:	ff7fffff 	.word	0xff7fffff
 8004330:	ffbfffff 	.word	0xffbfffff

08004334 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b084      	sub	sp, #16
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 800433c:	4b0a      	ldr	r3, [pc, #40]	; (8004368 <ADC_DelayMicroSecond+0x34>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	490a      	ldr	r1, [pc, #40]	; (800436c <ADC_DelayMicroSecond+0x38>)
 8004342:	0018      	movs	r0, r3
 8004344:	f7fb fee8 	bl	8000118 <__udivsi3>
 8004348:	0003      	movs	r3, r0
 800434a:	001a      	movs	r2, r3
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	4353      	muls	r3, r2
 8004350:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 8004352:	e002      	b.n	800435a <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	3b01      	subs	r3, #1
 8004358:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d1f9      	bne.n	8004354 <ADC_DelayMicroSecond+0x20>
  } 
}
 8004360:	46c0      	nop			; (mov r8, r8)
 8004362:	46bd      	mov	sp, r7
 8004364:	b004      	add	sp, #16
 8004366:	bd80      	pop	{r7, pc}
 8004368:	2000005c 	.word	0x2000005c
 800436c:	000f4240 	.word	0x000f4240

08004370 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b082      	sub	sp, #8
 8004374:	af00      	add	r7, sp, #0
 8004376:	0002      	movs	r2, r0
 8004378:	1dfb      	adds	r3, r7, #7
 800437a:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800437c:	1dfb      	adds	r3, r7, #7
 800437e:	781b      	ldrb	r3, [r3, #0]
 8004380:	001a      	movs	r2, r3
 8004382:	231f      	movs	r3, #31
 8004384:	401a      	ands	r2, r3
 8004386:	4b04      	ldr	r3, [pc, #16]	; (8004398 <NVIC_EnableIRQ+0x28>)
 8004388:	2101      	movs	r1, #1
 800438a:	4091      	lsls	r1, r2
 800438c:	000a      	movs	r2, r1
 800438e:	601a      	str	r2, [r3, #0]
}
 8004390:	46c0      	nop			; (mov r8, r8)
 8004392:	46bd      	mov	sp, r7
 8004394:	b002      	add	sp, #8
 8004396:	bd80      	pop	{r7, pc}
 8004398:	e000e100 	.word	0xe000e100

0800439c <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800439c:	b590      	push	{r4, r7, lr}
 800439e:	b083      	sub	sp, #12
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	0002      	movs	r2, r0
 80043a4:	6039      	str	r1, [r7, #0]
 80043a6:	1dfb      	adds	r3, r7, #7
 80043a8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 80043aa:	1dfb      	adds	r3, r7, #7
 80043ac:	781b      	ldrb	r3, [r3, #0]
 80043ae:	2b7f      	cmp	r3, #127	; 0x7f
 80043b0:	d932      	bls.n	8004418 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80043b2:	4a2f      	ldr	r2, [pc, #188]	; (8004470 <NVIC_SetPriority+0xd4>)
 80043b4:	1dfb      	adds	r3, r7, #7
 80043b6:	781b      	ldrb	r3, [r3, #0]
 80043b8:	0019      	movs	r1, r3
 80043ba:	230f      	movs	r3, #15
 80043bc:	400b      	ands	r3, r1
 80043be:	3b08      	subs	r3, #8
 80043c0:	089b      	lsrs	r3, r3, #2
 80043c2:	3306      	adds	r3, #6
 80043c4:	009b      	lsls	r3, r3, #2
 80043c6:	18d3      	adds	r3, r2, r3
 80043c8:	3304      	adds	r3, #4
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	1dfa      	adds	r2, r7, #7
 80043ce:	7812      	ldrb	r2, [r2, #0]
 80043d0:	0011      	movs	r1, r2
 80043d2:	2203      	movs	r2, #3
 80043d4:	400a      	ands	r2, r1
 80043d6:	00d2      	lsls	r2, r2, #3
 80043d8:	21ff      	movs	r1, #255	; 0xff
 80043da:	4091      	lsls	r1, r2
 80043dc:	000a      	movs	r2, r1
 80043de:	43d2      	mvns	r2, r2
 80043e0:	401a      	ands	r2, r3
 80043e2:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	019b      	lsls	r3, r3, #6
 80043e8:	22ff      	movs	r2, #255	; 0xff
 80043ea:	401a      	ands	r2, r3
 80043ec:	1dfb      	adds	r3, r7, #7
 80043ee:	781b      	ldrb	r3, [r3, #0]
 80043f0:	0018      	movs	r0, r3
 80043f2:	2303      	movs	r3, #3
 80043f4:	4003      	ands	r3, r0
 80043f6:	00db      	lsls	r3, r3, #3
 80043f8:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80043fa:	481d      	ldr	r0, [pc, #116]	; (8004470 <NVIC_SetPriority+0xd4>)
 80043fc:	1dfb      	adds	r3, r7, #7
 80043fe:	781b      	ldrb	r3, [r3, #0]
 8004400:	001c      	movs	r4, r3
 8004402:	230f      	movs	r3, #15
 8004404:	4023      	ands	r3, r4
 8004406:	3b08      	subs	r3, #8
 8004408:	089b      	lsrs	r3, r3, #2
 800440a:	430a      	orrs	r2, r1
 800440c:	3306      	adds	r3, #6
 800440e:	009b      	lsls	r3, r3, #2
 8004410:	18c3      	adds	r3, r0, r3
 8004412:	3304      	adds	r3, #4
 8004414:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004416:	e027      	b.n	8004468 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004418:	4a16      	ldr	r2, [pc, #88]	; (8004474 <NVIC_SetPriority+0xd8>)
 800441a:	1dfb      	adds	r3, r7, #7
 800441c:	781b      	ldrb	r3, [r3, #0]
 800441e:	b25b      	sxtb	r3, r3
 8004420:	089b      	lsrs	r3, r3, #2
 8004422:	33c0      	adds	r3, #192	; 0xc0
 8004424:	009b      	lsls	r3, r3, #2
 8004426:	589b      	ldr	r3, [r3, r2]
 8004428:	1dfa      	adds	r2, r7, #7
 800442a:	7812      	ldrb	r2, [r2, #0]
 800442c:	0011      	movs	r1, r2
 800442e:	2203      	movs	r2, #3
 8004430:	400a      	ands	r2, r1
 8004432:	00d2      	lsls	r2, r2, #3
 8004434:	21ff      	movs	r1, #255	; 0xff
 8004436:	4091      	lsls	r1, r2
 8004438:	000a      	movs	r2, r1
 800443a:	43d2      	mvns	r2, r2
 800443c:	401a      	ands	r2, r3
 800443e:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	019b      	lsls	r3, r3, #6
 8004444:	22ff      	movs	r2, #255	; 0xff
 8004446:	401a      	ands	r2, r3
 8004448:	1dfb      	adds	r3, r7, #7
 800444a:	781b      	ldrb	r3, [r3, #0]
 800444c:	0018      	movs	r0, r3
 800444e:	2303      	movs	r3, #3
 8004450:	4003      	ands	r3, r0
 8004452:	00db      	lsls	r3, r3, #3
 8004454:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004456:	4807      	ldr	r0, [pc, #28]	; (8004474 <NVIC_SetPriority+0xd8>)
 8004458:	1dfb      	adds	r3, r7, #7
 800445a:	781b      	ldrb	r3, [r3, #0]
 800445c:	b25b      	sxtb	r3, r3
 800445e:	089b      	lsrs	r3, r3, #2
 8004460:	430a      	orrs	r2, r1
 8004462:	33c0      	adds	r3, #192	; 0xc0
 8004464:	009b      	lsls	r3, r3, #2
 8004466:	501a      	str	r2, [r3, r0]
}
 8004468:	46c0      	nop			; (mov r8, r8)
 800446a:	46bd      	mov	sp, r7
 800446c:	b003      	add	sp, #12
 800446e:	bd90      	pop	{r4, r7, pc}
 8004470:	e000ed00 	.word	0xe000ed00
 8004474:	e000e100 	.word	0xe000e100

08004478 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b082      	sub	sp, #8
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	3b01      	subs	r3, #1
 8004484:	4a0c      	ldr	r2, [pc, #48]	; (80044b8 <SysTick_Config+0x40>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d901      	bls.n	800448e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800448a:	2301      	movs	r3, #1
 800448c:	e010      	b.n	80044b0 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800448e:	4b0b      	ldr	r3, [pc, #44]	; (80044bc <SysTick_Config+0x44>)
 8004490:	687a      	ldr	r2, [r7, #4]
 8004492:	3a01      	subs	r2, #1
 8004494:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004496:	2301      	movs	r3, #1
 8004498:	425b      	negs	r3, r3
 800449a:	2103      	movs	r1, #3
 800449c:	0018      	movs	r0, r3
 800449e:	f7ff ff7d 	bl	800439c <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80044a2:	4b06      	ldr	r3, [pc, #24]	; (80044bc <SysTick_Config+0x44>)
 80044a4:	2200      	movs	r2, #0
 80044a6:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80044a8:	4b04      	ldr	r3, [pc, #16]	; (80044bc <SysTick_Config+0x44>)
 80044aa:	2207      	movs	r2, #7
 80044ac:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80044ae:	2300      	movs	r3, #0
}
 80044b0:	0018      	movs	r0, r3
 80044b2:	46bd      	mov	sp, r7
 80044b4:	b002      	add	sp, #8
 80044b6:	bd80      	pop	{r7, pc}
 80044b8:	00ffffff 	.word	0x00ffffff
 80044bc:	e000e010 	.word	0xe000e010

080044c0 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b084      	sub	sp, #16
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	60b9      	str	r1, [r7, #8]
 80044c8:	607a      	str	r2, [r7, #4]
 80044ca:	210f      	movs	r1, #15
 80044cc:	187b      	adds	r3, r7, r1
 80044ce:	1c02      	adds	r2, r0, #0
 80044d0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80044d2:	68ba      	ldr	r2, [r7, #8]
 80044d4:	187b      	adds	r3, r7, r1
 80044d6:	781b      	ldrb	r3, [r3, #0]
 80044d8:	b25b      	sxtb	r3, r3
 80044da:	0011      	movs	r1, r2
 80044dc:	0018      	movs	r0, r3
 80044de:	f7ff ff5d 	bl	800439c <NVIC_SetPriority>
}
 80044e2:	46c0      	nop			; (mov r8, r8)
 80044e4:	46bd      	mov	sp, r7
 80044e6:	b004      	add	sp, #16
 80044e8:	bd80      	pop	{r7, pc}

080044ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044ea:	b580      	push	{r7, lr}
 80044ec:	b082      	sub	sp, #8
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	0002      	movs	r2, r0
 80044f2:	1dfb      	adds	r3, r7, #7
 80044f4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80044f6:	1dfb      	adds	r3, r7, #7
 80044f8:	781b      	ldrb	r3, [r3, #0]
 80044fa:	b25b      	sxtb	r3, r3
 80044fc:	0018      	movs	r0, r3
 80044fe:	f7ff ff37 	bl	8004370 <NVIC_EnableIRQ>
}
 8004502:	46c0      	nop			; (mov r8, r8)
 8004504:	46bd      	mov	sp, r7
 8004506:	b002      	add	sp, #8
 8004508:	bd80      	pop	{r7, pc}

0800450a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800450a:	b580      	push	{r7, lr}
 800450c:	b082      	sub	sp, #8
 800450e:	af00      	add	r7, sp, #0
 8004510:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	0018      	movs	r0, r3
 8004516:	f7ff ffaf 	bl	8004478 <SysTick_Config>
 800451a:	0003      	movs	r3, r0
}
 800451c:	0018      	movs	r0, r3
 800451e:	46bd      	mov	sp, r7
 8004520:	b002      	add	sp, #8
 8004522:	bd80      	pop	{r7, pc}

08004524 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b084      	sub	sp, #16
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800452c:	230f      	movs	r3, #15
 800452e:	18fb      	adds	r3, r7, r3
 8004530:	2200      	movs	r2, #0
 8004532:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2225      	movs	r2, #37	; 0x25
 8004538:	5c9b      	ldrb	r3, [r3, r2]
 800453a:	b2db      	uxtb	r3, r3
 800453c:	2b02      	cmp	r3, #2
 800453e:	d007      	beq.n	8004550 <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2204      	movs	r2, #4
 8004544:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004546:	230f      	movs	r3, #15
 8004548:	18fb      	adds	r3, r7, r3
 800454a:	2201      	movs	r2, #1
 800454c:	701a      	strb	r2, [r3, #0]
 800454e:	e02a      	b.n	80045a6 <HAL_DMA_Abort_IT+0x82>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	210e      	movs	r1, #14
 800455c:	438a      	bics	r2, r1
 800455e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	2101      	movs	r1, #1
 800456c:	438a      	bics	r2, r1
 800456e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004574:	221c      	movs	r2, #28
 8004576:	401a      	ands	r2, r3
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800457c:	2101      	movs	r1, #1
 800457e:	4091      	lsls	r1, r2
 8004580:	000a      	movs	r2, r1
 8004582:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2225      	movs	r2, #37	; 0x25
 8004588:	2101      	movs	r1, #1
 800458a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2224      	movs	r2, #36	; 0x24
 8004590:	2100      	movs	r1, #0
 8004592:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004598:	2b00      	cmp	r3, #0
 800459a:	d004      	beq.n	80045a6 <HAL_DMA_Abort_IT+0x82>
    {
      hdma->XferAbortCallback(hdma);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045a0:	687a      	ldr	r2, [r7, #4]
 80045a2:	0010      	movs	r0, r2
 80045a4:	4798      	blx	r3
    }
  }
  return status;
 80045a6:	230f      	movs	r3, #15
 80045a8:	18fb      	adds	r3, r7, r3
 80045aa:	781b      	ldrb	r3, [r3, #0]
}
 80045ac:	0018      	movs	r0, r3
 80045ae:	46bd      	mov	sp, r7
 80045b0:	b004      	add	sp, #16
 80045b2:	bd80      	pop	{r7, pc}

080045b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b086      	sub	sp, #24
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
 80045bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80045be:	2300      	movs	r3, #0
 80045c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80045c2:	2300      	movs	r3, #0
 80045c4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80045c6:	2300      	movs	r3, #0
 80045c8:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80045ca:	e155      	b.n	8004878 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	2101      	movs	r1, #1
 80045d2:	697a      	ldr	r2, [r7, #20]
 80045d4:	4091      	lsls	r1, r2
 80045d6:	000a      	movs	r2, r1
 80045d8:	4013      	ands	r3, r2
 80045da:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d100      	bne.n	80045e4 <HAL_GPIO_Init+0x30>
 80045e2:	e146      	b.n	8004872 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d00b      	beq.n	8004604 <HAL_GPIO_Init+0x50>
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	2b02      	cmp	r3, #2
 80045f2:	d007      	beq.n	8004604 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80045f8:	2b11      	cmp	r3, #17
 80045fa:	d003      	beq.n	8004604 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	2b12      	cmp	r3, #18
 8004602:	d130      	bne.n	8004666 <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	005b      	lsls	r3, r3, #1
 800460e:	2203      	movs	r2, #3
 8004610:	409a      	lsls	r2, r3
 8004612:	0013      	movs	r3, r2
 8004614:	43da      	mvns	r2, r3
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	4013      	ands	r3, r2
 800461a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	68da      	ldr	r2, [r3, #12]
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	005b      	lsls	r3, r3, #1
 8004624:	409a      	lsls	r2, r3
 8004626:	0013      	movs	r3, r2
 8004628:	693a      	ldr	r2, [r7, #16]
 800462a:	4313      	orrs	r3, r2
 800462c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	693a      	ldr	r2, [r7, #16]
 8004632:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800463a:	2201      	movs	r2, #1
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	409a      	lsls	r2, r3
 8004640:	0013      	movs	r3, r2
 8004642:	43da      	mvns	r2, r3
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	4013      	ands	r3, r2
 8004648:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	091b      	lsrs	r3, r3, #4
 8004650:	2201      	movs	r2, #1
 8004652:	401a      	ands	r2, r3
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	409a      	lsls	r2, r3
 8004658:	0013      	movs	r3, r2
 800465a:	693a      	ldr	r2, [r7, #16]
 800465c:	4313      	orrs	r3, r2
 800465e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	693a      	ldr	r2, [r7, #16]
 8004664:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	68db      	ldr	r3, [r3, #12]
 800466a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	005b      	lsls	r3, r3, #1
 8004670:	2203      	movs	r2, #3
 8004672:	409a      	lsls	r2, r3
 8004674:	0013      	movs	r3, r2
 8004676:	43da      	mvns	r2, r3
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	4013      	ands	r3, r2
 800467c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	689a      	ldr	r2, [r3, #8]
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	005b      	lsls	r3, r3, #1
 8004686:	409a      	lsls	r2, r3
 8004688:	0013      	movs	r3, r2
 800468a:	693a      	ldr	r2, [r7, #16]
 800468c:	4313      	orrs	r3, r2
 800468e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	693a      	ldr	r2, [r7, #16]
 8004694:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	2b02      	cmp	r3, #2
 800469c:	d003      	beq.n	80046a6 <HAL_GPIO_Init+0xf2>
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	2b12      	cmp	r3, #18
 80046a4:	d123      	bne.n	80046ee <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	08da      	lsrs	r2, r3, #3
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	3208      	adds	r2, #8
 80046ae:	0092      	lsls	r2, r2, #2
 80046b0:	58d3      	ldr	r3, [r2, r3]
 80046b2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U));
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	2207      	movs	r2, #7
 80046b8:	4013      	ands	r3, r2
 80046ba:	009b      	lsls	r3, r3, #2
 80046bc:	220f      	movs	r2, #15
 80046be:	409a      	lsls	r2, r3
 80046c0:	0013      	movs	r3, r2
 80046c2:	43da      	mvns	r2, r3
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	4013      	ands	r3, r2
 80046c8:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	691a      	ldr	r2, [r3, #16]
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	2107      	movs	r1, #7
 80046d2:	400b      	ands	r3, r1
 80046d4:	009b      	lsls	r3, r3, #2
 80046d6:	409a      	lsls	r2, r3
 80046d8:	0013      	movs	r3, r2
 80046da:	693a      	ldr	r2, [r7, #16]
 80046dc:	4313      	orrs	r3, r2
 80046de:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	08da      	lsrs	r2, r3, #3
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	3208      	adds	r2, #8
 80046e8:	0092      	lsls	r2, r2, #2
 80046ea:	6939      	ldr	r1, [r7, #16]
 80046ec:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	005b      	lsls	r3, r3, #1
 80046f8:	2203      	movs	r2, #3
 80046fa:	409a      	lsls	r2, r3
 80046fc:	0013      	movs	r3, r2
 80046fe:	43da      	mvns	r2, r3
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	4013      	ands	r3, r2
 8004704:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	2203      	movs	r2, #3
 800470c:	401a      	ands	r2, r3
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	005b      	lsls	r3, r3, #1
 8004712:	409a      	lsls	r2, r3
 8004714:	0013      	movs	r3, r2
 8004716:	693a      	ldr	r2, [r7, #16]
 8004718:	4313      	orrs	r3, r2
 800471a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	693a      	ldr	r2, [r7, #16]
 8004720:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	685a      	ldr	r2, [r3, #4]
 8004726:	2380      	movs	r3, #128	; 0x80
 8004728:	055b      	lsls	r3, r3, #21
 800472a:	4013      	ands	r3, r2
 800472c:	d100      	bne.n	8004730 <HAL_GPIO_Init+0x17c>
 800472e:	e0a0      	b.n	8004872 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004730:	4b57      	ldr	r3, [pc, #348]	; (8004890 <HAL_GPIO_Init+0x2dc>)
 8004732:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004734:	4b56      	ldr	r3, [pc, #344]	; (8004890 <HAL_GPIO_Init+0x2dc>)
 8004736:	2101      	movs	r1, #1
 8004738:	430a      	orrs	r2, r1
 800473a:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 800473c:	4a55      	ldr	r2, [pc, #340]	; (8004894 <HAL_GPIO_Init+0x2e0>)
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	089b      	lsrs	r3, r3, #2
 8004742:	3302      	adds	r3, #2
 8004744:	009b      	lsls	r3, r3, #2
 8004746:	589b      	ldr	r3, [r3, r2]
 8004748:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	2203      	movs	r2, #3
 800474e:	4013      	ands	r3, r2
 8004750:	009b      	lsls	r3, r3, #2
 8004752:	220f      	movs	r2, #15
 8004754:	409a      	lsls	r2, r3
 8004756:	0013      	movs	r3, r2
 8004758:	43da      	mvns	r2, r3
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	4013      	ands	r3, r2
 800475e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8004760:	687a      	ldr	r2, [r7, #4]
 8004762:	23a0      	movs	r3, #160	; 0xa0
 8004764:	05db      	lsls	r3, r3, #23
 8004766:	429a      	cmp	r2, r3
 8004768:	d01f      	beq.n	80047aa <HAL_GPIO_Init+0x1f6>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	4a4a      	ldr	r2, [pc, #296]	; (8004898 <HAL_GPIO_Init+0x2e4>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d019      	beq.n	80047a6 <HAL_GPIO_Init+0x1f2>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	4a49      	ldr	r2, [pc, #292]	; (800489c <HAL_GPIO_Init+0x2e8>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d013      	beq.n	80047a2 <HAL_GPIO_Init+0x1ee>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	4a48      	ldr	r2, [pc, #288]	; (80048a0 <HAL_GPIO_Init+0x2ec>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d00d      	beq.n	800479e <HAL_GPIO_Init+0x1ea>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	4a47      	ldr	r2, [pc, #284]	; (80048a4 <HAL_GPIO_Init+0x2f0>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d007      	beq.n	800479a <HAL_GPIO_Init+0x1e6>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	4a46      	ldr	r2, [pc, #280]	; (80048a8 <HAL_GPIO_Init+0x2f4>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d101      	bne.n	8004796 <HAL_GPIO_Init+0x1e2>
 8004792:	2305      	movs	r3, #5
 8004794:	e00a      	b.n	80047ac <HAL_GPIO_Init+0x1f8>
 8004796:	2306      	movs	r3, #6
 8004798:	e008      	b.n	80047ac <HAL_GPIO_Init+0x1f8>
 800479a:	2304      	movs	r3, #4
 800479c:	e006      	b.n	80047ac <HAL_GPIO_Init+0x1f8>
 800479e:	2303      	movs	r3, #3
 80047a0:	e004      	b.n	80047ac <HAL_GPIO_Init+0x1f8>
 80047a2:	2302      	movs	r3, #2
 80047a4:	e002      	b.n	80047ac <HAL_GPIO_Init+0x1f8>
 80047a6:	2301      	movs	r3, #1
 80047a8:	e000      	b.n	80047ac <HAL_GPIO_Init+0x1f8>
 80047aa:	2300      	movs	r3, #0
 80047ac:	697a      	ldr	r2, [r7, #20]
 80047ae:	2103      	movs	r1, #3
 80047b0:	400a      	ands	r2, r1
 80047b2:	0092      	lsls	r2, r2, #2
 80047b4:	4093      	lsls	r3, r2
 80047b6:	693a      	ldr	r2, [r7, #16]
 80047b8:	4313      	orrs	r3, r2
 80047ba:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80047bc:	4935      	ldr	r1, [pc, #212]	; (8004894 <HAL_GPIO_Init+0x2e0>)
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	089b      	lsrs	r3, r3, #2
 80047c2:	3302      	adds	r3, #2
 80047c4:	009b      	lsls	r3, r3, #2
 80047c6:	693a      	ldr	r2, [r7, #16]
 80047c8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80047ca:	4b38      	ldr	r3, [pc, #224]	; (80048ac <HAL_GPIO_Init+0x2f8>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	43da      	mvns	r2, r3
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	4013      	ands	r3, r2
 80047d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	685a      	ldr	r2, [r3, #4]
 80047de:	2380      	movs	r3, #128	; 0x80
 80047e0:	025b      	lsls	r3, r3, #9
 80047e2:	4013      	ands	r3, r2
 80047e4:	d003      	beq.n	80047ee <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 80047e6:	693a      	ldr	r2, [r7, #16]
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	4313      	orrs	r3, r2
 80047ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80047ee:	4b2f      	ldr	r3, [pc, #188]	; (80048ac <HAL_GPIO_Init+0x2f8>)
 80047f0:	693a      	ldr	r2, [r7, #16]
 80047f2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80047f4:	4b2d      	ldr	r3, [pc, #180]	; (80048ac <HAL_GPIO_Init+0x2f8>)
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	43da      	mvns	r2, r3
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	4013      	ands	r3, r2
 8004802:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	685a      	ldr	r2, [r3, #4]
 8004808:	2380      	movs	r3, #128	; 0x80
 800480a:	029b      	lsls	r3, r3, #10
 800480c:	4013      	ands	r3, r2
 800480e:	d003      	beq.n	8004818 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8004810:	693a      	ldr	r2, [r7, #16]
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	4313      	orrs	r3, r2
 8004816:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004818:	4b24      	ldr	r3, [pc, #144]	; (80048ac <HAL_GPIO_Init+0x2f8>)
 800481a:	693a      	ldr	r2, [r7, #16]
 800481c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800481e:	4b23      	ldr	r3, [pc, #140]	; (80048ac <HAL_GPIO_Init+0x2f8>)
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	43da      	mvns	r2, r3
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	4013      	ands	r3, r2
 800482c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	685a      	ldr	r2, [r3, #4]
 8004832:	2380      	movs	r3, #128	; 0x80
 8004834:	035b      	lsls	r3, r3, #13
 8004836:	4013      	ands	r3, r2
 8004838:	d003      	beq.n	8004842 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800483a:	693a      	ldr	r2, [r7, #16]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	4313      	orrs	r3, r2
 8004840:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004842:	4b1a      	ldr	r3, [pc, #104]	; (80048ac <HAL_GPIO_Init+0x2f8>)
 8004844:	693a      	ldr	r2, [r7, #16]
 8004846:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004848:	4b18      	ldr	r3, [pc, #96]	; (80048ac <HAL_GPIO_Init+0x2f8>)
 800484a:	68db      	ldr	r3, [r3, #12]
 800484c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	43da      	mvns	r2, r3
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	4013      	ands	r3, r2
 8004856:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	685a      	ldr	r2, [r3, #4]
 800485c:	2380      	movs	r3, #128	; 0x80
 800485e:	039b      	lsls	r3, r3, #14
 8004860:	4013      	ands	r3, r2
 8004862:	d003      	beq.n	800486c <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8004864:	693a      	ldr	r2, [r7, #16]
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	4313      	orrs	r3, r2
 800486a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800486c:	4b0f      	ldr	r3, [pc, #60]	; (80048ac <HAL_GPIO_Init+0x2f8>)
 800486e:	693a      	ldr	r2, [r7, #16]
 8004870:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	3301      	adds	r3, #1
 8004876:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	40da      	lsrs	r2, r3
 8004880:	1e13      	subs	r3, r2, #0
 8004882:	d000      	beq.n	8004886 <HAL_GPIO_Init+0x2d2>
 8004884:	e6a2      	b.n	80045cc <HAL_GPIO_Init+0x18>
  }
}
 8004886:	46c0      	nop			; (mov r8, r8)
 8004888:	46bd      	mov	sp, r7
 800488a:	b006      	add	sp, #24
 800488c:	bd80      	pop	{r7, pc}
 800488e:	46c0      	nop			; (mov r8, r8)
 8004890:	40021000 	.word	0x40021000
 8004894:	40010000 	.word	0x40010000
 8004898:	50000400 	.word	0x50000400
 800489c:	50000800 	.word	0x50000800
 80048a0:	50000c00 	.word	0x50000c00
 80048a4:	50001000 	.word	0x50001000
 80048a8:	50001c00 	.word	0x50001c00
 80048ac:	40010400 	.word	0x40010400

080048b0 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b082      	sub	sp, #8
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
 80048b8:	0008      	movs	r0, r1
 80048ba:	0011      	movs	r1, r2
 80048bc:	1cbb      	adds	r3, r7, #2
 80048be:	1c02      	adds	r2, r0, #0
 80048c0:	801a      	strh	r2, [r3, #0]
 80048c2:	1c7b      	adds	r3, r7, #1
 80048c4:	1c0a      	adds	r2, r1, #0
 80048c6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80048c8:	1c7b      	adds	r3, r7, #1
 80048ca:	781b      	ldrb	r3, [r3, #0]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d004      	beq.n	80048da <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80048d0:	1cbb      	adds	r3, r7, #2
 80048d2:	881a      	ldrh	r2, [r3, #0]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80048d8:	e003      	b.n	80048e2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80048da:	1cbb      	adds	r3, r7, #2
 80048dc:	881a      	ldrh	r2, [r3, #0]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80048e2:	46c0      	nop			; (mov r8, r8)
 80048e4:	46bd      	mov	sp, r7
 80048e6:	b002      	add	sp, #8
 80048e8:	bd80      	pop	{r7, pc}
	...

080048ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b082      	sub	sp, #8
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	0002      	movs	r2, r0
 80048f4:	1dbb      	adds	r3, r7, #6
 80048f6:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80048f8:	4b09      	ldr	r3, [pc, #36]	; (8004920 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80048fa:	695b      	ldr	r3, [r3, #20]
 80048fc:	1dba      	adds	r2, r7, #6
 80048fe:	8812      	ldrh	r2, [r2, #0]
 8004900:	4013      	ands	r3, r2
 8004902:	d008      	beq.n	8004916 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004904:	4b06      	ldr	r3, [pc, #24]	; (8004920 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8004906:	1dba      	adds	r2, r7, #6
 8004908:	8812      	ldrh	r2, [r2, #0]
 800490a:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800490c:	1dbb      	adds	r3, r7, #6
 800490e:	881b      	ldrh	r3, [r3, #0]
 8004910:	0018      	movs	r0, r3
 8004912:	f018 fe4b 	bl	801d5ac <HAL_GPIO_EXTI_Callback>
  }
}
 8004916:	46c0      	nop			; (mov r8, r8)
 8004918:	46bd      	mov	sp, r7
 800491a:	b002      	add	sp, #8
 800491c:	bd80      	pop	{r7, pc}
 800491e:	46c0      	nop			; (mov r8, r8)
 8004920:	40010400 	.word	0x40010400

08004924 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 8004928:	4b04      	ldr	r3, [pc, #16]	; (800493c <HAL_PWR_EnableBkUpAccess+0x18>)
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	4b03      	ldr	r3, [pc, #12]	; (800493c <HAL_PWR_EnableBkUpAccess+0x18>)
 800492e:	2180      	movs	r1, #128	; 0x80
 8004930:	0049      	lsls	r1, r1, #1
 8004932:	430a      	orrs	r2, r1
 8004934:	601a      	str	r2, [r3, #0]
}
 8004936:	46c0      	nop			; (mov r8, r8)
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}
 800493c:	40007000 	.word	0x40007000

08004940 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004940:	b5b0      	push	{r4, r5, r7, lr}
 8004942:	b08a      	sub	sp, #40	; 0x28
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d102      	bne.n	8004954 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	f000 fbbc 	bl	80050cc <HAL_RCC_OscConfig+0x78c>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004954:	4bc8      	ldr	r3, [pc, #800]	; (8004c78 <HAL_RCC_OscConfig+0x338>)
 8004956:	68db      	ldr	r3, [r3, #12]
 8004958:	220c      	movs	r2, #12
 800495a:	4013      	ands	r3, r2
 800495c:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800495e:	4bc6      	ldr	r3, [pc, #792]	; (8004c78 <HAL_RCC_OscConfig+0x338>)
 8004960:	68da      	ldr	r2, [r3, #12]
 8004962:	2380      	movs	r3, #128	; 0x80
 8004964:	025b      	lsls	r3, r3, #9
 8004966:	4013      	ands	r3, r2
 8004968:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	2201      	movs	r2, #1
 8004970:	4013      	ands	r3, r2
 8004972:	d100      	bne.n	8004976 <HAL_RCC_OscConfig+0x36>
 8004974:	e07e      	b.n	8004a74 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004976:	69fb      	ldr	r3, [r7, #28]
 8004978:	2b08      	cmp	r3, #8
 800497a:	d007      	beq.n	800498c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800497c:	69fb      	ldr	r3, [r7, #28]
 800497e:	2b0c      	cmp	r3, #12
 8004980:	d112      	bne.n	80049a8 <HAL_RCC_OscConfig+0x68>
 8004982:	69ba      	ldr	r2, [r7, #24]
 8004984:	2380      	movs	r3, #128	; 0x80
 8004986:	025b      	lsls	r3, r3, #9
 8004988:	429a      	cmp	r2, r3
 800498a:	d10d      	bne.n	80049a8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800498c:	4bba      	ldr	r3, [pc, #744]	; (8004c78 <HAL_RCC_OscConfig+0x338>)
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	2380      	movs	r3, #128	; 0x80
 8004992:	029b      	lsls	r3, r3, #10
 8004994:	4013      	ands	r3, r2
 8004996:	d100      	bne.n	800499a <HAL_RCC_OscConfig+0x5a>
 8004998:	e06b      	b.n	8004a72 <HAL_RCC_OscConfig+0x132>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d167      	bne.n	8004a72 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	f000 fb92 	bl	80050cc <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	685a      	ldr	r2, [r3, #4]
 80049ac:	2380      	movs	r3, #128	; 0x80
 80049ae:	025b      	lsls	r3, r3, #9
 80049b0:	429a      	cmp	r2, r3
 80049b2:	d107      	bne.n	80049c4 <HAL_RCC_OscConfig+0x84>
 80049b4:	4bb0      	ldr	r3, [pc, #704]	; (8004c78 <HAL_RCC_OscConfig+0x338>)
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	4baf      	ldr	r3, [pc, #700]	; (8004c78 <HAL_RCC_OscConfig+0x338>)
 80049ba:	2180      	movs	r1, #128	; 0x80
 80049bc:	0249      	lsls	r1, r1, #9
 80049be:	430a      	orrs	r2, r1
 80049c0:	601a      	str	r2, [r3, #0]
 80049c2:	e027      	b.n	8004a14 <HAL_RCC_OscConfig+0xd4>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	685a      	ldr	r2, [r3, #4]
 80049c8:	23a0      	movs	r3, #160	; 0xa0
 80049ca:	02db      	lsls	r3, r3, #11
 80049cc:	429a      	cmp	r2, r3
 80049ce:	d10e      	bne.n	80049ee <HAL_RCC_OscConfig+0xae>
 80049d0:	4ba9      	ldr	r3, [pc, #676]	; (8004c78 <HAL_RCC_OscConfig+0x338>)
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	4ba8      	ldr	r3, [pc, #672]	; (8004c78 <HAL_RCC_OscConfig+0x338>)
 80049d6:	2180      	movs	r1, #128	; 0x80
 80049d8:	02c9      	lsls	r1, r1, #11
 80049da:	430a      	orrs	r2, r1
 80049dc:	601a      	str	r2, [r3, #0]
 80049de:	4ba6      	ldr	r3, [pc, #664]	; (8004c78 <HAL_RCC_OscConfig+0x338>)
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	4ba5      	ldr	r3, [pc, #660]	; (8004c78 <HAL_RCC_OscConfig+0x338>)
 80049e4:	2180      	movs	r1, #128	; 0x80
 80049e6:	0249      	lsls	r1, r1, #9
 80049e8:	430a      	orrs	r2, r1
 80049ea:	601a      	str	r2, [r3, #0]
 80049ec:	e012      	b.n	8004a14 <HAL_RCC_OscConfig+0xd4>
 80049ee:	4ba2      	ldr	r3, [pc, #648]	; (8004c78 <HAL_RCC_OscConfig+0x338>)
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	4ba1      	ldr	r3, [pc, #644]	; (8004c78 <HAL_RCC_OscConfig+0x338>)
 80049f4:	49a1      	ldr	r1, [pc, #644]	; (8004c7c <HAL_RCC_OscConfig+0x33c>)
 80049f6:	400a      	ands	r2, r1
 80049f8:	601a      	str	r2, [r3, #0]
 80049fa:	4b9f      	ldr	r3, [pc, #636]	; (8004c78 <HAL_RCC_OscConfig+0x338>)
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	2380      	movs	r3, #128	; 0x80
 8004a00:	025b      	lsls	r3, r3, #9
 8004a02:	4013      	ands	r3, r2
 8004a04:	60fb      	str	r3, [r7, #12]
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	4b9b      	ldr	r3, [pc, #620]	; (8004c78 <HAL_RCC_OscConfig+0x338>)
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	4b9a      	ldr	r3, [pc, #616]	; (8004c78 <HAL_RCC_OscConfig+0x338>)
 8004a0e:	499c      	ldr	r1, [pc, #624]	; (8004c80 <HAL_RCC_OscConfig+0x340>)
 8004a10:	400a      	ands	r2, r1
 8004a12:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d015      	beq.n	8004a48 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a1c:	f7ff fa56 	bl	8003ecc <HAL_GetTick>
 8004a20:	0003      	movs	r3, r0
 8004a22:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004a24:	e009      	b.n	8004a3a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a26:	f7ff fa51 	bl	8003ecc <HAL_GetTick>
 8004a2a:	0002      	movs	r2, r0
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	1ad3      	subs	r3, r2, r3
 8004a30:	2b64      	cmp	r3, #100	; 0x64
 8004a32:	d902      	bls.n	8004a3a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004a34:	2303      	movs	r3, #3
 8004a36:	f000 fb49 	bl	80050cc <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004a3a:	4b8f      	ldr	r3, [pc, #572]	; (8004c78 <HAL_RCC_OscConfig+0x338>)
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	2380      	movs	r3, #128	; 0x80
 8004a40:	029b      	lsls	r3, r3, #10
 8004a42:	4013      	ands	r3, r2
 8004a44:	d0ef      	beq.n	8004a26 <HAL_RCC_OscConfig+0xe6>
 8004a46:	e015      	b.n	8004a74 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a48:	f7ff fa40 	bl	8003ecc <HAL_GetTick>
 8004a4c:	0003      	movs	r3, r0
 8004a4e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004a50:	e008      	b.n	8004a64 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a52:	f7ff fa3b 	bl	8003ecc <HAL_GetTick>
 8004a56:	0002      	movs	r2, r0
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	1ad3      	subs	r3, r2, r3
 8004a5c:	2b64      	cmp	r3, #100	; 0x64
 8004a5e:	d901      	bls.n	8004a64 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8004a60:	2303      	movs	r3, #3
 8004a62:	e333      	b.n	80050cc <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004a64:	4b84      	ldr	r3, [pc, #528]	; (8004c78 <HAL_RCC_OscConfig+0x338>)
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	2380      	movs	r3, #128	; 0x80
 8004a6a:	029b      	lsls	r3, r3, #10
 8004a6c:	4013      	ands	r3, r2
 8004a6e:	d1f0      	bne.n	8004a52 <HAL_RCC_OscConfig+0x112>
 8004a70:	e000      	b.n	8004a74 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a72:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	2202      	movs	r2, #2
 8004a7a:	4013      	ands	r3, r2
 8004a7c:	d100      	bne.n	8004a80 <HAL_RCC_OscConfig+0x140>
 8004a7e:	e098      	b.n	8004bb2 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8004a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a88:	2220      	movs	r2, #32
 8004a8a:	4013      	ands	r3, r2
 8004a8c:	d009      	beq.n	8004aa2 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8004a8e:	4b7a      	ldr	r3, [pc, #488]	; (8004c78 <HAL_RCC_OscConfig+0x338>)
 8004a90:	681a      	ldr	r2, [r3, #0]
 8004a92:	4b79      	ldr	r3, [pc, #484]	; (8004c78 <HAL_RCC_OscConfig+0x338>)
 8004a94:	2120      	movs	r1, #32
 8004a96:	430a      	orrs	r2, r1
 8004a98:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8004a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a9c:	2220      	movs	r2, #32
 8004a9e:	4393      	bics	r3, r2
 8004aa0:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004aa2:	69fb      	ldr	r3, [r7, #28]
 8004aa4:	2b04      	cmp	r3, #4
 8004aa6:	d005      	beq.n	8004ab4 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004aa8:	69fb      	ldr	r3, [r7, #28]
 8004aaa:	2b0c      	cmp	r3, #12
 8004aac:	d13d      	bne.n	8004b2a <HAL_RCC_OscConfig+0x1ea>
 8004aae:	69bb      	ldr	r3, [r7, #24]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d13a      	bne.n	8004b2a <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8004ab4:	4b70      	ldr	r3, [pc, #448]	; (8004c78 <HAL_RCC_OscConfig+0x338>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	2204      	movs	r2, #4
 8004aba:	4013      	ands	r3, r2
 8004abc:	d004      	beq.n	8004ac8 <HAL_RCC_OscConfig+0x188>
 8004abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d101      	bne.n	8004ac8 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	e301      	b.n	80050cc <HAL_RCC_OscConfig+0x78c>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ac8:	4b6b      	ldr	r3, [pc, #428]	; (8004c78 <HAL_RCC_OscConfig+0x338>)
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	4a6d      	ldr	r2, [pc, #436]	; (8004c84 <HAL_RCC_OscConfig+0x344>)
 8004ace:	4013      	ands	r3, r2
 8004ad0:	0019      	movs	r1, r3
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	691b      	ldr	r3, [r3, #16]
 8004ad6:	021a      	lsls	r2, r3, #8
 8004ad8:	4b67      	ldr	r3, [pc, #412]	; (8004c78 <HAL_RCC_OscConfig+0x338>)
 8004ada:	430a      	orrs	r2, r1
 8004adc:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004ade:	4b66      	ldr	r3, [pc, #408]	; (8004c78 <HAL_RCC_OscConfig+0x338>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	2209      	movs	r2, #9
 8004ae4:	4393      	bics	r3, r2
 8004ae6:	0019      	movs	r1, r3
 8004ae8:	4b63      	ldr	r3, [pc, #396]	; (8004c78 <HAL_RCC_OscConfig+0x338>)
 8004aea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004aec:	430a      	orrs	r2, r1
 8004aee:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004af0:	f000 fc20 	bl	8005334 <HAL_RCC_GetSysClockFreq>
 8004af4:	0001      	movs	r1, r0
 8004af6:	4b60      	ldr	r3, [pc, #384]	; (8004c78 <HAL_RCC_OscConfig+0x338>)
 8004af8:	68db      	ldr	r3, [r3, #12]
 8004afa:	091b      	lsrs	r3, r3, #4
 8004afc:	220f      	movs	r2, #15
 8004afe:	4013      	ands	r3, r2
 8004b00:	4a61      	ldr	r2, [pc, #388]	; (8004c88 <HAL_RCC_OscConfig+0x348>)
 8004b02:	5cd3      	ldrb	r3, [r2, r3]
 8004b04:	000a      	movs	r2, r1
 8004b06:	40da      	lsrs	r2, r3
 8004b08:	4b60      	ldr	r3, [pc, #384]	; (8004c8c <HAL_RCC_OscConfig+0x34c>)
 8004b0a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8004b0c:	2513      	movs	r5, #19
 8004b0e:	197c      	adds	r4, r7, r5
 8004b10:	2000      	movs	r0, #0
 8004b12:	f7ff f9a7 	bl	8003e64 <HAL_InitTick>
 8004b16:	0003      	movs	r3, r0
 8004b18:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8004b1a:	197b      	adds	r3, r7, r5
 8004b1c:	781b      	ldrb	r3, [r3, #0]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d047      	beq.n	8004bb2 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8004b22:	2313      	movs	r3, #19
 8004b24:	18fb      	adds	r3, r7, r3
 8004b26:	781b      	ldrb	r3, [r3, #0]
 8004b28:	e2d0      	b.n	80050cc <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8004b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d027      	beq.n	8004b80 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004b30:	4b51      	ldr	r3, [pc, #324]	; (8004c78 <HAL_RCC_OscConfig+0x338>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	2209      	movs	r2, #9
 8004b36:	4393      	bics	r3, r2
 8004b38:	0019      	movs	r1, r3
 8004b3a:	4b4f      	ldr	r3, [pc, #316]	; (8004c78 <HAL_RCC_OscConfig+0x338>)
 8004b3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b3e:	430a      	orrs	r2, r1
 8004b40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b42:	f7ff f9c3 	bl	8003ecc <HAL_GetTick>
 8004b46:	0003      	movs	r3, r0
 8004b48:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004b4a:	e008      	b.n	8004b5e <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b4c:	f7ff f9be 	bl	8003ecc <HAL_GetTick>
 8004b50:	0002      	movs	r2, r0
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	1ad3      	subs	r3, r2, r3
 8004b56:	2b02      	cmp	r3, #2
 8004b58:	d901      	bls.n	8004b5e <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8004b5a:	2303      	movs	r3, #3
 8004b5c:	e2b6      	b.n	80050cc <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004b5e:	4b46      	ldr	r3, [pc, #280]	; (8004c78 <HAL_RCC_OscConfig+0x338>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	2204      	movs	r2, #4
 8004b64:	4013      	ands	r3, r2
 8004b66:	d0f1      	beq.n	8004b4c <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b68:	4b43      	ldr	r3, [pc, #268]	; (8004c78 <HAL_RCC_OscConfig+0x338>)
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	4a45      	ldr	r2, [pc, #276]	; (8004c84 <HAL_RCC_OscConfig+0x344>)
 8004b6e:	4013      	ands	r3, r2
 8004b70:	0019      	movs	r1, r3
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	691b      	ldr	r3, [r3, #16]
 8004b76:	021a      	lsls	r2, r3, #8
 8004b78:	4b3f      	ldr	r3, [pc, #252]	; (8004c78 <HAL_RCC_OscConfig+0x338>)
 8004b7a:	430a      	orrs	r2, r1
 8004b7c:	605a      	str	r2, [r3, #4]
 8004b7e:	e018      	b.n	8004bb2 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b80:	4b3d      	ldr	r3, [pc, #244]	; (8004c78 <HAL_RCC_OscConfig+0x338>)
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	4b3c      	ldr	r3, [pc, #240]	; (8004c78 <HAL_RCC_OscConfig+0x338>)
 8004b86:	2101      	movs	r1, #1
 8004b88:	438a      	bics	r2, r1
 8004b8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b8c:	f7ff f99e 	bl	8003ecc <HAL_GetTick>
 8004b90:	0003      	movs	r3, r0
 8004b92:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004b94:	e008      	b.n	8004ba8 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b96:	f7ff f999 	bl	8003ecc <HAL_GetTick>
 8004b9a:	0002      	movs	r2, r0
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	1ad3      	subs	r3, r2, r3
 8004ba0:	2b02      	cmp	r3, #2
 8004ba2:	d901      	bls.n	8004ba8 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8004ba4:	2303      	movs	r3, #3
 8004ba6:	e291      	b.n	80050cc <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004ba8:	4b33      	ldr	r3, [pc, #204]	; (8004c78 <HAL_RCC_OscConfig+0x338>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	2204      	movs	r2, #4
 8004bae:	4013      	ands	r3, r2
 8004bb0:	d1f1      	bne.n	8004b96 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	2210      	movs	r2, #16
 8004bb8:	4013      	ands	r3, r2
 8004bba:	d100      	bne.n	8004bbe <HAL_RCC_OscConfig+0x27e>
 8004bbc:	e09f      	b.n	8004cfe <HAL_RCC_OscConfig+0x3be>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8004bbe:	69fb      	ldr	r3, [r7, #28]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d13f      	bne.n	8004c44 <HAL_RCC_OscConfig+0x304>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004bc4:	4b2c      	ldr	r3, [pc, #176]	; (8004c78 <HAL_RCC_OscConfig+0x338>)
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	2380      	movs	r3, #128	; 0x80
 8004bca:	009b      	lsls	r3, r3, #2
 8004bcc:	4013      	ands	r3, r2
 8004bce:	d005      	beq.n	8004bdc <HAL_RCC_OscConfig+0x29c>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	69db      	ldr	r3, [r3, #28]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d101      	bne.n	8004bdc <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	e277      	b.n	80050cc <HAL_RCC_OscConfig+0x78c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004bdc:	4b26      	ldr	r3, [pc, #152]	; (8004c78 <HAL_RCC_OscConfig+0x338>)
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	4a2b      	ldr	r2, [pc, #172]	; (8004c90 <HAL_RCC_OscConfig+0x350>)
 8004be2:	4013      	ands	r3, r2
 8004be4:	0019      	movs	r1, r3
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004bea:	4b23      	ldr	r3, [pc, #140]	; (8004c78 <HAL_RCC_OscConfig+0x338>)
 8004bec:	430a      	orrs	r2, r1
 8004bee:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004bf0:	4b21      	ldr	r3, [pc, #132]	; (8004c78 <HAL_RCC_OscConfig+0x338>)
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	021b      	lsls	r3, r3, #8
 8004bf6:	0a19      	lsrs	r1, r3, #8
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6a1b      	ldr	r3, [r3, #32]
 8004bfc:	061a      	lsls	r2, r3, #24
 8004bfe:	4b1e      	ldr	r3, [pc, #120]	; (8004c78 <HAL_RCC_OscConfig+0x338>)
 8004c00:	430a      	orrs	r2, r1
 8004c02:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c08:	0b5b      	lsrs	r3, r3, #13
 8004c0a:	3301      	adds	r3, #1
 8004c0c:	2280      	movs	r2, #128	; 0x80
 8004c0e:	0212      	lsls	r2, r2, #8
 8004c10:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8004c12:	4b19      	ldr	r3, [pc, #100]	; (8004c78 <HAL_RCC_OscConfig+0x338>)
 8004c14:	68db      	ldr	r3, [r3, #12]
 8004c16:	091b      	lsrs	r3, r3, #4
 8004c18:	210f      	movs	r1, #15
 8004c1a:	400b      	ands	r3, r1
 8004c1c:	491a      	ldr	r1, [pc, #104]	; (8004c88 <HAL_RCC_OscConfig+0x348>)
 8004c1e:	5ccb      	ldrb	r3, [r1, r3]
 8004c20:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004c22:	4b1a      	ldr	r3, [pc, #104]	; (8004c8c <HAL_RCC_OscConfig+0x34c>)
 8004c24:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8004c26:	2513      	movs	r5, #19
 8004c28:	197c      	adds	r4, r7, r5
 8004c2a:	2000      	movs	r0, #0
 8004c2c:	f7ff f91a 	bl	8003e64 <HAL_InitTick>
 8004c30:	0003      	movs	r3, r0
 8004c32:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8004c34:	197b      	adds	r3, r7, r5
 8004c36:	781b      	ldrb	r3, [r3, #0]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d060      	beq.n	8004cfe <HAL_RCC_OscConfig+0x3be>
        {
          return status;
 8004c3c:	2313      	movs	r3, #19
 8004c3e:	18fb      	adds	r3, r7, r3
 8004c40:	781b      	ldrb	r3, [r3, #0]
 8004c42:	e243      	b.n	80050cc <HAL_RCC_OscConfig+0x78c>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	69db      	ldr	r3, [r3, #28]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d03e      	beq.n	8004cca <HAL_RCC_OscConfig+0x38a>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004c4c:	4b0a      	ldr	r3, [pc, #40]	; (8004c78 <HAL_RCC_OscConfig+0x338>)
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	4b09      	ldr	r3, [pc, #36]	; (8004c78 <HAL_RCC_OscConfig+0x338>)
 8004c52:	2180      	movs	r1, #128	; 0x80
 8004c54:	0049      	lsls	r1, r1, #1
 8004c56:	430a      	orrs	r2, r1
 8004c58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c5a:	f7ff f937 	bl	8003ecc <HAL_GetTick>
 8004c5e:	0003      	movs	r3, r0
 8004c60:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004c62:	e017      	b.n	8004c94 <HAL_RCC_OscConfig+0x354>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004c64:	f7ff f932 	bl	8003ecc <HAL_GetTick>
 8004c68:	0002      	movs	r2, r0
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	1ad3      	subs	r3, r2, r3
 8004c6e:	2b02      	cmp	r3, #2
 8004c70:	d910      	bls.n	8004c94 <HAL_RCC_OscConfig+0x354>
          {
            return HAL_TIMEOUT;
 8004c72:	2303      	movs	r3, #3
 8004c74:	e22a      	b.n	80050cc <HAL_RCC_OscConfig+0x78c>
 8004c76:	46c0      	nop			; (mov r8, r8)
 8004c78:	40021000 	.word	0x40021000
 8004c7c:	fffeffff 	.word	0xfffeffff
 8004c80:	fffbffff 	.word	0xfffbffff
 8004c84:	ffffe0ff 	.word	0xffffe0ff
 8004c88:	08020484 	.word	0x08020484
 8004c8c:	2000005c 	.word	0x2000005c
 8004c90:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004c94:	4bc6      	ldr	r3, [pc, #792]	; (8004fb0 <HAL_RCC_OscConfig+0x670>)
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	2380      	movs	r3, #128	; 0x80
 8004c9a:	009b      	lsls	r3, r3, #2
 8004c9c:	4013      	ands	r3, r2
 8004c9e:	d0e1      	beq.n	8004c64 <HAL_RCC_OscConfig+0x324>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004ca0:	4bc3      	ldr	r3, [pc, #780]	; (8004fb0 <HAL_RCC_OscConfig+0x670>)
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	4ac3      	ldr	r2, [pc, #780]	; (8004fb4 <HAL_RCC_OscConfig+0x674>)
 8004ca6:	4013      	ands	r3, r2
 8004ca8:	0019      	movs	r1, r3
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004cae:	4bc0      	ldr	r3, [pc, #768]	; (8004fb0 <HAL_RCC_OscConfig+0x670>)
 8004cb0:	430a      	orrs	r2, r1
 8004cb2:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004cb4:	4bbe      	ldr	r3, [pc, #760]	; (8004fb0 <HAL_RCC_OscConfig+0x670>)
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	021b      	lsls	r3, r3, #8
 8004cba:	0a19      	lsrs	r1, r3, #8
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6a1b      	ldr	r3, [r3, #32]
 8004cc0:	061a      	lsls	r2, r3, #24
 8004cc2:	4bbb      	ldr	r3, [pc, #748]	; (8004fb0 <HAL_RCC_OscConfig+0x670>)
 8004cc4:	430a      	orrs	r2, r1
 8004cc6:	605a      	str	r2, [r3, #4]
 8004cc8:	e019      	b.n	8004cfe <HAL_RCC_OscConfig+0x3be>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004cca:	4bb9      	ldr	r3, [pc, #740]	; (8004fb0 <HAL_RCC_OscConfig+0x670>)
 8004ccc:	681a      	ldr	r2, [r3, #0]
 8004cce:	4bb8      	ldr	r3, [pc, #736]	; (8004fb0 <HAL_RCC_OscConfig+0x670>)
 8004cd0:	49b9      	ldr	r1, [pc, #740]	; (8004fb8 <HAL_RCC_OscConfig+0x678>)
 8004cd2:	400a      	ands	r2, r1
 8004cd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cd6:	f7ff f8f9 	bl	8003ecc <HAL_GetTick>
 8004cda:	0003      	movs	r3, r0
 8004cdc:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004cde:	e008      	b.n	8004cf2 <HAL_RCC_OscConfig+0x3b2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004ce0:	f7ff f8f4 	bl	8003ecc <HAL_GetTick>
 8004ce4:	0002      	movs	r2, r0
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	1ad3      	subs	r3, r2, r3
 8004cea:	2b02      	cmp	r3, #2
 8004cec:	d901      	bls.n	8004cf2 <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 8004cee:	2303      	movs	r3, #3
 8004cf0:	e1ec      	b.n	80050cc <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004cf2:	4baf      	ldr	r3, [pc, #700]	; (8004fb0 <HAL_RCC_OscConfig+0x670>)
 8004cf4:	681a      	ldr	r2, [r3, #0]
 8004cf6:	2380      	movs	r3, #128	; 0x80
 8004cf8:	009b      	lsls	r3, r3, #2
 8004cfa:	4013      	ands	r3, r2
 8004cfc:	d1f0      	bne.n	8004ce0 <HAL_RCC_OscConfig+0x3a0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	2208      	movs	r2, #8
 8004d04:	4013      	ands	r3, r2
 8004d06:	d036      	beq.n	8004d76 <HAL_RCC_OscConfig+0x436>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	695b      	ldr	r3, [r3, #20]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d019      	beq.n	8004d44 <HAL_RCC_OscConfig+0x404>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d10:	4ba7      	ldr	r3, [pc, #668]	; (8004fb0 <HAL_RCC_OscConfig+0x670>)
 8004d12:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004d14:	4ba6      	ldr	r3, [pc, #664]	; (8004fb0 <HAL_RCC_OscConfig+0x670>)
 8004d16:	2101      	movs	r1, #1
 8004d18:	430a      	orrs	r2, r1
 8004d1a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d1c:	f7ff f8d6 	bl	8003ecc <HAL_GetTick>
 8004d20:	0003      	movs	r3, r0
 8004d22:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004d24:	e008      	b.n	8004d38 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d26:	f7ff f8d1 	bl	8003ecc <HAL_GetTick>
 8004d2a:	0002      	movs	r2, r0
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	1ad3      	subs	r3, r2, r3
 8004d30:	2b02      	cmp	r3, #2
 8004d32:	d901      	bls.n	8004d38 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8004d34:	2303      	movs	r3, #3
 8004d36:	e1c9      	b.n	80050cc <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004d38:	4b9d      	ldr	r3, [pc, #628]	; (8004fb0 <HAL_RCC_OscConfig+0x670>)
 8004d3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d3c:	2202      	movs	r2, #2
 8004d3e:	4013      	ands	r3, r2
 8004d40:	d0f1      	beq.n	8004d26 <HAL_RCC_OscConfig+0x3e6>
 8004d42:	e018      	b.n	8004d76 <HAL_RCC_OscConfig+0x436>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d44:	4b9a      	ldr	r3, [pc, #616]	; (8004fb0 <HAL_RCC_OscConfig+0x670>)
 8004d46:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004d48:	4b99      	ldr	r3, [pc, #612]	; (8004fb0 <HAL_RCC_OscConfig+0x670>)
 8004d4a:	2101      	movs	r1, #1
 8004d4c:	438a      	bics	r2, r1
 8004d4e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d50:	f7ff f8bc 	bl	8003ecc <HAL_GetTick>
 8004d54:	0003      	movs	r3, r0
 8004d56:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004d58:	e008      	b.n	8004d6c <HAL_RCC_OscConfig+0x42c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d5a:	f7ff f8b7 	bl	8003ecc <HAL_GetTick>
 8004d5e:	0002      	movs	r2, r0
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	1ad3      	subs	r3, r2, r3
 8004d64:	2b02      	cmp	r3, #2
 8004d66:	d901      	bls.n	8004d6c <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8004d68:	2303      	movs	r3, #3
 8004d6a:	e1af      	b.n	80050cc <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004d6c:	4b90      	ldr	r3, [pc, #576]	; (8004fb0 <HAL_RCC_OscConfig+0x670>)
 8004d6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d70:	2202      	movs	r2, #2
 8004d72:	4013      	ands	r3, r2
 8004d74:	d1f1      	bne.n	8004d5a <HAL_RCC_OscConfig+0x41a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	2204      	movs	r2, #4
 8004d7c:	4013      	ands	r3, r2
 8004d7e:	d100      	bne.n	8004d82 <HAL_RCC_OscConfig+0x442>
 8004d80:	e0af      	b.n	8004ee2 <HAL_RCC_OscConfig+0x5a2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d82:	2323      	movs	r3, #35	; 0x23
 8004d84:	18fb      	adds	r3, r7, r3
 8004d86:	2200      	movs	r2, #0
 8004d88:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d8a:	4b89      	ldr	r3, [pc, #548]	; (8004fb0 <HAL_RCC_OscConfig+0x670>)
 8004d8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d8e:	2380      	movs	r3, #128	; 0x80
 8004d90:	055b      	lsls	r3, r3, #21
 8004d92:	4013      	ands	r3, r2
 8004d94:	d10a      	bne.n	8004dac <HAL_RCC_OscConfig+0x46c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d96:	4b86      	ldr	r3, [pc, #536]	; (8004fb0 <HAL_RCC_OscConfig+0x670>)
 8004d98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d9a:	4b85      	ldr	r3, [pc, #532]	; (8004fb0 <HAL_RCC_OscConfig+0x670>)
 8004d9c:	2180      	movs	r1, #128	; 0x80
 8004d9e:	0549      	lsls	r1, r1, #21
 8004da0:	430a      	orrs	r2, r1
 8004da2:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8004da4:	2323      	movs	r3, #35	; 0x23
 8004da6:	18fb      	adds	r3, r7, r3
 8004da8:	2201      	movs	r2, #1
 8004daa:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dac:	4b83      	ldr	r3, [pc, #524]	; (8004fbc <HAL_RCC_OscConfig+0x67c>)
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	2380      	movs	r3, #128	; 0x80
 8004db2:	005b      	lsls	r3, r3, #1
 8004db4:	4013      	ands	r3, r2
 8004db6:	d11a      	bne.n	8004dee <HAL_RCC_OscConfig+0x4ae>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004db8:	4b80      	ldr	r3, [pc, #512]	; (8004fbc <HAL_RCC_OscConfig+0x67c>)
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	4b7f      	ldr	r3, [pc, #508]	; (8004fbc <HAL_RCC_OscConfig+0x67c>)
 8004dbe:	2180      	movs	r1, #128	; 0x80
 8004dc0:	0049      	lsls	r1, r1, #1
 8004dc2:	430a      	orrs	r2, r1
 8004dc4:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004dc6:	f7ff f881 	bl	8003ecc <HAL_GetTick>
 8004dca:	0003      	movs	r3, r0
 8004dcc:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dce:	e008      	b.n	8004de2 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dd0:	f7ff f87c 	bl	8003ecc <HAL_GetTick>
 8004dd4:	0002      	movs	r2, r0
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	1ad3      	subs	r3, r2, r3
 8004dda:	2b64      	cmp	r3, #100	; 0x64
 8004ddc:	d901      	bls.n	8004de2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004dde:	2303      	movs	r3, #3
 8004de0:	e174      	b.n	80050cc <HAL_RCC_OscConfig+0x78c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004de2:	4b76      	ldr	r3, [pc, #472]	; (8004fbc <HAL_RCC_OscConfig+0x67c>)
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	2380      	movs	r3, #128	; 0x80
 8004de8:	005b      	lsls	r3, r3, #1
 8004dea:	4013      	ands	r3, r2
 8004dec:	d0f0      	beq.n	8004dd0 <HAL_RCC_OscConfig+0x490>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	689a      	ldr	r2, [r3, #8]
 8004df2:	2380      	movs	r3, #128	; 0x80
 8004df4:	005b      	lsls	r3, r3, #1
 8004df6:	429a      	cmp	r2, r3
 8004df8:	d107      	bne.n	8004e0a <HAL_RCC_OscConfig+0x4ca>
 8004dfa:	4b6d      	ldr	r3, [pc, #436]	; (8004fb0 <HAL_RCC_OscConfig+0x670>)
 8004dfc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004dfe:	4b6c      	ldr	r3, [pc, #432]	; (8004fb0 <HAL_RCC_OscConfig+0x670>)
 8004e00:	2180      	movs	r1, #128	; 0x80
 8004e02:	0049      	lsls	r1, r1, #1
 8004e04:	430a      	orrs	r2, r1
 8004e06:	651a      	str	r2, [r3, #80]	; 0x50
 8004e08:	e031      	b.n	8004e6e <HAL_RCC_OscConfig+0x52e>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d10c      	bne.n	8004e2c <HAL_RCC_OscConfig+0x4ec>
 8004e12:	4b67      	ldr	r3, [pc, #412]	; (8004fb0 <HAL_RCC_OscConfig+0x670>)
 8004e14:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004e16:	4b66      	ldr	r3, [pc, #408]	; (8004fb0 <HAL_RCC_OscConfig+0x670>)
 8004e18:	4967      	ldr	r1, [pc, #412]	; (8004fb8 <HAL_RCC_OscConfig+0x678>)
 8004e1a:	400a      	ands	r2, r1
 8004e1c:	651a      	str	r2, [r3, #80]	; 0x50
 8004e1e:	4b64      	ldr	r3, [pc, #400]	; (8004fb0 <HAL_RCC_OscConfig+0x670>)
 8004e20:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004e22:	4b63      	ldr	r3, [pc, #396]	; (8004fb0 <HAL_RCC_OscConfig+0x670>)
 8004e24:	4966      	ldr	r1, [pc, #408]	; (8004fc0 <HAL_RCC_OscConfig+0x680>)
 8004e26:	400a      	ands	r2, r1
 8004e28:	651a      	str	r2, [r3, #80]	; 0x50
 8004e2a:	e020      	b.n	8004e6e <HAL_RCC_OscConfig+0x52e>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	689a      	ldr	r2, [r3, #8]
 8004e30:	23a0      	movs	r3, #160	; 0xa0
 8004e32:	00db      	lsls	r3, r3, #3
 8004e34:	429a      	cmp	r2, r3
 8004e36:	d10e      	bne.n	8004e56 <HAL_RCC_OscConfig+0x516>
 8004e38:	4b5d      	ldr	r3, [pc, #372]	; (8004fb0 <HAL_RCC_OscConfig+0x670>)
 8004e3a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004e3c:	4b5c      	ldr	r3, [pc, #368]	; (8004fb0 <HAL_RCC_OscConfig+0x670>)
 8004e3e:	2180      	movs	r1, #128	; 0x80
 8004e40:	00c9      	lsls	r1, r1, #3
 8004e42:	430a      	orrs	r2, r1
 8004e44:	651a      	str	r2, [r3, #80]	; 0x50
 8004e46:	4b5a      	ldr	r3, [pc, #360]	; (8004fb0 <HAL_RCC_OscConfig+0x670>)
 8004e48:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004e4a:	4b59      	ldr	r3, [pc, #356]	; (8004fb0 <HAL_RCC_OscConfig+0x670>)
 8004e4c:	2180      	movs	r1, #128	; 0x80
 8004e4e:	0049      	lsls	r1, r1, #1
 8004e50:	430a      	orrs	r2, r1
 8004e52:	651a      	str	r2, [r3, #80]	; 0x50
 8004e54:	e00b      	b.n	8004e6e <HAL_RCC_OscConfig+0x52e>
 8004e56:	4b56      	ldr	r3, [pc, #344]	; (8004fb0 <HAL_RCC_OscConfig+0x670>)
 8004e58:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004e5a:	4b55      	ldr	r3, [pc, #340]	; (8004fb0 <HAL_RCC_OscConfig+0x670>)
 8004e5c:	4956      	ldr	r1, [pc, #344]	; (8004fb8 <HAL_RCC_OscConfig+0x678>)
 8004e5e:	400a      	ands	r2, r1
 8004e60:	651a      	str	r2, [r3, #80]	; 0x50
 8004e62:	4b53      	ldr	r3, [pc, #332]	; (8004fb0 <HAL_RCC_OscConfig+0x670>)
 8004e64:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004e66:	4b52      	ldr	r3, [pc, #328]	; (8004fb0 <HAL_RCC_OscConfig+0x670>)
 8004e68:	4955      	ldr	r1, [pc, #340]	; (8004fc0 <HAL_RCC_OscConfig+0x680>)
 8004e6a:	400a      	ands	r2, r1
 8004e6c:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d015      	beq.n	8004ea2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e76:	f7ff f829 	bl	8003ecc <HAL_GetTick>
 8004e7a:	0003      	movs	r3, r0
 8004e7c:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004e7e:	e009      	b.n	8004e94 <HAL_RCC_OscConfig+0x554>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e80:	f7ff f824 	bl	8003ecc <HAL_GetTick>
 8004e84:	0002      	movs	r2, r0
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	1ad3      	subs	r3, r2, r3
 8004e8a:	4a4e      	ldr	r2, [pc, #312]	; (8004fc4 <HAL_RCC_OscConfig+0x684>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d901      	bls.n	8004e94 <HAL_RCC_OscConfig+0x554>
        {
          return HAL_TIMEOUT;
 8004e90:	2303      	movs	r3, #3
 8004e92:	e11b      	b.n	80050cc <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004e94:	4b46      	ldr	r3, [pc, #280]	; (8004fb0 <HAL_RCC_OscConfig+0x670>)
 8004e96:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004e98:	2380      	movs	r3, #128	; 0x80
 8004e9a:	009b      	lsls	r3, r3, #2
 8004e9c:	4013      	ands	r3, r2
 8004e9e:	d0ef      	beq.n	8004e80 <HAL_RCC_OscConfig+0x540>
 8004ea0:	e014      	b.n	8004ecc <HAL_RCC_OscConfig+0x58c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ea2:	f7ff f813 	bl	8003ecc <HAL_GetTick>
 8004ea6:	0003      	movs	r3, r0
 8004ea8:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004eaa:	e009      	b.n	8004ec0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004eac:	f7ff f80e 	bl	8003ecc <HAL_GetTick>
 8004eb0:	0002      	movs	r2, r0
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	1ad3      	subs	r3, r2, r3
 8004eb6:	4a43      	ldr	r2, [pc, #268]	; (8004fc4 <HAL_RCC_OscConfig+0x684>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d901      	bls.n	8004ec0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004ebc:	2303      	movs	r3, #3
 8004ebe:	e105      	b.n	80050cc <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004ec0:	4b3b      	ldr	r3, [pc, #236]	; (8004fb0 <HAL_RCC_OscConfig+0x670>)
 8004ec2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004ec4:	2380      	movs	r3, #128	; 0x80
 8004ec6:	009b      	lsls	r3, r3, #2
 8004ec8:	4013      	ands	r3, r2
 8004eca:	d1ef      	bne.n	8004eac <HAL_RCC_OscConfig+0x56c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004ecc:	2323      	movs	r3, #35	; 0x23
 8004ece:	18fb      	adds	r3, r7, r3
 8004ed0:	781b      	ldrb	r3, [r3, #0]
 8004ed2:	2b01      	cmp	r3, #1
 8004ed4:	d105      	bne.n	8004ee2 <HAL_RCC_OscConfig+0x5a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ed6:	4b36      	ldr	r3, [pc, #216]	; (8004fb0 <HAL_RCC_OscConfig+0x670>)
 8004ed8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004eda:	4b35      	ldr	r3, [pc, #212]	; (8004fb0 <HAL_RCC_OscConfig+0x670>)
 8004edc:	493a      	ldr	r1, [pc, #232]	; (8004fc8 <HAL_RCC_OscConfig+0x688>)
 8004ede:	400a      	ands	r2, r1
 8004ee0:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	2220      	movs	r2, #32
 8004ee8:	4013      	ands	r3, r2
 8004eea:	d049      	beq.n	8004f80 <HAL_RCC_OscConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	699b      	ldr	r3, [r3, #24]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d026      	beq.n	8004f42 <HAL_RCC_OscConfig+0x602>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8004ef4:	4b2e      	ldr	r3, [pc, #184]	; (8004fb0 <HAL_RCC_OscConfig+0x670>)
 8004ef6:	689a      	ldr	r2, [r3, #8]
 8004ef8:	4b2d      	ldr	r3, [pc, #180]	; (8004fb0 <HAL_RCC_OscConfig+0x670>)
 8004efa:	2101      	movs	r1, #1
 8004efc:	430a      	orrs	r2, r1
 8004efe:	609a      	str	r2, [r3, #8]
 8004f00:	4b2b      	ldr	r3, [pc, #172]	; (8004fb0 <HAL_RCC_OscConfig+0x670>)
 8004f02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f04:	4b2a      	ldr	r3, [pc, #168]	; (8004fb0 <HAL_RCC_OscConfig+0x670>)
 8004f06:	2101      	movs	r1, #1
 8004f08:	430a      	orrs	r2, r1
 8004f0a:	635a      	str	r2, [r3, #52]	; 0x34
 8004f0c:	4b2f      	ldr	r3, [pc, #188]	; (8004fcc <HAL_RCC_OscConfig+0x68c>)
 8004f0e:	6a1a      	ldr	r2, [r3, #32]
 8004f10:	4b2e      	ldr	r3, [pc, #184]	; (8004fcc <HAL_RCC_OscConfig+0x68c>)
 8004f12:	2180      	movs	r1, #128	; 0x80
 8004f14:	0189      	lsls	r1, r1, #6
 8004f16:	430a      	orrs	r2, r1
 8004f18:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f1a:	f7fe ffd7 	bl	8003ecc <HAL_GetTick>
 8004f1e:	0003      	movs	r3, r0
 8004f20:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004f22:	e008      	b.n	8004f36 <HAL_RCC_OscConfig+0x5f6>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f24:	f7fe ffd2 	bl	8003ecc <HAL_GetTick>
 8004f28:	0002      	movs	r2, r0
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	1ad3      	subs	r3, r2, r3
 8004f2e:	2b02      	cmp	r3, #2
 8004f30:	d901      	bls.n	8004f36 <HAL_RCC_OscConfig+0x5f6>
          {
            return HAL_TIMEOUT;
 8004f32:	2303      	movs	r3, #3
 8004f34:	e0ca      	b.n	80050cc <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004f36:	4b1e      	ldr	r3, [pc, #120]	; (8004fb0 <HAL_RCC_OscConfig+0x670>)
 8004f38:	689b      	ldr	r3, [r3, #8]
 8004f3a:	2202      	movs	r2, #2
 8004f3c:	4013      	ands	r3, r2
 8004f3e:	d0f1      	beq.n	8004f24 <HAL_RCC_OscConfig+0x5e4>
 8004f40:	e01e      	b.n	8004f80 <HAL_RCC_OscConfig+0x640>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8004f42:	4b1b      	ldr	r3, [pc, #108]	; (8004fb0 <HAL_RCC_OscConfig+0x670>)
 8004f44:	689a      	ldr	r2, [r3, #8]
 8004f46:	4b1a      	ldr	r3, [pc, #104]	; (8004fb0 <HAL_RCC_OscConfig+0x670>)
 8004f48:	2101      	movs	r1, #1
 8004f4a:	438a      	bics	r2, r1
 8004f4c:	609a      	str	r2, [r3, #8]
 8004f4e:	4b1f      	ldr	r3, [pc, #124]	; (8004fcc <HAL_RCC_OscConfig+0x68c>)
 8004f50:	6a1a      	ldr	r2, [r3, #32]
 8004f52:	4b1e      	ldr	r3, [pc, #120]	; (8004fcc <HAL_RCC_OscConfig+0x68c>)
 8004f54:	491e      	ldr	r1, [pc, #120]	; (8004fd0 <HAL_RCC_OscConfig+0x690>)
 8004f56:	400a      	ands	r2, r1
 8004f58:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f5a:	f7fe ffb7 	bl	8003ecc <HAL_GetTick>
 8004f5e:	0003      	movs	r3, r0
 8004f60:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004f62:	e008      	b.n	8004f76 <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f64:	f7fe ffb2 	bl	8003ecc <HAL_GetTick>
 8004f68:	0002      	movs	r2, r0
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	1ad3      	subs	r3, r2, r3
 8004f6e:	2b02      	cmp	r3, #2
 8004f70:	d901      	bls.n	8004f76 <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 8004f72:	2303      	movs	r3, #3
 8004f74:	e0aa      	b.n	80050cc <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004f76:	4b0e      	ldr	r3, [pc, #56]	; (8004fb0 <HAL_RCC_OscConfig+0x670>)
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	2202      	movs	r2, #2
 8004f7c:	4013      	ands	r3, r2
 8004f7e:	d1f1      	bne.n	8004f64 <HAL_RCC_OscConfig+0x624>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d100      	bne.n	8004f8a <HAL_RCC_OscConfig+0x64a>
 8004f88:	e09f      	b.n	80050ca <HAL_RCC_OscConfig+0x78a>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004f8a:	69fb      	ldr	r3, [r7, #28]
 8004f8c:	2b0c      	cmp	r3, #12
 8004f8e:	d100      	bne.n	8004f92 <HAL_RCC_OscConfig+0x652>
 8004f90:	e078      	b.n	8005084 <HAL_RCC_OscConfig+0x744>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f96:	2b02      	cmp	r3, #2
 8004f98:	d159      	bne.n	800504e <HAL_RCC_OscConfig+0x70e>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f9a:	4b05      	ldr	r3, [pc, #20]	; (8004fb0 <HAL_RCC_OscConfig+0x670>)
 8004f9c:	681a      	ldr	r2, [r3, #0]
 8004f9e:	4b04      	ldr	r3, [pc, #16]	; (8004fb0 <HAL_RCC_OscConfig+0x670>)
 8004fa0:	490c      	ldr	r1, [pc, #48]	; (8004fd4 <HAL_RCC_OscConfig+0x694>)
 8004fa2:	400a      	ands	r2, r1
 8004fa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fa6:	f7fe ff91 	bl	8003ecc <HAL_GetTick>
 8004faa:	0003      	movs	r3, r0
 8004fac:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004fae:	e01c      	b.n	8004fea <HAL_RCC_OscConfig+0x6aa>
 8004fb0:	40021000 	.word	0x40021000
 8004fb4:	ffff1fff 	.word	0xffff1fff
 8004fb8:	fffffeff 	.word	0xfffffeff
 8004fbc:	40007000 	.word	0x40007000
 8004fc0:	fffffbff 	.word	0xfffffbff
 8004fc4:	00001388 	.word	0x00001388
 8004fc8:	efffffff 	.word	0xefffffff
 8004fcc:	40010000 	.word	0x40010000
 8004fd0:	ffffdfff 	.word	0xffffdfff
 8004fd4:	feffffff 	.word	0xfeffffff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fd8:	f7fe ff78 	bl	8003ecc <HAL_GetTick>
 8004fdc:	0002      	movs	r2, r0
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	1ad3      	subs	r3, r2, r3
 8004fe2:	2b02      	cmp	r3, #2
 8004fe4:	d901      	bls.n	8004fea <HAL_RCC_OscConfig+0x6aa>
          {
            return HAL_TIMEOUT;
 8004fe6:	2303      	movs	r3, #3
 8004fe8:	e070      	b.n	80050cc <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004fea:	4b3a      	ldr	r3, [pc, #232]	; (80050d4 <HAL_RCC_OscConfig+0x794>)
 8004fec:	681a      	ldr	r2, [r3, #0]
 8004fee:	2380      	movs	r3, #128	; 0x80
 8004ff0:	049b      	lsls	r3, r3, #18
 8004ff2:	4013      	ands	r3, r2
 8004ff4:	d1f0      	bne.n	8004fd8 <HAL_RCC_OscConfig+0x698>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ff6:	4b37      	ldr	r3, [pc, #220]	; (80050d4 <HAL_RCC_OscConfig+0x794>)
 8004ff8:	68db      	ldr	r3, [r3, #12]
 8004ffa:	4a37      	ldr	r2, [pc, #220]	; (80050d8 <HAL_RCC_OscConfig+0x798>)
 8004ffc:	4013      	ands	r3, r2
 8004ffe:	0019      	movs	r1, r3
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005008:	431a      	orrs	r2, r3
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800500e:	431a      	orrs	r2, r3
 8005010:	4b30      	ldr	r3, [pc, #192]	; (80050d4 <HAL_RCC_OscConfig+0x794>)
 8005012:	430a      	orrs	r2, r1
 8005014:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005016:	4b2f      	ldr	r3, [pc, #188]	; (80050d4 <HAL_RCC_OscConfig+0x794>)
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	4b2e      	ldr	r3, [pc, #184]	; (80050d4 <HAL_RCC_OscConfig+0x794>)
 800501c:	2180      	movs	r1, #128	; 0x80
 800501e:	0449      	lsls	r1, r1, #17
 8005020:	430a      	orrs	r2, r1
 8005022:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005024:	f7fe ff52 	bl	8003ecc <HAL_GetTick>
 8005028:	0003      	movs	r3, r0
 800502a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800502c:	e008      	b.n	8005040 <HAL_RCC_OscConfig+0x700>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800502e:	f7fe ff4d 	bl	8003ecc <HAL_GetTick>
 8005032:	0002      	movs	r2, r0
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	1ad3      	subs	r3, r2, r3
 8005038:	2b02      	cmp	r3, #2
 800503a:	d901      	bls.n	8005040 <HAL_RCC_OscConfig+0x700>
          {
            return HAL_TIMEOUT;
 800503c:	2303      	movs	r3, #3
 800503e:	e045      	b.n	80050cc <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8005040:	4b24      	ldr	r3, [pc, #144]	; (80050d4 <HAL_RCC_OscConfig+0x794>)
 8005042:	681a      	ldr	r2, [r3, #0]
 8005044:	2380      	movs	r3, #128	; 0x80
 8005046:	049b      	lsls	r3, r3, #18
 8005048:	4013      	ands	r3, r2
 800504a:	d0f0      	beq.n	800502e <HAL_RCC_OscConfig+0x6ee>
 800504c:	e03d      	b.n	80050ca <HAL_RCC_OscConfig+0x78a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800504e:	4b21      	ldr	r3, [pc, #132]	; (80050d4 <HAL_RCC_OscConfig+0x794>)
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	4b20      	ldr	r3, [pc, #128]	; (80050d4 <HAL_RCC_OscConfig+0x794>)
 8005054:	4921      	ldr	r1, [pc, #132]	; (80050dc <HAL_RCC_OscConfig+0x79c>)
 8005056:	400a      	ands	r2, r1
 8005058:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800505a:	f7fe ff37 	bl	8003ecc <HAL_GetTick>
 800505e:	0003      	movs	r3, r0
 8005060:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005062:	e008      	b.n	8005076 <HAL_RCC_OscConfig+0x736>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005064:	f7fe ff32 	bl	8003ecc <HAL_GetTick>
 8005068:	0002      	movs	r2, r0
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	1ad3      	subs	r3, r2, r3
 800506e:	2b02      	cmp	r3, #2
 8005070:	d901      	bls.n	8005076 <HAL_RCC_OscConfig+0x736>
          {
            return HAL_TIMEOUT;
 8005072:	2303      	movs	r3, #3
 8005074:	e02a      	b.n	80050cc <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005076:	4b17      	ldr	r3, [pc, #92]	; (80050d4 <HAL_RCC_OscConfig+0x794>)
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	2380      	movs	r3, #128	; 0x80
 800507c:	049b      	lsls	r3, r3, #18
 800507e:	4013      	ands	r3, r2
 8005080:	d1f0      	bne.n	8005064 <HAL_RCC_OscConfig+0x724>
 8005082:	e022      	b.n	80050ca <HAL_RCC_OscConfig+0x78a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005088:	2b01      	cmp	r3, #1
 800508a:	d101      	bne.n	8005090 <HAL_RCC_OscConfig+0x750>
      {
        return HAL_ERROR;
 800508c:	2301      	movs	r3, #1
 800508e:	e01d      	b.n	80050cc <HAL_RCC_OscConfig+0x78c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005090:	4b10      	ldr	r3, [pc, #64]	; (80050d4 <HAL_RCC_OscConfig+0x794>)
 8005092:	68db      	ldr	r3, [r3, #12]
 8005094:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005096:	69ba      	ldr	r2, [r7, #24]
 8005098:	2380      	movs	r3, #128	; 0x80
 800509a:	025b      	lsls	r3, r3, #9
 800509c:	401a      	ands	r2, r3
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050a2:	429a      	cmp	r2, r3
 80050a4:	d10f      	bne.n	80050c6 <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80050a6:	69ba      	ldr	r2, [r7, #24]
 80050a8:	23f0      	movs	r3, #240	; 0xf0
 80050aa:	039b      	lsls	r3, r3, #14
 80050ac:	401a      	ands	r2, r3
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050b2:	429a      	cmp	r2, r3
 80050b4:	d107      	bne.n	80050c6 <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80050b6:	69ba      	ldr	r2, [r7, #24]
 80050b8:	23c0      	movs	r3, #192	; 0xc0
 80050ba:	041b      	lsls	r3, r3, #16
 80050bc:	401a      	ands	r2, r3
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80050c2:	429a      	cmp	r2, r3
 80050c4:	d001      	beq.n	80050ca <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	e000      	b.n	80050cc <HAL_RCC_OscConfig+0x78c>
        }
      }
    }
  }

  return HAL_OK;
 80050ca:	2300      	movs	r3, #0
}
 80050cc:	0018      	movs	r0, r3
 80050ce:	46bd      	mov	sp, r7
 80050d0:	b00a      	add	sp, #40	; 0x28
 80050d2:	bdb0      	pop	{r4, r5, r7, pc}
 80050d4:	40021000 	.word	0x40021000
 80050d8:	ff02ffff 	.word	0xff02ffff
 80050dc:	feffffff 	.word	0xfeffffff

080050e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80050e0:	b5b0      	push	{r4, r5, r7, lr}
 80050e2:	b084      	sub	sp, #16
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
 80050e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d101      	bne.n	80050f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80050f0:	2301      	movs	r3, #1
 80050f2:	e10d      	b.n	8005310 <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80050f4:	4b88      	ldr	r3, [pc, #544]	; (8005318 <HAL_RCC_ClockConfig+0x238>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	2201      	movs	r2, #1
 80050fa:	4013      	ands	r3, r2
 80050fc:	683a      	ldr	r2, [r7, #0]
 80050fe:	429a      	cmp	r2, r3
 8005100:	d911      	bls.n	8005126 <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005102:	4b85      	ldr	r3, [pc, #532]	; (8005318 <HAL_RCC_ClockConfig+0x238>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	2201      	movs	r2, #1
 8005108:	4393      	bics	r3, r2
 800510a:	0019      	movs	r1, r3
 800510c:	4b82      	ldr	r3, [pc, #520]	; (8005318 <HAL_RCC_ClockConfig+0x238>)
 800510e:	683a      	ldr	r2, [r7, #0]
 8005110:	430a      	orrs	r2, r1
 8005112:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005114:	4b80      	ldr	r3, [pc, #512]	; (8005318 <HAL_RCC_ClockConfig+0x238>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	2201      	movs	r2, #1
 800511a:	4013      	ands	r3, r2
 800511c:	683a      	ldr	r2, [r7, #0]
 800511e:	429a      	cmp	r2, r3
 8005120:	d001      	beq.n	8005126 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8005122:	2301      	movs	r3, #1
 8005124:	e0f4      	b.n	8005310 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	2202      	movs	r2, #2
 800512c:	4013      	ands	r3, r2
 800512e:	d009      	beq.n	8005144 <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005130:	4b7a      	ldr	r3, [pc, #488]	; (800531c <HAL_RCC_ClockConfig+0x23c>)
 8005132:	68db      	ldr	r3, [r3, #12]
 8005134:	22f0      	movs	r2, #240	; 0xf0
 8005136:	4393      	bics	r3, r2
 8005138:	0019      	movs	r1, r3
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	689a      	ldr	r2, [r3, #8]
 800513e:	4b77      	ldr	r3, [pc, #476]	; (800531c <HAL_RCC_ClockConfig+0x23c>)
 8005140:	430a      	orrs	r2, r1
 8005142:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	2201      	movs	r2, #1
 800514a:	4013      	ands	r3, r2
 800514c:	d100      	bne.n	8005150 <HAL_RCC_ClockConfig+0x70>
 800514e:	e089      	b.n	8005264 <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	2b02      	cmp	r3, #2
 8005156:	d107      	bne.n	8005168 <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005158:	4b70      	ldr	r3, [pc, #448]	; (800531c <HAL_RCC_ClockConfig+0x23c>)
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	2380      	movs	r3, #128	; 0x80
 800515e:	029b      	lsls	r3, r3, #10
 8005160:	4013      	ands	r3, r2
 8005162:	d120      	bne.n	80051a6 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8005164:	2301      	movs	r3, #1
 8005166:	e0d3      	b.n	8005310 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	2b03      	cmp	r3, #3
 800516e:	d107      	bne.n	8005180 <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005170:	4b6a      	ldr	r3, [pc, #424]	; (800531c <HAL_RCC_ClockConfig+0x23c>)
 8005172:	681a      	ldr	r2, [r3, #0]
 8005174:	2380      	movs	r3, #128	; 0x80
 8005176:	049b      	lsls	r3, r3, #18
 8005178:	4013      	ands	r3, r2
 800517a:	d114      	bne.n	80051a6 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 800517c:	2301      	movs	r3, #1
 800517e:	e0c7      	b.n	8005310 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	2b01      	cmp	r3, #1
 8005186:	d106      	bne.n	8005196 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005188:	4b64      	ldr	r3, [pc, #400]	; (800531c <HAL_RCC_ClockConfig+0x23c>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	2204      	movs	r2, #4
 800518e:	4013      	ands	r3, r2
 8005190:	d109      	bne.n	80051a6 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	e0bc      	b.n	8005310 <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005196:	4b61      	ldr	r3, [pc, #388]	; (800531c <HAL_RCC_ClockConfig+0x23c>)
 8005198:	681a      	ldr	r2, [r3, #0]
 800519a:	2380      	movs	r3, #128	; 0x80
 800519c:	009b      	lsls	r3, r3, #2
 800519e:	4013      	ands	r3, r2
 80051a0:	d101      	bne.n	80051a6 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	e0b4      	b.n	8005310 <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80051a6:	4b5d      	ldr	r3, [pc, #372]	; (800531c <HAL_RCC_ClockConfig+0x23c>)
 80051a8:	68db      	ldr	r3, [r3, #12]
 80051aa:	2203      	movs	r2, #3
 80051ac:	4393      	bics	r3, r2
 80051ae:	0019      	movs	r1, r3
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	685a      	ldr	r2, [r3, #4]
 80051b4:	4b59      	ldr	r3, [pc, #356]	; (800531c <HAL_RCC_ClockConfig+0x23c>)
 80051b6:	430a      	orrs	r2, r1
 80051b8:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80051ba:	f7fe fe87 	bl	8003ecc <HAL_GetTick>
 80051be:	0003      	movs	r3, r0
 80051c0:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	2b02      	cmp	r3, #2
 80051c8:	d111      	bne.n	80051ee <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80051ca:	e009      	b.n	80051e0 <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051cc:	f7fe fe7e 	bl	8003ecc <HAL_GetTick>
 80051d0:	0002      	movs	r2, r0
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	1ad3      	subs	r3, r2, r3
 80051d6:	4a52      	ldr	r2, [pc, #328]	; (8005320 <HAL_RCC_ClockConfig+0x240>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d901      	bls.n	80051e0 <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 80051dc:	2303      	movs	r3, #3
 80051de:	e097      	b.n	8005310 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80051e0:	4b4e      	ldr	r3, [pc, #312]	; (800531c <HAL_RCC_ClockConfig+0x23c>)
 80051e2:	68db      	ldr	r3, [r3, #12]
 80051e4:	220c      	movs	r2, #12
 80051e6:	4013      	ands	r3, r2
 80051e8:	2b08      	cmp	r3, #8
 80051ea:	d1ef      	bne.n	80051cc <HAL_RCC_ClockConfig+0xec>
 80051ec:	e03a      	b.n	8005264 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	2b03      	cmp	r3, #3
 80051f4:	d111      	bne.n	800521a <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80051f6:	e009      	b.n	800520c <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051f8:	f7fe fe68 	bl	8003ecc <HAL_GetTick>
 80051fc:	0002      	movs	r2, r0
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	1ad3      	subs	r3, r2, r3
 8005202:	4a47      	ldr	r2, [pc, #284]	; (8005320 <HAL_RCC_ClockConfig+0x240>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d901      	bls.n	800520c <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 8005208:	2303      	movs	r3, #3
 800520a:	e081      	b.n	8005310 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800520c:	4b43      	ldr	r3, [pc, #268]	; (800531c <HAL_RCC_ClockConfig+0x23c>)
 800520e:	68db      	ldr	r3, [r3, #12]
 8005210:	220c      	movs	r2, #12
 8005212:	4013      	ands	r3, r2
 8005214:	2b0c      	cmp	r3, #12
 8005216:	d1ef      	bne.n	80051f8 <HAL_RCC_ClockConfig+0x118>
 8005218:	e024      	b.n	8005264 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	2b01      	cmp	r3, #1
 8005220:	d11b      	bne.n	800525a <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005222:	e009      	b.n	8005238 <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005224:	f7fe fe52 	bl	8003ecc <HAL_GetTick>
 8005228:	0002      	movs	r2, r0
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	1ad3      	subs	r3, r2, r3
 800522e:	4a3c      	ldr	r2, [pc, #240]	; (8005320 <HAL_RCC_ClockConfig+0x240>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d901      	bls.n	8005238 <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 8005234:	2303      	movs	r3, #3
 8005236:	e06b      	b.n	8005310 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005238:	4b38      	ldr	r3, [pc, #224]	; (800531c <HAL_RCC_ClockConfig+0x23c>)
 800523a:	68db      	ldr	r3, [r3, #12]
 800523c:	220c      	movs	r2, #12
 800523e:	4013      	ands	r3, r2
 8005240:	2b04      	cmp	r3, #4
 8005242:	d1ef      	bne.n	8005224 <HAL_RCC_ClockConfig+0x144>
 8005244:	e00e      	b.n	8005264 <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005246:	f7fe fe41 	bl	8003ecc <HAL_GetTick>
 800524a:	0002      	movs	r2, r0
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	1ad3      	subs	r3, r2, r3
 8005250:	4a33      	ldr	r2, [pc, #204]	; (8005320 <HAL_RCC_ClockConfig+0x240>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d901      	bls.n	800525a <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 8005256:	2303      	movs	r3, #3
 8005258:	e05a      	b.n	8005310 <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800525a:	4b30      	ldr	r3, [pc, #192]	; (800531c <HAL_RCC_ClockConfig+0x23c>)
 800525c:	68db      	ldr	r3, [r3, #12]
 800525e:	220c      	movs	r2, #12
 8005260:	4013      	ands	r3, r2
 8005262:	d1f0      	bne.n	8005246 <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005264:	4b2c      	ldr	r3, [pc, #176]	; (8005318 <HAL_RCC_ClockConfig+0x238>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	2201      	movs	r2, #1
 800526a:	4013      	ands	r3, r2
 800526c:	683a      	ldr	r2, [r7, #0]
 800526e:	429a      	cmp	r2, r3
 8005270:	d211      	bcs.n	8005296 <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005272:	4b29      	ldr	r3, [pc, #164]	; (8005318 <HAL_RCC_ClockConfig+0x238>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	2201      	movs	r2, #1
 8005278:	4393      	bics	r3, r2
 800527a:	0019      	movs	r1, r3
 800527c:	4b26      	ldr	r3, [pc, #152]	; (8005318 <HAL_RCC_ClockConfig+0x238>)
 800527e:	683a      	ldr	r2, [r7, #0]
 8005280:	430a      	orrs	r2, r1
 8005282:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005284:	4b24      	ldr	r3, [pc, #144]	; (8005318 <HAL_RCC_ClockConfig+0x238>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	2201      	movs	r2, #1
 800528a:	4013      	ands	r3, r2
 800528c:	683a      	ldr	r2, [r7, #0]
 800528e:	429a      	cmp	r2, r3
 8005290:	d001      	beq.n	8005296 <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	e03c      	b.n	8005310 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	2204      	movs	r2, #4
 800529c:	4013      	ands	r3, r2
 800529e:	d009      	beq.n	80052b4 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80052a0:	4b1e      	ldr	r3, [pc, #120]	; (800531c <HAL_RCC_ClockConfig+0x23c>)
 80052a2:	68db      	ldr	r3, [r3, #12]
 80052a4:	4a1f      	ldr	r2, [pc, #124]	; (8005324 <HAL_RCC_ClockConfig+0x244>)
 80052a6:	4013      	ands	r3, r2
 80052a8:	0019      	movs	r1, r3
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	68da      	ldr	r2, [r3, #12]
 80052ae:	4b1b      	ldr	r3, [pc, #108]	; (800531c <HAL_RCC_ClockConfig+0x23c>)
 80052b0:	430a      	orrs	r2, r1
 80052b2:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	2208      	movs	r2, #8
 80052ba:	4013      	ands	r3, r2
 80052bc:	d00a      	beq.n	80052d4 <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80052be:	4b17      	ldr	r3, [pc, #92]	; (800531c <HAL_RCC_ClockConfig+0x23c>)
 80052c0:	68db      	ldr	r3, [r3, #12]
 80052c2:	4a19      	ldr	r2, [pc, #100]	; (8005328 <HAL_RCC_ClockConfig+0x248>)
 80052c4:	4013      	ands	r3, r2
 80052c6:	0019      	movs	r1, r3
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	691b      	ldr	r3, [r3, #16]
 80052cc:	00da      	lsls	r2, r3, #3
 80052ce:	4b13      	ldr	r3, [pc, #76]	; (800531c <HAL_RCC_ClockConfig+0x23c>)
 80052d0:	430a      	orrs	r2, r1
 80052d2:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80052d4:	f000 f82e 	bl	8005334 <HAL_RCC_GetSysClockFreq>
 80052d8:	0001      	movs	r1, r0
 80052da:	4b10      	ldr	r3, [pc, #64]	; (800531c <HAL_RCC_ClockConfig+0x23c>)
 80052dc:	68db      	ldr	r3, [r3, #12]
 80052de:	091b      	lsrs	r3, r3, #4
 80052e0:	220f      	movs	r2, #15
 80052e2:	4013      	ands	r3, r2
 80052e4:	4a11      	ldr	r2, [pc, #68]	; (800532c <HAL_RCC_ClockConfig+0x24c>)
 80052e6:	5cd3      	ldrb	r3, [r2, r3]
 80052e8:	000a      	movs	r2, r1
 80052ea:	40da      	lsrs	r2, r3
 80052ec:	4b10      	ldr	r3, [pc, #64]	; (8005330 <HAL_RCC_ClockConfig+0x250>)
 80052ee:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 80052f0:	250b      	movs	r5, #11
 80052f2:	197c      	adds	r4, r7, r5
 80052f4:	2000      	movs	r0, #0
 80052f6:	f7fe fdb5 	bl	8003e64 <HAL_InitTick>
 80052fa:	0003      	movs	r3, r0
 80052fc:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80052fe:	197b      	adds	r3, r7, r5
 8005300:	781b      	ldrb	r3, [r3, #0]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d003      	beq.n	800530e <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 8005306:	230b      	movs	r3, #11
 8005308:	18fb      	adds	r3, r7, r3
 800530a:	781b      	ldrb	r3, [r3, #0]
 800530c:	e000      	b.n	8005310 <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 800530e:	2300      	movs	r3, #0
}
 8005310:	0018      	movs	r0, r3
 8005312:	46bd      	mov	sp, r7
 8005314:	b004      	add	sp, #16
 8005316:	bdb0      	pop	{r4, r5, r7, pc}
 8005318:	40022000 	.word	0x40022000
 800531c:	40021000 	.word	0x40021000
 8005320:	00001388 	.word	0x00001388
 8005324:	fffff8ff 	.word	0xfffff8ff
 8005328:	ffffc7ff 	.word	0xffffc7ff
 800532c:	08020484 	.word	0x08020484
 8005330:	2000005c 	.word	0x2000005c

08005334 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b086      	sub	sp, #24
 8005338:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800533a:	4b3b      	ldr	r3, [pc, #236]	; (8005428 <HAL_RCC_GetSysClockFreq+0xf4>)
 800533c:	68db      	ldr	r3, [r3, #12]
 800533e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	220c      	movs	r2, #12
 8005344:	4013      	ands	r3, r2
 8005346:	2b08      	cmp	r3, #8
 8005348:	d00e      	beq.n	8005368 <HAL_RCC_GetSysClockFreq+0x34>
 800534a:	2b0c      	cmp	r3, #12
 800534c:	d00f      	beq.n	800536e <HAL_RCC_GetSysClockFreq+0x3a>
 800534e:	2b04      	cmp	r3, #4
 8005350:	d157      	bne.n	8005402 <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005352:	4b35      	ldr	r3, [pc, #212]	; (8005428 <HAL_RCC_GetSysClockFreq+0xf4>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	2210      	movs	r2, #16
 8005358:	4013      	ands	r3, r2
 800535a:	d002      	beq.n	8005362 <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800535c:	4b33      	ldr	r3, [pc, #204]	; (800542c <HAL_RCC_GetSysClockFreq+0xf8>)
 800535e:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8005360:	e05d      	b.n	800541e <HAL_RCC_GetSysClockFreq+0xea>
        sysclockfreq =  HSI_VALUE;
 8005362:	4b33      	ldr	r3, [pc, #204]	; (8005430 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005364:	613b      	str	r3, [r7, #16]
      break;
 8005366:	e05a      	b.n	800541e <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005368:	4b32      	ldr	r3, [pc, #200]	; (8005434 <HAL_RCC_GetSysClockFreq+0x100>)
 800536a:	613b      	str	r3, [r7, #16]
      break;
 800536c:	e057      	b.n	800541e <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	0c9b      	lsrs	r3, r3, #18
 8005372:	220f      	movs	r2, #15
 8005374:	4013      	ands	r3, r2
 8005376:	4a30      	ldr	r2, [pc, #192]	; (8005438 <HAL_RCC_GetSysClockFreq+0x104>)
 8005378:	5cd3      	ldrb	r3, [r2, r3]
 800537a:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	0d9b      	lsrs	r3, r3, #22
 8005380:	2203      	movs	r2, #3
 8005382:	4013      	ands	r3, r2
 8005384:	3301      	adds	r3, #1
 8005386:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005388:	4b27      	ldr	r3, [pc, #156]	; (8005428 <HAL_RCC_GetSysClockFreq+0xf4>)
 800538a:	68da      	ldr	r2, [r3, #12]
 800538c:	2380      	movs	r3, #128	; 0x80
 800538e:	025b      	lsls	r3, r3, #9
 8005390:	4013      	ands	r3, r2
 8005392:	d00f      	beq.n	80053b4 <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 8005394:	68b9      	ldr	r1, [r7, #8]
 8005396:	000a      	movs	r2, r1
 8005398:	0152      	lsls	r2, r2, #5
 800539a:	1a52      	subs	r2, r2, r1
 800539c:	0193      	lsls	r3, r2, #6
 800539e:	1a9b      	subs	r3, r3, r2
 80053a0:	00db      	lsls	r3, r3, #3
 80053a2:	185b      	adds	r3, r3, r1
 80053a4:	025b      	lsls	r3, r3, #9
 80053a6:	6879      	ldr	r1, [r7, #4]
 80053a8:	0018      	movs	r0, r3
 80053aa:	f7fa feb5 	bl	8000118 <__udivsi3>
 80053ae:	0003      	movs	r3, r0
 80053b0:	617b      	str	r3, [r7, #20]
 80053b2:	e023      	b.n	80053fc <HAL_RCC_GetSysClockFreq+0xc8>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80053b4:	4b1c      	ldr	r3, [pc, #112]	; (8005428 <HAL_RCC_GetSysClockFreq+0xf4>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	2210      	movs	r2, #16
 80053ba:	4013      	ands	r3, r2
 80053bc:	d00f      	beq.n	80053de <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 80053be:	68b9      	ldr	r1, [r7, #8]
 80053c0:	000a      	movs	r2, r1
 80053c2:	0152      	lsls	r2, r2, #5
 80053c4:	1a52      	subs	r2, r2, r1
 80053c6:	0193      	lsls	r3, r2, #6
 80053c8:	1a9b      	subs	r3, r3, r2
 80053ca:	00db      	lsls	r3, r3, #3
 80053cc:	185b      	adds	r3, r3, r1
 80053ce:	021b      	lsls	r3, r3, #8
 80053d0:	6879      	ldr	r1, [r7, #4]
 80053d2:	0018      	movs	r0, r3
 80053d4:	f7fa fea0 	bl	8000118 <__udivsi3>
 80053d8:	0003      	movs	r3, r0
 80053da:	617b      	str	r3, [r7, #20]
 80053dc:	e00e      	b.n	80053fc <HAL_RCC_GetSysClockFreq+0xc8>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 80053de:	68b9      	ldr	r1, [r7, #8]
 80053e0:	000a      	movs	r2, r1
 80053e2:	0152      	lsls	r2, r2, #5
 80053e4:	1a52      	subs	r2, r2, r1
 80053e6:	0193      	lsls	r3, r2, #6
 80053e8:	1a9b      	subs	r3, r3, r2
 80053ea:	00db      	lsls	r3, r3, #3
 80053ec:	185b      	adds	r3, r3, r1
 80053ee:	029b      	lsls	r3, r3, #10
 80053f0:	6879      	ldr	r1, [r7, #4]
 80053f2:	0018      	movs	r0, r3
 80053f4:	f7fa fe90 	bl	8000118 <__udivsi3>
 80053f8:	0003      	movs	r3, r0
 80053fa:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	613b      	str	r3, [r7, #16]
      break;
 8005400:	e00d      	b.n	800541e <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8005402:	4b09      	ldr	r3, [pc, #36]	; (8005428 <HAL_RCC_GetSysClockFreq+0xf4>)
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	0b5b      	lsrs	r3, r3, #13
 8005408:	2207      	movs	r2, #7
 800540a:	4013      	ands	r3, r2
 800540c:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	3301      	adds	r3, #1
 8005412:	2280      	movs	r2, #128	; 0x80
 8005414:	0212      	lsls	r2, r2, #8
 8005416:	409a      	lsls	r2, r3
 8005418:	0013      	movs	r3, r2
 800541a:	613b      	str	r3, [r7, #16]
      break;
 800541c:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800541e:	693b      	ldr	r3, [r7, #16]
}
 8005420:	0018      	movs	r0, r3
 8005422:	46bd      	mov	sp, r7
 8005424:	b006      	add	sp, #24
 8005426:	bd80      	pop	{r7, pc}
 8005428:	40021000 	.word	0x40021000
 800542c:	003d0900 	.word	0x003d0900
 8005430:	00f42400 	.word	0x00f42400
 8005434:	007a1200 	.word	0x007a1200
 8005438:	0802049c 	.word	0x0802049c

0800543c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005440:	4b02      	ldr	r3, [pc, #8]	; (800544c <HAL_RCC_GetHCLKFreq+0x10>)
 8005442:	681b      	ldr	r3, [r3, #0]
}
 8005444:	0018      	movs	r0, r3
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}
 800544a:	46c0      	nop			; (mov r8, r8)
 800544c:	2000005c 	.word	0x2000005c

08005450 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005454:	f7ff fff2 	bl	800543c <HAL_RCC_GetHCLKFreq>
 8005458:	0001      	movs	r1, r0
 800545a:	4b06      	ldr	r3, [pc, #24]	; (8005474 <HAL_RCC_GetPCLK1Freq+0x24>)
 800545c:	68db      	ldr	r3, [r3, #12]
 800545e:	0a1b      	lsrs	r3, r3, #8
 8005460:	2207      	movs	r2, #7
 8005462:	4013      	ands	r3, r2
 8005464:	4a04      	ldr	r2, [pc, #16]	; (8005478 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005466:	5cd3      	ldrb	r3, [r2, r3]
 8005468:	40d9      	lsrs	r1, r3
 800546a:	000b      	movs	r3, r1
}
 800546c:	0018      	movs	r0, r3
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}
 8005472:	46c0      	nop			; (mov r8, r8)
 8005474:	40021000 	.word	0x40021000
 8005478:	08020494 	.word	0x08020494

0800547c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005480:	f7ff ffdc 	bl	800543c <HAL_RCC_GetHCLKFreq>
 8005484:	0001      	movs	r1, r0
 8005486:	4b06      	ldr	r3, [pc, #24]	; (80054a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005488:	68db      	ldr	r3, [r3, #12]
 800548a:	0adb      	lsrs	r3, r3, #11
 800548c:	2207      	movs	r2, #7
 800548e:	4013      	ands	r3, r2
 8005490:	4a04      	ldr	r2, [pc, #16]	; (80054a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005492:	5cd3      	ldrb	r3, [r2, r3]
 8005494:	40d9      	lsrs	r1, r3
 8005496:	000b      	movs	r3, r1
}
 8005498:	0018      	movs	r0, r3
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}
 800549e:	46c0      	nop			; (mov r8, r8)
 80054a0:	40021000 	.word	0x40021000
 80054a4:	08020494 	.word	0x08020494

080054a8 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b086      	sub	sp, #24
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	2220      	movs	r2, #32
 80054b6:	4013      	ands	r3, r2
 80054b8:	d100      	bne.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x14>
 80054ba:	e0c7      	b.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 80054bc:	2317      	movs	r3, #23
 80054be:	18fb      	adds	r3, r7, r3
 80054c0:	2200      	movs	r2, #0
 80054c2:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054c4:	4b99      	ldr	r3, [pc, #612]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80054c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054c8:	2380      	movs	r3, #128	; 0x80
 80054ca:	055b      	lsls	r3, r3, #21
 80054cc:	4013      	ands	r3, r2
 80054ce:	d10a      	bne.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x3e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054d0:	4b96      	ldr	r3, [pc, #600]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80054d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054d4:	4b95      	ldr	r3, [pc, #596]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80054d6:	2180      	movs	r1, #128	; 0x80
 80054d8:	0549      	lsls	r1, r1, #21
 80054da:	430a      	orrs	r2, r1
 80054dc:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80054de:	2317      	movs	r3, #23
 80054e0:	18fb      	adds	r3, r7, r3
 80054e2:	2201      	movs	r2, #1
 80054e4:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054e6:	4b92      	ldr	r3, [pc, #584]	; (8005730 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80054e8:	681a      	ldr	r2, [r3, #0]
 80054ea:	2380      	movs	r3, #128	; 0x80
 80054ec:	005b      	lsls	r3, r3, #1
 80054ee:	4013      	ands	r3, r2
 80054f0:	d11a      	bne.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80054f2:	4b8f      	ldr	r3, [pc, #572]	; (8005730 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80054f4:	681a      	ldr	r2, [r3, #0]
 80054f6:	4b8e      	ldr	r3, [pc, #568]	; (8005730 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80054f8:	2180      	movs	r1, #128	; 0x80
 80054fa:	0049      	lsls	r1, r1, #1
 80054fc:	430a      	orrs	r2, r1
 80054fe:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005500:	f7fe fce4 	bl	8003ecc <HAL_GetTick>
 8005504:	0003      	movs	r3, r0
 8005506:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005508:	e008      	b.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x74>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800550a:	f7fe fcdf 	bl	8003ecc <HAL_GetTick>
 800550e:	0002      	movs	r2, r0
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	1ad3      	subs	r3, r2, r3
 8005514:	2b64      	cmp	r3, #100	; 0x64
 8005516:	d901      	bls.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x74>
        {
          return HAL_TIMEOUT;
 8005518:	2303      	movs	r3, #3
 800551a:	e102      	b.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0x27a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800551c:	4b84      	ldr	r3, [pc, #528]	; (8005730 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800551e:	681a      	ldr	r2, [r3, #0]
 8005520:	2380      	movs	r3, #128	; 0x80
 8005522:	005b      	lsls	r3, r3, #1
 8005524:	4013      	ands	r3, r2
 8005526:	d0f0      	beq.n	800550a <HAL_RCCEx_PeriphCLKConfig+0x62>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8005528:	4b80      	ldr	r3, [pc, #512]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800552a:	681a      	ldr	r2, [r3, #0]
 800552c:	23c0      	movs	r3, #192	; 0xc0
 800552e:	039b      	lsls	r3, r3, #14
 8005530:	4013      	ands	r3, r2
 8005532:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	685a      	ldr	r2, [r3, #4]
 8005538:	23c0      	movs	r3, #192	; 0xc0
 800553a:	039b      	lsls	r3, r3, #14
 800553c:	4013      	ands	r3, r2
 800553e:	68fa      	ldr	r2, [r7, #12]
 8005540:	429a      	cmp	r2, r3
 8005542:	d013      	beq.n	800556c <HAL_RCCEx_PeriphCLKConfig+0xc4>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	685a      	ldr	r2, [r3, #4]
 8005548:	23c0      	movs	r3, #192	; 0xc0
 800554a:	029b      	lsls	r3, r3, #10
 800554c:	401a      	ands	r2, r3
 800554e:	23c0      	movs	r3, #192	; 0xc0
 8005550:	029b      	lsls	r3, r3, #10
 8005552:	429a      	cmp	r2, r3
 8005554:	d10a      	bne.n	800556c <HAL_RCCEx_PeriphCLKConfig+0xc4>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005556:	4b75      	ldr	r3, [pc, #468]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005558:	681a      	ldr	r2, [r3, #0]
 800555a:	2380      	movs	r3, #128	; 0x80
 800555c:	029b      	lsls	r3, r3, #10
 800555e:	401a      	ands	r2, r3
 8005560:	2380      	movs	r3, #128	; 0x80
 8005562:	029b      	lsls	r3, r3, #10
 8005564:	429a      	cmp	r2, r3
 8005566:	d101      	bne.n	800556c <HAL_RCCEx_PeriphCLKConfig+0xc4>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8005568:	2301      	movs	r3, #1
 800556a:	e0da      	b.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0x27a>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800556c:	4b6f      	ldr	r3, [pc, #444]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800556e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005570:	23c0      	movs	r3, #192	; 0xc0
 8005572:	029b      	lsls	r3, r3, #10
 8005574:	4013      	ands	r3, r2
 8005576:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d03b      	beq.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	685a      	ldr	r2, [r3, #4]
 8005582:	23c0      	movs	r3, #192	; 0xc0
 8005584:	029b      	lsls	r3, r3, #10
 8005586:	4013      	ands	r3, r2
 8005588:	68fa      	ldr	r2, [r7, #12]
 800558a:	429a      	cmp	r2, r3
 800558c:	d033      	beq.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	2220      	movs	r2, #32
 8005594:	4013      	ands	r3, r2
 8005596:	d02e      	beq.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8005598:	4b64      	ldr	r3, [pc, #400]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800559a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800559c:	4a65      	ldr	r2, [pc, #404]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800559e:	4013      	ands	r3, r2
 80055a0:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80055a2:	4b62      	ldr	r3, [pc, #392]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80055a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80055a6:	4b61      	ldr	r3, [pc, #388]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80055a8:	2180      	movs	r1, #128	; 0x80
 80055aa:	0309      	lsls	r1, r1, #12
 80055ac:	430a      	orrs	r2, r1
 80055ae:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80055b0:	4b5e      	ldr	r3, [pc, #376]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80055b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80055b4:	4b5d      	ldr	r3, [pc, #372]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80055b6:	4960      	ldr	r1, [pc, #384]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80055b8:	400a      	ands	r2, r1
 80055ba:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80055bc:	4b5b      	ldr	r3, [pc, #364]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80055be:	68fa      	ldr	r2, [r7, #12]
 80055c0:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80055c2:	68fa      	ldr	r2, [r7, #12]
 80055c4:	2380      	movs	r3, #128	; 0x80
 80055c6:	005b      	lsls	r3, r3, #1
 80055c8:	4013      	ands	r3, r2
 80055ca:	d014      	beq.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055cc:	f7fe fc7e 	bl	8003ecc <HAL_GetTick>
 80055d0:	0003      	movs	r3, r0
 80055d2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80055d4:	e009      	b.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0x142>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055d6:	f7fe fc79 	bl	8003ecc <HAL_GetTick>
 80055da:	0002      	movs	r2, r0
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	1ad3      	subs	r3, r2, r3
 80055e0:	4a56      	ldr	r2, [pc, #344]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d901      	bls.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0x142>
          {
            return HAL_TIMEOUT;
 80055e6:	2303      	movs	r3, #3
 80055e8:	e09b      	b.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0x27a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80055ea:	4b50      	ldr	r3, [pc, #320]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80055ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80055ee:	2380      	movs	r3, #128	; 0x80
 80055f0:	009b      	lsls	r3, r3, #2
 80055f2:	4013      	ands	r3, r2
 80055f4:	d0ef      	beq.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0x12e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	685a      	ldr	r2, [r3, #4]
 80055fa:	23c0      	movs	r3, #192	; 0xc0
 80055fc:	029b      	lsls	r3, r3, #10
 80055fe:	401a      	ands	r2, r3
 8005600:	23c0      	movs	r3, #192	; 0xc0
 8005602:	029b      	lsls	r3, r3, #10
 8005604:	429a      	cmp	r2, r3
 8005606:	d10c      	bne.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8005608:	4b48      	ldr	r3, [pc, #288]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a4c      	ldr	r2, [pc, #304]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 800560e:	4013      	ands	r3, r2
 8005610:	0019      	movs	r1, r3
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	685a      	ldr	r2, [r3, #4]
 8005616:	23c0      	movs	r3, #192	; 0xc0
 8005618:	039b      	lsls	r3, r3, #14
 800561a:	401a      	ands	r2, r3
 800561c:	4b43      	ldr	r3, [pc, #268]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800561e:	430a      	orrs	r2, r1
 8005620:	601a      	str	r2, [r3, #0]
 8005622:	4b42      	ldr	r3, [pc, #264]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005624:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	685a      	ldr	r2, [r3, #4]
 800562a:	23c0      	movs	r3, #192	; 0xc0
 800562c:	029b      	lsls	r3, r3, #10
 800562e:	401a      	ands	r2, r3
 8005630:	4b3e      	ldr	r3, [pc, #248]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005632:	430a      	orrs	r2, r1
 8005634:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005636:	2317      	movs	r3, #23
 8005638:	18fb      	adds	r3, r7, r3
 800563a:	781b      	ldrb	r3, [r3, #0]
 800563c:	2b01      	cmp	r3, #1
 800563e:	d105      	bne.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005640:	4b3a      	ldr	r3, [pc, #232]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005642:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005644:	4b39      	ldr	r3, [pc, #228]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005646:	493f      	ldr	r1, [pc, #252]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005648:	400a      	ands	r2, r1
 800564a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	2201      	movs	r2, #1
 8005652:	4013      	ands	r3, r2
 8005654:	d009      	beq.n	800566a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005656:	4b35      	ldr	r3, [pc, #212]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800565a:	2203      	movs	r2, #3
 800565c:	4393      	bics	r3, r2
 800565e:	0019      	movs	r1, r3
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	689a      	ldr	r2, [r3, #8]
 8005664:	4b31      	ldr	r3, [pc, #196]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005666:	430a      	orrs	r2, r1
 8005668:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	2202      	movs	r2, #2
 8005670:	4013      	ands	r3, r2
 8005672:	d009      	beq.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005674:	4b2d      	ldr	r3, [pc, #180]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005676:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005678:	220c      	movs	r2, #12
 800567a:	4393      	bics	r3, r2
 800567c:	0019      	movs	r1, r3
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	68da      	ldr	r2, [r3, #12]
 8005682:	4b2a      	ldr	r3, [pc, #168]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005684:	430a      	orrs	r2, r1
 8005686:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	2204      	movs	r2, #4
 800568e:	4013      	ands	r3, r2
 8005690:	d009      	beq.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005692:	4b26      	ldr	r3, [pc, #152]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005696:	4a2c      	ldr	r2, [pc, #176]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8005698:	4013      	ands	r3, r2
 800569a:	0019      	movs	r1, r3
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	691a      	ldr	r2, [r3, #16]
 80056a0:	4b22      	ldr	r3, [pc, #136]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80056a2:	430a      	orrs	r2, r1
 80056a4:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	2208      	movs	r2, #8
 80056ac:	4013      	ands	r3, r2
 80056ae:	d009      	beq.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80056b0:	4b1e      	ldr	r3, [pc, #120]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80056b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056b4:	4a25      	ldr	r2, [pc, #148]	; (800574c <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 80056b6:	4013      	ands	r3, r2
 80056b8:	0019      	movs	r1, r3
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	695a      	ldr	r2, [r3, #20]
 80056be:	4b1b      	ldr	r3, [pc, #108]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80056c0:	430a      	orrs	r2, r1
 80056c2:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681a      	ldr	r2, [r3, #0]
 80056c8:	2380      	movs	r3, #128	; 0x80
 80056ca:	005b      	lsls	r3, r3, #1
 80056cc:	4013      	ands	r3, r2
 80056ce:	d009      	beq.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80056d0:	4b16      	ldr	r3, [pc, #88]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80056d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056d4:	4a17      	ldr	r2, [pc, #92]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80056d6:	4013      	ands	r3, r2
 80056d8:	0019      	movs	r1, r3
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	699a      	ldr	r2, [r3, #24]
 80056de:	4b13      	ldr	r3, [pc, #76]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80056e0:	430a      	orrs	r2, r1
 80056e2:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	2240      	movs	r2, #64	; 0x40
 80056ea:	4013      	ands	r3, r2
 80056ec:	d009      	beq.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80056ee:	4b0f      	ldr	r3, [pc, #60]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80056f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056f2:	4a17      	ldr	r2, [pc, #92]	; (8005750 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 80056f4:	4013      	ands	r3, r2
 80056f6:	0019      	movs	r1, r3
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6a1a      	ldr	r2, [r3, #32]
 80056fc:	4b0b      	ldr	r3, [pc, #44]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80056fe:	430a      	orrs	r2, r1
 8005700:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	2280      	movs	r2, #128	; 0x80
 8005708:	4013      	ands	r3, r2
 800570a:	d009      	beq.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800570c:	4b07      	ldr	r3, [pc, #28]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800570e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005710:	4a10      	ldr	r2, [pc, #64]	; (8005754 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8005712:	4013      	ands	r3, r2
 8005714:	0019      	movs	r1, r3
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	69da      	ldr	r2, [r3, #28]
 800571a:	4b04      	ldr	r3, [pc, #16]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800571c:	430a      	orrs	r2, r1
 800571e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8005720:	2300      	movs	r3, #0
}
 8005722:	0018      	movs	r0, r3
 8005724:	46bd      	mov	sp, r7
 8005726:	b006      	add	sp, #24
 8005728:	bd80      	pop	{r7, pc}
 800572a:	46c0      	nop			; (mov r8, r8)
 800572c:	40021000 	.word	0x40021000
 8005730:	40007000 	.word	0x40007000
 8005734:	fffcffff 	.word	0xfffcffff
 8005738:	fff7ffff 	.word	0xfff7ffff
 800573c:	00001388 	.word	0x00001388
 8005740:	ffcfffff 	.word	0xffcfffff
 8005744:	efffffff 	.word	0xefffffff
 8005748:	fffff3ff 	.word	0xfffff3ff
 800574c:	ffffcfff 	.word	0xffffcfff
 8005750:	fbffffff 	.word	0xfbffffff
 8005754:	fff3ffff 	.word	0xfff3ffff

08005758 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b082      	sub	sp, #8
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d101      	bne.n	800576a <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8005766:	2301      	movs	r3, #1
 8005768:	e08e      	b.n	8005888 <HAL_RTC_Init+0x130>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2221      	movs	r2, #33	; 0x21
 800576e:	5c9b      	ldrb	r3, [r3, r2]
 8005770:	b2db      	uxtb	r3, r3
 8005772:	2b00      	cmp	r3, #0
 8005774:	d107      	bne.n	8005786 <HAL_RTC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2220      	movs	r2, #32
 800577a:	2100      	movs	r1, #0
 800577c:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	0018      	movs	r0, r3
 8005782:	f7fe f86b 	bl	800385c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2221      	movs	r2, #33	; 0x21
 800578a:	2102      	movs	r1, #2
 800578c:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	22ca      	movs	r2, #202	; 0xca
 8005794:	625a      	str	r2, [r3, #36]	; 0x24
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	2253      	movs	r2, #83	; 0x53
 800579c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	0018      	movs	r0, r3
 80057a2:	f000 fc5c 	bl	800605e <RTC_EnterInitMode>
 80057a6:	1e03      	subs	r3, r0, #0
 80057a8:	d009      	beq.n	80057be <HAL_RTC_Init+0x66>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	22ff      	movs	r2, #255	; 0xff
 80057b0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2221      	movs	r2, #33	; 0x21
 80057b6:	2104      	movs	r1, #4
 80057b8:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80057ba:	2301      	movs	r3, #1
 80057bc:	e064      	b.n	8005888 <HAL_RTC_Init+0x130>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	689a      	ldr	r2, [r3, #8]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4931      	ldr	r1, [pc, #196]	; (8005890 <HAL_RTC_Init+0x138>)
 80057ca:	400a      	ands	r2, r1
 80057cc:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	6899      	ldr	r1, [r3, #8]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	685a      	ldr	r2, [r3, #4]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	691b      	ldr	r3, [r3, #16]
 80057dc:	431a      	orrs	r2, r3
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	699b      	ldr	r3, [r3, #24]
 80057e2:	431a      	orrs	r2, r3
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	430a      	orrs	r2, r1
 80057ea:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	687a      	ldr	r2, [r7, #4]
 80057f2:	68d2      	ldr	r2, [r2, #12]
 80057f4:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	6919      	ldr	r1, [r3, #16]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	041a      	lsls	r2, r3, #16
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	430a      	orrs	r2, r1
 8005808:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	68da      	ldr	r2, [r3, #12]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	2180      	movs	r1, #128	; 0x80
 8005816:	438a      	bics	r2, r1
 8005818:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	2103      	movs	r1, #3
 8005826:	438a      	bics	r2, r1
 8005828:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	69da      	ldr	r2, [r3, #28]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	695b      	ldr	r3, [r3, #20]
 8005838:	431a      	orrs	r2, r3
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	430a      	orrs	r2, r1
 8005840:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	689b      	ldr	r3, [r3, #8]
 8005848:	2220      	movs	r2, #32
 800584a:	4013      	ands	r3, r2
 800584c:	d113      	bne.n	8005876 <HAL_RTC_Init+0x11e>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	0018      	movs	r0, r3
 8005852:	f000 fbdd 	bl	8006010 <HAL_RTC_WaitForSynchro>
 8005856:	1e03      	subs	r3, r0, #0
 8005858:	d00d      	beq.n	8005876 <HAL_RTC_Init+0x11e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	22ff      	movs	r2, #255	; 0xff
 8005860:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2221      	movs	r2, #33	; 0x21
 8005866:	2104      	movs	r1, #4
 8005868:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2220      	movs	r2, #32
 800586e:	2100      	movs	r1, #0
 8005870:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8005872:	2301      	movs	r3, #1
 8005874:	e008      	b.n	8005888 <HAL_RTC_Init+0x130>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	22ff      	movs	r2, #255	; 0xff
 800587c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2221      	movs	r2, #33	; 0x21
 8005882:	2101      	movs	r1, #1
 8005884:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005886:	2300      	movs	r3, #0
  }
}
 8005888:	0018      	movs	r0, r3
 800588a:	46bd      	mov	sp, r7
 800588c:	b002      	add	sp, #8
 800588e:	bd80      	pop	{r7, pc}
 8005890:	ff8fffbf 	.word	0xff8fffbf

08005894 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005894:	b590      	push	{r4, r7, lr}
 8005896:	b087      	sub	sp, #28
 8005898:	af00      	add	r7, sp, #0
 800589a:	60f8      	str	r0, [r7, #12]
 800589c:	60b9      	str	r1, [r7, #8]
 800589e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2220      	movs	r2, #32
 80058a4:	5c9b      	ldrb	r3, [r3, r2]
 80058a6:	2b01      	cmp	r3, #1
 80058a8:	d101      	bne.n	80058ae <HAL_RTC_SetTime+0x1a>
 80058aa:	2302      	movs	r3, #2
 80058ac:	e0ad      	b.n	8005a0a <HAL_RTC_SetTime+0x176>
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2220      	movs	r2, #32
 80058b2:	2101      	movs	r1, #1
 80058b4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2221      	movs	r2, #33	; 0x21
 80058ba:	2102      	movs	r1, #2
 80058bc:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d125      	bne.n	8005910 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	689b      	ldr	r3, [r3, #8]
 80058ca:	2240      	movs	r2, #64	; 0x40
 80058cc:	4013      	ands	r3, r2
 80058ce:	d102      	bne.n	80058d6 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	2200      	movs	r2, #0
 80058d4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	781b      	ldrb	r3, [r3, #0]
 80058da:	0018      	movs	r0, r3
 80058dc:	f000 fbe9 	bl	80060b2 <RTC_ByteToBcd2>
 80058e0:	0003      	movs	r3, r0
 80058e2:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	785b      	ldrb	r3, [r3, #1]
 80058e8:	0018      	movs	r0, r3
 80058ea:	f000 fbe2 	bl	80060b2 <RTC_ByteToBcd2>
 80058ee:	0003      	movs	r3, r0
 80058f0:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80058f2:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	789b      	ldrb	r3, [r3, #2]
 80058f8:	0018      	movs	r0, r3
 80058fa:	f000 fbda 	bl	80060b2 <RTC_ByteToBcd2>
 80058fe:	0003      	movs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8005900:	0022      	movs	r2, r4
 8005902:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	78db      	ldrb	r3, [r3, #3]
 8005908:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800590a:	4313      	orrs	r3, r2
 800590c:	617b      	str	r3, [r7, #20]
 800590e:	e017      	b.n	8005940 <HAL_RTC_SetTime+0xac>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	689b      	ldr	r3, [r3, #8]
 8005916:	2240      	movs	r2, #64	; 0x40
 8005918:	4013      	ands	r3, r2
 800591a:	d102      	bne.n	8005922 <HAL_RTC_SetTime+0x8e>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	2200      	movs	r2, #0
 8005920:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	781b      	ldrb	r3, [r3, #0]
 8005926:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	785b      	ldrb	r3, [r3, #1]
 800592c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800592e:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8005930:	68ba      	ldr	r2, [r7, #8]
 8005932:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8005934:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	78db      	ldrb	r3, [r3, #3]
 800593a:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800593c:	4313      	orrs	r3, r2
 800593e:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	22ca      	movs	r2, #202	; 0xca
 8005946:	625a      	str	r2, [r3, #36]	; 0x24
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	2253      	movs	r2, #83	; 0x53
 800594e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	0018      	movs	r0, r3
 8005954:	f000 fb83 	bl	800605e <RTC_EnterInitMode>
 8005958:	1e03      	subs	r3, r0, #0
 800595a:	d00d      	beq.n	8005978 <HAL_RTC_SetTime+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	22ff      	movs	r2, #255	; 0xff
 8005962:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	2221      	movs	r2, #33	; 0x21
 8005968:	2104      	movs	r1, #4
 800596a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2220      	movs	r2, #32
 8005970:	2100      	movs	r1, #0
 8005972:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8005974:	2301      	movs	r3, #1
 8005976:	e048      	b.n	8005a0a <HAL_RTC_SetTime+0x176>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	697a      	ldr	r2, [r7, #20]
 800597e:	4925      	ldr	r1, [pc, #148]	; (8005a14 <HAL_RTC_SetTime+0x180>)
 8005980:	400a      	ands	r2, r1
 8005982:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	689a      	ldr	r2, [r3, #8]
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4922      	ldr	r1, [pc, #136]	; (8005a18 <HAL_RTC_SetTime+0x184>)
 8005990:	400a      	ands	r2, r1
 8005992:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	6899      	ldr	r1, [r3, #8]
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	68da      	ldr	r2, [r3, #12]
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	691b      	ldr	r3, [r3, #16]
 80059a2:	431a      	orrs	r2, r3
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	430a      	orrs	r2, r1
 80059aa:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	68da      	ldr	r2, [r3, #12]
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	2180      	movs	r1, #128	; 0x80
 80059b8:	438a      	bics	r2, r1
 80059ba:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	689b      	ldr	r3, [r3, #8]
 80059c2:	2220      	movs	r2, #32
 80059c4:	4013      	ands	r3, r2
 80059c6:	d113      	bne.n	80059f0 <HAL_RTC_SetTime+0x15c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	0018      	movs	r0, r3
 80059cc:	f000 fb20 	bl	8006010 <HAL_RTC_WaitForSynchro>
 80059d0:	1e03      	subs	r3, r0, #0
 80059d2:	d00d      	beq.n	80059f0 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	22ff      	movs	r2, #255	; 0xff
 80059da:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2221      	movs	r2, #33	; 0x21
 80059e0:	2104      	movs	r1, #4
 80059e2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	2220      	movs	r2, #32
 80059e8:	2100      	movs	r1, #0
 80059ea:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80059ec:	2301      	movs	r3, #1
 80059ee:	e00c      	b.n	8005a0a <HAL_RTC_SetTime+0x176>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	22ff      	movs	r2, #255	; 0xff
 80059f6:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2221      	movs	r2, #33	; 0x21
 80059fc:	2101      	movs	r1, #1
 80059fe:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hrtc);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2220      	movs	r2, #32
 8005a04:	2100      	movs	r1, #0
 8005a06:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005a08:	2300      	movs	r3, #0
  }
}
 8005a0a:	0018      	movs	r0, r3
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	b007      	add	sp, #28
 8005a10:	bd90      	pop	{r4, r7, pc}
 8005a12:	46c0      	nop			; (mov r8, r8)
 8005a14:	007f7f7f 	.word	0x007f7f7f
 8005a18:	fffbffff 	.word	0xfffbffff

08005a1c <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b086      	sub	sp, #24
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	60f8      	str	r0, [r7, #12]
 8005a24:	60b9      	str	r1, [r7, #8]
 8005a26:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	691b      	ldr	r3, [r3, #16]
 8005a38:	045b      	lsls	r3, r3, #17
 8005a3a:	0c5a      	lsrs	r2, r3, #17
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a22      	ldr	r2, [pc, #136]	; (8005ad0 <HAL_RTC_GetTime+0xb4>)
 8005a48:	4013      	ands	r3, r2
 8005a4a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	0c1b      	lsrs	r3, r3, #16
 8005a50:	b2db      	uxtb	r3, r3
 8005a52:	223f      	movs	r2, #63	; 0x3f
 8005a54:	4013      	ands	r3, r2
 8005a56:	b2da      	uxtb	r2, r3
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	0a1b      	lsrs	r3, r3, #8
 8005a60:	b2db      	uxtb	r3, r3
 8005a62:	227f      	movs	r2, #127	; 0x7f
 8005a64:	4013      	ands	r3, r2
 8005a66:	b2da      	uxtb	r2, r3
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	b2db      	uxtb	r3, r3
 8005a70:	227f      	movs	r2, #127	; 0x7f
 8005a72:	4013      	ands	r3, r2
 8005a74:	b2da      	uxtb	r2, r3
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	0c1b      	lsrs	r3, r3, #16
 8005a7e:	b2db      	uxtb	r3, r3
 8005a80:	2240      	movs	r2, #64	; 0x40
 8005a82:	4013      	ands	r3, r2
 8005a84:	b2da      	uxtb	r2, r3
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d11a      	bne.n	8005ac6 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	781b      	ldrb	r3, [r3, #0]
 8005a94:	0018      	movs	r0, r3
 8005a96:	f000 fb35 	bl	8006104 <RTC_Bcd2ToByte>
 8005a9a:	0003      	movs	r3, r0
 8005a9c:	001a      	movs	r2, r3
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	785b      	ldrb	r3, [r3, #1]
 8005aa6:	0018      	movs	r0, r3
 8005aa8:	f000 fb2c 	bl	8006104 <RTC_Bcd2ToByte>
 8005aac:	0003      	movs	r3, r0
 8005aae:	001a      	movs	r2, r3
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	789b      	ldrb	r3, [r3, #2]
 8005ab8:	0018      	movs	r0, r3
 8005aba:	f000 fb23 	bl	8006104 <RTC_Bcd2ToByte>
 8005abe:	0003      	movs	r3, r0
 8005ac0:	001a      	movs	r2, r3
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005ac6:	2300      	movs	r3, #0
}
 8005ac8:	0018      	movs	r0, r3
 8005aca:	46bd      	mov	sp, r7
 8005acc:	b006      	add	sp, #24
 8005ace:	bd80      	pop	{r7, pc}
 8005ad0:	007f7f7f 	.word	0x007f7f7f

08005ad4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005ad4:	b590      	push	{r4, r7, lr}
 8005ad6:	b087      	sub	sp, #28
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	60f8      	str	r0, [r7, #12]
 8005adc:	60b9      	str	r1, [r7, #8]
 8005ade:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2220      	movs	r2, #32
 8005ae4:	5c9b      	ldrb	r3, [r3, r2]
 8005ae6:	2b01      	cmp	r3, #1
 8005ae8:	d101      	bne.n	8005aee <HAL_RTC_SetDate+0x1a>
 8005aea:	2302      	movs	r3, #2
 8005aec:	e099      	b.n	8005c22 <HAL_RTC_SetDate+0x14e>
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2220      	movs	r2, #32
 8005af2:	2101      	movs	r1, #1
 8005af4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	2221      	movs	r2, #33	; 0x21
 8005afa:	2102      	movs	r1, #2
 8005afc:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d10e      	bne.n	8005b22 <HAL_RTC_SetDate+0x4e>
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	785b      	ldrb	r3, [r3, #1]
 8005b08:	001a      	movs	r2, r3
 8005b0a:	2310      	movs	r3, #16
 8005b0c:	4013      	ands	r3, r2
 8005b0e:	d008      	beq.n	8005b22 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	785b      	ldrb	r3, [r3, #1]
 8005b14:	2210      	movs	r2, #16
 8005b16:	4393      	bics	r3, r2
 8005b18:	b2db      	uxtb	r3, r3
 8005b1a:	330a      	adds	r3, #10
 8005b1c:	b2da      	uxtb	r2, r3
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d11c      	bne.n	8005b62 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	78db      	ldrb	r3, [r3, #3]
 8005b2c:	0018      	movs	r0, r3
 8005b2e:	f000 fac0 	bl	80060b2 <RTC_ByteToBcd2>
 8005b32:	0003      	movs	r3, r0
 8005b34:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	785b      	ldrb	r3, [r3, #1]
 8005b3a:	0018      	movs	r0, r3
 8005b3c:	f000 fab9 	bl	80060b2 <RTC_ByteToBcd2>
 8005b40:	0003      	movs	r3, r0
 8005b42:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005b44:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	789b      	ldrb	r3, [r3, #2]
 8005b4a:	0018      	movs	r0, r3
 8005b4c:	f000 fab1 	bl	80060b2 <RTC_ByteToBcd2>
 8005b50:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8005b52:	0022      	movs	r2, r4
 8005b54:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	781b      	ldrb	r3, [r3, #0]
 8005b5a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	617b      	str	r3, [r7, #20]
 8005b60:	e00e      	b.n	8005b80 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	78db      	ldrb	r3, [r3, #3]
 8005b66:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	785b      	ldrb	r3, [r3, #1]
 8005b6c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005b6e:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8005b70:	68ba      	ldr	r2, [r7, #8]
 8005b72:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8005b74:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	781b      	ldrb	r3, [r3, #0]
 8005b7a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	22ca      	movs	r2, #202	; 0xca
 8005b86:	625a      	str	r2, [r3, #36]	; 0x24
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	2253      	movs	r2, #83	; 0x53
 8005b8e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	0018      	movs	r0, r3
 8005b94:	f000 fa63 	bl	800605e <RTC_EnterInitMode>
 8005b98:	1e03      	subs	r3, r0, #0
 8005b9a:	d00d      	beq.n	8005bb8 <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	22ff      	movs	r2, #255	; 0xff
 8005ba2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2221      	movs	r2, #33	; 0x21
 8005ba8:	2104      	movs	r1, #4
 8005baa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2220      	movs	r2, #32
 8005bb0:	2100      	movs	r1, #0
 8005bb2:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	e034      	b.n	8005c22 <HAL_RTC_SetDate+0x14e>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	697a      	ldr	r2, [r7, #20]
 8005bbe:	491b      	ldr	r1, [pc, #108]	; (8005c2c <HAL_RTC_SetDate+0x158>)
 8005bc0:	400a      	ands	r2, r1
 8005bc2:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	68da      	ldr	r2, [r3, #12]
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	2180      	movs	r1, #128	; 0x80
 8005bd0:	438a      	bics	r2, r1
 8005bd2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	689b      	ldr	r3, [r3, #8]
 8005bda:	2220      	movs	r2, #32
 8005bdc:	4013      	ands	r3, r2
 8005bde:	d113      	bne.n	8005c08 <HAL_RTC_SetDate+0x134>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	0018      	movs	r0, r3
 8005be4:	f000 fa14 	bl	8006010 <HAL_RTC_WaitForSynchro>
 8005be8:	1e03      	subs	r3, r0, #0
 8005bea:	d00d      	beq.n	8005c08 <HAL_RTC_SetDate+0x134>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	22ff      	movs	r2, #255	; 0xff
 8005bf2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	2221      	movs	r2, #33	; 0x21
 8005bf8:	2104      	movs	r1, #4
 8005bfa:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	2220      	movs	r2, #32
 8005c00:	2100      	movs	r1, #0
 8005c02:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8005c04:	2301      	movs	r3, #1
 8005c06:	e00c      	b.n	8005c22 <HAL_RTC_SetDate+0x14e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	22ff      	movs	r2, #255	; 0xff
 8005c0e:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	2221      	movs	r2, #33	; 0x21
 8005c14:	2101      	movs	r1, #1
 8005c16:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	2220      	movs	r2, #32
 8005c1c:	2100      	movs	r1, #0
 8005c1e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005c20:	2300      	movs	r3, #0
  }
}
 8005c22:	0018      	movs	r0, r3
 8005c24:	46bd      	mov	sp, r7
 8005c26:	b007      	add	sp, #28
 8005c28:	bd90      	pop	{r4, r7, pc}
 8005c2a:	46c0      	nop			; (mov r8, r8)
 8005c2c:	00ffff3f 	.word	0x00ffff3f

08005c30 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b086      	sub	sp, #24
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	60f8      	str	r0, [r7, #12]
 8005c38:	60b9      	str	r1, [r7, #8]
 8005c3a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	4a21      	ldr	r2, [pc, #132]	; (8005cc8 <HAL_RTC_GetDate+0x98>)
 8005c44:	4013      	ands	r3, r2
 8005c46:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	0c1b      	lsrs	r3, r3, #16
 8005c4c:	b2da      	uxtb	r2, r3
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	0a1b      	lsrs	r3, r3, #8
 8005c56:	b2db      	uxtb	r3, r3
 8005c58:	221f      	movs	r2, #31
 8005c5a:	4013      	ands	r3, r2
 8005c5c:	b2da      	uxtb	r2, r3
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	b2db      	uxtb	r3, r3
 8005c66:	223f      	movs	r2, #63	; 0x3f
 8005c68:	4013      	ands	r3, r2
 8005c6a:	b2da      	uxtb	r2, r3
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	0b5b      	lsrs	r3, r3, #13
 8005c74:	b2db      	uxtb	r3, r3
 8005c76:	2207      	movs	r2, #7
 8005c78:	4013      	ands	r3, r2
 8005c7a:	b2da      	uxtb	r2, r3
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d11a      	bne.n	8005cbc <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	78db      	ldrb	r3, [r3, #3]
 8005c8a:	0018      	movs	r0, r3
 8005c8c:	f000 fa3a 	bl	8006104 <RTC_Bcd2ToByte>
 8005c90:	0003      	movs	r3, r0
 8005c92:	001a      	movs	r2, r3
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	785b      	ldrb	r3, [r3, #1]
 8005c9c:	0018      	movs	r0, r3
 8005c9e:	f000 fa31 	bl	8006104 <RTC_Bcd2ToByte>
 8005ca2:	0003      	movs	r3, r0
 8005ca4:	001a      	movs	r2, r3
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	789b      	ldrb	r3, [r3, #2]
 8005cae:	0018      	movs	r0, r3
 8005cb0:	f000 fa28 	bl	8006104 <RTC_Bcd2ToByte>
 8005cb4:	0003      	movs	r3, r0
 8005cb6:	001a      	movs	r2, r3
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005cbc:	2300      	movs	r3, #0
}
 8005cbe:	0018      	movs	r0, r3
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	b006      	add	sp, #24
 8005cc4:	bd80      	pop	{r7, pc}
 8005cc6:	46c0      	nop			; (mov r8, r8)
 8005cc8:	00ffff3f 	.word	0x00ffff3f

08005ccc <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8005ccc:	b590      	push	{r4, r7, lr}
 8005cce:	b089      	sub	sp, #36	; 0x24
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	60f8      	str	r0, [r7, #12]
 8005cd4:	60b9      	str	r1, [r7, #8]
 8005cd6:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2220      	movs	r2, #32
 8005cdc:	5c9b      	ldrb	r3, [r3, r2]
 8005cde:	2b01      	cmp	r3, #1
 8005ce0:	d101      	bne.n	8005ce6 <HAL_RTC_SetAlarm_IT+0x1a>
 8005ce2:	2302      	movs	r3, #2
 8005ce4:	e130      	b.n	8005f48 <HAL_RTC_SetAlarm_IT+0x27c>
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	2220      	movs	r2, #32
 8005cea:	2101      	movs	r1, #1
 8005cec:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2221      	movs	r2, #33	; 0x21
 8005cf2:	2102      	movs	r1, #2
 8005cf4:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d136      	bne.n	8005d6a <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	689b      	ldr	r3, [r3, #8]
 8005d02:	2240      	movs	r2, #64	; 0x40
 8005d04:	4013      	ands	r3, r2
 8005d06:	d102      	bne.n	8005d0e <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	781b      	ldrb	r3, [r3, #0]
 8005d12:	0018      	movs	r0, r3
 8005d14:	f000 f9cd 	bl	80060b2 <RTC_ByteToBcd2>
 8005d18:	0003      	movs	r3, r0
 8005d1a:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	785b      	ldrb	r3, [r3, #1]
 8005d20:	0018      	movs	r0, r3
 8005d22:	f000 f9c6 	bl	80060b2 <RTC_ByteToBcd2>
 8005d26:	0003      	movs	r3, r0
 8005d28:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8005d2a:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	789b      	ldrb	r3, [r3, #2]
 8005d30:	0018      	movs	r0, r3
 8005d32:	f000 f9be 	bl	80060b2 <RTC_ByteToBcd2>
 8005d36:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8005d38:	0022      	movs	r2, r4
 8005d3a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	78db      	ldrb	r3, [r3, #3]
 8005d40:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8005d42:	431a      	orrs	r2, r3
 8005d44:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	2220      	movs	r2, #32
 8005d4a:	5c9b      	ldrb	r3, [r3, r2]
 8005d4c:	0018      	movs	r0, r3
 8005d4e:	f000 f9b0 	bl	80060b2 <RTC_ByteToBcd2>
 8005d52:	0003      	movs	r3, r0
 8005d54:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8005d56:	0022      	movs	r2, r4
 8005d58:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005d5e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8005d64:	4313      	orrs	r3, r2
 8005d66:	61fb      	str	r3, [r7, #28]
 8005d68:	e022      	b.n	8005db0 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	689b      	ldr	r3, [r3, #8]
 8005d70:	2240      	movs	r2, #64	; 0x40
 8005d72:	4013      	ands	r3, r2
 8005d74:	d102      	bne.n	8005d7c <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	781b      	ldrb	r3, [r3, #0]
 8005d80:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	785b      	ldrb	r3, [r3, #1]
 8005d86:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8005d88:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8005d8a:	68ba      	ldr	r2, [r7, #8]
 8005d8c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8005d8e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	78db      	ldrb	r3, [r3, #3]
 8005d94:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8005d96:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	2120      	movs	r1, #32
 8005d9c:	5c5b      	ldrb	r3, [r3, r1]
 8005d9e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8005da0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005da6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8005dac:	4313      	orrs	r3, r2
 8005dae:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	685a      	ldr	r2, [r3, #4]
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	699b      	ldr	r3, [r3, #24]
 8005db8:	4313      	orrs	r3, r2
 8005dba:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	22ca      	movs	r2, #202	; 0xca
 8005dc2:	625a      	str	r2, [r3, #36]	; 0x24
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	2253      	movs	r2, #83	; 0x53
 8005dca:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005dd0:	2380      	movs	r3, #128	; 0x80
 8005dd2:	005b      	lsls	r3, r3, #1
 8005dd4:	429a      	cmp	r2, r3
 8005dd6:	d14e      	bne.n	8005e76 <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	689a      	ldr	r2, [r3, #8]
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	495b      	ldr	r1, [pc, #364]	; (8005f50 <HAL_RTC_SetAlarm_IT+0x284>)
 8005de4:	400a      	ands	r2, r1
 8005de6:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	68db      	ldr	r3, [r3, #12]
 8005dee:	22ff      	movs	r2, #255	; 0xff
 8005df0:	401a      	ands	r2, r3
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4957      	ldr	r1, [pc, #348]	; (8005f54 <HAL_RTC_SetAlarm_IT+0x288>)
 8005df8:	430a      	orrs	r2, r1
 8005dfa:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005dfc:	f7fe f866 	bl	8003ecc <HAL_GetTick>
 8005e00:	0003      	movs	r3, r0
 8005e02:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8005e04:	e016      	b.n	8005e34 <HAL_RTC_SetAlarm_IT+0x168>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005e06:	f7fe f861 	bl	8003ecc <HAL_GetTick>
 8005e0a:	0002      	movs	r2, r0
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	1ad2      	subs	r2, r2, r3
 8005e10:	23fa      	movs	r3, #250	; 0xfa
 8005e12:	009b      	lsls	r3, r3, #2
 8005e14:	429a      	cmp	r2, r3
 8005e16:	d90d      	bls.n	8005e34 <HAL_RTC_SetAlarm_IT+0x168>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	22ff      	movs	r2, #255	; 0xff
 8005e1e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	2221      	movs	r2, #33	; 0x21
 8005e24:	2103      	movs	r1, #3
 8005e26:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2220      	movs	r2, #32
 8005e2c:	2100      	movs	r1, #0
 8005e2e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005e30:	2303      	movs	r3, #3
 8005e32:	e089      	b.n	8005f48 <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	68db      	ldr	r3, [r3, #12]
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	4013      	ands	r3, r2
 8005e3e:	d0e2      	beq.n	8005e06 <HAL_RTC_SetAlarm_IT+0x13a>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	69fa      	ldr	r2, [r7, #28]
 8005e46:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	69ba      	ldr	r2, [r7, #24]
 8005e4e:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	689a      	ldr	r2, [r3, #8]
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	2180      	movs	r1, #128	; 0x80
 8005e5c:	0049      	lsls	r1, r1, #1
 8005e5e:	430a      	orrs	r2, r1
 8005e60:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	689a      	ldr	r2, [r3, #8]
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	2180      	movs	r1, #128	; 0x80
 8005e6e:	0149      	lsls	r1, r1, #5
 8005e70:	430a      	orrs	r2, r1
 8005e72:	609a      	str	r2, [r3, #8]
 8005e74:	e04d      	b.n	8005f12 <HAL_RTC_SetAlarm_IT+0x246>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	689a      	ldr	r2, [r3, #8]
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4935      	ldr	r1, [pc, #212]	; (8005f58 <HAL_RTC_SetAlarm_IT+0x28c>)
 8005e82:	400a      	ands	r2, r1
 8005e84:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	68db      	ldr	r3, [r3, #12]
 8005e8c:	22ff      	movs	r2, #255	; 0xff
 8005e8e:	401a      	ands	r2, r3
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4931      	ldr	r1, [pc, #196]	; (8005f5c <HAL_RTC_SetAlarm_IT+0x290>)
 8005e96:	430a      	orrs	r2, r1
 8005e98:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005e9a:	f7fe f817 	bl	8003ecc <HAL_GetTick>
 8005e9e:	0003      	movs	r3, r0
 8005ea0:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8005ea2:	e016      	b.n	8005ed2 <HAL_RTC_SetAlarm_IT+0x206>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005ea4:	f7fe f812 	bl	8003ecc <HAL_GetTick>
 8005ea8:	0002      	movs	r2, r0
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	1ad2      	subs	r2, r2, r3
 8005eae:	23fa      	movs	r3, #250	; 0xfa
 8005eb0:	009b      	lsls	r3, r3, #2
 8005eb2:	429a      	cmp	r2, r3
 8005eb4:	d90d      	bls.n	8005ed2 <HAL_RTC_SetAlarm_IT+0x206>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	22ff      	movs	r2, #255	; 0xff
 8005ebc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2221      	movs	r2, #33	; 0x21
 8005ec2:	2103      	movs	r1, #3
 8005ec4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2220      	movs	r2, #32
 8005eca:	2100      	movs	r1, #0
 8005ecc:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005ece:	2303      	movs	r3, #3
 8005ed0:	e03a      	b.n	8005f48 <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	68db      	ldr	r3, [r3, #12]
 8005ed8:	2202      	movs	r2, #2
 8005eda:	4013      	ands	r3, r2
 8005edc:	d0e2      	beq.n	8005ea4 <HAL_RTC_SetAlarm_IT+0x1d8>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	69fa      	ldr	r2, [r7, #28]
 8005ee4:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	69ba      	ldr	r2, [r7, #24]
 8005eec:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	689a      	ldr	r2, [r3, #8]
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	2180      	movs	r1, #128	; 0x80
 8005efa:	0089      	lsls	r1, r1, #2
 8005efc:	430a      	orrs	r2, r1
 8005efe:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	689a      	ldr	r2, [r3, #8]
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	2180      	movs	r1, #128	; 0x80
 8005f0c:	0189      	lsls	r1, r1, #6
 8005f0e:	430a      	orrs	r2, r1
 8005f10:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8005f12:	4b13      	ldr	r3, [pc, #76]	; (8005f60 <HAL_RTC_SetAlarm_IT+0x294>)
 8005f14:	681a      	ldr	r2, [r3, #0]
 8005f16:	4b12      	ldr	r3, [pc, #72]	; (8005f60 <HAL_RTC_SetAlarm_IT+0x294>)
 8005f18:	2180      	movs	r1, #128	; 0x80
 8005f1a:	0289      	lsls	r1, r1, #10
 8005f1c:	430a      	orrs	r2, r1
 8005f1e:	601a      	str	r2, [r3, #0]

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8005f20:	4b0f      	ldr	r3, [pc, #60]	; (8005f60 <HAL_RTC_SetAlarm_IT+0x294>)
 8005f22:	689a      	ldr	r2, [r3, #8]
 8005f24:	4b0e      	ldr	r3, [pc, #56]	; (8005f60 <HAL_RTC_SetAlarm_IT+0x294>)
 8005f26:	2180      	movs	r1, #128	; 0x80
 8005f28:	0289      	lsls	r1, r1, #10
 8005f2a:	430a      	orrs	r2, r1
 8005f2c:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	22ff      	movs	r2, #255	; 0xff
 8005f34:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	2221      	movs	r2, #33	; 0x21
 8005f3a:	2101      	movs	r1, #1
 8005f3c:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	2220      	movs	r2, #32
 8005f42:	2100      	movs	r1, #0
 8005f44:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005f46:	2300      	movs	r3, #0
}
 8005f48:	0018      	movs	r0, r3
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	b009      	add	sp, #36	; 0x24
 8005f4e:	bd90      	pop	{r4, r7, pc}
 8005f50:	fffffeff 	.word	0xfffffeff
 8005f54:	fffffe7f 	.word	0xfffffe7f
 8005f58:	fffffdff 	.word	0xfffffdff
 8005f5c:	fffffd7f 	.word	0xfffffd7f
 8005f60:	40010400 	.word	0x40010400

08005f64 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b082      	sub	sp, #8
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	689a      	ldr	r2, [r3, #8]
 8005f72:	2380      	movs	r3, #128	; 0x80
 8005f74:	015b      	lsls	r3, r3, #5
 8005f76:	4013      	ands	r3, r2
 8005f78:	d014      	beq.n	8005fa4 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	68da      	ldr	r2, [r3, #12]
 8005f80:	2380      	movs	r3, #128	; 0x80
 8005f82:	005b      	lsls	r3, r3, #1
 8005f84:	4013      	ands	r3, r2
 8005f86:	d00d      	beq.n	8005fa4 <HAL_RTC_AlarmIRQHandler+0x40>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	0018      	movs	r0, r3
 8005f8c:	f000 f838 	bl	8006000 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	68db      	ldr	r3, [r3, #12]
 8005f96:	22ff      	movs	r2, #255	; 0xff
 8005f98:	401a      	ands	r2, r3
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4915      	ldr	r1, [pc, #84]	; (8005ff4 <HAL_RTC_AlarmIRQHandler+0x90>)
 8005fa0:	430a      	orrs	r2, r1
 8005fa2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	689a      	ldr	r2, [r3, #8]
 8005faa:	2380      	movs	r3, #128	; 0x80
 8005fac:	019b      	lsls	r3, r3, #6
 8005fae:	4013      	ands	r3, r2
 8005fb0:	d014      	beq.n	8005fdc <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	68da      	ldr	r2, [r3, #12]
 8005fb8:	2380      	movs	r3, #128	; 0x80
 8005fba:	009b      	lsls	r3, r3, #2
 8005fbc:	4013      	ands	r3, r2
 8005fbe:	d00d      	beq.n	8005fdc <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* AlarmB callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	0018      	movs	r0, r3
 8005fc4:	f000 f9ac 	bl	8006320 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	68db      	ldr	r3, [r3, #12]
 8005fce:	22ff      	movs	r2, #255	; 0xff
 8005fd0:	401a      	ands	r2, r3
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4908      	ldr	r1, [pc, #32]	; (8005ff8 <HAL_RTC_AlarmIRQHandler+0x94>)
 8005fd8:	430a      	orrs	r2, r1
 8005fda:	60da      	str	r2, [r3, #12]
    }
  }
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8005fdc:	4b07      	ldr	r3, [pc, #28]	; (8005ffc <HAL_RTC_AlarmIRQHandler+0x98>)
 8005fde:	2280      	movs	r2, #128	; 0x80
 8005fe0:	0292      	lsls	r2, r2, #10
 8005fe2:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2221      	movs	r2, #33	; 0x21
 8005fe8:	2101      	movs	r1, #1
 8005fea:	5499      	strb	r1, [r3, r2]
}
 8005fec:	46c0      	nop			; (mov r8, r8)
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	b002      	add	sp, #8
 8005ff2:	bd80      	pop	{r7, pc}
 8005ff4:	fffffe7f 	.word	0xfffffe7f
 8005ff8:	fffffd7f 	.word	0xfffffd7f
 8005ffc:	40010400 	.word	0x40010400

08006000 <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b082      	sub	sp, #8
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8006008:	46c0      	nop			; (mov r8, r8)
 800600a:	46bd      	mov	sp, r7
 800600c:	b002      	add	sp, #8
 800600e:	bd80      	pop	{r7, pc}

08006010 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b084      	sub	sp, #16
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	68da      	ldr	r2, [r3, #12]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	21a0      	movs	r1, #160	; 0xa0
 8006024:	438a      	bics	r2, r1
 8006026:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006028:	f7fd ff50 	bl	8003ecc <HAL_GetTick>
 800602c:	0003      	movs	r3, r0
 800602e:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006030:	e00a      	b.n	8006048 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006032:	f7fd ff4b 	bl	8003ecc <HAL_GetTick>
 8006036:	0002      	movs	r2, r0
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	1ad2      	subs	r2, r2, r3
 800603c:	23fa      	movs	r3, #250	; 0xfa
 800603e:	009b      	lsls	r3, r3, #2
 8006040:	429a      	cmp	r2, r3
 8006042:	d901      	bls.n	8006048 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8006044:	2303      	movs	r3, #3
 8006046:	e006      	b.n	8006056 <HAL_RTC_WaitForSynchro+0x46>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	68db      	ldr	r3, [r3, #12]
 800604e:	2220      	movs	r2, #32
 8006050:	4013      	ands	r3, r2
 8006052:	d0ee      	beq.n	8006032 <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8006054:	2300      	movs	r3, #0
}
 8006056:	0018      	movs	r0, r3
 8006058:	46bd      	mov	sp, r7
 800605a:	b004      	add	sp, #16
 800605c:	bd80      	pop	{r7, pc}

0800605e <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800605e:	b580      	push	{r7, lr}
 8006060:	b084      	sub	sp, #16
 8006062:	af00      	add	r7, sp, #0
 8006064:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	68db      	ldr	r3, [r3, #12]
 800606c:	2240      	movs	r2, #64	; 0x40
 800606e:	4013      	ands	r3, r2
 8006070:	d11a      	bne.n	80060a8 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	2201      	movs	r2, #1
 8006078:	4252      	negs	r2, r2
 800607a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800607c:	f7fd ff26 	bl	8003ecc <HAL_GetTick>
 8006080:	0003      	movs	r3, r0
 8006082:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006084:	e00a      	b.n	800609c <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006086:	f7fd ff21 	bl	8003ecc <HAL_GetTick>
 800608a:	0002      	movs	r2, r0
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	1ad2      	subs	r2, r2, r3
 8006090:	23fa      	movs	r3, #250	; 0xfa
 8006092:	009b      	lsls	r3, r3, #2
 8006094:	429a      	cmp	r2, r3
 8006096:	d901      	bls.n	800609c <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 8006098:	2303      	movs	r3, #3
 800609a:	e006      	b.n	80060aa <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	68db      	ldr	r3, [r3, #12]
 80060a2:	2240      	movs	r2, #64	; 0x40
 80060a4:	4013      	ands	r3, r2
 80060a6:	d0ee      	beq.n	8006086 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 80060a8:	2300      	movs	r3, #0
}
 80060aa:	0018      	movs	r0, r3
 80060ac:	46bd      	mov	sp, r7
 80060ae:	b004      	add	sp, #16
 80060b0:	bd80      	pop	{r7, pc}

080060b2 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80060b2:	b580      	push	{r7, lr}
 80060b4:	b084      	sub	sp, #16
 80060b6:	af00      	add	r7, sp, #0
 80060b8:	0002      	movs	r2, r0
 80060ba:	1dfb      	adds	r3, r7, #7
 80060bc:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 80060be:	2300      	movs	r3, #0
 80060c0:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 80060c2:	230b      	movs	r3, #11
 80060c4:	18fb      	adds	r3, r7, r3
 80060c6:	1dfa      	adds	r2, r7, #7
 80060c8:	7812      	ldrb	r2, [r2, #0]
 80060ca:	701a      	strb	r2, [r3, #0]

  while (Param >= 10U)
 80060cc:	e008      	b.n	80060e0 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	3301      	adds	r3, #1
 80060d2:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 80060d4:	220b      	movs	r2, #11
 80060d6:	18bb      	adds	r3, r7, r2
 80060d8:	18ba      	adds	r2, r7, r2
 80060da:	7812      	ldrb	r2, [r2, #0]
 80060dc:	3a0a      	subs	r2, #10
 80060de:	701a      	strb	r2, [r3, #0]
  while (Param >= 10U)
 80060e0:	230b      	movs	r3, #11
 80060e2:	18fb      	adds	r3, r7, r3
 80060e4:	781b      	ldrb	r3, [r3, #0]
 80060e6:	2b09      	cmp	r3, #9
 80060e8:	d8f1      	bhi.n	80060ce <RTC_ByteToBcd2+0x1c>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	b2db      	uxtb	r3, r3
 80060ee:	011b      	lsls	r3, r3, #4
 80060f0:	b2da      	uxtb	r2, r3
 80060f2:	230b      	movs	r3, #11
 80060f4:	18fb      	adds	r3, r7, r3
 80060f6:	781b      	ldrb	r3, [r3, #0]
 80060f8:	4313      	orrs	r3, r2
 80060fa:	b2db      	uxtb	r3, r3
}
 80060fc:	0018      	movs	r0, r3
 80060fe:	46bd      	mov	sp, r7
 8006100:	b004      	add	sp, #16
 8006102:	bd80      	pop	{r7, pc}

08006104 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b084      	sub	sp, #16
 8006108:	af00      	add	r7, sp, #0
 800610a:	0002      	movs	r2, r0
 800610c:	1dfb      	adds	r3, r7, #7
 800610e:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8006110:	1dfb      	adds	r3, r7, #7
 8006112:	781b      	ldrb	r3, [r3, #0]
 8006114:	091b      	lsrs	r3, r3, #4
 8006116:	b2db      	uxtb	r3, r3
 8006118:	001a      	movs	r2, r3
 800611a:	0013      	movs	r3, r2
 800611c:	009b      	lsls	r3, r3, #2
 800611e:	189b      	adds	r3, r3, r2
 8006120:	005b      	lsls	r3, r3, #1
 8006122:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	b2da      	uxtb	r2, r3
 8006128:	1dfb      	adds	r3, r7, #7
 800612a:	781b      	ldrb	r3, [r3, #0]
 800612c:	210f      	movs	r1, #15
 800612e:	400b      	ands	r3, r1
 8006130:	b2db      	uxtb	r3, r3
 8006132:	18d3      	adds	r3, r2, r3
 8006134:	b2db      	uxtb	r3, r3
}
 8006136:	0018      	movs	r0, r3
 8006138:	46bd      	mov	sp, r7
 800613a:	b004      	add	sp, #16
 800613c:	bd80      	pop	{r7, pc}
	...

08006140 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b086      	sub	sp, #24
 8006144:	af00      	add	r7, sp, #0
 8006146:	60f8      	str	r0, [r7, #12]
 8006148:	60b9      	str	r1, [r7, #8]
 800614a:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	2220      	movs	r2, #32
 8006150:	5c9b      	ldrb	r3, [r3, r2]
 8006152:	2b01      	cmp	r3, #1
 8006154:	d101      	bne.n	800615a <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8006156:	2302      	movs	r3, #2
 8006158:	e0ad      	b.n	80062b6 <HAL_RTCEx_SetWakeUpTimer_IT+0x176>
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	2220      	movs	r2, #32
 800615e:	2101      	movs	r1, #1
 8006160:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2221      	movs	r2, #33	; 0x21
 8006166:	2102      	movs	r1, #2
 8006168:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	22ca      	movs	r2, #202	; 0xca
 8006170:	625a      	str	r2, [r3, #36]	; 0x24
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	2253      	movs	r2, #83	; 0x53
 8006178:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	689a      	ldr	r2, [r3, #8]
 8006180:	2380      	movs	r3, #128	; 0x80
 8006182:	00db      	lsls	r3, r3, #3
 8006184:	4013      	ands	r3, r2
 8006186:	d021      	beq.n	80061cc <HAL_RTCEx_SetWakeUpTimer_IT+0x8c>
  {
    tickstart = HAL_GetTick();
 8006188:	f7fd fea0 	bl	8003ecc <HAL_GetTick>
 800618c:	0003      	movs	r3, r0
 800618e:	617b      	str	r3, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8006190:	e016      	b.n	80061c0 <HAL_RTCEx_SetWakeUpTimer_IT+0x80>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006192:	f7fd fe9b 	bl	8003ecc <HAL_GetTick>
 8006196:	0002      	movs	r2, r0
 8006198:	697b      	ldr	r3, [r7, #20]
 800619a:	1ad2      	subs	r2, r2, r3
 800619c:	23fa      	movs	r3, #250	; 0xfa
 800619e:	009b      	lsls	r3, r3, #2
 80061a0:	429a      	cmp	r2, r3
 80061a2:	d90d      	bls.n	80061c0 <HAL_RTCEx_SetWakeUpTimer_IT+0x80>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	22ff      	movs	r2, #255	; 0xff
 80061aa:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	2221      	movs	r2, #33	; 0x21
 80061b0:	2103      	movs	r1, #3
 80061b2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	2220      	movs	r2, #32
 80061b8:	2100      	movs	r1, #0
 80061ba:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80061bc:	2303      	movs	r3, #3
 80061be:	e07a      	b.n	80062b6 <HAL_RTCEx_SetWakeUpTimer_IT+0x176>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	68db      	ldr	r3, [r3, #12]
 80061c6:	2204      	movs	r2, #4
 80061c8:	4013      	ands	r3, r2
 80061ca:	d1e2      	bne.n	8006192 <HAL_RTCEx_SetWakeUpTimer_IT+0x52>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	689a      	ldr	r2, [r3, #8]
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	493a      	ldr	r1, [pc, #232]	; (80062c0 <HAL_RTCEx_SetWakeUpTimer_IT+0x180>)
 80061d8:	400a      	ands	r2, r1
 80061da:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	68db      	ldr	r3, [r3, #12]
 80061e2:	22ff      	movs	r2, #255	; 0xff
 80061e4:	401a      	ands	r2, r3
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4936      	ldr	r1, [pc, #216]	; (80062c4 <HAL_RTCEx_SetWakeUpTimer_IT+0x184>)
 80061ec:	430a      	orrs	r2, r1
 80061ee:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80061f0:	f7fd fe6c 	bl	8003ecc <HAL_GetTick>
 80061f4:	0003      	movs	r3, r0
 80061f6:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80061f8:	e016      	b.n	8006228 <HAL_RTCEx_SetWakeUpTimer_IT+0xe8>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80061fa:	f7fd fe67 	bl	8003ecc <HAL_GetTick>
 80061fe:	0002      	movs	r2, r0
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	1ad2      	subs	r2, r2, r3
 8006204:	23fa      	movs	r3, #250	; 0xfa
 8006206:	009b      	lsls	r3, r3, #2
 8006208:	429a      	cmp	r2, r3
 800620a:	d90d      	bls.n	8006228 <HAL_RTCEx_SetWakeUpTimer_IT+0xe8>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	22ff      	movs	r2, #255	; 0xff
 8006212:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	2221      	movs	r2, #33	; 0x21
 8006218:	2103      	movs	r1, #3
 800621a:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	2220      	movs	r2, #32
 8006220:	2100      	movs	r1, #0
 8006222:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8006224:	2303      	movs	r3, #3
 8006226:	e046      	b.n	80062b6 <HAL_RTCEx_SetWakeUpTimer_IT+0x176>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	68db      	ldr	r3, [r3, #12]
 800622e:	2204      	movs	r2, #4
 8006230:	4013      	ands	r3, r2
 8006232:	d0e2      	beq.n	80061fa <HAL_RTCEx_SetWakeUpTimer_IT+0xba>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	68ba      	ldr	r2, [r7, #8]
 800623a:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	689a      	ldr	r2, [r3, #8]
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	2107      	movs	r1, #7
 8006248:	438a      	bics	r2, r1
 800624a:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	6899      	ldr	r1, [r3, #8]
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	687a      	ldr	r2, [r7, #4]
 8006258:	430a      	orrs	r2, r1
 800625a:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800625c:	4b1a      	ldr	r3, [pc, #104]	; (80062c8 <HAL_RTCEx_SetWakeUpTimer_IT+0x188>)
 800625e:	681a      	ldr	r2, [r3, #0]
 8006260:	4b19      	ldr	r3, [pc, #100]	; (80062c8 <HAL_RTCEx_SetWakeUpTimer_IT+0x188>)
 8006262:	2180      	movs	r1, #128	; 0x80
 8006264:	0349      	lsls	r1, r1, #13
 8006266:	430a      	orrs	r2, r1
 8006268:	601a      	str	r2, [r3, #0]

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 800626a:	4b17      	ldr	r3, [pc, #92]	; (80062c8 <HAL_RTCEx_SetWakeUpTimer_IT+0x188>)
 800626c:	689a      	ldr	r2, [r3, #8]
 800626e:	4b16      	ldr	r3, [pc, #88]	; (80062c8 <HAL_RTCEx_SetWakeUpTimer_IT+0x188>)
 8006270:	2180      	movs	r1, #128	; 0x80
 8006272:	0349      	lsls	r1, r1, #13
 8006274:	430a      	orrs	r2, r1
 8006276:	609a      	str	r2, [r3, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	689a      	ldr	r2, [r3, #8]
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	2180      	movs	r1, #128	; 0x80
 8006284:	01c9      	lsls	r1, r1, #7
 8006286:	430a      	orrs	r2, r1
 8006288:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	689a      	ldr	r2, [r3, #8]
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	2180      	movs	r1, #128	; 0x80
 8006296:	00c9      	lsls	r1, r1, #3
 8006298:	430a      	orrs	r2, r1
 800629a:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	22ff      	movs	r2, #255	; 0xff
 80062a2:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	2221      	movs	r2, #33	; 0x21
 80062a8:	2101      	movs	r1, #1
 80062aa:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	2220      	movs	r2, #32
 80062b0:	2100      	movs	r1, #0
 80062b2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80062b4:	2300      	movs	r3, #0
}
 80062b6:	0018      	movs	r0, r3
 80062b8:	46bd      	mov	sp, r7
 80062ba:	b006      	add	sp, #24
 80062bc:	bd80      	pop	{r7, pc}
 80062be:	46c0      	nop			; (mov r8, r8)
 80062c0:	fffffbff 	.word	0xfffffbff
 80062c4:	fffffb7f 	.word	0xfffffb7f
 80062c8:	40010400 	.word	0x40010400

080062cc <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b082      	sub	sp, #8
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	68da      	ldr	r2, [r3, #12]
 80062da:	2380      	movs	r3, #128	; 0x80
 80062dc:	00db      	lsls	r3, r3, #3
 80062de:	4013      	ands	r3, r2
 80062e0:	d00d      	beq.n	80062fe <HAL_RTCEx_WakeUpTimerIRQHandler+0x32>
  {
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	0018      	movs	r0, r3
 80062e6:	f017 fe2f 	bl	801df48 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	68db      	ldr	r3, [r3, #12]
 80062f0:	22ff      	movs	r2, #255	; 0xff
 80062f2:	401a      	ands	r2, r3
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4907      	ldr	r1, [pc, #28]	; (8006318 <HAL_RTCEx_WakeUpTimerIRQHandler+0x4c>)
 80062fa:	430a      	orrs	r2, r1
 80062fc:	60da      	str	r2, [r3, #12]
  }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 80062fe:	4b07      	ldr	r3, [pc, #28]	; (800631c <HAL_RTCEx_WakeUpTimerIRQHandler+0x50>)
 8006300:	2280      	movs	r2, #128	; 0x80
 8006302:	0352      	lsls	r2, r2, #13
 8006304:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2221      	movs	r2, #33	; 0x21
 800630a:	2101      	movs	r1, #1
 800630c:	5499      	strb	r1, [r3, r2]
}
 800630e:	46c0      	nop			; (mov r8, r8)
 8006310:	46bd      	mov	sp, r7
 8006312:	b002      	add	sp, #8
 8006314:	bd80      	pop	{r7, pc}
 8006316:	46c0      	nop			; (mov r8, r8)
 8006318:	fffffb7f 	.word	0xfffffb7f
 800631c:	40010400 	.word	0x40010400

08006320 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b082      	sub	sp, #8
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8006328:	46c0      	nop			; (mov r8, r8)
 800632a:	46bd      	mov	sp, r7
 800632c:	b002      	add	sp, #8
 800632e:	bd80      	pop	{r7, pc}

08006330 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b082      	sub	sp, #8
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d101      	bne.n	8006342 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800633e:	2301      	movs	r3, #1
 8006340:	e059      	b.n	80063f6 <HAL_SPI_Init+0xc6>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2200      	movs	r2, #0
 8006346:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2251      	movs	r2, #81	; 0x51
 800634c:	5c9b      	ldrb	r3, [r3, r2]
 800634e:	b2db      	uxtb	r3, r3
 8006350:	2b00      	cmp	r3, #0
 8006352:	d107      	bne.n	8006364 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2250      	movs	r2, #80	; 0x50
 8006358:	2100      	movs	r1, #0
 800635a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	0018      	movs	r0, r3
 8006360:	f7fd fad4 	bl	800390c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2251      	movs	r2, #81	; 0x51
 8006368:	2102      	movs	r1, #2
 800636a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	681a      	ldr	r2, [r3, #0]
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	2140      	movs	r1, #64	; 0x40
 8006378:	438a      	bics	r2, r1
 800637a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	685a      	ldr	r2, [r3, #4]
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	689b      	ldr	r3, [r3, #8]
 8006384:	431a      	orrs	r2, r3
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	68db      	ldr	r3, [r3, #12]
 800638a:	431a      	orrs	r2, r3
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	691b      	ldr	r3, [r3, #16]
 8006390:	431a      	orrs	r2, r3
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	695b      	ldr	r3, [r3, #20]
 8006396:	431a      	orrs	r2, r3
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6999      	ldr	r1, [r3, #24]
 800639c:	2380      	movs	r3, #128	; 0x80
 800639e:	009b      	lsls	r3, r3, #2
 80063a0:	400b      	ands	r3, r1
 80063a2:	431a      	orrs	r2, r3
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	69db      	ldr	r3, [r3, #28]
 80063a8:	431a      	orrs	r2, r3
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6a1b      	ldr	r3, [r3, #32]
 80063ae:	431a      	orrs	r2, r3
 80063b0:	0011      	movs	r1, r2
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	430a      	orrs	r2, r1
 80063bc:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	699b      	ldr	r3, [r3, #24]
 80063c2:	0c1b      	lsrs	r3, r3, #16
 80063c4:	2204      	movs	r2, #4
 80063c6:	4013      	ands	r3, r2
 80063c8:	0019      	movs	r1, r3
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	430a      	orrs	r2, r1
 80063d4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	69da      	ldr	r2, [r3, #28]
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4907      	ldr	r1, [pc, #28]	; (8006400 <HAL_SPI_Init+0xd0>)
 80063e2:	400a      	ands	r2, r1
 80063e4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2200      	movs	r2, #0
 80063ea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2251      	movs	r2, #81	; 0x51
 80063f0:	2101      	movs	r1, #1
 80063f2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80063f4:	2300      	movs	r3, #0
}
 80063f6:	0018      	movs	r0, r3
 80063f8:	46bd      	mov	sp, r7
 80063fa:	b002      	add	sp, #8
 80063fc:	bd80      	pop	{r7, pc}
 80063fe:	46c0      	nop			; (mov r8, r8)
 8006400:	fffff7ff 	.word	0xfffff7ff

08006404 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b08c      	sub	sp, #48	; 0x30
 8006408:	af00      	add	r7, sp, #0
 800640a:	60f8      	str	r0, [r7, #12]
 800640c:	60b9      	str	r1, [r7, #8]
 800640e:	607a      	str	r2, [r7, #4]
 8006410:	001a      	movs	r2, r3
 8006412:	1cbb      	adds	r3, r7, #2
 8006414:	801a      	strh	r2, [r3, #0]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006416:	2301      	movs	r3, #1
 8006418:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800641a:	232b      	movs	r3, #43	; 0x2b
 800641c:	18fb      	adds	r3, r7, r3
 800641e:	2200      	movs	r2, #0
 8006420:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2250      	movs	r2, #80	; 0x50
 8006426:	5c9b      	ldrb	r3, [r3, r2]
 8006428:	2b01      	cmp	r3, #1
 800642a:	d101      	bne.n	8006430 <HAL_SPI_TransmitReceive+0x2c>
 800642c:	2302      	movs	r3, #2
 800642e:	e1a1      	b.n	8006774 <HAL_SPI_TransmitReceive+0x370>
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	2250      	movs	r2, #80	; 0x50
 8006434:	2101      	movs	r1, #1
 8006436:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006438:	f7fd fd48 	bl	8003ecc <HAL_GetTick>
 800643c:	0003      	movs	r3, r0
 800643e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006440:	2023      	movs	r0, #35	; 0x23
 8006442:	183b      	adds	r3, r7, r0
 8006444:	68fa      	ldr	r2, [r7, #12]
 8006446:	2151      	movs	r1, #81	; 0x51
 8006448:	5c52      	ldrb	r2, [r2, r1]
 800644a:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006452:	231a      	movs	r3, #26
 8006454:	18fb      	adds	r3, r7, r3
 8006456:	1cba      	adds	r2, r7, #2
 8006458:	8812      	ldrh	r2, [r2, #0]
 800645a:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800645c:	183b      	adds	r3, r7, r0
 800645e:	781b      	ldrb	r3, [r3, #0]
 8006460:	2b01      	cmp	r3, #1
 8006462:	d012      	beq.n	800648a <HAL_SPI_TransmitReceive+0x86>
 8006464:	69fa      	ldr	r2, [r7, #28]
 8006466:	2382      	movs	r3, #130	; 0x82
 8006468:	005b      	lsls	r3, r3, #1
 800646a:	429a      	cmp	r2, r3
 800646c:	d108      	bne.n	8006480 <HAL_SPI_TransmitReceive+0x7c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	689b      	ldr	r3, [r3, #8]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d104      	bne.n	8006480 <HAL_SPI_TransmitReceive+0x7c>
 8006476:	2323      	movs	r3, #35	; 0x23
 8006478:	18fb      	adds	r3, r7, r3
 800647a:	781b      	ldrb	r3, [r3, #0]
 800647c:	2b04      	cmp	r3, #4
 800647e:	d004      	beq.n	800648a <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 8006480:	232b      	movs	r3, #43	; 0x2b
 8006482:	18fb      	adds	r3, r7, r3
 8006484:	2202      	movs	r2, #2
 8006486:	701a      	strb	r2, [r3, #0]
    goto error;
 8006488:	e169      	b.n	800675e <HAL_SPI_TransmitReceive+0x35a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d006      	beq.n	800649e <HAL_SPI_TransmitReceive+0x9a>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d003      	beq.n	800649e <HAL_SPI_TransmitReceive+0x9a>
 8006496:	1cbb      	adds	r3, r7, #2
 8006498:	881b      	ldrh	r3, [r3, #0]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d104      	bne.n	80064a8 <HAL_SPI_TransmitReceive+0xa4>
  {
    errorcode = HAL_ERROR;
 800649e:	232b      	movs	r3, #43	; 0x2b
 80064a0:	18fb      	adds	r3, r7, r3
 80064a2:	2201      	movs	r2, #1
 80064a4:	701a      	strb	r2, [r3, #0]
    goto error;
 80064a6:	e15a      	b.n	800675e <HAL_SPI_TransmitReceive+0x35a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	2251      	movs	r2, #81	; 0x51
 80064ac:	5c9b      	ldrb	r3, [r3, r2]
 80064ae:	b2db      	uxtb	r3, r3
 80064b0:	2b04      	cmp	r3, #4
 80064b2:	d003      	beq.n	80064bc <HAL_SPI_TransmitReceive+0xb8>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	2251      	movs	r2, #81	; 0x51
 80064b8:	2105      	movs	r1, #5
 80064ba:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	2200      	movs	r2, #0
 80064c0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	687a      	ldr	r2, [r7, #4]
 80064c6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	1cba      	adds	r2, r7, #2
 80064cc:	8812      	ldrh	r2, [r2, #0]
 80064ce:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	1cba      	adds	r2, r7, #2
 80064d4:	8812      	ldrh	r2, [r2, #0]
 80064d6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	68ba      	ldr	r2, [r7, #8]
 80064dc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	1cba      	adds	r2, r7, #2
 80064e2:	8812      	ldrh	r2, [r2, #0]
 80064e4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	1cba      	adds	r2, r7, #2
 80064ea:	8812      	ldrh	r2, [r2, #0]
 80064ec:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	2200      	movs	r2, #0
 80064f2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	2200      	movs	r2, #0
 80064f8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	2240      	movs	r2, #64	; 0x40
 8006502:	4013      	ands	r3, r2
 8006504:	2b40      	cmp	r3, #64	; 0x40
 8006506:	d007      	beq.n	8006518 <HAL_SPI_TransmitReceive+0x114>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	681a      	ldr	r2, [r3, #0]
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	2140      	movs	r1, #64	; 0x40
 8006514:	430a      	orrs	r2, r1
 8006516:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	68da      	ldr	r2, [r3, #12]
 800651c:	2380      	movs	r3, #128	; 0x80
 800651e:	011b      	lsls	r3, r3, #4
 8006520:	429a      	cmp	r2, r3
 8006522:	d000      	beq.n	8006526 <HAL_SPI_TransmitReceive+0x122>
 8006524:	e07a      	b.n	800661c <HAL_SPI_TransmitReceive+0x218>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	685b      	ldr	r3, [r3, #4]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d004      	beq.n	8006538 <HAL_SPI_TransmitReceive+0x134>
 800652e:	231a      	movs	r3, #26
 8006530:	18fb      	adds	r3, r7, r3
 8006532:	881b      	ldrh	r3, [r3, #0]
 8006534:	2b01      	cmp	r3, #1
 8006536:	d166      	bne.n	8006606 <HAL_SPI_TransmitReceive+0x202>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800653c:	881a      	ldrh	r2, [r3, #0]
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006548:	1c9a      	adds	r2, r3, #2
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006552:	b29b      	uxth	r3, r3
 8006554:	3b01      	subs	r3, #1
 8006556:	b29a      	uxth	r2, r3
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800655c:	e053      	b.n	8006606 <HAL_SPI_TransmitReceive+0x202>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	689b      	ldr	r3, [r3, #8]
 8006564:	2202      	movs	r2, #2
 8006566:	4013      	ands	r3, r2
 8006568:	2b02      	cmp	r3, #2
 800656a:	d11b      	bne.n	80065a4 <HAL_SPI_TransmitReceive+0x1a0>
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006570:	b29b      	uxth	r3, r3
 8006572:	2b00      	cmp	r3, #0
 8006574:	d016      	beq.n	80065a4 <HAL_SPI_TransmitReceive+0x1a0>
 8006576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006578:	2b01      	cmp	r3, #1
 800657a:	d113      	bne.n	80065a4 <HAL_SPI_TransmitReceive+0x1a0>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006580:	881a      	ldrh	r2, [r3, #0]
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800658c:	1c9a      	adds	r2, r3, #2
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006596:	b29b      	uxth	r3, r3
 8006598:	3b01      	subs	r3, #1
 800659a:	b29a      	uxth	r2, r3
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80065a0:	2300      	movs	r3, #0
 80065a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	689b      	ldr	r3, [r3, #8]
 80065aa:	2201      	movs	r2, #1
 80065ac:	4013      	ands	r3, r2
 80065ae:	2b01      	cmp	r3, #1
 80065b0:	d119      	bne.n	80065e6 <HAL_SPI_TransmitReceive+0x1e2>
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065b6:	b29b      	uxth	r3, r3
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d014      	beq.n	80065e6 <HAL_SPI_TransmitReceive+0x1e2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	68da      	ldr	r2, [r3, #12]
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065c6:	b292      	uxth	r2, r2
 80065c8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ce:	1c9a      	adds	r2, r3, #2
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065d8:	b29b      	uxth	r3, r3
 80065da:	3b01      	subs	r3, #1
 80065dc:	b29a      	uxth	r2, r3
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80065e2:	2301      	movs	r3, #1
 80065e4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80065e6:	f7fd fc71 	bl	8003ecc <HAL_GetTick>
 80065ea:	0002      	movs	r2, r0
 80065ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ee:	1ad3      	subs	r3, r2, r3
 80065f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80065f2:	429a      	cmp	r2, r3
 80065f4:	d807      	bhi.n	8006606 <HAL_SPI_TransmitReceive+0x202>
 80065f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065f8:	3301      	adds	r3, #1
 80065fa:	d004      	beq.n	8006606 <HAL_SPI_TransmitReceive+0x202>
      {
        errorcode = HAL_TIMEOUT;
 80065fc:	232b      	movs	r3, #43	; 0x2b
 80065fe:	18fb      	adds	r3, r7, r3
 8006600:	2203      	movs	r2, #3
 8006602:	701a      	strb	r2, [r3, #0]
        goto error;
 8006604:	e0ab      	b.n	800675e <HAL_SPI_TransmitReceive+0x35a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800660a:	b29b      	uxth	r3, r3
 800660c:	2b00      	cmp	r3, #0
 800660e:	d1a6      	bne.n	800655e <HAL_SPI_TransmitReceive+0x15a>
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006614:	b29b      	uxth	r3, r3
 8006616:	2b00      	cmp	r3, #0
 8006618:	d1a1      	bne.n	800655e <HAL_SPI_TransmitReceive+0x15a>
 800661a:	e07f      	b.n	800671c <HAL_SPI_TransmitReceive+0x318>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d005      	beq.n	8006630 <HAL_SPI_TransmitReceive+0x22c>
 8006624:	231a      	movs	r3, #26
 8006626:	18fb      	adds	r3, r7, r3
 8006628:	881b      	ldrh	r3, [r3, #0]
 800662a:	2b01      	cmp	r3, #1
 800662c:	d000      	beq.n	8006630 <HAL_SPI_TransmitReceive+0x22c>
 800662e:	e06b      	b.n	8006708 <HAL_SPI_TransmitReceive+0x304>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	330c      	adds	r3, #12
 800663a:	7812      	ldrb	r2, [r2, #0]
 800663c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006642:	1c5a      	adds	r2, r3, #1
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800664c:	b29b      	uxth	r3, r3
 800664e:	3b01      	subs	r3, #1
 8006650:	b29a      	uxth	r2, r3
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006656:	e057      	b.n	8006708 <HAL_SPI_TransmitReceive+0x304>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	689b      	ldr	r3, [r3, #8]
 800665e:	2202      	movs	r2, #2
 8006660:	4013      	ands	r3, r2
 8006662:	2b02      	cmp	r3, #2
 8006664:	d11c      	bne.n	80066a0 <HAL_SPI_TransmitReceive+0x29c>
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800666a:	b29b      	uxth	r3, r3
 800666c:	2b00      	cmp	r3, #0
 800666e:	d017      	beq.n	80066a0 <HAL_SPI_TransmitReceive+0x29c>
 8006670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006672:	2b01      	cmp	r3, #1
 8006674:	d114      	bne.n	80066a0 <HAL_SPI_TransmitReceive+0x29c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	330c      	adds	r3, #12
 8006680:	7812      	ldrb	r2, [r2, #0]
 8006682:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006688:	1c5a      	adds	r2, r3, #1
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006692:	b29b      	uxth	r3, r3
 8006694:	3b01      	subs	r3, #1
 8006696:	b29a      	uxth	r2, r3
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800669c:	2300      	movs	r3, #0
 800669e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	689b      	ldr	r3, [r3, #8]
 80066a6:	2201      	movs	r2, #1
 80066a8:	4013      	ands	r3, r2
 80066aa:	2b01      	cmp	r3, #1
 80066ac:	d119      	bne.n	80066e2 <HAL_SPI_TransmitReceive+0x2de>
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066b2:	b29b      	uxth	r3, r3
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d014      	beq.n	80066e2 <HAL_SPI_TransmitReceive+0x2de>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	68da      	ldr	r2, [r3, #12]
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066c2:	b2d2      	uxtb	r2, r2
 80066c4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066ca:	1c5a      	adds	r2, r3, #1
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066d4:	b29b      	uxth	r3, r3
 80066d6:	3b01      	subs	r3, #1
 80066d8:	b29a      	uxth	r2, r3
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80066de:	2301      	movs	r3, #1
 80066e0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80066e2:	f7fd fbf3 	bl	8003ecc <HAL_GetTick>
 80066e6:	0002      	movs	r2, r0
 80066e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ea:	1ad3      	subs	r3, r2, r3
 80066ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80066ee:	429a      	cmp	r2, r3
 80066f0:	d802      	bhi.n	80066f8 <HAL_SPI_TransmitReceive+0x2f4>
 80066f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066f4:	3301      	adds	r3, #1
 80066f6:	d102      	bne.n	80066fe <HAL_SPI_TransmitReceive+0x2fa>
 80066f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d104      	bne.n	8006708 <HAL_SPI_TransmitReceive+0x304>
      {
        errorcode = HAL_TIMEOUT;
 80066fe:	232b      	movs	r3, #43	; 0x2b
 8006700:	18fb      	adds	r3, r7, r3
 8006702:	2203      	movs	r2, #3
 8006704:	701a      	strb	r2, [r3, #0]
        goto error;
 8006706:	e02a      	b.n	800675e <HAL_SPI_TransmitReceive+0x35a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800670c:	b29b      	uxth	r3, r3
 800670e:	2b00      	cmp	r3, #0
 8006710:	d1a2      	bne.n	8006658 <HAL_SPI_TransmitReceive+0x254>
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006716:	b29b      	uxth	r3, r3
 8006718:	2b00      	cmp	r3, #0
 800671a:	d19d      	bne.n	8006658 <HAL_SPI_TransmitReceive+0x254>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800671c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800671e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	0018      	movs	r0, r3
 8006724:	f000 f89a 	bl	800685c <SPI_EndRxTxTransaction>
 8006728:	1e03      	subs	r3, r0, #0
 800672a:	d007      	beq.n	800673c <HAL_SPI_TransmitReceive+0x338>
  {
    errorcode = HAL_ERROR;
 800672c:	232b      	movs	r3, #43	; 0x2b
 800672e:	18fb      	adds	r3, r7, r3
 8006730:	2201      	movs	r2, #1
 8006732:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	2220      	movs	r2, #32
 8006738:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800673a:	e010      	b.n	800675e <HAL_SPI_TransmitReceive+0x35a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	689b      	ldr	r3, [r3, #8]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d10b      	bne.n	800675c <HAL_SPI_TransmitReceive+0x358>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006744:	2300      	movs	r3, #0
 8006746:	617b      	str	r3, [r7, #20]
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	68db      	ldr	r3, [r3, #12]
 800674e:	617b      	str	r3, [r7, #20]
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	689b      	ldr	r3, [r3, #8]
 8006756:	617b      	str	r3, [r7, #20]
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	e000      	b.n	800675e <HAL_SPI_TransmitReceive+0x35a>
  }

error :
 800675c:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	2251      	movs	r2, #81	; 0x51
 8006762:	2101      	movs	r1, #1
 8006764:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	2250      	movs	r2, #80	; 0x50
 800676a:	2100      	movs	r1, #0
 800676c:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800676e:	232b      	movs	r3, #43	; 0x2b
 8006770:	18fb      	adds	r3, r7, r3
 8006772:	781b      	ldrb	r3, [r3, #0]
}
 8006774:	0018      	movs	r0, r3
 8006776:	46bd      	mov	sp, r7
 8006778:	b00c      	add	sp, #48	; 0x30
 800677a:	bd80      	pop	{r7, pc}

0800677c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b084      	sub	sp, #16
 8006780:	af00      	add	r7, sp, #0
 8006782:	60f8      	str	r0, [r7, #12]
 8006784:	60b9      	str	r1, [r7, #8]
 8006786:	603b      	str	r3, [r7, #0]
 8006788:	1dfb      	adds	r3, r7, #7
 800678a:	701a      	strb	r2, [r3, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800678c:	e050      	b.n	8006830 <SPI_WaitFlagStateUntilTimeout+0xb4>
  {
    if (Timeout != HAL_MAX_DELAY)
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	3301      	adds	r3, #1
 8006792:	d04d      	beq.n	8006830 <SPI_WaitFlagStateUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8006794:	f7fd fb9a 	bl	8003ecc <HAL_GetTick>
 8006798:	0002      	movs	r2, r0
 800679a:	69bb      	ldr	r3, [r7, #24]
 800679c:	1ad3      	subs	r3, r2, r3
 800679e:	683a      	ldr	r2, [r7, #0]
 80067a0:	429a      	cmp	r2, r3
 80067a2:	d902      	bls.n	80067aa <SPI_WaitFlagStateUntilTimeout+0x2e>
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d142      	bne.n	8006830 <SPI_WaitFlagStateUntilTimeout+0xb4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	685a      	ldr	r2, [r3, #4]
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	21e0      	movs	r1, #224	; 0xe0
 80067b6:	438a      	bics	r2, r1
 80067b8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	685a      	ldr	r2, [r3, #4]
 80067be:	2382      	movs	r3, #130	; 0x82
 80067c0:	005b      	lsls	r3, r3, #1
 80067c2:	429a      	cmp	r2, r3
 80067c4:	d113      	bne.n	80067ee <SPI_WaitFlagStateUntilTimeout+0x72>
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	689a      	ldr	r2, [r3, #8]
 80067ca:	2380      	movs	r3, #128	; 0x80
 80067cc:	021b      	lsls	r3, r3, #8
 80067ce:	429a      	cmp	r2, r3
 80067d0:	d005      	beq.n	80067de <SPI_WaitFlagStateUntilTimeout+0x62>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	689a      	ldr	r2, [r3, #8]
 80067d6:	2380      	movs	r3, #128	; 0x80
 80067d8:	00db      	lsls	r3, r3, #3
 80067da:	429a      	cmp	r2, r3
 80067dc:	d107      	bne.n	80067ee <SPI_WaitFlagStateUntilTimeout+0x72>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	681a      	ldr	r2, [r3, #0]
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	2140      	movs	r1, #64	; 0x40
 80067ea:	438a      	bics	r2, r1
 80067ec:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80067f2:	2380      	movs	r3, #128	; 0x80
 80067f4:	019b      	lsls	r3, r3, #6
 80067f6:	429a      	cmp	r2, r3
 80067f8:	d110      	bne.n	800681c <SPI_WaitFlagStateUntilTimeout+0xa0>
        {
          SPI_RESET_CRC(hspi);
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	681a      	ldr	r2, [r3, #0]
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4914      	ldr	r1, [pc, #80]	; (8006858 <SPI_WaitFlagStateUntilTimeout+0xdc>)
 8006806:	400a      	ands	r2, r1
 8006808:	601a      	str	r2, [r3, #0]
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	681a      	ldr	r2, [r3, #0]
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	2180      	movs	r1, #128	; 0x80
 8006816:	0189      	lsls	r1, r1, #6
 8006818:	430a      	orrs	r2, r1
 800681a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	2251      	movs	r2, #81	; 0x51
 8006820:	2101      	movs	r1, #1
 8006822:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	2250      	movs	r2, #80	; 0x50
 8006828:	2100      	movs	r1, #0
 800682a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800682c:	2303      	movs	r3, #3
 800682e:	e00f      	b.n	8006850 <SPI_WaitFlagStateUntilTimeout+0xd4>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	689b      	ldr	r3, [r3, #8]
 8006836:	68ba      	ldr	r2, [r7, #8]
 8006838:	4013      	ands	r3, r2
 800683a:	68ba      	ldr	r2, [r7, #8]
 800683c:	1ad3      	subs	r3, r2, r3
 800683e:	425a      	negs	r2, r3
 8006840:	4153      	adcs	r3, r2
 8006842:	b2db      	uxtb	r3, r3
 8006844:	001a      	movs	r2, r3
 8006846:	1dfb      	adds	r3, r7, #7
 8006848:	781b      	ldrb	r3, [r3, #0]
 800684a:	429a      	cmp	r2, r3
 800684c:	d19f      	bne.n	800678e <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800684e:	2300      	movs	r3, #0
}
 8006850:	0018      	movs	r0, r3
 8006852:	46bd      	mov	sp, r7
 8006854:	b004      	add	sp, #16
 8006856:	bd80      	pop	{r7, pc}
 8006858:	ffffdfff 	.word	0xffffdfff

0800685c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b086      	sub	sp, #24
 8006860:	af02      	add	r7, sp, #8
 8006862:	60f8      	str	r0, [r7, #12]
 8006864:	60b9      	str	r1, [r7, #8]
 8006866:	607a      	str	r2, [r7, #4]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	685a      	ldr	r2, [r3, #4]
 800686c:	2382      	movs	r3, #130	; 0x82
 800686e:	005b      	lsls	r3, r3, #1
 8006870:	429a      	cmp	r2, r3
 8006872:	d112      	bne.n	800689a <SPI_EndRxTxTransaction+0x3e>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006874:	68ba      	ldr	r2, [r7, #8]
 8006876:	68f8      	ldr	r0, [r7, #12]
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	9300      	str	r3, [sp, #0]
 800687c:	0013      	movs	r3, r2
 800687e:	2200      	movs	r2, #0
 8006880:	2180      	movs	r1, #128	; 0x80
 8006882:	f7ff ff7b 	bl	800677c <SPI_WaitFlagStateUntilTimeout>
 8006886:	1e03      	subs	r3, r0, #0
 8006888:	d020      	beq.n	80068cc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800688e:	2220      	movs	r2, #32
 8006890:	431a      	orrs	r2, r3
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006896:	2303      	movs	r3, #3
 8006898:	e019      	b.n	80068ce <SPI_EndRxTxTransaction+0x72>
    }
  }
  else
  {
    /* Control RXNE flag in case of Full-Duplex transfer */
    if (hspi->State == HAL_SPI_STATE_BUSY_TX_RX)
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	2251      	movs	r2, #81	; 0x51
 800689e:	5c9b      	ldrb	r3, [r3, r2]
 80068a0:	b2db      	uxtb	r3, r3
 80068a2:	2b05      	cmp	r3, #5
 80068a4:	d112      	bne.n	80068cc <SPI_EndRxTxTransaction+0x70>
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80068a6:	68ba      	ldr	r2, [r7, #8]
 80068a8:	68f8      	ldr	r0, [r7, #12]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	9300      	str	r3, [sp, #0]
 80068ae:	0013      	movs	r3, r2
 80068b0:	2200      	movs	r2, #0
 80068b2:	2101      	movs	r1, #1
 80068b4:	f7ff ff62 	bl	800677c <SPI_WaitFlagStateUntilTimeout>
 80068b8:	1e03      	subs	r3, r0, #0
 80068ba:	d007      	beq.n	80068cc <SPI_EndRxTxTransaction+0x70>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068c0:	2220      	movs	r2, #32
 80068c2:	431a      	orrs	r2, r3
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80068c8:	2303      	movs	r3, #3
 80068ca:	e000      	b.n	80068ce <SPI_EndRxTxTransaction+0x72>
      }
    }
  }
  return HAL_OK;
 80068cc:	2300      	movs	r3, #0
}
 80068ce:	0018      	movs	r0, r3
 80068d0:	46bd      	mov	sp, r7
 80068d2:	b004      	add	sp, #16
 80068d4:	bd80      	pop	{r7, pc}
	...

080068d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b082      	sub	sp, #8
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d101      	bne.n	80068ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80068e6:	2301      	movs	r3, #1
 80068e8:	e044      	b.n	8006974 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d107      	bne.n	8006902 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2270      	movs	r2, #112	; 0x70
 80068f6:	2100      	movs	r1, #0
 80068f8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	0018      	movs	r0, r3
 80068fe:	f7fd f9e1 	bl	8003cc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2224      	movs	r2, #36	; 0x24
 8006906:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	681a      	ldr	r2, [r3, #0]
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	2101      	movs	r1, #1
 8006914:	438a      	bics	r2, r1
 8006916:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	0018      	movs	r0, r3
 800691c:	f000 fabe 	bl	8006e9c <UART_SetConfig>
 8006920:	0003      	movs	r3, r0
 8006922:	2b01      	cmp	r3, #1
 8006924:	d101      	bne.n	800692a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006926:	2301      	movs	r3, #1
 8006928:	e024      	b.n	8006974 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800692e:	2b00      	cmp	r3, #0
 8006930:	d003      	beq.n	800693a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	0018      	movs	r0, r3
 8006936:	f000 fde5 	bl	8007504 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	685a      	ldr	r2, [r3, #4]
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	490d      	ldr	r1, [pc, #52]	; (800697c <HAL_UART_Init+0xa4>)
 8006946:	400a      	ands	r2, r1
 8006948:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	689a      	ldr	r2, [r3, #8]
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	212a      	movs	r1, #42	; 0x2a
 8006956:	438a      	bics	r2, r1
 8006958:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	681a      	ldr	r2, [r3, #0]
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	2101      	movs	r1, #1
 8006966:	430a      	orrs	r2, r1
 8006968:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	0018      	movs	r0, r3
 800696e:	f000 fe7d 	bl	800766c <UART_CheckIdleState>
 8006972:	0003      	movs	r3, r0
}
 8006974:	0018      	movs	r0, r3
 8006976:	46bd      	mov	sp, r7
 8006978:	b002      	add	sp, #8
 800697a:	bd80      	pop	{r7, pc}
 800697c:	ffffb7ff 	.word	0xffffb7ff

08006980 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b08a      	sub	sp, #40	; 0x28
 8006984:	af02      	add	r7, sp, #8
 8006986:	60f8      	str	r0, [r7, #12]
 8006988:	60b9      	str	r1, [r7, #8]
 800698a:	603b      	str	r3, [r7, #0]
 800698c:	1dbb      	adds	r3, r7, #6
 800698e:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006994:	2b20      	cmp	r3, #32
 8006996:	d000      	beq.n	800699a <HAL_UART_Transmit+0x1a>
 8006998:	e094      	b.n	8006ac4 <HAL_UART_Transmit+0x144>
  {
    if ((pData == NULL) || (Size == 0U))
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d003      	beq.n	80069a8 <HAL_UART_Transmit+0x28>
 80069a0:	1dbb      	adds	r3, r7, #6
 80069a2:	881b      	ldrh	r3, [r3, #0]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d101      	bne.n	80069ac <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80069a8:	2301      	movs	r3, #1
 80069aa:	e08c      	b.n	8006ac6 <HAL_UART_Transmit+0x146>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	689a      	ldr	r2, [r3, #8]
 80069b0:	2380      	movs	r3, #128	; 0x80
 80069b2:	015b      	lsls	r3, r3, #5
 80069b4:	429a      	cmp	r2, r3
 80069b6:	d109      	bne.n	80069cc <HAL_UART_Transmit+0x4c>
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	691b      	ldr	r3, [r3, #16]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d105      	bne.n	80069cc <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1) != 0)
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	2201      	movs	r2, #1
 80069c4:	4013      	ands	r3, r2
 80069c6:	d001      	beq.n	80069cc <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80069c8:	2301      	movs	r3, #1
 80069ca:	e07c      	b.n	8006ac6 <HAL_UART_Transmit+0x146>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	2270      	movs	r2, #112	; 0x70
 80069d0:	5c9b      	ldrb	r3, [r3, r2]
 80069d2:	2b01      	cmp	r3, #1
 80069d4:	d101      	bne.n	80069da <HAL_UART_Transmit+0x5a>
 80069d6:	2302      	movs	r3, #2
 80069d8:	e075      	b.n	8006ac6 <HAL_UART_Transmit+0x146>
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	2270      	movs	r2, #112	; 0x70
 80069de:	2101      	movs	r1, #1
 80069e0:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	2200      	movs	r2, #0
 80069e6:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	2221      	movs	r2, #33	; 0x21
 80069ec:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80069ee:	f7fd fa6d 	bl	8003ecc <HAL_GetTick>
 80069f2:	0003      	movs	r3, r0
 80069f4:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	1dba      	adds	r2, r7, #6
 80069fa:	2150      	movs	r1, #80	; 0x50
 80069fc:	8812      	ldrh	r2, [r2, #0]
 80069fe:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	1dba      	adds	r2, r7, #6
 8006a04:	2152      	movs	r1, #82	; 0x52
 8006a06:	8812      	ldrh	r2, [r2, #0]
 8006a08:	525a      	strh	r2, [r3, r1]

        /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	689a      	ldr	r2, [r3, #8]
 8006a0e:	2380      	movs	r3, #128	; 0x80
 8006a10:	015b      	lsls	r3, r3, #5
 8006a12:	429a      	cmp	r2, r3
 8006a14:	d108      	bne.n	8006a28 <HAL_UART_Transmit+0xa8>
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	691b      	ldr	r3, [r3, #16]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d104      	bne.n	8006a28 <HAL_UART_Transmit+0xa8>
    {
      pdata8bits  = NULL;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	61bb      	str	r3, [r7, #24]
 8006a26:	e003      	b.n	8006a30 <HAL_UART_Transmit+0xb0>
    }
    else
    {
      pdata8bits  = pData;
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006a30:	e02c      	b.n	8006a8c <HAL_UART_Transmit+0x10c>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006a32:	697a      	ldr	r2, [r7, #20]
 8006a34:	68f8      	ldr	r0, [r7, #12]
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	9300      	str	r3, [sp, #0]
 8006a3a:	0013      	movs	r3, r2
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	2180      	movs	r1, #128	; 0x80
 8006a40:	f000 fe5a 	bl	80076f8 <UART_WaitOnFlagUntilTimeout>
 8006a44:	1e03      	subs	r3, r0, #0
 8006a46:	d001      	beq.n	8006a4c <HAL_UART_Transmit+0xcc>
      {
        return HAL_TIMEOUT;
 8006a48:	2303      	movs	r3, #3
 8006a4a:	e03c      	b.n	8006ac6 <HAL_UART_Transmit+0x146>
      }
      if (pdata8bits == NULL)
 8006a4c:	69fb      	ldr	r3, [r7, #28]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d10b      	bne.n	8006a6a <HAL_UART_Transmit+0xea>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006a52:	69bb      	ldr	r3, [r7, #24]
 8006a54:	881b      	ldrh	r3, [r3, #0]
 8006a56:	001a      	movs	r2, r3
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	05d2      	lsls	r2, r2, #23
 8006a5e:	0dd2      	lsrs	r2, r2, #23
 8006a60:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006a62:	69bb      	ldr	r3, [r7, #24]
 8006a64:	3302      	adds	r3, #2
 8006a66:	61bb      	str	r3, [r7, #24]
 8006a68:	e007      	b.n	8006a7a <HAL_UART_Transmit+0xfa>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006a6a:	69fb      	ldr	r3, [r7, #28]
 8006a6c:	781a      	ldrb	r2, [r3, #0]
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006a74:	69fb      	ldr	r3, [r7, #28]
 8006a76:	3301      	adds	r3, #1
 8006a78:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	2252      	movs	r2, #82	; 0x52
 8006a7e:	5a9b      	ldrh	r3, [r3, r2]
 8006a80:	b29b      	uxth	r3, r3
 8006a82:	3b01      	subs	r3, #1
 8006a84:	b299      	uxth	r1, r3
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	2252      	movs	r2, #82	; 0x52
 8006a8a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	2252      	movs	r2, #82	; 0x52
 8006a90:	5a9b      	ldrh	r3, [r3, r2]
 8006a92:	b29b      	uxth	r3, r3
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d1cc      	bne.n	8006a32 <HAL_UART_Transmit+0xb2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006a98:	697a      	ldr	r2, [r7, #20]
 8006a9a:	68f8      	ldr	r0, [r7, #12]
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	9300      	str	r3, [sp, #0]
 8006aa0:	0013      	movs	r3, r2
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	2140      	movs	r1, #64	; 0x40
 8006aa6:	f000 fe27 	bl	80076f8 <UART_WaitOnFlagUntilTimeout>
 8006aaa:	1e03      	subs	r3, r0, #0
 8006aac:	d001      	beq.n	8006ab2 <HAL_UART_Transmit+0x132>
    {
      return HAL_TIMEOUT;
 8006aae:	2303      	movs	r3, #3
 8006ab0:	e009      	b.n	8006ac6 <HAL_UART_Transmit+0x146>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	2220      	movs	r2, #32
 8006ab6:	675a      	str	r2, [r3, #116]	; 0x74

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	2270      	movs	r2, #112	; 0x70
 8006abc:	2100      	movs	r1, #0
 8006abe:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	e000      	b.n	8006ac6 <HAL_UART_Transmit+0x146>
  }
  else
  {
    return HAL_BUSY;
 8006ac4:	2302      	movs	r3, #2
  }
}
 8006ac6:	0018      	movs	r0, r3
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	b008      	add	sp, #32
 8006acc:	bd80      	pop	{r7, pc}
	...

08006ad0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b084      	sub	sp, #16
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	60f8      	str	r0, [r7, #12]
 8006ad8:	60b9      	str	r1, [r7, #8]
 8006ada:	1dbb      	adds	r3, r7, #6
 8006adc:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006ae2:	2b20      	cmp	r3, #32
 8006ae4:	d000      	beq.n	8006ae8 <HAL_UART_Receive_IT+0x18>
 8006ae6:	e09f      	b.n	8006c28 <HAL_UART_Receive_IT+0x158>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d003      	beq.n	8006af6 <HAL_UART_Receive_IT+0x26>
 8006aee:	1dbb      	adds	r3, r7, #6
 8006af0:	881b      	ldrh	r3, [r3, #0]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d101      	bne.n	8006afa <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006af6:	2301      	movs	r3, #1
 8006af8:	e097      	b.n	8006c2a <HAL_UART_Receive_IT+0x15a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	689a      	ldr	r2, [r3, #8]
 8006afe:	2380      	movs	r3, #128	; 0x80
 8006b00:	015b      	lsls	r3, r3, #5
 8006b02:	429a      	cmp	r2, r3
 8006b04:	d109      	bne.n	8006b1a <HAL_UART_Receive_IT+0x4a>
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	691b      	ldr	r3, [r3, #16]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d105      	bne.n	8006b1a <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1) != 0)
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	2201      	movs	r2, #1
 8006b12:	4013      	ands	r3, r2
 8006b14:	d001      	beq.n	8006b1a <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8006b16:	2301      	movs	r3, #1
 8006b18:	e087      	b.n	8006c2a <HAL_UART_Receive_IT+0x15a>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	2270      	movs	r2, #112	; 0x70
 8006b1e:	5c9b      	ldrb	r3, [r3, r2]
 8006b20:	2b01      	cmp	r3, #1
 8006b22:	d101      	bne.n	8006b28 <HAL_UART_Receive_IT+0x58>
 8006b24:	2302      	movs	r3, #2
 8006b26:	e080      	b.n	8006c2a <HAL_UART_Receive_IT+0x15a>
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	2270      	movs	r2, #112	; 0x70
 8006b2c:	2101      	movs	r1, #1
 8006b2e:	5499      	strb	r1, [r3, r2]

    huart->pRxBuffPtr  = pData;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	68ba      	ldr	r2, [r7, #8]
 8006b34:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	1dba      	adds	r2, r7, #6
 8006b3a:	2158      	movs	r1, #88	; 0x58
 8006b3c:	8812      	ldrh	r2, [r2, #0]
 8006b3e:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	1dba      	adds	r2, r7, #6
 8006b44:	215a      	movs	r1, #90	; 0x5a
 8006b46:	8812      	ldrh	r2, [r2, #0]
 8006b48:	525a      	strh	r2, [r3, r1]
    huart->RxISR       = NULL;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	689a      	ldr	r2, [r3, #8]
 8006b54:	2380      	movs	r3, #128	; 0x80
 8006b56:	015b      	lsls	r3, r3, #5
 8006b58:	429a      	cmp	r2, r3
 8006b5a:	d10d      	bne.n	8006b78 <HAL_UART_Receive_IT+0xa8>
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	691b      	ldr	r3, [r3, #16]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d104      	bne.n	8006b6e <HAL_UART_Receive_IT+0x9e>
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	225c      	movs	r2, #92	; 0x5c
 8006b68:	4932      	ldr	r1, [pc, #200]	; (8006c34 <HAL_UART_Receive_IT+0x164>)
 8006b6a:	5299      	strh	r1, [r3, r2]
 8006b6c:	e02e      	b.n	8006bcc <HAL_UART_Receive_IT+0xfc>
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	225c      	movs	r2, #92	; 0x5c
 8006b72:	21ff      	movs	r1, #255	; 0xff
 8006b74:	5299      	strh	r1, [r3, r2]
 8006b76:	e029      	b.n	8006bcc <HAL_UART_Receive_IT+0xfc>
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	689b      	ldr	r3, [r3, #8]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d10d      	bne.n	8006b9c <HAL_UART_Receive_IT+0xcc>
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	691b      	ldr	r3, [r3, #16]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d104      	bne.n	8006b92 <HAL_UART_Receive_IT+0xc2>
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	225c      	movs	r2, #92	; 0x5c
 8006b8c:	21ff      	movs	r1, #255	; 0xff
 8006b8e:	5299      	strh	r1, [r3, r2]
 8006b90:	e01c      	b.n	8006bcc <HAL_UART_Receive_IT+0xfc>
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	225c      	movs	r2, #92	; 0x5c
 8006b96:	217f      	movs	r1, #127	; 0x7f
 8006b98:	5299      	strh	r1, [r3, r2]
 8006b9a:	e017      	b.n	8006bcc <HAL_UART_Receive_IT+0xfc>
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	689a      	ldr	r2, [r3, #8]
 8006ba0:	2380      	movs	r3, #128	; 0x80
 8006ba2:	055b      	lsls	r3, r3, #21
 8006ba4:	429a      	cmp	r2, r3
 8006ba6:	d10d      	bne.n	8006bc4 <HAL_UART_Receive_IT+0xf4>
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	691b      	ldr	r3, [r3, #16]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d104      	bne.n	8006bba <HAL_UART_Receive_IT+0xea>
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	225c      	movs	r2, #92	; 0x5c
 8006bb4:	217f      	movs	r1, #127	; 0x7f
 8006bb6:	5299      	strh	r1, [r3, r2]
 8006bb8:	e008      	b.n	8006bcc <HAL_UART_Receive_IT+0xfc>
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	225c      	movs	r2, #92	; 0x5c
 8006bbe:	213f      	movs	r1, #63	; 0x3f
 8006bc0:	5299      	strh	r1, [r3, r2]
 8006bc2:	e003      	b.n	8006bcc <HAL_UART_Receive_IT+0xfc>
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	225c      	movs	r2, #92	; 0x5c
 8006bc8:	2100      	movs	r1, #0
 8006bca:	5299      	strh	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	2222      	movs	r2, #34	; 0x22
 8006bd6:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	689a      	ldr	r2, [r3, #8]
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	2101      	movs	r1, #1
 8006be4:	430a      	orrs	r2, r1
 8006be6:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	689a      	ldr	r2, [r3, #8]
 8006bec:	2380      	movs	r3, #128	; 0x80
 8006bee:	015b      	lsls	r3, r3, #5
 8006bf0:	429a      	cmp	r2, r3
 8006bf2:	d107      	bne.n	8006c04 <HAL_UART_Receive_IT+0x134>
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	691b      	ldr	r3, [r3, #16]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d103      	bne.n	8006c04 <HAL_UART_Receive_IT+0x134>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	4a0e      	ldr	r2, [pc, #56]	; (8006c38 <HAL_UART_Receive_IT+0x168>)
 8006c00:	661a      	str	r2, [r3, #96]	; 0x60
 8006c02:	e002      	b.n	8006c0a <HAL_UART_Receive_IT+0x13a>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	4a0d      	ldr	r2, [pc, #52]	; (8006c3c <HAL_UART_Receive_IT+0x16c>)
 8006c08:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	2270      	movs	r2, #112	; 0x70
 8006c0e:	2100      	movs	r1, #0
 8006c10:	5499      	strb	r1, [r3, r2]

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	681a      	ldr	r2, [r3, #0]
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	2190      	movs	r1, #144	; 0x90
 8006c1e:	0049      	lsls	r1, r1, #1
 8006c20:	430a      	orrs	r2, r1
 8006c22:	601a      	str	r2, [r3, #0]
    return HAL_OK;
 8006c24:	2300      	movs	r3, #0
 8006c26:	e000      	b.n	8006c2a <HAL_UART_Receive_IT+0x15a>
  }
  else
  {
    return HAL_BUSY;
 8006c28:	2302      	movs	r3, #2
  }
}
 8006c2a:	0018      	movs	r0, r3
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	b004      	add	sp, #16
 8006c30:	bd80      	pop	{r7, pc}
 8006c32:	46c0      	nop			; (mov r8, r8)
 8006c34:	000001ff 	.word	0x000001ff
 8006c38:	080078ed 	.word	0x080078ed
 8006c3c:	08007831 	.word	0x08007831

08006c40 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b088      	sub	sp, #32
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	69db      	ldr	r3, [r3, #28]
 8006c4e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	689b      	ldr	r3, [r3, #8]
 8006c5e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8006c60:	69fb      	ldr	r3, [r7, #28]
 8006c62:	220f      	movs	r2, #15
 8006c64:	4013      	ands	r3, r2
 8006c66:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8006c68:	693b      	ldr	r3, [r7, #16]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d112      	bne.n	8006c94 <HAL_UART_IRQHandler+0x54>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006c6e:	69fb      	ldr	r3, [r7, #28]
 8006c70:	2220      	movs	r2, #32
 8006c72:	4013      	ands	r3, r2
 8006c74:	d00e      	beq.n	8006c94 <HAL_UART_IRQHandler+0x54>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006c76:	69bb      	ldr	r3, [r7, #24]
 8006c78:	2220      	movs	r2, #32
 8006c7a:	4013      	ands	r3, r2
 8006c7c:	d00a      	beq.n	8006c94 <HAL_UART_IRQHandler+0x54>
    {
      if (huart->RxISR != NULL)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d100      	bne.n	8006c88 <HAL_UART_IRQHandler+0x48>
 8006c86:	e0f6      	b.n	8006e76 <HAL_UART_IRQHandler+0x236>
      {
        huart->RxISR(huart);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c8c:	687a      	ldr	r2, [r7, #4]
 8006c8e:	0010      	movs	r0, r2
 8006c90:	4798      	blx	r3
      }
      return;
 8006c92:	e0f0      	b.n	8006e76 <HAL_UART_IRQHandler+0x236>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006c94:	693b      	ldr	r3, [r7, #16]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d100      	bne.n	8006c9c <HAL_UART_IRQHandler+0x5c>
 8006c9a:	e0b8      	b.n	8006e0e <HAL_UART_IRQHandler+0x1ce>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	2201      	movs	r2, #1
 8006ca0:	4013      	ands	r3, r2
 8006ca2:	d105      	bne.n	8006cb0 <HAL_UART_IRQHandler+0x70>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8006ca4:	69ba      	ldr	r2, [r7, #24]
 8006ca6:	2390      	movs	r3, #144	; 0x90
 8006ca8:	005b      	lsls	r3, r3, #1
 8006caa:	4013      	ands	r3, r2
 8006cac:	d100      	bne.n	8006cb0 <HAL_UART_IRQHandler+0x70>
 8006cae:	e0ae      	b.n	8006e0e <HAL_UART_IRQHandler+0x1ce>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006cb0:	69fb      	ldr	r3, [r7, #28]
 8006cb2:	2201      	movs	r2, #1
 8006cb4:	4013      	ands	r3, r2
 8006cb6:	d00e      	beq.n	8006cd6 <HAL_UART_IRQHandler+0x96>
 8006cb8:	69ba      	ldr	r2, [r7, #24]
 8006cba:	2380      	movs	r3, #128	; 0x80
 8006cbc:	005b      	lsls	r3, r3, #1
 8006cbe:	4013      	ands	r3, r2
 8006cc0:	d009      	beq.n	8006cd6 <HAL_UART_IRQHandler+0x96>
    {

      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	2201      	movs	r2, #1
 8006cc8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006cce:	2201      	movs	r2, #1
 8006cd0:	431a      	orrs	r2, r3
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006cd6:	69fb      	ldr	r3, [r7, #28]
 8006cd8:	2202      	movs	r2, #2
 8006cda:	4013      	ands	r3, r2
 8006cdc:	d00d      	beq.n	8006cfa <HAL_UART_IRQHandler+0xba>
 8006cde:	697b      	ldr	r3, [r7, #20]
 8006ce0:	2201      	movs	r2, #1
 8006ce2:	4013      	ands	r3, r2
 8006ce4:	d009      	beq.n	8006cfa <HAL_UART_IRQHandler+0xba>
    {
    	 // log_info("error frame stm32l0xx_hal_uart L2245");

      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	2202      	movs	r2, #2
 8006cec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006cf2:	2204      	movs	r2, #4
 8006cf4:	431a      	orrs	r2, r3
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006cfa:	69fb      	ldr	r3, [r7, #28]
 8006cfc:	2204      	movs	r2, #4
 8006cfe:	4013      	ands	r3, r2
 8006d00:	d00d      	beq.n	8006d1e <HAL_UART_IRQHandler+0xde>
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	2201      	movs	r2, #1
 8006d06:	4013      	ands	r3, r2
 8006d08:	d009      	beq.n	8006d1e <HAL_UART_IRQHandler+0xde>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	2204      	movs	r2, #4
 8006d10:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d16:	2202      	movs	r2, #2
 8006d18:	431a      	orrs	r2, r3
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006d1e:	69fb      	ldr	r3, [r7, #28]
 8006d20:	2208      	movs	r2, #8
 8006d22:	4013      	ands	r3, r2
 8006d24:	d011      	beq.n	8006d4a <HAL_UART_IRQHandler+0x10a>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006d26:	69bb      	ldr	r3, [r7, #24]
 8006d28:	2220      	movs	r2, #32
 8006d2a:	4013      	ands	r3, r2
 8006d2c:	d103      	bne.n	8006d36 <HAL_UART_IRQHandler+0xf6>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	2201      	movs	r2, #1
 8006d32:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006d34:	d009      	beq.n	8006d4a <HAL_UART_IRQHandler+0x10a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	2208      	movs	r2, #8
 8006d3c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d42:	2208      	movs	r2, #8
 8006d44:	431a      	orrs	r2, r3
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d100      	bne.n	8006d54 <HAL_UART_IRQHandler+0x114>
 8006d52:	e092      	b.n	8006e7a <HAL_UART_IRQHandler+0x23a>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006d54:	69fb      	ldr	r3, [r7, #28]
 8006d56:	2220      	movs	r2, #32
 8006d58:	4013      	ands	r3, r2
 8006d5a:	d00c      	beq.n	8006d76 <HAL_UART_IRQHandler+0x136>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006d5c:	69bb      	ldr	r3, [r7, #24]
 8006d5e:	2220      	movs	r2, #32
 8006d60:	4013      	ands	r3, r2
 8006d62:	d008      	beq.n	8006d76 <HAL_UART_IRQHandler+0x136>
      {
        if (huart->RxISR != NULL)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d004      	beq.n	8006d76 <HAL_UART_IRQHandler+0x136>
        {
          huart->RxISR(huart);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d70:	687a      	ldr	r2, [r7, #4]
 8006d72:	0010      	movs	r0, r2
 8006d74:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d7a:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	689b      	ldr	r3, [r3, #8]
 8006d82:	2240      	movs	r2, #64	; 0x40
 8006d84:	4013      	ands	r3, r2
 8006d86:	2b40      	cmp	r3, #64	; 0x40
 8006d88:	d003      	beq.n	8006d92 <HAL_UART_IRQHandler+0x152>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	2208      	movs	r2, #8
 8006d8e:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006d90:	d033      	beq.n	8006dfa <HAL_UART_IRQHandler+0x1ba>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	0018      	movs	r0, r3
 8006d96:	f000 fcf9 	bl	800778c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	689b      	ldr	r3, [r3, #8]
 8006da0:	2240      	movs	r2, #64	; 0x40
 8006da2:	4013      	ands	r3, r2
 8006da4:	2b40      	cmp	r3, #64	; 0x40
 8006da6:	d123      	bne.n	8006df0 <HAL_UART_IRQHandler+0x1b0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	689a      	ldr	r2, [r3, #8]
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	2140      	movs	r1, #64	; 0x40
 8006db4:	438a      	bics	r2, r1
 8006db6:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d012      	beq.n	8006de6 <HAL_UART_IRQHandler+0x1a6>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006dc4:	4a30      	ldr	r2, [pc, #192]	; (8006e88 <HAL_UART_IRQHandler+0x248>)
 8006dc6:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006dcc:	0018      	movs	r0, r3
 8006dce:	f7fd fba9 	bl	8004524 <HAL_DMA_Abort_IT>
 8006dd2:	1e03      	subs	r3, r0, #0
 8006dd4:	d019      	beq.n	8006e0a <HAL_UART_IRQHandler+0x1ca>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006dda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006de0:	0018      	movs	r0, r3
 8006de2:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006de4:	e011      	b.n	8006e0a <HAL_UART_IRQHandler+0x1ca>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	0018      	movs	r0, r3
 8006dea:	f016 fd8b 	bl	801d904 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dee:	e00c      	b.n	8006e0a <HAL_UART_IRQHandler+0x1ca>
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/

          HAL_UART_ErrorCallback(huart);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	0018      	movs	r0, r3
 8006df4:	f016 fd86 	bl	801d904 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006df8:	e007      	b.n	8006e0a <HAL_UART_IRQHandler+0x1ca>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	0018      	movs	r0, r3
 8006dfe:	f016 fd81 	bl	801d904 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2200      	movs	r2, #0
 8006e06:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8006e08:	e037      	b.n	8006e7a <HAL_UART_IRQHandler+0x23a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e0a:	46c0      	nop			; (mov r8, r8)
    return;
 8006e0c:	e035      	b.n	8006e7a <HAL_UART_IRQHandler+0x23a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006e0e:	69fa      	ldr	r2, [r7, #28]
 8006e10:	2380      	movs	r3, #128	; 0x80
 8006e12:	035b      	lsls	r3, r3, #13
 8006e14:	4013      	ands	r3, r2
 8006e16:	d00e      	beq.n	8006e36 <HAL_UART_IRQHandler+0x1f6>
 8006e18:	697a      	ldr	r2, [r7, #20]
 8006e1a:	2380      	movs	r3, #128	; 0x80
 8006e1c:	03db      	lsls	r3, r3, #15
 8006e1e:	4013      	ands	r3, r2
 8006e20:	d009      	beq.n	8006e36 <HAL_UART_IRQHandler+0x1f6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	2280      	movs	r2, #128	; 0x80
 8006e28:	0352      	lsls	r2, r2, #13
 8006e2a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	0018      	movs	r0, r3
 8006e30:	f016 ff58 	bl	801dce4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006e34:	e024      	b.n	8006e80 <HAL_UART_IRQHandler+0x240>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006e36:	69fb      	ldr	r3, [r7, #28]
 8006e38:	2280      	movs	r2, #128	; 0x80
 8006e3a:	4013      	ands	r3, r2
 8006e3c:	d00d      	beq.n	8006e5a <HAL_UART_IRQHandler+0x21a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006e3e:	69bb      	ldr	r3, [r7, #24]
 8006e40:	2280      	movs	r2, #128	; 0x80
 8006e42:	4013      	ands	r3, r2
 8006e44:	d009      	beq.n	8006e5a <HAL_UART_IRQHandler+0x21a>
  {
    if (huart->TxISR != NULL)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d017      	beq.n	8006e7e <HAL_UART_IRQHandler+0x23e>
    {
      huart->TxISR(huart);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e52:	687a      	ldr	r2, [r7, #4]
 8006e54:	0010      	movs	r0, r2
 8006e56:	4798      	blx	r3
    }
    return;
 8006e58:	e011      	b.n	8006e7e <HAL_UART_IRQHandler+0x23e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006e5a:	69fb      	ldr	r3, [r7, #28]
 8006e5c:	2240      	movs	r2, #64	; 0x40
 8006e5e:	4013      	ands	r3, r2
 8006e60:	d00e      	beq.n	8006e80 <HAL_UART_IRQHandler+0x240>
 8006e62:	69bb      	ldr	r3, [r7, #24]
 8006e64:	2240      	movs	r2, #64	; 0x40
 8006e66:	4013      	ands	r3, r2
 8006e68:	d00a      	beq.n	8006e80 <HAL_UART_IRQHandler+0x240>
  {
    UART_EndTransmit_IT(huart);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	0018      	movs	r0, r3
 8006e6e:	f000 fcc4 	bl	80077fa <UART_EndTransmit_IT>
    return;
 8006e72:	46c0      	nop			; (mov r8, r8)
 8006e74:	e004      	b.n	8006e80 <HAL_UART_IRQHandler+0x240>
      return;
 8006e76:	46c0      	nop			; (mov r8, r8)
 8006e78:	e002      	b.n	8006e80 <HAL_UART_IRQHandler+0x240>
    return;
 8006e7a:	46c0      	nop			; (mov r8, r8)
 8006e7c:	e000      	b.n	8006e80 <HAL_UART_IRQHandler+0x240>
    return;
 8006e7e:	46c0      	nop			; (mov r8, r8)
  }

}
 8006e80:	46bd      	mov	sp, r7
 8006e82:	b008      	add	sp, #32
 8006e84:	bd80      	pop	{r7, pc}
 8006e86:	46c0      	nop			; (mov r8, r8)
 8006e88:	080077cd 	.word	0x080077cd

08006e8c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b082      	sub	sp, #8
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006e94:	46c0      	nop			; (mov r8, r8)
 8006e96:	46bd      	mov	sp, r7
 8006e98:	b002      	add	sp, #8
 8006e9a:	bd80      	pop	{r7, pc}

08006e9c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006e9c:	b5b0      	push	{r4, r5, r7, lr}
 8006e9e:	b08e      	sub	sp, #56	; 0x38
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8006ea4:	231b      	movs	r3, #27
 8006ea6:	2218      	movs	r2, #24
 8006ea8:	4694      	mov	ip, r2
 8006eaa:	44bc      	add	ip, r7
 8006eac:	4463      	add	r3, ip
 8006eae:	2210      	movs	r2, #16
 8006eb0:	701a      	strb	r2, [r3, #0]
  uint32_t usartdiv                   = 0x00000000U;
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef ret               = HAL_OK;
 8006eb6:	2313      	movs	r3, #19
 8006eb8:	2218      	movs	r2, #24
 8006eba:	4694      	mov	ip, r2
 8006ebc:	44bc      	add	ip, r7
 8006ebe:	4463      	add	r3, ip
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	701a      	strb	r2, [r3, #0]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	627b      	str	r3, [r7, #36]	; 0x24
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006ec8:	69fb      	ldr	r3, [r7, #28]
 8006eca:	689a      	ldr	r2, [r3, #8]
 8006ecc:	69fb      	ldr	r3, [r7, #28]
 8006ece:	691b      	ldr	r3, [r3, #16]
 8006ed0:	431a      	orrs	r2, r3
 8006ed2:	69fb      	ldr	r3, [r7, #28]
 8006ed4:	695b      	ldr	r3, [r3, #20]
 8006ed6:	431a      	orrs	r2, r3
 8006ed8:	69fb      	ldr	r3, [r7, #28]
 8006eda:	69db      	ldr	r3, [r3, #28]
 8006edc:	4313      	orrs	r3, r2
 8006ede:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006ee0:	69fb      	ldr	r3, [r7, #28]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4aca      	ldr	r2, [pc, #808]	; (8007210 <UART_SetConfig+0x374>)
 8006ee8:	4013      	ands	r3, r2
 8006eea:	0019      	movs	r1, r3
 8006eec:	69fb      	ldr	r3, [r7, #28]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006ef2:	430a      	orrs	r2, r1
 8006ef4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ef6:	69fb      	ldr	r3, [r7, #28]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	685b      	ldr	r3, [r3, #4]
 8006efc:	4ac5      	ldr	r2, [pc, #788]	; (8007214 <UART_SetConfig+0x378>)
 8006efe:	4013      	ands	r3, r2
 8006f00:	0019      	movs	r1, r3
 8006f02:	69fb      	ldr	r3, [r7, #28]
 8006f04:	68da      	ldr	r2, [r3, #12]
 8006f06:	69fb      	ldr	r3, [r7, #28]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	430a      	orrs	r2, r1
 8006f0c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006f0e:	69fb      	ldr	r3, [r7, #28]
 8006f10:	699b      	ldr	r3, [r3, #24]
 8006f12:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006f14:	69fb      	ldr	r3, [r7, #28]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4abf      	ldr	r2, [pc, #764]	; (8007218 <UART_SetConfig+0x37c>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d004      	beq.n	8006f28 <UART_SetConfig+0x8c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006f1e:	69fb      	ldr	r3, [r7, #28]
 8006f20:	6a1b      	ldr	r3, [r3, #32]
 8006f22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006f24:	4313      	orrs	r3, r2
 8006f26:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006f28:	69fb      	ldr	r3, [r7, #28]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	689b      	ldr	r3, [r3, #8]
 8006f2e:	4abb      	ldr	r2, [pc, #748]	; (800721c <UART_SetConfig+0x380>)
 8006f30:	4013      	ands	r3, r2
 8006f32:	0019      	movs	r1, r3
 8006f34:	69fb      	ldr	r3, [r7, #28]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006f3a:	430a      	orrs	r2, r1
 8006f3c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006f3e:	69fb      	ldr	r3, [r7, #28]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	4ab7      	ldr	r2, [pc, #732]	; (8007220 <UART_SetConfig+0x384>)
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d134      	bne.n	8006fb2 <UART_SetConfig+0x116>
 8006f48:	4bb6      	ldr	r3, [pc, #728]	; (8007224 <UART_SetConfig+0x388>)
 8006f4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f4c:	2203      	movs	r2, #3
 8006f4e:	4013      	ands	r3, r2
 8006f50:	2b01      	cmp	r3, #1
 8006f52:	d015      	beq.n	8006f80 <UART_SetConfig+0xe4>
 8006f54:	d304      	bcc.n	8006f60 <UART_SetConfig+0xc4>
 8006f56:	2b02      	cmp	r3, #2
 8006f58:	d00a      	beq.n	8006f70 <UART_SetConfig+0xd4>
 8006f5a:	2b03      	cmp	r3, #3
 8006f5c:	d018      	beq.n	8006f90 <UART_SetConfig+0xf4>
 8006f5e:	e01f      	b.n	8006fa0 <UART_SetConfig+0x104>
 8006f60:	231b      	movs	r3, #27
 8006f62:	2218      	movs	r2, #24
 8006f64:	4694      	mov	ip, r2
 8006f66:	44bc      	add	ip, r7
 8006f68:	4463      	add	r3, ip
 8006f6a:	2201      	movs	r2, #1
 8006f6c:	701a      	strb	r2, [r3, #0]
 8006f6e:	e0c5      	b.n	80070fc <UART_SetConfig+0x260>
 8006f70:	231b      	movs	r3, #27
 8006f72:	2218      	movs	r2, #24
 8006f74:	4694      	mov	ip, r2
 8006f76:	44bc      	add	ip, r7
 8006f78:	4463      	add	r3, ip
 8006f7a:	2202      	movs	r2, #2
 8006f7c:	701a      	strb	r2, [r3, #0]
 8006f7e:	e0bd      	b.n	80070fc <UART_SetConfig+0x260>
 8006f80:	231b      	movs	r3, #27
 8006f82:	2218      	movs	r2, #24
 8006f84:	4694      	mov	ip, r2
 8006f86:	44bc      	add	ip, r7
 8006f88:	4463      	add	r3, ip
 8006f8a:	2204      	movs	r2, #4
 8006f8c:	701a      	strb	r2, [r3, #0]
 8006f8e:	e0b5      	b.n	80070fc <UART_SetConfig+0x260>
 8006f90:	231b      	movs	r3, #27
 8006f92:	2218      	movs	r2, #24
 8006f94:	4694      	mov	ip, r2
 8006f96:	44bc      	add	ip, r7
 8006f98:	4463      	add	r3, ip
 8006f9a:	2208      	movs	r2, #8
 8006f9c:	701a      	strb	r2, [r3, #0]
 8006f9e:	e0ad      	b.n	80070fc <UART_SetConfig+0x260>
 8006fa0:	231b      	movs	r3, #27
 8006fa2:	2218      	movs	r2, #24
 8006fa4:	4694      	mov	ip, r2
 8006fa6:	44bc      	add	ip, r7
 8006fa8:	4463      	add	r3, ip
 8006faa:	2210      	movs	r2, #16
 8006fac:	701a      	strb	r2, [r3, #0]
 8006fae:	46c0      	nop			; (mov r8, r8)
 8006fb0:	e0a4      	b.n	80070fc <UART_SetConfig+0x260>
 8006fb2:	69fb      	ldr	r3, [r7, #28]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4a9c      	ldr	r2, [pc, #624]	; (8007228 <UART_SetConfig+0x38c>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d137      	bne.n	800702c <UART_SetConfig+0x190>
 8006fbc:	4b99      	ldr	r3, [pc, #612]	; (8007224 <UART_SetConfig+0x388>)
 8006fbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fc0:	220c      	movs	r2, #12
 8006fc2:	4013      	ands	r3, r2
 8006fc4:	2b04      	cmp	r3, #4
 8006fc6:	d018      	beq.n	8006ffa <UART_SetConfig+0x15e>
 8006fc8:	d802      	bhi.n	8006fd0 <UART_SetConfig+0x134>
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d005      	beq.n	8006fda <UART_SetConfig+0x13e>
 8006fce:	e024      	b.n	800701a <UART_SetConfig+0x17e>
 8006fd0:	2b08      	cmp	r3, #8
 8006fd2:	d00a      	beq.n	8006fea <UART_SetConfig+0x14e>
 8006fd4:	2b0c      	cmp	r3, #12
 8006fd6:	d018      	beq.n	800700a <UART_SetConfig+0x16e>
 8006fd8:	e01f      	b.n	800701a <UART_SetConfig+0x17e>
 8006fda:	231b      	movs	r3, #27
 8006fdc:	2218      	movs	r2, #24
 8006fde:	4694      	mov	ip, r2
 8006fe0:	44bc      	add	ip, r7
 8006fe2:	4463      	add	r3, ip
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	701a      	strb	r2, [r3, #0]
 8006fe8:	e088      	b.n	80070fc <UART_SetConfig+0x260>
 8006fea:	231b      	movs	r3, #27
 8006fec:	2218      	movs	r2, #24
 8006fee:	4694      	mov	ip, r2
 8006ff0:	44bc      	add	ip, r7
 8006ff2:	4463      	add	r3, ip
 8006ff4:	2202      	movs	r2, #2
 8006ff6:	701a      	strb	r2, [r3, #0]
 8006ff8:	e080      	b.n	80070fc <UART_SetConfig+0x260>
 8006ffa:	231b      	movs	r3, #27
 8006ffc:	2218      	movs	r2, #24
 8006ffe:	4694      	mov	ip, r2
 8007000:	44bc      	add	ip, r7
 8007002:	4463      	add	r3, ip
 8007004:	2204      	movs	r2, #4
 8007006:	701a      	strb	r2, [r3, #0]
 8007008:	e078      	b.n	80070fc <UART_SetConfig+0x260>
 800700a:	231b      	movs	r3, #27
 800700c:	2218      	movs	r2, #24
 800700e:	4694      	mov	ip, r2
 8007010:	44bc      	add	ip, r7
 8007012:	4463      	add	r3, ip
 8007014:	2208      	movs	r2, #8
 8007016:	701a      	strb	r2, [r3, #0]
 8007018:	e070      	b.n	80070fc <UART_SetConfig+0x260>
 800701a:	231b      	movs	r3, #27
 800701c:	2218      	movs	r2, #24
 800701e:	4694      	mov	ip, r2
 8007020:	44bc      	add	ip, r7
 8007022:	4463      	add	r3, ip
 8007024:	2210      	movs	r2, #16
 8007026:	701a      	strb	r2, [r3, #0]
 8007028:	46c0      	nop			; (mov r8, r8)
 800702a:	e067      	b.n	80070fc <UART_SetConfig+0x260>
 800702c:	69fb      	ldr	r3, [r7, #28]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4a7e      	ldr	r2, [pc, #504]	; (800722c <UART_SetConfig+0x390>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d107      	bne.n	8007046 <UART_SetConfig+0x1aa>
 8007036:	231b      	movs	r3, #27
 8007038:	2218      	movs	r2, #24
 800703a:	4694      	mov	ip, r2
 800703c:	44bc      	add	ip, r7
 800703e:	4463      	add	r3, ip
 8007040:	2200      	movs	r2, #0
 8007042:	701a      	strb	r2, [r3, #0]
 8007044:	e05a      	b.n	80070fc <UART_SetConfig+0x260>
 8007046:	69fb      	ldr	r3, [r7, #28]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	4a79      	ldr	r2, [pc, #484]	; (8007230 <UART_SetConfig+0x394>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d107      	bne.n	8007060 <UART_SetConfig+0x1c4>
 8007050:	231b      	movs	r3, #27
 8007052:	2218      	movs	r2, #24
 8007054:	4694      	mov	ip, r2
 8007056:	44bc      	add	ip, r7
 8007058:	4463      	add	r3, ip
 800705a:	2200      	movs	r2, #0
 800705c:	701a      	strb	r2, [r3, #0]
 800705e:	e04d      	b.n	80070fc <UART_SetConfig+0x260>
 8007060:	69fb      	ldr	r3, [r7, #28]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4a6c      	ldr	r2, [pc, #432]	; (8007218 <UART_SetConfig+0x37c>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d141      	bne.n	80070ee <UART_SetConfig+0x252>
 800706a:	4b6e      	ldr	r3, [pc, #440]	; (8007224 <UART_SetConfig+0x388>)
 800706c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800706e:	23c0      	movs	r3, #192	; 0xc0
 8007070:	011b      	lsls	r3, r3, #4
 8007072:	4013      	ands	r3, r2
 8007074:	2280      	movs	r2, #128	; 0x80
 8007076:	00d2      	lsls	r2, r2, #3
 8007078:	4293      	cmp	r3, r2
 800707a:	d01f      	beq.n	80070bc <UART_SetConfig+0x220>
 800707c:	2280      	movs	r2, #128	; 0x80
 800707e:	00d2      	lsls	r2, r2, #3
 8007080:	4293      	cmp	r3, r2
 8007082:	d802      	bhi.n	800708a <UART_SetConfig+0x1ee>
 8007084:	2b00      	cmp	r3, #0
 8007086:	d009      	beq.n	800709c <UART_SetConfig+0x200>
 8007088:	e028      	b.n	80070dc <UART_SetConfig+0x240>
 800708a:	2280      	movs	r2, #128	; 0x80
 800708c:	0112      	lsls	r2, r2, #4
 800708e:	4293      	cmp	r3, r2
 8007090:	d00c      	beq.n	80070ac <UART_SetConfig+0x210>
 8007092:	22c0      	movs	r2, #192	; 0xc0
 8007094:	0112      	lsls	r2, r2, #4
 8007096:	4293      	cmp	r3, r2
 8007098:	d018      	beq.n	80070cc <UART_SetConfig+0x230>
 800709a:	e01f      	b.n	80070dc <UART_SetConfig+0x240>
 800709c:	231b      	movs	r3, #27
 800709e:	2218      	movs	r2, #24
 80070a0:	4694      	mov	ip, r2
 80070a2:	44bc      	add	ip, r7
 80070a4:	4463      	add	r3, ip
 80070a6:	2200      	movs	r2, #0
 80070a8:	701a      	strb	r2, [r3, #0]
 80070aa:	e027      	b.n	80070fc <UART_SetConfig+0x260>
 80070ac:	231b      	movs	r3, #27
 80070ae:	2218      	movs	r2, #24
 80070b0:	4694      	mov	ip, r2
 80070b2:	44bc      	add	ip, r7
 80070b4:	4463      	add	r3, ip
 80070b6:	2202      	movs	r2, #2
 80070b8:	701a      	strb	r2, [r3, #0]
 80070ba:	e01f      	b.n	80070fc <UART_SetConfig+0x260>
 80070bc:	231b      	movs	r3, #27
 80070be:	2218      	movs	r2, #24
 80070c0:	4694      	mov	ip, r2
 80070c2:	44bc      	add	ip, r7
 80070c4:	4463      	add	r3, ip
 80070c6:	2204      	movs	r2, #4
 80070c8:	701a      	strb	r2, [r3, #0]
 80070ca:	e017      	b.n	80070fc <UART_SetConfig+0x260>
 80070cc:	231b      	movs	r3, #27
 80070ce:	2218      	movs	r2, #24
 80070d0:	4694      	mov	ip, r2
 80070d2:	44bc      	add	ip, r7
 80070d4:	4463      	add	r3, ip
 80070d6:	2208      	movs	r2, #8
 80070d8:	701a      	strb	r2, [r3, #0]
 80070da:	e00f      	b.n	80070fc <UART_SetConfig+0x260>
 80070dc:	231b      	movs	r3, #27
 80070de:	2218      	movs	r2, #24
 80070e0:	4694      	mov	ip, r2
 80070e2:	44bc      	add	ip, r7
 80070e4:	4463      	add	r3, ip
 80070e6:	2210      	movs	r2, #16
 80070e8:	701a      	strb	r2, [r3, #0]
 80070ea:	46c0      	nop			; (mov r8, r8)
 80070ec:	e006      	b.n	80070fc <UART_SetConfig+0x260>
 80070ee:	231b      	movs	r3, #27
 80070f0:	2218      	movs	r2, #24
 80070f2:	4694      	mov	ip, r2
 80070f4:	44bc      	add	ip, r7
 80070f6:	4463      	add	r3, ip
 80070f8:	2210      	movs	r2, #16
 80070fa:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80070fc:	69fb      	ldr	r3, [r7, #28]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4a45      	ldr	r2, [pc, #276]	; (8007218 <UART_SetConfig+0x37c>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d000      	beq.n	8007108 <UART_SetConfig+0x26c>
 8007106:	e09d      	b.n	8007244 <UART_SetConfig+0x3a8>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007108:	231b      	movs	r3, #27
 800710a:	2218      	movs	r2, #24
 800710c:	4694      	mov	ip, r2
 800710e:	44bc      	add	ip, r7
 8007110:	4463      	add	r3, ip
 8007112:	781b      	ldrb	r3, [r3, #0]
 8007114:	2b02      	cmp	r3, #2
 8007116:	d00d      	beq.n	8007134 <UART_SetConfig+0x298>
 8007118:	dc02      	bgt.n	8007120 <UART_SetConfig+0x284>
 800711a:	2b00      	cmp	r3, #0
 800711c:	d005      	beq.n	800712a <UART_SetConfig+0x28e>
 800711e:	e01d      	b.n	800715c <UART_SetConfig+0x2c0>
 8007120:	2b04      	cmp	r3, #4
 8007122:	d012      	beq.n	800714a <UART_SetConfig+0x2ae>
 8007124:	2b08      	cmp	r3, #8
 8007126:	d015      	beq.n	8007154 <UART_SetConfig+0x2b8>
 8007128:	e018      	b.n	800715c <UART_SetConfig+0x2c0>
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 800712a:	f7fe f991 	bl	8005450 <HAL_RCC_GetPCLK1Freq>
 800712e:	0003      	movs	r3, r0
 8007130:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007132:	e01b      	b.n	800716c <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007134:	4b3b      	ldr	r3, [pc, #236]	; (8007224 <UART_SetConfig+0x388>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	2210      	movs	r2, #16
 800713a:	4013      	ands	r3, r2
 800713c:	d002      	beq.n	8007144 <UART_SetConfig+0x2a8>
        {
          lpuart_ker_ck_pres = (uint32_t)(HSI_VALUE >> 2U);
 800713e:	4b3d      	ldr	r3, [pc, #244]	; (8007234 <UART_SetConfig+0x398>)
 8007140:	627b      	str	r3, [r7, #36]	; 0x24
        }
        else
        {
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
        }
        break;
 8007142:	e013      	b.n	800716c <UART_SetConfig+0x2d0>
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8007144:	4b3c      	ldr	r3, [pc, #240]	; (8007238 <UART_SetConfig+0x39c>)
 8007146:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007148:	e010      	b.n	800716c <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 800714a:	f7fe f8f3 	bl	8005334 <HAL_RCC_GetSysClockFreq>
 800714e:	0003      	movs	r3, r0
 8007150:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007152:	e00b      	b.n	800716c <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8007154:	2380      	movs	r3, #128	; 0x80
 8007156:	021b      	lsls	r3, r3, #8
 8007158:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800715a:	e007      	b.n	800716c <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800715c:	2313      	movs	r3, #19
 800715e:	2218      	movs	r2, #24
 8007160:	4694      	mov	ip, r2
 8007162:	44bc      	add	ip, r7
 8007164:	4463      	add	r3, ip
 8007166:	2201      	movs	r2, #1
 8007168:	701a      	strb	r2, [r3, #0]
        break;
 800716a:	46c0      	nop			; (mov r8, r8)
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800716c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800716e:	2b00      	cmp	r3, #0
 8007170:	d100      	bne.n	8007174 <UART_SetConfig+0x2d8>
 8007172:	e1a6      	b.n	80074c2 <UART_SetConfig+0x626>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007174:	69fb      	ldr	r3, [r7, #28]
 8007176:	685a      	ldr	r2, [r3, #4]
 8007178:	0013      	movs	r3, r2
 800717a:	005b      	lsls	r3, r3, #1
 800717c:	189b      	adds	r3, r3, r2
 800717e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007180:	429a      	cmp	r2, r3
 8007182:	d305      	bcc.n	8007190 <UART_SetConfig+0x2f4>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007184:	69fb      	ldr	r3, [r7, #28]
 8007186:	685b      	ldr	r3, [r3, #4]
 8007188:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800718a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800718c:	429a      	cmp	r2, r3
 800718e:	d907      	bls.n	80071a0 <UART_SetConfig+0x304>
      {
        ret = HAL_ERROR;
 8007190:	2313      	movs	r3, #19
 8007192:	2218      	movs	r2, #24
 8007194:	4694      	mov	ip, r2
 8007196:	44bc      	add	ip, r7
 8007198:	4463      	add	r3, ip
 800719a:	2201      	movs	r2, #1
 800719c:	701a      	strb	r2, [r3, #0]
 800719e:	e190      	b.n	80074c2 <UART_SetConfig+0x626>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(lpuart_ker_ck_pres, huart->Init.BaudRate));
 80071a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a2:	613b      	str	r3, [r7, #16]
 80071a4:	2300      	movs	r3, #0
 80071a6:	617b      	str	r3, [r7, #20]
 80071a8:	6939      	ldr	r1, [r7, #16]
 80071aa:	697a      	ldr	r2, [r7, #20]
 80071ac:	000b      	movs	r3, r1
 80071ae:	0e1b      	lsrs	r3, r3, #24
 80071b0:	0010      	movs	r0, r2
 80071b2:	0205      	lsls	r5, r0, #8
 80071b4:	431d      	orrs	r5, r3
 80071b6:	000b      	movs	r3, r1
 80071b8:	021c      	lsls	r4, r3, #8
 80071ba:	69fb      	ldr	r3, [r7, #28]
 80071bc:	685b      	ldr	r3, [r3, #4]
 80071be:	085b      	lsrs	r3, r3, #1
 80071c0:	60bb      	str	r3, [r7, #8]
 80071c2:	2300      	movs	r3, #0
 80071c4:	60fb      	str	r3, [r7, #12]
 80071c6:	68b8      	ldr	r0, [r7, #8]
 80071c8:	68f9      	ldr	r1, [r7, #12]
 80071ca:	1900      	adds	r0, r0, r4
 80071cc:	4169      	adcs	r1, r5
 80071ce:	69fb      	ldr	r3, [r7, #28]
 80071d0:	685b      	ldr	r3, [r3, #4]
 80071d2:	603b      	str	r3, [r7, #0]
 80071d4:	2300      	movs	r3, #0
 80071d6:	607b      	str	r3, [r7, #4]
 80071d8:	683a      	ldr	r2, [r7, #0]
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	f7f9 f974 	bl	80004c8 <__aeabi_uldivmod>
 80071e0:	0003      	movs	r3, r0
 80071e2:	000c      	movs	r4, r1
 80071e4:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80071e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071e8:	4a14      	ldr	r2, [pc, #80]	; (800723c <UART_SetConfig+0x3a0>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d908      	bls.n	8007200 <UART_SetConfig+0x364>
 80071ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071f0:	4a13      	ldr	r2, [pc, #76]	; (8007240 <UART_SetConfig+0x3a4>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d804      	bhi.n	8007200 <UART_SetConfig+0x364>
        {
          huart->Instance->BRR = usartdiv;
 80071f6:	69fb      	ldr	r3, [r7, #28]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80071fc:	60da      	str	r2, [r3, #12]
 80071fe:	e160      	b.n	80074c2 <UART_SetConfig+0x626>
        }
        else
        {
          ret = HAL_ERROR;
 8007200:	2313      	movs	r3, #19
 8007202:	2218      	movs	r2, #24
 8007204:	4694      	mov	ip, r2
 8007206:	44bc      	add	ip, r7
 8007208:	4463      	add	r3, ip
 800720a:	2201      	movs	r2, #1
 800720c:	701a      	strb	r2, [r3, #0]
 800720e:	e158      	b.n	80074c2 <UART_SetConfig+0x626>
 8007210:	efff69f3 	.word	0xefff69f3
 8007214:	ffffcfff 	.word	0xffffcfff
 8007218:	40004800 	.word	0x40004800
 800721c:	fffff4ff 	.word	0xfffff4ff
 8007220:	40013800 	.word	0x40013800
 8007224:	40021000 	.word	0x40021000
 8007228:	40004400 	.word	0x40004400
 800722c:	40004c00 	.word	0x40004c00
 8007230:	40005000 	.word	0x40005000
 8007234:	003d0900 	.word	0x003d0900
 8007238:	00f42400 	.word	0x00f42400
 800723c:	000002ff 	.word	0x000002ff
 8007240:	000fffff 	.word	0x000fffff
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007244:	69fb      	ldr	r3, [r7, #28]
 8007246:	69da      	ldr	r2, [r3, #28]
 8007248:	2380      	movs	r3, #128	; 0x80
 800724a:	021b      	lsls	r3, r3, #8
 800724c:	429a      	cmp	r2, r3
 800724e:	d000      	beq.n	8007252 <UART_SetConfig+0x3b6>
 8007250:	e0a9      	b.n	80073a6 <UART_SetConfig+0x50a>
  {
    switch (clocksource)
 8007252:	231b      	movs	r3, #27
 8007254:	2218      	movs	r2, #24
 8007256:	4694      	mov	ip, r2
 8007258:	44bc      	add	ip, r7
 800725a:	4463      	add	r3, ip
 800725c:	781b      	ldrb	r3, [r3, #0]
 800725e:	2b08      	cmp	r3, #8
 8007260:	d86d      	bhi.n	800733e <UART_SetConfig+0x4a2>
 8007262:	009a      	lsls	r2, r3, #2
 8007264:	4b9f      	ldr	r3, [pc, #636]	; (80074e4 <UART_SetConfig+0x648>)
 8007266:	18d3      	adds	r3, r2, r3
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800726c:	f7fe f8f0 	bl	8005450 <HAL_RCC_GetPCLK1Freq>
 8007270:	0003      	movs	r3, r0
 8007272:	005a      	lsls	r2, r3, #1
 8007274:	69fb      	ldr	r3, [r7, #28]
 8007276:	685b      	ldr	r3, [r3, #4]
 8007278:	085b      	lsrs	r3, r3, #1
 800727a:	18d2      	adds	r2, r2, r3
 800727c:	69fb      	ldr	r3, [r7, #28]
 800727e:	685b      	ldr	r3, [r3, #4]
 8007280:	0019      	movs	r1, r3
 8007282:	0010      	movs	r0, r2
 8007284:	f7f8 ff48 	bl	8000118 <__udivsi3>
 8007288:	0003      	movs	r3, r0
 800728a:	b29b      	uxth	r3, r3
 800728c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800728e:	e05e      	b.n	800734e <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8007290:	f7fe f8f4 	bl	800547c <HAL_RCC_GetPCLK2Freq>
 8007294:	0003      	movs	r3, r0
 8007296:	005a      	lsls	r2, r3, #1
 8007298:	69fb      	ldr	r3, [r7, #28]
 800729a:	685b      	ldr	r3, [r3, #4]
 800729c:	085b      	lsrs	r3, r3, #1
 800729e:	18d2      	adds	r2, r2, r3
 80072a0:	69fb      	ldr	r3, [r7, #28]
 80072a2:	685b      	ldr	r3, [r3, #4]
 80072a4:	0019      	movs	r1, r3
 80072a6:	0010      	movs	r0, r2
 80072a8:	f7f8 ff36 	bl	8000118 <__udivsi3>
 80072ac:	0003      	movs	r3, r0
 80072ae:	b29b      	uxth	r3, r3
 80072b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80072b2:	e04c      	b.n	800734e <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80072b4:	4b8c      	ldr	r3, [pc, #560]	; (80074e8 <UART_SetConfig+0x64c>)
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	2210      	movs	r2, #16
 80072ba:	4013      	ands	r3, r2
 80072bc:	d00e      	beq.n	80072dc <UART_SetConfig+0x440>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 80072be:	69fb      	ldr	r3, [r7, #28]
 80072c0:	685b      	ldr	r3, [r3, #4]
 80072c2:	085b      	lsrs	r3, r3, #1
 80072c4:	4a89      	ldr	r2, [pc, #548]	; (80074ec <UART_SetConfig+0x650>)
 80072c6:	189a      	adds	r2, r3, r2
 80072c8:	69fb      	ldr	r3, [r7, #28]
 80072ca:	685b      	ldr	r3, [r3, #4]
 80072cc:	0019      	movs	r1, r3
 80072ce:	0010      	movs	r0, r2
 80072d0:	f7f8 ff22 	bl	8000118 <__udivsi3>
 80072d4:	0003      	movs	r3, r0
 80072d6:	b29b      	uxth	r3, r3
 80072d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 80072da:	e038      	b.n	800734e <UART_SetConfig+0x4b2>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80072dc:	69fb      	ldr	r3, [r7, #28]
 80072de:	685b      	ldr	r3, [r3, #4]
 80072e0:	085b      	lsrs	r3, r3, #1
 80072e2:	4a83      	ldr	r2, [pc, #524]	; (80074f0 <UART_SetConfig+0x654>)
 80072e4:	189a      	adds	r2, r3, r2
 80072e6:	69fb      	ldr	r3, [r7, #28]
 80072e8:	685b      	ldr	r3, [r3, #4]
 80072ea:	0019      	movs	r1, r3
 80072ec:	0010      	movs	r0, r2
 80072ee:	f7f8 ff13 	bl	8000118 <__udivsi3>
 80072f2:	0003      	movs	r3, r0
 80072f4:	b29b      	uxth	r3, r3
 80072f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80072f8:	e029      	b.n	800734e <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80072fa:	f7fe f81b 	bl	8005334 <HAL_RCC_GetSysClockFreq>
 80072fe:	0003      	movs	r3, r0
 8007300:	005a      	lsls	r2, r3, #1
 8007302:	69fb      	ldr	r3, [r7, #28]
 8007304:	685b      	ldr	r3, [r3, #4]
 8007306:	085b      	lsrs	r3, r3, #1
 8007308:	18d2      	adds	r2, r2, r3
 800730a:	69fb      	ldr	r3, [r7, #28]
 800730c:	685b      	ldr	r3, [r3, #4]
 800730e:	0019      	movs	r1, r3
 8007310:	0010      	movs	r0, r2
 8007312:	f7f8 ff01 	bl	8000118 <__udivsi3>
 8007316:	0003      	movs	r3, r0
 8007318:	b29b      	uxth	r3, r3
 800731a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800731c:	e017      	b.n	800734e <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800731e:	69fb      	ldr	r3, [r7, #28]
 8007320:	685b      	ldr	r3, [r3, #4]
 8007322:	085b      	lsrs	r3, r3, #1
 8007324:	2280      	movs	r2, #128	; 0x80
 8007326:	0252      	lsls	r2, r2, #9
 8007328:	189a      	adds	r2, r3, r2
 800732a:	69fb      	ldr	r3, [r7, #28]
 800732c:	685b      	ldr	r3, [r3, #4]
 800732e:	0019      	movs	r1, r3
 8007330:	0010      	movs	r0, r2
 8007332:	f7f8 fef1 	bl	8000118 <__udivsi3>
 8007336:	0003      	movs	r3, r0
 8007338:	b29b      	uxth	r3, r3
 800733a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800733c:	e007      	b.n	800734e <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800733e:	2313      	movs	r3, #19
 8007340:	2218      	movs	r2, #24
 8007342:	4694      	mov	ip, r2
 8007344:	44bc      	add	ip, r7
 8007346:	4463      	add	r3, ip
 8007348:	2201      	movs	r2, #1
 800734a:	701a      	strb	r2, [r3, #0]
        break;
 800734c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800734e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007350:	2b0f      	cmp	r3, #15
 8007352:	d920      	bls.n	8007396 <UART_SetConfig+0x4fa>
 8007354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007356:	4a67      	ldr	r2, [pc, #412]	; (80074f4 <UART_SetConfig+0x658>)
 8007358:	4293      	cmp	r3, r2
 800735a:	d81c      	bhi.n	8007396 <UART_SetConfig+0x4fa>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800735c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800735e:	b29a      	uxth	r2, r3
 8007360:	200a      	movs	r0, #10
 8007362:	2418      	movs	r4, #24
 8007364:	193b      	adds	r3, r7, r4
 8007366:	181b      	adds	r3, r3, r0
 8007368:	210f      	movs	r1, #15
 800736a:	438a      	bics	r2, r1
 800736c:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800736e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007370:	085b      	lsrs	r3, r3, #1
 8007372:	b29b      	uxth	r3, r3
 8007374:	2207      	movs	r2, #7
 8007376:	4013      	ands	r3, r2
 8007378:	b299      	uxth	r1, r3
 800737a:	193b      	adds	r3, r7, r4
 800737c:	181b      	adds	r3, r3, r0
 800737e:	193a      	adds	r2, r7, r4
 8007380:	1812      	adds	r2, r2, r0
 8007382:	8812      	ldrh	r2, [r2, #0]
 8007384:	430a      	orrs	r2, r1
 8007386:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8007388:	69fb      	ldr	r3, [r7, #28]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	193a      	adds	r2, r7, r4
 800738e:	1812      	adds	r2, r2, r0
 8007390:	8812      	ldrh	r2, [r2, #0]
 8007392:	60da      	str	r2, [r3, #12]
 8007394:	e095      	b.n	80074c2 <UART_SetConfig+0x626>
    }
    else
    {
      ret = HAL_ERROR;
 8007396:	2313      	movs	r3, #19
 8007398:	2218      	movs	r2, #24
 800739a:	4694      	mov	ip, r2
 800739c:	44bc      	add	ip, r7
 800739e:	4463      	add	r3, ip
 80073a0:	2201      	movs	r2, #1
 80073a2:	701a      	strb	r2, [r3, #0]
 80073a4:	e08d      	b.n	80074c2 <UART_SetConfig+0x626>
    }
  }
  else
  {
    switch (clocksource)
 80073a6:	231b      	movs	r3, #27
 80073a8:	2218      	movs	r2, #24
 80073aa:	4694      	mov	ip, r2
 80073ac:	44bc      	add	ip, r7
 80073ae:	4463      	add	r3, ip
 80073b0:	781b      	ldrb	r3, [r3, #0]
 80073b2:	2b08      	cmp	r3, #8
 80073b4:	d86a      	bhi.n	800748c <UART_SetConfig+0x5f0>
 80073b6:	009a      	lsls	r2, r3, #2
 80073b8:	4b4f      	ldr	r3, [pc, #316]	; (80074f8 <UART_SetConfig+0x65c>)
 80073ba:	18d3      	adds	r3, r2, r3
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80073c0:	f7fe f846 	bl	8005450 <HAL_RCC_GetPCLK1Freq>
 80073c4:	0002      	movs	r2, r0
 80073c6:	69fb      	ldr	r3, [r7, #28]
 80073c8:	685b      	ldr	r3, [r3, #4]
 80073ca:	085b      	lsrs	r3, r3, #1
 80073cc:	18d2      	adds	r2, r2, r3
 80073ce:	69fb      	ldr	r3, [r7, #28]
 80073d0:	685b      	ldr	r3, [r3, #4]
 80073d2:	0019      	movs	r1, r3
 80073d4:	0010      	movs	r0, r2
 80073d6:	f7f8 fe9f 	bl	8000118 <__udivsi3>
 80073da:	0003      	movs	r3, r0
 80073dc:	b29b      	uxth	r3, r3
 80073de:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80073e0:	e05c      	b.n	800749c <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80073e2:	f7fe f84b 	bl	800547c <HAL_RCC_GetPCLK2Freq>
 80073e6:	0002      	movs	r2, r0
 80073e8:	69fb      	ldr	r3, [r7, #28]
 80073ea:	685b      	ldr	r3, [r3, #4]
 80073ec:	085b      	lsrs	r3, r3, #1
 80073ee:	18d2      	adds	r2, r2, r3
 80073f0:	69fb      	ldr	r3, [r7, #28]
 80073f2:	685b      	ldr	r3, [r3, #4]
 80073f4:	0019      	movs	r1, r3
 80073f6:	0010      	movs	r0, r2
 80073f8:	f7f8 fe8e 	bl	8000118 <__udivsi3>
 80073fc:	0003      	movs	r3, r0
 80073fe:	b29b      	uxth	r3, r3
 8007400:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007402:	e04b      	b.n	800749c <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007404:	4b38      	ldr	r3, [pc, #224]	; (80074e8 <UART_SetConfig+0x64c>)
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	2210      	movs	r2, #16
 800740a:	4013      	ands	r3, r2
 800740c:	d00e      	beq.n	800742c <UART_SetConfig+0x590>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 800740e:	69fb      	ldr	r3, [r7, #28]
 8007410:	685b      	ldr	r3, [r3, #4]
 8007412:	085b      	lsrs	r3, r3, #1
 8007414:	4a39      	ldr	r2, [pc, #228]	; (80074fc <UART_SetConfig+0x660>)
 8007416:	189a      	adds	r2, r3, r2
 8007418:	69fb      	ldr	r3, [r7, #28]
 800741a:	685b      	ldr	r3, [r3, #4]
 800741c:	0019      	movs	r1, r3
 800741e:	0010      	movs	r0, r2
 8007420:	f7f8 fe7a 	bl	8000118 <__udivsi3>
 8007424:	0003      	movs	r3, r0
 8007426:	b29b      	uxth	r3, r3
 8007428:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 800742a:	e037      	b.n	800749c <UART_SetConfig+0x600>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800742c:	69fb      	ldr	r3, [r7, #28]
 800742e:	685b      	ldr	r3, [r3, #4]
 8007430:	085b      	lsrs	r3, r3, #1
 8007432:	4a33      	ldr	r2, [pc, #204]	; (8007500 <UART_SetConfig+0x664>)
 8007434:	189a      	adds	r2, r3, r2
 8007436:	69fb      	ldr	r3, [r7, #28]
 8007438:	685b      	ldr	r3, [r3, #4]
 800743a:	0019      	movs	r1, r3
 800743c:	0010      	movs	r0, r2
 800743e:	f7f8 fe6b 	bl	8000118 <__udivsi3>
 8007442:	0003      	movs	r3, r0
 8007444:	b29b      	uxth	r3, r3
 8007446:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007448:	e028      	b.n	800749c <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800744a:	f7fd ff73 	bl	8005334 <HAL_RCC_GetSysClockFreq>
 800744e:	0002      	movs	r2, r0
 8007450:	69fb      	ldr	r3, [r7, #28]
 8007452:	685b      	ldr	r3, [r3, #4]
 8007454:	085b      	lsrs	r3, r3, #1
 8007456:	18d2      	adds	r2, r2, r3
 8007458:	69fb      	ldr	r3, [r7, #28]
 800745a:	685b      	ldr	r3, [r3, #4]
 800745c:	0019      	movs	r1, r3
 800745e:	0010      	movs	r0, r2
 8007460:	f7f8 fe5a 	bl	8000118 <__udivsi3>
 8007464:	0003      	movs	r3, r0
 8007466:	b29b      	uxth	r3, r3
 8007468:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800746a:	e017      	b.n	800749c <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800746c:	69fb      	ldr	r3, [r7, #28]
 800746e:	685b      	ldr	r3, [r3, #4]
 8007470:	085b      	lsrs	r3, r3, #1
 8007472:	2280      	movs	r2, #128	; 0x80
 8007474:	0212      	lsls	r2, r2, #8
 8007476:	189a      	adds	r2, r3, r2
 8007478:	69fb      	ldr	r3, [r7, #28]
 800747a:	685b      	ldr	r3, [r3, #4]
 800747c:	0019      	movs	r1, r3
 800747e:	0010      	movs	r0, r2
 8007480:	f7f8 fe4a 	bl	8000118 <__udivsi3>
 8007484:	0003      	movs	r3, r0
 8007486:	b29b      	uxth	r3, r3
 8007488:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800748a:	e007      	b.n	800749c <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800748c:	2313      	movs	r3, #19
 800748e:	2218      	movs	r2, #24
 8007490:	4694      	mov	ip, r2
 8007492:	44bc      	add	ip, r7
 8007494:	4463      	add	r3, ip
 8007496:	2201      	movs	r2, #1
 8007498:	701a      	strb	r2, [r3, #0]
        break;
 800749a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800749c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800749e:	2b0f      	cmp	r3, #15
 80074a0:	d908      	bls.n	80074b4 <UART_SetConfig+0x618>
 80074a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074a4:	4a13      	ldr	r2, [pc, #76]	; (80074f4 <UART_SetConfig+0x658>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d804      	bhi.n	80074b4 <UART_SetConfig+0x618>
    {
      huart->Instance->BRR = usartdiv;
 80074aa:	69fb      	ldr	r3, [r7, #28]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80074b0:	60da      	str	r2, [r3, #12]
 80074b2:	e006      	b.n	80074c2 <UART_SetConfig+0x626>
    }
    else
    {
      ret = HAL_ERROR;
 80074b4:	2313      	movs	r3, #19
 80074b6:	2218      	movs	r2, #24
 80074b8:	4694      	mov	ip, r2
 80074ba:	44bc      	add	ip, r7
 80074bc:	4463      	add	r3, ip
 80074be:	2201      	movs	r2, #1
 80074c0:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80074c2:	69fb      	ldr	r3, [r7, #28]
 80074c4:	2200      	movs	r2, #0
 80074c6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80074c8:	69fb      	ldr	r3, [r7, #28]
 80074ca:	2200      	movs	r2, #0
 80074cc:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80074ce:	2313      	movs	r3, #19
 80074d0:	2218      	movs	r2, #24
 80074d2:	4694      	mov	ip, r2
 80074d4:	44bc      	add	ip, r7
 80074d6:	4463      	add	r3, ip
 80074d8:	781b      	ldrb	r3, [r3, #0]
}
 80074da:	0018      	movs	r0, r3
 80074dc:	46bd      	mov	sp, r7
 80074de:	b00e      	add	sp, #56	; 0x38
 80074e0:	bdb0      	pop	{r4, r5, r7, pc}
 80074e2:	46c0      	nop			; (mov r8, r8)
 80074e4:	080204a8 	.word	0x080204a8
 80074e8:	40021000 	.word	0x40021000
 80074ec:	007a1200 	.word	0x007a1200
 80074f0:	01e84800 	.word	0x01e84800
 80074f4:	0000ffff 	.word	0x0000ffff
 80074f8:	080204cc 	.word	0x080204cc
 80074fc:	003d0900 	.word	0x003d0900
 8007500:	00f42400 	.word	0x00f42400

08007504 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b082      	sub	sp, #8
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007510:	2201      	movs	r2, #1
 8007512:	4013      	ands	r3, r2
 8007514:	d00b      	beq.n	800752e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	685b      	ldr	r3, [r3, #4]
 800751c:	4a4a      	ldr	r2, [pc, #296]	; (8007648 <UART_AdvFeatureConfig+0x144>)
 800751e:	4013      	ands	r3, r2
 8007520:	0019      	movs	r1, r3
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	430a      	orrs	r2, r1
 800752c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007532:	2202      	movs	r2, #2
 8007534:	4013      	ands	r3, r2
 8007536:	d00b      	beq.n	8007550 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	685b      	ldr	r3, [r3, #4]
 800753e:	4a43      	ldr	r2, [pc, #268]	; (800764c <UART_AdvFeatureConfig+0x148>)
 8007540:	4013      	ands	r3, r2
 8007542:	0019      	movs	r1, r3
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	430a      	orrs	r2, r1
 800754e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007554:	2204      	movs	r2, #4
 8007556:	4013      	ands	r3, r2
 8007558:	d00b      	beq.n	8007572 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	685b      	ldr	r3, [r3, #4]
 8007560:	4a3b      	ldr	r2, [pc, #236]	; (8007650 <UART_AdvFeatureConfig+0x14c>)
 8007562:	4013      	ands	r3, r2
 8007564:	0019      	movs	r1, r3
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	430a      	orrs	r2, r1
 8007570:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007576:	2208      	movs	r2, #8
 8007578:	4013      	ands	r3, r2
 800757a:	d00b      	beq.n	8007594 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	685b      	ldr	r3, [r3, #4]
 8007582:	4a34      	ldr	r2, [pc, #208]	; (8007654 <UART_AdvFeatureConfig+0x150>)
 8007584:	4013      	ands	r3, r2
 8007586:	0019      	movs	r1, r3
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	430a      	orrs	r2, r1
 8007592:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007598:	2210      	movs	r2, #16
 800759a:	4013      	ands	r3, r2
 800759c:	d00b      	beq.n	80075b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	689b      	ldr	r3, [r3, #8]
 80075a4:	4a2c      	ldr	r2, [pc, #176]	; (8007658 <UART_AdvFeatureConfig+0x154>)
 80075a6:	4013      	ands	r3, r2
 80075a8:	0019      	movs	r1, r3
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	430a      	orrs	r2, r1
 80075b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ba:	2220      	movs	r2, #32
 80075bc:	4013      	ands	r3, r2
 80075be:	d00b      	beq.n	80075d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	689b      	ldr	r3, [r3, #8]
 80075c6:	4a25      	ldr	r2, [pc, #148]	; (800765c <UART_AdvFeatureConfig+0x158>)
 80075c8:	4013      	ands	r3, r2
 80075ca:	0019      	movs	r1, r3
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	430a      	orrs	r2, r1
 80075d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075dc:	2240      	movs	r2, #64	; 0x40
 80075de:	4013      	ands	r3, r2
 80075e0:	d01d      	beq.n	800761e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	685b      	ldr	r3, [r3, #4]
 80075e8:	4a1d      	ldr	r2, [pc, #116]	; (8007660 <UART_AdvFeatureConfig+0x15c>)
 80075ea:	4013      	ands	r3, r2
 80075ec:	0019      	movs	r1, r3
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	430a      	orrs	r2, r1
 80075f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80075fe:	2380      	movs	r3, #128	; 0x80
 8007600:	035b      	lsls	r3, r3, #13
 8007602:	429a      	cmp	r2, r3
 8007604:	d10b      	bne.n	800761e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	685b      	ldr	r3, [r3, #4]
 800760c:	4a15      	ldr	r2, [pc, #84]	; (8007664 <UART_AdvFeatureConfig+0x160>)
 800760e:	4013      	ands	r3, r2
 8007610:	0019      	movs	r1, r3
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	430a      	orrs	r2, r1
 800761c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007622:	2280      	movs	r2, #128	; 0x80
 8007624:	4013      	ands	r3, r2
 8007626:	d00b      	beq.n	8007640 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	685b      	ldr	r3, [r3, #4]
 800762e:	4a0e      	ldr	r2, [pc, #56]	; (8007668 <UART_AdvFeatureConfig+0x164>)
 8007630:	4013      	ands	r3, r2
 8007632:	0019      	movs	r1, r3
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	430a      	orrs	r2, r1
 800763e:	605a      	str	r2, [r3, #4]
  }
}
 8007640:	46c0      	nop			; (mov r8, r8)
 8007642:	46bd      	mov	sp, r7
 8007644:	b002      	add	sp, #8
 8007646:	bd80      	pop	{r7, pc}
 8007648:	fffdffff 	.word	0xfffdffff
 800764c:	fffeffff 	.word	0xfffeffff
 8007650:	fffbffff 	.word	0xfffbffff
 8007654:	ffff7fff 	.word	0xffff7fff
 8007658:	ffffefff 	.word	0xffffefff
 800765c:	ffffdfff 	.word	0xffffdfff
 8007660:	ffefffff 	.word	0xffefffff
 8007664:	ff9fffff 	.word	0xff9fffff
 8007668:	fff7ffff 	.word	0xfff7ffff

0800766c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b086      	sub	sp, #24
 8007670:	af02      	add	r7, sp, #8
 8007672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2200      	movs	r2, #0
 8007678:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800767a:	f7fc fc27 	bl	8003ecc <HAL_GetTick>
 800767e:	0003      	movs	r3, r0
 8007680:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	2208      	movs	r2, #8
 800768a:	4013      	ands	r3, r2
 800768c:	2b08      	cmp	r3, #8
 800768e:	d10d      	bne.n	80076ac <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007690:	68fa      	ldr	r2, [r7, #12]
 8007692:	2380      	movs	r3, #128	; 0x80
 8007694:	0399      	lsls	r1, r3, #14
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	4b16      	ldr	r3, [pc, #88]	; (80076f4 <UART_CheckIdleState+0x88>)
 800769a:	9300      	str	r3, [sp, #0]
 800769c:	0013      	movs	r3, r2
 800769e:	2200      	movs	r2, #0
 80076a0:	f000 f82a 	bl	80076f8 <UART_WaitOnFlagUntilTimeout>
 80076a4:	1e03      	subs	r3, r0, #0
 80076a6:	d001      	beq.n	80076ac <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80076a8:	2303      	movs	r3, #3
 80076aa:	e01f      	b.n	80076ec <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	2204      	movs	r2, #4
 80076b4:	4013      	ands	r3, r2
 80076b6:	2b04      	cmp	r3, #4
 80076b8:	d10d      	bne.n	80076d6 <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80076ba:	68fa      	ldr	r2, [r7, #12]
 80076bc:	2380      	movs	r3, #128	; 0x80
 80076be:	03d9      	lsls	r1, r3, #15
 80076c0:	6878      	ldr	r0, [r7, #4]
 80076c2:	4b0c      	ldr	r3, [pc, #48]	; (80076f4 <UART_CheckIdleState+0x88>)
 80076c4:	9300      	str	r3, [sp, #0]
 80076c6:	0013      	movs	r3, r2
 80076c8:	2200      	movs	r2, #0
 80076ca:	f000 f815 	bl	80076f8 <UART_WaitOnFlagUntilTimeout>
 80076ce:	1e03      	subs	r3, r0, #0
 80076d0:	d001      	beq.n	80076d6 <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80076d2:	2303      	movs	r3, #3
 80076d4:	e00a      	b.n	80076ec <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2220      	movs	r2, #32
 80076da:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2220      	movs	r2, #32
 80076e0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2270      	movs	r2, #112	; 0x70
 80076e6:	2100      	movs	r1, #0
 80076e8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80076ea:	2300      	movs	r3, #0
}
 80076ec:	0018      	movs	r0, r3
 80076ee:	46bd      	mov	sp, r7
 80076f0:	b004      	add	sp, #16
 80076f2:	bd80      	pop	{r7, pc}
 80076f4:	01ffffff 	.word	0x01ffffff

080076f8 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b084      	sub	sp, #16
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	60f8      	str	r0, [r7, #12]
 8007700:	60b9      	str	r1, [r7, #8]
 8007702:	603b      	str	r3, [r7, #0]
 8007704:	1dfb      	adds	r3, r7, #7
 8007706:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007708:	e029      	b.n	800775e <UART_WaitOnFlagUntilTimeout+0x66>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800770a:	69bb      	ldr	r3, [r7, #24]
 800770c:	3301      	adds	r3, #1
 800770e:	d026      	beq.n	800775e <UART_WaitOnFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007710:	f7fc fbdc 	bl	8003ecc <HAL_GetTick>
 8007714:	0002      	movs	r2, r0
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	1ad3      	subs	r3, r2, r3
 800771a:	69ba      	ldr	r2, [r7, #24]
 800771c:	429a      	cmp	r2, r3
 800771e:	d302      	bcc.n	8007726 <UART_WaitOnFlagUntilTimeout+0x2e>
 8007720:	69bb      	ldr	r3, [r7, #24]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d11b      	bne.n	800775e <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	681a      	ldr	r2, [r3, #0]
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	4915      	ldr	r1, [pc, #84]	; (8007788 <UART_WaitOnFlagUntilTimeout+0x90>)
 8007732:	400a      	ands	r2, r1
 8007734:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	689a      	ldr	r2, [r3, #8]
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	2101      	movs	r1, #1
 8007742:	438a      	bics	r2, r1
 8007744:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	2220      	movs	r2, #32
 800774a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	2220      	movs	r2, #32
 8007750:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	2270      	movs	r2, #112	; 0x70
 8007756:	2100      	movs	r1, #0
 8007758:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800775a:	2303      	movs	r3, #3
 800775c:	e00f      	b.n	800777e <UART_WaitOnFlagUntilTimeout+0x86>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	69db      	ldr	r3, [r3, #28]
 8007764:	68ba      	ldr	r2, [r7, #8]
 8007766:	4013      	ands	r3, r2
 8007768:	68ba      	ldr	r2, [r7, #8]
 800776a:	1ad3      	subs	r3, r2, r3
 800776c:	425a      	negs	r2, r3
 800776e:	4153      	adcs	r3, r2
 8007770:	b2db      	uxtb	r3, r3
 8007772:	001a      	movs	r2, r3
 8007774:	1dfb      	adds	r3, r7, #7
 8007776:	781b      	ldrb	r3, [r3, #0]
 8007778:	429a      	cmp	r2, r3
 800777a:	d0c6      	beq.n	800770a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800777c:	2300      	movs	r3, #0
}
 800777e:	0018      	movs	r0, r3
 8007780:	46bd      	mov	sp, r7
 8007782:	b004      	add	sp, #16
 8007784:	bd80      	pop	{r7, pc}
 8007786:	46c0      	nop			; (mov r8, r8)
 8007788:	fffffe5f 	.word	0xfffffe5f

0800778c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b082      	sub	sp, #8
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	681a      	ldr	r2, [r3, #0]
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	490a      	ldr	r1, [pc, #40]	; (80077c8 <UART_EndRxTransfer+0x3c>)
 80077a0:	400a      	ands	r2, r1
 80077a2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	689a      	ldr	r2, [r3, #8]
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	2101      	movs	r1, #1
 80077b0:	438a      	bics	r2, r1
 80077b2:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2220      	movs	r2, #32
 80077b8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2200      	movs	r2, #0
 80077be:	661a      	str	r2, [r3, #96]	; 0x60
}
 80077c0:	46c0      	nop			; (mov r8, r8)
 80077c2:	46bd      	mov	sp, r7
 80077c4:	b002      	add	sp, #8
 80077c6:	bd80      	pop	{r7, pc}
 80077c8:	fffffedf 	.word	0xfffffedf

080077cc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b084      	sub	sp, #16
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077d8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	225a      	movs	r2, #90	; 0x5a
 80077de:	2100      	movs	r1, #0
 80077e0:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	2252      	movs	r2, #82	; 0x52
 80077e6:	2100      	movs	r1, #0
 80077e8:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	0018      	movs	r0, r3
 80077ee:	f016 f889 	bl	801d904 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80077f2:	46c0      	nop			; (mov r8, r8)
 80077f4:	46bd      	mov	sp, r7
 80077f6:	b004      	add	sp, #16
 80077f8:	bd80      	pop	{r7, pc}

080077fa <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80077fa:	b580      	push	{r7, lr}
 80077fc:	b082      	sub	sp, #8
 80077fe:	af00      	add	r7, sp, #0
 8007800:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	681a      	ldr	r2, [r3, #0]
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	2140      	movs	r1, #64	; 0x40
 800780e:	438a      	bics	r2, r1
 8007810:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2220      	movs	r2, #32
 8007816:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2200      	movs	r2, #0
 800781c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	0018      	movs	r0, r3
 8007822:	f7ff fb33 	bl	8006e8c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007826:	46c0      	nop			; (mov r8, r8)
 8007828:	46bd      	mov	sp, r7
 800782a:	b002      	add	sp, #8
 800782c:	bd80      	pop	{r7, pc}
	...

08007830 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b084      	sub	sp, #16
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007838:	230e      	movs	r3, #14
 800783a:	18fb      	adds	r3, r7, r3
 800783c:	687a      	ldr	r2, [r7, #4]
 800783e:	215c      	movs	r1, #92	; 0x5c
 8007840:	5a52      	ldrh	r2, [r2, r1]
 8007842:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007848:	2b22      	cmp	r3, #34	; 0x22
 800784a:	d140      	bne.n	80078ce <UART_RxISR_8BIT+0x9e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007852:	210c      	movs	r1, #12
 8007854:	187b      	adds	r3, r7, r1
 8007856:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007858:	187b      	adds	r3, r7, r1
 800785a:	881b      	ldrh	r3, [r3, #0]
 800785c:	b2da      	uxtb	r2, r3
 800785e:	230e      	movs	r3, #14
 8007860:	18fb      	adds	r3, r7, r3
 8007862:	881b      	ldrh	r3, [r3, #0]
 8007864:	b2d9      	uxtb	r1, r3
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800786a:	400a      	ands	r2, r1
 800786c:	b2d2      	uxtb	r2, r2
 800786e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007874:	1c5a      	adds	r2, r3, #1
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	225a      	movs	r2, #90	; 0x5a
 800787e:	5a9b      	ldrh	r3, [r3, r2]
 8007880:	b29b      	uxth	r3, r3
 8007882:	3b01      	subs	r3, #1
 8007884:	b299      	uxth	r1, r3
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	225a      	movs	r2, #90	; 0x5a
 800788a:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	225a      	movs	r2, #90	; 0x5a
 8007890:	5a9b      	ldrh	r3, [r3, r2]
 8007892:	b29b      	uxth	r3, r3
 8007894:	2b00      	cmp	r3, #0
 8007896:	d122      	bne.n	80078de <UART_RxISR_8BIT+0xae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	681a      	ldr	r2, [r3, #0]
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	4911      	ldr	r1, [pc, #68]	; (80078e8 <UART_RxISR_8BIT+0xb8>)
 80078a4:	400a      	ands	r2, r1
 80078a6:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	689a      	ldr	r2, [r3, #8]
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	2101      	movs	r1, #1
 80078b4:	438a      	bics	r2, r1
 80078b6:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2220      	movs	r2, #32
 80078bc:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2200      	movs	r2, #0
 80078c2:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	0018      	movs	r0, r3
 80078c8:	f016 f830 	bl	801d92c <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80078cc:	e007      	b.n	80078de <UART_RxISR_8BIT+0xae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	699a      	ldr	r2, [r3, #24]
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	2108      	movs	r1, #8
 80078da:	430a      	orrs	r2, r1
 80078dc:	619a      	str	r2, [r3, #24]
}
 80078de:	46c0      	nop			; (mov r8, r8)
 80078e0:	46bd      	mov	sp, r7
 80078e2:	b004      	add	sp, #16
 80078e4:	bd80      	pop	{r7, pc}
 80078e6:	46c0      	nop			; (mov r8, r8)
 80078e8:	fffffedf 	.word	0xfffffedf

080078ec <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b084      	sub	sp, #16
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80078f4:	230e      	movs	r3, #14
 80078f6:	18fb      	adds	r3, r7, r3
 80078f8:	687a      	ldr	r2, [r7, #4]
 80078fa:	215c      	movs	r1, #92	; 0x5c
 80078fc:	5a52      	ldrh	r2, [r2, r1]
 80078fe:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007904:	2b22      	cmp	r3, #34	; 0x22
 8007906:	d140      	bne.n	800798a <UART_RxISR_16BIT+0x9e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800790e:	210c      	movs	r1, #12
 8007910:	187b      	adds	r3, r7, r1
 8007912:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007918:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800791a:	187b      	adds	r3, r7, r1
 800791c:	220e      	movs	r2, #14
 800791e:	18ba      	adds	r2, r7, r2
 8007920:	881b      	ldrh	r3, [r3, #0]
 8007922:	8812      	ldrh	r2, [r2, #0]
 8007924:	4013      	ands	r3, r2
 8007926:	b29a      	uxth	r2, r3
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007930:	1c9a      	adds	r2, r3, #2
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	225a      	movs	r2, #90	; 0x5a
 800793a:	5a9b      	ldrh	r3, [r3, r2]
 800793c:	b29b      	uxth	r3, r3
 800793e:	3b01      	subs	r3, #1
 8007940:	b299      	uxth	r1, r3
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	225a      	movs	r2, #90	; 0x5a
 8007946:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	225a      	movs	r2, #90	; 0x5a
 800794c:	5a9b      	ldrh	r3, [r3, r2]
 800794e:	b29b      	uxth	r3, r3
 8007950:	2b00      	cmp	r3, #0
 8007952:	d122      	bne.n	800799a <UART_RxISR_16BIT+0xae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	681a      	ldr	r2, [r3, #0]
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	4911      	ldr	r1, [pc, #68]	; (80079a4 <UART_RxISR_16BIT+0xb8>)
 8007960:	400a      	ands	r2, r1
 8007962:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	689a      	ldr	r2, [r3, #8]
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	2101      	movs	r1, #1
 8007970:	438a      	bics	r2, r1
 8007972:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2220      	movs	r2, #32
 8007978:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2200      	movs	r2, #0
 800797e:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	0018      	movs	r0, r3
 8007984:	f015 ffd2 	bl	801d92c <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007988:	e007      	b.n	800799a <UART_RxISR_16BIT+0xae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	699a      	ldr	r2, [r3, #24]
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	2108      	movs	r1, #8
 8007996:	430a      	orrs	r2, r1
 8007998:	619a      	str	r2, [r3, #24]
}
 800799a:	46c0      	nop			; (mov r8, r8)
 800799c:	46bd      	mov	sp, r7
 800799e:	b004      	add	sp, #16
 80079a0:	bd80      	pop	{r7, pc}
 80079a2:	46c0      	nop			; (mov r8, r8)
 80079a4:	fffffedf 	.word	0xfffffedf

080079a8 <certif_running>:
static void OnCertifTxNextPacketTimerEvent( void* context );
static bool certif_tx( void );

/* Exported functions definition---------------------------------------------------------*/
bool certif_running(void)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	af00      	add	r7, sp, #0
    return certifParam.Running;
 80079ac:	4b02      	ldr	r3, [pc, #8]	; (80079b8 <certif_running+0x10>)
 80079ae:	781b      	ldrb	r3, [r3, #0]
}
 80079b0:	0018      	movs	r0, r3
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}
 80079b6:	46c0      	nop			; (mov r8, r8)
 80079b8:	200002c4 	.word	0x200002c4

080079bc <certif_DownLinkIncrement>:

void certif_DownLinkIncrement( void )
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	af00      	add	r7, sp, #0
    certifParam.DownLinkCounter++;
 80079c0:	4b05      	ldr	r3, [pc, #20]	; (80079d8 <certif_DownLinkIncrement+0x1c>)
 80079c2:	2244      	movs	r2, #68	; 0x44
 80079c4:	5a9b      	ldrh	r3, [r3, r2]
 80079c6:	3301      	adds	r3, #1
 80079c8:	b299      	uxth	r1, r3
 80079ca:	4b03      	ldr	r3, [pc, #12]	; (80079d8 <certif_DownLinkIncrement+0x1c>)
 80079cc:	2244      	movs	r2, #68	; 0x44
 80079ce:	5299      	strh	r1, [r3, r2]
}
 80079d0:	46c0      	nop			; (mov r8, r8)
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bd80      	pop	{r7, pc}
 80079d6:	46c0      	nop			; (mov r8, r8)
 80079d8:	200002c4 	.word	0x200002c4

080079dc <certif_linkCheck>:

void certif_linkCheck(MlmeConfirm_t *mlmeConfirm)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b082      	sub	sp, #8
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
  certifParam.LinkCheck = true;
 80079e4:	4b08      	ldr	r3, [pc, #32]	; (8007a08 <certif_linkCheck+0x2c>)
 80079e6:	2246      	movs	r2, #70	; 0x46
 80079e8:	2101      	movs	r1, #1
 80079ea:	5499      	strb	r1, [r3, r2]
  certifParam.DemodMargin = mlmeConfirm->DemodMargin;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	7a19      	ldrb	r1, [r3, #8]
 80079f0:	4b05      	ldr	r3, [pc, #20]	; (8007a08 <certif_linkCheck+0x2c>)
 80079f2:	2247      	movs	r2, #71	; 0x47
 80079f4:	5499      	strb	r1, [r3, r2]
  certifParam.NbGateways = mlmeConfirm->NbGateways;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	7a59      	ldrb	r1, [r3, #9]
 80079fa:	4b03      	ldr	r3, [pc, #12]	; (8007a08 <certif_linkCheck+0x2c>)
 80079fc:	2248      	movs	r2, #72	; 0x48
 80079fe:	5499      	strb	r1, [r3, r2]
}
 8007a00:	46c0      	nop			; (mov r8, r8)
 8007a02:	46bd      	mov	sp, r7
 8007a04:	b002      	add	sp, #8
 8007a06:	bd80      	pop	{r7, pc}
 8007a08:	200002c4 	.word	0x200002c4

08007a0c <certif_tx>:

static bool certif_tx( void )
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b086      	sub	sp, #24
 8007a10:	af00      	add	r7, sp, #0
  McpsReq_t mcpsReq;
  LoRaMacTxInfo_t txInfo;
  
  if( certifParam.LinkCheck == true )
 8007a12:	4b47      	ldr	r3, [pc, #284]	; (8007b30 <certif_tx+0x124>)
 8007a14:	2246      	movs	r2, #70	; 0x46
 8007a16:	5c9b      	ldrb	r3, [r3, r2]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d017      	beq.n	8007a4c <certif_tx+0x40>
  {
    certifParam.LinkCheck = false;
 8007a1c:	4b44      	ldr	r3, [pc, #272]	; (8007b30 <certif_tx+0x124>)
 8007a1e:	2246      	movs	r2, #70	; 0x46
 8007a20:	2100      	movs	r1, #0
 8007a22:	5499      	strb	r1, [r3, r2]
    certifParam.DataBufferSize = 3;
 8007a24:	4b42      	ldr	r3, [pc, #264]	; (8007b30 <certif_tx+0x124>)
 8007a26:	2203      	movs	r2, #3
 8007a28:	70da      	strb	r2, [r3, #3]
    certifParam.DataBuffer[0] = 5;
 8007a2a:	4b41      	ldr	r3, [pc, #260]	; (8007b30 <certif_tx+0x124>)
 8007a2c:	2205      	movs	r2, #5
 8007a2e:	711a      	strb	r2, [r3, #4]
    certifParam.DataBuffer[1] = certifParam.DemodMargin;
 8007a30:	4b3f      	ldr	r3, [pc, #252]	; (8007b30 <certif_tx+0x124>)
 8007a32:	2247      	movs	r2, #71	; 0x47
 8007a34:	5c9a      	ldrb	r2, [r3, r2]
 8007a36:	4b3e      	ldr	r3, [pc, #248]	; (8007b30 <certif_tx+0x124>)
 8007a38:	715a      	strb	r2, [r3, #5]
    certifParam.DataBuffer[2] = certifParam.NbGateways;
 8007a3a:	4b3d      	ldr	r3, [pc, #244]	; (8007b30 <certif_tx+0x124>)
 8007a3c:	2248      	movs	r2, #72	; 0x48
 8007a3e:	5c9a      	ldrb	r2, [r3, r2]
 8007a40:	4b3b      	ldr	r3, [pc, #236]	; (8007b30 <certif_tx+0x124>)
 8007a42:	719a      	strb	r2, [r3, #6]
    certifParam.State = 1;
 8007a44:	4b3a      	ldr	r3, [pc, #232]	; (8007b30 <certif_tx+0x124>)
 8007a46:	2201      	movs	r2, #1
 8007a48:	705a      	strb	r2, [r3, #1]
 8007a4a:	e01b      	b.n	8007a84 <certif_tx+0x78>
  }
  else
  {
    switch( certifParam.State )
 8007a4c:	4b38      	ldr	r3, [pc, #224]	; (8007b30 <certif_tx+0x124>)
 8007a4e:	785b      	ldrb	r3, [r3, #1]
 8007a50:	2b01      	cmp	r3, #1
 8007a52:	d005      	beq.n	8007a60 <certif_tx+0x54>
 8007a54:	2b04      	cmp	r3, #4
 8007a56:	d115      	bne.n	8007a84 <certif_tx+0x78>
    {
    case 4:
      certifParam.State = 1;
 8007a58:	4b35      	ldr	r3, [pc, #212]	; (8007b30 <certif_tx+0x124>)
 8007a5a:	2201      	movs	r2, #1
 8007a5c:	705a      	strb	r2, [r3, #1]
      break;
 8007a5e:	e011      	b.n	8007a84 <certif_tx+0x78>
    case 1:
      certifParam.DataBufferSize = 2;
 8007a60:	4b33      	ldr	r3, [pc, #204]	; (8007b30 <certif_tx+0x124>)
 8007a62:	2202      	movs	r2, #2
 8007a64:	70da      	strb	r2, [r3, #3]
      certifParam.DataBuffer[0] = certifParam.DownLinkCounter >> 8;
 8007a66:	4b32      	ldr	r3, [pc, #200]	; (8007b30 <certif_tx+0x124>)
 8007a68:	2244      	movs	r2, #68	; 0x44
 8007a6a:	5a9b      	ldrh	r3, [r3, r2]
 8007a6c:	0a1b      	lsrs	r3, r3, #8
 8007a6e:	b29b      	uxth	r3, r3
 8007a70:	b2da      	uxtb	r2, r3
 8007a72:	4b2f      	ldr	r3, [pc, #188]	; (8007b30 <certif_tx+0x124>)
 8007a74:	711a      	strb	r2, [r3, #4]
      certifParam.DataBuffer[1] = certifParam.DownLinkCounter;
 8007a76:	4b2e      	ldr	r3, [pc, #184]	; (8007b30 <certif_tx+0x124>)
 8007a78:	2244      	movs	r2, #68	; 0x44
 8007a7a:	5a9b      	ldrh	r3, [r3, r2]
 8007a7c:	b2da      	uxtb	r2, r3
 8007a7e:	4b2c      	ldr	r3, [pc, #176]	; (8007b30 <certif_tx+0x124>)
 8007a80:	715a      	strb	r2, [r3, #5]
      break;
 8007a82:	46c0      	nop			; (mov r8, r8)
    }
  }
    
  if( LoRaMacQueryTxPossible( certifParam.DataBufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 8007a84:	4b2a      	ldr	r3, [pc, #168]	; (8007b30 <certif_tx+0x124>)
 8007a86:	78db      	ldrb	r3, [r3, #3]
 8007a88:	1d3a      	adds	r2, r7, #4
 8007a8a:	0011      	movs	r1, r2
 8007a8c:	0018      	movs	r0, r3
 8007a8e:	f006 fdcd 	bl	800e62c <LoRaMacQueryTxPossible>
 8007a92:	1e03      	subs	r3, r0, #0
 8007a94:	d00d      	beq.n	8007ab2 <certif_tx+0xa6>
  {
      // Send empty frame in order to flush MAC commands
      mcpsReq.Type = MCPS_UNCONFIRMED;
 8007a96:	2108      	movs	r1, #8
 8007a98:	187b      	adds	r3, r7, r1
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	701a      	strb	r2, [r3, #0]
      mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 8007a9e:	187b      	adds	r3, r7, r1
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	609a      	str	r2, [r3, #8]
      mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 8007aa4:	187b      	adds	r3, r7, r1
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	819a      	strh	r2, [r3, #12]
      mcpsReq.Req.Unconfirmed.Datarate = DR_0;
 8007aaa:	187b      	adds	r3, r7, r1
 8007aac:	2200      	movs	r2, #0
 8007aae:	739a      	strb	r2, [r3, #14]
 8007ab0:	e02b      	b.n	8007b0a <certif_tx+0xfe>
  }
  else
  {
      if( IsTxConfirmed == LORAWAN_UNCONFIRMED_MSG )
 8007ab2:	4b20      	ldr	r3, [pc, #128]	; (8007b34 <certif_tx+0x128>)
 8007ab4:	781b      	ldrb	r3, [r3, #0]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d112      	bne.n	8007ae0 <certif_tx+0xd4>
      {
          mcpsReq.Type = MCPS_UNCONFIRMED;
 8007aba:	2108      	movs	r1, #8
 8007abc:	187b      	adds	r3, r7, r1
 8007abe:	2200      	movs	r2, #0
 8007ac0:	701a      	strb	r2, [r3, #0]
          mcpsReq.Req.Unconfirmed.fPort = CERTIF_PORT;
 8007ac2:	187b      	adds	r3, r7, r1
 8007ac4:	22e0      	movs	r2, #224	; 0xe0
 8007ac6:	711a      	strb	r2, [r3, #4]
          mcpsReq.Req.Unconfirmed.fBufferSize = certifParam.DataBufferSize;
 8007ac8:	4b19      	ldr	r3, [pc, #100]	; (8007b30 <certif_tx+0x124>)
 8007aca:	78db      	ldrb	r3, [r3, #3]
 8007acc:	b29a      	uxth	r2, r3
 8007ace:	187b      	adds	r3, r7, r1
 8007ad0:	819a      	strh	r2, [r3, #12]
          mcpsReq.Req.Unconfirmed.fBuffer = &(certifParam.DataBuffer);
 8007ad2:	187b      	adds	r3, r7, r1
 8007ad4:	4a18      	ldr	r2, [pc, #96]	; (8007b38 <certif_tx+0x12c>)
 8007ad6:	609a      	str	r2, [r3, #8]
          mcpsReq.Req.Unconfirmed.Datarate = DR_0;
 8007ad8:	187b      	adds	r3, r7, r1
 8007ada:	2200      	movs	r2, #0
 8007adc:	739a      	strb	r2, [r3, #14]
 8007ade:	e014      	b.n	8007b0a <certif_tx+0xfe>
      }
      else
      {
          mcpsReq.Type = MCPS_CONFIRMED;
 8007ae0:	2108      	movs	r1, #8
 8007ae2:	187b      	adds	r3, r7, r1
 8007ae4:	2201      	movs	r2, #1
 8007ae6:	701a      	strb	r2, [r3, #0]
          mcpsReq.Req.Confirmed.fPort = CERTIF_PORT;
 8007ae8:	187b      	adds	r3, r7, r1
 8007aea:	22e0      	movs	r2, #224	; 0xe0
 8007aec:	711a      	strb	r2, [r3, #4]
          mcpsReq.Req.Confirmed.fBufferSize = certifParam.DataBufferSize;
 8007aee:	4b10      	ldr	r3, [pc, #64]	; (8007b30 <certif_tx+0x124>)
 8007af0:	78db      	ldrb	r3, [r3, #3]
 8007af2:	b29a      	uxth	r2, r3
 8007af4:	187b      	adds	r3, r7, r1
 8007af6:	819a      	strh	r2, [r3, #12]
          mcpsReq.Req.Confirmed.fBuffer = &(certifParam.DataBuffer);
 8007af8:	187b      	adds	r3, r7, r1
 8007afa:	4a0f      	ldr	r2, [pc, #60]	; (8007b38 <certif_tx+0x12c>)
 8007afc:	609a      	str	r2, [r3, #8]
          mcpsReq.Req.Confirmed.NbTrials = 8;
 8007afe:	187b      	adds	r3, r7, r1
 8007b00:	2208      	movs	r2, #8
 8007b02:	73da      	strb	r2, [r3, #15]
          mcpsReq.Req.Confirmed.Datarate = DR_0;
 8007b04:	187b      	adds	r3, r7, r1
 8007b06:	2200      	movs	r2, #0
 8007b08:	739a      	strb	r2, [r3, #14]
      }
  }

  /*cerification test on-going*/
  TimerStart( &CertifTxNextPacketTimer );
 8007b0a:	4b0c      	ldr	r3, [pc, #48]	; (8007b3c <certif_tx+0x130>)
 8007b0c:	0018      	movs	r0, r3
 8007b0e:	f00d fd01 	bl	8015514 <TimerStart>
	
  if( LoRaMacMcpsRequest( &mcpsReq ) == LORAMAC_STATUS_OK )
 8007b12:	2308      	movs	r3, #8
 8007b14:	18fb      	adds	r3, r7, r3
 8007b16:	0018      	movs	r0, r3
 8007b18:	f007 fdb8 	bl	800f68c <LoRaMacMcpsRequest>
 8007b1c:	1e03      	subs	r3, r0, #0
 8007b1e:	d101      	bne.n	8007b24 <certif_tx+0x118>
  {
      return false;
 8007b20:	2300      	movs	r3, #0
 8007b22:	e000      	b.n	8007b26 <certif_tx+0x11a>
  }
    return true;
 8007b24:	2301      	movs	r3, #1
}
 8007b26:	0018      	movs	r0, r3
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	b006      	add	sp, #24
 8007b2c:	bd80      	pop	{r7, pc}
 8007b2e:	46c0      	nop			; (mov r8, r8)
 8007b30:	200002c4 	.word	0x200002c4
 8007b34:	2000030e 	.word	0x2000030e
 8007b38:	200002c8 	.word	0x200002c8
 8007b3c:	200002ac 	.word	0x200002ac

08007b40 <certif_rx>:

void certif_rx( McpsIndication_t *mcpsIndication, MlmeReqJoin_t* JoinParameters)
{
 8007b40:	b5b0      	push	{r4, r5, r7, lr}
 8007b42:	b0a6      	sub	sp, #152	; 0x98
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
 8007b48:	6039      	str	r1, [r7, #0]
  if( certifParam.Running == false )
 8007b4a:	4bb0      	ldr	r3, [pc, #704]	; (8007e0c <certif_rx+0x2cc>)
 8007b4c:	781b      	ldrb	r3, [r3, #0]
 8007b4e:	2201      	movs	r2, #1
 8007b50:	4053      	eors	r3, r2
 8007b52:	b2db      	uxtb	r3, r3
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d065      	beq.n	8007c24 <certif_rx+0xe4>
  {
      // Check compliance test enable command (i)
      if( ( mcpsIndication->BufferSize == 4 ) &&
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	7b1b      	ldrb	r3, [r3, #12]
 8007b5c:	2b04      	cmp	r3, #4
 8007b5e:	d000      	beq.n	8007b62 <certif_rx+0x22>
 8007b60:	e145      	b.n	8007dee <certif_rx+0x2ae>
          ( mcpsIndication->Buffer[0] == 0x01 ) &&
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	689b      	ldr	r3, [r3, #8]
 8007b66:	781b      	ldrb	r3, [r3, #0]
      if( ( mcpsIndication->BufferSize == 4 ) &&
 8007b68:	2b01      	cmp	r3, #1
 8007b6a:	d000      	beq.n	8007b6e <certif_rx+0x2e>
 8007b6c:	e13f      	b.n	8007dee <certif_rx+0x2ae>
          ( mcpsIndication->Buffer[1] == 0x01 ) &&
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	689b      	ldr	r3, [r3, #8]
 8007b72:	3301      	adds	r3, #1
 8007b74:	781b      	ldrb	r3, [r3, #0]
          ( mcpsIndication->Buffer[0] == 0x01 ) &&
 8007b76:	2b01      	cmp	r3, #1
 8007b78:	d000      	beq.n	8007b7c <certif_rx+0x3c>
 8007b7a:	e138      	b.n	8007dee <certif_rx+0x2ae>
          ( mcpsIndication->Buffer[2] == 0x01 ) &&
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	689b      	ldr	r3, [r3, #8]
 8007b80:	3302      	adds	r3, #2
 8007b82:	781b      	ldrb	r3, [r3, #0]
          ( mcpsIndication->Buffer[1] == 0x01 ) &&
 8007b84:	2b01      	cmp	r3, #1
 8007b86:	d000      	beq.n	8007b8a <certif_rx+0x4a>
 8007b88:	e131      	b.n	8007dee <certif_rx+0x2ae>
          ( mcpsIndication->Buffer[3] == 0x01 ) )
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	689b      	ldr	r3, [r3, #8]
 8007b8e:	3303      	adds	r3, #3
 8007b90:	781b      	ldrb	r3, [r3, #0]
          ( mcpsIndication->Buffer[2] == 0x01 ) &&
 8007b92:	2b01      	cmp	r3, #1
 8007b94:	d000      	beq.n	8007b98 <certif_rx+0x58>
 8007b96:	e12a      	b.n	8007dee <certif_rx+0x2ae>
      {
          MibRequestConfirm_t mibReq;
          IsTxConfirmed = LORAWAN_UNCONFIRMED_MSG;
 8007b98:	4b9d      	ldr	r3, [pc, #628]	; (8007e10 <certif_rx+0x2d0>)
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	701a      	strb	r2, [r3, #0]
          certifParam.DataBufferSize = 2;
 8007b9e:	4b9b      	ldr	r3, [pc, #620]	; (8007e0c <certif_rx+0x2cc>)
 8007ba0:	2202      	movs	r2, #2
 8007ba2:	70da      	strb	r2, [r3, #3]
          certifParam.DownLinkCounter = 0;
 8007ba4:	4b99      	ldr	r3, [pc, #612]	; (8007e0c <certif_rx+0x2cc>)
 8007ba6:	2244      	movs	r2, #68	; 0x44
 8007ba8:	2100      	movs	r1, #0
 8007baa:	5299      	strh	r1, [r3, r2]
          certifParam.LinkCheck = false;
 8007bac:	4b97      	ldr	r3, [pc, #604]	; (8007e0c <certif_rx+0x2cc>)
 8007bae:	2246      	movs	r2, #70	; 0x46
 8007bb0:	2100      	movs	r1, #0
 8007bb2:	5499      	strb	r1, [r3, r2]
          certifParam.DemodMargin = 0;
 8007bb4:	4b95      	ldr	r3, [pc, #596]	; (8007e0c <certif_rx+0x2cc>)
 8007bb6:	2247      	movs	r2, #71	; 0x47
 8007bb8:	2100      	movs	r1, #0
 8007bba:	5499      	strb	r1, [r3, r2]
          certifParam.NbGateways = 0;
 8007bbc:	4b93      	ldr	r3, [pc, #588]	; (8007e0c <certif_rx+0x2cc>)
 8007bbe:	2248      	movs	r2, #72	; 0x48
 8007bc0:	2100      	movs	r1, #0
 8007bc2:	5499      	strb	r1, [r3, r2]
          certifParam.Running = true;
 8007bc4:	4b91      	ldr	r3, [pc, #580]	; (8007e0c <certif_rx+0x2cc>)
 8007bc6:	2201      	movs	r2, #1
 8007bc8:	701a      	strb	r2, [r3, #0]
          certifParam.State = 1;
 8007bca:	4b90      	ldr	r3, [pc, #576]	; (8007e0c <certif_rx+0x2cc>)
 8007bcc:	2201      	movs	r2, #1
 8007bce:	705a      	strb	r2, [r3, #1]

          mibReq.Type = MIB_ADR;
 8007bd0:	217c      	movs	r1, #124	; 0x7c
 8007bd2:	187b      	adds	r3, r7, r1
 8007bd4:	2202      	movs	r2, #2
 8007bd6:	701a      	strb	r2, [r3, #0]

          LoRaMacMibGetRequestConfirm( &mibReq );
 8007bd8:	000c      	movs	r4, r1
 8007bda:	187b      	adds	r3, r7, r1
 8007bdc:	0018      	movs	r0, r3
 8007bde:	f006 fddf 	bl	800e7a0 <LoRaMacMibGetRequestConfirm>
          AdrEnableInit=mibReq.Param.AdrEnable;
 8007be2:	0021      	movs	r1, r4
 8007be4:	187b      	adds	r3, r7, r1
 8007be6:	791a      	ldrb	r2, [r3, #4]
 8007be8:	4b8a      	ldr	r3, [pc, #552]	; (8007e14 <certif_rx+0x2d4>)
 8007bea:	701a      	strb	r2, [r3, #0]
          
          mibReq.Type = MIB_ADR;
 8007bec:	187b      	adds	r3, r7, r1
 8007bee:	2202      	movs	r2, #2
 8007bf0:	701a      	strb	r2, [r3, #0]
          mibReq.Param.AdrEnable = true;
 8007bf2:	187b      	adds	r3, r7, r1
 8007bf4:	2201      	movs	r2, #1
 8007bf6:	711a      	strb	r2, [r3, #4]
          LoRaMacMibSetRequestConfirm( &mibReq );
 8007bf8:	187b      	adds	r3, r7, r1
 8007bfa:	0018      	movs	r0, r3
 8007bfc:	f006 ff1c 	bl	800ea38 <LoRaMacMibSetRequestConfirm>

  #if defined( REGION_EU868 )
          LoRaMacTestSetDutyCycleOn( false );
 8007c00:	2000      	movs	r0, #0
 8007c02:	f007 fe93 	bl	800f92c <LoRaMacTestSetDutyCycleOn>
  #endif

         
        TimerInit( &CertifTxNextPacketTimer, OnCertifTxNextPacketTimerEvent );
 8007c06:	4a84      	ldr	r2, [pc, #528]	; (8007e18 <certif_rx+0x2d8>)
 8007c08:	4b84      	ldr	r3, [pc, #528]	; (8007e1c <certif_rx+0x2dc>)
 8007c0a:	0011      	movs	r1, r2
 8007c0c:	0018      	movs	r0, r3
 8007c0e:	f00d fc37 	bl	8015480 <TimerInit>
        TimerSetValue( &CertifTxNextPacketTimer,  TEST_TX_DUTYCYCLE); 
 8007c12:	4a83      	ldr	r2, [pc, #524]	; (8007e20 <certif_rx+0x2e0>)
 8007c14:	4b81      	ldr	r3, [pc, #516]	; (8007e1c <certif_rx+0x2dc>)
 8007c16:	0011      	movs	r1, r2
 8007c18:	0018      	movs	r0, r3
 8007c1a:	f00d fc4f 	bl	80154bc <TimerSetValue>
        
        /*confirm test mode activation */
        certif_tx( );
 8007c1e:	f7ff fef5 	bl	8007a0c <certif_tx>
 8007c22:	e0e4      	b.n	8007dee <certif_rx+0x2ae>
      }
  }

  else
  {
      certifParam.State = mcpsIndication->Buffer[0];
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	689b      	ldr	r3, [r3, #8]
 8007c28:	781a      	ldrb	r2, [r3, #0]
 8007c2a:	4b78      	ldr	r3, [pc, #480]	; (8007e0c <certif_rx+0x2cc>)
 8007c2c:	705a      	strb	r2, [r3, #1]
      switch( certifParam.State )
 8007c2e:	4b77      	ldr	r3, [pc, #476]	; (8007e0c <certif_rx+0x2cc>)
 8007c30:	785b      	ldrb	r3, [r3, #1]
 8007c32:	2b07      	cmp	r3, #7
 8007c34:	d900      	bls.n	8007c38 <certif_rx+0xf8>
 8007c36:	e0d9      	b.n	8007dec <certif_rx+0x2ac>
 8007c38:	009a      	lsls	r2, r3, #2
 8007c3a:	4b7a      	ldr	r3, [pc, #488]	; (8007e24 <certif_rx+0x2e4>)
 8007c3c:	18d3      	adds	r3, r2, r3
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	469f      	mov	pc, r3
      {
        case 0: // Check compliance test disable command (ii)
        {
          
          certifParam.DownLinkCounter = 0;
 8007c42:	4b72      	ldr	r3, [pc, #456]	; (8007e0c <certif_rx+0x2cc>)
 8007c44:	2244      	movs	r2, #68	; 0x44
 8007c46:	2100      	movs	r1, #0
 8007c48:	5299      	strh	r1, [r3, r2]
          certifParam.Running = false;
 8007c4a:	4b70      	ldr	r3, [pc, #448]	; (8007e0c <certif_rx+0x2cc>)
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	701a      	strb	r2, [r3, #0]
          
          MibRequestConfirm_t mibReq;
          mibReq.Type = MIB_ADR;
 8007c50:	2164      	movs	r1, #100	; 0x64
 8007c52:	187b      	adds	r3, r7, r1
 8007c54:	2202      	movs	r2, #2
 8007c56:	701a      	strb	r2, [r3, #0]
          mibReq.Param.AdrEnable = AdrEnableInit;
 8007c58:	4b6e      	ldr	r3, [pc, #440]	; (8007e14 <certif_rx+0x2d4>)
 8007c5a:	781a      	ldrb	r2, [r3, #0]
 8007c5c:	187b      	adds	r3, r7, r1
 8007c5e:	711a      	strb	r2, [r3, #4]
          LoRaMacMibSetRequestConfirm( &mibReq );
 8007c60:	187b      	adds	r3, r7, r1
 8007c62:	0018      	movs	r0, r3
 8007c64:	f006 fee8 	bl	800ea38 <LoRaMacMibSetRequestConfirm>
  #if defined( REGION_EU868 )
          LoRaMacTestSetDutyCycleOn( true );
 8007c68:	2001      	movs	r0, #1
 8007c6a:	f007 fe5f 	bl	800f92c <LoRaMacTestSetDutyCycleOn>
  #endif
          
          break;
 8007c6e:	46c0      	nop			; (mov r8, r8)
 8007c70:	e0bd      	b.n	8007dee <certif_rx+0x2ae>
        }
        case 1: // (iii, iv)
          certifParam.DataBufferSize = 2;
 8007c72:	4b66      	ldr	r3, [pc, #408]	; (8007e0c <certif_rx+0x2cc>)
 8007c74:	2202      	movs	r2, #2
 8007c76:	70da      	strb	r2, [r3, #3]
          break;
 8007c78:	e0b9      	b.n	8007dee <certif_rx+0x2ae>
        case 2: // Enable confirmed messages (v)
          IsTxConfirmed = LORAWAN_CONFIRMED_MSG;
 8007c7a:	4b65      	ldr	r3, [pc, #404]	; (8007e10 <certif_rx+0x2d0>)
 8007c7c:	2201      	movs	r2, #1
 8007c7e:	701a      	strb	r2, [r3, #0]
          certifParam.State = 1;
 8007c80:	4b62      	ldr	r3, [pc, #392]	; (8007e0c <certif_rx+0x2cc>)
 8007c82:	2201      	movs	r2, #1
 8007c84:	705a      	strb	r2, [r3, #1]
          break;
 8007c86:	e0b2      	b.n	8007dee <certif_rx+0x2ae>
        case 3:  // Disable confirmed messages (vi)
          IsTxConfirmed = LORAWAN_UNCONFIRMED_MSG;
 8007c88:	4b61      	ldr	r3, [pc, #388]	; (8007e10 <certif_rx+0x2d0>)
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	701a      	strb	r2, [r3, #0]
          certifParam.State = 1;
 8007c8e:	4b5f      	ldr	r3, [pc, #380]	; (8007e0c <certif_rx+0x2cc>)
 8007c90:	2201      	movs	r2, #1
 8007c92:	705a      	strb	r2, [r3, #1]
          break;
 8007c94:	e0ab      	b.n	8007dee <certif_rx+0x2ae>
        case 4: // (vii)
          certifParam.DataBufferSize = mcpsIndication->BufferSize;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	7b1a      	ldrb	r2, [r3, #12]
 8007c9a:	4b5c      	ldr	r3, [pc, #368]	; (8007e0c <certif_rx+0x2cc>)
 8007c9c:	70da      	strb	r2, [r3, #3]

          certifParam.DataBuffer[0] = 4;
 8007c9e:	4b5b      	ldr	r3, [pc, #364]	; (8007e0c <certif_rx+0x2cc>)
 8007ca0:	2204      	movs	r2, #4
 8007ca2:	711a      	strb	r2, [r3, #4]
          for( uint8_t i = 1; i < certifParam.DataBufferSize; i++ )
 8007ca4:	2397      	movs	r3, #151	; 0x97
 8007ca6:	18fb      	adds	r3, r7, r3
 8007ca8:	2201      	movs	r2, #1
 8007caa:	701a      	strb	r2, [r3, #0]
 8007cac:	e013      	b.n	8007cd6 <certif_rx+0x196>
          {
              certifParam.DataBuffer[i] = mcpsIndication->Buffer[i] + 1;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	689a      	ldr	r2, [r3, #8]
 8007cb2:	2097      	movs	r0, #151	; 0x97
 8007cb4:	183b      	adds	r3, r7, r0
 8007cb6:	781b      	ldrb	r3, [r3, #0]
 8007cb8:	18d3      	adds	r3, r2, r3
 8007cba:	781a      	ldrb	r2, [r3, #0]
 8007cbc:	183b      	adds	r3, r7, r0
 8007cbe:	781b      	ldrb	r3, [r3, #0]
 8007cc0:	3201      	adds	r2, #1
 8007cc2:	b2d1      	uxtb	r1, r2
 8007cc4:	4a51      	ldr	r2, [pc, #324]	; (8007e0c <certif_rx+0x2cc>)
 8007cc6:	18d3      	adds	r3, r2, r3
 8007cc8:	1c0a      	adds	r2, r1, #0
 8007cca:	711a      	strb	r2, [r3, #4]
          for( uint8_t i = 1; i < certifParam.DataBufferSize; i++ )
 8007ccc:	183b      	adds	r3, r7, r0
 8007cce:	781a      	ldrb	r2, [r3, #0]
 8007cd0:	183b      	adds	r3, r7, r0
 8007cd2:	3201      	adds	r2, #1
 8007cd4:	701a      	strb	r2, [r3, #0]
 8007cd6:	4b4d      	ldr	r3, [pc, #308]	; (8007e0c <certif_rx+0x2cc>)
 8007cd8:	78db      	ldrb	r3, [r3, #3]
 8007cda:	2297      	movs	r2, #151	; 0x97
 8007cdc:	18ba      	adds	r2, r7, r2
 8007cde:	7812      	ldrb	r2, [r2, #0]
 8007ce0:	429a      	cmp	r2, r3
 8007ce2:	d3e4      	bcc.n	8007cae <certif_rx+0x16e>
          }
          break;
 8007ce4:	e083      	b.n	8007dee <certif_rx+0x2ae>
        case 5: // (viii)
        {
          MlmeReq_t mlmeReq;
          mlmeReq.Type = MLME_LINK_CHECK;
 8007ce6:	2154      	movs	r1, #84	; 0x54
 8007ce8:	187b      	adds	r3, r7, r1
 8007cea:	2203      	movs	r2, #3
 8007cec:	701a      	strb	r2, [r3, #0]
          LoRaMacMlmeRequest( &mlmeReq );
 8007cee:	187b      	adds	r3, r7, r1
 8007cf0:	0018      	movs	r0, r3
 8007cf2:	f007 fb59 	bl	800f3a8 <LoRaMacMlmeRequest>
          break;
 8007cf6:	46c0      	nop			; (mov r8, r8)
 8007cf8:	e079      	b.n	8007dee <certif_rx+0x2ae>
        {
            MlmeReq_t mlmeReq;

            // Disable TestMode and revert back to normal operation

            certifParam.DownLinkCounter = 0;
 8007cfa:	4b44      	ldr	r3, [pc, #272]	; (8007e0c <certif_rx+0x2cc>)
 8007cfc:	2244      	movs	r2, #68	; 0x44
 8007cfe:	2100      	movs	r1, #0
 8007d00:	5299      	strh	r1, [r3, r2]
            certifParam.Running = false;
 8007d02:	4b42      	ldr	r3, [pc, #264]	; (8007e0c <certif_rx+0x2cc>)
 8007d04:	2200      	movs	r2, #0
 8007d06:	701a      	strb	r2, [r3, #0]

            MibRequestConfirm_t mibReq;
            mibReq.Type = MIB_ADR;
 8007d08:	212c      	movs	r1, #44	; 0x2c
 8007d0a:	187b      	adds	r3, r7, r1
 8007d0c:	2202      	movs	r2, #2
 8007d0e:	701a      	strb	r2, [r3, #0]
            mibReq.Param.AdrEnable = AdrEnableInit;
 8007d10:	4b40      	ldr	r3, [pc, #256]	; (8007e14 <certif_rx+0x2d4>)
 8007d12:	781a      	ldrb	r2, [r3, #0]
 8007d14:	187b      	adds	r3, r7, r1
 8007d16:	711a      	strb	r2, [r3, #4]
            LoRaMacMibSetRequestConfirm( &mibReq );
 8007d18:	187b      	adds	r3, r7, r1
 8007d1a:	0018      	movs	r0, r3
 8007d1c:	f006 fe8c 	bl	800ea38 <LoRaMacMibSetRequestConfirm>

            mlmeReq.Type = MLME_JOIN;
 8007d20:	2144      	movs	r1, #68	; 0x44
 8007d22:	187b      	adds	r3, r7, r1
 8007d24:	2200      	movs	r2, #0
 8007d26:	701a      	strb	r2, [r3, #0]
            mlmeReq.Req.Join = *JoinParameters;
 8007d28:	187b      	adds	r3, r7, r1
 8007d2a:	683a      	ldr	r2, [r7, #0]
 8007d2c:	3304      	adds	r3, #4
 8007d2e:	ca31      	ldmia	r2!, {r0, r4, r5}
 8007d30:	c331      	stmia	r3!, {r0, r4, r5}

            LoRaMacMlmeRequest( &mlmeReq );
 8007d32:	187b      	adds	r3, r7, r1
 8007d34:	0018      	movs	r0, r3
 8007d36:	f007 fb37 	bl	800f3a8 <LoRaMacMlmeRequest>
            break;
 8007d3a:	46c0      	nop			; (mov r8, r8)
 8007d3c:	e057      	b.n	8007dee <certif_rx+0x2ae>
        }

        case 7: // (x)
        {
          if( mcpsIndication->BufferSize == 3 )
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	7b1b      	ldrb	r3, [r3, #12]
 8007d42:	2b03      	cmp	r3, #3
 8007d44:	d118      	bne.n	8007d78 <certif_rx+0x238>
          {
              MlmeReq_t mlmeReq;
              mlmeReq.Type = MLME_TXCW;
 8007d46:	211c      	movs	r1, #28
 8007d48:	187b      	adds	r3, r7, r1
 8007d4a:	2204      	movs	r2, #4
 8007d4c:	701a      	strb	r2, [r3, #0]
              mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	689b      	ldr	r3, [r3, #8]
 8007d52:	3301      	adds	r3, #1
 8007d54:	781b      	ldrb	r3, [r3, #0]
 8007d56:	021b      	lsls	r3, r3, #8
 8007d58:	b21a      	sxth	r2, r3
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	689b      	ldr	r3, [r3, #8]
 8007d5e:	3302      	adds	r3, #2
 8007d60:	781b      	ldrb	r3, [r3, #0]
 8007d62:	b21b      	sxth	r3, r3
 8007d64:	4313      	orrs	r3, r2
 8007d66:	b21b      	sxth	r3, r3
 8007d68:	b29a      	uxth	r2, r3
 8007d6a:	187b      	adds	r3, r7, r1
 8007d6c:	809a      	strh	r2, [r3, #4]
              LoRaMacMlmeRequest( &mlmeReq );
 8007d6e:	187b      	adds	r3, r7, r1
 8007d70:	0018      	movs	r0, r3
 8007d72:	f007 fb19 	bl	800f3a8 <LoRaMacMlmeRequest>
 8007d76:	e035      	b.n	8007de4 <certif_rx+0x2a4>
          }
          else if( mcpsIndication->BufferSize == 7 )
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	7b1b      	ldrb	r3, [r3, #12]
 8007d7c:	2b07      	cmp	r3, #7
 8007d7e:	d131      	bne.n	8007de4 <certif_rx+0x2a4>
          {
              MlmeReq_t mlmeReq;
              mlmeReq.Type = MLME_TXCW_1;
 8007d80:	210c      	movs	r1, #12
 8007d82:	187b      	adds	r3, r7, r1
 8007d84:	2205      	movs	r2, #5
 8007d86:	701a      	strb	r2, [r3, #0]
              mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	689b      	ldr	r3, [r3, #8]
 8007d8c:	3301      	adds	r3, #1
 8007d8e:	781b      	ldrb	r3, [r3, #0]
 8007d90:	021b      	lsls	r3, r3, #8
 8007d92:	b21a      	sxth	r2, r3
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	689b      	ldr	r3, [r3, #8]
 8007d98:	3302      	adds	r3, #2
 8007d9a:	781b      	ldrb	r3, [r3, #0]
 8007d9c:	b21b      	sxth	r3, r3
 8007d9e:	4313      	orrs	r3, r2
 8007da0:	b21b      	sxth	r3, r3
 8007da2:	b29a      	uxth	r2, r3
 8007da4:	187b      	adds	r3, r7, r1
 8007da6:	809a      	strh	r2, [r3, #4]
              mlmeReq.Req.TxCw.Frequency = ( uint32_t )( ( mcpsIndication->Buffer[3] << 16 ) | ( mcpsIndication->Buffer[4] << 8 ) | mcpsIndication->Buffer[5] ) * 100;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	689b      	ldr	r3, [r3, #8]
 8007dac:	3303      	adds	r3, #3
 8007dae:	781b      	ldrb	r3, [r3, #0]
 8007db0:	041a      	lsls	r2, r3, #16
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	689b      	ldr	r3, [r3, #8]
 8007db6:	3304      	adds	r3, #4
 8007db8:	781b      	ldrb	r3, [r3, #0]
 8007dba:	021b      	lsls	r3, r3, #8
 8007dbc:	431a      	orrs	r2, r3
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	689b      	ldr	r3, [r3, #8]
 8007dc2:	3305      	adds	r3, #5
 8007dc4:	781b      	ldrb	r3, [r3, #0]
 8007dc6:	4313      	orrs	r3, r2
 8007dc8:	001a      	movs	r2, r3
 8007dca:	2364      	movs	r3, #100	; 0x64
 8007dcc:	435a      	muls	r2, r3
 8007dce:	187b      	adds	r3, r7, r1
 8007dd0:	609a      	str	r2, [r3, #8]
              mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[6];
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	689b      	ldr	r3, [r3, #8]
 8007dd6:	799a      	ldrb	r2, [r3, #6]
 8007dd8:	187b      	adds	r3, r7, r1
 8007dda:	731a      	strb	r2, [r3, #12]
              LoRaMacMlmeRequest( &mlmeReq );
 8007ddc:	187b      	adds	r3, r7, r1
 8007dde:	0018      	movs	r0, r3
 8007de0:	f007 fae2 	bl	800f3a8 <LoRaMacMlmeRequest>
          }
          certifParam.State = 1;
 8007de4:	4b09      	ldr	r3, [pc, #36]	; (8007e0c <certif_rx+0x2cc>)
 8007de6:	2201      	movs	r2, #1
 8007de8:	705a      	strb	r2, [r3, #1]
          break;
 8007dea:	e000      	b.n	8007dee <certif_rx+0x2ae>
          LoRaMacMlmeRequest( &mlmeReq );
          break;
        }
#endif /* LORAMAC_CLASSB_ENABLED */
        default:                  
          break;
 8007dec:	46c0      	nop			; (mov r8, r8)
        }
    }
  
    if ( certifParam.Running == false )
 8007dee:	4b07      	ldr	r3, [pc, #28]	; (8007e0c <certif_rx+0x2cc>)
 8007df0:	781b      	ldrb	r3, [r3, #0]
 8007df2:	2201      	movs	r2, #1
 8007df4:	4053      	eors	r3, r2
 8007df6:	b2db      	uxtb	r3, r3
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d003      	beq.n	8007e04 <certif_rx+0x2c4>
    {
      /*cerification test stops*/
      TimerStop( &CertifTxNextPacketTimer );
 8007dfc:	4b07      	ldr	r3, [pc, #28]	; (8007e1c <certif_rx+0x2dc>)
 8007dfe:	0018      	movs	r0, r3
 8007e00:	f00d fbde 	bl	80155c0 <TimerStop>
    }
}
 8007e04:	46c0      	nop			; (mov r8, r8)
 8007e06:	46bd      	mov	sp, r7
 8007e08:	b026      	add	sp, #152	; 0x98
 8007e0a:	bdb0      	pop	{r4, r5, r7, pc}
 8007e0c:	200002c4 	.word	0x200002c4
 8007e10:	2000030e 	.word	0x2000030e
 8007e14:	2000030f 	.word	0x2000030f
 8007e18:	08007e29 	.word	0x08007e29
 8007e1c:	200002ac 	.word	0x200002ac
 8007e20:	00001388 	.word	0x00001388
 8007e24:	080204f0 	.word	0x080204f0

08007e28 <OnCertifTxNextPacketTimerEvent>:

/*!
 * \brief Function executed on TxNextPacket Timeout event
 */
static void OnCertifTxNextPacketTimerEvent( void* context )
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b082      	sub	sp, #8
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
    certif_tx( );
 8007e30:	f7ff fdec 	bl	8007a0c <certif_tx>

}
 8007e34:	46c0      	nop			; (mov r8, r8)
 8007e36:	46bd      	mov	sp, r7
 8007e38:	b002      	add	sp, #8
 8007e3a:	bd80      	pop	{r7, pc}

08007e3c <lorawan_driver_loop>:
 * lorawan loop : process the LoRaMac
 * This need to be called as much as possible.
 * in Sync mode the function is call by the waitUntilEndOfExecution
 * when switch in async mode you need to call this function as much as possible
 */
void lorawan_driver_loop() {
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	af00      	add	r7, sp, #0

	while (    __loraWanState.joinState != LORAWAN_STATE_NONE
 8007e40:	e004      	b.n	8007e4c <lorawan_driver_loop+0x10>
			&& __loraWanState.joinState != LORAWAN_STATE_INITIALIZED
			&& __loraWanState.reqPending ) {
		__loraWanState.reqPending=false;
 8007e42:	4b0b      	ldr	r3, [pc, #44]	; (8007e70 <lorawan_driver_loop+0x34>)
 8007e44:	2200      	movs	r2, #0
 8007e46:	721a      	strb	r2, [r3, #8]
        LoRaMacProcess( );
 8007e48:	f003 fc58 	bl	800b6fc <LoRaMacProcess>
	while (    __loraWanState.joinState != LORAWAN_STATE_NONE
 8007e4c:	4b08      	ldr	r3, [pc, #32]	; (8007e70 <lorawan_driver_loop+0x34>)
 8007e4e:	781b      	ldrb	r3, [r3, #0]
 8007e50:	b2db      	uxtb	r3, r3
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d008      	beq.n	8007e68 <lorawan_driver_loop+0x2c>
			&& __loraWanState.joinState != LORAWAN_STATE_INITIALIZED
 8007e56:	4b06      	ldr	r3, [pc, #24]	; (8007e70 <lorawan_driver_loop+0x34>)
 8007e58:	781b      	ldrb	r3, [r3, #0]
 8007e5a:	b2db      	uxtb	r3, r3
 8007e5c:	2b01      	cmp	r3, #1
 8007e5e:	d003      	beq.n	8007e68 <lorawan_driver_loop+0x2c>
			&& __loraWanState.reqPending ) {
 8007e60:	4b03      	ldr	r3, [pc, #12]	; (8007e70 <lorawan_driver_loop+0x34>)
 8007e62:	7a1b      	ldrb	r3, [r3, #8]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d1ec      	bne.n	8007e42 <lorawan_driver_loop+0x6>
	}

}
 8007e68:	46c0      	nop			; (mov r8, r8)
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	bd80      	pop	{r7, pc}
 8007e6e:	46c0      	nop			; (mov r8, r8)
 8007e70:	20000330 	.word	0x20000330

08007e74 <lorawan_driver_waitUntilEndOfExecution>:

__weak void lorawan_driver_waitUntilEndOfExecution() {
 8007e74:	b580      	push	{r7, lr}
 8007e76:	af00      	add	r7, sp, #0

	lorawan_driver_loop();
 8007e78:	f7ff ffe0 	bl	8007e3c <lorawan_driver_loop>
	#if ITSDK_WITH_WDG != __WDG_NONE && ITSDK_WDG_MS > 0
	   wdg_refresh();
	#endif
    itsdk_stimer_run();
 8007e7c:	f014 fd78 	bl	801c970 <itsdk_stimer_run>

}
 8007e80:	46c0      	nop			; (mov r8, r8)
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd80      	pop	{r7, pc}
	...

08007e88 <lorawan_driver_battery_level>:
/**
 * Return a batteryLevel from 1 to 254
 * 1 = VBAT_MIN
 * 254 = VBAT_MAX
 */
__weak uint8_t lorawan_driver_battery_level() {
 8007e88:	b590      	push	{r4, r7, lr}
 8007e8a:	b083      	sub	sp, #12
 8007e8c:	af00      	add	r7, sp, #0
	 uint16_t mv = adc_getVBat();
 8007e8e:	1dbc      	adds	r4, r7, #6
 8007e90:	f014 ff52 	bl	801cd38 <adc_getVBat>
 8007e94:	0003      	movs	r3, r0
 8007e96:	8023      	strh	r3, [r4, #0]
	 if ( mv <= ITSDK_VBAT_MIN ) return 1;
 8007e98:	1dbb      	adds	r3, r7, #6
 8007e9a:	881a      	ldrh	r2, [r3, #0]
 8007e9c:	23fa      	movs	r3, #250	; 0xfa
 8007e9e:	00db      	lsls	r3, r3, #3
 8007ea0:	429a      	cmp	r2, r3
 8007ea2:	d801      	bhi.n	8007ea8 <lorawan_driver_battery_level+0x20>
 8007ea4:	2301      	movs	r3, #1
 8007ea6:	e014      	b.n	8007ed2 <lorawan_driver_battery_level+0x4a>
	 if ( mv >= ITSDK_VBAT_MAX ) return 254;
 8007ea8:	1dbb      	adds	r3, r7, #6
 8007eaa:	881b      	ldrh	r3, [r3, #0]
 8007eac:	4a0b      	ldr	r2, [pc, #44]	; (8007edc <lorawan_driver_battery_level+0x54>)
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	d901      	bls.n	8007eb6 <lorawan_driver_battery_level+0x2e>
 8007eb2:	23fe      	movs	r3, #254	; 0xfe
 8007eb4:	e00d      	b.n	8007ed2 <lorawan_driver_battery_level+0x4a>
	 return (( (uint32_t) (mv - ITSDK_VBAT_MIN)*ITSDK_VBAT_MAX) /(ITSDK_VBAT_MAX-ITSDK_VBAT_MIN) );
 8007eb6:	1dbb      	adds	r3, r7, #6
 8007eb8:	881b      	ldrh	r3, [r3, #0]
 8007eba:	4a09      	ldr	r2, [pc, #36]	; (8007ee0 <lorawan_driver_battery_level+0x58>)
 8007ebc:	4694      	mov	ip, r2
 8007ebe:	4463      	add	r3, ip
 8007ec0:	001a      	movs	r2, r3
 8007ec2:	4b08      	ldr	r3, [pc, #32]	; (8007ee4 <lorawan_driver_battery_level+0x5c>)
 8007ec4:	4353      	muls	r3, r2
 8007ec6:	4908      	ldr	r1, [pc, #32]	; (8007ee8 <lorawan_driver_battery_level+0x60>)
 8007ec8:	0018      	movs	r0, r3
 8007eca:	f7f8 f925 	bl	8000118 <__udivsi3>
 8007ece:	0003      	movs	r3, r0
 8007ed0:	b2db      	uxtb	r3, r3
}
 8007ed2:	0018      	movs	r0, r3
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	b003      	add	sp, #12
 8007ed8:	bd90      	pop	{r4, r7, pc}
 8007eda:	46c0      	nop			; (mov r8, r8)
 8007edc:	00000ce3 	.word	0x00000ce3
 8007ee0:	fffff830 	.word	0xfffff830
 8007ee4:	00000ce4 	.word	0x00000ce4
 8007ee8:	00000514 	.word	0x00000514

08007eec <lorawan_driver_temperature>:

/**
 * Return the temperature
 * temperature in fixed decimal : 8b integer + 8b decimal
 */
__weak uint16_t lorawan_driver_temperature() {
 8007eec:	b590      	push	{r4, r7, lr}
 8007eee:	b083      	sub	sp, #12
 8007ef0:	af00      	add	r7, sp, #0
	int16_t t = adc_getTemperature();
 8007ef2:	1dbc      	adds	r4, r7, #6
 8007ef4:	f014 fe98 	bl	801cc28 <adc_getTemperature>
 8007ef8:	0003      	movs	r3, r0
 8007efa:	8023      	strh	r3, [r4, #0]
	t = (int16_t)(((int32_t)t << 8)/100);
 8007efc:	1dbb      	adds	r3, r7, #6
 8007efe:	2200      	movs	r2, #0
 8007f00:	5e9b      	ldrsh	r3, [r3, r2]
 8007f02:	021b      	lsls	r3, r3, #8
 8007f04:	2164      	movs	r1, #100	; 0x64
 8007f06:	0018      	movs	r0, r3
 8007f08:	f7f8 f990 	bl	800022c <__divsi3>
 8007f0c:	0003      	movs	r3, r0
 8007f0e:	001a      	movs	r2, r3
 8007f10:	1dbb      	adds	r3, r7, #6
 8007f12:	801a      	strh	r2, [r3, #0]
	return (uint16_t)t;
 8007f14:	1dbb      	adds	r3, r7, #6
 8007f16:	881b      	ldrh	r3, [r3, #0]
}
 8007f18:	0018      	movs	r0, r3
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	b003      	add	sp, #12
 8007f1e:	bd90      	pop	{r4, r7, pc}

08007f20 <lorawan_driver_macProcessNotify>:

/**
 * Called after IRQ processing
 */
void lorawan_driver_macProcessNotify(void) {
 8007f20:	b580      	push	{r7, lr}
 8007f22:	af00      	add	r7, sp, #0
  __loraWanState.reqPending=true;
 8007f24:	4b02      	ldr	r3, [pc, #8]	; (8007f30 <lorawan_driver_macProcessNotify+0x10>)
 8007f26:	2201      	movs	r2, #1
 8007f28:	721a      	strb	r2, [r3, #8]
}
 8007f2a:	46c0      	nop			; (mov r8, r8)
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	bd80      	pop	{r7, pc}
 8007f30:	20000330 	.word	0x20000330

08007f34 <lorawan_driver_onTxNeeded>:
}

/**
 * Callback function requesting transmission
 */
__weak void lorawan_driver_onTxNeeded() {
 8007f34:	b580      	push	{r7, lr}
 8007f36:	af00      	add	r7, sp, #0
	LOG_INFO_LORAWAN(("[LoRaWAN] Network Server is asking for an uplink transmission\r\n"));
}
 8007f38:	46c0      	nop			; (mov r8, r8)
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	bd80      	pop	{r7, pc}
	...

08007f40 <__convertDR>:


/**
 * Convert Datarate define from ITSDK to LoRaMac
 */
static uint8_t __convertDR(uint8_t itsdkDr) {
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b082      	sub	sp, #8
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	0002      	movs	r2, r0
 8007f48:	1dfb      	adds	r3, r7, #7
 8007f4a:	701a      	strb	r2, [r3, #0]
	switch (itsdkDr) {
 8007f4c:	1dfb      	adds	r3, r7, #7
 8007f4e:	781b      	ldrb	r3, [r3, #0]
 8007f50:	2b16      	cmp	r3, #22
 8007f52:	d824      	bhi.n	8007f9e <__convertDR+0x5e>
 8007f54:	009a      	lsls	r2, r3, #2
 8007f56:	4b18      	ldr	r3, [pc, #96]	; (8007fb8 <__convertDR+0x78>)
 8007f58:	18d3      	adds	r3, r2, r3
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	469f      	mov	pc, r3
	case __LORAWAN_DR_0: return DR_0;
 8007f5e:	2300      	movs	r3, #0
 8007f60:	e026      	b.n	8007fb0 <__convertDR+0x70>
	case __LORAWAN_DR_1: return DR_1;
 8007f62:	2301      	movs	r3, #1
 8007f64:	e024      	b.n	8007fb0 <__convertDR+0x70>
	case __LORAWAN_DR_2: return DR_2;
 8007f66:	2302      	movs	r3, #2
 8007f68:	e022      	b.n	8007fb0 <__convertDR+0x70>
	case __LORAWAN_DR_3: return DR_3;
 8007f6a:	2303      	movs	r3, #3
 8007f6c:	e020      	b.n	8007fb0 <__convertDR+0x70>
	case __LORAWAN_DR_4: return DR_4;
 8007f6e:	2304      	movs	r3, #4
 8007f70:	e01e      	b.n	8007fb0 <__convertDR+0x70>
	case __LORAWAN_DR_5: return DR_5;
 8007f72:	2305      	movs	r3, #5
 8007f74:	e01c      	b.n	8007fb0 <__convertDR+0x70>
	case __LORAWAN_DR_6: return DR_6;
 8007f76:	2306      	movs	r3, #6
 8007f78:	e01a      	b.n	8007fb0 <__convertDR+0x70>
	case __LORAWAN_DR_7: return DR_7;
 8007f7a:	2307      	movs	r3, #7
 8007f7c:	e018      	b.n	8007fb0 <__convertDR+0x70>
	case __LORAWAN_DR_8: return DR_8;
 8007f7e:	2308      	movs	r3, #8
 8007f80:	e016      	b.n	8007fb0 <__convertDR+0x70>
	case __LORAWAN_DR_9: return DR_9;
 8007f82:	2309      	movs	r3, #9
 8007f84:	e014      	b.n	8007fb0 <__convertDR+0x70>
	case __LORAWAN_DR_10: return DR_10;
 8007f86:	230a      	movs	r3, #10
 8007f88:	e012      	b.n	8007fb0 <__convertDR+0x70>
	case __LORAWAN_DR_11: return DR_11;
 8007f8a:	230b      	movs	r3, #11
 8007f8c:	e010      	b.n	8007fb0 <__convertDR+0x70>
	case __LORAWAN_DR_12: return DR_12;
 8007f8e:	230c      	movs	r3, #12
 8007f90:	e00e      	b.n	8007fb0 <__convertDR+0x70>
	case __LORAWAN_DR_13: return DR_13;
 8007f92:	230d      	movs	r3, #13
 8007f94:	e00c      	b.n	8007fb0 <__convertDR+0x70>
	case __LORAWAN_DR_14: return DR_14;
 8007f96:	230e      	movs	r3, #14
 8007f98:	e00a      	b.n	8007fb0 <__convertDR+0x70>
	case __LORAWAN_DR_15: return DR_15;
 8007f9a:	230f      	movs	r3, #15
 8007f9c:	e008      	b.n	8007fb0 <__convertDR+0x70>
	default:
		ITSDK_ERROR_REPORT(ITSDK_ERROR_LORAWAN_INVALID_DR,(uint16_t)itsdkDr);
 8007f9e:	1dfb      	adds	r3, r7, #7
 8007fa0:	781b      	ldrb	r3, [r3, #0]
 8007fa2:	b29b      	uxth	r3, r3
 8007fa4:	4a05      	ldr	r2, [pc, #20]	; (8007fbc <__convertDR+0x7c>)
 8007fa6:	0019      	movs	r1, r3
 8007fa8:	0010      	movs	r0, r2
 8007faa:	f013 fa5b 	bl	801b464 <itsdk_error_report>
	}
	return 0;	// never reached
 8007fae:	2300      	movs	r3, #0
}
 8007fb0:	0018      	movs	r0, r3
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	b002      	add	sp, #8
 8007fb6:	bd80      	pop	{r7, pc}
 8007fb8:	08020510 	.word	0x08020510
 8007fbc:	d0000100 	.word	0xd0000100

08007fc0 <lorawan_driver_LORA_Init>:
 *  lora Init - initialize the stack and the associated hardware
 *
 */
void lorawan_driver_LORA_Init(
		lorawan_driver_config_t * config
){
 8007fc0:	b590      	push	{r4, r7, lr}
 8007fc2:	b089      	sub	sp, #36	; 0x24
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
  LOG_INFO_LORAWAN(("lorawan_driver_LORA_Init\r\n"));

  __loraWanState.joinState = LORAWAN_STATE_NONE;
 8007fc8:	4b95      	ldr	r3, [pc, #596]	; (8008220 <lorawan_driver_LORA_Init+0x260>)
 8007fca:	2200      	movs	r2, #0
 8007fcc:	701a      	strb	r2, [r3, #0]
  __loraWanState.upLinkCounter = 0;
 8007fce:	4b94      	ldr	r3, [pc, #592]	; (8008220 <lorawan_driver_LORA_Init+0x260>)
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	815a      	strh	r2, [r3, #10]
  __loraWanState.downlinkCounter = 0;
 8007fd4:	4b92      	ldr	r3, [pc, #584]	; (8008220 <lorawan_driver_LORA_Init+0x260>)
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	819a      	strh	r2, [r3, #12]
  __loraWanState.lastRssi = LORAWAN_DRIVER_INVALID_RSSI;
 8007fda:	4b91      	ldr	r3, [pc, #580]	; (8008220 <lorawan_driver_LORA_Init+0x260>)
 8007fdc:	2201      	movs	r2, #1
 8007fde:	4252      	negs	r2, r2
 8007fe0:	81da      	strh	r2, [r3, #14]
  LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 8007fe2:	4b90      	ldr	r3, [pc, #576]	; (8008224 <lorawan_driver_LORA_Init+0x264>)
 8007fe4:	4a90      	ldr	r2, [pc, #576]	; (8008228 <lorawan_driver_LORA_Init+0x268>)
 8007fe6:	601a      	str	r2, [r3, #0]
  LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 8007fe8:	4b8e      	ldr	r3, [pc, #568]	; (8008224 <lorawan_driver_LORA_Init+0x264>)
 8007fea:	4a90      	ldr	r2, [pc, #576]	; (800822c <lorawan_driver_LORA_Init+0x26c>)
 8007fec:	605a      	str	r2, [r3, #4]
  LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 8007fee:	4b8d      	ldr	r3, [pc, #564]	; (8008224 <lorawan_driver_LORA_Init+0x264>)
 8007ff0:	4a8f      	ldr	r2, [pc, #572]	; (8008230 <lorawan_driver_LORA_Init+0x270>)
 8007ff2:	609a      	str	r2, [r3, #8]
  LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 8007ff4:	4b8b      	ldr	r3, [pc, #556]	; (8008224 <lorawan_driver_LORA_Init+0x264>)
 8007ff6:	4a8f      	ldr	r2, [pc, #572]	; (8008234 <lorawan_driver_LORA_Init+0x274>)
 8007ff8:	60da      	str	r2, [r3, #12]
  LoRaMacCallbacks.GetBatteryLevel = lorawan_driver_battery_level;
 8007ffa:	4b8f      	ldr	r3, [pc, #572]	; (8008238 <lorawan_driver_LORA_Init+0x278>)
 8007ffc:	4a8f      	ldr	r2, [pc, #572]	; (800823c <lorawan_driver_LORA_Init+0x27c>)
 8007ffe:	601a      	str	r2, [r3, #0]
  LoRaMacCallbacks.GetTemperatureLevel = lorawan_driver_temperature;
 8008000:	4b8d      	ldr	r3, [pc, #564]	; (8008238 <lorawan_driver_LORA_Init+0x278>)
 8008002:	4a8f      	ldr	r2, [pc, #572]	; (8008240 <lorawan_driver_LORA_Init+0x280>)
 8008004:	605a      	str	r2, [r3, #4]
  LoRaMacCallbacks.MacProcessNotify = lorawan_driver_macProcessNotify;
 8008006:	4b8c      	ldr	r3, [pc, #560]	; (8008238 <lorawan_driver_LORA_Init+0x278>)
 8008008:	4a8e      	ldr	r2, [pc, #568]	; (8008244 <lorawan_driver_LORA_Init+0x284>)
 800800a:	60da      	str	r2, [r3, #12]



  // Set the Radio configuration
  switch ( config->region ) {
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	889b      	ldrh	r3, [r3, #4]
 8008010:	2b20      	cmp	r3, #32
 8008012:	d146      	bne.n	80080a2 <lorawan_driver_LORA_Init+0xe2>
        	LoRaMacInitialization( &LoRaMacPrimitives, &LoRaMacCallbacks, LORAMAC_REGION_EU433 );
        	break;
		#endif
		#if defined( REGION_EU868 )
        case __LORAWAN_REGION_EU868:
        	LoRaMacInitialization( &LoRaMacPrimitives, &LoRaMacCallbacks, LORAMAC_REGION_EU868 );
 8008014:	4988      	ldr	r1, [pc, #544]	; (8008238 <lorawan_driver_LORA_Init+0x278>)
 8008016:	4b83      	ldr	r3, [pc, #524]	; (8008224 <lorawan_driver_LORA_Init+0x264>)
 8008018:	2205      	movs	r2, #5
 800801a:	0018      	movs	r0, r3
 800801c:	f005 ff1e 	bl	800de5c <LoRaMacInitialization>
        	LoRaMacTestSetDutyCycleOn( true );	// activate duty cycle
 8008020:	2001      	movs	r0, #1
 8008022:	f007 fc83 	bl	800f92c <LoRaMacTestSetDutyCycleOn>
        	break;
 8008026:	46c0      	nop			; (mov r8, r8)
  	  	mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;	// Change the default RX window margin error (default is +/- 10ms)
  	  	mibReq.Param.SystemMaxRxError = ITSDK_LORAWAN_MAX_RX_ERROR;
  	  	LoRaMacMibSetRequestConfirm( &mibReq );
		#endif

  	    mibReq.Type = MIB_ADR;
 8008028:	2408      	movs	r4, #8
 800802a:	193b      	adds	r3, r7, r4
 800802c:	2202      	movs	r2, #2
 800802e:	701a      	strb	r2, [r3, #0]
  	    mibReq.Param.AdrEnable = config->adrEnable;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	781a      	ldrb	r2, [r3, #0]
 8008034:	193b      	adds	r3, r7, r4
 8008036:	711a      	strb	r2, [r3, #4]
  	    LoRaMacMibSetRequestConfirm( &mibReq );
 8008038:	193b      	adds	r3, r7, r4
 800803a:	0018      	movs	r0, r3
 800803c:	f006 fcfc 	bl	800ea38 <LoRaMacMibSetRequestConfirm>

  	    mibReq.Type = MIB_PUBLIC_NETWORK;
 8008040:	193b      	adds	r3, r7, r4
 8008042:	221a      	movs	r2, #26
 8008044:	701a      	strb	r2, [r3, #0]
  	    mibReq.Param.EnablePublicNetwork = config->enablePublicNetwork;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	789a      	ldrb	r2, [r3, #2]
 800804a:	193b      	adds	r3, r7, r4
 800804c:	711a      	strb	r2, [r3, #4]
  	    LoRaMacMibSetRequestConfirm( &mibReq );
 800804e:	193b      	adds	r3, r7, r4
 8008050:	0018      	movs	r0, r3
 8008052:	f006 fcf1 	bl	800ea38 <LoRaMacMibSetRequestConfirm>

  	    __loraWanState.txDatarate = __convertDR(config->txDatarate);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	785b      	ldrb	r3, [r3, #1]
 800805a:	b25b      	sxtb	r3, r3
 800805c:	b2db      	uxtb	r3, r3
 800805e:	0018      	movs	r0, r3
 8008060:	f7ff ff6e 	bl	8007f40 <__convertDR>
 8008064:	0003      	movs	r3, r0
 8008066:	001a      	movs	r2, r3
 8008068:	4b6d      	ldr	r3, [pc, #436]	; (8008220 <lorawan_driver_LORA_Init+0x260>)
 800806a:	749a      	strb	r2, [r3, #18]
  	    mibReq.Type = MIB_CHANNELS_DEFAULT_DATARATE;
 800806c:	193b      	adds	r3, r7, r4
 800806e:	2227      	movs	r2, #39	; 0x27
 8008070:	701a      	strb	r2, [r3, #0]
  	    mibReq.Param.ChannelsDefaultDatarate = __convertDR(config->txDatarate);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	785b      	ldrb	r3, [r3, #1]
 8008076:	b25b      	sxtb	r3, r3
 8008078:	b2db      	uxtb	r3, r3
 800807a:	0018      	movs	r0, r3
 800807c:	f7ff ff60 	bl	8007f40 <__convertDR>
 8008080:	0003      	movs	r3, r0
 8008082:	b25a      	sxtb	r2, r3
 8008084:	193b      	adds	r3, r7, r4
 8008086:	711a      	strb	r2, [r3, #4]
  	    LoRaMacMibSetRequestConfirm( &mibReq );
 8008088:	193b      	adds	r3, r7, r4
 800808a:	0018      	movs	r0, r3
 800808c:	f006 fcd4 	bl	800ea38 <LoRaMacMibSetRequestConfirm>

  	    __loraWanState.JoinType = config->JoinType;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	799a      	ldrb	r2, [r3, #6]
 8008094:	4b62      	ldr	r3, [pc, #392]	; (8008220 <lorawan_driver_LORA_Init+0x260>)
 8008096:	74da      	strb	r2, [r3, #19]
  	    if ( config->JoinType == __LORAWAN_OTAA ) {
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	799b      	ldrb	r3, [r3, #6]
 800809c:	2b01      	cmp	r3, #1
 800809e:	d130      	bne.n	8008102 <lorawan_driver_LORA_Init+0x142>
 80080a0:	e007      	b.n	80080b2 <lorawan_driver_LORA_Init+0xf2>
    		ITSDK_ERROR_REPORT(ITSDK_ERROR_LORAWAN_INVALID_REGION,(uint16_t)config->region);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	889b      	ldrh	r3, [r3, #4]
 80080a6:	4a68      	ldr	r2, [pc, #416]	; (8008248 <lorawan_driver_LORA_Init+0x288>)
 80080a8:	0019      	movs	r1, r3
 80080aa:	0010      	movs	r0, r2
 80080ac:	f013 f9da 	bl	801b464 <itsdk_error_report>
 80080b0:	e0b2      	b.n	8008218 <lorawan_driver_LORA_Init+0x258>
  	    	mibReq.Type = MIB_APP_KEY;
 80080b2:	2108      	movs	r1, #8
 80080b4:	187b      	adds	r3, r7, r1
 80080b6:	2205      	movs	r2, #5
 80080b8:	701a      	strb	r2, [r3, #0]
  	    	mibReq.Param.AppKey = config->config.otaa.appKey;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	691a      	ldr	r2, [r3, #16]
 80080be:	187b      	adds	r3, r7, r1
 80080c0:	605a      	str	r2, [r3, #4]
  	    	LoRaMacMibSetRequestConfirm( &mibReq );
 80080c2:	000c      	movs	r4, r1
 80080c4:	187b      	adds	r3, r7, r1
 80080c6:	0018      	movs	r0, r3
 80080c8:	f006 fcb6 	bl	800ea38 <LoRaMacMibSetRequestConfirm>

  	    	mibReq.Type = MIB_NWK_KEY;
 80080cc:	0021      	movs	r1, r4
 80080ce:	187b      	adds	r3, r7, r1
 80080d0:	2206      	movs	r2, #6
 80080d2:	701a      	strb	r2, [r3, #0]
  	    	mibReq.Param.NwkKey = config->config.otaa.nwkKey;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	695a      	ldr	r2, [r3, #20]
 80080d8:	187b      	adds	r3, r7, r1
 80080da:	605a      	str	r2, [r3, #4]
  	    	LoRaMacMibSetRequestConfirm( &mibReq );
 80080dc:	187b      	adds	r3, r7, r1
 80080de:	0018      	movs	r0, r3
 80080e0:	f006 fcaa 	bl	800ea38 <LoRaMacMibSetRequestConfirm>

  	    	// Store the config element not in MIB
  	        bcopy(config->devEui,__loraWanState.join.otaa.devEui,8);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	689b      	ldr	r3, [r3, #8]
 80080e8:	4958      	ldr	r1, [pc, #352]	; (800824c <lorawan_driver_LORA_Init+0x28c>)
 80080ea:	2208      	movs	r2, #8
 80080ec:	0018      	movs	r0, r3
 80080ee:	f016 f842 	bl	801e176 <bcopy>
  	        bcopy(config->config.otaa.appEui,__loraWanState.join.otaa.appEui,8);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	68db      	ldr	r3, [r3, #12]
 80080f6:	4956      	ldr	r1, [pc, #344]	; (8008250 <lorawan_driver_LORA_Init+0x290>)
 80080f8:	2208      	movs	r2, #8
 80080fa:	0018      	movs	r0, r3
 80080fc:	f016 f83b 	bl	801e176 <bcopy>
 8008100:	e06e      	b.n	80081e0 <lorawan_driver_LORA_Init+0x220>

  	    } else if (config->JoinType == __LORAWAN_ABP) {
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	799b      	ldrb	r3, [r3, #6]
 8008106:	2b02      	cmp	r3, #2
 8008108:	d16a      	bne.n	80081e0 <lorawan_driver_LORA_Init+0x220>

  	    	if (config->config.abp.devAddr == 0) {
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	69db      	ldr	r3, [r3, #28]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d10e      	bne.n	8008130 <lorawan_driver_LORA_Init+0x170>
				// Choose a random device address
				srand1( itsdk_getRandomSeed( ) );
 8008112:	f015 fb5d 	bl	801d7d0 <itsdk_getRandomSeed>
 8008116:	0003      	movs	r3, r0
 8008118:	0018      	movs	r0, r3
 800811a:	f00d fabd 	bl	8015698 <srand1>
				config->config.abp.devAddr = randr( 0, 0x01FFFFFF );
 800811e:	4b4d      	ldr	r3, [pc, #308]	; (8008254 <lorawan_driver_LORA_Init+0x294>)
 8008120:	0019      	movs	r1, r3
 8008122:	2000      	movs	r0, #0
 8008124:	f00d fac6 	bl	80156b4 <randr>
 8008128:	0003      	movs	r3, r0
 800812a:	001a      	movs	r2, r3
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	61da      	str	r2, [r3, #28]
  	    	}

  	    	mibReq.Type = MIB_DEV_ADDR;
 8008130:	2108      	movs	r1, #8
 8008132:	187b      	adds	r3, r7, r1
 8008134:	2204      	movs	r2, #4
 8008136:	701a      	strb	r2, [r3, #0]
  	    	mibReq.Param.DevAddr = config->config.abp.devAddr;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	69da      	ldr	r2, [r3, #28]
 800813c:	187b      	adds	r3, r7, r1
 800813e:	605a      	str	r2, [r3, #4]
  	    	LoRaMacMibSetRequestConfirm( &mibReq );
 8008140:	000c      	movs	r4, r1
 8008142:	187b      	adds	r3, r7, r1
 8008144:	0018      	movs	r0, r3
 8008146:	f006 fc77 	bl	800ea38 <LoRaMacMibSetRequestConfirm>

  	    	mibReq.Type = MIB_NET_ID;
 800814a:	0021      	movs	r1, r4
 800814c:	187b      	adds	r3, r7, r1
 800814e:	2203      	movs	r2, #3
 8008150:	701a      	strb	r2, [r3, #0]
  	    	mibReq.Param.NetID = ITSDK_LORAWAN_NETWORKID;
 8008152:	187b      	adds	r3, r7, r1
 8008154:	2200      	movs	r2, #0
 8008156:	605a      	str	r2, [r3, #4]
  	    	LoRaMacMibSetRequestConfirm( &mibReq );
 8008158:	000c      	movs	r4, r1
 800815a:	187b      	adds	r3, r7, r1
 800815c:	0018      	movs	r0, r3
 800815e:	f006 fc6b 	bl	800ea38 <LoRaMacMibSetRequestConfirm>

  	    	mibReq.Type = MIB_F_NWK_S_INT_KEY;
 8008162:	0021      	movs	r1, r4
 8008164:	187b      	adds	r3, r7, r1
 8008166:	2209      	movs	r2, #9
 8008168:	701a      	strb	r2, [r3, #0]
  	    	mibReq.Param.FNwkSIntKey = config->config.abp.FNwkSIntKey;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	68da      	ldr	r2, [r3, #12]
 800816e:	187b      	adds	r3, r7, r1
 8008170:	605a      	str	r2, [r3, #4]
  	    	LoRaMacMibSetRequestConfirm( &mibReq );
 8008172:	000c      	movs	r4, r1
 8008174:	187b      	adds	r3, r7, r1
 8008176:	0018      	movs	r0, r3
 8008178:	f006 fc5e 	bl	800ea38 <LoRaMacMibSetRequestConfirm>

  	    	mibReq.Type = MIB_S_NWK_S_INT_KEY;
 800817c:	0021      	movs	r1, r4
 800817e:	187b      	adds	r3, r7, r1
 8008180:	220a      	movs	r2, #10
 8008182:	701a      	strb	r2, [r3, #0]
  	    	mibReq.Param.SNwkSIntKey = config->config.abp.SNwkSIntKey;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	691a      	ldr	r2, [r3, #16]
 8008188:	187b      	adds	r3, r7, r1
 800818a:	605a      	str	r2, [r3, #4]
  	    	LoRaMacMibSetRequestConfirm( &mibReq );
 800818c:	000c      	movs	r4, r1
 800818e:	187b      	adds	r3, r7, r1
 8008190:	0018      	movs	r0, r3
 8008192:	f006 fc51 	bl	800ea38 <LoRaMacMibSetRequestConfirm>

  	    	mibReq.Type = MIB_NWK_S_ENC_KEY;
 8008196:	0021      	movs	r1, r4
 8008198:	187b      	adds	r3, r7, r1
 800819a:	220b      	movs	r2, #11
 800819c:	701a      	strb	r2, [r3, #0]
  	    	mibReq.Param.NwkSEncKey = config->config.abp.nwkSEncKey;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	695a      	ldr	r2, [r3, #20]
 80081a2:	187b      	adds	r3, r7, r1
 80081a4:	605a      	str	r2, [r3, #4]
  	    	LoRaMacMibSetRequestConfirm( &mibReq );
 80081a6:	000c      	movs	r4, r1
 80081a8:	187b      	adds	r3, r7, r1
 80081aa:	0018      	movs	r0, r3
 80081ac:	f006 fc44 	bl	800ea38 <LoRaMacMibSetRequestConfirm>

  	    	mibReq.Type = MIB_APP_S_KEY;
 80081b0:	0021      	movs	r1, r4
 80081b2:	187b      	adds	r3, r7, r1
 80081b4:	220c      	movs	r2, #12
 80081b6:	701a      	strb	r2, [r3, #0]
  	    	mibReq.Param.AppSKey = config->config.abp.appSKey;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	699a      	ldr	r2, [r3, #24]
 80081bc:	187b      	adds	r3, r7, r1
 80081be:	605a      	str	r2, [r3, #4]
  	    	LoRaMacMibSetRequestConfirm( &mibReq );
 80081c0:	000c      	movs	r4, r1
 80081c2:	187b      	adds	r3, r7, r1
 80081c4:	0018      	movs	r0, r3
 80081c6:	f006 fc37 	bl	800ea38 <LoRaMacMibSetRequestConfirm>

  	    	mibReq.Type = MIB_NETWORK_ACTIVATION;
 80081ca:	0021      	movs	r1, r4
 80081cc:	187b      	adds	r3, r7, r1
 80081ce:	2201      	movs	r2, #1
 80081d0:	701a      	strb	r2, [r3, #0]
  	    	mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 80081d2:	187b      	adds	r3, r7, r1
 80081d4:	2201      	movs	r2, #1
 80081d6:	711a      	strb	r2, [r3, #4]
  	    	LoRaMacMibSetRequestConfirm( &mibReq );
 80081d8:	187b      	adds	r3, r7, r1
 80081da:	0018      	movs	r0, r3
 80081dc:	f006 fc2c 	bl	800ea38 <LoRaMacMibSetRequestConfirm>

  	    }
  	    mibReq.Type = MIB_DEVICE_CLASS;
 80081e0:	2108      	movs	r1, #8
 80081e2:	187b      	adds	r3, r7, r1
 80081e4:	2200      	movs	r2, #0
 80081e6:	701a      	strb	r2, [r3, #0]
  	    mibReq.Param.Class= CLASS_A;
 80081e8:	187b      	adds	r3, r7, r1
 80081ea:	2200      	movs	r2, #0
 80081ec:	711a      	strb	r2, [r3, #4]
  	    LoRaMacMibSetRequestConfirm( &mibReq );
 80081ee:	000c      	movs	r4, r1
 80081f0:	187b      	adds	r3, r7, r1
 80081f2:	0018      	movs	r0, r3
 80081f4:	f006 fc20 	bl	800ea38 <LoRaMacMibSetRequestConfirm>

	    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 80081f8:	0021      	movs	r1, r4
 80081fa:	187b      	adds	r3, r7, r1
 80081fc:	222b      	movs	r2, #43	; 0x2b
 80081fe:	701a      	strb	r2, [r3, #0]
		mibReq.Param.SystemMaxRxError = ITSDK_LORAWAN_MAX_RX_ERROR;
 8008200:	187b      	adds	r3, r7, r1
 8008202:	2200      	movs	r2, #0
 8008204:	605a      	str	r2, [r3, #4]
		LoRaMacMibSetRequestConfirm( &mibReq );
 8008206:	187b      	adds	r3, r7, r1
 8008208:	0018      	movs	r0, r3
 800820a:	f006 fc15 	bl	800ea38 <LoRaMacMibSetRequestConfirm>
                LoRaMacMibSetRequestConfirm( &mibReq );
		#endif


         // Init the Mac layer
         LoRaMacStart();
 800820e:	f006 f9ff 	bl	800e610 <LoRaMacStart>
         __loraWanState.joinState = LORAWAN_STATE_INITIALIZED;
 8008212:	4b03      	ldr	r3, [pc, #12]	; (8008220 <lorawan_driver_LORA_Init+0x260>)
 8008214:	2201      	movs	r2, #1
 8008216:	701a      	strb	r2, [r3, #0]

}
 8008218:	46bd      	mov	sp, r7
 800821a:	b009      	add	sp, #36	; 0x24
 800821c:	bd90      	pop	{r4, r7, pc}
 800821e:	46c0      	nop			; (mov r8, r8)
 8008220:	20000330 	.word	0x20000330
 8008224:	20000310 	.word	0x20000310
 8008228:	080086e5 	.word	0x080086e5
 800822c:	08008781 	.word	0x08008781
 8008230:	08008889 	.word	0x08008889
 8008234:	080088fd 	.word	0x080088fd
 8008238:	20000320 	.word	0x20000320
 800823c:	08007e89 	.word	0x08007e89
 8008240:	08007eed 	.word	0x08007eed
 8008244:	08007f21 	.word	0x08007f21
 8008248:	d0000102 	.word	0xd0000102
 800824c:	20000344 	.word	0x20000344
 8008250:	2000034c 	.word	0x2000034c
 8008254:	01ffffff 	.word	0x01ffffff

08008258 <lorawan_driver_LORA_Join>:
// =======================================================================================

static MlmeReqJoin_t JoinParameters;
itsdk_lorawan_join_t lorawan_driver_LORA_Join(
		itsdk_lorawan_run_t 	  runMode
){
 8008258:	b5b0      	push	{r4, r5, r7, lr}
 800825a:	b08e      	sub	sp, #56	; 0x38
 800825c:	af00      	add	r7, sp, #0
 800825e:	0002      	movs	r2, r0
 8008260:	1dfb      	adds	r3, r7, #7
 8008262:	701a      	strb	r2, [r3, #0]
	LOG_INFO_LORAWAN(("lorawan_driver_LORA_Join (mode:%d)\r\n",runMode));

    switch (__loraWanState.JoinType) {
 8008264:	4b3d      	ldr	r3, [pc, #244]	; (800835c <lorawan_driver_LORA_Join+0x104>)
 8008266:	7cdb      	ldrb	r3, [r3, #19]
 8008268:	2b01      	cmp	r3, #1
 800826a:	d002      	beq.n	8008272 <lorawan_driver_LORA_Join+0x1a>
 800826c:	2b02      	cmp	r3, #2
 800826e:	d029      	beq.n	80082c4 <lorawan_driver_LORA_Join+0x6c>
 8008270:	e052      	b.n	8008318 <lorawan_driver_LORA_Join+0xc0>
    case __LORAWAN_OTAA:
    	{
    	    MlmeReq_t mlmeReq;
    	    mlmeReq.Type = MLME_JOIN;
 8008272:	2124      	movs	r1, #36	; 0x24
 8008274:	187b      	adds	r3, r7, r1
 8008276:	2200      	movs	r2, #0
 8008278:	701a      	strb	r2, [r3, #0]
    	    mlmeReq.Req.Join.DevEui = __loraWanState.join.otaa.devEui;
 800827a:	187b      	adds	r3, r7, r1
 800827c:	4a38      	ldr	r2, [pc, #224]	; (8008360 <lorawan_driver_LORA_Join+0x108>)
 800827e:	605a      	str	r2, [r3, #4]
    	    mlmeReq.Req.Join.JoinEui = __loraWanState.join.otaa.appEui;
 8008280:	187b      	adds	r3, r7, r1
 8008282:	4a38      	ldr	r2, [pc, #224]	; (8008364 <lorawan_driver_LORA_Join+0x10c>)
 8008284:	609a      	str	r2, [r3, #8]
    	    mlmeReq.Req.Join.Datarate = __loraWanState.txDatarate;
 8008286:	4b35      	ldr	r3, [pc, #212]	; (800835c <lorawan_driver_LORA_Join+0x104>)
 8008288:	7c9a      	ldrb	r2, [r3, #18]
 800828a:	187b      	adds	r3, r7, r1
 800828c:	731a      	strb	r2, [r3, #12]
    	    JoinParameters = mlmeReq.Req.Join;
 800828e:	4a36      	ldr	r2, [pc, #216]	; (8008368 <lorawan_driver_LORA_Join+0x110>)
 8008290:	187b      	adds	r3, r7, r1
 8008292:	3304      	adds	r3, #4
 8008294:	cb31      	ldmia	r3!, {r0, r4, r5}
 8008296:	c231      	stmia	r2!, {r0, r4, r5}

    	    LoRaMacStatus_t r = LoRaMacMlmeRequest( &mlmeReq );
 8008298:	2537      	movs	r5, #55	; 0x37
 800829a:	197c      	adds	r4, r7, r5
 800829c:	187b      	adds	r3, r7, r1
 800829e:	0018      	movs	r0, r3
 80082a0:	f007 f882 	bl	800f3a8 <LoRaMacMlmeRequest>
 80082a4:	0003      	movs	r3, r0
 80082a6:	7023      	strb	r3, [r4, #0]
			if ( r != LORAMAC_STATUS_OK ) {
 80082a8:	197b      	adds	r3, r7, r5
 80082aa:	781b      	ldrb	r3, [r3, #0]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d005      	beq.n	80082bc <lorawan_driver_LORA_Join+0x64>
				LOG_WARN_LORAWAN(("LoRaMacMlmeRequest return error(%d)\r\n",r));
				__loraWanState.joinState = LORAWAN_STATE_JOIN_FAILED;
 80082b0:	4b2a      	ldr	r3, [pc, #168]	; (800835c <lorawan_driver_LORA_Join+0x104>)
 80082b2:	2204      	movs	r2, #4
 80082b4:	701a      	strb	r2, [r3, #0]
				lorawan_driver_onJoinFailed();
 80082b6:	f013 fd4b 	bl	801bd50 <lorawan_driver_onJoinFailed>
			} else {
				__loraWanState.joinState = LORAWAN_STATE_JOINING;
			}
    	}
        break;
 80082ba:	e035      	b.n	8008328 <lorawan_driver_LORA_Join+0xd0>
				__loraWanState.joinState = LORAWAN_STATE_JOINING;
 80082bc:	4b27      	ldr	r3, [pc, #156]	; (800835c <lorawan_driver_LORA_Join+0x104>)
 80082be:	2202      	movs	r2, #2
 80082c0:	701a      	strb	r2, [r3, #0]
        break;
 80082c2:	e031      	b.n	8008328 <lorawan_driver_LORA_Join+0xd0>
    	{
			// Enable legacy mode to operate according to LoRaWAN Spec. 1.0.3
			Version_t abpLrWanVersion;
			MibRequestConfirm_t mibReq;

			abpLrWanVersion.Fields.Major    = 1;
 80082c4:	2120      	movs	r1, #32
 80082c6:	187b      	adds	r3, r7, r1
 80082c8:	2201      	movs	r2, #1
 80082ca:	70da      	strb	r2, [r3, #3]
			abpLrWanVersion.Fields.Minor    = 0;
 80082cc:	187b      	adds	r3, r7, r1
 80082ce:	2200      	movs	r2, #0
 80082d0:	709a      	strb	r2, [r3, #2]
			abpLrWanVersion.Fields.Revision = 3;
 80082d2:	187b      	adds	r3, r7, r1
 80082d4:	2203      	movs	r2, #3
 80082d6:	705a      	strb	r2, [r3, #1]
			abpLrWanVersion.Fields.Rfu      = 0;
 80082d8:	187b      	adds	r3, r7, r1
 80082da:	2200      	movs	r2, #0
 80082dc:	701a      	strb	r2, [r3, #0]

			mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 80082de:	2108      	movs	r1, #8
 80082e0:	187b      	adds	r3, r7, r1
 80082e2:	2230      	movs	r2, #48	; 0x30
 80082e4:	701a      	strb	r2, [r3, #0]
			mibReq.Param.AbpLrWanVersion = abpLrWanVersion;
 80082e6:	187b      	adds	r3, r7, r1
 80082e8:	6a3a      	ldr	r2, [r7, #32]
 80082ea:	605a      	str	r2, [r3, #4]
			LoRaMacMibSetRequestConfirm( &mibReq );
 80082ec:	187b      	adds	r3, r7, r1
 80082ee:	0018      	movs	r0, r3
 80082f0:	f006 fba2 	bl	800ea38 <LoRaMacMibSetRequestConfirm>
			__loraWanState.joinState = LORAWAN_STATE_JOIN_SUCCESS;
 80082f4:	4b19      	ldr	r3, [pc, #100]	; (800835c <lorawan_driver_LORA_Join+0x104>)
 80082f6:	2203      	movs	r2, #3
 80082f8:	701a      	strb	r2, [r3, #0]
			__loraWanState.joinTime = (uint32_t)(itsdk_time_get_ms()/1000);
 80082fa:	f014 fa1b 	bl	801c734 <itsdk_time_get_ms>
 80082fe:	22fa      	movs	r2, #250	; 0xfa
 8008300:	0092      	lsls	r2, r2, #2
 8008302:	2300      	movs	r3, #0
 8008304:	f7f8 f8e0 	bl	80004c8 <__aeabi_uldivmod>
 8008308:	0003      	movs	r3, r0
 800830a:	000c      	movs	r4, r1
 800830c:	001a      	movs	r2, r3
 800830e:	4b13      	ldr	r3, [pc, #76]	; (800835c <lorawan_driver_LORA_Join+0x104>)
 8008310:	605a      	str	r2, [r3, #4]


			lorawan_driver_onJoinSuccess();
 8008312:	f013 fd0d 	bl	801bd30 <lorawan_driver_onJoinSuccess>
    	}
        break;
 8008316:	e007      	b.n	8008328 <lorawan_driver_LORA_Join+0xd0>
    default:
		ITSDK_ERROR_REPORT(ITSDK_ERROR_LORAWAN_INVALID_JOIN,(uint16_t)__loraWanState.JoinType);
 8008318:	4b10      	ldr	r3, [pc, #64]	; (800835c <lorawan_driver_LORA_Join+0x104>)
 800831a:	7cdb      	ldrb	r3, [r3, #19]
 800831c:	b29b      	uxth	r3, r3
 800831e:	4a13      	ldr	r2, [pc, #76]	; (800836c <lorawan_driver_LORA_Join+0x114>)
 8008320:	0019      	movs	r1, r3
 8008322:	0010      	movs	r0, r2
 8008324:	f013 f89e 	bl	801b464 <itsdk_error_report>
    }

    if (runMode==LORAWAN_RUN_SYNC) {
 8008328:	1dfb      	adds	r3, r7, #7
 800832a:	781b      	ldrb	r3, [r3, #0]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d110      	bne.n	8008352 <lorawan_driver_LORA_Join+0xfa>
        // Go for synchronous
    	while(__loraWanState.joinState == LORAWAN_STATE_JOINING) {
 8008330:	e001      	b.n	8008336 <lorawan_driver_LORA_Join+0xde>
    		lorawan_driver_waitUntilEndOfExecution();
 8008332:	f7ff fd9f 	bl	8007e74 <lorawan_driver_waitUntilEndOfExecution>
    	while(__loraWanState.joinState == LORAWAN_STATE_JOINING) {
 8008336:	4b09      	ldr	r3, [pc, #36]	; (800835c <lorawan_driver_LORA_Join+0x104>)
 8008338:	781b      	ldrb	r3, [r3, #0]
 800833a:	b2db      	uxtb	r3, r3
 800833c:	2b02      	cmp	r3, #2
 800833e:	d0f8      	beq.n	8008332 <lorawan_driver_LORA_Join+0xda>
    	}
    	if ( __loraWanState.joinState == LORAWAN_STATE_JOIN_SUCCESS ) {
 8008340:	4b06      	ldr	r3, [pc, #24]	; (800835c <lorawan_driver_LORA_Join+0x104>)
 8008342:	781b      	ldrb	r3, [r3, #0]
 8008344:	b2db      	uxtb	r3, r3
 8008346:	2b03      	cmp	r3, #3
 8008348:	d101      	bne.n	800834e <lorawan_driver_LORA_Join+0xf6>
    		return LORAWAN_JOIN_SUCCESS;
 800834a:	2301      	movs	r3, #1
 800834c:	e002      	b.n	8008354 <lorawan_driver_LORA_Join+0xfc>
    	} else {
    		return LORAWAN_JOIN_FAILED;
 800834e:	2302      	movs	r3, #2
 8008350:	e000      	b.n	8008354 <lorawan_driver_LORA_Join+0xfc>
    	}
    } else {
    	return LORAWAN_JOIN_PENDING;
 8008352:	2300      	movs	r3, #0
    }

}
 8008354:	0018      	movs	r0, r3
 8008356:	46bd      	mov	sp, r7
 8008358:	b00e      	add	sp, #56	; 0x38
 800835a:	bdb0      	pop	{r4, r5, r7, pc}
 800835c:	20000330 	.word	0x20000330
 8008360:	20000344 	.word	0x20000344
 8008364:	2000034c 	.word	0x2000034c
 8008368:	20000378 	.word	0x20000378
 800836c:	d0000103 	.word	0xd0000103

08008370 <lorawan_driver_LORA_Send>:
		uint8_t					  retry,
		itsdk_lorawan_run_t 	  runMode,
		uint8_t					* rPort,				// for sync mode only - on reception - Port
		uint8_t					* rSize,				// for sync mode only - on reception - DataSize - contains maxSize on input
		uint8_t					* rData					// for sync mode only - on reception - Data (bcopied)
){
 8008370:	b5b0      	push	{r4, r5, r7, lr}
 8008372:	b08e      	sub	sp, #56	; 0x38
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
 8008378:	000c      	movs	r4, r1
 800837a:	0010      	movs	r0, r2
 800837c:	0019      	movs	r1, r3
 800837e:	1cfb      	adds	r3, r7, #3
 8008380:	1c22      	adds	r2, r4, #0
 8008382:	701a      	strb	r2, [r3, #0]
 8008384:	1cbb      	adds	r3, r7, #2
 8008386:	1c02      	adds	r2, r0, #0
 8008388:	701a      	strb	r2, [r3, #0]
 800838a:	1c7b      	adds	r3, r7, #1
 800838c:	1c0a      	adds	r2, r1, #0
 800838e:	701a      	strb	r2, [r3, #0]
	LOG_INFO_LORAWAN(("lorawan_driver_LORA_Send (mode:%d)\r\n",runMode));

    McpsReq_t mcpsReq;
    LoRaMacTxInfo_t txInfo;

    if (__loraWanState.joinState != LORAWAN_STATE_JOIN_SUCCESS ) return LORAWAN_SEND_NOT_JOINED;
 8008390:	4b83      	ldr	r3, [pc, #524]	; (80085a0 <lorawan_driver_LORA_Send+0x230>)
 8008392:	781b      	ldrb	r3, [r3, #0]
 8008394:	b2db      	uxtb	r3, r3
 8008396:	2b03      	cmp	r3, #3
 8008398:	d001      	beq.n	800839e <lorawan_driver_LORA_Send+0x2e>
 800839a:	2306      	movs	r3, #6
 800839c:	e0fc      	b.n	8008598 <lorawan_driver_LORA_Send+0x228>
    if (__loraWanState.sendState == LORAWAN_SEND_STATE_RUNNING ) return LORAWAN_SEND_ALREADYRUNNING;
 800839e:	4b80      	ldr	r3, [pc, #512]	; (80085a0 <lorawan_driver_LORA_Send+0x230>)
 80083a0:	785b      	ldrb	r3, [r3, #1]
 80083a2:	b2db      	uxtb	r3, r3
 80083a4:	2b01      	cmp	r3, #1
 80083a6:	d101      	bne.n	80083ac <lorawan_driver_LORA_Send+0x3c>
 80083a8:	2308      	movs	r3, #8
 80083aa:	e0f5      	b.n	8008598 <lorawan_driver_LORA_Send+0x228>

    /*if certification test are on going, application data is not sent*/
    if (certif_running() == true) {
 80083ac:	f7ff fafc 	bl	80079a8 <certif_running>
 80083b0:	1e03      	subs	r3, r0, #0
 80083b2:	d001      	beq.n	80083b8 <lorawan_driver_LORA_Send+0x48>
      return false;
 80083b4:	2300      	movs	r3, #0
 80083b6:	e0ef      	b.n	8008598 <lorawan_driver_LORA_Send+0x228>
    }

    // Update the Datarate information this is important to correctly calculate the max size of frame
    // for the LoRaMacQueryTxPossible function
    MibRequestConfirm_t set;
    set.Type = MIB_CHANNELS_DATARATE;
 80083b8:	2408      	movs	r4, #8
 80083ba:	193b      	adds	r3, r7, r4
 80083bc:	2228      	movs	r2, #40	; 0x28
 80083be:	701a      	strb	r2, [r3, #0]
    set.Param.ChannelsDatarate = __convertDR(dataRate);
 80083c0:	1c7b      	adds	r3, r7, #1
 80083c2:	781b      	ldrb	r3, [r3, #0]
 80083c4:	0018      	movs	r0, r3
 80083c6:	f7ff fdbb 	bl	8007f40 <__convertDR>
 80083ca:	0003      	movs	r3, r0
 80083cc:	b25a      	sxtb	r2, r3
 80083ce:	193b      	adds	r3, r7, r4
 80083d0:	711a      	strb	r2, [r3, #4]
    LoRaMacMibSetRequestConfirm(&set);
 80083d2:	193b      	adds	r3, r7, r4
 80083d4:	0018      	movs	r0, r3
 80083d6:	f006 fb2f 	bl	800ea38 <LoRaMacMibSetRequestConfirm>

    // Verify if a command can be proceed by the MAC Layer
    if( LoRaMacQueryTxPossible( size, &txInfo ) != LORAMAC_STATUS_OK ) {
 80083da:	2320      	movs	r3, #32
 80083dc:	18fa      	adds	r2, r7, r3
 80083de:	1cfb      	adds	r3, r7, #3
 80083e0:	781b      	ldrb	r3, [r3, #0]
 80083e2:	0011      	movs	r1, r2
 80083e4:	0018      	movs	r0, r3
 80083e6:	f006 f921 	bl	800e62c <LoRaMacQueryTxPossible>
 80083ea:	1e03      	subs	r3, r0, #0
 80083ec:	d013      	beq.n	8008416 <lorawan_driver_LORA_Send+0xa6>
        // Send empty frame in order to flush MAC commands
        mcpsReq.Type = MCPS_UNCONFIRMED;
 80083ee:	2424      	movs	r4, #36	; 0x24
 80083f0:	193b      	adds	r3, r7, r4
 80083f2:	2200      	movs	r2, #0
 80083f4:	701a      	strb	r2, [r3, #0]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 80083f6:	193b      	adds	r3, r7, r4
 80083f8:	2200      	movs	r2, #0
 80083fa:	609a      	str	r2, [r3, #8]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 80083fc:	193b      	adds	r3, r7, r4
 80083fe:	2200      	movs	r2, #0
 8008400:	819a      	strh	r2, [r3, #12]
        mcpsReq.Req.Unconfirmed.Datarate = __convertDR(dataRate);
 8008402:	1c7b      	adds	r3, r7, #1
 8008404:	781b      	ldrb	r3, [r3, #0]
 8008406:	0018      	movs	r0, r3
 8008408:	f7ff fd9a 	bl	8007f40 <__convertDR>
 800840c:	0003      	movs	r3, r0
 800840e:	b25a      	sxtb	r2, r3
 8008410:	193b      	adds	r3, r7, r4
 8008412:	739a      	strb	r2, [r3, #14]
 8008414:	e03f      	b.n	8008496 <lorawan_driver_LORA_Send+0x126>
        // @TODO here we do not send the expected payload so we may have a callback to notice this
		#warning "Manage the Flush MAC case"
    } else {
    	__loraWanState.lastRetries = 0;
 8008416:	4b62      	ldr	r3, [pc, #392]	; (80085a0 <lorawan_driver_LORA_Send+0x230>)
 8008418:	2200      	movs	r2, #0
 800841a:	745a      	strb	r2, [r3, #17]
    	// Ok To proceed
        if( isTxConfirmed == LORAWAN_SEND_UNCONFIRMED )
 800841c:	2348      	movs	r3, #72	; 0x48
 800841e:	18fb      	adds	r3, r7, r3
 8008420:	781b      	ldrb	r3, [r3, #0]
 8008422:	2b01      	cmp	r3, #1
 8008424:	d119      	bne.n	800845a <lorawan_driver_LORA_Send+0xea>
        {
            mcpsReq.Type = MCPS_UNCONFIRMED;
 8008426:	2424      	movs	r4, #36	; 0x24
 8008428:	193b      	adds	r3, r7, r4
 800842a:	2200      	movs	r2, #0
 800842c:	701a      	strb	r2, [r3, #0]
            mcpsReq.Req.Unconfirmed.fPort = port;
 800842e:	193b      	adds	r3, r7, r4
 8008430:	1cba      	adds	r2, r7, #2
 8008432:	7812      	ldrb	r2, [r2, #0]
 8008434:	711a      	strb	r2, [r3, #4]
            mcpsReq.Req.Unconfirmed.fBufferSize = size;
 8008436:	1cfb      	adds	r3, r7, #3
 8008438:	781b      	ldrb	r3, [r3, #0]
 800843a:	b29a      	uxth	r2, r3
 800843c:	193b      	adds	r3, r7, r4
 800843e:	819a      	strh	r2, [r3, #12]
            mcpsReq.Req.Unconfirmed.fBuffer = payload;
 8008440:	193b      	adds	r3, r7, r4
 8008442:	687a      	ldr	r2, [r7, #4]
 8008444:	609a      	str	r2, [r3, #8]
            mcpsReq.Req.Unconfirmed.Datarate = __convertDR(dataRate);
 8008446:	1c7b      	adds	r3, r7, #1
 8008448:	781b      	ldrb	r3, [r3, #0]
 800844a:	0018      	movs	r0, r3
 800844c:	f7ff fd78 	bl	8007f40 <__convertDR>
 8008450:	0003      	movs	r3, r0
 8008452:	b25a      	sxtb	r2, r3
 8008454:	193b      	adds	r3, r7, r4
 8008456:	739a      	strb	r2, [r3, #14]
 8008458:	e01d      	b.n	8008496 <lorawan_driver_LORA_Send+0x126>
        }
        else
        {
        	mcpsReq.Type = MCPS_CONFIRMED;
 800845a:	2424      	movs	r4, #36	; 0x24
 800845c:	193b      	adds	r3, r7, r4
 800845e:	2201      	movs	r2, #1
 8008460:	701a      	strb	r2, [r3, #0]
            mcpsReq.Req.Confirmed.fPort = port;
 8008462:	193b      	adds	r3, r7, r4
 8008464:	1cba      	adds	r2, r7, #2
 8008466:	7812      	ldrb	r2, [r2, #0]
 8008468:	711a      	strb	r2, [r3, #4]
            mcpsReq.Req.Confirmed.fBufferSize = size;
 800846a:	1cfb      	adds	r3, r7, #3
 800846c:	781b      	ldrb	r3, [r3, #0]
 800846e:	b29a      	uxth	r2, r3
 8008470:	193b      	adds	r3, r7, r4
 8008472:	819a      	strh	r2, [r3, #12]
            mcpsReq.Req.Confirmed.fBuffer = payload;
 8008474:	193b      	adds	r3, r7, r4
 8008476:	687a      	ldr	r2, [r7, #4]
 8008478:	609a      	str	r2, [r3, #8]
            mcpsReq.Req.Confirmed.NbTrials = retry;
 800847a:	193b      	adds	r3, r7, r4
 800847c:	224c      	movs	r2, #76	; 0x4c
 800847e:	18ba      	adds	r2, r7, r2
 8008480:	7812      	ldrb	r2, [r2, #0]
 8008482:	73da      	strb	r2, [r3, #15]
            mcpsReq.Req.Confirmed.Datarate = __convertDR(dataRate);
 8008484:	1c7b      	adds	r3, r7, #1
 8008486:	781b      	ldrb	r3, [r3, #0]
 8008488:	0018      	movs	r0, r3
 800848a:	f7ff fd59 	bl	8007f40 <__convertDR>
 800848e:	0003      	movs	r3, r0
 8008490:	b25a      	sxtb	r2, r3
 8008492:	193b      	adds	r3, r7, r4
 8008494:	739a      	strb	r2, [r3, #14]
        }
    }
    __loraWanState.sendState = LORAWAN_SEND_STATE_RUNNING;
 8008496:	4b42      	ldr	r3, [pc, #264]	; (80085a0 <lorawan_driver_LORA_Send+0x230>)
 8008498:	2201      	movs	r2, #1
 800849a:	705a      	strb	r2, [r3, #1]
    LoRaMacStatus_t r = LoRaMacMcpsRequest( &mcpsReq );
 800849c:	2537      	movs	r5, #55	; 0x37
 800849e:	197c      	adds	r4, r7, r5
 80084a0:	2324      	movs	r3, #36	; 0x24
 80084a2:	18fb      	adds	r3, r7, r3
 80084a4:	0018      	movs	r0, r3
 80084a6:	f007 f8f1 	bl	800f68c <LoRaMacMcpsRequest>
 80084aa:	0003      	movs	r3, r0
 80084ac:	7023      	strb	r3, [r4, #0]
    switch ( r ) {
 80084ae:	197b      	adds	r3, r7, r5
 80084b0:	781b      	ldrb	r3, [r3, #0]
 80084b2:	2b07      	cmp	r3, #7
 80084b4:	d100      	bne.n	80084b8 <lorawan_driver_LORA_Send+0x148>
 80084b6:	e066      	b.n	8008586 <lorawan_driver_LORA_Send+0x216>
 80084b8:	2b0b      	cmp	r3, #11
 80084ba:	d05f      	beq.n	800857c <lorawan_driver_LORA_Send+0x20c>
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d000      	beq.n	80084c2 <lorawan_driver_LORA_Send+0x152>
 80084c0:	e066      	b.n	8008590 <lorawan_driver_LORA_Send+0x220>
    	case LORAMAC_STATUS_OK:
    		if ( runMode==LORAWAN_RUN_SYNC ) {
 80084c2:	2350      	movs	r3, #80	; 0x50
 80084c4:	18fb      	adds	r3, r7, r3
 80084c6:	781b      	ldrb	r3, [r3, #0]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d155      	bne.n	8008578 <lorawan_driver_LORA_Send+0x208>
    	    	while(  __loraWanState.sendState == LORAWAN_SEND_STATE_RUNNING ) {
 80084cc:	e001      	b.n	80084d2 <lorawan_driver_LORA_Send+0x162>
    	    		lorawan_driver_waitUntilEndOfExecution();
 80084ce:	f7ff fcd1 	bl	8007e74 <lorawan_driver_waitUntilEndOfExecution>
    	    	while(  __loraWanState.sendState == LORAWAN_SEND_STATE_RUNNING ) {
 80084d2:	4b33      	ldr	r3, [pc, #204]	; (80085a0 <lorawan_driver_LORA_Send+0x230>)
 80084d4:	785b      	ldrb	r3, [r3, #1]
 80084d6:	b2db      	uxtb	r3, r3
 80084d8:	2b01      	cmp	r3, #1
 80084da:	d0f8      	beq.n	80084ce <lorawan_driver_LORA_Send+0x15e>
    	    	}
    	    	switch(__loraWanState.sendState) {
 80084dc:	4b30      	ldr	r3, [pc, #192]	; (80085a0 <lorawan_driver_LORA_Send+0x230>)
 80084de:	785b      	ldrb	r3, [r3, #1]
 80084e0:	b2db      	uxtb	r3, r3
 80084e2:	2b07      	cmp	r3, #7
 80084e4:	d846      	bhi.n	8008574 <lorawan_driver_LORA_Send+0x204>
 80084e6:	009a      	lsls	r2, r3, #2
 80084e8:	4b2e      	ldr	r3, [pc, #184]	; (80085a4 <lorawan_driver_LORA_Send+0x234>)
 80084ea:	18d3      	adds	r3, r2, r3
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	469f      	mov	pc, r3
    	    	case LORAWAN_SEND_STATE_SENT:
    	    		return LORAWAN_SEND_SENT;
 80084f0:	2301      	movs	r3, #1
 80084f2:	e051      	b.n	8008598 <lorawan_driver_LORA_Send+0x228>
    	    	case LORAWAN_SEND_STATE_ACKED_WITH_DOWNLINK:
    	    	case LORAWAN_SEND_STATE_ACKED_DOWNLINK_PENDING:
    	    		if ( rData != NULL && rPort != NULL && rSize != NULL) {
 80084f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d02f      	beq.n	800855a <lorawan_driver_LORA_Send+0x1ea>
 80084fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d02c      	beq.n	800855a <lorawan_driver_LORA_Send+0x1ea>
 8008500:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008502:	2b00      	cmp	r3, #0
 8008504:	d029      	beq.n	800855a <lorawan_driver_LORA_Send+0x1ea>
						*rPort = __lorawan_driver_lastDownlink.port;
 8008506:	4b28      	ldr	r3, [pc, #160]	; (80085a8 <lorawan_driver_LORA_Send+0x238>)
 8008508:	781a      	ldrb	r2, [r3, #0]
 800850a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800850c:	701a      	strb	r2, [r3, #0]
						if ( *rSize >= __lorawan_driver_lastDownlink.size) {
 800850e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008510:	781a      	ldrb	r2, [r3, #0]
 8008512:	4b25      	ldr	r3, [pc, #148]	; (80085a8 <lorawan_driver_LORA_Send+0x238>)
 8008514:	785b      	ldrb	r3, [r3, #1]
 8008516:	429a      	cmp	r2, r3
 8008518:	d313      	bcc.n	8008542 <lorawan_driver_LORA_Send+0x1d2>
							*rSize = __lorawan_driver_lastDownlink.size;
 800851a:	4b23      	ldr	r3, [pc, #140]	; (80085a8 <lorawan_driver_LORA_Send+0x238>)
 800851c:	785a      	ldrb	r2, [r3, #1]
 800851e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008520:	701a      	strb	r2, [r3, #0]
							bcopy(
								__lorawan_driver_lastDownlink.data,
								rData,
								((ITSDK_LORAWAN_MAX_DWNLNKSZ<__lorawan_driver_lastDownlink.size)?ITSDK_LORAWAN_MAX_DWNLNKSZ:__lorawan_driver_lastDownlink.size)
 8008522:	4b21      	ldr	r3, [pc, #132]	; (80085a8 <lorawan_driver_LORA_Send+0x238>)
 8008524:	785b      	ldrb	r3, [r3, #1]
 8008526:	1c1a      	adds	r2, r3, #0
 8008528:	b2d3      	uxtb	r3, r2
 800852a:	2b20      	cmp	r3, #32
 800852c:	d901      	bls.n	8008532 <lorawan_driver_LORA_Send+0x1c2>
 800852e:	2320      	movs	r3, #32
 8008530:	1c1a      	adds	r2, r3, #0
 8008532:	b2d3      	uxtb	r3, r2
							bcopy(
 8008534:	001a      	movs	r2, r3
 8008536:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8008538:	4b1c      	ldr	r3, [pc, #112]	; (80085ac <lorawan_driver_LORA_Send+0x23c>)
 800853a:	0018      	movs	r0, r3
 800853c:	f015 fe1b 	bl	801e176 <bcopy>
 8008540:	e00b      	b.n	800855a <lorawan_driver_LORA_Send+0x1ea>
							);
						} else {
							bcopy(
								__lorawan_driver_lastDownlink.data,
								rData,
								*rSize
 8008542:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008544:	781b      	ldrb	r3, [r3, #0]
							bcopy(
 8008546:	001a      	movs	r2, r3
 8008548:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800854a:	4b18      	ldr	r3, [pc, #96]	; (80085ac <lorawan_driver_LORA_Send+0x23c>)
 800854c:	0018      	movs	r0, r3
 800854e:	f015 fe12 	bl	801e176 <bcopy>
							);
							*rSize = __lorawan_driver_lastDownlink.size;
 8008552:	4b15      	ldr	r3, [pc, #84]	; (80085a8 <lorawan_driver_LORA_Send+0x238>)
 8008554:	785a      	ldrb	r2, [r3, #1]
 8008556:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008558:	701a      	strb	r2, [r3, #0]
						}
    	    		} else {
    	    			LOG_WARN_LORAWAN(("[LoRaWan] Receiving downlink but can't return it\r\n"));
    	    		}
    	    		return (__loraWanState.sendState ==LORAWAN_SEND_STATE_ACKED_WITH_DOWNLINK)?LORAWAN_SEND_ACKED_WITH_DOWNLINK:LORAWAN_SEND_ACKED_WITH_DOWNLINK_PENDING;
 800855a:	4b11      	ldr	r3, [pc, #68]	; (80085a0 <lorawan_driver_LORA_Send+0x230>)
 800855c:	785b      	ldrb	r3, [r3, #1]
 800855e:	b2db      	uxtb	r3, r3
 8008560:	2b05      	cmp	r3, #5
 8008562:	d101      	bne.n	8008568 <lorawan_driver_LORA_Send+0x1f8>
 8008564:	2303      	movs	r3, #3
 8008566:	e017      	b.n	8008598 <lorawan_driver_LORA_Send+0x228>
 8008568:	2304      	movs	r3, #4
 800856a:	e015      	b.n	8008598 <lorawan_driver_LORA_Send+0x228>
    	    	case LORAWAN_SEND_STATE_ACKED_NO_DOWNLINK:
    	    		return LORAWAN_SEND_ACKED;
 800856c:	2302      	movs	r3, #2
 800856e:	e013      	b.n	8008598 <lorawan_driver_LORA_Send+0x228>
    	    	case LORAWAN_SEND_STATE_NOTACKED:
    	    		return LORAWAN_SEND_SENT;
 8008570:	2301      	movs	r3, #1
 8008572:	e011      	b.n	8008598 <lorawan_driver_LORA_Send+0x228>
    	    	default:
    	    		LOG_INFO_LORAWAN(("Abnormal state : %d\r\n",__loraWanState.sendState));
    	    		return LORAWAN_SEND_FAILED;
 8008574:	2309      	movs	r3, #9
 8008576:	e00f      	b.n	8008598 <lorawan_driver_LORA_Send+0x228>
    	    	}
   	    		return LORAWAN_SEND_FAILED;	// Never reached
    		} else {
    			return LORAWAN_SEND_RUNNING;
 8008578:	2305      	movs	r3, #5
 800857a:	e00d      	b.n	8008598 <lorawan_driver_LORA_Send+0x228>
    		}
    	case LORAMAC_STATUS_DUTYCYCLE_RESTRICTED:
    		__loraWanState.sendState = LORAWAN_SEND_STATE_DUTYCYCLE;
 800857c:	4b08      	ldr	r3, [pc, #32]	; (80085a0 <lorawan_driver_LORA_Send+0x230>)
 800857e:	2209      	movs	r2, #9
 8008580:	705a      	strb	r2, [r3, #1]
    		return LORAWAN_SEND_DUTYCYCLE;
 8008582:	2307      	movs	r3, #7
 8008584:	e008      	b.n	8008598 <lorawan_driver_LORA_Send+0x228>
    	case LORAMAC_STATUS_NO_NETWORK_JOINED:
    		__loraWanState.sendState = LORAWAN_SEND_STATE_FAILED;
 8008586:	4b06      	ldr	r3, [pc, #24]	; (80085a0 <lorawan_driver_LORA_Send+0x230>)
 8008588:	2208      	movs	r2, #8
 800858a:	705a      	strb	r2, [r3, #1]
    		return LORAWAN_SEND_NOT_JOINED;
 800858c:	2306      	movs	r3, #6
 800858e:	e003      	b.n	8008598 <lorawan_driver_LORA_Send+0x228>
    	default:
    		__loraWanState.sendState = LORAWAN_SEND_STATE_FAILED;
 8008590:	4b03      	ldr	r3, [pc, #12]	; (80085a0 <lorawan_driver_LORA_Send+0x230>)
 8008592:	2208      	movs	r2, #8
 8008594:	705a      	strb	r2, [r3, #1]
    		LOG_WARN_LORAWAN(("[LoRaWan] can't send err(%d)\r\n",r));
    		return LORAWAN_SEND_FAILED;
 8008596:	2309      	movs	r3, #9
    }

}
 8008598:	0018      	movs	r0, r3
 800859a:	46bd      	mov	sp, r7
 800859c:	b00e      	add	sp, #56	; 0x38
 800859e:	bdb0      	pop	{r4, r5, r7, pc}
 80085a0:	20000330 	.word	0x20000330
 80085a4:	0802056c 	.word	0x0802056c
 80085a8:	20000354 	.word	0x20000354
 80085ac:	20000356 	.word	0x20000356

080085b0 <lorawan_driver_LORA_AddChannel>:
		uint32_t 	frequency,
		uint32_t	rx1Frequency,
		uint8_t		minDataRate,
		uint8_t		maxDataRate,
		uint8_t		band
){
 80085b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80085b2:	b089      	sub	sp, #36	; 0x24
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	60b9      	str	r1, [r7, #8]
 80085b8:	607a      	str	r2, [r7, #4]
 80085ba:	0019      	movs	r1, r3
 80085bc:	260f      	movs	r6, #15
 80085be:	19bb      	adds	r3, r7, r6
 80085c0:	1c02      	adds	r2, r0, #0
 80085c2:	701a      	strb	r2, [r3, #0]
 80085c4:	200e      	movs	r0, #14
 80085c6:	183b      	adds	r3, r7, r0
 80085c8:	1c0a      	adds	r2, r1, #0
 80085ca:	701a      	strb	r2, [r3, #0]
	LOG_INFO_LORAWAN(("lorawan_driver_LORA_AddChannel (%d)\r\n",channelId));

	ChannelParams_t params;
	params.Frequency=frequency;
 80085cc:	2410      	movs	r4, #16
 80085ce:	193b      	adds	r3, r7, r4
 80085d0:	68ba      	ldr	r2, [r7, #8]
 80085d2:	601a      	str	r2, [r3, #0]
	params.Rx1Frequency=rx1Frequency;
 80085d4:	193b      	adds	r3, r7, r4
 80085d6:	687a      	ldr	r2, [r7, #4]
 80085d8:	605a      	str	r2, [r3, #4]
	params.Band=band;					// Sounds like this parameter is completed during initialization
 80085da:	193b      	adds	r3, r7, r4
 80085dc:	2234      	movs	r2, #52	; 0x34
 80085de:	2108      	movs	r1, #8
 80085e0:	468c      	mov	ip, r1
 80085e2:	44bc      	add	ip, r7
 80085e4:	4462      	add	r2, ip
 80085e6:	7812      	ldrb	r2, [r2, #0]
 80085e8:	725a      	strb	r2, [r3, #9]
										// Band definitions are in the different RegionXXMMM.h file
										// This entry is the index in the band definition
	params.DrRange.Fields.Min=__convertDR(minDataRate);
 80085ea:	183b      	adds	r3, r7, r0
 80085ec:	781b      	ldrb	r3, [r3, #0]
 80085ee:	0018      	movs	r0, r3
 80085f0:	f7ff fca6 	bl	8007f40 <__convertDR>
 80085f4:	0003      	movs	r3, r0
 80085f6:	011b      	lsls	r3, r3, #4
 80085f8:	b25b      	sxtb	r3, r3
 80085fa:	111b      	asrs	r3, r3, #4
 80085fc:	b25a      	sxtb	r2, r3
 80085fe:	193b      	adds	r3, r7, r4
 8008600:	1c11      	adds	r1, r2, #0
 8008602:	220f      	movs	r2, #15
 8008604:	0008      	movs	r0, r1
 8008606:	4010      	ands	r0, r2
 8008608:	7a1a      	ldrb	r2, [r3, #8]
 800860a:	210f      	movs	r1, #15
 800860c:	438a      	bics	r2, r1
 800860e:	1c11      	adds	r1, r2, #0
 8008610:	1c02      	adds	r2, r0, #0
 8008612:	430a      	orrs	r2, r1
 8008614:	721a      	strb	r2, [r3, #8]
	params.DrRange.Fields.Max=__convertDR(maxDataRate);
 8008616:	2330      	movs	r3, #48	; 0x30
 8008618:	2208      	movs	r2, #8
 800861a:	4694      	mov	ip, r2
 800861c:	44bc      	add	ip, r7
 800861e:	4463      	add	r3, ip
 8008620:	781b      	ldrb	r3, [r3, #0]
 8008622:	0018      	movs	r0, r3
 8008624:	f7ff fc8c 	bl	8007f40 <__convertDR>
 8008628:	0003      	movs	r3, r0
 800862a:	011b      	lsls	r3, r3, #4
 800862c:	b25b      	sxtb	r3, r3
 800862e:	111b      	asrs	r3, r3, #4
 8008630:	b25a      	sxtb	r2, r3
 8008632:	0025      	movs	r5, r4
 8008634:	193b      	adds	r3, r7, r4
 8008636:	0110      	lsls	r0, r2, #4
 8008638:	7a1a      	ldrb	r2, [r3, #8]
 800863a:	210f      	movs	r1, #15
 800863c:	400a      	ands	r2, r1
 800863e:	1c11      	adds	r1, r2, #0
 8008640:	1c02      	adds	r2, r0, #0
 8008642:	430a      	orrs	r2, r1
 8008644:	721a      	strb	r2, [r3, #8]

	LoRaMacStatus_t r = LoRaMacChannelAdd(channelId, params);
 8008646:	231f      	movs	r3, #31
 8008648:	18fc      	adds	r4, r7, r3
 800864a:	197b      	adds	r3, r7, r5
 800864c:	19ba      	adds	r2, r7, r6
 800864e:	7810      	ldrb	r0, [r2, #0]
 8008650:	6819      	ldr	r1, [r3, #0]
 8008652:	685a      	ldr	r2, [r3, #4]
 8008654:	689b      	ldr	r3, [r3, #8]
 8008656:	f006 fe6f 	bl	800f338 <LoRaMacChannelAdd>
 800865a:	0003      	movs	r3, r0
 800865c:	7023      	strb	r3, [r4, #0]
	switch ( r ) {
 800865e:	231f      	movs	r3, #31
 8008660:	18fb      	adds	r3, r7, r3
 8008662:	781b      	ldrb	r3, [r3, #0]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d004      	beq.n	8008672 <lorawan_driver_LORA_AddChannel+0xc2>
 8008668:	db07      	blt.n	800867a <lorawan_driver_LORA_AddChannel+0xca>
 800866a:	3b03      	subs	r3, #3
 800866c:	2b03      	cmp	r3, #3
 800866e:	d804      	bhi.n	800867a <lorawan_driver_LORA_AddChannel+0xca>
 8008670:	e001      	b.n	8008676 <lorawan_driver_LORA_AddChannel+0xc6>
		case LORAMAC_STATUS_OK:
			return LORAWAN_CHANNEL_SUCCESS;
 8008672:	2300      	movs	r3, #0
 8008674:	e002      	b.n	800867c <lorawan_driver_LORA_AddChannel+0xcc>
		case LORAMAC_STATUS_PARAMETER_INVALID:
		case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
		case LORAMAC_STATUS_DATARATE_INVALID:
		case LORAMAC_STATUS_FREQUENCY_INVALID:
			LOG_WARN_LORAWAN(("[LoRaWan] Invalid channel configuration (%d)\r\n",r));
			return LORAWAN_CHANNEL_INVALID_PARAMS;
 8008676:	2301      	movs	r3, #1
 8008678:	e000      	b.n	800867c <lorawan_driver_LORA_AddChannel+0xcc>
		default:
			LOG_WARN_LORAWAN(("[LoRaWan] Channel configuration error (%d)\r\n",r));
			return LORAWAN_CHANNEL_FAILED;
 800867a:	2302      	movs	r3, #2
	}
}
 800867c:	0018      	movs	r0, r3
 800867e:	46bd      	mov	sp, r7
 8008680:	b009      	add	sp, #36	; 0x24
 8008682:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008684 <lorawan_driver_LORA_SelectChannels>:
 * Change channel mask to enable only the one we need
 * The channels parameter is a table containing x time 16b corresponding
 * to the possible channels
 * for US915 as an example we have 6 entries of 16b in the tab for the 72 possible channels
 */
itsdk_lorawan_channel_t lorawan_driver_LORA_SelectChannels(uint16_t region, uint16_t * channels ){
 8008684:	b580      	push	{r7, lr}
 8008686:	b084      	sub	sp, #16
 8008688:	af00      	add	r7, sp, #0
 800868a:	0002      	movs	r2, r0
 800868c:	6039      	str	r1, [r7, #0]
 800868e:	1dbb      	adds	r3, r7, #6
 8008690:	801a      	strh	r2, [r3, #0]
	LOG_INFO_LORAWAN(("lorawan_driver_LORA_SelectChannels (%d)\r\n",region));
	ChanMaskSetParams_t chanMaskSet;
	chanMaskSet.ChannelsMaskType = CHANNELS_REINIT_MASK;
 8008692:	2108      	movs	r1, #8
 8008694:	187b      	adds	r3, r7, r1
 8008696:	2202      	movs	r2, #2
 8008698:	711a      	strb	r2, [r3, #4]
	chanMaskSet.ChannelsMaskIn = channels;
 800869a:	187b      	adds	r3, r7, r1
 800869c:	683a      	ldr	r2, [r7, #0]
 800869e:	601a      	str	r2, [r3, #0]
	switch ( region ) {
 80086a0:	1dbb      	adds	r3, r7, #6
 80086a2:	881a      	ldrh	r2, [r3, #0]
 80086a4:	2380      	movs	r3, #128	; 0x80
 80086a6:	005b      	lsls	r3, r3, #1
 80086a8:	429a      	cmp	r2, r3
 80086aa:	d000      	beq.n	80086ae <lorawan_driver_LORA_SelectChannels+0x2a>
		if ( RegionChanMaskSet(LORAMAC_REGION_US915,&chanMaskSet) ) {
			return LORAWAN_CHANNEL_SUCCESS;
		}
		break;
	default:
		break;
 80086ac:	e00a      	b.n	80086c4 <lorawan_driver_LORA_SelectChannels+0x40>
		if ( RegionChanMaskSet(LORAMAC_REGION_US915,&chanMaskSet) ) {
 80086ae:	2308      	movs	r3, #8
 80086b0:	18fb      	adds	r3, r7, r3
 80086b2:	0019      	movs	r1, r3
 80086b4:	2008      	movs	r0, #8
 80086b6:	f00a faef 	bl	8012c98 <RegionChanMaskSet>
 80086ba:	1e03      	subs	r3, r0, #0
 80086bc:	d001      	beq.n	80086c2 <lorawan_driver_LORA_SelectChannels+0x3e>
			return LORAWAN_CHANNEL_SUCCESS;
 80086be:	2300      	movs	r3, #0
 80086c0:	e001      	b.n	80086c6 <lorawan_driver_LORA_SelectChannels+0x42>
		break;
 80086c2:	46c0      	nop			; (mov r8, r8)
	}
	LOG_WARN_LORAWAN(("[LoRaWan] Channel configuration error\r\n"));
	return LORAWAN_CHANNEL_FAILED;
 80086c4:	2302      	movs	r3, #2
}
 80086c6:	0018      	movs	r0, r3
 80086c8:	46bd      	mov	sp, r7
 80086ca:	b004      	add	sp, #16
 80086cc:	bd80      	pop	{r7, pc}
	...

080086d0 <lorawan_driver_LORA_getJoinState>:

/**
 * Return the current JoinState - use to follow the async join procedure
 * if used in polling mode
 */
lorawan_driver_joinState lorawan_driver_LORA_getJoinState(){
 80086d0:	b580      	push	{r7, lr}
 80086d2:	af00      	add	r7, sp, #0
	LOG_DEBUG_LORAWAN(("lorawan_driver_LORA_getJoinState\r\n"));
	return __loraWanState.joinState;
 80086d4:	4b02      	ldr	r3, [pc, #8]	; (80086e0 <lorawan_driver_LORA_getJoinState+0x10>)
 80086d6:	781b      	ldrb	r3, [r3, #0]
 80086d8:	b2db      	uxtb	r3, r3
}
 80086da:	0018      	movs	r0, r3
 80086dc:	46bd      	mov	sp, r7
 80086de:	bd80      	pop	{r7, pc}
 80086e0:	20000330 	.word	0x20000330

080086e4 <McpsConfirm>:
// MCPS ( TX & RX Operations ) LAYER
// =============================================================================================


static void McpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b082      	sub	sp, #8
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]

    TVL2( PRINTNOW(); PRINTF("APP> McpsConfirm STATUS: %s\r\n", EventInfoStatusStrings[mcpsConfirm->Status] ); )

	switch (mcpsConfirm->Status){
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	785b      	ldrb	r3, [r3, #1]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d002      	beq.n	80086fa <McpsConfirm+0x16>
 80086f4:	2b04      	cmp	r3, #4
 80086f6:	d028      	beq.n	800874a <McpsConfirm+0x66>
 80086f8:	e02f      	b.n	800875a <McpsConfirm+0x76>
	case LORAMAC_EVENT_INFO_STATUS_OK:
        switch( mcpsConfirm->McpsRequest )
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	781b      	ldrb	r3, [r3, #0]
 80086fe:	2b01      	cmp	r3, #1
 8008700:	d009      	beq.n	8008716 <McpsConfirm+0x32>
 8008702:	2b03      	cmp	r3, #3
 8008704:	d018      	beq.n	8008738 <McpsConfirm+0x54>
 8008706:	2b00      	cmp	r3, #0
 8008708:	d11a      	bne.n	8008740 <McpsConfirm+0x5c>
        {
            case MCPS_UNCONFIRMED:
            {
                // Check Datarate
                // Check TxPower
            	__loraWanState.sendState = LORAWAN_SEND_STATE_SENT;
 800870a:	4b1c      	ldr	r3, [pc, #112]	; (800877c <McpsConfirm+0x98>)
 800870c:	2202      	movs	r2, #2
 800870e:	705a      	strb	r2, [r3, #1]
            	lorawan_driver_onSendSuccess();
 8008710:	f013 fba6 	bl	801be60 <lorawan_driver_onSendSuccess>
                break;
 8008714:	e018      	b.n	8008748 <McpsConfirm+0x64>
            case MCPS_CONFIRMED:
            {
                // Check Datarate
                // Check TxPower
                // Check AckReceived
            	if(mcpsConfirm->AckReceived){
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	791b      	ldrb	r3, [r3, #4]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d004      	beq.n	8008728 <McpsConfirm+0x44>
            		// There are two type of ACK : w & w/o downlink, we will set the status later in the MLME layer
                	//__loraWanState.sendState = LORAWAN_SEND_STATE_ACKED;
                	lorawan_driver_onSendSuccess();
 800871e:	f013 fb9f 	bl	801be60 <lorawan_driver_onSendSuccess>
                	lorawan_driver_onSendAckSuccess();
 8008722:	f013 fb8b 	bl	801be3c <lorawan_driver_onSendAckSuccess>
                	__loraWanState.sendState = LORAWAN_SEND_STATE_NOTACKED;
                	lorawan_driver_onSendSuccess();
                	lorawan_driver_onSendSuccessAckFailed();
            	}
                // Check NbTrials
                break;
 8008726:	e00f      	b.n	8008748 <McpsConfirm+0x64>
                	__loraWanState.sendState = LORAWAN_SEND_STATE_NOTACKED;
 8008728:	4b14      	ldr	r3, [pc, #80]	; (800877c <McpsConfirm+0x98>)
 800872a:	2207      	movs	r2, #7
 800872c:	705a      	strb	r2, [r3, #1]
                	lorawan_driver_onSendSuccess();
 800872e:	f013 fb97 	bl	801be60 <lorawan_driver_onSendSuccess>
                	lorawan_driver_onSendSuccessAckFailed();
 8008732:	f013 fb71 	bl	801be18 <lorawan_driver_onSendSuccessAckFailed>
                break;
 8008736:	e007      	b.n	8008748 <McpsConfirm+0x64>
            }
            case MCPS_PROPRIETARY:
            {
            	__loraWanState.sendState = LORAWAN_SEND_STATE_NONE;
 8008738:	4b10      	ldr	r3, [pc, #64]	; (800877c <McpsConfirm+0x98>)
 800873a:	2200      	movs	r2, #0
 800873c:	705a      	strb	r2, [r3, #1]
            	break;
 800873e:	e003      	b.n	8008748 <McpsConfirm+0x64>
            }
            default:
            	__loraWanState.sendState = LORAWAN_SEND_STATE_FAILED;
 8008740:	4b0e      	ldr	r3, [pc, #56]	; (800877c <McpsConfirm+0x98>)
 8008742:	2208      	movs	r2, #8
 8008744:	705a      	strb	r2, [r3, #1]
                break;
 8008746:	46c0      	nop			; (mov r8, r8)
        }
        break;
 8008748:	e00a      	b.n	8008760 <McpsConfirm+0x7c>
    case LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT:
    	__loraWanState.sendState = LORAWAN_SEND_STATE_NOTACKED;
 800874a:	4b0c      	ldr	r3, [pc, #48]	; (800877c <McpsConfirm+0x98>)
 800874c:	2207      	movs	r2, #7
 800874e:	705a      	strb	r2, [r3, #1]
    	lorawan_driver_onSendSuccess();
 8008750:	f013 fb86 	bl	801be60 <lorawan_driver_onSendSuccess>
    	lorawan_driver_onSendSuccessAckFailed();
 8008754:	f013 fb60 	bl	801be18 <lorawan_driver_onSendSuccessAckFailed>
    	break;
 8008758:	e002      	b.n	8008760 <McpsConfirm+0x7c>
    default:
    	LOG_WARN_LORAWAN(("[LoRaWan] MCPSc returns(%d)\r\n",mcpsConfirm->Status));
    	__loraWanState.sendState = LORAWAN_SEND_STATE_FAILED;
 800875a:	4b08      	ldr	r3, [pc, #32]	; (800877c <McpsConfirm+0x98>)
 800875c:	2208      	movs	r2, #8
 800875e:	705a      	strb	r2, [r3, #1]
	}

    __loraWanState.upLinkCounter = mcpsConfirm->UpLinkCounter;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	68db      	ldr	r3, [r3, #12]
 8008764:	b29a      	uxth	r2, r3
 8008766:	4b05      	ldr	r3, [pc, #20]	; (800877c <McpsConfirm+0x98>)
 8008768:	815a      	strh	r2, [r3, #10]
    __loraWanState.lastRetries = mcpsConfirm->NbRetries;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	795a      	ldrb	r2, [r3, #5]
 800876e:	4b03      	ldr	r3, [pc, #12]	; (800877c <McpsConfirm+0x98>)
 8008770:	745a      	strb	r2, [r3, #17]

    //implicitely desactivated when VERBOSE_LEVEL < 2
    //TraceUpLinkFrame(mcpsConfirm);

}
 8008772:	46c0      	nop			; (mov r8, r8)
 8008774:	46bd      	mov	sp, r7
 8008776:	b002      	add	sp, #8
 8008778:	bd80      	pop	{r7, pc}
 800877a:	46c0      	nop			; (mov r8, r8)
 800877c:	20000330 	.word	0x20000330

08008780 <McpsIndication>:

static void McpsIndication( McpsIndication_t *mcpsIndication )
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b082      	sub	sp, #8
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
    TVL2( PRINTNOW(); PRINTF("APP> McpsInd STATUS: %s\r\n", EventInfoStatusStrings[mcpsIndication->Status] );)

    //lora_AppData_t _AppData;
    if( mcpsIndication->Status != LORAMAC_EVENT_INFO_STATUS_OK )
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	785b      	ldrb	r3, [r3, #1]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d003      	beq.n	8008798 <McpsIndication+0x18>
    {
    	LOG_WARN_LORAWAN(("[LoRaWan] MCPSi returns(%d)\r\n",mcpsIndication->Status));
    	__loraWanState.sendState = LORAWAN_SEND_STATE_FAILED;
 8008790:	4b39      	ldr	r3, [pc, #228]	; (8008878 <McpsIndication+0xf8>)
 8008792:	2208      	movs	r2, #8
 8008794:	705a      	strb	r2, [r3, #1]
        return;
 8008796:	e06c      	b.n	8008872 <McpsIndication+0xf2>
    }

    switch( mcpsIndication->McpsIndication )
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	781b      	ldrb	r3, [r3, #0]
 800879c:	2b01      	cmp	r3, #1
 800879e:	d008      	beq.n	80087b2 <McpsIndication+0x32>
 80087a0:	dc02      	bgt.n	80087a8 <McpsIndication+0x28>
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d007      	beq.n	80087b6 <McpsIndication+0x36>
        case MCPS_MULTICAST:
        {
            break;
        }
        default:
            break;
 80087a6:	e00b      	b.n	80087c0 <McpsIndication+0x40>
    switch( mcpsIndication->McpsIndication )
 80087a8:	2b02      	cmp	r3, #2
 80087aa:	d006      	beq.n	80087ba <McpsIndication+0x3a>
 80087ac:	2b03      	cmp	r3, #3
 80087ae:	d006      	beq.n	80087be <McpsIndication+0x3e>
            break;
 80087b0:	e006      	b.n	80087c0 <McpsIndication+0x40>
            break;
 80087b2:	46c0      	nop			; (mov r8, r8)
 80087b4:	e004      	b.n	80087c0 <McpsIndication+0x40>
            break;
 80087b6:	46c0      	nop			; (mov r8, r8)
 80087b8:	e002      	b.n	80087c0 <McpsIndication+0x40>
            break;
 80087ba:	46c0      	nop			; (mov r8, r8)
 80087bc:	e000      	b.n	80087c0 <McpsIndication+0x40>
            break;
 80087be:	46c0      	nop			; (mov r8, r8)
    // Check Buffer
    // Check BufferSize
    // Check Rssi
    // Check Snr
    // Check RxSlot
    if (certif_running() == true )
 80087c0:	f7ff f8f2 	bl	80079a8 <certif_running>
 80087c4:	1e03      	subs	r3, r0, #0
 80087c6:	d001      	beq.n	80087cc <McpsIndication+0x4c>
    {
      certif_DownLinkIncrement( );
 80087c8:	f7ff f8f8 	bl	80079bc <certif_DownLinkIncrement>
    }

    if( mcpsIndication->RxData == true )
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	7b5b      	ldrb	r3, [r3, #13]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d033      	beq.n	800883c <McpsIndication+0xbc>
    {
      switch( mcpsIndication->Port )
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	78db      	ldrb	r3, [r3, #3]
 80087d8:	2be0      	cmp	r3, #224	; 0xe0
 80087da:	d109      	bne.n	80087f0 <McpsIndication+0x70>
      {
        case CERTIF_PORT:
          // revoir cette partie... pas top de garder des param comme ca en rab
          certif_rx( mcpsIndication, &JoinParameters );
 80087dc:	4a27      	ldr	r2, [pc, #156]	; (800887c <McpsIndication+0xfc>)
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	0011      	movs	r1, r2
 80087e2:	0018      	movs	r0, r3
 80087e4:	f7ff f9ac 	bl	8007b40 <certif_rx>
          __loraWanState.sendState = LORAWAN_SEND_STATE_ACKED_WITH_DOWNLINK;
 80087e8:	4b23      	ldr	r3, [pc, #140]	; (8008878 <McpsIndication+0xf8>)
 80087ea:	2205      	movs	r2, #5
 80087ec:	705a      	strb	r2, [r3, #1]
          break;
 80087ee:	e028      	b.n	8008842 <McpsIndication+0xc2>
        default:

          LOG_INFO_LORAWAN(("### Data received\r\n"));
          __lorawan_driver_lastDownlink.size = mcpsIndication->BufferSize;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	7b1a      	ldrb	r2, [r3, #12]
 80087f4:	4b22      	ldr	r3, [pc, #136]	; (8008880 <McpsIndication+0x100>)
 80087f6:	705a      	strb	r2, [r3, #1]
          __lorawan_driver_lastDownlink.port = mcpsIndication->Port;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	78da      	ldrb	r2, [r3, #3]
 80087fc:	4b20      	ldr	r3, [pc, #128]	; (8008880 <McpsIndication+0x100>)
 80087fe:	701a      	strb	r2, [r3, #0]
		  bcopy(
				mcpsIndication->Buffer,
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	6898      	ldr	r0, [r3, #8]
				__lorawan_driver_lastDownlink.data,
				((mcpsIndication->BufferSize<=ITSDK_LORAWAN_MAX_DWNLNKSZ)?mcpsIndication->BufferSize:ITSDK_LORAWAN_MAX_DWNLNKSZ)
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	7b1b      	ldrb	r3, [r3, #12]
 8008808:	1c1a      	adds	r2, r3, #0
 800880a:	b2d3      	uxtb	r3, r2
 800880c:	2b20      	cmp	r3, #32
 800880e:	d901      	bls.n	8008814 <McpsIndication+0x94>
 8008810:	2320      	movs	r3, #32
 8008812:	1c1a      	adds	r2, r3, #0
 8008814:	b2d3      	uxtb	r3, r2
		  bcopy(
 8008816:	001a      	movs	r2, r3
 8008818:	4b1a      	ldr	r3, [pc, #104]	; (8008884 <McpsIndication+0x104>)
 800881a:	0019      	movs	r1, r3
 800881c:	f015 fcab 	bl	801e176 <bcopy>
          );
          lorawan_driver_onDataReception(
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	78d8      	ldrb	r0, [r3, #3]
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	6899      	ldr	r1, [r3, #8]
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	7b1b      	ldrb	r3, [r3, #12]
 800882c:	001a      	movs	r2, r3
 800882e:	f013 fb29 	bl	801be84 <lorawan_driver_onDataReception>
        		  mcpsIndication->Port,
				  mcpsIndication->Buffer,
				  mcpsIndication->BufferSize
          );
          __loraWanState.sendState = LORAWAN_SEND_STATE_ACKED_WITH_DOWNLINK;
 8008832:	4b11      	ldr	r3, [pc, #68]	; (8008878 <McpsIndication+0xf8>)
 8008834:	2205      	movs	r2, #5
 8008836:	705a      	strb	r2, [r3, #1]
          break;
 8008838:	46c0      	nop			; (mov r8, r8)
 800883a:	e002      	b.n	8008842 <McpsIndication+0xc2>
      }
    } else {
    	__loraWanState.sendState = LORAWAN_SEND_STATE_ACKED_NO_DOWNLINK;
 800883c:	4b0e      	ldr	r3, [pc, #56]	; (8008878 <McpsIndication+0xf8>)
 800883e:	2204      	movs	r2, #4
 8008840:	705a      	strb	r2, [r3, #1]

    // Check Multicast
    // Check Port
    // Check Datarate
    // Check FramePending
    if( mcpsIndication->FramePending == true )
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	795b      	ldrb	r3, [r3, #5]
 8008846:	2b01      	cmp	r3, #1
 8008848:	d104      	bne.n	8008854 <McpsIndication+0xd4>
    {
        // The server signals that it has pending data to be sent.
        // We schedule an uplink as soon as possible to flush the server.
    	LOG_INFO_LORAWAN(("[LoRaWAN] Network Server is asking for an uplink transmission\r\n"));
    	__loraWanState.sendState = LORAWAN_SEND_STATE_ACKED_DOWNLINK_PENDING;
 800884a:	4b0b      	ldr	r3, [pc, #44]	; (8008878 <McpsIndication+0xf8>)
 800884c:	2206      	movs	r2, #6
 800884e:	705a      	strb	r2, [r3, #1]
    	lorawan_driver_onPendingDownlink();
 8008850:	f013 fb38 	bl	801bec4 <lorawan_driver_onPendingDownlink>

    }

    __loraWanState.lastRssi = mcpsIndication->Rssi;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	220e      	movs	r2, #14
 8008858:	5e9a      	ldrsh	r2, [r3, r2]
 800885a:	4b07      	ldr	r3, [pc, #28]	; (8008878 <McpsIndication+0xf8>)
 800885c:	81da      	strh	r2, [r3, #14]
    __loraWanState.downlinkCounter = mcpsIndication->DownLinkCounter;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	695b      	ldr	r3, [r3, #20]
 8008862:	b29a      	uxth	r2, r3
 8008864:	4b04      	ldr	r3, [pc, #16]	; (8008878 <McpsIndication+0xf8>)
 8008866:	819a      	strh	r2, [r3, #12]
    __loraWanState.lastSnr = mcpsIndication->Snr;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2210      	movs	r2, #16
 800886c:	569a      	ldrsb	r2, [r3, r2]
 800886e:	4b02      	ldr	r3, [pc, #8]	; (8008878 <McpsIndication+0xf8>)
 8008870:	741a      	strb	r2, [r3, #16]

}
 8008872:	46bd      	mov	sp, r7
 8008874:	b002      	add	sp, #8
 8008876:	bd80      	pop	{r7, pc}
 8008878:	20000330 	.word	0x20000330
 800887c:	20000378 	.word	0x20000378
 8008880:	20000354 	.word	0x20000354
 8008884:	20000356 	.word	0x20000356

08008888 <MlmeConfirm>:
// =============================================================================================
// MLME ( Management ) LAYER
// =============================================================================================

static void MlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 8008888:	b590      	push	{r4, r7, lr}
 800888a:	b083      	sub	sp, #12
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
#endif /* LORAMAC_CLASSB_ENABLED */

    TVL2( PRINTNOW(); PRINTF("APP> MlmeConfirm STATUS: %s\r\n", EventInfoStatusStrings[mlmeConfirm->Status] );)

    switch( mlmeConfirm->MlmeRequest )
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	781b      	ldrb	r3, [r3, #0]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d002      	beq.n	800889e <MlmeConfirm+0x16>
 8008898:	2b03      	cmp	r3, #3
 800889a:	d01c      	beq.n	80088d6 <MlmeConfirm+0x4e>
            }
        }
#endif /* USE_DEVICE_TIMING */
#endif /* LORAMAC_CLASSB_ENABLED */
        default:
            break;
 800889c:	e028      	b.n	80088f0 <MlmeConfirm+0x68>
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	785b      	ldrb	r3, [r3, #1]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d111      	bne.n	80088ca <MlmeConfirm+0x42>
              __loraWanState.joinState = LORAWAN_STATE_JOIN_SUCCESS;
 80088a6:	4b14      	ldr	r3, [pc, #80]	; (80088f8 <MlmeConfirm+0x70>)
 80088a8:	2203      	movs	r2, #3
 80088aa:	701a      	strb	r2, [r3, #0]
              __loraWanState.joinTime = (uint32_t)(itsdk_time_get_ms()/1000);
 80088ac:	f013 ff42 	bl	801c734 <itsdk_time_get_ms>
 80088b0:	22fa      	movs	r2, #250	; 0xfa
 80088b2:	0092      	lsls	r2, r2, #2
 80088b4:	2300      	movs	r3, #0
 80088b6:	f7f7 fe07 	bl	80004c8 <__aeabi_uldivmod>
 80088ba:	0003      	movs	r3, r0
 80088bc:	000c      	movs	r4, r1
 80088be:	001a      	movs	r2, r3
 80088c0:	4b0d      	ldr	r3, [pc, #52]	; (80088f8 <MlmeConfirm+0x70>)
 80088c2:	605a      	str	r2, [r3, #4]
              lorawan_driver_onJoinSuccess();
 80088c4:	f013 fa34 	bl	801bd30 <lorawan_driver_onJoinSuccess>
            break;
 80088c8:	e012      	b.n	80088f0 <MlmeConfirm+0x68>
            	__loraWanState.joinState = LORAWAN_STATE_JOIN_FAILED;
 80088ca:	4b0b      	ldr	r3, [pc, #44]	; (80088f8 <MlmeConfirm+0x70>)
 80088cc:	2204      	movs	r2, #4
 80088ce:	701a      	strb	r2, [r3, #0]
            	lorawan_driver_onJoinFailed();
 80088d0:	f013 fa3e 	bl	801bd50 <lorawan_driver_onJoinFailed>
            break;
 80088d4:	e00c      	b.n	80088f0 <MlmeConfirm+0x68>
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	785b      	ldrb	r3, [r3, #1]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d107      	bne.n	80088ee <MlmeConfirm+0x66>
                if (certif_running() == true ){
 80088de:	f7ff f863 	bl	80079a8 <certif_running>
 80088e2:	1e03      	subs	r3, r0, #0
 80088e4:	d003      	beq.n	80088ee <MlmeConfirm+0x66>
                     certif_linkCheck(mlmeConfirm);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	0018      	movs	r0, r3
 80088ea:	f7ff f877 	bl	80079dc <certif_linkCheck>
            break;
 80088ee:	46c0      	nop			; (mov r8, r8)
    }
}
 80088f0:	46c0      	nop			; (mov r8, r8)
 80088f2:	46bd      	mov	sp, r7
 80088f4:	b003      	add	sp, #12
 80088f6:	bd90      	pop	{r4, r7, pc}
 80088f8:	20000330 	.word	0x20000330

080088fc <MlmeIndication>:
 * \brief   MLME-Indication event function
 *
 * \param   [IN] MlmeIndication - Pointer to the indication structure.
 */
static void MlmeIndication( MlmeIndication_t *MlmeIndication )
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b082      	sub	sp, #8
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
#endif /* LORAMAC_CLASSB_ENABLED */

    TVL2( PRINTNOW(); PRINTF("APP> MLMEInd STATUS: %s\r\n", EventInfoStatusStrings[MlmeIndication->Status] );    )

    switch( MlmeIndication->MlmeIndication )
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	781b      	ldrb	r3, [r3, #0]
 8008908:	2b06      	cmp	r3, #6
 800890a:	d000      	beq.n	800890e <MlmeIndication+0x12>
            break;

        }
#endif /* LORAMAC_CLASSB_ENABLED */
        default:
            break;
 800890c:	e002      	b.n	8008914 <MlmeIndication+0x18>
        	lorawan_driver_onTxNeeded();
 800890e:	f7ff fb11 	bl	8007f34 <lorawan_driver_onTxNeeded>
            break;
 8008912:	46c0      	nop			; (mov r8, r8)
    }
}
 8008914:	46c0      	nop			; (mov r8, r8)
 8008916:	46bd      	mov	sp, r7
 8008918:	b002      	add	sp, #8
 800891a:	bd80      	pop	{r7, pc}

0800891c <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b082      	sub	sp, #8
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
 8008924:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	781a      	ldrb	r2, [r3, #0]
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	3301      	adds	r3, #1
 8008932:	683a      	ldr	r2, [r7, #0]
 8008934:	7852      	ldrb	r2, [r2, #1]
 8008936:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	3302      	adds	r3, #2
 800893c:	683a      	ldr	r2, [r7, #0]
 800893e:	7892      	ldrb	r2, [r2, #2]
 8008940:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	3303      	adds	r3, #3
 8008946:	683a      	ldr	r2, [r7, #0]
 8008948:	78d2      	ldrb	r2, [r2, #3]
 800894a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	3304      	adds	r3, #4
 8008950:	683a      	ldr	r2, [r7, #0]
 8008952:	7912      	ldrb	r2, [r2, #4]
 8008954:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	3305      	adds	r3, #5
 800895a:	683a      	ldr	r2, [r7, #0]
 800895c:	7952      	ldrb	r2, [r2, #5]
 800895e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	3306      	adds	r3, #6
 8008964:	683a      	ldr	r2, [r7, #0]
 8008966:	7992      	ldrb	r2, [r2, #6]
 8008968:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	3307      	adds	r3, #7
 800896e:	683a      	ldr	r2, [r7, #0]
 8008970:	79d2      	ldrb	r2, [r2, #7]
 8008972:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	3308      	adds	r3, #8
 8008978:	683a      	ldr	r2, [r7, #0]
 800897a:	7a12      	ldrb	r2, [r2, #8]
 800897c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	3309      	adds	r3, #9
 8008982:	683a      	ldr	r2, [r7, #0]
 8008984:	7a52      	ldrb	r2, [r2, #9]
 8008986:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	330a      	adds	r3, #10
 800898c:	683a      	ldr	r2, [r7, #0]
 800898e:	7a92      	ldrb	r2, [r2, #10]
 8008990:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	330b      	adds	r3, #11
 8008996:	683a      	ldr	r2, [r7, #0]
 8008998:	7ad2      	ldrb	r2, [r2, #11]
 800899a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	330c      	adds	r3, #12
 80089a0:	683a      	ldr	r2, [r7, #0]
 80089a2:	7b12      	ldrb	r2, [r2, #12]
 80089a4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	330d      	adds	r3, #13
 80089aa:	683a      	ldr	r2, [r7, #0]
 80089ac:	7b52      	ldrb	r2, [r2, #13]
 80089ae:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	330e      	adds	r3, #14
 80089b4:	683a      	ldr	r2, [r7, #0]
 80089b6:	7b92      	ldrb	r2, [r2, #14]
 80089b8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	330f      	adds	r3, #15
 80089be:	683a      	ldr	r2, [r7, #0]
 80089c0:	7bd2      	ldrb	r2, [r2, #15]
 80089c2:	701a      	strb	r2, [r3, #0]
#endif
}
 80089c4:	46c0      	nop			; (mov r8, r8)
 80089c6:	46bd      	mov	sp, r7
 80089c8:	b002      	add	sp, #8
 80089ca:	bd80      	pop	{r7, pc}

080089cc <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b084      	sub	sp, #16
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	60f8      	str	r0, [r7, #12]
 80089d4:	60b9      	str	r1, [r7, #8]
 80089d6:	1dfb      	adds	r3, r7, #7
 80089d8:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 80089da:	e007      	b.n	80089ec <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 80089dc:	68ba      	ldr	r2, [r7, #8]
 80089de:	1c53      	adds	r3, r2, #1
 80089e0:	60bb      	str	r3, [r7, #8]
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	1c59      	adds	r1, r3, #1
 80089e6:	60f9      	str	r1, [r7, #12]
 80089e8:	7812      	ldrb	r2, [r2, #0]
 80089ea:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 80089ec:	1dfb      	adds	r3, r7, #7
 80089ee:	781b      	ldrb	r3, [r3, #0]
 80089f0:	1dfa      	adds	r2, r7, #7
 80089f2:	1e59      	subs	r1, r3, #1
 80089f4:	7011      	strb	r1, [r2, #0]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d1f0      	bne.n	80089dc <copy_block_nn+0x10>
}
 80089fa:	46c0      	nop			; (mov r8, r8)
 80089fc:	46bd      	mov	sp, r7
 80089fe:	b004      	add	sp, #16
 8008a00:	bd80      	pop	{r7, pc}

08008a02 <xor_block>:

static void xor_block( void *d, const void *s )
{
 8008a02:	b580      	push	{r7, lr}
 8008a04:	b082      	sub	sp, #8
 8008a06:	af00      	add	r7, sp, #0
 8008a08:	6078      	str	r0, [r7, #4]
 8008a0a:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	781a      	ldrb	r2, [r3, #0]
 8008a10:	683b      	ldr	r3, [r7, #0]
 8008a12:	781b      	ldrb	r3, [r3, #0]
 8008a14:	4053      	eors	r3, r2
 8008a16:	b2da      	uxtb	r2, r3
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	3301      	adds	r3, #1
 8008a20:	7819      	ldrb	r1, [r3, #0]
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	3301      	adds	r3, #1
 8008a26:	781a      	ldrb	r2, [r3, #0]
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	3301      	adds	r3, #1
 8008a2c:	404a      	eors	r2, r1
 8008a2e:	b2d2      	uxtb	r2, r2
 8008a30:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	3302      	adds	r3, #2
 8008a36:	7819      	ldrb	r1, [r3, #0]
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	3302      	adds	r3, #2
 8008a3c:	781a      	ldrb	r2, [r3, #0]
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	3302      	adds	r3, #2
 8008a42:	404a      	eors	r2, r1
 8008a44:	b2d2      	uxtb	r2, r2
 8008a46:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	3303      	adds	r3, #3
 8008a4c:	7819      	ldrb	r1, [r3, #0]
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	3303      	adds	r3, #3
 8008a52:	781a      	ldrb	r2, [r3, #0]
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	3303      	adds	r3, #3
 8008a58:	404a      	eors	r2, r1
 8008a5a:	b2d2      	uxtb	r2, r2
 8008a5c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	3304      	adds	r3, #4
 8008a62:	7819      	ldrb	r1, [r3, #0]
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	3304      	adds	r3, #4
 8008a68:	781a      	ldrb	r2, [r3, #0]
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	3304      	adds	r3, #4
 8008a6e:	404a      	eors	r2, r1
 8008a70:	b2d2      	uxtb	r2, r2
 8008a72:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	3305      	adds	r3, #5
 8008a78:	7819      	ldrb	r1, [r3, #0]
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	3305      	adds	r3, #5
 8008a7e:	781a      	ldrb	r2, [r3, #0]
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	3305      	adds	r3, #5
 8008a84:	404a      	eors	r2, r1
 8008a86:	b2d2      	uxtb	r2, r2
 8008a88:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	3306      	adds	r3, #6
 8008a8e:	7819      	ldrb	r1, [r3, #0]
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	3306      	adds	r3, #6
 8008a94:	781a      	ldrb	r2, [r3, #0]
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	3306      	adds	r3, #6
 8008a9a:	404a      	eors	r2, r1
 8008a9c:	b2d2      	uxtb	r2, r2
 8008a9e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	3307      	adds	r3, #7
 8008aa4:	7819      	ldrb	r1, [r3, #0]
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	3307      	adds	r3, #7
 8008aaa:	781a      	ldrb	r2, [r3, #0]
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	3307      	adds	r3, #7
 8008ab0:	404a      	eors	r2, r1
 8008ab2:	b2d2      	uxtb	r2, r2
 8008ab4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	3308      	adds	r3, #8
 8008aba:	7819      	ldrb	r1, [r3, #0]
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	3308      	adds	r3, #8
 8008ac0:	781a      	ldrb	r2, [r3, #0]
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	3308      	adds	r3, #8
 8008ac6:	404a      	eors	r2, r1
 8008ac8:	b2d2      	uxtb	r2, r2
 8008aca:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	3309      	adds	r3, #9
 8008ad0:	7819      	ldrb	r1, [r3, #0]
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	3309      	adds	r3, #9
 8008ad6:	781a      	ldrb	r2, [r3, #0]
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	3309      	adds	r3, #9
 8008adc:	404a      	eors	r2, r1
 8008ade:	b2d2      	uxtb	r2, r2
 8008ae0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	330a      	adds	r3, #10
 8008ae6:	7819      	ldrb	r1, [r3, #0]
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	330a      	adds	r3, #10
 8008aec:	781a      	ldrb	r2, [r3, #0]
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	330a      	adds	r3, #10
 8008af2:	404a      	eors	r2, r1
 8008af4:	b2d2      	uxtb	r2, r2
 8008af6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	330b      	adds	r3, #11
 8008afc:	7819      	ldrb	r1, [r3, #0]
 8008afe:	683b      	ldr	r3, [r7, #0]
 8008b00:	330b      	adds	r3, #11
 8008b02:	781a      	ldrb	r2, [r3, #0]
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	330b      	adds	r3, #11
 8008b08:	404a      	eors	r2, r1
 8008b0a:	b2d2      	uxtb	r2, r2
 8008b0c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	330c      	adds	r3, #12
 8008b12:	7819      	ldrb	r1, [r3, #0]
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	330c      	adds	r3, #12
 8008b18:	781a      	ldrb	r2, [r3, #0]
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	330c      	adds	r3, #12
 8008b1e:	404a      	eors	r2, r1
 8008b20:	b2d2      	uxtb	r2, r2
 8008b22:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	330d      	adds	r3, #13
 8008b28:	7819      	ldrb	r1, [r3, #0]
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	330d      	adds	r3, #13
 8008b2e:	781a      	ldrb	r2, [r3, #0]
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	330d      	adds	r3, #13
 8008b34:	404a      	eors	r2, r1
 8008b36:	b2d2      	uxtb	r2, r2
 8008b38:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	330e      	adds	r3, #14
 8008b3e:	7819      	ldrb	r1, [r3, #0]
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	330e      	adds	r3, #14
 8008b44:	781a      	ldrb	r2, [r3, #0]
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	330e      	adds	r3, #14
 8008b4a:	404a      	eors	r2, r1
 8008b4c:	b2d2      	uxtb	r2, r2
 8008b4e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	330f      	adds	r3, #15
 8008b54:	7819      	ldrb	r1, [r3, #0]
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	330f      	adds	r3, #15
 8008b5a:	781a      	ldrb	r2, [r3, #0]
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	330f      	adds	r3, #15
 8008b60:	404a      	eors	r2, r1
 8008b62:	b2d2      	uxtb	r2, r2
 8008b64:	701a      	strb	r2, [r3, #0]
#endif
}
 8008b66:	46c0      	nop			; (mov r8, r8)
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	b002      	add	sp, #8
 8008b6c:	bd80      	pop	{r7, pc}

08008b6e <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 8008b6e:	b580      	push	{r7, lr}
 8008b70:	b084      	sub	sp, #16
 8008b72:	af00      	add	r7, sp, #0
 8008b74:	60f8      	str	r0, [r7, #12]
 8008b76:	60b9      	str	r1, [r7, #8]
 8008b78:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 8008b7a:	68bb      	ldr	r3, [r7, #8]
 8008b7c:	781a      	ldrb	r2, [r3, #0]
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	781b      	ldrb	r3, [r3, #0]
 8008b82:	4053      	eors	r3, r2
 8008b84:	b2da      	uxtb	r2, r3
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 8008b8a:	68bb      	ldr	r3, [r7, #8]
 8008b8c:	3301      	adds	r3, #1
 8008b8e:	7819      	ldrb	r1, [r3, #0]
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	3301      	adds	r3, #1
 8008b94:	781a      	ldrb	r2, [r3, #0]
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	3301      	adds	r3, #1
 8008b9a:	404a      	eors	r2, r1
 8008b9c:	b2d2      	uxtb	r2, r2
 8008b9e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 8008ba0:	68bb      	ldr	r3, [r7, #8]
 8008ba2:	3302      	adds	r3, #2
 8008ba4:	7819      	ldrb	r1, [r3, #0]
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	3302      	adds	r3, #2
 8008baa:	781a      	ldrb	r2, [r3, #0]
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	3302      	adds	r3, #2
 8008bb0:	404a      	eors	r2, r1
 8008bb2:	b2d2      	uxtb	r2, r2
 8008bb4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 8008bb6:	68bb      	ldr	r3, [r7, #8]
 8008bb8:	3303      	adds	r3, #3
 8008bba:	7819      	ldrb	r1, [r3, #0]
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	3303      	adds	r3, #3
 8008bc0:	781a      	ldrb	r2, [r3, #0]
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	3303      	adds	r3, #3
 8008bc6:	404a      	eors	r2, r1
 8008bc8:	b2d2      	uxtb	r2, r2
 8008bca:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 8008bcc:	68bb      	ldr	r3, [r7, #8]
 8008bce:	3304      	adds	r3, #4
 8008bd0:	7819      	ldrb	r1, [r3, #0]
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	3304      	adds	r3, #4
 8008bd6:	781a      	ldrb	r2, [r3, #0]
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	3304      	adds	r3, #4
 8008bdc:	404a      	eors	r2, r1
 8008bde:	b2d2      	uxtb	r2, r2
 8008be0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 8008be2:	68bb      	ldr	r3, [r7, #8]
 8008be4:	3305      	adds	r3, #5
 8008be6:	7819      	ldrb	r1, [r3, #0]
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	3305      	adds	r3, #5
 8008bec:	781a      	ldrb	r2, [r3, #0]
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	3305      	adds	r3, #5
 8008bf2:	404a      	eors	r2, r1
 8008bf4:	b2d2      	uxtb	r2, r2
 8008bf6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 8008bf8:	68bb      	ldr	r3, [r7, #8]
 8008bfa:	3306      	adds	r3, #6
 8008bfc:	7819      	ldrb	r1, [r3, #0]
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	3306      	adds	r3, #6
 8008c02:	781a      	ldrb	r2, [r3, #0]
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	3306      	adds	r3, #6
 8008c08:	404a      	eors	r2, r1
 8008c0a:	b2d2      	uxtb	r2, r2
 8008c0c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 8008c0e:	68bb      	ldr	r3, [r7, #8]
 8008c10:	3307      	adds	r3, #7
 8008c12:	7819      	ldrb	r1, [r3, #0]
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	3307      	adds	r3, #7
 8008c18:	781a      	ldrb	r2, [r3, #0]
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	3307      	adds	r3, #7
 8008c1e:	404a      	eors	r2, r1
 8008c20:	b2d2      	uxtb	r2, r2
 8008c22:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 8008c24:	68bb      	ldr	r3, [r7, #8]
 8008c26:	3308      	adds	r3, #8
 8008c28:	7819      	ldrb	r1, [r3, #0]
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	3308      	adds	r3, #8
 8008c2e:	781a      	ldrb	r2, [r3, #0]
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	3308      	adds	r3, #8
 8008c34:	404a      	eors	r2, r1
 8008c36:	b2d2      	uxtb	r2, r2
 8008c38:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 8008c3a:	68bb      	ldr	r3, [r7, #8]
 8008c3c:	3309      	adds	r3, #9
 8008c3e:	7819      	ldrb	r1, [r3, #0]
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	3309      	adds	r3, #9
 8008c44:	781a      	ldrb	r2, [r3, #0]
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	3309      	adds	r3, #9
 8008c4a:	404a      	eors	r2, r1
 8008c4c:	b2d2      	uxtb	r2, r2
 8008c4e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 8008c50:	68bb      	ldr	r3, [r7, #8]
 8008c52:	330a      	adds	r3, #10
 8008c54:	7819      	ldrb	r1, [r3, #0]
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	330a      	adds	r3, #10
 8008c5a:	781a      	ldrb	r2, [r3, #0]
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	330a      	adds	r3, #10
 8008c60:	404a      	eors	r2, r1
 8008c62:	b2d2      	uxtb	r2, r2
 8008c64:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 8008c66:	68bb      	ldr	r3, [r7, #8]
 8008c68:	330b      	adds	r3, #11
 8008c6a:	7819      	ldrb	r1, [r3, #0]
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	330b      	adds	r3, #11
 8008c70:	781a      	ldrb	r2, [r3, #0]
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	330b      	adds	r3, #11
 8008c76:	404a      	eors	r2, r1
 8008c78:	b2d2      	uxtb	r2, r2
 8008c7a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 8008c7c:	68bb      	ldr	r3, [r7, #8]
 8008c7e:	330c      	adds	r3, #12
 8008c80:	7819      	ldrb	r1, [r3, #0]
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	330c      	adds	r3, #12
 8008c86:	781a      	ldrb	r2, [r3, #0]
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	330c      	adds	r3, #12
 8008c8c:	404a      	eors	r2, r1
 8008c8e:	b2d2      	uxtb	r2, r2
 8008c90:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 8008c92:	68bb      	ldr	r3, [r7, #8]
 8008c94:	330d      	adds	r3, #13
 8008c96:	7819      	ldrb	r1, [r3, #0]
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	330d      	adds	r3, #13
 8008c9c:	781a      	ldrb	r2, [r3, #0]
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	330d      	adds	r3, #13
 8008ca2:	404a      	eors	r2, r1
 8008ca4:	b2d2      	uxtb	r2, r2
 8008ca6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 8008ca8:	68bb      	ldr	r3, [r7, #8]
 8008caa:	330e      	adds	r3, #14
 8008cac:	7819      	ldrb	r1, [r3, #0]
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	330e      	adds	r3, #14
 8008cb2:	781a      	ldrb	r2, [r3, #0]
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	330e      	adds	r3, #14
 8008cb8:	404a      	eors	r2, r1
 8008cba:	b2d2      	uxtb	r2, r2
 8008cbc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 8008cbe:	68bb      	ldr	r3, [r7, #8]
 8008cc0:	330f      	adds	r3, #15
 8008cc2:	7819      	ldrb	r1, [r3, #0]
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	330f      	adds	r3, #15
 8008cc8:	781a      	ldrb	r2, [r3, #0]
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	330f      	adds	r3, #15
 8008cce:	404a      	eors	r2, r1
 8008cd0:	b2d2      	uxtb	r2, r2
 8008cd2:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 8008cd4:	46c0      	nop			; (mov r8, r8)
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	b004      	add	sp, #16
 8008cda:	bd80      	pop	{r7, pc}

08008cdc <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b082      	sub	sp, #8
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
 8008ce4:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 8008ce6:	683a      	ldr	r2, [r7, #0]
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	0011      	movs	r1, r2
 8008cec:	0018      	movs	r0, r3
 8008cee:	f7ff fe88 	bl	8008a02 <xor_block>
}
 8008cf2:	46c0      	nop			; (mov r8, r8)
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	b002      	add	sp, #8
 8008cf8:	bd80      	pop	{r7, pc}
	...

08008cfc <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b084      	sub	sp, #16
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	781b      	ldrb	r3, [r3, #0]
 8008d08:	001a      	movs	r2, r3
 8008d0a:	4b4c      	ldr	r3, [pc, #304]	; (8008e3c <shift_sub_rows+0x140>)
 8008d0c:	5c9a      	ldrb	r2, [r3, r2]
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	701a      	strb	r2, [r3, #0]
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	3304      	adds	r3, #4
 8008d16:	781b      	ldrb	r3, [r3, #0]
 8008d18:	0019      	movs	r1, r3
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	3304      	adds	r3, #4
 8008d1e:	4a47      	ldr	r2, [pc, #284]	; (8008e3c <shift_sub_rows+0x140>)
 8008d20:	5c52      	ldrb	r2, [r2, r1]
 8008d22:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	3308      	adds	r3, #8
 8008d28:	781b      	ldrb	r3, [r3, #0]
 8008d2a:	0019      	movs	r1, r3
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	3308      	adds	r3, #8
 8008d30:	4a42      	ldr	r2, [pc, #264]	; (8008e3c <shift_sub_rows+0x140>)
 8008d32:	5c52      	ldrb	r2, [r2, r1]
 8008d34:	701a      	strb	r2, [r3, #0]
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	330c      	adds	r3, #12
 8008d3a:	781b      	ldrb	r3, [r3, #0]
 8008d3c:	0019      	movs	r1, r3
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	330c      	adds	r3, #12
 8008d42:	4a3e      	ldr	r2, [pc, #248]	; (8008e3c <shift_sub_rows+0x140>)
 8008d44:	5c52      	ldrb	r2, [r2, r1]
 8008d46:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 8008d48:	200f      	movs	r0, #15
 8008d4a:	183b      	adds	r3, r7, r0
 8008d4c:	687a      	ldr	r2, [r7, #4]
 8008d4e:	7852      	ldrb	r2, [r2, #1]
 8008d50:	701a      	strb	r2, [r3, #0]
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	3305      	adds	r3, #5
 8008d56:	781b      	ldrb	r3, [r3, #0]
 8008d58:	0019      	movs	r1, r3
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	3301      	adds	r3, #1
 8008d5e:	4a37      	ldr	r2, [pc, #220]	; (8008e3c <shift_sub_rows+0x140>)
 8008d60:	5c52      	ldrb	r2, [r2, r1]
 8008d62:	701a      	strb	r2, [r3, #0]
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	3309      	adds	r3, #9
 8008d68:	781b      	ldrb	r3, [r3, #0]
 8008d6a:	0019      	movs	r1, r3
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	3305      	adds	r3, #5
 8008d70:	4a32      	ldr	r2, [pc, #200]	; (8008e3c <shift_sub_rows+0x140>)
 8008d72:	5c52      	ldrb	r2, [r2, r1]
 8008d74:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	330d      	adds	r3, #13
 8008d7a:	781b      	ldrb	r3, [r3, #0]
 8008d7c:	0019      	movs	r1, r3
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	3309      	adds	r3, #9
 8008d82:	4a2e      	ldr	r2, [pc, #184]	; (8008e3c <shift_sub_rows+0x140>)
 8008d84:	5c52      	ldrb	r2, [r2, r1]
 8008d86:	701a      	strb	r2, [r3, #0]
 8008d88:	183b      	adds	r3, r7, r0
 8008d8a:	781a      	ldrb	r2, [r3, #0]
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	330d      	adds	r3, #13
 8008d90:	492a      	ldr	r1, [pc, #168]	; (8008e3c <shift_sub_rows+0x140>)
 8008d92:	5c8a      	ldrb	r2, [r1, r2]
 8008d94:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 8008d96:	183b      	adds	r3, r7, r0
 8008d98:	687a      	ldr	r2, [r7, #4]
 8008d9a:	7892      	ldrb	r2, [r2, #2]
 8008d9c:	701a      	strb	r2, [r3, #0]
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	330a      	adds	r3, #10
 8008da2:	781b      	ldrb	r3, [r3, #0]
 8008da4:	0019      	movs	r1, r3
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	3302      	adds	r3, #2
 8008daa:	4a24      	ldr	r2, [pc, #144]	; (8008e3c <shift_sub_rows+0x140>)
 8008dac:	5c52      	ldrb	r2, [r2, r1]
 8008dae:	701a      	strb	r2, [r3, #0]
 8008db0:	183b      	adds	r3, r7, r0
 8008db2:	781a      	ldrb	r2, [r3, #0]
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	330a      	adds	r3, #10
 8008db8:	4920      	ldr	r1, [pc, #128]	; (8008e3c <shift_sub_rows+0x140>)
 8008dba:	5c8a      	ldrb	r2, [r1, r2]
 8008dbc:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 8008dbe:	183b      	adds	r3, r7, r0
 8008dc0:	687a      	ldr	r2, [r7, #4]
 8008dc2:	7992      	ldrb	r2, [r2, #6]
 8008dc4:	701a      	strb	r2, [r3, #0]
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	330e      	adds	r3, #14
 8008dca:	781b      	ldrb	r3, [r3, #0]
 8008dcc:	0019      	movs	r1, r3
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	3306      	adds	r3, #6
 8008dd2:	4a1a      	ldr	r2, [pc, #104]	; (8008e3c <shift_sub_rows+0x140>)
 8008dd4:	5c52      	ldrb	r2, [r2, r1]
 8008dd6:	701a      	strb	r2, [r3, #0]
 8008dd8:	183b      	adds	r3, r7, r0
 8008dda:	781a      	ldrb	r2, [r3, #0]
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	330e      	adds	r3, #14
 8008de0:	4916      	ldr	r1, [pc, #88]	; (8008e3c <shift_sub_rows+0x140>)
 8008de2:	5c8a      	ldrb	r2, [r1, r2]
 8008de4:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 8008de6:	183b      	adds	r3, r7, r0
 8008de8:	687a      	ldr	r2, [r7, #4]
 8008dea:	7bd2      	ldrb	r2, [r2, #15]
 8008dec:	701a      	strb	r2, [r3, #0]
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	330b      	adds	r3, #11
 8008df2:	781b      	ldrb	r3, [r3, #0]
 8008df4:	0019      	movs	r1, r3
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	330f      	adds	r3, #15
 8008dfa:	4a10      	ldr	r2, [pc, #64]	; (8008e3c <shift_sub_rows+0x140>)
 8008dfc:	5c52      	ldrb	r2, [r2, r1]
 8008dfe:	701a      	strb	r2, [r3, #0]
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	3307      	adds	r3, #7
 8008e04:	781b      	ldrb	r3, [r3, #0]
 8008e06:	0019      	movs	r1, r3
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	330b      	adds	r3, #11
 8008e0c:	4a0b      	ldr	r2, [pc, #44]	; (8008e3c <shift_sub_rows+0x140>)
 8008e0e:	5c52      	ldrb	r2, [r2, r1]
 8008e10:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	3303      	adds	r3, #3
 8008e16:	781b      	ldrb	r3, [r3, #0]
 8008e18:	0019      	movs	r1, r3
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	3307      	adds	r3, #7
 8008e1e:	4a07      	ldr	r2, [pc, #28]	; (8008e3c <shift_sub_rows+0x140>)
 8008e20:	5c52      	ldrb	r2, [r2, r1]
 8008e22:	701a      	strb	r2, [r3, #0]
 8008e24:	183b      	adds	r3, r7, r0
 8008e26:	781a      	ldrb	r2, [r3, #0]
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	3303      	adds	r3, #3
 8008e2c:	4903      	ldr	r1, [pc, #12]	; (8008e3c <shift_sub_rows+0x140>)
 8008e2e:	5c8a      	ldrb	r2, [r1, r2]
 8008e30:	701a      	strb	r2, [r3, #0]
}
 8008e32:	46c0      	nop			; (mov r8, r8)
 8008e34:	46bd      	mov	sp, r7
 8008e36:	b004      	add	sp, #16
 8008e38:	bd80      	pop	{r7, pc}
 8008e3a:	46c0      	nop			; (mov r8, r8)
 8008e3c:	0802058c 	.word	0x0802058c

08008e40 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 8008e40:	b590      	push	{r4, r7, lr}
 8008e42:	b087      	sub	sp, #28
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 8008e48:	687a      	ldr	r2, [r7, #4]
 8008e4a:	2008      	movs	r0, #8
 8008e4c:	0004      	movs	r4, r0
 8008e4e:	183b      	adds	r3, r7, r0
 8008e50:	0011      	movs	r1, r2
 8008e52:	0018      	movs	r0, r3
 8008e54:	f7ff fd62 	bl	800891c <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 8008e58:	0020      	movs	r0, r4
 8008e5a:	183b      	adds	r3, r7, r0
 8008e5c:	781b      	ldrb	r3, [r3, #0]
 8008e5e:	001a      	movs	r2, r3
 8008e60:	4be7      	ldr	r3, [pc, #924]	; (8009200 <mix_sub_columns+0x3c0>)
 8008e62:	5c9a      	ldrb	r2, [r3, r2]
 8008e64:	183b      	adds	r3, r7, r0
 8008e66:	795b      	ldrb	r3, [r3, #5]
 8008e68:	0019      	movs	r1, r3
 8008e6a:	4be6      	ldr	r3, [pc, #920]	; (8009204 <mix_sub_columns+0x3c4>)
 8008e6c:	5c5b      	ldrb	r3, [r3, r1]
 8008e6e:	4053      	eors	r3, r2
 8008e70:	b2da      	uxtb	r2, r3
 8008e72:	183b      	adds	r3, r7, r0
 8008e74:	7a9b      	ldrb	r3, [r3, #10]
 8008e76:	0019      	movs	r1, r3
 8008e78:	4be3      	ldr	r3, [pc, #908]	; (8009208 <mix_sub_columns+0x3c8>)
 8008e7a:	5c5b      	ldrb	r3, [r3, r1]
 8008e7c:	4053      	eors	r3, r2
 8008e7e:	b2da      	uxtb	r2, r3
 8008e80:	183b      	adds	r3, r7, r0
 8008e82:	7bdb      	ldrb	r3, [r3, #15]
 8008e84:	0019      	movs	r1, r3
 8008e86:	4be0      	ldr	r3, [pc, #896]	; (8009208 <mix_sub_columns+0x3c8>)
 8008e88:	5c5b      	ldrb	r3, [r3, r1]
 8008e8a:	4053      	eors	r3, r2
 8008e8c:	b2da      	uxtb	r2, r3
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 8008e92:	183b      	adds	r3, r7, r0
 8008e94:	781b      	ldrb	r3, [r3, #0]
 8008e96:	001a      	movs	r2, r3
 8008e98:	4bdb      	ldr	r3, [pc, #876]	; (8009208 <mix_sub_columns+0x3c8>)
 8008e9a:	5c9a      	ldrb	r2, [r3, r2]
 8008e9c:	183b      	adds	r3, r7, r0
 8008e9e:	795b      	ldrb	r3, [r3, #5]
 8008ea0:	0019      	movs	r1, r3
 8008ea2:	4bd7      	ldr	r3, [pc, #860]	; (8009200 <mix_sub_columns+0x3c0>)
 8008ea4:	5c5b      	ldrb	r3, [r3, r1]
 8008ea6:	4053      	eors	r3, r2
 8008ea8:	b2da      	uxtb	r2, r3
 8008eaa:	183b      	adds	r3, r7, r0
 8008eac:	7a9b      	ldrb	r3, [r3, #10]
 8008eae:	0019      	movs	r1, r3
 8008eb0:	4bd4      	ldr	r3, [pc, #848]	; (8009204 <mix_sub_columns+0x3c4>)
 8008eb2:	5c5b      	ldrb	r3, [r3, r1]
 8008eb4:	4053      	eors	r3, r2
 8008eb6:	b2d9      	uxtb	r1, r3
 8008eb8:	183b      	adds	r3, r7, r0
 8008eba:	7bdb      	ldrb	r3, [r3, #15]
 8008ebc:	001a      	movs	r2, r3
 8008ebe:	4bd2      	ldr	r3, [pc, #840]	; (8009208 <mix_sub_columns+0x3c8>)
 8008ec0:	5c9a      	ldrb	r2, [r3, r2]
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	3301      	adds	r3, #1
 8008ec6:	404a      	eors	r2, r1
 8008ec8:	b2d2      	uxtb	r2, r2
 8008eca:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 8008ecc:	183b      	adds	r3, r7, r0
 8008ece:	781b      	ldrb	r3, [r3, #0]
 8008ed0:	001a      	movs	r2, r3
 8008ed2:	4bcd      	ldr	r3, [pc, #820]	; (8009208 <mix_sub_columns+0x3c8>)
 8008ed4:	5c9a      	ldrb	r2, [r3, r2]
 8008ed6:	183b      	adds	r3, r7, r0
 8008ed8:	795b      	ldrb	r3, [r3, #5]
 8008eda:	0019      	movs	r1, r3
 8008edc:	4bca      	ldr	r3, [pc, #808]	; (8009208 <mix_sub_columns+0x3c8>)
 8008ede:	5c5b      	ldrb	r3, [r3, r1]
 8008ee0:	4053      	eors	r3, r2
 8008ee2:	b2da      	uxtb	r2, r3
 8008ee4:	183b      	adds	r3, r7, r0
 8008ee6:	7a9b      	ldrb	r3, [r3, #10]
 8008ee8:	0019      	movs	r1, r3
 8008eea:	4bc5      	ldr	r3, [pc, #788]	; (8009200 <mix_sub_columns+0x3c0>)
 8008eec:	5c5b      	ldrb	r3, [r3, r1]
 8008eee:	4053      	eors	r3, r2
 8008ef0:	b2d9      	uxtb	r1, r3
 8008ef2:	183b      	adds	r3, r7, r0
 8008ef4:	7bdb      	ldrb	r3, [r3, #15]
 8008ef6:	001a      	movs	r2, r3
 8008ef8:	4bc2      	ldr	r3, [pc, #776]	; (8009204 <mix_sub_columns+0x3c4>)
 8008efa:	5c9a      	ldrb	r2, [r3, r2]
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	3302      	adds	r3, #2
 8008f00:	404a      	eors	r2, r1
 8008f02:	b2d2      	uxtb	r2, r2
 8008f04:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 8008f06:	183b      	adds	r3, r7, r0
 8008f08:	781b      	ldrb	r3, [r3, #0]
 8008f0a:	001a      	movs	r2, r3
 8008f0c:	4bbd      	ldr	r3, [pc, #756]	; (8009204 <mix_sub_columns+0x3c4>)
 8008f0e:	5c9a      	ldrb	r2, [r3, r2]
 8008f10:	183b      	adds	r3, r7, r0
 8008f12:	795b      	ldrb	r3, [r3, #5]
 8008f14:	0019      	movs	r1, r3
 8008f16:	4bbc      	ldr	r3, [pc, #752]	; (8009208 <mix_sub_columns+0x3c8>)
 8008f18:	5c5b      	ldrb	r3, [r3, r1]
 8008f1a:	4053      	eors	r3, r2
 8008f1c:	b2da      	uxtb	r2, r3
 8008f1e:	183b      	adds	r3, r7, r0
 8008f20:	7a9b      	ldrb	r3, [r3, #10]
 8008f22:	0019      	movs	r1, r3
 8008f24:	4bb8      	ldr	r3, [pc, #736]	; (8009208 <mix_sub_columns+0x3c8>)
 8008f26:	5c5b      	ldrb	r3, [r3, r1]
 8008f28:	4053      	eors	r3, r2
 8008f2a:	b2d9      	uxtb	r1, r3
 8008f2c:	183b      	adds	r3, r7, r0
 8008f2e:	7bdb      	ldrb	r3, [r3, #15]
 8008f30:	001a      	movs	r2, r3
 8008f32:	4bb3      	ldr	r3, [pc, #716]	; (8009200 <mix_sub_columns+0x3c0>)
 8008f34:	5c9a      	ldrb	r2, [r3, r2]
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	3303      	adds	r3, #3
 8008f3a:	404a      	eors	r2, r1
 8008f3c:	b2d2      	uxtb	r2, r2
 8008f3e:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 8008f40:	183b      	adds	r3, r7, r0
 8008f42:	791b      	ldrb	r3, [r3, #4]
 8008f44:	001a      	movs	r2, r3
 8008f46:	4bae      	ldr	r3, [pc, #696]	; (8009200 <mix_sub_columns+0x3c0>)
 8008f48:	5c9a      	ldrb	r2, [r3, r2]
 8008f4a:	183b      	adds	r3, r7, r0
 8008f4c:	7a5b      	ldrb	r3, [r3, #9]
 8008f4e:	0019      	movs	r1, r3
 8008f50:	4bac      	ldr	r3, [pc, #688]	; (8009204 <mix_sub_columns+0x3c4>)
 8008f52:	5c5b      	ldrb	r3, [r3, r1]
 8008f54:	4053      	eors	r3, r2
 8008f56:	b2da      	uxtb	r2, r3
 8008f58:	183b      	adds	r3, r7, r0
 8008f5a:	7b9b      	ldrb	r3, [r3, #14]
 8008f5c:	0019      	movs	r1, r3
 8008f5e:	4baa      	ldr	r3, [pc, #680]	; (8009208 <mix_sub_columns+0x3c8>)
 8008f60:	5c5b      	ldrb	r3, [r3, r1]
 8008f62:	4053      	eors	r3, r2
 8008f64:	b2d9      	uxtb	r1, r3
 8008f66:	183b      	adds	r3, r7, r0
 8008f68:	78db      	ldrb	r3, [r3, #3]
 8008f6a:	001a      	movs	r2, r3
 8008f6c:	4ba6      	ldr	r3, [pc, #664]	; (8009208 <mix_sub_columns+0x3c8>)
 8008f6e:	5c9a      	ldrb	r2, [r3, r2]
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	3304      	adds	r3, #4
 8008f74:	404a      	eors	r2, r1
 8008f76:	b2d2      	uxtb	r2, r2
 8008f78:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 8008f7a:	183b      	adds	r3, r7, r0
 8008f7c:	791b      	ldrb	r3, [r3, #4]
 8008f7e:	001a      	movs	r2, r3
 8008f80:	4ba1      	ldr	r3, [pc, #644]	; (8009208 <mix_sub_columns+0x3c8>)
 8008f82:	5c9a      	ldrb	r2, [r3, r2]
 8008f84:	183b      	adds	r3, r7, r0
 8008f86:	7a5b      	ldrb	r3, [r3, #9]
 8008f88:	0019      	movs	r1, r3
 8008f8a:	4b9d      	ldr	r3, [pc, #628]	; (8009200 <mix_sub_columns+0x3c0>)
 8008f8c:	5c5b      	ldrb	r3, [r3, r1]
 8008f8e:	4053      	eors	r3, r2
 8008f90:	b2da      	uxtb	r2, r3
 8008f92:	183b      	adds	r3, r7, r0
 8008f94:	7b9b      	ldrb	r3, [r3, #14]
 8008f96:	0019      	movs	r1, r3
 8008f98:	4b9a      	ldr	r3, [pc, #616]	; (8009204 <mix_sub_columns+0x3c4>)
 8008f9a:	5c5b      	ldrb	r3, [r3, r1]
 8008f9c:	4053      	eors	r3, r2
 8008f9e:	b2d9      	uxtb	r1, r3
 8008fa0:	183b      	adds	r3, r7, r0
 8008fa2:	78db      	ldrb	r3, [r3, #3]
 8008fa4:	001a      	movs	r2, r3
 8008fa6:	4b98      	ldr	r3, [pc, #608]	; (8009208 <mix_sub_columns+0x3c8>)
 8008fa8:	5c9a      	ldrb	r2, [r3, r2]
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	3305      	adds	r3, #5
 8008fae:	404a      	eors	r2, r1
 8008fb0:	b2d2      	uxtb	r2, r2
 8008fb2:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 8008fb4:	183b      	adds	r3, r7, r0
 8008fb6:	791b      	ldrb	r3, [r3, #4]
 8008fb8:	001a      	movs	r2, r3
 8008fba:	4b93      	ldr	r3, [pc, #588]	; (8009208 <mix_sub_columns+0x3c8>)
 8008fbc:	5c9a      	ldrb	r2, [r3, r2]
 8008fbe:	183b      	adds	r3, r7, r0
 8008fc0:	7a5b      	ldrb	r3, [r3, #9]
 8008fc2:	0019      	movs	r1, r3
 8008fc4:	4b90      	ldr	r3, [pc, #576]	; (8009208 <mix_sub_columns+0x3c8>)
 8008fc6:	5c5b      	ldrb	r3, [r3, r1]
 8008fc8:	4053      	eors	r3, r2
 8008fca:	b2da      	uxtb	r2, r3
 8008fcc:	183b      	adds	r3, r7, r0
 8008fce:	7b9b      	ldrb	r3, [r3, #14]
 8008fd0:	0019      	movs	r1, r3
 8008fd2:	4b8b      	ldr	r3, [pc, #556]	; (8009200 <mix_sub_columns+0x3c0>)
 8008fd4:	5c5b      	ldrb	r3, [r3, r1]
 8008fd6:	4053      	eors	r3, r2
 8008fd8:	b2d9      	uxtb	r1, r3
 8008fda:	183b      	adds	r3, r7, r0
 8008fdc:	78db      	ldrb	r3, [r3, #3]
 8008fde:	001a      	movs	r2, r3
 8008fe0:	4b88      	ldr	r3, [pc, #544]	; (8009204 <mix_sub_columns+0x3c4>)
 8008fe2:	5c9a      	ldrb	r2, [r3, r2]
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	3306      	adds	r3, #6
 8008fe8:	404a      	eors	r2, r1
 8008fea:	b2d2      	uxtb	r2, r2
 8008fec:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 8008fee:	183b      	adds	r3, r7, r0
 8008ff0:	791b      	ldrb	r3, [r3, #4]
 8008ff2:	001a      	movs	r2, r3
 8008ff4:	4b83      	ldr	r3, [pc, #524]	; (8009204 <mix_sub_columns+0x3c4>)
 8008ff6:	5c9a      	ldrb	r2, [r3, r2]
 8008ff8:	183b      	adds	r3, r7, r0
 8008ffa:	7a5b      	ldrb	r3, [r3, #9]
 8008ffc:	0019      	movs	r1, r3
 8008ffe:	4b82      	ldr	r3, [pc, #520]	; (8009208 <mix_sub_columns+0x3c8>)
 8009000:	5c5b      	ldrb	r3, [r3, r1]
 8009002:	4053      	eors	r3, r2
 8009004:	b2da      	uxtb	r2, r3
 8009006:	183b      	adds	r3, r7, r0
 8009008:	7b9b      	ldrb	r3, [r3, #14]
 800900a:	0019      	movs	r1, r3
 800900c:	4b7e      	ldr	r3, [pc, #504]	; (8009208 <mix_sub_columns+0x3c8>)
 800900e:	5c5b      	ldrb	r3, [r3, r1]
 8009010:	4053      	eors	r3, r2
 8009012:	b2d9      	uxtb	r1, r3
 8009014:	183b      	adds	r3, r7, r0
 8009016:	78db      	ldrb	r3, [r3, #3]
 8009018:	001a      	movs	r2, r3
 800901a:	4b79      	ldr	r3, [pc, #484]	; (8009200 <mix_sub_columns+0x3c0>)
 800901c:	5c9a      	ldrb	r2, [r3, r2]
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	3307      	adds	r3, #7
 8009022:	404a      	eors	r2, r1
 8009024:	b2d2      	uxtb	r2, r2
 8009026:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 8009028:	183b      	adds	r3, r7, r0
 800902a:	7a1b      	ldrb	r3, [r3, #8]
 800902c:	001a      	movs	r2, r3
 800902e:	4b74      	ldr	r3, [pc, #464]	; (8009200 <mix_sub_columns+0x3c0>)
 8009030:	5c9a      	ldrb	r2, [r3, r2]
 8009032:	183b      	adds	r3, r7, r0
 8009034:	7b5b      	ldrb	r3, [r3, #13]
 8009036:	0019      	movs	r1, r3
 8009038:	4b72      	ldr	r3, [pc, #456]	; (8009204 <mix_sub_columns+0x3c4>)
 800903a:	5c5b      	ldrb	r3, [r3, r1]
 800903c:	4053      	eors	r3, r2
 800903e:	b2da      	uxtb	r2, r3
 8009040:	183b      	adds	r3, r7, r0
 8009042:	789b      	ldrb	r3, [r3, #2]
 8009044:	0019      	movs	r1, r3
 8009046:	4b70      	ldr	r3, [pc, #448]	; (8009208 <mix_sub_columns+0x3c8>)
 8009048:	5c5b      	ldrb	r3, [r3, r1]
 800904a:	4053      	eors	r3, r2
 800904c:	b2d9      	uxtb	r1, r3
 800904e:	183b      	adds	r3, r7, r0
 8009050:	79db      	ldrb	r3, [r3, #7]
 8009052:	001a      	movs	r2, r3
 8009054:	4b6c      	ldr	r3, [pc, #432]	; (8009208 <mix_sub_columns+0x3c8>)
 8009056:	5c9a      	ldrb	r2, [r3, r2]
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	3308      	adds	r3, #8
 800905c:	404a      	eors	r2, r1
 800905e:	b2d2      	uxtb	r2, r2
 8009060:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 8009062:	183b      	adds	r3, r7, r0
 8009064:	7a1b      	ldrb	r3, [r3, #8]
 8009066:	001a      	movs	r2, r3
 8009068:	4b67      	ldr	r3, [pc, #412]	; (8009208 <mix_sub_columns+0x3c8>)
 800906a:	5c9a      	ldrb	r2, [r3, r2]
 800906c:	183b      	adds	r3, r7, r0
 800906e:	7b5b      	ldrb	r3, [r3, #13]
 8009070:	0019      	movs	r1, r3
 8009072:	4b63      	ldr	r3, [pc, #396]	; (8009200 <mix_sub_columns+0x3c0>)
 8009074:	5c5b      	ldrb	r3, [r3, r1]
 8009076:	4053      	eors	r3, r2
 8009078:	b2da      	uxtb	r2, r3
 800907a:	183b      	adds	r3, r7, r0
 800907c:	789b      	ldrb	r3, [r3, #2]
 800907e:	0019      	movs	r1, r3
 8009080:	4b60      	ldr	r3, [pc, #384]	; (8009204 <mix_sub_columns+0x3c4>)
 8009082:	5c5b      	ldrb	r3, [r3, r1]
 8009084:	4053      	eors	r3, r2
 8009086:	b2d9      	uxtb	r1, r3
 8009088:	183b      	adds	r3, r7, r0
 800908a:	79db      	ldrb	r3, [r3, #7]
 800908c:	001a      	movs	r2, r3
 800908e:	4b5e      	ldr	r3, [pc, #376]	; (8009208 <mix_sub_columns+0x3c8>)
 8009090:	5c9a      	ldrb	r2, [r3, r2]
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	3309      	adds	r3, #9
 8009096:	404a      	eors	r2, r1
 8009098:	b2d2      	uxtb	r2, r2
 800909a:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800909c:	183b      	adds	r3, r7, r0
 800909e:	7a1b      	ldrb	r3, [r3, #8]
 80090a0:	001a      	movs	r2, r3
 80090a2:	4b59      	ldr	r3, [pc, #356]	; (8009208 <mix_sub_columns+0x3c8>)
 80090a4:	5c9a      	ldrb	r2, [r3, r2]
 80090a6:	183b      	adds	r3, r7, r0
 80090a8:	7b5b      	ldrb	r3, [r3, #13]
 80090aa:	0019      	movs	r1, r3
 80090ac:	4b56      	ldr	r3, [pc, #344]	; (8009208 <mix_sub_columns+0x3c8>)
 80090ae:	5c5b      	ldrb	r3, [r3, r1]
 80090b0:	4053      	eors	r3, r2
 80090b2:	b2da      	uxtb	r2, r3
 80090b4:	183b      	adds	r3, r7, r0
 80090b6:	789b      	ldrb	r3, [r3, #2]
 80090b8:	0019      	movs	r1, r3
 80090ba:	4b51      	ldr	r3, [pc, #324]	; (8009200 <mix_sub_columns+0x3c0>)
 80090bc:	5c5b      	ldrb	r3, [r3, r1]
 80090be:	4053      	eors	r3, r2
 80090c0:	b2d9      	uxtb	r1, r3
 80090c2:	183b      	adds	r3, r7, r0
 80090c4:	79db      	ldrb	r3, [r3, #7]
 80090c6:	001a      	movs	r2, r3
 80090c8:	4b4e      	ldr	r3, [pc, #312]	; (8009204 <mix_sub_columns+0x3c4>)
 80090ca:	5c9a      	ldrb	r2, [r3, r2]
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	330a      	adds	r3, #10
 80090d0:	404a      	eors	r2, r1
 80090d2:	b2d2      	uxtb	r2, r2
 80090d4:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 80090d6:	183b      	adds	r3, r7, r0
 80090d8:	7a1b      	ldrb	r3, [r3, #8]
 80090da:	001a      	movs	r2, r3
 80090dc:	4b49      	ldr	r3, [pc, #292]	; (8009204 <mix_sub_columns+0x3c4>)
 80090de:	5c9a      	ldrb	r2, [r3, r2]
 80090e0:	183b      	adds	r3, r7, r0
 80090e2:	7b5b      	ldrb	r3, [r3, #13]
 80090e4:	0019      	movs	r1, r3
 80090e6:	4b48      	ldr	r3, [pc, #288]	; (8009208 <mix_sub_columns+0x3c8>)
 80090e8:	5c5b      	ldrb	r3, [r3, r1]
 80090ea:	4053      	eors	r3, r2
 80090ec:	b2da      	uxtb	r2, r3
 80090ee:	183b      	adds	r3, r7, r0
 80090f0:	789b      	ldrb	r3, [r3, #2]
 80090f2:	0019      	movs	r1, r3
 80090f4:	4b44      	ldr	r3, [pc, #272]	; (8009208 <mix_sub_columns+0x3c8>)
 80090f6:	5c5b      	ldrb	r3, [r3, r1]
 80090f8:	4053      	eors	r3, r2
 80090fa:	b2d9      	uxtb	r1, r3
 80090fc:	183b      	adds	r3, r7, r0
 80090fe:	79db      	ldrb	r3, [r3, #7]
 8009100:	001a      	movs	r2, r3
 8009102:	4b3f      	ldr	r3, [pc, #252]	; (8009200 <mix_sub_columns+0x3c0>)
 8009104:	5c9a      	ldrb	r2, [r3, r2]
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	330b      	adds	r3, #11
 800910a:	404a      	eors	r2, r1
 800910c:	b2d2      	uxtb	r2, r2
 800910e:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 8009110:	183b      	adds	r3, r7, r0
 8009112:	7b1b      	ldrb	r3, [r3, #12]
 8009114:	001a      	movs	r2, r3
 8009116:	4b3a      	ldr	r3, [pc, #232]	; (8009200 <mix_sub_columns+0x3c0>)
 8009118:	5c9a      	ldrb	r2, [r3, r2]
 800911a:	183b      	adds	r3, r7, r0
 800911c:	785b      	ldrb	r3, [r3, #1]
 800911e:	0019      	movs	r1, r3
 8009120:	4b38      	ldr	r3, [pc, #224]	; (8009204 <mix_sub_columns+0x3c4>)
 8009122:	5c5b      	ldrb	r3, [r3, r1]
 8009124:	4053      	eors	r3, r2
 8009126:	b2da      	uxtb	r2, r3
 8009128:	183b      	adds	r3, r7, r0
 800912a:	799b      	ldrb	r3, [r3, #6]
 800912c:	0019      	movs	r1, r3
 800912e:	4b36      	ldr	r3, [pc, #216]	; (8009208 <mix_sub_columns+0x3c8>)
 8009130:	5c5b      	ldrb	r3, [r3, r1]
 8009132:	4053      	eors	r3, r2
 8009134:	b2d9      	uxtb	r1, r3
 8009136:	183b      	adds	r3, r7, r0
 8009138:	7adb      	ldrb	r3, [r3, #11]
 800913a:	001a      	movs	r2, r3
 800913c:	4b32      	ldr	r3, [pc, #200]	; (8009208 <mix_sub_columns+0x3c8>)
 800913e:	5c9a      	ldrb	r2, [r3, r2]
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	330c      	adds	r3, #12
 8009144:	404a      	eors	r2, r1
 8009146:	b2d2      	uxtb	r2, r2
 8009148:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800914a:	183b      	adds	r3, r7, r0
 800914c:	7b1b      	ldrb	r3, [r3, #12]
 800914e:	001a      	movs	r2, r3
 8009150:	4b2d      	ldr	r3, [pc, #180]	; (8009208 <mix_sub_columns+0x3c8>)
 8009152:	5c9a      	ldrb	r2, [r3, r2]
 8009154:	183b      	adds	r3, r7, r0
 8009156:	785b      	ldrb	r3, [r3, #1]
 8009158:	0019      	movs	r1, r3
 800915a:	4b29      	ldr	r3, [pc, #164]	; (8009200 <mix_sub_columns+0x3c0>)
 800915c:	5c5b      	ldrb	r3, [r3, r1]
 800915e:	4053      	eors	r3, r2
 8009160:	b2da      	uxtb	r2, r3
 8009162:	183b      	adds	r3, r7, r0
 8009164:	799b      	ldrb	r3, [r3, #6]
 8009166:	0019      	movs	r1, r3
 8009168:	4b26      	ldr	r3, [pc, #152]	; (8009204 <mix_sub_columns+0x3c4>)
 800916a:	5c5b      	ldrb	r3, [r3, r1]
 800916c:	4053      	eors	r3, r2
 800916e:	b2d9      	uxtb	r1, r3
 8009170:	183b      	adds	r3, r7, r0
 8009172:	7adb      	ldrb	r3, [r3, #11]
 8009174:	001a      	movs	r2, r3
 8009176:	4b24      	ldr	r3, [pc, #144]	; (8009208 <mix_sub_columns+0x3c8>)
 8009178:	5c9a      	ldrb	r2, [r3, r2]
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	330d      	adds	r3, #13
 800917e:	404a      	eors	r2, r1
 8009180:	b2d2      	uxtb	r2, r2
 8009182:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 8009184:	183b      	adds	r3, r7, r0
 8009186:	7b1b      	ldrb	r3, [r3, #12]
 8009188:	001a      	movs	r2, r3
 800918a:	4b1f      	ldr	r3, [pc, #124]	; (8009208 <mix_sub_columns+0x3c8>)
 800918c:	5c9a      	ldrb	r2, [r3, r2]
 800918e:	183b      	adds	r3, r7, r0
 8009190:	785b      	ldrb	r3, [r3, #1]
 8009192:	0019      	movs	r1, r3
 8009194:	4b1c      	ldr	r3, [pc, #112]	; (8009208 <mix_sub_columns+0x3c8>)
 8009196:	5c5b      	ldrb	r3, [r3, r1]
 8009198:	4053      	eors	r3, r2
 800919a:	b2da      	uxtb	r2, r3
 800919c:	183b      	adds	r3, r7, r0
 800919e:	799b      	ldrb	r3, [r3, #6]
 80091a0:	0019      	movs	r1, r3
 80091a2:	4b17      	ldr	r3, [pc, #92]	; (8009200 <mix_sub_columns+0x3c0>)
 80091a4:	5c5b      	ldrb	r3, [r3, r1]
 80091a6:	4053      	eors	r3, r2
 80091a8:	b2d9      	uxtb	r1, r3
 80091aa:	183b      	adds	r3, r7, r0
 80091ac:	7adb      	ldrb	r3, [r3, #11]
 80091ae:	001a      	movs	r2, r3
 80091b0:	4b14      	ldr	r3, [pc, #80]	; (8009204 <mix_sub_columns+0x3c4>)
 80091b2:	5c9a      	ldrb	r2, [r3, r2]
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	330e      	adds	r3, #14
 80091b8:	404a      	eors	r2, r1
 80091ba:	b2d2      	uxtb	r2, r2
 80091bc:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 80091be:	183b      	adds	r3, r7, r0
 80091c0:	7b1b      	ldrb	r3, [r3, #12]
 80091c2:	001a      	movs	r2, r3
 80091c4:	4b0f      	ldr	r3, [pc, #60]	; (8009204 <mix_sub_columns+0x3c4>)
 80091c6:	5c9a      	ldrb	r2, [r3, r2]
 80091c8:	183b      	adds	r3, r7, r0
 80091ca:	785b      	ldrb	r3, [r3, #1]
 80091cc:	0019      	movs	r1, r3
 80091ce:	4b0e      	ldr	r3, [pc, #56]	; (8009208 <mix_sub_columns+0x3c8>)
 80091d0:	5c5b      	ldrb	r3, [r3, r1]
 80091d2:	4053      	eors	r3, r2
 80091d4:	b2da      	uxtb	r2, r3
 80091d6:	183b      	adds	r3, r7, r0
 80091d8:	799b      	ldrb	r3, [r3, #6]
 80091da:	0019      	movs	r1, r3
 80091dc:	4b0a      	ldr	r3, [pc, #40]	; (8009208 <mix_sub_columns+0x3c8>)
 80091de:	5c5b      	ldrb	r3, [r3, r1]
 80091e0:	4053      	eors	r3, r2
 80091e2:	b2d9      	uxtb	r1, r3
 80091e4:	183b      	adds	r3, r7, r0
 80091e6:	7adb      	ldrb	r3, [r3, #11]
 80091e8:	001a      	movs	r2, r3
 80091ea:	4b05      	ldr	r3, [pc, #20]	; (8009200 <mix_sub_columns+0x3c0>)
 80091ec:	5c9a      	ldrb	r2, [r3, r2]
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	330f      	adds	r3, #15
 80091f2:	404a      	eors	r2, r1
 80091f4:	b2d2      	uxtb	r2, r2
 80091f6:	701a      	strb	r2, [r3, #0]
  }
 80091f8:	46c0      	nop			; (mov r8, r8)
 80091fa:	46bd      	mov	sp, r7
 80091fc:	b007      	add	sp, #28
 80091fe:	bd90      	pop	{r4, r7, pc}
 8009200:	0802068c 	.word	0x0802068c
 8009204:	0802078c 	.word	0x0802078c
 8009208:	0802058c 	.word	0x0802058c

0800920c <aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type aes_set_key( const uint8_t key[], length_type keylen, aes_context ctx[1] )
{
 800920c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800920e:	b087      	sub	sp, #28
 8009210:	af00      	add	r7, sp, #0
 8009212:	60f8      	str	r0, [r7, #12]
 8009214:	607a      	str	r2, [r7, #4]
 8009216:	200b      	movs	r0, #11
 8009218:	183b      	adds	r3, r7, r0
 800921a:	1c0a      	adds	r2, r1, #0
 800921c:	701a      	strb	r2, [r3, #0]
    uint8_t cc, rc, hi;

    switch( keylen )
 800921e:	183b      	adds	r3, r7, r0
 8009220:	781b      	ldrb	r3, [r3, #0]
 8009222:	2b18      	cmp	r3, #24
 8009224:	d009      	beq.n	800923a <aes_set_key+0x2e>
 8009226:	2b20      	cmp	r3, #32
 8009228:	d007      	beq.n	800923a <aes_set_key+0x2e>
 800922a:	2b10      	cmp	r3, #16
 800922c:	d005      	beq.n	800923a <aes_set_key+0x2e>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	22f0      	movs	r2, #240	; 0xf0
 8009232:	2100      	movs	r1, #0
 8009234:	5499      	strb	r1, [r3, r2]
        return ( uint8_t )-1;
 8009236:	23ff      	movs	r3, #255	; 0xff
 8009238:	e113      	b.n	8009462 <aes_set_key+0x256>
        break;
 800923a:	46c0      	nop			; (mov r8, r8)
    }
    block_copy_nn(ctx->ksch, key, keylen);
 800923c:	6878      	ldr	r0, [r7, #4]
 800923e:	240b      	movs	r4, #11
 8009240:	193b      	adds	r3, r7, r4
 8009242:	781a      	ldrb	r2, [r3, #0]
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	0019      	movs	r1, r3
 8009248:	f7ff fbc0 	bl	80089cc <copy_block_nn>
    hi = (keylen + 28) << 2;
 800924c:	0020      	movs	r0, r4
 800924e:	183b      	adds	r3, r7, r0
 8009250:	781b      	ldrb	r3, [r3, #0]
 8009252:	331c      	adds	r3, #28
 8009254:	b2da      	uxtb	r2, r3
 8009256:	2111      	movs	r1, #17
 8009258:	187b      	adds	r3, r7, r1
 800925a:	0092      	lsls	r2, r2, #2
 800925c:	701a      	strb	r2, [r3, #0]
    ctx->rnd = (hi >> 4) - 1;
 800925e:	187b      	adds	r3, r7, r1
 8009260:	781b      	ldrb	r3, [r3, #0]
 8009262:	091b      	lsrs	r3, r3, #4
 8009264:	b2db      	uxtb	r3, r3
 8009266:	3b01      	subs	r3, #1
 8009268:	b2d9      	uxtb	r1, r3
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	22f0      	movs	r2, #240	; 0xf0
 800926e:	5499      	strb	r1, [r3, r2]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8009270:	2317      	movs	r3, #23
 8009272:	18fb      	adds	r3, r7, r3
 8009274:	183a      	adds	r2, r7, r0
 8009276:	7812      	ldrb	r2, [r2, #0]
 8009278:	701a      	strb	r2, [r3, #0]
 800927a:	2316      	movs	r3, #22
 800927c:	18fb      	adds	r3, r7, r3
 800927e:	2201      	movs	r2, #1
 8009280:	701a      	strb	r2, [r3, #0]
 8009282:	e0e4      	b.n	800944e <aes_set_key+0x242>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 8009284:	2017      	movs	r0, #23
 8009286:	183b      	adds	r3, r7, r0
 8009288:	781b      	ldrb	r3, [r3, #0]
 800928a:	1f1a      	subs	r2, r3, #4
 800928c:	2315      	movs	r3, #21
 800928e:	18fb      	adds	r3, r7, r3
 8009290:	6879      	ldr	r1, [r7, #4]
 8009292:	5c8a      	ldrb	r2, [r1, r2]
 8009294:	701a      	strb	r2, [r3, #0]
        t1 = ctx->ksch[cc - 3];
 8009296:	183b      	adds	r3, r7, r0
 8009298:	781b      	ldrb	r3, [r3, #0]
 800929a:	1eda      	subs	r2, r3, #3
 800929c:	2314      	movs	r3, #20
 800929e:	18fb      	adds	r3, r7, r3
 80092a0:	6879      	ldr	r1, [r7, #4]
 80092a2:	5c8a      	ldrb	r2, [r1, r2]
 80092a4:	701a      	strb	r2, [r3, #0]
        t2 = ctx->ksch[cc - 2];
 80092a6:	183b      	adds	r3, r7, r0
 80092a8:	781b      	ldrb	r3, [r3, #0]
 80092aa:	1e9a      	subs	r2, r3, #2
 80092ac:	2313      	movs	r3, #19
 80092ae:	18fb      	adds	r3, r7, r3
 80092b0:	6879      	ldr	r1, [r7, #4]
 80092b2:	5c8a      	ldrb	r2, [r1, r2]
 80092b4:	701a      	strb	r2, [r3, #0]
        t3 = ctx->ksch[cc - 1];
 80092b6:	183b      	adds	r3, r7, r0
 80092b8:	781b      	ldrb	r3, [r3, #0]
 80092ba:	1e5a      	subs	r2, r3, #1
 80092bc:	2312      	movs	r3, #18
 80092be:	18fb      	adds	r3, r7, r3
 80092c0:	6879      	ldr	r1, [r7, #4]
 80092c2:	5c8a      	ldrb	r2, [r1, r2]
 80092c4:	701a      	strb	r2, [r3, #0]
        if( cc % keylen == 0 )
 80092c6:	183a      	adds	r2, r7, r0
 80092c8:	230b      	movs	r3, #11
 80092ca:	18fb      	adds	r3, r7, r3
 80092cc:	7812      	ldrb	r2, [r2, #0]
 80092ce:	781b      	ldrb	r3, [r3, #0]
 80092d0:	0019      	movs	r1, r3
 80092d2:	0010      	movs	r0, r2
 80092d4:	f7f6 ffa6 	bl	8000224 <__aeabi_uidivmod>
 80092d8:	000b      	movs	r3, r1
 80092da:	b2db      	uxtb	r3, r3
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d13e      	bne.n	800935e <aes_set_key+0x152>
        {
            tt = t0;
 80092e0:	2410      	movs	r4, #16
 80092e2:	193b      	adds	r3, r7, r4
 80092e4:	2015      	movs	r0, #21
 80092e6:	183a      	adds	r2, r7, r0
 80092e8:	7812      	ldrb	r2, [r2, #0]
 80092ea:	701a      	strb	r2, [r3, #0]
            t0 = s_box(t1) ^ rc;
 80092ec:	2514      	movs	r5, #20
 80092ee:	197b      	adds	r3, r7, r5
 80092f0:	781b      	ldrb	r3, [r3, #0]
 80092f2:	4a5e      	ldr	r2, [pc, #376]	; (800946c <aes_set_key+0x260>)
 80092f4:	5cd1      	ldrb	r1, [r2, r3]
 80092f6:	183b      	adds	r3, r7, r0
 80092f8:	2016      	movs	r0, #22
 80092fa:	183a      	adds	r2, r7, r0
 80092fc:	7812      	ldrb	r2, [r2, #0]
 80092fe:	404a      	eors	r2, r1
 8009300:	701a      	strb	r2, [r3, #0]
            t1 = s_box(t2);
 8009302:	2613      	movs	r6, #19
 8009304:	19bb      	adds	r3, r7, r6
 8009306:	781a      	ldrb	r2, [r3, #0]
 8009308:	197b      	adds	r3, r7, r5
 800930a:	4958      	ldr	r1, [pc, #352]	; (800946c <aes_set_key+0x260>)
 800930c:	5c8a      	ldrb	r2, [r1, r2]
 800930e:	701a      	strb	r2, [r3, #0]
            t2 = s_box(t3);
 8009310:	2512      	movs	r5, #18
 8009312:	197b      	adds	r3, r7, r5
 8009314:	781a      	ldrb	r2, [r3, #0]
 8009316:	19bb      	adds	r3, r7, r6
 8009318:	4954      	ldr	r1, [pc, #336]	; (800946c <aes_set_key+0x260>)
 800931a:	5c8a      	ldrb	r2, [r1, r2]
 800931c:	701a      	strb	r2, [r3, #0]
            t3 = s_box(tt);
 800931e:	193b      	adds	r3, r7, r4
 8009320:	781a      	ldrb	r2, [r3, #0]
 8009322:	197b      	adds	r3, r7, r5
 8009324:	4951      	ldr	r1, [pc, #324]	; (800946c <aes_set_key+0x260>)
 8009326:	5c8a      	ldrb	r2, [r1, r2]
 8009328:	701a      	strb	r2, [r3, #0]
            rc = f2(rc);
 800932a:	183b      	adds	r3, r7, r0
 800932c:	781b      	ldrb	r3, [r3, #0]
 800932e:	005b      	lsls	r3, r3, #1
 8009330:	b25a      	sxtb	r2, r3
 8009332:	0004      	movs	r4, r0
 8009334:	183b      	adds	r3, r7, r0
 8009336:	781b      	ldrb	r3, [r3, #0]
 8009338:	09db      	lsrs	r3, r3, #7
 800933a:	b2db      	uxtb	r3, r3
 800933c:	1c19      	adds	r1, r3, #0
 800933e:	1c0b      	adds	r3, r1, #0
 8009340:	18db      	adds	r3, r3, r3
 8009342:	185b      	adds	r3, r3, r1
 8009344:	1c19      	adds	r1, r3, #0
 8009346:	00c8      	lsls	r0, r1, #3
 8009348:	1c19      	adds	r1, r3, #0
 800934a:	1c03      	adds	r3, r0, #0
 800934c:	18cb      	adds	r3, r1, r3
 800934e:	b2db      	uxtb	r3, r3
 8009350:	b25b      	sxtb	r3, r3
 8009352:	4053      	eors	r3, r2
 8009354:	b25a      	sxtb	r2, r3
 8009356:	0020      	movs	r0, r4
 8009358:	183b      	adds	r3, r7, r0
 800935a:	701a      	strb	r2, [r3, #0]
 800935c:	e02e      	b.n	80093bc <aes_set_key+0x1b0>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 800935e:	230b      	movs	r3, #11
 8009360:	18fb      	adds	r3, r7, r3
 8009362:	781b      	ldrb	r3, [r3, #0]
 8009364:	2b18      	cmp	r3, #24
 8009366:	d929      	bls.n	80093bc <aes_set_key+0x1b0>
 8009368:	2317      	movs	r3, #23
 800936a:	18fa      	adds	r2, r7, r3
 800936c:	230b      	movs	r3, #11
 800936e:	18fb      	adds	r3, r7, r3
 8009370:	7812      	ldrb	r2, [r2, #0]
 8009372:	781b      	ldrb	r3, [r3, #0]
 8009374:	0019      	movs	r1, r3
 8009376:	0010      	movs	r0, r2
 8009378:	f7f6 ff54 	bl	8000224 <__aeabi_uidivmod>
 800937c:	000b      	movs	r3, r1
 800937e:	b2db      	uxtb	r3, r3
 8009380:	2b10      	cmp	r3, #16
 8009382:	d11b      	bne.n	80093bc <aes_set_key+0x1b0>
        {
            t0 = s_box(t0);
 8009384:	2115      	movs	r1, #21
 8009386:	187b      	adds	r3, r7, r1
 8009388:	781a      	ldrb	r2, [r3, #0]
 800938a:	187b      	adds	r3, r7, r1
 800938c:	4937      	ldr	r1, [pc, #220]	; (800946c <aes_set_key+0x260>)
 800938e:	5c8a      	ldrb	r2, [r1, r2]
 8009390:	701a      	strb	r2, [r3, #0]
            t1 = s_box(t1);
 8009392:	2114      	movs	r1, #20
 8009394:	187b      	adds	r3, r7, r1
 8009396:	781a      	ldrb	r2, [r3, #0]
 8009398:	187b      	adds	r3, r7, r1
 800939a:	4934      	ldr	r1, [pc, #208]	; (800946c <aes_set_key+0x260>)
 800939c:	5c8a      	ldrb	r2, [r1, r2]
 800939e:	701a      	strb	r2, [r3, #0]
            t2 = s_box(t2);
 80093a0:	2113      	movs	r1, #19
 80093a2:	187b      	adds	r3, r7, r1
 80093a4:	781a      	ldrb	r2, [r3, #0]
 80093a6:	187b      	adds	r3, r7, r1
 80093a8:	4930      	ldr	r1, [pc, #192]	; (800946c <aes_set_key+0x260>)
 80093aa:	5c8a      	ldrb	r2, [r1, r2]
 80093ac:	701a      	strb	r2, [r3, #0]
            t3 = s_box(t3);
 80093ae:	2112      	movs	r1, #18
 80093b0:	187b      	adds	r3, r7, r1
 80093b2:	781a      	ldrb	r2, [r3, #0]
 80093b4:	187b      	adds	r3, r7, r1
 80093b6:	492d      	ldr	r1, [pc, #180]	; (800946c <aes_set_key+0x260>)
 80093b8:	5c8a      	ldrb	r2, [r1, r2]
 80093ba:	701a      	strb	r2, [r3, #0]
        }
        tt = cc - keylen;
 80093bc:	2410      	movs	r4, #16
 80093be:	193b      	adds	r3, r7, r4
 80093c0:	2017      	movs	r0, #23
 80093c2:	1839      	adds	r1, r7, r0
 80093c4:	220b      	movs	r2, #11
 80093c6:	18ba      	adds	r2, r7, r2
 80093c8:	7809      	ldrb	r1, [r1, #0]
 80093ca:	7812      	ldrb	r2, [r2, #0]
 80093cc:	1a8a      	subs	r2, r1, r2
 80093ce:	701a      	strb	r2, [r3, #0]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 80093d0:	193b      	adds	r3, r7, r4
 80093d2:	781b      	ldrb	r3, [r3, #0]
 80093d4:	687a      	ldr	r2, [r7, #4]
 80093d6:	5cd1      	ldrb	r1, [r2, r3]
 80093d8:	183b      	adds	r3, r7, r0
 80093da:	781b      	ldrb	r3, [r3, #0]
 80093dc:	2215      	movs	r2, #21
 80093de:	18ba      	adds	r2, r7, r2
 80093e0:	7812      	ldrb	r2, [r2, #0]
 80093e2:	404a      	eors	r2, r1
 80093e4:	b2d1      	uxtb	r1, r2
 80093e6:	687a      	ldr	r2, [r7, #4]
 80093e8:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 80093ea:	193b      	adds	r3, r7, r4
 80093ec:	781b      	ldrb	r3, [r3, #0]
 80093ee:	3301      	adds	r3, #1
 80093f0:	687a      	ldr	r2, [r7, #4]
 80093f2:	5cd1      	ldrb	r1, [r2, r3]
 80093f4:	183b      	adds	r3, r7, r0
 80093f6:	781b      	ldrb	r3, [r3, #0]
 80093f8:	3301      	adds	r3, #1
 80093fa:	2214      	movs	r2, #20
 80093fc:	18ba      	adds	r2, r7, r2
 80093fe:	7812      	ldrb	r2, [r2, #0]
 8009400:	404a      	eors	r2, r1
 8009402:	b2d1      	uxtb	r1, r2
 8009404:	687a      	ldr	r2, [r7, #4]
 8009406:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 8009408:	193b      	adds	r3, r7, r4
 800940a:	781b      	ldrb	r3, [r3, #0]
 800940c:	3302      	adds	r3, #2
 800940e:	687a      	ldr	r2, [r7, #4]
 8009410:	5cd1      	ldrb	r1, [r2, r3]
 8009412:	183b      	adds	r3, r7, r0
 8009414:	781b      	ldrb	r3, [r3, #0]
 8009416:	3302      	adds	r3, #2
 8009418:	2213      	movs	r2, #19
 800941a:	18ba      	adds	r2, r7, r2
 800941c:	7812      	ldrb	r2, [r2, #0]
 800941e:	404a      	eors	r2, r1
 8009420:	b2d1      	uxtb	r1, r2
 8009422:	687a      	ldr	r2, [r7, #4]
 8009424:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 8009426:	193b      	adds	r3, r7, r4
 8009428:	781b      	ldrb	r3, [r3, #0]
 800942a:	3303      	adds	r3, #3
 800942c:	687a      	ldr	r2, [r7, #4]
 800942e:	5cd1      	ldrb	r1, [r2, r3]
 8009430:	183b      	adds	r3, r7, r0
 8009432:	781b      	ldrb	r3, [r3, #0]
 8009434:	3303      	adds	r3, #3
 8009436:	2212      	movs	r2, #18
 8009438:	18ba      	adds	r2, r7, r2
 800943a:	7812      	ldrb	r2, [r2, #0]
 800943c:	404a      	eors	r2, r1
 800943e:	b2d1      	uxtb	r1, r2
 8009440:	687a      	ldr	r2, [r7, #4]
 8009442:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8009444:	183b      	adds	r3, r7, r0
 8009446:	183a      	adds	r2, r7, r0
 8009448:	7812      	ldrb	r2, [r2, #0]
 800944a:	3204      	adds	r2, #4
 800944c:	701a      	strb	r2, [r3, #0]
 800944e:	2317      	movs	r3, #23
 8009450:	18fa      	adds	r2, r7, r3
 8009452:	2311      	movs	r3, #17
 8009454:	18fb      	adds	r3, r7, r3
 8009456:	7812      	ldrb	r2, [r2, #0]
 8009458:	781b      	ldrb	r3, [r3, #0]
 800945a:	429a      	cmp	r2, r3
 800945c:	d200      	bcs.n	8009460 <aes_set_key+0x254>
 800945e:	e711      	b.n	8009284 <aes_set_key+0x78>
    }
    return 0;
 8009460:	2300      	movs	r3, #0
}
 8009462:	0018      	movs	r0, r3
 8009464:	46bd      	mov	sp, r7
 8009466:	b007      	add	sp, #28
 8009468:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800946a:	46c0      	nop			; (mov r8, r8)
 800946c:	0802058c 	.word	0x0802058c

08009470 <aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const aes_context ctx[1] )
{
 8009470:	b5b0      	push	{r4, r5, r7, lr}
 8009472:	b08a      	sub	sp, #40	; 0x28
 8009474:	af00      	add	r7, sp, #0
 8009476:	60f8      	str	r0, [r7, #12]
 8009478:	60b9      	str	r1, [r7, #8]
 800947a:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	22f0      	movs	r2, #240	; 0xf0
 8009480:	5c9b      	ldrb	r3, [r3, r2]
 8009482:	2b00      	cmp	r3, #0
 8009484:	d03a      	beq.n	80094fc <aes_encrypt+0x8c>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 8009486:	687a      	ldr	r2, [r7, #4]
 8009488:	68f9      	ldr	r1, [r7, #12]
 800948a:	2314      	movs	r3, #20
 800948c:	18fb      	adds	r3, r7, r3
 800948e:	0018      	movs	r0, r3
 8009490:	f7ff fb6d 	bl	8008b6e <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 8009494:	2327      	movs	r3, #39	; 0x27
 8009496:	18fb      	adds	r3, r7, r3
 8009498:	2201      	movs	r2, #1
 800949a:	701a      	strb	r2, [r3, #0]
 800949c:	e014      	b.n	80094c8 <aes_encrypt+0x58>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800949e:	2514      	movs	r5, #20
 80094a0:	197b      	adds	r3, r7, r5
 80094a2:	0018      	movs	r0, r3
 80094a4:	f7ff fccc 	bl	8008e40 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	2427      	movs	r4, #39	; 0x27
 80094ac:	193a      	adds	r2, r7, r4
 80094ae:	7812      	ldrb	r2, [r2, #0]
 80094b0:	0112      	lsls	r2, r2, #4
 80094b2:	189a      	adds	r2, r3, r2
 80094b4:	197b      	adds	r3, r7, r5
 80094b6:	0011      	movs	r1, r2
 80094b8:	0018      	movs	r0, r3
 80094ba:	f7ff fc0f 	bl	8008cdc <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 80094be:	193b      	adds	r3, r7, r4
 80094c0:	193a      	adds	r2, r7, r4
 80094c2:	7812      	ldrb	r2, [r2, #0]
 80094c4:	3201      	adds	r2, #1
 80094c6:	701a      	strb	r2, [r3, #0]
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	22f0      	movs	r2, #240	; 0xf0
 80094cc:	5c9b      	ldrb	r3, [r3, r2]
 80094ce:	2227      	movs	r2, #39	; 0x27
 80094d0:	18ba      	adds	r2, r7, r2
 80094d2:	7812      	ldrb	r2, [r2, #0]
 80094d4:	429a      	cmp	r2, r3
 80094d6:	d3e2      	bcc.n	800949e <aes_encrypt+0x2e>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 80094d8:	2414      	movs	r4, #20
 80094da:	193b      	adds	r3, r7, r4
 80094dc:	0018      	movs	r0, r3
 80094de:	f7ff fc0d 	bl	8008cfc <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	2227      	movs	r2, #39	; 0x27
 80094e6:	18ba      	adds	r2, r7, r2
 80094e8:	7812      	ldrb	r2, [r2, #0]
 80094ea:	0112      	lsls	r2, r2, #4
 80094ec:	189a      	adds	r2, r3, r2
 80094ee:	1939      	adds	r1, r7, r4
 80094f0:	68bb      	ldr	r3, [r7, #8]
 80094f2:	0018      	movs	r0, r3
 80094f4:	f7ff fb3b 	bl	8008b6e <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 80094f8:	2300      	movs	r3, #0
 80094fa:	e000      	b.n	80094fe <aes_encrypt+0x8e>
        return ( uint8_t )-1;
 80094fc:	23ff      	movs	r3, #255	; 0xff
}
 80094fe:	0018      	movs	r0, r3
 8009500:	46bd      	mov	sp, r7
 8009502:	b00a      	add	sp, #40	; 0x28
 8009504:	bdb0      	pop	{r4, r5, r7, pc}

08009506 <AES_CMAC_Init>:
        }                          \
    } while (0) \


void AES_CMAC_Init(AES_CMAC_CTX *ctx)
{
 8009506:	b580      	push	{r7, lr}
 8009508:	b082      	sub	sp, #8
 800950a:	af00      	add	r7, sp, #0
 800950c:	6078      	str	r0, [r7, #4]
            memset1(ctx->X, 0, sizeof ctx->X);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	33f1      	adds	r3, #241	; 0xf1
 8009512:	2210      	movs	r2, #16
 8009514:	2100      	movs	r1, #0
 8009516:	0018      	movs	r0, r3
 8009518:	f00c f91e 	bl	8015758 <memset1>
            ctx->M_n = 0;
 800951c:	687a      	ldr	r2, [r7, #4]
 800951e:	238a      	movs	r3, #138	; 0x8a
 8009520:	005b      	lsls	r3, r3, #1
 8009522:	2100      	movs	r1, #0
 8009524:	50d1      	str	r1, [r2, r3]
        memset1(ctx->rijndael.ksch, '\0', 240);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	22f0      	movs	r2, #240	; 0xf0
 800952a:	2100      	movs	r1, #0
 800952c:	0018      	movs	r0, r3
 800952e:	f00c f913 	bl	8015758 <memset1>
}
 8009532:	46c0      	nop			; (mov r8, r8)
 8009534:	46bd      	mov	sp, r7
 8009536:	b002      	add	sp, #8
 8009538:	bd80      	pop	{r7, pc}

0800953a <AES_CMAC_SetKey>:
    
void AES_CMAC_SetKey(AES_CMAC_CTX *ctx, const uint8_t key[AES_CMAC_KEY_LENGTH])
{
 800953a:	b580      	push	{r7, lr}
 800953c:	b082      	sub	sp, #8
 800953e:	af00      	add	r7, sp, #0
 8009540:	6078      	str	r0, [r7, #4]
 8009542:	6039      	str	r1, [r7, #0]
           //rijndael_set_key_enc_only(&ctx->rijndael, key, 128);
       aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael);
 8009544:	687a      	ldr	r2, [r7, #4]
 8009546:	683b      	ldr	r3, [r7, #0]
 8009548:	2110      	movs	r1, #16
 800954a:	0018      	movs	r0, r3
 800954c:	f7ff fe5e 	bl	800920c <aes_set_key>
}
 8009550:	46c0      	nop			; (mov r8, r8)
 8009552:	46bd      	mov	sp, r7
 8009554:	b002      	add	sp, #8
 8009556:	bd80      	pop	{r7, pc}

08009558 <AES_CMAC_Update>:
    
void AES_CMAC_Update(AES_CMAC_CTX *ctx, const uint8_t *data, uint32_t len)
{
 8009558:	b590      	push	{r4, r7, lr}
 800955a:	b08d      	sub	sp, #52	; 0x34
 800955c:	af00      	add	r7, sp, #0
 800955e:	60f8      	str	r0, [r7, #12]
 8009560:	60b9      	str	r1, [r7, #8]
 8009562:	607a      	str	r2, [r7, #4]
            uint32_t mlen;
        uint8_t in[16];
    
            if (ctx->M_n > 0) {
 8009564:	68fa      	ldr	r2, [r7, #12]
 8009566:	238a      	movs	r3, #138	; 0x8a
 8009568:	005b      	lsls	r3, r3, #1
 800956a:	58d3      	ldr	r3, [r2, r3]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d100      	bne.n	8009572 <AES_CMAC_Update+0x1a>
 8009570:	e097      	b.n	80096a2 <AES_CMAC_Update+0x14a>
                  mlen = MIN(16 - ctx->M_n, len);
 8009572:	68fa      	ldr	r2, [r7, #12]
 8009574:	238a      	movs	r3, #138	; 0x8a
 8009576:	005b      	lsls	r3, r3, #1
 8009578:	58d3      	ldr	r3, [r2, r3]
 800957a:	2210      	movs	r2, #16
 800957c:	1ad2      	subs	r2, r2, r3
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	4293      	cmp	r3, r2
 8009582:	d900      	bls.n	8009586 <AES_CMAC_Update+0x2e>
 8009584:	0013      	movs	r3, r2
 8009586:	627b      	str	r3, [r7, #36]	; 0x24
                    memcpy1(ctx->M_last + ctx->M_n, data, mlen);
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	1c9a      	adds	r2, r3, #2
 800958c:	32ff      	adds	r2, #255	; 0xff
 800958e:	68f9      	ldr	r1, [r7, #12]
 8009590:	238a      	movs	r3, #138	; 0x8a
 8009592:	005b      	lsls	r3, r3, #1
 8009594:	58cb      	ldr	r3, [r1, r3]
 8009596:	18d3      	adds	r3, r2, r3
 8009598:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800959a:	b292      	uxth	r2, r2
 800959c:	68b9      	ldr	r1, [r7, #8]
 800959e:	0018      	movs	r0, r3
 80095a0:	f00c f89e 	bl	80156e0 <memcpy1>
                    ctx->M_n += mlen;
 80095a4:	68fa      	ldr	r2, [r7, #12]
 80095a6:	238a      	movs	r3, #138	; 0x8a
 80095a8:	005b      	lsls	r3, r3, #1
 80095aa:	58d2      	ldr	r2, [r2, r3]
 80095ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ae:	18d1      	adds	r1, r2, r3
 80095b0:	68fa      	ldr	r2, [r7, #12]
 80095b2:	238a      	movs	r3, #138	; 0x8a
 80095b4:	005b      	lsls	r3, r3, #1
 80095b6:	50d1      	str	r1, [r2, r3]
                    if (ctx->M_n < 16 || len == mlen)
 80095b8:	68fa      	ldr	r2, [r7, #12]
 80095ba:	238a      	movs	r3, #138	; 0x8a
 80095bc:	005b      	lsls	r3, r3, #1
 80095be:	58d3      	ldr	r3, [r2, r3]
 80095c0:	2b0f      	cmp	r3, #15
 80095c2:	d800      	bhi.n	80095c6 <AES_CMAC_Update+0x6e>
 80095c4:	e07f      	b.n	80096c6 <AES_CMAC_Update+0x16e>
 80095c6:	687a      	ldr	r2, [r7, #4]
 80095c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ca:	429a      	cmp	r2, r3
 80095cc:	d100      	bne.n	80095d0 <AES_CMAC_Update+0x78>
 80095ce:	e07a      	b.n	80096c6 <AES_CMAC_Update+0x16e>
                            return;
                   XOR(ctx->M_last, ctx->X);
 80095d0:	2300      	movs	r3, #0
 80095d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80095d4:	e018      	b.n	8009608 <AES_CMAC_Update+0xb0>
 80095d6:	68fa      	ldr	r2, [r7, #12]
 80095d8:	21f1      	movs	r1, #241	; 0xf1
 80095da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095dc:	18d3      	adds	r3, r2, r3
 80095de:	185b      	adds	r3, r3, r1
 80095e0:	781a      	ldrb	r2, [r3, #0]
 80095e2:	68f8      	ldr	r0, [r7, #12]
 80095e4:	2302      	movs	r3, #2
 80095e6:	33ff      	adds	r3, #255	; 0xff
 80095e8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80095ea:	1841      	adds	r1, r0, r1
 80095ec:	18cb      	adds	r3, r1, r3
 80095ee:	781b      	ldrb	r3, [r3, #0]
 80095f0:	4053      	eors	r3, r2
 80095f2:	b2d8      	uxtb	r0, r3
 80095f4:	68fa      	ldr	r2, [r7, #12]
 80095f6:	21f1      	movs	r1, #241	; 0xf1
 80095f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095fa:	18d3      	adds	r3, r2, r3
 80095fc:	185b      	adds	r3, r3, r1
 80095fe:	1c02      	adds	r2, r0, #0
 8009600:	701a      	strb	r2, [r3, #0]
 8009602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009604:	3301      	adds	r3, #1
 8009606:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800960a:	2b0f      	cmp	r3, #15
 800960c:	dde3      	ble.n	80095d6 <AES_CMAC_Update+0x7e>
                    //rijndael_encrypt(&ctx->rijndael, ctx->X, ctx->X);
            aes_encrypt( ctx->X, ctx->X, &ctx->rijndael);
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	33f1      	adds	r3, #241	; 0xf1
 8009612:	0018      	movs	r0, r3
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	33f1      	adds	r3, #241	; 0xf1
 8009618:	68fa      	ldr	r2, [r7, #12]
 800961a:	0019      	movs	r1, r3
 800961c:	f7ff ff28 	bl	8009470 <aes_encrypt>
                    data += mlen;
 8009620:	68ba      	ldr	r2, [r7, #8]
 8009622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009624:	18d3      	adds	r3, r2, r3
 8009626:	60bb      	str	r3, [r7, #8]
                    len -= mlen;
 8009628:	687a      	ldr	r2, [r7, #4]
 800962a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800962c:	1ad3      	subs	r3, r2, r3
 800962e:	607b      	str	r3, [r7, #4]
            }
            while (len > 16) {      /* not last block */
 8009630:	e037      	b.n	80096a2 <AES_CMAC_Update+0x14a>

                    XOR(data, ctx->X);
 8009632:	2300      	movs	r3, #0
 8009634:	62bb      	str	r3, [r7, #40]	; 0x28
 8009636:	e015      	b.n	8009664 <AES_CMAC_Update+0x10c>
 8009638:	68fa      	ldr	r2, [r7, #12]
 800963a:	21f1      	movs	r1, #241	; 0xf1
 800963c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800963e:	18d3      	adds	r3, r2, r3
 8009640:	185b      	adds	r3, r3, r1
 8009642:	781a      	ldrb	r2, [r3, #0]
 8009644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009646:	68b9      	ldr	r1, [r7, #8]
 8009648:	18cb      	adds	r3, r1, r3
 800964a:	781b      	ldrb	r3, [r3, #0]
 800964c:	4053      	eors	r3, r2
 800964e:	b2d8      	uxtb	r0, r3
 8009650:	68fa      	ldr	r2, [r7, #12]
 8009652:	21f1      	movs	r1, #241	; 0xf1
 8009654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009656:	18d3      	adds	r3, r2, r3
 8009658:	185b      	adds	r3, r3, r1
 800965a:	1c02      	adds	r2, r0, #0
 800965c:	701a      	strb	r2, [r3, #0]
 800965e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009660:	3301      	adds	r3, #1
 8009662:	62bb      	str	r3, [r7, #40]	; 0x28
 8009664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009666:	2b0f      	cmp	r3, #15
 8009668:	dde6      	ble.n	8009638 <AES_CMAC_Update+0xe0>
                    //rijndael_encrypt(&ctx->rijndael, ctx->X, ctx->X);

                    memcpy1(in, &ctx->X[0], 16); //Bestela ez du ondo iten
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	33f1      	adds	r3, #241	; 0xf1
 800966e:	0019      	movs	r1, r3
 8009670:	2414      	movs	r4, #20
 8009672:	193b      	adds	r3, r7, r4
 8009674:	2210      	movs	r2, #16
 8009676:	0018      	movs	r0, r3
 8009678:	f00c f832 	bl	80156e0 <memcpy1>
            aes_encrypt( in, in, &ctx->rijndael);
 800967c:	68fa      	ldr	r2, [r7, #12]
 800967e:	1939      	adds	r1, r7, r4
 8009680:	193b      	adds	r3, r7, r4
 8009682:	0018      	movs	r0, r3
 8009684:	f7ff fef4 	bl	8009470 <aes_encrypt>
                    memcpy1(&ctx->X[0], in, 16);
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	33f1      	adds	r3, #241	; 0xf1
 800968c:	1939      	adds	r1, r7, r4
 800968e:	2210      	movs	r2, #16
 8009690:	0018      	movs	r0, r3
 8009692:	f00c f825 	bl	80156e0 <memcpy1>

                    data += 16;
 8009696:	68bb      	ldr	r3, [r7, #8]
 8009698:	3310      	adds	r3, #16
 800969a:	60bb      	str	r3, [r7, #8]
                    len -= 16;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	3b10      	subs	r3, #16
 80096a0:	607b      	str	r3, [r7, #4]
            while (len > 16) {      /* not last block */
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	2b10      	cmp	r3, #16
 80096a6:	d8c4      	bhi.n	8009632 <AES_CMAC_Update+0xda>
            }
            /* potential last block, save it */
            memcpy1(ctx->M_last, data, len);
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	3302      	adds	r3, #2
 80096ac:	33ff      	adds	r3, #255	; 0xff
 80096ae:	687a      	ldr	r2, [r7, #4]
 80096b0:	b292      	uxth	r2, r2
 80096b2:	68b9      	ldr	r1, [r7, #8]
 80096b4:	0018      	movs	r0, r3
 80096b6:	f00c f813 	bl	80156e0 <memcpy1>
            ctx->M_n = len;
 80096ba:	68fa      	ldr	r2, [r7, #12]
 80096bc:	238a      	movs	r3, #138	; 0x8a
 80096be:	005b      	lsls	r3, r3, #1
 80096c0:	6879      	ldr	r1, [r7, #4]
 80096c2:	50d1      	str	r1, [r2, r3]
 80096c4:	e000      	b.n	80096c8 <AES_CMAC_Update+0x170>
                            return;
 80096c6:	46c0      	nop			; (mov r8, r8)
}
 80096c8:	46bd      	mov	sp, r7
 80096ca:	b00d      	add	sp, #52	; 0x34
 80096cc:	bd90      	pop	{r4, r7, pc}

080096ce <AES_CMAC_Final>:
   
void AES_CMAC_Final(uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX *ctx)
{
 80096ce:	b590      	push	{r4, r7, lr}
 80096d0:	b093      	sub	sp, #76	; 0x4c
 80096d2:	af00      	add	r7, sp, #0
 80096d4:	6078      	str	r0, [r7, #4]
 80096d6:	6039      	str	r1, [r7, #0]
            uint8_t K[16];
        uint8_t in[16];
            /* generate subkey K1 */
            memset1(K, '\0', 16);
 80096d8:	241c      	movs	r4, #28
 80096da:	193b      	adds	r3, r7, r4
 80096dc:	2210      	movs	r2, #16
 80096de:	2100      	movs	r1, #0
 80096e0:	0018      	movs	r0, r3
 80096e2:	f00c f839 	bl	8015758 <memset1>

            //rijndael_encrypt(&ctx->rijndael, K, K);

            aes_encrypt( K, K, &ctx->rijndael);
 80096e6:	683a      	ldr	r2, [r7, #0]
 80096e8:	1939      	adds	r1, r7, r4
 80096ea:	193b      	adds	r3, r7, r4
 80096ec:	0018      	movs	r0, r3
 80096ee:	f7ff febf 	bl	8009470 <aes_encrypt>

            if (K[0] & 0x80) {
 80096f2:	193b      	adds	r3, r7, r4
 80096f4:	781b      	ldrb	r3, [r3, #0]
 80096f6:	b25b      	sxtb	r3, r3
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	da2e      	bge.n	800975a <AES_CMAC_Final+0x8c>
                    LSHIFT(K, K);
 80096fc:	2300      	movs	r3, #0
 80096fe:	647b      	str	r3, [r7, #68]	; 0x44
 8009700:	e018      	b.n	8009734 <AES_CMAC_Final+0x66>
 8009702:	201c      	movs	r0, #28
 8009704:	183a      	adds	r2, r7, r0
 8009706:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009708:	18d3      	adds	r3, r2, r3
 800970a:	781b      	ldrb	r3, [r3, #0]
 800970c:	005b      	lsls	r3, r3, #1
 800970e:	b25a      	sxtb	r2, r3
 8009710:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009712:	3301      	adds	r3, #1
 8009714:	1839      	adds	r1, r7, r0
 8009716:	5ccb      	ldrb	r3, [r1, r3]
 8009718:	09db      	lsrs	r3, r3, #7
 800971a:	b2db      	uxtb	r3, r3
 800971c:	b25b      	sxtb	r3, r3
 800971e:	4313      	orrs	r3, r2
 8009720:	b25b      	sxtb	r3, r3
 8009722:	b2d9      	uxtb	r1, r3
 8009724:	183a      	adds	r2, r7, r0
 8009726:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009728:	18d3      	adds	r3, r2, r3
 800972a:	1c0a      	adds	r2, r1, #0
 800972c:	701a      	strb	r2, [r3, #0]
 800972e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009730:	3301      	adds	r3, #1
 8009732:	647b      	str	r3, [r7, #68]	; 0x44
 8009734:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009736:	2b0e      	cmp	r3, #14
 8009738:	dde3      	ble.n	8009702 <AES_CMAC_Final+0x34>
 800973a:	211c      	movs	r1, #28
 800973c:	187b      	adds	r3, r7, r1
 800973e:	7bdb      	ldrb	r3, [r3, #15]
 8009740:	18db      	adds	r3, r3, r3
 8009742:	b2da      	uxtb	r2, r3
 8009744:	187b      	adds	r3, r7, r1
 8009746:	73da      	strb	r2, [r3, #15]
                   K[15] ^= 0x87;
 8009748:	187b      	adds	r3, r7, r1
 800974a:	7bdb      	ldrb	r3, [r3, #15]
 800974c:	2279      	movs	r2, #121	; 0x79
 800974e:	4252      	negs	r2, r2
 8009750:	4053      	eors	r3, r2
 8009752:	b2da      	uxtb	r2, r3
 8009754:	187b      	adds	r3, r7, r1
 8009756:	73da      	strb	r2, [r3, #15]
 8009758:	e025      	b.n	80097a6 <AES_CMAC_Final+0xd8>
            } else
                    LSHIFT(K, K);
 800975a:	2300      	movs	r3, #0
 800975c:	643b      	str	r3, [r7, #64]	; 0x40
 800975e:	e018      	b.n	8009792 <AES_CMAC_Final+0xc4>
 8009760:	201c      	movs	r0, #28
 8009762:	183a      	adds	r2, r7, r0
 8009764:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009766:	18d3      	adds	r3, r2, r3
 8009768:	781b      	ldrb	r3, [r3, #0]
 800976a:	005b      	lsls	r3, r3, #1
 800976c:	b25a      	sxtb	r2, r3
 800976e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009770:	3301      	adds	r3, #1
 8009772:	1839      	adds	r1, r7, r0
 8009774:	5ccb      	ldrb	r3, [r1, r3]
 8009776:	09db      	lsrs	r3, r3, #7
 8009778:	b2db      	uxtb	r3, r3
 800977a:	b25b      	sxtb	r3, r3
 800977c:	4313      	orrs	r3, r2
 800977e:	b25b      	sxtb	r3, r3
 8009780:	b2d9      	uxtb	r1, r3
 8009782:	183a      	adds	r2, r7, r0
 8009784:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009786:	18d3      	adds	r3, r2, r3
 8009788:	1c0a      	adds	r2, r1, #0
 800978a:	701a      	strb	r2, [r3, #0]
 800978c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800978e:	3301      	adds	r3, #1
 8009790:	643b      	str	r3, [r7, #64]	; 0x40
 8009792:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009794:	2b0e      	cmp	r3, #14
 8009796:	dde3      	ble.n	8009760 <AES_CMAC_Final+0x92>
 8009798:	211c      	movs	r1, #28
 800979a:	187b      	adds	r3, r7, r1
 800979c:	7bdb      	ldrb	r3, [r3, #15]
 800979e:	18db      	adds	r3, r3, r3
 80097a0:	b2da      	uxtb	r2, r3
 80097a2:	187b      	adds	r3, r7, r1
 80097a4:	73da      	strb	r2, [r3, #15]


            if (ctx->M_n == 16) {
 80097a6:	683a      	ldr	r2, [r7, #0]
 80097a8:	238a      	movs	r3, #138	; 0x8a
 80097aa:	005b      	lsls	r3, r3, #1
 80097ac:	58d3      	ldr	r3, [r2, r3]
 80097ae:	2b10      	cmp	r3, #16
 80097b0:	d11f      	bne.n	80097f2 <AES_CMAC_Final+0x124>
                    /* last block was a complete block */
                    XOR(K, ctx->M_last);
 80097b2:	2300      	movs	r3, #0
 80097b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80097b6:	e018      	b.n	80097ea <AES_CMAC_Final+0x11c>
 80097b8:	6839      	ldr	r1, [r7, #0]
 80097ba:	2302      	movs	r3, #2
 80097bc:	33ff      	adds	r3, #255	; 0xff
 80097be:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80097c0:	188a      	adds	r2, r1, r2
 80097c2:	18d3      	adds	r3, r2, r3
 80097c4:	781a      	ldrb	r2, [r3, #0]
 80097c6:	231c      	movs	r3, #28
 80097c8:	18f9      	adds	r1, r7, r3
 80097ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097cc:	18cb      	adds	r3, r1, r3
 80097ce:	781b      	ldrb	r3, [r3, #0]
 80097d0:	4053      	eors	r3, r2
 80097d2:	b2d8      	uxtb	r0, r3
 80097d4:	6839      	ldr	r1, [r7, #0]
 80097d6:	2302      	movs	r3, #2
 80097d8:	33ff      	adds	r3, #255	; 0xff
 80097da:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80097dc:	188a      	adds	r2, r1, r2
 80097de:	18d3      	adds	r3, r2, r3
 80097e0:	1c02      	adds	r2, r0, #0
 80097e2:	701a      	strb	r2, [r3, #0]
 80097e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097e6:	3301      	adds	r3, #1
 80097e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80097ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097ec:	2b0f      	cmp	r3, #15
 80097ee:	dde3      	ble.n	80097b8 <AES_CMAC_Final+0xea>
 80097f0:	e09f      	b.n	8009932 <AES_CMAC_Final+0x264>

           } else {
                   /* generate subkey K2 */
                  if (K[0] & 0x80) {
 80097f2:	231c      	movs	r3, #28
 80097f4:	18fb      	adds	r3, r7, r3
 80097f6:	781b      	ldrb	r3, [r3, #0]
 80097f8:	b25b      	sxtb	r3, r3
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	da2e      	bge.n	800985c <AES_CMAC_Final+0x18e>
                          LSHIFT(K, K);
 80097fe:	2300      	movs	r3, #0
 8009800:	63bb      	str	r3, [r7, #56]	; 0x38
 8009802:	e018      	b.n	8009836 <AES_CMAC_Final+0x168>
 8009804:	201c      	movs	r0, #28
 8009806:	183a      	adds	r2, r7, r0
 8009808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800980a:	18d3      	adds	r3, r2, r3
 800980c:	781b      	ldrb	r3, [r3, #0]
 800980e:	005b      	lsls	r3, r3, #1
 8009810:	b25a      	sxtb	r2, r3
 8009812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009814:	3301      	adds	r3, #1
 8009816:	1839      	adds	r1, r7, r0
 8009818:	5ccb      	ldrb	r3, [r1, r3]
 800981a:	09db      	lsrs	r3, r3, #7
 800981c:	b2db      	uxtb	r3, r3
 800981e:	b25b      	sxtb	r3, r3
 8009820:	4313      	orrs	r3, r2
 8009822:	b25b      	sxtb	r3, r3
 8009824:	b2d9      	uxtb	r1, r3
 8009826:	183a      	adds	r2, r7, r0
 8009828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800982a:	18d3      	adds	r3, r2, r3
 800982c:	1c0a      	adds	r2, r1, #0
 800982e:	701a      	strb	r2, [r3, #0]
 8009830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009832:	3301      	adds	r3, #1
 8009834:	63bb      	str	r3, [r7, #56]	; 0x38
 8009836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009838:	2b0e      	cmp	r3, #14
 800983a:	dde3      	ble.n	8009804 <AES_CMAC_Final+0x136>
 800983c:	211c      	movs	r1, #28
 800983e:	187b      	adds	r3, r7, r1
 8009840:	7bdb      	ldrb	r3, [r3, #15]
 8009842:	18db      	adds	r3, r3, r3
 8009844:	b2da      	uxtb	r2, r3
 8009846:	187b      	adds	r3, r7, r1
 8009848:	73da      	strb	r2, [r3, #15]
                          K[15] ^= 0x87;
 800984a:	187b      	adds	r3, r7, r1
 800984c:	7bdb      	ldrb	r3, [r3, #15]
 800984e:	2279      	movs	r2, #121	; 0x79
 8009850:	4252      	negs	r2, r2
 8009852:	4053      	eors	r3, r2
 8009854:	b2da      	uxtb	r2, r3
 8009856:	187b      	adds	r3, r7, r1
 8009858:	73da      	strb	r2, [r3, #15]
 800985a:	e025      	b.n	80098a8 <AES_CMAC_Final+0x1da>
                  } else
                           LSHIFT(K, K);
 800985c:	2300      	movs	r3, #0
 800985e:	637b      	str	r3, [r7, #52]	; 0x34
 8009860:	e018      	b.n	8009894 <AES_CMAC_Final+0x1c6>
 8009862:	201c      	movs	r0, #28
 8009864:	183a      	adds	r2, r7, r0
 8009866:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009868:	18d3      	adds	r3, r2, r3
 800986a:	781b      	ldrb	r3, [r3, #0]
 800986c:	005b      	lsls	r3, r3, #1
 800986e:	b25a      	sxtb	r2, r3
 8009870:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009872:	3301      	adds	r3, #1
 8009874:	1839      	adds	r1, r7, r0
 8009876:	5ccb      	ldrb	r3, [r1, r3]
 8009878:	09db      	lsrs	r3, r3, #7
 800987a:	b2db      	uxtb	r3, r3
 800987c:	b25b      	sxtb	r3, r3
 800987e:	4313      	orrs	r3, r2
 8009880:	b25b      	sxtb	r3, r3
 8009882:	b2d9      	uxtb	r1, r3
 8009884:	183a      	adds	r2, r7, r0
 8009886:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009888:	18d3      	adds	r3, r2, r3
 800988a:	1c0a      	adds	r2, r1, #0
 800988c:	701a      	strb	r2, [r3, #0]
 800988e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009890:	3301      	adds	r3, #1
 8009892:	637b      	str	r3, [r7, #52]	; 0x34
 8009894:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009896:	2b0e      	cmp	r3, #14
 8009898:	dde3      	ble.n	8009862 <AES_CMAC_Final+0x194>
 800989a:	211c      	movs	r1, #28
 800989c:	187b      	adds	r3, r7, r1
 800989e:	7bdb      	ldrb	r3, [r3, #15]
 80098a0:	18db      	adds	r3, r3, r3
 80098a2:	b2da      	uxtb	r2, r3
 80098a4:	187b      	adds	r3, r7, r1
 80098a6:	73da      	strb	r2, [r3, #15]

                   /* padding(M_last) */
                   ctx->M_last[ctx->M_n] = 0x80;
 80098a8:	683a      	ldr	r2, [r7, #0]
 80098aa:	238a      	movs	r3, #138	; 0x8a
 80098ac:	005b      	lsls	r3, r3, #1
 80098ae:	58d2      	ldr	r2, [r2, r3]
 80098b0:	6839      	ldr	r1, [r7, #0]
 80098b2:	2302      	movs	r3, #2
 80098b4:	33ff      	adds	r3, #255	; 0xff
 80098b6:	188a      	adds	r2, r1, r2
 80098b8:	18d3      	adds	r3, r2, r3
 80098ba:	2280      	movs	r2, #128	; 0x80
 80098bc:	701a      	strb	r2, [r3, #0]
                   while (++ctx->M_n < 16)
 80098be:	e00a      	b.n	80098d6 <AES_CMAC_Final+0x208>
                         ctx->M_last[ctx->M_n] = 0;
 80098c0:	683a      	ldr	r2, [r7, #0]
 80098c2:	238a      	movs	r3, #138	; 0x8a
 80098c4:	005b      	lsls	r3, r3, #1
 80098c6:	58d2      	ldr	r2, [r2, r3]
 80098c8:	6839      	ldr	r1, [r7, #0]
 80098ca:	2302      	movs	r3, #2
 80098cc:	33ff      	adds	r3, #255	; 0xff
 80098ce:	188a      	adds	r2, r1, r2
 80098d0:	18d3      	adds	r3, r2, r3
 80098d2:	2200      	movs	r2, #0
 80098d4:	701a      	strb	r2, [r3, #0]
                   while (++ctx->M_n < 16)
 80098d6:	683a      	ldr	r2, [r7, #0]
 80098d8:	238a      	movs	r3, #138	; 0x8a
 80098da:	005b      	lsls	r3, r3, #1
 80098dc:	58d3      	ldr	r3, [r2, r3]
 80098de:	1c59      	adds	r1, r3, #1
 80098e0:	683a      	ldr	r2, [r7, #0]
 80098e2:	238a      	movs	r3, #138	; 0x8a
 80098e4:	005b      	lsls	r3, r3, #1
 80098e6:	50d1      	str	r1, [r2, r3]
 80098e8:	683a      	ldr	r2, [r7, #0]
 80098ea:	238a      	movs	r3, #138	; 0x8a
 80098ec:	005b      	lsls	r3, r3, #1
 80098ee:	58d3      	ldr	r3, [r2, r3]
 80098f0:	2b0f      	cmp	r3, #15
 80098f2:	d9e5      	bls.n	80098c0 <AES_CMAC_Final+0x1f2>
   
                  XOR(K, ctx->M_last);
 80098f4:	2300      	movs	r3, #0
 80098f6:	633b      	str	r3, [r7, #48]	; 0x30
 80098f8:	e018      	b.n	800992c <AES_CMAC_Final+0x25e>
 80098fa:	6839      	ldr	r1, [r7, #0]
 80098fc:	2302      	movs	r3, #2
 80098fe:	33ff      	adds	r3, #255	; 0xff
 8009900:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009902:	188a      	adds	r2, r1, r2
 8009904:	18d3      	adds	r3, r2, r3
 8009906:	781a      	ldrb	r2, [r3, #0]
 8009908:	231c      	movs	r3, #28
 800990a:	18f9      	adds	r1, r7, r3
 800990c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800990e:	18cb      	adds	r3, r1, r3
 8009910:	781b      	ldrb	r3, [r3, #0]
 8009912:	4053      	eors	r3, r2
 8009914:	b2d8      	uxtb	r0, r3
 8009916:	6839      	ldr	r1, [r7, #0]
 8009918:	2302      	movs	r3, #2
 800991a:	33ff      	adds	r3, #255	; 0xff
 800991c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800991e:	188a      	adds	r2, r1, r2
 8009920:	18d3      	adds	r3, r2, r3
 8009922:	1c02      	adds	r2, r0, #0
 8009924:	701a      	strb	r2, [r3, #0]
 8009926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009928:	3301      	adds	r3, #1
 800992a:	633b      	str	r3, [r7, #48]	; 0x30
 800992c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800992e:	2b0f      	cmp	r3, #15
 8009930:	dde3      	ble.n	80098fa <AES_CMAC_Final+0x22c>


           }
           XOR(ctx->M_last, ctx->X);
 8009932:	2300      	movs	r3, #0
 8009934:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009936:	e018      	b.n	800996a <AES_CMAC_Final+0x29c>
 8009938:	683a      	ldr	r2, [r7, #0]
 800993a:	21f1      	movs	r1, #241	; 0xf1
 800993c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800993e:	18d3      	adds	r3, r2, r3
 8009940:	185b      	adds	r3, r3, r1
 8009942:	781a      	ldrb	r2, [r3, #0]
 8009944:	6838      	ldr	r0, [r7, #0]
 8009946:	2302      	movs	r3, #2
 8009948:	33ff      	adds	r3, #255	; 0xff
 800994a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800994c:	1841      	adds	r1, r0, r1
 800994e:	18cb      	adds	r3, r1, r3
 8009950:	781b      	ldrb	r3, [r3, #0]
 8009952:	4053      	eors	r3, r2
 8009954:	b2d8      	uxtb	r0, r3
 8009956:	683a      	ldr	r2, [r7, #0]
 8009958:	21f1      	movs	r1, #241	; 0xf1
 800995a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800995c:	18d3      	adds	r3, r2, r3
 800995e:	185b      	adds	r3, r3, r1
 8009960:	1c02      	adds	r2, r0, #0
 8009962:	701a      	strb	r2, [r3, #0]
 8009964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009966:	3301      	adds	r3, #1
 8009968:	62fb      	str	r3, [r7, #44]	; 0x2c
 800996a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800996c:	2b0f      	cmp	r3, #15
 800996e:	dde3      	ble.n	8009938 <AES_CMAC_Final+0x26a>

           //rijndael_encrypt(&ctx->rijndael, ctx->X, digest);

       memcpy1(in, &ctx->X[0], 16); //Bestela ez du ondo iten
 8009970:	683b      	ldr	r3, [r7, #0]
 8009972:	33f1      	adds	r3, #241	; 0xf1
 8009974:	0019      	movs	r1, r3
 8009976:	240c      	movs	r4, #12
 8009978:	193b      	adds	r3, r7, r4
 800997a:	2210      	movs	r2, #16
 800997c:	0018      	movs	r0, r3
 800997e:	f00b feaf 	bl	80156e0 <memcpy1>
       aes_encrypt(in, digest, &ctx->rijndael);
 8009982:	683a      	ldr	r2, [r7, #0]
 8009984:	6879      	ldr	r1, [r7, #4]
 8009986:	193b      	adds	r3, r7, r4
 8009988:	0018      	movs	r0, r3
 800998a:	f7ff fd71 	bl	8009470 <aes_encrypt>
           memset1(K, 0, sizeof K);
 800998e:	231c      	movs	r3, #28
 8009990:	18fb      	adds	r3, r7, r3
 8009992:	2210      	movs	r2, #16
 8009994:	2100      	movs	r1, #0
 8009996:	0018      	movs	r0, r3
 8009998:	f00b fede 	bl	8015758 <memset1>

}
 800999c:	46c0      	nop			; (mov r8, r8)
 800999e:	46bd      	mov	sp, r7
 80099a0:	b013      	add	sp, #76	; 0x4c
 80099a2:	bd90      	pop	{r4, r7, pc}

080099a4 <GetKeyByID>:
 * \param[IN]  keyID          - Key identifier
 * \param[OUT] keyItem        - Key item reference
 * \retval                    - Status of the operation
 */
SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t** keyItem )
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b084      	sub	sp, #16
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	0002      	movs	r2, r0
 80099ac:	6039      	str	r1, [r7, #0]
 80099ae:	1dfb      	adds	r3, r7, #7
 80099b0:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 80099b2:	230f      	movs	r3, #15
 80099b4:	18fb      	adds	r3, r7, r3
 80099b6:	2200      	movs	r2, #0
 80099b8:	701a      	strb	r2, [r3, #0]
 80099ba:	e025      	b.n	8009a08 <GetKeyByID+0x64>
    {
        if( SeNvmCtx.KeyList[i].KeyID == keyID )
 80099bc:	230f      	movs	r3, #15
 80099be:	18fb      	adds	r3, r7, r3
 80099c0:	781a      	ldrb	r2, [r3, #0]
 80099c2:	4816      	ldr	r0, [pc, #88]	; (8009a1c <GetKeyByID+0x78>)
 80099c4:	2383      	movs	r3, #131	; 0x83
 80099c6:	0099      	lsls	r1, r3, #2
 80099c8:	0013      	movs	r3, r2
 80099ca:	011b      	lsls	r3, r3, #4
 80099cc:	189b      	adds	r3, r3, r2
 80099ce:	18c3      	adds	r3, r0, r3
 80099d0:	185b      	adds	r3, r3, r1
 80099d2:	781b      	ldrb	r3, [r3, #0]
 80099d4:	1dfa      	adds	r2, r7, #7
 80099d6:	7812      	ldrb	r2, [r2, #0]
 80099d8:	429a      	cmp	r2, r3
 80099da:	d10f      	bne.n	80099fc <GetKeyByID+0x58>
        {
            *keyItem = &( SeNvmCtx.KeyList[i] );
 80099dc:	230f      	movs	r3, #15
 80099de:	18fb      	adds	r3, r7, r3
 80099e0:	781a      	ldrb	r2, [r3, #0]
 80099e2:	0013      	movs	r3, r2
 80099e4:	011b      	lsls	r3, r3, #4
 80099e6:	189b      	adds	r3, r3, r2
 80099e8:	2282      	movs	r2, #130	; 0x82
 80099ea:	0092      	lsls	r2, r2, #2
 80099ec:	189a      	adds	r2, r3, r2
 80099ee:	4b0b      	ldr	r3, [pc, #44]	; (8009a1c <GetKeyByID+0x78>)
 80099f0:	18d3      	adds	r3, r2, r3
 80099f2:	1d1a      	adds	r2, r3, #4
 80099f4:	683b      	ldr	r3, [r7, #0]
 80099f6:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 80099f8:	2300      	movs	r3, #0
 80099fa:	e00b      	b.n	8009a14 <GetKeyByID+0x70>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 80099fc:	210f      	movs	r1, #15
 80099fe:	187b      	adds	r3, r7, r1
 8009a00:	781a      	ldrb	r2, [r3, #0]
 8009a02:	187b      	adds	r3, r7, r1
 8009a04:	3201      	adds	r2, #1
 8009a06:	701a      	strb	r2, [r3, #0]
 8009a08:	230f      	movs	r3, #15
 8009a0a:	18fb      	adds	r3, r7, r3
 8009a0c:	781b      	ldrb	r3, [r3, #0]
 8009a0e:	2b15      	cmp	r3, #21
 8009a10:	d9d4      	bls.n	80099bc <GetKeyByID+0x18>
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8009a12:	2303      	movs	r3, #3
}
 8009a14:	0018      	movs	r0, r3
 8009a16:	46bd      	mov	sp, r7
 8009a18:	b004      	add	sp, #16
 8009a1a:	bd80      	pop	{r7, pc}
 8009a1c:	20000384 	.word	0x20000384

08009a20 <ComputeCmac>:
 * \param[IN]  keyID          - Key identifier to determine the AES key to be used
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
SecureElementStatus_t ComputeCmac( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID, uint32_t* cmac )
{
 8009a20:	b5b0      	push	{r4, r5, r7, lr}
 8009a22:	b08a      	sub	sp, #40	; 0x28
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	60f8      	str	r0, [r7, #12]
 8009a28:	0008      	movs	r0, r1
 8009a2a:	0011      	movs	r1, r2
 8009a2c:	607b      	str	r3, [r7, #4]
 8009a2e:	230a      	movs	r3, #10
 8009a30:	18fb      	adds	r3, r7, r3
 8009a32:	1c02      	adds	r2, r0, #0
 8009a34:	801a      	strh	r2, [r3, #0]
 8009a36:	2309      	movs	r3, #9
 8009a38:	18fb      	adds	r3, r7, r3
 8009a3a:	1c0a      	adds	r2, r1, #0
 8009a3c:	701a      	strb	r2, [r3, #0]
    if( buffer == NULL || cmac == NULL )
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d002      	beq.n	8009a4a <ComputeCmac+0x2a>
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d101      	bne.n	8009a4e <ComputeCmac+0x2e>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8009a4a:	2302      	movs	r3, #2
 8009a4c:	e03f      	b.n	8009ace <ComputeCmac+0xae>
    }

    uint8_t Cmac[16];

    AES_CMAC_Init( SeNvmCtx.AesCmacCtx );
 8009a4e:	4b22      	ldr	r3, [pc, #136]	; (8009ad8 <ComputeCmac+0xb8>)
 8009a50:	0018      	movs	r0, r3
 8009a52:	f7ff fd58 	bl	8009506 <AES_CMAC_Init>

    Key_t* keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 8009a56:	2527      	movs	r5, #39	; 0x27
 8009a58:	197c      	adds	r4, r7, r5
 8009a5a:	2310      	movs	r3, #16
 8009a5c:	18fa      	adds	r2, r7, r3
 8009a5e:	2309      	movs	r3, #9
 8009a60:	18fb      	adds	r3, r7, r3
 8009a62:	781b      	ldrb	r3, [r3, #0]
 8009a64:	0011      	movs	r1, r2
 8009a66:	0018      	movs	r0, r3
 8009a68:	f7ff ff9c 	bl	80099a4 <GetKeyByID>
 8009a6c:	0003      	movs	r3, r0
 8009a6e:	7023      	strb	r3, [r4, #0]

    if( retval == SECURE_ELEMENT_SUCCESS )
 8009a70:	197b      	adds	r3, r7, r5
 8009a72:	781b      	ldrb	r3, [r3, #0]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d127      	bne.n	8009ac8 <ComputeCmac+0xa8>
    {
        AES_CMAC_SetKey( SeNvmCtx.AesCmacCtx, keyItem->KeyValue );
 8009a78:	693b      	ldr	r3, [r7, #16]
 8009a7a:	1c5a      	adds	r2, r3, #1
 8009a7c:	4b16      	ldr	r3, [pc, #88]	; (8009ad8 <ComputeCmac+0xb8>)
 8009a7e:	0011      	movs	r1, r2
 8009a80:	0018      	movs	r0, r3
 8009a82:	f7ff fd5a 	bl	800953a <AES_CMAC_SetKey>

        AES_CMAC_Update( SeNvmCtx.AesCmacCtx, buffer, size );
 8009a86:	230a      	movs	r3, #10
 8009a88:	18fb      	adds	r3, r7, r3
 8009a8a:	881a      	ldrh	r2, [r3, #0]
 8009a8c:	68f9      	ldr	r1, [r7, #12]
 8009a8e:	4b12      	ldr	r3, [pc, #72]	; (8009ad8 <ComputeCmac+0xb8>)
 8009a90:	0018      	movs	r0, r3
 8009a92:	f7ff fd61 	bl	8009558 <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, SeNvmCtx.AesCmacCtx );
 8009a96:	4a10      	ldr	r2, [pc, #64]	; (8009ad8 <ComputeCmac+0xb8>)
 8009a98:	2114      	movs	r1, #20
 8009a9a:	000c      	movs	r4, r1
 8009a9c:	187b      	adds	r3, r7, r1
 8009a9e:	0011      	movs	r1, r2
 8009aa0:	0018      	movs	r0, r3
 8009aa2:	f7ff fe14 	bl	80096ce <AES_CMAC_Final>

        // Bring into the required format
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 | ( uint32_t ) Cmac[0] );
 8009aa6:	0021      	movs	r1, r4
 8009aa8:	187b      	adds	r3, r7, r1
 8009aaa:	78db      	ldrb	r3, [r3, #3]
 8009aac:	061a      	lsls	r2, r3, #24
 8009aae:	187b      	adds	r3, r7, r1
 8009ab0:	789b      	ldrb	r3, [r3, #2]
 8009ab2:	041b      	lsls	r3, r3, #16
 8009ab4:	431a      	orrs	r2, r3
 8009ab6:	187b      	adds	r3, r7, r1
 8009ab8:	785b      	ldrb	r3, [r3, #1]
 8009aba:	021b      	lsls	r3, r3, #8
 8009abc:	4313      	orrs	r3, r2
 8009abe:	187a      	adds	r2, r7, r1
 8009ac0:	7812      	ldrb	r2, [r2, #0]
 8009ac2:	431a      	orrs	r2, r3
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	601a      	str	r2, [r3, #0]
    }

    return retval;
 8009ac8:	2327      	movs	r3, #39	; 0x27
 8009aca:	18fb      	adds	r3, r7, r3
 8009acc:	781b      	ldrb	r3, [r3, #0]
}
 8009ace:	0018      	movs	r0, r3
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	b00a      	add	sp, #40	; 0x28
 8009ad4:	bdb0      	pop	{r4, r5, r7, pc}
 8009ad6:	46c0      	nop			; (mov r8, r8)
 8009ad8:	20000478 	.word	0x20000478

08009adc <DummyCB>:

/*
 * Dummy callback in case if the user provides NULL function pointer
 */
static void DummyCB( void )
{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	af00      	add	r7, sp, #0
    return;
 8009ae0:	46c0      	nop			; (mov r8, r8)
}
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	bd80      	pop	{r7, pc}
	...

08009ae8 <SecureElementInit>:
/*
 * API functions
 */

SecureElementStatus_t SecureElementInit( EventNvmCtxChanged seNvmCtxChanged )
{
 8009ae8:	b590      	push	{r4, r7, lr}
 8009aea:	b085      	sub	sp, #20
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
    // Initialize with defaults
    uint8_t itr = 0;
 8009af0:	240f      	movs	r4, #15
 8009af2:	193b      	adds	r3, r7, r4
 8009af4:	2200      	movs	r2, #0
 8009af6:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = APP_KEY;
 8009af8:	193b      	adds	r3, r7, r4
 8009afa:	781b      	ldrb	r3, [r3, #0]
 8009afc:	193a      	adds	r2, r7, r4
 8009afe:	1c59      	adds	r1, r3, #1
 8009b00:	7011      	strb	r1, [r2, #0]
 8009b02:	0018      	movs	r0, r3
 8009b04:	49b4      	ldr	r1, [pc, #720]	; (8009dd8 <SecureElementInit+0x2f0>)
 8009b06:	2383      	movs	r3, #131	; 0x83
 8009b08:	009a      	lsls	r2, r3, #2
 8009b0a:	0003      	movs	r3, r0
 8009b0c:	011b      	lsls	r3, r3, #4
 8009b0e:	181b      	adds	r3, r3, r0
 8009b10:	18cb      	adds	r3, r1, r3
 8009b12:	189b      	adds	r3, r3, r2
 8009b14:	2200      	movs	r2, #0
 8009b16:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = NWK_KEY;
 8009b18:	193b      	adds	r3, r7, r4
 8009b1a:	781b      	ldrb	r3, [r3, #0]
 8009b1c:	193a      	adds	r2, r7, r4
 8009b1e:	1c59      	adds	r1, r3, #1
 8009b20:	7011      	strb	r1, [r2, #0]
 8009b22:	0018      	movs	r0, r3
 8009b24:	49ac      	ldr	r1, [pc, #688]	; (8009dd8 <SecureElementInit+0x2f0>)
 8009b26:	2383      	movs	r3, #131	; 0x83
 8009b28:	009a      	lsls	r2, r3, #2
 8009b2a:	0003      	movs	r3, r0
 8009b2c:	011b      	lsls	r3, r3, #4
 8009b2e:	181b      	adds	r3, r3, r0
 8009b30:	18cb      	adds	r3, r1, r3
 8009b32:	189b      	adds	r3, r3, r2
 8009b34:	2201      	movs	r2, #1
 8009b36:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = J_S_INT_KEY;
 8009b38:	193b      	adds	r3, r7, r4
 8009b3a:	781b      	ldrb	r3, [r3, #0]
 8009b3c:	193a      	adds	r2, r7, r4
 8009b3e:	1c59      	adds	r1, r3, #1
 8009b40:	7011      	strb	r1, [r2, #0]
 8009b42:	0018      	movs	r0, r3
 8009b44:	49a4      	ldr	r1, [pc, #656]	; (8009dd8 <SecureElementInit+0x2f0>)
 8009b46:	2383      	movs	r3, #131	; 0x83
 8009b48:	009a      	lsls	r2, r3, #2
 8009b4a:	0003      	movs	r3, r0
 8009b4c:	011b      	lsls	r3, r3, #4
 8009b4e:	181b      	adds	r3, r3, r0
 8009b50:	18cb      	adds	r3, r1, r3
 8009b52:	189b      	adds	r3, r3, r2
 8009b54:	2202      	movs	r2, #2
 8009b56:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = J_S_ENC_KEY;
 8009b58:	193b      	adds	r3, r7, r4
 8009b5a:	781b      	ldrb	r3, [r3, #0]
 8009b5c:	193a      	adds	r2, r7, r4
 8009b5e:	1c59      	adds	r1, r3, #1
 8009b60:	7011      	strb	r1, [r2, #0]
 8009b62:	0018      	movs	r0, r3
 8009b64:	499c      	ldr	r1, [pc, #624]	; (8009dd8 <SecureElementInit+0x2f0>)
 8009b66:	2383      	movs	r3, #131	; 0x83
 8009b68:	009a      	lsls	r2, r3, #2
 8009b6a:	0003      	movs	r3, r0
 8009b6c:	011b      	lsls	r3, r3, #4
 8009b6e:	181b      	adds	r3, r3, r0
 8009b70:	18cb      	adds	r3, r1, r3
 8009b72:	189b      	adds	r3, r3, r2
 8009b74:	2203      	movs	r2, #3
 8009b76:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = F_NWK_S_INT_KEY;
 8009b78:	193b      	adds	r3, r7, r4
 8009b7a:	781b      	ldrb	r3, [r3, #0]
 8009b7c:	193a      	adds	r2, r7, r4
 8009b7e:	1c59      	adds	r1, r3, #1
 8009b80:	7011      	strb	r1, [r2, #0]
 8009b82:	0018      	movs	r0, r3
 8009b84:	4994      	ldr	r1, [pc, #592]	; (8009dd8 <SecureElementInit+0x2f0>)
 8009b86:	2383      	movs	r3, #131	; 0x83
 8009b88:	009a      	lsls	r2, r3, #2
 8009b8a:	0003      	movs	r3, r0
 8009b8c:	011b      	lsls	r3, r3, #4
 8009b8e:	181b      	adds	r3, r3, r0
 8009b90:	18cb      	adds	r3, r1, r3
 8009b92:	189b      	adds	r3, r3, r2
 8009b94:	2204      	movs	r2, #4
 8009b96:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = S_NWK_S_INT_KEY;
 8009b98:	193b      	adds	r3, r7, r4
 8009b9a:	781b      	ldrb	r3, [r3, #0]
 8009b9c:	193a      	adds	r2, r7, r4
 8009b9e:	1c59      	adds	r1, r3, #1
 8009ba0:	7011      	strb	r1, [r2, #0]
 8009ba2:	0018      	movs	r0, r3
 8009ba4:	498c      	ldr	r1, [pc, #560]	; (8009dd8 <SecureElementInit+0x2f0>)
 8009ba6:	2383      	movs	r3, #131	; 0x83
 8009ba8:	009a      	lsls	r2, r3, #2
 8009baa:	0003      	movs	r3, r0
 8009bac:	011b      	lsls	r3, r3, #4
 8009bae:	181b      	adds	r3, r3, r0
 8009bb0:	18cb      	adds	r3, r1, r3
 8009bb2:	189b      	adds	r3, r3, r2
 8009bb4:	2205      	movs	r2, #5
 8009bb6:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = NWK_S_ENC_KEY;
 8009bb8:	193b      	adds	r3, r7, r4
 8009bba:	781b      	ldrb	r3, [r3, #0]
 8009bbc:	193a      	adds	r2, r7, r4
 8009bbe:	1c59      	adds	r1, r3, #1
 8009bc0:	7011      	strb	r1, [r2, #0]
 8009bc2:	0018      	movs	r0, r3
 8009bc4:	4984      	ldr	r1, [pc, #528]	; (8009dd8 <SecureElementInit+0x2f0>)
 8009bc6:	2383      	movs	r3, #131	; 0x83
 8009bc8:	009a      	lsls	r2, r3, #2
 8009bca:	0003      	movs	r3, r0
 8009bcc:	011b      	lsls	r3, r3, #4
 8009bce:	181b      	adds	r3, r3, r0
 8009bd0:	18cb      	adds	r3, r1, r3
 8009bd2:	189b      	adds	r3, r3, r2
 8009bd4:	2206      	movs	r2, #6
 8009bd6:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = APP_S_KEY;
 8009bd8:	193b      	adds	r3, r7, r4
 8009bda:	781b      	ldrb	r3, [r3, #0]
 8009bdc:	193a      	adds	r2, r7, r4
 8009bde:	1c59      	adds	r1, r3, #1
 8009be0:	7011      	strb	r1, [r2, #0]
 8009be2:	0018      	movs	r0, r3
 8009be4:	497c      	ldr	r1, [pc, #496]	; (8009dd8 <SecureElementInit+0x2f0>)
 8009be6:	2383      	movs	r3, #131	; 0x83
 8009be8:	009a      	lsls	r2, r3, #2
 8009bea:	0003      	movs	r3, r0
 8009bec:	011b      	lsls	r3, r3, #4
 8009bee:	181b      	adds	r3, r3, r0
 8009bf0:	18cb      	adds	r3, r1, r3
 8009bf2:	189b      	adds	r3, r3, r2
 8009bf4:	2207      	movs	r2, #7
 8009bf6:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_KE_KEY;
 8009bf8:	193b      	adds	r3, r7, r4
 8009bfa:	781b      	ldrb	r3, [r3, #0]
 8009bfc:	193a      	adds	r2, r7, r4
 8009bfe:	1c59      	adds	r1, r3, #1
 8009c00:	7011      	strb	r1, [r2, #0]
 8009c02:	0018      	movs	r0, r3
 8009c04:	4974      	ldr	r1, [pc, #464]	; (8009dd8 <SecureElementInit+0x2f0>)
 8009c06:	2383      	movs	r3, #131	; 0x83
 8009c08:	009a      	lsls	r2, r3, #2
 8009c0a:	0003      	movs	r3, r0
 8009c0c:	011b      	lsls	r3, r3, #4
 8009c0e:	181b      	adds	r3, r3, r0
 8009c10:	18cb      	adds	r3, r1, r3
 8009c12:	189b      	adds	r3, r3, r2
 8009c14:	227f      	movs	r2, #127	; 0x7f
 8009c16:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_KEY_0;
 8009c18:	193b      	adds	r3, r7, r4
 8009c1a:	781b      	ldrb	r3, [r3, #0]
 8009c1c:	193a      	adds	r2, r7, r4
 8009c1e:	1c59      	adds	r1, r3, #1
 8009c20:	7011      	strb	r1, [r2, #0]
 8009c22:	0018      	movs	r0, r3
 8009c24:	496c      	ldr	r1, [pc, #432]	; (8009dd8 <SecureElementInit+0x2f0>)
 8009c26:	2383      	movs	r3, #131	; 0x83
 8009c28:	009a      	lsls	r2, r3, #2
 8009c2a:	0003      	movs	r3, r0
 8009c2c:	011b      	lsls	r3, r3, #4
 8009c2e:	181b      	adds	r3, r3, r0
 8009c30:	18cb      	adds	r3, r1, r3
 8009c32:	189b      	adds	r3, r3, r2
 8009c34:	2280      	movs	r2, #128	; 0x80
 8009c36:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_APP_S_KEY_0;
 8009c38:	193b      	adds	r3, r7, r4
 8009c3a:	781b      	ldrb	r3, [r3, #0]
 8009c3c:	193a      	adds	r2, r7, r4
 8009c3e:	1c59      	adds	r1, r3, #1
 8009c40:	7011      	strb	r1, [r2, #0]
 8009c42:	0018      	movs	r0, r3
 8009c44:	4964      	ldr	r1, [pc, #400]	; (8009dd8 <SecureElementInit+0x2f0>)
 8009c46:	2383      	movs	r3, #131	; 0x83
 8009c48:	009a      	lsls	r2, r3, #2
 8009c4a:	0003      	movs	r3, r0
 8009c4c:	011b      	lsls	r3, r3, #4
 8009c4e:	181b      	adds	r3, r3, r0
 8009c50:	18cb      	adds	r3, r1, r3
 8009c52:	189b      	adds	r3, r3, r2
 8009c54:	2281      	movs	r2, #129	; 0x81
 8009c56:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_NWK_S_KEY_0;
 8009c58:	193b      	adds	r3, r7, r4
 8009c5a:	781b      	ldrb	r3, [r3, #0]
 8009c5c:	193a      	adds	r2, r7, r4
 8009c5e:	1c59      	adds	r1, r3, #1
 8009c60:	7011      	strb	r1, [r2, #0]
 8009c62:	0018      	movs	r0, r3
 8009c64:	495c      	ldr	r1, [pc, #368]	; (8009dd8 <SecureElementInit+0x2f0>)
 8009c66:	2383      	movs	r3, #131	; 0x83
 8009c68:	009a      	lsls	r2, r3, #2
 8009c6a:	0003      	movs	r3, r0
 8009c6c:	011b      	lsls	r3, r3, #4
 8009c6e:	181b      	adds	r3, r3, r0
 8009c70:	18cb      	adds	r3, r1, r3
 8009c72:	189b      	adds	r3, r3, r2
 8009c74:	2282      	movs	r2, #130	; 0x82
 8009c76:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_KEY_1;
 8009c78:	193b      	adds	r3, r7, r4
 8009c7a:	781b      	ldrb	r3, [r3, #0]
 8009c7c:	193a      	adds	r2, r7, r4
 8009c7e:	1c59      	adds	r1, r3, #1
 8009c80:	7011      	strb	r1, [r2, #0]
 8009c82:	0018      	movs	r0, r3
 8009c84:	4954      	ldr	r1, [pc, #336]	; (8009dd8 <SecureElementInit+0x2f0>)
 8009c86:	2383      	movs	r3, #131	; 0x83
 8009c88:	009a      	lsls	r2, r3, #2
 8009c8a:	0003      	movs	r3, r0
 8009c8c:	011b      	lsls	r3, r3, #4
 8009c8e:	181b      	adds	r3, r3, r0
 8009c90:	18cb      	adds	r3, r1, r3
 8009c92:	189b      	adds	r3, r3, r2
 8009c94:	2283      	movs	r2, #131	; 0x83
 8009c96:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_APP_S_KEY_1;
 8009c98:	193b      	adds	r3, r7, r4
 8009c9a:	781b      	ldrb	r3, [r3, #0]
 8009c9c:	193a      	adds	r2, r7, r4
 8009c9e:	1c59      	adds	r1, r3, #1
 8009ca0:	7011      	strb	r1, [r2, #0]
 8009ca2:	0018      	movs	r0, r3
 8009ca4:	494c      	ldr	r1, [pc, #304]	; (8009dd8 <SecureElementInit+0x2f0>)
 8009ca6:	2383      	movs	r3, #131	; 0x83
 8009ca8:	009a      	lsls	r2, r3, #2
 8009caa:	0003      	movs	r3, r0
 8009cac:	011b      	lsls	r3, r3, #4
 8009cae:	181b      	adds	r3, r3, r0
 8009cb0:	18cb      	adds	r3, r1, r3
 8009cb2:	189b      	adds	r3, r3, r2
 8009cb4:	2284      	movs	r2, #132	; 0x84
 8009cb6:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_NWK_S_KEY_1;
 8009cb8:	193b      	adds	r3, r7, r4
 8009cba:	781b      	ldrb	r3, [r3, #0]
 8009cbc:	193a      	adds	r2, r7, r4
 8009cbe:	1c59      	adds	r1, r3, #1
 8009cc0:	7011      	strb	r1, [r2, #0]
 8009cc2:	0018      	movs	r0, r3
 8009cc4:	4944      	ldr	r1, [pc, #272]	; (8009dd8 <SecureElementInit+0x2f0>)
 8009cc6:	2383      	movs	r3, #131	; 0x83
 8009cc8:	009a      	lsls	r2, r3, #2
 8009cca:	0003      	movs	r3, r0
 8009ccc:	011b      	lsls	r3, r3, #4
 8009cce:	181b      	adds	r3, r3, r0
 8009cd0:	18cb      	adds	r3, r1, r3
 8009cd2:	189b      	adds	r3, r3, r2
 8009cd4:	2285      	movs	r2, #133	; 0x85
 8009cd6:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_KEY_2;
 8009cd8:	193b      	adds	r3, r7, r4
 8009cda:	781b      	ldrb	r3, [r3, #0]
 8009cdc:	193a      	adds	r2, r7, r4
 8009cde:	1c59      	adds	r1, r3, #1
 8009ce0:	7011      	strb	r1, [r2, #0]
 8009ce2:	0018      	movs	r0, r3
 8009ce4:	493c      	ldr	r1, [pc, #240]	; (8009dd8 <SecureElementInit+0x2f0>)
 8009ce6:	2383      	movs	r3, #131	; 0x83
 8009ce8:	009a      	lsls	r2, r3, #2
 8009cea:	0003      	movs	r3, r0
 8009cec:	011b      	lsls	r3, r3, #4
 8009cee:	181b      	adds	r3, r3, r0
 8009cf0:	18cb      	adds	r3, r1, r3
 8009cf2:	189b      	adds	r3, r3, r2
 8009cf4:	2286      	movs	r2, #134	; 0x86
 8009cf6:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_APP_S_KEY_2;
 8009cf8:	193b      	adds	r3, r7, r4
 8009cfa:	781b      	ldrb	r3, [r3, #0]
 8009cfc:	193a      	adds	r2, r7, r4
 8009cfe:	1c59      	adds	r1, r3, #1
 8009d00:	7011      	strb	r1, [r2, #0]
 8009d02:	0018      	movs	r0, r3
 8009d04:	4934      	ldr	r1, [pc, #208]	; (8009dd8 <SecureElementInit+0x2f0>)
 8009d06:	2383      	movs	r3, #131	; 0x83
 8009d08:	009a      	lsls	r2, r3, #2
 8009d0a:	0003      	movs	r3, r0
 8009d0c:	011b      	lsls	r3, r3, #4
 8009d0e:	181b      	adds	r3, r3, r0
 8009d10:	18cb      	adds	r3, r1, r3
 8009d12:	189b      	adds	r3, r3, r2
 8009d14:	2287      	movs	r2, #135	; 0x87
 8009d16:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_NWK_S_KEY_2;
 8009d18:	193b      	adds	r3, r7, r4
 8009d1a:	781b      	ldrb	r3, [r3, #0]
 8009d1c:	193a      	adds	r2, r7, r4
 8009d1e:	1c59      	adds	r1, r3, #1
 8009d20:	7011      	strb	r1, [r2, #0]
 8009d22:	0018      	movs	r0, r3
 8009d24:	492c      	ldr	r1, [pc, #176]	; (8009dd8 <SecureElementInit+0x2f0>)
 8009d26:	2383      	movs	r3, #131	; 0x83
 8009d28:	009a      	lsls	r2, r3, #2
 8009d2a:	0003      	movs	r3, r0
 8009d2c:	011b      	lsls	r3, r3, #4
 8009d2e:	181b      	adds	r3, r3, r0
 8009d30:	18cb      	adds	r3, r1, r3
 8009d32:	189b      	adds	r3, r3, r2
 8009d34:	2288      	movs	r2, #136	; 0x88
 8009d36:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_KEY_3;
 8009d38:	193b      	adds	r3, r7, r4
 8009d3a:	781b      	ldrb	r3, [r3, #0]
 8009d3c:	193a      	adds	r2, r7, r4
 8009d3e:	1c59      	adds	r1, r3, #1
 8009d40:	7011      	strb	r1, [r2, #0]
 8009d42:	0018      	movs	r0, r3
 8009d44:	4924      	ldr	r1, [pc, #144]	; (8009dd8 <SecureElementInit+0x2f0>)
 8009d46:	2383      	movs	r3, #131	; 0x83
 8009d48:	009a      	lsls	r2, r3, #2
 8009d4a:	0003      	movs	r3, r0
 8009d4c:	011b      	lsls	r3, r3, #4
 8009d4e:	181b      	adds	r3, r3, r0
 8009d50:	18cb      	adds	r3, r1, r3
 8009d52:	189b      	adds	r3, r3, r2
 8009d54:	2289      	movs	r2, #137	; 0x89
 8009d56:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_APP_S_KEY_3;
 8009d58:	193b      	adds	r3, r7, r4
 8009d5a:	781b      	ldrb	r3, [r3, #0]
 8009d5c:	193a      	adds	r2, r7, r4
 8009d5e:	1c59      	adds	r1, r3, #1
 8009d60:	7011      	strb	r1, [r2, #0]
 8009d62:	0018      	movs	r0, r3
 8009d64:	491c      	ldr	r1, [pc, #112]	; (8009dd8 <SecureElementInit+0x2f0>)
 8009d66:	2383      	movs	r3, #131	; 0x83
 8009d68:	009a      	lsls	r2, r3, #2
 8009d6a:	0003      	movs	r3, r0
 8009d6c:	011b      	lsls	r3, r3, #4
 8009d6e:	181b      	adds	r3, r3, r0
 8009d70:	18cb      	adds	r3, r1, r3
 8009d72:	189b      	adds	r3, r3, r2
 8009d74:	228a      	movs	r2, #138	; 0x8a
 8009d76:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_NWK_S_KEY_3;
 8009d78:	193b      	adds	r3, r7, r4
 8009d7a:	781b      	ldrb	r3, [r3, #0]
 8009d7c:	193a      	adds	r2, r7, r4
 8009d7e:	1c59      	adds	r1, r3, #1
 8009d80:	7011      	strb	r1, [r2, #0]
 8009d82:	0018      	movs	r0, r3
 8009d84:	4914      	ldr	r1, [pc, #80]	; (8009dd8 <SecureElementInit+0x2f0>)
 8009d86:	2383      	movs	r3, #131	; 0x83
 8009d88:	009a      	lsls	r2, r3, #2
 8009d8a:	0003      	movs	r3, r0
 8009d8c:	011b      	lsls	r3, r3, #4
 8009d8e:	181b      	adds	r3, r3, r0
 8009d90:	18cb      	adds	r3, r1, r3
 8009d92:	189b      	adds	r3, r3, r2
 8009d94:	228b      	movs	r2, #139	; 0x8b
 8009d96:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = SLOT_RAND_ZERO_KEY;
 8009d98:	193b      	adds	r3, r7, r4
 8009d9a:	781b      	ldrb	r3, [r3, #0]
 8009d9c:	193a      	adds	r2, r7, r4
 8009d9e:	1c59      	adds	r1, r3, #1
 8009da0:	7011      	strb	r1, [r2, #0]
 8009da2:	0018      	movs	r0, r3
 8009da4:	490c      	ldr	r1, [pc, #48]	; (8009dd8 <SecureElementInit+0x2f0>)
 8009da6:	2383      	movs	r3, #131	; 0x83
 8009da8:	009a      	lsls	r2, r3, #2
 8009daa:	0003      	movs	r3, r0
 8009dac:	011b      	lsls	r3, r3, #4
 8009dae:	181b      	adds	r3, r3, r0
 8009db0:	18cb      	adds	r3, r1, r3
 8009db2:	189b      	adds	r3, r3, r2
 8009db4:	228c      	movs	r2, #140	; 0x8c
 8009db6:	701a      	strb	r2, [r3, #0]

    // Assign callback
    if( seNvmCtxChanged != 0 )
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d003      	beq.n	8009dc6 <SecureElementInit+0x2de>
    {
        SeNvmCtxChanged = seNvmCtxChanged;
 8009dbe:	4b07      	ldr	r3, [pc, #28]	; (8009ddc <SecureElementInit+0x2f4>)
 8009dc0:	687a      	ldr	r2, [r7, #4]
 8009dc2:	601a      	str	r2, [r3, #0]
 8009dc4:	e002      	b.n	8009dcc <SecureElementInit+0x2e4>
    }
    else
    {
        SeNvmCtxChanged = DummyCB;
 8009dc6:	4b05      	ldr	r3, [pc, #20]	; (8009ddc <SecureElementInit+0x2f4>)
 8009dc8:	4a05      	ldr	r2, [pc, #20]	; (8009de0 <SecureElementInit+0x2f8>)
 8009dca:	601a      	str	r2, [r3, #0]
    }

    return SECURE_ELEMENT_SUCCESS;
 8009dcc:	2300      	movs	r3, #0
}
 8009dce:	0018      	movs	r0, r3
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	b005      	add	sp, #20
 8009dd4:	bd90      	pop	{r4, r7, pc}
 8009dd6:	46c0      	nop			; (mov r8, r8)
 8009dd8:	20000384 	.word	0x20000384
 8009ddc:	20000708 	.word	0x20000708
 8009de0:	08009add 	.word	0x08009add

08009de4 <SecureElementRestoreNvmCtx>:

SecureElementStatus_t SecureElementRestoreNvmCtx( void* seNvmCtx )
{
 8009de4:	b580      	push	{r7, lr}
 8009de6:	b082      	sub	sp, #8
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	6078      	str	r0, [r7, #4]
    // Restore nvm context
    if( seNvmCtx != 0 )
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d008      	beq.n	8009e04 <SecureElementRestoreNvmCtx+0x20>
    {
        memcpy1( ( uint8_t* ) &SeNvmCtx, ( uint8_t* ) seNvmCtx, sizeof( SeNvmCtx ) );
 8009df2:	23e1      	movs	r3, #225	; 0xe1
 8009df4:	009a      	lsls	r2, r3, #2
 8009df6:	6879      	ldr	r1, [r7, #4]
 8009df8:	4b05      	ldr	r3, [pc, #20]	; (8009e10 <SecureElementRestoreNvmCtx+0x2c>)
 8009dfa:	0018      	movs	r0, r3
 8009dfc:	f00b fc70 	bl	80156e0 <memcpy1>
        return SECURE_ELEMENT_SUCCESS;
 8009e00:	2300      	movs	r3, #0
 8009e02:	e000      	b.n	8009e06 <SecureElementRestoreNvmCtx+0x22>
    }
    else
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8009e04:	2302      	movs	r3, #2
    }
}
 8009e06:	0018      	movs	r0, r3
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	b002      	add	sp, #8
 8009e0c:	bd80      	pop	{r7, pc}
 8009e0e:	46c0      	nop			; (mov r8, r8)
 8009e10:	20000384 	.word	0x20000384

08009e14 <SecureElementGetNvmCtx>:

void* SecureElementGetNvmCtx( size_t* seNvmCtxSize )
{
 8009e14:	b580      	push	{r7, lr}
 8009e16:	b082      	sub	sp, #8
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
    *seNvmCtxSize = sizeof( SeNvmCtx );
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	22e1      	movs	r2, #225	; 0xe1
 8009e20:	0092      	lsls	r2, r2, #2
 8009e22:	601a      	str	r2, [r3, #0]
    return &SeNvmCtx;
 8009e24:	4b02      	ldr	r3, [pc, #8]	; (8009e30 <SecureElementGetNvmCtx+0x1c>)
}
 8009e26:	0018      	movs	r0, r3
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	b002      	add	sp, #8
 8009e2c:	bd80      	pop	{r7, pc}
 8009e2e:	46c0      	nop			; (mov r8, r8)
 8009e30:	20000384 	.word	0x20000384

08009e34 <SecureElementSetKey>:

SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 8009e34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e36:	b089      	sub	sp, #36	; 0x24
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	0002      	movs	r2, r0
 8009e3c:	6039      	str	r1, [r7, #0]
 8009e3e:	1dfb      	adds	r3, r7, #7
 8009e40:	701a      	strb	r2, [r3, #0]
    if( key == NULL )
 8009e42:	683b      	ldr	r3, [r7, #0]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d101      	bne.n	8009e4c <SecureElementSetKey+0x18>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8009e48:	2302      	movs	r3, #2
 8009e4a:	e063      	b.n	8009f14 <SecureElementSetKey+0xe0>
    }
    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 8009e4c:	231e      	movs	r3, #30
 8009e4e:	18fb      	adds	r3, r7, r3
 8009e50:	2206      	movs	r2, #6
 8009e52:	701a      	strb	r2, [r3, #0]

    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8009e54:	231f      	movs	r3, #31
 8009e56:	18fb      	adds	r3, r7, r3
 8009e58:	2200      	movs	r2, #0
 8009e5a:	701a      	strb	r2, [r3, #0]
 8009e5c:	e054      	b.n	8009f08 <SecureElementSetKey+0xd4>
    {
        if( SeNvmCtx.KeyList[i].KeyID == keyID )
 8009e5e:	231f      	movs	r3, #31
 8009e60:	18fb      	adds	r3, r7, r3
 8009e62:	781a      	ldrb	r2, [r3, #0]
 8009e64:	482d      	ldr	r0, [pc, #180]	; (8009f1c <SecureElementSetKey+0xe8>)
 8009e66:	2383      	movs	r3, #131	; 0x83
 8009e68:	0099      	lsls	r1, r3, #2
 8009e6a:	0013      	movs	r3, r2
 8009e6c:	011b      	lsls	r3, r3, #4
 8009e6e:	189b      	adds	r3, r3, r2
 8009e70:	18c3      	adds	r3, r0, r3
 8009e72:	185b      	adds	r3, r3, r1
 8009e74:	781b      	ldrb	r3, [r3, #0]
 8009e76:	1dfa      	adds	r2, r7, #7
 8009e78:	7812      	ldrb	r2, [r2, #0]
 8009e7a:	429a      	cmp	r2, r3
 8009e7c:	d13e      	bne.n	8009efc <SecureElementSetKey+0xc8>
        {
            if( LORAMAC_CRYPTO_MULITCAST_KEYS < SeNvmCtx.KeyList[i].KeyID )
 8009e7e:	231f      	movs	r3, #31
 8009e80:	18fb      	adds	r3, r7, r3
 8009e82:	781a      	ldrb	r2, [r3, #0]
 8009e84:	4825      	ldr	r0, [pc, #148]	; (8009f1c <SecureElementSetKey+0xe8>)
 8009e86:	2383      	movs	r3, #131	; 0x83
 8009e88:	0099      	lsls	r1, r3, #2
 8009e8a:	0013      	movs	r3, r2
 8009e8c:	011b      	lsls	r3, r3, #4
 8009e8e:	189b      	adds	r3, r3, r2
 8009e90:	18c3      	adds	r3, r0, r3
 8009e92:	185b      	adds	r3, r3, r1
 8009e94:	781b      	ldrb	r3, [r3, #0]
 8009e96:	b25b      	sxtb	r3, r3
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	da19      	bge.n	8009ed0 <SecureElementSetKey+0x9c>
            {  // Decrypt the key if its a Mulitcast key

                uint8_t decryptedKey[16] = { 0 };
 8009e9c:	250c      	movs	r5, #12
 8009e9e:	197b      	adds	r3, r7, r5
 8009ea0:	0018      	movs	r0, r3
 8009ea2:	2310      	movs	r3, #16
 8009ea4:	001a      	movs	r2, r3
 8009ea6:	2100      	movs	r1, #0
 8009ea8:	f014 f9b8 	bl	801e21c <memset>

                retval = SecureElementAesEncrypt( key, 16, MC_KE_KEY, decryptedKey );
 8009eac:	261e      	movs	r6, #30
 8009eae:	19bc      	adds	r4, r7, r6
 8009eb0:	197b      	adds	r3, r7, r5
 8009eb2:	6838      	ldr	r0, [r7, #0]
 8009eb4:	227f      	movs	r2, #127	; 0x7f
 8009eb6:	2110      	movs	r1, #16
 8009eb8:	f000 f89a 	bl	8009ff0 <SecureElementAesEncrypt>
 8009ebc:	0003      	movs	r3, r0
 8009ebe:	7023      	strb	r3, [r4, #0]
                if( retval != SECURE_ELEMENT_SUCCESS )
 8009ec0:	19bb      	adds	r3, r7, r6
 8009ec2:	781b      	ldrb	r3, [r3, #0]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d019      	beq.n	8009efc <SecureElementSetKey+0xc8>
                {
                    return retval;
 8009ec8:	231e      	movs	r3, #30
 8009eca:	18fb      	adds	r3, r7, r3
 8009ecc:	781b      	ldrb	r3, [r3, #0]
 8009ece:	e021      	b.n	8009f14 <SecureElementSetKey+0xe0>
                }
            }
            else
            {
                memcpy1( SeNvmCtx.KeyList[i].KeyValue, key, KEY_SIZE );
 8009ed0:	231f      	movs	r3, #31
 8009ed2:	18fb      	adds	r3, r7, r3
 8009ed4:	781a      	ldrb	r2, [r3, #0]
 8009ed6:	0013      	movs	r3, r2
 8009ed8:	011b      	lsls	r3, r3, #4
 8009eda:	189b      	adds	r3, r3, r2
 8009edc:	2282      	movs	r2, #130	; 0x82
 8009ede:	0092      	lsls	r2, r2, #2
 8009ee0:	189a      	adds	r2, r3, r2
 8009ee2:	4b0e      	ldr	r3, [pc, #56]	; (8009f1c <SecureElementSetKey+0xe8>)
 8009ee4:	18d3      	adds	r3, r2, r3
 8009ee6:	3305      	adds	r3, #5
 8009ee8:	6839      	ldr	r1, [r7, #0]
 8009eea:	2210      	movs	r2, #16
 8009eec:	0018      	movs	r0, r3
 8009eee:	f00b fbf7 	bl	80156e0 <memcpy1>
                SeNvmCtxChanged( );
 8009ef2:	4b0b      	ldr	r3, [pc, #44]	; (8009f20 <SecureElementSetKey+0xec>)
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	4798      	blx	r3
                return SECURE_ELEMENT_SUCCESS;
 8009ef8:	2300      	movs	r3, #0
 8009efa:	e00b      	b.n	8009f14 <SecureElementSetKey+0xe0>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8009efc:	211f      	movs	r1, #31
 8009efe:	187b      	adds	r3, r7, r1
 8009f00:	781a      	ldrb	r2, [r3, #0]
 8009f02:	187b      	adds	r3, r7, r1
 8009f04:	3201      	adds	r2, #1
 8009f06:	701a      	strb	r2, [r3, #0]
 8009f08:	231f      	movs	r3, #31
 8009f0a:	18fb      	adds	r3, r7, r3
 8009f0c:	781b      	ldrb	r3, [r3, #0]
 8009f0e:	2b15      	cmp	r3, #21
 8009f10:	d9a5      	bls.n	8009e5e <SecureElementSetKey+0x2a>
            }
        }
    }

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8009f12:	2303      	movs	r3, #3
}
 8009f14:	0018      	movs	r0, r3
 8009f16:	46bd      	mov	sp, r7
 8009f18:	b009      	add	sp, #36	; 0x24
 8009f1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f1c:	20000384 	.word	0x20000384
 8009f20:	20000708 	.word	0x20000708

08009f24 <SecureElementComputeAesCmac>:

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID, uint32_t* cmac )
{
 8009f24:	b590      	push	{r4, r7, lr}
 8009f26:	b085      	sub	sp, #20
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	60f8      	str	r0, [r7, #12]
 8009f2c:	0008      	movs	r0, r1
 8009f2e:	0011      	movs	r1, r2
 8009f30:	607b      	str	r3, [r7, #4]
 8009f32:	230a      	movs	r3, #10
 8009f34:	18fb      	adds	r3, r7, r3
 8009f36:	1c02      	adds	r2, r0, #0
 8009f38:	801a      	strh	r2, [r3, #0]
 8009f3a:	2009      	movs	r0, #9
 8009f3c:	183b      	adds	r3, r7, r0
 8009f3e:	1c0a      	adds	r2, r1, #0
 8009f40:	701a      	strb	r2, [r3, #0]
    if( keyID >= LORAMAC_CRYPTO_MULITCAST_KEYS )
 8009f42:	183b      	adds	r3, r7, r0
 8009f44:	781b      	ldrb	r3, [r3, #0]
 8009f46:	2b7e      	cmp	r3, #126	; 0x7e
 8009f48:	d901      	bls.n	8009f4e <SecureElementComputeAesCmac+0x2a>
    {
        //Never accept multicast key identifier for cmac computation
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8009f4a:	2303      	movs	r3, #3
 8009f4c:	e00b      	b.n	8009f66 <SecureElementComputeAesCmac+0x42>
    }

    return ComputeCmac( buffer, size, keyID, cmac );
 8009f4e:	687c      	ldr	r4, [r7, #4]
 8009f50:	2309      	movs	r3, #9
 8009f52:	18fb      	adds	r3, r7, r3
 8009f54:	781a      	ldrb	r2, [r3, #0]
 8009f56:	230a      	movs	r3, #10
 8009f58:	18fb      	adds	r3, r7, r3
 8009f5a:	8819      	ldrh	r1, [r3, #0]
 8009f5c:	68f8      	ldr	r0, [r7, #12]
 8009f5e:	0023      	movs	r3, r4
 8009f60:	f7ff fd5e 	bl	8009a20 <ComputeCmac>
 8009f64:	0003      	movs	r3, r0
}
 8009f66:	0018      	movs	r0, r3
 8009f68:	46bd      	mov	sp, r7
 8009f6a:	b005      	add	sp, #20
 8009f6c:	bd90      	pop	{r4, r7, pc}

08009f6e <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t* buffer, uint16_t size, uint32_t expectedCmac, KeyIdentifier_t keyID )
{
 8009f6e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f70:	b087      	sub	sp, #28
 8009f72:	af00      	add	r7, sp, #0
 8009f74:	60f8      	str	r0, [r7, #12]
 8009f76:	0008      	movs	r0, r1
 8009f78:	607a      	str	r2, [r7, #4]
 8009f7a:	0019      	movs	r1, r3
 8009f7c:	230a      	movs	r3, #10
 8009f7e:	18fb      	adds	r3, r7, r3
 8009f80:	1c02      	adds	r2, r0, #0
 8009f82:	801a      	strh	r2, [r3, #0]
 8009f84:	2309      	movs	r3, #9
 8009f86:	18fb      	adds	r3, r7, r3
 8009f88:	1c0a      	adds	r2, r1, #0
 8009f8a:	701a      	strb	r2, [r3, #0]
    if( buffer == NULL )
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d101      	bne.n	8009f96 <SecureElementVerifyAesCmac+0x28>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8009f92:	2302      	movs	r3, #2
 8009f94:	e027      	b.n	8009fe6 <SecureElementVerifyAesCmac+0x78>
    }

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 8009f96:	2617      	movs	r6, #23
 8009f98:	19bb      	adds	r3, r7, r6
 8009f9a:	2206      	movs	r2, #6
 8009f9c:	701a      	strb	r2, [r3, #0]
    uint32_t compCmac = 0;
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	613b      	str	r3, [r7, #16]

    retval = ComputeCmac( buffer, size, keyID, &compCmac );
 8009fa2:	19bc      	adds	r4, r7, r6
 8009fa4:	2310      	movs	r3, #16
 8009fa6:	18fd      	adds	r5, r7, r3
 8009fa8:	2309      	movs	r3, #9
 8009faa:	18fb      	adds	r3, r7, r3
 8009fac:	781a      	ldrb	r2, [r3, #0]
 8009fae:	230a      	movs	r3, #10
 8009fb0:	18fb      	adds	r3, r7, r3
 8009fb2:	8819      	ldrh	r1, [r3, #0]
 8009fb4:	68f8      	ldr	r0, [r7, #12]
 8009fb6:	002b      	movs	r3, r5
 8009fb8:	f7ff fd32 	bl	8009a20 <ComputeCmac>
 8009fbc:	0003      	movs	r3, r0
 8009fbe:	7023      	strb	r3, [r4, #0]
    if( retval != SECURE_ELEMENT_SUCCESS )
 8009fc0:	19bb      	adds	r3, r7, r6
 8009fc2:	781b      	ldrb	r3, [r3, #0]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d003      	beq.n	8009fd0 <SecureElementVerifyAesCmac+0x62>
    {
        return retval;
 8009fc8:	2317      	movs	r3, #23
 8009fca:	18fb      	adds	r3, r7, r3
 8009fcc:	781b      	ldrb	r3, [r3, #0]
 8009fce:	e00a      	b.n	8009fe6 <SecureElementVerifyAesCmac+0x78>
    }

    if( expectedCmac != compCmac )
 8009fd0:	693b      	ldr	r3, [r7, #16]
 8009fd2:	687a      	ldr	r2, [r7, #4]
 8009fd4:	429a      	cmp	r2, r3
 8009fd6:	d003      	beq.n	8009fe0 <SecureElementVerifyAesCmac+0x72>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 8009fd8:	2317      	movs	r3, #23
 8009fda:	18fb      	adds	r3, r7, r3
 8009fdc:	2201      	movs	r2, #1
 8009fde:	701a      	strb	r2, [r3, #0]
    }

    return retval;
 8009fe0:	2317      	movs	r3, #23
 8009fe2:	18fb      	adds	r3, r7, r3
 8009fe4:	781b      	ldrb	r3, [r3, #0]
}
 8009fe6:	0018      	movs	r0, r3
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	b007      	add	sp, #28
 8009fec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08009ff0 <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID, uint8_t* encBuffer )
{
 8009ff0:	b5b0      	push	{r4, r5, r7, lr}
 8009ff2:	b086      	sub	sp, #24
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	60f8      	str	r0, [r7, #12]
 8009ff8:	0008      	movs	r0, r1
 8009ffa:	0011      	movs	r1, r2
 8009ffc:	607b      	str	r3, [r7, #4]
 8009ffe:	230a      	movs	r3, #10
 800a000:	18fb      	adds	r3, r7, r3
 800a002:	1c02      	adds	r2, r0, #0
 800a004:	801a      	strh	r2, [r3, #0]
 800a006:	2309      	movs	r3, #9
 800a008:	18fb      	adds	r3, r7, r3
 800a00a:	1c0a      	adds	r2, r1, #0
 800a00c:	701a      	strb	r2, [r3, #0]
    if( buffer == NULL || encBuffer == NULL )
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d002      	beq.n	800a01a <SecureElementAesEncrypt+0x2a>
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	2b00      	cmp	r3, #0
 800a018:	d101      	bne.n	800a01e <SecureElementAesEncrypt+0x2e>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800a01a:	2302      	movs	r3, #2
 800a01c:	e04c      	b.n	800a0b8 <SecureElementAesEncrypt+0xc8>
    }

    // Check if the size is divisible by 16,
    if( ( size % 16 ) != 0 )
 800a01e:	230a      	movs	r3, #10
 800a020:	18fb      	adds	r3, r7, r3
 800a022:	881b      	ldrh	r3, [r3, #0]
 800a024:	220f      	movs	r2, #15
 800a026:	4013      	ands	r3, r2
 800a028:	b29b      	uxth	r3, r3
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d001      	beq.n	800a032 <SecureElementAesEncrypt+0x42>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800a02e:	2305      	movs	r3, #5
 800a030:	e042      	b.n	800a0b8 <SecureElementAesEncrypt+0xc8>
    }

    memset1( SeNvmCtx.AesContext.ksch, '\0', 240 );
 800a032:	4b23      	ldr	r3, [pc, #140]	; (800a0c0 <SecureElementAesEncrypt+0xd0>)
 800a034:	22f0      	movs	r2, #240	; 0xf0
 800a036:	2100      	movs	r1, #0
 800a038:	0018      	movs	r0, r3
 800a03a:	f00b fb8d 	bl	8015758 <memset1>

    Key_t* pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 800a03e:	2516      	movs	r5, #22
 800a040:	197c      	adds	r4, r7, r5
 800a042:	2310      	movs	r3, #16
 800a044:	18fa      	adds	r2, r7, r3
 800a046:	2309      	movs	r3, #9
 800a048:	18fb      	adds	r3, r7, r3
 800a04a:	781b      	ldrb	r3, [r3, #0]
 800a04c:	0011      	movs	r1, r2
 800a04e:	0018      	movs	r0, r3
 800a050:	f7ff fca8 	bl	80099a4 <GetKeyByID>
 800a054:	0003      	movs	r3, r0
 800a056:	7023      	strb	r3, [r4, #0]

    if( retval == SECURE_ELEMENT_SUCCESS )
 800a058:	197b      	adds	r3, r7, r5
 800a05a:	781b      	ldrb	r3, [r3, #0]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d128      	bne.n	800a0b2 <SecureElementAesEncrypt+0xc2>
    {
        aes_set_key( pItem->KeyValue, 16, &SeNvmCtx.AesContext );
 800a060:	693b      	ldr	r3, [r7, #16]
 800a062:	3301      	adds	r3, #1
 800a064:	4a16      	ldr	r2, [pc, #88]	; (800a0c0 <SecureElementAesEncrypt+0xd0>)
 800a066:	2110      	movs	r1, #16
 800a068:	0018      	movs	r0, r3
 800a06a:	f7ff f8cf 	bl	800920c <aes_set_key>

        uint8_t block = 0;
 800a06e:	2317      	movs	r3, #23
 800a070:	18fb      	adds	r3, r7, r3
 800a072:	2200      	movs	r2, #0
 800a074:	701a      	strb	r2, [r3, #0]

        while( size != 0 )
 800a076:	e017      	b.n	800a0a8 <SecureElementAesEncrypt+0xb8>
        {
            aes_encrypt( &buffer[block], &encBuffer[block], &SeNvmCtx.AesContext );
 800a078:	2417      	movs	r4, #23
 800a07a:	193b      	adds	r3, r7, r4
 800a07c:	781b      	ldrb	r3, [r3, #0]
 800a07e:	68fa      	ldr	r2, [r7, #12]
 800a080:	18d0      	adds	r0, r2, r3
 800a082:	193b      	adds	r3, r7, r4
 800a084:	781b      	ldrb	r3, [r3, #0]
 800a086:	687a      	ldr	r2, [r7, #4]
 800a088:	18d3      	adds	r3, r2, r3
 800a08a:	4a0d      	ldr	r2, [pc, #52]	; (800a0c0 <SecureElementAesEncrypt+0xd0>)
 800a08c:	0019      	movs	r1, r3
 800a08e:	f7ff f9ef 	bl	8009470 <aes_encrypt>
            block = block + 16;
 800a092:	193b      	adds	r3, r7, r4
 800a094:	193a      	adds	r2, r7, r4
 800a096:	7812      	ldrb	r2, [r2, #0]
 800a098:	3210      	adds	r2, #16
 800a09a:	701a      	strb	r2, [r3, #0]
            size = size - 16;
 800a09c:	220a      	movs	r2, #10
 800a09e:	18bb      	adds	r3, r7, r2
 800a0a0:	18ba      	adds	r2, r7, r2
 800a0a2:	8812      	ldrh	r2, [r2, #0]
 800a0a4:	3a10      	subs	r2, #16
 800a0a6:	801a      	strh	r2, [r3, #0]
        while( size != 0 )
 800a0a8:	230a      	movs	r3, #10
 800a0aa:	18fb      	adds	r3, r7, r3
 800a0ac:	881b      	ldrh	r3, [r3, #0]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d1e2      	bne.n	800a078 <SecureElementAesEncrypt+0x88>
        }
    }
    return retval;
 800a0b2:	2316      	movs	r3, #22
 800a0b4:	18fb      	adds	r3, r7, r3
 800a0b6:	781b      	ldrb	r3, [r3, #0]
}
 800a0b8:	0018      	movs	r0, r3
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	b006      	add	sp, #24
 800a0be:	bdb0      	pop	{r4, r5, r7, pc}
 800a0c0:	20000384 	.word	0x20000384

0800a0c4 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( Version_t version, uint8_t* input, KeyIdentifier_t rootKeyID, KeyIdentifier_t targetKeyID )
{
 800a0c4:	b5b0      	push	{r4, r5, r7, lr}
 800a0c6:	b08a      	sub	sp, #40	; 0x28
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	60f8      	str	r0, [r7, #12]
 800a0cc:	60b9      	str	r1, [r7, #8]
 800a0ce:	0019      	movs	r1, r3
 800a0d0:	1dfb      	adds	r3, r7, #7
 800a0d2:	701a      	strb	r2, [r3, #0]
 800a0d4:	1dbb      	adds	r3, r7, #6
 800a0d6:	1c0a      	adds	r2, r1, #0
 800a0d8:	701a      	strb	r2, [r3, #0]
    if( input == NULL )
 800a0da:	68bb      	ldr	r3, [r7, #8]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d101      	bne.n	800a0e4 <SecureElementDeriveAndStoreKey+0x20>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800a0e0:	2302      	movs	r3, #2
 800a0e2:	e066      	b.n	800a1b2 <SecureElementDeriveAndStoreKey+0xee>
    }

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800a0e4:	2327      	movs	r3, #39	; 0x27
 800a0e6:	18fb      	adds	r3, r7, r3
 800a0e8:	2206      	movs	r2, #6
 800a0ea:	701a      	strb	r2, [r3, #0]
    uint8_t key[16] = { 0 };
 800a0ec:	2314      	movs	r3, #20
 800a0ee:	18fb      	adds	r3, r7, r3
 800a0f0:	0018      	movs	r0, r3
 800a0f2:	2310      	movs	r3, #16
 800a0f4:	001a      	movs	r2, r3
 800a0f6:	2100      	movs	r1, #0
 800a0f8:	f014 f890 	bl	801e21c <memset>

    // In case of MC_KE_KEY, prevent other keys than NwkKey or AppKey for LoRaWAN 1.1 or later
    if( targetKeyID == MC_KE_KEY )
 800a0fc:	1dbb      	adds	r3, r7, #6
 800a0fe:	781b      	ldrb	r3, [r3, #0]
 800a100:	2b7f      	cmp	r3, #127	; 0x7f
 800a102:	d10e      	bne.n	800a122 <SecureElementDeriveAndStoreKey+0x5e>
    {
        if( ( ( rootKeyID == APP_KEY ) && ( version.Fields.Minor == 0 ) ) || ( rootKeyID == NWK_KEY ) )
 800a104:	1dfb      	adds	r3, r7, #7
 800a106:	781b      	ldrb	r3, [r3, #0]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d104      	bne.n	800a116 <SecureElementDeriveAndStoreKey+0x52>
 800a10c:	230c      	movs	r3, #12
 800a10e:	18fb      	adds	r3, r7, r3
 800a110:	789b      	ldrb	r3, [r3, #2]
 800a112:	2b00      	cmp	r3, #0
 800a114:	d003      	beq.n	800a11e <SecureElementDeriveAndStoreKey+0x5a>
 800a116:	1dfb      	adds	r3, r7, #7
 800a118:	781b      	ldrb	r3, [r3, #0]
 800a11a:	2b01      	cmp	r3, #1
 800a11c:	d101      	bne.n	800a122 <SecureElementDeriveAndStoreKey+0x5e>
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800a11e:	2303      	movs	r3, #3
 800a120:	e047      	b.n	800a1b2 <SecureElementDeriveAndStoreKey+0xee>
        }
    }

    // In case of McKEKey derivation, the parameter input is concatenated: nonce | DevEUI  | pad16
    // where nonce SHALL be greater than 15
    uint16_t nonce = input[0];
 800a122:	68bb      	ldr	r3, [r7, #8]
 800a124:	781a      	ldrb	r2, [r3, #0]
 800a126:	2124      	movs	r1, #36	; 0x24
 800a128:	187b      	adds	r3, r7, r1
 800a12a:	801a      	strh	r2, [r3, #0]
    nonce |= ( ( uint16_t ) input[1] << 8 );
 800a12c:	68bb      	ldr	r3, [r7, #8]
 800a12e:	3301      	adds	r3, #1
 800a130:	781b      	ldrb	r3, [r3, #0]
 800a132:	021b      	lsls	r3, r3, #8
 800a134:	b21a      	sxth	r2, r3
 800a136:	187b      	adds	r3, r7, r1
 800a138:	2000      	movs	r0, #0
 800a13a:	5e1b      	ldrsh	r3, [r3, r0]
 800a13c:	4313      	orrs	r3, r2
 800a13e:	b21a      	sxth	r2, r3
 800a140:	187b      	adds	r3, r7, r1
 800a142:	801a      	strh	r2, [r3, #0]
    if( ( targetKeyID == MC_KE_KEY ) && ( nonce < 16 ) )
 800a144:	1dbb      	adds	r3, r7, #6
 800a146:	781b      	ldrb	r3, [r3, #0]
 800a148:	2b7f      	cmp	r3, #127	; 0x7f
 800a14a:	d108      	bne.n	800a15e <SecureElementDeriveAndStoreKey+0x9a>
 800a14c:	2324      	movs	r3, #36	; 0x24
 800a14e:	18fb      	adds	r3, r7, r3
 800a150:	881b      	ldrh	r3, [r3, #0]
 800a152:	2b0f      	cmp	r3, #15
 800a154:	d803      	bhi.n	800a15e <SecureElementDeriveAndStoreKey+0x9a>
    {
        return retval;
 800a156:	2327      	movs	r3, #39	; 0x27
 800a158:	18fb      	adds	r3, r7, r3
 800a15a:	781b      	ldrb	r3, [r3, #0]
 800a15c:	e029      	b.n	800a1b2 <SecureElementDeriveAndStoreKey+0xee>
    }

    // Derive key
    retval = SecureElementAesEncrypt( input, 16, rootKeyID, key );
 800a15e:	2527      	movs	r5, #39	; 0x27
 800a160:	197c      	adds	r4, r7, r5
 800a162:	2314      	movs	r3, #20
 800a164:	18f9      	adds	r1, r7, r3
 800a166:	1dfb      	adds	r3, r7, #7
 800a168:	781a      	ldrb	r2, [r3, #0]
 800a16a:	68b8      	ldr	r0, [r7, #8]
 800a16c:	000b      	movs	r3, r1
 800a16e:	2110      	movs	r1, #16
 800a170:	f7ff ff3e 	bl	8009ff0 <SecureElementAesEncrypt>
 800a174:	0003      	movs	r3, r0
 800a176:	7023      	strb	r3, [r4, #0]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800a178:	197b      	adds	r3, r7, r5
 800a17a:	781b      	ldrb	r3, [r3, #0]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d003      	beq.n	800a188 <SecureElementDeriveAndStoreKey+0xc4>
    {
        return retval;
 800a180:	2327      	movs	r3, #39	; 0x27
 800a182:	18fb      	adds	r3, r7, r3
 800a184:	781b      	ldrb	r3, [r3, #0]
 800a186:	e014      	b.n	800a1b2 <SecureElementDeriveAndStoreKey+0xee>
    }

    // Store key
    retval = SecureElementSetKey( targetKeyID, key );
 800a188:	2527      	movs	r5, #39	; 0x27
 800a18a:	197c      	adds	r4, r7, r5
 800a18c:	2314      	movs	r3, #20
 800a18e:	18fa      	adds	r2, r7, r3
 800a190:	1dbb      	adds	r3, r7, #6
 800a192:	781b      	ldrb	r3, [r3, #0]
 800a194:	0011      	movs	r1, r2
 800a196:	0018      	movs	r0, r3
 800a198:	f7ff fe4c 	bl	8009e34 <SecureElementSetKey>
 800a19c:	0003      	movs	r3, r0
 800a19e:	7023      	strb	r3, [r4, #0]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800a1a0:	197b      	adds	r3, r7, r5
 800a1a2:	781b      	ldrb	r3, [r3, #0]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d003      	beq.n	800a1b0 <SecureElementDeriveAndStoreKey+0xec>
    {
        return retval;
 800a1a8:	2327      	movs	r3, #39	; 0x27
 800a1aa:	18fb      	adds	r3, r7, r3
 800a1ac:	781b      	ldrb	r3, [r3, #0]
 800a1ae:	e000      	b.n	800a1b2 <SecureElementDeriveAndStoreKey+0xee>
    }

    return SECURE_ELEMENT_SUCCESS;
 800a1b0:	2300      	movs	r3, #0
}
 800a1b2:	0018      	movs	r0, r3
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	b00a      	add	sp, #40	; 0x28
 800a1b8:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800a1bc <OnRadioTxDone>:
    int16_t Rssi;
    int8_t Snr;
}RxDoneParams;

static void OnRadioTxDone( void )
{
 800a1bc:	b590      	push	{r4, r7, lr}
 800a1be:	b083      	sub	sp, #12
 800a1c0:	af00      	add	r7, sp, #0
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 800a1c2:	f00b fa37 	bl	8015634 <TimerGetCurrentTime>
 800a1c6:	0002      	movs	r2, r0
 800a1c8:	4b1f      	ldr	r3, [pc, #124]	; (800a248 <OnRadioTxDone+0x8c>)
 800a1ca:	601a      	str	r2, [r3, #0]
    uint64_t tm = itsdk_time_get_ms();
 800a1cc:	f012 fab2 	bl	801c734 <itsdk_time_get_ms>
 800a1d0:	0003      	movs	r3, r0
 800a1d2:	000c      	movs	r4, r1
 800a1d4:	603b      	str	r3, [r7, #0]
 800a1d6:	607c      	str	r4, [r7, #4]
    MacCtx.LastTxSysTime.Seconds = tm/1000;
 800a1d8:	6838      	ldr	r0, [r7, #0]
 800a1da:	6879      	ldr	r1, [r7, #4]
 800a1dc:	22fa      	movs	r2, #250	; 0xfa
 800a1de:	0092      	lsls	r2, r2, #2
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	f7f6 f971 	bl	80004c8 <__aeabi_uldivmod>
 800a1e6:	0003      	movs	r3, r0
 800a1e8:	000c      	movs	r4, r1
 800a1ea:	0019      	movs	r1, r3
 800a1ec:	4a17      	ldr	r2, [pc, #92]	; (800a24c <OnRadioTxDone+0x90>)
 800a1ee:	23d3      	movs	r3, #211	; 0xd3
 800a1f0:	009b      	lsls	r3, r3, #2
 800a1f2:	50d1      	str	r1, [r2, r3]
    MacCtx.LastTxSysTime.SubSeconds = tm % 1000;
 800a1f4:	6838      	ldr	r0, [r7, #0]
 800a1f6:	6879      	ldr	r1, [r7, #4]
 800a1f8:	22fa      	movs	r2, #250	; 0xfa
 800a1fa:	0092      	lsls	r2, r2, #2
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	f7f6 f963 	bl	80004c8 <__aeabi_uldivmod>
 800a202:	001c      	movs	r4, r3
 800a204:	0013      	movs	r3, r2
 800a206:	b219      	sxth	r1, r3
 800a208:	4a10      	ldr	r2, [pc, #64]	; (800a24c <OnRadioTxDone+0x90>)
 800a20a:	23d4      	movs	r3, #212	; 0xd4
 800a20c:	009b      	lsls	r3, r3, #2
 800a20e:	52d1      	strh	r1, [r2, r3]

    LoRaMacRadioEvents.Events.TxDone = 1;
 800a210:	4b0f      	ldr	r3, [pc, #60]	; (800a250 <OnRadioTxDone+0x94>)
 800a212:	781a      	ldrb	r2, [r3, #0]
 800a214:	2110      	movs	r1, #16
 800a216:	430a      	orrs	r2, r1
 800a218:	701a      	strb	r2, [r3, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800a21a:	4a0c      	ldr	r2, [pc, #48]	; (800a24c <OnRadioTxDone+0x90>)
 800a21c:	23d7      	movs	r3, #215	; 0xd7
 800a21e:	009b      	lsls	r3, r3, #2
 800a220:	58d3      	ldr	r3, [r2, r3]
 800a222:	2b00      	cmp	r3, #0
 800a224:	d00c      	beq.n	800a240 <OnRadioTxDone+0x84>
 800a226:	4a09      	ldr	r2, [pc, #36]	; (800a24c <OnRadioTxDone+0x90>)
 800a228:	23d7      	movs	r3, #215	; 0xd7
 800a22a:	009b      	lsls	r3, r3, #2
 800a22c:	58d3      	ldr	r3, [r2, r3]
 800a22e:	68db      	ldr	r3, [r3, #12]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d005      	beq.n	800a240 <OnRadioTxDone+0x84>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800a234:	4a05      	ldr	r2, [pc, #20]	; (800a24c <OnRadioTxDone+0x90>)
 800a236:	23d7      	movs	r3, #215	; 0xd7
 800a238:	009b      	lsls	r3, r3, #2
 800a23a:	58d3      	ldr	r3, [r2, r3]
 800a23c:	68db      	ldr	r3, [r3, #12]
 800a23e:	4798      	blx	r3
    }
#if !defined(NO_MAC_PRINTF)
    PRINTNOW(); PRINTF("PHY txDone\n\r" );
#endif
}
 800a240:	46c0      	nop			; (mov r8, r8)
 800a242:	46bd      	mov	sp, r7
 800a244:	b003      	add	sp, #12
 800a246:	bd90      	pop	{r4, r7, pc}
 800a248:	20001534 	.word	0x20001534
 800a24c:	2000070c 	.word	0x2000070c
 800a250:	20000dac 	.word	0x20000dac

0800a254 <OnRadioRxDone>:

static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 800a254:	b5b0      	push	{r4, r5, r7, lr}
 800a256:	b084      	sub	sp, #16
 800a258:	af00      	add	r7, sp, #0
 800a25a:	60f8      	str	r0, [r7, #12]
 800a25c:	000c      	movs	r4, r1
 800a25e:	0010      	movs	r0, r2
 800a260:	0019      	movs	r1, r3
 800a262:	250a      	movs	r5, #10
 800a264:	197b      	adds	r3, r7, r5
 800a266:	1c22      	adds	r2, r4, #0
 800a268:	801a      	strh	r2, [r3, #0]
 800a26a:	2408      	movs	r4, #8
 800a26c:	193b      	adds	r3, r7, r4
 800a26e:	1c02      	adds	r2, r0, #0
 800a270:	801a      	strh	r2, [r3, #0]
 800a272:	1dfb      	adds	r3, r7, #7
 800a274:	1c0a      	adds	r2, r1, #0
 800a276:	701a      	strb	r2, [r3, #0]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800a278:	f00b f9dc 	bl	8015634 <TimerGetCurrentTime>
 800a27c:	0002      	movs	r2, r0
 800a27e:	4b16      	ldr	r3, [pc, #88]	; (800a2d8 <OnRadioRxDone+0x84>)
 800a280:	601a      	str	r2, [r3, #0]
    RxDoneParams.Payload = payload;
 800a282:	4b15      	ldr	r3, [pc, #84]	; (800a2d8 <OnRadioRxDone+0x84>)
 800a284:	68fa      	ldr	r2, [r7, #12]
 800a286:	605a      	str	r2, [r3, #4]
    RxDoneParams.Size = size;
 800a288:	4b13      	ldr	r3, [pc, #76]	; (800a2d8 <OnRadioRxDone+0x84>)
 800a28a:	197a      	adds	r2, r7, r5
 800a28c:	8812      	ldrh	r2, [r2, #0]
 800a28e:	811a      	strh	r2, [r3, #8]
    RxDoneParams.Rssi = rssi;
 800a290:	4b11      	ldr	r3, [pc, #68]	; (800a2d8 <OnRadioRxDone+0x84>)
 800a292:	193a      	adds	r2, r7, r4
 800a294:	8812      	ldrh	r2, [r2, #0]
 800a296:	815a      	strh	r2, [r3, #10]
    RxDoneParams.Snr = snr;
 800a298:	4b0f      	ldr	r3, [pc, #60]	; (800a2d8 <OnRadioRxDone+0x84>)
 800a29a:	1dfa      	adds	r2, r7, #7
 800a29c:	7812      	ldrb	r2, [r2, #0]
 800a29e:	731a      	strb	r2, [r3, #12]

    LoRaMacRadioEvents.Events.RxDone = 1;
 800a2a0:	4b0e      	ldr	r3, [pc, #56]	; (800a2dc <OnRadioRxDone+0x88>)
 800a2a2:	781a      	ldrb	r2, [r3, #0]
 800a2a4:	2108      	movs	r1, #8
 800a2a6:	430a      	orrs	r2, r1
 800a2a8:	701a      	strb	r2, [r3, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800a2aa:	4a0d      	ldr	r2, [pc, #52]	; (800a2e0 <OnRadioRxDone+0x8c>)
 800a2ac:	23d7      	movs	r3, #215	; 0xd7
 800a2ae:	009b      	lsls	r3, r3, #2
 800a2b0:	58d3      	ldr	r3, [r2, r3]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d00c      	beq.n	800a2d0 <OnRadioRxDone+0x7c>
 800a2b6:	4a0a      	ldr	r2, [pc, #40]	; (800a2e0 <OnRadioRxDone+0x8c>)
 800a2b8:	23d7      	movs	r3, #215	; 0xd7
 800a2ba:	009b      	lsls	r3, r3, #2
 800a2bc:	58d3      	ldr	r3, [r2, r3]
 800a2be:	68db      	ldr	r3, [r3, #12]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d005      	beq.n	800a2d0 <OnRadioRxDone+0x7c>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800a2c4:	4a06      	ldr	r2, [pc, #24]	; (800a2e0 <OnRadioRxDone+0x8c>)
 800a2c6:	23d7      	movs	r3, #215	; 0xd7
 800a2c8:	009b      	lsls	r3, r3, #2
 800a2ca:	58d3      	ldr	r3, [r2, r3]
 800a2cc:	68db      	ldr	r3, [r3, #12]
 800a2ce:	4798      	blx	r3
    }
#if !defined(NO_MAC_PRINTF)
    PRINTNOW(); PRINTF("PHY rxDone\n\r" );
#endif
}
 800a2d0:	46c0      	nop			; (mov r8, r8)
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	b004      	add	sp, #16
 800a2d6:	bdb0      	pop	{r4, r5, r7, pc}
 800a2d8:	20001538 	.word	0x20001538
 800a2dc:	20000dac 	.word	0x20000dac
 800a2e0:	2000070c 	.word	0x2000070c

0800a2e4 <OnRadioTxTimeout>:

static void OnRadioTxTimeout( void )
{
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800a2e8:	4b0d      	ldr	r3, [pc, #52]	; (800a320 <OnRadioTxTimeout+0x3c>)
 800a2ea:	781a      	ldrb	r2, [r3, #0]
 800a2ec:	2104      	movs	r1, #4
 800a2ee:	430a      	orrs	r2, r1
 800a2f0:	701a      	strb	r2, [r3, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800a2f2:	4a0c      	ldr	r2, [pc, #48]	; (800a324 <OnRadioTxTimeout+0x40>)
 800a2f4:	23d7      	movs	r3, #215	; 0xd7
 800a2f6:	009b      	lsls	r3, r3, #2
 800a2f8:	58d3      	ldr	r3, [r2, r3]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d00c      	beq.n	800a318 <OnRadioTxTimeout+0x34>
 800a2fe:	4a09      	ldr	r2, [pc, #36]	; (800a324 <OnRadioTxTimeout+0x40>)
 800a300:	23d7      	movs	r3, #215	; 0xd7
 800a302:	009b      	lsls	r3, r3, #2
 800a304:	58d3      	ldr	r3, [r2, r3]
 800a306:	68db      	ldr	r3, [r3, #12]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d005      	beq.n	800a318 <OnRadioTxTimeout+0x34>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800a30c:	4a05      	ldr	r2, [pc, #20]	; (800a324 <OnRadioTxTimeout+0x40>)
 800a30e:	23d7      	movs	r3, #215	; 0xd7
 800a310:	009b      	lsls	r3, r3, #2
 800a312:	58d3      	ldr	r3, [r2, r3]
 800a314:	68db      	ldr	r3, [r3, #12]
 800a316:	4798      	blx	r3
    }
#if !defined(NO_MAC_PRINTF)
    PRINTNOW(); PRINTF("PHY txTimeOut\n\r" );
#endif
}
 800a318:	46c0      	nop			; (mov r8, r8)
 800a31a:	46bd      	mov	sp, r7
 800a31c:	bd80      	pop	{r7, pc}
 800a31e:	46c0      	nop			; (mov r8, r8)
 800a320:	20000dac 	.word	0x20000dac
 800a324:	2000070c 	.word	0x2000070c

0800a328 <OnRadioRxError>:

static void OnRadioRxError( void )
{
 800a328:	b580      	push	{r7, lr}
 800a32a:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxError = 1;
 800a32c:	4b0d      	ldr	r3, [pc, #52]	; (800a364 <OnRadioRxError+0x3c>)
 800a32e:	781a      	ldrb	r2, [r3, #0]
 800a330:	2102      	movs	r1, #2
 800a332:	430a      	orrs	r2, r1
 800a334:	701a      	strb	r2, [r3, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800a336:	4a0c      	ldr	r2, [pc, #48]	; (800a368 <OnRadioRxError+0x40>)
 800a338:	23d7      	movs	r3, #215	; 0xd7
 800a33a:	009b      	lsls	r3, r3, #2
 800a33c:	58d3      	ldr	r3, [r2, r3]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d00c      	beq.n	800a35c <OnRadioRxError+0x34>
 800a342:	4a09      	ldr	r2, [pc, #36]	; (800a368 <OnRadioRxError+0x40>)
 800a344:	23d7      	movs	r3, #215	; 0xd7
 800a346:	009b      	lsls	r3, r3, #2
 800a348:	58d3      	ldr	r3, [r2, r3]
 800a34a:	68db      	ldr	r3, [r3, #12]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d005      	beq.n	800a35c <OnRadioRxError+0x34>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800a350:	4a05      	ldr	r2, [pc, #20]	; (800a368 <OnRadioRxError+0x40>)
 800a352:	23d7      	movs	r3, #215	; 0xd7
 800a354:	009b      	lsls	r3, r3, #2
 800a356:	58d3      	ldr	r3, [r2, r3]
 800a358:	68db      	ldr	r3, [r3, #12]
 800a35a:	4798      	blx	r3
    }
}
 800a35c:	46c0      	nop			; (mov r8, r8)
 800a35e:	46bd      	mov	sp, r7
 800a360:	bd80      	pop	{r7, pc}
 800a362:	46c0      	nop			; (mov r8, r8)
 800a364:	20000dac 	.word	0x20000dac
 800a368:	2000070c 	.word	0x2000070c

0800a36c <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
 800a36c:	b580      	push	{r7, lr}
 800a36e:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800a370:	4b0d      	ldr	r3, [pc, #52]	; (800a3a8 <OnRadioRxTimeout+0x3c>)
 800a372:	781a      	ldrb	r2, [r3, #0]
 800a374:	2101      	movs	r1, #1
 800a376:	430a      	orrs	r2, r1
 800a378:	701a      	strb	r2, [r3, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800a37a:	4a0c      	ldr	r2, [pc, #48]	; (800a3ac <OnRadioRxTimeout+0x40>)
 800a37c:	23d7      	movs	r3, #215	; 0xd7
 800a37e:	009b      	lsls	r3, r3, #2
 800a380:	58d3      	ldr	r3, [r2, r3]
 800a382:	2b00      	cmp	r3, #0
 800a384:	d00c      	beq.n	800a3a0 <OnRadioRxTimeout+0x34>
 800a386:	4a09      	ldr	r2, [pc, #36]	; (800a3ac <OnRadioRxTimeout+0x40>)
 800a388:	23d7      	movs	r3, #215	; 0xd7
 800a38a:	009b      	lsls	r3, r3, #2
 800a38c:	58d3      	ldr	r3, [r2, r3]
 800a38e:	68db      	ldr	r3, [r3, #12]
 800a390:	2b00      	cmp	r3, #0
 800a392:	d005      	beq.n	800a3a0 <OnRadioRxTimeout+0x34>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800a394:	4a05      	ldr	r2, [pc, #20]	; (800a3ac <OnRadioRxTimeout+0x40>)
 800a396:	23d7      	movs	r3, #215	; 0xd7
 800a398:	009b      	lsls	r3, r3, #2
 800a39a:	58d3      	ldr	r3, [r2, r3]
 800a39c:	68db      	ldr	r3, [r3, #12]
 800a39e:	4798      	blx	r3
    }
#if !defined(NO_MAC_PRINTF)
    PRINTNOW(); PRINTF("PHY rxTimeOut\n\r" );
#endif
}
 800a3a0:	46c0      	nop			; (mov r8, r8)
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	bd80      	pop	{r7, pc}
 800a3a6:	46c0      	nop			; (mov r8, r8)
 800a3a8:	20000dac 	.word	0x20000dac
 800a3ac:	2000070c 	.word	0x2000070c

0800a3b0 <ProcessRadioTxDone>:

static void ProcessRadioTxDone( void )
{
 800a3b0:	b580      	push	{r7, lr}
 800a3b2:	b084      	sub	sp, #16
 800a3b4:	af00      	add	r7, sp, #0
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    SetBandTxDoneParams_t txDone;

    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 800a3b6:	4a5e      	ldr	r2, [pc, #376]	; (800a530 <ProcessRadioTxDone+0x180>)
 800a3b8:	238e      	movs	r3, #142	; 0x8e
 800a3ba:	00db      	lsls	r3, r3, #3
 800a3bc:	58d3      	ldr	r3, [r2, r3]
 800a3be:	22c8      	movs	r2, #200	; 0xc8
 800a3c0:	5c9b      	ldrb	r3, [r3, r2]
 800a3c2:	2b02      	cmp	r3, #2
 800a3c4:	d003      	beq.n	800a3ce <ProcessRadioTxDone+0x1e>
    {
        Radio.Sleep( );
 800a3c6:	4b5b      	ldr	r3, [pc, #364]	; (800a534 <ProcessRadioTxDone+0x184>)
 800a3c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3ca:	4798      	blx	r3
 800a3cc:	e001      	b.n	800a3d2 <ProcessRadioTxDone+0x22>
    }
    else
    {
        OpenContinuousRx2Window( );
 800a3ce:	f002 ff95 	bl	800d2fc <OpenContinuousRx2Window>
    }

    // Setup timers
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 800a3d2:	4a57      	ldr	r2, [pc, #348]	; (800a530 <ProcessRadioTxDone+0x180>)
 800a3d4:	23f1      	movs	r3, #241	; 0xf1
 800a3d6:	009b      	lsls	r3, r3, #2
 800a3d8:	58d2      	ldr	r2, [r2, r3]
 800a3da:	4b57      	ldr	r3, [pc, #348]	; (800a538 <ProcessRadioTxDone+0x188>)
 800a3dc:	0011      	movs	r1, r2
 800a3de:	0018      	movs	r0, r3
 800a3e0:	f00b f86c 	bl	80154bc <TimerSetValue>
    TimerStart( &MacCtx.RxWindowTimer1 );
 800a3e4:	4b54      	ldr	r3, [pc, #336]	; (800a538 <ProcessRadioTxDone+0x188>)
 800a3e6:	0018      	movs	r0, r3
 800a3e8:	f00b f894 	bl	8015514 <TimerStart>
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 800a3ec:	4a50      	ldr	r2, [pc, #320]	; (800a530 <ProcessRadioTxDone+0x180>)
 800a3ee:	238e      	movs	r3, #142	; 0x8e
 800a3f0:	00db      	lsls	r3, r3, #3
 800a3f2:	58d3      	ldr	r3, [r2, r3]
 800a3f4:	22c8      	movs	r2, #200	; 0xc8
 800a3f6:	5c9b      	ldrb	r3, [r3, r2]
 800a3f8:	2b02      	cmp	r3, #2
 800a3fa:	d00c      	beq.n	800a416 <ProcessRadioTxDone+0x66>
    {
        TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 800a3fc:	4a4c      	ldr	r2, [pc, #304]	; (800a530 <ProcessRadioTxDone+0x180>)
 800a3fe:	23f2      	movs	r3, #242	; 0xf2
 800a400:	009b      	lsls	r3, r3, #2
 800a402:	58d2      	ldr	r2, [r2, r3]
 800a404:	4b4d      	ldr	r3, [pc, #308]	; (800a53c <ProcessRadioTxDone+0x18c>)
 800a406:	0011      	movs	r1, r2
 800a408:	0018      	movs	r0, r3
 800a40a:	f00b f857 	bl	80154bc <TimerSetValue>
        TimerStart( &MacCtx.RxWindowTimer2 );
 800a40e:	4b4b      	ldr	r3, [pc, #300]	; (800a53c <ProcessRadioTxDone+0x18c>)
 800a410:	0018      	movs	r0, r3
 800a412:	f00b f87f 	bl	8015514 <TimerStart>
    }
    if( ( MacCtx.NvmCtx->DeviceClass == CLASS_C ) || ( MacCtx.NvmCtx->NodeAckRequested == true ) )
 800a416:	4a46      	ldr	r2, [pc, #280]	; (800a530 <ProcessRadioTxDone+0x180>)
 800a418:	238e      	movs	r3, #142	; 0x8e
 800a41a:	00db      	lsls	r3, r3, #3
 800a41c:	58d3      	ldr	r3, [r2, r3]
 800a41e:	22c8      	movs	r2, #200	; 0xc8
 800a420:	5c9b      	ldrb	r3, [r3, r2]
 800a422:	2b02      	cmp	r3, #2
 800a424:	d007      	beq.n	800a436 <ProcessRadioTxDone+0x86>
 800a426:	4a42      	ldr	r2, [pc, #264]	; (800a530 <ProcessRadioTxDone+0x180>)
 800a428:	238e      	movs	r3, #142	; 0x8e
 800a42a:	00db      	lsls	r3, r3, #3
 800a42c:	58d3      	ldr	r3, [r2, r3]
 800a42e:	4a44      	ldr	r2, [pc, #272]	; (800a540 <ProcessRadioTxDone+0x190>)
 800a430:	5c9b      	ldrb	r3, [r3, r2]
 800a432:	2b00      	cmp	r3, #0
 800a434:	d022      	beq.n	800a47c <ProcessRadioTxDone+0xcc>
    {
        getPhy.Attribute = PHY_ACK_TIMEOUT;
 800a436:	210c      	movs	r1, #12
 800a438:	187b      	adds	r3, r7, r1
 800a43a:	2215      	movs	r2, #21
 800a43c:	701a      	strb	r2, [r3, #0]
        phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a43e:	4a3c      	ldr	r2, [pc, #240]	; (800a530 <ProcessRadioTxDone+0x180>)
 800a440:	238e      	movs	r3, #142	; 0x8e
 800a442:	00db      	lsls	r3, r3, #3
 800a444:	58d3      	ldr	r3, [r2, r3]
 800a446:	781b      	ldrb	r3, [r3, #0]
 800a448:	187a      	adds	r2, r7, r1
 800a44a:	0011      	movs	r1, r2
 800a44c:	0018      	movs	r0, r3
 800a44e:	f008 fb8a 	bl	8012b66 <RegionGetPhyParam>
 800a452:	0003      	movs	r3, r0
 800a454:	001a      	movs	r2, r3
 800a456:	2108      	movs	r1, #8
 800a458:	187b      	adds	r3, r7, r1
 800a45a:	601a      	str	r2, [r3, #0]
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 800a45c:	4a34      	ldr	r2, [pc, #208]	; (800a530 <ProcessRadioTxDone+0x180>)
 800a45e:	23f2      	movs	r3, #242	; 0xf2
 800a460:	009b      	lsls	r3, r3, #2
 800a462:	58d2      	ldr	r2, [r2, r3]
 800a464:	187b      	adds	r3, r7, r1
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	18d2      	adds	r2, r2, r3
 800a46a:	4b36      	ldr	r3, [pc, #216]	; (800a544 <ProcessRadioTxDone+0x194>)
 800a46c:	0011      	movs	r1, r2
 800a46e:	0018      	movs	r0, r3
 800a470:	f00b f824 	bl	80154bc <TimerSetValue>
        TimerStart( &MacCtx.AckTimeoutTimer );
 800a474:	4b33      	ldr	r3, [pc, #204]	; (800a544 <ProcessRadioTxDone+0x194>)
 800a476:	0018      	movs	r0, r3
 800a478:	f00b f84c 	bl	8015514 <TimerStart>
    }

    // Store last Tx channel
    MacCtx.NvmCtx->LastTxChannel = MacCtx.NvmCtx->Channel;
 800a47c:	4a2c      	ldr	r2, [pc, #176]	; (800a530 <ProcessRadioTxDone+0x180>)
 800a47e:	238e      	movs	r3, #142	; 0x8e
 800a480:	00db      	lsls	r3, r3, #3
 800a482:	58d1      	ldr	r1, [r2, r3]
 800a484:	4a2a      	ldr	r2, [pc, #168]	; (800a530 <ProcessRadioTxDone+0x180>)
 800a486:	238e      	movs	r3, #142	; 0x8e
 800a488:	00db      	lsls	r3, r3, #3
 800a48a:	58d2      	ldr	r2, [r2, r3]
 800a48c:	2314      	movs	r3, #20
 800a48e:	33ff      	adds	r3, #255	; 0xff
 800a490:	5cc9      	ldrb	r1, [r1, r3]
 800a492:	238a      	movs	r3, #138	; 0x8a
 800a494:	005b      	lsls	r3, r3, #1
 800a496:	54d1      	strb	r1, [r2, r3]
    // Update last tx done time for the current channel
    txDone.Channel = MacCtx.NvmCtx->Channel;
 800a498:	4a25      	ldr	r2, [pc, #148]	; (800a530 <ProcessRadioTxDone+0x180>)
 800a49a:	238e      	movs	r3, #142	; 0x8e
 800a49c:	00db      	lsls	r3, r3, #3
 800a49e:	58d2      	ldr	r2, [r2, r3]
 800a4a0:	2314      	movs	r3, #20
 800a4a2:	33ff      	adds	r3, #255	; 0xff
 800a4a4:	5cd2      	ldrb	r2, [r2, r3]
 800a4a6:	003b      	movs	r3, r7
 800a4a8:	701a      	strb	r2, [r3, #0]
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 800a4aa:	4a21      	ldr	r2, [pc, #132]	; (800a530 <ProcessRadioTxDone+0x180>)
 800a4ac:	238e      	movs	r3, #142	; 0x8e
 800a4ae:	00db      	lsls	r3, r3, #3
 800a4b0:	58d2      	ldr	r2, [r2, r3]
 800a4b2:	2389      	movs	r3, #137	; 0x89
 800a4b4:	009b      	lsls	r3, r3, #2
 800a4b6:	5cd3      	ldrb	r3, [r2, r3]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d103      	bne.n	800a4c4 <ProcessRadioTxDone+0x114>
    {
        txDone.Joined  = false;
 800a4bc:	003b      	movs	r3, r7
 800a4be:	2200      	movs	r2, #0
 800a4c0:	705a      	strb	r2, [r3, #1]
 800a4c2:	e002      	b.n	800a4ca <ProcessRadioTxDone+0x11a>
    }
    else
    {
        txDone.Joined  = true;
 800a4c4:	003b      	movs	r3, r7
 800a4c6:	2201      	movs	r2, #1
 800a4c8:	705a      	strb	r2, [r3, #1]
    }
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 800a4ca:	4b1f      	ldr	r3, [pc, #124]	; (800a548 <ProcessRadioTxDone+0x198>)
 800a4cc:	681a      	ldr	r2, [r3, #0]
 800a4ce:	003b      	movs	r3, r7
 800a4d0:	605a      	str	r2, [r3, #4]
    RegionSetBandTxDone( MacCtx.NvmCtx->Region, &txDone );
 800a4d2:	4a17      	ldr	r2, [pc, #92]	; (800a530 <ProcessRadioTxDone+0x180>)
 800a4d4:	238e      	movs	r3, #142	; 0x8e
 800a4d6:	00db      	lsls	r3, r3, #3
 800a4d8:	58d3      	ldr	r3, [r2, r3]
 800a4da:	781b      	ldrb	r3, [r3, #0]
 800a4dc:	003a      	movs	r2, r7
 800a4de:	0011      	movs	r1, r2
 800a4e0:	0018      	movs	r0, r3
 800a4e2:	f008 fb68 	bl	8012bb6 <RegionSetBandTxDone>
    // Update Aggregated last tx done time
    MacCtx.AggregatedLastTxDoneTime = TxDoneParams.CurTime;
 800a4e6:	4b18      	ldr	r3, [pc, #96]	; (800a548 <ProcessRadioTxDone+0x198>)
 800a4e8:	6819      	ldr	r1, [r3, #0]
 800a4ea:	4a11      	ldr	r2, [pc, #68]	; (800a530 <ProcessRadioTxDone+0x180>)
 800a4ec:	23d0      	movs	r3, #208	; 0xd0
 800a4ee:	009b      	lsls	r3, r3, #2
 800a4f0:	50d1      	str	r1, [r2, r3]

    if( MacCtx.NvmCtx->NodeAckRequested == false )
 800a4f2:	4a0f      	ldr	r2, [pc, #60]	; (800a530 <ProcessRadioTxDone+0x180>)
 800a4f4:	238e      	movs	r3, #142	; 0x8e
 800a4f6:	00db      	lsls	r3, r3, #3
 800a4f8:	58d3      	ldr	r3, [r2, r3]
 800a4fa:	4a11      	ldr	r2, [pc, #68]	; (800a540 <ProcessRadioTxDone+0x190>)
 800a4fc:	5c9b      	ldrb	r3, [r3, r2]
 800a4fe:	2201      	movs	r2, #1
 800a500:	4053      	eors	r3, r2
 800a502:	b2db      	uxtb	r3, r3
 800a504:	2b00      	cmp	r3, #0
 800a506:	d00f      	beq.n	800a528 <ProcessRadioTxDone+0x178>
    {
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800a508:	4b09      	ldr	r3, [pc, #36]	; (800a530 <ProcessRadioTxDone+0x180>)
 800a50a:	4a10      	ldr	r2, [pc, #64]	; (800a54c <ProcessRadioTxDone+0x19c>)
 800a50c:	2100      	movs	r1, #0
 800a50e:	5499      	strb	r1, [r3, r2]
        MacCtx.NvmCtx->ChannelsNbTransCounter++;
 800a510:	4a07      	ldr	r2, [pc, #28]	; (800a530 <ProcessRadioTxDone+0x180>)
 800a512:	238e      	movs	r3, #142	; 0x8e
 800a514:	00db      	lsls	r3, r3, #3
 800a516:	58d3      	ldr	r3, [r2, r3]
 800a518:	2288      	movs	r2, #136	; 0x88
 800a51a:	0052      	lsls	r2, r2, #1
 800a51c:	5c9a      	ldrb	r2, [r3, r2]
 800a51e:	3201      	adds	r2, #1
 800a520:	b2d1      	uxtb	r1, r2
 800a522:	2288      	movs	r2, #136	; 0x88
 800a524:	0052      	lsls	r2, r2, #1
 800a526:	5499      	strb	r1, [r3, r2]
    }
}
 800a528:	46c0      	nop			; (mov r8, r8)
 800a52a:	46bd      	mov	sp, r7
 800a52c:	b004      	add	sp, #16
 800a52e:	bd80      	pop	{r7, pc}
 800a530:	2000070c 	.word	0x2000070c
 800a534:	08020c58 	.word	0x08020c58
 800a538:	20000aa0 	.word	0x20000aa0
 800a53c:	20000ab8 	.word	0x20000ab8
 800a540:	00000219 	.word	0x00000219
 800a544:	20000b00 	.word	0x20000b00
 800a548:	20001534 	.word	0x20001534
 800a54c:	0000042d 	.word	0x0000042d

0800a550 <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
 800a550:	b580      	push	{r7, lr}
 800a552:	af00      	add	r7, sp, #0
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 800a554:	4a12      	ldr	r2, [pc, #72]	; (800a5a0 <PrepareRxDoneAbort+0x50>)
 800a556:	23d5      	movs	r3, #213	; 0xd5
 800a558:	009b      	lsls	r3, r3, #2
 800a55a:	58d3      	ldr	r3, [r2, r3]
 800a55c:	2280      	movs	r2, #128	; 0x80
 800a55e:	431a      	orrs	r2, r3
 800a560:	0011      	movs	r1, r2
 800a562:	4a0f      	ldr	r2, [pc, #60]	; (800a5a0 <PrepareRxDoneAbort+0x50>)
 800a564:	23d5      	movs	r3, #213	; 0xd5
 800a566:	009b      	lsls	r3, r3, #2
 800a568:	50d1      	str	r1, [r2, r3]

    if( MacCtx.NvmCtx->NodeAckRequested )
 800a56a:	4a0d      	ldr	r2, [pc, #52]	; (800a5a0 <PrepareRxDoneAbort+0x50>)
 800a56c:	238e      	movs	r3, #142	; 0x8e
 800a56e:	00db      	lsls	r3, r3, #3
 800a570:	58d3      	ldr	r3, [r2, r3]
 800a572:	4a0c      	ldr	r2, [pc, #48]	; (800a5a4 <PrepareRxDoneAbort+0x54>)
 800a574:	5c9b      	ldrb	r3, [r3, r2]
 800a576:	2b00      	cmp	r3, #0
 800a578:	d002      	beq.n	800a580 <PrepareRxDoneAbort+0x30>
    {
        OnAckTimeoutTimerEvent( NULL );
 800a57a:	2000      	movs	r0, #0
 800a57c:	f001 fa66 	bl	800ba4c <OnAckTimeoutTimerEvent>
    }

    MacCtx.MacFlags.Bits.McpsInd = 1;
 800a580:	4b07      	ldr	r3, [pc, #28]	; (800a5a0 <PrepareRxDoneAbort+0x50>)
 800a582:	4a09      	ldr	r2, [pc, #36]	; (800a5a8 <PrepareRxDoneAbort+0x58>)
 800a584:	5c99      	ldrb	r1, [r3, r2]
 800a586:	2002      	movs	r0, #2
 800a588:	4301      	orrs	r1, r0
 800a58a:	5499      	strb	r1, [r3, r2]
    MacCtx.MacFlags.Bits.MacDone = 1;
 800a58c:	4b04      	ldr	r3, [pc, #16]	; (800a5a0 <PrepareRxDoneAbort+0x50>)
 800a58e:	4a06      	ldr	r2, [pc, #24]	; (800a5a8 <PrepareRxDoneAbort+0x58>)
 800a590:	5c99      	ldrb	r1, [r3, r2]
 800a592:	2010      	movs	r0, #16
 800a594:	4301      	orrs	r1, r0
 800a596:	5499      	strb	r1, [r3, r2]
}
 800a598:	46c0      	nop			; (mov r8, r8)
 800a59a:	46bd      	mov	sp, r7
 800a59c:	bd80      	pop	{r7, pc}
 800a59e:	46c0      	nop			; (mov r8, r8)
 800a5a0:	2000070c 	.word	0x2000070c
 800a5a4:	00000219 	.word	0x00000219
 800a5a8:	0000046d 	.word	0x0000046d

0800a5ac <ProcessRadioRxDone>:

static void ProcessRadioRxDone( void )
{
 800a5ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a5ae:	b0a7      	sub	sp, #156	; 0x9c
 800a5b0:	af04      	add	r7, sp, #16
    LoRaMacHeader_t macHdr;
    ApplyCFListParams_t applyCFList;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800a5b2:	2380      	movs	r3, #128	; 0x80
 800a5b4:	18fb      	adds	r3, r7, r3
 800a5b6:	2210      	movs	r2, #16
 800a5b8:	701a      	strb	r2, [r3, #0]

    LoRaMacMessageData_t macMsgData;
    LoRaMacMessageJoinAccept_t macMsgJoinAccept;
    uint8_t *payload = RxDoneParams.Payload;
 800a5ba:	4bda      	ldr	r3, [pc, #872]	; (800a924 <ProcessRadioRxDone+0x378>)
 800a5bc:	685b      	ldr	r3, [r3, #4]
 800a5be:	67fb      	str	r3, [r7, #124]	; 0x7c
    uint16_t size = RxDoneParams.Size;
 800a5c0:	247a      	movs	r4, #122	; 0x7a
 800a5c2:	193b      	adds	r3, r7, r4
 800a5c4:	4ad7      	ldr	r2, [pc, #860]	; (800a924 <ProcessRadioRxDone+0x378>)
 800a5c6:	8912      	ldrh	r2, [r2, #8]
 800a5c8:	801a      	strh	r2, [r3, #0]
    int16_t rssi = RxDoneParams.Rssi;
 800a5ca:	2078      	movs	r0, #120	; 0x78
 800a5cc:	183b      	adds	r3, r7, r0
 800a5ce:	4ad5      	ldr	r2, [pc, #852]	; (800a924 <ProcessRadioRxDone+0x378>)
 800a5d0:	8952      	ldrh	r2, [r2, #10]
 800a5d2:	801a      	strh	r2, [r3, #0]
    int8_t snr = RxDoneParams.Snr;
 800a5d4:	2577      	movs	r5, #119	; 0x77
 800a5d6:	197b      	adds	r3, r7, r5
 800a5d8:	4ad2      	ldr	r2, [pc, #840]	; (800a924 <ProcessRadioRxDone+0x378>)
 800a5da:	7b12      	ldrb	r2, [r2, #12]
 800a5dc:	701a      	strb	r2, [r3, #0]

    uint8_t pktHeaderLen = 0;
 800a5de:	2376      	movs	r3, #118	; 0x76
 800a5e0:	18fb      	adds	r3, r7, r3
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	701a      	strb	r2, [r3, #0]

    uint32_t downLinkCounter = 0;
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	60bb      	str	r3, [r7, #8]
    uint32_t address = MacCtx.NvmCtx->DevAddr;
 800a5ea:	4acf      	ldr	r2, [pc, #828]	; (800a928 <ProcessRadioRxDone+0x37c>)
 800a5ec:	238e      	movs	r3, #142	; 0x8e
 800a5ee:	00db      	lsls	r3, r3, #3
 800a5f0:	58d3      	ldr	r3, [r2, r3]
 800a5f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5f4:	2284      	movs	r2, #132	; 0x84
 800a5f6:	18ba      	adds	r2, r7, r2
 800a5f8:	6013      	str	r3, [r2, #0]
    uint8_t multicast = 0;
 800a5fa:	2383      	movs	r3, #131	; 0x83
 800a5fc:	18fb      	adds	r3, r7, r3
 800a5fe:	2200      	movs	r2, #0
 800a600:	701a      	strb	r2, [r3, #0]
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 800a602:	2382      	movs	r3, #130	; 0x82
 800a604:	18fb      	adds	r3, r7, r3
 800a606:	2204      	movs	r2, #4
 800a608:	701a      	strb	r2, [r3, #0]
    LoRaMacFCntHandlerStatus_t fCntHandlerStatus;
    FCntIdentifier_t fCntID;

    MacCtx.McpsConfirm.AckReceived = false;
 800a60a:	4ac7      	ldr	r2, [pc, #796]	; (800a928 <ProcessRadioRxDone+0x37c>)
 800a60c:	2386      	movs	r3, #134	; 0x86
 800a60e:	00db      	lsls	r3, r3, #3
 800a610:	2100      	movs	r1, #0
 800a612:	54d1      	strb	r1, [r2, r3]
    MacCtx.McpsIndication.Rssi = rssi;
 800a614:	4bc4      	ldr	r3, [pc, #784]	; (800a928 <ProcessRadioRxDone+0x37c>)
 800a616:	183a      	adds	r2, r7, r0
 800a618:	49c4      	ldr	r1, [pc, #784]	; (800a92c <ProcessRadioRxDone+0x380>)
 800a61a:	8812      	ldrh	r2, [r2, #0]
 800a61c:	525a      	strh	r2, [r3, r1]
    MacCtx.McpsIndication.Snr = snr;
 800a61e:	4ac2      	ldr	r2, [pc, #776]	; (800a928 <ProcessRadioRxDone+0x37c>)
 800a620:	1979      	adds	r1, r7, r5
 800a622:	2384      	movs	r3, #132	; 0x84
 800a624:	00db      	lsls	r3, r3, #3
 800a626:	7809      	ldrb	r1, [r1, #0]
 800a628:	54d1      	strb	r1, [r2, r3]
    MacCtx.McpsIndication.RxSlot = MacCtx.RxSlot;
 800a62a:	4bbf      	ldr	r3, [pc, #764]	; (800a928 <ProcessRadioRxDone+0x37c>)
 800a62c:	4ac0      	ldr	r2, [pc, #768]	; (800a930 <ProcessRadioRxDone+0x384>)
 800a62e:	5c99      	ldrb	r1, [r3, r2]
 800a630:	4bbd      	ldr	r3, [pc, #756]	; (800a928 <ProcessRadioRxDone+0x37c>)
 800a632:	4ac0      	ldr	r2, [pc, #768]	; (800a934 <ProcessRadioRxDone+0x388>)
 800a634:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.Port = 0;
 800a636:	4bbc      	ldr	r3, [pc, #752]	; (800a928 <ProcessRadioRxDone+0x37c>)
 800a638:	4abf      	ldr	r2, [pc, #764]	; (800a938 <ProcessRadioRxDone+0x38c>)
 800a63a:	2100      	movs	r1, #0
 800a63c:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.Multicast = 0;
 800a63e:	4bba      	ldr	r3, [pc, #744]	; (800a928 <ProcessRadioRxDone+0x37c>)
 800a640:	4abe      	ldr	r2, [pc, #760]	; (800a93c <ProcessRadioRxDone+0x390>)
 800a642:	2100      	movs	r1, #0
 800a644:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.FramePending = 0;
 800a646:	4bb8      	ldr	r3, [pc, #736]	; (800a928 <ProcessRadioRxDone+0x37c>)
 800a648:	4abd      	ldr	r2, [pc, #756]	; (800a940 <ProcessRadioRxDone+0x394>)
 800a64a:	2100      	movs	r1, #0
 800a64c:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.Buffer = NULL;
 800a64e:	4ab6      	ldr	r2, [pc, #728]	; (800a928 <ProcessRadioRxDone+0x37c>)
 800a650:	2383      	movs	r3, #131	; 0x83
 800a652:	00db      	lsls	r3, r3, #3
 800a654:	2100      	movs	r1, #0
 800a656:	50d1      	str	r1, [r2, r3]
    MacCtx.McpsIndication.BufferSize = 0;
 800a658:	4bb3      	ldr	r3, [pc, #716]	; (800a928 <ProcessRadioRxDone+0x37c>)
 800a65a:	4aba      	ldr	r2, [pc, #744]	; (800a944 <ProcessRadioRxDone+0x398>)
 800a65c:	2100      	movs	r1, #0
 800a65e:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.RxData = false;
 800a660:	4bb1      	ldr	r3, [pc, #708]	; (800a928 <ProcessRadioRxDone+0x37c>)
 800a662:	4ab9      	ldr	r2, [pc, #740]	; (800a948 <ProcessRadioRxDone+0x39c>)
 800a664:	2100      	movs	r1, #0
 800a666:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.AckReceived = false;
 800a668:	4baf      	ldr	r3, [pc, #700]	; (800a928 <ProcessRadioRxDone+0x37c>)
 800a66a:	4ab8      	ldr	r2, [pc, #736]	; (800a94c <ProcessRadioRxDone+0x3a0>)
 800a66c:	2100      	movs	r1, #0
 800a66e:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.DownLinkCounter = 0;
 800a670:	4bad      	ldr	r3, [pc, #692]	; (800a928 <ProcessRadioRxDone+0x37c>)
 800a672:	4ab7      	ldr	r2, [pc, #732]	; (800a950 <ProcessRadioRxDone+0x3a4>)
 800a674:	2100      	movs	r1, #0
 800a676:	5099      	str	r1, [r3, r2]
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800a678:	4aab      	ldr	r2, [pc, #684]	; (800a928 <ProcessRadioRxDone+0x37c>)
 800a67a:	2382      	movs	r3, #130	; 0x82
 800a67c:	00db      	lsls	r3, r3, #3
 800a67e:	2100      	movs	r1, #0
 800a680:	54d1      	strb	r1, [r2, r3]
    MacCtx.McpsIndication.DevAddress = 0;
 800a682:	4aa9      	ldr	r2, [pc, #676]	; (800a928 <ProcessRadioRxDone+0x37c>)
 800a684:	2385      	movs	r3, #133	; 0x85
 800a686:	00db      	lsls	r3, r3, #3
 800a688:	2100      	movs	r1, #0
 800a68a:	50d1      	str	r1, [r2, r3]

    Radio.Sleep( );
 800a68c:	4bb1      	ldr	r3, [pc, #708]	; (800a954 <ProcessRadioRxDone+0x3a8>)
 800a68e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a690:	4798      	blx	r3
    TimerStop( &MacCtx.RxWindowTimer2 );
 800a692:	4bb1      	ldr	r3, [pc, #708]	; (800a958 <ProcessRadioRxDone+0x3ac>)
 800a694:	0018      	movs	r0, r3
 800a696:	f00a ff93 	bl	80155c0 <TimerStop>

    // This function must be called even if we are not in class b mode yet.
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 800a69a:	193b      	adds	r3, r7, r4
 800a69c:	881a      	ldrh	r2, [r3, #0]
 800a69e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a6a0:	0011      	movs	r1, r2
 800a6a2:	0018      	movs	r0, r3
 800a6a4:	f005 fab3 	bl	800fc0e <LoRaMacClassBRxBeacon>
 800a6a8:	1e03      	subs	r3, r0, #0
 800a6aa:	d00d      	beq.n	800a6c8 <ProcessRadioRxDone+0x11c>
    {
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 800a6ac:	4b9e      	ldr	r3, [pc, #632]	; (800a928 <ProcessRadioRxDone+0x37c>)
 800a6ae:	2278      	movs	r2, #120	; 0x78
 800a6b0:	18ba      	adds	r2, r7, r2
 800a6b2:	49aa      	ldr	r1, [pc, #680]	; (800a95c <ProcessRadioRxDone+0x3b0>)
 800a6b4:	8812      	ldrh	r2, [r2, #0]
 800a6b6:	525a      	strh	r2, [r3, r1]
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 800a6b8:	4b9b      	ldr	r3, [pc, #620]	; (800a928 <ProcessRadioRxDone+0x37c>)
 800a6ba:	2277      	movs	r2, #119	; 0x77
 800a6bc:	18ba      	adds	r2, r7, r2
 800a6be:	49a8      	ldr	r1, [pc, #672]	; (800a960 <ProcessRadioRxDone+0x3b4>)
 800a6c0:	7812      	ldrb	r2, [r2, #0]
 800a6c2:	545a      	strb	r2, [r3, r1]
        return;
 800a6c4:	f000 fc85 	bl	800afd2 <ProcessRadioRxDone+0xa26>
    }
    // Check if we expect a ping or a multicast slot.
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 800a6c8:	4a97      	ldr	r2, [pc, #604]	; (800a928 <ProcessRadioRxDone+0x37c>)
 800a6ca:	238e      	movs	r3, #142	; 0x8e
 800a6cc:	00db      	lsls	r3, r3, #3
 800a6ce:	58d3      	ldr	r3, [r2, r3]
 800a6d0:	22c8      	movs	r2, #200	; 0xc8
 800a6d2:	5c9b      	ldrb	r3, [r3, r2]
 800a6d4:	2b01      	cmp	r3, #1
 800a6d6:	d11c      	bne.n	800a712 <ProcessRadioRxDone+0x166>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800a6d8:	f005 faab 	bl	800fc32 <LoRaMacClassBIsPingExpected>
 800a6dc:	1e03      	subs	r3, r0, #0
 800a6de:	d00a      	beq.n	800a6f6 <ProcessRadioRxDone+0x14a>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800a6e0:	2000      	movs	r0, #0
 800a6e2:	f005 fa62 	bl	800fbaa <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800a6e6:	2000      	movs	r0, #0
 800a6e8:	f005 fa81 	bl	800fbee <LoRaMacClassBPingSlotTimerEvent>
             MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_PING_SLOT;
 800a6ec:	4b8e      	ldr	r3, [pc, #568]	; (800a928 <ProcessRadioRxDone+0x37c>)
 800a6ee:	4a91      	ldr	r2, [pc, #580]	; (800a934 <ProcessRadioRxDone+0x388>)
 800a6f0:	2103      	movs	r1, #3
 800a6f2:	5499      	strb	r1, [r3, r2]
 800a6f4:	e00d      	b.n	800a712 <ProcessRadioRxDone+0x166>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800a6f6:	f005 faa2 	bl	800fc3e <LoRaMacClassBIsMulticastExpected>
 800a6fa:	1e03      	subs	r3, r0, #0
 800a6fc:	d009      	beq.n	800a712 <ProcessRadioRxDone+0x166>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800a6fe:	2000      	movs	r0, #0
 800a700:	f005 fa5d 	bl	800fbbe <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800a704:	2000      	movs	r0, #0
 800a706:	f005 fa7a 	bl	800fbfe <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_MULTICAST_SLOT;
 800a70a:	4b87      	ldr	r3, [pc, #540]	; (800a928 <ProcessRadioRxDone+0x37c>)
 800a70c:	4a89      	ldr	r2, [pc, #548]	; (800a934 <ProcessRadioRxDone+0x388>)
 800a70e:	2104      	movs	r1, #4
 800a710:	5499      	strb	r1, [r3, r2]
        }
    }

    macHdr.Value = payload[pktHeaderLen++];
 800a712:	2276      	movs	r2, #118	; 0x76
 800a714:	18bb      	adds	r3, r7, r2
 800a716:	781b      	ldrb	r3, [r3, #0]
 800a718:	18ba      	adds	r2, r7, r2
 800a71a:	1c59      	adds	r1, r3, #1
 800a71c:	7011      	strb	r1, [r2, #0]
 800a71e:	001a      	movs	r2, r3
 800a720:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a722:	189b      	adds	r3, r3, r2
 800a724:	781a      	ldrb	r2, [r3, #0]
 800a726:	2174      	movs	r1, #116	; 0x74
 800a728:	187b      	adds	r3, r7, r1
 800a72a:	701a      	strb	r2, [r3, #0]

    switch( macHdr.Bits.MType )
 800a72c:	187b      	adds	r3, r7, r1
 800a72e:	781b      	ldrb	r3, [r3, #0]
 800a730:	061b      	lsls	r3, r3, #24
 800a732:	0f5b      	lsrs	r3, r3, #29
 800a734:	b2db      	uxtb	r3, r3
 800a736:	2b03      	cmp	r3, #3
 800a738:	d100      	bne.n	800a73c <ProcessRadioRxDone+0x190>
 800a73a:	e11c      	b.n	800a976 <ProcessRadioRxDone+0x3ca>
 800a73c:	dc03      	bgt.n	800a746 <ProcessRadioRxDone+0x19a>
 800a73e:	2b01      	cmp	r3, #1
 800a740:	d00a      	beq.n	800a758 <ProcessRadioRxDone+0x1ac>
 800a742:	f000 fc18 	bl	800af76 <ProcessRadioRxDone+0x9ca>
 800a746:	2b05      	cmp	r3, #5
 800a748:	d100      	bne.n	800a74c <ProcessRadioRxDone+0x1a0>
 800a74a:	e10f      	b.n	800a96c <ProcessRadioRxDone+0x3c0>
 800a74c:	2b07      	cmp	r3, #7
 800a74e:	d101      	bne.n	800a754 <ProcessRadioRxDone+0x1a8>
 800a750:	f000 fbe6 	bl	800af20 <ProcessRadioRxDone+0x974>
 800a754:	f000 fc0f 	bl	800af76 <ProcessRadioRxDone+0x9ca>
    {
        case FRAME_TYPE_JOIN_ACCEPT:
            macMsgJoinAccept.Buffer = payload;
 800a758:	210c      	movs	r1, #12
 800a75a:	187b      	adds	r3, r7, r1
 800a75c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800a75e:	601a      	str	r2, [r3, #0]
            macMsgJoinAccept.BufSize = size;
 800a760:	237a      	movs	r3, #122	; 0x7a
 800a762:	18fb      	adds	r3, r7, r3
 800a764:	881b      	ldrh	r3, [r3, #0]
 800a766:	b2da      	uxtb	r2, r3
 800a768:	187b      	adds	r3, r7, r1
 800a76a:	711a      	strb	r2, [r3, #4]

            // Abort in case if the device isn't joined yet and no rejoin request is ongoing.
            if( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE )
 800a76c:	4a6e      	ldr	r2, [pc, #440]	; (800a928 <ProcessRadioRxDone+0x37c>)
 800a76e:	238e      	movs	r3, #142	; 0x8e
 800a770:	00db      	lsls	r3, r3, #3
 800a772:	58d2      	ldr	r2, [r2, r3]
 800a774:	2389      	movs	r3, #137	; 0x89
 800a776:	009b      	lsls	r3, r3, #2
 800a778:	5cd3      	ldrb	r3, [r2, r3]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d007      	beq.n	800a78e <ProcessRadioRxDone+0x1e2>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a77e:	4b6a      	ldr	r3, [pc, #424]	; (800a928 <ProcessRadioRxDone+0x37c>)
 800a780:	4a78      	ldr	r2, [pc, #480]	; (800a964 <ProcessRadioRxDone+0x3b8>)
 800a782:	2101      	movs	r1, #1
 800a784:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
 800a786:	f7ff fee3 	bl	800a550 <PrepareRxDoneAbort>
                return;
 800a78a:	f000 fc22 	bl	800afd2 <ProcessRadioRxDone+0xa26>
            }
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, MacCtx.JoinEui, &macMsgJoinAccept );
 800a78e:	4b66      	ldr	r3, [pc, #408]	; (800a928 <ProcessRadioRxDone+0x37c>)
 800a790:	685b      	ldr	r3, [r3, #4]
 800a792:	2580      	movs	r5, #128	; 0x80
 800a794:	197c      	adds	r4, r7, r5
 800a796:	220c      	movs	r2, #12
 800a798:	18ba      	adds	r2, r7, r2
 800a79a:	0019      	movs	r1, r3
 800a79c:	20ff      	movs	r0, #255	; 0xff
 800a79e:	f006 ffe9 	bl	8011774 <LoRaMacCryptoHandleJoinAccept>
 800a7a2:	0003      	movs	r3, r0
 800a7a4:	7023      	strb	r3, [r4, #0]

            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 800a7a6:	197b      	adds	r3, r7, r5
 800a7a8:	781b      	ldrb	r3, [r3, #0]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d000      	beq.n	800a7b0 <ProcessRadioRxDone+0x204>
 800a7ae:	e0ad      	b.n	800a90c <ProcessRadioRxDone+0x360>
            {
                // Network ID
                MacCtx.NvmCtx->NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 800a7b0:	240c      	movs	r4, #12
 800a7b2:	193b      	adds	r3, r7, r4
 800a7b4:	7a59      	ldrb	r1, [r3, #9]
 800a7b6:	4a5c      	ldr	r2, [pc, #368]	; (800a928 <ProcessRadioRxDone+0x37c>)
 800a7b8:	238e      	movs	r3, #142	; 0x8e
 800a7ba:	00db      	lsls	r3, r3, #3
 800a7bc:	58d3      	ldr	r3, [r2, r3]
 800a7be:	000a      	movs	r2, r1
 800a7c0:	641a      	str	r2, [r3, #64]	; 0x40
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 800a7c2:	4a59      	ldr	r2, [pc, #356]	; (800a928 <ProcessRadioRxDone+0x37c>)
 800a7c4:	238e      	movs	r3, #142	; 0x8e
 800a7c6:	00db      	lsls	r3, r3, #3
 800a7c8:	58d3      	ldr	r3, [r2, r3]
 800a7ca:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800a7cc:	193b      	adds	r3, r7, r4
 800a7ce:	7a9b      	ldrb	r3, [r3, #10]
 800a7d0:	021a      	lsls	r2, r3, #8
 800a7d2:	4855      	ldr	r0, [pc, #340]	; (800a928 <ProcessRadioRxDone+0x37c>)
 800a7d4:	238e      	movs	r3, #142	; 0x8e
 800a7d6:	00db      	lsls	r3, r3, #3
 800a7d8:	58c3      	ldr	r3, [r0, r3]
 800a7da:	430a      	orrs	r2, r1
 800a7dc:	641a      	str	r2, [r3, #64]	; 0x40
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800a7de:	4a52      	ldr	r2, [pc, #328]	; (800a928 <ProcessRadioRxDone+0x37c>)
 800a7e0:	238e      	movs	r3, #142	; 0x8e
 800a7e2:	00db      	lsls	r3, r3, #3
 800a7e4:	58d3      	ldr	r3, [r2, r3]
 800a7e6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800a7e8:	193b      	adds	r3, r7, r4
 800a7ea:	7adb      	ldrb	r3, [r3, #11]
 800a7ec:	041a      	lsls	r2, r3, #16
 800a7ee:	484e      	ldr	r0, [pc, #312]	; (800a928 <ProcessRadioRxDone+0x37c>)
 800a7f0:	238e      	movs	r3, #142	; 0x8e
 800a7f2:	00db      	lsls	r3, r3, #3
 800a7f4:	58c3      	ldr	r3, [r0, r3]
 800a7f6:	430a      	orrs	r2, r1
 800a7f8:	641a      	str	r2, [r3, #64]	; 0x40

                // Device Address
                MacCtx.NvmCtx->DevAddr = macMsgJoinAccept.DevAddr;
 800a7fa:	4a4b      	ldr	r2, [pc, #300]	; (800a928 <ProcessRadioRxDone+0x37c>)
 800a7fc:	238e      	movs	r3, #142	; 0x8e
 800a7fe:	00db      	lsls	r3, r3, #3
 800a800:	58d3      	ldr	r3, [r2, r3]
 800a802:	193a      	adds	r2, r7, r4
 800a804:	68d2      	ldr	r2, [r2, #12]
 800a806:	645a      	str	r2, [r3, #68]	; 0x44

                // DLSettings
                MacCtx.NvmCtx->MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 800a808:	193b      	adds	r3, r7, r4
 800a80a:	7c1b      	ldrb	r3, [r3, #16]
 800a80c:	065b      	lsls	r3, r3, #25
 800a80e:	0f5b      	lsrs	r3, r3, #29
 800a810:	b2d9      	uxtb	r1, r3
 800a812:	4a45      	ldr	r2, [pc, #276]	; (800a928 <ProcessRadioRxDone+0x37c>)
 800a814:	238e      	movs	r3, #142	; 0x8e
 800a816:	00db      	lsls	r3, r3, #3
 800a818:	58d3      	ldr	r3, [r2, r3]
 800a81a:	22f5      	movs	r2, #245	; 0xf5
 800a81c:	5499      	strb	r1, [r3, r2]
                MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800a81e:	193b      	adds	r3, r7, r4
 800a820:	7c1b      	ldrb	r3, [r3, #16]
 800a822:	071b      	lsls	r3, r3, #28
 800a824:	0f1b      	lsrs	r3, r3, #28
 800a826:	b2d9      	uxtb	r1, r3
 800a828:	4a3f      	ldr	r2, [pc, #252]	; (800a928 <ProcessRadioRxDone+0x37c>)
 800a82a:	238e      	movs	r3, #142	; 0x8e
 800a82c:	00db      	lsls	r3, r3, #3
 800a82e:	58d3      	ldr	r3, [r2, r3]
 800a830:	22fc      	movs	r2, #252	; 0xfc
 800a832:	5499      	strb	r1, [r3, r2]

                // RxDelay
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 800a834:	193b      	adds	r3, r7, r4
 800a836:	7c59      	ldrb	r1, [r3, #17]
 800a838:	4a3b      	ldr	r2, [pc, #236]	; (800a928 <ProcessRadioRxDone+0x37c>)
 800a83a:	238e      	movs	r3, #142	; 0x8e
 800a83c:	00db      	lsls	r3, r3, #3
 800a83e:	58d3      	ldr	r3, [r2, r3]
 800a840:	22e4      	movs	r2, #228	; 0xe4
 800a842:	5099      	str	r1, [r3, r2]
                if( MacCtx.NvmCtx->MacParams.ReceiveDelay1 == 0 )
 800a844:	4a38      	ldr	r2, [pc, #224]	; (800a928 <ProcessRadioRxDone+0x37c>)
 800a846:	238e      	movs	r3, #142	; 0x8e
 800a848:	00db      	lsls	r3, r3, #3
 800a84a:	58d3      	ldr	r3, [r2, r3]
 800a84c:	22e4      	movs	r2, #228	; 0xe4
 800a84e:	589b      	ldr	r3, [r3, r2]
 800a850:	2b00      	cmp	r3, #0
 800a852:	d106      	bne.n	800a862 <ProcessRadioRxDone+0x2b6>
                {
                    MacCtx.NvmCtx->MacParams.ReceiveDelay1 = 1;
 800a854:	4a34      	ldr	r2, [pc, #208]	; (800a928 <ProcessRadioRxDone+0x37c>)
 800a856:	238e      	movs	r3, #142	; 0x8e
 800a858:	00db      	lsls	r3, r3, #3
 800a85a:	58d3      	ldr	r3, [r2, r3]
 800a85c:	22e4      	movs	r2, #228	; 0xe4
 800a85e:	2101      	movs	r1, #1
 800a860:	5099      	str	r1, [r3, r2]
                }
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 *= 1000;
 800a862:	4a31      	ldr	r2, [pc, #196]	; (800a928 <ProcessRadioRxDone+0x37c>)
 800a864:	238e      	movs	r3, #142	; 0x8e
 800a866:	00db      	lsls	r3, r3, #3
 800a868:	58d3      	ldr	r3, [r2, r3]
 800a86a:	22e4      	movs	r2, #228	; 0xe4
 800a86c:	589a      	ldr	r2, [r3, r2]
 800a86e:	492e      	ldr	r1, [pc, #184]	; (800a928 <ProcessRadioRxDone+0x37c>)
 800a870:	238e      	movs	r3, #142	; 0x8e
 800a872:	00db      	lsls	r3, r3, #3
 800a874:	58c9      	ldr	r1, [r1, r3]
 800a876:	0013      	movs	r3, r2
 800a878:	015b      	lsls	r3, r3, #5
 800a87a:	1a9b      	subs	r3, r3, r2
 800a87c:	009b      	lsls	r3, r3, #2
 800a87e:	189b      	adds	r3, r3, r2
 800a880:	00db      	lsls	r3, r3, #3
 800a882:	001a      	movs	r2, r3
 800a884:	23e4      	movs	r3, #228	; 0xe4
 800a886:	50ca      	str	r2, [r1, r3]
                MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + 1000;
 800a888:	4a27      	ldr	r2, [pc, #156]	; (800a928 <ProcessRadioRxDone+0x37c>)
 800a88a:	238e      	movs	r3, #142	; 0x8e
 800a88c:	00db      	lsls	r3, r3, #3
 800a88e:	58d3      	ldr	r3, [r2, r3]
 800a890:	22e4      	movs	r2, #228	; 0xe4
 800a892:	589a      	ldr	r2, [r3, r2]
 800a894:	4924      	ldr	r1, [pc, #144]	; (800a928 <ProcessRadioRxDone+0x37c>)
 800a896:	238e      	movs	r3, #142	; 0x8e
 800a898:	00db      	lsls	r3, r3, #3
 800a89a:	58cb      	ldr	r3, [r1, r3]
 800a89c:	21fa      	movs	r1, #250	; 0xfa
 800a89e:	0089      	lsls	r1, r1, #2
 800a8a0:	468c      	mov	ip, r1
 800a8a2:	4462      	add	r2, ip
 800a8a4:	21e8      	movs	r1, #232	; 0xe8
 800a8a6:	505a      	str	r2, [r3, r1]

                MacCtx.NvmCtx->Version.Fields.Minor = 0;
 800a8a8:	4a1f      	ldr	r2, [pc, #124]	; (800a928 <ProcessRadioRxDone+0x37c>)
 800a8aa:	238e      	movs	r3, #142	; 0x8e
 800a8ac:	00db      	lsls	r3, r3, #3
 800a8ae:	58d3      	ldr	r3, [r2, r3]
 800a8b0:	4a2d      	ldr	r2, [pc, #180]	; (800a968 <ProcessRadioRxDone+0x3bc>)
 800a8b2:	2100      	movs	r1, #0
 800a8b4:	5499      	strb	r1, [r3, r2]

                // Apply CF list
                applyCFList.Payload = macMsgJoinAccept.CFList;
 800a8b6:	216c      	movs	r1, #108	; 0x6c
 800a8b8:	187b      	adds	r3, r7, r1
 800a8ba:	220c      	movs	r2, #12
 800a8bc:	18ba      	adds	r2, r7, r2
 800a8be:	3212      	adds	r2, #18
 800a8c0:	601a      	str	r2, [r3, #0]
                // Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
                applyCFList.Size = size - 17;
 800a8c2:	237a      	movs	r3, #122	; 0x7a
 800a8c4:	18fb      	adds	r3, r7, r3
 800a8c6:	881b      	ldrh	r3, [r3, #0]
 800a8c8:	b2db      	uxtb	r3, r3
 800a8ca:	3b11      	subs	r3, #17
 800a8cc:	b2da      	uxtb	r2, r3
 800a8ce:	187b      	adds	r3, r7, r1
 800a8d0:	711a      	strb	r2, [r3, #4]

                RegionApplyCFList( MacCtx.NvmCtx->Region, &applyCFList );
 800a8d2:	4a15      	ldr	r2, [pc, #84]	; (800a928 <ProcessRadioRxDone+0x37c>)
 800a8d4:	238e      	movs	r3, #142	; 0x8e
 800a8d6:	00db      	lsls	r3, r3, #3
 800a8d8:	58d3      	ldr	r3, [r2, r3]
 800a8da:	781b      	ldrb	r3, [r3, #0]
 800a8dc:	187a      	adds	r2, r7, r1
 800a8de:	0011      	movs	r1, r2
 800a8e0:	0018      	movs	r0, r3
 800a8e2:	f008 f9c4 	bl	8012c6e <RegionApplyCFList>

                MacCtx.NvmCtx->NetworkActivation = ACTIVATION_TYPE_OTAA;
 800a8e6:	4a10      	ldr	r2, [pc, #64]	; (800a928 <ProcessRadioRxDone+0x37c>)
 800a8e8:	238e      	movs	r3, #142	; 0x8e
 800a8ea:	00db      	lsls	r3, r3, #3
 800a8ec:	58d2      	ldr	r2, [r2, r3]
 800a8ee:	2389      	movs	r3, #137	; 0x89
 800a8f0:	009b      	lsls	r3, r3, #2
 800a8f2:	2102      	movs	r1, #2
 800a8f4:	54d1      	strb	r1, [r2, r3]

                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800a8f6:	2000      	movs	r0, #0
 800a8f8:	f005 fe6c 	bl	80105d4 <LoRaMacConfirmQueueIsCmdActive>
 800a8fc:	1e03      	subs	r3, r0, #0
 800a8fe:	d100      	bne.n	800a902 <ProcessRadioRxDone+0x356>
 800a900:	e340      	b.n	800af84 <ProcessRadioRxDone+0x9d8>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 800a902:	2100      	movs	r1, #0
 800a904:	2000      	movs	r0, #0
 800a906:	f005 fdd7 	bl	80104b8 <LoRaMacConfirmQueueSetStatus>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
                }
            }
            break;
 800a90a:	e33b      	b.n	800af84 <ProcessRadioRxDone+0x9d8>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800a90c:	2000      	movs	r0, #0
 800a90e:	f005 fe61 	bl	80105d4 <LoRaMacConfirmQueueIsCmdActive>
 800a912:	1e03      	subs	r3, r0, #0
 800a914:	d100      	bne.n	800a918 <ProcessRadioRxDone+0x36c>
 800a916:	e335      	b.n	800af84 <ProcessRadioRxDone+0x9d8>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800a918:	2100      	movs	r1, #0
 800a91a:	2007      	movs	r0, #7
 800a91c:	f005 fdcc 	bl	80104b8 <LoRaMacConfirmQueueSetStatus>
            break;
 800a920:	e330      	b.n	800af84 <ProcessRadioRxDone+0x9d8>
 800a922:	46c0      	nop			; (mov r8, r8)
 800a924:	20001538 	.word	0x20001538
 800a928:	2000070c 	.word	0x2000070c
 800a92c:	0000041e 	.word	0x0000041e
 800a930:	0000046c 	.word	0x0000046c
 800a934:	00000421 	.word	0x00000421
 800a938:	00000413 	.word	0x00000413
 800a93c:	00000412 	.word	0x00000412
 800a940:	00000415 	.word	0x00000415
 800a944:	0000041c 	.word	0x0000041c
 800a948:	0000041d 	.word	0x0000041d
 800a94c:	00000422 	.word	0x00000422
 800a950:	00000424 	.word	0x00000424
 800a954:	08020c58 	.word	0x08020c58
 800a958:	20000ab8 	.word	0x20000ab8
 800a95c:	00000462 	.word	0x00000462
 800a960:	00000464 	.word	0x00000464
 800a964:	00000411 	.word	0x00000411
 800a968:	00000222 	.word	0x00000222
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800a96c:	4ac7      	ldr	r2, [pc, #796]	; (800ac8c <ProcessRadioRxDone+0x6e0>)
 800a96e:	2382      	movs	r3, #130	; 0x82
 800a970:	00db      	lsls	r3, r3, #3
 800a972:	2101      	movs	r1, #1
 800a974:	54d1      	strb	r1, [r2, r3]
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN:
            // Check if the received payload size is valid
            getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800a976:	4ac5      	ldr	r2, [pc, #788]	; (800ac8c <ProcessRadioRxDone+0x6e0>)
 800a978:	238e      	movs	r3, #142	; 0x8e
 800a97a:	00db      	lsls	r3, r3, #3
 800a97c:	58d2      	ldr	r2, [r2, r3]
 800a97e:	2302      	movs	r3, #2
 800a980:	33ff      	adds	r3, #255	; 0xff
 800a982:	5cd2      	ldrb	r2, [r2, r3]
 800a984:	2168      	movs	r1, #104	; 0x68
 800a986:	187b      	adds	r3, r7, r1
 800a988:	709a      	strb	r2, [r3, #2]
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 800a98a:	4bc0      	ldr	r3, [pc, #768]	; (800ac8c <ProcessRadioRxDone+0x6e0>)
 800a98c:	4ac0      	ldr	r2, [pc, #768]	; (800ac90 <ProcessRadioRxDone+0x6e4>)
 800a98e:	5c9b      	ldrb	r3, [r3, r2]
 800a990:	b25a      	sxtb	r2, r3
 800a992:	187b      	adds	r3, r7, r1
 800a994:	705a      	strb	r2, [r3, #1]
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 800a996:	187b      	adds	r3, r7, r1
 800a998:	220c      	movs	r2, #12
 800a99a:	701a      	strb	r2, [r3, #0]

            // Get the maximum payload length
            if( MacCtx.NvmCtx->RepeaterSupport == true )
 800a99c:	4abb      	ldr	r2, [pc, #748]	; (800ac8c <ProcessRadioRxDone+0x6e0>)
 800a99e:	238e      	movs	r3, #142	; 0x8e
 800a9a0:	00db      	lsls	r3, r3, #3
 800a9a2:	58d2      	ldr	r2, [r2, r3]
 800a9a4:	2316      	movs	r3, #22
 800a9a6:	33ff      	adds	r3, #255	; 0xff
 800a9a8:	5cd3      	ldrb	r3, [r2, r3]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d003      	beq.n	800a9b6 <ProcessRadioRxDone+0x40a>
            {
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800a9ae:	2368      	movs	r3, #104	; 0x68
 800a9b0:	18fb      	adds	r3, r7, r3
 800a9b2:	220d      	movs	r2, #13
 800a9b4:	701a      	strb	r2, [r3, #0]
            }
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a9b6:	4ab5      	ldr	r2, [pc, #724]	; (800ac8c <ProcessRadioRxDone+0x6e0>)
 800a9b8:	238e      	movs	r3, #142	; 0x8e
 800a9ba:	00db      	lsls	r3, r3, #3
 800a9bc:	58d3      	ldr	r3, [r2, r3]
 800a9be:	781b      	ldrb	r3, [r3, #0]
 800a9c0:	2268      	movs	r2, #104	; 0x68
 800a9c2:	18ba      	adds	r2, r7, r2
 800a9c4:	0011      	movs	r1, r2
 800a9c6:	0018      	movs	r0, r3
 800a9c8:	f008 f8cd 	bl	8012b66 <RegionGetPhyParam>
 800a9cc:	0003      	movs	r3, r0
 800a9ce:	001a      	movs	r2, r3
 800a9d0:	2364      	movs	r3, #100	; 0x64
 800a9d2:	18fb      	adds	r3, r7, r3
 800a9d4:	601a      	str	r2, [r3, #0]
            if( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORA_MAC_FRMPAYLOAD_OVERHEAD ) ) > ( int16_t )phyParam.Value )
 800a9d6:	237a      	movs	r3, #122	; 0x7a
 800a9d8:	18fb      	adds	r3, r7, r3
 800a9da:	881b      	ldrh	r3, [r3, #0]
 800a9dc:	3b0d      	subs	r3, #13
 800a9de:	b29b      	uxth	r3, r3
 800a9e0:	b21b      	sxth	r3, r3
 800a9e2:	1c1a      	adds	r2, r3, #0
 800a9e4:	b213      	sxth	r3, r2
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	da01      	bge.n	800a9ee <ProcessRadioRxDone+0x442>
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	1c1a      	adds	r2, r3, #0
 800a9ee:	b212      	sxth	r2, r2
 800a9f0:	2364      	movs	r3, #100	; 0x64
 800a9f2:	18fb      	adds	r3, r7, r3
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	b21b      	sxth	r3, r3
 800a9f8:	429a      	cmp	r2, r3
 800a9fa:	dd06      	ble.n	800aa0a <ProcessRadioRxDone+0x45e>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a9fc:	4ba3      	ldr	r3, [pc, #652]	; (800ac8c <ProcessRadioRxDone+0x6e0>)
 800a9fe:	4aa5      	ldr	r2, [pc, #660]	; (800ac94 <ProcessRadioRxDone+0x6e8>)
 800aa00:	2101      	movs	r1, #1
 800aa02:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
 800aa04:	f7ff fda4 	bl	800a550 <PrepareRxDoneAbort>
                return;
 800aa08:	e2e3      	b.n	800afd2 <ProcessRadioRxDone+0xa26>
            }
            macMsgData.Buffer = payload;
 800aa0a:	2134      	movs	r1, #52	; 0x34
 800aa0c:	187b      	adds	r3, r7, r1
 800aa0e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800aa10:	601a      	str	r2, [r3, #0]
            macMsgData.BufSize = size;
 800aa12:	237a      	movs	r3, #122	; 0x7a
 800aa14:	18fb      	adds	r3, r7, r3
 800aa16:	881b      	ldrh	r3, [r3, #0]
 800aa18:	b2da      	uxtb	r2, r3
 800aa1a:	187b      	adds	r3, r7, r1
 800aa1c:	711a      	strb	r2, [r3, #4]
            macMsgData.FRMPayload = MacCtx.RxPayload;
 800aa1e:	187b      	adds	r3, r7, r1
 800aa20:	4a9d      	ldr	r2, [pc, #628]	; (800ac98 <ProcessRadioRxDone+0x6ec>)
 800aa22:	625a      	str	r2, [r3, #36]	; 0x24
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 800aa24:	0008      	movs	r0, r1
 800aa26:	187b      	adds	r3, r7, r1
 800aa28:	2228      	movs	r2, #40	; 0x28
 800aa2a:	21ff      	movs	r1, #255	; 0xff
 800aa2c:	5499      	strb	r1, [r3, r2]

            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 800aa2e:	183b      	adds	r3, r7, r0
 800aa30:	0018      	movs	r0, r3
 800aa32:	f007 fdb8 	bl	80125a6 <LoRaMacParserData>
 800aa36:	1e03      	subs	r3, r0, #0
 800aa38:	d006      	beq.n	800aa48 <ProcessRadioRxDone+0x49c>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800aa3a:	4b94      	ldr	r3, [pc, #592]	; (800ac8c <ProcessRadioRxDone+0x6e0>)
 800aa3c:	4a95      	ldr	r2, [pc, #596]	; (800ac94 <ProcessRadioRxDone+0x6e8>)
 800aa3e:	2101      	movs	r1, #1
 800aa40:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
 800aa42:	f7ff fd85 	bl	800a550 <PrepareRxDoneAbort>
                return;
 800aa46:	e2c4      	b.n	800afd2 <ProcessRadioRxDone+0xa26>
            }

            // Store device address
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 800aa48:	2034      	movs	r0, #52	; 0x34
 800aa4a:	183b      	adds	r3, r7, r0
 800aa4c:	6899      	ldr	r1, [r3, #8]
 800aa4e:	4a8f      	ldr	r2, [pc, #572]	; (800ac8c <ProcessRadioRxDone+0x6e0>)
 800aa50:	2385      	movs	r3, #133	; 0x85
 800aa52:	00db      	lsls	r3, r3, #3
 800aa54:	50d1      	str	r1, [r2, r3]

            FType_t fType;
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 800aa56:	1dba      	adds	r2, r7, #6
 800aa58:	183b      	adds	r3, r7, r0
 800aa5a:	0011      	movs	r1, r2
 800aa5c:	0018      	movs	r0, r3
 800aa5e:	f002 ffcd 	bl	800d9fc <DetermineFrameType>
 800aa62:	1e03      	subs	r3, r0, #0
 800aa64:	d006      	beq.n	800aa74 <ProcessRadioRxDone+0x4c8>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800aa66:	4b89      	ldr	r3, [pc, #548]	; (800ac8c <ProcessRadioRxDone+0x6e0>)
 800aa68:	4a8a      	ldr	r2, [pc, #552]	; (800ac94 <ProcessRadioRxDone+0x6e8>)
 800aa6a:	2101      	movs	r1, #1
 800aa6c:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
 800aa6e:	f7ff fd6f 	bl	800a550 <PrepareRxDoneAbort>
                return;
 800aa72:	e2ae      	b.n	800afd2 <ProcessRadioRxDone+0xa26>
            }

            //Check if it is a multicast message
            multicast = 0;
 800aa74:	2383      	movs	r3, #131	; 0x83
 800aa76:	18fb      	adds	r3, r7, r3
 800aa78:	2200      	movs	r2, #0
 800aa7a:	701a      	strb	r2, [r3, #0]
            downLinkCounter = 0;
 800aa7c:	2300      	movs	r3, #0
 800aa7e:	60bb      	str	r3, [r7, #8]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800aa80:	2381      	movs	r3, #129	; 0x81
 800aa82:	18fb      	adds	r3, r7, r3
 800aa84:	2200      	movs	r2, #0
 800aa86:	701a      	strb	r2, [r3, #0]
 800aa88:	e051      	b.n	800ab2e <ProcessRadioRxDone+0x582>
            {
                if( ( MacCtx.NvmCtx->MulticastChannelList[i].Address == macMsgData.FHDR.DevAddr ) &&
 800aa8a:	4a80      	ldr	r2, [pc, #512]	; (800ac8c <ProcessRadioRxDone+0x6e0>)
 800aa8c:	238e      	movs	r3, #142	; 0x8e
 800aa8e:	00db      	lsls	r3, r3, #3
 800aa90:	58d2      	ldr	r2, [r2, r3]
 800aa92:	2381      	movs	r3, #129	; 0x81
 800aa94:	18fb      	adds	r3, r7, r3
 800aa96:	781b      	ldrb	r3, [r3, #0]
 800aa98:	015b      	lsls	r3, r3, #5
 800aa9a:	18d3      	adds	r3, r2, r3
 800aa9c:	334c      	adds	r3, #76	; 0x4c
 800aa9e:	681a      	ldr	r2, [r3, #0]
 800aaa0:	2334      	movs	r3, #52	; 0x34
 800aaa2:	18fb      	adds	r3, r7, r3
 800aaa4:	689b      	ldr	r3, [r3, #8]
 800aaa6:	429a      	cmp	r2, r3
 800aaa8:	d13b      	bne.n	800ab22 <ProcessRadioRxDone+0x576>
                    ( MacCtx.NvmCtx->MulticastChannelList[i].IsEnabled == true ) )
 800aaaa:	4a78      	ldr	r2, [pc, #480]	; (800ac8c <ProcessRadioRxDone+0x6e0>)
 800aaac:	238e      	movs	r3, #142	; 0x8e
 800aaae:	00db      	lsls	r3, r3, #3
 800aab0:	58d2      	ldr	r2, [r2, r3]
 800aab2:	2381      	movs	r3, #129	; 0x81
 800aab4:	18fb      	adds	r3, r7, r3
 800aab6:	781b      	ldrb	r3, [r3, #0]
 800aab8:	2154      	movs	r1, #84	; 0x54
 800aaba:	015b      	lsls	r3, r3, #5
 800aabc:	18d3      	adds	r3, r2, r3
 800aabe:	185b      	adds	r3, r3, r1
 800aac0:	781b      	ldrb	r3, [r3, #0]
                if( ( MacCtx.NvmCtx->MulticastChannelList[i].Address == macMsgData.FHDR.DevAddr ) &&
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d02d      	beq.n	800ab22 <ProcessRadioRxDone+0x576>
                {
                    multicast = 1;
 800aac6:	2383      	movs	r3, #131	; 0x83
 800aac8:	18fb      	adds	r3, r7, r3
 800aaca:	2201      	movs	r2, #1
 800aacc:	701a      	strb	r2, [r3, #0]
                    addrID = MacCtx.NvmCtx->MulticastChannelList[i].AddrID;
 800aace:	4a6f      	ldr	r2, [pc, #444]	; (800ac8c <ProcessRadioRxDone+0x6e0>)
 800aad0:	238e      	movs	r3, #142	; 0x8e
 800aad2:	00db      	lsls	r3, r3, #3
 800aad4:	58d1      	ldr	r1, [r2, r3]
 800aad6:	2481      	movs	r4, #129	; 0x81
 800aad8:	193b      	adds	r3, r7, r4
 800aada:	781a      	ldrb	r2, [r3, #0]
 800aadc:	2382      	movs	r3, #130	; 0x82
 800aade:	18fb      	adds	r3, r7, r3
 800aae0:	2048      	movs	r0, #72	; 0x48
 800aae2:	0152      	lsls	r2, r2, #5
 800aae4:	188a      	adds	r2, r1, r2
 800aae6:	1812      	adds	r2, r2, r0
 800aae8:	7812      	ldrb	r2, [r2, #0]
 800aaea:	701a      	strb	r2, [r3, #0]
                    downLinkCounter = *( MacCtx.NvmCtx->MulticastChannelList[i].DownLinkCounter );
 800aaec:	4a67      	ldr	r2, [pc, #412]	; (800ac8c <ProcessRadioRxDone+0x6e0>)
 800aaee:	238e      	movs	r3, #142	; 0x8e
 800aaf0:	00db      	lsls	r3, r3, #3
 800aaf2:	58d2      	ldr	r2, [r2, r3]
 800aaf4:	0021      	movs	r1, r4
 800aaf6:	187b      	adds	r3, r7, r1
 800aaf8:	781b      	ldrb	r3, [r3, #0]
 800aafa:	015b      	lsls	r3, r3, #5
 800aafc:	18d3      	adds	r3, r2, r3
 800aafe:	3350      	adds	r3, #80	; 0x50
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	60bb      	str	r3, [r7, #8]
                    address = MacCtx.NvmCtx->MulticastChannelList[i].Address;
 800ab06:	4a61      	ldr	r2, [pc, #388]	; (800ac8c <ProcessRadioRxDone+0x6e0>)
 800ab08:	238e      	movs	r3, #142	; 0x8e
 800ab0a:	00db      	lsls	r3, r3, #3
 800ab0c:	58d2      	ldr	r2, [r2, r3]
 800ab0e:	187b      	adds	r3, r7, r1
 800ab10:	781b      	ldrb	r3, [r3, #0]
 800ab12:	015b      	lsls	r3, r3, #5
 800ab14:	18d3      	adds	r3, r2, r3
 800ab16:	334c      	adds	r3, #76	; 0x4c
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	2284      	movs	r2, #132	; 0x84
 800ab1c:	18ba      	adds	r2, r7, r2
 800ab1e:	6013      	str	r3, [r2, #0]
                    break;
 800ab20:	e00a      	b.n	800ab38 <ProcessRadioRxDone+0x58c>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800ab22:	2181      	movs	r1, #129	; 0x81
 800ab24:	187b      	adds	r3, r7, r1
 800ab26:	781a      	ldrb	r2, [r3, #0]
 800ab28:	187b      	adds	r3, r7, r1
 800ab2a:	3201      	adds	r2, #1
 800ab2c:	701a      	strb	r2, [r3, #0]
 800ab2e:	2381      	movs	r3, #129	; 0x81
 800ab30:	18fb      	adds	r3, r7, r3
 800ab32:	781b      	ldrb	r3, [r3, #0]
 800ab34:	2b03      	cmp	r3, #3
 800ab36:	d9a8      	bls.n	800aa8a <ProcessRadioRxDone+0x4de>
                }
            }

            // Get maximum allowed counter difference
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 800ab38:	2168      	movs	r1, #104	; 0x68
 800ab3a:	187b      	adds	r3, r7, r1
 800ab3c:	2214      	movs	r2, #20
 800ab3e:	701a      	strb	r2, [r3, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800ab40:	4a52      	ldr	r2, [pc, #328]	; (800ac8c <ProcessRadioRxDone+0x6e0>)
 800ab42:	238e      	movs	r3, #142	; 0x8e
 800ab44:	00db      	lsls	r3, r3, #3
 800ab46:	58d3      	ldr	r3, [r2, r3]
 800ab48:	781b      	ldrb	r3, [r3, #0]
 800ab4a:	187a      	adds	r2, r7, r1
 800ab4c:	0011      	movs	r1, r2
 800ab4e:	0018      	movs	r0, r3
 800ab50:	f008 f809 	bl	8012b66 <RegionGetPhyParam>
 800ab54:	0003      	movs	r3, r0
 800ab56:	001a      	movs	r2, r3
 800ab58:	2064      	movs	r0, #100	; 0x64
 800ab5a:	183b      	adds	r3, r7, r0
 800ab5c:	601a      	str	r2, [r3, #0]

            // Get downlink frame counter value
            fCntHandlerStatus = LoRaMacGetFCntDown( addrID, fType, &macMsgData, MacCtx.NvmCtx->Version, phyParam.Value, &fCntID, &downLinkCounter );
 800ab5e:	1dbb      	adds	r3, r7, #6
 800ab60:	781d      	ldrb	r5, [r3, #0]
 800ab62:	4a4a      	ldr	r2, [pc, #296]	; (800ac8c <ProcessRadioRxDone+0x6e0>)
 800ab64:	238e      	movs	r3, #142	; 0x8e
 800ab66:	00db      	lsls	r3, r3, #3
 800ab68:	58d1      	ldr	r1, [r2, r3]
 800ab6a:	183b      	adds	r3, r7, r0
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	b29b      	uxth	r3, r3
 800ab70:	2275      	movs	r2, #117	; 0x75
 800ab72:	18bc      	adds	r4, r7, r2
 800ab74:	2288      	movs	r2, #136	; 0x88
 800ab76:	0092      	lsls	r2, r2, #2
 800ab78:	588e      	ldr	r6, [r1, r2]
 800ab7a:	2134      	movs	r1, #52	; 0x34
 800ab7c:	1879      	adds	r1, r7, r1
 800ab7e:	2082      	movs	r0, #130	; 0x82
 800ab80:	183a      	adds	r2, r7, r0
 800ab82:	7810      	ldrb	r0, [r2, #0]
 800ab84:	2208      	movs	r2, #8
 800ab86:	18ba      	adds	r2, r7, r2
 800ab88:	9202      	str	r2, [sp, #8]
 800ab8a:	1dfa      	adds	r2, r7, #7
 800ab8c:	9201      	str	r2, [sp, #4]
 800ab8e:	9300      	str	r3, [sp, #0]
 800ab90:	0033      	movs	r3, r6
 800ab92:	000a      	movs	r2, r1
 800ab94:	0029      	movs	r1, r5
 800ab96:	f007 fab5 	bl	8012104 <LoRaMacGetFCntDown>
 800ab9a:	0003      	movs	r3, r0
 800ab9c:	7023      	strb	r3, [r4, #0]
            if( fCntHandlerStatus != LORAMAC_FCNT_HANDLER_SUCCESS )
 800ab9e:	2275      	movs	r2, #117	; 0x75
 800aba0:	18bb      	adds	r3, r7, r2
 800aba2:	781b      	ldrb	r3, [r3, #0]
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d041      	beq.n	800ac2c <ProcessRadioRxDone+0x680>
            {
                if( fCntHandlerStatus == LORAMAC_FCNT_HANDLER_CHECK_FAIL )
 800aba8:	2375      	movs	r3, #117	; 0x75
 800abaa:	18fb      	adds	r3, r7, r3
 800abac:	781b      	ldrb	r3, [r3, #0]
 800abae:	2b01      	cmp	r3, #1
 800abb0:	d127      	bne.n	800ac02 <ProcessRadioRxDone+0x656>
                {
                    // Catch the case of repeated downlink frame counter
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 800abb2:	4b36      	ldr	r3, [pc, #216]	; (800ac8c <ProcessRadioRxDone+0x6e0>)
 800abb4:	4a37      	ldr	r2, [pc, #220]	; (800ac94 <ProcessRadioRxDone+0x6e8>)
 800abb6:	2108      	movs	r1, #8
 800abb8:	5499      	strb	r1, [r3, r2]
                    if( ( MacCtx.NvmCtx->Version.Fields.Minor == 0 ) && ( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN ) && ( MacCtx.NvmCtx->LastRxMic == macMsgData.MIC ) )
 800abba:	4a34      	ldr	r2, [pc, #208]	; (800ac8c <ProcessRadioRxDone+0x6e0>)
 800abbc:	238e      	movs	r3, #142	; 0x8e
 800abbe:	00db      	lsls	r3, r3, #3
 800abc0:	58d3      	ldr	r3, [r2, r3]
 800abc2:	4a36      	ldr	r2, [pc, #216]	; (800ac9c <ProcessRadioRxDone+0x6f0>)
 800abc4:	5c9b      	ldrb	r3, [r3, r2]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d129      	bne.n	800ac1e <ProcessRadioRxDone+0x672>
 800abca:	2374      	movs	r3, #116	; 0x74
 800abcc:	18fb      	adds	r3, r7, r3
 800abce:	781b      	ldrb	r3, [r3, #0]
 800abd0:	221f      	movs	r2, #31
 800abd2:	4393      	bics	r3, r2
 800abd4:	b2db      	uxtb	r3, r3
 800abd6:	2ba0      	cmp	r3, #160	; 0xa0
 800abd8:	d121      	bne.n	800ac1e <ProcessRadioRxDone+0x672>
 800abda:	4a2c      	ldr	r2, [pc, #176]	; (800ac8c <ProcessRadioRxDone+0x6e0>)
 800abdc:	238e      	movs	r3, #142	; 0x8e
 800abde:	00db      	lsls	r3, r3, #3
 800abe0:	58d2      	ldr	r2, [r2, r3]
 800abe2:	238a      	movs	r3, #138	; 0x8a
 800abe4:	009b      	lsls	r3, r3, #2
 800abe6:	58d2      	ldr	r2, [r2, r3]
 800abe8:	2334      	movs	r3, #52	; 0x34
 800abea:	18fb      	adds	r3, r7, r3
 800abec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abee:	429a      	cmp	r2, r3
 800abf0:	d115      	bne.n	800ac1e <ProcessRadioRxDone+0x672>
                    {
                        MacCtx.NvmCtx->SrvAckRequested = true;
 800abf2:	4a26      	ldr	r2, [pc, #152]	; (800ac8c <ProcessRadioRxDone+0x6e0>)
 800abf4:	238e      	movs	r3, #142	; 0x8e
 800abf6:	00db      	lsls	r3, r3, #3
 800abf8:	58d3      	ldr	r3, [r2, r3]
 800abfa:	4a29      	ldr	r2, [pc, #164]	; (800aca0 <ProcessRadioRxDone+0x6f4>)
 800abfc:	2101      	movs	r1, #1
 800abfe:	5499      	strb	r1, [r3, r2]
 800ac00:	e00d      	b.n	800ac1e <ProcessRadioRxDone+0x672>
                    }
                }
                else if( fCntHandlerStatus == LORAMAC_FCNT_HANDLER_MAX_GAP_FAIL )
 800ac02:	2375      	movs	r3, #117	; 0x75
 800ac04:	18fb      	adds	r3, r7, r3
 800ac06:	781b      	ldrb	r3, [r3, #0]
 800ac08:	2b02      	cmp	r3, #2
 800ac0a:	d104      	bne.n	800ac16 <ProcessRadioRxDone+0x66a>
                {
                    // Lost too many frames
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS;
 800ac0c:	4b1f      	ldr	r3, [pc, #124]	; (800ac8c <ProcessRadioRxDone+0x6e0>)
 800ac0e:	4a21      	ldr	r2, [pc, #132]	; (800ac94 <ProcessRadioRxDone+0x6e8>)
 800ac10:	210a      	movs	r1, #10
 800ac12:	5499      	strb	r1, [r3, r2]
 800ac14:	e003      	b.n	800ac1e <ProcessRadioRxDone+0x672>
                }
                else
                {
                    // Other errors
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ac16:	4b1d      	ldr	r3, [pc, #116]	; (800ac8c <ProcessRadioRxDone+0x6e0>)
 800ac18:	4a1e      	ldr	r2, [pc, #120]	; (800ac94 <ProcessRadioRxDone+0x6e8>)
 800ac1a:	2101      	movs	r1, #1
 800ac1c:	5499      	strb	r1, [r3, r2]
                }
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800ac1e:	68ba      	ldr	r2, [r7, #8]
 800ac20:	4b1a      	ldr	r3, [pc, #104]	; (800ac8c <ProcessRadioRxDone+0x6e0>)
 800ac22:	4920      	ldr	r1, [pc, #128]	; (800aca4 <ProcessRadioRxDone+0x6f8>)
 800ac24:	505a      	str	r2, [r3, r1]
                PrepareRxDoneAbort( );
 800ac26:	f7ff fc93 	bl	800a550 <PrepareRxDoneAbort>
                return;
 800ac2a:	e1d2      	b.n	800afd2 <ProcessRadioRxDone+0xa26>
            }

            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 800ac2c:	1dfb      	adds	r3, r7, #7
 800ac2e:	781a      	ldrb	r2, [r3, #0]
 800ac30:	68bd      	ldr	r5, [r7, #8]
 800ac32:	2680      	movs	r6, #128	; 0x80
 800ac34:	19bc      	adds	r4, r7, r6
 800ac36:	2384      	movs	r3, #132	; 0x84
 800ac38:	18fb      	adds	r3, r7, r3
 800ac3a:	6819      	ldr	r1, [r3, #0]
 800ac3c:	2382      	movs	r3, #130	; 0x82
 800ac3e:	18fb      	adds	r3, r7, r3
 800ac40:	7818      	ldrb	r0, [r3, #0]
 800ac42:	2334      	movs	r3, #52	; 0x34
 800ac44:	18fb      	adds	r3, r7, r3
 800ac46:	9300      	str	r3, [sp, #0]
 800ac48:	002b      	movs	r3, r5
 800ac4a:	f007 f92f 	bl	8011eac <LoRaMacCryptoUnsecureMessage>
 800ac4e:	0003      	movs	r3, r0
 800ac50:	7023      	strb	r3, [r4, #0]
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800ac52:	19bb      	adds	r3, r7, r6
 800ac54:	781b      	ldrb	r3, [r3, #0]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d028      	beq.n	800acac <ProcessRadioRxDone+0x700>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 800ac5a:	2380      	movs	r3, #128	; 0x80
 800ac5c:	18fb      	adds	r3, r7, r3
 800ac5e:	781b      	ldrb	r3, [r3, #0]
 800ac60:	2b02      	cmp	r3, #2
 800ac62:	d10c      	bne.n	800ac7e <ProcessRadioRxDone+0x6d2>
                {
                    // We are not the destination of this frame.
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 800ac64:	4b09      	ldr	r3, [pc, #36]	; (800ac8c <ProcessRadioRxDone+0x6e0>)
 800ac66:	4a0b      	ldr	r2, [pc, #44]	; (800ac94 <ProcessRadioRxDone+0x6e8>)
 800ac68:	210b      	movs	r1, #11
 800ac6a:	5499      	strb	r1, [r3, r2]

                    // Abort the reception, if we are not in RX_SLOT_WIN_CLASS_C
                    if( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_CLASS_C )
 800ac6c:	4b07      	ldr	r3, [pc, #28]	; (800ac8c <ProcessRadioRxDone+0x6e0>)
 800ac6e:	4a0e      	ldr	r2, [pc, #56]	; (800aca8 <ProcessRadioRxDone+0x6fc>)
 800ac70:	5c9b      	ldrb	r3, [r3, r2]
 800ac72:	2b02      	cmp	r3, #2
 800ac74:	d100      	bne.n	800ac78 <ProcessRadioRxDone+0x6cc>
 800ac76:	e1ab      	b.n	800afd0 <ProcessRadioRxDone+0xa24>
                    {
                        PrepareRxDoneAbort( );
 800ac78:	f7ff fc6a 	bl	800a550 <PrepareRxDoneAbort>
                {
                    // MIC calculation fail
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
                    PrepareRxDoneAbort( );
                }
                return;
 800ac7c:	e1a8      	b.n	800afd0 <ProcessRadioRxDone+0xa24>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 800ac7e:	4b03      	ldr	r3, [pc, #12]	; (800ac8c <ProcessRadioRxDone+0x6e0>)
 800ac80:	4a04      	ldr	r2, [pc, #16]	; (800ac94 <ProcessRadioRxDone+0x6e8>)
 800ac82:	210c      	movs	r1, #12
 800ac84:	5499      	strb	r1, [r3, r2]
                    PrepareRxDoneAbort( );
 800ac86:	f7ff fc63 	bl	800a550 <PrepareRxDoneAbort>
                return;
 800ac8a:	e1a1      	b.n	800afd0 <ProcessRadioRxDone+0xa24>
 800ac8c:	2000070c 	.word	0x2000070c
 800ac90:	00000414 	.word	0x00000414
 800ac94:	00000411 	.word	0x00000411
 800ac98:	2000094c 	.word	0x2000094c
 800ac9c:	00000222 	.word	0x00000222
 800aca0:	0000021a 	.word	0x0000021a
 800aca4:	00000424 	.word	0x00000424
 800aca8:	00000421 	.word	0x00000421
            }

            // Frame is valid
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800acac:	4bca      	ldr	r3, [pc, #808]	; (800afd8 <ProcessRadioRxDone+0xa2c>)
 800acae:	4acb      	ldr	r2, [pc, #812]	; (800afdc <ProcessRadioRxDone+0xa30>)
 800acb0:	2100      	movs	r1, #0
 800acb2:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsIndication.Multicast = multicast;
 800acb4:	4bc8      	ldr	r3, [pc, #800]	; (800afd8 <ProcessRadioRxDone+0xa2c>)
 800acb6:	2483      	movs	r4, #131	; 0x83
 800acb8:	193a      	adds	r2, r7, r4
 800acba:	49c9      	ldr	r1, [pc, #804]	; (800afe0 <ProcessRadioRxDone+0xa34>)
 800acbc:	7812      	ldrb	r2, [r2, #0]
 800acbe:	545a      	strb	r2, [r3, r1]
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 800acc0:	2034      	movs	r0, #52	; 0x34
 800acc2:	183b      	adds	r3, r7, r0
 800acc4:	7b1b      	ldrb	r3, [r3, #12]
 800acc6:	06db      	lsls	r3, r3, #27
 800acc8:	0fdb      	lsrs	r3, r3, #31
 800acca:	b2db      	uxtb	r3, r3
 800accc:	0019      	movs	r1, r3
 800acce:	4bc2      	ldr	r3, [pc, #776]	; (800afd8 <ProcessRadioRxDone+0xa2c>)
 800acd0:	4ac4      	ldr	r2, [pc, #784]	; (800afe4 <ProcessRadioRxDone+0xa38>)
 800acd2:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsIndication.Buffer = NULL;
 800acd4:	4ac0      	ldr	r2, [pc, #768]	; (800afd8 <ProcessRadioRxDone+0xa2c>)
 800acd6:	2383      	movs	r3, #131	; 0x83
 800acd8:	00db      	lsls	r3, r3, #3
 800acda:	2100      	movs	r1, #0
 800acdc:	50d1      	str	r1, [r2, r3]
            MacCtx.McpsIndication.BufferSize = 0;
 800acde:	4bbe      	ldr	r3, [pc, #760]	; (800afd8 <ProcessRadioRxDone+0xa2c>)
 800ace0:	4ac1      	ldr	r2, [pc, #772]	; (800afe8 <ProcessRadioRxDone+0xa3c>)
 800ace2:	2100      	movs	r1, #0
 800ace4:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800ace6:	68ba      	ldr	r2, [r7, #8]
 800ace8:	4bbb      	ldr	r3, [pc, #748]	; (800afd8 <ProcessRadioRxDone+0xa2c>)
 800acea:	49c0      	ldr	r1, [pc, #768]	; (800afec <ProcessRadioRxDone+0xa40>)
 800acec:	505a      	str	r2, [r3, r1]
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800acee:	183b      	adds	r3, r7, r0
 800acf0:	7b1b      	ldrb	r3, [r3, #12]
 800acf2:	069b      	lsls	r3, r3, #26
 800acf4:	0fdb      	lsrs	r3, r3, #31
 800acf6:	b2db      	uxtb	r3, r3
 800acf8:	1e5a      	subs	r2, r3, #1
 800acfa:	4193      	sbcs	r3, r2
 800acfc:	b2d9      	uxtb	r1, r3
 800acfe:	4bb6      	ldr	r3, [pc, #728]	; (800afd8 <ProcessRadioRxDone+0xa2c>)
 800ad00:	4abb      	ldr	r2, [pc, #748]	; (800aff0 <ProcessRadioRxDone+0xa44>)
 800ad02:	5499      	strb	r1, [r3, r2]

            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800ad04:	4bb4      	ldr	r3, [pc, #720]	; (800afd8 <ProcessRadioRxDone+0xa2c>)
 800ad06:	4abb      	ldr	r2, [pc, #748]	; (800aff4 <ProcessRadioRxDone+0xa48>)
 800ad08:	2100      	movs	r1, #0
 800ad0a:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800ad0c:	183b      	adds	r3, r7, r0
 800ad0e:	7b1b      	ldrb	r3, [r3, #12]
 800ad10:	069b      	lsls	r3, r3, #26
 800ad12:	0fdb      	lsrs	r3, r3, #31
 800ad14:	b2db      	uxtb	r3, r3
 800ad16:	1e5a      	subs	r2, r3, #1
 800ad18:	4193      	sbcs	r3, r2
 800ad1a:	b2d9      	uxtb	r1, r3
 800ad1c:	4aae      	ldr	r2, [pc, #696]	; (800afd8 <ProcessRadioRxDone+0xa2c>)
 800ad1e:	2386      	movs	r3, #134	; 0x86
 800ad20:	00db      	lsls	r3, r3, #3
 800ad22:	54d1      	strb	r1, [r2, r3]

            MacCtx.NvmCtx->AdrAckCounter = 0;
 800ad24:	4aac      	ldr	r2, [pc, #688]	; (800afd8 <ProcessRadioRxDone+0xa2c>)
 800ad26:	238e      	movs	r3, #142	; 0x8e
 800ad28:	00db      	lsls	r3, r3, #3
 800ad2a:	58d3      	ldr	r3, [r2, r3]
 800ad2c:	22cc      	movs	r2, #204	; 0xcc
 800ad2e:	2100      	movs	r1, #0
 800ad30:	5099      	str	r1, [r3, r2]

            // MCPS Indication and ack requested handling
            if( multicast == 1 )
 800ad32:	193b      	adds	r3, r7, r4
 800ad34:	781b      	ldrb	r3, [r3, #0]
 800ad36:	2b01      	cmp	r3, #1
 800ad38:	d105      	bne.n	800ad46 <ProcessRadioRxDone+0x79a>
            {
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 800ad3a:	4aa7      	ldr	r2, [pc, #668]	; (800afd8 <ProcessRadioRxDone+0xa2c>)
 800ad3c:	2382      	movs	r3, #130	; 0x82
 800ad3e:	00db      	lsls	r3, r3, #3
 800ad40:	2102      	movs	r1, #2
 800ad42:	54d1      	strb	r1, [r2, r3]
 800ad44:	e032      	b.n	800adac <ProcessRadioRxDone+0x800>
            }
            else
            {
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 800ad46:	2374      	movs	r3, #116	; 0x74
 800ad48:	18fb      	adds	r3, r7, r3
 800ad4a:	781b      	ldrb	r3, [r3, #0]
 800ad4c:	221f      	movs	r2, #31
 800ad4e:	4393      	bics	r3, r2
 800ad50:	b2db      	uxtb	r3, r3
 800ad52:	2ba0      	cmp	r3, #160	; 0xa0
 800ad54:	d11e      	bne.n	800ad94 <ProcessRadioRxDone+0x7e8>
                {
                    MacCtx.NvmCtx->SrvAckRequested = true;
 800ad56:	4aa0      	ldr	r2, [pc, #640]	; (800afd8 <ProcessRadioRxDone+0xa2c>)
 800ad58:	238e      	movs	r3, #142	; 0x8e
 800ad5a:	00db      	lsls	r3, r3, #3
 800ad5c:	58d3      	ldr	r3, [r2, r3]
 800ad5e:	4aa6      	ldr	r2, [pc, #664]	; (800aff8 <ProcessRadioRxDone+0xa4c>)
 800ad60:	2101      	movs	r1, #1
 800ad62:	5499      	strb	r1, [r3, r2]
                    if( MacCtx.NvmCtx->Version.Fields.Minor == 0 )
 800ad64:	4a9c      	ldr	r2, [pc, #624]	; (800afd8 <ProcessRadioRxDone+0xa2c>)
 800ad66:	238e      	movs	r3, #142	; 0x8e
 800ad68:	00db      	lsls	r3, r3, #3
 800ad6a:	58d3      	ldr	r3, [r2, r3]
 800ad6c:	4aa3      	ldr	r2, [pc, #652]	; (800affc <ProcessRadioRxDone+0xa50>)
 800ad6e:	5c9b      	ldrb	r3, [r3, r2]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d109      	bne.n	800ad88 <ProcessRadioRxDone+0x7dc>
                    {
                        MacCtx.NvmCtx->LastRxMic = macMsgData.MIC;
 800ad74:	4a98      	ldr	r2, [pc, #608]	; (800afd8 <ProcessRadioRxDone+0xa2c>)
 800ad76:	238e      	movs	r3, #142	; 0x8e
 800ad78:	00db      	lsls	r3, r3, #3
 800ad7a:	58d2      	ldr	r2, [r2, r3]
 800ad7c:	2334      	movs	r3, #52	; 0x34
 800ad7e:	18fb      	adds	r3, r7, r3
 800ad80:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800ad82:	238a      	movs	r3, #138	; 0x8a
 800ad84:	009b      	lsls	r3, r3, #2
 800ad86:	50d1      	str	r1, [r2, r3]
                    }
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800ad88:	4a93      	ldr	r2, [pc, #588]	; (800afd8 <ProcessRadioRxDone+0xa2c>)
 800ad8a:	2382      	movs	r3, #130	; 0x82
 800ad8c:	00db      	lsls	r3, r3, #3
 800ad8e:	2101      	movs	r1, #1
 800ad90:	54d1      	strb	r1, [r2, r3]
 800ad92:	e00b      	b.n	800adac <ProcessRadioRxDone+0x800>
                }
                else
                {
                    MacCtx.NvmCtx->SrvAckRequested = false;
 800ad94:	4a90      	ldr	r2, [pc, #576]	; (800afd8 <ProcessRadioRxDone+0xa2c>)
 800ad96:	238e      	movs	r3, #142	; 0x8e
 800ad98:	00db      	lsls	r3, r3, #3
 800ad9a:	58d3      	ldr	r3, [r2, r3]
 800ad9c:	4a96      	ldr	r2, [pc, #600]	; (800aff8 <ProcessRadioRxDone+0xa4c>)
 800ad9e:	2100      	movs	r1, #0
 800ada0:	5499      	strb	r1, [r3, r2]
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800ada2:	4a8d      	ldr	r2, [pc, #564]	; (800afd8 <ProcessRadioRxDone+0xa2c>)
 800ada4:	2382      	movs	r3, #130	; 0x82
 800ada6:	00db      	lsls	r3, r3, #3
 800ada8:	2100      	movs	r1, #0
 800adaa:	54d1      	strb	r1, [r2, r3]
                }
            }

            // Update downlink counter in mac context / multicast context.
            if( LORAMAC_FCNT_HANDLER_SUCCESS != LoRaMacSetFCntDown( fCntID, downLinkCounter ) )
 800adac:	1dfb      	adds	r3, r7, #7
 800adae:	781b      	ldrb	r3, [r3, #0]
 800adb0:	68ba      	ldr	r2, [r7, #8]
 800adb2:	0011      	movs	r1, r2
 800adb4:	0018      	movs	r0, r3
 800adb6:	f007 fa53 	bl	8012260 <LoRaMacSetFCntDown>
 800adba:	1e03      	subs	r3, r0, #0
 800adbc:	d007      	beq.n	800adce <ProcessRadioRxDone+0x822>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800adbe:	4b86      	ldr	r3, [pc, #536]	; (800afd8 <ProcessRadioRxDone+0xa2c>)
 800adc0:	4a86      	ldr	r2, [pc, #536]	; (800afdc <ProcessRadioRxDone+0xa30>)
 800adc2:	2101      	movs	r1, #1
 800adc4:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
 800adc6:	f7ff fbc3 	bl	800a550 <PrepareRxDoneAbort>
                return;
 800adca:	46c0      	nop			; (mov r8, r8)
 800adcc:	e101      	b.n	800afd2 <ProcessRadioRxDone+0xa26>
            }

            RemoveMacCommands( MacCtx.McpsIndication.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 800adce:	4b82      	ldr	r3, [pc, #520]	; (800afd8 <ProcessRadioRxDone+0xa2c>)
 800add0:	4a8b      	ldr	r2, [pc, #556]	; (800b000 <ProcessRadioRxDone+0xa54>)
 800add2:	5c98      	ldrb	r0, [r3, r2]
 800add4:	4b80      	ldr	r3, [pc, #512]	; (800afd8 <ProcessRadioRxDone+0xa2c>)
 800add6:	4a8b      	ldr	r2, [pc, #556]	; (800b004 <ProcessRadioRxDone+0xa58>)
 800add8:	5c9a      	ldrb	r2, [r3, r2]
 800adda:	2334      	movs	r3, #52	; 0x34
 800addc:	18fb      	adds	r3, r7, r3
 800adde:	7b1b      	ldrb	r3, [r3, #12]
 800ade0:	1c19      	adds	r1, r3, #0
 800ade2:	f002 f97b 	bl	800d0dc <RemoveMacCommands>

            switch( fType )
 800ade6:	1dbb      	adds	r3, r7, #6
 800ade8:	781b      	ldrb	r3, [r3, #0]
 800adea:	2b01      	cmp	r3, #1
 800adec:	d038      	beq.n	800ae60 <ProcessRadioRxDone+0x8b4>
 800adee:	dc02      	bgt.n	800adf6 <ProcessRadioRxDone+0x84a>
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d005      	beq.n	800ae00 <ProcessRadioRxDone+0x854>
 800adf4:	e086      	b.n	800af04 <ProcessRadioRxDone+0x958>
 800adf6:	2b02      	cmp	r3, #2
 800adf8:	d052      	beq.n	800aea0 <ProcessRadioRxDone+0x8f4>
 800adfa:	2b03      	cmp	r3, #3
 800adfc:	d06a      	beq.n	800aed4 <ProcessRadioRxDone+0x928>
 800adfe:	e081      	b.n	800af04 <ProcessRadioRxDone+0x958>
                    * |    > 0   |   X  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.McpsIndication.RxSlot );
 800ae00:	2034      	movs	r0, #52	; 0x34
 800ae02:	183b      	adds	r3, r7, r0
 800ae04:	7b1b      	ldrb	r3, [r3, #12]
 800ae06:	071b      	lsls	r3, r3, #28
 800ae08:	0f1b      	lsrs	r3, r3, #28
 800ae0a:	b2db      	uxtb	r3, r3
 800ae0c:	001c      	movs	r4, r3
 800ae0e:	4b72      	ldr	r3, [pc, #456]	; (800afd8 <ProcessRadioRxDone+0xa2c>)
 800ae10:	4a7b      	ldr	r2, [pc, #492]	; (800b000 <ProcessRadioRxDone+0xa54>)
 800ae12:	5c9b      	ldrb	r3, [r3, r2]
 800ae14:	2277      	movs	r2, #119	; 0x77
 800ae16:	18ba      	adds	r2, r7, r2
 800ae18:	2100      	movs	r1, #0
 800ae1a:	5651      	ldrsb	r1, [r2, r1]
 800ae1c:	0005      	movs	r5, r0
 800ae1e:	183a      	adds	r2, r7, r0
 800ae20:	3210      	adds	r2, #16
 800ae22:	0010      	movs	r0, r2
 800ae24:	9300      	str	r3, [sp, #0]
 800ae26:	000b      	movs	r3, r1
 800ae28:	0022      	movs	r2, r4
 800ae2a:	2100      	movs	r1, #0
 800ae2c:	f000 ffae 	bl	800bd8c <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800ae30:	0028      	movs	r0, r5
 800ae32:	183b      	adds	r3, r7, r0
 800ae34:	2220      	movs	r2, #32
 800ae36:	5c99      	ldrb	r1, [r3, r2]
 800ae38:	4b67      	ldr	r3, [pc, #412]	; (800afd8 <ProcessRadioRxDone+0xa2c>)
 800ae3a:	4a73      	ldr	r2, [pc, #460]	; (800b008 <ProcessRadioRxDone+0xa5c>)
 800ae3c:	5499      	strb	r1, [r3, r2]
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800ae3e:	183b      	adds	r3, r7, r0
 800ae40:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800ae42:	4a65      	ldr	r2, [pc, #404]	; (800afd8 <ProcessRadioRxDone+0xa2c>)
 800ae44:	2383      	movs	r3, #131	; 0x83
 800ae46:	00db      	lsls	r3, r3, #3
 800ae48:	50d1      	str	r1, [r2, r3]
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800ae4a:	183b      	adds	r3, r7, r0
 800ae4c:	2228      	movs	r2, #40	; 0x28
 800ae4e:	5c99      	ldrb	r1, [r3, r2]
 800ae50:	4b61      	ldr	r3, [pc, #388]	; (800afd8 <ProcessRadioRxDone+0xa2c>)
 800ae52:	4a65      	ldr	r2, [pc, #404]	; (800afe8 <ProcessRadioRxDone+0xa3c>)
 800ae54:	5499      	strb	r1, [r3, r2]
                    MacCtx.McpsIndication.RxData = true;
 800ae56:	4b60      	ldr	r3, [pc, #384]	; (800afd8 <ProcessRadioRxDone+0xa2c>)
 800ae58:	4a6c      	ldr	r2, [pc, #432]	; (800b00c <ProcessRadioRxDone+0xa60>)
 800ae5a:	2101      	movs	r1, #1
 800ae5c:	5499      	strb	r1, [r3, r2]
                    break;
 800ae5e:	e058      	b.n	800af12 <ProcessRadioRxDone+0x966>
                    * |    > 0   |   X  |   -   |       -      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.McpsIndication.RxSlot );
 800ae60:	2034      	movs	r0, #52	; 0x34
 800ae62:	183b      	adds	r3, r7, r0
 800ae64:	7b1b      	ldrb	r3, [r3, #12]
 800ae66:	071b      	lsls	r3, r3, #28
 800ae68:	0f1b      	lsrs	r3, r3, #28
 800ae6a:	b2db      	uxtb	r3, r3
 800ae6c:	001c      	movs	r4, r3
 800ae6e:	4b5a      	ldr	r3, [pc, #360]	; (800afd8 <ProcessRadioRxDone+0xa2c>)
 800ae70:	4a63      	ldr	r2, [pc, #396]	; (800b000 <ProcessRadioRxDone+0xa54>)
 800ae72:	5c9b      	ldrb	r3, [r3, r2]
 800ae74:	2277      	movs	r2, #119	; 0x77
 800ae76:	18ba      	adds	r2, r7, r2
 800ae78:	2100      	movs	r1, #0
 800ae7a:	5651      	ldrsb	r1, [r2, r1]
 800ae7c:	0005      	movs	r5, r0
 800ae7e:	183a      	adds	r2, r7, r0
 800ae80:	3210      	adds	r2, #16
 800ae82:	0010      	movs	r0, r2
 800ae84:	9300      	str	r3, [sp, #0]
 800ae86:	000b      	movs	r3, r1
 800ae88:	0022      	movs	r2, r4
 800ae8a:	2100      	movs	r1, #0
 800ae8c:	f000 ff7e 	bl	800bd8c <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800ae90:	0028      	movs	r0, r5
 800ae92:	183b      	adds	r3, r7, r0
 800ae94:	2220      	movs	r2, #32
 800ae96:	5c99      	ldrb	r1, [r3, r2]
 800ae98:	4b4f      	ldr	r3, [pc, #316]	; (800afd8 <ProcessRadioRxDone+0xa2c>)
 800ae9a:	4a5b      	ldr	r2, [pc, #364]	; (800b008 <ProcessRadioRxDone+0xa5c>)
 800ae9c:	5499      	strb	r1, [r3, r2]
                    break;
 800ae9e:	e038      	b.n	800af12 <ProcessRadioRxDone+0x966>
                    * |    = 0   |   -  |  = 0  | MAC commands |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FRMPayload
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.McpsIndication.RxSlot );
 800aea0:	2434      	movs	r4, #52	; 0x34
 800aea2:	193b      	adds	r3, r7, r4
 800aea4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800aea6:	193b      	adds	r3, r7, r4
 800aea8:	2228      	movs	r2, #40	; 0x28
 800aeaa:	5c99      	ldrb	r1, [r3, r2]
 800aeac:	4b4a      	ldr	r3, [pc, #296]	; (800afd8 <ProcessRadioRxDone+0xa2c>)
 800aeae:	4a54      	ldr	r2, [pc, #336]	; (800b000 <ProcessRadioRxDone+0xa54>)
 800aeb0:	5c9b      	ldrb	r3, [r3, r2]
 800aeb2:	2277      	movs	r2, #119	; 0x77
 800aeb4:	18ba      	adds	r2, r7, r2
 800aeb6:	7812      	ldrb	r2, [r2, #0]
 800aeb8:	b252      	sxtb	r2, r2
 800aeba:	9300      	str	r3, [sp, #0]
 800aebc:	0013      	movs	r3, r2
 800aebe:	000a      	movs	r2, r1
 800aec0:	2100      	movs	r1, #0
 800aec2:	f000 ff63 	bl	800bd8c <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800aec6:	193b      	adds	r3, r7, r4
 800aec8:	2220      	movs	r2, #32
 800aeca:	5c99      	ldrb	r1, [r3, r2]
 800aecc:	4b42      	ldr	r3, [pc, #264]	; (800afd8 <ProcessRadioRxDone+0xa2c>)
 800aece:	4a4e      	ldr	r2, [pc, #312]	; (800b008 <ProcessRadioRxDone+0xa5c>)
 800aed0:	5499      	strb	r1, [r3, r2]
                    break;
 800aed2:	e01e      	b.n	800af12 <ProcessRadioRxDone+0x966>
                    * |    = 0   |   -  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // No MAC commands just application payload
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800aed4:	2034      	movs	r0, #52	; 0x34
 800aed6:	183b      	adds	r3, r7, r0
 800aed8:	2220      	movs	r2, #32
 800aeda:	5c99      	ldrb	r1, [r3, r2]
 800aedc:	4b3e      	ldr	r3, [pc, #248]	; (800afd8 <ProcessRadioRxDone+0xa2c>)
 800aede:	4a4a      	ldr	r2, [pc, #296]	; (800b008 <ProcessRadioRxDone+0xa5c>)
 800aee0:	5499      	strb	r1, [r3, r2]
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800aee2:	183b      	adds	r3, r7, r0
 800aee4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800aee6:	4a3c      	ldr	r2, [pc, #240]	; (800afd8 <ProcessRadioRxDone+0xa2c>)
 800aee8:	2383      	movs	r3, #131	; 0x83
 800aeea:	00db      	lsls	r3, r3, #3
 800aeec:	50d1      	str	r1, [r2, r3]
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800aeee:	183b      	adds	r3, r7, r0
 800aef0:	2228      	movs	r2, #40	; 0x28
 800aef2:	5c99      	ldrb	r1, [r3, r2]
 800aef4:	4b38      	ldr	r3, [pc, #224]	; (800afd8 <ProcessRadioRxDone+0xa2c>)
 800aef6:	4a3c      	ldr	r2, [pc, #240]	; (800afe8 <ProcessRadioRxDone+0xa3c>)
 800aef8:	5499      	strb	r1, [r3, r2]
                    MacCtx.McpsIndication.RxData = true;
 800aefa:	4b37      	ldr	r3, [pc, #220]	; (800afd8 <ProcessRadioRxDone+0xa2c>)
 800aefc:	4a43      	ldr	r2, [pc, #268]	; (800b00c <ProcessRadioRxDone+0xa60>)
 800aefe:	2101      	movs	r1, #1
 800af00:	5499      	strb	r1, [r3, r2]
                    break;
 800af02:	e006      	b.n	800af12 <ProcessRadioRxDone+0x966>
                }
                default:
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800af04:	4b34      	ldr	r3, [pc, #208]	; (800afd8 <ProcessRadioRxDone+0xa2c>)
 800af06:	4a35      	ldr	r2, [pc, #212]	; (800afdc <ProcessRadioRxDone+0xa30>)
 800af08:	2101      	movs	r1, #1
 800af0a:	5499      	strb	r1, [r3, r2]
                    PrepareRxDoneAbort( );
 800af0c:	f7ff fb20 	bl	800a550 <PrepareRxDoneAbort>
                    break;
 800af10:	46c0      	nop			; (mov r8, r8)
            }

            // Provide always an indication, skip the callback to the user application,
            // in case of a confirmed downlink retransmission.
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800af12:	4b31      	ldr	r3, [pc, #196]	; (800afd8 <ProcessRadioRxDone+0xa2c>)
 800af14:	4a3e      	ldr	r2, [pc, #248]	; (800b010 <ProcessRadioRxDone+0xa64>)
 800af16:	5c99      	ldrb	r1, [r3, r2]
 800af18:	2002      	movs	r0, #2
 800af1a:	4301      	orrs	r1, r0
 800af1c:	5499      	strb	r1, [r3, r2]

            break;
 800af1e:	e032      	b.n	800af86 <ProcessRadioRxDone+0x9da>
        case FRAME_TYPE_PROPRIETARY:
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size );
 800af20:	2476      	movs	r4, #118	; 0x76
 800af22:	193b      	adds	r3, r7, r4
 800af24:	781b      	ldrb	r3, [r3, #0]
 800af26:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800af28:	18d1      	adds	r1, r2, r3
 800af2a:	257a      	movs	r5, #122	; 0x7a
 800af2c:	197b      	adds	r3, r7, r5
 800af2e:	881a      	ldrh	r2, [r3, #0]
 800af30:	4b38      	ldr	r3, [pc, #224]	; (800b014 <ProcessRadioRxDone+0xa68>)
 800af32:	0018      	movs	r0, r3
 800af34:	f00a fbd4 	bl	80156e0 <memcpy1>

            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 800af38:	4a27      	ldr	r2, [pc, #156]	; (800afd8 <ProcessRadioRxDone+0xa2c>)
 800af3a:	2382      	movs	r3, #130	; 0x82
 800af3c:	00db      	lsls	r3, r3, #3
 800af3e:	2103      	movs	r1, #3
 800af40:	54d1      	strb	r1, [r2, r3]
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800af42:	4b25      	ldr	r3, [pc, #148]	; (800afd8 <ProcessRadioRxDone+0xa2c>)
 800af44:	4a25      	ldr	r2, [pc, #148]	; (800afdc <ProcessRadioRxDone+0xa30>)
 800af46:	2100      	movs	r1, #0
 800af48:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 800af4a:	4a23      	ldr	r2, [pc, #140]	; (800afd8 <ProcessRadioRxDone+0xa2c>)
 800af4c:	2383      	movs	r3, #131	; 0x83
 800af4e:	00db      	lsls	r3, r3, #3
 800af50:	4930      	ldr	r1, [pc, #192]	; (800b014 <ProcessRadioRxDone+0xa68>)
 800af52:	50d1      	str	r1, [r2, r3]
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 800af54:	197b      	adds	r3, r7, r5
 800af56:	881b      	ldrh	r3, [r3, #0]
 800af58:	b2da      	uxtb	r2, r3
 800af5a:	193b      	adds	r3, r7, r4
 800af5c:	781b      	ldrb	r3, [r3, #0]
 800af5e:	1ad3      	subs	r3, r2, r3
 800af60:	b2d9      	uxtb	r1, r3
 800af62:	4b1d      	ldr	r3, [pc, #116]	; (800afd8 <ProcessRadioRxDone+0xa2c>)
 800af64:	4a20      	ldr	r2, [pc, #128]	; (800afe8 <ProcessRadioRxDone+0xa3c>)
 800af66:	5499      	strb	r1, [r3, r2]

            MacCtx.MacFlags.Bits.McpsInd = 1;
 800af68:	4b1b      	ldr	r3, [pc, #108]	; (800afd8 <ProcessRadioRxDone+0xa2c>)
 800af6a:	4a29      	ldr	r2, [pc, #164]	; (800b010 <ProcessRadioRxDone+0xa64>)
 800af6c:	5c99      	ldrb	r1, [r3, r2]
 800af6e:	2002      	movs	r0, #2
 800af70:	4301      	orrs	r1, r0
 800af72:	5499      	strb	r1, [r3, r2]
            break;
 800af74:	e007      	b.n	800af86 <ProcessRadioRxDone+0x9da>
        default:
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800af76:	4b18      	ldr	r3, [pc, #96]	; (800afd8 <ProcessRadioRxDone+0xa2c>)
 800af78:	4a18      	ldr	r2, [pc, #96]	; (800afdc <ProcessRadioRxDone+0xa30>)
 800af7a:	2101      	movs	r1, #1
 800af7c:	5499      	strb	r1, [r3, r2]
            PrepareRxDoneAbort( );
 800af7e:	f7ff fae7 	bl	800a550 <PrepareRxDoneAbort>
            break;
 800af82:	e000      	b.n	800af86 <ProcessRadioRxDone+0x9da>
            break;
 800af84:	46c0      	nop			; (mov r8, r8)
    }

    // Verify if we need to disable the AckTimeoutTimer
    CheckToDisableAckTimeout( MacCtx.NvmCtx->NodeAckRequested, MacCtx.NvmCtx->DeviceClass, MacCtx.McpsConfirm.AckReceived );
 800af86:	4a14      	ldr	r2, [pc, #80]	; (800afd8 <ProcessRadioRxDone+0xa2c>)
 800af88:	238e      	movs	r3, #142	; 0x8e
 800af8a:	00db      	lsls	r3, r3, #3
 800af8c:	58d3      	ldr	r3, [r2, r3]
 800af8e:	4a22      	ldr	r2, [pc, #136]	; (800b018 <ProcessRadioRxDone+0xa6c>)
 800af90:	5c98      	ldrb	r0, [r3, r2]
 800af92:	4a11      	ldr	r2, [pc, #68]	; (800afd8 <ProcessRadioRxDone+0xa2c>)
 800af94:	238e      	movs	r3, #142	; 0x8e
 800af96:	00db      	lsls	r3, r3, #3
 800af98:	58d3      	ldr	r3, [r2, r3]
 800af9a:	22c8      	movs	r2, #200	; 0xc8
 800af9c:	5c99      	ldrb	r1, [r3, r2]
 800af9e:	4a0e      	ldr	r2, [pc, #56]	; (800afd8 <ProcessRadioRxDone+0xa2c>)
 800afa0:	2386      	movs	r3, #134	; 0x86
 800afa2:	00db      	lsls	r3, r3, #3
 800afa4:	5cd3      	ldrb	r3, [r2, r3]
 800afa6:	001a      	movs	r2, r3
 800afa8:	f000 fd26 	bl	800b9f8 <CheckToDisableAckTimeout>

    if( TimerIsStarted( &MacCtx.AckTimeoutTimer ) == false )
 800afac:	4b1b      	ldr	r3, [pc, #108]	; (800b01c <ProcessRadioRxDone+0xa70>)
 800afae:	0018      	movs	r0, r3
 800afb0:	f00a fb36 	bl	8015620 <TimerIsStarted>
 800afb4:	0003      	movs	r3, r0
 800afb6:	001a      	movs	r2, r3
 800afb8:	2301      	movs	r3, #1
 800afba:	4053      	eors	r3, r2
 800afbc:	b2db      	uxtb	r3, r3
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d007      	beq.n	800afd2 <ProcessRadioRxDone+0xa26>
    {  // Procedure is completed when the AckTimeoutTimer is not running anymore
        MacCtx.MacFlags.Bits.MacDone = 1;
 800afc2:	4b05      	ldr	r3, [pc, #20]	; (800afd8 <ProcessRadioRxDone+0xa2c>)
 800afc4:	4a12      	ldr	r2, [pc, #72]	; (800b010 <ProcessRadioRxDone+0xa64>)
 800afc6:	5c99      	ldrb	r1, [r3, r2]
 800afc8:	2010      	movs	r0, #16
 800afca:	4301      	orrs	r1, r0
 800afcc:	5499      	strb	r1, [r3, r2]
 800afce:	e000      	b.n	800afd2 <ProcessRadioRxDone+0xa26>
                return;
 800afd0:	46c0      	nop			; (mov r8, r8)
    }
}
 800afd2:	46bd      	mov	sp, r7
 800afd4:	b023      	add	sp, #140	; 0x8c
 800afd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800afd8:	2000070c 	.word	0x2000070c
 800afdc:	00000411 	.word	0x00000411
 800afe0:	00000412 	.word	0x00000412
 800afe4:	00000415 	.word	0x00000415
 800afe8:	0000041c 	.word	0x0000041c
 800afec:	00000424 	.word	0x00000424
 800aff0:	00000422 	.word	0x00000422
 800aff4:	0000042d 	.word	0x0000042d
 800aff8:	0000021a 	.word	0x0000021a
 800affc:	00000222 	.word	0x00000222
 800b000:	00000421 	.word	0x00000421
 800b004:	0000042c 	.word	0x0000042c
 800b008:	00000413 	.word	0x00000413
 800b00c:	0000041d 	.word	0x0000041d
 800b010:	0000046d 	.word	0x0000046d
 800b014:	2000094c 	.word	0x2000094c
 800b018:	00000219 	.word	0x00000219
 800b01c:	20000b00 	.word	0x20000b00

0800b020 <ProcessRadioTxTimeout>:

static void ProcessRadioTxTimeout( void )
{
 800b020:	b580      	push	{r7, lr}
 800b022:	af00      	add	r7, sp, #0
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 800b024:	4a0e      	ldr	r2, [pc, #56]	; (800b060 <ProcessRadioTxTimeout+0x40>)
 800b026:	238e      	movs	r3, #142	; 0x8e
 800b028:	00db      	lsls	r3, r3, #3
 800b02a:	58d3      	ldr	r3, [r2, r3]
 800b02c:	22c8      	movs	r2, #200	; 0xc8
 800b02e:	5c9b      	ldrb	r3, [r3, r2]
 800b030:	2b02      	cmp	r3, #2
 800b032:	d003      	beq.n	800b03c <ProcessRadioTxTimeout+0x1c>
    {
        Radio.Sleep( );
 800b034:	4b0b      	ldr	r3, [pc, #44]	; (800b064 <ProcessRadioTxTimeout+0x44>)
 800b036:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b038:	4798      	blx	r3
 800b03a:	e001      	b.n	800b040 <ProcessRadioTxTimeout+0x20>
    }
    else
    {
        OpenContinuousRx2Window( );
 800b03c:	f002 f95e 	bl	800d2fc <OpenContinuousRx2Window>
    }

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 800b040:	4b07      	ldr	r3, [pc, #28]	; (800b060 <ProcessRadioTxTimeout+0x40>)
 800b042:	4a09      	ldr	r2, [pc, #36]	; (800b068 <ProcessRadioTxTimeout+0x48>)
 800b044:	2102      	movs	r1, #2
 800b046:	5499      	strb	r1, [r3, r2]
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 800b048:	2002      	movs	r0, #2
 800b04a:	f005 fa87 	bl	801055c <LoRaMacConfirmQueueSetStatusCmn>
    MacCtx.MacFlags.Bits.MacDone = 1;
 800b04e:	4b04      	ldr	r3, [pc, #16]	; (800b060 <ProcessRadioTxTimeout+0x40>)
 800b050:	4a06      	ldr	r2, [pc, #24]	; (800b06c <ProcessRadioTxTimeout+0x4c>)
 800b052:	5c99      	ldrb	r1, [r3, r2]
 800b054:	2010      	movs	r0, #16
 800b056:	4301      	orrs	r1, r0
 800b058:	5499      	strb	r1, [r3, r2]
}
 800b05a:	46c0      	nop			; (mov r8, r8)
 800b05c:	46bd      	mov	sp, r7
 800b05e:	bd80      	pop	{r7, pc}
 800b060:	2000070c 	.word	0x2000070c
 800b064:	08020c58 	.word	0x08020c58
 800b068:	0000042d 	.word	0x0000042d
 800b06c:	0000046d 	.word	0x0000046d

0800b070 <HandleRadioRxErrorTimeout>:

static void HandleRadioRxErrorTimeout( LoRaMacEventInfoStatus_t rx1EventInfoStatus, LoRaMacEventInfoStatus_t rx2EventInfoStatus )
{
 800b070:	b580      	push	{r7, lr}
 800b072:	b084      	sub	sp, #16
 800b074:	af00      	add	r7, sp, #0
 800b076:	0002      	movs	r2, r0
 800b078:	1dfb      	adds	r3, r7, #7
 800b07a:	701a      	strb	r2, [r3, #0]
 800b07c:	1dbb      	adds	r3, r7, #6
 800b07e:	1c0a      	adds	r2, r1, #0
 800b080:	701a      	strb	r2, [r3, #0]
    bool classBRx = false;
 800b082:	230f      	movs	r3, #15
 800b084:	18fb      	adds	r3, r7, r3
 800b086:	2200      	movs	r2, #0
 800b088:	701a      	strb	r2, [r3, #0]

    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 800b08a:	4a55      	ldr	r2, [pc, #340]	; (800b1e0 <HandleRadioRxErrorTimeout+0x170>)
 800b08c:	238e      	movs	r3, #142	; 0x8e
 800b08e:	00db      	lsls	r3, r3, #3
 800b090:	58d3      	ldr	r3, [r2, r3]
 800b092:	22c8      	movs	r2, #200	; 0xc8
 800b094:	5c9b      	ldrb	r3, [r3, r2]
 800b096:	2b02      	cmp	r3, #2
 800b098:	d002      	beq.n	800b0a0 <HandleRadioRxErrorTimeout+0x30>
    {
        Radio.Sleep( );
 800b09a:	4b52      	ldr	r3, [pc, #328]	; (800b1e4 <HandleRadioRxErrorTimeout+0x174>)
 800b09c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b09e:	4798      	blx	r3
    }

    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800b0a0:	f004 fdc1 	bl	800fc26 <LoRaMacClassBIsBeaconExpected>
 800b0a4:	1e03      	subs	r3, r0, #0
 800b0a6:	d009      	beq.n	800b0bc <HandleRadioRxErrorTimeout+0x4c>
    {
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 800b0a8:	2002      	movs	r0, #2
 800b0aa:	f004 fd74 	bl	800fb96 <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 800b0ae:	2000      	movs	r0, #0
 800b0b0:	f004 fd95 	bl	800fbde <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 800b0b4:	230f      	movs	r3, #15
 800b0b6:	18fb      	adds	r3, r7, r3
 800b0b8:	2201      	movs	r2, #1
 800b0ba:	701a      	strb	r2, [r3, #0]
    }
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 800b0bc:	4a48      	ldr	r2, [pc, #288]	; (800b1e0 <HandleRadioRxErrorTimeout+0x170>)
 800b0be:	238e      	movs	r3, #142	; 0x8e
 800b0c0:	00db      	lsls	r3, r3, #3
 800b0c2:	58d3      	ldr	r3, [r2, r3]
 800b0c4:	22c8      	movs	r2, #200	; 0xc8
 800b0c6:	5c9b      	ldrb	r3, [r3, r2]
 800b0c8:	2b01      	cmp	r3, #1
 800b0ca:	d11b      	bne.n	800b104 <HandleRadioRxErrorTimeout+0x94>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800b0cc:	f004 fdb1 	bl	800fc32 <LoRaMacClassBIsPingExpected>
 800b0d0:	1e03      	subs	r3, r0, #0
 800b0d2:	d009      	beq.n	800b0e8 <HandleRadioRxErrorTimeout+0x78>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800b0d4:	2000      	movs	r0, #0
 800b0d6:	f004 fd68 	bl	800fbaa <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800b0da:	2000      	movs	r0, #0
 800b0dc:	f004 fd87 	bl	800fbee <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 800b0e0:	230f      	movs	r3, #15
 800b0e2:	18fb      	adds	r3, r7, r3
 800b0e4:	2201      	movs	r2, #1
 800b0e6:	701a      	strb	r2, [r3, #0]
        }
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 800b0e8:	f004 fda9 	bl	800fc3e <LoRaMacClassBIsMulticastExpected>
 800b0ec:	1e03      	subs	r3, r0, #0
 800b0ee:	d009      	beq.n	800b104 <HandleRadioRxErrorTimeout+0x94>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800b0f0:	2000      	movs	r0, #0
 800b0f2:	f004 fd64 	bl	800fbbe <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800b0f6:	2000      	movs	r0, #0
 800b0f8:	f004 fd81 	bl	800fbfe <LoRaMacClassBMulticastSlotTimerEvent>
            classBRx = true;
 800b0fc:	230f      	movs	r3, #15
 800b0fe:	18fb      	adds	r3, r7, r3
 800b100:	2201      	movs	r2, #1
 800b102:	701a      	strb	r2, [r3, #0]
        }
    }

    if( classBRx == false )
 800b104:	230f      	movs	r3, #15
 800b106:	18fb      	adds	r3, r7, r3
 800b108:	781b      	ldrb	r3, [r3, #0]
 800b10a:	2201      	movs	r2, #1
 800b10c:	4053      	eors	r3, r2
 800b10e:	b2db      	uxtb	r3, r3
 800b110:	2b00      	cmp	r3, #0
 800b112:	d057      	beq.n	800b1c4 <HandleRadioRxErrorTimeout+0x154>
    {
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800b114:	4b32      	ldr	r3, [pc, #200]	; (800b1e0 <HandleRadioRxErrorTimeout+0x170>)
 800b116:	4a34      	ldr	r2, [pc, #208]	; (800b1e8 <HandleRadioRxErrorTimeout+0x178>)
 800b118:	5c9b      	ldrb	r3, [r3, r2]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d132      	bne.n	800b184 <HandleRadioRxErrorTimeout+0x114>
        {
            if( MacCtx.NvmCtx->NodeAckRequested == true )
 800b11e:	4a30      	ldr	r2, [pc, #192]	; (800b1e0 <HandleRadioRxErrorTimeout+0x170>)
 800b120:	238e      	movs	r3, #142	; 0x8e
 800b122:	00db      	lsls	r3, r3, #3
 800b124:	58d3      	ldr	r3, [r2, r3]
 800b126:	4a31      	ldr	r2, [pc, #196]	; (800b1ec <HandleRadioRxErrorTimeout+0x17c>)
 800b128:	5c9b      	ldrb	r3, [r3, r2]
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d004      	beq.n	800b138 <HandleRadioRxErrorTimeout+0xc8>
            {
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 800b12e:	4b2c      	ldr	r3, [pc, #176]	; (800b1e0 <HandleRadioRxErrorTimeout+0x170>)
 800b130:	1dfa      	adds	r2, r7, #7
 800b132:	492f      	ldr	r1, [pc, #188]	; (800b1f0 <HandleRadioRxErrorTimeout+0x180>)
 800b134:	7812      	ldrb	r2, [r2, #0]
 800b136:	545a      	strb	r2, [r3, r1]
            }
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 800b138:	1dfb      	adds	r3, r7, #7
 800b13a:	781b      	ldrb	r3, [r3, #0]
 800b13c:	0018      	movs	r0, r3
 800b13e:	f005 fa0d 	bl	801055c <LoRaMacConfirmQueueSetStatusCmn>

            if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 800b142:	4a27      	ldr	r2, [pc, #156]	; (800b1e0 <HandleRadioRxErrorTimeout+0x170>)
 800b144:	238e      	movs	r3, #142	; 0x8e
 800b146:	00db      	lsls	r3, r3, #3
 800b148:	58d3      	ldr	r3, [r2, r3]
 800b14a:	22c8      	movs	r2, #200	; 0xc8
 800b14c:	5c9b      	ldrb	r3, [r3, r2]
 800b14e:	2b02      	cmp	r3, #2
 800b150:	d038      	beq.n	800b1c4 <HandleRadioRxErrorTimeout+0x154>
            {
                if( TimerGetElapsedTime( MacCtx.AggregatedLastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 800b152:	4a23      	ldr	r2, [pc, #140]	; (800b1e0 <HandleRadioRxErrorTimeout+0x170>)
 800b154:	23d0      	movs	r3, #208	; 0xd0
 800b156:	009b      	lsls	r3, r3, #2
 800b158:	58d3      	ldr	r3, [r2, r3]
 800b15a:	0018      	movs	r0, r3
 800b15c:	f00a fa73 	bl	8015646 <TimerGetElapsedTime>
 800b160:	0001      	movs	r1, r0
 800b162:	4a1f      	ldr	r2, [pc, #124]	; (800b1e0 <HandleRadioRxErrorTimeout+0x170>)
 800b164:	23f2      	movs	r3, #242	; 0xf2
 800b166:	009b      	lsls	r3, r3, #2
 800b168:	58d3      	ldr	r3, [r2, r3]
 800b16a:	4299      	cmp	r1, r3
 800b16c:	d32a      	bcc.n	800b1c4 <HandleRadioRxErrorTimeout+0x154>
                {
                    TimerStop( &MacCtx.RxWindowTimer2 );
 800b16e:	4b21      	ldr	r3, [pc, #132]	; (800b1f4 <HandleRadioRxErrorTimeout+0x184>)
 800b170:	0018      	movs	r0, r3
 800b172:	f00a fa25 	bl	80155c0 <TimerStop>
                    MacCtx.MacFlags.Bits.MacDone = 1;
 800b176:	4b1a      	ldr	r3, [pc, #104]	; (800b1e0 <HandleRadioRxErrorTimeout+0x170>)
 800b178:	4a1f      	ldr	r2, [pc, #124]	; (800b1f8 <HandleRadioRxErrorTimeout+0x188>)
 800b17a:	5c99      	ldrb	r1, [r3, r2]
 800b17c:	2010      	movs	r0, #16
 800b17e:	4301      	orrs	r1, r0
 800b180:	5499      	strb	r1, [r3, r2]
 800b182:	e01f      	b.n	800b1c4 <HandleRadioRxErrorTimeout+0x154>
                }
            }
        }
        else
        {
            if( MacCtx.NvmCtx->NodeAckRequested == true )
 800b184:	4a16      	ldr	r2, [pc, #88]	; (800b1e0 <HandleRadioRxErrorTimeout+0x170>)
 800b186:	238e      	movs	r3, #142	; 0x8e
 800b188:	00db      	lsls	r3, r3, #3
 800b18a:	58d3      	ldr	r3, [r2, r3]
 800b18c:	4a17      	ldr	r2, [pc, #92]	; (800b1ec <HandleRadioRxErrorTimeout+0x17c>)
 800b18e:	5c9b      	ldrb	r3, [r3, r2]
 800b190:	2b00      	cmp	r3, #0
 800b192:	d004      	beq.n	800b19e <HandleRadioRxErrorTimeout+0x12e>
            {
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 800b194:	4b12      	ldr	r3, [pc, #72]	; (800b1e0 <HandleRadioRxErrorTimeout+0x170>)
 800b196:	1dba      	adds	r2, r7, #6
 800b198:	4915      	ldr	r1, [pc, #84]	; (800b1f0 <HandleRadioRxErrorTimeout+0x180>)
 800b19a:	7812      	ldrb	r2, [r2, #0]
 800b19c:	545a      	strb	r2, [r3, r1]
            }
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 800b19e:	1dbb      	adds	r3, r7, #6
 800b1a0:	781b      	ldrb	r3, [r3, #0]
 800b1a2:	0018      	movs	r0, r3
 800b1a4:	f005 f9da 	bl	801055c <LoRaMacConfirmQueueSetStatusCmn>

            if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 800b1a8:	4a0d      	ldr	r2, [pc, #52]	; (800b1e0 <HandleRadioRxErrorTimeout+0x170>)
 800b1aa:	238e      	movs	r3, #142	; 0x8e
 800b1ac:	00db      	lsls	r3, r3, #3
 800b1ae:	58d3      	ldr	r3, [r2, r3]
 800b1b0:	22c8      	movs	r2, #200	; 0xc8
 800b1b2:	5c9b      	ldrb	r3, [r3, r2]
 800b1b4:	2b02      	cmp	r3, #2
 800b1b6:	d005      	beq.n	800b1c4 <HandleRadioRxErrorTimeout+0x154>
            {
                MacCtx.MacFlags.Bits.MacDone = 1;
 800b1b8:	4b09      	ldr	r3, [pc, #36]	; (800b1e0 <HandleRadioRxErrorTimeout+0x170>)
 800b1ba:	4a0f      	ldr	r2, [pc, #60]	; (800b1f8 <HandleRadioRxErrorTimeout+0x188>)
 800b1bc:	5c99      	ldrb	r1, [r3, r2]
 800b1be:	2010      	movs	r0, #16
 800b1c0:	4301      	orrs	r1, r0
 800b1c2:	5499      	strb	r1, [r3, r2]
            }
        }
    }

    if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 800b1c4:	4a06      	ldr	r2, [pc, #24]	; (800b1e0 <HandleRadioRxErrorTimeout+0x170>)
 800b1c6:	238e      	movs	r3, #142	; 0x8e
 800b1c8:	00db      	lsls	r3, r3, #3
 800b1ca:	58d3      	ldr	r3, [r2, r3]
 800b1cc:	22c8      	movs	r2, #200	; 0xc8
 800b1ce:	5c9b      	ldrb	r3, [r3, r2]
 800b1d0:	2b02      	cmp	r3, #2
 800b1d2:	d101      	bne.n	800b1d8 <HandleRadioRxErrorTimeout+0x168>
    {
        OpenContinuousRx2Window( );
 800b1d4:	f002 f892 	bl	800d2fc <OpenContinuousRx2Window>
    }
}
 800b1d8:	46c0      	nop			; (mov r8, r8)
 800b1da:	46bd      	mov	sp, r7
 800b1dc:	b004      	add	sp, #16
 800b1de:	bd80      	pop	{r7, pc}
 800b1e0:	2000070c 	.word	0x2000070c
 800b1e4:	08020c58 	.word	0x08020c58
 800b1e8:	0000046c 	.word	0x0000046c
 800b1ec:	00000219 	.word	0x00000219
 800b1f0:	0000042d 	.word	0x0000042d
 800b1f4:	20000ab8 	.word	0x20000ab8
 800b1f8:	0000046d 	.word	0x0000046d

0800b1fc <ProcessRadioRxError>:

static void ProcessRadioRxError( void )
{
 800b1fc:	b580      	push	{r7, lr}
 800b1fe:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 800b200:	2106      	movs	r1, #6
 800b202:	2005      	movs	r0, #5
 800b204:	f7ff ff34 	bl	800b070 <HandleRadioRxErrorTimeout>
}
 800b208:	46c0      	nop			; (mov r8, r8)
 800b20a:	46bd      	mov	sp, r7
 800b20c:	bd80      	pop	{r7, pc}

0800b20e <ProcessRadioRxTimeout>:

static void ProcessRadioRxTimeout( void )
{
 800b20e:	b580      	push	{r7, lr}
 800b210:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 800b212:	2104      	movs	r1, #4
 800b214:	2003      	movs	r0, #3
 800b216:	f7ff ff2b 	bl	800b070 <HandleRadioRxErrorTimeout>
}
 800b21a:	46c0      	nop			; (mov r8, r8)
 800b21c:	46bd      	mov	sp, r7
 800b21e:	bd80      	pop	{r7, pc}

0800b220 <LoRaMacHandleIrqEvents>:

static void LoRaMacHandleIrqEvents( void )
{
 800b220:	b580      	push	{r7, lr}
 800b222:	b082      	sub	sp, #8
 800b224:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents_t events;

    CRITICAL_SECTION_BEGIN( );
 800b226:	f012 fab3 	bl	801d790 <itsdk_enterCriticalSection>
    events = LoRaMacRadioEvents;
 800b22a:	4b1e      	ldr	r3, [pc, #120]	; (800b2a4 <LoRaMacHandleIrqEvents+0x84>)
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	607b      	str	r3, [r7, #4]
    LoRaMacRadioEvents.Value = 0;
 800b230:	4b1c      	ldr	r3, [pc, #112]	; (800b2a4 <LoRaMacHandleIrqEvents+0x84>)
 800b232:	2200      	movs	r2, #0
 800b234:	601a      	str	r2, [r3, #0]
    CRITICAL_SECTION_END( );
 800b236:	f012 fabf 	bl	801d7b8 <itsdk_leaveCriticalSection>

    if( events.Value != 0 )
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d02c      	beq.n	800b29a <LoRaMacHandleIrqEvents+0x7a>
    {
        if( events.Events.TxDone == 1 )
 800b240:	1d3b      	adds	r3, r7, #4
 800b242:	781b      	ldrb	r3, [r3, #0]
 800b244:	2210      	movs	r2, #16
 800b246:	4013      	ands	r3, r2
 800b248:	b2db      	uxtb	r3, r3
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d001      	beq.n	800b252 <LoRaMacHandleIrqEvents+0x32>
        {
            ProcessRadioTxDone( );
 800b24e:	f7ff f8af 	bl	800a3b0 <ProcessRadioTxDone>
        }
        if( events.Events.RxDone == 1 )
 800b252:	1d3b      	adds	r3, r7, #4
 800b254:	781b      	ldrb	r3, [r3, #0]
 800b256:	2208      	movs	r2, #8
 800b258:	4013      	ands	r3, r2
 800b25a:	b2db      	uxtb	r3, r3
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d001      	beq.n	800b264 <LoRaMacHandleIrqEvents+0x44>
        {
            ProcessRadioRxDone( );
 800b260:	f7ff f9a4 	bl	800a5ac <ProcessRadioRxDone>
        }
        if( events.Events.TxTimeout == 1 )
 800b264:	1d3b      	adds	r3, r7, #4
 800b266:	781b      	ldrb	r3, [r3, #0]
 800b268:	2204      	movs	r2, #4
 800b26a:	4013      	ands	r3, r2
 800b26c:	b2db      	uxtb	r3, r3
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d001      	beq.n	800b276 <LoRaMacHandleIrqEvents+0x56>
        {
            ProcessRadioTxTimeout( );
 800b272:	f7ff fed5 	bl	800b020 <ProcessRadioTxTimeout>
        }
        if( events.Events.RxError == 1 )
 800b276:	1d3b      	adds	r3, r7, #4
 800b278:	781b      	ldrb	r3, [r3, #0]
 800b27a:	2202      	movs	r2, #2
 800b27c:	4013      	ands	r3, r2
 800b27e:	b2db      	uxtb	r3, r3
 800b280:	2b00      	cmp	r3, #0
 800b282:	d001      	beq.n	800b288 <LoRaMacHandleIrqEvents+0x68>
        {
            ProcessRadioRxError( );
 800b284:	f7ff ffba 	bl	800b1fc <ProcessRadioRxError>
        }
        if( events.Events.RxTimeout == 1 )
 800b288:	1d3b      	adds	r3, r7, #4
 800b28a:	781b      	ldrb	r3, [r3, #0]
 800b28c:	2201      	movs	r2, #1
 800b28e:	4013      	ands	r3, r2
 800b290:	b2db      	uxtb	r3, r3
 800b292:	2b00      	cmp	r3, #0
 800b294:	d001      	beq.n	800b29a <LoRaMacHandleIrqEvents+0x7a>
        {
            ProcessRadioRxTimeout( );
 800b296:	f7ff ffba 	bl	800b20e <ProcessRadioRxTimeout>
        }
    }
}
 800b29a:	46c0      	nop			; (mov r8, r8)
 800b29c:	46bd      	mov	sp, r7
 800b29e:	b002      	add	sp, #8
 800b2a0:	bd80      	pop	{r7, pc}
 800b2a2:	46c0      	nop			; (mov r8, r8)
 800b2a4:	20000dac 	.word	0x20000dac

0800b2a8 <LoRaMacIsBusy>:

static LoRaMacBoolean_t LoRaMacIsBusy( void )
{
 800b2a8:	b580      	push	{r7, lr}
 800b2aa:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800b2ac:	4a08      	ldr	r2, [pc, #32]	; (800b2d0 <LoRaMacIsBusy+0x28>)
 800b2ae:	23d5      	movs	r3, #213	; 0xd5
 800b2b0:	009b      	lsls	r3, r3, #2
 800b2b2:	58d3      	ldr	r3, [r2, r3]
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d106      	bne.n	800b2c6 <LoRaMacIsBusy+0x1e>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 800b2b8:	4b05      	ldr	r3, [pc, #20]	; (800b2d0 <LoRaMacIsBusy+0x28>)
 800b2ba:	4a06      	ldr	r2, [pc, #24]	; (800b2d4 <LoRaMacIsBusy+0x2c>)
 800b2bc:	5c9b      	ldrb	r3, [r3, r2]
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800b2be:	2b01      	cmp	r3, #1
 800b2c0:	d101      	bne.n	800b2c6 <LoRaMacIsBusy+0x1e>
    {
        return LORAMAC_FALSE;
 800b2c2:	2300      	movs	r3, #0
 800b2c4:	e000      	b.n	800b2c8 <LoRaMacIsBusy+0x20>
    }
    return LORAMAC_TRUE;
 800b2c6:	2301      	movs	r3, #1
}
 800b2c8:	0018      	movs	r0, r3
 800b2ca:	46bd      	mov	sp, r7
 800b2cc:	bd80      	pop	{r7, pc}
 800b2ce:	46c0      	nop			; (mov r8, r8)
 800b2d0:	2000070c 	.word	0x2000070c
 800b2d4:	0000046e 	.word	0x0000046e

0800b2d8 <LoRaMacEnableRequests>:


static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
 800b2d8:	b580      	push	{r7, lr}
 800b2da:	b082      	sub	sp, #8
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	0002      	movs	r2, r0
 800b2e0:	1dfb      	adds	r3, r7, #7
 800b2e2:	701a      	strb	r2, [r3, #0]
    MacCtx.AllowRequests = requestState;
 800b2e4:	4b04      	ldr	r3, [pc, #16]	; (800b2f8 <LoRaMacEnableRequests+0x20>)
 800b2e6:	1dfa      	adds	r2, r7, #7
 800b2e8:	4904      	ldr	r1, [pc, #16]	; (800b2fc <LoRaMacEnableRequests+0x24>)
 800b2ea:	7812      	ldrb	r2, [r2, #0]
 800b2ec:	545a      	strb	r2, [r3, r1]
}
 800b2ee:	46c0      	nop			; (mov r8, r8)
 800b2f0:	46bd      	mov	sp, r7
 800b2f2:	b002      	add	sp, #8
 800b2f4:	bd80      	pop	{r7, pc}
 800b2f6:	46c0      	nop			; (mov r8, r8)
 800b2f8:	2000070c 	.word	0x2000070c
 800b2fc:	0000046e 	.word	0x0000046e

0800b300 <LoRaMacHandleRequestEvents>:

static void LoRaMacHandleRequestEvents( void )
{
 800b300:	b580      	push	{r7, lr}
 800b302:	b082      	sub	sp, #8
 800b304:	af00      	add	r7, sp, #0
    // Handle events
    LoRaMacFlags_t reqEvents = MacCtx.MacFlags;
 800b306:	1d3b      	adds	r3, r7, #4
 800b308:	4a2c      	ldr	r2, [pc, #176]	; (800b3bc <LoRaMacHandleRequestEvents+0xbc>)
 800b30a:	492d      	ldr	r1, [pc, #180]	; (800b3c0 <LoRaMacHandleRequestEvents+0xc0>)
 800b30c:	5c52      	ldrb	r2, [r2, r1]
 800b30e:	701a      	strb	r2, [r3, #0]

    if( MacCtx.MacState == LORAMAC_IDLE )
 800b310:	4a2a      	ldr	r2, [pc, #168]	; (800b3bc <LoRaMacHandleRequestEvents+0xbc>)
 800b312:	23d5      	movs	r3, #213	; 0xd5
 800b314:	009b      	lsls	r3, r3, #2
 800b316:	58d3      	ldr	r3, [r2, r3]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d14a      	bne.n	800b3b2 <LoRaMacHandleRequestEvents+0xb2>
    {
        // Update event bits
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800b31c:	4b27      	ldr	r3, [pc, #156]	; (800b3bc <LoRaMacHandleRequestEvents+0xbc>)
 800b31e:	4a28      	ldr	r2, [pc, #160]	; (800b3c0 <LoRaMacHandleRequestEvents+0xc0>)
 800b320:	5c9b      	ldrb	r3, [r3, r2]
 800b322:	2201      	movs	r2, #1
 800b324:	4013      	ands	r3, r2
 800b326:	b2db      	uxtb	r3, r3
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d005      	beq.n	800b338 <LoRaMacHandleRequestEvents+0x38>
        {
            MacCtx.MacFlags.Bits.McpsReq = 0;
 800b32c:	4b23      	ldr	r3, [pc, #140]	; (800b3bc <LoRaMacHandleRequestEvents+0xbc>)
 800b32e:	4a24      	ldr	r2, [pc, #144]	; (800b3c0 <LoRaMacHandleRequestEvents+0xc0>)
 800b330:	5c99      	ldrb	r1, [r3, r2]
 800b332:	2001      	movs	r0, #1
 800b334:	4381      	bics	r1, r0
 800b336:	5499      	strb	r1, [r3, r2]
        }

        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800b338:	4b20      	ldr	r3, [pc, #128]	; (800b3bc <LoRaMacHandleRequestEvents+0xbc>)
 800b33a:	4a21      	ldr	r2, [pc, #132]	; (800b3c0 <LoRaMacHandleRequestEvents+0xc0>)
 800b33c:	5c9b      	ldrb	r3, [r3, r2]
 800b33e:	2204      	movs	r2, #4
 800b340:	4013      	ands	r3, r2
 800b342:	b2db      	uxtb	r3, r3
 800b344:	2b00      	cmp	r3, #0
 800b346:	d005      	beq.n	800b354 <LoRaMacHandleRequestEvents+0x54>
        {
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800b348:	4b1c      	ldr	r3, [pc, #112]	; (800b3bc <LoRaMacHandleRequestEvents+0xbc>)
 800b34a:	4a1d      	ldr	r2, [pc, #116]	; (800b3c0 <LoRaMacHandleRequestEvents+0xc0>)
 800b34c:	5c99      	ldrb	r1, [r3, r2]
 800b34e:	2004      	movs	r0, #4
 800b350:	4381      	bics	r1, r0
 800b352:	5499      	strb	r1, [r3, r2]
        }

        // Allow requests again
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800b354:	2001      	movs	r0, #1
 800b356:	f7ff ffbf 	bl	800b2d8 <LoRaMacEnableRequests>

        // Handle callbacks
        if( reqEvents.Bits.McpsReq == 1 )
 800b35a:	1d3b      	adds	r3, r7, #4
 800b35c:	781b      	ldrb	r3, [r3, #0]
 800b35e:	2201      	movs	r2, #1
 800b360:	4013      	ands	r3, r2
 800b362:	b2db      	uxtb	r3, r3
 800b364:	2b00      	cmp	r3, #0
 800b366:	d007      	beq.n	800b378 <LoRaMacHandleRequestEvents+0x78>
        {
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 800b368:	4a14      	ldr	r2, [pc, #80]	; (800b3bc <LoRaMacHandleRequestEvents+0xbc>)
 800b36a:	23d6      	movs	r3, #214	; 0xd6
 800b36c:	009b      	lsls	r3, r3, #2
 800b36e:	58d3      	ldr	r3, [r2, r3]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	4a14      	ldr	r2, [pc, #80]	; (800b3c4 <LoRaMacHandleRequestEvents+0xc4>)
 800b374:	0010      	movs	r0, r2
 800b376:	4798      	blx	r3
        }

        if( reqEvents.Bits.MlmeReq == 1 )
 800b378:	1d3b      	adds	r3, r7, #4
 800b37a:	781b      	ldrb	r3, [r3, #0]
 800b37c:	2204      	movs	r2, #4
 800b37e:	4013      	ands	r3, r2
 800b380:	b2db      	uxtb	r3, r3
 800b382:	2b00      	cmp	r3, #0
 800b384:	d00d      	beq.n	800b3a2 <LoRaMacHandleRequestEvents+0xa2>
        {
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 800b386:	4b10      	ldr	r3, [pc, #64]	; (800b3c8 <LoRaMacHandleRequestEvents+0xc8>)
 800b388:	0018      	movs	r0, r3
 800b38a:	f005 f93d 	bl	8010608 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 800b38e:	f005 f99d 	bl	80106cc <LoRaMacConfirmQueueGetCnt>
 800b392:	1e03      	subs	r3, r0, #0
 800b394:	d005      	beq.n	800b3a2 <LoRaMacHandleRequestEvents+0xa2>
            {
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 800b396:	4b09      	ldr	r3, [pc, #36]	; (800b3bc <LoRaMacHandleRequestEvents+0xbc>)
 800b398:	4a09      	ldr	r2, [pc, #36]	; (800b3c0 <LoRaMacHandleRequestEvents+0xc0>)
 800b39a:	5c99      	ldrb	r1, [r3, r2]
 800b39c:	2004      	movs	r0, #4
 800b39e:	4301      	orrs	r1, r0
 800b3a0:	5499      	strb	r1, [r3, r2]
            }
        }

        // Start beaconing again
        LoRaMacClassBResumeBeaconing( );
 800b3a2:	f004 fc67 	bl	800fc74 <LoRaMacClassBResumeBeaconing>

        // Procedure done. Reset variables.
        MacCtx.MacFlags.Bits.MacDone = 0;
 800b3a6:	4b05      	ldr	r3, [pc, #20]	; (800b3bc <LoRaMacHandleRequestEvents+0xbc>)
 800b3a8:	4a05      	ldr	r2, [pc, #20]	; (800b3c0 <LoRaMacHandleRequestEvents+0xc0>)
 800b3aa:	5c99      	ldrb	r1, [r3, r2]
 800b3ac:	2010      	movs	r0, #16
 800b3ae:	4381      	bics	r1, r0
 800b3b0:	5499      	strb	r1, [r3, r2]
    }
}
 800b3b2:	46c0      	nop			; (mov r8, r8)
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	b002      	add	sp, #8
 800b3b8:	bd80      	pop	{r7, pc}
 800b3ba:	46c0      	nop			; (mov r8, r8)
 800b3bc:	2000070c 	.word	0x2000070c
 800b3c0:	0000046d 	.word	0x0000046d
 800b3c4:	20000b38 	.word	0x20000b38
 800b3c8:	20000b4c 	.word	0x20000b4c

0800b3cc <LoRaMacHandleIndicationEvents>:

static void LoRaMacHandleIndicationEvents( void )
{
 800b3cc:	b580      	push	{r7, lr}
 800b3ce:	b082      	sub	sp, #8
 800b3d0:	af00      	add	r7, sp, #0
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 800b3d2:	4b2d      	ldr	r3, [pc, #180]	; (800b488 <LoRaMacHandleIndicationEvents+0xbc>)
 800b3d4:	4a2d      	ldr	r2, [pc, #180]	; (800b48c <LoRaMacHandleIndicationEvents+0xc0>)
 800b3d6:	5c9b      	ldrb	r3, [r3, r2]
 800b3d8:	2208      	movs	r2, #8
 800b3da:	4013      	ands	r3, r2
 800b3dc:	b2db      	uxtb	r3, r3
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d00d      	beq.n	800b3fe <LoRaMacHandleIndicationEvents+0x32>
    {
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication );
 800b3e2:	4a29      	ldr	r2, [pc, #164]	; (800b488 <LoRaMacHandleIndicationEvents+0xbc>)
 800b3e4:	23d6      	movs	r3, #214	; 0xd6
 800b3e6:	009b      	lsls	r3, r3, #2
 800b3e8:	58d3      	ldr	r3, [r2, r3]
 800b3ea:	68db      	ldr	r3, [r3, #12]
 800b3ec:	4a28      	ldr	r2, [pc, #160]	; (800b490 <LoRaMacHandleIndicationEvents+0xc4>)
 800b3ee:	0010      	movs	r0, r2
 800b3f0:	4798      	blx	r3
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 800b3f2:	4b25      	ldr	r3, [pc, #148]	; (800b488 <LoRaMacHandleIndicationEvents+0xbc>)
 800b3f4:	4a25      	ldr	r2, [pc, #148]	; (800b48c <LoRaMacHandleIndicationEvents+0xc0>)
 800b3f6:	5c99      	ldrb	r1, [r3, r2]
 800b3f8:	2008      	movs	r0, #8
 800b3fa:	4381      	bics	r1, r0
 800b3fc:	5499      	strb	r1, [r3, r2]
    }

    // Handle events
    if( MacCtx.MacState == LORAMAC_IDLE )
 800b3fe:	4a22      	ldr	r2, [pc, #136]	; (800b488 <LoRaMacHandleIndicationEvents+0xbc>)
 800b400:	23d5      	movs	r3, #213	; 0xd5
 800b402:	009b      	lsls	r3, r3, #2
 800b404:	58d3      	ldr	r3, [r2, r3]
 800b406:	2b00      	cmp	r3, #0
 800b408:	d114      	bne.n	800b434 <LoRaMacHandleIndicationEvents+0x68>
    {
        // Verify if sticky MAC commands are pending or not
        bool isStickyMacCommandPending = false;
 800b40a:	1dfb      	adds	r3, r7, #7
 800b40c:	2200      	movs	r2, #0
 800b40e:	701a      	strb	r2, [r3, #0]
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 800b410:	1dfb      	adds	r3, r7, #7
 800b412:	0018      	movs	r0, r3
 800b414:	f004 ff48 	bl	80102a8 <LoRaMacCommandsStickyCmdsPending>
        if( isStickyMacCommandPending == true )
 800b418:	1dfb      	adds	r3, r7, #7
 800b41a:	781b      	ldrb	r3, [r3, #0]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d009      	beq.n	800b434 <LoRaMacHandleIndicationEvents+0x68>
        {// Setup MLME indication
            SetMlmeScheduleUplinkIndication( );
 800b420:	f000 fc9e 	bl	800bd60 <SetMlmeScheduleUplinkIndication>
            MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication );
 800b424:	4a18      	ldr	r2, [pc, #96]	; (800b488 <LoRaMacHandleIndicationEvents+0xbc>)
 800b426:	23d6      	movs	r3, #214	; 0xd6
 800b428:	009b      	lsls	r3, r3, #2
 800b42a:	58d3      	ldr	r3, [r2, r3]
 800b42c:	68db      	ldr	r3, [r3, #12]
 800b42e:	4a18      	ldr	r2, [pc, #96]	; (800b490 <LoRaMacHandleIndicationEvents+0xc4>)
 800b430:	0010      	movs	r0, r2
 800b432:	4798      	blx	r3
        }
    }

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800b434:	4b14      	ldr	r3, [pc, #80]	; (800b488 <LoRaMacHandleIndicationEvents+0xbc>)
 800b436:	4a15      	ldr	r2, [pc, #84]	; (800b48c <LoRaMacHandleIndicationEvents+0xc0>)
 800b438:	5c9b      	ldrb	r3, [r3, r2]
 800b43a:	2202      	movs	r2, #2
 800b43c:	4013      	ands	r3, r2
 800b43e:	b2db      	uxtb	r3, r3
 800b440:	2b00      	cmp	r3, #0
 800b442:	d01d      	beq.n	800b480 <LoRaMacHandleIndicationEvents+0xb4>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 800b444:	4b10      	ldr	r3, [pc, #64]	; (800b488 <LoRaMacHandleIndicationEvents+0xbc>)
 800b446:	4a11      	ldr	r2, [pc, #68]	; (800b48c <LoRaMacHandleIndicationEvents+0xc0>)
 800b448:	5c99      	ldrb	r1, [r3, r2]
 800b44a:	2002      	movs	r0, #2
 800b44c:	4381      	bics	r1, r0
 800b44e:	5499      	strb	r1, [r3, r2]
        if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 800b450:	4a0d      	ldr	r2, [pc, #52]	; (800b488 <LoRaMacHandleIndicationEvents+0xbc>)
 800b452:	238e      	movs	r3, #142	; 0x8e
 800b454:	00db      	lsls	r3, r3, #3
 800b456:	58d3      	ldr	r3, [r2, r3]
 800b458:	22c8      	movs	r2, #200	; 0xc8
 800b45a:	5c9b      	ldrb	r3, [r3, r2]
 800b45c:	2b02      	cmp	r3, #2
 800b45e:	d107      	bne.n	800b470 <LoRaMacHandleIndicationEvents+0xa4>
        {// Activate RX2 window for Class C
            if( MacCtx.MacState == LORAMAC_IDLE )
 800b460:	4a09      	ldr	r2, [pc, #36]	; (800b488 <LoRaMacHandleIndicationEvents+0xbc>)
 800b462:	23d5      	movs	r3, #213	; 0xd5
 800b464:	009b      	lsls	r3, r3, #2
 800b466:	58d3      	ldr	r3, [r2, r3]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d101      	bne.n	800b470 <LoRaMacHandleIndicationEvents+0xa4>
            {
                OpenContinuousRx2Window( );
 800b46c:	f001 ff46 	bl	800d2fc <OpenContinuousRx2Window>
            }
        }
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication );
 800b470:	4a05      	ldr	r2, [pc, #20]	; (800b488 <LoRaMacHandleIndicationEvents+0xbc>)
 800b472:	23d6      	movs	r3, #214	; 0xd6
 800b474:	009b      	lsls	r3, r3, #2
 800b476:	58d3      	ldr	r3, [r2, r3]
 800b478:	685b      	ldr	r3, [r3, #4]
 800b47a:	4a06      	ldr	r2, [pc, #24]	; (800b494 <LoRaMacHandleIndicationEvents+0xc8>)
 800b47c:	0010      	movs	r0, r2
 800b47e:	4798      	blx	r3
    }
}
 800b480:	46c0      	nop			; (mov r8, r8)
 800b482:	46bd      	mov	sp, r7
 800b484:	b002      	add	sp, #8
 800b486:	bd80      	pop	{r7, pc}
 800b488:	2000070c 	.word	0x2000070c
 800b48c:	0000046d 	.word	0x0000046d
 800b490:	20000b60 	.word	0x20000b60
 800b494:	20000b1c 	.word	0x20000b1c

0800b498 <LoRaMacHandleMcpsRequest>:

static void LoRaMacHandleMcpsRequest( void )
{
 800b498:	b590      	push	{r4, r7, lr}
 800b49a:	b083      	sub	sp, #12
 800b49c:	af00      	add	r7, sp, #0
    // Handle MCPS uplinks
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800b49e:	4b36      	ldr	r3, [pc, #216]	; (800b578 <LoRaMacHandleMcpsRequest+0xe0>)
 800b4a0:	4a36      	ldr	r2, [pc, #216]	; (800b57c <LoRaMacHandleMcpsRequest+0xe4>)
 800b4a2:	5c9b      	ldrb	r3, [r3, r2]
 800b4a4:	2201      	movs	r2, #1
 800b4a6:	4013      	ands	r3, r2
 800b4a8:	b2db      	uxtb	r3, r3
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d05f      	beq.n	800b56e <LoRaMacHandleMcpsRequest+0xd6>
    {
        bool stopRetransmission = false;
 800b4ae:	1dfb      	adds	r3, r7, #7
 800b4b0:	2200      	movs	r2, #0
 800b4b2:	701a      	strb	r2, [r3, #0]
        bool waitForRetransmission = false;
 800b4b4:	1dbb      	adds	r3, r7, #6
 800b4b6:	2200      	movs	r2, #0
 800b4b8:	701a      	strb	r2, [r3, #0]

        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800b4ba:	4b2f      	ldr	r3, [pc, #188]	; (800b578 <LoRaMacHandleMcpsRequest+0xe0>)
 800b4bc:	4a30      	ldr	r2, [pc, #192]	; (800b580 <LoRaMacHandleMcpsRequest+0xe8>)
 800b4be:	5c9b      	ldrb	r3, [r3, r2]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d004      	beq.n	800b4ce <LoRaMacHandleMcpsRequest+0x36>
            ( MacCtx.McpsConfirm.McpsRequest == MCPS_PROPRIETARY ) )
 800b4c4:	4b2c      	ldr	r3, [pc, #176]	; (800b578 <LoRaMacHandleMcpsRequest+0xe0>)
 800b4c6:	4a2e      	ldr	r2, [pc, #184]	; (800b580 <LoRaMacHandleMcpsRequest+0xe8>)
 800b4c8:	5c9b      	ldrb	r3, [r3, r2]
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800b4ca:	2b03      	cmp	r3, #3
 800b4cc:	d105      	bne.n	800b4da <LoRaMacHandleMcpsRequest+0x42>
        {
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 800b4ce:	1dfc      	adds	r4, r7, #7
 800b4d0:	f002 fae2 	bl	800da98 <CheckRetransUnconfirmedUplink>
 800b4d4:	0003      	movs	r3, r0
 800b4d6:	7023      	strb	r3, [r4, #0]
 800b4d8:	e02a      	b.n	800b530 <LoRaMacHandleMcpsRequest+0x98>
        }
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 800b4da:	4b27      	ldr	r3, [pc, #156]	; (800b578 <LoRaMacHandleMcpsRequest+0xe0>)
 800b4dc:	4a28      	ldr	r2, [pc, #160]	; (800b580 <LoRaMacHandleMcpsRequest+0xe8>)
 800b4de:	5c9b      	ldrb	r3, [r3, r2]
 800b4e0:	2b01      	cmp	r3, #1
 800b4e2:	d125      	bne.n	800b530 <LoRaMacHandleMcpsRequest+0x98>
        {
            if( MacCtx.NvmCtx->AckTimeoutRetry == true )
 800b4e4:	4a24      	ldr	r2, [pc, #144]	; (800b578 <LoRaMacHandleMcpsRequest+0xe0>)
 800b4e6:	238e      	movs	r3, #142	; 0x8e
 800b4e8:	00db      	lsls	r3, r3, #3
 800b4ea:	58d2      	ldr	r2, [r2, r3]
 800b4ec:	2386      	movs	r3, #134	; 0x86
 800b4ee:	009b      	lsls	r3, r3, #2
 800b4f0:	5cd3      	ldrb	r3, [r2, r3]
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d019      	beq.n	800b52a <LoRaMacHandleMcpsRequest+0x92>
            {
                stopRetransmission = CheckRetransConfirmedUplink( );
 800b4f6:	1dfc      	adds	r4, r7, #7
 800b4f8:	f002 fb04 	bl	800db04 <CheckRetransConfirmedUplink>
 800b4fc:	0003      	movs	r3, r0
 800b4fe:	7023      	strb	r3, [r4, #0]

                if( MacCtx.NvmCtx->Version.Fields.Minor == 0 )
 800b500:	4a1d      	ldr	r2, [pc, #116]	; (800b578 <LoRaMacHandleMcpsRequest+0xe0>)
 800b502:	238e      	movs	r3, #142	; 0x8e
 800b504:	00db      	lsls	r3, r3, #3
 800b506:	58d3      	ldr	r3, [r2, r3]
 800b508:	4a1e      	ldr	r2, [pc, #120]	; (800b584 <LoRaMacHandleMcpsRequest+0xec>)
 800b50a:	5c9b      	ldrb	r3, [r3, r2]
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d10f      	bne.n	800b530 <LoRaMacHandleMcpsRequest+0x98>
                {
                    if( stopRetransmission == false )
 800b510:	1dfb      	adds	r3, r7, #7
 800b512:	781b      	ldrb	r3, [r3, #0]
 800b514:	2201      	movs	r2, #1
 800b516:	4053      	eors	r3, r2
 800b518:	b2db      	uxtb	r3, r3
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d002      	beq.n	800b524 <LoRaMacHandleMcpsRequest+0x8c>
                    {
                        AckTimeoutRetriesProcess( );
 800b51e:	f002 fb7b 	bl	800dc18 <AckTimeoutRetriesProcess>
 800b522:	e005      	b.n	800b530 <LoRaMacHandleMcpsRequest+0x98>
                    }
                    else
                    {
                        AckTimeoutRetriesFinalize( );
 800b524:	f002 fbdc 	bl	800dce0 <AckTimeoutRetriesFinalize>
 800b528:	e002      	b.n	800b530 <LoRaMacHandleMcpsRequest+0x98>
                    }
                }
            }
            else
            {
                waitForRetransmission = true;
 800b52a:	1dbb      	adds	r3, r7, #6
 800b52c:	2201      	movs	r2, #1
 800b52e:	701a      	strb	r2, [r3, #0]
            }
        }

        if( stopRetransmission == true )
 800b530:	1dfb      	adds	r3, r7, #7
 800b532:	781b      	ldrb	r3, [r3, #0]
 800b534:	2b00      	cmp	r3, #0
 800b536:	d002      	beq.n	800b53e <LoRaMacHandleMcpsRequest+0xa6>
        {// Stop retransmission
            StopRetransmission( );
 800b538:	f002 fb12 	bl	800db60 <StopRetransmission>
            MacCtx.NvmCtx->AckTimeoutRetry = false;
            // Sends the same frame again
            OnTxDelayedTimerEvent( NULL );
        }
    }
}
 800b53c:	e017      	b.n	800b56e <LoRaMacHandleMcpsRequest+0xd6>
        else if( waitForRetransmission == false )
 800b53e:	1dbb      	adds	r3, r7, #6
 800b540:	781b      	ldrb	r3, [r3, #0]
 800b542:	2201      	movs	r2, #1
 800b544:	4053      	eors	r3, r2
 800b546:	b2db      	uxtb	r3, r3
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d010      	beq.n	800b56e <LoRaMacHandleMcpsRequest+0xd6>
            MacCtx.MacFlags.Bits.MacDone = 0;
 800b54c:	4b0a      	ldr	r3, [pc, #40]	; (800b578 <LoRaMacHandleMcpsRequest+0xe0>)
 800b54e:	4a0b      	ldr	r2, [pc, #44]	; (800b57c <LoRaMacHandleMcpsRequest+0xe4>)
 800b550:	5c99      	ldrb	r1, [r3, r2]
 800b552:	2010      	movs	r0, #16
 800b554:	4381      	bics	r1, r0
 800b556:	5499      	strb	r1, [r3, r2]
            MacCtx.NvmCtx->AckTimeoutRetry = false;
 800b558:	4a07      	ldr	r2, [pc, #28]	; (800b578 <LoRaMacHandleMcpsRequest+0xe0>)
 800b55a:	238e      	movs	r3, #142	; 0x8e
 800b55c:	00db      	lsls	r3, r3, #3
 800b55e:	58d2      	ldr	r2, [r2, r3]
 800b560:	2386      	movs	r3, #134	; 0x86
 800b562:	009b      	lsls	r3, r3, #2
 800b564:	2100      	movs	r1, #0
 800b566:	54d1      	strb	r1, [r2, r3]
            OnTxDelayedTimerEvent( NULL );
 800b568:	2000      	movs	r0, #0
 800b56a:	f000 f90b 	bl	800b784 <OnTxDelayedTimerEvent>
}
 800b56e:	46c0      	nop			; (mov r8, r8)
 800b570:	46bd      	mov	sp, r7
 800b572:	b003      	add	sp, #12
 800b574:	bd90      	pop	{r4, r7, pc}
 800b576:	46c0      	nop			; (mov r8, r8)
 800b578:	2000070c 	.word	0x2000070c
 800b57c:	0000046d 	.word	0x0000046d
 800b580:	0000042c 	.word	0x0000042c
 800b584:	00000222 	.word	0x00000222

0800b588 <LoRaMacHandleJoinRequest>:

static void LoRaMacHandleJoinRequest( void )
{
 800b588:	b580      	push	{r7, lr}
 800b58a:	af00      	add	r7, sp, #0
    // Handle join request
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) && ( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true ) )
 800b58c:	4b14      	ldr	r3, [pc, #80]	; (800b5e0 <LoRaMacHandleJoinRequest+0x58>)
 800b58e:	4a15      	ldr	r2, [pc, #84]	; (800b5e4 <LoRaMacHandleJoinRequest+0x5c>)
 800b590:	5c9b      	ldrb	r3, [r3, r2]
 800b592:	2204      	movs	r2, #4
 800b594:	4013      	ands	r3, r2
 800b596:	b2db      	uxtb	r3, r3
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d01e      	beq.n	800b5da <LoRaMacHandleJoinRequest+0x52>
 800b59c:	2000      	movs	r0, #0
 800b59e:	f005 f819 	bl	80105d4 <LoRaMacConfirmQueueIsCmdActive>
 800b5a2:	1e03      	subs	r3, r0, #0
 800b5a4:	d019      	beq.n	800b5da <LoRaMacHandleJoinRequest+0x52>
    {
        if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 800b5a6:	2000      	movs	r0, #0
 800b5a8:	f004 ffb2 	bl	8010510 <LoRaMacConfirmQueueGetStatus>
 800b5ac:	1e03      	subs	r3, r0, #0
 800b5ae:	d109      	bne.n	800b5c4 <LoRaMacHandleJoinRequest+0x3c>
        {// Node joined successfully
            LoRaMacResetFCnts( );
 800b5b0:	f006 feb8 	bl	8012324 <LoRaMacResetFCnts>
            MacCtx.NvmCtx->ChannelsNbTransCounter = 0;
 800b5b4:	4a0a      	ldr	r2, [pc, #40]	; (800b5e0 <LoRaMacHandleJoinRequest+0x58>)
 800b5b6:	238e      	movs	r3, #142	; 0x8e
 800b5b8:	00db      	lsls	r3, r3, #3
 800b5ba:	58d2      	ldr	r2, [r2, r3]
 800b5bc:	2388      	movs	r3, #136	; 0x88
 800b5be:	005b      	lsls	r3, r3, #1
 800b5c0:	2100      	movs	r1, #0
 800b5c2:	54d1      	strb	r1, [r2, r3]
        }
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800b5c4:	4a06      	ldr	r2, [pc, #24]	; (800b5e0 <LoRaMacHandleJoinRequest+0x58>)
 800b5c6:	23d5      	movs	r3, #213	; 0xd5
 800b5c8:	009b      	lsls	r3, r3, #2
 800b5ca:	58d3      	ldr	r3, [r2, r3]
 800b5cc:	2202      	movs	r2, #2
 800b5ce:	4393      	bics	r3, r2
 800b5d0:	0019      	movs	r1, r3
 800b5d2:	4a03      	ldr	r2, [pc, #12]	; (800b5e0 <LoRaMacHandleJoinRequest+0x58>)
 800b5d4:	23d5      	movs	r3, #213	; 0xd5
 800b5d6:	009b      	lsls	r3, r3, #2
 800b5d8:	50d1      	str	r1, [r2, r3]
    }
}
 800b5da:	46c0      	nop			; (mov r8, r8)
 800b5dc:	46bd      	mov	sp, r7
 800b5de:	bd80      	pop	{r7, pc}
 800b5e0:	2000070c 	.word	0x2000070c
 800b5e4:	0000046d 	.word	0x0000046d

0800b5e8 <LoRaMacCheckForTxTimeout>:

static uint8_t LoRaMacCheckForTxTimeout( void )
{
 800b5e8:	b580      	push	{r7, lr}
 800b5ea:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueGetStatusCmn( ) == LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT ) ||
 800b5ec:	f004 ffe8 	bl	80105c0 <LoRaMacConfirmQueueGetStatusCmn>
 800b5f0:	0003      	movs	r3, r0
 800b5f2:	2b02      	cmp	r3, #2
 800b5f4:	d004      	beq.n	800b600 <LoRaMacCheckForTxTimeout+0x18>
        ( MacCtx.McpsConfirm.Status == LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT ) )
 800b5f6:	4b14      	ldr	r3, [pc, #80]	; (800b648 <LoRaMacCheckForTxTimeout+0x60>)
 800b5f8:	4a14      	ldr	r2, [pc, #80]	; (800b64c <LoRaMacCheckForTxTimeout+0x64>)
 800b5fa:	5c9b      	ldrb	r3, [r3, r2]
    if( ( LoRaMacConfirmQueueGetStatusCmn( ) == LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT ) ||
 800b5fc:	2b02      	cmp	r3, #2
 800b5fe:	d11e      	bne.n	800b63e <LoRaMacCheckForTxTimeout+0x56>
    {
        // Stop transmit cycle due to tx timeout
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800b600:	4a11      	ldr	r2, [pc, #68]	; (800b648 <LoRaMacCheckForTxTimeout+0x60>)
 800b602:	23d5      	movs	r3, #213	; 0xd5
 800b604:	009b      	lsls	r3, r3, #2
 800b606:	58d3      	ldr	r3, [r2, r3]
 800b608:	2202      	movs	r2, #2
 800b60a:	4393      	bics	r3, r2
 800b60c:	0019      	movs	r1, r3
 800b60e:	4a0e      	ldr	r2, [pc, #56]	; (800b648 <LoRaMacCheckForTxTimeout+0x60>)
 800b610:	23d5      	movs	r3, #213	; 0xd5
 800b612:	009b      	lsls	r3, r3, #2
 800b614:	50d1      	str	r1, [r2, r3]
        MacCtx.McpsConfirm.NbRetries = MacCtx.NvmCtx->AckTimeoutRetriesCounter;
 800b616:	4a0c      	ldr	r2, [pc, #48]	; (800b648 <LoRaMacCheckForTxTimeout+0x60>)
 800b618:	238e      	movs	r3, #142	; 0x8e
 800b61a:	00db      	lsls	r3, r3, #3
 800b61c:	58d3      	ldr	r3, [r2, r3]
 800b61e:	4a0c      	ldr	r2, [pc, #48]	; (800b650 <LoRaMacCheckForTxTimeout+0x68>)
 800b620:	5c99      	ldrb	r1, [r3, r2]
 800b622:	4b09      	ldr	r3, [pc, #36]	; (800b648 <LoRaMacCheckForTxTimeout+0x60>)
 800b624:	4a0b      	ldr	r2, [pc, #44]	; (800b654 <LoRaMacCheckForTxTimeout+0x6c>)
 800b626:	5499      	strb	r1, [r3, r2]
        MacCtx.McpsConfirm.AckReceived = false;
 800b628:	4a07      	ldr	r2, [pc, #28]	; (800b648 <LoRaMacCheckForTxTimeout+0x60>)
 800b62a:	2386      	movs	r3, #134	; 0x86
 800b62c:	00db      	lsls	r3, r3, #3
 800b62e:	2100      	movs	r1, #0
 800b630:	54d1      	strb	r1, [r2, r3]
        MacCtx.McpsConfirm.TxTimeOnAir = 0;
 800b632:	4b05      	ldr	r3, [pc, #20]	; (800b648 <LoRaMacCheckForTxTimeout+0x60>)
 800b634:	4a08      	ldr	r2, [pc, #32]	; (800b658 <LoRaMacCheckForTxTimeout+0x70>)
 800b636:	2100      	movs	r1, #0
 800b638:	5099      	str	r1, [r3, r2]
        return 0x01;
 800b63a:	2301      	movs	r3, #1
 800b63c:	e000      	b.n	800b640 <LoRaMacCheckForTxTimeout+0x58>
    }
    return 0x00;
 800b63e:	2300      	movs	r3, #0
}
 800b640:	0018      	movs	r0, r3
 800b642:	46bd      	mov	sp, r7
 800b644:	bd80      	pop	{r7, pc}
 800b646:	46c0      	nop			; (mov r8, r8)
 800b648:	2000070c 	.word	0x2000070c
 800b64c:	0000042d 	.word	0x0000042d
 800b650:	00000217 	.word	0x00000217
 800b654:	00000431 	.word	0x00000431
 800b658:	00000434 	.word	0x00000434

0800b65c <LoRaMacCheckForBeaconAcquisition>:

static uint8_t LoRaMacCheckForBeaconAcquisition( void )
{
 800b65c:	b580      	push	{r7, lr}
 800b65e:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800b660:	200b      	movs	r0, #11
 800b662:	f004 ffb7 	bl	80105d4 <LoRaMacConfirmQueueIsCmdActive>
 800b666:	1e03      	subs	r3, r0, #0
 800b668:	d01c      	beq.n	800b6a4 <LoRaMacCheckForBeaconAcquisition+0x48>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 800b66a:	4b10      	ldr	r3, [pc, #64]	; (800b6ac <LoRaMacCheckForBeaconAcquisition+0x50>)
 800b66c:	4a10      	ldr	r2, [pc, #64]	; (800b6b0 <LoRaMacCheckForBeaconAcquisition+0x54>)
 800b66e:	5c9b      	ldrb	r3, [r3, r2]
 800b670:	2201      	movs	r2, #1
 800b672:	4013      	ands	r3, r2
 800b674:	b2db      	uxtb	r3, r3
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800b676:	2b00      	cmp	r3, #0
 800b678:	d114      	bne.n	800b6a4 <LoRaMacCheckForBeaconAcquisition+0x48>
    {
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800b67a:	4b0c      	ldr	r3, [pc, #48]	; (800b6ac <LoRaMacCheckForBeaconAcquisition+0x50>)
 800b67c:	4a0c      	ldr	r2, [pc, #48]	; (800b6b0 <LoRaMacCheckForBeaconAcquisition+0x54>)
 800b67e:	5c9b      	ldrb	r3, [r3, r2]
 800b680:	2204      	movs	r2, #4
 800b682:	4013      	ands	r3, r2
 800b684:	b2db      	uxtb	r3, r3
 800b686:	2b00      	cmp	r3, #0
 800b688:	d00c      	beq.n	800b6a4 <LoRaMacCheckForBeaconAcquisition+0x48>
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800b68a:	4a08      	ldr	r2, [pc, #32]	; (800b6ac <LoRaMacCheckForBeaconAcquisition+0x50>)
 800b68c:	23d5      	movs	r3, #213	; 0xd5
 800b68e:	009b      	lsls	r3, r3, #2
 800b690:	58d3      	ldr	r3, [r2, r3]
 800b692:	2202      	movs	r2, #2
 800b694:	4393      	bics	r3, r2
 800b696:	0019      	movs	r1, r3
 800b698:	4a04      	ldr	r2, [pc, #16]	; (800b6ac <LoRaMacCheckForBeaconAcquisition+0x50>)
 800b69a:	23d5      	movs	r3, #213	; 0xd5
 800b69c:	009b      	lsls	r3, r3, #2
 800b69e:	50d1      	str	r1, [r2, r3]
            return 0x01;
 800b6a0:	2301      	movs	r3, #1
 800b6a2:	e000      	b.n	800b6a6 <LoRaMacCheckForBeaconAcquisition+0x4a>
        }
    }
    return 0x00;
 800b6a4:	2300      	movs	r3, #0
}
 800b6a6:	0018      	movs	r0, r3
 800b6a8:	46bd      	mov	sp, r7
 800b6aa:	bd80      	pop	{r7, pc}
 800b6ac:	2000070c 	.word	0x2000070c
 800b6b0:	0000046d 	.word	0x0000046d

0800b6b4 <LoRaMacCheckForRxAbort>:

static void LoRaMacCheckForRxAbort( void )
{
 800b6b4:	b580      	push	{r7, lr}
 800b6b6:	af00      	add	r7, sp, #0
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 800b6b8:	4a0f      	ldr	r2, [pc, #60]	; (800b6f8 <LoRaMacCheckForRxAbort+0x44>)
 800b6ba:	23d5      	movs	r3, #213	; 0xd5
 800b6bc:	009b      	lsls	r3, r3, #2
 800b6be:	58d3      	ldr	r3, [r2, r3]
 800b6c0:	2280      	movs	r2, #128	; 0x80
 800b6c2:	4013      	ands	r3, r2
 800b6c4:	d015      	beq.n	800b6f2 <LoRaMacCheckForRxAbort+0x3e>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 800b6c6:	4a0c      	ldr	r2, [pc, #48]	; (800b6f8 <LoRaMacCheckForRxAbort+0x44>)
 800b6c8:	23d5      	movs	r3, #213	; 0xd5
 800b6ca:	009b      	lsls	r3, r3, #2
 800b6cc:	58d3      	ldr	r3, [r2, r3]
 800b6ce:	2280      	movs	r2, #128	; 0x80
 800b6d0:	4393      	bics	r3, r2
 800b6d2:	0019      	movs	r1, r3
 800b6d4:	4a08      	ldr	r2, [pc, #32]	; (800b6f8 <LoRaMacCheckForRxAbort+0x44>)
 800b6d6:	23d5      	movs	r3, #213	; 0xd5
 800b6d8:	009b      	lsls	r3, r3, #2
 800b6da:	50d1      	str	r1, [r2, r3]
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800b6dc:	4a06      	ldr	r2, [pc, #24]	; (800b6f8 <LoRaMacCheckForRxAbort+0x44>)
 800b6de:	23d5      	movs	r3, #213	; 0xd5
 800b6e0:	009b      	lsls	r3, r3, #2
 800b6e2:	58d3      	ldr	r3, [r2, r3]
 800b6e4:	2202      	movs	r2, #2
 800b6e6:	4393      	bics	r3, r2
 800b6e8:	0019      	movs	r1, r3
 800b6ea:	4a03      	ldr	r2, [pc, #12]	; (800b6f8 <LoRaMacCheckForRxAbort+0x44>)
 800b6ec:	23d5      	movs	r3, #213	; 0xd5
 800b6ee:	009b      	lsls	r3, r3, #2
 800b6f0:	50d1      	str	r1, [r2, r3]
    }
}
 800b6f2:	46c0      	nop			; (mov r8, r8)
 800b6f4:	46bd      	mov	sp, r7
 800b6f6:	bd80      	pop	{r7, pc}
 800b6f8:	2000070c 	.word	0x2000070c

0800b6fc <LoRaMacProcess>:


void LoRaMacProcess( void )
{
 800b6fc:	b580      	push	{r7, lr}
 800b6fe:	b082      	sub	sp, #8
 800b700:	af00      	add	r7, sp, #0
    uint8_t noTx = false;
 800b702:	1dfb      	adds	r3, r7, #7
 800b704:	2200      	movs	r2, #0
 800b706:	701a      	strb	r2, [r3, #0]

    LoRaMacHandleIrqEvents( );
 800b708:	f7ff fd8a 	bl	800b220 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 800b70c:	f004 fb0f 	bl	800fd2e <LoRaMacClassBProcess>

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 800b710:	4b1a      	ldr	r3, [pc, #104]	; (800b77c <LoRaMacProcess+0x80>)
 800b712:	4a1b      	ldr	r2, [pc, #108]	; (800b780 <LoRaMacProcess+0x84>)
 800b714:	5c9b      	ldrb	r3, [r3, r2]
 800b716:	2210      	movs	r2, #16
 800b718:	4013      	ands	r3, r2
 800b71a:	b2db      	uxtb	r3, r3
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d027      	beq.n	800b770 <LoRaMacProcess+0x74>
    {
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 800b720:	2000      	movs	r0, #0
 800b722:	f7ff fdd9 	bl	800b2d8 <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 800b726:	f7ff ffc5 	bl	800b6b4 <LoRaMacCheckForRxAbort>

        // An error occurs during transmitting
        if( IsRequestPending( ) > 0 )
 800b72a:	f002 fb7b 	bl	800de24 <IsRequestPending>
 800b72e:	1e03      	subs	r3, r0, #0
 800b730:	d011      	beq.n	800b756 <LoRaMacProcess+0x5a>
        {
            noTx |= LoRaMacCheckForTxTimeout( );
 800b732:	f7ff ff59 	bl	800b5e8 <LoRaMacCheckForTxTimeout>
 800b736:	0003      	movs	r3, r0
 800b738:	0019      	movs	r1, r3
 800b73a:	1dfb      	adds	r3, r7, #7
 800b73c:	1dfa      	adds	r2, r7, #7
 800b73e:	7812      	ldrb	r2, [r2, #0]
 800b740:	430a      	orrs	r2, r1
 800b742:	701a      	strb	r2, [r3, #0]
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 800b744:	f7ff ff8a 	bl	800b65c <LoRaMacCheckForBeaconAcquisition>
 800b748:	0003      	movs	r3, r0
 800b74a:	0019      	movs	r1, r3
 800b74c:	1dfb      	adds	r3, r7, #7
 800b74e:	1dfa      	adds	r2, r7, #7
 800b750:	7812      	ldrb	r2, [r2, #0]
 800b752:	430a      	orrs	r2, r1
 800b754:	701a      	strb	r2, [r3, #0]
        }

        if( noTx == 0x00 )
 800b756:	1dfb      	adds	r3, r7, #7
 800b758:	781b      	ldrb	r3, [r3, #0]
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d103      	bne.n	800b766 <LoRaMacProcess+0x6a>
        {
            LoRaMacHandleJoinRequest( );
 800b75e:	f7ff ff13 	bl	800b588 <LoRaMacHandleJoinRequest>
            LoRaMacHandleMcpsRequest( );
 800b762:	f7ff fe99 	bl	800b498 <LoRaMacHandleMcpsRequest>
        }
        LoRaMacHandleRequestEvents( );
 800b766:	f7ff fdcb 	bl	800b300 <LoRaMacHandleRequestEvents>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800b76a:	2001      	movs	r0, #1
 800b76c:	f7ff fdb4 	bl	800b2d8 <LoRaMacEnableRequests>
    }
    LoRaMacHandleIndicationEvents( );
 800b770:	f7ff fe2c 	bl	800b3cc <LoRaMacHandleIndicationEvents>
}
 800b774:	46c0      	nop			; (mov r8, r8)
 800b776:	46bd      	mov	sp, r7
 800b778:	b002      	add	sp, #8
 800b77a:	bd80      	pop	{r7, pc}
 800b77c:	2000070c 	.word	0x2000070c
 800b780:	0000046d 	.word	0x0000046d

0800b784 <OnTxDelayedTimerEvent>:

static void OnTxDelayedTimerEvent( void* context )
{
 800b784:	b580      	push	{r7, lr}
 800b786:	b082      	sub	sp, #8
 800b788:	af00      	add	r7, sp, #0
 800b78a:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.TxDelayedTimer );
 800b78c:	4b1b      	ldr	r3, [pc, #108]	; (800b7fc <OnTxDelayedTimerEvent+0x78>)
 800b78e:	0018      	movs	r0, r3
 800b790:	f009 ff16 	bl	80155c0 <TimerStop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800b794:	4a1a      	ldr	r2, [pc, #104]	; (800b800 <OnTxDelayedTimerEvent+0x7c>)
 800b796:	23d5      	movs	r3, #213	; 0xd5
 800b798:	009b      	lsls	r3, r3, #2
 800b79a:	58d3      	ldr	r3, [r2, r3]
 800b79c:	2220      	movs	r2, #32
 800b79e:	4393      	bics	r3, r2
 800b7a0:	0019      	movs	r1, r3
 800b7a2:	4a17      	ldr	r2, [pc, #92]	; (800b800 <OnTxDelayedTimerEvent+0x7c>)
 800b7a4:	23d5      	movs	r3, #213	; 0xd5
 800b7a6:	009b      	lsls	r3, r3, #2
 800b7a8:	50d1      	str	r1, [r2, r3]

    // Schedule frame, allow delayed frame transmissions
    switch( ScheduleTx( true ) )
 800b7aa:	2001      	movs	r0, #1
 800b7ac:	f001 fa4a 	bl	800cc44 <ScheduleTx>
 800b7b0:	1e03      	subs	r3, r0, #0
 800b7b2:	d01e      	beq.n	800b7f2 <OnTxDelayedTimerEvent+0x6e>
 800b7b4:	2b0b      	cmp	r3, #11
 800b7b6:	d01c      	beq.n	800b7f2 <OnTxDelayedTimerEvent+0x6e>
            break;
        }
        default:
        {
            // Stop retransmission attempt
            MacCtx.McpsConfirm.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800b7b8:	4a11      	ldr	r2, [pc, #68]	; (800b800 <OnTxDelayedTimerEvent+0x7c>)
 800b7ba:	238e      	movs	r3, #142	; 0x8e
 800b7bc:	00db      	lsls	r3, r3, #3
 800b7be:	58d3      	ldr	r3, [r2, r3]
 800b7c0:	22d5      	movs	r2, #213	; 0xd5
 800b7c2:	569b      	ldrsb	r3, [r3, r2]
 800b7c4:	b2d9      	uxtb	r1, r3
 800b7c6:	4b0e      	ldr	r3, [pc, #56]	; (800b800 <OnTxDelayedTimerEvent+0x7c>)
 800b7c8:	4a0e      	ldr	r2, [pc, #56]	; (800b804 <OnTxDelayedTimerEvent+0x80>)
 800b7ca:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsConfirm.NbRetries = MacCtx.NvmCtx->AckTimeoutRetriesCounter;
 800b7cc:	4a0c      	ldr	r2, [pc, #48]	; (800b800 <OnTxDelayedTimerEvent+0x7c>)
 800b7ce:	238e      	movs	r3, #142	; 0x8e
 800b7d0:	00db      	lsls	r3, r3, #3
 800b7d2:	58d3      	ldr	r3, [r2, r3]
 800b7d4:	4a0c      	ldr	r2, [pc, #48]	; (800b808 <OnTxDelayedTimerEvent+0x84>)
 800b7d6:	5c99      	ldrb	r1, [r3, r2]
 800b7d8:	4b09      	ldr	r3, [pc, #36]	; (800b800 <OnTxDelayedTimerEvent+0x7c>)
 800b7da:	4a0c      	ldr	r2, [pc, #48]	; (800b80c <OnTxDelayedTimerEvent+0x88>)
 800b7dc:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 800b7de:	4b08      	ldr	r3, [pc, #32]	; (800b800 <OnTxDelayedTimerEvent+0x7c>)
 800b7e0:	4a0b      	ldr	r2, [pc, #44]	; (800b810 <OnTxDelayedTimerEvent+0x8c>)
 800b7e2:	2109      	movs	r1, #9
 800b7e4:	5499      	strb	r1, [r3, r2]
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 800b7e6:	2009      	movs	r0, #9
 800b7e8:	f004 feb8 	bl	801055c <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 800b7ec:	f002 f9b8 	bl	800db60 <StopRetransmission>
            break;
 800b7f0:	e000      	b.n	800b7f4 <OnTxDelayedTimerEvent+0x70>
            break;
 800b7f2:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 800b7f4:	46c0      	nop			; (mov r8, r8)
 800b7f6:	46bd      	mov	sp, r7
 800b7f8:	b002      	add	sp, #8
 800b7fa:	bd80      	pop	{r7, pc}
 800b7fc:	20000a88 	.word	0x20000a88
 800b800:	2000070c 	.word	0x2000070c
 800b804:	0000042e 	.word	0x0000042e
 800b808:	00000217 	.word	0x00000217
 800b80c:	00000431 	.word	0x00000431
 800b810:	0000042d 	.word	0x0000042d

0800b814 <OnRxWindow1TimerEvent>:

static void OnRxWindow1TimerEvent( void* context )
{
 800b814:	b580      	push	{r7, lr}
 800b816:	b082      	sub	sp, #8
 800b818:	af00      	add	r7, sp, #0
 800b81a:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.RxWindowTimer1 );
 800b81c:	4b30      	ldr	r3, [pc, #192]	; (800b8e0 <OnRxWindow1TimerEvent+0xcc>)
 800b81e:	0018      	movs	r0, r3
 800b820:	f009 fece 	bl	80155c0 <TimerStop>
    MacCtx.RxSlot = RX_SLOT_WIN_1;
 800b824:	4b2f      	ldr	r3, [pc, #188]	; (800b8e4 <OnRxWindow1TimerEvent+0xd0>)
 800b826:	4a30      	ldr	r2, [pc, #192]	; (800b8e8 <OnRxWindow1TimerEvent+0xd4>)
 800b828:	2100      	movs	r1, #0
 800b82a:	5499      	strb	r1, [r3, r2]

    MacCtx.RxWindow1Config.Channel = MacCtx.NvmCtx->Channel;
 800b82c:	4a2d      	ldr	r2, [pc, #180]	; (800b8e4 <OnRxWindow1TimerEvent+0xd0>)
 800b82e:	238e      	movs	r3, #142	; 0x8e
 800b830:	00db      	lsls	r3, r3, #3
 800b832:	58d2      	ldr	r2, [r2, r3]
 800b834:	2314      	movs	r3, #20
 800b836:	33ff      	adds	r3, #255	; 0xff
 800b838:	5cd1      	ldrb	r1, [r2, r3]
 800b83a:	4a2a      	ldr	r2, [pc, #168]	; (800b8e4 <OnRxWindow1TimerEvent+0xd0>)
 800b83c:	23f3      	movs	r3, #243	; 0xf3
 800b83e:	009b      	lsls	r3, r3, #2
 800b840:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindow1Config.DrOffset = MacCtx.NvmCtx->MacParams.Rx1DrOffset;
 800b842:	4a28      	ldr	r2, [pc, #160]	; (800b8e4 <OnRxWindow1TimerEvent+0xd0>)
 800b844:	238e      	movs	r3, #142	; 0x8e
 800b846:	00db      	lsls	r3, r3, #3
 800b848:	58d3      	ldr	r3, [r2, r3]
 800b84a:	22f5      	movs	r2, #245	; 0xf5
 800b84c:	5c9b      	ldrb	r3, [r3, r2]
 800b84e:	b259      	sxtb	r1, r3
 800b850:	4b24      	ldr	r3, [pc, #144]	; (800b8e4 <OnRxWindow1TimerEvent+0xd0>)
 800b852:	4a26      	ldr	r2, [pc, #152]	; (800b8ec <OnRxWindow1TimerEvent+0xd8>)
 800b854:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow1Config.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800b856:	4a23      	ldr	r2, [pc, #140]	; (800b8e4 <OnRxWindow1TimerEvent+0xd0>)
 800b858:	238e      	movs	r3, #142	; 0x8e
 800b85a:	00db      	lsls	r3, r3, #3
 800b85c:	58d2      	ldr	r2, [r2, r3]
 800b85e:	2302      	movs	r3, #2
 800b860:	33ff      	adds	r3, #255	; 0xff
 800b862:	5cd1      	ldrb	r1, [r2, r3]
 800b864:	4a1f      	ldr	r2, [pc, #124]	; (800b8e4 <OnRxWindow1TimerEvent+0xd0>)
 800b866:	23f7      	movs	r3, #247	; 0xf7
 800b868:	009b      	lsls	r3, r3, #2
 800b86a:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindow1Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 800b86c:	4a1d      	ldr	r2, [pc, #116]	; (800b8e4 <OnRxWindow1TimerEvent+0xd0>)
 800b86e:	238e      	movs	r3, #142	; 0x8e
 800b870:	00db      	lsls	r3, r3, #3
 800b872:	58d2      	ldr	r2, [r2, r3]
 800b874:	2316      	movs	r3, #22
 800b876:	33ff      	adds	r3, #255	; 0xff
 800b878:	5cd1      	ldrb	r1, [r2, r3]
 800b87a:	4b1a      	ldr	r3, [pc, #104]	; (800b8e4 <OnRxWindow1TimerEvent+0xd0>)
 800b87c:	4a1c      	ldr	r2, [pc, #112]	; (800b8f0 <OnRxWindow1TimerEvent+0xdc>)
 800b87e:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow1Config.RxContinuous = false;
 800b880:	4b18      	ldr	r3, [pc, #96]	; (800b8e4 <OnRxWindow1TimerEvent+0xd0>)
 800b882:	4a1c      	ldr	r2, [pc, #112]	; (800b8f4 <OnRxWindow1TimerEvent+0xe0>)
 800b884:	2100      	movs	r1, #0
 800b886:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow1Config.RxSlot = MacCtx.RxSlot;
 800b888:	4b16      	ldr	r3, [pc, #88]	; (800b8e4 <OnRxWindow1TimerEvent+0xd0>)
 800b88a:	4a17      	ldr	r2, [pc, #92]	; (800b8e8 <OnRxWindow1TimerEvent+0xd4>)
 800b88c:	5c99      	ldrb	r1, [r3, r2]
 800b88e:	4b15      	ldr	r3, [pc, #84]	; (800b8e4 <OnRxWindow1TimerEvent+0xd0>)
 800b890:	4a19      	ldr	r2, [pc, #100]	; (800b8f8 <OnRxWindow1TimerEvent+0xe4>)
 800b892:	5499      	strb	r1, [r3, r2]

    if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 800b894:	4a13      	ldr	r2, [pc, #76]	; (800b8e4 <OnRxWindow1TimerEvent+0xd0>)
 800b896:	238e      	movs	r3, #142	; 0x8e
 800b898:	00db      	lsls	r3, r3, #3
 800b89a:	58d3      	ldr	r3, [r2, r3]
 800b89c:	22c8      	movs	r2, #200	; 0xc8
 800b89e:	5c9b      	ldrb	r3, [r3, r2]
 800b8a0:	2b02      	cmp	r3, #2
 800b8a2:	d102      	bne.n	800b8aa <OnRxWindow1TimerEvent+0x96>
    {
        Radio.Standby( );
 800b8a4:	4b15      	ldr	r3, [pc, #84]	; (800b8fc <OnRxWindow1TimerEvent+0xe8>)
 800b8a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8a8:	4798      	blx	r3
    }

    RegionRxConfig( MacCtx.NvmCtx->Region, &MacCtx.RxWindow1Config, ( int8_t* ) &MacCtx.McpsIndication.RxDatarate );
 800b8aa:	4a0e      	ldr	r2, [pc, #56]	; (800b8e4 <OnRxWindow1TimerEvent+0xd0>)
 800b8ac:	238e      	movs	r3, #142	; 0x8e
 800b8ae:	00db      	lsls	r3, r3, #3
 800b8b0:	58d3      	ldr	r3, [r2, r3]
 800b8b2:	781b      	ldrb	r3, [r3, #0]
 800b8b4:	4a12      	ldr	r2, [pc, #72]	; (800b900 <OnRxWindow1TimerEvent+0xec>)
 800b8b6:	4913      	ldr	r1, [pc, #76]	; (800b904 <OnRxWindow1TimerEvent+0xf0>)
 800b8b8:	0018      	movs	r0, r3
 800b8ba:	f007 fa27 	bl	8012d0c <RegionRxConfig>
    RxWindowSetup( MacCtx.RxWindow1Config.RxContinuous, MacCtx.NvmCtx->MacParams.MaxRxWindow );
 800b8be:	4b09      	ldr	r3, [pc, #36]	; (800b8e4 <OnRxWindow1TimerEvent+0xd0>)
 800b8c0:	4a0c      	ldr	r2, [pc, #48]	; (800b8f4 <OnRxWindow1TimerEvent+0xe0>)
 800b8c2:	5c98      	ldrb	r0, [r3, r2]
 800b8c4:	4a07      	ldr	r2, [pc, #28]	; (800b8e4 <OnRxWindow1TimerEvent+0xd0>)
 800b8c6:	238e      	movs	r3, #142	; 0x8e
 800b8c8:	00db      	lsls	r3, r3, #3
 800b8ca:	58d3      	ldr	r3, [r2, r3]
 800b8cc:	22e0      	movs	r2, #224	; 0xe0
 800b8ce:	589b      	ldr	r3, [r3, r2]
 800b8d0:	0019      	movs	r1, r3
 800b8d2:	f000 f901 	bl	800bad8 <RxWindowSetup>
}
 800b8d6:	46c0      	nop			; (mov r8, r8)
 800b8d8:	46bd      	mov	sp, r7
 800b8da:	b002      	add	sp, #8
 800b8dc:	bd80      	pop	{r7, pc}
 800b8de:	46c0      	nop			; (mov r8, r8)
 800b8e0:	20000aa0 	.word	0x20000aa0
 800b8e4:	2000070c 	.word	0x2000070c
 800b8e8:	0000046c 	.word	0x0000046c
 800b8ec:	000003cf 	.word	0x000003cf
 800b8f0:	000003dd 	.word	0x000003dd
 800b8f4:	000003de 	.word	0x000003de
 800b8f8:	000003df 	.word	0x000003df
 800b8fc:	08020c58 	.word	0x08020c58
 800b900:	20000b20 	.word	0x20000b20
 800b904:	20000ad8 	.word	0x20000ad8

0800b908 <OnRxWindow2TimerEvent>:

static void OnRxWindow2TimerEvent( void* context )
{
 800b908:	b580      	push	{r7, lr}
 800b90a:	b082      	sub	sp, #8
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.RxWindowTimer2 );
 800b910:	4b31      	ldr	r3, [pc, #196]	; (800b9d8 <OnRxWindow2TimerEvent+0xd0>)
 800b912:	0018      	movs	r0, r3
 800b914:	f009 fe54 	bl	80155c0 <TimerStop>

    MacCtx.RxWindow2Config.Channel = MacCtx.NvmCtx->Channel;
 800b918:	4a30      	ldr	r2, [pc, #192]	; (800b9dc <OnRxWindow2TimerEvent+0xd4>)
 800b91a:	238e      	movs	r3, #142	; 0x8e
 800b91c:	00db      	lsls	r3, r3, #3
 800b91e:	58d2      	ldr	r2, [r2, r3]
 800b920:	2314      	movs	r3, #20
 800b922:	33ff      	adds	r3, #255	; 0xff
 800b924:	5cd1      	ldrb	r1, [r2, r3]
 800b926:	4a2d      	ldr	r2, [pc, #180]	; (800b9dc <OnRxWindow2TimerEvent+0xd4>)
 800b928:	23f8      	movs	r3, #248	; 0xf8
 800b92a:	009b      	lsls	r3, r3, #2
 800b92c:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindow2Config.Frequency = MacCtx.NvmCtx->MacParams.Rx2Channel.Frequency;
 800b92e:	4a2b      	ldr	r2, [pc, #172]	; (800b9dc <OnRxWindow2TimerEvent+0xd4>)
 800b930:	238e      	movs	r3, #142	; 0x8e
 800b932:	00db      	lsls	r3, r3, #3
 800b934:	58d3      	ldr	r3, [r2, r3]
 800b936:	22f8      	movs	r2, #248	; 0xf8
 800b938:	5899      	ldr	r1, [r3, r2]
 800b93a:	4a28      	ldr	r2, [pc, #160]	; (800b9dc <OnRxWindow2TimerEvent+0xd4>)
 800b93c:	23f9      	movs	r3, #249	; 0xf9
 800b93e:	009b      	lsls	r3, r3, #2
 800b940:	50d1      	str	r1, [r2, r3]
    MacCtx.RxWindow2Config.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800b942:	4a26      	ldr	r2, [pc, #152]	; (800b9dc <OnRxWindow2TimerEvent+0xd4>)
 800b944:	238e      	movs	r3, #142	; 0x8e
 800b946:	00db      	lsls	r3, r3, #3
 800b948:	58d2      	ldr	r2, [r2, r3]
 800b94a:	2302      	movs	r3, #2
 800b94c:	33ff      	adds	r3, #255	; 0xff
 800b94e:	5cd1      	ldrb	r1, [r2, r3]
 800b950:	4a22      	ldr	r2, [pc, #136]	; (800b9dc <OnRxWindow2TimerEvent+0xd4>)
 800b952:	23fc      	movs	r3, #252	; 0xfc
 800b954:	009b      	lsls	r3, r3, #2
 800b956:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindow2Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 800b958:	4a20      	ldr	r2, [pc, #128]	; (800b9dc <OnRxWindow2TimerEvent+0xd4>)
 800b95a:	238e      	movs	r3, #142	; 0x8e
 800b95c:	00db      	lsls	r3, r3, #3
 800b95e:	58d2      	ldr	r2, [r2, r3]
 800b960:	2316      	movs	r3, #22
 800b962:	33ff      	adds	r3, #255	; 0xff
 800b964:	5cd1      	ldrb	r1, [r2, r3]
 800b966:	4b1d      	ldr	r3, [pc, #116]	; (800b9dc <OnRxWindow2TimerEvent+0xd4>)
 800b968:	4a1d      	ldr	r2, [pc, #116]	; (800b9e0 <OnRxWindow2TimerEvent+0xd8>)
 800b96a:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800b96c:	4b1b      	ldr	r3, [pc, #108]	; (800b9dc <OnRxWindow2TimerEvent+0xd4>)
 800b96e:	4a1d      	ldr	r2, [pc, #116]	; (800b9e4 <OnRxWindow2TimerEvent+0xdc>)
 800b970:	2101      	movs	r1, #1
 800b972:	5499      	strb	r1, [r3, r2]

    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 800b974:	4a19      	ldr	r2, [pc, #100]	; (800b9dc <OnRxWindow2TimerEvent+0xd4>)
 800b976:	238e      	movs	r3, #142	; 0x8e
 800b978:	00db      	lsls	r3, r3, #3
 800b97a:	58d3      	ldr	r3, [r2, r3]
 800b97c:	22c8      	movs	r2, #200	; 0xc8
 800b97e:	5c9b      	ldrb	r3, [r3, r2]
 800b980:	2b02      	cmp	r3, #2
 800b982:	d004      	beq.n	800b98e <OnRxWindow2TimerEvent+0x86>
    {
        MacCtx.RxWindow2Config.RxContinuous = false;
 800b984:	4b15      	ldr	r3, [pc, #84]	; (800b9dc <OnRxWindow2TimerEvent+0xd4>)
 800b986:	4a18      	ldr	r2, [pc, #96]	; (800b9e8 <OnRxWindow2TimerEvent+0xe0>)
 800b988:	2100      	movs	r1, #0
 800b98a:	5499      	strb	r1, [r3, r2]
 800b98c:	e003      	b.n	800b996 <OnRxWindow2TimerEvent+0x8e>
    }
    else
    {
        // Setup continuous listening for class c
        MacCtx.RxWindow2Config.RxContinuous = true;
 800b98e:	4b13      	ldr	r3, [pc, #76]	; (800b9dc <OnRxWindow2TimerEvent+0xd4>)
 800b990:	4a15      	ldr	r2, [pc, #84]	; (800b9e8 <OnRxWindow2TimerEvent+0xe0>)
 800b992:	2101      	movs	r1, #1
 800b994:	5499      	strb	r1, [r3, r2]
    }

    if( RegionRxConfig( MacCtx.NvmCtx->Region, &MacCtx.RxWindow2Config, ( int8_t* ) &MacCtx.McpsIndication.RxDatarate ) == true )
 800b996:	4a11      	ldr	r2, [pc, #68]	; (800b9dc <OnRxWindow2TimerEvent+0xd4>)
 800b998:	238e      	movs	r3, #142	; 0x8e
 800b99a:	00db      	lsls	r3, r3, #3
 800b99c:	58d3      	ldr	r3, [r2, r3]
 800b99e:	781b      	ldrb	r3, [r3, #0]
 800b9a0:	4a12      	ldr	r2, [pc, #72]	; (800b9ec <OnRxWindow2TimerEvent+0xe4>)
 800b9a2:	4913      	ldr	r1, [pc, #76]	; (800b9f0 <OnRxWindow2TimerEvent+0xe8>)
 800b9a4:	0018      	movs	r0, r3
 800b9a6:	f007 f9b1 	bl	8012d0c <RegionRxConfig>
 800b9aa:	1e03      	subs	r3, r0, #0
 800b9ac:	d00f      	beq.n	800b9ce <OnRxWindow2TimerEvent+0xc6>
    {
        RxWindowSetup( MacCtx.RxWindow2Config.RxContinuous, MacCtx.NvmCtx->MacParams.MaxRxWindow );
 800b9ae:	4b0b      	ldr	r3, [pc, #44]	; (800b9dc <OnRxWindow2TimerEvent+0xd4>)
 800b9b0:	4a0d      	ldr	r2, [pc, #52]	; (800b9e8 <OnRxWindow2TimerEvent+0xe0>)
 800b9b2:	5c98      	ldrb	r0, [r3, r2]
 800b9b4:	4a09      	ldr	r2, [pc, #36]	; (800b9dc <OnRxWindow2TimerEvent+0xd4>)
 800b9b6:	238e      	movs	r3, #142	; 0x8e
 800b9b8:	00db      	lsls	r3, r3, #3
 800b9ba:	58d3      	ldr	r3, [r2, r3]
 800b9bc:	22e0      	movs	r2, #224	; 0xe0
 800b9be:	589b      	ldr	r3, [r3, r2]
 800b9c0:	0019      	movs	r1, r3
 800b9c2:	f000 f889 	bl	800bad8 <RxWindowSetup>
        MacCtx.RxSlot = RX_SLOT_WIN_2;
 800b9c6:	4b05      	ldr	r3, [pc, #20]	; (800b9dc <OnRxWindow2TimerEvent+0xd4>)
 800b9c8:	4a0a      	ldr	r2, [pc, #40]	; (800b9f4 <OnRxWindow2TimerEvent+0xec>)
 800b9ca:	2101      	movs	r1, #1
 800b9cc:	5499      	strb	r1, [r3, r2]
    }
}
 800b9ce:	46c0      	nop			; (mov r8, r8)
 800b9d0:	46bd      	mov	sp, r7
 800b9d2:	b002      	add	sp, #8
 800b9d4:	bd80      	pop	{r7, pc}
 800b9d6:	46c0      	nop			; (mov r8, r8)
 800b9d8:	20000ab8 	.word	0x20000ab8
 800b9dc:	2000070c 	.word	0x2000070c
 800b9e0:	000003f1 	.word	0x000003f1
 800b9e4:	000003f3 	.word	0x000003f3
 800b9e8:	000003f2 	.word	0x000003f2
 800b9ec:	20000b20 	.word	0x20000b20
 800b9f0:	20000aec 	.word	0x20000aec
 800b9f4:	0000046c 	.word	0x0000046c

0800b9f8 <CheckToDisableAckTimeout>:

static void CheckToDisableAckTimeout( bool nodeAckRequested, DeviceClass_t devClass, bool ackReceived )
{
 800b9f8:	b590      	push	{r4, r7, lr}
 800b9fa:	b083      	sub	sp, #12
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	0004      	movs	r4, r0
 800ba00:	0008      	movs	r0, r1
 800ba02:	0011      	movs	r1, r2
 800ba04:	1dfb      	adds	r3, r7, #7
 800ba06:	1c22      	adds	r2, r4, #0
 800ba08:	701a      	strb	r2, [r3, #0]
 800ba0a:	1dbb      	adds	r3, r7, #6
 800ba0c:	1c02      	adds	r2, r0, #0
 800ba0e:	701a      	strb	r2, [r3, #0]
 800ba10:	1d7b      	adds	r3, r7, #5
 800ba12:	1c0a      	adds	r2, r1, #0
 800ba14:	701a      	strb	r2, [r3, #0]
    // There are three cases where we need to stop the AckTimeoutTimer:
    if( nodeAckRequested == false )
 800ba16:	1dfb      	adds	r3, r7, #7
 800ba18:	781b      	ldrb	r3, [r3, #0]
 800ba1a:	2201      	movs	r2, #1
 800ba1c:	4053      	eors	r3, r2
 800ba1e:	b2db      	uxtb	r3, r3
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d007      	beq.n	800ba34 <CheckToDisableAckTimeout+0x3c>
    {
        if( devClass == CLASS_C )
 800ba24:	1dbb      	adds	r3, r7, #6
 800ba26:	781b      	ldrb	r3, [r3, #0]
 800ba28:	2b02      	cmp	r3, #2
 800ba2a:	d10a      	bne.n	800ba42 <CheckToDisableAckTimeout+0x4a>
        {// FIRST CASE
            // We have performed an unconfirmed uplink in class c mode
            // and have received a downlink in RX1 or RX2.
            OnAckTimeoutTimerEvent( NULL );
 800ba2c:	2000      	movs	r0, #0
 800ba2e:	f000 f80d 	bl	800ba4c <OnAckTimeoutTimerEvent>
            // We have performed a confirmed uplink and have received a
            // downlink with a valid ACK.
            OnAckTimeoutTimerEvent( NULL );
        }
    }
}
 800ba32:	e006      	b.n	800ba42 <CheckToDisableAckTimeout+0x4a>
        if( ackReceived == 1 )
 800ba34:	1d7b      	adds	r3, r7, #5
 800ba36:	781b      	ldrb	r3, [r3, #0]
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d002      	beq.n	800ba42 <CheckToDisableAckTimeout+0x4a>
            OnAckTimeoutTimerEvent( NULL );
 800ba3c:	2000      	movs	r0, #0
 800ba3e:	f000 f805 	bl	800ba4c <OnAckTimeoutTimerEvent>
}
 800ba42:	46c0      	nop			; (mov r8, r8)
 800ba44:	46bd      	mov	sp, r7
 800ba46:	b003      	add	sp, #12
 800ba48:	bd90      	pop	{r4, r7, pc}
	...

0800ba4c <OnAckTimeoutTimerEvent>:

static void OnAckTimeoutTimerEvent( void* context )
{
 800ba4c:	b580      	push	{r7, lr}
 800ba4e:	b082      	sub	sp, #8
 800ba50:	af00      	add	r7, sp, #0
 800ba52:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.AckTimeoutTimer );
 800ba54:	4b1c      	ldr	r3, [pc, #112]	; (800bac8 <OnAckTimeoutTimerEvent+0x7c>)
 800ba56:	0018      	movs	r0, r3
 800ba58:	f009 fdb2 	bl	80155c0 <TimerStop>

    if( MacCtx.NvmCtx->NodeAckRequested == true )
 800ba5c:	4a1b      	ldr	r2, [pc, #108]	; (800bacc <OnAckTimeoutTimerEvent+0x80>)
 800ba5e:	238e      	movs	r3, #142	; 0x8e
 800ba60:	00db      	lsls	r3, r3, #3
 800ba62:	58d3      	ldr	r3, [r2, r3]
 800ba64:	4a1a      	ldr	r2, [pc, #104]	; (800bad0 <OnAckTimeoutTimerEvent+0x84>)
 800ba66:	5c9b      	ldrb	r3, [r3, r2]
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d007      	beq.n	800ba7c <OnAckTimeoutTimerEvent+0x30>
    {
        MacCtx.NvmCtx->AckTimeoutRetry = true;
 800ba6c:	4a17      	ldr	r2, [pc, #92]	; (800bacc <OnAckTimeoutTimerEvent+0x80>)
 800ba6e:	238e      	movs	r3, #142	; 0x8e
 800ba70:	00db      	lsls	r3, r3, #3
 800ba72:	58d2      	ldr	r2, [r2, r3]
 800ba74:	2386      	movs	r3, #134	; 0x86
 800ba76:	009b      	lsls	r3, r3, #2
 800ba78:	2101      	movs	r1, #1
 800ba7a:	54d1      	strb	r1, [r2, r3]
    }
    if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 800ba7c:	4a13      	ldr	r2, [pc, #76]	; (800bacc <OnAckTimeoutTimerEvent+0x80>)
 800ba7e:	238e      	movs	r3, #142	; 0x8e
 800ba80:	00db      	lsls	r3, r3, #3
 800ba82:	58d3      	ldr	r3, [r2, r3]
 800ba84:	22c8      	movs	r2, #200	; 0xc8
 800ba86:	5c9b      	ldrb	r3, [r3, r2]
 800ba88:	2b02      	cmp	r3, #2
 800ba8a:	d105      	bne.n	800ba98 <OnAckTimeoutTimerEvent+0x4c>
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
 800ba8c:	4b0f      	ldr	r3, [pc, #60]	; (800bacc <OnAckTimeoutTimerEvent+0x80>)
 800ba8e:	4a11      	ldr	r2, [pc, #68]	; (800bad4 <OnAckTimeoutTimerEvent+0x88>)
 800ba90:	5c99      	ldrb	r1, [r3, r2]
 800ba92:	2010      	movs	r0, #16
 800ba94:	4301      	orrs	r1, r0
 800ba96:	5499      	strb	r1, [r3, r2]
    }
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800ba98:	4a0c      	ldr	r2, [pc, #48]	; (800bacc <OnAckTimeoutTimerEvent+0x80>)
 800ba9a:	23d7      	movs	r3, #215	; 0xd7
 800ba9c:	009b      	lsls	r3, r3, #2
 800ba9e:	58d3      	ldr	r3, [r2, r3]
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d00c      	beq.n	800babe <OnAckTimeoutTimerEvent+0x72>
 800baa4:	4a09      	ldr	r2, [pc, #36]	; (800bacc <OnAckTimeoutTimerEvent+0x80>)
 800baa6:	23d7      	movs	r3, #215	; 0xd7
 800baa8:	009b      	lsls	r3, r3, #2
 800baaa:	58d3      	ldr	r3, [r2, r3]
 800baac:	68db      	ldr	r3, [r3, #12]
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d005      	beq.n	800babe <OnAckTimeoutTimerEvent+0x72>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800bab2:	4a06      	ldr	r2, [pc, #24]	; (800bacc <OnAckTimeoutTimerEvent+0x80>)
 800bab4:	23d7      	movs	r3, #215	; 0xd7
 800bab6:	009b      	lsls	r3, r3, #2
 800bab8:	58d3      	ldr	r3, [r2, r3]
 800baba:	68db      	ldr	r3, [r3, #12]
 800babc:	4798      	blx	r3
    }
}
 800babe:	46c0      	nop			; (mov r8, r8)
 800bac0:	46bd      	mov	sp, r7
 800bac2:	b002      	add	sp, #8
 800bac4:	bd80      	pop	{r7, pc}
 800bac6:	46c0      	nop			; (mov r8, r8)
 800bac8:	20000b00 	.word	0x20000b00
 800bacc:	2000070c 	.word	0x2000070c
 800bad0:	00000219 	.word	0x00000219
 800bad4:	0000046d 	.word	0x0000046d

0800bad8 <RxWindowSetup>:

static void RxWindowSetup( bool rxContinuous, uint32_t maxRxWindow )
{
 800bad8:	b580      	push	{r7, lr}
 800bada:	b082      	sub	sp, #8
 800badc:	af00      	add	r7, sp, #0
 800bade:	0002      	movs	r2, r0
 800bae0:	6039      	str	r1, [r7, #0]
 800bae2:	1dfb      	adds	r3, r7, #7
 800bae4:	701a      	strb	r2, [r3, #0]
    if( rxContinuous == false )
 800bae6:	1dfb      	adds	r3, r7, #7
 800bae8:	781b      	ldrb	r3, [r3, #0]
 800baea:	2201      	movs	r2, #1
 800baec:	4053      	eors	r3, r2
 800baee:	b2db      	uxtb	r3, r3
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d005      	beq.n	800bb00 <RxWindowSetup+0x28>
    {
        Radio.Rx( maxRxWindow );
 800baf4:	4b06      	ldr	r3, [pc, #24]	; (800bb10 <RxWindowSetup+0x38>)
 800baf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800baf8:	683a      	ldr	r2, [r7, #0]
 800bafa:	0010      	movs	r0, r2
 800bafc:	4798      	blx	r3
    }
    else
    {
        Radio.Rx( 0 ); // Continuous mode
    }
}
 800bafe:	e003      	b.n	800bb08 <RxWindowSetup+0x30>
        Radio.Rx( 0 ); // Continuous mode
 800bb00:	4b03      	ldr	r3, [pc, #12]	; (800bb10 <RxWindowSetup+0x38>)
 800bb02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb04:	2000      	movs	r0, #0
 800bb06:	4798      	blx	r3
}
 800bb08:	46c0      	nop			; (mov r8, r8)
 800bb0a:	46bd      	mov	sp, r7
 800bb0c:	b002      	add	sp, #8
 800bb0e:	bd80      	pop	{r7, pc}
 800bb10:	08020c58 	.word	0x08020c58

0800bb14 <SwitchClass>:

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
 800bb14:	b5b0      	push	{r4, r5, r7, lr}
 800bb16:	b086      	sub	sp, #24
 800bb18:	af02      	add	r7, sp, #8
 800bb1a:	0002      	movs	r2, r0
 800bb1c:	1dfb      	adds	r3, r7, #7
 800bb1e:	701a      	strb	r2, [r3, #0]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800bb20:	230f      	movs	r3, #15
 800bb22:	18fb      	adds	r3, r7, r3
 800bb24:	2203      	movs	r2, #3
 800bb26:	701a      	strb	r2, [r3, #0]

    switch( MacCtx.NvmCtx->DeviceClass )
 800bb28:	4a4b      	ldr	r2, [pc, #300]	; (800bc58 <SwitchClass+0x144>)
 800bb2a:	238e      	movs	r3, #142	; 0x8e
 800bb2c:	00db      	lsls	r3, r3, #3
 800bb2e:	58d3      	ldr	r3, [r2, r3]
 800bb30:	22c8      	movs	r2, #200	; 0xc8
 800bb32:	5c9b      	ldrb	r3, [r3, r2]
 800bb34:	2b01      	cmp	r3, #1
 800bb36:	d058      	beq.n	800bbea <SwitchClass+0xd6>
 800bb38:	2b02      	cmp	r3, #2
 800bb3a:	d06c      	beq.n	800bc16 <SwitchClass+0x102>
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d000      	beq.n	800bb42 <SwitchClass+0x2e>
 800bb40:	e082      	b.n	800bc48 <SwitchClass+0x134>
    {
        case CLASS_A:
        {
            if( deviceClass == CLASS_B )
 800bb42:	1dfb      	adds	r3, r7, #7
 800bb44:	781b      	ldrb	r3, [r3, #0]
 800bb46:	2b01      	cmp	r3, #1
 800bb48:	d114      	bne.n	800bb74 <SwitchClass+0x60>
            {
                status = LoRaMacClassBSwitchClass( deviceClass );
 800bb4a:	250f      	movs	r5, #15
 800bb4c:	197c      	adds	r4, r7, r5
 800bb4e:	1dfb      	adds	r3, r7, #7
 800bb50:	781b      	ldrb	r3, [r3, #0]
 800bb52:	0018      	movs	r0, r3
 800bb54:	f004 f893 	bl	800fc7e <LoRaMacClassBSwitchClass>
 800bb58:	0003      	movs	r3, r0
 800bb5a:	7023      	strb	r3, [r4, #0]
                if( status == LORAMAC_STATUS_OK )
 800bb5c:	197b      	adds	r3, r7, r5
 800bb5e:	781b      	ldrb	r3, [r3, #0]
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d107      	bne.n	800bb74 <SwitchClass+0x60>
                {
                    MacCtx.NvmCtx->DeviceClass = deviceClass;
 800bb64:	4a3c      	ldr	r2, [pc, #240]	; (800bc58 <SwitchClass+0x144>)
 800bb66:	238e      	movs	r3, #142	; 0x8e
 800bb68:	00db      	lsls	r3, r3, #3
 800bb6a:	58d3      	ldr	r3, [r2, r3]
 800bb6c:	1dfa      	adds	r2, r7, #7
 800bb6e:	21c8      	movs	r1, #200	; 0xc8
 800bb70:	7812      	ldrb	r2, [r2, #0]
 800bb72:	545a      	strb	r2, [r3, r1]
                }
            }

            if( deviceClass == CLASS_C )
 800bb74:	1dfb      	adds	r3, r7, #7
 800bb76:	781b      	ldrb	r3, [r3, #0]
 800bb78:	2b02      	cmp	r3, #2
 800bb7a:	d160      	bne.n	800bc3e <SwitchClass+0x12a>
            {
                MacCtx.NvmCtx->DeviceClass = deviceClass;
 800bb7c:	4a36      	ldr	r2, [pc, #216]	; (800bc58 <SwitchClass+0x144>)
 800bb7e:	238e      	movs	r3, #142	; 0x8e
 800bb80:	00db      	lsls	r3, r3, #3
 800bb82:	58d3      	ldr	r3, [r2, r3]
 800bb84:	1dfa      	adds	r2, r7, #7
 800bb86:	21c8      	movs	r1, #200	; 0xc8
 800bb88:	7812      	ldrb	r2, [r2, #0]
 800bb8a:	545a      	strb	r2, [r3, r1]

                // Set the NodeAckRequested indicator to default
                MacCtx.NvmCtx->NodeAckRequested = false;
 800bb8c:	4a32      	ldr	r2, [pc, #200]	; (800bc58 <SwitchClass+0x144>)
 800bb8e:	238e      	movs	r3, #142	; 0x8e
 800bb90:	00db      	lsls	r3, r3, #3
 800bb92:	58d3      	ldr	r3, [r2, r3]
 800bb94:	4a31      	ldr	r2, [pc, #196]	; (800bc5c <SwitchClass+0x148>)
 800bb96:	2100      	movs	r1, #0
 800bb98:	5499      	strb	r1, [r3, r2]
                // Set the radio into sleep mode in case we are still in RX mode
                Radio.Sleep( );
 800bb9a:	4b31      	ldr	r3, [pc, #196]	; (800bc60 <SwitchClass+0x14c>)
 800bb9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb9e:	4798      	blx	r3
                // Compute Rx2 windows parameters in case the RX2 datarate has changed
                RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800bba0:	4a2d      	ldr	r2, [pc, #180]	; (800bc58 <SwitchClass+0x144>)
 800bba2:	238e      	movs	r3, #142	; 0x8e
 800bba4:	00db      	lsls	r3, r3, #3
 800bba6:	58d3      	ldr	r3, [r2, r3]
 800bba8:	7818      	ldrb	r0, [r3, #0]
                                                 MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate,
 800bbaa:	4a2b      	ldr	r2, [pc, #172]	; (800bc58 <SwitchClass+0x144>)
 800bbac:	238e      	movs	r3, #142	; 0x8e
 800bbae:	00db      	lsls	r3, r3, #3
 800bbb0:	58d3      	ldr	r3, [r2, r3]
 800bbb2:	22fc      	movs	r2, #252	; 0xfc
 800bbb4:	5c9b      	ldrb	r3, [r3, r2]
                RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800bbb6:	b259      	sxtb	r1, r3
                                                 MacCtx.NvmCtx->MacParams.MinRxSymbols,
 800bbb8:	4a27      	ldr	r2, [pc, #156]	; (800bc58 <SwitchClass+0x144>)
 800bbba:	238e      	movs	r3, #142	; 0x8e
 800bbbc:	00db      	lsls	r3, r3, #3
 800bbbe:	58d3      	ldr	r3, [r2, r3]
                RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800bbc0:	22dc      	movs	r2, #220	; 0xdc
 800bbc2:	5c9c      	ldrb	r4, [r3, r2]
                                                 MacCtx.NvmCtx->MacParams.SystemMaxRxError,
 800bbc4:	4a24      	ldr	r2, [pc, #144]	; (800bc58 <SwitchClass+0x144>)
 800bbc6:	238e      	movs	r3, #142	; 0x8e
 800bbc8:	00db      	lsls	r3, r3, #3
 800bbca:	58d3      	ldr	r3, [r2, r3]
                RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800bbcc:	22d8      	movs	r2, #216	; 0xd8
 800bbce:	589a      	ldr	r2, [r3, r2]
 800bbd0:	4b24      	ldr	r3, [pc, #144]	; (800bc64 <SwitchClass+0x150>)
 800bbd2:	9300      	str	r3, [sp, #0]
 800bbd4:	0013      	movs	r3, r2
 800bbd6:	0022      	movs	r2, r4
 800bbd8:	f007 f874 	bl	8012cc4 <RegionComputeRxWindowParameters>
                                                 &MacCtx.RxWindow2Config );
                OpenContinuousRx2Window( );
 800bbdc:	f001 fb8e 	bl	800d2fc <OpenContinuousRx2Window>

                status = LORAMAC_STATUS_OK;
 800bbe0:	230f      	movs	r3, #15
 800bbe2:	18fb      	adds	r3, r7, r3
 800bbe4:	2200      	movs	r2, #0
 800bbe6:	701a      	strb	r2, [r3, #0]
            }
            break;
 800bbe8:	e029      	b.n	800bc3e <SwitchClass+0x12a>
        }
        case CLASS_B:
        {
            status = LoRaMacClassBSwitchClass( deviceClass );
 800bbea:	250f      	movs	r5, #15
 800bbec:	197c      	adds	r4, r7, r5
 800bbee:	1dfb      	adds	r3, r7, #7
 800bbf0:	781b      	ldrb	r3, [r3, #0]
 800bbf2:	0018      	movs	r0, r3
 800bbf4:	f004 f843 	bl	800fc7e <LoRaMacClassBSwitchClass>
 800bbf8:	0003      	movs	r3, r0
 800bbfa:	7023      	strb	r3, [r4, #0]
            if( status == LORAMAC_STATUS_OK )
 800bbfc:	197b      	adds	r3, r7, r5
 800bbfe:	781b      	ldrb	r3, [r3, #0]
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d11e      	bne.n	800bc42 <SwitchClass+0x12e>
            {
                MacCtx.NvmCtx->DeviceClass = deviceClass;
 800bc04:	4a14      	ldr	r2, [pc, #80]	; (800bc58 <SwitchClass+0x144>)
 800bc06:	238e      	movs	r3, #142	; 0x8e
 800bc08:	00db      	lsls	r3, r3, #3
 800bc0a:	58d3      	ldr	r3, [r2, r3]
 800bc0c:	1dfa      	adds	r2, r7, #7
 800bc0e:	21c8      	movs	r1, #200	; 0xc8
 800bc10:	7812      	ldrb	r2, [r2, #0]
 800bc12:	545a      	strb	r2, [r3, r1]
            }
            break;
 800bc14:	e015      	b.n	800bc42 <SwitchClass+0x12e>
        }
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
 800bc16:	1dfb      	adds	r3, r7, #7
 800bc18:	781b      	ldrb	r3, [r3, #0]
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d113      	bne.n	800bc46 <SwitchClass+0x132>
            {
                MacCtx.NvmCtx->DeviceClass = deviceClass;
 800bc1e:	4a0e      	ldr	r2, [pc, #56]	; (800bc58 <SwitchClass+0x144>)
 800bc20:	238e      	movs	r3, #142	; 0x8e
 800bc22:	00db      	lsls	r3, r3, #3
 800bc24:	58d3      	ldr	r3, [r2, r3]
 800bc26:	1dfa      	adds	r2, r7, #7
 800bc28:	21c8      	movs	r1, #200	; 0xc8
 800bc2a:	7812      	ldrb	r2, [r2, #0]
 800bc2c:	545a      	strb	r2, [r3, r1]

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
 800bc2e:	4b0c      	ldr	r3, [pc, #48]	; (800bc60 <SwitchClass+0x14c>)
 800bc30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc32:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
 800bc34:	230f      	movs	r3, #15
 800bc36:	18fb      	adds	r3, r7, r3
 800bc38:	2200      	movs	r2, #0
 800bc3a:	701a      	strb	r2, [r3, #0]
            }
            break;
 800bc3c:	e003      	b.n	800bc46 <SwitchClass+0x132>
            break;
 800bc3e:	46c0      	nop			; (mov r8, r8)
 800bc40:	e002      	b.n	800bc48 <SwitchClass+0x134>
            break;
 800bc42:	46c0      	nop			; (mov r8, r8)
 800bc44:	e000      	b.n	800bc48 <SwitchClass+0x134>
            break;
 800bc46:	46c0      	nop			; (mov r8, r8)
        }
    }

    return status;
 800bc48:	230f      	movs	r3, #15
 800bc4a:	18fb      	adds	r3, r7, r3
 800bc4c:	781b      	ldrb	r3, [r3, #0]
}
 800bc4e:	0018      	movs	r0, r3
 800bc50:	46bd      	mov	sp, r7
 800bc52:	b004      	add	sp, #16
 800bc54:	bdb0      	pop	{r4, r5, r7, pc}
 800bc56:	46c0      	nop			; (mov r8, r8)
 800bc58:	2000070c 	.word	0x2000070c
 800bc5c:	00000219 	.word	0x00000219
 800bc60:	08020c58 	.word	0x08020c58
 800bc64:	20000aec 	.word	0x20000aec

0800bc68 <GetMaxAppPayloadWithoutFOptsLength>:

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 800bc68:	b580      	push	{r7, lr}
 800bc6a:	b084      	sub	sp, #16
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	0002      	movs	r2, r0
 800bc70:	1dfb      	adds	r3, r7, #7
 800bc72:	701a      	strb	r2, [r3, #0]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800bc74:	4a1a      	ldr	r2, [pc, #104]	; (800bce0 <GetMaxAppPayloadWithoutFOptsLength+0x78>)
 800bc76:	238e      	movs	r3, #142	; 0x8e
 800bc78:	00db      	lsls	r3, r3, #3
 800bc7a:	58d2      	ldr	r2, [r2, r3]
 800bc7c:	2380      	movs	r3, #128	; 0x80
 800bc7e:	005b      	lsls	r3, r3, #1
 800bc80:	5cd2      	ldrb	r2, [r2, r3]
 800bc82:	210c      	movs	r1, #12
 800bc84:	187b      	adds	r3, r7, r1
 800bc86:	709a      	strb	r2, [r3, #2]
    getPhy.Datarate = datarate;
 800bc88:	187b      	adds	r3, r7, r1
 800bc8a:	1dfa      	adds	r2, r7, #7
 800bc8c:	7812      	ldrb	r2, [r2, #0]
 800bc8e:	705a      	strb	r2, [r3, #1]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 800bc90:	187b      	adds	r3, r7, r1
 800bc92:	220c      	movs	r2, #12
 800bc94:	701a      	strb	r2, [r3, #0]

    // Get the maximum payload length
    if( MacCtx.NvmCtx->RepeaterSupport == true )
 800bc96:	4a12      	ldr	r2, [pc, #72]	; (800bce0 <GetMaxAppPayloadWithoutFOptsLength+0x78>)
 800bc98:	238e      	movs	r3, #142	; 0x8e
 800bc9a:	00db      	lsls	r3, r3, #3
 800bc9c:	58d2      	ldr	r2, [r2, r3]
 800bc9e:	2316      	movs	r3, #22
 800bca0:	33ff      	adds	r3, #255	; 0xff
 800bca2:	5cd3      	ldrb	r3, [r2, r3]
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d003      	beq.n	800bcb0 <GetMaxAppPayloadWithoutFOptsLength+0x48>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800bca8:	230c      	movs	r3, #12
 800bcaa:	18fb      	adds	r3, r7, r3
 800bcac:	220d      	movs	r2, #13
 800bcae:	701a      	strb	r2, [r3, #0]
    }
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800bcb0:	4a0b      	ldr	r2, [pc, #44]	; (800bce0 <GetMaxAppPayloadWithoutFOptsLength+0x78>)
 800bcb2:	238e      	movs	r3, #142	; 0x8e
 800bcb4:	00db      	lsls	r3, r3, #3
 800bcb6:	58d3      	ldr	r3, [r2, r3]
 800bcb8:	781b      	ldrb	r3, [r3, #0]
 800bcba:	220c      	movs	r2, #12
 800bcbc:	18ba      	adds	r2, r7, r2
 800bcbe:	0011      	movs	r1, r2
 800bcc0:	0018      	movs	r0, r3
 800bcc2:	f006 ff50 	bl	8012b66 <RegionGetPhyParam>
 800bcc6:	0003      	movs	r3, r0
 800bcc8:	001a      	movs	r2, r3
 800bcca:	2108      	movs	r1, #8
 800bccc:	187b      	adds	r3, r7, r1
 800bcce:	601a      	str	r2, [r3, #0]

    return phyParam.Value;
 800bcd0:	187b      	adds	r3, r7, r1
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	b2db      	uxtb	r3, r3
}
 800bcd6:	0018      	movs	r0, r3
 800bcd8:	46bd      	mov	sp, r7
 800bcda:	b004      	add	sp, #16
 800bcdc:	bd80      	pop	{r7, pc}
 800bcde:	46c0      	nop			; (mov r8, r8)
 800bce0:	2000070c 	.word	0x2000070c

0800bce4 <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 800bce4:	b5b0      	push	{r4, r5, r7, lr}
 800bce6:	b084      	sub	sp, #16
 800bce8:	af00      	add	r7, sp, #0
 800bcea:	0004      	movs	r4, r0
 800bcec:	0008      	movs	r0, r1
 800bcee:	0011      	movs	r1, r2
 800bcf0:	1dfb      	adds	r3, r7, #7
 800bcf2:	1c22      	adds	r2, r4, #0
 800bcf4:	701a      	strb	r2, [r3, #0]
 800bcf6:	1dbb      	adds	r3, r7, #6
 800bcf8:	1c02      	adds	r2, r0, #0
 800bcfa:	701a      	strb	r2, [r3, #0]
 800bcfc:	1d7b      	adds	r3, r7, #5
 800bcfe:	1c0a      	adds	r2, r1, #0
 800bd00:	701a      	strb	r2, [r3, #0]
    uint16_t maxN = 0;
 800bd02:	200e      	movs	r0, #14
 800bd04:	0004      	movs	r4, r0
 800bd06:	183b      	adds	r3, r7, r0
 800bd08:	2200      	movs	r2, #0
 800bd0a:	801a      	strh	r2, [r3, #0]
    uint16_t payloadSize = 0;
 800bd0c:	250c      	movs	r5, #12
 800bd0e:	197b      	adds	r3, r7, r5
 800bd10:	2200      	movs	r2, #0
 800bd12:	801a      	strh	r2, [r3, #0]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800bd14:	1dbb      	adds	r3, r7, #6
 800bd16:	781b      	ldrb	r3, [r3, #0]
 800bd18:	b25b      	sxtb	r3, r3
 800bd1a:	0018      	movs	r0, r3
 800bd1c:	f7ff ffa4 	bl	800bc68 <GetMaxAppPayloadWithoutFOptsLength>
 800bd20:	0003      	movs	r3, r0
 800bd22:	001a      	movs	r2, r3
 800bd24:	0020      	movs	r0, r4
 800bd26:	183b      	adds	r3, r7, r0
 800bd28:	801a      	strh	r2, [r3, #0]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 800bd2a:	1dfb      	adds	r3, r7, #7
 800bd2c:	781b      	ldrb	r3, [r3, #0]
 800bd2e:	b299      	uxth	r1, r3
 800bd30:	1d7b      	adds	r3, r7, #5
 800bd32:	781b      	ldrb	r3, [r3, #0]
 800bd34:	b29a      	uxth	r2, r3
 800bd36:	197b      	adds	r3, r7, r5
 800bd38:	188a      	adds	r2, r1, r2
 800bd3a:	801a      	strh	r2, [r3, #0]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 800bd3c:	197a      	adds	r2, r7, r5
 800bd3e:	183b      	adds	r3, r7, r0
 800bd40:	8812      	ldrh	r2, [r2, #0]
 800bd42:	881b      	ldrh	r3, [r3, #0]
 800bd44:	429a      	cmp	r2, r3
 800bd46:	d806      	bhi.n	800bd56 <ValidatePayloadLength+0x72>
 800bd48:	230c      	movs	r3, #12
 800bd4a:	18fb      	adds	r3, r7, r3
 800bd4c:	881b      	ldrh	r3, [r3, #0]
 800bd4e:	2bff      	cmp	r3, #255	; 0xff
 800bd50:	d801      	bhi.n	800bd56 <ValidatePayloadLength+0x72>
    {
        return true;
 800bd52:	2301      	movs	r3, #1
 800bd54:	e000      	b.n	800bd58 <ValidatePayloadLength+0x74>
    }
    return false;
 800bd56:	2300      	movs	r3, #0
}
 800bd58:	0018      	movs	r0, r3
 800bd5a:	46bd      	mov	sp, r7
 800bd5c:	b004      	add	sp, #16
 800bd5e:	bdb0      	pop	{r4, r5, r7, pc}

0800bd60 <SetMlmeScheduleUplinkIndication>:

static void SetMlmeScheduleUplinkIndication( void )
{
 800bd60:	b580      	push	{r7, lr}
 800bd62:	af00      	add	r7, sp, #0
    MacCtx.MlmeIndication.MlmeIndication = MLME_SCHEDULE_UPLINK;
 800bd64:	4b06      	ldr	r3, [pc, #24]	; (800bd80 <SetMlmeScheduleUplinkIndication+0x20>)
 800bd66:	4a07      	ldr	r2, [pc, #28]	; (800bd84 <SetMlmeScheduleUplinkIndication+0x24>)
 800bd68:	2106      	movs	r1, #6
 800bd6a:	5499      	strb	r1, [r3, r2]
    MacCtx.MacFlags.Bits.MlmeInd = 1;
 800bd6c:	4b04      	ldr	r3, [pc, #16]	; (800bd80 <SetMlmeScheduleUplinkIndication+0x20>)
 800bd6e:	4a06      	ldr	r2, [pc, #24]	; (800bd88 <SetMlmeScheduleUplinkIndication+0x28>)
 800bd70:	5c99      	ldrb	r1, [r3, r2]
 800bd72:	2008      	movs	r0, #8
 800bd74:	4301      	orrs	r1, r0
 800bd76:	5499      	strb	r1, [r3, r2]
}
 800bd78:	46c0      	nop			; (mov r8, r8)
 800bd7a:	46bd      	mov	sp, r7
 800bd7c:	bd80      	pop	{r7, pc}
 800bd7e:	46c0      	nop			; (mov r8, r8)
 800bd80:	2000070c 	.word	0x2000070c
 800bd84:	00000454 	.word	0x00000454
 800bd88:	0000046d 	.word	0x0000046d

0800bd8c <ProcessMacCommands>:

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
{
 800bd8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bd8e:	b0a5      	sub	sp, #148	; 0x94
 800bd90:	af02      	add	r7, sp, #8
 800bd92:	6078      	str	r0, [r7, #4]
 800bd94:	000c      	movs	r4, r1
 800bd96:	0010      	movs	r0, r2
 800bd98:	0019      	movs	r1, r3
 800bd9a:	1cfb      	adds	r3, r7, #3
 800bd9c:	1c22      	adds	r2, r4, #0
 800bd9e:	701a      	strb	r2, [r3, #0]
 800bda0:	1cbb      	adds	r3, r7, #2
 800bda2:	1c02      	adds	r2, r0, #0
 800bda4:	701a      	strb	r2, [r3, #0]
 800bda6:	1c7b      	adds	r3, r7, #1
 800bda8:	1c0a      	adds	r2, r1, #0
 800bdaa:	701a      	strb	r2, [r3, #0]
    uint8_t status = 0;
 800bdac:	236b      	movs	r3, #107	; 0x6b
 800bdae:	18fb      	adds	r3, r7, r3
 800bdb0:	2200      	movs	r2, #0
 800bdb2:	701a      	strb	r2, [r3, #0]
    bool adrBlockFound = false;
 800bdb4:	2387      	movs	r3, #135	; 0x87
 800bdb6:	18fb      	adds	r3, r7, r3
 800bdb8:	2200      	movs	r2, #0
 800bdba:	701a      	strb	r2, [r3, #0]
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800bdbc:	2168      	movs	r1, #104	; 0x68
 800bdbe:	187b      	adds	r3, r7, r1
 800bdc0:	2200      	movs	r2, #0
 800bdc2:	701a      	strb	r2, [r3, #0]
 800bdc4:	187b      	adds	r3, r7, r1
 800bdc6:	2200      	movs	r2, #0
 800bdc8:	705a      	strb	r2, [r3, #1]

    while( macIndex < commandsSize )
 800bdca:	f000 fd7a 	bl	800c8c2 <ProcessMacCommands+0xb36>
    {
        // Decode Frame MAC commands
        switch( payload[macIndex++] )
 800bdce:	1cfb      	adds	r3, r7, #3
 800bdd0:	781b      	ldrb	r3, [r3, #0]
 800bdd2:	1cfa      	adds	r2, r7, #3
 800bdd4:	1c59      	adds	r1, r3, #1
 800bdd6:	7011      	strb	r1, [r2, #0]
 800bdd8:	001a      	movs	r2, r3
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	189b      	adds	r3, r3, r2
 800bdde:	781b      	ldrb	r3, [r3, #0]
 800bde0:	2b13      	cmp	r3, #19
 800bde2:	d901      	bls.n	800bde8 <ProcessMacCommands+0x5c>
 800bde4:	f000 fd76 	bl	800c8d4 <ProcessMacCommands+0xb48>
 800bde8:	009a      	lsls	r2, r3, #2
 800bdea:	4be3      	ldr	r3, [pc, #908]	; (800c178 <ProcessMacCommands+0x3ec>)
 800bdec:	18d3      	adds	r3, r2, r3
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	469f      	mov	pc, r3
        {
            case SRV_MAC_LINK_CHECK_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 800bdf2:	2003      	movs	r0, #3
 800bdf4:	f004 fbee 	bl	80105d4 <LoRaMacConfirmQueueIsCmdActive>
 800bdf8:	1e03      	subs	r3, r0, #0
 800bdfa:	d01c      	beq.n	800be36 <ProcessMacCommands+0xaa>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 800bdfc:	2103      	movs	r1, #3
 800bdfe:	2000      	movs	r0, #0
 800be00:	f004 fb5a 	bl	80104b8 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 800be04:	1cfb      	adds	r3, r7, #3
 800be06:	781b      	ldrb	r3, [r3, #0]
 800be08:	1cfa      	adds	r2, r7, #3
 800be0a:	1c59      	adds	r1, r3, #1
 800be0c:	7011      	strb	r1, [r2, #0]
 800be0e:	001a      	movs	r2, r3
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	189b      	adds	r3, r3, r2
 800be14:	7819      	ldrb	r1, [r3, #0]
 800be16:	4ad9      	ldr	r2, [pc, #868]	; (800c17c <ProcessMacCommands+0x3f0>)
 800be18:	2389      	movs	r3, #137	; 0x89
 800be1a:	00db      	lsls	r3, r3, #3
 800be1c:	54d1      	strb	r1, [r2, r3]
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 800be1e:	1cfb      	adds	r3, r7, #3
 800be20:	781b      	ldrb	r3, [r3, #0]
 800be22:	1cfa      	adds	r2, r7, #3
 800be24:	1c59      	adds	r1, r3, #1
 800be26:	7011      	strb	r1, [r2, #0]
 800be28:	001a      	movs	r2, r3
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	189b      	adds	r3, r3, r2
 800be2e:	7819      	ldrb	r1, [r3, #0]
 800be30:	4bd2      	ldr	r3, [pc, #840]	; (800c17c <ProcessMacCommands+0x3f0>)
 800be32:	4ad3      	ldr	r2, [pc, #844]	; (800c180 <ProcessMacCommands+0x3f4>)
 800be34:	5499      	strb	r1, [r3, r2]
 800be36:	2287      	movs	r2, #135	; 0x87
 800be38:	18bb      	adds	r3, r7, r2
 800be3a:	18ba      	adds	r2, r7, r2
 800be3c:	7812      	ldrb	r2, [r2, #0]
 800be3e:	701a      	strb	r2, [r3, #0]
                }
                break;
 800be40:	f000 fd3f 	bl	800c8c2 <ProcessMacCommands+0xb36>
            }
            case SRV_MAC_LINK_ADR_REQ:
            {
                LinkAdrReqParams_t linkAdrReq;
                int8_t linkAdrDatarate = DR_0;
 800be44:	2357      	movs	r3, #87	; 0x57
 800be46:	18fb      	adds	r3, r7, r3
 800be48:	2200      	movs	r2, #0
 800be4a:	701a      	strb	r2, [r3, #0]
                int8_t linkAdrTxPower = TX_POWER_0;
 800be4c:	2356      	movs	r3, #86	; 0x56
 800be4e:	18fb      	adds	r3, r7, r3
 800be50:	2200      	movs	r2, #0
 800be52:	701a      	strb	r2, [r3, #0]
                uint8_t linkAdrNbRep = 0;
 800be54:	2355      	movs	r3, #85	; 0x55
 800be56:	18fb      	adds	r3, r7, r3
 800be58:	2200      	movs	r2, #0
 800be5a:	701a      	strb	r2, [r3, #0]
                uint8_t linkAdrNbBytesParsed = 0;
 800be5c:	2354      	movs	r3, #84	; 0x54
 800be5e:	18fb      	adds	r3, r7, r3
 800be60:	2200      	movs	r2, #0
 800be62:	701a      	strb	r2, [r3, #0]

                if( adrBlockFound == false )
 800be64:	2387      	movs	r3, #135	; 0x87
 800be66:	18fb      	adds	r3, r7, r3
 800be68:	781b      	ldrb	r3, [r3, #0]
 800be6a:	2201      	movs	r2, #1
 800be6c:	4053      	eors	r3, r2
 800be6e:	b2db      	uxtb	r3, r3
 800be70:	2b00      	cmp	r3, #0
 800be72:	d100      	bne.n	800be76 <ProcessMacCommands+0xea>
 800be74:	e0ae      	b.n	800bfd4 <ProcessMacCommands+0x248>
                {
                    adrBlockFound = true;
 800be76:	2387      	movs	r3, #135	; 0x87
 800be78:	18fb      	adds	r3, r7, r3
 800be7a:	2201      	movs	r2, #1
 800be7c:	701a      	strb	r2, [r3, #0]

                    // Fill parameter structure
                    linkAdrReq.Payload = &payload[macIndex - 1];
 800be7e:	1cfb      	adds	r3, r7, #3
 800be80:	781b      	ldrb	r3, [r3, #0]
 800be82:	3b01      	subs	r3, #1
 800be84:	687a      	ldr	r2, [r7, #4]
 800be86:	18d2      	adds	r2, r2, r3
 800be88:	2158      	movs	r1, #88	; 0x58
 800be8a:	187b      	adds	r3, r7, r1
 800be8c:	605a      	str	r2, [r3, #4]
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 800be8e:	1cba      	adds	r2, r7, #2
 800be90:	1cfb      	adds	r3, r7, #3
 800be92:	7812      	ldrb	r2, [r2, #0]
 800be94:	781b      	ldrb	r3, [r3, #0]
 800be96:	1ad3      	subs	r3, r2, r3
 800be98:	b2db      	uxtb	r3, r3
 800be9a:	3301      	adds	r3, #1
 800be9c:	b2da      	uxtb	r2, r3
 800be9e:	187b      	adds	r3, r7, r1
 800bea0:	721a      	strb	r2, [r3, #8]
                    linkAdrReq.AdrEnabled = MacCtx.NvmCtx->AdrCtrlOn;
 800bea2:	4ab6      	ldr	r2, [pc, #728]	; (800c17c <ProcessMacCommands+0x3f0>)
 800bea4:	238e      	movs	r3, #142	; 0x8e
 800bea6:	00db      	lsls	r3, r3, #3
 800bea8:	58d3      	ldr	r3, [r2, r3]
 800beaa:	22ca      	movs	r2, #202	; 0xca
 800beac:	5c9a      	ldrb	r2, [r3, r2]
 800beae:	187b      	adds	r3, r7, r1
 800beb0:	729a      	strb	r2, [r3, #10]
                    linkAdrReq.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800beb2:	4ab2      	ldr	r2, [pc, #712]	; (800c17c <ProcessMacCommands+0x3f0>)
 800beb4:	238e      	movs	r3, #142	; 0x8e
 800beb6:	00db      	lsls	r3, r3, #3
 800beb8:	58d2      	ldr	r2, [r2, r3]
 800beba:	2380      	movs	r3, #128	; 0x80
 800bebc:	005b      	lsls	r3, r3, #1
 800bebe:	5cd2      	ldrb	r2, [r2, r3]
 800bec0:	187b      	adds	r3, r7, r1
 800bec2:	725a      	strb	r2, [r3, #9]
                    linkAdrReq.CurrentDatarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800bec4:	4aad      	ldr	r2, [pc, #692]	; (800c17c <ProcessMacCommands+0x3f0>)
 800bec6:	238e      	movs	r3, #142	; 0x8e
 800bec8:	00db      	lsls	r3, r3, #3
 800beca:	58d3      	ldr	r3, [r2, r3]
 800becc:	22d5      	movs	r2, #213	; 0xd5
 800bece:	569a      	ldrsb	r2, [r3, r2]
 800bed0:	187b      	adds	r3, r7, r1
 800bed2:	72da      	strb	r2, [r3, #11]
                    linkAdrReq.CurrentTxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 800bed4:	4aa9      	ldr	r2, [pc, #676]	; (800c17c <ProcessMacCommands+0x3f0>)
 800bed6:	238e      	movs	r3, #142	; 0x8e
 800bed8:	00db      	lsls	r3, r3, #3
 800beda:	58d3      	ldr	r3, [r2, r3]
 800bedc:	22d4      	movs	r2, #212	; 0xd4
 800bede:	569a      	ldrsb	r2, [r3, r2]
 800bee0:	187b      	adds	r3, r7, r1
 800bee2:	731a      	strb	r2, [r3, #12]
                    linkAdrReq.CurrentNbRep = MacCtx.NvmCtx->MacParams.ChannelsNbTrans;
 800bee4:	4aa5      	ldr	r2, [pc, #660]	; (800c17c <ProcessMacCommands+0x3f0>)
 800bee6:	238e      	movs	r3, #142	; 0x8e
 800bee8:	00db      	lsls	r3, r3, #3
 800beea:	58d3      	ldr	r3, [r2, r3]
 800beec:	22f4      	movs	r2, #244	; 0xf4
 800beee:	5c9a      	ldrb	r2, [r3, r2]
 800bef0:	000d      	movs	r5, r1
 800bef2:	197b      	adds	r3, r7, r5
 800bef4:	735a      	strb	r2, [r3, #13]
                    linkAdrReq.Version = MacCtx.NvmCtx->Version;
 800bef6:	4aa1      	ldr	r2, [pc, #644]	; (800c17c <ProcessMacCommands+0x3f0>)
 800bef8:	238e      	movs	r3, #142	; 0x8e
 800befa:	00db      	lsls	r3, r3, #3
 800befc:	58d1      	ldr	r1, [r2, r3]
 800befe:	197b      	adds	r3, r7, r5
 800bf00:	2288      	movs	r2, #136	; 0x88
 800bf02:	0092      	lsls	r2, r2, #2
 800bf04:	588a      	ldr	r2, [r1, r2]
 800bf06:	601a      	str	r2, [r3, #0]

                    // Process the ADR requests
                    status = RegionLinkAdrReq( MacCtx.NvmCtx->Region, &linkAdrReq, &linkAdrDatarate,
 800bf08:	4a9c      	ldr	r2, [pc, #624]	; (800c17c <ProcessMacCommands+0x3f0>)
 800bf0a:	238e      	movs	r3, #142	; 0x8e
 800bf0c:	00db      	lsls	r3, r3, #3
 800bf0e:	58d3      	ldr	r3, [r2, r3]
 800bf10:	7818      	ldrb	r0, [r3, #0]
 800bf12:	2356      	movs	r3, #86	; 0x56
 800bf14:	18fc      	adds	r4, r7, r3
 800bf16:	2357      	movs	r3, #87	; 0x57
 800bf18:	18fa      	adds	r2, r7, r3
 800bf1a:	1979      	adds	r1, r7, r5
 800bf1c:	2354      	movs	r3, #84	; 0x54
 800bf1e:	18fb      	adds	r3, r7, r3
 800bf20:	9301      	str	r3, [sp, #4]
 800bf22:	2355      	movs	r3, #85	; 0x55
 800bf24:	18fb      	adds	r3, r7, r3
 800bf26:	9300      	str	r3, [sp, #0]
 800bf28:	0023      	movs	r3, r4
 800bf2a:	f006 ff24 	bl	8012d76 <RegionLinkAdrReq>
 800bf2e:	0003      	movs	r3, r0
 800bf30:	001a      	movs	r2, r3
 800bf32:	216b      	movs	r1, #107	; 0x6b
 800bf34:	187b      	adds	r3, r7, r1
 800bf36:	701a      	strb	r2, [r3, #0]
                                               &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed );

                    if( ( status & 0x07 ) == 0x07 )
 800bf38:	187b      	adds	r3, r7, r1
 800bf3a:	781b      	ldrb	r3, [r3, #0]
 800bf3c:	001a      	movs	r2, r3
 800bf3e:	2307      	movs	r3, #7
 800bf40:	4013      	ands	r3, r2
 800bf42:	2b07      	cmp	r3, #7
 800bf44:	d11c      	bne.n	800bf80 <ProcessMacCommands+0x1f4>
                    {
                        MacCtx.NvmCtx->MacParams.ChannelsDatarate = linkAdrDatarate;
 800bf46:	4a8d      	ldr	r2, [pc, #564]	; (800c17c <ProcessMacCommands+0x3f0>)
 800bf48:	238e      	movs	r3, #142	; 0x8e
 800bf4a:	00db      	lsls	r3, r3, #3
 800bf4c:	58d3      	ldr	r3, [r2, r3]
 800bf4e:	2257      	movs	r2, #87	; 0x57
 800bf50:	18ba      	adds	r2, r7, r2
 800bf52:	2100      	movs	r1, #0
 800bf54:	5651      	ldrsb	r1, [r2, r1]
 800bf56:	22d5      	movs	r2, #213	; 0xd5
 800bf58:	5499      	strb	r1, [r3, r2]
                        MacCtx.NvmCtx->MacParams.ChannelsTxPower = linkAdrTxPower;
 800bf5a:	4a88      	ldr	r2, [pc, #544]	; (800c17c <ProcessMacCommands+0x3f0>)
 800bf5c:	238e      	movs	r3, #142	; 0x8e
 800bf5e:	00db      	lsls	r3, r3, #3
 800bf60:	58d3      	ldr	r3, [r2, r3]
 800bf62:	2256      	movs	r2, #86	; 0x56
 800bf64:	18ba      	adds	r2, r7, r2
 800bf66:	2100      	movs	r1, #0
 800bf68:	5651      	ldrsb	r1, [r2, r1]
 800bf6a:	22d4      	movs	r2, #212	; 0xd4
 800bf6c:	5499      	strb	r1, [r3, r2]
                        MacCtx.NvmCtx->MacParams.ChannelsNbTrans = linkAdrNbRep;
 800bf6e:	4a83      	ldr	r2, [pc, #524]	; (800c17c <ProcessMacCommands+0x3f0>)
 800bf70:	238e      	movs	r3, #142	; 0x8e
 800bf72:	00db      	lsls	r3, r3, #3
 800bf74:	58d3      	ldr	r3, [r2, r3]
 800bf76:	2255      	movs	r2, #85	; 0x55
 800bf78:	18ba      	adds	r2, r7, r2
 800bf7a:	7811      	ldrb	r1, [r2, #0]
 800bf7c:	22f4      	movs	r2, #244	; 0xf4
 800bf7e:	5499      	strb	r1, [r3, r2]
                    }

                    // Add the answers to the buffer
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800bf80:	2386      	movs	r3, #134	; 0x86
 800bf82:	18fb      	adds	r3, r7, r3
 800bf84:	2200      	movs	r2, #0
 800bf86:	701a      	strb	r2, [r3, #0]
 800bf88:	e00c      	b.n	800bfa4 <ProcessMacCommands+0x218>
                    {
                        LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 800bf8a:	236b      	movs	r3, #107	; 0x6b
 800bf8c:	18fb      	adds	r3, r7, r3
 800bf8e:	2201      	movs	r2, #1
 800bf90:	0019      	movs	r1, r3
 800bf92:	2003      	movs	r0, #3
 800bf94:	f004 f834 	bl	8010000 <LoRaMacCommandsAddCmd>
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800bf98:	2186      	movs	r1, #134	; 0x86
 800bf9a:	187b      	adds	r3, r7, r1
 800bf9c:	781a      	ldrb	r2, [r3, #0]
 800bf9e:	187b      	adds	r3, r7, r1
 800bfa0:	3201      	adds	r2, #1
 800bfa2:	701a      	strb	r2, [r3, #0]
 800bfa4:	2354      	movs	r3, #84	; 0x54
 800bfa6:	18fb      	adds	r3, r7, r3
 800bfa8:	781b      	ldrb	r3, [r3, #0]
 800bfaa:	2105      	movs	r1, #5
 800bfac:	0018      	movs	r0, r3
 800bfae:	f7f4 f8b3 	bl	8000118 <__udivsi3>
 800bfb2:	0003      	movs	r3, r0
 800bfb4:	b2db      	uxtb	r3, r3
 800bfb6:	2286      	movs	r2, #134	; 0x86
 800bfb8:	18ba      	adds	r2, r7, r2
 800bfba:	7812      	ldrb	r2, [r2, #0]
 800bfbc:	429a      	cmp	r2, r3
 800bfbe:	d3e4      	bcc.n	800bf8a <ProcessMacCommands+0x1fe>
                    }
                    // Update MAC index
                    macIndex += linkAdrNbBytesParsed - 1;
 800bfc0:	2354      	movs	r3, #84	; 0x54
 800bfc2:	18fb      	adds	r3, r7, r3
 800bfc4:	781a      	ldrb	r2, [r3, #0]
 800bfc6:	1cfb      	adds	r3, r7, #3
 800bfc8:	781b      	ldrb	r3, [r3, #0]
 800bfca:	18d3      	adds	r3, r2, r3
 800bfcc:	b2da      	uxtb	r2, r3
 800bfce:	1cfb      	adds	r3, r7, #3
 800bfd0:	3a01      	subs	r2, #1
 800bfd2:	701a      	strb	r2, [r3, #0]
                }
                break;
 800bfd4:	46c0      	nop			; (mov r8, r8)
 800bfd6:	f000 fc74 	bl	800c8c2 <ProcessMacCommands+0xb36>
            }
            case SRV_MAC_DUTY_CYCLE_REQ:
            {
                MacCtx.NvmCtx->MaxDCycle = payload[macIndex++] & 0x0F;
 800bfda:	1cfb      	adds	r3, r7, #3
 800bfdc:	781b      	ldrb	r3, [r3, #0]
 800bfde:	1cfa      	adds	r2, r7, #3
 800bfe0:	1c59      	adds	r1, r3, #1
 800bfe2:	7011      	strb	r1, [r2, #0]
 800bfe4:	001a      	movs	r2, r3
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	189b      	adds	r3, r3, r2
 800bfea:	781b      	ldrb	r3, [r3, #0]
 800bfec:	4963      	ldr	r1, [pc, #396]	; (800c17c <ProcessMacCommands+0x3f0>)
 800bfee:	228e      	movs	r2, #142	; 0x8e
 800bff0:	00d2      	lsls	r2, r2, #3
 800bff2:	588a      	ldr	r2, [r1, r2]
 800bff4:	210f      	movs	r1, #15
 800bff6:	400b      	ands	r3, r1
 800bff8:	b2d9      	uxtb	r1, r3
 800bffa:	2312      	movs	r3, #18
 800bffc:	33ff      	adds	r3, #255	; 0xff
 800bffe:	54d1      	strb	r1, [r2, r3]
                MacCtx.NvmCtx->AggregatedDCycle = 1 << MacCtx.NvmCtx->MaxDCycle;
 800c000:	4a5e      	ldr	r2, [pc, #376]	; (800c17c <ProcessMacCommands+0x3f0>)
 800c002:	238e      	movs	r3, #142	; 0x8e
 800c004:	00db      	lsls	r3, r3, #3
 800c006:	58d2      	ldr	r2, [r2, r3]
 800c008:	2312      	movs	r3, #18
 800c00a:	33ff      	adds	r3, #255	; 0xff
 800c00c:	5cd3      	ldrb	r3, [r2, r3]
 800c00e:	001a      	movs	r2, r3
 800c010:	2301      	movs	r3, #1
 800c012:	4093      	lsls	r3, r2
 800c014:	0019      	movs	r1, r3
 800c016:	4a59      	ldr	r2, [pc, #356]	; (800c17c <ProcessMacCommands+0x3f0>)
 800c018:	238e      	movs	r3, #142	; 0x8e
 800c01a:	00db      	lsls	r3, r3, #3
 800c01c:	58d2      	ldr	r2, [r2, r3]
 800c01e:	b289      	uxth	r1, r1
 800c020:	2387      	movs	r3, #135	; 0x87
 800c022:	009b      	lsls	r3, r3, #2
 800c024:	52d1      	strh	r1, [r2, r3]
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 800c026:	2368      	movs	r3, #104	; 0x68
 800c028:	18fb      	adds	r3, r7, r3
 800c02a:	2200      	movs	r2, #0
 800c02c:	0019      	movs	r1, r3
 800c02e:	2004      	movs	r0, #4
 800c030:	f003 ffe6 	bl	8010000 <LoRaMacCommandsAddCmd>
 800c034:	2287      	movs	r2, #135	; 0x87
 800c036:	18bb      	adds	r3, r7, r2
 800c038:	18ba      	adds	r2, r7, r2
 800c03a:	7812      	ldrb	r2, [r2, #0]
 800c03c:	701a      	strb	r2, [r3, #0]
                break;
 800c03e:	f000 fc40 	bl	800c8c2 <ProcessMacCommands+0xb36>
            }
            case SRV_MAC_RX_PARAM_SETUP_REQ:
            {
                RxParamSetupReqParams_t rxParamSetupReq;
                status = 0x07;
 800c042:	246b      	movs	r4, #107	; 0x6b
 800c044:	193b      	adds	r3, r7, r4
 800c046:	2207      	movs	r2, #7
 800c048:	701a      	strb	r2, [r3, #0]

                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 800c04a:	1cfb      	adds	r3, r7, #3
 800c04c:	781b      	ldrb	r3, [r3, #0]
 800c04e:	687a      	ldr	r2, [r7, #4]
 800c050:	18d3      	adds	r3, r2, r3
 800c052:	781b      	ldrb	r3, [r3, #0]
 800c054:	091b      	lsrs	r3, r3, #4
 800c056:	b2db      	uxtb	r3, r3
 800c058:	b25b      	sxtb	r3, r3
 800c05a:	2207      	movs	r2, #7
 800c05c:	4013      	ands	r3, r2
 800c05e:	b25a      	sxtb	r2, r3
 800c060:	204c      	movs	r0, #76	; 0x4c
 800c062:	183b      	adds	r3, r7, r0
 800c064:	705a      	strb	r2, [r3, #1]
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 800c066:	1cfb      	adds	r3, r7, #3
 800c068:	781b      	ldrb	r3, [r3, #0]
 800c06a:	687a      	ldr	r2, [r7, #4]
 800c06c:	18d3      	adds	r3, r2, r3
 800c06e:	781b      	ldrb	r3, [r3, #0]
 800c070:	b25b      	sxtb	r3, r3
 800c072:	220f      	movs	r2, #15
 800c074:	4013      	ands	r3, r2
 800c076:	b25a      	sxtb	r2, r3
 800c078:	183b      	adds	r3, r7, r0
 800c07a:	701a      	strb	r2, [r3, #0]
                macIndex++;
 800c07c:	1cfb      	adds	r3, r7, #3
 800c07e:	781a      	ldrb	r2, [r3, #0]
 800c080:	1cfb      	adds	r3, r7, #3
 800c082:	3201      	adds	r2, #1
 800c084:	701a      	strb	r2, [r3, #0]

                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 800c086:	1cfb      	adds	r3, r7, #3
 800c088:	781b      	ldrb	r3, [r3, #0]
 800c08a:	1cfa      	adds	r2, r7, #3
 800c08c:	1c59      	adds	r1, r3, #1
 800c08e:	7011      	strb	r1, [r2, #0]
 800c090:	001a      	movs	r2, r3
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	189b      	adds	r3, r3, r2
 800c096:	781b      	ldrb	r3, [r3, #0]
 800c098:	001a      	movs	r2, r3
 800c09a:	183b      	adds	r3, r7, r0
 800c09c:	605a      	str	r2, [r3, #4]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800c09e:	1cfb      	adds	r3, r7, #3
 800c0a0:	781b      	ldrb	r3, [r3, #0]
 800c0a2:	1cfa      	adds	r2, r7, #3
 800c0a4:	1c59      	adds	r1, r3, #1
 800c0a6:	7011      	strb	r1, [r2, #0]
 800c0a8:	001a      	movs	r2, r3
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	189b      	adds	r3, r3, r2
 800c0ae:	781b      	ldrb	r3, [r3, #0]
 800c0b0:	021a      	lsls	r2, r3, #8
 800c0b2:	183b      	adds	r3, r7, r0
 800c0b4:	685b      	ldr	r3, [r3, #4]
 800c0b6:	431a      	orrs	r2, r3
 800c0b8:	183b      	adds	r3, r7, r0
 800c0ba:	605a      	str	r2, [r3, #4]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800c0bc:	1cfb      	adds	r3, r7, #3
 800c0be:	781b      	ldrb	r3, [r3, #0]
 800c0c0:	1cfa      	adds	r2, r7, #3
 800c0c2:	1c59      	adds	r1, r3, #1
 800c0c4:	7011      	strb	r1, [r2, #0]
 800c0c6:	001a      	movs	r2, r3
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	189b      	adds	r3, r3, r2
 800c0cc:	781b      	ldrb	r3, [r3, #0]
 800c0ce:	041a      	lsls	r2, r3, #16
 800c0d0:	0001      	movs	r1, r0
 800c0d2:	187b      	adds	r3, r7, r1
 800c0d4:	685b      	ldr	r3, [r3, #4]
 800c0d6:	431a      	orrs	r2, r3
 800c0d8:	187b      	adds	r3, r7, r1
 800c0da:	605a      	str	r2, [r3, #4]
                rxParamSetupReq.Frequency *= 100;
 800c0dc:	187b      	adds	r3, r7, r1
 800c0de:	685b      	ldr	r3, [r3, #4]
 800c0e0:	2264      	movs	r2, #100	; 0x64
 800c0e2:	435a      	muls	r2, r3
 800c0e4:	187b      	adds	r3, r7, r1
 800c0e6:	605a      	str	r2, [r3, #4]

                // Perform request on region
                status = RegionRxParamSetupReq( MacCtx.NvmCtx->Region, &rxParamSetupReq );
 800c0e8:	4a24      	ldr	r2, [pc, #144]	; (800c17c <ProcessMacCommands+0x3f0>)
 800c0ea:	238e      	movs	r3, #142	; 0x8e
 800c0ec:	00db      	lsls	r3, r3, #3
 800c0ee:	58d3      	ldr	r3, [r2, r3]
 800c0f0:	781b      	ldrb	r3, [r3, #0]
 800c0f2:	187a      	adds	r2, r7, r1
 800c0f4:	0011      	movs	r1, r2
 800c0f6:	0018      	movs	r0, r3
 800c0f8:	f006 fe5b 	bl	8012db2 <RegionRxParamSetupReq>
 800c0fc:	0003      	movs	r3, r0
 800c0fe:	001a      	movs	r2, r3
 800c100:	193b      	adds	r3, r7, r4
 800c102:	701a      	strb	r2, [r3, #0]

                if( ( status & 0x07 ) == 0x07 )
 800c104:	193b      	adds	r3, r7, r4
 800c106:	781b      	ldrb	r3, [r3, #0]
 800c108:	001a      	movs	r2, r3
 800c10a:	2307      	movs	r3, #7
 800c10c:	4013      	ands	r3, r2
 800c10e:	2b07      	cmp	r3, #7
 800c110:	d11c      	bne.n	800c14c <ProcessMacCommands+0x3c0>
                {
                    MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 800c112:	204c      	movs	r0, #76	; 0x4c
 800c114:	183b      	adds	r3, r7, r0
 800c116:	2100      	movs	r1, #0
 800c118:	5659      	ldrsb	r1, [r3, r1]
 800c11a:	4a18      	ldr	r2, [pc, #96]	; (800c17c <ProcessMacCommands+0x3f0>)
 800c11c:	238e      	movs	r3, #142	; 0x8e
 800c11e:	00db      	lsls	r3, r3, #3
 800c120:	58d3      	ldr	r3, [r2, r3]
 800c122:	b2c9      	uxtb	r1, r1
 800c124:	22fc      	movs	r2, #252	; 0xfc
 800c126:	5499      	strb	r1, [r3, r2]
                    MacCtx.NvmCtx->MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 800c128:	4a14      	ldr	r2, [pc, #80]	; (800c17c <ProcessMacCommands+0x3f0>)
 800c12a:	238e      	movs	r3, #142	; 0x8e
 800c12c:	00db      	lsls	r3, r3, #3
 800c12e:	58d2      	ldr	r2, [r2, r3]
 800c130:	183b      	adds	r3, r7, r0
 800c132:	685b      	ldr	r3, [r3, #4]
 800c134:	21f8      	movs	r1, #248	; 0xf8
 800c136:	5053      	str	r3, [r2, r1]
                    MacCtx.NvmCtx->MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 800c138:	183b      	adds	r3, r7, r0
 800c13a:	2101      	movs	r1, #1
 800c13c:	5659      	ldrsb	r1, [r3, r1]
 800c13e:	4a0f      	ldr	r2, [pc, #60]	; (800c17c <ProcessMacCommands+0x3f0>)
 800c140:	238e      	movs	r3, #142	; 0x8e
 800c142:	00db      	lsls	r3, r3, #3
 800c144:	58d3      	ldr	r3, [r2, r3]
 800c146:	b2c9      	uxtb	r1, r1
 800c148:	22f5      	movs	r2, #245	; 0xf5
 800c14a:	5499      	strb	r1, [r3, r2]
                }
                macCmdPayload[0] = status;
 800c14c:	236b      	movs	r3, #107	; 0x6b
 800c14e:	18fb      	adds	r3, r7, r3
 800c150:	781a      	ldrb	r2, [r3, #0]
 800c152:	2168      	movs	r1, #104	; 0x68
 800c154:	187b      	adds	r3, r7, r1
 800c156:	701a      	strb	r2, [r3, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 800c158:	187b      	adds	r3, r7, r1
 800c15a:	2201      	movs	r2, #1
 800c15c:	0019      	movs	r1, r3
 800c15e:	2005      	movs	r0, #5
 800c160:	f003 ff4e 	bl	8010000 <LoRaMacCommandsAddCmd>
                // Setup indication to inform the application
                SetMlmeScheduleUplinkIndication( );
 800c164:	f7ff fdfc 	bl	800bd60 <SetMlmeScheduleUplinkIndication>
                break;
 800c168:	46c0      	nop			; (mov r8, r8)
 800c16a:	2287      	movs	r2, #135	; 0x87
 800c16c:	18bb      	adds	r3, r7, r2
 800c16e:	18ba      	adds	r2, r7, r2
 800c170:	7812      	ldrb	r2, [r2, #0]
 800c172:	701a      	strb	r2, [r3, #0]
 800c174:	e3a5      	b.n	800c8c2 <ProcessMacCommands+0xb36>
 800c176:	46c0      	nop			; (mov r8, r8)
 800c178:	0802089c 	.word	0x0802089c
 800c17c:	2000070c 	.word	0x2000070c
 800c180:	00000449 	.word	0x00000449
            }
            case SRV_MAC_DEV_STATUS_REQ:
            {
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 800c184:	2385      	movs	r3, #133	; 0x85
 800c186:	18fb      	adds	r3, r7, r3
 800c188:	22ff      	movs	r2, #255	; 0xff
 800c18a:	701a      	strb	r2, [r3, #0]
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 800c18c:	4ac5      	ldr	r2, [pc, #788]	; (800c4a4 <ProcessMacCommands+0x718>)
 800c18e:	23d7      	movs	r3, #215	; 0xd7
 800c190:	009b      	lsls	r3, r3, #2
 800c192:	58d3      	ldr	r3, [r2, r3]
 800c194:	2b00      	cmp	r3, #0
 800c196:	d010      	beq.n	800c1ba <ProcessMacCommands+0x42e>
 800c198:	4ac2      	ldr	r2, [pc, #776]	; (800c4a4 <ProcessMacCommands+0x718>)
 800c19a:	23d7      	movs	r3, #215	; 0xd7
 800c19c:	009b      	lsls	r3, r3, #2
 800c19e:	58d3      	ldr	r3, [r2, r3]
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d009      	beq.n	800c1ba <ProcessMacCommands+0x42e>
                {
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 800c1a6:	4abf      	ldr	r2, [pc, #764]	; (800c4a4 <ProcessMacCommands+0x718>)
 800c1a8:	23d7      	movs	r3, #215	; 0xd7
 800c1aa:	009b      	lsls	r3, r3, #2
 800c1ac:	58d3      	ldr	r3, [r2, r3]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	2285      	movs	r2, #133	; 0x85
 800c1b2:	18bc      	adds	r4, r7, r2
 800c1b4:	4798      	blx	r3
 800c1b6:	0003      	movs	r3, r0
 800c1b8:	7023      	strb	r3, [r4, #0]
                }
                macCmdPayload[0] = batteryLevel;
 800c1ba:	2168      	movs	r1, #104	; 0x68
 800c1bc:	187b      	adds	r3, r7, r1
 800c1be:	2285      	movs	r2, #133	; 0x85
 800c1c0:	18ba      	adds	r2, r7, r2
 800c1c2:	7812      	ldrb	r2, [r2, #0]
 800c1c4:	701a      	strb	r2, [r3, #0]
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 800c1c6:	1c7b      	adds	r3, r7, #1
 800c1c8:	781b      	ldrb	r3, [r3, #0]
 800c1ca:	223f      	movs	r2, #63	; 0x3f
 800c1cc:	4013      	ands	r3, r2
 800c1ce:	b2da      	uxtb	r2, r3
 800c1d0:	187b      	adds	r3, r7, r1
 800c1d2:	705a      	strb	r2, [r3, #1]
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 800c1d4:	187b      	adds	r3, r7, r1
 800c1d6:	2202      	movs	r2, #2
 800c1d8:	0019      	movs	r1, r3
 800c1da:	2006      	movs	r0, #6
 800c1dc:	f003 ff10 	bl	8010000 <LoRaMacCommandsAddCmd>
 800c1e0:	2287      	movs	r2, #135	; 0x87
 800c1e2:	18bb      	adds	r3, r7, r2
 800c1e4:	18ba      	adds	r2, r7, r2
 800c1e6:	7812      	ldrb	r2, [r2, #0]
 800c1e8:	701a      	strb	r2, [r3, #0]
                break;
 800c1ea:	e36a      	b.n	800c8c2 <ProcessMacCommands+0xb36>
            }
            case SRV_MAC_NEW_CHANNEL_REQ:
            {
                NewChannelReqParams_t newChannelReq;
                ChannelParams_t chParam;
                status = 0x03;
 800c1ec:	246b      	movs	r4, #107	; 0x6b
 800c1ee:	193b      	adds	r3, r7, r4
 800c1f0:	2203      	movs	r2, #3
 800c1f2:	701a      	strb	r2, [r3, #0]

                newChannelReq.ChannelId = payload[macIndex++];
 800c1f4:	1cfb      	adds	r3, r7, #3
 800c1f6:	781b      	ldrb	r3, [r3, #0]
 800c1f8:	1cfa      	adds	r2, r7, #3
 800c1fa:	1c59      	adds	r1, r3, #1
 800c1fc:	7011      	strb	r1, [r2, #0]
 800c1fe:	001a      	movs	r2, r3
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	189b      	adds	r3, r3, r2
 800c204:	781b      	ldrb	r3, [r3, #0]
 800c206:	b25a      	sxtb	r2, r3
 800c208:	2544      	movs	r5, #68	; 0x44
 800c20a:	197b      	adds	r3, r7, r5
 800c20c:	711a      	strb	r2, [r3, #4]
                newChannelReq.NewChannel = &chParam;
 800c20e:	197b      	adds	r3, r7, r5
 800c210:	2038      	movs	r0, #56	; 0x38
 800c212:	183a      	adds	r2, r7, r0
 800c214:	601a      	str	r2, [r3, #0]

                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 800c216:	1cfb      	adds	r3, r7, #3
 800c218:	781b      	ldrb	r3, [r3, #0]
 800c21a:	1cfa      	adds	r2, r7, #3
 800c21c:	1c59      	adds	r1, r3, #1
 800c21e:	7011      	strb	r1, [r2, #0]
 800c220:	001a      	movs	r2, r3
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	189b      	adds	r3, r3, r2
 800c226:	781b      	ldrb	r3, [r3, #0]
 800c228:	001a      	movs	r2, r3
 800c22a:	183b      	adds	r3, r7, r0
 800c22c:	601a      	str	r2, [r3, #0]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800c22e:	1cfb      	adds	r3, r7, #3
 800c230:	781b      	ldrb	r3, [r3, #0]
 800c232:	1cfa      	adds	r2, r7, #3
 800c234:	1c59      	adds	r1, r3, #1
 800c236:	7011      	strb	r1, [r2, #0]
 800c238:	001a      	movs	r2, r3
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	189b      	adds	r3, r3, r2
 800c23e:	781b      	ldrb	r3, [r3, #0]
 800c240:	021a      	lsls	r2, r3, #8
 800c242:	183b      	adds	r3, r7, r0
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	431a      	orrs	r2, r3
 800c248:	183b      	adds	r3, r7, r0
 800c24a:	601a      	str	r2, [r3, #0]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800c24c:	1cfb      	adds	r3, r7, #3
 800c24e:	781b      	ldrb	r3, [r3, #0]
 800c250:	1cfa      	adds	r2, r7, #3
 800c252:	1c59      	adds	r1, r3, #1
 800c254:	7011      	strb	r1, [r2, #0]
 800c256:	001a      	movs	r2, r3
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	189b      	adds	r3, r3, r2
 800c25c:	781b      	ldrb	r3, [r3, #0]
 800c25e:	041a      	lsls	r2, r3, #16
 800c260:	183b      	adds	r3, r7, r0
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	431a      	orrs	r2, r3
 800c266:	183b      	adds	r3, r7, r0
 800c268:	601a      	str	r2, [r3, #0]
                chParam.Frequency *= 100;
 800c26a:	183b      	adds	r3, r7, r0
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	2264      	movs	r2, #100	; 0x64
 800c270:	435a      	muls	r2, r3
 800c272:	183b      	adds	r3, r7, r0
 800c274:	601a      	str	r2, [r3, #0]
                chParam.Rx1Frequency = 0;
 800c276:	183b      	adds	r3, r7, r0
 800c278:	2200      	movs	r2, #0
 800c27a:	605a      	str	r2, [r3, #4]
                chParam.DrRange.Value = payload[macIndex++];
 800c27c:	1cfb      	adds	r3, r7, #3
 800c27e:	781b      	ldrb	r3, [r3, #0]
 800c280:	1cfa      	adds	r2, r7, #3
 800c282:	1c59      	adds	r1, r3, #1
 800c284:	7011      	strb	r1, [r2, #0]
 800c286:	001a      	movs	r2, r3
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	189b      	adds	r3, r3, r2
 800c28c:	781b      	ldrb	r3, [r3, #0]
 800c28e:	b25a      	sxtb	r2, r3
 800c290:	183b      	adds	r3, r7, r0
 800c292:	721a      	strb	r2, [r3, #8]

                status = RegionNewChannelReq( MacCtx.NvmCtx->Region, &newChannelReq );
 800c294:	4a83      	ldr	r2, [pc, #524]	; (800c4a4 <ProcessMacCommands+0x718>)
 800c296:	238e      	movs	r3, #142	; 0x8e
 800c298:	00db      	lsls	r3, r3, #3
 800c29a:	58d3      	ldr	r3, [r2, r3]
 800c29c:	781b      	ldrb	r3, [r3, #0]
 800c29e:	197a      	adds	r2, r7, r5
 800c2a0:	0011      	movs	r1, r2
 800c2a2:	0018      	movs	r0, r3
 800c2a4:	f006 fd9b 	bl	8012dde <RegionNewChannelReq>
 800c2a8:	0003      	movs	r3, r0
 800c2aa:	001a      	movs	r2, r3
 800c2ac:	193b      	adds	r3, r7, r4
 800c2ae:	701a      	strb	r2, [r3, #0]

                macCmdPayload[0] = status;
 800c2b0:	193b      	adds	r3, r7, r4
 800c2b2:	781a      	ldrb	r2, [r3, #0]
 800c2b4:	2168      	movs	r1, #104	; 0x68
 800c2b6:	187b      	adds	r3, r7, r1
 800c2b8:	701a      	strb	r2, [r3, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 800c2ba:	187b      	adds	r3, r7, r1
 800c2bc:	2201      	movs	r2, #1
 800c2be:	0019      	movs	r1, r3
 800c2c0:	2007      	movs	r0, #7
 800c2c2:	f003 fe9d 	bl	8010000 <LoRaMacCommandsAddCmd>
                break;
 800c2c6:	46c0      	nop			; (mov r8, r8)
 800c2c8:	2287      	movs	r2, #135	; 0x87
 800c2ca:	18bb      	adds	r3, r7, r2
 800c2cc:	18ba      	adds	r2, r7, r2
 800c2ce:	7812      	ldrb	r2, [r2, #0]
 800c2d0:	701a      	strb	r2, [r3, #0]
 800c2d2:	e2f6      	b.n	800c8c2 <ProcessMacCommands+0xb36>
            }
            case SRV_MAC_RX_TIMING_SETUP_REQ:
            {
                uint8_t delay = payload[macIndex++] & 0x0F;
 800c2d4:	1cfb      	adds	r3, r7, #3
 800c2d6:	781b      	ldrb	r3, [r3, #0]
 800c2d8:	1cfa      	adds	r2, r7, #3
 800c2da:	1c59      	adds	r1, r3, #1
 800c2dc:	7011      	strb	r1, [r2, #0]
 800c2de:	001a      	movs	r2, r3
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	189b      	adds	r3, r3, r2
 800c2e4:	781a      	ldrb	r2, [r3, #0]
 800c2e6:	2084      	movs	r0, #132	; 0x84
 800c2e8:	183b      	adds	r3, r7, r0
 800c2ea:	210f      	movs	r1, #15
 800c2ec:	400a      	ands	r2, r1
 800c2ee:	701a      	strb	r2, [r3, #0]

                if( delay == 0 )
 800c2f0:	183b      	adds	r3, r7, r0
 800c2f2:	781b      	ldrb	r3, [r3, #0]
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d105      	bne.n	800c304 <ProcessMacCommands+0x578>
                {
                    delay++;
 800c2f8:	2184      	movs	r1, #132	; 0x84
 800c2fa:	187b      	adds	r3, r7, r1
 800c2fc:	781a      	ldrb	r2, [r3, #0]
 800c2fe:	187b      	adds	r3, r7, r1
 800c300:	3201      	adds	r2, #1
 800c302:	701a      	strb	r2, [r3, #0]
                }
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 = delay * 1000;
 800c304:	2384      	movs	r3, #132	; 0x84
 800c306:	18fb      	adds	r3, r7, r3
 800c308:	781a      	ldrb	r2, [r3, #0]
 800c30a:	0013      	movs	r3, r2
 800c30c:	015b      	lsls	r3, r3, #5
 800c30e:	1a9b      	subs	r3, r3, r2
 800c310:	009b      	lsls	r3, r3, #2
 800c312:	189b      	adds	r3, r3, r2
 800c314:	00db      	lsls	r3, r3, #3
 800c316:	0019      	movs	r1, r3
 800c318:	4a62      	ldr	r2, [pc, #392]	; (800c4a4 <ProcessMacCommands+0x718>)
 800c31a:	238e      	movs	r3, #142	; 0x8e
 800c31c:	00db      	lsls	r3, r3, #3
 800c31e:	58d3      	ldr	r3, [r2, r3]
 800c320:	22e4      	movs	r2, #228	; 0xe4
 800c322:	5099      	str	r1, [r3, r2]
                MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + 1000;
 800c324:	4a5f      	ldr	r2, [pc, #380]	; (800c4a4 <ProcessMacCommands+0x718>)
 800c326:	238e      	movs	r3, #142	; 0x8e
 800c328:	00db      	lsls	r3, r3, #3
 800c32a:	58d3      	ldr	r3, [r2, r3]
 800c32c:	22e4      	movs	r2, #228	; 0xe4
 800c32e:	589a      	ldr	r2, [r3, r2]
 800c330:	495c      	ldr	r1, [pc, #368]	; (800c4a4 <ProcessMacCommands+0x718>)
 800c332:	238e      	movs	r3, #142	; 0x8e
 800c334:	00db      	lsls	r3, r3, #3
 800c336:	58cb      	ldr	r3, [r1, r3]
 800c338:	21fa      	movs	r1, #250	; 0xfa
 800c33a:	0089      	lsls	r1, r1, #2
 800c33c:	468c      	mov	ip, r1
 800c33e:	4462      	add	r2, ip
 800c340:	21e8      	movs	r1, #232	; 0xe8
 800c342:	505a      	str	r2, [r3, r1]
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 800c344:	2368      	movs	r3, #104	; 0x68
 800c346:	18fb      	adds	r3, r7, r3
 800c348:	2200      	movs	r2, #0
 800c34a:	0019      	movs	r1, r3
 800c34c:	2008      	movs	r0, #8
 800c34e:	f003 fe57 	bl	8010000 <LoRaMacCommandsAddCmd>
                // Setup indication to inform the application
                SetMlmeScheduleUplinkIndication( );
 800c352:	f7ff fd05 	bl	800bd60 <SetMlmeScheduleUplinkIndication>
 800c356:	2287      	movs	r2, #135	; 0x87
 800c358:	18bb      	adds	r3, r7, r2
 800c35a:	18ba      	adds	r2, r7, r2
 800c35c:	7812      	ldrb	r2, [r2, #0]
 800c35e:	701a      	strb	r2, [r3, #0]
                break;
 800c360:	e2af      	b.n	800c8c2 <ProcessMacCommands+0xb36>
            case SRV_MAC_TX_PARAM_SETUP_REQ:
            {
                TxParamSetupReqParams_t txParamSetupReq;
                GetPhyParams_t getPhy;
                PhyParam_t phyParam;
                uint8_t eirpDwellTime = payload[macIndex++];
 800c362:	1cfb      	adds	r3, r7, #3
 800c364:	781b      	ldrb	r3, [r3, #0]
 800c366:	1cfa      	adds	r2, r7, #3
 800c368:	1c59      	adds	r1, r3, #1
 800c36a:	7011      	strb	r1, [r2, #0]
 800c36c:	001a      	movs	r2, r3
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	189a      	adds	r2, r3, r2
 800c372:	2176      	movs	r1, #118	; 0x76
 800c374:	187b      	adds	r3, r7, r1
 800c376:	7812      	ldrb	r2, [r2, #0]
 800c378:	701a      	strb	r2, [r3, #0]

                txParamSetupReq.UplinkDwellTime = 0;
 800c37a:	2034      	movs	r0, #52	; 0x34
 800c37c:	183b      	adds	r3, r7, r0
 800c37e:	2200      	movs	r2, #0
 800c380:	701a      	strb	r2, [r3, #0]
                txParamSetupReq.DownlinkDwellTime = 0;
 800c382:	183b      	adds	r3, r7, r0
 800c384:	2200      	movs	r2, #0
 800c386:	705a      	strb	r2, [r3, #1]

                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 800c388:	187b      	adds	r3, r7, r1
 800c38a:	781b      	ldrb	r3, [r3, #0]
 800c38c:	2220      	movs	r2, #32
 800c38e:	4013      	ands	r3, r2
 800c390:	d003      	beq.n	800c39a <ProcessMacCommands+0x60e>
                {
                    txParamSetupReq.DownlinkDwellTime = 1;
 800c392:	2334      	movs	r3, #52	; 0x34
 800c394:	18fb      	adds	r3, r7, r3
 800c396:	2201      	movs	r2, #1
 800c398:	705a      	strb	r2, [r3, #1]
                }
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 800c39a:	2376      	movs	r3, #118	; 0x76
 800c39c:	18fb      	adds	r3, r7, r3
 800c39e:	781b      	ldrb	r3, [r3, #0]
 800c3a0:	2210      	movs	r2, #16
 800c3a2:	4013      	ands	r3, r2
 800c3a4:	d003      	beq.n	800c3ae <ProcessMacCommands+0x622>
                {
                    txParamSetupReq.UplinkDwellTime = 1;
 800c3a6:	2334      	movs	r3, #52	; 0x34
 800c3a8:	18fb      	adds	r3, r7, r3
 800c3aa:	2201      	movs	r2, #1
 800c3ac:	701a      	strb	r2, [r3, #0]
                }
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 800c3ae:	2376      	movs	r3, #118	; 0x76
 800c3b0:	18fb      	adds	r3, r7, r3
 800c3b2:	781b      	ldrb	r3, [r3, #0]
 800c3b4:	220f      	movs	r2, #15
 800c3b6:	4013      	ands	r3, r2
 800c3b8:	b2da      	uxtb	r2, r3
 800c3ba:	2134      	movs	r1, #52	; 0x34
 800c3bc:	187b      	adds	r3, r7, r1
 800c3be:	709a      	strb	r2, [r3, #2]

                // Check the status for correctness
                if( RegionTxParamSetupReq( MacCtx.NvmCtx->Region, &txParamSetupReq ) != -1 )
 800c3c0:	4a38      	ldr	r2, [pc, #224]	; (800c4a4 <ProcessMacCommands+0x718>)
 800c3c2:	238e      	movs	r3, #142	; 0x8e
 800c3c4:	00db      	lsls	r3, r3, #3
 800c3c6:	58d3      	ldr	r3, [r2, r3]
 800c3c8:	781b      	ldrb	r3, [r3, #0]
 800c3ca:	187a      	adds	r2, r7, r1
 800c3cc:	0011      	movs	r1, r2
 800c3ce:	0018      	movs	r0, r3
 800c3d0:	f006 fd1b 	bl	8012e0a <RegionTxParamSetupReq>
 800c3d4:	0003      	movs	r3, r0
 800c3d6:	3301      	adds	r3, #1
 800c3d8:	d05c      	beq.n	800c494 <ProcessMacCommands+0x708>
                {
                    // Accept command
                    MacCtx.NvmCtx->MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 800c3da:	4a32      	ldr	r2, [pc, #200]	; (800c4a4 <ProcessMacCommands+0x718>)
 800c3dc:	238e      	movs	r3, #142	; 0x8e
 800c3de:	00db      	lsls	r3, r3, #3
 800c3e0:	58d2      	ldr	r2, [r2, r3]
 800c3e2:	2034      	movs	r0, #52	; 0x34
 800c3e4:	183b      	adds	r3, r7, r0
 800c3e6:	7819      	ldrb	r1, [r3, #0]
 800c3e8:	2380      	movs	r3, #128	; 0x80
 800c3ea:	005b      	lsls	r3, r3, #1
 800c3ec:	54d1      	strb	r1, [r2, r3]
                    MacCtx.NvmCtx->MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 800c3ee:	4a2d      	ldr	r2, [pc, #180]	; (800c4a4 <ProcessMacCommands+0x718>)
 800c3f0:	238e      	movs	r3, #142	; 0x8e
 800c3f2:	00db      	lsls	r3, r3, #3
 800c3f4:	58d2      	ldr	r2, [r2, r3]
 800c3f6:	183b      	adds	r3, r7, r0
 800c3f8:	7859      	ldrb	r1, [r3, #1]
 800c3fa:	2302      	movs	r3, #2
 800c3fc:	33ff      	adds	r3, #255	; 0xff
 800c3fe:	54d1      	strb	r1, [r2, r3]
                    MacCtx.NvmCtx->MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 800c400:	183b      	adds	r3, r7, r0
 800c402:	789b      	ldrb	r3, [r3, #2]
 800c404:	001a      	movs	r2, r3
 800c406:	4b28      	ldr	r3, [pc, #160]	; (800c4a8 <ProcessMacCommands+0x71c>)
 800c408:	5c99      	ldrb	r1, [r3, r2]
 800c40a:	4a26      	ldr	r2, [pc, #152]	; (800c4a4 <ProcessMacCommands+0x718>)
 800c40c:	238e      	movs	r3, #142	; 0x8e
 800c40e:	00db      	lsls	r3, r3, #3
 800c410:	58d4      	ldr	r4, [r2, r3]
 800c412:	0008      	movs	r0, r1
 800c414:	f7f4 fb62 	bl	8000adc <__aeabi_ui2f>
 800c418:	1c02      	adds	r2, r0, #0
 800c41a:	2382      	movs	r3, #130	; 0x82
 800c41c:	005b      	lsls	r3, r3, #1
 800c41e:	50e2      	str	r2, [r4, r3]
                    // Update the datarate in case of the new configuration limits it
                    getPhy.Attribute = PHY_MIN_TX_DR;
 800c420:	2130      	movs	r1, #48	; 0x30
 800c422:	187b      	adds	r3, r7, r1
 800c424:	2201      	movs	r2, #1
 800c426:	701a      	strb	r2, [r3, #0]
                    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800c428:	4a1e      	ldr	r2, [pc, #120]	; (800c4a4 <ProcessMacCommands+0x718>)
 800c42a:	238e      	movs	r3, #142	; 0x8e
 800c42c:	00db      	lsls	r3, r3, #3
 800c42e:	58d2      	ldr	r2, [r2, r3]
 800c430:	2380      	movs	r3, #128	; 0x80
 800c432:	005b      	lsls	r3, r3, #1
 800c434:	5cd2      	ldrb	r2, [r2, r3]
 800c436:	187b      	adds	r3, r7, r1
 800c438:	709a      	strb	r2, [r3, #2]
                    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800c43a:	4a1a      	ldr	r2, [pc, #104]	; (800c4a4 <ProcessMacCommands+0x718>)
 800c43c:	238e      	movs	r3, #142	; 0x8e
 800c43e:	00db      	lsls	r3, r3, #3
 800c440:	58d3      	ldr	r3, [r2, r3]
 800c442:	781b      	ldrb	r3, [r3, #0]
 800c444:	187a      	adds	r2, r7, r1
 800c446:	0011      	movs	r1, r2
 800c448:	0018      	movs	r0, r3
 800c44a:	f006 fb8c 	bl	8012b66 <RegionGetPhyParam>
 800c44e:	0003      	movs	r3, r0
 800c450:	001a      	movs	r2, r3
 800c452:	212c      	movs	r1, #44	; 0x2c
 800c454:	187b      	adds	r3, r7, r1
 800c456:	601a      	str	r2, [r3, #0]
                    MacCtx.NvmCtx->MacParams.ChannelsDatarate = MAX( MacCtx.NvmCtx->MacParams.ChannelsDatarate, ( int8_t )phyParam.Value );
 800c458:	187b      	adds	r3, r7, r1
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	b259      	sxtb	r1, r3
 800c45e:	4a11      	ldr	r2, [pc, #68]	; (800c4a4 <ProcessMacCommands+0x718>)
 800c460:	238e      	movs	r3, #142	; 0x8e
 800c462:	00db      	lsls	r3, r3, #3
 800c464:	58d3      	ldr	r3, [r2, r3]
 800c466:	22d5      	movs	r2, #213	; 0xd5
 800c468:	5698      	ldrsb	r0, [r3, r2]
 800c46a:	4a0e      	ldr	r2, [pc, #56]	; (800c4a4 <ProcessMacCommands+0x718>)
 800c46c:	238e      	movs	r3, #142	; 0x8e
 800c46e:	00db      	lsls	r3, r3, #3
 800c470:	58d3      	ldr	r3, [r2, r3]
 800c472:	1c04      	adds	r4, r0, #0
 800c474:	1c08      	adds	r0, r1, #0
 800c476:	b241      	sxtb	r1, r0
 800c478:	b262      	sxtb	r2, r4
 800c47a:	4291      	cmp	r1, r2
 800c47c:	da00      	bge.n	800c480 <ProcessMacCommands+0x6f4>
 800c47e:	1c20      	adds	r0, r4, #0
 800c480:	b241      	sxtb	r1, r0
 800c482:	22d5      	movs	r2, #213	; 0xd5
 800c484:	5499      	strb	r1, [r3, r2]

                    // Add command response
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 800c486:	2368      	movs	r3, #104	; 0x68
 800c488:	18fb      	adds	r3, r7, r3
 800c48a:	2200      	movs	r2, #0
 800c48c:	0019      	movs	r1, r3
 800c48e:	2009      	movs	r0, #9
 800c490:	f003 fdb6 	bl	8010000 <LoRaMacCommandsAddCmd>
                }
                break;
 800c494:	46c0      	nop			; (mov r8, r8)
 800c496:	2287      	movs	r2, #135	; 0x87
 800c498:	18bb      	adds	r3, r7, r2
 800c49a:	18ba      	adds	r2, r7, r2
 800c49c:	7812      	ldrb	r2, [r2, #0]
 800c49e:	701a      	strb	r2, [r3, #0]
 800c4a0:	e20f      	b.n	800c8c2 <ProcessMacCommands+0xb36>
 800c4a2:	46c0      	nop			; (mov r8, r8)
 800c4a4:	2000070c 	.word	0x2000070c
 800c4a8:	0802088c 	.word	0x0802088c
            }
            case SRV_MAC_DL_CHANNEL_REQ:
            {
                DlChannelReqParams_t dlChannelReq;
                status = 0x03;
 800c4ac:	246b      	movs	r4, #107	; 0x6b
 800c4ae:	193b      	adds	r3, r7, r4
 800c4b0:	2203      	movs	r2, #3
 800c4b2:	701a      	strb	r2, [r3, #0]

                dlChannelReq.ChannelId = payload[macIndex++];
 800c4b4:	1cfb      	adds	r3, r7, #3
 800c4b6:	781b      	ldrb	r3, [r3, #0]
 800c4b8:	1cfa      	adds	r2, r7, #3
 800c4ba:	1c59      	adds	r1, r3, #1
 800c4bc:	7011      	strb	r1, [r2, #0]
 800c4be:	001a      	movs	r2, r3
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	189b      	adds	r3, r3, r2
 800c4c4:	781a      	ldrb	r2, [r3, #0]
 800c4c6:	2024      	movs	r0, #36	; 0x24
 800c4c8:	183b      	adds	r3, r7, r0
 800c4ca:	701a      	strb	r2, [r3, #0]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 800c4cc:	1cfb      	adds	r3, r7, #3
 800c4ce:	781b      	ldrb	r3, [r3, #0]
 800c4d0:	1cfa      	adds	r2, r7, #3
 800c4d2:	1c59      	adds	r1, r3, #1
 800c4d4:	7011      	strb	r1, [r2, #0]
 800c4d6:	001a      	movs	r2, r3
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	189b      	adds	r3, r3, r2
 800c4dc:	781b      	ldrb	r3, [r3, #0]
 800c4de:	001a      	movs	r2, r3
 800c4e0:	183b      	adds	r3, r7, r0
 800c4e2:	605a      	str	r2, [r3, #4]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800c4e4:	1cfb      	adds	r3, r7, #3
 800c4e6:	781b      	ldrb	r3, [r3, #0]
 800c4e8:	1cfa      	adds	r2, r7, #3
 800c4ea:	1c59      	adds	r1, r3, #1
 800c4ec:	7011      	strb	r1, [r2, #0]
 800c4ee:	001a      	movs	r2, r3
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	189b      	adds	r3, r3, r2
 800c4f4:	781b      	ldrb	r3, [r3, #0]
 800c4f6:	021a      	lsls	r2, r3, #8
 800c4f8:	183b      	adds	r3, r7, r0
 800c4fa:	685b      	ldr	r3, [r3, #4]
 800c4fc:	431a      	orrs	r2, r3
 800c4fe:	183b      	adds	r3, r7, r0
 800c500:	605a      	str	r2, [r3, #4]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800c502:	1cfb      	adds	r3, r7, #3
 800c504:	781b      	ldrb	r3, [r3, #0]
 800c506:	1cfa      	adds	r2, r7, #3
 800c508:	1c59      	adds	r1, r3, #1
 800c50a:	7011      	strb	r1, [r2, #0]
 800c50c:	001a      	movs	r2, r3
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	189b      	adds	r3, r3, r2
 800c512:	781b      	ldrb	r3, [r3, #0]
 800c514:	041a      	lsls	r2, r3, #16
 800c516:	0001      	movs	r1, r0
 800c518:	187b      	adds	r3, r7, r1
 800c51a:	685b      	ldr	r3, [r3, #4]
 800c51c:	431a      	orrs	r2, r3
 800c51e:	187b      	adds	r3, r7, r1
 800c520:	605a      	str	r2, [r3, #4]
                dlChannelReq.Rx1Frequency *= 100;
 800c522:	187b      	adds	r3, r7, r1
 800c524:	685b      	ldr	r3, [r3, #4]
 800c526:	2264      	movs	r2, #100	; 0x64
 800c528:	435a      	muls	r2, r3
 800c52a:	187b      	adds	r3, r7, r1
 800c52c:	605a      	str	r2, [r3, #4]

                status = RegionDlChannelReq( MacCtx.NvmCtx->Region, &dlChannelReq );
 800c52e:	4aeb      	ldr	r2, [pc, #940]	; (800c8dc <ProcessMacCommands+0xb50>)
 800c530:	238e      	movs	r3, #142	; 0x8e
 800c532:	00db      	lsls	r3, r3, #3
 800c534:	58d3      	ldr	r3, [r2, r3]
 800c536:	781b      	ldrb	r3, [r3, #0]
 800c538:	187a      	adds	r2, r7, r1
 800c53a:	0011      	movs	r1, r2
 800c53c:	0018      	movs	r0, r3
 800c53e:	f006 fc7a 	bl	8012e36 <RegionDlChannelReq>
 800c542:	0003      	movs	r3, r0
 800c544:	001a      	movs	r2, r3
 800c546:	193b      	adds	r3, r7, r4
 800c548:	701a      	strb	r2, [r3, #0]
                macCmdPayload[0] = status;
 800c54a:	193b      	adds	r3, r7, r4
 800c54c:	781a      	ldrb	r2, [r3, #0]
 800c54e:	2168      	movs	r1, #104	; 0x68
 800c550:	187b      	adds	r3, r7, r1
 800c552:	701a      	strb	r2, [r3, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 800c554:	187b      	adds	r3, r7, r1
 800c556:	2201      	movs	r2, #1
 800c558:	0019      	movs	r1, r3
 800c55a:	200a      	movs	r0, #10
 800c55c:	f003 fd50 	bl	8010000 <LoRaMacCommandsAddCmd>
                // Setup indication to inform the application
                SetMlmeScheduleUplinkIndication( );
 800c560:	f7ff fbfe 	bl	800bd60 <SetMlmeScheduleUplinkIndication>
                break;
 800c564:	46c0      	nop			; (mov r8, r8)
 800c566:	2287      	movs	r2, #135	; 0x87
 800c568:	18bb      	adds	r3, r7, r2
 800c56a:	18ba      	adds	r2, r7, r2
 800c56c:	7812      	ldrb	r2, [r2, #0]
 800c56e:	701a      	strb	r2, [r3, #0]
 800c570:	e1a7      	b.n	800c8c2 <ProcessMacCommands+0xb36>
            }
            case SRV_MAC_DEVICE_TIME_ANS:
            {
                SysTime_t gpsEpochTime = { 0 };
 800c572:	241c      	movs	r4, #28
 800c574:	193b      	adds	r3, r7, r4
 800c576:	0018      	movs	r0, r3
 800c578:	2308      	movs	r3, #8
 800c57a:	001a      	movs	r2, r3
 800c57c:	2100      	movs	r1, #0
 800c57e:	f011 fe4d 	bl	801e21c <memset>
                SysTime_t sysTime = { 0 };
 800c582:	2514      	movs	r5, #20
 800c584:	197b      	adds	r3, r7, r5
 800c586:	0018      	movs	r0, r3
 800c588:	2308      	movs	r3, #8
 800c58a:	001a      	movs	r2, r3
 800c58c:	2100      	movs	r1, #0
 800c58e:	f011 fe45 	bl	801e21c <memset>
                SysTime_t sysTimeCurrent = { 0 };
 800c592:	260c      	movs	r6, #12
 800c594:	19bb      	adds	r3, r7, r6
 800c596:	0018      	movs	r0, r3
 800c598:	2308      	movs	r3, #8
 800c59a:	001a      	movs	r2, r3
 800c59c:	2100      	movs	r1, #0
 800c59e:	f011 fe3d 	bl	801e21c <memset>

                gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 800c5a2:	1cfb      	adds	r3, r7, #3
 800c5a4:	781b      	ldrb	r3, [r3, #0]
 800c5a6:	1cfa      	adds	r2, r7, #3
 800c5a8:	1c59      	adds	r1, r3, #1
 800c5aa:	7011      	strb	r1, [r2, #0]
 800c5ac:	001a      	movs	r2, r3
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	189b      	adds	r3, r3, r2
 800c5b2:	781b      	ldrb	r3, [r3, #0]
 800c5b4:	001a      	movs	r2, r3
 800c5b6:	0020      	movs	r0, r4
 800c5b8:	183b      	adds	r3, r7, r0
 800c5ba:	601a      	str	r2, [r3, #0]
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 800c5bc:	1cfb      	adds	r3, r7, #3
 800c5be:	781b      	ldrb	r3, [r3, #0]
 800c5c0:	1cfa      	adds	r2, r7, #3
 800c5c2:	1c59      	adds	r1, r3, #1
 800c5c4:	7011      	strb	r1, [r2, #0]
 800c5c6:	001a      	movs	r2, r3
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	189b      	adds	r3, r3, r2
 800c5cc:	781b      	ldrb	r3, [r3, #0]
 800c5ce:	021a      	lsls	r2, r3, #8
 800c5d0:	183b      	adds	r3, r7, r0
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	431a      	orrs	r2, r3
 800c5d6:	183b      	adds	r3, r7, r0
 800c5d8:	601a      	str	r2, [r3, #0]
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 800c5da:	1cfb      	adds	r3, r7, #3
 800c5dc:	781b      	ldrb	r3, [r3, #0]
 800c5de:	1cfa      	adds	r2, r7, #3
 800c5e0:	1c59      	adds	r1, r3, #1
 800c5e2:	7011      	strb	r1, [r2, #0]
 800c5e4:	001a      	movs	r2, r3
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	189b      	adds	r3, r3, r2
 800c5ea:	781b      	ldrb	r3, [r3, #0]
 800c5ec:	041a      	lsls	r2, r3, #16
 800c5ee:	183b      	adds	r3, r7, r0
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	431a      	orrs	r2, r3
 800c5f4:	183b      	adds	r3, r7, r0
 800c5f6:	601a      	str	r2, [r3, #0]
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 800c5f8:	1cfb      	adds	r3, r7, #3
 800c5fa:	781b      	ldrb	r3, [r3, #0]
 800c5fc:	1cfa      	adds	r2, r7, #3
 800c5fe:	1c59      	adds	r1, r3, #1
 800c600:	7011      	strb	r1, [r2, #0]
 800c602:	001a      	movs	r2, r3
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	189b      	adds	r3, r3, r2
 800c608:	781b      	ldrb	r3, [r3, #0]
 800c60a:	061a      	lsls	r2, r3, #24
 800c60c:	183b      	adds	r3, r7, r0
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	431a      	orrs	r2, r3
 800c612:	183b      	adds	r3, r7, r0
 800c614:	601a      	str	r2, [r3, #0]
                gpsEpochTime.SubSeconds = payload[macIndex++];
 800c616:	1cfb      	adds	r3, r7, #3
 800c618:	781b      	ldrb	r3, [r3, #0]
 800c61a:	1cfa      	adds	r2, r7, #3
 800c61c:	1c59      	adds	r1, r3, #1
 800c61e:	7011      	strb	r1, [r2, #0]
 800c620:	001a      	movs	r2, r3
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	189b      	adds	r3, r3, r2
 800c626:	781b      	ldrb	r3, [r3, #0]
 800c628:	b21a      	sxth	r2, r3
 800c62a:	183b      	adds	r3, r7, r0
 800c62c:	809a      	strh	r2, [r3, #4]

                // Convert the fractional second received in ms
                // round( pow( 0.5, 8.0 ) * 1000 ) = 3.90625
                gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 800c62e:	0001      	movs	r1, r0
 800c630:	183b      	adds	r3, r7, r0
 800c632:	2204      	movs	r2, #4
 800c634:	5e9b      	ldrsh	r3, [r3, r2]
 800c636:	001a      	movs	r2, r3
 800c638:	0013      	movs	r3, r2
 800c63a:	015b      	lsls	r3, r3, #5
 800c63c:	1a9b      	subs	r3, r3, r2
 800c63e:	009b      	lsls	r3, r3, #2
 800c640:	189b      	adds	r3, r3, r2
 800c642:	00db      	lsls	r3, r3, #3
 800c644:	121b      	asrs	r3, r3, #8
 800c646:	b21a      	sxth	r2, r3
 800c648:	187b      	adds	r3, r7, r1
 800c64a:	809a      	strh	r2, [r3, #4]

                // Copy received GPS Epoch time into system time
                sysTime = gpsEpochTime;
 800c64c:	002c      	movs	r4, r5
 800c64e:	193b      	adds	r3, r7, r4
 800c650:	187a      	adds	r2, r7, r1
 800c652:	ca03      	ldmia	r2!, {r0, r1}
 800c654:	c303      	stmia	r3!, {r0, r1}
                // Add Unix to Gps epcoh offset. The system time is based on Unix time.
                sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 800c656:	193b      	adds	r3, r7, r4
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	4aa1      	ldr	r2, [pc, #644]	; (800c8e0 <ProcessMacCommands+0xb54>)
 800c65c:	189a      	adds	r2, r3, r2
 800c65e:	193b      	adds	r3, r7, r4
 800c660:	601a      	str	r2, [r3, #0]

                // Compensate time difference between Tx Done time and now
                sysTimeCurrent = SysTimeGet( );
 800c662:	19bb      	adds	r3, r7, r6
 800c664:	0018      	movs	r0, r3
 800c666:	f008 fe59 	bl	801531c <SysTimeGet>
                sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 800c66a:	236c      	movs	r3, #108	; 0x6c
 800c66c:	18fd      	adds	r5, r7, r3
 800c66e:	499b      	ldr	r1, [pc, #620]	; (800c8dc <ProcessMacCommands+0xb50>)
 800c670:	23d3      	movs	r3, #211	; 0xd3
 800c672:	009b      	lsls	r3, r3, #2
 800c674:	0026      	movs	r6, r4
 800c676:	193a      	adds	r2, r7, r4
 800c678:	2404      	movs	r4, #4
 800c67a:	18c8      	adds	r0, r1, r3
 800c67c:	1900      	adds	r0, r0, r4
 800c67e:	466c      	mov	r4, sp
 800c680:	6800      	ldr	r0, [r0, #0]
 800c682:	6020      	str	r0, [r4, #0]
 800c684:	58cb      	ldr	r3, [r1, r3]
 800c686:	6811      	ldr	r1, [r2, #0]
 800c688:	6852      	ldr	r2, [r2, #4]
 800c68a:	0028      	movs	r0, r5
 800c68c:	f008 fdc6 	bl	801521c <SysTimeSub>
 800c690:	0034      	movs	r4, r6
 800c692:	0025      	movs	r5, r4
 800c694:	193c      	adds	r4, r7, r4
 800c696:	236c      	movs	r3, #108	; 0x6c
 800c698:	18fb      	adds	r3, r7, r3
 800c69a:	260c      	movs	r6, #12
 800c69c:	19ba      	adds	r2, r7, r6
 800c69e:	4669      	mov	r1, sp
 800c6a0:	6858      	ldr	r0, [r3, #4]
 800c6a2:	6008      	str	r0, [r1, #0]
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	6811      	ldr	r1, [r2, #0]
 800c6a8:	6852      	ldr	r2, [r2, #4]
 800c6aa:	0020      	movs	r0, r4
 800c6ac:	f008 fd5e 	bl	801516c <SysTimeAdd>

                // Apply the new system time.
                SysTimeSet( sysTime );
 800c6b0:	002c      	movs	r4, r5
 800c6b2:	193b      	adds	r3, r7, r4
 800c6b4:	6818      	ldr	r0, [r3, #0]
 800c6b6:	6859      	ldr	r1, [r3, #4]
 800c6b8:	f008 fe04 	bl	80152c4 <SysTimeSet>
                LoRaMacClassBDeviceTimeAns( );
 800c6bc:	f003 fb1b 	bl	800fcf6 <LoRaMacClassBDeviceTimeAns>
                break;
 800c6c0:	46c0      	nop			; (mov r8, r8)
 800c6c2:	2287      	movs	r2, #135	; 0x87
 800c6c4:	18bb      	adds	r3, r7, r2
 800c6c6:	18ba      	adds	r2, r7, r2
 800c6c8:	7812      	ldrb	r2, [r2, #0]
 800c6ca:	701a      	strb	r2, [r3, #0]
 800c6cc:	e0f9      	b.n	800c8c2 <ProcessMacCommands+0xb36>
            }
            case SRV_MAC_PING_SLOT_INFO_ANS:
            {
                // According to the specification, it is not allowed to process this answer in
                // a ping or multicast slot
                if( ( MacCtx.RxSlot != RX_SLOT_WIN_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_MULTICAST_SLOT ) )
 800c6ce:	4b83      	ldr	r3, [pc, #524]	; (800c8dc <ProcessMacCommands+0xb50>)
 800c6d0:	4a84      	ldr	r2, [pc, #528]	; (800c8e4 <ProcessMacCommands+0xb58>)
 800c6d2:	5c9b      	ldrb	r3, [r3, r2]
 800c6d4:	2b03      	cmp	r3, #3
 800c6d6:	d006      	beq.n	800c6e6 <ProcessMacCommands+0x95a>
 800c6d8:	4b80      	ldr	r3, [pc, #512]	; (800c8dc <ProcessMacCommands+0xb50>)
 800c6da:	4a82      	ldr	r2, [pc, #520]	; (800c8e4 <ProcessMacCommands+0xb58>)
 800c6dc:	5c9b      	ldrb	r3, [r3, r2]
 800c6de:	2b04      	cmp	r3, #4
 800c6e0:	d001      	beq.n	800c6e6 <ProcessMacCommands+0x95a>
                {
                    LoRaMacClassBPingSlotInfoAns( );
 800c6e2:	f003 fae9 	bl	800fcb8 <LoRaMacClassBPingSlotInfoAns>
 800c6e6:	2287      	movs	r2, #135	; 0x87
 800c6e8:	18bb      	adds	r3, r7, r2
 800c6ea:	18ba      	adds	r2, r7, r2
 800c6ec:	7812      	ldrb	r2, [r2, #0]
 800c6ee:	701a      	strb	r2, [r3, #0]
                }
                break;
 800c6f0:	e0e7      	b.n	800c8c2 <ProcessMacCommands+0xb36>
            }
            case SRV_MAC_PING_SLOT_CHANNEL_REQ:
            {
                uint8_t status = 0x03;
 800c6f2:	207c      	movs	r0, #124	; 0x7c
 800c6f4:	183b      	adds	r3, r7, r0
 800c6f6:	2203      	movs	r2, #3
 800c6f8:	701a      	strb	r2, [r3, #0]
                uint32_t frequency = 0;
 800c6fa:	2300      	movs	r3, #0
 800c6fc:	67bb      	str	r3, [r7, #120]	; 0x78
                uint8_t datarate;

                frequency = ( uint32_t )payload[macIndex++];
 800c6fe:	1cfb      	adds	r3, r7, #3
 800c700:	781b      	ldrb	r3, [r3, #0]
 800c702:	1cfa      	adds	r2, r7, #3
 800c704:	1c59      	adds	r1, r3, #1
 800c706:	7011      	strb	r1, [r2, #0]
 800c708:	001a      	movs	r2, r3
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	189b      	adds	r3, r3, r2
 800c70e:	781b      	ldrb	r3, [r3, #0]
 800c710:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 800c712:	1cfb      	adds	r3, r7, #3
 800c714:	781b      	ldrb	r3, [r3, #0]
 800c716:	1cfa      	adds	r2, r7, #3
 800c718:	1c59      	adds	r1, r3, #1
 800c71a:	7011      	strb	r1, [r2, #0]
 800c71c:	001a      	movs	r2, r3
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	189b      	adds	r3, r3, r2
 800c722:	781b      	ldrb	r3, [r3, #0]
 800c724:	021b      	lsls	r3, r3, #8
 800c726:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c728:	4313      	orrs	r3, r2
 800c72a:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 800c72c:	1cfb      	adds	r3, r7, #3
 800c72e:	781b      	ldrb	r3, [r3, #0]
 800c730:	1cfa      	adds	r2, r7, #3
 800c732:	1c59      	adds	r1, r3, #1
 800c734:	7011      	strb	r1, [r2, #0]
 800c736:	001a      	movs	r2, r3
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	189b      	adds	r3, r3, r2
 800c73c:	781b      	ldrb	r3, [r3, #0]
 800c73e:	041b      	lsls	r3, r3, #16
 800c740:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c742:	4313      	orrs	r3, r2
 800c744:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency *= 100;
 800c746:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c748:	2264      	movs	r2, #100	; 0x64
 800c74a:	4353      	muls	r3, r2
 800c74c:	67bb      	str	r3, [r7, #120]	; 0x78
                datarate = payload[macIndex++] & 0x0F;
 800c74e:	1cfb      	adds	r3, r7, #3
 800c750:	781b      	ldrb	r3, [r3, #0]
 800c752:	1cfa      	adds	r2, r7, #3
 800c754:	1c59      	adds	r1, r3, #1
 800c756:	7011      	strb	r1, [r2, #0]
 800c758:	001a      	movs	r2, r3
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	189b      	adds	r3, r3, r2
 800c75e:	781a      	ldrb	r2, [r3, #0]
 800c760:	2677      	movs	r6, #119	; 0x77
 800c762:	19bb      	adds	r3, r7, r6
 800c764:	210f      	movs	r1, #15
 800c766:	400a      	ands	r2, r1
 800c768:	701a      	strb	r2, [r3, #0]

                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 800c76a:	0005      	movs	r5, r0
 800c76c:	183c      	adds	r4, r7, r0
 800c76e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c770:	19bb      	adds	r3, r7, r6
 800c772:	781b      	ldrb	r3, [r3, #0]
 800c774:	0011      	movs	r1, r2
 800c776:	0018      	movs	r0, r3
 800c778:	f003 faa3 	bl	800fcc2 <LoRaMacClassBPingSlotChannelReq>
 800c77c:	0003      	movs	r3, r0
 800c77e:	7023      	strb	r3, [r4, #0]
                macCmdPayload[0] = status;
 800c780:	2168      	movs	r1, #104	; 0x68
 800c782:	187b      	adds	r3, r7, r1
 800c784:	0028      	movs	r0, r5
 800c786:	183a      	adds	r2, r7, r0
 800c788:	7812      	ldrb	r2, [r2, #0]
 800c78a:	701a      	strb	r2, [r3, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
 800c78c:	187b      	adds	r3, r7, r1
 800c78e:	2201      	movs	r2, #1
 800c790:	0019      	movs	r1, r3
 800c792:	2011      	movs	r0, #17
 800c794:	f003 fc34 	bl	8010000 <LoRaMacCommandsAddCmd>
 800c798:	2287      	movs	r2, #135	; 0x87
 800c79a:	18bb      	adds	r3, r7, r2
 800c79c:	18ba      	adds	r2, r7, r2
 800c79e:	7812      	ldrb	r2, [r2, #0]
 800c7a0:	701a      	strb	r2, [r3, #0]
                break;
 800c7a2:	e08e      	b.n	800c8c2 <ProcessMacCommands+0xb36>
            }
            case SRV_MAC_BEACON_TIMING_ANS:
            {
                uint16_t beaconTimingDelay = 0;
 800c7a4:	207e      	movs	r0, #126	; 0x7e
 800c7a6:	183b      	adds	r3, r7, r0
 800c7a8:	2200      	movs	r2, #0
 800c7aa:	801a      	strh	r2, [r3, #0]
                uint8_t beaconTimingChannel = 0;
 800c7ac:	247d      	movs	r4, #125	; 0x7d
 800c7ae:	193b      	adds	r3, r7, r4
 800c7b0:	2200      	movs	r2, #0
 800c7b2:	701a      	strb	r2, [r3, #0]

                beaconTimingDelay = ( uint16_t )payload[macIndex++];
 800c7b4:	1cfb      	adds	r3, r7, #3
 800c7b6:	781b      	ldrb	r3, [r3, #0]
 800c7b8:	1cfa      	adds	r2, r7, #3
 800c7ba:	1c59      	adds	r1, r3, #1
 800c7bc:	7011      	strb	r1, [r2, #0]
 800c7be:	001a      	movs	r2, r3
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	189b      	adds	r3, r3, r2
 800c7c4:	781a      	ldrb	r2, [r3, #0]
 800c7c6:	183b      	adds	r3, r7, r0
 800c7c8:	801a      	strh	r2, [r3, #0]
                beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 800c7ca:	1cfb      	adds	r3, r7, #3
 800c7cc:	781b      	ldrb	r3, [r3, #0]
 800c7ce:	1cfa      	adds	r2, r7, #3
 800c7d0:	1c59      	adds	r1, r3, #1
 800c7d2:	7011      	strb	r1, [r2, #0]
 800c7d4:	001a      	movs	r2, r3
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	189b      	adds	r3, r3, r2
 800c7da:	781b      	ldrb	r3, [r3, #0]
 800c7dc:	021b      	lsls	r3, r3, #8
 800c7de:	b21a      	sxth	r2, r3
 800c7e0:	183b      	adds	r3, r7, r0
 800c7e2:	2100      	movs	r1, #0
 800c7e4:	5e5b      	ldrsh	r3, [r3, r1]
 800c7e6:	4313      	orrs	r3, r2
 800c7e8:	b21a      	sxth	r2, r3
 800c7ea:	183b      	adds	r3, r7, r0
 800c7ec:	801a      	strh	r2, [r3, #0]
                beaconTimingChannel = payload[macIndex++];
 800c7ee:	1cfb      	adds	r3, r7, #3
 800c7f0:	781b      	ldrb	r3, [r3, #0]
 800c7f2:	1cfa      	adds	r2, r7, #3
 800c7f4:	1c59      	adds	r1, r3, #1
 800c7f6:	7011      	strb	r1, [r2, #0]
 800c7f8:	001a      	movs	r2, r3
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	189a      	adds	r2, r3, r2
 800c7fe:	193b      	adds	r3, r7, r4
 800c800:	7812      	ldrb	r2, [r2, #0]
 800c802:	701a      	strb	r2, [r3, #0]

                LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 800c804:	4b38      	ldr	r3, [pc, #224]	; (800c8e8 <ProcessMacCommands+0xb5c>)
 800c806:	681a      	ldr	r2, [r3, #0]
 800c808:	193b      	adds	r3, r7, r4
 800c80a:	7819      	ldrb	r1, [r3, #0]
 800c80c:	183b      	adds	r3, r7, r0
 800c80e:	881b      	ldrh	r3, [r3, #0]
 800c810:	0018      	movs	r0, r3
 800c812:	f003 fa62 	bl	800fcda <LoRaMacClassBBeaconTimingAns>
 800c816:	2287      	movs	r2, #135	; 0x87
 800c818:	18bb      	adds	r3, r7, r2
 800c81a:	18ba      	adds	r2, r7, r2
 800c81c:	7812      	ldrb	r2, [r2, #0]
 800c81e:	701a      	strb	r2, [r3, #0]
                break;
 800c820:	e04f      	b.n	800c8c2 <ProcessMacCommands+0xb36>
            }
            case SRV_MAC_BEACON_FREQ_REQ:
                {
                    uint32_t frequency = 0;
 800c822:	2300      	movs	r3, #0
 800c824:	2080      	movs	r0, #128	; 0x80
 800c826:	183a      	adds	r2, r7, r0
 800c828:	6013      	str	r3, [r2, #0]

                    frequency = ( uint32_t )payload[macIndex++];
 800c82a:	1cfb      	adds	r3, r7, #3
 800c82c:	781b      	ldrb	r3, [r3, #0]
 800c82e:	1cfa      	adds	r2, r7, #3
 800c830:	1c59      	adds	r1, r3, #1
 800c832:	7011      	strb	r1, [r2, #0]
 800c834:	001a      	movs	r2, r3
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	189b      	adds	r3, r3, r2
 800c83a:	781b      	ldrb	r3, [r3, #0]
 800c83c:	183a      	adds	r2, r7, r0
 800c83e:	6013      	str	r3, [r2, #0]
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 800c840:	1cfb      	adds	r3, r7, #3
 800c842:	781b      	ldrb	r3, [r3, #0]
 800c844:	1cfa      	adds	r2, r7, #3
 800c846:	1c59      	adds	r1, r3, #1
 800c848:	7011      	strb	r1, [r2, #0]
 800c84a:	001a      	movs	r2, r3
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	189b      	adds	r3, r3, r2
 800c850:	781b      	ldrb	r3, [r3, #0]
 800c852:	021b      	lsls	r3, r3, #8
 800c854:	183a      	adds	r2, r7, r0
 800c856:	6812      	ldr	r2, [r2, #0]
 800c858:	4313      	orrs	r3, r2
 800c85a:	183a      	adds	r2, r7, r0
 800c85c:	6013      	str	r3, [r2, #0]
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 800c85e:	1cfb      	adds	r3, r7, #3
 800c860:	781b      	ldrb	r3, [r3, #0]
 800c862:	1cfa      	adds	r2, r7, #3
 800c864:	1c59      	adds	r1, r3, #1
 800c866:	7011      	strb	r1, [r2, #0]
 800c868:	001a      	movs	r2, r3
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	189b      	adds	r3, r3, r2
 800c86e:	781b      	ldrb	r3, [r3, #0]
 800c870:	041b      	lsls	r3, r3, #16
 800c872:	183a      	adds	r2, r7, r0
 800c874:	6812      	ldr	r2, [r2, #0]
 800c876:	4313      	orrs	r3, r2
 800c878:	183a      	adds	r2, r7, r0
 800c87a:	6013      	str	r3, [r2, #0]
                    frequency *= 100;
 800c87c:	183b      	adds	r3, r7, r0
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	2264      	movs	r2, #100	; 0x64
 800c882:	4353      	muls	r3, r2
 800c884:	183a      	adds	r2, r7, r0
 800c886:	6013      	str	r3, [r2, #0]

                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 800c888:	183b      	adds	r3, r7, r0
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	0018      	movs	r0, r3
 800c88e:	f003 fa37 	bl	800fd00 <LoRaMacClassBBeaconFreqReq>
 800c892:	1e03      	subs	r3, r0, #0
 800c894:	d004      	beq.n	800c8a0 <ProcessMacCommands+0xb14>
                    {
                        macCmdPayload[0] = 1;
 800c896:	2368      	movs	r3, #104	; 0x68
 800c898:	18fb      	adds	r3, r7, r3
 800c89a:	2201      	movs	r2, #1
 800c89c:	701a      	strb	r2, [r3, #0]
 800c89e:	e003      	b.n	800c8a8 <ProcessMacCommands+0xb1c>
                    }
                    else
                    {
                        macCmdPayload[0] = 0;
 800c8a0:	2368      	movs	r3, #104	; 0x68
 800c8a2:	18fb      	adds	r3, r7, r3
 800c8a4:	2200      	movs	r2, #0
 800c8a6:	701a      	strb	r2, [r3, #0]
                    }
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 800c8a8:	2368      	movs	r3, #104	; 0x68
 800c8aa:	18fb      	adds	r3, r7, r3
 800c8ac:	2201      	movs	r2, #1
 800c8ae:	0019      	movs	r1, r3
 800c8b0:	2013      	movs	r0, #19
 800c8b2:	f003 fba5 	bl	8010000 <LoRaMacCommandsAddCmd>
 800c8b6:	2287      	movs	r2, #135	; 0x87
 800c8b8:	18bb      	adds	r3, r7, r2
 800c8ba:	18ba      	adds	r2, r7, r2
 800c8bc:	7812      	ldrb	r2, [r2, #0]
 800c8be:	701a      	strb	r2, [r3, #0]
                }
                break;
 800c8c0:	46c0      	nop			; (mov r8, r8)
    while( macIndex < commandsSize )
 800c8c2:	1cfa      	adds	r2, r7, #3
 800c8c4:	1cbb      	adds	r3, r7, #2
 800c8c6:	7812      	ldrb	r2, [r2, #0]
 800c8c8:	781b      	ldrb	r3, [r3, #0]
 800c8ca:	429a      	cmp	r2, r3
 800c8cc:	d201      	bcs.n	800c8d2 <ProcessMacCommands+0xb46>
 800c8ce:	f7ff fa7e 	bl	800bdce <ProcessMacCommands+0x42>
 800c8d2:	e000      	b.n	800c8d6 <ProcessMacCommands+0xb4a>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
 800c8d4:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 800c8d6:	46bd      	mov	sp, r7
 800c8d8:	b023      	add	sp, #140	; 0x8c
 800c8da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c8dc:	2000070c 	.word	0x2000070c
 800c8e0:	12d53d80 	.word	0x12d53d80
 800c8e4:	0000046c 	.word	0x0000046c
 800c8e8:	20001538 	.word	0x20001538

0800c8ec <Send>:

LoRaMacStatus_t Send( LoRaMacHeader_t* macHdr, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 800c8ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c8ee:	b08f      	sub	sp, #60	; 0x3c
 800c8f0:	af02      	add	r7, sp, #8
 800c8f2:	60f8      	str	r0, [r7, #12]
 800c8f4:	0008      	movs	r0, r1
 800c8f6:	607a      	str	r2, [r7, #4]
 800c8f8:	0019      	movs	r1, r3
 800c8fa:	230b      	movs	r3, #11
 800c8fc:	18fb      	adds	r3, r7, r3
 800c8fe:	1c02      	adds	r2, r0, #0
 800c900:	701a      	strb	r2, [r3, #0]
 800c902:	2308      	movs	r3, #8
 800c904:	18fb      	adds	r3, r7, r3
 800c906:	1c0a      	adds	r2, r1, #0
 800c908:	801a      	strh	r2, [r3, #0]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c90a:	232f      	movs	r3, #47	; 0x2f
 800c90c:	18fb      	adds	r3, r7, r3
 800c90e:	2203      	movs	r2, #3
 800c910:	701a      	strb	r2, [r3, #0]
    int8_t datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800c912:	4a99      	ldr	r2, [pc, #612]	; (800cb78 <Send+0x28c>)
 800c914:	238e      	movs	r3, #142	; 0x8e
 800c916:	00db      	lsls	r3, r3, #3
 800c918:	58d2      	ldr	r2, [r2, r3]
 800c91a:	232e      	movs	r3, #46	; 0x2e
 800c91c:	18fb      	adds	r3, r7, r3
 800c91e:	21d5      	movs	r1, #213	; 0xd5
 800c920:	5c52      	ldrb	r2, [r2, r1]
 800c922:	701a      	strb	r2, [r3, #0]
    int8_t txPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 800c924:	4a94      	ldr	r2, [pc, #592]	; (800cb78 <Send+0x28c>)
 800c926:	238e      	movs	r3, #142	; 0x8e
 800c928:	00db      	lsls	r3, r3, #3
 800c92a:	58d2      	ldr	r2, [r2, r3]
 800c92c:	232d      	movs	r3, #45	; 0x2d
 800c92e:	18fb      	adds	r3, r7, r3
 800c930:	21d4      	movs	r1, #212	; 0xd4
 800c932:	5c52      	ldrb	r2, [r2, r1]
 800c934:	701a      	strb	r2, [r3, #0]
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 800c936:	4a90      	ldr	r2, [pc, #576]	; (800cb78 <Send+0x28c>)
 800c938:	238e      	movs	r3, #142	; 0x8e
 800c93a:	00db      	lsls	r3, r3, #3
 800c93c:	58d3      	ldr	r3, [r2, r3]
 800c93e:	22cc      	movs	r2, #204	; 0xcc
 800c940:	589b      	ldr	r3, [r3, r2]
 800c942:	62bb      	str	r3, [r7, #40]	; 0x28
    CalcNextAdrParams_t adrNext;

    // Check if we are joined
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 800c944:	4a8c      	ldr	r2, [pc, #560]	; (800cb78 <Send+0x28c>)
 800c946:	238e      	movs	r3, #142	; 0x8e
 800c948:	00db      	lsls	r3, r3, #3
 800c94a:	58d2      	ldr	r2, [r2, r3]
 800c94c:	2389      	movs	r3, #137	; 0x89
 800c94e:	009b      	lsls	r3, r3, #2
 800c950:	5cd3      	ldrb	r3, [r2, r3]
 800c952:	2b00      	cmp	r3, #0
 800c954:	d101      	bne.n	800c95a <Send+0x6e>
    {
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 800c956:	2307      	movs	r3, #7
 800c958:	e10a      	b.n	800cb70 <Send+0x284>
    }
    if( MacCtx.NvmCtx->MaxDCycle == 0 )
 800c95a:	4a87      	ldr	r2, [pc, #540]	; (800cb78 <Send+0x28c>)
 800c95c:	238e      	movs	r3, #142	; 0x8e
 800c95e:	00db      	lsls	r3, r3, #3
 800c960:	58d2      	ldr	r2, [r2, r3]
 800c962:	2312      	movs	r3, #18
 800c964:	33ff      	adds	r3, #255	; 0xff
 800c966:	5cd3      	ldrb	r3, [r2, r3]
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d104      	bne.n	800c976 <Send+0x8a>
    {
        MacCtx.AggregatedTimeOff = 0;
 800c96c:	4a82      	ldr	r2, [pc, #520]	; (800cb78 <Send+0x28c>)
 800c96e:	23d1      	movs	r3, #209	; 0xd1
 800c970:	009b      	lsls	r3, r3, #2
 800c972:	2100      	movs	r1, #0
 800c974:	50d1      	str	r1, [r2, r3]
    }

    fCtrl.Value = 0;
 800c976:	202c      	movs	r0, #44	; 0x2c
 800c978:	183b      	adds	r3, r7, r0
 800c97a:	2200      	movs	r2, #0
 800c97c:	701a      	strb	r2, [r3, #0]
    fCtrl.Bits.FOptsLen      = 0;
 800c97e:	183b      	adds	r3, r7, r0
 800c980:	781a      	ldrb	r2, [r3, #0]
 800c982:	210f      	movs	r1, #15
 800c984:	438a      	bics	r2, r1
 800c986:	701a      	strb	r2, [r3, #0]
    fCtrl.Bits.Adr           = MacCtx.NvmCtx->AdrCtrlOn;
 800c988:	4a7b      	ldr	r2, [pc, #492]	; (800cb78 <Send+0x28c>)
 800c98a:	238e      	movs	r3, #142	; 0x8e
 800c98c:	00db      	lsls	r3, r3, #3
 800c98e:	58d3      	ldr	r3, [r2, r3]
 800c990:	22ca      	movs	r2, #202	; 0xca
 800c992:	5c9a      	ldrb	r2, [r3, r2]
 800c994:	183b      	adds	r3, r7, r0
 800c996:	01d0      	lsls	r0, r2, #7
 800c998:	781a      	ldrb	r2, [r3, #0]
 800c99a:	217f      	movs	r1, #127	; 0x7f
 800c99c:	400a      	ands	r2, r1
 800c99e:	1c11      	adds	r1, r2, #0
 800c9a0:	1c02      	adds	r2, r0, #0
 800c9a2:	430a      	orrs	r2, r1
 800c9a4:	701a      	strb	r2, [r3, #0]

    // Check class b
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 800c9a6:	4a74      	ldr	r2, [pc, #464]	; (800cb78 <Send+0x28c>)
 800c9a8:	238e      	movs	r3, #142	; 0x8e
 800c9aa:	00db      	lsls	r3, r3, #3
 800c9ac:	58d3      	ldr	r3, [r2, r3]
 800c9ae:	22c8      	movs	r2, #200	; 0xc8
 800c9b0:	5c9b      	ldrb	r3, [r3, r2]
 800c9b2:	2b01      	cmp	r3, #1
 800c9b4:	d106      	bne.n	800c9c4 <Send+0xd8>
    {
        fCtrl.Bits.FPending      = 1;
 800c9b6:	232c      	movs	r3, #44	; 0x2c
 800c9b8:	18fb      	adds	r3, r7, r3
 800c9ba:	781a      	ldrb	r2, [r3, #0]
 800c9bc:	2110      	movs	r1, #16
 800c9be:	430a      	orrs	r2, r1
 800c9c0:	701a      	strb	r2, [r3, #0]
 800c9c2:	e005      	b.n	800c9d0 <Send+0xe4>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
 800c9c4:	232c      	movs	r3, #44	; 0x2c
 800c9c6:	18fb      	adds	r3, r7, r3
 800c9c8:	781a      	ldrb	r2, [r3, #0]
 800c9ca:	2110      	movs	r1, #16
 800c9cc:	438a      	bics	r2, r1
 800c9ce:	701a      	strb	r2, [r3, #0]
    }

    // Check server ack
    if( MacCtx.NvmCtx->SrvAckRequested == true )
 800c9d0:	4a69      	ldr	r2, [pc, #420]	; (800cb78 <Send+0x28c>)
 800c9d2:	238e      	movs	r3, #142	; 0x8e
 800c9d4:	00db      	lsls	r3, r3, #3
 800c9d6:	58d3      	ldr	r3, [r2, r3]
 800c9d8:	4a68      	ldr	r2, [pc, #416]	; (800cb7c <Send+0x290>)
 800c9da:	5c9b      	ldrb	r3, [r3, r2]
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d005      	beq.n	800c9ec <Send+0x100>
    {
        fCtrl.Bits.Ack = 1;
 800c9e0:	232c      	movs	r3, #44	; 0x2c
 800c9e2:	18fb      	adds	r3, r7, r3
 800c9e4:	781a      	ldrb	r2, [r3, #0]
 800c9e6:	2120      	movs	r1, #32
 800c9e8:	430a      	orrs	r2, r1
 800c9ea:	701a      	strb	r2, [r3, #0]
    }

    // ADR next request
    adrNext.Version = MacCtx.NvmCtx->Version;
 800c9ec:	4a62      	ldr	r2, [pc, #392]	; (800cb78 <Send+0x28c>)
 800c9ee:	238e      	movs	r3, #142	; 0x8e
 800c9f0:	00db      	lsls	r3, r3, #3
 800c9f2:	58d1      	ldr	r1, [r2, r3]
 800c9f4:	2014      	movs	r0, #20
 800c9f6:	183b      	adds	r3, r7, r0
 800c9f8:	2288      	movs	r2, #136	; 0x88
 800c9fa:	0092      	lsls	r2, r2, #2
 800c9fc:	588a      	ldr	r2, [r1, r2]
 800c9fe:	601a      	str	r2, [r3, #0]
    adrNext.UpdateChanMask = true;
 800ca00:	0001      	movs	r1, r0
 800ca02:	187b      	adds	r3, r7, r1
 800ca04:	2201      	movs	r2, #1
 800ca06:	711a      	strb	r2, [r3, #4]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 800ca08:	242c      	movs	r4, #44	; 0x2c
 800ca0a:	193b      	adds	r3, r7, r4
 800ca0c:	781b      	ldrb	r3, [r3, #0]
 800ca0e:	061b      	lsls	r3, r3, #24
 800ca10:	0fdb      	lsrs	r3, r3, #31
 800ca12:	b2db      	uxtb	r3, r3
 800ca14:	1e5a      	subs	r2, r3, #1
 800ca16:	4193      	sbcs	r3, r2
 800ca18:	b2da      	uxtb	r2, r3
 800ca1a:	0008      	movs	r0, r1
 800ca1c:	183b      	adds	r3, r7, r0
 800ca1e:	715a      	strb	r2, [r3, #5]
    adrNext.AdrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 800ca20:	4a55      	ldr	r2, [pc, #340]	; (800cb78 <Send+0x28c>)
 800ca22:	238e      	movs	r3, #142	; 0x8e
 800ca24:	00db      	lsls	r3, r3, #3
 800ca26:	58d3      	ldr	r3, [r2, r3]
 800ca28:	22cc      	movs	r2, #204	; 0xcc
 800ca2a:	589a      	ldr	r2, [r3, r2]
 800ca2c:	183b      	adds	r3, r7, r0
 800ca2e:	609a      	str	r2, [r3, #8]
    adrNext.AdrAckLimit = MacCtx.NvmCtx->AdrAckLimit;
 800ca30:	4a51      	ldr	r2, [pc, #324]	; (800cb78 <Send+0x28c>)
 800ca32:	238e      	movs	r3, #142	; 0x8e
 800ca34:	00db      	lsls	r3, r3, #3
 800ca36:	58d3      	ldr	r3, [r2, r3]
 800ca38:	22d0      	movs	r2, #208	; 0xd0
 800ca3a:	5a9a      	ldrh	r2, [r3, r2]
 800ca3c:	183b      	adds	r3, r7, r0
 800ca3e:	819a      	strh	r2, [r3, #12]
    adrNext.AdrAckDelay = MacCtx.NvmCtx->AdrAckDelay;
 800ca40:	4a4d      	ldr	r2, [pc, #308]	; (800cb78 <Send+0x28c>)
 800ca42:	238e      	movs	r3, #142	; 0x8e
 800ca44:	00db      	lsls	r3, r3, #3
 800ca46:	58d3      	ldr	r3, [r2, r3]
 800ca48:	22d2      	movs	r2, #210	; 0xd2
 800ca4a:	5a9a      	ldrh	r2, [r3, r2]
 800ca4c:	183b      	adds	r3, r7, r0
 800ca4e:	81da      	strh	r2, [r3, #14]
    adrNext.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800ca50:	4a49      	ldr	r2, [pc, #292]	; (800cb78 <Send+0x28c>)
 800ca52:	238e      	movs	r3, #142	; 0x8e
 800ca54:	00db      	lsls	r3, r3, #3
 800ca56:	58d3      	ldr	r3, [r2, r3]
 800ca58:	22d5      	movs	r2, #213	; 0xd5
 800ca5a:	569a      	ldrsb	r2, [r3, r2]
 800ca5c:	183b      	adds	r3, r7, r0
 800ca5e:	741a      	strb	r2, [r3, #16]
    adrNext.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 800ca60:	4a45      	ldr	r2, [pc, #276]	; (800cb78 <Send+0x28c>)
 800ca62:	238e      	movs	r3, #142	; 0x8e
 800ca64:	00db      	lsls	r3, r3, #3
 800ca66:	58d3      	ldr	r3, [r2, r3]
 800ca68:	22d4      	movs	r2, #212	; 0xd4
 800ca6a:	569a      	ldrsb	r2, [r3, r2]
 800ca6c:	183b      	adds	r3, r7, r0
 800ca6e:	745a      	strb	r2, [r3, #17]
    adrNext.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800ca70:	4a41      	ldr	r2, [pc, #260]	; (800cb78 <Send+0x28c>)
 800ca72:	238e      	movs	r3, #142	; 0x8e
 800ca74:	00db      	lsls	r3, r3, #3
 800ca76:	58d2      	ldr	r2, [r2, r3]
 800ca78:	2380      	movs	r3, #128	; 0x80
 800ca7a:	005b      	lsls	r3, r3, #1
 800ca7c:	5cd2      	ldrb	r2, [r2, r3]
 800ca7e:	183b      	adds	r3, r7, r0
 800ca80:	749a      	strb	r2, [r3, #18]
    adrNext.Region = MacCtx.NvmCtx->Region;
 800ca82:	4a3d      	ldr	r2, [pc, #244]	; (800cb78 <Send+0x28c>)
 800ca84:	238e      	movs	r3, #142	; 0x8e
 800ca86:	00db      	lsls	r3, r3, #3
 800ca88:	58d3      	ldr	r3, [r2, r3]
 800ca8a:	781a      	ldrb	r2, [r3, #0]
 800ca8c:	183b      	adds	r3, r7, r0
 800ca8e:	74da      	strb	r2, [r3, #19]

    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &MacCtx.NvmCtx->MacParams.ChannelsDatarate,
 800ca90:	4a39      	ldr	r2, [pc, #228]	; (800cb78 <Send+0x28c>)
 800ca92:	238e      	movs	r3, #142	; 0x8e
 800ca94:	00db      	lsls	r3, r3, #3
 800ca96:	58d3      	ldr	r3, [r2, r3]
 800ca98:	33d5      	adds	r3, #213	; 0xd5
 800ca9a:	0019      	movs	r1, r3
                                               &MacCtx.NvmCtx->MacParams.ChannelsTxPower, &adrAckCounter );
 800ca9c:	4a36      	ldr	r2, [pc, #216]	; (800cb78 <Send+0x28c>)
 800ca9e:	238e      	movs	r3, #142	; 0x8e
 800caa0:	00db      	lsls	r3, r3, #3
 800caa2:	58d3      	ldr	r3, [r2, r3]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &MacCtx.NvmCtx->MacParams.ChannelsDatarate,
 800caa4:	33d4      	adds	r3, #212	; 0xd4
 800caa6:	001a      	movs	r2, r3
 800caa8:	2328      	movs	r3, #40	; 0x28
 800caaa:	18fb      	adds	r3, r7, r3
 800caac:	1838      	adds	r0, r7, r0
 800caae:	f003 f83b 	bl	800fb28 <LoRaMacAdrCalcNext>
 800cab2:	0003      	movs	r3, r0
 800cab4:	0019      	movs	r1, r3
 800cab6:	0026      	movs	r6, r4
 800cab8:	193b      	adds	r3, r7, r4
 800caba:	2201      	movs	r2, #1
 800cabc:	400a      	ands	r2, r1
 800cabe:	0190      	lsls	r0, r2, #6
 800cac0:	781a      	ldrb	r2, [r3, #0]
 800cac2:	2140      	movs	r1, #64	; 0x40
 800cac4:	438a      	bics	r2, r1
 800cac6:	1c11      	adds	r1, r2, #0
 800cac8:	1c02      	adds	r2, r0, #0
 800caca:	430a      	orrs	r2, r1
 800cacc:	701a      	strb	r2, [r3, #0]

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 800cace:	232f      	movs	r3, #47	; 0x2f
 800cad0:	18fc      	adds	r4, r7, r3
 800cad2:	687d      	ldr	r5, [r7, #4]
 800cad4:	220b      	movs	r2, #11
 800cad6:	18bb      	adds	r3, r7, r2
 800cad8:	781a      	ldrb	r2, [r3, #0]
 800cada:	19b9      	adds	r1, r7, r6
 800cadc:	68f8      	ldr	r0, [r7, #12]
 800cade:	2608      	movs	r6, #8
 800cae0:	19bb      	adds	r3, r7, r6
 800cae2:	881b      	ldrh	r3, [r3, #0]
 800cae4:	9300      	str	r3, [sp, #0]
 800cae6:	002b      	movs	r3, r5
 800cae8:	f000 fc18 	bl	800d31c <PrepareFrame>
 800caec:	0003      	movs	r3, r0
 800caee:	7023      	strb	r3, [r4, #0]

    // Validate status
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 800caf0:	232f      	movs	r3, #47	; 0x2f
 800caf2:	18fb      	adds	r3, r7, r3
 800caf4:	781b      	ldrb	r3, [r3, #0]
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d004      	beq.n	800cb04 <Send+0x218>
 800cafa:	232f      	movs	r3, #47	; 0x2f
 800cafc:	18fb      	adds	r3, r7, r3
 800cafe:	781b      	ldrb	r3, [r3, #0]
 800cb00:	2b0a      	cmp	r3, #10
 800cb02:	d106      	bne.n	800cb12 <Send+0x226>
    {
        // Schedule frame, do not allow delayed transmissions
        status = ScheduleTx( false );
 800cb04:	232f      	movs	r3, #47	; 0x2f
 800cb06:	18fc      	adds	r4, r7, r3
 800cb08:	2000      	movs	r0, #0
 800cb0a:	f000 f89b 	bl	800cc44 <ScheduleTx>
 800cb0e:	0003      	movs	r3, r0
 800cb10:	7023      	strb	r3, [r4, #0]
    }

    // Post processing
    if( status != LORAMAC_STATUS_OK )
 800cb12:	232f      	movs	r3, #47	; 0x2f
 800cb14:	18fb      	adds	r3, r7, r3
 800cb16:	781b      	ldrb	r3, [r3, #0]
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d012      	beq.n	800cb42 <Send+0x256>
    {
        // Bad case - restore
        // Store local variables
        MacCtx.NvmCtx->MacParams.ChannelsDatarate = datarate;
 800cb1c:	4a16      	ldr	r2, [pc, #88]	; (800cb78 <Send+0x28c>)
 800cb1e:	238e      	movs	r3, #142	; 0x8e
 800cb20:	00db      	lsls	r3, r3, #3
 800cb22:	58d3      	ldr	r3, [r2, r3]
 800cb24:	222e      	movs	r2, #46	; 0x2e
 800cb26:	18ba      	adds	r2, r7, r2
 800cb28:	21d5      	movs	r1, #213	; 0xd5
 800cb2a:	7812      	ldrb	r2, [r2, #0]
 800cb2c:	545a      	strb	r2, [r3, r1]
        MacCtx.NvmCtx->MacParams.ChannelsTxPower = txPower;
 800cb2e:	4a12      	ldr	r2, [pc, #72]	; (800cb78 <Send+0x28c>)
 800cb30:	238e      	movs	r3, #142	; 0x8e
 800cb32:	00db      	lsls	r3, r3, #3
 800cb34:	58d3      	ldr	r3, [r2, r3]
 800cb36:	222d      	movs	r2, #45	; 0x2d
 800cb38:	18ba      	adds	r2, r7, r2
 800cb3a:	21d4      	movs	r1, #212	; 0xd4
 800cb3c:	7812      	ldrb	r2, [r2, #0]
 800cb3e:	545a      	strb	r2, [r3, r1]
 800cb40:	e013      	b.n	800cb6a <Send+0x27e>
    }
    else
    {
        // Good case
        MacCtx.NvmCtx->SrvAckRequested = false;
 800cb42:	4a0d      	ldr	r2, [pc, #52]	; (800cb78 <Send+0x28c>)
 800cb44:	238e      	movs	r3, #142	; 0x8e
 800cb46:	00db      	lsls	r3, r3, #3
 800cb48:	58d3      	ldr	r3, [r2, r3]
 800cb4a:	4a0c      	ldr	r2, [pc, #48]	; (800cb7c <Send+0x290>)
 800cb4c:	2100      	movs	r1, #0
 800cb4e:	5499      	strb	r1, [r3, r2]
        MacCtx.NvmCtx->AdrAckCounter = adrAckCounter;
 800cb50:	4a09      	ldr	r2, [pc, #36]	; (800cb78 <Send+0x28c>)
 800cb52:	238e      	movs	r3, #142	; 0x8e
 800cb54:	00db      	lsls	r3, r3, #3
 800cb56:	58d3      	ldr	r3, [r2, r3]
 800cb58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cb5a:	21cc      	movs	r1, #204	; 0xcc
 800cb5c:	505a      	str	r2, [r3, r1]
        // Remove all none sticky MAC commands
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 800cb5e:	f003 fad9 	bl	8010114 <LoRaMacCommandsRemoveNoneStickyCmds>
 800cb62:	1e03      	subs	r3, r0, #0
 800cb64:	d001      	beq.n	800cb6a <Send+0x27e>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800cb66:	2313      	movs	r3, #19
 800cb68:	e002      	b.n	800cb70 <Send+0x284>
        }
    }
    return status;
 800cb6a:	232f      	movs	r3, #47	; 0x2f
 800cb6c:	18fb      	adds	r3, r7, r3
 800cb6e:	781b      	ldrb	r3, [r3, #0]
}
 800cb70:	0018      	movs	r0, r3
 800cb72:	46bd      	mov	sp, r7
 800cb74:	b00d      	add	sp, #52	; 0x34
 800cb76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb78:	2000070c 	.word	0x2000070c
 800cb7c:	0000021a 	.word	0x0000021a

0800cb80 <SendReJoinReq>:

LoRaMacStatus_t SendReJoinReq( JoinReqIdentifier_t joinReqType )
{
 800cb80:	b5b0      	push	{r4, r5, r7, lr}
 800cb82:	b084      	sub	sp, #16
 800cb84:	af00      	add	r7, sp, #0
 800cb86:	0002      	movs	r2, r0
 800cb88:	1dfb      	adds	r3, r7, #7
 800cb8a:	701a      	strb	r2, [r3, #0]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800cb8c:	230e      	movs	r3, #14
 800cb8e:	18fb      	adds	r3, r7, r3
 800cb90:	2200      	movs	r2, #0
 800cb92:	701a      	strb	r2, [r3, #0]
    LoRaMacHeader_t macHdr;
    macHdr.Value = 0;
 800cb94:	230c      	movs	r3, #12
 800cb96:	18fb      	adds	r3, r7, r3
 800cb98:	2200      	movs	r2, #0
 800cb9a:	701a      	strb	r2, [r3, #0]
    bool allowDelayedTx = true;
 800cb9c:	230f      	movs	r3, #15
 800cb9e:	18fb      	adds	r3, r7, r3
 800cba0:	2201      	movs	r2, #1
 800cba2:	701a      	strb	r2, [r3, #0]

    // Setup join/rejoin message
    switch( joinReqType )
 800cba4:	1dfb      	adds	r3, r7, #7
 800cba6:	781b      	ldrb	r3, [r3, #0]
 800cba8:	2bff      	cmp	r3, #255	; 0xff
 800cbaa:	d12d      	bne.n	800cc08 <SendReJoinReq+0x88>
    {
        case JOIN_REQ:
        {
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 800cbac:	4a21      	ldr	r2, [pc, #132]	; (800cc34 <SendReJoinReq+0xb4>)
 800cbae:	2386      	movs	r3, #134	; 0x86
 800cbb0:	005b      	lsls	r3, r3, #1
 800cbb2:	2100      	movs	r1, #0
 800cbb4:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 800cbb6:	4a1f      	ldr	r2, [pc, #124]	; (800cc34 <SendReJoinReq+0xb4>)
 800cbb8:	2388      	movs	r3, #136	; 0x88
 800cbba:	005b      	lsls	r3, r3, #1
 800cbbc:	491e      	ldr	r1, [pc, #120]	; (800cc38 <SendReJoinReq+0xb8>)
 800cbbe:	50d1      	str	r1, [r2, r3]
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800cbc0:	4a1c      	ldr	r2, [pc, #112]	; (800cc34 <SendReJoinReq+0xb4>)
 800cbc2:	238a      	movs	r3, #138	; 0x8a
 800cbc4:	005b      	lsls	r3, r3, #1
 800cbc6:	21ff      	movs	r1, #255	; 0xff
 800cbc8:	54d1      	strb	r1, [r2, r3]

            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 800cbca:	200c      	movs	r0, #12
 800cbcc:	183b      	adds	r3, r7, r0
 800cbce:	781a      	ldrb	r2, [r3, #0]
 800cbd0:	211f      	movs	r1, #31
 800cbd2:	400a      	ands	r2, r1
 800cbd4:	701a      	strb	r2, [r3, #0]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 800cbd6:	183b      	adds	r3, r7, r0
 800cbd8:	7819      	ldrb	r1, [r3, #0]
 800cbda:	4a16      	ldr	r2, [pc, #88]	; (800cc34 <SendReJoinReq+0xb4>)
 800cbdc:	2316      	movs	r3, #22
 800cbde:	33ff      	adds	r3, #255	; 0xff
 800cbe0:	54d1      	strb	r1, [r2, r3]

            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, MacCtx.JoinEui, LORAMAC_JOIN_EUI_FIELD_SIZE );
 800cbe2:	4b14      	ldr	r3, [pc, #80]	; (800cc34 <SendReJoinReq+0xb4>)
 800cbe4:	6859      	ldr	r1, [r3, #4]
 800cbe6:	4b15      	ldr	r3, [pc, #84]	; (800cc3c <SendReJoinReq+0xbc>)
 800cbe8:	2208      	movs	r2, #8
 800cbea:	0018      	movs	r0, r3
 800cbec:	f008 fd78 	bl	80156e0 <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, MacCtx.DevEui, LORAMAC_DEV_EUI_FIELD_SIZE );
 800cbf0:	4b10      	ldr	r3, [pc, #64]	; (800cc34 <SendReJoinReq+0xb4>)
 800cbf2:	6819      	ldr	r1, [r3, #0]
 800cbf4:	4b12      	ldr	r3, [pc, #72]	; (800cc40 <SendReJoinReq+0xc0>)
 800cbf6:	2208      	movs	r2, #8
 800cbf8:	0018      	movs	r0, r3
 800cbfa:	f008 fd71 	bl	80156e0 <memcpy1>

            allowDelayedTx = false;
 800cbfe:	230f      	movs	r3, #15
 800cc00:	18fb      	adds	r3, r7, r3
 800cc02:	2200      	movs	r2, #0
 800cc04:	701a      	strb	r2, [r3, #0]

            break;
 800cc06:	e004      	b.n	800cc12 <SendReJoinReq+0x92>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800cc08:	230e      	movs	r3, #14
 800cc0a:	18fb      	adds	r3, r7, r3
 800cc0c:	2202      	movs	r2, #2
 800cc0e:	701a      	strb	r2, [r3, #0]
            break;
 800cc10:	46c0      	nop			; (mov r8, r8)
    }

    // Schedule frame
    status = ScheduleTx( allowDelayedTx );
 800cc12:	250e      	movs	r5, #14
 800cc14:	197c      	adds	r4, r7, r5
 800cc16:	230f      	movs	r3, #15
 800cc18:	18fb      	adds	r3, r7, r3
 800cc1a:	781b      	ldrb	r3, [r3, #0]
 800cc1c:	0018      	movs	r0, r3
 800cc1e:	f000 f811 	bl	800cc44 <ScheduleTx>
 800cc22:	0003      	movs	r3, r0
 800cc24:	7023      	strb	r3, [r4, #0]
    return status;
 800cc26:	197b      	adds	r3, r7, r5
 800cc28:	781b      	ldrb	r3, [r3, #0]
}
 800cc2a:	0018      	movs	r0, r3
 800cc2c:	46bd      	mov	sp, r7
 800cc2e:	b004      	add	sp, #16
 800cc30:	bdb0      	pop	{r4, r5, r7, pc}
 800cc32:	46c0      	nop			; (mov r8, r8)
 800cc34:	2000070c 	.word	0x2000070c
 800cc38:	20000716 	.word	0x20000716
 800cc3c:	20000822 	.word	0x20000822
 800cc40:	2000082a 	.word	0x2000082a

0800cc44 <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
 800cc44:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc46:	b08b      	sub	sp, #44	; 0x2c
 800cc48:	af02      	add	r7, sp, #8
 800cc4a:	0002      	movs	r2, r0
 800cc4c:	1dfb      	adds	r3, r7, #7
 800cc4e:	701a      	strb	r2, [r3, #0]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800cc50:	231f      	movs	r3, #31
 800cc52:	18fb      	adds	r3, r7, r3
 800cc54:	2203      	movs	r2, #3
 800cc56:	701a      	strb	r2, [r3, #0]
    TimerTime_t dutyCycleTimeOff = 0;
 800cc58:	2300      	movs	r3, #0
 800cc5a:	61bb      	str	r3, [r7, #24]
    NextChanParams_t nextChan;
    size_t macCmdsSize = 0;
 800cc5c:	2300      	movs	r3, #0
 800cc5e:	60bb      	str	r3, [r7, #8]

    // Update back-off
    CalculateBackOff( MacCtx.NvmCtx->LastTxChannel );
 800cc60:	4ab1      	ldr	r2, [pc, #708]	; (800cf28 <ScheduleTx+0x2e4>)
 800cc62:	238e      	movs	r3, #142	; 0x8e
 800cc64:	00db      	lsls	r3, r3, #3
 800cc66:	58d2      	ldr	r2, [r2, r3]
 800cc68:	238a      	movs	r3, #138	; 0x8a
 800cc6a:	005b      	lsls	r3, r3, #1
 800cc6c:	5cd3      	ldrb	r3, [r2, r3]
 800cc6e:	0018      	movs	r0, r3
 800cc70:	f000 f9c4 	bl	800cffc <CalculateBackOff>

    nextChan.AggrTimeOff = MacCtx.AggregatedTimeOff;
 800cc74:	4aac      	ldr	r2, [pc, #688]	; (800cf28 <ScheduleTx+0x2e4>)
 800cc76:	23d1      	movs	r3, #209	; 0xd1
 800cc78:	009b      	lsls	r3, r3, #2
 800cc7a:	58d2      	ldr	r2, [r2, r3]
 800cc7c:	210c      	movs	r1, #12
 800cc7e:	187b      	adds	r3, r7, r1
 800cc80:	601a      	str	r2, [r3, #0]
    nextChan.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800cc82:	4aa9      	ldr	r2, [pc, #676]	; (800cf28 <ScheduleTx+0x2e4>)
 800cc84:	238e      	movs	r3, #142	; 0x8e
 800cc86:	00db      	lsls	r3, r3, #3
 800cc88:	58d3      	ldr	r3, [r2, r3]
 800cc8a:	22d5      	movs	r2, #213	; 0xd5
 800cc8c:	569a      	ldrsb	r2, [r3, r2]
 800cc8e:	187b      	adds	r3, r7, r1
 800cc90:	721a      	strb	r2, [r3, #8]
    nextChan.DutyCycleEnabled = MacCtx.NvmCtx->DutyCycleOn;
 800cc92:	4aa5      	ldr	r2, [pc, #660]	; (800cf28 <ScheduleTx+0x2e4>)
 800cc94:	238e      	movs	r3, #142	; 0x8e
 800cc96:	00db      	lsls	r3, r3, #3
 800cc98:	58d2      	ldr	r2, [r2, r3]
 800cc9a:	2389      	movs	r3, #137	; 0x89
 800cc9c:	005b      	lsls	r3, r3, #1
 800cc9e:	5cd2      	ldrb	r2, [r2, r3]
 800cca0:	187b      	adds	r3, r7, r1
 800cca2:	729a      	strb	r2, [r3, #10]
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 800cca4:	4aa0      	ldr	r2, [pc, #640]	; (800cf28 <ScheduleTx+0x2e4>)
 800cca6:	238e      	movs	r3, #142	; 0x8e
 800cca8:	00db      	lsls	r3, r3, #3
 800ccaa:	58d2      	ldr	r2, [r2, r3]
 800ccac:	2389      	movs	r3, #137	; 0x89
 800ccae:	009b      	lsls	r3, r3, #2
 800ccb0:	5cd3      	ldrb	r3, [r2, r3]
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d104      	bne.n	800ccc0 <ScheduleTx+0x7c>
    {
        nextChan.Joined = false;
 800ccb6:	230c      	movs	r3, #12
 800ccb8:	18fb      	adds	r3, r7, r3
 800ccba:	2200      	movs	r2, #0
 800ccbc:	725a      	strb	r2, [r3, #9]
 800ccbe:	e003      	b.n	800ccc8 <ScheduleTx+0x84>
    }
    else
    {
        nextChan.Joined = true;
 800ccc0:	230c      	movs	r3, #12
 800ccc2:	18fb      	adds	r3, r7, r3
 800ccc4:	2201      	movs	r2, #1
 800ccc6:	725a      	strb	r2, [r3, #9]
    }
    nextChan.LastAggrTx = MacCtx.AggregatedLastTxDoneTime;
 800ccc8:	4a97      	ldr	r2, [pc, #604]	; (800cf28 <ScheduleTx+0x2e4>)
 800ccca:	23d0      	movs	r3, #208	; 0xd0
 800cccc:	009b      	lsls	r3, r3, #2
 800ccce:	58d2      	ldr	r2, [r2, r3]
 800ccd0:	210c      	movs	r1, #12
 800ccd2:	187b      	adds	r3, r7, r1
 800ccd4:	605a      	str	r2, [r3, #4]

    // Select channel
    status = RegionNextChannel( MacCtx.NvmCtx->Region, &nextChan, &MacCtx.NvmCtx->Channel, &dutyCycleTimeOff, &MacCtx.AggregatedTimeOff );
 800ccd6:	4a94      	ldr	r2, [pc, #592]	; (800cf28 <ScheduleTx+0x2e4>)
 800ccd8:	238e      	movs	r3, #142	; 0x8e
 800ccda:	00db      	lsls	r3, r3, #3
 800ccdc:	58d3      	ldr	r3, [r2, r3]
 800ccde:	7818      	ldrb	r0, [r3, #0]
 800cce0:	4a91      	ldr	r2, [pc, #580]	; (800cf28 <ScheduleTx+0x2e4>)
 800cce2:	238e      	movs	r3, #142	; 0x8e
 800cce4:	00db      	lsls	r3, r3, #3
 800cce6:	58d3      	ldr	r3, [r2, r3]
 800cce8:	3314      	adds	r3, #20
 800ccea:	33ff      	adds	r3, #255	; 0xff
 800ccec:	001a      	movs	r2, r3
 800ccee:	261f      	movs	r6, #31
 800ccf0:	19bc      	adds	r4, r7, r6
 800ccf2:	2318      	movs	r3, #24
 800ccf4:	18fd      	adds	r5, r7, r3
 800ccf6:	1879      	adds	r1, r7, r1
 800ccf8:	4b8c      	ldr	r3, [pc, #560]	; (800cf2c <ScheduleTx+0x2e8>)
 800ccfa:	9300      	str	r3, [sp, #0]
 800ccfc:	002b      	movs	r3, r5
 800ccfe:	f006 f8e8 	bl	8012ed2 <RegionNextChannel>
 800cd02:	0003      	movs	r3, r0
 800cd04:	7023      	strb	r3, [r4, #0]

    if( status != LORAMAC_STATUS_OK )
 800cd06:	19bb      	adds	r3, r7, r6
 800cd08:	781b      	ldrb	r3, [r3, #0]
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d026      	beq.n	800cd5c <ScheduleTx+0x118>
    {
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 800cd0e:	231f      	movs	r3, #31
 800cd10:	18fb      	adds	r3, r7, r3
 800cd12:	781b      	ldrb	r3, [r3, #0]
 800cd14:	2b0b      	cmp	r3, #11
 800cd16:	d11d      	bne.n	800cd54 <ScheduleTx+0x110>
 800cd18:	1dfb      	adds	r3, r7, #7
 800cd1a:	781b      	ldrb	r3, [r3, #0]
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d019      	beq.n	800cd54 <ScheduleTx+0x110>
            ( allowDelayedTx == true ) )
        {
            // Allow delayed transmissions. We have to allow it in case
            // the MAC must retransmit a frame with the frame repetitions
            if( dutyCycleTimeOff != 0 )
 800cd20:	69bb      	ldr	r3, [r7, #24]
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d014      	beq.n	800cd50 <ScheduleTx+0x10c>
            {// Send later - prepare timer
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 800cd26:	4a80      	ldr	r2, [pc, #512]	; (800cf28 <ScheduleTx+0x2e4>)
 800cd28:	23d5      	movs	r3, #213	; 0xd5
 800cd2a:	009b      	lsls	r3, r3, #2
 800cd2c:	58d3      	ldr	r3, [r2, r3]
 800cd2e:	2220      	movs	r2, #32
 800cd30:	431a      	orrs	r2, r3
 800cd32:	0011      	movs	r1, r2
 800cd34:	4a7c      	ldr	r2, [pc, #496]	; (800cf28 <ScheduleTx+0x2e4>)
 800cd36:	23d5      	movs	r3, #213	; 0xd5
 800cd38:	009b      	lsls	r3, r3, #2
 800cd3a:	50d1      	str	r1, [r2, r3]
                TimerSetValue( &MacCtx.TxDelayedTimer, dutyCycleTimeOff );
 800cd3c:	69ba      	ldr	r2, [r7, #24]
 800cd3e:	4b7c      	ldr	r3, [pc, #496]	; (800cf30 <ScheduleTx+0x2ec>)
 800cd40:	0011      	movs	r1, r2
 800cd42:	0018      	movs	r0, r3
 800cd44:	f008 fbba 	bl	80154bc <TimerSetValue>
                TimerStart( &MacCtx.TxDelayedTimer );
 800cd48:	4b79      	ldr	r3, [pc, #484]	; (800cf30 <ScheduleTx+0x2ec>)
 800cd4a:	0018      	movs	r0, r3
 800cd4c:	f008 fbe2 	bl	8015514 <TimerStart>
            }
            return LORAMAC_STATUS_OK;
 800cd50:	2300      	movs	r3, #0
 800cd52:	e0e5      	b.n	800cf20 <ScheduleTx+0x2dc>
        }
        else
        {// State where the MAC cannot send a frame
            return status;
 800cd54:	231f      	movs	r3, #31
 800cd56:	18fb      	adds	r3, r7, r3
 800cd58:	781b      	ldrb	r3, [r3, #0]
 800cd5a:	e0e1      	b.n	800cf20 <ScheduleTx+0x2dc>
        }
    }

    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800cd5c:	4a72      	ldr	r2, [pc, #456]	; (800cf28 <ScheduleTx+0x2e4>)
 800cd5e:	238e      	movs	r3, #142	; 0x8e
 800cd60:	00db      	lsls	r3, r3, #3
 800cd62:	58d3      	ldr	r3, [r2, r3]
 800cd64:	781c      	ldrb	r4, [r3, #0]
                                     RegionApplyDrOffset( MacCtx.NvmCtx->Region, MacCtx.NvmCtx->MacParams.DownlinkDwellTime, MacCtx.NvmCtx->MacParams.ChannelsDatarate, MacCtx.NvmCtx->MacParams.Rx1DrOffset ),
 800cd66:	4a70      	ldr	r2, [pc, #448]	; (800cf28 <ScheduleTx+0x2e4>)
 800cd68:	238e      	movs	r3, #142	; 0x8e
 800cd6a:	00db      	lsls	r3, r3, #3
 800cd6c:	58d3      	ldr	r3, [r2, r3]
 800cd6e:	7818      	ldrb	r0, [r3, #0]
 800cd70:	4a6d      	ldr	r2, [pc, #436]	; (800cf28 <ScheduleTx+0x2e4>)
 800cd72:	238e      	movs	r3, #142	; 0x8e
 800cd74:	00db      	lsls	r3, r3, #3
 800cd76:	58d2      	ldr	r2, [r2, r3]
 800cd78:	2302      	movs	r3, #2
 800cd7a:	33ff      	adds	r3, #255	; 0xff
 800cd7c:	5cd1      	ldrb	r1, [r2, r3]
 800cd7e:	4a6a      	ldr	r2, [pc, #424]	; (800cf28 <ScheduleTx+0x2e4>)
 800cd80:	238e      	movs	r3, #142	; 0x8e
 800cd82:	00db      	lsls	r3, r3, #3
 800cd84:	58d3      	ldr	r3, [r2, r3]
 800cd86:	22d5      	movs	r2, #213	; 0xd5
 800cd88:	569d      	ldrsb	r5, [r3, r2]
 800cd8a:	4a67      	ldr	r2, [pc, #412]	; (800cf28 <ScheduleTx+0x2e4>)
 800cd8c:	238e      	movs	r3, #142	; 0x8e
 800cd8e:	00db      	lsls	r3, r3, #3
 800cd90:	58d3      	ldr	r3, [r2, r3]
 800cd92:	22f5      	movs	r2, #245	; 0xf5
 800cd94:	5c9b      	ldrb	r3, [r3, r2]
 800cd96:	b25b      	sxtb	r3, r3
 800cd98:	002a      	movs	r2, r5
 800cd9a:	f006 f8e0 	bl	8012f5e <RegionApplyDrOffset>
 800cd9e:	0003      	movs	r3, r0
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800cda0:	b259      	sxtb	r1, r3
                                     MacCtx.NvmCtx->MacParams.MinRxSymbols,
 800cda2:	4a61      	ldr	r2, [pc, #388]	; (800cf28 <ScheduleTx+0x2e4>)
 800cda4:	238e      	movs	r3, #142	; 0x8e
 800cda6:	00db      	lsls	r3, r3, #3
 800cda8:	58d3      	ldr	r3, [r2, r3]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800cdaa:	22dc      	movs	r2, #220	; 0xdc
 800cdac:	5c98      	ldrb	r0, [r3, r2]
                                     MacCtx.NvmCtx->MacParams.SystemMaxRxError,
 800cdae:	4a5e      	ldr	r2, [pc, #376]	; (800cf28 <ScheduleTx+0x2e4>)
 800cdb0:	238e      	movs	r3, #142	; 0x8e
 800cdb2:	00db      	lsls	r3, r3, #3
 800cdb4:	58d3      	ldr	r3, [r2, r3]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800cdb6:	22d8      	movs	r2, #216	; 0xd8
 800cdb8:	589a      	ldr	r2, [r3, r2]
 800cdba:	4b5e      	ldr	r3, [pc, #376]	; (800cf34 <ScheduleTx+0x2f0>)
 800cdbc:	9300      	str	r3, [sp, #0]
 800cdbe:	0013      	movs	r3, r2
 800cdc0:	0002      	movs	r2, r0
 800cdc2:	0020      	movs	r0, r4
 800cdc4:	f005 ff7e 	bl	8012cc4 <RegionComputeRxWindowParameters>
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800cdc8:	4a57      	ldr	r2, [pc, #348]	; (800cf28 <ScheduleTx+0x2e4>)
 800cdca:	238e      	movs	r3, #142	; 0x8e
 800cdcc:	00db      	lsls	r3, r3, #3
 800cdce:	58d3      	ldr	r3, [r2, r3]
 800cdd0:	7818      	ldrb	r0, [r3, #0]
                                     MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate,
 800cdd2:	4a55      	ldr	r2, [pc, #340]	; (800cf28 <ScheduleTx+0x2e4>)
 800cdd4:	238e      	movs	r3, #142	; 0x8e
 800cdd6:	00db      	lsls	r3, r3, #3
 800cdd8:	58d3      	ldr	r3, [r2, r3]
 800cdda:	22fc      	movs	r2, #252	; 0xfc
 800cddc:	5c9b      	ldrb	r3, [r3, r2]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800cdde:	b259      	sxtb	r1, r3
                                     MacCtx.NvmCtx->MacParams.MinRxSymbols,
 800cde0:	4a51      	ldr	r2, [pc, #324]	; (800cf28 <ScheduleTx+0x2e4>)
 800cde2:	238e      	movs	r3, #142	; 0x8e
 800cde4:	00db      	lsls	r3, r3, #3
 800cde6:	58d3      	ldr	r3, [r2, r3]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800cde8:	22dc      	movs	r2, #220	; 0xdc
 800cdea:	5c9c      	ldrb	r4, [r3, r2]
                                     MacCtx.NvmCtx->MacParams.SystemMaxRxError,
 800cdec:	4a4e      	ldr	r2, [pc, #312]	; (800cf28 <ScheduleTx+0x2e4>)
 800cdee:	238e      	movs	r3, #142	; 0x8e
 800cdf0:	00db      	lsls	r3, r3, #3
 800cdf2:	58d3      	ldr	r3, [r2, r3]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800cdf4:	22d8      	movs	r2, #216	; 0xd8
 800cdf6:	589a      	ldr	r2, [r3, r2]
 800cdf8:	4b4f      	ldr	r3, [pc, #316]	; (800cf38 <ScheduleTx+0x2f4>)
 800cdfa:	9300      	str	r3, [sp, #0]
 800cdfc:	0013      	movs	r3, r2
 800cdfe:	0022      	movs	r2, r4
 800ce00:	f005 ff60 	bl	8012cc4 <RegionComputeRxWindowParameters>
                                     &MacCtx.RxWindow2Config );

    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 800ce04:	4a48      	ldr	r2, [pc, #288]	; (800cf28 <ScheduleTx+0x2e4>)
 800ce06:	238e      	movs	r3, #142	; 0x8e
 800ce08:	00db      	lsls	r3, r3, #3
 800ce0a:	58d2      	ldr	r2, [r2, r3]
 800ce0c:	2389      	movs	r3, #137	; 0x89
 800ce0e:	009b      	lsls	r3, r3, #2
 800ce10:	5cd3      	ldrb	r3, [r2, r3]
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d11e      	bne.n	800ce54 <ScheduleTx+0x210>
    {
        MacCtx.RxWindow1Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800ce16:	4a44      	ldr	r2, [pc, #272]	; (800cf28 <ScheduleTx+0x2e4>)
 800ce18:	238e      	movs	r3, #142	; 0x8e
 800ce1a:	00db      	lsls	r3, r3, #3
 800ce1c:	58d3      	ldr	r3, [r2, r3]
 800ce1e:	22ec      	movs	r2, #236	; 0xec
 800ce20:	589b      	ldr	r3, [r3, r2]
 800ce22:	4941      	ldr	r1, [pc, #260]	; (800cf28 <ScheduleTx+0x2e4>)
 800ce24:	22f6      	movs	r2, #246	; 0xf6
 800ce26:	0092      	lsls	r2, r2, #2
 800ce28:	588a      	ldr	r2, [r1, r2]
 800ce2a:	1899      	adds	r1, r3, r2
 800ce2c:	4a3e      	ldr	r2, [pc, #248]	; (800cf28 <ScheduleTx+0x2e4>)
 800ce2e:	23f1      	movs	r3, #241	; 0xf1
 800ce30:	009b      	lsls	r3, r3, #2
 800ce32:	50d1      	str	r1, [r2, r3]
        MacCtx.RxWindow2Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800ce34:	4a3c      	ldr	r2, [pc, #240]	; (800cf28 <ScheduleTx+0x2e4>)
 800ce36:	238e      	movs	r3, #142	; 0x8e
 800ce38:	00db      	lsls	r3, r3, #3
 800ce3a:	58d3      	ldr	r3, [r2, r3]
 800ce3c:	22f0      	movs	r2, #240	; 0xf0
 800ce3e:	589b      	ldr	r3, [r3, r2]
 800ce40:	4939      	ldr	r1, [pc, #228]	; (800cf28 <ScheduleTx+0x2e4>)
 800ce42:	22fb      	movs	r2, #251	; 0xfb
 800ce44:	0092      	lsls	r2, r2, #2
 800ce46:	588a      	ldr	r2, [r1, r2]
 800ce48:	1899      	adds	r1, r3, r2
 800ce4a:	4a37      	ldr	r2, [pc, #220]	; (800cf28 <ScheduleTx+0x2e4>)
 800ce4c:	23f2      	movs	r3, #242	; 0xf2
 800ce4e:	009b      	lsls	r3, r3, #2
 800ce50:	50d1      	str	r1, [r2, r3]
 800ce52:	e03d      	b.n	800ced0 <ScheduleTx+0x28c>
    }
    else
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800ce54:	2308      	movs	r3, #8
 800ce56:	18fb      	adds	r3, r7, r3
 800ce58:	0018      	movs	r0, r3
 800ce5a:	f003 f9bf 	bl	80101dc <LoRaMacCommandsGetSizeSerializedCmds>
 800ce5e:	1e03      	subs	r3, r0, #0
 800ce60:	d001      	beq.n	800ce66 <ScheduleTx+0x222>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800ce62:	2313      	movs	r3, #19
 800ce64:	e05c      	b.n	800cf20 <ScheduleTx+0x2dc>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, MacCtx.NvmCtx->MacParams.ChannelsDatarate, macCmdsSize ) == false )
 800ce66:	4b30      	ldr	r3, [pc, #192]	; (800cf28 <ScheduleTx+0x2e4>)
 800ce68:	4a34      	ldr	r2, [pc, #208]	; (800cf3c <ScheduleTx+0x2f8>)
 800ce6a:	5c98      	ldrb	r0, [r3, r2]
 800ce6c:	4a2e      	ldr	r2, [pc, #184]	; (800cf28 <ScheduleTx+0x2e4>)
 800ce6e:	238e      	movs	r3, #142	; 0x8e
 800ce70:	00db      	lsls	r3, r3, #3
 800ce72:	58d3      	ldr	r3, [r2, r3]
 800ce74:	22d5      	movs	r2, #213	; 0xd5
 800ce76:	569b      	ldrsb	r3, [r3, r2]
 800ce78:	68ba      	ldr	r2, [r7, #8]
 800ce7a:	b2d2      	uxtb	r2, r2
 800ce7c:	0019      	movs	r1, r3
 800ce7e:	f7fe ff31 	bl	800bce4 <ValidatePayloadLength>
 800ce82:	0003      	movs	r3, r0
 800ce84:	001a      	movs	r2, r3
 800ce86:	2301      	movs	r3, #1
 800ce88:	4053      	eors	r3, r2
 800ce8a:	b2db      	uxtb	r3, r3
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d001      	beq.n	800ce94 <ScheduleTx+0x250>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
 800ce90:	2308      	movs	r3, #8
 800ce92:	e045      	b.n	800cf20 <ScheduleTx+0x2dc>
        }
        MacCtx.RxWindow1Delay = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800ce94:	4a24      	ldr	r2, [pc, #144]	; (800cf28 <ScheduleTx+0x2e4>)
 800ce96:	238e      	movs	r3, #142	; 0x8e
 800ce98:	00db      	lsls	r3, r3, #3
 800ce9a:	58d3      	ldr	r3, [r2, r3]
 800ce9c:	22e4      	movs	r2, #228	; 0xe4
 800ce9e:	589b      	ldr	r3, [r3, r2]
 800cea0:	4921      	ldr	r1, [pc, #132]	; (800cf28 <ScheduleTx+0x2e4>)
 800cea2:	22f6      	movs	r2, #246	; 0xf6
 800cea4:	0092      	lsls	r2, r2, #2
 800cea6:	588a      	ldr	r2, [r1, r2]
 800cea8:	1899      	adds	r1, r3, r2
 800ceaa:	4a1f      	ldr	r2, [pc, #124]	; (800cf28 <ScheduleTx+0x2e4>)
 800ceac:	23f1      	movs	r3, #241	; 0xf1
 800ceae:	009b      	lsls	r3, r3, #2
 800ceb0:	50d1      	str	r1, [r2, r3]
        MacCtx.RxWindow2Delay = MacCtx.NvmCtx->MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800ceb2:	4a1d      	ldr	r2, [pc, #116]	; (800cf28 <ScheduleTx+0x2e4>)
 800ceb4:	238e      	movs	r3, #142	; 0x8e
 800ceb6:	00db      	lsls	r3, r3, #3
 800ceb8:	58d3      	ldr	r3, [r2, r3]
 800ceba:	22e8      	movs	r2, #232	; 0xe8
 800cebc:	589b      	ldr	r3, [r3, r2]
 800cebe:	491a      	ldr	r1, [pc, #104]	; (800cf28 <ScheduleTx+0x2e4>)
 800cec0:	22fb      	movs	r2, #251	; 0xfb
 800cec2:	0092      	lsls	r2, r2, #2
 800cec4:	588a      	ldr	r2, [r1, r2]
 800cec6:	1899      	adds	r1, r3, r2
 800cec8:	4a17      	ldr	r2, [pc, #92]	; (800cf28 <ScheduleTx+0x2e4>)
 800ceca:	23f2      	movs	r3, #242	; 0xf2
 800cecc:	009b      	lsls	r3, r3, #2
 800cece:	50d1      	str	r1, [r2, r3]
    }

    // Secure frame
    LoRaMacStatus_t retval = SecureFrame( MacCtx.NvmCtx->MacParams.ChannelsDatarate, MacCtx.NvmCtx->Channel );
 800ced0:	4a15      	ldr	r2, [pc, #84]	; (800cf28 <ScheduleTx+0x2e4>)
 800ced2:	238e      	movs	r3, #142	; 0x8e
 800ced4:	00db      	lsls	r3, r3, #3
 800ced6:	58d3      	ldr	r3, [r2, r3]
 800ced8:	22d5      	movs	r2, #213	; 0xd5
 800ceda:	569b      	ldrsb	r3, [r3, r2]
 800cedc:	b2d8      	uxtb	r0, r3
 800cede:	4a12      	ldr	r2, [pc, #72]	; (800cf28 <ScheduleTx+0x2e4>)
 800cee0:	238e      	movs	r3, #142	; 0x8e
 800cee2:	00db      	lsls	r3, r3, #3
 800cee4:	58d2      	ldr	r2, [r2, r3]
 800cee6:	2314      	movs	r3, #20
 800cee8:	33ff      	adds	r3, #255	; 0xff
 800ceea:	5cd3      	ldrb	r3, [r2, r3]
 800ceec:	251e      	movs	r5, #30
 800ceee:	197c      	adds	r4, r7, r5
 800cef0:	0019      	movs	r1, r3
 800cef2:	f000 f825 	bl	800cf40 <SecureFrame>
 800cef6:	0003      	movs	r3, r0
 800cef8:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_STATUS_OK )
 800cefa:	197b      	adds	r3, r7, r5
 800cefc:	781b      	ldrb	r3, [r3, #0]
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d003      	beq.n	800cf0a <ScheduleTx+0x2c6>
    {
        return retval;
 800cf02:	231e      	movs	r3, #30
 800cf04:	18fb      	adds	r3, r7, r3
 800cf06:	781b      	ldrb	r3, [r3, #0]
 800cf08:	e00a      	b.n	800cf20 <ScheduleTx+0x2dc>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.NvmCtx->Channel );
 800cf0a:	4a07      	ldr	r2, [pc, #28]	; (800cf28 <ScheduleTx+0x2e4>)
 800cf0c:	238e      	movs	r3, #142	; 0x8e
 800cf0e:	00db      	lsls	r3, r3, #3
 800cf10:	58d2      	ldr	r2, [r2, r3]
 800cf12:	2314      	movs	r3, #20
 800cf14:	33ff      	adds	r3, #255	; 0xff
 800cf16:	5cd3      	ldrb	r3, [r2, r3]
 800cf18:	0018      	movs	r0, r3
 800cf1a:	f000 fb59 	bl	800d5d0 <SendFrameOnChannel>
 800cf1e:	0003      	movs	r3, r0
}
 800cf20:	0018      	movs	r0, r3
 800cf22:	46bd      	mov	sp, r7
 800cf24:	b009      	add	sp, #36	; 0x24
 800cf26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cf28:	2000070c 	.word	0x2000070c
 800cf2c:	20000a50 	.word	0x20000a50
 800cf30:	20000a88 	.word	0x20000a88
 800cf34:	20000ad8 	.word	0x20000ad8
 800cf38:	20000aec 	.word	0x20000aec
 800cf3c:	0000023f 	.word	0x0000023f

0800cf40 <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
 800cf40:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cf42:	b085      	sub	sp, #20
 800cf44:	af00      	add	r7, sp, #0
 800cf46:	0002      	movs	r2, r0
 800cf48:	1dfb      	adds	r3, r7, #7
 800cf4a:	701a      	strb	r2, [r3, #0]
 800cf4c:	1dbb      	adds	r3, r7, #6
 800cf4e:	1c0a      	adds	r2, r1, #0
 800cf50:	701a      	strb	r2, [r3, #0]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800cf52:	230f      	movs	r3, #15
 800cf54:	18fb      	adds	r3, r7, r3
 800cf56:	2210      	movs	r2, #16
 800cf58:	701a      	strb	r2, [r3, #0]
    uint32_t fCntUp = 0;
 800cf5a:	2300      	movs	r3, #0
 800cf5c:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
 800cf5e:	4a25      	ldr	r2, [pc, #148]	; (800cff4 <SecureFrame+0xb4>)
 800cf60:	2386      	movs	r3, #134	; 0x86
 800cf62:	005b      	lsls	r3, r3, #1
 800cf64:	5cd3      	ldrb	r3, [r2, r3]
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d002      	beq.n	800cf70 <SecureFrame+0x30>
 800cf6a:	2b04      	cmp	r3, #4
 800cf6c:	d016      	beq.n	800cf9c <SecureFrame+0x5c>
 800cf6e:	e039      	b.n	800cfe4 <SecureFrame+0xa4>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800cf70:	250f      	movs	r5, #15
 800cf72:	197c      	adds	r4, r7, r5
 800cf74:	4b20      	ldr	r3, [pc, #128]	; (800cff8 <SecureFrame+0xb8>)
 800cf76:	0018      	movs	r0, r3
 800cf78:	f004 fb88 	bl	801168c <LoRaMacCryptoPrepareJoinRequest>
 800cf7c:	0003      	movs	r3, r0
 800cf7e:	7023      	strb	r3, [r4, #0]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800cf80:	197b      	adds	r3, r7, r5
 800cf82:	781b      	ldrb	r3, [r3, #0]
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d001      	beq.n	800cf8c <SecureFrame+0x4c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800cf88:	2311      	movs	r3, #17
 800cf8a:	e02e      	b.n	800cfea <SecureFrame+0xaa>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 800cf8c:	4a19      	ldr	r2, [pc, #100]	; (800cff4 <SecureFrame+0xb4>)
 800cf8e:	238a      	movs	r3, #138	; 0x8a
 800cf90:	005b      	lsls	r3, r3, #1
 800cf92:	5cd3      	ldrb	r3, [r2, r3]
 800cf94:	b29a      	uxth	r2, r3
 800cf96:	4b17      	ldr	r3, [pc, #92]	; (800cff4 <SecureFrame+0xb4>)
 800cf98:	811a      	strh	r2, [r3, #8]
            break;
 800cf9a:	e025      	b.n	800cfe8 <SecureFrame+0xa8>
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_FCNT_HANDLER_SUCCESS != LoRaMacGetFCntUp( &fCntUp ) )
 800cf9c:	2308      	movs	r3, #8
 800cf9e:	18fb      	adds	r3, r7, r3
 800cfa0:	0018      	movs	r0, r3
 800cfa2:	f005 f999 	bl	80122d8 <LoRaMacGetFCntUp>
 800cfa6:	1e03      	subs	r3, r0, #0
 800cfa8:	d001      	beq.n	800cfae <SecureFrame+0x6e>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800cfaa:	2312      	movs	r3, #18
 800cfac:	e01d      	b.n	800cfea <SecureFrame+0xaa>
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 800cfae:	68b8      	ldr	r0, [r7, #8]
 800cfb0:	260f      	movs	r6, #15
 800cfb2:	19bc      	adds	r4, r7, r6
 800cfb4:	4d10      	ldr	r5, [pc, #64]	; (800cff8 <SecureFrame+0xb8>)
 800cfb6:	1dbb      	adds	r3, r7, #6
 800cfb8:	781a      	ldrb	r2, [r3, #0]
 800cfba:	1dfb      	adds	r3, r7, #7
 800cfbc:	7819      	ldrb	r1, [r3, #0]
 800cfbe:	002b      	movs	r3, r5
 800cfc0:	f004 fe52 	bl	8011c68 <LoRaMacCryptoSecureMessage>
 800cfc4:	0003      	movs	r3, r0
 800cfc6:	7023      	strb	r3, [r4, #0]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800cfc8:	19bb      	adds	r3, r7, r6
 800cfca:	781b      	ldrb	r3, [r3, #0]
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d001      	beq.n	800cfd4 <SecureFrame+0x94>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800cfd0:	2311      	movs	r3, #17
 800cfd2:	e00a      	b.n	800cfea <SecureFrame+0xaa>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800cfd4:	4a07      	ldr	r2, [pc, #28]	; (800cff4 <SecureFrame+0xb4>)
 800cfd6:	238a      	movs	r3, #138	; 0x8a
 800cfd8:	005b      	lsls	r3, r3, #1
 800cfda:	5cd3      	ldrb	r3, [r2, r3]
 800cfdc:	b29a      	uxth	r2, r3
 800cfde:	4b05      	ldr	r3, [pc, #20]	; (800cff4 <SecureFrame+0xb4>)
 800cfe0:	811a      	strh	r2, [r3, #8]
            break;
 800cfe2:	e001      	b.n	800cfe8 <SecureFrame+0xa8>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 800cfe4:	2303      	movs	r3, #3
 800cfe6:	e000      	b.n	800cfea <SecureFrame+0xaa>
    }
    return LORAMAC_STATUS_OK;
 800cfe8:	2300      	movs	r3, #0
}
 800cfea:	0018      	movs	r0, r3
 800cfec:	46bd      	mov	sp, r7
 800cfee:	b005      	add	sp, #20
 800cff0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cff2:	46c0      	nop			; (mov r8, r8)
 800cff4:	2000070c 	.word	0x2000070c
 800cff8:	2000081c 	.word	0x2000081c

0800cffc <CalculateBackOff>:

static void CalculateBackOff( uint8_t channel )
{
 800cffc:	b590      	push	{r4, r7, lr}
 800cffe:	b087      	sub	sp, #28
 800d000:	af00      	add	r7, sp, #0
 800d002:	0002      	movs	r2, r0
 800d004:	1dfb      	adds	r3, r7, #7
 800d006:	701a      	strb	r2, [r3, #0]
    CalcBackOffParams_t calcBackOff;

    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 800d008:	4a31      	ldr	r2, [pc, #196]	; (800d0d0 <CalculateBackOff+0xd4>)
 800d00a:	238e      	movs	r3, #142	; 0x8e
 800d00c:	00db      	lsls	r3, r3, #3
 800d00e:	58d2      	ldr	r2, [r2, r3]
 800d010:	2389      	movs	r3, #137	; 0x89
 800d012:	009b      	lsls	r3, r3, #2
 800d014:	5cd3      	ldrb	r3, [r2, r3]
 800d016:	2b00      	cmp	r3, #0
 800d018:	d104      	bne.n	800d024 <CalculateBackOff+0x28>
    {
        calcBackOff.Joined = false;
 800d01a:	230c      	movs	r3, #12
 800d01c:	18fb      	adds	r3, r7, r3
 800d01e:	2200      	movs	r2, #0
 800d020:	701a      	strb	r2, [r3, #0]
 800d022:	e003      	b.n	800d02c <CalculateBackOff+0x30>
    }
    else
    {
        calcBackOff.Joined = true;
 800d024:	230c      	movs	r3, #12
 800d026:	18fb      	adds	r3, r7, r3
 800d028:	2201      	movs	r2, #1
 800d02a:	701a      	strb	r2, [r3, #0]
    }
    calcBackOff.DutyCycleEnabled = MacCtx.NvmCtx->DutyCycleOn;
 800d02c:	4a28      	ldr	r2, [pc, #160]	; (800d0d0 <CalculateBackOff+0xd4>)
 800d02e:	238e      	movs	r3, #142	; 0x8e
 800d030:	00db      	lsls	r3, r3, #3
 800d032:	58d2      	ldr	r2, [r2, r3]
 800d034:	2389      	movs	r3, #137	; 0x89
 800d036:	005b      	lsls	r3, r3, #1
 800d038:	5cd2      	ldrb	r2, [r2, r3]
 800d03a:	240c      	movs	r4, #12
 800d03c:	193b      	adds	r3, r7, r4
 800d03e:	709a      	strb	r2, [r3, #2]
    calcBackOff.Channel = channel;
 800d040:	193b      	adds	r3, r7, r4
 800d042:	1dfa      	adds	r2, r7, #7
 800d044:	7812      	ldrb	r2, [r2, #0]
 800d046:	70da      	strb	r2, [r3, #3]
    calcBackOff.ElapsedTime = TimerGetElapsedTime( MacCtx.InitializationTime );
 800d048:	4a21      	ldr	r2, [pc, #132]	; (800d0d0 <CalculateBackOff+0xd4>)
 800d04a:	23d2      	movs	r3, #210	; 0xd2
 800d04c:	009b      	lsls	r3, r3, #2
 800d04e:	58d3      	ldr	r3, [r2, r3]
 800d050:	0018      	movs	r0, r3
 800d052:	f008 faf8 	bl	8015646 <TimerGetElapsedTime>
 800d056:	0002      	movs	r2, r0
 800d058:	193b      	adds	r3, r7, r4
 800d05a:	605a      	str	r2, [r3, #4]
    calcBackOff.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800d05c:	4b1c      	ldr	r3, [pc, #112]	; (800d0d0 <CalculateBackOff+0xd4>)
 800d05e:	4a1d      	ldr	r2, [pc, #116]	; (800d0d4 <CalculateBackOff+0xd8>)
 800d060:	589a      	ldr	r2, [r3, r2]
 800d062:	193b      	adds	r3, r7, r4
 800d064:	609a      	str	r2, [r3, #8]
    calcBackOff.LastTxIsJoinRequest = false;
 800d066:	193b      	adds	r3, r7, r4
 800d068:	2200      	movs	r2, #0
 800d06a:	705a      	strb	r2, [r3, #1]
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) && ( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true ) )
 800d06c:	4b18      	ldr	r3, [pc, #96]	; (800d0d0 <CalculateBackOff+0xd4>)
 800d06e:	4a1a      	ldr	r2, [pc, #104]	; (800d0d8 <CalculateBackOff+0xdc>)
 800d070:	5c9b      	ldrb	r3, [r3, r2]
 800d072:	2204      	movs	r2, #4
 800d074:	4013      	ands	r3, r2
 800d076:	b2db      	uxtb	r3, r3
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d008      	beq.n	800d08e <CalculateBackOff+0x92>
 800d07c:	2000      	movs	r0, #0
 800d07e:	f003 faa9 	bl	80105d4 <LoRaMacConfirmQueueIsCmdActive>
 800d082:	1e03      	subs	r3, r0, #0
 800d084:	d003      	beq.n	800d08e <CalculateBackOff+0x92>
    {
        calcBackOff.LastTxIsJoinRequest = true;
 800d086:	230c      	movs	r3, #12
 800d088:	18fb      	adds	r3, r7, r3
 800d08a:	2201      	movs	r2, #1
 800d08c:	705a      	strb	r2, [r3, #1]
    }

    // Update regional back-off
    RegionCalcBackOff( MacCtx.NvmCtx->Region, &calcBackOff );
 800d08e:	4a10      	ldr	r2, [pc, #64]	; (800d0d0 <CalculateBackOff+0xd4>)
 800d090:	238e      	movs	r3, #142	; 0x8e
 800d092:	00db      	lsls	r3, r3, #3
 800d094:	58d3      	ldr	r3, [r2, r3]
 800d096:	781b      	ldrb	r3, [r3, #0]
 800d098:	220c      	movs	r2, #12
 800d09a:	18ba      	adds	r2, r7, r2
 800d09c:	0011      	movs	r1, r2
 800d09e:	0018      	movs	r0, r3
 800d0a0:	f005 ff02 	bl	8012ea8 <RegionCalcBackOff>

    // Update aggregated time-off. This must be an assignment and no incremental
    // update as we do only calculate the time-off based on the last transmission
    MacCtx.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * MacCtx.NvmCtx->AggregatedDCycle - MacCtx.TxTimeOnAir );
 800d0a4:	4a0a      	ldr	r2, [pc, #40]	; (800d0d0 <CalculateBackOff+0xd4>)
 800d0a6:	238e      	movs	r3, #142	; 0x8e
 800d0a8:	00db      	lsls	r3, r3, #3
 800d0aa:	58d2      	ldr	r2, [r2, r3]
 800d0ac:	2387      	movs	r3, #135	; 0x87
 800d0ae:	009b      	lsls	r3, r3, #2
 800d0b0:	5ad3      	ldrh	r3, [r2, r3]
 800d0b2:	3b01      	subs	r3, #1
 800d0b4:	4a06      	ldr	r2, [pc, #24]	; (800d0d0 <CalculateBackOff+0xd4>)
 800d0b6:	4907      	ldr	r1, [pc, #28]	; (800d0d4 <CalculateBackOff+0xd8>)
 800d0b8:	5852      	ldr	r2, [r2, r1]
 800d0ba:	435a      	muls	r2, r3
 800d0bc:	0011      	movs	r1, r2
 800d0be:	4a04      	ldr	r2, [pc, #16]	; (800d0d0 <CalculateBackOff+0xd4>)
 800d0c0:	23d1      	movs	r3, #209	; 0xd1
 800d0c2:	009b      	lsls	r3, r3, #2
 800d0c4:	50d1      	str	r1, [r2, r3]
}
 800d0c6:	46c0      	nop			; (mov r8, r8)
 800d0c8:	46bd      	mov	sp, r7
 800d0ca:	b007      	add	sp, #28
 800d0cc:	bd90      	pop	{r4, r7, pc}
 800d0ce:	46c0      	nop			; (mov r8, r8)
 800d0d0:	2000070c 	.word	0x2000070c
 800d0d4:	0000040c 	.word	0x0000040c
 800d0d8:	0000046d 	.word	0x0000046d

0800d0dc <RemoveMacCommands>:

static void RemoveMacCommands( LoRaMacRxSlot_t rxSlot, LoRaMacFrameCtrl_t fCtrl, Mcps_t request )
{
 800d0dc:	b580      	push	{r7, lr}
 800d0de:	b082      	sub	sp, #8
 800d0e0:	af00      	add	r7, sp, #0
 800d0e2:	1d3b      	adds	r3, r7, #4
 800d0e4:	7019      	strb	r1, [r3, #0]
 800d0e6:	0011      	movs	r1, r2
 800d0e8:	1dfb      	adds	r3, r7, #7
 800d0ea:	1c02      	adds	r2, r0, #0
 800d0ec:	701a      	strb	r2, [r3, #0]
 800d0ee:	1dbb      	adds	r3, r7, #6
 800d0f0:	1c0a      	adds	r2, r1, #0
 800d0f2:	701a      	strb	r2, [r3, #0]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 800d0f4:	1dfb      	adds	r3, r7, #7
 800d0f6:	781b      	ldrb	r3, [r3, #0]
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d003      	beq.n	800d104 <RemoveMacCommands+0x28>
 800d0fc:	1dfb      	adds	r3, r7, #7
 800d0fe:	781b      	ldrb	r3, [r3, #0]
 800d100:	2b01      	cmp	r3, #1
 800d102:	d10f      	bne.n	800d124 <RemoveMacCommands+0x48>
    {
        // Remove all sticky MAC commands answers since we can assume
        // that they have been received by the server.
        if( request == MCPS_CONFIRMED )
 800d104:	1dbb      	adds	r3, r7, #6
 800d106:	781b      	ldrb	r3, [r3, #0]
 800d108:	2b01      	cmp	r3, #1
 800d10a:	d109      	bne.n	800d120 <RemoveMacCommands+0x44>
        {
            if( fCtrl.Bits.Ack == 1 )
 800d10c:	1d3b      	adds	r3, r7, #4
 800d10e:	781b      	ldrb	r3, [r3, #0]
 800d110:	2220      	movs	r2, #32
 800d112:	4013      	ands	r3, r2
 800d114:	b2db      	uxtb	r3, r3
 800d116:	2b00      	cmp	r3, #0
 800d118:	d004      	beq.n	800d124 <RemoveMacCommands+0x48>
            {  // For confirmed uplinks only if we have received an ACK.
                LoRaMacCommandsRemoveStickyAnsCmds( );
 800d11a:	f003 f823 	bl	8010164 <LoRaMacCommandsRemoveStickyAnsCmds>
        else
        {
            LoRaMacCommandsRemoveStickyAnsCmds( );
        }
    }
}
 800d11e:	e001      	b.n	800d124 <RemoveMacCommands+0x48>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 800d120:	f003 f820 	bl	8010164 <LoRaMacCommandsRemoveStickyAnsCmds>
}
 800d124:	46c0      	nop			; (mov r8, r8)
 800d126:	46bd      	mov	sp, r7
 800d128:	b002      	add	sp, #8
 800d12a:	bd80      	pop	{r7, pc}

0800d12c <ResetMacParameters>:


static void ResetMacParameters( void )
{
 800d12c:	b580      	push	{r7, lr}
 800d12e:	b082      	sub	sp, #8
 800d130:	af00      	add	r7, sp, #0
    MacCtx.NvmCtx->NetworkActivation = ACTIVATION_TYPE_NONE;
 800d132:	4a6d      	ldr	r2, [pc, #436]	; (800d2e8 <ResetMacParameters+0x1bc>)
 800d134:	238e      	movs	r3, #142	; 0x8e
 800d136:	00db      	lsls	r3, r3, #3
 800d138:	58d2      	ldr	r2, [r2, r3]
 800d13a:	2389      	movs	r3, #137	; 0x89
 800d13c:	009b      	lsls	r3, r3, #2
 800d13e:	2100      	movs	r1, #0
 800d140:	54d1      	strb	r1, [r2, r3]

    // ADR counter
    MacCtx.NvmCtx->AdrAckCounter = 0;
 800d142:	4a69      	ldr	r2, [pc, #420]	; (800d2e8 <ResetMacParameters+0x1bc>)
 800d144:	238e      	movs	r3, #142	; 0x8e
 800d146:	00db      	lsls	r3, r3, #3
 800d148:	58d3      	ldr	r3, [r2, r3]
 800d14a:	22cc      	movs	r2, #204	; 0xcc
 800d14c:	2100      	movs	r1, #0
 800d14e:	5099      	str	r1, [r3, r2]

    // Initialize the uplink and downlink counters default value
    LoRaMacResetFCnts( );
 800d150:	f005 f8e8 	bl	8012324 <LoRaMacResetFCnts>

    MacCtx.NvmCtx->ChannelsNbTransCounter = 0;
 800d154:	4a64      	ldr	r2, [pc, #400]	; (800d2e8 <ResetMacParameters+0x1bc>)
 800d156:	238e      	movs	r3, #142	; 0x8e
 800d158:	00db      	lsls	r3, r3, #3
 800d15a:	58d2      	ldr	r2, [r2, r3]
 800d15c:	2388      	movs	r3, #136	; 0x88
 800d15e:	005b      	lsls	r3, r3, #1
 800d160:	2100      	movs	r1, #0
 800d162:	54d1      	strb	r1, [r2, r3]
    MacCtx.NvmCtx->AckTimeoutRetries = 1;
 800d164:	4a60      	ldr	r2, [pc, #384]	; (800d2e8 <ResetMacParameters+0x1bc>)
 800d166:	238e      	movs	r3, #142	; 0x8e
 800d168:	00db      	lsls	r3, r3, #3
 800d16a:	58d3      	ldr	r3, [r2, r3]
 800d16c:	4a5f      	ldr	r2, [pc, #380]	; (800d2ec <ResetMacParameters+0x1c0>)
 800d16e:	2101      	movs	r1, #1
 800d170:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->AckTimeoutRetriesCounter = 1;
 800d172:	4a5d      	ldr	r2, [pc, #372]	; (800d2e8 <ResetMacParameters+0x1bc>)
 800d174:	238e      	movs	r3, #142	; 0x8e
 800d176:	00db      	lsls	r3, r3, #3
 800d178:	58d3      	ldr	r3, [r2, r3]
 800d17a:	4a5d      	ldr	r2, [pc, #372]	; (800d2f0 <ResetMacParameters+0x1c4>)
 800d17c:	2101      	movs	r1, #1
 800d17e:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->AckTimeoutRetry = false;
 800d180:	4a59      	ldr	r2, [pc, #356]	; (800d2e8 <ResetMacParameters+0x1bc>)
 800d182:	238e      	movs	r3, #142	; 0x8e
 800d184:	00db      	lsls	r3, r3, #3
 800d186:	58d2      	ldr	r2, [r2, r3]
 800d188:	2386      	movs	r3, #134	; 0x86
 800d18a:	009b      	lsls	r3, r3, #2
 800d18c:	2100      	movs	r1, #0
 800d18e:	54d1      	strb	r1, [r2, r3]

    MacCtx.NvmCtx->MaxDCycle = 0;
 800d190:	4a55      	ldr	r2, [pc, #340]	; (800d2e8 <ResetMacParameters+0x1bc>)
 800d192:	238e      	movs	r3, #142	; 0x8e
 800d194:	00db      	lsls	r3, r3, #3
 800d196:	58d2      	ldr	r2, [r2, r3]
 800d198:	2312      	movs	r3, #18
 800d19a:	33ff      	adds	r3, #255	; 0xff
 800d19c:	2100      	movs	r1, #0
 800d19e:	54d1      	strb	r1, [r2, r3]
    MacCtx.NvmCtx->AggregatedDCycle = 1;
 800d1a0:	4a51      	ldr	r2, [pc, #324]	; (800d2e8 <ResetMacParameters+0x1bc>)
 800d1a2:	238e      	movs	r3, #142	; 0x8e
 800d1a4:	00db      	lsls	r3, r3, #3
 800d1a6:	58d2      	ldr	r2, [r2, r3]
 800d1a8:	2387      	movs	r3, #135	; 0x87
 800d1aa:	009b      	lsls	r3, r3, #2
 800d1ac:	2101      	movs	r1, #1
 800d1ae:	52d1      	strh	r1, [r2, r3]

    MacCtx.NvmCtx->MacParams.ChannelsTxPower = MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower;
 800d1b0:	4a4d      	ldr	r2, [pc, #308]	; (800d2e8 <ResetMacParameters+0x1bc>)
 800d1b2:	238e      	movs	r3, #142	; 0x8e
 800d1b4:	00db      	lsls	r3, r3, #3
 800d1b6:	58d2      	ldr	r2, [r2, r3]
 800d1b8:	494b      	ldr	r1, [pc, #300]	; (800d2e8 <ResetMacParameters+0x1bc>)
 800d1ba:	238e      	movs	r3, #142	; 0x8e
 800d1bc:	00db      	lsls	r3, r3, #3
 800d1be:	58cb      	ldr	r3, [r1, r3]
 800d1c0:	2104      	movs	r1, #4
 800d1c2:	5651      	ldrsb	r1, [r2, r1]
 800d1c4:	22d4      	movs	r2, #212	; 0xd4
 800d1c6:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParams.ChannelsDatarate = MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate;
 800d1c8:	4a47      	ldr	r2, [pc, #284]	; (800d2e8 <ResetMacParameters+0x1bc>)
 800d1ca:	238e      	movs	r3, #142	; 0x8e
 800d1cc:	00db      	lsls	r3, r3, #3
 800d1ce:	58d2      	ldr	r2, [r2, r3]
 800d1d0:	4945      	ldr	r1, [pc, #276]	; (800d2e8 <ResetMacParameters+0x1bc>)
 800d1d2:	238e      	movs	r3, #142	; 0x8e
 800d1d4:	00db      	lsls	r3, r3, #3
 800d1d6:	58cb      	ldr	r3, [r1, r3]
 800d1d8:	2105      	movs	r1, #5
 800d1da:	5651      	ldrsb	r1, [r2, r1]
 800d1dc:	22d5      	movs	r2, #213	; 0xd5
 800d1de:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParams.Rx1DrOffset = MacCtx.NvmCtx->MacParamsDefaults.Rx1DrOffset;
 800d1e0:	4a41      	ldr	r2, [pc, #260]	; (800d2e8 <ResetMacParameters+0x1bc>)
 800d1e2:	238e      	movs	r3, #142	; 0x8e
 800d1e4:	00db      	lsls	r3, r3, #3
 800d1e6:	58d2      	ldr	r2, [r2, r3]
 800d1e8:	493f      	ldr	r1, [pc, #252]	; (800d2e8 <ResetMacParameters+0x1bc>)
 800d1ea:	238e      	movs	r3, #142	; 0x8e
 800d1ec:	00db      	lsls	r3, r3, #3
 800d1ee:	58cb      	ldr	r3, [r1, r3]
 800d1f0:	2125      	movs	r1, #37	; 0x25
 800d1f2:	5c51      	ldrb	r1, [r2, r1]
 800d1f4:	22f5      	movs	r2, #245	; 0xf5
 800d1f6:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParams.Rx2Channel = MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel;
 800d1f8:	4a3b      	ldr	r2, [pc, #236]	; (800d2e8 <ResetMacParameters+0x1bc>)
 800d1fa:	238e      	movs	r3, #142	; 0x8e
 800d1fc:	00db      	lsls	r3, r3, #3
 800d1fe:	58d2      	ldr	r2, [r2, r3]
 800d200:	4939      	ldr	r1, [pc, #228]	; (800d2e8 <ResetMacParameters+0x1bc>)
 800d202:	238e      	movs	r3, #142	; 0x8e
 800d204:	00db      	lsls	r3, r3, #3
 800d206:	58cb      	ldr	r3, [r1, r3]
 800d208:	21f8      	movs	r1, #248	; 0xf8
 800d20a:	185b      	adds	r3, r3, r1
 800d20c:	3228      	adds	r2, #40	; 0x28
 800d20e:	ca03      	ldmia	r2!, {r0, r1}
 800d210:	c303      	stmia	r3!, {r0, r1}
    MacCtx.NvmCtx->MacParams.UplinkDwellTime = MacCtx.NvmCtx->MacParamsDefaults.UplinkDwellTime;
 800d212:	4a35      	ldr	r2, [pc, #212]	; (800d2e8 <ResetMacParameters+0x1bc>)
 800d214:	238e      	movs	r3, #142	; 0x8e
 800d216:	00db      	lsls	r3, r3, #3
 800d218:	58d3      	ldr	r3, [r2, r3]
 800d21a:	4933      	ldr	r1, [pc, #204]	; (800d2e8 <ResetMacParameters+0x1bc>)
 800d21c:	228e      	movs	r2, #142	; 0x8e
 800d21e:	00d2      	lsls	r2, r2, #3
 800d220:	588a      	ldr	r2, [r1, r2]
 800d222:	2130      	movs	r1, #48	; 0x30
 800d224:	5c59      	ldrb	r1, [r3, r1]
 800d226:	2380      	movs	r3, #128	; 0x80
 800d228:	005b      	lsls	r3, r3, #1
 800d22a:	54d1      	strb	r1, [r2, r3]
    MacCtx.NvmCtx->MacParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParamsDefaults.DownlinkDwellTime;
 800d22c:	4a2e      	ldr	r2, [pc, #184]	; (800d2e8 <ResetMacParameters+0x1bc>)
 800d22e:	238e      	movs	r3, #142	; 0x8e
 800d230:	00db      	lsls	r3, r3, #3
 800d232:	58d3      	ldr	r3, [r2, r3]
 800d234:	492c      	ldr	r1, [pc, #176]	; (800d2e8 <ResetMacParameters+0x1bc>)
 800d236:	228e      	movs	r2, #142	; 0x8e
 800d238:	00d2      	lsls	r2, r2, #3
 800d23a:	588a      	ldr	r2, [r1, r2]
 800d23c:	2131      	movs	r1, #49	; 0x31
 800d23e:	5c59      	ldrb	r1, [r3, r1]
 800d240:	2302      	movs	r3, #2
 800d242:	33ff      	adds	r3, #255	; 0xff
 800d244:	54d1      	strb	r1, [r2, r3]
    MacCtx.NvmCtx->MacParams.MaxEirp = MacCtx.NvmCtx->MacParamsDefaults.MaxEirp;
 800d246:	4a28      	ldr	r2, [pc, #160]	; (800d2e8 <ResetMacParameters+0x1bc>)
 800d248:	238e      	movs	r3, #142	; 0x8e
 800d24a:	00db      	lsls	r3, r3, #3
 800d24c:	58d3      	ldr	r3, [r2, r3]
 800d24e:	4926      	ldr	r1, [pc, #152]	; (800d2e8 <ResetMacParameters+0x1bc>)
 800d250:	228e      	movs	r2, #142	; 0x8e
 800d252:	00d2      	lsls	r2, r2, #3
 800d254:	588a      	ldr	r2, [r1, r2]
 800d256:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800d258:	2382      	movs	r3, #130	; 0x82
 800d25a:	005b      	lsls	r3, r3, #1
 800d25c:	50d1      	str	r1, [r2, r3]
    MacCtx.NvmCtx->MacParams.AntennaGain = MacCtx.NvmCtx->MacParamsDefaults.AntennaGain;
 800d25e:	4a22      	ldr	r2, [pc, #136]	; (800d2e8 <ResetMacParameters+0x1bc>)
 800d260:	238e      	movs	r3, #142	; 0x8e
 800d262:	00db      	lsls	r3, r3, #3
 800d264:	58d3      	ldr	r3, [r2, r3]
 800d266:	4920      	ldr	r1, [pc, #128]	; (800d2e8 <ResetMacParameters+0x1bc>)
 800d268:	228e      	movs	r2, #142	; 0x8e
 800d26a:	00d2      	lsls	r2, r2, #3
 800d26c:	588a      	ldr	r2, [r1, r2]
 800d26e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800d270:	2384      	movs	r3, #132	; 0x84
 800d272:	005b      	lsls	r3, r3, #1
 800d274:	50d1      	str	r1, [r2, r3]

    MacCtx.NvmCtx->NodeAckRequested = false;
 800d276:	4a1c      	ldr	r2, [pc, #112]	; (800d2e8 <ResetMacParameters+0x1bc>)
 800d278:	238e      	movs	r3, #142	; 0x8e
 800d27a:	00db      	lsls	r3, r3, #3
 800d27c:	58d3      	ldr	r3, [r2, r3]
 800d27e:	4a1d      	ldr	r2, [pc, #116]	; (800d2f4 <ResetMacParameters+0x1c8>)
 800d280:	2100      	movs	r1, #0
 800d282:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->SrvAckRequested = false;
 800d284:	4a18      	ldr	r2, [pc, #96]	; (800d2e8 <ResetMacParameters+0x1bc>)
 800d286:	238e      	movs	r3, #142	; 0x8e
 800d288:	00db      	lsls	r3, r3, #3
 800d28a:	58d3      	ldr	r3, [r2, r3]
 800d28c:	4a1a      	ldr	r2, [pc, #104]	; (800d2f8 <ResetMacParameters+0x1cc>)
 800d28e:	2100      	movs	r1, #0
 800d290:	5499      	strb	r1, [r3, r2]

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESTORE_DEFAULT_CHANNELS;
 800d292:	003b      	movs	r3, r7
 800d294:	2201      	movs	r2, #1
 800d296:	711a      	strb	r2, [r3, #4]
    params.NvmCtx = NULL;
 800d298:	003b      	movs	r3, r7
 800d29a:	2200      	movs	r2, #0
 800d29c:	601a      	str	r2, [r3, #0]
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 800d29e:	4a12      	ldr	r2, [pc, #72]	; (800d2e8 <ResetMacParameters+0x1bc>)
 800d2a0:	238e      	movs	r3, #142	; 0x8e
 800d2a2:	00db      	lsls	r3, r3, #3
 800d2a4:	58d3      	ldr	r3, [r2, r3]
 800d2a6:	781b      	ldrb	r3, [r3, #0]
 800d2a8:	003a      	movs	r2, r7
 800d2aa:	0011      	movs	r1, r2
 800d2ac:	0018      	movs	r0, r3
 800d2ae:	f005 fc96 	bl	8012bde <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.NvmCtx->Channel = 0;
 800d2b2:	4a0d      	ldr	r2, [pc, #52]	; (800d2e8 <ResetMacParameters+0x1bc>)
 800d2b4:	238e      	movs	r3, #142	; 0x8e
 800d2b6:	00db      	lsls	r3, r3, #3
 800d2b8:	58d2      	ldr	r2, [r2, r3]
 800d2ba:	2314      	movs	r3, #20
 800d2bc:	33ff      	adds	r3, #255	; 0xff
 800d2be:	2100      	movs	r1, #0
 800d2c0:	54d1      	strb	r1, [r2, r3]
    MacCtx.NvmCtx->LastTxChannel = MacCtx.NvmCtx->Channel;
 800d2c2:	4a09      	ldr	r2, [pc, #36]	; (800d2e8 <ResetMacParameters+0x1bc>)
 800d2c4:	238e      	movs	r3, #142	; 0x8e
 800d2c6:	00db      	lsls	r3, r3, #3
 800d2c8:	58d1      	ldr	r1, [r2, r3]
 800d2ca:	4a07      	ldr	r2, [pc, #28]	; (800d2e8 <ResetMacParameters+0x1bc>)
 800d2cc:	238e      	movs	r3, #142	; 0x8e
 800d2ce:	00db      	lsls	r3, r3, #3
 800d2d0:	58d2      	ldr	r2, [r2, r3]
 800d2d2:	2314      	movs	r3, #20
 800d2d4:	33ff      	adds	r3, #255	; 0xff
 800d2d6:	5cc9      	ldrb	r1, [r1, r3]
 800d2d8:	238a      	movs	r3, #138	; 0x8a
 800d2da:	005b      	lsls	r3, r3, #1
 800d2dc:	54d1      	strb	r1, [r2, r3]
}
 800d2de:	46c0      	nop			; (mov r8, r8)
 800d2e0:	46bd      	mov	sp, r7
 800d2e2:	b002      	add	sp, #8
 800d2e4:	bd80      	pop	{r7, pc}
 800d2e6:	46c0      	nop			; (mov r8, r8)
 800d2e8:	2000070c 	.word	0x2000070c
 800d2ec:	00000216 	.word	0x00000216
 800d2f0:	00000217 	.word	0x00000217
 800d2f4:	00000219 	.word	0x00000219
 800d2f8:	0000021a 	.word	0x0000021a

0800d2fc <OpenContinuousRx2Window>:

static void OpenContinuousRx2Window( void )
{
 800d2fc:	b580      	push	{r7, lr}
 800d2fe:	af00      	add	r7, sp, #0
    OnRxWindow2TimerEvent( NULL );
 800d300:	2000      	movs	r0, #0
 800d302:	f7fe fb01 	bl	800b908 <OnRxWindow2TimerEvent>
    MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 800d306:	4b03      	ldr	r3, [pc, #12]	; (800d314 <OpenContinuousRx2Window+0x18>)
 800d308:	4a03      	ldr	r2, [pc, #12]	; (800d318 <OpenContinuousRx2Window+0x1c>)
 800d30a:	2102      	movs	r1, #2
 800d30c:	5499      	strb	r1, [r3, r2]
}
 800d30e:	46c0      	nop			; (mov r8, r8)
 800d310:	46bd      	mov	sp, r7
 800d312:	bd80      	pop	{r7, pc}
 800d314:	2000070c 	.word	0x2000070c
 800d318:	0000046c 	.word	0x0000046c

0800d31c <PrepareFrame>:

LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t* macHdr, LoRaMacFrameCtrl_t* fCtrl, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 800d31c:	b590      	push	{r4, r7, lr}
 800d31e:	b089      	sub	sp, #36	; 0x24
 800d320:	af00      	add	r7, sp, #0
 800d322:	60f8      	str	r0, [r7, #12]
 800d324:	60b9      	str	r1, [r7, #8]
 800d326:	603b      	str	r3, [r7, #0]
 800d328:	1dfb      	adds	r3, r7, #7
 800d32a:	701a      	strb	r2, [r3, #0]
    MacCtx.PktBufferLen = 0;
 800d32c:	4ba0      	ldr	r3, [pc, #640]	; (800d5b0 <PrepareFrame+0x294>)
 800d32e:	2200      	movs	r2, #0
 800d330:	811a      	strh	r2, [r3, #8]
    MacCtx.NvmCtx->NodeAckRequested = false;
 800d332:	4a9f      	ldr	r2, [pc, #636]	; (800d5b0 <PrepareFrame+0x294>)
 800d334:	238e      	movs	r3, #142	; 0x8e
 800d336:	00db      	lsls	r3, r3, #3
 800d338:	58d3      	ldr	r3, [r2, r3]
 800d33a:	4a9e      	ldr	r2, [pc, #632]	; (800d5b4 <PrepareFrame+0x298>)
 800d33c:	2100      	movs	r1, #0
 800d33e:	5499      	strb	r1, [r3, r2]
    uint32_t fCntUp = 0;
 800d340:	2300      	movs	r3, #0
 800d342:	61bb      	str	r3, [r7, #24]
    size_t macCmdsSize = 0;
 800d344:	2300      	movs	r3, #0
 800d346:	617b      	str	r3, [r7, #20]
    uint8_t availableSize = 0;
 800d348:	231f      	movs	r3, #31
 800d34a:	18fb      	adds	r3, r7, r3
 800d34c:	2200      	movs	r2, #0
 800d34e:	701a      	strb	r2, [r3, #0]

    if( fBuffer == NULL )
 800d350:	683b      	ldr	r3, [r7, #0]
 800d352:	2b00      	cmp	r3, #0
 800d354:	d103      	bne.n	800d35e <PrepareFrame+0x42>
    {
        fBufferSize = 0;
 800d356:	2330      	movs	r3, #48	; 0x30
 800d358:	18fb      	adds	r3, r7, r3
 800d35a:	2200      	movs	r2, #0
 800d35c:	801a      	strh	r2, [r3, #0]
    }

    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 800d35e:	2430      	movs	r4, #48	; 0x30
 800d360:	193b      	adds	r3, r7, r4
 800d362:	881a      	ldrh	r2, [r3, #0]
 800d364:	6839      	ldr	r1, [r7, #0]
 800d366:	4b94      	ldr	r3, [pc, #592]	; (800d5b8 <PrepareFrame+0x29c>)
 800d368:	0018      	movs	r0, r3
 800d36a:	f008 f9b9 	bl	80156e0 <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 800d36e:	193b      	adds	r3, r7, r4
 800d370:	881b      	ldrh	r3, [r3, #0]
 800d372:	b2d9      	uxtb	r1, r3
 800d374:	4b8e      	ldr	r3, [pc, #568]	; (800d5b0 <PrepareFrame+0x294>)
 800d376:	4a91      	ldr	r2, [pc, #580]	; (800d5bc <PrepareFrame+0x2a0>)
 800d378:	5499      	strb	r1, [r3, r2]
    MacCtx.PktBuffer[0] = macHdr->Value;
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	781a      	ldrb	r2, [r3, #0]
 800d37e:	4b8c      	ldr	r3, [pc, #560]	; (800d5b0 <PrepareFrame+0x294>)
 800d380:	729a      	strb	r2, [r3, #10]

    switch( macHdr->Bits.MType )
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	781b      	ldrb	r3, [r3, #0]
 800d386:	061b      	lsls	r3, r3, #24
 800d388:	0f5b      	lsrs	r3, r3, #29
 800d38a:	b2db      	uxtb	r3, r3
 800d38c:	2b04      	cmp	r3, #4
 800d38e:	d005      	beq.n	800d39c <PrepareFrame+0x80>
 800d390:	2b07      	cmp	r3, #7
 800d392:	d100      	bne.n	800d396 <PrepareFrame+0x7a>
 800d394:	e0e7      	b.n	800d566 <PrepareFrame+0x24a>
 800d396:	2b02      	cmp	r3, #2
 800d398:	d007      	beq.n	800d3aa <PrepareFrame+0x8e>
 800d39a:	e0fe      	b.n	800d59a <PrepareFrame+0x27e>
    {
        case FRAME_TYPE_DATA_CONFIRMED_UP:
            MacCtx.NvmCtx->NodeAckRequested = true;
 800d39c:	4a84      	ldr	r2, [pc, #528]	; (800d5b0 <PrepareFrame+0x294>)
 800d39e:	238e      	movs	r3, #142	; 0x8e
 800d3a0:	00db      	lsls	r3, r3, #3
 800d3a2:	58d3      	ldr	r3, [r2, r3]
 800d3a4:	4a83      	ldr	r2, [pc, #524]	; (800d5b4 <PrepareFrame+0x298>)
 800d3a6:	2101      	movs	r1, #1
 800d3a8:	5499      	strb	r1, [r3, r2]
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 800d3aa:	4a81      	ldr	r2, [pc, #516]	; (800d5b0 <PrepareFrame+0x294>)
 800d3ac:	2386      	movs	r3, #134	; 0x86
 800d3ae:	005b      	lsls	r3, r3, #1
 800d3b0:	2104      	movs	r1, #4
 800d3b2:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 800d3b4:	4a7e      	ldr	r2, [pc, #504]	; (800d5b0 <PrepareFrame+0x294>)
 800d3b6:	2388      	movs	r3, #136	; 0x88
 800d3b8:	005b      	lsls	r3, r3, #1
 800d3ba:	4981      	ldr	r1, [pc, #516]	; (800d5c0 <PrepareFrame+0x2a4>)
 800d3bc:	50d1      	str	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800d3be:	4a7c      	ldr	r2, [pc, #496]	; (800d5b0 <PrepareFrame+0x294>)
 800d3c0:	238a      	movs	r3, #138	; 0x8a
 800d3c2:	005b      	lsls	r3, r3, #1
 800d3c4:	21ff      	movs	r1, #255	; 0xff
 800d3c6:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	7819      	ldrb	r1, [r3, #0]
 800d3cc:	4a78      	ldr	r2, [pc, #480]	; (800d5b0 <PrepareFrame+0x294>)
 800d3ce:	2316      	movs	r3, #22
 800d3d0:	33ff      	adds	r3, #255	; 0xff
 800d3d2:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 800d3d4:	4a76      	ldr	r2, [pc, #472]	; (800d5b0 <PrepareFrame+0x294>)
 800d3d6:	1df9      	adds	r1, r7, #7
 800d3d8:	2398      	movs	r3, #152	; 0x98
 800d3da:	005b      	lsls	r3, r3, #1
 800d3dc:	7809      	ldrb	r1, [r1, #0]
 800d3de:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = MacCtx.NvmCtx->DevAddr;
 800d3e0:	4a73      	ldr	r2, [pc, #460]	; (800d5b0 <PrepareFrame+0x294>)
 800d3e2:	238e      	movs	r3, #142	; 0x8e
 800d3e4:	00db      	lsls	r3, r3, #3
 800d3e6:	58d3      	ldr	r3, [r2, r3]
 800d3e8:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800d3ea:	4a71      	ldr	r2, [pc, #452]	; (800d5b0 <PrepareFrame+0x294>)
 800d3ec:	238c      	movs	r3, #140	; 0x8c
 800d3ee:	005b      	lsls	r3, r3, #1
 800d3f0:	50d1      	str	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800d3f2:	68bb      	ldr	r3, [r7, #8]
 800d3f4:	7819      	ldrb	r1, [r3, #0]
 800d3f6:	4a6e      	ldr	r2, [pc, #440]	; (800d5b0 <PrepareFrame+0x294>)
 800d3f8:	238e      	movs	r3, #142	; 0x8e
 800d3fa:	005b      	lsls	r3, r3, #1
 800d3fc:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 800d3fe:	4b6c      	ldr	r3, [pc, #432]	; (800d5b0 <PrepareFrame+0x294>)
 800d400:	4a6e      	ldr	r2, [pc, #440]	; (800d5bc <PrepareFrame+0x2a0>)
 800d402:	5c99      	ldrb	r1, [r3, r2]
 800d404:	4a6a      	ldr	r2, [pc, #424]	; (800d5b0 <PrepareFrame+0x294>)
 800d406:	239c      	movs	r3, #156	; 0x9c
 800d408:	005b      	lsls	r3, r3, #1
 800d40a:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 800d40c:	4a68      	ldr	r2, [pc, #416]	; (800d5b0 <PrepareFrame+0x294>)
 800d40e:	239a      	movs	r3, #154	; 0x9a
 800d410:	005b      	lsls	r3, r3, #1
 800d412:	4969      	ldr	r1, [pc, #420]	; (800d5b8 <PrepareFrame+0x29c>)
 800d414:	50d1      	str	r1, [r2, r3]

            if( LORAMAC_FCNT_HANDLER_SUCCESS != LoRaMacGetFCntUp( &fCntUp ) )
 800d416:	2318      	movs	r3, #24
 800d418:	18fb      	adds	r3, r7, r3
 800d41a:	0018      	movs	r0, r3
 800d41c:	f004 ff5c 	bl	80122d8 <LoRaMacGetFCntUp>
 800d420:	1e03      	subs	r3, r0, #0
 800d422:	d001      	beq.n	800d428 <PrepareFrame+0x10c>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800d424:	2312      	movs	r3, #18
 800d426:	e0be      	b.n	800d5a6 <PrepareFrame+0x28a>
            }
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t ) fCntUp;
 800d428:	69bb      	ldr	r3, [r7, #24]
 800d42a:	b299      	uxth	r1, r3
 800d42c:	4a60      	ldr	r2, [pc, #384]	; (800d5b0 <PrepareFrame+0x294>)
 800d42e:	238f      	movs	r3, #143	; 0x8f
 800d430:	005b      	lsls	r3, r3, #1
 800d432:	52d1      	strh	r1, [r2, r3]

            // Reset confirm parameters
            MacCtx.McpsConfirm.NbRetries = 0;
 800d434:	4b5e      	ldr	r3, [pc, #376]	; (800d5b0 <PrepareFrame+0x294>)
 800d436:	4a63      	ldr	r2, [pc, #396]	; (800d5c4 <PrepareFrame+0x2a8>)
 800d438:	2100      	movs	r1, #0
 800d43a:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsConfirm.AckReceived = false;
 800d43c:	4a5c      	ldr	r2, [pc, #368]	; (800d5b0 <PrepareFrame+0x294>)
 800d43e:	2386      	movs	r3, #134	; 0x86
 800d440:	00db      	lsls	r3, r3, #3
 800d442:	2100      	movs	r1, #0
 800d444:	54d1      	strb	r1, [r2, r3]
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 800d446:	69b9      	ldr	r1, [r7, #24]
 800d448:	4a59      	ldr	r2, [pc, #356]	; (800d5b0 <PrepareFrame+0x294>)
 800d44a:	2387      	movs	r3, #135	; 0x87
 800d44c:	00db      	lsls	r3, r3, #3
 800d44e:	50d1      	str	r1, [r2, r3]

            // Handle the MAC commands if there are any available
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800d450:	2314      	movs	r3, #20
 800d452:	18fb      	adds	r3, r7, r3
 800d454:	0018      	movs	r0, r3
 800d456:	f002 fec1 	bl	80101dc <LoRaMacCommandsGetSizeSerializedCmds>
 800d45a:	1e03      	subs	r3, r0, #0
 800d45c:	d001      	beq.n	800d462 <PrepareFrame+0x146>
            {
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800d45e:	2313      	movs	r3, #19
 800d460:	e0a1      	b.n	800d5a6 <PrepareFrame+0x28a>
            }

            if( macCmdsSize > 0 )
 800d462:	697b      	ldr	r3, [r7, #20]
 800d464:	2b00      	cmp	r3, #0
 800d466:	d100      	bne.n	800d46a <PrepareFrame+0x14e>
 800d468:	e099      	b.n	800d59e <PrepareFrame+0x282>
            {
                availableSize = GetMaxAppPayloadWithoutFOptsLength( MacCtx.NvmCtx->MacParams.ChannelsDatarate );
 800d46a:	4a51      	ldr	r2, [pc, #324]	; (800d5b0 <PrepareFrame+0x294>)
 800d46c:	238e      	movs	r3, #142	; 0x8e
 800d46e:	00db      	lsls	r3, r3, #3
 800d470:	58d3      	ldr	r3, [r2, r3]
 800d472:	22d5      	movs	r2, #213	; 0xd5
 800d474:	569b      	ldrsb	r3, [r3, r2]
 800d476:	221f      	movs	r2, #31
 800d478:	18bc      	adds	r4, r7, r2
 800d47a:	0018      	movs	r0, r3
 800d47c:	f7fe fbf4 	bl	800bc68 <GetMaxAppPayloadWithoutFOptsLength>
 800d480:	0003      	movs	r3, r0
 800d482:	7023      	strb	r3, [r4, #0]

                // There is application payload available and the MAC commands fit into FOpts field.
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 800d484:	4b4a      	ldr	r3, [pc, #296]	; (800d5b0 <PrepareFrame+0x294>)
 800d486:	4a4d      	ldr	r2, [pc, #308]	; (800d5bc <PrepareFrame+0x2a0>)
 800d488:	5c9b      	ldrb	r3, [r3, r2]
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d024      	beq.n	800d4d8 <PrepareFrame+0x1bc>
 800d48e:	697b      	ldr	r3, [r7, #20]
 800d490:	2b0f      	cmp	r3, #15
 800d492:	d821      	bhi.n	800d4d8 <PrepareFrame+0x1bc>
                {
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 800d494:	4a4c      	ldr	r2, [pc, #304]	; (800d5c8 <PrepareFrame+0x2ac>)
 800d496:	2314      	movs	r3, #20
 800d498:	18fb      	adds	r3, r7, r3
 800d49a:	0019      	movs	r1, r3
 800d49c:	200f      	movs	r0, #15
 800d49e:	f002 feb3 	bl	8010208 <LoRaMacCommandsSerializeCmds>
 800d4a2:	1e03      	subs	r3, r0, #0
 800d4a4:	d001      	beq.n	800d4aa <PrepareFrame+0x18e>
                    {
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800d4a6:	2313      	movs	r3, #19
 800d4a8:	e07d      	b.n	800d5a6 <PrepareFrame+0x28a>
                    }
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 800d4aa:	697b      	ldr	r3, [r7, #20]
 800d4ac:	1c1a      	adds	r2, r3, #0
 800d4ae:	230f      	movs	r3, #15
 800d4b0:	4013      	ands	r3, r2
 800d4b2:	b2da      	uxtb	r2, r3
 800d4b4:	68bb      	ldr	r3, [r7, #8]
 800d4b6:	210f      	movs	r1, #15
 800d4b8:	400a      	ands	r2, r1
 800d4ba:	0010      	movs	r0, r2
 800d4bc:	781a      	ldrb	r2, [r3, #0]
 800d4be:	210f      	movs	r1, #15
 800d4c0:	438a      	bics	r2, r1
 800d4c2:	1c11      	adds	r1, r2, #0
 800d4c4:	1c02      	adds	r2, r0, #0
 800d4c6:	430a      	orrs	r2, r1
 800d4c8:	701a      	strb	r2, [r3, #0]
                    // Update FCtrl field with new value of FOptionsLength
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800d4ca:	68bb      	ldr	r3, [r7, #8]
 800d4cc:	7819      	ldrb	r1, [r3, #0]
 800d4ce:	4a38      	ldr	r2, [pc, #224]	; (800d5b0 <PrepareFrame+0x294>)
 800d4d0:	238e      	movs	r3, #142	; 0x8e
 800d4d2:	005b      	lsls	r3, r3, #1
 800d4d4:	54d1      	strb	r1, [r2, r3]
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.NvmCtx->MacCommandsBuffer;
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
                }
            }

            break;
 800d4d6:	e062      	b.n	800d59e <PrepareFrame+0x282>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 800d4d8:	4b35      	ldr	r3, [pc, #212]	; (800d5b0 <PrepareFrame+0x294>)
 800d4da:	4a38      	ldr	r2, [pc, #224]	; (800d5bc <PrepareFrame+0x2a0>)
 800d4dc:	5c9b      	ldrb	r3, [r3, r2]
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d017      	beq.n	800d512 <PrepareFrame+0x1f6>
 800d4e2:	697b      	ldr	r3, [r7, #20]
 800d4e4:	2b0f      	cmp	r3, #15
 800d4e6:	d914      	bls.n	800d512 <PrepareFrame+0x1f6>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.NvmCtx->MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800d4e8:	231f      	movs	r3, #31
 800d4ea:	18fb      	adds	r3, r7, r3
 800d4ec:	7818      	ldrb	r0, [r3, #0]
 800d4ee:	4a30      	ldr	r2, [pc, #192]	; (800d5b0 <PrepareFrame+0x294>)
 800d4f0:	238e      	movs	r3, #142	; 0x8e
 800d4f2:	00db      	lsls	r3, r3, #3
 800d4f4:	58d3      	ldr	r3, [r2, r3]
 800d4f6:	3317      	adds	r3, #23
 800d4f8:	33ff      	adds	r3, #255	; 0xff
 800d4fa:	001a      	movs	r2, r3
 800d4fc:	2314      	movs	r3, #20
 800d4fe:	18fb      	adds	r3, r7, r3
 800d500:	0019      	movs	r1, r3
 800d502:	f002 fe81 	bl	8010208 <LoRaMacCommandsSerializeCmds>
 800d506:	1e03      	subs	r3, r0, #0
 800d508:	d001      	beq.n	800d50e <PrepareFrame+0x1f2>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800d50a:	2313      	movs	r3, #19
 800d50c:	e04b      	b.n	800d5a6 <PrepareFrame+0x28a>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 800d50e:	230a      	movs	r3, #10
 800d510:	e049      	b.n	800d5a6 <PrepareFrame+0x28a>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.NvmCtx->MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800d512:	231f      	movs	r3, #31
 800d514:	18fb      	adds	r3, r7, r3
 800d516:	7818      	ldrb	r0, [r3, #0]
 800d518:	4a25      	ldr	r2, [pc, #148]	; (800d5b0 <PrepareFrame+0x294>)
 800d51a:	238e      	movs	r3, #142	; 0x8e
 800d51c:	00db      	lsls	r3, r3, #3
 800d51e:	58d3      	ldr	r3, [r2, r3]
 800d520:	3317      	adds	r3, #23
 800d522:	33ff      	adds	r3, #255	; 0xff
 800d524:	001a      	movs	r2, r3
 800d526:	2314      	movs	r3, #20
 800d528:	18fb      	adds	r3, r7, r3
 800d52a:	0019      	movs	r1, r3
 800d52c:	f002 fe6c 	bl	8010208 <LoRaMacCommandsSerializeCmds>
 800d530:	1e03      	subs	r3, r0, #0
 800d532:	d001      	beq.n	800d538 <PrepareFrame+0x21c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800d534:	2313      	movs	r3, #19
 800d536:	e036      	b.n	800d5a6 <PrepareFrame+0x28a>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 800d538:	4a1d      	ldr	r2, [pc, #116]	; (800d5b0 <PrepareFrame+0x294>)
 800d53a:	2398      	movs	r3, #152	; 0x98
 800d53c:	005b      	lsls	r3, r3, #1
 800d53e:	2100      	movs	r1, #0
 800d540:	54d1      	strb	r1, [r2, r3]
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.NvmCtx->MacCommandsBuffer;
 800d542:	4a1b      	ldr	r2, [pc, #108]	; (800d5b0 <PrepareFrame+0x294>)
 800d544:	238e      	movs	r3, #142	; 0x8e
 800d546:	00db      	lsls	r3, r3, #3
 800d548:	58d3      	ldr	r3, [r2, r3]
 800d54a:	3317      	adds	r3, #23
 800d54c:	33ff      	adds	r3, #255	; 0xff
 800d54e:	0019      	movs	r1, r3
 800d550:	4a17      	ldr	r2, [pc, #92]	; (800d5b0 <PrepareFrame+0x294>)
 800d552:	239a      	movs	r3, #154	; 0x9a
 800d554:	005b      	lsls	r3, r3, #1
 800d556:	50d1      	str	r1, [r2, r3]
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 800d558:	697b      	ldr	r3, [r7, #20]
 800d55a:	b2d9      	uxtb	r1, r3
 800d55c:	4a14      	ldr	r2, [pc, #80]	; (800d5b0 <PrepareFrame+0x294>)
 800d55e:	239c      	movs	r3, #156	; 0x9c
 800d560:	005b      	lsls	r3, r3, #1
 800d562:	54d1      	strb	r1, [r2, r3]
            break;
 800d564:	e01b      	b.n	800d59e <PrepareFrame+0x282>
        case FRAME_TYPE_PROPRIETARY:
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 800d566:	683b      	ldr	r3, [r7, #0]
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d01a      	beq.n	800d5a2 <PrepareFrame+0x286>
 800d56c:	4b10      	ldr	r3, [pc, #64]	; (800d5b0 <PrepareFrame+0x294>)
 800d56e:	4a13      	ldr	r2, [pc, #76]	; (800d5bc <PrepareFrame+0x2a0>)
 800d570:	5c9b      	ldrb	r3, [r3, r2]
 800d572:	2b00      	cmp	r3, #0
 800d574:	d015      	beq.n	800d5a2 <PrepareFrame+0x286>
            {
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 800d576:	4815      	ldr	r0, [pc, #84]	; (800d5cc <PrepareFrame+0x2b0>)
 800d578:	4b0d      	ldr	r3, [pc, #52]	; (800d5b0 <PrepareFrame+0x294>)
 800d57a:	4a10      	ldr	r2, [pc, #64]	; (800d5bc <PrepareFrame+0x2a0>)
 800d57c:	5c9b      	ldrb	r3, [r3, r2]
 800d57e:	b29a      	uxth	r2, r3
 800d580:	683b      	ldr	r3, [r7, #0]
 800d582:	0019      	movs	r1, r3
 800d584:	f008 f8ac 	bl	80156e0 <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 800d588:	4b09      	ldr	r3, [pc, #36]	; (800d5b0 <PrepareFrame+0x294>)
 800d58a:	4a0c      	ldr	r2, [pc, #48]	; (800d5bc <PrepareFrame+0x2a0>)
 800d58c:	5c9b      	ldrb	r3, [r3, r2]
 800d58e:	b29b      	uxth	r3, r3
 800d590:	3301      	adds	r3, #1
 800d592:	b29a      	uxth	r2, r3
 800d594:	4b06      	ldr	r3, [pc, #24]	; (800d5b0 <PrepareFrame+0x294>)
 800d596:	811a      	strh	r2, [r3, #8]
            }
            break;
 800d598:	e003      	b.n	800d5a2 <PrepareFrame+0x286>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 800d59a:	2302      	movs	r3, #2
 800d59c:	e003      	b.n	800d5a6 <PrepareFrame+0x28a>
            break;
 800d59e:	46c0      	nop			; (mov r8, r8)
 800d5a0:	e000      	b.n	800d5a4 <PrepareFrame+0x288>
            break;
 800d5a2:	46c0      	nop			; (mov r8, r8)
    }

    return LORAMAC_STATUS_OK;
 800d5a4:	2300      	movs	r3, #0
}
 800d5a6:	0018      	movs	r0, r3
 800d5a8:	46bd      	mov	sp, r7
 800d5aa:	b009      	add	sp, #36	; 0x24
 800d5ac:	bd90      	pop	{r4, r7, pc}
 800d5ae:	46c0      	nop			; (mov r8, r8)
 800d5b0:	2000070c 	.word	0x2000070c
 800d5b4:	00000219 	.word	0x00000219
 800d5b8:	2000084c 	.word	0x2000084c
 800d5bc:	0000023f 	.word	0x0000023f
 800d5c0:	20000716 	.word	0x20000716
 800d5c4:	00000431 	.word	0x00000431
 800d5c8:	2000082c 	.word	0x2000082c
 800d5cc:	20000717 	.word	0x20000717

0800d5d0 <SendFrameOnChannel>:

LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 800d5d0:	b590      	push	{r4, r7, lr}
 800d5d2:	b089      	sub	sp, #36	; 0x24
 800d5d4:	af00      	add	r7, sp, #0
 800d5d6:	0002      	movs	r2, r0
 800d5d8:	1dfb      	adds	r3, r7, #7
 800d5da:	701a      	strb	r2, [r3, #0]
    TxConfigParams_t txConfig;
    int8_t txPower = 0;
 800d5dc:	230b      	movs	r3, #11
 800d5de:	18fb      	adds	r3, r7, r3
 800d5e0:	2200      	movs	r2, #0
 800d5e2:	701a      	strb	r2, [r3, #0]

    txConfig.Channel = channel;
 800d5e4:	210c      	movs	r1, #12
 800d5e6:	187b      	adds	r3, r7, r1
 800d5e8:	1dfa      	adds	r2, r7, #7
 800d5ea:	7812      	ldrb	r2, [r2, #0]
 800d5ec:	701a      	strb	r2, [r3, #0]
    txConfig.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800d5ee:	4a4f      	ldr	r2, [pc, #316]	; (800d72c <SendFrameOnChannel+0x15c>)
 800d5f0:	238e      	movs	r3, #142	; 0x8e
 800d5f2:	00db      	lsls	r3, r3, #3
 800d5f4:	58d3      	ldr	r3, [r2, r3]
 800d5f6:	22d5      	movs	r2, #213	; 0xd5
 800d5f8:	569a      	ldrsb	r2, [r3, r2]
 800d5fa:	187b      	adds	r3, r7, r1
 800d5fc:	705a      	strb	r2, [r3, #1]
    txConfig.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 800d5fe:	4a4b      	ldr	r2, [pc, #300]	; (800d72c <SendFrameOnChannel+0x15c>)
 800d600:	238e      	movs	r3, #142	; 0x8e
 800d602:	00db      	lsls	r3, r3, #3
 800d604:	58d3      	ldr	r3, [r2, r3]
 800d606:	22d4      	movs	r2, #212	; 0xd4
 800d608:	569a      	ldrsb	r2, [r3, r2]
 800d60a:	187b      	adds	r3, r7, r1
 800d60c:	709a      	strb	r2, [r3, #2]
    txConfig.MaxEirp = MacCtx.NvmCtx->MacParams.MaxEirp;
 800d60e:	4a47      	ldr	r2, [pc, #284]	; (800d72c <SendFrameOnChannel+0x15c>)
 800d610:	238e      	movs	r3, #142	; 0x8e
 800d612:	00db      	lsls	r3, r3, #3
 800d614:	58d2      	ldr	r2, [r2, r3]
 800d616:	2382      	movs	r3, #130	; 0x82
 800d618:	005b      	lsls	r3, r3, #1
 800d61a:	58d2      	ldr	r2, [r2, r3]
 800d61c:	187b      	adds	r3, r7, r1
 800d61e:	605a      	str	r2, [r3, #4]
    txConfig.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 800d620:	4a42      	ldr	r2, [pc, #264]	; (800d72c <SendFrameOnChannel+0x15c>)
 800d622:	238e      	movs	r3, #142	; 0x8e
 800d624:	00db      	lsls	r3, r3, #3
 800d626:	58d2      	ldr	r2, [r2, r3]
 800d628:	2384      	movs	r3, #132	; 0x84
 800d62a:	005b      	lsls	r3, r3, #1
 800d62c:	58d2      	ldr	r2, [r2, r3]
 800d62e:	187b      	adds	r3, r7, r1
 800d630:	609a      	str	r2, [r3, #8]
    txConfig.PktLen = MacCtx.PktBufferLen;
 800d632:	4b3e      	ldr	r3, [pc, #248]	; (800d72c <SendFrameOnChannel+0x15c>)
 800d634:	891a      	ldrh	r2, [r3, #8]
 800d636:	187b      	adds	r3, r7, r1
 800d638:	819a      	strh	r2, [r3, #12]


    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800d63a:	f002 faf4 	bl	800fc26 <LoRaMacClassBIsBeaconExpected>
 800d63e:	1e03      	subs	r3, r0, #0
 800d640:	d001      	beq.n	800d646 <SendFrameOnChannel+0x76>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 800d642:	230e      	movs	r3, #14
 800d644:	e06d      	b.n	800d722 <SendFrameOnChannel+0x152>
    }

    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 800d646:	4a39      	ldr	r2, [pc, #228]	; (800d72c <SendFrameOnChannel+0x15c>)
 800d648:	238e      	movs	r3, #142	; 0x8e
 800d64a:	00db      	lsls	r3, r3, #3
 800d64c:	58d3      	ldr	r3, [r2, r3]
 800d64e:	22c8      	movs	r2, #200	; 0xc8
 800d650:	5c9b      	ldrb	r3, [r3, r2]
 800d652:	2b01      	cmp	r3, #1
 800d654:	d10d      	bne.n	800d672 <SendFrameOnChannel+0xa2>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800d656:	f002 faec 	bl	800fc32 <LoRaMacClassBIsPingExpected>
 800d65a:	1e03      	subs	r3, r0, #0
 800d65c:	d001      	beq.n	800d662 <SendFrameOnChannel+0x92>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800d65e:	230f      	movs	r3, #15
 800d660:	e05f      	b.n	800d722 <SendFrameOnChannel+0x152>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800d662:	f002 faec 	bl	800fc3e <LoRaMacClassBIsMulticastExpected>
 800d666:	1e03      	subs	r3, r0, #0
 800d668:	d001      	beq.n	800d66e <SendFrameOnChannel+0x9e>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800d66a:	230f      	movs	r3, #15
 800d66c:	e059      	b.n	800d722 <SendFrameOnChannel+0x152>
        }
        else
        {
            LoRaMacClassBStopRxSlots( );
 800d66e:	f002 fb59 	bl	800fd24 <LoRaMacClassBStopRxSlots>
        }
    }
    RegionTxConfig( MacCtx.NvmCtx->Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 800d672:	4a2e      	ldr	r2, [pc, #184]	; (800d72c <SendFrameOnChannel+0x15c>)
 800d674:	238e      	movs	r3, #142	; 0x8e
 800d676:	00db      	lsls	r3, r3, #3
 800d678:	58d3      	ldr	r3, [r2, r3]
 800d67a:	7818      	ldrb	r0, [r3, #0]
 800d67c:	4b2c      	ldr	r3, [pc, #176]	; (800d730 <SendFrameOnChannel+0x160>)
 800d67e:	240b      	movs	r4, #11
 800d680:	193a      	adds	r2, r7, r4
 800d682:	210c      	movs	r1, #12
 800d684:	1879      	adds	r1, r7, r1
 800d686:	f005 fb5b 	bl	8012d40 <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800d68a:	4b28      	ldr	r3, [pc, #160]	; (800d72c <SendFrameOnChannel+0x15c>)
 800d68c:	4a29      	ldr	r2, [pc, #164]	; (800d734 <SendFrameOnChannel+0x164>)
 800d68e:	2101      	movs	r1, #1
 800d690:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsConfirm.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800d692:	4a26      	ldr	r2, [pc, #152]	; (800d72c <SendFrameOnChannel+0x15c>)
 800d694:	238e      	movs	r3, #142	; 0x8e
 800d696:	00db      	lsls	r3, r3, #3
 800d698:	58d3      	ldr	r3, [r2, r3]
 800d69a:	22d5      	movs	r2, #213	; 0xd5
 800d69c:	569b      	ldrsb	r3, [r3, r2]
 800d69e:	b2d9      	uxtb	r1, r3
 800d6a0:	4b22      	ldr	r3, [pc, #136]	; (800d72c <SendFrameOnChannel+0x15c>)
 800d6a2:	4a25      	ldr	r2, [pc, #148]	; (800d738 <SendFrameOnChannel+0x168>)
 800d6a4:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsConfirm.TxPower = txPower;
 800d6a6:	193b      	adds	r3, r7, r4
 800d6a8:	2100      	movs	r1, #0
 800d6aa:	5659      	ldrsb	r1, [r3, r1]
 800d6ac:	4b1f      	ldr	r3, [pc, #124]	; (800d72c <SendFrameOnChannel+0x15c>)
 800d6ae:	4a23      	ldr	r2, [pc, #140]	; (800d73c <SendFrameOnChannel+0x16c>)
 800d6b0:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsConfirm.Channel = channel;
 800d6b2:	1dfb      	adds	r3, r7, #7
 800d6b4:	781a      	ldrb	r2, [r3, #0]
 800d6b6:	4b1d      	ldr	r3, [pc, #116]	; (800d72c <SendFrameOnChannel+0x15c>)
 800d6b8:	4921      	ldr	r1, [pc, #132]	; (800d740 <SendFrameOnChannel+0x170>)
 800d6ba:	505a      	str	r2, [r3, r1]

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800d6bc:	4b1b      	ldr	r3, [pc, #108]	; (800d72c <SendFrameOnChannel+0x15c>)
 800d6be:	4a21      	ldr	r2, [pc, #132]	; (800d744 <SendFrameOnChannel+0x174>)
 800d6c0:	589a      	ldr	r2, [r3, r2]
 800d6c2:	4b1a      	ldr	r3, [pc, #104]	; (800d72c <SendFrameOnChannel+0x15c>)
 800d6c4:	4920      	ldr	r1, [pc, #128]	; (800d748 <SendFrameOnChannel+0x178>)
 800d6c6:	505a      	str	r2, [r3, r1]
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800d6c8:	4b18      	ldr	r3, [pc, #96]	; (800d72c <SendFrameOnChannel+0x15c>)
 800d6ca:	4a1e      	ldr	r2, [pc, #120]	; (800d744 <SendFrameOnChannel+0x174>)
 800d6cc:	589a      	ldr	r2, [r3, r2]
 800d6ce:	4b17      	ldr	r3, [pc, #92]	; (800d72c <SendFrameOnChannel+0x15c>)
 800d6d0:	491e      	ldr	r1, [pc, #120]	; (800d74c <SendFrameOnChannel+0x17c>)
 800d6d2:	505a      	str	r2, [r3, r1]

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 800d6d4:	f002 fab9 	bl	800fc4a <LoRaMacClassBIsBeaconModeActive>
 800d6d8:	1e03      	subs	r3, r0, #0
 800d6da:	d00c      	beq.n	800d6f6 <SendFrameOnChannel+0x126>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 800d6dc:	4b13      	ldr	r3, [pc, #76]	; (800d72c <SendFrameOnChannel+0x15c>)
 800d6de:	4a19      	ldr	r2, [pc, #100]	; (800d744 <SendFrameOnChannel+0x174>)
 800d6e0:	589b      	ldr	r3, [r3, r2]
 800d6e2:	0018      	movs	r0, r3
 800d6e4:	f002 fb15 	bl	800fd12 <LoRaMacClassBIsUplinkCollision>
 800d6e8:	0003      	movs	r3, r0
 800d6ea:	61fb      	str	r3, [r7, #28]

        if( collisionTime > 0 )
 800d6ec:	69fb      	ldr	r3, [r7, #28]
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d001      	beq.n	800d6f6 <SendFrameOnChannel+0x126>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 800d6f2:	2310      	movs	r3, #16
 800d6f4:	e015      	b.n	800d722 <SendFrameOnChannel+0x152>
        }
    }

    LoRaMacClassBHaltBeaconing( );
 800d6f6:	f002 fab8 	bl	800fc6a <LoRaMacClassBHaltBeaconing>

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800d6fa:	4a0c      	ldr	r2, [pc, #48]	; (800d72c <SendFrameOnChannel+0x15c>)
 800d6fc:	23d5      	movs	r3, #213	; 0xd5
 800d6fe:	009b      	lsls	r3, r3, #2
 800d700:	58d3      	ldr	r3, [r2, r3]
 800d702:	2202      	movs	r2, #2
 800d704:	431a      	orrs	r2, r3
 800d706:	0011      	movs	r1, r2
 800d708:	4a08      	ldr	r2, [pc, #32]	; (800d72c <SendFrameOnChannel+0x15c>)
 800d70a:	23d5      	movs	r3, #213	; 0xd5
 800d70c:	009b      	lsls	r3, r3, #2
 800d70e:	50d1      	str	r1, [r2, r3]

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 800d710:	4b0f      	ldr	r3, [pc, #60]	; (800d750 <SendFrameOnChannel+0x180>)
 800d712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d714:	4a05      	ldr	r2, [pc, #20]	; (800d72c <SendFrameOnChannel+0x15c>)
 800d716:	8912      	ldrh	r2, [r2, #8]
 800d718:	b2d1      	uxtb	r1, r2
 800d71a:	4a0e      	ldr	r2, [pc, #56]	; (800d754 <SendFrameOnChannel+0x184>)
 800d71c:	0010      	movs	r0, r2
 800d71e:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 800d720:	2300      	movs	r3, #0
}
 800d722:	0018      	movs	r0, r3
 800d724:	46bd      	mov	sp, r7
 800d726:	b009      	add	sp, #36	; 0x24
 800d728:	bd90      	pop	{r4, r7, pc}
 800d72a:	46c0      	nop			; (mov r8, r8)
 800d72c:	2000070c 	.word	0x2000070c
 800d730:	20000b18 	.word	0x20000b18
 800d734:	0000042d 	.word	0x0000042d
 800d738:	0000042e 	.word	0x0000042e
 800d73c:	0000042f 	.word	0x0000042f
 800d740:	0000043c 	.word	0x0000043c
 800d744:	0000040c 	.word	0x0000040c
 800d748:	00000434 	.word	0x00000434
 800d74c:	00000444 	.word	0x00000444
 800d750:	08020c58 	.word	0x08020c58
 800d754:	20000716 	.word	0x20000716

0800d758 <SetTxContinuousWave>:

LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout )
{
 800d758:	b580      	push	{r7, lr}
 800d75a:	b086      	sub	sp, #24
 800d75c:	af00      	add	r7, sp, #0
 800d75e:	0002      	movs	r2, r0
 800d760:	1dbb      	adds	r3, r7, #6
 800d762:	801a      	strh	r2, [r3, #0]
    ContinuousWaveParams_t continuousWave;

    continuousWave.Channel = MacCtx.NvmCtx->Channel;
 800d764:	4a24      	ldr	r2, [pc, #144]	; (800d7f8 <SetTxContinuousWave+0xa0>)
 800d766:	238e      	movs	r3, #142	; 0x8e
 800d768:	00db      	lsls	r3, r3, #3
 800d76a:	58d2      	ldr	r2, [r2, r3]
 800d76c:	2314      	movs	r3, #20
 800d76e:	33ff      	adds	r3, #255	; 0xff
 800d770:	5cd2      	ldrb	r2, [r2, r3]
 800d772:	2108      	movs	r1, #8
 800d774:	187b      	adds	r3, r7, r1
 800d776:	701a      	strb	r2, [r3, #0]
    continuousWave.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800d778:	4a1f      	ldr	r2, [pc, #124]	; (800d7f8 <SetTxContinuousWave+0xa0>)
 800d77a:	238e      	movs	r3, #142	; 0x8e
 800d77c:	00db      	lsls	r3, r3, #3
 800d77e:	58d3      	ldr	r3, [r2, r3]
 800d780:	22d5      	movs	r2, #213	; 0xd5
 800d782:	569a      	ldrsb	r2, [r3, r2]
 800d784:	187b      	adds	r3, r7, r1
 800d786:	705a      	strb	r2, [r3, #1]
    continuousWave.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 800d788:	4a1b      	ldr	r2, [pc, #108]	; (800d7f8 <SetTxContinuousWave+0xa0>)
 800d78a:	238e      	movs	r3, #142	; 0x8e
 800d78c:	00db      	lsls	r3, r3, #3
 800d78e:	58d3      	ldr	r3, [r2, r3]
 800d790:	22d4      	movs	r2, #212	; 0xd4
 800d792:	569a      	ldrsb	r2, [r3, r2]
 800d794:	187b      	adds	r3, r7, r1
 800d796:	709a      	strb	r2, [r3, #2]
    continuousWave.MaxEirp = MacCtx.NvmCtx->MacParams.MaxEirp;
 800d798:	4a17      	ldr	r2, [pc, #92]	; (800d7f8 <SetTxContinuousWave+0xa0>)
 800d79a:	238e      	movs	r3, #142	; 0x8e
 800d79c:	00db      	lsls	r3, r3, #3
 800d79e:	58d2      	ldr	r2, [r2, r3]
 800d7a0:	2382      	movs	r3, #130	; 0x82
 800d7a2:	005b      	lsls	r3, r3, #1
 800d7a4:	58d2      	ldr	r2, [r2, r3]
 800d7a6:	187b      	adds	r3, r7, r1
 800d7a8:	605a      	str	r2, [r3, #4]
    continuousWave.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 800d7aa:	4a13      	ldr	r2, [pc, #76]	; (800d7f8 <SetTxContinuousWave+0xa0>)
 800d7ac:	238e      	movs	r3, #142	; 0x8e
 800d7ae:	00db      	lsls	r3, r3, #3
 800d7b0:	58d2      	ldr	r2, [r2, r3]
 800d7b2:	2384      	movs	r3, #132	; 0x84
 800d7b4:	005b      	lsls	r3, r3, #1
 800d7b6:	58d2      	ldr	r2, [r2, r3]
 800d7b8:	187b      	adds	r3, r7, r1
 800d7ba:	609a      	str	r2, [r3, #8]
    continuousWave.Timeout = timeout;
 800d7bc:	187b      	adds	r3, r7, r1
 800d7be:	1dba      	adds	r2, r7, #6
 800d7c0:	8812      	ldrh	r2, [r2, #0]
 800d7c2:	819a      	strh	r2, [r3, #12]

    RegionSetContinuousWave( MacCtx.NvmCtx->Region, &continuousWave );
 800d7c4:	4a0c      	ldr	r2, [pc, #48]	; (800d7f8 <SetTxContinuousWave+0xa0>)
 800d7c6:	238e      	movs	r3, #142	; 0x8e
 800d7c8:	00db      	lsls	r3, r3, #3
 800d7ca:	58d3      	ldr	r3, [r2, r3]
 800d7cc:	781b      	ldrb	r3, [r3, #0]
 800d7ce:	187a      	adds	r2, r7, r1
 800d7d0:	0011      	movs	r1, r2
 800d7d2:	0018      	movs	r0, r3
 800d7d4:	f005 fbae 	bl	8012f34 <RegionSetContinuousWave>

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800d7d8:	4a07      	ldr	r2, [pc, #28]	; (800d7f8 <SetTxContinuousWave+0xa0>)
 800d7da:	23d5      	movs	r3, #213	; 0xd5
 800d7dc:	009b      	lsls	r3, r3, #2
 800d7de:	58d3      	ldr	r3, [r2, r3]
 800d7e0:	2202      	movs	r2, #2
 800d7e2:	431a      	orrs	r2, r3
 800d7e4:	0011      	movs	r1, r2
 800d7e6:	4a04      	ldr	r2, [pc, #16]	; (800d7f8 <SetTxContinuousWave+0xa0>)
 800d7e8:	23d5      	movs	r3, #213	; 0xd5
 800d7ea:	009b      	lsls	r3, r3, #2
 800d7ec:	50d1      	str	r1, [r2, r3]

    return LORAMAC_STATUS_OK;
 800d7ee:	2300      	movs	r3, #0
}
 800d7f0:	0018      	movs	r0, r3
 800d7f2:	46bd      	mov	sp, r7
 800d7f4:	b006      	add	sp, #24
 800d7f6:	bd80      	pop	{r7, pc}
 800d7f8:	2000070c 	.word	0x2000070c

0800d7fc <SetTxContinuousWave1>:

LoRaMacStatus_t SetTxContinuousWave1( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 800d7fc:	b580      	push	{r7, lr}
 800d7fe:	b082      	sub	sp, #8
 800d800:	af00      	add	r7, sp, #0
 800d802:	6039      	str	r1, [r7, #0]
 800d804:	0011      	movs	r1, r2
 800d806:	1dbb      	adds	r3, r7, #6
 800d808:	1c02      	adds	r2, r0, #0
 800d80a:	801a      	strh	r2, [r3, #0]
 800d80c:	1d7b      	adds	r3, r7, #5
 800d80e:	1c0a      	adds	r2, r1, #0
 800d810:	701a      	strb	r2, [r3, #0]
    Radio.SetTxContinuousWave( frequency, power, timeout );
 800d812:	4b0c      	ldr	r3, [pc, #48]	; (800d844 <SetTxContinuousWave1+0x48>)
 800d814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d816:	1d7a      	adds	r2, r7, #5
 800d818:	2100      	movs	r1, #0
 800d81a:	5651      	ldrsb	r1, [r2, r1]
 800d81c:	1dba      	adds	r2, r7, #6
 800d81e:	8812      	ldrh	r2, [r2, #0]
 800d820:	6838      	ldr	r0, [r7, #0]
 800d822:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800d824:	4a08      	ldr	r2, [pc, #32]	; (800d848 <SetTxContinuousWave1+0x4c>)
 800d826:	23d5      	movs	r3, #213	; 0xd5
 800d828:	009b      	lsls	r3, r3, #2
 800d82a:	58d3      	ldr	r3, [r2, r3]
 800d82c:	2202      	movs	r2, #2
 800d82e:	431a      	orrs	r2, r3
 800d830:	0011      	movs	r1, r2
 800d832:	4a05      	ldr	r2, [pc, #20]	; (800d848 <SetTxContinuousWave1+0x4c>)
 800d834:	23d5      	movs	r3, #213	; 0xd5
 800d836:	009b      	lsls	r3, r3, #2
 800d838:	50d1      	str	r1, [r2, r3]

    return LORAMAC_STATUS_OK;
 800d83a:	2300      	movs	r3, #0
}
 800d83c:	0018      	movs	r0, r3
 800d83e:	46bd      	mov	sp, r7
 800d840:	b002      	add	sp, #8
 800d842:	bd80      	pop	{r7, pc}
 800d844:	08020c58 	.word	0x08020c58
 800d848:	2000070c 	.word	0x2000070c

0800d84c <GetCtxs>:

LoRaMacCtxs_t* GetCtxs( void )
{
 800d84c:	b580      	push	{r7, lr}
 800d84e:	b082      	sub	sp, #8
 800d850:	af00      	add	r7, sp, #0
    Contexts.MacNvmCtx = &NvmMacCtx;
 800d852:	4b24      	ldr	r3, [pc, #144]	; (800d8e4 <GetCtxs+0x98>)
 800d854:	4a24      	ldr	r2, [pc, #144]	; (800d8e8 <GetCtxs+0x9c>)
 800d856:	601a      	str	r2, [r3, #0]
    Contexts.MacNvmCtxSize = sizeof( NvmMacCtx );
 800d858:	4b22      	ldr	r3, [pc, #136]	; (800d8e4 <GetCtxs+0x98>)
 800d85a:	228b      	movs	r2, #139	; 0x8b
 800d85c:	0092      	lsls	r2, r2, #2
 800d85e:	605a      	str	r2, [r3, #4]
    Contexts.CryptoNvmCtx = LoRaMacCryptoGetNvmCtx( &Contexts.CryptoNvmCtxSize );
 800d860:	4b22      	ldr	r3, [pc, #136]	; (800d8ec <GetCtxs+0xa0>)
 800d862:	0018      	movs	r0, r3
 800d864:	f003 feec 	bl	8011640 <LoRaMacCryptoGetNvmCtx>
 800d868:	0002      	movs	r2, r0
 800d86a:	4b1e      	ldr	r3, [pc, #120]	; (800d8e4 <GetCtxs+0x98>)
 800d86c:	611a      	str	r2, [r3, #16]
    GetNvmCtxParams_t params ={ 0 };
 800d86e:	2300      	movs	r3, #0
 800d870:	607b      	str	r3, [r7, #4]
    Contexts.RegionNvmCtx = RegionGetNvmCtx( MacCtx.NvmCtx->Region, &params );
 800d872:	4a1f      	ldr	r2, [pc, #124]	; (800d8f0 <GetCtxs+0xa4>)
 800d874:	238e      	movs	r3, #142	; 0x8e
 800d876:	00db      	lsls	r3, r3, #3
 800d878:	58d3      	ldr	r3, [r2, r3]
 800d87a:	781b      	ldrb	r3, [r3, #0]
 800d87c:	1d3a      	adds	r2, r7, #4
 800d87e:	0011      	movs	r1, r2
 800d880:	0018      	movs	r0, r3
 800d882:	f005 f9c1 	bl	8012c08 <RegionGetNvmCtx>
 800d886:	0002      	movs	r2, r0
 800d888:	4b16      	ldr	r3, [pc, #88]	; (800d8e4 <GetCtxs+0x98>)
 800d88a:	609a      	str	r2, [r3, #8]
    Contexts.RegionNvmCtxSize = params.nvmCtxSize;
 800d88c:	687a      	ldr	r2, [r7, #4]
 800d88e:	4b15      	ldr	r3, [pc, #84]	; (800d8e4 <GetCtxs+0x98>)
 800d890:	60da      	str	r2, [r3, #12]
    Contexts.SecureElementNvmCtx = SecureElementGetNvmCtx( &Contexts.SecureElementNvmCtxSize );
 800d892:	4b18      	ldr	r3, [pc, #96]	; (800d8f4 <GetCtxs+0xa8>)
 800d894:	0018      	movs	r0, r3
 800d896:	f7fc fabd 	bl	8009e14 <SecureElementGetNvmCtx>
 800d89a:	0002      	movs	r2, r0
 800d89c:	4b11      	ldr	r3, [pc, #68]	; (800d8e4 <GetCtxs+0x98>)
 800d89e:	619a      	str	r2, [r3, #24]
    Contexts.CommandsNvmCtx = LoRaMacCommandsGetNvmCtx( &Contexts.CommandsNvmCtxSize );
 800d8a0:	4b15      	ldr	r3, [pc, #84]	; (800d8f8 <GetCtxs+0xac>)
 800d8a2:	0018      	movs	r0, r3
 800d8a4:	f002 fb9e 	bl	800ffe4 <LoRaMacCommandsGetNvmCtx>
 800d8a8:	0002      	movs	r2, r0
 800d8aa:	4b0e      	ldr	r3, [pc, #56]	; (800d8e4 <GetCtxs+0x98>)
 800d8ac:	621a      	str	r2, [r3, #32]
    Contexts.ClassBNvmCtx = LoRaMacClassBGetNvmCtx( &Contexts.ClassBNvmCtxSize );
 800d8ae:	4b13      	ldr	r3, [pc, #76]	; (800d8fc <GetCtxs+0xb0>)
 800d8b0:	0018      	movs	r0, r3
 800d8b2:	f002 f964 	bl	800fb7e <LoRaMacClassBGetNvmCtx>
 800d8b6:	0002      	movs	r2, r0
 800d8b8:	4b0a      	ldr	r3, [pc, #40]	; (800d8e4 <GetCtxs+0x98>)
 800d8ba:	629a      	str	r2, [r3, #40]	; 0x28
    Contexts.ConfirmQueueNvmCtx = LoRaMacConfirmQueueGetNvmCtx( &Contexts.ConfirmQueueNvmCtxSize );
 800d8bc:	4b10      	ldr	r3, [pc, #64]	; (800d900 <GetCtxs+0xb4>)
 800d8be:	0018      	movs	r0, r3
 800d8c0:	f002 fd9a 	bl	80103f8 <LoRaMacConfirmQueueGetNvmCtx>
 800d8c4:	0002      	movs	r2, r0
 800d8c6:	4b07      	ldr	r3, [pc, #28]	; (800d8e4 <GetCtxs+0x98>)
 800d8c8:	631a      	str	r2, [r3, #48]	; 0x30
    Contexts.FCntHandlerNvmCtx = LoRaMacFCntHandlerGetNvmCtx( &Contexts.FCntHandlerNvmCtxSize );
 800d8ca:	4b0e      	ldr	r3, [pc, #56]	; (800d904 <GetCtxs+0xb8>)
 800d8cc:	0018      	movs	r0, r3
 800d8ce:	f004 fc0b 	bl	80120e8 <LoRaMacFCntHandlerGetNvmCtx>
 800d8d2:	0002      	movs	r2, r0
 800d8d4:	4b03      	ldr	r3, [pc, #12]	; (800d8e4 <GetCtxs+0x98>)
 800d8d6:	639a      	str	r2, [r3, #56]	; 0x38
    return &Contexts;
 800d8d8:	4b02      	ldr	r3, [pc, #8]	; (800d8e4 <GetCtxs+0x98>)
}
 800d8da:	0018      	movs	r0, r3
 800d8dc:	46bd      	mov	sp, r7
 800d8de:	b002      	add	sp, #8
 800d8e0:	bd80      	pop	{r7, pc}
 800d8e2:	46c0      	nop			; (mov r8, r8)
 800d8e4:	20001548 	.word	0x20001548
 800d8e8:	20000b80 	.word	0x20000b80
 800d8ec:	2000155c 	.word	0x2000155c
 800d8f0:	2000070c 	.word	0x2000070c
 800d8f4:	20001564 	.word	0x20001564
 800d8f8:	2000156c 	.word	0x2000156c
 800d8fc:	20001574 	.word	0x20001574
 800d900:	2000157c 	.word	0x2000157c
 800d904:	20001584 	.word	0x20001584

0800d908 <RestoreCtxs>:

LoRaMacStatus_t RestoreCtxs( LoRaMacCtxs_t* contexts )
{
 800d908:	b580      	push	{r7, lr}
 800d90a:	b084      	sub	sp, #16
 800d90c:	af00      	add	r7, sp, #0
 800d90e:	6078      	str	r0, [r7, #4]
    if( contexts == NULL )
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	2b00      	cmp	r3, #0
 800d914:	d101      	bne.n	800d91a <RestoreCtxs+0x12>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800d916:	2303      	movs	r3, #3
 800d918:	e067      	b.n	800d9ea <RestoreCtxs+0xe2>
    }
    if( MacCtx.MacState != LORAMAC_STOPPED )
 800d91a:	4a36      	ldr	r2, [pc, #216]	; (800d9f4 <RestoreCtxs+0xec>)
 800d91c:	23d5      	movs	r3, #213	; 0xd5
 800d91e:	009b      	lsls	r3, r3, #2
 800d920:	58d3      	ldr	r3, [r2, r3]
 800d922:	2b01      	cmp	r3, #1
 800d924:	d001      	beq.n	800d92a <RestoreCtxs+0x22>
    {
        return LORAMAC_STATUS_BUSY;
 800d926:	2301      	movs	r3, #1
 800d928:	e05f      	b.n	800d9ea <RestoreCtxs+0xe2>
    }

    if( contexts->MacNvmCtx != NULL )
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d008      	beq.n	800d944 <RestoreCtxs+0x3c>
    {
        memcpy1( ( uint8_t* ) &NvmMacCtx, ( uint8_t* ) contexts->MacNvmCtx, contexts->MacNvmCtxSize );
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	6819      	ldr	r1, [r3, #0]
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	685b      	ldr	r3, [r3, #4]
 800d93a:	b29a      	uxth	r2, r3
 800d93c:	4b2e      	ldr	r3, [pc, #184]	; (800d9f8 <RestoreCtxs+0xf0>)
 800d93e:	0018      	movs	r0, r3
 800d940:	f007 fece 	bl	80156e0 <memcpy1>
    }

    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESTORE_CTX;
 800d944:	2108      	movs	r1, #8
 800d946:	187b      	adds	r3, r7, r1
 800d948:	2202      	movs	r2, #2
 800d94a:	711a      	strb	r2, [r3, #4]
    params.NvmCtx = contexts->RegionNvmCtx;
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	689a      	ldr	r2, [r3, #8]
 800d950:	187b      	adds	r3, r7, r1
 800d952:	601a      	str	r2, [r3, #0]
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 800d954:	4a27      	ldr	r2, [pc, #156]	; (800d9f4 <RestoreCtxs+0xec>)
 800d956:	238e      	movs	r3, #142	; 0x8e
 800d958:	00db      	lsls	r3, r3, #3
 800d95a:	58d3      	ldr	r3, [r2, r3]
 800d95c:	781b      	ldrb	r3, [r3, #0]
 800d95e:	187a      	adds	r2, r7, r1
 800d960:	0011      	movs	r1, r2
 800d962:	0018      	movs	r0, r3
 800d964:	f005 f93b 	bl	8012bde <RegionInitDefaults>

    if( SecureElementRestoreNvmCtx( contexts->SecureElementNvmCtx ) != SECURE_ELEMENT_SUCCESS )
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	699b      	ldr	r3, [r3, #24]
 800d96c:	0018      	movs	r0, r3
 800d96e:	f7fc fa39 	bl	8009de4 <SecureElementRestoreNvmCtx>
 800d972:	1e03      	subs	r3, r0, #0
 800d974:	d001      	beq.n	800d97a <RestoreCtxs+0x72>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800d976:	2311      	movs	r3, #17
 800d978:	e037      	b.n	800d9ea <RestoreCtxs+0xe2>
    }

    if( LoRaMacCryptoRestoreNvmCtx( contexts->CryptoNvmCtx ) != LORAMAC_CRYPTO_SUCCESS )
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	691b      	ldr	r3, [r3, #16]
 800d97e:	0018      	movs	r0, r3
 800d980:	f003 fe48 	bl	8011614 <LoRaMacCryptoRestoreNvmCtx>
 800d984:	1e03      	subs	r3, r0, #0
 800d986:	d001      	beq.n	800d98c <RestoreCtxs+0x84>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800d988:	2311      	movs	r3, #17
 800d98a:	e02e      	b.n	800d9ea <RestoreCtxs+0xe2>
    }

    if( LoRaMacFCntHandlerRestoreNvmCtx( contexts->FCntHandlerNvmCtx ) != LORAMAC_FCNT_HANDLER_SUCCESS )
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d990:	0018      	movs	r0, r3
 800d992:	f004 fb93 	bl	80120bc <LoRaMacFCntHandlerRestoreNvmCtx>
 800d996:	1e03      	subs	r3, r0, #0
 800d998:	d001      	beq.n	800d99e <RestoreCtxs+0x96>
    {
        return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800d99a:	2312      	movs	r3, #18
 800d99c:	e025      	b.n	800d9ea <RestoreCtxs+0xe2>
    }

    if( LoRaMacCommandsRestoreNvmCtx( contexts->CommandsNvmCtx ) != LORAMAC_COMMANDS_SUCCESS )
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	6a1b      	ldr	r3, [r3, #32]
 800d9a2:	0018      	movs	r0, r3
 800d9a4:	f002 fb08 	bl	800ffb8 <LoRaMacCommandsRestoreNvmCtx>
 800d9a8:	1e03      	subs	r3, r0, #0
 800d9aa:	d001      	beq.n	800d9b0 <RestoreCtxs+0xa8>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800d9ac:	2313      	movs	r3, #19
 800d9ae:	e01c      	b.n	800d9ea <RestoreCtxs+0xe2>
    }

    if( LoRaMacClassBRestoreNvmCtx( contexts->ClassBNvmCtx ) != true )
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d9b4:	0018      	movs	r0, r3
 800d9b6:	f002 f8d9 	bl	800fb6c <LoRaMacClassBRestoreNvmCtx>
 800d9ba:	0003      	movs	r3, r0
 800d9bc:	001a      	movs	r2, r3
 800d9be:	2301      	movs	r3, #1
 800d9c0:	4053      	eors	r3, r2
 800d9c2:	b2db      	uxtb	r3, r3
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d001      	beq.n	800d9cc <RestoreCtxs+0xc4>
    {
        return LORAMAC_STATUS_CLASS_B_ERROR;
 800d9c8:	2314      	movs	r3, #20
 800d9ca:	e00e      	b.n	800d9ea <RestoreCtxs+0xe2>
    }

    if( LoRaMacConfirmQueueRestoreNvmCtx( contexts->ConfirmQueueNvmCtx ) != true )
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d9d0:	0018      	movs	r0, r3
 800d9d2:	f002 fcfb 	bl	80103cc <LoRaMacConfirmQueueRestoreNvmCtx>
 800d9d6:	0003      	movs	r3, r0
 800d9d8:	001a      	movs	r2, r3
 800d9da:	2301      	movs	r3, #1
 800d9dc:	4053      	eors	r3, r2
 800d9de:	b2db      	uxtb	r3, r3
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d001      	beq.n	800d9e8 <RestoreCtxs+0xe0>
    {
        return LORAMAC_STATUS_CONFIRM_QUEUE_ERROR;
 800d9e4:	2315      	movs	r3, #21
 800d9e6:	e000      	b.n	800d9ea <RestoreCtxs+0xe2>
    }

    return LORAMAC_STATUS_OK;
 800d9e8:	2300      	movs	r3, #0
}
 800d9ea:	0018      	movs	r0, r3
 800d9ec:	46bd      	mov	sp, r7
 800d9ee:	b004      	add	sp, #16
 800d9f0:	bd80      	pop	{r7, pc}
 800d9f2:	46c0      	nop			; (mov r8, r8)
 800d9f4:	2000070c 	.word	0x2000070c
 800d9f8:	20000b80 	.word	0x20000b80

0800d9fc <DetermineFrameType>:

LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
 800d9fc:	b580      	push	{r7, lr}
 800d9fe:	b082      	sub	sp, #8
 800da00:	af00      	add	r7, sp, #0
 800da02:	6078      	str	r0, [r7, #4]
 800da04:	6039      	str	r1, [r7, #0]
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d002      	beq.n	800da12 <DetermineFrameType+0x16>
 800da0c:	683b      	ldr	r3, [r7, #0]
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d101      	bne.n	800da16 <DetermineFrameType+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800da12:	2303      	movs	r3, #3
 800da14:	e03b      	b.n	800da8e <DetermineFrameType+0x92>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	7b1b      	ldrb	r3, [r3, #12]
 800da1a:	220f      	movs	r2, #15
 800da1c:	4013      	ands	r3, r2
 800da1e:	b2db      	uxtb	r3, r3
 800da20:	2b00      	cmp	r3, #0
 800da22:	d008      	beq.n	800da36 <DetermineFrameType+0x3a>
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	2220      	movs	r2, #32
 800da28:	5c9b      	ldrb	r3, [r3, r2]
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d003      	beq.n	800da36 <DetermineFrameType+0x3a>
    {
        *fType = FRAME_TYPE_A;
 800da2e:	683b      	ldr	r3, [r7, #0]
 800da30:	2200      	movs	r2, #0
 800da32:	701a      	strb	r2, [r3, #0]
 800da34:	e02a      	b.n	800da8c <DetermineFrameType+0x90>
    }
    else if( macMsg->FRMPayloadSize == 0 )
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	2228      	movs	r2, #40	; 0x28
 800da3a:	5c9b      	ldrb	r3, [r3, r2]
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d103      	bne.n	800da48 <DetermineFrameType+0x4c>
    {
        *fType = FRAME_TYPE_B;
 800da40:	683b      	ldr	r3, [r7, #0]
 800da42:	2201      	movs	r2, #1
 800da44:	701a      	strb	r2, [r3, #0]
 800da46:	e021      	b.n	800da8c <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	7b1b      	ldrb	r3, [r3, #12]
 800da4c:	220f      	movs	r2, #15
 800da4e:	4013      	ands	r3, r2
 800da50:	b2db      	uxtb	r3, r3
 800da52:	2b00      	cmp	r3, #0
 800da54:	d108      	bne.n	800da68 <DetermineFrameType+0x6c>
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	2220      	movs	r2, #32
 800da5a:	5c9b      	ldrb	r3, [r3, r2]
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d103      	bne.n	800da68 <DetermineFrameType+0x6c>
    {
        *fType = FRAME_TYPE_C;
 800da60:	683b      	ldr	r3, [r7, #0]
 800da62:	2202      	movs	r2, #2
 800da64:	701a      	strb	r2, [r3, #0]
 800da66:	e011      	b.n	800da8c <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	7b1b      	ldrb	r3, [r3, #12]
 800da6c:	220f      	movs	r2, #15
 800da6e:	4013      	ands	r3, r2
 800da70:	b2db      	uxtb	r3, r3
 800da72:	2b00      	cmp	r3, #0
 800da74:	d108      	bne.n	800da88 <DetermineFrameType+0x8c>
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	2220      	movs	r2, #32
 800da7a:	5c9b      	ldrb	r3, [r3, r2]
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d003      	beq.n	800da88 <DetermineFrameType+0x8c>
    {
        *fType = FRAME_TYPE_D;
 800da80:	683b      	ldr	r3, [r7, #0]
 800da82:	2203      	movs	r2, #3
 800da84:	701a      	strb	r2, [r3, #0]
 800da86:	e001      	b.n	800da8c <DetermineFrameType+0x90>
    }
    else
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
 800da88:	2316      	movs	r3, #22
 800da8a:	e000      	b.n	800da8e <DetermineFrameType+0x92>
    }

    return LORAMAC_STATUS_OK;
 800da8c:	2300      	movs	r3, #0
}
 800da8e:	0018      	movs	r0, r3
 800da90:	46bd      	mov	sp, r7
 800da92:	b002      	add	sp, #8
 800da94:	bd80      	pop	{r7, pc}
	...

0800da98 <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
 800da98:	b580      	push	{r7, lr}
 800da9a:	af00      	add	r7, sp, #0
    // Unconfirmed uplink, when all retransmissions are done.
    if( MacCtx.NvmCtx->ChannelsNbTransCounter >=
 800da9c:	4a16      	ldr	r2, [pc, #88]	; (800daf8 <CheckRetransUnconfirmedUplink+0x60>)
 800da9e:	238e      	movs	r3, #142	; 0x8e
 800daa0:	00db      	lsls	r3, r3, #3
 800daa2:	58d2      	ldr	r2, [r2, r3]
 800daa4:	2388      	movs	r3, #136	; 0x88
 800daa6:	005b      	lsls	r3, r3, #1
 800daa8:	5cd2      	ldrb	r2, [r2, r3]
        MacCtx.NvmCtx->MacParams.ChannelsNbTrans )
 800daaa:	4913      	ldr	r1, [pc, #76]	; (800daf8 <CheckRetransUnconfirmedUplink+0x60>)
 800daac:	238e      	movs	r3, #142	; 0x8e
 800daae:	00db      	lsls	r3, r3, #3
 800dab0:	58cb      	ldr	r3, [r1, r3]
 800dab2:	21f4      	movs	r1, #244	; 0xf4
 800dab4:	5c5b      	ldrb	r3, [r3, r1]
    if( MacCtx.NvmCtx->ChannelsNbTransCounter >=
 800dab6:	429a      	cmp	r2, r3
 800dab8:	d301      	bcc.n	800dabe <CheckRetransUnconfirmedUplink+0x26>
    {
        return true;
 800daba:	2301      	movs	r3, #1
 800dabc:	e019      	b.n	800daf2 <CheckRetransUnconfirmedUplink+0x5a>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800dabe:	4b0e      	ldr	r3, [pc, #56]	; (800daf8 <CheckRetransUnconfirmedUplink+0x60>)
 800dac0:	4a0e      	ldr	r2, [pc, #56]	; (800dafc <CheckRetransUnconfirmedUplink+0x64>)
 800dac2:	5c9b      	ldrb	r3, [r3, r2]
 800dac4:	2202      	movs	r2, #2
 800dac6:	4013      	ands	r3, r2
 800dac8:	b2db      	uxtb	r3, r3
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d010      	beq.n	800daf0 <CheckRetransUnconfirmedUplink+0x58>
    {
        // For Class A stop in each case
        if( MacCtx.NvmCtx->DeviceClass == CLASS_A )
 800dace:	4a0a      	ldr	r2, [pc, #40]	; (800daf8 <CheckRetransUnconfirmedUplink+0x60>)
 800dad0:	238e      	movs	r3, #142	; 0x8e
 800dad2:	00db      	lsls	r3, r3, #3
 800dad4:	58d3      	ldr	r3, [r2, r3]
 800dad6:	22c8      	movs	r2, #200	; 0xc8
 800dad8:	5c9b      	ldrb	r3, [r3, r2]
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d101      	bne.n	800dae2 <CheckRetransUnconfirmedUplink+0x4a>
        {
            return true;
 800dade:	2301      	movs	r3, #1
 800dae0:	e007      	b.n	800daf2 <CheckRetransUnconfirmedUplink+0x5a>
        }
        else
        {// For Class B & C stop only if the frame was received in RX1 window
            if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800dae2:	4b05      	ldr	r3, [pc, #20]	; (800daf8 <CheckRetransUnconfirmedUplink+0x60>)
 800dae4:	4a06      	ldr	r2, [pc, #24]	; (800db00 <CheckRetransUnconfirmedUplink+0x68>)
 800dae6:	5c9b      	ldrb	r3, [r3, r2]
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d101      	bne.n	800daf0 <CheckRetransUnconfirmedUplink+0x58>
            {
                return true;
 800daec:	2301      	movs	r3, #1
 800daee:	e000      	b.n	800daf2 <CheckRetransUnconfirmedUplink+0x5a>
            }
        }
    }
    return false;
 800daf0:	2300      	movs	r3, #0
}
 800daf2:	0018      	movs	r0, r3
 800daf4:	46bd      	mov	sp, r7
 800daf6:	bd80      	pop	{r7, pc}
 800daf8:	2000070c 	.word	0x2000070c
 800dafc:	0000046d 	.word	0x0000046d
 800db00:	0000046c 	.word	0x0000046c

0800db04 <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 800db04:	b580      	push	{r7, lr}
 800db06:	af00      	add	r7, sp, #0
    // Confirmed uplink, when all retransmissions ( tries to get a ack ) are done.
    if( MacCtx.NvmCtx->AckTimeoutRetriesCounter >=
 800db08:	4a11      	ldr	r2, [pc, #68]	; (800db50 <CheckRetransConfirmedUplink+0x4c>)
 800db0a:	238e      	movs	r3, #142	; 0x8e
 800db0c:	00db      	lsls	r3, r3, #3
 800db0e:	58d3      	ldr	r3, [r2, r3]
 800db10:	4a10      	ldr	r2, [pc, #64]	; (800db54 <CheckRetransConfirmedUplink+0x50>)
 800db12:	5c9a      	ldrb	r2, [r3, r2]
        MacCtx.NvmCtx->AckTimeoutRetries )
 800db14:	490e      	ldr	r1, [pc, #56]	; (800db50 <CheckRetransConfirmedUplink+0x4c>)
 800db16:	238e      	movs	r3, #142	; 0x8e
 800db18:	00db      	lsls	r3, r3, #3
 800db1a:	58cb      	ldr	r3, [r1, r3]
 800db1c:	490e      	ldr	r1, [pc, #56]	; (800db58 <CheckRetransConfirmedUplink+0x54>)
 800db1e:	5c5b      	ldrb	r3, [r3, r1]
    if( MacCtx.NvmCtx->AckTimeoutRetriesCounter >=
 800db20:	429a      	cmp	r2, r3
 800db22:	d301      	bcc.n	800db28 <CheckRetransConfirmedUplink+0x24>
    {
        return true;
 800db24:	2301      	movs	r3, #1
 800db26:	e010      	b.n	800db4a <CheckRetransConfirmedUplink+0x46>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800db28:	4b09      	ldr	r3, [pc, #36]	; (800db50 <CheckRetransConfirmedUplink+0x4c>)
 800db2a:	4a0c      	ldr	r2, [pc, #48]	; (800db5c <CheckRetransConfirmedUplink+0x58>)
 800db2c:	5c9b      	ldrb	r3, [r3, r2]
 800db2e:	2202      	movs	r2, #2
 800db30:	4013      	ands	r3, r2
 800db32:	b2db      	uxtb	r3, r3
 800db34:	2b00      	cmp	r3, #0
 800db36:	d007      	beq.n	800db48 <CheckRetransConfirmedUplink+0x44>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 800db38:	4a05      	ldr	r2, [pc, #20]	; (800db50 <CheckRetransConfirmedUplink+0x4c>)
 800db3a:	2386      	movs	r3, #134	; 0x86
 800db3c:	00db      	lsls	r3, r3, #3
 800db3e:	5cd3      	ldrb	r3, [r2, r3]
 800db40:	2b00      	cmp	r3, #0
 800db42:	d001      	beq.n	800db48 <CheckRetransConfirmedUplink+0x44>
        {
            return true;
 800db44:	2301      	movs	r3, #1
 800db46:	e000      	b.n	800db4a <CheckRetransConfirmedUplink+0x46>
        }
    }
    return false;
 800db48:	2300      	movs	r3, #0
}
 800db4a:	0018      	movs	r0, r3
 800db4c:	46bd      	mov	sp, r7
 800db4e:	bd80      	pop	{r7, pc}
 800db50:	2000070c 	.word	0x2000070c
 800db54:	00000217 	.word	0x00000217
 800db58:	00000216 	.word	0x00000216
 800db5c:	0000046d 	.word	0x0000046d

0800db60 <StopRetransmission>:


static bool StopRetransmission( void )
{
 800db60:	b580      	push	{r7, lr}
 800db62:	b082      	sub	sp, #8
 800db64:	af00      	add	r7, sp, #0
    // Increase the current value by 1
    uint32_t fCntUp = 0;
 800db66:	2300      	movs	r3, #0
 800db68:	607b      	str	r3, [r7, #4]
    if( LORAMAC_FCNT_HANDLER_SUCCESS != LoRaMacGetFCntUp( &fCntUp ) )
 800db6a:	1d3b      	adds	r3, r7, #4
 800db6c:	0018      	movs	r0, r3
 800db6e:	f004 fbb3 	bl	80122d8 <LoRaMacGetFCntUp>
 800db72:	1e03      	subs	r3, r0, #0
 800db74:	d001      	beq.n	800db7a <StopRetransmission+0x1a>
    {
        return false;
 800db76:	2300      	movs	r3, #0
 800db78:	e043      	b.n	800dc02 <StopRetransmission+0xa2>
    }
    if( LORAMAC_FCNT_HANDLER_SUCCESS != LoRaMacSetFCntUp( ( fCntUp ) ) )
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	0018      	movs	r0, r3
 800db7e:	f004 fbc1 	bl	8012304 <LoRaMacSetFCntUp>
 800db82:	1e03      	subs	r3, r0, #0
 800db84:	d001      	beq.n	800db8a <StopRetransmission+0x2a>
    {
        return false;
 800db86:	2300      	movs	r3, #0
 800db88:	e03b      	b.n	800dc02 <StopRetransmission+0xa2>
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 0 )
 800db8a:	4b20      	ldr	r3, [pc, #128]	; (800dc0c <StopRetransmission+0xac>)
 800db8c:	4a20      	ldr	r2, [pc, #128]	; (800dc10 <StopRetransmission+0xb0>)
 800db8e:	5c9b      	ldrb	r3, [r3, r2]
 800db90:	2202      	movs	r2, #2
 800db92:	4013      	ands	r3, r2
 800db94:	b2db      	uxtb	r3, r3
 800db96:	2b00      	cmp	r3, #0
 800db98:	d110      	bne.n	800dbbc <StopRetransmission+0x5c>
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( MacCtx.NvmCtx->AdrCtrlOn == true )
 800db9a:	4a1c      	ldr	r2, [pc, #112]	; (800dc0c <StopRetransmission+0xac>)
 800db9c:	238e      	movs	r3, #142	; 0x8e
 800db9e:	00db      	lsls	r3, r3, #3
 800dba0:	58d3      	ldr	r3, [r2, r3]
 800dba2:	22ca      	movs	r2, #202	; 0xca
 800dba4:	5c9b      	ldrb	r3, [r3, r2]
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d008      	beq.n	800dbbc <StopRetransmission+0x5c>
        {
            MacCtx.NvmCtx->AdrAckCounter++;
 800dbaa:	4a18      	ldr	r2, [pc, #96]	; (800dc0c <StopRetransmission+0xac>)
 800dbac:	238e      	movs	r3, #142	; 0x8e
 800dbae:	00db      	lsls	r3, r3, #3
 800dbb0:	58d3      	ldr	r3, [r2, r3]
 800dbb2:	22cc      	movs	r2, #204	; 0xcc
 800dbb4:	589a      	ldr	r2, [r3, r2]
 800dbb6:	3201      	adds	r2, #1
 800dbb8:	21cc      	movs	r1, #204	; 0xcc
 800dbba:	505a      	str	r2, [r3, r1]
        }
    }

    MacCtx.NvmCtx->ChannelsNbTransCounter = 0;
 800dbbc:	4a13      	ldr	r2, [pc, #76]	; (800dc0c <StopRetransmission+0xac>)
 800dbbe:	238e      	movs	r3, #142	; 0x8e
 800dbc0:	00db      	lsls	r3, r3, #3
 800dbc2:	58d2      	ldr	r2, [r2, r3]
 800dbc4:	2388      	movs	r3, #136	; 0x88
 800dbc6:	005b      	lsls	r3, r3, #1
 800dbc8:	2100      	movs	r1, #0
 800dbca:	54d1      	strb	r1, [r2, r3]
    MacCtx.NvmCtx->NodeAckRequested = false;
 800dbcc:	4a0f      	ldr	r2, [pc, #60]	; (800dc0c <StopRetransmission+0xac>)
 800dbce:	238e      	movs	r3, #142	; 0x8e
 800dbd0:	00db      	lsls	r3, r3, #3
 800dbd2:	58d3      	ldr	r3, [r2, r3]
 800dbd4:	4a0f      	ldr	r2, [pc, #60]	; (800dc14 <StopRetransmission+0xb4>)
 800dbd6:	2100      	movs	r1, #0
 800dbd8:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->AckTimeoutRetry = false;
 800dbda:	4a0c      	ldr	r2, [pc, #48]	; (800dc0c <StopRetransmission+0xac>)
 800dbdc:	238e      	movs	r3, #142	; 0x8e
 800dbde:	00db      	lsls	r3, r3, #3
 800dbe0:	58d2      	ldr	r2, [r2, r3]
 800dbe2:	2386      	movs	r3, #134	; 0x86
 800dbe4:	009b      	lsls	r3, r3, #2
 800dbe6:	2100      	movs	r1, #0
 800dbe8:	54d1      	strb	r1, [r2, r3]
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800dbea:	4a08      	ldr	r2, [pc, #32]	; (800dc0c <StopRetransmission+0xac>)
 800dbec:	23d5      	movs	r3, #213	; 0xd5
 800dbee:	009b      	lsls	r3, r3, #2
 800dbf0:	58d3      	ldr	r3, [r2, r3]
 800dbf2:	2202      	movs	r2, #2
 800dbf4:	4393      	bics	r3, r2
 800dbf6:	0019      	movs	r1, r3
 800dbf8:	4a04      	ldr	r2, [pc, #16]	; (800dc0c <StopRetransmission+0xac>)
 800dbfa:	23d5      	movs	r3, #213	; 0xd5
 800dbfc:	009b      	lsls	r3, r3, #2
 800dbfe:	50d1      	str	r1, [r2, r3]

    return true;
 800dc00:	2301      	movs	r3, #1
}
 800dc02:	0018      	movs	r0, r3
 800dc04:	46bd      	mov	sp, r7
 800dc06:	b002      	add	sp, #8
 800dc08:	bd80      	pop	{r7, pc}
 800dc0a:	46c0      	nop			; (mov r8, r8)
 800dc0c:	2000070c 	.word	0x2000070c
 800dc10:	0000046d 	.word	0x0000046d
 800dc14:	00000219 	.word	0x00000219

0800dc18 <AckTimeoutRetriesProcess>:

static void AckTimeoutRetriesProcess( void )
{
 800dc18:	b580      	push	{r7, lr}
 800dc1a:	b082      	sub	sp, #8
 800dc1c:	af00      	add	r7, sp, #0
    if( ( MacCtx.NvmCtx->AckTimeoutRetriesCounter < MacCtx.NvmCtx->AckTimeoutRetries ) && ( MacCtx.NvmCtx->AckTimeoutRetriesCounter <= MAX_ACK_RETRIES ) )
 800dc1e:	4a2d      	ldr	r2, [pc, #180]	; (800dcd4 <AckTimeoutRetriesProcess+0xbc>)
 800dc20:	238e      	movs	r3, #142	; 0x8e
 800dc22:	00db      	lsls	r3, r3, #3
 800dc24:	58d3      	ldr	r3, [r2, r3]
 800dc26:	4a2c      	ldr	r2, [pc, #176]	; (800dcd8 <AckTimeoutRetriesProcess+0xc0>)
 800dc28:	5c9a      	ldrb	r2, [r3, r2]
 800dc2a:	492a      	ldr	r1, [pc, #168]	; (800dcd4 <AckTimeoutRetriesProcess+0xbc>)
 800dc2c:	238e      	movs	r3, #142	; 0x8e
 800dc2e:	00db      	lsls	r3, r3, #3
 800dc30:	58cb      	ldr	r3, [r1, r3]
 800dc32:	492a      	ldr	r1, [pc, #168]	; (800dcdc <AckTimeoutRetriesProcess+0xc4>)
 800dc34:	5c5b      	ldrb	r3, [r3, r1]
 800dc36:	429a      	cmp	r2, r3
 800dc38:	d247      	bcs.n	800dcca <AckTimeoutRetriesProcess+0xb2>
 800dc3a:	4a26      	ldr	r2, [pc, #152]	; (800dcd4 <AckTimeoutRetriesProcess+0xbc>)
 800dc3c:	238e      	movs	r3, #142	; 0x8e
 800dc3e:	00db      	lsls	r3, r3, #3
 800dc40:	58d3      	ldr	r3, [r2, r3]
 800dc42:	4a25      	ldr	r2, [pc, #148]	; (800dcd8 <AckTimeoutRetriesProcess+0xc0>)
 800dc44:	5c9b      	ldrb	r3, [r3, r2]
 800dc46:	2b08      	cmp	r3, #8
 800dc48:	d83f      	bhi.n	800dcca <AckTimeoutRetriesProcess+0xb2>
    {
        MacCtx.NvmCtx->AckTimeoutRetriesCounter++;
 800dc4a:	4a22      	ldr	r2, [pc, #136]	; (800dcd4 <AckTimeoutRetriesProcess+0xbc>)
 800dc4c:	238e      	movs	r3, #142	; 0x8e
 800dc4e:	00db      	lsls	r3, r3, #3
 800dc50:	58d3      	ldr	r3, [r2, r3]
 800dc52:	4a21      	ldr	r2, [pc, #132]	; (800dcd8 <AckTimeoutRetriesProcess+0xc0>)
 800dc54:	5c9a      	ldrb	r2, [r3, r2]
 800dc56:	3201      	adds	r2, #1
 800dc58:	b2d1      	uxtb	r1, r2
 800dc5a:	4a1f      	ldr	r2, [pc, #124]	; (800dcd8 <AckTimeoutRetriesProcess+0xc0>)
 800dc5c:	5499      	strb	r1, [r3, r2]
        if( ( MacCtx.NvmCtx->AckTimeoutRetriesCounter % 2 ) == 1 )
 800dc5e:	4a1d      	ldr	r2, [pc, #116]	; (800dcd4 <AckTimeoutRetriesProcess+0xbc>)
 800dc60:	238e      	movs	r3, #142	; 0x8e
 800dc62:	00db      	lsls	r3, r3, #3
 800dc64:	58d3      	ldr	r3, [r2, r3]
 800dc66:	4a1c      	ldr	r2, [pc, #112]	; (800dcd8 <AckTimeoutRetriesProcess+0xc0>)
 800dc68:	5c9b      	ldrb	r3, [r3, r2]
 800dc6a:	2201      	movs	r2, #1
 800dc6c:	4013      	ands	r3, r2
 800dc6e:	b2db      	uxtb	r3, r3
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d02a      	beq.n	800dcca <AckTimeoutRetriesProcess+0xb2>
        {
            GetPhyParams_t getPhy;
            PhyParam_t phyParam;

            getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 800dc74:	1d3b      	adds	r3, r7, #4
 800dc76:	2221      	movs	r2, #33	; 0x21
 800dc78:	701a      	strb	r2, [r3, #0]
            getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800dc7a:	4a16      	ldr	r2, [pc, #88]	; (800dcd4 <AckTimeoutRetriesProcess+0xbc>)
 800dc7c:	238e      	movs	r3, #142	; 0x8e
 800dc7e:	00db      	lsls	r3, r3, #3
 800dc80:	58d2      	ldr	r2, [r2, r3]
 800dc82:	2380      	movs	r3, #128	; 0x80
 800dc84:	005b      	lsls	r3, r3, #1
 800dc86:	5cd2      	ldrb	r2, [r2, r3]
 800dc88:	1d3b      	adds	r3, r7, #4
 800dc8a:	709a      	strb	r2, [r3, #2]
            getPhy.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800dc8c:	4a11      	ldr	r2, [pc, #68]	; (800dcd4 <AckTimeoutRetriesProcess+0xbc>)
 800dc8e:	238e      	movs	r3, #142	; 0x8e
 800dc90:	00db      	lsls	r3, r3, #3
 800dc92:	58d3      	ldr	r3, [r2, r3]
 800dc94:	22d5      	movs	r2, #213	; 0xd5
 800dc96:	569a      	ldrsb	r2, [r3, r2]
 800dc98:	1d3b      	adds	r3, r7, #4
 800dc9a:	705a      	strb	r2, [r3, #1]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800dc9c:	4a0d      	ldr	r2, [pc, #52]	; (800dcd4 <AckTimeoutRetriesProcess+0xbc>)
 800dc9e:	238e      	movs	r3, #142	; 0x8e
 800dca0:	00db      	lsls	r3, r3, #3
 800dca2:	58d3      	ldr	r3, [r2, r3]
 800dca4:	781b      	ldrb	r3, [r3, #0]
 800dca6:	1d3a      	adds	r2, r7, #4
 800dca8:	0011      	movs	r1, r2
 800dcaa:	0018      	movs	r0, r3
 800dcac:	f004 ff5b 	bl	8012b66 <RegionGetPhyParam>
 800dcb0:	0003      	movs	r3, r0
 800dcb2:	001a      	movs	r2, r3
 800dcb4:	003b      	movs	r3, r7
 800dcb6:	601a      	str	r2, [r3, #0]
            MacCtx.NvmCtx->MacParams.ChannelsDatarate = phyParam.Value;
 800dcb8:	003b      	movs	r3, r7
 800dcba:	6819      	ldr	r1, [r3, #0]
 800dcbc:	4a05      	ldr	r2, [pc, #20]	; (800dcd4 <AckTimeoutRetriesProcess+0xbc>)
 800dcbe:	238e      	movs	r3, #142	; 0x8e
 800dcc0:	00db      	lsls	r3, r3, #3
 800dcc2:	58d3      	ldr	r3, [r2, r3]
 800dcc4:	b249      	sxtb	r1, r1
 800dcc6:	22d5      	movs	r2, #213	; 0xd5
 800dcc8:	5499      	strb	r1, [r3, r2]
        }
    }
}
 800dcca:	46c0      	nop			; (mov r8, r8)
 800dccc:	46bd      	mov	sp, r7
 800dcce:	b002      	add	sp, #8
 800dcd0:	bd80      	pop	{r7, pc}
 800dcd2:	46c0      	nop			; (mov r8, r8)
 800dcd4:	2000070c 	.word	0x2000070c
 800dcd8:	00000217 	.word	0x00000217
 800dcdc:	00000216 	.word	0x00000216

0800dce0 <AckTimeoutRetriesFinalize>:

static void AckTimeoutRetriesFinalize( void )
{
 800dce0:	b580      	push	{r7, lr}
 800dce2:	b082      	sub	sp, #8
 800dce4:	af00      	add	r7, sp, #0
    if( MacCtx.McpsConfirm.AckReceived == false )
 800dce6:	4a19      	ldr	r2, [pc, #100]	; (800dd4c <AckTimeoutRetriesFinalize+0x6c>)
 800dce8:	2386      	movs	r3, #134	; 0x86
 800dcea:	00db      	lsls	r3, r3, #3
 800dcec:	5cd3      	ldrb	r3, [r2, r3]
 800dcee:	2201      	movs	r2, #1
 800dcf0:	4053      	eors	r3, r2
 800dcf2:	b2db      	uxtb	r3, r3
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d01c      	beq.n	800dd32 <AckTimeoutRetriesFinalize+0x52>
    {
        InitDefaultsParams_t params;
        params.Type = INIT_TYPE_RESTORE_DEFAULT_CHANNELS;
 800dcf8:	003b      	movs	r3, r7
 800dcfa:	2201      	movs	r2, #1
 800dcfc:	711a      	strb	r2, [r3, #4]
        params.NvmCtx = Contexts.RegionNvmCtx;
 800dcfe:	4b14      	ldr	r3, [pc, #80]	; (800dd50 <AckTimeoutRetriesFinalize+0x70>)
 800dd00:	689a      	ldr	r2, [r3, #8]
 800dd02:	003b      	movs	r3, r7
 800dd04:	601a      	str	r2, [r3, #0]
        RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 800dd06:	4a11      	ldr	r2, [pc, #68]	; (800dd4c <AckTimeoutRetriesFinalize+0x6c>)
 800dd08:	238e      	movs	r3, #142	; 0x8e
 800dd0a:	00db      	lsls	r3, r3, #3
 800dd0c:	58d3      	ldr	r3, [r2, r3]
 800dd0e:	781b      	ldrb	r3, [r3, #0]
 800dd10:	003a      	movs	r2, r7
 800dd12:	0011      	movs	r1, r2
 800dd14:	0018      	movs	r0, r3
 800dd16:	f004 ff62 	bl	8012bde <RegionInitDefaults>

        MacCtx.NvmCtx->NodeAckRequested = false;
 800dd1a:	4a0c      	ldr	r2, [pc, #48]	; (800dd4c <AckTimeoutRetriesFinalize+0x6c>)
 800dd1c:	238e      	movs	r3, #142	; 0x8e
 800dd1e:	00db      	lsls	r3, r3, #3
 800dd20:	58d3      	ldr	r3, [r2, r3]
 800dd22:	4a0c      	ldr	r2, [pc, #48]	; (800dd54 <AckTimeoutRetriesFinalize+0x74>)
 800dd24:	2100      	movs	r1, #0
 800dd26:	5499      	strb	r1, [r3, r2]
        MacCtx.McpsConfirm.AckReceived = false;
 800dd28:	4a08      	ldr	r2, [pc, #32]	; (800dd4c <AckTimeoutRetriesFinalize+0x6c>)
 800dd2a:	2386      	movs	r3, #134	; 0x86
 800dd2c:	00db      	lsls	r3, r3, #3
 800dd2e:	2100      	movs	r1, #0
 800dd30:	54d1      	strb	r1, [r2, r3]
    }
    MacCtx.McpsConfirm.NbRetries = MacCtx.NvmCtx->AckTimeoutRetriesCounter;
 800dd32:	4a06      	ldr	r2, [pc, #24]	; (800dd4c <AckTimeoutRetriesFinalize+0x6c>)
 800dd34:	238e      	movs	r3, #142	; 0x8e
 800dd36:	00db      	lsls	r3, r3, #3
 800dd38:	58d3      	ldr	r3, [r2, r3]
 800dd3a:	4a07      	ldr	r2, [pc, #28]	; (800dd58 <AckTimeoutRetriesFinalize+0x78>)
 800dd3c:	5c99      	ldrb	r1, [r3, r2]
 800dd3e:	4b03      	ldr	r3, [pc, #12]	; (800dd4c <AckTimeoutRetriesFinalize+0x6c>)
 800dd40:	4a06      	ldr	r2, [pc, #24]	; (800dd5c <AckTimeoutRetriesFinalize+0x7c>)
 800dd42:	5499      	strb	r1, [r3, r2]
}
 800dd44:	46c0      	nop			; (mov r8, r8)
 800dd46:	46bd      	mov	sp, r7
 800dd48:	b002      	add	sp, #8
 800dd4a:	bd80      	pop	{r7, pc}
 800dd4c:	2000070c 	.word	0x2000070c
 800dd50:	20001548 	.word	0x20001548
 800dd54:	00000219 	.word	0x00000219
 800dd58:	00000217 	.word	0x00000217
 800dd5c:	00000431 	.word	0x00000431

0800dd60 <CallNvmCtxCallback>:

static void CallNvmCtxCallback( LoRaMacNvmCtxModule_t module )
{
 800dd60:	b580      	push	{r7, lr}
 800dd62:	b082      	sub	sp, #8
 800dd64:	af00      	add	r7, sp, #0
 800dd66:	0002      	movs	r2, r0
 800dd68:	1dfb      	adds	r3, r7, #7
 800dd6a:	701a      	strb	r2, [r3, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->NvmContextChange != NULL ) )
 800dd6c:	4a0c      	ldr	r2, [pc, #48]	; (800dda0 <CallNvmCtxCallback+0x40>)
 800dd6e:	23d7      	movs	r3, #215	; 0xd7
 800dd70:	009b      	lsls	r3, r3, #2
 800dd72:	58d3      	ldr	r3, [r2, r3]
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d00f      	beq.n	800dd98 <CallNvmCtxCallback+0x38>
 800dd78:	4a09      	ldr	r2, [pc, #36]	; (800dda0 <CallNvmCtxCallback+0x40>)
 800dd7a:	23d7      	movs	r3, #215	; 0xd7
 800dd7c:	009b      	lsls	r3, r3, #2
 800dd7e:	58d3      	ldr	r3, [r2, r3]
 800dd80:	689b      	ldr	r3, [r3, #8]
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d008      	beq.n	800dd98 <CallNvmCtxCallback+0x38>
    {
        MacCtx.MacCallbacks->NvmContextChange( module );
 800dd86:	4a06      	ldr	r2, [pc, #24]	; (800dda0 <CallNvmCtxCallback+0x40>)
 800dd88:	23d7      	movs	r3, #215	; 0xd7
 800dd8a:	009b      	lsls	r3, r3, #2
 800dd8c:	58d3      	ldr	r3, [r2, r3]
 800dd8e:	689b      	ldr	r3, [r3, #8]
 800dd90:	1dfa      	adds	r2, r7, #7
 800dd92:	7812      	ldrb	r2, [r2, #0]
 800dd94:	0010      	movs	r0, r2
 800dd96:	4798      	blx	r3
    }
}
 800dd98:	46c0      	nop			; (mov r8, r8)
 800dd9a:	46bd      	mov	sp, r7
 800dd9c:	b002      	add	sp, #8
 800dd9e:	bd80      	pop	{r7, pc}
 800dda0:	2000070c 	.word	0x2000070c

0800dda4 <EventMacNvmCtxChanged>:

static void EventMacNvmCtxChanged( void )
{
 800dda4:	b580      	push	{r7, lr}
 800dda6:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_MAC );
 800dda8:	2000      	movs	r0, #0
 800ddaa:	f7ff ffd9 	bl	800dd60 <CallNvmCtxCallback>
}
 800ddae:	46c0      	nop			; (mov r8, r8)
 800ddb0:	46bd      	mov	sp, r7
 800ddb2:	bd80      	pop	{r7, pc}

0800ddb4 <EventRegionNvmCtxChanged>:

static void EventRegionNvmCtxChanged( void )
{
 800ddb4:	b580      	push	{r7, lr}
 800ddb6:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_REGION );
 800ddb8:	2001      	movs	r0, #1
 800ddba:	f7ff ffd1 	bl	800dd60 <CallNvmCtxCallback>
}
 800ddbe:	46c0      	nop			; (mov r8, r8)
 800ddc0:	46bd      	mov	sp, r7
 800ddc2:	bd80      	pop	{r7, pc}

0800ddc4 <EventCryptoNvmCtxChanged>:

static void EventCryptoNvmCtxChanged( void )
{
 800ddc4:	b580      	push	{r7, lr}
 800ddc6:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_CRYPTO );
 800ddc8:	2002      	movs	r0, #2
 800ddca:	f7ff ffc9 	bl	800dd60 <CallNvmCtxCallback>
}
 800ddce:	46c0      	nop			; (mov r8, r8)
 800ddd0:	46bd      	mov	sp, r7
 800ddd2:	bd80      	pop	{r7, pc}

0800ddd4 <EventSecureElementNvmCtxChanged>:

static void EventSecureElementNvmCtxChanged( void )
{
 800ddd4:	b580      	push	{r7, lr}
 800ddd6:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_SECURE_ELEMENT );
 800ddd8:	2003      	movs	r0, #3
 800ddda:	f7ff ffc1 	bl	800dd60 <CallNvmCtxCallback>
}
 800ddde:	46c0      	nop			; (mov r8, r8)
 800dde0:	46bd      	mov	sp, r7
 800dde2:	bd80      	pop	{r7, pc}

0800dde4 <EventCommandsNvmCtxChanged>:

static void EventCommandsNvmCtxChanged( void )
{
 800dde4:	b580      	push	{r7, lr}
 800dde6:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_COMMANDS );
 800dde8:	2004      	movs	r0, #4
 800ddea:	f7ff ffb9 	bl	800dd60 <CallNvmCtxCallback>
}
 800ddee:	46c0      	nop			; (mov r8, r8)
 800ddf0:	46bd      	mov	sp, r7
 800ddf2:	bd80      	pop	{r7, pc}

0800ddf4 <EventClassBNvmCtxChanged>:

static void EventClassBNvmCtxChanged( void )
{
 800ddf4:	b580      	push	{r7, lr}
 800ddf6:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_CLASS_B );
 800ddf8:	2005      	movs	r0, #5
 800ddfa:	f7ff ffb1 	bl	800dd60 <CallNvmCtxCallback>
}
 800ddfe:	46c0      	nop			; (mov r8, r8)
 800de00:	46bd      	mov	sp, r7
 800de02:	bd80      	pop	{r7, pc}

0800de04 <EventConfirmQueueNvmCtxChanged>:

static void EventConfirmQueueNvmCtxChanged( void )
{
 800de04:	b580      	push	{r7, lr}
 800de06:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_CONFIRM_QUEUE );
 800de08:	2006      	movs	r0, #6
 800de0a:	f7ff ffa9 	bl	800dd60 <CallNvmCtxCallback>
}
 800de0e:	46c0      	nop			; (mov r8, r8)
 800de10:	46bd      	mov	sp, r7
 800de12:	bd80      	pop	{r7, pc}

0800de14 <EventFCntHandlerNvmCtxChanged>:

static void EventFCntHandlerNvmCtxChanged( void )
{
 800de14:	b580      	push	{r7, lr}
 800de16:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_FCNT_HANDLER );
 800de18:	2007      	movs	r0, #7
 800de1a:	f7ff ffa1 	bl	800dd60 <CallNvmCtxCallback>
}
 800de1e:	46c0      	nop			; (mov r8, r8)
 800de20:	46bd      	mov	sp, r7
 800de22:	bd80      	pop	{r7, pc}

0800de24 <IsRequestPending>:

static uint8_t IsRequestPending( void )
{
 800de24:	b580      	push	{r7, lr}
 800de26:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 800de28:	4b0a      	ldr	r3, [pc, #40]	; (800de54 <IsRequestPending+0x30>)
 800de2a:	4a0b      	ldr	r2, [pc, #44]	; (800de58 <IsRequestPending+0x34>)
 800de2c:	5c9b      	ldrb	r3, [r3, r2]
 800de2e:	2204      	movs	r2, #4
 800de30:	4013      	ands	r3, r2
 800de32:	b2db      	uxtb	r3, r3
 800de34:	2b00      	cmp	r3, #0
 800de36:	d107      	bne.n	800de48 <IsRequestPending+0x24>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
 800de38:	4b06      	ldr	r3, [pc, #24]	; (800de54 <IsRequestPending+0x30>)
 800de3a:	4a07      	ldr	r2, [pc, #28]	; (800de58 <IsRequestPending+0x34>)
 800de3c:	5c9b      	ldrb	r3, [r3, r2]
 800de3e:	2201      	movs	r2, #1
 800de40:	4013      	ands	r3, r2
 800de42:	b2db      	uxtb	r3, r3
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 800de44:	2b00      	cmp	r3, #0
 800de46:	d001      	beq.n	800de4c <IsRequestPending+0x28>
    {
        return 1;
 800de48:	2301      	movs	r3, #1
 800de4a:	e000      	b.n	800de4e <IsRequestPending+0x2a>
    }
    return 0;
 800de4c:	2300      	movs	r3, #0
}
 800de4e:	0018      	movs	r0, r3
 800de50:	46bd      	mov	sp, r7
 800de52:	bd80      	pop	{r7, pc}
 800de54:	2000070c 	.word	0x2000070c
 800de58:	0000046d 	.word	0x0000046d

0800de5c <LoRaMacInitialization>:


LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 800de5c:	b5b0      	push	{r4, r5, r7, lr}
 800de5e:	b094      	sub	sp, #80	; 0x50
 800de60:	af00      	add	r7, sp, #0
 800de62:	60f8      	str	r0, [r7, #12]
 800de64:	60b9      	str	r1, [r7, #8]
 800de66:	1dfb      	adds	r3, r7, #7
 800de68:	701a      	strb	r2, [r3, #0]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    if( ( primitives == NULL ) ||
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d002      	beq.n	800de76 <LoRaMacInitialization+0x1a>
 800de70:	68bb      	ldr	r3, [r7, #8]
 800de72:	2b00      	cmp	r3, #0
 800de74:	d101      	bne.n	800de7a <LoRaMacInitialization+0x1e>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800de76:	2303      	movs	r3, #3
 800de78:	e391      	b.n	800e59e <LoRaMacInitialization+0x742>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	681b      	ldr	r3, [r3, #0]
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d00b      	beq.n	800de9a <LoRaMacInitialization+0x3e>
        ( primitives->MacMcpsIndication == NULL ) ||
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	685b      	ldr	r3, [r3, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 800de86:	2b00      	cmp	r3, #0
 800de88:	d007      	beq.n	800de9a <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeConfirm == NULL ) ||
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	689b      	ldr	r3, [r3, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d003      	beq.n	800de9a <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeIndication == NULL ) )
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	68db      	ldr	r3, [r3, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 800de96:	2b00      	cmp	r3, #0
 800de98:	d101      	bne.n	800de9e <LoRaMacInitialization+0x42>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800de9a:	2303      	movs	r3, #3
 800de9c:	e37f      	b.n	800e59e <LoRaMacInitialization+0x742>
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 800de9e:	1dfb      	adds	r3, r7, #7
 800dea0:	781b      	ldrb	r3, [r3, #0]
 800dea2:	0018      	movs	r0, r3
 800dea4:	f004 fe4e 	bl	8012b44 <RegionIsActive>
 800dea8:	0003      	movs	r3, r0
 800deaa:	001a      	movs	r2, r3
 800deac:	2301      	movs	r3, #1
 800deae:	4053      	eors	r3, r2
 800deb0:	b2db      	uxtb	r3, r3
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d001      	beq.n	800deba <LoRaMacInitialization+0x5e>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 800deb6:	2309      	movs	r3, #9
 800deb8:	e371      	b.n	800e59e <LoRaMacInitialization+0x742>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives, EventConfirmQueueNvmCtxChanged );
 800deba:	4afe      	ldr	r2, [pc, #1016]	; (800e2b4 <LoRaMacInitialization+0x458>)
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	0011      	movs	r1, r2
 800dec0:	0018      	movs	r0, r3
 800dec2:	f002 fa53 	bl	801036c <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &NvmMacCtx, 0x00, sizeof( LoRaMacNvmCtx_t ) );
 800dec6:	238b      	movs	r3, #139	; 0x8b
 800dec8:	009a      	lsls	r2, r3, #2
 800deca:	4bfb      	ldr	r3, [pc, #1004]	; (800e2b8 <LoRaMacInitialization+0x45c>)
 800decc:	2100      	movs	r1, #0
 800dece:	0018      	movs	r0, r3
 800ded0:	f007 fc42 	bl	8015758 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 800ded4:	4af9      	ldr	r2, [pc, #996]	; (800e2bc <LoRaMacInitialization+0x460>)
 800ded6:	4bfa      	ldr	r3, [pc, #1000]	; (800e2c0 <LoRaMacInitialization+0x464>)
 800ded8:	2100      	movs	r1, #0
 800deda:	0018      	movs	r0, r3
 800dedc:	f007 fc3c 	bl	8015758 <memset1>
    MacCtx.NvmCtx = &NvmMacCtx;
 800dee0:	4af7      	ldr	r2, [pc, #988]	; (800e2c0 <LoRaMacInitialization+0x464>)
 800dee2:	238e      	movs	r3, #142	; 0x8e
 800dee4:	00db      	lsls	r3, r3, #3
 800dee6:	49f4      	ldr	r1, [pc, #976]	; (800e2b8 <LoRaMacInitialization+0x45c>)
 800dee8:	50d1      	str	r1, [r2, r3]

    // Set non zero variables to its default value
    MacCtx.NvmCtx->AckTimeoutRetriesCounter = 1;
 800deea:	4af5      	ldr	r2, [pc, #980]	; (800e2c0 <LoRaMacInitialization+0x464>)
 800deec:	238e      	movs	r3, #142	; 0x8e
 800deee:	00db      	lsls	r3, r3, #3
 800def0:	58d3      	ldr	r3, [r2, r3]
 800def2:	4af4      	ldr	r2, [pc, #976]	; (800e2c4 <LoRaMacInitialization+0x468>)
 800def4:	2101      	movs	r1, #1
 800def6:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->AckTimeoutRetries = 1;
 800def8:	4af1      	ldr	r2, [pc, #964]	; (800e2c0 <LoRaMacInitialization+0x464>)
 800defa:	238e      	movs	r3, #142	; 0x8e
 800defc:	00db      	lsls	r3, r3, #3
 800defe:	58d3      	ldr	r3, [r2, r3]
 800df00:	4af1      	ldr	r2, [pc, #964]	; (800e2c8 <LoRaMacInitialization+0x46c>)
 800df02:	2101      	movs	r1, #1
 800df04:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->Region = region;
 800df06:	4aee      	ldr	r2, [pc, #952]	; (800e2c0 <LoRaMacInitialization+0x464>)
 800df08:	238e      	movs	r3, #142	; 0x8e
 800df0a:	00db      	lsls	r3, r3, #3
 800df0c:	58d3      	ldr	r3, [r2, r3]
 800df0e:	1dfa      	adds	r2, r7, #7
 800df10:	7812      	ldrb	r2, [r2, #0]
 800df12:	701a      	strb	r2, [r3, #0]
    MacCtx.NvmCtx->DeviceClass = CLASS_A;
 800df14:	4aea      	ldr	r2, [pc, #936]	; (800e2c0 <LoRaMacInitialization+0x464>)
 800df16:	238e      	movs	r3, #142	; 0x8e
 800df18:	00db      	lsls	r3, r3, #3
 800df1a:	58d3      	ldr	r3, [r2, r3]
 800df1c:	22c8      	movs	r2, #200	; 0xc8
 800df1e:	2100      	movs	r1, #0
 800df20:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->RepeaterSupport = false;
 800df22:	4ae7      	ldr	r2, [pc, #924]	; (800e2c0 <LoRaMacInitialization+0x464>)
 800df24:	238e      	movs	r3, #142	; 0x8e
 800df26:	00db      	lsls	r3, r3, #3
 800df28:	58d2      	ldr	r2, [r2, r3]
 800df2a:	2316      	movs	r3, #22
 800df2c:	33ff      	adds	r3, #255	; 0xff
 800df2e:	2100      	movs	r1, #0
 800df30:	54d1      	strb	r1, [r2, r3]

    Version_t lrWanVersion;
    lrWanVersion.Fields.Major    = 1;
 800df32:	211c      	movs	r1, #28
 800df34:	187b      	adds	r3, r7, r1
 800df36:	2201      	movs	r2, #1
 800df38:	70da      	strb	r2, [r3, #3]
    lrWanVersion.Fields.Minor    = 0;
 800df3a:	187b      	adds	r3, r7, r1
 800df3c:	2200      	movs	r2, #0
 800df3e:	709a      	strb	r2, [r3, #2]
    lrWanVersion.Fields.Revision = 3;
 800df40:	187b      	adds	r3, r7, r1
 800df42:	2203      	movs	r2, #3
 800df44:	705a      	strb	r2, [r3, #1]
    lrWanVersion.Fields.Rfu      = 0;
 800df46:	187b      	adds	r3, r7, r1
 800df48:	2200      	movs	r2, #0
 800df4a:	701a      	strb	r2, [r3, #0]
    MacCtx.NvmCtx->Version = lrWanVersion;
 800df4c:	4adc      	ldr	r2, [pc, #880]	; (800e2c0 <LoRaMacInitialization+0x464>)
 800df4e:	238e      	movs	r3, #142	; 0x8e
 800df50:	00db      	lsls	r3, r3, #3
 800df52:	58d2      	ldr	r2, [r2, r3]
 800df54:	2388      	movs	r3, #136	; 0x88
 800df56:	009b      	lsls	r3, r3, #2
 800df58:	69f9      	ldr	r1, [r7, #28]
 800df5a:	50d1      	str	r1, [r2, r3]

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800df5c:	244c      	movs	r4, #76	; 0x4c
 800df5e:	193b      	adds	r3, r7, r4
 800df60:	220e      	movs	r2, #14
 800df62:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800df64:	4ad6      	ldr	r2, [pc, #856]	; (800e2c0 <LoRaMacInitialization+0x464>)
 800df66:	238e      	movs	r3, #142	; 0x8e
 800df68:	00db      	lsls	r3, r3, #3
 800df6a:	58d3      	ldr	r3, [r2, r3]
 800df6c:	781b      	ldrb	r3, [r3, #0]
 800df6e:	193a      	adds	r2, r7, r4
 800df70:	0011      	movs	r1, r2
 800df72:	0018      	movs	r0, r3
 800df74:	f004 fdf7 	bl	8012b66 <RegionGetPhyParam>
 800df78:	0003      	movs	r3, r0
 800df7a:	001a      	movs	r2, r3
 800df7c:	2548      	movs	r5, #72	; 0x48
 800df7e:	197b      	adds	r3, r7, r5
 800df80:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->DutyCycleOn = ( bool ) phyParam.Value;
 800df82:	197b      	adds	r3, r7, r5
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	49ce      	ldr	r1, [pc, #824]	; (800e2c0 <LoRaMacInitialization+0x464>)
 800df88:	228e      	movs	r2, #142	; 0x8e
 800df8a:	00d2      	lsls	r2, r2, #3
 800df8c:	588a      	ldr	r2, [r1, r2]
 800df8e:	1e59      	subs	r1, r3, #1
 800df90:	418b      	sbcs	r3, r1
 800df92:	b2d9      	uxtb	r1, r3
 800df94:	2389      	movs	r3, #137	; 0x89
 800df96:	005b      	lsls	r3, r3, #1
 800df98:	54d1      	strb	r1, [r2, r3]

    getPhy.Attribute = PHY_DEF_TX_POWER;
 800df9a:	193b      	adds	r3, r7, r4
 800df9c:	2209      	movs	r2, #9
 800df9e:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800dfa0:	4ac7      	ldr	r2, [pc, #796]	; (800e2c0 <LoRaMacInitialization+0x464>)
 800dfa2:	238e      	movs	r3, #142	; 0x8e
 800dfa4:	00db      	lsls	r3, r3, #3
 800dfa6:	58d3      	ldr	r3, [r2, r3]
 800dfa8:	781b      	ldrb	r3, [r3, #0]
 800dfaa:	193a      	adds	r2, r7, r4
 800dfac:	0011      	movs	r1, r2
 800dfae:	0018      	movs	r0, r3
 800dfb0:	f004 fdd9 	bl	8012b66 <RegionGetPhyParam>
 800dfb4:	0003      	movs	r3, r0
 800dfb6:	001a      	movs	r2, r3
 800dfb8:	197b      	adds	r3, r7, r5
 800dfba:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower = phyParam.Value;
 800dfbc:	197b      	adds	r3, r7, r5
 800dfbe:	6819      	ldr	r1, [r3, #0]
 800dfc0:	4abf      	ldr	r2, [pc, #764]	; (800e2c0 <LoRaMacInitialization+0x464>)
 800dfc2:	238e      	movs	r3, #142	; 0x8e
 800dfc4:	00db      	lsls	r3, r3, #3
 800dfc6:	58d3      	ldr	r3, [r2, r3]
 800dfc8:	b24a      	sxtb	r2, r1
 800dfca:	711a      	strb	r2, [r3, #4]

    getPhy.Attribute = PHY_DEF_TX_DR;
 800dfcc:	193b      	adds	r3, r7, r4
 800dfce:	2205      	movs	r2, #5
 800dfd0:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800dfd2:	4abb      	ldr	r2, [pc, #748]	; (800e2c0 <LoRaMacInitialization+0x464>)
 800dfd4:	238e      	movs	r3, #142	; 0x8e
 800dfd6:	00db      	lsls	r3, r3, #3
 800dfd8:	58d3      	ldr	r3, [r2, r3]
 800dfda:	781b      	ldrb	r3, [r3, #0]
 800dfdc:	193a      	adds	r2, r7, r4
 800dfde:	0011      	movs	r1, r2
 800dfe0:	0018      	movs	r0, r3
 800dfe2:	f004 fdc0 	bl	8012b66 <RegionGetPhyParam>
 800dfe6:	0003      	movs	r3, r0
 800dfe8:	001a      	movs	r2, r3
 800dfea:	197b      	adds	r3, r7, r5
 800dfec:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate = phyParam.Value;
 800dfee:	197b      	adds	r3, r7, r5
 800dff0:	6819      	ldr	r1, [r3, #0]
 800dff2:	4ab3      	ldr	r2, [pc, #716]	; (800e2c0 <LoRaMacInitialization+0x464>)
 800dff4:	238e      	movs	r3, #142	; 0x8e
 800dff6:	00db      	lsls	r3, r3, #3
 800dff8:	58d3      	ldr	r3, [r2, r3]
 800dffa:	b24a      	sxtb	r2, r1
 800dffc:	715a      	strb	r2, [r3, #5]

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 800dffe:	193b      	adds	r3, r7, r4
 800e000:	220f      	movs	r2, #15
 800e002:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800e004:	4aae      	ldr	r2, [pc, #696]	; (800e2c0 <LoRaMacInitialization+0x464>)
 800e006:	238e      	movs	r3, #142	; 0x8e
 800e008:	00db      	lsls	r3, r3, #3
 800e00a:	58d3      	ldr	r3, [r2, r3]
 800e00c:	781b      	ldrb	r3, [r3, #0]
 800e00e:	193a      	adds	r2, r7, r4
 800e010:	0011      	movs	r1, r2
 800e012:	0018      	movs	r0, r3
 800e014:	f004 fda7 	bl	8012b66 <RegionGetPhyParam>
 800e018:	0003      	movs	r3, r0
 800e01a:	001a      	movs	r2, r3
 800e01c:	197b      	adds	r3, r7, r5
 800e01e:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.MaxRxWindow = phyParam.Value;
 800e020:	4aa7      	ldr	r2, [pc, #668]	; (800e2c0 <LoRaMacInitialization+0x464>)
 800e022:	238e      	movs	r3, #142	; 0x8e
 800e024:	00db      	lsls	r3, r3, #3
 800e026:	58d3      	ldr	r3, [r2, r3]
 800e028:	197a      	adds	r2, r7, r5
 800e02a:	6812      	ldr	r2, [r2, #0]
 800e02c:	611a      	str	r2, [r3, #16]

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 800e02e:	193b      	adds	r3, r7, r4
 800e030:	2210      	movs	r2, #16
 800e032:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800e034:	4aa2      	ldr	r2, [pc, #648]	; (800e2c0 <LoRaMacInitialization+0x464>)
 800e036:	238e      	movs	r3, #142	; 0x8e
 800e038:	00db      	lsls	r3, r3, #3
 800e03a:	58d3      	ldr	r3, [r2, r3]
 800e03c:	781b      	ldrb	r3, [r3, #0]
 800e03e:	193a      	adds	r2, r7, r4
 800e040:	0011      	movs	r1, r2
 800e042:	0018      	movs	r0, r3
 800e044:	f004 fd8f 	bl	8012b66 <RegionGetPhyParam>
 800e048:	0003      	movs	r3, r0
 800e04a:	001a      	movs	r2, r3
 800e04c:	197b      	adds	r3, r7, r5
 800e04e:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 800e050:	4a9b      	ldr	r2, [pc, #620]	; (800e2c0 <LoRaMacInitialization+0x464>)
 800e052:	238e      	movs	r3, #142	; 0x8e
 800e054:	00db      	lsls	r3, r3, #3
 800e056:	58d3      	ldr	r3, [r2, r3]
 800e058:	197a      	adds	r2, r7, r5
 800e05a:	6812      	ldr	r2, [r2, #0]
 800e05c:	615a      	str	r2, [r3, #20]

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 800e05e:	193b      	adds	r3, r7, r4
 800e060:	2211      	movs	r2, #17
 800e062:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800e064:	4a96      	ldr	r2, [pc, #600]	; (800e2c0 <LoRaMacInitialization+0x464>)
 800e066:	238e      	movs	r3, #142	; 0x8e
 800e068:	00db      	lsls	r3, r3, #3
 800e06a:	58d3      	ldr	r3, [r2, r3]
 800e06c:	781b      	ldrb	r3, [r3, #0]
 800e06e:	193a      	adds	r2, r7, r4
 800e070:	0011      	movs	r1, r2
 800e072:	0018      	movs	r0, r3
 800e074:	f004 fd77 	bl	8012b66 <RegionGetPhyParam>
 800e078:	0003      	movs	r3, r0
 800e07a:	001a      	movs	r2, r3
 800e07c:	197b      	adds	r3, r7, r5
 800e07e:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 800e080:	4a8f      	ldr	r2, [pc, #572]	; (800e2c0 <LoRaMacInitialization+0x464>)
 800e082:	238e      	movs	r3, #142	; 0x8e
 800e084:	00db      	lsls	r3, r3, #3
 800e086:	58d3      	ldr	r3, [r2, r3]
 800e088:	197a      	adds	r2, r7, r5
 800e08a:	6812      	ldr	r2, [r2, #0]
 800e08c:	619a      	str	r2, [r3, #24]

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 800e08e:	193b      	adds	r3, r7, r4
 800e090:	2212      	movs	r2, #18
 800e092:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800e094:	4a8a      	ldr	r2, [pc, #552]	; (800e2c0 <LoRaMacInitialization+0x464>)
 800e096:	238e      	movs	r3, #142	; 0x8e
 800e098:	00db      	lsls	r3, r3, #3
 800e09a:	58d3      	ldr	r3, [r2, r3]
 800e09c:	781b      	ldrb	r3, [r3, #0]
 800e09e:	193a      	adds	r2, r7, r4
 800e0a0:	0011      	movs	r1, r2
 800e0a2:	0018      	movs	r0, r3
 800e0a4:	f004 fd5f 	bl	8012b66 <RegionGetPhyParam>
 800e0a8:	0003      	movs	r3, r0
 800e0aa:	001a      	movs	r2, r3
 800e0ac:	197b      	adds	r3, r7, r5
 800e0ae:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 800e0b0:	4a83      	ldr	r2, [pc, #524]	; (800e2c0 <LoRaMacInitialization+0x464>)
 800e0b2:	238e      	movs	r3, #142	; 0x8e
 800e0b4:	00db      	lsls	r3, r3, #3
 800e0b6:	58d3      	ldr	r3, [r2, r3]
 800e0b8:	197a      	adds	r2, r7, r5
 800e0ba:	6812      	ldr	r2, [r2, #0]
 800e0bc:	61da      	str	r2, [r3, #28]

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 800e0be:	193b      	adds	r3, r7, r4
 800e0c0:	2213      	movs	r2, #19
 800e0c2:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800e0c4:	4a7e      	ldr	r2, [pc, #504]	; (800e2c0 <LoRaMacInitialization+0x464>)
 800e0c6:	238e      	movs	r3, #142	; 0x8e
 800e0c8:	00db      	lsls	r3, r3, #3
 800e0ca:	58d3      	ldr	r3, [r2, r3]
 800e0cc:	781b      	ldrb	r3, [r3, #0]
 800e0ce:	193a      	adds	r2, r7, r4
 800e0d0:	0011      	movs	r1, r2
 800e0d2:	0018      	movs	r0, r3
 800e0d4:	f004 fd47 	bl	8012b66 <RegionGetPhyParam>
 800e0d8:	0003      	movs	r3, r0
 800e0da:	001a      	movs	r2, r3
 800e0dc:	197b      	adds	r3, r7, r5
 800e0de:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 800e0e0:	4a77      	ldr	r2, [pc, #476]	; (800e2c0 <LoRaMacInitialization+0x464>)
 800e0e2:	238e      	movs	r3, #142	; 0x8e
 800e0e4:	00db      	lsls	r3, r3, #3
 800e0e6:	58d3      	ldr	r3, [r2, r3]
 800e0e8:	197a      	adds	r2, r7, r5
 800e0ea:	6812      	ldr	r2, [r2, #0]
 800e0ec:	621a      	str	r2, [r3, #32]

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 800e0ee:	193b      	adds	r3, r7, r4
 800e0f0:	2216      	movs	r2, #22
 800e0f2:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800e0f4:	4a72      	ldr	r2, [pc, #456]	; (800e2c0 <LoRaMacInitialization+0x464>)
 800e0f6:	238e      	movs	r3, #142	; 0x8e
 800e0f8:	00db      	lsls	r3, r3, #3
 800e0fa:	58d3      	ldr	r3, [r2, r3]
 800e0fc:	781b      	ldrb	r3, [r3, #0]
 800e0fe:	193a      	adds	r2, r7, r4
 800e100:	0011      	movs	r1, r2
 800e102:	0018      	movs	r0, r3
 800e104:	f004 fd2f 	bl	8012b66 <RegionGetPhyParam>
 800e108:	0003      	movs	r3, r0
 800e10a:	001a      	movs	r2, r3
 800e10c:	197b      	adds	r3, r7, r5
 800e10e:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 800e110:	197b      	adds	r3, r7, r5
 800e112:	6819      	ldr	r1, [r3, #0]
 800e114:	4a6a      	ldr	r2, [pc, #424]	; (800e2c0 <LoRaMacInitialization+0x464>)
 800e116:	238e      	movs	r3, #142	; 0x8e
 800e118:	00db      	lsls	r3, r3, #3
 800e11a:	58d3      	ldr	r3, [r2, r3]
 800e11c:	b2c9      	uxtb	r1, r1
 800e11e:	2225      	movs	r2, #37	; 0x25
 800e120:	5499      	strb	r1, [r3, r2]

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 800e122:	193b      	adds	r3, r7, r4
 800e124:	2217      	movs	r2, #23
 800e126:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800e128:	4a65      	ldr	r2, [pc, #404]	; (800e2c0 <LoRaMacInitialization+0x464>)
 800e12a:	238e      	movs	r3, #142	; 0x8e
 800e12c:	00db      	lsls	r3, r3, #3
 800e12e:	58d3      	ldr	r3, [r2, r3]
 800e130:	781b      	ldrb	r3, [r3, #0]
 800e132:	193a      	adds	r2, r7, r4
 800e134:	0011      	movs	r1, r2
 800e136:	0018      	movs	r0, r3
 800e138:	f004 fd15 	bl	8012b66 <RegionGetPhyParam>
 800e13c:	0003      	movs	r3, r0
 800e13e:	001a      	movs	r2, r3
 800e140:	197b      	adds	r3, r7, r5
 800e142:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 800e144:	4a5e      	ldr	r2, [pc, #376]	; (800e2c0 <LoRaMacInitialization+0x464>)
 800e146:	238e      	movs	r3, #142	; 0x8e
 800e148:	00db      	lsls	r3, r3, #3
 800e14a:	58d3      	ldr	r3, [r2, r3]
 800e14c:	197a      	adds	r2, r7, r5
 800e14e:	6812      	ldr	r2, [r2, #0]
 800e150:	629a      	str	r2, [r3, #40]	; 0x28

    getPhy.Attribute = PHY_DEF_RX2_DR;
 800e152:	193b      	adds	r3, r7, r4
 800e154:	2218      	movs	r2, #24
 800e156:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800e158:	4a59      	ldr	r2, [pc, #356]	; (800e2c0 <LoRaMacInitialization+0x464>)
 800e15a:	238e      	movs	r3, #142	; 0x8e
 800e15c:	00db      	lsls	r3, r3, #3
 800e15e:	58d3      	ldr	r3, [r2, r3]
 800e160:	781b      	ldrb	r3, [r3, #0]
 800e162:	193a      	adds	r2, r7, r4
 800e164:	0011      	movs	r1, r2
 800e166:	0018      	movs	r0, r3
 800e168:	f004 fcfd 	bl	8012b66 <RegionGetPhyParam>
 800e16c:	0003      	movs	r3, r0
 800e16e:	001a      	movs	r2, r3
 800e170:	197b      	adds	r3, r7, r5
 800e172:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 800e174:	197b      	adds	r3, r7, r5
 800e176:	6819      	ldr	r1, [r3, #0]
 800e178:	4a51      	ldr	r2, [pc, #324]	; (800e2c0 <LoRaMacInitialization+0x464>)
 800e17a:	238e      	movs	r3, #142	; 0x8e
 800e17c:	00db      	lsls	r3, r3, #3
 800e17e:	58d3      	ldr	r3, [r2, r3]
 800e180:	b2c9      	uxtb	r1, r1
 800e182:	222c      	movs	r2, #44	; 0x2c
 800e184:	5499      	strb	r1, [r3, r2]

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 800e186:	193b      	adds	r3, r7, r4
 800e188:	221d      	movs	r2, #29
 800e18a:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800e18c:	4a4c      	ldr	r2, [pc, #304]	; (800e2c0 <LoRaMacInitialization+0x464>)
 800e18e:	238e      	movs	r3, #142	; 0x8e
 800e190:	00db      	lsls	r3, r3, #3
 800e192:	58d3      	ldr	r3, [r2, r3]
 800e194:	781b      	ldrb	r3, [r3, #0]
 800e196:	193a      	adds	r2, r7, r4
 800e198:	0011      	movs	r1, r2
 800e19a:	0018      	movs	r0, r3
 800e19c:	f004 fce3 	bl	8012b66 <RegionGetPhyParam>
 800e1a0:	0003      	movs	r3, r0
 800e1a2:	001a      	movs	r2, r3
 800e1a4:	197b      	adds	r3, r7, r5
 800e1a6:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 800e1a8:	197b      	adds	r3, r7, r5
 800e1aa:	6819      	ldr	r1, [r3, #0]
 800e1ac:	4a44      	ldr	r2, [pc, #272]	; (800e2c0 <LoRaMacInitialization+0x464>)
 800e1ae:	238e      	movs	r3, #142	; 0x8e
 800e1b0:	00db      	lsls	r3, r3, #3
 800e1b2:	58d3      	ldr	r3, [r2, r3]
 800e1b4:	b2c9      	uxtb	r1, r1
 800e1b6:	2230      	movs	r2, #48	; 0x30
 800e1b8:	5499      	strb	r1, [r3, r2]

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 800e1ba:	193b      	adds	r3, r7, r4
 800e1bc:	221e      	movs	r2, #30
 800e1be:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800e1c0:	4a3f      	ldr	r2, [pc, #252]	; (800e2c0 <LoRaMacInitialization+0x464>)
 800e1c2:	238e      	movs	r3, #142	; 0x8e
 800e1c4:	00db      	lsls	r3, r3, #3
 800e1c6:	58d3      	ldr	r3, [r2, r3]
 800e1c8:	781b      	ldrb	r3, [r3, #0]
 800e1ca:	193a      	adds	r2, r7, r4
 800e1cc:	0011      	movs	r1, r2
 800e1ce:	0018      	movs	r0, r3
 800e1d0:	f004 fcc9 	bl	8012b66 <RegionGetPhyParam>
 800e1d4:	0003      	movs	r3, r0
 800e1d6:	001a      	movs	r2, r3
 800e1d8:	197b      	adds	r3, r7, r5
 800e1da:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 800e1dc:	197b      	adds	r3, r7, r5
 800e1de:	6819      	ldr	r1, [r3, #0]
 800e1e0:	4a37      	ldr	r2, [pc, #220]	; (800e2c0 <LoRaMacInitialization+0x464>)
 800e1e2:	238e      	movs	r3, #142	; 0x8e
 800e1e4:	00db      	lsls	r3, r3, #3
 800e1e6:	58d3      	ldr	r3, [r2, r3]
 800e1e8:	b2c9      	uxtb	r1, r1
 800e1ea:	2231      	movs	r2, #49	; 0x31
 800e1ec:	5499      	strb	r1, [r3, r2]

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 800e1ee:	193b      	adds	r3, r7, r4
 800e1f0:	221f      	movs	r2, #31
 800e1f2:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800e1f4:	4a32      	ldr	r2, [pc, #200]	; (800e2c0 <LoRaMacInitialization+0x464>)
 800e1f6:	238e      	movs	r3, #142	; 0x8e
 800e1f8:	00db      	lsls	r3, r3, #3
 800e1fa:	58d3      	ldr	r3, [r2, r3]
 800e1fc:	781b      	ldrb	r3, [r3, #0]
 800e1fe:	193a      	adds	r2, r7, r4
 800e200:	0011      	movs	r1, r2
 800e202:	0018      	movs	r0, r3
 800e204:	f004 fcaf 	bl	8012b66 <RegionGetPhyParam>
 800e208:	0003      	movs	r3, r0
 800e20a:	001a      	movs	r2, r3
 800e20c:	197b      	adds	r3, r7, r5
 800e20e:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.MaxEirp = phyParam.fValue;
 800e210:	4a2b      	ldr	r2, [pc, #172]	; (800e2c0 <LoRaMacInitialization+0x464>)
 800e212:	238e      	movs	r3, #142	; 0x8e
 800e214:	00db      	lsls	r3, r3, #3
 800e216:	58d3      	ldr	r3, [r2, r3]
 800e218:	197a      	adds	r2, r7, r5
 800e21a:	6812      	ldr	r2, [r2, #0]
 800e21c:	635a      	str	r2, [r3, #52]	; 0x34

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 800e21e:	193b      	adds	r3, r7, r4
 800e220:	2220      	movs	r2, #32
 800e222:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800e224:	4a26      	ldr	r2, [pc, #152]	; (800e2c0 <LoRaMacInitialization+0x464>)
 800e226:	238e      	movs	r3, #142	; 0x8e
 800e228:	00db      	lsls	r3, r3, #3
 800e22a:	58d3      	ldr	r3, [r2, r3]
 800e22c:	781b      	ldrb	r3, [r3, #0]
 800e22e:	193a      	adds	r2, r7, r4
 800e230:	0011      	movs	r1, r2
 800e232:	0018      	movs	r0, r3
 800e234:	f004 fc97 	bl	8012b66 <RegionGetPhyParam>
 800e238:	0003      	movs	r3, r0
 800e23a:	001a      	movs	r2, r3
 800e23c:	197b      	adds	r3, r7, r5
 800e23e:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.AntennaGain = phyParam.fValue;
 800e240:	4a1f      	ldr	r2, [pc, #124]	; (800e2c0 <LoRaMacInitialization+0x464>)
 800e242:	238e      	movs	r3, #142	; 0x8e
 800e244:	00db      	lsls	r3, r3, #3
 800e246:	58d3      	ldr	r3, [r2, r3]
 800e248:	197a      	adds	r2, r7, r5
 800e24a:	6812      	ldr	r2, [r2, #0]
 800e24c:	639a      	str	r2, [r3, #56]	; 0x38

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 800e24e:	193b      	adds	r3, r7, r4
 800e250:	220a      	movs	r2, #10
 800e252:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800e254:	4a1a      	ldr	r2, [pc, #104]	; (800e2c0 <LoRaMacInitialization+0x464>)
 800e256:	238e      	movs	r3, #142	; 0x8e
 800e258:	00db      	lsls	r3, r3, #3
 800e25a:	58d3      	ldr	r3, [r2, r3]
 800e25c:	781b      	ldrb	r3, [r3, #0]
 800e25e:	193a      	adds	r2, r7, r4
 800e260:	0011      	movs	r1, r2
 800e262:	0018      	movs	r0, r3
 800e264:	f004 fc7f 	bl	8012b66 <RegionGetPhyParam>
 800e268:	0003      	movs	r3, r0
 800e26a:	001a      	movs	r2, r3
 800e26c:	197b      	adds	r3, r7, r5
 800e26e:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->AdrAckLimit = phyParam.Value;
 800e270:	197b      	adds	r3, r7, r5
 800e272:	6819      	ldr	r1, [r3, #0]
 800e274:	4a12      	ldr	r2, [pc, #72]	; (800e2c0 <LoRaMacInitialization+0x464>)
 800e276:	238e      	movs	r3, #142	; 0x8e
 800e278:	00db      	lsls	r3, r3, #3
 800e27a:	58d3      	ldr	r3, [r2, r3]
 800e27c:	b289      	uxth	r1, r1
 800e27e:	22d0      	movs	r2, #208	; 0xd0
 800e280:	5299      	strh	r1, [r3, r2]

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 800e282:	193b      	adds	r3, r7, r4
 800e284:	220b      	movs	r2, #11
 800e286:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800e288:	4a0d      	ldr	r2, [pc, #52]	; (800e2c0 <LoRaMacInitialization+0x464>)
 800e28a:	238e      	movs	r3, #142	; 0x8e
 800e28c:	00db      	lsls	r3, r3, #3
 800e28e:	58d3      	ldr	r3, [r2, r3]
 800e290:	781b      	ldrb	r3, [r3, #0]
 800e292:	193a      	adds	r2, r7, r4
 800e294:	0011      	movs	r1, r2
 800e296:	0018      	movs	r0, r3
 800e298:	f004 fc65 	bl	8012b66 <RegionGetPhyParam>
 800e29c:	0003      	movs	r3, r0
 800e29e:	001a      	movs	r2, r3
 800e2a0:	197b      	adds	r3, r7, r5
 800e2a2:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->AdrAckDelay = phyParam.Value;
 800e2a4:	197b      	adds	r3, r7, r5
 800e2a6:	6819      	ldr	r1, [r3, #0]
 800e2a8:	4a05      	ldr	r2, [pc, #20]	; (800e2c0 <LoRaMacInitialization+0x464>)
 800e2aa:	238e      	movs	r3, #142	; 0x8e
 800e2ac:	00db      	lsls	r3, r3, #3
 800e2ae:	58d3      	ldr	r3, [r2, r3]
 800e2b0:	b289      	uxth	r1, r1
 800e2b2:	e00b      	b.n	800e2cc <LoRaMacInitialization+0x470>
 800e2b4:	0800de05 	.word	0x0800de05
 800e2b8:	20000b80 	.word	0x20000b80
 800e2bc:	00000474 	.word	0x00000474
 800e2c0:	2000070c 	.word	0x2000070c
 800e2c4:	00000217 	.word	0x00000217
 800e2c8:	00000216 	.word	0x00000216
 800e2cc:	22d2      	movs	r2, #210	; 0xd2
 800e2ce:	5299      	strh	r1, [r3, r2]

    // Init parameters which are not set in function ResetMacParameters
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsNbTrans = 1;
 800e2d0:	4ab5      	ldr	r2, [pc, #724]	; (800e5a8 <LoRaMacInitialization+0x74c>)
 800e2d2:	238e      	movs	r3, #142	; 0x8e
 800e2d4:	00db      	lsls	r3, r3, #3
 800e2d6:	58d3      	ldr	r3, [r2, r3]
 800e2d8:	2224      	movs	r2, #36	; 0x24
 800e2da:	2101      	movs	r1, #1
 800e2dc:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError = 20;
 800e2de:	4ab2      	ldr	r2, [pc, #712]	; (800e5a8 <LoRaMacInitialization+0x74c>)
 800e2e0:	238e      	movs	r3, #142	; 0x8e
 800e2e2:	00db      	lsls	r3, r3, #3
 800e2e4:	58d3      	ldr	r3, [r2, r3]
 800e2e6:	2214      	movs	r2, #20
 800e2e8:	609a      	str	r2, [r3, #8]
    MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols = 6;
 800e2ea:	4aaf      	ldr	r2, [pc, #700]	; (800e5a8 <LoRaMacInitialization+0x74c>)
 800e2ec:	238e      	movs	r3, #142	; 0x8e
 800e2ee:	00db      	lsls	r3, r3, #3
 800e2f0:	58d3      	ldr	r3, [r2, r3]
 800e2f2:	2206      	movs	r2, #6
 800e2f4:	731a      	strb	r2, [r3, #12]

    MacCtx.NvmCtx->MacParams.SystemMaxRxError = MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError;
 800e2f6:	4aac      	ldr	r2, [pc, #688]	; (800e5a8 <LoRaMacInitialization+0x74c>)
 800e2f8:	238e      	movs	r3, #142	; 0x8e
 800e2fa:	00db      	lsls	r3, r3, #3
 800e2fc:	58d3      	ldr	r3, [r2, r3]
 800e2fe:	49aa      	ldr	r1, [pc, #680]	; (800e5a8 <LoRaMacInitialization+0x74c>)
 800e300:	228e      	movs	r2, #142	; 0x8e
 800e302:	00d2      	lsls	r2, r2, #3
 800e304:	588a      	ldr	r2, [r1, r2]
 800e306:	689b      	ldr	r3, [r3, #8]
 800e308:	21d8      	movs	r1, #216	; 0xd8
 800e30a:	5053      	str	r3, [r2, r1]
    MacCtx.NvmCtx->MacParams.MinRxSymbols = MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols;
 800e30c:	4aa6      	ldr	r2, [pc, #664]	; (800e5a8 <LoRaMacInitialization+0x74c>)
 800e30e:	238e      	movs	r3, #142	; 0x8e
 800e310:	00db      	lsls	r3, r3, #3
 800e312:	58d2      	ldr	r2, [r2, r3]
 800e314:	49a4      	ldr	r1, [pc, #656]	; (800e5a8 <LoRaMacInitialization+0x74c>)
 800e316:	238e      	movs	r3, #142	; 0x8e
 800e318:	00db      	lsls	r3, r3, #3
 800e31a:	58cb      	ldr	r3, [r1, r3]
 800e31c:	7b11      	ldrb	r1, [r2, #12]
 800e31e:	22dc      	movs	r2, #220	; 0xdc
 800e320:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParams.MaxRxWindow = MacCtx.NvmCtx->MacParamsDefaults.MaxRxWindow;
 800e322:	4aa1      	ldr	r2, [pc, #644]	; (800e5a8 <LoRaMacInitialization+0x74c>)
 800e324:	238e      	movs	r3, #142	; 0x8e
 800e326:	00db      	lsls	r3, r3, #3
 800e328:	58d3      	ldr	r3, [r2, r3]
 800e32a:	499f      	ldr	r1, [pc, #636]	; (800e5a8 <LoRaMacInitialization+0x74c>)
 800e32c:	228e      	movs	r2, #142	; 0x8e
 800e32e:	00d2      	lsls	r2, r2, #3
 800e330:	588a      	ldr	r2, [r1, r2]
 800e332:	691b      	ldr	r3, [r3, #16]
 800e334:	21e0      	movs	r1, #224	; 0xe0
 800e336:	5053      	str	r3, [r2, r1]
    MacCtx.NvmCtx->MacParams.ReceiveDelay1 = MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay1;
 800e338:	4a9b      	ldr	r2, [pc, #620]	; (800e5a8 <LoRaMacInitialization+0x74c>)
 800e33a:	238e      	movs	r3, #142	; 0x8e
 800e33c:	00db      	lsls	r3, r3, #3
 800e33e:	58d3      	ldr	r3, [r2, r3]
 800e340:	4999      	ldr	r1, [pc, #612]	; (800e5a8 <LoRaMacInitialization+0x74c>)
 800e342:	228e      	movs	r2, #142	; 0x8e
 800e344:	00d2      	lsls	r2, r2, #3
 800e346:	588a      	ldr	r2, [r1, r2]
 800e348:	695b      	ldr	r3, [r3, #20]
 800e34a:	21e4      	movs	r1, #228	; 0xe4
 800e34c:	5053      	str	r3, [r2, r1]
    MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay2;
 800e34e:	4a96      	ldr	r2, [pc, #600]	; (800e5a8 <LoRaMacInitialization+0x74c>)
 800e350:	238e      	movs	r3, #142	; 0x8e
 800e352:	00db      	lsls	r3, r3, #3
 800e354:	58d3      	ldr	r3, [r2, r3]
 800e356:	4994      	ldr	r1, [pc, #592]	; (800e5a8 <LoRaMacInitialization+0x74c>)
 800e358:	228e      	movs	r2, #142	; 0x8e
 800e35a:	00d2      	lsls	r2, r2, #3
 800e35c:	588a      	ldr	r2, [r1, r2]
 800e35e:	699b      	ldr	r3, [r3, #24]
 800e360:	21e8      	movs	r1, #232	; 0xe8
 800e362:	5053      	str	r3, [r2, r1]
    MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 = MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay1;
 800e364:	4a90      	ldr	r2, [pc, #576]	; (800e5a8 <LoRaMacInitialization+0x74c>)
 800e366:	238e      	movs	r3, #142	; 0x8e
 800e368:	00db      	lsls	r3, r3, #3
 800e36a:	58d3      	ldr	r3, [r2, r3]
 800e36c:	498e      	ldr	r1, [pc, #568]	; (800e5a8 <LoRaMacInitialization+0x74c>)
 800e36e:	228e      	movs	r2, #142	; 0x8e
 800e370:	00d2      	lsls	r2, r2, #3
 800e372:	588a      	ldr	r2, [r1, r2]
 800e374:	69db      	ldr	r3, [r3, #28]
 800e376:	21ec      	movs	r1, #236	; 0xec
 800e378:	5053      	str	r3, [r2, r1]
    MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 = MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay2;
 800e37a:	4a8b      	ldr	r2, [pc, #556]	; (800e5a8 <LoRaMacInitialization+0x74c>)
 800e37c:	238e      	movs	r3, #142	; 0x8e
 800e37e:	00db      	lsls	r3, r3, #3
 800e380:	58d3      	ldr	r3, [r2, r3]
 800e382:	4989      	ldr	r1, [pc, #548]	; (800e5a8 <LoRaMacInitialization+0x74c>)
 800e384:	228e      	movs	r2, #142	; 0x8e
 800e386:	00d2      	lsls	r2, r2, #3
 800e388:	588a      	ldr	r2, [r1, r2]
 800e38a:	6a1b      	ldr	r3, [r3, #32]
 800e38c:	21f0      	movs	r1, #240	; 0xf0
 800e38e:	5053      	str	r3, [r2, r1]
    MacCtx.NvmCtx->MacParams.ChannelsNbTrans = MacCtx.NvmCtx->MacParamsDefaults.ChannelsNbTrans;
 800e390:	4a85      	ldr	r2, [pc, #532]	; (800e5a8 <LoRaMacInitialization+0x74c>)
 800e392:	238e      	movs	r3, #142	; 0x8e
 800e394:	00db      	lsls	r3, r3, #3
 800e396:	58d2      	ldr	r2, [r2, r3]
 800e398:	4983      	ldr	r1, [pc, #524]	; (800e5a8 <LoRaMacInitialization+0x74c>)
 800e39a:	238e      	movs	r3, #142	; 0x8e
 800e39c:	00db      	lsls	r3, r3, #3
 800e39e:	58cb      	ldr	r3, [r1, r3]
 800e3a0:	2124      	movs	r1, #36	; 0x24
 800e3a2:	5c51      	ldrb	r1, [r2, r1]
 800e3a4:	22f4      	movs	r2, #244	; 0xf4
 800e3a6:	5499      	strb	r1, [r3, r2]

    ResetMacParameters( );
 800e3a8:	f7fe fec0 	bl	800d12c <ResetMacParameters>

    MacCtx.NvmCtx->PublicNetwork = true;
 800e3ac:	4a7e      	ldr	r2, [pc, #504]	; (800e5a8 <LoRaMacInitialization+0x74c>)
 800e3ae:	238e      	movs	r3, #142	; 0x8e
 800e3b0:	00db      	lsls	r3, r3, #3
 800e3b2:	58d3      	ldr	r3, [r2, r3]
 800e3b4:	22c9      	movs	r2, #201	; 0xc9
 800e3b6:	2101      	movs	r1, #1
 800e3b8:	5499      	strb	r1, [r3, r2]

    MacCtx.MacPrimitives = primitives;
 800e3ba:	4a7b      	ldr	r2, [pc, #492]	; (800e5a8 <LoRaMacInitialization+0x74c>)
 800e3bc:	23d6      	movs	r3, #214	; 0xd6
 800e3be:	009b      	lsls	r3, r3, #2
 800e3c0:	68f9      	ldr	r1, [r7, #12]
 800e3c2:	50d1      	str	r1, [r2, r3]
    MacCtx.MacCallbacks = callbacks;
 800e3c4:	4a78      	ldr	r2, [pc, #480]	; (800e5a8 <LoRaMacInitialization+0x74c>)
 800e3c6:	23d7      	movs	r3, #215	; 0xd7
 800e3c8:	009b      	lsls	r3, r3, #2
 800e3ca:	68b9      	ldr	r1, [r7, #8]
 800e3cc:	50d1      	str	r1, [r2, r3]
    MacCtx.MacFlags.Value = 0;
 800e3ce:	4b76      	ldr	r3, [pc, #472]	; (800e5a8 <LoRaMacInitialization+0x74c>)
 800e3d0:	4a76      	ldr	r2, [pc, #472]	; (800e5ac <LoRaMacInitialization+0x750>)
 800e3d2:	2100      	movs	r1, #0
 800e3d4:	5499      	strb	r1, [r3, r2]
    MacCtx.MacState = LORAMAC_STOPPED;
 800e3d6:	4a74      	ldr	r2, [pc, #464]	; (800e5a8 <LoRaMacInitialization+0x74c>)
 800e3d8:	23d5      	movs	r3, #213	; 0xd5
 800e3da:	009b      	lsls	r3, r3, #2
 800e3dc:	2101      	movs	r1, #1
 800e3de:	50d1      	str	r1, [r2, r3]

    // Reset duty cycle times
    MacCtx.AggregatedLastTxDoneTime = 0;
 800e3e0:	4a71      	ldr	r2, [pc, #452]	; (800e5a8 <LoRaMacInitialization+0x74c>)
 800e3e2:	23d0      	movs	r3, #208	; 0xd0
 800e3e4:	009b      	lsls	r3, r3, #2
 800e3e6:	2100      	movs	r1, #0
 800e3e8:	50d1      	str	r1, [r2, r3]
    MacCtx.AggregatedTimeOff = 0;
 800e3ea:	4a6f      	ldr	r2, [pc, #444]	; (800e5a8 <LoRaMacInitialization+0x74c>)
 800e3ec:	23d1      	movs	r3, #209	; 0xd1
 800e3ee:	009b      	lsls	r3, r3, #2
 800e3f0:	2100      	movs	r1, #0
 800e3f2:	50d1      	str	r1, [r2, r3]

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 800e3f4:	4a6e      	ldr	r2, [pc, #440]	; (800e5b0 <LoRaMacInitialization+0x754>)
 800e3f6:	4b6f      	ldr	r3, [pc, #444]	; (800e5b4 <LoRaMacInitialization+0x758>)
 800e3f8:	0011      	movs	r1, r2
 800e3fa:	0018      	movs	r0, r3
 800e3fc:	f007 f840 	bl	8015480 <TimerInit>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 800e400:	4a6d      	ldr	r2, [pc, #436]	; (800e5b8 <LoRaMacInitialization+0x75c>)
 800e402:	4b6e      	ldr	r3, [pc, #440]	; (800e5bc <LoRaMacInitialization+0x760>)
 800e404:	0011      	movs	r1, r2
 800e406:	0018      	movs	r0, r3
 800e408:	f007 f83a 	bl	8015480 <TimerInit>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 800e40c:	4a6c      	ldr	r2, [pc, #432]	; (800e5c0 <LoRaMacInitialization+0x764>)
 800e40e:	4b6d      	ldr	r3, [pc, #436]	; (800e5c4 <LoRaMacInitialization+0x768>)
 800e410:	0011      	movs	r1, r2
 800e412:	0018      	movs	r0, r3
 800e414:	f007 f834 	bl	8015480 <TimerInit>
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
 800e418:	4a6b      	ldr	r2, [pc, #428]	; (800e5c8 <LoRaMacInitialization+0x76c>)
 800e41a:	4b6c      	ldr	r3, [pc, #432]	; (800e5cc <LoRaMacInitialization+0x770>)
 800e41c:	0011      	movs	r1, r2
 800e41e:	0018      	movs	r0, r3
 800e420:	f007 f82e 	bl	8015480 <TimerInit>

    // Store the current initialization time
    MacCtx.InitializationTime = TimerGetCurrentTime( );
 800e424:	f007 f906 	bl	8015634 <TimerGetCurrentTime>
 800e428:	0001      	movs	r1, r0
 800e42a:	4a5f      	ldr	r2, [pc, #380]	; (800e5a8 <LoRaMacInitialization+0x74c>)
 800e42c:	23d2      	movs	r3, #210	; 0xd2
 800e42e:	009b      	lsls	r3, r3, #2
 800e430:	50d1      	str	r1, [r2, r3]

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 800e432:	4a5d      	ldr	r2, [pc, #372]	; (800e5a8 <LoRaMacInitialization+0x74c>)
 800e434:	23d8      	movs	r3, #216	; 0xd8
 800e436:	009b      	lsls	r3, r3, #2
 800e438:	4965      	ldr	r1, [pc, #404]	; (800e5d0 <LoRaMacInitialization+0x774>)
 800e43a:	50d1      	str	r1, [r2, r3]
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 800e43c:	4a5a      	ldr	r2, [pc, #360]	; (800e5a8 <LoRaMacInitialization+0x74c>)
 800e43e:	23da      	movs	r3, #218	; 0xda
 800e440:	009b      	lsls	r3, r3, #2
 800e442:	4964      	ldr	r1, [pc, #400]	; (800e5d4 <LoRaMacInitialization+0x778>)
 800e444:	50d1      	str	r1, [r2, r3]
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 800e446:	4a58      	ldr	r2, [pc, #352]	; (800e5a8 <LoRaMacInitialization+0x74c>)
 800e448:	23dc      	movs	r3, #220	; 0xdc
 800e44a:	009b      	lsls	r3, r3, #2
 800e44c:	4962      	ldr	r1, [pc, #392]	; (800e5d8 <LoRaMacInitialization+0x77c>)
 800e44e:	50d1      	str	r1, [r2, r3]
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 800e450:	4a55      	ldr	r2, [pc, #340]	; (800e5a8 <LoRaMacInitialization+0x74c>)
 800e452:	23d9      	movs	r3, #217	; 0xd9
 800e454:	009b      	lsls	r3, r3, #2
 800e456:	4961      	ldr	r1, [pc, #388]	; (800e5dc <LoRaMacInitialization+0x780>)
 800e458:	50d1      	str	r1, [r2, r3]
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 800e45a:	4a53      	ldr	r2, [pc, #332]	; (800e5a8 <LoRaMacInitialization+0x74c>)
 800e45c:	23db      	movs	r3, #219	; 0xdb
 800e45e:	009b      	lsls	r3, r3, #2
 800e460:	495f      	ldr	r1, [pc, #380]	; (800e5e0 <LoRaMacInitialization+0x784>)
 800e462:	50d1      	str	r1, [r2, r3]
    Radio.Init( &MacCtx.RadioEvents );
 800e464:	4b5f      	ldr	r3, [pc, #380]	; (800e5e4 <LoRaMacInitialization+0x788>)
 800e466:	689b      	ldr	r3, [r3, #8]
 800e468:	4a5f      	ldr	r2, [pc, #380]	; (800e5e8 <LoRaMacInitialization+0x78c>)
 800e46a:	0010      	movs	r0, r2
 800e46c:	4798      	blx	r3

    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_INIT;
 800e46e:	2114      	movs	r1, #20
 800e470:	187b      	adds	r3, r7, r1
 800e472:	2200      	movs	r2, #0
 800e474:	711a      	strb	r2, [r3, #4]
    params.NvmCtx = NULL;
 800e476:	187b      	adds	r3, r7, r1
 800e478:	2200      	movs	r2, #0
 800e47a:	601a      	str	r2, [r3, #0]
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 800e47c:	4a4a      	ldr	r2, [pc, #296]	; (800e5a8 <LoRaMacInitialization+0x74c>)
 800e47e:	238e      	movs	r3, #142	; 0x8e
 800e480:	00db      	lsls	r3, r3, #3
 800e482:	58d3      	ldr	r3, [r2, r3]
 800e484:	781b      	ldrb	r3, [r3, #0]
 800e486:	187a      	adds	r2, r7, r1
 800e488:	0011      	movs	r1, r2
 800e48a:	0018      	movs	r0, r3
 800e48c:	f004 fba7 	bl	8012bde <RegionInitDefaults>

    // Initialize the Secure Element driver
    if( SecureElementInit( EventSecureElementNvmCtxChanged ) != SECURE_ELEMENT_SUCCESS )
 800e490:	4b56      	ldr	r3, [pc, #344]	; (800e5ec <LoRaMacInitialization+0x790>)
 800e492:	0018      	movs	r0, r3
 800e494:	f7fb fb28 	bl	8009ae8 <SecureElementInit>
 800e498:	1e03      	subs	r3, r0, #0
 800e49a:	d001      	beq.n	800e4a0 <LoRaMacInitialization+0x644>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800e49c:	2311      	movs	r3, #17
 800e49e:	e07e      	b.n	800e59e <LoRaMacInitialization+0x742>
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( EventCryptoNvmCtxChanged ) != LORAMAC_CRYPTO_SUCCESS )
 800e4a0:	4b53      	ldr	r3, [pc, #332]	; (800e5f0 <LoRaMacInitialization+0x794>)
 800e4a2:	0018      	movs	r0, r3
 800e4a4:	f003 f858 	bl	8011558 <LoRaMacCryptoInit>
 800e4a8:	1e03      	subs	r3, r0, #0
 800e4aa:	d001      	beq.n	800e4b0 <LoRaMacInitialization+0x654>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800e4ac:	2311      	movs	r3, #17
 800e4ae:	e076      	b.n	800e59e <LoRaMacInitialization+0x742>
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( EventCommandsNvmCtxChanged ) != LORAMAC_COMMANDS_SUCCESS )
 800e4b0:	4b50      	ldr	r3, [pc, #320]	; (800e5f4 <LoRaMacInitialization+0x798>)
 800e4b2:	0018      	movs	r0, r3
 800e4b4:	f001 fd66 	bl	800ff84 <LoRaMacCommandsInit>
 800e4b8:	1e03      	subs	r3, r0, #0
 800e4ba:	d001      	beq.n	800e4c0 <LoRaMacInitialization+0x664>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800e4bc:	2313      	movs	r3, #19
 800e4be:	e06e      	b.n	800e59e <LoRaMacInitialization+0x742>
    }

    // Initialize FCnt Handler module
    if( LoRaMacFCntHandlerInit( EventFCntHandlerNvmCtxChanged ) != LORAMAC_FCNT_HANDLER_SUCCESS )
 800e4c0:	4b4d      	ldr	r3, [pc, #308]	; (800e5f8 <LoRaMacInitialization+0x79c>)
 800e4c2:	0018      	movs	r0, r3
 800e4c4:	f003 fdea 	bl	801209c <LoRaMacFCntHandlerInit>
 800e4c8:	1e03      	subs	r3, r0, #0
 800e4ca:	d001      	beq.n	800e4d0 <LoRaMacInitialization+0x674>
    {
        return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800e4cc:	2312      	movs	r3, #18
 800e4ce:	e066      	b.n	800e59e <LoRaMacInitialization+0x742>
    }

    // Set multicast downlink counter reference
    LoRaMacFCntHandlerSetMulticastReference( MacCtx.NvmCtx->MulticastChannelList );
 800e4d0:	4a35      	ldr	r2, [pc, #212]	; (800e5a8 <LoRaMacInitialization+0x74c>)
 800e4d2:	238e      	movs	r3, #142	; 0x8e
 800e4d4:	00db      	lsls	r3, r3, #3
 800e4d6:	58d3      	ldr	r3, [r2, r3]
 800e4d8:	3348      	adds	r3, #72	; 0x48
 800e4da:	0018      	movs	r0, r3
 800e4dc:	f003 ff4c 	bl	8012378 <LoRaMacFCntHandlerSetMulticastReference>

    // Random seed initialization
    srand1( Radio.Random( ) );
 800e4e0:	4b40      	ldr	r3, [pc, #256]	; (800e5e4 <LoRaMacInitialization+0x788>)
 800e4e2:	69db      	ldr	r3, [r3, #28]
 800e4e4:	4798      	blx	r3
 800e4e6:	0003      	movs	r3, r0
 800e4e8:	0018      	movs	r0, r3
 800e4ea:	f007 f8d5 	bl	8015698 <srand1>

    Radio.SetPublicNetwork( MacCtx.NvmCtx->PublicNetwork );
 800e4ee:	4b3d      	ldr	r3, [pc, #244]	; (800e5e4 <LoRaMacInitialization+0x788>)
 800e4f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e4f2:	492d      	ldr	r1, [pc, #180]	; (800e5a8 <LoRaMacInitialization+0x74c>)
 800e4f4:	228e      	movs	r2, #142	; 0x8e
 800e4f6:	00d2      	lsls	r2, r2, #3
 800e4f8:	588a      	ldr	r2, [r1, r2]
 800e4fa:	21c9      	movs	r1, #201	; 0xc9
 800e4fc:	5c52      	ldrb	r2, [r2, r1]
 800e4fe:	0010      	movs	r0, r2
 800e500:	4798      	blx	r3
    Radio.Sleep( );
 800e502:	4b38      	ldr	r3, [pc, #224]	; (800e5e4 <LoRaMacInitialization+0x788>)
 800e504:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e506:	4798      	blx	r3

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 800e508:	2140      	movs	r1, #64	; 0x40
 800e50a:	187b      	adds	r3, r7, r1
 800e50c:	2200      	movs	r2, #0
 800e50e:	601a      	str	r2, [r3, #0]
    classBCallbacks.MacProcessNotify = NULL;
 800e510:	187b      	adds	r3, r7, r1
 800e512:	2200      	movs	r2, #0
 800e514:	605a      	str	r2, [r3, #4]
    if( callbacks != NULL )
 800e516:	68bb      	ldr	r3, [r7, #8]
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d008      	beq.n	800e52e <LoRaMacInitialization+0x6d2>
    {
        classBCallbacks.GetTemperatureLevel = callbacks->GetTemperatureLevel;
 800e51c:	68bb      	ldr	r3, [r7, #8]
 800e51e:	685a      	ldr	r2, [r3, #4]
 800e520:	2140      	movs	r1, #64	; 0x40
 800e522:	187b      	adds	r3, r7, r1
 800e524:	601a      	str	r2, [r3, #0]
        classBCallbacks.MacProcessNotify = callbacks->MacProcessNotify;
 800e526:	68bb      	ldr	r3, [r7, #8]
 800e528:	68da      	ldr	r2, [r3, #12]
 800e52a:	187b      	adds	r3, r7, r1
 800e52c:	605a      	str	r2, [r3, #4]
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 800e52e:	2120      	movs	r1, #32
 800e530:	187b      	adds	r3, r7, r1
 800e532:	4a32      	ldr	r2, [pc, #200]	; (800e5fc <LoRaMacInitialization+0x7a0>)
 800e534:	601a      	str	r2, [r3, #0]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 800e536:	187b      	adds	r3, r7, r1
 800e538:	4a31      	ldr	r2, [pc, #196]	; (800e600 <LoRaMacInitialization+0x7a4>)
 800e53a:	605a      	str	r2, [r3, #4]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 800e53c:	187b      	adds	r3, r7, r1
 800e53e:	4a31      	ldr	r2, [pc, #196]	; (800e604 <LoRaMacInitialization+0x7a8>)
 800e540:	609a      	str	r2, [r3, #8]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 800e542:	187b      	adds	r3, r7, r1
 800e544:	4a30      	ldr	r2, [pc, #192]	; (800e608 <LoRaMacInitialization+0x7ac>)
 800e546:	60da      	str	r2, [r3, #12]
    classBParams.LoRaMacDevAddr = &MacCtx.NvmCtx->DevAddr;
 800e548:	4a17      	ldr	r2, [pc, #92]	; (800e5a8 <LoRaMacInitialization+0x74c>)
 800e54a:	238e      	movs	r3, #142	; 0x8e
 800e54c:	00db      	lsls	r3, r3, #3
 800e54e:	58d3      	ldr	r3, [r2, r3]
 800e550:	3344      	adds	r3, #68	; 0x44
 800e552:	001a      	movs	r2, r3
 800e554:	187b      	adds	r3, r7, r1
 800e556:	611a      	str	r2, [r3, #16]
    classBParams.LoRaMacRegion = &MacCtx.NvmCtx->Region;
 800e558:	4a13      	ldr	r2, [pc, #76]	; (800e5a8 <LoRaMacInitialization+0x74c>)
 800e55a:	238e      	movs	r3, #142	; 0x8e
 800e55c:	00db      	lsls	r3, r3, #3
 800e55e:	58d3      	ldr	r3, [r2, r3]
 800e560:	001a      	movs	r2, r3
 800e562:	187b      	adds	r3, r7, r1
 800e564:	615a      	str	r2, [r3, #20]
    classBParams.LoRaMacParams = &MacCtx.NvmCtx->MacParams;
 800e566:	4a10      	ldr	r2, [pc, #64]	; (800e5a8 <LoRaMacInitialization+0x74c>)
 800e568:	238e      	movs	r3, #142	; 0x8e
 800e56a:	00db      	lsls	r3, r3, #3
 800e56c:	58d3      	ldr	r3, [r2, r3]
 800e56e:	33d4      	adds	r3, #212	; 0xd4
 800e570:	001a      	movs	r2, r3
 800e572:	187b      	adds	r3, r7, r1
 800e574:	619a      	str	r2, [r3, #24]
    classBParams.MulticastChannels = &MacCtx.NvmCtx->MulticastChannelList[0];
 800e576:	4a0c      	ldr	r2, [pc, #48]	; (800e5a8 <LoRaMacInitialization+0x74c>)
 800e578:	238e      	movs	r3, #142	; 0x8e
 800e57a:	00db      	lsls	r3, r3, #3
 800e57c:	58d3      	ldr	r3, [r2, r3]
 800e57e:	3348      	adds	r3, #72	; 0x48
 800e580:	001a      	movs	r2, r3
 800e582:	0008      	movs	r0, r1
 800e584:	187b      	adds	r3, r7, r1
 800e586:	61da      	str	r2, [r3, #28]

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &EventClassBNvmCtxChanged );
 800e588:	4a20      	ldr	r2, [pc, #128]	; (800e60c <LoRaMacInitialization+0x7b0>)
 800e58a:	2340      	movs	r3, #64	; 0x40
 800e58c:	18f9      	adds	r1, r7, r3
 800e58e:	183b      	adds	r3, r7, r0
 800e590:	0018      	movs	r0, r3
 800e592:	f001 fae1 	bl	800fb58 <LoRaMacClassBInit>

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800e596:	2001      	movs	r0, #1
 800e598:	f7fc fe9e 	bl	800b2d8 <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 800e59c:	2300      	movs	r3, #0
}
 800e59e:	0018      	movs	r0, r3
 800e5a0:	46bd      	mov	sp, r7
 800e5a2:	b014      	add	sp, #80	; 0x50
 800e5a4:	bdb0      	pop	{r4, r5, r7, pc}
 800e5a6:	46c0      	nop			; (mov r8, r8)
 800e5a8:	2000070c 	.word	0x2000070c
 800e5ac:	0000046d 	.word	0x0000046d
 800e5b0:	0800b785 	.word	0x0800b785
 800e5b4:	20000a88 	.word	0x20000a88
 800e5b8:	0800b815 	.word	0x0800b815
 800e5bc:	20000aa0 	.word	0x20000aa0
 800e5c0:	0800b909 	.word	0x0800b909
 800e5c4:	20000ab8 	.word	0x20000ab8
 800e5c8:	0800ba4d 	.word	0x0800ba4d
 800e5cc:	20000b00 	.word	0x20000b00
 800e5d0:	0800a1bd 	.word	0x0800a1bd
 800e5d4:	0800a255 	.word	0x0800a255
 800e5d8:	0800a329 	.word	0x0800a329
 800e5dc:	0800a2e5 	.word	0x0800a2e5
 800e5e0:	0800a36d 	.word	0x0800a36d
 800e5e4:	08020c58 	.word	0x08020c58
 800e5e8:	20000a6c 	.word	0x20000a6c
 800e5ec:	0800ddd5 	.word	0x0800ddd5
 800e5f0:	0800ddc5 	.word	0x0800ddc5
 800e5f4:	0800dde5 	.word	0x0800dde5
 800e5f8:	0800de15 	.word	0x0800de15
 800e5fc:	20000b60 	.word	0x20000b60
 800e600:	20000b1c 	.word	0x20000b1c
 800e604:	20000b4c 	.word	0x20000b4c
 800e608:	20000b79 	.word	0x20000b79
 800e60c:	0800ddf5 	.word	0x0800ddf5

0800e610 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 800e610:	b580      	push	{r7, lr}
 800e612:	af00      	add	r7, sp, #0
    MacCtx.MacState = LORAMAC_IDLE;
 800e614:	4a04      	ldr	r2, [pc, #16]	; (800e628 <LoRaMacStart+0x18>)
 800e616:	23d5      	movs	r3, #213	; 0xd5
 800e618:	009b      	lsls	r3, r3, #2
 800e61a:	2100      	movs	r1, #0
 800e61c:	50d1      	str	r1, [r2, r3]
    return LORAMAC_STATUS_OK;
 800e61e:	2300      	movs	r3, #0
}
 800e620:	0018      	movs	r0, r3
 800e622:	46bd      	mov	sp, r7
 800e624:	bd80      	pop	{r7, pc}
 800e626:	46c0      	nop			; (mov r8, r8)
 800e628:	2000070c 	.word	0x2000070c

0800e62c <LoRaMacQueryTxPossible>:
    }
    return LORAMAC_STATUS_BUSY;
}

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 800e62c:	b590      	push	{r4, r7, lr}
 800e62e:	b08b      	sub	sp, #44	; 0x2c
 800e630:	af00      	add	r7, sp, #0
 800e632:	0002      	movs	r2, r0
 800e634:	6039      	str	r1, [r7, #0]
 800e636:	1dfb      	adds	r3, r7, #7
 800e638:	701a      	strb	r2, [r3, #0]
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 800e63a:	4a58      	ldr	r2, [pc, #352]	; (800e79c <LoRaMacQueryTxPossible+0x170>)
 800e63c:	238e      	movs	r3, #142	; 0x8e
 800e63e:	00db      	lsls	r3, r3, #3
 800e640:	58d3      	ldr	r3, [r2, r3]
 800e642:	22cc      	movs	r2, #204	; 0xcc
 800e644:	589b      	ldr	r3, [r3, r2]
 800e646:	613b      	str	r3, [r7, #16]
    int8_t datarate = MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate;
 800e648:	4a54      	ldr	r2, [pc, #336]	; (800e79c <LoRaMacQueryTxPossible+0x170>)
 800e64a:	238e      	movs	r3, #142	; 0x8e
 800e64c:	00db      	lsls	r3, r3, #3
 800e64e:	58d3      	ldr	r3, [r2, r3]
 800e650:	2205      	movs	r2, #5
 800e652:	569a      	ldrsb	r2, [r3, r2]
 800e654:	230f      	movs	r3, #15
 800e656:	18fb      	adds	r3, r7, r3
 800e658:	701a      	strb	r2, [r3, #0]
    int8_t txPower = MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower;
 800e65a:	4a50      	ldr	r2, [pc, #320]	; (800e79c <LoRaMacQueryTxPossible+0x170>)
 800e65c:	238e      	movs	r3, #142	; 0x8e
 800e65e:	00db      	lsls	r3, r3, #3
 800e660:	58d3      	ldr	r3, [r2, r3]
 800e662:	2204      	movs	r2, #4
 800e664:	569a      	ldrsb	r2, [r3, r2]
 800e666:	230e      	movs	r3, #14
 800e668:	18fb      	adds	r3, r7, r3
 800e66a:	701a      	strb	r2, [r3, #0]
    size_t macCmdsSize = 0;
 800e66c:	2300      	movs	r3, #0
 800e66e:	60bb      	str	r3, [r7, #8]

    if( txInfo == NULL )
 800e670:	683b      	ldr	r3, [r7, #0]
 800e672:	2b00      	cmp	r3, #0
 800e674:	d101      	bne.n	800e67a <LoRaMacQueryTxPossible+0x4e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800e676:	2303      	movs	r3, #3
 800e678:	e08c      	b.n	800e794 <LoRaMacQueryTxPossible+0x168>
    }

    // Setup ADR request
    adrNext.Version = MacCtx.NvmCtx->Version;
 800e67a:	4a48      	ldr	r2, [pc, #288]	; (800e79c <LoRaMacQueryTxPossible+0x170>)
 800e67c:	238e      	movs	r3, #142	; 0x8e
 800e67e:	00db      	lsls	r3, r3, #3
 800e680:	58d1      	ldr	r1, [r2, r3]
 800e682:	2014      	movs	r0, #20
 800e684:	183b      	adds	r3, r7, r0
 800e686:	2288      	movs	r2, #136	; 0x88
 800e688:	0092      	lsls	r2, r2, #2
 800e68a:	588a      	ldr	r2, [r1, r2]
 800e68c:	601a      	str	r2, [r3, #0]
    adrNext.UpdateChanMask = false;
 800e68e:	0001      	movs	r1, r0
 800e690:	187b      	adds	r3, r7, r1
 800e692:	2200      	movs	r2, #0
 800e694:	711a      	strb	r2, [r3, #4]
    adrNext.AdrEnabled = MacCtx.NvmCtx->AdrCtrlOn;
 800e696:	4a41      	ldr	r2, [pc, #260]	; (800e79c <LoRaMacQueryTxPossible+0x170>)
 800e698:	238e      	movs	r3, #142	; 0x8e
 800e69a:	00db      	lsls	r3, r3, #3
 800e69c:	58d3      	ldr	r3, [r2, r3]
 800e69e:	22ca      	movs	r2, #202	; 0xca
 800e6a0:	5c9a      	ldrb	r2, [r3, r2]
 800e6a2:	187b      	adds	r3, r7, r1
 800e6a4:	715a      	strb	r2, [r3, #5]
    adrNext.AdrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 800e6a6:	4a3d      	ldr	r2, [pc, #244]	; (800e79c <LoRaMacQueryTxPossible+0x170>)
 800e6a8:	238e      	movs	r3, #142	; 0x8e
 800e6aa:	00db      	lsls	r3, r3, #3
 800e6ac:	58d3      	ldr	r3, [r2, r3]
 800e6ae:	22cc      	movs	r2, #204	; 0xcc
 800e6b0:	589a      	ldr	r2, [r3, r2]
 800e6b2:	187b      	adds	r3, r7, r1
 800e6b4:	609a      	str	r2, [r3, #8]
    adrNext.AdrAckLimit = MacCtx.NvmCtx->AdrAckLimit;
 800e6b6:	4a39      	ldr	r2, [pc, #228]	; (800e79c <LoRaMacQueryTxPossible+0x170>)
 800e6b8:	238e      	movs	r3, #142	; 0x8e
 800e6ba:	00db      	lsls	r3, r3, #3
 800e6bc:	58d3      	ldr	r3, [r2, r3]
 800e6be:	22d0      	movs	r2, #208	; 0xd0
 800e6c0:	5a9a      	ldrh	r2, [r3, r2]
 800e6c2:	187b      	adds	r3, r7, r1
 800e6c4:	819a      	strh	r2, [r3, #12]
    adrNext.AdrAckDelay = MacCtx.NvmCtx->AdrAckDelay;
 800e6c6:	4a35      	ldr	r2, [pc, #212]	; (800e79c <LoRaMacQueryTxPossible+0x170>)
 800e6c8:	238e      	movs	r3, #142	; 0x8e
 800e6ca:	00db      	lsls	r3, r3, #3
 800e6cc:	58d3      	ldr	r3, [r2, r3]
 800e6ce:	22d2      	movs	r2, #210	; 0xd2
 800e6d0:	5a9a      	ldrh	r2, [r3, r2]
 800e6d2:	187b      	adds	r3, r7, r1
 800e6d4:	81da      	strh	r2, [r3, #14]
    adrNext.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800e6d6:	4a31      	ldr	r2, [pc, #196]	; (800e79c <LoRaMacQueryTxPossible+0x170>)
 800e6d8:	238e      	movs	r3, #142	; 0x8e
 800e6da:	00db      	lsls	r3, r3, #3
 800e6dc:	58d3      	ldr	r3, [r2, r3]
 800e6de:	22d5      	movs	r2, #213	; 0xd5
 800e6e0:	569a      	ldrsb	r2, [r3, r2]
 800e6e2:	187b      	adds	r3, r7, r1
 800e6e4:	741a      	strb	r2, [r3, #16]
    adrNext.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 800e6e6:	4a2d      	ldr	r2, [pc, #180]	; (800e79c <LoRaMacQueryTxPossible+0x170>)
 800e6e8:	238e      	movs	r3, #142	; 0x8e
 800e6ea:	00db      	lsls	r3, r3, #3
 800e6ec:	58d3      	ldr	r3, [r2, r3]
 800e6ee:	22d4      	movs	r2, #212	; 0xd4
 800e6f0:	569a      	ldrsb	r2, [r3, r2]
 800e6f2:	187b      	adds	r3, r7, r1
 800e6f4:	745a      	strb	r2, [r3, #17]
    adrNext.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800e6f6:	4a29      	ldr	r2, [pc, #164]	; (800e79c <LoRaMacQueryTxPossible+0x170>)
 800e6f8:	238e      	movs	r3, #142	; 0x8e
 800e6fa:	00db      	lsls	r3, r3, #3
 800e6fc:	58d2      	ldr	r2, [r2, r3]
 800e6fe:	2380      	movs	r3, #128	; 0x80
 800e700:	005b      	lsls	r3, r3, #1
 800e702:	5cd2      	ldrb	r2, [r2, r3]
 800e704:	187b      	adds	r3, r7, r1
 800e706:	749a      	strb	r2, [r3, #18]
    adrNext.Region = MacCtx.NvmCtx->Region;
 800e708:	4a24      	ldr	r2, [pc, #144]	; (800e79c <LoRaMacQueryTxPossible+0x170>)
 800e70a:	238e      	movs	r3, #142	; 0x8e
 800e70c:	00db      	lsls	r3, r3, #3
 800e70e:	58d3      	ldr	r3, [r2, r3]
 800e710:	781a      	ldrb	r2, [r3, #0]
 800e712:	0008      	movs	r0, r1
 800e714:	187b      	adds	r3, r7, r1
 800e716:	74da      	strb	r2, [r3, #19]

    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 800e718:	2310      	movs	r3, #16
 800e71a:	18fb      	adds	r3, r7, r3
 800e71c:	220e      	movs	r2, #14
 800e71e:	18ba      	adds	r2, r7, r2
 800e720:	240f      	movs	r4, #15
 800e722:	1939      	adds	r1, r7, r4
 800e724:	1838      	adds	r0, r7, r0
 800e726:	f001 f9ff 	bl	800fb28 <LoRaMacAdrCalcNext>

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800e72a:	193b      	adds	r3, r7, r4
 800e72c:	781b      	ldrb	r3, [r3, #0]
 800e72e:	b25b      	sxtb	r3, r3
 800e730:	0018      	movs	r0, r3
 800e732:	f7fd fa99 	bl	800bc68 <GetMaxAppPayloadWithoutFOptsLength>
 800e736:	0003      	movs	r3, r0
 800e738:	001a      	movs	r2, r3
 800e73a:	683b      	ldr	r3, [r7, #0]
 800e73c:	705a      	strb	r2, [r3, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800e73e:	2308      	movs	r3, #8
 800e740:	18fb      	adds	r3, r7, r3
 800e742:	0018      	movs	r0, r3
 800e744:	f001 fd4a 	bl	80101dc <LoRaMacCommandsGetSizeSerializedCmds>
 800e748:	1e03      	subs	r3, r0, #0
 800e74a:	d001      	beq.n	800e750 <LoRaMacQueryTxPossible+0x124>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800e74c:	2313      	movs	r3, #19
 800e74e:	e021      	b.n	800e794 <LoRaMacQueryTxPossible+0x168>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 800e750:	68bb      	ldr	r3, [r7, #8]
 800e752:	2b0f      	cmp	r3, #15
 800e754:	d81a      	bhi.n	800e78c <LoRaMacQueryTxPossible+0x160>
 800e756:	683b      	ldr	r3, [r7, #0]
 800e758:	785b      	ldrb	r3, [r3, #1]
 800e75a:	001a      	movs	r2, r3
 800e75c:	68bb      	ldr	r3, [r7, #8]
 800e75e:	429a      	cmp	r2, r3
 800e760:	d314      	bcc.n	800e78c <LoRaMacQueryTxPossible+0x160>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 800e762:	683b      	ldr	r3, [r7, #0]
 800e764:	785a      	ldrb	r2, [r3, #1]
 800e766:	68bb      	ldr	r3, [r7, #8]
 800e768:	b2db      	uxtb	r3, r3
 800e76a:	1ad3      	subs	r3, r2, r3
 800e76c:	b2da      	uxtb	r2, r3
 800e76e:	683b      	ldr	r3, [r7, #0]
 800e770:	701a      	strb	r2, [r3, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 800e772:	683b      	ldr	r3, [r7, #0]
 800e774:	785b      	ldrb	r3, [r3, #1]
 800e776:	0019      	movs	r1, r3
 800e778:	1dfb      	adds	r3, r7, #7
 800e77a:	781a      	ldrb	r2, [r3, #0]
 800e77c:	68bb      	ldr	r3, [r7, #8]
 800e77e:	18d3      	adds	r3, r2, r3
 800e780:	4299      	cmp	r1, r3
 800e782:	d301      	bcc.n	800e788 <LoRaMacQueryTxPossible+0x15c>
        {
            return LORAMAC_STATUS_OK;
 800e784:	2300      	movs	r3, #0
 800e786:	e005      	b.n	800e794 <LoRaMacQueryTxPossible+0x168>
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 800e788:	2308      	movs	r3, #8
 800e78a:	e003      	b.n	800e794 <LoRaMacQueryTxPossible+0x168>
        }
    }
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
 800e78c:	683b      	ldr	r3, [r7, #0]
 800e78e:	2200      	movs	r2, #0
 800e790:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 800e792:	2308      	movs	r3, #8
    }
}
 800e794:	0018      	movs	r0, r3
 800e796:	46bd      	mov	sp, r7
 800e798:	b00b      	add	sp, #44	; 0x2c
 800e79a:	bd90      	pop	{r4, r7, pc}
 800e79c:	2000070c 	.word	0x2000070c

0800e7a0 <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 800e7a0:	b590      	push	{r4, r7, lr}
 800e7a2:	b087      	sub	sp, #28
 800e7a4:	af00      	add	r7, sp, #0
 800e7a6:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e7a8:	2317      	movs	r3, #23
 800e7aa:	18fb      	adds	r3, r7, r3
 800e7ac:	2200      	movs	r2, #0
 800e7ae:	701a      	strb	r2, [r3, #0]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	d101      	bne.n	800e7ba <LoRaMacMibGetRequestConfirm+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800e7b6:	2303      	movs	r3, #3
 800e7b8:	e135      	b.n	800ea26 <LoRaMacMibGetRequestConfirm+0x286>
    }

    switch( mibGet->Type )
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	781b      	ldrb	r3, [r3, #0]
 800e7be:	2b2f      	cmp	r3, #47	; 0x2f
 800e7c0:	d900      	bls.n	800e7c4 <LoRaMacMibGetRequestConfirm+0x24>
 800e7c2:	e124      	b.n	800ea0e <LoRaMacMibGetRequestConfirm+0x26e>
 800e7c4:	009a      	lsls	r2, r3, #2
 800e7c6:	4b9a      	ldr	r3, [pc, #616]	; (800ea30 <LoRaMacMibGetRequestConfirm+0x290>)
 800e7c8:	18d3      	adds	r3, r2, r3
 800e7ca:	681b      	ldr	r3, [r3, #0]
 800e7cc:	469f      	mov	pc, r3
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = MacCtx.NvmCtx->DeviceClass;
 800e7ce:	4a99      	ldr	r2, [pc, #612]	; (800ea34 <LoRaMacMibGetRequestConfirm+0x294>)
 800e7d0:	238e      	movs	r3, #142	; 0x8e
 800e7d2:	00db      	lsls	r3, r3, #3
 800e7d4:	58d3      	ldr	r3, [r2, r3]
 800e7d6:	22c8      	movs	r2, #200	; 0xc8
 800e7d8:	5c9a      	ldrb	r2, [r3, r2]
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	711a      	strb	r2, [r3, #4]
            break;
 800e7de:	e11f      	b.n	800ea20 <LoRaMacMibGetRequestConfirm+0x280>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = MacCtx.NvmCtx->NetworkActivation;
 800e7e0:	4a94      	ldr	r2, [pc, #592]	; (800ea34 <LoRaMacMibGetRequestConfirm+0x294>)
 800e7e2:	238e      	movs	r3, #142	; 0x8e
 800e7e4:	00db      	lsls	r3, r3, #3
 800e7e6:	58d2      	ldr	r2, [r2, r3]
 800e7e8:	2389      	movs	r3, #137	; 0x89
 800e7ea:	009b      	lsls	r3, r3, #2
 800e7ec:	5cd2      	ldrb	r2, [r2, r3]
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	711a      	strb	r2, [r3, #4]
            break;
 800e7f2:	e115      	b.n	800ea20 <LoRaMacMibGetRequestConfirm+0x280>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = MacCtx.NvmCtx->AdrCtrlOn;
 800e7f4:	4a8f      	ldr	r2, [pc, #572]	; (800ea34 <LoRaMacMibGetRequestConfirm+0x294>)
 800e7f6:	238e      	movs	r3, #142	; 0x8e
 800e7f8:	00db      	lsls	r3, r3, #3
 800e7fa:	58d3      	ldr	r3, [r2, r3]
 800e7fc:	22ca      	movs	r2, #202	; 0xca
 800e7fe:	5c9a      	ldrb	r2, [r3, r2]
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	711a      	strb	r2, [r3, #4]
            break;
 800e804:	e10c      	b.n	800ea20 <LoRaMacMibGetRequestConfirm+0x280>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = MacCtx.NvmCtx->NetID;
 800e806:	4a8b      	ldr	r2, [pc, #556]	; (800ea34 <LoRaMacMibGetRequestConfirm+0x294>)
 800e808:	238e      	movs	r3, #142	; 0x8e
 800e80a:	00db      	lsls	r3, r3, #3
 800e80c:	58d3      	ldr	r3, [r2, r3]
 800e80e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	605a      	str	r2, [r3, #4]
            break;
 800e814:	e104      	b.n	800ea20 <LoRaMacMibGetRequestConfirm+0x280>
        }
        case MIB_DEV_ADDR:
        {
            mibGet->Param.DevAddr = MacCtx.NvmCtx->DevAddr;
 800e816:	4a87      	ldr	r2, [pc, #540]	; (800ea34 <LoRaMacMibGetRequestConfirm+0x294>)
 800e818:	238e      	movs	r3, #142	; 0x8e
 800e81a:	00db      	lsls	r3, r3, #3
 800e81c:	58d3      	ldr	r3, [r2, r3]
 800e81e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	605a      	str	r2, [r3, #4]
            break;
 800e824:	e0fc      	b.n	800ea20 <LoRaMacMibGetRequestConfirm+0x280>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = MacCtx.NvmCtx->PublicNetwork;
 800e826:	4a83      	ldr	r2, [pc, #524]	; (800ea34 <LoRaMacMibGetRequestConfirm+0x294>)
 800e828:	238e      	movs	r3, #142	; 0x8e
 800e82a:	00db      	lsls	r3, r3, #3
 800e82c:	58d3      	ldr	r3, [r2, r3]
 800e82e:	22c9      	movs	r2, #201	; 0xc9
 800e830:	5c9a      	ldrb	r2, [r3, r2]
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	711a      	strb	r2, [r3, #4]
            break;
 800e836:	e0f3      	b.n	800ea20 <LoRaMacMibGetRequestConfirm+0x280>
        }
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 800e838:	4a7e      	ldr	r2, [pc, #504]	; (800ea34 <LoRaMacMibGetRequestConfirm+0x294>)
 800e83a:	238e      	movs	r3, #142	; 0x8e
 800e83c:	00db      	lsls	r3, r3, #3
 800e83e:	58d2      	ldr	r2, [r2, r3]
 800e840:	2316      	movs	r3, #22
 800e842:	33ff      	adds	r3, #255	; 0xff
 800e844:	5cd2      	ldrb	r2, [r2, r3]
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	711a      	strb	r2, [r3, #4]
            break;
 800e84a:	e0e9      	b.n	800ea20 <LoRaMacMibGetRequestConfirm+0x280>
        }
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 800e84c:	2110      	movs	r1, #16
 800e84e:	187b      	adds	r3, r7, r1
 800e850:	221c      	movs	r2, #28
 800e852:	701a      	strb	r2, [r3, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800e854:	4a77      	ldr	r2, [pc, #476]	; (800ea34 <LoRaMacMibGetRequestConfirm+0x294>)
 800e856:	238e      	movs	r3, #142	; 0x8e
 800e858:	00db      	lsls	r3, r3, #3
 800e85a:	58d3      	ldr	r3, [r2, r3]
 800e85c:	781b      	ldrb	r3, [r3, #0]
 800e85e:	187a      	adds	r2, r7, r1
 800e860:	0011      	movs	r1, r2
 800e862:	0018      	movs	r0, r3
 800e864:	f004 f97f 	bl	8012b66 <RegionGetPhyParam>
 800e868:	0003      	movs	r3, r0
 800e86a:	001a      	movs	r2, r3
 800e86c:	210c      	movs	r1, #12
 800e86e:	187b      	adds	r3, r7, r1
 800e870:	601a      	str	r2, [r3, #0]

            mibGet->Param.ChannelList = phyParam.Channels;
 800e872:	187b      	adds	r3, r7, r1
 800e874:	681a      	ldr	r2, [r3, #0]
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	605a      	str	r2, [r3, #4]
            break;
 800e87a:	e0d1      	b.n	800ea20 <LoRaMacMibGetRequestConfirm+0x280>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = MacCtx.NvmCtx->MacParams.Rx2Channel;
 800e87c:	4a6d      	ldr	r2, [pc, #436]	; (800ea34 <LoRaMacMibGetRequestConfirm+0x294>)
 800e87e:	238e      	movs	r3, #142	; 0x8e
 800e880:	00db      	lsls	r3, r3, #3
 800e882:	58d2      	ldr	r2, [r2, r3]
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	21f8      	movs	r1, #248	; 0xf8
 800e888:	3304      	adds	r3, #4
 800e88a:	1852      	adds	r2, r2, r1
 800e88c:	ca03      	ldmia	r2!, {r0, r1}
 800e88e:	c303      	stmia	r3!, {r0, r1}
            break;
 800e890:	e0c6      	b.n	800ea20 <LoRaMacMibGetRequestConfirm+0x280>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel;
 800e892:	4a68      	ldr	r2, [pc, #416]	; (800ea34 <LoRaMacMibGetRequestConfirm+0x294>)
 800e894:	238e      	movs	r3, #142	; 0x8e
 800e896:	00db      	lsls	r3, r3, #3
 800e898:	58d2      	ldr	r2, [r2, r3]
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	3304      	adds	r3, #4
 800e89e:	3228      	adds	r2, #40	; 0x28
 800e8a0:	ca03      	ldmia	r2!, {r0, r1}
 800e8a2:	c303      	stmia	r3!, {r0, r1}
            break;
 800e8a4:	e0bc      	b.n	800ea20 <LoRaMacMibGetRequestConfirm+0x280>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 800e8a6:	2110      	movs	r1, #16
 800e8a8:	187b      	adds	r3, r7, r1
 800e8aa:	221a      	movs	r2, #26
 800e8ac:	701a      	strb	r2, [r3, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800e8ae:	4a61      	ldr	r2, [pc, #388]	; (800ea34 <LoRaMacMibGetRequestConfirm+0x294>)
 800e8b0:	238e      	movs	r3, #142	; 0x8e
 800e8b2:	00db      	lsls	r3, r3, #3
 800e8b4:	58d3      	ldr	r3, [r2, r3]
 800e8b6:	781b      	ldrb	r3, [r3, #0]
 800e8b8:	187a      	adds	r2, r7, r1
 800e8ba:	0011      	movs	r1, r2
 800e8bc:	0018      	movs	r0, r3
 800e8be:	f004 f952 	bl	8012b66 <RegionGetPhyParam>
 800e8c2:	0003      	movs	r3, r0
 800e8c4:	001a      	movs	r2, r3
 800e8c6:	210c      	movs	r1, #12
 800e8c8:	187b      	adds	r3, r7, r1
 800e8ca:	601a      	str	r2, [r3, #0]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 800e8cc:	187b      	adds	r3, r7, r1
 800e8ce:	681a      	ldr	r2, [r3, #0]
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	605a      	str	r2, [r3, #4]
            break;
 800e8d4:	e0a4      	b.n	800ea20 <LoRaMacMibGetRequestConfirm+0x280>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 800e8d6:	2110      	movs	r1, #16
 800e8d8:	187b      	adds	r3, r7, r1
 800e8da:	2219      	movs	r2, #25
 800e8dc:	701a      	strb	r2, [r3, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800e8de:	4a55      	ldr	r2, [pc, #340]	; (800ea34 <LoRaMacMibGetRequestConfirm+0x294>)
 800e8e0:	238e      	movs	r3, #142	; 0x8e
 800e8e2:	00db      	lsls	r3, r3, #3
 800e8e4:	58d3      	ldr	r3, [r2, r3]
 800e8e6:	781b      	ldrb	r3, [r3, #0]
 800e8e8:	187a      	adds	r2, r7, r1
 800e8ea:	0011      	movs	r1, r2
 800e8ec:	0018      	movs	r0, r3
 800e8ee:	f004 f93a 	bl	8012b66 <RegionGetPhyParam>
 800e8f2:	0003      	movs	r3, r0
 800e8f4:	001a      	movs	r2, r3
 800e8f6:	210c      	movs	r1, #12
 800e8f8:	187b      	adds	r3, r7, r1
 800e8fa:	601a      	str	r2, [r3, #0]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 800e8fc:	187b      	adds	r3, r7, r1
 800e8fe:	681a      	ldr	r2, [r3, #0]
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	605a      	str	r2, [r3, #4]
            break;
 800e904:	e08c      	b.n	800ea20 <LoRaMacMibGetRequestConfirm+0x280>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = MacCtx.NvmCtx->MacParams.ChannelsNbTrans;
 800e906:	4a4b      	ldr	r2, [pc, #300]	; (800ea34 <LoRaMacMibGetRequestConfirm+0x294>)
 800e908:	238e      	movs	r3, #142	; 0x8e
 800e90a:	00db      	lsls	r3, r3, #3
 800e90c:	58d3      	ldr	r3, [r2, r3]
 800e90e:	22f4      	movs	r2, #244	; 0xf4
 800e910:	5c9a      	ldrb	r2, [r3, r2]
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	711a      	strb	r2, [r3, #4]
            break;
 800e916:	e083      	b.n	800ea20 <LoRaMacMibGetRequestConfirm+0x280>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = MacCtx.NvmCtx->MacParams.MaxRxWindow;
 800e918:	4a46      	ldr	r2, [pc, #280]	; (800ea34 <LoRaMacMibGetRequestConfirm+0x294>)
 800e91a:	238e      	movs	r3, #142	; 0x8e
 800e91c:	00db      	lsls	r3, r3, #3
 800e91e:	58d3      	ldr	r3, [r2, r3]
 800e920:	22e0      	movs	r2, #224	; 0xe0
 800e922:	589a      	ldr	r2, [r3, r2]
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	605a      	str	r2, [r3, #4]
            break;
 800e928:	e07a      	b.n	800ea20 <LoRaMacMibGetRequestConfirm+0x280>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = MacCtx.NvmCtx->MacParams.ReceiveDelay1;
 800e92a:	4a42      	ldr	r2, [pc, #264]	; (800ea34 <LoRaMacMibGetRequestConfirm+0x294>)
 800e92c:	238e      	movs	r3, #142	; 0x8e
 800e92e:	00db      	lsls	r3, r3, #3
 800e930:	58d3      	ldr	r3, [r2, r3]
 800e932:	22e4      	movs	r2, #228	; 0xe4
 800e934:	589a      	ldr	r2, [r3, r2]
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	605a      	str	r2, [r3, #4]
            break;
 800e93a:	e071      	b.n	800ea20 <LoRaMacMibGetRequestConfirm+0x280>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay2;
 800e93c:	4a3d      	ldr	r2, [pc, #244]	; (800ea34 <LoRaMacMibGetRequestConfirm+0x294>)
 800e93e:	238e      	movs	r3, #142	; 0x8e
 800e940:	00db      	lsls	r3, r3, #3
 800e942:	58d3      	ldr	r3, [r2, r3]
 800e944:	22e8      	movs	r2, #232	; 0xe8
 800e946:	589a      	ldr	r2, [r3, r2]
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	605a      	str	r2, [r3, #4]
            break;
 800e94c:	e068      	b.n	800ea20 <LoRaMacMibGetRequestConfirm+0x280>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = MacCtx.NvmCtx->MacParams.JoinAcceptDelay1;
 800e94e:	4a39      	ldr	r2, [pc, #228]	; (800ea34 <LoRaMacMibGetRequestConfirm+0x294>)
 800e950:	238e      	movs	r3, #142	; 0x8e
 800e952:	00db      	lsls	r3, r3, #3
 800e954:	58d3      	ldr	r3, [r2, r3]
 800e956:	22ec      	movs	r2, #236	; 0xec
 800e958:	589a      	ldr	r2, [r3, r2]
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	605a      	str	r2, [r3, #4]
            break;
 800e95e:	e05f      	b.n	800ea20 <LoRaMacMibGetRequestConfirm+0x280>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = MacCtx.NvmCtx->MacParams.JoinAcceptDelay2;
 800e960:	4a34      	ldr	r2, [pc, #208]	; (800ea34 <LoRaMacMibGetRequestConfirm+0x294>)
 800e962:	238e      	movs	r3, #142	; 0x8e
 800e964:	00db      	lsls	r3, r3, #3
 800e966:	58d3      	ldr	r3, [r2, r3]
 800e968:	22f0      	movs	r2, #240	; 0xf0
 800e96a:	589a      	ldr	r2, [r3, r2]
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	605a      	str	r2, [r3, #4]
            break;
 800e970:	e056      	b.n	800ea20 <LoRaMacMibGetRequestConfirm+0x280>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate;
 800e972:	4a30      	ldr	r2, [pc, #192]	; (800ea34 <LoRaMacMibGetRequestConfirm+0x294>)
 800e974:	238e      	movs	r3, #142	; 0x8e
 800e976:	00db      	lsls	r3, r3, #3
 800e978:	58d3      	ldr	r3, [r2, r3]
 800e97a:	2205      	movs	r2, #5
 800e97c:	569a      	ldrsb	r2, [r3, r2]
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	711a      	strb	r2, [r3, #4]
            break;
 800e982:	e04d      	b.n	800ea20 <LoRaMacMibGetRequestConfirm+0x280>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800e984:	4a2b      	ldr	r2, [pc, #172]	; (800ea34 <LoRaMacMibGetRequestConfirm+0x294>)
 800e986:	238e      	movs	r3, #142	; 0x8e
 800e988:	00db      	lsls	r3, r3, #3
 800e98a:	58d3      	ldr	r3, [r2, r3]
 800e98c:	22d5      	movs	r2, #213	; 0xd5
 800e98e:	569a      	ldrsb	r2, [r3, r2]
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	711a      	strb	r2, [r3, #4]
            break;
 800e994:	e044      	b.n	800ea20 <LoRaMacMibGetRequestConfirm+0x280>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower;
 800e996:	4a27      	ldr	r2, [pc, #156]	; (800ea34 <LoRaMacMibGetRequestConfirm+0x294>)
 800e998:	238e      	movs	r3, #142	; 0x8e
 800e99a:	00db      	lsls	r3, r3, #3
 800e99c:	58d3      	ldr	r3, [r2, r3]
 800e99e:	2204      	movs	r2, #4
 800e9a0:	569a      	ldrsb	r2, [r3, r2]
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	711a      	strb	r2, [r3, #4]
            break;
 800e9a6:	e03b      	b.n	800ea20 <LoRaMacMibGetRequestConfirm+0x280>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 800e9a8:	4a22      	ldr	r2, [pc, #136]	; (800ea34 <LoRaMacMibGetRequestConfirm+0x294>)
 800e9aa:	238e      	movs	r3, #142	; 0x8e
 800e9ac:	00db      	lsls	r3, r3, #3
 800e9ae:	58d3      	ldr	r3, [r2, r3]
 800e9b0:	22d4      	movs	r2, #212	; 0xd4
 800e9b2:	569a      	ldrsb	r2, [r3, r2]
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	711a      	strb	r2, [r3, #4]
            break;
 800e9b8:	e032      	b.n	800ea20 <LoRaMacMibGetRequestConfirm+0x280>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = MacCtx.NvmCtx->MacParams.SystemMaxRxError;
 800e9ba:	4a1e      	ldr	r2, [pc, #120]	; (800ea34 <LoRaMacMibGetRequestConfirm+0x294>)
 800e9bc:	238e      	movs	r3, #142	; 0x8e
 800e9be:	00db      	lsls	r3, r3, #3
 800e9c0:	58d3      	ldr	r3, [r2, r3]
 800e9c2:	22d8      	movs	r2, #216	; 0xd8
 800e9c4:	589a      	ldr	r2, [r3, r2]
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	605a      	str	r2, [r3, #4]
            break;
 800e9ca:	e029      	b.n	800ea20 <LoRaMacMibGetRequestConfirm+0x280>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = MacCtx.NvmCtx->MacParams.MinRxSymbols;
 800e9cc:	4a19      	ldr	r2, [pc, #100]	; (800ea34 <LoRaMacMibGetRequestConfirm+0x294>)
 800e9ce:	238e      	movs	r3, #142	; 0x8e
 800e9d0:	00db      	lsls	r3, r3, #3
 800e9d2:	58d3      	ldr	r3, [r2, r3]
 800e9d4:	22dc      	movs	r2, #220	; 0xdc
 800e9d6:	5c9a      	ldrb	r2, [r3, r2]
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	711a      	strb	r2, [r3, #4]
            break;
 800e9dc:	e020      	b.n	800ea20 <LoRaMacMibGetRequestConfirm+0x280>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 800e9de:	4a15      	ldr	r2, [pc, #84]	; (800ea34 <LoRaMacMibGetRequestConfirm+0x294>)
 800e9e0:	238e      	movs	r3, #142	; 0x8e
 800e9e2:	00db      	lsls	r3, r3, #3
 800e9e4:	58d2      	ldr	r2, [r2, r3]
 800e9e6:	2384      	movs	r3, #132	; 0x84
 800e9e8:	005b      	lsls	r3, r3, #1
 800e9ea:	58d2      	ldr	r2, [r2, r3]
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	605a      	str	r2, [r3, #4]
            break;
 800e9f0:	e016      	b.n	800ea20 <LoRaMacMibGetRequestConfirm+0x280>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = GetCtxs( );
 800e9f2:	f7fe ff2b 	bl	800d84c <GetCtxs>
 800e9f6:	0002      	movs	r2, r0
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	605a      	str	r2, [r3, #4]
            break;
 800e9fc:	e010      	b.n	800ea20 <LoRaMacMibGetRequestConfirm+0x280>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = MacCtx.NvmCtx->MacParamsDefaults.AntennaGain;
 800e9fe:	4a0d      	ldr	r2, [pc, #52]	; (800ea34 <LoRaMacMibGetRequestConfirm+0x294>)
 800ea00:	238e      	movs	r3, #142	; 0x8e
 800ea02:	00db      	lsls	r3, r3, #3
 800ea04:	58d3      	ldr	r3, [r2, r3]
 800ea06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	605a      	str	r2, [r3, #4]
            break;
 800ea0c:	e008      	b.n	800ea20 <LoRaMacMibGetRequestConfirm+0x280>
        }
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 800ea0e:	2317      	movs	r3, #23
 800ea10:	18fc      	adds	r4, r7, r3
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	0018      	movs	r0, r3
 800ea16:	f001 f93d 	bl	800fc94 <LoRaMacClassBMibGetRequestConfirm>
 800ea1a:	0003      	movs	r3, r0
 800ea1c:	7023      	strb	r3, [r4, #0]
            break;
 800ea1e:	46c0      	nop			; (mov r8, r8)
        }
    }
    return status;
 800ea20:	2317      	movs	r3, #23
 800ea22:	18fb      	adds	r3, r7, r3
 800ea24:	781b      	ldrb	r3, [r3, #0]
}
 800ea26:	0018      	movs	r0, r3
 800ea28:	46bd      	mov	sp, r7
 800ea2a:	b007      	add	sp, #28
 800ea2c:	bd90      	pop	{r4, r7, pc}
 800ea2e:	46c0      	nop			; (mov r8, r8)
 800ea30:	080208ec 	.word	0x080208ec
 800ea34:	2000070c 	.word	0x2000070c

0800ea38 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 800ea38:	b590      	push	{r4, r7, lr}
 800ea3a:	b089      	sub	sp, #36	; 0x24
 800ea3c:	af02      	add	r7, sp, #8
 800ea3e:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ea40:	2317      	movs	r3, #23
 800ea42:	18fb      	adds	r3, r7, r3
 800ea44:	2200      	movs	r2, #0
 800ea46:	701a      	strb	r2, [r3, #0]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d102      	bne.n	800ea54 <LoRaMacMibSetRequestConfirm+0x1c>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800ea4e:	2303      	movs	r3, #3
 800ea50:	f000 fc6b 	bl	800f32a <LoRaMacMibSetRequestConfirm+0x8f2>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 800ea54:	4ad2      	ldr	r2, [pc, #840]	; (800eda0 <LoRaMacMibSetRequestConfirm+0x368>)
 800ea56:	23d5      	movs	r3, #213	; 0xd5
 800ea58:	009b      	lsls	r3, r3, #2
 800ea5a:	58d3      	ldr	r3, [r2, r3]
 800ea5c:	2202      	movs	r2, #2
 800ea5e:	4013      	ands	r3, r2
 800ea60:	d002      	beq.n	800ea68 <LoRaMacMibSetRequestConfirm+0x30>
    {
        return LORAMAC_STATUS_BUSY;
 800ea62:	2301      	movs	r3, #1
 800ea64:	f000 fc61 	bl	800f32a <LoRaMacMibSetRequestConfirm+0x8f2>
    }

    switch( mibSet->Type )
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	781b      	ldrb	r3, [r3, #0]
 800ea6c:	2b30      	cmp	r3, #48	; 0x30
 800ea6e:	d901      	bls.n	800ea74 <LoRaMacMibSetRequestConfirm+0x3c>
 800ea70:	f000 fc1a 	bl	800f2a8 <LoRaMacMibSetRequestConfirm+0x870>
 800ea74:	009a      	lsls	r2, r3, #2
 800ea76:	4bcb      	ldr	r3, [pc, #812]	; (800eda4 <LoRaMacMibSetRequestConfirm+0x36c>)
 800ea78:	18d3      	adds	r3, r2, r3
 800ea7a:	681b      	ldr	r3, [r3, #0]
 800ea7c:	469f      	mov	pc, r3
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	791b      	ldrb	r3, [r3, #4]
 800ea82:	2217      	movs	r2, #23
 800ea84:	18bc      	adds	r4, r7, r2
 800ea86:	0018      	movs	r0, r3
 800ea88:	f7fd f844 	bl	800bb14 <SwitchClass>
 800ea8c:	0003      	movs	r3, r0
 800ea8e:	7023      	strb	r3, [r4, #0]
            break;
 800ea90:	f000 fc44 	bl	800f31c <LoRaMacMibSetRequestConfirm+0x8e4>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	791b      	ldrb	r3, [r3, #4]
 800ea98:	2b02      	cmp	r3, #2
 800ea9a:	d00a      	beq.n	800eab2 <LoRaMacMibSetRequestConfirm+0x7a>
            {
                MacCtx.NvmCtx->NetworkActivation = mibSet->Param.NetworkActivation;
 800ea9c:	4ac0      	ldr	r2, [pc, #768]	; (800eda0 <LoRaMacMibSetRequestConfirm+0x368>)
 800ea9e:	238e      	movs	r3, #142	; 0x8e
 800eaa0:	00db      	lsls	r3, r3, #3
 800eaa2:	58d2      	ldr	r2, [r2, r3]
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	7919      	ldrb	r1, [r3, #4]
 800eaa8:	2389      	movs	r3, #137	; 0x89
 800eaaa:	009b      	lsls	r3, r3, #2
 800eaac:	54d1      	strb	r1, [r2, r3]
            }
            else
            {   // Do not allow to set ACTIVATION_TYPE_OTAA since the MAC will set it automatically after a successful join process.
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800eaae:	f000 fc35 	bl	800f31c <LoRaMacMibSetRequestConfirm+0x8e4>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800eab2:	2317      	movs	r3, #23
 800eab4:	18fb      	adds	r3, r7, r3
 800eab6:	2203      	movs	r2, #3
 800eab8:	701a      	strb	r2, [r3, #0]
            break;
 800eaba:	f000 fc2f 	bl	800f31c <LoRaMacMibSetRequestConfirm+0x8e4>
        }
        case MIB_ADR:
        {
            MacCtx.NvmCtx->AdrCtrlOn = mibSet->Param.AdrEnable;
 800eabe:	4ab8      	ldr	r2, [pc, #736]	; (800eda0 <LoRaMacMibSetRequestConfirm+0x368>)
 800eac0:	238e      	movs	r3, #142	; 0x8e
 800eac2:	00db      	lsls	r3, r3, #3
 800eac4:	58d3      	ldr	r3, [r2, r3]
 800eac6:	687a      	ldr	r2, [r7, #4]
 800eac8:	7911      	ldrb	r1, [r2, #4]
 800eaca:	22ca      	movs	r2, #202	; 0xca
 800eacc:	5499      	strb	r1, [r3, r2]
            break;
 800eace:	f000 fc25 	bl	800f31c <LoRaMacMibSetRequestConfirm+0x8e4>
        }
        case MIB_NET_ID:
        {
            MacCtx.NvmCtx->NetID = mibSet->Param.NetID;
 800ead2:	4ab3      	ldr	r2, [pc, #716]	; (800eda0 <LoRaMacMibSetRequestConfirm+0x368>)
 800ead4:	238e      	movs	r3, #142	; 0x8e
 800ead6:	00db      	lsls	r3, r3, #3
 800ead8:	58d3      	ldr	r3, [r2, r3]
 800eada:	687a      	ldr	r2, [r7, #4]
 800eadc:	6852      	ldr	r2, [r2, #4]
 800eade:	641a      	str	r2, [r3, #64]	; 0x40
            break;
 800eae0:	f000 fc1c 	bl	800f31c <LoRaMacMibSetRequestConfirm+0x8e4>
        }
        case MIB_DEV_ADDR:
        {
            MacCtx.NvmCtx->DevAddr = mibSet->Param.DevAddr;
 800eae4:	4aae      	ldr	r2, [pc, #696]	; (800eda0 <LoRaMacMibSetRequestConfirm+0x368>)
 800eae6:	238e      	movs	r3, #142	; 0x8e
 800eae8:	00db      	lsls	r3, r3, #3
 800eaea:	58d3      	ldr	r3, [r2, r3]
 800eaec:	687a      	ldr	r2, [r7, #4]
 800eaee:	6852      	ldr	r2, [r2, #4]
 800eaf0:	645a      	str	r2, [r3, #68]	; 0x44
            break;
 800eaf2:	f000 fc13 	bl	800f31c <LoRaMacMibSetRequestConfirm+0x8e4>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	685b      	ldr	r3, [r3, #4]
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	d00c      	beq.n	800eb18 <LoRaMacMibSetRequestConfirm+0xe0>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	685b      	ldr	r3, [r3, #4]
 800eb02:	0019      	movs	r1, r3
 800eb04:	2000      	movs	r0, #0
 800eb06:	f002 fda9 	bl	801165c <LoRaMacCryptoSetKey>
 800eb0a:	1e03      	subs	r3, r0, #0
 800eb0c:	d101      	bne.n	800eb12 <LoRaMacMibSetRequestConfirm+0xda>
 800eb0e:	f000 fbd4 	bl	800f2ba <LoRaMacMibSetRequestConfirm+0x882>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800eb12:	2311      	movs	r3, #17
 800eb14:	f000 fc09 	bl	800f32a <LoRaMacMibSetRequestConfirm+0x8f2>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800eb18:	2317      	movs	r3, #23
 800eb1a:	18fb      	adds	r3, r7, r3
 800eb1c:	2203      	movs	r2, #3
 800eb1e:	701a      	strb	r2, [r3, #0]
            }
            break;
 800eb20:	f000 fbcb 	bl	800f2ba <LoRaMacMibSetRequestConfirm+0x882>
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	685b      	ldr	r3, [r3, #4]
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d00c      	beq.n	800eb46 <LoRaMacMibSetRequestConfirm+0x10e>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	685b      	ldr	r3, [r3, #4]
 800eb30:	0019      	movs	r1, r3
 800eb32:	2001      	movs	r0, #1
 800eb34:	f002 fd92 	bl	801165c <LoRaMacCryptoSetKey>
 800eb38:	1e03      	subs	r3, r0, #0
 800eb3a:	d101      	bne.n	800eb40 <LoRaMacMibSetRequestConfirm+0x108>
 800eb3c:	f000 fbbf 	bl	800f2be <LoRaMacMibSetRequestConfirm+0x886>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800eb40:	2311      	movs	r3, #17
 800eb42:	f000 fbf2 	bl	800f32a <LoRaMacMibSetRequestConfirm+0x8f2>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800eb46:	2317      	movs	r3, #23
 800eb48:	18fb      	adds	r3, r7, r3
 800eb4a:	2203      	movs	r2, #3
 800eb4c:	701a      	strb	r2, [r3, #0]
            }
            break;
 800eb4e:	f000 fbb6 	bl	800f2be <LoRaMacMibSetRequestConfirm+0x886>
        }
        case MIB_J_S_INT_KEY:
        {
            if( mibSet->Param.JSIntKey != NULL )
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	685b      	ldr	r3, [r3, #4]
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d00c      	beq.n	800eb74 <LoRaMacMibSetRequestConfirm+0x13c>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( J_S_INT_KEY, mibSet->Param.JSIntKey ) )
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	685b      	ldr	r3, [r3, #4]
 800eb5e:	0019      	movs	r1, r3
 800eb60:	2002      	movs	r0, #2
 800eb62:	f002 fd7b 	bl	801165c <LoRaMacCryptoSetKey>
 800eb66:	1e03      	subs	r3, r0, #0
 800eb68:	d101      	bne.n	800eb6e <LoRaMacMibSetRequestConfirm+0x136>
 800eb6a:	f000 fbaa 	bl	800f2c2 <LoRaMacMibSetRequestConfirm+0x88a>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800eb6e:	2311      	movs	r3, #17
 800eb70:	f000 fbdb 	bl	800f32a <LoRaMacMibSetRequestConfirm+0x8f2>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800eb74:	2317      	movs	r3, #23
 800eb76:	18fb      	adds	r3, r7, r3
 800eb78:	2203      	movs	r2, #3
 800eb7a:	701a      	strb	r2, [r3, #0]
            }
            break;
 800eb7c:	f000 fba1 	bl	800f2c2 <LoRaMacMibSetRequestConfirm+0x88a>
        }
        case MIB_J_S_ENC_KEY:
        {
            if( mibSet->Param.JSEncKey != NULL )
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	685b      	ldr	r3, [r3, #4]
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d00c      	beq.n	800eba2 <LoRaMacMibSetRequestConfirm+0x16a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( J_S_ENC_KEY, mibSet->Param.JSEncKey ) )
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	685b      	ldr	r3, [r3, #4]
 800eb8c:	0019      	movs	r1, r3
 800eb8e:	2003      	movs	r0, #3
 800eb90:	f002 fd64 	bl	801165c <LoRaMacCryptoSetKey>
 800eb94:	1e03      	subs	r3, r0, #0
 800eb96:	d101      	bne.n	800eb9c <LoRaMacMibSetRequestConfirm+0x164>
 800eb98:	f000 fb95 	bl	800f2c6 <LoRaMacMibSetRequestConfirm+0x88e>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800eb9c:	2311      	movs	r3, #17
 800eb9e:	f000 fbc4 	bl	800f32a <LoRaMacMibSetRequestConfirm+0x8f2>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800eba2:	2317      	movs	r3, #23
 800eba4:	18fb      	adds	r3, r7, r3
 800eba6:	2203      	movs	r2, #3
 800eba8:	701a      	strb	r2, [r3, #0]
            }
            break;
 800ebaa:	f000 fb8c 	bl	800f2c6 <LoRaMacMibSetRequestConfirm+0x88e>
        }
        case MIB_F_NWK_S_INT_KEY:
        {
            if( mibSet->Param.FNwkSIntKey != NULL )
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	685b      	ldr	r3, [r3, #4]
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d00c      	beq.n	800ebd0 <LoRaMacMibSetRequestConfirm+0x198>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( F_NWK_S_INT_KEY, mibSet->Param.FNwkSIntKey ) )
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	685b      	ldr	r3, [r3, #4]
 800ebba:	0019      	movs	r1, r3
 800ebbc:	2004      	movs	r0, #4
 800ebbe:	f002 fd4d 	bl	801165c <LoRaMacCryptoSetKey>
 800ebc2:	1e03      	subs	r3, r0, #0
 800ebc4:	d101      	bne.n	800ebca <LoRaMacMibSetRequestConfirm+0x192>
 800ebc6:	f000 fb80 	bl	800f2ca <LoRaMacMibSetRequestConfirm+0x892>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800ebca:	2311      	movs	r3, #17
 800ebcc:	f000 fbad 	bl	800f32a <LoRaMacMibSetRequestConfirm+0x8f2>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ebd0:	2317      	movs	r3, #23
 800ebd2:	18fb      	adds	r3, r7, r3
 800ebd4:	2203      	movs	r2, #3
 800ebd6:	701a      	strb	r2, [r3, #0]
            }
            break;
 800ebd8:	f000 fb77 	bl	800f2ca <LoRaMacMibSetRequestConfirm+0x892>
        }
        case MIB_S_NWK_S_INT_KEY:
        {
            if( mibSet->Param.SNwkSIntKey != NULL )
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	685b      	ldr	r3, [r3, #4]
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	d00c      	beq.n	800ebfe <LoRaMacMibSetRequestConfirm+0x1c6>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( S_NWK_S_INT_KEY, mibSet->Param.SNwkSIntKey ) )
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	685b      	ldr	r3, [r3, #4]
 800ebe8:	0019      	movs	r1, r3
 800ebea:	2005      	movs	r0, #5
 800ebec:	f002 fd36 	bl	801165c <LoRaMacCryptoSetKey>
 800ebf0:	1e03      	subs	r3, r0, #0
 800ebf2:	d101      	bne.n	800ebf8 <LoRaMacMibSetRequestConfirm+0x1c0>
 800ebf4:	f000 fb6b 	bl	800f2ce <LoRaMacMibSetRequestConfirm+0x896>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800ebf8:	2311      	movs	r3, #17
 800ebfa:	f000 fb96 	bl	800f32a <LoRaMacMibSetRequestConfirm+0x8f2>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ebfe:	2317      	movs	r3, #23
 800ec00:	18fb      	adds	r3, r7, r3
 800ec02:	2203      	movs	r2, #3
 800ec04:	701a      	strb	r2, [r3, #0]
            }
            break;
 800ec06:	f000 fb62 	bl	800f2ce <LoRaMacMibSetRequestConfirm+0x896>
        }
        case MIB_NWK_S_ENC_KEY:
        {
            if( mibSet->Param.NwkSEncKey != NULL )
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	685b      	ldr	r3, [r3, #4]
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d00b      	beq.n	800ec2a <LoRaMacMibSetRequestConfirm+0x1f2>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_ENC_KEY, mibSet->Param.NwkSEncKey ) )
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	685b      	ldr	r3, [r3, #4]
 800ec16:	0019      	movs	r1, r3
 800ec18:	2006      	movs	r0, #6
 800ec1a:	f002 fd1f 	bl	801165c <LoRaMacCryptoSetKey>
 800ec1e:	1e03      	subs	r3, r0, #0
 800ec20:	d100      	bne.n	800ec24 <LoRaMacMibSetRequestConfirm+0x1ec>
 800ec22:	e356      	b.n	800f2d2 <LoRaMacMibSetRequestConfirm+0x89a>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800ec24:	2311      	movs	r3, #17
 800ec26:	f000 fb80 	bl	800f32a <LoRaMacMibSetRequestConfirm+0x8f2>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ec2a:	2317      	movs	r3, #23
 800ec2c:	18fb      	adds	r3, r7, r3
 800ec2e:	2203      	movs	r2, #3
 800ec30:	701a      	strb	r2, [r3, #0]
            }
            break;
 800ec32:	e34e      	b.n	800f2d2 <LoRaMacMibSetRequestConfirm+0x89a>
        }
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	685b      	ldr	r3, [r3, #4]
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d00b      	beq.n	800ec54 <LoRaMacMibSetRequestConfirm+0x21c>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	685b      	ldr	r3, [r3, #4]
 800ec40:	0019      	movs	r1, r3
 800ec42:	2007      	movs	r0, #7
 800ec44:	f002 fd0a 	bl	801165c <LoRaMacCryptoSetKey>
 800ec48:	1e03      	subs	r3, r0, #0
 800ec4a:	d100      	bne.n	800ec4e <LoRaMacMibSetRequestConfirm+0x216>
 800ec4c:	e343      	b.n	800f2d6 <LoRaMacMibSetRequestConfirm+0x89e>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800ec4e:	2311      	movs	r3, #17
 800ec50:	f000 fb6b 	bl	800f32a <LoRaMacMibSetRequestConfirm+0x8f2>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ec54:	2317      	movs	r3, #23
 800ec56:	18fb      	adds	r3, r7, r3
 800ec58:	2203      	movs	r2, #3
 800ec5a:	701a      	strb	r2, [r3, #0]
            }
            break;
 800ec5c:	e33b      	b.n	800f2d6 <LoRaMacMibSetRequestConfirm+0x89e>
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	685b      	ldr	r3, [r3, #4]
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	d00b      	beq.n	800ec7e <LoRaMacMibSetRequestConfirm+0x246>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	685b      	ldr	r3, [r3, #4]
 800ec6a:	0019      	movs	r1, r3
 800ec6c:	207f      	movs	r0, #127	; 0x7f
 800ec6e:	f002 fcf5 	bl	801165c <LoRaMacCryptoSetKey>
 800ec72:	1e03      	subs	r3, r0, #0
 800ec74:	d100      	bne.n	800ec78 <LoRaMacMibSetRequestConfirm+0x240>
 800ec76:	e330      	b.n	800f2da <LoRaMacMibSetRequestConfirm+0x8a2>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800ec78:	2311      	movs	r3, #17
 800ec7a:	f000 fb56 	bl	800f32a <LoRaMacMibSetRequestConfirm+0x8f2>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ec7e:	2317      	movs	r3, #23
 800ec80:	18fb      	adds	r3, r7, r3
 800ec82:	2203      	movs	r2, #3
 800ec84:	701a      	strb	r2, [r3, #0]
            }
            break;
 800ec86:	e328      	b.n	800f2da <LoRaMacMibSetRequestConfirm+0x8a2>
        }
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	685b      	ldr	r3, [r3, #4]
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	d00a      	beq.n	800eca6 <LoRaMacMibSetRequestConfirm+0x26e>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	685b      	ldr	r3, [r3, #4]
 800ec94:	0019      	movs	r1, r3
 800ec96:	2080      	movs	r0, #128	; 0x80
 800ec98:	f002 fce0 	bl	801165c <LoRaMacCryptoSetKey>
 800ec9c:	1e03      	subs	r3, r0, #0
 800ec9e:	d100      	bne.n	800eca2 <LoRaMacMibSetRequestConfirm+0x26a>
 800eca0:	e31d      	b.n	800f2de <LoRaMacMibSetRequestConfirm+0x8a6>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800eca2:	2311      	movs	r3, #17
 800eca4:	e341      	b.n	800f32a <LoRaMacMibSetRequestConfirm+0x8f2>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800eca6:	2317      	movs	r3, #23
 800eca8:	18fb      	adds	r3, r7, r3
 800ecaa:	2203      	movs	r2, #3
 800ecac:	701a      	strb	r2, [r3, #0]
            }
            break;
 800ecae:	e316      	b.n	800f2de <LoRaMacMibSetRequestConfirm+0x8a6>
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	685b      	ldr	r3, [r3, #4]
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d00a      	beq.n	800ecce <LoRaMacMibSetRequestConfirm+0x296>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	685b      	ldr	r3, [r3, #4]
 800ecbc:	0019      	movs	r1, r3
 800ecbe:	2081      	movs	r0, #129	; 0x81
 800ecc0:	f002 fccc 	bl	801165c <LoRaMacCryptoSetKey>
 800ecc4:	1e03      	subs	r3, r0, #0
 800ecc6:	d100      	bne.n	800ecca <LoRaMacMibSetRequestConfirm+0x292>
 800ecc8:	e30b      	b.n	800f2e2 <LoRaMacMibSetRequestConfirm+0x8aa>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800ecca:	2311      	movs	r3, #17
 800eccc:	e32d      	b.n	800f32a <LoRaMacMibSetRequestConfirm+0x8f2>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ecce:	2317      	movs	r3, #23
 800ecd0:	18fb      	adds	r3, r7, r3
 800ecd2:	2203      	movs	r2, #3
 800ecd4:	701a      	strb	r2, [r3, #0]
            }
            break;
 800ecd6:	e304      	b.n	800f2e2 <LoRaMacMibSetRequestConfirm+0x8aa>
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	685b      	ldr	r3, [r3, #4]
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d00a      	beq.n	800ecf6 <LoRaMacMibSetRequestConfirm+0x2be>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	685b      	ldr	r3, [r3, #4]
 800ece4:	0019      	movs	r1, r3
 800ece6:	2082      	movs	r0, #130	; 0x82
 800ece8:	f002 fcb8 	bl	801165c <LoRaMacCryptoSetKey>
 800ecec:	1e03      	subs	r3, r0, #0
 800ecee:	d100      	bne.n	800ecf2 <LoRaMacMibSetRequestConfirm+0x2ba>
 800ecf0:	e2f9      	b.n	800f2e6 <LoRaMacMibSetRequestConfirm+0x8ae>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800ecf2:	2311      	movs	r3, #17
 800ecf4:	e319      	b.n	800f32a <LoRaMacMibSetRequestConfirm+0x8f2>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ecf6:	2317      	movs	r3, #23
 800ecf8:	18fb      	adds	r3, r7, r3
 800ecfa:	2203      	movs	r2, #3
 800ecfc:	701a      	strb	r2, [r3, #0]
            }
            break;
 800ecfe:	e2f2      	b.n	800f2e6 <LoRaMacMibSetRequestConfirm+0x8ae>
        }
        case MIB_MC_KEY_1:
        {
            if( mibSet->Param.McKey1 != NULL )
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	685b      	ldr	r3, [r3, #4]
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d00a      	beq.n	800ed1e <LoRaMacMibSetRequestConfirm+0x2e6>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_1, mibSet->Param.McKey1 ) )
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	685b      	ldr	r3, [r3, #4]
 800ed0c:	0019      	movs	r1, r3
 800ed0e:	2083      	movs	r0, #131	; 0x83
 800ed10:	f002 fca4 	bl	801165c <LoRaMacCryptoSetKey>
 800ed14:	1e03      	subs	r3, r0, #0
 800ed16:	d100      	bne.n	800ed1a <LoRaMacMibSetRequestConfirm+0x2e2>
 800ed18:	e2e7      	b.n	800f2ea <LoRaMacMibSetRequestConfirm+0x8b2>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800ed1a:	2311      	movs	r3, #17
 800ed1c:	e305      	b.n	800f32a <LoRaMacMibSetRequestConfirm+0x8f2>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ed1e:	2317      	movs	r3, #23
 800ed20:	18fb      	adds	r3, r7, r3
 800ed22:	2203      	movs	r2, #3
 800ed24:	701a      	strb	r2, [r3, #0]
            }
            break;
 800ed26:	e2e0      	b.n	800f2ea <LoRaMacMibSetRequestConfirm+0x8b2>
        }
        case MIB_MC_APP_S_KEY_1:
        {
            if( mibSet->Param.McAppSKey1 != NULL )
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	685b      	ldr	r3, [r3, #4]
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	d00a      	beq.n	800ed46 <LoRaMacMibSetRequestConfirm+0x30e>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_1, mibSet->Param.McAppSKey1 ) )
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	685b      	ldr	r3, [r3, #4]
 800ed34:	0019      	movs	r1, r3
 800ed36:	2084      	movs	r0, #132	; 0x84
 800ed38:	f002 fc90 	bl	801165c <LoRaMacCryptoSetKey>
 800ed3c:	1e03      	subs	r3, r0, #0
 800ed3e:	d100      	bne.n	800ed42 <LoRaMacMibSetRequestConfirm+0x30a>
 800ed40:	e2d5      	b.n	800f2ee <LoRaMacMibSetRequestConfirm+0x8b6>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800ed42:	2311      	movs	r3, #17
 800ed44:	e2f1      	b.n	800f32a <LoRaMacMibSetRequestConfirm+0x8f2>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ed46:	2317      	movs	r3, #23
 800ed48:	18fb      	adds	r3, r7, r3
 800ed4a:	2203      	movs	r2, #3
 800ed4c:	701a      	strb	r2, [r3, #0]
            }
            break;
 800ed4e:	e2ce      	b.n	800f2ee <LoRaMacMibSetRequestConfirm+0x8b6>
        }
        case MIB_MC_NWK_S_KEY_1:
        {
            if( mibSet->Param.McNwkSKey1 != NULL )
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	685b      	ldr	r3, [r3, #4]
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d00a      	beq.n	800ed6e <LoRaMacMibSetRequestConfirm+0x336>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_1, mibSet->Param.McNwkSKey1 ) )
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	685b      	ldr	r3, [r3, #4]
 800ed5c:	0019      	movs	r1, r3
 800ed5e:	2085      	movs	r0, #133	; 0x85
 800ed60:	f002 fc7c 	bl	801165c <LoRaMacCryptoSetKey>
 800ed64:	1e03      	subs	r3, r0, #0
 800ed66:	d100      	bne.n	800ed6a <LoRaMacMibSetRequestConfirm+0x332>
 800ed68:	e2c3      	b.n	800f2f2 <LoRaMacMibSetRequestConfirm+0x8ba>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800ed6a:	2311      	movs	r3, #17
 800ed6c:	e2dd      	b.n	800f32a <LoRaMacMibSetRequestConfirm+0x8f2>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ed6e:	2317      	movs	r3, #23
 800ed70:	18fb      	adds	r3, r7, r3
 800ed72:	2203      	movs	r2, #3
 800ed74:	701a      	strb	r2, [r3, #0]
            }
            break;
 800ed76:	e2bc      	b.n	800f2f2 <LoRaMacMibSetRequestConfirm+0x8ba>
        }
        case MIB_MC_KEY_2:
        {
            if( mibSet->Param.McKey2 != NULL )
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	685b      	ldr	r3, [r3, #4]
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	d00a      	beq.n	800ed96 <LoRaMacMibSetRequestConfirm+0x35e>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_2, mibSet->Param.McKey2 ) )
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	685b      	ldr	r3, [r3, #4]
 800ed84:	0019      	movs	r1, r3
 800ed86:	2086      	movs	r0, #134	; 0x86
 800ed88:	f002 fc68 	bl	801165c <LoRaMacCryptoSetKey>
 800ed8c:	1e03      	subs	r3, r0, #0
 800ed8e:	d100      	bne.n	800ed92 <LoRaMacMibSetRequestConfirm+0x35a>
 800ed90:	e2b1      	b.n	800f2f6 <LoRaMacMibSetRequestConfirm+0x8be>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800ed92:	2311      	movs	r3, #17
 800ed94:	e2c9      	b.n	800f32a <LoRaMacMibSetRequestConfirm+0x8f2>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ed96:	2317      	movs	r3, #23
 800ed98:	18fb      	adds	r3, r7, r3
 800ed9a:	2203      	movs	r2, #3
 800ed9c:	701a      	strb	r2, [r3, #0]
            }
            break;
 800ed9e:	e2aa      	b.n	800f2f6 <LoRaMacMibSetRequestConfirm+0x8be>
 800eda0:	2000070c 	.word	0x2000070c
 800eda4:	080209ac 	.word	0x080209ac
        }
        case MIB_MC_APP_S_KEY_2:
        {
            if( mibSet->Param.McAppSKey2 != NULL )
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	685b      	ldr	r3, [r3, #4]
 800edac:	2b00      	cmp	r3, #0
 800edae:	d00a      	beq.n	800edc6 <LoRaMacMibSetRequestConfirm+0x38e>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_2, mibSet->Param.McAppSKey2 ) )
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	685b      	ldr	r3, [r3, #4]
 800edb4:	0019      	movs	r1, r3
 800edb6:	2087      	movs	r0, #135	; 0x87
 800edb8:	f002 fc50 	bl	801165c <LoRaMacCryptoSetKey>
 800edbc:	1e03      	subs	r3, r0, #0
 800edbe:	d100      	bne.n	800edc2 <LoRaMacMibSetRequestConfirm+0x38a>
 800edc0:	e29b      	b.n	800f2fa <LoRaMacMibSetRequestConfirm+0x8c2>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800edc2:	2311      	movs	r3, #17
 800edc4:	e2b1      	b.n	800f32a <LoRaMacMibSetRequestConfirm+0x8f2>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800edc6:	2317      	movs	r3, #23
 800edc8:	18fb      	adds	r3, r7, r3
 800edca:	2203      	movs	r2, #3
 800edcc:	701a      	strb	r2, [r3, #0]
            }
            break;
 800edce:	e294      	b.n	800f2fa <LoRaMacMibSetRequestConfirm+0x8c2>
        }
        case MIB_MC_NWK_S_KEY_2:
        {
            if( mibSet->Param.McNwkSKey2 != NULL )
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	685b      	ldr	r3, [r3, #4]
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	d00a      	beq.n	800edee <LoRaMacMibSetRequestConfirm+0x3b6>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_2, mibSet->Param.McNwkSKey2 ) )
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	685b      	ldr	r3, [r3, #4]
 800eddc:	0019      	movs	r1, r3
 800edde:	2088      	movs	r0, #136	; 0x88
 800ede0:	f002 fc3c 	bl	801165c <LoRaMacCryptoSetKey>
 800ede4:	1e03      	subs	r3, r0, #0
 800ede6:	d100      	bne.n	800edea <LoRaMacMibSetRequestConfirm+0x3b2>
 800ede8:	e289      	b.n	800f2fe <LoRaMacMibSetRequestConfirm+0x8c6>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800edea:	2311      	movs	r3, #17
 800edec:	e29d      	b.n	800f32a <LoRaMacMibSetRequestConfirm+0x8f2>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800edee:	2317      	movs	r3, #23
 800edf0:	18fb      	adds	r3, r7, r3
 800edf2:	2203      	movs	r2, #3
 800edf4:	701a      	strb	r2, [r3, #0]
            }
            break;
 800edf6:	e282      	b.n	800f2fe <LoRaMacMibSetRequestConfirm+0x8c6>
        }
        case MIB_MC_KEY_3:
        {
            if( mibSet->Param.McKey3 != NULL )
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	685b      	ldr	r3, [r3, #4]
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	d00a      	beq.n	800ee16 <LoRaMacMibSetRequestConfirm+0x3de>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_3, mibSet->Param.McKey3 ) )
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	685b      	ldr	r3, [r3, #4]
 800ee04:	0019      	movs	r1, r3
 800ee06:	2089      	movs	r0, #137	; 0x89
 800ee08:	f002 fc28 	bl	801165c <LoRaMacCryptoSetKey>
 800ee0c:	1e03      	subs	r3, r0, #0
 800ee0e:	d100      	bne.n	800ee12 <LoRaMacMibSetRequestConfirm+0x3da>
 800ee10:	e277      	b.n	800f302 <LoRaMacMibSetRequestConfirm+0x8ca>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800ee12:	2311      	movs	r3, #17
 800ee14:	e289      	b.n	800f32a <LoRaMacMibSetRequestConfirm+0x8f2>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ee16:	2317      	movs	r3, #23
 800ee18:	18fb      	adds	r3, r7, r3
 800ee1a:	2203      	movs	r2, #3
 800ee1c:	701a      	strb	r2, [r3, #0]
            }
            break;
 800ee1e:	e270      	b.n	800f302 <LoRaMacMibSetRequestConfirm+0x8ca>
        }
        case MIB_MC_APP_S_KEY_3:
        {
            if( mibSet->Param.McAppSKey3 != NULL )
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	685b      	ldr	r3, [r3, #4]
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d00a      	beq.n	800ee3e <LoRaMacMibSetRequestConfirm+0x406>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_3, mibSet->Param.McAppSKey3 ) )
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	685b      	ldr	r3, [r3, #4]
 800ee2c:	0019      	movs	r1, r3
 800ee2e:	208a      	movs	r0, #138	; 0x8a
 800ee30:	f002 fc14 	bl	801165c <LoRaMacCryptoSetKey>
 800ee34:	1e03      	subs	r3, r0, #0
 800ee36:	d100      	bne.n	800ee3a <LoRaMacMibSetRequestConfirm+0x402>
 800ee38:	e265      	b.n	800f306 <LoRaMacMibSetRequestConfirm+0x8ce>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800ee3a:	2311      	movs	r3, #17
 800ee3c:	e275      	b.n	800f32a <LoRaMacMibSetRequestConfirm+0x8f2>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ee3e:	2317      	movs	r3, #23
 800ee40:	18fb      	adds	r3, r7, r3
 800ee42:	2203      	movs	r2, #3
 800ee44:	701a      	strb	r2, [r3, #0]
            }
            break;
 800ee46:	e25e      	b.n	800f306 <LoRaMacMibSetRequestConfirm+0x8ce>
        }
        case MIB_MC_NWK_S_KEY_3:
        {
            if( mibSet->Param.McNwkSKey3 != NULL )
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	685b      	ldr	r3, [r3, #4]
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	d00a      	beq.n	800ee66 <LoRaMacMibSetRequestConfirm+0x42e>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_3, mibSet->Param.McNwkSKey3 ) )
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	685b      	ldr	r3, [r3, #4]
 800ee54:	0019      	movs	r1, r3
 800ee56:	208b      	movs	r0, #139	; 0x8b
 800ee58:	f002 fc00 	bl	801165c <LoRaMacCryptoSetKey>
 800ee5c:	1e03      	subs	r3, r0, #0
 800ee5e:	d100      	bne.n	800ee62 <LoRaMacMibSetRequestConfirm+0x42a>
 800ee60:	e253      	b.n	800f30a <LoRaMacMibSetRequestConfirm+0x8d2>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800ee62:	2311      	movs	r3, #17
 800ee64:	e261      	b.n	800f32a <LoRaMacMibSetRequestConfirm+0x8f2>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ee66:	2317      	movs	r3, #23
 800ee68:	18fb      	adds	r3, r7, r3
 800ee6a:	2203      	movs	r2, #3
 800ee6c:	701a      	strb	r2, [r3, #0]
            }
            break;
 800ee6e:	e24c      	b.n	800f30a <LoRaMacMibSetRequestConfirm+0x8d2>
        }
        case MIB_PUBLIC_NETWORK:
        {
            MacCtx.NvmCtx->PublicNetwork = mibSet->Param.EnablePublicNetwork;
 800ee70:	4adb      	ldr	r2, [pc, #876]	; (800f1e0 <LoRaMacMibSetRequestConfirm+0x7a8>)
 800ee72:	238e      	movs	r3, #142	; 0x8e
 800ee74:	00db      	lsls	r3, r3, #3
 800ee76:	58d3      	ldr	r3, [r2, r3]
 800ee78:	687a      	ldr	r2, [r7, #4]
 800ee7a:	7911      	ldrb	r1, [r2, #4]
 800ee7c:	22c9      	movs	r2, #201	; 0xc9
 800ee7e:	5499      	strb	r1, [r3, r2]
            Radio.SetPublicNetwork( MacCtx.NvmCtx->PublicNetwork );
 800ee80:	4bd8      	ldr	r3, [pc, #864]	; (800f1e4 <LoRaMacMibSetRequestConfirm+0x7ac>)
 800ee82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ee84:	49d6      	ldr	r1, [pc, #856]	; (800f1e0 <LoRaMacMibSetRequestConfirm+0x7a8>)
 800ee86:	228e      	movs	r2, #142	; 0x8e
 800ee88:	00d2      	lsls	r2, r2, #3
 800ee8a:	588a      	ldr	r2, [r1, r2]
 800ee8c:	21c9      	movs	r1, #201	; 0xc9
 800ee8e:	5c52      	ldrb	r2, [r2, r1]
 800ee90:	0010      	movs	r0, r2
 800ee92:	4798      	blx	r3
            break;
 800ee94:	e242      	b.n	800f31c <LoRaMacMibSetRequestConfirm+0x8e4>
        }
        case MIB_REPEATER_SUPPORT:
        {
            MacCtx.NvmCtx->RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 800ee96:	4ad2      	ldr	r2, [pc, #840]	; (800f1e0 <LoRaMacMibSetRequestConfirm+0x7a8>)
 800ee98:	238e      	movs	r3, #142	; 0x8e
 800ee9a:	00db      	lsls	r3, r3, #3
 800ee9c:	58d2      	ldr	r2, [r2, r3]
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	7919      	ldrb	r1, [r3, #4]
 800eea2:	2316      	movs	r3, #22
 800eea4:	33ff      	adds	r3, #255	; 0xff
 800eea6:	54d1      	strb	r1, [r2, r3]
            break;
 800eea8:	e238      	b.n	800f31c <LoRaMacMibSetRequestConfirm+0x8e4>
        }
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	7a1b      	ldrb	r3, [r3, #8]
 800eeae:	b25a      	sxtb	r2, r3
 800eeb0:	2108      	movs	r1, #8
 800eeb2:	187b      	adds	r3, r7, r1
 800eeb4:	701a      	strb	r2, [r3, #0]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800eeb6:	4aca      	ldr	r2, [pc, #808]	; (800f1e0 <LoRaMacMibSetRequestConfirm+0x7a8>)
 800eeb8:	238e      	movs	r3, #142	; 0x8e
 800eeba:	00db      	lsls	r3, r3, #3
 800eebc:	58d2      	ldr	r2, [r2, r3]
 800eebe:	2302      	movs	r3, #2
 800eec0:	33ff      	adds	r3, #255	; 0xff
 800eec2:	5cd2      	ldrb	r2, [r2, r3]
 800eec4:	187b      	adds	r3, r7, r1
 800eec6:	705a      	strb	r2, [r3, #1]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 800eec8:	4ac5      	ldr	r2, [pc, #788]	; (800f1e0 <LoRaMacMibSetRequestConfirm+0x7a8>)
 800eeca:	238e      	movs	r3, #142	; 0x8e
 800eecc:	00db      	lsls	r3, r3, #3
 800eece:	58d3      	ldr	r3, [r2, r3]
 800eed0:	781b      	ldrb	r3, [r3, #0]
 800eed2:	1879      	adds	r1, r7, r1
 800eed4:	2206      	movs	r2, #6
 800eed6:	0018      	movs	r0, r3
 800eed8:	f003 feac 	bl	8012c34 <RegionVerify>
 800eedc:	1e03      	subs	r3, r0, #0
 800eede:	d040      	beq.n	800ef62 <LoRaMacMibSetRequestConfirm+0x52a>
            {
                MacCtx.NvmCtx->MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 800eee0:	4abf      	ldr	r2, [pc, #764]	; (800f1e0 <LoRaMacMibSetRequestConfirm+0x7a8>)
 800eee2:	238e      	movs	r3, #142	; 0x8e
 800eee4:	00db      	lsls	r3, r3, #3
 800eee6:	58d3      	ldr	r3, [r2, r3]
 800eee8:	21f8      	movs	r1, #248	; 0xf8
 800eeea:	687a      	ldr	r2, [r7, #4]
 800eeec:	185b      	adds	r3, r3, r1
 800eeee:	3204      	adds	r2, #4
 800eef0:	ca03      	ldmia	r2!, {r0, r1}
 800eef2:	c303      	stmia	r3!, {r0, r1}

                if( ( MacCtx.NvmCtx->DeviceClass == CLASS_C ) && ( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE ) )
 800eef4:	4aba      	ldr	r2, [pc, #744]	; (800f1e0 <LoRaMacMibSetRequestConfirm+0x7a8>)
 800eef6:	238e      	movs	r3, #142	; 0x8e
 800eef8:	00db      	lsls	r3, r3, #3
 800eefa:	58d3      	ldr	r3, [r2, r3]
 800eefc:	22c8      	movs	r2, #200	; 0xc8
 800eefe:	5c9b      	ldrb	r3, [r3, r2]
 800ef00:	2b02      	cmp	r3, #2
 800ef02:	d000      	beq.n	800ef06 <LoRaMacMibSetRequestConfirm+0x4ce>
 800ef04:	e203      	b.n	800f30e <LoRaMacMibSetRequestConfirm+0x8d6>
 800ef06:	4ab6      	ldr	r2, [pc, #728]	; (800f1e0 <LoRaMacMibSetRequestConfirm+0x7a8>)
 800ef08:	238e      	movs	r3, #142	; 0x8e
 800ef0a:	00db      	lsls	r3, r3, #3
 800ef0c:	58d2      	ldr	r2, [r2, r3]
 800ef0e:	2389      	movs	r3, #137	; 0x89
 800ef10:	009b      	lsls	r3, r3, #2
 800ef12:	5cd3      	ldrb	r3, [r2, r3]
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d100      	bne.n	800ef1a <LoRaMacMibSetRequestConfirm+0x4e2>
 800ef18:	e1f9      	b.n	800f30e <LoRaMacMibSetRequestConfirm+0x8d6>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 800ef1a:	4bb2      	ldr	r3, [pc, #712]	; (800f1e4 <LoRaMacMibSetRequestConfirm+0x7ac>)
 800ef1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ef1e:	4798      	blx	r3
                    // Compute Rx2 windows parameters
                    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800ef20:	4aaf      	ldr	r2, [pc, #700]	; (800f1e0 <LoRaMacMibSetRequestConfirm+0x7a8>)
 800ef22:	238e      	movs	r3, #142	; 0x8e
 800ef24:	00db      	lsls	r3, r3, #3
 800ef26:	58d3      	ldr	r3, [r2, r3]
 800ef28:	7818      	ldrb	r0, [r3, #0]
                                                     MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate,
 800ef2a:	4aad      	ldr	r2, [pc, #692]	; (800f1e0 <LoRaMacMibSetRequestConfirm+0x7a8>)
 800ef2c:	238e      	movs	r3, #142	; 0x8e
 800ef2e:	00db      	lsls	r3, r3, #3
 800ef30:	58d3      	ldr	r3, [r2, r3]
 800ef32:	22fc      	movs	r2, #252	; 0xfc
 800ef34:	5c9b      	ldrb	r3, [r3, r2]
                    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800ef36:	b259      	sxtb	r1, r3
                                                     MacCtx.NvmCtx->MacParams.MinRxSymbols,
 800ef38:	4aa9      	ldr	r2, [pc, #676]	; (800f1e0 <LoRaMacMibSetRequestConfirm+0x7a8>)
 800ef3a:	238e      	movs	r3, #142	; 0x8e
 800ef3c:	00db      	lsls	r3, r3, #3
 800ef3e:	58d3      	ldr	r3, [r2, r3]
                    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800ef40:	22dc      	movs	r2, #220	; 0xdc
 800ef42:	5c9c      	ldrb	r4, [r3, r2]
                                                     MacCtx.NvmCtx->MacParams.SystemMaxRxError,
 800ef44:	4aa6      	ldr	r2, [pc, #664]	; (800f1e0 <LoRaMacMibSetRequestConfirm+0x7a8>)
 800ef46:	238e      	movs	r3, #142	; 0x8e
 800ef48:	00db      	lsls	r3, r3, #3
 800ef4a:	58d3      	ldr	r3, [r2, r3]
                    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800ef4c:	22d8      	movs	r2, #216	; 0xd8
 800ef4e:	589a      	ldr	r2, [r3, r2]
 800ef50:	4ba5      	ldr	r3, [pc, #660]	; (800f1e8 <LoRaMacMibSetRequestConfirm+0x7b0>)
 800ef52:	9300      	str	r3, [sp, #0]
 800ef54:	0013      	movs	r3, r2
 800ef56:	0022      	movs	r2, r4
 800ef58:	f003 feb4 	bl	8012cc4 <RegionComputeRxWindowParameters>
                                                     &MacCtx.RxWindow2Config );
                    OpenContinuousRx2Window( );
 800ef5c:	f7fe f9ce 	bl	800d2fc <OpenContinuousRx2Window>
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800ef60:	e1d5      	b.n	800f30e <LoRaMacMibSetRequestConfirm+0x8d6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ef62:	2317      	movs	r3, #23
 800ef64:	18fb      	adds	r3, r7, r3
 800ef66:	2203      	movs	r2, #3
 800ef68:	701a      	strb	r2, [r3, #0]
            break;
 800ef6a:	e1d0      	b.n	800f30e <LoRaMacMibSetRequestConfirm+0x8d6>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	7a1b      	ldrb	r3, [r3, #8]
 800ef70:	b25a      	sxtb	r2, r3
 800ef72:	2108      	movs	r1, #8
 800ef74:	187b      	adds	r3, r7, r1
 800ef76:	701a      	strb	r2, [r3, #0]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800ef78:	4a99      	ldr	r2, [pc, #612]	; (800f1e0 <LoRaMacMibSetRequestConfirm+0x7a8>)
 800ef7a:	238e      	movs	r3, #142	; 0x8e
 800ef7c:	00db      	lsls	r3, r3, #3
 800ef7e:	58d2      	ldr	r2, [r2, r3]
 800ef80:	2302      	movs	r3, #2
 800ef82:	33ff      	adds	r3, #255	; 0xff
 800ef84:	5cd2      	ldrb	r2, [r2, r3]
 800ef86:	187b      	adds	r3, r7, r1
 800ef88:	705a      	strb	r2, [r3, #1]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 800ef8a:	4a95      	ldr	r2, [pc, #596]	; (800f1e0 <LoRaMacMibSetRequestConfirm+0x7a8>)
 800ef8c:	238e      	movs	r3, #142	; 0x8e
 800ef8e:	00db      	lsls	r3, r3, #3
 800ef90:	58d3      	ldr	r3, [r2, r3]
 800ef92:	781b      	ldrb	r3, [r3, #0]
 800ef94:	1879      	adds	r1, r7, r1
 800ef96:	2206      	movs	r2, #6
 800ef98:	0018      	movs	r0, r3
 800ef9a:	f003 fe4b 	bl	8012c34 <RegionVerify>
 800ef9e:	1e03      	subs	r3, r0, #0
 800efa0:	d009      	beq.n	800efb6 <LoRaMacMibSetRequestConfirm+0x57e>
            {
                MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 800efa2:	4a8f      	ldr	r2, [pc, #572]	; (800f1e0 <LoRaMacMibSetRequestConfirm+0x7a8>)
 800efa4:	238e      	movs	r3, #142	; 0x8e
 800efa6:	00db      	lsls	r3, r3, #3
 800efa8:	58d3      	ldr	r3, [r2, r3]
 800efaa:	687a      	ldr	r2, [r7, #4]
 800efac:	3328      	adds	r3, #40	; 0x28
 800efae:	3204      	adds	r2, #4
 800efb0:	ca03      	ldmia	r2!, {r0, r1}
 800efb2:	c303      	stmia	r3!, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800efb4:	e1b2      	b.n	800f31c <LoRaMacMibSetRequestConfirm+0x8e4>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800efb6:	2317      	movs	r3, #23
 800efb8:	18fb      	adds	r3, r7, r3
 800efba:	2203      	movs	r2, #3
 800efbc:	701a      	strb	r2, [r3, #0]
            break;
 800efbe:	e1ad      	b.n	800f31c <LoRaMacMibSetRequestConfirm+0x8e4>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	685a      	ldr	r2, [r3, #4]
 800efc4:	210c      	movs	r1, #12
 800efc6:	187b      	adds	r3, r7, r1
 800efc8:	601a      	str	r2, [r3, #0]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 800efca:	187b      	adds	r3, r7, r1
 800efcc:	2201      	movs	r2, #1
 800efce:	711a      	strb	r2, [r3, #4]

            if( RegionChanMaskSet( MacCtx.NvmCtx->Region, &chanMaskSet ) == false )
 800efd0:	4a83      	ldr	r2, [pc, #524]	; (800f1e0 <LoRaMacMibSetRequestConfirm+0x7a8>)
 800efd2:	238e      	movs	r3, #142	; 0x8e
 800efd4:	00db      	lsls	r3, r3, #3
 800efd6:	58d3      	ldr	r3, [r2, r3]
 800efd8:	781b      	ldrb	r3, [r3, #0]
 800efda:	187a      	adds	r2, r7, r1
 800efdc:	0011      	movs	r1, r2
 800efde:	0018      	movs	r0, r3
 800efe0:	f003 fe5a 	bl	8012c98 <RegionChanMaskSet>
 800efe4:	0003      	movs	r3, r0
 800efe6:	001a      	movs	r2, r3
 800efe8:	2301      	movs	r3, #1
 800efea:	4053      	eors	r3, r2
 800efec:	b2db      	uxtb	r3, r3
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d100      	bne.n	800eff4 <LoRaMacMibSetRequestConfirm+0x5bc>
 800eff2:	e18e      	b.n	800f312 <LoRaMacMibSetRequestConfirm+0x8da>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800eff4:	2317      	movs	r3, #23
 800eff6:	18fb      	adds	r3, r7, r3
 800eff8:	2203      	movs	r2, #3
 800effa:	701a      	strb	r2, [r3, #0]
            }
            break;
 800effc:	e189      	b.n	800f312 <LoRaMacMibSetRequestConfirm+0x8da>
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	685a      	ldr	r2, [r3, #4]
 800f002:	210c      	movs	r1, #12
 800f004:	187b      	adds	r3, r7, r1
 800f006:	601a      	str	r2, [r3, #0]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 800f008:	187b      	adds	r3, r7, r1
 800f00a:	2200      	movs	r2, #0
 800f00c:	711a      	strb	r2, [r3, #4]

            if( RegionChanMaskSet( MacCtx.NvmCtx->Region, &chanMaskSet ) == false )
 800f00e:	4a74      	ldr	r2, [pc, #464]	; (800f1e0 <LoRaMacMibSetRequestConfirm+0x7a8>)
 800f010:	238e      	movs	r3, #142	; 0x8e
 800f012:	00db      	lsls	r3, r3, #3
 800f014:	58d3      	ldr	r3, [r2, r3]
 800f016:	781b      	ldrb	r3, [r3, #0]
 800f018:	187a      	adds	r2, r7, r1
 800f01a:	0011      	movs	r1, r2
 800f01c:	0018      	movs	r0, r3
 800f01e:	f003 fe3b 	bl	8012c98 <RegionChanMaskSet>
 800f022:	0003      	movs	r3, r0
 800f024:	001a      	movs	r2, r3
 800f026:	2301      	movs	r3, #1
 800f028:	4053      	eors	r3, r2
 800f02a:	b2db      	uxtb	r3, r3
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	d100      	bne.n	800f032 <LoRaMacMibSetRequestConfirm+0x5fa>
 800f030:	e171      	b.n	800f316 <LoRaMacMibSetRequestConfirm+0x8de>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f032:	2317      	movs	r3, #23
 800f034:	18fb      	adds	r3, r7, r3
 800f036:	2203      	movs	r2, #3
 800f038:	701a      	strb	r2, [r3, #0]
            }
            break;
 800f03a:	e16c      	b.n	800f316 <LoRaMacMibSetRequestConfirm+0x8de>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	791b      	ldrb	r3, [r3, #4]
 800f040:	2b00      	cmp	r3, #0
 800f042:	d00c      	beq.n	800f05e <LoRaMacMibSetRequestConfirm+0x626>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	791b      	ldrb	r3, [r3, #4]
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 800f048:	2b0f      	cmp	r3, #15
 800f04a:	d808      	bhi.n	800f05e <LoRaMacMibSetRequestConfirm+0x626>
            {
                MacCtx.NvmCtx->MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 800f04c:	4a64      	ldr	r2, [pc, #400]	; (800f1e0 <LoRaMacMibSetRequestConfirm+0x7a8>)
 800f04e:	238e      	movs	r3, #142	; 0x8e
 800f050:	00db      	lsls	r3, r3, #3
 800f052:	58d3      	ldr	r3, [r2, r3]
 800f054:	687a      	ldr	r2, [r7, #4]
 800f056:	7911      	ldrb	r1, [r2, #4]
 800f058:	22f4      	movs	r2, #244	; 0xf4
 800f05a:	5499      	strb	r1, [r3, r2]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800f05c:	e15e      	b.n	800f31c <LoRaMacMibSetRequestConfirm+0x8e4>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f05e:	2317      	movs	r3, #23
 800f060:	18fb      	adds	r3, r7, r3
 800f062:	2203      	movs	r2, #3
 800f064:	701a      	strb	r2, [r3, #0]
            break;
 800f066:	e159      	b.n	800f31c <LoRaMacMibSetRequestConfirm+0x8e4>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            MacCtx.NvmCtx->MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 800f068:	4a5d      	ldr	r2, [pc, #372]	; (800f1e0 <LoRaMacMibSetRequestConfirm+0x7a8>)
 800f06a:	238e      	movs	r3, #142	; 0x8e
 800f06c:	00db      	lsls	r3, r3, #3
 800f06e:	58d2      	ldr	r2, [r2, r3]
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	685b      	ldr	r3, [r3, #4]
 800f074:	21e0      	movs	r1, #224	; 0xe0
 800f076:	5053      	str	r3, [r2, r1]
            break;
 800f078:	e150      	b.n	800f31c <LoRaMacMibSetRequestConfirm+0x8e4>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            MacCtx.NvmCtx->MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 800f07a:	4a59      	ldr	r2, [pc, #356]	; (800f1e0 <LoRaMacMibSetRequestConfirm+0x7a8>)
 800f07c:	238e      	movs	r3, #142	; 0x8e
 800f07e:	00db      	lsls	r3, r3, #3
 800f080:	58d2      	ldr	r2, [r2, r3]
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	685b      	ldr	r3, [r3, #4]
 800f086:	21e4      	movs	r1, #228	; 0xe4
 800f088:	5053      	str	r3, [r2, r1]
            break;
 800f08a:	e147      	b.n	800f31c <LoRaMacMibSetRequestConfirm+0x8e4>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            MacCtx.NvmCtx->MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 800f08c:	4a54      	ldr	r2, [pc, #336]	; (800f1e0 <LoRaMacMibSetRequestConfirm+0x7a8>)
 800f08e:	238e      	movs	r3, #142	; 0x8e
 800f090:	00db      	lsls	r3, r3, #3
 800f092:	58d2      	ldr	r2, [r2, r3]
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	685b      	ldr	r3, [r3, #4]
 800f098:	21e8      	movs	r1, #232	; 0xe8
 800f09a:	5053      	str	r3, [r2, r1]
            break;
 800f09c:	e13e      	b.n	800f31c <LoRaMacMibSetRequestConfirm+0x8e4>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 800f09e:	4a50      	ldr	r2, [pc, #320]	; (800f1e0 <LoRaMacMibSetRequestConfirm+0x7a8>)
 800f0a0:	238e      	movs	r3, #142	; 0x8e
 800f0a2:	00db      	lsls	r3, r3, #3
 800f0a4:	58d2      	ldr	r2, [r2, r3]
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	685b      	ldr	r3, [r3, #4]
 800f0aa:	21ec      	movs	r1, #236	; 0xec
 800f0ac:	5053      	str	r3, [r2, r1]
            break;
 800f0ae:	e135      	b.n	800f31c <LoRaMacMibSetRequestConfirm+0x8e4>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 800f0b0:	4a4b      	ldr	r2, [pc, #300]	; (800f1e0 <LoRaMacMibSetRequestConfirm+0x7a8>)
 800f0b2:	238e      	movs	r3, #142	; 0x8e
 800f0b4:	00db      	lsls	r3, r3, #3
 800f0b6:	58d2      	ldr	r2, [r2, r3]
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	685b      	ldr	r3, [r3, #4]
 800f0bc:	21f0      	movs	r1, #240	; 0xf0
 800f0be:	5053      	str	r3, [r2, r1]
            break;
 800f0c0:	e12c      	b.n	800f31c <LoRaMacMibSetRequestConfirm+0x8e4>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	2204      	movs	r2, #4
 800f0c6:	569a      	ldrsb	r2, [r3, r2]
 800f0c8:	2108      	movs	r1, #8
 800f0ca:	187b      	adds	r3, r7, r1
 800f0cc:	701a      	strb	r2, [r3, #0]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DEF_TX_DR ) == true )
 800f0ce:	4a44      	ldr	r2, [pc, #272]	; (800f1e0 <LoRaMacMibSetRequestConfirm+0x7a8>)
 800f0d0:	238e      	movs	r3, #142	; 0x8e
 800f0d2:	00db      	lsls	r3, r3, #3
 800f0d4:	58d3      	ldr	r3, [r2, r3]
 800f0d6:	781b      	ldrb	r3, [r3, #0]
 800f0d8:	1879      	adds	r1, r7, r1
 800f0da:	2205      	movs	r2, #5
 800f0dc:	0018      	movs	r0, r3
 800f0de:	f003 fda9 	bl	8012c34 <RegionVerify>
 800f0e2:	1e03      	subs	r3, r0, #0
 800f0e4:	d009      	beq.n	800f0fa <LoRaMacMibSetRequestConfirm+0x6c2>
            {
                MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate = verify.DatarateParams.Datarate;
 800f0e6:	4a3e      	ldr	r2, [pc, #248]	; (800f1e0 <LoRaMacMibSetRequestConfirm+0x7a8>)
 800f0e8:	238e      	movs	r3, #142	; 0x8e
 800f0ea:	00db      	lsls	r3, r3, #3
 800f0ec:	58d3      	ldr	r3, [r2, r3]
 800f0ee:	2208      	movs	r2, #8
 800f0f0:	18ba      	adds	r2, r7, r2
 800f0f2:	7812      	ldrb	r2, [r2, #0]
 800f0f4:	b252      	sxtb	r2, r2
 800f0f6:	715a      	strb	r2, [r3, #5]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800f0f8:	e110      	b.n	800f31c <LoRaMacMibSetRequestConfirm+0x8e4>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f0fa:	2317      	movs	r3, #23
 800f0fc:	18fb      	adds	r3, r7, r3
 800f0fe:	2203      	movs	r2, #3
 800f100:	701a      	strb	r2, [r3, #0]
            break;
 800f102:	e10b      	b.n	800f31c <LoRaMacMibSetRequestConfirm+0x8e4>
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	2204      	movs	r2, #4
 800f108:	569a      	ldrsb	r2, [r3, r2]
 800f10a:	2108      	movs	r1, #8
 800f10c:	187b      	adds	r3, r7, r1
 800f10e:	701a      	strb	r2, [r3, #0]
            verify.DatarateParams.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800f110:	4a33      	ldr	r2, [pc, #204]	; (800f1e0 <LoRaMacMibSetRequestConfirm+0x7a8>)
 800f112:	238e      	movs	r3, #142	; 0x8e
 800f114:	00db      	lsls	r3, r3, #3
 800f116:	58d2      	ldr	r2, [r2, r3]
 800f118:	2380      	movs	r3, #128	; 0x80
 800f11a:	005b      	lsls	r3, r3, #1
 800f11c:	5cd2      	ldrb	r2, [r2, r3]
 800f11e:	187b      	adds	r3, r7, r1
 800f120:	709a      	strb	r2, [r3, #2]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_DR ) == true )
 800f122:	4a2f      	ldr	r2, [pc, #188]	; (800f1e0 <LoRaMacMibSetRequestConfirm+0x7a8>)
 800f124:	238e      	movs	r3, #142	; 0x8e
 800f126:	00db      	lsls	r3, r3, #3
 800f128:	58d3      	ldr	r3, [r2, r3]
 800f12a:	781b      	ldrb	r3, [r3, #0]
 800f12c:	1879      	adds	r1, r7, r1
 800f12e:	2204      	movs	r2, #4
 800f130:	0018      	movs	r0, r3
 800f132:	f003 fd7f 	bl	8012c34 <RegionVerify>
 800f136:	1e03      	subs	r3, r0, #0
 800f138:	d00a      	beq.n	800f150 <LoRaMacMibSetRequestConfirm+0x718>
            {
                MacCtx.NvmCtx->MacParams.ChannelsDatarate = verify.DatarateParams.Datarate;
 800f13a:	4a29      	ldr	r2, [pc, #164]	; (800f1e0 <LoRaMacMibSetRequestConfirm+0x7a8>)
 800f13c:	238e      	movs	r3, #142	; 0x8e
 800f13e:	00db      	lsls	r3, r3, #3
 800f140:	58d3      	ldr	r3, [r2, r3]
 800f142:	2208      	movs	r2, #8
 800f144:	18ba      	adds	r2, r7, r2
 800f146:	2100      	movs	r1, #0
 800f148:	5651      	ldrsb	r1, [r2, r1]
 800f14a:	22d5      	movs	r2, #213	; 0xd5
 800f14c:	5499      	strb	r1, [r3, r2]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800f14e:	e0e5      	b.n	800f31c <LoRaMacMibSetRequestConfirm+0x8e4>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f150:	2317      	movs	r3, #23
 800f152:	18fb      	adds	r3, r7, r3
 800f154:	2203      	movs	r2, #3
 800f156:	701a      	strb	r2, [r3, #0]
            break;
 800f158:	e0e0      	b.n	800f31c <LoRaMacMibSetRequestConfirm+0x8e4>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	2204      	movs	r2, #4
 800f15e:	569a      	ldrsb	r2, [r3, r2]
 800f160:	2108      	movs	r1, #8
 800f162:	187b      	adds	r3, r7, r1
 800f164:	701a      	strb	r2, [r3, #0]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DEF_TX_POWER ) == true )
 800f166:	4a1e      	ldr	r2, [pc, #120]	; (800f1e0 <LoRaMacMibSetRequestConfirm+0x7a8>)
 800f168:	238e      	movs	r3, #142	; 0x8e
 800f16a:	00db      	lsls	r3, r3, #3
 800f16c:	58d3      	ldr	r3, [r2, r3]
 800f16e:	781b      	ldrb	r3, [r3, #0]
 800f170:	1879      	adds	r1, r7, r1
 800f172:	2209      	movs	r2, #9
 800f174:	0018      	movs	r0, r3
 800f176:	f003 fd5d 	bl	8012c34 <RegionVerify>
 800f17a:	1e03      	subs	r3, r0, #0
 800f17c:	d009      	beq.n	800f192 <LoRaMacMibSetRequestConfirm+0x75a>
            {
                MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower = verify.TxPower;
 800f17e:	4a18      	ldr	r2, [pc, #96]	; (800f1e0 <LoRaMacMibSetRequestConfirm+0x7a8>)
 800f180:	238e      	movs	r3, #142	; 0x8e
 800f182:	00db      	lsls	r3, r3, #3
 800f184:	58d3      	ldr	r3, [r2, r3]
 800f186:	2208      	movs	r2, #8
 800f188:	18ba      	adds	r2, r7, r2
 800f18a:	7812      	ldrb	r2, [r2, #0]
 800f18c:	b252      	sxtb	r2, r2
 800f18e:	711a      	strb	r2, [r3, #4]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800f190:	e0c4      	b.n	800f31c <LoRaMacMibSetRequestConfirm+0x8e4>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f192:	2317      	movs	r3, #23
 800f194:	18fb      	adds	r3, r7, r3
 800f196:	2203      	movs	r2, #3
 800f198:	701a      	strb	r2, [r3, #0]
            break;
 800f19a:	e0bf      	b.n	800f31c <LoRaMacMibSetRequestConfirm+0x8e4>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	2204      	movs	r2, #4
 800f1a0:	569a      	ldrsb	r2, [r3, r2]
 800f1a2:	2108      	movs	r1, #8
 800f1a4:	187b      	adds	r3, r7, r1
 800f1a6:	701a      	strb	r2, [r3, #0]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_POWER ) == true )
 800f1a8:	4a0d      	ldr	r2, [pc, #52]	; (800f1e0 <LoRaMacMibSetRequestConfirm+0x7a8>)
 800f1aa:	238e      	movs	r3, #142	; 0x8e
 800f1ac:	00db      	lsls	r3, r3, #3
 800f1ae:	58d3      	ldr	r3, [r2, r3]
 800f1b0:	781b      	ldrb	r3, [r3, #0]
 800f1b2:	1879      	adds	r1, r7, r1
 800f1b4:	2208      	movs	r2, #8
 800f1b6:	0018      	movs	r0, r3
 800f1b8:	f003 fd3c 	bl	8012c34 <RegionVerify>
 800f1bc:	1e03      	subs	r3, r0, #0
 800f1be:	d00a      	beq.n	800f1d6 <LoRaMacMibSetRequestConfirm+0x79e>
            {
                MacCtx.NvmCtx->MacParams.ChannelsTxPower = verify.TxPower;
 800f1c0:	4a07      	ldr	r2, [pc, #28]	; (800f1e0 <LoRaMacMibSetRequestConfirm+0x7a8>)
 800f1c2:	238e      	movs	r3, #142	; 0x8e
 800f1c4:	00db      	lsls	r3, r3, #3
 800f1c6:	58d3      	ldr	r3, [r2, r3]
 800f1c8:	2208      	movs	r2, #8
 800f1ca:	18ba      	adds	r2, r7, r2
 800f1cc:	2100      	movs	r1, #0
 800f1ce:	5651      	ldrsb	r1, [r2, r1]
 800f1d0:	22d4      	movs	r2, #212	; 0xd4
 800f1d2:	5499      	strb	r1, [r3, r2]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800f1d4:	e0a2      	b.n	800f31c <LoRaMacMibSetRequestConfirm+0x8e4>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f1d6:	2317      	movs	r3, #23
 800f1d8:	18fb      	adds	r3, r7, r3
 800f1da:	2203      	movs	r2, #3
 800f1dc:	701a      	strb	r2, [r3, #0]
            break;
 800f1de:	e09d      	b.n	800f31c <LoRaMacMibSetRequestConfirm+0x8e4>
 800f1e0:	2000070c 	.word	0x2000070c
 800f1e4:	08020c58 	.word	0x08020c58
 800f1e8:	20000aec 	.word	0x20000aec
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            MacCtx.NvmCtx->MacParams.SystemMaxRxError = MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 800f1ec:	4a51      	ldr	r2, [pc, #324]	; (800f334 <LoRaMacMibSetRequestConfirm+0x8fc>)
 800f1ee:	238e      	movs	r3, #142	; 0x8e
 800f1f0:	00db      	lsls	r3, r3, #3
 800f1f2:	58d3      	ldr	r3, [r2, r3]
 800f1f4:	687a      	ldr	r2, [r7, #4]
 800f1f6:	6852      	ldr	r2, [r2, #4]
 800f1f8:	609a      	str	r2, [r3, #8]
 800f1fa:	494e      	ldr	r1, [pc, #312]	; (800f334 <LoRaMacMibSetRequestConfirm+0x8fc>)
 800f1fc:	228e      	movs	r2, #142	; 0x8e
 800f1fe:	00d2      	lsls	r2, r2, #3
 800f200:	588a      	ldr	r2, [r1, r2]
 800f202:	689b      	ldr	r3, [r3, #8]
 800f204:	21d8      	movs	r1, #216	; 0xd8
 800f206:	5053      	str	r3, [r2, r1]
            break;
 800f208:	e088      	b.n	800f31c <LoRaMacMibSetRequestConfirm+0x8e4>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            MacCtx.NvmCtx->MacParams.MinRxSymbols = MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 800f20a:	4a4a      	ldr	r2, [pc, #296]	; (800f334 <LoRaMacMibSetRequestConfirm+0x8fc>)
 800f20c:	238e      	movs	r3, #142	; 0x8e
 800f20e:	00db      	lsls	r3, r3, #3
 800f210:	58d3      	ldr	r3, [r2, r3]
 800f212:	687a      	ldr	r2, [r7, #4]
 800f214:	7912      	ldrb	r2, [r2, #4]
 800f216:	731a      	strb	r2, [r3, #12]
 800f218:	4946      	ldr	r1, [pc, #280]	; (800f334 <LoRaMacMibSetRequestConfirm+0x8fc>)
 800f21a:	228e      	movs	r2, #142	; 0x8e
 800f21c:	00d2      	lsls	r2, r2, #3
 800f21e:	588a      	ldr	r2, [r1, r2]
 800f220:	7b19      	ldrb	r1, [r3, #12]
 800f222:	23dc      	movs	r3, #220	; 0xdc
 800f224:	54d1      	strb	r1, [r2, r3]
            break;
 800f226:	e079      	b.n	800f31c <LoRaMacMibSetRequestConfirm+0x8e4>
        }
        case MIB_ANTENNA_GAIN:
        {
            MacCtx.NvmCtx->MacParams.AntennaGain = mibSet->Param.AntennaGain;
 800f228:	4a42      	ldr	r2, [pc, #264]	; (800f334 <LoRaMacMibSetRequestConfirm+0x8fc>)
 800f22a:	238e      	movs	r3, #142	; 0x8e
 800f22c:	00db      	lsls	r3, r3, #3
 800f22e:	58d2      	ldr	r2, [r2, r3]
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	6859      	ldr	r1, [r3, #4]
 800f234:	2384      	movs	r3, #132	; 0x84
 800f236:	005b      	lsls	r3, r3, #1
 800f238:	50d1      	str	r1, [r2, r3]
            break;
 800f23a:	e06f      	b.n	800f31c <LoRaMacMibSetRequestConfirm+0x8e4>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            MacCtx.NvmCtx->MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 800f23c:	4a3d      	ldr	r2, [pc, #244]	; (800f334 <LoRaMacMibSetRequestConfirm+0x8fc>)
 800f23e:	238e      	movs	r3, #142	; 0x8e
 800f240:	00db      	lsls	r3, r3, #3
 800f242:	58d3      	ldr	r3, [r2, r3]
 800f244:	687a      	ldr	r2, [r7, #4]
 800f246:	6852      	ldr	r2, [r2, #4]
 800f248:	639a      	str	r2, [r3, #56]	; 0x38
            break;
 800f24a:	e067      	b.n	800f31c <LoRaMacMibSetRequestConfirm+0x8e4>
        }
        case MIB_NVM_CTXS:
        {
            if( mibSet->Param.Contexts != 0 )
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	685b      	ldr	r3, [r3, #4]
 800f250:	2b00      	cmp	r3, #0
 800f252:	d009      	beq.n	800f268 <LoRaMacMibSetRequestConfirm+0x830>
            {
                status = RestoreCtxs( mibSet->Param.Contexts );
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	685b      	ldr	r3, [r3, #4]
 800f258:	2217      	movs	r2, #23
 800f25a:	18bc      	adds	r4, r7, r2
 800f25c:	0018      	movs	r0, r3
 800f25e:	f7fe fb53 	bl	800d908 <RestoreCtxs>
 800f262:	0003      	movs	r3, r0
 800f264:	7023      	strb	r3, [r4, #0]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800f266:	e059      	b.n	800f31c <LoRaMacMibSetRequestConfirm+0x8e4>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f268:	2317      	movs	r3, #23
 800f26a:	18fb      	adds	r3, r7, r3
 800f26c:	2203      	movs	r2, #3
 800f26e:	701a      	strb	r2, [r3, #0]
            break;
 800f270:	e054      	b.n	800f31c <LoRaMacMibSetRequestConfirm+0x8e4>
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	799b      	ldrb	r3, [r3, #6]
 800f276:	2b01      	cmp	r3, #1
 800f278:	d811      	bhi.n	800f29e <LoRaMacMibSetRequestConfirm+0x866>
            {
                MacCtx.NvmCtx->Version = mibSet->Param.AbpLrWanVersion;
 800f27a:	4a2e      	ldr	r2, [pc, #184]	; (800f334 <LoRaMacMibSetRequestConfirm+0x8fc>)
 800f27c:	238e      	movs	r3, #142	; 0x8e
 800f27e:	00db      	lsls	r3, r3, #3
 800f280:	58d1      	ldr	r1, [r2, r3]
 800f282:	2388      	movs	r3, #136	; 0x88
 800f284:	009a      	lsls	r2, r3, #2
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	685b      	ldr	r3, [r3, #4]
 800f28a:	508b      	str	r3, [r1, r2]

                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	685b      	ldr	r3, [r3, #4]
 800f290:	0018      	movs	r0, r3
 800f292:	f002 f9b1 	bl	80115f8 <LoRaMacCryptoSetLrWanVersion>
 800f296:	1e03      	subs	r3, r0, #0
 800f298:	d03f      	beq.n	800f31a <LoRaMacMibSetRequestConfirm+0x8e2>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800f29a:	2311      	movs	r3, #17
 800f29c:	e045      	b.n	800f32a <LoRaMacMibSetRequestConfirm+0x8f2>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f29e:	2317      	movs	r3, #23
 800f2a0:	18fb      	adds	r3, r7, r3
 800f2a2:	2203      	movs	r2, #3
 800f2a4:	701a      	strb	r2, [r3, #0]
            }
            break;
 800f2a6:	e038      	b.n	800f31a <LoRaMacMibSetRequestConfirm+0x8e2>
        }
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 800f2a8:	2317      	movs	r3, #23
 800f2aa:	18fc      	adds	r4, r7, r3
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	0018      	movs	r0, r3
 800f2b0:	f000 fcf9 	bl	800fca6 <LoRaMacMibClassBSetRequestConfirm>
 800f2b4:	0003      	movs	r3, r0
 800f2b6:	7023      	strb	r3, [r4, #0]
            break;
 800f2b8:	e030      	b.n	800f31c <LoRaMacMibSetRequestConfirm+0x8e4>
            break;
 800f2ba:	46c0      	nop			; (mov r8, r8)
 800f2bc:	e02e      	b.n	800f31c <LoRaMacMibSetRequestConfirm+0x8e4>
            break;
 800f2be:	46c0      	nop			; (mov r8, r8)
 800f2c0:	e02c      	b.n	800f31c <LoRaMacMibSetRequestConfirm+0x8e4>
            break;
 800f2c2:	46c0      	nop			; (mov r8, r8)
 800f2c4:	e02a      	b.n	800f31c <LoRaMacMibSetRequestConfirm+0x8e4>
            break;
 800f2c6:	46c0      	nop			; (mov r8, r8)
 800f2c8:	e028      	b.n	800f31c <LoRaMacMibSetRequestConfirm+0x8e4>
            break;
 800f2ca:	46c0      	nop			; (mov r8, r8)
 800f2cc:	e026      	b.n	800f31c <LoRaMacMibSetRequestConfirm+0x8e4>
            break;
 800f2ce:	46c0      	nop			; (mov r8, r8)
 800f2d0:	e024      	b.n	800f31c <LoRaMacMibSetRequestConfirm+0x8e4>
            break;
 800f2d2:	46c0      	nop			; (mov r8, r8)
 800f2d4:	e022      	b.n	800f31c <LoRaMacMibSetRequestConfirm+0x8e4>
            break;
 800f2d6:	46c0      	nop			; (mov r8, r8)
 800f2d8:	e020      	b.n	800f31c <LoRaMacMibSetRequestConfirm+0x8e4>
            break;
 800f2da:	46c0      	nop			; (mov r8, r8)
 800f2dc:	e01e      	b.n	800f31c <LoRaMacMibSetRequestConfirm+0x8e4>
            break;
 800f2de:	46c0      	nop			; (mov r8, r8)
 800f2e0:	e01c      	b.n	800f31c <LoRaMacMibSetRequestConfirm+0x8e4>
            break;
 800f2e2:	46c0      	nop			; (mov r8, r8)
 800f2e4:	e01a      	b.n	800f31c <LoRaMacMibSetRequestConfirm+0x8e4>
            break;
 800f2e6:	46c0      	nop			; (mov r8, r8)
 800f2e8:	e018      	b.n	800f31c <LoRaMacMibSetRequestConfirm+0x8e4>
            break;
 800f2ea:	46c0      	nop			; (mov r8, r8)
 800f2ec:	e016      	b.n	800f31c <LoRaMacMibSetRequestConfirm+0x8e4>
            break;
 800f2ee:	46c0      	nop			; (mov r8, r8)
 800f2f0:	e014      	b.n	800f31c <LoRaMacMibSetRequestConfirm+0x8e4>
            break;
 800f2f2:	46c0      	nop			; (mov r8, r8)
 800f2f4:	e012      	b.n	800f31c <LoRaMacMibSetRequestConfirm+0x8e4>
            break;
 800f2f6:	46c0      	nop			; (mov r8, r8)
 800f2f8:	e010      	b.n	800f31c <LoRaMacMibSetRequestConfirm+0x8e4>
            break;
 800f2fa:	46c0      	nop			; (mov r8, r8)
 800f2fc:	e00e      	b.n	800f31c <LoRaMacMibSetRequestConfirm+0x8e4>
            break;
 800f2fe:	46c0      	nop			; (mov r8, r8)
 800f300:	e00c      	b.n	800f31c <LoRaMacMibSetRequestConfirm+0x8e4>
            break;
 800f302:	46c0      	nop			; (mov r8, r8)
 800f304:	e00a      	b.n	800f31c <LoRaMacMibSetRequestConfirm+0x8e4>
            break;
 800f306:	46c0      	nop			; (mov r8, r8)
 800f308:	e008      	b.n	800f31c <LoRaMacMibSetRequestConfirm+0x8e4>
            break;
 800f30a:	46c0      	nop			; (mov r8, r8)
 800f30c:	e006      	b.n	800f31c <LoRaMacMibSetRequestConfirm+0x8e4>
            break;
 800f30e:	46c0      	nop			; (mov r8, r8)
 800f310:	e004      	b.n	800f31c <LoRaMacMibSetRequestConfirm+0x8e4>
            break;
 800f312:	46c0      	nop			; (mov r8, r8)
 800f314:	e002      	b.n	800f31c <LoRaMacMibSetRequestConfirm+0x8e4>
            break;
 800f316:	46c0      	nop			; (mov r8, r8)
 800f318:	e000      	b.n	800f31c <LoRaMacMibSetRequestConfirm+0x8e4>
            break;
 800f31a:	46c0      	nop			; (mov r8, r8)
        }
    }
    EventRegionNvmCtxChanged( );
 800f31c:	f7fe fd4a 	bl	800ddb4 <EventRegionNvmCtxChanged>
    EventMacNvmCtxChanged( );
 800f320:	f7fe fd40 	bl	800dda4 <EventMacNvmCtxChanged>
    return status;
 800f324:	2317      	movs	r3, #23
 800f326:	18fb      	adds	r3, r7, r3
 800f328:	781b      	ldrb	r3, [r3, #0]
}
 800f32a:	0018      	movs	r0, r3
 800f32c:	46bd      	mov	sp, r7
 800f32e:	b007      	add	sp, #28
 800f330:	bd90      	pop	{r4, r7, pc}
 800f332:	46c0      	nop			; (mov r8, r8)
 800f334:	2000070c 	.word	0x2000070c

0800f338 <LoRaMacChannelAdd>:

LoRaMacStatus_t LoRaMacChannelAdd( uint8_t id, ChannelParams_t params )
{
 800f338:	b590      	push	{r4, r7, lr}
 800f33a:	b087      	sub	sp, #28
 800f33c:	af00      	add	r7, sp, #0
 800f33e:	0004      	movs	r4, r0
 800f340:	0038      	movs	r0, r7
 800f342:	6001      	str	r1, [r0, #0]
 800f344:	6042      	str	r2, [r0, #4]
 800f346:	6083      	str	r3, [r0, #8]
 800f348:	230f      	movs	r3, #15
 800f34a:	18fb      	adds	r3, r7, r3
 800f34c:	1c22      	adds	r2, r4, #0
 800f34e:	701a      	strb	r2, [r3, #0]
    ChannelAddParams_t channelAdd;

    // Validate if the MAC is in a correct state
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 800f350:	4a14      	ldr	r2, [pc, #80]	; (800f3a4 <LoRaMacChannelAdd+0x6c>)
 800f352:	23d5      	movs	r3, #213	; 0xd5
 800f354:	009b      	lsls	r3, r3, #2
 800f356:	58d3      	ldr	r3, [r2, r3]
 800f358:	2202      	movs	r2, #2
 800f35a:	4013      	ands	r3, r2
 800f35c:	d008      	beq.n	800f370 <LoRaMacChannelAdd+0x38>
    {
        if( ( MacCtx.MacState & LORAMAC_TX_CONFIG ) != LORAMAC_TX_CONFIG )
 800f35e:	4a11      	ldr	r2, [pc, #68]	; (800f3a4 <LoRaMacChannelAdd+0x6c>)
 800f360:	23d5      	movs	r3, #213	; 0xd5
 800f362:	009b      	lsls	r3, r3, #2
 800f364:	58d3      	ldr	r3, [r2, r3]
 800f366:	2240      	movs	r2, #64	; 0x40
 800f368:	4013      	ands	r3, r2
 800f36a:	d101      	bne.n	800f370 <LoRaMacChannelAdd+0x38>
        {
            return LORAMAC_STATUS_BUSY;
 800f36c:	2301      	movs	r3, #1
 800f36e:	e015      	b.n	800f39c <LoRaMacChannelAdd+0x64>
        }
    }

    channelAdd.NewChannel = &params;
 800f370:	2410      	movs	r4, #16
 800f372:	193b      	adds	r3, r7, r4
 800f374:	003a      	movs	r2, r7
 800f376:	601a      	str	r2, [r3, #0]
    channelAdd.ChannelId = id;
 800f378:	193b      	adds	r3, r7, r4
 800f37a:	220f      	movs	r2, #15
 800f37c:	18ba      	adds	r2, r7, r2
 800f37e:	7812      	ldrb	r2, [r2, #0]
 800f380:	711a      	strb	r2, [r3, #4]

    EventRegionNvmCtxChanged( );
 800f382:	f7fe fd17 	bl	800ddb4 <EventRegionNvmCtxChanged>
    return RegionChannelAdd( MacCtx.NvmCtx->Region, &channelAdd );
 800f386:	4a07      	ldr	r2, [pc, #28]	; (800f3a4 <LoRaMacChannelAdd+0x6c>)
 800f388:	238e      	movs	r3, #142	; 0x8e
 800f38a:	00db      	lsls	r3, r3, #3
 800f38c:	58d3      	ldr	r3, [r2, r3]
 800f38e:	781b      	ldrb	r3, [r3, #0]
 800f390:	193a      	adds	r2, r7, r4
 800f392:	0011      	movs	r1, r2
 800f394:	0018      	movs	r0, r3
 800f396:	f003 fdb7 	bl	8012f08 <RegionChannelAdd>
 800f39a:	0003      	movs	r3, r0
}
 800f39c:	0018      	movs	r0, r3
 800f39e:	46bd      	mov	sp, r7
 800f3a0:	b007      	add	sp, #28
 800f3a2:	bd90      	pop	{r4, r7, pc}
 800f3a4:	2000070c 	.word	0x2000070c

0800f3a8 <LoRaMacMlmeRequest>:
    EventRegionNvmCtxChanged( );
    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 800f3a8:	b5b0      	push	{r4, r5, r7, lr}
 800f3aa:	b086      	sub	sp, #24
 800f3ac:	af00      	add	r7, sp, #0
 800f3ae:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800f3b0:	2317      	movs	r3, #23
 800f3b2:	18fb      	adds	r3, r7, r3
 800f3b4:	2202      	movs	r2, #2
 800f3b6:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800f3b8:	210c      	movs	r1, #12
 800f3ba:	187b      	adds	r3, r7, r1
 800f3bc:	2200      	movs	r2, #0
 800f3be:	701a      	strb	r2, [r3, #0]
 800f3c0:	187b      	adds	r3, r7, r1
 800f3c2:	2200      	movs	r2, #0
 800f3c4:	705a      	strb	r2, [r3, #1]

    if( mlmeRequest == NULL )
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	d101      	bne.n	800f3d0 <LoRaMacMlmeRequest+0x28>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800f3cc:	2303      	movs	r3, #3
 800f3ce:	e14c      	b.n	800f66a <LoRaMacMlmeRequest+0x2c2>
    }
    if( LoRaMacIsBusy( ) == LORAMAC_TRUE )
 800f3d0:	f7fb ff6a 	bl	800b2a8 <LoRaMacIsBusy>
 800f3d4:	0003      	movs	r3, r0
 800f3d6:	2b01      	cmp	r3, #1
 800f3d8:	d101      	bne.n	800f3de <LoRaMacMlmeRequest+0x36>
    {
        return LORAMAC_STATUS_BUSY;
 800f3da:	2301      	movs	r3, #1
 800f3dc:	e145      	b.n	800f66a <LoRaMacMlmeRequest+0x2c2>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
 800f3de:	f001 f97f 	bl	80106e0 <LoRaMacConfirmQueueIsFull>
 800f3e2:	1e03      	subs	r3, r0, #0
 800f3e4:	d001      	beq.n	800f3ea <LoRaMacMlmeRequest+0x42>
    {
        return LORAMAC_STATUS_BUSY;
 800f3e6:	2301      	movs	r3, #1
 800f3e8:	e13f      	b.n	800f66a <LoRaMacMlmeRequest+0x2c2>
    }

    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 800f3ea:	f001 f96f 	bl	80106cc <LoRaMacConfirmQueueGetCnt>
 800f3ee:	1e03      	subs	r3, r0, #0
 800f3f0:	d105      	bne.n	800f3fe <LoRaMacMlmeRequest+0x56>
    {
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 800f3f2:	4ba0      	ldr	r3, [pc, #640]	; (800f674 <LoRaMacMlmeRequest+0x2cc>)
 800f3f4:	2214      	movs	r2, #20
 800f3f6:	2100      	movs	r1, #0
 800f3f8:	0018      	movs	r0, r3
 800f3fa:	f006 f9ad 	bl	8015758 <memset1>
    }
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f3fe:	4b9e      	ldr	r3, [pc, #632]	; (800f678 <LoRaMacMlmeRequest+0x2d0>)
 800f400:	4a9e      	ldr	r2, [pc, #632]	; (800f67c <LoRaMacMlmeRequest+0x2d4>)
 800f402:	2101      	movs	r1, #1
 800f404:	5499      	strb	r1, [r3, r2]

    MacCtx.MacFlags.Bits.MlmeReq = 1;
 800f406:	4b9c      	ldr	r3, [pc, #624]	; (800f678 <LoRaMacMlmeRequest+0x2d0>)
 800f408:	4a9d      	ldr	r2, [pc, #628]	; (800f680 <LoRaMacMlmeRequest+0x2d8>)
 800f40a:	5c99      	ldrb	r1, [r3, r2]
 800f40c:	2004      	movs	r0, #4
 800f40e:	4301      	orrs	r1, r0
 800f410:	5499      	strb	r1, [r3, r2]
    queueElement.Request = mlmeRequest->Type;
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	781a      	ldrb	r2, [r3, #0]
 800f416:	2110      	movs	r1, #16
 800f418:	187b      	adds	r3, r7, r1
 800f41a:	701a      	strb	r2, [r3, #0]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f41c:	187b      	adds	r3, r7, r1
 800f41e:	2201      	movs	r2, #1
 800f420:	705a      	strb	r2, [r3, #1]
    queueElement.RestrictCommonReadyToHandle = false;
 800f422:	187b      	adds	r3, r7, r1
 800f424:	2200      	movs	r2, #0
 800f426:	70da      	strb	r2, [r3, #3]

    switch( mlmeRequest->Type )
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	781b      	ldrb	r3, [r3, #0]
 800f42c:	2b0d      	cmp	r3, #13
 800f42e:	d900      	bls.n	800f432 <LoRaMacMlmeRequest+0x8a>
 800f430:	e0ef      	b.n	800f612 <LoRaMacMlmeRequest+0x26a>
 800f432:	009a      	lsls	r2, r3, #2
 800f434:	4b93      	ldr	r3, [pc, #588]	; (800f684 <LoRaMacMlmeRequest+0x2dc>)
 800f436:	18d3      	adds	r3, r2, r3
 800f438:	681b      	ldr	r3, [r3, #0]
 800f43a:	469f      	mov	pc, r3
    {
        case MLME_JOIN:
        {
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 800f43c:	4a8e      	ldr	r2, [pc, #568]	; (800f678 <LoRaMacMlmeRequest+0x2d0>)
 800f43e:	23d5      	movs	r3, #213	; 0xd5
 800f440:	009b      	lsls	r3, r3, #2
 800f442:	58d3      	ldr	r3, [r2, r3]
 800f444:	2220      	movs	r2, #32
 800f446:	4013      	ands	r3, r2
 800f448:	d001      	beq.n	800f44e <LoRaMacMlmeRequest+0xa6>
            {
                return LORAMAC_STATUS_BUSY;
 800f44a:	2301      	movs	r3, #1
 800f44c:	e10d      	b.n	800f66a <LoRaMacMlmeRequest+0x2c2>
            }

            if( ( mlmeRequest->Req.Join.DevEui == NULL ) ||
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	685b      	ldr	r3, [r3, #4]
 800f452:	2b00      	cmp	r3, #0
 800f454:	d003      	beq.n	800f45e <LoRaMacMlmeRequest+0xb6>
                ( mlmeRequest->Req.Join.JoinEui == NULL ) )
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	689b      	ldr	r3, [r3, #8]
            if( ( mlmeRequest->Req.Join.DevEui == NULL ) ||
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	d101      	bne.n	800f462 <LoRaMacMlmeRequest+0xba>
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 800f45e:	2303      	movs	r3, #3
 800f460:	e103      	b.n	800f66a <LoRaMacMlmeRequest+0x2c2>
            }

            MacCtx.NvmCtx->NetworkActivation = ACTIVATION_TYPE_NONE;
 800f462:	4a85      	ldr	r2, [pc, #532]	; (800f678 <LoRaMacMlmeRequest+0x2d0>)
 800f464:	238e      	movs	r3, #142	; 0x8e
 800f466:	00db      	lsls	r3, r3, #3
 800f468:	58d2      	ldr	r2, [r2, r3]
 800f46a:	2389      	movs	r3, #137	; 0x89
 800f46c:	009b      	lsls	r3, r3, #2
 800f46e:	2100      	movs	r1, #0
 800f470:	54d1      	strb	r1, [r2, r3]

            ResetMacParameters( );
 800f472:	f7fd fe5b 	bl	800d12c <ResetMacParameters>

            MacCtx.DevEui = mlmeRequest->Req.Join.DevEui;
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	685a      	ldr	r2, [r3, #4]
 800f47a:	4b7f      	ldr	r3, [pc, #508]	; (800f678 <LoRaMacMlmeRequest+0x2d0>)
 800f47c:	601a      	str	r2, [r3, #0]
            MacCtx.JoinEui = mlmeRequest->Req.Join.JoinEui;
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	689a      	ldr	r2, [r3, #8]
 800f482:	4b7d      	ldr	r3, [pc, #500]	; (800f678 <LoRaMacMlmeRequest+0x2d0>)
 800f484:	605a      	str	r2, [r3, #4]

            MacCtx.NvmCtx->MacParams.ChannelsDatarate = RegionAlternateDr( MacCtx.NvmCtx->Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 800f486:	4a7c      	ldr	r2, [pc, #496]	; (800f678 <LoRaMacMlmeRequest+0x2d0>)
 800f488:	238e      	movs	r3, #142	; 0x8e
 800f48a:	00db      	lsls	r3, r3, #3
 800f48c:	58d3      	ldr	r3, [r2, r3]
 800f48e:	7818      	ldrb	r0, [r3, #0]
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	7b1b      	ldrb	r3, [r3, #12]
 800f494:	b259      	sxtb	r1, r3
 800f496:	4a78      	ldr	r2, [pc, #480]	; (800f678 <LoRaMacMlmeRequest+0x2d0>)
 800f498:	238e      	movs	r3, #142	; 0x8e
 800f49a:	00db      	lsls	r3, r3, #3
 800f49c:	58d4      	ldr	r4, [r2, r3]
 800f49e:	2200      	movs	r2, #0
 800f4a0:	f003 fcdf 	bl	8012e62 <RegionAlternateDr>
 800f4a4:	0003      	movs	r3, r0
 800f4a6:	001a      	movs	r2, r3
 800f4a8:	23d5      	movs	r3, #213	; 0xd5
 800f4aa:	54e2      	strb	r2, [r4, r3]

            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 800f4ac:	2310      	movs	r3, #16
 800f4ae:	18fb      	adds	r3, r7, r3
 800f4b0:	2207      	movs	r2, #7
 800f4b2:	705a      	strb	r2, [r3, #1]

            status = SendReJoinReq( JOIN_REQ );
 800f4b4:	2517      	movs	r5, #23
 800f4b6:	197c      	adds	r4, r7, r5
 800f4b8:	20ff      	movs	r0, #255	; 0xff
 800f4ba:	f7fd fb61 	bl	800cb80 <SendReJoinReq>
 800f4be:	0003      	movs	r3, r0
 800f4c0:	7023      	strb	r3, [r4, #0]

            if( status != LORAMAC_STATUS_OK )
 800f4c2:	197b      	adds	r3, r7, r5
 800f4c4:	781b      	ldrb	r3, [r3, #0]
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	d100      	bne.n	800f4cc <LoRaMacMlmeRequest+0x124>
 800f4ca:	e0a4      	b.n	800f616 <LoRaMacMlmeRequest+0x26e>
            {
                // Revert back the previous datarate ( mainly used for US915 like regions )
                MacCtx.NvmCtx->MacParams.ChannelsDatarate = RegionAlternateDr( MacCtx.NvmCtx->Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 800f4cc:	4a6a      	ldr	r2, [pc, #424]	; (800f678 <LoRaMacMlmeRequest+0x2d0>)
 800f4ce:	238e      	movs	r3, #142	; 0x8e
 800f4d0:	00db      	lsls	r3, r3, #3
 800f4d2:	58d3      	ldr	r3, [r2, r3]
 800f4d4:	7818      	ldrb	r0, [r3, #0]
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	7b1b      	ldrb	r3, [r3, #12]
 800f4da:	b259      	sxtb	r1, r3
 800f4dc:	4a66      	ldr	r2, [pc, #408]	; (800f678 <LoRaMacMlmeRequest+0x2d0>)
 800f4de:	238e      	movs	r3, #142	; 0x8e
 800f4e0:	00db      	lsls	r3, r3, #3
 800f4e2:	58d4      	ldr	r4, [r2, r3]
 800f4e4:	2201      	movs	r2, #1
 800f4e6:	f003 fcbc 	bl	8012e62 <RegionAlternateDr>
 800f4ea:	0003      	movs	r3, r0
 800f4ec:	001a      	movs	r2, r3
 800f4ee:	23d5      	movs	r3, #213	; 0xd5
 800f4f0:	54e2      	strb	r2, [r4, r3]
            }
            break;
 800f4f2:	e090      	b.n	800f616 <LoRaMacMlmeRequest+0x26e>
        }
        case MLME_LINK_CHECK:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 800f4f4:	2317      	movs	r3, #23
 800f4f6:	18fb      	adds	r3, r7, r3
 800f4f8:	2200      	movs	r2, #0
 800f4fa:	701a      	strb	r2, [r3, #0]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800f4fc:	230c      	movs	r3, #12
 800f4fe:	18fb      	adds	r3, r7, r3
 800f500:	2200      	movs	r2, #0
 800f502:	0019      	movs	r1, r3
 800f504:	2002      	movs	r0, #2
 800f506:	f000 fd7b 	bl	8010000 <LoRaMacCommandsAddCmd>
 800f50a:	1e03      	subs	r3, r0, #0
 800f50c:	d100      	bne.n	800f510 <LoRaMacMlmeRequest+0x168>
 800f50e:	e084      	b.n	800f61a <LoRaMacMlmeRequest+0x272>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800f510:	2317      	movs	r3, #23
 800f512:	18fb      	adds	r3, r7, r3
 800f514:	2213      	movs	r2, #19
 800f516:	701a      	strb	r2, [r3, #0]
            }
            break;
 800f518:	e07f      	b.n	800f61a <LoRaMacMlmeRequest+0x272>
        }
        case MLME_TXCW:
        {
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	889b      	ldrh	r3, [r3, #4]
 800f51e:	2217      	movs	r2, #23
 800f520:	18bc      	adds	r4, r7, r2
 800f522:	0018      	movs	r0, r3
 800f524:	f7fe f918 	bl	800d758 <SetTxContinuousWave>
 800f528:	0003      	movs	r3, r0
 800f52a:	7023      	strb	r3, [r4, #0]
            break;
 800f52c:	e07c      	b.n	800f628 <LoRaMacMlmeRequest+0x280>
        }
        case MLME_TXCW_1:
        {

            status = SetTxContinuousWave1( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	8898      	ldrh	r0, [r3, #4]
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	6899      	ldr	r1, [r3, #8]
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	7b1b      	ldrb	r3, [r3, #12]
 800f53a:	2217      	movs	r2, #23
 800f53c:	18bc      	adds	r4, r7, r2
 800f53e:	001a      	movs	r2, r3
 800f540:	f7fe f95c 	bl	800d7fc <SetTxContinuousWave1>
 800f544:	0003      	movs	r3, r0
 800f546:	7023      	strb	r3, [r4, #0]
            break;
 800f548:	e06e      	b.n	800f628 <LoRaMacMlmeRequest+0x280>
        }
        case MLME_DEVICE_TIME:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 800f54a:	2317      	movs	r3, #23
 800f54c:	18fb      	adds	r3, r7, r3
 800f54e:	2200      	movs	r2, #0
 800f550:	701a      	strb	r2, [r3, #0]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800f552:	230c      	movs	r3, #12
 800f554:	18fb      	adds	r3, r7, r3
 800f556:	2200      	movs	r2, #0
 800f558:	0019      	movs	r1, r3
 800f55a:	200d      	movs	r0, #13
 800f55c:	f000 fd50 	bl	8010000 <LoRaMacCommandsAddCmd>
 800f560:	1e03      	subs	r3, r0, #0
 800f562:	d05c      	beq.n	800f61e <LoRaMacMlmeRequest+0x276>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800f564:	2317      	movs	r3, #23
 800f566:	18fb      	adds	r3, r7, r3
 800f568:	2213      	movs	r2, #19
 800f56a:	701a      	strb	r2, [r3, #0]
            }
            break;
 800f56c:	e057      	b.n	800f61e <LoRaMacMlmeRequest+0x276>
        }
        case MLME_PING_SLOT_INFO:
        {
            uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 800f56e:	2416      	movs	r4, #22
 800f570:	193b      	adds	r3, r7, r4
 800f572:	687a      	ldr	r2, [r7, #4]
 800f574:	7912      	ldrb	r2, [r2, #4]
 800f576:	701a      	strb	r2, [r3, #0]

            // LoRaMac will send this command piggy-pack
            LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	791b      	ldrb	r3, [r3, #4]
 800f57c:	075b      	lsls	r3, r3, #29
 800f57e:	0f5b      	lsrs	r3, r3, #29
 800f580:	b2db      	uxtb	r3, r3
 800f582:	0018      	movs	r0, r3
 800f584:	f000 fb67 	bl	800fc56 <LoRaMacClassBSetPingSlotInfo>
            macCmdPayload[0] = value;
 800f588:	210c      	movs	r1, #12
 800f58a:	187b      	adds	r3, r7, r1
 800f58c:	193a      	adds	r2, r7, r4
 800f58e:	7812      	ldrb	r2, [r2, #0]
 800f590:	701a      	strb	r2, [r3, #0]
            status = LORAMAC_STATUS_OK;
 800f592:	2317      	movs	r3, #23
 800f594:	18fb      	adds	r3, r7, r3
 800f596:	2200      	movs	r2, #0
 800f598:	701a      	strb	r2, [r3, #0]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 800f59a:	187b      	adds	r3, r7, r1
 800f59c:	2201      	movs	r2, #1
 800f59e:	0019      	movs	r1, r3
 800f5a0:	2010      	movs	r0, #16
 800f5a2:	f000 fd2d 	bl	8010000 <LoRaMacCommandsAddCmd>
 800f5a6:	1e03      	subs	r3, r0, #0
 800f5a8:	d03b      	beq.n	800f622 <LoRaMacMlmeRequest+0x27a>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800f5aa:	2317      	movs	r3, #23
 800f5ac:	18fb      	adds	r3, r7, r3
 800f5ae:	2213      	movs	r2, #19
 800f5b0:	701a      	strb	r2, [r3, #0]
            }
            break;
 800f5b2:	e036      	b.n	800f622 <LoRaMacMlmeRequest+0x27a>
        }
        case MLME_BEACON_TIMING:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 800f5b4:	2317      	movs	r3, #23
 800f5b6:	18fb      	adds	r3, r7, r3
 800f5b8:	2200      	movs	r2, #0
 800f5ba:	701a      	strb	r2, [r3, #0]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800f5bc:	230c      	movs	r3, #12
 800f5be:	18fb      	adds	r3, r7, r3
 800f5c0:	2200      	movs	r2, #0
 800f5c2:	0019      	movs	r1, r3
 800f5c4:	2012      	movs	r0, #18
 800f5c6:	f000 fd1b 	bl	8010000 <LoRaMacCommandsAddCmd>
 800f5ca:	1e03      	subs	r3, r0, #0
 800f5cc:	d02b      	beq.n	800f626 <LoRaMacMlmeRequest+0x27e>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800f5ce:	2317      	movs	r3, #23
 800f5d0:	18fb      	adds	r3, r7, r3
 800f5d2:	2213      	movs	r2, #19
 800f5d4:	701a      	strb	r2, [r3, #0]
            }
            break;
 800f5d6:	e026      	b.n	800f626 <LoRaMacMlmeRequest+0x27e>
        }
        case MLME_BEACON_ACQUISITION:
        {
            // Apply the request
            queueElement.RestrictCommonReadyToHandle = true;
 800f5d8:	2310      	movs	r3, #16
 800f5da:	18fb      	adds	r3, r7, r3
 800f5dc:	2201      	movs	r2, #1
 800f5de:	70da      	strb	r2, [r3, #3]

            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 800f5e0:	f000 faf7 	bl	800fbd2 <LoRaMacClassBIsAcquisitionInProgress>
 800f5e4:	0003      	movs	r3, r0
 800f5e6:	001a      	movs	r2, r3
 800f5e8:	2301      	movs	r3, #1
 800f5ea:	4053      	eors	r3, r2
 800f5ec:	b2db      	uxtb	r3, r3
 800f5ee:	2b00      	cmp	r3, #0
 800f5f0:	d00a      	beq.n	800f608 <LoRaMacMlmeRequest+0x260>
            {
                // Start class B algorithm
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 800f5f2:	2000      	movs	r0, #0
 800f5f4:	f000 facf 	bl	800fb96 <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 800f5f8:	2000      	movs	r0, #0
 800f5fa:	f000 faf0 	bl	800fbde <LoRaMacClassBBeaconTimerEvent>

                status = LORAMAC_STATUS_OK;
 800f5fe:	2317      	movs	r3, #23
 800f600:	18fb      	adds	r3, r7, r3
 800f602:	2200      	movs	r2, #0
 800f604:	701a      	strb	r2, [r3, #0]
            }
            else
            {
                status = LORAMAC_STATUS_BUSY;
            }
            break;
 800f606:	e00f      	b.n	800f628 <LoRaMacMlmeRequest+0x280>
                status = LORAMAC_STATUS_BUSY;
 800f608:	2317      	movs	r3, #23
 800f60a:	18fb      	adds	r3, r7, r3
 800f60c:	2201      	movs	r2, #1
 800f60e:	701a      	strb	r2, [r3, #0]
            break;
 800f610:	e00a      	b.n	800f628 <LoRaMacMlmeRequest+0x280>
        }
        default:
            break;
 800f612:	46c0      	nop			; (mov r8, r8)
 800f614:	e008      	b.n	800f628 <LoRaMacMlmeRequest+0x280>
            break;
 800f616:	46c0      	nop			; (mov r8, r8)
 800f618:	e006      	b.n	800f628 <LoRaMacMlmeRequest+0x280>
            break;
 800f61a:	46c0      	nop			; (mov r8, r8)
 800f61c:	e004      	b.n	800f628 <LoRaMacMlmeRequest+0x280>
            break;
 800f61e:	46c0      	nop			; (mov r8, r8)
 800f620:	e002      	b.n	800f628 <LoRaMacMlmeRequest+0x280>
            break;
 800f622:	46c0      	nop			; (mov r8, r8)
 800f624:	e000      	b.n	800f628 <LoRaMacMlmeRequest+0x280>
            break;
 800f626:	46c0      	nop			; (mov r8, r8)
    }

    if( status != LORAMAC_STATUS_OK )
 800f628:	2317      	movs	r3, #23
 800f62a:	18fb      	adds	r3, r7, r3
 800f62c:	781b      	ldrb	r3, [r3, #0]
 800f62e:	2b00      	cmp	r3, #0
 800f630:	d011      	beq.n	800f656 <LoRaMacMlmeRequest+0x2ae>
    {
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 800f632:	f001 f84b 	bl	80106cc <LoRaMacConfirmQueueGetCnt>
 800f636:	1e03      	subs	r3, r0, #0
 800f638:	d114      	bne.n	800f664 <LoRaMacMlmeRequest+0x2bc>
        {
            MacCtx.NvmCtx->NodeAckRequested = false;
 800f63a:	4a0f      	ldr	r2, [pc, #60]	; (800f678 <LoRaMacMlmeRequest+0x2d0>)
 800f63c:	238e      	movs	r3, #142	; 0x8e
 800f63e:	00db      	lsls	r3, r3, #3
 800f640:	58d3      	ldr	r3, [r2, r3]
 800f642:	4a11      	ldr	r2, [pc, #68]	; (800f688 <LoRaMacMlmeRequest+0x2e0>)
 800f644:	2100      	movs	r1, #0
 800f646:	5499      	strb	r1, [r3, r2]
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800f648:	4b0b      	ldr	r3, [pc, #44]	; (800f678 <LoRaMacMlmeRequest+0x2d0>)
 800f64a:	4a0d      	ldr	r2, [pc, #52]	; (800f680 <LoRaMacMlmeRequest+0x2d8>)
 800f64c:	5c99      	ldrb	r1, [r3, r2]
 800f64e:	2004      	movs	r0, #4
 800f650:	4381      	bics	r1, r0
 800f652:	5499      	strb	r1, [r3, r2]
 800f654:	e006      	b.n	800f664 <LoRaMacMlmeRequest+0x2bc>
        }
    }
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
 800f656:	2310      	movs	r3, #16
 800f658:	18fb      	adds	r3, r7, r3
 800f65a:	0018      	movs	r0, r3
 800f65c:	f000 feda 	bl	8010414 <LoRaMacConfirmQueueAdd>
        EventMacNvmCtxChanged( );
 800f660:	f7fe fba0 	bl	800dda4 <EventMacNvmCtxChanged>
    }
    return status;
 800f664:	2317      	movs	r3, #23
 800f666:	18fb      	adds	r3, r7, r3
 800f668:	781b      	ldrb	r3, [r3, #0]
}
 800f66a:	0018      	movs	r0, r3
 800f66c:	46bd      	mov	sp, r7
 800f66e:	b006      	add	sp, #24
 800f670:	bdb0      	pop	{r4, r5, r7, pc}
 800f672:	46c0      	nop			; (mov r8, r8)
 800f674:	20000b4c 	.word	0x20000b4c
 800f678:	2000070c 	.word	0x2000070c
 800f67c:	00000441 	.word	0x00000441
 800f680:	0000046d 	.word	0x0000046d
 800f684:	08020a70 	.word	0x08020a70
 800f688:	00000219 	.word	0x00000219

0800f68c <LoRaMacMcpsRequest>:

LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest )
{
 800f68c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f68e:	b08b      	sub	sp, #44	; 0x2c
 800f690:	af00      	add	r7, sp, #0
 800f692:	6078      	str	r0, [r7, #4]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800f694:	2327      	movs	r3, #39	; 0x27
 800f696:	18fb      	adds	r3, r7, r3
 800f698:	2202      	movs	r2, #2
 800f69a:	701a      	strb	r2, [r3, #0]
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
 800f69c:	2326      	movs	r3, #38	; 0x26
 800f69e:	18fb      	adds	r3, r7, r3
 800f6a0:	2200      	movs	r2, #0
 800f6a2:	701a      	strb	r2, [r3, #0]
    void* fBuffer;
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
 800f6a4:	231d      	movs	r3, #29
 800f6a6:	18fb      	adds	r3, r7, r3
 800f6a8:	2200      	movs	r2, #0
 800f6aa:	701a      	strb	r2, [r3, #0]
    bool readyToSend = false;
 800f6ac:	231c      	movs	r3, #28
 800f6ae:	18fb      	adds	r3, r7, r3
 800f6b0:	2200      	movs	r2, #0
 800f6b2:	701a      	strb	r2, [r3, #0]

    if( mcpsRequest == NULL )
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	d101      	bne.n	800f6be <LoRaMacMcpsRequest+0x32>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800f6ba:	2303      	movs	r3, #3
 800f6bc:	e122      	b.n	800f904 <LoRaMacMcpsRequest+0x278>
    }
    if( LoRaMacIsBusy( ) == LORAMAC_TRUE )
 800f6be:	f7fb fdf3 	bl	800b2a8 <LoRaMacIsBusy>
 800f6c2:	0003      	movs	r3, r0
 800f6c4:	2b01      	cmp	r3, #1
 800f6c6:	d101      	bne.n	800f6cc <LoRaMacMcpsRequest+0x40>
    {
        return LORAMAC_STATUS_BUSY;
 800f6c8:	2301      	movs	r3, #1
 800f6ca:	e11b      	b.n	800f904 <LoRaMacMcpsRequest+0x278>
    }

    macHdr.Value = 0;
 800f6cc:	2310      	movs	r3, #16
 800f6ce:	18fb      	adds	r3, r7, r3
 800f6d0:	2200      	movs	r2, #0
 800f6d2:	701a      	strb	r2, [r3, #0]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 800f6d4:	4b8d      	ldr	r3, [pc, #564]	; (800f90c <LoRaMacMcpsRequest+0x280>)
 800f6d6:	2214      	movs	r2, #20
 800f6d8:	2100      	movs	r1, #0
 800f6da:	0018      	movs	r0, r3
 800f6dc:	f006 f83c 	bl	8015758 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f6e0:	4b8b      	ldr	r3, [pc, #556]	; (800f910 <LoRaMacMcpsRequest+0x284>)
 800f6e2:	4a8c      	ldr	r2, [pc, #560]	; (800f914 <LoRaMacMcpsRequest+0x288>)
 800f6e4:	2101      	movs	r1, #1
 800f6e6:	5499      	strb	r1, [r3, r2]

    // AckTimeoutRetriesCounter must be reset every time a new request (unconfirmed or confirmed) is performed.
    MacCtx.NvmCtx->AckTimeoutRetriesCounter = 1;
 800f6e8:	4a89      	ldr	r2, [pc, #548]	; (800f910 <LoRaMacMcpsRequest+0x284>)
 800f6ea:	238e      	movs	r3, #142	; 0x8e
 800f6ec:	00db      	lsls	r3, r3, #3
 800f6ee:	58d3      	ldr	r3, [r2, r3]
 800f6f0:	4a89      	ldr	r2, [pc, #548]	; (800f918 <LoRaMacMcpsRequest+0x28c>)
 800f6f2:	2101      	movs	r1, #1
 800f6f4:	5499      	strb	r1, [r3, r2]

    switch( mcpsRequest->Type )
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	781b      	ldrb	r3, [r3, #0]
 800f6fa:	2b01      	cmp	r3, #1
 800f6fc:	d02b      	beq.n	800f756 <LoRaMacMcpsRequest+0xca>
 800f6fe:	2b03      	cmp	r3, #3
 800f700:	d052      	beq.n	800f7a8 <LoRaMacMcpsRequest+0x11c>
 800f702:	2b00      	cmp	r3, #0
 800f704:	d000      	beq.n	800f708 <LoRaMacMcpsRequest+0x7c>
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
            datarate = mcpsRequest->Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
 800f706:	e06f      	b.n	800f7e8 <LoRaMacMcpsRequest+0x15c>
            readyToSend = true;
 800f708:	231c      	movs	r3, #28
 800f70a:	18fb      	adds	r3, r7, r3
 800f70c:	2201      	movs	r2, #1
 800f70e:	701a      	strb	r2, [r3, #0]
            MacCtx.NvmCtx->AckTimeoutRetries = 1;
 800f710:	4a7f      	ldr	r2, [pc, #508]	; (800f910 <LoRaMacMcpsRequest+0x284>)
 800f712:	238e      	movs	r3, #142	; 0x8e
 800f714:	00db      	lsls	r3, r3, #3
 800f716:	58d3      	ldr	r3, [r2, r3]
 800f718:	4a80      	ldr	r2, [pc, #512]	; (800f91c <LoRaMacMcpsRequest+0x290>)
 800f71a:	2101      	movs	r1, #1
 800f71c:	5499      	strb	r1, [r3, r2]
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 800f71e:	2310      	movs	r3, #16
 800f720:	18fb      	adds	r3, r7, r3
 800f722:	781a      	ldrb	r2, [r3, #0]
 800f724:	211f      	movs	r1, #31
 800f726:	400a      	ands	r2, r1
 800f728:	1c11      	adds	r1, r2, #0
 800f72a:	2240      	movs	r2, #64	; 0x40
 800f72c:	430a      	orrs	r2, r1
 800f72e:	701a      	strb	r2, [r3, #0]
            fPort = mcpsRequest->Req.Unconfirmed.fPort;
 800f730:	2326      	movs	r3, #38	; 0x26
 800f732:	18fb      	adds	r3, r7, r3
 800f734:	687a      	ldr	r2, [r7, #4]
 800f736:	7912      	ldrb	r2, [r2, #4]
 800f738:	701a      	strb	r2, [r3, #0]
            fBuffer = mcpsRequest->Req.Unconfirmed.fBuffer;
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	689b      	ldr	r3, [r3, #8]
 800f73e:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Unconfirmed.fBufferSize;
 800f740:	231e      	movs	r3, #30
 800f742:	18fb      	adds	r3, r7, r3
 800f744:	687a      	ldr	r2, [r7, #4]
 800f746:	8992      	ldrh	r2, [r2, #12]
 800f748:	801a      	strh	r2, [r3, #0]
            datarate = mcpsRequest->Req.Unconfirmed.Datarate;
 800f74a:	231d      	movs	r3, #29
 800f74c:	18fb      	adds	r3, r7, r3
 800f74e:	687a      	ldr	r2, [r7, #4]
 800f750:	7b92      	ldrb	r2, [r2, #14]
 800f752:	701a      	strb	r2, [r3, #0]
            break;
 800f754:	e048      	b.n	800f7e8 <LoRaMacMcpsRequest+0x15c>
            readyToSend = true;
 800f756:	231c      	movs	r3, #28
 800f758:	18fb      	adds	r3, r7, r3
 800f75a:	2201      	movs	r2, #1
 800f75c:	701a      	strb	r2, [r3, #0]
            MacCtx.NvmCtx->AckTimeoutRetries = mcpsRequest->Req.Confirmed.NbTrials;
 800f75e:	4a6c      	ldr	r2, [pc, #432]	; (800f910 <LoRaMacMcpsRequest+0x284>)
 800f760:	238e      	movs	r3, #142	; 0x8e
 800f762:	00db      	lsls	r3, r3, #3
 800f764:	58d3      	ldr	r3, [r2, r3]
 800f766:	687a      	ldr	r2, [r7, #4]
 800f768:	7bd1      	ldrb	r1, [r2, #15]
 800f76a:	4a6c      	ldr	r2, [pc, #432]	; (800f91c <LoRaMacMcpsRequest+0x290>)
 800f76c:	5499      	strb	r1, [r3, r2]
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 800f76e:	2310      	movs	r3, #16
 800f770:	18fb      	adds	r3, r7, r3
 800f772:	781a      	ldrb	r2, [r3, #0]
 800f774:	211f      	movs	r1, #31
 800f776:	400a      	ands	r2, r1
 800f778:	1c11      	adds	r1, r2, #0
 800f77a:	2280      	movs	r2, #128	; 0x80
 800f77c:	4252      	negs	r2, r2
 800f77e:	430a      	orrs	r2, r1
 800f780:	701a      	strb	r2, [r3, #0]
            fPort = mcpsRequest->Req.Confirmed.fPort;
 800f782:	2326      	movs	r3, #38	; 0x26
 800f784:	18fb      	adds	r3, r7, r3
 800f786:	687a      	ldr	r2, [r7, #4]
 800f788:	7912      	ldrb	r2, [r2, #4]
 800f78a:	701a      	strb	r2, [r3, #0]
            fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	689b      	ldr	r3, [r3, #8]
 800f790:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Confirmed.fBufferSize;
 800f792:	231e      	movs	r3, #30
 800f794:	18fb      	adds	r3, r7, r3
 800f796:	687a      	ldr	r2, [r7, #4]
 800f798:	8992      	ldrh	r2, [r2, #12]
 800f79a:	801a      	strh	r2, [r3, #0]
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 800f79c:	231d      	movs	r3, #29
 800f79e:	18fb      	adds	r3, r7, r3
 800f7a0:	687a      	ldr	r2, [r7, #4]
 800f7a2:	7b92      	ldrb	r2, [r2, #14]
 800f7a4:	701a      	strb	r2, [r3, #0]
            break;
 800f7a6:	e01f      	b.n	800f7e8 <LoRaMacMcpsRequest+0x15c>
            readyToSend = true;
 800f7a8:	231c      	movs	r3, #28
 800f7aa:	18fb      	adds	r3, r7, r3
 800f7ac:	2201      	movs	r2, #1
 800f7ae:	701a      	strb	r2, [r3, #0]
            MacCtx.NvmCtx->AckTimeoutRetries = 1;
 800f7b0:	4a57      	ldr	r2, [pc, #348]	; (800f910 <LoRaMacMcpsRequest+0x284>)
 800f7b2:	238e      	movs	r3, #142	; 0x8e
 800f7b4:	00db      	lsls	r3, r3, #3
 800f7b6:	58d3      	ldr	r3, [r2, r3]
 800f7b8:	4a58      	ldr	r2, [pc, #352]	; (800f91c <LoRaMacMcpsRequest+0x290>)
 800f7ba:	2101      	movs	r1, #1
 800f7bc:	5499      	strb	r1, [r3, r2]
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 800f7be:	2310      	movs	r3, #16
 800f7c0:	18fb      	adds	r3, r7, r3
 800f7c2:	781a      	ldrb	r2, [r3, #0]
 800f7c4:	2120      	movs	r1, #32
 800f7c6:	4249      	negs	r1, r1
 800f7c8:	430a      	orrs	r2, r1
 800f7ca:	701a      	strb	r2, [r3, #0]
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	685b      	ldr	r3, [r3, #4]
 800f7d0:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
 800f7d2:	231e      	movs	r3, #30
 800f7d4:	18fb      	adds	r3, r7, r3
 800f7d6:	687a      	ldr	r2, [r7, #4]
 800f7d8:	8912      	ldrh	r2, [r2, #8]
 800f7da:	801a      	strh	r2, [r3, #0]
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 800f7dc:	231d      	movs	r3, #29
 800f7de:	18fb      	adds	r3, r7, r3
 800f7e0:	687a      	ldr	r2, [r7, #4]
 800f7e2:	7a92      	ldrb	r2, [r2, #10]
 800f7e4:	701a      	strb	r2, [r3, #0]
            break;
 800f7e6:	46c0      	nop			; (mov r8, r8)
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 800f7e8:	2118      	movs	r1, #24
 800f7ea:	187b      	adds	r3, r7, r1
 800f7ec:	2201      	movs	r2, #1
 800f7ee:	701a      	strb	r2, [r3, #0]
    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800f7f0:	4a47      	ldr	r2, [pc, #284]	; (800f910 <LoRaMacMcpsRequest+0x284>)
 800f7f2:	238e      	movs	r3, #142	; 0x8e
 800f7f4:	00db      	lsls	r3, r3, #3
 800f7f6:	58d2      	ldr	r2, [r2, r3]
 800f7f8:	2380      	movs	r3, #128	; 0x80
 800f7fa:	005b      	lsls	r3, r3, #1
 800f7fc:	5cd2      	ldrb	r2, [r2, r3]
 800f7fe:	187b      	adds	r3, r7, r1
 800f800:	709a      	strb	r2, [r3, #2]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800f802:	4a43      	ldr	r2, [pc, #268]	; (800f910 <LoRaMacMcpsRequest+0x284>)
 800f804:	238e      	movs	r3, #142	; 0x8e
 800f806:	00db      	lsls	r3, r3, #3
 800f808:	58d3      	ldr	r3, [r2, r3]
 800f80a:	781b      	ldrb	r3, [r3, #0]
 800f80c:	187a      	adds	r2, r7, r1
 800f80e:	0011      	movs	r1, r2
 800f810:	0018      	movs	r0, r3
 800f812:	f003 f9a8 	bl	8012b66 <RegionGetPhyParam>
 800f816:	0003      	movs	r3, r0
 800f818:	001a      	movs	r2, r3
 800f81a:	2114      	movs	r1, #20
 800f81c:	187b      	adds	r3, r7, r1
 800f81e:	601a      	str	r2, [r3, #0]
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 800f820:	187b      	adds	r3, r7, r1
 800f822:	681b      	ldr	r3, [r3, #0]
 800f824:	b259      	sxtb	r1, r3
 800f826:	231d      	movs	r3, #29
 800f828:	18fa      	adds	r2, r7, r3
 800f82a:	18fb      	adds	r3, r7, r3
 800f82c:	1c0c      	adds	r4, r1, #0
 800f82e:	781b      	ldrb	r3, [r3, #0]
 800f830:	b258      	sxtb	r0, r3
 800f832:	b261      	sxtb	r1, r4
 800f834:	4288      	cmp	r0, r1
 800f836:	da00      	bge.n	800f83a <LoRaMacMcpsRequest+0x1ae>
 800f838:	1c23      	adds	r3, r4, #0
 800f83a:	7013      	strb	r3, [r2, #0]

    if( readyToSend == true )
 800f83c:	231c      	movs	r3, #28
 800f83e:	18fb      	adds	r3, r7, r3
 800f840:	781b      	ldrb	r3, [r3, #0]
 800f842:	2b00      	cmp	r3, #0
 800f844:	d059      	beq.n	800f8fa <LoRaMacMcpsRequest+0x26e>
    {
        if( MacCtx.NvmCtx->AdrCtrlOn == false )
 800f846:	4a32      	ldr	r2, [pc, #200]	; (800f910 <LoRaMacMcpsRequest+0x284>)
 800f848:	238e      	movs	r3, #142	; 0x8e
 800f84a:	00db      	lsls	r3, r3, #3
 800f84c:	58d3      	ldr	r3, [r2, r3]
 800f84e:	22ca      	movs	r2, #202	; 0xca
 800f850:	5c9b      	ldrb	r3, [r3, r2]
 800f852:	2201      	movs	r2, #1
 800f854:	4053      	eors	r3, r2
 800f856:	b2db      	uxtb	r3, r3
 800f858:	2b00      	cmp	r3, #0
 800f85a:	d027      	beq.n	800f8ac <LoRaMacMcpsRequest+0x220>
        {
            verify.DatarateParams.Datarate = datarate;
 800f85c:	210c      	movs	r1, #12
 800f85e:	187b      	adds	r3, r7, r1
 800f860:	221d      	movs	r2, #29
 800f862:	18ba      	adds	r2, r7, r2
 800f864:	7812      	ldrb	r2, [r2, #0]
 800f866:	701a      	strb	r2, [r3, #0]
            verify.DatarateParams.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800f868:	4a29      	ldr	r2, [pc, #164]	; (800f910 <LoRaMacMcpsRequest+0x284>)
 800f86a:	238e      	movs	r3, #142	; 0x8e
 800f86c:	00db      	lsls	r3, r3, #3
 800f86e:	58d2      	ldr	r2, [r2, r3]
 800f870:	2380      	movs	r3, #128	; 0x80
 800f872:	005b      	lsls	r3, r3, #1
 800f874:	5cd2      	ldrb	r2, [r2, r3]
 800f876:	187b      	adds	r3, r7, r1
 800f878:	709a      	strb	r2, [r3, #2]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_DR ) == true )
 800f87a:	4a25      	ldr	r2, [pc, #148]	; (800f910 <LoRaMacMcpsRequest+0x284>)
 800f87c:	238e      	movs	r3, #142	; 0x8e
 800f87e:	00db      	lsls	r3, r3, #3
 800f880:	58d3      	ldr	r3, [r2, r3]
 800f882:	781b      	ldrb	r3, [r3, #0]
 800f884:	1879      	adds	r1, r7, r1
 800f886:	2204      	movs	r2, #4
 800f888:	0018      	movs	r0, r3
 800f88a:	f003 f9d3 	bl	8012c34 <RegionVerify>
 800f88e:	1e03      	subs	r3, r0, #0
 800f890:	d00a      	beq.n	800f8a8 <LoRaMacMcpsRequest+0x21c>
            {
                MacCtx.NvmCtx->MacParams.ChannelsDatarate = verify.DatarateParams.Datarate;
 800f892:	4a1f      	ldr	r2, [pc, #124]	; (800f910 <LoRaMacMcpsRequest+0x284>)
 800f894:	238e      	movs	r3, #142	; 0x8e
 800f896:	00db      	lsls	r3, r3, #3
 800f898:	58d3      	ldr	r3, [r2, r3]
 800f89a:	220c      	movs	r2, #12
 800f89c:	18ba      	adds	r2, r7, r2
 800f89e:	2100      	movs	r1, #0
 800f8a0:	5651      	ldrsb	r1, [r2, r1]
 800f8a2:	22d5      	movs	r2, #213	; 0xd5
 800f8a4:	5499      	strb	r1, [r3, r2]
 800f8a6:	e001      	b.n	800f8ac <LoRaMacMcpsRequest+0x220>
            }
            else
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 800f8a8:	2303      	movs	r3, #3
 800f8aa:	e02b      	b.n	800f904 <LoRaMacMcpsRequest+0x278>
            }
        }

        status = Send( &macHdr, fPort, fBuffer, fBufferSize );
 800f8ac:	2627      	movs	r6, #39	; 0x27
 800f8ae:	19bc      	adds	r4, r7, r6
 800f8b0:	231e      	movs	r3, #30
 800f8b2:	18fb      	adds	r3, r7, r3
 800f8b4:	881d      	ldrh	r5, [r3, #0]
 800f8b6:	6a3a      	ldr	r2, [r7, #32]
 800f8b8:	2326      	movs	r3, #38	; 0x26
 800f8ba:	18fb      	adds	r3, r7, r3
 800f8bc:	7819      	ldrb	r1, [r3, #0]
 800f8be:	2310      	movs	r3, #16
 800f8c0:	18f8      	adds	r0, r7, r3
 800f8c2:	002b      	movs	r3, r5
 800f8c4:	f7fd f812 	bl	800c8ec <Send>
 800f8c8:	0003      	movs	r3, r0
 800f8ca:	7023      	strb	r3, [r4, #0]
        if( status == LORAMAC_STATUS_OK )
 800f8cc:	19bb      	adds	r3, r7, r6
 800f8ce:	781b      	ldrb	r3, [r3, #0]
 800f8d0:	2b00      	cmp	r3, #0
 800f8d2:	d10b      	bne.n	800f8ec <LoRaMacMcpsRequest+0x260>
        {
            MacCtx.McpsConfirm.McpsRequest = mcpsRequest->Type;
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	7819      	ldrb	r1, [r3, #0]
 800f8d8:	4b0d      	ldr	r3, [pc, #52]	; (800f910 <LoRaMacMcpsRequest+0x284>)
 800f8da:	4a11      	ldr	r2, [pc, #68]	; (800f920 <LoRaMacMcpsRequest+0x294>)
 800f8dc:	5499      	strb	r1, [r3, r2]
            MacCtx.MacFlags.Bits.McpsReq = 1;
 800f8de:	4b0c      	ldr	r3, [pc, #48]	; (800f910 <LoRaMacMcpsRequest+0x284>)
 800f8e0:	4a10      	ldr	r2, [pc, #64]	; (800f924 <LoRaMacMcpsRequest+0x298>)
 800f8e2:	5c99      	ldrb	r1, [r3, r2]
 800f8e4:	2001      	movs	r0, #1
 800f8e6:	4301      	orrs	r1, r0
 800f8e8:	5499      	strb	r1, [r3, r2]
 800f8ea:	e006      	b.n	800f8fa <LoRaMacMcpsRequest+0x26e>
        }
        else
        {
            MacCtx.NvmCtx->NodeAckRequested = false;
 800f8ec:	4a08      	ldr	r2, [pc, #32]	; (800f910 <LoRaMacMcpsRequest+0x284>)
 800f8ee:	238e      	movs	r3, #142	; 0x8e
 800f8f0:	00db      	lsls	r3, r3, #3
 800f8f2:	58d3      	ldr	r3, [r2, r3]
 800f8f4:	4a0c      	ldr	r2, [pc, #48]	; (800f928 <LoRaMacMcpsRequest+0x29c>)
 800f8f6:	2100      	movs	r1, #0
 800f8f8:	5499      	strb	r1, [r3, r2]
        }
    }

    EventMacNvmCtxChanged( );
 800f8fa:	f7fe fa53 	bl	800dda4 <EventMacNvmCtxChanged>
    return status;
 800f8fe:	2327      	movs	r3, #39	; 0x27
 800f900:	18fb      	adds	r3, r7, r3
 800f902:	781b      	ldrb	r3, [r3, #0]
}
 800f904:	0018      	movs	r0, r3
 800f906:	46bd      	mov	sp, r7
 800f908:	b00b      	add	sp, #44	; 0x2c
 800f90a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f90c:	20000b38 	.word	0x20000b38
 800f910:	2000070c 	.word	0x2000070c
 800f914:	0000042d 	.word	0x0000042d
 800f918:	00000217 	.word	0x00000217
 800f91c:	00000216 	.word	0x00000216
 800f920:	0000042c 	.word	0x0000042c
 800f924:	0000046d 	.word	0x0000046d
 800f928:	00000219 	.word	0x00000219

0800f92c <LoRaMacTestSetDutyCycleOn>:

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 800f92c:	b580      	push	{r7, lr}
 800f92e:	b084      	sub	sp, #16
 800f930:	af00      	add	r7, sp, #0
 800f932:	0002      	movs	r2, r0
 800f934:	1dfb      	adds	r3, r7, #7
 800f936:	701a      	strb	r2, [r3, #0]
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 800f938:	210c      	movs	r1, #12
 800f93a:	187b      	adds	r3, r7, r1
 800f93c:	1dfa      	adds	r2, r7, #7
 800f93e:	7812      	ldrb	r2, [r2, #0]
 800f940:	701a      	strb	r2, [r3, #0]

    if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DUTY_CYCLE ) == true )
 800f942:	4a0c      	ldr	r2, [pc, #48]	; (800f974 <LoRaMacTestSetDutyCycleOn+0x48>)
 800f944:	238e      	movs	r3, #142	; 0x8e
 800f946:	00db      	lsls	r3, r3, #3
 800f948:	58d3      	ldr	r3, [r2, r3]
 800f94a:	781b      	ldrb	r3, [r3, #0]
 800f94c:	1879      	adds	r1, r7, r1
 800f94e:	220e      	movs	r2, #14
 800f950:	0018      	movs	r0, r3
 800f952:	f003 f96f 	bl	8012c34 <RegionVerify>
 800f956:	1e03      	subs	r3, r0, #0
 800f958:	d008      	beq.n	800f96c <LoRaMacTestSetDutyCycleOn+0x40>
    {
        MacCtx.NvmCtx->DutyCycleOn = enable;
 800f95a:	4a06      	ldr	r2, [pc, #24]	; (800f974 <LoRaMacTestSetDutyCycleOn+0x48>)
 800f95c:	238e      	movs	r3, #142	; 0x8e
 800f95e:	00db      	lsls	r3, r3, #3
 800f960:	58d2      	ldr	r2, [r2, r3]
 800f962:	1df9      	adds	r1, r7, #7
 800f964:	2389      	movs	r3, #137	; 0x89
 800f966:	005b      	lsls	r3, r3, #1
 800f968:	7809      	ldrb	r1, [r1, #0]
 800f96a:	54d1      	strb	r1, [r2, r3]
    }
}
 800f96c:	46c0      	nop			; (mov r8, r8)
 800f96e:	46bd      	mov	sp, r7
 800f970:	b004      	add	sp, #16
 800f972:	bd80      	pop	{r7, pc}
 800f974:	2000070c 	.word	0x2000070c

0800f978 <CalcNextV10X>:

#include <drivers/lorawan/mac/region/Region.h>
#include <drivers/lorawan/mac/LoRaMacAdr.h>

static bool CalcNextV10X( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 800f978:	b590      	push	{r4, r7, lr}
 800f97a:	b08b      	sub	sp, #44	; 0x2c
 800f97c:	af00      	add	r7, sp, #0
 800f97e:	60f8      	str	r0, [r7, #12]
 800f980:	60b9      	str	r1, [r7, #8]
 800f982:	607a      	str	r2, [r7, #4]
 800f984:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
 800f986:	2327      	movs	r3, #39	; 0x27
 800f988:	18fb      	adds	r3, r7, r3
 800f98a:	2200      	movs	r2, #0
 800f98c:	701a      	strb	r2, [r3, #0]
    int8_t datarate = adrNext->Datarate;
 800f98e:	2326      	movs	r3, #38	; 0x26
 800f990:	18fb      	adds	r3, r7, r3
 800f992:	68fa      	ldr	r2, [r7, #12]
 800f994:	7c12      	ldrb	r2, [r2, #16]
 800f996:	701a      	strb	r2, [r3, #0]
    int8_t txPower = adrNext->TxPower;
 800f998:	2325      	movs	r3, #37	; 0x25
 800f99a:	18fb      	adds	r3, r7, r3
 800f99c:	68fa      	ldr	r2, [r7, #12]
 800f99e:	7c52      	ldrb	r2, [r2, #17]
 800f9a0:	701a      	strb	r2, [r3, #0]
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 800f9a2:	68fb      	ldr	r3, [r7, #12]
 800f9a4:	689a      	ldr	r2, [r3, #8]
 800f9a6:	683b      	ldr	r3, [r7, #0]
 800f9a8:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 800f9aa:	68fb      	ldr	r3, [r7, #12]
 800f9ac:	795b      	ldrb	r3, [r3, #5]
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	d100      	bne.n	800f9b4 <CalcNextV10X+0x3c>
 800f9b2:	e0a8      	b.n	800fb06 <CalcNextV10X+0x18e>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 800f9b4:	2120      	movs	r1, #32
 800f9b6:	187b      	adds	r3, r7, r1
 800f9b8:	2201      	movs	r2, #1
 800f9ba:	701a      	strb	r2, [r3, #0]
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800f9bc:	68fb      	ldr	r3, [r7, #12]
 800f9be:	7c9a      	ldrb	r2, [r3, #18]
 800f9c0:	187b      	adds	r3, r7, r1
 800f9c2:	709a      	strb	r2, [r3, #2]
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800f9c4:	68fb      	ldr	r3, [r7, #12]
 800f9c6:	7cdb      	ldrb	r3, [r3, #19]
 800f9c8:	187a      	adds	r2, r7, r1
 800f9ca:	0011      	movs	r1, r2
 800f9cc:	0018      	movs	r0, r3
 800f9ce:	f003 f8ca 	bl	8012b66 <RegionGetPhyParam>
 800f9d2:	0003      	movs	r3, r0
 800f9d4:	001a      	movs	r2, r3
 800f9d6:	211c      	movs	r1, #28
 800f9d8:	187b      	adds	r3, r7, r1
 800f9da:	601a      	str	r2, [r3, #0]
        minTxDatarate = phyParam.Value;
 800f9dc:	187b      	adds	r3, r7, r1
 800f9de:	681a      	ldr	r2, [r3, #0]
 800f9e0:	2124      	movs	r1, #36	; 0x24
 800f9e2:	187b      	adds	r3, r7, r1
 800f9e4:	701a      	strb	r2, [r3, #0]
        datarate = MAX( datarate, minTxDatarate );
 800f9e6:	2026      	movs	r0, #38	; 0x26
 800f9e8:	183a      	adds	r2, r7, r0
 800f9ea:	187b      	adds	r3, r7, r1
 800f9ec:	1839      	adds	r1, r7, r0
 800f9ee:	780c      	ldrb	r4, [r1, #0]
 800f9f0:	781b      	ldrb	r3, [r3, #0]
 800f9f2:	b258      	sxtb	r0, r3
 800f9f4:	b261      	sxtb	r1, r4
 800f9f6:	4288      	cmp	r0, r1
 800f9f8:	da00      	bge.n	800f9fc <CalcNextV10X+0x84>
 800f9fa:	1c23      	adds	r3, r4, #0
 800f9fc:	7013      	strb	r3, [r2, #0]

        if( datarate == minTxDatarate )
 800f9fe:	2326      	movs	r3, #38	; 0x26
 800fa00:	18fa      	adds	r2, r7, r3
 800fa02:	2324      	movs	r3, #36	; 0x24
 800fa04:	18fb      	adds	r3, r7, r3
 800fa06:	7812      	ldrb	r2, [r2, #0]
 800fa08:	b252      	sxtb	r2, r2
 800fa0a:	781b      	ldrb	r3, [r3, #0]
 800fa0c:	b25b      	sxtb	r3, r3
 800fa0e:	429a      	cmp	r2, r3
 800fa10:	d107      	bne.n	800fa22 <CalcNextV10X+0xaa>
        {
            *adrAckCounter = 0;
 800fa12:	683b      	ldr	r3, [r7, #0]
 800fa14:	2200      	movs	r2, #0
 800fa16:	601a      	str	r2, [r3, #0]
            adrAckReq = false;
 800fa18:	2327      	movs	r3, #39	; 0x27
 800fa1a:	18fb      	adds	r3, r7, r3
 800fa1c:	2200      	movs	r2, #0
 800fa1e:	701a      	strb	r2, [r3, #0]
 800fa20:	e071      	b.n	800fb06 <CalcNextV10X+0x18e>
        }
        else
        {
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 800fa22:	68fb      	ldr	r3, [r7, #12]
 800fa24:	689b      	ldr	r3, [r3, #8]
 800fa26:	68fa      	ldr	r2, [r7, #12]
 800fa28:	8992      	ldrh	r2, [r2, #12]
 800fa2a:	4293      	cmp	r3, r2
 800fa2c:	d319      	bcc.n	800fa62 <CalcNextV10X+0xea>
            {
                adrAckReq = true;
 800fa2e:	2327      	movs	r3, #39	; 0x27
 800fa30:	18fb      	adds	r3, r7, r3
 800fa32:	2201      	movs	r2, #1
 800fa34:	701a      	strb	r2, [r3, #0]
                // Set TX Power to maximum
                getPhy.Attribute = PHY_MAX_TX_POWER;
 800fa36:	2120      	movs	r1, #32
 800fa38:	187b      	adds	r3, r7, r1
 800fa3a:	2207      	movs	r2, #7
 800fa3c:	701a      	strb	r2, [r3, #0]
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800fa3e:	68fb      	ldr	r3, [r7, #12]
 800fa40:	7cdb      	ldrb	r3, [r3, #19]
 800fa42:	187a      	adds	r2, r7, r1
 800fa44:	0011      	movs	r1, r2
 800fa46:	0018      	movs	r0, r3
 800fa48:	f003 f88d 	bl	8012b66 <RegionGetPhyParam>
 800fa4c:	0003      	movs	r3, r0
 800fa4e:	001a      	movs	r2, r3
 800fa50:	211c      	movs	r1, #28
 800fa52:	187b      	adds	r3, r7, r1
 800fa54:	601a      	str	r2, [r3, #0]
                txPower = phyParam.Value;
 800fa56:	187b      	adds	r3, r7, r1
 800fa58:	681a      	ldr	r2, [r3, #0]
 800fa5a:	2325      	movs	r3, #37	; 0x25
 800fa5c:	18fb      	adds	r3, r7, r3
 800fa5e:	701a      	strb	r2, [r3, #0]
 800fa60:	e003      	b.n	800fa6a <CalcNextV10X+0xf2>
            }
            else
            {
                adrAckReq = false;
 800fa62:	2327      	movs	r3, #39	; 0x27
 800fa64:	18fb      	adds	r3, r7, r3
 800fa66:	2200      	movs	r2, #0
 800fa68:	701a      	strb	r2, [r3, #0]
            }
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 800fa6a:	68fb      	ldr	r3, [r7, #12]
 800fa6c:	689b      	ldr	r3, [r3, #8]
 800fa6e:	68fa      	ldr	r2, [r7, #12]
 800fa70:	8992      	ldrh	r2, [r2, #12]
 800fa72:	0011      	movs	r1, r2
 800fa74:	68fa      	ldr	r2, [r7, #12]
 800fa76:	89d2      	ldrh	r2, [r2, #14]
 800fa78:	188a      	adds	r2, r1, r2
 800fa7a:	4293      	cmp	r3, r2
 800fa7c:	d343      	bcc.n	800fb06 <CalcNextV10X+0x18e>
            {
                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 800fa7e:	68fb      	ldr	r3, [r7, #12]
 800fa80:	689a      	ldr	r2, [r3, #8]
 800fa82:	68fb      	ldr	r3, [r7, #12]
 800fa84:	89db      	ldrh	r3, [r3, #14]
 800fa86:	0019      	movs	r1, r3
 800fa88:	0010      	movs	r0, r2
 800fa8a:	f7f0 fbcb 	bl	8000224 <__aeabi_uidivmod>
 800fa8e:	000b      	movs	r3, r1
 800fa90:	2b01      	cmp	r3, #1
 800fa92:	d138      	bne.n	800fb06 <CalcNextV10X+0x18e>
                {
                    // Decrease the datarate
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 800fa94:	2120      	movs	r1, #32
 800fa96:	187b      	adds	r3, r7, r1
 800fa98:	2221      	movs	r2, #33	; 0x21
 800fa9a:	701a      	strb	r2, [r3, #0]
                    getPhy.Datarate = datarate;
 800fa9c:	187b      	adds	r3, r7, r1
 800fa9e:	2426      	movs	r4, #38	; 0x26
 800faa0:	193a      	adds	r2, r7, r4
 800faa2:	7812      	ldrb	r2, [r2, #0]
 800faa4:	705a      	strb	r2, [r3, #1]
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800faa6:	68fb      	ldr	r3, [r7, #12]
 800faa8:	7c9a      	ldrb	r2, [r3, #18]
 800faaa:	187b      	adds	r3, r7, r1
 800faac:	709a      	strb	r2, [r3, #2]
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800faae:	68fb      	ldr	r3, [r7, #12]
 800fab0:	7cdb      	ldrb	r3, [r3, #19]
 800fab2:	187a      	adds	r2, r7, r1
 800fab4:	0011      	movs	r1, r2
 800fab6:	0018      	movs	r0, r3
 800fab8:	f003 f855 	bl	8012b66 <RegionGetPhyParam>
 800fabc:	0003      	movs	r3, r0
 800fabe:	001a      	movs	r2, r3
 800fac0:	211c      	movs	r1, #28
 800fac2:	187b      	adds	r3, r7, r1
 800fac4:	601a      	str	r2, [r3, #0]
                    datarate = phyParam.Value;
 800fac6:	187b      	adds	r3, r7, r1
 800fac8:	681a      	ldr	r2, [r3, #0]
 800faca:	193b      	adds	r3, r7, r4
 800facc:	701a      	strb	r2, [r3, #0]

                    if( datarate == minTxDatarate )
 800face:	193a      	adds	r2, r7, r4
 800fad0:	2324      	movs	r3, #36	; 0x24
 800fad2:	18fb      	adds	r3, r7, r3
 800fad4:	7812      	ldrb	r2, [r2, #0]
 800fad6:	b252      	sxtb	r2, r2
 800fad8:	781b      	ldrb	r3, [r3, #0]
 800fada:	b25b      	sxtb	r3, r3
 800fadc:	429a      	cmp	r2, r3
 800fade:	d112      	bne.n	800fb06 <CalcNextV10X+0x18e>
                    {
                        // We must set adrAckReq to false as soon as we reach the lowest datarate
                        adrAckReq = false;
 800fae0:	2327      	movs	r3, #39	; 0x27
 800fae2:	18fb      	adds	r3, r7, r3
 800fae4:	2200      	movs	r2, #0
 800fae6:	701a      	strb	r2, [r3, #0]
                        if( adrNext->UpdateChanMask == true )
 800fae8:	68fb      	ldr	r3, [r7, #12]
 800faea:	791b      	ldrb	r3, [r3, #4]
 800faec:	2b00      	cmp	r3, #0
 800faee:	d00a      	beq.n	800fb06 <CalcNextV10X+0x18e>
                        {
                            InitDefaultsParams_t params;
                            params.Type = INIT_TYPE_RESTORE_DEFAULT_CHANNELS;
 800faf0:	2114      	movs	r1, #20
 800faf2:	187b      	adds	r3, r7, r1
 800faf4:	2201      	movs	r2, #1
 800faf6:	711a      	strb	r2, [r3, #4]
                            RegionInitDefaults( adrNext->Region, &params );
 800faf8:	68fb      	ldr	r3, [r7, #12]
 800fafa:	7cdb      	ldrb	r3, [r3, #19]
 800fafc:	187a      	adds	r2, r7, r1
 800fafe:	0011      	movs	r1, r2
 800fb00:	0018      	movs	r0, r3
 800fb02:	f003 f86c 	bl	8012bde <RegionInitDefaults>
                }
            }
        }
    }

    *drOut = datarate;
 800fb06:	68bb      	ldr	r3, [r7, #8]
 800fb08:	2226      	movs	r2, #38	; 0x26
 800fb0a:	18ba      	adds	r2, r7, r2
 800fb0c:	7812      	ldrb	r2, [r2, #0]
 800fb0e:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	2225      	movs	r2, #37	; 0x25
 800fb14:	18ba      	adds	r2, r7, r2
 800fb16:	7812      	ldrb	r2, [r2, #0]
 800fb18:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
 800fb1a:	2327      	movs	r3, #39	; 0x27
 800fb1c:	18fb      	adds	r3, r7, r3
 800fb1e:	781b      	ldrb	r3, [r3, #0]
}
 800fb20:	0018      	movs	r0, r3
 800fb22:	46bd      	mov	sp, r7
 800fb24:	b00b      	add	sp, #44	; 0x2c
 800fb26:	bd90      	pop	{r4, r7, pc}

0800fb28 <LoRaMacAdrCalcNext>:
 * \param [OUT] adrAckCounter The calculated ADR acknowledgement counter.
 *
 * \retval Returns true, if an ADR request should be performed.
 */
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 800fb28:	b580      	push	{r7, lr}
 800fb2a:	b084      	sub	sp, #16
 800fb2c:	af00      	add	r7, sp, #0
 800fb2e:	60f8      	str	r0, [r7, #12]
 800fb30:	60b9      	str	r1, [r7, #8]
 800fb32:	607a      	str	r2, [r7, #4]
 800fb34:	603b      	str	r3, [r7, #0]
    if( adrNext->Version.Fields.Minor == 0 )
 800fb36:	68fb      	ldr	r3, [r7, #12]
 800fb38:	789b      	ldrb	r3, [r3, #2]
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	d107      	bne.n	800fb4e <LoRaMacAdrCalcNext+0x26>
    {
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
 800fb3e:	683b      	ldr	r3, [r7, #0]
 800fb40:	687a      	ldr	r2, [r7, #4]
 800fb42:	68b9      	ldr	r1, [r7, #8]
 800fb44:	68f8      	ldr	r0, [r7, #12]
 800fb46:	f7ff ff17 	bl	800f978 <CalcNextV10X>
 800fb4a:	0003      	movs	r3, r0
 800fb4c:	e000      	b.n	800fb50 <LoRaMacAdrCalcNext+0x28>
    }
    return false;
 800fb4e:	2300      	movs	r3, #0
}
 800fb50:	0018      	movs	r0, r3
 800fb52:	46bd      	mov	sp, r7
 800fb54:	b004      	add	sp, #16
 800fb56:	bd80      	pop	{r7, pc}

0800fb58 <LoRaMacClassBInit>:
}

#endif // LORAMAC_CLASSB_ENABLED

void LoRaMacClassBInit( LoRaMacClassBParams_t *classBParams, LoRaMacClassBCallback_t *callbacks, EventNvmCtxChanged classBNvmCtxChanged )
{
 800fb58:	b580      	push	{r7, lr}
 800fb5a:	b084      	sub	sp, #16
 800fb5c:	af00      	add	r7, sp, #0
 800fb5e:	60f8      	str	r0, [r7, #12]
 800fb60:	60b9      	str	r1, [r7, #8]
 800fb62:	607a      	str	r2, [r7, #4]
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassBDefaults( );
#endif // LORAMAC_CLASSB_ENABLED
}
 800fb64:	46c0      	nop			; (mov r8, r8)
 800fb66:	46bd      	mov	sp, r7
 800fb68:	b004      	add	sp, #16
 800fb6a:	bd80      	pop	{r7, pc}

0800fb6c <LoRaMacClassBRestoreNvmCtx>:

bool LoRaMacClassBRestoreNvmCtx( void* classBNvmCtx )
{
 800fb6c:	b580      	push	{r7, lr}
 800fb6e:	b082      	sub	sp, #8
 800fb70:	af00      	add	r7, sp, #0
 800fb72:	6078      	str	r0, [r7, #4]
    else
    {
        return false;
    }
#else
    return true;
 800fb74:	2301      	movs	r3, #1
#endif // LORAMAC_CLASSB_ENABLED
}
 800fb76:	0018      	movs	r0, r3
 800fb78:	46bd      	mov	sp, r7
 800fb7a:	b002      	add	sp, #8
 800fb7c:	bd80      	pop	{r7, pc}

0800fb7e <LoRaMacClassBGetNvmCtx>:

void* LoRaMacClassBGetNvmCtx( size_t* classBNvmCtxSize )
{
 800fb7e:	b580      	push	{r7, lr}
 800fb80:	b082      	sub	sp, #8
 800fb82:	af00      	add	r7, sp, #0
 800fb84:	6078      	str	r0, [r7, #4]
#ifdef LORAMAC_CLASSB_ENABLED
    *classBNvmCtxSize = sizeof( NvmCtx );
    return &NvmCtx;
#else
    *classBNvmCtxSize = 0;
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	2200      	movs	r2, #0
 800fb8a:	601a      	str	r2, [r3, #0]
    return NULL;
 800fb8c:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 800fb8e:	0018      	movs	r0, r3
 800fb90:	46bd      	mov	sp, r7
 800fb92:	b002      	add	sp, #8
 800fb94:	bd80      	pop	{r7, pc}

0800fb96 <LoRaMacClassBSetBeaconState>:

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
 800fb96:	b580      	push	{r7, lr}
 800fb98:	b082      	sub	sp, #8
 800fb9a:	af00      	add	r7, sp, #0
 800fb9c:	0002      	movs	r2, r0
 800fb9e:	1dfb      	adds	r3, r7, #7
 800fba0:	701a      	strb	r2, [r3, #0]
    }

    NvmContextChange( );

#endif // LORAMAC_CLASSB_ENABLED
}
 800fba2:	46c0      	nop			; (mov r8, r8)
 800fba4:	46bd      	mov	sp, r7
 800fba6:	b002      	add	sp, #8
 800fba8:	bd80      	pop	{r7, pc}

0800fbaa <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
 800fbaa:	b580      	push	{r7, lr}
 800fbac:	b082      	sub	sp, #8
 800fbae:	af00      	add	r7, sp, #0
 800fbb0:	0002      	movs	r2, r0
 800fbb2:	1dfb      	adds	r3, r7, #7
 800fbb4:	701a      	strb	r2, [r3, #0]
#ifdef LORAMAC_CLASSB_ENABLED
    Ctx.NvmCtx->PingSlotState = pingSlotState;
    NvmContextChange( );
#endif // LORAMAC_CLASSB_ENABLED
}
 800fbb6:	46c0      	nop			; (mov r8, r8)
 800fbb8:	46bd      	mov	sp, r7
 800fbba:	b002      	add	sp, #8
 800fbbc:	bd80      	pop	{r7, pc}

0800fbbe <LoRaMacClassBSetMulticastSlotState>:

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
 800fbbe:	b580      	push	{r7, lr}
 800fbc0:	b082      	sub	sp, #8
 800fbc2:	af00      	add	r7, sp, #0
 800fbc4:	0002      	movs	r2, r0
 800fbc6:	1dfb      	adds	r3, r7, #7
 800fbc8:	701a      	strb	r2, [r3, #0]
#ifdef LORAMAC_CLASSB_ENABLED
    Ctx.NvmCtx->MulticastSlotState = multicastSlotState;
    NvmContextChange( );
#endif // LORAMAC_CLASSB_ENABLED
}
 800fbca:	46c0      	nop			; (mov r8, r8)
 800fbcc:	46bd      	mov	sp, r7
 800fbce:	b002      	add	sp, #8
 800fbd0:	bd80      	pop	{r7, pc}

0800fbd2 <LoRaMacClassBIsAcquisitionInProgress>:

bool LoRaMacClassBIsAcquisitionInProgress( void )
{
 800fbd2:	b580      	push	{r7, lr}
 800fbd4:	af00      	add	r7, sp, #0
        // searches for a beacon.
        return true;
    }
    return false;
#else
    return false;
 800fbd6:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 800fbd8:	0018      	movs	r0, r3
 800fbda:	46bd      	mov	sp, r7
 800fbdc:	bd80      	pop	{r7, pc}

0800fbde <LoRaMacClassBBeaconTimerEvent>:

void LoRaMacClassBBeaconTimerEvent( void* context )
{
 800fbde:	b580      	push	{r7, lr}
 800fbe0:	b082      	sub	sp, #8
 800fbe2:	af00      	add	r7, sp, #0
 800fbe4:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 800fbe6:	46c0      	nop			; (mov r8, r8)
 800fbe8:	46bd      	mov	sp, r7
 800fbea:	b002      	add	sp, #8
 800fbec:	bd80      	pop	{r7, pc}

0800fbee <LoRaMacClassBPingSlotTimerEvent>:
    NvmContextChange( );
}
#endif // LORAMAC_CLASSB_ENABLED

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
 800fbee:	b580      	push	{r7, lr}
 800fbf0:	b082      	sub	sp, #8
 800fbf2:	af00      	add	r7, sp, #0
 800fbf4:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 800fbf6:	46c0      	nop			; (mov r8, r8)
 800fbf8:	46bd      	mov	sp, r7
 800fbfa:	b002      	add	sp, #8
 800fbfc:	bd80      	pop	{r7, pc}

0800fbfe <LoRaMacClassBMulticastSlotTimerEvent>:
    NvmContextChange( );
}
#endif // LORAMAC_CLASSB_ENABLED

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
 800fbfe:	b580      	push	{r7, lr}
 800fc00:	b082      	sub	sp, #8
 800fc02:	af00      	add	r7, sp, #0
 800fc04:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 800fc06:	46c0      	nop			; (mov r8, r8)
 800fc08:	46bd      	mov	sp, r7
 800fc0a:	b002      	add	sp, #8
 800fc0c:	bd80      	pop	{r7, pc}

0800fc0e <LoRaMacClassBRxBeacon>:
    NvmContextChange( );
}
#endif // LORAMAC_CLASSB_ENABLED

bool LoRaMacClassBRxBeacon( uint8_t *payload, uint16_t size )
{
 800fc0e:	b580      	push	{r7, lr}
 800fc10:	b082      	sub	sp, #8
 800fc12:	af00      	add	r7, sp, #0
 800fc14:	6078      	str	r0, [r7, #4]
 800fc16:	000a      	movs	r2, r1
 800fc18:	1cbb      	adds	r3, r7, #2
 800fc1a:	801a      	strh	r2, [r3, #0]

    NvmContextChange( );

    return beaconProcessed;
#else
    return false;
 800fc1c:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 800fc1e:	0018      	movs	r0, r3
 800fc20:	46bd      	mov	sp, r7
 800fc22:	b002      	add	sp, #8
 800fc24:	bd80      	pop	{r7, pc}

0800fc26 <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
 800fc26:	b580      	push	{r7, lr}
 800fc28:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 800fc2a:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 800fc2c:	0018      	movs	r0, r3
 800fc2e:	46bd      	mov	sp, r7
 800fc30:	bd80      	pop	{r7, pc}

0800fc32 <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
 800fc32:	b580      	push	{r7, lr}
 800fc34:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 800fc36:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 800fc38:	0018      	movs	r0, r3
 800fc3a:	46bd      	mov	sp, r7
 800fc3c:	bd80      	pop	{r7, pc}

0800fc3e <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
 800fc3e:	b580      	push	{r7, lr}
 800fc40:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 800fc42:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 800fc44:	0018      	movs	r0, r3
 800fc46:	46bd      	mov	sp, r7
 800fc48:	bd80      	pop	{r7, pc}

0800fc4a <LoRaMacClassBIsBeaconModeActive>:
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}

bool LoRaMacClassBIsBeaconModeActive( void )
{
 800fc4a:	b580      	push	{r7, lr}
 800fc4c:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 800fc4e:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 800fc50:	0018      	movs	r0, r3
 800fc52:	46bd      	mov	sp, r7
 800fc54:	bd80      	pop	{r7, pc}

0800fc56 <LoRaMacClassBSetPingSlotInfo>:

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
 800fc56:	b580      	push	{r7, lr}
 800fc58:	b082      	sub	sp, #8
 800fc5a:	af00      	add	r7, sp, #0
 800fc5c:	0002      	movs	r2, r0
 800fc5e:	1dfb      	adds	r3, r7, #7
 800fc60:	701a      	strb	r2, [r3, #0]
#ifdef LORAMAC_CLASSB_ENABLED
    Ctx.NvmCtx->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    Ctx.NvmCtx->PingSlotCtx.PingPeriod = CalcPingPeriod( Ctx.NvmCtx->PingSlotCtx.PingNb );
    NvmContextChange( );
#endif // LORAMAC_CLASSB_ENABLED
}
 800fc62:	46c0      	nop			; (mov r8, r8)
 800fc64:	46bd      	mov	sp, r7
 800fc66:	b002      	add	sp, #8
 800fc68:	bd80      	pop	{r7, pc}

0800fc6a <LoRaMacClassBHaltBeaconing>:

void LoRaMacClassBHaltBeaconing( void )
{
 800fc6a:	b580      	push	{r7, lr}
 800fc6c:	af00      	add	r7, sp, #0
        LoRaMacClassBStopRxSlots( );

        NvmContextChange( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 800fc6e:	46c0      	nop			; (mov r8, r8)
 800fc70:	46bd      	mov	sp, r7
 800fc72:	bd80      	pop	{r7, pc}

0800fc74 <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
{
 800fc74:	b580      	push	{r7, lr}
 800fc76:	af00      	add	r7, sp, #0

        LoRaMacClassBBeaconTimerEvent( NULL );
        NvmContextChange( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 800fc78:	46c0      	nop			; (mov r8, r8)
 800fc7a:	46bd      	mov	sp, r7
 800fc7c:	bd80      	pop	{r7, pc}

0800fc7e <LoRaMacClassBSwitchClass>:

LoRaMacStatus_t LoRaMacClassBSwitchClass( DeviceClass_t nextClass )
{
 800fc7e:	b580      	push	{r7, lr}
 800fc80:	b082      	sub	sp, #8
 800fc82:	af00      	add	r7, sp, #0
 800fc84:	0002      	movs	r2, r0
 800fc86:	1dfb      	adds	r3, r7, #7
 800fc88:	701a      	strb	r2, [r3, #0]

        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 800fc8a:	2302      	movs	r3, #2
#endif // LORAMAC_CLASSB_ENABLED
}
 800fc8c:	0018      	movs	r0, r3
 800fc8e:	46bd      	mov	sp, r7
 800fc90:	b002      	add	sp, #8
 800fc92:	bd80      	pop	{r7, pc}

0800fc94 <LoRaMacClassBMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 800fc94:	b580      	push	{r7, lr}
 800fc96:	b082      	sub	sp, #8
 800fc98:	af00      	add	r7, sp, #0
 800fc9a:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 800fc9c:	2302      	movs	r3, #2
#endif // LORAMAC_CLASSB_ENABLED
}
 800fc9e:	0018      	movs	r0, r3
 800fca0:	46bd      	mov	sp, r7
 800fca2:	b002      	add	sp, #8
 800fca4:	bd80      	pop	{r7, pc}

0800fca6 <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 800fca6:	b580      	push	{r7, lr}
 800fca8:	b082      	sub	sp, #8
 800fcaa:	af00      	add	r7, sp, #0
 800fcac:	6078      	str	r0, [r7, #4]
        }
    }
    NvmContextChange( );
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 800fcae:	2302      	movs	r3, #2
#endif // LORAMAC_CLASSB_ENABLED
}
 800fcb0:	0018      	movs	r0, r3
 800fcb2:	46bd      	mov	sp, r7
 800fcb4:	b002      	add	sp, #8
 800fcb6:	bd80      	pop	{r7, pc}

0800fcb8 <LoRaMacClassBPingSlotInfoAns>:

void LoRaMacClassBPingSlotInfoAns( void )
{
 800fcb8:	b580      	push	{r7, lr}
 800fcba:	af00      	add	r7, sp, #0
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        Ctx.NvmCtx->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 800fcbc:	46c0      	nop			; (mov r8, r8)
 800fcbe:	46bd      	mov	sp, r7
 800fcc0:	bd80      	pop	{r7, pc}

0800fcc2 <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
 800fcc2:	b580      	push	{r7, lr}
 800fcc4:	b082      	sub	sp, #8
 800fcc6:	af00      	add	r7, sp, #0
 800fcc8:	0002      	movs	r2, r0
 800fcca:	6039      	str	r1, [r7, #0]
 800fccc:	1dfb      	adds	r3, r7, #7
 800fcce:	701a      	strb	r2, [r3, #0]
        NvmContextChange( );
    }

    return status;
#else
    return 0;
 800fcd0:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 800fcd2:	0018      	movs	r0, r3
 800fcd4:	46bd      	mov	sp, r7
 800fcd6:	b002      	add	sp, #8
 800fcd8:	bd80      	pop	{r7, pc}

0800fcda <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
 800fcda:	b580      	push	{r7, lr}
 800fcdc:	b082      	sub	sp, #8
 800fcde:	af00      	add	r7, sp, #0
 800fce0:	603a      	str	r2, [r7, #0]
 800fce2:	1dbb      	adds	r3, r7, #6
 800fce4:	1c02      	adds	r2, r0, #0
 800fce6:	801a      	strh	r2, [r3, #0]
 800fce8:	1d7b      	adds	r3, r7, #5
 800fcea:	1c0a      	adds	r2, r1, #0
 800fcec:	701a      	strb	r2, [r3, #0]
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.NvmCtx->BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.NvmCtx->BeaconCtx.BeaconTimingChannel;
    }
    NvmContextChange( );
#endif // LORAMAC_CLASSB_ENABLED
}
 800fcee:	46c0      	nop			; (mov r8, r8)
 800fcf0:	46bd      	mov	sp, r7
 800fcf2:	b002      	add	sp, #8
 800fcf4:	bd80      	pop	{r7, pc}

0800fcf6 <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
 800fcf6:	b580      	push	{r7, lr}
 800fcf8:	af00      	add	r7, sp, #0
        }
    }

    NvmContextChange( );
#endif // LORAMAC_CLASSB_ENABLED
}
 800fcfa:	46c0      	nop			; (mov r8, r8)
 800fcfc:	46bd      	mov	sp, r7
 800fcfe:	bd80      	pop	{r7, pc}

0800fd00 <LoRaMacClassBBeaconFreqReq>:

bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
 800fd00:	b580      	push	{r7, lr}
 800fd02:	b082      	sub	sp, #8
 800fd04:	af00      	add	r7, sp, #0
 800fd06:	6078      	str	r0, [r7, #4]
        return true;
    }
    NvmContextChange( );
    return false;
#else
    return false;
 800fd08:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 800fd0a:	0018      	movs	r0, r3
 800fd0c:	46bd      	mov	sp, r7
 800fd0e:	b002      	add	sp, #8
 800fd10:	bd80      	pop	{r7, pc}

0800fd12 <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 800fd12:	b580      	push	{r7, lr}
 800fd14:	b082      	sub	sp, #8
 800fd16:	af00      	add	r7, sp, #0
 800fd18:	6078      	str	r0, [r7, #4]
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
#else
    return 0;
 800fd1a:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 800fd1c:	0018      	movs	r0, r3
 800fd1e:	46bd      	mov	sp, r7
 800fd20:	b002      	add	sp, #8
 800fd22:	bd80      	pop	{r7, pc}

0800fd24 <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 800fd24:	b580      	push	{r7, lr}
 800fd26:	af00      	add	r7, sp, #0
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif // LORAMAC_CLASSB_ENABLED
}
 800fd28:	46c0      	nop			; (mov r8, r8)
 800fd2a:	46bd      	mov	sp, r7
 800fd2c:	bd80      	pop	{r7, pc}

0800fd2e <LoRaMacClassBProcess>:
    }
#endif // LORAMAC_CLASSB_ENABLED
}

void LoRaMacClassBProcess( void )
{
 800fd2e:	b580      	push	{r7, lr}
 800fd30:	af00      	add	r7, sp, #0
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 800fd32:	46c0      	nop			; (mov r8, r8)
 800fd34:	46bd      	mov	sp, r7
 800fd36:	bd80      	pop	{r7, pc}

0800fd38 <isSlotFree>:
 *
 * \param[IN]     slot           - Slot to check
 * \retval                       - Status of the operation
 */
bool isSlotFree( const MacCommand_t* slot )
{
 800fd38:	b580      	push	{r7, lr}
 800fd3a:	b084      	sub	sp, #16
 800fd3c:	af00      	add	r7, sp, #0
 800fd3e:	6078      	str	r0, [r7, #4]
    uint8_t* mem = (uint8_t*) slot;
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 800fd44:	230e      	movs	r3, #14
 800fd46:	18fb      	adds	r3, r7, r3
 800fd48:	2200      	movs	r2, #0
 800fd4a:	801a      	strh	r2, [r3, #0]
 800fd4c:	e00f      	b.n	800fd6e <isSlotFree+0x36>
    {
        if( mem[size] != 0x00 )
 800fd4e:	230e      	movs	r3, #14
 800fd50:	18fb      	adds	r3, r7, r3
 800fd52:	881b      	ldrh	r3, [r3, #0]
 800fd54:	68ba      	ldr	r2, [r7, #8]
 800fd56:	18d3      	adds	r3, r2, r3
 800fd58:	781b      	ldrb	r3, [r3, #0]
 800fd5a:	2b00      	cmp	r3, #0
 800fd5c:	d001      	beq.n	800fd62 <isSlotFree+0x2a>
        {
            return false;
 800fd5e:	2300      	movs	r3, #0
 800fd60:	e00b      	b.n	800fd7a <isSlotFree+0x42>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 800fd62:	210e      	movs	r1, #14
 800fd64:	187b      	adds	r3, r7, r1
 800fd66:	881a      	ldrh	r2, [r3, #0]
 800fd68:	187b      	adds	r3, r7, r1
 800fd6a:	3201      	adds	r2, #1
 800fd6c:	801a      	strh	r2, [r3, #0]
 800fd6e:	230e      	movs	r3, #14
 800fd70:	18fb      	adds	r3, r7, r3
 800fd72:	881b      	ldrh	r3, [r3, #0]
 800fd74:	2b0f      	cmp	r3, #15
 800fd76:	d9ea      	bls.n	800fd4e <isSlotFree+0x16>
        }
    }
    return true;
 800fd78:	2301      	movs	r3, #1
}
 800fd7a:	0018      	movs	r0, r3
 800fd7c:	46bd      	mov	sp, r7
 800fd7e:	b004      	add	sp, #16
 800fd80:	bd80      	pop	{r7, pc}
	...

0800fd84 <mallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
MacCommand_t* mallocNewMacCommandSlot( )
{
 800fd84:	b580      	push	{r7, lr}
 800fd86:	b082      	sub	sp, #8
 800fd88:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
 800fd8a:	1dfb      	adds	r3, r7, #7
 800fd8c:	2200      	movs	r2, #0
 800fd8e:	701a      	strb	r2, [r3, #0]

    while( isSlotFree( ( const MacCommand_t* ) &NvmCtx.MacCommandSlots[itr]) == false )
 800fd90:	e00a      	b.n	800fda8 <mallocNewMacCommandSlot+0x24>
    {
        itr++;
 800fd92:	1dfb      	adds	r3, r7, #7
 800fd94:	781a      	ldrb	r2, [r3, #0]
 800fd96:	1dfb      	adds	r3, r7, #7
 800fd98:	3201      	adds	r2, #1
 800fd9a:	701a      	strb	r2, [r3, #0]
        if( itr == NUM_OF_MAC_COMMANDS )
 800fd9c:	1dfb      	adds	r3, r7, #7
 800fd9e:	781b      	ldrb	r3, [r3, #0]
 800fda0:	2b0f      	cmp	r3, #15
 800fda2:	d101      	bne.n	800fda8 <mallocNewMacCommandSlot+0x24>
        {
            return 0;
 800fda4:	2300      	movs	r3, #0
 800fda6:	e017      	b.n	800fdd8 <mallocNewMacCommandSlot+0x54>
    while( isSlotFree( ( const MacCommand_t* ) &NvmCtx.MacCommandSlots[itr]) == false )
 800fda8:	1dfb      	adds	r3, r7, #7
 800fdaa:	781b      	ldrb	r3, [r3, #0]
 800fdac:	011b      	lsls	r3, r3, #4
 800fdae:	3308      	adds	r3, #8
 800fdb0:	001a      	movs	r2, r3
 800fdb2:	4b0b      	ldr	r3, [pc, #44]	; (800fde0 <mallocNewMacCommandSlot+0x5c>)
 800fdb4:	18d3      	adds	r3, r2, r3
 800fdb6:	0018      	movs	r0, r3
 800fdb8:	f7ff ffbe 	bl	800fd38 <isSlotFree>
 800fdbc:	0003      	movs	r3, r0
 800fdbe:	001a      	movs	r2, r3
 800fdc0:	2301      	movs	r3, #1
 800fdc2:	4053      	eors	r3, r2
 800fdc4:	b2db      	uxtb	r3, r3
 800fdc6:	2b00      	cmp	r3, #0
 800fdc8:	d1e3      	bne.n	800fd92 <mallocNewMacCommandSlot+0xe>
        }
    }

    return &NvmCtx.MacCommandSlots[itr];
 800fdca:	1dfb      	adds	r3, r7, #7
 800fdcc:	781b      	ldrb	r3, [r3, #0]
 800fdce:	011b      	lsls	r3, r3, #4
 800fdd0:	3308      	adds	r3, #8
 800fdd2:	001a      	movs	r2, r3
 800fdd4:	4b02      	ldr	r3, [pc, #8]	; (800fde0 <mallocNewMacCommandSlot+0x5c>)
 800fdd6:	18d3      	adds	r3, r2, r3
}
 800fdd8:	0018      	movs	r0, r3
 800fdda:	46bd      	mov	sp, r7
 800fddc:	b002      	add	sp, #8
 800fdde:	bd80      	pop	{r7, pc}
 800fde0:	20000db4 	.word	0x20000db4

0800fde4 <freeMacCommandSlot>:
 * \param[IN]     slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
bool freeMacCommandSlot( MacCommand_t* slot )
{
 800fde4:	b580      	push	{r7, lr}
 800fde6:	b082      	sub	sp, #8
 800fde8:	af00      	add	r7, sp, #0
 800fdea:	6078      	str	r0, [r7, #4]
    if( slot == 0 )
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	d101      	bne.n	800fdf6 <freeMacCommandSlot+0x12>
    {
        return false;
 800fdf2:	2300      	movs	r3, #0
 800fdf4:	e006      	b.n	800fe04 <freeMacCommandSlot+0x20>
    }

    memset1( (uint8_t*) slot, 0x00, sizeof( MacCommand_t ));
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	2210      	movs	r2, #16
 800fdfa:	2100      	movs	r1, #0
 800fdfc:	0018      	movs	r0, r3
 800fdfe:	f005 fcab 	bl	8015758 <memset1>

    return true;
 800fe02:	2301      	movs	r3, #1
}
 800fe04:	0018      	movs	r0, r3
 800fe06:	46bd      	mov	sp, r7
 800fe08:	b002      	add	sp, #8
 800fe0a:	bd80      	pop	{r7, pc}

0800fe0c <linkedListInit>:
 *
 * \param[IN]     list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool linkedListInit( MacCommandsList_t* list )
{
 800fe0c:	b580      	push	{r7, lr}
 800fe0e:	b082      	sub	sp, #8
 800fe10:	af00      	add	r7, sp, #0
 800fe12:	6078      	str	r0, [r7, #4]
    if( list == 0 )
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	2b00      	cmp	r3, #0
 800fe18:	d101      	bne.n	800fe1e <linkedListInit+0x12>
    {
        return false;
 800fe1a:	2300      	movs	r3, #0
 800fe1c:	e006      	b.n	800fe2c <linkedListInit+0x20>
    }

    list->First = 0;
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	2200      	movs	r2, #0
 800fe22:	601a      	str	r2, [r3, #0]
    list->Last = 0;
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	2200      	movs	r2, #0
 800fe28:	605a      	str	r2, [r3, #4]

    return true;
 800fe2a:	2301      	movs	r3, #1
}
 800fe2c:	0018      	movs	r0, r3
 800fe2e:	46bd      	mov	sp, r7
 800fe30:	b002      	add	sp, #8
 800fe32:	bd80      	pop	{r7, pc}

0800fe34 <linkedListAdd>:
 * \param[IN]     list           - List where the element shall be added.
 * \param[IN]     element        - Element to add
 * \retval                       - Status of the operation
 */
static bool linkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
 800fe34:	b580      	push	{r7, lr}
 800fe36:	b082      	sub	sp, #8
 800fe38:	af00      	add	r7, sp, #0
 800fe3a:	6078      	str	r0, [r7, #4]
 800fe3c:	6039      	str	r1, [r7, #0]
    if( ( list == 0 ) && ( element == 0 ) )
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	2b00      	cmp	r3, #0
 800fe42:	d104      	bne.n	800fe4e <linkedListAdd+0x1a>
 800fe44:	683b      	ldr	r3, [r7, #0]
 800fe46:	2b00      	cmp	r3, #0
 800fe48:	d101      	bne.n	800fe4e <linkedListAdd+0x1a>
    {
        return false;
 800fe4a:	2300      	movs	r3, #0
 800fe4c:	e015      	b.n	800fe7a <linkedListAdd+0x46>
    }

    /* Check if this is the first entry to enter the list. */
    if( list->First == 0 )
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	681b      	ldr	r3, [r3, #0]
 800fe52:	2b00      	cmp	r3, #0
 800fe54:	d102      	bne.n	800fe5c <linkedListAdd+0x28>
    {
        list->First = element;
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	683a      	ldr	r2, [r7, #0]
 800fe5a:	601a      	str	r2, [r3, #0]
    }

    /* Check if the last entry exists and update its next point. */
    if( list->Last )
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	685b      	ldr	r3, [r3, #4]
 800fe60:	2b00      	cmp	r3, #0
 800fe62:	d003      	beq.n	800fe6c <linkedListAdd+0x38>
    {
        list->Last->Next = element;
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	685b      	ldr	r3, [r3, #4]
 800fe68:	683a      	ldr	r2, [r7, #0]
 800fe6a:	601a      	str	r2, [r3, #0]
    }

    /* Update the next point of this entry. */
    element->Next = 0;
 800fe6c:	683b      	ldr	r3, [r7, #0]
 800fe6e:	2200      	movs	r2, #0
 800fe70:	601a      	str	r2, [r3, #0]

    /* Update the last entry of the list. */
    list->Last = element;
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	683a      	ldr	r2, [r7, #0]
 800fe76:	605a      	str	r2, [r3, #4]

    return true;
 800fe78:	2301      	movs	r3, #1
}
 800fe7a:	0018      	movs	r0, r3
 800fe7c:	46bd      	mov	sp, r7
 800fe7e:	b002      	add	sp, #8
 800fe80:	bd80      	pop	{r7, pc}

0800fe82 <linkedListGetPrevious>:
 * \param[IN]     list           - List
 * \param[IN]     element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* linkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
 800fe82:	b580      	push	{r7, lr}
 800fe84:	b084      	sub	sp, #16
 800fe86:	af00      	add	r7, sp, #0
 800fe88:	6078      	str	r0, [r7, #4]
 800fe8a:	6039      	str	r1, [r7, #0]
    if( ( list == 0 ) && ( element == 0 ) )
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	d104      	bne.n	800fe9c <linkedListGetPrevious+0x1a>
 800fe92:	683b      	ldr	r3, [r7, #0]
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	d101      	bne.n	800fe9c <linkedListGetPrevious+0x1a>
    {
        return NULL;
 800fe98:	2300      	movs	r3, #0
 800fe9a:	e016      	b.n	800feca <linkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	681b      	ldr	r3, [r3, #0]
 800fea0:	60fb      	str	r3, [r7, #12]

    /*
     * When current element is the first of the list, there's no previous element so we can return NULL immediately.
     */
    if( element != curElement)
 800fea2:	683a      	ldr	r2, [r7, #0]
 800fea4:	68fb      	ldr	r3, [r7, #12]
 800fea6:	429a      	cmp	r2, r3
 800fea8:	d00c      	beq.n	800fec4 <linkedListGetPrevious+0x42>
    {

        // Loop through all elements until the end is reached or the next of current is the current element.
        while(curElement && (curElement->Next != element))
 800feaa:	e002      	b.n	800feb2 <linkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
 800feac:	68fb      	ldr	r3, [r7, #12]
 800feae:	681b      	ldr	r3, [r3, #0]
 800feb0:	60fb      	str	r3, [r7, #12]
        while(curElement && (curElement->Next != element))
 800feb2:	68fb      	ldr	r3, [r7, #12]
 800feb4:	2b00      	cmp	r3, #0
 800feb6:	d007      	beq.n	800fec8 <linkedListGetPrevious+0x46>
 800feb8:	68fb      	ldr	r3, [r7, #12]
 800feba:	681b      	ldr	r3, [r3, #0]
 800febc:	683a      	ldr	r2, [r7, #0]
 800febe:	429a      	cmp	r2, r3
 800fec0:	d1f4      	bne.n	800feac <linkedListGetPrevious+0x2a>
 800fec2:	e001      	b.n	800fec8 <linkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
 800fec4:	2300      	movs	r3, #0
 800fec6:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
 800fec8:	68fb      	ldr	r3, [r7, #12]
}
 800feca:	0018      	movs	r0, r3
 800fecc:	46bd      	mov	sp, r7
 800fece:	b004      	add	sp, #16
 800fed0:	bd80      	pop	{r7, pc}

0800fed2 <linkedListRemove>:
 * \param[IN]     list           - List where the element shall be removed from.
 * \param[IN]     element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool linkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
 800fed2:	b580      	push	{r7, lr}
 800fed4:	b084      	sub	sp, #16
 800fed6:	af00      	add	r7, sp, #0
 800fed8:	6078      	str	r0, [r7, #4]
 800feda:	6039      	str	r1, [r7, #0]
    if( ( list == 0 ) && ( element == 0 ) )
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	2b00      	cmp	r3, #0
 800fee0:	d104      	bne.n	800feec <linkedListRemove+0x1a>
 800fee2:	683b      	ldr	r3, [r7, #0]
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	d101      	bne.n	800feec <linkedListRemove+0x1a>
    {
        return false;
 800fee8:	2300      	movs	r3, #0
 800feea:	e023      	b.n	800ff34 <linkedListRemove+0x62>
    }

    MacCommand_t* PrevElement = linkedListGetPrevious( list, element );
 800feec:	683a      	ldr	r2, [r7, #0]
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	0011      	movs	r1, r2
 800fef2:	0018      	movs	r0, r3
 800fef4:	f7ff ffc5 	bl	800fe82 <linkedListGetPrevious>
 800fef8:	0003      	movs	r3, r0
 800fefa:	60fb      	str	r3, [r7, #12]

    if( list->First == element )
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	681b      	ldr	r3, [r3, #0]
 800ff00:	683a      	ldr	r2, [r7, #0]
 800ff02:	429a      	cmp	r2, r3
 800ff04:	d103      	bne.n	800ff0e <linkedListRemove+0x3c>
    {
        list->First = element->Next;
 800ff06:	683b      	ldr	r3, [r7, #0]
 800ff08:	681a      	ldr	r2, [r3, #0]
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	685b      	ldr	r3, [r3, #4]
 800ff12:	683a      	ldr	r2, [r7, #0]
 800ff14:	429a      	cmp	r2, r3
 800ff16:	d102      	bne.n	800ff1e <linkedListRemove+0x4c>
    {
        list->Last = PrevElement;
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	68fa      	ldr	r2, [r7, #12]
 800ff1c:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement )
 800ff1e:	68fb      	ldr	r3, [r7, #12]
 800ff20:	2b00      	cmp	r3, #0
 800ff22:	d003      	beq.n	800ff2c <linkedListRemove+0x5a>
    {
        PrevElement->Next = element->Next;
 800ff24:	683b      	ldr	r3, [r7, #0]
 800ff26:	681a      	ldr	r2, [r3, #0]
 800ff28:	68fb      	ldr	r3, [r7, #12]
 800ff2a:	601a      	str	r2, [r3, #0]
    }

    element->Next = 0;
 800ff2c:	683b      	ldr	r3, [r7, #0]
 800ff2e:	2200      	movs	r2, #0
 800ff30:	601a      	str	r2, [r3, #0]

    return true;
 800ff32:	2301      	movs	r3, #1
}
 800ff34:	0018      	movs	r0, r3
 800ff36:	46bd      	mov	sp, r7
 800ff38:	b004      	add	sp, #16
 800ff3a:	bd80      	pop	{r7, pc}

0800ff3c <IsSticky>:
 * \param[IN]   cid                - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
 800ff3c:	b580      	push	{r7, lr}
 800ff3e:	b082      	sub	sp, #8
 800ff40:	af00      	add	r7, sp, #0
 800ff42:	0002      	movs	r2, r0
 800ff44:	1dfb      	adds	r3, r7, #7
 800ff46:	701a      	strb	r2, [r3, #0]
    switch( cid )
 800ff48:	1dfb      	adds	r3, r7, #7
 800ff4a:	781b      	ldrb	r3, [r3, #0]
 800ff4c:	2b08      	cmp	r3, #8
 800ff4e:	d003      	beq.n	800ff58 <IsSticky+0x1c>
 800ff50:	2b0a      	cmp	r3, #10
 800ff52:	d001      	beq.n	800ff58 <IsSticky+0x1c>
 800ff54:	2b05      	cmp	r3, #5
 800ff56:	d101      	bne.n	800ff5c <IsSticky+0x20>
    {
        case MOTE_MAC_DL_CHANNEL_ANS:
        case MOTE_MAC_RX_PARAM_SETUP_ANS:
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
            return true;
 800ff58:	2301      	movs	r3, #1
 800ff5a:	e000      	b.n	800ff5e <IsSticky+0x22>
        default:
            return false;
 800ff5c:	2300      	movs	r3, #0
    }
}
 800ff5e:	0018      	movs	r0, r3
 800ff60:	46bd      	mov	sp, r7
 800ff62:	b002      	add	sp, #8
 800ff64:	bd80      	pop	{r7, pc}
	...

0800ff68 <NvmCtxCallback>:

/*
 * \brief Wrapper function for the NvmCtx
 */
static void NvmCtxCallback( void )
{
 800ff68:	b580      	push	{r7, lr}
 800ff6a:	af00      	add	r7, sp, #0
    if( CommandsNvmCtxChanged != NULL )
 800ff6c:	4b04      	ldr	r3, [pc, #16]	; (800ff80 <NvmCtxCallback+0x18>)
 800ff6e:	681b      	ldr	r3, [r3, #0]
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	d002      	beq.n	800ff7a <NvmCtxCallback+0x12>
    {
        CommandsNvmCtxChanged( );
 800ff74:	4b02      	ldr	r3, [pc, #8]	; (800ff80 <NvmCtxCallback+0x18>)
 800ff76:	681b      	ldr	r3, [r3, #0]
 800ff78:	4798      	blx	r3
    }
}
 800ff7a:	46c0      	nop			; (mov r8, r8)
 800ff7c:	46bd      	mov	sp, r7
 800ff7e:	bd80      	pop	{r7, pc}
 800ff80:	20000db0 	.word	0x20000db0

0800ff84 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( EventNvmCtxChanged commandsNvmCtxChanged )
{
 800ff84:	b580      	push	{r7, lr}
 800ff86:	b082      	sub	sp, #8
 800ff88:	af00      	add	r7, sp, #0
 800ff8a:	6078      	str	r0, [r7, #4]

    // Initialize with default
    memset1( (uint8_t*)&NvmCtx, 0, sizeof( NvmCtx ) );
 800ff8c:	4b08      	ldr	r3, [pc, #32]	; (800ffb0 <LoRaMacCommandsInit+0x2c>)
 800ff8e:	22fc      	movs	r2, #252	; 0xfc
 800ff90:	2100      	movs	r1, #0
 800ff92:	0018      	movs	r0, r3
 800ff94:	f005 fbe0 	bl	8015758 <memset1>

    linkedListInit( &NvmCtx.MacCommandList );
 800ff98:	4b05      	ldr	r3, [pc, #20]	; (800ffb0 <LoRaMacCommandsInit+0x2c>)
 800ff9a:	0018      	movs	r0, r3
 800ff9c:	f7ff ff36 	bl	800fe0c <linkedListInit>

    // Assign callback
    CommandsNvmCtxChanged = commandsNvmCtxChanged;
 800ffa0:	4b04      	ldr	r3, [pc, #16]	; (800ffb4 <LoRaMacCommandsInit+0x30>)
 800ffa2:	687a      	ldr	r2, [r7, #4]
 800ffa4:	601a      	str	r2, [r3, #0]

    return LORAMAC_COMMANDS_SUCCESS;
 800ffa6:	2300      	movs	r3, #0
}
 800ffa8:	0018      	movs	r0, r3
 800ffaa:	46bd      	mov	sp, r7
 800ffac:	b002      	add	sp, #8
 800ffae:	bd80      	pop	{r7, pc}
 800ffb0:	20000db4 	.word	0x20000db4
 800ffb4:	20000db0 	.word	0x20000db0

0800ffb8 <LoRaMacCommandsRestoreNvmCtx>:

LoRaMacCommandStatus_t LoRaMacCommandsRestoreNvmCtx( void* commandsNvmCtx )
{
 800ffb8:	b580      	push	{r7, lr}
 800ffba:	b082      	sub	sp, #8
 800ffbc:	af00      	add	r7, sp, #0
 800ffbe:	6078      	str	r0, [r7, #4]
    // Restore module context
    if( commandsNvmCtx != NULL )
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	2b00      	cmp	r3, #0
 800ffc4:	d007      	beq.n	800ffd6 <LoRaMacCommandsRestoreNvmCtx+0x1e>
    {
        memcpy1( ( uint8_t* ) &NvmCtx, ( uint8_t* ) commandsNvmCtx, sizeof( NvmCtx ) );
 800ffc6:	6879      	ldr	r1, [r7, #4]
 800ffc8:	4b05      	ldr	r3, [pc, #20]	; (800ffe0 <LoRaMacCommandsRestoreNvmCtx+0x28>)
 800ffca:	22fc      	movs	r2, #252	; 0xfc
 800ffcc:	0018      	movs	r0, r3
 800ffce:	f005 fb87 	bl	80156e0 <memcpy1>
        return LORAMAC_COMMANDS_SUCCESS;
 800ffd2:	2300      	movs	r3, #0
 800ffd4:	e000      	b.n	800ffd8 <LoRaMacCommandsRestoreNvmCtx+0x20>
    }
    else
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800ffd6:	2301      	movs	r3, #1
    }
}
 800ffd8:	0018      	movs	r0, r3
 800ffda:	46bd      	mov	sp, r7
 800ffdc:	b002      	add	sp, #8
 800ffde:	bd80      	pop	{r7, pc}
 800ffe0:	20000db4 	.word	0x20000db4

0800ffe4 <LoRaMacCommandsGetNvmCtx>:

void* LoRaMacCommandsGetNvmCtx( size_t* commandsNvmCtxSize )
{
 800ffe4:	b580      	push	{r7, lr}
 800ffe6:	b082      	sub	sp, #8
 800ffe8:	af00      	add	r7, sp, #0
 800ffea:	6078      	str	r0, [r7, #4]
    *commandsNvmCtxSize = sizeof( NvmCtx );
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	22fc      	movs	r2, #252	; 0xfc
 800fff0:	601a      	str	r2, [r3, #0]
    return &NvmCtx;
 800fff2:	4b02      	ldr	r3, [pc, #8]	; (800fffc <LoRaMacCommandsGetNvmCtx+0x18>)
}
 800fff4:	0018      	movs	r0, r3
 800fff6:	46bd      	mov	sp, r7
 800fff8:	b002      	add	sp, #8
 800fffa:	bd80      	pop	{r7, pc}
 800fffc:	20000db4 	.word	0x20000db4

08010000 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid,  uint8_t* payload, size_t payloadSize )
{
 8010000:	b590      	push	{r4, r7, lr}
 8010002:	b087      	sub	sp, #28
 8010004:	af00      	add	r7, sp, #0
 8010006:	60b9      	str	r1, [r7, #8]
 8010008:	607a      	str	r2, [r7, #4]
 801000a:	230f      	movs	r3, #15
 801000c:	18fb      	adds	r3, r7, r3
 801000e:	1c02      	adds	r2, r0, #0
 8010010:	701a      	strb	r2, [r3, #0]
    if( payload == 0 )
 8010012:	68bb      	ldr	r3, [r7, #8]
 8010014:	2b00      	cmp	r3, #0
 8010016:	d101      	bne.n	801001c <LoRaMacCommandsAddCmd+0x1c>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8010018:	2301      	movs	r3, #1
 801001a:	e03c      	b.n	8010096 <LoRaMacCommandsAddCmd+0x96>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = mallocNewMacCommandSlot( );
 801001c:	f7ff feb2 	bl	800fd84 <mallocNewMacCommandSlot>
 8010020:	0003      	movs	r3, r0
 8010022:	617b      	str	r3, [r7, #20]

    if( newCmd == 0 )
 8010024:	697b      	ldr	r3, [r7, #20]
 8010026:	2b00      	cmp	r3, #0
 8010028:	d101      	bne.n	801002e <LoRaMacCommandsAddCmd+0x2e>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 801002a:	2302      	movs	r3, #2
 801002c:	e033      	b.n	8010096 <LoRaMacCommandsAddCmd+0x96>
    }

    // Add it to the list of Mac commands
    if( linkedListAdd( &NvmCtx.MacCommandList, newCmd ) == false )
 801002e:	697a      	ldr	r2, [r7, #20]
 8010030:	4b1b      	ldr	r3, [pc, #108]	; (80100a0 <LoRaMacCommandsAddCmd+0xa0>)
 8010032:	0011      	movs	r1, r2
 8010034:	0018      	movs	r0, r3
 8010036:	f7ff fefd 	bl	800fe34 <linkedListAdd>
 801003a:	0003      	movs	r3, r0
 801003c:	001a      	movs	r2, r3
 801003e:	2301      	movs	r3, #1
 8010040:	4053      	eors	r3, r2
 8010042:	b2db      	uxtb	r3, r3
 8010044:	2b00      	cmp	r3, #0
 8010046:	d001      	beq.n	801004c <LoRaMacCommandsAddCmd+0x4c>
    {
        return LORAMAC_COMMANDS_ERROR;
 8010048:	2305      	movs	r3, #5
 801004a:	e024      	b.n	8010096 <LoRaMacCommandsAddCmd+0x96>
    }

    // Set Values
    newCmd->CID = cid;
 801004c:	697b      	ldr	r3, [r7, #20]
 801004e:	240f      	movs	r4, #15
 8010050:	193a      	adds	r2, r7, r4
 8010052:	7812      	ldrb	r2, [r2, #0]
 8010054:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
 8010056:	697b      	ldr	r3, [r7, #20]
 8010058:	687a      	ldr	r2, [r7, #4]
 801005a:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* ) newCmd->Payload, payload, payloadSize );
 801005c:	697b      	ldr	r3, [r7, #20]
 801005e:	3305      	adds	r3, #5
 8010060:	687a      	ldr	r2, [r7, #4]
 8010062:	b292      	uxth	r2, r2
 8010064:	68b9      	ldr	r1, [r7, #8]
 8010066:	0018      	movs	r0, r3
 8010068:	f005 fb3a 	bl	80156e0 <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 801006c:	193b      	adds	r3, r7, r4
 801006e:	781b      	ldrb	r3, [r3, #0]
 8010070:	0018      	movs	r0, r3
 8010072:	f7ff ff63 	bl	800ff3c <IsSticky>
 8010076:	0003      	movs	r3, r0
 8010078:	001a      	movs	r2, r3
 801007a:	697b      	ldr	r3, [r7, #20]
 801007c:	731a      	strb	r2, [r3, #12]

    NvmCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 801007e:	4b08      	ldr	r3, [pc, #32]	; (80100a0 <LoRaMacCommandsAddCmd+0xa0>)
 8010080:	22f8      	movs	r2, #248	; 0xf8
 8010082:	589a      	ldr	r2, [r3, r2]
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	18d3      	adds	r3, r2, r3
 8010088:	1c5a      	adds	r2, r3, #1
 801008a:	4b05      	ldr	r3, [pc, #20]	; (80100a0 <LoRaMacCommandsAddCmd+0xa0>)
 801008c:	21f8      	movs	r1, #248	; 0xf8
 801008e:	505a      	str	r2, [r3, r1]

    NvmCtxCallback( );
 8010090:	f7ff ff6a 	bl	800ff68 <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
 8010094:	2300      	movs	r3, #0
}
 8010096:	0018      	movs	r0, r3
 8010098:	46bd      	mov	sp, r7
 801009a:	b007      	add	sp, #28
 801009c:	bd90      	pop	{r4, r7, pc}
 801009e:	46c0      	nop			; (mov r8, r8)
 80100a0:	20000db4 	.word	0x20000db4

080100a4 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 80100a4:	b580      	push	{r7, lr}
 80100a6:	b082      	sub	sp, #8
 80100a8:	af00      	add	r7, sp, #0
 80100aa:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	2b00      	cmp	r3, #0
 80100b0:	d101      	bne.n	80100b6 <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80100b2:	2301      	movs	r3, #1
 80100b4:	e028      	b.n	8010108 <LoRaMacCommandsRemoveCmd+0x64>
    }

    // Remove the Mac command element from MacCommandList
    if( linkedListRemove( &NvmCtx.MacCommandList, macCmd ) == false )
 80100b6:	687a      	ldr	r2, [r7, #4]
 80100b8:	4b15      	ldr	r3, [pc, #84]	; (8010110 <LoRaMacCommandsRemoveCmd+0x6c>)
 80100ba:	0011      	movs	r1, r2
 80100bc:	0018      	movs	r0, r3
 80100be:	f7ff ff08 	bl	800fed2 <linkedListRemove>
 80100c2:	0003      	movs	r3, r0
 80100c4:	001a      	movs	r2, r3
 80100c6:	2301      	movs	r3, #1
 80100c8:	4053      	eors	r3, r2
 80100ca:	b2db      	uxtb	r3, r3
 80100cc:	2b00      	cmp	r3, #0
 80100ce:	d001      	beq.n	80100d4 <LoRaMacCommandsRemoveCmd+0x30>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 80100d0:	2303      	movs	r3, #3
 80100d2:	e019      	b.n	8010108 <LoRaMacCommandsRemoveCmd+0x64>
    }

    NvmCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 80100d4:	4b0e      	ldr	r3, [pc, #56]	; (8010110 <LoRaMacCommandsRemoveCmd+0x6c>)
 80100d6:	22f8      	movs	r2, #248	; 0xf8
 80100d8:	589a      	ldr	r2, [r3, r2]
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	689b      	ldr	r3, [r3, #8]
 80100de:	1ad3      	subs	r3, r2, r3
 80100e0:	1e5a      	subs	r2, r3, #1
 80100e2:	4b0b      	ldr	r3, [pc, #44]	; (8010110 <LoRaMacCommandsRemoveCmd+0x6c>)
 80100e4:	21f8      	movs	r1, #248	; 0xf8
 80100e6:	505a      	str	r2, [r3, r1]

    // Free the MacCommand Slot
    if( freeMacCommandSlot( macCmd ) == false )
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	0018      	movs	r0, r3
 80100ec:	f7ff fe7a 	bl	800fde4 <freeMacCommandSlot>
 80100f0:	0003      	movs	r3, r0
 80100f2:	001a      	movs	r2, r3
 80100f4:	2301      	movs	r3, #1
 80100f6:	4053      	eors	r3, r2
 80100f8:	b2db      	uxtb	r3, r3
 80100fa:	2b00      	cmp	r3, #0
 80100fc:	d001      	beq.n	8010102 <LoRaMacCommandsRemoveCmd+0x5e>
    {
        return LORAMAC_COMMANDS_ERROR;
 80100fe:	2305      	movs	r3, #5
 8010100:	e002      	b.n	8010108 <LoRaMacCommandsRemoveCmd+0x64>
    }

    NvmCtxCallback( );
 8010102:	f7ff ff31 	bl	800ff68 <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
 8010106:	2300      	movs	r3, #0
}
 8010108:	0018      	movs	r0, r3
 801010a:	46bd      	mov	sp, r7
 801010c:	b002      	add	sp, #8
 801010e:	bd80      	pop	{r7, pc}
 8010110:	20000db4 	.word	0x20000db4

08010114 <LoRaMacCommandsRemoveNoneStickyCmds>:

    return LORAMAC_COMMANDS_SUCCESS;
}

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 8010114:	b580      	push	{r7, lr}
 8010116:	b082      	sub	sp, #8
 8010118:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = NvmCtx.MacCommandList.First;
 801011a:	4b11      	ldr	r3, [pc, #68]	; (8010160 <LoRaMacCommandsRemoveNoneStickyCmds+0x4c>)
 801011c:	681b      	ldr	r3, [r3, #0]
 801011e:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement )
 8010120:	e013      	b.n	801014a <LoRaMacCommandsRemoveNoneStickyCmds+0x36>
    {
        if( curElement->IsSticky == false )
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	7b1b      	ldrb	r3, [r3, #12]
 8010126:	2201      	movs	r2, #1
 8010128:	4053      	eors	r3, r2
 801012a:	b2db      	uxtb	r3, r3
 801012c:	2b00      	cmp	r3, #0
 801012e:	d009      	beq.n	8010144 <LoRaMacCommandsRemoveNoneStickyCmds+0x30>
        {
            nexElement = curElement->Next;
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	681b      	ldr	r3, [r3, #0]
 8010134:	603b      	str	r3, [r7, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	0018      	movs	r0, r3
 801013a:	f7ff ffb3 	bl	80100a4 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 801013e:	683b      	ldr	r3, [r7, #0]
 8010140:	607b      	str	r3, [r7, #4]
 8010142:	e002      	b.n	801014a <LoRaMacCommandsRemoveNoneStickyCmds+0x36>
        }
        else
        {
            curElement = curElement->Next;
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	681b      	ldr	r3, [r3, #0]
 8010148:	607b      	str	r3, [r7, #4]
    while( curElement )
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	2b00      	cmp	r3, #0
 801014e:	d1e8      	bne.n	8010122 <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        }
    }

    NvmCtxCallback( );
 8010150:	f7ff ff0a 	bl	800ff68 <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
 8010154:	2300      	movs	r3, #0
}
 8010156:	0018      	movs	r0, r3
 8010158:	46bd      	mov	sp, r7
 801015a:	b002      	add	sp, #8
 801015c:	bd80      	pop	{r7, pc}
 801015e:	46c0      	nop			; (mov r8, r8)
 8010160:	20000db4 	.word	0x20000db4

08010164 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 8010164:	b580      	push	{r7, lr}
 8010166:	b084      	sub	sp, #16
 8010168:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = NvmCtx.MacCommandList.First;
 801016a:	4b1a      	ldr	r3, [pc, #104]	; (80101d4 <LoRaMacCommandsRemoveStickyAnsCmds+0x70>)
 801016c:	681b      	ldr	r3, [r3, #0]
 801016e:	60fb      	str	r3, [r7, #12]

    // Loop through all elements
    while( curElement != NULL )
 8010170:	e026      	b.n	80101c0 <LoRaMacCommandsRemoveStickyAnsCmds+0x5c>
    {
        nexElement = curElement->Next;
 8010172:	68fb      	ldr	r3, [r7, #12]
 8010174:	681b      	ldr	r3, [r3, #0]
 8010176:	607b      	str	r3, [r7, #4]
        if( curElement->IsSticky == true )
 8010178:	68fb      	ldr	r3, [r7, #12]
 801017a:	7b1b      	ldrb	r3, [r3, #12]
 801017c:	2b00      	cmp	r3, #0
 801017e:	d01d      	beq.n	80101bc <LoRaMacCommandsRemoveStickyAnsCmds+0x58>
        {
            for( uint8_t i = 0; i < sizeof( CIDsStickyAnsCmds ); i++)
 8010180:	230b      	movs	r3, #11
 8010182:	18fb      	adds	r3, r7, r3
 8010184:	2200      	movs	r2, #0
 8010186:	701a      	strb	r2, [r3, #0]
 8010188:	e013      	b.n	80101b2 <LoRaMacCommandsRemoveStickyAnsCmds+0x4e>
            {
                if( curElement->CID == CIDsStickyAnsCmds[i] )
 801018a:	68fb      	ldr	r3, [r7, #12]
 801018c:	791a      	ldrb	r2, [r3, #4]
 801018e:	230b      	movs	r3, #11
 8010190:	18fb      	adds	r3, r7, r3
 8010192:	781b      	ldrb	r3, [r3, #0]
 8010194:	4910      	ldr	r1, [pc, #64]	; (80101d8 <LoRaMacCommandsRemoveStickyAnsCmds+0x74>)
 8010196:	5ccb      	ldrb	r3, [r1, r3]
 8010198:	429a      	cmp	r2, r3
 801019a:	d104      	bne.n	80101a6 <LoRaMacCommandsRemoveStickyAnsCmds+0x42>
                {
                    LoRaMacCommandsRemoveCmd( curElement );
 801019c:	68fb      	ldr	r3, [r7, #12]
 801019e:	0018      	movs	r0, r3
 80101a0:	f7ff ff80 	bl	80100a4 <LoRaMacCommandsRemoveCmd>
                    break;
 80101a4:	e00a      	b.n	80101bc <LoRaMacCommandsRemoveStickyAnsCmds+0x58>
            for( uint8_t i = 0; i < sizeof( CIDsStickyAnsCmds ); i++)
 80101a6:	210b      	movs	r1, #11
 80101a8:	187b      	adds	r3, r7, r1
 80101aa:	781a      	ldrb	r2, [r3, #0]
 80101ac:	187b      	adds	r3, r7, r1
 80101ae:	3201      	adds	r2, #1
 80101b0:	701a      	strb	r2, [r3, #0]
 80101b2:	230b      	movs	r3, #11
 80101b4:	18fb      	adds	r3, r7, r3
 80101b6:	781b      	ldrb	r3, [r3, #0]
 80101b8:	2b02      	cmp	r3, #2
 80101ba:	d9e6      	bls.n	801018a <LoRaMacCommandsRemoveStickyAnsCmds+0x26>
                }
            }
        }
        curElement = nexElement;
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	60fb      	str	r3, [r7, #12]
    while( curElement != NULL )
 80101c0:	68fb      	ldr	r3, [r7, #12]
 80101c2:	2b00      	cmp	r3, #0
 80101c4:	d1d5      	bne.n	8010172 <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
    }

    NvmCtxCallback( );
 80101c6:	f7ff fecf 	bl	800ff68 <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
 80101ca:	2300      	movs	r3, #0
}
 80101cc:	0018      	movs	r0, r3
 80101ce:	46bd      	mov	sp, r7
 80101d0:	b004      	add	sp, #16
 80101d2:	bd80      	pop	{r7, pc}
 80101d4:	20000db4 	.word	0x20000db4
 80101d8:	08020aa8 	.word	0x08020aa8

080101dc <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 80101dc:	b580      	push	{r7, lr}
 80101de:	b082      	sub	sp, #8
 80101e0:	af00      	add	r7, sp, #0
 80101e2:	6078      	str	r0, [r7, #4]
    if( size == NULL )
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	2b00      	cmp	r3, #0
 80101e8:	d101      	bne.n	80101ee <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80101ea:	2301      	movs	r3, #1
 80101ec:	e005      	b.n	80101fa <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = NvmCtx.SerializedCmdsSize;
 80101ee:	4b05      	ldr	r3, [pc, #20]	; (8010204 <LoRaMacCommandsGetSizeSerializedCmds+0x28>)
 80101f0:	22f8      	movs	r2, #248	; 0xf8
 80101f2:	589a      	ldr	r2, [r3, r2]
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 80101f8:	2300      	movs	r3, #0

}
 80101fa:	0018      	movs	r0, r3
 80101fc:	46bd      	mov	sp, r7
 80101fe:	b002      	add	sp, #8
 8010200:	bd80      	pop	{r7, pc}
 8010202:	46c0      	nop			; (mov r8, r8)
 8010204:	20000db4 	.word	0x20000db4

08010208 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize,  uint8_t* buffer )
{
 8010208:	b590      	push	{r4, r7, lr}
 801020a:	b087      	sub	sp, #28
 801020c:	af00      	add	r7, sp, #0
 801020e:	60f8      	str	r0, [r7, #12]
 8010210:	60b9      	str	r1, [r7, #8]
 8010212:	607a      	str	r2, [r7, #4]
    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	2b00      	cmp	r3, #0
 8010218:	d002      	beq.n	8010220 <LoRaMacCommandsSerializeCmds+0x18>
 801021a:	68bb      	ldr	r3, [r7, #8]
 801021c:	2b00      	cmp	r3, #0
 801021e:	d101      	bne.n	8010224 <LoRaMacCommandsSerializeCmds+0x1c>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8010220:	2301      	movs	r3, #1
 8010222:	e03a      	b.n	801029a <LoRaMacCommandsSerializeCmds+0x92>
    }
    MacCommand_t* curElement;
    curElement = NvmCtx.MacCommandList.First;
 8010224:	4b1f      	ldr	r3, [pc, #124]	; (80102a4 <LoRaMacCommandsSerializeCmds+0x9c>)
 8010226:	681b      	ldr	r3, [r3, #0]
 8010228:	617b      	str	r3, [r7, #20]
    uint8_t itr = 0;
 801022a:	2313      	movs	r3, #19
 801022c:	18fb      	adds	r3, r7, r3
 801022e:	2200      	movs	r2, #0
 8010230:	701a      	strb	r2, [r3, #0]

    // Loop through all elements
    while( curElement )
 8010232:	e02c      	b.n	801028e <LoRaMacCommandsSerializeCmds+0x86>
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 8010234:	2313      	movs	r3, #19
 8010236:	18fb      	adds	r3, r7, r3
 8010238:	781b      	ldrb	r3, [r3, #0]
 801023a:	68fa      	ldr	r2, [r7, #12]
 801023c:	1ad2      	subs	r2, r2, r3
 801023e:	697b      	ldr	r3, [r7, #20]
 8010240:	689b      	ldr	r3, [r3, #8]
 8010242:	3301      	adds	r3, #1
 8010244:	429a      	cmp	r2, r3
 8010246:	d326      	bcc.n	8010296 <LoRaMacCommandsSerializeCmds+0x8e>
        {
            buffer[itr++] = curElement->CID;
 8010248:	2413      	movs	r4, #19
 801024a:	193b      	adds	r3, r7, r4
 801024c:	781b      	ldrb	r3, [r3, #0]
 801024e:	193a      	adds	r2, r7, r4
 8010250:	1c59      	adds	r1, r3, #1
 8010252:	7011      	strb	r1, [r2, #0]
 8010254:	001a      	movs	r2, r3
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	189b      	adds	r3, r3, r2
 801025a:	697a      	ldr	r2, [r7, #20]
 801025c:	7912      	ldrb	r2, [r2, #4]
 801025e:	701a      	strb	r2, [r3, #0]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 8010260:	193b      	adds	r3, r7, r4
 8010262:	781b      	ldrb	r3, [r3, #0]
 8010264:	687a      	ldr	r2, [r7, #4]
 8010266:	18d0      	adds	r0, r2, r3
 8010268:	697b      	ldr	r3, [r7, #20]
 801026a:	1d59      	adds	r1, r3, #5
 801026c:	697b      	ldr	r3, [r7, #20]
 801026e:	689b      	ldr	r3, [r3, #8]
 8010270:	b29b      	uxth	r3, r3
 8010272:	001a      	movs	r2, r3
 8010274:	f005 fa34 	bl	80156e0 <memcpy1>
            itr = itr + curElement->PayloadSize;
 8010278:	697b      	ldr	r3, [r7, #20]
 801027a:	689b      	ldr	r3, [r3, #8]
 801027c:	b2d9      	uxtb	r1, r3
 801027e:	193b      	adds	r3, r7, r4
 8010280:	193a      	adds	r2, r7, r4
 8010282:	7812      	ldrb	r2, [r2, #0]
 8010284:	188a      	adds	r2, r1, r2
 8010286:	701a      	strb	r2, [r3, #0]
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 8010288:	697b      	ldr	r3, [r7, #20]
 801028a:	681b      	ldr	r3, [r3, #0]
 801028c:	617b      	str	r3, [r7, #20]
    while( curElement )
 801028e:	697b      	ldr	r3, [r7, #20]
 8010290:	2b00      	cmp	r3, #0
 8010292:	d1cf      	bne.n	8010234 <LoRaMacCommandsSerializeCmds+0x2c>
 8010294:	e000      	b.n	8010298 <LoRaMacCommandsSerializeCmds+0x90>
            break;
 8010296:	46c0      	nop			; (mov r8, r8)
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8010298:	2300      	movs	r3, #0
}
 801029a:	0018      	movs	r0, r3
 801029c:	46bd      	mov	sp, r7
 801029e:	b007      	add	sp, #28
 80102a0:	bd90      	pop	{r4, r7, pc}
 80102a2:	46c0      	nop			; (mov r8, r8)
 80102a4:	20000db4 	.word	0x20000db4

080102a8 <LoRaMacCommandsStickyCmdsPending>:

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
 80102a8:	b580      	push	{r7, lr}
 80102aa:	b084      	sub	sp, #16
 80102ac:	af00      	add	r7, sp, #0
 80102ae:	6078      	str	r0, [r7, #4]
    if( cmdsPending == NULL )
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	2b00      	cmp	r3, #0
 80102b4:	d101      	bne.n	80102ba <LoRaMacCommandsStickyCmdsPending+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80102b6:	2301      	movs	r3, #1
 80102b8:	e016      	b.n	80102e8 <LoRaMacCommandsStickyCmdsPending+0x40>
    }
    MacCommand_t* curElement;
    curElement = NvmCtx.MacCommandList.First;
 80102ba:	4b0d      	ldr	r3, [pc, #52]	; (80102f0 <LoRaMacCommandsStickyCmdsPending+0x48>)
 80102bc:	681b      	ldr	r3, [r3, #0]
 80102be:	60fb      	str	r3, [r7, #12]

    *cmdsPending = false;
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	2200      	movs	r2, #0
 80102c4:	701a      	strb	r2, [r3, #0]

    // Loop through all elements
    while( curElement )
 80102c6:	e00b      	b.n	80102e0 <LoRaMacCommandsStickyCmdsPending+0x38>
    {
        if( curElement->IsSticky == true )
 80102c8:	68fb      	ldr	r3, [r7, #12]
 80102ca:	7b1b      	ldrb	r3, [r3, #12]
 80102cc:	2b00      	cmp	r3, #0
 80102ce:	d004      	beq.n	80102da <LoRaMacCommandsStickyCmdsPending+0x32>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	2201      	movs	r2, #1
 80102d4:	701a      	strb	r2, [r3, #0]
            return LORAMAC_COMMANDS_SUCCESS;
 80102d6:	2300      	movs	r3, #0
 80102d8:	e006      	b.n	80102e8 <LoRaMacCommandsStickyCmdsPending+0x40>
        }
        curElement = curElement->Next;
 80102da:	68fb      	ldr	r3, [r7, #12]
 80102dc:	681b      	ldr	r3, [r3, #0]
 80102de:	60fb      	str	r3, [r7, #12]
    while( curElement )
 80102e0:	68fb      	ldr	r3, [r7, #12]
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	d1f0      	bne.n	80102c8 <LoRaMacCommandsStickyCmdsPending+0x20>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 80102e6:	2300      	movs	r3, #0
}
 80102e8:	0018      	movs	r0, r3
 80102ea:	46bd      	mov	sp, r7
 80102ec:	b004      	add	sp, #16
 80102ee:	bd80      	pop	{r7, pc}
 80102f0:	20000db4 	.word	0x20000db4

080102f4 <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 80102f4:	b580      	push	{r7, lr}
 80102f6:	b082      	sub	sp, #8
 80102f8:	af00      	add	r7, sp, #0
 80102fa:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 80102fc:	4b08      	ldr	r3, [pc, #32]	; (8010320 <IncreaseBufferPointer+0x2c>)
 80102fe:	691b      	ldr	r3, [r3, #16]
 8010300:	3310      	adds	r3, #16
 8010302:	687a      	ldr	r2, [r7, #4]
 8010304:	429a      	cmp	r2, r3
 8010306:	d103      	bne.n	8010310 <IncreaseBufferPointer+0x1c>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 8010308:	4b05      	ldr	r3, [pc, #20]	; (8010320 <IncreaseBufferPointer+0x2c>)
 801030a:	691b      	ldr	r3, [r3, #16]
 801030c:	607b      	str	r3, [r7, #4]
 801030e:	e002      	b.n	8010316 <IncreaseBufferPointer+0x22>
    }
    else
    {
        // Increase
        bufferPointer++;
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	3304      	adds	r3, #4
 8010314:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 8010316:	687b      	ldr	r3, [r7, #4]
}
 8010318:	0018      	movs	r0, r3
 801031a:	46bd      	mov	sp, r7
 801031c:	b002      	add	sp, #8
 801031e:	bd80      	pop	{r7, pc}
 8010320:	20000ec8 	.word	0x20000ec8

08010324 <GetElement>:
    }
    return bufferPointer;
}

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 8010324:	b580      	push	{r7, lr}
 8010326:	b086      	sub	sp, #24
 8010328:	af00      	add	r7, sp, #0
 801032a:	60b9      	str	r1, [r7, #8]
 801032c:	607a      	str	r2, [r7, #4]
 801032e:	230f      	movs	r3, #15
 8010330:	18fb      	adds	r3, r7, r3
 8010332:	1c02      	adds	r2, r0, #0
 8010334:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t* element = bufferStart;
 8010336:	68bb      	ldr	r3, [r7, #8]
 8010338:	617b      	str	r3, [r7, #20]

    while( element != bufferEnd )
 801033a:	e00e      	b.n	801035a <GetElement+0x36>
    {
        if( element->Request == request )
 801033c:	697b      	ldr	r3, [r7, #20]
 801033e:	781b      	ldrb	r3, [r3, #0]
 8010340:	220f      	movs	r2, #15
 8010342:	18ba      	adds	r2, r7, r2
 8010344:	7812      	ldrb	r2, [r2, #0]
 8010346:	429a      	cmp	r2, r3
 8010348:	d101      	bne.n	801034e <GetElement+0x2a>
        {
            // We have found the element
            return element;
 801034a:	697b      	ldr	r3, [r7, #20]
 801034c:	e00a      	b.n	8010364 <GetElement+0x40>
        }
        else
        {
            element = IncreaseBufferPointer( element );
 801034e:	697b      	ldr	r3, [r7, #20]
 8010350:	0018      	movs	r0, r3
 8010352:	f7ff ffcf 	bl	80102f4 <IncreaseBufferPointer>
 8010356:	0003      	movs	r3, r0
 8010358:	617b      	str	r3, [r7, #20]
    while( element != bufferEnd )
 801035a:	697a      	ldr	r2, [r7, #20]
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	429a      	cmp	r2, r3
 8010360:	d1ec      	bne.n	801033c <GetElement+0x18>
        }
    }
    return NULL;
 8010362:	2300      	movs	r3, #0
}
 8010364:	0018      	movs	r0, r3
 8010366:	46bd      	mov	sp, r7
 8010368:	b006      	add	sp, #24
 801036a:	bd80      	pop	{r7, pc}

0801036c <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives, EventNvmCtxChanged confirmQueueNvmCtxChanged )
{
 801036c:	b580      	push	{r7, lr}
 801036e:	b082      	sub	sp, #8
 8010370:	af00      	add	r7, sp, #0
 8010372:	6078      	str	r0, [r7, #4]
 8010374:	6039      	str	r1, [r7, #0]
    ConfirmQueueCtx.Primitives = primitives;
 8010376:	4b13      	ldr	r3, [pc, #76]	; (80103c4 <LoRaMacConfirmQueueInit+0x58>)
 8010378:	687a      	ldr	r2, [r7, #4]
 801037a:	601a      	str	r2, [r3, #0]

    // Assign nvm context
    ConfirmQueueCtx.ConfirmQueueNvmCtx = &ConfirmQueueNvmCtx;
 801037c:	4b11      	ldr	r3, [pc, #68]	; (80103c4 <LoRaMacConfirmQueueInit+0x58>)
 801037e:	4a12      	ldr	r2, [pc, #72]	; (80103c8 <LoRaMacConfirmQueueInit+0x5c>)
 8010380:	611a      	str	r2, [r3, #16]

    // Init counter
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt = 0;
 8010382:	4b10      	ldr	r3, [pc, #64]	; (80103c4 <LoRaMacConfirmQueueInit+0x58>)
 8010384:	691b      	ldr	r3, [r3, #16]
 8010386:	2200      	movs	r2, #0
 8010388:	751a      	strb	r2, [r3, #20]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 801038a:	4b0e      	ldr	r3, [pc, #56]	; (80103c4 <LoRaMacConfirmQueueInit+0x58>)
 801038c:	691b      	ldr	r3, [r3, #16]
 801038e:	001a      	movs	r2, r3
 8010390:	4b0c      	ldr	r3, [pc, #48]	; (80103c4 <LoRaMacConfirmQueueInit+0x58>)
 8010392:	605a      	str	r2, [r3, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 8010394:	4b0b      	ldr	r3, [pc, #44]	; (80103c4 <LoRaMacConfirmQueueInit+0x58>)
 8010396:	691b      	ldr	r3, [r3, #16]
 8010398:	001a      	movs	r2, r3
 801039a:	4b0a      	ldr	r3, [pc, #40]	; (80103c4 <LoRaMacConfirmQueueInit+0x58>)
 801039c:	609a      	str	r2, [r3, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue ) );
 801039e:	4b09      	ldr	r3, [pc, #36]	; (80103c4 <LoRaMacConfirmQueueInit+0x58>)
 80103a0:	691b      	ldr	r3, [r3, #16]
 80103a2:	2214      	movs	r2, #20
 80103a4:	21ff      	movs	r1, #255	; 0xff
 80103a6:	0018      	movs	r0, r3
 80103a8:	f005 f9d6 	bl	8015758 <memset1>

    // Common status
    ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80103ac:	4b05      	ldr	r3, [pc, #20]	; (80103c4 <LoRaMacConfirmQueueInit+0x58>)
 80103ae:	691b      	ldr	r3, [r3, #16]
 80103b0:	2201      	movs	r2, #1
 80103b2:	755a      	strb	r2, [r3, #21]

    // Assign callback
    ConfirmQueueCtx.EventNvmCtxChanged = confirmQueueNvmCtxChanged;
 80103b4:	4b03      	ldr	r3, [pc, #12]	; (80103c4 <LoRaMacConfirmQueueInit+0x58>)
 80103b6:	683a      	ldr	r2, [r7, #0]
 80103b8:	60da      	str	r2, [r3, #12]
}
 80103ba:	46c0      	nop			; (mov r8, r8)
 80103bc:	46bd      	mov	sp, r7
 80103be:	b002      	add	sp, #8
 80103c0:	bd80      	pop	{r7, pc}
 80103c2:	46c0      	nop			; (mov r8, r8)
 80103c4:	20000ec8 	.word	0x20000ec8
 80103c8:	20000eb0 	.word	0x20000eb0

080103cc <LoRaMacConfirmQueueRestoreNvmCtx>:

bool LoRaMacConfirmQueueRestoreNvmCtx( void* confirmQueueNvmCtx )
{
 80103cc:	b580      	push	{r7, lr}
 80103ce:	b082      	sub	sp, #8
 80103d0:	af00      	add	r7, sp, #0
 80103d2:	6078      	str	r0, [r7, #4]
    // Restore module context
    if( confirmQueueNvmCtx != NULL )
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	2b00      	cmp	r3, #0
 80103d8:	d007      	beq.n	80103ea <LoRaMacConfirmQueueRestoreNvmCtx+0x1e>
    {
        memcpy1( ( uint8_t* )&ConfirmQueueNvmCtx, ( uint8_t* ) confirmQueueNvmCtx, sizeof( ConfirmQueueNvmCtx ) );
 80103da:	6879      	ldr	r1, [r7, #4]
 80103dc:	4b05      	ldr	r3, [pc, #20]	; (80103f4 <LoRaMacConfirmQueueRestoreNvmCtx+0x28>)
 80103de:	2216      	movs	r2, #22
 80103e0:	0018      	movs	r0, r3
 80103e2:	f005 f97d 	bl	80156e0 <memcpy1>
        return true;
 80103e6:	2301      	movs	r3, #1
 80103e8:	e000      	b.n	80103ec <LoRaMacConfirmQueueRestoreNvmCtx+0x20>
    }
    else
    {
        return false;
 80103ea:	2300      	movs	r3, #0
    }
}
 80103ec:	0018      	movs	r0, r3
 80103ee:	46bd      	mov	sp, r7
 80103f0:	b002      	add	sp, #8
 80103f2:	bd80      	pop	{r7, pc}
 80103f4:	20000eb0 	.word	0x20000eb0

080103f8 <LoRaMacConfirmQueueGetNvmCtx>:

void* LoRaMacConfirmQueueGetNvmCtx( size_t* confirmQueueNvmCtxSize )
{
 80103f8:	b580      	push	{r7, lr}
 80103fa:	b082      	sub	sp, #8
 80103fc:	af00      	add	r7, sp, #0
 80103fe:	6078      	str	r0, [r7, #4]
    *confirmQueueNvmCtxSize = sizeof( ConfirmQueueNvmCtx );
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	2216      	movs	r2, #22
 8010404:	601a      	str	r2, [r3, #0]
    return &ConfirmQueueNvmCtx;
 8010406:	4b02      	ldr	r3, [pc, #8]	; (8010410 <LoRaMacConfirmQueueGetNvmCtx+0x18>)
}
 8010408:	0018      	movs	r0, r3
 801040a:	46bd      	mov	sp, r7
 801040c:	b002      	add	sp, #8
 801040e:	bd80      	pop	{r7, pc}
 8010410:	20000eb0 	.word	0x20000eb0

08010414 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 8010414:	b580      	push	{r7, lr}
 8010416:	b082      	sub	sp, #8
 8010418:	af00      	add	r7, sp, #0
 801041a:	6078      	str	r0, [r7, #4]
    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 801041c:	4b16      	ldr	r3, [pc, #88]	; (8010478 <LoRaMacConfirmQueueAdd+0x64>)
 801041e:	691b      	ldr	r3, [r3, #16]
 8010420:	7d1b      	ldrb	r3, [r3, #20]
 8010422:	2b04      	cmp	r3, #4
 8010424:	d901      	bls.n	801042a <LoRaMacConfirmQueueAdd+0x16>
    {
        // Protect the buffer against overwrites
        return false;
 8010426:	2300      	movs	r3, #0
 8010428:	e021      	b.n	801046e <LoRaMacConfirmQueueAdd+0x5a>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 801042a:	4b13      	ldr	r3, [pc, #76]	; (8010478 <LoRaMacConfirmQueueAdd+0x64>)
 801042c:	689b      	ldr	r3, [r3, #8]
 801042e:	687a      	ldr	r2, [r7, #4]
 8010430:	7812      	ldrb	r2, [r2, #0]
 8010432:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 8010434:	4b10      	ldr	r3, [pc, #64]	; (8010478 <LoRaMacConfirmQueueAdd+0x64>)
 8010436:	689b      	ldr	r3, [r3, #8]
 8010438:	687a      	ldr	r2, [r7, #4]
 801043a:	7852      	ldrb	r2, [r2, #1]
 801043c:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 801043e:	4b0e      	ldr	r3, [pc, #56]	; (8010478 <LoRaMacConfirmQueueAdd+0x64>)
 8010440:	689b      	ldr	r3, [r3, #8]
 8010442:	687a      	ldr	r2, [r7, #4]
 8010444:	78d2      	ldrb	r2, [r2, #3]
 8010446:	70da      	strb	r2, [r3, #3]
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
 8010448:	4b0b      	ldr	r3, [pc, #44]	; (8010478 <LoRaMacConfirmQueueAdd+0x64>)
 801044a:	689b      	ldr	r3, [r3, #8]
 801044c:	2200      	movs	r2, #0
 801044e:	709a      	strb	r2, [r3, #2]
    // Increase counter
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt++;
 8010450:	4b09      	ldr	r3, [pc, #36]	; (8010478 <LoRaMacConfirmQueueAdd+0x64>)
 8010452:	691b      	ldr	r3, [r3, #16]
 8010454:	7d1a      	ldrb	r2, [r3, #20]
 8010456:	3201      	adds	r2, #1
 8010458:	b2d2      	uxtb	r2, r2
 801045a:	751a      	strb	r2, [r3, #20]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 801045c:	4b06      	ldr	r3, [pc, #24]	; (8010478 <LoRaMacConfirmQueueAdd+0x64>)
 801045e:	689b      	ldr	r3, [r3, #8]
 8010460:	0018      	movs	r0, r3
 8010462:	f7ff ff47 	bl	80102f4 <IncreaseBufferPointer>
 8010466:	0002      	movs	r2, r0
 8010468:	4b03      	ldr	r3, [pc, #12]	; (8010478 <LoRaMacConfirmQueueAdd+0x64>)
 801046a:	609a      	str	r2, [r3, #8]

    return true;
 801046c:	2301      	movs	r3, #1
}
 801046e:	0018      	movs	r0, r3
 8010470:	46bd      	mov	sp, r7
 8010472:	b002      	add	sp, #8
 8010474:	bd80      	pop	{r7, pc}
 8010476:	46c0      	nop			; (mov r8, r8)
 8010478:	20000ec8 	.word	0x20000ec8

0801047c <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 801047c:	b580      	push	{r7, lr}
 801047e:	af00      	add	r7, sp, #0
    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt == 0 )
 8010480:	4b0c      	ldr	r3, [pc, #48]	; (80104b4 <LoRaMacConfirmQueueRemoveFirst+0x38>)
 8010482:	691b      	ldr	r3, [r3, #16]
 8010484:	7d1b      	ldrb	r3, [r3, #20]
 8010486:	2b00      	cmp	r3, #0
 8010488:	d101      	bne.n	801048e <LoRaMacConfirmQueueRemoveFirst+0x12>
    {
        return false;
 801048a:	2300      	movs	r3, #0
 801048c:	e00e      	b.n	80104ac <LoRaMacConfirmQueueRemoveFirst+0x30>
    }

    // Increase counter
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt--;
 801048e:	4b09      	ldr	r3, [pc, #36]	; (80104b4 <LoRaMacConfirmQueueRemoveFirst+0x38>)
 8010490:	691b      	ldr	r3, [r3, #16]
 8010492:	7d1a      	ldrb	r2, [r3, #20]
 8010494:	3a01      	subs	r2, #1
 8010496:	b2d2      	uxtb	r2, r2
 8010498:	751a      	strb	r2, [r3, #20]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 801049a:	4b06      	ldr	r3, [pc, #24]	; (80104b4 <LoRaMacConfirmQueueRemoveFirst+0x38>)
 801049c:	685b      	ldr	r3, [r3, #4]
 801049e:	0018      	movs	r0, r3
 80104a0:	f7ff ff28 	bl	80102f4 <IncreaseBufferPointer>
 80104a4:	0002      	movs	r2, r0
 80104a6:	4b03      	ldr	r3, [pc, #12]	; (80104b4 <LoRaMacConfirmQueueRemoveFirst+0x38>)
 80104a8:	605a      	str	r2, [r3, #4]

    return true;
 80104aa:	2301      	movs	r3, #1
}
 80104ac:	0018      	movs	r0, r3
 80104ae:	46bd      	mov	sp, r7
 80104b0:	bd80      	pop	{r7, pc}
 80104b2:	46c0      	nop			; (mov r8, r8)
 80104b4:	20000ec8 	.word	0x20000ec8

080104b8 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 80104b8:	b580      	push	{r7, lr}
 80104ba:	b084      	sub	sp, #16
 80104bc:	af00      	add	r7, sp, #0
 80104be:	0002      	movs	r2, r0
 80104c0:	1dfb      	adds	r3, r7, #7
 80104c2:	701a      	strb	r2, [r3, #0]
 80104c4:	1dbb      	adds	r3, r7, #6
 80104c6:	1c0a      	adds	r2, r1, #0
 80104c8:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t* element = NULL;
 80104ca:	2300      	movs	r3, #0
 80104cc:	60fb      	str	r3, [r7, #12]

    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt > 0 )
 80104ce:	4b0f      	ldr	r3, [pc, #60]	; (801050c <LoRaMacConfirmQueueSetStatus+0x54>)
 80104d0:	691b      	ldr	r3, [r3, #16]
 80104d2:	7d1b      	ldrb	r3, [r3, #20]
 80104d4:	2b00      	cmp	r3, #0
 80104d6:	d014      	beq.n	8010502 <LoRaMacConfirmQueueSetStatus+0x4a>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 80104d8:	4b0c      	ldr	r3, [pc, #48]	; (801050c <LoRaMacConfirmQueueSetStatus+0x54>)
 80104da:	6859      	ldr	r1, [r3, #4]
 80104dc:	4b0b      	ldr	r3, [pc, #44]	; (801050c <LoRaMacConfirmQueueSetStatus+0x54>)
 80104de:	689a      	ldr	r2, [r3, #8]
 80104e0:	1dbb      	adds	r3, r7, #6
 80104e2:	781b      	ldrb	r3, [r3, #0]
 80104e4:	0018      	movs	r0, r3
 80104e6:	f7ff ff1d 	bl	8010324 <GetElement>
 80104ea:	0003      	movs	r3, r0
 80104ec:	60fb      	str	r3, [r7, #12]
        if( element != NULL )
 80104ee:	68fb      	ldr	r3, [r7, #12]
 80104f0:	2b00      	cmp	r3, #0
 80104f2:	d006      	beq.n	8010502 <LoRaMacConfirmQueueSetStatus+0x4a>
        {
            element->Status = status;
 80104f4:	68fb      	ldr	r3, [r7, #12]
 80104f6:	1dfa      	adds	r2, r7, #7
 80104f8:	7812      	ldrb	r2, [r2, #0]
 80104fa:	705a      	strb	r2, [r3, #1]
            element->ReadyToHandle = true;
 80104fc:	68fb      	ldr	r3, [r7, #12]
 80104fe:	2201      	movs	r2, #1
 8010500:	709a      	strb	r2, [r3, #2]
        }
    }
}
 8010502:	46c0      	nop			; (mov r8, r8)
 8010504:	46bd      	mov	sp, r7
 8010506:	b004      	add	sp, #16
 8010508:	bd80      	pop	{r7, pc}
 801050a:	46c0      	nop			; (mov r8, r8)
 801050c:	20000ec8 	.word	0x20000ec8

08010510 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 8010510:	b580      	push	{r7, lr}
 8010512:	b084      	sub	sp, #16
 8010514:	af00      	add	r7, sp, #0
 8010516:	0002      	movs	r2, r0
 8010518:	1dfb      	adds	r3, r7, #7
 801051a:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t* element = NULL;
 801051c:	2300      	movs	r3, #0
 801051e:	60fb      	str	r3, [r7, #12]

    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt > 0 )
 8010520:	4b0d      	ldr	r3, [pc, #52]	; (8010558 <LoRaMacConfirmQueueGetStatus+0x48>)
 8010522:	691b      	ldr	r3, [r3, #16]
 8010524:	7d1b      	ldrb	r3, [r3, #20]
 8010526:	2b00      	cmp	r3, #0
 8010528:	d010      	beq.n	801054c <LoRaMacConfirmQueueGetStatus+0x3c>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 801052a:	4b0b      	ldr	r3, [pc, #44]	; (8010558 <LoRaMacConfirmQueueGetStatus+0x48>)
 801052c:	6859      	ldr	r1, [r3, #4]
 801052e:	4b0a      	ldr	r3, [pc, #40]	; (8010558 <LoRaMacConfirmQueueGetStatus+0x48>)
 8010530:	689a      	ldr	r2, [r3, #8]
 8010532:	1dfb      	adds	r3, r7, #7
 8010534:	781b      	ldrb	r3, [r3, #0]
 8010536:	0018      	movs	r0, r3
 8010538:	f7ff fef4 	bl	8010324 <GetElement>
 801053c:	0003      	movs	r3, r0
 801053e:	60fb      	str	r3, [r7, #12]
        if( element != NULL )
 8010540:	68fb      	ldr	r3, [r7, #12]
 8010542:	2b00      	cmp	r3, #0
 8010544:	d002      	beq.n	801054c <LoRaMacConfirmQueueGetStatus+0x3c>
        {
            return element->Status;
 8010546:	68fb      	ldr	r3, [r7, #12]
 8010548:	785b      	ldrb	r3, [r3, #1]
 801054a:	e000      	b.n	801054e <LoRaMacConfirmQueueGetStatus+0x3e>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 801054c:	2301      	movs	r3, #1
}
 801054e:	0018      	movs	r0, r3
 8010550:	46bd      	mov	sp, r7
 8010552:	b004      	add	sp, #16
 8010554:	bd80      	pop	{r7, pc}
 8010556:	46c0      	nop			; (mov r8, r8)
 8010558:	20000ec8 	.word	0x20000ec8

0801055c <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 801055c:	b580      	push	{r7, lr}
 801055e:	b084      	sub	sp, #16
 8010560:	af00      	add	r7, sp, #0
 8010562:	0002      	movs	r2, r0
 8010564:	1dfb      	adds	r3, r7, #7
 8010566:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 8010568:	4b14      	ldr	r3, [pc, #80]	; (80105bc <LoRaMacConfirmQueueSetStatusCmn+0x60>)
 801056a:	685b      	ldr	r3, [r3, #4]
 801056c:	60fb      	str	r3, [r7, #12]

    ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus = status;
 801056e:	4b13      	ldr	r3, [pc, #76]	; (80105bc <LoRaMacConfirmQueueSetStatusCmn+0x60>)
 8010570:	691b      	ldr	r3, [r3, #16]
 8010572:	1dfa      	adds	r2, r7, #7
 8010574:	7812      	ldrb	r2, [r2, #0]
 8010576:	755a      	strb	r2, [r3, #21]

    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt > 0 )
 8010578:	4b10      	ldr	r3, [pc, #64]	; (80105bc <LoRaMacConfirmQueueSetStatusCmn+0x60>)
 801057a:	691b      	ldr	r3, [r3, #16]
 801057c:	7d1b      	ldrb	r3, [r3, #20]
 801057e:	2b00      	cmp	r3, #0
 8010580:	d018      	beq.n	80105b4 <LoRaMacConfirmQueueSetStatusCmn+0x58>
    {
        do
        {
            element->Status = status;
 8010582:	68fb      	ldr	r3, [r7, #12]
 8010584:	1dfa      	adds	r2, r7, #7
 8010586:	7812      	ldrb	r2, [r2, #0]
 8010588:	705a      	strb	r2, [r3, #1]
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
 801058a:	68fb      	ldr	r3, [r7, #12]
 801058c:	78db      	ldrb	r3, [r3, #3]
 801058e:	2201      	movs	r2, #1
 8010590:	4053      	eors	r3, r2
 8010592:	b2db      	uxtb	r3, r3
 8010594:	2b00      	cmp	r3, #0
 8010596:	d002      	beq.n	801059e <LoRaMacConfirmQueueSetStatusCmn+0x42>
            {
                element->ReadyToHandle = true;
 8010598:	68fb      	ldr	r3, [r7, #12]
 801059a:	2201      	movs	r2, #1
 801059c:	709a      	strb	r2, [r3, #2]
            }
            element = IncreaseBufferPointer( element );
 801059e:	68fb      	ldr	r3, [r7, #12]
 80105a0:	0018      	movs	r0, r3
 80105a2:	f7ff fea7 	bl	80102f4 <IncreaseBufferPointer>
 80105a6:	0003      	movs	r3, r0
 80105a8:	60fb      	str	r3, [r7, #12]
        }while( element != ConfirmQueueCtx.BufferEnd );
 80105aa:	4b04      	ldr	r3, [pc, #16]	; (80105bc <LoRaMacConfirmQueueSetStatusCmn+0x60>)
 80105ac:	689b      	ldr	r3, [r3, #8]
 80105ae:	68fa      	ldr	r2, [r7, #12]
 80105b0:	429a      	cmp	r2, r3
 80105b2:	d1e6      	bne.n	8010582 <LoRaMacConfirmQueueSetStatusCmn+0x26>
    }
}
 80105b4:	46c0      	nop			; (mov r8, r8)
 80105b6:	46bd      	mov	sp, r7
 80105b8:	b004      	add	sp, #16
 80105ba:	bd80      	pop	{r7, pc}
 80105bc:	20000ec8 	.word	0x20000ec8

080105c0 <LoRaMacConfirmQueueGetStatusCmn>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatusCmn( void )
{
 80105c0:	b580      	push	{r7, lr}
 80105c2:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus;
 80105c4:	4b02      	ldr	r3, [pc, #8]	; (80105d0 <LoRaMacConfirmQueueGetStatusCmn+0x10>)
 80105c6:	691b      	ldr	r3, [r3, #16]
 80105c8:	7d5b      	ldrb	r3, [r3, #21]
}
 80105ca:	0018      	movs	r0, r3
 80105cc:	46bd      	mov	sp, r7
 80105ce:	bd80      	pop	{r7, pc}
 80105d0:	20000ec8 	.word	0x20000ec8

080105d4 <LoRaMacConfirmQueueIsCmdActive>:

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 80105d4:	b580      	push	{r7, lr}
 80105d6:	b082      	sub	sp, #8
 80105d8:	af00      	add	r7, sp, #0
 80105da:	0002      	movs	r2, r0
 80105dc:	1dfb      	adds	r3, r7, #7
 80105de:	701a      	strb	r2, [r3, #0]
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 80105e0:	4b08      	ldr	r3, [pc, #32]	; (8010604 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 80105e2:	6859      	ldr	r1, [r3, #4]
 80105e4:	4b07      	ldr	r3, [pc, #28]	; (8010604 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 80105e6:	689a      	ldr	r2, [r3, #8]
 80105e8:	1dfb      	adds	r3, r7, #7
 80105ea:	781b      	ldrb	r3, [r3, #0]
 80105ec:	0018      	movs	r0, r3
 80105ee:	f7ff fe99 	bl	8010324 <GetElement>
 80105f2:	1e03      	subs	r3, r0, #0
 80105f4:	d001      	beq.n	80105fa <LoRaMacConfirmQueueIsCmdActive+0x26>
    {
        return true;
 80105f6:	2301      	movs	r3, #1
 80105f8:	e000      	b.n	80105fc <LoRaMacConfirmQueueIsCmdActive+0x28>
    }
    return false;
 80105fa:	2300      	movs	r3, #0
}
 80105fc:	0018      	movs	r0, r3
 80105fe:	46bd      	mov	sp, r7
 8010600:	b002      	add	sp, #8
 8010602:	bd80      	pop	{r7, pc}
 8010604:	20000ec8 	.word	0x20000ec8

08010608 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 8010608:	b580      	push	{r7, lr}
 801060a:	b084      	sub	sp, #16
 801060c:	af00      	add	r7, sp, #0
 801060e:	6078      	str	r0, [r7, #4]
    uint8_t nbElements = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt;
 8010610:	4b2d      	ldr	r3, [pc, #180]	; (80106c8 <LoRaMacConfirmQueueHandleCb+0xc0>)
 8010612:	691a      	ldr	r2, [r3, #16]
 8010614:	230e      	movs	r3, #14
 8010616:	18fb      	adds	r3, r7, r3
 8010618:	7d12      	ldrb	r2, [r2, #20]
 801061a:	701a      	strb	r2, [r3, #0]
    bool readyToHandle = false;
 801061c:	230d      	movs	r3, #13
 801061e:	18fb      	adds	r3, r7, r3
 8010620:	2200      	movs	r2, #0
 8010622:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 8010624:	230f      	movs	r3, #15
 8010626:	18fb      	adds	r3, r7, r3
 8010628:	2200      	movs	r2, #0
 801062a:	701a      	strb	r2, [r3, #0]
 801062c:	e03f      	b.n	80106ae <LoRaMacConfirmQueueHandleCb+0xa6>
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 801062e:	4b26      	ldr	r3, [pc, #152]	; (80106c8 <LoRaMacConfirmQueueHandleCb+0xc0>)
 8010630:	685b      	ldr	r3, [r3, #4]
 8010632:	781a      	ldrb	r2, [r3, #0]
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	701a      	strb	r2, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 8010638:	4b23      	ldr	r3, [pc, #140]	; (80106c8 <LoRaMacConfirmQueueHandleCb+0xc0>)
 801063a:	685b      	ldr	r3, [r3, #4]
 801063c:	785a      	ldrb	r2, [r3, #1]
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	705a      	strb	r2, [r3, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 8010642:	4b21      	ldr	r3, [pc, #132]	; (80106c8 <LoRaMacConfirmQueueHandleCb+0xc0>)
 8010644:	685a      	ldr	r2, [r3, #4]
 8010646:	210d      	movs	r1, #13
 8010648:	187b      	adds	r3, r7, r1
 801064a:	7892      	ldrb	r2, [r2, #2]
 801064c:	701a      	strb	r2, [r3, #0]

        if( readyToHandle == true )
 801064e:	187b      	adds	r3, r7, r1
 8010650:	781b      	ldrb	r3, [r3, #0]
 8010652:	2b00      	cmp	r3, #0
 8010654:	d006      	beq.n	8010664 <LoRaMacConfirmQueueHandleCb+0x5c>
        {
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 8010656:	4b1c      	ldr	r3, [pc, #112]	; (80106c8 <LoRaMacConfirmQueueHandleCb+0xc0>)
 8010658:	681b      	ldr	r3, [r3, #0]
 801065a:	689b      	ldr	r3, [r3, #8]
 801065c:	687a      	ldr	r2, [r7, #4]
 801065e:	0010      	movs	r0, r2
 8010660:	4798      	blx	r3
 8010662:	e00f      	b.n	8010684 <LoRaMacConfirmQueueHandleCb+0x7c>
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 8010664:	4b18      	ldr	r3, [pc, #96]	; (80106c8 <LoRaMacConfirmQueueHandleCb+0xc0>)
 8010666:	685b      	ldr	r3, [r3, #4]
 8010668:	781a      	ldrb	r2, [r3, #0]
 801066a:	2108      	movs	r1, #8
 801066c:	187b      	adds	r3, r7, r1
 801066e:	701a      	strb	r2, [r3, #0]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 8010670:	4b15      	ldr	r3, [pc, #84]	; (80106c8 <LoRaMacConfirmQueueHandleCb+0xc0>)
 8010672:	685b      	ldr	r3, [r3, #4]
 8010674:	785a      	ldrb	r2, [r3, #1]
 8010676:	187b      	adds	r3, r7, r1
 8010678:	705a      	strb	r2, [r3, #1]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 801067a:	4b13      	ldr	r3, [pc, #76]	; (80106c8 <LoRaMacConfirmQueueHandleCb+0xc0>)
 801067c:	685b      	ldr	r3, [r3, #4]
 801067e:	78da      	ldrb	r2, [r3, #3]
 8010680:	187b      	adds	r3, r7, r1
 8010682:	70da      	strb	r2, [r3, #3]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 8010684:	f7ff fefa 	bl	801047c <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 8010688:	230d      	movs	r3, #13
 801068a:	18fb      	adds	r3, r7, r3
 801068c:	781b      	ldrb	r3, [r3, #0]
 801068e:	2201      	movs	r2, #1
 8010690:	4053      	eors	r3, r2
 8010692:	b2db      	uxtb	r3, r3
 8010694:	2b00      	cmp	r3, #0
 8010696:	d004      	beq.n	80106a2 <LoRaMacConfirmQueueHandleCb+0x9a>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 8010698:	2308      	movs	r3, #8
 801069a:	18fb      	adds	r3, r7, r3
 801069c:	0018      	movs	r0, r3
 801069e:	f7ff feb9 	bl	8010414 <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 80106a2:	210f      	movs	r1, #15
 80106a4:	187b      	adds	r3, r7, r1
 80106a6:	781a      	ldrb	r2, [r3, #0]
 80106a8:	187b      	adds	r3, r7, r1
 80106aa:	3201      	adds	r2, #1
 80106ac:	701a      	strb	r2, [r3, #0]
 80106ae:	230f      	movs	r3, #15
 80106b0:	18fa      	adds	r2, r7, r3
 80106b2:	230e      	movs	r3, #14
 80106b4:	18fb      	adds	r3, r7, r3
 80106b6:	7812      	ldrb	r2, [r2, #0]
 80106b8:	781b      	ldrb	r3, [r3, #0]
 80106ba:	429a      	cmp	r2, r3
 80106bc:	d3b7      	bcc.n	801062e <LoRaMacConfirmQueueHandleCb+0x26>
        }
    }
}
 80106be:	46c0      	nop			; (mov r8, r8)
 80106c0:	46bd      	mov	sp, r7
 80106c2:	b004      	add	sp, #16
 80106c4:	bd80      	pop	{r7, pc}
 80106c6:	46c0      	nop			; (mov r8, r8)
 80106c8:	20000ec8 	.word	0x20000ec8

080106cc <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 80106cc:	b580      	push	{r7, lr}
 80106ce:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt;
 80106d0:	4b02      	ldr	r3, [pc, #8]	; (80106dc <LoRaMacConfirmQueueGetCnt+0x10>)
 80106d2:	691b      	ldr	r3, [r3, #16]
 80106d4:	7d1b      	ldrb	r3, [r3, #20]
}
 80106d6:	0018      	movs	r0, r3
 80106d8:	46bd      	mov	sp, r7
 80106da:	bd80      	pop	{r7, pc}
 80106dc:	20000ec8 	.word	0x20000ec8

080106e0 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 80106e0:	b580      	push	{r7, lr}
 80106e2:	af00      	add	r7, sp, #0
    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 80106e4:	4b05      	ldr	r3, [pc, #20]	; (80106fc <LoRaMacConfirmQueueIsFull+0x1c>)
 80106e6:	691b      	ldr	r3, [r3, #16]
 80106e8:	7d1b      	ldrb	r3, [r3, #20]
 80106ea:	2b04      	cmp	r3, #4
 80106ec:	d901      	bls.n	80106f2 <LoRaMacConfirmQueueIsFull+0x12>
    {
        return true;
 80106ee:	2301      	movs	r3, #1
 80106f0:	e000      	b.n	80106f4 <LoRaMacConfirmQueueIsFull+0x14>
    }
    else
    {
        return false;
 80106f2:	2300      	movs	r3, #0
    }
}
 80106f4:	0018      	movs	r0, r3
 80106f6:	46bd      	mov	sp, r7
 80106f8:	bd80      	pop	{r7, pc}
 80106fa:	46c0      	nop			; (mov r8, r8)
 80106fc:	20000ec8 	.word	0x20000ec8

08010700 <PayloadEncrypt>:
 * \param[IN]  size             - Size of data
 * \param[IN/OUT]  buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
 8010700:	b590      	push	{r4, r7, lr}
 8010702:	b08f      	sub	sp, #60	; 0x3c
 8010704:	af00      	add	r7, sp, #0
 8010706:	60f8      	str	r0, [r7, #12]
 8010708:	0008      	movs	r0, r1
 801070a:	0011      	movs	r1, r2
 801070c:	607b      	str	r3, [r7, #4]
 801070e:	230a      	movs	r3, #10
 8010710:	18fb      	adds	r3, r7, r3
 8010712:	1c02      	adds	r2, r0, #0
 8010714:	801a      	strh	r2, [r3, #0]
 8010716:	2309      	movs	r3, #9
 8010718:	18fb      	adds	r3, r7, r3
 801071a:	1c0a      	adds	r2, r1, #0
 801071c:	701a      	strb	r2, [r3, #0]
    if( buffer == 0 )
 801071e:	68fb      	ldr	r3, [r7, #12]
 8010720:	2b00      	cmp	r3, #0
 8010722:	d101      	bne.n	8010728 <PayloadEncrypt+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8010724:	2307      	movs	r3, #7
 8010726:	e0e9      	b.n	80108fc <PayloadEncrypt+0x1fc>
    }

    uint8_t bufferIndex = 0;
 8010728:	2337      	movs	r3, #55	; 0x37
 801072a:	18fb      	adds	r3, r7, r3
 801072c:	2200      	movs	r2, #0
 801072e:	701a      	strb	r2, [r3, #0]
    uint16_t ctr = 1;
 8010730:	2334      	movs	r3, #52	; 0x34
 8010732:	18fb      	adds	r3, r7, r3
 8010734:	2201      	movs	r2, #1
 8010736:	801a      	strh	r2, [r3, #0]
    uint8_t sBlock[16] = { 0 };
 8010738:	2320      	movs	r3, #32
 801073a:	18fb      	adds	r3, r7, r3
 801073c:	0018      	movs	r0, r3
 801073e:	2310      	movs	r3, #16
 8010740:	001a      	movs	r2, r3
 8010742:	2100      	movs	r1, #0
 8010744:	f00d fd6a 	bl	801e21c <memset>
    uint8_t aBlock[16] = { 0 };
 8010748:	2110      	movs	r1, #16
 801074a:	000c      	movs	r4, r1
 801074c:	187b      	adds	r3, r7, r1
 801074e:	0018      	movs	r0, r3
 8010750:	2310      	movs	r3, #16
 8010752:	001a      	movs	r2, r3
 8010754:	2100      	movs	r1, #0
 8010756:	f00d fd61 	bl	801e21c <memset>

    aBlock[0] = 0x01;
 801075a:	0021      	movs	r1, r4
 801075c:	187b      	adds	r3, r7, r1
 801075e:	2201      	movs	r2, #1
 8010760:	701a      	strb	r2, [r3, #0]

    aBlock[5] = dir;
 8010762:	187b      	adds	r3, r7, r1
 8010764:	2240      	movs	r2, #64	; 0x40
 8010766:	2008      	movs	r0, #8
 8010768:	4684      	mov	ip, r0
 801076a:	44bc      	add	ip, r7
 801076c:	4462      	add	r2, ip
 801076e:	7812      	ldrb	r2, [r2, #0]
 8010770:	715a      	strb	r2, [r3, #5]

    aBlock[6] = address & 0xFF;
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	b2da      	uxtb	r2, r3
 8010776:	187b      	adds	r3, r7, r1
 8010778:	719a      	strb	r2, [r3, #6]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	0a1b      	lsrs	r3, r3, #8
 801077e:	b2da      	uxtb	r2, r3
 8010780:	187b      	adds	r3, r7, r1
 8010782:	71da      	strb	r2, [r3, #7]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	0c1b      	lsrs	r3, r3, #16
 8010788:	b2da      	uxtb	r2, r3
 801078a:	187b      	adds	r3, r7, r1
 801078c:	721a      	strb	r2, [r3, #8]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	0e1b      	lsrs	r3, r3, #24
 8010792:	b2da      	uxtb	r2, r3
 8010794:	187b      	adds	r3, r7, r1
 8010796:	725a      	strb	r2, [r3, #9]

    aBlock[10] = frameCounter & 0xFF;
 8010798:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801079a:	b2da      	uxtb	r2, r3
 801079c:	187b      	adds	r3, r7, r1
 801079e:	729a      	strb	r2, [r3, #10]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 80107a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80107a2:	0a1b      	lsrs	r3, r3, #8
 80107a4:	b2da      	uxtb	r2, r3
 80107a6:	187b      	adds	r3, r7, r1
 80107a8:	72da      	strb	r2, [r3, #11]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 80107aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80107ac:	0c1b      	lsrs	r3, r3, #16
 80107ae:	b2da      	uxtb	r2, r3
 80107b0:	187b      	adds	r3, r7, r1
 80107b2:	731a      	strb	r2, [r3, #12]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 80107b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80107b6:	0e1b      	lsrs	r3, r3, #24
 80107b8:	b2da      	uxtb	r2, r3
 80107ba:	187b      	adds	r3, r7, r1
 80107bc:	735a      	strb	r2, [r3, #13]

    while( size >= 16 )
 80107be:	e04f      	b.n	8010860 <PayloadEncrypt+0x160>
    {
        aBlock[15] = ctr & 0xFF;
 80107c0:	2134      	movs	r1, #52	; 0x34
 80107c2:	187b      	adds	r3, r7, r1
 80107c4:	881b      	ldrh	r3, [r3, #0]
 80107c6:	b2da      	uxtb	r2, r3
 80107c8:	2010      	movs	r0, #16
 80107ca:	183b      	adds	r3, r7, r0
 80107cc:	73da      	strb	r2, [r3, #15]
        ctr++;
 80107ce:	187b      	adds	r3, r7, r1
 80107d0:	881a      	ldrh	r2, [r3, #0]
 80107d2:	187b      	adds	r3, r7, r1
 80107d4:	3201      	adds	r2, #1
 80107d6:	801a      	strh	r2, [r3, #0]
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 80107d8:	2320      	movs	r3, #32
 80107da:	18f9      	adds	r1, r7, r3
 80107dc:	2309      	movs	r3, #9
 80107de:	18fb      	adds	r3, r7, r3
 80107e0:	781a      	ldrb	r2, [r3, #0]
 80107e2:	1838      	adds	r0, r7, r0
 80107e4:	000b      	movs	r3, r1
 80107e6:	2110      	movs	r1, #16
 80107e8:	f7f9 fc02 	bl	8009ff0 <SecureElementAesEncrypt>
 80107ec:	1e03      	subs	r3, r0, #0
 80107ee:	d001      	beq.n	80107f4 <PayloadEncrypt+0xf4>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80107f0:	230c      	movs	r3, #12
 80107f2:	e083      	b.n	80108fc <PayloadEncrypt+0x1fc>
        }

        for( uint8_t i = 0; i < 16; i++ )
 80107f4:	2333      	movs	r3, #51	; 0x33
 80107f6:	18fb      	adds	r3, r7, r3
 80107f8:	2200      	movs	r2, #0
 80107fa:	701a      	strb	r2, [r3, #0]
 80107fc:	e01f      	b.n	801083e <PayloadEncrypt+0x13e>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 80107fe:	2037      	movs	r0, #55	; 0x37
 8010800:	183b      	adds	r3, r7, r0
 8010802:	781a      	ldrb	r2, [r3, #0]
 8010804:	2433      	movs	r4, #51	; 0x33
 8010806:	193b      	adds	r3, r7, r4
 8010808:	781b      	ldrb	r3, [r3, #0]
 801080a:	18d3      	adds	r3, r2, r3
 801080c:	001a      	movs	r2, r3
 801080e:	68fb      	ldr	r3, [r7, #12]
 8010810:	189b      	adds	r3, r3, r2
 8010812:	7819      	ldrb	r1, [r3, #0]
 8010814:	193b      	adds	r3, r7, r4
 8010816:	781b      	ldrb	r3, [r3, #0]
 8010818:	2220      	movs	r2, #32
 801081a:	18ba      	adds	r2, r7, r2
 801081c:	5cd2      	ldrb	r2, [r2, r3]
 801081e:	183b      	adds	r3, r7, r0
 8010820:	7818      	ldrb	r0, [r3, #0]
 8010822:	193b      	adds	r3, r7, r4
 8010824:	781b      	ldrb	r3, [r3, #0]
 8010826:	18c3      	adds	r3, r0, r3
 8010828:	0018      	movs	r0, r3
 801082a:	68fb      	ldr	r3, [r7, #12]
 801082c:	181b      	adds	r3, r3, r0
 801082e:	404a      	eors	r2, r1
 8010830:	b2d2      	uxtb	r2, r2
 8010832:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < 16; i++ )
 8010834:	193b      	adds	r3, r7, r4
 8010836:	781a      	ldrb	r2, [r3, #0]
 8010838:	193b      	adds	r3, r7, r4
 801083a:	3201      	adds	r2, #1
 801083c:	701a      	strb	r2, [r3, #0]
 801083e:	2333      	movs	r3, #51	; 0x33
 8010840:	18fb      	adds	r3, r7, r3
 8010842:	781b      	ldrb	r3, [r3, #0]
 8010844:	2b0f      	cmp	r3, #15
 8010846:	d9da      	bls.n	80107fe <PayloadEncrypt+0xfe>
        }
        size -= 16;
 8010848:	220a      	movs	r2, #10
 801084a:	18bb      	adds	r3, r7, r2
 801084c:	18ba      	adds	r2, r7, r2
 801084e:	8812      	ldrh	r2, [r2, #0]
 8010850:	3a10      	subs	r2, #16
 8010852:	801a      	strh	r2, [r3, #0]
        bufferIndex += 16;
 8010854:	2237      	movs	r2, #55	; 0x37
 8010856:	18bb      	adds	r3, r7, r2
 8010858:	18ba      	adds	r2, r7, r2
 801085a:	7812      	ldrb	r2, [r2, #0]
 801085c:	3210      	adds	r2, #16
 801085e:	701a      	strb	r2, [r3, #0]
    while( size >= 16 )
 8010860:	230a      	movs	r3, #10
 8010862:	18fb      	adds	r3, r7, r3
 8010864:	881b      	ldrh	r3, [r3, #0]
 8010866:	2b0f      	cmp	r3, #15
 8010868:	d8aa      	bhi.n	80107c0 <PayloadEncrypt+0xc0>
    }

    if( size > 0 )
 801086a:	230a      	movs	r3, #10
 801086c:	18fb      	adds	r3, r7, r3
 801086e:	881b      	ldrh	r3, [r3, #0]
 8010870:	2b00      	cmp	r3, #0
 8010872:	d042      	beq.n	80108fa <PayloadEncrypt+0x1fa>
    {
        aBlock[15] = ctr & 0xFF;
 8010874:	2334      	movs	r3, #52	; 0x34
 8010876:	18fb      	adds	r3, r7, r3
 8010878:	881b      	ldrh	r3, [r3, #0]
 801087a:	b2da      	uxtb	r2, r3
 801087c:	2010      	movs	r0, #16
 801087e:	183b      	adds	r3, r7, r0
 8010880:	73da      	strb	r2, [r3, #15]
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 8010882:	2320      	movs	r3, #32
 8010884:	18f9      	adds	r1, r7, r3
 8010886:	2309      	movs	r3, #9
 8010888:	18fb      	adds	r3, r7, r3
 801088a:	781a      	ldrb	r2, [r3, #0]
 801088c:	1838      	adds	r0, r7, r0
 801088e:	000b      	movs	r3, r1
 8010890:	2110      	movs	r1, #16
 8010892:	f7f9 fbad 	bl	8009ff0 <SecureElementAesEncrypt>
 8010896:	1e03      	subs	r3, r0, #0
 8010898:	d001      	beq.n	801089e <PayloadEncrypt+0x19e>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801089a:	230c      	movs	r3, #12
 801089c:	e02e      	b.n	80108fc <PayloadEncrypt+0x1fc>
        }
        for( uint8_t i = 0; i < size; i++ )
 801089e:	2332      	movs	r3, #50	; 0x32
 80108a0:	18fb      	adds	r3, r7, r3
 80108a2:	2200      	movs	r2, #0
 80108a4:	701a      	strb	r2, [r3, #0]
 80108a6:	e01f      	b.n	80108e8 <PayloadEncrypt+0x1e8>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 80108a8:	2037      	movs	r0, #55	; 0x37
 80108aa:	183b      	adds	r3, r7, r0
 80108ac:	781a      	ldrb	r2, [r3, #0]
 80108ae:	2432      	movs	r4, #50	; 0x32
 80108b0:	193b      	adds	r3, r7, r4
 80108b2:	781b      	ldrb	r3, [r3, #0]
 80108b4:	18d3      	adds	r3, r2, r3
 80108b6:	001a      	movs	r2, r3
 80108b8:	68fb      	ldr	r3, [r7, #12]
 80108ba:	189b      	adds	r3, r3, r2
 80108bc:	7819      	ldrb	r1, [r3, #0]
 80108be:	193b      	adds	r3, r7, r4
 80108c0:	781b      	ldrb	r3, [r3, #0]
 80108c2:	2220      	movs	r2, #32
 80108c4:	18ba      	adds	r2, r7, r2
 80108c6:	5cd2      	ldrb	r2, [r2, r3]
 80108c8:	183b      	adds	r3, r7, r0
 80108ca:	7818      	ldrb	r0, [r3, #0]
 80108cc:	193b      	adds	r3, r7, r4
 80108ce:	781b      	ldrb	r3, [r3, #0]
 80108d0:	18c3      	adds	r3, r0, r3
 80108d2:	0018      	movs	r0, r3
 80108d4:	68fb      	ldr	r3, [r7, #12]
 80108d6:	181b      	adds	r3, r3, r0
 80108d8:	404a      	eors	r2, r1
 80108da:	b2d2      	uxtb	r2, r2
 80108dc:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < size; i++ )
 80108de:	193b      	adds	r3, r7, r4
 80108e0:	781a      	ldrb	r2, [r3, #0]
 80108e2:	193b      	adds	r3, r7, r4
 80108e4:	3201      	adds	r2, #1
 80108e6:	701a      	strb	r2, [r3, #0]
 80108e8:	2332      	movs	r3, #50	; 0x32
 80108ea:	18fb      	adds	r3, r7, r3
 80108ec:	781b      	ldrb	r3, [r3, #0]
 80108ee:	b29b      	uxth	r3, r3
 80108f0:	220a      	movs	r2, #10
 80108f2:	18ba      	adds	r2, r7, r2
 80108f4:	8812      	ldrh	r2, [r2, #0]
 80108f6:	429a      	cmp	r2, r3
 80108f8:	d8d6      	bhi.n	80108a8 <PayloadEncrypt+0x1a8>
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80108fa:	2300      	movs	r3, #0
}
 80108fc:	0018      	movs	r0, r3
 80108fe:	46bd      	mov	sp, r7
 8010900:	b00f      	add	sp, #60	; 0x3c
 8010902:	bd90      	pop	{r4, r7, pc}

08010904 <FOptsEncrypt>:
 * \param[IN]  size             - Size of data
 * \param[IN/OUT]  buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t FOptsEncrypt( uint16_t size, uint32_t address, uint8_t dir, FCntIdentifier_t fCntID, uint32_t frameCounter, uint8_t* buffer )
{
 8010904:	b590      	push	{r4, r7, lr}
 8010906:	b08d      	sub	sp, #52	; 0x34
 8010908:	af00      	add	r7, sp, #0
 801090a:	0004      	movs	r4, r0
 801090c:	6039      	str	r1, [r7, #0]
 801090e:	0010      	movs	r0, r2
 8010910:	0019      	movs	r1, r3
 8010912:	1dbb      	adds	r3, r7, #6
 8010914:	1c22      	adds	r2, r4, #0
 8010916:	801a      	strh	r2, [r3, #0]
 8010918:	1d7b      	adds	r3, r7, #5
 801091a:	1c02      	adds	r2, r0, #0
 801091c:	701a      	strb	r2, [r3, #0]
 801091e:	1d3b      	adds	r3, r7, #4
 8010920:	1c0a      	adds	r2, r1, #0
 8010922:	701a      	strb	r2, [r3, #0]
    if( buffer == 0 )
 8010924:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010926:	2b00      	cmp	r3, #0
 8010928:	d101      	bne.n	801092e <FOptsEncrypt+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801092a:	2307      	movs	r3, #7
 801092c:	e09b      	b.n	8010a66 <FOptsEncrypt+0x162>
    }

    uint8_t bufferIndex = 0;
 801092e:	232e      	movs	r3, #46	; 0x2e
 8010930:	18fb      	adds	r3, r7, r3
 8010932:	2200      	movs	r2, #0
 8010934:	701a      	strb	r2, [r3, #0]
    uint8_t sBlock[16] = { 0 };
 8010936:	231c      	movs	r3, #28
 8010938:	18fb      	adds	r3, r7, r3
 801093a:	0018      	movs	r0, r3
 801093c:	2310      	movs	r3, #16
 801093e:	001a      	movs	r2, r3
 8010940:	2100      	movs	r1, #0
 8010942:	f00d fc6b 	bl	801e21c <memset>
    uint8_t aBlock[16] = { 0 };
 8010946:	240c      	movs	r4, #12
 8010948:	193b      	adds	r3, r7, r4
 801094a:	0018      	movs	r0, r3
 801094c:	2310      	movs	r3, #16
 801094e:	001a      	movs	r2, r3
 8010950:	2100      	movs	r1, #0
 8010952:	f00d fc63 	bl	801e21c <memset>

    aBlock[0] = 0x01;
 8010956:	193b      	adds	r3, r7, r4
 8010958:	2201      	movs	r2, #1
 801095a:	701a      	strb	r2, [r3, #0]

    switch( fCntID )
 801095c:	1d3b      	adds	r3, r7, #4
 801095e:	781b      	ldrb	r3, [r3, #0]
 8010960:	2b01      	cmp	r3, #1
 8010962:	d008      	beq.n	8010976 <FOptsEncrypt+0x72>
 8010964:	2b02      	cmp	r3, #2
 8010966:	d00b      	beq.n	8010980 <FOptsEncrypt+0x7c>
 8010968:	2b00      	cmp	r3, #0
 801096a:	d10e      	bne.n	801098a <FOptsEncrypt+0x86>
    {
        case FCNT_UP:
        {
            aBlock[4] = 0x01;
 801096c:	230c      	movs	r3, #12
 801096e:	18fb      	adds	r3, r7, r3
 8010970:	2201      	movs	r2, #1
 8010972:	711a      	strb	r2, [r3, #4]
            break;
 8010974:	e00b      	b.n	801098e <FOptsEncrypt+0x8a>
        }
        case N_FCNT_DOWN:
        {
            aBlock[4] = 0x01;
 8010976:	230c      	movs	r3, #12
 8010978:	18fb      	adds	r3, r7, r3
 801097a:	2201      	movs	r2, #1
 801097c:	711a      	strb	r2, [r3, #4]
            break;
 801097e:	e006      	b.n	801098e <FOptsEncrypt+0x8a>
        }
        case A_FCNT_DOWN:
        {
            aBlock[4] = 0x02;
 8010980:	230c      	movs	r3, #12
 8010982:	18fb      	adds	r3, r7, r3
 8010984:	2202      	movs	r2, #2
 8010986:	711a      	strb	r2, [r3, #4]
            break;
 8010988:	e001      	b.n	801098e <FOptsEncrypt+0x8a>
        }
        default:
            return LORAMAC_CRYPTO_FAIL_PARAM;
 801098a:	2306      	movs	r3, #6
 801098c:	e06b      	b.n	8010a66 <FOptsEncrypt+0x162>
    }

    aBlock[5] = dir;
 801098e:	210c      	movs	r1, #12
 8010990:	187b      	adds	r3, r7, r1
 8010992:	1d7a      	adds	r2, r7, #5
 8010994:	7812      	ldrb	r2, [r2, #0]
 8010996:	715a      	strb	r2, [r3, #5]

    aBlock[6] = address & 0xFF;
 8010998:	683b      	ldr	r3, [r7, #0]
 801099a:	b2da      	uxtb	r2, r3
 801099c:	187b      	adds	r3, r7, r1
 801099e:	719a      	strb	r2, [r3, #6]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 80109a0:	683b      	ldr	r3, [r7, #0]
 80109a2:	0a1b      	lsrs	r3, r3, #8
 80109a4:	b2da      	uxtb	r2, r3
 80109a6:	187b      	adds	r3, r7, r1
 80109a8:	71da      	strb	r2, [r3, #7]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 80109aa:	683b      	ldr	r3, [r7, #0]
 80109ac:	0c1b      	lsrs	r3, r3, #16
 80109ae:	b2da      	uxtb	r2, r3
 80109b0:	187b      	adds	r3, r7, r1
 80109b2:	721a      	strb	r2, [r3, #8]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 80109b4:	683b      	ldr	r3, [r7, #0]
 80109b6:	0e1b      	lsrs	r3, r3, #24
 80109b8:	b2da      	uxtb	r2, r3
 80109ba:	187b      	adds	r3, r7, r1
 80109bc:	725a      	strb	r2, [r3, #9]

    aBlock[10] = frameCounter & 0xFF;
 80109be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80109c0:	b2da      	uxtb	r2, r3
 80109c2:	187b      	adds	r3, r7, r1
 80109c4:	729a      	strb	r2, [r3, #10]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 80109c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80109c8:	0a1b      	lsrs	r3, r3, #8
 80109ca:	b2da      	uxtb	r2, r3
 80109cc:	187b      	adds	r3, r7, r1
 80109ce:	72da      	strb	r2, [r3, #11]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 80109d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80109d2:	0c1b      	lsrs	r3, r3, #16
 80109d4:	b2da      	uxtb	r2, r3
 80109d6:	187b      	adds	r3, r7, r1
 80109d8:	731a      	strb	r2, [r3, #12]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 80109da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80109dc:	0e1b      	lsrs	r3, r3, #24
 80109de:	b2da      	uxtb	r2, r3
 80109e0:	187b      	adds	r3, r7, r1
 80109e2:	735a      	strb	r2, [r3, #13]

    aBlock[15] = 0x01;
 80109e4:	187b      	adds	r3, r7, r1
 80109e6:	2201      	movs	r2, #1
 80109e8:	73da      	strb	r2, [r3, #15]

    if( size > 0 )
 80109ea:	1dbb      	adds	r3, r7, #6
 80109ec:	881b      	ldrh	r3, [r3, #0]
 80109ee:	2b00      	cmp	r3, #0
 80109f0:	d038      	beq.n	8010a64 <FOptsEncrypt+0x160>
    {
        if( SecureElementAesEncrypt( aBlock, 16, NWK_S_ENC_KEY, sBlock ) != SECURE_ELEMENT_SUCCESS )
 80109f2:	231c      	movs	r3, #28
 80109f4:	18fb      	adds	r3, r7, r3
 80109f6:	220c      	movs	r2, #12
 80109f8:	18b8      	adds	r0, r7, r2
 80109fa:	2206      	movs	r2, #6
 80109fc:	2110      	movs	r1, #16
 80109fe:	f7f9 faf7 	bl	8009ff0 <SecureElementAesEncrypt>
 8010a02:	1e03      	subs	r3, r0, #0
 8010a04:	d001      	beq.n	8010a0a <FOptsEncrypt+0x106>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8010a06:	230c      	movs	r3, #12
 8010a08:	e02d      	b.n	8010a66 <FOptsEncrypt+0x162>
        }
        for( uint8_t i = 0; i < size; i++ )
 8010a0a:	232f      	movs	r3, #47	; 0x2f
 8010a0c:	18fb      	adds	r3, r7, r3
 8010a0e:	2200      	movs	r2, #0
 8010a10:	701a      	strb	r2, [r3, #0]
 8010a12:	e01f      	b.n	8010a54 <FOptsEncrypt+0x150>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 8010a14:	202e      	movs	r0, #46	; 0x2e
 8010a16:	183b      	adds	r3, r7, r0
 8010a18:	781a      	ldrb	r2, [r3, #0]
 8010a1a:	242f      	movs	r4, #47	; 0x2f
 8010a1c:	193b      	adds	r3, r7, r4
 8010a1e:	781b      	ldrb	r3, [r3, #0]
 8010a20:	18d3      	adds	r3, r2, r3
 8010a22:	001a      	movs	r2, r3
 8010a24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010a26:	189b      	adds	r3, r3, r2
 8010a28:	7819      	ldrb	r1, [r3, #0]
 8010a2a:	193b      	adds	r3, r7, r4
 8010a2c:	781b      	ldrb	r3, [r3, #0]
 8010a2e:	221c      	movs	r2, #28
 8010a30:	18ba      	adds	r2, r7, r2
 8010a32:	5cd2      	ldrb	r2, [r2, r3]
 8010a34:	183b      	adds	r3, r7, r0
 8010a36:	7818      	ldrb	r0, [r3, #0]
 8010a38:	193b      	adds	r3, r7, r4
 8010a3a:	781b      	ldrb	r3, [r3, #0]
 8010a3c:	18c3      	adds	r3, r0, r3
 8010a3e:	0018      	movs	r0, r3
 8010a40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010a42:	181b      	adds	r3, r3, r0
 8010a44:	404a      	eors	r2, r1
 8010a46:	b2d2      	uxtb	r2, r2
 8010a48:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < size; i++ )
 8010a4a:	193b      	adds	r3, r7, r4
 8010a4c:	781a      	ldrb	r2, [r3, #0]
 8010a4e:	193b      	adds	r3, r7, r4
 8010a50:	3201      	adds	r2, #1
 8010a52:	701a      	strb	r2, [r3, #0]
 8010a54:	232f      	movs	r3, #47	; 0x2f
 8010a56:	18fb      	adds	r3, r7, r3
 8010a58:	781b      	ldrb	r3, [r3, #0]
 8010a5a:	b29b      	uxth	r3, r3
 8010a5c:	1dba      	adds	r2, r7, #6
 8010a5e:	8812      	ldrh	r2, [r2, #0]
 8010a60:	429a      	cmp	r2, r3
 8010a62:	d8d7      	bhi.n	8010a14 <FOptsEncrypt+0x110>
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8010a64:	2300      	movs	r3, #0
}
 8010a66:	0018      	movs	r0, r3
 8010a68:	46bd      	mov	sp, r7
 8010a6a:	b00d      	add	sp, #52	; 0x34
 8010a6c:	bd90      	pop	{r4, r7, pc}

08010a6e <LoraMacCryptoComputeCmac>:
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t LoraMacCryptoComputeCmac( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, uint32_t* cmac );

static LoRaMacCryptoStatus_t LoraMacCryptoComputeCmac( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, uint32_t* cmac )
{
 8010a6e:	b5b0      	push	{r4, r5, r7, lr}
 8010a70:	b084      	sub	sp, #16
 8010a72:	af00      	add	r7, sp, #0
 8010a74:	60f8      	str	r0, [r7, #12]
 8010a76:	0008      	movs	r0, r1
 8010a78:	0011      	movs	r1, r2
 8010a7a:	607b      	str	r3, [r7, #4]
 8010a7c:	250a      	movs	r5, #10
 8010a7e:	197b      	adds	r3, r7, r5
 8010a80:	1c02      	adds	r2, r0, #0
 8010a82:	801a      	strh	r2, [r3, #0]
 8010a84:	2009      	movs	r0, #9
 8010a86:	183b      	adds	r3, r7, r0
 8010a88:	1c0a      	adds	r2, r1, #0
 8010a8a:	701a      	strb	r2, [r3, #0]
    if( SecureElementComputeAesCmac( msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 8010a8c:	687c      	ldr	r4, [r7, #4]
 8010a8e:	183b      	adds	r3, r7, r0
 8010a90:	781a      	ldrb	r2, [r3, #0]
 8010a92:	197b      	adds	r3, r7, r5
 8010a94:	8819      	ldrh	r1, [r3, #0]
 8010a96:	68f8      	ldr	r0, [r7, #12]
 8010a98:	0023      	movs	r3, r4
 8010a9a:	f7f9 fa43 	bl	8009f24 <SecureElementComputeAesCmac>
 8010a9e:	1e03      	subs	r3, r0, #0
 8010aa0:	d001      	beq.n	8010aa6 <LoraMacCryptoComputeCmac+0x38>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8010aa2:	230c      	movs	r3, #12
 8010aa4:	e000      	b.n	8010aa8 <LoraMacCryptoComputeCmac+0x3a>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8010aa6:	2300      	movs	r3, #0
}
 8010aa8:	0018      	movs	r0, r3
 8010aaa:	46bd      	mov	sp, r7
 8010aac:	b004      	add	sp, #16
 8010aae:	bdb0      	pop	{r4, r5, r7, pc}

08010ab0 <VerifyCmac>:
 * \param[in]  expectedCmac   - Expected cmac
 * \param[IN]  keyID          - Key identifier to determine the AES key to be used
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmac( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, uint32_t expectedcmac )
{
 8010ab0:	b5b0      	push	{r4, r5, r7, lr}
 8010ab2:	b084      	sub	sp, #16
 8010ab4:	af00      	add	r7, sp, #0
 8010ab6:	60f8      	str	r0, [r7, #12]
 8010ab8:	0008      	movs	r0, r1
 8010aba:	0011      	movs	r1, r2
 8010abc:	607b      	str	r3, [r7, #4]
 8010abe:	250a      	movs	r5, #10
 8010ac0:	197b      	adds	r3, r7, r5
 8010ac2:	1c02      	adds	r2, r0, #0
 8010ac4:	801a      	strh	r2, [r3, #0]
 8010ac6:	2009      	movs	r0, #9
 8010ac8:	183b      	adds	r3, r7, r0
 8010aca:	1c0a      	adds	r2, r1, #0
 8010acc:	701a      	strb	r2, [r3, #0]
    if( SecureElementVerifyAesCmac( msg, len, expectedcmac, keyID ) != SECURE_ELEMENT_SUCCESS )
 8010ace:	183b      	adds	r3, r7, r0
 8010ad0:	781c      	ldrb	r4, [r3, #0]
 8010ad2:	687a      	ldr	r2, [r7, #4]
 8010ad4:	197b      	adds	r3, r7, r5
 8010ad6:	8819      	ldrh	r1, [r3, #0]
 8010ad8:	68f8      	ldr	r0, [r7, #12]
 8010ada:	0023      	movs	r3, r4
 8010adc:	f7f9 fa47 	bl	8009f6e <SecureElementVerifyAesCmac>
 8010ae0:	1e03      	subs	r3, r0, #0
 8010ae2:	d001      	beq.n	8010ae8 <VerifyCmac+0x38>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8010ae4:	230c      	movs	r3, #12
 8010ae6:	e000      	b.n	8010aea <VerifyCmac+0x3a>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8010ae8:	2300      	movs	r3, #0
}
 8010aea:	0018      	movs	r0, r3
 8010aec:	46bd      	mov	sp, r7
 8010aee:	b004      	add	sp, #16
 8010af0:	bdb0      	pop	{r4, r5, r7, pc}
	...

08010af4 <PrepareB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[IN/OUT]  b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 8010af4:	b5b0      	push	{r4, r5, r7, lr}
 8010af6:	b084      	sub	sp, #16
 8010af8:	af00      	add	r7, sp, #0
 8010afa:	0005      	movs	r5, r0
 8010afc:	000c      	movs	r4, r1
 8010afe:	0010      	movs	r0, r2
 8010b00:	0019      	movs	r1, r3
 8010b02:	1dbb      	adds	r3, r7, #6
 8010b04:	1c2a      	adds	r2, r5, #0
 8010b06:	801a      	strh	r2, [r3, #0]
 8010b08:	1d7b      	adds	r3, r7, #5
 8010b0a:	1c22      	adds	r2, r4, #0
 8010b0c:	701a      	strb	r2, [r3, #0]
 8010b0e:	1d3b      	adds	r3, r7, #4
 8010b10:	1c02      	adds	r2, r0, #0
 8010b12:	701a      	strb	r2, [r3, #0]
 8010b14:	1cfb      	adds	r3, r7, #3
 8010b16:	1c0a      	adds	r2, r1, #0
 8010b18:	701a      	strb	r2, [r3, #0]
    if( b0 == 0 )
 8010b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b1c:	2b00      	cmp	r3, #0
 8010b1e:	d101      	bne.n	8010b24 <PrepareB0+0x30>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8010b20:	2307      	movs	r3, #7
 8010b22:	e079      	b.n	8010c18 <PrepareB0+0x124>
    }

    b0[0] = 0x49;
 8010b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b26:	2249      	movs	r2, #73	; 0x49
 8010b28:	701a      	strb	r2, [r3, #0]

    if( isAck == true )
 8010b2a:	1d3b      	adds	r3, r7, #4
 8010b2c:	781b      	ldrb	r3, [r3, #0]
 8010b2e:	2b00      	cmp	r3, #0
 8010b30:	d024      	beq.n	8010b7c <PrepareB0+0x88>
    {
        // confFCnt contains the frame counter value modulo 2^16 of the "confirmed" uplink or downlink frame that is being acknowledged
        uint16_t confFCnt = 0;
 8010b32:	230e      	movs	r3, #14
 8010b34:	18fb      	adds	r3, r7, r3
 8010b36:	2200      	movs	r2, #0
 8010b38:	801a      	strh	r2, [r3, #0]
        if( dir == UPLINK )
 8010b3a:	1cfb      	adds	r3, r7, #3
 8010b3c:	781b      	ldrb	r3, [r3, #0]
 8010b3e:	2b00      	cmp	r3, #0
 8010b40:	d106      	bne.n	8010b50 <PrepareB0+0x5c>
        {
            confFCnt = ( uint16_t )( CryptoCtx.NvmCtx->FCntDown % 65536 );
 8010b42:	4b37      	ldr	r3, [pc, #220]	; (8010c20 <PrepareB0+0x12c>)
 8010b44:	689b      	ldr	r3, [r3, #8]
 8010b46:	695a      	ldr	r2, [r3, #20]
 8010b48:	230e      	movs	r3, #14
 8010b4a:	18fb      	adds	r3, r7, r3
 8010b4c:	801a      	strh	r2, [r3, #0]
 8010b4e:	e005      	b.n	8010b5c <PrepareB0+0x68>
        }
        else
        {
            confFCnt = ( uint16_t )( CryptoCtx.NvmCtx->FCntUp % 65536 );
 8010b50:	4b33      	ldr	r3, [pc, #204]	; (8010c20 <PrepareB0+0x12c>)
 8010b52:	689b      	ldr	r3, [r3, #8]
 8010b54:	689a      	ldr	r2, [r3, #8]
 8010b56:	230e      	movs	r3, #14
 8010b58:	18fb      	adds	r3, r7, r3
 8010b5a:	801a      	strh	r2, [r3, #0]
        }

        b0[1] = confFCnt & 0xFF;
 8010b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b5e:	3301      	adds	r3, #1
 8010b60:	210e      	movs	r1, #14
 8010b62:	187a      	adds	r2, r7, r1
 8010b64:	8812      	ldrh	r2, [r2, #0]
 8010b66:	b2d2      	uxtb	r2, r2
 8010b68:	701a      	strb	r2, [r3, #0]
        b0[2] = ( confFCnt >> 8 ) & 0xFF;
 8010b6a:	187b      	adds	r3, r7, r1
 8010b6c:	881b      	ldrh	r3, [r3, #0]
 8010b6e:	0a1b      	lsrs	r3, r3, #8
 8010b70:	b29a      	uxth	r2, r3
 8010b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b74:	3302      	adds	r3, #2
 8010b76:	b2d2      	uxtb	r2, r2
 8010b78:	701a      	strb	r2, [r3, #0]
 8010b7a:	e007      	b.n	8010b8c <PrepareB0+0x98>
    }
    else
    {
        b0[1] = 0x00;
 8010b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b7e:	3301      	adds	r3, #1
 8010b80:	2200      	movs	r2, #0
 8010b82:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
 8010b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b86:	3302      	adds	r3, #2
 8010b88:	2200      	movs	r2, #0
 8010b8a:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
 8010b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b8e:	3303      	adds	r3, #3
 8010b90:	2200      	movs	r2, #0
 8010b92:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
 8010b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b96:	3304      	adds	r3, #4
 8010b98:	2200      	movs	r2, #0
 8010b9a:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
 8010b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b9e:	3305      	adds	r3, #5
 8010ba0:	1cfa      	adds	r2, r7, #3
 8010ba2:	7812      	ldrb	r2, [r2, #0]
 8010ba4:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
 8010ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ba8:	3306      	adds	r3, #6
 8010baa:	6a3a      	ldr	r2, [r7, #32]
 8010bac:	b2d2      	uxtb	r2, r2
 8010bae:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 8010bb0:	6a3b      	ldr	r3, [r7, #32]
 8010bb2:	0a1a      	lsrs	r2, r3, #8
 8010bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bb6:	3307      	adds	r3, #7
 8010bb8:	b2d2      	uxtb	r2, r2
 8010bba:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 8010bbc:	6a3b      	ldr	r3, [r7, #32]
 8010bbe:	0c1a      	lsrs	r2, r3, #16
 8010bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bc2:	3308      	adds	r3, #8
 8010bc4:	b2d2      	uxtb	r2, r2
 8010bc6:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 8010bc8:	6a3b      	ldr	r3, [r7, #32]
 8010bca:	0e1a      	lsrs	r2, r3, #24
 8010bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bce:	3309      	adds	r3, #9
 8010bd0:	b2d2      	uxtb	r2, r2
 8010bd2:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
 8010bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bd6:	330a      	adds	r3, #10
 8010bd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010bda:	b2d2      	uxtb	r2, r2
 8010bdc:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 8010bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010be0:	0a1a      	lsrs	r2, r3, #8
 8010be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010be4:	330b      	adds	r3, #11
 8010be6:	b2d2      	uxtb	r2, r2
 8010be8:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 8010bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bec:	0c1a      	lsrs	r2, r3, #16
 8010bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bf0:	330c      	adds	r3, #12
 8010bf2:	b2d2      	uxtb	r2, r2
 8010bf4:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 8010bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bf8:	0e1a      	lsrs	r2, r3, #24
 8010bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bfc:	330d      	adds	r3, #13
 8010bfe:	b2d2      	uxtb	r2, r2
 8010c00:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
 8010c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c04:	330e      	adds	r3, #14
 8010c06:	2200      	movs	r2, #0
 8010c08:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
 8010c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c0c:	330f      	adds	r3, #15
 8010c0e:	1dba      	adds	r2, r7, #6
 8010c10:	8812      	ldrh	r2, [r2, #0]
 8010c12:	b2d2      	uxtb	r2, r2
 8010c14:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8010c16:	2300      	movs	r3, #0
}
 8010c18:	0018      	movs	r0, r3
 8010c1a:	46bd      	mov	sp, r7
 8010c1c:	b004      	add	sp, #16
 8010c1e:	bdb0      	pop	{r4, r5, r7, pc}
 8010c20:	20000edc 	.word	0x20000edc

08010c24 <ComputeCmacB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
 8010c24:	b5b0      	push	{r4, r5, r7, lr}
 8010c26:	b0ca      	sub	sp, #296	; 0x128
 8010c28:	af04      	add	r7, sp, #16
 8010c2a:	6078      	str	r0, [r7, #4]
 8010c2c:	000c      	movs	r4, r1
 8010c2e:	0010      	movs	r0, r2
 8010c30:	0019      	movs	r1, r3
 8010c32:	4b47      	ldr	r3, [pc, #284]	; (8010d50 <ComputeCmacB0+0x12c>)
 8010c34:	228c      	movs	r2, #140	; 0x8c
 8010c36:	0052      	lsls	r2, r2, #1
 8010c38:	4694      	mov	ip, r2
 8010c3a:	44bc      	add	ip, r7
 8010c3c:	4463      	add	r3, ip
 8010c3e:	1c22      	adds	r2, r4, #0
 8010c40:	801a      	strh	r2, [r3, #0]
 8010c42:	4b44      	ldr	r3, [pc, #272]	; (8010d54 <ComputeCmacB0+0x130>)
 8010c44:	228c      	movs	r2, #140	; 0x8c
 8010c46:	0052      	lsls	r2, r2, #1
 8010c48:	4694      	mov	ip, r2
 8010c4a:	44bc      	add	ip, r7
 8010c4c:	4463      	add	r3, ip
 8010c4e:	1c02      	adds	r2, r0, #0
 8010c50:	701a      	strb	r2, [r3, #0]
 8010c52:	4b41      	ldr	r3, [pc, #260]	; (8010d58 <ComputeCmacB0+0x134>)
 8010c54:	228c      	movs	r2, #140	; 0x8c
 8010c56:	0052      	lsls	r2, r2, #1
 8010c58:	4694      	mov	ip, r2
 8010c5a:	44bc      	add	ip, r7
 8010c5c:	4463      	add	r3, ip
 8010c5e:	1c0a      	adds	r2, r1, #0
 8010c60:	701a      	strb	r2, [r3, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	2b00      	cmp	r3, #0
 8010c66:	d005      	beq.n	8010c74 <ComputeCmacB0+0x50>
 8010c68:	239a      	movs	r3, #154	; 0x9a
 8010c6a:	005b      	lsls	r3, r3, #1
 8010c6c:	18fb      	adds	r3, r7, r3
 8010c6e:	681b      	ldr	r3, [r3, #0]
 8010c70:	2b00      	cmp	r3, #0
 8010c72:	d101      	bne.n	8010c78 <ComputeCmacB0+0x54>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8010c74:	2307      	movs	r3, #7
 8010c76:	e066      	b.n	8010d46 <ComputeCmacB0+0x122>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8010c78:	4b35      	ldr	r3, [pc, #212]	; (8010d50 <ComputeCmacB0+0x12c>)
 8010c7a:	228c      	movs	r2, #140	; 0x8c
 8010c7c:	0052      	lsls	r2, r2, #1
 8010c7e:	4694      	mov	ip, r2
 8010c80:	44bc      	add	ip, r7
 8010c82:	4463      	add	r3, ip
 8010c84:	881a      	ldrh	r2, [r3, #0]
 8010c86:	2380      	movs	r3, #128	; 0x80
 8010c88:	005b      	lsls	r3, r3, #1
 8010c8a:	429a      	cmp	r2, r3
 8010c8c:	d901      	bls.n	8010c92 <ComputeCmacB0+0x6e>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8010c8e:	230b      	movs	r3, #11
 8010c90:	e059      	b.n	8010d46 <ComputeCmacB0+0x122>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 8010c92:	2388      	movs	r3, #136	; 0x88
 8010c94:	005a      	lsls	r2, r3, #1
 8010c96:	2508      	movs	r5, #8
 8010c98:	197b      	adds	r3, r7, r5
 8010c9a:	2100      	movs	r1, #0
 8010c9c:	0018      	movs	r0, r3
 8010c9e:	f004 fd5b 	bl	8015758 <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8010ca2:	2394      	movs	r3, #148	; 0x94
 8010ca4:	005b      	lsls	r3, r3, #1
 8010ca6:	18fb      	adds	r3, r7, r3
 8010ca8:	781c      	ldrb	r4, [r3, #0]
 8010caa:	4b2b      	ldr	r3, [pc, #172]	; (8010d58 <ComputeCmacB0+0x134>)
 8010cac:	228c      	movs	r2, #140	; 0x8c
 8010cae:	0052      	lsls	r2, r2, #1
 8010cb0:	4694      	mov	ip, r2
 8010cb2:	44bc      	add	ip, r7
 8010cb4:	4463      	add	r3, ip
 8010cb6:	781a      	ldrb	r2, [r3, #0]
 8010cb8:	4b26      	ldr	r3, [pc, #152]	; (8010d54 <ComputeCmacB0+0x130>)
 8010cba:	218c      	movs	r1, #140	; 0x8c
 8010cbc:	0049      	lsls	r1, r1, #1
 8010cbe:	468c      	mov	ip, r1
 8010cc0:	44bc      	add	ip, r7
 8010cc2:	4463      	add	r3, ip
 8010cc4:	7819      	ldrb	r1, [r3, #0]
 8010cc6:	4b22      	ldr	r3, [pc, #136]	; (8010d50 <ComputeCmacB0+0x12c>)
 8010cc8:	208c      	movs	r0, #140	; 0x8c
 8010cca:	0040      	lsls	r0, r0, #1
 8010ccc:	4684      	mov	ip, r0
 8010cce:	44bc      	add	ip, r7
 8010cd0:	4463      	add	r3, ip
 8010cd2:	8818      	ldrh	r0, [r3, #0]
 8010cd4:	197b      	adds	r3, r7, r5
 8010cd6:	9302      	str	r3, [sp, #8]
 8010cd8:	2398      	movs	r3, #152	; 0x98
 8010cda:	005b      	lsls	r3, r3, #1
 8010cdc:	18fb      	adds	r3, r7, r3
 8010cde:	681b      	ldr	r3, [r3, #0]
 8010ce0:	9301      	str	r3, [sp, #4]
 8010ce2:	2396      	movs	r3, #150	; 0x96
 8010ce4:	005b      	lsls	r3, r3, #1
 8010ce6:	18fb      	adds	r3, r7, r3
 8010ce8:	681b      	ldr	r3, [r3, #0]
 8010cea:	9300      	str	r3, [sp, #0]
 8010cec:	0023      	movs	r3, r4
 8010cee:	f7ff ff01 	bl	8010af4 <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 8010cf2:	197b      	adds	r3, r7, r5
 8010cf4:	3310      	adds	r3, #16
 8010cf6:	4a16      	ldr	r2, [pc, #88]	; (8010d50 <ComputeCmacB0+0x12c>)
 8010cf8:	218c      	movs	r1, #140	; 0x8c
 8010cfa:	0049      	lsls	r1, r1, #1
 8010cfc:	468c      	mov	ip, r1
 8010cfe:	44bc      	add	ip, r7
 8010d00:	4462      	add	r2, ip
 8010d02:	8812      	ldrh	r2, [r2, #0]
 8010d04:	6879      	ldr	r1, [r7, #4]
 8010d06:	0018      	movs	r0, r3
 8010d08:	f004 fcea 	bl	80156e0 <memcpy1>

    if( SecureElementComputeAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 8010d0c:	4b10      	ldr	r3, [pc, #64]	; (8010d50 <ComputeCmacB0+0x12c>)
 8010d0e:	228c      	movs	r2, #140	; 0x8c
 8010d10:	0052      	lsls	r2, r2, #1
 8010d12:	4694      	mov	ip, r2
 8010d14:	44bc      	add	ip, r7
 8010d16:	4463      	add	r3, ip
 8010d18:	881b      	ldrh	r3, [r3, #0]
 8010d1a:	3310      	adds	r3, #16
 8010d1c:	b299      	uxth	r1, r3
 8010d1e:	239a      	movs	r3, #154	; 0x9a
 8010d20:	005b      	lsls	r3, r3, #1
 8010d22:	18fb      	adds	r3, r7, r3
 8010d24:	681c      	ldr	r4, [r3, #0]
 8010d26:	4b0b      	ldr	r3, [pc, #44]	; (8010d54 <ComputeCmacB0+0x130>)
 8010d28:	228c      	movs	r2, #140	; 0x8c
 8010d2a:	0052      	lsls	r2, r2, #1
 8010d2c:	4694      	mov	ip, r2
 8010d2e:	44bc      	add	ip, r7
 8010d30:	4463      	add	r3, ip
 8010d32:	781a      	ldrb	r2, [r3, #0]
 8010d34:	1978      	adds	r0, r7, r5
 8010d36:	0023      	movs	r3, r4
 8010d38:	f7f9 f8f4 	bl	8009f24 <SecureElementComputeAesCmac>
 8010d3c:	1e03      	subs	r3, r0, #0
 8010d3e:	d001      	beq.n	8010d44 <ComputeCmacB0+0x120>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8010d40:	230c      	movs	r3, #12
 8010d42:	e000      	b.n	8010d46 <ComputeCmacB0+0x122>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8010d44:	2300      	movs	r3, #0
}
 8010d46:	0018      	movs	r0, r3
 8010d48:	46bd      	mov	sp, r7
 8010d4a:	b046      	add	sp, #280	; 0x118
 8010d4c:	bdb0      	pop	{r4, r5, r7, pc}
 8010d4e:	46c0      	nop			; (mov r8, r8)
 8010d50:	fffffeea 	.word	0xfffffeea
 8010d54:	fffffee9 	.word	0xfffffee9
 8010d58:	fffffee8 	.word	0xfffffee8

08010d5c <VerifyCmacB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[in]  expectedCmac   - Expected cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
{
 8010d5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010d5e:	b0cd      	sub	sp, #308	; 0x134
 8010d60:	af04      	add	r7, sp, #16
 8010d62:	6078      	str	r0, [r7, #4]
 8010d64:	000c      	movs	r4, r1
 8010d66:	0010      	movs	r0, r2
 8010d68:	0019      	movs	r1, r3
 8010d6a:	4b52      	ldr	r3, [pc, #328]	; (8010eb4 <VerifyCmacB0+0x158>)
 8010d6c:	2290      	movs	r2, #144	; 0x90
 8010d6e:	0052      	lsls	r2, r2, #1
 8010d70:	4694      	mov	ip, r2
 8010d72:	44bc      	add	ip, r7
 8010d74:	4463      	add	r3, ip
 8010d76:	1c22      	adds	r2, r4, #0
 8010d78:	801a      	strh	r2, [r3, #0]
 8010d7a:	4b4f      	ldr	r3, [pc, #316]	; (8010eb8 <VerifyCmacB0+0x15c>)
 8010d7c:	2290      	movs	r2, #144	; 0x90
 8010d7e:	0052      	lsls	r2, r2, #1
 8010d80:	4694      	mov	ip, r2
 8010d82:	44bc      	add	ip, r7
 8010d84:	4463      	add	r3, ip
 8010d86:	1c02      	adds	r2, r0, #0
 8010d88:	701a      	strb	r2, [r3, #0]
 8010d8a:	4b4c      	ldr	r3, [pc, #304]	; (8010ebc <VerifyCmacB0+0x160>)
 8010d8c:	2290      	movs	r2, #144	; 0x90
 8010d8e:	0052      	lsls	r2, r2, #1
 8010d90:	4694      	mov	ip, r2
 8010d92:	44bc      	add	ip, r7
 8010d94:	4463      	add	r3, ip
 8010d96:	1c0a      	adds	r2, r1, #0
 8010d98:	701a      	strb	r2, [r3, #0]
    if( msg == 0 )
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	2b00      	cmp	r3, #0
 8010d9e:	d101      	bne.n	8010da4 <VerifyCmacB0+0x48>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8010da0:	2307      	movs	r3, #7
 8010da2:	e083      	b.n	8010eac <VerifyCmacB0+0x150>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8010da4:	4b43      	ldr	r3, [pc, #268]	; (8010eb4 <VerifyCmacB0+0x158>)
 8010da6:	2290      	movs	r2, #144	; 0x90
 8010da8:	0052      	lsls	r2, r2, #1
 8010daa:	4694      	mov	ip, r2
 8010dac:	44bc      	add	ip, r7
 8010dae:	4463      	add	r3, ip
 8010db0:	881a      	ldrh	r2, [r3, #0]
 8010db2:	2380      	movs	r3, #128	; 0x80
 8010db4:	005b      	lsls	r3, r3, #1
 8010db6:	429a      	cmp	r2, r3
 8010db8:	d901      	bls.n	8010dbe <VerifyCmacB0+0x62>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8010dba:	230b      	movs	r3, #11
 8010dbc:	e076      	b.n	8010eac <VerifyCmacB0+0x150>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 8010dbe:	2388      	movs	r3, #136	; 0x88
 8010dc0:	005a      	lsls	r2, r3, #1
 8010dc2:	250c      	movs	r5, #12
 8010dc4:	197b      	adds	r3, r7, r5
 8010dc6:	2100      	movs	r1, #0
 8010dc8:	0018      	movs	r0, r3
 8010dca:	f004 fcc5 	bl	8015758 <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8010dce:	2398      	movs	r3, #152	; 0x98
 8010dd0:	005b      	lsls	r3, r3, #1
 8010dd2:	2208      	movs	r2, #8
 8010dd4:	4694      	mov	ip, r2
 8010dd6:	44bc      	add	ip, r7
 8010dd8:	4463      	add	r3, ip
 8010dda:	781c      	ldrb	r4, [r3, #0]
 8010ddc:	4b37      	ldr	r3, [pc, #220]	; (8010ebc <VerifyCmacB0+0x160>)
 8010dde:	2290      	movs	r2, #144	; 0x90
 8010de0:	0052      	lsls	r2, r2, #1
 8010de2:	4694      	mov	ip, r2
 8010de4:	44bc      	add	ip, r7
 8010de6:	4463      	add	r3, ip
 8010de8:	781a      	ldrb	r2, [r3, #0]
 8010dea:	4b33      	ldr	r3, [pc, #204]	; (8010eb8 <VerifyCmacB0+0x15c>)
 8010dec:	2190      	movs	r1, #144	; 0x90
 8010dee:	0049      	lsls	r1, r1, #1
 8010df0:	468c      	mov	ip, r1
 8010df2:	44bc      	add	ip, r7
 8010df4:	4463      	add	r3, ip
 8010df6:	7819      	ldrb	r1, [r3, #0]
 8010df8:	4b2e      	ldr	r3, [pc, #184]	; (8010eb4 <VerifyCmacB0+0x158>)
 8010dfa:	2090      	movs	r0, #144	; 0x90
 8010dfc:	0040      	lsls	r0, r0, #1
 8010dfe:	4684      	mov	ip, r0
 8010e00:	44bc      	add	ip, r7
 8010e02:	4463      	add	r3, ip
 8010e04:	8818      	ldrh	r0, [r3, #0]
 8010e06:	197b      	adds	r3, r7, r5
 8010e08:	9302      	str	r3, [sp, #8]
 8010e0a:	239c      	movs	r3, #156	; 0x9c
 8010e0c:	005b      	lsls	r3, r3, #1
 8010e0e:	2608      	movs	r6, #8
 8010e10:	46b4      	mov	ip, r6
 8010e12:	44bc      	add	ip, r7
 8010e14:	4463      	add	r3, ip
 8010e16:	681b      	ldr	r3, [r3, #0]
 8010e18:	9301      	str	r3, [sp, #4]
 8010e1a:	239a      	movs	r3, #154	; 0x9a
 8010e1c:	005b      	lsls	r3, r3, #1
 8010e1e:	2608      	movs	r6, #8
 8010e20:	46b4      	mov	ip, r6
 8010e22:	44bc      	add	ip, r7
 8010e24:	4463      	add	r3, ip
 8010e26:	681b      	ldr	r3, [r3, #0]
 8010e28:	9300      	str	r3, [sp, #0]
 8010e2a:	0023      	movs	r3, r4
 8010e2c:	f7ff fe62 	bl	8010af4 <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 8010e30:	197b      	adds	r3, r7, r5
 8010e32:	3310      	adds	r3, #16
 8010e34:	4a1f      	ldr	r2, [pc, #124]	; (8010eb4 <VerifyCmacB0+0x158>)
 8010e36:	2190      	movs	r1, #144	; 0x90
 8010e38:	0049      	lsls	r1, r1, #1
 8010e3a:	468c      	mov	ip, r1
 8010e3c:	44bc      	add	ip, r7
 8010e3e:	4462      	add	r2, ip
 8010e40:	8812      	ldrh	r2, [r2, #0]
 8010e42:	6879      	ldr	r1, [r7, #4]
 8010e44:	0018      	movs	r0, r3
 8010e46:	f004 fc4b 	bl	80156e0 <memcpy1>

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 8010e4a:	2620      	movs	r6, #32
 8010e4c:	36ff      	adds	r6, #255	; 0xff
 8010e4e:	19bb      	adds	r3, r7, r6
 8010e50:	2206      	movs	r2, #6
 8010e52:	701a      	strb	r2, [r3, #0]
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 8010e54:	4b17      	ldr	r3, [pc, #92]	; (8010eb4 <VerifyCmacB0+0x158>)
 8010e56:	2290      	movs	r2, #144	; 0x90
 8010e58:	0052      	lsls	r2, r2, #1
 8010e5a:	4694      	mov	ip, r2
 8010e5c:	44bc      	add	ip, r7
 8010e5e:	4463      	add	r3, ip
 8010e60:	881b      	ldrh	r3, [r3, #0]
 8010e62:	3310      	adds	r3, #16
 8010e64:	b299      	uxth	r1, r3
 8010e66:	19bc      	adds	r4, r7, r6
 8010e68:	4b13      	ldr	r3, [pc, #76]	; (8010eb8 <VerifyCmacB0+0x15c>)
 8010e6a:	2290      	movs	r2, #144	; 0x90
 8010e6c:	0052      	lsls	r2, r2, #1
 8010e6e:	4694      	mov	ip, r2
 8010e70:	44bc      	add	ip, r7
 8010e72:	4463      	add	r3, ip
 8010e74:	781b      	ldrb	r3, [r3, #0]
 8010e76:	229e      	movs	r2, #158	; 0x9e
 8010e78:	0052      	lsls	r2, r2, #1
 8010e7a:	2008      	movs	r0, #8
 8010e7c:	4684      	mov	ip, r0
 8010e7e:	44bc      	add	ip, r7
 8010e80:	4462      	add	r2, ip
 8010e82:	6812      	ldr	r2, [r2, #0]
 8010e84:	1978      	adds	r0, r7, r5
 8010e86:	f7f9 f872 	bl	8009f6e <SecureElementVerifyAesCmac>
 8010e8a:	0003      	movs	r3, r0
 8010e8c:	7023      	strb	r3, [r4, #0]

    if( retval == SECURE_ELEMENT_SUCCESS )
 8010e8e:	19bb      	adds	r3, r7, r6
 8010e90:	781b      	ldrb	r3, [r3, #0]
 8010e92:	2b00      	cmp	r3, #0
 8010e94:	d101      	bne.n	8010e9a <VerifyCmacB0+0x13e>
    {
        return LORAMAC_CRYPTO_SUCCESS;
 8010e96:	2300      	movs	r3, #0
 8010e98:	e008      	b.n	8010eac <VerifyCmacB0+0x150>
    }
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 8010e9a:	2320      	movs	r3, #32
 8010e9c:	33ff      	adds	r3, #255	; 0xff
 8010e9e:	18fb      	adds	r3, r7, r3
 8010ea0:	781b      	ldrb	r3, [r3, #0]
 8010ea2:	2b01      	cmp	r3, #1
 8010ea4:	d101      	bne.n	8010eaa <VerifyCmacB0+0x14e>
    {
        return LORAMAC_CRYPTO_FAIL_MIC;
 8010ea6:	2301      	movs	r3, #1
 8010ea8:	e000      	b.n	8010eac <VerifyCmacB0+0x150>
    }

    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8010eaa:	230c      	movs	r3, #12
}
 8010eac:	0018      	movs	r0, r3
 8010eae:	46bd      	mov	sp, r7
 8010eb0:	b049      	add	sp, #292	; 0x124
 8010eb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010eb4:	fffffee2 	.word	0xfffffee2
 8010eb8:	fffffee1 	.word	0xfffffee1
 8010ebc:	fffffee0 	.word	0xfffffee0

08010ec0 <PrepareB1>:
 * \param[IN]  fCntUp         - Frame counter
 * \param[IN/OUT]  b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB1( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t txDr, uint8_t txCh, uint32_t devAddr, uint32_t fCntUp, uint8_t* b1 )
{
 8010ec0:	b5b0      	push	{r4, r5, r7, lr}
 8010ec2:	b084      	sub	sp, #16
 8010ec4:	af00      	add	r7, sp, #0
 8010ec6:	0005      	movs	r5, r0
 8010ec8:	000c      	movs	r4, r1
 8010eca:	0010      	movs	r0, r2
 8010ecc:	0019      	movs	r1, r3
 8010ece:	1dbb      	adds	r3, r7, #6
 8010ed0:	1c2a      	adds	r2, r5, #0
 8010ed2:	801a      	strh	r2, [r3, #0]
 8010ed4:	1d7b      	adds	r3, r7, #5
 8010ed6:	1c22      	adds	r2, r4, #0
 8010ed8:	701a      	strb	r2, [r3, #0]
 8010eda:	1d3b      	adds	r3, r7, #4
 8010edc:	1c02      	adds	r2, r0, #0
 8010ede:	701a      	strb	r2, [r3, #0]
 8010ee0:	1cfb      	adds	r3, r7, #3
 8010ee2:	1c0a      	adds	r2, r1, #0
 8010ee4:	701a      	strb	r2, [r3, #0]
    if( b1 == 0 )
 8010ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ee8:	2b00      	cmp	r3, #0
 8010eea:	d101      	bne.n	8010ef0 <PrepareB1+0x30>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8010eec:	2307      	movs	r3, #7
 8010eee:	e06c      	b.n	8010fca <PrepareB1+0x10a>
    }

    b1[0] = 0x49;
 8010ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ef2:	2249      	movs	r2, #73	; 0x49
 8010ef4:	701a      	strb	r2, [r3, #0]

    if( isAck == true )
 8010ef6:	1d3b      	adds	r3, r7, #4
 8010ef8:	781b      	ldrb	r3, [r3, #0]
 8010efa:	2b00      	cmp	r3, #0
 8010efc:	d015      	beq.n	8010f2a <PrepareB1+0x6a>
    {
        // confFCnt contains the frame counter value modulo 2^16 of the "confirmed" uplink frame that is being acknowledged
        uint16_t confFCnt = ( uint16_t )( *CryptoCtx.NvmCtx->LastDownFCnt % 65536 );
 8010efe:	4b35      	ldr	r3, [pc, #212]	; (8010fd4 <PrepareB1+0x114>)
 8010f00:	689b      	ldr	r3, [r3, #8]
 8010f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f04:	681a      	ldr	r2, [r3, #0]
 8010f06:	210e      	movs	r1, #14
 8010f08:	187b      	adds	r3, r7, r1
 8010f0a:	801a      	strh	r2, [r3, #0]
        b1[1] = confFCnt & 0xFF;
 8010f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f0e:	3301      	adds	r3, #1
 8010f10:	187a      	adds	r2, r7, r1
 8010f12:	8812      	ldrh	r2, [r2, #0]
 8010f14:	b2d2      	uxtb	r2, r2
 8010f16:	701a      	strb	r2, [r3, #0]
        b1[2] = ( confFCnt >> 8 ) & 0xFF;
 8010f18:	187b      	adds	r3, r7, r1
 8010f1a:	881b      	ldrh	r3, [r3, #0]
 8010f1c:	0a1b      	lsrs	r3, r3, #8
 8010f1e:	b29a      	uxth	r2, r3
 8010f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f22:	3302      	adds	r3, #2
 8010f24:	b2d2      	uxtb	r2, r2
 8010f26:	701a      	strb	r2, [r3, #0]
 8010f28:	e007      	b.n	8010f3a <PrepareB1+0x7a>
    }
    else
    {
        b1[1] = 0x00;
 8010f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f2c:	3301      	adds	r3, #1
 8010f2e:	2200      	movs	r2, #0
 8010f30:	701a      	strb	r2, [r3, #0]
        b1[2] = 0x00;
 8010f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f34:	3302      	adds	r3, #2
 8010f36:	2200      	movs	r2, #0
 8010f38:	701a      	strb	r2, [r3, #0]
    }

    b1[3] = txDr;
 8010f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f3c:	3303      	adds	r3, #3
 8010f3e:	1cfa      	adds	r2, r7, #3
 8010f40:	7812      	ldrb	r2, [r2, #0]
 8010f42:	701a      	strb	r2, [r3, #0]
    b1[4] = txCh;
 8010f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f46:	3304      	adds	r3, #4
 8010f48:	2220      	movs	r2, #32
 8010f4a:	18ba      	adds	r2, r7, r2
 8010f4c:	7812      	ldrb	r2, [r2, #0]
 8010f4e:	701a      	strb	r2, [r3, #0]
    b1[5] = UPLINK;  // dir = Uplink
 8010f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f52:	3305      	adds	r3, #5
 8010f54:	2200      	movs	r2, #0
 8010f56:	701a      	strb	r2, [r3, #0]

    b1[6] = devAddr & 0xFF;
 8010f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f5a:	3306      	adds	r3, #6
 8010f5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010f5e:	b2d2      	uxtb	r2, r2
 8010f60:	701a      	strb	r2, [r3, #0]
    b1[7] = ( devAddr >> 8 ) & 0xFF;
 8010f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f64:	0a1a      	lsrs	r2, r3, #8
 8010f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f68:	3307      	adds	r3, #7
 8010f6a:	b2d2      	uxtb	r2, r2
 8010f6c:	701a      	strb	r2, [r3, #0]
    b1[8] = ( devAddr >> 16 ) & 0xFF;
 8010f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f70:	0c1a      	lsrs	r2, r3, #16
 8010f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f74:	3308      	adds	r3, #8
 8010f76:	b2d2      	uxtb	r2, r2
 8010f78:	701a      	strb	r2, [r3, #0]
    b1[9] = ( devAddr >> 24 ) & 0xFF;
 8010f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f7c:	0e1a      	lsrs	r2, r3, #24
 8010f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f80:	3309      	adds	r3, #9
 8010f82:	b2d2      	uxtb	r2, r2
 8010f84:	701a      	strb	r2, [r3, #0]

    b1[10] = fCntUp & 0xFF;
 8010f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f88:	330a      	adds	r3, #10
 8010f8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010f8c:	b2d2      	uxtb	r2, r2
 8010f8e:	701a      	strb	r2, [r3, #0]
    b1[11] = ( fCntUp >> 8 ) & 0xFF;
 8010f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f92:	0a1a      	lsrs	r2, r3, #8
 8010f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f96:	330b      	adds	r3, #11
 8010f98:	b2d2      	uxtb	r2, r2
 8010f9a:	701a      	strb	r2, [r3, #0]
    b1[12] = ( fCntUp >> 16 ) & 0xFF;
 8010f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f9e:	0c1a      	lsrs	r2, r3, #16
 8010fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fa2:	330c      	adds	r3, #12
 8010fa4:	b2d2      	uxtb	r2, r2
 8010fa6:	701a      	strb	r2, [r3, #0]
    b1[13] = ( fCntUp >> 24 ) & 0xFF;
 8010fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010faa:	0e1a      	lsrs	r2, r3, #24
 8010fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fae:	330d      	adds	r3, #13
 8010fb0:	b2d2      	uxtb	r2, r2
 8010fb2:	701a      	strb	r2, [r3, #0]

    b1[14] = 0x00;
 8010fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fb6:	330e      	adds	r3, #14
 8010fb8:	2200      	movs	r2, #0
 8010fba:	701a      	strb	r2, [r3, #0]

    b1[15] = msgLen & 0xFF;
 8010fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fbe:	330f      	adds	r3, #15
 8010fc0:	1dba      	adds	r2, r7, #6
 8010fc2:	8812      	ldrh	r2, [r2, #0]
 8010fc4:	b2d2      	uxtb	r2, r2
 8010fc6:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8010fc8:	2300      	movs	r3, #0
}
 8010fca:	0018      	movs	r0, r3
 8010fcc:	46bd      	mov	sp, r7
 8010fce:	b004      	add	sp, #16
 8010fd0:	bdb0      	pop	{r4, r5, r7, pc}
 8010fd2:	46c0      	nop			; (mov r8, r8)
 8010fd4:	20000edc 	.word	0x20000edc

08010fd8 <ComputeCmacB1>:
 * \param[IN]  fCntUp         - Uplink Frame counter
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB1( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t txDr, uint8_t txCh, uint32_t devAddr, uint32_t fCntUp, uint32_t* cmac )
{
 8010fd8:	b5b0      	push	{r4, r5, r7, lr}
 8010fda:	b0ca      	sub	sp, #296	; 0x128
 8010fdc:	af04      	add	r7, sp, #16
 8010fde:	6078      	str	r0, [r7, #4]
 8010fe0:	000c      	movs	r4, r1
 8010fe2:	0010      	movs	r0, r2
 8010fe4:	0019      	movs	r1, r3
 8010fe6:	4b49      	ldr	r3, [pc, #292]	; (801110c <ComputeCmacB1+0x134>)
 8010fe8:	228c      	movs	r2, #140	; 0x8c
 8010fea:	0052      	lsls	r2, r2, #1
 8010fec:	4694      	mov	ip, r2
 8010fee:	44bc      	add	ip, r7
 8010ff0:	4463      	add	r3, ip
 8010ff2:	1c22      	adds	r2, r4, #0
 8010ff4:	801a      	strh	r2, [r3, #0]
 8010ff6:	4b46      	ldr	r3, [pc, #280]	; (8011110 <ComputeCmacB1+0x138>)
 8010ff8:	228c      	movs	r2, #140	; 0x8c
 8010ffa:	0052      	lsls	r2, r2, #1
 8010ffc:	4694      	mov	ip, r2
 8010ffe:	44bc      	add	ip, r7
 8011000:	4463      	add	r3, ip
 8011002:	1c02      	adds	r2, r0, #0
 8011004:	701a      	strb	r2, [r3, #0]
 8011006:	4b43      	ldr	r3, [pc, #268]	; (8011114 <ComputeCmacB1+0x13c>)
 8011008:	228c      	movs	r2, #140	; 0x8c
 801100a:	0052      	lsls	r2, r2, #1
 801100c:	4694      	mov	ip, r2
 801100e:	44bc      	add	ip, r7
 8011010:	4463      	add	r3, ip
 8011012:	1c0a      	adds	r2, r1, #0
 8011014:	701a      	strb	r2, [r3, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	2b00      	cmp	r3, #0
 801101a:	d005      	beq.n	8011028 <ComputeCmacB1+0x50>
 801101c:	239c      	movs	r3, #156	; 0x9c
 801101e:	005b      	lsls	r3, r3, #1
 8011020:	18fb      	adds	r3, r7, r3
 8011022:	681b      	ldr	r3, [r3, #0]
 8011024:	2b00      	cmp	r3, #0
 8011026:	d101      	bne.n	801102c <ComputeCmacB1+0x54>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8011028:	2307      	movs	r3, #7
 801102a:	e06b      	b.n	8011104 <ComputeCmacB1+0x12c>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 801102c:	4b37      	ldr	r3, [pc, #220]	; (801110c <ComputeCmacB1+0x134>)
 801102e:	228c      	movs	r2, #140	; 0x8c
 8011030:	0052      	lsls	r2, r2, #1
 8011032:	4694      	mov	ip, r2
 8011034:	44bc      	add	ip, r7
 8011036:	4463      	add	r3, ip
 8011038:	881a      	ldrh	r2, [r3, #0]
 801103a:	2380      	movs	r3, #128	; 0x80
 801103c:	005b      	lsls	r3, r3, #1
 801103e:	429a      	cmp	r2, r3
 8011040:	d901      	bls.n	8011046 <ComputeCmacB1+0x6e>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8011042:	230b      	movs	r3, #11
 8011044:	e05e      	b.n	8011104 <ComputeCmacB1+0x12c>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 8011046:	2388      	movs	r3, #136	; 0x88
 8011048:	005a      	lsls	r2, r3, #1
 801104a:	2508      	movs	r5, #8
 801104c:	197b      	adds	r3, r7, r5
 801104e:	2100      	movs	r1, #0
 8011050:	0018      	movs	r0, r3
 8011052:	f004 fb81 	bl	8015758 <memset1>

    // Initialize the first Block
    PrepareB1( len, keyID, isAck, txDr, txCh, devAddr, fCntUp, micBuff );
 8011056:	2394      	movs	r3, #148	; 0x94
 8011058:	005b      	lsls	r3, r3, #1
 801105a:	18fb      	adds	r3, r7, r3
 801105c:	781c      	ldrb	r4, [r3, #0]
 801105e:	4b2d      	ldr	r3, [pc, #180]	; (8011114 <ComputeCmacB1+0x13c>)
 8011060:	228c      	movs	r2, #140	; 0x8c
 8011062:	0052      	lsls	r2, r2, #1
 8011064:	4694      	mov	ip, r2
 8011066:	44bc      	add	ip, r7
 8011068:	4463      	add	r3, ip
 801106a:	781a      	ldrb	r2, [r3, #0]
 801106c:	4b28      	ldr	r3, [pc, #160]	; (8011110 <ComputeCmacB1+0x138>)
 801106e:	218c      	movs	r1, #140	; 0x8c
 8011070:	0049      	lsls	r1, r1, #1
 8011072:	468c      	mov	ip, r1
 8011074:	44bc      	add	ip, r7
 8011076:	4463      	add	r3, ip
 8011078:	7819      	ldrb	r1, [r3, #0]
 801107a:	4b24      	ldr	r3, [pc, #144]	; (801110c <ComputeCmacB1+0x134>)
 801107c:	208c      	movs	r0, #140	; 0x8c
 801107e:	0040      	lsls	r0, r0, #1
 8011080:	4684      	mov	ip, r0
 8011082:	44bc      	add	ip, r7
 8011084:	4463      	add	r3, ip
 8011086:	8818      	ldrh	r0, [r3, #0]
 8011088:	197b      	adds	r3, r7, r5
 801108a:	9303      	str	r3, [sp, #12]
 801108c:	239a      	movs	r3, #154	; 0x9a
 801108e:	005b      	lsls	r3, r3, #1
 8011090:	18fb      	adds	r3, r7, r3
 8011092:	681b      	ldr	r3, [r3, #0]
 8011094:	9302      	str	r3, [sp, #8]
 8011096:	2398      	movs	r3, #152	; 0x98
 8011098:	005b      	lsls	r3, r3, #1
 801109a:	18fb      	adds	r3, r7, r3
 801109c:	681b      	ldr	r3, [r3, #0]
 801109e:	9301      	str	r3, [sp, #4]
 80110a0:	2396      	movs	r3, #150	; 0x96
 80110a2:	005b      	lsls	r3, r3, #1
 80110a4:	18fb      	adds	r3, r7, r3
 80110a6:	781b      	ldrb	r3, [r3, #0]
 80110a8:	9300      	str	r3, [sp, #0]
 80110aa:	0023      	movs	r3, r4
 80110ac:	f7ff ff08 	bl	8010ec0 <PrepareB1>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 80110b0:	197b      	adds	r3, r7, r5
 80110b2:	3310      	adds	r3, #16
 80110b4:	4a15      	ldr	r2, [pc, #84]	; (801110c <ComputeCmacB1+0x134>)
 80110b6:	218c      	movs	r1, #140	; 0x8c
 80110b8:	0049      	lsls	r1, r1, #1
 80110ba:	468c      	mov	ip, r1
 80110bc:	44bc      	add	ip, r7
 80110be:	4462      	add	r2, ip
 80110c0:	8812      	ldrh	r2, [r2, #0]
 80110c2:	6879      	ldr	r1, [r7, #4]
 80110c4:	0018      	movs	r0, r3
 80110c6:	f004 fb0b 	bl	80156e0 <memcpy1>

    if( SecureElementComputeAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 80110ca:	4b10      	ldr	r3, [pc, #64]	; (801110c <ComputeCmacB1+0x134>)
 80110cc:	228c      	movs	r2, #140	; 0x8c
 80110ce:	0052      	lsls	r2, r2, #1
 80110d0:	4694      	mov	ip, r2
 80110d2:	44bc      	add	ip, r7
 80110d4:	4463      	add	r3, ip
 80110d6:	881b      	ldrh	r3, [r3, #0]
 80110d8:	3310      	adds	r3, #16
 80110da:	b299      	uxth	r1, r3
 80110dc:	239c      	movs	r3, #156	; 0x9c
 80110de:	005b      	lsls	r3, r3, #1
 80110e0:	18fb      	adds	r3, r7, r3
 80110e2:	681c      	ldr	r4, [r3, #0]
 80110e4:	4b0a      	ldr	r3, [pc, #40]	; (8011110 <ComputeCmacB1+0x138>)
 80110e6:	228c      	movs	r2, #140	; 0x8c
 80110e8:	0052      	lsls	r2, r2, #1
 80110ea:	4694      	mov	ip, r2
 80110ec:	44bc      	add	ip, r7
 80110ee:	4463      	add	r3, ip
 80110f0:	781a      	ldrb	r2, [r3, #0]
 80110f2:	1978      	adds	r0, r7, r5
 80110f4:	0023      	movs	r3, r4
 80110f6:	f7f8 ff15 	bl	8009f24 <SecureElementComputeAesCmac>
 80110fa:	1e03      	subs	r3, r0, #0
 80110fc:	d001      	beq.n	8011102 <ComputeCmacB1+0x12a>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80110fe:	230c      	movs	r3, #12
 8011100:	e000      	b.n	8011104 <ComputeCmacB1+0x12c>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8011102:	2300      	movs	r3, #0
}
 8011104:	0018      	movs	r0, r3
 8011106:	46bd      	mov	sp, r7
 8011108:	b046      	add	sp, #280	; 0x118
 801110a:	bdb0      	pop	{r4, r5, r7, pc}
 801110c:	fffffeea 	.word	0xfffffeea
 8011110:	fffffee9 	.word	0xfffffee9
 8011114:	fffffee8 	.word	0xfffffee8

08011118 <GetKeyAddrItem>:
 * \param[IN]  addrID          - Address identifier
 * \param[OUT] keyItem        - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
 8011118:	b580      	push	{r7, lr}
 801111a:	b084      	sub	sp, #16
 801111c:	af00      	add	r7, sp, #0
 801111e:	0002      	movs	r2, r0
 8011120:	6039      	str	r1, [r7, #0]
 8011122:	1dfb      	adds	r3, r7, #7
 8011124:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8011126:	230f      	movs	r3, #15
 8011128:	18fb      	adds	r3, r7, r3
 801112a:	2200      	movs	r2, #0
 801112c:	701a      	strb	r2, [r3, #0]
 801112e:	e019      	b.n	8011164 <GetKeyAddrItem+0x4c>
    {
        if( KeyAddrList[i].AddrID == addrID )
 8011130:	230f      	movs	r3, #15
 8011132:	18fb      	adds	r3, r7, r3
 8011134:	781a      	ldrb	r2, [r3, #0]
 8011136:	4b10      	ldr	r3, [pc, #64]	; (8011178 <GetKeyAddrItem+0x60>)
 8011138:	0092      	lsls	r2, r2, #2
 801113a:	5cd3      	ldrb	r3, [r2, r3]
 801113c:	1dfa      	adds	r2, r7, #7
 801113e:	7812      	ldrb	r2, [r2, #0]
 8011140:	429a      	cmp	r2, r3
 8011142:	d109      	bne.n	8011158 <GetKeyAddrItem+0x40>
        {
            *item = &( KeyAddrList[i] );
 8011144:	230f      	movs	r3, #15
 8011146:	18fb      	adds	r3, r7, r3
 8011148:	781b      	ldrb	r3, [r3, #0]
 801114a:	009a      	lsls	r2, r3, #2
 801114c:	4b0a      	ldr	r3, [pc, #40]	; (8011178 <GetKeyAddrItem+0x60>)
 801114e:	18d2      	adds	r2, r2, r3
 8011150:	683b      	ldr	r3, [r7, #0]
 8011152:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 8011154:	2300      	movs	r3, #0
 8011156:	e00b      	b.n	8011170 <GetKeyAddrItem+0x58>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8011158:	210f      	movs	r1, #15
 801115a:	187b      	adds	r3, r7, r1
 801115c:	781a      	ldrb	r2, [r3, #0]
 801115e:	187b      	adds	r3, r7, r1
 8011160:	3201      	adds	r2, #1
 8011162:	701a      	strb	r2, [r3, #0]
 8011164:	230f      	movs	r3, #15
 8011166:	18fb      	adds	r3, r7, r3
 8011168:	781b      	ldrb	r3, [r3, #0]
 801116a:	2b04      	cmp	r3, #4
 801116c:	d9e0      	bls.n	8011130 <GetKeyAddrItem+0x18>
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 801116e:	2309      	movs	r3, #9
}
 8011170:	0018      	movs	r0, r3
 8011172:	46bd      	mov	sp, r7
 8011174:	b004      	add	sp, #16
 8011176:	bd80      	pop	{r7, pc}
 8011178:	20000068 	.word	0x20000068

0801117c <DeriveSessionKey10x>:
 * \param[IN]  netID          - Network Identifier
 * \param[IN]  deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint8_t* joinNonce, uint8_t* netID, uint8_t* devNonce )
{
 801117c:	b590      	push	{r4, r7, lr}
 801117e:	b089      	sub	sp, #36	; 0x24
 8011180:	af00      	add	r7, sp, #0
 8011182:	60b9      	str	r1, [r7, #8]
 8011184:	607a      	str	r2, [r7, #4]
 8011186:	603b      	str	r3, [r7, #0]
 8011188:	230f      	movs	r3, #15
 801118a:	18fb      	adds	r3, r7, r3
 801118c:	1c02      	adds	r2, r0, #0
 801118e:	701a      	strb	r2, [r3, #0]
    if( ( joinNonce == 0 ) || ( netID == 0 ) || ( devNonce == 0 ) )
 8011190:	68bb      	ldr	r3, [r7, #8]
 8011192:	2b00      	cmp	r3, #0
 8011194:	d005      	beq.n	80111a2 <DeriveSessionKey10x+0x26>
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	2b00      	cmp	r3, #0
 801119a:	d002      	beq.n	80111a2 <DeriveSessionKey10x+0x26>
 801119c:	683b      	ldr	r3, [r7, #0]
 801119e:	2b00      	cmp	r3, #0
 80111a0:	d101      	bne.n	80111a6 <DeriveSessionKey10x+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80111a2:	2307      	movs	r3, #7
 80111a4:	e042      	b.n	801122c <DeriveSessionKey10x+0xb0>
    }

    uint8_t compBase[16] = { 0 };
 80111a6:	2310      	movs	r3, #16
 80111a8:	18fb      	adds	r3, r7, r3
 80111aa:	0018      	movs	r0, r3
 80111ac:	2310      	movs	r3, #16
 80111ae:	001a      	movs	r2, r3
 80111b0:	2100      	movs	r1, #0
 80111b2:	f00d f833 	bl	801e21c <memset>

    switch( keyID )
 80111b6:	230f      	movs	r3, #15
 80111b8:	18fb      	adds	r3, r7, r3
 80111ba:	781b      	ldrb	r3, [r3, #0]
 80111bc:	2b04      	cmp	r3, #4
 80111be:	db0e      	blt.n	80111de <DeriveSessionKey10x+0x62>
 80111c0:	2b06      	cmp	r3, #6
 80111c2:	dd02      	ble.n	80111ca <DeriveSessionKey10x+0x4e>
 80111c4:	2b07      	cmp	r3, #7
 80111c6:	d005      	beq.n	80111d4 <DeriveSessionKey10x+0x58>
 80111c8:	e009      	b.n	80111de <DeriveSessionKey10x+0x62>
    {
        case F_NWK_S_INT_KEY:
        case S_NWK_S_INT_KEY:
        case NWK_S_ENC_KEY:
            compBase[0] = 0x01;
 80111ca:	2310      	movs	r3, #16
 80111cc:	18fb      	adds	r3, r7, r3
 80111ce:	2201      	movs	r2, #1
 80111d0:	701a      	strb	r2, [r3, #0]
            break;
 80111d2:	e006      	b.n	80111e2 <DeriveSessionKey10x+0x66>
        case APP_S_KEY:
            compBase[0] = 0x02;
 80111d4:	2310      	movs	r3, #16
 80111d6:	18fb      	adds	r3, r7, r3
 80111d8:	2202      	movs	r2, #2
 80111da:	701a      	strb	r2, [r3, #0]
            break;
 80111dc:	e001      	b.n	80111e2 <DeriveSessionKey10x+0x66>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 80111de:	2308      	movs	r3, #8
 80111e0:	e024      	b.n	801122c <DeriveSessionKey10x+0xb0>
    }

    memcpy1( compBase + 1, joinNonce, 3 );
 80111e2:	2410      	movs	r4, #16
 80111e4:	193b      	adds	r3, r7, r4
 80111e6:	3301      	adds	r3, #1
 80111e8:	68b9      	ldr	r1, [r7, #8]
 80111ea:	2203      	movs	r2, #3
 80111ec:	0018      	movs	r0, r3
 80111ee:	f004 fa77 	bl	80156e0 <memcpy1>
    memcpy1( compBase + 4, netID, 3 );
 80111f2:	193b      	adds	r3, r7, r4
 80111f4:	3304      	adds	r3, #4
 80111f6:	6879      	ldr	r1, [r7, #4]
 80111f8:	2203      	movs	r2, #3
 80111fa:	0018      	movs	r0, r3
 80111fc:	f004 fa70 	bl	80156e0 <memcpy1>
    memcpy1( compBase + 7, devNonce, 2 );
 8011200:	193b      	adds	r3, r7, r4
 8011202:	3307      	adds	r3, #7
 8011204:	6839      	ldr	r1, [r7, #0]
 8011206:	2202      	movs	r2, #2
 8011208:	0018      	movs	r0, r3
 801120a:	f004 fa69 	bl	80156e0 <memcpy1>

    if( SecureElementDeriveAndStoreKey( CryptoCtx.LrWanVersion, compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 801120e:	230f      	movs	r3, #15
 8011210:	18fb      	adds	r3, r7, r3
 8011212:	781a      	ldrb	r2, [r3, #0]
 8011214:	1939      	adds	r1, r7, r4
 8011216:	4b07      	ldr	r3, [pc, #28]	; (8011234 <DeriveSessionKey10x+0xb8>)
 8011218:	6818      	ldr	r0, [r3, #0]
 801121a:	0013      	movs	r3, r2
 801121c:	2201      	movs	r2, #1
 801121e:	f7f8 ff51 	bl	800a0c4 <SecureElementDeriveAndStoreKey>
 8011222:	1e03      	subs	r3, r0, #0
 8011224:	d001      	beq.n	801122a <DeriveSessionKey10x+0xae>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8011226:	230c      	movs	r3, #12
 8011228:	e000      	b.n	801122c <DeriveSessionKey10x+0xb0>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 801122a:	2300      	movs	r3, #0
}
 801122c:	0018      	movs	r0, r3
 801122e:	46bd      	mov	sp, r7
 8011230:	b009      	add	sp, #36	; 0x24
 8011232:	bd90      	pop	{r4, r7, pc}
 8011234:	20000edc 	.word	0x20000edc

08011238 <DeriveSessionKey11x>:
 * \param[IN]  joinEUI        - Join Server EUI
 * \param[IN]  deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey11x( KeyIdentifier_t keyID, uint8_t* joinNonce, uint8_t* joinEUI, uint8_t* devNonce )
{
 8011238:	b5b0      	push	{r4, r5, r7, lr}
 801123a:	b08a      	sub	sp, #40	; 0x28
 801123c:	af00      	add	r7, sp, #0
 801123e:	60b9      	str	r1, [r7, #8]
 8011240:	607a      	str	r2, [r7, #4]
 8011242:	603b      	str	r3, [r7, #0]
 8011244:	230f      	movs	r3, #15
 8011246:	18fb      	adds	r3, r7, r3
 8011248:	1c02      	adds	r2, r0, #0
 801124a:	701a      	strb	r2, [r3, #0]
    if( ( joinNonce == 0 ) || ( joinEUI == 0 ) || ( devNonce == 0 ) )
 801124c:	68bb      	ldr	r3, [r7, #8]
 801124e:	2b00      	cmp	r3, #0
 8011250:	d005      	beq.n	801125e <DeriveSessionKey11x+0x26>
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	2b00      	cmp	r3, #0
 8011256:	d002      	beq.n	801125e <DeriveSessionKey11x+0x26>
 8011258:	683b      	ldr	r3, [r7, #0]
 801125a:	2b00      	cmp	r3, #0
 801125c:	d101      	bne.n	8011262 <DeriveSessionKey11x+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801125e:	2307      	movs	r3, #7
 8011260:	e05a      	b.n	8011318 <DeriveSessionKey11x+0xe0>
    }

    uint8_t compBase[16] = { 0 };
 8011262:	2314      	movs	r3, #20
 8011264:	18fb      	adds	r3, r7, r3
 8011266:	0018      	movs	r0, r3
 8011268:	2310      	movs	r3, #16
 801126a:	001a      	movs	r2, r3
 801126c:	2100      	movs	r1, #0
 801126e:	f00c ffd5 	bl	801e21c <memset>
    KeyIdentifier_t rootKeyId = NWK_KEY;
 8011272:	2327      	movs	r3, #39	; 0x27
 8011274:	18fb      	adds	r3, r7, r3
 8011276:	2201      	movs	r2, #1
 8011278:	701a      	strb	r2, [r3, #0]

    switch( keyID )
 801127a:	230f      	movs	r3, #15
 801127c:	18fb      	adds	r3, r7, r3
 801127e:	781b      	ldrb	r3, [r3, #0]
 8011280:	2b05      	cmp	r3, #5
 8011282:	d00d      	beq.n	80112a0 <DeriveSessionKey11x+0x68>
 8011284:	dc02      	bgt.n	801128c <DeriveSessionKey11x+0x54>
 8011286:	2b04      	cmp	r3, #4
 8011288:	d005      	beq.n	8011296 <DeriveSessionKey11x+0x5e>
 801128a:	e01c      	b.n	80112c6 <DeriveSessionKey11x+0x8e>
 801128c:	2b06      	cmp	r3, #6
 801128e:	d00c      	beq.n	80112aa <DeriveSessionKey11x+0x72>
 8011290:	2b07      	cmp	r3, #7
 8011292:	d00f      	beq.n	80112b4 <DeriveSessionKey11x+0x7c>
 8011294:	e017      	b.n	80112c6 <DeriveSessionKey11x+0x8e>
    {
        case F_NWK_S_INT_KEY:
            compBase[0] = 0x01;
 8011296:	2314      	movs	r3, #20
 8011298:	18fb      	adds	r3, r7, r3
 801129a:	2201      	movs	r2, #1
 801129c:	701a      	strb	r2, [r3, #0]
            break;
 801129e:	e014      	b.n	80112ca <DeriveSessionKey11x+0x92>
        case S_NWK_S_INT_KEY:
            compBase[0] = 0x03;
 80112a0:	2314      	movs	r3, #20
 80112a2:	18fb      	adds	r3, r7, r3
 80112a4:	2203      	movs	r2, #3
 80112a6:	701a      	strb	r2, [r3, #0]
            break;
 80112a8:	e00f      	b.n	80112ca <DeriveSessionKey11x+0x92>
        case NWK_S_ENC_KEY:
            compBase[0] = 0x04;
 80112aa:	2314      	movs	r3, #20
 80112ac:	18fb      	adds	r3, r7, r3
 80112ae:	2204      	movs	r2, #4
 80112b0:	701a      	strb	r2, [r3, #0]
            break;
 80112b2:	e00a      	b.n	80112ca <DeriveSessionKey11x+0x92>
        case APP_S_KEY:
            rootKeyId = APP_KEY;
 80112b4:	2327      	movs	r3, #39	; 0x27
 80112b6:	18fb      	adds	r3, r7, r3
 80112b8:	2200      	movs	r2, #0
 80112ba:	701a      	strb	r2, [r3, #0]
            compBase[0] = 0x02;
 80112bc:	2314      	movs	r3, #20
 80112be:	18fb      	adds	r3, r7, r3
 80112c0:	2202      	movs	r2, #2
 80112c2:	701a      	strb	r2, [r3, #0]
            break;
 80112c4:	e001      	b.n	80112ca <DeriveSessionKey11x+0x92>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 80112c6:	2308      	movs	r3, #8
 80112c8:	e026      	b.n	8011318 <DeriveSessionKey11x+0xe0>
    }

    memcpy1( compBase + 1, joinNonce, 3 );
 80112ca:	2514      	movs	r5, #20
 80112cc:	197b      	adds	r3, r7, r5
 80112ce:	3301      	adds	r3, #1
 80112d0:	68b9      	ldr	r1, [r7, #8]
 80112d2:	2203      	movs	r2, #3
 80112d4:	0018      	movs	r0, r3
 80112d6:	f004 fa03 	bl	80156e0 <memcpy1>
    memcpyr( compBase + 4, joinEUI, 8 );
 80112da:	197b      	adds	r3, r7, r5
 80112dc:	3304      	adds	r3, #4
 80112de:	6879      	ldr	r1, [r7, #4]
 80112e0:	2208      	movs	r2, #8
 80112e2:	0018      	movs	r0, r3
 80112e4:	f004 fa17 	bl	8015716 <memcpyr>
    memcpy1( compBase + 12, devNonce, 2 );
 80112e8:	197b      	adds	r3, r7, r5
 80112ea:	330c      	adds	r3, #12
 80112ec:	6839      	ldr	r1, [r7, #0]
 80112ee:	2202      	movs	r2, #2
 80112f0:	0018      	movs	r0, r3
 80112f2:	f004 f9f5 	bl	80156e0 <memcpy1>

    if( SecureElementDeriveAndStoreKey( CryptoCtx.LrWanVersion, compBase, rootKeyId, keyID ) != SECURE_ELEMENT_SUCCESS )
 80112f6:	230f      	movs	r3, #15
 80112f8:	18fb      	adds	r3, r7, r3
 80112fa:	781c      	ldrb	r4, [r3, #0]
 80112fc:	2327      	movs	r3, #39	; 0x27
 80112fe:	18fb      	adds	r3, r7, r3
 8011300:	781a      	ldrb	r2, [r3, #0]
 8011302:	1979      	adds	r1, r7, r5
 8011304:	4b06      	ldr	r3, [pc, #24]	; (8011320 <DeriveSessionKey11x+0xe8>)
 8011306:	6818      	ldr	r0, [r3, #0]
 8011308:	0023      	movs	r3, r4
 801130a:	f7f8 fedb 	bl	800a0c4 <SecureElementDeriveAndStoreKey>
 801130e:	1e03      	subs	r3, r0, #0
 8011310:	d001      	beq.n	8011316 <DeriveSessionKey11x+0xde>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8011312:	230c      	movs	r3, #12
 8011314:	e000      	b.n	8011318 <DeriveSessionKey11x+0xe0>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8011316:	2300      	movs	r3, #0
}
 8011318:	0018      	movs	r0, r3
 801131a:	46bd      	mov	sp, r7
 801131c:	b00a      	add	sp, #40	; 0x28
 801131e:	bdb0      	pop	{r4, r5, r7, pc}
 8011320:	20000edc 	.word	0x20000edc

08011324 <DeriveLifeTimeSessionKey>:
 * \param[IN]  keyID          - Key Identifier for the key to be calculated
 * \param[IN]  devEUI         - Device EUI
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveLifeTimeSessionKey( KeyIdentifier_t keyID, uint8_t* devEUI )
{
 8011324:	b590      	push	{r4, r7, lr}
 8011326:	b087      	sub	sp, #28
 8011328:	af00      	add	r7, sp, #0
 801132a:	0002      	movs	r2, r0
 801132c:	6039      	str	r1, [r7, #0]
 801132e:	1dfb      	adds	r3, r7, #7
 8011330:	701a      	strb	r2, [r3, #0]
    if( devEUI == 0 )
 8011332:	683b      	ldr	r3, [r7, #0]
 8011334:	2b00      	cmp	r3, #0
 8011336:	d101      	bne.n	801133c <DeriveLifeTimeSessionKey+0x18>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8011338:	2307      	movs	r3, #7
 801133a:	e030      	b.n	801139e <DeriveLifeTimeSessionKey+0x7a>
    }

    uint8_t compBase[16] = { 0 };
 801133c:	2308      	movs	r3, #8
 801133e:	18fb      	adds	r3, r7, r3
 8011340:	0018      	movs	r0, r3
 8011342:	2310      	movs	r3, #16
 8011344:	001a      	movs	r2, r3
 8011346:	2100      	movs	r1, #0
 8011348:	f00c ff68 	bl	801e21c <memset>

    switch( keyID )
 801134c:	1dfb      	adds	r3, r7, #7
 801134e:	781b      	ldrb	r3, [r3, #0]
 8011350:	2b02      	cmp	r3, #2
 8011352:	d002      	beq.n	801135a <DeriveLifeTimeSessionKey+0x36>
 8011354:	2b03      	cmp	r3, #3
 8011356:	d005      	beq.n	8011364 <DeriveLifeTimeSessionKey+0x40>
 8011358:	e009      	b.n	801136e <DeriveLifeTimeSessionKey+0x4a>
    {
        case J_S_INT_KEY:
            compBase[0] = 0x06;
 801135a:	2308      	movs	r3, #8
 801135c:	18fb      	adds	r3, r7, r3
 801135e:	2206      	movs	r2, #6
 8011360:	701a      	strb	r2, [r3, #0]
            break;
 8011362:	e006      	b.n	8011372 <DeriveLifeTimeSessionKey+0x4e>
        case J_S_ENC_KEY:
            compBase[0] = 0x05;
 8011364:	2308      	movs	r3, #8
 8011366:	18fb      	adds	r3, r7, r3
 8011368:	2205      	movs	r2, #5
 801136a:	701a      	strb	r2, [r3, #0]
            break;
 801136c:	e001      	b.n	8011372 <DeriveLifeTimeSessionKey+0x4e>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 801136e:	2308      	movs	r3, #8
 8011370:	e015      	b.n	801139e <DeriveLifeTimeSessionKey+0x7a>
    }

    memcpyr( compBase + 1, devEUI, 8 );
 8011372:	2408      	movs	r4, #8
 8011374:	193b      	adds	r3, r7, r4
 8011376:	3301      	adds	r3, #1
 8011378:	6839      	ldr	r1, [r7, #0]
 801137a:	2208      	movs	r2, #8
 801137c:	0018      	movs	r0, r3
 801137e:	f004 f9ca 	bl	8015716 <memcpyr>

    if( SecureElementDeriveAndStoreKey( CryptoCtx.LrWanVersion, compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 8011382:	1dfb      	adds	r3, r7, #7
 8011384:	781a      	ldrb	r2, [r3, #0]
 8011386:	1939      	adds	r1, r7, r4
 8011388:	4b07      	ldr	r3, [pc, #28]	; (80113a8 <DeriveLifeTimeSessionKey+0x84>)
 801138a:	6818      	ldr	r0, [r3, #0]
 801138c:	0013      	movs	r3, r2
 801138e:	2201      	movs	r2, #1
 8011390:	f7f8 fe98 	bl	800a0c4 <SecureElementDeriveAndStoreKey>
 8011394:	1e03      	subs	r3, r0, #0
 8011396:	d001      	beq.n	801139c <DeriveLifeTimeSessionKey+0x78>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8011398:	230c      	movs	r3, #12
 801139a:	e000      	b.n	801139e <DeriveLifeTimeSessionKey+0x7a>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 801139c:	2300      	movs	r3, #0
}
 801139e:	0018      	movs	r0, r3
 80113a0:	46bd      	mov	sp, r7
 80113a2:	b007      	add	sp, #28
 80113a4:	bd90      	pop	{r4, r7, pc}
 80113a6:	46c0      	nop			; (mov r8, r8)
 80113a8:	20000edc 	.word	0x20000edc

080113ac <CheckFCntDown>:
 * \param[IN]     currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 80113ac:	b580      	push	{r7, lr}
 80113ae:	b084      	sub	sp, #16
 80113b0:	af00      	add	r7, sp, #0
 80113b2:	0002      	movs	r2, r0
 80113b4:	6039      	str	r1, [r7, #0]
 80113b6:	1dfb      	adds	r3, r7, #7
 80113b8:	701a      	strb	r2, [r3, #0]
    uint32_t lastDown = 0;
 80113ba:	2300      	movs	r3, #0
 80113bc:	60fb      	str	r3, [r7, #12]
    switch( fCntID )
 80113be:	1dfb      	adds	r3, r7, #7
 80113c0:	781b      	ldrb	r3, [r3, #0]
 80113c2:	2b07      	cmp	r3, #7
 80113c4:	d83b      	bhi.n	801143e <CheckFCntDown+0x92>
 80113c6:	009a      	lsls	r2, r3, #2
 80113c8:	4b25      	ldr	r3, [pc, #148]	; (8011460 <CheckFCntDown+0xb4>)
 80113ca:	18d3      	adds	r3, r2, r3
 80113cc:	681b      	ldr	r3, [r3, #0]
 80113ce:	469f      	mov	pc, r3
    {
        case FCNT_UP:
            return false;
 80113d0:	2300      	movs	r3, #0
 80113d2:	e040      	b.n	8011456 <CheckFCntDown+0xaa>
        case N_FCNT_DOWN:
            lastDown = CryptoCtx.NvmCtx->NFCntDown;
 80113d4:	4b23      	ldr	r3, [pc, #140]	; (8011464 <CheckFCntDown+0xb8>)
 80113d6:	689b      	ldr	r3, [r3, #8]
 80113d8:	68db      	ldr	r3, [r3, #12]
 80113da:	60fb      	str	r3, [r7, #12]
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->NFCntDown;
 80113dc:	4b21      	ldr	r3, [pc, #132]	; (8011464 <CheckFCntDown+0xb8>)
 80113de:	689a      	ldr	r2, [r3, #8]
 80113e0:	4b20      	ldr	r3, [pc, #128]	; (8011464 <CheckFCntDown+0xb8>)
 80113e2:	689b      	ldr	r3, [r3, #8]
 80113e4:	320c      	adds	r2, #12
 80113e6:	62da      	str	r2, [r3, #44]	; 0x2c
            break;
 80113e8:	e02b      	b.n	8011442 <CheckFCntDown+0x96>
        case A_FCNT_DOWN:
            lastDown = CryptoCtx.NvmCtx->AFCntDown;
 80113ea:	4b1e      	ldr	r3, [pc, #120]	; (8011464 <CheckFCntDown+0xb8>)
 80113ec:	689b      	ldr	r3, [r3, #8]
 80113ee:	691b      	ldr	r3, [r3, #16]
 80113f0:	60fb      	str	r3, [r7, #12]
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->AFCntDown;
 80113f2:	4b1c      	ldr	r3, [pc, #112]	; (8011464 <CheckFCntDown+0xb8>)
 80113f4:	689a      	ldr	r2, [r3, #8]
 80113f6:	4b1b      	ldr	r3, [pc, #108]	; (8011464 <CheckFCntDown+0xb8>)
 80113f8:	689b      	ldr	r3, [r3, #8]
 80113fa:	3210      	adds	r2, #16
 80113fc:	62da      	str	r2, [r3, #44]	; 0x2c
            break;
 80113fe:	e020      	b.n	8011442 <CheckFCntDown+0x96>
        case FCNT_DOWN:
            lastDown = CryptoCtx.NvmCtx->FCntDown;
 8011400:	4b18      	ldr	r3, [pc, #96]	; (8011464 <CheckFCntDown+0xb8>)
 8011402:	689b      	ldr	r3, [r3, #8]
 8011404:	695b      	ldr	r3, [r3, #20]
 8011406:	60fb      	str	r3, [r7, #12]
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntDown;
 8011408:	4b16      	ldr	r3, [pc, #88]	; (8011464 <CheckFCntDown+0xb8>)
 801140a:	689a      	ldr	r2, [r3, #8]
 801140c:	4b15      	ldr	r3, [pc, #84]	; (8011464 <CheckFCntDown+0xb8>)
 801140e:	689b      	ldr	r3, [r3, #8]
 8011410:	3214      	adds	r2, #20
 8011412:	62da      	str	r2, [r3, #44]	; 0x2c
            break;
 8011414:	e015      	b.n	8011442 <CheckFCntDown+0x96>
        case MC_FCNT_DOWN_0:
            lastDown = CryptoCtx.NvmCtx->McFCntDown0;
 8011416:	4b13      	ldr	r3, [pc, #76]	; (8011464 <CheckFCntDown+0xb8>)
 8011418:	689b      	ldr	r3, [r3, #8]
 801141a:	699b      	ldr	r3, [r3, #24]
 801141c:	60fb      	str	r3, [r7, #12]
            break;
 801141e:	e010      	b.n	8011442 <CheckFCntDown+0x96>
        case MC_FCNT_DOWN_1:
            lastDown = CryptoCtx.NvmCtx->McFCntDown1;
 8011420:	4b10      	ldr	r3, [pc, #64]	; (8011464 <CheckFCntDown+0xb8>)
 8011422:	689b      	ldr	r3, [r3, #8]
 8011424:	69db      	ldr	r3, [r3, #28]
 8011426:	60fb      	str	r3, [r7, #12]
            break;
 8011428:	e00b      	b.n	8011442 <CheckFCntDown+0x96>
        case MC_FCNT_DOWN_2:
            lastDown = CryptoCtx.NvmCtx->McFCntDown2;
 801142a:	4b0e      	ldr	r3, [pc, #56]	; (8011464 <CheckFCntDown+0xb8>)
 801142c:	689b      	ldr	r3, [r3, #8]
 801142e:	6a1b      	ldr	r3, [r3, #32]
 8011430:	60fb      	str	r3, [r7, #12]
            break;
 8011432:	e006      	b.n	8011442 <CheckFCntDown+0x96>
        case MC_FCNT_DOWN_3:
            lastDown = CryptoCtx.NvmCtx->McFCntDown3;
 8011434:	4b0b      	ldr	r3, [pc, #44]	; (8011464 <CheckFCntDown+0xb8>)
 8011436:	689b      	ldr	r3, [r3, #8]
 8011438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801143a:	60fb      	str	r3, [r7, #12]
            break;
 801143c:	e001      	b.n	8011442 <CheckFCntDown+0x96>
        default:
            return false;
 801143e:	2300      	movs	r3, #0
 8011440:	e009      	b.n	8011456 <CheckFCntDown+0xaa>
    }
    if( ( currentDown > lastDown ) ||
 8011442:	683a      	ldr	r2, [r7, #0]
 8011444:	68fb      	ldr	r3, [r7, #12]
 8011446:	429a      	cmp	r2, r3
 8011448:	d802      	bhi.n	8011450 <CheckFCntDown+0xa4>
 801144a:	68fb      	ldr	r3, [r7, #12]
 801144c:	3301      	adds	r3, #1
 801144e:	d101      	bne.n	8011454 <CheckFCntDown+0xa8>
        // For LoRaWAN 1.0.X only. Allow downlink frames of 0
        ( lastDown == FCNT_DOWN_INITAL_VALUE ) )
    {
        return true;
 8011450:	2301      	movs	r3, #1
 8011452:	e000      	b.n	8011456 <CheckFCntDown+0xaa>
    }
    else
    {
        return false;
 8011454:	2300      	movs	r3, #0
    }
}
 8011456:	0018      	movs	r0, r3
 8011458:	46bd      	mov	sp, r7
 801145a:	b004      	add	sp, #16
 801145c:	bd80      	pop	{r7, pc}
 801145e:	46c0      	nop			; (mov r8, r8)
 8011460:	08020aac 	.word	0x08020aac
 8011464:	20000edc 	.word	0x20000edc

08011468 <UpdateFCntDown>:
 * \param[IN]     currentDown   - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8011468:	b580      	push	{r7, lr}
 801146a:	b082      	sub	sp, #8
 801146c:	af00      	add	r7, sp, #0
 801146e:	0002      	movs	r2, r0
 8011470:	6039      	str	r1, [r7, #0]
 8011472:	1dfb      	adds	r3, r7, #7
 8011474:	701a      	strb	r2, [r3, #0]
    switch( fCntID )
 8011476:	1dfb      	adds	r3, r7, #7
 8011478:	781b      	ldrb	r3, [r3, #0]
 801147a:	2b07      	cmp	r3, #7
 801147c:	d827      	bhi.n	80114ce <UpdateFCntDown+0x66>
 801147e:	009a      	lsls	r2, r3, #2
 8011480:	4b17      	ldr	r3, [pc, #92]	; (80114e0 <UpdateFCntDown+0x78>)
 8011482:	18d3      	adds	r3, r2, r3
 8011484:	681b      	ldr	r3, [r3, #0]
 8011486:	469f      	mov	pc, r3
    {
        case N_FCNT_DOWN:
            CryptoCtx.NvmCtx->NFCntDown = currentDown;
 8011488:	4b16      	ldr	r3, [pc, #88]	; (80114e4 <UpdateFCntDown+0x7c>)
 801148a:	689b      	ldr	r3, [r3, #8]
 801148c:	683a      	ldr	r2, [r7, #0]
 801148e:	60da      	str	r2, [r3, #12]
            break;
 8011490:	e01e      	b.n	80114d0 <UpdateFCntDown+0x68>
        case A_FCNT_DOWN:
            CryptoCtx.NvmCtx->AFCntDown = currentDown;
 8011492:	4b14      	ldr	r3, [pc, #80]	; (80114e4 <UpdateFCntDown+0x7c>)
 8011494:	689b      	ldr	r3, [r3, #8]
 8011496:	683a      	ldr	r2, [r7, #0]
 8011498:	611a      	str	r2, [r3, #16]
            break;
 801149a:	e019      	b.n	80114d0 <UpdateFCntDown+0x68>
        case FCNT_DOWN:
            CryptoCtx.NvmCtx->FCntDown = currentDown;
 801149c:	4b11      	ldr	r3, [pc, #68]	; (80114e4 <UpdateFCntDown+0x7c>)
 801149e:	689b      	ldr	r3, [r3, #8]
 80114a0:	683a      	ldr	r2, [r7, #0]
 80114a2:	615a      	str	r2, [r3, #20]
            break;
 80114a4:	e014      	b.n	80114d0 <UpdateFCntDown+0x68>
        case MC_FCNT_DOWN_0:
            CryptoCtx.NvmCtx->McFCntDown0 = currentDown;
 80114a6:	4b0f      	ldr	r3, [pc, #60]	; (80114e4 <UpdateFCntDown+0x7c>)
 80114a8:	689b      	ldr	r3, [r3, #8]
 80114aa:	683a      	ldr	r2, [r7, #0]
 80114ac:	619a      	str	r2, [r3, #24]
            break;
 80114ae:	e00f      	b.n	80114d0 <UpdateFCntDown+0x68>
        case MC_FCNT_DOWN_1:
            CryptoCtx.NvmCtx->McFCntDown1 = currentDown;
 80114b0:	4b0c      	ldr	r3, [pc, #48]	; (80114e4 <UpdateFCntDown+0x7c>)
 80114b2:	689b      	ldr	r3, [r3, #8]
 80114b4:	683a      	ldr	r2, [r7, #0]
 80114b6:	61da      	str	r2, [r3, #28]
            break;
 80114b8:	e00a      	b.n	80114d0 <UpdateFCntDown+0x68>
        case MC_FCNT_DOWN_2:
            CryptoCtx.NvmCtx->McFCntDown2 = currentDown;
 80114ba:	4b0a      	ldr	r3, [pc, #40]	; (80114e4 <UpdateFCntDown+0x7c>)
 80114bc:	689b      	ldr	r3, [r3, #8]
 80114be:	683a      	ldr	r2, [r7, #0]
 80114c0:	621a      	str	r2, [r3, #32]
            break;
 80114c2:	e005      	b.n	80114d0 <UpdateFCntDown+0x68>
        case MC_FCNT_DOWN_3:
            CryptoCtx.NvmCtx->McFCntDown3 = currentDown;
 80114c4:	4b07      	ldr	r3, [pc, #28]	; (80114e4 <UpdateFCntDown+0x7c>)
 80114c6:	689b      	ldr	r3, [r3, #8]
 80114c8:	683a      	ldr	r2, [r7, #0]
 80114ca:	625a      	str	r2, [r3, #36]	; 0x24
            break;
 80114cc:	e000      	b.n	80114d0 <UpdateFCntDown+0x68>
        default:
            break;
 80114ce:	46c0      	nop			; (mov r8, r8)
    }
    CryptoCtx.EventCryptoNvmCtxChanged( );
 80114d0:	4b04      	ldr	r3, [pc, #16]	; (80114e4 <UpdateFCntDown+0x7c>)
 80114d2:	68db      	ldr	r3, [r3, #12]
 80114d4:	4798      	blx	r3
}
 80114d6:	46c0      	nop			; (mov r8, r8)
 80114d8:	46bd      	mov	sp, r7
 80114da:	b002      	add	sp, #8
 80114dc:	bd80      	pop	{r7, pc}
 80114de:	46c0      	nop			; (mov r8, r8)
 80114e0:	08020acc 	.word	0x08020acc
 80114e4:	20000edc 	.word	0x20000edc

080114e8 <ResetFCnts>:

/*!
 * Resets the frame counters
 */
void ResetFCnts( void )
{
 80114e8:	b580      	push	{r7, lr}
 80114ea:	af00      	add	r7, sp, #0

    CryptoCtx.NvmCtx->FCntUp = 0;
 80114ec:	4b16      	ldr	r3, [pc, #88]	; (8011548 <ResetFCnts+0x60>)
 80114ee:	689b      	ldr	r3, [r3, #8]
 80114f0:	2200      	movs	r2, #0
 80114f2:	609a      	str	r2, [r3, #8]
    CryptoCtx.NvmCtx->NFCntDown = FCNT_DOWN_INITAL_VALUE;
 80114f4:	4b14      	ldr	r3, [pc, #80]	; (8011548 <ResetFCnts+0x60>)
 80114f6:	689b      	ldr	r3, [r3, #8]
 80114f8:	2201      	movs	r2, #1
 80114fa:	4252      	negs	r2, r2
 80114fc:	60da      	str	r2, [r3, #12]
    CryptoCtx.NvmCtx->AFCntDown = FCNT_DOWN_INITAL_VALUE;
 80114fe:	4b12      	ldr	r3, [pc, #72]	; (8011548 <ResetFCnts+0x60>)
 8011500:	689b      	ldr	r3, [r3, #8]
 8011502:	2201      	movs	r2, #1
 8011504:	4252      	negs	r2, r2
 8011506:	611a      	str	r2, [r3, #16]
    CryptoCtx.NvmCtx->FCntDown = FCNT_DOWN_INITAL_VALUE;
 8011508:	4b0f      	ldr	r3, [pc, #60]	; (8011548 <ResetFCnts+0x60>)
 801150a:	689b      	ldr	r3, [r3, #8]
 801150c:	2201      	movs	r2, #1
 801150e:	4252      	negs	r2, r2
 8011510:	615a      	str	r2, [r3, #20]

    CryptoCtx.NvmCtx->McFCntDown0 = FCNT_DOWN_INITAL_VALUE;
 8011512:	4b0d      	ldr	r3, [pc, #52]	; (8011548 <ResetFCnts+0x60>)
 8011514:	689b      	ldr	r3, [r3, #8]
 8011516:	2201      	movs	r2, #1
 8011518:	4252      	negs	r2, r2
 801151a:	619a      	str	r2, [r3, #24]
    CryptoCtx.NvmCtx->McFCntDown1 = FCNT_DOWN_INITAL_VALUE;
 801151c:	4b0a      	ldr	r3, [pc, #40]	; (8011548 <ResetFCnts+0x60>)
 801151e:	689b      	ldr	r3, [r3, #8]
 8011520:	2201      	movs	r2, #1
 8011522:	4252      	negs	r2, r2
 8011524:	61da      	str	r2, [r3, #28]
    CryptoCtx.NvmCtx->McFCntDown2 = FCNT_DOWN_INITAL_VALUE;
 8011526:	4b08      	ldr	r3, [pc, #32]	; (8011548 <ResetFCnts+0x60>)
 8011528:	689b      	ldr	r3, [r3, #8]
 801152a:	2201      	movs	r2, #1
 801152c:	4252      	negs	r2, r2
 801152e:	621a      	str	r2, [r3, #32]
    CryptoCtx.NvmCtx->McFCntDown3 = FCNT_DOWN_INITAL_VALUE;
 8011530:	4b05      	ldr	r3, [pc, #20]	; (8011548 <ResetFCnts+0x60>)
 8011532:	689b      	ldr	r3, [r3, #8]
 8011534:	2201      	movs	r2, #1
 8011536:	4252      	negs	r2, r2
 8011538:	625a      	str	r2, [r3, #36]	; 0x24

    CryptoCtx.EventCryptoNvmCtxChanged( );
 801153a:	4b03      	ldr	r3, [pc, #12]	; (8011548 <ResetFCnts+0x60>)
 801153c:	68db      	ldr	r3, [r3, #12]
 801153e:	4798      	blx	r3
}
 8011540:	46c0      	nop			; (mov r8, r8)
 8011542:	46bd      	mov	sp, r7
 8011544:	bd80      	pop	{r7, pc}
 8011546:	46c0      	nop			; (mov r8, r8)
 8011548:	20000edc 	.word	0x20000edc

0801154c <DummyCB>:

/*
 * Dummy callback in case if the user provides NULL function pointer
 */
static void DummyCB( void )
{
 801154c:	b580      	push	{r7, lr}
 801154e:	af00      	add	r7, sp, #0
    return;
 8011550:	46c0      	nop			; (mov r8, r8)
}
 8011552:	46bd      	mov	sp, r7
 8011554:	bd80      	pop	{r7, pc}
	...

08011558 <LoRaMacCryptoInit>:
/*
 *  API functions
 */

LoRaMacCryptoStatus_t LoRaMacCryptoInit( EventNvmCtxChanged cryptoNvmCtxChanged )
{
 8011558:	b580      	push	{r7, lr}
 801155a:	b082      	sub	sp, #8
 801155c:	af00      	add	r7, sp, #0
 801155e:	6078      	str	r0, [r7, #4]
    // Initialize volatile variables
    CryptoCtx.LrWanVersion.Fields.Major = 1;
 8011560:	4b22      	ldr	r3, [pc, #136]	; (80115ec <LoRaMacCryptoInit+0x94>)
 8011562:	2201      	movs	r2, #1
 8011564:	70da      	strb	r2, [r3, #3]
    CryptoCtx.LrWanVersion.Fields.Minor = 1;
 8011566:	4b21      	ldr	r3, [pc, #132]	; (80115ec <LoRaMacCryptoInit+0x94>)
 8011568:	2201      	movs	r2, #1
 801156a:	709a      	strb	r2, [r3, #2]
    CryptoCtx.LrWanVersion.Fields.Revision = 0;
 801156c:	4b1f      	ldr	r3, [pc, #124]	; (80115ec <LoRaMacCryptoInit+0x94>)
 801156e:	2200      	movs	r2, #0
 8011570:	705a      	strb	r2, [r3, #1]
    CryptoCtx.LrWanVersion.Fields.Rfu = 0;
 8011572:	4b1e      	ldr	r3, [pc, #120]	; (80115ec <LoRaMacCryptoInit+0x94>)
 8011574:	2200      	movs	r2, #0
 8011576:	701a      	strb	r2, [r3, #0]
    CryptoCtx.RJcount0 = 0;
 8011578:	4b1c      	ldr	r3, [pc, #112]	; (80115ec <LoRaMacCryptoInit+0x94>)
 801157a:	2200      	movs	r2, #0
 801157c:	809a      	strh	r2, [r3, #4]

    // Assign non volatile context
    CryptoCtx.NvmCtx = &NvmCryptoCtx;
 801157e:	4b1b      	ldr	r3, [pc, #108]	; (80115ec <LoRaMacCryptoInit+0x94>)
 8011580:	4a1b      	ldr	r2, [pc, #108]	; (80115f0 <LoRaMacCryptoInit+0x98>)
 8011582:	609a      	str	r2, [r3, #8]

    // Assign callback
    if( cryptoNvmCtxChanged != 0 )
 8011584:	687b      	ldr	r3, [r7, #4]
 8011586:	2b00      	cmp	r3, #0
 8011588:	d003      	beq.n	8011592 <LoRaMacCryptoInit+0x3a>
    {
        CryptoCtx.EventCryptoNvmCtxChanged = cryptoNvmCtxChanged;
 801158a:	4b18      	ldr	r3, [pc, #96]	; (80115ec <LoRaMacCryptoInit+0x94>)
 801158c:	687a      	ldr	r2, [r7, #4]
 801158e:	60da      	str	r2, [r3, #12]
 8011590:	e002      	b.n	8011598 <LoRaMacCryptoInit+0x40>
    }
    else
    {
        CryptoCtx.EventCryptoNvmCtxChanged = DummyCB;
 8011592:	4b16      	ldr	r3, [pc, #88]	; (80115ec <LoRaMacCryptoInit+0x94>)
 8011594:	4a17      	ldr	r2, [pc, #92]	; (80115f4 <LoRaMacCryptoInit+0x9c>)
 8011596:	60da      	str	r2, [r3, #12]
    }

    // Initialize with default
    memset1( (uint8_t*) CryptoCtx.NvmCtx, 0, sizeof( LoRaMacCryptoNvmCtx_t ) );
 8011598:	4b14      	ldr	r3, [pc, #80]	; (80115ec <LoRaMacCryptoInit+0x94>)
 801159a:	689b      	ldr	r3, [r3, #8]
 801159c:	2230      	movs	r2, #48	; 0x30
 801159e:	2100      	movs	r1, #0
 80115a0:	0018      	movs	r0, r3
 80115a2:	f004 f8d9 	bl	8015758 <memset1>

    // Reset frame counters
    CryptoCtx.RJcount0 = 0;
 80115a6:	4b11      	ldr	r3, [pc, #68]	; (80115ec <LoRaMacCryptoInit+0x94>)
 80115a8:	2200      	movs	r2, #0
 80115aa:	809a      	strh	r2, [r3, #4]
    CryptoCtx.NvmCtx->FCntUp = 0;
 80115ac:	4b0f      	ldr	r3, [pc, #60]	; (80115ec <LoRaMacCryptoInit+0x94>)
 80115ae:	689b      	ldr	r3, [r3, #8]
 80115b0:	2200      	movs	r2, #0
 80115b2:	609a      	str	r2, [r3, #8]
    CryptoCtx.NvmCtx->FCntDown = FCNT_DOWN_INITAL_VALUE;
 80115b4:	4b0d      	ldr	r3, [pc, #52]	; (80115ec <LoRaMacCryptoInit+0x94>)
 80115b6:	689b      	ldr	r3, [r3, #8]
 80115b8:	2201      	movs	r2, #1
 80115ba:	4252      	negs	r2, r2
 80115bc:	615a      	str	r2, [r3, #20]
    CryptoCtx.NvmCtx->NFCntDown = FCNT_DOWN_INITAL_VALUE;
 80115be:	4b0b      	ldr	r3, [pc, #44]	; (80115ec <LoRaMacCryptoInit+0x94>)
 80115c0:	689b      	ldr	r3, [r3, #8]
 80115c2:	2201      	movs	r2, #1
 80115c4:	4252      	negs	r2, r2
 80115c6:	60da      	str	r2, [r3, #12]
    CryptoCtx.NvmCtx->AFCntDown = FCNT_DOWN_INITAL_VALUE;
 80115c8:	4b08      	ldr	r3, [pc, #32]	; (80115ec <LoRaMacCryptoInit+0x94>)
 80115ca:	689b      	ldr	r3, [r3, #8]
 80115cc:	2201      	movs	r2, #1
 80115ce:	4252      	negs	r2, r2
 80115d0:	611a      	str	r2, [r3, #16]

    // Set non zero values
    CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntDown;
 80115d2:	4b06      	ldr	r3, [pc, #24]	; (80115ec <LoRaMacCryptoInit+0x94>)
 80115d4:	689a      	ldr	r2, [r3, #8]
 80115d6:	4b05      	ldr	r3, [pc, #20]	; (80115ec <LoRaMacCryptoInit+0x94>)
 80115d8:	689b      	ldr	r3, [r3, #8]
 80115da:	3214      	adds	r2, #20
 80115dc:	62da      	str	r2, [r3, #44]	; 0x2c
    ResetFCnts( );
 80115de:	f7ff ff83 	bl	80114e8 <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 80115e2:	2300      	movs	r3, #0
}
 80115e4:	0018      	movs	r0, r3
 80115e6:	46bd      	mov	sp, r7
 80115e8:	b002      	add	sp, #8
 80115ea:	bd80      	pop	{r7, pc}
 80115ec:	20000edc 	.word	0x20000edc
 80115f0:	20000eec 	.word	0x20000eec
 80115f4:	0801154d 	.word	0x0801154d

080115f8 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
 80115f8:	b580      	push	{r7, lr}
 80115fa:	b082      	sub	sp, #8
 80115fc:	af00      	add	r7, sp, #0
 80115fe:	6078      	str	r0, [r7, #4]
    CryptoCtx.LrWanVersion = version;
 8011600:	4b03      	ldr	r3, [pc, #12]	; (8011610 <LoRaMacCryptoSetLrWanVersion+0x18>)
 8011602:	687a      	ldr	r2, [r7, #4]
 8011604:	601a      	str	r2, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 8011606:	2300      	movs	r3, #0
}
 8011608:	0018      	movs	r0, r3
 801160a:	46bd      	mov	sp, r7
 801160c:	b002      	add	sp, #8
 801160e:	bd80      	pop	{r7, pc}
 8011610:	20000edc 	.word	0x20000edc

08011614 <LoRaMacCryptoRestoreNvmCtx>:

LoRaMacCryptoStatus_t LoRaMacCryptoRestoreNvmCtx( void* cryptoNvmCtx )
{
 8011614:	b580      	push	{r7, lr}
 8011616:	b082      	sub	sp, #8
 8011618:	af00      	add	r7, sp, #0
 801161a:	6078      	str	r0, [r7, #4]
    // Restore module context
    if( cryptoNvmCtx != 0 )
 801161c:	687b      	ldr	r3, [r7, #4]
 801161e:	2b00      	cmp	r3, #0
 8011620:	d007      	beq.n	8011632 <LoRaMacCryptoRestoreNvmCtx+0x1e>
    {
        memcpy1( ( uint8_t* ) &NvmCryptoCtx, ( uint8_t* ) cryptoNvmCtx, CRYPTO_NVM_CTX_SIZE );
 8011622:	6879      	ldr	r1, [r7, #4]
 8011624:	4b05      	ldr	r3, [pc, #20]	; (801163c <LoRaMacCryptoRestoreNvmCtx+0x28>)
 8011626:	2230      	movs	r2, #48	; 0x30
 8011628:	0018      	movs	r0, r3
 801162a:	f004 f859 	bl	80156e0 <memcpy1>
        return LORAMAC_CRYPTO_SUCCESS;
 801162e:	2300      	movs	r3, #0
 8011630:	e000      	b.n	8011634 <LoRaMacCryptoRestoreNvmCtx+0x20>
    }
    else
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8011632:	2307      	movs	r3, #7
    }
}
 8011634:	0018      	movs	r0, r3
 8011636:	46bd      	mov	sp, r7
 8011638:	b002      	add	sp, #8
 801163a:	bd80      	pop	{r7, pc}
 801163c:	20000eec 	.word	0x20000eec

08011640 <LoRaMacCryptoGetNvmCtx>:

void* LoRaMacCryptoGetNvmCtx( size_t* cryptoNvmCtxSize )
{
 8011640:	b580      	push	{r7, lr}
 8011642:	b082      	sub	sp, #8
 8011644:	af00      	add	r7, sp, #0
 8011646:	6078      	str	r0, [r7, #4]
    *cryptoNvmCtxSize = CRYPTO_NVM_CTX_SIZE;
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	2230      	movs	r2, #48	; 0x30
 801164c:	601a      	str	r2, [r3, #0]
    return &NvmCryptoCtx;
 801164e:	4b02      	ldr	r3, [pc, #8]	; (8011658 <LoRaMacCryptoGetNvmCtx+0x18>)
}
 8011650:	0018      	movs	r0, r3
 8011652:	46bd      	mov	sp, r7
 8011654:	b002      	add	sp, #8
 8011656:	bd80      	pop	{r7, pc}
 8011658:	20000eec 	.word	0x20000eec

0801165c <LoRaMacCryptoSetKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 801165c:	b580      	push	{r7, lr}
 801165e:	b082      	sub	sp, #8
 8011660:	af00      	add	r7, sp, #0
 8011662:	0002      	movs	r2, r0
 8011664:	6039      	str	r1, [r7, #0]
 8011666:	1dfb      	adds	r3, r7, #7
 8011668:	701a      	strb	r2, [r3, #0]
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 801166a:	683a      	ldr	r2, [r7, #0]
 801166c:	1dfb      	adds	r3, r7, #7
 801166e:	781b      	ldrb	r3, [r3, #0]
 8011670:	0011      	movs	r1, r2
 8011672:	0018      	movs	r0, r3
 8011674:	f7f8 fbde 	bl	8009e34 <SecureElementSetKey>
 8011678:	1e03      	subs	r3, r0, #0
 801167a:	d001      	beq.n	8011680 <LoRaMacCryptoSetKey+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801167c:	230c      	movs	r3, #12
 801167e:	e000      	b.n	8011682 <LoRaMacCryptoSetKey+0x26>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8011680:	2300      	movs	r3, #0
}
 8011682:	0018      	movs	r0, r3
 8011684:	46bd      	mov	sp, r7
 8011686:	b002      	add	sp, #8
 8011688:	bd80      	pop	{r7, pc}
	...

0801168c <LoRaMacCryptoPrepareJoinRequest>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 801168c:	b5b0      	push	{r4, r5, r7, lr}
 801168e:	b084      	sub	sp, #16
 8011690:	af00      	add	r7, sp, #0
 8011692:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	2b00      	cmp	r3, #0
 8011698:	d101      	bne.n	801169e <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801169a:	2307      	movs	r3, #7
 801169c:	e064      	b.n	8011768 <LoRaMacCryptoPrepareJoinRequest+0xdc>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
 801169e:	230f      	movs	r3, #15
 80116a0:	18fb      	adds	r3, r7, r3
 80116a2:	2201      	movs	r2, #1
 80116a4:	701a      	strb	r2, [r3, #0]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 80116a6:	240e      	movs	r4, #14
 80116a8:	193b      	adds	r3, r7, r4
 80116aa:	2210      	movs	r2, #16
 80116ac:	701a      	strb	r2, [r3, #0]

    // Add device nonce
#ifdef NONCE_INC
    CryptoCtx.NvmCtx->DevNonce++;
#else  
    CryptoCtx.NvmCtx->DevNonce = (uint16_t) rand1( );
 80116ae:	f003 ffd7 	bl	8015660 <rand1>
 80116b2:	0002      	movs	r2, r0
 80116b4:	4b2e      	ldr	r3, [pc, #184]	; (8011770 <LoRaMacCryptoPrepareJoinRequest+0xe4>)
 80116b6:	689b      	ldr	r3, [r3, #8]
 80116b8:	b292      	uxth	r2, r2
 80116ba:	801a      	strh	r2, [r3, #0]
#endif
    CryptoCtx.EventCryptoNvmCtxChanged( );
 80116bc:	4b2c      	ldr	r3, [pc, #176]	; (8011770 <LoRaMacCryptoPrepareJoinRequest+0xe4>)
 80116be:	68db      	ldr	r3, [r3, #12]
 80116c0:	4798      	blx	r3
    macMsg->DevNonce = CryptoCtx.NvmCtx->DevNonce;
 80116c2:	4b2b      	ldr	r3, [pc, #172]	; (8011770 <LoRaMacCryptoPrepareJoinRequest+0xe4>)
 80116c4:	689b      	ldr	r3, [r3, #8]
 80116c6:	881a      	ldrh	r2, [r3, #0]
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	82da      	strh	r2, [r3, #22]

    // Derive lifetime session keys
    retval = DeriveLifeTimeSessionKey( J_S_INT_KEY, macMsg->DevEUI );
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	330e      	adds	r3, #14
 80116d0:	0025      	movs	r5, r4
 80116d2:	193c      	adds	r4, r7, r4
 80116d4:	0019      	movs	r1, r3
 80116d6:	2002      	movs	r0, #2
 80116d8:	f7ff fe24 	bl	8011324 <DeriveLifeTimeSessionKey>
 80116dc:	0003      	movs	r3, r0
 80116de:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80116e0:	002c      	movs	r4, r5
 80116e2:	193b      	adds	r3, r7, r4
 80116e4:	781b      	ldrb	r3, [r3, #0]
 80116e6:	2b00      	cmp	r3, #0
 80116e8:	d003      	beq.n	80116f2 <LoRaMacCryptoPrepareJoinRequest+0x66>
    {
        return retval;
 80116ea:	230e      	movs	r3, #14
 80116ec:	18fb      	adds	r3, r7, r3
 80116ee:	781b      	ldrb	r3, [r3, #0]
 80116f0:	e03a      	b.n	8011768 <LoRaMacCryptoPrepareJoinRequest+0xdc>
    }
    retval = DeriveLifeTimeSessionKey( J_S_ENC_KEY, macMsg->DevEUI );
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	330e      	adds	r3, #14
 80116f6:	250e      	movs	r5, #14
 80116f8:	197c      	adds	r4, r7, r5
 80116fa:	0019      	movs	r1, r3
 80116fc:	2003      	movs	r0, #3
 80116fe:	f7ff fe11 	bl	8011324 <DeriveLifeTimeSessionKey>
 8011702:	0003      	movs	r3, r0
 8011704:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8011706:	197b      	adds	r3, r7, r5
 8011708:	781b      	ldrb	r3, [r3, #0]
 801170a:	2b00      	cmp	r3, #0
 801170c:	d003      	beq.n	8011716 <LoRaMacCryptoPrepareJoinRequest+0x8a>
    {
        return retval;
 801170e:	230e      	movs	r3, #14
 8011710:	18fb      	adds	r3, r7, r3
 8011712:	781b      	ldrb	r3, [r3, #0]
 8011714:	e028      	b.n	8011768 <LoRaMacCryptoPrepareJoinRequest+0xdc>
    }

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	0018      	movs	r0, r3
 801171a:	f001 f856 	bl	80127ca <LoRaMacSerializerJoinRequest>
 801171e:	1e03      	subs	r3, r0, #0
 8011720:	d001      	beq.n	8011726 <LoRaMacCryptoPrepareJoinRequest+0x9a>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8011722:	230e      	movs	r3, #14
 8011724:	e020      	b.n	8011768 <LoRaMacCryptoPrepareJoinRequest+0xdc>
    }

    // Compute mic
    retval = LoraMacCryptoComputeCmac( macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC );
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	6818      	ldr	r0, [r3, #0]
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	3318      	adds	r3, #24
 801172e:	0019      	movs	r1, r3
 8011730:	250e      	movs	r5, #14
 8011732:	197c      	adds	r4, r7, r5
 8011734:	230f      	movs	r3, #15
 8011736:	18fb      	adds	r3, r7, r3
 8011738:	781a      	ldrb	r2, [r3, #0]
 801173a:	000b      	movs	r3, r1
 801173c:	2113      	movs	r1, #19
 801173e:	f7ff f996 	bl	8010a6e <LoraMacCryptoComputeCmac>
 8011742:	0003      	movs	r3, r0
 8011744:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8011746:	197b      	adds	r3, r7, r5
 8011748:	781b      	ldrb	r3, [r3, #0]
 801174a:	2b00      	cmp	r3, #0
 801174c:	d003      	beq.n	8011756 <LoRaMacCryptoPrepareJoinRequest+0xca>
    {
        return retval;
 801174e:	230e      	movs	r3, #14
 8011750:	18fb      	adds	r3, r7, r3
 8011752:	781b      	ldrb	r3, [r3, #0]
 8011754:	e008      	b.n	8011768 <LoRaMacCryptoPrepareJoinRequest+0xdc>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	0018      	movs	r0, r3
 801175a:	f001 f836 	bl	80127ca <LoRaMacSerializerJoinRequest>
 801175e:	1e03      	subs	r3, r0, #0
 8011760:	d001      	beq.n	8011766 <LoRaMacCryptoPrepareJoinRequest+0xda>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8011762:	230e      	movs	r3, #14
 8011764:	e000      	b.n	8011768 <LoRaMacCryptoPrepareJoinRequest+0xdc>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8011766:	2300      	movs	r3, #0
}
 8011768:	0018      	movs	r0, r3
 801176a:	46bd      	mov	sp, r7
 801176c:	b004      	add	sp, #16
 801176e:	bdb0      	pop	{r4, r5, r7, pc}
 8011770:	20000edc 	.word	0x20000edc

08011774 <LoRaMacCryptoHandleJoinAccept>:

    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoHandleJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEUI, LoRaMacMessageJoinAccept_t* macMsg )
{
 8011774:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011776:	b0cd      	sub	sp, #308	; 0x134
 8011778:	af00      	add	r7, sp, #0
 801177a:	60b9      	str	r1, [r7, #8]
 801177c:	607a      	str	r2, [r7, #4]
 801177e:	4bde      	ldr	r3, [pc, #888]	; (8011af8 <LoRaMacCryptoHandleJoinAccept+0x384>)
 8011780:	2298      	movs	r2, #152	; 0x98
 8011782:	0052      	lsls	r2, r2, #1
 8011784:	4694      	mov	ip, r2
 8011786:	44bc      	add	ip, r7
 8011788:	4463      	add	r3, ip
 801178a:	1c02      	adds	r2, r0, #0
 801178c:	701a      	strb	r2, [r3, #0]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	2b00      	cmp	r3, #0
 8011792:	d002      	beq.n	801179a <LoRaMacCryptoHandleJoinAccept+0x26>
 8011794:	68bb      	ldr	r3, [r7, #8]
 8011796:	2b00      	cmp	r3, #0
 8011798:	d101      	bne.n	801179e <LoRaMacCryptoHandleJoinAccept+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801179a:	2307      	movs	r3, #7
 801179c:	e25e      	b.n	8011c5c <LoRaMacCryptoHandleJoinAccept+0x4e8>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 801179e:	2328      	movs	r3, #40	; 0x28
 80117a0:	33ff      	adds	r3, #255	; 0xff
 80117a2:	18fb      	adds	r3, r7, r3
 80117a4:	2210      	movs	r2, #16
 80117a6:	701a      	strb	r2, [r3, #0]
    KeyIdentifier_t micComputationKeyID;
    KeyIdentifier_t encryptionKeyID;
    uint8_t micComputationOffset = 0;
 80117a8:	232e      	movs	r3, #46	; 0x2e
 80117aa:	33ff      	adds	r3, #255	; 0xff
 80117ac:	18fb      	adds	r3, r7, r3
 80117ae:	2200      	movs	r2, #0
 80117b0:	701a      	strb	r2, [r3, #0]
    uint8_t* devNonceForKeyDerivation = ( uint8_t* ) &CryptoCtx.NvmCtx->DevNonce;
 80117b2:	4bd2      	ldr	r3, [pc, #840]	; (8011afc <LoRaMacCryptoHandleJoinAccept+0x388>)
 80117b4:	689b      	ldr	r3, [r3, #8]
 80117b6:	2294      	movs	r2, #148	; 0x94
 80117b8:	0052      	lsls	r2, r2, #1
 80117ba:	18ba      	adds	r2, r7, r2
 80117bc:	6013      	str	r3, [r2, #0]

    // Determine decryption key and DevNonce for key derivation
    if( joinReqType == JOIN_REQ )
 80117be:	4bce      	ldr	r3, [pc, #824]	; (8011af8 <LoRaMacCryptoHandleJoinAccept+0x384>)
 80117c0:	2298      	movs	r2, #152	; 0x98
 80117c2:	0052      	lsls	r2, r2, #1
 80117c4:	4694      	mov	ip, r2
 80117c6:	44bc      	add	ip, r7
 80117c8:	4463      	add	r3, ip
 80117ca:	781b      	ldrb	r3, [r3, #0]
 80117cc:	2bff      	cmp	r3, #255	; 0xff
 80117ce:	d10a      	bne.n	80117e6 <LoRaMacCryptoHandleJoinAccept+0x72>
    {
        encryptionKeyID = NWK_KEY;
 80117d0:	2397      	movs	r3, #151	; 0x97
 80117d2:	005b      	lsls	r3, r3, #1
 80117d4:	18fb      	adds	r3, r7, r3
 80117d6:	2201      	movs	r2, #1
 80117d8:	701a      	strb	r2, [r3, #0]
        micComputationOffset = CRYPTO_MIC_COMPUTATION_OFFSET;
 80117da:	232e      	movs	r3, #46	; 0x2e
 80117dc:	33ff      	adds	r3, #255	; 0xff
 80117de:	18fb      	adds	r3, r7, r3
 80117e0:	220c      	movs	r2, #12
 80117e2:	701a      	strb	r2, [r3, #0]
 80117e4:	e023      	b.n	801182e <LoRaMacCryptoHandleJoinAccept+0xba>
    }
    else
    {
        encryptionKeyID = J_S_ENC_KEY;
 80117e6:	2397      	movs	r3, #151	; 0x97
 80117e8:	005b      	lsls	r3, r3, #1
 80117ea:	18fb      	adds	r3, r7, r3
 80117ec:	2203      	movs	r2, #3
 80117ee:	701a      	strb	r2, [r3, #0]

        // If Join-accept is a reply to a rejoin, the RJcount(0 or 1) replaces DevNonce in the key derivation process.
        if( ( joinReqType == REJOIN_REQ_0 ) || ( joinReqType == REJOIN_REQ_2 ) )
 80117f0:	4bc1      	ldr	r3, [pc, #772]	; (8011af8 <LoRaMacCryptoHandleJoinAccept+0x384>)
 80117f2:	2298      	movs	r2, #152	; 0x98
 80117f4:	0052      	lsls	r2, r2, #1
 80117f6:	4694      	mov	ip, r2
 80117f8:	44bc      	add	ip, r7
 80117fa:	4463      	add	r3, ip
 80117fc:	781b      	ldrb	r3, [r3, #0]
 80117fe:	2b00      	cmp	r3, #0
 8011800:	d008      	beq.n	8011814 <LoRaMacCryptoHandleJoinAccept+0xa0>
 8011802:	4bbd      	ldr	r3, [pc, #756]	; (8011af8 <LoRaMacCryptoHandleJoinAccept+0x384>)
 8011804:	2298      	movs	r2, #152	; 0x98
 8011806:	0052      	lsls	r2, r2, #1
 8011808:	4694      	mov	ip, r2
 801180a:	44bc      	add	ip, r7
 801180c:	4463      	add	r3, ip
 801180e:	781b      	ldrb	r3, [r3, #0]
 8011810:	2b02      	cmp	r3, #2
 8011812:	d105      	bne.n	8011820 <LoRaMacCryptoHandleJoinAccept+0xac>
        {
            devNonceForKeyDerivation = ( uint8_t* ) &CryptoCtx.RJcount0;
 8011814:	4bba      	ldr	r3, [pc, #744]	; (8011b00 <LoRaMacCryptoHandleJoinAccept+0x38c>)
 8011816:	2294      	movs	r2, #148	; 0x94
 8011818:	0052      	lsls	r2, r2, #1
 801181a:	18ba      	adds	r2, r7, r2
 801181c:	6013      	str	r3, [r2, #0]
 801181e:	e006      	b.n	801182e <LoRaMacCryptoHandleJoinAccept+0xba>
        }
        else
        {
            devNonceForKeyDerivation = ( uint8_t* ) &CryptoCtx.NvmCtx->RJcount1;
 8011820:	4bb6      	ldr	r3, [pc, #728]	; (8011afc <LoRaMacCryptoHandleJoinAccept+0x388>)
 8011822:	689b      	ldr	r3, [r3, #8]
 8011824:	3328      	adds	r3, #40	; 0x28
 8011826:	2294      	movs	r2, #148	; 0x94
 8011828:	0052      	lsls	r2, r2, #1
 801182a:	18ba      	adds	r2, r7, r2
 801182c:	6013      	str	r3, [r2, #0]
        }
    }

    // Decrypt header, skip MHDR
    uint8_t procBuffer[CRYPTO_MAXMESSAGE_SIZE + CRYPTO_MIC_COMPUTATION_OFFSET];
    memset1( procBuffer, 0, ( macMsg->BufSize + micComputationOffset ) );
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	791b      	ldrb	r3, [r3, #4]
 8011832:	b29a      	uxth	r2, r3
 8011834:	242e      	movs	r4, #46	; 0x2e
 8011836:	34ff      	adds	r4, #255	; 0xff
 8011838:	193b      	adds	r3, r7, r4
 801183a:	781b      	ldrb	r3, [r3, #0]
 801183c:	b29b      	uxth	r3, r3
 801183e:	18d3      	adds	r3, r2, r3
 8011840:	b29a      	uxth	r2, r3
 8011842:	2514      	movs	r5, #20
 8011844:	197b      	adds	r3, r7, r5
 8011846:	2100      	movs	r1, #0
 8011848:	0018      	movs	r0, r3
 801184a:	f003 ff85 	bl	8015758 <memset1>

    if( SecureElementAesEncrypt( macMsg->Buffer + LORAMAC_MHDR_FIELD_SIZE, ( macMsg->BufSize - LORAMAC_MHDR_FIELD_SIZE ), encryptionKeyID, ( procBuffer + micComputationOffset ) ) != SECURE_ELEMENT_SUCCESS )
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	681b      	ldr	r3, [r3, #0]
 8011852:	1c58      	adds	r0, r3, #1
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	791b      	ldrb	r3, [r3, #4]
 8011858:	b29b      	uxth	r3, r3
 801185a:	3b01      	subs	r3, #1
 801185c:	b299      	uxth	r1, r3
 801185e:	193b      	adds	r3, r7, r4
 8011860:	781b      	ldrb	r3, [r3, #0]
 8011862:	197a      	adds	r2, r7, r5
 8011864:	18d4      	adds	r4, r2, r3
 8011866:	2397      	movs	r3, #151	; 0x97
 8011868:	005b      	lsls	r3, r3, #1
 801186a:	18fb      	adds	r3, r7, r3
 801186c:	781a      	ldrb	r2, [r3, #0]
 801186e:	0023      	movs	r3, r4
 8011870:	f7f8 fbbe 	bl	8009ff0 <SecureElementAesEncrypt>
 8011874:	1e03      	subs	r3, r0, #0
 8011876:	d001      	beq.n	801187c <LoRaMacCryptoHandleJoinAccept+0x108>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8011878:	230c      	movs	r3, #12
 801187a:	e1ef      	b.n	8011c5c <LoRaMacCryptoHandleJoinAccept+0x4e8>
    }
    // Copy the result to an offset location to keep space for additional information which have to be added in case of 1.1 and later
    memcpy1( macMsg->Buffer + LORAMAC_MHDR_FIELD_SIZE, ( procBuffer + micComputationOffset ), ( macMsg->BufSize - LORAMAC_MHDR_FIELD_SIZE ) );
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	681b      	ldr	r3, [r3, #0]
 8011880:	1c58      	adds	r0, r3, #1
 8011882:	232e      	movs	r3, #46	; 0x2e
 8011884:	33ff      	adds	r3, #255	; 0xff
 8011886:	18fb      	adds	r3, r7, r3
 8011888:	781b      	ldrb	r3, [r3, #0]
 801188a:	2214      	movs	r2, #20
 801188c:	18ba      	adds	r2, r7, r2
 801188e:	18d1      	adds	r1, r2, r3
 8011890:	687b      	ldr	r3, [r7, #4]
 8011892:	791b      	ldrb	r3, [r3, #4]
 8011894:	b29b      	uxth	r3, r3
 8011896:	3b01      	subs	r3, #1
 8011898:	b29b      	uxth	r3, r3
 801189a:	001a      	movs	r2, r3
 801189c:	f003 ff20 	bl	80156e0 <memcpy1>

    // Parse the message
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	0018      	movs	r0, r3
 80118a4:	f000 fd8e 	bl	80123c4 <LoRaMacParserJoinAccept>
 80118a8:	1e03      	subs	r3, r0, #0
 80118aa:	d001      	beq.n	80118b0 <LoRaMacCryptoHandleJoinAccept+0x13c>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 80118ac:	230d      	movs	r3, #13
 80118ae:	e1d5      	b.n	8011c5c <LoRaMacCryptoHandleJoinAccept+0x4e8>
    }

    // Is it a LoRaWAN 1.1.0 or later ?
    if( macMsg->DLSettings.Bits.OptNeg == 1 )
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	7c1b      	ldrb	r3, [r3, #16]
 80118b4:	227f      	movs	r2, #127	; 0x7f
 80118b6:	4393      	bics	r3, r2
 80118b8:	b2db      	uxtb	r3, r3
 80118ba:	2b00      	cmp	r3, #0
 80118bc:	d008      	beq.n	80118d0 <LoRaMacCryptoHandleJoinAccept+0x15c>
    {
        CryptoCtx.LrWanVersion.Fields.Minor = 1;
 80118be:	4b8f      	ldr	r3, [pc, #572]	; (8011afc <LoRaMacCryptoHandleJoinAccept+0x388>)
 80118c0:	2201      	movs	r2, #1
 80118c2:	709a      	strb	r2, [r3, #2]
        micComputationKeyID = J_S_INT_KEY;
 80118c4:	2330      	movs	r3, #48	; 0x30
 80118c6:	33ff      	adds	r3, #255	; 0xff
 80118c8:	18fb      	adds	r3, r7, r3
 80118ca:	2202      	movs	r2, #2
 80118cc:	701a      	strb	r2, [r3, #0]
 80118ce:	e007      	b.n	80118e0 <LoRaMacCryptoHandleJoinAccept+0x16c>
    }
    else
    {
        CryptoCtx.LrWanVersion.Fields.Minor = 0;
 80118d0:	4b8a      	ldr	r3, [pc, #552]	; (8011afc <LoRaMacCryptoHandleJoinAccept+0x388>)
 80118d2:	2200      	movs	r2, #0
 80118d4:	709a      	strb	r2, [r3, #2]
        micComputationKeyID = NWK_KEY;
 80118d6:	2330      	movs	r3, #48	; 0x30
 80118d8:	33ff      	adds	r3, #255	; 0xff
 80118da:	18fb      	adds	r3, r7, r3
 80118dc:	2201      	movs	r2, #1
 80118de:	701a      	strb	r2, [r3, #0]
    }

    // Verify mic
    if( CryptoCtx.LrWanVersion.Fields.Minor == 0 )
 80118e0:	4b86      	ldr	r3, [pc, #536]	; (8011afc <LoRaMacCryptoHandleJoinAccept+0x388>)
 80118e2:	789b      	ldrb	r3, [r3, #2]
 80118e4:	2b00      	cmp	r3, #0
 80118e6:	d11e      	bne.n	8011926 <LoRaMacCryptoHandleJoinAccept+0x1b2>
    {
        // For legacy mode :
        //   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList | CFListType)
        retval = VerifyCmac( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, macMsg->MIC );
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	6818      	ldr	r0, [r3, #0]
 80118ec:	687b      	ldr	r3, [r7, #4]
 80118ee:	791b      	ldrb	r3, [r3, #4]
 80118f0:	b29b      	uxth	r3, r3
 80118f2:	3b04      	subs	r3, #4
 80118f4:	b299      	uxth	r1, r3
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 80118fa:	2628      	movs	r6, #40	; 0x28
 80118fc:	36ff      	adds	r6, #255	; 0xff
 80118fe:	19bc      	adds	r4, r7, r6
 8011900:	2330      	movs	r3, #48	; 0x30
 8011902:	33ff      	adds	r3, #255	; 0xff
 8011904:	18fb      	adds	r3, r7, r3
 8011906:	781a      	ldrb	r2, [r3, #0]
 8011908:	002b      	movs	r3, r5
 801190a:	f7ff f8d1 	bl	8010ab0 <VerifyCmac>
 801190e:	0003      	movs	r3, r0
 8011910:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8011912:	19bb      	adds	r3, r7, r6
 8011914:	781b      	ldrb	r3, [r3, #0]
 8011916:	2b00      	cmp	r3, #0
 8011918:	d100      	bne.n	801191c <LoRaMacCryptoHandleJoinAccept+0x1a8>
 801191a:	e0b9      	b.n	8011a90 <LoRaMacCryptoHandleJoinAccept+0x31c>
        {
            return retval;
 801191c:	2328      	movs	r3, #40	; 0x28
 801191e:	33ff      	adds	r3, #255	; 0xff
 8011920:	18fb      	adds	r3, r7, r3
 8011922:	781b      	ldrb	r3, [r3, #0]
 8011924:	e19a      	b.n	8011c5c <LoRaMacCryptoHandleJoinAccept+0x4e8>
    {
        // For 1.1 and later:
        //   cmac = aes128_cmac(JSIntKey, JoinReqType | JoinEUI | DevNonce | MHDR | JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList | CFListType)

        // Prepare the msg for integrity check (adding JoinReqType, JoinEUI and DevNonce)
        uint16_t bufItr = 0;
 8011926:	2092      	movs	r0, #146	; 0x92
 8011928:	0040      	lsls	r0, r0, #1
 801192a:	183b      	adds	r3, r7, r0
 801192c:	2200      	movs	r2, #0
 801192e:	801a      	strh	r2, [r3, #0]
        procBuffer[bufItr++] = ( uint8_t ) joinReqType;
 8011930:	183b      	adds	r3, r7, r0
 8011932:	881b      	ldrh	r3, [r3, #0]
 8011934:	183a      	adds	r2, r7, r0
 8011936:	1c59      	adds	r1, r3, #1
 8011938:	8011      	strh	r1, [r2, #0]
 801193a:	0019      	movs	r1, r3
 801193c:	4b71      	ldr	r3, [pc, #452]	; (8011b04 <LoRaMacCryptoHandleJoinAccept+0x390>)
 801193e:	2298      	movs	r2, #152	; 0x98
 8011940:	0052      	lsls	r2, r2, #1
 8011942:	4694      	mov	ip, r2
 8011944:	44bc      	add	ip, r7
 8011946:	4463      	add	r3, ip
 8011948:	4a6b      	ldr	r2, [pc, #428]	; (8011af8 <LoRaMacCryptoHandleJoinAccept+0x384>)
 801194a:	2498      	movs	r4, #152	; 0x98
 801194c:	0064      	lsls	r4, r4, #1
 801194e:	46a4      	mov	ip, r4
 8011950:	44bc      	add	ip, r7
 8011952:	4462      	add	r2, ip
 8011954:	7812      	ldrb	r2, [r2, #0]
 8011956:	545a      	strb	r2, [r3, r1]

        memcpyr( &procBuffer[bufItr], joinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 8011958:	0004      	movs	r4, r0
 801195a:	183b      	adds	r3, r7, r0
 801195c:	881b      	ldrh	r3, [r3, #0]
 801195e:	2614      	movs	r6, #20
 8011960:	19ba      	adds	r2, r7, r6
 8011962:	18d3      	adds	r3, r2, r3
 8011964:	68b9      	ldr	r1, [r7, #8]
 8011966:	2208      	movs	r2, #8
 8011968:	0018      	movs	r0, r3
 801196a:	f003 fed4 	bl	8015716 <memcpyr>
        bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 801196e:	0020      	movs	r0, r4
 8011970:	183b      	adds	r3, r7, r0
 8011972:	183a      	adds	r2, r7, r0
 8011974:	8812      	ldrh	r2, [r2, #0]
 8011976:	3208      	adds	r2, #8
 8011978:	801a      	strh	r2, [r3, #0]

        procBuffer[bufItr++] = CryptoCtx.NvmCtx->DevNonce & 0xFF;
 801197a:	4b60      	ldr	r3, [pc, #384]	; (8011afc <LoRaMacCryptoHandleJoinAccept+0x388>)
 801197c:	689b      	ldr	r3, [r3, #8]
 801197e:	8819      	ldrh	r1, [r3, #0]
 8011980:	183b      	adds	r3, r7, r0
 8011982:	881b      	ldrh	r3, [r3, #0]
 8011984:	0004      	movs	r4, r0
 8011986:	183a      	adds	r2, r7, r0
 8011988:	1c58      	adds	r0, r3, #1
 801198a:	8010      	strh	r0, [r2, #0]
 801198c:	001a      	movs	r2, r3
 801198e:	b2c9      	uxtb	r1, r1
 8011990:	4b5c      	ldr	r3, [pc, #368]	; (8011b04 <LoRaMacCryptoHandleJoinAccept+0x390>)
 8011992:	2098      	movs	r0, #152	; 0x98
 8011994:	0040      	lsls	r0, r0, #1
 8011996:	4684      	mov	ip, r0
 8011998:	44bc      	add	ip, r7
 801199a:	4463      	add	r3, ip
 801199c:	5499      	strb	r1, [r3, r2]
        procBuffer[bufItr++] = ( CryptoCtx.NvmCtx->DevNonce >> 8 ) & 0xFF;
 801199e:	4b57      	ldr	r3, [pc, #348]	; (8011afc <LoRaMacCryptoHandleJoinAccept+0x388>)
 80119a0:	689b      	ldr	r3, [r3, #8]
 80119a2:	881b      	ldrh	r3, [r3, #0]
 80119a4:	0a1b      	lsrs	r3, r3, #8
 80119a6:	b299      	uxth	r1, r3
 80119a8:	193b      	adds	r3, r7, r4
 80119aa:	881b      	ldrh	r3, [r3, #0]
 80119ac:	193a      	adds	r2, r7, r4
 80119ae:	1c58      	adds	r0, r3, #1
 80119b0:	8010      	strh	r0, [r2, #0]
 80119b2:	001a      	movs	r2, r3
 80119b4:	b2c9      	uxtb	r1, r1
 80119b6:	4b53      	ldr	r3, [pc, #332]	; (8011b04 <LoRaMacCryptoHandleJoinAccept+0x390>)
 80119b8:	2098      	movs	r0, #152	; 0x98
 80119ba:	0040      	lsls	r0, r0, #1
 80119bc:	4684      	mov	ip, r0
 80119be:	44bc      	add	ip, r7
 80119c0:	4463      	add	r3, ip
 80119c2:	5499      	strb	r1, [r3, r2]

        procBuffer[bufItr++] = macMsg->MHDR.Value;
 80119c4:	193b      	adds	r3, r7, r4
 80119c6:	881b      	ldrh	r3, [r3, #0]
 80119c8:	193a      	adds	r2, r7, r4
 80119ca:	1c59      	adds	r1, r3, #1
 80119cc:	8011      	strh	r1, [r2, #0]
 80119ce:	001a      	movs	r2, r3
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	7959      	ldrb	r1, [r3, #5]
 80119d4:	4b4b      	ldr	r3, [pc, #300]	; (8011b04 <LoRaMacCryptoHandleJoinAccept+0x390>)
 80119d6:	2098      	movs	r0, #152	; 0x98
 80119d8:	0040      	lsls	r0, r0, #1
 80119da:	4684      	mov	ip, r0
 80119dc:	44bc      	add	ip, r7
 80119de:	4463      	add	r3, ip
 80119e0:	5499      	strb	r1, [r3, r2]

        retval = VerifyCmac( procBuffer, ( macMsg->BufSize + micComputationOffset - LORAMAC_MHDR_FIELD_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, macMsg->MIC );
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	791b      	ldrb	r3, [r3, #4]
 80119e6:	b29a      	uxth	r2, r3
 80119e8:	232e      	movs	r3, #46	; 0x2e
 80119ea:	33ff      	adds	r3, #255	; 0xff
 80119ec:	18fb      	adds	r3, r7, r3
 80119ee:	781b      	ldrb	r3, [r3, #0]
 80119f0:	b29b      	uxth	r3, r3
 80119f2:	18d3      	adds	r3, r2, r3
 80119f4:	b29b      	uxth	r3, r3
 80119f6:	3b05      	subs	r3, #5
 80119f8:	b299      	uxth	r1, r3
 80119fa:	687b      	ldr	r3, [r7, #4]
 80119fc:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 80119fe:	2328      	movs	r3, #40	; 0x28
 8011a00:	33ff      	adds	r3, #255	; 0xff
 8011a02:	18fc      	adds	r4, r7, r3
 8011a04:	2230      	movs	r2, #48	; 0x30
 8011a06:	32ff      	adds	r2, #255	; 0xff
 8011a08:	18bb      	adds	r3, r7, r2
 8011a0a:	781a      	ldrb	r2, [r3, #0]
 8011a0c:	19b8      	adds	r0, r7, r6
 8011a0e:	002b      	movs	r3, r5
 8011a10:	f7ff f84e 	bl	8010ab0 <VerifyCmac>
 8011a14:	0003      	movs	r3, r0
 8011a16:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8011a18:	2328      	movs	r3, #40	; 0x28
 8011a1a:	33ff      	adds	r3, #255	; 0xff
 8011a1c:	18fb      	adds	r3, r7, r3
 8011a1e:	781b      	ldrb	r3, [r3, #0]
 8011a20:	2b00      	cmp	r3, #0
 8011a22:	d004      	beq.n	8011a2e <LoRaMacCryptoHandleJoinAccept+0x2ba>
        {
            return retval;
 8011a24:	2328      	movs	r3, #40	; 0x28
 8011a26:	33ff      	adds	r3, #255	; 0xff
 8011a28:	18fb      	adds	r3, r7, r3
 8011a2a:	781b      	ldrb	r3, [r3, #0]
 8011a2c:	e116      	b.n	8011c5c <LoRaMacCryptoHandleJoinAccept+0x4e8>
        }

        // Check if the JoinNonce is greater as the previous one
        uint32_t currentJoinNonce = 0;
 8011a2e:	2300      	movs	r3, #0
 8011a30:	2290      	movs	r2, #144	; 0x90
 8011a32:	0052      	lsls	r2, r2, #1
 8011a34:	18b9      	adds	r1, r7, r2
 8011a36:	600b      	str	r3, [r1, #0]
        currentJoinNonce = ( uint32_t ) macMsg->JoinNonce[0];
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	799b      	ldrb	r3, [r3, #6]
 8011a3c:	18b9      	adds	r1, r7, r2
 8011a3e:	600b      	str	r3, [r1, #0]
        currentJoinNonce |= ( ( uint32_t ) macMsg->JoinNonce[1] << 8 );
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	79db      	ldrb	r3, [r3, #7]
 8011a44:	021b      	lsls	r3, r3, #8
 8011a46:	0011      	movs	r1, r2
 8011a48:	18ba      	adds	r2, r7, r2
 8011a4a:	6812      	ldr	r2, [r2, #0]
 8011a4c:	4313      	orrs	r3, r2
 8011a4e:	000a      	movs	r2, r1
 8011a50:	18b9      	adds	r1, r7, r2
 8011a52:	600b      	str	r3, [r1, #0]
        currentJoinNonce |= ( ( uint32_t ) macMsg->JoinNonce[2] << 16 );
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	7a1b      	ldrb	r3, [r3, #8]
 8011a58:	041b      	lsls	r3, r3, #16
 8011a5a:	0011      	movs	r1, r2
 8011a5c:	18ba      	adds	r2, r7, r2
 8011a5e:	6812      	ldr	r2, [r2, #0]
 8011a60:	4313      	orrs	r3, r2
 8011a62:	000a      	movs	r2, r1
 8011a64:	18b9      	adds	r1, r7, r2
 8011a66:	600b      	str	r3, [r1, #0]

        if( currentJoinNonce > CryptoCtx.NvmCtx->JoinNonce )
 8011a68:	4b24      	ldr	r3, [pc, #144]	; (8011afc <LoRaMacCryptoHandleJoinAccept+0x388>)
 8011a6a:	689b      	ldr	r3, [r3, #8]
 8011a6c:	685b      	ldr	r3, [r3, #4]
 8011a6e:	18ba      	adds	r2, r7, r2
 8011a70:	6812      	ldr	r2, [r2, #0]
 8011a72:	429a      	cmp	r2, r3
 8011a74:	d90a      	bls.n	8011a8c <LoRaMacCryptoHandleJoinAccept+0x318>
        {
            CryptoCtx.NvmCtx->JoinNonce = currentJoinNonce;
 8011a76:	4b21      	ldr	r3, [pc, #132]	; (8011afc <LoRaMacCryptoHandleJoinAccept+0x388>)
 8011a78:	689b      	ldr	r3, [r3, #8]
 8011a7a:	2290      	movs	r2, #144	; 0x90
 8011a7c:	0052      	lsls	r2, r2, #1
 8011a7e:	18ba      	adds	r2, r7, r2
 8011a80:	6812      	ldr	r2, [r2, #0]
 8011a82:	605a      	str	r2, [r3, #4]
            CryptoCtx.EventCryptoNvmCtxChanged( );
 8011a84:	4b1d      	ldr	r3, [pc, #116]	; (8011afc <LoRaMacCryptoHandleJoinAccept+0x388>)
 8011a86:	68db      	ldr	r3, [r3, #12]
 8011a88:	4798      	blx	r3
 8011a8a:	e001      	b.n	8011a90 <LoRaMacCryptoHandleJoinAccept+0x31c>
        }
        else
        {
            return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 8011a8c:	2303      	movs	r3, #3
 8011a8e:	e0e5      	b.n	8011c5c <LoRaMacCryptoHandleJoinAccept+0x4e8>
        }
    }

    // Derive session keys
    if( CryptoCtx.LrWanVersion.Fields.Minor == 1 )
 8011a90:	4b1a      	ldr	r3, [pc, #104]	; (8011afc <LoRaMacCryptoHandleJoinAccept+0x388>)
 8011a92:	789b      	ldrb	r3, [r3, #2]
 8011a94:	2b01      	cmp	r3, #1
 8011a96:	d167      	bne.n	8011b68 <LoRaMacCryptoHandleJoinAccept+0x3f4>
    {
        retval = DeriveSessionKey11x( F_NWK_S_INT_KEY, macMsg->JoinNonce, joinEUI, devNonceForKeyDerivation );
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	1d99      	adds	r1, r3, #6
 8011a9c:	2528      	movs	r5, #40	; 0x28
 8011a9e:	35ff      	adds	r5, #255	; 0xff
 8011aa0:	197c      	adds	r4, r7, r5
 8011aa2:	2394      	movs	r3, #148	; 0x94
 8011aa4:	005b      	lsls	r3, r3, #1
 8011aa6:	18fb      	adds	r3, r7, r3
 8011aa8:	681b      	ldr	r3, [r3, #0]
 8011aaa:	68ba      	ldr	r2, [r7, #8]
 8011aac:	2004      	movs	r0, #4
 8011aae:	f7ff fbc3 	bl	8011238 <DeriveSessionKey11x>
 8011ab2:	0003      	movs	r3, r0
 8011ab4:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8011ab6:	197b      	adds	r3, r7, r5
 8011ab8:	781b      	ldrb	r3, [r3, #0]
 8011aba:	2b00      	cmp	r3, #0
 8011abc:	d004      	beq.n	8011ac8 <LoRaMacCryptoHandleJoinAccept+0x354>
        {
            return retval;
 8011abe:	2328      	movs	r3, #40	; 0x28
 8011ac0:	33ff      	adds	r3, #255	; 0xff
 8011ac2:	18fb      	adds	r3, r7, r3
 8011ac4:	781b      	ldrb	r3, [r3, #0]
 8011ac6:	e0c9      	b.n	8011c5c <LoRaMacCryptoHandleJoinAccept+0x4e8>
        }

        retval = DeriveSessionKey11x( S_NWK_S_INT_KEY, macMsg->JoinNonce, joinEUI, devNonceForKeyDerivation );
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	1d99      	adds	r1, r3, #6
 8011acc:	2528      	movs	r5, #40	; 0x28
 8011ace:	35ff      	adds	r5, #255	; 0xff
 8011ad0:	197c      	adds	r4, r7, r5
 8011ad2:	2394      	movs	r3, #148	; 0x94
 8011ad4:	005b      	lsls	r3, r3, #1
 8011ad6:	18fb      	adds	r3, r7, r3
 8011ad8:	681b      	ldr	r3, [r3, #0]
 8011ada:	68ba      	ldr	r2, [r7, #8]
 8011adc:	2005      	movs	r0, #5
 8011ade:	f7ff fbab 	bl	8011238 <DeriveSessionKey11x>
 8011ae2:	0003      	movs	r3, r0
 8011ae4:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8011ae6:	197b      	adds	r3, r7, r5
 8011ae8:	781b      	ldrb	r3, [r3, #0]
 8011aea:	2b00      	cmp	r3, #0
 8011aec:	d00c      	beq.n	8011b08 <LoRaMacCryptoHandleJoinAccept+0x394>
        {
            return retval;
 8011aee:	2328      	movs	r3, #40	; 0x28
 8011af0:	33ff      	adds	r3, #255	; 0xff
 8011af2:	18fb      	adds	r3, r7, r3
 8011af4:	781b      	ldrb	r3, [r3, #0]
 8011af6:	e0b1      	b.n	8011c5c <LoRaMacCryptoHandleJoinAccept+0x4e8>
 8011af8:	fffffedf 	.word	0xfffffedf
 8011afc:	20000edc 	.word	0x20000edc
 8011b00:	20000ee0 	.word	0x20000ee0
 8011b04:	fffffee4 	.word	0xfffffee4
        }

        retval = DeriveSessionKey11x( NWK_S_ENC_KEY, macMsg->JoinNonce, joinEUI, devNonceForKeyDerivation );
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	1d99      	adds	r1, r3, #6
 8011b0c:	2528      	movs	r5, #40	; 0x28
 8011b0e:	35ff      	adds	r5, #255	; 0xff
 8011b10:	197c      	adds	r4, r7, r5
 8011b12:	2394      	movs	r3, #148	; 0x94
 8011b14:	005b      	lsls	r3, r3, #1
 8011b16:	18fb      	adds	r3, r7, r3
 8011b18:	681b      	ldr	r3, [r3, #0]
 8011b1a:	68ba      	ldr	r2, [r7, #8]
 8011b1c:	2006      	movs	r0, #6
 8011b1e:	f7ff fb8b 	bl	8011238 <DeriveSessionKey11x>
 8011b22:	0003      	movs	r3, r0
 8011b24:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8011b26:	197b      	adds	r3, r7, r5
 8011b28:	781b      	ldrb	r3, [r3, #0]
 8011b2a:	2b00      	cmp	r3, #0
 8011b2c:	d004      	beq.n	8011b38 <LoRaMacCryptoHandleJoinAccept+0x3c4>
        {
            return retval;
 8011b2e:	2328      	movs	r3, #40	; 0x28
 8011b30:	33ff      	adds	r3, #255	; 0xff
 8011b32:	18fb      	adds	r3, r7, r3
 8011b34:	781b      	ldrb	r3, [r3, #0]
 8011b36:	e091      	b.n	8011c5c <LoRaMacCryptoHandleJoinAccept+0x4e8>
        }

        retval = DeriveSessionKey11x( APP_S_KEY, macMsg->JoinNonce, joinEUI, devNonceForKeyDerivation );
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	1d99      	adds	r1, r3, #6
 8011b3c:	2528      	movs	r5, #40	; 0x28
 8011b3e:	35ff      	adds	r5, #255	; 0xff
 8011b40:	197c      	adds	r4, r7, r5
 8011b42:	2394      	movs	r3, #148	; 0x94
 8011b44:	005b      	lsls	r3, r3, #1
 8011b46:	18fb      	adds	r3, r7, r3
 8011b48:	681b      	ldr	r3, [r3, #0]
 8011b4a:	68ba      	ldr	r2, [r7, #8]
 8011b4c:	2007      	movs	r0, #7
 8011b4e:	f7ff fb73 	bl	8011238 <DeriveSessionKey11x>
 8011b52:	0003      	movs	r3, r0
 8011b54:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8011b56:	197b      	adds	r3, r7, r5
 8011b58:	781b      	ldrb	r3, [r3, #0]
 8011b5a:	2b00      	cmp	r3, #0
 8011b5c:	d064      	beq.n	8011c28 <LoRaMacCryptoHandleJoinAccept+0x4b4>
        {
            return retval;
 8011b5e:	2328      	movs	r3, #40	; 0x28
 8011b60:	33ff      	adds	r3, #255	; 0xff
 8011b62:	18fb      	adds	r3, r7, r3
 8011b64:	781b      	ldrb	r3, [r3, #0]
 8011b66:	e079      	b.n	8011c5c <LoRaMacCryptoHandleJoinAccept+0x4e8>
    }
    else
    {
        // prior LoRaWAN 1.1.0

        retval = DeriveSessionKey10x( APP_S_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* ) &CryptoCtx.NvmCtx->DevNonce );
 8011b68:	687b      	ldr	r3, [r7, #4]
 8011b6a:	1d99      	adds	r1, r3, #6
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	3309      	adds	r3, #9
 8011b70:	001a      	movs	r2, r3
 8011b72:	4b3c      	ldr	r3, [pc, #240]	; (8011c64 <LoRaMacCryptoHandleJoinAccept+0x4f0>)
 8011b74:	689b      	ldr	r3, [r3, #8]
 8011b76:	2528      	movs	r5, #40	; 0x28
 8011b78:	35ff      	adds	r5, #255	; 0xff
 8011b7a:	197c      	adds	r4, r7, r5
 8011b7c:	2007      	movs	r0, #7
 8011b7e:	f7ff fafd 	bl	801117c <DeriveSessionKey10x>
 8011b82:	0003      	movs	r3, r0
 8011b84:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8011b86:	197b      	adds	r3, r7, r5
 8011b88:	781b      	ldrb	r3, [r3, #0]
 8011b8a:	2b00      	cmp	r3, #0
 8011b8c:	d004      	beq.n	8011b98 <LoRaMacCryptoHandleJoinAccept+0x424>
        {
            return retval;
 8011b8e:	2328      	movs	r3, #40	; 0x28
 8011b90:	33ff      	adds	r3, #255	; 0xff
 8011b92:	18fb      	adds	r3, r7, r3
 8011b94:	781b      	ldrb	r3, [r3, #0]
 8011b96:	e061      	b.n	8011c5c <LoRaMacCryptoHandleJoinAccept+0x4e8>
        }

        retval = DeriveSessionKey10x( NWK_S_ENC_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* ) &CryptoCtx.NvmCtx->DevNonce );
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	1d99      	adds	r1, r3, #6
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	3309      	adds	r3, #9
 8011ba0:	001a      	movs	r2, r3
 8011ba2:	4b30      	ldr	r3, [pc, #192]	; (8011c64 <LoRaMacCryptoHandleJoinAccept+0x4f0>)
 8011ba4:	689b      	ldr	r3, [r3, #8]
 8011ba6:	2528      	movs	r5, #40	; 0x28
 8011ba8:	35ff      	adds	r5, #255	; 0xff
 8011baa:	197c      	adds	r4, r7, r5
 8011bac:	2006      	movs	r0, #6
 8011bae:	f7ff fae5 	bl	801117c <DeriveSessionKey10x>
 8011bb2:	0003      	movs	r3, r0
 8011bb4:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8011bb6:	197b      	adds	r3, r7, r5
 8011bb8:	781b      	ldrb	r3, [r3, #0]
 8011bba:	2b00      	cmp	r3, #0
 8011bbc:	d004      	beq.n	8011bc8 <LoRaMacCryptoHandleJoinAccept+0x454>
        {
            return retval;
 8011bbe:	2328      	movs	r3, #40	; 0x28
 8011bc0:	33ff      	adds	r3, #255	; 0xff
 8011bc2:	18fb      	adds	r3, r7, r3
 8011bc4:	781b      	ldrb	r3, [r3, #0]
 8011bc6:	e049      	b.n	8011c5c <LoRaMacCryptoHandleJoinAccept+0x4e8>
        }

        retval = DeriveSessionKey10x( F_NWK_S_INT_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* ) &CryptoCtx.NvmCtx->DevNonce );
 8011bc8:	687b      	ldr	r3, [r7, #4]
 8011bca:	1d99      	adds	r1, r3, #6
 8011bcc:	687b      	ldr	r3, [r7, #4]
 8011bce:	3309      	adds	r3, #9
 8011bd0:	001a      	movs	r2, r3
 8011bd2:	4b24      	ldr	r3, [pc, #144]	; (8011c64 <LoRaMacCryptoHandleJoinAccept+0x4f0>)
 8011bd4:	689b      	ldr	r3, [r3, #8]
 8011bd6:	2528      	movs	r5, #40	; 0x28
 8011bd8:	35ff      	adds	r5, #255	; 0xff
 8011bda:	197c      	adds	r4, r7, r5
 8011bdc:	2004      	movs	r0, #4
 8011bde:	f7ff facd 	bl	801117c <DeriveSessionKey10x>
 8011be2:	0003      	movs	r3, r0
 8011be4:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8011be6:	197b      	adds	r3, r7, r5
 8011be8:	781b      	ldrb	r3, [r3, #0]
 8011bea:	2b00      	cmp	r3, #0
 8011bec:	d004      	beq.n	8011bf8 <LoRaMacCryptoHandleJoinAccept+0x484>
        {
            return retval;
 8011bee:	2328      	movs	r3, #40	; 0x28
 8011bf0:	33ff      	adds	r3, #255	; 0xff
 8011bf2:	18fb      	adds	r3, r7, r3
 8011bf4:	781b      	ldrb	r3, [r3, #0]
 8011bf6:	e031      	b.n	8011c5c <LoRaMacCryptoHandleJoinAccept+0x4e8>
        }

        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* ) &CryptoCtx.NvmCtx->DevNonce );
 8011bf8:	687b      	ldr	r3, [r7, #4]
 8011bfa:	1d99      	adds	r1, r3, #6
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	3309      	adds	r3, #9
 8011c00:	001a      	movs	r2, r3
 8011c02:	4b18      	ldr	r3, [pc, #96]	; (8011c64 <LoRaMacCryptoHandleJoinAccept+0x4f0>)
 8011c04:	689b      	ldr	r3, [r3, #8]
 8011c06:	2528      	movs	r5, #40	; 0x28
 8011c08:	35ff      	adds	r5, #255	; 0xff
 8011c0a:	197c      	adds	r4, r7, r5
 8011c0c:	2005      	movs	r0, #5
 8011c0e:	f7ff fab5 	bl	801117c <DeriveSessionKey10x>
 8011c12:	0003      	movs	r3, r0
 8011c14:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8011c16:	197b      	adds	r3, r7, r5
 8011c18:	781b      	ldrb	r3, [r3, #0]
 8011c1a:	2b00      	cmp	r3, #0
 8011c1c:	d004      	beq.n	8011c28 <LoRaMacCryptoHandleJoinAccept+0x4b4>
        {
            return retval;
 8011c1e:	2328      	movs	r3, #40	; 0x28
 8011c20:	33ff      	adds	r3, #255	; 0xff
 8011c22:	18fb      	adds	r3, r7, r3
 8011c24:	781b      	ldrb	r3, [r3, #0]
 8011c26:	e019      	b.n	8011c5c <LoRaMacCryptoHandleJoinAccept+0x4e8>
        }
    }

    // Join-Accept is successfully processed, reset frame counters
    CryptoCtx.RJcount0 = 0;
 8011c28:	4b0e      	ldr	r3, [pc, #56]	; (8011c64 <LoRaMacCryptoHandleJoinAccept+0x4f0>)
 8011c2a:	2200      	movs	r2, #0
 8011c2c:	809a      	strh	r2, [r3, #4]
    CryptoCtx.NvmCtx->FCntUp = 0;
 8011c2e:	4b0d      	ldr	r3, [pc, #52]	; (8011c64 <LoRaMacCryptoHandleJoinAccept+0x4f0>)
 8011c30:	689b      	ldr	r3, [r3, #8]
 8011c32:	2200      	movs	r2, #0
 8011c34:	609a      	str	r2, [r3, #8]
    CryptoCtx.NvmCtx->FCntDown = FCNT_DOWN_INITAL_VALUE;
 8011c36:	4b0b      	ldr	r3, [pc, #44]	; (8011c64 <LoRaMacCryptoHandleJoinAccept+0x4f0>)
 8011c38:	689b      	ldr	r3, [r3, #8]
 8011c3a:	2201      	movs	r2, #1
 8011c3c:	4252      	negs	r2, r2
 8011c3e:	615a      	str	r2, [r3, #20]
    CryptoCtx.NvmCtx->NFCntDown = FCNT_DOWN_INITAL_VALUE;
 8011c40:	4b08      	ldr	r3, [pc, #32]	; (8011c64 <LoRaMacCryptoHandleJoinAccept+0x4f0>)
 8011c42:	689b      	ldr	r3, [r3, #8]
 8011c44:	2201      	movs	r2, #1
 8011c46:	4252      	negs	r2, r2
 8011c48:	60da      	str	r2, [r3, #12]
    CryptoCtx.NvmCtx->AFCntDown = FCNT_DOWN_INITAL_VALUE;
 8011c4a:	4b06      	ldr	r3, [pc, #24]	; (8011c64 <LoRaMacCryptoHandleJoinAccept+0x4f0>)
 8011c4c:	689b      	ldr	r3, [r3, #8]
 8011c4e:	2201      	movs	r2, #1
 8011c50:	4252      	negs	r2, r2
 8011c52:	611a      	str	r2, [r3, #16]
    CryptoCtx.EventCryptoNvmCtxChanged( );
 8011c54:	4b03      	ldr	r3, [pc, #12]	; (8011c64 <LoRaMacCryptoHandleJoinAccept+0x4f0>)
 8011c56:	68db      	ldr	r3, [r3, #12]
 8011c58:	4798      	blx	r3

    return LORAMAC_CRYPTO_SUCCESS;
 8011c5a:	2300      	movs	r3, #0
}
 8011c5c:	0018      	movs	r0, r3
 8011c5e:	46bd      	mov	sp, r7
 8011c60:	b04d      	add	sp, #308	; 0x134
 8011c62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011c64:	20000edc 	.word	0x20000edc

08011c68 <LoRaMacCryptoSecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 8011c68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011c6a:	b08f      	sub	sp, #60	; 0x3c
 8011c6c:	af06      	add	r7, sp, #24
 8011c6e:	60f8      	str	r0, [r7, #12]
 8011c70:	0008      	movs	r0, r1
 8011c72:	0011      	movs	r1, r2
 8011c74:	607b      	str	r3, [r7, #4]
 8011c76:	230b      	movs	r3, #11
 8011c78:	18fb      	adds	r3, r7, r3
 8011c7a:	1c02      	adds	r2, r0, #0
 8011c7c:	701a      	strb	r2, [r3, #0]
 8011c7e:	230a      	movs	r3, #10
 8011c80:	18fb      	adds	r3, r7, r3
 8011c82:	1c0a      	adds	r2, r1, #0
 8011c84:	701a      	strb	r2, [r3, #0]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8011c86:	231e      	movs	r3, #30
 8011c88:	18fb      	adds	r3, r7, r3
 8011c8a:	2210      	movs	r2, #16
 8011c8c:	701a      	strb	r2, [r3, #0]
    KeyIdentifier_t FRMPayloadDecryptionKeyID = APP_S_KEY;
 8011c8e:	231f      	movs	r3, #31
 8011c90:	18fb      	adds	r3, r7, r3
 8011c92:	2207      	movs	r2, #7
 8011c94:	701a      	strb	r2, [r3, #0]

    if( macMsg == NULL )
 8011c96:	687b      	ldr	r3, [r7, #4]
 8011c98:	2b00      	cmp	r3, #0
 8011c9a:	d101      	bne.n	8011ca0 <LoRaMacCryptoSecureMessage+0x38>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8011c9c:	2307      	movs	r3, #7
 8011c9e:	e0ff      	b.n	8011ea0 <LoRaMacCryptoSecureMessage+0x238>
    }

    if( fCntUp < CryptoCtx.NvmCtx->FCntUp )
 8011ca0:	4b81      	ldr	r3, [pc, #516]	; (8011ea8 <LoRaMacCryptoSecureMessage+0x240>)
 8011ca2:	689b      	ldr	r3, [r3, #8]
 8011ca4:	689b      	ldr	r3, [r3, #8]
 8011ca6:	68fa      	ldr	r2, [r7, #12]
 8011ca8:	429a      	cmp	r2, r3
 8011caa:	d201      	bcs.n	8011cb0 <LoRaMacCryptoSecureMessage+0x48>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT;
 8011cac:	2305      	movs	r3, #5
 8011cae:	e0f7      	b.n	8011ea0 <LoRaMacCryptoSecureMessage+0x238>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	2220      	movs	r2, #32
 8011cb4:	5c9b      	ldrb	r3, [r3, r2]
 8011cb6:	2b00      	cmp	r3, #0
 8011cb8:	d103      	bne.n	8011cc2 <LoRaMacCryptoSecureMessage+0x5a>
    {
        // Use network session key
        FRMPayloadDecryptionKeyID = NWK_S_ENC_KEY;
 8011cba:	231f      	movs	r3, #31
 8011cbc:	18fb      	adds	r3, r7, r3
 8011cbe:	2206      	movs	r2, #6
 8011cc0:	701a      	strb	r2, [r3, #0]
    }

    if( fCntUp > CryptoCtx.NvmCtx->FCntUp )
 8011cc2:	4b79      	ldr	r3, [pc, #484]	; (8011ea8 <LoRaMacCryptoSecureMessage+0x240>)
 8011cc4:	689b      	ldr	r3, [r3, #8]
 8011cc6:	689b      	ldr	r3, [r3, #8]
 8011cc8:	68fa      	ldr	r2, [r7, #12]
 8011cca:	429a      	cmp	r2, r3
 8011ccc:	d93e      	bls.n	8011d4c <LoRaMacCryptoSecureMessage+0xe4>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, FRMPayloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8011cd2:	687b      	ldr	r3, [r7, #4]
 8011cd4:	2228      	movs	r2, #40	; 0x28
 8011cd6:	5c9b      	ldrb	r3, [r3, r2]
 8011cd8:	b299      	uxth	r1, r3
 8011cda:	687b      	ldr	r3, [r7, #4]
 8011cdc:	689d      	ldr	r5, [r3, #8]
 8011cde:	261e      	movs	r6, #30
 8011ce0:	19bc      	adds	r4, r7, r6
 8011ce2:	231f      	movs	r3, #31
 8011ce4:	18fb      	adds	r3, r7, r3
 8011ce6:	781a      	ldrb	r2, [r3, #0]
 8011ce8:	68fb      	ldr	r3, [r7, #12]
 8011cea:	9301      	str	r3, [sp, #4]
 8011cec:	2300      	movs	r3, #0
 8011cee:	9300      	str	r3, [sp, #0]
 8011cf0:	002b      	movs	r3, r5
 8011cf2:	f7fe fd05 	bl	8010700 <PayloadEncrypt>
 8011cf6:	0003      	movs	r3, r0
 8011cf8:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8011cfa:	19bb      	adds	r3, r7, r6
 8011cfc:	781b      	ldrb	r3, [r3, #0]
 8011cfe:	2b00      	cmp	r3, #0
 8011d00:	d003      	beq.n	8011d0a <LoRaMacCryptoSecureMessage+0xa2>
        {
            return retval;
 8011d02:	231e      	movs	r3, #30
 8011d04:	18fb      	adds	r3, r7, r3
 8011d06:	781b      	ldrb	r3, [r3, #0]
 8011d08:	e0ca      	b.n	8011ea0 <LoRaMacCryptoSecureMessage+0x238>
        }

        if( CryptoCtx.LrWanVersion.Fields.Minor == 1 )
 8011d0a:	4b67      	ldr	r3, [pc, #412]	; (8011ea8 <LoRaMacCryptoSecureMessage+0x240>)
 8011d0c:	789b      	ldrb	r3, [r3, #2]
 8011d0e:	2b01      	cmp	r3, #1
 8011d10:	d11c      	bne.n	8011d4c <LoRaMacCryptoSecureMessage+0xe4>
        {
            // Encrypt FOpts
            retval = FOptsEncrypt( macMsg->FHDR.FCtrl.Bits.FOptsLen, macMsg->FHDR.DevAddr, UPLINK, FCNT_UP,  fCntUp, macMsg->FHDR.FOpts );
 8011d12:	687b      	ldr	r3, [r7, #4]
 8011d14:	7b1b      	ldrb	r3, [r3, #12]
 8011d16:	071b      	lsls	r3, r3, #28
 8011d18:	0f1b      	lsrs	r3, r3, #28
 8011d1a:	b2db      	uxtb	r3, r3
 8011d1c:	b298      	uxth	r0, r3
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	6899      	ldr	r1, [r3, #8]
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	3310      	adds	r3, #16
 8011d26:	251e      	movs	r5, #30
 8011d28:	197c      	adds	r4, r7, r5
 8011d2a:	9301      	str	r3, [sp, #4]
 8011d2c:	68fb      	ldr	r3, [r7, #12]
 8011d2e:	9300      	str	r3, [sp, #0]
 8011d30:	2300      	movs	r3, #0
 8011d32:	2200      	movs	r2, #0
 8011d34:	f7fe fde6 	bl	8010904 <FOptsEncrypt>
 8011d38:	0003      	movs	r3, r0
 8011d3a:	7023      	strb	r3, [r4, #0]
            if( retval != LORAMAC_CRYPTO_SUCCESS )
 8011d3c:	197b      	adds	r3, r7, r5
 8011d3e:	781b      	ldrb	r3, [r3, #0]
 8011d40:	2b00      	cmp	r3, #0
 8011d42:	d003      	beq.n	8011d4c <LoRaMacCryptoSecureMessage+0xe4>
            {
                return retval;
 8011d44:	231e      	movs	r3, #30
 8011d46:	18fb      	adds	r3, r7, r3
 8011d48:	781b      	ldrb	r3, [r3, #0]
 8011d4a:	e0a9      	b.n	8011ea0 <LoRaMacCryptoSecureMessage+0x238>
            }
        }
    }
    CryptoCtx.NvmCtx->FCntUp = fCntUp;
 8011d4c:	4b56      	ldr	r3, [pc, #344]	; (8011ea8 <LoRaMacCryptoSecureMessage+0x240>)
 8011d4e:	689b      	ldr	r3, [r3, #8]
 8011d50:	68fa      	ldr	r2, [r7, #12]
 8011d52:	609a      	str	r2, [r3, #8]
    CryptoCtx.EventCryptoNvmCtxChanged( );
 8011d54:	4b54      	ldr	r3, [pc, #336]	; (8011ea8 <LoRaMacCryptoSecureMessage+0x240>)
 8011d56:	68db      	ldr	r3, [r3, #12]
 8011d58:	4798      	blx	r3

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8011d5a:	687b      	ldr	r3, [r7, #4]
 8011d5c:	0018      	movs	r0, r3
 8011d5e:	f000 fdcf 	bl	8012900 <LoRaMacSerializerData>
 8011d62:	1e03      	subs	r3, r0, #0
 8011d64:	d001      	beq.n	8011d6a <LoRaMacCryptoSecureMessage+0x102>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8011d66:	230e      	movs	r3, #14
 8011d68:	e09a      	b.n	8011ea0 <LoRaMacCryptoSecureMessage+0x238>
    }

    // Compute mic
    if( CryptoCtx.LrWanVersion.Fields.Minor == 1 )
 8011d6a:	4b4f      	ldr	r3, [pc, #316]	; (8011ea8 <LoRaMacCryptoSecureMessage+0x240>)
 8011d6c:	789b      	ldrb	r3, [r3, #2]
 8011d6e:	2b01      	cmp	r3, #1
 8011d70:	d16a      	bne.n	8011e48 <LoRaMacCryptoSecureMessage+0x1e0>
    {
        uint32_t cmacS = 0;
 8011d72:	2300      	movs	r3, #0
 8011d74:	61bb      	str	r3, [r7, #24]
        uint32_t cmacF = 0;
 8011d76:	2300      	movs	r3, #0
 8011d78:	617b      	str	r3, [r7, #20]

        // cmacS  = aes128_cmac(SNwkSIntKey, B1 | msg)
        retval = ComputeCmacB1( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), S_NWK_S_INT_KEY, macMsg->FHDR.FCtrl.Bits.Ack, txDr, txCh, macMsg->FHDR.DevAddr, macMsg->FHDR.FCnt, &cmacS );
 8011d7a:	687b      	ldr	r3, [r7, #4]
 8011d7c:	6818      	ldr	r0, [r3, #0]
 8011d7e:	687b      	ldr	r3, [r7, #4]
 8011d80:	791b      	ldrb	r3, [r3, #4]
 8011d82:	b29b      	uxth	r3, r3
 8011d84:	3b04      	subs	r3, #4
 8011d86:	b299      	uxth	r1, r3
 8011d88:	687b      	ldr	r3, [r7, #4]
 8011d8a:	7b1b      	ldrb	r3, [r3, #12]
 8011d8c:	069b      	lsls	r3, r3, #26
 8011d8e:	0fdb      	lsrs	r3, r3, #31
 8011d90:	b2db      	uxtb	r3, r3
 8011d92:	1e5a      	subs	r2, r3, #1
 8011d94:	4193      	sbcs	r3, r2
 8011d96:	b2dd      	uxtb	r5, r3
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	689b      	ldr	r3, [r3, #8]
 8011d9c:	687a      	ldr	r2, [r7, #4]
 8011d9e:	89d2      	ldrh	r2, [r2, #14]
 8011da0:	0016      	movs	r6, r2
 8011da2:	221e      	movs	r2, #30
 8011da4:	18bc      	adds	r4, r7, r2
 8011da6:	2218      	movs	r2, #24
 8011da8:	18ba      	adds	r2, r7, r2
 8011daa:	9204      	str	r2, [sp, #16]
 8011dac:	9603      	str	r6, [sp, #12]
 8011dae:	9302      	str	r3, [sp, #8]
 8011db0:	230a      	movs	r3, #10
 8011db2:	18fb      	adds	r3, r7, r3
 8011db4:	781b      	ldrb	r3, [r3, #0]
 8011db6:	9301      	str	r3, [sp, #4]
 8011db8:	230b      	movs	r3, #11
 8011dba:	18fb      	adds	r3, r7, r3
 8011dbc:	781b      	ldrb	r3, [r3, #0]
 8011dbe:	9300      	str	r3, [sp, #0]
 8011dc0:	002b      	movs	r3, r5
 8011dc2:	2205      	movs	r2, #5
 8011dc4:	f7ff f908 	bl	8010fd8 <ComputeCmacB1>
 8011dc8:	0003      	movs	r3, r0
 8011dca:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8011dcc:	221e      	movs	r2, #30
 8011dce:	18bb      	adds	r3, r7, r2
 8011dd0:	781b      	ldrb	r3, [r3, #0]
 8011dd2:	2b00      	cmp	r3, #0
 8011dd4:	d003      	beq.n	8011dde <LoRaMacCryptoSecureMessage+0x176>
        {
            return retval;
 8011dd6:	231e      	movs	r3, #30
 8011dd8:	18fb      	adds	r3, r7, r3
 8011dda:	781b      	ldrb	r3, [r3, #0]
 8011ddc:	e060      	b.n	8011ea0 <LoRaMacCryptoSecureMessage+0x238>
        }
        //cmacF = aes128_cmac(FNwkSIntKey, B0 | msg)
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), F_NWK_S_INT_KEY, macMsg->FHDR.FCtrl.Bits.Ack, UPLINK, macMsg->FHDR.DevAddr, macMsg->FHDR.FCnt, &cmacF );
 8011dde:	687b      	ldr	r3, [r7, #4]
 8011de0:	6818      	ldr	r0, [r3, #0]
 8011de2:	687b      	ldr	r3, [r7, #4]
 8011de4:	791b      	ldrb	r3, [r3, #4]
 8011de6:	b29b      	uxth	r3, r3
 8011de8:	3b04      	subs	r3, #4
 8011dea:	b299      	uxth	r1, r3
 8011dec:	687b      	ldr	r3, [r7, #4]
 8011dee:	7b1b      	ldrb	r3, [r3, #12]
 8011df0:	069b      	lsls	r3, r3, #26
 8011df2:	0fdb      	lsrs	r3, r3, #31
 8011df4:	b2db      	uxtb	r3, r3
 8011df6:	1e5a      	subs	r2, r3, #1
 8011df8:	4193      	sbcs	r3, r2
 8011dfa:	b2dd      	uxtb	r5, r3
 8011dfc:	687b      	ldr	r3, [r7, #4]
 8011dfe:	689b      	ldr	r3, [r3, #8]
 8011e00:	687a      	ldr	r2, [r7, #4]
 8011e02:	89d2      	ldrh	r2, [r2, #14]
 8011e04:	0016      	movs	r6, r2
 8011e06:	221e      	movs	r2, #30
 8011e08:	18bc      	adds	r4, r7, r2
 8011e0a:	2214      	movs	r2, #20
 8011e0c:	18ba      	adds	r2, r7, r2
 8011e0e:	9203      	str	r2, [sp, #12]
 8011e10:	9602      	str	r6, [sp, #8]
 8011e12:	9301      	str	r3, [sp, #4]
 8011e14:	2300      	movs	r3, #0
 8011e16:	9300      	str	r3, [sp, #0]
 8011e18:	002b      	movs	r3, r5
 8011e1a:	2204      	movs	r2, #4
 8011e1c:	f7fe ff02 	bl	8010c24 <ComputeCmacB0>
 8011e20:	0003      	movs	r3, r0
 8011e22:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8011e24:	221e      	movs	r2, #30
 8011e26:	18bb      	adds	r3, r7, r2
 8011e28:	781b      	ldrb	r3, [r3, #0]
 8011e2a:	2b00      	cmp	r3, #0
 8011e2c:	d003      	beq.n	8011e36 <LoRaMacCryptoSecureMessage+0x1ce>
        {
            return retval;
 8011e2e:	231e      	movs	r3, #30
 8011e30:	18fb      	adds	r3, r7, r3
 8011e32:	781b      	ldrb	r3, [r3, #0]
 8011e34:	e034      	b.n	8011ea0 <LoRaMacCryptoSecureMessage+0x238>
        }
        // MIC = cmacS[0..1] | cmacF[0..1]
        macMsg->MIC = ( ( cmacF << 16 ) & 0xFFFF0000 ) | ( cmacS & 0x0000FFFF );
 8011e36:	697b      	ldr	r3, [r7, #20]
 8011e38:	041a      	lsls	r2, r3, #16
 8011e3a:	69bb      	ldr	r3, [r7, #24]
 8011e3c:	041b      	lsls	r3, r3, #16
 8011e3e:	0c1b      	lsrs	r3, r3, #16
 8011e40:	431a      	orrs	r2, r3
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	62da      	str	r2, [r3, #44]	; 0x2c
 8011e46:	e022      	b.n	8011e8e <LoRaMacCryptoSecureMessage+0x226>
    }
    else
    {
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), NWK_S_ENC_KEY, false, UPLINK, macMsg->FHDR.DevAddr, macMsg->FHDR.FCnt, &macMsg->MIC );
 8011e48:	687b      	ldr	r3, [r7, #4]
 8011e4a:	6818      	ldr	r0, [r3, #0]
 8011e4c:	687b      	ldr	r3, [r7, #4]
 8011e4e:	791b      	ldrb	r3, [r3, #4]
 8011e50:	b29b      	uxth	r3, r3
 8011e52:	3b04      	subs	r3, #4
 8011e54:	b299      	uxth	r1, r3
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	689b      	ldr	r3, [r3, #8]
 8011e5a:	687a      	ldr	r2, [r7, #4]
 8011e5c:	89d2      	ldrh	r2, [r2, #14]
 8011e5e:	0015      	movs	r5, r2
 8011e60:	687a      	ldr	r2, [r7, #4]
 8011e62:	322c      	adds	r2, #44	; 0x2c
 8011e64:	261e      	movs	r6, #30
 8011e66:	19bc      	adds	r4, r7, r6
 8011e68:	9203      	str	r2, [sp, #12]
 8011e6a:	9502      	str	r5, [sp, #8]
 8011e6c:	9301      	str	r3, [sp, #4]
 8011e6e:	2300      	movs	r3, #0
 8011e70:	9300      	str	r3, [sp, #0]
 8011e72:	2300      	movs	r3, #0
 8011e74:	2206      	movs	r2, #6
 8011e76:	f7fe fed5 	bl	8010c24 <ComputeCmacB0>
 8011e7a:	0003      	movs	r3, r0
 8011e7c:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8011e7e:	19bb      	adds	r3, r7, r6
 8011e80:	781b      	ldrb	r3, [r3, #0]
 8011e82:	2b00      	cmp	r3, #0
 8011e84:	d003      	beq.n	8011e8e <LoRaMacCryptoSecureMessage+0x226>
        {
            return retval;
 8011e86:	231e      	movs	r3, #30
 8011e88:	18fb      	adds	r3, r7, r3
 8011e8a:	781b      	ldrb	r3, [r3, #0]
 8011e8c:	e008      	b.n	8011ea0 <LoRaMacCryptoSecureMessage+0x238>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8011e8e:	687b      	ldr	r3, [r7, #4]
 8011e90:	0018      	movs	r0, r3
 8011e92:	f000 fd35 	bl	8012900 <LoRaMacSerializerData>
 8011e96:	1e03      	subs	r3, r0, #0
 8011e98:	d001      	beq.n	8011e9e <LoRaMacCryptoSecureMessage+0x236>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8011e9a:	230e      	movs	r3, #14
 8011e9c:	e000      	b.n	8011ea0 <LoRaMacCryptoSecureMessage+0x238>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8011e9e:	2300      	movs	r3, #0
}
 8011ea0:	0018      	movs	r0, r3
 8011ea2:	46bd      	mov	sp, r7
 8011ea4:	b009      	add	sp, #36	; 0x24
 8011ea6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011ea8:	20000edc 	.word	0x20000edc

08011eac <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 8011eac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011eae:	b08b      	sub	sp, #44	; 0x2c
 8011eb0:	af04      	add	r7, sp, #16
 8011eb2:	60b9      	str	r1, [r7, #8]
 8011eb4:	0011      	movs	r1, r2
 8011eb6:	607b      	str	r3, [r7, #4]
 8011eb8:	230f      	movs	r3, #15
 8011eba:	18fb      	adds	r3, r7, r3
 8011ebc:	1c02      	adds	r2, r0, #0
 8011ebe:	701a      	strb	r2, [r3, #0]
 8011ec0:	230e      	movs	r3, #14
 8011ec2:	18fb      	adds	r3, r7, r3
 8011ec4:	1c0a      	adds	r2, r1, #0
 8011ec6:	701a      	strb	r2, [r3, #0]
    if( macMsg == 0 )
 8011ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011eca:	2b00      	cmp	r3, #0
 8011ecc:	d101      	bne.n	8011ed2 <LoRaMacCryptoUnsecureMessage+0x26>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8011ece:	2307      	movs	r3, #7
 8011ed0:	e0cf      	b.n	8012072 <LoRaMacCryptoUnsecureMessage+0x1c6>
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 8011ed2:	687a      	ldr	r2, [r7, #4]
 8011ed4:	230e      	movs	r3, #14
 8011ed6:	18fb      	adds	r3, r7, r3
 8011ed8:	781b      	ldrb	r3, [r3, #0]
 8011eda:	0011      	movs	r1, r2
 8011edc:	0018      	movs	r0, r3
 8011ede:	f7ff fa65 	bl	80113ac <CheckFCntDown>
 8011ee2:	0003      	movs	r3, r0
 8011ee4:	001a      	movs	r2, r3
 8011ee6:	2301      	movs	r3, #1
 8011ee8:	4053      	eors	r3, r2
 8011eea:	b2db      	uxtb	r3, r3
 8011eec:	2b00      	cmp	r3, #0
 8011eee:	d001      	beq.n	8011ef4 <LoRaMacCryptoUnsecureMessage+0x48>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT;
 8011ef0:	2305      	movs	r3, #5
 8011ef2:	e0be      	b.n	8012072 <LoRaMacCryptoUnsecureMessage+0x1c6>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8011ef4:	2315      	movs	r3, #21
 8011ef6:	18fb      	adds	r3, r7, r3
 8011ef8:	2210      	movs	r2, #16
 8011efa:	701a      	strb	r2, [r3, #0]
    KeyIdentifier_t FRMPayloadDecryptionKeyID = APP_S_KEY;
 8011efc:	2317      	movs	r3, #23
 8011efe:	18fb      	adds	r3, r7, r3
 8011f00:	2207      	movs	r2, #7
 8011f02:	701a      	strb	r2, [r3, #0]
    KeyIdentifier_t micComputationKeyID = S_NWK_S_INT_KEY;
 8011f04:	2314      	movs	r3, #20
 8011f06:	18fb      	adds	r3, r7, r3
 8011f08:	2205      	movs	r2, #5
 8011f0a:	701a      	strb	r2, [r3, #0]
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8011f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f0e:	0018      	movs	r0, r3
 8011f10:	f000 fb49 	bl	80125a6 <LoRaMacParserData>
 8011f14:	1e03      	subs	r3, r0, #0
 8011f16:	d001      	beq.n	8011f1c <LoRaMacCryptoUnsecureMessage+0x70>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8011f18:	230d      	movs	r3, #13
 8011f1a:	e0aa      	b.n	8012072 <LoRaMacCryptoUnsecureMessage+0x1c6>
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 8011f1c:	2515      	movs	r5, #21
 8011f1e:	197c      	adds	r4, r7, r5
 8011f20:	2310      	movs	r3, #16
 8011f22:	18fa      	adds	r2, r7, r3
 8011f24:	230f      	movs	r3, #15
 8011f26:	18fb      	adds	r3, r7, r3
 8011f28:	781b      	ldrb	r3, [r3, #0]
 8011f2a:	0011      	movs	r1, r2
 8011f2c:	0018      	movs	r0, r3
 8011f2e:	f7ff f8f3 	bl	8011118 <GetKeyAddrItem>
 8011f32:	0003      	movs	r3, r0
 8011f34:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8011f36:	197b      	adds	r3, r7, r5
 8011f38:	781b      	ldrb	r3, [r3, #0]
 8011f3a:	2b00      	cmp	r3, #0
 8011f3c:	d003      	beq.n	8011f46 <LoRaMacCryptoUnsecureMessage+0x9a>
    {
        return retval;
 8011f3e:	2315      	movs	r3, #21
 8011f40:	18fb      	adds	r3, r7, r3
 8011f42:	781b      	ldrb	r3, [r3, #0]
 8011f44:	e095      	b.n	8012072 <LoRaMacCryptoUnsecureMessage+0x1c6>
    }
    FRMPayloadDecryptionKeyID = curItem->AppSkey;
 8011f46:	693a      	ldr	r2, [r7, #16]
 8011f48:	2317      	movs	r3, #23
 8011f4a:	18fb      	adds	r3, r7, r3
 8011f4c:	7852      	ldrb	r2, [r2, #1]
 8011f4e:	701a      	strb	r2, [r3, #0]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 8011f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f52:	689b      	ldr	r3, [r3, #8]
 8011f54:	68ba      	ldr	r2, [r7, #8]
 8011f56:	429a      	cmp	r2, r3
 8011f58:	d001      	beq.n	8011f5e <LoRaMacCryptoUnsecureMessage+0xb2>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 8011f5a:	2302      	movs	r3, #2
 8011f5c:	e089      	b.n	8012072 <LoRaMacCryptoUnsecureMessage+0x1c6>
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 8011f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f60:	7b1b      	ldrb	r3, [r3, #12]
 8011f62:	069b      	lsls	r3, r3, #26
 8011f64:	0fdb      	lsrs	r3, r3, #31
 8011f66:	b2db      	uxtb	r3, r3
 8011f68:	001a      	movs	r2, r3
 8011f6a:	2316      	movs	r3, #22
 8011f6c:	18fb      	adds	r3, r7, r3
 8011f6e:	1e51      	subs	r1, r2, #1
 8011f70:	418a      	sbcs	r2, r1
 8011f72:	701a      	strb	r2, [r3, #0]
    if( CryptoCtx.LrWanVersion.Fields.Minor == 0 )
 8011f74:	4b41      	ldr	r3, [pc, #260]	; (801207c <LoRaMacCryptoUnsecureMessage+0x1d0>)
 8011f76:	789b      	ldrb	r3, [r3, #2]
 8011f78:	2b00      	cmp	r3, #0
 8011f7a:	d103      	bne.n	8011f84 <LoRaMacCryptoUnsecureMessage+0xd8>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 8011f7c:	2316      	movs	r3, #22
 8011f7e:	18fb      	adds	r3, r7, r3
 8011f80:	2200      	movs	r2, #0
 8011f82:	701a      	strb	r2, [r3, #0]
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 8011f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f86:	6818      	ldr	r0, [r3, #0]
 8011f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f8a:	791b      	ldrb	r3, [r3, #4]
 8011f8c:	b29b      	uxth	r3, r3
 8011f8e:	3b04      	subs	r3, #4
 8011f90:	b299      	uxth	r1, r3
 8011f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f96:	2615      	movs	r6, #21
 8011f98:	19bc      	adds	r4, r7, r6
 8011f9a:	2216      	movs	r2, #22
 8011f9c:	18ba      	adds	r2, r7, r2
 8011f9e:	7815      	ldrb	r5, [r2, #0]
 8011fa0:	2214      	movs	r2, #20
 8011fa2:	18ba      	adds	r2, r7, r2
 8011fa4:	7812      	ldrb	r2, [r2, #0]
 8011fa6:	9303      	str	r3, [sp, #12]
 8011fa8:	687b      	ldr	r3, [r7, #4]
 8011faa:	9302      	str	r3, [sp, #8]
 8011fac:	68bb      	ldr	r3, [r7, #8]
 8011fae:	9301      	str	r3, [sp, #4]
 8011fb0:	2301      	movs	r3, #1
 8011fb2:	9300      	str	r3, [sp, #0]
 8011fb4:	002b      	movs	r3, r5
 8011fb6:	f7fe fed1 	bl	8010d5c <VerifyCmacB0>
 8011fba:	0003      	movs	r3, r0
 8011fbc:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8011fbe:	19bb      	adds	r3, r7, r6
 8011fc0:	781b      	ldrb	r3, [r3, #0]
 8011fc2:	2b00      	cmp	r3, #0
 8011fc4:	d003      	beq.n	8011fce <LoRaMacCryptoUnsecureMessage+0x122>
    {
        return retval;
 8011fc6:	2315      	movs	r3, #21
 8011fc8:	18fb      	adds	r3, r7, r3
 8011fca:	781b      	ldrb	r3, [r3, #0]
 8011fcc:	e051      	b.n	8012072 <LoRaMacCryptoUnsecureMessage+0x1c6>
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 8011fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fd0:	2220      	movs	r2, #32
 8011fd2:	5c9b      	ldrb	r3, [r3, r2]
 8011fd4:	2b00      	cmp	r3, #0
 8011fd6:	d103      	bne.n	8011fe0 <LoRaMacCryptoUnsecureMessage+0x134>
    {
        // Use network session encryption key
        FRMPayloadDecryptionKeyID = NWK_S_ENC_KEY;
 8011fd8:	2317      	movs	r3, #23
 8011fda:	18fb      	adds	r3, r7, r3
 8011fdc:	2206      	movs	r2, #6
 8011fde:	701a      	strb	r2, [r3, #0]
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, FRMPayloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 8011fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fe2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8011fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fe6:	2228      	movs	r2, #40	; 0x28
 8011fe8:	5c9b      	ldrb	r3, [r3, r2]
 8011fea:	b299      	uxth	r1, r3
 8011fec:	2615      	movs	r6, #21
 8011fee:	19bc      	adds	r4, r7, r6
 8011ff0:	68bd      	ldr	r5, [r7, #8]
 8011ff2:	2317      	movs	r3, #23
 8011ff4:	18fb      	adds	r3, r7, r3
 8011ff6:	781a      	ldrb	r2, [r3, #0]
 8011ff8:	687b      	ldr	r3, [r7, #4]
 8011ffa:	9301      	str	r3, [sp, #4]
 8011ffc:	2301      	movs	r3, #1
 8011ffe:	9300      	str	r3, [sp, #0]
 8012000:	002b      	movs	r3, r5
 8012002:	f7fe fb7d 	bl	8010700 <PayloadEncrypt>
 8012006:	0003      	movs	r3, r0
 8012008:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 801200a:	19bb      	adds	r3, r7, r6
 801200c:	781b      	ldrb	r3, [r3, #0]
 801200e:	2b00      	cmp	r3, #0
 8012010:	d003      	beq.n	801201a <LoRaMacCryptoUnsecureMessage+0x16e>
    {
        return retval;
 8012012:	2315      	movs	r3, #21
 8012014:	18fb      	adds	r3, r7, r3
 8012016:	781b      	ldrb	r3, [r3, #0]
 8012018:	e02b      	b.n	8012072 <LoRaMacCryptoUnsecureMessage+0x1c6>
    }

    if( CryptoCtx.LrWanVersion.Fields.Minor == 1 )
 801201a:	4b18      	ldr	r3, [pc, #96]	; (801207c <LoRaMacCryptoUnsecureMessage+0x1d0>)
 801201c:	789b      	ldrb	r3, [r3, #2]
 801201e:	2b01      	cmp	r3, #1
 8012020:	d11e      	bne.n	8012060 <LoRaMacCryptoUnsecureMessage+0x1b4>
    {
        // Decrypt FOpts
        retval = FOptsEncrypt( macMsg->FHDR.FCtrl.Bits.FOptsLen, address, DOWNLINK, fCntID, fCntDown, macMsg->FHDR.FOpts );
 8012022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012024:	7b1b      	ldrb	r3, [r3, #12]
 8012026:	071b      	lsls	r3, r3, #28
 8012028:	0f1b      	lsrs	r3, r3, #28
 801202a:	b2db      	uxtb	r3, r3
 801202c:	b298      	uxth	r0, r3
 801202e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012030:	3310      	adds	r3, #16
 8012032:	2515      	movs	r5, #21
 8012034:	197c      	adds	r4, r7, r5
 8012036:	220e      	movs	r2, #14
 8012038:	18ba      	adds	r2, r7, r2
 801203a:	7812      	ldrb	r2, [r2, #0]
 801203c:	68b9      	ldr	r1, [r7, #8]
 801203e:	9301      	str	r3, [sp, #4]
 8012040:	687b      	ldr	r3, [r7, #4]
 8012042:	9300      	str	r3, [sp, #0]
 8012044:	0013      	movs	r3, r2
 8012046:	2201      	movs	r2, #1
 8012048:	f7fe fc5c 	bl	8010904 <FOptsEncrypt>
 801204c:	0003      	movs	r3, r0
 801204e:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8012050:	197b      	adds	r3, r7, r5
 8012052:	781b      	ldrb	r3, [r3, #0]
 8012054:	2b00      	cmp	r3, #0
 8012056:	d003      	beq.n	8012060 <LoRaMacCryptoUnsecureMessage+0x1b4>
        {
            return retval;
 8012058:	2315      	movs	r3, #21
 801205a:	18fb      	adds	r3, r7, r3
 801205c:	781b      	ldrb	r3, [r3, #0]
 801205e:	e008      	b.n	8012072 <LoRaMacCryptoUnsecureMessage+0x1c6>
        }
    }

    UpdateFCntDown( fCntID, fCntDown );
 8012060:	687a      	ldr	r2, [r7, #4]
 8012062:	230e      	movs	r3, #14
 8012064:	18fb      	adds	r3, r7, r3
 8012066:	781b      	ldrb	r3, [r3, #0]
 8012068:	0011      	movs	r1, r2
 801206a:	0018      	movs	r0, r3
 801206c:	f7ff f9fc 	bl	8011468 <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 8012070:	2300      	movs	r3, #0
}
 8012072:	0018      	movs	r0, r3
 8012074:	46bd      	mov	sp, r7
 8012076:	b007      	add	sp, #28
 8012078:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801207a:	46c0      	nop			; (mov r8, r8)
 801207c:	20000edc 	.word	0x20000edc

08012080 <NvmCtxChanged>:

/*
 * \brief Wrapper function for the NvmCtx
 */
static void NvmCtxChanged( void )
{
 8012080:	b580      	push	{r7, lr}
 8012082:	af00      	add	r7, sp, #0
    if( FCntHandlerNvmCtxChanged != NULL )
 8012084:	4b04      	ldr	r3, [pc, #16]	; (8012098 <NvmCtxChanged+0x18>)
 8012086:	681b      	ldr	r3, [r3, #0]
 8012088:	2b00      	cmp	r3, #0
 801208a:	d002      	beq.n	8012092 <NvmCtxChanged+0x12>
    {
        FCntHandlerNvmCtxChanged( );
 801208c:	4b02      	ldr	r3, [pc, #8]	; (8012098 <NvmCtxChanged+0x18>)
 801208e:	681b      	ldr	r3, [r3, #0]
 8012090:	4798      	blx	r3
    }
}
 8012092:	46c0      	nop			; (mov r8, r8)
 8012094:	46bd      	mov	sp, r7
 8012096:	bd80      	pop	{r7, pc}
 8012098:	20000f3c 	.word	0x20000f3c

0801209c <LoRaMacFCntHandlerInit>:


LoRaMacFCntHandlerStatus_t LoRaMacFCntHandlerInit( EventNvmCtxChanged fCntHandlerNvmCtxChanged )
{
 801209c:	b580      	push	{r7, lr}
 801209e:	b082      	sub	sp, #8
 80120a0:	af00      	add	r7, sp, #0
 80120a2:	6078      	str	r0, [r7, #4]
    // Initialize with default
    LoRaMacResetFCnts( );
 80120a4:	f000 f93e 	bl	8012324 <LoRaMacResetFCnts>

    // Assign callback
    FCntHandlerNvmCtxChanged = fCntHandlerNvmCtxChanged;
 80120a8:	4b03      	ldr	r3, [pc, #12]	; (80120b8 <LoRaMacFCntHandlerInit+0x1c>)
 80120aa:	687a      	ldr	r2, [r7, #4]
 80120ac:	601a      	str	r2, [r3, #0]

    return LORAMAC_FCNT_HANDLER_SUCCESS;
 80120ae:	2300      	movs	r3, #0
}
 80120b0:	0018      	movs	r0, r3
 80120b2:	46bd      	mov	sp, r7
 80120b4:	b002      	add	sp, #8
 80120b6:	bd80      	pop	{r7, pc}
 80120b8:	20000f3c 	.word	0x20000f3c

080120bc <LoRaMacFCntHandlerRestoreNvmCtx>:

LoRaMacFCntHandlerStatus_t LoRaMacFCntHandlerRestoreNvmCtx( void* fCntHandlerNvmCtx )
{
 80120bc:	b580      	push	{r7, lr}
 80120be:	b082      	sub	sp, #8
 80120c0:	af00      	add	r7, sp, #0
 80120c2:	6078      	str	r0, [r7, #4]
    // Restore module context
    if( fCntHandlerNvmCtx != NULL )
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	2b00      	cmp	r3, #0
 80120c8:	d007      	beq.n	80120da <LoRaMacFCntHandlerRestoreNvmCtx+0x1e>
    {
        memcpy1( ( uint8_t* ) &FCntHandlerNvmCtx, ( uint8_t* ) fCntHandlerNvmCtx, sizeof( FCntHandlerNvmCtx ) );
 80120ca:	6879      	ldr	r1, [r7, #4]
 80120cc:	4b05      	ldr	r3, [pc, #20]	; (80120e4 <LoRaMacFCntHandlerRestoreNvmCtx+0x28>)
 80120ce:	2220      	movs	r2, #32
 80120d0:	0018      	movs	r0, r3
 80120d2:	f003 fb05 	bl	80156e0 <memcpy1>
        return LORAMAC_FCNT_HANDLER_SUCCESS;
 80120d6:	2300      	movs	r3, #0
 80120d8:	e000      	b.n	80120dc <LoRaMacFCntHandlerRestoreNvmCtx+0x20>
    }
    else
    {
        return LORAMAC_FCNT_HANDLER_ERROR_NPE;
 80120da:	2304      	movs	r3, #4
    }
}
 80120dc:	0018      	movs	r0, r3
 80120de:	46bd      	mov	sp, r7
 80120e0:	b002      	add	sp, #8
 80120e2:	bd80      	pop	{r7, pc}
 80120e4:	20000f1c 	.word	0x20000f1c

080120e8 <LoRaMacFCntHandlerGetNvmCtx>:

void* LoRaMacFCntHandlerGetNvmCtx( size_t* fCntHandlerNvmCtxSize )
{
 80120e8:	b580      	push	{r7, lr}
 80120ea:	b082      	sub	sp, #8
 80120ec:	af00      	add	r7, sp, #0
 80120ee:	6078      	str	r0, [r7, #4]
    *fCntHandlerNvmCtxSize = sizeof( FCntHandlerNvmCtx );
 80120f0:	687b      	ldr	r3, [r7, #4]
 80120f2:	2220      	movs	r2, #32
 80120f4:	601a      	str	r2, [r3, #0]
    return &FCntHandlerNvmCtx;
 80120f6:	4b02      	ldr	r3, [pc, #8]	; (8012100 <LoRaMacFCntHandlerGetNvmCtx+0x18>)
}
 80120f8:	0018      	movs	r0, r3
 80120fa:	46bd      	mov	sp, r7
 80120fc:	b002      	add	sp, #8
 80120fe:	bd80      	pop	{r7, pc}
 8012100:	20000f1c 	.word	0x20000f1c

08012104 <LoRaMacGetFCntDown>:

LoRaMacFCntHandlerStatus_t LoRaMacGetFCntDown( AddressIdentifier_t addrID, FType_t fType, LoRaMacMessageData_t* macMsg, Version_t lrWanVersion,
                                               uint16_t maxFCntGap, FCntIdentifier_t* fCntID, uint32_t* currentDown )
{
 8012104:	b580      	push	{r7, lr}
 8012106:	b086      	sub	sp, #24
 8012108:	af00      	add	r7, sp, #0
 801210a:	60ba      	str	r2, [r7, #8]
 801210c:	607b      	str	r3, [r7, #4]
 801210e:	230f      	movs	r3, #15
 8012110:	18fb      	adds	r3, r7, r3
 8012112:	1c02      	adds	r2, r0, #0
 8012114:	701a      	strb	r2, [r3, #0]
 8012116:	230e      	movs	r3, #14
 8012118:	18fb      	adds	r3, r7, r3
 801211a:	1c0a      	adds	r2, r1, #0
 801211c:	701a      	strb	r2, [r3, #0]
    uint32_t previousDown = 0;
 801211e:	2300      	movs	r3, #0
 8012120:	617b      	str	r3, [r7, #20]
    int32_t fCntDiff = 0;
 8012122:	2300      	movs	r3, #0
 8012124:	613b      	str	r3, [r7, #16]

    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 8012126:	68bb      	ldr	r3, [r7, #8]
 8012128:	2b00      	cmp	r3, #0
 801212a:	d005      	beq.n	8012138 <LoRaMacGetFCntDown+0x34>
 801212c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801212e:	2b00      	cmp	r3, #0
 8012130:	d002      	beq.n	8012138 <LoRaMacGetFCntDown+0x34>
 8012132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012134:	2b00      	cmp	r3, #0
 8012136:	d101      	bne.n	801213c <LoRaMacGetFCntDown+0x38>
        ( currentDown == NULL ) )
    {
        return LORAMAC_FCNT_HANDLER_ERROR_NPE;
 8012138:	2304      	movs	r3, #4
 801213a:	e088      	b.n	801224e <LoRaMacGetFCntDown+0x14a>
    }

    // Determine the frame counter identifier and choose counter from FCntList
    switch( addrID )
 801213c:	230f      	movs	r3, #15
 801213e:	18fb      	adds	r3, r7, r3
 8012140:	781b      	ldrb	r3, [r3, #0]
 8012142:	2b04      	cmp	r3, #4
 8012144:	d843      	bhi.n	80121ce <LoRaMacGetFCntDown+0xca>
 8012146:	009a      	lsls	r2, r3, #2
 8012148:	4b43      	ldr	r3, [pc, #268]	; (8012258 <LoRaMacGetFCntDown+0x154>)
 801214a:	18d3      	adds	r3, r2, r3
 801214c:	681b      	ldr	r3, [r3, #0]
 801214e:	469f      	mov	pc, r3
    {
        case UNICAST_DEV_ADDR:
            if( lrWanVersion.Fields.Minor == 1 )
 8012150:	1d3b      	adds	r3, r7, #4
 8012152:	789b      	ldrb	r3, [r3, #2]
 8012154:	2b01      	cmp	r3, #1
 8012156:	d117      	bne.n	8012188 <LoRaMacGetFCntDown+0x84>
            {
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 8012158:	230e      	movs	r3, #14
 801215a:	18fb      	adds	r3, r7, r3
 801215c:	781b      	ldrb	r3, [r3, #0]
 801215e:	2b00      	cmp	r3, #0
 8012160:	d004      	beq.n	801216c <LoRaMacGetFCntDown+0x68>
 8012162:	230e      	movs	r3, #14
 8012164:	18fb      	adds	r3, r7, r3
 8012166:	781b      	ldrb	r3, [r3, #0]
 8012168:	2b03      	cmp	r3, #3
 801216a:	d106      	bne.n	801217a <LoRaMacGetFCntDown+0x76>
                {
                    *fCntID = A_FCNT_DOWN;
 801216c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801216e:	2202      	movs	r2, #2
 8012170:	701a      	strb	r2, [r3, #0]
                    previousDown = FCntHandlerNvmCtx.FCntList.AFCntDown;
 8012172:	4b3a      	ldr	r3, [pc, #232]	; (801225c <LoRaMacGetFCntDown+0x158>)
 8012174:	689b      	ldr	r3, [r3, #8]
 8012176:	617b      	str	r3, [r7, #20]
            else
            { // For LoRaWAN 1.0.X
                *fCntID = FCNT_DOWN;
                previousDown = FCntHandlerNvmCtx.FCntList.FCntDown;
            }
            break;
 8012178:	e02b      	b.n	80121d2 <LoRaMacGetFCntDown+0xce>
                    *fCntID = N_FCNT_DOWN;
 801217a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801217c:	2201      	movs	r2, #1
 801217e:	701a      	strb	r2, [r3, #0]
                    previousDown = FCntHandlerNvmCtx.FCntList.NFCntDown;
 8012180:	4b36      	ldr	r3, [pc, #216]	; (801225c <LoRaMacGetFCntDown+0x158>)
 8012182:	685b      	ldr	r3, [r3, #4]
 8012184:	617b      	str	r3, [r7, #20]
            break;
 8012186:	e024      	b.n	80121d2 <LoRaMacGetFCntDown+0xce>
                *fCntID = FCNT_DOWN;
 8012188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801218a:	2203      	movs	r2, #3
 801218c:	701a      	strb	r2, [r3, #0]
                previousDown = FCntHandlerNvmCtx.FCntList.FCntDown;
 801218e:	4b33      	ldr	r3, [pc, #204]	; (801225c <LoRaMacGetFCntDown+0x158>)
 8012190:	68db      	ldr	r3, [r3, #12]
 8012192:	617b      	str	r3, [r7, #20]
            break;
 8012194:	e01d      	b.n	80121d2 <LoRaMacGetFCntDown+0xce>
        case MULTICAST_0_ADDR:
            *fCntID = MC_FCNT_DOWN_0;
 8012196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012198:	2204      	movs	r2, #4
 801219a:	701a      	strb	r2, [r3, #0]
            previousDown = FCntHandlerNvmCtx.FCntList.McFCntDown0;
 801219c:	4b2f      	ldr	r3, [pc, #188]	; (801225c <LoRaMacGetFCntDown+0x158>)
 801219e:	691b      	ldr	r3, [r3, #16]
 80121a0:	617b      	str	r3, [r7, #20]
            break;
 80121a2:	e016      	b.n	80121d2 <LoRaMacGetFCntDown+0xce>
        case MULTICAST_1_ADDR:
            *fCntID = MC_FCNT_DOWN_1;
 80121a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121a6:	2205      	movs	r2, #5
 80121a8:	701a      	strb	r2, [r3, #0]
            previousDown = FCntHandlerNvmCtx.FCntList.McFCntDown1;
 80121aa:	4b2c      	ldr	r3, [pc, #176]	; (801225c <LoRaMacGetFCntDown+0x158>)
 80121ac:	695b      	ldr	r3, [r3, #20]
 80121ae:	617b      	str	r3, [r7, #20]
            break;
 80121b0:	e00f      	b.n	80121d2 <LoRaMacGetFCntDown+0xce>
        case MULTICAST_2_ADDR:
            *fCntID = MC_FCNT_DOWN_2;
 80121b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121b4:	2206      	movs	r2, #6
 80121b6:	701a      	strb	r2, [r3, #0]
            previousDown = FCntHandlerNvmCtx.FCntList.McFCntDown3;
 80121b8:	4b28      	ldr	r3, [pc, #160]	; (801225c <LoRaMacGetFCntDown+0x158>)
 80121ba:	69db      	ldr	r3, [r3, #28]
 80121bc:	617b      	str	r3, [r7, #20]
            break;
 80121be:	e008      	b.n	80121d2 <LoRaMacGetFCntDown+0xce>
        case MULTICAST_3_ADDR:
            *fCntID = MC_FCNT_DOWN_3;
 80121c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121c2:	2207      	movs	r2, #7
 80121c4:	701a      	strb	r2, [r3, #0]
            previousDown = FCntHandlerNvmCtx.FCntList.McFCntDown3;
 80121c6:	4b25      	ldr	r3, [pc, #148]	; (801225c <LoRaMacGetFCntDown+0x158>)
 80121c8:	69db      	ldr	r3, [r3, #28]
 80121ca:	617b      	str	r3, [r7, #20]
            break;
 80121cc:	e001      	b.n	80121d2 <LoRaMacGetFCntDown+0xce>
        default:
            return LORAMAC_FCNT_HANDLER_ERROR;
 80121ce:	2305      	movs	r3, #5
 80121d0:	e03d      	b.n	801224e <LoRaMacGetFCntDown+0x14a>
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( previousDown == FCNT_DOWN_INITAL_VALUE )
 80121d2:	697b      	ldr	r3, [r7, #20]
 80121d4:	3301      	adds	r3, #1
 80121d6:	d105      	bne.n	80121e4 <LoRaMacGetFCntDown+0xe0>
    {
         *currentDown = macMsg->FHDR.FCnt;
 80121d8:	68bb      	ldr	r3, [r7, #8]
 80121da:	89db      	ldrh	r3, [r3, #14]
 80121dc:	001a      	movs	r2, r3
 80121de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121e0:	601a      	str	r2, [r3, #0]
 80121e2:	e023      	b.n	801222c <LoRaMacGetFCntDown+0x128>
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )macMsg->FHDR.FCnt - ( int32_t )( previousDown & 0x0000FFFF );
 80121e4:	68bb      	ldr	r3, [r7, #8]
 80121e6:	89db      	ldrh	r3, [r3, #14]
 80121e8:	001a      	movs	r2, r3
 80121ea:	697b      	ldr	r3, [r7, #20]
 80121ec:	041b      	lsls	r3, r3, #16
 80121ee:	0c1b      	lsrs	r3, r3, #16
 80121f0:	1ad3      	subs	r3, r2, r3
 80121f2:	613b      	str	r3, [r7, #16]

        if( fCntDiff > 0 )
 80121f4:	693b      	ldr	r3, [r7, #16]
 80121f6:	2b00      	cmp	r3, #0
 80121f8:	dd05      	ble.n	8012206 <LoRaMacGetFCntDown+0x102>
        {  // Positive difference
            *currentDown = previousDown + fCntDiff;
 80121fa:	693a      	ldr	r2, [r7, #16]
 80121fc:	697b      	ldr	r3, [r7, #20]
 80121fe:	18d2      	adds	r2, r2, r3
 8012200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012202:	601a      	str	r2, [r3, #0]
 8012204:	e012      	b.n	801222c <LoRaMacGetFCntDown+0x128>
        }
        else if( fCntDiff == 0 )
 8012206:	693b      	ldr	r3, [r7, #16]
 8012208:	2b00      	cmp	r3, #0
 801220a:	d104      	bne.n	8012216 <LoRaMacGetFCntDown+0x112>
        {  // Duplicate FCnt value, keep the current value.
            *currentDown = previousDown;
 801220c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801220e:	697a      	ldr	r2, [r7, #20]
 8012210:	601a      	str	r2, [r3, #0]
            return LORAMAC_FCNT_HANDLER_CHECK_FAIL;
 8012212:	2301      	movs	r3, #1
 8012214:	e01b      	b.n	801224e <LoRaMacGetFCntDown+0x14a>
        }
        else
        {  // Negative difference, assume a roll-over of one uint16_t
            *currentDown = ( previousDown & 0xFFFF0000 ) + 0x10000 + macMsg->FHDR.FCnt;
 8012216:	697b      	ldr	r3, [r7, #20]
 8012218:	0c1b      	lsrs	r3, r3, #16
 801221a:	041b      	lsls	r3, r3, #16
 801221c:	68ba      	ldr	r2, [r7, #8]
 801221e:	89d2      	ldrh	r2, [r2, #14]
 8012220:	189b      	adds	r3, r3, r2
 8012222:	2280      	movs	r2, #128	; 0x80
 8012224:	0252      	lsls	r2, r2, #9
 8012226:	189a      	adds	r2, r3, r2
 8012228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801222a:	601a      	str	r2, [r3, #0]
        }
    }


    // For LoRaWAN 1.0.X only, check maxFCntGap
    if( lrWanVersion.Fields.Minor == 0 )
 801222c:	1d3b      	adds	r3, r7, #4
 801222e:	789b      	ldrb	r3, [r3, #2]
 8012230:	2b00      	cmp	r3, #0
 8012232:	d10b      	bne.n	801224c <LoRaMacGetFCntDown+0x148>
    {
        if( ( ( int32_t )*currentDown - ( int32_t )previousDown ) >= maxFCntGap )
 8012234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012236:	681b      	ldr	r3, [r3, #0]
 8012238:	001a      	movs	r2, r3
 801223a:	697b      	ldr	r3, [r7, #20]
 801223c:	1ad2      	subs	r2, r2, r3
 801223e:	2320      	movs	r3, #32
 8012240:	18fb      	adds	r3, r7, r3
 8012242:	881b      	ldrh	r3, [r3, #0]
 8012244:	429a      	cmp	r2, r3
 8012246:	db01      	blt.n	801224c <LoRaMacGetFCntDown+0x148>
        {
            return LORAMAC_FCNT_HANDLER_MAX_GAP_FAIL;
 8012248:	2302      	movs	r3, #2
 801224a:	e000      	b.n	801224e <LoRaMacGetFCntDown+0x14a>
        }
    }

    return LORAMAC_FCNT_HANDLER_SUCCESS;
 801224c:	2300      	movs	r3, #0
}
 801224e:	0018      	movs	r0, r3
 8012250:	46bd      	mov	sp, r7
 8012252:	b006      	add	sp, #24
 8012254:	bd80      	pop	{r7, pc}
 8012256:	46c0      	nop			; (mov r8, r8)
 8012258:	08020aec 	.word	0x08020aec
 801225c:	20000f1c 	.word	0x20000f1c

08012260 <LoRaMacSetFCntDown>:

LoRaMacFCntHandlerStatus_t LoRaMacSetFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8012260:	b580      	push	{r7, lr}
 8012262:	b082      	sub	sp, #8
 8012264:	af00      	add	r7, sp, #0
 8012266:	0002      	movs	r2, r0
 8012268:	6039      	str	r1, [r7, #0]
 801226a:	1dfb      	adds	r3, r7, #7
 801226c:	701a      	strb	r2, [r3, #0]
    switch( fCntID )
 801226e:	1dfb      	adds	r3, r7, #7
 8012270:	781b      	ldrb	r3, [r3, #0]
 8012272:	2b07      	cmp	r3, #7
 8012274:	d822      	bhi.n	80122bc <LoRaMacSetFCntDown+0x5c>
 8012276:	009a      	lsls	r2, r3, #2
 8012278:	4b15      	ldr	r3, [pc, #84]	; (80122d0 <LoRaMacSetFCntDown+0x70>)
 801227a:	18d3      	adds	r3, r2, r3
 801227c:	681b      	ldr	r3, [r3, #0]
 801227e:	469f      	mov	pc, r3
    {
        case FCNT_UP:
            return LORAMAC_FCNT_HANDLER_ERROR_INVALID_FCNT_ID;
 8012280:	2303      	movs	r3, #3
 8012282:	e020      	b.n	80122c6 <LoRaMacSetFCntDown+0x66>
        case N_FCNT_DOWN:
            FCntHandlerNvmCtx.FCntList.NFCntDown = currentDown;
 8012284:	4b13      	ldr	r3, [pc, #76]	; (80122d4 <LoRaMacSetFCntDown+0x74>)
 8012286:	683a      	ldr	r2, [r7, #0]
 8012288:	605a      	str	r2, [r3, #4]
            break;
 801228a:	e019      	b.n	80122c0 <LoRaMacSetFCntDown+0x60>
        case A_FCNT_DOWN:
            FCntHandlerNvmCtx.FCntList.AFCntDown = currentDown;
 801228c:	4b11      	ldr	r3, [pc, #68]	; (80122d4 <LoRaMacSetFCntDown+0x74>)
 801228e:	683a      	ldr	r2, [r7, #0]
 8012290:	609a      	str	r2, [r3, #8]
            break;
 8012292:	e015      	b.n	80122c0 <LoRaMacSetFCntDown+0x60>
        case FCNT_DOWN:
            FCntHandlerNvmCtx.FCntList.FCntDown = currentDown;
 8012294:	4b0f      	ldr	r3, [pc, #60]	; (80122d4 <LoRaMacSetFCntDown+0x74>)
 8012296:	683a      	ldr	r2, [r7, #0]
 8012298:	60da      	str	r2, [r3, #12]
            break;
 801229a:	e011      	b.n	80122c0 <LoRaMacSetFCntDown+0x60>
        case MC_FCNT_DOWN_0:
            FCntHandlerNvmCtx.FCntList.McFCntDown0 = currentDown;
 801229c:	4b0d      	ldr	r3, [pc, #52]	; (80122d4 <LoRaMacSetFCntDown+0x74>)
 801229e:	683a      	ldr	r2, [r7, #0]
 80122a0:	611a      	str	r2, [r3, #16]
            break;
 80122a2:	e00d      	b.n	80122c0 <LoRaMacSetFCntDown+0x60>
        case MC_FCNT_DOWN_1:
            FCntHandlerNvmCtx.FCntList.McFCntDown1 = currentDown;
 80122a4:	4b0b      	ldr	r3, [pc, #44]	; (80122d4 <LoRaMacSetFCntDown+0x74>)
 80122a6:	683a      	ldr	r2, [r7, #0]
 80122a8:	615a      	str	r2, [r3, #20]
            break;
 80122aa:	e009      	b.n	80122c0 <LoRaMacSetFCntDown+0x60>
        case MC_FCNT_DOWN_2:
            FCntHandlerNvmCtx.FCntList.McFCntDown2 = currentDown;
 80122ac:	4b09      	ldr	r3, [pc, #36]	; (80122d4 <LoRaMacSetFCntDown+0x74>)
 80122ae:	683a      	ldr	r2, [r7, #0]
 80122b0:	619a      	str	r2, [r3, #24]
            break;
 80122b2:	e005      	b.n	80122c0 <LoRaMacSetFCntDown+0x60>
        case MC_FCNT_DOWN_3:
            FCntHandlerNvmCtx.FCntList.McFCntDown3 = currentDown;
 80122b4:	4b07      	ldr	r3, [pc, #28]	; (80122d4 <LoRaMacSetFCntDown+0x74>)
 80122b6:	683a      	ldr	r2, [r7, #0]
 80122b8:	61da      	str	r2, [r3, #28]
            break;
 80122ba:	e001      	b.n	80122c0 <LoRaMacSetFCntDown+0x60>
        default:
            return LORAMAC_FCNT_HANDLER_ERROR;
 80122bc:	2305      	movs	r3, #5
 80122be:	e002      	b.n	80122c6 <LoRaMacSetFCntDown+0x66>
    }

    NvmCtxChanged( );
 80122c0:	f7ff fede 	bl	8012080 <NvmCtxChanged>

    return LORAMAC_FCNT_HANDLER_SUCCESS;
 80122c4:	2300      	movs	r3, #0
}
 80122c6:	0018      	movs	r0, r3
 80122c8:	46bd      	mov	sp, r7
 80122ca:	b002      	add	sp, #8
 80122cc:	bd80      	pop	{r7, pc}
 80122ce:	46c0      	nop			; (mov r8, r8)
 80122d0:	08020b00 	.word	0x08020b00
 80122d4:	20000f1c 	.word	0x20000f1c

080122d8 <LoRaMacGetFCntUp>:

LoRaMacFCntHandlerStatus_t LoRaMacGetFCntUp( uint32_t* currentUp )
{
 80122d8:	b580      	push	{r7, lr}
 80122da:	b082      	sub	sp, #8
 80122dc:	af00      	add	r7, sp, #0
 80122de:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	2b00      	cmp	r3, #0
 80122e4:	d101      	bne.n	80122ea <LoRaMacGetFCntUp+0x12>
    {
        return LORAMAC_FCNT_HANDLER_ERROR_NPE;
 80122e6:	2304      	movs	r3, #4
 80122e8:	e005      	b.n	80122f6 <LoRaMacGetFCntUp+0x1e>
    }

    *currentUp = FCntHandlerNvmCtx.FCntList.FCntUp + 1;
 80122ea:	4b05      	ldr	r3, [pc, #20]	; (8012300 <LoRaMacGetFCntUp+0x28>)
 80122ec:	681b      	ldr	r3, [r3, #0]
 80122ee:	1c5a      	adds	r2, r3, #1
 80122f0:	687b      	ldr	r3, [r7, #4]
 80122f2:	601a      	str	r2, [r3, #0]

    return LORAMAC_FCNT_HANDLER_SUCCESS;
 80122f4:	2300      	movs	r3, #0
}
 80122f6:	0018      	movs	r0, r3
 80122f8:	46bd      	mov	sp, r7
 80122fa:	b002      	add	sp, #8
 80122fc:	bd80      	pop	{r7, pc}
 80122fe:	46c0      	nop			; (mov r8, r8)
 8012300:	20000f1c 	.word	0x20000f1c

08012304 <LoRaMacSetFCntUp>:

LoRaMacFCntHandlerStatus_t LoRaMacSetFCntUp( uint32_t currentUp )
{
 8012304:	b580      	push	{r7, lr}
 8012306:	b082      	sub	sp, #8
 8012308:	af00      	add	r7, sp, #0
 801230a:	6078      	str	r0, [r7, #4]
    FCntHandlerNvmCtx.FCntList.FCntUp = currentUp;
 801230c:	4b04      	ldr	r3, [pc, #16]	; (8012320 <LoRaMacSetFCntUp+0x1c>)
 801230e:	687a      	ldr	r2, [r7, #4]
 8012310:	601a      	str	r2, [r3, #0]

    NvmCtxChanged( );
 8012312:	f7ff feb5 	bl	8012080 <NvmCtxChanged>

    return LORAMAC_FCNT_HANDLER_SUCCESS;
 8012316:	2300      	movs	r3, #0
}
 8012318:	0018      	movs	r0, r3
 801231a:	46bd      	mov	sp, r7
 801231c:	b002      	add	sp, #8
 801231e:	bd80      	pop	{r7, pc}
 8012320:	20000f1c 	.word	0x20000f1c

08012324 <LoRaMacResetFCnts>:

LoRaMacFCntHandlerStatus_t LoRaMacResetFCnts( void )
{
 8012324:	b580      	push	{r7, lr}
 8012326:	af00      	add	r7, sp, #0

    FCntHandlerNvmCtx.FCntList.FCntUp = 0;
 8012328:	4b12      	ldr	r3, [pc, #72]	; (8012374 <LoRaMacResetFCnts+0x50>)
 801232a:	2200      	movs	r2, #0
 801232c:	601a      	str	r2, [r3, #0]
    FCntHandlerNvmCtx.FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 801232e:	4b11      	ldr	r3, [pc, #68]	; (8012374 <LoRaMacResetFCnts+0x50>)
 8012330:	2201      	movs	r2, #1
 8012332:	4252      	negs	r2, r2
 8012334:	605a      	str	r2, [r3, #4]
    FCntHandlerNvmCtx.FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 8012336:	4b0f      	ldr	r3, [pc, #60]	; (8012374 <LoRaMacResetFCnts+0x50>)
 8012338:	2201      	movs	r2, #1
 801233a:	4252      	negs	r2, r2
 801233c:	609a      	str	r2, [r3, #8]
    FCntHandlerNvmCtx.FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 801233e:	4b0d      	ldr	r3, [pc, #52]	; (8012374 <LoRaMacResetFCnts+0x50>)
 8012340:	2201      	movs	r2, #1
 8012342:	4252      	negs	r2, r2
 8012344:	60da      	str	r2, [r3, #12]

    FCntHandlerNvmCtx.FCntList.McFCntDown0 = FCNT_DOWN_INITAL_VALUE;
 8012346:	4b0b      	ldr	r3, [pc, #44]	; (8012374 <LoRaMacResetFCnts+0x50>)
 8012348:	2201      	movs	r2, #1
 801234a:	4252      	negs	r2, r2
 801234c:	611a      	str	r2, [r3, #16]
    FCntHandlerNvmCtx.FCntList.McFCntDown1 = FCNT_DOWN_INITAL_VALUE;
 801234e:	4b09      	ldr	r3, [pc, #36]	; (8012374 <LoRaMacResetFCnts+0x50>)
 8012350:	2201      	movs	r2, #1
 8012352:	4252      	negs	r2, r2
 8012354:	615a      	str	r2, [r3, #20]
    FCntHandlerNvmCtx.FCntList.McFCntDown2 = FCNT_DOWN_INITAL_VALUE;
 8012356:	4b07      	ldr	r3, [pc, #28]	; (8012374 <LoRaMacResetFCnts+0x50>)
 8012358:	2201      	movs	r2, #1
 801235a:	4252      	negs	r2, r2
 801235c:	619a      	str	r2, [r3, #24]
    FCntHandlerNvmCtx.FCntList.McFCntDown3 = FCNT_DOWN_INITAL_VALUE;
 801235e:	4b05      	ldr	r3, [pc, #20]	; (8012374 <LoRaMacResetFCnts+0x50>)
 8012360:	2201      	movs	r2, #1
 8012362:	4252      	negs	r2, r2
 8012364:	61da      	str	r2, [r3, #28]

    NvmCtxChanged( );
 8012366:	f7ff fe8b 	bl	8012080 <NvmCtxChanged>

    return LORAMAC_FCNT_HANDLER_SUCCESS;
 801236a:	2300      	movs	r3, #0
}
 801236c:	0018      	movs	r0, r3
 801236e:	46bd      	mov	sp, r7
 8012370:	bd80      	pop	{r7, pc}
 8012372:	46c0      	nop			; (mov r8, r8)
 8012374:	20000f1c 	.word	0x20000f1c

08012378 <LoRaMacFCntHandlerSetMulticastReference>:

LoRaMacFCntHandlerStatus_t LoRaMacFCntHandlerSetMulticastReference( MulticastCtx_t* multicastList )
{
 8012378:	b580      	push	{r7, lr}
 801237a:	b082      	sub	sp, #8
 801237c:	af00      	add	r7, sp, #0
 801237e:	6078      	str	r0, [r7, #4]
    if( multicastList == NULL )
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	2b00      	cmp	r3, #0
 8012384:	d101      	bne.n	801238a <LoRaMacFCntHandlerSetMulticastReference+0x12>
    {
        return LORAMAC_FCNT_HANDLER_ERROR_NPE;
 8012386:	2304      	movs	r3, #4
 8012388:	e00f      	b.n	80123aa <LoRaMacFCntHandlerSetMulticastReference+0x32>
    }

    multicastList[0].DownLinkCounter = &FCntHandlerNvmCtx.FCntList.McFCntDown0;
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	4a09      	ldr	r2, [pc, #36]	; (80123b4 <LoRaMacFCntHandlerSetMulticastReference+0x3c>)
 801238e:	609a      	str	r2, [r3, #8]
    multicastList[1].DownLinkCounter = &FCntHandlerNvmCtx.FCntList.McFCntDown1;
 8012390:	687b      	ldr	r3, [r7, #4]
 8012392:	3320      	adds	r3, #32
 8012394:	4a08      	ldr	r2, [pc, #32]	; (80123b8 <LoRaMacFCntHandlerSetMulticastReference+0x40>)
 8012396:	609a      	str	r2, [r3, #8]
    multicastList[2].DownLinkCounter = &FCntHandlerNvmCtx.FCntList.McFCntDown2;
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	3340      	adds	r3, #64	; 0x40
 801239c:	4a07      	ldr	r2, [pc, #28]	; (80123bc <LoRaMacFCntHandlerSetMulticastReference+0x44>)
 801239e:	609a      	str	r2, [r3, #8]
    multicastList[3].DownLinkCounter = &FCntHandlerNvmCtx.FCntList.McFCntDown3;
 80123a0:	687b      	ldr	r3, [r7, #4]
 80123a2:	3360      	adds	r3, #96	; 0x60
 80123a4:	4a06      	ldr	r2, [pc, #24]	; (80123c0 <LoRaMacFCntHandlerSetMulticastReference+0x48>)
 80123a6:	609a      	str	r2, [r3, #8]

    return LORAMAC_FCNT_HANDLER_SUCCESS;
 80123a8:	2300      	movs	r3, #0
}
 80123aa:	0018      	movs	r0, r3
 80123ac:	46bd      	mov	sp, r7
 80123ae:	b002      	add	sp, #8
 80123b0:	bd80      	pop	{r7, pc}
 80123b2:	46c0      	nop			; (mov r8, r8)
 80123b4:	20000f2c 	.word	0x20000f2c
 80123b8:	20000f30 	.word	0x20000f30
 80123bc:	20000f34 	.word	0x20000f34
 80123c0:	20000f38 	.word	0x20000f38

080123c4 <LoRaMacParserJoinAccept>:

#include <drivers/lorawan/utilities.h>
#include <drivers/lorawan/mac/LoRaMacParser.h>

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 80123c4:	b590      	push	{r4, r7, lr}
 80123c6:	b085      	sub	sp, #20
 80123c8:	af00      	add	r7, sp, #0
 80123ca:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80123cc:	687b      	ldr	r3, [r7, #4]
 80123ce:	2b00      	cmp	r3, #0
 80123d0:	d003      	beq.n	80123da <LoRaMacParserJoinAccept+0x16>
 80123d2:	687b      	ldr	r3, [r7, #4]
 80123d4:	681b      	ldr	r3, [r3, #0]
 80123d6:	2b00      	cmp	r3, #0
 80123d8:	d101      	bne.n	80123de <LoRaMacParserJoinAccept+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 80123da:	2302      	movs	r3, #2
 80123dc:	e0df      	b.n	801259e <LoRaMacParserJoinAccept+0x1da>
    }

    uint16_t bufItr = 0;
 80123de:	240e      	movs	r4, #14
 80123e0:	193b      	adds	r3, r7, r4
 80123e2:	2200      	movs	r2, #0
 80123e4:	801a      	strh	r2, [r3, #0]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	681a      	ldr	r2, [r3, #0]
 80123ea:	193b      	adds	r3, r7, r4
 80123ec:	881b      	ldrh	r3, [r3, #0]
 80123ee:	1939      	adds	r1, r7, r4
 80123f0:	1c58      	adds	r0, r3, #1
 80123f2:	8008      	strh	r0, [r1, #0]
 80123f4:	18d3      	adds	r3, r2, r3
 80123f6:	781a      	ldrb	r2, [r3, #0]
 80123f8:	687b      	ldr	r3, [r7, #4]
 80123fa:	715a      	strb	r2, [r3, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 80123fc:	687b      	ldr	r3, [r7, #4]
 80123fe:	1d98      	adds	r0, r3, #6
 8012400:	687b      	ldr	r3, [r7, #4]
 8012402:	681a      	ldr	r2, [r3, #0]
 8012404:	193b      	adds	r3, r7, r4
 8012406:	881b      	ldrh	r3, [r3, #0]
 8012408:	18d3      	adds	r3, r2, r3
 801240a:	2203      	movs	r2, #3
 801240c:	0019      	movs	r1, r3
 801240e:	f003 f967 	bl	80156e0 <memcpy1>
    bufItr = bufItr + 3;
 8012412:	193b      	adds	r3, r7, r4
 8012414:	193a      	adds	r2, r7, r4
 8012416:	8812      	ldrh	r2, [r2, #0]
 8012418:	3203      	adds	r2, #3
 801241a:	801a      	strh	r2, [r3, #0]

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	3309      	adds	r3, #9
 8012420:	0018      	movs	r0, r3
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	681a      	ldr	r2, [r3, #0]
 8012426:	193b      	adds	r3, r7, r4
 8012428:	881b      	ldrh	r3, [r3, #0]
 801242a:	18d3      	adds	r3, r2, r3
 801242c:	2203      	movs	r2, #3
 801242e:	0019      	movs	r1, r3
 8012430:	f003 f956 	bl	80156e0 <memcpy1>
    bufItr = bufItr + 3;
 8012434:	193b      	adds	r3, r7, r4
 8012436:	193a      	adds	r2, r7, r4
 8012438:	8812      	ldrh	r2, [r2, #0]
 801243a:	3203      	adds	r2, #3
 801243c:	801a      	strh	r2, [r3, #0]

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	681a      	ldr	r2, [r3, #0]
 8012442:	193b      	adds	r3, r7, r4
 8012444:	881b      	ldrh	r3, [r3, #0]
 8012446:	1939      	adds	r1, r7, r4
 8012448:	1c58      	adds	r0, r3, #1
 801244a:	8008      	strh	r0, [r1, #0]
 801244c:	18d3      	adds	r3, r2, r3
 801244e:	781b      	ldrb	r3, [r3, #0]
 8012450:	001a      	movs	r2, r3
 8012452:	687b      	ldr	r3, [r7, #4]
 8012454:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8012456:	687b      	ldr	r3, [r7, #4]
 8012458:	681a      	ldr	r2, [r3, #0]
 801245a:	193b      	adds	r3, r7, r4
 801245c:	881b      	ldrh	r3, [r3, #0]
 801245e:	1939      	adds	r1, r7, r4
 8012460:	1c58      	adds	r0, r3, #1
 8012462:	8008      	strh	r0, [r1, #0]
 8012464:	18d3      	adds	r3, r2, r3
 8012466:	781b      	ldrb	r3, [r3, #0]
 8012468:	021a      	lsls	r2, r3, #8
 801246a:	687b      	ldr	r3, [r7, #4]
 801246c:	68db      	ldr	r3, [r3, #12]
 801246e:	431a      	orrs	r2, r3
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	681a      	ldr	r2, [r3, #0]
 8012478:	193b      	adds	r3, r7, r4
 801247a:	881b      	ldrh	r3, [r3, #0]
 801247c:	1939      	adds	r1, r7, r4
 801247e:	1c58      	adds	r0, r3, #1
 8012480:	8008      	strh	r0, [r1, #0]
 8012482:	18d3      	adds	r3, r2, r3
 8012484:	781b      	ldrb	r3, [r3, #0]
 8012486:	041a      	lsls	r2, r3, #16
 8012488:	687b      	ldr	r3, [r7, #4]
 801248a:	68db      	ldr	r3, [r3, #12]
 801248c:	431a      	orrs	r2, r3
 801248e:	687b      	ldr	r3, [r7, #4]
 8012490:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8012492:	687b      	ldr	r3, [r7, #4]
 8012494:	681a      	ldr	r2, [r3, #0]
 8012496:	193b      	adds	r3, r7, r4
 8012498:	881b      	ldrh	r3, [r3, #0]
 801249a:	1939      	adds	r1, r7, r4
 801249c:	1c58      	adds	r0, r3, #1
 801249e:	8008      	strh	r0, [r1, #0]
 80124a0:	18d3      	adds	r3, r2, r3
 80124a2:	781b      	ldrb	r3, [r3, #0]
 80124a4:	061a      	lsls	r2, r3, #24
 80124a6:	687b      	ldr	r3, [r7, #4]
 80124a8:	68db      	ldr	r3, [r3, #12]
 80124aa:	431a      	orrs	r2, r3
 80124ac:	687b      	ldr	r3, [r7, #4]
 80124ae:	60da      	str	r2, [r3, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 80124b0:	687b      	ldr	r3, [r7, #4]
 80124b2:	681a      	ldr	r2, [r3, #0]
 80124b4:	193b      	adds	r3, r7, r4
 80124b6:	881b      	ldrh	r3, [r3, #0]
 80124b8:	1939      	adds	r1, r7, r4
 80124ba:	1c58      	adds	r0, r3, #1
 80124bc:	8008      	strh	r0, [r1, #0]
 80124be:	18d3      	adds	r3, r2, r3
 80124c0:	781a      	ldrb	r2, [r3, #0]
 80124c2:	687b      	ldr	r3, [r7, #4]
 80124c4:	741a      	strb	r2, [r3, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 80124c6:	687b      	ldr	r3, [r7, #4]
 80124c8:	681a      	ldr	r2, [r3, #0]
 80124ca:	193b      	adds	r3, r7, r4
 80124cc:	881b      	ldrh	r3, [r3, #0]
 80124ce:	1939      	adds	r1, r7, r4
 80124d0:	1c58      	adds	r0, r3, #1
 80124d2:	8008      	strh	r0, [r1, #0]
 80124d4:	18d3      	adds	r3, r2, r3
 80124d6:	781a      	ldrb	r2, [r3, #0]
 80124d8:	687b      	ldr	r3, [r7, #4]
 80124da:	745a      	strb	r2, [r3, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_C_FLIST_FIELD_SIZE )
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	791b      	ldrb	r3, [r3, #4]
 80124e0:	1f1a      	subs	r2, r3, #4
 80124e2:	193b      	adds	r3, r7, r4
 80124e4:	881b      	ldrh	r3, [r3, #0]
 80124e6:	1ad3      	subs	r3, r2, r3
 80124e8:	2b10      	cmp	r3, #16
 80124ea:	d112      	bne.n	8012512 <LoRaMacParserJoinAccept+0x14e>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_C_FLIST_FIELD_SIZE );
 80124ec:	687b      	ldr	r3, [r7, #4]
 80124ee:	3312      	adds	r3, #18
 80124f0:	0018      	movs	r0, r3
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	681a      	ldr	r2, [r3, #0]
 80124f6:	240e      	movs	r4, #14
 80124f8:	193b      	adds	r3, r7, r4
 80124fa:	881b      	ldrh	r3, [r3, #0]
 80124fc:	18d3      	adds	r3, r2, r3
 80124fe:	2210      	movs	r2, #16
 8012500:	0019      	movs	r1, r3
 8012502:	f003 f8ed 	bl	80156e0 <memcpy1>
        bufItr = bufItr + LORAMAC_C_FLIST_FIELD_SIZE;
 8012506:	193b      	adds	r3, r7, r4
 8012508:	193a      	adds	r2, r7, r4
 801250a:	8812      	ldrh	r2, [r2, #0]
 801250c:	3210      	adds	r2, #16
 801250e:	801a      	strh	r2, [r3, #0]
 8012510:	e00a      	b.n	8012528 <LoRaMacParserJoinAccept+0x164>
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	791b      	ldrb	r3, [r3, #4]
 8012516:	1f1a      	subs	r2, r3, #4
 8012518:	230e      	movs	r3, #14
 801251a:	18fb      	adds	r3, r7, r3
 801251c:	881b      	ldrh	r3, [r3, #0]
 801251e:	1ad3      	subs	r3, r2, r3
 8012520:	2b00      	cmp	r3, #0
 8012522:	dd01      	ble.n	8012528 <LoRaMacParserJoinAccept+0x164>
    {
        return LORAMAC_PARSER_FAIL;
 8012524:	2301      	movs	r3, #1
 8012526:	e03a      	b.n	801259e <LoRaMacParserJoinAccept+0x1da>
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 8012528:	687b      	ldr	r3, [r7, #4]
 801252a:	681a      	ldr	r2, [r3, #0]
 801252c:	240e      	movs	r4, #14
 801252e:	193b      	adds	r3, r7, r4
 8012530:	881b      	ldrh	r3, [r3, #0]
 8012532:	1939      	adds	r1, r7, r4
 8012534:	1c58      	adds	r0, r3, #1
 8012536:	8008      	strh	r0, [r1, #0]
 8012538:	18d3      	adds	r3, r2, r3
 801253a:	781b      	ldrb	r3, [r3, #0]
 801253c:	001a      	movs	r2, r3
 801253e:	687b      	ldr	r3, [r7, #4]
 8012540:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8012542:	687b      	ldr	r3, [r7, #4]
 8012544:	681a      	ldr	r2, [r3, #0]
 8012546:	193b      	adds	r3, r7, r4
 8012548:	881b      	ldrh	r3, [r3, #0]
 801254a:	1939      	adds	r1, r7, r4
 801254c:	1c58      	adds	r0, r3, #1
 801254e:	8008      	strh	r0, [r1, #0]
 8012550:	18d3      	adds	r3, r2, r3
 8012552:	781b      	ldrb	r3, [r3, #0]
 8012554:	021a      	lsls	r2, r3, #8
 8012556:	687b      	ldr	r3, [r7, #4]
 8012558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801255a:	431a      	orrs	r2, r3
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8012560:	687b      	ldr	r3, [r7, #4]
 8012562:	681a      	ldr	r2, [r3, #0]
 8012564:	193b      	adds	r3, r7, r4
 8012566:	881b      	ldrh	r3, [r3, #0]
 8012568:	1939      	adds	r1, r7, r4
 801256a:	1c58      	adds	r0, r3, #1
 801256c:	8008      	strh	r0, [r1, #0]
 801256e:	18d3      	adds	r3, r2, r3
 8012570:	781b      	ldrb	r3, [r3, #0]
 8012572:	041a      	lsls	r2, r3, #16
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012578:	431a      	orrs	r2, r3
 801257a:	687b      	ldr	r3, [r7, #4]
 801257c:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 801257e:	687b      	ldr	r3, [r7, #4]
 8012580:	681a      	ldr	r2, [r3, #0]
 8012582:	193b      	adds	r3, r7, r4
 8012584:	881b      	ldrh	r3, [r3, #0]
 8012586:	1939      	adds	r1, r7, r4
 8012588:	1c58      	adds	r0, r3, #1
 801258a:	8008      	strh	r0, [r1, #0]
 801258c:	18d3      	adds	r3, r2, r3
 801258e:	781b      	ldrb	r3, [r3, #0]
 8012590:	061a      	lsls	r2, r3, #24
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012596:	431a      	orrs	r2, r3
 8012598:	687b      	ldr	r3, [r7, #4]
 801259a:	625a      	str	r2, [r3, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 801259c:	2300      	movs	r3, #0
}
 801259e:	0018      	movs	r0, r3
 80125a0:	46bd      	mov	sp, r7
 80125a2:	b005      	add	sp, #20
 80125a4:	bd90      	pop	{r4, r7, pc}

080125a6 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 80125a6:	b590      	push	{r4, r7, lr}
 80125a8:	b085      	sub	sp, #20
 80125aa:	af00      	add	r7, sp, #0
 80125ac:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80125ae:	687b      	ldr	r3, [r7, #4]
 80125b0:	2b00      	cmp	r3, #0
 80125b2:	d003      	beq.n	80125bc <LoRaMacParserData+0x16>
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	681b      	ldr	r3, [r3, #0]
 80125b8:	2b00      	cmp	r3, #0
 80125ba:	d101      	bne.n	80125c0 <LoRaMacParserData+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 80125bc:	2302      	movs	r3, #2
 80125be:	e100      	b.n	80127c2 <LoRaMacParserData+0x21c>
    }

    uint16_t bufItr = 0;
 80125c0:	240e      	movs	r4, #14
 80125c2:	193b      	adds	r3, r7, r4
 80125c4:	2200      	movs	r2, #0
 80125c6:	801a      	strh	r2, [r3, #0]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 80125c8:	687b      	ldr	r3, [r7, #4]
 80125ca:	681a      	ldr	r2, [r3, #0]
 80125cc:	193b      	adds	r3, r7, r4
 80125ce:	881b      	ldrh	r3, [r3, #0]
 80125d0:	1939      	adds	r1, r7, r4
 80125d2:	1c58      	adds	r0, r3, #1
 80125d4:	8008      	strh	r0, [r1, #0]
 80125d6:	18d3      	adds	r3, r2, r3
 80125d8:	781a      	ldrb	r2, [r3, #0]
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	715a      	strb	r2, [r3, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 80125de:	687b      	ldr	r3, [r7, #4]
 80125e0:	681a      	ldr	r2, [r3, #0]
 80125e2:	193b      	adds	r3, r7, r4
 80125e4:	881b      	ldrh	r3, [r3, #0]
 80125e6:	1939      	adds	r1, r7, r4
 80125e8:	1c58      	adds	r0, r3, #1
 80125ea:	8008      	strh	r0, [r1, #0]
 80125ec:	18d3      	adds	r3, r2, r3
 80125ee:	781b      	ldrb	r3, [r3, #0]
 80125f0:	001a      	movs	r2, r3
 80125f2:	687b      	ldr	r3, [r7, #4]
 80125f4:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 80125f6:	687b      	ldr	r3, [r7, #4]
 80125f8:	681a      	ldr	r2, [r3, #0]
 80125fa:	193b      	adds	r3, r7, r4
 80125fc:	881b      	ldrh	r3, [r3, #0]
 80125fe:	1939      	adds	r1, r7, r4
 8012600:	1c58      	adds	r0, r3, #1
 8012602:	8008      	strh	r0, [r1, #0]
 8012604:	18d3      	adds	r3, r2, r3
 8012606:	781b      	ldrb	r3, [r3, #0]
 8012608:	021a      	lsls	r2, r3, #8
 801260a:	687b      	ldr	r3, [r7, #4]
 801260c:	689b      	ldr	r3, [r3, #8]
 801260e:	431a      	orrs	r2, r3
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8012614:	687b      	ldr	r3, [r7, #4]
 8012616:	681a      	ldr	r2, [r3, #0]
 8012618:	193b      	adds	r3, r7, r4
 801261a:	881b      	ldrh	r3, [r3, #0]
 801261c:	1939      	adds	r1, r7, r4
 801261e:	1c58      	adds	r0, r3, #1
 8012620:	8008      	strh	r0, [r1, #0]
 8012622:	18d3      	adds	r3, r2, r3
 8012624:	781b      	ldrb	r3, [r3, #0]
 8012626:	041a      	lsls	r2, r3, #16
 8012628:	687b      	ldr	r3, [r7, #4]
 801262a:	689b      	ldr	r3, [r3, #8]
 801262c:	431a      	orrs	r2, r3
 801262e:	687b      	ldr	r3, [r7, #4]
 8012630:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8012632:	687b      	ldr	r3, [r7, #4]
 8012634:	681a      	ldr	r2, [r3, #0]
 8012636:	193b      	adds	r3, r7, r4
 8012638:	881b      	ldrh	r3, [r3, #0]
 801263a:	1939      	adds	r1, r7, r4
 801263c:	1c58      	adds	r0, r3, #1
 801263e:	8008      	strh	r0, [r1, #0]
 8012640:	18d3      	adds	r3, r2, r3
 8012642:	781b      	ldrb	r3, [r3, #0]
 8012644:	061a      	lsls	r2, r3, #24
 8012646:	687b      	ldr	r3, [r7, #4]
 8012648:	689b      	ldr	r3, [r3, #8]
 801264a:	431a      	orrs	r2, r3
 801264c:	687b      	ldr	r3, [r7, #4]
 801264e:	609a      	str	r2, [r3, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 8012650:	687b      	ldr	r3, [r7, #4]
 8012652:	681a      	ldr	r2, [r3, #0]
 8012654:	193b      	adds	r3, r7, r4
 8012656:	881b      	ldrh	r3, [r3, #0]
 8012658:	1939      	adds	r1, r7, r4
 801265a:	1c58      	adds	r0, r3, #1
 801265c:	8008      	strh	r0, [r1, #0]
 801265e:	18d3      	adds	r3, r2, r3
 8012660:	781a      	ldrb	r2, [r3, #0]
 8012662:	687b      	ldr	r3, [r7, #4]
 8012664:	731a      	strb	r2, [r3, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 8012666:	687b      	ldr	r3, [r7, #4]
 8012668:	681a      	ldr	r2, [r3, #0]
 801266a:	193b      	adds	r3, r7, r4
 801266c:	881b      	ldrh	r3, [r3, #0]
 801266e:	1939      	adds	r1, r7, r4
 8012670:	1c58      	adds	r0, r3, #1
 8012672:	8008      	strh	r0, [r1, #0]
 8012674:	18d3      	adds	r3, r2, r3
 8012676:	781b      	ldrb	r3, [r3, #0]
 8012678:	b29a      	uxth	r2, r3
 801267a:	687b      	ldr	r3, [r7, #4]
 801267c:	81da      	strh	r2, [r3, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 801267e:	687b      	ldr	r3, [r7, #4]
 8012680:	681a      	ldr	r2, [r3, #0]
 8012682:	193b      	adds	r3, r7, r4
 8012684:	881b      	ldrh	r3, [r3, #0]
 8012686:	1939      	adds	r1, r7, r4
 8012688:	1c58      	adds	r0, r3, #1
 801268a:	8008      	strh	r0, [r1, #0]
 801268c:	18d3      	adds	r3, r2, r3
 801268e:	781b      	ldrb	r3, [r3, #0]
 8012690:	0219      	lsls	r1, r3, #8
 8012692:	687b      	ldr	r3, [r7, #4]
 8012694:	89db      	ldrh	r3, [r3, #14]
 8012696:	b21a      	sxth	r2, r3
 8012698:	b20b      	sxth	r3, r1
 801269a:	4313      	orrs	r3, r2
 801269c:	b21b      	sxth	r3, r3
 801269e:	b29a      	uxth	r2, r3
 80126a0:	687b      	ldr	r3, [r7, #4]
 80126a2:	81da      	strh	r2, [r3, #14]

    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
    {
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 80126a4:	687b      	ldr	r3, [r7, #4]
 80126a6:	3310      	adds	r3, #16
 80126a8:	0018      	movs	r0, r3
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	681a      	ldr	r2, [r3, #0]
 80126ae:	193b      	adds	r3, r7, r4
 80126b0:	881b      	ldrh	r3, [r3, #0]
 80126b2:	18d1      	adds	r1, r2, r3
 80126b4:	687b      	ldr	r3, [r7, #4]
 80126b6:	7b1b      	ldrb	r3, [r3, #12]
 80126b8:	071b      	lsls	r3, r3, #28
 80126ba:	0f1b      	lsrs	r3, r3, #28
 80126bc:	b2db      	uxtb	r3, r3
 80126be:	b29b      	uxth	r3, r3
 80126c0:	001a      	movs	r2, r3
 80126c2:	f003 f80d 	bl	80156e0 <memcpy1>
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 80126c6:	687b      	ldr	r3, [r7, #4]
 80126c8:	7b1b      	ldrb	r3, [r3, #12]
 80126ca:	071b      	lsls	r3, r3, #28
 80126cc:	0f1b      	lsrs	r3, r3, #28
 80126ce:	b2db      	uxtb	r3, r3
 80126d0:	b299      	uxth	r1, r3
 80126d2:	193b      	adds	r3, r7, r4
 80126d4:	193a      	adds	r2, r7, r4
 80126d6:	8812      	ldrh	r2, [r2, #0]
 80126d8:	188a      	adds	r2, r1, r2
 80126da:	801a      	strh	r2, [r3, #0]
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 80126dc:	687b      	ldr	r3, [r7, #4]
 80126de:	2220      	movs	r2, #32
 80126e0:	2100      	movs	r1, #0
 80126e2:	5499      	strb	r1, [r3, r2]
    macMsg->FRMPayloadSize = 0;
 80126e4:	687b      	ldr	r3, [r7, #4]
 80126e6:	2228      	movs	r2, #40	; 0x28
 80126e8:	2100      	movs	r1, #0
 80126ea:	5499      	strb	r1, [r3, r2]

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 80126ec:	687b      	ldr	r3, [r7, #4]
 80126ee:	791b      	ldrb	r3, [r3, #4]
 80126f0:	001a      	movs	r2, r3
 80126f2:	193b      	adds	r3, r7, r4
 80126f4:	881b      	ldrh	r3, [r3, #0]
 80126f6:	1ad3      	subs	r3, r2, r3
 80126f8:	3b04      	subs	r3, #4
 80126fa:	2b00      	cmp	r3, #0
 80126fc:	dd2f      	ble.n	801275e <LoRaMacParserData+0x1b8>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 80126fe:	687b      	ldr	r3, [r7, #4]
 8012700:	681a      	ldr	r2, [r3, #0]
 8012702:	240e      	movs	r4, #14
 8012704:	193b      	adds	r3, r7, r4
 8012706:	881b      	ldrh	r3, [r3, #0]
 8012708:	1939      	adds	r1, r7, r4
 801270a:	1c58      	adds	r0, r3, #1
 801270c:	8008      	strh	r0, [r1, #0]
 801270e:	18d3      	adds	r3, r2, r3
 8012710:	7819      	ldrb	r1, [r3, #0]
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	2220      	movs	r2, #32
 8012716:	5499      	strb	r1, [r3, r2]

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 8012718:	687b      	ldr	r3, [r7, #4]
 801271a:	791a      	ldrb	r2, [r3, #4]
 801271c:	193b      	adds	r3, r7, r4
 801271e:	881b      	ldrh	r3, [r3, #0]
 8012720:	b2db      	uxtb	r3, r3
 8012722:	1ad3      	subs	r3, r2, r3
 8012724:	b2db      	uxtb	r3, r3
 8012726:	3b04      	subs	r3, #4
 8012728:	b2d9      	uxtb	r1, r3
 801272a:	687b      	ldr	r3, [r7, #4]
 801272c:	2228      	movs	r2, #40	; 0x28
 801272e:	5499      	strb	r1, [r3, r2]
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 8012730:	687b      	ldr	r3, [r7, #4]
 8012732:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8012734:	687b      	ldr	r3, [r7, #4]
 8012736:	681a      	ldr	r2, [r3, #0]
 8012738:	193b      	adds	r3, r7, r4
 801273a:	881b      	ldrh	r3, [r3, #0]
 801273c:	18d1      	adds	r1, r2, r3
 801273e:	687b      	ldr	r3, [r7, #4]
 8012740:	2228      	movs	r2, #40	; 0x28
 8012742:	5c9b      	ldrb	r3, [r3, r2]
 8012744:	b29b      	uxth	r3, r3
 8012746:	001a      	movs	r2, r3
 8012748:	f002 ffca 	bl	80156e0 <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 801274c:	687b      	ldr	r3, [r7, #4]
 801274e:	2228      	movs	r2, #40	; 0x28
 8012750:	5c9b      	ldrb	r3, [r3, r2]
 8012752:	b299      	uxth	r1, r3
 8012754:	193b      	adds	r3, r7, r4
 8012756:	193a      	adds	r2, r7, r4
 8012758:	8812      	ldrh	r2, [r2, #0]
 801275a:	188a      	adds	r2, r1, r2
 801275c:	801a      	strh	r2, [r3, #0]
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 801275e:	687b      	ldr	r3, [r7, #4]
 8012760:	681a      	ldr	r2, [r3, #0]
 8012762:	687b      	ldr	r3, [r7, #4]
 8012764:	791b      	ldrb	r3, [r3, #4]
 8012766:	3b04      	subs	r3, #4
 8012768:	18d3      	adds	r3, r2, r3
 801276a:	781b      	ldrb	r3, [r3, #0]
 801276c:	001a      	movs	r2, r3
 801276e:	687b      	ldr	r3, [r7, #4]
 8012770:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 8012772:	687b      	ldr	r3, [r7, #4]
 8012774:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012776:	687b      	ldr	r3, [r7, #4]
 8012778:	6819      	ldr	r1, [r3, #0]
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	791b      	ldrb	r3, [r3, #4]
 801277e:	3b03      	subs	r3, #3
 8012780:	18cb      	adds	r3, r1, r3
 8012782:	781b      	ldrb	r3, [r3, #0]
 8012784:	021b      	lsls	r3, r3, #8
 8012786:	431a      	orrs	r2, r3
 8012788:	687b      	ldr	r3, [r7, #4]
 801278a:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 801278c:	687b      	ldr	r3, [r7, #4]
 801278e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012790:	687b      	ldr	r3, [r7, #4]
 8012792:	6819      	ldr	r1, [r3, #0]
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	791b      	ldrb	r3, [r3, #4]
 8012798:	3b02      	subs	r3, #2
 801279a:	18cb      	adds	r3, r1, r3
 801279c:	781b      	ldrb	r3, [r3, #0]
 801279e:	041b      	lsls	r3, r3, #16
 80127a0:	431a      	orrs	r2, r3
 80127a2:	687b      	ldr	r3, [r7, #4]
 80127a4:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80127aa:	687b      	ldr	r3, [r7, #4]
 80127ac:	6819      	ldr	r1, [r3, #0]
 80127ae:	687b      	ldr	r3, [r7, #4]
 80127b0:	791b      	ldrb	r3, [r3, #4]
 80127b2:	3b01      	subs	r3, #1
 80127b4:	18cb      	adds	r3, r1, r3
 80127b6:	781b      	ldrb	r3, [r3, #0]
 80127b8:	061b      	lsls	r3, r3, #24
 80127ba:	431a      	orrs	r2, r3
 80127bc:	687b      	ldr	r3, [r7, #4]
 80127be:	62da      	str	r2, [r3, #44]	; 0x2c

    return LORAMAC_PARSER_SUCCESS;
 80127c0:	2300      	movs	r3, #0
}
 80127c2:	0018      	movs	r0, r3
 80127c4:	46bd      	mov	sp, r7
 80127c6:	b005      	add	sp, #20
 80127c8:	bd90      	pop	{r4, r7, pc}

080127ca <LoRaMacSerializerJoinRequest>:
#include <drivers/lorawan/utilities.h>
#include <drivers/lorawan/mac/LoRaMacSerializer.h>


LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 80127ca:	b5b0      	push	{r4, r5, r7, lr}
 80127cc:	b084      	sub	sp, #16
 80127ce:	af00      	add	r7, sp, #0
 80127d0:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80127d2:	687b      	ldr	r3, [r7, #4]
 80127d4:	2b00      	cmp	r3, #0
 80127d6:	d003      	beq.n	80127e0 <LoRaMacSerializerJoinRequest+0x16>
 80127d8:	687b      	ldr	r3, [r7, #4]
 80127da:	681b      	ldr	r3, [r3, #0]
 80127dc:	2b00      	cmp	r3, #0
 80127de:	d101      	bne.n	80127e4 <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 80127e0:	2301      	movs	r3, #1
 80127e2:	e089      	b.n	80128f8 <LoRaMacSerializerJoinRequest+0x12e>
    }

    uint16_t bufItr = 0;
 80127e4:	230e      	movs	r3, #14
 80127e6:	18fb      	adds	r3, r7, r3
 80127e8:	2200      	movs	r2, #0
 80127ea:	801a      	strh	r2, [r3, #0]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 80127ec:	687b      	ldr	r3, [r7, #4]
 80127ee:	791b      	ldrb	r3, [r3, #4]
 80127f0:	2b16      	cmp	r3, #22
 80127f2:	d801      	bhi.n	80127f8 <LoRaMacSerializerJoinRequest+0x2e>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 80127f4:	2302      	movs	r3, #2
 80127f6:	e07f      	b.n	80128f8 <LoRaMacSerializerJoinRequest+0x12e>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 80127f8:	687b      	ldr	r3, [r7, #4]
 80127fa:	681a      	ldr	r2, [r3, #0]
 80127fc:	240e      	movs	r4, #14
 80127fe:	193b      	adds	r3, r7, r4
 8012800:	881b      	ldrh	r3, [r3, #0]
 8012802:	1939      	adds	r1, r7, r4
 8012804:	1c58      	adds	r0, r3, #1
 8012806:	8008      	strh	r0, [r1, #0]
 8012808:	18d3      	adds	r3, r2, r3
 801280a:	687a      	ldr	r2, [r7, #4]
 801280c:	7952      	ldrb	r2, [r2, #5]
 801280e:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 8012810:	687b      	ldr	r3, [r7, #4]
 8012812:	681a      	ldr	r2, [r3, #0]
 8012814:	193b      	adds	r3, r7, r4
 8012816:	881b      	ldrh	r3, [r3, #0]
 8012818:	18d0      	adds	r0, r2, r3
 801281a:	687b      	ldr	r3, [r7, #4]
 801281c:	3306      	adds	r3, #6
 801281e:	2208      	movs	r2, #8
 8012820:	0019      	movs	r1, r3
 8012822:	f002 ff78 	bl	8015716 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 8012826:	193b      	adds	r3, r7, r4
 8012828:	193a      	adds	r2, r7, r4
 801282a:	8812      	ldrh	r2, [r2, #0]
 801282c:	3208      	adds	r2, #8
 801282e:	801a      	strh	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 8012830:	687b      	ldr	r3, [r7, #4]
 8012832:	681a      	ldr	r2, [r3, #0]
 8012834:	193b      	adds	r3, r7, r4
 8012836:	881b      	ldrh	r3, [r3, #0]
 8012838:	18d0      	adds	r0, r2, r3
 801283a:	687b      	ldr	r3, [r7, #4]
 801283c:	330e      	adds	r3, #14
 801283e:	2208      	movs	r2, #8
 8012840:	0019      	movs	r1, r3
 8012842:	f002 ff68 	bl	8015716 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
 8012846:	193b      	adds	r3, r7, r4
 8012848:	0025      	movs	r5, r4
 801284a:	193a      	adds	r2, r7, r4
 801284c:	8812      	ldrh	r2, [r2, #0]
 801284e:	3208      	adds	r2, #8
 8012850:	801a      	strh	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 8012852:	687b      	ldr	r3, [r7, #4]
 8012854:	8ad8      	ldrh	r0, [r3, #22]
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	681a      	ldr	r2, [r3, #0]
 801285a:	197b      	adds	r3, r7, r5
 801285c:	881b      	ldrh	r3, [r3, #0]
 801285e:	1979      	adds	r1, r7, r5
 8012860:	1c5c      	adds	r4, r3, #1
 8012862:	800c      	strh	r4, [r1, #0]
 8012864:	18d3      	adds	r3, r2, r3
 8012866:	b2c2      	uxtb	r2, r0
 8012868:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 801286a:	687b      	ldr	r3, [r7, #4]
 801286c:	8adb      	ldrh	r3, [r3, #22]
 801286e:	0a1b      	lsrs	r3, r3, #8
 8012870:	b298      	uxth	r0, r3
 8012872:	687b      	ldr	r3, [r7, #4]
 8012874:	681a      	ldr	r2, [r3, #0]
 8012876:	197b      	adds	r3, r7, r5
 8012878:	881b      	ldrh	r3, [r3, #0]
 801287a:	1979      	adds	r1, r7, r5
 801287c:	1c5c      	adds	r4, r3, #1
 801287e:	800c      	strh	r4, [r1, #0]
 8012880:	18d3      	adds	r3, r2, r3
 8012882:	b2c2      	uxtb	r2, r0
 8012884:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8012886:	687b      	ldr	r3, [r7, #4]
 8012888:	6998      	ldr	r0, [r3, #24]
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	681a      	ldr	r2, [r3, #0]
 801288e:	197b      	adds	r3, r7, r5
 8012890:	881b      	ldrh	r3, [r3, #0]
 8012892:	1979      	adds	r1, r7, r5
 8012894:	1c5c      	adds	r4, r3, #1
 8012896:	800c      	strh	r4, [r1, #0]
 8012898:	18d3      	adds	r3, r2, r3
 801289a:	b2c2      	uxtb	r2, r0
 801289c:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 801289e:	687b      	ldr	r3, [r7, #4]
 80128a0:	699b      	ldr	r3, [r3, #24]
 80128a2:	0a18      	lsrs	r0, r3, #8
 80128a4:	687b      	ldr	r3, [r7, #4]
 80128a6:	681a      	ldr	r2, [r3, #0]
 80128a8:	197b      	adds	r3, r7, r5
 80128aa:	881b      	ldrh	r3, [r3, #0]
 80128ac:	1979      	adds	r1, r7, r5
 80128ae:	1c5c      	adds	r4, r3, #1
 80128b0:	800c      	strh	r4, [r1, #0]
 80128b2:	18d3      	adds	r3, r2, r3
 80128b4:	b2c2      	uxtb	r2, r0
 80128b6:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 80128b8:	687b      	ldr	r3, [r7, #4]
 80128ba:	699b      	ldr	r3, [r3, #24]
 80128bc:	0c18      	lsrs	r0, r3, #16
 80128be:	687b      	ldr	r3, [r7, #4]
 80128c0:	681a      	ldr	r2, [r3, #0]
 80128c2:	197b      	adds	r3, r7, r5
 80128c4:	881b      	ldrh	r3, [r3, #0]
 80128c6:	1979      	adds	r1, r7, r5
 80128c8:	1c5c      	adds	r4, r3, #1
 80128ca:	800c      	strh	r4, [r1, #0]
 80128cc:	18d3      	adds	r3, r2, r3
 80128ce:	b2c2      	uxtb	r2, r0
 80128d0:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 80128d2:	687b      	ldr	r3, [r7, #4]
 80128d4:	699b      	ldr	r3, [r3, #24]
 80128d6:	0e18      	lsrs	r0, r3, #24
 80128d8:	687b      	ldr	r3, [r7, #4]
 80128da:	681a      	ldr	r2, [r3, #0]
 80128dc:	197b      	adds	r3, r7, r5
 80128de:	881b      	ldrh	r3, [r3, #0]
 80128e0:	1979      	adds	r1, r7, r5
 80128e2:	1c5c      	adds	r4, r3, #1
 80128e4:	800c      	strh	r4, [r1, #0]
 80128e6:	18d3      	adds	r3, r2, r3
 80128e8:	b2c2      	uxtb	r2, r0
 80128ea:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 80128ec:	197b      	adds	r3, r7, r5
 80128ee:	881b      	ldrh	r3, [r3, #0]
 80128f0:	b2da      	uxtb	r2, r3
 80128f2:	687b      	ldr	r3, [r7, #4]
 80128f4:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 80128f6:	2300      	movs	r3, #0
}
 80128f8:	0018      	movs	r0, r3
 80128fa:	46bd      	mov	sp, r7
 80128fc:	b004      	add	sp, #16
 80128fe:	bdb0      	pop	{r4, r5, r7, pc}

08012900 <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 8012900:	b5b0      	push	{r4, r5, r7, lr}
 8012902:	b084      	sub	sp, #16
 8012904:	af00      	add	r7, sp, #0
 8012906:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8012908:	687b      	ldr	r3, [r7, #4]
 801290a:	2b00      	cmp	r3, #0
 801290c:	d003      	beq.n	8012916 <LoRaMacSerializerData+0x16>
 801290e:	687b      	ldr	r3, [r7, #4]
 8012910:	681b      	ldr	r3, [r3, #0]
 8012912:	2b00      	cmp	r3, #0
 8012914:	d101      	bne.n	801291a <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8012916:	2301      	movs	r3, #1
 8012918:	e110      	b.n	8012b3c <LoRaMacSerializerData+0x23c>
    }

    uint16_t bufItr = 0;
 801291a:	230e      	movs	r3, #14
 801291c:	18fb      	adds	r3, r7, r3
 801291e:	2200      	movs	r2, #0
 8012920:	801a      	strh	r2, [r3, #0]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
 8012922:	230c      	movs	r3, #12
 8012924:	18fb      	adds	r3, r7, r3
 8012926:	2208      	movs	r2, #8
 8012928:	801a      	strh	r2, [r3, #0]
                               + LORAMAC_FHDR_DEV_ADD_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    if( macMsg->FRMPayloadSize == 0 )
 801292a:	687b      	ldr	r3, [r7, #4]
 801292c:	2228      	movs	r2, #40	; 0x28
 801292e:	5c9b      	ldrb	r3, [r3, r2]
 8012930:	2b00      	cmp	r3, #0
 8012932:	d109      	bne.n	8012948 <LoRaMacSerializerData+0x48>
    {
        if( macMsg->BufSize < computedBufSize )
 8012934:	687b      	ldr	r3, [r7, #4]
 8012936:	791b      	ldrb	r3, [r3, #4]
 8012938:	b29b      	uxth	r3, r3
 801293a:	220c      	movs	r2, #12
 801293c:	18ba      	adds	r2, r7, r2
 801293e:	8812      	ldrh	r2, [r2, #0]
 8012940:	429a      	cmp	r2, r3
 8012942:	d916      	bls.n	8012972 <LoRaMacSerializerData+0x72>
        {
            return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8012944:	2302      	movs	r3, #2
 8012946:	e0f9      	b.n	8012b3c <LoRaMacSerializerData+0x23c>
        }
    }
    else
    {   //If FRMPayload >0, FPort field is present.
        if( macMsg->BufSize < computedBufSize + macMsg->FHDR.FCtrl.Bits.FOptsLen + macMsg->FRMPayloadSize + LORAMAC_F_PORT_FIELD_SIZE )
 8012948:	687b      	ldr	r3, [r7, #4]
 801294a:	791b      	ldrb	r3, [r3, #4]
 801294c:	0018      	movs	r0, r3
 801294e:	230c      	movs	r3, #12
 8012950:	18fb      	adds	r3, r7, r3
 8012952:	881b      	ldrh	r3, [r3, #0]
 8012954:	687a      	ldr	r2, [r7, #4]
 8012956:	7b12      	ldrb	r2, [r2, #12]
 8012958:	0712      	lsls	r2, r2, #28
 801295a:	0f12      	lsrs	r2, r2, #28
 801295c:	b2d2      	uxtb	r2, r2
 801295e:	189b      	adds	r3, r3, r2
 8012960:	687a      	ldr	r2, [r7, #4]
 8012962:	2128      	movs	r1, #40	; 0x28
 8012964:	5c52      	ldrb	r2, [r2, r1]
 8012966:	189b      	adds	r3, r3, r2
 8012968:	3301      	adds	r3, #1
 801296a:	4298      	cmp	r0, r3
 801296c:	da01      	bge.n	8012972 <LoRaMacSerializerData+0x72>
        {
            return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 801296e:	2302      	movs	r3, #2
 8012970:	e0e4      	b.n	8012b3c <LoRaMacSerializerData+0x23c>
        }
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8012972:	687b      	ldr	r3, [r7, #4]
 8012974:	681a      	ldr	r2, [r3, #0]
 8012976:	250e      	movs	r5, #14
 8012978:	197b      	adds	r3, r7, r5
 801297a:	881b      	ldrh	r3, [r3, #0]
 801297c:	1979      	adds	r1, r7, r5
 801297e:	1c58      	adds	r0, r3, #1
 8012980:	8008      	strh	r0, [r1, #0]
 8012982:	18d3      	adds	r3, r2, r3
 8012984:	687a      	ldr	r2, [r7, #4]
 8012986:	7952      	ldrb	r2, [r2, #5]
 8012988:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 801298a:	687b      	ldr	r3, [r7, #4]
 801298c:	6898      	ldr	r0, [r3, #8]
 801298e:	687b      	ldr	r3, [r7, #4]
 8012990:	681a      	ldr	r2, [r3, #0]
 8012992:	197b      	adds	r3, r7, r5
 8012994:	881b      	ldrh	r3, [r3, #0]
 8012996:	1979      	adds	r1, r7, r5
 8012998:	1c5c      	adds	r4, r3, #1
 801299a:	800c      	strh	r4, [r1, #0]
 801299c:	18d3      	adds	r3, r2, r3
 801299e:	b2c2      	uxtb	r2, r0
 80129a0:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 80129a2:	687b      	ldr	r3, [r7, #4]
 80129a4:	689b      	ldr	r3, [r3, #8]
 80129a6:	0a18      	lsrs	r0, r3, #8
 80129a8:	687b      	ldr	r3, [r7, #4]
 80129aa:	681a      	ldr	r2, [r3, #0]
 80129ac:	197b      	adds	r3, r7, r5
 80129ae:	881b      	ldrh	r3, [r3, #0]
 80129b0:	1979      	adds	r1, r7, r5
 80129b2:	1c5c      	adds	r4, r3, #1
 80129b4:	800c      	strh	r4, [r1, #0]
 80129b6:	18d3      	adds	r3, r2, r3
 80129b8:	b2c2      	uxtb	r2, r0
 80129ba:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 80129bc:	687b      	ldr	r3, [r7, #4]
 80129be:	689b      	ldr	r3, [r3, #8]
 80129c0:	0c18      	lsrs	r0, r3, #16
 80129c2:	687b      	ldr	r3, [r7, #4]
 80129c4:	681a      	ldr	r2, [r3, #0]
 80129c6:	197b      	adds	r3, r7, r5
 80129c8:	881b      	ldrh	r3, [r3, #0]
 80129ca:	1979      	adds	r1, r7, r5
 80129cc:	1c5c      	adds	r4, r3, #1
 80129ce:	800c      	strh	r4, [r1, #0]
 80129d0:	18d3      	adds	r3, r2, r3
 80129d2:	b2c2      	uxtb	r2, r0
 80129d4:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 80129d6:	687b      	ldr	r3, [r7, #4]
 80129d8:	689b      	ldr	r3, [r3, #8]
 80129da:	0e18      	lsrs	r0, r3, #24
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	681a      	ldr	r2, [r3, #0]
 80129e0:	197b      	adds	r3, r7, r5
 80129e2:	881b      	ldrh	r3, [r3, #0]
 80129e4:	1979      	adds	r1, r7, r5
 80129e6:	1c5c      	adds	r4, r3, #1
 80129e8:	800c      	strh	r4, [r1, #0]
 80129ea:	18d3      	adds	r3, r2, r3
 80129ec:	b2c2      	uxtb	r2, r0
 80129ee:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 80129f0:	687b      	ldr	r3, [r7, #4]
 80129f2:	681a      	ldr	r2, [r3, #0]
 80129f4:	197b      	adds	r3, r7, r5
 80129f6:	881b      	ldrh	r3, [r3, #0]
 80129f8:	1979      	adds	r1, r7, r5
 80129fa:	1c58      	adds	r0, r3, #1
 80129fc:	8008      	strh	r0, [r1, #0]
 80129fe:	18d3      	adds	r3, r2, r3
 8012a00:	687a      	ldr	r2, [r7, #4]
 8012a02:	7b12      	ldrb	r2, [r2, #12]
 8012a04:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 8012a06:	687b      	ldr	r3, [r7, #4]
 8012a08:	89d8      	ldrh	r0, [r3, #14]
 8012a0a:	687b      	ldr	r3, [r7, #4]
 8012a0c:	681a      	ldr	r2, [r3, #0]
 8012a0e:	197b      	adds	r3, r7, r5
 8012a10:	881b      	ldrh	r3, [r3, #0]
 8012a12:	1979      	adds	r1, r7, r5
 8012a14:	1c5c      	adds	r4, r3, #1
 8012a16:	800c      	strh	r4, [r1, #0]
 8012a18:	18d3      	adds	r3, r2, r3
 8012a1a:	b2c2      	uxtb	r2, r0
 8012a1c:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 8012a1e:	687b      	ldr	r3, [r7, #4]
 8012a20:	89db      	ldrh	r3, [r3, #14]
 8012a22:	0a1b      	lsrs	r3, r3, #8
 8012a24:	b298      	uxth	r0, r3
 8012a26:	687b      	ldr	r3, [r7, #4]
 8012a28:	681a      	ldr	r2, [r3, #0]
 8012a2a:	197b      	adds	r3, r7, r5
 8012a2c:	881b      	ldrh	r3, [r3, #0]
 8012a2e:	1979      	adds	r1, r7, r5
 8012a30:	1c5c      	adds	r4, r3, #1
 8012a32:	800c      	strh	r4, [r1, #0]
 8012a34:	18d3      	adds	r3, r2, r3
 8012a36:	b2c2      	uxtb	r2, r0
 8012a38:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8012a3a:	687b      	ldr	r3, [r7, #4]
 8012a3c:	681a      	ldr	r2, [r3, #0]
 8012a3e:	002c      	movs	r4, r5
 8012a40:	197b      	adds	r3, r7, r5
 8012a42:	881b      	ldrh	r3, [r3, #0]
 8012a44:	18d0      	adds	r0, r2, r3
 8012a46:	687b      	ldr	r3, [r7, #4]
 8012a48:	3310      	adds	r3, #16
 8012a4a:	0019      	movs	r1, r3
 8012a4c:	687b      	ldr	r3, [r7, #4]
 8012a4e:	7b1b      	ldrb	r3, [r3, #12]
 8012a50:	071b      	lsls	r3, r3, #28
 8012a52:	0f1b      	lsrs	r3, r3, #28
 8012a54:	b2db      	uxtb	r3, r3
 8012a56:	b29b      	uxth	r3, r3
 8012a58:	001a      	movs	r2, r3
 8012a5a:	f002 fe41 	bl	80156e0 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8012a5e:	687b      	ldr	r3, [r7, #4]
 8012a60:	7b1b      	ldrb	r3, [r3, #12]
 8012a62:	071b      	lsls	r3, r3, #28
 8012a64:	0f1b      	lsrs	r3, r3, #28
 8012a66:	b2db      	uxtb	r3, r3
 8012a68:	b299      	uxth	r1, r3
 8012a6a:	193b      	adds	r3, r7, r4
 8012a6c:	193a      	adds	r2, r7, r4
 8012a6e:	8812      	ldrh	r2, [r2, #0]
 8012a70:	188a      	adds	r2, r1, r2
 8012a72:	801a      	strh	r2, [r3, #0]

    if( macMsg->FRMPayloadSize > 0 )
 8012a74:	687b      	ldr	r3, [r7, #4]
 8012a76:	2228      	movs	r2, #40	; 0x28
 8012a78:	5c9b      	ldrb	r3, [r3, r2]
 8012a7a:	2b00      	cmp	r3, #0
 8012a7c:	d00c      	beq.n	8012a98 <LoRaMacSerializerData+0x198>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	681a      	ldr	r2, [r3, #0]
 8012a82:	210e      	movs	r1, #14
 8012a84:	187b      	adds	r3, r7, r1
 8012a86:	881b      	ldrh	r3, [r3, #0]
 8012a88:	1879      	adds	r1, r7, r1
 8012a8a:	1c58      	adds	r0, r3, #1
 8012a8c:	8008      	strh	r0, [r1, #0]
 8012a8e:	18d3      	adds	r3, r2, r3
 8012a90:	687a      	ldr	r2, [r7, #4]
 8012a92:	2120      	movs	r1, #32
 8012a94:	5c52      	ldrb	r2, [r2, r1]
 8012a96:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 8012a98:	687b      	ldr	r3, [r7, #4]
 8012a9a:	681a      	ldr	r2, [r3, #0]
 8012a9c:	240e      	movs	r4, #14
 8012a9e:	193b      	adds	r3, r7, r4
 8012aa0:	881b      	ldrh	r3, [r3, #0]
 8012aa2:	18d0      	adds	r0, r2, r3
 8012aa4:	687b      	ldr	r3, [r7, #4]
 8012aa6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	2228      	movs	r2, #40	; 0x28
 8012aac:	5c9b      	ldrb	r3, [r3, r2]
 8012aae:	b29b      	uxth	r3, r3
 8012ab0:	001a      	movs	r2, r3
 8012ab2:	f002 fe15 	bl	80156e0 <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 8012ab6:	687b      	ldr	r3, [r7, #4]
 8012ab8:	2228      	movs	r2, #40	; 0x28
 8012aba:	5c9b      	ldrb	r3, [r3, r2]
 8012abc:	b299      	uxth	r1, r3
 8012abe:	193b      	adds	r3, r7, r4
 8012ac0:	193a      	adds	r2, r7, r4
 8012ac2:	8812      	ldrh	r2, [r2, #0]
 8012ac4:	188a      	adds	r2, r1, r2
 8012ac6:	801a      	strh	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8012ac8:	687b      	ldr	r3, [r7, #4]
 8012aca:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8012acc:	687b      	ldr	r3, [r7, #4]
 8012ace:	681a      	ldr	r2, [r3, #0]
 8012ad0:	193b      	adds	r3, r7, r4
 8012ad2:	881b      	ldrh	r3, [r3, #0]
 8012ad4:	0025      	movs	r5, r4
 8012ad6:	1939      	adds	r1, r7, r4
 8012ad8:	1c5c      	adds	r4, r3, #1
 8012ada:	800c      	strh	r4, [r1, #0]
 8012adc:	18d3      	adds	r3, r2, r3
 8012ade:	b2c2      	uxtb	r2, r0
 8012ae0:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8012ae2:	687b      	ldr	r3, [r7, #4]
 8012ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ae6:	0a18      	lsrs	r0, r3, #8
 8012ae8:	687b      	ldr	r3, [r7, #4]
 8012aea:	681a      	ldr	r2, [r3, #0]
 8012aec:	197b      	adds	r3, r7, r5
 8012aee:	881b      	ldrh	r3, [r3, #0]
 8012af0:	1979      	adds	r1, r7, r5
 8012af2:	1c5c      	adds	r4, r3, #1
 8012af4:	800c      	strh	r4, [r1, #0]
 8012af6:	18d3      	adds	r3, r2, r3
 8012af8:	b2c2      	uxtb	r2, r0
 8012afa:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8012afc:	687b      	ldr	r3, [r7, #4]
 8012afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b00:	0c18      	lsrs	r0, r3, #16
 8012b02:	687b      	ldr	r3, [r7, #4]
 8012b04:	681a      	ldr	r2, [r3, #0]
 8012b06:	197b      	adds	r3, r7, r5
 8012b08:	881b      	ldrh	r3, [r3, #0]
 8012b0a:	1979      	adds	r1, r7, r5
 8012b0c:	1c5c      	adds	r4, r3, #1
 8012b0e:	800c      	strh	r4, [r1, #0]
 8012b10:	18d3      	adds	r3, r2, r3
 8012b12:	b2c2      	uxtb	r2, r0
 8012b14:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8012b16:	687b      	ldr	r3, [r7, #4]
 8012b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b1a:	0e18      	lsrs	r0, r3, #24
 8012b1c:	687b      	ldr	r3, [r7, #4]
 8012b1e:	681a      	ldr	r2, [r3, #0]
 8012b20:	197b      	adds	r3, r7, r5
 8012b22:	881b      	ldrh	r3, [r3, #0]
 8012b24:	1979      	adds	r1, r7, r5
 8012b26:	1c5c      	adds	r4, r3, #1
 8012b28:	800c      	strh	r4, [r1, #0]
 8012b2a:	18d3      	adds	r3, r2, r3
 8012b2c:	b2c2      	uxtb	r2, r0
 8012b2e:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8012b30:	197b      	adds	r3, r7, r5
 8012b32:	881b      	ldrh	r3, [r3, #0]
 8012b34:	b2da      	uxtb	r2, r3
 8012b36:	687b      	ldr	r3, [r7, #4]
 8012b38:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8012b3a:	2300      	movs	r3, #0
}
 8012b3c:	0018      	movs	r0, r3
 8012b3e:	46bd      	mov	sp, r7
 8012b40:	b004      	add	sp, #16
 8012b42:	bdb0      	pop	{r4, r5, r7, pc}

08012b44 <RegionIsActive>:
#define RU864_APPLY_DR_OFFSET( )
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
 8012b44:	b580      	push	{r7, lr}
 8012b46:	b082      	sub	sp, #8
 8012b48:	af00      	add	r7, sp, #0
 8012b4a:	0002      	movs	r2, r0
 8012b4c:	1dfb      	adds	r3, r7, #7
 8012b4e:	701a      	strb	r2, [r3, #0]
    switch( region )
 8012b50:	1dfb      	adds	r3, r7, #7
 8012b52:	781b      	ldrb	r3, [r3, #0]
 8012b54:	2b05      	cmp	r3, #5
 8012b56:	d101      	bne.n	8012b5c <RegionIsActive+0x18>
        AS923_IS_ACTIVE( );
        AU915_IS_ACTIVE( );
        CN470_IS_ACTIVE( );
        CN779_IS_ACTIVE( );
        EU433_IS_ACTIVE( );
        EU868_IS_ACTIVE( );
 8012b58:	2301      	movs	r3, #1
 8012b5a:	e000      	b.n	8012b5e <RegionIsActive+0x1a>
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 8012b5c:	2300      	movs	r3, #0
        }
    }
}
 8012b5e:	0018      	movs	r0, r3
 8012b60:	46bd      	mov	sp, r7
 8012b62:	b002      	add	sp, #8
 8012b64:	bd80      	pop	{r7, pc}

08012b66 <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 8012b66:	b580      	push	{r7, lr}
 8012b68:	b084      	sub	sp, #16
 8012b6a:	af00      	add	r7, sp, #0
 8012b6c:	0002      	movs	r2, r0
 8012b6e:	6039      	str	r1, [r7, #0]
 8012b70:	1dfb      	adds	r3, r7, #7
 8012b72:	701a      	strb	r2, [r3, #0]
    PhyParam_t phyParam = { 0 };
 8012b74:	2308      	movs	r3, #8
 8012b76:	18fb      	adds	r3, r7, r3
 8012b78:	2200      	movs	r2, #0
 8012b7a:	601a      	str	r2, [r3, #0]
    switch( region )
 8012b7c:	1dfb      	adds	r3, r7, #7
 8012b7e:	781b      	ldrb	r3, [r3, #0]
 8012b80:	2b05      	cmp	r3, #5
 8012b82:	d109      	bne.n	8012b98 <RegionGetPhyParam+0x32>
        AS923_GET_PHY_PARAM( );
        AU915_GET_PHY_PARAM( );
        CN470_GET_PHY_PARAM( );
        CN779_GET_PHY_PARAM( );
        EU433_GET_PHY_PARAM( );
        EU868_GET_PHY_PARAM( );
 8012b84:	683b      	ldr	r3, [r7, #0]
 8012b86:	0018      	movs	r0, r3
 8012b88:	f001 f958 	bl	8013e3c <RegionEU868GetPhyParam>
 8012b8c:	0003      	movs	r3, r0
 8012b8e:	001a      	movs	r2, r3
 8012b90:	230c      	movs	r3, #12
 8012b92:	18fb      	adds	r3, r7, r3
 8012b94:	601a      	str	r2, [r3, #0]
 8012b96:	e005      	b.n	8012ba4 <RegionGetPhyParam+0x3e>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 8012b98:	230c      	movs	r3, #12
 8012b9a:	18fb      	adds	r3, r7, r3
 8012b9c:	2208      	movs	r2, #8
 8012b9e:	18ba      	adds	r2, r7, r2
 8012ba0:	6812      	ldr	r2, [r2, #0]
 8012ba2:	601a      	str	r2, [r3, #0]
 8012ba4:	230c      	movs	r3, #12
 8012ba6:	18fb      	adds	r3, r7, r3
 8012ba8:	2200      	movs	r2, #0
 8012baa:	681a      	ldr	r2, [r3, #0]
 8012bac:	0013      	movs	r3, r2
        }
    }
}
 8012bae:	0018      	movs	r0, r3
 8012bb0:	46bd      	mov	sp, r7
 8012bb2:	b004      	add	sp, #16
 8012bb4:	bd80      	pop	{r7, pc}

08012bb6 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 8012bb6:	b580      	push	{r7, lr}
 8012bb8:	b082      	sub	sp, #8
 8012bba:	af00      	add	r7, sp, #0
 8012bbc:	0002      	movs	r2, r0
 8012bbe:	6039      	str	r1, [r7, #0]
 8012bc0:	1dfb      	adds	r3, r7, #7
 8012bc2:	701a      	strb	r2, [r3, #0]
    switch( region )
 8012bc4:	1dfb      	adds	r3, r7, #7
 8012bc6:	781b      	ldrb	r3, [r3, #0]
 8012bc8:	2b05      	cmp	r3, #5
 8012bca:	d000      	beq.n	8012bce <RegionSetBandTxDone+0x18>
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
        RU864_SET_BAND_TX_DONE( );
        default:
        {
            return;
 8012bcc:	e004      	b.n	8012bd8 <RegionSetBandTxDone+0x22>
        EU868_SET_BAND_TX_DONE( );
 8012bce:	683b      	ldr	r3, [r7, #0]
 8012bd0:	0018      	movs	r0, r3
 8012bd2:	f001 fa37 	bl	8014044 <RegionEU868SetBandTxDone>
 8012bd6:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 8012bd8:	46bd      	mov	sp, r7
 8012bda:	b002      	add	sp, #8
 8012bdc:	bd80      	pop	{r7, pc}

08012bde <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 8012bde:	b580      	push	{r7, lr}
 8012be0:	b082      	sub	sp, #8
 8012be2:	af00      	add	r7, sp, #0
 8012be4:	0002      	movs	r2, r0
 8012be6:	6039      	str	r1, [r7, #0]
 8012be8:	1dfb      	adds	r3, r7, #7
 8012bea:	701a      	strb	r2, [r3, #0]
    switch( region )
 8012bec:	1dfb      	adds	r3, r7, #7
 8012bee:	781b      	ldrb	r3, [r3, #0]
 8012bf0:	2b05      	cmp	r3, #5
 8012bf2:	d000      	beq.n	8012bf6 <RegionInitDefaults+0x18>
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
        RU864_INIT_DEFAULTS( );
        default:
        {
            break;
 8012bf4:	e004      	b.n	8012c00 <RegionInitDefaults+0x22>
        EU868_INIT_DEFAULTS( );
 8012bf6:	683b      	ldr	r3, [r7, #0]
 8012bf8:	0018      	movs	r0, r3
 8012bfa:	f001 fa43 	bl	8014084 <RegionEU868InitDefaults>
 8012bfe:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 8012c00:	46c0      	nop			; (mov r8, r8)
 8012c02:	46bd      	mov	sp, r7
 8012c04:	b002      	add	sp, #8
 8012c06:	bd80      	pop	{r7, pc}

08012c08 <RegionGetNvmCtx>:

void* RegionGetNvmCtx( LoRaMacRegion_t region, GetNvmCtxParams_t* params )
{
 8012c08:	b580      	push	{r7, lr}
 8012c0a:	b082      	sub	sp, #8
 8012c0c:	af00      	add	r7, sp, #0
 8012c0e:	0002      	movs	r2, r0
 8012c10:	6039      	str	r1, [r7, #0]
 8012c12:	1dfb      	adds	r3, r7, #7
 8012c14:	701a      	strb	r2, [r3, #0]
    switch( region )
 8012c16:	1dfb      	adds	r3, r7, #7
 8012c18:	781b      	ldrb	r3, [r3, #0]
 8012c1a:	2b05      	cmp	r3, #5
 8012c1c:	d105      	bne.n	8012c2a <RegionGetNvmCtx+0x22>
        AS923_GET_NVM_CTX( );
        AU915_GET_NVM_CTX( );
        CN470_GET_NVM_CTX( );
        CN779_GET_NVM_CTX( );
        EU433_GET_NVM_CTX( );
        EU868_GET_NVM_CTX( );
 8012c1e:	683b      	ldr	r3, [r7, #0]
 8012c20:	0018      	movs	r0, r3
 8012c22:	f001 faa7 	bl	8014174 <RegionEU868GetNvmCtx>
 8012c26:	0003      	movs	r3, r0
 8012c28:	e000      	b.n	8012c2c <RegionGetNvmCtx+0x24>
        IN865_GET_NVM_CTX( );
        US915_GET_NVM_CTX( );
        RU864_GET_NVM_CTX( );
        default:
        {
           return 0;
 8012c2a:	2300      	movs	r3, #0
        }
    }
}
 8012c2c:	0018      	movs	r0, r3
 8012c2e:	46bd      	mov	sp, r7
 8012c30:	b002      	add	sp, #8
 8012c32:	bd80      	pop	{r7, pc}

08012c34 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8012c34:	b580      	push	{r7, lr}
 8012c36:	b082      	sub	sp, #8
 8012c38:	af00      	add	r7, sp, #0
 8012c3a:	6039      	str	r1, [r7, #0]
 8012c3c:	0011      	movs	r1, r2
 8012c3e:	1dfb      	adds	r3, r7, #7
 8012c40:	1c02      	adds	r2, r0, #0
 8012c42:	701a      	strb	r2, [r3, #0]
 8012c44:	1dbb      	adds	r3, r7, #6
 8012c46:	1c0a      	adds	r2, r1, #0
 8012c48:	701a      	strb	r2, [r3, #0]
    switch( region )
 8012c4a:	1dfb      	adds	r3, r7, #7
 8012c4c:	781b      	ldrb	r3, [r3, #0]
 8012c4e:	2b05      	cmp	r3, #5
 8012c50:	d108      	bne.n	8012c64 <RegionVerify+0x30>
        AS923_VERIFY( );
        AU915_VERIFY( );
        CN470_VERIFY( );
        CN779_VERIFY( );
        EU433_VERIFY( );
        EU868_VERIFY( );
 8012c52:	1dbb      	adds	r3, r7, #6
 8012c54:	781a      	ldrb	r2, [r3, #0]
 8012c56:	683b      	ldr	r3, [r7, #0]
 8012c58:	0011      	movs	r1, r2
 8012c5a:	0018      	movs	r0, r3
 8012c5c:	f001 fa9a 	bl	8014194 <RegionEU868Verify>
 8012c60:	0003      	movs	r3, r0
 8012c62:	e000      	b.n	8012c66 <RegionVerify+0x32>
        IN865_VERIFY( );
        US915_VERIFY( );
        RU864_VERIFY( );
        default:
        {
            return false;
 8012c64:	2300      	movs	r3, #0
        }
    }
}
 8012c66:	0018      	movs	r0, r3
 8012c68:	46bd      	mov	sp, r7
 8012c6a:	b002      	add	sp, #8
 8012c6c:	bd80      	pop	{r7, pc}

08012c6e <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 8012c6e:	b580      	push	{r7, lr}
 8012c70:	b082      	sub	sp, #8
 8012c72:	af00      	add	r7, sp, #0
 8012c74:	0002      	movs	r2, r0
 8012c76:	6039      	str	r1, [r7, #0]
 8012c78:	1dfb      	adds	r3, r7, #7
 8012c7a:	701a      	strb	r2, [r3, #0]
    switch( region )
 8012c7c:	1dfb      	adds	r3, r7, #7
 8012c7e:	781b      	ldrb	r3, [r3, #0]
 8012c80:	2b05      	cmp	r3, #5
 8012c82:	d000      	beq.n	8012c86 <RegionApplyCFList+0x18>
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
        RU864_APPLY_CF_LIST( );
        default:
        {
            break;
 8012c84:	e004      	b.n	8012c90 <RegionApplyCFList+0x22>
        EU868_APPLY_CF_LIST( );
 8012c86:	683b      	ldr	r3, [r7, #0]
 8012c88:	0018      	movs	r0, r3
 8012c8a:	f001 fad1 	bl	8014230 <RegionEU868ApplyCFList>
 8012c8e:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 8012c90:	46c0      	nop			; (mov r8, r8)
 8012c92:	46bd      	mov	sp, r7
 8012c94:	b002      	add	sp, #8
 8012c96:	bd80      	pop	{r7, pc}

08012c98 <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 8012c98:	b580      	push	{r7, lr}
 8012c9a:	b082      	sub	sp, #8
 8012c9c:	af00      	add	r7, sp, #0
 8012c9e:	0002      	movs	r2, r0
 8012ca0:	6039      	str	r1, [r7, #0]
 8012ca2:	1dfb      	adds	r3, r7, #7
 8012ca4:	701a      	strb	r2, [r3, #0]
    switch( region )
 8012ca6:	1dfb      	adds	r3, r7, #7
 8012ca8:	781b      	ldrb	r3, [r3, #0]
 8012caa:	2b05      	cmp	r3, #5
 8012cac:	d105      	bne.n	8012cba <RegionChanMaskSet+0x22>
        AS923_CHAN_MASK_SET( );
        AU915_CHAN_MASK_SET( );
        CN470_CHAN_MASK_SET( );
        CN779_CHAN_MASK_SET( );
        EU433_CHAN_MASK_SET( );
        EU868_CHAN_MASK_SET( );
 8012cae:	683b      	ldr	r3, [r7, #0]
 8012cb0:	0018      	movs	r0, r3
 8012cb2:	f001 fb4f 	bl	8014354 <RegionEU868ChanMaskSet>
 8012cb6:	0003      	movs	r3, r0
 8012cb8:	e000      	b.n	8012cbc <RegionChanMaskSet+0x24>
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 8012cba:	2300      	movs	r3, #0
        }
    }
}
 8012cbc:	0018      	movs	r0, r3
 8012cbe:	46bd      	mov	sp, r7
 8012cc0:	b002      	add	sp, #8
 8012cc2:	bd80      	pop	{r7, pc}

08012cc4 <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8012cc4:	b590      	push	{r4, r7, lr}
 8012cc6:	b083      	sub	sp, #12
 8012cc8:	af00      	add	r7, sp, #0
 8012cca:	0004      	movs	r4, r0
 8012ccc:	0008      	movs	r0, r1
 8012cce:	0011      	movs	r1, r2
 8012cd0:	603b      	str	r3, [r7, #0]
 8012cd2:	1dfb      	adds	r3, r7, #7
 8012cd4:	1c22      	adds	r2, r4, #0
 8012cd6:	701a      	strb	r2, [r3, #0]
 8012cd8:	1dbb      	adds	r3, r7, #6
 8012cda:	1c02      	adds	r2, r0, #0
 8012cdc:	701a      	strb	r2, [r3, #0]
 8012cde:	1d7b      	adds	r3, r7, #5
 8012ce0:	1c0a      	adds	r2, r1, #0
 8012ce2:	701a      	strb	r2, [r3, #0]
    switch( region )
 8012ce4:	1dfb      	adds	r3, r7, #7
 8012ce6:	781b      	ldrb	r3, [r3, #0]
 8012ce8:	2b05      	cmp	r3, #5
 8012cea:	d000      	beq.n	8012cee <RegionComputeRxWindowParameters+0x2a>
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
 8012cec:	e00a      	b.n	8012d04 <RegionComputeRxWindowParameters+0x40>
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 8012cee:	69bc      	ldr	r4, [r7, #24]
 8012cf0:	683a      	ldr	r2, [r7, #0]
 8012cf2:	1d7b      	adds	r3, r7, #5
 8012cf4:	7819      	ldrb	r1, [r3, #0]
 8012cf6:	1dbb      	adds	r3, r7, #6
 8012cf8:	2000      	movs	r0, #0
 8012cfa:	5618      	ldrsb	r0, [r3, r0]
 8012cfc:	0023      	movs	r3, r4
 8012cfe:	f001 fb4f 	bl	80143a0 <RegionEU868ComputeRxWindowParameters>
 8012d02:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 8012d04:	46c0      	nop			; (mov r8, r8)
 8012d06:	46bd      	mov	sp, r7
 8012d08:	b003      	add	sp, #12
 8012d0a:	bd90      	pop	{r4, r7, pc}

08012d0c <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8012d0c:	b580      	push	{r7, lr}
 8012d0e:	b084      	sub	sp, #16
 8012d10:	af00      	add	r7, sp, #0
 8012d12:	60b9      	str	r1, [r7, #8]
 8012d14:	607a      	str	r2, [r7, #4]
 8012d16:	210f      	movs	r1, #15
 8012d18:	187b      	adds	r3, r7, r1
 8012d1a:	1c02      	adds	r2, r0, #0
 8012d1c:	701a      	strb	r2, [r3, #0]
    switch( region )
 8012d1e:	187b      	adds	r3, r7, r1
 8012d20:	781b      	ldrb	r3, [r3, #0]
 8012d22:	2b05      	cmp	r3, #5
 8012d24:	d107      	bne.n	8012d36 <RegionRxConfig+0x2a>
        AS923_RX_CONFIG( );
        AU915_RX_CONFIG( );
        CN470_RX_CONFIG( );
        CN779_RX_CONFIG( );
        EU433_RX_CONFIG( );
        EU868_RX_CONFIG( );
 8012d26:	687a      	ldr	r2, [r7, #4]
 8012d28:	68bb      	ldr	r3, [r7, #8]
 8012d2a:	0011      	movs	r1, r2
 8012d2c:	0018      	movs	r0, r3
 8012d2e:	f001 fba1 	bl	8014474 <RegionEU868RxConfig>
 8012d32:	0003      	movs	r3, r0
 8012d34:	e000      	b.n	8012d38 <RegionRxConfig+0x2c>
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 8012d36:	2300      	movs	r3, #0
        }
    }
}
 8012d38:	0018      	movs	r0, r3
 8012d3a:	46bd      	mov	sp, r7
 8012d3c:	b004      	add	sp, #16
 8012d3e:	bd80      	pop	{r7, pc}

08012d40 <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8012d40:	b580      	push	{r7, lr}
 8012d42:	b084      	sub	sp, #16
 8012d44:	af00      	add	r7, sp, #0
 8012d46:	60b9      	str	r1, [r7, #8]
 8012d48:	607a      	str	r2, [r7, #4]
 8012d4a:	603b      	str	r3, [r7, #0]
 8012d4c:	210f      	movs	r1, #15
 8012d4e:	187b      	adds	r3, r7, r1
 8012d50:	1c02      	adds	r2, r0, #0
 8012d52:	701a      	strb	r2, [r3, #0]
    switch( region )
 8012d54:	187b      	adds	r3, r7, r1
 8012d56:	781b      	ldrb	r3, [r3, #0]
 8012d58:	2b05      	cmp	r3, #5
 8012d5a:	d107      	bne.n	8012d6c <RegionTxConfig+0x2c>
        AS923_TX_CONFIG( );
        AU915_TX_CONFIG( );
        CN470_TX_CONFIG( );
        CN779_TX_CONFIG( );
        EU433_TX_CONFIG( );
        EU868_TX_CONFIG( );
 8012d5c:	683a      	ldr	r2, [r7, #0]
 8012d5e:	6879      	ldr	r1, [r7, #4]
 8012d60:	68bb      	ldr	r3, [r7, #8]
 8012d62:	0018      	movs	r0, r3
 8012d64:	f001 fc72 	bl	801464c <RegionEU868TxConfig>
 8012d68:	0003      	movs	r3, r0
 8012d6a:	e000      	b.n	8012d6e <RegionTxConfig+0x2e>
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 8012d6c:	2300      	movs	r3, #0
        }
    }
}
 8012d6e:	0018      	movs	r0, r3
 8012d70:	46bd      	mov	sp, r7
 8012d72:	b004      	add	sp, #16
 8012d74:	bd80      	pop	{r7, pc}

08012d76 <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8012d76:	b590      	push	{r4, r7, lr}
 8012d78:	b087      	sub	sp, #28
 8012d7a:	af02      	add	r7, sp, #8
 8012d7c:	60b9      	str	r1, [r7, #8]
 8012d7e:	607a      	str	r2, [r7, #4]
 8012d80:	603b      	str	r3, [r7, #0]
 8012d82:	210f      	movs	r1, #15
 8012d84:	187b      	adds	r3, r7, r1
 8012d86:	1c02      	adds	r2, r0, #0
 8012d88:	701a      	strb	r2, [r3, #0]
    switch( region )
 8012d8a:	187b      	adds	r3, r7, r1
 8012d8c:	781b      	ldrb	r3, [r3, #0]
 8012d8e:	2b05      	cmp	r3, #5
 8012d90:	d10a      	bne.n	8012da8 <RegionLinkAdrReq+0x32>
        //AS923_LINK_ADR_REQ( );
        //AU915_LINK_ADR_REQ( );
       // CN470_LINK_ADR_REQ( );
       // CN779_LINK_ADR_REQ( );
        EU433_LINK_ADR_REQ( );
        EU868_LINK_ADR_REQ( );
 8012d92:	6a3c      	ldr	r4, [r7, #32]
 8012d94:	683a      	ldr	r2, [r7, #0]
 8012d96:	6879      	ldr	r1, [r7, #4]
 8012d98:	68b8      	ldr	r0, [r7, #8]
 8012d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d9c:	9300      	str	r3, [sp, #0]
 8012d9e:	0023      	movs	r3, r4
 8012da0:	f001 fd2c 	bl	80147fc <RegionEU868LinkAdrReq>
 8012da4:	0003      	movs	r3, r0
 8012da6:	e000      	b.n	8012daa <RegionLinkAdrReq+0x34>
       // IN865_LINK_ADR_REQ( );
       // US915_LINK_ADR_REQ( );
       // RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 8012da8:	2300      	movs	r3, #0
        }
    }
}
 8012daa:	0018      	movs	r0, r3
 8012dac:	46bd      	mov	sp, r7
 8012dae:	b005      	add	sp, #20
 8012db0:	bd90      	pop	{r4, r7, pc}

08012db2 <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 8012db2:	b580      	push	{r7, lr}
 8012db4:	b082      	sub	sp, #8
 8012db6:	af00      	add	r7, sp, #0
 8012db8:	0002      	movs	r2, r0
 8012dba:	6039      	str	r1, [r7, #0]
 8012dbc:	1dfb      	adds	r3, r7, #7
 8012dbe:	701a      	strb	r2, [r3, #0]
    switch( region )
 8012dc0:	1dfb      	adds	r3, r7, #7
 8012dc2:	781b      	ldrb	r3, [r3, #0]
 8012dc4:	2b05      	cmp	r3, #5
 8012dc6:	d105      	bne.n	8012dd4 <RegionRxParamSetupReq+0x22>
        AS923_RX_PARAM_SETUP_REQ( );
        AU915_RX_PARAM_SETUP_REQ( );
        CN470_RX_PARAM_SETUP_REQ( );
        CN779_RX_PARAM_SETUP_REQ( );
        EU433_RX_PARAM_SETUP_REQ( );
        EU868_RX_PARAM_SETUP_REQ( );
 8012dc8:	683b      	ldr	r3, [r7, #0]
 8012dca:	0018      	movs	r0, r3
 8012dcc:	f001 fe6c 	bl	8014aa8 <RegionEU868RxParamSetupReq>
 8012dd0:	0003      	movs	r3, r0
 8012dd2:	e000      	b.n	8012dd6 <RegionRxParamSetupReq+0x24>
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8012dd4:	2300      	movs	r3, #0
        }
    }
}
 8012dd6:	0018      	movs	r0, r3
 8012dd8:	46bd      	mov	sp, r7
 8012dda:	b002      	add	sp, #8
 8012ddc:	bd80      	pop	{r7, pc}

08012dde <RegionNewChannelReq>:

uint8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 8012dde:	b580      	push	{r7, lr}
 8012de0:	b082      	sub	sp, #8
 8012de2:	af00      	add	r7, sp, #0
 8012de4:	0002      	movs	r2, r0
 8012de6:	6039      	str	r1, [r7, #0]
 8012de8:	1dfb      	adds	r3, r7, #7
 8012dea:	701a      	strb	r2, [r3, #0]
    switch( region )
 8012dec:	1dfb      	adds	r3, r7, #7
 8012dee:	781b      	ldrb	r3, [r3, #0]
 8012df0:	2b05      	cmp	r3, #5
 8012df2:	d105      	bne.n	8012e00 <RegionNewChannelReq+0x22>
        AS923_NEW_CHANNEL_REQ( );
        AU915_NEW_CHANNEL_REQ( );
        CN470_NEW_CHANNEL_REQ( );
        CN779_NEW_CHANNEL_REQ( );
        EU433_NEW_CHANNEL_REQ( );
        EU868_NEW_CHANNEL_REQ( );
 8012df4:	683b      	ldr	r3, [r7, #0]
 8012df6:	0018      	movs	r0, r3
 8012df8:	f001 fea0 	bl	8014b3c <RegionEU868NewChannelReq>
 8012dfc:	0003      	movs	r3, r0
 8012dfe:	e000      	b.n	8012e02 <RegionNewChannelReq+0x24>
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 8012e00:	2300      	movs	r3, #0
        }
    }
}
 8012e02:	0018      	movs	r0, r3
 8012e04:	46bd      	mov	sp, r7
 8012e06:	b002      	add	sp, #8
 8012e08:	bd80      	pop	{r7, pc}

08012e0a <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 8012e0a:	b580      	push	{r7, lr}
 8012e0c:	b082      	sub	sp, #8
 8012e0e:	af00      	add	r7, sp, #0
 8012e10:	0002      	movs	r2, r0
 8012e12:	6039      	str	r1, [r7, #0]
 8012e14:	1dfb      	adds	r3, r7, #7
 8012e16:	701a      	strb	r2, [r3, #0]
    switch( region )
 8012e18:	1dfb      	adds	r3, r7, #7
 8012e1a:	781b      	ldrb	r3, [r3, #0]
 8012e1c:	2b05      	cmp	r3, #5
 8012e1e:	d105      	bne.n	8012e2c <RegionTxParamSetupReq+0x22>
        AS923_TX_PARAM_SETUP_REQ( );
        AU915_TX_PARAM_SETUP_REQ( );
        CN470_TX_PARAM_SETUP_REQ( );
        CN779_TX_PARAM_SETUP_REQ( );
        EU433_TX_PARAM_SETUP_REQ( );
        EU868_TX_PARAM_SETUP_REQ( );
 8012e20:	683b      	ldr	r3, [r7, #0]
 8012e22:	0018      	movs	r0, r3
 8012e24:	f001 fef4 	bl	8014c10 <RegionEU868TxParamSetupReq>
 8012e28:	0003      	movs	r3, r0
 8012e2a:	e000      	b.n	8012e2e <RegionTxParamSetupReq+0x24>
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8012e2c:	2300      	movs	r3, #0
        }
    }
}
 8012e2e:	0018      	movs	r0, r3
 8012e30:	46bd      	mov	sp, r7
 8012e32:	b002      	add	sp, #8
 8012e34:	bd80      	pop	{r7, pc}

08012e36 <RegionDlChannelReq>:

uint8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 8012e36:	b580      	push	{r7, lr}
 8012e38:	b082      	sub	sp, #8
 8012e3a:	af00      	add	r7, sp, #0
 8012e3c:	0002      	movs	r2, r0
 8012e3e:	6039      	str	r1, [r7, #0]
 8012e40:	1dfb      	adds	r3, r7, #7
 8012e42:	701a      	strb	r2, [r3, #0]
    switch( region )
 8012e44:	1dfb      	adds	r3, r7, #7
 8012e46:	781b      	ldrb	r3, [r3, #0]
 8012e48:	2b05      	cmp	r3, #5
 8012e4a:	d105      	bne.n	8012e58 <RegionDlChannelReq+0x22>
        AS923_DL_CHANNEL_REQ( );
        AU915_DL_CHANNEL_REQ( );
        CN470_DL_CHANNEL_REQ( );
        CN779_DL_CHANNEL_REQ( );
        EU433_DL_CHANNEL_REQ( );
        EU868_DL_CHANNEL_REQ( );
 8012e4c:	683b      	ldr	r3, [r7, #0]
 8012e4e:	0018      	movs	r0, r3
 8012e50:	f001 fee8 	bl	8014c24 <RegionEU868DlChannelReq>
 8012e54:	0003      	movs	r3, r0
 8012e56:	e000      	b.n	8012e5a <RegionDlChannelReq+0x24>
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 8012e58:	2300      	movs	r3, #0
        }
    }
}
 8012e5a:	0018      	movs	r0, r3
 8012e5c:	46bd      	mov	sp, r7
 8012e5e:	b002      	add	sp, #8
 8012e60:	bd80      	pop	{r7, pc}

08012e62 <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 8012e62:	b590      	push	{r4, r7, lr}
 8012e64:	b083      	sub	sp, #12
 8012e66:	af00      	add	r7, sp, #0
 8012e68:	0004      	movs	r4, r0
 8012e6a:	0008      	movs	r0, r1
 8012e6c:	0011      	movs	r1, r2
 8012e6e:	1dfb      	adds	r3, r7, #7
 8012e70:	1c22      	adds	r2, r4, #0
 8012e72:	701a      	strb	r2, [r3, #0]
 8012e74:	1dbb      	adds	r3, r7, #6
 8012e76:	1c02      	adds	r2, r0, #0
 8012e78:	701a      	strb	r2, [r3, #0]
 8012e7a:	1d7b      	adds	r3, r7, #5
 8012e7c:	1c0a      	adds	r2, r1, #0
 8012e7e:	701a      	strb	r2, [r3, #0]
    switch( region )
 8012e80:	1dfb      	adds	r3, r7, #7
 8012e82:	781b      	ldrb	r3, [r3, #0]
 8012e84:	2b05      	cmp	r3, #5
 8012e86:	d10a      	bne.n	8012e9e <RegionAlternateDr+0x3c>
        AS923_ALTERNATE_DR( );
        AU915_ALTERNATE_DR( );
        CN470_ALTERNATE_DR( );
        CN779_ALTERNATE_DR( );
        EU433_ALTERNATE_DR( );
        EU868_ALTERNATE_DR( );
 8012e88:	1d7b      	adds	r3, r7, #5
 8012e8a:	781a      	ldrb	r2, [r3, #0]
 8012e8c:	1dbb      	adds	r3, r7, #6
 8012e8e:	781b      	ldrb	r3, [r3, #0]
 8012e90:	b25b      	sxtb	r3, r3
 8012e92:	0011      	movs	r1, r2
 8012e94:	0018      	movs	r0, r3
 8012e96:	f001 ff13 	bl	8014cc0 <RegionEU868AlternateDr>
 8012e9a:	0003      	movs	r3, r0
 8012e9c:	e000      	b.n	8012ea0 <RegionAlternateDr+0x3e>
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 8012e9e:	2300      	movs	r3, #0
        }
    }
}
 8012ea0:	0018      	movs	r0, r3
 8012ea2:	46bd      	mov	sp, r7
 8012ea4:	b003      	add	sp, #12
 8012ea6:	bd90      	pop	{r4, r7, pc}

08012ea8 <RegionCalcBackOff>:

void RegionCalcBackOff( LoRaMacRegion_t region, CalcBackOffParams_t* calcBackOff )
{
 8012ea8:	b580      	push	{r7, lr}
 8012eaa:	b082      	sub	sp, #8
 8012eac:	af00      	add	r7, sp, #0
 8012eae:	0002      	movs	r2, r0
 8012eb0:	6039      	str	r1, [r7, #0]
 8012eb2:	1dfb      	adds	r3, r7, #7
 8012eb4:	701a      	strb	r2, [r3, #0]
    switch( region )
 8012eb6:	1dfb      	adds	r3, r7, #7
 8012eb8:	781b      	ldrb	r3, [r3, #0]
 8012eba:	2b05      	cmp	r3, #5
 8012ebc:	d000      	beq.n	8012ec0 <RegionCalcBackOff+0x18>
        IN865_CALC_BACKOFF( );
        US915_CALC_BACKOFF( );
        RU864_CALC_BACKOFF( );
        default:
        {
            break;
 8012ebe:	e004      	b.n	8012eca <RegionCalcBackOff+0x22>
        EU868_CALC_BACKOFF( );
 8012ec0:	683b      	ldr	r3, [r7, #0]
 8012ec2:	0018      	movs	r0, r3
 8012ec4:	f001 ff0c 	bl	8014ce0 <RegionEU868CalcBackOff>
 8012ec8:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 8012eca:	46c0      	nop			; (mov r8, r8)
 8012ecc:	46bd      	mov	sp, r7
 8012ece:	b002      	add	sp, #8
 8012ed0:	bd80      	pop	{r7, pc}

08012ed2 <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8012ed2:	b580      	push	{r7, lr}
 8012ed4:	b084      	sub	sp, #16
 8012ed6:	af00      	add	r7, sp, #0
 8012ed8:	60b9      	str	r1, [r7, #8]
 8012eda:	607a      	str	r2, [r7, #4]
 8012edc:	603b      	str	r3, [r7, #0]
 8012ede:	210f      	movs	r1, #15
 8012ee0:	187b      	adds	r3, r7, r1
 8012ee2:	1c02      	adds	r2, r0, #0
 8012ee4:	701a      	strb	r2, [r3, #0]
    switch( region )
 8012ee6:	187b      	adds	r3, r7, r1
 8012ee8:	781b      	ldrb	r3, [r3, #0]
 8012eea:	2b05      	cmp	r3, #5
 8012eec:	d107      	bne.n	8012efe <RegionNextChannel+0x2c>
        AS923_NEXT_CHANNEL( );
        AU915_NEXT_CHANNEL( );
        CN470_NEXT_CHANNEL( );
        CN779_NEXT_CHANNEL( );
        EU433_NEXT_CHANNEL( );
        EU868_NEXT_CHANNEL( );
 8012eee:	69bb      	ldr	r3, [r7, #24]
 8012ef0:	683a      	ldr	r2, [r7, #0]
 8012ef2:	6879      	ldr	r1, [r7, #4]
 8012ef4:	68b8      	ldr	r0, [r7, #8]
 8012ef6:	f001 ff23 	bl	8014d40 <RegionEU868NextChannel>
 8012efa:	0003      	movs	r3, r0
 8012efc:	e000      	b.n	8012f00 <RegionNextChannel+0x2e>
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8012efe:	2309      	movs	r3, #9
        }
    }
}
 8012f00:	0018      	movs	r0, r3
 8012f02:	46bd      	mov	sp, r7
 8012f04:	b004      	add	sp, #16
 8012f06:	bd80      	pop	{r7, pc}

08012f08 <RegionChannelAdd>:

LoRaMacStatus_t RegionChannelAdd( LoRaMacRegion_t region, ChannelAddParams_t* channelAdd )
{
 8012f08:	b580      	push	{r7, lr}
 8012f0a:	b082      	sub	sp, #8
 8012f0c:	af00      	add	r7, sp, #0
 8012f0e:	0002      	movs	r2, r0
 8012f10:	6039      	str	r1, [r7, #0]
 8012f12:	1dfb      	adds	r3, r7, #7
 8012f14:	701a      	strb	r2, [r3, #0]
    switch( region )
 8012f16:	1dfb      	adds	r3, r7, #7
 8012f18:	781b      	ldrb	r3, [r3, #0]
 8012f1a:	2b05      	cmp	r3, #5
 8012f1c:	d105      	bne.n	8012f2a <RegionChannelAdd+0x22>
        AS923_CHANNEL_ADD( );
        AU915_CHANNEL_ADD( );
        CN470_CHANNEL_ADD( );
        CN779_CHANNEL_ADD( );
        EU433_CHANNEL_ADD( );
        EU868_CHANNEL_ADD( );
 8012f1e:	683b      	ldr	r3, [r7, #0]
 8012f20:	0018      	movs	r0, r3
 8012f22:	f001 ffb5 	bl	8014e90 <RegionEU868ChannelAdd>
 8012f26:	0003      	movs	r3, r0
 8012f28:	e000      	b.n	8012f2c <RegionChannelAdd+0x24>
        IN865_CHANNEL_ADD( );
        US915_CHANNEL_ADD( );
        RU864_CHANNEL_ADD( );
        default:
        {
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8012f2a:	2303      	movs	r3, #3
        }
    }
}
 8012f2c:	0018      	movs	r0, r3
 8012f2e:	46bd      	mov	sp, r7
 8012f30:	b002      	add	sp, #8
 8012f32:	bd80      	pop	{r7, pc}

08012f34 <RegionSetContinuousWave>:
        }
    }
}

void RegionSetContinuousWave( LoRaMacRegion_t region, ContinuousWaveParams_t* continuousWave )
{
 8012f34:	b580      	push	{r7, lr}
 8012f36:	b082      	sub	sp, #8
 8012f38:	af00      	add	r7, sp, #0
 8012f3a:	0002      	movs	r2, r0
 8012f3c:	6039      	str	r1, [r7, #0]
 8012f3e:	1dfb      	adds	r3, r7, #7
 8012f40:	701a      	strb	r2, [r3, #0]
    switch( region )
 8012f42:	1dfb      	adds	r3, r7, #7
 8012f44:	781b      	ldrb	r3, [r3, #0]
 8012f46:	2b05      	cmp	r3, #5
 8012f48:	d000      	beq.n	8012f4c <RegionSetContinuousWave+0x18>
        IN865_SET_CONTINUOUS_WAVE( );
        US915_SET_CONTINUOUS_WAVE( );
        RU864_SET_CONTINUOUS_WAVE( );
        default:
        {
            break;
 8012f4a:	e004      	b.n	8012f56 <RegionSetContinuousWave+0x22>
        EU868_SET_CONTINUOUS_WAVE( );
 8012f4c:	683b      	ldr	r3, [r7, #0]
 8012f4e:	0018      	movs	r0, r3
 8012f50:	f002 f890 	bl	8015074 <RegionEU868SetContinuousWave>
 8012f54:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 8012f56:	46c0      	nop			; (mov r8, r8)
 8012f58:	46bd      	mov	sp, r7
 8012f5a:	b002      	add	sp, #8
 8012f5c:	bd80      	pop	{r7, pc}

08012f5e <RegionApplyDrOffset>:

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8012f5e:	b5b0      	push	{r4, r5, r7, lr}
 8012f60:	b082      	sub	sp, #8
 8012f62:	af00      	add	r7, sp, #0
 8012f64:	0005      	movs	r5, r0
 8012f66:	000c      	movs	r4, r1
 8012f68:	0010      	movs	r0, r2
 8012f6a:	0019      	movs	r1, r3
 8012f6c:	1dfb      	adds	r3, r7, #7
 8012f6e:	1c2a      	adds	r2, r5, #0
 8012f70:	701a      	strb	r2, [r3, #0]
 8012f72:	1dbb      	adds	r3, r7, #6
 8012f74:	1c22      	adds	r2, r4, #0
 8012f76:	701a      	strb	r2, [r3, #0]
 8012f78:	1d7b      	adds	r3, r7, #5
 8012f7a:	1c02      	adds	r2, r0, #0
 8012f7c:	701a      	strb	r2, [r3, #0]
 8012f7e:	1d3b      	adds	r3, r7, #4
 8012f80:	1c0a      	adds	r2, r1, #0
 8012f82:	701a      	strb	r2, [r3, #0]
    switch( region )
 8012f84:	1dfb      	adds	r3, r7, #7
 8012f86:	781b      	ldrb	r3, [r3, #0]
 8012f88:	2b05      	cmp	r3, #5
 8012f8a:	d10c      	bne.n	8012fa6 <RegionApplyDrOffset+0x48>
        AS923_APPLY_DR_OFFSET( );
        AU915_APPLY_DR_OFFSET( );
        CN470_APPLY_DR_OFFSET( );
        CN779_APPLY_DR_OFFSET( );
        EU433_APPLY_DR_OFFSET( );
        EU868_APPLY_DR_OFFSET( );
 8012f8c:	1d3b      	adds	r3, r7, #4
 8012f8e:	2200      	movs	r2, #0
 8012f90:	569a      	ldrsb	r2, [r3, r2]
 8012f92:	1d7b      	adds	r3, r7, #5
 8012f94:	2100      	movs	r1, #0
 8012f96:	5659      	ldrsb	r1, [r3, r1]
 8012f98:	1dbb      	adds	r3, r7, #6
 8012f9a:	781b      	ldrb	r3, [r3, #0]
 8012f9c:	0018      	movs	r0, r3
 8012f9e:	f002 f8bd 	bl	801511c <RegionEU868ApplyDrOffset>
 8012fa2:	0003      	movs	r3, r0
 8012fa4:	e001      	b.n	8012faa <RegionApplyDrOffset+0x4c>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 8012fa6:	1d7b      	adds	r3, r7, #5
 8012fa8:	781b      	ldrb	r3, [r3, #0]
        }
    }
}
 8012faa:	0018      	movs	r0, r3
 8012fac:	46bd      	mov	sp, r7
 8012fae:	b002      	add	sp, #8
 8012fb0:	bdb0      	pop	{r4, r5, r7, pc}

08012fb2 <CountChannels>:
#define BACKOFF_DC_1_HOUR       100
#define BACKOFF_DC_10_HOURS     1000
#define BACKOFF_DC_24_HOURS     10000

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 8012fb2:	b580      	push	{r7, lr}
 8012fb4:	b084      	sub	sp, #16
 8012fb6:	af00      	add	r7, sp, #0
 8012fb8:	0002      	movs	r2, r0
 8012fba:	1dbb      	adds	r3, r7, #6
 8012fbc:	801a      	strh	r2, [r3, #0]
 8012fbe:	1d7b      	adds	r3, r7, #5
 8012fc0:	1c0a      	adds	r2, r1, #0
 8012fc2:	701a      	strb	r2, [r3, #0]
    uint8_t nbActiveBits = 0;
 8012fc4:	230f      	movs	r3, #15
 8012fc6:	18fb      	adds	r3, r7, r3
 8012fc8:	2200      	movs	r2, #0
 8012fca:	701a      	strb	r2, [r3, #0]

    for( uint8_t j = 0; j < nbBits; j++ )
 8012fcc:	230e      	movs	r3, #14
 8012fce:	18fb      	adds	r3, r7, r3
 8012fd0:	2200      	movs	r2, #0
 8012fd2:	701a      	strb	r2, [r3, #0]
 8012fd4:	e01b      	b.n	801300e <CountChannels+0x5c>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 8012fd6:	1dbb      	adds	r3, r7, #6
 8012fd8:	881b      	ldrh	r3, [r3, #0]
 8012fda:	200e      	movs	r0, #14
 8012fdc:	183a      	adds	r2, r7, r0
 8012fde:	7812      	ldrb	r2, [r2, #0]
 8012fe0:	2101      	movs	r1, #1
 8012fe2:	4091      	lsls	r1, r2
 8012fe4:	000a      	movs	r2, r1
 8012fe6:	401a      	ands	r2, r3
 8012fe8:	183b      	adds	r3, r7, r0
 8012fea:	781b      	ldrb	r3, [r3, #0]
 8012fec:	2101      	movs	r1, #1
 8012fee:	4099      	lsls	r1, r3
 8012ff0:	000b      	movs	r3, r1
 8012ff2:	429a      	cmp	r2, r3
 8012ff4:	d105      	bne.n	8013002 <CountChannels+0x50>
        {
            nbActiveBits++;
 8012ff6:	210f      	movs	r1, #15
 8012ff8:	187b      	adds	r3, r7, r1
 8012ffa:	781a      	ldrb	r2, [r3, #0]
 8012ffc:	187b      	adds	r3, r7, r1
 8012ffe:	3201      	adds	r2, #1
 8013000:	701a      	strb	r2, [r3, #0]
    for( uint8_t j = 0; j < nbBits; j++ )
 8013002:	210e      	movs	r1, #14
 8013004:	187b      	adds	r3, r7, r1
 8013006:	781a      	ldrb	r2, [r3, #0]
 8013008:	187b      	adds	r3, r7, r1
 801300a:	3201      	adds	r2, #1
 801300c:	701a      	strb	r2, [r3, #0]
 801300e:	230e      	movs	r3, #14
 8013010:	18fa      	adds	r2, r7, r3
 8013012:	1d7b      	adds	r3, r7, #5
 8013014:	7812      	ldrb	r2, [r2, #0]
 8013016:	781b      	ldrb	r3, [r3, #0]
 8013018:	429a      	cmp	r2, r3
 801301a:	d3dc      	bcc.n	8012fd6 <CountChannels+0x24>
        }
    }
    return nbActiveBits;
 801301c:	230f      	movs	r3, #15
 801301e:	18fb      	adds	r3, r7, r3
 8013020:	781b      	ldrb	r3, [r3, #0]
}
 8013022:	0018      	movs	r0, r3
 8013024:	46bd      	mov	sp, r7
 8013026:	b004      	add	sp, #16
 8013028:	bd80      	pop	{r7, pc}
	...

0801302c <RegionCommonGetJoinDc>:

uint16_t RegionCommonGetJoinDc( TimerTime_t elapsedTime )
{
 801302c:	b580      	push	{r7, lr}
 801302e:	b084      	sub	sp, #16
 8013030:	af00      	add	r7, sp, #0
 8013032:	6078      	str	r0, [r7, #4]
    uint16_t dutyCycle = 0;
 8013034:	230e      	movs	r3, #14
 8013036:	18fb      	adds	r3, r7, r3
 8013038:	2200      	movs	r2, #0
 801303a:	801a      	strh	r2, [r3, #0]

    if( elapsedTime < 3600000 )
 801303c:	687b      	ldr	r3, [r7, #4]
 801303e:	4a0e      	ldr	r2, [pc, #56]	; (8013078 <RegionCommonGetJoinDc+0x4c>)
 8013040:	4293      	cmp	r3, r2
 8013042:	d804      	bhi.n	801304e <RegionCommonGetJoinDc+0x22>
    {
        dutyCycle = BACKOFF_DC_1_HOUR;
 8013044:	230e      	movs	r3, #14
 8013046:	18fb      	adds	r3, r7, r3
 8013048:	2264      	movs	r2, #100	; 0x64
 801304a:	801a      	strh	r2, [r3, #0]
 801304c:	e00d      	b.n	801306a <RegionCommonGetJoinDc+0x3e>
    }
    else if( elapsedTime < ( 3600000 + 36000000 ) )
 801304e:	687b      	ldr	r3, [r7, #4]
 8013050:	4a0a      	ldr	r2, [pc, #40]	; (801307c <RegionCommonGetJoinDc+0x50>)
 8013052:	4293      	cmp	r3, r2
 8013054:	d805      	bhi.n	8013062 <RegionCommonGetJoinDc+0x36>
    {
        dutyCycle = BACKOFF_DC_10_HOURS;
 8013056:	230e      	movs	r3, #14
 8013058:	18fb      	adds	r3, r7, r3
 801305a:	22fa      	movs	r2, #250	; 0xfa
 801305c:	0092      	lsls	r2, r2, #2
 801305e:	801a      	strh	r2, [r3, #0]
 8013060:	e003      	b.n	801306a <RegionCommonGetJoinDc+0x3e>
    }
    else
    {
        dutyCycle = BACKOFF_DC_24_HOURS;
 8013062:	230e      	movs	r3, #14
 8013064:	18fb      	adds	r3, r7, r3
 8013066:	4a06      	ldr	r2, [pc, #24]	; (8013080 <RegionCommonGetJoinDc+0x54>)
 8013068:	801a      	strh	r2, [r3, #0]
    }
    return dutyCycle;
 801306a:	230e      	movs	r3, #14
 801306c:	18fb      	adds	r3, r7, r3
 801306e:	881b      	ldrh	r3, [r3, #0]
}
 8013070:	0018      	movs	r0, r3
 8013072:	46bd      	mov	sp, r7
 8013074:	b004      	add	sp, #16
 8013076:	bd80      	pop	{r7, pc}
 8013078:	0036ee7f 	.word	0x0036ee7f
 801307c:	025c3f7f 	.word	0x025c3f7f
 8013080:	00002710 	.word	0x00002710

08013084 <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 8013084:	b590      	push	{r4, r7, lr}
 8013086:	b085      	sub	sp, #20
 8013088:	af00      	add	r7, sp, #0
 801308a:	0004      	movs	r4, r0
 801308c:	6039      	str	r1, [r7, #0]
 801308e:	0010      	movs	r0, r2
 8013090:	0019      	movs	r1, r3
 8013092:	1dfb      	adds	r3, r7, #7
 8013094:	1c22      	adds	r2, r4, #0
 8013096:	701a      	strb	r2, [r3, #0]
 8013098:	1dbb      	adds	r3, r7, #6
 801309a:	1c02      	adds	r2, r0, #0
 801309c:	701a      	strb	r2, [r3, #0]
 801309e:	1d7b      	adds	r3, r7, #5
 80130a0:	1c0a      	adds	r2, r1, #0
 80130a2:	701a      	strb	r2, [r3, #0]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 80130a4:	2320      	movs	r3, #32
 80130a6:	18fb      	adds	r3, r7, r3
 80130a8:	2200      	movs	r2, #0
 80130aa:	569a      	ldrsb	r2, [r3, r2]
 80130ac:	1d7b      	adds	r3, r7, #5
 80130ae:	2100      	movs	r1, #0
 80130b0:	5659      	ldrsb	r1, [r3, r1]
 80130b2:	1dbb      	adds	r3, r7, #6
 80130b4:	781b      	ldrb	r3, [r3, #0]
 80130b6:	b25b      	sxtb	r3, r3
 80130b8:	0018      	movs	r0, r3
 80130ba:	f000 f87d 	bl	80131b8 <RegionCommonValueInRange>
 80130be:	1e03      	subs	r3, r0, #0
 80130c0:	d101      	bne.n	80130c6 <RegionCommonChanVerifyDr+0x42>
    {
        return false;
 80130c2:	2300      	movs	r3, #0
 80130c4:	e074      	b.n	80131b0 <RegionCommonChanVerifyDr+0x12c>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 80130c6:	230f      	movs	r3, #15
 80130c8:	18fb      	adds	r3, r7, r3
 80130ca:	2200      	movs	r2, #0
 80130cc:	701a      	strb	r2, [r3, #0]
 80130ce:	230e      	movs	r3, #14
 80130d0:	18fb      	adds	r3, r7, r3
 80130d2:	2200      	movs	r2, #0
 80130d4:	701a      	strb	r2, [r3, #0]
 80130d6:	e063      	b.n	80131a0 <RegionCommonChanVerifyDr+0x11c>
    {
        for( uint8_t j = 0; j < 16; j++ )
 80130d8:	230d      	movs	r3, #13
 80130da:	18fb      	adds	r3, r7, r3
 80130dc:	2200      	movs	r2, #0
 80130de:	701a      	strb	r2, [r3, #0]
 80130e0:	e04d      	b.n	801317e <RegionCommonChanVerifyDr+0xfa>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 80130e2:	230e      	movs	r3, #14
 80130e4:	18fb      	adds	r3, r7, r3
 80130e6:	781b      	ldrb	r3, [r3, #0]
 80130e8:	005b      	lsls	r3, r3, #1
 80130ea:	683a      	ldr	r2, [r7, #0]
 80130ec:	18d3      	adds	r3, r2, r3
 80130ee:	881b      	ldrh	r3, [r3, #0]
 80130f0:	001a      	movs	r2, r3
 80130f2:	230d      	movs	r3, #13
 80130f4:	18fb      	adds	r3, r7, r3
 80130f6:	781b      	ldrb	r3, [r3, #0]
 80130f8:	411a      	asrs	r2, r3
 80130fa:	0013      	movs	r3, r2
 80130fc:	2201      	movs	r2, #1
 80130fe:	4013      	ands	r3, r2
 8013100:	d037      	beq.n	8013172 <RegionCommonChanVerifyDr+0xee>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8013102:	200f      	movs	r0, #15
 8013104:	183b      	adds	r3, r7, r0
 8013106:	781a      	ldrb	r2, [r3, #0]
 8013108:	240d      	movs	r4, #13
 801310a:	193b      	adds	r3, r7, r4
 801310c:	781b      	ldrb	r3, [r3, #0]
 801310e:	18d3      	adds	r3, r2, r3
 8013110:	001a      	movs	r2, r3
 8013112:	0013      	movs	r3, r2
 8013114:	005b      	lsls	r3, r3, #1
 8013116:	189b      	adds	r3, r3, r2
 8013118:	009b      	lsls	r3, r3, #2
 801311a:	001a      	movs	r2, r3
 801311c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801311e:	189b      	adds	r3, r3, r2
 8013120:	7a1b      	ldrb	r3, [r3, #8]
 8013122:	011b      	lsls	r3, r3, #4
 8013124:	b25b      	sxtb	r3, r3
 8013126:	111b      	asrs	r3, r3, #4
 8013128:	b25b      	sxtb	r3, r3
 801312a:	001a      	movs	r2, r3
 801312c:	230f      	movs	r3, #15
 801312e:	4013      	ands	r3, r2
 8013130:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 8013132:	183b      	adds	r3, r7, r0
 8013134:	781a      	ldrb	r2, [r3, #0]
 8013136:	193b      	adds	r3, r7, r4
 8013138:	781b      	ldrb	r3, [r3, #0]
 801313a:	18d3      	adds	r3, r2, r3
 801313c:	001a      	movs	r2, r3
 801313e:	0013      	movs	r3, r2
 8013140:	005b      	lsls	r3, r3, #1
 8013142:	189b      	adds	r3, r3, r2
 8013144:	009b      	lsls	r3, r3, #2
 8013146:	001a      	movs	r2, r3
 8013148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801314a:	189b      	adds	r3, r3, r2
 801314c:	7a1b      	ldrb	r3, [r3, #8]
 801314e:	b25b      	sxtb	r3, r3
 8013150:	111b      	asrs	r3, r3, #4
 8013152:	b25b      	sxtb	r3, r3
 8013154:	001a      	movs	r2, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8013156:	230f      	movs	r3, #15
 8013158:	4013      	ands	r3, r2
 801315a:	b25a      	sxtb	r2, r3
 801315c:	1dbb      	adds	r3, r7, #6
 801315e:	781b      	ldrb	r3, [r3, #0]
 8013160:	b25b      	sxtb	r3, r3
 8013162:	0018      	movs	r0, r3
 8013164:	f000 f828 	bl	80131b8 <RegionCommonValueInRange>
 8013168:	0003      	movs	r3, r0
 801316a:	2b01      	cmp	r3, #1
 801316c:	d101      	bne.n	8013172 <RegionCommonChanVerifyDr+0xee>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 801316e:	2301      	movs	r3, #1
 8013170:	e01e      	b.n	80131b0 <RegionCommonChanVerifyDr+0x12c>
        for( uint8_t j = 0; j < 16; j++ )
 8013172:	210d      	movs	r1, #13
 8013174:	187b      	adds	r3, r7, r1
 8013176:	781a      	ldrb	r2, [r3, #0]
 8013178:	187b      	adds	r3, r7, r1
 801317a:	3201      	adds	r2, #1
 801317c:	701a      	strb	r2, [r3, #0]
 801317e:	230d      	movs	r3, #13
 8013180:	18fb      	adds	r3, r7, r3
 8013182:	781b      	ldrb	r3, [r3, #0]
 8013184:	2b0f      	cmp	r3, #15
 8013186:	d9ac      	bls.n	80130e2 <RegionCommonChanVerifyDr+0x5e>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8013188:	220f      	movs	r2, #15
 801318a:	18bb      	adds	r3, r7, r2
 801318c:	18ba      	adds	r2, r7, r2
 801318e:	7812      	ldrb	r2, [r2, #0]
 8013190:	3210      	adds	r2, #16
 8013192:	701a      	strb	r2, [r3, #0]
 8013194:	210e      	movs	r1, #14
 8013196:	187b      	adds	r3, r7, r1
 8013198:	781a      	ldrb	r2, [r3, #0]
 801319a:	187b      	adds	r3, r7, r1
 801319c:	3201      	adds	r2, #1
 801319e:	701a      	strb	r2, [r3, #0]
 80131a0:	230f      	movs	r3, #15
 80131a2:	18fa      	adds	r2, r7, r3
 80131a4:	1dfb      	adds	r3, r7, #7
 80131a6:	7812      	ldrb	r2, [r2, #0]
 80131a8:	781b      	ldrb	r3, [r3, #0]
 80131aa:	429a      	cmp	r2, r3
 80131ac:	d394      	bcc.n	80130d8 <RegionCommonChanVerifyDr+0x54>
                }
            }
        }
    }
    return false;
 80131ae:	2300      	movs	r3, #0
}
 80131b0:	0018      	movs	r0, r3
 80131b2:	46bd      	mov	sp, r7
 80131b4:	b005      	add	sp, #20
 80131b6:	bd90      	pop	{r4, r7, pc}

080131b8 <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 80131b8:	b590      	push	{r4, r7, lr}
 80131ba:	b083      	sub	sp, #12
 80131bc:	af00      	add	r7, sp, #0
 80131be:	0004      	movs	r4, r0
 80131c0:	0008      	movs	r0, r1
 80131c2:	0011      	movs	r1, r2
 80131c4:	1dfb      	adds	r3, r7, #7
 80131c6:	1c22      	adds	r2, r4, #0
 80131c8:	701a      	strb	r2, [r3, #0]
 80131ca:	1dbb      	adds	r3, r7, #6
 80131cc:	1c02      	adds	r2, r0, #0
 80131ce:	701a      	strb	r2, [r3, #0]
 80131d0:	1d7b      	adds	r3, r7, #5
 80131d2:	1c0a      	adds	r2, r1, #0
 80131d4:	701a      	strb	r2, [r3, #0]
    if( ( value >= min ) && ( value <= max ) )
 80131d6:	1dfa      	adds	r2, r7, #7
 80131d8:	1dbb      	adds	r3, r7, #6
 80131da:	7812      	ldrb	r2, [r2, #0]
 80131dc:	b252      	sxtb	r2, r2
 80131de:	781b      	ldrb	r3, [r3, #0]
 80131e0:	b25b      	sxtb	r3, r3
 80131e2:	429a      	cmp	r2, r3
 80131e4:	db09      	blt.n	80131fa <RegionCommonValueInRange+0x42>
 80131e6:	1dfa      	adds	r2, r7, #7
 80131e8:	1d7b      	adds	r3, r7, #5
 80131ea:	7812      	ldrb	r2, [r2, #0]
 80131ec:	b252      	sxtb	r2, r2
 80131ee:	781b      	ldrb	r3, [r3, #0]
 80131f0:	b25b      	sxtb	r3, r3
 80131f2:	429a      	cmp	r2, r3
 80131f4:	dc01      	bgt.n	80131fa <RegionCommonValueInRange+0x42>
    {
        return 1;
 80131f6:	2301      	movs	r3, #1
 80131f8:	e000      	b.n	80131fc <RegionCommonValueInRange+0x44>
    }
    return 0;
 80131fa:	2300      	movs	r3, #0
}
 80131fc:	0018      	movs	r0, r3
 80131fe:	46bd      	mov	sp, r7
 8013200:	b003      	add	sp, #12
 8013202:	bd90      	pop	{r4, r7, pc}

08013204 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 8013204:	b580      	push	{r7, lr}
 8013206:	b084      	sub	sp, #16
 8013208:	af00      	add	r7, sp, #0
 801320a:	6078      	str	r0, [r7, #4]
 801320c:	0008      	movs	r0, r1
 801320e:	0011      	movs	r1, r2
 8013210:	1cfb      	adds	r3, r7, #3
 8013212:	1c02      	adds	r2, r0, #0
 8013214:	701a      	strb	r2, [r3, #0]
 8013216:	1cbb      	adds	r3, r7, #2
 8013218:	1c0a      	adds	r2, r1, #0
 801321a:	701a      	strb	r2, [r3, #0]
    uint8_t index = id / 16;
 801321c:	210f      	movs	r1, #15
 801321e:	187b      	adds	r3, r7, r1
 8013220:	1cfa      	adds	r2, r7, #3
 8013222:	7812      	ldrb	r2, [r2, #0]
 8013224:	0912      	lsrs	r2, r2, #4
 8013226:	701a      	strb	r2, [r3, #0]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 8013228:	1cbb      	adds	r3, r7, #2
 801322a:	781b      	ldrb	r3, [r3, #0]
 801322c:	091b      	lsrs	r3, r3, #4
 801322e:	b2db      	uxtb	r3, r3
 8013230:	187a      	adds	r2, r7, r1
 8013232:	7812      	ldrb	r2, [r2, #0]
 8013234:	429a      	cmp	r2, r3
 8013236:	d805      	bhi.n	8013244 <RegionCommonChanDisable+0x40>
 8013238:	1cfa      	adds	r2, r7, #3
 801323a:	1cbb      	adds	r3, r7, #2
 801323c:	7812      	ldrb	r2, [r2, #0]
 801323e:	781b      	ldrb	r3, [r3, #0]
 8013240:	429a      	cmp	r2, r3
 8013242:	d301      	bcc.n	8013248 <RegionCommonChanDisable+0x44>
    {
        return false;
 8013244:	2300      	movs	r3, #0
 8013246:	e01b      	b.n	8013280 <RegionCommonChanDisable+0x7c>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 8013248:	200f      	movs	r0, #15
 801324a:	183b      	adds	r3, r7, r0
 801324c:	781b      	ldrb	r3, [r3, #0]
 801324e:	005b      	lsls	r3, r3, #1
 8013250:	687a      	ldr	r2, [r7, #4]
 8013252:	18d3      	adds	r3, r2, r3
 8013254:	881b      	ldrh	r3, [r3, #0]
 8013256:	b21b      	sxth	r3, r3
 8013258:	1cfa      	adds	r2, r7, #3
 801325a:	7812      	ldrb	r2, [r2, #0]
 801325c:	210f      	movs	r1, #15
 801325e:	400a      	ands	r2, r1
 8013260:	2101      	movs	r1, #1
 8013262:	4091      	lsls	r1, r2
 8013264:	000a      	movs	r2, r1
 8013266:	b212      	sxth	r2, r2
 8013268:	43d2      	mvns	r2, r2
 801326a:	b212      	sxth	r2, r2
 801326c:	4013      	ands	r3, r2
 801326e:	b219      	sxth	r1, r3
 8013270:	183b      	adds	r3, r7, r0
 8013272:	781b      	ldrb	r3, [r3, #0]
 8013274:	005b      	lsls	r3, r3, #1
 8013276:	687a      	ldr	r2, [r7, #4]
 8013278:	18d3      	adds	r3, r2, r3
 801327a:	b28a      	uxth	r2, r1
 801327c:	801a      	strh	r2, [r3, #0]

    return true;
 801327e:	2301      	movs	r3, #1
}
 8013280:	0018      	movs	r0, r3
 8013282:	46bd      	mov	sp, r7
 8013284:	b004      	add	sp, #16
 8013286:	bd80      	pop	{r7, pc}

08013288 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 8013288:	b590      	push	{r4, r7, lr}
 801328a:	b085      	sub	sp, #20
 801328c:	af00      	add	r7, sp, #0
 801328e:	6078      	str	r0, [r7, #4]
 8013290:	0008      	movs	r0, r1
 8013292:	0011      	movs	r1, r2
 8013294:	1cfb      	adds	r3, r7, #3
 8013296:	1c02      	adds	r2, r0, #0
 8013298:	701a      	strb	r2, [r3, #0]
 801329a:	1cbb      	adds	r3, r7, #2
 801329c:	1c0a      	adds	r2, r1, #0
 801329e:	701a      	strb	r2, [r3, #0]
    uint8_t nbChannels = 0;
 80132a0:	230f      	movs	r3, #15
 80132a2:	18fb      	adds	r3, r7, r3
 80132a4:	2200      	movs	r2, #0
 80132a6:	701a      	strb	r2, [r3, #0]

    if( channelsMask == NULL )
 80132a8:	687b      	ldr	r3, [r7, #4]
 80132aa:	2b00      	cmp	r3, #0
 80132ac:	d101      	bne.n	80132b2 <RegionCommonCountChannels+0x2a>
    {
        return 0;
 80132ae:	2300      	movs	r3, #0
 80132b0:	e027      	b.n	8013302 <RegionCommonCountChannels+0x7a>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 80132b2:	230e      	movs	r3, #14
 80132b4:	18fb      	adds	r3, r7, r3
 80132b6:	1cfa      	adds	r2, r7, #3
 80132b8:	7812      	ldrb	r2, [r2, #0]
 80132ba:	701a      	strb	r2, [r3, #0]
 80132bc:	e017      	b.n	80132ee <RegionCommonCountChannels+0x66>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 80132be:	240e      	movs	r4, #14
 80132c0:	193b      	adds	r3, r7, r4
 80132c2:	781b      	ldrb	r3, [r3, #0]
 80132c4:	005b      	lsls	r3, r3, #1
 80132c6:	687a      	ldr	r2, [r7, #4]
 80132c8:	18d3      	adds	r3, r2, r3
 80132ca:	881b      	ldrh	r3, [r3, #0]
 80132cc:	2110      	movs	r1, #16
 80132ce:	0018      	movs	r0, r3
 80132d0:	f7ff fe6f 	bl	8012fb2 <CountChannels>
 80132d4:	0003      	movs	r3, r0
 80132d6:	0019      	movs	r1, r3
 80132d8:	220f      	movs	r2, #15
 80132da:	18bb      	adds	r3, r7, r2
 80132dc:	18ba      	adds	r2, r7, r2
 80132de:	7812      	ldrb	r2, [r2, #0]
 80132e0:	188a      	adds	r2, r1, r2
 80132e2:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 80132e4:	193b      	adds	r3, r7, r4
 80132e6:	781a      	ldrb	r2, [r3, #0]
 80132e8:	193b      	adds	r3, r7, r4
 80132ea:	3201      	adds	r2, #1
 80132ec:	701a      	strb	r2, [r3, #0]
 80132ee:	230e      	movs	r3, #14
 80132f0:	18fa      	adds	r2, r7, r3
 80132f2:	1cbb      	adds	r3, r7, #2
 80132f4:	7812      	ldrb	r2, [r2, #0]
 80132f6:	781b      	ldrb	r3, [r3, #0]
 80132f8:	429a      	cmp	r2, r3
 80132fa:	d3e0      	bcc.n	80132be <RegionCommonCountChannels+0x36>
    }

    return nbChannels;
 80132fc:	230f      	movs	r3, #15
 80132fe:	18fb      	adds	r3, r7, r3
 8013300:	781b      	ldrb	r3, [r3, #0]
}
 8013302:	0018      	movs	r0, r3
 8013304:	46bd      	mov	sp, r7
 8013306:	b005      	add	sp, #20
 8013308:	bd90      	pop	{r4, r7, pc}

0801330a <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 801330a:	b580      	push	{r7, lr}
 801330c:	b086      	sub	sp, #24
 801330e:	af00      	add	r7, sp, #0
 8013310:	60f8      	str	r0, [r7, #12]
 8013312:	60b9      	str	r1, [r7, #8]
 8013314:	1dfb      	adds	r3, r7, #7
 8013316:	701a      	strb	r2, [r3, #0]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 8013318:	68fb      	ldr	r3, [r7, #12]
 801331a:	2b00      	cmp	r3, #0
 801331c:	d020      	beq.n	8013360 <RegionCommonChanMaskCopy+0x56>
 801331e:	68bb      	ldr	r3, [r7, #8]
 8013320:	2b00      	cmp	r3, #0
 8013322:	d01d      	beq.n	8013360 <RegionCommonChanMaskCopy+0x56>
    {
        for( uint8_t i = 0; i < len; i++ )
 8013324:	2317      	movs	r3, #23
 8013326:	18fb      	adds	r3, r7, r3
 8013328:	2200      	movs	r2, #0
 801332a:	701a      	strb	r2, [r3, #0]
 801332c:	e011      	b.n	8013352 <RegionCommonChanMaskCopy+0x48>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 801332e:	2017      	movs	r0, #23
 8013330:	183b      	adds	r3, r7, r0
 8013332:	781b      	ldrb	r3, [r3, #0]
 8013334:	005b      	lsls	r3, r3, #1
 8013336:	68ba      	ldr	r2, [r7, #8]
 8013338:	18d2      	adds	r2, r2, r3
 801333a:	183b      	adds	r3, r7, r0
 801333c:	781b      	ldrb	r3, [r3, #0]
 801333e:	005b      	lsls	r3, r3, #1
 8013340:	68f9      	ldr	r1, [r7, #12]
 8013342:	18cb      	adds	r3, r1, r3
 8013344:	8812      	ldrh	r2, [r2, #0]
 8013346:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 8013348:	183b      	adds	r3, r7, r0
 801334a:	781a      	ldrb	r2, [r3, #0]
 801334c:	183b      	adds	r3, r7, r0
 801334e:	3201      	adds	r2, #1
 8013350:	701a      	strb	r2, [r3, #0]
 8013352:	2317      	movs	r3, #23
 8013354:	18fa      	adds	r2, r7, r3
 8013356:	1dfb      	adds	r3, r7, #7
 8013358:	7812      	ldrb	r2, [r2, #0]
 801335a:	781b      	ldrb	r3, [r3, #0]
 801335c:	429a      	cmp	r2, r3
 801335e:	d3e6      	bcc.n	801332e <RegionCommonChanMaskCopy+0x24>
        }
    }
}
 8013360:	46c0      	nop			; (mov r8, r8)
 8013362:	46bd      	mov	sp, r7
 8013364:	b006      	add	sp, #24
 8013366:	bd80      	pop	{r7, pc}

08013368 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( bool joined, Band_t* band, TimerTime_t lastTxDone )
{
 8013368:	b580      	push	{r7, lr}
 801336a:	b084      	sub	sp, #16
 801336c:	af00      	add	r7, sp, #0
 801336e:	60b9      	str	r1, [r7, #8]
 8013370:	607a      	str	r2, [r7, #4]
 8013372:	210f      	movs	r1, #15
 8013374:	187b      	adds	r3, r7, r1
 8013376:	1c02      	adds	r2, r0, #0
 8013378:	701a      	strb	r2, [r3, #0]
    if( joined == true )
 801337a:	187b      	adds	r3, r7, r1
 801337c:	781b      	ldrb	r3, [r3, #0]
 801337e:	2b00      	cmp	r3, #0
 8013380:	d003      	beq.n	801338a <RegionCommonSetBandTxDone+0x22>
    {
        band->LastTxDoneTime = lastTxDone;
 8013382:	68bb      	ldr	r3, [r7, #8]
 8013384:	687a      	ldr	r2, [r7, #4]
 8013386:	609a      	str	r2, [r3, #8]
    else
    {
        band->LastTxDoneTime = lastTxDone;
        band->LastJoinTxDoneTime = lastTxDone;
    }
}
 8013388:	e005      	b.n	8013396 <RegionCommonSetBandTxDone+0x2e>
        band->LastTxDoneTime = lastTxDone;
 801338a:	68bb      	ldr	r3, [r7, #8]
 801338c:	687a      	ldr	r2, [r7, #4]
 801338e:	609a      	str	r2, [r3, #8]
        band->LastJoinTxDoneTime = lastTxDone;
 8013390:	68bb      	ldr	r3, [r7, #8]
 8013392:	687a      	ldr	r2, [r7, #4]
 8013394:	605a      	str	r2, [r3, #4]
}
 8013396:	46c0      	nop			; (mov r8, r8)
 8013398:	46bd      	mov	sp, r7
 801339a:	b004      	add	sp, #16
 801339c:	bd80      	pop	{r7, pc}

0801339e <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, bool dutyCycle, Band_t* bands, uint8_t nbBands )
{
 801339e:	b590      	push	{r4, r7, lr}
 80133a0:	b087      	sub	sp, #28
 80133a2:	af00      	add	r7, sp, #0
 80133a4:	0004      	movs	r4, r0
 80133a6:	0008      	movs	r0, r1
 80133a8:	603a      	str	r2, [r7, #0]
 80133aa:	0019      	movs	r1, r3
 80133ac:	1dfb      	adds	r3, r7, #7
 80133ae:	1c22      	adds	r2, r4, #0
 80133b0:	701a      	strb	r2, [r3, #0]
 80133b2:	1dbb      	adds	r3, r7, #6
 80133b4:	1c02      	adds	r2, r0, #0
 80133b6:	701a      	strb	r2, [r3, #0]
 80133b8:	1d7b      	adds	r3, r7, #5
 80133ba:	1c0a      	adds	r2, r1, #0
 80133bc:	701a      	strb	r2, [r3, #0]
    TimerTime_t nextTxDelay = ( TimerTime_t )( -1 );
 80133be:	2301      	movs	r3, #1
 80133c0:	425b      	negs	r3, r3
 80133c2:	617b      	str	r3, [r7, #20]

    // Update bands Time OFF
    for( uint8_t i = 0; i < nbBands; i++ )
 80133c4:	2313      	movs	r3, #19
 80133c6:	18fb      	adds	r3, r7, r3
 80133c8:	2200      	movs	r2, #0
 80133ca:	701a      	strb	r2, [r3, #0]
 80133cc:	e0cf      	b.n	801356e <RegionCommonUpdateBandTimeOff+0x1d0>
    {
        if( joined == false )
 80133ce:	1dfb      	adds	r3, r7, #7
 80133d0:	781b      	ldrb	r3, [r3, #0]
 80133d2:	2201      	movs	r2, #1
 80133d4:	4053      	eors	r3, r2
 80133d6:	b2db      	uxtb	r3, r3
 80133d8:	2b00      	cmp	r3, #0
 80133da:	d065      	beq.n	80134a8 <RegionCommonUpdateBandTimeOff+0x10a>
        {
            TimerTime_t txDoneTime =  MAX( TimerGetElapsedTime( bands[i].LastJoinTxDoneTime ),
 80133dc:	2313      	movs	r3, #19
 80133de:	18fb      	adds	r3, r7, r3
 80133e0:	781b      	ldrb	r3, [r3, #0]
 80133e2:	011b      	lsls	r3, r3, #4
 80133e4:	683a      	ldr	r2, [r7, #0]
 80133e6:	18d3      	adds	r3, r2, r3
 80133e8:	685b      	ldr	r3, [r3, #4]
 80133ea:	0018      	movs	r0, r3
 80133ec:	f002 f92b 	bl	8015646 <TimerGetElapsedTime>
 80133f0:	0004      	movs	r4, r0
 80133f2:	1dbb      	adds	r3, r7, #6
 80133f4:	781b      	ldrb	r3, [r3, #0]
 80133f6:	2b00      	cmp	r3, #0
 80133f8:	d00b      	beq.n	8013412 <RegionCommonUpdateBandTimeOff+0x74>
 80133fa:	2313      	movs	r3, #19
 80133fc:	18fb      	adds	r3, r7, r3
 80133fe:	781b      	ldrb	r3, [r3, #0]
 8013400:	011b      	lsls	r3, r3, #4
 8013402:	683a      	ldr	r2, [r7, #0]
 8013404:	18d3      	adds	r3, r2, r3
 8013406:	689b      	ldr	r3, [r3, #8]
 8013408:	0018      	movs	r0, r3
 801340a:	f002 f91c 	bl	8015646 <TimerGetElapsedTime>
 801340e:	0003      	movs	r3, r0
 8013410:	e000      	b.n	8013414 <RegionCommonUpdateBandTimeOff+0x76>
 8013412:	2300      	movs	r3, #0
 8013414:	42a3      	cmp	r3, r4
 8013416:	d20b      	bcs.n	8013430 <RegionCommonUpdateBandTimeOff+0x92>
 8013418:	2313      	movs	r3, #19
 801341a:	18fb      	adds	r3, r7, r3
 801341c:	781b      	ldrb	r3, [r3, #0]
 801341e:	011b      	lsls	r3, r3, #4
 8013420:	683a      	ldr	r2, [r7, #0]
 8013422:	18d3      	adds	r3, r2, r3
 8013424:	685b      	ldr	r3, [r3, #4]
 8013426:	0018      	movs	r0, r3
 8013428:	f002 f90d 	bl	8015646 <TimerGetElapsedTime>
 801342c:	0003      	movs	r3, r0
 801342e:	e010      	b.n	8013452 <RegionCommonUpdateBandTimeOff+0xb4>
 8013430:	1dbb      	adds	r3, r7, #6
 8013432:	781b      	ldrb	r3, [r3, #0]
 8013434:	2b00      	cmp	r3, #0
 8013436:	d00b      	beq.n	8013450 <RegionCommonUpdateBandTimeOff+0xb2>
 8013438:	2313      	movs	r3, #19
 801343a:	18fb      	adds	r3, r7, r3
 801343c:	781b      	ldrb	r3, [r3, #0]
 801343e:	011b      	lsls	r3, r3, #4
 8013440:	683a      	ldr	r2, [r7, #0]
 8013442:	18d3      	adds	r3, r2, r3
 8013444:	689b      	ldr	r3, [r3, #8]
 8013446:	0018      	movs	r0, r3
 8013448:	f002 f8fd 	bl	8015646 <TimerGetElapsedTime>
 801344c:	0003      	movs	r3, r0
 801344e:	e000      	b.n	8013452 <RegionCommonUpdateBandTimeOff+0xb4>
 8013450:	2300      	movs	r3, #0
 8013452:	60fb      	str	r3, [r7, #12]
                                        ( dutyCycle == true ) ? TimerGetElapsedTime( bands[i].LastTxDoneTime ) : 0 );

            if( bands[i].TimeOff <= txDoneTime )
 8013454:	2313      	movs	r3, #19
 8013456:	18fb      	adds	r3, r7, r3
 8013458:	781b      	ldrb	r3, [r3, #0]
 801345a:	011b      	lsls	r3, r3, #4
 801345c:	683a      	ldr	r2, [r7, #0]
 801345e:	18d3      	adds	r3, r2, r3
 8013460:	68db      	ldr	r3, [r3, #12]
 8013462:	68fa      	ldr	r2, [r7, #12]
 8013464:	429a      	cmp	r2, r3
 8013466:	d307      	bcc.n	8013478 <RegionCommonUpdateBandTimeOff+0xda>
            {
                bands[i].TimeOff = 0;
 8013468:	2313      	movs	r3, #19
 801346a:	18fb      	adds	r3, r7, r3
 801346c:	781b      	ldrb	r3, [r3, #0]
 801346e:	011b      	lsls	r3, r3, #4
 8013470:	683a      	ldr	r2, [r7, #0]
 8013472:	18d3      	adds	r3, r2, r3
 8013474:	2200      	movs	r2, #0
 8013476:	60da      	str	r2, [r3, #12]
            }
            if( bands[i].TimeOff != 0 )
 8013478:	2313      	movs	r3, #19
 801347a:	18fb      	adds	r3, r7, r3
 801347c:	781b      	ldrb	r3, [r3, #0]
 801347e:	011b      	lsls	r3, r3, #4
 8013480:	683a      	ldr	r2, [r7, #0]
 8013482:	18d3      	adds	r3, r2, r3
 8013484:	68db      	ldr	r3, [r3, #12]
 8013486:	2b00      	cmp	r3, #0
 8013488:	d06b      	beq.n	8013562 <RegionCommonUpdateBandTimeOff+0x1c4>
            {
                nextTxDelay = MIN( bands[i].TimeOff - txDoneTime, nextTxDelay );
 801348a:	2313      	movs	r3, #19
 801348c:	18fb      	adds	r3, r7, r3
 801348e:	781b      	ldrb	r3, [r3, #0]
 8013490:	011b      	lsls	r3, r3, #4
 8013492:	683a      	ldr	r2, [r7, #0]
 8013494:	18d3      	adds	r3, r2, r3
 8013496:	68da      	ldr	r2, [r3, #12]
 8013498:	68fb      	ldr	r3, [r7, #12]
 801349a:	1ad2      	subs	r2, r2, r3
 801349c:	697b      	ldr	r3, [r7, #20]
 801349e:	4293      	cmp	r3, r2
 80134a0:	d900      	bls.n	80134a4 <RegionCommonUpdateBandTimeOff+0x106>
 80134a2:	0013      	movs	r3, r2
 80134a4:	617b      	str	r3, [r7, #20]
 80134a6:	e05c      	b.n	8013562 <RegionCommonUpdateBandTimeOff+0x1c4>
            }
        }
        else
        {
            if( dutyCycle == true )
 80134a8:	1dbb      	adds	r3, r7, #6
 80134aa:	781b      	ldrb	r3, [r3, #0]
 80134ac:	2b00      	cmp	r3, #0
 80134ae:	d04e      	beq.n	801354e <RegionCommonUpdateBandTimeOff+0x1b0>
            {
                if( bands[i].TimeOff <= TimerGetElapsedTime( bands[i].LastTxDoneTime ) )
 80134b0:	2113      	movs	r1, #19
 80134b2:	187b      	adds	r3, r7, r1
 80134b4:	781b      	ldrb	r3, [r3, #0]
 80134b6:	011b      	lsls	r3, r3, #4
 80134b8:	683a      	ldr	r2, [r7, #0]
 80134ba:	18d3      	adds	r3, r2, r3
 80134bc:	68dc      	ldr	r4, [r3, #12]
 80134be:	187b      	adds	r3, r7, r1
 80134c0:	781b      	ldrb	r3, [r3, #0]
 80134c2:	011b      	lsls	r3, r3, #4
 80134c4:	683a      	ldr	r2, [r7, #0]
 80134c6:	18d3      	adds	r3, r2, r3
 80134c8:	689b      	ldr	r3, [r3, #8]
 80134ca:	0018      	movs	r0, r3
 80134cc:	f002 f8bb 	bl	8015646 <TimerGetElapsedTime>
 80134d0:	0003      	movs	r3, r0
 80134d2:	429c      	cmp	r4, r3
 80134d4:	d807      	bhi.n	80134e6 <RegionCommonUpdateBandTimeOff+0x148>
                {
                    bands[i].TimeOff = 0;
 80134d6:	2313      	movs	r3, #19
 80134d8:	18fb      	adds	r3, r7, r3
 80134da:	781b      	ldrb	r3, [r3, #0]
 80134dc:	011b      	lsls	r3, r3, #4
 80134de:	683a      	ldr	r2, [r7, #0]
 80134e0:	18d3      	adds	r3, r2, r3
 80134e2:	2200      	movs	r2, #0
 80134e4:	60da      	str	r2, [r3, #12]
                }
                if( bands[i].TimeOff != 0 )
 80134e6:	2313      	movs	r3, #19
 80134e8:	18fb      	adds	r3, r7, r3
 80134ea:	781b      	ldrb	r3, [r3, #0]
 80134ec:	011b      	lsls	r3, r3, #4
 80134ee:	683a      	ldr	r2, [r7, #0]
 80134f0:	18d3      	adds	r3, r2, r3
 80134f2:	68db      	ldr	r3, [r3, #12]
 80134f4:	2b00      	cmp	r3, #0
 80134f6:	d034      	beq.n	8013562 <RegionCommonUpdateBandTimeOff+0x1c4>
                {
                    nextTxDelay = MIN( bands[i].TimeOff - TimerGetElapsedTime( bands[i].LastTxDoneTime ),
 80134f8:	2113      	movs	r1, #19
 80134fa:	187b      	adds	r3, r7, r1
 80134fc:	781b      	ldrb	r3, [r3, #0]
 80134fe:	011b      	lsls	r3, r3, #4
 8013500:	683a      	ldr	r2, [r7, #0]
 8013502:	18d3      	adds	r3, r2, r3
 8013504:	68dc      	ldr	r4, [r3, #12]
 8013506:	187b      	adds	r3, r7, r1
 8013508:	781b      	ldrb	r3, [r3, #0]
 801350a:	011b      	lsls	r3, r3, #4
 801350c:	683a      	ldr	r2, [r7, #0]
 801350e:	18d3      	adds	r3, r2, r3
 8013510:	689b      	ldr	r3, [r3, #8]
 8013512:	0018      	movs	r0, r3
 8013514:	f002 f897 	bl	8015646 <TimerGetElapsedTime>
 8013518:	0003      	movs	r3, r0
 801351a:	1ae3      	subs	r3, r4, r3
 801351c:	697a      	ldr	r2, [r7, #20]
 801351e:	429a      	cmp	r2, r3
 8013520:	d912      	bls.n	8013548 <RegionCommonUpdateBandTimeOff+0x1aa>
 8013522:	2113      	movs	r1, #19
 8013524:	187b      	adds	r3, r7, r1
 8013526:	781b      	ldrb	r3, [r3, #0]
 8013528:	011b      	lsls	r3, r3, #4
 801352a:	683a      	ldr	r2, [r7, #0]
 801352c:	18d3      	adds	r3, r2, r3
 801352e:	68dc      	ldr	r4, [r3, #12]
 8013530:	187b      	adds	r3, r7, r1
 8013532:	781b      	ldrb	r3, [r3, #0]
 8013534:	011b      	lsls	r3, r3, #4
 8013536:	683a      	ldr	r2, [r7, #0]
 8013538:	18d3      	adds	r3, r2, r3
 801353a:	689b      	ldr	r3, [r3, #8]
 801353c:	0018      	movs	r0, r3
 801353e:	f002 f882 	bl	8015646 <TimerGetElapsedTime>
 8013542:	0003      	movs	r3, r0
 8013544:	1ae3      	subs	r3, r4, r3
 8013546:	e000      	b.n	801354a <RegionCommonUpdateBandTimeOff+0x1ac>
 8013548:	697b      	ldr	r3, [r7, #20]
 801354a:	617b      	str	r3, [r7, #20]
 801354c:	e009      	b.n	8013562 <RegionCommonUpdateBandTimeOff+0x1c4>
                                       nextTxDelay );
                }
            }
            else
            {
                nextTxDelay = 0;
 801354e:	2300      	movs	r3, #0
 8013550:	617b      	str	r3, [r7, #20]
                bands[i].TimeOff = 0;
 8013552:	2313      	movs	r3, #19
 8013554:	18fb      	adds	r3, r7, r3
 8013556:	781b      	ldrb	r3, [r3, #0]
 8013558:	011b      	lsls	r3, r3, #4
 801355a:	683a      	ldr	r2, [r7, #0]
 801355c:	18d3      	adds	r3, r2, r3
 801355e:	2200      	movs	r2, #0
 8013560:	60da      	str	r2, [r3, #12]
    for( uint8_t i = 0; i < nbBands; i++ )
 8013562:	2113      	movs	r1, #19
 8013564:	187b      	adds	r3, r7, r1
 8013566:	781a      	ldrb	r2, [r3, #0]
 8013568:	187b      	adds	r3, r7, r1
 801356a:	3201      	adds	r2, #1
 801356c:	701a      	strb	r2, [r3, #0]
 801356e:	2313      	movs	r3, #19
 8013570:	18fa      	adds	r2, r7, r3
 8013572:	1d7b      	adds	r3, r7, #5
 8013574:	7812      	ldrb	r2, [r2, #0]
 8013576:	781b      	ldrb	r3, [r3, #0]
 8013578:	429a      	cmp	r2, r3
 801357a:	d200      	bcs.n	801357e <RegionCommonUpdateBandTimeOff+0x1e0>
 801357c:	e727      	b.n	80133ce <RegionCommonUpdateBandTimeOff+0x30>
            }
        }
    }
    return nextTxDelay;
 801357e:	697b      	ldr	r3, [r7, #20]
}
 8013580:	0018      	movs	r0, r3
 8013582:	46bd      	mov	sp, r7
 8013584:	b007      	add	sp, #28
 8013586:	bd90      	pop	{r4, r7, pc}

08013588 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 8013588:	b580      	push	{r7, lr}
 801358a:	b084      	sub	sp, #16
 801358c:	af00      	add	r7, sp, #0
 801358e:	6078      	str	r0, [r7, #4]
 8013590:	6039      	str	r1, [r7, #0]
    uint8_t retIndex = 0;
 8013592:	230f      	movs	r3, #15
 8013594:	18fb      	adds	r3, r7, r3
 8013596:	2200      	movs	r2, #0
 8013598:	701a      	strb	r2, [r3, #0]

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 801359a:	687b      	ldr	r3, [r7, #4]
 801359c:	781b      	ldrb	r3, [r3, #0]
 801359e:	2b03      	cmp	r3, #3
 80135a0:	d141      	bne.n	8013626 <RegionCommonParseLinkAdrReq+0x9e>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 80135a2:	687b      	ldr	r3, [r7, #4]
 80135a4:	3301      	adds	r3, #1
 80135a6:	781b      	ldrb	r3, [r3, #0]
 80135a8:	b25a      	sxtb	r2, r3
 80135aa:	683b      	ldr	r3, [r7, #0]
 80135ac:	705a      	strb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 80135ae:	683b      	ldr	r3, [r7, #0]
 80135b0:	785b      	ldrb	r3, [r3, #1]
 80135b2:	b25b      	sxtb	r3, r3
 80135b4:	220f      	movs	r2, #15
 80135b6:	4013      	ands	r3, r2
 80135b8:	b25a      	sxtb	r2, r3
 80135ba:	683b      	ldr	r3, [r7, #0]
 80135bc:	709a      	strb	r2, [r3, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 80135be:	683b      	ldr	r3, [r7, #0]
 80135c0:	785b      	ldrb	r3, [r3, #1]
 80135c2:	b25b      	sxtb	r3, r3
 80135c4:	b2db      	uxtb	r3, r3
 80135c6:	091b      	lsrs	r3, r3, #4
 80135c8:	b2db      	uxtb	r3, r3
 80135ca:	b25a      	sxtb	r2, r3
 80135cc:	683b      	ldr	r3, [r7, #0]
 80135ce:	705a      	strb	r2, [r3, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 80135d0:	687b      	ldr	r3, [r7, #4]
 80135d2:	3302      	adds	r3, #2
 80135d4:	781b      	ldrb	r3, [r3, #0]
 80135d6:	b29a      	uxth	r2, r3
 80135d8:	683b      	ldr	r3, [r7, #0]
 80135da:	809a      	strh	r2, [r3, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 80135dc:	683b      	ldr	r3, [r7, #0]
 80135de:	889b      	ldrh	r3, [r3, #4]
 80135e0:	b21a      	sxth	r2, r3
 80135e2:	687b      	ldr	r3, [r7, #4]
 80135e4:	3303      	adds	r3, #3
 80135e6:	781b      	ldrb	r3, [r3, #0]
 80135e8:	021b      	lsls	r3, r3, #8
 80135ea:	b21b      	sxth	r3, r3
 80135ec:	4313      	orrs	r3, r2
 80135ee:	b21b      	sxth	r3, r3
 80135f0:	b29a      	uxth	r2, r3
 80135f2:	683b      	ldr	r3, [r7, #0]
 80135f4:	809a      	strh	r2, [r3, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 80135f6:	687b      	ldr	r3, [r7, #4]
 80135f8:	791a      	ldrb	r2, [r3, #4]
 80135fa:	683b      	ldr	r3, [r7, #0]
 80135fc:	701a      	strb	r2, [r3, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 80135fe:	683b      	ldr	r3, [r7, #0]
 8013600:	781b      	ldrb	r3, [r3, #0]
 8013602:	091b      	lsrs	r3, r3, #4
 8013604:	b2db      	uxtb	r3, r3
 8013606:	2207      	movs	r2, #7
 8013608:	4013      	ands	r3, r2
 801360a:	b2da      	uxtb	r2, r3
 801360c:	683b      	ldr	r3, [r7, #0]
 801360e:	70da      	strb	r2, [r3, #3]
        linkAdrParams->NbRep &= 0x0F;
 8013610:	683b      	ldr	r3, [r7, #0]
 8013612:	781b      	ldrb	r3, [r3, #0]
 8013614:	220f      	movs	r2, #15
 8013616:	4013      	ands	r3, r2
 8013618:	b2da      	uxtb	r2, r3
 801361a:	683b      	ldr	r3, [r7, #0]
 801361c:	701a      	strb	r2, [r3, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 801361e:	230f      	movs	r3, #15
 8013620:	18fb      	adds	r3, r7, r3
 8013622:	2205      	movs	r2, #5
 8013624:	701a      	strb	r2, [r3, #0]
    }
    return retIndex;
 8013626:	230f      	movs	r3, #15
 8013628:	18fb      	adds	r3, r7, r3
 801362a:	781b      	ldrb	r3, [r3, #0]
}
 801362c:	0018      	movs	r0, r3
 801362e:	46bd      	mov	sp, r7
 8013630:	b004      	add	sp, #16
 8013632:	bd80      	pop	{r7, pc}

08013634 <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 8013634:	b5b0      	push	{r4, r5, r7, lr}
 8013636:	b088      	sub	sp, #32
 8013638:	af02      	add	r7, sp, #8
 801363a:	60f8      	str	r0, [r7, #12]
 801363c:	60b9      	str	r1, [r7, #8]
 801363e:	607a      	str	r2, [r7, #4]
 8013640:	603b      	str	r3, [r7, #0]
    uint8_t status = verifyParams->Status;
 8013642:	2317      	movs	r3, #23
 8013644:	18fb      	adds	r3, r7, r3
 8013646:	68fa      	ldr	r2, [r7, #12]
 8013648:	7912      	ldrb	r2, [r2, #4]
 801364a:	701a      	strb	r2, [r3, #0]
    int8_t datarate = verifyParams->Datarate;
 801364c:	2316      	movs	r3, #22
 801364e:	18fb      	adds	r3, r7, r3
 8013650:	68fa      	ldr	r2, [r7, #12]
 8013652:	7992      	ldrb	r2, [r2, #6]
 8013654:	701a      	strb	r2, [r3, #0]
    int8_t txPower = verifyParams->TxPower;
 8013656:	2315      	movs	r3, #21
 8013658:	18fb      	adds	r3, r7, r3
 801365a:	68fa      	ldr	r2, [r7, #12]
 801365c:	79d2      	ldrb	r2, [r2, #7]
 801365e:	701a      	strb	r2, [r3, #0]
    int8_t nbRepetitions = verifyParams->NbRep;
 8013660:	68fb      	ldr	r3, [r7, #12]
 8013662:	7a1a      	ldrb	r2, [r3, #8]
 8013664:	2314      	movs	r3, #20
 8013666:	18fb      	adds	r3, r7, r3
 8013668:	701a      	strb	r2, [r3, #0]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 801366a:	68fb      	ldr	r3, [r7, #12]
 801366c:	795b      	ldrb	r3, [r3, #5]
 801366e:	2201      	movs	r2, #1
 8013670:	4053      	eors	r3, r2
 8013672:	b2db      	uxtb	r3, r3
 8013674:	2b00      	cmp	r3, #0
 8013676:	d00e      	beq.n	8013696 <RegionCommonLinkAdrReqVerifyParams+0x62>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 8013678:	2314      	movs	r3, #20
 801367a:	18fb      	adds	r3, r7, r3
 801367c:	68fa      	ldr	r2, [r7, #12]
 801367e:	7ad2      	ldrb	r2, [r2, #11]
 8013680:	701a      	strb	r2, [r3, #0]
        datarate =  verifyParams->CurrentDatarate;
 8013682:	2316      	movs	r3, #22
 8013684:	18fb      	adds	r3, r7, r3
 8013686:	68fa      	ldr	r2, [r7, #12]
 8013688:	7a52      	ldrb	r2, [r2, #9]
 801368a:	701a      	strb	r2, [r3, #0]
        txPower =  verifyParams->CurrentTxPower;
 801368c:	2315      	movs	r3, #21
 801368e:	18fb      	adds	r3, r7, r3
 8013690:	68fa      	ldr	r2, [r7, #12]
 8013692:	7a92      	ldrb	r2, [r2, #10]
 8013694:	701a      	strb	r2, [r3, #0]
    }

    if( status != 0 )
 8013696:	2317      	movs	r3, #23
 8013698:	18fb      	adds	r3, r7, r3
 801369a:	781b      	ldrb	r3, [r3, #0]
 801369c:	2b00      	cmp	r3, #0
 801369e:	d049      	beq.n	8013734 <RegionCommonLinkAdrReqVerifyParams+0x100>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 80136a0:	68fb      	ldr	r3, [r7, #12]
 80136a2:	7b18      	ldrb	r0, [r3, #12]
 80136a4:	68fb      	ldr	r3, [r7, #12]
 80136a6:	691c      	ldr	r4, [r3, #16]
 80136a8:	68fb      	ldr	r3, [r7, #12]
 80136aa:	2514      	movs	r5, #20
 80136ac:	575d      	ldrsb	r5, [r3, r5]
 80136ae:	68fb      	ldr	r3, [r7, #12]
 80136b0:	2215      	movs	r2, #21
 80136b2:	569a      	ldrsb	r2, [r3, r2]
 80136b4:	68fb      	ldr	r3, [r7, #12]
 80136b6:	699b      	ldr	r3, [r3, #24]
 80136b8:	2116      	movs	r1, #22
 80136ba:	1879      	adds	r1, r7, r1
 80136bc:	7809      	ldrb	r1, [r1, #0]
 80136be:	b249      	sxtb	r1, r1
 80136c0:	9301      	str	r3, [sp, #4]
 80136c2:	9200      	str	r2, [sp, #0]
 80136c4:	002b      	movs	r3, r5
 80136c6:	000a      	movs	r2, r1
 80136c8:	0021      	movs	r1, r4
 80136ca:	f7ff fcdb 	bl	8013084 <RegionCommonChanVerifyDr>
 80136ce:	0003      	movs	r3, r0
 80136d0:	001a      	movs	r2, r3
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
 80136d2:	2301      	movs	r3, #1
 80136d4:	4053      	eors	r3, r2
 80136d6:	b2db      	uxtb	r3, r3
        if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 80136d8:	2b00      	cmp	r3, #0
 80136da:	d006      	beq.n	80136ea <RegionCommonLinkAdrReqVerifyParams+0xb6>
        {
            status &= 0xFD; // Datarate KO
 80136dc:	2217      	movs	r2, #23
 80136de:	18bb      	adds	r3, r7, r2
 80136e0:	18ba      	adds	r2, r7, r2
 80136e2:	7812      	ldrb	r2, [r2, #0]
 80136e4:	2102      	movs	r1, #2
 80136e6:	438a      	bics	r2, r1
 80136e8:	701a      	strb	r2, [r3, #0]
        }

        // Verify tx power
        if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 80136ea:	68fb      	ldr	r3, [r7, #12]
 80136ec:	211d      	movs	r1, #29
 80136ee:	5659      	ldrsb	r1, [r3, r1]
 80136f0:	68fb      	ldr	r3, [r7, #12]
 80136f2:	221c      	movs	r2, #28
 80136f4:	569a      	ldrsb	r2, [r3, r2]
 80136f6:	2315      	movs	r3, #21
 80136f8:	18fb      	adds	r3, r7, r3
 80136fa:	781b      	ldrb	r3, [r3, #0]
 80136fc:	b25b      	sxtb	r3, r3
 80136fe:	0018      	movs	r0, r3
 8013700:	f7ff fd5a 	bl	80131b8 <RegionCommonValueInRange>
 8013704:	1e03      	subs	r3, r0, #0
 8013706:	d115      	bne.n	8013734 <RegionCommonLinkAdrReqVerifyParams+0x100>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 8013708:	68fb      	ldr	r3, [r7, #12]
 801370a:	7f5b      	ldrb	r3, [r3, #29]
 801370c:	b25b      	sxtb	r3, r3
 801370e:	2215      	movs	r2, #21
 8013710:	18ba      	adds	r2, r7, r2
 8013712:	7812      	ldrb	r2, [r2, #0]
 8013714:	b252      	sxtb	r2, r2
 8013716:	429a      	cmp	r2, r3
 8013718:	da05      	bge.n	8013726 <RegionCommonLinkAdrReqVerifyParams+0xf2>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
 801371a:	2315      	movs	r3, #21
 801371c:	18fb      	adds	r3, r7, r3
 801371e:	68fa      	ldr	r2, [r7, #12]
 8013720:	7f52      	ldrb	r2, [r2, #29]
 8013722:	701a      	strb	r2, [r3, #0]
 8013724:	e006      	b.n	8013734 <RegionCommonLinkAdrReqVerifyParams+0x100>
            }
            else
            {
                status &= 0xFB; // TxPower KO
 8013726:	2217      	movs	r2, #23
 8013728:	18bb      	adds	r3, r7, r2
 801372a:	18ba      	adds	r2, r7, r2
 801372c:	7812      	ldrb	r2, [r2, #0]
 801372e:	2104      	movs	r1, #4
 8013730:	438a      	bics	r2, r1
 8013732:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 8013734:	2317      	movs	r3, #23
 8013736:	18fb      	adds	r3, r7, r3
 8013738:	781b      	ldrb	r3, [r3, #0]
 801373a:	2b07      	cmp	r3, #7
 801373c:	d109      	bne.n	8013752 <RegionCommonLinkAdrReqVerifyParams+0x11e>
    {
        if( nbRepetitions == 0 )
 801373e:	2314      	movs	r3, #20
 8013740:	18fb      	adds	r3, r7, r3
 8013742:	781b      	ldrb	r3, [r3, #0]
 8013744:	b25b      	sxtb	r3, r3
 8013746:	2b00      	cmp	r3, #0
 8013748:	d103      	bne.n	8013752 <RegionCommonLinkAdrReqVerifyParams+0x11e>
        { // Restore the default value according to the LoRaWAN specification
            nbRepetitions = 1;
 801374a:	2314      	movs	r3, #20
 801374c:	18fb      	adds	r3, r7, r3
 801374e:	2201      	movs	r2, #1
 8013750:	701a      	strb	r2, [r3, #0]
        }
    }

    // Apply changes
    *dr = datarate;
 8013752:	68bb      	ldr	r3, [r7, #8]
 8013754:	2216      	movs	r2, #22
 8013756:	18ba      	adds	r2, r7, r2
 8013758:	7812      	ldrb	r2, [r2, #0]
 801375a:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 801375c:	687b      	ldr	r3, [r7, #4]
 801375e:	2215      	movs	r2, #21
 8013760:	18ba      	adds	r2, r7, r2
 8013762:	7812      	ldrb	r2, [r2, #0]
 8013764:	701a      	strb	r2, [r3, #0]
    *nbRep = nbRepetitions;
 8013766:	2314      	movs	r3, #20
 8013768:	18fb      	adds	r3, r7, r3
 801376a:	781a      	ldrb	r2, [r3, #0]
 801376c:	683b      	ldr	r3, [r7, #0]
 801376e:	701a      	strb	r2, [r3, #0]

    return status;
 8013770:	2317      	movs	r3, #23
 8013772:	18fb      	adds	r3, r7, r3
 8013774:	781b      	ldrb	r3, [r3, #0]
}
 8013776:	0018      	movs	r0, r3
 8013778:	46bd      	mov	sp, r7
 801377a:	b006      	add	sp, #24
 801377c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08013780 <RegionCommonComputeSymbolTimeLoRa>:

double RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidth )
{
 8013780:	b5b0      	push	{r4, r5, r7, lr}
 8013782:	b082      	sub	sp, #8
 8013784:	af00      	add	r7, sp, #0
 8013786:	0002      	movs	r2, r0
 8013788:	6039      	str	r1, [r7, #0]
 801378a:	1dfb      	adds	r3, r7, #7
 801378c:	701a      	strb	r2, [r3, #0]
    return ( ( double )( 1 << phyDr ) / ( double )bandwidth ) * 1000;
 801378e:	1dfb      	adds	r3, r7, #7
 8013790:	781b      	ldrb	r3, [r3, #0]
 8013792:	2201      	movs	r2, #1
 8013794:	409a      	lsls	r2, r3
 8013796:	0013      	movs	r3, r2
 8013798:	0018      	movs	r0, r3
 801379a:	f7ee fef5 	bl	8002588 <__aeabi_i2d>
 801379e:	0004      	movs	r4, r0
 80137a0:	000d      	movs	r5, r1
 80137a2:	6838      	ldr	r0, [r7, #0]
 80137a4:	f7ee ff2a 	bl	80025fc <__aeabi_ui2d>
 80137a8:	0002      	movs	r2, r0
 80137aa:	000b      	movs	r3, r1
 80137ac:	0020      	movs	r0, r4
 80137ae:	0029      	movs	r1, r5
 80137b0:	f7ed fcf0 	bl	8001194 <__aeabi_ddiv>
 80137b4:	0003      	movs	r3, r0
 80137b6:	000c      	movs	r4, r1
 80137b8:	0018      	movs	r0, r3
 80137ba:	0021      	movs	r1, r4
 80137bc:	2200      	movs	r2, #0
 80137be:	4b05      	ldr	r3, [pc, #20]	; (80137d4 <RegionCommonComputeSymbolTimeLoRa+0x54>)
 80137c0:	f7ee f8f2 	bl	80019a8 <__aeabi_dmul>
 80137c4:	0003      	movs	r3, r0
 80137c6:	000c      	movs	r4, r1
}
 80137c8:	0018      	movs	r0, r3
 80137ca:	0021      	movs	r1, r4
 80137cc:	46bd      	mov	sp, r7
 80137ce:	b002      	add	sp, #8
 80137d0:	bdb0      	pop	{r4, r5, r7, pc}
 80137d2:	46c0      	nop			; (mov r8, r8)
 80137d4:	408f4000 	.word	0x408f4000

080137d8 <RegionCommonComputeSymbolTimeFsk>:

double RegionCommonComputeSymbolTimeFsk( uint8_t phyDr )
{
 80137d8:	b590      	push	{r4, r7, lr}
 80137da:	b083      	sub	sp, #12
 80137dc:	af00      	add	r7, sp, #0
 80137de:	0002      	movs	r2, r0
 80137e0:	1dfb      	adds	r3, r7, #7
 80137e2:	701a      	strb	r2, [r3, #0]
    return ( 8.0 / ( double )phyDr ); // 1 symbol equals 1 byte
 80137e4:	1dfb      	adds	r3, r7, #7
 80137e6:	781b      	ldrb	r3, [r3, #0]
 80137e8:	0018      	movs	r0, r3
 80137ea:	f7ee ff07 	bl	80025fc <__aeabi_ui2d>
 80137ee:	0003      	movs	r3, r0
 80137f0:	000c      	movs	r4, r1
 80137f2:	001a      	movs	r2, r3
 80137f4:	0023      	movs	r3, r4
 80137f6:	2000      	movs	r0, #0
 80137f8:	4904      	ldr	r1, [pc, #16]	; (801380c <RegionCommonComputeSymbolTimeFsk+0x34>)
 80137fa:	f7ed fccb 	bl	8001194 <__aeabi_ddiv>
 80137fe:	0003      	movs	r3, r0
 8013800:	000c      	movs	r4, r1
}
 8013802:	0018      	movs	r0, r3
 8013804:	0021      	movs	r1, r4
 8013806:	46bd      	mov	sp, r7
 8013808:	b003      	add	sp, #12
 801380a:	bd90      	pop	{r4, r7, pc}
 801380c:	40200000 	.word	0x40200000

08013810 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( double tSymbol, uint8_t minRxSymbols, uint32_t rxError, uint32_t wakeUpTime, uint32_t* windowTimeout, int32_t* windowOffset )
{
 8013810:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013812:	b085      	sub	sp, #20
 8013814:	af00      	add	r7, sp, #0
 8013816:	60b8      	str	r0, [r7, #8]
 8013818:	60f9      	str	r1, [r7, #12]
 801381a:	603b      	str	r3, [r7, #0]
 801381c:	1dfb      	adds	r3, r7, #7
 801381e:	701a      	strb	r2, [r3, #0]
    *windowTimeout = MAX( ( uint32_t )ceil( ( ( 2 * minRxSymbols - 8 ) * tSymbol + 2 * rxError ) / tSymbol ), minRxSymbols ); // Computed number of symbols
 8013820:	1dfb      	adds	r3, r7, #7
 8013822:	781c      	ldrb	r4, [r3, #0]
 8013824:	1dfb      	adds	r3, r7, #7
 8013826:	781b      	ldrb	r3, [r3, #0]
 8013828:	3b04      	subs	r3, #4
 801382a:	005b      	lsls	r3, r3, #1
 801382c:	0018      	movs	r0, r3
 801382e:	f7ee feab 	bl	8002588 <__aeabi_i2d>
 8013832:	68ba      	ldr	r2, [r7, #8]
 8013834:	68fb      	ldr	r3, [r7, #12]
 8013836:	f7ee f8b7 	bl	80019a8 <__aeabi_dmul>
 801383a:	0002      	movs	r2, r0
 801383c:	000b      	movs	r3, r1
 801383e:	0015      	movs	r5, r2
 8013840:	001e      	movs	r6, r3
 8013842:	683b      	ldr	r3, [r7, #0]
 8013844:	005b      	lsls	r3, r3, #1
 8013846:	0018      	movs	r0, r3
 8013848:	f7ee fed8 	bl	80025fc <__aeabi_ui2d>
 801384c:	0002      	movs	r2, r0
 801384e:	000b      	movs	r3, r1
 8013850:	0028      	movs	r0, r5
 8013852:	0031      	movs	r1, r6
 8013854:	f7ed f982 	bl	8000b5c <__aeabi_dadd>
 8013858:	0002      	movs	r2, r0
 801385a:	000b      	movs	r3, r1
 801385c:	0010      	movs	r0, r2
 801385e:	0019      	movs	r1, r3
 8013860:	68ba      	ldr	r2, [r7, #8]
 8013862:	68fb      	ldr	r3, [r7, #12]
 8013864:	f7ed fc96 	bl	8001194 <__aeabi_ddiv>
 8013868:	0002      	movs	r2, r0
 801386a:	000b      	movs	r3, r1
 801386c:	0010      	movs	r0, r2
 801386e:	0019      	movs	r1, r3
 8013870:	f00b fe00 	bl	801f474 <ceil>
 8013874:	0002      	movs	r2, r0
 8013876:	000b      	movs	r3, r1
 8013878:	0010      	movs	r0, r2
 801387a:	0019      	movs	r1, r3
 801387c:	f7ec fe6e 	bl	800055c <__aeabi_d2uiz>
 8013880:	0002      	movs	r2, r0
 8013882:	0023      	movs	r3, r4
 8013884:	4293      	cmp	r3, r2
 8013886:	d200      	bcs.n	801388a <RegionCommonComputeRxWindowParameters+0x7a>
 8013888:	0013      	movs	r3, r2
 801388a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801388c:	6013      	str	r3, [r2, #0]
    *windowOffset = ( int32_t )ceil( ( 4.0 * tSymbol ) - ( ( *windowTimeout * tSymbol ) / 2.0 ) - wakeUpTime );
 801388e:	2200      	movs	r2, #0
 8013890:	4b20      	ldr	r3, [pc, #128]	; (8013914 <RegionCommonComputeRxWindowParameters+0x104>)
 8013892:	68b8      	ldr	r0, [r7, #8]
 8013894:	68f9      	ldr	r1, [r7, #12]
 8013896:	f7ee f887 	bl	80019a8 <__aeabi_dmul>
 801389a:	0003      	movs	r3, r0
 801389c:	000c      	movs	r4, r1
 801389e:	0025      	movs	r5, r4
 80138a0:	001c      	movs	r4, r3
 80138a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138a4:	681b      	ldr	r3, [r3, #0]
 80138a6:	0018      	movs	r0, r3
 80138a8:	f7ee fea8 	bl	80025fc <__aeabi_ui2d>
 80138ac:	68ba      	ldr	r2, [r7, #8]
 80138ae:	68fb      	ldr	r3, [r7, #12]
 80138b0:	f7ee f87a 	bl	80019a8 <__aeabi_dmul>
 80138b4:	0002      	movs	r2, r0
 80138b6:	000b      	movs	r3, r1
 80138b8:	0010      	movs	r0, r2
 80138ba:	0019      	movs	r1, r3
 80138bc:	2200      	movs	r2, #0
 80138be:	2380      	movs	r3, #128	; 0x80
 80138c0:	05db      	lsls	r3, r3, #23
 80138c2:	f7ed fc67 	bl	8001194 <__aeabi_ddiv>
 80138c6:	0002      	movs	r2, r0
 80138c8:	000b      	movs	r3, r1
 80138ca:	0020      	movs	r0, r4
 80138cc:	0029      	movs	r1, r5
 80138ce:	f7ee fadd 	bl	8001e8c <__aeabi_dsub>
 80138d2:	0003      	movs	r3, r0
 80138d4:	000c      	movs	r4, r1
 80138d6:	0025      	movs	r5, r4
 80138d8:	001c      	movs	r4, r3
 80138da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80138dc:	f7ee fe8e 	bl	80025fc <__aeabi_ui2d>
 80138e0:	0002      	movs	r2, r0
 80138e2:	000b      	movs	r3, r1
 80138e4:	0020      	movs	r0, r4
 80138e6:	0029      	movs	r1, r5
 80138e8:	f7ee fad0 	bl	8001e8c <__aeabi_dsub>
 80138ec:	0003      	movs	r3, r0
 80138ee:	000c      	movs	r4, r1
 80138f0:	0018      	movs	r0, r3
 80138f2:	0021      	movs	r1, r4
 80138f4:	f00b fdbe 	bl	801f474 <ceil>
 80138f8:	0003      	movs	r3, r0
 80138fa:	000c      	movs	r4, r1
 80138fc:	0018      	movs	r0, r3
 80138fe:	0021      	movs	r1, r4
 8013900:	f7ee fe0c 	bl	800251c <__aeabi_d2iz>
 8013904:	0002      	movs	r2, r0
 8013906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013908:	601a      	str	r2, [r3, #0]
}
 801390a:	46c0      	nop			; (mov r8, r8)
 801390c:	46bd      	mov	sp, r7
 801390e:	b005      	add	sp, #20
 8013910:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013912:	46c0      	nop			; (mov r8, r8)
 8013914:	40100000 	.word	0x40100000

08013918 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 8013918:	b5b0      	push	{r4, r5, r7, lr}
 801391a:	b086      	sub	sp, #24
 801391c:	af00      	add	r7, sp, #0
 801391e:	60b9      	str	r1, [r7, #8]
 8013920:	607a      	str	r2, [r7, #4]
 8013922:	210f      	movs	r1, #15
 8013924:	187b      	adds	r3, r7, r1
 8013926:	1c02      	adds	r2, r0, #0
 8013928:	701a      	strb	r2, [r3, #0]
    int8_t phyTxPower = 0;
 801392a:	2517      	movs	r5, #23
 801392c:	197b      	adds	r3, r7, r5
 801392e:	2200      	movs	r2, #0
 8013930:	701a      	strb	r2, [r3, #0]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 8013932:	187b      	adds	r3, r7, r1
 8013934:	781b      	ldrb	r3, [r3, #0]
 8013936:	b25b      	sxtb	r3, r3
 8013938:	005b      	lsls	r3, r3, #1
 801393a:	0018      	movs	r0, r3
 801393c:	f7ed f8ce 	bl	8000adc <__aeabi_ui2f>
 8013940:	1c03      	adds	r3, r0, #0
 8013942:	1c19      	adds	r1, r3, #0
 8013944:	68b8      	ldr	r0, [r7, #8]
 8013946:	f7ec ff05 	bl	8000754 <__aeabi_fsub>
 801394a:	1c03      	adds	r3, r0, #0
 801394c:	6879      	ldr	r1, [r7, #4]
 801394e:	1c18      	adds	r0, r3, #0
 8013950:	f7ec ff00 	bl	8000754 <__aeabi_fsub>
 8013954:	1c03      	adds	r3, r0, #0
 8013956:	1c18      	adds	r0, r3, #0
 8013958:	f7ee fe82 	bl	8002660 <__aeabi_f2d>
 801395c:	0003      	movs	r3, r0
 801395e:	000c      	movs	r4, r1
 8013960:	0018      	movs	r0, r3
 8013962:	0021      	movs	r1, r4
 8013964:	f00b fe08 	bl	801f578 <floor>
 8013968:	0002      	movs	r2, r0
 801396a:	000b      	movs	r3, r1
 801396c:	197c      	adds	r4, r7, r5
 801396e:	0010      	movs	r0, r2
 8013970:	0019      	movs	r1, r3
 8013972:	f7ee fdd3 	bl	800251c <__aeabi_d2iz>
 8013976:	0003      	movs	r3, r0
 8013978:	7023      	strb	r3, [r4, #0]

    return phyTxPower;
 801397a:	197b      	adds	r3, r7, r5
 801397c:	781b      	ldrb	r3, [r3, #0]
 801397e:	b25b      	sxtb	r3, r3
}
 8013980:	0018      	movs	r0, r3
 8013982:	46bd      	mov	sp, r7
 8013984:	b006      	add	sp, #24
 8013986:	bdb0      	pop	{r4, r5, r7, pc}

08013988 <RegionCommonCalcBackOff>:

void RegionCommonCalcBackOff( RegionCommonCalcBackOffParams_t* calcBackOffParams )
{
 8013988:	b5b0      	push	{r4, r5, r7, lr}
 801398a:	b084      	sub	sp, #16
 801398c:	af00      	add	r7, sp, #0
 801398e:	6078      	str	r0, [r7, #4]
    uint8_t bandIdx = calcBackOffParams->Channels[calcBackOffParams->Channel].Band;
 8013990:	687b      	ldr	r3, [r7, #4]
 8013992:	681a      	ldr	r2, [r3, #0]
 8013994:	687b      	ldr	r3, [r7, #4]
 8013996:	7adb      	ldrb	r3, [r3, #11]
 8013998:	0019      	movs	r1, r3
 801399a:	000b      	movs	r3, r1
 801399c:	005b      	lsls	r3, r3, #1
 801399e:	185b      	adds	r3, r3, r1
 80139a0:	009b      	lsls	r3, r3, #2
 80139a2:	18d2      	adds	r2, r2, r3
 80139a4:	210f      	movs	r1, #15
 80139a6:	187b      	adds	r3, r7, r1
 80139a8:	7a52      	ldrb	r2, [r2, #9]
 80139aa:	701a      	strb	r2, [r3, #0]
    uint16_t dutyCycle = calcBackOffParams->Bands[bandIdx].DCycle;
 80139ac:	687b      	ldr	r3, [r7, #4]
 80139ae:	685a      	ldr	r2, [r3, #4]
 80139b0:	187b      	adds	r3, r7, r1
 80139b2:	781b      	ldrb	r3, [r3, #0]
 80139b4:	011b      	lsls	r3, r3, #4
 80139b6:	18d2      	adds	r2, r2, r3
 80139b8:	230c      	movs	r3, #12
 80139ba:	18fb      	adds	r3, r7, r3
 80139bc:	8812      	ldrh	r2, [r2, #0]
 80139be:	801a      	strh	r2, [r3, #0]
    uint16_t joinDutyCycle = 0;
 80139c0:	230a      	movs	r3, #10
 80139c2:	18fb      	adds	r3, r7, r3
 80139c4:	2200      	movs	r2, #0
 80139c6:	801a      	strh	r2, [r3, #0]

    // Reset time-off to initial value.
    calcBackOffParams->Bands[bandIdx].TimeOff = 0;
 80139c8:	687b      	ldr	r3, [r7, #4]
 80139ca:	685a      	ldr	r2, [r3, #4]
 80139cc:	187b      	adds	r3, r7, r1
 80139ce:	781b      	ldrb	r3, [r3, #0]
 80139d0:	011b      	lsls	r3, r3, #4
 80139d2:	18d3      	adds	r3, r2, r3
 80139d4:	2200      	movs	r2, #0
 80139d6:	60da      	str	r2, [r3, #12]

    if( calcBackOffParams->Joined == false )
 80139d8:	687b      	ldr	r3, [r7, #4]
 80139da:	7a5b      	ldrb	r3, [r3, #9]
 80139dc:	2201      	movs	r2, #1
 80139de:	4053      	eors	r3, r2
 80139e0:	b2db      	uxtb	r3, r3
 80139e2:	2b00      	cmp	r3, #0
 80139e4:	d03c      	beq.n	8013a60 <RegionCommonCalcBackOff+0xd8>
    {
        // Get the join duty cycle
        joinDutyCycle = RegionCommonGetJoinDc( calcBackOffParams->ElapsedTime );
 80139e6:	687b      	ldr	r3, [r7, #4]
 80139e8:	68db      	ldr	r3, [r3, #12]
 80139ea:	250a      	movs	r5, #10
 80139ec:	197c      	adds	r4, r7, r5
 80139ee:	0018      	movs	r0, r3
 80139f0:	f7ff fb1c 	bl	801302c <RegionCommonGetJoinDc>
 80139f4:	0003      	movs	r3, r0
 80139f6:	8023      	strh	r3, [r4, #0]
        // Apply the most restricting duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 80139f8:	210c      	movs	r1, #12
 80139fa:	187a      	adds	r2, r7, r1
 80139fc:	197b      	adds	r3, r7, r5
 80139fe:	1879      	adds	r1, r7, r1
 8013a00:	880c      	ldrh	r4, [r1, #0]
 8013a02:	881b      	ldrh	r3, [r3, #0]
 8013a04:	b298      	uxth	r0, r3
 8013a06:	b2a1      	uxth	r1, r4
 8013a08:	4288      	cmp	r0, r1
 8013a0a:	d200      	bcs.n	8013a0e <RegionCommonCalcBackOff+0x86>
 8013a0c:	1c23      	adds	r3, r4, #0
 8013a0e:	8013      	strh	r3, [r2, #0]
        // Reset the timeoff if the last frame was not a join request and when the duty cycle is not enabled
        if( ( calcBackOffParams->DutyCycleEnabled == false ) && ( calcBackOffParams->LastTxIsJoinRequest == false ) )
 8013a10:	687b      	ldr	r3, [r7, #4]
 8013a12:	7a9b      	ldrb	r3, [r3, #10]
 8013a14:	2201      	movs	r2, #1
 8013a16:	4053      	eors	r3, r2
 8013a18:	b2db      	uxtb	r3, r3
 8013a1a:	2b00      	cmp	r3, #0
 8013a1c:	d010      	beq.n	8013a40 <RegionCommonCalcBackOff+0xb8>
 8013a1e:	687b      	ldr	r3, [r7, #4]
 8013a20:	7a1b      	ldrb	r3, [r3, #8]
 8013a22:	2201      	movs	r2, #1
 8013a24:	4053      	eors	r3, r2
 8013a26:	b2db      	uxtb	r3, r3
 8013a28:	2b00      	cmp	r3, #0
 8013a2a:	d009      	beq.n	8013a40 <RegionCommonCalcBackOff+0xb8>
        {
            // This is the case when the duty cycle is off and the last uplink frame was not a join.
            // This could happen in case of a rejoin, e.g. in compliance test mode.
            // In this special case we have to set the time off to 0, since the join duty cycle shall only
            // be applied after the first join request.
            calcBackOffParams->Bands[bandIdx].TimeOff = 0;
 8013a2c:	687b      	ldr	r3, [r7, #4]
 8013a2e:	685a      	ldr	r2, [r3, #4]
 8013a30:	230f      	movs	r3, #15
 8013a32:	18fb      	adds	r3, r7, r3
 8013a34:	781b      	ldrb	r3, [r3, #0]
 8013a36:	011b      	lsls	r3, r3, #4
 8013a38:	18d3      	adds	r3, r2, r3
 8013a3a:	2200      	movs	r2, #0
 8013a3c:	60da      	str	r2, [r3, #12]
        else
        {
            calcBackOffParams->Bands[bandIdx].TimeOff = 0;
        }
    }
}
 8013a3e:	e02c      	b.n	8013a9a <RegionCommonCalcBackOff+0x112>
            calcBackOffParams->Bands[bandIdx].TimeOff = calcBackOffParams->TxTimeOnAir * dutyCycle - calcBackOffParams->TxTimeOnAir;
 8013a40:	230c      	movs	r3, #12
 8013a42:	18fb      	adds	r3, r7, r3
 8013a44:	881b      	ldrh	r3, [r3, #0]
 8013a46:	1e5a      	subs	r2, r3, #1
 8013a48:	687b      	ldr	r3, [r7, #4]
 8013a4a:	6919      	ldr	r1, [r3, #16]
 8013a4c:	687b      	ldr	r3, [r7, #4]
 8013a4e:	6858      	ldr	r0, [r3, #4]
 8013a50:	230f      	movs	r3, #15
 8013a52:	18fb      	adds	r3, r7, r3
 8013a54:	781b      	ldrb	r3, [r3, #0]
 8013a56:	011b      	lsls	r3, r3, #4
 8013a58:	18c3      	adds	r3, r0, r3
 8013a5a:	434a      	muls	r2, r1
 8013a5c:	60da      	str	r2, [r3, #12]
}
 8013a5e:	e01c      	b.n	8013a9a <RegionCommonCalcBackOff+0x112>
        if( calcBackOffParams->DutyCycleEnabled == true )
 8013a60:	687b      	ldr	r3, [r7, #4]
 8013a62:	7a9b      	ldrb	r3, [r3, #10]
 8013a64:	2b00      	cmp	r3, #0
 8013a66:	d00f      	beq.n	8013a88 <RegionCommonCalcBackOff+0x100>
            calcBackOffParams->Bands[bandIdx].TimeOff = calcBackOffParams->TxTimeOnAir * dutyCycle - calcBackOffParams->TxTimeOnAir;
 8013a68:	230c      	movs	r3, #12
 8013a6a:	18fb      	adds	r3, r7, r3
 8013a6c:	881b      	ldrh	r3, [r3, #0]
 8013a6e:	1e5a      	subs	r2, r3, #1
 8013a70:	687b      	ldr	r3, [r7, #4]
 8013a72:	6919      	ldr	r1, [r3, #16]
 8013a74:	687b      	ldr	r3, [r7, #4]
 8013a76:	6858      	ldr	r0, [r3, #4]
 8013a78:	230f      	movs	r3, #15
 8013a7a:	18fb      	adds	r3, r7, r3
 8013a7c:	781b      	ldrb	r3, [r3, #0]
 8013a7e:	011b      	lsls	r3, r3, #4
 8013a80:	18c3      	adds	r3, r0, r3
 8013a82:	434a      	muls	r2, r1
 8013a84:	60da      	str	r2, [r3, #12]
}
 8013a86:	e008      	b.n	8013a9a <RegionCommonCalcBackOff+0x112>
            calcBackOffParams->Bands[bandIdx].TimeOff = 0;
 8013a88:	687b      	ldr	r3, [r7, #4]
 8013a8a:	685a      	ldr	r2, [r3, #4]
 8013a8c:	230f      	movs	r3, #15
 8013a8e:	18fb      	adds	r3, r7, r3
 8013a90:	781b      	ldrb	r3, [r3, #0]
 8013a92:	011b      	lsls	r3, r3, #4
 8013a94:	18d3      	adds	r3, r2, r3
 8013a96:	2200      	movs	r2, #0
 8013a98:	60da      	str	r2, [r3, #12]
}
 8013a9a:	46c0      	nop			; (mov r8, r8)
 8013a9c:	46bd      	mov	sp, r7
 8013a9e:	b004      	add	sp, #16
 8013aa0:	bdb0      	pop	{r4, r5, r7, pc}

08013aa2 <GetNextLowerTxDr>:
 */
static RegionEU868NvmCtx_t NvmCtx;

// Static functions
static int8_t GetNextLowerTxDr( int8_t dr, int8_t minDr )
{
 8013aa2:	b580      	push	{r7, lr}
 8013aa4:	b084      	sub	sp, #16
 8013aa6:	af00      	add	r7, sp, #0
 8013aa8:	0002      	movs	r2, r0
 8013aaa:	1dfb      	adds	r3, r7, #7
 8013aac:	701a      	strb	r2, [r3, #0]
 8013aae:	1dbb      	adds	r3, r7, #6
 8013ab0:	1c0a      	adds	r2, r1, #0
 8013ab2:	701a      	strb	r2, [r3, #0]
    uint8_t nextLowerDr = 0;
 8013ab4:	230f      	movs	r3, #15
 8013ab6:	18fb      	adds	r3, r7, r3
 8013ab8:	2200      	movs	r2, #0
 8013aba:	701a      	strb	r2, [r3, #0]

    if( dr == minDr )
 8013abc:	1dfa      	adds	r2, r7, #7
 8013abe:	1dbb      	adds	r3, r7, #6
 8013ac0:	7812      	ldrb	r2, [r2, #0]
 8013ac2:	b252      	sxtb	r2, r2
 8013ac4:	781b      	ldrb	r3, [r3, #0]
 8013ac6:	b25b      	sxtb	r3, r3
 8013ac8:	429a      	cmp	r2, r3
 8013aca:	d105      	bne.n	8013ad8 <GetNextLowerTxDr+0x36>
    {
        nextLowerDr = minDr;
 8013acc:	230f      	movs	r3, #15
 8013ace:	18fb      	adds	r3, r7, r3
 8013ad0:	1dba      	adds	r2, r7, #6
 8013ad2:	7812      	ldrb	r2, [r2, #0]
 8013ad4:	701a      	strb	r2, [r3, #0]
 8013ad6:	e005      	b.n	8013ae4 <GetNextLowerTxDr+0x42>
    }
    else
    {
        nextLowerDr = dr - 1;
 8013ad8:	1dfb      	adds	r3, r7, #7
 8013ada:	781a      	ldrb	r2, [r3, #0]
 8013adc:	230f      	movs	r3, #15
 8013ade:	18fb      	adds	r3, r7, r3
 8013ae0:	3a01      	subs	r2, #1
 8013ae2:	701a      	strb	r2, [r3, #0]
    }
    return nextLowerDr;
 8013ae4:	230f      	movs	r3, #15
 8013ae6:	18fb      	adds	r3, r7, r3
 8013ae8:	781b      	ldrb	r3, [r3, #0]
 8013aea:	b25b      	sxtb	r3, r3
}
 8013aec:	0018      	movs	r0, r3
 8013aee:	46bd      	mov	sp, r7
 8013af0:	b004      	add	sp, #16
 8013af2:	bd80      	pop	{r7, pc}

08013af4 <GetBandwidth>:

static uint32_t GetBandwidth( uint32_t drIndex )
{
 8013af4:	b580      	push	{r7, lr}
 8013af6:	b082      	sub	sp, #8
 8013af8:	af00      	add	r7, sp, #0
 8013afa:	6078      	str	r0, [r7, #4]
    switch( BandwidthsEU868[drIndex] )
 8013afc:	4b09      	ldr	r3, [pc, #36]	; (8013b24 <GetBandwidth+0x30>)
 8013afe:	687a      	ldr	r2, [r7, #4]
 8013b00:	0092      	lsls	r2, r2, #2
 8013b02:	58d3      	ldr	r3, [r2, r3]
 8013b04:	4a08      	ldr	r2, [pc, #32]	; (8013b28 <GetBandwidth+0x34>)
 8013b06:	4293      	cmp	r3, r2
 8013b08:	d004      	beq.n	8013b14 <GetBandwidth+0x20>
 8013b0a:	4a08      	ldr	r2, [pc, #32]	; (8013b2c <GetBandwidth+0x38>)
 8013b0c:	4293      	cmp	r3, r2
 8013b0e:	d003      	beq.n	8013b18 <GetBandwidth+0x24>
    {
        default:
        case 125000:
            return 0;
 8013b10:	2300      	movs	r3, #0
 8013b12:	e002      	b.n	8013b1a <GetBandwidth+0x26>
        case 250000:
            return 1;
 8013b14:	2301      	movs	r3, #1
 8013b16:	e000      	b.n	8013b1a <GetBandwidth+0x26>
        case 500000:
            return 2;
 8013b18:	2302      	movs	r3, #2
    }
}
 8013b1a:	0018      	movs	r0, r3
 8013b1c:	46bd      	mov	sp, r7
 8013b1e:	b002      	add	sp, #8
 8013b20:	bd80      	pop	{r7, pc}
 8013b22:	46c0      	nop			; (mov r8, r8)
 8013b24:	08020b28 	.word	0x08020b28
 8013b28:	0003d090 	.word	0x0003d090
 8013b2c:	0007a120 	.word	0x0007a120

08013b30 <LimitTxPower>:

static int8_t LimitTxPower( int8_t txPower, int8_t maxBandTxPower, int8_t datarate, uint16_t* channelsMask )
{
 8013b30:	b590      	push	{r4, r7, lr}
 8013b32:	b085      	sub	sp, #20
 8013b34:	af00      	add	r7, sp, #0
 8013b36:	0004      	movs	r4, r0
 8013b38:	0008      	movs	r0, r1
 8013b3a:	0011      	movs	r1, r2
 8013b3c:	603b      	str	r3, [r7, #0]
 8013b3e:	1dfb      	adds	r3, r7, #7
 8013b40:	1c22      	adds	r2, r4, #0
 8013b42:	701a      	strb	r2, [r3, #0]
 8013b44:	1dbb      	adds	r3, r7, #6
 8013b46:	1c02      	adds	r2, r0, #0
 8013b48:	701a      	strb	r2, [r3, #0]
 8013b4a:	1d7b      	adds	r3, r7, #5
 8013b4c:	1c0a      	adds	r2, r1, #0
 8013b4e:	701a      	strb	r2, [r3, #0]
    int8_t txPowerResult = txPower;
 8013b50:	210f      	movs	r1, #15
 8013b52:	187b      	adds	r3, r7, r1
 8013b54:	1dfa      	adds	r2, r7, #7
 8013b56:	7812      	ldrb	r2, [r2, #0]
 8013b58:	701a      	strb	r2, [r3, #0]

    // Limit tx power to the band max
    txPowerResult =  MAX( txPower, maxBandTxPower );
 8013b5a:	187a      	adds	r2, r7, r1
 8013b5c:	1dbb      	adds	r3, r7, #6
 8013b5e:	1df9      	adds	r1, r7, #7
 8013b60:	780c      	ldrb	r4, [r1, #0]
 8013b62:	781b      	ldrb	r3, [r3, #0]
 8013b64:	b258      	sxtb	r0, r3
 8013b66:	b261      	sxtb	r1, r4
 8013b68:	4288      	cmp	r0, r1
 8013b6a:	da00      	bge.n	8013b6e <LimitTxPower+0x3e>
 8013b6c:	1c23      	adds	r3, r4, #0
 8013b6e:	7013      	strb	r3, [r2, #0]

    return txPowerResult;
 8013b70:	230f      	movs	r3, #15
 8013b72:	18fb      	adds	r3, r7, r3
 8013b74:	781b      	ldrb	r3, [r3, #0]
 8013b76:	b25b      	sxtb	r3, r3
}
 8013b78:	0018      	movs	r0, r3
 8013b7a:	46bd      	mov	sp, r7
 8013b7c:	b005      	add	sp, #20
 8013b7e:	bd90      	pop	{r4, r7, pc}

08013b80 <VerifyRfFreq>:

static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 8013b80:	b580      	push	{r7, lr}
 8013b82:	b082      	sub	sp, #8
 8013b84:	af00      	add	r7, sp, #0
 8013b86:	6078      	str	r0, [r7, #4]
 8013b88:	6039      	str	r1, [r7, #0]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 8013b8a:	4b2e      	ldr	r3, [pc, #184]	; (8013c44 <VerifyRfFreq+0xc4>)
 8013b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013b8e:	687a      	ldr	r2, [r7, #4]
 8013b90:	0010      	movs	r0, r2
 8013b92:	4798      	blx	r3
 8013b94:	0003      	movs	r3, r0
 8013b96:	001a      	movs	r2, r3
 8013b98:	2301      	movs	r3, #1
 8013b9a:	4053      	eors	r3, r2
 8013b9c:	b2db      	uxtb	r3, r3
 8013b9e:	2b00      	cmp	r3, #0
 8013ba0:	d001      	beq.n	8013ba6 <VerifyRfFreq+0x26>
    {
        return false;
 8013ba2:	2300      	movs	r3, #0
 8013ba4:	e04a      	b.n	8013c3c <VerifyRfFreq+0xbc>
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 8013ba6:	687b      	ldr	r3, [r7, #4]
 8013ba8:	4a27      	ldr	r2, [pc, #156]	; (8013c48 <VerifyRfFreq+0xc8>)
 8013baa:	4293      	cmp	r3, r2
 8013bac:	d907      	bls.n	8013bbe <VerifyRfFreq+0x3e>
 8013bae:	687b      	ldr	r3, [r7, #4]
 8013bb0:	4a26      	ldr	r2, [pc, #152]	; (8013c4c <VerifyRfFreq+0xcc>)
 8013bb2:	4293      	cmp	r3, r2
 8013bb4:	d803      	bhi.n	8013bbe <VerifyRfFreq+0x3e>
    {
        *band = 2;
 8013bb6:	683b      	ldr	r3, [r7, #0]
 8013bb8:	2202      	movs	r2, #2
 8013bba:	701a      	strb	r2, [r3, #0]
 8013bbc:	e03d      	b.n	8013c3a <VerifyRfFreq+0xba>
    }
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 8013bbe:	687b      	ldr	r3, [r7, #4]
 8013bc0:	4a22      	ldr	r2, [pc, #136]	; (8013c4c <VerifyRfFreq+0xcc>)
 8013bc2:	4293      	cmp	r3, r2
 8013bc4:	d907      	bls.n	8013bd6 <VerifyRfFreq+0x56>
 8013bc6:	687b      	ldr	r3, [r7, #4]
 8013bc8:	4a21      	ldr	r2, [pc, #132]	; (8013c50 <VerifyRfFreq+0xd0>)
 8013bca:	4293      	cmp	r3, r2
 8013bcc:	d803      	bhi.n	8013bd6 <VerifyRfFreq+0x56>
    {
        *band = 0;
 8013bce:	683b      	ldr	r3, [r7, #0]
 8013bd0:	2200      	movs	r2, #0
 8013bd2:	701a      	strb	r2, [r3, #0]
 8013bd4:	e031      	b.n	8013c3a <VerifyRfFreq+0xba>
    }
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 8013bd6:	687b      	ldr	r3, [r7, #4]
 8013bd8:	4a1d      	ldr	r2, [pc, #116]	; (8013c50 <VerifyRfFreq+0xd0>)
 8013bda:	4293      	cmp	r3, r2
 8013bdc:	d907      	bls.n	8013bee <VerifyRfFreq+0x6e>
 8013bde:	687b      	ldr	r3, [r7, #4]
 8013be0:	4a1c      	ldr	r2, [pc, #112]	; (8013c54 <VerifyRfFreq+0xd4>)
 8013be2:	4293      	cmp	r3, r2
 8013be4:	d803      	bhi.n	8013bee <VerifyRfFreq+0x6e>
    {
        *band = 1;
 8013be6:	683b      	ldr	r3, [r7, #0]
 8013be8:	2201      	movs	r2, #1
 8013bea:	701a      	strb	r2, [r3, #0]
 8013bec:	e025      	b.n	8013c3a <VerifyRfFreq+0xba>
    }
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 8013bee:	687b      	ldr	r3, [r7, #4]
 8013bf0:	4a19      	ldr	r2, [pc, #100]	; (8013c58 <VerifyRfFreq+0xd8>)
 8013bf2:	4293      	cmp	r3, r2
 8013bf4:	d907      	bls.n	8013c06 <VerifyRfFreq+0x86>
 8013bf6:	687b      	ldr	r3, [r7, #4]
 8013bf8:	4a18      	ldr	r2, [pc, #96]	; (8013c5c <VerifyRfFreq+0xdc>)
 8013bfa:	4293      	cmp	r3, r2
 8013bfc:	d803      	bhi.n	8013c06 <VerifyRfFreq+0x86>
    {
        *band = 2;
 8013bfe:	683b      	ldr	r3, [r7, #0]
 8013c00:	2202      	movs	r2, #2
 8013c02:	701a      	strb	r2, [r3, #0]
 8013c04:	e019      	b.n	8013c3a <VerifyRfFreq+0xba>
    }
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 8013c06:	687b      	ldr	r3, [r7, #4]
 8013c08:	4a15      	ldr	r2, [pc, #84]	; (8013c60 <VerifyRfFreq+0xe0>)
 8013c0a:	4293      	cmp	r3, r2
 8013c0c:	d907      	bls.n	8013c1e <VerifyRfFreq+0x9e>
 8013c0e:	687b      	ldr	r3, [r7, #4]
 8013c10:	4a14      	ldr	r2, [pc, #80]	; (8013c64 <VerifyRfFreq+0xe4>)
 8013c12:	4293      	cmp	r3, r2
 8013c14:	d803      	bhi.n	8013c1e <VerifyRfFreq+0x9e>
    {
        *band = 3;
 8013c16:	683b      	ldr	r3, [r7, #0]
 8013c18:	2203      	movs	r2, #3
 8013c1a:	701a      	strb	r2, [r3, #0]
 8013c1c:	e00d      	b.n	8013c3a <VerifyRfFreq+0xba>
    }
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 8013c1e:	687b      	ldr	r3, [r7, #4]
 8013c20:	4a11      	ldr	r2, [pc, #68]	; (8013c68 <VerifyRfFreq+0xe8>)
 8013c22:	4293      	cmp	r3, r2
 8013c24:	d907      	bls.n	8013c36 <VerifyRfFreq+0xb6>
 8013c26:	687b      	ldr	r3, [r7, #4]
 8013c28:	4a10      	ldr	r2, [pc, #64]	; (8013c6c <VerifyRfFreq+0xec>)
 8013c2a:	4293      	cmp	r3, r2
 8013c2c:	d803      	bhi.n	8013c36 <VerifyRfFreq+0xb6>
    {
        *band = 4;
 8013c2e:	683b      	ldr	r3, [r7, #0]
 8013c30:	2204      	movs	r2, #4
 8013c32:	701a      	strb	r2, [r3, #0]
 8013c34:	e001      	b.n	8013c3a <VerifyRfFreq+0xba>
    }
    else
    {
        return false;
 8013c36:	2300      	movs	r3, #0
 8013c38:	e000      	b.n	8013c3c <VerifyRfFreq+0xbc>
    }
    return true;
 8013c3a:	2301      	movs	r3, #1
}
 8013c3c:	0018      	movs	r0, r3
 8013c3e:	46bd      	mov	sp, r7
 8013c40:	b002      	add	sp, #8
 8013c42:	bd80      	pop	{r7, pc}
 8013c44:	08020c58 	.word	0x08020c58
 8013c48:	337055bf 	.word	0x337055bf
 8013c4c:	338eda3f 	.word	0x338eda3f
 8013c50:	33bca100 	.word	0x33bca100
 8013c54:	33c5c8c0 	.word	0x33c5c8c0
 8013c58:	33c74f5f 	.word	0x33c74f5f
 8013c5c:	33cef080 	.word	0x33cef080
 8013c60:	33d1fdbf 	.word	0x33d1fdbf
 8013c64:	33d5ce50 	.word	0x33d5ce50
 8013c68:	33d6919f 	.word	0x33d6919f
 8013c6c:	33db2580 	.word	0x33db2580

08013c70 <CountNbOfEnabledChannels>:

static uint8_t CountNbOfEnabledChannels( bool joined, uint8_t datarate, uint16_t* channelsMask, ChannelParams_t* channels, Band_t* bands, uint8_t* enabledChannels, uint8_t* delayTx )
{
 8013c70:	b5b0      	push	{r4, r5, r7, lr}
 8013c72:	b086      	sub	sp, #24
 8013c74:	af00      	add	r7, sp, #0
 8013c76:	60ba      	str	r2, [r7, #8]
 8013c78:	607b      	str	r3, [r7, #4]
 8013c7a:	230f      	movs	r3, #15
 8013c7c:	18fb      	adds	r3, r7, r3
 8013c7e:	1c02      	adds	r2, r0, #0
 8013c80:	701a      	strb	r2, [r3, #0]
 8013c82:	230e      	movs	r3, #14
 8013c84:	18fb      	adds	r3, r7, r3
 8013c86:	1c0a      	adds	r2, r1, #0
 8013c88:	701a      	strb	r2, [r3, #0]
    uint8_t nbEnabledChannels = 0;
 8013c8a:	2317      	movs	r3, #23
 8013c8c:	18fb      	adds	r3, r7, r3
 8013c8e:	2200      	movs	r2, #0
 8013c90:	701a      	strb	r2, [r3, #0]
    uint8_t delayTransmission = 0;
 8013c92:	2316      	movs	r3, #22
 8013c94:	18fb      	adds	r3, r7, r3
 8013c96:	2200      	movs	r2, #0
 8013c98:	701a      	strb	r2, [r3, #0]

    for( uint8_t i = 0, k = 0; i < EU868_MAX_NB_CHANNELS; i += 16, k++ )
 8013c9a:	2315      	movs	r3, #21
 8013c9c:	18fb      	adds	r3, r7, r3
 8013c9e:	2200      	movs	r2, #0
 8013ca0:	701a      	strb	r2, [r3, #0]
 8013ca2:	2314      	movs	r3, #20
 8013ca4:	18fb      	adds	r3, r7, r3
 8013ca6:	2200      	movs	r2, #0
 8013ca8:	701a      	strb	r2, [r3, #0]
 8013caa:	e0b4      	b.n	8013e16 <CountNbOfEnabledChannels+0x1a6>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8013cac:	2313      	movs	r3, #19
 8013cae:	18fb      	adds	r3, r7, r3
 8013cb0:	2200      	movs	r2, #0
 8013cb2:	701a      	strb	r2, [r3, #0]
 8013cb4:	e09d      	b.n	8013df2 <CountNbOfEnabledChannels+0x182>
        {
            if( ( channelsMask[k] & ( 1 << j ) ) != 0 )
 8013cb6:	2314      	movs	r3, #20
 8013cb8:	18fb      	adds	r3, r7, r3
 8013cba:	781b      	ldrb	r3, [r3, #0]
 8013cbc:	005b      	lsls	r3, r3, #1
 8013cbe:	68ba      	ldr	r2, [r7, #8]
 8013cc0:	18d3      	adds	r3, r2, r3
 8013cc2:	881b      	ldrh	r3, [r3, #0]
 8013cc4:	001a      	movs	r2, r3
 8013cc6:	2313      	movs	r3, #19
 8013cc8:	18fb      	adds	r3, r7, r3
 8013cca:	781b      	ldrb	r3, [r3, #0]
 8013ccc:	411a      	asrs	r2, r3
 8013cce:	0013      	movs	r3, r2
 8013cd0:	2201      	movs	r2, #1
 8013cd2:	4013      	ands	r3, r2
 8013cd4:	d100      	bne.n	8013cd8 <CountNbOfEnabledChannels+0x68>
 8013cd6:	e086      	b.n	8013de6 <CountNbOfEnabledChannels+0x176>
            {
                if( channels[i + j].Frequency == 0 )
 8013cd8:	2315      	movs	r3, #21
 8013cda:	18fb      	adds	r3, r7, r3
 8013cdc:	781a      	ldrb	r2, [r3, #0]
 8013cde:	2313      	movs	r3, #19
 8013ce0:	18fb      	adds	r3, r7, r3
 8013ce2:	781b      	ldrb	r3, [r3, #0]
 8013ce4:	18d3      	adds	r3, r2, r3
 8013ce6:	001a      	movs	r2, r3
 8013ce8:	0013      	movs	r3, r2
 8013cea:	005b      	lsls	r3, r3, #1
 8013cec:	189b      	adds	r3, r3, r2
 8013cee:	009b      	lsls	r3, r3, #2
 8013cf0:	001a      	movs	r2, r3
 8013cf2:	687b      	ldr	r3, [r7, #4]
 8013cf4:	189b      	adds	r3, r3, r2
 8013cf6:	681b      	ldr	r3, [r3, #0]
 8013cf8:	2b00      	cmp	r3, #0
 8013cfa:	d06f      	beq.n	8013ddc <CountNbOfEnabledChannels+0x16c>
                { // Check if the channel is enabled
                    continue;
                }
                if( joined == false )
 8013cfc:	230f      	movs	r3, #15
 8013cfe:	18fb      	adds	r3, r7, r3
 8013d00:	781b      	ldrb	r3, [r3, #0]
 8013d02:	2201      	movs	r2, #1
 8013d04:	4053      	eors	r3, r2
 8013d06:	b2db      	uxtb	r3, r3
 8013d08:	2b00      	cmp	r3, #0
 8013d0a:	d008      	beq.n	8013d1e <CountNbOfEnabledChannels+0xae>
                {
                    if( ( EU868_JOIN_CHANNELS & ( 1 << j ) ) == 0 )
 8013d0c:	2313      	movs	r3, #19
 8013d0e:	18fb      	adds	r3, r7, r3
 8013d10:	781b      	ldrb	r3, [r3, #0]
 8013d12:	2207      	movs	r2, #7
 8013d14:	411a      	asrs	r2, r3
 8013d16:	0013      	movs	r3, r2
 8013d18:	2201      	movs	r2, #1
 8013d1a:	4013      	ands	r3, r2
 8013d1c:	d060      	beq.n	8013de0 <CountNbOfEnabledChannels+0x170>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( datarate, channels[i + j].DrRange.Fields.Min,
 8013d1e:	230e      	movs	r3, #14
 8013d20:	18fb      	adds	r3, r7, r3
 8013d22:	2000      	movs	r0, #0
 8013d24:	5618      	ldrsb	r0, [r3, r0]
 8013d26:	2415      	movs	r4, #21
 8013d28:	193b      	adds	r3, r7, r4
 8013d2a:	781a      	ldrb	r2, [r3, #0]
 8013d2c:	2513      	movs	r5, #19
 8013d2e:	197b      	adds	r3, r7, r5
 8013d30:	781b      	ldrb	r3, [r3, #0]
 8013d32:	18d3      	adds	r3, r2, r3
 8013d34:	001a      	movs	r2, r3
 8013d36:	0013      	movs	r3, r2
 8013d38:	005b      	lsls	r3, r3, #1
 8013d3a:	189b      	adds	r3, r3, r2
 8013d3c:	009b      	lsls	r3, r3, #2
 8013d3e:	001a      	movs	r2, r3
 8013d40:	687b      	ldr	r3, [r7, #4]
 8013d42:	189b      	adds	r3, r3, r2
 8013d44:	7a1b      	ldrb	r3, [r3, #8]
 8013d46:	011b      	lsls	r3, r3, #4
 8013d48:	b25b      	sxtb	r3, r3
 8013d4a:	111b      	asrs	r3, r3, #4
 8013d4c:	b25b      	sxtb	r3, r3
 8013d4e:	0019      	movs	r1, r3
                                              channels[i + j].DrRange.Fields.Max ) == false )
 8013d50:	193b      	adds	r3, r7, r4
 8013d52:	781a      	ldrb	r2, [r3, #0]
 8013d54:	197b      	adds	r3, r7, r5
 8013d56:	781b      	ldrb	r3, [r3, #0]
 8013d58:	18d3      	adds	r3, r2, r3
 8013d5a:	001a      	movs	r2, r3
 8013d5c:	0013      	movs	r3, r2
 8013d5e:	005b      	lsls	r3, r3, #1
 8013d60:	189b      	adds	r3, r3, r2
 8013d62:	009b      	lsls	r3, r3, #2
 8013d64:	001a      	movs	r2, r3
 8013d66:	687b      	ldr	r3, [r7, #4]
 8013d68:	189b      	adds	r3, r3, r2
 8013d6a:	7a1b      	ldrb	r3, [r3, #8]
 8013d6c:	b25b      	sxtb	r3, r3
 8013d6e:	111b      	asrs	r3, r3, #4
 8013d70:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( datarate, channels[i + j].DrRange.Fields.Min,
 8013d72:	001a      	movs	r2, r3
 8013d74:	f7ff fa20 	bl	80131b8 <RegionCommonValueInRange>
 8013d78:	1e03      	subs	r3, r0, #0
 8013d7a:	d033      	beq.n	8013de4 <CountNbOfEnabledChannels+0x174>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( bands[channels[i + j].Band].TimeOff > 0 )
 8013d7c:	2315      	movs	r3, #21
 8013d7e:	18fb      	adds	r3, r7, r3
 8013d80:	781a      	ldrb	r2, [r3, #0]
 8013d82:	2313      	movs	r3, #19
 8013d84:	18fb      	adds	r3, r7, r3
 8013d86:	781b      	ldrb	r3, [r3, #0]
 8013d88:	18d3      	adds	r3, r2, r3
 8013d8a:	001a      	movs	r2, r3
 8013d8c:	0013      	movs	r3, r2
 8013d8e:	005b      	lsls	r3, r3, #1
 8013d90:	189b      	adds	r3, r3, r2
 8013d92:	009b      	lsls	r3, r3, #2
 8013d94:	001a      	movs	r2, r3
 8013d96:	687b      	ldr	r3, [r7, #4]
 8013d98:	189b      	adds	r3, r3, r2
 8013d9a:	7a5b      	ldrb	r3, [r3, #9]
 8013d9c:	011b      	lsls	r3, r3, #4
 8013d9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013da0:	18d3      	adds	r3, r2, r3
 8013da2:	68db      	ldr	r3, [r3, #12]
 8013da4:	2b00      	cmp	r3, #0
 8013da6:	d006      	beq.n	8013db6 <CountNbOfEnabledChannels+0x146>
                { // Check if the band is available for transmission
                    delayTransmission++;
 8013da8:	2116      	movs	r1, #22
 8013daa:	187b      	adds	r3, r7, r1
 8013dac:	781a      	ldrb	r2, [r3, #0]
 8013dae:	187b      	adds	r3, r7, r1
 8013db0:	3201      	adds	r2, #1
 8013db2:	701a      	strb	r2, [r3, #0]
                    continue;
 8013db4:	e017      	b.n	8013de6 <CountNbOfEnabledChannels+0x176>
                }
                enabledChannels[nbEnabledChannels++] = i + j;
 8013db6:	2217      	movs	r2, #23
 8013db8:	18bb      	adds	r3, r7, r2
 8013dba:	781b      	ldrb	r3, [r3, #0]
 8013dbc:	18ba      	adds	r2, r7, r2
 8013dbe:	1c59      	adds	r1, r3, #1
 8013dc0:	7011      	strb	r1, [r2, #0]
 8013dc2:	001a      	movs	r2, r3
 8013dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013dc6:	189b      	adds	r3, r3, r2
 8013dc8:	2215      	movs	r2, #21
 8013dca:	18b9      	adds	r1, r7, r2
 8013dcc:	2213      	movs	r2, #19
 8013dce:	18ba      	adds	r2, r7, r2
 8013dd0:	7809      	ldrb	r1, [r1, #0]
 8013dd2:	7812      	ldrb	r2, [r2, #0]
 8013dd4:	188a      	adds	r2, r1, r2
 8013dd6:	b2d2      	uxtb	r2, r2
 8013dd8:	701a      	strb	r2, [r3, #0]
 8013dda:	e004      	b.n	8013de6 <CountNbOfEnabledChannels+0x176>
                    continue;
 8013ddc:	46c0      	nop			; (mov r8, r8)
 8013dde:	e002      	b.n	8013de6 <CountNbOfEnabledChannels+0x176>
                        continue;
 8013de0:	46c0      	nop			; (mov r8, r8)
 8013de2:	e000      	b.n	8013de6 <CountNbOfEnabledChannels+0x176>
                    continue;
 8013de4:	46c0      	nop			; (mov r8, r8)
        for( uint8_t j = 0; j < 16; j++ )
 8013de6:	2113      	movs	r1, #19
 8013de8:	187b      	adds	r3, r7, r1
 8013dea:	781a      	ldrb	r2, [r3, #0]
 8013dec:	187b      	adds	r3, r7, r1
 8013dee:	3201      	adds	r2, #1
 8013df0:	701a      	strb	r2, [r3, #0]
 8013df2:	2313      	movs	r3, #19
 8013df4:	18fb      	adds	r3, r7, r3
 8013df6:	781b      	ldrb	r3, [r3, #0]
 8013df8:	2b0f      	cmp	r3, #15
 8013dfa:	d800      	bhi.n	8013dfe <CountNbOfEnabledChannels+0x18e>
 8013dfc:	e75b      	b.n	8013cb6 <CountNbOfEnabledChannels+0x46>
    for( uint8_t i = 0, k = 0; i < EU868_MAX_NB_CHANNELS; i += 16, k++ )
 8013dfe:	2215      	movs	r2, #21
 8013e00:	18bb      	adds	r3, r7, r2
 8013e02:	18ba      	adds	r2, r7, r2
 8013e04:	7812      	ldrb	r2, [r2, #0]
 8013e06:	3210      	adds	r2, #16
 8013e08:	701a      	strb	r2, [r3, #0]
 8013e0a:	2114      	movs	r1, #20
 8013e0c:	187b      	adds	r3, r7, r1
 8013e0e:	781a      	ldrb	r2, [r3, #0]
 8013e10:	187b      	adds	r3, r7, r1
 8013e12:	3201      	adds	r2, #1
 8013e14:	701a      	strb	r2, [r3, #0]
 8013e16:	2315      	movs	r3, #21
 8013e18:	18fb      	adds	r3, r7, r3
 8013e1a:	781b      	ldrb	r3, [r3, #0]
 8013e1c:	2b0f      	cmp	r3, #15
 8013e1e:	d800      	bhi.n	8013e22 <CountNbOfEnabledChannels+0x1b2>
 8013e20:	e744      	b.n	8013cac <CountNbOfEnabledChannels+0x3c>
            }
        }
    }

    *delayTx = delayTransmission;
 8013e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e24:	2216      	movs	r2, #22
 8013e26:	18ba      	adds	r2, r7, r2
 8013e28:	7812      	ldrb	r2, [r2, #0]
 8013e2a:	701a      	strb	r2, [r3, #0]
    return nbEnabledChannels;
 8013e2c:	2317      	movs	r3, #23
 8013e2e:	18fb      	adds	r3, r7, r3
 8013e30:	781b      	ldrb	r3, [r3, #0]
}
 8013e32:	0018      	movs	r0, r3
 8013e34:	46bd      	mov	sp, r7
 8013e36:	b006      	add	sp, #24
 8013e38:	bdb0      	pop	{r4, r5, r7, pc}
	...

08013e3c <RegionEU868GetPhyParam>:

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 8013e3c:	b580      	push	{r7, lr}
 8013e3e:	b084      	sub	sp, #16
 8013e40:	af00      	add	r7, sp, #0
 8013e42:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 8013e44:	2308      	movs	r3, #8
 8013e46:	18fb      	adds	r3, r7, r3
 8013e48:	2200      	movs	r2, #0
 8013e4a:	601a      	str	r2, [r3, #0]

    switch( getPhy->Attribute )
 8013e4c:	687b      	ldr	r3, [r7, #4]
 8013e4e:	781b      	ldrb	r3, [r3, #0]
 8013e50:	2b34      	cmp	r3, #52	; 0x34
 8013e52:	d900      	bls.n	8013e56 <RegionEU868GetPhyParam+0x1a>
 8013e54:	e0ce      	b.n	8013ff4 <RegionEU868GetPhyParam+0x1b8>
 8013e56:	009a      	lsls	r2, r3, #2
 8013e58:	4b6e      	ldr	r3, [pc, #440]	; (8014014 <RegionEU868GetPhyParam+0x1d8>)
 8013e5a:	18d3      	adds	r3, r2, r3
 8013e5c:	681b      	ldr	r3, [r3, #0]
 8013e5e:	469f      	mov	pc, r3
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = EU868_RX_MIN_DATARATE;
 8013e60:	2308      	movs	r3, #8
 8013e62:	18fb      	adds	r3, r7, r3
 8013e64:	2200      	movs	r2, #0
 8013e66:	601a      	str	r2, [r3, #0]
            break;
 8013e68:	e0c5      	b.n	8013ff6 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = EU868_TX_MIN_DATARATE;
 8013e6a:	2308      	movs	r3, #8
 8013e6c:	18fb      	adds	r3, r7, r3
 8013e6e:	2200      	movs	r2, #0
 8013e70:	601a      	str	r2, [r3, #0]
            break;
 8013e72:	e0c0      	b.n	8013ff6 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = EU868_DEFAULT_DATARATE;
 8013e74:	2308      	movs	r3, #8
 8013e76:	18fb      	adds	r3, r7, r3
 8013e78:	2200      	movs	r2, #0
 8013e7a:	601a      	str	r2, [r3, #0]
            break;
 8013e7c:	e0bb      	b.n	8013ff6 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            phyParam.Value = GetNextLowerTxDr( getPhy->Datarate, EU868_TX_MIN_DATARATE );
 8013e7e:	687b      	ldr	r3, [r7, #4]
 8013e80:	785b      	ldrb	r3, [r3, #1]
 8013e82:	b25b      	sxtb	r3, r3
 8013e84:	2100      	movs	r1, #0
 8013e86:	0018      	movs	r0, r3
 8013e88:	f7ff fe0b 	bl	8013aa2 <GetNextLowerTxDr>
 8013e8c:	0003      	movs	r3, r0
 8013e8e:	001a      	movs	r2, r3
 8013e90:	2308      	movs	r3, #8
 8013e92:	18fb      	adds	r3, r7, r3
 8013e94:	601a      	str	r2, [r3, #0]
            break;
 8013e96:	e0ae      	b.n	8013ff6 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = EU868_MAX_TX_POWER;
 8013e98:	2308      	movs	r3, #8
 8013e9a:	18fb      	adds	r3, r7, r3
 8013e9c:	2200      	movs	r2, #0
 8013e9e:	601a      	str	r2, [r3, #0]
            break;
 8013ea0:	e0a9      	b.n	8013ff6 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = EU868_DEFAULT_TX_POWER;
 8013ea2:	2308      	movs	r3, #8
 8013ea4:	18fb      	adds	r3, r7, r3
 8013ea6:	2200      	movs	r2, #0
 8013ea8:	601a      	str	r2, [r3, #0]
            break;
 8013eaa:	e0a4      	b.n	8013ff6 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = EU868_ADR_ACK_LIMIT;
 8013eac:	2308      	movs	r3, #8
 8013eae:	18fb      	adds	r3, r7, r3
 8013eb0:	2240      	movs	r2, #64	; 0x40
 8013eb2:	601a      	str	r2, [r3, #0]
            break;
 8013eb4:	e09f      	b.n	8013ff6 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = EU868_ADR_ACK_DELAY;
 8013eb6:	2308      	movs	r3, #8
 8013eb8:	18fb      	adds	r3, r7, r3
 8013eba:	2220      	movs	r2, #32
 8013ebc:	601a      	str	r2, [r3, #0]
            break;
 8013ebe:	e09a      	b.n	8013ff6 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 8013ec0:	687b      	ldr	r3, [r7, #4]
 8013ec2:	785b      	ldrb	r3, [r3, #1]
 8013ec4:	b25b      	sxtb	r3, r3
 8013ec6:	001a      	movs	r2, r3
 8013ec8:	4b53      	ldr	r3, [pc, #332]	; (8014018 <RegionEU868GetPhyParam+0x1dc>)
 8013eca:	5c9b      	ldrb	r3, [r3, r2]
 8013ecc:	001a      	movs	r2, r3
 8013ece:	2308      	movs	r3, #8
 8013ed0:	18fb      	adds	r3, r7, r3
 8013ed2:	601a      	str	r2, [r3, #0]
            break;
 8013ed4:	e08f      	b.n	8013ff6 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 8013ed6:	687b      	ldr	r3, [r7, #4]
 8013ed8:	785b      	ldrb	r3, [r3, #1]
 8013eda:	b25b      	sxtb	r3, r3
 8013edc:	001a      	movs	r2, r3
 8013ede:	4b4f      	ldr	r3, [pc, #316]	; (801401c <RegionEU868GetPhyParam+0x1e0>)
 8013ee0:	5c9b      	ldrb	r3, [r3, r2]
 8013ee2:	001a      	movs	r2, r3
 8013ee4:	2308      	movs	r3, #8
 8013ee6:	18fb      	adds	r3, r7, r3
 8013ee8:	601a      	str	r2, [r3, #0]
            break;
 8013eea:	e084      	b.n	8013ff6 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 8013eec:	2308      	movs	r3, #8
 8013eee:	18fb      	adds	r3, r7, r3
 8013ef0:	2201      	movs	r2, #1
 8013ef2:	601a      	str	r2, [r3, #0]
            break;
 8013ef4:	e07f      	b.n	8013ff6 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = EU868_MAX_RX_WINDOW;
 8013ef6:	2308      	movs	r3, #8
 8013ef8:	18fb      	adds	r3, r7, r3
 8013efa:	4a49      	ldr	r2, [pc, #292]	; (8014020 <RegionEU868GetPhyParam+0x1e4>)
 8013efc:	601a      	str	r2, [r3, #0]
            break;
 8013efe:	e07a      	b.n	8013ff6 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = EU868_RECEIVE_DELAY1;
 8013f00:	2308      	movs	r3, #8
 8013f02:	18fb      	adds	r3, r7, r3
 8013f04:	22fa      	movs	r2, #250	; 0xfa
 8013f06:	0092      	lsls	r2, r2, #2
 8013f08:	601a      	str	r2, [r3, #0]
            break;
 8013f0a:	e074      	b.n	8013ff6 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = EU868_RECEIVE_DELAY2;
 8013f0c:	2308      	movs	r3, #8
 8013f0e:	18fb      	adds	r3, r7, r3
 8013f10:	22fa      	movs	r2, #250	; 0xfa
 8013f12:	00d2      	lsls	r2, r2, #3
 8013f14:	601a      	str	r2, [r3, #0]
            break;
 8013f16:	e06e      	b.n	8013ff6 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = EU868_JOIN_ACCEPT_DELAY1;
 8013f18:	2308      	movs	r3, #8
 8013f1a:	18fb      	adds	r3, r7, r3
 8013f1c:	4a41      	ldr	r2, [pc, #260]	; (8014024 <RegionEU868GetPhyParam+0x1e8>)
 8013f1e:	601a      	str	r2, [r3, #0]
            break;
 8013f20:	e069      	b.n	8013ff6 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = EU868_JOIN_ACCEPT_DELAY2;
 8013f22:	2308      	movs	r3, #8
 8013f24:	18fb      	adds	r3, r7, r3
 8013f26:	4a40      	ldr	r2, [pc, #256]	; (8014028 <RegionEU868GetPhyParam+0x1ec>)
 8013f28:	601a      	str	r2, [r3, #0]
            break;
 8013f2a:	e064      	b.n	8013ff6 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_MAX_FCNT_GAP:
        {
            phyParam.Value = EU868_MAX_FCNT_GAP;
 8013f2c:	2308      	movs	r3, #8
 8013f2e:	18fb      	adds	r3, r7, r3
 8013f30:	2280      	movs	r2, #128	; 0x80
 8013f32:	01d2      	lsls	r2, r2, #7
 8013f34:	601a      	str	r2, [r3, #0]
            break;
 8013f36:	e05e      	b.n	8013ff6 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_ACK_TIMEOUT:
        {
            phyParam.Value = ( EU868_ACKTIMEOUT + randr( -EU868_ACK_TIMEOUT_RND, EU868_ACK_TIMEOUT_RND ) );
 8013f38:	23fa      	movs	r3, #250	; 0xfa
 8013f3a:	009b      	lsls	r3, r3, #2
 8013f3c:	4a3b      	ldr	r2, [pc, #236]	; (801402c <RegionEU868GetPhyParam+0x1f0>)
 8013f3e:	0019      	movs	r1, r3
 8013f40:	0010      	movs	r0, r2
 8013f42:	f001 fbb7 	bl	80156b4 <randr>
 8013f46:	0003      	movs	r3, r0
 8013f48:	22fa      	movs	r2, #250	; 0xfa
 8013f4a:	00d2      	lsls	r2, r2, #3
 8013f4c:	4694      	mov	ip, r2
 8013f4e:	4463      	add	r3, ip
 8013f50:	001a      	movs	r2, r3
 8013f52:	2308      	movs	r3, #8
 8013f54:	18fb      	adds	r3, r7, r3
 8013f56:	601a      	str	r2, [r3, #0]
            break;
 8013f58:	e04d      	b.n	8013ff6 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = EU868_DEFAULT_RX1_DR_OFFSET;
 8013f5a:	2308      	movs	r3, #8
 8013f5c:	18fb      	adds	r3, r7, r3
 8013f5e:	2200      	movs	r2, #0
 8013f60:	601a      	str	r2, [r3, #0]
            break;
 8013f62:	e048      	b.n	8013ff6 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = EU868_RX_WND_2_FREQ;
 8013f64:	2308      	movs	r3, #8
 8013f66:	18fb      	adds	r3, r7, r3
 8013f68:	4a31      	ldr	r2, [pc, #196]	; (8014030 <RegionEU868GetPhyParam+0x1f4>)
 8013f6a:	601a      	str	r2, [r3, #0]
            break;
 8013f6c:	e043      	b.n	8013ff6 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = EU868_RX_WND_2_DR;
 8013f6e:	2308      	movs	r3, #8
 8013f70:	18fb      	adds	r3, r7, r3
 8013f72:	2200      	movs	r2, #0
 8013f74:	601a      	str	r2, [r3, #0]
            break;
 8013f76:	e03e      	b.n	8013ff6 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = NvmCtx.ChannelsMask;
 8013f78:	2308      	movs	r3, #8
 8013f7a:	18fb      	adds	r3, r7, r3
 8013f7c:	4a2d      	ldr	r2, [pc, #180]	; (8014034 <RegionEU868GetPhyParam+0x1f8>)
 8013f7e:	601a      	str	r2, [r3, #0]
            break;
 8013f80:	e039      	b.n	8013ff6 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = NvmCtx.ChannelsDefaultMask;
 8013f82:	2308      	movs	r3, #8
 8013f84:	18fb      	adds	r3, r7, r3
 8013f86:	4a2c      	ldr	r2, [pc, #176]	; (8014038 <RegionEU868GetPhyParam+0x1fc>)
 8013f88:	601a      	str	r2, [r3, #0]
            break;
 8013f8a:	e034      	b.n	8013ff6 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 8013f8c:	2308      	movs	r3, #8
 8013f8e:	18fb      	adds	r3, r7, r3
 8013f90:	2210      	movs	r2, #16
 8013f92:	601a      	str	r2, [r3, #0]
            break;
 8013f94:	e02f      	b.n	8013ff6 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = NvmCtx.Channels;
 8013f96:	2308      	movs	r3, #8
 8013f98:	18fb      	adds	r3, r7, r3
 8013f9a:	4a28      	ldr	r2, [pc, #160]	; (801403c <RegionEU868GetPhyParam+0x200>)
 8013f9c:	601a      	str	r2, [r3, #0]
            break;
 8013f9e:	e02a      	b.n	8013ff6 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = 0;
 8013fa0:	2308      	movs	r3, #8
 8013fa2:	18fb      	adds	r3, r7, r3
 8013fa4:	2200      	movs	r2, #0
 8013fa6:	601a      	str	r2, [r3, #0]
            break;
 8013fa8:	e025      	b.n	8013ff6 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 8013faa:	2308      	movs	r3, #8
 8013fac:	18fb      	adds	r3, r7, r3
 8013fae:	2283      	movs	r2, #131	; 0x83
 8013fb0:	05d2      	lsls	r2, r2, #23
 8013fb2:	601a      	str	r2, [r3, #0]
            break;
 8013fb4:	e01f      	b.n	8013ff6 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 8013fb6:	2308      	movs	r3, #8
 8013fb8:	18fb      	adds	r3, r7, r3
 8013fba:	4a21      	ldr	r2, [pc, #132]	; (8014040 <RegionEU868GetPhyParam+0x204>)
 8013fbc:	601a      	str	r2, [r3, #0]
            break;
 8013fbe:	e01a      	b.n	8013ff6 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 8013fc0:	2308      	movs	r3, #8
 8013fc2:	18fb      	adds	r3, r7, r3
 8013fc4:	4a1a      	ldr	r2, [pc, #104]	; (8014030 <RegionEU868GetPhyParam+0x1f4>)
 8013fc6:	601a      	str	r2, [r3, #0]
            break;
 8013fc8:	e015      	b.n	8013ff6 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 8013fca:	2108      	movs	r1, #8
 8013fcc:	187b      	adds	r3, r7, r1
 8013fce:	2211      	movs	r2, #17
 8013fd0:	701a      	strb	r2, [r3, #0]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 8013fd2:	187b      	adds	r3, r7, r1
 8013fd4:	2202      	movs	r2, #2
 8013fd6:	705a      	strb	r2, [r3, #1]
            phyParam.BeaconFormat.Rfu2Size = EU868_RFU2_SIZE;
 8013fd8:	187b      	adds	r3, r7, r1
 8013fda:	2200      	movs	r2, #0
 8013fdc:	709a      	strb	r2, [r3, #2]
            break;
 8013fde:	e00a      	b.n	8013ff6 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 8013fe0:	2308      	movs	r3, #8
 8013fe2:	18fb      	adds	r3, r7, r3
 8013fe4:	2203      	movs	r2, #3
 8013fe6:	601a      	str	r2, [r3, #0]
            break;
 8013fe8:	e005      	b.n	8013ff6 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 8013fea:	2308      	movs	r3, #8
 8013fec:	18fb      	adds	r3, r7, r3
 8013fee:	2203      	movs	r2, #3
 8013ff0:	601a      	str	r2, [r3, #0]
            break;
 8013ff2:	e000      	b.n	8013ff6 <RegionEU868GetPhyParam+0x1ba>
        }
        default:
        {
            break;
 8013ff4:	46c0      	nop			; (mov r8, r8)
        }
    }

    return phyParam;
 8013ff6:	210c      	movs	r1, #12
 8013ff8:	187b      	adds	r3, r7, r1
 8013ffa:	2208      	movs	r2, #8
 8013ffc:	18ba      	adds	r2, r7, r2
 8013ffe:	6812      	ldr	r2, [r2, #0]
 8014000:	601a      	str	r2, [r3, #0]
 8014002:	187b      	adds	r3, r7, r1
 8014004:	2200      	movs	r2, #0
 8014006:	681a      	ldr	r2, [r3, #0]
 8014008:	0013      	movs	r3, r2
}
 801400a:	0018      	movs	r0, r3
 801400c:	46bd      	mov	sp, r7
 801400e:	b004      	add	sp, #16
 8014010:	bd80      	pop	{r7, pc}
 8014012:	46c0      	nop			; (mov r8, r8)
 8014014:	08020b58 	.word	0x08020b58
 8014018:	08020b48 	.word	0x08020b48
 801401c:	08020b50 	.word	0x08020b50
 8014020:	00000bb8 	.word	0x00000bb8
 8014024:	00001388 	.word	0x00001388
 8014028:	00001770 	.word	0x00001770
 801402c:	fffffc18 	.word	0xfffffc18
 8014030:	33d3e608 	.word	0x33d3e608
 8014034:	20001050 	.word	0x20001050
 8014038:	20001052 	.word	0x20001052
 801403c:	20000f40 	.word	0x20000f40
 8014040:	4009999a 	.word	0x4009999a

08014044 <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8014044:	b580      	push	{r7, lr}
 8014046:	b082      	sub	sp, #8
 8014048:	af00      	add	r7, sp, #0
 801404a:	6078      	str	r0, [r7, #4]
    RegionCommonSetBandTxDone( txDone->Joined, &NvmCtx.Bands[NvmCtx.Channels[txDone->Channel].Band], txDone->LastTxDoneTime );
 801404c:	687b      	ldr	r3, [r7, #4]
 801404e:	7858      	ldrb	r0, [r3, #1]
 8014050:	687b      	ldr	r3, [r7, #4]
 8014052:	781b      	ldrb	r3, [r3, #0]
 8014054:	0019      	movs	r1, r3
 8014056:	4a0a      	ldr	r2, [pc, #40]	; (8014080 <RegionEU868SetBandTxDone+0x3c>)
 8014058:	000b      	movs	r3, r1
 801405a:	005b      	lsls	r3, r3, #1
 801405c:	185b      	adds	r3, r3, r1
 801405e:	009b      	lsls	r3, r3, #2
 8014060:	18d3      	adds	r3, r2, r3
 8014062:	3309      	adds	r3, #9
 8014064:	781b      	ldrb	r3, [r3, #0]
 8014066:	330c      	adds	r3, #12
 8014068:	011a      	lsls	r2, r3, #4
 801406a:	4b05      	ldr	r3, [pc, #20]	; (8014080 <RegionEU868SetBandTxDone+0x3c>)
 801406c:	18d1      	adds	r1, r2, r3
 801406e:	687b      	ldr	r3, [r7, #4]
 8014070:	685b      	ldr	r3, [r3, #4]
 8014072:	001a      	movs	r2, r3
 8014074:	f7ff f978 	bl	8013368 <RegionCommonSetBandTxDone>
}
 8014078:	46c0      	nop			; (mov r8, r8)
 801407a:	46bd      	mov	sp, r7
 801407c:	b002      	add	sp, #8
 801407e:	bd80      	pop	{r7, pc}
 8014080:	20000f40 	.word	0x20000f40

08014084 <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 8014084:	b590      	push	{r4, r7, lr}
 8014086:	b097      	sub	sp, #92	; 0x5c
 8014088:	af00      	add	r7, sp, #0
 801408a:	6078      	str	r0, [r7, #4]
    Band_t bands[EU868_MAX_NB_BANDS] =
 801408c:	2108      	movs	r1, #8
 801408e:	000c      	movs	r4, r1
 8014090:	187b      	adds	r3, r7, r1
 8014092:	0018      	movs	r0, r3
 8014094:	2350      	movs	r3, #80	; 0x50
 8014096:	001a      	movs	r2, r3
 8014098:	2100      	movs	r1, #0
 801409a:	f00a f8bf 	bl	801e21c <memset>
 801409e:	0021      	movs	r1, r4
 80140a0:	187b      	adds	r3, r7, r1
 80140a2:	2264      	movs	r2, #100	; 0x64
 80140a4:	801a      	strh	r2, [r3, #0]
 80140a6:	187b      	adds	r3, r7, r1
 80140a8:	2264      	movs	r2, #100	; 0x64
 80140aa:	821a      	strh	r2, [r3, #16]
 80140ac:	187b      	adds	r3, r7, r1
 80140ae:	22fa      	movs	r2, #250	; 0xfa
 80140b0:	0092      	lsls	r2, r2, #2
 80140b2:	841a      	strh	r2, [r3, #32]
 80140b4:	187b      	adds	r3, r7, r1
 80140b6:	220a      	movs	r2, #10
 80140b8:	861a      	strh	r2, [r3, #48]	; 0x30
 80140ba:	187b      	adds	r3, r7, r1
 80140bc:	2240      	movs	r2, #64	; 0x40
 80140be:	2164      	movs	r1, #100	; 0x64
 80140c0:	5299      	strh	r1, [r3, r2]
        EU868_BAND2,
        EU868_BAND3,
        EU868_BAND4,
    };

    switch( params->Type )
 80140c2:	687b      	ldr	r3, [r7, #4]
 80140c4:	791b      	ldrb	r3, [r3, #4]
 80140c6:	2b01      	cmp	r3, #1
 80140c8:	d032      	beq.n	8014130 <RegionEU868InitDefaults+0xac>
 80140ca:	2b02      	cmp	r3, #2
 80140cc:	d023      	beq.n	8014116 <RegionEU868InitDefaults+0x92>
 80140ce:	2b00      	cmp	r3, #0
 80140d0:	d000      	beq.n	80140d4 <RegionEU868InitDefaults+0x50>
            NvmCtx.ChannelsMask[0] |= NvmCtx.ChannelsDefaultMask[0];
            break;
        }
        default:
        {
            break;
 80140d2:	e03d      	b.n	8014150 <RegionEU868InitDefaults+0xcc>
            memcpy1( ( uint8_t* )NvmCtx.Bands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 80140d4:	2308      	movs	r3, #8
 80140d6:	18f9      	adds	r1, r7, r3
 80140d8:	4b1f      	ldr	r3, [pc, #124]	; (8014158 <RegionEU868InitDefaults+0xd4>)
 80140da:	2250      	movs	r2, #80	; 0x50
 80140dc:	0018      	movs	r0, r3
 80140de:	f001 faff 	bl	80156e0 <memcpy1>
            NvmCtx.Channels[0] = ( ChannelParams_t ) EU868_LC1;
 80140e2:	4b1e      	ldr	r3, [pc, #120]	; (801415c <RegionEU868InitDefaults+0xd8>)
 80140e4:	4a1e      	ldr	r2, [pc, #120]	; (8014160 <RegionEU868InitDefaults+0xdc>)
 80140e6:	ca13      	ldmia	r2!, {r0, r1, r4}
 80140e8:	c313      	stmia	r3!, {r0, r1, r4}
            NvmCtx.Channels[1] = ( ChannelParams_t ) EU868_LC2;
 80140ea:	4b1c      	ldr	r3, [pc, #112]	; (801415c <RegionEU868InitDefaults+0xd8>)
 80140ec:	4a1d      	ldr	r2, [pc, #116]	; (8014164 <RegionEU868InitDefaults+0xe0>)
 80140ee:	330c      	adds	r3, #12
 80140f0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80140f2:	c313      	stmia	r3!, {r0, r1, r4}
            NvmCtx.Channels[2] = ( ChannelParams_t ) EU868_LC3;
 80140f4:	4b19      	ldr	r3, [pc, #100]	; (801415c <RegionEU868InitDefaults+0xd8>)
 80140f6:	4a1c      	ldr	r2, [pc, #112]	; (8014168 <RegionEU868InitDefaults+0xe4>)
 80140f8:	3318      	adds	r3, #24
 80140fa:	ca13      	ldmia	r2!, {r0, r1, r4}
 80140fc:	c313      	stmia	r3!, {r0, r1, r4}
            NvmCtx.ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 80140fe:	4a17      	ldr	r2, [pc, #92]	; (801415c <RegionEU868InitDefaults+0xd8>)
 8014100:	2389      	movs	r3, #137	; 0x89
 8014102:	005b      	lsls	r3, r3, #1
 8014104:	2107      	movs	r1, #7
 8014106:	52d1      	strh	r1, [r2, r3]
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, NvmCtx.ChannelsDefaultMask, 1 );
 8014108:	4918      	ldr	r1, [pc, #96]	; (801416c <RegionEU868InitDefaults+0xe8>)
 801410a:	4b19      	ldr	r3, [pc, #100]	; (8014170 <RegionEU868InitDefaults+0xec>)
 801410c:	2201      	movs	r2, #1
 801410e:	0018      	movs	r0, r3
 8014110:	f7ff f8fb 	bl	801330a <RegionCommonChanMaskCopy>
            break;
 8014114:	e01c      	b.n	8014150 <RegionEU868InitDefaults+0xcc>
            if( params->NvmCtx != 0 )
 8014116:	687b      	ldr	r3, [r7, #4]
 8014118:	681b      	ldr	r3, [r3, #0]
 801411a:	2b00      	cmp	r3, #0
 801411c:	d017      	beq.n	801414e <RegionEU868InitDefaults+0xca>
                memcpy1( (uint8_t*) &NvmCtx, (uint8_t*) params->NvmCtx, sizeof( NvmCtx ) );
 801411e:	687b      	ldr	r3, [r7, #4]
 8014120:	6819      	ldr	r1, [r3, #0]
 8014122:	238a      	movs	r3, #138	; 0x8a
 8014124:	005a      	lsls	r2, r3, #1
 8014126:	4b0d      	ldr	r3, [pc, #52]	; (801415c <RegionEU868InitDefaults+0xd8>)
 8014128:	0018      	movs	r0, r3
 801412a:	f001 fad9 	bl	80156e0 <memcpy1>
            break;
 801412e:	e00e      	b.n	801414e <RegionEU868InitDefaults+0xca>
            NvmCtx.ChannelsMask[0] |= NvmCtx.ChannelsDefaultMask[0];
 8014130:	4a0a      	ldr	r2, [pc, #40]	; (801415c <RegionEU868InitDefaults+0xd8>)
 8014132:	2388      	movs	r3, #136	; 0x88
 8014134:	005b      	lsls	r3, r3, #1
 8014136:	5ad2      	ldrh	r2, [r2, r3]
 8014138:	4908      	ldr	r1, [pc, #32]	; (801415c <RegionEU868InitDefaults+0xd8>)
 801413a:	2389      	movs	r3, #137	; 0x89
 801413c:	005b      	lsls	r3, r3, #1
 801413e:	5acb      	ldrh	r3, [r1, r3]
 8014140:	4313      	orrs	r3, r2
 8014142:	b299      	uxth	r1, r3
 8014144:	4a05      	ldr	r2, [pc, #20]	; (801415c <RegionEU868InitDefaults+0xd8>)
 8014146:	2388      	movs	r3, #136	; 0x88
 8014148:	005b      	lsls	r3, r3, #1
 801414a:	52d1      	strh	r1, [r2, r3]
            break;
 801414c:	e000      	b.n	8014150 <RegionEU868InitDefaults+0xcc>
            break;
 801414e:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 8014150:	46c0      	nop			; (mov r8, r8)
 8014152:	46bd      	mov	sp, r7
 8014154:	b017      	add	sp, #92	; 0x5c
 8014156:	bd90      	pop	{r4, r7, pc}
 8014158:	20001000 	.word	0x20001000
 801415c:	20000f40 	.word	0x20000f40
 8014160:	0801f8a0 	.word	0x0801f8a0
 8014164:	0801f8ac 	.word	0x0801f8ac
 8014168:	0801f8b8 	.word	0x0801f8b8
 801416c:	20001052 	.word	0x20001052
 8014170:	20001050 	.word	0x20001050

08014174 <RegionEU868GetNvmCtx>:

void* RegionEU868GetNvmCtx( GetNvmCtxParams_t* params )
{
 8014174:	b580      	push	{r7, lr}
 8014176:	b082      	sub	sp, #8
 8014178:	af00      	add	r7, sp, #0
 801417a:	6078      	str	r0, [r7, #4]
    params->nvmCtxSize = sizeof( RegionEU868NvmCtx_t );
 801417c:	687b      	ldr	r3, [r7, #4]
 801417e:	228a      	movs	r2, #138	; 0x8a
 8014180:	0052      	lsls	r2, r2, #1
 8014182:	601a      	str	r2, [r3, #0]
    return &NvmCtx;
 8014184:	4b02      	ldr	r3, [pc, #8]	; (8014190 <RegionEU868GetNvmCtx+0x1c>)
}
 8014186:	0018      	movs	r0, r3
 8014188:	46bd      	mov	sp, r7
 801418a:	b002      	add	sp, #8
 801418c:	bd80      	pop	{r7, pc}
 801418e:	46c0      	nop			; (mov r8, r8)
 8014190:	20000f40 	.word	0x20000f40

08014194 <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8014194:	b580      	push	{r7, lr}
 8014196:	b082      	sub	sp, #8
 8014198:	af00      	add	r7, sp, #0
 801419a:	6078      	str	r0, [r7, #4]
 801419c:	000a      	movs	r2, r1
 801419e:	1cfb      	adds	r3, r7, #3
 80141a0:	701a      	strb	r2, [r3, #0]
    switch( phyAttribute )
 80141a2:	1cfb      	adds	r3, r7, #3
 80141a4:	781b      	ldrb	r3, [r3, #0]
 80141a6:	3b04      	subs	r3, #4
 80141a8:	2b0a      	cmp	r3, #10
 80141aa:	d83a      	bhi.n	8014222 <RegionEU868Verify+0x8e>
 80141ac:	009a      	lsls	r2, r3, #2
 80141ae:	4b1f      	ldr	r3, [pc, #124]	; (801422c <RegionEU868Verify+0x98>)
 80141b0:	18d3      	adds	r3, r2, r3
 80141b2:	681b      	ldr	r3, [r3, #0]
 80141b4:	469f      	mov	pc, r3
    {
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 80141b6:	687b      	ldr	r3, [r7, #4]
 80141b8:	781b      	ldrb	r3, [r3, #0]
 80141ba:	b25b      	sxtb	r3, r3
 80141bc:	2207      	movs	r2, #7
 80141be:	2100      	movs	r1, #0
 80141c0:	0018      	movs	r0, r3
 80141c2:	f7fe fff9 	bl	80131b8 <RegionCommonValueInRange>
 80141c6:	0003      	movs	r3, r0
 80141c8:	1e5a      	subs	r2, r3, #1
 80141ca:	4193      	sbcs	r3, r2
 80141cc:	b2db      	uxtb	r3, r3
 80141ce:	e029      	b.n	8014224 <RegionEU868Verify+0x90>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 80141d0:	687b      	ldr	r3, [r7, #4]
 80141d2:	781b      	ldrb	r3, [r3, #0]
 80141d4:	b25b      	sxtb	r3, r3
 80141d6:	2205      	movs	r2, #5
 80141d8:	2100      	movs	r1, #0
 80141da:	0018      	movs	r0, r3
 80141dc:	f7fe ffec 	bl	80131b8 <RegionCommonValueInRange>
 80141e0:	0003      	movs	r3, r0
 80141e2:	1e5a      	subs	r2, r3, #1
 80141e4:	4193      	sbcs	r3, r2
 80141e6:	b2db      	uxtb	r3, r3
 80141e8:	e01c      	b.n	8014224 <RegionEU868Verify+0x90>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 80141ea:	687b      	ldr	r3, [r7, #4]
 80141ec:	781b      	ldrb	r3, [r3, #0]
 80141ee:	b25b      	sxtb	r3, r3
 80141f0:	2207      	movs	r2, #7
 80141f2:	2100      	movs	r1, #0
 80141f4:	0018      	movs	r0, r3
 80141f6:	f7fe ffdf 	bl	80131b8 <RegionCommonValueInRange>
 80141fa:	0003      	movs	r3, r0
 80141fc:	1e5a      	subs	r2, r3, #1
 80141fe:	4193      	sbcs	r3, r2
 8014200:	b2db      	uxtb	r3, r3
 8014202:	e00f      	b.n	8014224 <RegionEU868Verify+0x90>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 8014204:	687b      	ldr	r3, [r7, #4]
 8014206:	781b      	ldrb	r3, [r3, #0]
 8014208:	b25b      	sxtb	r3, r3
 801420a:	2207      	movs	r2, #7
 801420c:	2100      	movs	r1, #0
 801420e:	0018      	movs	r0, r3
 8014210:	f7fe ffd2 	bl	80131b8 <RegionCommonValueInRange>
 8014214:	0003      	movs	r3, r0
 8014216:	1e5a      	subs	r2, r3, #1
 8014218:	4193      	sbcs	r3, r2
 801421a:	b2db      	uxtb	r3, r3
 801421c:	e002      	b.n	8014224 <RegionEU868Verify+0x90>
        }
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
 801421e:	2301      	movs	r3, #1
 8014220:	e000      	b.n	8014224 <RegionEU868Verify+0x90>
        }
        default:
            return false;
 8014222:	2300      	movs	r3, #0
    }
}
 8014224:	0018      	movs	r0, r3
 8014226:	46bd      	mov	sp, r7
 8014228:	b002      	add	sp, #8
 801422a:	bd80      	pop	{r7, pc}
 801422c:	08020c2c 	.word	0x08020c2c

08014230 <RegionEU868ApplyCFList>:

void RegionEU868ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 8014230:	b590      	push	{r4, r7, lr}
 8014232:	b08b      	sub	sp, #44	; 0x2c
 8014234:	af00      	add	r7, sp, #0
 8014236:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 8014238:	2318      	movs	r3, #24
 801423a:	18fb      	adds	r3, r7, r3
 801423c:	2250      	movs	r2, #80	; 0x50
 801423e:	721a      	strb	r2, [r3, #8]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 8014240:	687b      	ldr	r3, [r7, #4]
 8014242:	791b      	ldrb	r3, [r3, #4]
 8014244:	2b10      	cmp	r3, #16
 8014246:	d000      	beq.n	801424a <RegionEU868ApplyCFList+0x1a>
 8014248:	e07d      	b.n	8014346 <RegionEU868ApplyCFList+0x116>
    {
        return;
    }

    // Last byte CFListType must be 0 to indicate the CFList contains a list of frequencies
    if( applyCFList->Payload[15] != 0 )
 801424a:	687b      	ldr	r3, [r7, #4]
 801424c:	681b      	ldr	r3, [r3, #0]
 801424e:	330f      	adds	r3, #15
 8014250:	781b      	ldrb	r3, [r3, #0]
 8014252:	2b00      	cmp	r3, #0
 8014254:	d000      	beq.n	8014258 <RegionEU868ApplyCFList+0x28>
 8014256:	e078      	b.n	801434a <RegionEU868ApplyCFList+0x11a>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8014258:	2327      	movs	r3, #39	; 0x27
 801425a:	18fb      	adds	r3, r7, r3
 801425c:	2200      	movs	r2, #0
 801425e:	701a      	strb	r2, [r3, #0]
 8014260:	2326      	movs	r3, #38	; 0x26
 8014262:	18fb      	adds	r3, r7, r3
 8014264:	2203      	movs	r2, #3
 8014266:	701a      	strb	r2, [r3, #0]
 8014268:	e067      	b.n	801433a <RegionEU868ApplyCFList+0x10a>
    {
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 801426a:	2326      	movs	r3, #38	; 0x26
 801426c:	18fb      	adds	r3, r7, r3
 801426e:	781b      	ldrb	r3, [r3, #0]
 8014270:	2b07      	cmp	r3, #7
 8014272:	d82e      	bhi.n	80142d2 <RegionEU868ApplyCFList+0xa2>
        {
            // Channel frequency
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 8014274:	687b      	ldr	r3, [r7, #4]
 8014276:	681a      	ldr	r2, [r3, #0]
 8014278:	2427      	movs	r4, #39	; 0x27
 801427a:	193b      	adds	r3, r7, r4
 801427c:	781b      	ldrb	r3, [r3, #0]
 801427e:	18d3      	adds	r3, r2, r3
 8014280:	781b      	ldrb	r3, [r3, #0]
 8014282:	001a      	movs	r2, r3
 8014284:	2018      	movs	r0, #24
 8014286:	183b      	adds	r3, r7, r0
 8014288:	601a      	str	r2, [r3, #0]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 801428a:	183b      	adds	r3, r7, r0
 801428c:	681a      	ldr	r2, [r3, #0]
 801428e:	687b      	ldr	r3, [r7, #4]
 8014290:	6819      	ldr	r1, [r3, #0]
 8014292:	193b      	adds	r3, r7, r4
 8014294:	781b      	ldrb	r3, [r3, #0]
 8014296:	3301      	adds	r3, #1
 8014298:	18cb      	adds	r3, r1, r3
 801429a:	781b      	ldrb	r3, [r3, #0]
 801429c:	021b      	lsls	r3, r3, #8
 801429e:	431a      	orrs	r2, r3
 80142a0:	183b      	adds	r3, r7, r0
 80142a2:	601a      	str	r2, [r3, #0]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 80142a4:	183b      	adds	r3, r7, r0
 80142a6:	681a      	ldr	r2, [r3, #0]
 80142a8:	687b      	ldr	r3, [r7, #4]
 80142aa:	6819      	ldr	r1, [r3, #0]
 80142ac:	193b      	adds	r3, r7, r4
 80142ae:	781b      	ldrb	r3, [r3, #0]
 80142b0:	3302      	adds	r3, #2
 80142b2:	18cb      	adds	r3, r1, r3
 80142b4:	781b      	ldrb	r3, [r3, #0]
 80142b6:	041b      	lsls	r3, r3, #16
 80142b8:	431a      	orrs	r2, r3
 80142ba:	183b      	adds	r3, r7, r0
 80142bc:	601a      	str	r2, [r3, #0]
            newChannel.Frequency *= 100;
 80142be:	183b      	adds	r3, r7, r0
 80142c0:	681b      	ldr	r3, [r3, #0]
 80142c2:	2264      	movs	r2, #100	; 0x64
 80142c4:	435a      	muls	r2, r3
 80142c6:	183b      	adds	r3, r7, r0
 80142c8:	601a      	str	r2, [r3, #0]

            // Initialize alternative frequency to 0
            newChannel.Rx1Frequency = 0;
 80142ca:	183b      	adds	r3, r7, r0
 80142cc:	2200      	movs	r2, #0
 80142ce:	605a      	str	r2, [r3, #4]
 80142d0:	e009      	b.n	80142e6 <RegionEU868ApplyCFList+0xb6>
        }
        else
        {
            newChannel.Frequency = 0;
 80142d2:	2118      	movs	r1, #24
 80142d4:	187b      	adds	r3, r7, r1
 80142d6:	2200      	movs	r2, #0
 80142d8:	601a      	str	r2, [r3, #0]
            newChannel.DrRange.Value = 0;
 80142da:	187b      	adds	r3, r7, r1
 80142dc:	2200      	movs	r2, #0
 80142de:	721a      	strb	r2, [r3, #8]
            newChannel.Rx1Frequency = 0;
 80142e0:	187b      	adds	r3, r7, r1
 80142e2:	2200      	movs	r2, #0
 80142e4:	605a      	str	r2, [r3, #4]
        }

        if( newChannel.Frequency != 0 )
 80142e6:	2318      	movs	r3, #24
 80142e8:	18fb      	adds	r3, r7, r3
 80142ea:	681b      	ldr	r3, [r3, #0]
 80142ec:	2b00      	cmp	r3, #0
 80142ee:	d00e      	beq.n	801430e <RegionEU868ApplyCFList+0xde>
        {
            channelAdd.NewChannel = &newChannel;
 80142f0:	2110      	movs	r1, #16
 80142f2:	187b      	adds	r3, r7, r1
 80142f4:	2218      	movs	r2, #24
 80142f6:	18ba      	adds	r2, r7, r2
 80142f8:	601a      	str	r2, [r3, #0]
            channelAdd.ChannelId = chanIdx;
 80142fa:	187b      	adds	r3, r7, r1
 80142fc:	2226      	movs	r2, #38	; 0x26
 80142fe:	18ba      	adds	r2, r7, r2
 8014300:	7812      	ldrb	r2, [r2, #0]
 8014302:	711a      	strb	r2, [r3, #4]

            // Try to add all channels
            RegionEU868ChannelAdd( &channelAdd );
 8014304:	187b      	adds	r3, r7, r1
 8014306:	0018      	movs	r0, r3
 8014308:	f000 fdc2 	bl	8014e90 <RegionEU868ChannelAdd>
 801430c:	e009      	b.n	8014322 <RegionEU868ApplyCFList+0xf2>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 801430e:	210c      	movs	r1, #12
 8014310:	187b      	adds	r3, r7, r1
 8014312:	2226      	movs	r2, #38	; 0x26
 8014314:	18ba      	adds	r2, r7, r2
 8014316:	7812      	ldrb	r2, [r2, #0]
 8014318:	701a      	strb	r2, [r3, #0]

            RegionEU868ChannelsRemove( &channelRemove );
 801431a:	187b      	adds	r3, r7, r1
 801431c:	0018      	movs	r0, r3
 801431e:	f000 fe7b 	bl	8015018 <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8014322:	2227      	movs	r2, #39	; 0x27
 8014324:	18bb      	adds	r3, r7, r2
 8014326:	18ba      	adds	r2, r7, r2
 8014328:	7812      	ldrb	r2, [r2, #0]
 801432a:	3203      	adds	r2, #3
 801432c:	701a      	strb	r2, [r3, #0]
 801432e:	2126      	movs	r1, #38	; 0x26
 8014330:	187b      	adds	r3, r7, r1
 8014332:	781a      	ldrb	r2, [r3, #0]
 8014334:	187b      	adds	r3, r7, r1
 8014336:	3201      	adds	r2, #1
 8014338:	701a      	strb	r2, [r3, #0]
 801433a:	2326      	movs	r3, #38	; 0x26
 801433c:	18fb      	adds	r3, r7, r3
 801433e:	781b      	ldrb	r3, [r3, #0]
 8014340:	2b0f      	cmp	r3, #15
 8014342:	d992      	bls.n	801426a <RegionEU868ApplyCFList+0x3a>
 8014344:	e002      	b.n	801434c <RegionEU868ApplyCFList+0x11c>
        return;
 8014346:	46c0      	nop			; (mov r8, r8)
 8014348:	e000      	b.n	801434c <RegionEU868ApplyCFList+0x11c>
        return;
 801434a:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 801434c:	46bd      	mov	sp, r7
 801434e:	b00b      	add	sp, #44	; 0x2c
 8014350:	bd90      	pop	{r4, r7, pc}
	...

08014354 <RegionEU868ChanMaskSet>:

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 8014354:	b580      	push	{r7, lr}
 8014356:	b082      	sub	sp, #8
 8014358:	af00      	add	r7, sp, #0
 801435a:	6078      	str	r0, [r7, #4]
    switch( chanMaskSet->ChannelsMaskType )
 801435c:	687b      	ldr	r3, [r7, #4]
 801435e:	791b      	ldrb	r3, [r3, #4]
 8014360:	2b00      	cmp	r3, #0
 8014362:	d002      	beq.n	801436a <RegionEU868ChanMaskSet+0x16>
 8014364:	2b01      	cmp	r3, #1
 8014366:	d008      	beq.n	801437a <RegionEU868ChanMaskSet+0x26>
 8014368:	e00f      	b.n	801438a <RegionEU868ChanMaskSet+0x36>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, chanMaskSet->ChannelsMaskIn, 1 );
 801436a:	687b      	ldr	r3, [r7, #4]
 801436c:	6819      	ldr	r1, [r3, #0]
 801436e:	4b0a      	ldr	r3, [pc, #40]	; (8014398 <RegionEU868ChanMaskSet+0x44>)
 8014370:	2201      	movs	r2, #1
 8014372:	0018      	movs	r0, r3
 8014374:	f7fe ffc9 	bl	801330a <RegionCommonChanMaskCopy>
            break;
 8014378:	e009      	b.n	801438e <RegionEU868ChanMaskSet+0x3a>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( NvmCtx.ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, 1 );
 801437a:	687b      	ldr	r3, [r7, #4]
 801437c:	6819      	ldr	r1, [r3, #0]
 801437e:	4b07      	ldr	r3, [pc, #28]	; (801439c <RegionEU868ChanMaskSet+0x48>)
 8014380:	2201      	movs	r2, #1
 8014382:	0018      	movs	r0, r3
 8014384:	f7fe ffc1 	bl	801330a <RegionCommonChanMaskCopy>
            break;
 8014388:	e001      	b.n	801438e <RegionEU868ChanMaskSet+0x3a>
        }
        default:
            return false;
 801438a:	2300      	movs	r3, #0
 801438c:	e000      	b.n	8014390 <RegionEU868ChanMaskSet+0x3c>
    }
    return true;
 801438e:	2301      	movs	r3, #1
}
 8014390:	0018      	movs	r0, r3
 8014392:	46bd      	mov	sp, r7
 8014394:	b002      	add	sp, #8
 8014396:	bd80      	pop	{r7, pc}
 8014398:	20001050 	.word	0x20001050
 801439c:	20001052 	.word	0x20001052

080143a0 <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 80143a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80143a2:	b08b      	sub	sp, #44	; 0x2c
 80143a4:	af04      	add	r7, sp, #16
 80143a6:	60ba      	str	r2, [r7, #8]
 80143a8:	607b      	str	r3, [r7, #4]
 80143aa:	250f      	movs	r5, #15
 80143ac:	197b      	adds	r3, r7, r5
 80143ae:	1c02      	adds	r2, r0, #0
 80143b0:	701a      	strb	r2, [r3, #0]
 80143b2:	230e      	movs	r3, #14
 80143b4:	18fb      	adds	r3, r7, r3
 80143b6:	1c0a      	adds	r2, r1, #0
 80143b8:	701a      	strb	r2, [r3, #0]
    double tSymbol = 0.0;
 80143ba:	2300      	movs	r3, #0
 80143bc:	2400      	movs	r4, #0
 80143be:	613b      	str	r3, [r7, #16]
 80143c0:	617c      	str	r4, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 80143c2:	197b      	adds	r3, r7, r5
 80143c4:	781b      	ldrb	r3, [r3, #0]
 80143c6:	b25a      	sxtb	r2, r3
 80143c8:	2a07      	cmp	r2, #7
 80143ca:	dd00      	ble.n	80143ce <RegionEU868ComputeRxWindowParameters+0x2e>
 80143cc:	2307      	movs	r3, #7
 80143ce:	b25a      	sxtb	r2, r3
 80143d0:	687b      	ldr	r3, [r7, #4]
 80143d2:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = GetBandwidth( rxConfigParams->Datarate );
 80143d4:	687b      	ldr	r3, [r7, #4]
 80143d6:	785b      	ldrb	r3, [r3, #1]
 80143d8:	b25b      	sxtb	r3, r3
 80143da:	0018      	movs	r0, r3
 80143dc:	f7ff fb8a 	bl	8013af4 <GetBandwidth>
 80143e0:	0003      	movs	r3, r0
 80143e2:	b2da      	uxtb	r2, r3
 80143e4:	687b      	ldr	r3, [r7, #4]
 80143e6:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 80143e8:	687b      	ldr	r3, [r7, #4]
 80143ea:	785b      	ldrb	r3, [r3, #1]
 80143ec:	b25b      	sxtb	r3, r3
 80143ee:	2b07      	cmp	r3, #7
 80143f0:	d10d      	bne.n	801440e <RegionEU868ComputeRxWindowParameters+0x6e>
    { // FSK
        tSymbol = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 80143f2:	687b      	ldr	r3, [r7, #4]
 80143f4:	785b      	ldrb	r3, [r3, #1]
 80143f6:	b25b      	sxtb	r3, r3
 80143f8:	001a      	movs	r2, r3
 80143fa:	4b1b      	ldr	r3, [pc, #108]	; (8014468 <RegionEU868ComputeRxWindowParameters+0xc8>)
 80143fc:	5c9b      	ldrb	r3, [r3, r2]
 80143fe:	0018      	movs	r0, r3
 8014400:	f7ff f9ea 	bl	80137d8 <RegionCommonComputeSymbolTimeFsk>
 8014404:	0003      	movs	r3, r0
 8014406:	000c      	movs	r4, r1
 8014408:	613b      	str	r3, [r7, #16]
 801440a:	617c      	str	r4, [r7, #20]
 801440c:	e013      	b.n	8014436 <RegionEU868ComputeRxWindowParameters+0x96>
    }
    else
    { // LoRa
        tSymbol = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 801440e:	687b      	ldr	r3, [r7, #4]
 8014410:	785b      	ldrb	r3, [r3, #1]
 8014412:	b25b      	sxtb	r3, r3
 8014414:	001a      	movs	r2, r3
 8014416:	4b14      	ldr	r3, [pc, #80]	; (8014468 <RegionEU868ComputeRxWindowParameters+0xc8>)
 8014418:	5c98      	ldrb	r0, [r3, r2]
 801441a:	687b      	ldr	r3, [r7, #4]
 801441c:	785b      	ldrb	r3, [r3, #1]
 801441e:	b25b      	sxtb	r3, r3
 8014420:	001a      	movs	r2, r3
 8014422:	4b12      	ldr	r3, [pc, #72]	; (801446c <RegionEU868ComputeRxWindowParameters+0xcc>)
 8014424:	0092      	lsls	r2, r2, #2
 8014426:	58d3      	ldr	r3, [r2, r3]
 8014428:	0019      	movs	r1, r3
 801442a:	f7ff f9a9 	bl	8013780 <RegionCommonComputeSymbolTimeLoRa>
 801442e:	0003      	movs	r3, r0
 8014430:	000c      	movs	r4, r1
 8014432:	613b      	str	r3, [r7, #16]
 8014434:	617c      	str	r4, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbol, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8014436:	4b0e      	ldr	r3, [pc, #56]	; (8014470 <RegionEU868ComputeRxWindowParameters+0xd0>)
 8014438:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801443a:	4798      	blx	r3
 801443c:	0006      	movs	r6, r0
 801443e:	687b      	ldr	r3, [r7, #4]
 8014440:	3308      	adds	r3, #8
 8014442:	687a      	ldr	r2, [r7, #4]
 8014444:	320c      	adds	r2, #12
 8014446:	68bd      	ldr	r5, [r7, #8]
 8014448:	210e      	movs	r1, #14
 801444a:	1879      	adds	r1, r7, r1
 801444c:	780c      	ldrb	r4, [r1, #0]
 801444e:	6938      	ldr	r0, [r7, #16]
 8014450:	6979      	ldr	r1, [r7, #20]
 8014452:	9202      	str	r2, [sp, #8]
 8014454:	9301      	str	r3, [sp, #4]
 8014456:	9600      	str	r6, [sp, #0]
 8014458:	002b      	movs	r3, r5
 801445a:	0022      	movs	r2, r4
 801445c:	f7ff f9d8 	bl	8013810 <RegionCommonComputeRxWindowParameters>
}
 8014460:	46c0      	nop			; (mov r8, r8)
 8014462:	46bd      	mov	sp, r7
 8014464:	b007      	add	sp, #28
 8014466:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014468:	08020b20 	.word	0x08020b20
 801446c:	08020b28 	.word	0x08020b28
 8014470:	08020c58 	.word	0x08020c58

08014474 <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8014474:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014476:	b091      	sub	sp, #68	; 0x44
 8014478:	af0a      	add	r7, sp, #40	; 0x28
 801447a:	6078      	str	r0, [r7, #4]
 801447c:	6039      	str	r1, [r7, #0]
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 801447e:	230f      	movs	r3, #15
 8014480:	18fb      	adds	r3, r7, r3
 8014482:	687a      	ldr	r2, [r7, #4]
 8014484:	7852      	ldrb	r2, [r2, #1]
 8014486:	701a      	strb	r2, [r3, #0]
    uint8_t maxPayload = 0;
 8014488:	2316      	movs	r3, #22
 801448a:	18fb      	adds	r3, r7, r3
 801448c:	2200      	movs	r2, #0
 801448e:	701a      	strb	r2, [r3, #0]
    int8_t phyDr = 0;
 8014490:	230e      	movs	r3, #14
 8014492:	18fb      	adds	r3, r7, r3
 8014494:	2200      	movs	r2, #0
 8014496:	701a      	strb	r2, [r3, #0]
    uint32_t frequency = rxConfig->Frequency;
 8014498:	687b      	ldr	r3, [r7, #4]
 801449a:	685b      	ldr	r3, [r3, #4]
 801449c:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 801449e:	4b64      	ldr	r3, [pc, #400]	; (8014630 <RegionEU868RxConfig+0x1bc>)
 80144a0:	68db      	ldr	r3, [r3, #12]
 80144a2:	4798      	blx	r3
 80144a4:	1e03      	subs	r3, r0, #0
 80144a6:	d001      	beq.n	80144ac <RegionEU868RxConfig+0x38>
    {
        return false;
 80144a8:	2300      	movs	r3, #0
 80144aa:	e0bc      	b.n	8014626 <RegionEU868RxConfig+0x1b2>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 80144ac:	687b      	ldr	r3, [r7, #4]
 80144ae:	7cdb      	ldrb	r3, [r3, #19]
 80144b0:	2b00      	cmp	r3, #0
 80144b2:	d122      	bne.n	80144fa <RegionEU868RxConfig+0x86>
    {
        // Apply window 1 frequency
        frequency = NvmCtx.Channels[rxConfig->Channel].Frequency;
 80144b4:	687b      	ldr	r3, [r7, #4]
 80144b6:	781b      	ldrb	r3, [r3, #0]
 80144b8:	0019      	movs	r1, r3
 80144ba:	4a5e      	ldr	r2, [pc, #376]	; (8014634 <RegionEU868RxConfig+0x1c0>)
 80144bc:	000b      	movs	r3, r1
 80144be:	005b      	lsls	r3, r3, #1
 80144c0:	185b      	adds	r3, r3, r1
 80144c2:	009b      	lsls	r3, r3, #2
 80144c4:	589b      	ldr	r3, [r3, r2]
 80144c6:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( NvmCtx.Channels[rxConfig->Channel].Rx1Frequency != 0 )
 80144c8:	687b      	ldr	r3, [r7, #4]
 80144ca:	781b      	ldrb	r3, [r3, #0]
 80144cc:	0019      	movs	r1, r3
 80144ce:	4a59      	ldr	r2, [pc, #356]	; (8014634 <RegionEU868RxConfig+0x1c0>)
 80144d0:	000b      	movs	r3, r1
 80144d2:	005b      	lsls	r3, r3, #1
 80144d4:	185b      	adds	r3, r3, r1
 80144d6:	009b      	lsls	r3, r3, #2
 80144d8:	18d3      	adds	r3, r2, r3
 80144da:	3304      	adds	r3, #4
 80144dc:	681b      	ldr	r3, [r3, #0]
 80144de:	2b00      	cmp	r3, #0
 80144e0:	d00b      	beq.n	80144fa <RegionEU868RxConfig+0x86>
        {
            frequency = NvmCtx.Channels[rxConfig->Channel].Rx1Frequency;
 80144e2:	687b      	ldr	r3, [r7, #4]
 80144e4:	781b      	ldrb	r3, [r3, #0]
 80144e6:	0019      	movs	r1, r3
 80144e8:	4a52      	ldr	r2, [pc, #328]	; (8014634 <RegionEU868RxConfig+0x1c0>)
 80144ea:	000b      	movs	r3, r1
 80144ec:	005b      	lsls	r3, r3, #1
 80144ee:	185b      	adds	r3, r3, r1
 80144f0:	009b      	lsls	r3, r3, #2
 80144f2:	18d3      	adds	r3, r2, r3
 80144f4:	3304      	adds	r3, #4
 80144f6:	681b      	ldr	r3, [r3, #0]
 80144f8:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 80144fa:	240f      	movs	r4, #15
 80144fc:	193b      	adds	r3, r7, r4
 80144fe:	781b      	ldrb	r3, [r3, #0]
 8014500:	b25b      	sxtb	r3, r3
 8014502:	4a4d      	ldr	r2, [pc, #308]	; (8014638 <RegionEU868RxConfig+0x1c4>)
 8014504:	5cd2      	ldrb	r2, [r2, r3]
 8014506:	230e      	movs	r3, #14
 8014508:	18fb      	adds	r3, r7, r3
 801450a:	701a      	strb	r2, [r3, #0]

    Radio.SetChannel( frequency );
 801450c:	4b48      	ldr	r3, [pc, #288]	; (8014630 <RegionEU868RxConfig+0x1bc>)
 801450e:	695b      	ldr	r3, [r3, #20]
 8014510:	693a      	ldr	r2, [r7, #16]
 8014512:	0010      	movs	r0, r2
 8014514:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 8014516:	193b      	adds	r3, r7, r4
 8014518:	781b      	ldrb	r3, [r3, #0]
 801451a:	b25b      	sxtb	r3, r3
 801451c:	2b07      	cmp	r3, #7
 801451e:	d12f      	bne.n	8014580 <RegionEU868RxConfig+0x10c>
    {
        modem = MODEM_FSK;
 8014520:	2117      	movs	r1, #23
 8014522:	187b      	adds	r3, r7, r1
 8014524:	2200      	movs	r2, #0
 8014526:	701a      	strb	r2, [r3, #0]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 8014528:	4b41      	ldr	r3, [pc, #260]	; (8014630 <RegionEU868RxConfig+0x1bc>)
 801452a:	6a1c      	ldr	r4, [r3, #32]
 801452c:	230e      	movs	r3, #14
 801452e:	18fb      	adds	r3, r7, r3
 8014530:	2200      	movs	r2, #0
 8014532:	569a      	ldrsb	r2, [r3, r2]
 8014534:	0013      	movs	r3, r2
 8014536:	015b      	lsls	r3, r3, #5
 8014538:	1a9b      	subs	r3, r3, r2
 801453a:	009b      	lsls	r3, r3, #2
 801453c:	189b      	adds	r3, r3, r2
 801453e:	00db      	lsls	r3, r3, #3
 8014540:	001e      	movs	r6, r3
 8014542:	687b      	ldr	r3, [r7, #4]
 8014544:	689b      	ldr	r3, [r3, #8]
 8014546:	b29b      	uxth	r3, r3
 8014548:	687a      	ldr	r2, [r7, #4]
 801454a:	7c92      	ldrb	r2, [r2, #18]
 801454c:	4d3b      	ldr	r5, [pc, #236]	; (801463c <RegionEU868RxConfig+0x1c8>)
 801454e:	1879      	adds	r1, r7, r1
 8014550:	7808      	ldrb	r0, [r1, #0]
 8014552:	9209      	str	r2, [sp, #36]	; 0x24
 8014554:	2200      	movs	r2, #0
 8014556:	9208      	str	r2, [sp, #32]
 8014558:	2200      	movs	r2, #0
 801455a:	9207      	str	r2, [sp, #28]
 801455c:	2200      	movs	r2, #0
 801455e:	9206      	str	r2, [sp, #24]
 8014560:	2201      	movs	r2, #1
 8014562:	9205      	str	r2, [sp, #20]
 8014564:	2200      	movs	r2, #0
 8014566:	9204      	str	r2, [sp, #16]
 8014568:	2200      	movs	r2, #0
 801456a:	9203      	str	r2, [sp, #12]
 801456c:	9302      	str	r3, [sp, #8]
 801456e:	2305      	movs	r3, #5
 8014570:	9301      	str	r3, [sp, #4]
 8014572:	4b33      	ldr	r3, [pc, #204]	; (8014640 <RegionEU868RxConfig+0x1cc>)
 8014574:	9300      	str	r3, [sp, #0]
 8014576:	2300      	movs	r3, #0
 8014578:	0032      	movs	r2, r6
 801457a:	0029      	movs	r1, r5
 801457c:	47a0      	blx	r4
 801457e:	e029      	b.n	80145d4 <RegionEU868RxConfig+0x160>
    }
    else
    {
        modem = MODEM_LORA;
 8014580:	2117      	movs	r1, #23
 8014582:	187b      	adds	r3, r7, r1
 8014584:	2201      	movs	r2, #1
 8014586:	701a      	strb	r2, [r3, #0]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 8014588:	4b29      	ldr	r3, [pc, #164]	; (8014630 <RegionEU868RxConfig+0x1bc>)
 801458a:	6a1c      	ldr	r4, [r3, #32]
 801458c:	687b      	ldr	r3, [r7, #4]
 801458e:	789b      	ldrb	r3, [r3, #2]
 8014590:	001e      	movs	r6, r3
 8014592:	230e      	movs	r3, #14
 8014594:	18fb      	adds	r3, r7, r3
 8014596:	2500      	movs	r5, #0
 8014598:	575d      	ldrsb	r5, [r3, r5]
 801459a:	687b      	ldr	r3, [r7, #4]
 801459c:	689b      	ldr	r3, [r3, #8]
 801459e:	b29b      	uxth	r3, r3
 80145a0:	687a      	ldr	r2, [r7, #4]
 80145a2:	7c92      	ldrb	r2, [r2, #18]
 80145a4:	1879      	adds	r1, r7, r1
 80145a6:	7808      	ldrb	r0, [r1, #0]
 80145a8:	9209      	str	r2, [sp, #36]	; 0x24
 80145aa:	2201      	movs	r2, #1
 80145ac:	9208      	str	r2, [sp, #32]
 80145ae:	2200      	movs	r2, #0
 80145b0:	9207      	str	r2, [sp, #28]
 80145b2:	2200      	movs	r2, #0
 80145b4:	9206      	str	r2, [sp, #24]
 80145b6:	2200      	movs	r2, #0
 80145b8:	9205      	str	r2, [sp, #20]
 80145ba:	2200      	movs	r2, #0
 80145bc:	9204      	str	r2, [sp, #16]
 80145be:	2200      	movs	r2, #0
 80145c0:	9203      	str	r2, [sp, #12]
 80145c2:	9302      	str	r3, [sp, #8]
 80145c4:	2308      	movs	r3, #8
 80145c6:	9301      	str	r3, [sp, #4]
 80145c8:	2300      	movs	r3, #0
 80145ca:	9300      	str	r3, [sp, #0]
 80145cc:	2301      	movs	r3, #1
 80145ce:	002a      	movs	r2, r5
 80145d0:	0031      	movs	r1, r6
 80145d2:	47a0      	blx	r4
    }

    if( rxConfig->RepeaterSupport == true )
 80145d4:	687b      	ldr	r3, [r7, #4]
 80145d6:	7c5b      	ldrb	r3, [r3, #17]
 80145d8:	2b00      	cmp	r3, #0
 80145da:	d009      	beq.n	80145f0 <RegionEU868RxConfig+0x17c>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 80145dc:	230f      	movs	r3, #15
 80145de:	18fb      	adds	r3, r7, r3
 80145e0:	2200      	movs	r2, #0
 80145e2:	569a      	ldrsb	r2, [r3, r2]
 80145e4:	2316      	movs	r3, #22
 80145e6:	18fb      	adds	r3, r7, r3
 80145e8:	4916      	ldr	r1, [pc, #88]	; (8014644 <RegionEU868RxConfig+0x1d0>)
 80145ea:	5c8a      	ldrb	r2, [r1, r2]
 80145ec:	701a      	strb	r2, [r3, #0]
 80145ee:	e008      	b.n	8014602 <RegionEU868RxConfig+0x18e>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 80145f0:	230f      	movs	r3, #15
 80145f2:	18fb      	adds	r3, r7, r3
 80145f4:	2200      	movs	r2, #0
 80145f6:	569a      	ldrsb	r2, [r3, r2]
 80145f8:	2316      	movs	r3, #22
 80145fa:	18fb      	adds	r3, r7, r3
 80145fc:	4912      	ldr	r1, [pc, #72]	; (8014648 <RegionEU868RxConfig+0x1d4>)
 80145fe:	5c8a      	ldrb	r2, [r1, r2]
 8014600:	701a      	strb	r2, [r3, #0]
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORA_MAC_FRMPAYLOAD_OVERHEAD );
 8014602:	4b0b      	ldr	r3, [pc, #44]	; (8014630 <RegionEU868RxConfig+0x1bc>)
 8014604:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8014606:	2216      	movs	r2, #22
 8014608:	18ba      	adds	r2, r7, r2
 801460a:	7812      	ldrb	r2, [r2, #0]
 801460c:	320d      	adds	r2, #13
 801460e:	b2d1      	uxtb	r1, r2
 8014610:	2217      	movs	r2, #23
 8014612:	18ba      	adds	r2, r7, r2
 8014614:	7812      	ldrb	r2, [r2, #0]
 8014616:	0010      	movs	r0, r2
 8014618:	4798      	blx	r3
    TVL1( PRINTF( "RX on freq %d Hz at DR %d\n\r", frequency, dr );)

    *datarate = (uint8_t) dr;
 801461a:	683b      	ldr	r3, [r7, #0]
 801461c:	220f      	movs	r2, #15
 801461e:	18ba      	adds	r2, r7, r2
 8014620:	7812      	ldrb	r2, [r2, #0]
 8014622:	701a      	strb	r2, [r3, #0]
    return true;
 8014624:	2301      	movs	r3, #1
}
 8014626:	0018      	movs	r0, r3
 8014628:	46bd      	mov	sp, r7
 801462a:	b007      	add	sp, #28
 801462c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801462e:	46c0      	nop			; (mov r8, r8)
 8014630:	08020c58 	.word	0x08020c58
 8014634:	20000f40 	.word	0x20000f40
 8014638:	08020b20 	.word	0x08020b20
 801463c:	0000c350 	.word	0x0000c350
 8014640:	00014585 	.word	0x00014585
 8014644:	08020b50 	.word	0x08020b50
 8014648:	08020b48 	.word	0x08020b48

0801464c <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 801464c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801464e:	b093      	sub	sp, #76	; 0x4c
 8014650:	af0a      	add	r7, sp, #40	; 0x28
 8014652:	60f8      	str	r0, [r7, #12]
 8014654:	60b9      	str	r1, [r7, #8]
 8014656:	607a      	str	r2, [r7, #4]
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 8014658:	68fb      	ldr	r3, [r7, #12]
 801465a:	785b      	ldrb	r3, [r3, #1]
 801465c:	b25b      	sxtb	r3, r3
 801465e:	001a      	movs	r2, r3
 8014660:	4b60      	ldr	r3, [pc, #384]	; (80147e4 <RegionEU868TxConfig+0x198>)
 8014662:	5c9a      	ldrb	r2, [r3, r2]
 8014664:	231e      	movs	r3, #30
 8014666:	18fb      	adds	r3, r7, r3
 8014668:	701a      	strb	r2, [r3, #0]
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, NvmCtx.Bands[NvmCtx.Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, NvmCtx.ChannelsMask );
 801466a:	68fb      	ldr	r3, [r7, #12]
 801466c:	2002      	movs	r0, #2
 801466e:	5618      	ldrsb	r0, [r3, r0]
 8014670:	68fb      	ldr	r3, [r7, #12]
 8014672:	781b      	ldrb	r3, [r3, #0]
 8014674:	0019      	movs	r1, r3
 8014676:	4a5c      	ldr	r2, [pc, #368]	; (80147e8 <RegionEU868TxConfig+0x19c>)
 8014678:	000b      	movs	r3, r1
 801467a:	005b      	lsls	r3, r3, #1
 801467c:	185b      	adds	r3, r3, r1
 801467e:	009b      	lsls	r3, r3, #2
 8014680:	18d3      	adds	r3, r2, r3
 8014682:	3309      	adds	r3, #9
 8014684:	781b      	ldrb	r3, [r3, #0]
 8014686:	4a58      	ldr	r2, [pc, #352]	; (80147e8 <RegionEU868TxConfig+0x19c>)
 8014688:	330c      	adds	r3, #12
 801468a:	011b      	lsls	r3, r3, #4
 801468c:	18d3      	adds	r3, r2, r3
 801468e:	3302      	adds	r3, #2
 8014690:	2100      	movs	r1, #0
 8014692:	5659      	ldrsb	r1, [r3, r1]
 8014694:	68fb      	ldr	r3, [r7, #12]
 8014696:	2201      	movs	r2, #1
 8014698:	569a      	ldrsb	r2, [r3, r2]
 801469a:	251d      	movs	r5, #29
 801469c:	197c      	adds	r4, r7, r5
 801469e:	4b53      	ldr	r3, [pc, #332]	; (80147ec <RegionEU868TxConfig+0x1a0>)
 80146a0:	f7ff fa46 	bl	8013b30 <LimitTxPower>
 80146a4:	0003      	movs	r3, r0
 80146a6:	7023      	strb	r3, [r4, #0]
    uint32_t bandwidth = GetBandwidth( txConfig->Datarate );
 80146a8:	68fb      	ldr	r3, [r7, #12]
 80146aa:	785b      	ldrb	r3, [r3, #1]
 80146ac:	b25b      	sxtb	r3, r3
 80146ae:	0018      	movs	r0, r3
 80146b0:	f7ff fa20 	bl	8013af4 <GetBandwidth>
 80146b4:	0003      	movs	r3, r0
 80146b6:	61bb      	str	r3, [r7, #24]
    int8_t phyTxPower = 0;
 80146b8:	2017      	movs	r0, #23
 80146ba:	183b      	adds	r3, r7, r0
 80146bc:	2200      	movs	r2, #0
 80146be:	701a      	strb	r2, [r3, #0]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 80146c0:	68fb      	ldr	r3, [r7, #12]
 80146c2:	6859      	ldr	r1, [r3, #4]
 80146c4:	68fb      	ldr	r3, [r7, #12]
 80146c6:	689a      	ldr	r2, [r3, #8]
 80146c8:	183c      	adds	r4, r7, r0
 80146ca:	197b      	adds	r3, r7, r5
 80146cc:	781b      	ldrb	r3, [r3, #0]
 80146ce:	b25b      	sxtb	r3, r3
 80146d0:	0018      	movs	r0, r3
 80146d2:	f7ff f921 	bl	8013918 <RegionCommonComputeTxPower>
 80146d6:	0003      	movs	r3, r0
 80146d8:	7023      	strb	r3, [r4, #0]

    // Setup the radio frequency
    Radio.SetChannel( NvmCtx.Channels[txConfig->Channel].Frequency );
 80146da:	4b45      	ldr	r3, [pc, #276]	; (80147f0 <RegionEU868TxConfig+0x1a4>)
 80146dc:	695a      	ldr	r2, [r3, #20]
 80146de:	68fb      	ldr	r3, [r7, #12]
 80146e0:	781b      	ldrb	r3, [r3, #0]
 80146e2:	0018      	movs	r0, r3
 80146e4:	4940      	ldr	r1, [pc, #256]	; (80147e8 <RegionEU868TxConfig+0x19c>)
 80146e6:	0003      	movs	r3, r0
 80146e8:	005b      	lsls	r3, r3, #1
 80146ea:	181b      	adds	r3, r3, r0
 80146ec:	009b      	lsls	r3, r3, #2
 80146ee:	585b      	ldr	r3, [r3, r1]
 80146f0:	0018      	movs	r0, r3
 80146f2:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 80146f4:	68fb      	ldr	r3, [r7, #12]
 80146f6:	785b      	ldrb	r3, [r3, #1]
 80146f8:	b25b      	sxtb	r3, r3
 80146fa:	2b07      	cmp	r3, #7
 80146fc:	d12d      	bne.n	801475a <RegionEU868TxConfig+0x10e>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 80146fe:	201f      	movs	r0, #31
 8014700:	183b      	adds	r3, r7, r0
 8014702:	2200      	movs	r2, #0
 8014704:	701a      	strb	r2, [r3, #0]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 3000 );
 8014706:	4b3a      	ldr	r3, [pc, #232]	; (80147f0 <RegionEU868TxConfig+0x1a4>)
 8014708:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 801470a:	231e      	movs	r3, #30
 801470c:	18fb      	adds	r3, r7, r3
 801470e:	2200      	movs	r2, #0
 8014710:	569a      	ldrsb	r2, [r3, r2]
 8014712:	0013      	movs	r3, r2
 8014714:	015b      	lsls	r3, r3, #5
 8014716:	1a9b      	subs	r3, r3, r2
 8014718:	009b      	lsls	r3, r3, #2
 801471a:	189b      	adds	r3, r3, r2
 801471c:	00db      	lsls	r3, r3, #3
 801471e:	001d      	movs	r5, r3
 8014720:	69ba      	ldr	r2, [r7, #24]
 8014722:	4e34      	ldr	r6, [pc, #208]	; (80147f4 <RegionEU868TxConfig+0x1a8>)
 8014724:	2317      	movs	r3, #23
 8014726:	18fb      	adds	r3, r7, r3
 8014728:	2100      	movs	r1, #0
 801472a:	5659      	ldrsb	r1, [r3, r1]
 801472c:	183b      	adds	r3, r7, r0
 801472e:	7818      	ldrb	r0, [r3, #0]
 8014730:	4b31      	ldr	r3, [pc, #196]	; (80147f8 <RegionEU868TxConfig+0x1ac>)
 8014732:	9308      	str	r3, [sp, #32]
 8014734:	2300      	movs	r3, #0
 8014736:	9307      	str	r3, [sp, #28]
 8014738:	2300      	movs	r3, #0
 801473a:	9306      	str	r3, [sp, #24]
 801473c:	2300      	movs	r3, #0
 801473e:	9305      	str	r3, [sp, #20]
 8014740:	2301      	movs	r3, #1
 8014742:	9304      	str	r3, [sp, #16]
 8014744:	2300      	movs	r3, #0
 8014746:	9303      	str	r3, [sp, #12]
 8014748:	2305      	movs	r3, #5
 801474a:	9302      	str	r3, [sp, #8]
 801474c:	2300      	movs	r3, #0
 801474e:	9301      	str	r3, [sp, #4]
 8014750:	9500      	str	r5, [sp, #0]
 8014752:	0013      	movs	r3, r2
 8014754:	0032      	movs	r2, r6
 8014756:	47a0      	blx	r4
 8014758:	e024      	b.n	80147a4 <RegionEU868TxConfig+0x158>
    }
    else
    {
        modem = MODEM_LORA;
 801475a:	201f      	movs	r0, #31
 801475c:	183b      	adds	r3, r7, r0
 801475e:	2201      	movs	r2, #1
 8014760:	701a      	strb	r2, [r3, #0]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 3000 );
 8014762:	4b23      	ldr	r3, [pc, #140]	; (80147f0 <RegionEU868TxConfig+0x1a4>)
 8014764:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8014766:	231e      	movs	r3, #30
 8014768:	18fb      	adds	r3, r7, r3
 801476a:	781b      	ldrb	r3, [r3, #0]
 801476c:	b25b      	sxtb	r3, r3
 801476e:	69bd      	ldr	r5, [r7, #24]
 8014770:	2217      	movs	r2, #23
 8014772:	18ba      	adds	r2, r7, r2
 8014774:	2100      	movs	r1, #0
 8014776:	5651      	ldrsb	r1, [r2, r1]
 8014778:	183a      	adds	r2, r7, r0
 801477a:	7810      	ldrb	r0, [r2, #0]
 801477c:	4a1e      	ldr	r2, [pc, #120]	; (80147f8 <RegionEU868TxConfig+0x1ac>)
 801477e:	9208      	str	r2, [sp, #32]
 8014780:	2200      	movs	r2, #0
 8014782:	9207      	str	r2, [sp, #28]
 8014784:	2200      	movs	r2, #0
 8014786:	9206      	str	r2, [sp, #24]
 8014788:	2200      	movs	r2, #0
 801478a:	9205      	str	r2, [sp, #20]
 801478c:	2201      	movs	r2, #1
 801478e:	9204      	str	r2, [sp, #16]
 8014790:	2200      	movs	r2, #0
 8014792:	9203      	str	r2, [sp, #12]
 8014794:	2208      	movs	r2, #8
 8014796:	9202      	str	r2, [sp, #8]
 8014798:	2201      	movs	r2, #1
 801479a:	9201      	str	r2, [sp, #4]
 801479c:	9300      	str	r3, [sp, #0]
 801479e:	002b      	movs	r3, r5
 80147a0:	2200      	movs	r2, #0
 80147a2:	47a0      	blx	r4
    }
    TVL1( PRINTF( "TX on freq %d Hz at DR %d\n\r", NvmCtx.Channels[txConfig->Channel].Frequency, txConfig->Datarate );)

    // Setup maximum payload lenght of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 80147a4:	4b12      	ldr	r3, [pc, #72]	; (80147f0 <RegionEU868TxConfig+0x1a4>)
 80147a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80147a8:	68fa      	ldr	r2, [r7, #12]
 80147aa:	8992      	ldrh	r2, [r2, #12]
 80147ac:	b2d1      	uxtb	r1, r2
 80147ae:	241f      	movs	r4, #31
 80147b0:	193a      	adds	r2, r7, r4
 80147b2:	7812      	ldrb	r2, [r2, #0]
 80147b4:	0010      	movs	r0, r2
 80147b6:	4798      	blx	r3
    // Get the time-on-air of the next tx frame
    *txTimeOnAir = Radio.TimeOnAir( modem, txConfig->PktLen );
 80147b8:	4b0d      	ldr	r3, [pc, #52]	; (80147f0 <RegionEU868TxConfig+0x1a4>)
 80147ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80147bc:	68fa      	ldr	r2, [r7, #12]
 80147be:	8992      	ldrh	r2, [r2, #12]
 80147c0:	b2d1      	uxtb	r1, r2
 80147c2:	193a      	adds	r2, r7, r4
 80147c4:	7812      	ldrb	r2, [r2, #0]
 80147c6:	0010      	movs	r0, r2
 80147c8:	4798      	blx	r3
 80147ca:	0002      	movs	r2, r0
 80147cc:	687b      	ldr	r3, [r7, #4]
 80147ce:	601a      	str	r2, [r3, #0]

    *txPower = txPowerLimited;
 80147d0:	68bb      	ldr	r3, [r7, #8]
 80147d2:	221d      	movs	r2, #29
 80147d4:	18ba      	adds	r2, r7, r2
 80147d6:	7812      	ldrb	r2, [r2, #0]
 80147d8:	701a      	strb	r2, [r3, #0]
    return true;
 80147da:	2301      	movs	r3, #1
}
 80147dc:	0018      	movs	r0, r3
 80147de:	46bd      	mov	sp, r7
 80147e0:	b009      	add	sp, #36	; 0x24
 80147e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80147e4:	08020b20 	.word	0x08020b20
 80147e8:	20000f40 	.word	0x20000f40
 80147ec:	20001050 	.word	0x20001050
 80147f0:	08020c58 	.word	0x08020c58
 80147f4:	000061a8 	.word	0x000061a8
 80147f8:	00000bb8 	.word	0x00000bb8

080147fc <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 80147fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80147fe:	b093      	sub	sp, #76	; 0x4c
 8014800:	af00      	add	r7, sp, #0
 8014802:	60f8      	str	r0, [r7, #12]
 8014804:	60b9      	str	r1, [r7, #8]
 8014806:	607a      	str	r2, [r7, #4]
 8014808:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 801480a:	2347      	movs	r3, #71	; 0x47
 801480c:	18fb      	adds	r3, r7, r3
 801480e:	2207      	movs	r2, #7
 8014810:	701a      	strb	r2, [r3, #0]
    RegionCommonLinkAdrParams_t linkAdrParams;
    uint8_t nextIndex = 0;
 8014812:	2344      	movs	r3, #68	; 0x44
 8014814:	18fb      	adds	r3, r7, r3
 8014816:	2200      	movs	r2, #0
 8014818:	701a      	strb	r2, [r3, #0]
    uint8_t bytesProcessed = 0;
 801481a:	2346      	movs	r3, #70	; 0x46
 801481c:	18fb      	adds	r3, r7, r3
 801481e:	2200      	movs	r2, #0
 8014820:	701a      	strb	r2, [r3, #0]
    uint16_t chMask = 0;
 8014822:	233a      	movs	r3, #58	; 0x3a
 8014824:	18fb      	adds	r3, r7, r3
 8014826:	2200      	movs	r2, #0
 8014828:	801a      	strh	r2, [r3, #0]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 801482a:	e09e      	b.n	801496a <RegionEU868LinkAdrReq+0x16e>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 801482c:	68fb      	ldr	r3, [r7, #12]
 801482e:	685a      	ldr	r2, [r3, #4]
 8014830:	2346      	movs	r3, #70	; 0x46
 8014832:	18fb      	adds	r3, r7, r3
 8014834:	781b      	ldrb	r3, [r3, #0]
 8014836:	18d3      	adds	r3, r2, r3
 8014838:	2544      	movs	r5, #68	; 0x44
 801483a:	197c      	adds	r4, r7, r5
 801483c:	223c      	movs	r2, #60	; 0x3c
 801483e:	18ba      	adds	r2, r7, r2
 8014840:	0011      	movs	r1, r2
 8014842:	0018      	movs	r0, r3
 8014844:	f7fe fea0 	bl	8013588 <RegionCommonParseLinkAdrReq>
 8014848:	0003      	movs	r3, r0
 801484a:	7023      	strb	r3, [r4, #0]

        if( nextIndex == 0 )
 801484c:	197b      	adds	r3, r7, r5
 801484e:	781b      	ldrb	r3, [r3, #0]
 8014850:	2b00      	cmp	r3, #0
 8014852:	d100      	bne.n	8014856 <RegionEU868LinkAdrReq+0x5a>
 8014854:	e092      	b.n	801497c <RegionEU868LinkAdrReq+0x180>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 8014856:	2246      	movs	r2, #70	; 0x46
 8014858:	18bb      	adds	r3, r7, r2
 801485a:	18b9      	adds	r1, r7, r2
 801485c:	2244      	movs	r2, #68	; 0x44
 801485e:	18ba      	adds	r2, r7, r2
 8014860:	7809      	ldrb	r1, [r1, #0]
 8014862:	7812      	ldrb	r2, [r2, #0]
 8014864:	188a      	adds	r2, r1, r2
 8014866:	701a      	strb	r2, [r3, #0]

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 8014868:	2347      	movs	r3, #71	; 0x47
 801486a:	18fb      	adds	r3, r7, r3
 801486c:	2207      	movs	r2, #7
 801486e:	701a      	strb	r2, [r3, #0]

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 8014870:	213c      	movs	r1, #60	; 0x3c
 8014872:	187b      	adds	r3, r7, r1
 8014874:	889a      	ldrh	r2, [r3, #4]
 8014876:	233a      	movs	r3, #58	; 0x3a
 8014878:	18fb      	adds	r3, r7, r3
 801487a:	801a      	strh	r2, [r3, #0]

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 801487c:	187b      	adds	r3, r7, r1
 801487e:	78db      	ldrb	r3, [r3, #3]
 8014880:	2b00      	cmp	r3, #0
 8014882:	d10c      	bne.n	801489e <RegionEU868LinkAdrReq+0xa2>
 8014884:	233a      	movs	r3, #58	; 0x3a
 8014886:	18fb      	adds	r3, r7, r3
 8014888:	881b      	ldrh	r3, [r3, #0]
 801488a:	2b00      	cmp	r3, #0
 801488c:	d107      	bne.n	801489e <RegionEU868LinkAdrReq+0xa2>
        {
            status &= 0xFE; // Channel mask KO
 801488e:	2247      	movs	r2, #71	; 0x47
 8014890:	18bb      	adds	r3, r7, r2
 8014892:	18ba      	adds	r2, r7, r2
 8014894:	7812      	ldrb	r2, [r2, #0]
 8014896:	2101      	movs	r1, #1
 8014898:	438a      	bics	r2, r1
 801489a:	701a      	strb	r2, [r3, #0]
 801489c:	e065      	b.n	801496a <RegionEU868LinkAdrReq+0x16e>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 801489e:	233c      	movs	r3, #60	; 0x3c
 80148a0:	18fb      	adds	r3, r7, r3
 80148a2:	78db      	ldrb	r3, [r3, #3]
 80148a4:	2b00      	cmp	r3, #0
 80148a6:	d004      	beq.n	80148b2 <RegionEU868LinkAdrReq+0xb6>
 80148a8:	233c      	movs	r3, #60	; 0x3c
 80148aa:	18fb      	adds	r3, r7, r3
 80148ac:	78db      	ldrb	r3, [r3, #3]
 80148ae:	2b05      	cmp	r3, #5
 80148b0:	d904      	bls.n	80148bc <RegionEU868LinkAdrReq+0xc0>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 80148b2:	233c      	movs	r3, #60	; 0x3c
 80148b4:	18fb      	adds	r3, r7, r3
 80148b6:	78db      	ldrb	r3, [r3, #3]
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 80148b8:	2b06      	cmp	r3, #6
 80148ba:	d907      	bls.n	80148cc <RegionEU868LinkAdrReq+0xd0>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 80148bc:	2247      	movs	r2, #71	; 0x47
 80148be:	18bb      	adds	r3, r7, r2
 80148c0:	18ba      	adds	r2, r7, r2
 80148c2:	7812      	ldrb	r2, [r2, #0]
 80148c4:	2101      	movs	r1, #1
 80148c6:	438a      	bics	r2, r1
 80148c8:	701a      	strb	r2, [r3, #0]
 80148ca:	e04e      	b.n	801496a <RegionEU868LinkAdrReq+0x16e>
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 80148cc:	2345      	movs	r3, #69	; 0x45
 80148ce:	18fb      	adds	r3, r7, r3
 80148d0:	2200      	movs	r2, #0
 80148d2:	701a      	strb	r2, [r3, #0]
 80148d4:	e044      	b.n	8014960 <RegionEU868LinkAdrReq+0x164>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 80148d6:	233c      	movs	r3, #60	; 0x3c
 80148d8:	18fb      	adds	r3, r7, r3
 80148da:	78db      	ldrb	r3, [r3, #3]
 80148dc:	2b06      	cmp	r3, #6
 80148de:	d11b      	bne.n	8014918 <RegionEU868LinkAdrReq+0x11c>
                {
                    if( NvmCtx.Channels[i].Frequency != 0 )
 80148e0:	2345      	movs	r3, #69	; 0x45
 80148e2:	18fb      	adds	r3, r7, r3
 80148e4:	781a      	ldrb	r2, [r3, #0]
 80148e6:	496e      	ldr	r1, [pc, #440]	; (8014aa0 <RegionEU868LinkAdrReq+0x2a4>)
 80148e8:	0013      	movs	r3, r2
 80148ea:	005b      	lsls	r3, r3, #1
 80148ec:	189b      	adds	r3, r3, r2
 80148ee:	009b      	lsls	r3, r3, #2
 80148f0:	585b      	ldr	r3, [r3, r1]
 80148f2:	2b00      	cmp	r3, #0
 80148f4:	d02e      	beq.n	8014954 <RegionEU868LinkAdrReq+0x158>
                    {
                        chMask |= 1 << i;
 80148f6:	2345      	movs	r3, #69	; 0x45
 80148f8:	18fb      	adds	r3, r7, r3
 80148fa:	781b      	ldrb	r3, [r3, #0]
 80148fc:	2201      	movs	r2, #1
 80148fe:	409a      	lsls	r2, r3
 8014900:	0013      	movs	r3, r2
 8014902:	b21a      	sxth	r2, r3
 8014904:	213a      	movs	r1, #58	; 0x3a
 8014906:	187b      	adds	r3, r7, r1
 8014908:	881b      	ldrh	r3, [r3, #0]
 801490a:	b21b      	sxth	r3, r3
 801490c:	4313      	orrs	r3, r2
 801490e:	b21b      	sxth	r3, r3
 8014910:	b29a      	uxth	r2, r3
 8014912:	187b      	adds	r3, r7, r1
 8014914:	801a      	strh	r2, [r3, #0]
 8014916:	e01d      	b.n	8014954 <RegionEU868LinkAdrReq+0x158>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8014918:	233a      	movs	r3, #58	; 0x3a
 801491a:	18fb      	adds	r3, r7, r3
 801491c:	881b      	ldrh	r3, [r3, #0]
 801491e:	001a      	movs	r2, r3
 8014920:	2345      	movs	r3, #69	; 0x45
 8014922:	18fb      	adds	r3, r7, r3
 8014924:	781b      	ldrb	r3, [r3, #0]
 8014926:	411a      	asrs	r2, r3
 8014928:	0013      	movs	r3, r2
 801492a:	2201      	movs	r2, #1
 801492c:	4013      	ands	r3, r2
 801492e:	d011      	beq.n	8014954 <RegionEU868LinkAdrReq+0x158>
                        ( NvmCtx.Channels[i].Frequency == 0 ) )
 8014930:	2345      	movs	r3, #69	; 0x45
 8014932:	18fb      	adds	r3, r7, r3
 8014934:	781a      	ldrb	r2, [r3, #0]
 8014936:	495a      	ldr	r1, [pc, #360]	; (8014aa0 <RegionEU868LinkAdrReq+0x2a4>)
 8014938:	0013      	movs	r3, r2
 801493a:	005b      	lsls	r3, r3, #1
 801493c:	189b      	adds	r3, r3, r2
 801493e:	009b      	lsls	r3, r3, #2
 8014940:	585b      	ldr	r3, [r3, r1]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8014942:	2b00      	cmp	r3, #0
 8014944:	d106      	bne.n	8014954 <RegionEU868LinkAdrReq+0x158>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 8014946:	2247      	movs	r2, #71	; 0x47
 8014948:	18bb      	adds	r3, r7, r2
 801494a:	18ba      	adds	r2, r7, r2
 801494c:	7812      	ldrb	r2, [r2, #0]
 801494e:	2101      	movs	r1, #1
 8014950:	438a      	bics	r2, r1
 8014952:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8014954:	2145      	movs	r1, #69	; 0x45
 8014956:	187b      	adds	r3, r7, r1
 8014958:	781a      	ldrb	r2, [r3, #0]
 801495a:	187b      	adds	r3, r7, r1
 801495c:	3201      	adds	r2, #1
 801495e:	701a      	strb	r2, [r3, #0]
 8014960:	2345      	movs	r3, #69	; 0x45
 8014962:	18fb      	adds	r3, r7, r3
 8014964:	781b      	ldrb	r3, [r3, #0]
 8014966:	2b0f      	cmp	r3, #15
 8014968:	d9b5      	bls.n	80148d6 <RegionEU868LinkAdrReq+0xda>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 801496a:	68fb      	ldr	r3, [r7, #12]
 801496c:	7a1b      	ldrb	r3, [r3, #8]
 801496e:	2246      	movs	r2, #70	; 0x46
 8014970:	18ba      	adds	r2, r7, r2
 8014972:	7812      	ldrb	r2, [r2, #0]
 8014974:	429a      	cmp	r2, r3
 8014976:	d200      	bcs.n	801497a <RegionEU868LinkAdrReq+0x17e>
 8014978:	e758      	b.n	801482c <RegionEU868LinkAdrReq+0x30>
 801497a:	e000      	b.n	801497e <RegionEU868LinkAdrReq+0x182>
            break; // break loop, since no more request has been found
 801497c:	46c0      	nop			; (mov r8, r8)
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 801497e:	2134      	movs	r1, #52	; 0x34
 8014980:	187b      	adds	r3, r7, r1
 8014982:	2201      	movs	r2, #1
 8014984:	701a      	strb	r2, [r3, #0]
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 8014986:	68fb      	ldr	r3, [r7, #12]
 8014988:	7a5a      	ldrb	r2, [r3, #9]
 801498a:	187b      	adds	r3, r7, r1
 801498c:	709a      	strb	r2, [r3, #2]
    phyParam = RegionEU868GetPhyParam( &getPhy );
 801498e:	187b      	adds	r3, r7, r1
 8014990:	0018      	movs	r0, r3
 8014992:	f7ff fa53 	bl	8013e3c <RegionEU868GetPhyParam>
 8014996:	0003      	movs	r3, r0
 8014998:	001a      	movs	r2, r3
 801499a:	2030      	movs	r0, #48	; 0x30
 801499c:	183b      	adds	r3, r7, r0
 801499e:	601a      	str	r2, [r3, #0]

    linkAdrVerifyParams.Status = status;
 80149a0:	2110      	movs	r1, #16
 80149a2:	187b      	adds	r3, r7, r1
 80149a4:	2447      	movs	r4, #71	; 0x47
 80149a6:	193a      	adds	r2, r7, r4
 80149a8:	7812      	ldrb	r2, [r2, #0]
 80149aa:	711a      	strb	r2, [r3, #4]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 80149ac:	68fb      	ldr	r3, [r7, #12]
 80149ae:	7a9a      	ldrb	r2, [r3, #10]
 80149b0:	187b      	adds	r3, r7, r1
 80149b2:	715a      	strb	r2, [r3, #5]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 80149b4:	253c      	movs	r5, #60	; 0x3c
 80149b6:	197b      	adds	r3, r7, r5
 80149b8:	2201      	movs	r2, #1
 80149ba:	569a      	ldrsb	r2, [r3, r2]
 80149bc:	187b      	adds	r3, r7, r1
 80149be:	719a      	strb	r2, [r3, #6]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 80149c0:	197b      	adds	r3, r7, r5
 80149c2:	2202      	movs	r2, #2
 80149c4:	569a      	ldrsb	r2, [r3, r2]
 80149c6:	187b      	adds	r3, r7, r1
 80149c8:	71da      	strb	r2, [r3, #7]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 80149ca:	197b      	adds	r3, r7, r5
 80149cc:	781a      	ldrb	r2, [r3, #0]
 80149ce:	187b      	adds	r3, r7, r1
 80149d0:	721a      	strb	r2, [r3, #8]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 80149d2:	68fb      	ldr	r3, [r7, #12]
 80149d4:	220b      	movs	r2, #11
 80149d6:	569a      	ldrsb	r2, [r3, r2]
 80149d8:	187b      	adds	r3, r7, r1
 80149da:	725a      	strb	r2, [r3, #9]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 80149dc:	68fb      	ldr	r3, [r7, #12]
 80149de:	220c      	movs	r2, #12
 80149e0:	569a      	ldrsb	r2, [r3, r2]
 80149e2:	187b      	adds	r3, r7, r1
 80149e4:	729a      	strb	r2, [r3, #10]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 80149e6:	68fb      	ldr	r3, [r7, #12]
 80149e8:	7b5b      	ldrb	r3, [r3, #13]
 80149ea:	b25a      	sxtb	r2, r3
 80149ec:	187b      	adds	r3, r7, r1
 80149ee:	72da      	strb	r2, [r3, #11]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 80149f0:	187b      	adds	r3, r7, r1
 80149f2:	2210      	movs	r2, #16
 80149f4:	731a      	strb	r2, [r3, #12]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 80149f6:	187b      	adds	r3, r7, r1
 80149f8:	223a      	movs	r2, #58	; 0x3a
 80149fa:	18ba      	adds	r2, r7, r2
 80149fc:	611a      	str	r2, [r3, #16]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 80149fe:	183b      	adds	r3, r7, r0
 8014a00:	681b      	ldr	r3, [r3, #0]
 8014a02:	b25a      	sxtb	r2, r3
 8014a04:	0008      	movs	r0, r1
 8014a06:	183b      	adds	r3, r7, r0
 8014a08:	751a      	strb	r2, [r3, #20]
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 8014a0a:	183b      	adds	r3, r7, r0
 8014a0c:	2207      	movs	r2, #7
 8014a0e:	755a      	strb	r2, [r3, #21]
    linkAdrVerifyParams.Channels = NvmCtx.Channels;
 8014a10:	183b      	adds	r3, r7, r0
 8014a12:	4a23      	ldr	r2, [pc, #140]	; (8014aa0 <RegionEU868LinkAdrReq+0x2a4>)
 8014a14:	619a      	str	r2, [r3, #24]
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 8014a16:	183b      	adds	r3, r7, r0
 8014a18:	2207      	movs	r2, #7
 8014a1a:	771a      	strb	r2, [r3, #28]
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 8014a1c:	183b      	adds	r3, r7, r0
 8014a1e:	2200      	movs	r2, #0
 8014a20:	775a      	strb	r2, [r3, #29]
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 8014a22:	183b      	adds	r3, r7, r0
 8014a24:	68fa      	ldr	r2, [r7, #12]
 8014a26:	6812      	ldr	r2, [r2, #0]
 8014a28:	601a      	str	r2, [r3, #0]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8014a2a:	0026      	movs	r6, r4
 8014a2c:	193c      	adds	r4, r7, r4
 8014a2e:	0029      	movs	r1, r5
 8014a30:	187d      	adds	r5, r7, r1
 8014a32:	187b      	adds	r3, r7, r1
 8014a34:	1c9a      	adds	r2, r3, #2
 8014a36:	187b      	adds	r3, r7, r1
 8014a38:	1c59      	adds	r1, r3, #1
 8014a3a:	1838      	adds	r0, r7, r0
 8014a3c:	002b      	movs	r3, r5
 8014a3e:	f7fe fdf9 	bl	8013634 <RegionCommonLinkAdrReqVerifyParams>
 8014a42:	0003      	movs	r3, r0
 8014a44:	7023      	strb	r3, [r4, #0]

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8014a46:	0034      	movs	r4, r6
 8014a48:	193b      	adds	r3, r7, r4
 8014a4a:	781b      	ldrb	r3, [r3, #0]
 8014a4c:	2b07      	cmp	r3, #7
 8014a4e:	d10c      	bne.n	8014a6a <RegionEU868LinkAdrReq+0x26e>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) NvmCtx.ChannelsMask, 0, sizeof( NvmCtx.ChannelsMask ) );
 8014a50:	4b14      	ldr	r3, [pc, #80]	; (8014aa4 <RegionEU868LinkAdrReq+0x2a8>)
 8014a52:	2202      	movs	r2, #2
 8014a54:	2100      	movs	r1, #0
 8014a56:	0018      	movs	r0, r3
 8014a58:	f000 fe7e 	bl	8015758 <memset1>
        // Update the channels mask
        NvmCtx.ChannelsMask[0] = chMask;
 8014a5c:	233a      	movs	r3, #58	; 0x3a
 8014a5e:	18fb      	adds	r3, r7, r3
 8014a60:	8819      	ldrh	r1, [r3, #0]
 8014a62:	4a0f      	ldr	r2, [pc, #60]	; (8014aa0 <RegionEU868LinkAdrReq+0x2a4>)
 8014a64:	2388      	movs	r3, #136	; 0x88
 8014a66:	005b      	lsls	r3, r3, #1
 8014a68:	52d1      	strh	r1, [r2, r3]
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 8014a6a:	213c      	movs	r1, #60	; 0x3c
 8014a6c:	187b      	adds	r3, r7, r1
 8014a6e:	2201      	movs	r2, #1
 8014a70:	569a      	ldrsb	r2, [r3, r2]
 8014a72:	68bb      	ldr	r3, [r7, #8]
 8014a74:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 8014a76:	187b      	adds	r3, r7, r1
 8014a78:	2202      	movs	r2, #2
 8014a7a:	569a      	ldrsb	r2, [r3, r2]
 8014a7c:	687b      	ldr	r3, [r7, #4]
 8014a7e:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 8014a80:	187b      	adds	r3, r7, r1
 8014a82:	781a      	ldrb	r2, [r3, #0]
 8014a84:	683b      	ldr	r3, [r7, #0]
 8014a86:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 8014a88:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014a8a:	2246      	movs	r2, #70	; 0x46
 8014a8c:	18ba      	adds	r2, r7, r2
 8014a8e:	7812      	ldrb	r2, [r2, #0]
 8014a90:	701a      	strb	r2, [r3, #0]

    return status;
 8014a92:	2347      	movs	r3, #71	; 0x47
 8014a94:	18fb      	adds	r3, r7, r3
 8014a96:	781b      	ldrb	r3, [r3, #0]
}
 8014a98:	0018      	movs	r0, r3
 8014a9a:	46bd      	mov	sp, r7
 8014a9c:	b013      	add	sp, #76	; 0x4c
 8014a9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014aa0:	20000f40 	.word	0x20000f40
 8014aa4:	20001050 	.word	0x20001050

08014aa8 <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8014aa8:	b580      	push	{r7, lr}
 8014aaa:	b084      	sub	sp, #16
 8014aac:	af00      	add	r7, sp, #0
 8014aae:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 8014ab0:	230f      	movs	r3, #15
 8014ab2:	18fb      	adds	r3, r7, r3
 8014ab4:	2207      	movs	r2, #7
 8014ab6:	701a      	strb	r2, [r3, #0]
    uint8_t band = 0;
 8014ab8:	210e      	movs	r1, #14
 8014aba:	187b      	adds	r3, r7, r1
 8014abc:	2200      	movs	r2, #0
 8014abe:	701a      	strb	r2, [r3, #0]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 8014ac0:	687b      	ldr	r3, [r7, #4]
 8014ac2:	685b      	ldr	r3, [r3, #4]
 8014ac4:	187a      	adds	r2, r7, r1
 8014ac6:	0011      	movs	r1, r2
 8014ac8:	0018      	movs	r0, r3
 8014aca:	f7ff f859 	bl	8013b80 <VerifyRfFreq>
 8014ace:	0003      	movs	r3, r0
 8014ad0:	001a      	movs	r2, r3
 8014ad2:	2301      	movs	r3, #1
 8014ad4:	4053      	eors	r3, r2
 8014ad6:	b2db      	uxtb	r3, r3
 8014ad8:	2b00      	cmp	r3, #0
 8014ada:	d006      	beq.n	8014aea <RegionEU868RxParamSetupReq+0x42>
    {
        status &= 0xFE; // Channel frequency KO
 8014adc:	220f      	movs	r2, #15
 8014ade:	18bb      	adds	r3, r7, r2
 8014ae0:	18ba      	adds	r2, r7, r2
 8014ae2:	7812      	ldrb	r2, [r2, #0]
 8014ae4:	2101      	movs	r1, #1
 8014ae6:	438a      	bics	r2, r1
 8014ae8:	701a      	strb	r2, [r3, #0]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 8014aea:	687b      	ldr	r3, [r7, #4]
 8014aec:	781b      	ldrb	r3, [r3, #0]
 8014aee:	b25b      	sxtb	r3, r3
 8014af0:	2207      	movs	r2, #7
 8014af2:	2100      	movs	r1, #0
 8014af4:	0018      	movs	r0, r3
 8014af6:	f7fe fb5f 	bl	80131b8 <RegionCommonValueInRange>
 8014afa:	1e03      	subs	r3, r0, #0
 8014afc:	d106      	bne.n	8014b0c <RegionEU868RxParamSetupReq+0x64>
    {
        status &= 0xFD; // Datarate KO
 8014afe:	220f      	movs	r2, #15
 8014b00:	18bb      	adds	r3, r7, r2
 8014b02:	18ba      	adds	r2, r7, r2
 8014b04:	7812      	ldrb	r2, [r2, #0]
 8014b06:	2102      	movs	r1, #2
 8014b08:	438a      	bics	r2, r1
 8014b0a:	701a      	strb	r2, [r3, #0]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 8014b0c:	687b      	ldr	r3, [r7, #4]
 8014b0e:	785b      	ldrb	r3, [r3, #1]
 8014b10:	b25b      	sxtb	r3, r3
 8014b12:	2205      	movs	r2, #5
 8014b14:	2100      	movs	r1, #0
 8014b16:	0018      	movs	r0, r3
 8014b18:	f7fe fb4e 	bl	80131b8 <RegionCommonValueInRange>
 8014b1c:	1e03      	subs	r3, r0, #0
 8014b1e:	d106      	bne.n	8014b2e <RegionEU868RxParamSetupReq+0x86>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 8014b20:	220f      	movs	r2, #15
 8014b22:	18bb      	adds	r3, r7, r2
 8014b24:	18ba      	adds	r2, r7, r2
 8014b26:	7812      	ldrb	r2, [r2, #0]
 8014b28:	2104      	movs	r1, #4
 8014b2a:	438a      	bics	r2, r1
 8014b2c:	701a      	strb	r2, [r3, #0]
    }

    return status;
 8014b2e:	230f      	movs	r3, #15
 8014b30:	18fb      	adds	r3, r7, r3
 8014b32:	781b      	ldrb	r3, [r3, #0]
}
 8014b34:	0018      	movs	r0, r3
 8014b36:	46bd      	mov	sp, r7
 8014b38:	b004      	add	sp, #16
 8014b3a:	bd80      	pop	{r7, pc}

08014b3c <RegionEU868NewChannelReq>:

uint8_t RegionEU868NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 8014b3c:	b580      	push	{r7, lr}
 8014b3e:	b086      	sub	sp, #24
 8014b40:	af00      	add	r7, sp, #0
 8014b42:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8014b44:	2317      	movs	r3, #23
 8014b46:	18fb      	adds	r3, r7, r3
 8014b48:	2203      	movs	r2, #3
 8014b4a:	701a      	strb	r2, [r3, #0]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 8014b4c:	687b      	ldr	r3, [r7, #4]
 8014b4e:	681b      	ldr	r3, [r3, #0]
 8014b50:	681b      	ldr	r3, [r3, #0]
 8014b52:	2b00      	cmp	r3, #0
 8014b54:	d119      	bne.n	8014b8a <RegionEU868NewChannelReq+0x4e>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 8014b56:	687b      	ldr	r3, [r7, #4]
 8014b58:	791b      	ldrb	r3, [r3, #4]
 8014b5a:	b25b      	sxtb	r3, r3
 8014b5c:	b2da      	uxtb	r2, r3
 8014b5e:	2108      	movs	r1, #8
 8014b60:	187b      	adds	r3, r7, r1
 8014b62:	701a      	strb	r2, [r3, #0]

        // Remove
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 8014b64:	187b      	adds	r3, r7, r1
 8014b66:	0018      	movs	r0, r3
 8014b68:	f000 fa56 	bl	8015018 <RegionEU868ChannelsRemove>
 8014b6c:	0003      	movs	r3, r0
 8014b6e:	001a      	movs	r2, r3
 8014b70:	2301      	movs	r3, #1
 8014b72:	4053      	eors	r3, r2
 8014b74:	b2db      	uxtb	r3, r3
 8014b76:	2b00      	cmp	r3, #0
 8014b78:	d043      	beq.n	8014c02 <RegionEU868NewChannelReq+0xc6>
        {
            status &= 0xFC;
 8014b7a:	2217      	movs	r2, #23
 8014b7c:	18bb      	adds	r3, r7, r2
 8014b7e:	18ba      	adds	r2, r7, r2
 8014b80:	7812      	ldrb	r2, [r2, #0]
 8014b82:	2103      	movs	r1, #3
 8014b84:	438a      	bics	r2, r1
 8014b86:	701a      	strb	r2, [r3, #0]
 8014b88:	e03b      	b.n	8014c02 <RegionEU868NewChannelReq+0xc6>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 8014b8a:	687b      	ldr	r3, [r7, #4]
 8014b8c:	681a      	ldr	r2, [r3, #0]
 8014b8e:	210c      	movs	r1, #12
 8014b90:	187b      	adds	r3, r7, r1
 8014b92:	601a      	str	r2, [r3, #0]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 8014b94:	687b      	ldr	r3, [r7, #4]
 8014b96:	791b      	ldrb	r3, [r3, #4]
 8014b98:	b25b      	sxtb	r3, r3
 8014b9a:	b2da      	uxtb	r2, r3
 8014b9c:	187b      	adds	r3, r7, r1
 8014b9e:	711a      	strb	r2, [r3, #4]

        switch( RegionEU868ChannelAdd( &channelAdd ) )
 8014ba0:	187b      	adds	r3, r7, r1
 8014ba2:	0018      	movs	r0, r3
 8014ba4:	f000 f974 	bl	8014e90 <RegionEU868ChannelAdd>
 8014ba8:	0003      	movs	r3, r0
 8014baa:	2b04      	cmp	r3, #4
 8014bac:	d008      	beq.n	8014bc0 <RegionEU868NewChannelReq+0x84>
 8014bae:	dc02      	bgt.n	8014bb6 <RegionEU868NewChannelReq+0x7a>
 8014bb0:	2b00      	cmp	r3, #0
 8014bb2:	d025      	beq.n	8014c00 <RegionEU868NewChannelReq+0xc4>
 8014bb4:	e01c      	b.n	8014bf0 <RegionEU868NewChannelReq+0xb4>
 8014bb6:	2b05      	cmp	r3, #5
 8014bb8:	d00a      	beq.n	8014bd0 <RegionEU868NewChannelReq+0x94>
 8014bba:	2b06      	cmp	r3, #6
 8014bbc:	d010      	beq.n	8014be0 <RegionEU868NewChannelReq+0xa4>
 8014bbe:	e017      	b.n	8014bf0 <RegionEU868NewChannelReq+0xb4>
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 8014bc0:	2217      	movs	r2, #23
 8014bc2:	18bb      	adds	r3, r7, r2
 8014bc4:	18ba      	adds	r2, r7, r2
 8014bc6:	7812      	ldrb	r2, [r2, #0]
 8014bc8:	2101      	movs	r1, #1
 8014bca:	438a      	bics	r2, r1
 8014bcc:	701a      	strb	r2, [r3, #0]
                break;
 8014bce:	e018      	b.n	8014c02 <RegionEU868NewChannelReq+0xc6>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 8014bd0:	2217      	movs	r2, #23
 8014bd2:	18bb      	adds	r3, r7, r2
 8014bd4:	18ba      	adds	r2, r7, r2
 8014bd6:	7812      	ldrb	r2, [r2, #0]
 8014bd8:	2102      	movs	r1, #2
 8014bda:	438a      	bics	r2, r1
 8014bdc:	701a      	strb	r2, [r3, #0]
                break;
 8014bde:	e010      	b.n	8014c02 <RegionEU868NewChannelReq+0xc6>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 8014be0:	2217      	movs	r2, #23
 8014be2:	18bb      	adds	r3, r7, r2
 8014be4:	18ba      	adds	r2, r7, r2
 8014be6:	7812      	ldrb	r2, [r2, #0]
 8014be8:	2103      	movs	r1, #3
 8014bea:	438a      	bics	r2, r1
 8014bec:	701a      	strb	r2, [r3, #0]
                break;
 8014bee:	e008      	b.n	8014c02 <RegionEU868NewChannelReq+0xc6>
            }
            default:
            {
                status &= 0xFC;
 8014bf0:	2217      	movs	r2, #23
 8014bf2:	18bb      	adds	r3, r7, r2
 8014bf4:	18ba      	adds	r2, r7, r2
 8014bf6:	7812      	ldrb	r2, [r2, #0]
 8014bf8:	2103      	movs	r1, #3
 8014bfa:	438a      	bics	r2, r1
 8014bfc:	701a      	strb	r2, [r3, #0]
                break;
 8014bfe:	e000      	b.n	8014c02 <RegionEU868NewChannelReq+0xc6>
                break;
 8014c00:	46c0      	nop			; (mov r8, r8)
            }
        }
    }

    return status;
 8014c02:	2317      	movs	r3, #23
 8014c04:	18fb      	adds	r3, r7, r3
 8014c06:	781b      	ldrb	r3, [r3, #0]
}
 8014c08:	0018      	movs	r0, r3
 8014c0a:	46bd      	mov	sp, r7
 8014c0c:	b006      	add	sp, #24
 8014c0e:	bd80      	pop	{r7, pc}

08014c10 <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 8014c10:	b580      	push	{r7, lr}
 8014c12:	b082      	sub	sp, #8
 8014c14:	af00      	add	r7, sp, #0
 8014c16:	6078      	str	r0, [r7, #4]
    return -1;
 8014c18:	2301      	movs	r3, #1
 8014c1a:	425b      	negs	r3, r3
}
 8014c1c:	0018      	movs	r0, r3
 8014c1e:	46bd      	mov	sp, r7
 8014c20:	b002      	add	sp, #8
 8014c22:	bd80      	pop	{r7, pc}

08014c24 <RegionEU868DlChannelReq>:

uint8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 8014c24:	b580      	push	{r7, lr}
 8014c26:	b084      	sub	sp, #16
 8014c28:	af00      	add	r7, sp, #0
 8014c2a:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8014c2c:	230f      	movs	r3, #15
 8014c2e:	18fb      	adds	r3, r7, r3
 8014c30:	2203      	movs	r2, #3
 8014c32:	701a      	strb	r2, [r3, #0]
    uint8_t band = 0;
 8014c34:	210e      	movs	r1, #14
 8014c36:	187b      	adds	r3, r7, r1
 8014c38:	2200      	movs	r2, #0
 8014c3a:	701a      	strb	r2, [r3, #0]

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 8014c3c:	687b      	ldr	r3, [r7, #4]
 8014c3e:	685b      	ldr	r3, [r3, #4]
 8014c40:	187a      	adds	r2, r7, r1
 8014c42:	0011      	movs	r1, r2
 8014c44:	0018      	movs	r0, r3
 8014c46:	f7fe ff9b 	bl	8013b80 <VerifyRfFreq>
 8014c4a:	0003      	movs	r3, r0
 8014c4c:	001a      	movs	r2, r3
 8014c4e:	2301      	movs	r3, #1
 8014c50:	4053      	eors	r3, r2
 8014c52:	b2db      	uxtb	r3, r3
 8014c54:	2b00      	cmp	r3, #0
 8014c56:	d006      	beq.n	8014c66 <RegionEU868DlChannelReq+0x42>
    {
        status &= 0xFE;
 8014c58:	220f      	movs	r2, #15
 8014c5a:	18bb      	adds	r3, r7, r2
 8014c5c:	18ba      	adds	r2, r7, r2
 8014c5e:	7812      	ldrb	r2, [r2, #0]
 8014c60:	2101      	movs	r1, #1
 8014c62:	438a      	bics	r2, r1
 8014c64:	701a      	strb	r2, [r3, #0]
    }

    // Verify if an uplink frequency exists
    if( NvmCtx.Channels[dlChannelReq->ChannelId].Frequency == 0 )
 8014c66:	687b      	ldr	r3, [r7, #4]
 8014c68:	781b      	ldrb	r3, [r3, #0]
 8014c6a:	0019      	movs	r1, r3
 8014c6c:	4a13      	ldr	r2, [pc, #76]	; (8014cbc <RegionEU868DlChannelReq+0x98>)
 8014c6e:	000b      	movs	r3, r1
 8014c70:	005b      	lsls	r3, r3, #1
 8014c72:	185b      	adds	r3, r3, r1
 8014c74:	009b      	lsls	r3, r3, #2
 8014c76:	589b      	ldr	r3, [r3, r2]
 8014c78:	2b00      	cmp	r3, #0
 8014c7a:	d106      	bne.n	8014c8a <RegionEU868DlChannelReq+0x66>
    {
        status &= 0xFD;
 8014c7c:	220f      	movs	r2, #15
 8014c7e:	18bb      	adds	r3, r7, r2
 8014c80:	18ba      	adds	r2, r7, r2
 8014c82:	7812      	ldrb	r2, [r2, #0]
 8014c84:	2102      	movs	r1, #2
 8014c86:	438a      	bics	r2, r1
 8014c88:	701a      	strb	r2, [r3, #0]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 8014c8a:	230f      	movs	r3, #15
 8014c8c:	18fb      	adds	r3, r7, r3
 8014c8e:	781b      	ldrb	r3, [r3, #0]
 8014c90:	2b03      	cmp	r3, #3
 8014c92:	d10c      	bne.n	8014cae <RegionEU868DlChannelReq+0x8a>
    {
        NvmCtx.Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 8014c94:	687b      	ldr	r3, [r7, #4]
 8014c96:	781b      	ldrb	r3, [r3, #0]
 8014c98:	0018      	movs	r0, r3
 8014c9a:	687b      	ldr	r3, [r7, #4]
 8014c9c:	685a      	ldr	r2, [r3, #4]
 8014c9e:	4907      	ldr	r1, [pc, #28]	; (8014cbc <RegionEU868DlChannelReq+0x98>)
 8014ca0:	0003      	movs	r3, r0
 8014ca2:	005b      	lsls	r3, r3, #1
 8014ca4:	181b      	adds	r3, r3, r0
 8014ca6:	009b      	lsls	r3, r3, #2
 8014ca8:	18cb      	adds	r3, r1, r3
 8014caa:	3304      	adds	r3, #4
 8014cac:	601a      	str	r2, [r3, #0]
    }

    return status;
 8014cae:	230f      	movs	r3, #15
 8014cb0:	18fb      	adds	r3, r7, r3
 8014cb2:	781b      	ldrb	r3, [r3, #0]
}
 8014cb4:	0018      	movs	r0, r3
 8014cb6:	46bd      	mov	sp, r7
 8014cb8:	b004      	add	sp, #16
 8014cba:	bd80      	pop	{r7, pc}
 8014cbc:	20000f40 	.word	0x20000f40

08014cc0 <RegionEU868AlternateDr>:

int8_t RegionEU868AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 8014cc0:	b580      	push	{r7, lr}
 8014cc2:	b082      	sub	sp, #8
 8014cc4:	af00      	add	r7, sp, #0
 8014cc6:	0002      	movs	r2, r0
 8014cc8:	1dfb      	adds	r3, r7, #7
 8014cca:	701a      	strb	r2, [r3, #0]
 8014ccc:	1dbb      	adds	r3, r7, #6
 8014cce:	1c0a      	adds	r2, r1, #0
 8014cd0:	701a      	strb	r2, [r3, #0]
    return currentDr;
 8014cd2:	1dfb      	adds	r3, r7, #7
 8014cd4:	781b      	ldrb	r3, [r3, #0]
 8014cd6:	b25b      	sxtb	r3, r3
}
 8014cd8:	0018      	movs	r0, r3
 8014cda:	46bd      	mov	sp, r7
 8014cdc:	b002      	add	sp, #8
 8014cde:	bd80      	pop	{r7, pc}

08014ce0 <RegionEU868CalcBackOff>:

void RegionEU868CalcBackOff( CalcBackOffParams_t* calcBackOff )
{
 8014ce0:	b580      	push	{r7, lr}
 8014ce2:	b088      	sub	sp, #32
 8014ce4:	af00      	add	r7, sp, #0
 8014ce6:	6078      	str	r0, [r7, #4]
    RegionCommonCalcBackOffParams_t calcBackOffParams;

    calcBackOffParams.Channels = NvmCtx.Channels;
 8014ce8:	210c      	movs	r1, #12
 8014cea:	187b      	adds	r3, r7, r1
 8014cec:	4a12      	ldr	r2, [pc, #72]	; (8014d38 <RegionEU868CalcBackOff+0x58>)
 8014cee:	601a      	str	r2, [r3, #0]
    calcBackOffParams.Bands = NvmCtx.Bands;
 8014cf0:	187b      	adds	r3, r7, r1
 8014cf2:	4a12      	ldr	r2, [pc, #72]	; (8014d3c <RegionEU868CalcBackOff+0x5c>)
 8014cf4:	605a      	str	r2, [r3, #4]
    calcBackOffParams.LastTxIsJoinRequest = calcBackOff->LastTxIsJoinRequest;
 8014cf6:	687b      	ldr	r3, [r7, #4]
 8014cf8:	785a      	ldrb	r2, [r3, #1]
 8014cfa:	187b      	adds	r3, r7, r1
 8014cfc:	721a      	strb	r2, [r3, #8]
    calcBackOffParams.Joined = calcBackOff->Joined;
 8014cfe:	687b      	ldr	r3, [r7, #4]
 8014d00:	781a      	ldrb	r2, [r3, #0]
 8014d02:	187b      	adds	r3, r7, r1
 8014d04:	725a      	strb	r2, [r3, #9]
    calcBackOffParams.DutyCycleEnabled = calcBackOff->DutyCycleEnabled;
 8014d06:	687b      	ldr	r3, [r7, #4]
 8014d08:	789a      	ldrb	r2, [r3, #2]
 8014d0a:	187b      	adds	r3, r7, r1
 8014d0c:	729a      	strb	r2, [r3, #10]
    calcBackOffParams.Channel = calcBackOff->Channel;
 8014d0e:	687b      	ldr	r3, [r7, #4]
 8014d10:	78da      	ldrb	r2, [r3, #3]
 8014d12:	187b      	adds	r3, r7, r1
 8014d14:	72da      	strb	r2, [r3, #11]
    calcBackOffParams.ElapsedTime = calcBackOff->ElapsedTime;
 8014d16:	687b      	ldr	r3, [r7, #4]
 8014d18:	685a      	ldr	r2, [r3, #4]
 8014d1a:	187b      	adds	r3, r7, r1
 8014d1c:	60da      	str	r2, [r3, #12]
    calcBackOffParams.TxTimeOnAir = calcBackOff->TxTimeOnAir;
 8014d1e:	687b      	ldr	r3, [r7, #4]
 8014d20:	689a      	ldr	r2, [r3, #8]
 8014d22:	187b      	adds	r3, r7, r1
 8014d24:	611a      	str	r2, [r3, #16]

    RegionCommonCalcBackOff( &calcBackOffParams );
 8014d26:	187b      	adds	r3, r7, r1
 8014d28:	0018      	movs	r0, r3
 8014d2a:	f7fe fe2d 	bl	8013988 <RegionCommonCalcBackOff>
}
 8014d2e:	46c0      	nop			; (mov r8, r8)
 8014d30:	46bd      	mov	sp, r7
 8014d32:	b008      	add	sp, #32
 8014d34:	bd80      	pop	{r7, pc}
 8014d36:	46c0      	nop			; (mov r8, r8)
 8014d38:	20000f40 	.word	0x20000f40
 8014d3c:	20001000 	.word	0x20001000

08014d40 <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8014d40:	b5b0      	push	{r4, r5, r7, lr}
 8014d42:	b090      	sub	sp, #64	; 0x40
 8014d44:	af04      	add	r7, sp, #16
 8014d46:	60f8      	str	r0, [r7, #12]
 8014d48:	60b9      	str	r1, [r7, #8]
 8014d4a:	607a      	str	r2, [r7, #4]
 8014d4c:	603b      	str	r3, [r7, #0]
    uint8_t nbEnabledChannels = 0;
 8014d4e:	232f      	movs	r3, #47	; 0x2f
 8014d50:	18fb      	adds	r3, r7, r3
 8014d52:	2200      	movs	r2, #0
 8014d54:	701a      	strb	r2, [r3, #0]
    uint8_t delayTx = 0;
 8014d56:	2327      	movs	r3, #39	; 0x27
 8014d58:	18fb      	adds	r3, r7, r3
 8014d5a:	2200      	movs	r2, #0
 8014d5c:	701a      	strb	r2, [r3, #0]
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 8014d5e:	2314      	movs	r3, #20
 8014d60:	18fb      	adds	r3, r7, r3
 8014d62:	0018      	movs	r0, r3
 8014d64:	2310      	movs	r3, #16
 8014d66:	001a      	movs	r2, r3
 8014d68:	2100      	movs	r1, #0
 8014d6a:	f009 fa57 	bl	801e21c <memset>
    TimerTime_t nextTxDelay = 0;
 8014d6e:	2300      	movs	r3, #0
 8014d70:	62bb      	str	r3, [r7, #40]	; 0x28

    if( RegionCommonCountChannels( NvmCtx.ChannelsMask, 0, 1 ) == 0 )
 8014d72:	4b44      	ldr	r3, [pc, #272]	; (8014e84 <RegionEU868NextChannel+0x144>)
 8014d74:	2201      	movs	r2, #1
 8014d76:	2100      	movs	r1, #0
 8014d78:	0018      	movs	r0, r3
 8014d7a:	f7fe fa85 	bl	8013288 <RegionCommonCountChannels>
 8014d7e:	1e03      	subs	r3, r0, #0
 8014d80:	d10a      	bne.n	8014d98 <RegionEU868NextChannel+0x58>
    { // Reactivate default channels
        NvmCtx.ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8014d82:	4a41      	ldr	r2, [pc, #260]	; (8014e88 <RegionEU868NextChannel+0x148>)
 8014d84:	2388      	movs	r3, #136	; 0x88
 8014d86:	005b      	lsls	r3, r3, #1
 8014d88:	5ad3      	ldrh	r3, [r2, r3]
 8014d8a:	2207      	movs	r2, #7
 8014d8c:	4313      	orrs	r3, r2
 8014d8e:	b299      	uxth	r1, r3
 8014d90:	4a3d      	ldr	r2, [pc, #244]	; (8014e88 <RegionEU868NextChannel+0x148>)
 8014d92:	2388      	movs	r3, #136	; 0x88
 8014d94:	005b      	lsls	r3, r3, #1
 8014d96:	52d1      	strh	r1, [r2, r3]
    }

    if( nextChanParams->AggrTimeOff <= TimerGetElapsedTime( nextChanParams->LastAggrTx ) )
 8014d98:	68fb      	ldr	r3, [r7, #12]
 8014d9a:	681c      	ldr	r4, [r3, #0]
 8014d9c:	68fb      	ldr	r3, [r7, #12]
 8014d9e:	685b      	ldr	r3, [r3, #4]
 8014da0:	0018      	movs	r0, r3
 8014da2:	f000 fc50 	bl	8015646 <TimerGetElapsedTime>
 8014da6:	0003      	movs	r3, r0
 8014da8:	429c      	cmp	r4, r3
 8014daa:	d824      	bhi.n	8014df6 <RegionEU868NextChannel+0xb6>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 8014dac:	683b      	ldr	r3, [r7, #0]
 8014dae:	2200      	movs	r2, #0
 8014db0:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        nextTxDelay = RegionCommonUpdateBandTimeOff( nextChanParams->Joined, nextChanParams->DutyCycleEnabled, NvmCtx.Bands, EU868_MAX_NB_BANDS );
 8014db2:	68fb      	ldr	r3, [r7, #12]
 8014db4:	7a58      	ldrb	r0, [r3, #9]
 8014db6:	68fb      	ldr	r3, [r7, #12]
 8014db8:	7a99      	ldrb	r1, [r3, #10]
 8014dba:	4a34      	ldr	r2, [pc, #208]	; (8014e8c <RegionEU868NextChannel+0x14c>)
 8014dbc:	2305      	movs	r3, #5
 8014dbe:	f7fe faee 	bl	801339e <RegionCommonUpdateBandTimeOff>
 8014dc2:	0003      	movs	r3, r0
 8014dc4:	62bb      	str	r3, [r7, #40]	; 0x28

        // Search how many channels are enabled
        nbEnabledChannels = CountNbOfEnabledChannels( nextChanParams->Joined, nextChanParams->Datarate,
 8014dc6:	68fb      	ldr	r3, [r7, #12]
 8014dc8:	7a58      	ldrb	r0, [r3, #9]
 8014dca:	68fb      	ldr	r3, [r7, #12]
 8014dcc:	7a1b      	ldrb	r3, [r3, #8]
 8014dce:	b25b      	sxtb	r3, r3
 8014dd0:	b2d9      	uxtb	r1, r3
 8014dd2:	232f      	movs	r3, #47	; 0x2f
 8014dd4:	18fc      	adds	r4, r7, r3
 8014dd6:	4d2c      	ldr	r5, [pc, #176]	; (8014e88 <RegionEU868NextChannel+0x148>)
 8014dd8:	4a2a      	ldr	r2, [pc, #168]	; (8014e84 <RegionEU868NextChannel+0x144>)
 8014dda:	2327      	movs	r3, #39	; 0x27
 8014ddc:	18fb      	adds	r3, r7, r3
 8014dde:	9302      	str	r3, [sp, #8]
 8014de0:	2314      	movs	r3, #20
 8014de2:	18fb      	adds	r3, r7, r3
 8014de4:	9301      	str	r3, [sp, #4]
 8014de6:	4b29      	ldr	r3, [pc, #164]	; (8014e8c <RegionEU868NextChannel+0x14c>)
 8014de8:	9300      	str	r3, [sp, #0]
 8014dea:	002b      	movs	r3, r5
 8014dec:	f7fe ff40 	bl	8013c70 <CountNbOfEnabledChannels>
 8014df0:	0003      	movs	r3, r0
 8014df2:	7023      	strb	r3, [r4, #0]
 8014df4:	e010      	b.n	8014e18 <RegionEU868NextChannel+0xd8>
                                                      NvmCtx.ChannelsMask, NvmCtx.Channels,
                                                      NvmCtx.Bands, enabledChannels, &delayTx );
    }
    else
    {
        delayTx++;
 8014df6:	2127      	movs	r1, #39	; 0x27
 8014df8:	187b      	adds	r3, r7, r1
 8014dfa:	781b      	ldrb	r3, [r3, #0]
 8014dfc:	3301      	adds	r3, #1
 8014dfe:	b2da      	uxtb	r2, r3
 8014e00:	187b      	adds	r3, r7, r1
 8014e02:	701a      	strb	r2, [r3, #0]
        nextTxDelay = nextChanParams->AggrTimeOff - TimerGetElapsedTime( nextChanParams->LastAggrTx );
 8014e04:	68fb      	ldr	r3, [r7, #12]
 8014e06:	681c      	ldr	r4, [r3, #0]
 8014e08:	68fb      	ldr	r3, [r7, #12]
 8014e0a:	685b      	ldr	r3, [r3, #4]
 8014e0c:	0018      	movs	r0, r3
 8014e0e:	f000 fc1a 	bl	8015646 <TimerGetElapsedTime>
 8014e12:	0003      	movs	r3, r0
 8014e14:	1ae3      	subs	r3, r4, r3
 8014e16:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if( nbEnabledChannels > 0 )
 8014e18:	232f      	movs	r3, #47	; 0x2f
 8014e1a:	18fb      	adds	r3, r7, r3
 8014e1c:	781b      	ldrb	r3, [r3, #0]
 8014e1e:	2b00      	cmp	r3, #0
 8014e20:	d012      	beq.n	8014e48 <RegionEU868NextChannel+0x108>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8014e22:	232f      	movs	r3, #47	; 0x2f
 8014e24:	18fb      	adds	r3, r7, r3
 8014e26:	781b      	ldrb	r3, [r3, #0]
 8014e28:	3b01      	subs	r3, #1
 8014e2a:	0019      	movs	r1, r3
 8014e2c:	2000      	movs	r0, #0
 8014e2e:	f000 fc41 	bl	80156b4 <randr>
 8014e32:	0002      	movs	r2, r0
 8014e34:	2314      	movs	r3, #20
 8014e36:	18fb      	adds	r3, r7, r3
 8014e38:	5c9a      	ldrb	r2, [r3, r2]
 8014e3a:	68bb      	ldr	r3, [r7, #8]
 8014e3c:	701a      	strb	r2, [r3, #0]

        *time = 0;
 8014e3e:	687b      	ldr	r3, [r7, #4]
 8014e40:	2200      	movs	r2, #0
 8014e42:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 8014e44:	2300      	movs	r3, #0
 8014e46:	e018      	b.n	8014e7a <RegionEU868NextChannel+0x13a>
    }
    else
    {
        if( delayTx > 0 )
 8014e48:	2327      	movs	r3, #39	; 0x27
 8014e4a:	18fb      	adds	r3, r7, r3
 8014e4c:	781b      	ldrb	r3, [r3, #0]
 8014e4e:	2b00      	cmp	r3, #0
 8014e50:	d004      	beq.n	8014e5c <RegionEU868NextChannel+0x11c>
        {
            // Delay transmission due to AggregatedTimeOff or to a band time off
            *time = nextTxDelay;
 8014e52:	687b      	ldr	r3, [r7, #4]
 8014e54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014e56:	601a      	str	r2, [r3, #0]
            return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 8014e58:	230b      	movs	r3, #11
 8014e5a:	e00e      	b.n	8014e7a <RegionEU868NextChannel+0x13a>
        }
        // Datarate not supported by any channel, restore defaults
        NvmCtx.ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8014e5c:	4a0a      	ldr	r2, [pc, #40]	; (8014e88 <RegionEU868NextChannel+0x148>)
 8014e5e:	2388      	movs	r3, #136	; 0x88
 8014e60:	005b      	lsls	r3, r3, #1
 8014e62:	5ad3      	ldrh	r3, [r2, r3]
 8014e64:	2207      	movs	r2, #7
 8014e66:	4313      	orrs	r3, r2
 8014e68:	b299      	uxth	r1, r3
 8014e6a:	4a07      	ldr	r2, [pc, #28]	; (8014e88 <RegionEU868NextChannel+0x148>)
 8014e6c:	2388      	movs	r3, #136	; 0x88
 8014e6e:	005b      	lsls	r3, r3, #1
 8014e70:	52d1      	strh	r1, [r2, r3]
        *time = 0;
 8014e72:	687b      	ldr	r3, [r7, #4]
 8014e74:	2200      	movs	r2, #0
 8014e76:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8014e78:	230c      	movs	r3, #12
    }
}
 8014e7a:	0018      	movs	r0, r3
 8014e7c:	46bd      	mov	sp, r7
 8014e7e:	b00c      	add	sp, #48	; 0x30
 8014e80:	bdb0      	pop	{r4, r5, r7, pc}
 8014e82:	46c0      	nop			; (mov r8, r8)
 8014e84:	20001050 	.word	0x20001050
 8014e88:	20000f40 	.word	0x20000f40
 8014e8c:	20001000 	.word	0x20001000

08014e90 <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 8014e90:	b590      	push	{r4, r7, lr}
 8014e92:	b085      	sub	sp, #20
 8014e94:	af00      	add	r7, sp, #0
 8014e96:	6078      	str	r0, [r7, #4]
    uint8_t band = 0;
 8014e98:	230c      	movs	r3, #12
 8014e9a:	18fb      	adds	r3, r7, r3
 8014e9c:	2200      	movs	r2, #0
 8014e9e:	701a      	strb	r2, [r3, #0]
    bool drInvalid = false;
 8014ea0:	230f      	movs	r3, #15
 8014ea2:	18fb      	adds	r3, r7, r3
 8014ea4:	2200      	movs	r2, #0
 8014ea6:	701a      	strb	r2, [r3, #0]
    bool freqInvalid = false;
 8014ea8:	230e      	movs	r3, #14
 8014eaa:	18fb      	adds	r3, r7, r3
 8014eac:	2200      	movs	r2, #0
 8014eae:	701a      	strb	r2, [r3, #0]
    uint8_t id = channelAdd->ChannelId;
 8014eb0:	210d      	movs	r1, #13
 8014eb2:	187b      	adds	r3, r7, r1
 8014eb4:	687a      	ldr	r2, [r7, #4]
 8014eb6:	7912      	ldrb	r2, [r2, #4]
 8014eb8:	701a      	strb	r2, [r3, #0]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 8014eba:	187b      	adds	r3, r7, r1
 8014ebc:	781b      	ldrb	r3, [r3, #0]
 8014ebe:	2b02      	cmp	r3, #2
 8014ec0:	d801      	bhi.n	8014ec6 <RegionEU868ChannelAdd+0x36>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8014ec2:	2306      	movs	r3, #6
 8014ec4:	e0a2      	b.n	801500c <RegionEU868ChannelAdd+0x17c>
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 8014ec6:	230d      	movs	r3, #13
 8014ec8:	18fb      	adds	r3, r7, r3
 8014eca:	781b      	ldrb	r3, [r3, #0]
 8014ecc:	2b0f      	cmp	r3, #15
 8014ece:	d901      	bls.n	8014ed4 <RegionEU868ChannelAdd+0x44>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8014ed0:	2303      	movs	r3, #3
 8014ed2:	e09b      	b.n	801500c <RegionEU868ChannelAdd+0x17c>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8014ed4:	687b      	ldr	r3, [r7, #4]
 8014ed6:	681b      	ldr	r3, [r3, #0]
 8014ed8:	7a1b      	ldrb	r3, [r3, #8]
 8014eda:	011b      	lsls	r3, r3, #4
 8014edc:	b25b      	sxtb	r3, r3
 8014ede:	111b      	asrs	r3, r3, #4
 8014ee0:	b25b      	sxtb	r3, r3
 8014ee2:	2207      	movs	r2, #7
 8014ee4:	2100      	movs	r1, #0
 8014ee6:	0018      	movs	r0, r3
 8014ee8:	f7fe f966 	bl	80131b8 <RegionCommonValueInRange>
 8014eec:	1e03      	subs	r3, r0, #0
 8014eee:	d103      	bne.n	8014ef8 <RegionEU868ChannelAdd+0x68>
    {
        drInvalid = true;
 8014ef0:	230f      	movs	r3, #15
 8014ef2:	18fb      	adds	r3, r7, r3
 8014ef4:	2201      	movs	r2, #1
 8014ef6:	701a      	strb	r2, [r3, #0]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8014ef8:	687b      	ldr	r3, [r7, #4]
 8014efa:	681b      	ldr	r3, [r3, #0]
 8014efc:	7a1b      	ldrb	r3, [r3, #8]
 8014efe:	b25b      	sxtb	r3, r3
 8014f00:	111b      	asrs	r3, r3, #4
 8014f02:	b25b      	sxtb	r3, r3
 8014f04:	2207      	movs	r2, #7
 8014f06:	2100      	movs	r1, #0
 8014f08:	0018      	movs	r0, r3
 8014f0a:	f7fe f955 	bl	80131b8 <RegionCommonValueInRange>
 8014f0e:	1e03      	subs	r3, r0, #0
 8014f10:	d103      	bne.n	8014f1a <RegionEU868ChannelAdd+0x8a>
    {
        drInvalid = true;
 8014f12:	230f      	movs	r3, #15
 8014f14:	18fb      	adds	r3, r7, r3
 8014f16:	2201      	movs	r2, #1
 8014f18:	701a      	strb	r2, [r3, #0]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 8014f1a:	687b      	ldr	r3, [r7, #4]
 8014f1c:	681b      	ldr	r3, [r3, #0]
 8014f1e:	7a1b      	ldrb	r3, [r3, #8]
 8014f20:	011b      	lsls	r3, r3, #4
 8014f22:	b25b      	sxtb	r3, r3
 8014f24:	111b      	asrs	r3, r3, #4
 8014f26:	b25a      	sxtb	r2, r3
 8014f28:	687b      	ldr	r3, [r7, #4]
 8014f2a:	681b      	ldr	r3, [r3, #0]
 8014f2c:	7a1b      	ldrb	r3, [r3, #8]
 8014f2e:	b25b      	sxtb	r3, r3
 8014f30:	111b      	asrs	r3, r3, #4
 8014f32:	b25b      	sxtb	r3, r3
 8014f34:	429a      	cmp	r2, r3
 8014f36:	dd03      	ble.n	8014f40 <RegionEU868ChannelAdd+0xb0>
    {
        drInvalid = true;
 8014f38:	230f      	movs	r3, #15
 8014f3a:	18fb      	adds	r3, r7, r3
 8014f3c:	2201      	movs	r2, #1
 8014f3e:	701a      	strb	r2, [r3, #0]
    }

    // Check frequency
    if( freqInvalid == false )
 8014f40:	230e      	movs	r3, #14
 8014f42:	18fb      	adds	r3, r7, r3
 8014f44:	781b      	ldrb	r3, [r3, #0]
 8014f46:	2201      	movs	r2, #1
 8014f48:	4053      	eors	r3, r2
 8014f4a:	b2db      	uxtb	r3, r3
 8014f4c:	2b00      	cmp	r3, #0
 8014f4e:	d013      	beq.n	8014f78 <RegionEU868ChannelAdd+0xe8>
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 8014f50:	687b      	ldr	r3, [r7, #4]
 8014f52:	681b      	ldr	r3, [r3, #0]
 8014f54:	681b      	ldr	r3, [r3, #0]
 8014f56:	220c      	movs	r2, #12
 8014f58:	18ba      	adds	r2, r7, r2
 8014f5a:	0011      	movs	r1, r2
 8014f5c:	0018      	movs	r0, r3
 8014f5e:	f7fe fe0f 	bl	8013b80 <VerifyRfFreq>
 8014f62:	0003      	movs	r3, r0
 8014f64:	001a      	movs	r2, r3
 8014f66:	2301      	movs	r3, #1
 8014f68:	4053      	eors	r3, r2
 8014f6a:	b2db      	uxtb	r3, r3
 8014f6c:	2b00      	cmp	r3, #0
 8014f6e:	d003      	beq.n	8014f78 <RegionEU868ChannelAdd+0xe8>
        {
            freqInvalid = true;
 8014f70:	230e      	movs	r3, #14
 8014f72:	18fb      	adds	r3, r7, r3
 8014f74:	2201      	movs	r2, #1
 8014f76:	701a      	strb	r2, [r3, #0]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 8014f78:	230f      	movs	r3, #15
 8014f7a:	18fb      	adds	r3, r7, r3
 8014f7c:	781b      	ldrb	r3, [r3, #0]
 8014f7e:	2b00      	cmp	r3, #0
 8014f80:	d006      	beq.n	8014f90 <RegionEU868ChannelAdd+0x100>
 8014f82:	230e      	movs	r3, #14
 8014f84:	18fb      	adds	r3, r7, r3
 8014f86:	781b      	ldrb	r3, [r3, #0]
 8014f88:	2b00      	cmp	r3, #0
 8014f8a:	d001      	beq.n	8014f90 <RegionEU868ChannelAdd+0x100>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8014f8c:	2306      	movs	r3, #6
 8014f8e:	e03d      	b.n	801500c <RegionEU868ChannelAdd+0x17c>
    }
    if( drInvalid == true )
 8014f90:	230f      	movs	r3, #15
 8014f92:	18fb      	adds	r3, r7, r3
 8014f94:	781b      	ldrb	r3, [r3, #0]
 8014f96:	2b00      	cmp	r3, #0
 8014f98:	d001      	beq.n	8014f9e <RegionEU868ChannelAdd+0x10e>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 8014f9a:	2305      	movs	r3, #5
 8014f9c:	e036      	b.n	801500c <RegionEU868ChannelAdd+0x17c>
    }
    if( freqInvalid == true )
 8014f9e:	230e      	movs	r3, #14
 8014fa0:	18fb      	adds	r3, r7, r3
 8014fa2:	781b      	ldrb	r3, [r3, #0]
 8014fa4:	2b00      	cmp	r3, #0
 8014fa6:	d001      	beq.n	8014fac <RegionEU868ChannelAdd+0x11c>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 8014fa8:	2304      	movs	r3, #4
 8014faa:	e02f      	b.n	801500c <RegionEU868ChannelAdd+0x17c>
    }

    memcpy1( ( uint8_t* ) &(NvmCtx.Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( NvmCtx.Channels[id] ) );
 8014fac:	240d      	movs	r4, #13
 8014fae:	193b      	adds	r3, r7, r4
 8014fb0:	781a      	ldrb	r2, [r3, #0]
 8014fb2:	0013      	movs	r3, r2
 8014fb4:	005b      	lsls	r3, r3, #1
 8014fb6:	189b      	adds	r3, r3, r2
 8014fb8:	009b      	lsls	r3, r3, #2
 8014fba:	4a16      	ldr	r2, [pc, #88]	; (8015014 <RegionEU868ChannelAdd+0x184>)
 8014fbc:	1898      	adds	r0, r3, r2
 8014fbe:	687b      	ldr	r3, [r7, #4]
 8014fc0:	681b      	ldr	r3, [r3, #0]
 8014fc2:	220c      	movs	r2, #12
 8014fc4:	0019      	movs	r1, r3
 8014fc6:	f000 fb8b 	bl	80156e0 <memcpy1>
    NvmCtx.Channels[id].Band = band;
 8014fca:	193b      	adds	r3, r7, r4
 8014fcc:	781a      	ldrb	r2, [r3, #0]
 8014fce:	230c      	movs	r3, #12
 8014fd0:	18fb      	adds	r3, r7, r3
 8014fd2:	7818      	ldrb	r0, [r3, #0]
 8014fd4:	490f      	ldr	r1, [pc, #60]	; (8015014 <RegionEU868ChannelAdd+0x184>)
 8014fd6:	0013      	movs	r3, r2
 8014fd8:	005b      	lsls	r3, r3, #1
 8014fda:	189b      	adds	r3, r3, r2
 8014fdc:	009b      	lsls	r3, r3, #2
 8014fde:	18cb      	adds	r3, r1, r3
 8014fe0:	3309      	adds	r3, #9
 8014fe2:	1c02      	adds	r2, r0, #0
 8014fe4:	701a      	strb	r2, [r3, #0]
    NvmCtx.ChannelsMask[0] |= ( 1 << id );
 8014fe6:	4a0b      	ldr	r2, [pc, #44]	; (8015014 <RegionEU868ChannelAdd+0x184>)
 8014fe8:	2388      	movs	r3, #136	; 0x88
 8014fea:	005b      	lsls	r3, r3, #1
 8014fec:	5ad3      	ldrh	r3, [r2, r3]
 8014fee:	b21a      	sxth	r2, r3
 8014ff0:	193b      	adds	r3, r7, r4
 8014ff2:	781b      	ldrb	r3, [r3, #0]
 8014ff4:	2101      	movs	r1, #1
 8014ff6:	4099      	lsls	r1, r3
 8014ff8:	000b      	movs	r3, r1
 8014ffa:	b21b      	sxth	r3, r3
 8014ffc:	4313      	orrs	r3, r2
 8014ffe:	b21b      	sxth	r3, r3
 8015000:	b299      	uxth	r1, r3
 8015002:	4a04      	ldr	r2, [pc, #16]	; (8015014 <RegionEU868ChannelAdd+0x184>)
 8015004:	2388      	movs	r3, #136	; 0x88
 8015006:	005b      	lsls	r3, r3, #1
 8015008:	52d1      	strh	r1, [r2, r3]
    return LORAMAC_STATUS_OK;
 801500a:	2300      	movs	r3, #0
}
 801500c:	0018      	movs	r0, r3
 801500e:	46bd      	mov	sp, r7
 8015010:	b005      	add	sp, #20
 8015012:	bd90      	pop	{r4, r7, pc}
 8015014:	20000f40 	.word	0x20000f40

08015018 <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 8015018:	b590      	push	{r4, r7, lr}
 801501a:	b085      	sub	sp, #20
 801501c:	af00      	add	r7, sp, #0
 801501e:	6078      	str	r0, [r7, #4]
    uint8_t id = channelRemove->ChannelId;
 8015020:	210f      	movs	r1, #15
 8015022:	187b      	adds	r3, r7, r1
 8015024:	687a      	ldr	r2, [r7, #4]
 8015026:	7812      	ldrb	r2, [r2, #0]
 8015028:	701a      	strb	r2, [r3, #0]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 801502a:	187b      	adds	r3, r7, r1
 801502c:	781b      	ldrb	r3, [r3, #0]
 801502e:	2b02      	cmp	r3, #2
 8015030:	d801      	bhi.n	8015036 <RegionEU868ChannelsRemove+0x1e>
    {
        return false;
 8015032:	2300      	movs	r3, #0
 8015034:	e015      	b.n	8015062 <RegionEU868ChannelsRemove+0x4a>
    }

    // Remove the channel from the list of channels
    NvmCtx.Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 8015036:	240f      	movs	r4, #15
 8015038:	193b      	adds	r3, r7, r4
 801503a:	781a      	ldrb	r2, [r3, #0]
 801503c:	490b      	ldr	r1, [pc, #44]	; (801506c <RegionEU868ChannelsRemove+0x54>)
 801503e:	0013      	movs	r3, r2
 8015040:	005b      	lsls	r3, r3, #1
 8015042:	189b      	adds	r3, r3, r2
 8015044:	009b      	lsls	r3, r3, #2
 8015046:	18cb      	adds	r3, r1, r3
 8015048:	220c      	movs	r2, #12
 801504a:	2100      	movs	r1, #0
 801504c:	0018      	movs	r0, r3
 801504e:	f009 f8e5 	bl	801e21c <memset>

    return RegionCommonChanDisable( NvmCtx.ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 8015052:	193b      	adds	r3, r7, r4
 8015054:	7819      	ldrb	r1, [r3, #0]
 8015056:	4b06      	ldr	r3, [pc, #24]	; (8015070 <RegionEU868ChannelsRemove+0x58>)
 8015058:	2210      	movs	r2, #16
 801505a:	0018      	movs	r0, r3
 801505c:	f7fe f8d2 	bl	8013204 <RegionCommonChanDisable>
 8015060:	0003      	movs	r3, r0
}
 8015062:	0018      	movs	r0, r3
 8015064:	46bd      	mov	sp, r7
 8015066:	b005      	add	sp, #20
 8015068:	bd90      	pop	{r4, r7, pc}
 801506a:	46c0      	nop			; (mov r8, r8)
 801506c:	20000f40 	.word	0x20000f40
 8015070:	20001050 	.word	0x20001050

08015074 <RegionEU868SetContinuousWave>:

void RegionEU868SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 8015074:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015076:	b085      	sub	sp, #20
 8015078:	af00      	add	r7, sp, #0
 801507a:	6078      	str	r0, [r7, #4]
    int8_t txPowerLimited = LimitTxPower( continuousWave->TxPower, NvmCtx.Bands[NvmCtx.Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, NvmCtx.ChannelsMask );
 801507c:	687b      	ldr	r3, [r7, #4]
 801507e:	2002      	movs	r0, #2
 8015080:	5618      	ldrsb	r0, [r3, r0]
 8015082:	687b      	ldr	r3, [r7, #4]
 8015084:	781b      	ldrb	r3, [r3, #0]
 8015086:	0019      	movs	r1, r3
 8015088:	4a21      	ldr	r2, [pc, #132]	; (8015110 <RegionEU868SetContinuousWave+0x9c>)
 801508a:	000b      	movs	r3, r1
 801508c:	005b      	lsls	r3, r3, #1
 801508e:	185b      	adds	r3, r3, r1
 8015090:	009b      	lsls	r3, r3, #2
 8015092:	18d3      	adds	r3, r2, r3
 8015094:	3309      	adds	r3, #9
 8015096:	781b      	ldrb	r3, [r3, #0]
 8015098:	4a1d      	ldr	r2, [pc, #116]	; (8015110 <RegionEU868SetContinuousWave+0x9c>)
 801509a:	330c      	adds	r3, #12
 801509c:	011b      	lsls	r3, r3, #4
 801509e:	18d3      	adds	r3, r2, r3
 80150a0:	3302      	adds	r3, #2
 80150a2:	2100      	movs	r1, #0
 80150a4:	5659      	ldrsb	r1, [r3, r1]
 80150a6:	687b      	ldr	r3, [r7, #4]
 80150a8:	2201      	movs	r2, #1
 80150aa:	569a      	ldrsb	r2, [r3, r2]
 80150ac:	260f      	movs	r6, #15
 80150ae:	19bc      	adds	r4, r7, r6
 80150b0:	4b18      	ldr	r3, [pc, #96]	; (8015114 <RegionEU868SetContinuousWave+0xa0>)
 80150b2:	f7fe fd3d 	bl	8013b30 <LimitTxPower>
 80150b6:	0003      	movs	r3, r0
 80150b8:	7023      	strb	r3, [r4, #0]
    int8_t phyTxPower = 0;
 80150ba:	200e      	movs	r0, #14
 80150bc:	183b      	adds	r3, r7, r0
 80150be:	2200      	movs	r2, #0
 80150c0:	701a      	strb	r2, [r3, #0]
    uint32_t frequency = NvmCtx.Channels[continuousWave->Channel].Frequency;
 80150c2:	687b      	ldr	r3, [r7, #4]
 80150c4:	781b      	ldrb	r3, [r3, #0]
 80150c6:	0019      	movs	r1, r3
 80150c8:	4a11      	ldr	r2, [pc, #68]	; (8015110 <RegionEU868SetContinuousWave+0x9c>)
 80150ca:	000b      	movs	r3, r1
 80150cc:	005b      	lsls	r3, r3, #1
 80150ce:	185b      	adds	r3, r3, r1
 80150d0:	009b      	lsls	r3, r3, #2
 80150d2:	589b      	ldr	r3, [r3, r2]
 80150d4:	60bb      	str	r3, [r7, #8]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 80150d6:	687b      	ldr	r3, [r7, #4]
 80150d8:	6859      	ldr	r1, [r3, #4]
 80150da:	687b      	ldr	r3, [r7, #4]
 80150dc:	689a      	ldr	r2, [r3, #8]
 80150de:	0005      	movs	r5, r0
 80150e0:	183c      	adds	r4, r7, r0
 80150e2:	19bb      	adds	r3, r7, r6
 80150e4:	781b      	ldrb	r3, [r3, #0]
 80150e6:	b25b      	sxtb	r3, r3
 80150e8:	0018      	movs	r0, r3
 80150ea:	f7fe fc15 	bl	8013918 <RegionCommonComputeTxPower>
 80150ee:	0003      	movs	r3, r0
 80150f0:	7023      	strb	r3, [r4, #0]

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 80150f2:	4b09      	ldr	r3, [pc, #36]	; (8015118 <RegionEU868SetContinuousWave+0xa4>)
 80150f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80150f6:	687a      	ldr	r2, [r7, #4]
 80150f8:	8994      	ldrh	r4, [r2, #12]
 80150fa:	0028      	movs	r0, r5
 80150fc:	183a      	adds	r2, r7, r0
 80150fe:	2100      	movs	r1, #0
 8015100:	5651      	ldrsb	r1, [r2, r1]
 8015102:	68b8      	ldr	r0, [r7, #8]
 8015104:	0022      	movs	r2, r4
 8015106:	4798      	blx	r3
}
 8015108:	46c0      	nop			; (mov r8, r8)
 801510a:	46bd      	mov	sp, r7
 801510c:	b005      	add	sp, #20
 801510e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015110:	20000f40 	.word	0x20000f40
 8015114:	20001050 	.word	0x20001050
 8015118:	08020c58 	.word	0x08020c58

0801511c <RegionEU868ApplyDrOffset>:

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 801511c:	b590      	push	{r4, r7, lr}
 801511e:	b085      	sub	sp, #20
 8015120:	af00      	add	r7, sp, #0
 8015122:	0004      	movs	r4, r0
 8015124:	0008      	movs	r0, r1
 8015126:	0011      	movs	r1, r2
 8015128:	1dfb      	adds	r3, r7, #7
 801512a:	1c22      	adds	r2, r4, #0
 801512c:	701a      	strb	r2, [r3, #0]
 801512e:	1dbb      	adds	r3, r7, #6
 8015130:	1c02      	adds	r2, r0, #0
 8015132:	701a      	strb	r2, [r3, #0]
 8015134:	1d7b      	adds	r3, r7, #5
 8015136:	1c0a      	adds	r2, r1, #0
 8015138:	701a      	strb	r2, [r3, #0]
    int8_t datarate = dr - drOffset;
 801513a:	1dbb      	adds	r3, r7, #6
 801513c:	781a      	ldrb	r2, [r3, #0]
 801513e:	1d7b      	adds	r3, r7, #5
 8015140:	781b      	ldrb	r3, [r3, #0]
 8015142:	1ad3      	subs	r3, r2, r3
 8015144:	b2da      	uxtb	r2, r3
 8015146:	210f      	movs	r1, #15
 8015148:	187b      	adds	r3, r7, r1
 801514a:	701a      	strb	r2, [r3, #0]

    if( datarate < 0 )
 801514c:	187b      	adds	r3, r7, r1
 801514e:	781b      	ldrb	r3, [r3, #0]
 8015150:	2b7f      	cmp	r3, #127	; 0x7f
 8015152:	d903      	bls.n	801515c <RegionEU868ApplyDrOffset+0x40>
    {
        datarate = DR_0;
 8015154:	230f      	movs	r3, #15
 8015156:	18fb      	adds	r3, r7, r3
 8015158:	2200      	movs	r2, #0
 801515a:	701a      	strb	r2, [r3, #0]
    }
    return datarate;
 801515c:	230f      	movs	r3, #15
 801515e:	18fb      	adds	r3, r7, r3
 8015160:	781b      	ldrb	r3, [r3, #0]
}
 8015162:	0018      	movs	r0, r3
 8015164:	46bd      	mov	sp, r7
 8015166:	b005      	add	sp, #20
 8015168:	bd90      	pop	{r4, r7, pc}
	...

0801516c <SysTimeAdd>:
static void CalendarDiv60( uint32_t in, uint32_t* out, uint32_t* remainder );

const char *WeekDayString[]={ "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" };

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 801516c:	b082      	sub	sp, #8
 801516e:	b580      	push	{r7, lr}
 8015170:	b086      	sub	sp, #24
 8015172:	af00      	add	r7, sp, #0
 8015174:	60f8      	str	r0, [r7, #12]
 8015176:	1d38      	adds	r0, r7, #4
 8015178:	6001      	str	r1, [r0, #0]
 801517a:	6042      	str	r2, [r0, #4]
 801517c:	2204      	movs	r2, #4
 801517e:	2120      	movs	r1, #32
 8015180:	468c      	mov	ip, r1
 8015182:	44bc      	add	ip, r7
 8015184:	4462      	add	r2, ip
 8015186:	6013      	str	r3, [r2, #0]
    SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 8015188:	2110      	movs	r1, #16
 801518a:	187b      	adds	r3, r7, r1
 801518c:	2200      	movs	r2, #0
 801518e:	601a      	str	r2, [r3, #0]
 8015190:	187b      	adds	r3, r7, r1
 8015192:	2200      	movs	r2, #0
 8015194:	809a      	strh	r2, [r3, #4]

    c.Seconds = a.Seconds + b.Seconds;
 8015196:	1d3b      	adds	r3, r7, #4
 8015198:	681a      	ldr	r2, [r3, #0]
 801519a:	2304      	movs	r3, #4
 801519c:	2020      	movs	r0, #32
 801519e:	4684      	mov	ip, r0
 80151a0:	44bc      	add	ip, r7
 80151a2:	4463      	add	r3, ip
 80151a4:	681b      	ldr	r3, [r3, #0]
 80151a6:	18d2      	adds	r2, r2, r3
 80151a8:	187b      	adds	r3, r7, r1
 80151aa:	601a      	str	r2, [r3, #0]
    c.SubSeconds = a.SubSeconds + b.SubSeconds;
 80151ac:	1d3b      	adds	r3, r7, #4
 80151ae:	2204      	movs	r2, #4
 80151b0:	5e9b      	ldrsh	r3, [r3, r2]
 80151b2:	b29a      	uxth	r2, r3
 80151b4:	2304      	movs	r3, #4
 80151b6:	2020      	movs	r0, #32
 80151b8:	4684      	mov	ip, r0
 80151ba:	44bc      	add	ip, r7
 80151bc:	4463      	add	r3, ip
 80151be:	2004      	movs	r0, #4
 80151c0:	5e1b      	ldrsh	r3, [r3, r0]
 80151c2:	b29b      	uxth	r3, r3
 80151c4:	18d3      	adds	r3, r2, r3
 80151c6:	b29b      	uxth	r3, r3
 80151c8:	b21a      	sxth	r2, r3
 80151ca:	187b      	adds	r3, r7, r1
 80151cc:	809a      	strh	r2, [r3, #4]
    if( c.SubSeconds >= 1000 )
 80151ce:	187b      	adds	r3, r7, r1
 80151d0:	2204      	movs	r2, #4
 80151d2:	5e9b      	ldrsh	r3, [r3, r2]
 80151d4:	4a0f      	ldr	r2, [pc, #60]	; (8015214 <SysTimeAdd+0xa8>)
 80151d6:	4293      	cmp	r3, r2
 80151d8:	dd10      	ble.n	80151fc <SysTimeAdd+0x90>
    {
        c.Seconds++;
 80151da:	2110      	movs	r1, #16
 80151dc:	187b      	adds	r3, r7, r1
 80151de:	681b      	ldr	r3, [r3, #0]
 80151e0:	1c5a      	adds	r2, r3, #1
 80151e2:	187b      	adds	r3, r7, r1
 80151e4:	601a      	str	r2, [r3, #0]
        c.SubSeconds -= 1000;
 80151e6:	187b      	adds	r3, r7, r1
 80151e8:	2204      	movs	r2, #4
 80151ea:	5e9b      	ldrsh	r3, [r3, r2]
 80151ec:	b29b      	uxth	r3, r3
 80151ee:	4a0a      	ldr	r2, [pc, #40]	; (8015218 <SysTimeAdd+0xac>)
 80151f0:	4694      	mov	ip, r2
 80151f2:	4463      	add	r3, ip
 80151f4:	b29b      	uxth	r3, r3
 80151f6:	b21a      	sxth	r2, r3
 80151f8:	187b      	adds	r3, r7, r1
 80151fa:	809a      	strh	r2, [r3, #4]
    }
    return c;
 80151fc:	68fb      	ldr	r3, [r7, #12]
 80151fe:	2210      	movs	r2, #16
 8015200:	18ba      	adds	r2, r7, r2
 8015202:	ca03      	ldmia	r2!, {r0, r1}
 8015204:	c303      	stmia	r3!, {r0, r1}
}
 8015206:	68f8      	ldr	r0, [r7, #12]
 8015208:	46bd      	mov	sp, r7
 801520a:	b006      	add	sp, #24
 801520c:	bc80      	pop	{r7}
 801520e:	bc08      	pop	{r3}
 8015210:	b002      	add	sp, #8
 8015212:	4718      	bx	r3
 8015214:	000003e7 	.word	0x000003e7
 8015218:	fffffc18 	.word	0xfffffc18

0801521c <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 801521c:	b082      	sub	sp, #8
 801521e:	b580      	push	{r7, lr}
 8015220:	b086      	sub	sp, #24
 8015222:	af00      	add	r7, sp, #0
 8015224:	60f8      	str	r0, [r7, #12]
 8015226:	1d38      	adds	r0, r7, #4
 8015228:	6001      	str	r1, [r0, #0]
 801522a:	6042      	str	r2, [r0, #4]
 801522c:	2204      	movs	r2, #4
 801522e:	2120      	movs	r1, #32
 8015230:	468c      	mov	ip, r1
 8015232:	44bc      	add	ip, r7
 8015234:	4462      	add	r2, ip
 8015236:	6013      	str	r3, [r2, #0]
    SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 8015238:	2110      	movs	r1, #16
 801523a:	187b      	adds	r3, r7, r1
 801523c:	2200      	movs	r2, #0
 801523e:	601a      	str	r2, [r3, #0]
 8015240:	187b      	adds	r3, r7, r1
 8015242:	2200      	movs	r2, #0
 8015244:	809a      	strh	r2, [r3, #4]

    c.Seconds = a.Seconds - b.Seconds;
 8015246:	1d3b      	adds	r3, r7, #4
 8015248:	681a      	ldr	r2, [r3, #0]
 801524a:	2304      	movs	r3, #4
 801524c:	2020      	movs	r0, #32
 801524e:	4684      	mov	ip, r0
 8015250:	44bc      	add	ip, r7
 8015252:	4463      	add	r3, ip
 8015254:	681b      	ldr	r3, [r3, #0]
 8015256:	1ad2      	subs	r2, r2, r3
 8015258:	187b      	adds	r3, r7, r1
 801525a:	601a      	str	r2, [r3, #0]
    c.SubSeconds = a.SubSeconds - b.SubSeconds;
 801525c:	1d3b      	adds	r3, r7, #4
 801525e:	2204      	movs	r2, #4
 8015260:	5e9b      	ldrsh	r3, [r3, r2]
 8015262:	b29a      	uxth	r2, r3
 8015264:	2304      	movs	r3, #4
 8015266:	2020      	movs	r0, #32
 8015268:	4684      	mov	ip, r0
 801526a:	44bc      	add	ip, r7
 801526c:	4463      	add	r3, ip
 801526e:	2004      	movs	r0, #4
 8015270:	5e1b      	ldrsh	r3, [r3, r0]
 8015272:	b29b      	uxth	r3, r3
 8015274:	1ad3      	subs	r3, r2, r3
 8015276:	b29b      	uxth	r3, r3
 8015278:	b21a      	sxth	r2, r3
 801527a:	187b      	adds	r3, r7, r1
 801527c:	809a      	strh	r2, [r3, #4]
    if( c.SubSeconds < 0 )
 801527e:	187b      	adds	r3, r7, r1
 8015280:	2204      	movs	r2, #4
 8015282:	5e9b      	ldrsh	r3, [r3, r2]
 8015284:	2b00      	cmp	r3, #0
 8015286:	da11      	bge.n	80152ac <SysTimeSub+0x90>
    {
        c.Seconds--;
 8015288:	2110      	movs	r1, #16
 801528a:	187b      	adds	r3, r7, r1
 801528c:	681b      	ldr	r3, [r3, #0]
 801528e:	1e5a      	subs	r2, r3, #1
 8015290:	187b      	adds	r3, r7, r1
 8015292:	601a      	str	r2, [r3, #0]
        c.SubSeconds += 1000;
 8015294:	187b      	adds	r3, r7, r1
 8015296:	2204      	movs	r2, #4
 8015298:	5e9b      	ldrsh	r3, [r3, r2]
 801529a:	b29b      	uxth	r3, r3
 801529c:	22fa      	movs	r2, #250	; 0xfa
 801529e:	0092      	lsls	r2, r2, #2
 80152a0:	4694      	mov	ip, r2
 80152a2:	4463      	add	r3, ip
 80152a4:	b29b      	uxth	r3, r3
 80152a6:	b21a      	sxth	r2, r3
 80152a8:	187b      	adds	r3, r7, r1
 80152aa:	809a      	strh	r2, [r3, #4]
    }
    return c;
 80152ac:	68fb      	ldr	r3, [r7, #12]
 80152ae:	2210      	movs	r2, #16
 80152b0:	18ba      	adds	r2, r7, r2
 80152b2:	ca03      	ldmia	r2!, {r0, r1}
 80152b4:	c303      	stmia	r3!, {r0, r1}
}
 80152b6:	68f8      	ldr	r0, [r7, #12]
 80152b8:	46bd      	mov	sp, r7
 80152ba:	b006      	add	sp, #24
 80152bc:	bc80      	pop	{r7}
 80152be:	bc08      	pop	{r3}
 80152c0:	b002      	add	sp, #8
 80152c2:	4718      	bx	r3

080152c4 <SysTimeSet>:


void SysTimeSet( SysTime_t sysTime )
{
 80152c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80152c6:	b085      	sub	sp, #20
 80152c8:	af00      	add	r7, sp, #0
 80152ca:	003b      	movs	r3, r7
 80152cc:	6018      	str	r0, [r3, #0]
 80152ce:	6059      	str	r1, [r3, #4]

	uint64_t t = sysTime.Seconds;
 80152d0:	003b      	movs	r3, r7
 80152d2:	681b      	ldr	r3, [r3, #0]
 80152d4:	60bb      	str	r3, [r7, #8]
 80152d6:	2300      	movs	r3, #0
 80152d8:	60fb      	str	r3, [r7, #12]
	t *= 1000;
 80152da:	22fa      	movs	r2, #250	; 0xfa
 80152dc:	0092      	lsls	r2, r2, #2
 80152de:	2300      	movs	r3, #0
 80152e0:	68b8      	ldr	r0, [r7, #8]
 80152e2:	68f9      	ldr	r1, [r7, #12]
 80152e4:	f7eb f910 	bl	8000508 <__aeabi_lmul>
 80152e8:	0003      	movs	r3, r0
 80152ea:	000c      	movs	r4, r1
 80152ec:	60bb      	str	r3, [r7, #8]
 80152ee:	60fc      	str	r4, [r7, #12]
	t += sysTime.SubSeconds;
 80152f0:	003b      	movs	r3, r7
 80152f2:	2204      	movs	r2, #4
 80152f4:	5e9b      	ldrsh	r3, [r3, r2]
 80152f6:	001d      	movs	r5, r3
 80152f8:	17db      	asrs	r3, r3, #31
 80152fa:	001e      	movs	r6, r3
 80152fc:	68bb      	ldr	r3, [r7, #8]
 80152fe:	68fc      	ldr	r4, [r7, #12]
 8015300:	195b      	adds	r3, r3, r5
 8015302:	4174      	adcs	r4, r6
 8015304:	60bb      	str	r3, [r7, #8]
 8015306:	60fc      	str	r4, [r7, #12]
    itsdk_time_set_ms(t);
 8015308:	68bb      	ldr	r3, [r7, #8]
 801530a:	68fc      	ldr	r4, [r7, #12]
 801530c:	0018      	movs	r0, r3
 801530e:	0021      	movs	r1, r4
 8015310:	f007 f9d6 	bl	801c6c0 <itsdk_time_set_ms>
    DeltaTime = SysTimeSub( sysTime, calendarTime );


    HW_RTC_BKUPWrite( DeltaTime.Seconds, ( uint32_t )DeltaTime.SubSeconds );
    */
}
 8015314:	46c0      	nop			; (mov r8, r8)
 8015316:	46bd      	mov	sp, r7
 8015318:	b005      	add	sp, #20
 801531a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801531c <SysTimeGet>:


SysTime_t SysTimeGet( void )
{
 801531c:	b5b0      	push	{r4, r5, r7, lr}
 801531e:	b086      	sub	sp, #24
 8015320:	af00      	add	r7, sp, #0
 8015322:	6078      	str	r0, [r7, #4]

    SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 8015324:	2008      	movs	r0, #8
 8015326:	183b      	adds	r3, r7, r0
 8015328:	2200      	movs	r2, #0
 801532a:	601a      	str	r2, [r3, #0]
 801532c:	0005      	movs	r5, r0
 801532e:	183b      	adds	r3, r7, r0
 8015330:	2200      	movs	r2, #0
 8015332:	809a      	strh	r2, [r3, #4]
	uint64_t t = itsdk_time_get_ms();
 8015334:	f007 f9fe 	bl	801c734 <itsdk_time_get_ms>
 8015338:	0003      	movs	r3, r0
 801533a:	000c      	movs	r4, r1
 801533c:	613b      	str	r3, [r7, #16]
 801533e:	617c      	str	r4, [r7, #20]
	sysTime.Seconds = t / 1000;
 8015340:	6938      	ldr	r0, [r7, #16]
 8015342:	6979      	ldr	r1, [r7, #20]
 8015344:	22fa      	movs	r2, #250	; 0xfa
 8015346:	0092      	lsls	r2, r2, #2
 8015348:	2300      	movs	r3, #0
 801534a:	f7eb f8bd 	bl	80004c8 <__aeabi_uldivmod>
 801534e:	0003      	movs	r3, r0
 8015350:	000c      	movs	r4, r1
 8015352:	001a      	movs	r2, r3
 8015354:	0028      	movs	r0, r5
 8015356:	183b      	adds	r3, r7, r0
 8015358:	601a      	str	r2, [r3, #0]
	sysTime.SubSeconds = t - (sysTime.Seconds*1000);
 801535a:	693b      	ldr	r3, [r7, #16]
 801535c:	697c      	ldr	r4, [r7, #20]
 801535e:	b29a      	uxth	r2, r3
 8015360:	183b      	adds	r3, r7, r0
 8015362:	681b      	ldr	r3, [r3, #0]
 8015364:	b29b      	uxth	r3, r3
 8015366:	21fa      	movs	r1, #250	; 0xfa
 8015368:	0089      	lsls	r1, r1, #2
 801536a:	434b      	muls	r3, r1
 801536c:	b29b      	uxth	r3, r3
 801536e:	1ad3      	subs	r3, r2, r3
 8015370:	b29b      	uxth	r3, r3
 8015372:	b21a      	sxth	r2, r3
 8015374:	183b      	adds	r3, r7, r0
 8015376:	809a      	strh	r2, [r3, #4]

    HW_RTC_BKUPRead( &DeltaTime.Seconds, ( uint32_t* )&DeltaTime.SubSeconds );

    sysTime = SysTimeAdd( DeltaTime, calendarTime );
*/
    return sysTime;
 8015378:	687b      	ldr	r3, [r7, #4]
 801537a:	183a      	adds	r2, r7, r0
 801537c:	ca03      	ldmia	r2!, {r0, r1}
 801537e:	c303      	stmia	r3!, {r0, r1}
}
 8015380:	6878      	ldr	r0, [r7, #4]
 8015382:	46bd      	mov	sp, r7
 8015384:	b006      	add	sp, #24
 8015386:	bdb0      	pop	{r4, r5, r7, pc}

08015388 <removeFromList>:
 */

/**
 * Remove a element from the list
 */
static void removeFromList( TimerEvent_t *obj ) {
 8015388:	b580      	push	{r7, lr}
 801538a:	b084      	sub	sp, #16
 801538c:	af00      	add	r7, sp, #0
 801538e:	6078      	str	r0, [r7, #4]
	if( TimerListHead == obj ) {
 8015390:	4b11      	ldr	r3, [pc, #68]	; (80153d8 <removeFromList+0x50>)
 8015392:	681b      	ldr	r3, [r3, #0]
 8015394:	687a      	ldr	r2, [r7, #4]
 8015396:	429a      	cmp	r2, r3
 8015398:	d105      	bne.n	80153a6 <removeFromList+0x1e>
		TimerListHead = TimerListHead->Next;
 801539a:	4b0f      	ldr	r3, [pc, #60]	; (80153d8 <removeFromList+0x50>)
 801539c:	681b      	ldr	r3, [r3, #0]
 801539e:	695a      	ldr	r2, [r3, #20]
 80153a0:	4b0d      	ldr	r3, [pc, #52]	; (80153d8 <removeFromList+0x50>)
 80153a2:	601a      	str	r2, [r3, #0]
			   break;
		   }
		   cur = cur->Next;
		}
	}
}
 80153a4:	e014      	b.n	80153d0 <removeFromList+0x48>
		TimerEvent_t* cur = TimerListHead;
 80153a6:	4b0c      	ldr	r3, [pc, #48]	; (80153d8 <removeFromList+0x50>)
 80153a8:	681b      	ldr	r3, [r3, #0]
 80153aa:	60fb      	str	r3, [r7, #12]
		while( cur != NULL ) {
 80153ac:	e00d      	b.n	80153ca <removeFromList+0x42>
		   if( cur->Next == obj ) {
 80153ae:	68fb      	ldr	r3, [r7, #12]
 80153b0:	695b      	ldr	r3, [r3, #20]
 80153b2:	687a      	ldr	r2, [r7, #4]
 80153b4:	429a      	cmp	r2, r3
 80153b6:	d105      	bne.n	80153c4 <removeFromList+0x3c>
			   cur->Next = obj->Next;
 80153b8:	687b      	ldr	r3, [r7, #4]
 80153ba:	695a      	ldr	r2, [r3, #20]
 80153bc:	68fb      	ldr	r3, [r7, #12]
 80153be:	615a      	str	r2, [r3, #20]
			   break;
 80153c0:	46c0      	nop			; (mov r8, r8)
}
 80153c2:	e005      	b.n	80153d0 <removeFromList+0x48>
		   cur = cur->Next;
 80153c4:	68fb      	ldr	r3, [r7, #12]
 80153c6:	695b      	ldr	r3, [r3, #20]
 80153c8:	60fb      	str	r3, [r7, #12]
		while( cur != NULL ) {
 80153ca:	68fb      	ldr	r3, [r7, #12]
 80153cc:	2b00      	cmp	r3, #0
 80153ce:	d1ee      	bne.n	80153ae <removeFromList+0x26>
}
 80153d0:	46c0      	nop			; (mov r8, r8)
 80153d2:	46bd      	mov	sp, r7
 80153d4:	b004      	add	sp, #16
 80153d6:	bd80      	pop	{r7, pc}
 80153d8:	20001054 	.word	0x20001054

080153dc <TimerExists>:

/**
 * Check if the Object to be added is not already in the list
 */
static bool TimerExists( TimerEvent_t *obj )
{
 80153dc:	b580      	push	{r7, lr}
 80153de:	b084      	sub	sp, #16
 80153e0:	af00      	add	r7, sp, #0
 80153e2:	6078      	str	r0, [r7, #4]
  TimerEvent_t* cur = TimerListHead;
 80153e4:	4b0a      	ldr	r3, [pc, #40]	; (8015410 <TimerExists+0x34>)
 80153e6:	681b      	ldr	r3, [r3, #0]
 80153e8:	60fb      	str	r3, [r7, #12]

  while( cur != NULL ) {
 80153ea:	e008      	b.n	80153fe <TimerExists+0x22>
    if( cur == obj ) {
 80153ec:	68fa      	ldr	r2, [r7, #12]
 80153ee:	687b      	ldr	r3, [r7, #4]
 80153f0:	429a      	cmp	r2, r3
 80153f2:	d101      	bne.n	80153f8 <TimerExists+0x1c>
      return true;
 80153f4:	2301      	movs	r3, #1
 80153f6:	e006      	b.n	8015406 <TimerExists+0x2a>
    }
    cur = cur->Next;
 80153f8:	68fb      	ldr	r3, [r7, #12]
 80153fa:	695b      	ldr	r3, [r3, #20]
 80153fc:	60fb      	str	r3, [r7, #12]
  while( cur != NULL ) {
 80153fe:	68fb      	ldr	r3, [r7, #12]
 8015400:	2b00      	cmp	r3, #0
 8015402:	d1f3      	bne.n	80153ec <TimerExists+0x10>
  }
  return false;
 8015404:	2300      	movs	r3, #0

}
 8015406:	0018      	movs	r0, r3
 8015408:	46bd      	mov	sp, r7
 801540a:	b004      	add	sp, #16
 801540c:	bd80      	pop	{r7, pc}
 801540e:	46c0      	nop			; (mov r8, r8)
 8015410:	20001054 	.word	0x20001054

08015414 <TimerInsertTimer>:

/**
 * Insert the timer, as we manage it with no order, just put it on the head
 */
static void TimerInsertTimer( TimerEvent_t *obj)
{
 8015414:	b580      	push	{r7, lr}
 8015416:	b082      	sub	sp, #8
 8015418:	af00      	add	r7, sp, #0
 801541a:	6078      	str	r0, [r7, #4]
	obj->Next = TimerListHead;
 801541c:	4b05      	ldr	r3, [pc, #20]	; (8015434 <TimerInsertTimer+0x20>)
 801541e:	681a      	ldr	r2, [r3, #0]
 8015420:	687b      	ldr	r3, [r7, #4]
 8015422:	615a      	str	r2, [r3, #20]
	TimerListHead = obj;
 8015424:	4b03      	ldr	r3, [pc, #12]	; (8015434 <TimerInsertTimer+0x20>)
 8015426:	687a      	ldr	r2, [r7, #4]
 8015428:	601a      	str	r2, [r3, #0]
}
 801542a:	46c0      	nop			; (mov r8, r8)
 801542c:	46bd      	mov	sp, r7
 801542e:	b002      	add	sp, #8
 8015430:	bd80      	pop	{r7, pc}
 8015432:	46c0      	nop			; (mov r8, r8)
 8015434:	20001054 	.word	0x20001054

08015438 <TimerCallback>:


/** *********************************************************************************
 * This is the callback used for all the timer, it calls the callback function
 */
static void TimerCallback( uint32_t value ) {
 8015438:	b580      	push	{r7, lr}
 801543a:	b084      	sub	sp, #16
 801543c:	af00      	add	r7, sp, #0
 801543e:	6078      	str	r0, [r7, #4]

	TimerEvent_t *obj = (TimerEvent_t *)value;
 8015440:	687b      	ldr	r3, [r7, #4]
 8015442:	60fb      	str	r3, [r7, #12]
	LOG_DEBUG_LORAWAN(("TimerCallback (%d)\r\n",obj->ReloadValue));
	obj->IsStarted = false;
 8015444:	68fb      	ldr	r3, [r7, #12]
 8015446:	2200      	movs	r2, #0
 8015448:	721a      	strb	r2, [r3, #8]
	if (obj->Callback != NULL) {
 801544a:	68fb      	ldr	r3, [r7, #12]
 801544c:	68db      	ldr	r3, [r3, #12]
 801544e:	2b00      	cmp	r3, #0
 8015450:	d006      	beq.n	8015460 <TimerCallback+0x28>
		obj->Callback(obj->Context);
 8015452:	68fb      	ldr	r3, [r7, #12]
 8015454:	68da      	ldr	r2, [r3, #12]
 8015456:	68fb      	ldr	r3, [r7, #12]
 8015458:	691b      	ldr	r3, [r3, #16]
 801545a:	0018      	movs	r0, r3
 801545c:	4790      	blx	r2
 801545e:	e004      	b.n	801546a <TimerCallback+0x32>
	} else {
		ITSDK_ERROR_REPORT(ITSDK_ERROR_LORAWAN_TIME_NOCALLBACK,0);
 8015460:	4b06      	ldr	r3, [pc, #24]	; (801547c <TimerCallback+0x44>)
 8015462:	2100      	movs	r1, #0
 8015464:	0018      	movs	r0, r3
 8015466:	f005 fffd 	bl	801b464 <itsdk_error_report>
	}
	removeFromList(obj);
 801546a:	68fb      	ldr	r3, [r7, #12]
 801546c:	0018      	movs	r0, r3
 801546e:	f7ff ff8b 	bl	8015388 <removeFromList>
}
 8015472:	46c0      	nop			; (mov r8, r8)
 8015474:	46bd      	mov	sp, r7
 8015476:	b004      	add	sp, #16
 8015478:	bd80      	pop	{r7, pc}
 801547a:	46c0      	nop			; (mov r8, r8)
 801547c:	c0000104 	.word	0xc0000104

08015480 <TimerInit>:
/** ***********************************************************************************
 * Add / remove timer ...
 */

void TimerInit( TimerEvent_t *obj, void ( *callback )( void *context ) )
{
 8015480:	b580      	push	{r7, lr}
 8015482:	b082      	sub	sp, #8
 8015484:	af00      	add	r7, sp, #0
 8015486:	6078      	str	r0, [r7, #4]
 8015488:	6039      	str	r1, [r7, #0]
  LOG_DEBUG_LORAWAN(("TimerInit\r\n"));

  obj->Timestamp = 0;
 801548a:	687b      	ldr	r3, [r7, #4]
 801548c:	2200      	movs	r2, #0
 801548e:	601a      	str	r2, [r3, #0]
  obj->ReloadValue = 0;
 8015490:	687b      	ldr	r3, [r7, #4]
 8015492:	2200      	movs	r2, #0
 8015494:	605a      	str	r2, [r3, #4]
  obj->IsStarted = false;
 8015496:	687b      	ldr	r3, [r7, #4]
 8015498:	2200      	movs	r2, #0
 801549a:	721a      	strb	r2, [r3, #8]
  obj->IsNext2Expire = false;
 801549c:	687b      	ldr	r3, [r7, #4]
 801549e:	2200      	movs	r2, #0
 80154a0:	725a      	strb	r2, [r3, #9]
  obj->Callback = callback;
 80154a2:	687b      	ldr	r3, [r7, #4]
 80154a4:	683a      	ldr	r2, [r7, #0]
 80154a6:	60da      	str	r2, [r3, #12]
  obj->Context = NULL;
 80154a8:	687b      	ldr	r3, [r7, #4]
 80154aa:	2200      	movs	r2, #0
 80154ac:	611a      	str	r2, [r3, #16]
  obj->Next = NULL;
 80154ae:	687b      	ldr	r3, [r7, #4]
 80154b0:	2200      	movs	r2, #0
 80154b2:	615a      	str	r2, [r3, #20]
}
 80154b4:	46c0      	nop			; (mov r8, r8)
 80154b6:	46bd      	mov	sp, r7
 80154b8:	b002      	add	sp, #8
 80154ba:	bd80      	pop	{r7, pc}

080154bc <TimerSetValue>:
 * This is changing the duration of the timer. The value is given in ms.
 * We search for the itsdk timer structure and update it when running.
 * If not running the timestamp field will keep the value in ms.
 */
void TimerSetValue( TimerEvent_t *obj, uint32_t value )
{
 80154bc:	b580      	push	{r7, lr}
 80154be:	b084      	sub	sp, #16
 80154c0:	af00      	add	r7, sp, #0
 80154c2:	6078      	str	r0, [r7, #4]
 80154c4:	6039      	str	r1, [r7, #0]
	LOG_DEBUG_LORAWAN(("TimerSetValue %d\r\n",value));
	// search the real timer based on the context
	itsdk_stimer_slot_t * t = itsdk_stimer_get(TimerCallback,(uint32_t)obj);
 80154c6:	687a      	ldr	r2, [r7, #4]
 80154c8:	4b11      	ldr	r3, [pc, #68]	; (8015510 <TimerSetValue+0x54>)
 80154ca:	0011      	movs	r1, r2
 80154cc:	0018      	movs	r0, r3
 80154ce:	f007 fa11 	bl	801c8f4 <itsdk_stimer_get>
 80154d2:	0003      	movs	r3, r0
 80154d4:	60fb      	str	r3, [r7, #12]
	if ( t != NULL ) {
 80154d6:	68fb      	ldr	r3, [r7, #12]
 80154d8:	2b00      	cmp	r3, #0
 80154da:	d00e      	beq.n	80154fa <TimerSetValue+0x3e>
		// best is to stop the timer and restart it with the new duration
		TimerStop(obj);
 80154dc:	687b      	ldr	r3, [r7, #4]
 80154de:	0018      	movs	r0, r3
 80154e0:	f000 f86e 	bl	80155c0 <TimerStop>
		obj->Timestamp = value;
 80154e4:	687b      	ldr	r3, [r7, #4]
 80154e6:	683a      	ldr	r2, [r7, #0]
 80154e8:	601a      	str	r2, [r3, #0]
		obj->ReloadValue = value;
 80154ea:	687b      	ldr	r3, [r7, #4]
 80154ec:	683a      	ldr	r2, [r7, #0]
 80154ee:	605a      	str	r2, [r3, #4]
		TimerStart(obj);
 80154f0:	687b      	ldr	r3, [r7, #4]
 80154f2:	0018      	movs	r0, r3
 80154f4:	f000 f80e 	bl	8015514 <TimerStart>
	} else {
		// the timer is not running, so we just need to update the local structure
		obj->Timestamp = value;
		obj->ReloadValue = value;
	}
}
 80154f8:	e005      	b.n	8015506 <TimerSetValue+0x4a>
		obj->Timestamp = value;
 80154fa:	687b      	ldr	r3, [r7, #4]
 80154fc:	683a      	ldr	r2, [r7, #0]
 80154fe:	601a      	str	r2, [r3, #0]
		obj->ReloadValue = value;
 8015500:	687b      	ldr	r3, [r7, #4]
 8015502:	683a      	ldr	r2, [r7, #0]
 8015504:	605a      	str	r2, [r3, #4]
}
 8015506:	46c0      	nop			; (mov r8, r8)
 8015508:	46bd      	mov	sp, r7
 801550a:	b004      	add	sp, #16
 801550c:	bd80      	pop	{r7, pc}
 801550e:	46c0      	nop			; (mov r8, r8)
 8015510:	08015439 	.word	0x08015439

08015514 <TimerStart>:

/**
 * Add a Timer in the list and start it using the it_sdk timer module
 */
void TimerStart( TimerEvent_t *obj )
{
 8015514:	b5b0      	push	{r4, r5, r7, lr}
 8015516:	b084      	sub	sp, #16
 8015518:	af00      	add	r7, sp, #0
 801551a:	6078      	str	r0, [r7, #4]
	LOG_INFO_LORAWAN(("St %d ms\r\n",obj->ReloadValue));

	itsdk_enterCriticalSection();
 801551c:	f008 f938 	bl	801d790 <itsdk_enterCriticalSection>
	// do not add a timer already existing
	if( ( obj == NULL ) || ( TimerExists( obj ) == true ) ) {
 8015520:	687b      	ldr	r3, [r7, #4]
 8015522:	2b00      	cmp	r3, #0
 8015524:	d005      	beq.n	8015532 <TimerStart+0x1e>
 8015526:	687b      	ldr	r3, [r7, #4]
 8015528:	0018      	movs	r0, r3
 801552a:	f7ff ff57 	bl	80153dc <TimerExists>
 801552e:	1e03      	subs	r3, r0, #0
 8015530:	d007      	beq.n	8015542 <TimerStart+0x2e>
		itsdk_leaveCriticalSection();
 8015532:	f008 f941 	bl	801d7b8 <itsdk_leaveCriticalSection>
		ITSDK_ERROR_REPORT(ITSDK_ERROR_STIMER_ALREADY_SET,0);
 8015536:	4b1e      	ldr	r3, [pc, #120]	; (80155b0 <TimerStart+0x9c>)
 8015538:	2100      	movs	r1, #0
 801553a:	0018      	movs	r0, r3
 801553c:	f005 ff92 	bl	801b464 <itsdk_error_report>
	    return;
 8015540:	e032      	b.n	80155a8 <TimerStart+0x94>
	}
	obj->Timestamp = obj->ReloadValue;
 8015542:	687b      	ldr	r3, [r7, #4]
 8015544:	685a      	ldr	r2, [r3, #4]
 8015546:	687b      	ldr	r3, [r7, #4]
 8015548:	601a      	str	r2, [r3, #0]
	obj->IsStarted = true;
 801554a:	687b      	ldr	r3, [r7, #4]
 801554c:	2201      	movs	r2, #1
 801554e:	721a      	strb	r2, [r3, #8]
	obj->IsNext2Expire = false;
 8015550:	687b      	ldr	r3, [r7, #4]
 8015552:	2200      	movs	r2, #0
 8015554:	725a      	strb	r2, [r3, #9]

	if( TimerListHead == NULL ) {
 8015556:	4b17      	ldr	r3, [pc, #92]	; (80155b4 <TimerStart+0xa0>)
 8015558:	681b      	ldr	r3, [r3, #0]
 801555a:	2b00      	cmp	r3, #0
 801555c:	d106      	bne.n	801556c <TimerStart+0x58>
		obj->Next = NULL;
 801555e:	687b      	ldr	r3, [r7, #4]
 8015560:	2200      	movs	r2, #0
 8015562:	615a      	str	r2, [r3, #20]
		TimerListHead = obj;
 8015564:	4b13      	ldr	r3, [pc, #76]	; (80155b4 <TimerStart+0xa0>)
 8015566:	687a      	ldr	r2, [r7, #4]
 8015568:	601a      	str	r2, [r3, #0]
 801556a:	e003      	b.n	8015574 <TimerStart+0x60>
	} else {
	  // obj->Timestamp += elapsedTime; Not needed
      TimerInsertTimer( obj);
 801556c:	687b      	ldr	r3, [r7, #4]
 801556e:	0018      	movs	r0, r3
 8015570:	f7ff ff50 	bl	8015414 <TimerInsertTimer>
	}
	itsdk_timer_return_t ret = itsdk_stimer_register(
 8015574:	687b      	ldr	r3, [r7, #4]
 8015576:	6858      	ldr	r0, [r3, #4]
 8015578:	687a      	ldr	r2, [r7, #4]
 801557a:	250f      	movs	r5, #15
 801557c:	197c      	adds	r4, r7, r5
 801557e:	490e      	ldr	r1, [pc, #56]	; (80155b8 <TimerStart+0xa4>)
 8015580:	2300      	movs	r3, #0
 8015582:	f007 f909 	bl	801c798 <itsdk_stimer_register>
 8015586:	0003      	movs	r3, r0
 8015588:	7023      	strb	r3, [r4, #0]
									obj->ReloadValue,
									TimerCallback,
									(uint32_t)obj,
									TIMER_ACCEPT_LOWPOWER
		 	 	 	 	 	   );
	if ( ret != TIMER_INIT_SUCCESS ) {
 801558a:	197b      	adds	r3, r7, r5
 801558c:	781b      	ldrb	r3, [r3, #0]
 801558e:	2b00      	cmp	r3, #0
 8015590:	d008      	beq.n	80155a4 <TimerStart+0x90>
		ITSDK_ERROR_REPORT(ITSDK_ERROR_LORAWAN_TIME_INITFLD,(uint16_t)ret);
 8015592:	230f      	movs	r3, #15
 8015594:	18fb      	adds	r3, r7, r3
 8015596:	781b      	ldrb	r3, [r3, #0]
 8015598:	b29b      	uxth	r3, r3
 801559a:	4a08      	ldr	r2, [pc, #32]	; (80155bc <TimerStart+0xa8>)
 801559c:	0019      	movs	r1, r3
 801559e:	0010      	movs	r0, r2
 80155a0:	f005 ff60 	bl	801b464 <itsdk_error_report>
	}
	itsdk_leaveCriticalSection();
 80155a4:	f008 f908 	bl	801d7b8 <itsdk_leaveCriticalSection>

}
 80155a8:	46bd      	mov	sp, r7
 80155aa:	b004      	add	sp, #16
 80155ac:	bdb0      	pop	{r4, r5, r7, pc}
 80155ae:	46c0      	nop			; (mov r8, r8)
 80155b0:	80000011 	.word	0x80000011
 80155b4:	20001054 	.word	0x20001054
 80155b8:	08015439 	.word	0x08015439
 80155bc:	d0000105 	.word	0xd0000105

080155c0 <TimerStop>:

/**
 *
 */
void TimerStop( TimerEvent_t *obj ) 
{
 80155c0:	b580      	push	{r7, lr}
 80155c2:	b082      	sub	sp, #8
 80155c4:	af00      	add	r7, sp, #0
 80155c6:	6078      	str	r0, [r7, #4]
	LOG_INFO_LORAWAN(("Sp %d ms\r\n",obj->ReloadValue));

	itsdk_enterCriticalSection();
 80155c8:	f008 f8e2 	bl	801d790 <itsdk_enterCriticalSection>
	// do not stop a non existing
	if( ( obj == NULL ) || ( TimerExists( obj ) == false ) ) {
 80155cc:	687b      	ldr	r3, [r7, #4]
 80155ce:	2b00      	cmp	r3, #0
 80155d0:	d00a      	beq.n	80155e8 <TimerStop+0x28>
 80155d2:	687b      	ldr	r3, [r7, #4]
 80155d4:	0018      	movs	r0, r3
 80155d6:	f7ff ff01 	bl	80153dc <TimerExists>
 80155da:	0003      	movs	r3, r0
 80155dc:	001a      	movs	r2, r3
 80155de:	2301      	movs	r3, #1
 80155e0:	4053      	eors	r3, r2
 80155e2:	b2db      	uxtb	r3, r3
 80155e4:	2b00      	cmp	r3, #0
 80155e6:	d002      	beq.n	80155ee <TimerStop+0x2e>
		itsdk_leaveCriticalSection();
 80155e8:	f008 f8e6 	bl	801d7b8 <itsdk_leaveCriticalSection>
	    return;
 80155ec:	e012      	b.n	8015614 <TimerStop+0x54>
	}

	if (obj->IsStarted) {
 80155ee:	687b      	ldr	r3, [r7, #4]
 80155f0:	7a1b      	ldrb	r3, [r3, #8]
 80155f2:	2b00      	cmp	r3, #0
 80155f4:	d008      	beq.n	8015608 <TimerStop+0x48>
		itsdk_stimer_stop(
 80155f6:	687a      	ldr	r2, [r7, #4]
 80155f8:	4b08      	ldr	r3, [pc, #32]	; (801561c <TimerStop+0x5c>)
 80155fa:	0011      	movs	r1, r2
 80155fc:	0018      	movs	r0, r3
 80155fe:	f007 f939 	bl	801c874 <itsdk_stimer_stop>
							TimerCallback,
							(uint32_t)obj
						);
		obj->IsStarted = false;
 8015602:	687b      	ldr	r3, [r7, #4]
 8015604:	2200      	movs	r2, #0
 8015606:	721a      	strb	r2, [r3, #8]
	}
	removeFromList(obj);
 8015608:	687b      	ldr	r3, [r7, #4]
 801560a:	0018      	movs	r0, r3
 801560c:	f7ff febc 	bl	8015388 <removeFromList>
	itsdk_leaveCriticalSection();
 8015610:	f008 f8d2 	bl	801d7b8 <itsdk_leaveCriticalSection>
}  
 8015614:	46bd      	mov	sp, r7
 8015616:	b002      	add	sp, #8
 8015618:	bd80      	pop	{r7, pc}
 801561a:	46c0      	nop			; (mov r8, r8)
 801561c:	08015439 	.word	0x08015439

08015620 <TimerIsStarted>:
  TimerStop( obj );
  TimerStart( obj );
}

bool TimerIsStarted( TimerEvent_t *obj )
{
 8015620:	b580      	push	{r7, lr}
 8015622:	b082      	sub	sp, #8
 8015624:	af00      	add	r7, sp, #0
 8015626:	6078      	str	r0, [r7, #4]
  return obj->IsStarted;
 8015628:	687b      	ldr	r3, [r7, #4]
 801562a:	7a1b      	ldrb	r3, [r3, #8]
}
 801562c:	0018      	movs	r0, r3
 801562e:	46bd      	mov	sp, r7
 8015630:	b002      	add	sp, #8
 8015632:	bd80      	pop	{r7, pc}

08015634 <TimerGetCurrentTime>:




TimerTime_t TimerGetCurrentTime( void )
{
 8015634:	b5b0      	push	{r4, r5, r7, lr}
 8015636:	af00      	add	r7, sp, #0
	return (uint32_t)itsdk_time_get_ms();
 8015638:	f007 f87c 	bl	801c734 <itsdk_time_get_ms>
 801563c:	0003      	movs	r3, r0
 801563e:	000c      	movs	r4, r1
}
 8015640:	0018      	movs	r0, r3
 8015642:	46bd      	mov	sp, r7
 8015644:	bdb0      	pop	{r4, r5, r7, pc}

08015646 <TimerGetElapsedTime>:

TimerTime_t TimerGetElapsedTime( TimerTime_t past )
{
 8015646:	b580      	push	{r7, lr}
 8015648:	b082      	sub	sp, #8
 801564a:	af00      	add	r7, sp, #0
 801564c:	6078      	str	r0, [r7, #4]
	return TimerGetCurrentTime() - past;
 801564e:	f7ff fff1 	bl	8015634 <TimerGetCurrentTime>
 8015652:	0002      	movs	r2, r0
 8015654:	687b      	ldr	r3, [r7, #4]
 8015656:	1ad3      	subs	r3, r2, r3
}
 8015658:	0018      	movs	r0, r3
 801565a:	46bd      	mov	sp, r7
 801565c:	b002      	add	sp, #8
 801565e:	bd80      	pop	{r7, pc}

08015660 <rand1>:
#define RAND_LOCAL_MAX 2147483647L

static uint32_t next = 1;

int32_t rand1( void )
{
 8015660:	b580      	push	{r7, lr}
 8015662:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 8015664:	4b08      	ldr	r3, [pc, #32]	; (8015688 <rand1+0x28>)
 8015666:	681b      	ldr	r3, [r3, #0]
 8015668:	4a08      	ldr	r2, [pc, #32]	; (801568c <rand1+0x2c>)
 801566a:	4353      	muls	r3, r2
 801566c:	4a08      	ldr	r2, [pc, #32]	; (8015690 <rand1+0x30>)
 801566e:	189a      	adds	r2, r3, r2
 8015670:	4b05      	ldr	r3, [pc, #20]	; (8015688 <rand1+0x28>)
 8015672:	601a      	str	r2, [r3, #0]
 8015674:	4b04      	ldr	r3, [pc, #16]	; (8015688 <rand1+0x28>)
 8015676:	681b      	ldr	r3, [r3, #0]
 8015678:	4906      	ldr	r1, [pc, #24]	; (8015694 <rand1+0x34>)
 801567a:	0018      	movs	r0, r3
 801567c:	f7ea fdd2 	bl	8000224 <__aeabi_uidivmod>
 8015680:	000b      	movs	r3, r1
}
 8015682:	0018      	movs	r0, r3
 8015684:	46bd      	mov	sp, r7
 8015686:	bd80      	pop	{r7, pc}
 8015688:	2000007c 	.word	0x2000007c
 801568c:	41c64e6d 	.word	0x41c64e6d
 8015690:	00003039 	.word	0x00003039
 8015694:	7fffffff 	.word	0x7fffffff

08015698 <srand1>:

void srand1( uint32_t seed )
{
 8015698:	b580      	push	{r7, lr}
 801569a:	b082      	sub	sp, #8
 801569c:	af00      	add	r7, sp, #0
 801569e:	6078      	str	r0, [r7, #4]
    next = seed;
 80156a0:	4b03      	ldr	r3, [pc, #12]	; (80156b0 <srand1+0x18>)
 80156a2:	687a      	ldr	r2, [r7, #4]
 80156a4:	601a      	str	r2, [r3, #0]
}
 80156a6:	46c0      	nop			; (mov r8, r8)
 80156a8:	46bd      	mov	sp, r7
 80156aa:	b002      	add	sp, #8
 80156ac:	bd80      	pop	{r7, pc}
 80156ae:	46c0      	nop			; (mov r8, r8)
 80156b0:	2000007c 	.word	0x2000007c

080156b4 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 80156b4:	b580      	push	{r7, lr}
 80156b6:	b082      	sub	sp, #8
 80156b8:	af00      	add	r7, sp, #0
 80156ba:	6078      	str	r0, [r7, #4]
 80156bc:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 80156be:	f7ff ffcf 	bl	8015660 <rand1>
 80156c2:	683a      	ldr	r2, [r7, #0]
 80156c4:	687b      	ldr	r3, [r7, #4]
 80156c6:	1ad3      	subs	r3, r2, r3
 80156c8:	3301      	adds	r3, #1
 80156ca:	0019      	movs	r1, r3
 80156cc:	f7ea fe94 	bl	80003f8 <__aeabi_idivmod>
 80156d0:	000b      	movs	r3, r1
 80156d2:	001a      	movs	r2, r3
 80156d4:	687b      	ldr	r3, [r7, #4]
 80156d6:	18d3      	adds	r3, r2, r3
}
 80156d8:	0018      	movs	r0, r3
 80156da:	46bd      	mov	sp, r7
 80156dc:	b002      	add	sp, #8
 80156de:	bd80      	pop	{r7, pc}

080156e0 <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 80156e0:	b580      	push	{r7, lr}
 80156e2:	b084      	sub	sp, #16
 80156e4:	af00      	add	r7, sp, #0
 80156e6:	60f8      	str	r0, [r7, #12]
 80156e8:	60b9      	str	r1, [r7, #8]
 80156ea:	1dbb      	adds	r3, r7, #6
 80156ec:	801a      	strh	r2, [r3, #0]
    while( size-- )
 80156ee:	e007      	b.n	8015700 <memcpy1+0x20>
    {
        *dst++ = *src++;
 80156f0:	68ba      	ldr	r2, [r7, #8]
 80156f2:	1c53      	adds	r3, r2, #1
 80156f4:	60bb      	str	r3, [r7, #8]
 80156f6:	68fb      	ldr	r3, [r7, #12]
 80156f8:	1c59      	adds	r1, r3, #1
 80156fa:	60f9      	str	r1, [r7, #12]
 80156fc:	7812      	ldrb	r2, [r2, #0]
 80156fe:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8015700:	1dbb      	adds	r3, r7, #6
 8015702:	881b      	ldrh	r3, [r3, #0]
 8015704:	1dba      	adds	r2, r7, #6
 8015706:	1e59      	subs	r1, r3, #1
 8015708:	8011      	strh	r1, [r2, #0]
 801570a:	2b00      	cmp	r3, #0
 801570c:	d1f0      	bne.n	80156f0 <memcpy1+0x10>
    }
}
 801570e:	46c0      	nop			; (mov r8, r8)
 8015710:	46bd      	mov	sp, r7
 8015712:	b004      	add	sp, #16
 8015714:	bd80      	pop	{r7, pc}

08015716 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8015716:	b580      	push	{r7, lr}
 8015718:	b084      	sub	sp, #16
 801571a:	af00      	add	r7, sp, #0
 801571c:	60f8      	str	r0, [r7, #12]
 801571e:	60b9      	str	r1, [r7, #8]
 8015720:	1dbb      	adds	r3, r7, #6
 8015722:	801a      	strh	r2, [r3, #0]
    dst = dst + ( size - 1 );
 8015724:	1dbb      	adds	r3, r7, #6
 8015726:	881b      	ldrh	r3, [r3, #0]
 8015728:	3b01      	subs	r3, #1
 801572a:	68fa      	ldr	r2, [r7, #12]
 801572c:	18d3      	adds	r3, r2, r3
 801572e:	60fb      	str	r3, [r7, #12]
    while( size-- )
 8015730:	e007      	b.n	8015742 <memcpyr+0x2c>
    {
        *dst-- = *src++;
 8015732:	68ba      	ldr	r2, [r7, #8]
 8015734:	1c53      	adds	r3, r2, #1
 8015736:	60bb      	str	r3, [r7, #8]
 8015738:	68fb      	ldr	r3, [r7, #12]
 801573a:	1e59      	subs	r1, r3, #1
 801573c:	60f9      	str	r1, [r7, #12]
 801573e:	7812      	ldrb	r2, [r2, #0]
 8015740:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8015742:	1dbb      	adds	r3, r7, #6
 8015744:	881b      	ldrh	r3, [r3, #0]
 8015746:	1dba      	adds	r2, r7, #6
 8015748:	1e59      	subs	r1, r3, #1
 801574a:	8011      	strh	r1, [r2, #0]
 801574c:	2b00      	cmp	r3, #0
 801574e:	d1f0      	bne.n	8015732 <memcpyr+0x1c>
    }
}
 8015750:	46c0      	nop			; (mov r8, r8)
 8015752:	46bd      	mov	sp, r7
 8015754:	b004      	add	sp, #16
 8015756:	bd80      	pop	{r7, pc}

08015758 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 8015758:	b580      	push	{r7, lr}
 801575a:	b082      	sub	sp, #8
 801575c:	af00      	add	r7, sp, #0
 801575e:	6078      	str	r0, [r7, #4]
 8015760:	0008      	movs	r0, r1
 8015762:	0011      	movs	r1, r2
 8015764:	1cfb      	adds	r3, r7, #3
 8015766:	1c02      	adds	r2, r0, #0
 8015768:	701a      	strb	r2, [r3, #0]
 801576a:	003b      	movs	r3, r7
 801576c:	1c0a      	adds	r2, r1, #0
 801576e:	801a      	strh	r2, [r3, #0]
    while( size-- )
 8015770:	e005      	b.n	801577e <memset1+0x26>
    {
        *dst++ = value;
 8015772:	687b      	ldr	r3, [r7, #4]
 8015774:	1c5a      	adds	r2, r3, #1
 8015776:	607a      	str	r2, [r7, #4]
 8015778:	1cfa      	adds	r2, r7, #3
 801577a:	7812      	ldrb	r2, [r2, #0]
 801577c:	701a      	strb	r2, [r3, #0]
    while( size-- )
 801577e:	003b      	movs	r3, r7
 8015780:	881b      	ldrh	r3, [r3, #0]
 8015782:	003a      	movs	r2, r7
 8015784:	1e59      	subs	r1, r3, #1
 8015786:	8011      	strh	r1, [r2, #0]
 8015788:	2b00      	cmp	r3, #0
 801578a:	d1f2      	bne.n	8015772 <memset1+0x1a>
    }
}
 801578c:	46c0      	nop			; (mov r8, r8)
 801578e:	46bd      	mov	sp, r7
 8015790:	b002      	add	sp, #8
 8015792:	bd80      	pop	{r7, pc}

08015794 <SX1276InitLowPower>:

/**
 * Init the SX1276 device and switch it to low power.
 * This allows to have a basic init before executing the full radio init
 */
void SX1276InitLowPower( void ) {
 8015794:	b580      	push	{r7, lr}
 8015796:	af00      	add	r7, sp, #0

    LOG_INFO_SX1276((">> mSX1276InitLowPower\r\n"));

	gpio_configure(ITSDK_SX1276_TCXO_VCC_BANK, ITSDK_SX1276_TCXO_VCC_PIN, GPIO_OUTPUT_PP );
 8015798:	2380      	movs	r3, #128	; 0x80
 801579a:	015b      	lsls	r3, r3, #5
 801579c:	2200      	movs	r2, #0
 801579e:	0019      	movs	r1, r3
 80157a0:	2000      	movs	r0, #0
 80157a2:	f007 fc75 	bl	801d090 <gpio_configure>
    TCXO_ON();
 80157a6:	2380      	movs	r3, #128	; 0x80
 80157a8:	015b      	lsls	r3, r3, #5
 80157aa:	0019      	movs	r1, r3
 80157ac:	2000      	movs	r0, #0
 80157ae:	f007 fe77 	bl	801d4a0 <gpio_set>
    itsdk_delayMs(ITSDK_MURATA_WAKEUP_TIME);
 80157b2:	2035      	movs	r0, #53	; 0x35
 80157b4:	f007 ffc6 	bl	801d744 <itsdk_delayMs>
	if (ITSDK_SX1276_DIO_0_PIN != __LP_GPIO_NONE ) {
		gpio_configure(ITSDK_SX1276_DIO_0_BANK, ITSDK_SX1276_DIO_0_PIN, GPIO_ANALOG );
 80157b8:	220e      	movs	r2, #14
 80157ba:	2110      	movs	r1, #16
 80157bc:	2001      	movs	r0, #1
 80157be:	f007 fc67 	bl	801d090 <gpio_configure>
	}
	if (ITSDK_SX1276_DIO_1_PIN != __LP_GPIO_NONE ) {
		gpio_configure(ITSDK_SX1276_DIO_1_BANK, ITSDK_SX1276_DIO_1_PIN, GPIO_ANALOG );
 80157c2:	220e      	movs	r2, #14
 80157c4:	2102      	movs	r1, #2
 80157c6:	2001      	movs	r0, #1
 80157c8:	f007 fc62 	bl	801d090 <gpio_configure>
	}
	if (ITSDK_SX1276_DIO_2_PIN != __LP_GPIO_NONE ) {
		gpio_configure(ITSDK_SX1276_DIO_2_BANK, ITSDK_SX1276_DIO_2_PIN, GPIO_ANALOG );
 80157cc:	220e      	movs	r2, #14
 80157ce:	2101      	movs	r1, #1
 80157d0:	2001      	movs	r0, #1
 80157d2:	f007 fc5d 	bl	801d090 <gpio_configure>
	}
	if (ITSDK_SX1276_DIO_3_PIN != __LP_GPIO_NONE ) {
		gpio_configure(ITSDK_SX1276_DIO_3_BANK, ITSDK_SX1276_DIO_3_PIN, GPIO_ANALOG );
 80157d6:	2380      	movs	r3, #128	; 0x80
 80157d8:	019b      	lsls	r3, r3, #6
 80157da:	220e      	movs	r2, #14
 80157dc:	0019      	movs	r1, r3
 80157de:	2002      	movs	r0, #2
 80157e0:	f007 fc56 	bl	801d090 <gpio_configure>
		if (ITSDK_SX1276_DIO_5_PIN != __LP_GPIO_NONE ) {
			gpio_configure(ITSDK_SX1276_DIO_5_BANK, ITSDK_SX1276_DIO_5_PIN, GPIO_ANALOG );
		}
	#endif

 	gpio_configure(ITSDK_SX1276_NSS_BANK, ITSDK_SX1276_NSS_PIN, GPIO_OUTPUT_PULLUP );
 80157e4:	2380      	movs	r3, #128	; 0x80
 80157e6:	021b      	lsls	r3, r3, #8
 80157e8:	2201      	movs	r2, #1
 80157ea:	0019      	movs	r1, r3
 80157ec:	2000      	movs	r0, #0
 80157ee:	f007 fc4f 	bl	801d090 <gpio_configure>
	gpio_set(ITSDK_SX1276_NSS_BANK, ITSDK_SX1276_NSS_PIN);
 80157f2:	2380      	movs	r3, #128	; 0x80
 80157f4:	021b      	lsls	r3, r3, #8
 80157f6:	0019      	movs	r1, r3
 80157f8:	2000      	movs	r0, #0
 80157fa:	f007 fe51 	bl	801d4a0 <gpio_set>
	SX1276Reset();
 80157fe:	f001 fead 	bl	801755c <SX1276Reset>
	SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | RF_OPMODE_SLEEP  );	// SLEEP mode is 1uA when Standby Mode is 1,6mA
 8015802:	2001      	movs	r0, #1
 8015804:	f001 ff80 	bl	8017708 <SX1276Read>
 8015808:	0003      	movs	r3, r0
 801580a:	001a      	movs	r2, r3
 801580c:	2307      	movs	r3, #7
 801580e:	439a      	bics	r2, r3
 8015810:	0013      	movs	r3, r2
 8015812:	b2db      	uxtb	r3, r3
 8015814:	0019      	movs	r1, r3
 8015816:	2001      	movs	r0, #1
 8015818:	f001 ff62 	bl	80176e0 <SX1276Write>
	SX1276SetAntSwLowPower(true);
 801581c:	2001      	movs	r0, #1
 801581e:	f000 f9fc 	bl	8015c1a <SX1276SetAntSwLowPower>
	itsdk_delayMs(10);
 8015822:	200a      	movs	r0, #10
 8015824:	f007 ff8e 	bl	801d744 <itsdk_delayMs>
	TCXO_OFF();
 8015828:	2380      	movs	r3, #128	; 0x80
 801582a:	015b      	lsls	r3, r3, #5
 801582c:	0019      	movs	r1, r3
 801582e:	2000      	movs	r0, #0
 8015830:	f007 fe4e 	bl	801d4d0 <gpio_reset>

}
 8015834:	46c0      	nop			; (mov r8, r8)
 8015836:	46bd      	mov	sp, r7
 8015838:	bd80      	pop	{r7, pc}

0801583a <SX1276GetWakeTime>:


uint32_t SX1276GetWakeTime( void )
{
 801583a:	b580      	push	{r7, lr}
 801583c:	af00      	add	r7, sp, #0
  LOG_INFO_SX1276((">> mSX1276GetWakeTime\r\n"));
  return  0;
 801583e:	2300      	movs	r3, #0
}
 8015840:	0018      	movs	r0, r3
 8015842:	46bd      	mov	sp, r7
 8015844:	bd80      	pop	{r7, pc}

08015846 <SX1276SetXO>:

void SX1276SetXO( uint8_t state )
{
 8015846:	b580      	push	{r7, lr}
 8015848:	b082      	sub	sp, #8
 801584a:	af00      	add	r7, sp, #0
 801584c:	0002      	movs	r2, r0
 801584e:	1dfb      	adds	r3, r7, #7
 8015850:	701a      	strb	r2, [r3, #0]
  LOG_INFO_SX1276((">> mSX1276SetXO (%s)\r\n",((state==SET)?"ON":"OFF")));

  if (state == SET )
 8015852:	1dfb      	adds	r3, r7, #7
 8015854:	781b      	ldrb	r3, [r3, #0]
 8015856:	2b01      	cmp	r3, #1
 8015858:	d109      	bne.n	801586e <SX1276SetXO+0x28>
  {
    TCXO_ON(); 
 801585a:	2380      	movs	r3, #128	; 0x80
 801585c:	015b      	lsls	r3, r3, #5
 801585e:	0019      	movs	r1, r3
 8015860:	2000      	movs	r0, #0
 8015862:	f007 fe1d 	bl	801d4a0 <gpio_set>
    itsdk_delayMs(ITSDK_MURATA_TCXO_WARMUP);
 8015866:	2032      	movs	r0, #50	; 0x32
 8015868:	f007 ff6c 	bl	801d744 <itsdk_delayMs>
  else
  {
	itsdk_delayMs(10);
    TCXO_OFF(); 
  }
}
 801586c:	e008      	b.n	8015880 <SX1276SetXO+0x3a>
	itsdk_delayMs(10);
 801586e:	200a      	movs	r0, #10
 8015870:	f007 ff68 	bl	801d744 <itsdk_delayMs>
    TCXO_OFF(); 
 8015874:	2380      	movs	r3, #128	; 0x80
 8015876:	015b      	lsls	r3, r3, #5
 8015878:	0019      	movs	r1, r3
 801587a:	2000      	movs	r0, #0
 801587c:	f007 fe28 	bl	801d4d0 <gpio_reset>
}
 8015880:	46c0      	nop			; (mov r8, r8)
 8015882:	46bd      	mov	sp, r7
 8015884:	b002      	add	sp, #8
 8015886:	bd80      	pop	{r7, pc}

08015888 <SX1276IoInit>:
 * --
 * Ensure the IRQ are configured later by calling SX1276IoIrqInit or equivalent.
 * For sigfox STLL_Radio_IoInit does the job.
 */
void SX1276IoInit( void )
{
 8015888:	b580      	push	{r7, lr}
 801588a:	af00      	add	r7, sp, #0
  LOG_INFO_SX1276((">> mSX1276IoInit\r\n"));

  SX1276BoardInit( &BoardCallbacks );
 801588c:	4b11      	ldr	r3, [pc, #68]	; (80158d4 <SX1276IoInit+0x4c>)
 801588e:	0018      	movs	r0, r3
 8015890:	f000 fa48 	bl	8015d24 <SX1276BoardInit>
  if ( ITSDK_SX1276_DIO_0_PIN != __LP_GPIO_NONE ) {
     gpio_configure(ITSDK_SX1276_DIO_0_BANK, ITSDK_SX1276_DIO_0_PIN, GPIO_ANALOG );
 8015894:	220e      	movs	r2, #14
 8015896:	2110      	movs	r1, #16
 8015898:	2001      	movs	r0, #1
 801589a:	f007 fbf9 	bl	801d090 <gpio_configure>
  }
  if ( ITSDK_SX1276_DIO_1_PIN != __LP_GPIO_NONE ) {
     gpio_configure(ITSDK_SX1276_DIO_1_BANK, ITSDK_SX1276_DIO_1_PIN, GPIO_ANALOG );
 801589e:	220e      	movs	r2, #14
 80158a0:	2102      	movs	r1, #2
 80158a2:	2001      	movs	r0, #1
 80158a4:	f007 fbf4 	bl	801d090 <gpio_configure>
  }
  if ( ITSDK_SX1276_DIO_2_PIN != __LP_GPIO_NONE ) {
     gpio_configure(ITSDK_SX1276_DIO_2_BANK, ITSDK_SX1276_DIO_2_PIN, GPIO_ANALOG );
 80158a8:	220e      	movs	r2, #14
 80158aa:	2101      	movs	r1, #1
 80158ac:	2001      	movs	r0, #1
 80158ae:	f007 fbef 	bl	801d090 <gpio_configure>
  }
  if ( ITSDK_SX1276_DIO_3_PIN != __LP_GPIO_NONE ) {
    gpio_configure(ITSDK_SX1276_DIO_3_BANK, ITSDK_SX1276_DIO_3_PIN, GPIO_ANALOG );
 80158b2:	2380      	movs	r3, #128	; 0x80
 80158b4:	019b      	lsls	r3, r3, #6
 80158b6:	220e      	movs	r2, #14
 80158b8:	0019      	movs	r1, r3
 80158ba:	2002      	movs	r0, #2
 80158bc:	f007 fbe8 	bl	801d090 <gpio_configure>
#ifdef RADIO_DIO_5
  if ( ITSDK_SX1276_DIO_5_PIN != __LP_GPIO_NONE ) {
     gpio_configure(ITSDK_SX1276_DIO_5_BANK, ITSDK_SX1276_DIO_5_PIN, GPIO_ANALOG );
  }
#endif
  gpio_configure(ITSDK_SX1276_TCXO_VCC_BANK, ITSDK_SX1276_TCXO_VCC_PIN, GPIO_OUTPUT_PP );
 80158c0:	2380      	movs	r3, #128	; 0x80
 80158c2:	015b      	lsls	r3, r3, #5
 80158c4:	2200      	movs	r2, #0
 80158c6:	0019      	movs	r1, r3
 80158c8:	2000      	movs	r0, #0
 80158ca:	f007 fbe1 	bl	801d090 <gpio_configure>

}
 80158ce:	46c0      	nop			; (mov r8, r8)
 80158d0:	46bd      	mov	sp, r7
 80158d2:	bd80      	pop	{r7, pc}
 80158d4:	20000080 	.word	0x20000080

080158d8 <SX1276IoIrqInit>:


gpio_irq_chain_t __sx1276_gpio_irq[6] = { 0 };
void SX1276IoIrqInit( DioIrqHandler **irqHandlers )
{
 80158d8:	b580      	push	{r7, lr}
 80158da:	b082      	sub	sp, #8
 80158dc:	af00      	add	r7, sp, #0
 80158de:	6078      	str	r0, [r7, #4]
	LOG_INFO_SX1276((">> mSX1276IoIrqInit\r\n"));


	if (ITSDK_SX1276_DIO_0_PIN != __LP_GPIO_NONE ) {
	    gpio_interruptClear(ITSDK_SX1276_DIO_0_BANK, ITSDK_SX1276_DIO_0_PIN);
 80158e0:	2110      	movs	r1, #16
 80158e2:	2001      	movs	r0, #1
 80158e4:	f007 fe4e 	bl	801d584 <gpio_interruptClear>
	    gpio_configure(ITSDK_SX1276_DIO_0_BANK, ITSDK_SX1276_DIO_0_PIN, GPIO_INTERRUPT_RISING );
 80158e8:	2207      	movs	r2, #7
 80158ea:	2110      	movs	r1, #16
 80158ec:	2001      	movs	r0, #1
 80158ee:	f007 fbcf 	bl	801d090 <gpio_configure>
		gpio_interruptPriority(ITSDK_SX1276_DIO_0_BANK,ITSDK_SX1276_DIO_0_PIN,IRQ_HIGH_PRIORITY,0);
 80158f2:	2300      	movs	r3, #0
 80158f4:	2200      	movs	r2, #0
 80158f6:	2110      	movs	r1, #16
 80158f8:	2001      	movs	r0, #1
 80158fa:	f007 fe1a 	bl	801d532 <gpio_interruptPriority>
		__sx1276_gpio_irq[0].irq_func = (void (*)(uint16_t))irqHandlers[0];
 80158fe:	687b      	ldr	r3, [r7, #4]
 8015900:	681a      	ldr	r2, [r3, #0]
 8015902:	4b39      	ldr	r3, [pc, #228]	; (80159e8 <SX1276IoIrqInit+0x110>)
 8015904:	601a      	str	r2, [r3, #0]
		__sx1276_gpio_irq[0].pinMask = ITSDK_SX1276_DIO_0_PIN;
 8015906:	4b38      	ldr	r3, [pc, #224]	; (80159e8 <SX1276IoIrqInit+0x110>)
 8015908:	2210      	movs	r2, #16
 801590a:	809a      	strh	r2, [r3, #4]
		gpio_registerIrqAction(&__sx1276_gpio_irq[0]);
 801590c:	4b36      	ldr	r3, [pc, #216]	; (80159e8 <SX1276IoIrqInit+0x110>)
 801590e:	0018      	movs	r0, r3
 8015910:	f007 fe90 	bl	801d634 <gpio_registerIrqAction>
		gpio_interruptEnable(ITSDK_SX1276_DIO_0_BANK, ITSDK_SX1276_DIO_0_PIN);
 8015914:	2110      	movs	r1, #16
 8015916:	2001      	movs	r0, #1
 8015918:	f007 fdf2 	bl	801d500 <gpio_interruptEnable>
	}

	if (ITSDK_SX1276_DIO_1_PIN != __LP_GPIO_NONE ) {
	    gpio_interruptClear(ITSDK_SX1276_DIO_1_BANK, ITSDK_SX1276_DIO_1_PIN);
 801591c:	2102      	movs	r1, #2
 801591e:	2001      	movs	r0, #1
 8015920:	f007 fe30 	bl	801d584 <gpio_interruptClear>
	    gpio_configure(ITSDK_SX1276_DIO_1_BANK, ITSDK_SX1276_DIO_1_PIN, GPIO_INTERRUPT_RISING );
 8015924:	2207      	movs	r2, #7
 8015926:	2102      	movs	r1, #2
 8015928:	2001      	movs	r0, #1
 801592a:	f007 fbb1 	bl	801d090 <gpio_configure>
  	    gpio_interruptPriority(ITSDK_SX1276_DIO_1_BANK,ITSDK_SX1276_DIO_1_PIN,IRQ_HIGH_PRIORITY,0);
 801592e:	2300      	movs	r3, #0
 8015930:	2200      	movs	r2, #0
 8015932:	2102      	movs	r1, #2
 8015934:	2001      	movs	r0, #1
 8015936:	f007 fdfc 	bl	801d532 <gpio_interruptPriority>
		__sx1276_gpio_irq[1].irq_func = (void (*)(uint16_t))irqHandlers[1];
 801593a:	687b      	ldr	r3, [r7, #4]
 801593c:	685a      	ldr	r2, [r3, #4]
 801593e:	4b2a      	ldr	r3, [pc, #168]	; (80159e8 <SX1276IoIrqInit+0x110>)
 8015940:	60da      	str	r2, [r3, #12]
		__sx1276_gpio_irq[1].pinMask = ITSDK_SX1276_DIO_1_PIN;
 8015942:	4b29      	ldr	r3, [pc, #164]	; (80159e8 <SX1276IoIrqInit+0x110>)
 8015944:	2202      	movs	r2, #2
 8015946:	821a      	strh	r2, [r3, #16]
		gpio_registerIrqAction(&__sx1276_gpio_irq[1]);
 8015948:	4b28      	ldr	r3, [pc, #160]	; (80159ec <SX1276IoIrqInit+0x114>)
 801594a:	0018      	movs	r0, r3
 801594c:	f007 fe72 	bl	801d634 <gpio_registerIrqAction>
		gpio_interruptEnable(ITSDK_SX1276_DIO_1_BANK, ITSDK_SX1276_DIO_1_PIN);
 8015950:	2102      	movs	r1, #2
 8015952:	2001      	movs	r0, #1
 8015954:	f007 fdd4 	bl	801d500 <gpio_interruptEnable>
	}

	if (ITSDK_SX1276_DIO_2_PIN != __LP_GPIO_NONE ) {
	    gpio_interruptClear(ITSDK_SX1276_DIO_2_BANK, ITSDK_SX1276_DIO_2_PIN);
 8015958:	2101      	movs	r1, #1
 801595a:	2001      	movs	r0, #1
 801595c:	f007 fe12 	bl	801d584 <gpio_interruptClear>
	    gpio_configure(ITSDK_SX1276_DIO_2_BANK, ITSDK_SX1276_DIO_2_PIN, GPIO_INTERRUPT_RISING );
 8015960:	2207      	movs	r2, #7
 8015962:	2101      	movs	r1, #1
 8015964:	2001      	movs	r0, #1
 8015966:	f007 fb93 	bl	801d090 <gpio_configure>
		gpio_interruptPriority(ITSDK_SX1276_DIO_2_BANK,ITSDK_SX1276_DIO_2_PIN,IRQ_HIGH_PRIORITY,0);
 801596a:	2300      	movs	r3, #0
 801596c:	2200      	movs	r2, #0
 801596e:	2101      	movs	r1, #1
 8015970:	2001      	movs	r0, #1
 8015972:	f007 fdde 	bl	801d532 <gpio_interruptPriority>
		__sx1276_gpio_irq[2].irq_func = (void (*)(uint16_t))irqHandlers[2];
 8015976:	687b      	ldr	r3, [r7, #4]
 8015978:	689a      	ldr	r2, [r3, #8]
 801597a:	4b1b      	ldr	r3, [pc, #108]	; (80159e8 <SX1276IoIrqInit+0x110>)
 801597c:	619a      	str	r2, [r3, #24]
		__sx1276_gpio_irq[2].pinMask = ITSDK_SX1276_DIO_2_PIN;
 801597e:	4b1a      	ldr	r3, [pc, #104]	; (80159e8 <SX1276IoIrqInit+0x110>)
 8015980:	2201      	movs	r2, #1
 8015982:	839a      	strh	r2, [r3, #28]
		gpio_registerIrqAction(&__sx1276_gpio_irq[2]);
 8015984:	4b1a      	ldr	r3, [pc, #104]	; (80159f0 <SX1276IoIrqInit+0x118>)
 8015986:	0018      	movs	r0, r3
 8015988:	f007 fe54 	bl	801d634 <gpio_registerIrqAction>
		gpio_interruptEnable(ITSDK_SX1276_DIO_2_BANK, ITSDK_SX1276_DIO_2_PIN);
 801598c:	2101      	movs	r1, #1
 801598e:	2001      	movs	r0, #1
 8015990:	f007 fdb6 	bl	801d500 <gpio_interruptEnable>
	}

	if (ITSDK_SX1276_DIO_3_PIN != __LP_GPIO_NONE ) {
	    gpio_interruptClear(ITSDK_SX1276_DIO_3_BANK, ITSDK_SX1276_DIO_3_PIN);
 8015994:	2380      	movs	r3, #128	; 0x80
 8015996:	019b      	lsls	r3, r3, #6
 8015998:	0019      	movs	r1, r3
 801599a:	2002      	movs	r0, #2
 801599c:	f007 fdf2 	bl	801d584 <gpio_interruptClear>
	    gpio_configure(ITSDK_SX1276_DIO_3_BANK, ITSDK_SX1276_DIO_3_PIN, GPIO_INTERRUPT_RISING );
 80159a0:	2380      	movs	r3, #128	; 0x80
 80159a2:	019b      	lsls	r3, r3, #6
 80159a4:	2207      	movs	r2, #7
 80159a6:	0019      	movs	r1, r3
 80159a8:	2002      	movs	r0, #2
 80159aa:	f007 fb71 	bl	801d090 <gpio_configure>
		gpio_interruptPriority(ITSDK_SX1276_DIO_3_BANK,ITSDK_SX1276_DIO_3_PIN,IRQ_HIGH_PRIORITY,0);
 80159ae:	2380      	movs	r3, #128	; 0x80
 80159b0:	0199      	lsls	r1, r3, #6
 80159b2:	2300      	movs	r3, #0
 80159b4:	2200      	movs	r2, #0
 80159b6:	2002      	movs	r0, #2
 80159b8:	f007 fdbb 	bl	801d532 <gpio_interruptPriority>
		__sx1276_gpio_irq[3].irq_func = (void (*)(uint16_t))irqHandlers[3];
 80159bc:	687b      	ldr	r3, [r7, #4]
 80159be:	68da      	ldr	r2, [r3, #12]
 80159c0:	4b09      	ldr	r3, [pc, #36]	; (80159e8 <SX1276IoIrqInit+0x110>)
 80159c2:	625a      	str	r2, [r3, #36]	; 0x24
		__sx1276_gpio_irq[3].pinMask = ITSDK_SX1276_DIO_3_PIN;
 80159c4:	4b08      	ldr	r3, [pc, #32]	; (80159e8 <SX1276IoIrqInit+0x110>)
 80159c6:	2280      	movs	r2, #128	; 0x80
 80159c8:	0192      	lsls	r2, r2, #6
 80159ca:	851a      	strh	r2, [r3, #40]	; 0x28
		gpio_registerIrqAction(&__sx1276_gpio_irq[3]);
 80159cc:	4b09      	ldr	r3, [pc, #36]	; (80159f4 <SX1276IoIrqInit+0x11c>)
 80159ce:	0018      	movs	r0, r3
 80159d0:	f007 fe30 	bl	801d634 <gpio_registerIrqAction>
		gpio_interruptEnable(ITSDK_SX1276_DIO_3_BANK, ITSDK_SX1276_DIO_3_PIN);
 80159d4:	2380      	movs	r3, #128	; 0x80
 80159d6:	019b      	lsls	r3, r3, #6
 80159d8:	0019      	movs	r1, r3
 80159da:	2002      	movs	r0, #2
 80159dc:	f007 fd90 	bl	801d500 <gpio_interruptEnable>
    if ( ITSDK_SX1276_DIO_5_PIN != __LP_GPIO_NONE ) {
        gpio_configure(ITSDK_SX1276_DIO_5_BANK, ITSDK_SX1276_DIO_5_PIN, GPIO_INTERRUPT_RISING );
    }
#endif

}
 80159e0:	46c0      	nop			; (mov r8, r8)
 80159e2:	46bd      	mov	sp, r7
 80159e4:	b002      	add	sp, #8
 80159e6:	bd80      	pop	{r7, pc}
 80159e8:	20001058 	.word	0x20001058
 80159ec:	20001064 	.word	0x20001064
 80159f0:	20001070 	.word	0x20001070
 80159f4:	2000107c 	.word	0x2000107c

080159f8 <SX1276IoDeInit>:



void SX1276IoDeInit( void )
{
 80159f8:	b580      	push	{r7, lr}
 80159fa:	af00      	add	r7, sp, #0

  LOG_INFO_SX1276((">> mSX1276IoDeInit\r\n"));
	if (ITSDK_SX1276_DIO_0_PIN != __LP_GPIO_NONE ) {
		gpio_configure(ITSDK_SX1276_DIO_0_BANK, ITSDK_SX1276_DIO_0_PIN, GPIO_ANALOG );
 80159fc:	220e      	movs	r2, #14
 80159fe:	2110      	movs	r1, #16
 8015a00:	2001      	movs	r0, #1
 8015a02:	f007 fb45 	bl	801d090 <gpio_configure>
	    gpio_interruptClear(ITSDK_SX1276_DIO_0_BANK, ITSDK_SX1276_DIO_0_PIN);
 8015a06:	2110      	movs	r1, #16
 8015a08:	2001      	movs	r0, #1
 8015a0a:	f007 fdbb 	bl	801d584 <gpio_interruptClear>
	}
	if (ITSDK_SX1276_DIO_1_PIN != __LP_GPIO_NONE ) {
		gpio_configure(ITSDK_SX1276_DIO_1_BANK, ITSDK_SX1276_DIO_1_PIN, GPIO_ANALOG );
 8015a0e:	220e      	movs	r2, #14
 8015a10:	2102      	movs	r1, #2
 8015a12:	2001      	movs	r0, #1
 8015a14:	f007 fb3c 	bl	801d090 <gpio_configure>
	    gpio_interruptClear(ITSDK_SX1276_DIO_1_BANK, ITSDK_SX1276_DIO_1_PIN);
 8015a18:	2102      	movs	r1, #2
 8015a1a:	2001      	movs	r0, #1
 8015a1c:	f007 fdb2 	bl	801d584 <gpio_interruptClear>
	}
	if (ITSDK_SX1276_DIO_2_PIN != __LP_GPIO_NONE ) {
		gpio_configure(ITSDK_SX1276_DIO_2_BANK, ITSDK_SX1276_DIO_2_PIN, GPIO_ANALOG );
 8015a20:	220e      	movs	r2, #14
 8015a22:	2101      	movs	r1, #1
 8015a24:	2001      	movs	r0, #1
 8015a26:	f007 fb33 	bl	801d090 <gpio_configure>
	    gpio_interruptClear(ITSDK_SX1276_DIO_2_BANK, ITSDK_SX1276_DIO_2_PIN);
 8015a2a:	2101      	movs	r1, #1
 8015a2c:	2001      	movs	r0, #1
 8015a2e:	f007 fda9 	bl	801d584 <gpio_interruptClear>
	}
	if (ITSDK_SX1276_DIO_3_PIN != __LP_GPIO_NONE ) {
		gpio_configure(ITSDK_SX1276_DIO_3_BANK, ITSDK_SX1276_DIO_3_PIN, GPIO_ANALOG );
 8015a32:	2380      	movs	r3, #128	; 0x80
 8015a34:	019b      	lsls	r3, r3, #6
 8015a36:	220e      	movs	r2, #14
 8015a38:	0019      	movs	r1, r3
 8015a3a:	2002      	movs	r0, #2
 8015a3c:	f007 fb28 	bl	801d090 <gpio_configure>
	    gpio_interruptClear(ITSDK_SX1276_DIO_3_BANK, ITSDK_SX1276_DIO_3_PIN);
 8015a40:	2380      	movs	r3, #128	; 0x80
 8015a42:	019b      	lsls	r3, r3, #6
 8015a44:	0019      	movs	r1, r3
 8015a46:	2002      	movs	r0, #2
 8015a48:	f007 fd9c 	bl	801d584 <gpio_interruptClear>
	if (ITSDK_SX1276_DIO_5_PIN != __LP_GPIO_NONE ) {
		gpio_configure(ITSDK_SX1276_DIO_5_BANK, ITSDK_SX1276_DIO_5_PIN, GPIO_ANALOG );
	    gpio_interruptClear(ITSDK_SX1276_DIO_5_BANK, ITSDK_SX1276_DIO_5_PIN);
	}
#endif
}
 8015a4c:	46c0      	nop			; (mov r8, r8)
 8015a4e:	46bd      	mov	sp, r7
 8015a50:	bd80      	pop	{r7, pc}

08015a52 <SX1276SetRfTxPower>:


void SX1276SetRfTxPower( int8_t power )
{
 8015a52:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015a54:	b085      	sub	sp, #20
 8015a56:	af00      	add	r7, sp, #0
 8015a58:	0002      	movs	r2, r0
 8015a5a:	1dfb      	adds	r3, r7, #7
 8015a5c:	701a      	strb	r2, [r3, #0]
	LOG_INFO_SX1276((">> mSX1276SetRfTxPower (%d)\r\n",power));

    uint8_t paConfig = 0;
 8015a5e:	250f      	movs	r5, #15
 8015a60:	197b      	adds	r3, r7, r5
 8015a62:	2200      	movs	r2, #0
 8015a64:	701a      	strb	r2, [r3, #0]
    uint8_t paDac = 0;
 8015a66:	260e      	movs	r6, #14
 8015a68:	19bb      	adds	r3, r7, r6
 8015a6a:	2200      	movs	r2, #0
 8015a6c:	701a      	strb	r2, [r3, #0]
	#ifdef ITSDK_RADIO_POWER_OFFSET
    power += ITSDK_RADIO_POWER_OFFSET;
	#endif


    paConfig = SX1276Read( REG_PACONFIG );
 8015a6e:	197c      	adds	r4, r7, r5
 8015a70:	2009      	movs	r0, #9
 8015a72:	f001 fe49 	bl	8017708 <SX1276Read>
 8015a76:	0003      	movs	r3, r0
 8015a78:	7023      	strb	r3, [r4, #0]
    paDac = SX1276Read( REG_PADAC );
 8015a7a:	19bc      	adds	r4, r7, r6
 8015a7c:	204d      	movs	r0, #77	; 0x4d
 8015a7e:	f001 fe43 	bl	8017708 <SX1276Read>
 8015a82:	0003      	movs	r3, r0
 8015a84:	7023      	strb	r3, [r4, #0]

    paConfig = ( paConfig & RF_PACONFIG_PASELECT_MASK ) | SX1276GetPaSelect( power );
 8015a86:	197b      	adds	r3, r7, r5
 8015a88:	781b      	ldrb	r3, [r3, #0]
 8015a8a:	b25b      	sxtb	r3, r3
 8015a8c:	227f      	movs	r2, #127	; 0x7f
 8015a8e:	4013      	ands	r3, r2
 8015a90:	b25c      	sxtb	r4, r3
 8015a92:	1dfb      	adds	r3, r7, #7
 8015a94:	781b      	ldrb	r3, [r3, #0]
 8015a96:	0018      	movs	r0, r3
 8015a98:	f000 f8ae 	bl	8015bf8 <SX1276GetPaSelect>
 8015a9c:	0003      	movs	r3, r0
 8015a9e:	b25b      	sxtb	r3, r3
 8015aa0:	4323      	orrs	r3, r4
 8015aa2:	b25a      	sxtb	r2, r3
 8015aa4:	197b      	adds	r3, r7, r5
 8015aa6:	701a      	strb	r2, [r3, #0]
    paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK ) | 0x70;
 8015aa8:	197b      	adds	r3, r7, r5
 8015aaa:	197a      	adds	r2, r7, r5
 8015aac:	7812      	ldrb	r2, [r2, #0]
 8015aae:	2170      	movs	r1, #112	; 0x70
 8015ab0:	430a      	orrs	r2, r1
 8015ab2:	701a      	strb	r2, [r3, #0]

    if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST )
 8015ab4:	197b      	adds	r3, r7, r5
 8015ab6:	781b      	ldrb	r3, [r3, #0]
 8015ab8:	b25b      	sxtb	r3, r3
 8015aba:	2b00      	cmp	r3, #0
 8015abc:	da67      	bge.n	8015b8e <SX1276SetRfTxPower+0x13c>
    {
        if( power > 17 )
 8015abe:	1dfb      	adds	r3, r7, #7
 8015ac0:	781b      	ldrb	r3, [r3, #0]
 8015ac2:	b25b      	sxtb	r3, r3
 8015ac4:	2b11      	cmp	r3, #17
 8015ac6:	dd07      	ble.n	8015ad8 <SX1276SetRfTxPower+0x86>
        {
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_ON;
 8015ac8:	220e      	movs	r2, #14
 8015aca:	18bb      	adds	r3, r7, r2
 8015acc:	18ba      	adds	r2, r7, r2
 8015ace:	7812      	ldrb	r2, [r2, #0]
 8015ad0:	2107      	movs	r1, #7
 8015ad2:	430a      	orrs	r2, r1
 8015ad4:	701a      	strb	r2, [r3, #0]
 8015ad6:	e00b      	b.n	8015af0 <SX1276SetRfTxPower+0x9e>
        }
        else
        {
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_OFF;
 8015ad8:	210e      	movs	r1, #14
 8015ada:	187b      	adds	r3, r7, r1
 8015adc:	781b      	ldrb	r3, [r3, #0]
 8015ade:	b25b      	sxtb	r3, r3
 8015ae0:	2207      	movs	r2, #7
 8015ae2:	4393      	bics	r3, r2
 8015ae4:	b25b      	sxtb	r3, r3
 8015ae6:	2204      	movs	r2, #4
 8015ae8:	4313      	orrs	r3, r2
 8015aea:	b25a      	sxtb	r2, r3
 8015aec:	187b      	adds	r3, r7, r1
 8015aee:	701a      	strb	r2, [r3, #0]
        }
        if( ( paDac & RF_PADAC_20DBM_ON ) == RF_PADAC_20DBM_ON )
 8015af0:	230e      	movs	r3, #14
 8015af2:	18fb      	adds	r3, r7, r3
 8015af4:	781b      	ldrb	r3, [r3, #0]
 8015af6:	2207      	movs	r2, #7
 8015af8:	4013      	ands	r3, r2
 8015afa:	2b07      	cmp	r3, #7
 8015afc:	d123      	bne.n	8015b46 <SX1276SetRfTxPower+0xf4>
        {
            if( power < 5 )
 8015afe:	1dfb      	adds	r3, r7, #7
 8015b00:	781b      	ldrb	r3, [r3, #0]
 8015b02:	b25b      	sxtb	r3, r3
 8015b04:	2b04      	cmp	r3, #4
 8015b06:	dc02      	bgt.n	8015b0e <SX1276SetRfTxPower+0xbc>
            {
                power = 5;
 8015b08:	1dfb      	adds	r3, r7, #7
 8015b0a:	2205      	movs	r2, #5
 8015b0c:	701a      	strb	r2, [r3, #0]
            }
            if( power > 20 )
 8015b0e:	1dfb      	adds	r3, r7, #7
 8015b10:	781b      	ldrb	r3, [r3, #0]
 8015b12:	b25b      	sxtb	r3, r3
 8015b14:	2b14      	cmp	r3, #20
 8015b16:	dd02      	ble.n	8015b1e <SX1276SetRfTxPower+0xcc>
            {
                power = 20;
 8015b18:	1dfb      	adds	r3, r7, #7
 8015b1a:	2214      	movs	r2, #20
 8015b1c:	701a      	strb	r2, [r3, #0]
            }
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 5 ) & 0x0F );
 8015b1e:	200f      	movs	r0, #15
 8015b20:	183b      	adds	r3, r7, r0
 8015b22:	781b      	ldrb	r3, [r3, #0]
 8015b24:	b25b      	sxtb	r3, r3
 8015b26:	220f      	movs	r2, #15
 8015b28:	4393      	bics	r3, r2
 8015b2a:	b25a      	sxtb	r2, r3
 8015b2c:	1dfb      	adds	r3, r7, #7
 8015b2e:	781b      	ldrb	r3, [r3, #0]
 8015b30:	3b05      	subs	r3, #5
 8015b32:	b2db      	uxtb	r3, r3
 8015b34:	b25b      	sxtb	r3, r3
 8015b36:	210f      	movs	r1, #15
 8015b38:	400b      	ands	r3, r1
 8015b3a:	b25b      	sxtb	r3, r3
 8015b3c:	4313      	orrs	r3, r2
 8015b3e:	b25a      	sxtb	r2, r3
 8015b40:	183b      	adds	r3, r7, r0
 8015b42:	701a      	strb	r2, [r3, #0]
 8015b44:	e046      	b.n	8015bd4 <SX1276SetRfTxPower+0x182>
        }
        else
        {
            if( power < 2 )
 8015b46:	1dfb      	adds	r3, r7, #7
 8015b48:	781b      	ldrb	r3, [r3, #0]
 8015b4a:	b25b      	sxtb	r3, r3
 8015b4c:	2b01      	cmp	r3, #1
 8015b4e:	dc02      	bgt.n	8015b56 <SX1276SetRfTxPower+0x104>
            {
                power = 2;
 8015b50:	1dfb      	adds	r3, r7, #7
 8015b52:	2202      	movs	r2, #2
 8015b54:	701a      	strb	r2, [r3, #0]
            }
            if( power > 17 )
 8015b56:	1dfb      	adds	r3, r7, #7
 8015b58:	781b      	ldrb	r3, [r3, #0]
 8015b5a:	b25b      	sxtb	r3, r3
 8015b5c:	2b11      	cmp	r3, #17
 8015b5e:	dd02      	ble.n	8015b66 <SX1276SetRfTxPower+0x114>
            {
                power = 17;
 8015b60:	1dfb      	adds	r3, r7, #7
 8015b62:	2211      	movs	r2, #17
 8015b64:	701a      	strb	r2, [r3, #0]
            }
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 2 ) & 0x0F );
 8015b66:	200f      	movs	r0, #15
 8015b68:	183b      	adds	r3, r7, r0
 8015b6a:	781b      	ldrb	r3, [r3, #0]
 8015b6c:	b25b      	sxtb	r3, r3
 8015b6e:	220f      	movs	r2, #15
 8015b70:	4393      	bics	r3, r2
 8015b72:	b25a      	sxtb	r2, r3
 8015b74:	1dfb      	adds	r3, r7, #7
 8015b76:	781b      	ldrb	r3, [r3, #0]
 8015b78:	3b02      	subs	r3, #2
 8015b7a:	b2db      	uxtb	r3, r3
 8015b7c:	b25b      	sxtb	r3, r3
 8015b7e:	210f      	movs	r1, #15
 8015b80:	400b      	ands	r3, r1
 8015b82:	b25b      	sxtb	r3, r3
 8015b84:	4313      	orrs	r3, r2
 8015b86:	b25a      	sxtb	r2, r3
 8015b88:	183b      	adds	r3, r7, r0
 8015b8a:	701a      	strb	r2, [r3, #0]
 8015b8c:	e022      	b.n	8015bd4 <SX1276SetRfTxPower+0x182>
        }
    }
    else
    {
        if( power < -1 )
 8015b8e:	1dfb      	adds	r3, r7, #7
 8015b90:	781b      	ldrb	r3, [r3, #0]
 8015b92:	b25b      	sxtb	r3, r3
 8015b94:	3301      	adds	r3, #1
 8015b96:	da02      	bge.n	8015b9e <SX1276SetRfTxPower+0x14c>
        {
            power = -1;
 8015b98:	1dfb      	adds	r3, r7, #7
 8015b9a:	22ff      	movs	r2, #255	; 0xff
 8015b9c:	701a      	strb	r2, [r3, #0]
        }
        if( power > 14 )
 8015b9e:	1dfb      	adds	r3, r7, #7
 8015ba0:	781b      	ldrb	r3, [r3, #0]
 8015ba2:	b25b      	sxtb	r3, r3
 8015ba4:	2b0e      	cmp	r3, #14
 8015ba6:	dd02      	ble.n	8015bae <SX1276SetRfTxPower+0x15c>
        {
            power = 14;
 8015ba8:	1dfb      	adds	r3, r7, #7
 8015baa:	220e      	movs	r2, #14
 8015bac:	701a      	strb	r2, [r3, #0]
        }
        paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power + 1 ) & 0x0F );
 8015bae:	200f      	movs	r0, #15
 8015bb0:	183b      	adds	r3, r7, r0
 8015bb2:	781b      	ldrb	r3, [r3, #0]
 8015bb4:	b25b      	sxtb	r3, r3
 8015bb6:	220f      	movs	r2, #15
 8015bb8:	4393      	bics	r3, r2
 8015bba:	b25a      	sxtb	r2, r3
 8015bbc:	1dfb      	adds	r3, r7, #7
 8015bbe:	781b      	ldrb	r3, [r3, #0]
 8015bc0:	3301      	adds	r3, #1
 8015bc2:	b2db      	uxtb	r3, r3
 8015bc4:	b25b      	sxtb	r3, r3
 8015bc6:	210f      	movs	r1, #15
 8015bc8:	400b      	ands	r3, r1
 8015bca:	b25b      	sxtb	r3, r3
 8015bcc:	4313      	orrs	r3, r2
 8015bce:	b25a      	sxtb	r2, r3
 8015bd0:	183b      	adds	r3, r7, r0
 8015bd2:	701a      	strb	r2, [r3, #0]
    }
    SX1276Write( REG_PACONFIG, paConfig );
 8015bd4:	230f      	movs	r3, #15
 8015bd6:	18fb      	adds	r3, r7, r3
 8015bd8:	781b      	ldrb	r3, [r3, #0]
 8015bda:	0019      	movs	r1, r3
 8015bdc:	2009      	movs	r0, #9
 8015bde:	f001 fd7f 	bl	80176e0 <SX1276Write>
    SX1276Write( REG_PADAC, paDac );
 8015be2:	230e      	movs	r3, #14
 8015be4:	18fb      	adds	r3, r7, r3
 8015be6:	781b      	ldrb	r3, [r3, #0]
 8015be8:	0019      	movs	r1, r3
 8015bea:	204d      	movs	r0, #77	; 0x4d
 8015bec:	f001 fd78 	bl	80176e0 <SX1276Write>
}
 8015bf0:	46c0      	nop			; (mov r8, r8)
 8015bf2:	46bd      	mov	sp, r7
 8015bf4:	b005      	add	sp, #20
 8015bf6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015bf8 <SX1276GetPaSelect>:

uint8_t SX1276GetPaSelect( uint8_t power )
{
 8015bf8:	b580      	push	{r7, lr}
 8015bfa:	b082      	sub	sp, #8
 8015bfc:	af00      	add	r7, sp, #0
 8015bfe:	0002      	movs	r2, r0
 8015c00:	1dfb      	adds	r3, r7, #7
 8015c02:	701a      	strb	r2, [r3, #0]
	LOG_INFO_SX1276((">> mSX1276GetPaSelect\r\n"));

    if (power >14)
 8015c04:	1dfb      	adds	r3, r7, #7
 8015c06:	781b      	ldrb	r3, [r3, #0]
 8015c08:	2b0e      	cmp	r3, #14
 8015c0a:	d901      	bls.n	8015c10 <SX1276GetPaSelect+0x18>
    {
        return RF_PACONFIG_PASELECT_PABOOST;
 8015c0c:	2380      	movs	r3, #128	; 0x80
 8015c0e:	e000      	b.n	8015c12 <SX1276GetPaSelect+0x1a>
    }
    else
    {
        return RF_PACONFIG_PASELECT_RFO;
 8015c10:	2300      	movs	r3, #0
    }
}
 8015c12:	0018      	movs	r0, r3
 8015c14:	46bd      	mov	sp, r7
 8015c16:	b002      	add	sp, #8
 8015c18:	bd80      	pop	{r7, pc}

08015c1a <SX1276SetAntSwLowPower>:

/**
 * Switch PA Low power (true) or Full power (false)
 */
void SX1276SetAntSwLowPower( bool status )
{
 8015c1a:	b580      	push	{r7, lr}
 8015c1c:	b082      	sub	sp, #8
 8015c1e:	af00      	add	r7, sp, #0
 8015c20:	0002      	movs	r2, r0
 8015c22:	1dfb      	adds	r3, r7, #7
 8015c24:	701a      	strb	r2, [r3, #0]
	LOG_INFO_SX1276((">> mSX1276SetAntSwLowPower (%s)\r\n",((status)?"LP":"FP")));

    if( status == false )
 8015c26:	1dfb      	adds	r3, r7, #7
 8015c28:	781b      	ldrb	r3, [r3, #0]
 8015c2a:	2201      	movs	r2, #1
 8015c2c:	4053      	eors	r3, r2
 8015c2e:	b2db      	uxtb	r3, r3
 8015c30:	2b00      	cmp	r3, #0
 8015c32:	d01b      	beq.n	8015c6c <SX1276SetAntSwLowPower+0x52>
    {
    	// FP
    	gpio_configure(ITSDK_MURATA_ANTSW_RX_BANK, ITSDK_MURATA_ANTSW_RX_PIN, GPIO_OUTPUT_PP );
 8015c34:	2200      	movs	r2, #0
 8015c36:	2102      	movs	r1, #2
 8015c38:	2000      	movs	r0, #0
 8015c3a:	f007 fa29 	bl	801d090 <gpio_configure>
    	gpio_reset(ITSDK_MURATA_ANTSW_RX_BANK,ITSDK_MURATA_ANTSW_RX_PIN);
 8015c3e:	2102      	movs	r1, #2
 8015c40:	2000      	movs	r0, #0
 8015c42:	f007 fc45 	bl	801d4d0 <gpio_reset>
    	gpio_configure(ITSDK_MURATA_ANTSW_TXBOOST_BANK, ITSDK_MURATA_ANTSW_TXBOOST_PIN, GPIO_OUTPUT_PP );
 8015c46:	2200      	movs	r2, #0
 8015c48:	2102      	movs	r1, #2
 8015c4a:	2002      	movs	r0, #2
 8015c4c:	f007 fa20 	bl	801d090 <gpio_configure>
    	gpio_reset(ITSDK_MURATA_ANTSW_TXBOOST_BANK,ITSDK_MURATA_ANTSW_TXBOOST_PIN);
 8015c50:	2102      	movs	r1, #2
 8015c52:	2002      	movs	r0, #2
 8015c54:	f007 fc3c 	bl	801d4d0 <gpio_reset>
    	gpio_configure(ITSDK_MURATA_ANTSW_TXRFO_BANK, ITSDK_MURATA_ANTSW_TXRFO_PIN, GPIO_OUTPUT_PP );
 8015c58:	2200      	movs	r2, #0
 8015c5a:	2104      	movs	r1, #4
 8015c5c:	2002      	movs	r0, #2
 8015c5e:	f007 fa17 	bl	801d090 <gpio_configure>
    	gpio_reset(ITSDK_MURATA_ANTSW_TXRFO_BANK,ITSDK_MURATA_ANTSW_TXRFO_PIN);
 8015c62:	2104      	movs	r1, #4
 8015c64:	2002      	movs	r0, #2
 8015c66:	f007 fc33 	bl	801d4d0 <gpio_reset>
    	gpio_configure(ITSDK_MURATA_ANTSW_TXBOOST_BANK, ITSDK_MURATA_ANTSW_TXBOOST_PIN, GPIO_ANALOG );
    	gpio_reset(ITSDK_MURATA_ANTSW_TXBOOST_BANK,ITSDK_MURATA_ANTSW_TXBOOST_PIN);
    	gpio_configure(ITSDK_MURATA_ANTSW_TXRFO_BANK, ITSDK_MURATA_ANTSW_TXRFO_PIN, GPIO_ANALOG );
    	gpio_reset(ITSDK_MURATA_ANTSW_TXRFO_BANK,ITSDK_MURATA_ANTSW_TXRFO_PIN);
    }
}
 8015c6a:	e01a      	b.n	8015ca2 <SX1276SetAntSwLowPower+0x88>
    	gpio_configure(ITSDK_MURATA_ANTSW_RX_BANK, ITSDK_MURATA_ANTSW_RX_PIN, GPIO_ANALOG );
 8015c6c:	220e      	movs	r2, #14
 8015c6e:	2102      	movs	r1, #2
 8015c70:	2000      	movs	r0, #0
 8015c72:	f007 fa0d 	bl	801d090 <gpio_configure>
    	gpio_reset(ITSDK_MURATA_ANTSW_RX_BANK,ITSDK_MURATA_ANTSW_RX_PIN);
 8015c76:	2102      	movs	r1, #2
 8015c78:	2000      	movs	r0, #0
 8015c7a:	f007 fc29 	bl	801d4d0 <gpio_reset>
    	gpio_configure(ITSDK_MURATA_ANTSW_TXBOOST_BANK, ITSDK_MURATA_ANTSW_TXBOOST_PIN, GPIO_ANALOG );
 8015c7e:	220e      	movs	r2, #14
 8015c80:	2102      	movs	r1, #2
 8015c82:	2002      	movs	r0, #2
 8015c84:	f007 fa04 	bl	801d090 <gpio_configure>
    	gpio_reset(ITSDK_MURATA_ANTSW_TXBOOST_BANK,ITSDK_MURATA_ANTSW_TXBOOST_PIN);
 8015c88:	2102      	movs	r1, #2
 8015c8a:	2002      	movs	r0, #2
 8015c8c:	f007 fc20 	bl	801d4d0 <gpio_reset>
    	gpio_configure(ITSDK_MURATA_ANTSW_TXRFO_BANK, ITSDK_MURATA_ANTSW_TXRFO_PIN, GPIO_ANALOG );
 8015c90:	220e      	movs	r2, #14
 8015c92:	2104      	movs	r1, #4
 8015c94:	2002      	movs	r0, #2
 8015c96:	f007 f9fb 	bl	801d090 <gpio_configure>
    	gpio_reset(ITSDK_MURATA_ANTSW_TXRFO_BANK,ITSDK_MURATA_ANTSW_TXRFO_PIN);
 8015c9a:	2104      	movs	r1, #4
 8015c9c:	2002      	movs	r0, #2
 8015c9e:	f007 fc17 	bl	801d4d0 <gpio_reset>
}
 8015ca2:	46c0      	nop			; (mov r8, r8)
 8015ca4:	46bd      	mov	sp, r7
 8015ca6:	b002      	add	sp, #8
 8015ca8:	bd80      	pop	{r7, pc}
	...

08015cac <SX1276SetAntSw>:

void SX1276SetAntSw( uint8_t opMode )
{
 8015cac:	b590      	push	{r4, r7, lr}
 8015cae:	b085      	sub	sp, #20
 8015cb0:	af00      	add	r7, sp, #0
 8015cb2:	0002      	movs	r2, r0
 8015cb4:	1dfb      	adds	r3, r7, #7
 8015cb6:	701a      	strb	r2, [r3, #0]
	LOG_INFO_SX1276((">> mSX1276SetAntSw (%d)\r\n",opMode));

    uint8_t paConfig =  SX1276Read( REG_PACONFIG );
 8015cb8:	230f      	movs	r3, #15
 8015cba:	18fc      	adds	r4, r7, r3
 8015cbc:	2009      	movs	r0, #9
 8015cbe:	f001 fd23 	bl	8017708 <SX1276Read>
 8015cc2:	0003      	movs	r3, r0
 8015cc4:	7023      	strb	r3, [r4, #0]
    switch( opMode )
 8015cc6:	1dfb      	adds	r3, r7, #7
 8015cc8:	781b      	ldrb	r3, [r3, #0]
 8015cca:	2b03      	cmp	r3, #3
 8015ccc:	d112      	bne.n	8015cf4 <SX1276SetAntSw+0x48>
    {
    case RFLR_OPMODE_TRANSMITTER:
      if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST ) {
 8015cce:	230f      	movs	r3, #15
 8015cd0:	18fb      	adds	r3, r7, r3
 8015cd2:	781b      	ldrb	r3, [r3, #0]
 8015cd4:	b25b      	sxtb	r3, r3
 8015cd6:	2b00      	cmp	r3, #0
 8015cd8:	da04      	bge.n	8015ce4 <SX1276SetAntSw+0x38>
    	LOG_INFO_SX1276(("   PABOOST\r\n"));
    	gpio_set(ITSDK_MURATA_ANTSW_TXBOOST_BANK,ITSDK_MURATA_ANTSW_TXBOOST_PIN);
 8015cda:	2102      	movs	r1, #2
 8015cdc:	2002      	movs	r0, #2
 8015cde:	f007 fbdf 	bl	801d4a0 <gpio_set>
 8015ce2:	e003      	b.n	8015cec <SX1276SetAntSw+0x40>
      } else {
      	LOG_INFO_SX1276(("   RFO\r\n"));
        gpio_set(ITSDK_MURATA_ANTSW_TXRFO_BANK,ITSDK_MURATA_ANTSW_TXRFO_PIN);
 8015ce4:	2104      	movs	r1, #4
 8015ce6:	2002      	movs	r0, #2
 8015ce8:	f007 fbda 	bl	801d4a0 <gpio_set>
      }
      SX1276.RxTx = 1;
 8015cec:	4b07      	ldr	r3, [pc, #28]	; (8015d0c <SX1276SetAntSw+0x60>)
 8015cee:	2201      	movs	r2, #1
 8015cf0:	701a      	strb	r2, [r3, #0]
      break;
 8015cf2:	e007      	b.n	8015d04 <SX1276SetAntSw+0x58>
    case RFLR_OPMODE_RECEIVER:
    case RFLR_OPMODE_RECEIVER_SINGLE:
    case RFLR_OPMODE_CAD:
    default:
     LOG_INFO_SX1276(("   Rx Mode\r\n"));
     SX1276.RxTx = 0;
 8015cf4:	4b05      	ldr	r3, [pc, #20]	; (8015d0c <SX1276SetAntSw+0x60>)
 8015cf6:	2200      	movs	r2, #0
 8015cf8:	701a      	strb	r2, [r3, #0]
     gpio_set(ITSDK_MURATA_ANTSW_RX_BANK,ITSDK_MURATA_ANTSW_RX_PIN);
 8015cfa:	2102      	movs	r1, #2
 8015cfc:	2000      	movs	r0, #0
 8015cfe:	f007 fbcf 	bl	801d4a0 <gpio_set>
     break;
 8015d02:	46c0      	nop			; (mov r8, r8)
    }
}
 8015d04:	46c0      	nop			; (mov r8, r8)
 8015d06:	46bd      	mov	sp, r7
 8015d08:	b005      	add	sp, #20
 8015d0a:	bd90      	pop	{r4, r7, pc}
 8015d0c:	200015b8 	.word	0x200015b8

08015d10 <SX1276CheckRfFrequency>:

bool SX1276CheckRfFrequency( uint32_t frequency )
{
 8015d10:	b580      	push	{r7, lr}
 8015d12:	b082      	sub	sp, #8
 8015d14:	af00      	add	r7, sp, #0
 8015d16:	6078      	str	r0, [r7, #4]
	LOG_INFO_SX1276((">> mSX1276CheckRfFrequency\r\n"));

    // Implement check. Currently all frequencies are supported
    return true;
 8015d18:	2301      	movs	r3, #1
}
 8015d1a:	0018      	movs	r0, r3
 8015d1c:	46bd      	mov	sp, r7
 8015d1e:	b002      	add	sp, #8
 8015d20:	bd80      	pop	{r7, pc}
	...

08015d24 <SX1276BoardInit>:

/*
 * Radio driver functions implementation
 */
void SX1276BoardInit( LoRaBoardCallback_t *callbacks )
{
 8015d24:	b580      	push	{r7, lr}
 8015d26:	b082      	sub	sp, #8
 8015d28:	af00      	add	r7, sp, #0
 8015d2a:	6078      	str	r0, [r7, #4]
	LOG_INFO_SX1276((">> SX1276BoardInit\r\n"));

    LoRaBoardCallbacks =callbacks;
 8015d2c:	4b03      	ldr	r3, [pc, #12]	; (8015d3c <SX1276BoardInit+0x18>)
 8015d2e:	687a      	ldr	r2, [r7, #4]
 8015d30:	601a      	str	r2, [r3, #0]
}
 8015d32:	46c0      	nop			; (mov r8, r8)
 8015d34:	46bd      	mov	sp, r7
 8015d36:	b002      	add	sp, #8
 8015d38:	bd80      	pop	{r7, pc}
 8015d3a:	46c0      	nop			; (mov r8, r8)
 8015d3c:	200011a4 	.word	0x200011a4

08015d40 <SX1276Init>:

uint32_t SX1276Init( RadioEvents_t * events )
{
 8015d40:	b590      	push	{r4, r7, lr}
 8015d42:	b085      	sub	sp, #20
 8015d44:	af00      	add	r7, sp, #0
 8015d46:	6078      	str	r0, [r7, #4]
	LOG_INFO_SX1276((">> SX1276Init\r\n"));

    uint8_t i;
    RadioEvents = events;
 8015d48:	4b33      	ldr	r3, [pc, #204]	; (8015e18 <SX1276Init+0xd8>)
 8015d4a:	687a      	ldr	r2, [r7, #4]
 8015d4c:	601a      	str	r2, [r3, #0]

    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
 8015d4e:	4a33      	ldr	r2, [pc, #204]	; (8015e1c <SX1276Init+0xdc>)
 8015d50:	4b33      	ldr	r3, [pc, #204]	; (8015e20 <SX1276Init+0xe0>)
 8015d52:	0011      	movs	r1, r2
 8015d54:	0018      	movs	r0, r3
 8015d56:	f7ff fb93 	bl	8015480 <TimerInit>
    TimerInit( &RxTimeoutTimer, SX1276OnTimeoutIrq );
 8015d5a:	4a30      	ldr	r2, [pc, #192]	; (8015e1c <SX1276Init+0xdc>)
 8015d5c:	4b31      	ldr	r3, [pc, #196]	; (8015e24 <SX1276Init+0xe4>)
 8015d5e:	0011      	movs	r1, r2
 8015d60:	0018      	movs	r0, r3
 8015d62:	f7ff fb8d 	bl	8015480 <TimerInit>
    TimerInit( &RxTimeoutSyncWord, SX1276OnTimeoutIrq );
 8015d66:	4a2d      	ldr	r2, [pc, #180]	; (8015e1c <SX1276Init+0xdc>)
 8015d68:	4b2f      	ldr	r3, [pc, #188]	; (8015e28 <SX1276Init+0xe8>)
 8015d6a:	0011      	movs	r1, r2
 8015d6c:	0018      	movs	r0, r3
 8015d6e:	f7ff fb87 	bl	8015480 <TimerInit>


    LoRaBoardCallbacks->SX1276BoardSetXO( SET );
 8015d72:	4b2e      	ldr	r3, [pc, #184]	; (8015e2c <SX1276Init+0xec>)
 8015d74:	681b      	ldr	r3, [r3, #0]
 8015d76:	681b      	ldr	r3, [r3, #0]
 8015d78:	2001      	movs	r0, #1
 8015d7a:	4798      	blx	r3

    SX1276Reset( );
 8015d7c:	f001 fbee 	bl	801755c <SX1276Reset>
    RxChainCalibration( );
 8015d80:	f000 f936 	bl	8015ff0 <RxChainCalibration>

    SX1276SetOpMode( RF_OPMODE_SLEEP );
 8015d84:	2000      	movs	r0, #0
 8015d86:	f001 fc03 	bl	8017590 <SX1276SetOpMode>

    LoRaBoardCallbacks->SX1276BoardIoIrqInit( DioIrq );
 8015d8a:	4b28      	ldr	r3, [pc, #160]	; (8015e2c <SX1276Init+0xec>)
 8015d8c:	681b      	ldr	r3, [r3, #0]
 8015d8e:	689b      	ldr	r3, [r3, #8]
 8015d90:	4a27      	ldr	r2, [pc, #156]	; (8015e30 <SX1276Init+0xf0>)
 8015d92:	0010      	movs	r0, r2
 8015d94:	4798      	blx	r3

    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8015d96:	230f      	movs	r3, #15
 8015d98:	18fb      	adds	r3, r7, r3
 8015d9a:	2200      	movs	r2, #0
 8015d9c:	701a      	strb	r2, [r3, #0]
 8015d9e:	e025      	b.n	8015dec <SX1276Init+0xac>
    {
        SX1276SetModem( RadioRegsInit[i].Modem );
 8015da0:	240f      	movs	r4, #15
 8015da2:	193b      	adds	r3, r7, r4
 8015da4:	781a      	ldrb	r2, [r3, #0]
 8015da6:	4923      	ldr	r1, [pc, #140]	; (8015e34 <SX1276Init+0xf4>)
 8015da8:	0013      	movs	r3, r2
 8015daa:	005b      	lsls	r3, r3, #1
 8015dac:	189b      	adds	r3, r3, r2
 8015dae:	5c5b      	ldrb	r3, [r3, r1]
 8015db0:	0018      	movs	r0, r3
 8015db2:	f001 fc3d 	bl	8017630 <SX1276SetModem>
        SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 8015db6:	193b      	adds	r3, r7, r4
 8015db8:	781a      	ldrb	r2, [r3, #0]
 8015dba:	491e      	ldr	r1, [pc, #120]	; (8015e34 <SX1276Init+0xf4>)
 8015dbc:	0013      	movs	r3, r2
 8015dbe:	005b      	lsls	r3, r3, #1
 8015dc0:	189b      	adds	r3, r3, r2
 8015dc2:	18cb      	adds	r3, r1, r3
 8015dc4:	3301      	adds	r3, #1
 8015dc6:	781b      	ldrb	r3, [r3, #0]
 8015dc8:	b298      	uxth	r0, r3
 8015dca:	193b      	adds	r3, r7, r4
 8015dcc:	781a      	ldrb	r2, [r3, #0]
 8015dce:	4919      	ldr	r1, [pc, #100]	; (8015e34 <SX1276Init+0xf4>)
 8015dd0:	0013      	movs	r3, r2
 8015dd2:	005b      	lsls	r3, r3, #1
 8015dd4:	189b      	adds	r3, r3, r2
 8015dd6:	18cb      	adds	r3, r1, r3
 8015dd8:	3302      	adds	r3, #2
 8015dda:	781b      	ldrb	r3, [r3, #0]
 8015ddc:	0019      	movs	r1, r3
 8015dde:	f001 fc7f 	bl	80176e0 <SX1276Write>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8015de2:	193b      	adds	r3, r7, r4
 8015de4:	781a      	ldrb	r2, [r3, #0]
 8015de6:	193b      	adds	r3, r7, r4
 8015de8:	3201      	adds	r2, #1
 8015dea:	701a      	strb	r2, [r3, #0]
 8015dec:	230f      	movs	r3, #15
 8015dee:	18fb      	adds	r3, r7, r3
 8015df0:	781b      	ldrb	r3, [r3, #0]
 8015df2:	2b0f      	cmp	r3, #15
 8015df4:	d9d4      	bls.n	8015da0 <SX1276Init+0x60>
    }

    SX1276SetModem( MODEM_FSK );
 8015df6:	2000      	movs	r0, #0
 8015df8:	f001 fc1a 	bl	8017630 <SX1276SetModem>
    SX1276.Settings.State = RF_IDLE;
 8015dfc:	4b0e      	ldr	r3, [pc, #56]	; (8015e38 <SX1276Init+0xf8>)
 8015dfe:	2200      	movs	r2, #0
 8015e00:	711a      	strb	r2, [r3, #4]

    return ( uint32_t )LoRaBoardCallbacks->SX1276BoardGetWakeTime( ) + ITSDK_MURATA_WAKEUP_TIME;// BOARD_WAKEUP_TIME;
 8015e02:	4b0a      	ldr	r3, [pc, #40]	; (8015e2c <SX1276Init+0xec>)
 8015e04:	681b      	ldr	r3, [r3, #0]
 8015e06:	685b      	ldr	r3, [r3, #4]
 8015e08:	4798      	blx	r3
 8015e0a:	0003      	movs	r3, r0
 8015e0c:	3335      	adds	r3, #53	; 0x35
}
 8015e0e:	0018      	movs	r0, r3
 8015e10:	46bd      	mov	sp, r7
 8015e12:	b005      	add	sp, #20
 8015e14:	bd90      	pop	{r4, r7, pc}
 8015e16:	46c0      	nop			; (mov r8, r8)
 8015e18:	200010a0 	.word	0x200010a0
 8015e1c:	08017981 	.word	0x08017981
 8015e20:	20001588 	.word	0x20001588
 8015e24:	20001620 	.word	0x20001620
 8015e28:	200015a0 	.word	0x200015a0
 8015e2c:	200011a4 	.word	0x200011a4
 8015e30:	20000098 	.word	0x20000098
 8015e34:	08020ccc 	.word	0x08020ccc
 8015e38:	200015b8 	.word	0x200015b8

08015e3c <SX1276GetStatus>:

RadioState_t SX1276GetStatus( void )
{
 8015e3c:	b580      	push	{r7, lr}
 8015e3e:	af00      	add	r7, sp, #0
	LOG_INFO_SX1276((">> SX1276GetStatus\r\n"));

    return SX1276.Settings.State;
 8015e40:	4b02      	ldr	r3, [pc, #8]	; (8015e4c <SX1276GetStatus+0x10>)
 8015e42:	791b      	ldrb	r3, [r3, #4]
}
 8015e44:	0018      	movs	r0, r3
 8015e46:	46bd      	mov	sp, r7
 8015e48:	bd80      	pop	{r7, pc}
 8015e4a:	46c0      	nop			; (mov r8, r8)
 8015e4c:	200015b8 	.word	0x200015b8

08015e50 <SX1276SetChannel>:

void SX1276SetChannel( uint32_t freq )
{
 8015e50:	b590      	push	{r4, r7, lr}
 8015e52:	b087      	sub	sp, #28
 8015e54:	af00      	add	r7, sp, #0
 8015e56:	6078      	str	r0, [r7, #4]
	LOG_INFO_SX1276((">> SX1276SetChannel %d\r\n",freq));

    uint32_t channel;

    SX1276.Settings.Channel = freq;
 8015e58:	4b1d      	ldr	r3, [pc, #116]	; (8015ed0 <SX1276SetChannel+0x80>)
 8015e5a:	687a      	ldr	r2, [r7, #4]
 8015e5c:	609a      	str	r2, [r3, #8]

    SX_FREQ_TO_CHANNEL( channel, freq );
 8015e5e:	687b      	ldr	r3, [r7, #4]
 8015e60:	491c      	ldr	r1, [pc, #112]	; (8015ed4 <SX1276SetChannel+0x84>)
 8015e62:	0018      	movs	r0, r3
 8015e64:	f7ea f958 	bl	8000118 <__udivsi3>
 8015e68:	0003      	movs	r3, r0
 8015e6a:	617b      	str	r3, [r7, #20]
 8015e6c:	6979      	ldr	r1, [r7, #20]
 8015e6e:	000b      	movs	r3, r1
 8015e70:	015b      	lsls	r3, r3, #5
 8015e72:	1a5b      	subs	r3, r3, r1
 8015e74:	019a      	lsls	r2, r3, #6
 8015e76:	1ad2      	subs	r2, r2, r3
 8015e78:	00d2      	lsls	r2, r2, #3
 8015e7a:	1853      	adds	r3, r2, r1
 8015e7c:	687a      	ldr	r2, [r7, #4]
 8015e7e:	1ad3      	subs	r3, r2, r3
 8015e80:	613b      	str	r3, [r7, #16]
 8015e82:	697b      	ldr	r3, [r7, #20]
 8015e84:	021c      	lsls	r4, r3, #8
 8015e86:	693b      	ldr	r3, [r7, #16]
 8015e88:	021b      	lsls	r3, r3, #8
 8015e8a:	4a13      	ldr	r2, [pc, #76]	; (8015ed8 <SX1276SetChannel+0x88>)
 8015e8c:	4694      	mov	ip, r2
 8015e8e:	4463      	add	r3, ip
 8015e90:	4910      	ldr	r1, [pc, #64]	; (8015ed4 <SX1276SetChannel+0x84>)
 8015e92:	0018      	movs	r0, r3
 8015e94:	f7ea f940 	bl	8000118 <__udivsi3>
 8015e98:	0003      	movs	r3, r0
 8015e9a:	18e3      	adds	r3, r4, r3
 8015e9c:	60fb      	str	r3, [r7, #12]

    SX1276Write( REG_FRFMSB, ( uint8_t )( ( channel >> 16 ) & 0xFF ) );
 8015e9e:	68fb      	ldr	r3, [r7, #12]
 8015ea0:	0c1b      	lsrs	r3, r3, #16
 8015ea2:	b2db      	uxtb	r3, r3
 8015ea4:	0019      	movs	r1, r3
 8015ea6:	2006      	movs	r0, #6
 8015ea8:	f001 fc1a 	bl	80176e0 <SX1276Write>
    SX1276Write( REG_FRFMID, ( uint8_t )( ( channel >> 8 ) & 0xFF ) );
 8015eac:	68fb      	ldr	r3, [r7, #12]
 8015eae:	0a1b      	lsrs	r3, r3, #8
 8015eb0:	b2db      	uxtb	r3, r3
 8015eb2:	0019      	movs	r1, r3
 8015eb4:	2007      	movs	r0, #7
 8015eb6:	f001 fc13 	bl	80176e0 <SX1276Write>
    SX1276Write( REG_FRFLSB, ( uint8_t )( channel & 0xFF ) );
 8015eba:	68fb      	ldr	r3, [r7, #12]
 8015ebc:	b2db      	uxtb	r3, r3
 8015ebe:	0019      	movs	r1, r3
 8015ec0:	2008      	movs	r0, #8
 8015ec2:	f001 fc0d 	bl	80176e0 <SX1276Write>
}
 8015ec6:	46c0      	nop			; (mov r8, r8)
 8015ec8:	46bd      	mov	sp, r7
 8015eca:	b007      	add	sp, #28
 8015ecc:	bd90      	pop	{r4, r7, pc}
 8015ece:	46c0      	nop			; (mov r8, r8)
 8015ed0:	200015b8 	.word	0x200015b8
 8015ed4:	00003d09 	.word	0x00003d09
 8015ed8:	00001e84 	.word	0x00001e84

08015edc <SX1276IsChannelFree>:

bool SX1276IsChannelFree( RadioModems_t modem, uint32_t freq, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 8015edc:	b5b0      	push	{r4, r5, r7, lr}
 8015ede:	b086      	sub	sp, #24
 8015ee0:	af00      	add	r7, sp, #0
 8015ee2:	60b9      	str	r1, [r7, #8]
 8015ee4:	0011      	movs	r1, r2
 8015ee6:	607b      	str	r3, [r7, #4]
 8015ee8:	240f      	movs	r4, #15
 8015eea:	193b      	adds	r3, r7, r4
 8015eec:	1c02      	adds	r2, r0, #0
 8015eee:	701a      	strb	r2, [r3, #0]
 8015ef0:	230c      	movs	r3, #12
 8015ef2:	18fb      	adds	r3, r7, r3
 8015ef4:	1c0a      	adds	r2, r1, #0
 8015ef6:	801a      	strh	r2, [r3, #0]
	LOG_INFO_SX1276((">> SX1276IsChannelFree\r\n"));

    bool status = true;
 8015ef8:	2317      	movs	r3, #23
 8015efa:	18fb      	adds	r3, r7, r3
 8015efc:	2201      	movs	r2, #1
 8015efe:	701a      	strb	r2, [r3, #0]
    int16_t rssi = 0;
 8015f00:	2314      	movs	r3, #20
 8015f02:	18fb      	adds	r3, r7, r3
 8015f04:	2200      	movs	r2, #0
 8015f06:	801a      	strh	r2, [r3, #0]
    uint32_t carrierSenseTime = 0;
 8015f08:	2300      	movs	r3, #0
 8015f0a:	613b      	str	r3, [r7, #16]

    SX1276SetModem( modem );
 8015f0c:	193b      	adds	r3, r7, r4
 8015f0e:	781b      	ldrb	r3, [r3, #0]
 8015f10:	0018      	movs	r0, r3
 8015f12:	f001 fb8d 	bl	8017630 <SX1276SetModem>

    SX1276SetChannel( freq );
 8015f16:	68bb      	ldr	r3, [r7, #8]
 8015f18:	0018      	movs	r0, r3
 8015f1a:	f7ff ff99 	bl	8015e50 <SX1276SetChannel>

    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 8015f1e:	2005      	movs	r0, #5
 8015f20:	f001 fb36 	bl	8017590 <SX1276SetOpMode>

    DelayMs( 1 );
 8015f24:	2001      	movs	r0, #1
 8015f26:	f007 fc0d 	bl	801d744 <itsdk_delayMs>

    carrierSenseTime = TimerGetCurrentTime( );
 8015f2a:	f7ff fb83 	bl	8015634 <TimerGetCurrentTime>
 8015f2e:	0003      	movs	r3, r0
 8015f30:	613b      	str	r3, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8015f32:	e017      	b.n	8015f64 <SX1276IsChannelFree+0x88>
    {
        rssi = SX1276ReadRssi( modem );
 8015f34:	2514      	movs	r5, #20
 8015f36:	197c      	adds	r4, r7, r5
 8015f38:	230f      	movs	r3, #15
 8015f3a:	18fb      	adds	r3, r7, r3
 8015f3c:	781b      	ldrb	r3, [r3, #0]
 8015f3e:	0018      	movs	r0, r3
 8015f40:	f001 fac0 	bl	80174c4 <SX1276ReadRssi>
 8015f44:	0003      	movs	r3, r0
 8015f46:	8023      	strh	r3, [r4, #0]

        if( rssi > rssiThresh )
 8015f48:	197a      	adds	r2, r7, r5
 8015f4a:	230c      	movs	r3, #12
 8015f4c:	18fb      	adds	r3, r7, r3
 8015f4e:	2100      	movs	r1, #0
 8015f50:	5e52      	ldrsh	r2, [r2, r1]
 8015f52:	2100      	movs	r1, #0
 8015f54:	5e5b      	ldrsh	r3, [r3, r1]
 8015f56:	429a      	cmp	r2, r3
 8015f58:	dd04      	ble.n	8015f64 <SX1276IsChannelFree+0x88>
        {
            status = false;
 8015f5a:	2317      	movs	r3, #23
 8015f5c:	18fb      	adds	r3, r7, r3
 8015f5e:	2200      	movs	r2, #0
 8015f60:	701a      	strb	r2, [r3, #0]
            break;
 8015f62:	e007      	b.n	8015f74 <SX1276IsChannelFree+0x98>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8015f64:	693b      	ldr	r3, [r7, #16]
 8015f66:	0018      	movs	r0, r3
 8015f68:	f7ff fb6d 	bl	8015646 <TimerGetElapsedTime>
 8015f6c:	0002      	movs	r2, r0
 8015f6e:	687b      	ldr	r3, [r7, #4]
 8015f70:	4293      	cmp	r3, r2
 8015f72:	d8df      	bhi.n	8015f34 <SX1276IsChannelFree+0x58>
        }
    }
    SX1276SetSleep( );
 8015f74:	f000 ffde 	bl	8016f34 <SX1276SetSleep>
    return status;
 8015f78:	2317      	movs	r3, #23
 8015f7a:	18fb      	adds	r3, r7, r3
 8015f7c:	781b      	ldrb	r3, [r3, #0]
}
 8015f7e:	0018      	movs	r0, r3
 8015f80:	46bd      	mov	sp, r7
 8015f82:	b006      	add	sp, #24
 8015f84:	bdb0      	pop	{r4, r5, r7, pc}

08015f86 <SX1276Random>:

uint32_t SX1276Random( void )
{
 8015f86:	b580      	push	{r7, lr}
 8015f88:	b082      	sub	sp, #8
 8015f8a:	af00      	add	r7, sp, #0
	LOG_INFO_SX1276((">> SX1276Random\r\n"));

    uint8_t i;
    uint32_t rnd = 0;
 8015f8c:	2300      	movs	r3, #0
 8015f8e:	603b      	str	r3, [r7, #0]

    /*
     * Radio setup for random number generation
     */
    // Set LoRa modem ON
    SX1276SetModem( MODEM_LORA );
 8015f90:	2001      	movs	r0, #1
 8015f92:	f001 fb4d 	bl	8017630 <SX1276SetModem>

    // Disable LoRa modem interrupts
    SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8015f96:	21ff      	movs	r1, #255	; 0xff
 8015f98:	2011      	movs	r0, #17
 8015f9a:	f001 fba1 	bl	80176e0 <SX1276Write>
                  RFLR_IRQFLAGS_CADDONE |
                  RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                  RFLR_IRQFLAGS_CADDETECTED );

    // Set radio in continuous reception
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 8015f9e:	2005      	movs	r0, #5
 8015fa0:	f001 faf6 	bl	8017590 <SX1276SetOpMode>

    for( i = 0; i < 32; i++ )
 8015fa4:	1dfb      	adds	r3, r7, #7
 8015fa6:	2200      	movs	r2, #0
 8015fa8:	701a      	strb	r2, [r3, #0]
 8015faa:	e015      	b.n	8015fd8 <SX1276Random+0x52>
    {
        DelayMs( 1 );
 8015fac:	2001      	movs	r0, #1
 8015fae:	f007 fbc9 	bl	801d744 <itsdk_delayMs>
        // Unfiltered RSSI value reading. Only takes the LSB value
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
 8015fb2:	202c      	movs	r0, #44	; 0x2c
 8015fb4:	f001 fba8 	bl	8017708 <SX1276Read>
 8015fb8:	0003      	movs	r3, r0
 8015fba:	001a      	movs	r2, r3
 8015fbc:	2301      	movs	r3, #1
 8015fbe:	401a      	ands	r2, r3
 8015fc0:	1dfb      	adds	r3, r7, #7
 8015fc2:	781b      	ldrb	r3, [r3, #0]
 8015fc4:	409a      	lsls	r2, r3
 8015fc6:	0013      	movs	r3, r2
 8015fc8:	683a      	ldr	r2, [r7, #0]
 8015fca:	4313      	orrs	r3, r2
 8015fcc:	603b      	str	r3, [r7, #0]
    for( i = 0; i < 32; i++ )
 8015fce:	1dfb      	adds	r3, r7, #7
 8015fd0:	781a      	ldrb	r2, [r3, #0]
 8015fd2:	1dfb      	adds	r3, r7, #7
 8015fd4:	3201      	adds	r2, #1
 8015fd6:	701a      	strb	r2, [r3, #0]
 8015fd8:	1dfb      	adds	r3, r7, #7
 8015fda:	781b      	ldrb	r3, [r3, #0]
 8015fdc:	2b1f      	cmp	r3, #31
 8015fde:	d9e5      	bls.n	8015fac <SX1276Random+0x26>
    }

    SX1276SetSleep( );
 8015fe0:	f000 ffa8 	bl	8016f34 <SX1276SetSleep>

    return rnd;
 8015fe4:	683b      	ldr	r3, [r7, #0]
}
 8015fe6:	0018      	movs	r0, r3
 8015fe8:	46bd      	mov	sp, r7
 8015fea:	b002      	add	sp, #8
 8015fec:	bd80      	pop	{r7, pc}
	...

08015ff0 <RxChainCalibration>:
 * Performs the Rx chain calibration for LF and HF bands
 * \remark Must be called just after the reset so all registers are at their
 *         default values
 */
void RxChainCalibration( void )
{
 8015ff0:	b590      	push	{r4, r7, lr}
 8015ff2:	b087      	sub	sp, #28
 8015ff4:	af00      	add	r7, sp, #0
    uint8_t regPaConfigInitVal;
    uint32_t initialFreq;
    uint32_t channel;

    // Save context
    regPaConfigInitVal = SX1276Read( REG_PACONFIG );
 8015ff6:	2317      	movs	r3, #23
 8015ff8:	18fc      	adds	r4, r7, r3
 8015ffa:	2009      	movs	r0, #9
 8015ffc:	f001 fb84 	bl	8017708 <SX1276Read>
 8016000:	0003      	movs	r3, r0
 8016002:	7023      	strb	r3, [r4, #0]

    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8016004:	2006      	movs	r0, #6
 8016006:	f001 fb7f 	bl	8017708 <SX1276Read>
 801600a:	0003      	movs	r3, r0
 801600c:	041c      	lsls	r4, r3, #16
                ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
 801600e:	2007      	movs	r0, #7
 8016010:	f001 fb7a 	bl	8017708 <SX1276Read>
 8016014:	0003      	movs	r3, r0
 8016016:	021b      	lsls	r3, r3, #8
    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8016018:	431c      	orrs	r4, r3
                ( ( uint32_t )SX1276Read( REG_FRFLSB ) ) );
 801601a:	2008      	movs	r0, #8
 801601c:	f001 fb74 	bl	8017708 <SX1276Read>
 8016020:	0003      	movs	r3, r0
    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8016022:	4323      	orrs	r3, r4
 8016024:	613b      	str	r3, [r7, #16]

    SX_CHANNEL_TO_FREQ(channel, initialFreq);
 8016026:	693b      	ldr	r3, [r7, #16]
 8016028:	0a1b      	lsrs	r3, r3, #8
 801602a:	60fb      	str	r3, [r7, #12]
 801602c:	68fb      	ldr	r3, [r7, #12]
 801602e:	021b      	lsls	r3, r3, #8
 8016030:	693a      	ldr	r2, [r7, #16]
 8016032:	1ad3      	subs	r3, r2, r3
 8016034:	60bb      	str	r3, [r7, #8]
 8016036:	68f9      	ldr	r1, [r7, #12]
 8016038:	000b      	movs	r3, r1
 801603a:	015b      	lsls	r3, r3, #5
 801603c:	1a5b      	subs	r3, r3, r1
 801603e:	019a      	lsls	r2, r3, #6
 8016040:	1ad2      	subs	r2, r2, r3
 8016042:	00d2      	lsls	r2, r2, #3
 8016044:	1850      	adds	r0, r2, r1
 8016046:	68b9      	ldr	r1, [r7, #8]
 8016048:	000b      	movs	r3, r1
 801604a:	015b      	lsls	r3, r3, #5
 801604c:	1a5b      	subs	r3, r3, r1
 801604e:	019a      	lsls	r2, r3, #6
 8016050:	1ad2      	subs	r2, r2, r3
 8016052:	00d2      	lsls	r2, r2, #3
 8016054:	1853      	adds	r3, r2, r1
 8016056:	3380      	adds	r3, #128	; 0x80
 8016058:	0a1b      	lsrs	r3, r3, #8
 801605a:	18c3      	adds	r3, r0, r3
 801605c:	607b      	str	r3, [r7, #4]

    // Cut the PA just in case, RFO output, power = -1 dBm
    SX1276Write( REG_PACONFIG, 0x00 );
 801605e:	2100      	movs	r1, #0
 8016060:	2009      	movs	r0, #9
 8016062:	f001 fb3d 	bl	80176e0 <SX1276Write>

    // Launch Rx chain calibration for LF band
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 8016066:	203b      	movs	r0, #59	; 0x3b
 8016068:	f001 fb4e 	bl	8017708 <SX1276Read>
 801606c:	0003      	movs	r3, r0
 801606e:	001a      	movs	r2, r3
 8016070:	2340      	movs	r3, #64	; 0x40
 8016072:	4313      	orrs	r3, r2
 8016074:	b2db      	uxtb	r3, r3
 8016076:	0019      	movs	r1, r3
 8016078:	203b      	movs	r0, #59	; 0x3b
 801607a:	f001 fb31 	bl	80176e0 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 801607e:	46c0      	nop			; (mov r8, r8)
 8016080:	203b      	movs	r0, #59	; 0x3b
 8016082:	f001 fb41 	bl	8017708 <SX1276Read>
 8016086:	0003      	movs	r3, r0
 8016088:	001a      	movs	r2, r3
 801608a:	2320      	movs	r3, #32
 801608c:	4013      	ands	r3, r2
 801608e:	2b20      	cmp	r3, #32
 8016090:	d0f6      	beq.n	8016080 <RxChainCalibration+0x90>
    {
    }

    // Sets a Frequency in HF band
    SX1276SetChannel( 868000000 );
 8016092:	4b14      	ldr	r3, [pc, #80]	; (80160e4 <RxChainCalibration+0xf4>)
 8016094:	0018      	movs	r0, r3
 8016096:	f7ff fedb 	bl	8015e50 <SX1276SetChannel>

    // Launch Rx chain calibration for HF band
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 801609a:	203b      	movs	r0, #59	; 0x3b
 801609c:	f001 fb34 	bl	8017708 <SX1276Read>
 80160a0:	0003      	movs	r3, r0
 80160a2:	001a      	movs	r2, r3
 80160a4:	2340      	movs	r3, #64	; 0x40
 80160a6:	4313      	orrs	r3, r2
 80160a8:	b2db      	uxtb	r3, r3
 80160aa:	0019      	movs	r1, r3
 80160ac:	203b      	movs	r0, #59	; 0x3b
 80160ae:	f001 fb17 	bl	80176e0 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 80160b2:	46c0      	nop			; (mov r8, r8)
 80160b4:	203b      	movs	r0, #59	; 0x3b
 80160b6:	f001 fb27 	bl	8017708 <SX1276Read>
 80160ba:	0003      	movs	r3, r0
 80160bc:	001a      	movs	r2, r3
 80160be:	2320      	movs	r3, #32
 80160c0:	4013      	ands	r3, r2
 80160c2:	2b20      	cmp	r3, #32
 80160c4:	d0f6      	beq.n	80160b4 <RxChainCalibration+0xc4>
    {
    }

    // Restore context
    SX1276Write( REG_PACONFIG, regPaConfigInitVal );
 80160c6:	2317      	movs	r3, #23
 80160c8:	18fb      	adds	r3, r7, r3
 80160ca:	781b      	ldrb	r3, [r3, #0]
 80160cc:	0019      	movs	r1, r3
 80160ce:	2009      	movs	r0, #9
 80160d0:	f001 fb06 	bl	80176e0 <SX1276Write>
    SX1276SetChannel( initialFreq );
 80160d4:	687b      	ldr	r3, [r7, #4]
 80160d6:	0018      	movs	r0, r3
 80160d8:	f7ff feba 	bl	8015e50 <SX1276SetChannel>
}
 80160dc:	46c0      	nop			; (mov r8, r8)
 80160de:	46bd      	mov	sp, r7
 80160e0:	b007      	add	sp, #28
 80160e2:	bd90      	pop	{r4, r7, pc}
 80160e4:	33bca100 	.word	0x33bca100

080160e8 <GetFskBandwidthRegValue>:
 *
 * \param [IN] bandwidth Bandwidth value in Hz
 * \retval regValue Bandwidth register value.
 */
static uint8_t GetFskBandwidthRegValue( uint32_t bandwidth )
{
 80160e8:	b580      	push	{r7, lr}
 80160ea:	b084      	sub	sp, #16
 80160ec:	af00      	add	r7, sp, #0
 80160ee:	6078      	str	r0, [r7, #4]
	LOG_INFO_SX1276((">> GetFskBandwidthRegValue\r\n"));

    uint8_t i;

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 80160f0:	230f      	movs	r3, #15
 80160f2:	18fb      	adds	r3, r7, r3
 80160f4:	2200      	movs	r2, #0
 80160f6:	701a      	strb	r2, [r3, #0]
 80160f8:	e021      	b.n	801613e <GetFskBandwidthRegValue+0x56>
    {
        if( ( bandwidth >= FskBandwidths[i].bandwidth ) && ( bandwidth < FskBandwidths[i + 1].bandwidth ) )
 80160fa:	230f      	movs	r3, #15
 80160fc:	18fb      	adds	r3, r7, r3
 80160fe:	781a      	ldrb	r2, [r3, #0]
 8016100:	4b14      	ldr	r3, [pc, #80]	; (8016154 <GetFskBandwidthRegValue+0x6c>)
 8016102:	00d2      	lsls	r2, r2, #3
 8016104:	58d3      	ldr	r3, [r2, r3]
 8016106:	687a      	ldr	r2, [r7, #4]
 8016108:	429a      	cmp	r2, r3
 801610a:	d312      	bcc.n	8016132 <GetFskBandwidthRegValue+0x4a>
 801610c:	230f      	movs	r3, #15
 801610e:	18fb      	adds	r3, r7, r3
 8016110:	781b      	ldrb	r3, [r3, #0]
 8016112:	1c5a      	adds	r2, r3, #1
 8016114:	4b0f      	ldr	r3, [pc, #60]	; (8016154 <GetFskBandwidthRegValue+0x6c>)
 8016116:	00d2      	lsls	r2, r2, #3
 8016118:	58d3      	ldr	r3, [r2, r3]
 801611a:	687a      	ldr	r2, [r7, #4]
 801611c:	429a      	cmp	r2, r3
 801611e:	d208      	bcs.n	8016132 <GetFskBandwidthRegValue+0x4a>
        {
            return FskBandwidths[i].RegValue;
 8016120:	230f      	movs	r3, #15
 8016122:	18fb      	adds	r3, r7, r3
 8016124:	781b      	ldrb	r3, [r3, #0]
 8016126:	4a0b      	ldr	r2, [pc, #44]	; (8016154 <GetFskBandwidthRegValue+0x6c>)
 8016128:	00db      	lsls	r3, r3, #3
 801612a:	18d3      	adds	r3, r2, r3
 801612c:	3304      	adds	r3, #4
 801612e:	781b      	ldrb	r3, [r3, #0]
 8016130:	e00b      	b.n	801614a <GetFskBandwidthRegValue+0x62>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 8016132:	210f      	movs	r1, #15
 8016134:	187b      	adds	r3, r7, r1
 8016136:	781a      	ldrb	r2, [r3, #0]
 8016138:	187b      	adds	r3, r7, r1
 801613a:	3201      	adds	r2, #1
 801613c:	701a      	strb	r2, [r3, #0]
 801613e:	230f      	movs	r3, #15
 8016140:	18fb      	adds	r3, r7, r3
 8016142:	781b      	ldrb	r3, [r3, #0]
 8016144:	2b14      	cmp	r3, #20
 8016146:	d9d8      	bls.n	80160fa <GetFskBandwidthRegValue+0x12>
        }
    }
    // ERROR: Value not found
    while( 1 );
 8016148:	e7fe      	b.n	8016148 <GetFskBandwidthRegValue+0x60>
}
 801614a:	0018      	movs	r0, r3
 801614c:	46bd      	mov	sp, r7
 801614e:	b004      	add	sp, #16
 8016150:	bd80      	pop	{r7, pc}
 8016152:	46c0      	nop			; (mov r8, r8)
 8016154:	08020cfc 	.word	0x08020cfc

08016158 <SX1276SetRxConfig>:
                         uint32_t bandwidthAfc, uint16_t preambleLen,
                         uint16_t symbTimeout, bool fixLen,
                         uint8_t payloadLen,
                         bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                         bool iqInverted, bool rxContinuous )
{
 8016158:	b5f0      	push	{r4, r5, r6, r7, lr}
 801615a:	46c6      	mov	lr, r8
 801615c:	b500      	push	{lr}
 801615e:	b084      	sub	sp, #16
 8016160:	af00      	add	r7, sp, #0
 8016162:	60b9      	str	r1, [r7, #8]
 8016164:	607a      	str	r2, [r7, #4]
 8016166:	0019      	movs	r1, r3
 8016168:	240f      	movs	r4, #15
 801616a:	193b      	adds	r3, r7, r4
 801616c:	1c02      	adds	r2, r0, #0
 801616e:	701a      	strb	r2, [r3, #0]
 8016170:	230e      	movs	r3, #14
 8016172:	18fb      	adds	r3, r7, r3
 8016174:	1c0a      	adds	r2, r1, #0
 8016176:	701a      	strb	r2, [r3, #0]
	LOG_INFO_SX1276((">> SX1276SetRxConfig\r\n"));

    SX1276SetModem( modem );
 8016178:	193b      	adds	r3, r7, r4
 801617a:	781b      	ldrb	r3, [r3, #0]
 801617c:	0018      	movs	r0, r3
 801617e:	f001 fa57 	bl	8017630 <SX1276SetModem>

    switch( modem )
 8016182:	193b      	adds	r3, r7, r4
 8016184:	781b      	ldrb	r3, [r3, #0]
 8016186:	2b00      	cmp	r3, #0
 8016188:	d003      	beq.n	8016192 <SX1276SetRxConfig+0x3a>
 801618a:	2b01      	cmp	r3, #1
 801618c:	d100      	bne.n	8016190 <SX1276SetRxConfig+0x38>
 801618e:	e100      	b.n	8016392 <SX1276SetRxConfig+0x23a>
                             RFLR_DETECTIONTHRESH_SF7_TO_SF12 );
            }
        }
        break;
    }
}
 8016190:	e274      	b.n	801667c <SX1276SetRxConfig+0x524>
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 8016192:	4bc0      	ldr	r3, [pc, #768]	; (8016494 <SX1276SetRxConfig+0x33c>)
 8016194:	68ba      	ldr	r2, [r7, #8]
 8016196:	615a      	str	r2, [r3, #20]
            SX1276.Settings.Fsk.Datarate = datarate;
 8016198:	4bbe      	ldr	r3, [pc, #760]	; (8016494 <SX1276SetRxConfig+0x33c>)
 801619a:	687a      	ldr	r2, [r7, #4]
 801619c:	61da      	str	r2, [r3, #28]
            SX1276.Settings.Fsk.BandwidthAfc = bandwidthAfc;
 801619e:	4bbd      	ldr	r3, [pc, #756]	; (8016494 <SX1276SetRxConfig+0x33c>)
 80161a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80161a2:	619a      	str	r2, [r3, #24]
            SX1276.Settings.Fsk.FixLen = fixLen;
 80161a4:	4bbb      	ldr	r3, [pc, #748]	; (8016494 <SX1276SetRxConfig+0x33c>)
 80161a6:	222c      	movs	r2, #44	; 0x2c
 80161a8:	2108      	movs	r1, #8
 80161aa:	468c      	mov	ip, r1
 80161ac:	44bc      	add	ip, r7
 80161ae:	4462      	add	r2, ip
 80161b0:	2122      	movs	r1, #34	; 0x22
 80161b2:	7812      	ldrb	r2, [r2, #0]
 80161b4:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.PayloadLen = payloadLen;
 80161b6:	4bb7      	ldr	r3, [pc, #732]	; (8016494 <SX1276SetRxConfig+0x33c>)
 80161b8:	2130      	movs	r1, #48	; 0x30
 80161ba:	2008      	movs	r0, #8
 80161bc:	183a      	adds	r2, r7, r0
 80161be:	1852      	adds	r2, r2, r1
 80161c0:	2123      	movs	r1, #35	; 0x23
 80161c2:	7812      	ldrb	r2, [r2, #0]
 80161c4:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.CrcOn = crcOn;
 80161c6:	4bb3      	ldr	r3, [pc, #716]	; (8016494 <SX1276SetRxConfig+0x33c>)
 80161c8:	2134      	movs	r1, #52	; 0x34
 80161ca:	183a      	adds	r2, r7, r0
 80161cc:	1852      	adds	r2, r2, r1
 80161ce:	2124      	movs	r1, #36	; 0x24
 80161d0:	7812      	ldrb	r2, [r2, #0]
 80161d2:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 80161d4:	4baf      	ldr	r3, [pc, #700]	; (8016494 <SX1276SetRxConfig+0x33c>)
 80161d6:	2220      	movs	r2, #32
 80161d8:	2120      	movs	r1, #32
 80161da:	468c      	mov	ip, r1
 80161dc:	2108      	movs	r1, #8
 80161de:	4688      	mov	r8, r1
 80161e0:	44b8      	add	r8, r7
 80161e2:	44c4      	add	ip, r8
 80161e4:	4462      	add	r2, ip
 80161e6:	2125      	movs	r1, #37	; 0x25
 80161e8:	7812      	ldrb	r2, [r2, #0]
 80161ea:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.RxContinuous = rxContinuous;
 80161ec:	4ba9      	ldr	r3, [pc, #676]	; (8016494 <SX1276SetRxConfig+0x33c>)
 80161ee:	2224      	movs	r2, #36	; 0x24
 80161f0:	2120      	movs	r1, #32
 80161f2:	468c      	mov	ip, r1
 80161f4:	2108      	movs	r1, #8
 80161f6:	4688      	mov	r8, r1
 80161f8:	44b8      	add	r8, r7
 80161fa:	44c4      	add	ip, r8
 80161fc:	4462      	add	r2, ip
 80161fe:	2126      	movs	r1, #38	; 0x26
 8016200:	7812      	ldrb	r2, [r2, #0]
 8016202:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 8016204:	4ba3      	ldr	r3, [pc, #652]	; (8016494 <SX1276SetRxConfig+0x33c>)
 8016206:	2624      	movs	r6, #36	; 0x24
 8016208:	183a      	adds	r2, r7, r0
 801620a:	1992      	adds	r2, r2, r6
 801620c:	8812      	ldrh	r2, [r2, #0]
 801620e:	841a      	strh	r2, [r3, #32]
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )( symbTimeout * ( ( 1.0 / ( double )datarate ) * 8.0 ) * 1000 );
 8016210:	2328      	movs	r3, #40	; 0x28
 8016212:	2208      	movs	r2, #8
 8016214:	4694      	mov	ip, r2
 8016216:	44bc      	add	ip, r7
 8016218:	4463      	add	r3, ip
 801621a:	881b      	ldrh	r3, [r3, #0]
 801621c:	0018      	movs	r0, r3
 801621e:	f7ec f9b3 	bl	8002588 <__aeabi_i2d>
 8016222:	0004      	movs	r4, r0
 8016224:	000d      	movs	r5, r1
 8016226:	6878      	ldr	r0, [r7, #4]
 8016228:	f7ec f9e8 	bl	80025fc <__aeabi_ui2d>
 801622c:	0002      	movs	r2, r0
 801622e:	000b      	movs	r3, r1
 8016230:	2000      	movs	r0, #0
 8016232:	4999      	ldr	r1, [pc, #612]	; (8016498 <SX1276SetRxConfig+0x340>)
 8016234:	f7ea ffae 	bl	8001194 <__aeabi_ddiv>
 8016238:	0002      	movs	r2, r0
 801623a:	000b      	movs	r3, r1
 801623c:	0010      	movs	r0, r2
 801623e:	0019      	movs	r1, r3
 8016240:	2200      	movs	r2, #0
 8016242:	4b96      	ldr	r3, [pc, #600]	; (801649c <SX1276SetRxConfig+0x344>)
 8016244:	f7eb fbb0 	bl	80019a8 <__aeabi_dmul>
 8016248:	0002      	movs	r2, r0
 801624a:	000b      	movs	r3, r1
 801624c:	0020      	movs	r0, r4
 801624e:	0029      	movs	r1, r5
 8016250:	f7eb fbaa 	bl	80019a8 <__aeabi_dmul>
 8016254:	0003      	movs	r3, r0
 8016256:	000c      	movs	r4, r1
 8016258:	0018      	movs	r0, r3
 801625a:	0021      	movs	r1, r4
 801625c:	2200      	movs	r2, #0
 801625e:	4b90      	ldr	r3, [pc, #576]	; (80164a0 <SX1276SetRxConfig+0x348>)
 8016260:	f7eb fba2 	bl	80019a8 <__aeabi_dmul>
 8016264:	0003      	movs	r3, r0
 8016266:	000c      	movs	r4, r1
 8016268:	0018      	movs	r0, r3
 801626a:	0021      	movs	r1, r4
 801626c:	f7ea f976 	bl	800055c <__aeabi_d2uiz>
 8016270:	0002      	movs	r2, r0
 8016272:	4b88      	ldr	r3, [pc, #544]	; (8016494 <SX1276SetRxConfig+0x33c>)
 8016274:	62da      	str	r2, [r3, #44]	; 0x2c
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 8016276:	6878      	ldr	r0, [r7, #4]
 8016278:	f7ec f9c0 	bl	80025fc <__aeabi_ui2d>
 801627c:	0003      	movs	r3, r0
 801627e:	000c      	movs	r4, r1
 8016280:	001a      	movs	r2, r3
 8016282:	0023      	movs	r3, r4
 8016284:	2000      	movs	r0, #0
 8016286:	4987      	ldr	r1, [pc, #540]	; (80164a4 <SX1276SetRxConfig+0x34c>)
 8016288:	f7ea ff84 	bl	8001194 <__aeabi_ddiv>
 801628c:	0003      	movs	r3, r0
 801628e:	000c      	movs	r4, r1
 8016290:	0018      	movs	r0, r3
 8016292:	0021      	movs	r1, r4
 8016294:	f7ea f962 	bl	800055c <__aeabi_d2uiz>
 8016298:	0003      	movs	r3, r0
 801629a:	b29b      	uxth	r3, r3
 801629c:	607b      	str	r3, [r7, #4]
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 801629e:	687b      	ldr	r3, [r7, #4]
 80162a0:	0a1b      	lsrs	r3, r3, #8
 80162a2:	b2db      	uxtb	r3, r3
 80162a4:	0019      	movs	r1, r3
 80162a6:	2002      	movs	r0, #2
 80162a8:	f001 fa1a 	bl	80176e0 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 80162ac:	687b      	ldr	r3, [r7, #4]
 80162ae:	b2db      	uxtb	r3, r3
 80162b0:	0019      	movs	r1, r3
 80162b2:	2003      	movs	r0, #3
 80162b4:	f001 fa14 	bl	80176e0 <SX1276Write>
            SX1276Write( REG_RXBW, GetFskBandwidthRegValue( bandwidth ) );
 80162b8:	68bb      	ldr	r3, [r7, #8]
 80162ba:	0018      	movs	r0, r3
 80162bc:	f7ff ff14 	bl	80160e8 <GetFskBandwidthRegValue>
 80162c0:	0003      	movs	r3, r0
 80162c2:	0019      	movs	r1, r3
 80162c4:	2012      	movs	r0, #18
 80162c6:	f001 fa0b 	bl	80176e0 <SX1276Write>
            SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( bandwidthAfc ) );
 80162ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80162cc:	0018      	movs	r0, r3
 80162ce:	f7ff ff0b 	bl	80160e8 <GetFskBandwidthRegValue>
 80162d2:	0003      	movs	r3, r0
 80162d4:	0019      	movs	r1, r3
 80162d6:	2013      	movs	r0, #19
 80162d8:	f001 fa02 	bl	80176e0 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 80162dc:	2008      	movs	r0, #8
 80162de:	0004      	movs	r4, r0
 80162e0:	183b      	adds	r3, r7, r0
 80162e2:	199b      	adds	r3, r3, r6
 80162e4:	881b      	ldrh	r3, [r3, #0]
 80162e6:	0a1b      	lsrs	r3, r3, #8
 80162e8:	b29b      	uxth	r3, r3
 80162ea:	b2db      	uxtb	r3, r3
 80162ec:	0019      	movs	r1, r3
 80162ee:	2025      	movs	r0, #37	; 0x25
 80162f0:	f001 f9f6 	bl	80176e0 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 80162f4:	193b      	adds	r3, r7, r4
 80162f6:	199b      	adds	r3, r3, r6
 80162f8:	881b      	ldrh	r3, [r3, #0]
 80162fa:	b2db      	uxtb	r3, r3
 80162fc:	0019      	movs	r1, r3
 80162fe:	2026      	movs	r0, #38	; 0x26
 8016300:	f001 f9ee 	bl	80176e0 <SX1276Write>
            if( fixLen == 1 )
 8016304:	222c      	movs	r2, #44	; 0x2c
 8016306:	193b      	adds	r3, r7, r4
 8016308:	189b      	adds	r3, r3, r2
 801630a:	781b      	ldrb	r3, [r3, #0]
 801630c:	2b00      	cmp	r3, #0
 801630e:	d00a      	beq.n	8016326 <SX1276SetRxConfig+0x1ce>
                SX1276Write( REG_PAYLOADLENGTH, payloadLen );
 8016310:	2330      	movs	r3, #48	; 0x30
 8016312:	2208      	movs	r2, #8
 8016314:	4694      	mov	ip, r2
 8016316:	44bc      	add	ip, r7
 8016318:	4463      	add	r3, ip
 801631a:	781b      	ldrb	r3, [r3, #0]
 801631c:	0019      	movs	r1, r3
 801631e:	2032      	movs	r0, #50	; 0x32
 8016320:	f001 f9de 	bl	80176e0 <SX1276Write>
 8016324:	e003      	b.n	801632e <SX1276SetRxConfig+0x1d6>
                SX1276Write( REG_PAYLOADLENGTH, 0xFF ); // Set payload length to the maximum
 8016326:	21ff      	movs	r1, #255	; 0xff
 8016328:	2032      	movs	r0, #50	; 0x32
 801632a:	f001 f9d9 	bl	80176e0 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 801632e:	2030      	movs	r0, #48	; 0x30
 8016330:	f001 f9ea 	bl	8017708 <SX1276Read>
 8016334:	0003      	movs	r3, r0
 8016336:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_CRC_MASK &
 8016338:	226f      	movs	r2, #111	; 0x6f
 801633a:	4013      	ands	r3, r2
 801633c:	b25a      	sxtb	r2, r3
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 801633e:	232c      	movs	r3, #44	; 0x2c
 8016340:	2108      	movs	r1, #8
 8016342:	468c      	mov	ip, r1
 8016344:	44bc      	add	ip, r7
 8016346:	4463      	add	r3, ip
 8016348:	781b      	ldrb	r3, [r3, #0]
 801634a:	2b00      	cmp	r3, #0
 801634c:	d001      	beq.n	8016352 <SX1276SetRxConfig+0x1fa>
 801634e:	2300      	movs	r3, #0
 8016350:	e001      	b.n	8016356 <SX1276SetRxConfig+0x1fe>
 8016352:	2380      	movs	r3, #128	; 0x80
 8016354:	425b      	negs	r3, r3
 8016356:	4313      	orrs	r3, r2
 8016358:	b25a      	sxtb	r2, r3
                           ( crcOn << 4 ) );
 801635a:	2334      	movs	r3, #52	; 0x34
 801635c:	2108      	movs	r1, #8
 801635e:	468c      	mov	ip, r1
 8016360:	44bc      	add	ip, r7
 8016362:	4463      	add	r3, ip
 8016364:	781b      	ldrb	r3, [r3, #0]
 8016366:	011b      	lsls	r3, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 8016368:	b25b      	sxtb	r3, r3
 801636a:	4313      	orrs	r3, r2
 801636c:	b25b      	sxtb	r3, r3
            SX1276Write( REG_PACKETCONFIG1,
 801636e:	b2db      	uxtb	r3, r3
 8016370:	0019      	movs	r1, r3
 8016372:	2030      	movs	r0, #48	; 0x30
 8016374:	f001 f9b4 	bl	80176e0 <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 8016378:	2031      	movs	r0, #49	; 0x31
 801637a:	f001 f9c5 	bl	8017708 <SX1276Read>
 801637e:	0003      	movs	r3, r0
 8016380:	001a      	movs	r2, r3
 8016382:	2340      	movs	r3, #64	; 0x40
 8016384:	4313      	orrs	r3, r2
 8016386:	b2db      	uxtb	r3, r3
 8016388:	0019      	movs	r1, r3
 801638a:	2031      	movs	r0, #49	; 0x31
 801638c:	f001 f9a8 	bl	80176e0 <SX1276Write>
        break;
 8016390:	e174      	b.n	801667c <SX1276SetRxConfig+0x524>
            if( bandwidth > 2 )
 8016392:	68bb      	ldr	r3, [r7, #8]
 8016394:	2b02      	cmp	r3, #2
 8016396:	d900      	bls.n	801639a <SX1276SetRxConfig+0x242>
                while( 1 );
 8016398:	e7fe      	b.n	8016398 <SX1276SetRxConfig+0x240>
            bandwidth += 7;
 801639a:	68bb      	ldr	r3, [r7, #8]
 801639c:	3307      	adds	r3, #7
 801639e:	60bb      	str	r3, [r7, #8]
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 80163a0:	4b3c      	ldr	r3, [pc, #240]	; (8016494 <SX1276SetRxConfig+0x33c>)
 80163a2:	68ba      	ldr	r2, [r7, #8]
 80163a4:	645a      	str	r2, [r3, #68]	; 0x44
            SX1276.Settings.LoRa.Datarate = datarate;
 80163a6:	4b3b      	ldr	r3, [pc, #236]	; (8016494 <SX1276SetRxConfig+0x33c>)
 80163a8:	687a      	ldr	r2, [r7, #4]
 80163aa:	649a      	str	r2, [r3, #72]	; 0x48
            SX1276.Settings.LoRa.Coderate = coderate;
 80163ac:	4b39      	ldr	r3, [pc, #228]	; (8016494 <SX1276SetRxConfig+0x33c>)
 80163ae:	220e      	movs	r2, #14
 80163b0:	18ba      	adds	r2, r7, r2
 80163b2:	214d      	movs	r1, #77	; 0x4d
 80163b4:	7812      	ldrb	r2, [r2, #0]
 80163b6:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 80163b8:	4b36      	ldr	r3, [pc, #216]	; (8016494 <SX1276SetRxConfig+0x33c>)
 80163ba:	2224      	movs	r2, #36	; 0x24
 80163bc:	2108      	movs	r1, #8
 80163be:	468c      	mov	ip, r1
 80163c0:	44bc      	add	ip, r7
 80163c2:	4462      	add	r2, ip
 80163c4:	214e      	movs	r1, #78	; 0x4e
 80163c6:	8812      	ldrh	r2, [r2, #0]
 80163c8:	525a      	strh	r2, [r3, r1]
            SX1276.Settings.LoRa.FixLen = fixLen;
 80163ca:	4b32      	ldr	r3, [pc, #200]	; (8016494 <SX1276SetRxConfig+0x33c>)
 80163cc:	222c      	movs	r2, #44	; 0x2c
 80163ce:	2108      	movs	r1, #8
 80163d0:	468c      	mov	ip, r1
 80163d2:	44bc      	add	ip, r7
 80163d4:	4462      	add	r2, ip
 80163d6:	2150      	movs	r1, #80	; 0x50
 80163d8:	7812      	ldrb	r2, [r2, #0]
 80163da:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.PayloadLen = payloadLen;
 80163dc:	4b2d      	ldr	r3, [pc, #180]	; (8016494 <SX1276SetRxConfig+0x33c>)
 80163de:	2230      	movs	r2, #48	; 0x30
 80163e0:	2108      	movs	r1, #8
 80163e2:	468c      	mov	ip, r1
 80163e4:	44bc      	add	ip, r7
 80163e6:	4462      	add	r2, ip
 80163e8:	2151      	movs	r1, #81	; 0x51
 80163ea:	7812      	ldrb	r2, [r2, #0]
 80163ec:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.CrcOn = crcOn;
 80163ee:	4b29      	ldr	r3, [pc, #164]	; (8016494 <SX1276SetRxConfig+0x33c>)
 80163f0:	2234      	movs	r2, #52	; 0x34
 80163f2:	2108      	movs	r1, #8
 80163f4:	468c      	mov	ip, r1
 80163f6:	44bc      	add	ip, r7
 80163f8:	4462      	add	r2, ip
 80163fa:	2152      	movs	r1, #82	; 0x52
 80163fc:	7812      	ldrb	r2, [r2, #0]
 80163fe:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 8016400:	4b24      	ldr	r3, [pc, #144]	; (8016494 <SX1276SetRxConfig+0x33c>)
 8016402:	2238      	movs	r2, #56	; 0x38
 8016404:	2108      	movs	r1, #8
 8016406:	468c      	mov	ip, r1
 8016408:	44bc      	add	ip, r7
 801640a:	4462      	add	r2, ip
 801640c:	2153      	movs	r1, #83	; 0x53
 801640e:	7812      	ldrb	r2, [r2, #0]
 8016410:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 8016412:	4b20      	ldr	r3, [pc, #128]	; (8016494 <SX1276SetRxConfig+0x33c>)
 8016414:	223c      	movs	r2, #60	; 0x3c
 8016416:	2108      	movs	r1, #8
 8016418:	468c      	mov	ip, r1
 801641a:	44bc      	add	ip, r7
 801641c:	4462      	add	r2, ip
 801641e:	2154      	movs	r1, #84	; 0x54
 8016420:	7812      	ldrb	r2, [r2, #0]
 8016422:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 8016424:	4b1b      	ldr	r3, [pc, #108]	; (8016494 <SX1276SetRxConfig+0x33c>)
 8016426:	2220      	movs	r2, #32
 8016428:	2120      	movs	r1, #32
 801642a:	468c      	mov	ip, r1
 801642c:	2108      	movs	r1, #8
 801642e:	4688      	mov	r8, r1
 8016430:	44b8      	add	r8, r7
 8016432:	44c4      	add	ip, r8
 8016434:	4462      	add	r2, ip
 8016436:	2155      	movs	r1, #85	; 0x55
 8016438:	7812      	ldrb	r2, [r2, #0]
 801643a:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
 801643c:	4b15      	ldr	r3, [pc, #84]	; (8016494 <SX1276SetRxConfig+0x33c>)
 801643e:	2224      	movs	r2, #36	; 0x24
 8016440:	2120      	movs	r1, #32
 8016442:	468c      	mov	ip, r1
 8016444:	2108      	movs	r1, #8
 8016446:	4688      	mov	r8, r1
 8016448:	44b8      	add	r8, r7
 801644a:	44c4      	add	ip, r8
 801644c:	4462      	add	r2, ip
 801644e:	2156      	movs	r1, #86	; 0x56
 8016450:	7812      	ldrb	r2, [r2, #0]
 8016452:	545a      	strb	r2, [r3, r1]
            if( datarate > 12 )
 8016454:	687b      	ldr	r3, [r7, #4]
 8016456:	2b0c      	cmp	r3, #12
 8016458:	d902      	bls.n	8016460 <SX1276SetRxConfig+0x308>
                datarate = 12;
 801645a:	230c      	movs	r3, #12
 801645c:	607b      	str	r3, [r7, #4]
 801645e:	e004      	b.n	801646a <SX1276SetRxConfig+0x312>
            else if( datarate < 6 )
 8016460:	687b      	ldr	r3, [r7, #4]
 8016462:	2b05      	cmp	r3, #5
 8016464:	d801      	bhi.n	801646a <SX1276SetRxConfig+0x312>
                datarate = 6;
 8016466:	2306      	movs	r3, #6
 8016468:	607b      	str	r3, [r7, #4]
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801646a:	68bb      	ldr	r3, [r7, #8]
 801646c:	2b07      	cmp	r3, #7
 801646e:	d105      	bne.n	801647c <SX1276SetRxConfig+0x324>
 8016470:	687b      	ldr	r3, [r7, #4]
 8016472:	2b0b      	cmp	r3, #11
 8016474:	d008      	beq.n	8016488 <SX1276SetRxConfig+0x330>
 8016476:	687b      	ldr	r3, [r7, #4]
 8016478:	2b0c      	cmp	r3, #12
 801647a:	d005      	beq.n	8016488 <SX1276SetRxConfig+0x330>
 801647c:	68bb      	ldr	r3, [r7, #8]
 801647e:	2b08      	cmp	r3, #8
 8016480:	d112      	bne.n	80164a8 <SX1276SetRxConfig+0x350>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 8016482:	687b      	ldr	r3, [r7, #4]
 8016484:	2b0c      	cmp	r3, #12
 8016486:	d10f      	bne.n	80164a8 <SX1276SetRxConfig+0x350>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 8016488:	4b02      	ldr	r3, [pc, #8]	; (8016494 <SX1276SetRxConfig+0x33c>)
 801648a:	224c      	movs	r2, #76	; 0x4c
 801648c:	2101      	movs	r1, #1
 801648e:	5499      	strb	r1, [r3, r2]
 8016490:	e00e      	b.n	80164b0 <SX1276SetRxConfig+0x358>
 8016492:	46c0      	nop			; (mov r8, r8)
 8016494:	200015b8 	.word	0x200015b8
 8016498:	3ff00000 	.word	0x3ff00000
 801649c:	40200000 	.word	0x40200000
 80164a0:	408f4000 	.word	0x408f4000
 80164a4:	417e8480 	.word	0x417e8480
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 80164a8:	4b77      	ldr	r3, [pc, #476]	; (8016688 <SX1276SetRxConfig+0x530>)
 80164aa:	224c      	movs	r2, #76	; 0x4c
 80164ac:	2100      	movs	r1, #0
 80164ae:	5499      	strb	r1, [r3, r2]
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 80164b0:	201d      	movs	r0, #29
 80164b2:	f001 f929 	bl	8017708 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 80164b6:	68bb      	ldr	r3, [r7, #8]
 80164b8:	b2db      	uxtb	r3, r3
 80164ba:	011b      	lsls	r3, r3, #4
 80164bc:	b2da      	uxtb	r2, r3
 80164be:	230e      	movs	r3, #14
 80164c0:	18fb      	adds	r3, r7, r3
 80164c2:	781b      	ldrb	r3, [r3, #0]
 80164c4:	18db      	adds	r3, r3, r3
 80164c6:	b2db      	uxtb	r3, r3
 80164c8:	4313      	orrs	r3, r2
 80164ca:	b2da      	uxtb	r2, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 80164cc:	242c      	movs	r4, #44	; 0x2c
 80164ce:	2608      	movs	r6, #8
 80164d0:	19bb      	adds	r3, r7, r6
 80164d2:	191b      	adds	r3, r3, r4
 80164d4:	781b      	ldrb	r3, [r3, #0]
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 80164d6:	4313      	orrs	r3, r2
 80164d8:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 80164da:	0019      	movs	r1, r3
 80164dc:	201d      	movs	r0, #29
 80164de:	f001 f8ff 	bl	80176e0 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 80164e2:	201e      	movs	r0, #30
 80164e4:	f001 f910 	bl	8017708 <SX1276Read>
 80164e8:	0003      	movs	r3, r0
 80164ea:	001a      	movs	r2, r3
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK &
 80164ec:	2308      	movs	r3, #8
 80164ee:	4013      	ands	r3, r2
 80164f0:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 80164f2:	687b      	ldr	r3, [r7, #4]
 80164f4:	b2db      	uxtb	r3, r3
 80164f6:	011b      	lsls	r3, r3, #4
 80164f8:	b2db      	uxtb	r3, r3
                           RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) |
 80164fa:	4313      	orrs	r3, r2
 80164fc:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 80164fe:	2334      	movs	r3, #52	; 0x34
 8016500:	2108      	movs	r1, #8
 8016502:	468c      	mov	ip, r1
 8016504:	44bc      	add	ip, r7
 8016506:	4463      	add	r3, ip
 8016508:	781b      	ldrb	r3, [r3, #0]
 801650a:	009b      	lsls	r3, r3, #2
 801650c:	b2db      	uxtb	r3, r3
 801650e:	4313      	orrs	r3, r2
 8016510:	b2da      	uxtb	r2, r3
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
 8016512:	2528      	movs	r5, #40	; 0x28
 8016514:	19bb      	adds	r3, r7, r6
 8016516:	195b      	adds	r3, r3, r5
 8016518:	881b      	ldrh	r3, [r3, #0]
 801651a:	0a1b      	lsrs	r3, r3, #8
 801651c:	b29b      	uxth	r3, r3
 801651e:	b2db      	uxtb	r3, r3
 8016520:	2103      	movs	r1, #3
 8016522:	400b      	ands	r3, r1
 8016524:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG2,
 8016526:	4313      	orrs	r3, r2
 8016528:	b2db      	uxtb	r3, r3
 801652a:	0019      	movs	r1, r3
 801652c:	201e      	movs	r0, #30
 801652e:	f001 f8d7 	bl	80176e0 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 8016532:	2026      	movs	r0, #38	; 0x26
 8016534:	f001 f8e8 	bl	8017708 <SX1276Read>
 8016538:	0003      	movs	r3, r0
 801653a:	b25b      	sxtb	r3, r3
 801653c:	2208      	movs	r2, #8
 801653e:	4393      	bics	r3, r2
 8016540:	b25a      	sxtb	r2, r3
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 8016542:	4b51      	ldr	r3, [pc, #324]	; (8016688 <SX1276SetRxConfig+0x530>)
 8016544:	214c      	movs	r1, #76	; 0x4c
 8016546:	5c5b      	ldrb	r3, [r3, r1]
 8016548:	00db      	lsls	r3, r3, #3
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 801654a:	b25b      	sxtb	r3, r3
 801654c:	4313      	orrs	r3, r2
 801654e:	b25b      	sxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG3,
 8016550:	b2db      	uxtb	r3, r3
 8016552:	0019      	movs	r1, r3
 8016554:	2026      	movs	r0, #38	; 0x26
 8016556:	f001 f8c3 	bl	80176e0 <SX1276Write>
            SX1276Write( REG_LR_SYMBTIMEOUTLSB, ( uint8_t )( symbTimeout & 0xFF ) );
 801655a:	19bb      	adds	r3, r7, r6
 801655c:	195b      	adds	r3, r3, r5
 801655e:	881b      	ldrh	r3, [r3, #0]
 8016560:	b2db      	uxtb	r3, r3
 8016562:	0019      	movs	r1, r3
 8016564:	201f      	movs	r0, #31
 8016566:	f001 f8bb 	bl	80176e0 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 801656a:	2524      	movs	r5, #36	; 0x24
 801656c:	19bb      	adds	r3, r7, r6
 801656e:	195b      	adds	r3, r3, r5
 8016570:	881b      	ldrh	r3, [r3, #0]
 8016572:	0a1b      	lsrs	r3, r3, #8
 8016574:	b29b      	uxth	r3, r3
 8016576:	b2db      	uxtb	r3, r3
 8016578:	0019      	movs	r1, r3
 801657a:	2020      	movs	r0, #32
 801657c:	f001 f8b0 	bl	80176e0 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 8016580:	19bb      	adds	r3, r7, r6
 8016582:	195b      	adds	r3, r3, r5
 8016584:	881b      	ldrh	r3, [r3, #0]
 8016586:	b2db      	uxtb	r3, r3
 8016588:	0019      	movs	r1, r3
 801658a:	2021      	movs	r0, #33	; 0x21
 801658c:	f001 f8a8 	bl	80176e0 <SX1276Write>
            if( fixLen == 1 )
 8016590:	19bb      	adds	r3, r7, r6
 8016592:	191b      	adds	r3, r3, r4
 8016594:	781b      	ldrb	r3, [r3, #0]
 8016596:	2b00      	cmp	r3, #0
 8016598:	d009      	beq.n	80165ae <SX1276SetRxConfig+0x456>
                SX1276Write( REG_LR_PAYLOADLENGTH, payloadLen );
 801659a:	2330      	movs	r3, #48	; 0x30
 801659c:	2208      	movs	r2, #8
 801659e:	4694      	mov	ip, r2
 80165a0:	44bc      	add	ip, r7
 80165a2:	4463      	add	r3, ip
 80165a4:	781b      	ldrb	r3, [r3, #0]
 80165a6:	0019      	movs	r1, r3
 80165a8:	2022      	movs	r0, #34	; 0x22
 80165aa:	f001 f899 	bl	80176e0 <SX1276Write>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 80165ae:	4b36      	ldr	r3, [pc, #216]	; (8016688 <SX1276SetRxConfig+0x530>)
 80165b0:	2253      	movs	r2, #83	; 0x53
 80165b2:	5c9b      	ldrb	r3, [r3, r2]
 80165b4:	2b00      	cmp	r3, #0
 80165b6:	d013      	beq.n	80165e0 <SX1276SetRxConfig+0x488>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 80165b8:	2044      	movs	r0, #68	; 0x44
 80165ba:	f001 f8a5 	bl	8017708 <SX1276Read>
 80165be:	0003      	movs	r3, r0
 80165c0:	001a      	movs	r2, r3
 80165c2:	2380      	movs	r3, #128	; 0x80
 80165c4:	425b      	negs	r3, r3
 80165c6:	4313      	orrs	r3, r2
 80165c8:	b2db      	uxtb	r3, r3
 80165ca:	0019      	movs	r1, r3
 80165cc:	2044      	movs	r0, #68	; 0x44
 80165ce:	f001 f887 	bl	80176e0 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 80165d2:	4b2d      	ldr	r3, [pc, #180]	; (8016688 <SX1276SetRxConfig+0x530>)
 80165d4:	2254      	movs	r2, #84	; 0x54
 80165d6:	5c9b      	ldrb	r3, [r3, r2]
 80165d8:	0019      	movs	r1, r3
 80165da:	2024      	movs	r0, #36	; 0x24
 80165dc:	f001 f880 	bl	80176e0 <SX1276Write>
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 80165e0:	68bb      	ldr	r3, [r7, #8]
 80165e2:	2b09      	cmp	r3, #9
 80165e4:	d10d      	bne.n	8016602 <SX1276SetRxConfig+0x4aa>
 80165e6:	4b28      	ldr	r3, [pc, #160]	; (8016688 <SX1276SetRxConfig+0x530>)
 80165e8:	689b      	ldr	r3, [r3, #8]
 80165ea:	4a28      	ldr	r2, [pc, #160]	; (801668c <SX1276SetRxConfig+0x534>)
 80165ec:	4293      	cmp	r3, r2
 80165ee:	d908      	bls.n	8016602 <SX1276SetRxConfig+0x4aa>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 80165f0:	2102      	movs	r1, #2
 80165f2:	2036      	movs	r0, #54	; 0x36
 80165f4:	f001 f874 	bl	80176e0 <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x64 );
 80165f8:	2164      	movs	r1, #100	; 0x64
 80165fa:	203a      	movs	r0, #58	; 0x3a
 80165fc:	f001 f870 	bl	80176e0 <SX1276Write>
 8016600:	e00f      	b.n	8016622 <SX1276SetRxConfig+0x4ca>
            else if( bandwidth == 9 )
 8016602:	68bb      	ldr	r3, [r7, #8]
 8016604:	2b09      	cmp	r3, #9
 8016606:	d108      	bne.n	801661a <SX1276SetRxConfig+0x4c2>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 8016608:	2102      	movs	r1, #2
 801660a:	2036      	movs	r0, #54	; 0x36
 801660c:	f001 f868 	bl	80176e0 <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x7F );
 8016610:	217f      	movs	r1, #127	; 0x7f
 8016612:	203a      	movs	r0, #58	; 0x3a
 8016614:	f001 f864 	bl	80176e0 <SX1276Write>
 8016618:	e003      	b.n	8016622 <SX1276SetRxConfig+0x4ca>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x03 );
 801661a:	2103      	movs	r1, #3
 801661c:	2036      	movs	r0, #54	; 0x36
 801661e:	f001 f85f 	bl	80176e0 <SX1276Write>
            if( datarate == 6 )
 8016622:	687b      	ldr	r3, [r7, #4]
 8016624:	2b06      	cmp	r3, #6
 8016626:	d114      	bne.n	8016652 <SX1276SetRxConfig+0x4fa>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8016628:	2031      	movs	r0, #49	; 0x31
 801662a:	f001 f86d 	bl	8017708 <SX1276Read>
 801662e:	0003      	movs	r3, r0
 8016630:	b25b      	sxtb	r3, r3
 8016632:	2207      	movs	r2, #7
 8016634:	4393      	bics	r3, r2
 8016636:	b25b      	sxtb	r3, r3
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 8016638:	2205      	movs	r2, #5
 801663a:	4313      	orrs	r3, r2
 801663c:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 801663e:	b2db      	uxtb	r3, r3
 8016640:	0019      	movs	r1, r3
 8016642:	2031      	movs	r0, #49	; 0x31
 8016644:	f001 f84c 	bl	80176e0 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8016648:	210c      	movs	r1, #12
 801664a:	2037      	movs	r0, #55	; 0x37
 801664c:	f001 f848 	bl	80176e0 <SX1276Write>
        break;
 8016650:	e013      	b.n	801667a <SX1276SetRxConfig+0x522>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8016652:	2031      	movs	r0, #49	; 0x31
 8016654:	f001 f858 	bl	8017708 <SX1276Read>
 8016658:	0003      	movs	r3, r0
 801665a:	b25b      	sxtb	r3, r3
 801665c:	2207      	movs	r2, #7
 801665e:	4393      	bics	r3, r2
 8016660:	b25b      	sxtb	r3, r3
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 8016662:	2203      	movs	r2, #3
 8016664:	4313      	orrs	r3, r2
 8016666:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8016668:	b2db      	uxtb	r3, r3
 801666a:	0019      	movs	r1, r3
 801666c:	2031      	movs	r0, #49	; 0x31
 801666e:	f001 f837 	bl	80176e0 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8016672:	210a      	movs	r1, #10
 8016674:	2037      	movs	r0, #55	; 0x37
 8016676:	f001 f833 	bl	80176e0 <SX1276Write>
        break;
 801667a:	46c0      	nop			; (mov r8, r8)
}
 801667c:	46c0      	nop			; (mov r8, r8)
 801667e:	46bd      	mov	sp, r7
 8016680:	b004      	add	sp, #16
 8016682:	bc04      	pop	{r2}
 8016684:	4690      	mov	r8, r2
 8016686:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016688:	200015b8 	.word	0x200015b8
 801668c:	1f4add40 	.word	0x1f4add40

08016690 <SX1276SetTxConfig>:
void SX1276SetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                        uint32_t bandwidth, uint32_t datarate,
                        uint8_t coderate, uint16_t preambleLen,
                        bool fixLen, bool crcOn, bool freqHopOn,
                        uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8016690:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016692:	b085      	sub	sp, #20
 8016694:	af00      	add	r7, sp, #0
 8016696:	60ba      	str	r2, [r7, #8]
 8016698:	607b      	str	r3, [r7, #4]
 801669a:	240f      	movs	r4, #15
 801669c:	193b      	adds	r3, r7, r4
 801669e:	1c02      	adds	r2, r0, #0
 80166a0:	701a      	strb	r2, [r3, #0]
 80166a2:	250e      	movs	r5, #14
 80166a4:	197b      	adds	r3, r7, r5
 80166a6:	1c0a      	adds	r2, r1, #0
 80166a8:	701a      	strb	r2, [r3, #0]
	LOG_INFO_SX1276((">> SX1276SetTxConfig\r\n"));

    SX1276SetModem( modem );
 80166aa:	193b      	adds	r3, r7, r4
 80166ac:	781b      	ldrb	r3, [r3, #0]
 80166ae:	0018      	movs	r0, r3
 80166b0:	f000 ffbe 	bl	8017630 <SX1276SetModem>

    LoRaBoardCallbacks->SX1276BoardSetRfTxPower( power );
 80166b4:	4be5      	ldr	r3, [pc, #916]	; (8016a4c <SX1276SetTxConfig+0x3bc>)
 80166b6:	681b      	ldr	r3, [r3, #0]
 80166b8:	68db      	ldr	r3, [r3, #12]
 80166ba:	197a      	adds	r2, r7, r5
 80166bc:	7812      	ldrb	r2, [r2, #0]
 80166be:	b252      	sxtb	r2, r2
 80166c0:	0010      	movs	r0, r2
 80166c2:	4798      	blx	r3

    switch( modem )
 80166c4:	193b      	adds	r3, r7, r4
 80166c6:	781b      	ldrb	r3, [r3, #0]
 80166c8:	2b00      	cmp	r3, #0
 80166ca:	d003      	beq.n	80166d4 <SX1276SetTxConfig+0x44>
 80166cc:	2b01      	cmp	r3, #1
 80166ce:	d100      	bne.n	80166d2 <SX1276SetTxConfig+0x42>
 80166d0:	e0b1      	b.n	8016836 <SX1276SetTxConfig+0x1a6>
                             RFLR_DETECTIONTHRESH_SF7_TO_SF12 );
            }
        }
        break;
    }
}
 80166d2:	e1d8      	b.n	8016a86 <SX1276SetTxConfig+0x3f6>
            SX1276.Settings.Fsk.Power = power;
 80166d4:	4bde      	ldr	r3, [pc, #888]	; (8016a50 <SX1276SetTxConfig+0x3c0>)
 80166d6:	220e      	movs	r2, #14
 80166d8:	18ba      	adds	r2, r7, r2
 80166da:	7812      	ldrb	r2, [r2, #0]
 80166dc:	731a      	strb	r2, [r3, #12]
            SX1276.Settings.Fsk.Fdev = fdev;
 80166de:	4bdc      	ldr	r3, [pc, #880]	; (8016a50 <SX1276SetTxConfig+0x3c0>)
 80166e0:	68ba      	ldr	r2, [r7, #8]
 80166e2:	611a      	str	r2, [r3, #16]
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 80166e4:	4bda      	ldr	r3, [pc, #872]	; (8016a50 <SX1276SetTxConfig+0x3c0>)
 80166e6:	687a      	ldr	r2, [r7, #4]
 80166e8:	615a      	str	r2, [r3, #20]
            SX1276.Settings.Fsk.Datarate = datarate;
 80166ea:	4bd9      	ldr	r3, [pc, #868]	; (8016a50 <SX1276SetTxConfig+0x3c0>)
 80166ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80166ee:	61da      	str	r2, [r3, #28]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 80166f0:	4bd7      	ldr	r3, [pc, #860]	; (8016a50 <SX1276SetTxConfig+0x3c0>)
 80166f2:	2528      	movs	r5, #40	; 0x28
 80166f4:	2408      	movs	r4, #8
 80166f6:	193a      	adds	r2, r7, r4
 80166f8:	1952      	adds	r2, r2, r5
 80166fa:	8812      	ldrh	r2, [r2, #0]
 80166fc:	841a      	strh	r2, [r3, #32]
            SX1276.Settings.Fsk.FixLen = fixLen;
 80166fe:	4bd4      	ldr	r3, [pc, #848]	; (8016a50 <SX1276SetTxConfig+0x3c0>)
 8016700:	262c      	movs	r6, #44	; 0x2c
 8016702:	193a      	adds	r2, r7, r4
 8016704:	1992      	adds	r2, r2, r6
 8016706:	2122      	movs	r1, #34	; 0x22
 8016708:	7812      	ldrb	r2, [r2, #0]
 801670a:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.CrcOn = crcOn;
 801670c:	4bd0      	ldr	r3, [pc, #832]	; (8016a50 <SX1276SetTxConfig+0x3c0>)
 801670e:	2230      	movs	r2, #48	; 0x30
 8016710:	2108      	movs	r1, #8
 8016712:	468c      	mov	ip, r1
 8016714:	44bc      	add	ip, r7
 8016716:	4462      	add	r2, ip
 8016718:	2124      	movs	r1, #36	; 0x24
 801671a:	7812      	ldrb	r2, [r2, #0]
 801671c:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 801671e:	4bcc      	ldr	r3, [pc, #816]	; (8016a50 <SX1276SetTxConfig+0x3c0>)
 8016720:	223c      	movs	r2, #60	; 0x3c
 8016722:	2108      	movs	r1, #8
 8016724:	468c      	mov	ip, r1
 8016726:	44bc      	add	ip, r7
 8016728:	4462      	add	r2, ip
 801672a:	2125      	movs	r1, #37	; 0x25
 801672c:	7812      	ldrb	r2, [r2, #0]
 801672e:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.TxTimeout = timeout;
 8016730:	4bc7      	ldr	r3, [pc, #796]	; (8016a50 <SX1276SetTxConfig+0x3c0>)
 8016732:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8016734:	629a      	str	r2, [r3, #40]	; 0x28
            fdev = ( uint16_t )( ( double )fdev / ( double )FREQ_STEP );
 8016736:	68b8      	ldr	r0, [r7, #8]
 8016738:	f7eb ff60 	bl	80025fc <__aeabi_ui2d>
 801673c:	2200      	movs	r2, #0
 801673e:	4bc5      	ldr	r3, [pc, #788]	; (8016a54 <SX1276SetTxConfig+0x3c4>)
 8016740:	f7ea fd28 	bl	8001194 <__aeabi_ddiv>
 8016744:	0003      	movs	r3, r0
 8016746:	000c      	movs	r4, r1
 8016748:	0018      	movs	r0, r3
 801674a:	0021      	movs	r1, r4
 801674c:	f7e9 ff06 	bl	800055c <__aeabi_d2uiz>
 8016750:	0003      	movs	r3, r0
 8016752:	b29b      	uxth	r3, r3
 8016754:	60bb      	str	r3, [r7, #8]
            SX1276Write( REG_FDEVMSB, ( uint8_t )( fdev >> 8 ) );
 8016756:	68bb      	ldr	r3, [r7, #8]
 8016758:	0a1b      	lsrs	r3, r3, #8
 801675a:	b2db      	uxtb	r3, r3
 801675c:	0019      	movs	r1, r3
 801675e:	2004      	movs	r0, #4
 8016760:	f000 ffbe 	bl	80176e0 <SX1276Write>
            SX1276Write( REG_FDEVLSB, ( uint8_t )( fdev & 0xFF ) );
 8016764:	68bb      	ldr	r3, [r7, #8]
 8016766:	b2db      	uxtb	r3, r3
 8016768:	0019      	movs	r1, r3
 801676a:	2005      	movs	r0, #5
 801676c:	f000 ffb8 	bl	80176e0 <SX1276Write>
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 8016770:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016772:	f7eb ff43 	bl	80025fc <__aeabi_ui2d>
 8016776:	0003      	movs	r3, r0
 8016778:	000c      	movs	r4, r1
 801677a:	001a      	movs	r2, r3
 801677c:	0023      	movs	r3, r4
 801677e:	2000      	movs	r0, #0
 8016780:	49b5      	ldr	r1, [pc, #724]	; (8016a58 <SX1276SetTxConfig+0x3c8>)
 8016782:	f7ea fd07 	bl	8001194 <__aeabi_ddiv>
 8016786:	0003      	movs	r3, r0
 8016788:	000c      	movs	r4, r1
 801678a:	0018      	movs	r0, r3
 801678c:	0021      	movs	r1, r4
 801678e:	f7e9 fee5 	bl	800055c <__aeabi_d2uiz>
 8016792:	0003      	movs	r3, r0
 8016794:	b29b      	uxth	r3, r3
 8016796:	62bb      	str	r3, [r7, #40]	; 0x28
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 8016798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801679a:	0a1b      	lsrs	r3, r3, #8
 801679c:	b2db      	uxtb	r3, r3
 801679e:	0019      	movs	r1, r3
 80167a0:	2002      	movs	r0, #2
 80167a2:	f000 ff9d 	bl	80176e0 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 80167a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80167a8:	b2db      	uxtb	r3, r3
 80167aa:	0019      	movs	r1, r3
 80167ac:	2003      	movs	r0, #3
 80167ae:	f000 ff97 	bl	80176e0 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 80167b2:	2408      	movs	r4, #8
 80167b4:	193b      	adds	r3, r7, r4
 80167b6:	195b      	adds	r3, r3, r5
 80167b8:	881b      	ldrh	r3, [r3, #0]
 80167ba:	0a1b      	lsrs	r3, r3, #8
 80167bc:	b29b      	uxth	r3, r3
 80167be:	b2db      	uxtb	r3, r3
 80167c0:	0019      	movs	r1, r3
 80167c2:	2025      	movs	r0, #37	; 0x25
 80167c4:	f000 ff8c 	bl	80176e0 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, preambleLen & 0xFF );
 80167c8:	193b      	adds	r3, r7, r4
 80167ca:	195b      	adds	r3, r3, r5
 80167cc:	881b      	ldrh	r3, [r3, #0]
 80167ce:	b2db      	uxtb	r3, r3
 80167d0:	0019      	movs	r1, r3
 80167d2:	2026      	movs	r0, #38	; 0x26
 80167d4:	f000 ff84 	bl	80176e0 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 80167d8:	2030      	movs	r0, #48	; 0x30
 80167da:	f000 ff95 	bl	8017708 <SX1276Read>
 80167de:	0003      	movs	r3, r0
 80167e0:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_CRC_MASK &
 80167e2:	226f      	movs	r2, #111	; 0x6f
 80167e4:	4013      	ands	r3, r2
 80167e6:	b25a      	sxtb	r2, r3
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 80167e8:	193b      	adds	r3, r7, r4
 80167ea:	199b      	adds	r3, r3, r6
 80167ec:	781b      	ldrb	r3, [r3, #0]
 80167ee:	2b00      	cmp	r3, #0
 80167f0:	d001      	beq.n	80167f6 <SX1276SetTxConfig+0x166>
 80167f2:	2300      	movs	r3, #0
 80167f4:	e001      	b.n	80167fa <SX1276SetTxConfig+0x16a>
 80167f6:	2380      	movs	r3, #128	; 0x80
 80167f8:	425b      	negs	r3, r3
 80167fa:	4313      	orrs	r3, r2
 80167fc:	b25a      	sxtb	r2, r3
                           ( crcOn << 4 ) );
 80167fe:	2330      	movs	r3, #48	; 0x30
 8016800:	2108      	movs	r1, #8
 8016802:	468c      	mov	ip, r1
 8016804:	44bc      	add	ip, r7
 8016806:	4463      	add	r3, ip
 8016808:	781b      	ldrb	r3, [r3, #0]
 801680a:	011b      	lsls	r3, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 801680c:	b25b      	sxtb	r3, r3
 801680e:	4313      	orrs	r3, r2
 8016810:	b25b      	sxtb	r3, r3
            SX1276Write( REG_PACKETCONFIG1,
 8016812:	b2db      	uxtb	r3, r3
 8016814:	0019      	movs	r1, r3
 8016816:	2030      	movs	r0, #48	; 0x30
 8016818:	f000 ff62 	bl	80176e0 <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 801681c:	2031      	movs	r0, #49	; 0x31
 801681e:	f000 ff73 	bl	8017708 <SX1276Read>
 8016822:	0003      	movs	r3, r0
 8016824:	001a      	movs	r2, r3
 8016826:	2340      	movs	r3, #64	; 0x40
 8016828:	4313      	orrs	r3, r2
 801682a:	b2db      	uxtb	r3, r3
 801682c:	0019      	movs	r1, r3
 801682e:	2031      	movs	r0, #49	; 0x31
 8016830:	f000 ff56 	bl	80176e0 <SX1276Write>
        break;
 8016834:	e127      	b.n	8016a86 <SX1276SetTxConfig+0x3f6>
            SX1276.Settings.LoRa.Power = power;
 8016836:	4b86      	ldr	r3, [pc, #536]	; (8016a50 <SX1276SetTxConfig+0x3c0>)
 8016838:	220e      	movs	r2, #14
 801683a:	18ba      	adds	r2, r7, r2
 801683c:	2140      	movs	r1, #64	; 0x40
 801683e:	7812      	ldrb	r2, [r2, #0]
 8016840:	545a      	strb	r2, [r3, r1]
            if( bandwidth > 2 )
 8016842:	687b      	ldr	r3, [r7, #4]
 8016844:	2b02      	cmp	r3, #2
 8016846:	d900      	bls.n	801684a <SX1276SetTxConfig+0x1ba>
                while( 1 );
 8016848:	e7fe      	b.n	8016848 <SX1276SetTxConfig+0x1b8>
            bandwidth += 7;
 801684a:	687b      	ldr	r3, [r7, #4]
 801684c:	3307      	adds	r3, #7
 801684e:	607b      	str	r3, [r7, #4]
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 8016850:	4b7f      	ldr	r3, [pc, #508]	; (8016a50 <SX1276SetTxConfig+0x3c0>)
 8016852:	687a      	ldr	r2, [r7, #4]
 8016854:	645a      	str	r2, [r3, #68]	; 0x44
            SX1276.Settings.LoRa.Datarate = datarate;
 8016856:	4b7e      	ldr	r3, [pc, #504]	; (8016a50 <SX1276SetTxConfig+0x3c0>)
 8016858:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801685a:	649a      	str	r2, [r3, #72]	; 0x48
            SX1276.Settings.LoRa.Coderate = coderate;
 801685c:	4b7c      	ldr	r3, [pc, #496]	; (8016a50 <SX1276SetTxConfig+0x3c0>)
 801685e:	2224      	movs	r2, #36	; 0x24
 8016860:	2108      	movs	r1, #8
 8016862:	468c      	mov	ip, r1
 8016864:	44bc      	add	ip, r7
 8016866:	4462      	add	r2, ip
 8016868:	214d      	movs	r1, #77	; 0x4d
 801686a:	7812      	ldrb	r2, [r2, #0]
 801686c:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 801686e:	4b78      	ldr	r3, [pc, #480]	; (8016a50 <SX1276SetTxConfig+0x3c0>)
 8016870:	2228      	movs	r2, #40	; 0x28
 8016872:	2108      	movs	r1, #8
 8016874:	468c      	mov	ip, r1
 8016876:	44bc      	add	ip, r7
 8016878:	4462      	add	r2, ip
 801687a:	214e      	movs	r1, #78	; 0x4e
 801687c:	8812      	ldrh	r2, [r2, #0]
 801687e:	525a      	strh	r2, [r3, r1]
            SX1276.Settings.LoRa.FixLen = fixLen;
 8016880:	4b73      	ldr	r3, [pc, #460]	; (8016a50 <SX1276SetTxConfig+0x3c0>)
 8016882:	222c      	movs	r2, #44	; 0x2c
 8016884:	2108      	movs	r1, #8
 8016886:	468c      	mov	ip, r1
 8016888:	44bc      	add	ip, r7
 801688a:	4462      	add	r2, ip
 801688c:	2150      	movs	r1, #80	; 0x50
 801688e:	7812      	ldrb	r2, [r2, #0]
 8016890:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 8016892:	4b6f      	ldr	r3, [pc, #444]	; (8016a50 <SX1276SetTxConfig+0x3c0>)
 8016894:	2234      	movs	r2, #52	; 0x34
 8016896:	2108      	movs	r1, #8
 8016898:	468c      	mov	ip, r1
 801689a:	44bc      	add	ip, r7
 801689c:	4462      	add	r2, ip
 801689e:	2153      	movs	r1, #83	; 0x53
 80168a0:	7812      	ldrb	r2, [r2, #0]
 80168a2:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 80168a4:	4b6a      	ldr	r3, [pc, #424]	; (8016a50 <SX1276SetTxConfig+0x3c0>)
 80168a6:	2238      	movs	r2, #56	; 0x38
 80168a8:	2108      	movs	r1, #8
 80168aa:	468c      	mov	ip, r1
 80168ac:	44bc      	add	ip, r7
 80168ae:	4462      	add	r2, ip
 80168b0:	2154      	movs	r1, #84	; 0x54
 80168b2:	7812      	ldrb	r2, [r2, #0]
 80168b4:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.CrcOn = crcOn;
 80168b6:	4b66      	ldr	r3, [pc, #408]	; (8016a50 <SX1276SetTxConfig+0x3c0>)
 80168b8:	2230      	movs	r2, #48	; 0x30
 80168ba:	2108      	movs	r1, #8
 80168bc:	468c      	mov	ip, r1
 80168be:	44bc      	add	ip, r7
 80168c0:	4462      	add	r2, ip
 80168c2:	2152      	movs	r1, #82	; 0x52
 80168c4:	7812      	ldrb	r2, [r2, #0]
 80168c6:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 80168c8:	4b61      	ldr	r3, [pc, #388]	; (8016a50 <SX1276SetTxConfig+0x3c0>)
 80168ca:	223c      	movs	r2, #60	; 0x3c
 80168cc:	2108      	movs	r1, #8
 80168ce:	468c      	mov	ip, r1
 80168d0:	44bc      	add	ip, r7
 80168d2:	4462      	add	r2, ip
 80168d4:	2155      	movs	r1, #85	; 0x55
 80168d6:	7812      	ldrb	r2, [r2, #0]
 80168d8:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.TxTimeout = timeout;
 80168da:	4b5d      	ldr	r3, [pc, #372]	; (8016a50 <SX1276SetTxConfig+0x3c0>)
 80168dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80168de:	659a      	str	r2, [r3, #88]	; 0x58
            if( datarate > 12 )
 80168e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80168e2:	2b0c      	cmp	r3, #12
 80168e4:	d902      	bls.n	80168ec <SX1276SetTxConfig+0x25c>
                datarate = 12;
 80168e6:	230c      	movs	r3, #12
 80168e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80168ea:	e004      	b.n	80168f6 <SX1276SetTxConfig+0x266>
            else if( datarate < 6 )
 80168ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80168ee:	2b05      	cmp	r3, #5
 80168f0:	d801      	bhi.n	80168f6 <SX1276SetTxConfig+0x266>
                datarate = 6;
 80168f2:	2306      	movs	r3, #6
 80168f4:	62bb      	str	r3, [r7, #40]	; 0x28
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80168f6:	687b      	ldr	r3, [r7, #4]
 80168f8:	2b07      	cmp	r3, #7
 80168fa:	d105      	bne.n	8016908 <SX1276SetTxConfig+0x278>
 80168fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80168fe:	2b0b      	cmp	r3, #11
 8016900:	d008      	beq.n	8016914 <SX1276SetTxConfig+0x284>
 8016902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016904:	2b0c      	cmp	r3, #12
 8016906:	d005      	beq.n	8016914 <SX1276SetTxConfig+0x284>
 8016908:	687b      	ldr	r3, [r7, #4]
 801690a:	2b08      	cmp	r3, #8
 801690c:	d107      	bne.n	801691e <SX1276SetTxConfig+0x28e>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 801690e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016910:	2b0c      	cmp	r3, #12
 8016912:	d104      	bne.n	801691e <SX1276SetTxConfig+0x28e>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 8016914:	4b4e      	ldr	r3, [pc, #312]	; (8016a50 <SX1276SetTxConfig+0x3c0>)
 8016916:	224c      	movs	r2, #76	; 0x4c
 8016918:	2101      	movs	r1, #1
 801691a:	5499      	strb	r1, [r3, r2]
 801691c:	e003      	b.n	8016926 <SX1276SetTxConfig+0x296>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 801691e:	4b4c      	ldr	r3, [pc, #304]	; (8016a50 <SX1276SetTxConfig+0x3c0>)
 8016920:	224c      	movs	r2, #76	; 0x4c
 8016922:	2100      	movs	r1, #0
 8016924:	5499      	strb	r1, [r3, r2]
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8016926:	4b4a      	ldr	r3, [pc, #296]	; (8016a50 <SX1276SetTxConfig+0x3c0>)
 8016928:	2253      	movs	r2, #83	; 0x53
 801692a:	5c9b      	ldrb	r3, [r3, r2]
 801692c:	2b00      	cmp	r3, #0
 801692e:	d013      	beq.n	8016958 <SX1276SetTxConfig+0x2c8>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 8016930:	2044      	movs	r0, #68	; 0x44
 8016932:	f000 fee9 	bl	8017708 <SX1276Read>
 8016936:	0003      	movs	r3, r0
 8016938:	001a      	movs	r2, r3
 801693a:	2380      	movs	r3, #128	; 0x80
 801693c:	425b      	negs	r3, r3
 801693e:	4313      	orrs	r3, r2
 8016940:	b2db      	uxtb	r3, r3
 8016942:	0019      	movs	r1, r3
 8016944:	2044      	movs	r0, #68	; 0x44
 8016946:	f000 fecb 	bl	80176e0 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 801694a:	4b41      	ldr	r3, [pc, #260]	; (8016a50 <SX1276SetTxConfig+0x3c0>)
 801694c:	2254      	movs	r2, #84	; 0x54
 801694e:	5c9b      	ldrb	r3, [r3, r2]
 8016950:	0019      	movs	r1, r3
 8016952:	2024      	movs	r0, #36	; 0x24
 8016954:	f000 fec4 	bl	80176e0 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 8016958:	201d      	movs	r0, #29
 801695a:	f000 fed5 	bl	8017708 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 801695e:	687b      	ldr	r3, [r7, #4]
 8016960:	b2db      	uxtb	r3, r3
 8016962:	011b      	lsls	r3, r3, #4
 8016964:	b2da      	uxtb	r2, r3
 8016966:	2324      	movs	r3, #36	; 0x24
 8016968:	2108      	movs	r1, #8
 801696a:	468c      	mov	ip, r1
 801696c:	44bc      	add	ip, r7
 801696e:	4463      	add	r3, ip
 8016970:	781b      	ldrb	r3, [r3, #0]
 8016972:	18db      	adds	r3, r3, r3
 8016974:	b2db      	uxtb	r3, r3
 8016976:	4313      	orrs	r3, r2
 8016978:	b2da      	uxtb	r2, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 801697a:	232c      	movs	r3, #44	; 0x2c
 801697c:	2108      	movs	r1, #8
 801697e:	468c      	mov	ip, r1
 8016980:	44bc      	add	ip, r7
 8016982:	4463      	add	r3, ip
 8016984:	781b      	ldrb	r3, [r3, #0]
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8016986:	4313      	orrs	r3, r2
 8016988:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 801698a:	0019      	movs	r1, r3
 801698c:	201d      	movs	r0, #29
 801698e:	f000 fea7 	bl	80176e0 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 8016992:	201e      	movs	r0, #30
 8016994:	f000 feb8 	bl	8017708 <SX1276Read>
 8016998:	0003      	movs	r3, r0
 801699a:	001a      	movs	r2, r3
                           RFLR_MODEMCONFIG2_SF_MASK &
 801699c:	230b      	movs	r3, #11
 801699e:	4013      	ands	r3, r2
 80169a0:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 80169a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80169a4:	b2db      	uxtb	r3, r3
 80169a6:	011b      	lsls	r3, r3, #4
 80169a8:	b2db      	uxtb	r3, r3
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK ) |
 80169aa:	4313      	orrs	r3, r2
 80169ac:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 80169ae:	2330      	movs	r3, #48	; 0x30
 80169b0:	2108      	movs	r1, #8
 80169b2:	468c      	mov	ip, r1
 80169b4:	44bc      	add	ip, r7
 80169b6:	4463      	add	r3, ip
 80169b8:	781b      	ldrb	r3, [r3, #0]
 80169ba:	009b      	lsls	r3, r3, #2
 80169bc:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG2,
 80169be:	4313      	orrs	r3, r2
 80169c0:	b2db      	uxtb	r3, r3
 80169c2:	0019      	movs	r1, r3
 80169c4:	201e      	movs	r0, #30
 80169c6:	f000 fe8b 	bl	80176e0 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 80169ca:	2026      	movs	r0, #38	; 0x26
 80169cc:	f000 fe9c 	bl	8017708 <SX1276Read>
 80169d0:	0003      	movs	r3, r0
 80169d2:	b25b      	sxtb	r3, r3
 80169d4:	2208      	movs	r2, #8
 80169d6:	4393      	bics	r3, r2
 80169d8:	b25a      	sxtb	r2, r3
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 80169da:	4b1d      	ldr	r3, [pc, #116]	; (8016a50 <SX1276SetTxConfig+0x3c0>)
 80169dc:	214c      	movs	r1, #76	; 0x4c
 80169de:	5c5b      	ldrb	r3, [r3, r1]
 80169e0:	00db      	lsls	r3, r3, #3
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 80169e2:	b25b      	sxtb	r3, r3
 80169e4:	4313      	orrs	r3, r2
 80169e6:	b25b      	sxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG3,
 80169e8:	b2db      	uxtb	r3, r3
 80169ea:	0019      	movs	r1, r3
 80169ec:	2026      	movs	r0, #38	; 0x26
 80169ee:	f000 fe77 	bl	80176e0 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 80169f2:	2428      	movs	r4, #40	; 0x28
 80169f4:	2508      	movs	r5, #8
 80169f6:	197b      	adds	r3, r7, r5
 80169f8:	191b      	adds	r3, r3, r4
 80169fa:	881b      	ldrh	r3, [r3, #0]
 80169fc:	0a1b      	lsrs	r3, r3, #8
 80169fe:	b29b      	uxth	r3, r3
 8016a00:	b2db      	uxtb	r3, r3
 8016a02:	0019      	movs	r1, r3
 8016a04:	2020      	movs	r0, #32
 8016a06:	f000 fe6b 	bl	80176e0 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, preambleLen & 0xFF );
 8016a0a:	197b      	adds	r3, r7, r5
 8016a0c:	191b      	adds	r3, r3, r4
 8016a0e:	881b      	ldrh	r3, [r3, #0]
 8016a10:	b2db      	uxtb	r3, r3
 8016a12:	0019      	movs	r1, r3
 8016a14:	2021      	movs	r0, #33	; 0x21
 8016a16:	f000 fe63 	bl	80176e0 <SX1276Write>
            if( datarate == 6 )
 8016a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016a1c:	2b06      	cmp	r3, #6
 8016a1e:	d11d      	bne.n	8016a5c <SX1276SetTxConfig+0x3cc>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8016a20:	2031      	movs	r0, #49	; 0x31
 8016a22:	f000 fe71 	bl	8017708 <SX1276Read>
 8016a26:	0003      	movs	r3, r0
 8016a28:	b25b      	sxtb	r3, r3
 8016a2a:	2207      	movs	r2, #7
 8016a2c:	4393      	bics	r3, r2
 8016a2e:	b25b      	sxtb	r3, r3
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 8016a30:	2205      	movs	r2, #5
 8016a32:	4313      	orrs	r3, r2
 8016a34:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8016a36:	b2db      	uxtb	r3, r3
 8016a38:	0019      	movs	r1, r3
 8016a3a:	2031      	movs	r0, #49	; 0x31
 8016a3c:	f000 fe50 	bl	80176e0 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8016a40:	210c      	movs	r1, #12
 8016a42:	2037      	movs	r0, #55	; 0x37
 8016a44:	f000 fe4c 	bl	80176e0 <SX1276Write>
        break;
 8016a48:	e01c      	b.n	8016a84 <SX1276SetTxConfig+0x3f4>
 8016a4a:	46c0      	nop			; (mov r8, r8)
 8016a4c:	200011a4 	.word	0x200011a4
 8016a50:	200015b8 	.word	0x200015b8
 8016a54:	404e8480 	.word	0x404e8480
 8016a58:	417e8480 	.word	0x417e8480
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8016a5c:	2031      	movs	r0, #49	; 0x31
 8016a5e:	f000 fe53 	bl	8017708 <SX1276Read>
 8016a62:	0003      	movs	r3, r0
 8016a64:	b25b      	sxtb	r3, r3
 8016a66:	2207      	movs	r2, #7
 8016a68:	4393      	bics	r3, r2
 8016a6a:	b25b      	sxtb	r3, r3
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 8016a6c:	2203      	movs	r2, #3
 8016a6e:	4313      	orrs	r3, r2
 8016a70:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8016a72:	b2db      	uxtb	r3, r3
 8016a74:	0019      	movs	r1, r3
 8016a76:	2031      	movs	r0, #49	; 0x31
 8016a78:	f000 fe32 	bl	80176e0 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8016a7c:	210a      	movs	r1, #10
 8016a7e:	2037      	movs	r0, #55	; 0x37
 8016a80:	f000 fe2e 	bl	80176e0 <SX1276Write>
        break;
 8016a84:	46c0      	nop			; (mov r8, r8)
}
 8016a86:	46c0      	nop			; (mov r8, r8)
 8016a88:	46bd      	mov	sp, r7
 8016a8a:	b005      	add	sp, #20
 8016a8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016a8e:	46c0      	nop			; (mov r8, r8)

08016a90 <SX1276GetTimeOnAir>:

uint32_t SX1276GetTimeOnAir( RadioModems_t modem, uint8_t pktLen )
{
 8016a90:	b5b0      	push	{r4, r5, r7, lr}
 8016a92:	b094      	sub	sp, #80	; 0x50
 8016a94:	af00      	add	r7, sp, #0
 8016a96:	0002      	movs	r2, r0
 8016a98:	1dfb      	adds	r3, r7, #7
 8016a9a:	701a      	strb	r2, [r3, #0]
 8016a9c:	1dbb      	adds	r3, r7, #6
 8016a9e:	1c0a      	adds	r2, r1, #0
 8016aa0:	701a      	strb	r2, [r3, #0]
	LOG_INFO_SX1276((">> SX1276GetTimeOnAir\r\n"));

    uint32_t airTime = 0;
 8016aa2:	2300      	movs	r3, #0
 8016aa4:	64fb      	str	r3, [r7, #76]	; 0x4c

    switch( modem )
 8016aa6:	1dfb      	adds	r3, r7, #7
 8016aa8:	781b      	ldrb	r3, [r3, #0]
 8016aaa:	2b00      	cmp	r3, #0
 8016aac:	d003      	beq.n	8016ab6 <SX1276GetTimeOnAir+0x26>
 8016aae:	2b01      	cmp	r3, #1
 8016ab0:	d100      	bne.n	8016ab4 <SX1276GetTimeOnAir+0x24>
 8016ab2:	e086      	b.n	8016bc2 <SX1276GetTimeOnAir+0x132>
 8016ab4:	e164      	b.n	8016d80 <SX1276GetTimeOnAir+0x2f0>
    {
    case MODEM_FSK:
        {
            airTime = (uint32_t) round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 8016ab6:	4bb5      	ldr	r3, [pc, #724]	; (8016d8c <SX1276GetTimeOnAir+0x2fc>)
 8016ab8:	8c1b      	ldrh	r3, [r3, #32]
 8016aba:	001c      	movs	r4, r3
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 8016abc:	2027      	movs	r0, #39	; 0x27
 8016abe:	f000 fe23 	bl	8017708 <SX1276Read>
 8016ac2:	0003      	movs	r3, r0
 8016ac4:	001a      	movs	r2, r3
 8016ac6:	23f8      	movs	r3, #248	; 0xf8
 8016ac8:	439a      	bics	r2, r3
 8016aca:	0013      	movs	r3, r2
 8016acc:	3301      	adds	r3, #1
            airTime = (uint32_t) round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 8016ace:	18e3      	adds	r3, r4, r3
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 8016ad0:	0018      	movs	r0, r3
 8016ad2:	f7eb fd59 	bl	8002588 <__aeabi_i2d>
 8016ad6:	0004      	movs	r4, r0
 8016ad8:	000d      	movs	r5, r1
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
 8016ada:	4bac      	ldr	r3, [pc, #688]	; (8016d8c <SX1276GetTimeOnAir+0x2fc>)
 8016adc:	2222      	movs	r2, #34	; 0x22
 8016ade:	5c9b      	ldrb	r3, [r3, r2]
 8016ae0:	2b00      	cmp	r3, #0
 8016ae2:	d002      	beq.n	8016aea <SX1276GetTimeOnAir+0x5a>
 8016ae4:	2000      	movs	r0, #0
 8016ae6:	2100      	movs	r1, #0
 8016ae8:	e001      	b.n	8016aee <SX1276GetTimeOnAir+0x5e>
 8016aea:	2000      	movs	r0, #0
 8016aec:	49a8      	ldr	r1, [pc, #672]	; (8016d90 <SX1276GetTimeOnAir+0x300>)
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 8016aee:	0022      	movs	r2, r4
 8016af0:	002b      	movs	r3, r5
 8016af2:	f7ea f833 	bl	8000b5c <__aeabi_dadd>
 8016af6:	0003      	movs	r3, r0
 8016af8:	000c      	movs	r4, r1
 8016afa:	0025      	movs	r5, r4
 8016afc:	001c      	movs	r4, r3
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 8016afe:	2030      	movs	r0, #48	; 0x30
 8016b00:	f000 fe02 	bl	8017708 <SX1276Read>
 8016b04:	0003      	movs	r3, r0
 8016b06:	001a      	movs	r2, r3
 8016b08:	23f9      	movs	r3, #249	; 0xf9
 8016b0a:	439a      	bics	r2, r3
 8016b0c:	1e13      	subs	r3, r2, #0
 8016b0e:	d002      	beq.n	8016b16 <SX1276GetTimeOnAir+0x86>
 8016b10:	2000      	movs	r0, #0
 8016b12:	499f      	ldr	r1, [pc, #636]	; (8016d90 <SX1276GetTimeOnAir+0x300>)
 8016b14:	e001      	b.n	8016b1a <SX1276GetTimeOnAir+0x8a>
 8016b16:	2000      	movs	r0, #0
 8016b18:	2100      	movs	r1, #0
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
 8016b1a:	0022      	movs	r2, r4
 8016b1c:	002b      	movs	r3, r5
 8016b1e:	f7ea f81d 	bl	8000b5c <__aeabi_dadd>
 8016b22:	0003      	movs	r3, r0
 8016b24:	000c      	movs	r4, r1
 8016b26:	0025      	movs	r5, r4
 8016b28:	001c      	movs	r4, r3
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 8016b2a:	1dbb      	adds	r3, r7, #6
 8016b2c:	781b      	ldrb	r3, [r3, #0]
 8016b2e:	0018      	movs	r0, r3
 8016b30:	f7eb fd2a 	bl	8002588 <__aeabi_i2d>
 8016b34:	0002      	movs	r2, r0
 8016b36:	000b      	movs	r3, r1
 8016b38:	0020      	movs	r0, r4
 8016b3a:	0029      	movs	r1, r5
 8016b3c:	f7ea f80e 	bl	8000b5c <__aeabi_dadd>
 8016b40:	0003      	movs	r3, r0
 8016b42:	000c      	movs	r4, r1
 8016b44:	0025      	movs	r5, r4
 8016b46:	001c      	movs	r4, r3
                                     pktLen +
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
 8016b48:	4b90      	ldr	r3, [pc, #576]	; (8016d8c <SX1276GetTimeOnAir+0x2fc>)
 8016b4a:	2224      	movs	r2, #36	; 0x24
 8016b4c:	5c9b      	ldrb	r3, [r3, r2]
 8016b4e:	2b00      	cmp	r3, #0
 8016b50:	d003      	beq.n	8016b5a <SX1276GetTimeOnAir+0xca>
 8016b52:	2000      	movs	r0, #0
 8016b54:	2180      	movs	r1, #128	; 0x80
 8016b56:	05c9      	lsls	r1, r1, #23
 8016b58:	e001      	b.n	8016b5e <SX1276GetTimeOnAir+0xce>
 8016b5a:	2000      	movs	r0, #0
 8016b5c:	2100      	movs	r1, #0
                                     pktLen +
 8016b5e:	0022      	movs	r2, r4
 8016b60:	002b      	movs	r3, r5
 8016b62:	f7e9 fffb 	bl	8000b5c <__aeabi_dadd>
 8016b66:	0003      	movs	r3, r0
 8016b68:	000c      	movs	r4, r1
 8016b6a:	0018      	movs	r0, r3
 8016b6c:	0021      	movs	r1, r4
            airTime = (uint32_t) round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 8016b6e:	2200      	movs	r2, #0
 8016b70:	4b88      	ldr	r3, [pc, #544]	; (8016d94 <SX1276GetTimeOnAir+0x304>)
 8016b72:	f7ea ff19 	bl	80019a8 <__aeabi_dmul>
 8016b76:	0003      	movs	r3, r0
 8016b78:	000c      	movs	r4, r1
 8016b7a:	0025      	movs	r5, r4
 8016b7c:	001c      	movs	r4, r3
                                     SX1276.Settings.Fsk.Datarate ) * 1000 );
 8016b7e:	4b83      	ldr	r3, [pc, #524]	; (8016d8c <SX1276GetTimeOnAir+0x2fc>)
 8016b80:	69db      	ldr	r3, [r3, #28]
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
 8016b82:	0018      	movs	r0, r3
 8016b84:	f7eb fd3a 	bl	80025fc <__aeabi_ui2d>
 8016b88:	0002      	movs	r2, r0
 8016b8a:	000b      	movs	r3, r1
 8016b8c:	0020      	movs	r0, r4
 8016b8e:	0029      	movs	r1, r5
 8016b90:	f7ea fb00 	bl	8001194 <__aeabi_ddiv>
 8016b94:	0003      	movs	r3, r0
 8016b96:	000c      	movs	r4, r1
 8016b98:	0018      	movs	r0, r3
 8016b9a:	0021      	movs	r1, r4
            airTime = (uint32_t) round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 8016b9c:	2200      	movs	r2, #0
 8016b9e:	4b7e      	ldr	r3, [pc, #504]	; (8016d98 <SX1276GetTimeOnAir+0x308>)
 8016ba0:	f7ea ff02 	bl	80019a8 <__aeabi_dmul>
 8016ba4:	0003      	movs	r3, r0
 8016ba6:	000c      	movs	r4, r1
 8016ba8:	0018      	movs	r0, r3
 8016baa:	0021      	movs	r1, r4
 8016bac:	f008 fd66 	bl	801f67c <round>
 8016bb0:	0003      	movs	r3, r0
 8016bb2:	000c      	movs	r4, r1
 8016bb4:	0018      	movs	r0, r3
 8016bb6:	0021      	movs	r1, r4
 8016bb8:	f7e9 fcd0 	bl	800055c <__aeabi_d2uiz>
 8016bbc:	0003      	movs	r3, r0
 8016bbe:	64fb      	str	r3, [r7, #76]	; 0x4c
        }
        break;
 8016bc0:	e0de      	b.n	8016d80 <SX1276GetTimeOnAir+0x2f0>
    case MODEM_LORA:
        {
            double bw = 0.0;
 8016bc2:	2300      	movs	r3, #0
 8016bc4:	2400      	movs	r4, #0
 8016bc6:	643b      	str	r3, [r7, #64]	; 0x40
 8016bc8:	647c      	str	r4, [r7, #68]	; 0x44
            // REMARK: When using LoRa modem only bandwidths 125, 250 and 500 kHz are supported
            switch( SX1276.Settings.LoRa.Bandwidth )
 8016bca:	4b70      	ldr	r3, [pc, #448]	; (8016d8c <SX1276GetTimeOnAir+0x2fc>)
 8016bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016bce:	2b08      	cmp	r3, #8
 8016bd0:	d008      	beq.n	8016be4 <SX1276GetTimeOnAir+0x154>
 8016bd2:	2b09      	cmp	r3, #9
 8016bd4:	d00b      	beq.n	8016bee <SX1276GetTimeOnAir+0x15e>
 8016bd6:	2b07      	cmp	r3, #7
 8016bd8:	d10e      	bne.n	8016bf8 <SX1276GetTimeOnAir+0x168>
            //    break;
            //case 6: // 62.5 kHz
            //    bw = 62500;
            //    break;
            case 7: // 125 kHz
                bw = 125000;
 8016bda:	2300      	movs	r3, #0
 8016bdc:	4c6f      	ldr	r4, [pc, #444]	; (8016d9c <SX1276GetTimeOnAir+0x30c>)
 8016bde:	643b      	str	r3, [r7, #64]	; 0x40
 8016be0:	647c      	str	r4, [r7, #68]	; 0x44
                break;
 8016be2:	e009      	b.n	8016bf8 <SX1276GetTimeOnAir+0x168>
            case 8: // 250 kHz
                bw = 250000;
 8016be4:	2300      	movs	r3, #0
 8016be6:	4c6e      	ldr	r4, [pc, #440]	; (8016da0 <SX1276GetTimeOnAir+0x310>)
 8016be8:	643b      	str	r3, [r7, #64]	; 0x40
 8016bea:	647c      	str	r4, [r7, #68]	; 0x44
                break;
 8016bec:	e004      	b.n	8016bf8 <SX1276GetTimeOnAir+0x168>
            case 9: // 500 kHz
                bw = 500000;
 8016bee:	2300      	movs	r3, #0
 8016bf0:	4c6c      	ldr	r4, [pc, #432]	; (8016da4 <SX1276GetTimeOnAir+0x314>)
 8016bf2:	643b      	str	r3, [r7, #64]	; 0x40
 8016bf4:	647c      	str	r4, [r7, #68]	; 0x44
                break;
 8016bf6:	46c0      	nop			; (mov r8, r8)
            }

            // Symbol rate : time for one symbol (secs)
            double rs = bw / ( 1 << SX1276.Settings.LoRa.Datarate );
 8016bf8:	4b64      	ldr	r3, [pc, #400]	; (8016d8c <SX1276GetTimeOnAir+0x2fc>)
 8016bfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016bfc:	2201      	movs	r2, #1
 8016bfe:	409a      	lsls	r2, r3
 8016c00:	0013      	movs	r3, r2
 8016c02:	0018      	movs	r0, r3
 8016c04:	f7eb fcc0 	bl	8002588 <__aeabi_i2d>
 8016c08:	0003      	movs	r3, r0
 8016c0a:	000c      	movs	r4, r1
 8016c0c:	001a      	movs	r2, r3
 8016c0e:	0023      	movs	r3, r4
 8016c10:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8016c12:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8016c14:	f7ea fabe 	bl	8001194 <__aeabi_ddiv>
 8016c18:	0003      	movs	r3, r0
 8016c1a:	000c      	movs	r4, r1
 8016c1c:	63bb      	str	r3, [r7, #56]	; 0x38
 8016c1e:	63fc      	str	r4, [r7, #60]	; 0x3c
            double ts = 1 / rs;
 8016c20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016c22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016c24:	2000      	movs	r0, #0
 8016c26:	495a      	ldr	r1, [pc, #360]	; (8016d90 <SX1276GetTimeOnAir+0x300>)
 8016c28:	f7ea fab4 	bl	8001194 <__aeabi_ddiv>
 8016c2c:	0003      	movs	r3, r0
 8016c2e:	000c      	movs	r4, r1
 8016c30:	633b      	str	r3, [r7, #48]	; 0x30
 8016c32:	637c      	str	r4, [r7, #52]	; 0x34
            // time of preamble
            double tPreamble = ( SX1276.Settings.LoRa.PreambleLen + 4.25 ) * ts;
 8016c34:	4b55      	ldr	r3, [pc, #340]	; (8016d8c <SX1276GetTimeOnAir+0x2fc>)
 8016c36:	224e      	movs	r2, #78	; 0x4e
 8016c38:	5a9b      	ldrh	r3, [r3, r2]
 8016c3a:	0018      	movs	r0, r3
 8016c3c:	f7eb fca4 	bl	8002588 <__aeabi_i2d>
 8016c40:	2200      	movs	r2, #0
 8016c42:	4b59      	ldr	r3, [pc, #356]	; (8016da8 <SX1276GetTimeOnAir+0x318>)
 8016c44:	f7e9 ff8a 	bl	8000b5c <__aeabi_dadd>
 8016c48:	0003      	movs	r3, r0
 8016c4a:	000c      	movs	r4, r1
 8016c4c:	001a      	movs	r2, r3
 8016c4e:	0023      	movs	r3, r4
 8016c50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016c52:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8016c54:	f7ea fea8 	bl	80019a8 <__aeabi_dmul>
 8016c58:	0003      	movs	r3, r0
 8016c5a:	000c      	movs	r4, r1
 8016c5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8016c5e:	62fc      	str	r4, [r7, #44]	; 0x2c
            // Symbol length of payload and time
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 8016c60:	1dbb      	adds	r3, r7, #6
 8016c62:	781b      	ldrb	r3, [r3, #0]
 8016c64:	00db      	lsls	r3, r3, #3
 8016c66:	001a      	movs	r2, r3
 8016c68:	4b48      	ldr	r3, [pc, #288]	; (8016d8c <SX1276GetTimeOnAir+0x2fc>)
 8016c6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016c6c:	009b      	lsls	r3, r3, #2
 8016c6e:	1ad3      	subs	r3, r2, r3
                                 28 + 16 * SX1276.Settings.LoRa.CrcOn -
 8016c70:	4a46      	ldr	r2, [pc, #280]	; (8016d8c <SX1276GetTimeOnAir+0x2fc>)
 8016c72:	2152      	movs	r1, #82	; 0x52
 8016c74:	5c52      	ldrb	r2, [r2, r1]
 8016c76:	0112      	lsls	r2, r2, #4
 8016c78:	189a      	adds	r2, r3, r2
                                 ( SX1276.Settings.LoRa.FixLen ? 20 : 0 ) ) /
 8016c7a:	4b44      	ldr	r3, [pc, #272]	; (8016d8c <SX1276GetTimeOnAir+0x2fc>)
 8016c7c:	2150      	movs	r1, #80	; 0x50
 8016c7e:	5c5b      	ldrb	r3, [r3, r1]
 8016c80:	2b00      	cmp	r3, #0
 8016c82:	d001      	beq.n	8016c88 <SX1276GetTimeOnAir+0x1f8>
 8016c84:	2314      	movs	r3, #20
 8016c86:	e000      	b.n	8016c8a <SX1276GetTimeOnAir+0x1fa>
 8016c88:	2300      	movs	r3, #0
                                 28 + 16 * SX1276.Settings.LoRa.CrcOn -
 8016c8a:	1ad3      	subs	r3, r2, r3
 8016c8c:	331c      	adds	r3, #28
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 8016c8e:	0018      	movs	r0, r3
 8016c90:	f7eb fcb4 	bl	80025fc <__aeabi_ui2d>
 8016c94:	0004      	movs	r4, r0
 8016c96:	000d      	movs	r5, r1
                                 ( double )( 4 * ( SX1276.Settings.LoRa.Datarate -
 8016c98:	4b3c      	ldr	r3, [pc, #240]	; (8016d8c <SX1276GetTimeOnAir+0x2fc>)
 8016c9a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
 8016c9c:	4b3b      	ldr	r3, [pc, #236]	; (8016d8c <SX1276GetTimeOnAir+0x2fc>)
 8016c9e:	214c      	movs	r1, #76	; 0x4c
 8016ca0:	5c5b      	ldrb	r3, [r3, r1]
 8016ca2:	2b00      	cmp	r3, #0
 8016ca4:	d001      	beq.n	8016caa <SX1276GetTimeOnAir+0x21a>
 8016ca6:	2302      	movs	r3, #2
 8016ca8:	e000      	b.n	8016cac <SX1276GetTimeOnAir+0x21c>
 8016caa:	2300      	movs	r3, #0
                                 ( double )( 4 * ( SX1276.Settings.LoRa.Datarate -
 8016cac:	1ad3      	subs	r3, r2, r3
 8016cae:	009b      	lsls	r3, r3, #2
 8016cb0:	0018      	movs	r0, r3
 8016cb2:	f7eb fca3 	bl	80025fc <__aeabi_ui2d>
 8016cb6:	0002      	movs	r2, r0
 8016cb8:	000b      	movs	r3, r1
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 8016cba:	0020      	movs	r0, r4
 8016cbc:	0029      	movs	r1, r5
 8016cbe:	f7ea fa69 	bl	8001194 <__aeabi_ddiv>
 8016cc2:	0003      	movs	r3, r0
 8016cc4:	000c      	movs	r4, r1
 8016cc6:	0018      	movs	r0, r3
 8016cc8:	0021      	movs	r1, r4
 8016cca:	f008 fbd3 	bl	801f474 <ceil>
 8016cce:	0004      	movs	r4, r0
 8016cd0:	000d      	movs	r5, r1
                                 ( SX1276.Settings.LoRa.Coderate + 4 );
 8016cd2:	4b2e      	ldr	r3, [pc, #184]	; (8016d8c <SX1276GetTimeOnAir+0x2fc>)
 8016cd4:	224d      	movs	r2, #77	; 0x4d
 8016cd6:	5c9b      	ldrb	r3, [r3, r2]
 8016cd8:	3304      	adds	r3, #4
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
 8016cda:	0018      	movs	r0, r3
 8016cdc:	f7eb fc54 	bl	8002588 <__aeabi_i2d>
 8016ce0:	0002      	movs	r2, r0
 8016ce2:	000b      	movs	r3, r1
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 8016ce4:	0020      	movs	r0, r4
 8016ce6:	0029      	movs	r1, r5
 8016ce8:	f7ea fe5e 	bl	80019a8 <__aeabi_dmul>
 8016cec:	0003      	movs	r3, r0
 8016cee:	000c      	movs	r4, r1
 8016cf0:	623b      	str	r3, [r7, #32]
 8016cf2:	627c      	str	r4, [r7, #36]	; 0x24
            double nPayload = 8 + ( ( tmp > 0 ) ? tmp : 0 );
 8016cf4:	2200      	movs	r2, #0
 8016cf6:	2300      	movs	r3, #0
 8016cf8:	6a38      	ldr	r0, [r7, #32]
 8016cfa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016cfc:	f7e9 fbac 	bl	8000458 <__aeabi_dcmpgt>
 8016d00:	1e03      	subs	r3, r0, #0
 8016d02:	d008      	beq.n	8016d16 <SX1276GetTimeOnAir+0x286>
 8016d04:	2200      	movs	r2, #0
 8016d06:	4b23      	ldr	r3, [pc, #140]	; (8016d94 <SX1276GetTimeOnAir+0x304>)
 8016d08:	6a38      	ldr	r0, [r7, #32]
 8016d0a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016d0c:	f7e9 ff26 	bl	8000b5c <__aeabi_dadd>
 8016d10:	0003      	movs	r3, r0
 8016d12:	000c      	movs	r4, r1
 8016d14:	e001      	b.n	8016d1a <SX1276GetTimeOnAir+0x28a>
 8016d16:	2300      	movs	r3, #0
 8016d18:	4c1e      	ldr	r4, [pc, #120]	; (8016d94 <SX1276GetTimeOnAir+0x304>)
 8016d1a:	61bb      	str	r3, [r7, #24]
 8016d1c:	61fc      	str	r4, [r7, #28]
            double tPayload = nPayload * ts;
 8016d1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016d20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016d22:	69b8      	ldr	r0, [r7, #24]
 8016d24:	69f9      	ldr	r1, [r7, #28]
 8016d26:	f7ea fe3f 	bl	80019a8 <__aeabi_dmul>
 8016d2a:	0003      	movs	r3, r0
 8016d2c:	000c      	movs	r4, r1
 8016d2e:	613b      	str	r3, [r7, #16]
 8016d30:	617c      	str	r4, [r7, #20]
            // Time on air
            double tOnAir = tPreamble + tPayload;
 8016d32:	693a      	ldr	r2, [r7, #16]
 8016d34:	697b      	ldr	r3, [r7, #20]
 8016d36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016d38:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016d3a:	f7e9 ff0f 	bl	8000b5c <__aeabi_dadd>
 8016d3e:	0003      	movs	r3, r0
 8016d40:	000c      	movs	r4, r1
 8016d42:	60bb      	str	r3, [r7, #8]
 8016d44:	60fc      	str	r4, [r7, #12]
            // return ms secs
            airTime = (uint32_t) floor( tOnAir * 1000 + 0.999 );
 8016d46:	2200      	movs	r2, #0
 8016d48:	4b13      	ldr	r3, [pc, #76]	; (8016d98 <SX1276GetTimeOnAir+0x308>)
 8016d4a:	68b8      	ldr	r0, [r7, #8]
 8016d4c:	68f9      	ldr	r1, [r7, #12]
 8016d4e:	f7ea fe2b 	bl	80019a8 <__aeabi_dmul>
 8016d52:	0003      	movs	r3, r0
 8016d54:	000c      	movs	r4, r1
 8016d56:	0018      	movs	r0, r3
 8016d58:	0021      	movs	r1, r4
 8016d5a:	4a14      	ldr	r2, [pc, #80]	; (8016dac <SX1276GetTimeOnAir+0x31c>)
 8016d5c:	4b14      	ldr	r3, [pc, #80]	; (8016db0 <SX1276GetTimeOnAir+0x320>)
 8016d5e:	f7e9 fefd 	bl	8000b5c <__aeabi_dadd>
 8016d62:	0003      	movs	r3, r0
 8016d64:	000c      	movs	r4, r1
 8016d66:	0018      	movs	r0, r3
 8016d68:	0021      	movs	r1, r4
 8016d6a:	f008 fc05 	bl	801f578 <floor>
 8016d6e:	0003      	movs	r3, r0
 8016d70:	000c      	movs	r4, r1
 8016d72:	0018      	movs	r0, r3
 8016d74:	0021      	movs	r1, r4
 8016d76:	f7e9 fbf1 	bl	800055c <__aeabi_d2uiz>
 8016d7a:	0003      	movs	r3, r0
 8016d7c:	64fb      	str	r3, [r7, #76]	; 0x4c
        }
        break;
 8016d7e:	46c0      	nop			; (mov r8, r8)
    }
    return airTime;
 8016d80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8016d82:	0018      	movs	r0, r3
 8016d84:	46bd      	mov	sp, r7
 8016d86:	b014      	add	sp, #80	; 0x50
 8016d88:	bdb0      	pop	{r4, r5, r7, pc}
 8016d8a:	46c0      	nop			; (mov r8, r8)
 8016d8c:	200015b8 	.word	0x200015b8
 8016d90:	3ff00000 	.word	0x3ff00000
 8016d94:	40200000 	.word	0x40200000
 8016d98:	408f4000 	.word	0x408f4000
 8016d9c:	40fe8480 	.word	0x40fe8480
 8016da0:	410e8480 	.word	0x410e8480
 8016da4:	411e8480 	.word	0x411e8480
 8016da8:	40110000 	.word	0x40110000
 8016dac:	d916872b 	.word	0xd916872b
 8016db0:	3feff7ce 	.word	0x3feff7ce

08016db4 <SX1276Send>:

void SX1276Send( uint8_t *buffer, uint8_t size )
{
 8016db4:	b580      	push	{r7, lr}
 8016db6:	b084      	sub	sp, #16
 8016db8:	af00      	add	r7, sp, #0
 8016dba:	6078      	str	r0, [r7, #4]
 8016dbc:	000a      	movs	r2, r1
 8016dbe:	1cfb      	adds	r3, r7, #3
 8016dc0:	701a      	strb	r2, [r3, #0]
	LOG_INFO_SX1276((">> SX1276Send %d bytes\r\n",size));

    uint32_t txTimeout = 0;
 8016dc2:	2300      	movs	r3, #0
 8016dc4:	60fb      	str	r3, [r7, #12]

    switch( SX1276.Settings.Modem )
 8016dc6:	4b59      	ldr	r3, [pc, #356]	; (8016f2c <SX1276Send+0x178>)
 8016dc8:	795b      	ldrb	r3, [r3, #5]
 8016dca:	2b00      	cmp	r3, #0
 8016dcc:	d002      	beq.n	8016dd4 <SX1276Send+0x20>
 8016dce:	2b01      	cmp	r3, #1
 8016dd0:	d04c      	beq.n	8016e6c <SX1276Send+0xb8>
 8016dd2:	e0a2      	b.n	8016f1a <SX1276Send+0x166>
    {
    case MODEM_FSK:
        {
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8016dd4:	4b55      	ldr	r3, [pc, #340]	; (8016f2c <SX1276Send+0x178>)
 8016dd6:	2200      	movs	r2, #0
 8016dd8:	879a      	strh	r2, [r3, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = size;
 8016dda:	1cfb      	adds	r3, r7, #3
 8016ddc:	781b      	ldrb	r3, [r3, #0]
 8016dde:	b29a      	uxth	r2, r3
 8016de0:	4b52      	ldr	r3, [pc, #328]	; (8016f2c <SX1276Send+0x178>)
 8016de2:	875a      	strh	r2, [r3, #58]	; 0x3a

            if( SX1276.Settings.Fsk.FixLen == false )
 8016de4:	4b51      	ldr	r3, [pc, #324]	; (8016f2c <SX1276Send+0x178>)
 8016de6:	2222      	movs	r2, #34	; 0x22
 8016de8:	5c9b      	ldrb	r3, [r3, r2]
 8016dea:	2201      	movs	r2, #1
 8016dec:	4053      	eors	r3, r2
 8016dee:	b2db      	uxtb	r3, r3
 8016df0:	2b00      	cmp	r3, #0
 8016df2:	d005      	beq.n	8016e00 <SX1276Send+0x4c>
            {
                SX1276WriteFifo( ( uint8_t* )&size, 1 );
 8016df4:	1cfb      	adds	r3, r7, #3
 8016df6:	2101      	movs	r1, #1
 8016df8:	0018      	movs	r0, r3
 8016dfa:	f000 fd3b 	bl	8017874 <SX1276WriteFifo>
 8016dfe:	e005      	b.n	8016e0c <SX1276Send+0x58>
            }
            else
            {
                SX1276Write( REG_PAYLOADLENGTH, size );
 8016e00:	1cfb      	adds	r3, r7, #3
 8016e02:	781b      	ldrb	r3, [r3, #0]
 8016e04:	0019      	movs	r1, r3
 8016e06:	2032      	movs	r0, #50	; 0x32
 8016e08:	f000 fc6a 	bl	80176e0 <SX1276Write>
            }

            if( ( size > 0 ) && ( size <= 64 ) )
 8016e0c:	1cfb      	adds	r3, r7, #3
 8016e0e:	781b      	ldrb	r3, [r3, #0]
 8016e10:	2b00      	cmp	r3, #0
 8016e12:	d009      	beq.n	8016e28 <SX1276Send+0x74>
 8016e14:	1cfb      	adds	r3, r7, #3
 8016e16:	781b      	ldrb	r3, [r3, #0]
 8016e18:	2b40      	cmp	r3, #64	; 0x40
 8016e1a:	d805      	bhi.n	8016e28 <SX1276Send+0x74>
            {
                SX1276.Settings.FskPacketHandler.ChunkSize = size;
 8016e1c:	1cfb      	adds	r3, r7, #3
 8016e1e:	7819      	ldrb	r1, [r3, #0]
 8016e20:	4b42      	ldr	r3, [pc, #264]	; (8016f2c <SX1276Send+0x178>)
 8016e22:	223f      	movs	r2, #63	; 0x3f
 8016e24:	5499      	strb	r1, [r3, r2]
 8016e26:	e00b      	b.n	8016e40 <SX1276Send+0x8c>
            }
            else
            {
                memcpy1( RxTxBuffer, buffer, size );
 8016e28:	1cfb      	adds	r3, r7, #3
 8016e2a:	781b      	ldrb	r3, [r3, #0]
 8016e2c:	b29a      	uxth	r2, r3
 8016e2e:	6879      	ldr	r1, [r7, #4]
 8016e30:	4b3f      	ldr	r3, [pc, #252]	; (8016f30 <SX1276Send+0x17c>)
 8016e32:	0018      	movs	r0, r3
 8016e34:	f7fe fc54 	bl	80156e0 <memcpy1>
                SX1276.Settings.FskPacketHandler.ChunkSize = 32;
 8016e38:	4b3c      	ldr	r3, [pc, #240]	; (8016f2c <SX1276Send+0x178>)
 8016e3a:	223f      	movs	r2, #63	; 0x3f
 8016e3c:	2120      	movs	r1, #32
 8016e3e:	5499      	strb	r1, [r3, r2]
            }

            // Write payload buffer
            SX1276WriteFifo( buffer, SX1276.Settings.FskPacketHandler.ChunkSize );
 8016e40:	4b3a      	ldr	r3, [pc, #232]	; (8016f2c <SX1276Send+0x178>)
 8016e42:	223f      	movs	r2, #63	; 0x3f
 8016e44:	5c9a      	ldrb	r2, [r3, r2]
 8016e46:	687b      	ldr	r3, [r7, #4]
 8016e48:	0011      	movs	r1, r2
 8016e4a:	0018      	movs	r0, r3
 8016e4c:	f000 fd12 	bl	8017874 <SX1276WriteFifo>
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 8016e50:	4b36      	ldr	r3, [pc, #216]	; (8016f2c <SX1276Send+0x178>)
 8016e52:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 8016e54:	4b35      	ldr	r3, [pc, #212]	; (8016f2c <SX1276Send+0x178>)
 8016e56:	213f      	movs	r1, #63	; 0x3f
 8016e58:	5c5b      	ldrb	r3, [r3, r1]
 8016e5a:	b29b      	uxth	r3, r3
 8016e5c:	18d3      	adds	r3, r2, r3
 8016e5e:	b29a      	uxth	r2, r3
 8016e60:	4b32      	ldr	r3, [pc, #200]	; (8016f2c <SX1276Send+0x178>)
 8016e62:	879a      	strh	r2, [r3, #60]	; 0x3c
            txTimeout = SX1276.Settings.Fsk.TxTimeout;
 8016e64:	4b31      	ldr	r3, [pc, #196]	; (8016f2c <SX1276Send+0x178>)
 8016e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016e68:	60fb      	str	r3, [r7, #12]
        }
        break;
 8016e6a:	e056      	b.n	8016f1a <SX1276Send+0x166>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.IqInverted == true )
 8016e6c:	4b2f      	ldr	r3, [pc, #188]	; (8016f2c <SX1276Send+0x178>)
 8016e6e:	2255      	movs	r2, #85	; 0x55
 8016e70:	5c9b      	ldrb	r3, [r3, r2]
 8016e72:	2b00      	cmp	r3, #0
 8016e74:	d011      	beq.n	8016e9a <SX1276Send+0xe6>
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
 8016e76:	2033      	movs	r0, #51	; 0x33
 8016e78:	f000 fc46 	bl	8017708 <SX1276Read>
 8016e7c:	0003      	movs	r3, r0
 8016e7e:	001a      	movs	r2, r3
 8016e80:	2341      	movs	r3, #65	; 0x41
 8016e82:	439a      	bics	r2, r3
 8016e84:	0013      	movs	r3, r2
 8016e86:	b2db      	uxtb	r3, r3
 8016e88:	0019      	movs	r1, r3
 8016e8a:	2033      	movs	r0, #51	; 0x33
 8016e8c:	f000 fc28 	bl	80176e0 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 8016e90:	2119      	movs	r1, #25
 8016e92:	203b      	movs	r0, #59	; 0x3b
 8016e94:	f000 fc24 	bl	80176e0 <SX1276Write>
 8016e98:	e013      	b.n	8016ec2 <SX1276Send+0x10e>
            }
            else
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 8016e9a:	2033      	movs	r0, #51	; 0x33
 8016e9c:	f000 fc34 	bl	8017708 <SX1276Read>
 8016ea0:	0003      	movs	r3, r0
 8016ea2:	b25b      	sxtb	r3, r3
 8016ea4:	2241      	movs	r2, #65	; 0x41
 8016ea6:	4393      	bics	r3, r2
 8016ea8:	b25b      	sxtb	r3, r3
 8016eaa:	2201      	movs	r2, #1
 8016eac:	4313      	orrs	r3, r2
 8016eae:	b25b      	sxtb	r3, r3
 8016eb0:	b2db      	uxtb	r3, r3
 8016eb2:	0019      	movs	r1, r3
 8016eb4:	2033      	movs	r0, #51	; 0x33
 8016eb6:	f000 fc13 	bl	80176e0 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 8016eba:	211d      	movs	r1, #29
 8016ebc:	203b      	movs	r0, #59	; 0x3b
 8016ebe:	f000 fc0f 	bl	80176e0 <SX1276Write>
            }

            SX1276.Settings.LoRaPacketHandler.Size = size;
 8016ec2:	1cfb      	adds	r3, r7, #3
 8016ec4:	7819      	ldrb	r1, [r3, #0]
 8016ec6:	4b19      	ldr	r3, [pc, #100]	; (8016f2c <SX1276Send+0x178>)
 8016ec8:	2264      	movs	r2, #100	; 0x64
 8016eca:	5499      	strb	r1, [r3, r2]

            // Initializes the payload size
            SX1276Write( REG_LR_PAYLOADLENGTH, size );
 8016ecc:	1cfb      	adds	r3, r7, #3
 8016ece:	781b      	ldrb	r3, [r3, #0]
 8016ed0:	0019      	movs	r1, r3
 8016ed2:	2022      	movs	r0, #34	; 0x22
 8016ed4:	f000 fc04 	bl	80176e0 <SX1276Write>

            // Full buffer used for Tx
            SX1276Write( REG_LR_FIFOTXBASEADDR, 0 );
 8016ed8:	2100      	movs	r1, #0
 8016eda:	200e      	movs	r0, #14
 8016edc:	f000 fc00 	bl	80176e0 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 8016ee0:	2100      	movs	r1, #0
 8016ee2:	200d      	movs	r0, #13
 8016ee4:	f000 fbfc 	bl	80176e0 <SX1276Write>

            // FIFO operations can not take place in Sleep mode
            if( ( SX1276Read( REG_OPMODE ) & ~RF_OPMODE_MASK ) == RF_OPMODE_SLEEP )
 8016ee8:	2001      	movs	r0, #1
 8016eea:	f000 fc0d 	bl	8017708 <SX1276Read>
 8016eee:	0003      	movs	r3, r0
 8016ef0:	001a      	movs	r2, r3
 8016ef2:	23f8      	movs	r3, #248	; 0xf8
 8016ef4:	439a      	bics	r2, r3
 8016ef6:	1e13      	subs	r3, r2, #0
 8016ef8:	d104      	bne.n	8016f04 <SX1276Send+0x150>
            {
                SX1276SetStby( );
 8016efa:	f000 f835 	bl	8016f68 <SX1276SetStby>
                DelayMs( 1 );
 8016efe:	2001      	movs	r0, #1
 8016f00:	f006 fc20 	bl	801d744 <itsdk_delayMs>
            }
            // Write payload buffer
            SX1276WriteFifo( buffer, size );
 8016f04:	1cfb      	adds	r3, r7, #3
 8016f06:	781a      	ldrb	r2, [r3, #0]
 8016f08:	687b      	ldr	r3, [r7, #4]
 8016f0a:	0011      	movs	r1, r2
 8016f0c:	0018      	movs	r0, r3
 8016f0e:	f000 fcb1 	bl	8017874 <SX1276WriteFifo>
            txTimeout = SX1276.Settings.LoRa.TxTimeout;
 8016f12:	4b06      	ldr	r3, [pc, #24]	; (8016f2c <SX1276Send+0x178>)
 8016f14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016f16:	60fb      	str	r3, [r7, #12]
        }
        break;
 8016f18:	46c0      	nop			; (mov r8, r8)
    }

    SX1276SetTx( txTimeout );
 8016f1a:	68fb      	ldr	r3, [r7, #12]
 8016f1c:	0018      	movs	r0, r3
 8016f1e:	f000 f9cd 	bl	80172bc <SX1276SetTx>
}
 8016f22:	46c0      	nop			; (mov r8, r8)
 8016f24:	46bd      	mov	sp, r7
 8016f26:	b004      	add	sp, #16
 8016f28:	bd80      	pop	{r7, pc}
 8016f2a:	46c0      	nop			; (mov r8, r8)
 8016f2c:	200015b8 	.word	0x200015b8
 8016f30:	200010a4 	.word	0x200010a4

08016f34 <SX1276SetSleep>:

void SX1276SetSleep( void )
{
 8016f34:	b580      	push	{r7, lr}
 8016f36:	af00      	add	r7, sp, #0
	LOG_INFO_SX1276((">> SX1276SetSleep\r\n"));

    TimerStop( &RxTimeoutTimer );
 8016f38:	4b08      	ldr	r3, [pc, #32]	; (8016f5c <SX1276SetSleep+0x28>)
 8016f3a:	0018      	movs	r0, r3
 8016f3c:	f7fe fb40 	bl	80155c0 <TimerStop>
    TimerStop( &TxTimeoutTimer );
 8016f40:	4b07      	ldr	r3, [pc, #28]	; (8016f60 <SX1276SetSleep+0x2c>)
 8016f42:	0018      	movs	r0, r3
 8016f44:	f7fe fb3c 	bl	80155c0 <TimerStop>

    SX1276SetOpMode( RF_OPMODE_SLEEP );
 8016f48:	2000      	movs	r0, #0
 8016f4a:	f000 fb21 	bl	8017590 <SX1276SetOpMode>
    SX1276.Settings.State = RF_IDLE;
 8016f4e:	4b05      	ldr	r3, [pc, #20]	; (8016f64 <SX1276SetSleep+0x30>)
 8016f50:	2200      	movs	r2, #0
 8016f52:	711a      	strb	r2, [r3, #4]
}
 8016f54:	46c0      	nop			; (mov r8, r8)
 8016f56:	46bd      	mov	sp, r7
 8016f58:	bd80      	pop	{r7, pc}
 8016f5a:	46c0      	nop			; (mov r8, r8)
 8016f5c:	20001620 	.word	0x20001620
 8016f60:	20001588 	.word	0x20001588
 8016f64:	200015b8 	.word	0x200015b8

08016f68 <SX1276SetStby>:

void SX1276SetStby( void )
{
 8016f68:	b580      	push	{r7, lr}
 8016f6a:	af00      	add	r7, sp, #0
	LOG_INFO_SX1276((">> SX1276SetStby\r\n"));

    TimerStop( &RxTimeoutTimer );
 8016f6c:	4b08      	ldr	r3, [pc, #32]	; (8016f90 <SX1276SetStby+0x28>)
 8016f6e:	0018      	movs	r0, r3
 8016f70:	f7fe fb26 	bl	80155c0 <TimerStop>
    TimerStop( &TxTimeoutTimer );
 8016f74:	4b07      	ldr	r3, [pc, #28]	; (8016f94 <SX1276SetStby+0x2c>)
 8016f76:	0018      	movs	r0, r3
 8016f78:	f7fe fb22 	bl	80155c0 <TimerStop>

    SX1276SetOpMode( RF_OPMODE_STANDBY );
 8016f7c:	2001      	movs	r0, #1
 8016f7e:	f000 fb07 	bl	8017590 <SX1276SetOpMode>
    SX1276.Settings.State = RF_IDLE;
 8016f82:	4b05      	ldr	r3, [pc, #20]	; (8016f98 <SX1276SetStby+0x30>)
 8016f84:	2200      	movs	r2, #0
 8016f86:	711a      	strb	r2, [r3, #4]
}
 8016f88:	46c0      	nop			; (mov r8, r8)
 8016f8a:	46bd      	mov	sp, r7
 8016f8c:	bd80      	pop	{r7, pc}
 8016f8e:	46c0      	nop			; (mov r8, r8)
 8016f90:	20001620 	.word	0x20001620
 8016f94:	20001588 	.word	0x20001588
 8016f98:	200015b8 	.word	0x200015b8

08016f9c <SX1276SetRx>:

void SX1276SetRx( uint32_t timeout )
{
 8016f9c:	b580      	push	{r7, lr}
 8016f9e:	b084      	sub	sp, #16
 8016fa0:	af00      	add	r7, sp, #0
 8016fa2:	6078      	str	r0, [r7, #4]
	LOG_INFO_SX1276((">> SX1276SetRx (%d)\r\n",timeout));

    bool rxContinuous = false;
 8016fa4:	230f      	movs	r3, #15
 8016fa6:	18fb      	adds	r3, r7, r3
 8016fa8:	2200      	movs	r2, #0
 8016faa:	701a      	strb	r2, [r3, #0]

    switch( SX1276.Settings.Modem )
 8016fac:	4bb8      	ldr	r3, [pc, #736]	; (8017290 <SX1276SetRx+0x2f4>)
 8016fae:	795b      	ldrb	r3, [r3, #5]
 8016fb0:	2b00      	cmp	r3, #0
 8016fb2:	d002      	beq.n	8016fba <SX1276SetRx+0x1e>
 8016fb4:	2b01      	cmp	r3, #1
 8016fb6:	d041      	beq.n	801703c <SX1276SetRx+0xa0>
 8016fb8:	e128      	b.n	801720c <SX1276SetRx+0x270>
    {
    case MODEM_FSK:
        {
            rxContinuous = SX1276.Settings.Fsk.RxContinuous;
 8016fba:	230f      	movs	r3, #15
 8016fbc:	18fb      	adds	r3, r7, r3
 8016fbe:	4ab4      	ldr	r2, [pc, #720]	; (8017290 <SX1276SetRx+0x2f4>)
 8016fc0:	2126      	movs	r1, #38	; 0x26
 8016fc2:	5c52      	ldrb	r2, [r2, r1]
 8016fc4:	701a      	strb	r2, [r3, #0]
            // DIO1=FifoLevel
            // DIO2=SyncAddr
            // DIO3=FifoEmpty
            // DIO4=Preamble
            // DIO5=ModeReady
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8016fc6:	2040      	movs	r0, #64	; 0x40
 8016fc8:	f000 fb9e 	bl	8017708 <SX1276Read>
 8016fcc:	0003      	movs	r3, r0
 8016fce:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_MASK &
                                                                            RF_DIOMAPPING1_DIO2_MASK ) |
                                                                            RF_DIOMAPPING1_DIO0_00 |
 8016fd0:	2203      	movs	r2, #3
 8016fd2:	4013      	ands	r3, r2
 8016fd4:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_00 |
 8016fd6:	220c      	movs	r2, #12
 8016fd8:	4313      	orrs	r3, r2
 8016fda:	b25b      	sxtb	r3, r3
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8016fdc:	b2db      	uxtb	r3, r3
 8016fde:	0019      	movs	r1, r3
 8016fe0:	2040      	movs	r0, #64	; 0x40
 8016fe2:	f000 fb7d 	bl	80176e0 <SX1276Write>
                                                                            RF_DIOMAPPING1_DIO2_11 );

            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 8016fe6:	2041      	movs	r0, #65	; 0x41
 8016fe8:	f000 fb8e 	bl	8017708 <SX1276Read>
 8016fec:	0003      	movs	r3, r0
 8016fee:	001a      	movs	r2, r3
 8016ff0:	233f      	movs	r3, #63	; 0x3f
 8016ff2:	425b      	negs	r3, r3
 8016ff4:	4313      	orrs	r3, r2
 8016ff6:	b2db      	uxtb	r3, r3
 8016ff8:	0019      	movs	r1, r3
 8016ffa:	2041      	movs	r0, #65	; 0x41
 8016ffc:	f000 fb70 	bl	80176e0 <SX1276Write>
                                                                            RF_DIOMAPPING2_MAP_MASK ) |
                                                                            RF_DIOMAPPING2_DIO4_11 |
                                                                            RF_DIOMAPPING2_MAP_PREAMBLEDETECT );

            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 8017000:	2035      	movs	r0, #53	; 0x35
 8017002:	f000 fb81 	bl	8017708 <SX1276Read>
 8017006:	0003      	movs	r3, r0
 8017008:	001a      	movs	r2, r3
 801700a:	233f      	movs	r3, #63	; 0x3f
 801700c:	4013      	ands	r3, r2
 801700e:	b2d9      	uxtb	r1, r3
 8017010:	4b9f      	ldr	r3, [pc, #636]	; (8017290 <SX1276SetRx+0x2f4>)
 8017012:	223e      	movs	r2, #62	; 0x3e
 8017014:	5499      	strb	r1, [r3, r2]

            SX1276Write( REG_RXCONFIG, RF_RXCONFIG_AFCAUTO_ON | RF_RXCONFIG_AGCAUTO_ON | RF_RXCONFIG_RXTRIGER_PREAMBLEDETECT );
 8017016:	211e      	movs	r1, #30
 8017018:	200d      	movs	r0, #13
 801701a:	f000 fb61 	bl	80176e0 <SX1276Write>

            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 801701e:	4b9c      	ldr	r3, [pc, #624]	; (8017290 <SX1276SetRx+0x2f4>)
 8017020:	2230      	movs	r2, #48	; 0x30
 8017022:	2100      	movs	r1, #0
 8017024:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 8017026:	4b9a      	ldr	r3, [pc, #616]	; (8017290 <SX1276SetRx+0x2f4>)
 8017028:	2231      	movs	r2, #49	; 0x31
 801702a:	2100      	movs	r1, #0
 801702c:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 801702e:	4b98      	ldr	r3, [pc, #608]	; (8017290 <SX1276SetRx+0x2f4>)
 8017030:	2200      	movs	r2, #0
 8017032:	879a      	strh	r2, [r3, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = 0;
 8017034:	4b96      	ldr	r3, [pc, #600]	; (8017290 <SX1276SetRx+0x2f4>)
 8017036:	2200      	movs	r2, #0
 8017038:	875a      	strh	r2, [r3, #58]	; 0x3a
        }
        break;
 801703a:	e0e7      	b.n	801720c <SX1276SetRx+0x270>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.IqInverted == true )
 801703c:	4b94      	ldr	r3, [pc, #592]	; (8017290 <SX1276SetRx+0x2f4>)
 801703e:	2255      	movs	r2, #85	; 0x55
 8017040:	5c9b      	ldrb	r3, [r3, r2]
 8017042:	2b00      	cmp	r3, #0
 8017044:	d010      	beq.n	8017068 <SX1276SetRx+0xcc>
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
 8017046:	2033      	movs	r0, #51	; 0x33
 8017048:	f000 fb5e 	bl	8017708 <SX1276Read>
 801704c:	0003      	movs	r3, r0
 801704e:	001a      	movs	r2, r3
 8017050:	2341      	movs	r3, #65	; 0x41
 8017052:	4313      	orrs	r3, r2
 8017054:	b2db      	uxtb	r3, r3
 8017056:	0019      	movs	r1, r3
 8017058:	2033      	movs	r0, #51	; 0x33
 801705a:	f000 fb41 	bl	80176e0 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 801705e:	2119      	movs	r1, #25
 8017060:	203b      	movs	r0, #59	; 0x3b
 8017062:	f000 fb3d 	bl	80176e0 <SX1276Write>
 8017066:	e013      	b.n	8017090 <SX1276SetRx+0xf4>
            }
            else
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 8017068:	2033      	movs	r0, #51	; 0x33
 801706a:	f000 fb4d 	bl	8017708 <SX1276Read>
 801706e:	0003      	movs	r3, r0
 8017070:	b25b      	sxtb	r3, r3
 8017072:	2241      	movs	r2, #65	; 0x41
 8017074:	4393      	bics	r3, r2
 8017076:	b25b      	sxtb	r3, r3
 8017078:	2201      	movs	r2, #1
 801707a:	4313      	orrs	r3, r2
 801707c:	b25b      	sxtb	r3, r3
 801707e:	b2db      	uxtb	r3, r3
 8017080:	0019      	movs	r1, r3
 8017082:	2033      	movs	r0, #51	; 0x33
 8017084:	f000 fb2c 	bl	80176e0 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 8017088:	211d      	movs	r1, #29
 801708a:	203b      	movs	r0, #59	; 0x3b
 801708c:	f000 fb28 	bl	80176e0 <SX1276Write>
            }

            // ERRATA 2.3 - Receiver Spurious Reception of a LoRa Signal
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
 8017090:	4b7f      	ldr	r3, [pc, #508]	; (8017290 <SX1276SetRx+0x2f4>)
 8017092:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017094:	2b08      	cmp	r3, #8
 8017096:	d900      	bls.n	801709a <SX1276SetRx+0xfe>
 8017098:	e076      	b.n	8017188 <SX1276SetRx+0x1ec>
            {
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
 801709a:	2031      	movs	r0, #49	; 0x31
 801709c:	f000 fb34 	bl	8017708 <SX1276Read>
 80170a0:	0003      	movs	r3, r0
 80170a2:	001a      	movs	r2, r3
 80170a4:	237f      	movs	r3, #127	; 0x7f
 80170a6:	4013      	ands	r3, r2
 80170a8:	b2db      	uxtb	r3, r3
 80170aa:	0019      	movs	r1, r3
 80170ac:	2031      	movs	r0, #49	; 0x31
 80170ae:	f000 fb17 	bl	80176e0 <SX1276Write>
                SX1276Write( REG_LR_IFFREQ2, 0x00 );
 80170b2:	2100      	movs	r1, #0
 80170b4:	2030      	movs	r0, #48	; 0x30
 80170b6:	f000 fb13 	bl	80176e0 <SX1276Write>
                switch( SX1276.Settings.LoRa.Bandwidth )
 80170ba:	4b75      	ldr	r3, [pc, #468]	; (8017290 <SX1276SetRx+0x2f4>)
 80170bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80170be:	2b08      	cmp	r3, #8
 80170c0:	d86f      	bhi.n	80171a2 <SX1276SetRx+0x206>
 80170c2:	009a      	lsls	r2, r3, #2
 80170c4:	4b73      	ldr	r3, [pc, #460]	; (8017294 <SX1276SetRx+0x2f8>)
 80170c6:	18d3      	adds	r3, r2, r3
 80170c8:	681b      	ldr	r3, [r3, #0]
 80170ca:	469f      	mov	pc, r3
                {
                case 0: // 7.8 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x48 );
 80170cc:	2148      	movs	r1, #72	; 0x48
 80170ce:	202f      	movs	r0, #47	; 0x2f
 80170d0:	f000 fb06 	bl	80176e0 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 7810 );
 80170d4:	4b6e      	ldr	r3, [pc, #440]	; (8017290 <SX1276SetRx+0x2f4>)
 80170d6:	689b      	ldr	r3, [r3, #8]
 80170d8:	4a6f      	ldr	r2, [pc, #444]	; (8017298 <SX1276SetRx+0x2fc>)
 80170da:	4694      	mov	ip, r2
 80170dc:	4463      	add	r3, ip
 80170de:	0018      	movs	r0, r3
 80170e0:	f7fe feb6 	bl	8015e50 <SX1276SetChannel>
                    break;
 80170e4:	e05d      	b.n	80171a2 <SX1276SetRx+0x206>
                case 1: // 10.4 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 80170e6:	2144      	movs	r1, #68	; 0x44
 80170e8:	202f      	movs	r0, #47	; 0x2f
 80170ea:	f000 faf9 	bl	80176e0 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 10420 );
 80170ee:	4b68      	ldr	r3, [pc, #416]	; (8017290 <SX1276SetRx+0x2f4>)
 80170f0:	689b      	ldr	r3, [r3, #8]
 80170f2:	4a6a      	ldr	r2, [pc, #424]	; (801729c <SX1276SetRx+0x300>)
 80170f4:	4694      	mov	ip, r2
 80170f6:	4463      	add	r3, ip
 80170f8:	0018      	movs	r0, r3
 80170fa:	f7fe fea9 	bl	8015e50 <SX1276SetChannel>
                    break;
 80170fe:	e050      	b.n	80171a2 <SX1276SetRx+0x206>
                case 2: // 15.6 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8017100:	2144      	movs	r1, #68	; 0x44
 8017102:	202f      	movs	r0, #47	; 0x2f
 8017104:	f000 faec 	bl	80176e0 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 15620 );
 8017108:	4b61      	ldr	r3, [pc, #388]	; (8017290 <SX1276SetRx+0x2f4>)
 801710a:	689b      	ldr	r3, [r3, #8]
 801710c:	4a64      	ldr	r2, [pc, #400]	; (80172a0 <SX1276SetRx+0x304>)
 801710e:	4694      	mov	ip, r2
 8017110:	4463      	add	r3, ip
 8017112:	0018      	movs	r0, r3
 8017114:	f7fe fe9c 	bl	8015e50 <SX1276SetChannel>
                    break;
 8017118:	e043      	b.n	80171a2 <SX1276SetRx+0x206>
                case 3: // 20.8 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 801711a:	2144      	movs	r1, #68	; 0x44
 801711c:	202f      	movs	r0, #47	; 0x2f
 801711e:	f000 fadf 	bl	80176e0 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 20830 );
 8017122:	4b5b      	ldr	r3, [pc, #364]	; (8017290 <SX1276SetRx+0x2f4>)
 8017124:	689b      	ldr	r3, [r3, #8]
 8017126:	4a5f      	ldr	r2, [pc, #380]	; (80172a4 <SX1276SetRx+0x308>)
 8017128:	4694      	mov	ip, r2
 801712a:	4463      	add	r3, ip
 801712c:	0018      	movs	r0, r3
 801712e:	f7fe fe8f 	bl	8015e50 <SX1276SetChannel>
                    break;
 8017132:	e036      	b.n	80171a2 <SX1276SetRx+0x206>
                case 4: // 31.2 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8017134:	2144      	movs	r1, #68	; 0x44
 8017136:	202f      	movs	r0, #47	; 0x2f
 8017138:	f000 fad2 	bl	80176e0 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 31250 );
 801713c:	4b54      	ldr	r3, [pc, #336]	; (8017290 <SX1276SetRx+0x2f4>)
 801713e:	689b      	ldr	r3, [r3, #8]
 8017140:	4a59      	ldr	r2, [pc, #356]	; (80172a8 <SX1276SetRx+0x30c>)
 8017142:	4694      	mov	ip, r2
 8017144:	4463      	add	r3, ip
 8017146:	0018      	movs	r0, r3
 8017148:	f7fe fe82 	bl	8015e50 <SX1276SetChannel>
                    break;
 801714c:	e029      	b.n	80171a2 <SX1276SetRx+0x206>
                case 5: // 41.4 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 801714e:	2144      	movs	r1, #68	; 0x44
 8017150:	202f      	movs	r0, #47	; 0x2f
 8017152:	f000 fac5 	bl	80176e0 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 41670 );
 8017156:	4b4e      	ldr	r3, [pc, #312]	; (8017290 <SX1276SetRx+0x2f4>)
 8017158:	689b      	ldr	r3, [r3, #8]
 801715a:	4a54      	ldr	r2, [pc, #336]	; (80172ac <SX1276SetRx+0x310>)
 801715c:	4694      	mov	ip, r2
 801715e:	4463      	add	r3, ip
 8017160:	0018      	movs	r0, r3
 8017162:	f7fe fe75 	bl	8015e50 <SX1276SetChannel>
                    break;
 8017166:	e01c      	b.n	80171a2 <SX1276SetRx+0x206>
                case 6: // 62.5 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 8017168:	2140      	movs	r1, #64	; 0x40
 801716a:	202f      	movs	r0, #47	; 0x2f
 801716c:	f000 fab8 	bl	80176e0 <SX1276Write>
                    break;
 8017170:	e017      	b.n	80171a2 <SX1276SetRx+0x206>
                case 7: // 125 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 8017172:	2140      	movs	r1, #64	; 0x40
 8017174:	202f      	movs	r0, #47	; 0x2f
 8017176:	f000 fab3 	bl	80176e0 <SX1276Write>
                    break;
 801717a:	e012      	b.n	80171a2 <SX1276SetRx+0x206>
                case 8: // 250 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 801717c:	2140      	movs	r1, #64	; 0x40
 801717e:	202f      	movs	r0, #47	; 0x2f
 8017180:	f000 faae 	bl	80176e0 <SX1276Write>
                    break;
 8017184:	46c0      	nop			; (mov r8, r8)
 8017186:	e00c      	b.n	80171a2 <SX1276SetRx+0x206>
                }
            }
            else
            {
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) | 0x80 );
 8017188:	2031      	movs	r0, #49	; 0x31
 801718a:	f000 fabd 	bl	8017708 <SX1276Read>
 801718e:	0003      	movs	r3, r0
 8017190:	001a      	movs	r2, r3
 8017192:	2380      	movs	r3, #128	; 0x80
 8017194:	425b      	negs	r3, r3
 8017196:	4313      	orrs	r3, r2
 8017198:	b2db      	uxtb	r3, r3
 801719a:	0019      	movs	r1, r3
 801719c:	2031      	movs	r0, #49	; 0x31
 801719e:	f000 fa9f 	bl	80176e0 <SX1276Write>
            }

            rxContinuous = SX1276.Settings.LoRa.RxContinuous;
 80171a2:	230f      	movs	r3, #15
 80171a4:	18fb      	adds	r3, r7, r3
 80171a6:	4a3a      	ldr	r2, [pc, #232]	; (8017290 <SX1276SetRx+0x2f4>)
 80171a8:	2156      	movs	r1, #86	; 0x56
 80171aa:	5c52      	ldrb	r2, [r2, r1]
 80171ac:	701a      	strb	r2, [r3, #0]

            if( SX1276.Settings.LoRa.FreqHopOn == true )
 80171ae:	4b38      	ldr	r3, [pc, #224]	; (8017290 <SX1276SetRx+0x2f4>)
 80171b0:	2253      	movs	r2, #83	; 0x53
 80171b2:	5c9b      	ldrb	r3, [r3, r2]
 80171b4:	2b00      	cmp	r3, #0
 80171b6:	d010      	beq.n	80171da <SX1276SetRx+0x23e>
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 80171b8:	211d      	movs	r1, #29
 80171ba:	2011      	movs	r0, #17
 80171bc:	f000 fa90 	bl	80176e0 <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  //RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=RxDone, DIO2=FhssChangeChannel
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK  ) | RFLR_DIOMAPPING1_DIO0_00 | RFLR_DIOMAPPING1_DIO2_00 );
 80171c0:	2040      	movs	r0, #64	; 0x40
 80171c2:	f000 faa1 	bl	8017708 <SX1276Read>
 80171c6:	0003      	movs	r3, r0
 80171c8:	001a      	movs	r2, r3
 80171ca:	2333      	movs	r3, #51	; 0x33
 80171cc:	4013      	ands	r3, r2
 80171ce:	b2db      	uxtb	r3, r3
 80171d0:	0019      	movs	r1, r3
 80171d2:	2040      	movs	r0, #64	; 0x40
 80171d4:	f000 fa84 	bl	80176e0 <SX1276Write>
 80171d8:	e00f      	b.n	80171fa <SX1276SetRx+0x25e>
            }
            else
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 80171da:	211f      	movs	r1, #31
 80171dc:	2011      	movs	r0, #17
 80171de:	f000 fa7f 	bl	80176e0 <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=RxDone
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 80171e2:	2040      	movs	r0, #64	; 0x40
 80171e4:	f000 fa90 	bl	8017708 <SX1276Read>
 80171e8:	0003      	movs	r3, r0
 80171ea:	001a      	movs	r2, r3
 80171ec:	233f      	movs	r3, #63	; 0x3f
 80171ee:	4013      	ands	r3, r2
 80171f0:	b2db      	uxtb	r3, r3
 80171f2:	0019      	movs	r1, r3
 80171f4:	2040      	movs	r0, #64	; 0x40
 80171f6:	f000 fa73 	bl	80176e0 <SX1276Write>
            }
            SX1276Write( REG_LR_FIFORXBASEADDR, 0 );
 80171fa:	2100      	movs	r1, #0
 80171fc:	200f      	movs	r0, #15
 80171fe:	f000 fa6f 	bl	80176e0 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 8017202:	2100      	movs	r1, #0
 8017204:	200d      	movs	r0, #13
 8017206:	f000 fa6b 	bl	80176e0 <SX1276Write>
        }
        break;
 801720a:	46c0      	nop			; (mov r8, r8)
    }

    memset( RxTxBuffer, 0, ( size_t )RX_BUFFER_SIZE );
 801720c:	2380      	movs	r3, #128	; 0x80
 801720e:	005a      	lsls	r2, r3, #1
 8017210:	4b27      	ldr	r3, [pc, #156]	; (80172b0 <SX1276SetRx+0x314>)
 8017212:	2100      	movs	r1, #0
 8017214:	0018      	movs	r0, r3
 8017216:	f007 f801 	bl	801e21c <memset>

    SX1276.Settings.State = RF_RX_RUNNING;
 801721a:	4b1d      	ldr	r3, [pc, #116]	; (8017290 <SX1276SetRx+0x2f4>)
 801721c:	2201      	movs	r2, #1
 801721e:	711a      	strb	r2, [r3, #4]
    if( timeout != 0 )
 8017220:	687b      	ldr	r3, [r7, #4]
 8017222:	2b00      	cmp	r3, #0
 8017224:	d009      	beq.n	801723a <SX1276SetRx+0x29e>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8017226:	687a      	ldr	r2, [r7, #4]
 8017228:	4b22      	ldr	r3, [pc, #136]	; (80172b4 <SX1276SetRx+0x318>)
 801722a:	0011      	movs	r1, r2
 801722c:	0018      	movs	r0, r3
 801722e:	f7fe f945 	bl	80154bc <TimerSetValue>
        TimerStart( &RxTimeoutTimer );
 8017232:	4b20      	ldr	r3, [pc, #128]	; (80172b4 <SX1276SetRx+0x318>)
 8017234:	0018      	movs	r0, r3
 8017236:	f7fe f96d 	bl	8015514 <TimerStart>
    }

    if( SX1276.Settings.Modem == MODEM_FSK )
 801723a:	4b15      	ldr	r3, [pc, #84]	; (8017290 <SX1276SetRx+0x2f4>)
 801723c:	795b      	ldrb	r3, [r3, #5]
 801723e:	2b00      	cmp	r3, #0
 8017240:	d116      	bne.n	8017270 <SX1276SetRx+0x2d4>
    {
        SX1276SetOpMode( RF_OPMODE_RECEIVER );
 8017242:	2005      	movs	r0, #5
 8017244:	f000 f9a4 	bl	8017590 <SX1276SetOpMode>

        if( rxContinuous == false )
 8017248:	230f      	movs	r3, #15
 801724a:	18fb      	adds	r3, r7, r3
 801724c:	781b      	ldrb	r3, [r3, #0]
 801724e:	2201      	movs	r2, #1
 8017250:	4053      	eors	r3, r2
 8017252:	b2db      	uxtb	r3, r3
 8017254:	2b00      	cmp	r3, #0
 8017256:	d017      	beq.n	8017288 <SX1276SetRx+0x2ec>
        {
            TimerSetValue( &RxTimeoutSyncWord, SX1276.Settings.Fsk.RxSingleTimeout );
 8017258:	4b0d      	ldr	r3, [pc, #52]	; (8017290 <SX1276SetRx+0x2f4>)
 801725a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801725c:	4b16      	ldr	r3, [pc, #88]	; (80172b8 <SX1276SetRx+0x31c>)
 801725e:	0011      	movs	r1, r2
 8017260:	0018      	movs	r0, r3
 8017262:	f7fe f92b 	bl	80154bc <TimerSetValue>
            TimerStart( &RxTimeoutSyncWord );
 8017266:	4b14      	ldr	r3, [pc, #80]	; (80172b8 <SX1276SetRx+0x31c>)
 8017268:	0018      	movs	r0, r3
 801726a:	f7fe f953 	bl	8015514 <TimerStart>
        else
        {
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
        }
    }
}
 801726e:	e00b      	b.n	8017288 <SX1276SetRx+0x2ec>
        if( rxContinuous == true )
 8017270:	230f      	movs	r3, #15
 8017272:	18fb      	adds	r3, r7, r3
 8017274:	781b      	ldrb	r3, [r3, #0]
 8017276:	2b00      	cmp	r3, #0
 8017278:	d003      	beq.n	8017282 <SX1276SetRx+0x2e6>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER );
 801727a:	2005      	movs	r0, #5
 801727c:	f000 f988 	bl	8017590 <SX1276SetOpMode>
}
 8017280:	e002      	b.n	8017288 <SX1276SetRx+0x2ec>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
 8017282:	2006      	movs	r0, #6
 8017284:	f000 f984 	bl	8017590 <SX1276SetOpMode>
}
 8017288:	46c0      	nop			; (mov r8, r8)
 801728a:	46bd      	mov	sp, r7
 801728c:	b004      	add	sp, #16
 801728e:	bd80      	pop	{r7, pc}
 8017290:	200015b8 	.word	0x200015b8
 8017294:	08020dac 	.word	0x08020dac
 8017298:	00001e82 	.word	0x00001e82
 801729c:	000028b4 	.word	0x000028b4
 80172a0:	00003d04 	.word	0x00003d04
 80172a4:	0000515e 	.word	0x0000515e
 80172a8:	00007a12 	.word	0x00007a12
 80172ac:	0000a2c6 	.word	0x0000a2c6
 80172b0:	200010a4 	.word	0x200010a4
 80172b4:	20001620 	.word	0x20001620
 80172b8:	200015a0 	.word	0x200015a0

080172bc <SX1276SetTx>:

void SX1276SetTx( uint32_t timeout )
{
 80172bc:	b580      	push	{r7, lr}
 80172be:	b082      	sub	sp, #8
 80172c0:	af00      	add	r7, sp, #0
 80172c2:	6078      	str	r0, [r7, #4]
    LOG_INFO_SX1276((">> SX1276SetTx (%d)\r\n",timeout));

    TimerSetValue( &TxTimeoutTimer, timeout );
 80172c4:	687a      	ldr	r2, [r7, #4]
 80172c6:	4b38      	ldr	r3, [pc, #224]	; (80173a8 <SX1276SetTx+0xec>)
 80172c8:	0011      	movs	r1, r2
 80172ca:	0018      	movs	r0, r3
 80172cc:	f7fe f8f6 	bl	80154bc <TimerSetValue>

    switch( SX1276.Settings.Modem )
 80172d0:	4b36      	ldr	r3, [pc, #216]	; (80173ac <SX1276SetTx+0xf0>)
 80172d2:	795b      	ldrb	r3, [r3, #5]
 80172d4:	2b00      	cmp	r3, #0
 80172d6:	d002      	beq.n	80172de <SX1276SetTx+0x22>
 80172d8:	2b01      	cmp	r3, #1
 80172da:	d028      	beq.n	801732e <SX1276SetTx+0x72>
 80172dc:	e056      	b.n	801738c <SX1276SetTx+0xd0>
            // DIO1=FifoEmpty
            // DIO2=FifoFull
            // DIO3=FifoEmpty
            // DIO4=LowBat
            // DIO5=ModeReady
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 80172de:	2040      	movs	r0, #64	; 0x40
 80172e0:	f000 fa12 	bl	8017708 <SX1276Read>
 80172e4:	0003      	movs	r3, r0
 80172e6:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_MASK &
 80172e8:	2203      	movs	r2, #3
 80172ea:	4013      	ands	r3, r2
 80172ec:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO2_MASK ) |
 80172ee:	2210      	movs	r2, #16
 80172f0:	4313      	orrs	r3, r2
 80172f2:	b25b      	sxtb	r3, r3
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 80172f4:	b2db      	uxtb	r3, r3
 80172f6:	0019      	movs	r1, r3
 80172f8:	2040      	movs	r0, #64	; 0x40
 80172fa:	f000 f9f1 	bl	80176e0 <SX1276Write>
                                                                            RF_DIOMAPPING1_DIO1_01 );

            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 80172fe:	2041      	movs	r0, #65	; 0x41
 8017300:	f000 fa02 	bl	8017708 <SX1276Read>
 8017304:	0003      	movs	r3, r0
 8017306:	001a      	movs	r2, r3
 8017308:	233e      	movs	r3, #62	; 0x3e
 801730a:	4013      	ands	r3, r2
 801730c:	b2db      	uxtb	r3, r3
 801730e:	0019      	movs	r1, r3
 8017310:	2041      	movs	r0, #65	; 0x41
 8017312:	f000 f9e5 	bl	80176e0 <SX1276Write>
                                                                            RF_DIOMAPPING2_MAP_MASK ) );
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 8017316:	2035      	movs	r0, #53	; 0x35
 8017318:	f000 f9f6 	bl	8017708 <SX1276Read>
 801731c:	0003      	movs	r3, r0
 801731e:	001a      	movs	r2, r3
 8017320:	233f      	movs	r3, #63	; 0x3f
 8017322:	4013      	ands	r3, r2
 8017324:	b2d9      	uxtb	r1, r3
 8017326:	4b21      	ldr	r3, [pc, #132]	; (80173ac <SX1276SetTx+0xf0>)
 8017328:	223e      	movs	r2, #62	; 0x3e
 801732a:	5499      	strb	r1, [r3, r2]
        }
        break;
 801732c:	e02e      	b.n	801738c <SX1276SetTx+0xd0>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 801732e:	4b1f      	ldr	r3, [pc, #124]	; (80173ac <SX1276SetTx+0xf0>)
 8017330:	2253      	movs	r2, #83	; 0x53
 8017332:	5c9b      	ldrb	r3, [r3, r2]
 8017334:	2b00      	cmp	r3, #0
 8017336:	d014      	beq.n	8017362 <SX1276SetTx+0xa6>
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8017338:	21f5      	movs	r1, #245	; 0xf5
 801733a:	2011      	movs	r0, #17
 801733c:	f000 f9d0 	bl	80176e0 <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  //RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=TxDone, DIO2=FhssChangeChannel
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK ) | RFLR_DIOMAPPING1_DIO0_01 | RFLR_DIOMAPPING1_DIO2_00 );
 8017340:	2040      	movs	r0, #64	; 0x40
 8017342:	f000 f9e1 	bl	8017708 <SX1276Read>
 8017346:	0003      	movs	r3, r0
 8017348:	b25b      	sxtb	r3, r3
 801734a:	2233      	movs	r2, #51	; 0x33
 801734c:	4013      	ands	r3, r2
 801734e:	b25b      	sxtb	r3, r3
 8017350:	2240      	movs	r2, #64	; 0x40
 8017352:	4313      	orrs	r3, r2
 8017354:	b25b      	sxtb	r3, r3
 8017356:	b2db      	uxtb	r3, r3
 8017358:	0019      	movs	r1, r3
 801735a:	2040      	movs	r0, #64	; 0x40
 801735c:	f000 f9c0 	bl	80176e0 <SX1276Write>

                // DIO0=TxDone
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
            }
        }
        break;
 8017360:	e013      	b.n	801738a <SX1276SetTx+0xce>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8017362:	21f7      	movs	r1, #247	; 0xf7
 8017364:	2011      	movs	r0, #17
 8017366:	f000 f9bb 	bl	80176e0 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 801736a:	2040      	movs	r0, #64	; 0x40
 801736c:	f000 f9cc 	bl	8017708 <SX1276Read>
 8017370:	0003      	movs	r3, r0
 8017372:	b25b      	sxtb	r3, r3
 8017374:	223f      	movs	r2, #63	; 0x3f
 8017376:	4013      	ands	r3, r2
 8017378:	b25b      	sxtb	r3, r3
 801737a:	2240      	movs	r2, #64	; 0x40
 801737c:	4313      	orrs	r3, r2
 801737e:	b25b      	sxtb	r3, r3
 8017380:	b2db      	uxtb	r3, r3
 8017382:	0019      	movs	r1, r3
 8017384:	2040      	movs	r0, #64	; 0x40
 8017386:	f000 f9ab 	bl	80176e0 <SX1276Write>
        break;
 801738a:	46c0      	nop			; (mov r8, r8)
    }

    SX1276.Settings.State = RF_TX_RUNNING;
 801738c:	4b07      	ldr	r3, [pc, #28]	; (80173ac <SX1276SetTx+0xf0>)
 801738e:	2202      	movs	r2, #2
 8017390:	711a      	strb	r2, [r3, #4]
    TimerStart( &TxTimeoutTimer );
 8017392:	4b05      	ldr	r3, [pc, #20]	; (80173a8 <SX1276SetTx+0xec>)
 8017394:	0018      	movs	r0, r3
 8017396:	f7fe f8bd 	bl	8015514 <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 801739a:	2003      	movs	r0, #3
 801739c:	f000 f8f8 	bl	8017590 <SX1276SetOpMode>
}
 80173a0:	46c0      	nop			; (mov r8, r8)
 80173a2:	46bd      	mov	sp, r7
 80173a4:	b002      	add	sp, #8
 80173a6:	bd80      	pop	{r7, pc}
 80173a8:	20001588 	.word	0x20001588
 80173ac:	200015b8 	.word	0x200015b8

080173b0 <SX1276StartCad>:

void SX1276StartCad( void )
{
 80173b0:	b580      	push	{r7, lr}
 80173b2:	af00      	add	r7, sp, #0
	LOG_INFO_SX1276((">> SX1276StartCad\r\n"));

    switch( SX1276.Settings.Modem )
 80173b4:	4b11      	ldr	r3, [pc, #68]	; (80173fc <SX1276StartCad+0x4c>)
 80173b6:	795b      	ldrb	r3, [r3, #5]
 80173b8:	2b00      	cmp	r3, #0
 80173ba:	d01a      	beq.n	80173f2 <SX1276StartCad+0x42>
 80173bc:	2b01      	cmp	r3, #1
 80173be:	d000      	beq.n	80173c2 <SX1276StartCad+0x12>
            SX1276.Settings.State = RF_CAD;
            SX1276SetOpMode( RFLR_OPMODE_CAD );
        }
        break;
    default:
        break;
 80173c0:	e018      	b.n	80173f4 <SX1276StartCad+0x44>
            SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 80173c2:	21fa      	movs	r1, #250	; 0xfa
 80173c4:	2011      	movs	r0, #17
 80173c6:	f000 f98b 	bl	80176e0 <SX1276Write>
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO3_MASK ) | RFLR_DIOMAPPING1_DIO3_00 );
 80173ca:	2040      	movs	r0, #64	; 0x40
 80173cc:	f000 f99c 	bl	8017708 <SX1276Read>
 80173d0:	0003      	movs	r3, r0
 80173d2:	001a      	movs	r2, r3
 80173d4:	2303      	movs	r3, #3
 80173d6:	439a      	bics	r2, r3
 80173d8:	0013      	movs	r3, r2
 80173da:	b2db      	uxtb	r3, r3
 80173dc:	0019      	movs	r1, r3
 80173de:	2040      	movs	r0, #64	; 0x40
 80173e0:	f000 f97e 	bl	80176e0 <SX1276Write>
            SX1276.Settings.State = RF_CAD;
 80173e4:	4b05      	ldr	r3, [pc, #20]	; (80173fc <SX1276StartCad+0x4c>)
 80173e6:	2203      	movs	r2, #3
 80173e8:	711a      	strb	r2, [r3, #4]
            SX1276SetOpMode( RFLR_OPMODE_CAD );
 80173ea:	2007      	movs	r0, #7
 80173ec:	f000 f8d0 	bl	8017590 <SX1276SetOpMode>
        break;
 80173f0:	e000      	b.n	80173f4 <SX1276StartCad+0x44>
        break;
 80173f2:	46c0      	nop			; (mov r8, r8)
    }
}
 80173f4:	46c0      	nop			; (mov r8, r8)
 80173f6:	46bd      	mov	sp, r7
 80173f8:	bd80      	pop	{r7, pc}
 80173fa:	46c0      	nop			; (mov r8, r8)
 80173fc:	200015b8 	.word	0x200015b8

08017400 <SX1276SetTxContinuousWave>:

void SX1276SetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 8017400:	b580      	push	{r7, lr}
 8017402:	b08e      	sub	sp, #56	; 0x38
 8017404:	af0a      	add	r7, sp, #40	; 0x28
 8017406:	6078      	str	r0, [r7, #4]
 8017408:	0008      	movs	r0, r1
 801740a:	0011      	movs	r1, r2
 801740c:	1cfb      	adds	r3, r7, #3
 801740e:	1c02      	adds	r2, r0, #0
 8017410:	701a      	strb	r2, [r3, #0]
 8017412:	003b      	movs	r3, r7
 8017414:	1c0a      	adds	r2, r1, #0
 8017416:	801a      	strh	r2, [r3, #0]
	LOG_INFO_SX1276((">> SX1276SetTxContinuousWave\r\n"));

    uint32_t timeout = ( uint32_t )( time * 1000 );
 8017418:	003b      	movs	r3, r7
 801741a:	881a      	ldrh	r2, [r3, #0]
 801741c:	0013      	movs	r3, r2
 801741e:	015b      	lsls	r3, r3, #5
 8017420:	1a9b      	subs	r3, r3, r2
 8017422:	009b      	lsls	r3, r3, #2
 8017424:	189b      	adds	r3, r3, r2
 8017426:	00db      	lsls	r3, r3, #3
 8017428:	60fb      	str	r3, [r7, #12]

    SX1276SetChannel( freq );
 801742a:	687b      	ldr	r3, [r7, #4]
 801742c:	0018      	movs	r0, r3
 801742e:	f7fe fd0f 	bl	8015e50 <SX1276SetChannel>

    SX1276SetTxConfig( MODEM_FSK, power, 0, 0, 4800, 0, 5, false, false, 0, 0, 0, timeout );
 8017432:	1cfb      	adds	r3, r7, #3
 8017434:	2100      	movs	r1, #0
 8017436:	5659      	ldrsb	r1, [r3, r1]
 8017438:	68fb      	ldr	r3, [r7, #12]
 801743a:	9308      	str	r3, [sp, #32]
 801743c:	2300      	movs	r3, #0
 801743e:	9307      	str	r3, [sp, #28]
 8017440:	2300      	movs	r3, #0
 8017442:	9306      	str	r3, [sp, #24]
 8017444:	2300      	movs	r3, #0
 8017446:	9305      	str	r3, [sp, #20]
 8017448:	2300      	movs	r3, #0
 801744a:	9304      	str	r3, [sp, #16]
 801744c:	2300      	movs	r3, #0
 801744e:	9303      	str	r3, [sp, #12]
 8017450:	2305      	movs	r3, #5
 8017452:	9302      	str	r3, [sp, #8]
 8017454:	2300      	movs	r3, #0
 8017456:	9301      	str	r3, [sp, #4]
 8017458:	2396      	movs	r3, #150	; 0x96
 801745a:	015b      	lsls	r3, r3, #5
 801745c:	9300      	str	r3, [sp, #0]
 801745e:	2300      	movs	r3, #0
 8017460:	2200      	movs	r2, #0
 8017462:	2000      	movs	r0, #0
 8017464:	f7ff f914 	bl	8016690 <SX1276SetTxConfig>

    SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) & RF_PACKETCONFIG2_DATAMODE_MASK ) );
 8017468:	2031      	movs	r0, #49	; 0x31
 801746a:	f000 f94d 	bl	8017708 <SX1276Read>
 801746e:	0003      	movs	r3, r0
 8017470:	001a      	movs	r2, r3
 8017472:	2340      	movs	r3, #64	; 0x40
 8017474:	439a      	bics	r2, r3
 8017476:	0013      	movs	r3, r2
 8017478:	b2db      	uxtb	r3, r3
 801747a:	0019      	movs	r1, r3
 801747c:	2031      	movs	r0, #49	; 0x31
 801747e:	f000 f92f 	bl	80176e0 <SX1276Write>
    // Disable radio interrupts
    SX1276Write( REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_11 | RF_DIOMAPPING1_DIO1_11 );
 8017482:	21f0      	movs	r1, #240	; 0xf0
 8017484:	2040      	movs	r0, #64	; 0x40
 8017486:	f000 f92b 	bl	80176e0 <SX1276Write>
    SX1276Write( REG_DIOMAPPING2, RF_DIOMAPPING2_DIO4_10 | RF_DIOMAPPING2_DIO5_10 );
 801748a:	21a0      	movs	r1, #160	; 0xa0
 801748c:	2041      	movs	r0, #65	; 0x41
 801748e:	f000 f927 	bl	80176e0 <SX1276Write>

    TimerSetValue( &TxTimeoutTimer, timeout );
 8017492:	68fa      	ldr	r2, [r7, #12]
 8017494:	4b09      	ldr	r3, [pc, #36]	; (80174bc <SX1276SetTxContinuousWave+0xbc>)
 8017496:	0011      	movs	r1, r2
 8017498:	0018      	movs	r0, r3
 801749a:	f7fe f80f 	bl	80154bc <TimerSetValue>

    SX1276.Settings.State = RF_TX_RUNNING;
 801749e:	4b08      	ldr	r3, [pc, #32]	; (80174c0 <SX1276SetTxContinuousWave+0xc0>)
 80174a0:	2202      	movs	r2, #2
 80174a2:	711a      	strb	r2, [r3, #4]
    TimerStart( &TxTimeoutTimer );
 80174a4:	4b05      	ldr	r3, [pc, #20]	; (80174bc <SX1276SetTxContinuousWave+0xbc>)
 80174a6:	0018      	movs	r0, r3
 80174a8:	f7fe f834 	bl	8015514 <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 80174ac:	2003      	movs	r0, #3
 80174ae:	f000 f86f 	bl	8017590 <SX1276SetOpMode>
}
 80174b2:	46c0      	nop			; (mov r8, r8)
 80174b4:	46bd      	mov	sp, r7
 80174b6:	b004      	add	sp, #16
 80174b8:	bd80      	pop	{r7, pc}
 80174ba:	46c0      	nop			; (mov r8, r8)
 80174bc:	20001588 	.word	0x20001588
 80174c0:	200015b8 	.word	0x200015b8

080174c4 <SX1276ReadRssi>:

int16_t SX1276ReadRssi( RadioModems_t modem )
{
 80174c4:	b580      	push	{r7, lr}
 80174c6:	b084      	sub	sp, #16
 80174c8:	af00      	add	r7, sp, #0
 80174ca:	0002      	movs	r2, r0
 80174cc:	1dfb      	adds	r3, r7, #7
 80174ce:	701a      	strb	r2, [r3, #0]
	LOG_INFO_SX1276((">> SX1276ReadRssi\r\n"));

    int16_t rssi = 0;
 80174d0:	230e      	movs	r3, #14
 80174d2:	18fb      	adds	r3, r7, r3
 80174d4:	2200      	movs	r2, #0
 80174d6:	801a      	strh	r2, [r3, #0]

    switch( modem )
 80174d8:	1dfb      	adds	r3, r7, #7
 80174da:	781b      	ldrb	r3, [r3, #0]
 80174dc:	2b00      	cmp	r3, #0
 80174de:	d002      	beq.n	80174e6 <SX1276ReadRssi+0x22>
 80174e0:	2b01      	cmp	r3, #1
 80174e2:	d00d      	beq.n	8017500 <SX1276ReadRssi+0x3c>
 80174e4:	e027      	b.n	8017536 <SX1276ReadRssi+0x72>
    {
    case MODEM_FSK:
        rssi = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 80174e6:	2011      	movs	r0, #17
 80174e8:	f000 f90e 	bl	8017708 <SX1276Read>
 80174ec:	0003      	movs	r3, r0
 80174ee:	085b      	lsrs	r3, r3, #1
 80174f0:	b2db      	uxtb	r3, r3
 80174f2:	b29b      	uxth	r3, r3
 80174f4:	425b      	negs	r3, r3
 80174f6:	b29a      	uxth	r2, r3
 80174f8:	230e      	movs	r3, #14
 80174fa:	18fb      	adds	r3, r7, r3
 80174fc:	801a      	strh	r2, [r3, #0]
        break;
 80174fe:	e020      	b.n	8017542 <SX1276ReadRssi+0x7e>
    case MODEM_LORA:
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8017500:	4b14      	ldr	r3, [pc, #80]	; (8017554 <SX1276ReadRssi+0x90>)
 8017502:	689b      	ldr	r3, [r3, #8]
 8017504:	4a14      	ldr	r2, [pc, #80]	; (8017558 <SX1276ReadRssi+0x94>)
 8017506:	4293      	cmp	r3, r2
 8017508:	d90a      	bls.n	8017520 <SX1276ReadRssi+0x5c>
        {
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
 801750a:	201b      	movs	r0, #27
 801750c:	f000 f8fc 	bl	8017708 <SX1276Read>
 8017510:	0003      	movs	r3, r0
 8017512:	b29b      	uxth	r3, r3
 8017514:	3b9d      	subs	r3, #157	; 0x9d
 8017516:	b29a      	uxth	r2, r3
 8017518:	230e      	movs	r3, #14
 801751a:	18fb      	adds	r3, r7, r3
 801751c:	801a      	strh	r2, [r3, #0]
        }
        else
        {
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
        }
        break;
 801751e:	e010      	b.n	8017542 <SX1276ReadRssi+0x7e>
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
 8017520:	201b      	movs	r0, #27
 8017522:	f000 f8f1 	bl	8017708 <SX1276Read>
 8017526:	0003      	movs	r3, r0
 8017528:	b29b      	uxth	r3, r3
 801752a:	3ba4      	subs	r3, #164	; 0xa4
 801752c:	b29a      	uxth	r2, r3
 801752e:	230e      	movs	r3, #14
 8017530:	18fb      	adds	r3, r7, r3
 8017532:	801a      	strh	r2, [r3, #0]
        break;
 8017534:	e005      	b.n	8017542 <SX1276ReadRssi+0x7e>
    default:
        rssi = -1;
 8017536:	230e      	movs	r3, #14
 8017538:	18fb      	adds	r3, r7, r3
 801753a:	2201      	movs	r2, #1
 801753c:	4252      	negs	r2, r2
 801753e:	801a      	strh	r2, [r3, #0]
        break;
 8017540:	46c0      	nop			; (mov r8, r8)
    }
    return rssi;
 8017542:	230e      	movs	r3, #14
 8017544:	18fb      	adds	r3, r7, r3
 8017546:	2200      	movs	r2, #0
 8017548:	5e9b      	ldrsh	r3, [r3, r2]
}
 801754a:	0018      	movs	r0, r3
 801754c:	46bd      	mov	sp, r7
 801754e:	b004      	add	sp, #16
 8017550:	bd80      	pop	{r7, pc}
 8017552:	46c0      	nop			; (mov r8, r8)
 8017554:	200015b8 	.word	0x200015b8
 8017558:	1f4add40 	.word	0x1f4add40

0801755c <SX1276Reset>:

void SX1276Reset( void )
{
 801755c:	b580      	push	{r7, lr}
 801755e:	af00      	add	r7, sp, #0
	LOG_INFO_SX1276((">> SX1276Reset\r\n"));

	gpio_configure(ITSDK_SX1276_RESET_BANK,ITSDK_SX1276_RESET_PIN,GPIO_OUTPUT_PP);
 8017560:	2200      	movs	r2, #0
 8017562:	2101      	movs	r1, #1
 8017564:	2002      	movs	r0, #2
 8017566:	f005 fd93 	bl	801d090 <gpio_configure>
	gpio_reset(ITSDK_SX1276_RESET_BANK, ITSDK_SX1276_RESET_PIN);
 801756a:	2101      	movs	r1, #1
 801756c:	2002      	movs	r0, #2
 801756e:	f005 ffaf 	bl	801d4d0 <gpio_reset>
	itsdk_delayMs(2);
 8017572:	2002      	movs	r0, #2
 8017574:	f006 f8e6 	bl	801d744 <itsdk_delayMs>
	gpio_configure(ITSDK_SX1276_RESET_BANK,ITSDK_SX1276_RESET_PIN,GPIO_INPUT);
 8017578:	2204      	movs	r2, #4
 801757a:	2101      	movs	r1, #1
 801757c:	2002      	movs	r0, #2
 801757e:	f005 fd87 	bl	801d090 <gpio_configure>
	itsdk_delayMs(10);
 8017582:	200a      	movs	r0, #10
 8017584:	f006 f8de 	bl	801d744 <itsdk_delayMs>
}
 8017588:	46c0      	nop			; (mov r8, r8)
 801758a:	46bd      	mov	sp, r7
 801758c:	bd80      	pop	{r7, pc}
	...

08017590 <SX1276SetOpMode>:

void SX1276SetOpMode( uint8_t opMode )
{
 8017590:	b580      	push	{r7, lr}
 8017592:	b082      	sub	sp, #8
 8017594:	af00      	add	r7, sp, #0
 8017596:	0002      	movs	r2, r0
 8017598:	1dfb      	adds	r3, r7, #7
 801759a:	701a      	strb	r2, [r3, #0]
		LOG_INFO_SX1276(("Others)\r\n"));
		break;
	}
#endif

    if( opMode == RF_OPMODE_SLEEP )
 801759c:	1dfb      	adds	r3, r7, #7
 801759e:	781b      	ldrb	r3, [r3, #0]
 80175a0:	2b00      	cmp	r3, #0
 80175a2:	d11c      	bne.n	80175de <SX1276SetOpMode+0x4e>
    {
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 80175a4:	2001      	movs	r0, #1
 80175a6:	f000 f8af 	bl	8017708 <SX1276Read>
 80175aa:	0003      	movs	r3, r0
 80175ac:	b25b      	sxtb	r3, r3
 80175ae:	2207      	movs	r2, #7
 80175b0:	4393      	bics	r3, r2
 80175b2:	b25a      	sxtb	r2, r3
 80175b4:	1dfb      	adds	r3, r7, #7
 80175b6:	781b      	ldrb	r3, [r3, #0]
 80175b8:	b25b      	sxtb	r3, r3
 80175ba:	4313      	orrs	r3, r2
 80175bc:	b25b      	sxtb	r3, r3
 80175be:	b2db      	uxtb	r3, r3
 80175c0:	0019      	movs	r1, r3
 80175c2:	2001      	movs	r0, #1
 80175c4:	f000 f88c 	bl	80176e0 <SX1276Write>
      
      LoRaBoardCallbacks->SX1276BoardSetAntSwLowPower( true );
 80175c8:	4b18      	ldr	r3, [pc, #96]	; (801762c <SX1276SetOpMode+0x9c>)
 80175ca:	681b      	ldr	r3, [r3, #0]
 80175cc:	691b      	ldr	r3, [r3, #16]
 80175ce:	2001      	movs	r0, #1
 80175d0:	4798      	blx	r3
      
      LoRaBoardCallbacks->SX1276BoardSetXO( RESET ); 
 80175d2:	4b16      	ldr	r3, [pc, #88]	; (801762c <SX1276SetOpMode+0x9c>)
 80175d4:	681b      	ldr	r3, [r3, #0]
 80175d6:	681b      	ldr	r3, [r3, #0]
 80175d8:	2000      	movs	r0, #0
 80175da:	4798      	blx	r3
      
      LoRaBoardCallbacks->SX1276BoardSetAntSw( opMode );
      
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
    }
}
 80175dc:	e022      	b.n	8017624 <SX1276SetOpMode+0x94>
      LoRaBoardCallbacks->SX1276BoardSetXO( SET ); 
 80175de:	4b13      	ldr	r3, [pc, #76]	; (801762c <SX1276SetOpMode+0x9c>)
 80175e0:	681b      	ldr	r3, [r3, #0]
 80175e2:	681b      	ldr	r3, [r3, #0]
 80175e4:	2001      	movs	r0, #1
 80175e6:	4798      	blx	r3
      LoRaBoardCallbacks->SX1276BoardSetAntSwLowPower( false );
 80175e8:	4b10      	ldr	r3, [pc, #64]	; (801762c <SX1276SetOpMode+0x9c>)
 80175ea:	681b      	ldr	r3, [r3, #0]
 80175ec:	691b      	ldr	r3, [r3, #16]
 80175ee:	2000      	movs	r0, #0
 80175f0:	4798      	blx	r3
      LoRaBoardCallbacks->SX1276BoardSetAntSw( opMode );
 80175f2:	4b0e      	ldr	r3, [pc, #56]	; (801762c <SX1276SetOpMode+0x9c>)
 80175f4:	681b      	ldr	r3, [r3, #0]
 80175f6:	695b      	ldr	r3, [r3, #20]
 80175f8:	1dfa      	adds	r2, r7, #7
 80175fa:	7812      	ldrb	r2, [r2, #0]
 80175fc:	0010      	movs	r0, r2
 80175fe:	4798      	blx	r3
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 8017600:	2001      	movs	r0, #1
 8017602:	f000 f881 	bl	8017708 <SX1276Read>
 8017606:	0003      	movs	r3, r0
 8017608:	b25b      	sxtb	r3, r3
 801760a:	2207      	movs	r2, #7
 801760c:	4393      	bics	r3, r2
 801760e:	b25a      	sxtb	r2, r3
 8017610:	1dfb      	adds	r3, r7, #7
 8017612:	781b      	ldrb	r3, [r3, #0]
 8017614:	b25b      	sxtb	r3, r3
 8017616:	4313      	orrs	r3, r2
 8017618:	b25b      	sxtb	r3, r3
 801761a:	b2db      	uxtb	r3, r3
 801761c:	0019      	movs	r1, r3
 801761e:	2001      	movs	r0, #1
 8017620:	f000 f85e 	bl	80176e0 <SX1276Write>
}
 8017624:	46c0      	nop			; (mov r8, r8)
 8017626:	46bd      	mov	sp, r7
 8017628:	b002      	add	sp, #8
 801762a:	bd80      	pop	{r7, pc}
 801762c:	200011a4 	.word	0x200011a4

08017630 <SX1276SetModem>:

void SX1276SetModem( RadioModems_t modem )
{
 8017630:	b580      	push	{r7, lr}
 8017632:	b082      	sub	sp, #8
 8017634:	af00      	add	r7, sp, #0
 8017636:	0002      	movs	r2, r0
 8017638:	1dfb      	adds	r3, r7, #7
 801763a:	701a      	strb	r2, [r3, #0]
	LOG_INFO_SX1276((">> SX1276SetModem (%s)\r\n",((modem==MODEM_LORA)?"LORA":"FSK")));

    if( ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_ON ) != 0 )
 801763c:	2001      	movs	r0, #1
 801763e:	f000 f863 	bl	8017708 <SX1276Read>
 8017642:	0003      	movs	r3, r0
 8017644:	b25b      	sxtb	r3, r3
 8017646:	2b00      	cmp	r3, #0
 8017648:	da03      	bge.n	8017652 <SX1276SetModem+0x22>
    {
        SX1276.Settings.Modem = MODEM_LORA;
 801764a:	4b24      	ldr	r3, [pc, #144]	; (80176dc <SX1276SetModem+0xac>)
 801764c:	2201      	movs	r2, #1
 801764e:	715a      	strb	r2, [r3, #5]
 8017650:	e002      	b.n	8017658 <SX1276SetModem+0x28>
    }
    else
    {
        SX1276.Settings.Modem = MODEM_FSK;
 8017652:	4b22      	ldr	r3, [pc, #136]	; (80176dc <SX1276SetModem+0xac>)
 8017654:	2200      	movs	r2, #0
 8017656:	715a      	strb	r2, [r3, #5]
    }

    if( SX1276.Settings.Modem == modem )
 8017658:	4b20      	ldr	r3, [pc, #128]	; (80176dc <SX1276SetModem+0xac>)
 801765a:	795b      	ldrb	r3, [r3, #5]
 801765c:	1dfa      	adds	r2, r7, #7
 801765e:	7812      	ldrb	r2, [r2, #0]
 8017660:	429a      	cmp	r2, r3
 8017662:	d037      	beq.n	80176d4 <SX1276SetModem+0xa4>
    {
        return;
    }

    SX1276.Settings.Modem = modem;
 8017664:	4b1d      	ldr	r3, [pc, #116]	; (80176dc <SX1276SetModem+0xac>)
 8017666:	1dfa      	adds	r2, r7, #7
 8017668:	7812      	ldrb	r2, [r2, #0]
 801766a:	715a      	strb	r2, [r3, #5]
    switch( SX1276.Settings.Modem )
 801766c:	4b1b      	ldr	r3, [pc, #108]	; (80176dc <SX1276SetModem+0xac>)
 801766e:	795b      	ldrb	r3, [r3, #5]
 8017670:	2b01      	cmp	r3, #1
 8017672:	d016      	beq.n	80176a2 <SX1276SetModem+0x72>
    {
    default:
    case MODEM_FSK:
        SX1276SetSleep( );
 8017674:	f7ff fc5e 	bl	8016f34 <SX1276SetSleep>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_OFF );
 8017678:	2001      	movs	r0, #1
 801767a:	f000 f845 	bl	8017708 <SX1276Read>
 801767e:	0003      	movs	r3, r0
 8017680:	001a      	movs	r2, r3
 8017682:	237f      	movs	r3, #127	; 0x7f
 8017684:	4013      	ands	r3, r2
 8017686:	b2db      	uxtb	r3, r3
 8017688:	0019      	movs	r1, r3
 801768a:	2001      	movs	r0, #1
 801768c:	f000 f828 	bl	80176e0 <SX1276Write>

        SX1276Write( REG_DIOMAPPING1, 0x00 );
 8017690:	2100      	movs	r1, #0
 8017692:	2040      	movs	r0, #64	; 0x40
 8017694:	f000 f824 	bl	80176e0 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x30 ); // DIO5=ModeReady
 8017698:	2130      	movs	r1, #48	; 0x30
 801769a:	2041      	movs	r0, #65	; 0x41
 801769c:	f000 f820 	bl	80176e0 <SX1276Write>
        break;
 80176a0:	e019      	b.n	80176d6 <SX1276SetModem+0xa6>
    case MODEM_LORA:
        SX1276SetSleep( );
 80176a2:	f7ff fc47 	bl	8016f34 <SX1276SetSleep>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_ON );
 80176a6:	2001      	movs	r0, #1
 80176a8:	f000 f82e 	bl	8017708 <SX1276Read>
 80176ac:	0003      	movs	r3, r0
 80176ae:	001a      	movs	r2, r3
 80176b0:	2380      	movs	r3, #128	; 0x80
 80176b2:	425b      	negs	r3, r3
 80176b4:	4313      	orrs	r3, r2
 80176b6:	b2db      	uxtb	r3, r3
 80176b8:	0019      	movs	r1, r3
 80176ba:	2001      	movs	r0, #1
 80176bc:	f000 f810 	bl	80176e0 <SX1276Write>

        SX1276Write( REG_DIOMAPPING1, 0x00 );
 80176c0:	2100      	movs	r1, #0
 80176c2:	2040      	movs	r0, #64	; 0x40
 80176c4:	f000 f80c 	bl	80176e0 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x00 );
 80176c8:	2100      	movs	r1, #0
 80176ca:	2041      	movs	r0, #65	; 0x41
 80176cc:	f000 f808 	bl	80176e0 <SX1276Write>
        break;
 80176d0:	46c0      	nop			; (mov r8, r8)
 80176d2:	e000      	b.n	80176d6 <SX1276SetModem+0xa6>
        return;
 80176d4:	46c0      	nop			; (mov r8, r8)
    }
}
 80176d6:	46bd      	mov	sp, r7
 80176d8:	b002      	add	sp, #8
 80176da:	bd80      	pop	{r7, pc}
 80176dc:	200015b8 	.word	0x200015b8

080176e0 <SX1276Write>:

void SX1276Write( uint16_t addr, uint8_t data )
{
 80176e0:	b580      	push	{r7, lr}
 80176e2:	b082      	sub	sp, #8
 80176e4:	af00      	add	r7, sp, #0
 80176e6:	0002      	movs	r2, r0
 80176e8:	1dbb      	adds	r3, r7, #6
 80176ea:	801a      	strh	r2, [r3, #0]
 80176ec:	1d7b      	adds	r3, r7, #5
 80176ee:	1c0a      	adds	r2, r1, #0
 80176f0:	701a      	strb	r2, [r3, #0]
	//LOG_INFO_SX1276((">> SX1276Write\r\n"));

    SX1276WriteBuffer( addr, &data, 1 );
 80176f2:	1d79      	adds	r1, r7, #5
 80176f4:	1dbb      	adds	r3, r7, #6
 80176f6:	881b      	ldrh	r3, [r3, #0]
 80176f8:	2201      	movs	r2, #1
 80176fa:	0018      	movs	r0, r3
 80176fc:	f000 f818 	bl	8017730 <SX1276WriteBuffer>
}
 8017700:	46c0      	nop			; (mov r8, r8)
 8017702:	46bd      	mov	sp, r7
 8017704:	b002      	add	sp, #8
 8017706:	bd80      	pop	{r7, pc}

08017708 <SX1276Read>:

uint8_t SX1276Read( uint16_t addr )
{
 8017708:	b590      	push	{r4, r7, lr}
 801770a:	b085      	sub	sp, #20
 801770c:	af00      	add	r7, sp, #0
 801770e:	0002      	movs	r2, r0
 8017710:	1dbb      	adds	r3, r7, #6
 8017712:	801a      	strh	r2, [r3, #0]
	//LOG_INFO_SX1276((">> SX1276Read\r\n"));

    uint8_t data;
    SX1276ReadBuffer( addr, &data, 1 );
 8017714:	240f      	movs	r4, #15
 8017716:	1939      	adds	r1, r7, r4
 8017718:	1dbb      	adds	r3, r7, #6
 801771a:	881b      	ldrh	r3, [r3, #0]
 801771c:	2201      	movs	r2, #1
 801771e:	0018      	movs	r0, r3
 8017720:	f000 f854 	bl	80177cc <SX1276ReadBuffer>
    return data;
 8017724:	193b      	adds	r3, r7, r4
 8017726:	781b      	ldrb	r3, [r3, #0]
}
 8017728:	0018      	movs	r0, r3
 801772a:	46bd      	mov	sp, r7
 801772c:	b005      	add	sp, #20
 801772e:	bd90      	pop	{r4, r7, pc}

08017730 <SX1276WriteBuffer>:

void SX1276WriteBuffer( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8017730:	b590      	push	{r4, r7, lr}
 8017732:	b085      	sub	sp, #20
 8017734:	af00      	add	r7, sp, #0
 8017736:	6039      	str	r1, [r7, #0]
 8017738:	0011      	movs	r1, r2
 801773a:	1dbb      	adds	r3, r7, #6
 801773c:	1c02      	adds	r2, r0, #0
 801773e:	801a      	strh	r2, [r3, #0]
 8017740:	1d7b      	adds	r3, r7, #5
 8017742:	1c0a      	adds	r2, r1, #0
 8017744:	701a      	strb	r2, [r3, #0]
	//LOG_INFO_SX1276((">> SX1276WriteBuffer\r\n"));

    uint8_t i;

    //NSS = 0;
	gpio_reset(ITSDK_SX1276_NSS_BANK, ITSDK_SX1276_NSS_PIN);
 8017746:	2380      	movs	r3, #128	; 0x80
 8017748:	021b      	lsls	r3, r3, #8
 801774a:	0019      	movs	r1, r3
 801774c:	2000      	movs	r0, #0
 801774e:	f005 febf 	bl	801d4d0 <gpio_reset>

	uint16_t tx = addr | 0x80;
 8017752:	1dbb      	adds	r3, r7, #6
 8017754:	881b      	ldrh	r3, [r3, #0]
 8017756:	2280      	movs	r2, #128	; 0x80
 8017758:	4313      	orrs	r3, r2
 801775a:	b29a      	uxth	r2, r3
 801775c:	210c      	movs	r1, #12
 801775e:	187b      	adds	r3, r7, r1
 8017760:	801a      	strh	r2, [r3, #0]
	uint16_t rx;
	spi_rwRegister(&ITSDK_SX1276_SPI,(uint8_t*)&tx,(uint8_t*)&rx,1);
 8017762:	230a      	movs	r3, #10
 8017764:	18fa      	adds	r2, r7, r3
 8017766:	1879      	adds	r1, r7, r1
 8017768:	4817      	ldr	r0, [pc, #92]	; (80177c8 <SX1276WriteBuffer+0x98>)
 801776a:	2301      	movs	r3, #1
 801776c:	f006 fcea 	bl	801e144 <spi_rwRegister>
    for( i = 0; i < size; i++ )
 8017770:	230f      	movs	r3, #15
 8017772:	18fb      	adds	r3, r7, r3
 8017774:	2200      	movs	r2, #0
 8017776:	701a      	strb	r2, [r3, #0]
 8017778:	e015      	b.n	80177a6 <SX1276WriteBuffer+0x76>
    {
    	tx = buffer[i];
 801777a:	240f      	movs	r4, #15
 801777c:	193b      	adds	r3, r7, r4
 801777e:	781b      	ldrb	r3, [r3, #0]
 8017780:	683a      	ldr	r2, [r7, #0]
 8017782:	18d3      	adds	r3, r2, r3
 8017784:	781b      	ldrb	r3, [r3, #0]
 8017786:	b29a      	uxth	r2, r3
 8017788:	210c      	movs	r1, #12
 801778a:	187b      	adds	r3, r7, r1
 801778c:	801a      	strh	r2, [r3, #0]
    	spi_rwRegister(&ITSDK_SX1276_SPI,(uint8_t*)&tx,(uint8_t*)&rx,1);
 801778e:	230a      	movs	r3, #10
 8017790:	18fa      	adds	r2, r7, r3
 8017792:	1879      	adds	r1, r7, r1
 8017794:	480c      	ldr	r0, [pc, #48]	; (80177c8 <SX1276WriteBuffer+0x98>)
 8017796:	2301      	movs	r3, #1
 8017798:	f006 fcd4 	bl	801e144 <spi_rwRegister>
    for( i = 0; i < size; i++ )
 801779c:	193b      	adds	r3, r7, r4
 801779e:	781a      	ldrb	r2, [r3, #0]
 80177a0:	193b      	adds	r3, r7, r4
 80177a2:	3201      	adds	r2, #1
 80177a4:	701a      	strb	r2, [r3, #0]
 80177a6:	230f      	movs	r3, #15
 80177a8:	18fa      	adds	r2, r7, r3
 80177aa:	1d7b      	adds	r3, r7, #5
 80177ac:	7812      	ldrb	r2, [r2, #0]
 80177ae:	781b      	ldrb	r3, [r3, #0]
 80177b0:	429a      	cmp	r2, r3
 80177b2:	d3e2      	bcc.n	801777a <SX1276WriteBuffer+0x4a>
    }

    //NSS = 1;
	gpio_set(ITSDK_SX1276_NSS_BANK, ITSDK_SX1276_NSS_PIN);
 80177b4:	2380      	movs	r3, #128	; 0x80
 80177b6:	021b      	lsls	r3, r3, #8
 80177b8:	0019      	movs	r1, r3
 80177ba:	2000      	movs	r0, #0
 80177bc:	f005 fe70 	bl	801d4a0 <gpio_set>
}
 80177c0:	46c0      	nop			; (mov r8, r8)
 80177c2:	46bd      	mov	sp, r7
 80177c4:	b005      	add	sp, #20
 80177c6:	bd90      	pop	{r4, r7, pc}
 80177c8:	20001458 	.word	0x20001458

080177cc <SX1276ReadBuffer>:

void SX1276ReadBuffer( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 80177cc:	b590      	push	{r4, r7, lr}
 80177ce:	b085      	sub	sp, #20
 80177d0:	af00      	add	r7, sp, #0
 80177d2:	6039      	str	r1, [r7, #0]
 80177d4:	0011      	movs	r1, r2
 80177d6:	1dbb      	adds	r3, r7, #6
 80177d8:	1c02      	adds	r2, r0, #0
 80177da:	801a      	strh	r2, [r3, #0]
 80177dc:	1d7b      	adds	r3, r7, #5
 80177de:	1c0a      	adds	r2, r1, #0
 80177e0:	701a      	strb	r2, [r3, #0]
	//LOG_INFO_SX1276((">> SX1276ReadBuffer\r\n"));

    uint8_t i;

    //NSS = 0;
	gpio_reset(ITSDK_SX1276_NSS_BANK, ITSDK_SX1276_NSS_PIN);
 80177e2:	2380      	movs	r3, #128	; 0x80
 80177e4:	021b      	lsls	r3, r3, #8
 80177e6:	0019      	movs	r1, r3
 80177e8:	2000      	movs	r0, #0
 80177ea:	f005 fe71 	bl	801d4d0 <gpio_reset>

	uint16_t tx = addr & 0x7f;
 80177ee:	1dbb      	adds	r3, r7, #6
 80177f0:	881b      	ldrh	r3, [r3, #0]
 80177f2:	227f      	movs	r2, #127	; 0x7f
 80177f4:	4013      	ands	r3, r2
 80177f6:	b29a      	uxth	r2, r3
 80177f8:	210c      	movs	r1, #12
 80177fa:	187b      	adds	r3, r7, r1
 80177fc:	801a      	strh	r2, [r3, #0]
	uint16_t rx;
	spi_rwRegister(&ITSDK_SX1276_SPI,(uint8_t*)&tx,(uint8_t*)&rx,1);
 80177fe:	230a      	movs	r3, #10
 8017800:	18fa      	adds	r2, r7, r3
 8017802:	000c      	movs	r4, r1
 8017804:	1879      	adds	r1, r7, r1
 8017806:	481a      	ldr	r0, [pc, #104]	; (8017870 <SX1276ReadBuffer+0xa4>)
 8017808:	2301      	movs	r3, #1
 801780a:	f006 fc9b 	bl	801e144 <spi_rwRegister>

	tx = 0;
 801780e:	0021      	movs	r1, r4
 8017810:	187b      	adds	r3, r7, r1
 8017812:	2200      	movs	r2, #0
 8017814:	801a      	strh	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 8017816:	230f      	movs	r3, #15
 8017818:	18fb      	adds	r3, r7, r3
 801781a:	2200      	movs	r2, #0
 801781c:	701a      	strb	r2, [r3, #0]
 801781e:	e015      	b.n	801784c <SX1276ReadBuffer+0x80>
    {
    	spi_rwRegister(&ITSDK_SX1276_SPI,(uint8_t*)&tx,(uint8_t*)&rx,1);
 8017820:	240a      	movs	r4, #10
 8017822:	193a      	adds	r2, r7, r4
 8017824:	230c      	movs	r3, #12
 8017826:	18f9      	adds	r1, r7, r3
 8017828:	4811      	ldr	r0, [pc, #68]	; (8017870 <SX1276ReadBuffer+0xa4>)
 801782a:	2301      	movs	r3, #1
 801782c:	f006 fc8a 	bl	801e144 <spi_rwRegister>
    	buffer[i] = rx;
 8017830:	193b      	adds	r3, r7, r4
 8017832:	8819      	ldrh	r1, [r3, #0]
 8017834:	200f      	movs	r0, #15
 8017836:	183b      	adds	r3, r7, r0
 8017838:	781b      	ldrb	r3, [r3, #0]
 801783a:	683a      	ldr	r2, [r7, #0]
 801783c:	18d3      	adds	r3, r2, r3
 801783e:	b2ca      	uxtb	r2, r1
 8017840:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 8017842:	183b      	adds	r3, r7, r0
 8017844:	781a      	ldrb	r2, [r3, #0]
 8017846:	183b      	adds	r3, r7, r0
 8017848:	3201      	adds	r2, #1
 801784a:	701a      	strb	r2, [r3, #0]
 801784c:	230f      	movs	r3, #15
 801784e:	18fa      	adds	r2, r7, r3
 8017850:	1d7b      	adds	r3, r7, #5
 8017852:	7812      	ldrb	r2, [r2, #0]
 8017854:	781b      	ldrb	r3, [r3, #0]
 8017856:	429a      	cmp	r2, r3
 8017858:	d3e2      	bcc.n	8017820 <SX1276ReadBuffer+0x54>
    }

    //NSS = 1;
	gpio_set(ITSDK_SX1276_NSS_BANK, ITSDK_SX1276_NSS_PIN);
 801785a:	2380      	movs	r3, #128	; 0x80
 801785c:	021b      	lsls	r3, r3, #8
 801785e:	0019      	movs	r1, r3
 8017860:	2000      	movs	r0, #0
 8017862:	f005 fe1d 	bl	801d4a0 <gpio_set>
}
 8017866:	46c0      	nop			; (mov r8, r8)
 8017868:	46bd      	mov	sp, r7
 801786a:	b005      	add	sp, #20
 801786c:	bd90      	pop	{r4, r7, pc}
 801786e:	46c0      	nop			; (mov r8, r8)
 8017870:	20001458 	.word	0x20001458

08017874 <SX1276WriteFifo>:

void SX1276WriteFifo( uint8_t *buffer, uint8_t size )
{
 8017874:	b580      	push	{r7, lr}
 8017876:	b082      	sub	sp, #8
 8017878:	af00      	add	r7, sp, #0
 801787a:	6078      	str	r0, [r7, #4]
 801787c:	000a      	movs	r2, r1
 801787e:	1cfb      	adds	r3, r7, #3
 8017880:	701a      	strb	r2, [r3, #0]
	//LOG_INFO_SX1276((">> SX1276WriteFifo\r\n"));
    SX1276WriteBuffer( 0, buffer, size );
 8017882:	1cfb      	adds	r3, r7, #3
 8017884:	781a      	ldrb	r2, [r3, #0]
 8017886:	687b      	ldr	r3, [r7, #4]
 8017888:	0019      	movs	r1, r3
 801788a:	2000      	movs	r0, #0
 801788c:	f7ff ff50 	bl	8017730 <SX1276WriteBuffer>
}
 8017890:	46c0      	nop			; (mov r8, r8)
 8017892:	46bd      	mov	sp, r7
 8017894:	b002      	add	sp, #8
 8017896:	bd80      	pop	{r7, pc}

08017898 <SX1276ReadFifo>:

void SX1276ReadFifo( uint8_t *buffer, uint8_t size )
{
 8017898:	b580      	push	{r7, lr}
 801789a:	b082      	sub	sp, #8
 801789c:	af00      	add	r7, sp, #0
 801789e:	6078      	str	r0, [r7, #4]
 80178a0:	000a      	movs	r2, r1
 80178a2:	1cfb      	adds	r3, r7, #3
 80178a4:	701a      	strb	r2, [r3, #0]
	//LOG_INFO_SX1276((">> SX1276ReadFifo\r\n"));
    SX1276ReadBuffer( 0, buffer, size );
 80178a6:	1cfb      	adds	r3, r7, #3
 80178a8:	781a      	ldrb	r2, [r3, #0]
 80178aa:	687b      	ldr	r3, [r7, #4]
 80178ac:	0019      	movs	r1, r3
 80178ae:	2000      	movs	r0, #0
 80178b0:	f7ff ff8c 	bl	80177cc <SX1276ReadBuffer>
}
 80178b4:	46c0      	nop			; (mov r8, r8)
 80178b6:	46bd      	mov	sp, r7
 80178b8:	b002      	add	sp, #8
 80178ba:	bd80      	pop	{r7, pc}

080178bc <SX1276SetMaxPayloadLength>:

void SX1276SetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 80178bc:	b580      	push	{r7, lr}
 80178be:	b082      	sub	sp, #8
 80178c0:	af00      	add	r7, sp, #0
 80178c2:	0002      	movs	r2, r0
 80178c4:	1dfb      	adds	r3, r7, #7
 80178c6:	701a      	strb	r2, [r3, #0]
 80178c8:	1dbb      	adds	r3, r7, #6
 80178ca:	1c0a      	adds	r2, r1, #0
 80178cc:	701a      	strb	r2, [r3, #0]
	LOG_INFO_SX1276((">> SX1276SetMaxPayloadLength\r\n"));
    SX1276SetModem( modem );
 80178ce:	1dfb      	adds	r3, r7, #7
 80178d0:	781b      	ldrb	r3, [r3, #0]
 80178d2:	0018      	movs	r0, r3
 80178d4:	f7ff feac 	bl	8017630 <SX1276SetModem>

    switch( modem )
 80178d8:	1dfb      	adds	r3, r7, #7
 80178da:	781b      	ldrb	r3, [r3, #0]
 80178dc:	2b00      	cmp	r3, #0
 80178de:	d002      	beq.n	80178e6 <SX1276SetMaxPayloadLength+0x2a>
 80178e0:	2b01      	cmp	r3, #1
 80178e2:	d00f      	beq.n	8017904 <SX1276SetMaxPayloadLength+0x48>
        break;
    case MODEM_LORA:
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
        break;
    }
}
 80178e4:	e016      	b.n	8017914 <SX1276SetMaxPayloadLength+0x58>
        if( SX1276.Settings.Fsk.FixLen == false )
 80178e6:	4b0d      	ldr	r3, [pc, #52]	; (801791c <SX1276SetMaxPayloadLength+0x60>)
 80178e8:	2222      	movs	r2, #34	; 0x22
 80178ea:	5c9b      	ldrb	r3, [r3, r2]
 80178ec:	2201      	movs	r2, #1
 80178ee:	4053      	eors	r3, r2
 80178f0:	b2db      	uxtb	r3, r3
 80178f2:	2b00      	cmp	r3, #0
 80178f4:	d00d      	beq.n	8017912 <SX1276SetMaxPayloadLength+0x56>
            SX1276Write( REG_PAYLOADLENGTH, max );
 80178f6:	1dbb      	adds	r3, r7, #6
 80178f8:	781b      	ldrb	r3, [r3, #0]
 80178fa:	0019      	movs	r1, r3
 80178fc:	2032      	movs	r0, #50	; 0x32
 80178fe:	f7ff feef 	bl	80176e0 <SX1276Write>
        break;
 8017902:	e006      	b.n	8017912 <SX1276SetMaxPayloadLength+0x56>
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
 8017904:	1dbb      	adds	r3, r7, #6
 8017906:	781b      	ldrb	r3, [r3, #0]
 8017908:	0019      	movs	r1, r3
 801790a:	2023      	movs	r0, #35	; 0x23
 801790c:	f7ff fee8 	bl	80176e0 <SX1276Write>
        break;
 8017910:	e000      	b.n	8017914 <SX1276SetMaxPayloadLength+0x58>
        break;
 8017912:	46c0      	nop			; (mov r8, r8)
}
 8017914:	46c0      	nop			; (mov r8, r8)
 8017916:	46bd      	mov	sp, r7
 8017918:	b002      	add	sp, #8
 801791a:	bd80      	pop	{r7, pc}
 801791c:	200015b8 	.word	0x200015b8

08017920 <SX1276SetPublicNetwork>:

void SX1276SetPublicNetwork( bool enable )
{
 8017920:	b580      	push	{r7, lr}
 8017922:	b082      	sub	sp, #8
 8017924:	af00      	add	r7, sp, #0
 8017926:	0002      	movs	r2, r0
 8017928:	1dfb      	adds	r3, r7, #7
 801792a:	701a      	strb	r2, [r3, #0]
	LOG_INFO_SX1276((">> SX1276SetPublicNetwork\r\n"));

    SX1276SetModem( MODEM_LORA );
 801792c:	2001      	movs	r0, #1
 801792e:	f7ff fe7f 	bl	8017630 <SX1276SetModem>
    SX1276.Settings.LoRa.PublicNetwork = enable;
 8017932:	4b0b      	ldr	r3, [pc, #44]	; (8017960 <SX1276SetPublicNetwork+0x40>)
 8017934:	1dfa      	adds	r2, r7, #7
 8017936:	215c      	movs	r1, #92	; 0x5c
 8017938:	7812      	ldrb	r2, [r2, #0]
 801793a:	545a      	strb	r2, [r3, r1]
    if( enable == true )
 801793c:	1dfb      	adds	r3, r7, #7
 801793e:	781b      	ldrb	r3, [r3, #0]
 8017940:	2b00      	cmp	r3, #0
 8017942:	d004      	beq.n	801794e <SX1276SetPublicNetwork+0x2e>
    {
        // Change LoRa modem SyncWord
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PUBLIC_SYNCWORD );
 8017944:	2134      	movs	r1, #52	; 0x34
 8017946:	2039      	movs	r0, #57	; 0x39
 8017948:	f7ff feca 	bl	80176e0 <SX1276Write>
    else
    {
        // Change LoRa modem SyncWord
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
    }
}
 801794c:	e003      	b.n	8017956 <SX1276SetPublicNetwork+0x36>
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
 801794e:	2112      	movs	r1, #18
 8017950:	2039      	movs	r0, #57	; 0x39
 8017952:	f7ff fec5 	bl	80176e0 <SX1276Write>
}
 8017956:	46c0      	nop			; (mov r8, r8)
 8017958:	46bd      	mov	sp, r7
 801795a:	b002      	add	sp, #8
 801795c:	bd80      	pop	{r7, pc}
 801795e:	46c0      	nop			; (mov r8, r8)
 8017960:	200015b8 	.word	0x200015b8

08017964 <SX1276GetWakeupTime>:

uint32_t SX1276GetWakeupTime( void )
{
 8017964:	b580      	push	{r7, lr}
 8017966:	af00      	add	r7, sp, #0
	LOG_INFO_SX1276((">> SX1276GetWakeupTime\r\n"));

    return ( uint32_t )LoRaBoardCallbacks->SX1276BoardGetWakeTime( ) + ITSDK_MURATA_WAKEUP_TIME;
 8017968:	4b04      	ldr	r3, [pc, #16]	; (801797c <SX1276GetWakeupTime+0x18>)
 801796a:	681b      	ldr	r3, [r3, #0]
 801796c:	685b      	ldr	r3, [r3, #4]
 801796e:	4798      	blx	r3
 8017970:	0003      	movs	r3, r0
 8017972:	3335      	adds	r3, #53	; 0x35
}
 8017974:	0018      	movs	r0, r3
 8017976:	46bd      	mov	sp, r7
 8017978:	bd80      	pop	{r7, pc}
 801797a:	46c0      	nop			; (mov r8, r8)
 801797c:	200011a4 	.word	0x200011a4

08017980 <SX1276OnTimeoutIrq>:

void SX1276OnTimeoutIrq( void* context )
{
 8017980:	b590      	push	{r4, r7, lr}
 8017982:	b085      	sub	sp, #20
 8017984:	af00      	add	r7, sp, #0
 8017986:	6078      	str	r0, [r7, #4]
	LOG_INFO_SX1276((">> SX1276OnTimeoutIrq\r\n"));

    switch( SX1276.Settings.State )
 8017988:	4b51      	ldr	r3, [pc, #324]	; (8017ad0 <SX1276OnTimeoutIrq+0x150>)
 801798a:	791b      	ldrb	r3, [r3, #4]
 801798c:	2b01      	cmp	r3, #1
 801798e:	d002      	beq.n	8017996 <SX1276OnTimeoutIrq+0x16>
 8017990:	2b02      	cmp	r3, #2
 8017992:	d045      	beq.n	8017a20 <SX1276OnTimeoutIrq+0xa0>
        {
            RadioEvents->TxTimeout( );
        }
        break;
    default:
        break;
 8017994:	e098      	b.n	8017ac8 <SX1276OnTimeoutIrq+0x148>
        if( SX1276.Settings.Modem == MODEM_FSK )
 8017996:	4b4e      	ldr	r3, [pc, #312]	; (8017ad0 <SX1276OnTimeoutIrq+0x150>)
 8017998:	795b      	ldrb	r3, [r3, #5]
 801799a:	2b00      	cmp	r3, #0
 801799c:	d132      	bne.n	8017a04 <SX1276OnTimeoutIrq+0x84>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 801799e:	4b4c      	ldr	r3, [pc, #304]	; (8017ad0 <SX1276OnTimeoutIrq+0x150>)
 80179a0:	2230      	movs	r2, #48	; 0x30
 80179a2:	2100      	movs	r1, #0
 80179a4:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 80179a6:	4b4a      	ldr	r3, [pc, #296]	; (8017ad0 <SX1276OnTimeoutIrq+0x150>)
 80179a8:	2231      	movs	r2, #49	; 0x31
 80179aa:	2100      	movs	r1, #0
 80179ac:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 80179ae:	4b48      	ldr	r3, [pc, #288]	; (8017ad0 <SX1276OnTimeoutIrq+0x150>)
 80179b0:	2200      	movs	r2, #0
 80179b2:	879a      	strh	r2, [r3, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = 0;
 80179b4:	4b46      	ldr	r3, [pc, #280]	; (8017ad0 <SX1276OnTimeoutIrq+0x150>)
 80179b6:	2200      	movs	r2, #0
 80179b8:	875a      	strh	r2, [r3, #58]	; 0x3a
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 80179ba:	210b      	movs	r1, #11
 80179bc:	203e      	movs	r0, #62	; 0x3e
 80179be:	f7ff fe8f 	bl	80176e0 <SX1276Write>
            SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 80179c2:	2110      	movs	r1, #16
 80179c4:	203f      	movs	r0, #63	; 0x3f
 80179c6:	f7ff fe8b 	bl	80176e0 <SX1276Write>
            if( SX1276.Settings.Fsk.RxContinuous == true )
 80179ca:	4b41      	ldr	r3, [pc, #260]	; (8017ad0 <SX1276OnTimeoutIrq+0x150>)
 80179cc:	2226      	movs	r2, #38	; 0x26
 80179ce:	5c9b      	ldrb	r3, [r3, r2]
 80179d0:	2b00      	cmp	r3, #0
 80179d2:	d010      	beq.n	80179f6 <SX1276OnTimeoutIrq+0x76>
                SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 80179d4:	200d      	movs	r0, #13
 80179d6:	f7ff fe97 	bl	8017708 <SX1276Read>
 80179da:	0003      	movs	r3, r0
 80179dc:	001a      	movs	r2, r3
 80179de:	2340      	movs	r3, #64	; 0x40
 80179e0:	4313      	orrs	r3, r2
 80179e2:	b2db      	uxtb	r3, r3
 80179e4:	0019      	movs	r1, r3
 80179e6:	200d      	movs	r0, #13
 80179e8:	f7ff fe7a 	bl	80176e0 <SX1276Write>
                TimerStart( &RxTimeoutSyncWord );
 80179ec:	4b39      	ldr	r3, [pc, #228]	; (8017ad4 <SX1276OnTimeoutIrq+0x154>)
 80179ee:	0018      	movs	r0, r3
 80179f0:	f7fd fd90 	bl	8015514 <TimerStart>
 80179f4:	e006      	b.n	8017a04 <SX1276OnTimeoutIrq+0x84>
                SX1276.Settings.State = RF_IDLE;
 80179f6:	4b36      	ldr	r3, [pc, #216]	; (8017ad0 <SX1276OnTimeoutIrq+0x150>)
 80179f8:	2200      	movs	r2, #0
 80179fa:	711a      	strb	r2, [r3, #4]
                TimerStop( &RxTimeoutSyncWord );
 80179fc:	4b35      	ldr	r3, [pc, #212]	; (8017ad4 <SX1276OnTimeoutIrq+0x154>)
 80179fe:	0018      	movs	r0, r3
 8017a00:	f7fd fdde 	bl	80155c0 <TimerStop>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8017a04:	4b34      	ldr	r3, [pc, #208]	; (8017ad8 <SX1276OnTimeoutIrq+0x158>)
 8017a06:	681b      	ldr	r3, [r3, #0]
 8017a08:	2b00      	cmp	r3, #0
 8017a0a:	d05a      	beq.n	8017ac2 <SX1276OnTimeoutIrq+0x142>
 8017a0c:	4b32      	ldr	r3, [pc, #200]	; (8017ad8 <SX1276OnTimeoutIrq+0x158>)
 8017a0e:	681b      	ldr	r3, [r3, #0]
 8017a10:	68db      	ldr	r3, [r3, #12]
 8017a12:	2b00      	cmp	r3, #0
 8017a14:	d055      	beq.n	8017ac2 <SX1276OnTimeoutIrq+0x142>
            RadioEvents->RxTimeout( );
 8017a16:	4b30      	ldr	r3, [pc, #192]	; (8017ad8 <SX1276OnTimeoutIrq+0x158>)
 8017a18:	681b      	ldr	r3, [r3, #0]
 8017a1a:	68db      	ldr	r3, [r3, #12]
 8017a1c:	4798      	blx	r3
        break;
 8017a1e:	e050      	b.n	8017ac2 <SX1276OnTimeoutIrq+0x142>
        SX1276Reset( );
 8017a20:	f7ff fd9c 	bl	801755c <SX1276Reset>
        RxChainCalibration( );
 8017a24:	f7fe fae4 	bl	8015ff0 <RxChainCalibration>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 8017a28:	2000      	movs	r0, #0
 8017a2a:	f7ff fdb1 	bl	8017590 <SX1276SetOpMode>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8017a2e:	230f      	movs	r3, #15
 8017a30:	18fb      	adds	r3, r7, r3
 8017a32:	2200      	movs	r2, #0
 8017a34:	701a      	strb	r2, [r3, #0]
 8017a36:	e025      	b.n	8017a84 <SX1276OnTimeoutIrq+0x104>
            SX1276SetModem( RadioRegsInit[i].Modem );
 8017a38:	240f      	movs	r4, #15
 8017a3a:	193b      	adds	r3, r7, r4
 8017a3c:	781a      	ldrb	r2, [r3, #0]
 8017a3e:	4927      	ldr	r1, [pc, #156]	; (8017adc <SX1276OnTimeoutIrq+0x15c>)
 8017a40:	0013      	movs	r3, r2
 8017a42:	005b      	lsls	r3, r3, #1
 8017a44:	189b      	adds	r3, r3, r2
 8017a46:	5c5b      	ldrb	r3, [r3, r1]
 8017a48:	0018      	movs	r0, r3
 8017a4a:	f7ff fdf1 	bl	8017630 <SX1276SetModem>
            SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 8017a4e:	193b      	adds	r3, r7, r4
 8017a50:	781a      	ldrb	r2, [r3, #0]
 8017a52:	4922      	ldr	r1, [pc, #136]	; (8017adc <SX1276OnTimeoutIrq+0x15c>)
 8017a54:	0013      	movs	r3, r2
 8017a56:	005b      	lsls	r3, r3, #1
 8017a58:	189b      	adds	r3, r3, r2
 8017a5a:	18cb      	adds	r3, r1, r3
 8017a5c:	3301      	adds	r3, #1
 8017a5e:	781b      	ldrb	r3, [r3, #0]
 8017a60:	b298      	uxth	r0, r3
 8017a62:	193b      	adds	r3, r7, r4
 8017a64:	781a      	ldrb	r2, [r3, #0]
 8017a66:	491d      	ldr	r1, [pc, #116]	; (8017adc <SX1276OnTimeoutIrq+0x15c>)
 8017a68:	0013      	movs	r3, r2
 8017a6a:	005b      	lsls	r3, r3, #1
 8017a6c:	189b      	adds	r3, r3, r2
 8017a6e:	18cb      	adds	r3, r1, r3
 8017a70:	3302      	adds	r3, #2
 8017a72:	781b      	ldrb	r3, [r3, #0]
 8017a74:	0019      	movs	r1, r3
 8017a76:	f7ff fe33 	bl	80176e0 <SX1276Write>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8017a7a:	193b      	adds	r3, r7, r4
 8017a7c:	781a      	ldrb	r2, [r3, #0]
 8017a7e:	193b      	adds	r3, r7, r4
 8017a80:	3201      	adds	r2, #1
 8017a82:	701a      	strb	r2, [r3, #0]
 8017a84:	230f      	movs	r3, #15
 8017a86:	18fb      	adds	r3, r7, r3
 8017a88:	781b      	ldrb	r3, [r3, #0]
 8017a8a:	2b0f      	cmp	r3, #15
 8017a8c:	d9d4      	bls.n	8017a38 <SX1276OnTimeoutIrq+0xb8>
        SX1276SetModem( MODEM_FSK );
 8017a8e:	2000      	movs	r0, #0
 8017a90:	f7ff fdce 	bl	8017630 <SX1276SetModem>
        SX1276SetPublicNetwork( SX1276.Settings.LoRa.PublicNetwork );
 8017a94:	4b0e      	ldr	r3, [pc, #56]	; (8017ad0 <SX1276OnTimeoutIrq+0x150>)
 8017a96:	225c      	movs	r2, #92	; 0x5c
 8017a98:	5c9b      	ldrb	r3, [r3, r2]
 8017a9a:	0018      	movs	r0, r3
 8017a9c:	f7ff ff40 	bl	8017920 <SX1276SetPublicNetwork>
        SX1276.Settings.State = RF_IDLE;
 8017aa0:	4b0b      	ldr	r3, [pc, #44]	; (8017ad0 <SX1276OnTimeoutIrq+0x150>)
 8017aa2:	2200      	movs	r2, #0
 8017aa4:	711a      	strb	r2, [r3, #4]
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8017aa6:	4b0c      	ldr	r3, [pc, #48]	; (8017ad8 <SX1276OnTimeoutIrq+0x158>)
 8017aa8:	681b      	ldr	r3, [r3, #0]
 8017aaa:	2b00      	cmp	r3, #0
 8017aac:	d00b      	beq.n	8017ac6 <SX1276OnTimeoutIrq+0x146>
 8017aae:	4b0a      	ldr	r3, [pc, #40]	; (8017ad8 <SX1276OnTimeoutIrq+0x158>)
 8017ab0:	681b      	ldr	r3, [r3, #0]
 8017ab2:	685b      	ldr	r3, [r3, #4]
 8017ab4:	2b00      	cmp	r3, #0
 8017ab6:	d006      	beq.n	8017ac6 <SX1276OnTimeoutIrq+0x146>
            RadioEvents->TxTimeout( );
 8017ab8:	4b07      	ldr	r3, [pc, #28]	; (8017ad8 <SX1276OnTimeoutIrq+0x158>)
 8017aba:	681b      	ldr	r3, [r3, #0]
 8017abc:	685b      	ldr	r3, [r3, #4]
 8017abe:	4798      	blx	r3
        break;
 8017ac0:	e001      	b.n	8017ac6 <SX1276OnTimeoutIrq+0x146>
        break;
 8017ac2:	46c0      	nop			; (mov r8, r8)
 8017ac4:	e000      	b.n	8017ac8 <SX1276OnTimeoutIrq+0x148>
        break;
 8017ac6:	46c0      	nop			; (mov r8, r8)
    }
}
 8017ac8:	46c0      	nop			; (mov r8, r8)
 8017aca:	46bd      	mov	sp, r7
 8017acc:	b005      	add	sp, #20
 8017ace:	bd90      	pop	{r4, r7, pc}
 8017ad0:	200015b8 	.word	0x200015b8
 8017ad4:	200015a0 	.word	0x200015a0
 8017ad8:	200010a0 	.word	0x200010a0
 8017adc:	08020ccc 	.word	0x08020ccc

08017ae0 <SX1276OnDio0Irq>:

void SX1276OnDio0Irq( void* context )
{
 8017ae0:	b5b0      	push	{r4, r5, r7, lr}
 8017ae2:	b084      	sub	sp, #16
 8017ae4:	af00      	add	r7, sp, #0
 8017ae6:	6078      	str	r0, [r7, #4]
	LOG_INFO_SX1276((">> SX1276OnDio0Irq\r\n"));

    volatile uint8_t irqFlags = 0;
 8017ae8:	230d      	movs	r3, #13
 8017aea:	18fb      	adds	r3, r7, r3
 8017aec:	2200      	movs	r2, #0
 8017aee:	701a      	strb	r2, [r3, #0]

    switch( SX1276.Settings.State )
 8017af0:	4bca      	ldr	r3, [pc, #808]	; (8017e1c <SX1276OnDio0Irq+0x33c>)
 8017af2:	791b      	ldrb	r3, [r3, #4]
 8017af4:	2b01      	cmp	r3, #1
 8017af6:	d003      	beq.n	8017b00 <SX1276OnDio0Irq+0x20>
 8017af8:	2b02      	cmp	r3, #2
 8017afa:	d100      	bne.n	8017afe <SX1276OnDio0Irq+0x1e>
 8017afc:	e1f2      	b.n	8017ee4 <SX1276OnDio0Irq+0x404>
                }
                break;
            }
            break;
        default:
            break;
 8017afe:	e20f      	b.n	8017f20 <SX1276OnDio0Irq+0x440>
            switch( SX1276.Settings.Modem )
 8017b00:	4bc6      	ldr	r3, [pc, #792]	; (8017e1c <SX1276OnDio0Irq+0x33c>)
 8017b02:	795b      	ldrb	r3, [r3, #5]
 8017b04:	2b00      	cmp	r3, #0
 8017b06:	d003      	beq.n	8017b10 <SX1276OnDio0Irq+0x30>
 8017b08:	2b01      	cmp	r3, #1
 8017b0a:	d100      	bne.n	8017b0e <SX1276OnDio0Irq+0x2e>
 8017b0c:	e0eb      	b.n	8017ce6 <SX1276OnDio0Irq+0x206>
                break;
 8017b0e:	e1e8      	b.n	8017ee2 <SX1276OnDio0Irq+0x402>
                if( SX1276.Settings.Fsk.CrcOn == true )
 8017b10:	4bc2      	ldr	r3, [pc, #776]	; (8017e1c <SX1276OnDio0Irq+0x33c>)
 8017b12:	2224      	movs	r2, #36	; 0x24
 8017b14:	5c9b      	ldrb	r3, [r3, r2]
 8017b16:	2b00      	cmp	r3, #0
 8017b18:	d057      	beq.n	8017bca <SX1276OnDio0Irq+0xea>
                    irqFlags = SX1276Read( REG_IRQFLAGS2 );
 8017b1a:	203f      	movs	r0, #63	; 0x3f
 8017b1c:	f7ff fdf4 	bl	8017708 <SX1276Read>
 8017b20:	0003      	movs	r3, r0
 8017b22:	001a      	movs	r2, r3
 8017b24:	210d      	movs	r1, #13
 8017b26:	187b      	adds	r3, r7, r1
 8017b28:	701a      	strb	r2, [r3, #0]
                    if( ( irqFlags & RF_IRQFLAGS2_CRCOK ) != RF_IRQFLAGS2_CRCOK )
 8017b2a:	187b      	adds	r3, r7, r1
 8017b2c:	781b      	ldrb	r3, [r3, #0]
 8017b2e:	b2db      	uxtb	r3, r3
 8017b30:	001a      	movs	r2, r3
 8017b32:	2302      	movs	r3, #2
 8017b34:	4013      	ands	r3, r2
 8017b36:	2b02      	cmp	r3, #2
 8017b38:	d047      	beq.n	8017bca <SX1276OnDio0Irq+0xea>
                        SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 8017b3a:	210b      	movs	r1, #11
 8017b3c:	203e      	movs	r0, #62	; 0x3e
 8017b3e:	f7ff fdcf 	bl	80176e0 <SX1276Write>
                        SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 8017b42:	2110      	movs	r1, #16
 8017b44:	203f      	movs	r0, #63	; 0x3f
 8017b46:	f7ff fdcb 	bl	80176e0 <SX1276Write>
                        TimerStop( &RxTimeoutTimer );
 8017b4a:	4bb5      	ldr	r3, [pc, #724]	; (8017e20 <SX1276OnDio0Irq+0x340>)
 8017b4c:	0018      	movs	r0, r3
 8017b4e:	f7fd fd37 	bl	80155c0 <TimerStop>
                        if( SX1276.Settings.Fsk.RxContinuous == false )
 8017b52:	4bb2      	ldr	r3, [pc, #712]	; (8017e1c <SX1276OnDio0Irq+0x33c>)
 8017b54:	2226      	movs	r2, #38	; 0x26
 8017b56:	5c9b      	ldrb	r3, [r3, r2]
 8017b58:	2201      	movs	r2, #1
 8017b5a:	4053      	eors	r3, r2
 8017b5c:	b2db      	uxtb	r3, r3
 8017b5e:	2b00      	cmp	r3, #0
 8017b60:	d007      	beq.n	8017b72 <SX1276OnDio0Irq+0x92>
                            TimerStop( &RxTimeoutSyncWord );
 8017b62:	4bb0      	ldr	r3, [pc, #704]	; (8017e24 <SX1276OnDio0Irq+0x344>)
 8017b64:	0018      	movs	r0, r3
 8017b66:	f7fd fd2b 	bl	80155c0 <TimerStop>
                            SX1276.Settings.State = RF_IDLE;
 8017b6a:	4bac      	ldr	r3, [pc, #688]	; (8017e1c <SX1276OnDio0Irq+0x33c>)
 8017b6c:	2200      	movs	r2, #0
 8017b6e:	711a      	strb	r2, [r3, #4]
 8017b70:	e00f      	b.n	8017b92 <SX1276OnDio0Irq+0xb2>
                            SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 8017b72:	200d      	movs	r0, #13
 8017b74:	f7ff fdc8 	bl	8017708 <SX1276Read>
 8017b78:	0003      	movs	r3, r0
 8017b7a:	001a      	movs	r2, r3
 8017b7c:	2340      	movs	r3, #64	; 0x40
 8017b7e:	4313      	orrs	r3, r2
 8017b80:	b2db      	uxtb	r3, r3
 8017b82:	0019      	movs	r1, r3
 8017b84:	200d      	movs	r0, #13
 8017b86:	f7ff fdab 	bl	80176e0 <SX1276Write>
                            TimerStart( &RxTimeoutSyncWord );
 8017b8a:	4ba6      	ldr	r3, [pc, #664]	; (8017e24 <SX1276OnDio0Irq+0x344>)
 8017b8c:	0018      	movs	r0, r3
 8017b8e:	f7fd fcc1 	bl	8015514 <TimerStart>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 8017b92:	4ba5      	ldr	r3, [pc, #660]	; (8017e28 <SX1276OnDio0Irq+0x348>)
 8017b94:	681b      	ldr	r3, [r3, #0]
 8017b96:	2b00      	cmp	r3, #0
 8017b98:	d008      	beq.n	8017bac <SX1276OnDio0Irq+0xcc>
 8017b9a:	4ba3      	ldr	r3, [pc, #652]	; (8017e28 <SX1276OnDio0Irq+0x348>)
 8017b9c:	681b      	ldr	r3, [r3, #0]
 8017b9e:	691b      	ldr	r3, [r3, #16]
 8017ba0:	2b00      	cmp	r3, #0
 8017ba2:	d003      	beq.n	8017bac <SX1276OnDio0Irq+0xcc>
                            RadioEvents->RxError( );
 8017ba4:	4ba0      	ldr	r3, [pc, #640]	; (8017e28 <SX1276OnDio0Irq+0x348>)
 8017ba6:	681b      	ldr	r3, [r3, #0]
 8017ba8:	691b      	ldr	r3, [r3, #16]
 8017baa:	4798      	blx	r3
                        SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 8017bac:	4b9b      	ldr	r3, [pc, #620]	; (8017e1c <SX1276OnDio0Irq+0x33c>)
 8017bae:	2230      	movs	r2, #48	; 0x30
 8017bb0:	2100      	movs	r1, #0
 8017bb2:	5499      	strb	r1, [r3, r2]
                        SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 8017bb4:	4b99      	ldr	r3, [pc, #612]	; (8017e1c <SX1276OnDio0Irq+0x33c>)
 8017bb6:	2231      	movs	r2, #49	; 0x31
 8017bb8:	2100      	movs	r1, #0
 8017bba:	5499      	strb	r1, [r3, r2]
                        SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8017bbc:	4b97      	ldr	r3, [pc, #604]	; (8017e1c <SX1276OnDio0Irq+0x33c>)
 8017bbe:	2200      	movs	r2, #0
 8017bc0:	879a      	strh	r2, [r3, #60]	; 0x3c
                        SX1276.Settings.FskPacketHandler.Size = 0;
 8017bc2:	4b96      	ldr	r3, [pc, #600]	; (8017e1c <SX1276OnDio0Irq+0x33c>)
 8017bc4:	2200      	movs	r2, #0
 8017bc6:	875a      	strh	r2, [r3, #58]	; 0x3a
                        break;
 8017bc8:	e18b      	b.n	8017ee2 <SX1276OnDio0Irq+0x402>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 8017bca:	4b94      	ldr	r3, [pc, #592]	; (8017e1c <SX1276OnDio0Irq+0x33c>)
 8017bcc:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8017bce:	2b00      	cmp	r3, #0
 8017bd0:	d12d      	bne.n	8017c2e <SX1276OnDio0Irq+0x14e>
 8017bd2:	4b92      	ldr	r3, [pc, #584]	; (8017e1c <SX1276OnDio0Irq+0x33c>)
 8017bd4:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8017bd6:	2b00      	cmp	r3, #0
 8017bd8:	d129      	bne.n	8017c2e <SX1276OnDio0Irq+0x14e>
                    if( SX1276.Settings.Fsk.FixLen == false )
 8017bda:	4b90      	ldr	r3, [pc, #576]	; (8017e1c <SX1276OnDio0Irq+0x33c>)
 8017bdc:	2222      	movs	r2, #34	; 0x22
 8017bde:	5c9b      	ldrb	r3, [r3, r2]
 8017be0:	2201      	movs	r2, #1
 8017be2:	4053      	eors	r3, r2
 8017be4:	b2db      	uxtb	r3, r3
 8017be6:	2b00      	cmp	r3, #0
 8017be8:	d005      	beq.n	8017bf6 <SX1276OnDio0Irq+0x116>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 8017bea:	4b90      	ldr	r3, [pc, #576]	; (8017e2c <SX1276OnDio0Irq+0x34c>)
 8017bec:	2101      	movs	r1, #1
 8017bee:	0018      	movs	r0, r3
 8017bf0:	f7ff fe52 	bl	8017898 <SX1276ReadFifo>
 8017bf4:	e006      	b.n	8017c04 <SX1276OnDio0Irq+0x124>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 8017bf6:	2032      	movs	r0, #50	; 0x32
 8017bf8:	f7ff fd86 	bl	8017708 <SX1276Read>
 8017bfc:	0003      	movs	r3, r0
 8017bfe:	b29a      	uxth	r2, r3
 8017c00:	4b86      	ldr	r3, [pc, #536]	; (8017e1c <SX1276OnDio0Irq+0x33c>)
 8017c02:	875a      	strh	r2, [r3, #58]	; 0x3a
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8017c04:	4b85      	ldr	r3, [pc, #532]	; (8017e1c <SX1276OnDio0Irq+0x33c>)
 8017c06:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8017c08:	001a      	movs	r2, r3
 8017c0a:	4b89      	ldr	r3, [pc, #548]	; (8017e30 <SX1276OnDio0Irq+0x350>)
 8017c0c:	18d0      	adds	r0, r2, r3
 8017c0e:	4b83      	ldr	r3, [pc, #524]	; (8017e1c <SX1276OnDio0Irq+0x33c>)
 8017c10:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8017c12:	b2da      	uxtb	r2, r3
 8017c14:	4b81      	ldr	r3, [pc, #516]	; (8017e1c <SX1276OnDio0Irq+0x33c>)
 8017c16:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8017c18:	b2db      	uxtb	r3, r3
 8017c1a:	1ad3      	subs	r3, r2, r3
 8017c1c:	b2db      	uxtb	r3, r3
 8017c1e:	0019      	movs	r1, r3
 8017c20:	f7ff fe3a 	bl	8017898 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8017c24:	4b7d      	ldr	r3, [pc, #500]	; (8017e1c <SX1276OnDio0Irq+0x33c>)
 8017c26:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 8017c28:	4b7c      	ldr	r3, [pc, #496]	; (8017e1c <SX1276OnDio0Irq+0x33c>)
 8017c2a:	879a      	strh	r2, [r3, #60]	; 0x3c
 8017c2c:	e013      	b.n	8017c56 <SX1276OnDio0Irq+0x176>
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8017c2e:	4b7b      	ldr	r3, [pc, #492]	; (8017e1c <SX1276OnDio0Irq+0x33c>)
 8017c30:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8017c32:	001a      	movs	r2, r3
 8017c34:	4b7e      	ldr	r3, [pc, #504]	; (8017e30 <SX1276OnDio0Irq+0x350>)
 8017c36:	18d0      	adds	r0, r2, r3
 8017c38:	4b78      	ldr	r3, [pc, #480]	; (8017e1c <SX1276OnDio0Irq+0x33c>)
 8017c3a:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8017c3c:	b2da      	uxtb	r2, r3
 8017c3e:	4b77      	ldr	r3, [pc, #476]	; (8017e1c <SX1276OnDio0Irq+0x33c>)
 8017c40:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8017c42:	b2db      	uxtb	r3, r3
 8017c44:	1ad3      	subs	r3, r2, r3
 8017c46:	b2db      	uxtb	r3, r3
 8017c48:	0019      	movs	r1, r3
 8017c4a:	f7ff fe25 	bl	8017898 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8017c4e:	4b73      	ldr	r3, [pc, #460]	; (8017e1c <SX1276OnDio0Irq+0x33c>)
 8017c50:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 8017c52:	4b72      	ldr	r3, [pc, #456]	; (8017e1c <SX1276OnDio0Irq+0x33c>)
 8017c54:	879a      	strh	r2, [r3, #60]	; 0x3c
                TimerStop( &RxTimeoutTimer );
 8017c56:	4b72      	ldr	r3, [pc, #456]	; (8017e20 <SX1276OnDio0Irq+0x340>)
 8017c58:	0018      	movs	r0, r3
 8017c5a:	f7fd fcb1 	bl	80155c0 <TimerStop>
                if( SX1276.Settings.Fsk.RxContinuous == false )
 8017c5e:	4b6f      	ldr	r3, [pc, #444]	; (8017e1c <SX1276OnDio0Irq+0x33c>)
 8017c60:	2226      	movs	r2, #38	; 0x26
 8017c62:	5c9b      	ldrb	r3, [r3, r2]
 8017c64:	2201      	movs	r2, #1
 8017c66:	4053      	eors	r3, r2
 8017c68:	b2db      	uxtb	r3, r3
 8017c6a:	2b00      	cmp	r3, #0
 8017c6c:	d007      	beq.n	8017c7e <SX1276OnDio0Irq+0x19e>
                    SX1276.Settings.State = RF_IDLE;
 8017c6e:	4b6b      	ldr	r3, [pc, #428]	; (8017e1c <SX1276OnDio0Irq+0x33c>)
 8017c70:	2200      	movs	r2, #0
 8017c72:	711a      	strb	r2, [r3, #4]
                    TimerStop( &RxTimeoutSyncWord );
 8017c74:	4b6b      	ldr	r3, [pc, #428]	; (8017e24 <SX1276OnDio0Irq+0x344>)
 8017c76:	0018      	movs	r0, r3
 8017c78:	f7fd fca2 	bl	80155c0 <TimerStop>
 8017c7c:	e00f      	b.n	8017c9e <SX1276OnDio0Irq+0x1be>
                    SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 8017c7e:	200d      	movs	r0, #13
 8017c80:	f7ff fd42 	bl	8017708 <SX1276Read>
 8017c84:	0003      	movs	r3, r0
 8017c86:	001a      	movs	r2, r3
 8017c88:	2340      	movs	r3, #64	; 0x40
 8017c8a:	4313      	orrs	r3, r2
 8017c8c:	b2db      	uxtb	r3, r3
 8017c8e:	0019      	movs	r1, r3
 8017c90:	200d      	movs	r0, #13
 8017c92:	f7ff fd25 	bl	80176e0 <SX1276Write>
                    TimerStart( &RxTimeoutSyncWord );
 8017c96:	4b63      	ldr	r3, [pc, #396]	; (8017e24 <SX1276OnDio0Irq+0x344>)
 8017c98:	0018      	movs	r0, r3
 8017c9a:	f7fd fc3b 	bl	8015514 <TimerStart>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8017c9e:	4b62      	ldr	r3, [pc, #392]	; (8017e28 <SX1276OnDio0Irq+0x348>)
 8017ca0:	681b      	ldr	r3, [r3, #0]
 8017ca2:	2b00      	cmp	r3, #0
 8017ca4:	d010      	beq.n	8017cc8 <SX1276OnDio0Irq+0x1e8>
 8017ca6:	4b60      	ldr	r3, [pc, #384]	; (8017e28 <SX1276OnDio0Irq+0x348>)
 8017ca8:	681b      	ldr	r3, [r3, #0]
 8017caa:	689b      	ldr	r3, [r3, #8]
 8017cac:	2b00      	cmp	r3, #0
 8017cae:	d00b      	beq.n	8017cc8 <SX1276OnDio0Irq+0x1e8>
                    RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.FskPacketHandler.Size, SX1276.Settings.FskPacketHandler.RssiValue, 0 );
 8017cb0:	4b5d      	ldr	r3, [pc, #372]	; (8017e28 <SX1276OnDio0Irq+0x348>)
 8017cb2:	681b      	ldr	r3, [r3, #0]
 8017cb4:	689c      	ldr	r4, [r3, #8]
 8017cb6:	4b59      	ldr	r3, [pc, #356]	; (8017e1c <SX1276OnDio0Irq+0x33c>)
 8017cb8:	8f59      	ldrh	r1, [r3, #58]	; 0x3a
 8017cba:	4b58      	ldr	r3, [pc, #352]	; (8017e1c <SX1276OnDio0Irq+0x33c>)
 8017cbc:	2232      	movs	r2, #50	; 0x32
 8017cbe:	569b      	ldrsb	r3, [r3, r2]
 8017cc0:	b21a      	sxth	r2, r3
 8017cc2:	485b      	ldr	r0, [pc, #364]	; (8017e30 <SX1276OnDio0Irq+0x350>)
 8017cc4:	2300      	movs	r3, #0
 8017cc6:	47a0      	blx	r4
                SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 8017cc8:	4b54      	ldr	r3, [pc, #336]	; (8017e1c <SX1276OnDio0Irq+0x33c>)
 8017cca:	2230      	movs	r2, #48	; 0x30
 8017ccc:	2100      	movs	r1, #0
 8017cce:	5499      	strb	r1, [r3, r2]
                SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 8017cd0:	4b52      	ldr	r3, [pc, #328]	; (8017e1c <SX1276OnDio0Irq+0x33c>)
 8017cd2:	2231      	movs	r2, #49	; 0x31
 8017cd4:	2100      	movs	r1, #0
 8017cd6:	5499      	strb	r1, [r3, r2]
                SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8017cd8:	4b50      	ldr	r3, [pc, #320]	; (8017e1c <SX1276OnDio0Irq+0x33c>)
 8017cda:	2200      	movs	r2, #0
 8017cdc:	879a      	strh	r2, [r3, #60]	; 0x3c
                SX1276.Settings.FskPacketHandler.Size = 0;
 8017cde:	4b4f      	ldr	r3, [pc, #316]	; (8017e1c <SX1276OnDio0Irq+0x33c>)
 8017ce0:	2200      	movs	r2, #0
 8017ce2:	875a      	strh	r2, [r3, #58]	; 0x3a
                break;
 8017ce4:	e0fd      	b.n	8017ee2 <SX1276OnDio0Irq+0x402>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXDONE );
 8017ce6:	2140      	movs	r1, #64	; 0x40
 8017ce8:	2012      	movs	r0, #18
 8017cea:	f7ff fcf9 	bl	80176e0 <SX1276Write>
                    irqFlags = SX1276Read( REG_LR_IRQFLAGS );
 8017cee:	2012      	movs	r0, #18
 8017cf0:	f7ff fd0a 	bl	8017708 <SX1276Read>
 8017cf4:	0003      	movs	r3, r0
 8017cf6:	001a      	movs	r2, r3
 8017cf8:	210d      	movs	r1, #13
 8017cfa:	187b      	adds	r3, r7, r1
 8017cfc:	701a      	strb	r2, [r3, #0]
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
 8017cfe:	187b      	adds	r3, r7, r1
 8017d00:	781b      	ldrb	r3, [r3, #0]
 8017d02:	b2db      	uxtb	r3, r3
 8017d04:	001a      	movs	r2, r3
 8017d06:	2320      	movs	r3, #32
 8017d08:	4013      	ands	r3, r2
 8017d0a:	2b20      	cmp	r3, #32
 8017d0c:	d122      	bne.n	8017d54 <SX1276OnDio0Irq+0x274>
                        SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_PAYLOADCRCERROR );
 8017d0e:	2120      	movs	r1, #32
 8017d10:	2012      	movs	r0, #18
 8017d12:	f7ff fce5 	bl	80176e0 <SX1276Write>
                        if( SX1276.Settings.LoRa.RxContinuous == false )
 8017d16:	4b41      	ldr	r3, [pc, #260]	; (8017e1c <SX1276OnDio0Irq+0x33c>)
 8017d18:	2256      	movs	r2, #86	; 0x56
 8017d1a:	5c9b      	ldrb	r3, [r3, r2]
 8017d1c:	2201      	movs	r2, #1
 8017d1e:	4053      	eors	r3, r2
 8017d20:	b2db      	uxtb	r3, r3
 8017d22:	2b00      	cmp	r3, #0
 8017d24:	d002      	beq.n	8017d2c <SX1276OnDio0Irq+0x24c>
                            SX1276.Settings.State = RF_IDLE;
 8017d26:	4b3d      	ldr	r3, [pc, #244]	; (8017e1c <SX1276OnDio0Irq+0x33c>)
 8017d28:	2200      	movs	r2, #0
 8017d2a:	711a      	strb	r2, [r3, #4]
                        TimerStop( &RxTimeoutTimer );
 8017d2c:	4b3c      	ldr	r3, [pc, #240]	; (8017e20 <SX1276OnDio0Irq+0x340>)
 8017d2e:	0018      	movs	r0, r3
 8017d30:	f7fd fc46 	bl	80155c0 <TimerStop>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 8017d34:	4b3c      	ldr	r3, [pc, #240]	; (8017e28 <SX1276OnDio0Irq+0x348>)
 8017d36:	681b      	ldr	r3, [r3, #0]
 8017d38:	2b00      	cmp	r3, #0
 8017d3a:	d100      	bne.n	8017d3e <SX1276OnDio0Irq+0x25e>
 8017d3c:	e0ce      	b.n	8017edc <SX1276OnDio0Irq+0x3fc>
 8017d3e:	4b3a      	ldr	r3, [pc, #232]	; (8017e28 <SX1276OnDio0Irq+0x348>)
 8017d40:	681b      	ldr	r3, [r3, #0]
 8017d42:	691b      	ldr	r3, [r3, #16]
 8017d44:	2b00      	cmp	r3, #0
 8017d46:	d100      	bne.n	8017d4a <SX1276OnDio0Irq+0x26a>
 8017d48:	e0c8      	b.n	8017edc <SX1276OnDio0Irq+0x3fc>
                            RadioEvents->RxError( );
 8017d4a:	4b37      	ldr	r3, [pc, #220]	; (8017e28 <SX1276OnDio0Irq+0x348>)
 8017d4c:	681b      	ldr	r3, [r3, #0]
 8017d4e:	691b      	ldr	r3, [r3, #16]
 8017d50:	4798      	blx	r3
                        break;
 8017d52:	e0c3      	b.n	8017edc <SX1276OnDio0Irq+0x3fc>
                    SX1276.Settings.LoRaPacketHandler.SnrValue = ( ( ( int8_t )SX1276Read( REG_LR_PKTSNRVALUE ) ) + 2 ) >> 2;
 8017d54:	2019      	movs	r0, #25
 8017d56:	f7ff fcd7 	bl	8017708 <SX1276Read>
 8017d5a:	0003      	movs	r3, r0
 8017d5c:	b25b      	sxtb	r3, r3
 8017d5e:	3302      	adds	r3, #2
 8017d60:	109b      	asrs	r3, r3, #2
 8017d62:	b259      	sxtb	r1, r3
 8017d64:	4b2d      	ldr	r3, [pc, #180]	; (8017e1c <SX1276OnDio0Irq+0x33c>)
 8017d66:	2260      	movs	r2, #96	; 0x60
 8017d68:	5499      	strb	r1, [r3, r2]
                    int16_t rssi = SX1276Read( REG_LR_PKTRSSIVALUE );
 8017d6a:	201a      	movs	r0, #26
 8017d6c:	f7ff fccc 	bl	8017708 <SX1276Read>
 8017d70:	0003      	movs	r3, r0
 8017d72:	001a      	movs	r2, r3
 8017d74:	230e      	movs	r3, #14
 8017d76:	18fb      	adds	r3, r7, r3
 8017d78:	801a      	strh	r2, [r3, #0]
                    if( SX1276.Settings.LoRaPacketHandler.SnrValue < 0 )
 8017d7a:	4b28      	ldr	r3, [pc, #160]	; (8017e1c <SX1276OnDio0Irq+0x33c>)
 8017d7c:	2260      	movs	r2, #96	; 0x60
 8017d7e:	569b      	ldrsb	r3, [r3, r2]
 8017d80:	2b00      	cmp	r3, #0
 8017d82:	da34      	bge.n	8017dee <SX1276OnDio0Irq+0x30e>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8017d84:	4b25      	ldr	r3, [pc, #148]	; (8017e1c <SX1276OnDio0Irq+0x33c>)
 8017d86:	689b      	ldr	r3, [r3, #8]
 8017d88:	4a2a      	ldr	r2, [pc, #168]	; (8017e34 <SX1276OnDio0Irq+0x354>)
 8017d8a:	4293      	cmp	r3, r2
 8017d8c:	d917      	bls.n	8017dbe <SX1276OnDio0Irq+0x2de>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 8017d8e:	210e      	movs	r1, #14
 8017d90:	187b      	adds	r3, r7, r1
 8017d92:	2200      	movs	r2, #0
 8017d94:	5e9b      	ldrsh	r3, [r3, r2]
 8017d96:	111b      	asrs	r3, r3, #4
 8017d98:	b21b      	sxth	r3, r3
 8017d9a:	b29a      	uxth	r2, r3
 8017d9c:	187b      	adds	r3, r7, r1
 8017d9e:	881b      	ldrh	r3, [r3, #0]
 8017da0:	18d3      	adds	r3, r2, r3
 8017da2:	b29a      	uxth	r2, r3
                                                                          SX1276.Settings.LoRaPacketHandler.SnrValue;
 8017da4:	4b1d      	ldr	r3, [pc, #116]	; (8017e1c <SX1276OnDio0Irq+0x33c>)
 8017da6:	2160      	movs	r1, #96	; 0x60
 8017da8:	565b      	ldrsb	r3, [r3, r1]
 8017daa:	b29b      	uxth	r3, r3
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 8017dac:	18d3      	adds	r3, r2, r3
 8017dae:	b29b      	uxth	r3, r3
 8017db0:	3b9d      	subs	r3, #157	; 0x9d
 8017db2:	b29b      	uxth	r3, r3
 8017db4:	b219      	sxth	r1, r3
 8017db6:	4b19      	ldr	r3, [pc, #100]	; (8017e1c <SX1276OnDio0Irq+0x33c>)
 8017db8:	2262      	movs	r2, #98	; 0x62
 8017dba:	5299      	strh	r1, [r3, r2]
 8017dbc:	e04d      	b.n	8017e5a <SX1276OnDio0Irq+0x37a>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 8017dbe:	210e      	movs	r1, #14
 8017dc0:	187b      	adds	r3, r7, r1
 8017dc2:	2200      	movs	r2, #0
 8017dc4:	5e9b      	ldrsh	r3, [r3, r2]
 8017dc6:	111b      	asrs	r3, r3, #4
 8017dc8:	b21b      	sxth	r3, r3
 8017dca:	b29a      	uxth	r2, r3
 8017dcc:	187b      	adds	r3, r7, r1
 8017dce:	881b      	ldrh	r3, [r3, #0]
 8017dd0:	18d3      	adds	r3, r2, r3
 8017dd2:	b29a      	uxth	r2, r3
                                                                          SX1276.Settings.LoRaPacketHandler.SnrValue;
 8017dd4:	4b11      	ldr	r3, [pc, #68]	; (8017e1c <SX1276OnDio0Irq+0x33c>)
 8017dd6:	2160      	movs	r1, #96	; 0x60
 8017dd8:	565b      	ldrsb	r3, [r3, r1]
 8017dda:	b29b      	uxth	r3, r3
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 8017ddc:	18d3      	adds	r3, r2, r3
 8017dde:	b29b      	uxth	r3, r3
 8017de0:	3ba4      	subs	r3, #164	; 0xa4
 8017de2:	b29b      	uxth	r3, r3
 8017de4:	b219      	sxth	r1, r3
 8017de6:	4b0d      	ldr	r3, [pc, #52]	; (8017e1c <SX1276OnDio0Irq+0x33c>)
 8017de8:	2262      	movs	r2, #98	; 0x62
 8017dea:	5299      	strh	r1, [r3, r2]
 8017dec:	e035      	b.n	8017e5a <SX1276OnDio0Irq+0x37a>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8017dee:	4b0b      	ldr	r3, [pc, #44]	; (8017e1c <SX1276OnDio0Irq+0x33c>)
 8017df0:	689b      	ldr	r3, [r3, #8]
 8017df2:	4a10      	ldr	r2, [pc, #64]	; (8017e34 <SX1276OnDio0Irq+0x354>)
 8017df4:	4293      	cmp	r3, r2
 8017df6:	d91f      	bls.n	8017e38 <SX1276OnDio0Irq+0x358>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 );
 8017df8:	210e      	movs	r1, #14
 8017dfa:	187b      	adds	r3, r7, r1
 8017dfc:	2200      	movs	r2, #0
 8017dfe:	5e9b      	ldrsh	r3, [r3, r2]
 8017e00:	111b      	asrs	r3, r3, #4
 8017e02:	b21b      	sxth	r3, r3
 8017e04:	b29a      	uxth	r2, r3
 8017e06:	187b      	adds	r3, r7, r1
 8017e08:	881b      	ldrh	r3, [r3, #0]
 8017e0a:	18d3      	adds	r3, r2, r3
 8017e0c:	b29b      	uxth	r3, r3
 8017e0e:	3b9d      	subs	r3, #157	; 0x9d
 8017e10:	b29b      	uxth	r3, r3
 8017e12:	b219      	sxth	r1, r3
 8017e14:	4b01      	ldr	r3, [pc, #4]	; (8017e1c <SX1276OnDio0Irq+0x33c>)
 8017e16:	2262      	movs	r2, #98	; 0x62
 8017e18:	5299      	strh	r1, [r3, r2]
 8017e1a:	e01e      	b.n	8017e5a <SX1276OnDio0Irq+0x37a>
 8017e1c:	200015b8 	.word	0x200015b8
 8017e20:	20001620 	.word	0x20001620
 8017e24:	200015a0 	.word	0x200015a0
 8017e28:	200010a0 	.word	0x200010a0
 8017e2c:	200015f2 	.word	0x200015f2
 8017e30:	200010a4 	.word	0x200010a4
 8017e34:	1f4add40 	.word	0x1f4add40
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
 8017e38:	210e      	movs	r1, #14
 8017e3a:	187b      	adds	r3, r7, r1
 8017e3c:	2200      	movs	r2, #0
 8017e3e:	5e9b      	ldrsh	r3, [r3, r2]
 8017e40:	111b      	asrs	r3, r3, #4
 8017e42:	b21b      	sxth	r3, r3
 8017e44:	b29a      	uxth	r2, r3
 8017e46:	187b      	adds	r3, r7, r1
 8017e48:	881b      	ldrh	r3, [r3, #0]
 8017e4a:	18d3      	adds	r3, r2, r3
 8017e4c:	b29b      	uxth	r3, r3
 8017e4e:	3ba4      	subs	r3, #164	; 0xa4
 8017e50:	b29b      	uxth	r3, r3
 8017e52:	b219      	sxth	r1, r3
 8017e54:	4b34      	ldr	r3, [pc, #208]	; (8017f28 <SX1276OnDio0Irq+0x448>)
 8017e56:	2262      	movs	r2, #98	; 0x62
 8017e58:	5299      	strh	r1, [r3, r2]
                    SX1276.Settings.LoRaPacketHandler.Size = SX1276Read( REG_LR_RXNBBYTES );
 8017e5a:	2013      	movs	r0, #19
 8017e5c:	f7ff fc54 	bl	8017708 <SX1276Read>
 8017e60:	0003      	movs	r3, r0
 8017e62:	0019      	movs	r1, r3
 8017e64:	4b30      	ldr	r3, [pc, #192]	; (8017f28 <SX1276OnDio0Irq+0x448>)
 8017e66:	2264      	movs	r2, #100	; 0x64
 8017e68:	5499      	strb	r1, [r3, r2]
                    SX1276Write( REG_LR_FIFOADDRPTR, SX1276Read( REG_LR_FIFORXCURRENTADDR ) );
 8017e6a:	2010      	movs	r0, #16
 8017e6c:	f7ff fc4c 	bl	8017708 <SX1276Read>
 8017e70:	0003      	movs	r3, r0
 8017e72:	0019      	movs	r1, r3
 8017e74:	200d      	movs	r0, #13
 8017e76:	f7ff fc33 	bl	80176e0 <SX1276Write>
                    SX1276ReadFifo( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size );
 8017e7a:	4b2b      	ldr	r3, [pc, #172]	; (8017f28 <SX1276OnDio0Irq+0x448>)
 8017e7c:	2264      	movs	r2, #100	; 0x64
 8017e7e:	5c9a      	ldrb	r2, [r3, r2]
 8017e80:	4b2a      	ldr	r3, [pc, #168]	; (8017f2c <SX1276OnDio0Irq+0x44c>)
 8017e82:	0011      	movs	r1, r2
 8017e84:	0018      	movs	r0, r3
 8017e86:	f7ff fd07 	bl	8017898 <SX1276ReadFifo>
                    if( SX1276.Settings.LoRa.RxContinuous == false )
 8017e8a:	4b27      	ldr	r3, [pc, #156]	; (8017f28 <SX1276OnDio0Irq+0x448>)
 8017e8c:	2256      	movs	r2, #86	; 0x56
 8017e8e:	5c9b      	ldrb	r3, [r3, r2]
 8017e90:	2201      	movs	r2, #1
 8017e92:	4053      	eors	r3, r2
 8017e94:	b2db      	uxtb	r3, r3
 8017e96:	2b00      	cmp	r3, #0
 8017e98:	d002      	beq.n	8017ea0 <SX1276OnDio0Irq+0x3c0>
                        SX1276.Settings.State = RF_IDLE;
 8017e9a:	4b23      	ldr	r3, [pc, #140]	; (8017f28 <SX1276OnDio0Irq+0x448>)
 8017e9c:	2200      	movs	r2, #0
 8017e9e:	711a      	strb	r2, [r3, #4]
                    TimerStop( &RxTimeoutTimer );
 8017ea0:	4b23      	ldr	r3, [pc, #140]	; (8017f30 <SX1276OnDio0Irq+0x450>)
 8017ea2:	0018      	movs	r0, r3
 8017ea4:	f7fd fb8c 	bl	80155c0 <TimerStop>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8017ea8:	4b22      	ldr	r3, [pc, #136]	; (8017f34 <SX1276OnDio0Irq+0x454>)
 8017eaa:	681b      	ldr	r3, [r3, #0]
 8017eac:	2b00      	cmp	r3, #0
 8017eae:	d017      	beq.n	8017ee0 <SX1276OnDio0Irq+0x400>
 8017eb0:	4b20      	ldr	r3, [pc, #128]	; (8017f34 <SX1276OnDio0Irq+0x454>)
 8017eb2:	681b      	ldr	r3, [r3, #0]
 8017eb4:	689b      	ldr	r3, [r3, #8]
 8017eb6:	2b00      	cmp	r3, #0
 8017eb8:	d012      	beq.n	8017ee0 <SX1276OnDio0Irq+0x400>
                        RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size, SX1276.Settings.LoRaPacketHandler.RssiValue, SX1276.Settings.LoRaPacketHandler.SnrValue );
 8017eba:	4b1e      	ldr	r3, [pc, #120]	; (8017f34 <SX1276OnDio0Irq+0x454>)
 8017ebc:	681b      	ldr	r3, [r3, #0]
 8017ebe:	689c      	ldr	r4, [r3, #8]
 8017ec0:	4b19      	ldr	r3, [pc, #100]	; (8017f28 <SX1276OnDio0Irq+0x448>)
 8017ec2:	2264      	movs	r2, #100	; 0x64
 8017ec4:	5c9b      	ldrb	r3, [r3, r2]
 8017ec6:	b299      	uxth	r1, r3
 8017ec8:	4b17      	ldr	r3, [pc, #92]	; (8017f28 <SX1276OnDio0Irq+0x448>)
 8017eca:	2262      	movs	r2, #98	; 0x62
 8017ecc:	5e9d      	ldrsh	r5, [r3, r2]
 8017ece:	4b16      	ldr	r3, [pc, #88]	; (8017f28 <SX1276OnDio0Irq+0x448>)
 8017ed0:	2260      	movs	r2, #96	; 0x60
 8017ed2:	569b      	ldrsb	r3, [r3, r2]
 8017ed4:	4815      	ldr	r0, [pc, #84]	; (8017f2c <SX1276OnDio0Irq+0x44c>)
 8017ed6:	002a      	movs	r2, r5
 8017ed8:	47a0      	blx	r4
                break;
 8017eda:	e001      	b.n	8017ee0 <SX1276OnDio0Irq+0x400>
                        break;
 8017edc:	46c0      	nop			; (mov r8, r8)
 8017ede:	e01f      	b.n	8017f20 <SX1276OnDio0Irq+0x440>
                break;
 8017ee0:	46c0      	nop			; (mov r8, r8)
            break;
 8017ee2:	e01d      	b.n	8017f20 <SX1276OnDio0Irq+0x440>
            TimerStop( &TxTimeoutTimer );
 8017ee4:	4b14      	ldr	r3, [pc, #80]	; (8017f38 <SX1276OnDio0Irq+0x458>)
 8017ee6:	0018      	movs	r0, r3
 8017ee8:	f7fd fb6a 	bl	80155c0 <TimerStop>
            switch( SX1276.Settings.Modem )
 8017eec:	4b0e      	ldr	r3, [pc, #56]	; (8017f28 <SX1276OnDio0Irq+0x448>)
 8017eee:	795b      	ldrb	r3, [r3, #5]
 8017ef0:	2b01      	cmp	r3, #1
 8017ef2:	d103      	bne.n	8017efc <SX1276OnDio0Irq+0x41c>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_TXDONE );
 8017ef4:	2108      	movs	r1, #8
 8017ef6:	2012      	movs	r0, #18
 8017ef8:	f7ff fbf2 	bl	80176e0 <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 8017efc:	4b0a      	ldr	r3, [pc, #40]	; (8017f28 <SX1276OnDio0Irq+0x448>)
 8017efe:	2200      	movs	r2, #0
 8017f00:	711a      	strb	r2, [r3, #4]
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8017f02:	4b0c      	ldr	r3, [pc, #48]	; (8017f34 <SX1276OnDio0Irq+0x454>)
 8017f04:	681b      	ldr	r3, [r3, #0]
 8017f06:	2b00      	cmp	r3, #0
 8017f08:	d008      	beq.n	8017f1c <SX1276OnDio0Irq+0x43c>
 8017f0a:	4b0a      	ldr	r3, [pc, #40]	; (8017f34 <SX1276OnDio0Irq+0x454>)
 8017f0c:	681b      	ldr	r3, [r3, #0]
 8017f0e:	681b      	ldr	r3, [r3, #0]
 8017f10:	2b00      	cmp	r3, #0
 8017f12:	d003      	beq.n	8017f1c <SX1276OnDio0Irq+0x43c>
                    RadioEvents->TxDone( );
 8017f14:	4b07      	ldr	r3, [pc, #28]	; (8017f34 <SX1276OnDio0Irq+0x454>)
 8017f16:	681b      	ldr	r3, [r3, #0]
 8017f18:	681b      	ldr	r3, [r3, #0]
 8017f1a:	4798      	blx	r3
                break;
 8017f1c:	46c0      	nop			; (mov r8, r8)
            break;
 8017f1e:	46c0      	nop			; (mov r8, r8)
    }
}
 8017f20:	46c0      	nop			; (mov r8, r8)
 8017f22:	46bd      	mov	sp, r7
 8017f24:	b004      	add	sp, #16
 8017f26:	bdb0      	pop	{r4, r5, r7, pc}
 8017f28:	200015b8 	.word	0x200015b8
 8017f2c:	200010a4 	.word	0x200010a4
 8017f30:	20001620 	.word	0x20001620
 8017f34:	200010a0 	.word	0x200010a0
 8017f38:	20001588 	.word	0x20001588

08017f3c <SX1276OnDio1Irq>:

void SX1276OnDio1Irq( void* context )
{
 8017f3c:	b580      	push	{r7, lr}
 8017f3e:	b082      	sub	sp, #8
 8017f40:	af00      	add	r7, sp, #0
 8017f42:	6078      	str	r0, [r7, #4]
	LOG_INFO_SX1276((">> SX1276OnDio1Irq\r\n"));

    switch( SX1276.Settings.State )
 8017f44:	4b61      	ldr	r3, [pc, #388]	; (80180cc <SX1276OnDio1Irq+0x190>)
 8017f46:	791b      	ldrb	r3, [r3, #4]
 8017f48:	2b01      	cmp	r3, #1
 8017f4a:	d003      	beq.n	8017f54 <SX1276OnDio1Irq+0x18>
 8017f4c:	2b02      	cmp	r3, #2
 8017f4e:	d100      	bne.n	8017f52 <SX1276OnDio1Irq+0x16>
 8017f50:	e078      	b.n	8018044 <SX1276OnDio1Irq+0x108>
            default:
                break;
            }
            break;
        default:
            break;
 8017f52:	e0b6      	b.n	80180c2 <SX1276OnDio1Irq+0x186>
            switch( SX1276.Settings.Modem )
 8017f54:	4b5d      	ldr	r3, [pc, #372]	; (80180cc <SX1276OnDio1Irq+0x190>)
 8017f56:	795b      	ldrb	r3, [r3, #5]
 8017f58:	2b00      	cmp	r3, #0
 8017f5a:	d002      	beq.n	8017f62 <SX1276OnDio1Irq+0x26>
 8017f5c:	2b01      	cmp	r3, #1
 8017f5e:	d057      	beq.n	8018010 <SX1276OnDio1Irq+0xd4>
                break;
 8017f60:	e06f      	b.n	8018042 <SX1276OnDio1Irq+0x106>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 8017f62:	4b5a      	ldr	r3, [pc, #360]	; (80180cc <SX1276OnDio1Irq+0x190>)
 8017f64:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8017f66:	2b00      	cmp	r3, #0
 8017f68:	d118      	bne.n	8017f9c <SX1276OnDio1Irq+0x60>
 8017f6a:	4b58      	ldr	r3, [pc, #352]	; (80180cc <SX1276OnDio1Irq+0x190>)
 8017f6c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8017f6e:	2b00      	cmp	r3, #0
 8017f70:	d114      	bne.n	8017f9c <SX1276OnDio1Irq+0x60>
                    if( SX1276.Settings.Fsk.FixLen == false )
 8017f72:	4b56      	ldr	r3, [pc, #344]	; (80180cc <SX1276OnDio1Irq+0x190>)
 8017f74:	2222      	movs	r2, #34	; 0x22
 8017f76:	5c9b      	ldrb	r3, [r3, r2]
 8017f78:	2201      	movs	r2, #1
 8017f7a:	4053      	eors	r3, r2
 8017f7c:	b2db      	uxtb	r3, r3
 8017f7e:	2b00      	cmp	r3, #0
 8017f80:	d005      	beq.n	8017f8e <SX1276OnDio1Irq+0x52>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 8017f82:	4b53      	ldr	r3, [pc, #332]	; (80180d0 <SX1276OnDio1Irq+0x194>)
 8017f84:	2101      	movs	r1, #1
 8017f86:	0018      	movs	r0, r3
 8017f88:	f7ff fc86 	bl	8017898 <SX1276ReadFifo>
 8017f8c:	e006      	b.n	8017f9c <SX1276OnDio1Irq+0x60>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 8017f8e:	2032      	movs	r0, #50	; 0x32
 8017f90:	f7ff fbba 	bl	8017708 <SX1276Read>
 8017f94:	0003      	movs	r3, r0
 8017f96:	b29a      	uxth	r2, r3
 8017f98:	4b4c      	ldr	r3, [pc, #304]	; (80180cc <SX1276OnDio1Irq+0x190>)
 8017f9a:	875a      	strh	r2, [r3, #58]	; 0x3a
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) >= SX1276.Settings.FskPacketHandler.FifoThresh )
 8017f9c:	4b4b      	ldr	r3, [pc, #300]	; (80180cc <SX1276OnDio1Irq+0x190>)
 8017f9e:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8017fa0:	001a      	movs	r2, r3
 8017fa2:	4b4a      	ldr	r3, [pc, #296]	; (80180cc <SX1276OnDio1Irq+0x190>)
 8017fa4:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8017fa6:	1ad3      	subs	r3, r2, r3
 8017fa8:	4a48      	ldr	r2, [pc, #288]	; (80180cc <SX1276OnDio1Irq+0x190>)
 8017faa:	213e      	movs	r1, #62	; 0x3e
 8017fac:	5c52      	ldrb	r2, [r2, r1]
 8017fae:	4293      	cmp	r3, r2
 8017fb0:	db19      	blt.n	8017fe6 <SX1276OnDio1Irq+0xaa>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh - 1 );
 8017fb2:	4b46      	ldr	r3, [pc, #280]	; (80180cc <SX1276OnDio1Irq+0x190>)
 8017fb4:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8017fb6:	001a      	movs	r2, r3
 8017fb8:	4b46      	ldr	r3, [pc, #280]	; (80180d4 <SX1276OnDio1Irq+0x198>)
 8017fba:	18d0      	adds	r0, r2, r3
 8017fbc:	4b43      	ldr	r3, [pc, #268]	; (80180cc <SX1276OnDio1Irq+0x190>)
 8017fbe:	223e      	movs	r2, #62	; 0x3e
 8017fc0:	5c9b      	ldrb	r3, [r3, r2]
 8017fc2:	3b01      	subs	r3, #1
 8017fc4:	b2db      	uxtb	r3, r3
 8017fc6:	0019      	movs	r1, r3
 8017fc8:	f7ff fc66 	bl	8017898 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.FifoThresh - 1;
 8017fcc:	4b3f      	ldr	r3, [pc, #252]	; (80180cc <SX1276OnDio1Irq+0x190>)
 8017fce:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 8017fd0:	4b3e      	ldr	r3, [pc, #248]	; (80180cc <SX1276OnDio1Irq+0x190>)
 8017fd2:	213e      	movs	r1, #62	; 0x3e
 8017fd4:	5c5b      	ldrb	r3, [r3, r1]
 8017fd6:	b29b      	uxth	r3, r3
 8017fd8:	18d3      	adds	r3, r2, r3
 8017fda:	b29b      	uxth	r3, r3
 8017fdc:	3b01      	subs	r3, #1
 8017fde:	b29a      	uxth	r2, r3
 8017fe0:	4b3a      	ldr	r3, [pc, #232]	; (80180cc <SX1276OnDio1Irq+0x190>)
 8017fe2:	879a      	strh	r2, [r3, #60]	; 0x3c
                break;
 8017fe4:	e02d      	b.n	8018042 <SX1276OnDio1Irq+0x106>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8017fe6:	4b39      	ldr	r3, [pc, #228]	; (80180cc <SX1276OnDio1Irq+0x190>)
 8017fe8:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8017fea:	001a      	movs	r2, r3
 8017fec:	4b39      	ldr	r3, [pc, #228]	; (80180d4 <SX1276OnDio1Irq+0x198>)
 8017fee:	18d0      	adds	r0, r2, r3
 8017ff0:	4b36      	ldr	r3, [pc, #216]	; (80180cc <SX1276OnDio1Irq+0x190>)
 8017ff2:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8017ff4:	b2da      	uxtb	r2, r3
 8017ff6:	4b35      	ldr	r3, [pc, #212]	; (80180cc <SX1276OnDio1Irq+0x190>)
 8017ff8:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8017ffa:	b2db      	uxtb	r3, r3
 8017ffc:	1ad3      	subs	r3, r2, r3
 8017ffe:	b2db      	uxtb	r3, r3
 8018000:	0019      	movs	r1, r3
 8018002:	f7ff fc49 	bl	8017898 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8018006:	4b31      	ldr	r3, [pc, #196]	; (80180cc <SX1276OnDio1Irq+0x190>)
 8018008:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 801800a:	4b30      	ldr	r3, [pc, #192]	; (80180cc <SX1276OnDio1Irq+0x190>)
 801800c:	879a      	strh	r2, [r3, #60]	; 0x3c
                break;
 801800e:	e018      	b.n	8018042 <SX1276OnDio1Irq+0x106>
                TimerStop( &RxTimeoutTimer );
 8018010:	4b31      	ldr	r3, [pc, #196]	; (80180d8 <SX1276OnDio1Irq+0x19c>)
 8018012:	0018      	movs	r0, r3
 8018014:	f7fd fad4 	bl	80155c0 <TimerStop>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXTIMEOUT );
 8018018:	2180      	movs	r1, #128	; 0x80
 801801a:	2012      	movs	r0, #18
 801801c:	f7ff fb60 	bl	80176e0 <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 8018020:	4b2a      	ldr	r3, [pc, #168]	; (80180cc <SX1276OnDio1Irq+0x190>)
 8018022:	2200      	movs	r2, #0
 8018024:	711a      	strb	r2, [r3, #4]
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8018026:	4b2d      	ldr	r3, [pc, #180]	; (80180dc <SX1276OnDio1Irq+0x1a0>)
 8018028:	681b      	ldr	r3, [r3, #0]
 801802a:	2b00      	cmp	r3, #0
 801802c:	d008      	beq.n	8018040 <SX1276OnDio1Irq+0x104>
 801802e:	4b2b      	ldr	r3, [pc, #172]	; (80180dc <SX1276OnDio1Irq+0x1a0>)
 8018030:	681b      	ldr	r3, [r3, #0]
 8018032:	68db      	ldr	r3, [r3, #12]
 8018034:	2b00      	cmp	r3, #0
 8018036:	d003      	beq.n	8018040 <SX1276OnDio1Irq+0x104>
                    RadioEvents->RxTimeout( );
 8018038:	4b28      	ldr	r3, [pc, #160]	; (80180dc <SX1276OnDio1Irq+0x1a0>)
 801803a:	681b      	ldr	r3, [r3, #0]
 801803c:	68db      	ldr	r3, [r3, #12]
 801803e:	4798      	blx	r3
                break;
 8018040:	46c0      	nop			; (mov r8, r8)
            break;
 8018042:	e03e      	b.n	80180c2 <SX1276OnDio1Irq+0x186>
            switch( SX1276.Settings.Modem )
 8018044:	4b21      	ldr	r3, [pc, #132]	; (80180cc <SX1276OnDio1Irq+0x190>)
 8018046:	795b      	ldrb	r3, [r3, #5]
 8018048:	2b00      	cmp	r3, #0
 801804a:	d002      	beq.n	8018052 <SX1276OnDio1Irq+0x116>
 801804c:	2b01      	cmp	r3, #1
 801804e:	d036      	beq.n	80180be <SX1276OnDio1Irq+0x182>
                break;
 8018050:	e036      	b.n	80180c0 <SX1276OnDio1Irq+0x184>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
 8018052:	4b1e      	ldr	r3, [pc, #120]	; (80180cc <SX1276OnDio1Irq+0x190>)
 8018054:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8018056:	001a      	movs	r2, r3
 8018058:	4b1c      	ldr	r3, [pc, #112]	; (80180cc <SX1276OnDio1Irq+0x190>)
 801805a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801805c:	1ad3      	subs	r3, r2, r3
 801805e:	4a1b      	ldr	r2, [pc, #108]	; (80180cc <SX1276OnDio1Irq+0x190>)
 8018060:	213f      	movs	r1, #63	; 0x3f
 8018062:	5c52      	ldrb	r2, [r2, r1]
 8018064:	4293      	cmp	r3, r2
 8018066:	dd15      	ble.n	8018094 <SX1276OnDio1Irq+0x158>
                    SX1276WriteFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.ChunkSize );
 8018068:	4b18      	ldr	r3, [pc, #96]	; (80180cc <SX1276OnDio1Irq+0x190>)
 801806a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801806c:	001a      	movs	r2, r3
 801806e:	4b19      	ldr	r3, [pc, #100]	; (80180d4 <SX1276OnDio1Irq+0x198>)
 8018070:	18d0      	adds	r0, r2, r3
 8018072:	4b16      	ldr	r3, [pc, #88]	; (80180cc <SX1276OnDio1Irq+0x190>)
 8018074:	223f      	movs	r2, #63	; 0x3f
 8018076:	5c9b      	ldrb	r3, [r3, r2]
 8018078:	0019      	movs	r1, r3
 801807a:	f7ff fbfb 	bl	8017874 <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 801807e:	4b13      	ldr	r3, [pc, #76]	; (80180cc <SX1276OnDio1Irq+0x190>)
 8018080:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 8018082:	4b12      	ldr	r3, [pc, #72]	; (80180cc <SX1276OnDio1Irq+0x190>)
 8018084:	213f      	movs	r1, #63	; 0x3f
 8018086:	5c5b      	ldrb	r3, [r3, r1]
 8018088:	b29b      	uxth	r3, r3
 801808a:	18d3      	adds	r3, r2, r3
 801808c:	b29a      	uxth	r2, r3
 801808e:	4b0f      	ldr	r3, [pc, #60]	; (80180cc <SX1276OnDio1Irq+0x190>)
 8018090:	879a      	strh	r2, [r3, #60]	; 0x3c
                break;
 8018092:	e015      	b.n	80180c0 <SX1276OnDio1Irq+0x184>
                    SX1276WriteFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8018094:	4b0d      	ldr	r3, [pc, #52]	; (80180cc <SX1276OnDio1Irq+0x190>)
 8018096:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8018098:	001a      	movs	r2, r3
 801809a:	4b0e      	ldr	r3, [pc, #56]	; (80180d4 <SX1276OnDio1Irq+0x198>)
 801809c:	18d0      	adds	r0, r2, r3
 801809e:	4b0b      	ldr	r3, [pc, #44]	; (80180cc <SX1276OnDio1Irq+0x190>)
 80180a0:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80180a2:	b2da      	uxtb	r2, r3
 80180a4:	4b09      	ldr	r3, [pc, #36]	; (80180cc <SX1276OnDio1Irq+0x190>)
 80180a6:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80180a8:	b2db      	uxtb	r3, r3
 80180aa:	1ad3      	subs	r3, r2, r3
 80180ac:	b2db      	uxtb	r3, r3
 80180ae:	0019      	movs	r1, r3
 80180b0:	f7ff fbe0 	bl	8017874 <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
 80180b4:	4b05      	ldr	r3, [pc, #20]	; (80180cc <SX1276OnDio1Irq+0x190>)
 80180b6:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 80180b8:	4b04      	ldr	r3, [pc, #16]	; (80180cc <SX1276OnDio1Irq+0x190>)
 80180ba:	879a      	strh	r2, [r3, #60]	; 0x3c
                break;
 80180bc:	e000      	b.n	80180c0 <SX1276OnDio1Irq+0x184>
                break;
 80180be:	46c0      	nop			; (mov r8, r8)
            break;
 80180c0:	46c0      	nop			; (mov r8, r8)
    }
}
 80180c2:	46c0      	nop			; (mov r8, r8)
 80180c4:	46bd      	mov	sp, r7
 80180c6:	b002      	add	sp, #8
 80180c8:	bd80      	pop	{r7, pc}
 80180ca:	46c0      	nop			; (mov r8, r8)
 80180cc:	200015b8 	.word	0x200015b8
 80180d0:	200015f2 	.word	0x200015f2
 80180d4:	200010a4 	.word	0x200010a4
 80180d8:	20001620 	.word	0x20001620
 80180dc:	200010a0 	.word	0x200010a0

080180e0 <SX1276OnDio2Irq>:

void SX1276OnDio2Irq( void* context )
{
 80180e0:	b590      	push	{r4, r7, lr}
 80180e2:	b087      	sub	sp, #28
 80180e4:	af00      	add	r7, sp, #0
 80180e6:	6078      	str	r0, [r7, #4]
	LOG_INFO_SX1276((">> SX1276OnDio2Irq\r\n"));

    uint32_t afcChannel = 0;
 80180e8:	2300      	movs	r3, #0
 80180ea:	617b      	str	r3, [r7, #20]

    switch( SX1276.Settings.State )
 80180ec:	4b5c      	ldr	r3, [pc, #368]	; (8018260 <SX1276OnDio2Irq+0x180>)
 80180ee:	791b      	ldrb	r3, [r3, #4]
 80180f0:	2b01      	cmp	r3, #1
 80180f2:	d003      	beq.n	80180fc <SX1276OnDio2Irq+0x1c>
 80180f4:	2b02      	cmp	r3, #2
 80180f6:	d100      	bne.n	80180fa <SX1276OnDio2Irq+0x1a>
 80180f8:	e083      	b.n	8018202 <SX1276OnDio2Irq+0x122>
            default:
                break;
            }
            break;
        default:
            break;
 80180fa:	e0ad      	b.n	8018258 <SX1276OnDio2Irq+0x178>
            switch( SX1276.Settings.Modem )
 80180fc:	4b58      	ldr	r3, [pc, #352]	; (8018260 <SX1276OnDio2Irq+0x180>)
 80180fe:	795b      	ldrb	r3, [r3, #5]
 8018100:	2b00      	cmp	r3, #0
 8018102:	d002      	beq.n	801810a <SX1276OnDio2Irq+0x2a>
 8018104:	2b01      	cmp	r3, #1
 8018106:	d058      	beq.n	80181ba <SX1276OnDio2Irq+0xda>
                break;
 8018108:	e07a      	b.n	8018200 <SX1276OnDio2Irq+0x120>
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 801810a:	4b55      	ldr	r3, [pc, #340]	; (8018260 <SX1276OnDio2Irq+0x180>)
 801810c:	2230      	movs	r2, #48	; 0x30
 801810e:	2101      	movs	r1, #1
 8018110:	5499      	strb	r1, [r3, r2]
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected == true ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == false ) )
 8018112:	4b53      	ldr	r3, [pc, #332]	; (8018260 <SX1276OnDio2Irq+0x180>)
 8018114:	2230      	movs	r2, #48	; 0x30
 8018116:	5c9b      	ldrb	r3, [r3, r2]
 8018118:	2b01      	cmp	r3, #1
 801811a:	d16e      	bne.n	80181fa <SX1276OnDio2Irq+0x11a>
 801811c:	4b50      	ldr	r3, [pc, #320]	; (8018260 <SX1276OnDio2Irq+0x180>)
 801811e:	2231      	movs	r2, #49	; 0x31
 8018120:	5c9b      	ldrb	r3, [r3, r2]
 8018122:	2b00      	cmp	r3, #0
 8018124:	d169      	bne.n	80181fa <SX1276OnDio2Irq+0x11a>
                    TimerStop( &RxTimeoutSyncWord );
 8018126:	4b4f      	ldr	r3, [pc, #316]	; (8018264 <SX1276OnDio2Irq+0x184>)
 8018128:	0018      	movs	r0, r3
 801812a:	f7fd fa49 	bl	80155c0 <TimerStop>
                    SX1276.Settings.FskPacketHandler.SyncWordDetected = true;
 801812e:	4b4c      	ldr	r3, [pc, #304]	; (8018260 <SX1276OnDio2Irq+0x180>)
 8018130:	2231      	movs	r2, #49	; 0x31
 8018132:	2101      	movs	r1, #1
 8018134:	5499      	strb	r1, [r3, r2]
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 8018136:	2011      	movs	r0, #17
 8018138:	f7ff fae6 	bl	8017708 <SX1276Read>
 801813c:	0003      	movs	r3, r0
 801813e:	085b      	lsrs	r3, r3, #1
 8018140:	b2db      	uxtb	r3, r3
 8018142:	425b      	negs	r3, r3
 8018144:	b2db      	uxtb	r3, r3
 8018146:	b259      	sxtb	r1, r3
 8018148:	4b45      	ldr	r3, [pc, #276]	; (8018260 <SX1276OnDio2Irq+0x180>)
 801814a:	2232      	movs	r2, #50	; 0x32
 801814c:	5499      	strb	r1, [r3, r2]
                    afcChannel = ( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 801814e:	201b      	movs	r0, #27
 8018150:	f7ff fada 	bl	8017708 <SX1276Read>
 8018154:	0003      	movs	r3, r0
 8018156:	021c      	lsls	r4, r3, #8
                                     ( uint16_t )SX1276Read( REG_AFCLSB ) );
 8018158:	201c      	movs	r0, #28
 801815a:	f7ff fad5 	bl	8017708 <SX1276Read>
 801815e:	0003      	movs	r3, r0
                    afcChannel = ( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 8018160:	4323      	orrs	r3, r4
 8018162:	617b      	str	r3, [r7, #20]
                    SX_CHANNEL_TO_FREQ( afcChannel, SX1276.Settings.FskPacketHandler.AfcValue );
 8018164:	697b      	ldr	r3, [r7, #20]
 8018166:	0a1b      	lsrs	r3, r3, #8
 8018168:	613b      	str	r3, [r7, #16]
 801816a:	693b      	ldr	r3, [r7, #16]
 801816c:	021b      	lsls	r3, r3, #8
 801816e:	697a      	ldr	r2, [r7, #20]
 8018170:	1ad3      	subs	r3, r2, r3
 8018172:	60fb      	str	r3, [r7, #12]
 8018174:	6939      	ldr	r1, [r7, #16]
 8018176:	000b      	movs	r3, r1
 8018178:	015b      	lsls	r3, r3, #5
 801817a:	1a5b      	subs	r3, r3, r1
 801817c:	019a      	lsls	r2, r3, #6
 801817e:	1ad2      	subs	r2, r2, r3
 8018180:	00d2      	lsls	r2, r2, #3
 8018182:	1850      	adds	r0, r2, r1
 8018184:	68f9      	ldr	r1, [r7, #12]
 8018186:	000b      	movs	r3, r1
 8018188:	015b      	lsls	r3, r3, #5
 801818a:	1a5b      	subs	r3, r3, r1
 801818c:	019a      	lsls	r2, r3, #6
 801818e:	1ad2      	subs	r2, r2, r3
 8018190:	00d2      	lsls	r2, r2, #3
 8018192:	1853      	adds	r3, r2, r1
 8018194:	3380      	adds	r3, #128	; 0x80
 8018196:	0a1b      	lsrs	r3, r3, #8
 8018198:	18c3      	adds	r3, r0, r3
 801819a:	001a      	movs	r2, r3
 801819c:	4b30      	ldr	r3, [pc, #192]	; (8018260 <SX1276OnDio2Irq+0x180>)
 801819e:	635a      	str	r2, [r3, #52]	; 0x34
                    SX1276.Settings.FskPacketHandler.RxGain = ( SX1276Read( REG_LNA ) >> 5 ) & 0x07;
 80181a0:	200c      	movs	r0, #12
 80181a2:	f7ff fab1 	bl	8017708 <SX1276Read>
 80181a6:	0003      	movs	r3, r0
 80181a8:	095b      	lsrs	r3, r3, #5
 80181aa:	b2db      	uxtb	r3, r3
 80181ac:	2207      	movs	r2, #7
 80181ae:	4013      	ands	r3, r2
 80181b0:	b2d9      	uxtb	r1, r3
 80181b2:	4b2b      	ldr	r3, [pc, #172]	; (8018260 <SX1276OnDio2Irq+0x180>)
 80181b4:	2238      	movs	r2, #56	; 0x38
 80181b6:	5499      	strb	r1, [r3, r2]
                break;
 80181b8:	e01f      	b.n	80181fa <SX1276OnDio2Irq+0x11a>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 80181ba:	4b29      	ldr	r3, [pc, #164]	; (8018260 <SX1276OnDio2Irq+0x180>)
 80181bc:	2253      	movs	r2, #83	; 0x53
 80181be:	5c9b      	ldrb	r3, [r3, r2]
 80181c0:	2b00      	cmp	r3, #0
 80181c2:	d01c      	beq.n	80181fe <SX1276OnDio2Irq+0x11e>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 80181c4:	2102      	movs	r1, #2
 80181c6:	2012      	movs	r0, #18
 80181c8:	f7ff fa8a 	bl	80176e0 <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 80181cc:	4b26      	ldr	r3, [pc, #152]	; (8018268 <SX1276OnDio2Irq+0x188>)
 80181ce:	681b      	ldr	r3, [r3, #0]
 80181d0:	2b00      	cmp	r3, #0
 80181d2:	d014      	beq.n	80181fe <SX1276OnDio2Irq+0x11e>
 80181d4:	4b24      	ldr	r3, [pc, #144]	; (8018268 <SX1276OnDio2Irq+0x188>)
 80181d6:	681b      	ldr	r3, [r3, #0]
 80181d8:	695b      	ldr	r3, [r3, #20]
 80181da:	2b00      	cmp	r3, #0
 80181dc:	d00f      	beq.n	80181fe <SX1276OnDio2Irq+0x11e>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 80181de:	4b22      	ldr	r3, [pc, #136]	; (8018268 <SX1276OnDio2Irq+0x188>)
 80181e0:	681b      	ldr	r3, [r3, #0]
 80181e2:	695c      	ldr	r4, [r3, #20]
 80181e4:	201c      	movs	r0, #28
 80181e6:	f7ff fa8f 	bl	8017708 <SX1276Read>
 80181ea:	0003      	movs	r3, r0
 80181ec:	001a      	movs	r2, r3
 80181ee:	233f      	movs	r3, #63	; 0x3f
 80181f0:	4013      	ands	r3, r2
 80181f2:	b2db      	uxtb	r3, r3
 80181f4:	0018      	movs	r0, r3
 80181f6:	47a0      	blx	r4
                break;
 80181f8:	e001      	b.n	80181fe <SX1276OnDio2Irq+0x11e>
                break;
 80181fa:	46c0      	nop			; (mov r8, r8)
 80181fc:	e02c      	b.n	8018258 <SX1276OnDio2Irq+0x178>
                break;
 80181fe:	46c0      	nop			; (mov r8, r8)
            break;
 8018200:	e02a      	b.n	8018258 <SX1276OnDio2Irq+0x178>
            switch( SX1276.Settings.Modem )
 8018202:	4b17      	ldr	r3, [pc, #92]	; (8018260 <SX1276OnDio2Irq+0x180>)
 8018204:	795b      	ldrb	r3, [r3, #5]
 8018206:	2b00      	cmp	r3, #0
 8018208:	d022      	beq.n	8018250 <SX1276OnDio2Irq+0x170>
 801820a:	2b01      	cmp	r3, #1
 801820c:	d000      	beq.n	8018210 <SX1276OnDio2Irq+0x130>
                break;
 801820e:	e022      	b.n	8018256 <SX1276OnDio2Irq+0x176>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 8018210:	4b13      	ldr	r3, [pc, #76]	; (8018260 <SX1276OnDio2Irq+0x180>)
 8018212:	2253      	movs	r2, #83	; 0x53
 8018214:	5c9b      	ldrb	r3, [r3, r2]
 8018216:	2b00      	cmp	r3, #0
 8018218:	d01c      	beq.n	8018254 <SX1276OnDio2Irq+0x174>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 801821a:	2102      	movs	r1, #2
 801821c:	2012      	movs	r0, #18
 801821e:	f7ff fa5f 	bl	80176e0 <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 8018222:	4b11      	ldr	r3, [pc, #68]	; (8018268 <SX1276OnDio2Irq+0x188>)
 8018224:	681b      	ldr	r3, [r3, #0]
 8018226:	2b00      	cmp	r3, #0
 8018228:	d014      	beq.n	8018254 <SX1276OnDio2Irq+0x174>
 801822a:	4b0f      	ldr	r3, [pc, #60]	; (8018268 <SX1276OnDio2Irq+0x188>)
 801822c:	681b      	ldr	r3, [r3, #0]
 801822e:	695b      	ldr	r3, [r3, #20]
 8018230:	2b00      	cmp	r3, #0
 8018232:	d00f      	beq.n	8018254 <SX1276OnDio2Irq+0x174>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 8018234:	4b0c      	ldr	r3, [pc, #48]	; (8018268 <SX1276OnDio2Irq+0x188>)
 8018236:	681b      	ldr	r3, [r3, #0]
 8018238:	695c      	ldr	r4, [r3, #20]
 801823a:	201c      	movs	r0, #28
 801823c:	f7ff fa64 	bl	8017708 <SX1276Read>
 8018240:	0003      	movs	r3, r0
 8018242:	001a      	movs	r2, r3
 8018244:	233f      	movs	r3, #63	; 0x3f
 8018246:	4013      	ands	r3, r2
 8018248:	b2db      	uxtb	r3, r3
 801824a:	0018      	movs	r0, r3
 801824c:	47a0      	blx	r4
                break;
 801824e:	e001      	b.n	8018254 <SX1276OnDio2Irq+0x174>
                break;
 8018250:	46c0      	nop			; (mov r8, r8)
 8018252:	e000      	b.n	8018256 <SX1276OnDio2Irq+0x176>
                break;
 8018254:	46c0      	nop			; (mov r8, r8)
            break;
 8018256:	46c0      	nop			; (mov r8, r8)
    }
}
 8018258:	46c0      	nop			; (mov r8, r8)
 801825a:	46bd      	mov	sp, r7
 801825c:	b007      	add	sp, #28
 801825e:	bd90      	pop	{r4, r7, pc}
 8018260:	200015b8 	.word	0x200015b8
 8018264:	200015a0 	.word	0x200015a0
 8018268:	200010a0 	.word	0x200010a0

0801826c <SX1276OnDio3Irq>:

void SX1276OnDio3Irq( void* context )
{
 801826c:	b580      	push	{r7, lr}
 801826e:	b082      	sub	sp, #8
 8018270:	af00      	add	r7, sp, #0
 8018272:	6078      	str	r0, [r7, #4]
	LOG_INFO_SX1276((">> SX1276OnDio3Irq\r\n"));

    switch( SX1276.Settings.Modem )
 8018274:	4b1e      	ldr	r3, [pc, #120]	; (80182f0 <SX1276OnDio3Irq+0x84>)
 8018276:	795b      	ldrb	r3, [r3, #5]
 8018278:	2b00      	cmp	r3, #0
 801827a:	d031      	beq.n	80182e0 <SX1276OnDio3Irq+0x74>
 801827c:	2b01      	cmp	r3, #1
 801827e:	d000      	beq.n	8018282 <SX1276OnDio3Irq+0x16>
                RadioEvents->CadDone( false );
            }
        }
        break;
    default:
        break;
 8018280:	e031      	b.n	80182e6 <SX1276OnDio3Irq+0x7a>
        if( ( SX1276Read( REG_LR_IRQFLAGS ) & RFLR_IRQFLAGS_CADDETECTED ) == RFLR_IRQFLAGS_CADDETECTED )
 8018282:	2012      	movs	r0, #18
 8018284:	f7ff fa40 	bl	8017708 <SX1276Read>
 8018288:	0003      	movs	r3, r0
 801828a:	001a      	movs	r2, r3
 801828c:	2301      	movs	r3, #1
 801828e:	4013      	ands	r3, r2
 8018290:	2b01      	cmp	r3, #1
 8018292:	d112      	bne.n	80182ba <SX1276OnDio3Irq+0x4e>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDETECTED | RFLR_IRQFLAGS_CADDONE );
 8018294:	2105      	movs	r1, #5
 8018296:	2012      	movs	r0, #18
 8018298:	f7ff fa22 	bl	80176e0 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 801829c:	4b15      	ldr	r3, [pc, #84]	; (80182f4 <SX1276OnDio3Irq+0x88>)
 801829e:	681b      	ldr	r3, [r3, #0]
 80182a0:	2b00      	cmp	r3, #0
 80182a2:	d01f      	beq.n	80182e4 <SX1276OnDio3Irq+0x78>
 80182a4:	4b13      	ldr	r3, [pc, #76]	; (80182f4 <SX1276OnDio3Irq+0x88>)
 80182a6:	681b      	ldr	r3, [r3, #0]
 80182a8:	699b      	ldr	r3, [r3, #24]
 80182aa:	2b00      	cmp	r3, #0
 80182ac:	d01a      	beq.n	80182e4 <SX1276OnDio3Irq+0x78>
                RadioEvents->CadDone( true );
 80182ae:	4b11      	ldr	r3, [pc, #68]	; (80182f4 <SX1276OnDio3Irq+0x88>)
 80182b0:	681b      	ldr	r3, [r3, #0]
 80182b2:	699b      	ldr	r3, [r3, #24]
 80182b4:	2001      	movs	r0, #1
 80182b6:	4798      	blx	r3
        break;
 80182b8:	e014      	b.n	80182e4 <SX1276OnDio3Irq+0x78>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDONE );
 80182ba:	2104      	movs	r1, #4
 80182bc:	2012      	movs	r0, #18
 80182be:	f7ff fa0f 	bl	80176e0 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 80182c2:	4b0c      	ldr	r3, [pc, #48]	; (80182f4 <SX1276OnDio3Irq+0x88>)
 80182c4:	681b      	ldr	r3, [r3, #0]
 80182c6:	2b00      	cmp	r3, #0
 80182c8:	d00c      	beq.n	80182e4 <SX1276OnDio3Irq+0x78>
 80182ca:	4b0a      	ldr	r3, [pc, #40]	; (80182f4 <SX1276OnDio3Irq+0x88>)
 80182cc:	681b      	ldr	r3, [r3, #0]
 80182ce:	699b      	ldr	r3, [r3, #24]
 80182d0:	2b00      	cmp	r3, #0
 80182d2:	d007      	beq.n	80182e4 <SX1276OnDio3Irq+0x78>
                RadioEvents->CadDone( false );
 80182d4:	4b07      	ldr	r3, [pc, #28]	; (80182f4 <SX1276OnDio3Irq+0x88>)
 80182d6:	681b      	ldr	r3, [r3, #0]
 80182d8:	699b      	ldr	r3, [r3, #24]
 80182da:	2000      	movs	r0, #0
 80182dc:	4798      	blx	r3
        break;
 80182de:	e001      	b.n	80182e4 <SX1276OnDio3Irq+0x78>
        break;
 80182e0:	46c0      	nop			; (mov r8, r8)
 80182e2:	e000      	b.n	80182e6 <SX1276OnDio3Irq+0x7a>
        break;
 80182e4:	46c0      	nop			; (mov r8, r8)
    }
}
 80182e6:	46c0      	nop			; (mov r8, r8)
 80182e8:	46bd      	mov	sp, r7
 80182ea:	b002      	add	sp, #8
 80182ec:	bd80      	pop	{r7, pc}
 80182ee:	46c0      	nop			; (mov r8, r8)
 80182f0:	200015b8 	.word	0x200015b8
 80182f4:	200010a0 	.word	0x200010a0

080182f8 <SX1276OnDio4Irq>:

void SX1276OnDio4Irq( void* context )
{
 80182f8:	b580      	push	{r7, lr}
 80182fa:	b082      	sub	sp, #8
 80182fc:	af00      	add	r7, sp, #0
 80182fe:	6078      	str	r0, [r7, #4]
	LOG_INFO_SX1276((">> SX1276OnDio4Irq\r\n"));

    switch( SX1276.Settings.Modem )
 8018300:	4b0b      	ldr	r3, [pc, #44]	; (8018330 <SX1276OnDio4Irq+0x38>)
 8018302:	795b      	ldrb	r3, [r3, #5]
 8018304:	2b00      	cmp	r3, #0
 8018306:	d002      	beq.n	801830e <SX1276OnDio4Irq+0x16>
 8018308:	2b01      	cmp	r3, #1
 801830a:	d00a      	beq.n	8018322 <SX1276OnDio4Irq+0x2a>
        }
        break;
    case MODEM_LORA:
        break;
    default:
        break;
 801830c:	e00c      	b.n	8018328 <SX1276OnDio4Irq+0x30>
            if( SX1276.Settings.FskPacketHandler.PreambleDetected == false )
 801830e:	4b08      	ldr	r3, [pc, #32]	; (8018330 <SX1276OnDio4Irq+0x38>)
 8018310:	2230      	movs	r2, #48	; 0x30
 8018312:	5c9b      	ldrb	r3, [r3, r2]
 8018314:	2b00      	cmp	r3, #0
 8018316:	d106      	bne.n	8018326 <SX1276OnDio4Irq+0x2e>
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 8018318:	4b05      	ldr	r3, [pc, #20]	; (8018330 <SX1276OnDio4Irq+0x38>)
 801831a:	2230      	movs	r2, #48	; 0x30
 801831c:	2101      	movs	r1, #1
 801831e:	5499      	strb	r1, [r3, r2]
        break;
 8018320:	e001      	b.n	8018326 <SX1276OnDio4Irq+0x2e>
        break;
 8018322:	46c0      	nop			; (mov r8, r8)
 8018324:	e000      	b.n	8018328 <SX1276OnDio4Irq+0x30>
        break;
 8018326:	46c0      	nop			; (mov r8, r8)
    }
}
 8018328:	46c0      	nop			; (mov r8, r8)
 801832a:	46bd      	mov	sp, r7
 801832c:	b002      	add	sp, #8
 801832e:	bd80      	pop	{r7, pc}
 8018330:	200015b8 	.word	0x200015b8

08018334 <_itsdk_console_private>:

/**
 * Dafault Operation
 */

static itsdk_console_return_e _itsdk_console_private(char * buffer, uint8_t sz) {
 8018334:	b5b0      	push	{r4, r5, r7, lr}
 8018336:	b084      	sub	sp, #16
 8018338:	af00      	add	r7, sp, #0
 801833a:	6078      	str	r0, [r7, #4]
 801833c:	000a      	movs	r2, r1
 801833e:	1cfb      	adds	r3, r7, #3
 8018340:	701a      	strb	r2, [r3, #0]

	if ( sz == 1 ) {
 8018342:	1cfb      	adds	r3, r7, #3
 8018344:	781b      	ldrb	r3, [r3, #0]
 8018346:	2b01      	cmp	r3, #1
 8018348:	d000      	beq.n	801834c <_itsdk_console_private+0x18>
 801834a:	e0d1      	b.n	80184f0 <_itsdk_console_private+0x1bc>
		switch ( buffer[0] ) {
 801834c:	687b      	ldr	r3, [r7, #4]
 801834e:	781b      	ldrb	r3, [r3, #0]
 8018350:	3b3f      	subs	r3, #63	; 0x3f
 8018352:	2b35      	cmp	r3, #53	; 0x35
 8018354:	d900      	bls.n	8018358 <_itsdk_console_private+0x24>
 8018356:	e0e5      	b.n	8018524 <_itsdk_console_private+0x1f0>
 8018358:	009a      	lsls	r2, r3, #2
 801835a:	4b78      	ldr	r3, [pc, #480]	; (801853c <_itsdk_console_private+0x208>)
 801835c:	18d3      	adds	r3, r2, r3
 801835e:	681b      	ldr	r3, [r3, #0]
 8018360:	469f      	mov	pc, r3
		case '?':
			// help
			_itsdk_console_printf("X          : exit console\r\n");
 8018362:	4b77      	ldr	r3, [pc, #476]	; (8018540 <_itsdk_console_private+0x20c>)
 8018364:	0018      	movs	r0, r3
 8018366:	f000 f9c3 	bl	80186f0 <_itsdk_console_printf>
			_itsdk_console_printf("R          : reset device\r\n");
 801836a:	4b76      	ldr	r3, [pc, #472]	; (8018544 <_itsdk_console_private+0x210>)
 801836c:	0018      	movs	r0, r3
 801836e:	f000 f9bf 	bl	80186f0 <_itsdk_console_printf>
			_itsdk_console_printf("R!         : clear the whole eeprom\r\n");
 8018372:	4b75      	ldr	r3, [pc, #468]	; (8018548 <_itsdk_console_private+0x214>)
 8018374:	0018      	movs	r0, r3
 8018376:	f000 f9bb 	bl	80186f0 <_itsdk_console_printf>
			_itsdk_console_printf("l / L      : switch LowPower ON / OFF\r\n");
 801837a:	4b74      	ldr	r3, [pc, #464]	; (801854c <_itsdk_console_private+0x218>)
 801837c:	0018      	movs	r0, r3
 801837e:	f000 f9b7 	bl	80186f0 <_itsdk_console_printf>
			_itsdk_console_printf("s          : print device state\r\n");
 8018382:	4b73      	ldr	r3, [pc, #460]	; (8018550 <_itsdk_console_private+0x21c>)
 8018384:	0018      	movs	r0, r3
 8018386:	f000 f9b3 	bl	80186f0 <_itsdk_console_printf>
			_itsdk_console_printf("t          : print current time in S\r\n");
 801838a:	4b72      	ldr	r3, [pc, #456]	; (8018554 <_itsdk_console_private+0x220>)
 801838c:	0018      	movs	r0, r3
 801838e:	f000 f9af 	bl	80186f0 <_itsdk_console_printf>
#if ITSDK_WITH_ADC != __ADC_NONE
			_itsdk_console_printf("T          : print current cpu temperature in oC\r\n");
 8018392:	4b71      	ldr	r3, [pc, #452]	; (8018558 <_itsdk_console_private+0x224>)
 8018394:	0018      	movs	r0, r3
 8018396:	f000 f9ab 	bl	80186f0 <_itsdk_console_printf>
			_itsdk_console_printf("b          : print battery level\r\n");
 801839a:	4b70      	ldr	r3, [pc, #448]	; (801855c <_itsdk_console_private+0x228>)
 801839c:	0018      	movs	r0, r3
 801839e:	f000 f9a7 	bl	80186f0 <_itsdk_console_printf>
			_itsdk_console_printf("B          : print VCC level\r\n");
 80183a2:	4b6f      	ldr	r3, [pc, #444]	; (8018560 <_itsdk_console_private+0x22c>)
 80183a4:	0018      	movs	r0, r3
 80183a6:	f000 f9a3 	bl	80186f0 <_itsdk_console_printf>
#endif
			_itsdk_console_printf("r          : print last Reset Cause\r\n");
 80183aa:	4b6e      	ldr	r3, [pc, #440]	; (8018564 <_itsdk_console_private+0x230>)
 80183ac:	0018      	movs	r0, r3
 80183ae:	f000 f99f 	bl	80186f0 <_itsdk_console_printf>
#if ITSDK_RADIO_CERTIF == __ENABLE && (ITSDK_WITH_SIGFOX_LIB == __ENABLE || ITSDK_WITH_LORAWAN_LIB == __ENABLE )
			_itsdk_console_printf("c:0:nnn    : CW for CE tests with power\r\n");
			_itsdk_console_printf("c:1:nnn    : CW for EU Sigfox tests with power\r\n");
#endif

			return ITSDK_CONSOLE_SUCCES;
 80183b2:	2300      	movs	r3, #0
 80183b4:	e0bd      	b.n	8018532 <_itsdk_console_private+0x1fe>
		case 'X':
			// exit console
			__console.loginState=0;
 80183b6:	4b6c      	ldr	r3, [pc, #432]	; (8018568 <_itsdk_console_private+0x234>)
 80183b8:	781a      	ldrb	r2, [r3, #0]
 80183ba:	2101      	movs	r1, #1
 80183bc:	438a      	bics	r2, r1
 80183be:	701a      	strb	r2, [r3, #0]
			goto success;
 80183c0:	e0b2      	b.n	8018528 <_itsdk_console_private+0x1f4>
		case 't':
			// print time
			_itsdk_console_printf("Run time is %d s\r\n",(uint32_t)(itsdk_time_get_ms()/1000L));
 80183c2:	f004 f9b7 	bl	801c734 <itsdk_time_get_ms>
 80183c6:	22fa      	movs	r2, #250	; 0xfa
 80183c8:	0092      	lsls	r2, r2, #2
 80183ca:	2300      	movs	r3, #0
 80183cc:	f7e8 f87c 	bl	80004c8 <__aeabi_uldivmod>
 80183d0:	0003      	movs	r3, r0
 80183d2:	000c      	movs	r4, r1
 80183d4:	001a      	movs	r2, r3
 80183d6:	4b65      	ldr	r3, [pc, #404]	; (801856c <_itsdk_console_private+0x238>)
 80183d8:	0011      	movs	r1, r2
 80183da:	0018      	movs	r0, r3
 80183dc:	f000 f988 	bl	80186f0 <_itsdk_console_printf>
			goto success;
 80183e0:	e0a2      	b.n	8018528 <_itsdk_console_private+0x1f4>
#if ITSDK_WITH_ADC != __ADC_NONE
		case 'T':
			// print temperature
			{
			uint16_t t = adc_getTemperature();
 80183e2:	f004 fc21 	bl	801cc28 <adc_getTemperature>
 80183e6:	0003      	movs	r3, r0
 80183e8:	001a      	movs	r2, r3
 80183ea:	240e      	movs	r4, #14
 80183ec:	193b      	adds	r3, r7, r4
 80183ee:	801a      	strh	r2, [r3, #0]
			_itsdk_console_printf("Temperature is %d.%doC\r\n",t/100,t-((t/100)*100));
 80183f0:	193b      	adds	r3, r7, r4
 80183f2:	881b      	ldrh	r3, [r3, #0]
 80183f4:	2164      	movs	r1, #100	; 0x64
 80183f6:	0018      	movs	r0, r3
 80183f8:	f7e7 fe8e 	bl	8000118 <__udivsi3>
 80183fc:	0003      	movs	r3, r0
 80183fe:	b29b      	uxth	r3, r3
 8018400:	001d      	movs	r5, r3
 8018402:	0022      	movs	r2, r4
 8018404:	18bb      	adds	r3, r7, r2
 8018406:	881c      	ldrh	r4, [r3, #0]
 8018408:	18bb      	adds	r3, r7, r2
 801840a:	881b      	ldrh	r3, [r3, #0]
 801840c:	2164      	movs	r1, #100	; 0x64
 801840e:	0018      	movs	r0, r3
 8018410:	f7e7 fe82 	bl	8000118 <__udivsi3>
 8018414:	0003      	movs	r3, r0
 8018416:	b29b      	uxth	r3, r3
 8018418:	001a      	movs	r2, r3
 801841a:	0013      	movs	r3, r2
 801841c:	065b      	lsls	r3, r3, #25
 801841e:	1a9b      	subs	r3, r3, r2
 8018420:	009b      	lsls	r3, r3, #2
 8018422:	189b      	adds	r3, r3, r2
 8018424:	00db      	lsls	r3, r3, #3
 8018426:	1a9b      	subs	r3, r3, r2
 8018428:	009b      	lsls	r3, r3, #2
 801842a:	18e2      	adds	r2, r4, r3
 801842c:	4b50      	ldr	r3, [pc, #320]	; (8018570 <_itsdk_console_private+0x23c>)
 801842e:	0029      	movs	r1, r5
 8018430:	0018      	movs	r0, r3
 8018432:	f000 f95d 	bl	80186f0 <_itsdk_console_printf>
			goto success;
 8018436:	e077      	b.n	8018528 <_itsdk_console_private+0x1f4>
			}
		case 'b':
			// battery level
			_itsdk_console_printf("Battery level %dmV\r\n",(uint32_t)(adc_getVBat()));
 8018438:	f004 fc7e 	bl	801cd38 <adc_getVBat>
 801843c:	0003      	movs	r3, r0
 801843e:	001a      	movs	r2, r3
 8018440:	4b4c      	ldr	r3, [pc, #304]	; (8018574 <_itsdk_console_private+0x240>)
 8018442:	0011      	movs	r1, r2
 8018444:	0018      	movs	r0, r3
 8018446:	f000 f953 	bl	80186f0 <_itsdk_console_printf>
			goto success;
 801844a:	e06d      	b.n	8018528 <_itsdk_console_private+0x1f4>
		case 'B':
			// Vcc level
			_itsdk_console_printf("VCC level %dmV\r\n",(uint32_t)(adc_getVdd()));
 801844c:	f004 fc44 	bl	801ccd8 <adc_getVdd>
 8018450:	0003      	movs	r3, r0
 8018452:	001a      	movs	r2, r3
 8018454:	4b48      	ldr	r3, [pc, #288]	; (8018578 <_itsdk_console_private+0x244>)
 8018456:	0011      	movs	r1, r2
 8018458:	0018      	movs	r0, r3
 801845a:	f000 f949 	bl	80186f0 <_itsdk_console_printf>
			goto success;
 801845e:	e063      	b.n	8018528 <_itsdk_console_private+0x1f4>
#endif
		case 'r':
			// Last Reset cause
			_itsdk_console_printf("Reset: ");
 8018460:	4b46      	ldr	r3, [pc, #280]	; (801857c <_itsdk_console_private+0x248>)
 8018462:	0018      	movs	r0, r3
 8018464:	f000 f944 	bl	80186f0 <_itsdk_console_printf>
			switch(itsdk_state.lastResetCause) {
 8018468:	4b45      	ldr	r3, [pc, #276]	; (8018580 <_itsdk_console_private+0x24c>)
 801846a:	781b      	ldrb	r3, [r3, #0]
 801846c:	2b06      	cmp	r3, #6
 801846e:	d827      	bhi.n	80184c0 <_itsdk_console_private+0x18c>
 8018470:	009a      	lsls	r2, r3, #2
 8018472:	4b44      	ldr	r3, [pc, #272]	; (8018584 <_itsdk_console_private+0x250>)
 8018474:	18d3      	adds	r3, r2, r3
 8018476:	681b      	ldr	r3, [r3, #0]
 8018478:	469f      	mov	pc, r3
			case RESET_CAUSE_BOR: _itsdk_console_printf("BOR\r\n"); break;
 801847a:	4b43      	ldr	r3, [pc, #268]	; (8018588 <_itsdk_console_private+0x254>)
 801847c:	0018      	movs	r0, r3
 801847e:	f000 f937 	bl	80186f0 <_itsdk_console_printf>
 8018482:	e022      	b.n	80184ca <_itsdk_console_private+0x196>
			case RESET_CAUSE_RESET_PIN: _itsdk_console_printf("RESET PIN\r\n"); break;
 8018484:	4b41      	ldr	r3, [pc, #260]	; (801858c <_itsdk_console_private+0x258>)
 8018486:	0018      	movs	r0, r3
 8018488:	f000 f932 	bl	80186f0 <_itsdk_console_printf>
 801848c:	e01d      	b.n	80184ca <_itsdk_console_private+0x196>
			case RESET_CAUSE_POWER_ON: _itsdk_console_printf("POWER ON\r\n"); break;
 801848e:	4b40      	ldr	r3, [pc, #256]	; (8018590 <_itsdk_console_private+0x25c>)
 8018490:	0018      	movs	r0, r3
 8018492:	f000 f92d 	bl	80186f0 <_itsdk_console_printf>
 8018496:	e018      	b.n	80184ca <_itsdk_console_private+0x196>
			case RESET_CAUSE_SOFTWARE: _itsdk_console_printf("SOFT\r\n"); break;
 8018498:	4b3e      	ldr	r3, [pc, #248]	; (8018594 <_itsdk_console_private+0x260>)
 801849a:	0018      	movs	r0, r3
 801849c:	f000 f928 	bl	80186f0 <_itsdk_console_printf>
 80184a0:	e013      	b.n	80184ca <_itsdk_console_private+0x196>
			case RESET_CAUSE_IWDG: _itsdk_console_printf("IWDG\r\n"); break;
 80184a2:	4b3d      	ldr	r3, [pc, #244]	; (8018598 <_itsdk_console_private+0x264>)
 80184a4:	0018      	movs	r0, r3
 80184a6:	f000 f923 	bl	80186f0 <_itsdk_console_printf>
 80184aa:	e00e      	b.n	80184ca <_itsdk_console_private+0x196>
			case RESET_CAUSE_WWDG: _itsdk_console_printf("WWDG\r\n"); break;
 80184ac:	4b3b      	ldr	r3, [pc, #236]	; (801859c <_itsdk_console_private+0x268>)
 80184ae:	0018      	movs	r0, r3
 80184b0:	f000 f91e 	bl	80186f0 <_itsdk_console_printf>
 80184b4:	e009      	b.n	80184ca <_itsdk_console_private+0x196>
			case RESET_CAUSE_LOWPOWER: _itsdk_console_printf("LOW POWER"); break;
 80184b6:	4b3a      	ldr	r3, [pc, #232]	; (80185a0 <_itsdk_console_private+0x26c>)
 80184b8:	0018      	movs	r0, r3
 80184ba:	f000 f919 	bl	80186f0 <_itsdk_console_printf>
 80184be:	e004      	b.n	80184ca <_itsdk_console_private+0x196>
			default:
				_itsdk_console_printf("UNKNOWN\r\n"); break;
 80184c0:	4b38      	ldr	r3, [pc, #224]	; (80185a4 <_itsdk_console_private+0x270>)
 80184c2:	0018      	movs	r0, r3
 80184c4:	f000 f914 	bl	80186f0 <_itsdk_console_printf>
 80184c8:	46c0      	nop			; (mov r8, r8)
			}
			goto success;
 80184ca:	e02d      	b.n	8018528 <_itsdk_console_private+0x1f4>
		case 'R':
			// Reset device
			_itsdk_console_printf("OK\r\n");
 80184cc:	4b36      	ldr	r3, [pc, #216]	; (80185a8 <_itsdk_console_private+0x274>)
 80184ce:	0018      	movs	r0, r3
 80184d0:	f000 f90e 	bl	80186f0 <_itsdk_console_printf>
			itsdk_reset();
 80184d4:	f005 f8e4 	bl	801d6a0 <itsdk_reset>
			_itsdk_console_printf("KO\r\n");			// never reached...
 80184d8:	4b34      	ldr	r3, [pc, #208]	; (80185ac <_itsdk_console_private+0x278>)
 80184da:	0018      	movs	r0, r3
 80184dc:	f000 f908 	bl	80186f0 <_itsdk_console_printf>
			return ITSDK_CONSOLE_FAILED;
 80184e0:	2302      	movs	r3, #2
 80184e2:	e026      	b.n	8018532 <_itsdk_console_private+0x1fe>
		case 'l':
			// switch lowPower On
			lowPower_enable();
 80184e4:	f003 fde2 	bl	801c0ac <lowPower_enable>
			goto success;
 80184e8:	e01e      	b.n	8018528 <_itsdk_console_private+0x1f4>
		case 'L':
			// switch LowPower Off
			lowPower_disable();
 80184ea:	f003 fde9 	bl	801c0c0 <lowPower_disable>
			goto success;
 80184ee:	e01b      	b.n	8018528 <_itsdk_console_private+0x1f4>
		}
	} else if (sz==2) {
 80184f0:	1cfb      	adds	r3, r7, #3
 80184f2:	781b      	ldrb	r3, [r3, #0]
 80184f4:	2b02      	cmp	r3, #2
 80184f6:	d115      	bne.n	8018524 <_itsdk_console_private+0x1f0>
		if ( buffer[0] == 'R' && buffer[1] == '!' ) {
 80184f8:	687b      	ldr	r3, [r7, #4]
 80184fa:	781b      	ldrb	r3, [r3, #0]
 80184fc:	2b52      	cmp	r3, #82	; 0x52
 80184fe:	d111      	bne.n	8018524 <_itsdk_console_private+0x1f0>
 8018500:	687b      	ldr	r3, [r7, #4]
 8018502:	3301      	adds	r3, #1
 8018504:	781b      	ldrb	r3, [r3, #0]
 8018506:	2b21      	cmp	r3, #33	; 0x21
 8018508:	d10c      	bne.n	8018524 <_itsdk_console_private+0x1f0>
			// Clear all the eeprom content the reset - hard factory default
			_itsdk_console_printf("OK\r\n");
 801850a:	4b27      	ldr	r3, [pc, #156]	; (80185a8 <_itsdk_console_private+0x274>)
 801850c:	0018      	movs	r0, r3
 801850e:	f000 f8ef 	bl	80186f0 <_itsdk_console_printf>
			eeprom_clearAllEprom();
 8018512:	f000 fa2f 	bl	8018974 <eeprom_clearAllEprom>
			itsdk_delayMs(100);
 8018516:	2064      	movs	r0, #100	; 0x64
 8018518:	f005 f914 	bl	801d744 <itsdk_delayMs>
			itsdk_reset();
 801851c:	f005 f8c0 	bl	801d6a0 <itsdk_reset>
			return ITSDK_CONSOLE_FAILED;
 8018520:	2302      	movs	r3, #2
 8018522:	e006      	b.n	8018532 <_itsdk_console_private+0x1fe>
			 goto success;
		 } else goto failed;
		}
	}
#endif
	return ITSDK_CONSOLE_NOTFOUND;
 8018524:	2301      	movs	r3, #1
 8018526:	e004      	b.n	8018532 <_itsdk_console_private+0x1fe>

success:
	_itsdk_console_printf("OK\r\n");
 8018528:	4b1f      	ldr	r3, [pc, #124]	; (80185a8 <_itsdk_console_private+0x274>)
 801852a:	0018      	movs	r0, r3
 801852c:	f000 f8e0 	bl	80186f0 <_itsdk_console_printf>
	return ITSDK_CONSOLE_SUCCES;
 8018530:	2300      	movs	r3, #0
failed:
	_itsdk_console_printf("KO\r\n");
	return ITSDK_CONSOLE_FAILED;
}
 8018532:	0018      	movs	r0, r3
 8018534:	46bd      	mov	sp, r7
 8018536:	b004      	add	sp, #16
 8018538:	bdb0      	pop	{r4, r5, r7, pc}
 801853a:	46c0      	nop			; (mov r8, r8)
 801853c:	08020dd0 	.word	0x08020dd0
 8018540:	0801f8c4 	.word	0x0801f8c4
 8018544:	0801f8e0 	.word	0x0801f8e0
 8018548:	0801f8fc 	.word	0x0801f8fc
 801854c:	0801f924 	.word	0x0801f924
 8018550:	0801f94c 	.word	0x0801f94c
 8018554:	0801f970 	.word	0x0801f970
 8018558:	0801f998 	.word	0x0801f998
 801855c:	0801f9cc 	.word	0x0801f9cc
 8018560:	0801f9f0 	.word	0x0801f9f0
 8018564:	0801fa10 	.word	0x0801fa10
 8018568:	200011a8 	.word	0x200011a8
 801856c:	0801fa38 	.word	0x0801fa38
 8018570:	0801fa4c 	.word	0x0801fa4c
 8018574:	0801fa68 	.word	0x0801fa68
 8018578:	0801fa80 	.word	0x0801fa80
 801857c:	0801fa94 	.word	0x0801fa94
 8018580:	20001670 	.word	0x20001670
 8018584:	08020ea8 	.word	0x08020ea8
 8018588:	0801fa9c 	.word	0x0801fa9c
 801858c:	0801faa4 	.word	0x0801faa4
 8018590:	0801fab0 	.word	0x0801fab0
 8018594:	0801fabc 	.word	0x0801fabc
 8018598:	0801fac4 	.word	0x0801fac4
 801859c:	0801facc 	.word	0x0801facc
 80185a0:	0801fad4 	.word	0x0801fad4
 80185a4:	0801fae0 	.word	0x0801fae0
 80185a8:	0801faec 	.word	0x0801faec
 80185ac:	0801faf4 	.word	0x0801faf4

080185b0 <_itsdk_console_public>:

static itsdk_console_return_e _itsdk_console_public(char * buffer, uint8_t sz) {
 80185b0:	b580      	push	{r7, lr}
 80185b2:	b082      	sub	sp, #8
 80185b4:	af00      	add	r7, sp, #0
 80185b6:	6078      	str	r0, [r7, #4]
 80185b8:	000a      	movs	r2, r1
 80185ba:	1cfb      	adds	r3, r7, #3
 80185bc:	701a      	strb	r2, [r3, #0]

	if ( sz == 1 ) {
 80185be:	1cfb      	adds	r3, r7, #3
 80185c0:	781b      	ldrb	r3, [r3, #0]
 80185c2:	2b01      	cmp	r3, #1
 80185c4:	d14c      	bne.n	8018660 <_itsdk_console_public+0xb0>
		switch ( buffer[0] ) {
 80185c6:	687b      	ldr	r3, [r7, #4]
 80185c8:	781b      	ldrb	r3, [r3, #0]
 80185ca:	2b6f      	cmp	r3, #111	; 0x6f
 80185cc:	d020      	beq.n	8018610 <_itsdk_console_public+0x60>
 80185ce:	dc04      	bgt.n	80185da <_itsdk_console_public+0x2a>
 80185d0:	2b21      	cmp	r3, #33	; 0x21
 80185d2:	d023      	beq.n	801861c <_itsdk_console_public+0x6c>
 80185d4:	2b3f      	cmp	r3, #63	; 0x3f
 80185d6:	d005      	beq.n	80185e4 <_itsdk_console_public+0x34>
 80185d8:	e042      	b.n	8018660 <_itsdk_console_public+0xb0>
 80185da:	2b73      	cmp	r3, #115	; 0x73
 80185dc:	d03c      	beq.n	8018658 <_itsdk_console_public+0xa8>
 80185de:	2b76      	cmp	r3, #118	; 0x76
 80185e0:	d026      	beq.n	8018630 <_itsdk_console_public+0x80>
 80185e2:	e03d      	b.n	8018660 <_itsdk_console_public+0xb0>
		case '?':
			// help
			_itsdk_console_printf("--- Common\r\n");
 80185e4:	4b21      	ldr	r3, [pc, #132]	; (801866c <_itsdk_console_public+0xbc>)
 80185e6:	0018      	movs	r0, r3
 80185e8:	f000 f882 	bl	80186f0 <_itsdk_console_printf>
			_itsdk_console_printf("?          : print help\r\n");
 80185ec:	4b20      	ldr	r3, [pc, #128]	; (8018670 <_itsdk_console_public+0xc0>)
 80185ee:	0018      	movs	r0, r3
 80185f0:	f000 f87e 	bl	80186f0 <_itsdk_console_printf>
			_itsdk_console_printf("!          : print copyright\r\n");
 80185f4:	4b1f      	ldr	r3, [pc, #124]	; (8018674 <_itsdk_console_public+0xc4>)
 80185f6:	0018      	movs	r0, r3
 80185f8:	f000 f87a 	bl	80186f0 <_itsdk_console_printf>
			_itsdk_console_printf("v          : print version\r\n");
 80185fc:	4b1e      	ldr	r3, [pc, #120]	; (8018678 <_itsdk_console_public+0xc8>)
 80185fe:	0018      	movs	r0, r3
 8018600:	f000 f876 	bl	80186f0 <_itsdk_console_printf>
			_itsdk_console_printf("o          : print OK\r\n");
 8018604:	4b1d      	ldr	r3, [pc, #116]	; (801867c <_itsdk_console_public+0xcc>)
 8018606:	0018      	movs	r0, r3
 8018608:	f000 f872 	bl	80186f0 <_itsdk_console_printf>
			return ITSDK_CONSOLE_SUCCES;
 801860c:	2300      	movs	r3, #0
 801860e:	e028      	b.n	8018662 <_itsdk_console_public+0xb2>
			break;
		case 'o':
			_itsdk_console_printf("OK\r\n");
 8018610:	4b1b      	ldr	r3, [pc, #108]	; (8018680 <_itsdk_console_public+0xd0>)
 8018612:	0018      	movs	r0, r3
 8018614:	f000 f86c 	bl	80186f0 <_itsdk_console_printf>
			return ITSDK_CONSOLE_SUCCES;
 8018618:	2300      	movs	r3, #0
 801861a:	e022      	b.n	8018662 <_itsdk_console_public+0xb2>
			break;
		case '!':
			// Copyright
			_itsdk_console_printf("IT_SDK - (c) 2020 - Paul Pinault aka Disk91\r\n");
 801861c:	4b19      	ldr	r3, [pc, #100]	; (8018684 <_itsdk_console_public+0xd4>)
 801861e:	0018      	movs	r0, r3
 8018620:	f000 f866 	bl	80186f0 <_itsdk_console_printf>
			_itsdk_console_printf(ITSKD_CONSOLE_COPYRIGHT);
 8018624:	4b18      	ldr	r3, [pc, #96]	; (8018688 <_itsdk_console_public+0xd8>)
 8018626:	0018      	movs	r0, r3
 8018628:	f000 f862 	bl	80186f0 <_itsdk_console_printf>
			return ITSDK_CONSOLE_SUCCES;
 801862c:	2300      	movs	r3, #0
 801862e:	e018      	b.n	8018662 <_itsdk_console_public+0xb2>
			break;
		case 'v':
			// Version
			_itsdk_console_printf("FW Version %s\r\n",ITSDK_USER_VERSION);
 8018630:	4a16      	ldr	r2, [pc, #88]	; (801868c <_itsdk_console_public+0xdc>)
 8018632:	4b17      	ldr	r3, [pc, #92]	; (8018690 <_itsdk_console_public+0xe0>)
 8018634:	0011      	movs	r1, r2
 8018636:	0018      	movs	r0, r3
 8018638:	f000 f85a 	bl	80186f0 <_itsdk_console_printf>
			_itsdk_console_printf("Build %s %s\r\n",__DATE__, __TIME__);
 801863c:	4a15      	ldr	r2, [pc, #84]	; (8018694 <_itsdk_console_public+0xe4>)
 801863e:	4916      	ldr	r1, [pc, #88]	; (8018698 <_itsdk_console_public+0xe8>)
 8018640:	4b16      	ldr	r3, [pc, #88]	; (801869c <_itsdk_console_public+0xec>)
 8018642:	0018      	movs	r0, r3
 8018644:	f000 f854 	bl	80186f0 <_itsdk_console_printf>
			_itsdk_console_printf("IT_SDK Version %s\r\n",ITSDK_VERSION);
 8018648:	4a15      	ldr	r2, [pc, #84]	; (80186a0 <_itsdk_console_public+0xf0>)
 801864a:	4b16      	ldr	r3, [pc, #88]	; (80186a4 <_itsdk_console_public+0xf4>)
 801864c:	0011      	movs	r1, r2
 801864e:	0018      	movs	r0, r3
 8018650:	f000 f84e 	bl	80186f0 <_itsdk_console_printf>
			return ITSDK_CONSOLE_SUCCES;
 8018654:	2300      	movs	r3, #0
 8018656:	e004      	b.n	8018662 <_itsdk_console_public+0xb2>
			break;
		case 's':
			// State
			itsdk_print_state();
 8018658:	f000 fe5e 	bl	8019318 <itsdk_print_state>
			return ITSDK_CONSOLE_SUCCES;
 801865c:	2300      	movs	r3, #0
 801865e:	e000      	b.n	8018662 <_itsdk_console_public+0xb2>
			break;
		}
	}
	return ITSDK_CONSOLE_NOTFOUND;
 8018660:	2301      	movs	r3, #1
}
 8018662:	0018      	movs	r0, r3
 8018664:	46bd      	mov	sp, r7
 8018666:	b002      	add	sp, #8
 8018668:	bd80      	pop	{r7, pc}
 801866a:	46c0      	nop			; (mov r8, r8)
 801866c:	0801fafc 	.word	0x0801fafc
 8018670:	0801fb0c 	.word	0x0801fb0c
 8018674:	0801fb28 	.word	0x0801fb28
 8018678:	0801fb48 	.word	0x0801fb48
 801867c:	0801fb68 	.word	0x0801fb68
 8018680:	0801faec 	.word	0x0801faec
 8018684:	0801fb80 	.word	0x0801fb80
 8018688:	0801fbb0 	.word	0x0801fbb0
 801868c:	0801fbc8 	.word	0x0801fbc8
 8018690:	0801fbcc 	.word	0x0801fbcc
 8018694:	0801fbdc 	.word	0x0801fbdc
 8018698:	0801fbe8 	.word	0x0801fbe8
 801869c:	0801fbf4 	.word	0x0801fbf4
 80186a0:	0801fc04 	.word	0x0801fc04
 80186a4:	0801fc14 	.word	0x0801fc14

080186a8 <itsdk_console_setup>:


/**
 * Setup the console & associated chain
 */
void itsdk_console_setup() {
 80186a8:	b580      	push	{r7, lr}
 80186aa:	af00      	add	r7, sp, #0
	__console.expire = 0;
 80186ac:	4b0c      	ldr	r3, [pc, #48]	; (80186e0 <itsdk_console_setup+0x38>)
 80186ae:	2200      	movs	r2, #0
 80186b0:	62da      	str	r2, [r3, #44]	; 0x2c
	__console.loginState = 0;
 80186b2:	4b0b      	ldr	r3, [pc, #44]	; (80186e0 <itsdk_console_setup+0x38>)
 80186b4:	781a      	ldrb	r2, [r3, #0]
 80186b6:	2101      	movs	r1, #1
 80186b8:	438a      	bics	r2, r1
 80186ba:	701a      	strb	r2, [r3, #0]
	__console.pBuffer = 0;
 80186bc:	4b08      	ldr	r3, [pc, #32]	; (80186e0 <itsdk_console_setup+0x38>)
 80186be:	781a      	ldrb	r2, [r3, #0]
 80186c0:	2101      	movs	r1, #1
 80186c2:	400a      	ands	r2, r1
 80186c4:	701a      	strb	r2, [r3, #0]
	__console_head_chain.console_private = _itsdk_console_private;
 80186c6:	4b07      	ldr	r3, [pc, #28]	; (80186e4 <itsdk_console_setup+0x3c>)
 80186c8:	4a07      	ldr	r2, [pc, #28]	; (80186e8 <itsdk_console_setup+0x40>)
 80186ca:	601a      	str	r2, [r3, #0]
	__console_head_chain.console_public = _itsdk_console_public;
 80186cc:	4b05      	ldr	r3, [pc, #20]	; (80186e4 <itsdk_console_setup+0x3c>)
 80186ce:	4a07      	ldr	r2, [pc, #28]	; (80186ec <itsdk_console_setup+0x44>)
 80186d0:	605a      	str	r2, [r3, #4]
	__console_head_chain.next = NULL;
 80186d2:	4b04      	ldr	r3, [pc, #16]	; (80186e4 <itsdk_console_setup+0x3c>)
 80186d4:	2200      	movs	r2, #0
 80186d6:	609a      	str	r2, [r3, #8]
}
 80186d8:	46c0      	nop			; (mov r8, r8)
 80186da:	46bd      	mov	sp, r7
 80186dc:	bd80      	pop	{r7, pc}
 80186de:	46c0      	nop			; (mov r8, r8)
 80186e0:	200011a8 	.word	0x200011a8
 80186e4:	200011d8 	.word	0x200011d8
 80186e8:	08018335 	.word	0x08018335
 80186ec:	080185b1 	.word	0x080185b1

080186f0 <_itsdk_console_printf>:
void itsdk_console_customProcess_char(char c) {
	_itsdk_console_processChar(c);
}
#endif

void _itsdk_console_printf(char *format, ...) {
 80186f0:	b40f      	push	{r0, r1, r2, r3}
 80186f2:	b580      	push	{r7, lr}
 80186f4:	b096      	sub	sp, #88	; 0x58
 80186f6:	af00      	add	r7, sp, #0
	va_list args;
	char 	fmtBuffer[LOGGER_MAX_BUF_SZ]; 				// buffer for log line formating before printing
    va_start(args,format);
 80186f8:	2364      	movs	r3, #100	; 0x64
 80186fa:	18fb      	adds	r3, r7, r3
 80186fc:	657b      	str	r3, [r7, #84]	; 0x54
	vsnprintf(fmtBuffer,LOGGER_MAX_BUF_SZ,format,args);
 80186fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018700:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8018702:	1d38      	adds	r0, r7, #4
 8018704:	2150      	movs	r1, #80	; 0x50
 8018706:	f005 fde7 	bl	801e2d8 <vsniprintf>
	va_end(args);
#if ( ITSDK_CONSOLE_SERIAL & ( __UART_LPUART1 | __UART_USART1 ) ) > 0
	serial1_print(fmtBuffer);
#endif
#if ( ITSDK_CONSOLE_SERIAL & __UART_USART2 ) > 0
	serial2_print(fmtBuffer);
 801870a:	1d3b      	adds	r3, r7, #4
 801870c:	0018      	movs	r0, r3
 801870e:	f005 f8e1 	bl	801d8d4 <serial2_print>
#endif
#if ( ITSDK_CONSOLE_SERIAL & __UART_CUSTOM ) > 0
	itsdk_console_customSerial_print(fmtBuffer);
#endif
}
 8018712:	46c0      	nop			; (mov r8, r8)
 8018714:	46bd      	mov	sp, r7
 8018716:	b016      	add	sp, #88	; 0x58
 8018718:	bc80      	pop	{r7}
 801871a:	bc08      	pop	{r3}
 801871c:	b004      	add	sp, #16
 801871e:	4718      	bx	r3

08018720 <itsdk_console_registerCommand>:

/**
 * Add an action to the chain, the action **must be** static
 * The action list is added at end of the chain
 */
void itsdk_console_registerCommand(itsdk_console_chain_t * chain) {
 8018720:	b580      	push	{r7, lr}
 8018722:	b084      	sub	sp, #16
 8018724:	af00      	add	r7, sp, #0
 8018726:	6078      	str	r0, [r7, #4]
	itsdk_console_chain_t * c = &__console_head_chain;
 8018728:	4b13      	ldr	r3, [pc, #76]	; (8018778 <itsdk_console_registerCommand+0x58>)
 801872a:	60fb      	str	r3, [r7, #12]
	if ( c->console_private != _itsdk_console_private ) {
 801872c:	68fb      	ldr	r3, [r7, #12]
 801872e:	681a      	ldr	r2, [r3, #0]
 8018730:	4b12      	ldr	r3, [pc, #72]	; (801877c <itsdk_console_registerCommand+0x5c>)
 8018732:	429a      	cmp	r2, r3
 8018734:	d008      	beq.n	8018748 <itsdk_console_registerCommand+0x28>
		ITSDK_ERROR_REPORT(ITSDK_ERROR_CONSOLE_NOTSETUP,0);
 8018736:	4b12      	ldr	r3, [pc, #72]	; (8018780 <itsdk_console_registerCommand+0x60>)
 8018738:	2100      	movs	r1, #0
 801873a:	0018      	movs	r0, r3
 801873c:	f002 fe92 	bl	801b464 <itsdk_error_report>
	}

	while ( c->next != NULL && c->next != chain ) {
 8018740:	e002      	b.n	8018748 <itsdk_console_registerCommand+0x28>
	  c = c->next;
 8018742:	68fb      	ldr	r3, [r7, #12]
 8018744:	689b      	ldr	r3, [r3, #8]
 8018746:	60fb      	str	r3, [r7, #12]
	while ( c->next != NULL && c->next != chain ) {
 8018748:	68fb      	ldr	r3, [r7, #12]
 801874a:	689b      	ldr	r3, [r3, #8]
 801874c:	2b00      	cmp	r3, #0
 801874e:	d004      	beq.n	801875a <itsdk_console_registerCommand+0x3a>
 8018750:	68fb      	ldr	r3, [r7, #12]
 8018752:	689b      	ldr	r3, [r3, #8]
 8018754:	687a      	ldr	r2, [r7, #4]
 8018756:	429a      	cmp	r2, r3
 8018758:	d1f3      	bne.n	8018742 <itsdk_console_registerCommand+0x22>
	}
	if ( c->next != chain ) {
 801875a:	68fb      	ldr	r3, [r7, #12]
 801875c:	689b      	ldr	r3, [r3, #8]
 801875e:	687a      	ldr	r2, [r7, #4]
 8018760:	429a      	cmp	r2, r3
 8018762:	d005      	beq.n	8018770 <itsdk_console_registerCommand+0x50>
		// the Action is not already existing
		c->next=chain;
 8018764:	68fb      	ldr	r3, [r7, #12]
 8018766:	687a      	ldr	r2, [r7, #4]
 8018768:	609a      	str	r2, [r3, #8]
		chain->next = NULL;
 801876a:	687b      	ldr	r3, [r7, #4]
 801876c:	2200      	movs	r2, #0
 801876e:	609a      	str	r2, [r3, #8]
	}
}
 8018770:	46c0      	nop			; (mov r8, r8)
 8018772:	46bd      	mov	sp, r7
 8018774:	b004      	add	sp, #16
 8018776:	bd80      	pop	{r7, pc}
 8018778:	200011d8 	.word	0x200011d8
 801877c:	08018335 	.word	0x08018335
 8018780:	c0000003 	.word	0xc0000003

08018784 <eeprom_write_config>:
 * ---> ErrorReport
 * ---> Sigfox Nvm
 * ---> Configuration (*) here
 * ---> UserLand
 */
itsdk_bool_e eeprom_write_config(void * data, uint16_t len, uint8_t version) {
 8018784:	b590      	push	{r4, r7, lr}
 8018786:	b089      	sub	sp, #36	; 0x24
 8018788:	af00      	add	r7, sp, #0
 801878a:	6078      	str	r0, [r7, #4]
 801878c:	0008      	movs	r0, r1
 801878e:	0011      	movs	r1, r2
 8018790:	1cbb      	adds	r3, r7, #2
 8018792:	1c02      	adds	r2, r0, #0
 8018794:	801a      	strh	r2, [r3, #0]
 8018796:	1c7b      	adds	r3, r7, #1
 8018798:	1c0a      	adds	r2, r1, #0
 801879a:	701a      	strb	r2, [r3, #0]
	t_eeprom_entry t;
	t.magic = ITDT_EEPROM_MAGIC_CONFIG;
 801879c:	2410      	movs	r4, #16
 801879e:	193b      	adds	r3, r7, r4
 80187a0:	4a17      	ldr	r2, [pc, #92]	; (8018800 <eeprom_write_config+0x7c>)
 80187a2:	801a      	strh	r2, [r3, #0]
	t.size = len;
 80187a4:	193b      	adds	r3, r7, r4
 80187a6:	1cba      	adds	r2, r7, #2
 80187a8:	8812      	ldrh	r2, [r2, #0]
 80187aa:	809a      	strh	r2, [r3, #4]
	t.version = version;
 80187ac:	193b      	adds	r3, r7, r4
 80187ae:	1c7a      	adds	r2, r7, #1
 80187b0:	7812      	ldrb	r2, [r2, #0]
 80187b2:	709a      	strb	r2, [r3, #2]
	t.crc32 = itsdk_computeCRC32((uint8_t*)data, len);
 80187b4:	1cbb      	adds	r3, r7, #2
 80187b6:	881a      	ldrh	r2, [r3, #0]
 80187b8:	687b      	ldr	r3, [r7, #4]
 80187ba:	0011      	movs	r1, r2
 80187bc:	0018      	movs	r0, r3
 80187be:	f003 fcbd 	bl	801c13c <itsdk_computeCRC32>
 80187c2:	0002      	movs	r2, r0
 80187c4:	193b      	adds	r3, r7, r4
 80187c6:	609a      	str	r2, [r3, #8]

	uint32_t offset = 0;
 80187c8:	2300      	movs	r3, #0
 80187ca:	60fb      	str	r3, [r7, #12]
	eeprom_getConfigOffset(&offset);
 80187cc:	230c      	movs	r3, #12
 80187ce:	18fb      	adds	r3, r7, r3
 80187d0:	0018      	movs	r0, r3
 80187d2:	f000 f88f 	bl	80188f4 <eeprom_getConfigOffset>

	// Write the data header
	_eeprom_write(ITDT_EEPROM_BANK0, offset, (void *) &t, sizeof(t));
 80187d6:	68f9      	ldr	r1, [r7, #12]
 80187d8:	193a      	adds	r2, r7, r4
 80187da:	2310      	movs	r3, #16
 80187dc:	2000      	movs	r0, #0
 80187de:	f005 f90b 	bl	801d9f8 <_eeprom_write>
	// Write data
	_eeprom_write(ITDT_EEPROM_BANK0, offset+sizeof(t), (void *) data, len);
 80187e2:	68fb      	ldr	r3, [r7, #12]
 80187e4:	3310      	adds	r3, #16
 80187e6:	0019      	movs	r1, r3
 80187e8:	1cbb      	adds	r3, r7, #2
 80187ea:	881b      	ldrh	r3, [r3, #0]
 80187ec:	687a      	ldr	r2, [r7, #4]
 80187ee:	2000      	movs	r0, #0
 80187f0:	f005 f902 	bl	801d9f8 <_eeprom_write>

	_LOG_EEPROM(("[NVM][I] Write %d bytes crc %0X\r\n",len,t.crc32));

	return BOOL_TRUE;
 80187f4:	2301      	movs	r3, #1
}
 80187f6:	0018      	movs	r0, r3
 80187f8:	46bd      	mov	sp, r7
 80187fa:	b009      	add	sp, #36	; 0x24
 80187fc:	bd90      	pop	{r4, r7, pc}
 80187fe:	46c0      	nop			; (mov r8, r8)
 8018800:	ffffa5fc 	.word	0xffffa5fc

08018804 <eeprom_read_config>:
 * ---> Configuration (*) here
 * ---> UserLand
 * BypassTest option allows to read the configuration even if the size has changed an dcrc is invalid
 * Version change is detected with a normal read (bypassTest=BOOL_TRUE), get a False with versiuonR != 0
 */
itsdk_bool_e eeprom_read_config(void * data, uint16_t len, uint8_t version, uint8_t * versionR, itsdk_bool_e bypassTest) {
 8018804:	b5b0      	push	{r4, r5, r7, lr}
 8018806:	b08a      	sub	sp, #40	; 0x28
 8018808:	af00      	add	r7, sp, #0
 801880a:	60f8      	str	r0, [r7, #12]
 801880c:	0008      	movs	r0, r1
 801880e:	0011      	movs	r1, r2
 8018810:	607b      	str	r3, [r7, #4]
 8018812:	230a      	movs	r3, #10
 8018814:	18fb      	adds	r3, r7, r3
 8018816:	1c02      	adds	r2, r0, #0
 8018818:	801a      	strh	r2, [r3, #0]
 801881a:	2309      	movs	r3, #9
 801881c:	18fb      	adds	r3, r7, r3
 801881e:	1c0a      	adds	r2, r1, #0
 8018820:	701a      	strb	r2, [r3, #0]
	t_eeprom_entry t;
	uint32_t offset = 0;
 8018822:	2300      	movs	r3, #0
 8018824:	613b      	str	r3, [r7, #16]
	eeprom_getConfigOffset(&offset);
 8018826:	2310      	movs	r3, #16
 8018828:	18fb      	adds	r3, r7, r3
 801882a:	0018      	movs	r0, r3
 801882c:	f000 f862 	bl	80188f4 <eeprom_getConfigOffset>

	// Read the data header
	_eeprom_read(ITDT_EEPROM_BANK0, offset, (void *) &t, sizeof(t));
 8018830:	6939      	ldr	r1, [r7, #16]
 8018832:	2414      	movs	r4, #20
 8018834:	193a      	adds	r2, r7, r4
 8018836:	2310      	movs	r3, #16
 8018838:	2000      	movs	r0, #0
 801883a:	f005 f981 	bl	801db40 <_eeprom_read>

	// Verify different element
	if ( t.magic != ITDT_EEPROM_MAGIC_CONFIG ) {
 801883e:	193b      	adds	r3, r7, r4
 8018840:	881b      	ldrh	r3, [r3, #0]
 8018842:	4a2b      	ldr	r2, [pc, #172]	; (80188f0 <eeprom_read_config+0xec>)
 8018844:	4293      	cmp	r3, r2
 8018846:	d004      	beq.n	8018852 <eeprom_read_config+0x4e>
		_LOG_EEPROM(("[NVM][I] Read invalid magic\r\n"));
		*versionR=0;
 8018848:	687b      	ldr	r3, [r7, #4]
 801884a:	2200      	movs	r2, #0
 801884c:	701a      	strb	r2, [r3, #0]
		return BOOL_FALSE;
 801884e:	2300      	movs	r3, #0
 8018850:	e049      	b.n	80188e6 <eeprom_read_config+0xe2>
	}
	*versionR=t.version;
 8018852:	2114      	movs	r1, #20
 8018854:	187b      	adds	r3, r7, r1
 8018856:	789a      	ldrb	r2, [r3, #2]
 8018858:	687b      	ldr	r3, [r7, #4]
 801885a:	701a      	strb	r2, [r3, #0]

	if ( t.version != version ) {
 801885c:	187b      	adds	r3, r7, r1
 801885e:	789b      	ldrb	r3, [r3, #2]
 8018860:	2209      	movs	r2, #9
 8018862:	18ba      	adds	r2, r7, r2
 8018864:	7812      	ldrb	r2, [r2, #0]
 8018866:	429a      	cmp	r2, r3
 8018868:	d001      	beq.n	801886e <eeprom_read_config+0x6a>
		_LOG_EEPROM(("[NVM][I] Read invalid version (%d vs %d)\r\n",version,t.version));
		return BOOL_FALSE;
 801886a:	2300      	movs	r3, #0
 801886c:	e03b      	b.n	80188e6 <eeprom_read_config+0xe2>
	}

	if ( t.size != len && ! bypassTest ) {
 801886e:	2314      	movs	r3, #20
 8018870:	18fb      	adds	r3, r7, r3
 8018872:	889b      	ldrh	r3, [r3, #4]
 8018874:	220a      	movs	r2, #10
 8018876:	18ba      	adds	r2, r7, r2
 8018878:	8812      	ldrh	r2, [r2, #0]
 801887a:	429a      	cmp	r2, r3
 801887c:	d009      	beq.n	8018892 <eeprom_read_config+0x8e>
 801887e:	2330      	movs	r3, #48	; 0x30
 8018880:	2208      	movs	r2, #8
 8018882:	4694      	mov	ip, r2
 8018884:	44bc      	add	ip, r7
 8018886:	4463      	add	r3, ip
 8018888:	781b      	ldrb	r3, [r3, #0]
 801888a:	2b00      	cmp	r3, #0
 801888c:	d101      	bne.n	8018892 <eeprom_read_config+0x8e>
		_LOG_EEPROM(("[NVM][I] Read invalid size (%d vs %d)\r\n",len,t.size));
		return BOOL_FALSE;
 801888e:	2300      	movs	r3, #0
 8018890:	e029      	b.n	80188e6 <eeprom_read_config+0xe2>
	} else {
		len = t.size;
 8018892:	200a      	movs	r0, #10
 8018894:	183b      	adds	r3, r7, r0
 8018896:	2514      	movs	r5, #20
 8018898:	197a      	adds	r2, r7, r5
 801889a:	8892      	ldrh	r2, [r2, #4]
 801889c:	801a      	strh	r2, [r3, #0]
	}

	// Read the data
	_eeprom_read(ITDT_EEPROM_BANK0, offset+sizeof(t), (void *) data, len);
 801889e:	693b      	ldr	r3, [r7, #16]
 80188a0:	3310      	adds	r3, #16
 80188a2:	0019      	movs	r1, r3
 80188a4:	0004      	movs	r4, r0
 80188a6:	183b      	adds	r3, r7, r0
 80188a8:	881b      	ldrh	r3, [r3, #0]
 80188aa:	68fa      	ldr	r2, [r7, #12]
 80188ac:	2000      	movs	r0, #0
 80188ae:	f005 f947 	bl	801db40 <_eeprom_read>
	uint32_t _crc = itsdk_computeCRC32((uint8_t*)data, len);
 80188b2:	0020      	movs	r0, r4
 80188b4:	183b      	adds	r3, r7, r0
 80188b6:	881a      	ldrh	r2, [r3, #0]
 80188b8:	68fb      	ldr	r3, [r7, #12]
 80188ba:	0011      	movs	r1, r2
 80188bc:	0018      	movs	r0, r3
 80188be:	f003 fc3d 	bl	801c13c <itsdk_computeCRC32>
 80188c2:	0003      	movs	r3, r0
 80188c4:	627b      	str	r3, [r7, #36]	; 0x24

	if ( t.crc32 != _crc && ! bypassTest ) {
 80188c6:	197b      	adds	r3, r7, r5
 80188c8:	689b      	ldr	r3, [r3, #8]
 80188ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80188cc:	429a      	cmp	r2, r3
 80188ce:	d009      	beq.n	80188e4 <eeprom_read_config+0xe0>
 80188d0:	2330      	movs	r3, #48	; 0x30
 80188d2:	2208      	movs	r2, #8
 80188d4:	4694      	mov	ip, r2
 80188d6:	44bc      	add	ip, r7
 80188d8:	4463      	add	r3, ip
 80188da:	781b      	ldrb	r3, [r3, #0]
 80188dc:	2b00      	cmp	r3, #0
 80188de:	d101      	bne.n	80188e4 <eeprom_read_config+0xe0>
		_LOG_EEPROM(("[NVM][I] Read invalid crc\r\n"));
		return BOOL_FALSE;
 80188e0:	2300      	movs	r3, #0
 80188e2:	e000      	b.n	80188e6 <eeprom_read_config+0xe2>
	}

	return BOOL_TRUE;
 80188e4:	2301      	movs	r3, #1
}
 80188e6:	0018      	movs	r0, r3
 80188e8:	46bd      	mov	sp, r7
 80188ea:	b00a      	add	sp, #40	; 0x28
 80188ec:	bdb0      	pop	{r4, r5, r7, pc}
 80188ee:	46c0      	nop			; (mov r8, r8)
 80188f0:	0000a5fc 	.word	0x0000a5fc

080188f4 <eeprom_getConfigOffset>:

/**
 * Compute the EEPROM Config offset
 * Memory have SecureStore then Log then Sigfox config, then Device config
 */
itsdk_bool_e eeprom_getConfigOffset(uint32_t * _offset) {
 80188f4:	b580      	push	{r7, lr}
 80188f6:	b086      	sub	sp, #24
 80188f8:	af00      	add	r7, sp, #0
 80188fa:	6078      	str	r0, [r7, #4]
  uint32_t sstore=0, ssError=0, sSigfox=0;
 80188fc:	2300      	movs	r3, #0
 80188fe:	613b      	str	r3, [r7, #16]
 8018900:	2300      	movs	r3, #0
 8018902:	60fb      	str	r3, [r7, #12]
 8018904:	2300      	movs	r3, #0
 8018906:	617b      	str	r3, [r7, #20]
  #if ITSDK_WITH_SECURESTORE == __ENABLE
	itsdk_secstore_getStoreSize(&sstore);
 8018908:	2310      	movs	r3, #16
 801890a:	18fb      	adds	r3, r7, r3
 801890c:	0018      	movs	r0, r3
 801890e:	f000 fde6 	bl	80194de <itsdk_secstore_getStoreSize>
  #endif
  #if (ITSDK_WITH_ERROR_RPT == __ENABLE) && (ITSDK_ERROR_USE_EPROM == __ENABLE)
	itsdk_error_getSize(&ssError);
 8018912:	230c      	movs	r3, #12
 8018914:	18fb      	adds	r3, r7, r3
 8018916:	0018      	movs	r0, r3
 8018918:	f002 fec9 	bl	801b6ae <itsdk_error_getSize>
  #endif
  #if (ITSDK_WITH_SIGFOX_LIB == __ENABLE)
	itsdk_sigfox_getNvmSize(&sSigfox);
  #endif
  *_offset += sstore + ssError + sSigfox;
 801891c:	687b      	ldr	r3, [r7, #4]
 801891e:	681a      	ldr	r2, [r3, #0]
 8018920:	6939      	ldr	r1, [r7, #16]
 8018922:	68fb      	ldr	r3, [r7, #12]
 8018924:	18c9      	adds	r1, r1, r3
 8018926:	697b      	ldr	r3, [r7, #20]
 8018928:	18cb      	adds	r3, r1, r3
 801892a:	18d2      	adds	r2, r2, r3
 801892c:	687b      	ldr	r3, [r7, #4]
 801892e:	601a      	str	r2, [r3, #0]
  return BOOL_TRUE;
 8018930:	2301      	movs	r3, #1
}
 8018932:	0018      	movs	r0, r3
 8018934:	46bd      	mov	sp, r7
 8018936:	b006      	add	sp, #24
 8018938:	bd80      	pop	{r7, pc}

0801893a <eeprom_getConfigSize>:

/**
 * Get the EEprom config size from the config header
 * it includes the header size
 */
itsdk_bool_e eeprom_getConfigSize(uint32_t * _size) {
 801893a:	b590      	push	{r4, r7, lr}
 801893c:	b089      	sub	sp, #36	; 0x24
 801893e:	af00      	add	r7, sp, #0
 8018940:	6078      	str	r0, [r7, #4]
	t_eeprom_entry t;

	uint32_t offset = 0;
 8018942:	2300      	movs	r3, #0
 8018944:	60fb      	str	r3, [r7, #12]
	eeprom_getConfigOffset(&offset);
 8018946:	230c      	movs	r3, #12
 8018948:	18fb      	adds	r3, r7, r3
 801894a:	0018      	movs	r0, r3
 801894c:	f7ff ffd2 	bl	80188f4 <eeprom_getConfigOffset>

	// Read the data header
	_eeprom_read(ITDT_EEPROM_BANK0, offset, (void *) &t, sizeof(t));
 8018950:	68f9      	ldr	r1, [r7, #12]
 8018952:	2410      	movs	r4, #16
 8018954:	193a      	adds	r2, r7, r4
 8018956:	2310      	movs	r3, #16
 8018958:	2000      	movs	r0, #0
 801895a:	f005 f8f1 	bl	801db40 <_eeprom_read>

	*_size = sizeof(t) + t.size;
 801895e:	193b      	adds	r3, r7, r4
 8018960:	889b      	ldrh	r3, [r3, #4]
 8018962:	3310      	adds	r3, #16
 8018964:	001a      	movs	r2, r3
 8018966:	687b      	ldr	r3, [r7, #4]
 8018968:	601a      	str	r2, [r3, #0]
	return BOOL_TRUE;
 801896a:	2301      	movs	r3, #1
}
 801896c:	0018      	movs	r0, r3
 801896e:	46bd      	mov	sp, r7
 8018970:	b009      	add	sp, #36	; 0x24
 8018972:	bd90      	pop	{r4, r7, pc}

08018974 <eeprom_clearAllEprom>:
}

/**
 * Clear (write 0) into the whole BANK0
 */
void eeprom_clearAllEprom() {
 8018974:	b580      	push	{r7, lr}
 8018976:	b082      	sub	sp, #8
 8018978:	af00      	add	r7, sp, #0
	uint32_t v  = 0;
 801897a:	2300      	movs	r3, #0
 801897c:	603b      	str	r3, [r7, #0]
	for ( int i = 0 ; i < ITSDK_EPROM_SIZE ; i+=sizeof(v) ) {
 801897e:	2300      	movs	r3, #0
 8018980:	607b      	str	r3, [r7, #4]
 8018982:	e008      	b.n	8018996 <eeprom_clearAllEprom+0x22>
		_eeprom_write(ITDT_EEPROM_BANK0, i, (void *) &v, sizeof(v));
 8018984:	6879      	ldr	r1, [r7, #4]
 8018986:	003a      	movs	r2, r7
 8018988:	2304      	movs	r3, #4
 801898a:	2000      	movs	r0, #0
 801898c:	f005 f834 	bl	801d9f8 <_eeprom_write>
	for ( int i = 0 ; i < ITSDK_EPROM_SIZE ; i+=sizeof(v) ) {
 8018990:	687b      	ldr	r3, [r7, #4]
 8018992:	3304      	adds	r3, #4
 8018994:	607b      	str	r3, [r7, #4]
 8018996:	687b      	ldr	r3, [r7, #4]
 8018998:	4a03      	ldr	r2, [pc, #12]	; (80189a8 <eeprom_clearAllEprom+0x34>)
 801899a:	4293      	cmp	r3, r2
 801899c:	ddf2      	ble.n	8018984 <eeprom_clearAllEprom+0x10>
	}
}
 801899e:	46c0      	nop			; (mov r8, r8)
 80189a0:	46bd      	mov	sp, r7
 80189a2:	b002      	add	sp, #8
 80189a4:	bd80      	pop	{r7, pc}
 80189a6:	46c0      	nop			; (mov r8, r8)
 80189a8:	000017ff 	.word	0x000017ff

080189ac <itsdk_config_sdk_resetToFactory>:

/**
 * The SDK config initialization function
 */
#if ITSDK_CONFIGURATION_MODE != __CONFIG_STATIC
	static itsdk_config_ret_e itsdk_config_sdk_resetToFactory() {
 80189ac:	b580      	push	{r7, lr}
 80189ae:	af00      	add	r7, sp, #0
		ITSDK_ERROR_REPORT(ITSDK_ERROR_CONFIG_SDKFACT_DEFAULT,0);
 80189b0:	4b1b      	ldr	r3, [pc, #108]	; (8018a20 <itsdk_config_sdk_resetToFactory+0x74>)
 80189b2:	2100      	movs	r1, #0
 80189b4:	0018      	movs	r0, r3
 80189b6:	f002 fd55 	bl	801b464 <itsdk_error_report>

		itsdk_config.sdk.version = ITSDK_CONFIGURATION_SDK_VERSION;
 80189ba:	4b1a      	ldr	r3, [pc, #104]	; (8018a24 <itsdk_config_sdk_resetToFactory+0x78>)
 80189bc:	2216      	movs	r2, #22
 80189be:	701a      	strb	r2, [r3, #0]
		itsdk_config.sdk.size = sizeof(itsdk_configuration_internal_t);
 80189c0:	4b18      	ldr	r3, [pc, #96]	; (8018a24 <itsdk_config_sdk_resetToFactory+0x78>)
 80189c2:	2218      	movs	r2, #24
 80189c4:	805a      	strh	r2, [r3, #2]
		// ----------- Network choice ----------------------------------------------------
		#if ITSDK_WITH_SIGFOX_LIB == __ENABLE || ITSDK_WITH_LORAWAN_LIB == __ENABLE
		itsdk_config.sdk.activeNetwork = ITSDK_DEFAULT_NETWORK;
 80189c6:	4b17      	ldr	r3, [pc, #92]	; (8018a24 <itsdk_config_sdk_resetToFactory+0x78>)
 80189c8:	2202      	movs	r2, #2
 80189ca:	80da      	strh	r2, [r3, #6]
		#endif
		// ----------- LoRaWan settings --------------------------------------------------
		#if ITSDK_WITH_LORAWAN_LIB == __ENABLE
		itsdk_config.sdk.lorawan.adrMode = ITSDK_LORAWAN_ADR;
 80189cc:	4b15      	ldr	r3, [pc, #84]	; (8018a24 <itsdk_config_sdk_resetToFactory+0x78>)
 80189ce:	7a9a      	ldrb	r2, [r3, #10]
 80189d0:	213f      	movs	r1, #63	; 0x3f
 80189d2:	400a      	ands	r2, r1
 80189d4:	1c11      	adds	r1, r2, #0
 80189d6:	2240      	movs	r2, #64	; 0x40
 80189d8:	430a      	orrs	r2, r1
 80189da:	729a      	strb	r2, [r3, #10]
		itsdk_config.sdk.lorawan.devEuiType = ITSDK_LORAWAN_DEVEUI_SRC;
 80189dc:	4b11      	ldr	r3, [pc, #68]	; (8018a24 <itsdk_config_sdk_resetToFactory+0x78>)
 80189de:	7a9a      	ldrb	r2, [r3, #10]
 80189e0:	2130      	movs	r1, #48	; 0x30
 80189e2:	438a      	bics	r2, r1
 80189e4:	1c11      	adds	r1, r2, #0
 80189e6:	2210      	movs	r2, #16
 80189e8:	430a      	orrs	r2, r1
 80189ea:	729a      	strb	r2, [r3, #10]
		itsdk_config.sdk.lorawan.joinMode = ITSDK_LORAWAN_ACTIVATION;
 80189ec:	4b0d      	ldr	r3, [pc, #52]	; (8018a24 <itsdk_config_sdk_resetToFactory+0x78>)
 80189ee:	7a9a      	ldrb	r2, [r3, #10]
 80189f0:	2103      	movs	r1, #3
 80189f2:	438a      	bics	r2, r1
 80189f4:	1c11      	adds	r1, r2, #0
 80189f6:	2201      	movs	r2, #1
 80189f8:	430a      	orrs	r2, r1
 80189fa:	729a      	strb	r2, [r3, #10]
		itsdk_config.sdk.lorawan.networkType = ITSDK_LORAWAN_NETWORKTYPE;
 80189fc:	4b09      	ldr	r3, [pc, #36]	; (8018a24 <itsdk_config_sdk_resetToFactory+0x78>)
 80189fe:	7a9a      	ldrb	r2, [r3, #10]
 8018a00:	210c      	movs	r1, #12
 8018a02:	438a      	bics	r2, r1
 8018a04:	1c11      	adds	r1, r2, #0
 8018a06:	2204      	movs	r2, #4
 8018a08:	430a      	orrs	r2, r1
 8018a0a:	729a      	strb	r2, [r3, #10]
		itsdk_config.sdk.lorawan.retries = ITSDK_LORAWAN_CNF_RETRY;
 8018a0c:	4b05      	ldr	r3, [pc, #20]	; (8018a24 <itsdk_config_sdk_resetToFactory+0x78>)
 8018a0e:	2200      	movs	r2, #0
 8018a10:	72da      	strb	r2, [r3, #11]
		itsdk_config.sdk.activeRegion = ITSDK_DEFAULT_REGION;
 8018a12:	4b04      	ldr	r3, [pc, #16]	; (8018a24 <itsdk_config_sdk_resetToFactory+0x78>)
 8018a14:	2220      	movs	r2, #32
 8018a16:	811a      	strh	r2, [r3, #8]
		  bcopy(pac,itsdk_config.sdk.sigfox.initialPac,8);
		  itsdk_config.sdk.sigfox.deviceId = ITSDK_SIGFOX_ID;
		#endif

		#endif
		return CONFIG_RESTORED_FROM_FACTORY;
 8018a18:	2302      	movs	r3, #2
	}
 8018a1a:	0018      	movs	r0, r3
 8018a1c:	46bd      	mov	sp, r7
 8018a1e:	bd80      	pop	{r7, pc}
 8018a20:	10000073 	.word	0x10000073
 8018a24:	20001654 	.word	0x20001654

08018a28 <itsdk_config_app_resetToFactory>:

	#if ITSDK_WITH_CONFIGURATION_APP == __ENABLE
		/**
		 * This function need to be overide - reset the app to factory default
		 */
		__weak itsdk_config_ret_e itsdk_config_app_resetToFactory() {
 8018a28:	b580      	push	{r7, lr}
 8018a2a:	af00      	add	r7, sp, #0
			itsdk_config.app.version = ITSDK_CONFIGURATION_APP_VERSION;
 8018a2c:	4b05      	ldr	r3, [pc, #20]	; (8018a44 <itsdk_config_app_resetToFactory+0x1c>)
 8018a2e:	2201      	movs	r2, #1
 8018a30:	761a      	strb	r2, [r3, #24]
		    //ITSDK_ERROR_REPORT(ITSDK_ERROR_CONFIG_SDKFACT_DEFAULT,1);
			ITSDK_ERROR_REPORT(ITSDK_ERROR_CONFIG_OVERRIDE_MISS,0);
 8018a32:	4b05      	ldr	r3, [pc, #20]	; (8018a48 <itsdk_config_app_resetToFactory+0x20>)
 8018a34:	2100      	movs	r1, #0
 8018a36:	0018      	movs	r0, r3
 8018a38:	f002 fd14 	bl	801b464 <itsdk_error_report>
			return CONFIG_FAILED;
 8018a3c:	2304      	movs	r3, #4
		}
 8018a3e:	0018      	movs	r0, r3
 8018a40:	46bd      	mov	sp, r7
 8018a42:	bd80      	pop	{r7, pc}
 8018a44:	20001654 	.word	0x20001654
 8018a48:	40000070 	.word	0x40000070

08018a4c <itsdk_config_app_upgradeConfiguration>:
		/**
		 * This function need to be overide - upgrade the app configuration
		 */
		__weak itsdk_config_ret_e itsdk_config_app_upgradeConfiguration() {
 8018a4c:	b580      	push	{r7, lr}
 8018a4e:	af00      	add	r7, sp, #0
			itsdk_config.app.version = ITSDK_CONFIGURATION_APP_VERSION;
 8018a50:	4b05      	ldr	r3, [pc, #20]	; (8018a68 <itsdk_config_app_upgradeConfiguration+0x1c>)
 8018a52:	2201      	movs	r2, #1
 8018a54:	761a      	strb	r2, [r3, #24]
		    //ITSDK_ERROR_REPORT(ITSDK_ERROR_CONFIG_APPCNF_UPGRADED,1);
			ITSDK_ERROR_REPORT(ITSDK_ERROR_CONFIG_OVERRIDE_MISS,0);
 8018a56:	4b05      	ldr	r3, [pc, #20]	; (8018a6c <itsdk_config_app_upgradeConfiguration+0x20>)
 8018a58:	2100      	movs	r1, #0
 8018a5a:	0018      	movs	r0, r3
 8018a5c:	f002 fd02 	bl	801b464 <itsdk_error_report>
			return CONFIG_FAILED;
 8018a60:	2304      	movs	r3, #4
		}
 8018a62:	0018      	movs	r0, r3
 8018a64:	46bd      	mov	sp, r7
 8018a66:	bd80      	pop	{r7, pc}
 8018a68:	20001654 	.word	0x20001654
 8018a6c:	40000070 	.word	0x40000070

08018a70 <itsdk_config_resetToFactory>:
	#endif

	/**
	 * Reset to factory default update eeprom & shadow
	 */
	itsdk_config_ret_e itsdk_config_resetToFactory() {
 8018a70:	b5b0      	push	{r4, r5, r7, lr}
 8018a72:	af00      	add	r7, sp, #0
		 itsdk_config_sdk_resetToFactory();
 8018a74:	f7ff ff9a 	bl	80189ac <itsdk_config_sdk_resetToFactory>
		 #if ITSDK_WITH_CONFIGURATION_APP == __ENABLE
		 itsdk_config_app_resetToFactory();
 8018a78:	f7ff ffd6 	bl	8018a28 <itsdk_config_app_resetToFactory>
		 #endif
		 #if ITSDK_CONFIGURATION_MODE == __CONFIG_EEPROM
		 eeprom_write_config(&itsdk_config, sizeof(itsdk_configuration_nvm_t), ITSDK_CONFIGURATION_MNG_VERSION);
 8018a7c:	4b0b      	ldr	r3, [pc, #44]	; (8018aac <itsdk_config_resetToFactory+0x3c>)
 8018a7e:	2201      	movs	r2, #1
 8018a80:	211c      	movs	r1, #28
 8018a82:	0018      	movs	r0, r3
 8018a84:	f7ff fe7e 	bl	8018784 <eeprom_write_config>
		 #endif
	     bcopy(&itsdk_config,&itsdk_config_shadow,sizeof(itsdk_configuration_nvm_t));
 8018a88:	4b09      	ldr	r3, [pc, #36]	; (8018ab0 <itsdk_config_resetToFactory+0x40>)
 8018a8a:	4a08      	ldr	r2, [pc, #32]	; (8018aac <itsdk_config_resetToFactory+0x3c>)
 8018a8c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8018a8e:	c313      	stmia	r3!, {r0, r1, r4}
 8018a90:	ca13      	ldmia	r2!, {r0, r1, r4}
 8018a92:	c313      	stmia	r3!, {r0, r1, r4}
 8018a94:	6812      	ldr	r2, [r2, #0]
 8018a96:	601a      	str	r2, [r3, #0]
		 ITSDK_ERROR_REPORT(ITSDK_ERROR_CONFIG_FACTORY_DEFAULT,3);
 8018a98:	4b06      	ldr	r3, [pc, #24]	; (8018ab4 <itsdk_config_resetToFactory+0x44>)
 8018a9a:	2103      	movs	r1, #3
 8018a9c:	0018      	movs	r0, r3
 8018a9e:	f002 fce1 	bl	801b464 <itsdk_error_report>
	     return CONFIG_SUCCESS;
 8018aa2:	2300      	movs	r3, #0
	}
 8018aa4:	0018      	movs	r0, r3
 8018aa6:	46bd      	mov	sp, r7
 8018aa8:	bdb0      	pop	{r4, r5, r7, pc}
 8018aaa:	46c0      	nop			; (mov r8, r8)
 8018aac:	20001654 	.word	0x20001654
 8018ab0:	20001638 	.word	0x20001638
 8018ab4:	50000071 	.word	0x50000071

08018ab8 <itsdk_config_loadConfiguration>:
 * Load the configuration from the NVM, eventually from factory default when the NVM is disabled
 * The Configuration will be restored from default when the version have changed.
 * The factory init functions will be called.
 * When a Application defined configuration exists the initialization function needs to be override.
 */
itsdk_config_ret_e itsdk_config_loadConfiguration(itsdk_config_load_mode_e mode) {
 8018ab8:	b590      	push	{r4, r7, lr}
 8018aba:	b087      	sub	sp, #28
 8018abc:	af02      	add	r7, sp, #8
 8018abe:	0002      	movs	r2, r0
 8018ac0:	1dfb      	adds	r3, r7, #7
 8018ac2:	701a      	strb	r2, [r3, #0]

#if ITSDK_WITH_CONSOLE == __ENABLE
	__console_configMng.console_private = _itsdk_config_consolePriv;
 8018ac4:	4b60      	ldr	r3, [pc, #384]	; (8018c48 <itsdk_config_loadConfiguration+0x190>)
 8018ac6:	4a61      	ldr	r2, [pc, #388]	; (8018c4c <itsdk_config_loadConfiguration+0x194>)
 8018ac8:	601a      	str	r2, [r3, #0]
	__console_configMng.console_public = _itsdk_config_consolePublic;
 8018aca:	4b5f      	ldr	r3, [pc, #380]	; (8018c48 <itsdk_config_loadConfiguration+0x190>)
 8018acc:	4a60      	ldr	r2, [pc, #384]	; (8018c50 <itsdk_config_loadConfiguration+0x198>)
 8018ace:	605a      	str	r2, [r3, #4]
	__console_configMng.next = NULL;
 8018ad0:	4b5d      	ldr	r3, [pc, #372]	; (8018c48 <itsdk_config_loadConfiguration+0x190>)
 8018ad2:	2200      	movs	r2, #0
 8018ad4:	609a      	str	r2, [r3, #8]
	itsdk_console_registerCommand(&__console_configMng);
 8018ad6:	4b5c      	ldr	r3, [pc, #368]	; (8018c48 <itsdk_config_loadConfiguration+0x190>)
 8018ad8:	0018      	movs	r0, r3
 8018ada:	f7ff fe21 	bl	8018720 <itsdk_console_registerCommand>
#endif

#if ITSDK_CONFIGURATION_MODE == __CONFIG_EEPROM
  uint8_t v;
  uint8_t requestFactoryReset = 0;
 8018ade:	230f      	movs	r3, #15
 8018ae0:	18fb      	adds	r3, r7, r3
 8018ae2:	2200      	movs	r2, #0
 8018ae4:	701a      	strb	r2, [r3, #0]
  uint8_t configUpdated = 0;
 8018ae6:	230e      	movs	r3, #14
 8018ae8:	18fb      	adds	r3, r7, r3
 8018aea:	2200      	movs	r2, #0
 8018aec:	701a      	strb	r2, [r3, #0]

  if ( mode != CONFIG_FORCE_TO_FACTORY ) {
 8018aee:	1dfb      	adds	r3, r7, #7
 8018af0:	781b      	ldrb	r3, [r3, #0]
 8018af2:	2b01      	cmp	r3, #1
 8018af4:	d100      	bne.n	8018af8 <itsdk_config_loadConfiguration+0x40>
 8018af6:	e071      	b.n	8018bdc <itsdk_config_loadConfiguration+0x124>
     if ( ! eeprom_read_config(&itsdk_config, sizeof(itsdk_configuration_nvm_t), ITSDK_CONFIGURATION_MNG_VERSION,&v, true) ) {
 8018af8:	230d      	movs	r3, #13
 8018afa:	18fa      	adds	r2, r7, r3
 8018afc:	4855      	ldr	r0, [pc, #340]	; (8018c54 <itsdk_config_loadConfiguration+0x19c>)
 8018afe:	2301      	movs	r3, #1
 8018b00:	9300      	str	r3, [sp, #0]
 8018b02:	0013      	movs	r3, r2
 8018b04:	2201      	movs	r2, #1
 8018b06:	211c      	movs	r1, #28
 8018b08:	f7ff fe7c 	bl	8018804 <eeprom_read_config>
 8018b0c:	1e03      	subs	r3, r0, #0
 8018b0e:	d11c      	bne.n	8018b4a <itsdk_config_loadConfiguration+0x92>
		 // failed to read configuration
		 if ( v == 0 ) {
 8018b10:	230d      	movs	r3, #13
 8018b12:	18fb      	adds	r3, r7, r3
 8018b14:	781b      	ldrb	r3, [r3, #0]
 8018b16:	2b00      	cmp	r3, #0
 8018b18:	d109      	bne.n	8018b2e <itsdk_config_loadConfiguration+0x76>
  		    ITSDK_ERROR_REPORT(ITSDK_ERROR_CONFIG_CONFIG_BADMAGIC,0);
 8018b1a:	4b4f      	ldr	r3, [pc, #316]	; (8018c58 <itsdk_config_loadConfiguration+0x1a0>)
 8018b1c:	2100      	movs	r1, #0
 8018b1e:	0018      	movs	r0, r3
 8018b20:	f002 fca0 	bl	801b464 <itsdk_error_report>
			requestFactoryReset=1;
 8018b24:	230f      	movs	r3, #15
 8018b26:	18fb      	adds	r3, r7, r3
 8018b28:	2201      	movs	r2, #1
 8018b2a:	701a      	strb	r2, [r3, #0]
 8018b2c:	e00d      	b.n	8018b4a <itsdk_config_loadConfiguration+0x92>
		 } else if ( v!= ITSDK_CONFIGURATION_MNG_VERSION ) {
 8018b2e:	230d      	movs	r3, #13
 8018b30:	18fb      	adds	r3, r7, r3
 8018b32:	781b      	ldrb	r3, [r3, #0]
 8018b34:	2b01      	cmp	r3, #1
 8018b36:	d008      	beq.n	8018b4a <itsdk_config_loadConfiguration+0x92>
  		    // magic is invalid or MNG version has changed... impossible to migrate
  		    ITSDK_ERROR_REPORT(ITSDK_ERROR_CONFIG_CONFIG_BADMNGV,0);
 8018b38:	4b48      	ldr	r3, [pc, #288]	; (8018c5c <itsdk_config_loadConfiguration+0x1a4>)
 8018b3a:	2100      	movs	r1, #0
 8018b3c:	0018      	movs	r0, r3
 8018b3e:	f002 fc91 	bl	801b464 <itsdk_error_report>
			requestFactoryReset=1;
 8018b42:	230f      	movs	r3, #15
 8018b44:	18fb      	adds	r3, r7, r3
 8018b46:	2201      	movs	r2, #1
 8018b48:	701a      	strb	r2, [r3, #0]
	  }
   	  // we have a config loaded but it can be a wrong one
	  // Process SDK
      //   management remains the same but the version & size may have changed.
	  //   migration is possible
	  if ( requestFactoryReset == 0 && (itsdk_config.sdk.version != ITSDK_CONFIGURATION_SDK_VERSION || itsdk_config.sdk.size != sizeof(itsdk_configuration_internal_t) ) ) {
 8018b4a:	230f      	movs	r3, #15
 8018b4c:	18fb      	adds	r3, r7, r3
 8018b4e:	781b      	ldrb	r3, [r3, #0]
 8018b50:	2b00      	cmp	r3, #0
 8018b52:	d121      	bne.n	8018b98 <itsdk_config_loadConfiguration+0xe0>
 8018b54:	4b3f      	ldr	r3, [pc, #252]	; (8018c54 <itsdk_config_loadConfiguration+0x19c>)
 8018b56:	781b      	ldrb	r3, [r3, #0]
 8018b58:	2b16      	cmp	r3, #22
 8018b5a:	d103      	bne.n	8018b64 <itsdk_config_loadConfiguration+0xac>
 8018b5c:	4b3d      	ldr	r3, [pc, #244]	; (8018c54 <itsdk_config_loadConfiguration+0x19c>)
 8018b5e:	885b      	ldrh	r3, [r3, #2]
 8018b60:	2b18      	cmp	r3, #24
 8018b62:	d019      	beq.n	8018b98 <itsdk_config_loadConfiguration+0xe0>
	     // SDK version has changed or compilation option has changed
	     if ( itsdk_config.sdk.size != sizeof(itsdk_configuration_internal_t) ) {
 8018b64:	4b3b      	ldr	r3, [pc, #236]	; (8018c54 <itsdk_config_loadConfiguration+0x19c>)
 8018b66:	885b      	ldrh	r3, [r3, #2]
 8018b68:	2b18      	cmp	r3, #24
 8018b6a:	d009      	beq.n	8018b80 <itsdk_config_loadConfiguration+0xc8>
	 	    // and the size has changed so we need to force a reset
		    requestFactoryReset=1;
 8018b6c:	230f      	movs	r3, #15
 8018b6e:	18fb      	adds	r3, r7, r3
 8018b70:	2201      	movs	r2, #1
 8018b72:	701a      	strb	r2, [r3, #0]
		    ITSDK_ERROR_REPORT(ITSDK_ERROR_CONFIG_MIGRATE_FAILED,0);
 8018b74:	4b3a      	ldr	r3, [pc, #232]	; (8018c60 <itsdk_config_loadConfiguration+0x1a8>)
 8018b76:	2100      	movs	r1, #0
 8018b78:	0018      	movs	r0, r3
 8018b7a:	f002 fc73 	bl	801b464 <itsdk_error_report>
 8018b7e:	e00b      	b.n	8018b98 <itsdk_config_loadConfiguration+0xe0>
		 } else {
		    // migration is possible ...
			//  if ( itsdk_config.sdk.version < 0x17 ) {
			//  }
		    itsdk_config.sdk.version = ITSDK_CONFIGURATION_SDK_VERSION;
 8018b80:	4b34      	ldr	r3, [pc, #208]	; (8018c54 <itsdk_config_loadConfiguration+0x19c>)
 8018b82:	2216      	movs	r2, #22
 8018b84:	701a      	strb	r2, [r3, #0]

		    configUpdated = 1;
 8018b86:	230e      	movs	r3, #14
 8018b88:	18fb      	adds	r3, r7, r3
 8018b8a:	2201      	movs	r2, #1
 8018b8c:	701a      	strb	r2, [r3, #0]
		    ITSDK_ERROR_REPORT(ITSDK_ERROR_CONFIG_SDKCNF_UPGRADED,ITSDK_CONFIGURATION_SDK_VERSION);
 8018b8e:	4b35      	ldr	r3, [pc, #212]	; (8018c64 <itsdk_config_loadConfiguration+0x1ac>)
 8018b90:	2116      	movs	r1, #22
 8018b92:	0018      	movs	r0, r3
 8018b94:	f002 fc66 	bl	801b464 <itsdk_error_report>
		 }
	  }
	  #if ITSDK_WITH_CONFIGURATION_APP == __ENABLE
	  if ( requestFactoryReset == 0 && itsdk_config.app.version != ITSDK_CONFIGURATION_APP_VERSION ) {
 8018b98:	230f      	movs	r3, #15
 8018b9a:	18fb      	adds	r3, r7, r3
 8018b9c:	781b      	ldrb	r3, [r3, #0]
 8018b9e:	2b00      	cmp	r3, #0
 8018ba0:	d120      	bne.n	8018be4 <itsdk_config_loadConfiguration+0x12c>
 8018ba2:	4b2c      	ldr	r3, [pc, #176]	; (8018c54 <itsdk_config_loadConfiguration+0x19c>)
 8018ba4:	7e1b      	ldrb	r3, [r3, #24]
 8018ba6:	2b01      	cmp	r3, #1
 8018ba8:	d01c      	beq.n	8018be4 <itsdk_config_loadConfiguration+0x12c>
		 // version has changed an upgrade can be possible, lets application level to decide.
		 if ( itsdk_config_app_upgradeConfiguration() == CONFIG_UPGRADED ) {
 8018baa:	f7ff ff4f 	bl	8018a4c <itsdk_config_app_upgradeConfiguration>
 8018bae:	0003      	movs	r3, r0
 8018bb0:	2b03      	cmp	r3, #3
 8018bb2:	d109      	bne.n	8018bc8 <itsdk_config_loadConfiguration+0x110>
			 // at least the version has been upgraded
			 configUpdated = 1;
 8018bb4:	230e      	movs	r3, #14
 8018bb6:	18fb      	adds	r3, r7, r3
 8018bb8:	2201      	movs	r2, #1
 8018bba:	701a      	strb	r2, [r3, #0]
			 ITSDK_ERROR_REPORT(ITSDK_ERROR_CONFIG_APPCNF_UPGRADED,ITSDK_CONFIGURATION_APP_VERSION);
 8018bbc:	4b2a      	ldr	r3, [pc, #168]	; (8018c68 <itsdk_config_loadConfiguration+0x1b0>)
 8018bbe:	2101      	movs	r1, #1
 8018bc0:	0018      	movs	r0, r3
 8018bc2:	f002 fc4f 	bl	801b464 <itsdk_error_report>
 8018bc6:	e00d      	b.n	8018be4 <itsdk_config_loadConfiguration+0x12c>
		 } else {
			 requestFactoryReset = 1;
 8018bc8:	230f      	movs	r3, #15
 8018bca:	18fb      	adds	r3, r7, r3
 8018bcc:	2201      	movs	r2, #1
 8018bce:	701a      	strb	r2, [r3, #0]
  		     ITSDK_ERROR_REPORT(ITSDK_ERROR_CONFIG_MIGRATE_FAILED,1);
 8018bd0:	4b23      	ldr	r3, [pc, #140]	; (8018c60 <itsdk_config_loadConfiguration+0x1a8>)
 8018bd2:	2101      	movs	r1, #1
 8018bd4:	0018      	movs	r0, r3
 8018bd6:	f002 fc45 	bl	801b464 <itsdk_error_report>
 8018bda:	e003      	b.n	8018be4 <itsdk_config_loadConfiguration+0x12c>
		 }
      }
	  #endif

   } else requestFactoryReset = 1;
 8018bdc:	230f      	movs	r3, #15
 8018bde:	18fb      	adds	r3, r7, r3
 8018be0:	2201      	movs	r2, #1
 8018be2:	701a      	strb	r2, [r3, #0]


   if ( requestFactoryReset == 1 ) {
 8018be4:	230f      	movs	r3, #15
 8018be6:	18fb      	adds	r3, r7, r3
 8018be8:	781b      	ldrb	r3, [r3, #0]
 8018bea:	2b01      	cmp	r3, #1
 8018bec:	d10c      	bne.n	8018c08 <itsdk_config_loadConfiguration+0x150>
	  itsdk_config_sdk_resetToFactory();
 8018bee:	f7ff fedd 	bl	80189ac <itsdk_config_sdk_resetToFactory>
	  itsdk_config_app_resetToFactory();
 8018bf2:	f7ff ff19 	bl	8018a28 <itsdk_config_app_resetToFactory>
	  configUpdated = 1;
 8018bf6:	230e      	movs	r3, #14
 8018bf8:	18fb      	adds	r3, r7, r3
 8018bfa:	2201      	movs	r2, #1
 8018bfc:	701a      	strb	r2, [r3, #0]
	  ITSDK_ERROR_REPORT(ITSDK_ERROR_CONFIG_FACTORY_DEFAULT,3);
 8018bfe:	4b1b      	ldr	r3, [pc, #108]	; (8018c6c <itsdk_config_loadConfiguration+0x1b4>)
 8018c00:	2103      	movs	r1, #3
 8018c02:	0018      	movs	r0, r3
 8018c04:	f002 fc2e 	bl	801b464 <itsdk_error_report>
   }

   if (configUpdated == 1) {
 8018c08:	230e      	movs	r3, #14
 8018c0a:	18fb      	adds	r3, r7, r3
 8018c0c:	781b      	ldrb	r3, [r3, #0]
 8018c0e:	2b01      	cmp	r3, #1
 8018c10:	d105      	bne.n	8018c1e <itsdk_config_loadConfiguration+0x166>
	  // need to store the configuration
      eeprom_write_config(&itsdk_config, sizeof(itsdk_configuration_nvm_t), ITSDK_CONFIGURATION_MNG_VERSION);
 8018c12:	4b10      	ldr	r3, [pc, #64]	; (8018c54 <itsdk_config_loadConfiguration+0x19c>)
 8018c14:	2201      	movs	r2, #1
 8018c16:	211c      	movs	r1, #28
 8018c18:	0018      	movs	r0, r3
 8018c1a:	f7ff fdb3 	bl	8018784 <eeprom_write_config>
   }
   bcopy(&itsdk_config,&itsdk_config_shadow,sizeof(itsdk_configuration_nvm_t));
 8018c1e:	4b14      	ldr	r3, [pc, #80]	; (8018c70 <itsdk_config_loadConfiguration+0x1b8>)
 8018c20:	4a0c      	ldr	r2, [pc, #48]	; (8018c54 <itsdk_config_loadConfiguration+0x19c>)
 8018c22:	ca13      	ldmia	r2!, {r0, r1, r4}
 8018c24:	c313      	stmia	r3!, {r0, r1, r4}
 8018c26:	ca13      	ldmia	r2!, {r0, r1, r4}
 8018c28:	c313      	stmia	r3!, {r0, r1, r4}
 8018c2a:	6812      	ldr	r2, [r2, #0]
 8018c2c:	601a      	str	r2, [r3, #0]
	  itsdk_config_app_resetToFactory();
    #endif
      bcopy(&itsdk_config,&itsdk_config_shadow,sizeof(itsdk_configuration_nvm_t));
 #endif

   return ( requestFactoryReset == 1 )?CONFIG_RESTORED_FROM_FACTORY:CONFIG_LOADED;
 8018c2e:	230f      	movs	r3, #15
 8018c30:	18fb      	adds	r3, r7, r3
 8018c32:	781b      	ldrb	r3, [r3, #0]
 8018c34:	2b01      	cmp	r3, #1
 8018c36:	d101      	bne.n	8018c3c <itsdk_config_loadConfiguration+0x184>
 8018c38:	2302      	movs	r3, #2
 8018c3a:	e000      	b.n	8018c3e <itsdk_config_loadConfiguration+0x186>
 8018c3c:	2301      	movs	r3, #1

}
 8018c3e:	0018      	movs	r0, r3
 8018c40:	46bd      	mov	sp, r7
 8018c42:	b005      	add	sp, #20
 8018c44:	bd90      	pop	{r4, r7, pc}
 8018c46:	46c0      	nop			; (mov r8, r8)
 8018c48:	200011e4 	.word	0x200011e4
 8018c4c:	08018e69 	.word	0x08018e69
 8018c50:	08018d21 	.word	0x08018d21
 8018c54:	20001654 	.word	0x20001654
 8018c58:	40000076 	.word	0x40000076
 8018c5c:	40000077 	.word	0x40000077
 8018c60:	50000078 	.word	0x50000078
 8018c64:	10000074 	.word	0x10000074
 8018c68:	10000075 	.word	0x10000075
 8018c6c:	50000071 	.word	0x50000071
 8018c70:	20001638 	.word	0x20001638

08018c74 <itsdk_config_app_commitConfiguration>:
// CONFIG SHADOW
// ====================================================================================================

#if ITSDK_CONFIGURATION_MODE != __CONFIG_STATIC

__weak itsdk_config_ret_e itsdk_config_app_commitConfiguration() {
 8018c74:	b580      	push	{r7, lr}
 8018c76:	af00      	add	r7, sp, #0
	return CONFIG_SUCCESS;
 8018c78:	2300      	movs	r3, #0
}
 8018c7a:	0018      	movs	r0, r3
 8018c7c:	46bd      	mov	sp, r7
 8018c7e:	bd80      	pop	{r7, pc}

08018c80 <itsdk_config_commitConfiguration>:

/**
 * Commit a shadow configuration into the standard config.
 * Save it
 */
itsdk_config_ret_e itsdk_config_commitConfiguration(itsdk_config_commit_mode_e mode) {
 8018c80:	b5b0      	push	{r4, r5, r7, lr}
 8018c82:	b084      	sub	sp, #16
 8018c84:	af00      	add	r7, sp, #0
 8018c86:	0002      	movs	r2, r0
 8018c88:	1dfb      	adds	r3, r7, #7
 8018c8a:	701a      	strb	r2, [r3, #0]

 itsdk_config_ret_e r = itsdk_config_app_commitConfiguration();
 8018c8c:	250f      	movs	r5, #15
 8018c8e:	197c      	adds	r4, r7, r5
 8018c90:	f7ff fff0 	bl	8018c74 <itsdk_config_app_commitConfiguration>
 8018c94:	0003      	movs	r3, r0
 8018c96:	7023      	strb	r3, [r4, #0]
 if ( r != CONFIG_SUCCESS ) return r;
 8018c98:	197b      	adds	r3, r7, r5
 8018c9a:	781b      	ldrb	r3, [r3, #0]
 8018c9c:	2b00      	cmp	r3, #0
 8018c9e:	d003      	beq.n	8018ca8 <itsdk_config_commitConfiguration+0x28>
 8018ca0:	230f      	movs	r3, #15
 8018ca2:	18fb      	adds	r3, r7, r3
 8018ca4:	781b      	ldrb	r3, [r3, #0]
 8018ca6:	e023      	b.n	8018cf0 <itsdk_config_commitConfiguration+0x70>

 bcopy(&itsdk_config_shadow,&itsdk_config,sizeof(itsdk_configuration_nvm_t));
 8018ca8:	4b13      	ldr	r3, [pc, #76]	; (8018cf8 <itsdk_config_commitConfiguration+0x78>)
 8018caa:	4a14      	ldr	r2, [pc, #80]	; (8018cfc <itsdk_config_commitConfiguration+0x7c>)
 8018cac:	ca13      	ldmia	r2!, {r0, r1, r4}
 8018cae:	c313      	stmia	r3!, {r0, r1, r4}
 8018cb0:	ca13      	ldmia	r2!, {r0, r1, r4}
 8018cb2:	c313      	stmia	r3!, {r0, r1, r4}
 8018cb4:	6812      	ldr	r2, [r2, #0]
 8018cb6:	601a      	str	r2, [r3, #0]
 ITSDK_ERROR_REPORT(ITSDK_ERROR_CONFIG_COMMIT_NEW_CONF,0);
 8018cb8:	2100      	movs	r1, #0
 8018cba:	2072      	movs	r0, #114	; 0x72
 8018cbc:	f002 fbd2 	bl	801b464 <itsdk_error_report>

#if ITSDK_CONFIGURATION_MODE == __CONFIG_EEPROM
 if ( mode == CONFIG_COMMIT_SAVE || mode == CONFIG_COMMIT_SAVE_REBOOT ) {
 8018cc0:	1dfb      	adds	r3, r7, #7
 8018cc2:	781b      	ldrb	r3, [r3, #0]
 8018cc4:	2b01      	cmp	r3, #1
 8018cc6:	d003      	beq.n	8018cd0 <itsdk_config_commitConfiguration+0x50>
 8018cc8:	1dfb      	adds	r3, r7, #7
 8018cca:	781b      	ldrb	r3, [r3, #0]
 8018ccc:	2b02      	cmp	r3, #2
 8018cce:	d105      	bne.n	8018cdc <itsdk_config_commitConfiguration+0x5c>
     eeprom_write_config(&itsdk_config, sizeof(itsdk_configuration_nvm_t), ITSDK_CONFIGURATION_MNG_VERSION);
 8018cd0:	4b09      	ldr	r3, [pc, #36]	; (8018cf8 <itsdk_config_commitConfiguration+0x78>)
 8018cd2:	2201      	movs	r2, #1
 8018cd4:	211c      	movs	r1, #28
 8018cd6:	0018      	movs	r0, r3
 8018cd8:	f7ff fd54 	bl	8018784 <eeprom_write_config>
 }
 if ( mode == CONFIG_COMMIT_SAVE_REBOOT ) {
 8018cdc:	1dfb      	adds	r3, r7, #7
 8018cde:	781b      	ldrb	r3, [r3, #0]
 8018ce0:	2b02      	cmp	r3, #2
 8018ce2:	d104      	bne.n	8018cee <itsdk_config_commitConfiguration+0x6e>
	 itsdk_delayMs(200);
 8018ce4:	20c8      	movs	r0, #200	; 0xc8
 8018ce6:	f004 fd2d 	bl	801d744 <itsdk_delayMs>
	 itsdk_reset();
 8018cea:	f004 fcd9 	bl	801d6a0 <itsdk_reset>
 }
#endif
 return CONFIG_SUCCESS;
 8018cee:	2300      	movs	r3, #0
}
 8018cf0:	0018      	movs	r0, r3
 8018cf2:	46bd      	mov	sp, r7
 8018cf4:	b004      	add	sp, #16
 8018cf6:	bdb0      	pop	{r4, r5, r7, pc}
 8018cf8:	20001654 	.word	0x20001654
 8018cfc:	20001638 	.word	0x20001638

08018d00 <itsdk_config_app_printConfig>:

	#if ITSDK_WITH_CONFIGURATION_APP == __ENABLE
		/**
		 * This function need to be overrided
		 */
		__weak void itsdk_config_app_printConfig(itsdk_configuration_nvm_t * c) {
 8018d00:	b580      	push	{r7, lr}
 8018d02:	b082      	sub	sp, #8
 8018d04:	af00      	add	r7, sp, #0
 8018d06:	6078      	str	r0, [r7, #4]
			ITSDK_ERROR_REPORT(ITSDK_ERROR_CONFIG_OVERRIDE_MISS,0);
 8018d08:	4b04      	ldr	r3, [pc, #16]	; (8018d1c <itsdk_config_app_printConfig+0x1c>)
 8018d0a:	2100      	movs	r1, #0
 8018d0c:	0018      	movs	r0, r3
 8018d0e:	f002 fba9 	bl	801b464 <itsdk_error_report>
			return;
 8018d12:	46c0      	nop			; (mov r8, r8)
		}
 8018d14:	46bd      	mov	sp, r7
 8018d16:	b002      	add	sp, #8
 8018d18:	bd80      	pop	{r7, pc}
 8018d1a:	46c0      	nop			; (mov r8, r8)
 8018d1c:	40000070 	.word	0x40000070

08018d20 <_itsdk_config_consolePublic>:

	#endif // ITSDK_WITH_CONFIGURATION_APP

	static itsdk_console_return_e _itsdk_config_consolePublic(char * buffer, uint8_t sz) {
 8018d20:	b580      	push	{r7, lr}
 8018d22:	b084      	sub	sp, #16
 8018d24:	af00      	add	r7, sp, #0
 8018d26:	6078      	str	r0, [r7, #4]
 8018d28:	000a      	movs	r2, r1
 8018d2a:	1cfb      	adds	r3, r7, #3
 8018d2c:	701a      	strb	r2, [r3, #0]
	   if ( sz == 1 ) {
 8018d2e:	1cfb      	adds	r3, r7, #3
 8018d30:	781b      	ldrb	r3, [r3, #0]
 8018d32:	2b01      	cmp	r3, #1
 8018d34:	d000      	beq.n	8018d38 <_itsdk_config_consolePublic+0x18>
 8018d36:	e074      	b.n	8018e22 <_itsdk_config_consolePublic+0x102>
		  switch(buffer[0]){
 8018d38:	687b      	ldr	r3, [r7, #4]
 8018d3a:	781b      	ldrb	r3, [r3, #0]
 8018d3c:	2b43      	cmp	r3, #67	; 0x43
 8018d3e:	d012      	beq.n	8018d66 <_itsdk_config_consolePublic+0x46>
 8018d40:	2b63      	cmp	r3, #99	; 0x63
 8018d42:	d010      	beq.n	8018d66 <_itsdk_config_consolePublic+0x46>
 8018d44:	2b3f      	cmp	r3, #63	; 0x3f
 8018d46:	d000      	beq.n	8018d4a <_itsdk_config_consolePublic+0x2a>
				  _itsdk_console_printf("OK\r\n");
				}
				return ITSDK_CONSOLE_SUCCES;
				break;
			default:
				break;
 8018d48:	e06c      	b.n	8018e24 <_itsdk_config_consolePublic+0x104>
				_itsdk_console_printf("--- ConfigMng\r\n");
 8018d4a:	4b39      	ldr	r3, [pc, #228]	; (8018e30 <_itsdk_config_consolePublic+0x110>)
 8018d4c:	0018      	movs	r0, r3
 8018d4e:	f7ff fccf 	bl	80186f0 <_itsdk_console_printf>
				_itsdk_console_printf("c          : print config\r\n");
 8018d52:	4b38      	ldr	r3, [pc, #224]	; (8018e34 <_itsdk_config_consolePublic+0x114>)
 8018d54:	0018      	movs	r0, r3
 8018d56:	f7ff fccb 	bl	80186f0 <_itsdk_console_printf>
				_itsdk_console_printf("C          : print shadow config\r\n");
 8018d5a:	4b37      	ldr	r3, [pc, #220]	; (8018e38 <_itsdk_config_consolePublic+0x118>)
 8018d5c:	0018      	movs	r0, r3
 8018d5e:	f7ff fcc7 	bl	80186f0 <_itsdk_console_printf>
			  return ITSDK_CONSOLE_SUCCES;
 8018d62:	2300      	movs	r3, #0
 8018d64:	e05f      	b.n	8018e26 <_itsdk_config_consolePublic+0x106>
					itsdk_configuration_nvm_t * _c = &itsdk_config;
 8018d66:	4b35      	ldr	r3, [pc, #212]	; (8018e3c <_itsdk_config_consolePublic+0x11c>)
 8018d68:	60fb      	str	r3, [r7, #12]
					if (buffer[0]=='C') _c = &itsdk_config_shadow;
 8018d6a:	687b      	ldr	r3, [r7, #4]
 8018d6c:	781b      	ldrb	r3, [r3, #0]
 8018d6e:	2b43      	cmp	r3, #67	; 0x43
 8018d70:	d101      	bne.n	8018d76 <_itsdk_config_consolePublic+0x56>
 8018d72:	4b33      	ldr	r3, [pc, #204]	; (8018e40 <_itsdk_config_consolePublic+0x120>)
 8018d74:	60fb      	str	r3, [r7, #12]
					_itsdk_console_printf("sdk.version : %02X\r\n",_c->sdk.version);
 8018d76:	68fb      	ldr	r3, [r7, #12]
 8018d78:	781b      	ldrb	r3, [r3, #0]
 8018d7a:	001a      	movs	r2, r3
 8018d7c:	4b31      	ldr	r3, [pc, #196]	; (8018e44 <_itsdk_config_consolePublic+0x124>)
 8018d7e:	0011      	movs	r1, r2
 8018d80:	0018      	movs	r0, r3
 8018d82:	f7ff fcb5 	bl	80186f0 <_itsdk_console_printf>
					_itsdk_console_printf("sdk.activeNetwork : %d\r\n",_c->sdk.activeNetwork);
 8018d86:	68fb      	ldr	r3, [r7, #12]
 8018d88:	88db      	ldrh	r3, [r3, #6]
 8018d8a:	001a      	movs	r2, r3
 8018d8c:	4b2e      	ldr	r3, [pc, #184]	; (8018e48 <_itsdk_config_consolePublic+0x128>)
 8018d8e:	0011      	movs	r1, r2
 8018d90:	0018      	movs	r0, r3
 8018d92:	f7ff fcad 	bl	80186f0 <_itsdk_console_printf>
					_itsdk_console_printf("sdk.activeRegion : %04X\r\n",_c->sdk.activeRegion);
 8018d96:	68fb      	ldr	r3, [r7, #12]
 8018d98:	891b      	ldrh	r3, [r3, #8]
 8018d9a:	001a      	movs	r2, r3
 8018d9c:	4b2b      	ldr	r3, [pc, #172]	; (8018e4c <_itsdk_config_consolePublic+0x12c>)
 8018d9e:	0011      	movs	r1, r2
 8018da0:	0018      	movs	r0, r3
 8018da2:	f7ff fca5 	bl	80186f0 <_itsdk_console_printf>
					_itsdk_console_printf("sdk.lora.adrmode : %d\r\n",_c->sdk.lorawan.adrMode);
 8018da6:	68fb      	ldr	r3, [r7, #12]
 8018da8:	7a9b      	ldrb	r3, [r3, #10]
 8018daa:	061b      	lsls	r3, r3, #24
 8018dac:	0f9b      	lsrs	r3, r3, #30
 8018dae:	b2db      	uxtb	r3, r3
 8018db0:	001a      	movs	r2, r3
 8018db2:	4b27      	ldr	r3, [pc, #156]	; (8018e50 <_itsdk_config_consolePublic+0x130>)
 8018db4:	0011      	movs	r1, r2
 8018db6:	0018      	movs	r0, r3
 8018db8:	f7ff fc9a 	bl	80186f0 <_itsdk_console_printf>
					_itsdk_console_printf("sdk.lora.devEuiType : %d\r\n",_c->sdk.lorawan.devEuiType);
 8018dbc:	68fb      	ldr	r3, [r7, #12]
 8018dbe:	7a9b      	ldrb	r3, [r3, #10]
 8018dc0:	069b      	lsls	r3, r3, #26
 8018dc2:	0f9b      	lsrs	r3, r3, #30
 8018dc4:	b2db      	uxtb	r3, r3
 8018dc6:	001a      	movs	r2, r3
 8018dc8:	4b22      	ldr	r3, [pc, #136]	; (8018e54 <_itsdk_config_consolePublic+0x134>)
 8018dca:	0011      	movs	r1, r2
 8018dcc:	0018      	movs	r0, r3
 8018dce:	f7ff fc8f 	bl	80186f0 <_itsdk_console_printf>
					_itsdk_console_printf("sdk.lora.joinMode : %d\r\n",_c->sdk.lorawan.joinMode);
 8018dd2:	68fb      	ldr	r3, [r7, #12]
 8018dd4:	7a9b      	ldrb	r3, [r3, #10]
 8018dd6:	079b      	lsls	r3, r3, #30
 8018dd8:	0f9b      	lsrs	r3, r3, #30
 8018dda:	b2db      	uxtb	r3, r3
 8018ddc:	001a      	movs	r2, r3
 8018dde:	4b1e      	ldr	r3, [pc, #120]	; (8018e58 <_itsdk_config_consolePublic+0x138>)
 8018de0:	0011      	movs	r1, r2
 8018de2:	0018      	movs	r0, r3
 8018de4:	f7ff fc84 	bl	80186f0 <_itsdk_console_printf>
					_itsdk_console_printf("sdk.lora.networkType : %d\r\n",_c->sdk.lorawan.networkType);
 8018de8:	68fb      	ldr	r3, [r7, #12]
 8018dea:	7a9b      	ldrb	r3, [r3, #10]
 8018dec:	071b      	lsls	r3, r3, #28
 8018dee:	0f9b      	lsrs	r3, r3, #30
 8018df0:	b2db      	uxtb	r3, r3
 8018df2:	001a      	movs	r2, r3
 8018df4:	4b19      	ldr	r3, [pc, #100]	; (8018e5c <_itsdk_config_consolePublic+0x13c>)
 8018df6:	0011      	movs	r1, r2
 8018df8:	0018      	movs	r0, r3
 8018dfa:	f7ff fc79 	bl	80186f0 <_itsdk_console_printf>
					_itsdk_console_printf("sdk.lora.retries : %d\r\n",_c->sdk.lorawan.retries);
 8018dfe:	68fb      	ldr	r3, [r7, #12]
 8018e00:	7adb      	ldrb	r3, [r3, #11]
 8018e02:	001a      	movs	r2, r3
 8018e04:	4b16      	ldr	r3, [pc, #88]	; (8018e60 <_itsdk_config_consolePublic+0x140>)
 8018e06:	0011      	movs	r1, r2
 8018e08:	0018      	movs	r0, r3
 8018e0a:	f7ff fc71 	bl	80186f0 <_itsdk_console_printf>
					   itsdk_config_app_printConfig(_c);
 8018e0e:	68fb      	ldr	r3, [r7, #12]
 8018e10:	0018      	movs	r0, r3
 8018e12:	f7ff ff75 	bl	8018d00 <itsdk_config_app_printConfig>
				  _itsdk_console_printf("OK\r\n");
 8018e16:	4b13      	ldr	r3, [pc, #76]	; (8018e64 <_itsdk_config_consolePublic+0x144>)
 8018e18:	0018      	movs	r0, r3
 8018e1a:	f7ff fc69 	bl	80186f0 <_itsdk_console_printf>
				return ITSDK_CONSOLE_SUCCES;
 8018e1e:	2300      	movs	r3, #0
 8018e20:	e001      	b.n	8018e26 <_itsdk_config_consolePublic+0x106>
		  }
	  } //Sz == 1
 8018e22:	46c0      	nop			; (mov r8, r8)
	  return ITSDK_CONSOLE_NOTFOUND;
 8018e24:	2301      	movs	r3, #1
	}
 8018e26:	0018      	movs	r0, r3
 8018e28:	46bd      	mov	sp, r7
 8018e2a:	b004      	add	sp, #16
 8018e2c:	bd80      	pop	{r7, pc}
 8018e2e:	46c0      	nop			; (mov r8, r8)
 8018e30:	0801fc40 	.word	0x0801fc40
 8018e34:	0801fc50 	.word	0x0801fc50
 8018e38:	0801fc6c 	.word	0x0801fc6c
 8018e3c:	20001654 	.word	0x20001654
 8018e40:	20001638 	.word	0x20001638
 8018e44:	0801fc90 	.word	0x0801fc90
 8018e48:	0801fca8 	.word	0x0801fca8
 8018e4c:	0801fcc4 	.word	0x0801fcc4
 8018e50:	0801fce0 	.word	0x0801fce0
 8018e54:	0801fcf8 	.word	0x0801fcf8
 8018e58:	0801fd14 	.word	0x0801fd14
 8018e5c:	0801fd30 	.word	0x0801fd30
 8018e60:	0801fd4c 	.word	0x0801fd4c
 8018e64:	0801fd64 	.word	0x0801fd64

08018e68 <_itsdk_config_consolePriv>:

static itsdk_console_return_e _itsdk_config_consolePriv(char * buffer, uint8_t sz) {
 8018e68:	b5b0      	push	{r4, r5, r7, lr}
 8018e6a:	b088      	sub	sp, #32
 8018e6c:	af00      	add	r7, sp, #0
 8018e6e:	6078      	str	r0, [r7, #4]
 8018e70:	000a      	movs	r2, r1
 8018e72:	1cfb      	adds	r3, r7, #3
 8018e74:	701a      	strb	r2, [r3, #0]
#if ITSDK_CONFIGURATION_MODE != __CONFIG_STATIC
	if ( sz == 1 ) {
 8018e76:	1cfb      	adds	r3, r7, #3
 8018e78:	781b      	ldrb	r3, [r3, #0]
 8018e7a:	2b01      	cmp	r3, #1
 8018e7c:	d000      	beq.n	8018e80 <_itsdk_config_consolePriv+0x18>
 8018e7e:	e098      	b.n	8018fb2 <_itsdk_config_consolePriv+0x14a>
	  switch(buffer[0]){
 8018e80:	687b      	ldr	r3, [r7, #4]
 8018e82:	781b      	ldrb	r3, [r3, #0]
 8018e84:	2b46      	cmp	r3, #70	; 0x46
 8018e86:	d03b      	beq.n	8018f00 <_itsdk_config_consolePriv+0x98>
 8018e88:	dc02      	bgt.n	8018e90 <_itsdk_config_consolePriv+0x28>
 8018e8a:	2b3f      	cmp	r3, #63	; 0x3f
 8018e8c:	d005      	beq.n	8018e9a <_itsdk_config_consolePriv+0x32>
			  _itsdk_console_printf("OK\r\n");
			 return ITSDK_CONSOLE_SUCCES;
			}
		#endif
		default:
			break;
 8018e8e:	e21c      	b.n	80192ca <_itsdk_config_consolePriv+0x462>
	  switch(buffer[0]){
 8018e90:	2b53      	cmp	r3, #83	; 0x53
 8018e92:	d02c      	beq.n	8018eee <_itsdk_config_consolePriv+0x86>
 8018e94:	2b6d      	cmp	r3, #109	; 0x6d
 8018e96:	d040      	beq.n	8018f1a <_itsdk_config_consolePriv+0xb2>
			break;
 8018e98:	e217      	b.n	80192ca <_itsdk_config_consolePriv+0x462>
			  _itsdk_console_printf("S          : commit configuration\r\n");
 8018e9a:	4bd9      	ldr	r3, [pc, #868]	; (8019200 <_itsdk_config_consolePriv+0x398>)
 8018e9c:	0018      	movs	r0, r3
 8018e9e:	f7ff fc27 	bl	80186f0 <_itsdk_console_printf>
			  _itsdk_console_printf("F          : restore factory default config\r\n");
 8018ea2:	4bd8      	ldr	r3, [pc, #864]	; (8019204 <_itsdk_config_consolePriv+0x39c>)
 8018ea4:	0018      	movs	r0, r3
 8018ea6:	f7ff fc23 	bl	80186f0 <_itsdk_console_printf>
			  _itsdk_console_printf("m          : see eeprom configuration\r\n");
 8018eaa:	4bd7      	ldr	r3, [pc, #860]	; (8019208 <_itsdk_config_consolePriv+0x3a0>)
 8018eac:	0018      	movs	r0, r3
 8018eae:	f7ff fc1f 	bl	80186f0 <_itsdk_console_printf>
			  _itsdk_console_printf("SC:N:x     : sdk.activeNetwork 1:SFX 2:LoRa\r\n");
 8018eb2:	4bd6      	ldr	r3, [pc, #856]	; (801920c <_itsdk_config_consolePriv+0x3a4>)
 8018eb4:	0018      	movs	r0, r3
 8018eb6:	f7ff fc1b 	bl	80186f0 <_itsdk_console_printf>
			  _itsdk_console_printf("SC:R:xxxx  : sdk.activeRegion __PLWAN_REGION_xx\r\n");
 8018eba:	4bd5      	ldr	r3, [pc, #852]	; (8019210 <_itsdk_config_consolePriv+0x3a8>)
 8018ebc:	0018      	movs	r0, r3
 8018ebe:	f7ff fc17 	bl	80186f0 <_itsdk_console_printf>
			  _itsdk_console_printf("SC:0:x     : lora.adrmode 1:OFF/2:ON\r\n");
 8018ec2:	4bd4      	ldr	r3, [pc, #848]	; (8019214 <_itsdk_config_consolePriv+0x3ac>)
 8018ec4:	0018      	movs	r0, r3
 8018ec6:	f7ff fc13 	bl	80186f0 <_itsdk_console_printf>
			  _itsdk_console_printf("SC:1:x     : lora.devEuiType 1:STATIC/2:GENERATED\r\n");
 8018eca:	4bd3      	ldr	r3, [pc, #844]	; (8019218 <_itsdk_config_consolePriv+0x3b0>)
 8018ecc:	0018      	movs	r0, r3
 8018ece:	f7ff fc0f 	bl	80186f0 <_itsdk_console_printf>
			  _itsdk_console_printf("SC:2:x     : lora.joinMode 1:OTAA/2:ABP\r\n");
 8018ed2:	4bd2      	ldr	r3, [pc, #840]	; (801921c <_itsdk_config_consolePriv+0x3b4>)
 8018ed4:	0018      	movs	r0, r3
 8018ed6:	f7ff fc0b 	bl	80186f0 <_itsdk_console_printf>
			  _itsdk_console_printf("SC:3:x     : lora.networkType 1:PUBLIC/2:PRIVATE\r\n");
 8018eda:	4bd1      	ldr	r3, [pc, #836]	; (8019220 <_itsdk_config_consolePriv+0x3b8>)
 8018edc:	0018      	movs	r0, r3
 8018ede:	f7ff fc07 	bl	80186f0 <_itsdk_console_printf>
			  _itsdk_console_printf("SC:4:nn    : lora.retries 00..99\r\n");
 8018ee2:	4bd0      	ldr	r3, [pc, #832]	; (8019224 <_itsdk_config_consolePriv+0x3bc>)
 8018ee4:	0018      	movs	r0, r3
 8018ee6:	f7ff fc03 	bl	80186f0 <_itsdk_console_printf>
		  return ITSDK_CONSOLE_SUCCES;
 8018eea:	2300      	movs	r3, #0
 8018eec:	e1ee      	b.n	80192cc <_itsdk_config_consolePriv+0x464>
			itsdk_config_commitConfiguration(CONFIG_COMMIT_SAVE);
 8018eee:	2001      	movs	r0, #1
 8018ef0:	f7ff fec6 	bl	8018c80 <itsdk_config_commitConfiguration>
			_itsdk_console_printf("OK\r\n");
 8018ef4:	4bcc      	ldr	r3, [pc, #816]	; (8019228 <_itsdk_config_consolePriv+0x3c0>)
 8018ef6:	0018      	movs	r0, r3
 8018ef8:	f7ff fbfa 	bl	80186f0 <_itsdk_console_printf>
			return ITSDK_CONSOLE_SUCCES;
 8018efc:	2300      	movs	r3, #0
 8018efe:	e1e5      	b.n	80192cc <_itsdk_config_consolePriv+0x464>
			  ITSDK_ERROR_REPORT(ITSDK_ERROR_CONFIG_FACTORY_DEFAULT,3);
 8018f00:	4bca      	ldr	r3, [pc, #808]	; (801922c <_itsdk_config_consolePriv+0x3c4>)
 8018f02:	2103      	movs	r1, #3
 8018f04:	0018      	movs	r0, r3
 8018f06:	f002 faad 	bl	801b464 <itsdk_error_report>
			  itsdk_config_resetToFactory();
 8018f0a:	f7ff fdb1 	bl	8018a70 <itsdk_config_resetToFactory>
			  _itsdk_console_printf("OK\r\n");
 8018f0e:	4bc6      	ldr	r3, [pc, #792]	; (8019228 <_itsdk_config_consolePriv+0x3c0>)
 8018f10:	0018      	movs	r0, r3
 8018f12:	f7ff fbed 	bl	80186f0 <_itsdk_console_printf>
			 return ITSDK_CONSOLE_SUCCES;
 8018f16:	2300      	movs	r3, #0
 8018f18:	e1d8      	b.n	80192cc <_itsdk_config_consolePriv+0x464>
			  uint32_t offset = 0;
 8018f1a:	2300      	movs	r3, #0
 8018f1c:	617b      	str	r3, [r7, #20]
			  uint32_t size = 0;
 8018f1e:	2300      	movs	r3, #0
 8018f20:	60fb      	str	r3, [r7, #12]
			  uint32_t totSize = 0;
 8018f22:	2300      	movs	r3, #0
 8018f24:	613b      	str	r3, [r7, #16]
			  	itsdk_secstore_getStoreSize(&size);
 8018f26:	240c      	movs	r4, #12
 8018f28:	193b      	adds	r3, r7, r4
 8018f2a:	0018      	movs	r0, r3
 8018f2c:	f000 fad7 	bl	80194de <itsdk_secstore_getStoreSize>
			  	_itsdk_console_printf("SecureStore: 0x%08X->0x%08X (%dB)\r\n",offset,offset+size,size);
 8018f30:	68fa      	ldr	r2, [r7, #12]
 8018f32:	697b      	ldr	r3, [r7, #20]
 8018f34:	18d2      	adds	r2, r2, r3
 8018f36:	68fb      	ldr	r3, [r7, #12]
 8018f38:	6979      	ldr	r1, [r7, #20]
 8018f3a:	48bd      	ldr	r0, [pc, #756]	; (8019230 <_itsdk_config_consolePriv+0x3c8>)
 8018f3c:	f7ff fbd8 	bl	80186f0 <_itsdk_console_printf>
			  	offset += size;
 8018f40:	68fb      	ldr	r3, [r7, #12]
 8018f42:	697a      	ldr	r2, [r7, #20]
 8018f44:	18d3      	adds	r3, r2, r3
 8018f46:	617b      	str	r3, [r7, #20]
			  	totSize += size;
 8018f48:	68fb      	ldr	r3, [r7, #12]
 8018f4a:	693a      	ldr	r2, [r7, #16]
 8018f4c:	18d3      	adds	r3, r2, r3
 8018f4e:	613b      	str	r3, [r7, #16]
			  	itsdk_error_getSize(&size);
 8018f50:	193b      	adds	r3, r7, r4
 8018f52:	0018      	movs	r0, r3
 8018f54:	f002 fbab 	bl	801b6ae <itsdk_error_getSize>
			  	_itsdk_console_printf("ErrorLog: 0x%08X->0x%08X (%dB)\r\n",offset,offset+size,size);
 8018f58:	68fa      	ldr	r2, [r7, #12]
 8018f5a:	697b      	ldr	r3, [r7, #20]
 8018f5c:	18d2      	adds	r2, r2, r3
 8018f5e:	68fb      	ldr	r3, [r7, #12]
 8018f60:	6979      	ldr	r1, [r7, #20]
 8018f62:	48b4      	ldr	r0, [pc, #720]	; (8019234 <_itsdk_config_consolePriv+0x3cc>)
 8018f64:	f7ff fbc4 	bl	80186f0 <_itsdk_console_printf>
			  	offset += size;
 8018f68:	68fb      	ldr	r3, [r7, #12]
 8018f6a:	697a      	ldr	r2, [r7, #20]
 8018f6c:	18d3      	adds	r3, r2, r3
 8018f6e:	617b      	str	r3, [r7, #20]
			  	totSize += size;
 8018f70:	68fb      	ldr	r3, [r7, #12]
 8018f72:	693a      	ldr	r2, [r7, #16]
 8018f74:	18d3      	adds	r3, r2, r3
 8018f76:	613b      	str	r3, [r7, #16]
			  eeprom_getConfigSize(&size);
 8018f78:	193b      	adds	r3, r7, r4
 8018f7a:	0018      	movs	r0, r3
 8018f7c:	f7ff fcdd 	bl	801893a <eeprom_getConfigSize>
  		  	  totSize += size;
 8018f80:	68fb      	ldr	r3, [r7, #12]
 8018f82:	693a      	ldr	r2, [r7, #16]
 8018f84:	18d3      	adds	r3, r2, r3
 8018f86:	613b      	str	r3, [r7, #16]
			  _itsdk_console_printf("ApplicationConfig: 0x%08X->0x%08X (%dB)\r\n",offset,offset+size,size);
 8018f88:	68fa      	ldr	r2, [r7, #12]
 8018f8a:	697b      	ldr	r3, [r7, #20]
 8018f8c:	18d2      	adds	r2, r2, r3
 8018f8e:	68fb      	ldr	r3, [r7, #12]
 8018f90:	6979      	ldr	r1, [r7, #20]
 8018f92:	48a9      	ldr	r0, [pc, #676]	; (8019238 <_itsdk_config_consolePriv+0x3d0>)
 8018f94:	f7ff fbac 	bl	80186f0 <_itsdk_console_printf>
			  _itsdk_console_printf("UsedMemory: %dB on %dB\r\n",totSize,ITSDK_EPROM_SIZE);
 8018f98:	23c0      	movs	r3, #192	; 0xc0
 8018f9a:	015a      	lsls	r2, r3, #5
 8018f9c:	6939      	ldr	r1, [r7, #16]
 8018f9e:	4ba7      	ldr	r3, [pc, #668]	; (801923c <_itsdk_config_consolePriv+0x3d4>)
 8018fa0:	0018      	movs	r0, r3
 8018fa2:	f7ff fba5 	bl	80186f0 <_itsdk_console_printf>
			  _itsdk_console_printf("OK\r\n");
 8018fa6:	4ba0      	ldr	r3, [pc, #640]	; (8019228 <_itsdk_config_consolePriv+0x3c0>)
 8018fa8:	0018      	movs	r0, r3
 8018faa:	f7ff fba1 	bl	80186f0 <_itsdk_console_printf>
			 return ITSDK_CONSOLE_SUCCES;
 8018fae:	2300      	movs	r3, #0
 8018fb0:	e18c      	b.n	80192cc <_itsdk_config_consolePriv+0x464>
	  }
	} else if ( sz == 4 ) {
 8018fb2:	1cfb      	adds	r3, r7, #3
 8018fb4:	781b      	ldrb	r3, [r3, #0]
 8018fb6:	2b04      	cmp	r3, #4
 8018fb8:	d116      	bne.n	8018fe8 <_itsdk_config_consolePriv+0x180>
		if ( buffer[0] == 's' && buffer[1] == 'c' && buffer[2] == ':' ) {
 8018fba:	687b      	ldr	r3, [r7, #4]
 8018fbc:	781b      	ldrb	r3, [r3, #0]
 8018fbe:	2b73      	cmp	r3, #115	; 0x73
 8018fc0:	d000      	beq.n	8018fc4 <_itsdk_config_consolePriv+0x15c>
 8018fc2:	e182      	b.n	80192ca <_itsdk_config_consolePriv+0x462>
 8018fc4:	687b      	ldr	r3, [r7, #4]
 8018fc6:	3301      	adds	r3, #1
 8018fc8:	781b      	ldrb	r3, [r3, #0]
 8018fca:	2b63      	cmp	r3, #99	; 0x63
 8018fcc:	d000      	beq.n	8018fd0 <_itsdk_config_consolePriv+0x168>
 8018fce:	e17c      	b.n	80192ca <_itsdk_config_consolePriv+0x462>
 8018fd0:	687b      	ldr	r3, [r7, #4]
 8018fd2:	3302      	adds	r3, #2
 8018fd4:	781b      	ldrb	r3, [r3, #0]
 8018fd6:	2b3a      	cmp	r3, #58	; 0x3a
 8018fd8:	d000      	beq.n	8018fdc <_itsdk_config_consolePriv+0x174>
 8018fda:	e176      	b.n	80192ca <_itsdk_config_consolePriv+0x462>
						return ITSDK_CONSOLE_SUCCES;
					}
					break;
				#endif
				default:
					_itsdk_console_printf("KO\r\n");
 8018fdc:	4b98      	ldr	r3, [pc, #608]	; (8019240 <_itsdk_config_consolePriv+0x3d8>)
 8018fde:	0018      	movs	r0, r3
 8018fe0:	f7ff fb86 	bl	80186f0 <_itsdk_console_printf>
					return ITSDK_CONSOLE_FAILED;
 8018fe4:	2302      	movs	r3, #2
 8018fe6:	e171      	b.n	80192cc <_itsdk_config_consolePriv+0x464>
			}
		}
	} else if ( sz >= 6 ) {
 8018fe8:	1cfb      	adds	r3, r7, #3
 8018fea:	781b      	ldrb	r3, [r3, #0]
 8018fec:	2b05      	cmp	r3, #5
 8018fee:	d800      	bhi.n	8018ff2 <_itsdk_config_consolePriv+0x18a>
 8018ff0:	e168      	b.n	80192c4 <_itsdk_config_consolePriv+0x45c>
		if ( buffer[0] == 'S' && buffer[1] == 'C' && buffer[2] == ':' && buffer[4] == ':' ) {
 8018ff2:	687b      	ldr	r3, [r7, #4]
 8018ff4:	781b      	ldrb	r3, [r3, #0]
 8018ff6:	2b53      	cmp	r3, #83	; 0x53
 8018ff8:	d000      	beq.n	8018ffc <_itsdk_config_consolePriv+0x194>
 8018ffa:	e163      	b.n	80192c4 <_itsdk_config_consolePriv+0x45c>
 8018ffc:	687b      	ldr	r3, [r7, #4]
 8018ffe:	3301      	adds	r3, #1
 8019000:	781b      	ldrb	r3, [r3, #0]
 8019002:	2b43      	cmp	r3, #67	; 0x43
 8019004:	d000      	beq.n	8019008 <_itsdk_config_consolePriv+0x1a0>
 8019006:	e15d      	b.n	80192c4 <_itsdk_config_consolePriv+0x45c>
 8019008:	687b      	ldr	r3, [r7, #4]
 801900a:	3302      	adds	r3, #2
 801900c:	781b      	ldrb	r3, [r3, #0]
 801900e:	2b3a      	cmp	r3, #58	; 0x3a
 8019010:	d000      	beq.n	8019014 <_itsdk_config_consolePriv+0x1ac>
 8019012:	e157      	b.n	80192c4 <_itsdk_config_consolePriv+0x45c>
 8019014:	687b      	ldr	r3, [r7, #4]
 8019016:	3304      	adds	r3, #4
 8019018:	781b      	ldrb	r3, [r3, #0]
 801901a:	2b3a      	cmp	r3, #58	; 0x3a
 801901c:	d000      	beq.n	8019020 <_itsdk_config_consolePriv+0x1b8>
 801901e:	e151      	b.n	80192c4 <_itsdk_config_consolePriv+0x45c>
			switch(buffer[3]) {
 8019020:	687b      	ldr	r3, [r7, #4]
 8019022:	3303      	adds	r3, #3
 8019024:	781b      	ldrb	r3, [r3, #0]
 8019026:	3b30      	subs	r3, #48	; 0x30
 8019028:	2b22      	cmp	r3, #34	; 0x22
 801902a:	d900      	bls.n	801902e <_itsdk_config_consolePriv+0x1c6>
 801902c:	e14c      	b.n	80192c8 <_itsdk_config_consolePriv+0x460>
 801902e:	009a      	lsls	r2, r3, #2
 8019030:	4b84      	ldr	r3, [pc, #528]	; (8019244 <_itsdk_config_consolePriv+0x3dc>)
 8019032:	18d3      	adds	r3, r2, r3
 8019034:	681b      	ldr	r3, [r3, #0]
 8019036:	469f      	mov	pc, r3
			#if ITSDK_WITH_SIGFOX_LIB == __ENABLE || ITSDK_WITH_LORAWAN_LIB == __ENABLE
			case 'N': {
				// sdk.activeNetwork
				switch ( buffer[5] ) {
 8019038:	687b      	ldr	r3, [r7, #4]
 801903a:	3305      	adds	r3, #5
 801903c:	781b      	ldrb	r3, [r3, #0]
 801903e:	2b31      	cmp	r3, #49	; 0x31
 8019040:	d007      	beq.n	8019052 <_itsdk_config_consolePriv+0x1ea>
 8019042:	2b32      	cmp	r3, #50	; 0x32
 8019044:	d009      	beq.n	801905a <_itsdk_config_consolePriv+0x1f2>
 8019046:	2b30      	cmp	r3, #48	; 0x30
 8019048:	d10b      	bne.n	8019062 <_itsdk_config_consolePriv+0x1fa>
					case '0':
					   itsdk_config_shadow.sdk.activeNetwork = __ACTIV_NETWORK_NONE;
 801904a:	4b7f      	ldr	r3, [pc, #508]	; (8019248 <_itsdk_config_consolePriv+0x3e0>)
 801904c:	2200      	movs	r2, #0
 801904e:	80da      	strh	r2, [r3, #6]
					   break;
 8019050:	e00d      	b.n	801906e <_itsdk_config_consolePriv+0x206>
					case '1':
					   itsdk_config_shadow.sdk.activeNetwork = __ACTIV_NETWORK_SIGFOX;
 8019052:	4b7d      	ldr	r3, [pc, #500]	; (8019248 <_itsdk_config_consolePriv+0x3e0>)
 8019054:	2201      	movs	r2, #1
 8019056:	80da      	strh	r2, [r3, #6]
					   break;
 8019058:	e009      	b.n	801906e <_itsdk_config_consolePriv+0x206>
					case '2':
					   itsdk_config_shadow.sdk.activeNetwork = __ACTIV_NETWORK_LORAWAN;
 801905a:	4b7b      	ldr	r3, [pc, #492]	; (8019248 <_itsdk_config_consolePriv+0x3e0>)
 801905c:	2202      	movs	r2, #2
 801905e:	80da      	strh	r2, [r3, #6]
					   break;
 8019060:	e005      	b.n	801906e <_itsdk_config_consolePriv+0x206>
					default:
						_itsdk_console_printf("KO\r\n");
 8019062:	4b77      	ldr	r3, [pc, #476]	; (8019240 <_itsdk_config_consolePriv+0x3d8>)
 8019064:	0018      	movs	r0, r3
 8019066:	f7ff fb43 	bl	80186f0 <_itsdk_console_printf>
						return ITSDK_CONSOLE_FAILED;
 801906a:	2302      	movs	r3, #2
 801906c:	e12e      	b.n	80192cc <_itsdk_config_consolePriv+0x464>
				}
				_itsdk_console_printf("OK\r\n");
 801906e:	4b6e      	ldr	r3, [pc, #440]	; (8019228 <_itsdk_config_consolePriv+0x3c0>)
 8019070:	0018      	movs	r0, r3
 8019072:	f7ff fb3d 	bl	80186f0 <_itsdk_console_printf>
				return ITSDK_CONSOLE_SUCCES;
 8019076:	2300      	movs	r3, #0
 8019078:	e128      	b.n	80192cc <_itsdk_config_consolePriv+0x464>
			}
			case 'R': {
				if ( itdt_isHexString( &buffer[5],4,false) ) {
 801907a:	687b      	ldr	r3, [r7, #4]
 801907c:	3305      	adds	r3, #5
 801907e:	2200      	movs	r2, #0
 8019080:	2104      	movs	r1, #4
 8019082:	0018      	movs	r0, r3
 8019084:	f003 f9c7 	bl	801c416 <itdt_isHexString>
 8019088:	1e03      	subs	r3, r0, #0
 801908a:	d01b      	beq.n	80190c4 <_itsdk_config_consolePriv+0x25c>
					uint16_t v = itdt_convertHexChar4Int(&buffer[5]);
 801908c:	687b      	ldr	r3, [r7, #4]
 801908e:	3305      	adds	r3, #5
 8019090:	251e      	movs	r5, #30
 8019092:	197c      	adds	r4, r7, r5
 8019094:	0018      	movs	r0, r3
 8019096:	f003 f912 	bl	801c2be <itdt_convertHexChar4Int>
 801909a:	0003      	movs	r3, r0
 801909c:	8023      	strh	r3, [r4, #0]
					if ( itdt_count_bits_1(v) <= 1 ) {
 801909e:	197b      	adds	r3, r7, r5
 80190a0:	881b      	ldrh	r3, [r3, #0]
 80190a2:	0018      	movs	r0, r3
 80190a4:	f003 fa03 	bl	801c4ae <itdt_count_bits_1>
 80190a8:	0003      	movs	r3, r0
 80190aa:	2b01      	cmp	r3, #1
 80190ac:	d80a      	bhi.n	80190c4 <_itsdk_config_consolePriv+0x25c>
						itsdk_config_shadow.sdk.activeRegion = v;
 80190ae:	4b66      	ldr	r3, [pc, #408]	; (8019248 <_itsdk_config_consolePriv+0x3e0>)
 80190b0:	221e      	movs	r2, #30
 80190b2:	18ba      	adds	r2, r7, r2
 80190b4:	8812      	ldrh	r2, [r2, #0]
 80190b6:	811a      	strh	r2, [r3, #8]
						_itsdk_console_printf("OK\r\n");
 80190b8:	4b5b      	ldr	r3, [pc, #364]	; (8019228 <_itsdk_config_consolePriv+0x3c0>)
 80190ba:	0018      	movs	r0, r3
 80190bc:	f7ff fb18 	bl	80186f0 <_itsdk_console_printf>
						return ITSDK_CONSOLE_SUCCES;
 80190c0:	2300      	movs	r3, #0
 80190c2:	e103      	b.n	80192cc <_itsdk_config_consolePriv+0x464>
					}
				}
				_itsdk_console_printf("KO\r\n");
 80190c4:	4b5e      	ldr	r3, [pc, #376]	; (8019240 <_itsdk_config_consolePriv+0x3d8>)
 80190c6:	0018      	movs	r0, r3
 80190c8:	f7ff fb12 	bl	80186f0 <_itsdk_console_printf>
				return ITSDK_CONSOLE_FAILED;
 80190cc:	2302      	movs	r3, #2
 80190ce:	e0fd      	b.n	80192cc <_itsdk_config_consolePriv+0x464>
			#endif

 	 	 	#if ITSDK_WITH_LORAWAN_LIB == __ENABLE
			case '0':
				// lora.adrmode
				if ( buffer[5] == '1' ) {
 80190d0:	687b      	ldr	r3, [r7, #4]
 80190d2:	3305      	adds	r3, #5
 80190d4:	781b      	ldrb	r3, [r3, #0]
 80190d6:	2b31      	cmp	r3, #49	; 0x31
 80190d8:	d10d      	bne.n	80190f6 <_itsdk_config_consolePriv+0x28e>
					itsdk_config_shadow.sdk.lorawan.adrMode = __LORAWAN_ADR_OFF;
 80190da:	4b5b      	ldr	r3, [pc, #364]	; (8019248 <_itsdk_config_consolePriv+0x3e0>)
 80190dc:	7a9a      	ldrb	r2, [r3, #10]
 80190de:	213f      	movs	r1, #63	; 0x3f
 80190e0:	400a      	ands	r2, r1
 80190e2:	1c11      	adds	r1, r2, #0
 80190e4:	2240      	movs	r2, #64	; 0x40
 80190e6:	430a      	orrs	r2, r1
 80190e8:	729a      	strb	r2, [r3, #10]
					_itsdk_console_printf("OK\r\n");
 80190ea:	4b4f      	ldr	r3, [pc, #316]	; (8019228 <_itsdk_config_consolePriv+0x3c0>)
 80190ec:	0018      	movs	r0, r3
 80190ee:	f7ff faff 	bl	80186f0 <_itsdk_console_printf>
					return ITSDK_CONSOLE_SUCCES;
 80190f2:	2300      	movs	r3, #0
 80190f4:	e0ea      	b.n	80192cc <_itsdk_config_consolePriv+0x464>
				}
			    if ( buffer[5] == '2' ) {
 80190f6:	687b      	ldr	r3, [r7, #4]
 80190f8:	3305      	adds	r3, #5
 80190fa:	781b      	ldrb	r3, [r3, #0]
 80190fc:	2b32      	cmp	r3, #50	; 0x32
 80190fe:	d10e      	bne.n	801911e <_itsdk_config_consolePriv+0x2b6>
			    	itsdk_config_shadow.sdk.lorawan.adrMode = __LORAWAN_ADR_ON;
 8019100:	4b51      	ldr	r3, [pc, #324]	; (8019248 <_itsdk_config_consolePriv+0x3e0>)
 8019102:	7a9a      	ldrb	r2, [r3, #10]
 8019104:	213f      	movs	r1, #63	; 0x3f
 8019106:	400a      	ands	r2, r1
 8019108:	1c11      	adds	r1, r2, #0
 801910a:	2280      	movs	r2, #128	; 0x80
 801910c:	4252      	negs	r2, r2
 801910e:	430a      	orrs	r2, r1
 8019110:	729a      	strb	r2, [r3, #10]
					_itsdk_console_printf("OK\r\n");
 8019112:	4b45      	ldr	r3, [pc, #276]	; (8019228 <_itsdk_config_consolePriv+0x3c0>)
 8019114:	0018      	movs	r0, r3
 8019116:	f7ff faeb 	bl	80186f0 <_itsdk_console_printf>
					return ITSDK_CONSOLE_SUCCES;
 801911a:	2300      	movs	r3, #0
 801911c:	e0d6      	b.n	80192cc <_itsdk_config_consolePriv+0x464>
			    }
				_itsdk_console_printf("KO\r\n");
 801911e:	4b48      	ldr	r3, [pc, #288]	; (8019240 <_itsdk_config_consolePriv+0x3d8>)
 8019120:	0018      	movs	r0, r3
 8019122:	f7ff fae5 	bl	80186f0 <_itsdk_console_printf>
				return ITSDK_CONSOLE_FAILED;
 8019126:	2302      	movs	r3, #2
 8019128:	e0d0      	b.n	80192cc <_itsdk_config_consolePriv+0x464>
				break;
			case '1':
				// lora.devEuiType
				if ( buffer[5] == '1' ) {
 801912a:	687b      	ldr	r3, [r7, #4]
 801912c:	3305      	adds	r3, #5
 801912e:	781b      	ldrb	r3, [r3, #0]
 8019130:	2b31      	cmp	r3, #49	; 0x31
 8019132:	d10d      	bne.n	8019150 <_itsdk_config_consolePriv+0x2e8>
					itsdk_config_shadow.sdk.lorawan.devEuiType = __LORAWAN_DEVEUI_STATIC;
 8019134:	4b44      	ldr	r3, [pc, #272]	; (8019248 <_itsdk_config_consolePriv+0x3e0>)
 8019136:	7a9a      	ldrb	r2, [r3, #10]
 8019138:	2130      	movs	r1, #48	; 0x30
 801913a:	438a      	bics	r2, r1
 801913c:	1c11      	adds	r1, r2, #0
 801913e:	2210      	movs	r2, #16
 8019140:	430a      	orrs	r2, r1
 8019142:	729a      	strb	r2, [r3, #10]
					_itsdk_console_printf("OK\r\n");
 8019144:	4b38      	ldr	r3, [pc, #224]	; (8019228 <_itsdk_config_consolePriv+0x3c0>)
 8019146:	0018      	movs	r0, r3
 8019148:	f7ff fad2 	bl	80186f0 <_itsdk_console_printf>
					return ITSDK_CONSOLE_SUCCES;
 801914c:	2300      	movs	r3, #0
 801914e:	e0bd      	b.n	80192cc <_itsdk_config_consolePriv+0x464>
				}
			    if ( buffer[5] == '2' ) {
 8019150:	687b      	ldr	r3, [r7, #4]
 8019152:	3305      	adds	r3, #5
 8019154:	781b      	ldrb	r3, [r3, #0]
 8019156:	2b32      	cmp	r3, #50	; 0x32
 8019158:	d10d      	bne.n	8019176 <_itsdk_config_consolePriv+0x30e>
			    	itsdk_config_shadow.sdk.lorawan.devEuiType = __LORAWAN_DEVEUI_GENERATED;
 801915a:	4b3b      	ldr	r3, [pc, #236]	; (8019248 <_itsdk_config_consolePriv+0x3e0>)
 801915c:	7a9a      	ldrb	r2, [r3, #10]
 801915e:	2130      	movs	r1, #48	; 0x30
 8019160:	438a      	bics	r2, r1
 8019162:	1c11      	adds	r1, r2, #0
 8019164:	2220      	movs	r2, #32
 8019166:	430a      	orrs	r2, r1
 8019168:	729a      	strb	r2, [r3, #10]
					_itsdk_console_printf("OK\r\n");
 801916a:	4b2f      	ldr	r3, [pc, #188]	; (8019228 <_itsdk_config_consolePriv+0x3c0>)
 801916c:	0018      	movs	r0, r3
 801916e:	f7ff fabf 	bl	80186f0 <_itsdk_console_printf>
					return ITSDK_CONSOLE_SUCCES;
 8019172:	2300      	movs	r3, #0
 8019174:	e0aa      	b.n	80192cc <_itsdk_config_consolePriv+0x464>
			    }
				_itsdk_console_printf("KO\r\n");
 8019176:	4b32      	ldr	r3, [pc, #200]	; (8019240 <_itsdk_config_consolePriv+0x3d8>)
 8019178:	0018      	movs	r0, r3
 801917a:	f7ff fab9 	bl	80186f0 <_itsdk_console_printf>
				return ITSDK_CONSOLE_FAILED;
 801917e:	2302      	movs	r3, #2
 8019180:	e0a4      	b.n	80192cc <_itsdk_config_consolePriv+0x464>
				break;
			case '2':
				// lora.joinMode
				if ( buffer[5] == '1' ) {
 8019182:	687b      	ldr	r3, [r7, #4]
 8019184:	3305      	adds	r3, #5
 8019186:	781b      	ldrb	r3, [r3, #0]
 8019188:	2b31      	cmp	r3, #49	; 0x31
 801918a:	d10d      	bne.n	80191a8 <_itsdk_config_consolePriv+0x340>
					itsdk_config_shadow.sdk.lorawan.joinMode = __LORAWAN_OTAA;
 801918c:	4b2e      	ldr	r3, [pc, #184]	; (8019248 <_itsdk_config_consolePriv+0x3e0>)
 801918e:	7a9a      	ldrb	r2, [r3, #10]
 8019190:	2103      	movs	r1, #3
 8019192:	438a      	bics	r2, r1
 8019194:	1c11      	adds	r1, r2, #0
 8019196:	2201      	movs	r2, #1
 8019198:	430a      	orrs	r2, r1
 801919a:	729a      	strb	r2, [r3, #10]
					_itsdk_console_printf("OK\r\n");
 801919c:	4b22      	ldr	r3, [pc, #136]	; (8019228 <_itsdk_config_consolePriv+0x3c0>)
 801919e:	0018      	movs	r0, r3
 80191a0:	f7ff faa6 	bl	80186f0 <_itsdk_console_printf>
					return ITSDK_CONSOLE_SUCCES;
 80191a4:	2300      	movs	r3, #0
 80191a6:	e091      	b.n	80192cc <_itsdk_config_consolePriv+0x464>
				}
			    if ( buffer[5] == '2' ) {
 80191a8:	687b      	ldr	r3, [r7, #4]
 80191aa:	3305      	adds	r3, #5
 80191ac:	781b      	ldrb	r3, [r3, #0]
 80191ae:	2b32      	cmp	r3, #50	; 0x32
 80191b0:	d10d      	bne.n	80191ce <_itsdk_config_consolePriv+0x366>
			    	itsdk_config_shadow.sdk.lorawan.joinMode = __LORAWAN_ABP;
 80191b2:	4b25      	ldr	r3, [pc, #148]	; (8019248 <_itsdk_config_consolePriv+0x3e0>)
 80191b4:	7a9a      	ldrb	r2, [r3, #10]
 80191b6:	2103      	movs	r1, #3
 80191b8:	438a      	bics	r2, r1
 80191ba:	1c11      	adds	r1, r2, #0
 80191bc:	2202      	movs	r2, #2
 80191be:	430a      	orrs	r2, r1
 80191c0:	729a      	strb	r2, [r3, #10]
					_itsdk_console_printf("OK\r\n");
 80191c2:	4b19      	ldr	r3, [pc, #100]	; (8019228 <_itsdk_config_consolePriv+0x3c0>)
 80191c4:	0018      	movs	r0, r3
 80191c6:	f7ff fa93 	bl	80186f0 <_itsdk_console_printf>
					return ITSDK_CONSOLE_SUCCES;
 80191ca:	2300      	movs	r3, #0
 80191cc:	e07e      	b.n	80192cc <_itsdk_config_consolePriv+0x464>
			    }
				_itsdk_console_printf("KO\r\n");
 80191ce:	4b1c      	ldr	r3, [pc, #112]	; (8019240 <_itsdk_config_consolePriv+0x3d8>)
 80191d0:	0018      	movs	r0, r3
 80191d2:	f7ff fa8d 	bl	80186f0 <_itsdk_console_printf>
				return ITSDK_CONSOLE_FAILED;
 80191d6:	2302      	movs	r3, #2
 80191d8:	e078      	b.n	80192cc <_itsdk_config_consolePriv+0x464>
				break;
			case '3':
				// lora.networkType
				if ( buffer[5] == '1' ) {
 80191da:	687b      	ldr	r3, [r7, #4]
 80191dc:	3305      	adds	r3, #5
 80191de:	781b      	ldrb	r3, [r3, #0]
 80191e0:	2b31      	cmp	r3, #49	; 0x31
 80191e2:	d133      	bne.n	801924c <_itsdk_config_consolePriv+0x3e4>
					itsdk_config_shadow.sdk.lorawan.networkType = __LORAWAN_NWK_PUBLIC;
 80191e4:	4b18      	ldr	r3, [pc, #96]	; (8019248 <_itsdk_config_consolePriv+0x3e0>)
 80191e6:	7a9a      	ldrb	r2, [r3, #10]
 80191e8:	210c      	movs	r1, #12
 80191ea:	438a      	bics	r2, r1
 80191ec:	1c11      	adds	r1, r2, #0
 80191ee:	2204      	movs	r2, #4
 80191f0:	430a      	orrs	r2, r1
 80191f2:	729a      	strb	r2, [r3, #10]
					_itsdk_console_printf("OK\r\n");
 80191f4:	4b0c      	ldr	r3, [pc, #48]	; (8019228 <_itsdk_config_consolePriv+0x3c0>)
 80191f6:	0018      	movs	r0, r3
 80191f8:	f7ff fa7a 	bl	80186f0 <_itsdk_console_printf>
					return ITSDK_CONSOLE_SUCCES;
 80191fc:	2300      	movs	r3, #0
 80191fe:	e065      	b.n	80192cc <_itsdk_config_consolePriv+0x464>
 8019200:	0801fd6c 	.word	0x0801fd6c
 8019204:	0801fd90 	.word	0x0801fd90
 8019208:	0801fdc0 	.word	0x0801fdc0
 801920c:	0801fde8 	.word	0x0801fde8
 8019210:	0801fe18 	.word	0x0801fe18
 8019214:	0801fe4c 	.word	0x0801fe4c
 8019218:	0801fe74 	.word	0x0801fe74
 801921c:	0801fea8 	.word	0x0801fea8
 8019220:	0801fed4 	.word	0x0801fed4
 8019224:	0801ff08 	.word	0x0801ff08
 8019228:	0801fd64 	.word	0x0801fd64
 801922c:	50000071 	.word	0x50000071
 8019230:	0801ff2c 	.word	0x0801ff2c
 8019234:	0801ff50 	.word	0x0801ff50
 8019238:	0801ff74 	.word	0x0801ff74
 801923c:	0801ffa0 	.word	0x0801ffa0
 8019240:	0801ffbc 	.word	0x0801ffbc
 8019244:	08020ec4 	.word	0x08020ec4
 8019248:	20001638 	.word	0x20001638
				}
			    if ( buffer[5] == '2' ) {
 801924c:	687b      	ldr	r3, [r7, #4]
 801924e:	3305      	adds	r3, #5
 8019250:	781b      	ldrb	r3, [r3, #0]
 8019252:	2b32      	cmp	r3, #50	; 0x32
 8019254:	d10d      	bne.n	8019272 <_itsdk_config_consolePriv+0x40a>
			    	itsdk_config_shadow.sdk.lorawan.networkType = __LORAWAN_NWK_PRIVATE;
 8019256:	4b1f      	ldr	r3, [pc, #124]	; (80192d4 <_itsdk_config_consolePriv+0x46c>)
 8019258:	7a9a      	ldrb	r2, [r3, #10]
 801925a:	210c      	movs	r1, #12
 801925c:	438a      	bics	r2, r1
 801925e:	1c11      	adds	r1, r2, #0
 8019260:	2208      	movs	r2, #8
 8019262:	430a      	orrs	r2, r1
 8019264:	729a      	strb	r2, [r3, #10]
					_itsdk_console_printf("OK\r\n");
 8019266:	4b1c      	ldr	r3, [pc, #112]	; (80192d8 <_itsdk_config_consolePriv+0x470>)
 8019268:	0018      	movs	r0, r3
 801926a:	f7ff fa41 	bl	80186f0 <_itsdk_console_printf>
					return ITSDK_CONSOLE_SUCCES;
 801926e:	2300      	movs	r3, #0
 8019270:	e02c      	b.n	80192cc <_itsdk_config_consolePriv+0x464>
			    }
				_itsdk_console_printf("KO\r\n");
 8019272:	4b1a      	ldr	r3, [pc, #104]	; (80192dc <_itsdk_config_consolePriv+0x474>)
 8019274:	0018      	movs	r0, r3
 8019276:	f7ff fa3b 	bl	80186f0 <_itsdk_console_printf>
				return ITSDK_CONSOLE_FAILED;
 801927a:	2302      	movs	r3, #2
 801927c:	e026      	b.n	80192cc <_itsdk_config_consolePriv+0x464>
				break;
			case '4':
				// lora.retries
				if ( sz >= 7 ) {
 801927e:	1cfb      	adds	r3, r7, #3
 8019280:	781b      	ldrb	r3, [r3, #0]
 8019282:	2b06      	cmp	r3, #6
 8019284:	d918      	bls.n	80192b8 <_itsdk_config_consolePriv+0x450>
					int v = itdt_convertDecCharNInt(&buffer[5],2);
 8019286:	687b      	ldr	r3, [r7, #4]
 8019288:	3305      	adds	r3, #5
 801928a:	2102      	movs	r1, #2
 801928c:	0018      	movs	r0, r3
 801928e:	f003 f83b 	bl	801c308 <itdt_convertDecCharNInt>
 8019292:	0003      	movs	r3, r0
 8019294:	61bb      	str	r3, [r7, #24]
					if ( v != ITSDK_INVALID_VALUE_32B && v <= 5 ) {
 8019296:	69bb      	ldr	r3, [r7, #24]
 8019298:	4a11      	ldr	r2, [pc, #68]	; (80192e0 <_itsdk_config_consolePriv+0x478>)
 801929a:	4293      	cmp	r3, r2
 801929c:	d00c      	beq.n	80192b8 <_itsdk_config_consolePriv+0x450>
 801929e:	69bb      	ldr	r3, [r7, #24]
 80192a0:	2b05      	cmp	r3, #5
 80192a2:	dc09      	bgt.n	80192b8 <_itsdk_config_consolePriv+0x450>
						itsdk_config_shadow.sdk.lorawan.retries = v;
 80192a4:	69bb      	ldr	r3, [r7, #24]
 80192a6:	b2da      	uxtb	r2, r3
 80192a8:	4b0a      	ldr	r3, [pc, #40]	; (80192d4 <_itsdk_config_consolePriv+0x46c>)
 80192aa:	72da      	strb	r2, [r3, #11]
						_itsdk_console_printf("OK\r\n");
 80192ac:	4b0a      	ldr	r3, [pc, #40]	; (80192d8 <_itsdk_config_consolePriv+0x470>)
 80192ae:	0018      	movs	r0, r3
 80192b0:	f7ff fa1e 	bl	80186f0 <_itsdk_console_printf>
						return ITSDK_CONSOLE_SUCCES;
 80192b4:	2300      	movs	r3, #0
 80192b6:	e009      	b.n	80192cc <_itsdk_config_consolePriv+0x464>
					}
				}
				_itsdk_console_printf("KO\r\n");
 80192b8:	4b08      	ldr	r3, [pc, #32]	; (80192dc <_itsdk_config_consolePriv+0x474>)
 80192ba:	0018      	movs	r0, r3
 80192bc:	f7ff fa18 	bl	80186f0 <_itsdk_console_printf>
				return ITSDK_CONSOLE_FAILED;
 80192c0:	2302      	movs	r3, #2
 80192c2:	e003      	b.n	80192cc <_itsdk_config_consolePriv+0x464>
				break;
			#endif	// ITSDK_WITH_SIGFOX_LIB
			default:
				break;
			}
		}
 80192c4:	46c0      	nop			; (mov r8, r8)
 80192c6:	e000      	b.n	80192ca <_itsdk_config_consolePriv+0x462>
				break;
 80192c8:	46c0      	nop			; (mov r8, r8)
	}
#endif
  return ITSDK_CONSOLE_NOTFOUND;
 80192ca:	2301      	movs	r3, #1
}
 80192cc:	0018      	movs	r0, r3
 80192ce:	46bd      	mov	sp, r7
 80192d0:	b008      	add	sp, #32
 80192d2:	bdb0      	pop	{r4, r5, r7, pc}
 80192d4:	20001638 	.word	0x20001638
 80192d8:	0801fd64 	.word	0x0801fd64
 80192dc:	0801ffbc 	.word	0x0801ffbc
 80192e0:	0fffffff 	.word	0x0fffffff

080192e4 <itsdk_state_init>:
#endif
#include <it_sdk/lorawan/lorawan.h>

itsdk_state_t itsdk_state;

void itsdk_state_init() {
 80192e4:	b5b0      	push	{r4, r5, r7, lr}
 80192e6:	af00      	add	r7, sp, #0
	itsdk_state.lastWakeUpTimeUs = 0;
 80192e8:	4a09      	ldr	r2, [pc, #36]	; (8019310 <itsdk_state_init+0x2c>)
 80192ea:	2300      	movs	r3, #0
 80192ec:	2400      	movs	r4, #0
 80192ee:	6093      	str	r3, [r2, #8]
 80192f0:	60d4      	str	r4, [r2, #12]
	itsdk_state.lastResetCause = itsdk_getResetCause();
 80192f2:	f004 f9db 	bl	801d6ac <itsdk_getResetCause>
 80192f6:	0003      	movs	r3, r0
 80192f8:	001a      	movs	r2, r3
 80192fa:	4b05      	ldr	r3, [pc, #20]	; (8019310 <itsdk_state_init+0x2c>)
 80192fc:	701a      	strb	r2, [r3, #0]

#if ITSDK_CONFIGURATION_MODE != __CONFIG_STATIC
   #if ITSDK_WITH_SIGFOX_LIB == __ENABLE || ITSDK_WITH_LORAWAN_LIB == __ENABLE
	itsdk_state.activeNetwork = (uint8_t)itsdk_config.sdk.activeNetwork;
 80192fe:	4b05      	ldr	r3, [pc, #20]	; (8019314 <itsdk_state_init+0x30>)
 8019300:	88db      	ldrh	r3, [r3, #6]
 8019302:	b2da      	uxtb	r2, r3
 8019304:	4b02      	ldr	r3, [pc, #8]	; (8019310 <itsdk_state_init+0x2c>)
 8019306:	705a      	strb	r2, [r3, #1]
  #else
    #error INVALID ITSDK_SIGFOX_NVM_SOURCE VALUE
  #endif
#endif

	return;
 8019308:	46c0      	nop			; (mov r8, r8)
}
 801930a:	46bd      	mov	sp, r7
 801930c:	bdb0      	pop	{r4, r5, r7, pc}
 801930e:	46c0      	nop			; (mov r8, r8)
 8019310:	20001670 	.word	0x20001670
 8019314:	20001654 	.word	0x20001654

08019318 <itsdk_print_state>:

#if ITSDK_WITH_CONSOLE == __ENABLE
void itsdk_print_state() {
 8019318:	b5b0      	push	{r4, r5, r7, lr}
 801931a:	af00      	add	r7, sp, #0
	_itsdk_console_printf("state.lastWakeUpTimeUs %d ms\r\n",(uint32_t)(itsdk_state.lastWakeUpTimeUs/1000));
 801931c:	4b19      	ldr	r3, [pc, #100]	; (8019384 <itsdk_print_state+0x6c>)
 801931e:	6898      	ldr	r0, [r3, #8]
 8019320:	68d9      	ldr	r1, [r3, #12]
 8019322:	22fa      	movs	r2, #250	; 0xfa
 8019324:	0092      	lsls	r2, r2, #2
 8019326:	2300      	movs	r3, #0
 8019328:	f7e7 f8ce 	bl	80004c8 <__aeabi_uldivmod>
 801932c:	0003      	movs	r3, r0
 801932e:	000c      	movs	r4, r1
 8019330:	001a      	movs	r2, r3
 8019332:	4b15      	ldr	r3, [pc, #84]	; (8019388 <itsdk_print_state+0x70>)
 8019334:	0011      	movs	r1, r2
 8019336:	0018      	movs	r0, r3
 8019338:	f7ff f9da 	bl	80186f0 <_itsdk_console_printf>
	_itsdk_console_printf("state.lastResetCause 0x%X \r\n",(uint32_t)(itsdk_state.lastResetCause));
 801933c:	4b11      	ldr	r3, [pc, #68]	; (8019384 <itsdk_print_state+0x6c>)
 801933e:	781b      	ldrb	r3, [r3, #0]
 8019340:	001a      	movs	r2, r3
 8019342:	4b12      	ldr	r3, [pc, #72]	; (801938c <itsdk_print_state+0x74>)
 8019344:	0011      	movs	r1, r2
 8019346:	0018      	movs	r0, r3
 8019348:	f7ff f9d2 	bl	80186f0 <_itsdk_console_printf>
#if ITSDK_CONFIGURATION_MODE != __CONFIG_STATIC
   #if ITSDK_WITH_SIGFOX_LIB == __ENABLE || ITSDK_WITH_LORAWAN_LIB == __ENABLE
	_itsdk_console_printf("state.activeNetwork : %d\r\n",itsdk_state.activeNetwork);
 801934c:	4b0d      	ldr	r3, [pc, #52]	; (8019384 <itsdk_print_state+0x6c>)
 801934e:	785b      	ldrb	r3, [r3, #1]
 8019350:	001a      	movs	r2, r3
 8019352:	4b0f      	ldr	r3, [pc, #60]	; (8019390 <itsdk_print_state+0x78>)
 8019354:	0011      	movs	r1, r2
 8019356:	0018      	movs	r0, r3
 8019358:	f7ff f9ca 	bl	80186f0 <_itsdk_console_printf>
	#if ITSDK_WITH_SIGFOX_LIB == __ENABLE
	#endif
   #endif
#endif
#if ITSDK_WITH_LORAWAN_LIB == __ENABLE
	if ( itsdk_state.activeNetwork == __ACTIV_NETWORK_LORAWAN ) {
 801935c:	4b09      	ldr	r3, [pc, #36]	; (8019384 <itsdk_print_state+0x6c>)
 801935e:	785b      	ldrb	r3, [r3, #1]
 8019360:	2b02      	cmp	r3, #2
 8019362:	d10b      	bne.n	801937c <itsdk_print_state+0x64>
  	  _itsdk_console_printf("state.lorawan.joined: %c\r\n",(itsdk_lorawan_hasjoined()?'Y':'N'));
 8019364:	f002 fd04 	bl	801bd70 <itsdk_lorawan_hasjoined>
 8019368:	1e03      	subs	r3, r0, #0
 801936a:	d001      	beq.n	8019370 <itsdk_print_state+0x58>
 801936c:	2359      	movs	r3, #89	; 0x59
 801936e:	e000      	b.n	8019372 <itsdk_print_state+0x5a>
 8019370:	234e      	movs	r3, #78	; 0x4e
 8019372:	4a08      	ldr	r2, [pc, #32]	; (8019394 <itsdk_print_state+0x7c>)
 8019374:	0019      	movs	r1, r3
 8019376:	0010      	movs	r0, r2
 8019378:	f7ff f9ba 	bl	80186f0 <_itsdk_console_printf>
  #else
    #error INVALID ITSDK_SIGFOX_NVM_SOURCE VALUE
  #endif
#endif

}
 801937c:	46c0      	nop			; (mov r8, r8)
 801937e:	46bd      	mov	sp, r7
 8019380:	bdb0      	pop	{r4, r5, r7, pc}
 8019382:	46c0      	nop			; (mov r8, r8)
 8019384:	20001670 	.word	0x20001670
 8019388:	0801ffc4 	.word	0x0801ffc4
 801938c:	0801ffe4 	.word	0x0801ffe4
 8019390:	08020004 	.word	0x08020004
 8019394:	08020020 	.word	0x08020020

08019398 <_itsdk_secstore_getOffset>:
/**
 * Compute the offset of a block in the EEPROM Memory for a given
 * Entry ID.
 *
 */
static itsdk_secStoreReturn_e _itsdk_secstore_getOffset(uint32_t * offset, uint8_t * blockId, itsdk_secStoreBlocks_e block ) {
 8019398:	b580      	push	{r7, lr}
 801939a:	b086      	sub	sp, #24
 801939c:	af00      	add	r7, sp, #0
 801939e:	60f8      	str	r0, [r7, #12]
 80193a0:	60b9      	str	r1, [r7, #8]
 80193a2:	1dfb      	adds	r3, r7, #7
 80193a4:	701a      	strb	r2, [r3, #0]
	itsdk_secStoreBlocks_t * fakeStore = 0;
 80193a6:	2300      	movs	r3, #0
 80193a8:	613b      	str	r3, [r7, #16]
	uint32_t _offset;
	switch (block) {
 80193aa:	1dfb      	adds	r3, r7, #7
 80193ac:	781b      	ldrb	r3, [r3, #0]
 80193ae:	2b13      	cmp	r3, #19
 80193b0:	d83d      	bhi.n	801942e <_itsdk_secstore_getOffset+0x96>
 80193b2:	009a      	lsls	r2, r3, #2
 80193b4:	4b27      	ldr	r3, [pc, #156]	; (8019454 <_itsdk_secstore_getOffset+0xbc>)
 80193b6:	18d3      	adds	r3, r2, r3
 80193b8:	681b      	ldr	r3, [r3, #0]
 80193ba:	469f      	mov	pc, r3
	case ITSDK_SS_CONSOLEKEY:
		_offset = (uint32_t)&fakeStore->consolePasswd;
 80193bc:	693b      	ldr	r3, [r7, #16]
 80193be:	617b      	str	r3, [r7, #20]
		break;
 80193c0:	e037      	b.n	8019432 <_itsdk_secstore_getOffset+0x9a>
	case ITSDK_SS_SIGFOXKEY:
	  #if defined(ITSDK_WITH_SIGFOX_LIB) && ITSDK_WITH_SIGFOX_LIB == __ENABLE
		_offset = (uint32_t)&fakeStore->sigfoxKey;
	  #else
		return SS_FAILED_NOTEXISTING;
 80193c2:	2301      	movs	r3, #1
 80193c4:	e041      	b.n	801944a <_itsdk_secstore_getOffset+0xb2>
	  #endif
		break;
	case ITSDK_SS_LORA_ABP_NETIDDEVID:
      #if defined(ITSDK_WITH_LORAWAN_LIB) && ITSDK_WITH_LORAWAN_LIB == __ENABLE
		_offset = (uint32_t)&fakeStore->lorawan.abp.netID_devID;
 80193c6:	693b      	ldr	r3, [r7, #16]
 80193c8:	3310      	adds	r3, #16
 80193ca:	617b      	str	r3, [r7, #20]
  	  #else
		return SS_FAILED_NOTEXISTING;
	  #endif
		break;
 80193cc:	e031      	b.n	8019432 <_itsdk_secstore_getOffset+0x9a>
	case ITSDK_SS_LORA_ABP_NETKEYF:
      #if defined(ITSDK_WITH_LORAWAN_LIB) && ITSDK_WITH_LORAWAN_LIB == __ENABLE
		_offset = (uint32_t)&fakeStore->lorawan.abp.netkeyf;
 80193ce:	693b      	ldr	r3, [r7, #16]
 80193d0:	3320      	adds	r3, #32
 80193d2:	617b      	str	r3, [r7, #20]
  	  #else
		return SS_FAILED_NOTEXISTING;
	  #endif
		break;
 80193d4:	e02d      	b.n	8019432 <_itsdk_secstore_getOffset+0x9a>
	case ITSDK_SS_LORA_ABP_NETKEYS:
      #if defined(ITSDK_WITH_LORAWAN_LIB) && ITSDK_WITH_LORAWAN_LIB == __ENABLE
		_offset = (uint32_t)&fakeStore->lorawan.abp.netkeys;
 80193d6:	693b      	ldr	r3, [r7, #16]
 80193d8:	3330      	adds	r3, #48	; 0x30
 80193da:	617b      	str	r3, [r7, #20]
  	  #else
		return SS_FAILED_NOTEXISTING;
	  #endif
		break;
 80193dc:	e029      	b.n	8019432 <_itsdk_secstore_getOffset+0x9a>
	case ITSDK_SS_LORA_ABP_NETSKEY:
      #if defined(ITSDK_WITH_LORAWAN_LIB) && ITSDK_WITH_LORAWAN_LIB == __ENABLE
		_offset = (uint32_t)&fakeStore->lorawan.abp.netSkey;
 80193de:	693b      	ldr	r3, [r7, #16]
 80193e0:	3340      	adds	r3, #64	; 0x40
 80193e2:	617b      	str	r3, [r7, #20]
  	  #else
		return SS_FAILED_NOTEXISTING;
	  #endif
		break;
 80193e4:	e025      	b.n	8019432 <_itsdk_secstore_getOffset+0x9a>
	case ITSDK_SS_LORA_ABP_APPSKEY:
      #if defined(ITSDK_WITH_LORAWAN_LIB) && ITSDK_WITH_LORAWAN_LIB == __ENABLE
		_offset = (uint32_t)&fakeStore->lorawan.abp.appSkey;
 80193e6:	693b      	ldr	r3, [r7, #16]
 80193e8:	3350      	adds	r3, #80	; 0x50
 80193ea:	617b      	str	r3, [r7, #20]
  	  #else
		return SS_FAILED_NOTEXISTING;
	  #endif
		break;
 80193ec:	e021      	b.n	8019432 <_itsdk_secstore_getOffset+0x9a>
	case ITSDK_SS_LORA_OTAA_DEVEUIAPPEUI:
      #if defined(ITSDK_WITH_LORAWAN_LIB) && ITSDK_WITH_LORAWAN_LIB == __ENABLE
		_offset = (uint32_t)&fakeStore->lorawan.otaa.devEUI_appAUI;
 80193ee:	693b      	ldr	r3, [r7, #16]
 80193f0:	3310      	adds	r3, #16
 80193f2:	617b      	str	r3, [r7, #20]
  	  #else
		return SS_FAILED_NOTEXISTING;
	  #endif
		break;
 80193f4:	e01d      	b.n	8019432 <_itsdk_secstore_getOffset+0x9a>
	case ITSDK_SS_LORA_OTAA_APPKEY:
      #if defined(ITSDK_WITH_LORAWAN_LIB) && ITSDK_WITH_LORAWAN_LIB == __ENABLE
		_offset = (uint32_t)&fakeStore->lorawan.otaa.appKey;
 80193f6:	693b      	ldr	r3, [r7, #16]
 80193f8:	3320      	adds	r3, #32
 80193fa:	617b      	str	r3, [r7, #20]
  	  #else
		return SS_FAILED_NOTEXISTING;
	  #endif
		break;
 80193fc:	e019      	b.n	8019432 <_itsdk_secstore_getOffset+0x9a>
	case ITSDK_SS_LORA_OTAA_NWKKEY:
      #if defined(ITSDK_WITH_LORAWAN_LIB) && ITSDK_WITH_LORAWAN_LIB == __ENABLE
		_offset = (uint32_t)&fakeStore->lorawan.otaa.nwkKey;
 80193fe:	693b      	ldr	r3, [r7, #16]
 8019400:	3330      	adds	r3, #48	; 0x30
 8019402:	617b      	str	r3, [r7, #20]
  	  #else
		return SS_FAILED_NOTEXISTING;
	  #endif
		break;
 8019404:	e015      	b.n	8019432 <_itsdk_secstore_getOffset+0x9a>
	case ITSDK_SS_AES_MASTERK:
      #if ( defined(ITSDK_SIGFOX_ENCRYPTION) && ( ITSDK_SIGFOX_ENCRYPTION & __PAYLOAD_ENCRYPT_AESCTR ) > 0 ) || ( defined(ITSDK_LORAWAN_ENCRYPTION) && (( ITSDK_LORAWAN_ENCRYPTION & __PAYLOAD_ENCRYPT_AESCTR ) > 0) )
		_offset = (uint32_t)&fakeStore->aesMasterKey;
  	  #else
		return SS_FAILED_NOTEXISTING;
 8019406:	2301      	movs	r3, #1
 8019408:	e01f      	b.n	801944a <_itsdk_secstore_getOffset+0xb2>
		break;
	case ITSDK_SS_AES_SHARED_NONCE_SPECKKEY:
      #if ( defined(ITSDK_SIGFOX_ENCRYPTION) && ( ITSDK_SIGFOX_ENCRYPTION > 0 )) || ( defined(ITSDK_LORAWAN_ENCRYPTION) && ( ITSDK_LORAWAN_ENCRYPTION > 0 ))
		_offset = (uint32_t)&fakeStore->encryptSharedNonceSpeck;
  	  #else
		return SS_FAILED_NOTEXISTING;
 801940a:	2301      	movs	r3, #1
 801940c:	e01d      	b.n	801944a <_itsdk_secstore_getOffset+0xb2>
		break;
	case ITSDK_SS_USER0:
	  #if ITSDK_SECSTORE_USRBLOCK >= 1
		_offset = (uint32_t)&fakeStore->user[0];
  	  #else
		return SS_FAILED_NOTEXISTING;
 801940e:	2301      	movs	r3, #1
 8019410:	e01b      	b.n	801944a <_itsdk_secstore_getOffset+0xb2>
		break;
	case ITSDK_SS_USER1:
	  #if ITSDK_SECSTORE_USRBLOCK >= 2
		_offset = (uint32_t)&fakeStore->user[1];
  	  #else
		return SS_FAILED_NOTEXISTING;
 8019412:	2301      	movs	r3, #1
 8019414:	e019      	b.n	801944a <_itsdk_secstore_getOffset+0xb2>
		break;
	case ITSDK_SS_USER2:
	  #if ITSDK_SECSTORE_USRBLOCK >= 3
		_offset = (uint32_t)&fakeStore->user[2];
  	  #else
		return SS_FAILED_NOTEXISTING;
 8019416:	2301      	movs	r3, #1
 8019418:	e017      	b.n	801944a <_itsdk_secstore_getOffset+0xb2>
		break;
	case ITSDK_SS_USER3:
	  #if ITSDK_SECSTORE_USRBLOCK >= 4
		_offset = (uint32_t)&fakeStore->user[3];
  	  #else
		return SS_FAILED_NOTEXISTING;
 801941a:	2301      	movs	r3, #1
 801941c:	e015      	b.n	801944a <_itsdk_secstore_getOffset+0xb2>
		break;
	case ITSDK_SS_USER4:
	  #if ITSDK_SECSTORE_USRBLOCK >= 5
		_offset = (uint32_t)&fakeStore->user[4];
  	  #else
		return SS_FAILED_NOTEXISTING;
 801941e:	2301      	movs	r3, #1
 8019420:	e013      	b.n	801944a <_itsdk_secstore_getOffset+0xb2>
		break;
	case ITSDK_SS_USER5:
	  #if ITSDK_SECSTORE_USRBLOCK >= 6
		_offset = (uint32_t)&fakeStore->user[5];
  	  #else
		return SS_FAILED_NOTEXISTING;
 8019422:	2301      	movs	r3, #1
 8019424:	e011      	b.n	801944a <_itsdk_secstore_getOffset+0xb2>
		break;
	case ITSDK_SS_USER6:
	  #if ITSDK_SECSTORE_USRBLOCK >= 7
		_offset = (uint32_t)&fakeStore->user[6];
  	  #else
		return SS_FAILED_NOTEXISTING;
 8019426:	2301      	movs	r3, #1
 8019428:	e00f      	b.n	801944a <_itsdk_secstore_getOffset+0xb2>
		break;
	case ITSDK_SS_USER7:
	  #if ITSDK_SECSTORE_USRBLOCK >= 8
		_offset = (uint32_t)&fakeStore->user[7];
  	  #else
		return SS_FAILED_NOTEXISTING;
 801942a:	2301      	movs	r3, #1
 801942c:	e00d      	b.n	801944a <_itsdk_secstore_getOffset+0xb2>
	  #endif
		break;
	default:
		return SS_FAILED_NOTEXISTING;
 801942e:	2301      	movs	r3, #1
 8019430:	e00b      	b.n	801944a <_itsdk_secstore_getOffset+0xb2>

	}
	*blockId = (_offset/16);
 8019432:	697b      	ldr	r3, [r7, #20]
 8019434:	091b      	lsrs	r3, r3, #4
 8019436:	b2da      	uxtb	r2, r3
 8019438:	68bb      	ldr	r3, [r7, #8]
 801943a:	701a      	strb	r2, [r3, #0]
	_offset+=sizeof(itsdk_secStoreHead_t);
 801943c:	697b      	ldr	r3, [r7, #20]
 801943e:	3310      	adds	r3, #16
 8019440:	617b      	str	r3, [r7, #20]
	*offset=_offset;
 8019442:	68fb      	ldr	r3, [r7, #12]
 8019444:	697a      	ldr	r2, [r7, #20]
 8019446:	601a      	str	r2, [r3, #0]
	return SS_SUCCESS;
 8019448:	2300      	movs	r3, #0
}
 801944a:	0018      	movs	r0, r3
 801944c:	46bd      	mov	sp, r7
 801944e:	b006      	add	sp, #24
 8019450:	bd80      	pop	{r7, pc}
 8019452:	46c0      	nop			; (mov r8, r8)
 8019454:	08020f50 	.word	0x08020f50

08019458 <_itsdk_secstore_getEntries>:

/**
 * Evaluate the number of block entries regarding the configuration
 * The size is a static value.
 */
static itsdk_secStoreReturn_e _itsdk_secstore_getEntries(uint8_t * entries) {
 8019458:	b580      	push	{r7, lr}
 801945a:	b084      	sub	sp, #16
 801945c:	af00      	add	r7, sp, #0
 801945e:	6078      	str	r0, [r7, #4]
	uint8_t _entries=1;	// at lease the console
 8019460:	210f      	movs	r1, #15
 8019462:	187b      	adds	r3, r7, r1
 8019464:	2201      	movs	r2, #1
 8019466:	701a      	strb	r2, [r3, #0]
   #if defined(ITSDK_WITH_SIGFOX_LIB) && ITSDK_WITH_SIGFOX_LIB == __ENABLE
	_entries++;
   #endif
   #if defined(ITSDK_WITH_LORAWAN_LIB) && ITSDK_WITH_LORAWAN_LIB == __ENABLE
   _entries+=5;
 8019468:	187b      	adds	r3, r7, r1
 801946a:	187a      	adds	r2, r7, r1
 801946c:	7812      	ldrb	r2, [r2, #0]
 801946e:	3205      	adds	r2, #5
 8019470:	701a      	strb	r2, [r3, #0]
   #endif
   #if ( defined(ITSDK_SIGFOX_ENCRYPTION) && ( ITSDK_SIGFOX_ENCRYPTION > 0 )) || (defined(ITSDK_LORAWAN_ENCRYPTION) && ( ITSDK_LORAWAN_ENCRYPTION > 0))
	_entries+=2;
   #endif
	_entries+=ITSDK_SECSTORE_USRBLOCK;
 8019472:	187b      	adds	r3, r7, r1
 8019474:	187a      	adds	r2, r7, r1
 8019476:	7812      	ldrb	r2, [r2, #0]
 8019478:	701a      	strb	r2, [r3, #0]
	*entries=_entries;
 801947a:	687b      	ldr	r3, [r7, #4]
 801947c:	187a      	adds	r2, r7, r1
 801947e:	7812      	ldrb	r2, [r2, #0]
 8019480:	701a      	strb	r2, [r3, #0]
	return SS_SUCCESS;
 8019482:	2300      	movs	r3, #0
}
 8019484:	0018      	movs	r0, r3
 8019486:	46bd      	mov	sp, r7
 8019488:	b004      	add	sp, #16
 801948a:	bd80      	pop	{r7, pc}

0801948c <_itsdk_secstore_controlHeader>:

static itsdk_secStoreReturn_e _itsdk_secstore_controlHeader(itsdk_secStoreHead_t * _head) {
 801948c:	b590      	push	{r4, r7, lr}
 801948e:	b085      	sub	sp, #20
 8019490:	af00      	add	r7, sp, #0
 8019492:	6078      	str	r0, [r7, #4]
	// Read the header
	_eeprom_read(ITDT_EEPROM_BANK0, ITSDK_SECSTORE_EEPROM_OFFSET, (void *) _head, sizeof(itsdk_secStoreHead_t));
 8019494:	687a      	ldr	r2, [r7, #4]
 8019496:	2310      	movs	r3, #16
 8019498:	2100      	movs	r1, #0
 801949a:	2000      	movs	r0, #0
 801949c:	f004 fb50 	bl	801db40 <_eeprom_read>
	// Control the header validity
	if ( _head->magic1 != ITSDK_SECSTORE_EEPROM_MAGIC ) return SS_FAILED_NOTINITIALIZED;
 80194a0:	687b      	ldr	r3, [r7, #4]
 80194a2:	781b      	ldrb	r3, [r3, #0]
 80194a4:	220f      	movs	r2, #15
 80194a6:	4013      	ands	r3, r2
 80194a8:	b2db      	uxtb	r3, r3
 80194aa:	2b0c      	cmp	r3, #12
 80194ac:	d001      	beq.n	80194b2 <_itsdk_secstore_controlHeader+0x26>
 80194ae:	2302      	movs	r3, #2
 80194b0:	e011      	b.n	80194d6 <_itsdk_secstore_controlHeader+0x4a>
	uint8_t _count;
	_itsdk_secstore_getEntries(&_count);
 80194b2:	240f      	movs	r4, #15
 80194b4:	193b      	adds	r3, r7, r4
 80194b6:	0018      	movs	r0, r3
 80194b8:	f7ff ffce 	bl	8019458 <_itsdk_secstore_getEntries>
	if ( _head->blockCount != _count) return SS_FAILED_NOTINITIALIZED;
 80194bc:	687b      	ldr	r3, [r7, #4]
 80194be:	781b      	ldrb	r3, [r3, #0]
 80194c0:	061b      	lsls	r3, r3, #24
 80194c2:	0f1b      	lsrs	r3, r3, #28
 80194c4:	b2db      	uxtb	r3, r3
 80194c6:	001a      	movs	r2, r3
 80194c8:	193b      	adds	r3, r7, r4
 80194ca:	781b      	ldrb	r3, [r3, #0]
 80194cc:	429a      	cmp	r2, r3
 80194ce:	d001      	beq.n	80194d4 <_itsdk_secstore_controlHeader+0x48>
 80194d0:	2302      	movs	r3, #2
 80194d2:	e000      	b.n	80194d6 <_itsdk_secstore_controlHeader+0x4a>
	return SS_SUCCESS;
 80194d4:	2300      	movs	r3, #0
}
 80194d6:	0018      	movs	r0, r3
 80194d8:	46bd      	mov	sp, r7
 80194da:	b005      	add	sp, #20
 80194dc:	bd90      	pop	{r4, r7, pc}

080194de <itsdk_secstore_getStoreSize>:

/**
 * Return the store size in byte.
 * This function is use to determine the configuration starting address => after the secureStore
 */
itsdk_secStoreReturn_e itsdk_secstore_getStoreSize(uint32_t * sz) {
 80194de:	b580      	push	{r7, lr}
 80194e0:	b082      	sub	sp, #8
 80194e2:	af00      	add	r7, sp, #0
 80194e4:	6078      	str	r0, [r7, #4]
	*sz=sizeof(itsdk_secStoreHead_t)+sizeof(itsdk_secStoreBlocks_t);
 80194e6:	687b      	ldr	r3, [r7, #4]
 80194e8:	2270      	movs	r2, #112	; 0x70
 80194ea:	601a      	str	r2, [r3, #0]
	return SS_SUCCESS;
 80194ec:	2300      	movs	r3, #0
}
 80194ee:	0018      	movs	r0, r3
 80194f0:	46bd      	mov	sp, r7
 80194f2:	b002      	add	sp, #8
 80194f4:	bd80      	pop	{r7, pc}

080194f6 <itsdk_secstore_generateMasterKey>:
 * For this reason the transformation executed here is going to be simple.
 * Params:
 *   dynamicKey is 12B long
 *   masterKey is 16B long
 */
__weak void itsdk_secstore_generateMasterKey(uint8_t * dynamicKey,uint8_t * masterKey) {
 80194f6:	b580      	push	{r7, lr}
 80194f8:	b084      	sub	sp, #16
 80194fa:	af00      	add	r7, sp, #0
 80194fc:	6078      	str	r0, [r7, #4]
 80194fe:	6039      	str	r1, [r7, #0]

	// we are creating a 16B array from the elements available
	uint8_t _devId[4];
	itsdk_getUniqId(_devId,4);
 8019500:	2308      	movs	r3, #8
 8019502:	18fb      	adds	r3, r7, r3
 8019504:	2104      	movs	r1, #4
 8019506:	0018      	movs	r0, r3
 8019508:	f004 f976 	bl	801d7f8 <itsdk_getUniqId>

	for ( int i = 0 ; i < 16 ; i++ ) {
 801950c:	2300      	movs	r3, #0
 801950e:	60fb      	str	r3, [r7, #12]
 8019510:	e081      	b.n	8019616 <itsdk_secstore_generateMasterKey+0x120>
		if ( i < 2 ) {											// 0, 1
 8019512:	68fb      	ldr	r3, [r7, #12]
 8019514:	2b01      	cmp	r3, #1
 8019516:	dc21      	bgt.n	801955c <itsdk_secstore_generateMasterKey+0x66>
			masterKey[i] = _devId[i];
 8019518:	68fb      	ldr	r3, [r7, #12]
 801951a:	683a      	ldr	r2, [r7, #0]
 801951c:	18d3      	adds	r3, r2, r3
 801951e:	2208      	movs	r2, #8
 8019520:	18b9      	adds	r1, r7, r2
 8019522:	68fa      	ldr	r2, [r7, #12]
 8019524:	188a      	adds	r2, r1, r2
 8019526:	7812      	ldrb	r2, [r2, #0]
 8019528:	701a      	strb	r2, [r3, #0]
			masterKey[i] ^= dynamicKey[i];
 801952a:	68fb      	ldr	r3, [r7, #12]
 801952c:	683a      	ldr	r2, [r7, #0]
 801952e:	18d3      	adds	r3, r2, r3
 8019530:	7819      	ldrb	r1, [r3, #0]
 8019532:	68fb      	ldr	r3, [r7, #12]
 8019534:	687a      	ldr	r2, [r7, #4]
 8019536:	18d3      	adds	r3, r2, r3
 8019538:	781a      	ldrb	r2, [r3, #0]
 801953a:	68fb      	ldr	r3, [r7, #12]
 801953c:	6838      	ldr	r0, [r7, #0]
 801953e:	18c3      	adds	r3, r0, r3
 8019540:	404a      	eors	r2, r1
 8019542:	b2d2      	uxtb	r2, r2
 8019544:	701a      	strb	r2, [r3, #0]
			masterKey[i] += (ITSDK_PROTECT_KEY >> 9) & 0xFF;
 8019546:	68fb      	ldr	r3, [r7, #12]
 8019548:	683a      	ldr	r2, [r7, #0]
 801954a:	18d3      	adds	r3, r2, r3
 801954c:	781a      	ldrb	r2, [r3, #0]
 801954e:	68fb      	ldr	r3, [r7, #12]
 8019550:	6839      	ldr	r1, [r7, #0]
 8019552:	18cb      	adds	r3, r1, r3
 8019554:	3a33      	subs	r2, #51	; 0x33
 8019556:	b2d2      	uxtb	r2, r2
 8019558:	701a      	strb	r2, [r3, #0]
 801955a:	e059      	b.n	8019610 <itsdk_secstore_generateMasterKey+0x11a>
		} else if ( i < 14 ) {									// 2 .. 13
 801955c:	68fb      	ldr	r3, [r7, #12]
 801955e:	2b0d      	cmp	r3, #13
 8019560:	dc33      	bgt.n	80195ca <itsdk_secstore_generateMasterKey+0xd4>
			masterKey[i] = dynamicKey[i-2];
 8019562:	68fb      	ldr	r3, [r7, #12]
 8019564:	3b02      	subs	r3, #2
 8019566:	687a      	ldr	r2, [r7, #4]
 8019568:	18d2      	adds	r2, r2, r3
 801956a:	68fb      	ldr	r3, [r7, #12]
 801956c:	6839      	ldr	r1, [r7, #0]
 801956e:	18cb      	adds	r3, r1, r3
 8019570:	7812      	ldrb	r2, [r2, #0]
 8019572:	701a      	strb	r2, [r3, #0]
			masterKey[i] ^= _devId[i & 3];
 8019574:	68fb      	ldr	r3, [r7, #12]
 8019576:	683a      	ldr	r2, [r7, #0]
 8019578:	18d3      	adds	r3, r2, r3
 801957a:	7819      	ldrb	r1, [r3, #0]
 801957c:	68fb      	ldr	r3, [r7, #12]
 801957e:	2203      	movs	r2, #3
 8019580:	4013      	ands	r3, r2
 8019582:	2208      	movs	r2, #8
 8019584:	18ba      	adds	r2, r7, r2
 8019586:	5cd2      	ldrb	r2, [r2, r3]
 8019588:	68fb      	ldr	r3, [r7, #12]
 801958a:	6838      	ldr	r0, [r7, #0]
 801958c:	18c3      	adds	r3, r0, r3
 801958e:	404a      	eors	r2, r1
 8019590:	b2d2      	uxtb	r2, r2
 8019592:	701a      	strb	r2, [r3, #0]
			masterKey[i] ^= (ITSDK_PROTECT_KEY >> 13) & 0xFF;
 8019594:	68fb      	ldr	r3, [r7, #12]
 8019596:	683a      	ldr	r2, [r7, #0]
 8019598:	18d3      	adds	r3, r2, r3
 801959a:	781a      	ldrb	r2, [r3, #0]
 801959c:	68fb      	ldr	r3, [r7, #12]
 801959e:	6839      	ldr	r1, [r7, #0]
 80195a0:	18cb      	adds	r3, r1, r3
 80195a2:	212c      	movs	r1, #44	; 0x2c
 80195a4:	404a      	eors	r2, r1
 80195a6:	b2d2      	uxtb	r2, r2
 80195a8:	701a      	strb	r2, [r3, #0]
			masterKey[i] ^= masterKey[i-1];
 80195aa:	68fb      	ldr	r3, [r7, #12]
 80195ac:	683a      	ldr	r2, [r7, #0]
 80195ae:	18d3      	adds	r3, r2, r3
 80195b0:	7819      	ldrb	r1, [r3, #0]
 80195b2:	68fb      	ldr	r3, [r7, #12]
 80195b4:	3b01      	subs	r3, #1
 80195b6:	683a      	ldr	r2, [r7, #0]
 80195b8:	18d3      	adds	r3, r2, r3
 80195ba:	781a      	ldrb	r2, [r3, #0]
 80195bc:	68fb      	ldr	r3, [r7, #12]
 80195be:	6838      	ldr	r0, [r7, #0]
 80195c0:	18c3      	adds	r3, r0, r3
 80195c2:	404a      	eors	r2, r1
 80195c4:	b2d2      	uxtb	r2, r2
 80195c6:	701a      	strb	r2, [r3, #0]
 80195c8:	e022      	b.n	8019610 <itsdk_secstore_generateMasterKey+0x11a>
		} else {												 // 14 .. 15
			masterKey[i] = _devId[3-(15-i)];
 80195ca:	68fb      	ldr	r3, [r7, #12]
 80195cc:	3b0c      	subs	r3, #12
 80195ce:	001a      	movs	r2, r3
 80195d0:	68fb      	ldr	r3, [r7, #12]
 80195d2:	6839      	ldr	r1, [r7, #0]
 80195d4:	18cb      	adds	r3, r1, r3
 80195d6:	2108      	movs	r1, #8
 80195d8:	1879      	adds	r1, r7, r1
 80195da:	5c8a      	ldrb	r2, [r1, r2]
 80195dc:	701a      	strb	r2, [r3, #0]
			masterKey[i] ^= dynamicKey[i-5];
 80195de:	68fb      	ldr	r3, [r7, #12]
 80195e0:	683a      	ldr	r2, [r7, #0]
 80195e2:	18d3      	adds	r3, r2, r3
 80195e4:	7819      	ldrb	r1, [r3, #0]
 80195e6:	68fb      	ldr	r3, [r7, #12]
 80195e8:	3b05      	subs	r3, #5
 80195ea:	687a      	ldr	r2, [r7, #4]
 80195ec:	18d3      	adds	r3, r2, r3
 80195ee:	781a      	ldrb	r2, [r3, #0]
 80195f0:	68fb      	ldr	r3, [r7, #12]
 80195f2:	6838      	ldr	r0, [r7, #0]
 80195f4:	18c3      	adds	r3, r0, r3
 80195f6:	404a      	eors	r2, r1
 80195f8:	b2d2      	uxtb	r2, r2
 80195fa:	701a      	strb	r2, [r3, #0]
			masterKey[i] -= (ITSDK_PROTECT_KEY >> 6) & 0xFF;
 80195fc:	68fb      	ldr	r3, [r7, #12]
 80195fe:	683a      	ldr	r2, [r7, #0]
 8019600:	18d3      	adds	r3, r2, r3
 8019602:	781a      	ldrb	r2, [r3, #0]
 8019604:	68fb      	ldr	r3, [r7, #12]
 8019606:	6839      	ldr	r1, [r7, #0]
 8019608:	18cb      	adds	r3, r1, r3
 801960a:	3a6f      	subs	r2, #111	; 0x6f
 801960c:	b2d2      	uxtb	r2, r2
 801960e:	701a      	strb	r2, [r3, #0]
	for ( int i = 0 ; i < 16 ; i++ ) {
 8019610:	68fb      	ldr	r3, [r7, #12]
 8019612:	3301      	adds	r3, #1
 8019614:	60fb      	str	r3, [r7, #12]
 8019616:	68fb      	ldr	r3, [r7, #12]
 8019618:	2b0f      	cmp	r3, #15
 801961a:	dc00      	bgt.n	801961e <itsdk_secstore_generateMasterKey+0x128>
 801961c:	e779      	b.n	8019512 <itsdk_secstore_generateMasterKey+0x1c>
		}
	}
	itsdk_encrypt_cifferKey(masterKey,16);
 801961e:	683b      	ldr	r3, [r7, #0]
 8019620:	2110      	movs	r1, #16
 8019622:	0018      	movs	r0, r3
 8019624:	f000 fd96 	bl	801a154 <itsdk_encrypt_cifferKey>
}
 8019628:	46c0      	nop			; (mov r8, r8)
 801962a:	46bd      	mov	sp, r7
 801962c:	b004      	add	sp, #16
 801962e:	bd80      	pop	{r7, pc}

08019630 <itsdk_secstore_readBlock>:

/**
 * Read the given block and returns the decrypted value into the buffer
 */
itsdk_secStoreReturn_e itsdk_secstore_readBlock(itsdk_secStoreBlocks_e blockType, uint8_t * buffer) {
 8019630:	b590      	push	{r4, r7, lr}
 8019632:	b08d      	sub	sp, #52	; 0x34
 8019634:	af00      	add	r7, sp, #0
 8019636:	0002      	movs	r2, r0
 8019638:	6039      	str	r1, [r7, #0]
 801963a:	1dfb      	adds	r3, r7, #7
 801963c:	701a      	strb	r2, [r3, #0]
	itsdk_secStoreHead_t	_head;

	// Control Header validity
	if ( _itsdk_secstore_controlHeader(&_head) != SS_SUCCESS ) return SS_FAILED_NOTINITIALIZED;
 801963e:	2320      	movs	r3, #32
 8019640:	18fb      	adds	r3, r7, r3
 8019642:	0018      	movs	r0, r3
 8019644:	f7ff ff22 	bl	801948c <_itsdk_secstore_controlHeader>
 8019648:	1e03      	subs	r3, r0, #0
 801964a:	d001      	beq.n	8019650 <itsdk_secstore_readBlock+0x20>
 801964c:	2302      	movs	r3, #2
 801964e:	e038      	b.n	80196c2 <itsdk_secstore_readBlock+0x92>

	// Control the blockId validity
	uint32_t _offset = 0;
 8019650:	2300      	movs	r3, #0
 8019652:	61fb      	str	r3, [r7, #28]
	uint8_t  _id = 0;
 8019654:	211b      	movs	r1, #27
 8019656:	187b      	adds	r3, r7, r1
 8019658:	2200      	movs	r2, #0
 801965a:	701a      	strb	r2, [r3, #0]
	if ( _itsdk_secstore_getOffset(&_offset,&_id, blockType) != SS_SUCCESS ) return SS_FAILED_NOTEXISTING;
 801965c:	1dfb      	adds	r3, r7, #7
 801965e:	781a      	ldrb	r2, [r3, #0]
 8019660:	1879      	adds	r1, r7, r1
 8019662:	231c      	movs	r3, #28
 8019664:	18fb      	adds	r3, r7, r3
 8019666:	0018      	movs	r0, r3
 8019668:	f7ff fe96 	bl	8019398 <_itsdk_secstore_getOffset>
 801966c:	1e03      	subs	r3, r0, #0
 801966e:	d001      	beq.n	8019674 <itsdk_secstore_readBlock+0x44>
 8019670:	2301      	movs	r3, #1
 8019672:	e026      	b.n	80196c2 <itsdk_secstore_readBlock+0x92>

	// Control the blockId have been initialized
	if ( (_head.blockUsed & ( 1 << _id )) == 0 ) return SS_FAILED_NOTSET;
 8019674:	2320      	movs	r3, #32
 8019676:	18fb      	adds	r3, r7, r3
 8019678:	681b      	ldr	r3, [r3, #0]
 801967a:	021b      	lsls	r3, r3, #8
 801967c:	0c1b      	lsrs	r3, r3, #16
 801967e:	b29b      	uxth	r3, r3
 8019680:	001a      	movs	r2, r3
 8019682:	231b      	movs	r3, #27
 8019684:	18fb      	adds	r3, r7, r3
 8019686:	781b      	ldrb	r3, [r3, #0]
 8019688:	411a      	asrs	r2, r3
 801968a:	0013      	movs	r3, r2
 801968c:	2201      	movs	r2, #1
 801968e:	4013      	ands	r3, r2
 8019690:	d101      	bne.n	8019696 <itsdk_secstore_readBlock+0x66>
 8019692:	2303      	movs	r3, #3
 8019694:	e015      	b.n	80196c2 <itsdk_secstore_readBlock+0x92>

	// Read block
	_eeprom_read(ITDT_EEPROM_BANK0, ITSDK_SECSTORE_EEPROM_OFFSET+_offset, (void *) buffer, ITSDK_SECSTORE_BLOCKSZ);
 8019696:	69f9      	ldr	r1, [r7, #28]
 8019698:	683a      	ldr	r2, [r7, #0]
 801969a:	2310      	movs	r3, #16
 801969c:	2000      	movs	r0, #0
 801969e:	f004 fa4f 	bl	801db40 <_eeprom_read>

	// Generate the Master key
	uint8_t masterKey[16];
	itsdk_secstore_generateMasterKey(_head.dynamicKey,masterKey);
 80196a2:	2408      	movs	r4, #8
 80196a4:	193a      	adds	r2, r7, r4
 80196a6:	2320      	movs	r3, #32
 80196a8:	18fb      	adds	r3, r7, r3
 80196aa:	3304      	adds	r3, #4
 80196ac:	0011      	movs	r1, r2
 80196ae:	0018      	movs	r0, r3
 80196b0:	f7ff ff21 	bl	80194f6 <itsdk_secstore_generateMasterKey>

	// Decode with AES-128
	itsdk_aes_ecb_decrypt_128B(buffer,buffer,ITSDK_SECSTORE_BLOCKSZ,masterKey);
 80196b4:	193b      	adds	r3, r7, r4
 80196b6:	6839      	ldr	r1, [r7, #0]
 80196b8:	6838      	ldr	r0, [r7, #0]
 80196ba:	2210      	movs	r2, #16
 80196bc:	f000 fd0a 	bl	801a0d4 <itsdk_aes_ecb_decrypt_128B>

	return SS_SUCCESS;
 80196c0:	2300      	movs	r3, #0
}
 80196c2:	0018      	movs	r0, r3
 80196c4:	46bd      	mov	sp, r7
 80196c6:	b00d      	add	sp, #52	; 0x34
 80196c8:	bd90      	pop	{r4, r7, pc}

080196ca <itsdk_secstore_writeBlock>:

/**
 * Encrypt and Write the given block into the store
 */
itsdk_secStoreReturn_e itsdk_secstore_writeBlock(itsdk_secStoreBlocks_e blockType, uint8_t * buffer) {
 80196ca:	b5b0      	push	{r4, r5, r7, lr}
 80196cc:	b08c      	sub	sp, #48	; 0x30
 80196ce:	af00      	add	r7, sp, #0
 80196d0:	0002      	movs	r2, r0
 80196d2:	6039      	str	r1, [r7, #0]
 80196d4:	1dfb      	adds	r3, r7, #7
 80196d6:	701a      	strb	r2, [r3, #0]
	itsdk_secStoreHead_t	_head;

	// Control header validity
	if ( _itsdk_secstore_controlHeader(&_head) != SS_SUCCESS ) return SS_FAILED_NOTINITIALIZED;
 80196d8:	2320      	movs	r3, #32
 80196da:	18fb      	adds	r3, r7, r3
 80196dc:	0018      	movs	r0, r3
 80196de:	f7ff fed5 	bl	801948c <_itsdk_secstore_controlHeader>
 80196e2:	1e03      	subs	r3, r0, #0
 80196e4:	d001      	beq.n	80196ea <itsdk_secstore_writeBlock+0x20>
 80196e6:	2302      	movs	r3, #2
 80196e8:	e061      	b.n	80197ae <itsdk_secstore_writeBlock+0xe4>

	// Control the blockId validity
	uint32_t _offset = 0;
 80196ea:	2300      	movs	r3, #0
 80196ec:	61fb      	str	r3, [r7, #28]
	uint8_t  _id = 0;
 80196ee:	211b      	movs	r1, #27
 80196f0:	187b      	adds	r3, r7, r1
 80196f2:	2200      	movs	r2, #0
 80196f4:	701a      	strb	r2, [r3, #0]
	if ( _itsdk_secstore_getOffset(&_offset,&_id, blockType) != SS_SUCCESS ) return SS_FAILED_NOTEXISTING;
 80196f6:	1dfb      	adds	r3, r7, #7
 80196f8:	781a      	ldrb	r2, [r3, #0]
 80196fa:	1879      	adds	r1, r7, r1
 80196fc:	231c      	movs	r3, #28
 80196fe:	18fb      	adds	r3, r7, r3
 8019700:	0018      	movs	r0, r3
 8019702:	f7ff fe49 	bl	8019398 <_itsdk_secstore_getOffset>
 8019706:	1e03      	subs	r3, r0, #0
 8019708:	d001      	beq.n	801970e <itsdk_secstore_writeBlock+0x44>
 801970a:	2301      	movs	r3, #1
 801970c:	e04f      	b.n	80197ae <itsdk_secstore_writeBlock+0xe4>

	// Generate the Master key
	uint8_t masterKey[16];
	itsdk_secstore_generateMasterKey(_head.dynamicKey,masterKey);
 801970e:	2408      	movs	r4, #8
 8019710:	193a      	adds	r2, r7, r4
 8019712:	2520      	movs	r5, #32
 8019714:	197b      	adds	r3, r7, r5
 8019716:	3304      	adds	r3, #4
 8019718:	0011      	movs	r1, r2
 801971a:	0018      	movs	r0, r3
 801971c:	f7ff feeb 	bl	80194f6 <itsdk_secstore_generateMasterKey>

	// Encode with AES-128
	itsdk_aes_ecb_encrypt_128B(buffer,buffer,ITSDK_SECSTORE_BLOCKSZ,masterKey);
 8019720:	193b      	adds	r3, r7, r4
 8019722:	6839      	ldr	r1, [r7, #0]
 8019724:	6838      	ldr	r0, [r7, #0]
 8019726:	2210      	movs	r2, #16
 8019728:	f000 fc90 	bl	801a04c <itsdk_aes_ecb_encrypt_128B>

	// Write block
	_eeprom_write(ITDT_EEPROM_BANK0, ITSDK_SECSTORE_EEPROM_OFFSET+_offset, (void *) buffer, ITSDK_SECSTORE_BLOCKSZ);
 801972c:	69f9      	ldr	r1, [r7, #28]
 801972e:	683a      	ldr	r2, [r7, #0]
 8019730:	2310      	movs	r3, #16
 8019732:	2000      	movs	r0, #0
 8019734:	f004 f960 	bl	801d9f8 <_eeprom_write>

	// Update the header
	if ( (_head.blockUsed & ( 1 << _id )) == 0 ) {
 8019738:	197b      	adds	r3, r7, r5
 801973a:	681b      	ldr	r3, [r3, #0]
 801973c:	021b      	lsls	r3, r3, #8
 801973e:	0c1b      	lsrs	r3, r3, #16
 8019740:	b29b      	uxth	r3, r3
 8019742:	001a      	movs	r2, r3
 8019744:	231b      	movs	r3, #27
 8019746:	18fb      	adds	r3, r7, r3
 8019748:	781b      	ldrb	r3, [r3, #0]
 801974a:	411a      	asrs	r2, r3
 801974c:	0013      	movs	r3, r2
 801974e:	2201      	movs	r2, #1
 8019750:	4013      	ands	r3, r2
 8019752:	d12b      	bne.n	80197ac <itsdk_secstore_writeBlock+0xe2>
		_head.blockUsed |= ( 1 << _id );
 8019754:	2520      	movs	r5, #32
 8019756:	197b      	adds	r3, r7, r5
 8019758:	681b      	ldr	r3, [r3, #0]
 801975a:	021b      	lsls	r3, r3, #8
 801975c:	0c1b      	lsrs	r3, r3, #16
 801975e:	b29b      	uxth	r3, r3
 8019760:	b21a      	sxth	r2, r3
 8019762:	231b      	movs	r3, #27
 8019764:	18fb      	adds	r3, r7, r3
 8019766:	781b      	ldrb	r3, [r3, #0]
 8019768:	0019      	movs	r1, r3
 801976a:	2301      	movs	r3, #1
 801976c:	408b      	lsls	r3, r1
 801976e:	b21b      	sxth	r3, r3
 8019770:	4313      	orrs	r3, r2
 8019772:	b21b      	sxth	r3, r3
 8019774:	b29a      	uxth	r2, r3
 8019776:	197b      	adds	r3, r7, r5
 8019778:	3301      	adds	r3, #1
 801977a:	21ff      	movs	r1, #255	; 0xff
 801977c:	4011      	ands	r1, r2
 801977e:	000c      	movs	r4, r1
 8019780:	7819      	ldrb	r1, [r3, #0]
 8019782:	2000      	movs	r0, #0
 8019784:	4001      	ands	r1, r0
 8019786:	1c08      	adds	r0, r1, #0
 8019788:	1c21      	adds	r1, r4, #0
 801978a:	4301      	orrs	r1, r0
 801978c:	7019      	strb	r1, [r3, #0]
 801978e:	0a12      	lsrs	r2, r2, #8
 8019790:	b290      	uxth	r0, r2
 8019792:	785a      	ldrb	r2, [r3, #1]
 8019794:	2100      	movs	r1, #0
 8019796:	400a      	ands	r2, r1
 8019798:	1c11      	adds	r1, r2, #0
 801979a:	1c02      	adds	r2, r0, #0
 801979c:	430a      	orrs	r2, r1
 801979e:	705a      	strb	r2, [r3, #1]
		_eeprom_write(ITDT_EEPROM_BANK0, ITSDK_SECSTORE_EEPROM_OFFSET, (void *) &_head, sizeof(itsdk_secStoreHead_t));
 80197a0:	197a      	adds	r2, r7, r5
 80197a2:	2310      	movs	r3, #16
 80197a4:	2100      	movs	r1, #0
 80197a6:	2000      	movs	r0, #0
 80197a8:	f004 f926 	bl	801d9f8 <_eeprom_write>
	}

	return SS_SUCCESS;
 80197ac:	2300      	movs	r3, #0
}
 80197ae:	0018      	movs	r0, r3
 80197b0:	46bd      	mov	sp, r7
 80197b2:	b00c      	add	sp, #48	; 0x30
 80197b4:	bdb0      	pop	{r4, r5, r7, pc}
	...

080197b8 <itsdk_secstore_init>:


/**
 * Init the Secure Store - create the store structure with the default values
 */
itsdk_secStoreReturn_e itsdk_secstore_init() {
 80197b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80197ba:	b08d      	sub	sp, #52	; 0x34
 80197bc:	af00      	add	r7, sp, #0
	// Create the header
	itsdk_secStoreHead_t	_head;
	_head.magic1 = ITSDK_SECSTORE_EEPROM_MAGIC;
 80197be:	2020      	movs	r0, #32
 80197c0:	0004      	movs	r4, r0
 80197c2:	183b      	adds	r3, r7, r0
 80197c4:	781a      	ldrb	r2, [r3, #0]
 80197c6:	210f      	movs	r1, #15
 80197c8:	438a      	bics	r2, r1
 80197ca:	1c11      	adds	r1, r2, #0
 80197cc:	220c      	movs	r2, #12
 80197ce:	430a      	orrs	r2, r1
 80197d0:	701a      	strb	r2, [r3, #0]
	uint8_t	count;
	_itsdk_secstore_getEntries(&count);
 80197d2:	251f      	movs	r5, #31
 80197d4:	197b      	adds	r3, r7, r5
 80197d6:	0018      	movs	r0, r3
 80197d8:	f7ff fe3e 	bl	8019458 <_itsdk_secstore_getEntries>
	_head.blockCount=count;
 80197dc:	197b      	adds	r3, r7, r5
 80197de:	781b      	ldrb	r3, [r3, #0]
 80197e0:	1c1a      	adds	r2, r3, #0
 80197e2:	230f      	movs	r3, #15
 80197e4:	4013      	ands	r3, r2
 80197e6:	b2da      	uxtb	r2, r3
 80197e8:	193b      	adds	r3, r7, r4
 80197ea:	0110      	lsls	r0, r2, #4
 80197ec:	781a      	ldrb	r2, [r3, #0]
 80197ee:	210f      	movs	r1, #15
 80197f0:	400a      	ands	r2, r1
 80197f2:	1c11      	adds	r1, r2, #0
 80197f4:	1c02      	adds	r2, r0, #0
 80197f6:	430a      	orrs	r2, r1
 80197f8:	701a      	strb	r2, [r3, #0]
	_head.blockUsed = 0x1;
 80197fa:	0020      	movs	r0, r4
 80197fc:	193b      	adds	r3, r7, r4
 80197fe:	3301      	adds	r3, #1
 8019800:	781a      	ldrb	r2, [r3, #0]
 8019802:	2100      	movs	r1, #0
 8019804:	400a      	ands	r2, r1
 8019806:	1c11      	adds	r1, r2, #0
 8019808:	2201      	movs	r2, #1
 801980a:	430a      	orrs	r2, r1
 801980c:	701a      	strb	r2, [r3, #0]
 801980e:	785a      	ldrb	r2, [r3, #1]
 8019810:	2100      	movs	r1, #0
 8019812:	400a      	ands	r2, r1
 8019814:	705a      	strb	r2, [r3, #1]
	uint8_t _buff[12] = ITSDK_SECSTORE_DEFKEY;
 8019816:	2110      	movs	r1, #16
 8019818:	187b      	adds	r3, r7, r1
 801981a:	4a15      	ldr	r2, [pc, #84]	; (8019870 <itsdk_secstore_init+0xb8>)
 801981c:	ca70      	ldmia	r2!, {r4, r5, r6}
 801981e:	c370      	stmia	r3!, {r4, r5, r6}
	memcpy(_head.dynamicKey,_buff,12);
 8019820:	183b      	adds	r3, r7, r0
 8019822:	187a      	adds	r2, r7, r1
 8019824:	3304      	adds	r3, #4
 8019826:	ca32      	ldmia	r2!, {r1, r4, r5}
 8019828:	c332      	stmia	r3!, {r1, r4, r5}

	// Store it
	_eeprom_write(ITDT_EEPROM_BANK0, ITSDK_SECSTORE_EEPROM_OFFSET, (void *) &_head, sizeof(itsdk_secStoreHead_t));
 801982a:	183a      	adds	r2, r7, r0
 801982c:	2310      	movs	r3, #16
 801982e:	2100      	movs	r1, #0
 8019830:	2000      	movs	r0, #0
 8019832:	f004 f8e1 	bl	801d9f8 <_eeprom_write>

	// Init the console login
	uint8_t _buff2[16] = ITSDK_SECSTORE_CONSOLEKEY;
 8019836:	0039      	movs	r1, r7
 8019838:	4a0e      	ldr	r2, [pc, #56]	; (8019874 <itsdk_secstore_init+0xbc>)
 801983a:	000b      	movs	r3, r1
 801983c:	ca11      	ldmia	r2!, {r0, r4}
 801983e:	c311      	stmia	r3!, {r0, r4}
 8019840:	7812      	ldrb	r2, [r2, #0]
 8019842:	701a      	strb	r2, [r3, #0]
 8019844:	2309      	movs	r3, #9
 8019846:	18cb      	adds	r3, r1, r3
 8019848:	2207      	movs	r2, #7
 801984a:	2100      	movs	r1, #0
 801984c:	0018      	movs	r0, r3
 801984e:	f004 fce5 	bl	801e21c <memset>
	itsdk_secstore_writeBlock(ITSDK_SS_CONSOLEKEY,_buff2);
 8019852:	003b      	movs	r3, r7
 8019854:	0019      	movs	r1, r3
 8019856:	2000      	movs	r0, #0
 8019858:	f7ff ff37 	bl	80196ca <itsdk_secstore_writeBlock>
	bzero(_buff2,16);
 801985c:	003b      	movs	r3, r7
 801985e:	2110      	movs	r1, #16
 8019860:	0018      	movs	r0, r3
 8019862:	f004 fc8f 	bl	801e184 <bzero>

	return SS_SUCCESS;
 8019866:	2300      	movs	r3, #0
}
 8019868:	0018      	movs	r0, r3
 801986a:	46bd      	mov	sp, r7
 801986c:	b00d      	add	sp, #52	; 0x34
 801986e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019870:	0802003c 	.word	0x0802003c
 8019874:	08020048 	.word	0x08020048

08019878 <itsdk_secstore_isInit>:

/**
 * Return SS_SUCCESS when the secure Store is already initialized
 */
itsdk_secStoreReturn_e itsdk_secstore_isInit() {
 8019878:	b580      	push	{r7, lr}
 801987a:	b084      	sub	sp, #16
 801987c:	af00      	add	r7, sp, #0
	itsdk_secStoreHead_t	_head;
	// Control header validity
	return _itsdk_secstore_controlHeader(&_head);
 801987e:	003b      	movs	r3, r7
 8019880:	0018      	movs	r0, r3
 8019882:	f7ff fe03 	bl	801948c <_itsdk_secstore_controlHeader>
 8019886:	0003      	movs	r3, r0
}
 8019888:	0018      	movs	r0, r3
 801988a:	46bd      	mov	sp, r7
 801988c:	b004      	add	sp, #16
 801988e:	bd80      	pop	{r7, pc}

08019890 <_itsdk_secstore_writeBlockKey>:
								      }

/**
 * Write a block with a specified MasterKey
 */
static itsdk_secStoreReturn_e _itsdk_secstore_writeBlockKey(itsdk_secStoreBlocks_e blockType, uint8_t * buffer, uint8_t * masterKey) {
 8019890:	b580      	push	{r7, lr}
 8019892:	b086      	sub	sp, #24
 8019894:	af00      	add	r7, sp, #0
 8019896:	60b9      	str	r1, [r7, #8]
 8019898:	607a      	str	r2, [r7, #4]
 801989a:	210f      	movs	r1, #15
 801989c:	187b      	adds	r3, r7, r1
 801989e:	1c02      	adds	r2, r0, #0
 80198a0:	701a      	strb	r2, [r3, #0]

	// Control the blockId validity
	uint32_t _offset = 0;
 80198a2:	2300      	movs	r3, #0
 80198a4:	617b      	str	r3, [r7, #20]
	uint8_t  _id = 0;
 80198a6:	2013      	movs	r0, #19
 80198a8:	183b      	adds	r3, r7, r0
 80198aa:	2200      	movs	r2, #0
 80198ac:	701a      	strb	r2, [r3, #0]
	if ( _itsdk_secstore_getOffset(&_offset,&_id, blockType) != SS_SUCCESS ) return SS_FAILED_NOTEXISTING;
 80198ae:	187b      	adds	r3, r7, r1
 80198b0:	781a      	ldrb	r2, [r3, #0]
 80198b2:	1839      	adds	r1, r7, r0
 80198b4:	2314      	movs	r3, #20
 80198b6:	18fb      	adds	r3, r7, r3
 80198b8:	0018      	movs	r0, r3
 80198ba:	f7ff fd6d 	bl	8019398 <_itsdk_secstore_getOffset>
 80198be:	1e03      	subs	r3, r0, #0
 80198c0:	d001      	beq.n	80198c6 <_itsdk_secstore_writeBlockKey+0x36>
 80198c2:	2301      	movs	r3, #1
 80198c4:	e00c      	b.n	80198e0 <_itsdk_secstore_writeBlockKey+0x50>

	// Encode with AES-128
	itsdk_aes_ecb_encrypt_128B(buffer,buffer,ITSDK_SECSTORE_BLOCKSZ,masterKey);
 80198c6:	687b      	ldr	r3, [r7, #4]
 80198c8:	68b9      	ldr	r1, [r7, #8]
 80198ca:	68b8      	ldr	r0, [r7, #8]
 80198cc:	2210      	movs	r2, #16
 80198ce:	f000 fbbd 	bl	801a04c <itsdk_aes_ecb_encrypt_128B>

	// Write block
	_eeprom_write(ITDT_EEPROM_BANK0, ITSDK_SECSTORE_EEPROM_OFFSET+_offset, (void *) buffer, ITSDK_SECSTORE_BLOCKSZ);
 80198d2:	6979      	ldr	r1, [r7, #20]
 80198d4:	68ba      	ldr	r2, [r7, #8]
 80198d6:	2310      	movs	r3, #16
 80198d8:	2000      	movs	r0, #0
 80198da:	f004 f88d 	bl	801d9f8 <_eeprom_write>

	return SS_SUCCESS;
 80198de:	2300      	movs	r3, #0
}
 80198e0:	0018      	movs	r0, r3
 80198e2:	46bd      	mov	sp, r7
 80198e4:	b006      	add	sp, #24
 80198e6:	bd80      	pop	{r7, pc}

080198e8 <_itsk_secstore_rekey>:


/**
 * Change the dyn key and update all the encrypted elements
 */
static itsdk_console_return_e _itsk_secstore_rekey(uint8_t * newKey){
 80198e8:	b580      	push	{r7, lr}
 80198ea:	b090      	sub	sp, #64	; 0x40
 80198ec:	af00      	add	r7, sp, #0
 80198ee:	6078      	str	r0, [r7, #4]

	itsdk_secStoreHead_t	_head;
	uint8_t _b[ITSDK_SECSTORE_BLOCKSZ];

	// Control Header validity & load previous header
	if ( _itsdk_secstore_controlHeader(&_head) != SS_SUCCESS ) {
 80198f0:	232c      	movs	r3, #44	; 0x2c
 80198f2:	18fb      	adds	r3, r7, r3
 80198f4:	0018      	movs	r0, r3
 80198f6:	f7ff fdc9 	bl	801948c <_itsdk_secstore_controlHeader>
 80198fa:	1e03      	subs	r3, r0, #0
 80198fc:	d005      	beq.n	801990a <_itsk_secstore_rekey+0x22>
		_itsdk_console_printf("KO\r\n");
 80198fe:	4b4b      	ldr	r3, [pc, #300]	; (8019a2c <_itsk_secstore_rekey+0x144>)
 8019900:	0018      	movs	r0, r3
 8019902:	f7fe fef5 	bl	80186f0 <_itsdk_console_printf>
		return ITSDK_CONSOLE_FAILED;
 8019906:	2302      	movs	r3, #2
 8019908:	e08c      	b.n	8019a24 <_itsk_secstore_rekey+0x13c>
	}

	// Generate the Master key
	uint8_t masterKey[16];
	itsdk_secstore_generateMasterKey(newKey,masterKey);
 801990a:	230c      	movs	r3, #12
 801990c:	18fa      	adds	r2, r7, r3
 801990e:	687b      	ldr	r3, [r7, #4]
 8019910:	0011      	movs	r1, r2
 8019912:	0018      	movs	r0, r3
 8019914:	f7ff fdef 	bl	80194f6 <itsdk_secstore_generateMasterKey>

	if ( itsdk_secstore_readBlock(ITSDK_SS_CONSOLEKEY, _b) != SS_FAILED_NOTSET ) {
 8019918:	231c      	movs	r3, #28
 801991a:	18fb      	adds	r3, r7, r3
 801991c:	0019      	movs	r1, r3
 801991e:	2000      	movs	r0, #0
 8019920:	f7ff fe86 	bl	8019630 <itsdk_secstore_readBlock>
 8019924:	0003      	movs	r3, r0
 8019926:	2b03      	cmp	r3, #3
 8019928:	d007      	beq.n	801993a <_itsk_secstore_rekey+0x52>
		_itsdk_secstore_writeBlockKey(ITSDK_SS_CONSOLEKEY,_b,masterKey);
 801992a:	230c      	movs	r3, #12
 801992c:	18fa      	adds	r2, r7, r3
 801992e:	231c      	movs	r3, #28
 8019930:	18fb      	adds	r3, r7, r3
 8019932:	0019      	movs	r1, r3
 8019934:	2000      	movs	r0, #0
 8019936:	f7ff ffab 	bl	8019890 <_itsdk_secstore_writeBlockKey>
		_itsdk_secstore_writeBlockKey(ITSDK_SS_SIGFOXKEY,_b,masterKey);
	}
#endif
#if defined(ITSDK_WITH_LORAWAN_LIB) && ITSDK_WITH_LORAWAN_LIB == __ENABLE
	// we have more ABP in the UNION when Staticly compiled
	if ( itsdk_secstore_readBlock(ITSDK_SS_LORA_ABP_NETIDDEVID, _b) != SS_FAILED_NOTSET ) {
 801993a:	231c      	movs	r3, #28
 801993c:	18fb      	adds	r3, r7, r3
 801993e:	0019      	movs	r1, r3
 8019940:	2002      	movs	r0, #2
 8019942:	f7ff fe75 	bl	8019630 <itsdk_secstore_readBlock>
 8019946:	0003      	movs	r3, r0
 8019948:	2b03      	cmp	r3, #3
 801994a:	d007      	beq.n	801995c <_itsk_secstore_rekey+0x74>
		_itsdk_secstore_writeBlockKey(ITSDK_SS_LORA_ABP_NETIDDEVID,_b,masterKey);
 801994c:	230c      	movs	r3, #12
 801994e:	18fa      	adds	r2, r7, r3
 8019950:	231c      	movs	r3, #28
 8019952:	18fb      	adds	r3, r7, r3
 8019954:	0019      	movs	r1, r3
 8019956:	2002      	movs	r0, #2
 8019958:	f7ff ff9a 	bl	8019890 <_itsdk_secstore_writeBlockKey>
	}

	if ( itsdk_secstore_readBlock(ITSDK_SS_LORA_ABP_NETKEYF, _b) != SS_FAILED_NOTSET ) {
 801995c:	231c      	movs	r3, #28
 801995e:	18fb      	adds	r3, r7, r3
 8019960:	0019      	movs	r1, r3
 8019962:	2003      	movs	r0, #3
 8019964:	f7ff fe64 	bl	8019630 <itsdk_secstore_readBlock>
 8019968:	0003      	movs	r3, r0
 801996a:	2b03      	cmp	r3, #3
 801996c:	d007      	beq.n	801997e <_itsk_secstore_rekey+0x96>
		_itsdk_secstore_writeBlockKey(ITSDK_SS_LORA_ABP_NETKEYF,_b,masterKey);
 801996e:	230c      	movs	r3, #12
 8019970:	18fa      	adds	r2, r7, r3
 8019972:	231c      	movs	r3, #28
 8019974:	18fb      	adds	r3, r7, r3
 8019976:	0019      	movs	r1, r3
 8019978:	2003      	movs	r0, #3
 801997a:	f7ff ff89 	bl	8019890 <_itsdk_secstore_writeBlockKey>
	}

	if ( itsdk_secstore_readBlock(ITSDK_SS_LORA_ABP_NETKEYS, _b) != SS_FAILED_NOTSET ) {
 801997e:	231c      	movs	r3, #28
 8019980:	18fb      	adds	r3, r7, r3
 8019982:	0019      	movs	r1, r3
 8019984:	2004      	movs	r0, #4
 8019986:	f7ff fe53 	bl	8019630 <itsdk_secstore_readBlock>
 801998a:	0003      	movs	r3, r0
 801998c:	2b03      	cmp	r3, #3
 801998e:	d007      	beq.n	80199a0 <_itsk_secstore_rekey+0xb8>
		_itsdk_secstore_writeBlockKey(ITSDK_SS_LORA_ABP_NETKEYS,_b,masterKey);
 8019990:	230c      	movs	r3, #12
 8019992:	18fa      	adds	r2, r7, r3
 8019994:	231c      	movs	r3, #28
 8019996:	18fb      	adds	r3, r7, r3
 8019998:	0019      	movs	r1, r3
 801999a:	2004      	movs	r0, #4
 801999c:	f7ff ff78 	bl	8019890 <_itsdk_secstore_writeBlockKey>
	}

	if ( itsdk_secstore_readBlock(ITSDK_SS_LORA_ABP_NETSKEY, _b) != SS_FAILED_NOTSET ) {
 80199a0:	231c      	movs	r3, #28
 80199a2:	18fb      	adds	r3, r7, r3
 80199a4:	0019      	movs	r1, r3
 80199a6:	2005      	movs	r0, #5
 80199a8:	f7ff fe42 	bl	8019630 <itsdk_secstore_readBlock>
 80199ac:	0003      	movs	r3, r0
 80199ae:	2b03      	cmp	r3, #3
 80199b0:	d007      	beq.n	80199c2 <_itsk_secstore_rekey+0xda>
		_itsdk_secstore_writeBlockKey(ITSDK_SS_LORA_ABP_NETSKEY,_b,masterKey);
 80199b2:	230c      	movs	r3, #12
 80199b4:	18fa      	adds	r2, r7, r3
 80199b6:	231c      	movs	r3, #28
 80199b8:	18fb      	adds	r3, r7, r3
 80199ba:	0019      	movs	r1, r3
 80199bc:	2005      	movs	r0, #5
 80199be:	f7ff ff67 	bl	8019890 <_itsdk_secstore_writeBlockKey>
	}

	if ( itsdk_secstore_readBlock(ITSDK_SS_LORA_ABP_APPSKEY, _b) != SS_FAILED_NOTSET ) {
 80199c2:	231c      	movs	r3, #28
 80199c4:	18fb      	adds	r3, r7, r3
 80199c6:	0019      	movs	r1, r3
 80199c8:	2006      	movs	r0, #6
 80199ca:	f7ff fe31 	bl	8019630 <itsdk_secstore_readBlock>
 80199ce:	0003      	movs	r3, r0
 80199d0:	2b03      	cmp	r3, #3
 80199d2:	d007      	beq.n	80199e4 <_itsk_secstore_rekey+0xfc>
		_itsdk_secstore_writeBlockKey(ITSDK_SS_LORA_ABP_APPSKEY,_b,masterKey);
 80199d4:	230c      	movs	r3, #12
 80199d6:	18fa      	adds	r2, r7, r3
 80199d8:	231c      	movs	r3, #28
 80199da:	18fb      	adds	r3, r7, r3
 80199dc:	0019      	movs	r1, r3
 80199de:	2006      	movs	r0, #6
 80199e0:	f7ff ff56 	bl	8019890 <_itsdk_secstore_writeBlockKey>
		_itsdk_secstore_writeBlockKey(ITSDK_SS_USER7,_b,masterKey);
	}
#endif

	// Write Header
	for ( int i = 0 ; i < 12 ; i++) {
 80199e4:	2300      	movs	r3, #0
 80199e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80199e8:	e00d      	b.n	8019a06 <_itsk_secstore_rekey+0x11e>
		_head.dynamicKey[i] = newKey[i];
 80199ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80199ec:	687a      	ldr	r2, [r7, #4]
 80199ee:	18d3      	adds	r3, r2, r3
 80199f0:	7819      	ldrb	r1, [r3, #0]
 80199f2:	232c      	movs	r3, #44	; 0x2c
 80199f4:	18fa      	adds	r2, r7, r3
 80199f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80199f8:	18d3      	adds	r3, r2, r3
 80199fa:	3304      	adds	r3, #4
 80199fc:	1c0a      	adds	r2, r1, #0
 80199fe:	701a      	strb	r2, [r3, #0]
	for ( int i = 0 ; i < 12 ; i++) {
 8019a00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019a02:	3301      	adds	r3, #1
 8019a04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8019a06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019a08:	2b0b      	cmp	r3, #11
 8019a0a:	ddee      	ble.n	80199ea <_itsk_secstore_rekey+0x102>
	}
	_eeprom_write(ITDT_EEPROM_BANK0, ITSDK_SECSTORE_EEPROM_OFFSET, (void *) &_head, sizeof(itsdk_secStoreHead_t));
 8019a0c:	232c      	movs	r3, #44	; 0x2c
 8019a0e:	18fa      	adds	r2, r7, r3
 8019a10:	2310      	movs	r3, #16
 8019a12:	2100      	movs	r1, #0
 8019a14:	2000      	movs	r0, #0
 8019a16:	f003 ffef 	bl	801d9f8 <_eeprom_write>
	_itsdk_console_printf("OK\r\n");
 8019a1a:	4b05      	ldr	r3, [pc, #20]	; (8019a30 <_itsk_secstore_rekey+0x148>)
 8019a1c:	0018      	movs	r0, r3
 8019a1e:	f7fe fe67 	bl	80186f0 <_itsdk_console_printf>
	return ITSDK_CONSOLE_SUCCES;
 8019a22:	2300      	movs	r3, #0
}
 8019a24:	0018      	movs	r0, r3
 8019a26:	46bd      	mov	sp, r7
 8019a28:	b010      	add	sp, #64	; 0x40
 8019a2a:	bd80      	pop	{r7, pc}
 8019a2c:	08020058 	.word	0x08020058
 8019a30:	08020060 	.word	0x08020060

08019a34 <__checkAndConvert>:
/**
 * convert and verify a char * hex string into a uint8_t array
 * verify : size of the string regarding the sz
 * verify : format of the char to match Hex number
 */
static bool __checkAndConvert(char * str,uint8_t start,uint8_t stop,uint8_t sz,uint8_t * buf) {
 8019a34:	b590      	push	{r4, r7, lr}
 8019a36:	b085      	sub	sp, #20
 8019a38:	af00      	add	r7, sp, #0
 8019a3a:	6078      	str	r0, [r7, #4]
 8019a3c:	000c      	movs	r4, r1
 8019a3e:	0010      	movs	r0, r2
 8019a40:	0019      	movs	r1, r3
 8019a42:	1cfb      	adds	r3, r7, #3
 8019a44:	1c22      	adds	r2, r4, #0
 8019a46:	701a      	strb	r2, [r3, #0]
 8019a48:	1cbb      	adds	r3, r7, #2
 8019a4a:	1c02      	adds	r2, r0, #0
 8019a4c:	701a      	strb	r2, [r3, #0]
 8019a4e:	1c7b      	adds	r3, r7, #1
 8019a50:	1c0a      	adds	r2, r1, #0
 8019a52:	701a      	strb	r2, [r3, #0]
	if ( (stop - start) < 2*sz ) return false;
 8019a54:	1cbb      	adds	r3, r7, #2
 8019a56:	781a      	ldrb	r2, [r3, #0]
 8019a58:	1cfb      	adds	r3, r7, #3
 8019a5a:	781b      	ldrb	r3, [r3, #0]
 8019a5c:	1ad2      	subs	r2, r2, r3
 8019a5e:	1c7b      	adds	r3, r7, #1
 8019a60:	781b      	ldrb	r3, [r3, #0]
 8019a62:	005b      	lsls	r3, r3, #1
 8019a64:	429a      	cmp	r2, r3
 8019a66:	da01      	bge.n	8019a6c <__checkAndConvert+0x38>
 8019a68:	2300      	movs	r3, #0
 8019a6a:	e034      	b.n	8019ad6 <__checkAndConvert+0xa2>
	int k = 0;
 8019a6c:	2300      	movs	r3, #0
 8019a6e:	60fb      	str	r3, [r7, #12]
	for ( int i = start ; i < stop ; i+=2 ) {
 8019a70:	1cfb      	adds	r3, r7, #3
 8019a72:	781b      	ldrb	r3, [r3, #0]
 8019a74:	60bb      	str	r3, [r7, #8]
 8019a76:	e028      	b.n	8019aca <__checkAndConvert+0x96>
		if ( itdt_isHexChar(str[i],false) && itdt_isHexChar(str[i+1],false) ) {
 8019a78:	68bb      	ldr	r3, [r7, #8]
 8019a7a:	687a      	ldr	r2, [r7, #4]
 8019a7c:	18d3      	adds	r3, r2, r3
 8019a7e:	781b      	ldrb	r3, [r3, #0]
 8019a80:	2100      	movs	r1, #0
 8019a82:	0018      	movs	r0, r3
 8019a84:	f002 fc98 	bl	801c3b8 <itdt_isHexChar>
 8019a88:	1e03      	subs	r3, r0, #0
 8019a8a:	d01c      	beq.n	8019ac6 <__checkAndConvert+0x92>
 8019a8c:	68bb      	ldr	r3, [r7, #8]
 8019a8e:	3301      	adds	r3, #1
 8019a90:	687a      	ldr	r2, [r7, #4]
 8019a92:	18d3      	adds	r3, r2, r3
 8019a94:	781b      	ldrb	r3, [r3, #0]
 8019a96:	2100      	movs	r1, #0
 8019a98:	0018      	movs	r0, r3
 8019a9a:	f002 fc8d 	bl	801c3b8 <itdt_isHexChar>
 8019a9e:	1e03      	subs	r3, r0, #0
 8019aa0:	d011      	beq.n	8019ac6 <__checkAndConvert+0x92>
			buf[k] = itdt_convertHexChar2Int(&str[i]);
 8019aa2:	68bb      	ldr	r3, [r7, #8]
 8019aa4:	687a      	ldr	r2, [r7, #4]
 8019aa6:	18d1      	adds	r1, r2, r3
 8019aa8:	68fb      	ldr	r3, [r7, #12]
 8019aaa:	6a3a      	ldr	r2, [r7, #32]
 8019aac:	18d4      	adds	r4, r2, r3
 8019aae:	0008      	movs	r0, r1
 8019ab0:	f002 fbe2 	bl	801c278 <itdt_convertHexChar2Int>
 8019ab4:	0003      	movs	r3, r0
 8019ab6:	7023      	strb	r3, [r4, #0]
			k++;
 8019ab8:	68fb      	ldr	r3, [r7, #12]
 8019aba:	3301      	adds	r3, #1
 8019abc:	60fb      	str	r3, [r7, #12]
	for ( int i = start ; i < stop ; i+=2 ) {
 8019abe:	68bb      	ldr	r3, [r7, #8]
 8019ac0:	3302      	adds	r3, #2
 8019ac2:	60bb      	str	r3, [r7, #8]
 8019ac4:	e001      	b.n	8019aca <__checkAndConvert+0x96>
		} else return false;
 8019ac6:	2300      	movs	r3, #0
 8019ac8:	e005      	b.n	8019ad6 <__checkAndConvert+0xa2>
	for ( int i = start ; i < stop ; i+=2 ) {
 8019aca:	1cbb      	adds	r3, r7, #2
 8019acc:	781b      	ldrb	r3, [r3, #0]
 8019ace:	68ba      	ldr	r2, [r7, #8]
 8019ad0:	429a      	cmp	r2, r3
 8019ad2:	dbd1      	blt.n	8019a78 <__checkAndConvert+0x44>
	}
	return true;
 8019ad4:	2301      	movs	r3, #1
}
 8019ad6:	0018      	movs	r0, r3
 8019ad8:	46bd      	mov	sp, r7
 8019ada:	b005      	add	sp, #20
 8019adc:	bd90      	pop	{r4, r7, pc}
	...

08019ae0 <__updateField>:

static itsdk_console_return_e __updateField(char * buffer, uint8_t sz, uint8_t *b, itsdk_secStoreBlocks_e type) {
 8019ae0:	b590      	push	{r4, r7, lr}
 8019ae2:	b087      	sub	sp, #28
 8019ae4:	af02      	add	r7, sp, #8
 8019ae6:	60f8      	str	r0, [r7, #12]
 8019ae8:	0008      	movs	r0, r1
 8019aea:	607a      	str	r2, [r7, #4]
 8019aec:	0019      	movs	r1, r3
 8019aee:	240b      	movs	r4, #11
 8019af0:	193b      	adds	r3, r7, r4
 8019af2:	1c02      	adds	r2, r0, #0
 8019af4:	701a      	strb	r2, [r3, #0]
 8019af6:	230a      	movs	r3, #10
 8019af8:	18fb      	adds	r3, r7, r3
 8019afa:	1c0a      	adds	r2, r1, #0
 8019afc:	701a      	strb	r2, [r3, #0]
	if ( __checkAndConvert(buffer,5,sz,16,b) ) {
 8019afe:	193b      	adds	r3, r7, r4
 8019b00:	781a      	ldrb	r2, [r3, #0]
 8019b02:	68f8      	ldr	r0, [r7, #12]
 8019b04:	687b      	ldr	r3, [r7, #4]
 8019b06:	9300      	str	r3, [sp, #0]
 8019b08:	2310      	movs	r3, #16
 8019b0a:	2105      	movs	r1, #5
 8019b0c:	f7ff ff92 	bl	8019a34 <__checkAndConvert>
 8019b10:	1e03      	subs	r3, r0, #0
 8019b12:	d01f      	beq.n	8019b54 <__updateField+0x74>
		if ( type == ITSDK_SS_SIGFOXKEY ) {
 8019b14:	230a      	movs	r3, #10
 8019b16:	18fb      	adds	r3, r7, r3
 8019b18:	781b      	ldrb	r3, [r3, #0]
 8019b1a:	2b01      	cmp	r3, #1
 8019b1c:	d104      	bne.n	8019b28 <__updateField+0x48>
		   itsdk_encrypt_cifferKey(b,16);
 8019b1e:	687b      	ldr	r3, [r7, #4]
 8019b20:	2110      	movs	r1, #16
 8019b22:	0018      	movs	r0, r3
 8019b24:	f000 fb16 	bl	801a154 <itsdk_encrypt_cifferKey>
		}
		if ( itsdk_secstore_writeBlock(type, b) == SS_SUCCESS ) {
 8019b28:	687a      	ldr	r2, [r7, #4]
 8019b2a:	230a      	movs	r3, #10
 8019b2c:	18fb      	adds	r3, r7, r3
 8019b2e:	781b      	ldrb	r3, [r3, #0]
 8019b30:	0011      	movs	r1, r2
 8019b32:	0018      	movs	r0, r3
 8019b34:	f7ff fdc9 	bl	80196ca <itsdk_secstore_writeBlock>
 8019b38:	1e03      	subs	r3, r0, #0
 8019b3a:	d105      	bne.n	8019b48 <__updateField+0x68>
			_itsdk_console_printf("OK\r\n");
 8019b3c:	4b0a      	ldr	r3, [pc, #40]	; (8019b68 <__updateField+0x88>)
 8019b3e:	0018      	movs	r0, r3
 8019b40:	f7fe fdd6 	bl	80186f0 <_itsdk_console_printf>
			return ITSDK_CONSOLE_SUCCES;
 8019b44:	2300      	movs	r3, #0
 8019b46:	e00a      	b.n	8019b5e <__updateField+0x7e>
		} else {
			_itsdk_console_printf("KO\r\n");
 8019b48:	4b08      	ldr	r3, [pc, #32]	; (8019b6c <__updateField+0x8c>)
 8019b4a:	0018      	movs	r0, r3
 8019b4c:	f7fe fdd0 	bl	80186f0 <_itsdk_console_printf>
			return ITSDK_CONSOLE_FAILED;
 8019b50:	2302      	movs	r3, #2
 8019b52:	e004      	b.n	8019b5e <__updateField+0x7e>
		}
	} else {
		_itsdk_console_printf("KO\r\n");
 8019b54:	4b05      	ldr	r3, [pc, #20]	; (8019b6c <__updateField+0x8c>)
 8019b56:	0018      	movs	r0, r3
 8019b58:	f7fe fdca 	bl	80186f0 <_itsdk_console_printf>
		return ITSDK_CONSOLE_FAILED;
 8019b5c:	2302      	movs	r3, #2
	}
}
 8019b5e:	0018      	movs	r0, r3
 8019b60:	46bd      	mov	sp, r7
 8019b62:	b005      	add	sp, #20
 8019b64:	bd90      	pop	{r4, r7, pc}
 8019b66:	46c0      	nop			; (mov r8, r8)
 8019b68:	08020060 	.word	0x08020060
 8019b6c:	08020058 	.word	0x08020058

08019b70 <__updateField2>:

static itsdk_console_return_e __updateField2(char * buffer, uint8_t sz, uint8_t *b, itsdk_secStoreBlocks_e type, uint8_t offset,uint8_t size) {
 8019b70:	b590      	push	{r4, r7, lr}
 8019b72:	b08d      	sub	sp, #52	; 0x34
 8019b74:	af02      	add	r7, sp, #8
 8019b76:	60f8      	str	r0, [r7, #12]
 8019b78:	0008      	movs	r0, r1
 8019b7a:	607a      	str	r2, [r7, #4]
 8019b7c:	0019      	movs	r1, r3
 8019b7e:	240b      	movs	r4, #11
 8019b80:	193b      	adds	r3, r7, r4
 8019b82:	1c02      	adds	r2, r0, #0
 8019b84:	701a      	strb	r2, [r3, #0]
 8019b86:	230a      	movs	r3, #10
 8019b88:	18fb      	adds	r3, r7, r3
 8019b8a:	1c0a      	adds	r2, r1, #0
 8019b8c:	701a      	strb	r2, [r3, #0]
	if ( __checkAndConvert(buffer,5,sz,size,b) ) {
 8019b8e:	2334      	movs	r3, #52	; 0x34
 8019b90:	2208      	movs	r2, #8
 8019b92:	4694      	mov	ip, r2
 8019b94:	44bc      	add	ip, r7
 8019b96:	4463      	add	r3, ip
 8019b98:	7819      	ldrb	r1, [r3, #0]
 8019b9a:	193b      	adds	r3, r7, r4
 8019b9c:	781a      	ldrb	r2, [r3, #0]
 8019b9e:	68f8      	ldr	r0, [r7, #12]
 8019ba0:	687b      	ldr	r3, [r7, #4]
 8019ba2:	9300      	str	r3, [sp, #0]
 8019ba4:	000b      	movs	r3, r1
 8019ba6:	2105      	movs	r1, #5
 8019ba8:	f7ff ff44 	bl	8019a34 <__checkAndConvert>
 8019bac:	1e03      	subs	r3, r0, #0
 8019bae:	d045      	beq.n	8019c3c <__updateField2+0xcc>
		uint8_t _b[ITSDK_SECSTORE_BLOCKSZ];
		if ( itsdk_secstore_readBlock(type, _b) != SS_SUCCESS ) {
 8019bb0:	2314      	movs	r3, #20
 8019bb2:	18fa      	adds	r2, r7, r3
 8019bb4:	230a      	movs	r3, #10
 8019bb6:	18fb      	adds	r3, r7, r3
 8019bb8:	781b      	ldrb	r3, [r3, #0]
 8019bba:	0011      	movs	r1, r2
 8019bbc:	0018      	movs	r0, r3
 8019bbe:	f7ff fd37 	bl	8019630 <itsdk_secstore_readBlock>
 8019bc2:	1e03      	subs	r3, r0, #0
 8019bc4:	d005      	beq.n	8019bd2 <__updateField2+0x62>
			_itsdk_console_printf("KO\r\n");
 8019bc6:	4b22      	ldr	r3, [pc, #136]	; (8019c50 <__updateField2+0xe0>)
 8019bc8:	0018      	movs	r0, r3
 8019bca:	f7fe fd91 	bl	80186f0 <_itsdk_console_printf>
			return ITSDK_CONSOLE_FAILED;
 8019bce:	2302      	movs	r3, #2
 8019bd0:	e039      	b.n	8019c46 <__updateField2+0xd6>
		}
		for ( int i = 0 ; i < size ; i++) {
 8019bd2:	2300      	movs	r3, #0
 8019bd4:	627b      	str	r3, [r7, #36]	; 0x24
 8019bd6:	e011      	b.n	8019bfc <__updateField2+0x8c>
			_b[i+offset] = b[i];
 8019bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019bda:	687a      	ldr	r2, [r7, #4]
 8019bdc:	18d2      	adds	r2, r2, r3
 8019bde:	2330      	movs	r3, #48	; 0x30
 8019be0:	2108      	movs	r1, #8
 8019be2:	468c      	mov	ip, r1
 8019be4:	44bc      	add	ip, r7
 8019be6:	4463      	add	r3, ip
 8019be8:	7819      	ldrb	r1, [r3, #0]
 8019bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019bec:	18cb      	adds	r3, r1, r3
 8019bee:	7811      	ldrb	r1, [r2, #0]
 8019bf0:	2214      	movs	r2, #20
 8019bf2:	18ba      	adds	r2, r7, r2
 8019bf4:	54d1      	strb	r1, [r2, r3]
		for ( int i = 0 ; i < size ; i++) {
 8019bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019bf8:	3301      	adds	r3, #1
 8019bfa:	627b      	str	r3, [r7, #36]	; 0x24
 8019bfc:	2334      	movs	r3, #52	; 0x34
 8019bfe:	2208      	movs	r2, #8
 8019c00:	4694      	mov	ip, r2
 8019c02:	44bc      	add	ip, r7
 8019c04:	4463      	add	r3, ip
 8019c06:	781b      	ldrb	r3, [r3, #0]
 8019c08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019c0a:	429a      	cmp	r2, r3
 8019c0c:	dbe4      	blt.n	8019bd8 <__updateField2+0x68>
		}
		if ( itsdk_secstore_writeBlock(type, _b) == SS_SUCCESS ) {
 8019c0e:	2314      	movs	r3, #20
 8019c10:	18fa      	adds	r2, r7, r3
 8019c12:	230a      	movs	r3, #10
 8019c14:	18fb      	adds	r3, r7, r3
 8019c16:	781b      	ldrb	r3, [r3, #0]
 8019c18:	0011      	movs	r1, r2
 8019c1a:	0018      	movs	r0, r3
 8019c1c:	f7ff fd55 	bl	80196ca <itsdk_secstore_writeBlock>
 8019c20:	1e03      	subs	r3, r0, #0
 8019c22:	d105      	bne.n	8019c30 <__updateField2+0xc0>
			_itsdk_console_printf("OK\r\n");
 8019c24:	4b0b      	ldr	r3, [pc, #44]	; (8019c54 <__updateField2+0xe4>)
 8019c26:	0018      	movs	r0, r3
 8019c28:	f7fe fd62 	bl	80186f0 <_itsdk_console_printf>
			return ITSDK_CONSOLE_SUCCES;
 8019c2c:	2300      	movs	r3, #0
 8019c2e:	e00a      	b.n	8019c46 <__updateField2+0xd6>
		} else {
			_itsdk_console_printf("KO\r\n");
 8019c30:	4b07      	ldr	r3, [pc, #28]	; (8019c50 <__updateField2+0xe0>)
 8019c32:	0018      	movs	r0, r3
 8019c34:	f7fe fd5c 	bl	80186f0 <_itsdk_console_printf>
			return ITSDK_CONSOLE_FAILED;
 8019c38:	2302      	movs	r3, #2
 8019c3a:	e004      	b.n	8019c46 <__updateField2+0xd6>
		}
	} else {
		_itsdk_console_printf("KO\r\n");
 8019c3c:	4b04      	ldr	r3, [pc, #16]	; (8019c50 <__updateField2+0xe0>)
 8019c3e:	0018      	movs	r0, r3
 8019c40:	f7fe fd56 	bl	80186f0 <_itsdk_console_printf>
		return ITSDK_CONSOLE_FAILED;
 8019c44:	2302      	movs	r3, #2
	}
}
 8019c46:	0018      	movs	r0, r3
 8019c48:	46bd      	mov	sp, r7
 8019c4a:	b00b      	add	sp, #44	; 0x2c
 8019c4c:	bd90      	pop	{r4, r7, pc}
 8019c4e:	46c0      	nop			; (mov r8, r8)
 8019c50:	08020058 	.word	0x08020058
 8019c54:	08020060 	.word	0x08020060

08019c58 <_itsdk_secStore_consolePriv>:

/**
 * Extends the console function
 */
static itsdk_console_return_e _itsdk_secStore_consolePriv(char * buffer, uint8_t sz) {
 8019c58:	b5b0      	push	{r4, r5, r7, lr}
 8019c5a:	b090      	sub	sp, #64	; 0x40
 8019c5c:	af02      	add	r7, sp, #8
 8019c5e:	6078      	str	r0, [r7, #4]
 8019c60:	000a      	movs	r2, r1
 8019c62:	1cfb      	adds	r3, r7, #3
 8019c64:	701a      	strb	r2, [r3, #0]
	if ( sz == 1 ) {
 8019c66:	1cfb      	adds	r3, r7, #3
 8019c68:	781b      	ldrb	r3, [r3, #0]
 8019c6a:	2b01      	cmp	r3, #1
 8019c6c:	d136      	bne.n	8019cdc <_itsdk_secStore_consolePriv+0x84>
		switch(buffer[0]){
 8019c6e:	687b      	ldr	r3, [r7, #4]
 8019c70:	781b      	ldrb	r3, [r3, #0]
 8019c72:	2b3f      	cmp	r3, #63	; 0x3f
 8019c74:	d000      	beq.n	8019c78 <_itsdk_secStore_consolePriv+0x20>
			_itsdk_console_printf("SS:P:xxxx  : User change key 7 (16B hex)\r\n");
		  #endif
		  return ITSDK_CONSOLE_SUCCES;
		  break;
		default:
			break;
 8019c76:	e1cb      	b.n	801a010 <_itsdk_secStore_consolePriv+0x3b8>
			_itsdk_console_printf("--- SecureStore\r\n");
 8019c78:	4bd3      	ldr	r3, [pc, #844]	; (8019fc8 <_itsdk_secStore_consolePriv+0x370>)
 8019c7a:	0018      	movs	r0, r3
 8019c7c:	f7fe fd38 	bl	80186f0 <_itsdk_console_printf>
			_itsdk_console_printf("ss:R       : restore all SS to factory default\r\n");
 8019c80:	4bd2      	ldr	r3, [pc, #840]	; (8019fcc <_itsdk_secStore_consolePriv+0x374>)
 8019c82:	0018      	movs	r0, r3
 8019c84:	f7fe fd34 	bl	80186f0 <_itsdk_console_printf>
			_itsdk_console_printf("SS:0:xxxx  : change the secure store dyn Key (12B)\r\n");
 8019c88:	4bd1      	ldr	r3, [pc, #836]	; (8019fd0 <_itsdk_secStore_consolePriv+0x378>)
 8019c8a:	0018      	movs	r0, r3
 8019c8c:	f7fe fd30 	bl	80186f0 <_itsdk_console_printf>
			_itsdk_console_printf("SS:1:xxxx  : change the console password (max 15 char)\r\n");
 8019c90:	4bd0      	ldr	r3, [pc, #832]	; (8019fd4 <_itsdk_secStore_consolePriv+0x37c>)
 8019c92:	0018      	movs	r0, r3
 8019c94:	f7fe fd2c 	bl	80186f0 <_itsdk_console_printf>
			_itsdk_console_printf("ss:Z       : LoRa restore factory setting\r\n");
 8019c98:	4bcf      	ldr	r3, [pc, #828]	; (8019fd8 <_itsdk_secStore_consolePriv+0x380>)
 8019c9a:	0018      	movs	r0, r3
 8019c9c:	f7fe fd28 	bl	80186f0 <_itsdk_console_printf>
			_itsdk_console_printf("ss:9       : LoRa OTAA print DevEUI (8B hex)\r\n");
 8019ca0:	4bce      	ldr	r3, [pc, #824]	; (8019fdc <_itsdk_secStore_consolePriv+0x384>)
 8019ca2:	0018      	movs	r0, r3
 8019ca4:	f7fe fd24 	bl	80186f0 <_itsdk_console_printf>
			_itsdk_console_printf("SS:9:xxxx  : LoRa OTAA change DevEUI (8B hex)\r\n");
 8019ca8:	4bcd      	ldr	r3, [pc, #820]	; (8019fe0 <_itsdk_secStore_consolePriv+0x388>)
 8019caa:	0018      	movs	r0, r3
 8019cac:	f7fe fd20 	bl	80186f0 <_itsdk_console_printf>
			_itsdk_console_printf("ss:A       : LoRa OTAA print AppEUI (8B hex)\r\n");
 8019cb0:	4bcc      	ldr	r3, [pc, #816]	; (8019fe4 <_itsdk_secStore_consolePriv+0x38c>)
 8019cb2:	0018      	movs	r0, r3
 8019cb4:	f7fe fd1c 	bl	80186f0 <_itsdk_console_printf>
			_itsdk_console_printf("SS:A:xxxx  : LoRa OTAA change AppEUI (8B hex)\r\n");
 8019cb8:	4bcb      	ldr	r3, [pc, #812]	; (8019fe8 <_itsdk_secStore_consolePriv+0x390>)
 8019cba:	0018      	movs	r0, r3
 8019cbc:	f7fe fd18 	bl	80186f0 <_itsdk_console_printf>
			_itsdk_console_printf("SS:B:xxxx  : LoRa OTAA change AppKey (16B hex)\r\n");
 8019cc0:	4bca      	ldr	r3, [pc, #808]	; (8019fec <_itsdk_secStore_consolePriv+0x394>)
 8019cc2:	0018      	movs	r0, r3
 8019cc4:	f7fe fd14 	bl	80186f0 <_itsdk_console_printf>
			_itsdk_console_printf("SS:C:xxxx  : LoRa OTAA change NwkKey (16B hex)\r\n");
 8019cc8:	4bc9      	ldr	r3, [pc, #804]	; (8019ff0 <_itsdk_secStore_consolePriv+0x398>)
 8019cca:	0018      	movs	r0, r3
 8019ccc:	f7fe fd10 	bl	80186f0 <_itsdk_console_printf>
			_itsdk_console_printf("SS:D:xxxx  : LoRa OTAA change Nwk+App (16B hex)\r\n");
 8019cd0:	4bc8      	ldr	r3, [pc, #800]	; (8019ff4 <_itsdk_secStore_consolePriv+0x39c>)
 8019cd2:	0018      	movs	r0, r3
 8019cd4:	f7fe fd0c 	bl	80186f0 <_itsdk_console_printf>
		  return ITSDK_CONSOLE_SUCCES;
 8019cd8:	2300      	movs	r3, #0
 8019cda:	e19a      	b.n	801a012 <_itsdk_secStore_consolePriv+0x3ba>
		}
	} else if ( sz >= 4 ) {
 8019cdc:	1cfb      	adds	r3, r7, #3
 8019cde:	781b      	ldrb	r3, [r3, #0]
 8019ce0:	2b03      	cmp	r3, #3
 8019ce2:	d800      	bhi.n	8019ce6 <_itsdk_secStore_consolePriv+0x8e>
 8019ce4:	e194      	b.n	801a010 <_itsdk_secStore_consolePriv+0x3b8>
		uint8_t b[ITSDK_SECSTORE_BLOCKSZ];
		// READ CASE
		if ( buffer[0] == 's' && buffer[1] == 's' && buffer[2] == ':' ) {
 8019ce6:	687b      	ldr	r3, [r7, #4]
 8019ce8:	781b      	ldrb	r3, [r3, #0]
 8019cea:	2b73      	cmp	r3, #115	; 0x73
 8019cec:	d000      	beq.n	8019cf0 <_itsdk_secStore_consolePriv+0x98>
 8019cee:	e096      	b.n	8019e1e <_itsdk_secStore_consolePriv+0x1c6>
 8019cf0:	687b      	ldr	r3, [r7, #4]
 8019cf2:	3301      	adds	r3, #1
 8019cf4:	781b      	ldrb	r3, [r3, #0]
 8019cf6:	2b73      	cmp	r3, #115	; 0x73
 8019cf8:	d000      	beq.n	8019cfc <_itsdk_secStore_consolePriv+0xa4>
 8019cfa:	e090      	b.n	8019e1e <_itsdk_secStore_consolePriv+0x1c6>
 8019cfc:	687b      	ldr	r3, [r7, #4]
 8019cfe:	3302      	adds	r3, #2
 8019d00:	781b      	ldrb	r3, [r3, #0]
 8019d02:	2b3a      	cmp	r3, #58	; 0x3a
 8019d04:	d000      	beq.n	8019d08 <_itsdk_secStore_consolePriv+0xb0>
 8019d06:	e08a      	b.n	8019e1e <_itsdk_secStore_consolePriv+0x1c6>
			switch(buffer[3]) {
 8019d08:	687b      	ldr	r3, [r7, #4]
 8019d0a:	3303      	adds	r3, #3
 8019d0c:	781b      	ldrb	r3, [r3, #0]
 8019d0e:	3b39      	subs	r3, #57	; 0x39
 8019d10:	2b28      	cmp	r3, #40	; 0x28
 8019d12:	d900      	bls.n	8019d16 <_itsdk_secStore_consolePriv+0xbe>
 8019d14:	e085      	b.n	8019e22 <_itsdk_secStore_consolePriv+0x1ca>
 8019d16:	009a      	lsls	r2, r3, #2
 8019d18:	4bb7      	ldr	r3, [pc, #732]	; (8019ff8 <_itsdk_secStore_consolePriv+0x3a0>)
 8019d1a:	18d3      	adds	r3, r2, r3
 8019d1c:	681b      	ldr	r3, [r3, #0]
 8019d1e:	469f      	mov	pc, r3
			case 'R':
				// all config factory default
				{
					uint8_t ret = 0;
 8019d20:	2337      	movs	r3, #55	; 0x37
 8019d22:	18fb      	adds	r3, r7, r3
 8019d24:	2200      	movs	r2, #0
 8019d26:	701a      	strb	r2, [r3, #0]
					#endif
					#if ( defined(ITSDK_SIGFOX_ENCRYPTION) && ( ITSDK_SIGFOX_ENCRYPTION > 0 )) || (defined(ITSDK_LORAWAN_ENCRYPTION) && ( ITSDK_LORAWAN_ENCRYPTION > 0))
					  if ( itsdk_encrypt_resetFactoryDefaults(BOOL_TRUE) != ENCRYPT_RETURN_SUCESS ) ret =1;
					#endif
					#if defined(ITSDK_WITH_LORAWAN_LIB) && ITSDK_WITH_LORAWAN_LIB == __ENABLE
					  if ( itsdk_lorawan_resetFactoryDefaults(true) != LORAWAN_RETURN_SUCESS ) ret=1;
 8019d28:	2001      	movs	r0, #1
 8019d2a:	f002 f969 	bl	801c000 <itsdk_lorawan_resetFactoryDefaults>
 8019d2e:	1e03      	subs	r3, r0, #0
 8019d30:	d003      	beq.n	8019d3a <_itsdk_secStore_consolePriv+0xe2>
 8019d32:	2337      	movs	r3, #55	; 0x37
 8019d34:	18fb      	adds	r3, r7, r3
 8019d36:	2201      	movs	r2, #1
 8019d38:	701a      	strb	r2, [r3, #0]
					#endif
					if ( ret == 0 ) {
 8019d3a:	2337      	movs	r3, #55	; 0x37
 8019d3c:	18fb      	adds	r3, r7, r3
 8019d3e:	781b      	ldrb	r3, [r3, #0]
 8019d40:	2b00      	cmp	r3, #0
 8019d42:	d105      	bne.n	8019d50 <_itsdk_secStore_consolePriv+0xf8>
					  _itsdk_console_printf("OK\r\n");
 8019d44:	4bad      	ldr	r3, [pc, #692]	; (8019ffc <_itsdk_secStore_consolePriv+0x3a4>)
 8019d46:	0018      	movs	r0, r3
 8019d48:	f7fe fcd2 	bl	80186f0 <_itsdk_console_printf>
					  return ITSDK_CONSOLE_SUCCES;
 8019d4c:	2300      	movs	r3, #0
 8019d4e:	e160      	b.n	801a012 <_itsdk_secStore_consolePriv+0x3ba>
				    } else {
					  _itsdk_console_printf("KO\r\n");
 8019d50:	4bab      	ldr	r3, [pc, #684]	; (801a000 <_itsdk_secStore_consolePriv+0x3a8>)
 8019d52:	0018      	movs	r0, r3
 8019d54:	f7fe fccc 	bl	80186f0 <_itsdk_console_printf>
					  return ITSDK_CONSOLE_FAILED;
 8019d58:	2302      	movs	r3, #2
 8019d5a:	e15a      	b.n	801a012 <_itsdk_secStore_consolePriv+0x3ba>
				  }
				break;
			 #endif
			 #if defined(ITSDK_WITH_LORAWAN_LIB) && ITSDK_WITH_LORAWAN_LIB == __ENABLE
			  case 'Z':
				  if ( itsdk_lorawan_resetFactoryDefaults(true) == LORAWAN_RETURN_SUCESS ) {
 8019d5c:	2001      	movs	r0, #1
 8019d5e:	f002 f94f 	bl	801c000 <itsdk_lorawan_resetFactoryDefaults>
 8019d62:	1e03      	subs	r3, r0, #0
 8019d64:	d105      	bne.n	8019d72 <_itsdk_secStore_consolePriv+0x11a>
					  _itsdk_console_printf("OK\r\n");
 8019d66:	4ba5      	ldr	r3, [pc, #660]	; (8019ffc <_itsdk_secStore_consolePriv+0x3a4>)
 8019d68:	0018      	movs	r0, r3
 8019d6a:	f7fe fcc1 	bl	80186f0 <_itsdk_console_printf>
					  return ITSDK_CONSOLE_SUCCES;
 8019d6e:	2300      	movs	r3, #0
 8019d70:	e14f      	b.n	801a012 <_itsdk_secStore_consolePriv+0x3ba>
				  } else {
					  _itsdk_console_printf("KO\r\n");
 8019d72:	4ba3      	ldr	r3, [pc, #652]	; (801a000 <_itsdk_secStore_consolePriv+0x3a8>)
 8019d74:	0018      	movs	r0, r3
 8019d76:	f7fe fcbb 	bl	80186f0 <_itsdk_console_printf>
					  return ITSDK_CONSOLE_FAILED;
 8019d7a:	2302      	movs	r3, #2
 8019d7c:	e149      	b.n	801a012 <_itsdk_secStore_consolePriv+0x3ba>
				  }
              #endif
              #if (ITSDK_LORAWAN_ACTTYPE == __LORAWAN_ACTIVATION_STATIC && ITSDK_LORAWAN_ACTIVATION == __LORAWAN_OTAA )  || ITSDK_LORAWAN_ACTTYPE == __LORAWAN_ACTIVATION_DYNAMIC
			  case '9':
				  // ITSDK_SS_LORA_OTAA_DEVEUIAPPEUI
				  if ( itsdk_secstore_readBlock(ITSDK_SS_LORA_OTAA_DEVEUIAPPEUI, b) == SS_SUCCESS ) {
 8019d7e:	230c      	movs	r3, #12
 8019d80:	18fb      	adds	r3, r7, r3
 8019d82:	0019      	movs	r1, r3
 8019d84:	2007      	movs	r0, #7
 8019d86:	f7ff fc53 	bl	8019630 <itsdk_secstore_readBlock>
 8019d8a:	1e03      	subs	r3, r0, #0
 8019d8c:	d119      	bne.n	8019dc2 <_itsdk_secStore_consolePriv+0x16a>
					  __console_print_hex(b,0,8);
 8019d8e:	2300      	movs	r3, #0
 8019d90:	633b      	str	r3, [r7, #48]	; 0x30
 8019d92:	e00d      	b.n	8019db0 <_itsdk_secStore_consolePriv+0x158>
 8019d94:	230c      	movs	r3, #12
 8019d96:	18fa      	adds	r2, r7, r3
 8019d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019d9a:	18d3      	adds	r3, r2, r3
 8019d9c:	781b      	ldrb	r3, [r3, #0]
 8019d9e:	001a      	movs	r2, r3
 8019da0:	4b98      	ldr	r3, [pc, #608]	; (801a004 <_itsdk_secStore_consolePriv+0x3ac>)
 8019da2:	0011      	movs	r1, r2
 8019da4:	0018      	movs	r0, r3
 8019da6:	f7fe fca3 	bl	80186f0 <_itsdk_console_printf>
 8019daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019dac:	3301      	adds	r3, #1
 8019dae:	633b      	str	r3, [r7, #48]	; 0x30
 8019db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019db2:	2b07      	cmp	r3, #7
 8019db4:	ddee      	ble.n	8019d94 <_itsdk_secStore_consolePriv+0x13c>
 8019db6:	4b94      	ldr	r3, [pc, #592]	; (801a008 <_itsdk_secStore_consolePriv+0x3b0>)
 8019db8:	0018      	movs	r0, r3
 8019dba:	f7fe fc99 	bl	80186f0 <_itsdk_console_printf>
					  return ITSDK_CONSOLE_SUCCES;
 8019dbe:	2300      	movs	r3, #0
 8019dc0:	e127      	b.n	801a012 <_itsdk_secStore_consolePriv+0x3ba>
				  } else {
					  _itsdk_console_printf("KO\r\n");
 8019dc2:	4b8f      	ldr	r3, [pc, #572]	; (801a000 <_itsdk_secStore_consolePriv+0x3a8>)
 8019dc4:	0018      	movs	r0, r3
 8019dc6:	f7fe fc93 	bl	80186f0 <_itsdk_console_printf>
					  return ITSDK_CONSOLE_FAILED;
 8019dca:	2302      	movs	r3, #2
 8019dcc:	e121      	b.n	801a012 <_itsdk_secStore_consolePriv+0x3ba>
				  }
			  case 'A':
			  case 'a':
				  // ITSDK_SS_LORA_OTAA_DEVEUIAPPEUI
				  if ( itsdk_secstore_readBlock(ITSDK_SS_LORA_OTAA_DEVEUIAPPEUI, b) == SS_SUCCESS ) {
 8019dce:	230c      	movs	r3, #12
 8019dd0:	18fb      	adds	r3, r7, r3
 8019dd2:	0019      	movs	r1, r3
 8019dd4:	2007      	movs	r0, #7
 8019dd6:	f7ff fc2b 	bl	8019630 <itsdk_secstore_readBlock>
 8019dda:	1e03      	subs	r3, r0, #0
 8019ddc:	d119      	bne.n	8019e12 <_itsdk_secStore_consolePriv+0x1ba>
					  __console_print_hex(b,8,8);
 8019dde:	2308      	movs	r3, #8
 8019de0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019de2:	e00d      	b.n	8019e00 <_itsdk_secStore_consolePriv+0x1a8>
 8019de4:	230c      	movs	r3, #12
 8019de6:	18fa      	adds	r2, r7, r3
 8019de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019dea:	18d3      	adds	r3, r2, r3
 8019dec:	781b      	ldrb	r3, [r3, #0]
 8019dee:	001a      	movs	r2, r3
 8019df0:	4b84      	ldr	r3, [pc, #528]	; (801a004 <_itsdk_secStore_consolePriv+0x3ac>)
 8019df2:	0011      	movs	r1, r2
 8019df4:	0018      	movs	r0, r3
 8019df6:	f7fe fc7b 	bl	80186f0 <_itsdk_console_printf>
 8019dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019dfc:	3301      	adds	r3, #1
 8019dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e02:	2b0f      	cmp	r3, #15
 8019e04:	ddee      	ble.n	8019de4 <_itsdk_secStore_consolePriv+0x18c>
 8019e06:	4b80      	ldr	r3, [pc, #512]	; (801a008 <_itsdk_secStore_consolePriv+0x3b0>)
 8019e08:	0018      	movs	r0, r3
 8019e0a:	f7fe fc71 	bl	80186f0 <_itsdk_console_printf>
					  return ITSDK_CONSOLE_SUCCES;
 8019e0e:	2300      	movs	r3, #0
 8019e10:	e0ff      	b.n	801a012 <_itsdk_secStore_consolePriv+0x3ba>
				  } else {
					  _itsdk_console_printf("KO\r\n");
 8019e12:	4b7b      	ldr	r3, [pc, #492]	; (801a000 <_itsdk_secStore_consolePriv+0x3a8>)
 8019e14:	0018      	movs	r0, r3
 8019e16:	f7fe fc6b 	bl	80186f0 <_itsdk_console_printf>
					  return ITSDK_CONSOLE_FAILED;
 8019e1a:	2302      	movs	r3, #2
 8019e1c:	e0f9      	b.n	801a012 <_itsdk_secStore_consolePriv+0x3ba>
				  return ITSDK_CONSOLE_SUCCES;
			  #endif
			  default:
				  break;
			}
		}
 8019e1e:	46c0      	nop			; (mov r8, r8)
 8019e20:	e000      	b.n	8019e24 <_itsdk_secStore_consolePriv+0x1cc>
				  break;
 8019e22:	46c0      	nop			; (mov r8, r8)
		// WRITE CASE
		if ( buffer[0] == 'S' && buffer[1] == 'S' && buffer[2] == ':' && buffer[4] == ':' ) {
 8019e24:	687b      	ldr	r3, [r7, #4]
 8019e26:	781b      	ldrb	r3, [r3, #0]
 8019e28:	2b53      	cmp	r3, #83	; 0x53
 8019e2a:	d000      	beq.n	8019e2e <_itsdk_secStore_consolePriv+0x1d6>
 8019e2c:	e0f0      	b.n	801a010 <_itsdk_secStore_consolePriv+0x3b8>
 8019e2e:	687b      	ldr	r3, [r7, #4]
 8019e30:	3301      	adds	r3, #1
 8019e32:	781b      	ldrb	r3, [r3, #0]
 8019e34:	2b53      	cmp	r3, #83	; 0x53
 8019e36:	d000      	beq.n	8019e3a <_itsdk_secStore_consolePriv+0x1e2>
 8019e38:	e0ea      	b.n	801a010 <_itsdk_secStore_consolePriv+0x3b8>
 8019e3a:	687b      	ldr	r3, [r7, #4]
 8019e3c:	3302      	adds	r3, #2
 8019e3e:	781b      	ldrb	r3, [r3, #0]
 8019e40:	2b3a      	cmp	r3, #58	; 0x3a
 8019e42:	d000      	beq.n	8019e46 <_itsdk_secStore_consolePriv+0x1ee>
 8019e44:	e0e4      	b.n	801a010 <_itsdk_secStore_consolePriv+0x3b8>
 8019e46:	687b      	ldr	r3, [r7, #4]
 8019e48:	3304      	adds	r3, #4
 8019e4a:	781b      	ldrb	r3, [r3, #0]
 8019e4c:	2b3a      	cmp	r3, #58	; 0x3a
 8019e4e:	d000      	beq.n	8019e52 <_itsdk_secStore_consolePriv+0x1fa>
 8019e50:	e0de      	b.n	801a010 <_itsdk_secStore_consolePriv+0x3b8>
			int ssz = sz-5;
 8019e52:	1cfb      	adds	r3, r7, #3
 8019e54:	781b      	ldrb	r3, [r3, #0]
 8019e56:	3b05      	subs	r3, #5
 8019e58:	61fb      	str	r3, [r7, #28]
			switch(buffer[3]) {
 8019e5a:	687b      	ldr	r3, [r7, #4]
 8019e5c:	3303      	adds	r3, #3
 8019e5e:	781b      	ldrb	r3, [r3, #0]
 8019e60:	3b30      	subs	r3, #48	; 0x30
 8019e62:	2b34      	cmp	r3, #52	; 0x34
 8019e64:	d900      	bls.n	8019e68 <_itsdk_secStore_consolePriv+0x210>
 8019e66:	e0d3      	b.n	801a010 <_itsdk_secStore_consolePriv+0x3b8>
 8019e68:	009a      	lsls	r2, r3, #2
 8019e6a:	4b68      	ldr	r3, [pc, #416]	; (801a00c <_itsdk_secStore_consolePriv+0x3b4>)
 8019e6c:	18d3      	adds	r3, r2, r3
 8019e6e:	681b      	ldr	r3, [r3, #0]
 8019e70:	469f      	mov	pc, r3
			case '0':
				// DYNKEY
				if ( __checkAndConvert(buffer,5,sz,12,b) ) {
 8019e72:	1cfb      	adds	r3, r7, #3
 8019e74:	781a      	ldrb	r2, [r3, #0]
 8019e76:	6878      	ldr	r0, [r7, #4]
 8019e78:	230c      	movs	r3, #12
 8019e7a:	18fb      	adds	r3, r7, r3
 8019e7c:	9300      	str	r3, [sp, #0]
 8019e7e:	230c      	movs	r3, #12
 8019e80:	2105      	movs	r1, #5
 8019e82:	f7ff fdd7 	bl	8019a34 <__checkAndConvert>
 8019e86:	1e03      	subs	r3, r0, #0
 8019e88:	d006      	beq.n	8019e98 <_itsdk_secStore_consolePriv+0x240>
					return _itsk_secstore_rekey(b);
 8019e8a:	230c      	movs	r3, #12
 8019e8c:	18fb      	adds	r3, r7, r3
 8019e8e:	0018      	movs	r0, r3
 8019e90:	f7ff fd2a 	bl	80198e8 <_itsk_secstore_rekey>
 8019e94:	0003      	movs	r3, r0
 8019e96:	e0bc      	b.n	801a012 <_itsdk_secStore_consolePriv+0x3ba>
				} else {
					_itsdk_console_printf("KO\r\n");
 8019e98:	4b59      	ldr	r3, [pc, #356]	; (801a000 <_itsdk_secStore_consolePriv+0x3a8>)
 8019e9a:	0018      	movs	r0, r3
 8019e9c:	f7fe fc28 	bl	80186f0 <_itsdk_console_printf>
					return ITSDK_CONSOLE_FAILED;
 8019ea0:	2302      	movs	r3, #2
 8019ea2:	e0b6      	b.n	801a012 <_itsdk_secStore_consolePriv+0x3ba>
				}
			case '1':
				// ITSDK_SS_CONSOLEKEY
				if ( ssz > 15 ) {
 8019ea4:	69fb      	ldr	r3, [r7, #28]
 8019ea6:	2b0f      	cmp	r3, #15
 8019ea8:	dd05      	ble.n	8019eb6 <_itsdk_secStore_consolePriv+0x25e>
					  _itsdk_console_printf("KO\r\n");
 8019eaa:	4b55      	ldr	r3, [pc, #340]	; (801a000 <_itsdk_secStore_consolePriv+0x3a8>)
 8019eac:	0018      	movs	r0, r3
 8019eae:	f7fe fc1f 	bl	80186f0 <_itsdk_console_printf>
					  return ITSDK_CONSOLE_FAILED;
 8019eb2:	2302      	movs	r3, #2
 8019eb4:	e0ad      	b.n	801a012 <_itsdk_secStore_consolePriv+0x3ba>
				}
				for ( int i = 0 ; i < ssz ; i++) {
 8019eb6:	2300      	movs	r3, #0
 8019eb8:	62bb      	str	r3, [r7, #40]	; 0x28
 8019eba:	e00d      	b.n	8019ed8 <_itsdk_secStore_consolePriv+0x280>
					b[i] = buffer[i+5];
 8019ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019ebe:	3305      	adds	r3, #5
 8019ec0:	687a      	ldr	r2, [r7, #4]
 8019ec2:	18d3      	adds	r3, r2, r3
 8019ec4:	7819      	ldrb	r1, [r3, #0]
 8019ec6:	230c      	movs	r3, #12
 8019ec8:	18fa      	adds	r2, r7, r3
 8019eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019ecc:	18d3      	adds	r3, r2, r3
 8019ece:	1c0a      	adds	r2, r1, #0
 8019ed0:	701a      	strb	r2, [r3, #0]
				for ( int i = 0 ; i < ssz ; i++) {
 8019ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019ed4:	3301      	adds	r3, #1
 8019ed6:	62bb      	str	r3, [r7, #40]	; 0x28
 8019ed8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019eda:	69fb      	ldr	r3, [r7, #28]
 8019edc:	429a      	cmp	r2, r3
 8019ede:	dbed      	blt.n	8019ebc <_itsdk_secStore_consolePriv+0x264>
				}
				for ( int i = ssz ; i < ITSDK_SECSTORE_BLOCKSZ ; i++) {
 8019ee0:	69fb      	ldr	r3, [r7, #28]
 8019ee2:	627b      	str	r3, [r7, #36]	; 0x24
 8019ee4:	e008      	b.n	8019ef8 <_itsdk_secStore_consolePriv+0x2a0>
					b[i] = 0;
 8019ee6:	230c      	movs	r3, #12
 8019ee8:	18fa      	adds	r2, r7, r3
 8019eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019eec:	18d3      	adds	r3, r2, r3
 8019eee:	2200      	movs	r2, #0
 8019ef0:	701a      	strb	r2, [r3, #0]
				for ( int i = ssz ; i < ITSDK_SECSTORE_BLOCKSZ ; i++) {
 8019ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ef4:	3301      	adds	r3, #1
 8019ef6:	627b      	str	r3, [r7, #36]	; 0x24
 8019ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019efa:	2b0f      	cmp	r3, #15
 8019efc:	ddf3      	ble.n	8019ee6 <_itsdk_secStore_consolePriv+0x28e>
				}
				if ( itsdk_secstore_writeBlock(ITSDK_SS_CONSOLEKEY, b) == SS_SUCCESS ) {
 8019efe:	230c      	movs	r3, #12
 8019f00:	18fb      	adds	r3, r7, r3
 8019f02:	0019      	movs	r1, r3
 8019f04:	2000      	movs	r0, #0
 8019f06:	f7ff fbe0 	bl	80196ca <itsdk_secstore_writeBlock>
 8019f0a:	1e03      	subs	r3, r0, #0
 8019f0c:	d105      	bne.n	8019f1a <_itsdk_secStore_consolePriv+0x2c2>
					_itsdk_console_printf("OK\r\n");
 8019f0e:	4b3b      	ldr	r3, [pc, #236]	; (8019ffc <_itsdk_secStore_consolePriv+0x3a4>)
 8019f10:	0018      	movs	r0, r3
 8019f12:	f7fe fbed 	bl	80186f0 <_itsdk_console_printf>
					return ITSDK_CONSOLE_SUCCES;
 8019f16:	2300      	movs	r3, #0
 8019f18:	e07b      	b.n	801a012 <_itsdk_secStore_consolePriv+0x3ba>
				} else {
					_itsdk_console_printf("KO\r\n");
 8019f1a:	4b39      	ldr	r3, [pc, #228]	; (801a000 <_itsdk_secStore_consolePriv+0x3a8>)
 8019f1c:	0018      	movs	r0, r3
 8019f1e:	f7fe fbe7 	bl	80186f0 <_itsdk_console_printf>
					return ITSDK_CONSOLE_FAILED;
 8019f22:	2302      	movs	r3, #2
 8019f24:	e075      	b.n	801a012 <_itsdk_secStore_consolePriv+0x3ba>
				return __updateField(buffer, sz, b, ITSDK_SS_LORA_ABP_APPSKEY);
		#endif
		#if (ITSDK_LORAWAN_ACTTYPE == __LORAWAN_ACTIVATION_STATIC && ITSDK_LORAWAN_ACTIVATION == __LORAWAN_OTAA )  || ITSDK_LORAWAN_ACTTYPE == __LORAWAN_ACTIVATION_DYNAMIC
			case '9':
				// ITSDK_SS_LORA_OTAA_DEVEUIAPPEUI
				return __updateField2(buffer,sz,b,ITSDK_SS_LORA_OTAA_DEVEUIAPPEUI,0,8);
 8019f26:	230c      	movs	r3, #12
 8019f28:	18fa      	adds	r2, r7, r3
 8019f2a:	1cfb      	adds	r3, r7, #3
 8019f2c:	7819      	ldrb	r1, [r3, #0]
 8019f2e:	6878      	ldr	r0, [r7, #4]
 8019f30:	2308      	movs	r3, #8
 8019f32:	9301      	str	r3, [sp, #4]
 8019f34:	2300      	movs	r3, #0
 8019f36:	9300      	str	r3, [sp, #0]
 8019f38:	2307      	movs	r3, #7
 8019f3a:	f7ff fe19 	bl	8019b70 <__updateField2>
 8019f3e:	0003      	movs	r3, r0
 8019f40:	e067      	b.n	801a012 <_itsdk_secStore_consolePriv+0x3ba>
			case 'a':
			case 'A':
				// ITSDK_SS_LORA_OTAA_DEVEUIAPPEUI
				return __updateField2(buffer,sz,b,ITSDK_SS_LORA_OTAA_DEVEUIAPPEUI,8,8);
 8019f42:	230c      	movs	r3, #12
 8019f44:	18fa      	adds	r2, r7, r3
 8019f46:	1cfb      	adds	r3, r7, #3
 8019f48:	7819      	ldrb	r1, [r3, #0]
 8019f4a:	6878      	ldr	r0, [r7, #4]
 8019f4c:	2308      	movs	r3, #8
 8019f4e:	9301      	str	r3, [sp, #4]
 8019f50:	2308      	movs	r3, #8
 8019f52:	9300      	str	r3, [sp, #0]
 8019f54:	2307      	movs	r3, #7
 8019f56:	f7ff fe0b 	bl	8019b70 <__updateField2>
 8019f5a:	0003      	movs	r3, r0
 8019f5c:	e059      	b.n	801a012 <_itsdk_secStore_consolePriv+0x3ba>
			case 'b':
			case 'B':
				// ITSDK_SS_LORA_OTAA_APPKEY
				return __updateField(buffer, sz, b, ITSDK_SS_LORA_OTAA_APPKEY);
 8019f5e:	230c      	movs	r3, #12
 8019f60:	18fa      	adds	r2, r7, r3
 8019f62:	1cfb      	adds	r3, r7, #3
 8019f64:	7819      	ldrb	r1, [r3, #0]
 8019f66:	6878      	ldr	r0, [r7, #4]
 8019f68:	2308      	movs	r3, #8
 8019f6a:	f7ff fdb9 	bl	8019ae0 <__updateField>
 8019f6e:	0003      	movs	r3, r0
 8019f70:	e04f      	b.n	801a012 <_itsdk_secStore_consolePriv+0x3ba>
			case 'c':
			case 'C':
				// ITSDK_SS_LORA_OTAA_NWKKEY
				return __updateField(buffer, sz, b, ITSDK_SS_LORA_OTAA_NWKKEY);
 8019f72:	230c      	movs	r3, #12
 8019f74:	18fa      	adds	r2, r7, r3
 8019f76:	1cfb      	adds	r3, r7, #3
 8019f78:	7819      	ldrb	r1, [r3, #0]
 8019f7a:	6878      	ldr	r0, [r7, #4]
 8019f7c:	2309      	movs	r3, #9
 8019f7e:	f7ff fdaf 	bl	8019ae0 <__updateField>
 8019f82:	0003      	movs	r3, r0
 8019f84:	e045      	b.n	801a012 <_itsdk_secStore_consolePriv+0x3ba>
			case 'd':
			case 'D': {
				// ITSDK_SS_LORA_OTAA_APPKEY + ITSDK_SS_LORA_OTAA_NWKKEY
				itsdk_console_return_e ret;
				if ( (ret = __updateField(buffer, sz, b, ITSDK_SS_LORA_OTAA_NWKKEY)) == ITSDK_CONSOLE_SUCCES ) {
 8019f86:	2523      	movs	r5, #35	; 0x23
 8019f88:	197c      	adds	r4, r7, r5
 8019f8a:	230c      	movs	r3, #12
 8019f8c:	18fa      	adds	r2, r7, r3
 8019f8e:	1cfb      	adds	r3, r7, #3
 8019f90:	7819      	ldrb	r1, [r3, #0]
 8019f92:	6878      	ldr	r0, [r7, #4]
 8019f94:	2309      	movs	r3, #9
 8019f96:	f7ff fda3 	bl	8019ae0 <__updateField>
 8019f9a:	0003      	movs	r3, r0
 8019f9c:	7023      	strb	r3, [r4, #0]
 8019f9e:	197b      	adds	r3, r7, r5
 8019fa0:	781b      	ldrb	r3, [r3, #0]
 8019fa2:	2b00      	cmp	r3, #0
 8019fa4:	d10b      	bne.n	8019fbe <_itsdk_secStore_consolePriv+0x366>
					ret = __updateField(buffer, sz, b, ITSDK_SS_LORA_OTAA_APPKEY);
 8019fa6:	2323      	movs	r3, #35	; 0x23
 8019fa8:	18fc      	adds	r4, r7, r3
 8019faa:	230c      	movs	r3, #12
 8019fac:	18fa      	adds	r2, r7, r3
 8019fae:	1cfb      	adds	r3, r7, #3
 8019fb0:	7819      	ldrb	r1, [r3, #0]
 8019fb2:	6878      	ldr	r0, [r7, #4]
 8019fb4:	2308      	movs	r3, #8
 8019fb6:	f7ff fd93 	bl	8019ae0 <__updateField>
 8019fba:	0003      	movs	r3, r0
 8019fbc:	7023      	strb	r3, [r4, #0]
				}
				return ret;
 8019fbe:	2323      	movs	r3, #35	; 0x23
 8019fc0:	18fb      	adds	r3, r7, r3
 8019fc2:	781b      	ldrb	r3, [r3, #0]
 8019fc4:	e025      	b.n	801a012 <_itsdk_secStore_consolePriv+0x3ba>
 8019fc6:	46c0      	nop			; (mov r8, r8)
 8019fc8:	08020068 	.word	0x08020068
 8019fcc:	0802007c 	.word	0x0802007c
 8019fd0:	080200b0 	.word	0x080200b0
 8019fd4:	080200e8 	.word	0x080200e8
 8019fd8:	08020124 	.word	0x08020124
 8019fdc:	08020150 	.word	0x08020150
 8019fe0:	08020180 	.word	0x08020180
 8019fe4:	080201b0 	.word	0x080201b0
 8019fe8:	080201e0 	.word	0x080201e0
 8019fec:	08020210 	.word	0x08020210
 8019ff0:	08020244 	.word	0x08020244
 8019ff4:	08020278 	.word	0x08020278
 8019ff8:	08020fa0 	.word	0x08020fa0
 8019ffc:	08020060 	.word	0x08020060
 801a000:	08020058 	.word	0x08020058
 801a004:	080202ac 	.word	0x080202ac
 801a008:	080202b4 	.word	0x080202b4
 801a00c:	08021044 	.word	0x08021044
				return __updateField(buffer, sz, b, ITSDK_SS_USER7);
	#endif
			} // switch
		} // Write case end
  } //Sz > 4
  return ITSDK_CONSOLE_NOTFOUND;
 801a010:	2301      	movs	r3, #1
}
 801a012:	0018      	movs	r0, r3
 801a014:	46bd      	mov	sp, r7
 801a016:	b00e      	add	sp, #56	; 0x38
 801a018:	bdb0      	pop	{r4, r5, r7, pc}
 801a01a:	46c0      	nop			; (mov r8, r8)

0801a01c <itsdk_secStore_RegisterConsole>:
static itsdk_console_chain_t __console_secStore;

#endif // ITSDK_WITH_CONSOLE

itsdk_secStoreReturn_e itsdk_secStore_RegisterConsole() {
 801a01c:	b580      	push	{r7, lr}
 801a01e:	af00      	add	r7, sp, #0
#if ITSDK_WITH_CONSOLE == __ENABLE
	__console_secStore.console_private = _itsdk_secStore_consolePriv;
 801a020:	4b08      	ldr	r3, [pc, #32]	; (801a044 <itsdk_secStore_RegisterConsole+0x28>)
 801a022:	4a09      	ldr	r2, [pc, #36]	; (801a048 <itsdk_secStore_RegisterConsole+0x2c>)
 801a024:	601a      	str	r2, [r3, #0]
	__console_secStore.console_public = NULL;
 801a026:	4b07      	ldr	r3, [pc, #28]	; (801a044 <itsdk_secStore_RegisterConsole+0x28>)
 801a028:	2200      	movs	r2, #0
 801a02a:	605a      	str	r2, [r3, #4]
	__console_secStore.next = NULL;
 801a02c:	4b05      	ldr	r3, [pc, #20]	; (801a044 <itsdk_secStore_RegisterConsole+0x28>)
 801a02e:	2200      	movs	r2, #0
 801a030:	609a      	str	r2, [r3, #8]
	itsdk_console_registerCommand(&__console_secStore);
 801a032:	4b04      	ldr	r3, [pc, #16]	; (801a044 <itsdk_secStore_RegisterConsole+0x28>)
 801a034:	0018      	movs	r0, r3
 801a036:	f7fe fb73 	bl	8018720 <itsdk_console_registerCommand>
#endif
	return SS_SUCCESS;
 801a03a:	2300      	movs	r3, #0
}
 801a03c:	0018      	movs	r0, r3
 801a03e:	46bd      	mov	sp, r7
 801a040:	bd80      	pop	{r7, pc}
 801a042:	46c0      	nop			; (mov r8, r8)
 801a044:	200011f0 	.word	0x200011f0
 801a048:	08019c59 	.word	0x08019c59

0801a04c <itsdk_aes_ecb_encrypt_128B>:
void itsdk_aes_ecb_encrypt_128B(
		uint8_t	* clearData,			// Data to be encrypted
		uint8_t * encryptedData,		// Can be the same as clearData
		uint8_t   dataLen,				// Size of data to be encrypted
		uint8_t * masterKey				// 128B key used for encryption (hidden with ITSDK_PROTECT_KEY)
) {
 801a04c:	b5b0      	push	{r4, r5, r7, lr}
 801a04e:	b0b8      	sub	sp, #224	; 0xe0
 801a050:	af00      	add	r7, sp, #0
 801a052:	60f8      	str	r0, [r7, #12]
 801a054:	60b9      	str	r1, [r7, #8]
 801a056:	603b      	str	r3, [r7, #0]
 801a058:	1dfb      	adds	r3, r7, #7
 801a05a:	701a      	strb	r2, [r3, #0]
	uint8_t aesResult[16];
	itsdk_encrypt_unCifferKey(masterKey,16);
 801a05c:	683b      	ldr	r3, [r7, #0]
 801a05e:	2110      	movs	r1, #16
 801a060:	0018      	movs	r0, r3
 801a062:	f000 f8cd 	bl	801a200 <itsdk_encrypt_unCifferKey>
	struct AES_ctx ctx;
	memcpy(aesResult,clearData,16);
 801a066:	24d0      	movs	r4, #208	; 0xd0
 801a068:	193a      	adds	r2, r7, r4
 801a06a:	68fb      	ldr	r3, [r7, #12]
 801a06c:	0010      	movs	r0, r2
 801a06e:	0019      	movs	r1, r3
 801a070:	2310      	movs	r3, #16
 801a072:	001a      	movs	r2, r3
 801a074:	f004 f8b6 	bl	801e1e4 <memcpy>
	bzero(ctx.Iv,16);
 801a078:	2510      	movs	r5, #16
 801a07a:	197b      	adds	r3, r7, r5
 801a07c:	33b0      	adds	r3, #176	; 0xb0
 801a07e:	2110      	movs	r1, #16
 801a080:	0018      	movs	r0, r3
 801a082:	f004 f87f 	bl	801e184 <bzero>
	tiny_AES_init_ctx(&ctx,masterKey);
 801a086:	683a      	ldr	r2, [r7, #0]
 801a088:	197b      	adds	r3, r7, r5
 801a08a:	0011      	movs	r1, r2
 801a08c:	0018      	movs	r0, r3
 801a08e:	f000 f9c5 	bl	801a41c <tiny_AES_init_ctx>
	tiny_AES_CBC_encrypt_buffer(&ctx, aesResult, 16);
 801a092:	1939      	adds	r1, r7, r4
 801a094:	197b      	adds	r3, r7, r5
 801a096:	2210      	movs	r2, #16
 801a098:	0018      	movs	r0, r3
 801a09a:	f001 f8d8 	bl	801b24e <tiny_AES_CBC_encrypt_buffer>
	itsdk_encrypt_cifferKey(masterKey,16);
 801a09e:	683b      	ldr	r3, [r7, #0]
 801a0a0:	2110      	movs	r1, #16
 801a0a2:	0018      	movs	r0, r3
 801a0a4:	f000 f856 	bl	801a154 <itsdk_encrypt_cifferKey>
	memcpy(encryptedData,aesResult,16);
 801a0a8:	68ba      	ldr	r2, [r7, #8]
 801a0aa:	193b      	adds	r3, r7, r4
 801a0ac:	0010      	movs	r0, r2
 801a0ae:	0019      	movs	r1, r3
 801a0b0:	2310      	movs	r3, #16
 801a0b2:	001a      	movs	r2, r3
 801a0b4:	f004 f896 	bl	801e1e4 <memcpy>
	bzero(aesResult,16);
 801a0b8:	193b      	adds	r3, r7, r4
 801a0ba:	2110      	movs	r1, #16
 801a0bc:	0018      	movs	r0, r3
 801a0be:	f004 f861 	bl	801e184 <bzero>
	bzero(&ctx,sizeof(struct AES_ctx));
 801a0c2:	197b      	adds	r3, r7, r5
 801a0c4:	21c0      	movs	r1, #192	; 0xc0
 801a0c6:	0018      	movs	r0, r3
 801a0c8:	f004 f85c 	bl	801e184 <bzero>
}
 801a0cc:	46c0      	nop			; (mov r8, r8)
 801a0ce:	46bd      	mov	sp, r7
 801a0d0:	b038      	add	sp, #224	; 0xe0
 801a0d2:	bdb0      	pop	{r4, r5, r7, pc}

0801a0d4 <itsdk_aes_ecb_decrypt_128B>:
void itsdk_aes_ecb_decrypt_128B(
		uint8_t	* clearData,			// Data to be encrypted
		uint8_t * encryptedData,		// Can be the same as clearData
		uint8_t   dataLen,				// Size of data to be encrypted
		uint8_t * masterKey				// 128B key used for encryption (hidden with ITSDK_PROTECT_KEY)
) {
 801a0d4:	b5b0      	push	{r4, r5, r7, lr}
 801a0d6:	b0b8      	sub	sp, #224	; 0xe0
 801a0d8:	af00      	add	r7, sp, #0
 801a0da:	60f8      	str	r0, [r7, #12]
 801a0dc:	60b9      	str	r1, [r7, #8]
 801a0de:	603b      	str	r3, [r7, #0]
 801a0e0:	1dfb      	adds	r3, r7, #7
 801a0e2:	701a      	strb	r2, [r3, #0]
	uint8_t aesResult[16];
	itsdk_encrypt_unCifferKey(masterKey,16);
 801a0e4:	683b      	ldr	r3, [r7, #0]
 801a0e6:	2110      	movs	r1, #16
 801a0e8:	0018      	movs	r0, r3
 801a0ea:	f000 f889 	bl	801a200 <itsdk_encrypt_unCifferKey>
	struct AES_ctx ctx;
	memcpy(aesResult,clearData,16);
 801a0ee:	24d0      	movs	r4, #208	; 0xd0
 801a0f0:	193a      	adds	r2, r7, r4
 801a0f2:	68fb      	ldr	r3, [r7, #12]
 801a0f4:	0010      	movs	r0, r2
 801a0f6:	0019      	movs	r1, r3
 801a0f8:	2310      	movs	r3, #16
 801a0fa:	001a      	movs	r2, r3
 801a0fc:	f004 f872 	bl	801e1e4 <memcpy>
	bzero(ctx.Iv,16);
 801a100:	2510      	movs	r5, #16
 801a102:	197b      	adds	r3, r7, r5
 801a104:	33b0      	adds	r3, #176	; 0xb0
 801a106:	2110      	movs	r1, #16
 801a108:	0018      	movs	r0, r3
 801a10a:	f004 f83b 	bl	801e184 <bzero>
	tiny_AES_init_ctx(&ctx,masterKey);
 801a10e:	683a      	ldr	r2, [r7, #0]
 801a110:	197b      	adds	r3, r7, r5
 801a112:	0011      	movs	r1, r2
 801a114:	0018      	movs	r0, r3
 801a116:	f000 f981 	bl	801a41c <tiny_AES_init_ctx>
	tiny_AES_CBC_decrypt_buffer(&ctx, aesResult, 16);
 801a11a:	1939      	adds	r1, r7, r4
 801a11c:	197b      	adds	r3, r7, r5
 801a11e:	2210      	movs	r2, #16
 801a120:	0018      	movs	r0, r3
 801a122:	f001 f8c3 	bl	801b2ac <tiny_AES_CBC_decrypt_buffer>
	itsdk_encrypt_cifferKey(masterKey,16);
 801a126:	683b      	ldr	r3, [r7, #0]
 801a128:	2110      	movs	r1, #16
 801a12a:	0018      	movs	r0, r3
 801a12c:	f000 f812 	bl	801a154 <itsdk_encrypt_cifferKey>
	memcpy(encryptedData,aesResult,16);
 801a130:	68ba      	ldr	r2, [r7, #8]
 801a132:	193b      	adds	r3, r7, r4
 801a134:	0010      	movs	r0, r2
 801a136:	0019      	movs	r1, r3
 801a138:	2310      	movs	r3, #16
 801a13a:	001a      	movs	r2, r3
 801a13c:	f004 f852 	bl	801e1e4 <memcpy>
	bzero(aesResult,16);
 801a140:	193b      	adds	r3, r7, r4
 801a142:	2110      	movs	r1, #16
 801a144:	0018      	movs	r0, r3
 801a146:	f004 f81d 	bl	801e184 <bzero>
}
 801a14a:	46c0      	nop			; (mov r8, r8)
 801a14c:	46bd      	mov	sp, r7
 801a14e:	b038      	add	sp, #224	; 0xe0
 801a150:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801a154 <itsdk_encrypt_cifferKey>:
/**
 * Protect inMemory key with a simple XOR with a hardcoded
 * 32b value. Not good at all but always better than clear
 * text key in memory.
 */
void itsdk_encrypt_cifferKey(uint8_t * key, int len) {
 801a154:	b580      	push	{r7, lr}
 801a156:	b084      	sub	sp, #16
 801a158:	af00      	add	r7, sp, #0
 801a15a:	6078      	str	r0, [r7, #4]
 801a15c:	6039      	str	r1, [r7, #0]

	if ( (len & 3 ) > 0 ) {
 801a15e:	683b      	ldr	r3, [r7, #0]
 801a160:	2203      	movs	r2, #3
 801a162:	4013      	ands	r3, r2
 801a164:	2b00      	cmp	r3, #0
 801a166:	dd06      	ble.n	801a176 <itsdk_encrypt_cifferKey+0x22>
		ITSDK_ERROR_REPORT(ITSDK_ERROR_ENCRYP_INVALID_DATALEN,(uint16_t)len);
 801a168:	683b      	ldr	r3, [r7, #0]
 801a16a:	b29b      	uxth	r3, r3
 801a16c:	4a23      	ldr	r2, [pc, #140]	; (801a1fc <itsdk_encrypt_cifferKey+0xa8>)
 801a16e:	0019      	movs	r1, r3
 801a170:	0010      	movs	r0, r2
 801a172:	f001 f977 	bl	801b464 <itsdk_error_report>
	}
	for ( int i = 0 ; i < len ; i+=4 ) {
 801a176:	2300      	movs	r3, #0
 801a178:	60fb      	str	r3, [r7, #12]
 801a17a:	e037      	b.n	801a1ec <itsdk_encrypt_cifferKey+0x98>
		key[i]   ^= (ITSDK_PROTECT_KEY & 0xFF000000) >> 24;
 801a17c:	68fb      	ldr	r3, [r7, #12]
 801a17e:	687a      	ldr	r2, [r7, #4]
 801a180:	18d3      	adds	r3, r2, r3
 801a182:	781a      	ldrb	r2, [r3, #0]
 801a184:	68fb      	ldr	r3, [r7, #12]
 801a186:	6879      	ldr	r1, [r7, #4]
 801a188:	18cb      	adds	r3, r1, r3
 801a18a:	2159      	movs	r1, #89	; 0x59
 801a18c:	4249      	negs	r1, r1
 801a18e:	404a      	eors	r2, r1
 801a190:	b2d2      	uxtb	r2, r2
 801a192:	701a      	strb	r2, [r3, #0]
		key[i+1] ^= (ITSDK_PROTECT_KEY & 0x00FF0000) >> 16;
 801a194:	68fb      	ldr	r3, [r7, #12]
 801a196:	3301      	adds	r3, #1
 801a198:	687a      	ldr	r2, [r7, #4]
 801a19a:	18d3      	adds	r3, r2, r3
 801a19c:	781a      	ldrb	r2, [r3, #0]
 801a19e:	68fb      	ldr	r3, [r7, #12]
 801a1a0:	3301      	adds	r3, #1
 801a1a2:	6879      	ldr	r1, [r7, #4]
 801a1a4:	18cb      	adds	r3, r1, r3
 801a1a6:	2145      	movs	r1, #69	; 0x45
 801a1a8:	404a      	eors	r2, r1
 801a1aa:	b2d2      	uxtb	r2, r2
 801a1ac:	701a      	strb	r2, [r3, #0]
		key[i+2] ^= (ITSDK_PROTECT_KEY & 0x0000FF00) >> 8;
 801a1ae:	68fb      	ldr	r3, [r7, #12]
 801a1b0:	3302      	adds	r3, #2
 801a1b2:	687a      	ldr	r2, [r7, #4]
 801a1b4:	18d3      	adds	r3, r2, r3
 801a1b6:	781a      	ldrb	r2, [r3, #0]
 801a1b8:	68fb      	ldr	r3, [r7, #12]
 801a1ba:	3302      	adds	r3, #2
 801a1bc:	6879      	ldr	r1, [r7, #4]
 801a1be:	18cb      	adds	r3, r1, r3
 801a1c0:	2165      	movs	r1, #101	; 0x65
 801a1c2:	4249      	negs	r1, r1
 801a1c4:	404a      	eors	r2, r1
 801a1c6:	b2d2      	uxtb	r2, r2
 801a1c8:	701a      	strb	r2, [r3, #0]
		key[i+3] ^= (ITSDK_PROTECT_KEY & 0x000000FF);
 801a1ca:	68fb      	ldr	r3, [r7, #12]
 801a1cc:	3303      	adds	r3, #3
 801a1ce:	687a      	ldr	r2, [r7, #4]
 801a1d0:	18d3      	adds	r3, r2, r3
 801a1d2:	781a      	ldrb	r2, [r3, #0]
 801a1d4:	68fb      	ldr	r3, [r7, #12]
 801a1d6:	3303      	adds	r3, #3
 801a1d8:	6879      	ldr	r1, [r7, #4]
 801a1da:	18cb      	adds	r3, r1, r3
 801a1dc:	213d      	movs	r1, #61	; 0x3d
 801a1de:	4249      	negs	r1, r1
 801a1e0:	404a      	eors	r2, r1
 801a1e2:	b2d2      	uxtb	r2, r2
 801a1e4:	701a      	strb	r2, [r3, #0]
	for ( int i = 0 ; i < len ; i+=4 ) {
 801a1e6:	68fb      	ldr	r3, [r7, #12]
 801a1e8:	3304      	adds	r3, #4
 801a1ea:	60fb      	str	r3, [r7, #12]
 801a1ec:	68fa      	ldr	r2, [r7, #12]
 801a1ee:	683b      	ldr	r3, [r7, #0]
 801a1f0:	429a      	cmp	r2, r3
 801a1f2:	dbc3      	blt.n	801a17c <itsdk_encrypt_cifferKey+0x28>
	}
}
 801a1f4:	46c0      	nop			; (mov r8, r8)
 801a1f6:	46bd      	mov	sp, r7
 801a1f8:	b004      	add	sp, #16
 801a1fa:	bd80      	pop	{r7, pc}
 801a1fc:	d0000020 	.word	0xd0000020

0801a200 <itsdk_encrypt_unCifferKey>:

/**
 * Un protect inMemory key.
 */
void itsdk_encrypt_unCifferKey(uint8_t * key, int len) {
 801a200:	b580      	push	{r7, lr}
 801a202:	b082      	sub	sp, #8
 801a204:	af00      	add	r7, sp, #0
 801a206:	6078      	str	r0, [r7, #4]
 801a208:	6039      	str	r1, [r7, #0]
	itsdk_encrypt_cifferKey(key,len);
 801a20a:	683a      	ldr	r2, [r7, #0]
 801a20c:	687b      	ldr	r3, [r7, #4]
 801a20e:	0011      	movs	r1, r2
 801a210:	0018      	movs	r0, r3
 801a212:	f7ff ff9f 	bl	801a154 <itsdk_encrypt_cifferKey>
}
 801a216:	46c0      	nop			; (mov r8, r8)
 801a218:	46bd      	mov	sp, r7
 801a21a:	b002      	add	sp, #8
 801a21c:	bd80      	pop	{r7, pc}

0801a21e <itsdk_encrypt_resetFactoryDefaults>:
	}
	bzero(buffer,16);
	return ENCRYPT_RETURN_SUCESS;
}
#else
itsdk_encrypt_return_t itsdk_encrypt_resetFactoryDefaults(itsdk_bool_e force) {
 801a21e:	b580      	push	{r7, lr}
 801a220:	b082      	sub	sp, #8
 801a222:	af00      	add	r7, sp, #0
 801a224:	0002      	movs	r2, r0
 801a226:	1dfb      	adds	r3, r7, #7
 801a228:	701a      	strb	r2, [r3, #0]
	return ENCRYPT_RETURN_SUCESS;
 801a22a:	2300      	movs	r3, #0
}
 801a22c:	0018      	movs	r0, r3
 801a22e:	46bd      	mov	sp, r7
 801a230:	b002      	add	sp, #8
 801a232:	bd80      	pop	{r7, pc}

0801a234 <KeyExpansion>:
*/
#define getSBoxInvert(num) (rsbox[(num)])

// This function produces Nb(Nr+1) round keys. The round keys are used in each round to decrypt the states.
static void KeyExpansion(uint8_t* RoundKey, const uint8_t* Key)
{
 801a234:	b590      	push	{r4, r7, lr}
 801a236:	b089      	sub	sp, #36	; 0x24
 801a238:	af00      	add	r7, sp, #0
 801a23a:	6078      	str	r0, [r7, #4]
 801a23c:	6039      	str	r1, [r7, #0]
  unsigned i, j, k;
  uint8_t tempa[4]; // Used for the column/row operations

  // The first round key is the key itself.
  for (i = 0; i < Nk; ++i)
 801a23e:	2300      	movs	r3, #0
 801a240:	61fb      	str	r3, [r7, #28]
 801a242:	e030      	b.n	801a2a6 <KeyExpansion+0x72>
  {
    RoundKey[(i * 4) + 0] = Key[(i * 4) + 0];
 801a244:	69fb      	ldr	r3, [r7, #28]
 801a246:	009b      	lsls	r3, r3, #2
 801a248:	683a      	ldr	r2, [r7, #0]
 801a24a:	18d2      	adds	r2, r2, r3
 801a24c:	69fb      	ldr	r3, [r7, #28]
 801a24e:	009b      	lsls	r3, r3, #2
 801a250:	6879      	ldr	r1, [r7, #4]
 801a252:	18cb      	adds	r3, r1, r3
 801a254:	7812      	ldrb	r2, [r2, #0]
 801a256:	701a      	strb	r2, [r3, #0]
    RoundKey[(i * 4) + 1] = Key[(i * 4) + 1];
 801a258:	69fb      	ldr	r3, [r7, #28]
 801a25a:	009b      	lsls	r3, r3, #2
 801a25c:	3301      	adds	r3, #1
 801a25e:	683a      	ldr	r2, [r7, #0]
 801a260:	18d2      	adds	r2, r2, r3
 801a262:	69fb      	ldr	r3, [r7, #28]
 801a264:	009b      	lsls	r3, r3, #2
 801a266:	3301      	adds	r3, #1
 801a268:	6879      	ldr	r1, [r7, #4]
 801a26a:	18cb      	adds	r3, r1, r3
 801a26c:	7812      	ldrb	r2, [r2, #0]
 801a26e:	701a      	strb	r2, [r3, #0]
    RoundKey[(i * 4) + 2] = Key[(i * 4) + 2];
 801a270:	69fb      	ldr	r3, [r7, #28]
 801a272:	009b      	lsls	r3, r3, #2
 801a274:	3302      	adds	r3, #2
 801a276:	683a      	ldr	r2, [r7, #0]
 801a278:	18d2      	adds	r2, r2, r3
 801a27a:	69fb      	ldr	r3, [r7, #28]
 801a27c:	009b      	lsls	r3, r3, #2
 801a27e:	3302      	adds	r3, #2
 801a280:	6879      	ldr	r1, [r7, #4]
 801a282:	18cb      	adds	r3, r1, r3
 801a284:	7812      	ldrb	r2, [r2, #0]
 801a286:	701a      	strb	r2, [r3, #0]
    RoundKey[(i * 4) + 3] = Key[(i * 4) + 3];
 801a288:	69fb      	ldr	r3, [r7, #28]
 801a28a:	009b      	lsls	r3, r3, #2
 801a28c:	3303      	adds	r3, #3
 801a28e:	683a      	ldr	r2, [r7, #0]
 801a290:	18d2      	adds	r2, r2, r3
 801a292:	69fb      	ldr	r3, [r7, #28]
 801a294:	009b      	lsls	r3, r3, #2
 801a296:	3303      	adds	r3, #3
 801a298:	6879      	ldr	r1, [r7, #4]
 801a29a:	18cb      	adds	r3, r1, r3
 801a29c:	7812      	ldrb	r2, [r2, #0]
 801a29e:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < Nk; ++i)
 801a2a0:	69fb      	ldr	r3, [r7, #28]
 801a2a2:	3301      	adds	r3, #1
 801a2a4:	61fb      	str	r3, [r7, #28]
 801a2a6:	69fb      	ldr	r3, [r7, #28]
 801a2a8:	2b03      	cmp	r3, #3
 801a2aa:	d9cb      	bls.n	801a244 <KeyExpansion+0x10>
  }

  // All other round keys are found from the previous round keys.
  for (i = Nk; i < Nb * (Nr + 1); ++i)
 801a2ac:	2304      	movs	r3, #4
 801a2ae:	61fb      	str	r3, [r7, #28]
 801a2b0:	e0a4      	b.n	801a3fc <KeyExpansion+0x1c8>
  {
    {
      k = (i - 1) * 4;
 801a2b2:	69fb      	ldr	r3, [r7, #28]
 801a2b4:	4a55      	ldr	r2, [pc, #340]	; (801a40c <KeyExpansion+0x1d8>)
 801a2b6:	4694      	mov	ip, r2
 801a2b8:	4463      	add	r3, ip
 801a2ba:	009b      	lsls	r3, r3, #2
 801a2bc:	61bb      	str	r3, [r7, #24]
      tempa[0]=RoundKey[k + 0];
 801a2be:	687a      	ldr	r2, [r7, #4]
 801a2c0:	69bb      	ldr	r3, [r7, #24]
 801a2c2:	18d3      	adds	r3, r2, r3
 801a2c4:	781a      	ldrb	r2, [r3, #0]
 801a2c6:	210c      	movs	r1, #12
 801a2c8:	187b      	adds	r3, r7, r1
 801a2ca:	701a      	strb	r2, [r3, #0]
      tempa[1]=RoundKey[k + 1];
 801a2cc:	69bb      	ldr	r3, [r7, #24]
 801a2ce:	3301      	adds	r3, #1
 801a2d0:	687a      	ldr	r2, [r7, #4]
 801a2d2:	18d3      	adds	r3, r2, r3
 801a2d4:	781a      	ldrb	r2, [r3, #0]
 801a2d6:	187b      	adds	r3, r7, r1
 801a2d8:	705a      	strb	r2, [r3, #1]
      tempa[2]=RoundKey[k + 2];
 801a2da:	69bb      	ldr	r3, [r7, #24]
 801a2dc:	3302      	adds	r3, #2
 801a2de:	687a      	ldr	r2, [r7, #4]
 801a2e0:	18d3      	adds	r3, r2, r3
 801a2e2:	781a      	ldrb	r2, [r3, #0]
 801a2e4:	187b      	adds	r3, r7, r1
 801a2e6:	709a      	strb	r2, [r3, #2]
      tempa[3]=RoundKey[k + 3];
 801a2e8:	69bb      	ldr	r3, [r7, #24]
 801a2ea:	3303      	adds	r3, #3
 801a2ec:	687a      	ldr	r2, [r7, #4]
 801a2ee:	18d3      	adds	r3, r2, r3
 801a2f0:	781a      	ldrb	r2, [r3, #0]
 801a2f2:	187b      	adds	r3, r7, r1
 801a2f4:	70da      	strb	r2, [r3, #3]

    }

    if (i % Nk == 0)
 801a2f6:	69fb      	ldr	r3, [r7, #28]
 801a2f8:	2203      	movs	r2, #3
 801a2fa:	4013      	ands	r3, r2
 801a2fc:	d13b      	bne.n	801a376 <KeyExpansion+0x142>
      // This function shifts the 4 bytes in a word to the left once.
      // [a0,a1,a2,a3] becomes [a1,a2,a3,a0]

      // Function RotWord()
      {
        const uint8_t u8tmp = tempa[0];
 801a2fe:	2117      	movs	r1, #23
 801a300:	187b      	adds	r3, r7, r1
 801a302:	200c      	movs	r0, #12
 801a304:	183a      	adds	r2, r7, r0
 801a306:	7812      	ldrb	r2, [r2, #0]
 801a308:	701a      	strb	r2, [r3, #0]
        tempa[0] = tempa[1];
 801a30a:	183b      	adds	r3, r7, r0
 801a30c:	785a      	ldrb	r2, [r3, #1]
 801a30e:	183b      	adds	r3, r7, r0
 801a310:	701a      	strb	r2, [r3, #0]
        tempa[1] = tempa[2];
 801a312:	183b      	adds	r3, r7, r0
 801a314:	789a      	ldrb	r2, [r3, #2]
 801a316:	183b      	adds	r3, r7, r0
 801a318:	705a      	strb	r2, [r3, #1]
        tempa[2] = tempa[3];
 801a31a:	183b      	adds	r3, r7, r0
 801a31c:	78da      	ldrb	r2, [r3, #3]
 801a31e:	183b      	adds	r3, r7, r0
 801a320:	709a      	strb	r2, [r3, #2]
        tempa[3] = u8tmp;
 801a322:	183b      	adds	r3, r7, r0
 801a324:	187a      	adds	r2, r7, r1
 801a326:	7812      	ldrb	r2, [r2, #0]
 801a328:	70da      	strb	r2, [r3, #3]
      // SubWord() is a function that takes a four-byte input word and
      // applies the S-box to each of the four bytes to produce an output word.

      // Function Subword()
      {
        tempa[0] = getSBoxValue(tempa[0]);
 801a32a:	183b      	adds	r3, r7, r0
 801a32c:	781b      	ldrb	r3, [r3, #0]
 801a32e:	001a      	movs	r2, r3
 801a330:	4b37      	ldr	r3, [pc, #220]	; (801a410 <KeyExpansion+0x1dc>)
 801a332:	5c9a      	ldrb	r2, [r3, r2]
 801a334:	183b      	adds	r3, r7, r0
 801a336:	701a      	strb	r2, [r3, #0]
        tempa[1] = getSBoxValue(tempa[1]);
 801a338:	183b      	adds	r3, r7, r0
 801a33a:	785b      	ldrb	r3, [r3, #1]
 801a33c:	001a      	movs	r2, r3
 801a33e:	4b34      	ldr	r3, [pc, #208]	; (801a410 <KeyExpansion+0x1dc>)
 801a340:	5c9a      	ldrb	r2, [r3, r2]
 801a342:	183b      	adds	r3, r7, r0
 801a344:	705a      	strb	r2, [r3, #1]
        tempa[2] = getSBoxValue(tempa[2]);
 801a346:	183b      	adds	r3, r7, r0
 801a348:	789b      	ldrb	r3, [r3, #2]
 801a34a:	001a      	movs	r2, r3
 801a34c:	4b30      	ldr	r3, [pc, #192]	; (801a410 <KeyExpansion+0x1dc>)
 801a34e:	5c9a      	ldrb	r2, [r3, r2]
 801a350:	183b      	adds	r3, r7, r0
 801a352:	709a      	strb	r2, [r3, #2]
        tempa[3] = getSBoxValue(tempa[3]);
 801a354:	183b      	adds	r3, r7, r0
 801a356:	78db      	ldrb	r3, [r3, #3]
 801a358:	001a      	movs	r2, r3
 801a35a:	4b2d      	ldr	r3, [pc, #180]	; (801a410 <KeyExpansion+0x1dc>)
 801a35c:	5c9a      	ldrb	r2, [r3, r2]
 801a35e:	183b      	adds	r3, r7, r0
 801a360:	70da      	strb	r2, [r3, #3]
      }

      tempa[0] = tempa[0] ^ Rcon[i/Nk];
 801a362:	183b      	adds	r3, r7, r0
 801a364:	781a      	ldrb	r2, [r3, #0]
 801a366:	69fb      	ldr	r3, [r7, #28]
 801a368:	089b      	lsrs	r3, r3, #2
 801a36a:	492a      	ldr	r1, [pc, #168]	; (801a414 <KeyExpansion+0x1e0>)
 801a36c:	5ccb      	ldrb	r3, [r1, r3]
 801a36e:	4053      	eors	r3, r2
 801a370:	b2da      	uxtb	r2, r3
 801a372:	183b      	adds	r3, r7, r0
 801a374:	701a      	strb	r2, [r3, #0]
        tempa[2] = getSBoxValue(tempa[2]);
        tempa[3] = getSBoxValue(tempa[3]);
      }
    }
#endif
    j = i * 4; k=(i - Nk) * 4;
 801a376:	69fb      	ldr	r3, [r7, #28]
 801a378:	009b      	lsls	r3, r3, #2
 801a37a:	613b      	str	r3, [r7, #16]
 801a37c:	69fb      	ldr	r3, [r7, #28]
 801a37e:	4a26      	ldr	r2, [pc, #152]	; (801a418 <KeyExpansion+0x1e4>)
 801a380:	4694      	mov	ip, r2
 801a382:	4463      	add	r3, ip
 801a384:	009b      	lsls	r3, r3, #2
 801a386:	61bb      	str	r3, [r7, #24]
    RoundKey[j + 0] = RoundKey[k + 0] ^ tempa[0];
 801a388:	687a      	ldr	r2, [r7, #4]
 801a38a:	69bb      	ldr	r3, [r7, #24]
 801a38c:	18d3      	adds	r3, r2, r3
 801a38e:	7819      	ldrb	r1, [r3, #0]
 801a390:	240c      	movs	r4, #12
 801a392:	193b      	adds	r3, r7, r4
 801a394:	781a      	ldrb	r2, [r3, #0]
 801a396:	6878      	ldr	r0, [r7, #4]
 801a398:	693b      	ldr	r3, [r7, #16]
 801a39a:	18c3      	adds	r3, r0, r3
 801a39c:	404a      	eors	r2, r1
 801a39e:	b2d2      	uxtb	r2, r2
 801a3a0:	701a      	strb	r2, [r3, #0]
    RoundKey[j + 1] = RoundKey[k + 1] ^ tempa[1];
 801a3a2:	69bb      	ldr	r3, [r7, #24]
 801a3a4:	3301      	adds	r3, #1
 801a3a6:	687a      	ldr	r2, [r7, #4]
 801a3a8:	18d3      	adds	r3, r2, r3
 801a3aa:	7819      	ldrb	r1, [r3, #0]
 801a3ac:	193b      	adds	r3, r7, r4
 801a3ae:	785a      	ldrb	r2, [r3, #1]
 801a3b0:	693b      	ldr	r3, [r7, #16]
 801a3b2:	3301      	adds	r3, #1
 801a3b4:	6878      	ldr	r0, [r7, #4]
 801a3b6:	18c3      	adds	r3, r0, r3
 801a3b8:	404a      	eors	r2, r1
 801a3ba:	b2d2      	uxtb	r2, r2
 801a3bc:	701a      	strb	r2, [r3, #0]
    RoundKey[j + 2] = RoundKey[k + 2] ^ tempa[2];
 801a3be:	69bb      	ldr	r3, [r7, #24]
 801a3c0:	3302      	adds	r3, #2
 801a3c2:	687a      	ldr	r2, [r7, #4]
 801a3c4:	18d3      	adds	r3, r2, r3
 801a3c6:	7819      	ldrb	r1, [r3, #0]
 801a3c8:	193b      	adds	r3, r7, r4
 801a3ca:	789a      	ldrb	r2, [r3, #2]
 801a3cc:	693b      	ldr	r3, [r7, #16]
 801a3ce:	3302      	adds	r3, #2
 801a3d0:	6878      	ldr	r0, [r7, #4]
 801a3d2:	18c3      	adds	r3, r0, r3
 801a3d4:	404a      	eors	r2, r1
 801a3d6:	b2d2      	uxtb	r2, r2
 801a3d8:	701a      	strb	r2, [r3, #0]
    RoundKey[j + 3] = RoundKey[k + 3] ^ tempa[3];
 801a3da:	69bb      	ldr	r3, [r7, #24]
 801a3dc:	3303      	adds	r3, #3
 801a3de:	687a      	ldr	r2, [r7, #4]
 801a3e0:	18d3      	adds	r3, r2, r3
 801a3e2:	7819      	ldrb	r1, [r3, #0]
 801a3e4:	193b      	adds	r3, r7, r4
 801a3e6:	78da      	ldrb	r2, [r3, #3]
 801a3e8:	693b      	ldr	r3, [r7, #16]
 801a3ea:	3303      	adds	r3, #3
 801a3ec:	6878      	ldr	r0, [r7, #4]
 801a3ee:	18c3      	adds	r3, r0, r3
 801a3f0:	404a      	eors	r2, r1
 801a3f2:	b2d2      	uxtb	r2, r2
 801a3f4:	701a      	strb	r2, [r3, #0]
  for (i = Nk; i < Nb * (Nr + 1); ++i)
 801a3f6:	69fb      	ldr	r3, [r7, #28]
 801a3f8:	3301      	adds	r3, #1
 801a3fa:	61fb      	str	r3, [r7, #28]
 801a3fc:	69fb      	ldr	r3, [r7, #28]
 801a3fe:	2b2b      	cmp	r3, #43	; 0x2b
 801a400:	d800      	bhi.n	801a404 <KeyExpansion+0x1d0>
 801a402:	e756      	b.n	801a2b2 <KeyExpansion+0x7e>
  }
}
 801a404:	46c0      	nop			; (mov r8, r8)
 801a406:	46bd      	mov	sp, r7
 801a408:	b009      	add	sp, #36	; 0x24
 801a40a:	bd90      	pop	{r4, r7, pc}
 801a40c:	3fffffff 	.word	0x3fffffff
 801a410:	08021118 	.word	0x08021118
 801a414:	08021318 	.word	0x08021318
 801a418:	3ffffffc 	.word	0x3ffffffc

0801a41c <tiny_AES_init_ctx>:

void tiny_AES_init_ctx(struct AES_ctx* ctx, const uint8_t* key)
{
 801a41c:	b580      	push	{r7, lr}
 801a41e:	b082      	sub	sp, #8
 801a420:	af00      	add	r7, sp, #0
 801a422:	6078      	str	r0, [r7, #4]
 801a424:	6039      	str	r1, [r7, #0]
  KeyExpansion(ctx->RoundKey, key);
 801a426:	687b      	ldr	r3, [r7, #4]
 801a428:	683a      	ldr	r2, [r7, #0]
 801a42a:	0011      	movs	r1, r2
 801a42c:	0018      	movs	r0, r3
 801a42e:	f7ff ff01 	bl	801a234 <KeyExpansion>
}
 801a432:	46c0      	nop			; (mov r8, r8)
 801a434:	46bd      	mov	sp, r7
 801a436:	b002      	add	sp, #8
 801a438:	bd80      	pop	{r7, pc}

0801a43a <AddRoundKey>:
#endif

// This function adds the round key to state.
// The round key is added to the state by an XOR function.
static void AddRoundKey(uint8_t round,state_t* state,uint8_t* RoundKey)
{
 801a43a:	b5b0      	push	{r4, r5, r7, lr}
 801a43c:	b086      	sub	sp, #24
 801a43e:	af00      	add	r7, sp, #0
 801a440:	60b9      	str	r1, [r7, #8]
 801a442:	607a      	str	r2, [r7, #4]
 801a444:	230f      	movs	r3, #15
 801a446:	18fb      	adds	r3, r7, r3
 801a448:	1c02      	adds	r2, r0, #0
 801a44a:	701a      	strb	r2, [r3, #0]
  uint8_t i,j;
  for (i = 0; i < 4; ++i)
 801a44c:	2317      	movs	r3, #23
 801a44e:	18fb      	adds	r3, r7, r3
 801a450:	2200      	movs	r2, #0
 801a452:	701a      	strb	r2, [r3, #0]
 801a454:	e038      	b.n	801a4c8 <AddRoundKey+0x8e>
  {
    for (j = 0; j < 4; ++j)
 801a456:	2316      	movs	r3, #22
 801a458:	18fb      	adds	r3, r7, r3
 801a45a:	2200      	movs	r2, #0
 801a45c:	701a      	strb	r2, [r3, #0]
 801a45e:	e028      	b.n	801a4b2 <AddRoundKey+0x78>
    {
      (*state)[i][j] ^= RoundKey[(round * Nb * 4) + (i * Nb) + j];
 801a460:	2517      	movs	r5, #23
 801a462:	197b      	adds	r3, r7, r5
 801a464:	781a      	ldrb	r2, [r3, #0]
 801a466:	2416      	movs	r4, #22
 801a468:	193b      	adds	r3, r7, r4
 801a46a:	781b      	ldrb	r3, [r3, #0]
 801a46c:	68b9      	ldr	r1, [r7, #8]
 801a46e:	0092      	lsls	r2, r2, #2
 801a470:	188a      	adds	r2, r1, r2
 801a472:	5cd0      	ldrb	r0, [r2, r3]
 801a474:	230f      	movs	r3, #15
 801a476:	18fb      	adds	r3, r7, r3
 801a478:	781b      	ldrb	r3, [r3, #0]
 801a47a:	009a      	lsls	r2, r3, #2
 801a47c:	197b      	adds	r3, r7, r5
 801a47e:	781b      	ldrb	r3, [r3, #0]
 801a480:	18d3      	adds	r3, r2, r3
 801a482:	009a      	lsls	r2, r3, #2
 801a484:	193b      	adds	r3, r7, r4
 801a486:	781b      	ldrb	r3, [r3, #0]
 801a488:	18d3      	adds	r3, r2, r3
 801a48a:	001a      	movs	r2, r3
 801a48c:	687b      	ldr	r3, [r7, #4]
 801a48e:	189b      	adds	r3, r3, r2
 801a490:	7819      	ldrb	r1, [r3, #0]
 801a492:	197b      	adds	r3, r7, r5
 801a494:	781a      	ldrb	r2, [r3, #0]
 801a496:	193b      	adds	r3, r7, r4
 801a498:	781b      	ldrb	r3, [r3, #0]
 801a49a:	4041      	eors	r1, r0
 801a49c:	b2c8      	uxtb	r0, r1
 801a49e:	68b9      	ldr	r1, [r7, #8]
 801a4a0:	0092      	lsls	r2, r2, #2
 801a4a2:	188a      	adds	r2, r1, r2
 801a4a4:	1c01      	adds	r1, r0, #0
 801a4a6:	54d1      	strb	r1, [r2, r3]
    for (j = 0; j < 4; ++j)
 801a4a8:	193b      	adds	r3, r7, r4
 801a4aa:	193a      	adds	r2, r7, r4
 801a4ac:	7812      	ldrb	r2, [r2, #0]
 801a4ae:	3201      	adds	r2, #1
 801a4b0:	701a      	strb	r2, [r3, #0]
 801a4b2:	2316      	movs	r3, #22
 801a4b4:	18fb      	adds	r3, r7, r3
 801a4b6:	781b      	ldrb	r3, [r3, #0]
 801a4b8:	2b03      	cmp	r3, #3
 801a4ba:	d9d1      	bls.n	801a460 <AddRoundKey+0x26>
  for (i = 0; i < 4; ++i)
 801a4bc:	2217      	movs	r2, #23
 801a4be:	18bb      	adds	r3, r7, r2
 801a4c0:	18ba      	adds	r2, r7, r2
 801a4c2:	7812      	ldrb	r2, [r2, #0]
 801a4c4:	3201      	adds	r2, #1
 801a4c6:	701a      	strb	r2, [r3, #0]
 801a4c8:	2317      	movs	r3, #23
 801a4ca:	18fb      	adds	r3, r7, r3
 801a4cc:	781b      	ldrb	r3, [r3, #0]
 801a4ce:	2b03      	cmp	r3, #3
 801a4d0:	d9c1      	bls.n	801a456 <AddRoundKey+0x1c>
    }
  }
}
 801a4d2:	46c0      	nop			; (mov r8, r8)
 801a4d4:	46bd      	mov	sp, r7
 801a4d6:	b006      	add	sp, #24
 801a4d8:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801a4dc <SubBytes>:

// The SubBytes Function Substitutes the values in the
// state matrix with values in an S-box.
static void SubBytes(state_t* state)
{
 801a4dc:	b5b0      	push	{r4, r5, r7, lr}
 801a4de:	b084      	sub	sp, #16
 801a4e0:	af00      	add	r7, sp, #0
 801a4e2:	6078      	str	r0, [r7, #4]
  uint8_t i, j;
  for (i = 0; i < 4; ++i)
 801a4e4:	230f      	movs	r3, #15
 801a4e6:	18fb      	adds	r3, r7, r3
 801a4e8:	2200      	movs	r2, #0
 801a4ea:	701a      	strb	r2, [r3, #0]
 801a4ec:	e02a      	b.n	801a544 <SubBytes+0x68>
  {
    for (j = 0; j < 4; ++j)
 801a4ee:	230e      	movs	r3, #14
 801a4f0:	18fb      	adds	r3, r7, r3
 801a4f2:	2200      	movs	r2, #0
 801a4f4:	701a      	strb	r2, [r3, #0]
 801a4f6:	e01a      	b.n	801a52e <SubBytes+0x52>
    {
      (*state)[j][i] = getSBoxValue((*state)[j][i]);
 801a4f8:	240e      	movs	r4, #14
 801a4fa:	193b      	adds	r3, r7, r4
 801a4fc:	781a      	ldrb	r2, [r3, #0]
 801a4fe:	250f      	movs	r5, #15
 801a500:	197b      	adds	r3, r7, r5
 801a502:	781b      	ldrb	r3, [r3, #0]
 801a504:	6879      	ldr	r1, [r7, #4]
 801a506:	0092      	lsls	r2, r2, #2
 801a508:	188a      	adds	r2, r1, r2
 801a50a:	5cd3      	ldrb	r3, [r2, r3]
 801a50c:	0018      	movs	r0, r3
 801a50e:	193b      	adds	r3, r7, r4
 801a510:	781a      	ldrb	r2, [r3, #0]
 801a512:	197b      	adds	r3, r7, r5
 801a514:	781b      	ldrb	r3, [r3, #0]
 801a516:	4910      	ldr	r1, [pc, #64]	; (801a558 <SubBytes+0x7c>)
 801a518:	5c08      	ldrb	r0, [r1, r0]
 801a51a:	6879      	ldr	r1, [r7, #4]
 801a51c:	0092      	lsls	r2, r2, #2
 801a51e:	188a      	adds	r2, r1, r2
 801a520:	1c01      	adds	r1, r0, #0
 801a522:	54d1      	strb	r1, [r2, r3]
    for (j = 0; j < 4; ++j)
 801a524:	193b      	adds	r3, r7, r4
 801a526:	193a      	adds	r2, r7, r4
 801a528:	7812      	ldrb	r2, [r2, #0]
 801a52a:	3201      	adds	r2, #1
 801a52c:	701a      	strb	r2, [r3, #0]
 801a52e:	230e      	movs	r3, #14
 801a530:	18fb      	adds	r3, r7, r3
 801a532:	781b      	ldrb	r3, [r3, #0]
 801a534:	2b03      	cmp	r3, #3
 801a536:	d9df      	bls.n	801a4f8 <SubBytes+0x1c>
  for (i = 0; i < 4; ++i)
 801a538:	220f      	movs	r2, #15
 801a53a:	18bb      	adds	r3, r7, r2
 801a53c:	18ba      	adds	r2, r7, r2
 801a53e:	7812      	ldrb	r2, [r2, #0]
 801a540:	3201      	adds	r2, #1
 801a542:	701a      	strb	r2, [r3, #0]
 801a544:	230f      	movs	r3, #15
 801a546:	18fb      	adds	r3, r7, r3
 801a548:	781b      	ldrb	r3, [r3, #0]
 801a54a:	2b03      	cmp	r3, #3
 801a54c:	d9cf      	bls.n	801a4ee <SubBytes+0x12>
    }
  }
}
 801a54e:	46c0      	nop			; (mov r8, r8)
 801a550:	46bd      	mov	sp, r7
 801a552:	b004      	add	sp, #16
 801a554:	bdb0      	pop	{r4, r5, r7, pc}
 801a556:	46c0      	nop			; (mov r8, r8)
 801a558:	08021118 	.word	0x08021118

0801a55c <ShiftRows>:

// The ShiftRows() function shifts the rows in the state to the left.
// Each row is shifted with different offset.
// Offset = Row number. So the first row is not shifted.
static void ShiftRows(state_t* state)
{
 801a55c:	b580      	push	{r7, lr}
 801a55e:	b084      	sub	sp, #16
 801a560:	af00      	add	r7, sp, #0
 801a562:	6078      	str	r0, [r7, #4]
  uint8_t temp;

  // Rotate first row 1 columns to left
  temp           = (*state)[0][1];
 801a564:	210f      	movs	r1, #15
 801a566:	187b      	adds	r3, r7, r1
 801a568:	687a      	ldr	r2, [r7, #4]
 801a56a:	7852      	ldrb	r2, [r2, #1]
 801a56c:	701a      	strb	r2, [r3, #0]
  (*state)[0][1] = (*state)[1][1];
 801a56e:	687b      	ldr	r3, [r7, #4]
 801a570:	795a      	ldrb	r2, [r3, #5]
 801a572:	687b      	ldr	r3, [r7, #4]
 801a574:	705a      	strb	r2, [r3, #1]
  (*state)[1][1] = (*state)[2][1];
 801a576:	687b      	ldr	r3, [r7, #4]
 801a578:	7a5a      	ldrb	r2, [r3, #9]
 801a57a:	687b      	ldr	r3, [r7, #4]
 801a57c:	715a      	strb	r2, [r3, #5]
  (*state)[2][1] = (*state)[3][1];
 801a57e:	687b      	ldr	r3, [r7, #4]
 801a580:	7b5a      	ldrb	r2, [r3, #13]
 801a582:	687b      	ldr	r3, [r7, #4]
 801a584:	725a      	strb	r2, [r3, #9]
  (*state)[3][1] = temp;
 801a586:	687b      	ldr	r3, [r7, #4]
 801a588:	187a      	adds	r2, r7, r1
 801a58a:	7812      	ldrb	r2, [r2, #0]
 801a58c:	735a      	strb	r2, [r3, #13]

  // Rotate second row 2 columns to left
  temp           = (*state)[0][2];
 801a58e:	187b      	adds	r3, r7, r1
 801a590:	687a      	ldr	r2, [r7, #4]
 801a592:	7892      	ldrb	r2, [r2, #2]
 801a594:	701a      	strb	r2, [r3, #0]
  (*state)[0][2] = (*state)[2][2];
 801a596:	687b      	ldr	r3, [r7, #4]
 801a598:	7a9a      	ldrb	r2, [r3, #10]
 801a59a:	687b      	ldr	r3, [r7, #4]
 801a59c:	709a      	strb	r2, [r3, #2]
  (*state)[2][2] = temp;
 801a59e:	687b      	ldr	r3, [r7, #4]
 801a5a0:	187a      	adds	r2, r7, r1
 801a5a2:	7812      	ldrb	r2, [r2, #0]
 801a5a4:	729a      	strb	r2, [r3, #10]

  temp           = (*state)[1][2];
 801a5a6:	187b      	adds	r3, r7, r1
 801a5a8:	687a      	ldr	r2, [r7, #4]
 801a5aa:	7992      	ldrb	r2, [r2, #6]
 801a5ac:	701a      	strb	r2, [r3, #0]
  (*state)[1][2] = (*state)[3][2];
 801a5ae:	687b      	ldr	r3, [r7, #4]
 801a5b0:	7b9a      	ldrb	r2, [r3, #14]
 801a5b2:	687b      	ldr	r3, [r7, #4]
 801a5b4:	719a      	strb	r2, [r3, #6]
  (*state)[3][2] = temp;
 801a5b6:	687b      	ldr	r3, [r7, #4]
 801a5b8:	187a      	adds	r2, r7, r1
 801a5ba:	7812      	ldrb	r2, [r2, #0]
 801a5bc:	739a      	strb	r2, [r3, #14]

  // Rotate third row 3 columns to left
  temp           = (*state)[0][3];
 801a5be:	187b      	adds	r3, r7, r1
 801a5c0:	687a      	ldr	r2, [r7, #4]
 801a5c2:	78d2      	ldrb	r2, [r2, #3]
 801a5c4:	701a      	strb	r2, [r3, #0]
  (*state)[0][3] = (*state)[3][3];
 801a5c6:	687b      	ldr	r3, [r7, #4]
 801a5c8:	7bda      	ldrb	r2, [r3, #15]
 801a5ca:	687b      	ldr	r3, [r7, #4]
 801a5cc:	70da      	strb	r2, [r3, #3]
  (*state)[3][3] = (*state)[2][3];
 801a5ce:	687b      	ldr	r3, [r7, #4]
 801a5d0:	7ada      	ldrb	r2, [r3, #11]
 801a5d2:	687b      	ldr	r3, [r7, #4]
 801a5d4:	73da      	strb	r2, [r3, #15]
  (*state)[2][3] = (*state)[1][3];
 801a5d6:	687b      	ldr	r3, [r7, #4]
 801a5d8:	79da      	ldrb	r2, [r3, #7]
 801a5da:	687b      	ldr	r3, [r7, #4]
 801a5dc:	72da      	strb	r2, [r3, #11]
  (*state)[1][3] = temp;
 801a5de:	687b      	ldr	r3, [r7, #4]
 801a5e0:	187a      	adds	r2, r7, r1
 801a5e2:	7812      	ldrb	r2, [r2, #0]
 801a5e4:	71da      	strb	r2, [r3, #7]
}
 801a5e6:	46c0      	nop			; (mov r8, r8)
 801a5e8:	46bd      	mov	sp, r7
 801a5ea:	b004      	add	sp, #16
 801a5ec:	bd80      	pop	{r7, pc}

0801a5ee <xtime>:

static uint8_t xtime(uint8_t x)
{
 801a5ee:	b580      	push	{r7, lr}
 801a5f0:	b082      	sub	sp, #8
 801a5f2:	af00      	add	r7, sp, #0
 801a5f4:	0002      	movs	r2, r0
 801a5f6:	1dfb      	adds	r3, r7, #7
 801a5f8:	701a      	strb	r2, [r3, #0]
  return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
 801a5fa:	1dfb      	adds	r3, r7, #7
 801a5fc:	781b      	ldrb	r3, [r3, #0]
 801a5fe:	005b      	lsls	r3, r3, #1
 801a600:	b25a      	sxtb	r2, r3
 801a602:	1dfb      	adds	r3, r7, #7
 801a604:	781b      	ldrb	r3, [r3, #0]
 801a606:	09db      	lsrs	r3, r3, #7
 801a608:	b2db      	uxtb	r3, r3
 801a60a:	1c19      	adds	r1, r3, #0
 801a60c:	1c0b      	adds	r3, r1, #0
 801a60e:	18db      	adds	r3, r3, r3
 801a610:	185b      	adds	r3, r3, r1
 801a612:	1c19      	adds	r1, r3, #0
 801a614:	00c8      	lsls	r0, r1, #3
 801a616:	1c19      	adds	r1, r3, #0
 801a618:	1c03      	adds	r3, r0, #0
 801a61a:	18cb      	adds	r3, r1, r3
 801a61c:	b2db      	uxtb	r3, r3
 801a61e:	b25b      	sxtb	r3, r3
 801a620:	4053      	eors	r3, r2
 801a622:	b25b      	sxtb	r3, r3
 801a624:	b2db      	uxtb	r3, r3
}
 801a626:	0018      	movs	r0, r3
 801a628:	46bd      	mov	sp, r7
 801a62a:	b002      	add	sp, #8
 801a62c:	bd80      	pop	{r7, pc}

0801a62e <MixColumns>:

// MixColumns function mixes the columns of the state matrix
static void MixColumns(state_t* state)
{
 801a62e:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a630:	b085      	sub	sp, #20
 801a632:	af00      	add	r7, sp, #0
 801a634:	6078      	str	r0, [r7, #4]
  uint8_t i;
  uint8_t Tmp, Tm, t;
  for (i = 0; i < 4; ++i)
 801a636:	230f      	movs	r3, #15
 801a638:	18fb      	adds	r3, r7, r3
 801a63a:	2200      	movs	r2, #0
 801a63c:	701a      	strb	r2, [r3, #0]
 801a63e:	e0f0      	b.n	801a822 <MixColumns+0x1f4>
  {
    t   = (*state)[i][0];
 801a640:	250f      	movs	r5, #15
 801a642:	197b      	adds	r3, r7, r5
 801a644:	7819      	ldrb	r1, [r3, #0]
 801a646:	230e      	movs	r3, #14
 801a648:	18fb      	adds	r3, r7, r3
 801a64a:	687a      	ldr	r2, [r7, #4]
 801a64c:	0089      	lsls	r1, r1, #2
 801a64e:	5c8a      	ldrb	r2, [r1, r2]
 801a650:	701a      	strb	r2, [r3, #0]
    Tmp = (*state)[i][0] ^ (*state)[i][1] ^ (*state)[i][2] ^ (*state)[i][3] ;
 801a652:	197b      	adds	r3, r7, r5
 801a654:	781a      	ldrb	r2, [r3, #0]
 801a656:	687b      	ldr	r3, [r7, #4]
 801a658:	0092      	lsls	r2, r2, #2
 801a65a:	5cd2      	ldrb	r2, [r2, r3]
 801a65c:	197b      	adds	r3, r7, r5
 801a65e:	781b      	ldrb	r3, [r3, #0]
 801a660:	6879      	ldr	r1, [r7, #4]
 801a662:	009b      	lsls	r3, r3, #2
 801a664:	18cb      	adds	r3, r1, r3
 801a666:	3301      	adds	r3, #1
 801a668:	781b      	ldrb	r3, [r3, #0]
 801a66a:	4053      	eors	r3, r2
 801a66c:	b2da      	uxtb	r2, r3
 801a66e:	197b      	adds	r3, r7, r5
 801a670:	781b      	ldrb	r3, [r3, #0]
 801a672:	6879      	ldr	r1, [r7, #4]
 801a674:	009b      	lsls	r3, r3, #2
 801a676:	18cb      	adds	r3, r1, r3
 801a678:	3302      	adds	r3, #2
 801a67a:	781b      	ldrb	r3, [r3, #0]
 801a67c:	4053      	eors	r3, r2
 801a67e:	b2d9      	uxtb	r1, r3
 801a680:	197b      	adds	r3, r7, r5
 801a682:	781b      	ldrb	r3, [r3, #0]
 801a684:	687a      	ldr	r2, [r7, #4]
 801a686:	009b      	lsls	r3, r3, #2
 801a688:	18d3      	adds	r3, r2, r3
 801a68a:	3303      	adds	r3, #3
 801a68c:	781a      	ldrb	r2, [r3, #0]
 801a68e:	230d      	movs	r3, #13
 801a690:	18fb      	adds	r3, r7, r3
 801a692:	404a      	eors	r2, r1
 801a694:	701a      	strb	r2, [r3, #0]
    Tm  = (*state)[i][0] ^ (*state)[i][1] ; Tm = xtime(Tm);  (*state)[i][0] ^= Tm ^ Tmp ;
 801a696:	197b      	adds	r3, r7, r5
 801a698:	781a      	ldrb	r2, [r3, #0]
 801a69a:	687b      	ldr	r3, [r7, #4]
 801a69c:	0092      	lsls	r2, r2, #2
 801a69e:	5cd1      	ldrb	r1, [r2, r3]
 801a6a0:	197b      	adds	r3, r7, r5
 801a6a2:	781b      	ldrb	r3, [r3, #0]
 801a6a4:	687a      	ldr	r2, [r7, #4]
 801a6a6:	009b      	lsls	r3, r3, #2
 801a6a8:	18d3      	adds	r3, r2, r3
 801a6aa:	3301      	adds	r3, #1
 801a6ac:	781a      	ldrb	r2, [r3, #0]
 801a6ae:	200c      	movs	r0, #12
 801a6b0:	183b      	adds	r3, r7, r0
 801a6b2:	404a      	eors	r2, r1
 801a6b4:	701a      	strb	r2, [r3, #0]
 801a6b6:	183c      	adds	r4, r7, r0
 801a6b8:	0006      	movs	r6, r0
 801a6ba:	183b      	adds	r3, r7, r0
 801a6bc:	781b      	ldrb	r3, [r3, #0]
 801a6be:	0018      	movs	r0, r3
 801a6c0:	f7ff ff95 	bl	801a5ee <xtime>
 801a6c4:	0003      	movs	r3, r0
 801a6c6:	7023      	strb	r3, [r4, #0]
 801a6c8:	197b      	adds	r3, r7, r5
 801a6ca:	781a      	ldrb	r2, [r3, #0]
 801a6cc:	687b      	ldr	r3, [r7, #4]
 801a6ce:	0092      	lsls	r2, r2, #2
 801a6d0:	5cd1      	ldrb	r1, [r2, r3]
 801a6d2:	0030      	movs	r0, r6
 801a6d4:	183a      	adds	r2, r7, r0
 801a6d6:	230d      	movs	r3, #13
 801a6d8:	18fb      	adds	r3, r7, r3
 801a6da:	7812      	ldrb	r2, [r2, #0]
 801a6dc:	781b      	ldrb	r3, [r3, #0]
 801a6de:	4053      	eors	r3, r2
 801a6e0:	b2db      	uxtb	r3, r3
 801a6e2:	197a      	adds	r2, r7, r5
 801a6e4:	7812      	ldrb	r2, [r2, #0]
 801a6e6:	404b      	eors	r3, r1
 801a6e8:	b2d9      	uxtb	r1, r3
 801a6ea:	687b      	ldr	r3, [r7, #4]
 801a6ec:	0092      	lsls	r2, r2, #2
 801a6ee:	54d1      	strb	r1, [r2, r3]
    Tm  = (*state)[i][1] ^ (*state)[i][2] ; Tm = xtime(Tm);  (*state)[i][1] ^= Tm ^ Tmp ;
 801a6f0:	197b      	adds	r3, r7, r5
 801a6f2:	781b      	ldrb	r3, [r3, #0]
 801a6f4:	687a      	ldr	r2, [r7, #4]
 801a6f6:	009b      	lsls	r3, r3, #2
 801a6f8:	18d3      	adds	r3, r2, r3
 801a6fa:	3301      	adds	r3, #1
 801a6fc:	7819      	ldrb	r1, [r3, #0]
 801a6fe:	197b      	adds	r3, r7, r5
 801a700:	781b      	ldrb	r3, [r3, #0]
 801a702:	687a      	ldr	r2, [r7, #4]
 801a704:	009b      	lsls	r3, r3, #2
 801a706:	18d3      	adds	r3, r2, r3
 801a708:	3302      	adds	r3, #2
 801a70a:	781a      	ldrb	r2, [r3, #0]
 801a70c:	183b      	adds	r3, r7, r0
 801a70e:	404a      	eors	r2, r1
 801a710:	701a      	strb	r2, [r3, #0]
 801a712:	183c      	adds	r4, r7, r0
 801a714:	0006      	movs	r6, r0
 801a716:	183b      	adds	r3, r7, r0
 801a718:	781b      	ldrb	r3, [r3, #0]
 801a71a:	0018      	movs	r0, r3
 801a71c:	f7ff ff67 	bl	801a5ee <xtime>
 801a720:	0003      	movs	r3, r0
 801a722:	7023      	strb	r3, [r4, #0]
 801a724:	197b      	adds	r3, r7, r5
 801a726:	781b      	ldrb	r3, [r3, #0]
 801a728:	687a      	ldr	r2, [r7, #4]
 801a72a:	009b      	lsls	r3, r3, #2
 801a72c:	18d3      	adds	r3, r2, r3
 801a72e:	3301      	adds	r3, #1
 801a730:	7819      	ldrb	r1, [r3, #0]
 801a732:	0030      	movs	r0, r6
 801a734:	183a      	adds	r2, r7, r0
 801a736:	230d      	movs	r3, #13
 801a738:	18fb      	adds	r3, r7, r3
 801a73a:	7812      	ldrb	r2, [r2, #0]
 801a73c:	781b      	ldrb	r3, [r3, #0]
 801a73e:	4053      	eors	r3, r2
 801a740:	b2da      	uxtb	r2, r3
 801a742:	197b      	adds	r3, r7, r5
 801a744:	781b      	ldrb	r3, [r3, #0]
 801a746:	404a      	eors	r2, r1
 801a748:	b2d1      	uxtb	r1, r2
 801a74a:	687a      	ldr	r2, [r7, #4]
 801a74c:	009b      	lsls	r3, r3, #2
 801a74e:	18d3      	adds	r3, r2, r3
 801a750:	3301      	adds	r3, #1
 801a752:	1c0a      	adds	r2, r1, #0
 801a754:	701a      	strb	r2, [r3, #0]
    Tm  = (*state)[i][2] ^ (*state)[i][3] ; Tm = xtime(Tm);  (*state)[i][2] ^= Tm ^ Tmp ;
 801a756:	197b      	adds	r3, r7, r5
 801a758:	781b      	ldrb	r3, [r3, #0]
 801a75a:	687a      	ldr	r2, [r7, #4]
 801a75c:	009b      	lsls	r3, r3, #2
 801a75e:	18d3      	adds	r3, r2, r3
 801a760:	3302      	adds	r3, #2
 801a762:	7819      	ldrb	r1, [r3, #0]
 801a764:	197b      	adds	r3, r7, r5
 801a766:	781b      	ldrb	r3, [r3, #0]
 801a768:	687a      	ldr	r2, [r7, #4]
 801a76a:	009b      	lsls	r3, r3, #2
 801a76c:	18d3      	adds	r3, r2, r3
 801a76e:	3303      	adds	r3, #3
 801a770:	781a      	ldrb	r2, [r3, #0]
 801a772:	183b      	adds	r3, r7, r0
 801a774:	404a      	eors	r2, r1
 801a776:	701a      	strb	r2, [r3, #0]
 801a778:	183c      	adds	r4, r7, r0
 801a77a:	0006      	movs	r6, r0
 801a77c:	183b      	adds	r3, r7, r0
 801a77e:	781b      	ldrb	r3, [r3, #0]
 801a780:	0018      	movs	r0, r3
 801a782:	f7ff ff34 	bl	801a5ee <xtime>
 801a786:	0003      	movs	r3, r0
 801a788:	7023      	strb	r3, [r4, #0]
 801a78a:	197b      	adds	r3, r7, r5
 801a78c:	781b      	ldrb	r3, [r3, #0]
 801a78e:	687a      	ldr	r2, [r7, #4]
 801a790:	009b      	lsls	r3, r3, #2
 801a792:	18d3      	adds	r3, r2, r3
 801a794:	3302      	adds	r3, #2
 801a796:	7819      	ldrb	r1, [r3, #0]
 801a798:	0030      	movs	r0, r6
 801a79a:	183a      	adds	r2, r7, r0
 801a79c:	230d      	movs	r3, #13
 801a79e:	18fb      	adds	r3, r7, r3
 801a7a0:	7812      	ldrb	r2, [r2, #0]
 801a7a2:	781b      	ldrb	r3, [r3, #0]
 801a7a4:	4053      	eors	r3, r2
 801a7a6:	b2da      	uxtb	r2, r3
 801a7a8:	197b      	adds	r3, r7, r5
 801a7aa:	781b      	ldrb	r3, [r3, #0]
 801a7ac:	404a      	eors	r2, r1
 801a7ae:	b2d1      	uxtb	r1, r2
 801a7b0:	687a      	ldr	r2, [r7, #4]
 801a7b2:	009b      	lsls	r3, r3, #2
 801a7b4:	18d3      	adds	r3, r2, r3
 801a7b6:	3302      	adds	r3, #2
 801a7b8:	1c0a      	adds	r2, r1, #0
 801a7ba:	701a      	strb	r2, [r3, #0]
    Tm  = (*state)[i][3] ^ t ;              Tm = xtime(Tm);  (*state)[i][3] ^= Tm ^ Tmp ;
 801a7bc:	197b      	adds	r3, r7, r5
 801a7be:	781b      	ldrb	r3, [r3, #0]
 801a7c0:	687a      	ldr	r2, [r7, #4]
 801a7c2:	009b      	lsls	r3, r3, #2
 801a7c4:	18d3      	adds	r3, r2, r3
 801a7c6:	3303      	adds	r3, #3
 801a7c8:	7819      	ldrb	r1, [r3, #0]
 801a7ca:	183b      	adds	r3, r7, r0
 801a7cc:	220e      	movs	r2, #14
 801a7ce:	18ba      	adds	r2, r7, r2
 801a7d0:	7812      	ldrb	r2, [r2, #0]
 801a7d2:	404a      	eors	r2, r1
 801a7d4:	701a      	strb	r2, [r3, #0]
 801a7d6:	183c      	adds	r4, r7, r0
 801a7d8:	0006      	movs	r6, r0
 801a7da:	183b      	adds	r3, r7, r0
 801a7dc:	781b      	ldrb	r3, [r3, #0]
 801a7de:	0018      	movs	r0, r3
 801a7e0:	f7ff ff05 	bl	801a5ee <xtime>
 801a7e4:	0003      	movs	r3, r0
 801a7e6:	7023      	strb	r3, [r4, #0]
 801a7e8:	197b      	adds	r3, r7, r5
 801a7ea:	781b      	ldrb	r3, [r3, #0]
 801a7ec:	687a      	ldr	r2, [r7, #4]
 801a7ee:	009b      	lsls	r3, r3, #2
 801a7f0:	18d3      	adds	r3, r2, r3
 801a7f2:	3303      	adds	r3, #3
 801a7f4:	7819      	ldrb	r1, [r3, #0]
 801a7f6:	19ba      	adds	r2, r7, r6
 801a7f8:	230d      	movs	r3, #13
 801a7fa:	18fb      	adds	r3, r7, r3
 801a7fc:	7812      	ldrb	r2, [r2, #0]
 801a7fe:	781b      	ldrb	r3, [r3, #0]
 801a800:	4053      	eors	r3, r2
 801a802:	b2da      	uxtb	r2, r3
 801a804:	197b      	adds	r3, r7, r5
 801a806:	781b      	ldrb	r3, [r3, #0]
 801a808:	404a      	eors	r2, r1
 801a80a:	b2d1      	uxtb	r1, r2
 801a80c:	687a      	ldr	r2, [r7, #4]
 801a80e:	009b      	lsls	r3, r3, #2
 801a810:	18d3      	adds	r3, r2, r3
 801a812:	3303      	adds	r3, #3
 801a814:	1c0a      	adds	r2, r1, #0
 801a816:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < 4; ++i)
 801a818:	197b      	adds	r3, r7, r5
 801a81a:	197a      	adds	r2, r7, r5
 801a81c:	7812      	ldrb	r2, [r2, #0]
 801a81e:	3201      	adds	r2, #1
 801a820:	701a      	strb	r2, [r3, #0]
 801a822:	230f      	movs	r3, #15
 801a824:	18fb      	adds	r3, r7, r3
 801a826:	781b      	ldrb	r3, [r3, #0]
 801a828:	2b03      	cmp	r3, #3
 801a82a:	d800      	bhi.n	801a82e <MixColumns+0x200>
 801a82c:	e708      	b.n	801a640 <MixColumns+0x12>
  }
}
 801a82e:	46c0      	nop			; (mov r8, r8)
 801a830:	46bd      	mov	sp, r7
 801a832:	b005      	add	sp, #20
 801a834:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801a836 <InvMixColumns>:

// MixColumns function mixes the columns of the state matrix.
// The method used to multiply may be difficult to understand for the inexperienced.
// Please use the references to gain more information.
static void InvMixColumns(state_t* state)
{
 801a836:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a838:	b085      	sub	sp, #20
 801a83a:	af00      	add	r7, sp, #0
 801a83c:	6078      	str	r0, [r7, #4]
  int i;
  uint8_t a, b, c, d;
  for (i = 0; i < 4; ++i)
 801a83e:	2300      	movs	r3, #0
 801a840:	60fb      	str	r3, [r7, #12]
 801a842:	e3c3      	b.n	801afcc <InvMixColumns+0x796>
  {
    a = (*state)[i][0];
 801a844:	260b      	movs	r6, #11
 801a846:	19bb      	adds	r3, r7, r6
 801a848:	687a      	ldr	r2, [r7, #4]
 801a84a:	68f9      	ldr	r1, [r7, #12]
 801a84c:	0089      	lsls	r1, r1, #2
 801a84e:	5c8a      	ldrb	r2, [r1, r2]
 801a850:	701a      	strb	r2, [r3, #0]
    b = (*state)[i][1];
 801a852:	250a      	movs	r5, #10
 801a854:	197b      	adds	r3, r7, r5
 801a856:	6879      	ldr	r1, [r7, #4]
 801a858:	68fa      	ldr	r2, [r7, #12]
 801a85a:	0092      	lsls	r2, r2, #2
 801a85c:	188a      	adds	r2, r1, r2
 801a85e:	3201      	adds	r2, #1
 801a860:	7812      	ldrb	r2, [r2, #0]
 801a862:	701a      	strb	r2, [r3, #0]
    c = (*state)[i][2];
 801a864:	2409      	movs	r4, #9
 801a866:	193b      	adds	r3, r7, r4
 801a868:	6879      	ldr	r1, [r7, #4]
 801a86a:	68fa      	ldr	r2, [r7, #12]
 801a86c:	0092      	lsls	r2, r2, #2
 801a86e:	188a      	adds	r2, r1, r2
 801a870:	3202      	adds	r2, #2
 801a872:	7812      	ldrb	r2, [r2, #0]
 801a874:	701a      	strb	r2, [r3, #0]
    d = (*state)[i][3];
 801a876:	2308      	movs	r3, #8
 801a878:	18fb      	adds	r3, r7, r3
 801a87a:	6879      	ldr	r1, [r7, #4]
 801a87c:	68fa      	ldr	r2, [r7, #12]
 801a87e:	0092      	lsls	r2, r2, #2
 801a880:	188a      	adds	r2, r1, r2
 801a882:	3203      	adds	r2, #3
 801a884:	7812      	ldrb	r2, [r2, #0]
 801a886:	701a      	strb	r2, [r3, #0]

    (*state)[i][0] = Multiply(a, 0x0e) ^ Multiply(b, 0x0b) ^ Multiply(c, 0x0d) ^ Multiply(d, 0x09);
 801a888:	19bb      	adds	r3, r7, r6
 801a88a:	781b      	ldrb	r3, [r3, #0]
 801a88c:	0018      	movs	r0, r3
 801a88e:	f7ff feae 	bl	801a5ee <xtime>
 801a892:	0003      	movs	r3, r0
 801a894:	0018      	movs	r0, r3
 801a896:	f7ff feaa 	bl	801a5ee <xtime>
 801a89a:	0003      	movs	r3, r0
 801a89c:	0018      	movs	r0, r3
 801a89e:	f7ff fea6 	bl	801a5ee <xtime>
 801a8a2:	0003      	movs	r3, r0
 801a8a4:	0018      	movs	r0, r3
 801a8a6:	f7ff fea2 	bl	801a5ee <xtime>
 801a8aa:	197b      	adds	r3, r7, r5
 801a8ac:	781b      	ldrb	r3, [r3, #0]
 801a8ae:	0018      	movs	r0, r3
 801a8b0:	f7ff fe9d 	bl	801a5ee <xtime>
 801a8b4:	0003      	movs	r3, r0
 801a8b6:	0018      	movs	r0, r3
 801a8b8:	f7ff fe99 	bl	801a5ee <xtime>
 801a8bc:	197b      	adds	r3, r7, r5
 801a8be:	781b      	ldrb	r3, [r3, #0]
 801a8c0:	0018      	movs	r0, r3
 801a8c2:	f7ff fe94 	bl	801a5ee <xtime>
 801a8c6:	0003      	movs	r3, r0
 801a8c8:	0018      	movs	r0, r3
 801a8ca:	f7ff fe90 	bl	801a5ee <xtime>
 801a8ce:	0003      	movs	r3, r0
 801a8d0:	0018      	movs	r0, r3
 801a8d2:	f7ff fe8c 	bl	801a5ee <xtime>
 801a8d6:	0003      	movs	r3, r0
 801a8d8:	0018      	movs	r0, r3
 801a8da:	f7ff fe88 	bl	801a5ee <xtime>
 801a8de:	193b      	adds	r3, r7, r4
 801a8e0:	781b      	ldrb	r3, [r3, #0]
 801a8e2:	0018      	movs	r0, r3
 801a8e4:	f7ff fe83 	bl	801a5ee <xtime>
 801a8e8:	193b      	adds	r3, r7, r4
 801a8ea:	781b      	ldrb	r3, [r3, #0]
 801a8ec:	0018      	movs	r0, r3
 801a8ee:	f7ff fe7e 	bl	801a5ee <xtime>
 801a8f2:	0003      	movs	r3, r0
 801a8f4:	0018      	movs	r0, r3
 801a8f6:	f7ff fe7a 	bl	801a5ee <xtime>
 801a8fa:	0003      	movs	r3, r0
 801a8fc:	0018      	movs	r0, r3
 801a8fe:	f7ff fe76 	bl	801a5ee <xtime>
 801a902:	0003      	movs	r3, r0
 801a904:	0018      	movs	r0, r3
 801a906:	f7ff fe72 	bl	801a5ee <xtime>
 801a90a:	2308      	movs	r3, #8
 801a90c:	001c      	movs	r4, r3
 801a90e:	18fb      	adds	r3, r7, r3
 801a910:	781b      	ldrb	r3, [r3, #0]
 801a912:	0018      	movs	r0, r3
 801a914:	f7ff fe6b 	bl	801a5ee <xtime>
 801a918:	0023      	movs	r3, r4
 801a91a:	001c      	movs	r4, r3
 801a91c:	18fb      	adds	r3, r7, r3
 801a91e:	781b      	ldrb	r3, [r3, #0]
 801a920:	0018      	movs	r0, r3
 801a922:	f7ff fe64 	bl	801a5ee <xtime>
 801a926:	0003      	movs	r3, r0
 801a928:	0018      	movs	r0, r3
 801a92a:	f7ff fe60 	bl	801a5ee <xtime>
 801a92e:	0023      	movs	r3, r4
 801a930:	18fb      	adds	r3, r7, r3
 801a932:	781b      	ldrb	r3, [r3, #0]
 801a934:	0018      	movs	r0, r3
 801a936:	f7ff fe5a 	bl	801a5ee <xtime>
 801a93a:	0003      	movs	r3, r0
 801a93c:	0018      	movs	r0, r3
 801a93e:	f7ff fe56 	bl	801a5ee <xtime>
 801a942:	0003      	movs	r3, r0
 801a944:	0018      	movs	r0, r3
 801a946:	f7ff fe52 	bl	801a5ee <xtime>
 801a94a:	0003      	movs	r3, r0
 801a94c:	0018      	movs	r0, r3
 801a94e:	f7ff fe4e 	bl	801a5ee <xtime>
 801a952:	19bb      	adds	r3, r7, r6
 801a954:	781b      	ldrb	r3, [r3, #0]
 801a956:	0018      	movs	r0, r3
 801a958:	f7ff fe49 	bl	801a5ee <xtime>
 801a95c:	0003      	movs	r3, r0
 801a95e:	001c      	movs	r4, r3
 801a960:	19bb      	adds	r3, r7, r6
 801a962:	781b      	ldrb	r3, [r3, #0]
 801a964:	0018      	movs	r0, r3
 801a966:	f7ff fe42 	bl	801a5ee <xtime>
 801a96a:	0003      	movs	r3, r0
 801a96c:	0018      	movs	r0, r3
 801a96e:	f7ff fe3e 	bl	801a5ee <xtime>
 801a972:	0003      	movs	r3, r0
 801a974:	4063      	eors	r3, r4
 801a976:	b2dc      	uxtb	r4, r3
 801a978:	19bb      	adds	r3, r7, r6
 801a97a:	781b      	ldrb	r3, [r3, #0]
 801a97c:	0018      	movs	r0, r3
 801a97e:	f7ff fe36 	bl	801a5ee <xtime>
 801a982:	0003      	movs	r3, r0
 801a984:	0018      	movs	r0, r3
 801a986:	f7ff fe32 	bl	801a5ee <xtime>
 801a98a:	0003      	movs	r3, r0
 801a98c:	0018      	movs	r0, r3
 801a98e:	f7ff fe2e 	bl	801a5ee <xtime>
 801a992:	0003      	movs	r3, r0
 801a994:	4063      	eors	r3, r4
 801a996:	b2dc      	uxtb	r4, r3
 801a998:	197b      	adds	r3, r7, r5
 801a99a:	781b      	ldrb	r3, [r3, #0]
 801a99c:	0018      	movs	r0, r3
 801a99e:	f7ff fe26 	bl	801a5ee <xtime>
 801a9a2:	0003      	movs	r3, r0
 801a9a4:	001a      	movs	r2, r3
 801a9a6:	0029      	movs	r1, r5
 801a9a8:	197b      	adds	r3, r7, r5
 801a9aa:	781b      	ldrb	r3, [r3, #0]
 801a9ac:	4053      	eors	r3, r2
 801a9ae:	b2dd      	uxtb	r5, r3
 801a9b0:	187b      	adds	r3, r7, r1
 801a9b2:	781b      	ldrb	r3, [r3, #0]
 801a9b4:	0018      	movs	r0, r3
 801a9b6:	f7ff fe1a 	bl	801a5ee <xtime>
 801a9ba:	0003      	movs	r3, r0
 801a9bc:	0018      	movs	r0, r3
 801a9be:	f7ff fe16 	bl	801a5ee <xtime>
 801a9c2:	0003      	movs	r3, r0
 801a9c4:	0018      	movs	r0, r3
 801a9c6:	f7ff fe12 	bl	801a5ee <xtime>
 801a9ca:	0003      	movs	r3, r0
 801a9cc:	406b      	eors	r3, r5
 801a9ce:	b2db      	uxtb	r3, r3
 801a9d0:	4063      	eors	r3, r4
 801a9d2:	b2dc      	uxtb	r4, r3
 801a9d4:	2309      	movs	r3, #9
 801a9d6:	001d      	movs	r5, r3
 801a9d8:	18fb      	adds	r3, r7, r3
 801a9da:	781b      	ldrb	r3, [r3, #0]
 801a9dc:	0018      	movs	r0, r3
 801a9de:	f7ff fe06 	bl	801a5ee <xtime>
 801a9e2:	0003      	movs	r3, r0
 801a9e4:	0018      	movs	r0, r3
 801a9e6:	f7ff fe02 	bl	801a5ee <xtime>
 801a9ea:	0003      	movs	r3, r0
 801a9ec:	001a      	movs	r2, r3
 801a9ee:	002b      	movs	r3, r5
 801a9f0:	0018      	movs	r0, r3
 801a9f2:	18fb      	adds	r3, r7, r3
 801a9f4:	781b      	ldrb	r3, [r3, #0]
 801a9f6:	4053      	eors	r3, r2
 801a9f8:	b2dd      	uxtb	r5, r3
 801a9fa:	0003      	movs	r3, r0
 801a9fc:	18fb      	adds	r3, r7, r3
 801a9fe:	781b      	ldrb	r3, [r3, #0]
 801aa00:	0018      	movs	r0, r3
 801aa02:	f7ff fdf4 	bl	801a5ee <xtime>
 801aa06:	0003      	movs	r3, r0
 801aa08:	0018      	movs	r0, r3
 801aa0a:	f7ff fdf0 	bl	801a5ee <xtime>
 801aa0e:	0003      	movs	r3, r0
 801aa10:	0018      	movs	r0, r3
 801aa12:	f7ff fdec 	bl	801a5ee <xtime>
 801aa16:	0003      	movs	r3, r0
 801aa18:	406b      	eors	r3, r5
 801aa1a:	b2db      	uxtb	r3, r3
 801aa1c:	4063      	eors	r3, r4
 801aa1e:	b2dc      	uxtb	r4, r3
 801aa20:	2308      	movs	r3, #8
 801aa22:	001d      	movs	r5, r3
 801aa24:	18fb      	adds	r3, r7, r3
 801aa26:	781b      	ldrb	r3, [r3, #0]
 801aa28:	0018      	movs	r0, r3
 801aa2a:	f7ff fde0 	bl	801a5ee <xtime>
 801aa2e:	0003      	movs	r3, r0
 801aa30:	0018      	movs	r0, r3
 801aa32:	f7ff fddc 	bl	801a5ee <xtime>
 801aa36:	0003      	movs	r3, r0
 801aa38:	0018      	movs	r0, r3
 801aa3a:	f7ff fdd8 	bl	801a5ee <xtime>
 801aa3e:	0003      	movs	r3, r0
 801aa40:	001a      	movs	r2, r3
 801aa42:	002b      	movs	r3, r5
 801aa44:	18fb      	adds	r3, r7, r3
 801aa46:	781b      	ldrb	r3, [r3, #0]
 801aa48:	4053      	eors	r3, r2
 801aa4a:	b2db      	uxtb	r3, r3
 801aa4c:	4063      	eors	r3, r4
 801aa4e:	b2d9      	uxtb	r1, r3
 801aa50:	687b      	ldr	r3, [r7, #4]
 801aa52:	68fa      	ldr	r2, [r7, #12]
 801aa54:	0092      	lsls	r2, r2, #2
 801aa56:	54d1      	strb	r1, [r2, r3]
    (*state)[i][1] = Multiply(a, 0x09) ^ Multiply(b, 0x0e) ^ Multiply(c, 0x0b) ^ Multiply(d, 0x0d);
 801aa58:	19bb      	adds	r3, r7, r6
 801aa5a:	781b      	ldrb	r3, [r3, #0]
 801aa5c:	0018      	movs	r0, r3
 801aa5e:	f7ff fdc6 	bl	801a5ee <xtime>
 801aa62:	19bb      	adds	r3, r7, r6
 801aa64:	781b      	ldrb	r3, [r3, #0]
 801aa66:	0018      	movs	r0, r3
 801aa68:	f7ff fdc1 	bl	801a5ee <xtime>
 801aa6c:	0003      	movs	r3, r0
 801aa6e:	0018      	movs	r0, r3
 801aa70:	f7ff fdbd 	bl	801a5ee <xtime>
 801aa74:	19bb      	adds	r3, r7, r6
 801aa76:	781b      	ldrb	r3, [r3, #0]
 801aa78:	0018      	movs	r0, r3
 801aa7a:	f7ff fdb8 	bl	801a5ee <xtime>
 801aa7e:	0003      	movs	r3, r0
 801aa80:	0018      	movs	r0, r3
 801aa82:	f7ff fdb4 	bl	801a5ee <xtime>
 801aa86:	0003      	movs	r3, r0
 801aa88:	0018      	movs	r0, r3
 801aa8a:	f7ff fdb0 	bl	801a5ee <xtime>
 801aa8e:	0003      	movs	r3, r0
 801aa90:	0018      	movs	r0, r3
 801aa92:	f7ff fdac 	bl	801a5ee <xtime>
 801aa96:	210a      	movs	r1, #10
 801aa98:	000d      	movs	r5, r1
 801aa9a:	187b      	adds	r3, r7, r1
 801aa9c:	781b      	ldrb	r3, [r3, #0]
 801aa9e:	0018      	movs	r0, r3
 801aaa0:	f7ff fda5 	bl	801a5ee <xtime>
 801aaa4:	0003      	movs	r3, r0
 801aaa6:	0018      	movs	r0, r3
 801aaa8:	f7ff fda1 	bl	801a5ee <xtime>
 801aaac:	0003      	movs	r3, r0
 801aaae:	0018      	movs	r0, r3
 801aab0:	f7ff fd9d 	bl	801a5ee <xtime>
 801aab4:	0003      	movs	r3, r0
 801aab6:	0018      	movs	r0, r3
 801aab8:	f7ff fd99 	bl	801a5ee <xtime>
 801aabc:	2409      	movs	r4, #9
 801aabe:	193b      	adds	r3, r7, r4
 801aac0:	781b      	ldrb	r3, [r3, #0]
 801aac2:	0018      	movs	r0, r3
 801aac4:	f7ff fd93 	bl	801a5ee <xtime>
 801aac8:	0003      	movs	r3, r0
 801aaca:	0018      	movs	r0, r3
 801aacc:	f7ff fd8f 	bl	801a5ee <xtime>
 801aad0:	193b      	adds	r3, r7, r4
 801aad2:	781b      	ldrb	r3, [r3, #0]
 801aad4:	0018      	movs	r0, r3
 801aad6:	f7ff fd8a 	bl	801a5ee <xtime>
 801aada:	0003      	movs	r3, r0
 801aadc:	0018      	movs	r0, r3
 801aade:	f7ff fd86 	bl	801a5ee <xtime>
 801aae2:	0003      	movs	r3, r0
 801aae4:	0018      	movs	r0, r3
 801aae6:	f7ff fd82 	bl	801a5ee <xtime>
 801aaea:	0003      	movs	r3, r0
 801aaec:	0018      	movs	r0, r3
 801aaee:	f7ff fd7e 	bl	801a5ee <xtime>
 801aaf2:	2308      	movs	r3, #8
 801aaf4:	001c      	movs	r4, r3
 801aaf6:	18fb      	adds	r3, r7, r3
 801aaf8:	781b      	ldrb	r3, [r3, #0]
 801aafa:	0018      	movs	r0, r3
 801aafc:	f7ff fd77 	bl	801a5ee <xtime>
 801ab00:	0023      	movs	r3, r4
 801ab02:	18fb      	adds	r3, r7, r3
 801ab04:	781b      	ldrb	r3, [r3, #0]
 801ab06:	0018      	movs	r0, r3
 801ab08:	f7ff fd71 	bl	801a5ee <xtime>
 801ab0c:	0003      	movs	r3, r0
 801ab0e:	0018      	movs	r0, r3
 801ab10:	f7ff fd6d 	bl	801a5ee <xtime>
 801ab14:	0003      	movs	r3, r0
 801ab16:	0018      	movs	r0, r3
 801ab18:	f7ff fd69 	bl	801a5ee <xtime>
 801ab1c:	0003      	movs	r3, r0
 801ab1e:	0018      	movs	r0, r3
 801ab20:	f7ff fd65 	bl	801a5ee <xtime>
 801ab24:	19bb      	adds	r3, r7, r6
 801ab26:	781b      	ldrb	r3, [r3, #0]
 801ab28:	0018      	movs	r0, r3
 801ab2a:	f7ff fd60 	bl	801a5ee <xtime>
 801ab2e:	0003      	movs	r3, r0
 801ab30:	0018      	movs	r0, r3
 801ab32:	f7ff fd5c 	bl	801a5ee <xtime>
 801ab36:	0003      	movs	r3, r0
 801ab38:	0018      	movs	r0, r3
 801ab3a:	f7ff fd58 	bl	801a5ee <xtime>
 801ab3e:	0003      	movs	r3, r0
 801ab40:	001a      	movs	r2, r3
 801ab42:	19bb      	adds	r3, r7, r6
 801ab44:	781b      	ldrb	r3, [r3, #0]
 801ab46:	4053      	eors	r3, r2
 801ab48:	b2dc      	uxtb	r4, r3
 801ab4a:	197b      	adds	r3, r7, r5
 801ab4c:	781b      	ldrb	r3, [r3, #0]
 801ab4e:	0018      	movs	r0, r3
 801ab50:	f7ff fd4d 	bl	801a5ee <xtime>
 801ab54:	0003      	movs	r3, r0
 801ab56:	001d      	movs	r5, r3
 801ab58:	230a      	movs	r3, #10
 801ab5a:	18fb      	adds	r3, r7, r3
 801ab5c:	781b      	ldrb	r3, [r3, #0]
 801ab5e:	0018      	movs	r0, r3
 801ab60:	f7ff fd45 	bl	801a5ee <xtime>
 801ab64:	0003      	movs	r3, r0
 801ab66:	0018      	movs	r0, r3
 801ab68:	f7ff fd41 	bl	801a5ee <xtime>
 801ab6c:	0003      	movs	r3, r0
 801ab6e:	406b      	eors	r3, r5
 801ab70:	b2dd      	uxtb	r5, r3
 801ab72:	230a      	movs	r3, #10
 801ab74:	18fb      	adds	r3, r7, r3
 801ab76:	781b      	ldrb	r3, [r3, #0]
 801ab78:	0018      	movs	r0, r3
 801ab7a:	f7ff fd38 	bl	801a5ee <xtime>
 801ab7e:	0003      	movs	r3, r0
 801ab80:	0018      	movs	r0, r3
 801ab82:	f7ff fd34 	bl	801a5ee <xtime>
 801ab86:	0003      	movs	r3, r0
 801ab88:	0018      	movs	r0, r3
 801ab8a:	f7ff fd30 	bl	801a5ee <xtime>
 801ab8e:	0003      	movs	r3, r0
 801ab90:	406b      	eors	r3, r5
 801ab92:	b2db      	uxtb	r3, r3
 801ab94:	4063      	eors	r3, r4
 801ab96:	b2dc      	uxtb	r4, r3
 801ab98:	2209      	movs	r2, #9
 801ab9a:	0015      	movs	r5, r2
 801ab9c:	18bb      	adds	r3, r7, r2
 801ab9e:	781b      	ldrb	r3, [r3, #0]
 801aba0:	0018      	movs	r0, r3
 801aba2:	f7ff fd24 	bl	801a5ee <xtime>
 801aba6:	0003      	movs	r3, r0
 801aba8:	001a      	movs	r2, r3
 801abaa:	0029      	movs	r1, r5
 801abac:	187b      	adds	r3, r7, r1
 801abae:	781b      	ldrb	r3, [r3, #0]
 801abb0:	4053      	eors	r3, r2
 801abb2:	b2dd      	uxtb	r5, r3
 801abb4:	187b      	adds	r3, r7, r1
 801abb6:	781b      	ldrb	r3, [r3, #0]
 801abb8:	0018      	movs	r0, r3
 801abba:	f7ff fd18 	bl	801a5ee <xtime>
 801abbe:	0003      	movs	r3, r0
 801abc0:	0018      	movs	r0, r3
 801abc2:	f7ff fd14 	bl	801a5ee <xtime>
 801abc6:	0003      	movs	r3, r0
 801abc8:	0018      	movs	r0, r3
 801abca:	f7ff fd10 	bl	801a5ee <xtime>
 801abce:	0003      	movs	r3, r0
 801abd0:	406b      	eors	r3, r5
 801abd2:	b2db      	uxtb	r3, r3
 801abd4:	4063      	eors	r3, r4
 801abd6:	b2dc      	uxtb	r4, r3
 801abd8:	2208      	movs	r2, #8
 801abda:	0015      	movs	r5, r2
 801abdc:	18bb      	adds	r3, r7, r2
 801abde:	781b      	ldrb	r3, [r3, #0]
 801abe0:	0018      	movs	r0, r3
 801abe2:	f7ff fd04 	bl	801a5ee <xtime>
 801abe6:	0003      	movs	r3, r0
 801abe8:	0018      	movs	r0, r3
 801abea:	f7ff fd00 	bl	801a5ee <xtime>
 801abee:	0003      	movs	r3, r0
 801abf0:	001a      	movs	r2, r3
 801abf2:	0028      	movs	r0, r5
 801abf4:	183b      	adds	r3, r7, r0
 801abf6:	781b      	ldrb	r3, [r3, #0]
 801abf8:	4053      	eors	r3, r2
 801abfa:	b2dd      	uxtb	r5, r3
 801abfc:	0002      	movs	r2, r0
 801abfe:	18bb      	adds	r3, r7, r2
 801ac00:	781b      	ldrb	r3, [r3, #0]
 801ac02:	0018      	movs	r0, r3
 801ac04:	f7ff fcf3 	bl	801a5ee <xtime>
 801ac08:	0003      	movs	r3, r0
 801ac0a:	0018      	movs	r0, r3
 801ac0c:	f7ff fcef 	bl	801a5ee <xtime>
 801ac10:	0003      	movs	r3, r0
 801ac12:	0018      	movs	r0, r3
 801ac14:	f7ff fceb 	bl	801a5ee <xtime>
 801ac18:	0003      	movs	r3, r0
 801ac1a:	406b      	eors	r3, r5
 801ac1c:	b2db      	uxtb	r3, r3
 801ac1e:	4063      	eors	r3, r4
 801ac20:	b2d9      	uxtb	r1, r3
 801ac22:	687a      	ldr	r2, [r7, #4]
 801ac24:	68fb      	ldr	r3, [r7, #12]
 801ac26:	009b      	lsls	r3, r3, #2
 801ac28:	18d3      	adds	r3, r2, r3
 801ac2a:	3301      	adds	r3, #1
 801ac2c:	1c0a      	adds	r2, r1, #0
 801ac2e:	701a      	strb	r2, [r3, #0]
    (*state)[i][2] = Multiply(a, 0x0d) ^ Multiply(b, 0x09) ^ Multiply(c, 0x0e) ^ Multiply(d, 0x0b);
 801ac30:	19bb      	adds	r3, r7, r6
 801ac32:	781b      	ldrb	r3, [r3, #0]
 801ac34:	0018      	movs	r0, r3
 801ac36:	f7ff fcda 	bl	801a5ee <xtime>
 801ac3a:	19bb      	adds	r3, r7, r6
 801ac3c:	781b      	ldrb	r3, [r3, #0]
 801ac3e:	0018      	movs	r0, r3
 801ac40:	f7ff fcd5 	bl	801a5ee <xtime>
 801ac44:	0003      	movs	r3, r0
 801ac46:	0018      	movs	r0, r3
 801ac48:	f7ff fcd1 	bl	801a5ee <xtime>
 801ac4c:	0003      	movs	r3, r0
 801ac4e:	0018      	movs	r0, r3
 801ac50:	f7ff fccd 	bl	801a5ee <xtime>
 801ac54:	0003      	movs	r3, r0
 801ac56:	0018      	movs	r0, r3
 801ac58:	f7ff fcc9 	bl	801a5ee <xtime>
 801ac5c:	250a      	movs	r5, #10
 801ac5e:	197b      	adds	r3, r7, r5
 801ac60:	781b      	ldrb	r3, [r3, #0]
 801ac62:	0018      	movs	r0, r3
 801ac64:	f7ff fcc3 	bl	801a5ee <xtime>
 801ac68:	197b      	adds	r3, r7, r5
 801ac6a:	781b      	ldrb	r3, [r3, #0]
 801ac6c:	0018      	movs	r0, r3
 801ac6e:	f7ff fcbe 	bl	801a5ee <xtime>
 801ac72:	0003      	movs	r3, r0
 801ac74:	0018      	movs	r0, r3
 801ac76:	f7ff fcba 	bl	801a5ee <xtime>
 801ac7a:	197b      	adds	r3, r7, r5
 801ac7c:	781b      	ldrb	r3, [r3, #0]
 801ac7e:	0018      	movs	r0, r3
 801ac80:	f7ff fcb5 	bl	801a5ee <xtime>
 801ac84:	0003      	movs	r3, r0
 801ac86:	0018      	movs	r0, r3
 801ac88:	f7ff fcb1 	bl	801a5ee <xtime>
 801ac8c:	0003      	movs	r3, r0
 801ac8e:	0018      	movs	r0, r3
 801ac90:	f7ff fcad 	bl	801a5ee <xtime>
 801ac94:	0003      	movs	r3, r0
 801ac96:	0018      	movs	r0, r3
 801ac98:	f7ff fca9 	bl	801a5ee <xtime>
 801ac9c:	2109      	movs	r1, #9
 801ac9e:	187b      	adds	r3, r7, r1
 801aca0:	781b      	ldrb	r3, [r3, #0]
 801aca2:	0018      	movs	r0, r3
 801aca4:	f7ff fca3 	bl	801a5ee <xtime>
 801aca8:	0003      	movs	r3, r0
 801acaa:	0018      	movs	r0, r3
 801acac:	f7ff fc9f 	bl	801a5ee <xtime>
 801acb0:	0003      	movs	r3, r0
 801acb2:	0018      	movs	r0, r3
 801acb4:	f7ff fc9b 	bl	801a5ee <xtime>
 801acb8:	0003      	movs	r3, r0
 801acba:	0018      	movs	r0, r3
 801acbc:	f7ff fc97 	bl	801a5ee <xtime>
 801acc0:	2408      	movs	r4, #8
 801acc2:	193b      	adds	r3, r7, r4
 801acc4:	781b      	ldrb	r3, [r3, #0]
 801acc6:	0018      	movs	r0, r3
 801acc8:	f7ff fc91 	bl	801a5ee <xtime>
 801accc:	0003      	movs	r3, r0
 801acce:	0018      	movs	r0, r3
 801acd0:	f7ff fc8d 	bl	801a5ee <xtime>
 801acd4:	193b      	adds	r3, r7, r4
 801acd6:	781b      	ldrb	r3, [r3, #0]
 801acd8:	0018      	movs	r0, r3
 801acda:	f7ff fc88 	bl	801a5ee <xtime>
 801acde:	0003      	movs	r3, r0
 801ace0:	0018      	movs	r0, r3
 801ace2:	f7ff fc84 	bl	801a5ee <xtime>
 801ace6:	0003      	movs	r3, r0
 801ace8:	0018      	movs	r0, r3
 801acea:	f7ff fc80 	bl	801a5ee <xtime>
 801acee:	0003      	movs	r3, r0
 801acf0:	0018      	movs	r0, r3
 801acf2:	f7ff fc7c 	bl	801a5ee <xtime>
 801acf6:	19bb      	adds	r3, r7, r6
 801acf8:	781b      	ldrb	r3, [r3, #0]
 801acfa:	0018      	movs	r0, r3
 801acfc:	f7ff fc77 	bl	801a5ee <xtime>
 801ad00:	0003      	movs	r3, r0
 801ad02:	0018      	movs	r0, r3
 801ad04:	f7ff fc73 	bl	801a5ee <xtime>
 801ad08:	0003      	movs	r3, r0
 801ad0a:	001a      	movs	r2, r3
 801ad0c:	19bb      	adds	r3, r7, r6
 801ad0e:	781b      	ldrb	r3, [r3, #0]
 801ad10:	4053      	eors	r3, r2
 801ad12:	b2dc      	uxtb	r4, r3
 801ad14:	19bb      	adds	r3, r7, r6
 801ad16:	781b      	ldrb	r3, [r3, #0]
 801ad18:	0018      	movs	r0, r3
 801ad1a:	f7ff fc68 	bl	801a5ee <xtime>
 801ad1e:	0003      	movs	r3, r0
 801ad20:	0018      	movs	r0, r3
 801ad22:	f7ff fc64 	bl	801a5ee <xtime>
 801ad26:	0003      	movs	r3, r0
 801ad28:	0018      	movs	r0, r3
 801ad2a:	f7ff fc60 	bl	801a5ee <xtime>
 801ad2e:	0003      	movs	r3, r0
 801ad30:	4063      	eors	r3, r4
 801ad32:	b2dc      	uxtb	r4, r3
 801ad34:	197b      	adds	r3, r7, r5
 801ad36:	781b      	ldrb	r3, [r3, #0]
 801ad38:	0018      	movs	r0, r3
 801ad3a:	f7ff fc58 	bl	801a5ee <xtime>
 801ad3e:	0003      	movs	r3, r0
 801ad40:	0018      	movs	r0, r3
 801ad42:	f7ff fc54 	bl	801a5ee <xtime>
 801ad46:	0003      	movs	r3, r0
 801ad48:	0018      	movs	r0, r3
 801ad4a:	f7ff fc50 	bl	801a5ee <xtime>
 801ad4e:	0003      	movs	r3, r0
 801ad50:	001a      	movs	r2, r3
 801ad52:	197b      	adds	r3, r7, r5
 801ad54:	781b      	ldrb	r3, [r3, #0]
 801ad56:	4053      	eors	r3, r2
 801ad58:	b2db      	uxtb	r3, r3
 801ad5a:	4063      	eors	r3, r4
 801ad5c:	b2dc      	uxtb	r4, r3
 801ad5e:	2109      	movs	r1, #9
 801ad60:	187b      	adds	r3, r7, r1
 801ad62:	781b      	ldrb	r3, [r3, #0]
 801ad64:	0018      	movs	r0, r3
 801ad66:	f7ff fc42 	bl	801a5ee <xtime>
 801ad6a:	0003      	movs	r3, r0
 801ad6c:	001d      	movs	r5, r3
 801ad6e:	2109      	movs	r1, #9
 801ad70:	187b      	adds	r3, r7, r1
 801ad72:	781b      	ldrb	r3, [r3, #0]
 801ad74:	0018      	movs	r0, r3
 801ad76:	f7ff fc3a 	bl	801a5ee <xtime>
 801ad7a:	0003      	movs	r3, r0
 801ad7c:	0018      	movs	r0, r3
 801ad7e:	f7ff fc36 	bl	801a5ee <xtime>
 801ad82:	0003      	movs	r3, r0
 801ad84:	406b      	eors	r3, r5
 801ad86:	b2dd      	uxtb	r5, r3
 801ad88:	2109      	movs	r1, #9
 801ad8a:	187b      	adds	r3, r7, r1
 801ad8c:	781b      	ldrb	r3, [r3, #0]
 801ad8e:	0018      	movs	r0, r3
 801ad90:	f7ff fc2d 	bl	801a5ee <xtime>
 801ad94:	0003      	movs	r3, r0
 801ad96:	0018      	movs	r0, r3
 801ad98:	f7ff fc29 	bl	801a5ee <xtime>
 801ad9c:	0003      	movs	r3, r0
 801ad9e:	0018      	movs	r0, r3
 801ada0:	f7ff fc25 	bl	801a5ee <xtime>
 801ada4:	0003      	movs	r3, r0
 801ada6:	406b      	eors	r3, r5
 801ada8:	b2db      	uxtb	r3, r3
 801adaa:	4063      	eors	r3, r4
 801adac:	b2dc      	uxtb	r4, r3
 801adae:	2308      	movs	r3, #8
 801adb0:	001d      	movs	r5, r3
 801adb2:	18fb      	adds	r3, r7, r3
 801adb4:	781b      	ldrb	r3, [r3, #0]
 801adb6:	0018      	movs	r0, r3
 801adb8:	f7ff fc19 	bl	801a5ee <xtime>
 801adbc:	0003      	movs	r3, r0
 801adbe:	001a      	movs	r2, r3
 801adc0:	0028      	movs	r0, r5
 801adc2:	183b      	adds	r3, r7, r0
 801adc4:	781b      	ldrb	r3, [r3, #0]
 801adc6:	4053      	eors	r3, r2
 801adc8:	b2dd      	uxtb	r5, r3
 801adca:	0003      	movs	r3, r0
 801adcc:	18fb      	adds	r3, r7, r3
 801adce:	781b      	ldrb	r3, [r3, #0]
 801add0:	0018      	movs	r0, r3
 801add2:	f7ff fc0c 	bl	801a5ee <xtime>
 801add6:	0003      	movs	r3, r0
 801add8:	0018      	movs	r0, r3
 801adda:	f7ff fc08 	bl	801a5ee <xtime>
 801adde:	0003      	movs	r3, r0
 801ade0:	0018      	movs	r0, r3
 801ade2:	f7ff fc04 	bl	801a5ee <xtime>
 801ade6:	0003      	movs	r3, r0
 801ade8:	406b      	eors	r3, r5
 801adea:	b2db      	uxtb	r3, r3
 801adec:	4063      	eors	r3, r4
 801adee:	b2d9      	uxtb	r1, r3
 801adf0:	687a      	ldr	r2, [r7, #4]
 801adf2:	68fb      	ldr	r3, [r7, #12]
 801adf4:	009b      	lsls	r3, r3, #2
 801adf6:	18d3      	adds	r3, r2, r3
 801adf8:	3302      	adds	r3, #2
 801adfa:	1c0a      	adds	r2, r1, #0
 801adfc:	701a      	strb	r2, [r3, #0]
    (*state)[i][3] = Multiply(a, 0x0b) ^ Multiply(b, 0x0d) ^ Multiply(c, 0x09) ^ Multiply(d, 0x0e);
 801adfe:	19bb      	adds	r3, r7, r6
 801ae00:	781b      	ldrb	r3, [r3, #0]
 801ae02:	0018      	movs	r0, r3
 801ae04:	f7ff fbf3 	bl	801a5ee <xtime>
 801ae08:	0003      	movs	r3, r0
 801ae0a:	0018      	movs	r0, r3
 801ae0c:	f7ff fbef 	bl	801a5ee <xtime>
 801ae10:	19bb      	adds	r3, r7, r6
 801ae12:	781b      	ldrb	r3, [r3, #0]
 801ae14:	0018      	movs	r0, r3
 801ae16:	f7ff fbea 	bl	801a5ee <xtime>
 801ae1a:	0003      	movs	r3, r0
 801ae1c:	0018      	movs	r0, r3
 801ae1e:	f7ff fbe6 	bl	801a5ee <xtime>
 801ae22:	0003      	movs	r3, r0
 801ae24:	0018      	movs	r0, r3
 801ae26:	f7ff fbe2 	bl	801a5ee <xtime>
 801ae2a:	0003      	movs	r3, r0
 801ae2c:	0018      	movs	r0, r3
 801ae2e:	f7ff fbde 	bl	801a5ee <xtime>
 801ae32:	250a      	movs	r5, #10
 801ae34:	197b      	adds	r3, r7, r5
 801ae36:	781b      	ldrb	r3, [r3, #0]
 801ae38:	0018      	movs	r0, r3
 801ae3a:	f7ff fbd8 	bl	801a5ee <xtime>
 801ae3e:	197b      	adds	r3, r7, r5
 801ae40:	781b      	ldrb	r3, [r3, #0]
 801ae42:	0018      	movs	r0, r3
 801ae44:	f7ff fbd3 	bl	801a5ee <xtime>
 801ae48:	0003      	movs	r3, r0
 801ae4a:	0018      	movs	r0, r3
 801ae4c:	f7ff fbcf 	bl	801a5ee <xtime>
 801ae50:	0003      	movs	r3, r0
 801ae52:	0018      	movs	r0, r3
 801ae54:	f7ff fbcb 	bl	801a5ee <xtime>
 801ae58:	0003      	movs	r3, r0
 801ae5a:	0018      	movs	r0, r3
 801ae5c:	f7ff fbc7 	bl	801a5ee <xtime>
 801ae60:	2109      	movs	r1, #9
 801ae62:	000c      	movs	r4, r1
 801ae64:	187b      	adds	r3, r7, r1
 801ae66:	781b      	ldrb	r3, [r3, #0]
 801ae68:	0018      	movs	r0, r3
 801ae6a:	f7ff fbc0 	bl	801a5ee <xtime>
 801ae6e:	193b      	adds	r3, r7, r4
 801ae70:	781b      	ldrb	r3, [r3, #0]
 801ae72:	0018      	movs	r0, r3
 801ae74:	f7ff fbbb 	bl	801a5ee <xtime>
 801ae78:	0003      	movs	r3, r0
 801ae7a:	0018      	movs	r0, r3
 801ae7c:	f7ff fbb7 	bl	801a5ee <xtime>
 801ae80:	193b      	adds	r3, r7, r4
 801ae82:	781b      	ldrb	r3, [r3, #0]
 801ae84:	0018      	movs	r0, r3
 801ae86:	f7ff fbb2 	bl	801a5ee <xtime>
 801ae8a:	0003      	movs	r3, r0
 801ae8c:	0018      	movs	r0, r3
 801ae8e:	f7ff fbae 	bl	801a5ee <xtime>
 801ae92:	0003      	movs	r3, r0
 801ae94:	0018      	movs	r0, r3
 801ae96:	f7ff fbaa 	bl	801a5ee <xtime>
 801ae9a:	0003      	movs	r3, r0
 801ae9c:	0018      	movs	r0, r3
 801ae9e:	f7ff fba6 	bl	801a5ee <xtime>
 801aea2:	2308      	movs	r3, #8
 801aea4:	18fb      	adds	r3, r7, r3
 801aea6:	781b      	ldrb	r3, [r3, #0]
 801aea8:	0018      	movs	r0, r3
 801aeaa:	f7ff fba0 	bl	801a5ee <xtime>
 801aeae:	0003      	movs	r3, r0
 801aeb0:	0018      	movs	r0, r3
 801aeb2:	f7ff fb9c 	bl	801a5ee <xtime>
 801aeb6:	0003      	movs	r3, r0
 801aeb8:	0018      	movs	r0, r3
 801aeba:	f7ff fb98 	bl	801a5ee <xtime>
 801aebe:	0003      	movs	r3, r0
 801aec0:	0018      	movs	r0, r3
 801aec2:	f7ff fb94 	bl	801a5ee <xtime>
 801aec6:	19bb      	adds	r3, r7, r6
 801aec8:	781b      	ldrb	r3, [r3, #0]
 801aeca:	0018      	movs	r0, r3
 801aecc:	f7ff fb8f 	bl	801a5ee <xtime>
 801aed0:	0003      	movs	r3, r0
 801aed2:	001a      	movs	r2, r3
 801aed4:	19bb      	adds	r3, r7, r6
 801aed6:	781b      	ldrb	r3, [r3, #0]
 801aed8:	4053      	eors	r3, r2
 801aeda:	b2dc      	uxtb	r4, r3
 801aedc:	19bb      	adds	r3, r7, r6
 801aede:	781b      	ldrb	r3, [r3, #0]
 801aee0:	0018      	movs	r0, r3
 801aee2:	f7ff fb84 	bl	801a5ee <xtime>
 801aee6:	0003      	movs	r3, r0
 801aee8:	0018      	movs	r0, r3
 801aeea:	f7ff fb80 	bl	801a5ee <xtime>
 801aeee:	0003      	movs	r3, r0
 801aef0:	0018      	movs	r0, r3
 801aef2:	f7ff fb7c 	bl	801a5ee <xtime>
 801aef6:	0003      	movs	r3, r0
 801aef8:	4063      	eors	r3, r4
 801aefa:	b2dc      	uxtb	r4, r3
 801aefc:	197b      	adds	r3, r7, r5
 801aefe:	781b      	ldrb	r3, [r3, #0]
 801af00:	0018      	movs	r0, r3
 801af02:	f7ff fb74 	bl	801a5ee <xtime>
 801af06:	0003      	movs	r3, r0
 801af08:	0018      	movs	r0, r3
 801af0a:	f7ff fb70 	bl	801a5ee <xtime>
 801af0e:	0003      	movs	r3, r0
 801af10:	001a      	movs	r2, r3
 801af12:	0029      	movs	r1, r5
 801af14:	197b      	adds	r3, r7, r5
 801af16:	781b      	ldrb	r3, [r3, #0]
 801af18:	4053      	eors	r3, r2
 801af1a:	b2dd      	uxtb	r5, r3
 801af1c:	187b      	adds	r3, r7, r1
 801af1e:	781b      	ldrb	r3, [r3, #0]
 801af20:	0018      	movs	r0, r3
 801af22:	f7ff fb64 	bl	801a5ee <xtime>
 801af26:	0003      	movs	r3, r0
 801af28:	0018      	movs	r0, r3
 801af2a:	f7ff fb60 	bl	801a5ee <xtime>
 801af2e:	0003      	movs	r3, r0
 801af30:	0018      	movs	r0, r3
 801af32:	f7ff fb5c 	bl	801a5ee <xtime>
 801af36:	0003      	movs	r3, r0
 801af38:	406b      	eors	r3, r5
 801af3a:	b2db      	uxtb	r3, r3
 801af3c:	4063      	eors	r3, r4
 801af3e:	b2dc      	uxtb	r4, r3
 801af40:	2509      	movs	r5, #9
 801af42:	197b      	adds	r3, r7, r5
 801af44:	781b      	ldrb	r3, [r3, #0]
 801af46:	0018      	movs	r0, r3
 801af48:	f7ff fb51 	bl	801a5ee <xtime>
 801af4c:	0003      	movs	r3, r0
 801af4e:	0018      	movs	r0, r3
 801af50:	f7ff fb4d 	bl	801a5ee <xtime>
 801af54:	0003      	movs	r3, r0
 801af56:	0018      	movs	r0, r3
 801af58:	f7ff fb49 	bl	801a5ee <xtime>
 801af5c:	0003      	movs	r3, r0
 801af5e:	001a      	movs	r2, r3
 801af60:	197b      	adds	r3, r7, r5
 801af62:	781b      	ldrb	r3, [r3, #0]
 801af64:	4053      	eors	r3, r2
 801af66:	b2db      	uxtb	r3, r3
 801af68:	4063      	eors	r3, r4
 801af6a:	b2dc      	uxtb	r4, r3
 801af6c:	2608      	movs	r6, #8
 801af6e:	19bb      	adds	r3, r7, r6
 801af70:	781b      	ldrb	r3, [r3, #0]
 801af72:	0018      	movs	r0, r3
 801af74:	f7ff fb3b 	bl	801a5ee <xtime>
 801af78:	0003      	movs	r3, r0
 801af7a:	001d      	movs	r5, r3
 801af7c:	19bb      	adds	r3, r7, r6
 801af7e:	781b      	ldrb	r3, [r3, #0]
 801af80:	0018      	movs	r0, r3
 801af82:	f7ff fb34 	bl	801a5ee <xtime>
 801af86:	0003      	movs	r3, r0
 801af88:	0018      	movs	r0, r3
 801af8a:	f7ff fb30 	bl	801a5ee <xtime>
 801af8e:	0003      	movs	r3, r0
 801af90:	406b      	eors	r3, r5
 801af92:	b2dd      	uxtb	r5, r3
 801af94:	19bb      	adds	r3, r7, r6
 801af96:	781b      	ldrb	r3, [r3, #0]
 801af98:	0018      	movs	r0, r3
 801af9a:	f7ff fb28 	bl	801a5ee <xtime>
 801af9e:	0003      	movs	r3, r0
 801afa0:	0018      	movs	r0, r3
 801afa2:	f7ff fb24 	bl	801a5ee <xtime>
 801afa6:	0003      	movs	r3, r0
 801afa8:	0018      	movs	r0, r3
 801afaa:	f7ff fb20 	bl	801a5ee <xtime>
 801afae:	0003      	movs	r3, r0
 801afb0:	406b      	eors	r3, r5
 801afb2:	b2db      	uxtb	r3, r3
 801afb4:	4063      	eors	r3, r4
 801afb6:	b2d9      	uxtb	r1, r3
 801afb8:	687a      	ldr	r2, [r7, #4]
 801afba:	68fb      	ldr	r3, [r7, #12]
 801afbc:	009b      	lsls	r3, r3, #2
 801afbe:	18d3      	adds	r3, r2, r3
 801afc0:	3303      	adds	r3, #3
 801afc2:	1c0a      	adds	r2, r1, #0
 801afc4:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < 4; ++i)
 801afc6:	68fb      	ldr	r3, [r7, #12]
 801afc8:	3301      	adds	r3, #1
 801afca:	60fb      	str	r3, [r7, #12]
 801afcc:	68fb      	ldr	r3, [r7, #12]
 801afce:	2b03      	cmp	r3, #3
 801afd0:	dc00      	bgt.n	801afd4 <InvMixColumns+0x79e>
 801afd2:	e437      	b.n	801a844 <InvMixColumns+0xe>
  }
}
 801afd4:	46c0      	nop			; (mov r8, r8)
 801afd6:	46bd      	mov	sp, r7
 801afd8:	b005      	add	sp, #20
 801afda:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801afdc <InvSubBytes>:


// The SubBytes Function Substitutes the values in the
// state matrix with values in an S-box.
static void InvSubBytes(state_t* state)
{
 801afdc:	b5b0      	push	{r4, r5, r7, lr}
 801afde:	b084      	sub	sp, #16
 801afe0:	af00      	add	r7, sp, #0
 801afe2:	6078      	str	r0, [r7, #4]
  uint8_t i, j;
  for (i = 0; i < 4; ++i)
 801afe4:	230f      	movs	r3, #15
 801afe6:	18fb      	adds	r3, r7, r3
 801afe8:	2200      	movs	r2, #0
 801afea:	701a      	strb	r2, [r3, #0]
 801afec:	e02a      	b.n	801b044 <InvSubBytes+0x68>
  {
    for (j = 0; j < 4; ++j)
 801afee:	230e      	movs	r3, #14
 801aff0:	18fb      	adds	r3, r7, r3
 801aff2:	2200      	movs	r2, #0
 801aff4:	701a      	strb	r2, [r3, #0]
 801aff6:	e01a      	b.n	801b02e <InvSubBytes+0x52>
    {
      (*state)[j][i] = getSBoxInvert((*state)[j][i]);
 801aff8:	240e      	movs	r4, #14
 801affa:	193b      	adds	r3, r7, r4
 801affc:	781a      	ldrb	r2, [r3, #0]
 801affe:	250f      	movs	r5, #15
 801b000:	197b      	adds	r3, r7, r5
 801b002:	781b      	ldrb	r3, [r3, #0]
 801b004:	6879      	ldr	r1, [r7, #4]
 801b006:	0092      	lsls	r2, r2, #2
 801b008:	188a      	adds	r2, r1, r2
 801b00a:	5cd3      	ldrb	r3, [r2, r3]
 801b00c:	0018      	movs	r0, r3
 801b00e:	193b      	adds	r3, r7, r4
 801b010:	781a      	ldrb	r2, [r3, #0]
 801b012:	197b      	adds	r3, r7, r5
 801b014:	781b      	ldrb	r3, [r3, #0]
 801b016:	4910      	ldr	r1, [pc, #64]	; (801b058 <InvSubBytes+0x7c>)
 801b018:	5c08      	ldrb	r0, [r1, r0]
 801b01a:	6879      	ldr	r1, [r7, #4]
 801b01c:	0092      	lsls	r2, r2, #2
 801b01e:	188a      	adds	r2, r1, r2
 801b020:	1c01      	adds	r1, r0, #0
 801b022:	54d1      	strb	r1, [r2, r3]
    for (j = 0; j < 4; ++j)
 801b024:	193b      	adds	r3, r7, r4
 801b026:	193a      	adds	r2, r7, r4
 801b028:	7812      	ldrb	r2, [r2, #0]
 801b02a:	3201      	adds	r2, #1
 801b02c:	701a      	strb	r2, [r3, #0]
 801b02e:	230e      	movs	r3, #14
 801b030:	18fb      	adds	r3, r7, r3
 801b032:	781b      	ldrb	r3, [r3, #0]
 801b034:	2b03      	cmp	r3, #3
 801b036:	d9df      	bls.n	801aff8 <InvSubBytes+0x1c>
  for (i = 0; i < 4; ++i)
 801b038:	220f      	movs	r2, #15
 801b03a:	18bb      	adds	r3, r7, r2
 801b03c:	18ba      	adds	r2, r7, r2
 801b03e:	7812      	ldrb	r2, [r2, #0]
 801b040:	3201      	adds	r2, #1
 801b042:	701a      	strb	r2, [r3, #0]
 801b044:	230f      	movs	r3, #15
 801b046:	18fb      	adds	r3, r7, r3
 801b048:	781b      	ldrb	r3, [r3, #0]
 801b04a:	2b03      	cmp	r3, #3
 801b04c:	d9cf      	bls.n	801afee <InvSubBytes+0x12>
    }
  }
}
 801b04e:	46c0      	nop			; (mov r8, r8)
 801b050:	46bd      	mov	sp, r7
 801b052:	b004      	add	sp, #16
 801b054:	bdb0      	pop	{r4, r5, r7, pc}
 801b056:	46c0      	nop			; (mov r8, r8)
 801b058:	08021218 	.word	0x08021218

0801b05c <InvShiftRows>:

static void InvShiftRows(state_t* state)
{
 801b05c:	b580      	push	{r7, lr}
 801b05e:	b084      	sub	sp, #16
 801b060:	af00      	add	r7, sp, #0
 801b062:	6078      	str	r0, [r7, #4]
  uint8_t temp;

  // Rotate first row 1 columns to right
  temp = (*state)[3][1];
 801b064:	210f      	movs	r1, #15
 801b066:	187b      	adds	r3, r7, r1
 801b068:	687a      	ldr	r2, [r7, #4]
 801b06a:	7b52      	ldrb	r2, [r2, #13]
 801b06c:	701a      	strb	r2, [r3, #0]
  (*state)[3][1] = (*state)[2][1];
 801b06e:	687b      	ldr	r3, [r7, #4]
 801b070:	7a5a      	ldrb	r2, [r3, #9]
 801b072:	687b      	ldr	r3, [r7, #4]
 801b074:	735a      	strb	r2, [r3, #13]
  (*state)[2][1] = (*state)[1][1];
 801b076:	687b      	ldr	r3, [r7, #4]
 801b078:	795a      	ldrb	r2, [r3, #5]
 801b07a:	687b      	ldr	r3, [r7, #4]
 801b07c:	725a      	strb	r2, [r3, #9]
  (*state)[1][1] = (*state)[0][1];
 801b07e:	687b      	ldr	r3, [r7, #4]
 801b080:	785a      	ldrb	r2, [r3, #1]
 801b082:	687b      	ldr	r3, [r7, #4]
 801b084:	715a      	strb	r2, [r3, #5]
  (*state)[0][1] = temp;
 801b086:	687b      	ldr	r3, [r7, #4]
 801b088:	187a      	adds	r2, r7, r1
 801b08a:	7812      	ldrb	r2, [r2, #0]
 801b08c:	705a      	strb	r2, [r3, #1]

  // Rotate second row 2 columns to right
  temp = (*state)[0][2];
 801b08e:	187b      	adds	r3, r7, r1
 801b090:	687a      	ldr	r2, [r7, #4]
 801b092:	7892      	ldrb	r2, [r2, #2]
 801b094:	701a      	strb	r2, [r3, #0]
  (*state)[0][2] = (*state)[2][2];
 801b096:	687b      	ldr	r3, [r7, #4]
 801b098:	7a9a      	ldrb	r2, [r3, #10]
 801b09a:	687b      	ldr	r3, [r7, #4]
 801b09c:	709a      	strb	r2, [r3, #2]
  (*state)[2][2] = temp;
 801b09e:	687b      	ldr	r3, [r7, #4]
 801b0a0:	187a      	adds	r2, r7, r1
 801b0a2:	7812      	ldrb	r2, [r2, #0]
 801b0a4:	729a      	strb	r2, [r3, #10]

  temp = (*state)[1][2];
 801b0a6:	187b      	adds	r3, r7, r1
 801b0a8:	687a      	ldr	r2, [r7, #4]
 801b0aa:	7992      	ldrb	r2, [r2, #6]
 801b0ac:	701a      	strb	r2, [r3, #0]
  (*state)[1][2] = (*state)[3][2];
 801b0ae:	687b      	ldr	r3, [r7, #4]
 801b0b0:	7b9a      	ldrb	r2, [r3, #14]
 801b0b2:	687b      	ldr	r3, [r7, #4]
 801b0b4:	719a      	strb	r2, [r3, #6]
  (*state)[3][2] = temp;
 801b0b6:	687b      	ldr	r3, [r7, #4]
 801b0b8:	187a      	adds	r2, r7, r1
 801b0ba:	7812      	ldrb	r2, [r2, #0]
 801b0bc:	739a      	strb	r2, [r3, #14]

  // Rotate third row 3 columns to right
  temp = (*state)[0][3];
 801b0be:	187b      	adds	r3, r7, r1
 801b0c0:	687a      	ldr	r2, [r7, #4]
 801b0c2:	78d2      	ldrb	r2, [r2, #3]
 801b0c4:	701a      	strb	r2, [r3, #0]
  (*state)[0][3] = (*state)[1][3];
 801b0c6:	687b      	ldr	r3, [r7, #4]
 801b0c8:	79da      	ldrb	r2, [r3, #7]
 801b0ca:	687b      	ldr	r3, [r7, #4]
 801b0cc:	70da      	strb	r2, [r3, #3]
  (*state)[1][3] = (*state)[2][3];
 801b0ce:	687b      	ldr	r3, [r7, #4]
 801b0d0:	7ada      	ldrb	r2, [r3, #11]
 801b0d2:	687b      	ldr	r3, [r7, #4]
 801b0d4:	71da      	strb	r2, [r3, #7]
  (*state)[2][3] = (*state)[3][3];
 801b0d6:	687b      	ldr	r3, [r7, #4]
 801b0d8:	7bda      	ldrb	r2, [r3, #15]
 801b0da:	687b      	ldr	r3, [r7, #4]
 801b0dc:	72da      	strb	r2, [r3, #11]
  (*state)[3][3] = temp;
 801b0de:	687b      	ldr	r3, [r7, #4]
 801b0e0:	187a      	adds	r2, r7, r1
 801b0e2:	7812      	ldrb	r2, [r2, #0]
 801b0e4:	73da      	strb	r2, [r3, #15]
}
 801b0e6:	46c0      	nop			; (mov r8, r8)
 801b0e8:	46bd      	mov	sp, r7
 801b0ea:	b004      	add	sp, #16
 801b0ec:	bd80      	pop	{r7, pc}

0801b0ee <Cipher>:


// Cipher is the main function that encrypts the PlainText.
static void Cipher(state_t* state, uint8_t* RoundKey)
{
 801b0ee:	b590      	push	{r4, r7, lr}
 801b0f0:	b085      	sub	sp, #20
 801b0f2:	af00      	add	r7, sp, #0
 801b0f4:	6078      	str	r0, [r7, #4]
 801b0f6:	6039      	str	r1, [r7, #0]
  uint8_t round = 0;
 801b0f8:	240f      	movs	r4, #15
 801b0fa:	193b      	adds	r3, r7, r4
 801b0fc:	2200      	movs	r2, #0
 801b0fe:	701a      	strb	r2, [r3, #0]

  // Add the First round key to the state before starting the rounds.
  AddRoundKey(0, state, RoundKey);
 801b100:	683a      	ldr	r2, [r7, #0]
 801b102:	687b      	ldr	r3, [r7, #4]
 801b104:	0019      	movs	r1, r3
 801b106:	2000      	movs	r0, #0
 801b108:	f7ff f997 	bl	801a43a <AddRoundKey>

  // There will be Nr rounds.
  // The first Nr-1 rounds are identical.
  // These Nr-1 rounds are executed in the loop below.
  for (round = 1; round < Nr; ++round)
 801b10c:	193b      	adds	r3, r7, r4
 801b10e:	2201      	movs	r2, #1
 801b110:	701a      	strb	r2, [r3, #0]
 801b112:	e018      	b.n	801b146 <Cipher+0x58>
  {
    SubBytes(state);
 801b114:	687b      	ldr	r3, [r7, #4]
 801b116:	0018      	movs	r0, r3
 801b118:	f7ff f9e0 	bl	801a4dc <SubBytes>
    ShiftRows(state);
 801b11c:	687b      	ldr	r3, [r7, #4]
 801b11e:	0018      	movs	r0, r3
 801b120:	f7ff fa1c 	bl	801a55c <ShiftRows>
    MixColumns(state);
 801b124:	687b      	ldr	r3, [r7, #4]
 801b126:	0018      	movs	r0, r3
 801b128:	f7ff fa81 	bl	801a62e <MixColumns>
    AddRoundKey(round, state, RoundKey);
 801b12c:	683a      	ldr	r2, [r7, #0]
 801b12e:	6879      	ldr	r1, [r7, #4]
 801b130:	240f      	movs	r4, #15
 801b132:	193b      	adds	r3, r7, r4
 801b134:	781b      	ldrb	r3, [r3, #0]
 801b136:	0018      	movs	r0, r3
 801b138:	f7ff f97f 	bl	801a43a <AddRoundKey>
  for (round = 1; round < Nr; ++round)
 801b13c:	193b      	adds	r3, r7, r4
 801b13e:	193a      	adds	r2, r7, r4
 801b140:	7812      	ldrb	r2, [r2, #0]
 801b142:	3201      	adds	r2, #1
 801b144:	701a      	strb	r2, [r3, #0]
 801b146:	230f      	movs	r3, #15
 801b148:	18fb      	adds	r3, r7, r3
 801b14a:	781b      	ldrb	r3, [r3, #0]
 801b14c:	2b09      	cmp	r3, #9
 801b14e:	d9e1      	bls.n	801b114 <Cipher+0x26>
  }

  // The last round is given below.
  // The MixColumns function is not here in the last round.
  SubBytes(state);
 801b150:	687b      	ldr	r3, [r7, #4]
 801b152:	0018      	movs	r0, r3
 801b154:	f7ff f9c2 	bl	801a4dc <SubBytes>
  ShiftRows(state);
 801b158:	687b      	ldr	r3, [r7, #4]
 801b15a:	0018      	movs	r0, r3
 801b15c:	f7ff f9fe 	bl	801a55c <ShiftRows>
  AddRoundKey(Nr, state, RoundKey);
 801b160:	683a      	ldr	r2, [r7, #0]
 801b162:	687b      	ldr	r3, [r7, #4]
 801b164:	0019      	movs	r1, r3
 801b166:	200a      	movs	r0, #10
 801b168:	f7ff f967 	bl	801a43a <AddRoundKey>
}
 801b16c:	46c0      	nop			; (mov r8, r8)
 801b16e:	46bd      	mov	sp, r7
 801b170:	b005      	add	sp, #20
 801b172:	bd90      	pop	{r4, r7, pc}

0801b174 <InvCipher>:

static void InvCipher(state_t* state,uint8_t* RoundKey)
{
 801b174:	b590      	push	{r4, r7, lr}
 801b176:	b085      	sub	sp, #20
 801b178:	af00      	add	r7, sp, #0
 801b17a:	6078      	str	r0, [r7, #4]
 801b17c:	6039      	str	r1, [r7, #0]
  uint8_t round = 0;
 801b17e:	240f      	movs	r4, #15
 801b180:	193b      	adds	r3, r7, r4
 801b182:	2200      	movs	r2, #0
 801b184:	701a      	strb	r2, [r3, #0]

  // Add the First round key to the state before starting the rounds.
  AddRoundKey(Nr, state, RoundKey);
 801b186:	683a      	ldr	r2, [r7, #0]
 801b188:	687b      	ldr	r3, [r7, #4]
 801b18a:	0019      	movs	r1, r3
 801b18c:	200a      	movs	r0, #10
 801b18e:	f7ff f954 	bl	801a43a <AddRoundKey>

  // There will be Nr rounds.
  // The first Nr-1 rounds are identical.
  // These Nr-1 rounds are executed in the loop below.
  for (round = (Nr - 1); round > 0; --round)
 801b192:	193b      	adds	r3, r7, r4
 801b194:	2209      	movs	r2, #9
 801b196:	701a      	strb	r2, [r3, #0]
 801b198:	e018      	b.n	801b1cc <InvCipher+0x58>
  {
    InvShiftRows(state);
 801b19a:	687b      	ldr	r3, [r7, #4]
 801b19c:	0018      	movs	r0, r3
 801b19e:	f7ff ff5d 	bl	801b05c <InvShiftRows>
    InvSubBytes(state);
 801b1a2:	687b      	ldr	r3, [r7, #4]
 801b1a4:	0018      	movs	r0, r3
 801b1a6:	f7ff ff19 	bl	801afdc <InvSubBytes>
    AddRoundKey(round, state, RoundKey);
 801b1aa:	683a      	ldr	r2, [r7, #0]
 801b1ac:	6879      	ldr	r1, [r7, #4]
 801b1ae:	240f      	movs	r4, #15
 801b1b0:	193b      	adds	r3, r7, r4
 801b1b2:	781b      	ldrb	r3, [r3, #0]
 801b1b4:	0018      	movs	r0, r3
 801b1b6:	f7ff f940 	bl	801a43a <AddRoundKey>
    InvMixColumns(state);
 801b1ba:	687b      	ldr	r3, [r7, #4]
 801b1bc:	0018      	movs	r0, r3
 801b1be:	f7ff fb3a 	bl	801a836 <InvMixColumns>
  for (round = (Nr - 1); round > 0; --round)
 801b1c2:	193b      	adds	r3, r7, r4
 801b1c4:	193a      	adds	r2, r7, r4
 801b1c6:	7812      	ldrb	r2, [r2, #0]
 801b1c8:	3a01      	subs	r2, #1
 801b1ca:	701a      	strb	r2, [r3, #0]
 801b1cc:	230f      	movs	r3, #15
 801b1ce:	18fb      	adds	r3, r7, r3
 801b1d0:	781b      	ldrb	r3, [r3, #0]
 801b1d2:	2b00      	cmp	r3, #0
 801b1d4:	d1e1      	bne.n	801b19a <InvCipher+0x26>
  }

  // The last round is given below.
  // The MixColumns function is not here in the last round.
  InvShiftRows(state);
 801b1d6:	687b      	ldr	r3, [r7, #4]
 801b1d8:	0018      	movs	r0, r3
 801b1da:	f7ff ff3f 	bl	801b05c <InvShiftRows>
  InvSubBytes(state);
 801b1de:	687b      	ldr	r3, [r7, #4]
 801b1e0:	0018      	movs	r0, r3
 801b1e2:	f7ff fefb 	bl	801afdc <InvSubBytes>
  AddRoundKey(0, state, RoundKey);
 801b1e6:	683a      	ldr	r2, [r7, #0]
 801b1e8:	687b      	ldr	r3, [r7, #4]
 801b1ea:	0019      	movs	r1, r3
 801b1ec:	2000      	movs	r0, #0
 801b1ee:	f7ff f924 	bl	801a43a <AddRoundKey>
}
 801b1f2:	46c0      	nop			; (mov r8, r8)
 801b1f4:	46bd      	mov	sp, r7
 801b1f6:	b005      	add	sp, #20
 801b1f8:	bd90      	pop	{r4, r7, pc}

0801b1fa <XorWithIv>:

#if defined(CBC) && (CBC == 1)


static void XorWithIv(uint8_t* buf, uint8_t* Iv)
{
 801b1fa:	b590      	push	{r4, r7, lr}
 801b1fc:	b085      	sub	sp, #20
 801b1fe:	af00      	add	r7, sp, #0
 801b200:	6078      	str	r0, [r7, #4]
 801b202:	6039      	str	r1, [r7, #0]
  uint8_t i;
  for (i = 0; i < AES_BLOCKLEN; ++i) // The block in AES is always 128bit no matter the key size
 801b204:	230f      	movs	r3, #15
 801b206:	18fb      	adds	r3, r7, r3
 801b208:	2200      	movs	r2, #0
 801b20a:	701a      	strb	r2, [r3, #0]
 801b20c:	e016      	b.n	801b23c <XorWithIv+0x42>
  {
    buf[i] ^= Iv[i];
 801b20e:	240f      	movs	r4, #15
 801b210:	193b      	adds	r3, r7, r4
 801b212:	781b      	ldrb	r3, [r3, #0]
 801b214:	687a      	ldr	r2, [r7, #4]
 801b216:	18d3      	adds	r3, r2, r3
 801b218:	7819      	ldrb	r1, [r3, #0]
 801b21a:	193b      	adds	r3, r7, r4
 801b21c:	781b      	ldrb	r3, [r3, #0]
 801b21e:	683a      	ldr	r2, [r7, #0]
 801b220:	18d3      	adds	r3, r2, r3
 801b222:	781a      	ldrb	r2, [r3, #0]
 801b224:	193b      	adds	r3, r7, r4
 801b226:	781b      	ldrb	r3, [r3, #0]
 801b228:	6878      	ldr	r0, [r7, #4]
 801b22a:	18c3      	adds	r3, r0, r3
 801b22c:	404a      	eors	r2, r1
 801b22e:	b2d2      	uxtb	r2, r2
 801b230:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < AES_BLOCKLEN; ++i) // The block in AES is always 128bit no matter the key size
 801b232:	193b      	adds	r3, r7, r4
 801b234:	193a      	adds	r2, r7, r4
 801b236:	7812      	ldrb	r2, [r2, #0]
 801b238:	3201      	adds	r2, #1
 801b23a:	701a      	strb	r2, [r3, #0]
 801b23c:	230f      	movs	r3, #15
 801b23e:	18fb      	adds	r3, r7, r3
 801b240:	781b      	ldrb	r3, [r3, #0]
 801b242:	2b0f      	cmp	r3, #15
 801b244:	d9e3      	bls.n	801b20e <XorWithIv+0x14>
  }
}
 801b246:	46c0      	nop			; (mov r8, r8)
 801b248:	46bd      	mov	sp, r7
 801b24a:	b005      	add	sp, #20
 801b24c:	bd90      	pop	{r4, r7, pc}

0801b24e <tiny_AES_CBC_encrypt_buffer>:

void tiny_AES_CBC_encrypt_buffer(struct AES_ctx *ctx,uint8_t* buf, uint32_t length)
{
 801b24e:	b580      	push	{r7, lr}
 801b250:	b086      	sub	sp, #24
 801b252:	af00      	add	r7, sp, #0
 801b254:	60f8      	str	r0, [r7, #12]
 801b256:	60b9      	str	r1, [r7, #8]
 801b258:	607a      	str	r2, [r7, #4]
  uintptr_t i;
  uint8_t *Iv = ctx->Iv;
 801b25a:	68fb      	ldr	r3, [r7, #12]
 801b25c:	33b0      	adds	r3, #176	; 0xb0
 801b25e:	613b      	str	r3, [r7, #16]
  for (i = 0; i < length; i += AES_BLOCKLEN)
 801b260:	2300      	movs	r3, #0
 801b262:	617b      	str	r3, [r7, #20]
 801b264:	e013      	b.n	801b28e <tiny_AES_CBC_encrypt_buffer+0x40>
  {
    XorWithIv(buf, Iv);
 801b266:	693a      	ldr	r2, [r7, #16]
 801b268:	68bb      	ldr	r3, [r7, #8]
 801b26a:	0011      	movs	r1, r2
 801b26c:	0018      	movs	r0, r3
 801b26e:	f7ff ffc4 	bl	801b1fa <XorWithIv>
    Cipher((state_t*)buf, ctx->RoundKey);
 801b272:	68fa      	ldr	r2, [r7, #12]
 801b274:	68bb      	ldr	r3, [r7, #8]
 801b276:	0011      	movs	r1, r2
 801b278:	0018      	movs	r0, r3
 801b27a:	f7ff ff38 	bl	801b0ee <Cipher>
    Iv = buf;
 801b27e:	68bb      	ldr	r3, [r7, #8]
 801b280:	613b      	str	r3, [r7, #16]
    buf += AES_BLOCKLEN;
 801b282:	68bb      	ldr	r3, [r7, #8]
 801b284:	3310      	adds	r3, #16
 801b286:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < length; i += AES_BLOCKLEN)
 801b288:	697b      	ldr	r3, [r7, #20]
 801b28a:	3310      	adds	r3, #16
 801b28c:	617b      	str	r3, [r7, #20]
 801b28e:	697a      	ldr	r2, [r7, #20]
 801b290:	687b      	ldr	r3, [r7, #4]
 801b292:	429a      	cmp	r2, r3
 801b294:	d3e7      	bcc.n	801b266 <tiny_AES_CBC_encrypt_buffer+0x18>
    //printf("Step %d - %d", i/16, i);
  }
  /* store Iv in ctx for next call */
  memcpy(ctx->Iv, Iv, AES_BLOCKLEN);
 801b296:	68fb      	ldr	r3, [r7, #12]
 801b298:	33b0      	adds	r3, #176	; 0xb0
 801b29a:	6939      	ldr	r1, [r7, #16]
 801b29c:	2210      	movs	r2, #16
 801b29e:	0018      	movs	r0, r3
 801b2a0:	f002 ffa0 	bl	801e1e4 <memcpy>
}
 801b2a4:	46c0      	nop			; (mov r8, r8)
 801b2a6:	46bd      	mov	sp, r7
 801b2a8:	b006      	add	sp, #24
 801b2aa:	bd80      	pop	{r7, pc}

0801b2ac <tiny_AES_CBC_decrypt_buffer>:

void tiny_AES_CBC_decrypt_buffer(struct AES_ctx* ctx, uint8_t* buf,  uint32_t length)
{
 801b2ac:	b590      	push	{r4, r7, lr}
 801b2ae:	b08b      	sub	sp, #44	; 0x2c
 801b2b0:	af00      	add	r7, sp, #0
 801b2b2:	60f8      	str	r0, [r7, #12]
 801b2b4:	60b9      	str	r1, [r7, #8]
 801b2b6:	607a      	str	r2, [r7, #4]
  uintptr_t i;
  uint8_t storeNextIv[AES_BLOCKLEN];
  for (i = 0; i < length; i += AES_BLOCKLEN)
 801b2b8:	2300      	movs	r3, #0
 801b2ba:	627b      	str	r3, [r7, #36]	; 0x24
 801b2bc:	e026      	b.n	801b30c <tiny_AES_CBC_decrypt_buffer+0x60>
  {
    memcpy(storeNextIv, buf, AES_BLOCKLEN);
 801b2be:	2414      	movs	r4, #20
 801b2c0:	193a      	adds	r2, r7, r4
 801b2c2:	68bb      	ldr	r3, [r7, #8]
 801b2c4:	0010      	movs	r0, r2
 801b2c6:	0019      	movs	r1, r3
 801b2c8:	2310      	movs	r3, #16
 801b2ca:	001a      	movs	r2, r3
 801b2cc:	f002 ff8a 	bl	801e1e4 <memcpy>
    InvCipher((state_t*)buf, ctx->RoundKey);
 801b2d0:	68fa      	ldr	r2, [r7, #12]
 801b2d2:	68bb      	ldr	r3, [r7, #8]
 801b2d4:	0011      	movs	r1, r2
 801b2d6:	0018      	movs	r0, r3
 801b2d8:	f7ff ff4c 	bl	801b174 <InvCipher>
    XorWithIv(buf, ctx->Iv);
 801b2dc:	68fb      	ldr	r3, [r7, #12]
 801b2de:	33b0      	adds	r3, #176	; 0xb0
 801b2e0:	001a      	movs	r2, r3
 801b2e2:	68bb      	ldr	r3, [r7, #8]
 801b2e4:	0011      	movs	r1, r2
 801b2e6:	0018      	movs	r0, r3
 801b2e8:	f7ff ff87 	bl	801b1fa <XorWithIv>
    memcpy(ctx->Iv, storeNextIv, AES_BLOCKLEN);
 801b2ec:	68fb      	ldr	r3, [r7, #12]
 801b2ee:	33b0      	adds	r3, #176	; 0xb0
 801b2f0:	001a      	movs	r2, r3
 801b2f2:	193b      	adds	r3, r7, r4
 801b2f4:	0010      	movs	r0, r2
 801b2f6:	0019      	movs	r1, r3
 801b2f8:	2310      	movs	r3, #16
 801b2fa:	001a      	movs	r2, r3
 801b2fc:	f002 ff72 	bl	801e1e4 <memcpy>
    buf += AES_BLOCKLEN;
 801b300:	68bb      	ldr	r3, [r7, #8]
 801b302:	3310      	adds	r3, #16
 801b304:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < length; i += AES_BLOCKLEN)
 801b306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b308:	3310      	adds	r3, #16
 801b30a:	627b      	str	r3, [r7, #36]	; 0x24
 801b30c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b30e:	687b      	ldr	r3, [r7, #4]
 801b310:	429a      	cmp	r2, r3
 801b312:	d3d4      	bcc.n	801b2be <tiny_AES_CBC_decrypt_buffer+0x12>
  }

}
 801b314:	46c0      	nop			; (mov r8, r8)
 801b316:	46bd      	mov	sp, r7
 801b318:	b00b      	add	sp, #44	; 0x2c
 801b31a:	bd90      	pop	{r4, r7, pc}

0801b31c <_itsdk_error_readHeader>:


/**
 * Get the header of the error blocks
 */
__weak itsdk_error_ret_e _itsdk_error_readHeader(itsdk_error_head_t * header) {
 801b31c:	b580      	push	{r7, lr}
 801b31e:	b084      	sub	sp, #16
 801b320:	af00      	add	r7, sp, #0
 801b322:	6078      	str	r0, [r7, #4]
	uint32_t offset = 0;
 801b324:	2300      	movs	r3, #0
 801b326:	60fb      	str	r3, [r7, #12]
	#if ITSDK_WITH_SECURESTORE == __ENABLE
	  itsdk_secstore_getStoreSize(&offset);
 801b328:	230c      	movs	r3, #12
 801b32a:	18fb      	adds	r3, r7, r3
 801b32c:	0018      	movs	r0, r3
 801b32e:	f7fe f8d6 	bl	80194de <itsdk_secstore_getStoreSize>
	#endif
	_eeprom_read(ITDT_EEPROM_BANK0, offset, (void *) header, sizeof(itsdk_error_head_t));
 801b332:	68f9      	ldr	r1, [r7, #12]
 801b334:	687a      	ldr	r2, [r7, #4]
 801b336:	2308      	movs	r3, #8
 801b338:	2000      	movs	r0, #0
 801b33a:	f002 fc01 	bl	801db40 <_eeprom_read>
	if ( header->magic != ITSDK_ERROR_STRUCT_MAGIC) return ITSDK_ERROR_FAILED;
 801b33e:	687b      	ldr	r3, [r7, #4]
 801b340:	881b      	ldrh	r3, [r3, #0]
 801b342:	4a05      	ldr	r2, [pc, #20]	; (801b358 <_itsdk_error_readHeader+0x3c>)
 801b344:	4293      	cmp	r3, r2
 801b346:	d001      	beq.n	801b34c <_itsdk_error_readHeader+0x30>
 801b348:	2301      	movs	r3, #1
 801b34a:	e000      	b.n	801b34e <_itsdk_error_readHeader+0x32>
	return ITSDK_ERROR_SUCCESS;
 801b34c:	2300      	movs	r3, #0
}
 801b34e:	0018      	movs	r0, r3
 801b350:	46bd      	mov	sp, r7
 801b352:	b004      	add	sp, #16
 801b354:	bd80      	pop	{r7, pc}
 801b356:	46c0      	nop			; (mov r8, r8)
 801b358:	0000ae73 	.word	0x0000ae73

0801b35c <_itsdk_error_writeHeader>:

/**
 * Update the header of the error blocks
 */
__weak itsdk_error_ret_e _itsdk_error_writeHeader(itsdk_error_head_t * header) {
 801b35c:	b580      	push	{r7, lr}
 801b35e:	b084      	sub	sp, #16
 801b360:	af00      	add	r7, sp, #0
 801b362:	6078      	str	r0, [r7, #4]
	uint32_t offset = 0;
 801b364:	2300      	movs	r3, #0
 801b366:	60fb      	str	r3, [r7, #12]
	#if ITSDK_WITH_SECURESTORE == __ENABLE
	  itsdk_secstore_getStoreSize(&offset);
 801b368:	230c      	movs	r3, #12
 801b36a:	18fb      	adds	r3, r7, r3
 801b36c:	0018      	movs	r0, r3
 801b36e:	f7fe f8b6 	bl	80194de <itsdk_secstore_getStoreSize>
	#endif
	_eeprom_write(ITDT_EEPROM_BANK0, offset, (void *) header, sizeof(itsdk_error_head_t));
 801b372:	68f9      	ldr	r1, [r7, #12]
 801b374:	687a      	ldr	r2, [r7, #4]
 801b376:	2308      	movs	r3, #8
 801b378:	2000      	movs	r0, #0
 801b37a:	f002 fb3d 	bl	801d9f8 <_eeprom_write>
	return ITSDK_ERROR_SUCCESS;
 801b37e:	2300      	movs	r3, #0
}
 801b380:	0018      	movs	r0, r3
 801b382:	46bd      	mov	sp, r7
 801b384:	b004      	add	sp, #16
 801b386:	bd80      	pop	{r7, pc}

0801b388 <_itsdk_error_write>:
/**
 * Write the error in the NVM.
 * This function can be override if the MCU EEPROM is not used for this purpose.
 *
 */
__weak itsdk_error_ret_e _itsdk_error_write(uint16_t blockId, itsdk_error_entry_t * entry) {
 801b388:	b580      	push	{r7, lr}
 801b38a:	b084      	sub	sp, #16
 801b38c:	af00      	add	r7, sp, #0
 801b38e:	0002      	movs	r2, r0
 801b390:	6039      	str	r1, [r7, #0]
 801b392:	1dbb      	adds	r3, r7, #6
 801b394:	801a      	strh	r2, [r3, #0]
	uint32_t offset = 0;
 801b396:	2300      	movs	r3, #0
 801b398:	60fb      	str	r3, [r7, #12]
	#if ITSDK_WITH_SECURESTORE == __ENABLE
	  itsdk_secstore_getStoreSize(&offset);
 801b39a:	230c      	movs	r3, #12
 801b39c:	18fb      	adds	r3, r7, r3
 801b39e:	0018      	movs	r0, r3
 801b3a0:	f7fe f89d 	bl	80194de <itsdk_secstore_getStoreSize>
	#endif
	_eeprom_write(
		ITDT_EEPROM_BANK0,
		offset+sizeof(itsdk_error_head_t)+(sizeof(itsdk_error_entry_t)*blockId),
 801b3a4:	1dbb      	adds	r3, r7, #6
 801b3a6:	881b      	ldrh	r3, [r3, #0]
 801b3a8:	00da      	lsls	r2, r3, #3
 801b3aa:	68fb      	ldr	r3, [r7, #12]
 801b3ac:	18d3      	adds	r3, r2, r3
	_eeprom_write(
 801b3ae:	3308      	adds	r3, #8
 801b3b0:	0019      	movs	r1, r3
 801b3b2:	683a      	ldr	r2, [r7, #0]
 801b3b4:	2308      	movs	r3, #8
 801b3b6:	2000      	movs	r0, #0
 801b3b8:	f002 fb1e 	bl	801d9f8 <_eeprom_write>
		(void *)entry, sizeof(itsdk_error_entry_t)
	);
	return ITSDK_ERROR_SUCCESS;
 801b3bc:	2300      	movs	r3, #0
}
 801b3be:	0018      	movs	r0, r3
 801b3c0:	46bd      	mov	sp, r7
 801b3c2:	b004      	add	sp, #16
 801b3c4:	bd80      	pop	{r7, pc}

0801b3c6 <_itsdk_error_read>:

/**
 * Read a given error Id from the NVM
 */
__weak itsdk_error_ret_e _itsdk_error_read(uint16_t blockId,itsdk_error_entry_t * e) {
 801b3c6:	b580      	push	{r7, lr}
 801b3c8:	b084      	sub	sp, #16
 801b3ca:	af00      	add	r7, sp, #0
 801b3cc:	0002      	movs	r2, r0
 801b3ce:	6039      	str	r1, [r7, #0]
 801b3d0:	1dbb      	adds	r3, r7, #6
 801b3d2:	801a      	strh	r2, [r3, #0]
	uint32_t offset = 0;
 801b3d4:	2300      	movs	r3, #0
 801b3d6:	60fb      	str	r3, [r7, #12]
	#if ITSDK_WITH_SECURESTORE == __ENABLE
	  itsdk_secstore_getStoreSize(&offset);
 801b3d8:	230c      	movs	r3, #12
 801b3da:	18fb      	adds	r3, r7, r3
 801b3dc:	0018      	movs	r0, r3
 801b3de:	f7fe f87e 	bl	80194de <itsdk_secstore_getStoreSize>
	#endif
	_eeprom_read(
		ITDT_EEPROM_BANK0,
		offset+sizeof(itsdk_error_head_t)+(sizeof(itsdk_error_entry_t)*blockId),
 801b3e2:	1dbb      	adds	r3, r7, #6
 801b3e4:	881b      	ldrh	r3, [r3, #0]
 801b3e6:	00da      	lsls	r2, r3, #3
 801b3e8:	68fb      	ldr	r3, [r7, #12]
 801b3ea:	18d3      	adds	r3, r2, r3
	_eeprom_read(
 801b3ec:	3308      	adds	r3, #8
 801b3ee:	0019      	movs	r1, r3
 801b3f0:	683a      	ldr	r2, [r7, #0]
 801b3f2:	2308      	movs	r3, #8
 801b3f4:	2000      	movs	r0, #0
 801b3f6:	f002 fba3 	bl	801db40 <_eeprom_read>
		(void *)e, sizeof(itsdk_error_entry_t)
	);
	return ITSDK_ERROR_SUCCESS;
 801b3fa:	2300      	movs	r3, #0
}
 801b3fc:	0018      	movs	r0, r3
 801b3fe:	46bd      	mov	sp, r7
 801b400:	b004      	add	sp, #16
 801b402:	bd80      	pop	{r7, pc}

0801b404 <itsdk_error_setup>:

/**
 * Init the error block structure if needed
 * This function is called on every device restart
 */
itsdk_error_ret_e itsdk_error_setup() {
 801b404:	b580      	push	{r7, lr}
 801b406:	b082      	sub	sp, #8
 801b408:	af00      	add	r7, sp, #0
	itsdk_error_head_t h;
	if ( _itsdk_error_readHeader(&h) == ITSDK_ERROR_FAILED ) {
 801b40a:	003b      	movs	r3, r7
 801b40c:	0018      	movs	r0, r3
 801b40e:	f7ff ff85 	bl	801b31c <_itsdk_error_readHeader>
 801b412:	0003      	movs	r3, r0
 801b414:	2b01      	cmp	r3, #1
 801b416:	d10c      	bne.n	801b432 <itsdk_error_setup+0x2e>
		// init the structure
		h.magic = ITSDK_ERROR_STRUCT_MAGIC;
 801b418:	003b      	movs	r3, r7
 801b41a:	4a0f      	ldr	r2, [pc, #60]	; (801b458 <itsdk_error_setup+0x54>)
 801b41c:	801a      	strh	r2, [r3, #0]
		h.readPt = 0;
 801b41e:	003b      	movs	r3, r7
 801b420:	2200      	movs	r2, #0
 801b422:	805a      	strh	r2, [r3, #2]
		h.writePt = 0;
 801b424:	003b      	movs	r3, r7
 801b426:	2200      	movs	r2, #0
 801b428:	809a      	strh	r2, [r3, #4]
		_itsdk_error_writeHeader(&h);
 801b42a:	003b      	movs	r3, r7
 801b42c:	0018      	movs	r0, r3
 801b42e:	f7ff ff95 	bl	801b35c <_itsdk_error_writeHeader>
	}
#if ITSDK_WITH_CONSOLE == __ENABLE
	__console_errorMng.console_private = _itsdk_error_consolePriv;
 801b432:	4b0a      	ldr	r3, [pc, #40]	; (801b45c <itsdk_error_setup+0x58>)
 801b434:	4a0a      	ldr	r2, [pc, #40]	; (801b460 <itsdk_error_setup+0x5c>)
 801b436:	601a      	str	r2, [r3, #0]
	__console_errorMng.console_public = NULL;
 801b438:	4b08      	ldr	r3, [pc, #32]	; (801b45c <itsdk_error_setup+0x58>)
 801b43a:	2200      	movs	r2, #0
 801b43c:	605a      	str	r2, [r3, #4]
	__console_errorMng.next = NULL;
 801b43e:	4b07      	ldr	r3, [pc, #28]	; (801b45c <itsdk_error_setup+0x58>)
 801b440:	2200      	movs	r2, #0
 801b442:	609a      	str	r2, [r3, #8]
	itsdk_console_registerCommand(&__console_errorMng);
 801b444:	4b05      	ldr	r3, [pc, #20]	; (801b45c <itsdk_error_setup+0x58>)
 801b446:	0018      	movs	r0, r3
 801b448:	f7fd f96a 	bl	8018720 <itsdk_console_registerCommand>
#endif

	return ITSDK_ERROR_SUCCESS;
 801b44c:	2300      	movs	r3, #0
}
 801b44e:	0018      	movs	r0, r3
 801b450:	46bd      	mov	sp, r7
 801b452:	b002      	add	sp, #8
 801b454:	bd80      	pop	{r7, pc}
 801b456:	46c0      	nop			; (mov r8, r8)
 801b458:	ffffae73 	.word	0xffffae73
 801b45c:	200011fc 	.word	0x200011fc
 801b460:	0801b6c9 	.word	0x0801b6c9

0801b464 <itsdk_error_report>:
 * Register an error into the NVM
 * The error is enriched with the value when needed and written in the NVM
 * The NVM write can be override.
 * When the level is critical it loop forever after printing an error message
 */
itsdk_error_ret_e itsdk_error_report(uint32_t error,uint16_t value) {
 801b464:	b590      	push	{r4, r7, lr}
 801b466:	b08b      	sub	sp, #44	; 0x2c
 801b468:	af00      	add	r7, sp, #0
 801b46a:	6078      	str	r0, [r7, #4]
 801b46c:	000a      	movs	r2, r1
 801b46e:	1cbb      	adds	r3, r7, #2
 801b470:	801a      	strh	r2, [r3, #0]
	// Add value into error when needed
	if ( ( error & ITSDK_ERROR_WITH_VALUE ) > 0 ) {
 801b472:	687a      	ldr	r2, [r7, #4]
 801b474:	2380      	movs	r3, #128	; 0x80
 801b476:	055b      	lsls	r3, r3, #21
 801b478:	4013      	ands	r3, r2
 801b47a:	d008      	beq.n	801b48e <itsdk_error_report+0x2a>
		error |= (value << ITSDK_ERROR_VALUE_SHIFT) & ITSDK_ERROR_VALUE_MASK;
 801b47c:	1cbb      	adds	r3, r7, #2
 801b47e:	881b      	ldrh	r3, [r3, #0]
 801b480:	031b      	lsls	r3, r3, #12
 801b482:	001a      	movs	r2, r3
 801b484:	4b4b      	ldr	r3, [pc, #300]	; (801b5b4 <itsdk_error_report+0x150>)
 801b486:	4013      	ands	r3, r2
 801b488:	687a      	ldr	r2, [r7, #4]
 801b48a:	4313      	orrs	r3, r2
 801b48c:	607b      	str	r3, [r7, #4]
	}
	uint64_t time = itsdk_time_get_ms() / 1000;
 801b48e:	f001 f951 	bl	801c734 <itsdk_time_get_ms>
 801b492:	22fa      	movs	r2, #250	; 0xfa
 801b494:	0092      	lsls	r2, r2, #2
 801b496:	2300      	movs	r3, #0
 801b498:	f7e5 f816 	bl	80004c8 <__aeabi_uldivmod>
 801b49c:	0003      	movs	r3, r0
 801b49e:	000c      	movs	r4, r1
 801b4a0:	61bb      	str	r3, [r7, #24]
 801b4a2:	61fc      	str	r4, [r7, #28]
	itsdk_error_entry_t e;
	e.error = error;
 801b4a4:	2110      	movs	r1, #16
 801b4a6:	187b      	adds	r3, r7, r1
 801b4a8:	687a      	ldr	r2, [r7, #4]
 801b4aa:	605a      	str	r2, [r3, #4]
	e.timeS = (uint32_t)time;
 801b4ac:	69ba      	ldr	r2, [r7, #24]
 801b4ae:	187b      	adds	r3, r7, r1
 801b4b0:	601a      	str	r2, [r3, #0]

	itsdk_error_head_t h;
	if ( _itsdk_error_readHeader(&h) == ITSDK_ERROR_FAILED ) return ITSDK_ERROR_FAILED;
 801b4b2:	2308      	movs	r3, #8
 801b4b4:	18fb      	adds	r3, r7, r3
 801b4b6:	0018      	movs	r0, r3
 801b4b8:	f7ff ff30 	bl	801b31c <_itsdk_error_readHeader>
 801b4bc:	0003      	movs	r3, r0
 801b4be:	2b01      	cmp	r3, #1
 801b4c0:	d101      	bne.n	801b4c6 <itsdk_error_report+0x62>
 801b4c2:	2301      	movs	r3, #1
 801b4c4:	e072      	b.n	801b5ac <itsdk_error_report+0x148>

	// Register error
	_itsdk_error_write(h.writePt, &e);
 801b4c6:	2408      	movs	r4, #8
 801b4c8:	193b      	adds	r3, r7, r4
 801b4ca:	889b      	ldrh	r3, [r3, #4]
 801b4cc:	2210      	movs	r2, #16
 801b4ce:	18ba      	adds	r2, r7, r2
 801b4d0:	0011      	movs	r1, r2
 801b4d2:	0018      	movs	r0, r3
 801b4d4:	f7ff ff58 	bl	801b388 <_itsdk_error_write>

	// Update the pointers
	h.writePt = (h.writePt + 1) % ITSDK_ERROR_BLOCKS;
 801b4d8:	193b      	adds	r3, r7, r4
 801b4da:	889b      	ldrh	r3, [r3, #4]
 801b4dc:	3301      	adds	r3, #1
 801b4de:	4a36      	ldr	r2, [pc, #216]	; (801b5b8 <itsdk_error_report+0x154>)
 801b4e0:	4013      	ands	r3, r2
 801b4e2:	d504      	bpl.n	801b4ee <itsdk_error_report+0x8a>
 801b4e4:	3b01      	subs	r3, #1
 801b4e6:	2240      	movs	r2, #64	; 0x40
 801b4e8:	4252      	negs	r2, r2
 801b4ea:	4313      	orrs	r3, r2
 801b4ec:	3301      	adds	r3, #1
 801b4ee:	b29a      	uxth	r2, r3
 801b4f0:	2108      	movs	r1, #8
 801b4f2:	187b      	adds	r3, r7, r1
 801b4f4:	809a      	strh	r2, [r3, #4]
	if ( h.writePt == h.readPt ) {
 801b4f6:	187b      	adds	r3, r7, r1
 801b4f8:	889a      	ldrh	r2, [r3, #4]
 801b4fa:	187b      	adds	r3, r7, r1
 801b4fc:	885b      	ldrh	r3, [r3, #2]
 801b4fe:	429a      	cmp	r2, r3
 801b500:	d10f      	bne.n	801b522 <itsdk_error_report+0xbe>
		h.readPt = (h.readPt + 1) % ITSDK_ERROR_BLOCKS;
 801b502:	2308      	movs	r3, #8
 801b504:	18fb      	adds	r3, r7, r3
 801b506:	885b      	ldrh	r3, [r3, #2]
 801b508:	3301      	adds	r3, #1
 801b50a:	4a2b      	ldr	r2, [pc, #172]	; (801b5b8 <itsdk_error_report+0x154>)
 801b50c:	4013      	ands	r3, r2
 801b50e:	d504      	bpl.n	801b51a <itsdk_error_report+0xb6>
 801b510:	3b01      	subs	r3, #1
 801b512:	2240      	movs	r2, #64	; 0x40
 801b514:	4252      	negs	r2, r2
 801b516:	4313      	orrs	r3, r2
 801b518:	3301      	adds	r3, #1
 801b51a:	b29a      	uxth	r2, r3
 801b51c:	2308      	movs	r3, #8
 801b51e:	18fb      	adds	r3, r7, r3
 801b520:	805a      	strh	r2, [r3, #2]
	}
	_itsdk_error_writeHeader(&h);
 801b522:	2308      	movs	r3, #8
 801b524:	18fb      	adds	r3, r7, r3
 801b526:	0018      	movs	r0, r3
 801b528:	f7ff ff18 	bl	801b35c <_itsdk_error_writeHeader>

	char t = 'S';
 801b52c:	2327      	movs	r3, #39	; 0x27
 801b52e:	18fb      	adds	r3, r7, r3
 801b530:	2253      	movs	r2, #83	; 0x53
 801b532:	701a      	strb	r2, [r3, #0]
	if ((error & ITSDK_ERROR_TYPE_MASK) == ITSDK_ERROR_TYPE_APP) {
 801b534:	687a      	ldr	r2, [r7, #4]
 801b536:	2380      	movs	r3, #128	; 0x80
 801b538:	059b      	lsls	r3, r3, #22
 801b53a:	4013      	ands	r3, r2
 801b53c:	d003      	beq.n	801b546 <itsdk_error_report+0xe2>
		t = 'A';
 801b53e:	2327      	movs	r3, #39	; 0x27
 801b540:	18fb      	adds	r3, r7, r3
 801b542:	2241      	movs	r2, #65	; 0x41
 801b544:	701a      	strb	r2, [r3, #0]
	}

	// Manage critical level
	if ( (error & ITSDK_ERROR_LEVEL_FATAL ) == ITSDK_ERROR_LEVEL_FATAL ){
 801b546:	687b      	ldr	r3, [r7, #4]
 801b548:	0f9b      	lsrs	r3, r3, #30
 801b54a:	079a      	lsls	r2, r3, #30
 801b54c:	23c0      	movs	r3, #192	; 0xc0
 801b54e:	061b      	lsls	r3, r3, #24
 801b550:	429a      	cmp	r2, r3
 801b552:	d108      	bne.n	801b566 <itsdk_error_report+0x102>
		log_error("[CRITICAL ERROR] %c 0x%08X\r\n",t,error);
 801b554:	2327      	movs	r3, #39	; 0x27
 801b556:	18fb      	adds	r3, r7, r3
 801b558:	7819      	ldrb	r1, [r3, #0]
 801b55a:	687a      	ldr	r2, [r7, #4]
 801b55c:	4b17      	ldr	r3, [pc, #92]	; (801b5bc <itsdk_error_report+0x158>)
 801b55e:	0018      	movs	r0, r3
 801b560:	f000 fa0c 	bl	801b97c <log_error>
		while(1);
 801b564:	e7fe      	b.n	801b564 <itsdk_error_report+0x100>
	} else if ( (error & ITSDK_ERROR_LEVEL_ERROR ) == ITSDK_ERROR_LEVEL_ERROR ){
 801b566:	687b      	ldr	r3, [r7, #4]
 801b568:	2b00      	cmp	r3, #0
 801b56a:	da08      	bge.n	801b57e <itsdk_error_report+0x11a>
		log_error("[ERROR] %c 0x%08X\r\n",t,error);
 801b56c:	2327      	movs	r3, #39	; 0x27
 801b56e:	18fb      	adds	r3, r7, r3
 801b570:	7819      	ldrb	r1, [r3, #0]
 801b572:	687a      	ldr	r2, [r7, #4]
 801b574:	4b12      	ldr	r3, [pc, #72]	; (801b5c0 <itsdk_error_report+0x15c>)
 801b576:	0018      	movs	r0, r3
 801b578:	f000 fa00 	bl	801b97c <log_error>
 801b57c:	e015      	b.n	801b5aa <itsdk_error_report+0x146>
	} else if ( (error & ITSDK_ERROR_LEVEL_WARN ) == ITSDK_ERROR_LEVEL_WARN ){
 801b57e:	687a      	ldr	r2, [r7, #4]
 801b580:	2380      	movs	r3, #128	; 0x80
 801b582:	05db      	lsls	r3, r3, #23
 801b584:	4013      	ands	r3, r2
 801b586:	d008      	beq.n	801b59a <itsdk_error_report+0x136>
		log_warn("[WARN] %c 0x%08X\r\n",t,error);
 801b588:	2327      	movs	r3, #39	; 0x27
 801b58a:	18fb      	adds	r3, r7, r3
 801b58c:	7819      	ldrb	r1, [r3, #0]
 801b58e:	687a      	ldr	r2, [r7, #4]
 801b590:	4b0c      	ldr	r3, [pc, #48]	; (801b5c4 <itsdk_error_report+0x160>)
 801b592:	0018      	movs	r0, r3
 801b594:	f000 fa38 	bl	801ba08 <log_warn>
 801b598:	e007      	b.n	801b5aa <itsdk_error_report+0x146>
	} else if ( (error & ITSDK_ERROR_LEVEL_INFO ) == ITSDK_ERROR_LEVEL_INFO ){
		log_info("[INFO] %c 0x%08X\r\n",t,error);
 801b59a:	2327      	movs	r3, #39	; 0x27
 801b59c:	18fb      	adds	r3, r7, r3
 801b59e:	7819      	ldrb	r1, [r3, #0]
 801b5a0:	687a      	ldr	r2, [r7, #4]
 801b5a2:	4b09      	ldr	r3, [pc, #36]	; (801b5c8 <itsdk_error_report+0x164>)
 801b5a4:	0018      	movs	r0, r3
 801b5a6:	f000 fa75 	bl	801ba94 <log_info>
	}
	return ITSDK_ERROR_SUCCESS;
 801b5aa:	2300      	movs	r3, #0
}
 801b5ac:	0018      	movs	r0, r3
 801b5ae:	46bd      	mov	sp, r7
 801b5b0:	b00b      	add	sp, #44	; 0x2c
 801b5b2:	bd90      	pop	{r4, r7, pc}
 801b5b4:	0ffff000 	.word	0x0ffff000
 801b5b8:	8000003f 	.word	0x8000003f
 801b5bc:	080202b8 	.word	0x080202b8
 801b5c0:	080202d8 	.word	0x080202d8
 801b5c4:	080202ec 	.word	0x080202ec
 801b5c8:	08020300 	.word	0x08020300

0801b5cc <itsdk_error_get>:
 * When blockId is ITSDK_ERROR_FIRSTBLOCK the first available block is returned
 * Returns the next blockId to be read. ITSDK_ERROR_LASTBLOCK when no more to read
 * The blockId is updated with next block Id value.
 *
 */
itsdk_error_ret_e itsdk_error_get(uint16_t * blockId,itsdk_error_entry_t * e) {
 801b5cc:	b580      	push	{r7, lr}
 801b5ce:	b084      	sub	sp, #16
 801b5d0:	af00      	add	r7, sp, #0
 801b5d2:	6078      	str	r0, [r7, #4]
 801b5d4:	6039      	str	r1, [r7, #0]

	itsdk_error_head_t h;
	if ( _itsdk_error_readHeader(&h) == ITSDK_ERROR_SUCCESS ) {
 801b5d6:	2308      	movs	r3, #8
 801b5d8:	18fb      	adds	r3, r7, r3
 801b5da:	0018      	movs	r0, r3
 801b5dc:	f7ff fe9e 	bl	801b31c <_itsdk_error_readHeader>
 801b5e0:	1e03      	subs	r3, r0, #0
 801b5e2:	d138      	bne.n	801b656 <itsdk_error_get+0x8a>
		// Manage blockId request
		if ( *blockId == ITSDK_ERROR_FIRSTBLOCK ) {
 801b5e4:	687b      	ldr	r3, [r7, #4]
 801b5e6:	881b      	ldrh	r3, [r3, #0]
 801b5e8:	4a22      	ldr	r2, [pc, #136]	; (801b674 <itsdk_error_get+0xa8>)
 801b5ea:	4293      	cmp	r3, r2
 801b5ec:	d104      	bne.n	801b5f8 <itsdk_error_get+0x2c>
			*blockId = h.readPt;
 801b5ee:	2308      	movs	r3, #8
 801b5f0:	18fb      	adds	r3, r7, r3
 801b5f2:	885a      	ldrh	r2, [r3, #2]
 801b5f4:	687b      	ldr	r3, [r7, #4]
 801b5f6:	801a      	strh	r2, [r3, #0]
		}
		if ( *blockId != h.writePt ) {
 801b5f8:	687b      	ldr	r3, [r7, #4]
 801b5fa:	881a      	ldrh	r2, [r3, #0]
 801b5fc:	2308      	movs	r3, #8
 801b5fe:	18fb      	adds	r3, r7, r3
 801b600:	889b      	ldrh	r3, [r3, #4]
 801b602:	429a      	cmp	r2, r3
 801b604:	d027      	beq.n	801b656 <itsdk_error_get+0x8a>
			if ( *blockId < ITSDK_ERROR_BLOCKS ) {
 801b606:	687b      	ldr	r3, [r7, #4]
 801b608:	881b      	ldrh	r3, [r3, #0]
 801b60a:	2b3f      	cmp	r3, #63	; 0x3f
 801b60c:	d823      	bhi.n	801b656 <itsdk_error_get+0x8a>
				// Read the block
				if ( _itsdk_error_read(*blockId,e) == ITSDK_ERROR_SUCCESS ) {
 801b60e:	687b      	ldr	r3, [r7, #4]
 801b610:	881b      	ldrh	r3, [r3, #0]
 801b612:	683a      	ldr	r2, [r7, #0]
 801b614:	0011      	movs	r1, r2
 801b616:	0018      	movs	r0, r3
 801b618:	f7ff fed5 	bl	801b3c6 <_itsdk_error_read>
 801b61c:	1e03      	subs	r3, r0, #0
 801b61e:	d11a      	bne.n	801b656 <itsdk_error_get+0x8a>
					*blockId = (*blockId + 1) % ITSDK_ERROR_BLOCKS;
 801b620:	687b      	ldr	r3, [r7, #4]
 801b622:	881b      	ldrh	r3, [r3, #0]
 801b624:	3301      	adds	r3, #1
 801b626:	4a14      	ldr	r2, [pc, #80]	; (801b678 <itsdk_error_get+0xac>)
 801b628:	4013      	ands	r3, r2
 801b62a:	d504      	bpl.n	801b636 <itsdk_error_get+0x6a>
 801b62c:	3b01      	subs	r3, #1
 801b62e:	2240      	movs	r2, #64	; 0x40
 801b630:	4252      	negs	r2, r2
 801b632:	4313      	orrs	r3, r2
 801b634:	3301      	adds	r3, #1
 801b636:	b29a      	uxth	r2, r3
 801b638:	687b      	ldr	r3, [r7, #4]
 801b63a:	801a      	strh	r2, [r3, #0]
					if ( *blockId == h.writePt ) *blockId = ITSDK_ERROR_LASTBLOCK;
 801b63c:	687b      	ldr	r3, [r7, #4]
 801b63e:	881a      	ldrh	r2, [r3, #0]
 801b640:	2308      	movs	r3, #8
 801b642:	18fb      	adds	r3, r7, r3
 801b644:	889b      	ldrh	r3, [r3, #4]
 801b646:	429a      	cmp	r2, r3
 801b648:	d103      	bne.n	801b652 <itsdk_error_get+0x86>
 801b64a:	687b      	ldr	r3, [r7, #4]
 801b64c:	2201      	movs	r2, #1
 801b64e:	4252      	negs	r2, r2
 801b650:	801a      	strh	r2, [r3, #0]
					return ITSDK_ERROR_SUCCESS;
 801b652:	2300      	movs	r3, #0
 801b654:	e00a      	b.n	801b66c <itsdk_error_get+0xa0>
				}
			}
		}
	}
	e->error = 0;
 801b656:	683b      	ldr	r3, [r7, #0]
 801b658:	2200      	movs	r2, #0
 801b65a:	605a      	str	r2, [r3, #4]
	e->timeS = 0;
 801b65c:	683b      	ldr	r3, [r7, #0]
 801b65e:	2200      	movs	r2, #0
 801b660:	601a      	str	r2, [r3, #0]
	*blockId = ITSDK_ERROR_LASTBLOCK;
 801b662:	687b      	ldr	r3, [r7, #4]
 801b664:	2201      	movs	r2, #1
 801b666:	4252      	negs	r2, r2
 801b668:	801a      	strh	r2, [r3, #0]
	return ITSDK_ERROR_FAILED;
 801b66a:	2301      	movs	r3, #1
}
 801b66c:	0018      	movs	r0, r3
 801b66e:	46bd      	mov	sp, r7
 801b670:	b004      	add	sp, #16
 801b672:	bd80      	pop	{r7, pc}
 801b674:	0000fffe 	.word	0x0000fffe
 801b678:	8000003f 	.word	0x8000003f

0801b67c <itsdk_error_clear>:


/**
 * clear the error log history
 */
itsdk_error_ret_e itsdk_error_clear() {
 801b67c:	b580      	push	{r7, lr}
 801b67e:	b082      	sub	sp, #8
 801b680:	af00      	add	r7, sp, #0
	itsdk_error_head_t h;
	if ( _itsdk_error_readHeader(&h) == ITSDK_ERROR_FAILED ) return ITSDK_ERROR_FAILED;
 801b682:	003b      	movs	r3, r7
 801b684:	0018      	movs	r0, r3
 801b686:	f7ff fe49 	bl	801b31c <_itsdk_error_readHeader>
 801b68a:	0003      	movs	r3, r0
 801b68c:	2b01      	cmp	r3, #1
 801b68e:	d101      	bne.n	801b694 <itsdk_error_clear+0x18>
 801b690:	2301      	movs	r3, #1
 801b692:	e008      	b.n	801b6a6 <itsdk_error_clear+0x2a>
	h.readPt = h.writePt;
 801b694:	003b      	movs	r3, r7
 801b696:	889a      	ldrh	r2, [r3, #4]
 801b698:	003b      	movs	r3, r7
 801b69a:	805a      	strh	r2, [r3, #2]
	_itsdk_error_writeHeader(&h);
 801b69c:	003b      	movs	r3, r7
 801b69e:	0018      	movs	r0, r3
 801b6a0:	f7ff fe5c 	bl	801b35c <_itsdk_error_writeHeader>
	return ITSDK_ERROR_SUCCESS;
 801b6a4:	2300      	movs	r3, #0
}
 801b6a6:	0018      	movs	r0, r3
 801b6a8:	46bd      	mov	sp, r7
 801b6aa:	b002      	add	sp, #8
 801b6ac:	bd80      	pop	{r7, pc}

0801b6ae <itsdk_error_getSize>:

/**
 * Get the size of the error blocks
 */
itsdk_error_ret_e itsdk_error_getSize(uint32_t * size) {
 801b6ae:	b580      	push	{r7, lr}
 801b6b0:	b082      	sub	sp, #8
 801b6b2:	af00      	add	r7, sp, #0
 801b6b4:	6078      	str	r0, [r7, #4]
	*size=sizeof(itsdk_error_t);
 801b6b6:	687b      	ldr	r3, [r7, #4]
 801b6b8:	2282      	movs	r2, #130	; 0x82
 801b6ba:	0092      	lsls	r2, r2, #2
 801b6bc:	601a      	str	r2, [r3, #0]
	return ITSDK_ERROR_SUCCESS;
 801b6be:	2300      	movs	r3, #0
}
 801b6c0:	0018      	movs	r0, r3
 801b6c2:	46bd      	mov	sp, r7
 801b6c4:	b002      	add	sp, #8
 801b6c6:	bd80      	pop	{r7, pc}

0801b6c8 <_itsdk_error_consolePriv>:
// =================================================================================
// Console options
// =================================================================================

#if ITSDK_WITH_CONSOLE == __ENABLE
static itsdk_console_return_e _itsdk_error_consolePriv(char * buffer, uint8_t sz) {
 801b6c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b6ca:	b08b      	sub	sp, #44	; 0x2c
 801b6cc:	af04      	add	r7, sp, #16
 801b6ce:	6078      	str	r0, [r7, #4]
 801b6d0:	000a      	movs	r2, r1
 801b6d2:	1cfb      	adds	r3, r7, #3
 801b6d4:	701a      	strb	r2, [r3, #0]
	if ( sz == 1 ) {
 801b6d6:	1cfb      	adds	r3, r7, #3
 801b6d8:	781b      	ldrb	r3, [r3, #0]
 801b6da:	2b01      	cmp	r3, #1
 801b6dc:	d000      	beq.n	801b6e0 <_itsdk_error_consolePriv+0x18>
 801b6de:	e087      	b.n	801b7f0 <_itsdk_error_consolePriv+0x128>
	  switch(buffer[0]){
 801b6e0:	687b      	ldr	r3, [r7, #4]
 801b6e2:	781b      	ldrb	r3, [r3, #0]
 801b6e4:	2b45      	cmp	r3, #69	; 0x45
 801b6e6:	d100      	bne.n	801b6ea <_itsdk_error_consolePriv+0x22>
 801b6e8:	e07a      	b.n	801b7e0 <_itsdk_error_consolePriv+0x118>
 801b6ea:	2b65      	cmp	r3, #101	; 0x65
 801b6ec:	d010      	beq.n	801b710 <_itsdk_error_consolePriv+0x48>
 801b6ee:	2b3f      	cmp	r3, #63	; 0x3f
 801b6f0:	d000      	beq.n	801b6f4 <_itsdk_error_consolePriv+0x2c>
			itsdk_error_clear();
			_itsdk_console_printf("OK\r\n");
  		    return ITSDK_CONSOLE_SUCCES;
			break;
		default:
			break;
 801b6f2:	e07e      	b.n	801b7f2 <_itsdk_error_consolePriv+0x12a>
			_itsdk_console_printf("--- ErrorMng\r\n");
 801b6f4:	4b41      	ldr	r3, [pc, #260]	; (801b7fc <_itsdk_error_consolePriv+0x134>)
 801b6f6:	0018      	movs	r0, r3
 801b6f8:	f7fc fffa 	bl	80186f0 <_itsdk_console_printf>
			_itsdk_console_printf("e          : print errors log\r\n");
 801b6fc:	4b40      	ldr	r3, [pc, #256]	; (801b800 <_itsdk_error_consolePriv+0x138>)
 801b6fe:	0018      	movs	r0, r3
 801b700:	f7fc fff6 	bl	80186f0 <_itsdk_console_printf>
			_itsdk_console_printf("E          : Clear the error logs\r\n");
 801b704:	4b3f      	ldr	r3, [pc, #252]	; (801b804 <_itsdk_error_consolePriv+0x13c>)
 801b706:	0018      	movs	r0, r3
 801b708:	f7fc fff2 	bl	80186f0 <_itsdk_console_printf>
		  return ITSDK_CONSOLE_SUCCES;
 801b70c:	2300      	movs	r3, #0
 801b70e:	e071      	b.n	801b7f4 <_itsdk_error_consolePriv+0x12c>
				uint16_t blockId = ITSDK_ERROR_FIRSTBLOCK;
 801b710:	2314      	movs	r3, #20
 801b712:	18fb      	adds	r3, r7, r3
 801b714:	2202      	movs	r2, #2
 801b716:	4252      	negs	r2, r2
 801b718:	801a      	strh	r2, [r3, #0]
				while ( itsdk_error_get(&blockId,&e) == ITSDK_ERROR_SUCCESS ) {
 801b71a:	e051      	b.n	801b7c0 <_itsdk_error_consolePriv+0xf8>
					switch (e.error & ITSDK_ERROR_LEVEL_MASK) {
 801b71c:	230c      	movs	r3, #12
 801b71e:	18fb      	adds	r3, r7, r3
 801b720:	685b      	ldr	r3, [r3, #4]
 801b722:	0f9b      	lsrs	r3, r3, #30
 801b724:	079b      	lsls	r3, r3, #30
 801b726:	2280      	movs	r2, #128	; 0x80
 801b728:	0612      	lsls	r2, r2, #24
 801b72a:	4293      	cmp	r3, r2
 801b72c:	d011      	beq.n	801b752 <_itsdk_error_consolePriv+0x8a>
 801b72e:	22c0      	movs	r2, #192	; 0xc0
 801b730:	0612      	lsls	r2, r2, #24
 801b732:	4293      	cmp	r3, r2
 801b734:	d012      	beq.n	801b75c <_itsdk_error_consolePriv+0x94>
 801b736:	2280      	movs	r2, #128	; 0x80
 801b738:	05d2      	lsls	r2, r2, #23
 801b73a:	4293      	cmp	r3, r2
 801b73c:	d004      	beq.n	801b748 <_itsdk_error_consolePriv+0x80>
					case ITSDK_ERROR_LEVEL_INFO:  l = 'I'; break;
 801b73e:	2317      	movs	r3, #23
 801b740:	18fb      	adds	r3, r7, r3
 801b742:	2249      	movs	r2, #73	; 0x49
 801b744:	701a      	strb	r2, [r3, #0]
 801b746:	e00e      	b.n	801b766 <_itsdk_error_consolePriv+0x9e>
					case ITSDK_ERROR_LEVEL_WARN:  l = 'W'; break;
 801b748:	2317      	movs	r3, #23
 801b74a:	18fb      	adds	r3, r7, r3
 801b74c:	2257      	movs	r2, #87	; 0x57
 801b74e:	701a      	strb	r2, [r3, #0]
 801b750:	e009      	b.n	801b766 <_itsdk_error_consolePriv+0x9e>
					case ITSDK_ERROR_LEVEL_ERROR: l = 'E'; break;
 801b752:	2317      	movs	r3, #23
 801b754:	18fb      	adds	r3, r7, r3
 801b756:	2245      	movs	r2, #69	; 0x45
 801b758:	701a      	strb	r2, [r3, #0]
 801b75a:	e004      	b.n	801b766 <_itsdk_error_consolePriv+0x9e>
					case ITSDK_ERROR_LEVEL_FATAL: l = 'F'; break;
 801b75c:	2317      	movs	r3, #23
 801b75e:	18fb      	adds	r3, r7, r3
 801b760:	2246      	movs	r2, #70	; 0x46
 801b762:	701a      	strb	r2, [r3, #0]
 801b764:	46c0      	nop			; (mov r8, r8)
					_itsdk_console_printf("%c %015d : 0x%08X ( %c 0x%03X / 0x%04X )\r\n",
 801b766:	2317      	movs	r3, #23
 801b768:	18fb      	adds	r3, r7, r3
 801b76a:	781c      	ldrb	r4, [r3, #0]
 801b76c:	220c      	movs	r2, #12
 801b76e:	18bb      	adds	r3, r7, r2
 801b770:	681d      	ldr	r5, [r3, #0]
 801b772:	18bb      	adds	r3, r7, r2
 801b774:	685e      	ldr	r6, [r3, #4]
						(((e.error & ITSDK_ERROR_TYPE_APP) > 0) ? 'A' : 'S'),
 801b776:	18bb      	adds	r3, r7, r2
 801b778:	685a      	ldr	r2, [r3, #4]
 801b77a:	2380      	movs	r3, #128	; 0x80
 801b77c:	059b      	lsls	r3, r3, #22
 801b77e:	4013      	ands	r3, r2
					_itsdk_console_printf("%c %015d : 0x%08X ( %c 0x%03X / 0x%04X )\r\n",
 801b780:	d001      	beq.n	801b786 <_itsdk_error_consolePriv+0xbe>
 801b782:	2241      	movs	r2, #65	; 0x41
 801b784:	e000      	b.n	801b788 <_itsdk_error_consolePriv+0xc0>
 801b786:	2253      	movs	r2, #83	; 0x53
						(e.error & ITSDK_ERROR_ERROR_MASK) >> ITSDK_ERROR_ERROR_SHIFT,
 801b788:	200c      	movs	r0, #12
 801b78a:	183b      	adds	r3, r7, r0
 801b78c:	685b      	ldr	r3, [r3, #4]
					_itsdk_console_printf("%c %015d : 0x%08X ( %c 0x%03X / 0x%04X )\r\n",
 801b78e:	051b      	lsls	r3, r3, #20
 801b790:	0d19      	lsrs	r1, r3, #20
						( ((e.error & ITSDK_ERROR_WITH_VALUE) > 0)? (e.error & ITSDK_ERROR_VALUE_MASK) >> ITSDK_ERROR_VALUE_SHIFT:0)
 801b792:	183b      	adds	r3, r7, r0
 801b794:	6858      	ldr	r0, [r3, #4]
 801b796:	2380      	movs	r3, #128	; 0x80
 801b798:	055b      	lsls	r3, r3, #21
 801b79a:	4003      	ands	r3, r0
					_itsdk_console_printf("%c %015d : 0x%08X ( %c 0x%03X / 0x%04X )\r\n",
 801b79c:	d006      	beq.n	801b7ac <_itsdk_error_consolePriv+0xe4>
						( ((e.error & ITSDK_ERROR_WITH_VALUE) > 0)? (e.error & ITSDK_ERROR_VALUE_MASK) >> ITSDK_ERROR_VALUE_SHIFT:0)
 801b79e:	230c      	movs	r3, #12
 801b7a0:	18fb      	adds	r3, r7, r3
 801b7a2:	685b      	ldr	r3, [r3, #4]
 801b7a4:	0b1b      	lsrs	r3, r3, #12
					_itsdk_console_printf("%c %015d : 0x%08X ( %c 0x%03X / 0x%04X )\r\n",
 801b7a6:	041b      	lsls	r3, r3, #16
 801b7a8:	0c1b      	lsrs	r3, r3, #16
 801b7aa:	e000      	b.n	801b7ae <_itsdk_error_consolePriv+0xe6>
 801b7ac:	2300      	movs	r3, #0
 801b7ae:	4816      	ldr	r0, [pc, #88]	; (801b808 <_itsdk_error_consolePriv+0x140>)
 801b7b0:	9302      	str	r3, [sp, #8]
 801b7b2:	9101      	str	r1, [sp, #4]
 801b7b4:	9200      	str	r2, [sp, #0]
 801b7b6:	0033      	movs	r3, r6
 801b7b8:	002a      	movs	r2, r5
 801b7ba:	0021      	movs	r1, r4
 801b7bc:	f7fc ff98 	bl	80186f0 <_itsdk_console_printf>
				while ( itsdk_error_get(&blockId,&e) == ITSDK_ERROR_SUCCESS ) {
 801b7c0:	230c      	movs	r3, #12
 801b7c2:	18fa      	adds	r2, r7, r3
 801b7c4:	2314      	movs	r3, #20
 801b7c6:	18fb      	adds	r3, r7, r3
 801b7c8:	0011      	movs	r1, r2
 801b7ca:	0018      	movs	r0, r3
 801b7cc:	f7ff fefe 	bl	801b5cc <itsdk_error_get>
 801b7d0:	1e03      	subs	r3, r0, #0
 801b7d2:	d0a3      	beq.n	801b71c <_itsdk_error_consolePriv+0x54>
				_itsdk_console_printf("OK\r\n");
 801b7d4:	4b0d      	ldr	r3, [pc, #52]	; (801b80c <_itsdk_error_consolePriv+0x144>)
 801b7d6:	0018      	movs	r0, r3
 801b7d8:	f7fc ff8a 	bl	80186f0 <_itsdk_console_printf>
  		    return ITSDK_CONSOLE_SUCCES;
 801b7dc:	2300      	movs	r3, #0
 801b7de:	e009      	b.n	801b7f4 <_itsdk_error_consolePriv+0x12c>
			itsdk_error_clear();
 801b7e0:	f7ff ff4c 	bl	801b67c <itsdk_error_clear>
			_itsdk_console_printf("OK\r\n");
 801b7e4:	4b09      	ldr	r3, [pc, #36]	; (801b80c <_itsdk_error_consolePriv+0x144>)
 801b7e6:	0018      	movs	r0, r3
 801b7e8:	f7fc ff82 	bl	80186f0 <_itsdk_console_printf>
  		    return ITSDK_CONSOLE_SUCCES;
 801b7ec:	2300      	movs	r3, #0
 801b7ee:	e001      	b.n	801b7f4 <_itsdk_error_consolePriv+0x12c>
	  }
	} //Sz == 1
 801b7f0:	46c0      	nop			; (mov r8, r8)
  return ITSDK_CONSOLE_NOTFOUND;
 801b7f2:	2301      	movs	r3, #1
}
 801b7f4:	0018      	movs	r0, r3
 801b7f6:	46bd      	mov	sp, r7
 801b7f8:	b007      	add	sp, #28
 801b7fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b7fc:	08020314 	.word	0x08020314
 801b800:	08020324 	.word	0x08020324
 801b804:	08020344 	.word	0x08020344
 801b808:	08020368 	.word	0x08020368
 801b80c:	08020394 	.word	0x08020394

0801b810 <log_init>:
__t_log __log;

/**
 * Setup the logging level and target
 */
bool log_init(uint16_t config) {
 801b810:	b580      	push	{r7, lr}
 801b812:	b082      	sub	sp, #8
 801b814:	af00      	add	r7, sp, #0
 801b816:	0002      	movs	r2, r0
 801b818:	1dbb      	adds	r3, r7, #6
 801b81a:	801a      	strh	r2, [r3, #0]

  __log.logError  = (( config & LOGGER_CONFIG_ERROR_LVL_MASK  ) > 0)?1:0;
 801b81c:	1dbb      	adds	r3, r7, #6
 801b81e:	881b      	ldrh	r3, [r3, #0]
 801b820:	4a51      	ldr	r2, [pc, #324]	; (801b968 <log_init+0x158>)
 801b822:	4013      	ands	r3, r2
 801b824:	17da      	asrs	r2, r3, #31
 801b826:	1ad3      	subs	r3, r2, r3
 801b828:	0fdb      	lsrs	r3, r3, #31
 801b82a:	b2da      	uxtb	r2, r3
 801b82c:	4b4f      	ldr	r3, [pc, #316]	; (801b96c <log_init+0x15c>)
 801b82e:	2101      	movs	r1, #1
 801b830:	400a      	ands	r2, r1
 801b832:	1890      	adds	r0, r2, r2
 801b834:	781a      	ldrb	r2, [r3, #0]
 801b836:	2102      	movs	r1, #2
 801b838:	438a      	bics	r2, r1
 801b83a:	1c11      	adds	r1, r2, #0
 801b83c:	1c02      	adds	r2, r0, #0
 801b83e:	430a      	orrs	r2, r1
 801b840:	701a      	strb	r2, [r3, #0]
  __log.logWarn   = (( config & LOGGER_CONFIG_WARN_LVL_MASK   ) > 0)?1:0;
 801b842:	1dbb      	adds	r3, r7, #6
 801b844:	881b      	ldrh	r3, [r3, #0]
 801b846:	4a4a      	ldr	r2, [pc, #296]	; (801b970 <log_init+0x160>)
 801b848:	4013      	ands	r3, r2
 801b84a:	17da      	asrs	r2, r3, #31
 801b84c:	1ad3      	subs	r3, r2, r3
 801b84e:	0fdb      	lsrs	r3, r3, #31
 801b850:	b2da      	uxtb	r2, r3
 801b852:	4b46      	ldr	r3, [pc, #280]	; (801b96c <log_init+0x15c>)
 801b854:	2101      	movs	r1, #1
 801b856:	400a      	ands	r2, r1
 801b858:	0090      	lsls	r0, r2, #2
 801b85a:	781a      	ldrb	r2, [r3, #0]
 801b85c:	2104      	movs	r1, #4
 801b85e:	438a      	bics	r2, r1
 801b860:	1c11      	adds	r1, r2, #0
 801b862:	1c02      	adds	r2, r0, #0
 801b864:	430a      	orrs	r2, r1
 801b866:	701a      	strb	r2, [r3, #0]
  __log.logInfo   = (( config & LOGGER_CONFIG_INFO_LVL_MASK   ) > 0)?1:0;
 801b868:	1dbb      	adds	r3, r7, #6
 801b86a:	881b      	ldrh	r3, [r3, #0]
 801b86c:	4a41      	ldr	r2, [pc, #260]	; (801b974 <log_init+0x164>)
 801b86e:	4013      	ands	r3, r2
 801b870:	17da      	asrs	r2, r3, #31
 801b872:	1ad3      	subs	r3, r2, r3
 801b874:	0fdb      	lsrs	r3, r3, #31
 801b876:	b2da      	uxtb	r2, r3
 801b878:	4b3c      	ldr	r3, [pc, #240]	; (801b96c <log_init+0x15c>)
 801b87a:	2101      	movs	r1, #1
 801b87c:	400a      	ands	r2, r1
 801b87e:	00d0      	lsls	r0, r2, #3
 801b880:	781a      	ldrb	r2, [r3, #0]
 801b882:	2108      	movs	r1, #8
 801b884:	438a      	bics	r2, r1
 801b886:	1c11      	adds	r1, r2, #0
 801b888:	1c02      	adds	r2, r0, #0
 801b88a:	430a      	orrs	r2, r1
 801b88c:	701a      	strb	r2, [r3, #0]
  __log.logDebug  = (( config & LOGGER_CONFIG_DEBUG_LVL_MASK  ) > 0)?1:0;
 801b88e:	1dbb      	adds	r3, r7, #6
 801b890:	881b      	ldrh	r3, [r3, #0]
 801b892:	4a39      	ldr	r2, [pc, #228]	; (801b978 <log_init+0x168>)
 801b894:	4013      	ands	r3, r2
 801b896:	17da      	asrs	r2, r3, #31
 801b898:	1ad3      	subs	r3, r2, r3
 801b89a:	0fdb      	lsrs	r3, r3, #31
 801b89c:	b2da      	uxtb	r2, r3
 801b89e:	4b33      	ldr	r3, [pc, #204]	; (801b96c <log_init+0x15c>)
 801b8a0:	2101      	movs	r1, #1
 801b8a2:	400a      	ands	r2, r1
 801b8a4:	0110      	lsls	r0, r2, #4
 801b8a6:	781a      	ldrb	r2, [r3, #0]
 801b8a8:	2110      	movs	r1, #16
 801b8aa:	438a      	bics	r2, r1
 801b8ac:	1c11      	adds	r1, r2, #0
 801b8ae:	1c02      	adds	r2, r0, #0
 801b8b0:	430a      	orrs	r2, r1
 801b8b2:	701a      	strb	r2, [r3, #0]
  __log.onSerial1 = (( config & LOGGER_CONFIG_SERIAL1_MASK    ) > 0)?1:0;
 801b8b4:	1dbb      	adds	r3, r7, #6
 801b8b6:	881a      	ldrh	r2, [r3, #0]
 801b8b8:	23f0      	movs	r3, #240	; 0xf0
 801b8ba:	011b      	lsls	r3, r3, #4
 801b8bc:	4013      	ands	r3, r2
 801b8be:	17da      	asrs	r2, r3, #31
 801b8c0:	1ad3      	subs	r3, r2, r3
 801b8c2:	0fdb      	lsrs	r3, r3, #31
 801b8c4:	b2da      	uxtb	r2, r3
 801b8c6:	4b29      	ldr	r3, [pc, #164]	; (801b96c <log_init+0x15c>)
 801b8c8:	2101      	movs	r1, #1
 801b8ca:	400a      	ands	r2, r1
 801b8cc:	0150      	lsls	r0, r2, #5
 801b8ce:	781a      	ldrb	r2, [r3, #0]
 801b8d0:	2120      	movs	r1, #32
 801b8d2:	438a      	bics	r2, r1
 801b8d4:	1c11      	adds	r1, r2, #0
 801b8d6:	1c02      	adds	r2, r0, #0
 801b8d8:	430a      	orrs	r2, r1
 801b8da:	701a      	strb	r2, [r3, #0]
  __log.onSerial2 = (( config & LOGGER_CONFIG_SERIAL2_MASK    ) > 0)?1:0;
 801b8dc:	1dbb      	adds	r3, r7, #6
 801b8de:	881b      	ldrh	r3, [r3, #0]
 801b8e0:	22f0      	movs	r2, #240	; 0xf0
 801b8e2:	4013      	ands	r3, r2
 801b8e4:	17da      	asrs	r2, r3, #31
 801b8e6:	1ad3      	subs	r3, r2, r3
 801b8e8:	0fdb      	lsrs	r3, r3, #31
 801b8ea:	b2da      	uxtb	r2, r3
 801b8ec:	4b1f      	ldr	r3, [pc, #124]	; (801b96c <log_init+0x15c>)
 801b8ee:	2101      	movs	r1, #1
 801b8f0:	400a      	ands	r2, r1
 801b8f2:	0190      	lsls	r0, r2, #6
 801b8f4:	781a      	ldrb	r2, [r3, #0]
 801b8f6:	2140      	movs	r1, #64	; 0x40
 801b8f8:	438a      	bics	r2, r1
 801b8fa:	1c11      	adds	r1, r2, #0
 801b8fc:	1c02      	adds	r2, r0, #0
 801b8fe:	430a      	orrs	r2, r1
 801b900:	701a      	strb	r2, [r3, #0]
  __log.onDebug   = (( config & LOGGER_CONFIG_DEBUGLNK_MASK   ) > 0)?1:0;
 801b902:	1dbb      	adds	r3, r7, #6
 801b904:	881b      	ldrh	r3, [r3, #0]
 801b906:	220f      	movs	r2, #15
 801b908:	4013      	ands	r3, r2
 801b90a:	17da      	asrs	r2, r3, #31
 801b90c:	1ad3      	subs	r3, r2, r3
 801b90e:	0fdb      	lsrs	r3, r3, #31
 801b910:	b2da      	uxtb	r2, r3
 801b912:	4b16      	ldr	r3, [pc, #88]	; (801b96c <log_init+0x15c>)
 801b914:	01d0      	lsls	r0, r2, #7
 801b916:	781a      	ldrb	r2, [r3, #0]
 801b918:	217f      	movs	r1, #127	; 0x7f
 801b91a:	400a      	ands	r2, r1
 801b91c:	1c11      	adds	r1, r2, #0
 801b91e:	1c02      	adds	r2, r0, #0
 801b920:	430a      	orrs	r2, r1
 801b922:	701a      	strb	r2, [r3, #0]
  __log.onFile    = (( config & LOGGER_CONFIG_FILE_MASK       ) > 0)?1:0;
 801b924:	1dbb      	adds	r3, r7, #6
 801b926:	881a      	ldrh	r2, [r3, #0]
 801b928:	23f0      	movs	r3, #240	; 0xf0
 801b92a:	021b      	lsls	r3, r3, #8
 801b92c:	4013      	ands	r3, r2
 801b92e:	17da      	asrs	r2, r3, #31
 801b930:	1ad3      	subs	r3, r2, r3
 801b932:	0fdb      	lsrs	r3, r3, #31
 801b934:	b2da      	uxtb	r2, r3
 801b936:	4b0d      	ldr	r3, [pc, #52]	; (801b96c <log_init+0x15c>)
 801b938:	2101      	movs	r1, #1
 801b93a:	400a      	ands	r2, r1
 801b93c:	0010      	movs	r0, r2
 801b93e:	785a      	ldrb	r2, [r3, #1]
 801b940:	2101      	movs	r1, #1
 801b942:	438a      	bics	r2, r1
 801b944:	1c11      	adds	r1, r2, #0
 801b946:	1c02      	adds	r2, r0, #0
 801b948:	430a      	orrs	r2, r1
 801b94a:	705a      	strb	r2, [r3, #1]
  // Init the loggers
  if (__log.onFile) {
	  // Init file logger
	  // @TODO support file logger
  }
  __log.logConf = config;
 801b94c:	4b07      	ldr	r3, [pc, #28]	; (801b96c <log_init+0x15c>)
 801b94e:	1dba      	adds	r2, r7, #6
 801b950:	8812      	ldrh	r2, [r2, #0]
 801b952:	805a      	strh	r2, [r3, #2]
  __log.ready = true;
 801b954:	4b05      	ldr	r3, [pc, #20]	; (801b96c <log_init+0x15c>)
 801b956:	781a      	ldrb	r2, [r3, #0]
 801b958:	2101      	movs	r1, #1
 801b95a:	430a      	orrs	r2, r1
 801b95c:	701a      	strb	r2, [r3, #0]
  return true;
 801b95e:	2301      	movs	r3, #1
}
 801b960:	0018      	movs	r0, r3
 801b962:	46bd      	mov	sp, r7
 801b964:	b002      	add	sp, #8
 801b966:	bd80      	pop	{r7, pc}
 801b968:	00001111 	.word	0x00001111
 801b96c:	20001680 	.word	0x20001680
 801b970:	00002222 	.word	0x00002222
 801b974:	00004444 	.word	0x00004444
 801b978:	00008888 	.word	0x00008888

0801b97c <log_error>:

/**
 * Log an error according to the configuration on the different
 * possible logger
 */
void log_error(char *format, ...) {
 801b97c:	b40f      	push	{r0, r1, r2, r3}
 801b97e:	b580      	push	{r7, lr}
 801b980:	b096      	sub	sp, #88	; 0x58
 801b982:	af00      	add	r7, sp, #0
#if ITSDK_LOGGER_CONF > 0
  va_list args;
  char 	fmtBuffer[LOGGER_MAX_BUF_SZ]; 				// buffer for log line formating before printing
  if ( __log.logError && __log.ready ) {
 801b984:	4b1f      	ldr	r3, [pc, #124]	; (801ba04 <log_error+0x88>)
 801b986:	781b      	ldrb	r3, [r3, #0]
 801b988:	2202      	movs	r2, #2
 801b98a:	4013      	ands	r3, r2
 801b98c:	b2db      	uxtb	r3, r3
 801b98e:	2b00      	cmp	r3, #0
 801b990:	d031      	beq.n	801b9f6 <log_error+0x7a>
 801b992:	4b1c      	ldr	r3, [pc, #112]	; (801ba04 <log_error+0x88>)
 801b994:	781b      	ldrb	r3, [r3, #0]
 801b996:	2201      	movs	r2, #1
 801b998:	4013      	ands	r3, r2
 801b99a:	b2db      	uxtb	r3, r3
 801b99c:	2b00      	cmp	r3, #0
 801b99e:	d02a      	beq.n	801b9f6 <log_error+0x7a>
    va_start(args,format);
 801b9a0:	2364      	movs	r3, #100	; 0x64
 801b9a2:	18fb      	adds	r3, r7, r3
 801b9a4:	657b      	str	r3, [r7, #84]	; 0x54
    vsnprintf(fmtBuffer,LOGGER_MAX_BUF_SZ,format,args);
 801b9a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801b9a8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801b9aa:	1d38      	adds	r0, r7, #4
 801b9ac:	2150      	movs	r1, #80	; 0x50
 801b9ae:	f002 fc93 	bl	801e2d8 <vsniprintf>
    va_end(args);

    if ( __log.onSerial1 ) {
 801b9b2:	4b14      	ldr	r3, [pc, #80]	; (801ba04 <log_error+0x88>)
 801b9b4:	781b      	ldrb	r3, [r3, #0]
 801b9b6:	2220      	movs	r2, #32
 801b9b8:	4013      	ands	r3, r2
 801b9ba:	b2db      	uxtb	r3, r3
 801b9bc:	2b00      	cmp	r3, #0
 801b9be:	d003      	beq.n	801b9c8 <log_error+0x4c>
      serial1_print(fmtBuffer);
 801b9c0:	1d3b      	adds	r3, r7, #4
 801b9c2:	0018      	movs	r0, r3
 801b9c4:	f001 ff7e 	bl	801d8c4 <serial1_print>
    }

    if ( __log.onSerial2 ) {
 801b9c8:	4b0e      	ldr	r3, [pc, #56]	; (801ba04 <log_error+0x88>)
 801b9ca:	781b      	ldrb	r3, [r3, #0]
 801b9cc:	2240      	movs	r2, #64	; 0x40
 801b9ce:	4013      	ands	r3, r2
 801b9d0:	b2db      	uxtb	r3, r3
 801b9d2:	2b00      	cmp	r3, #0
 801b9d4:	d003      	beq.n	801b9de <log_error+0x62>
      serial2_print(fmtBuffer);
 801b9d6:	1d3b      	adds	r3, r7, #4
 801b9d8:	0018      	movs	r0, r3
 801b9da:	f001 ff7b 	bl	801d8d4 <serial2_print>
    }

    if ( __log.onDebug  ) {
 801b9de:	4b09      	ldr	r3, [pc, #36]	; (801ba04 <log_error+0x88>)
 801b9e0:	781b      	ldrb	r3, [r3, #0]
 801b9e2:	227f      	movs	r2, #127	; 0x7f
 801b9e4:	4393      	bics	r3, r2
 801b9e6:	b2db      	uxtb	r3, r3
 801b9e8:	2b00      	cmp	r3, #0
 801b9ea:	d004      	beq.n	801b9f6 <log_error+0x7a>
      debug_print(DEBUG_PRINT_ERROR,fmtBuffer);
 801b9ec:	1d3b      	adds	r3, r7, #4
 801b9ee:	0019      	movs	r1, r3
 801b9f0:	2003      	movs	r0, #3
 801b9f2:	f001 fff5 	bl	801d9e0 <debug_print>
      //logfile_print(fmtBuffer);
    }

  }
#endif
}
 801b9f6:	46c0      	nop			; (mov r8, r8)
 801b9f8:	46bd      	mov	sp, r7
 801b9fa:	b016      	add	sp, #88	; 0x58
 801b9fc:	bc80      	pop	{r7}
 801b9fe:	bc08      	pop	{r3}
 801ba00:	b004      	add	sp, #16
 801ba02:	4718      	bx	r3
 801ba04:	20001680 	.word	0x20001680

0801ba08 <log_warn>:

/**
 * Log a warning according to the configuration on the different
 * possible logger
 */
void log_warn(char *format, ...) {
 801ba08:	b40f      	push	{r0, r1, r2, r3}
 801ba0a:	b580      	push	{r7, lr}
 801ba0c:	b096      	sub	sp, #88	; 0x58
 801ba0e:	af00      	add	r7, sp, #0
#if ITSDK_LOGGER_CONF > 0
  va_list args;
  char 	fmtBuffer[LOGGER_MAX_BUF_SZ]; 				// buffer for log line formating before printing
  if ( __log.logWarn  && __log.ready ) {
 801ba10:	4b1f      	ldr	r3, [pc, #124]	; (801ba90 <log_warn+0x88>)
 801ba12:	781b      	ldrb	r3, [r3, #0]
 801ba14:	2204      	movs	r2, #4
 801ba16:	4013      	ands	r3, r2
 801ba18:	b2db      	uxtb	r3, r3
 801ba1a:	2b00      	cmp	r3, #0
 801ba1c:	d031      	beq.n	801ba82 <log_warn+0x7a>
 801ba1e:	4b1c      	ldr	r3, [pc, #112]	; (801ba90 <log_warn+0x88>)
 801ba20:	781b      	ldrb	r3, [r3, #0]
 801ba22:	2201      	movs	r2, #1
 801ba24:	4013      	ands	r3, r2
 801ba26:	b2db      	uxtb	r3, r3
 801ba28:	2b00      	cmp	r3, #0
 801ba2a:	d02a      	beq.n	801ba82 <log_warn+0x7a>
    va_start(args,format);
 801ba2c:	2364      	movs	r3, #100	; 0x64
 801ba2e:	18fb      	adds	r3, r7, r3
 801ba30:	657b      	str	r3, [r7, #84]	; 0x54
    vsnprintf(fmtBuffer,LOGGER_MAX_BUF_SZ,format,args);
 801ba32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801ba34:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801ba36:	1d38      	adds	r0, r7, #4
 801ba38:	2150      	movs	r1, #80	; 0x50
 801ba3a:	f002 fc4d 	bl	801e2d8 <vsniprintf>
    va_end(args);

    if ( __log.onSerial1 ) {
 801ba3e:	4b14      	ldr	r3, [pc, #80]	; (801ba90 <log_warn+0x88>)
 801ba40:	781b      	ldrb	r3, [r3, #0]
 801ba42:	2220      	movs	r2, #32
 801ba44:	4013      	ands	r3, r2
 801ba46:	b2db      	uxtb	r3, r3
 801ba48:	2b00      	cmp	r3, #0
 801ba4a:	d003      	beq.n	801ba54 <log_warn+0x4c>
    	serial1_print(fmtBuffer);
 801ba4c:	1d3b      	adds	r3, r7, #4
 801ba4e:	0018      	movs	r0, r3
 801ba50:	f001 ff38 	bl	801d8c4 <serial1_print>
    }

    if ( __log.onSerial2 ) {
 801ba54:	4b0e      	ldr	r3, [pc, #56]	; (801ba90 <log_warn+0x88>)
 801ba56:	781b      	ldrb	r3, [r3, #0]
 801ba58:	2240      	movs	r2, #64	; 0x40
 801ba5a:	4013      	ands	r3, r2
 801ba5c:	b2db      	uxtb	r3, r3
 801ba5e:	2b00      	cmp	r3, #0
 801ba60:	d003      	beq.n	801ba6a <log_warn+0x62>
    	serial2_print(fmtBuffer);
 801ba62:	1d3b      	adds	r3, r7, #4
 801ba64:	0018      	movs	r0, r3
 801ba66:	f001 ff35 	bl	801d8d4 <serial2_print>
    }

    if ( __log.onDebug ) {
 801ba6a:	4b09      	ldr	r3, [pc, #36]	; (801ba90 <log_warn+0x88>)
 801ba6c:	781b      	ldrb	r3, [r3, #0]
 801ba6e:	227f      	movs	r2, #127	; 0x7f
 801ba70:	4393      	bics	r3, r2
 801ba72:	b2db      	uxtb	r3, r3
 801ba74:	2b00      	cmp	r3, #0
 801ba76:	d004      	beq.n	801ba82 <log_warn+0x7a>
    	debug_print(DEBUG_PRINT_WARNING,fmtBuffer);
 801ba78:	1d3b      	adds	r3, r7, #4
 801ba7a:	0019      	movs	r1, r3
 801ba7c:	2002      	movs	r0, #2
 801ba7e:	f001 ffaf 	bl	801d9e0 <debug_print>
        // @ TODO logfile_printf("%lu [warn] ",time_get_ms());
        //logfile_print(fmtBuffer);
    }
  }
#endif
}
 801ba82:	46c0      	nop			; (mov r8, r8)
 801ba84:	46bd      	mov	sp, r7
 801ba86:	b016      	add	sp, #88	; 0x58
 801ba88:	bc80      	pop	{r7}
 801ba8a:	bc08      	pop	{r3}
 801ba8c:	b004      	add	sp, #16
 801ba8e:	4718      	bx	r3
 801ba90:	20001680 	.word	0x20001680

0801ba94 <log_info>:

/**
 * Log a info according to the configuration on the different
 * possible logger
 */
void log_info(char *format, ...) {
 801ba94:	b40f      	push	{r0, r1, r2, r3}
 801ba96:	b580      	push	{r7, lr}
 801ba98:	b096      	sub	sp, #88	; 0x58
 801ba9a:	af00      	add	r7, sp, #0
#if ITSDK_LOGGER_CONF > 0
  va_list args;
  char 	fmtBuffer[LOGGER_MAX_BUF_SZ]; 				// buffer for log line formating before printing
  if ( __log.logInfo  && __log.ready ) {
 801ba9c:	4b1f      	ldr	r3, [pc, #124]	; (801bb1c <log_info+0x88>)
 801ba9e:	781b      	ldrb	r3, [r3, #0]
 801baa0:	2208      	movs	r2, #8
 801baa2:	4013      	ands	r3, r2
 801baa4:	b2db      	uxtb	r3, r3
 801baa6:	2b00      	cmp	r3, #0
 801baa8:	d031      	beq.n	801bb0e <log_info+0x7a>
 801baaa:	4b1c      	ldr	r3, [pc, #112]	; (801bb1c <log_info+0x88>)
 801baac:	781b      	ldrb	r3, [r3, #0]
 801baae:	2201      	movs	r2, #1
 801bab0:	4013      	ands	r3, r2
 801bab2:	b2db      	uxtb	r3, r3
 801bab4:	2b00      	cmp	r3, #0
 801bab6:	d02a      	beq.n	801bb0e <log_info+0x7a>
    va_start(args,format);
 801bab8:	2364      	movs	r3, #100	; 0x64
 801baba:	18fb      	adds	r3, r7, r3
 801babc:	657b      	str	r3, [r7, #84]	; 0x54
    vsnprintf(fmtBuffer,LOGGER_MAX_BUF_SZ,format,args);
 801babe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801bac0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801bac2:	1d38      	adds	r0, r7, #4
 801bac4:	2150      	movs	r1, #80	; 0x50
 801bac6:	f002 fc07 	bl	801e2d8 <vsniprintf>
    va_end(args);

    if ( __log.onSerial1 ) {
 801baca:	4b14      	ldr	r3, [pc, #80]	; (801bb1c <log_info+0x88>)
 801bacc:	781b      	ldrb	r3, [r3, #0]
 801bace:	2220      	movs	r2, #32
 801bad0:	4013      	ands	r3, r2
 801bad2:	b2db      	uxtb	r3, r3
 801bad4:	2b00      	cmp	r3, #0
 801bad6:	d003      	beq.n	801bae0 <log_info+0x4c>
    	serial1_print(fmtBuffer);
 801bad8:	1d3b      	adds	r3, r7, #4
 801bada:	0018      	movs	r0, r3
 801badc:	f001 fef2 	bl	801d8c4 <serial1_print>
    }

    if ( __log.onSerial2 ) {
 801bae0:	4b0e      	ldr	r3, [pc, #56]	; (801bb1c <log_info+0x88>)
 801bae2:	781b      	ldrb	r3, [r3, #0]
 801bae4:	2240      	movs	r2, #64	; 0x40
 801bae6:	4013      	ands	r3, r2
 801bae8:	b2db      	uxtb	r3, r3
 801baea:	2b00      	cmp	r3, #0
 801baec:	d003      	beq.n	801baf6 <log_info+0x62>
    	serial2_print(fmtBuffer);
 801baee:	1d3b      	adds	r3, r7, #4
 801baf0:	0018      	movs	r0, r3
 801baf2:	f001 feef 	bl	801d8d4 <serial2_print>
    }

    if ( __log.onDebug ) {
 801baf6:	4b09      	ldr	r3, [pc, #36]	; (801bb1c <log_info+0x88>)
 801baf8:	781b      	ldrb	r3, [r3, #0]
 801bafa:	227f      	movs	r2, #127	; 0x7f
 801bafc:	4393      	bics	r3, r2
 801bafe:	b2db      	uxtb	r3, r3
 801bb00:	2b00      	cmp	r3, #0
 801bb02:	d004      	beq.n	801bb0e <log_info+0x7a>
    	debug_print(DEBUG_PRINT_INFO, fmtBuffer);
 801bb04:	1d3b      	adds	r3, r7, #4
 801bb06:	0019      	movs	r1, r3
 801bb08:	2001      	movs	r0, #1
 801bb0a:	f001 ff69 	bl	801d9e0 <debug_print>
        // @ TODO logfile_printf("%lu [info] ",time_get_ms());
        //logfile_print(__log.fmtBuffer);
    }
  }
#endif
}
 801bb0e:	46c0      	nop			; (mov r8, r8)
 801bb10:	46bd      	mov	sp, r7
 801bb12:	b016      	add	sp, #88	; 0x58
 801bb14:	bc80      	pop	{r7}
 801bb16:	bc08      	pop	{r3}
 801bb18:	b004      	add	sp, #16
 801bb1a:	4718      	bx	r3
 801bb1c:	20001680 	.word	0x20001680

0801bb20 <itsdk_lorawan_setup>:

/**
 * Init the LoRaWan Stack
 * Actually static
 */
itsdk_lorawan_init_t itsdk_lorawan_setup(uint16_t region, itsdk_lorawan_channelInit_t * channelConfig) {
 801bb20:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bb22:	b095      	sub	sp, #84	; 0x54
 801bb24:	af02      	add	r7, sp, #8
 801bb26:	0002      	movs	r2, r0
 801bb28:	6039      	str	r1, [r7, #0]
 801bb2a:	1dbb      	adds	r3, r7, #6
 801bb2c:	801a      	strh	r2, [r3, #0]
	static uint8_t devEui[8];
	static uint8_t appEui[8];
	static uint8_t appKey[16];

	// On first run we store the configuration into the SecureStore
	itsdk_lorawan_resetFactoryDefaults(false);
 801bb2e:	2000      	movs	r0, #0
 801bb30:	f000 fa66 	bl	801c000 <itsdk_lorawan_resetFactoryDefaults>

	itsdk_lorawan_getDeviceEUI(devEui);
 801bb34:	4b72      	ldr	r3, [pc, #456]	; (801bd00 <itsdk_lorawan_setup+0x1e0>)
 801bb36:	0018      	movs	r0, r3
 801bb38:	f000 f9d6 	bl	801bee8 <itsdk_lorawan_getDeviceEUI>
	itsdk_lorawan_getAppEUI(appEui);
 801bb3c:	4b71      	ldr	r3, [pc, #452]	; (801bd04 <itsdk_lorawan_setup+0x1e4>)
 801bb3e:	0018      	movs	r0, r3
 801bb40:	f000 fa04 	bl	801bf4c <itsdk_lorawan_getAppEUI>
	itsdk_lorawan_getAppKEY(appKey);
 801bb44:	4b70      	ldr	r3, [pc, #448]	; (801bd08 <itsdk_lorawan_setup+0x1e8>)
 801bb46:	0018      	movs	r0, r3
 801bb48:	f000 fa32 	bl	801bfb0 <itsdk_lorawan_getAppKEY>

//	log_info_array("DEV :",devEui,8);
//	log_info_array("APP :",appEui,8);
//	log_info_array("KEY :",appKey,16);

	Radio.IoInit();
 801bb4c:	4b6f      	ldr	r3, [pc, #444]	; (801bd0c <itsdk_lorawan_setup+0x1ec>)
 801bb4e:	681b      	ldr	r3, [r3, #0]
 801bb50:	4798      	blx	r3
	#if ITSDK_CONFIGURATION_MODE == __CONFIG_STATIC
		#if (ITSDK_LORAWAN_DEVEUI_SRC == __LORAWAN_DEVEUI_GENERATED)
		  itsdk_getUniqId(devEui, 8);
		#endif
	#else
	   if ( itsdk_config.sdk.lorawan.devEuiType == __LORAWAN_DEVEUI_GENERATED ) {
 801bb52:	4b6f      	ldr	r3, [pc, #444]	; (801bd10 <itsdk_lorawan_setup+0x1f0>)
 801bb54:	7a9b      	ldrb	r3, [r3, #10]
 801bb56:	2230      	movs	r2, #48	; 0x30
 801bb58:	4013      	ands	r3, r2
 801bb5a:	b2db      	uxtb	r3, r3
 801bb5c:	2b20      	cmp	r3, #32
 801bb5e:	d104      	bne.n	801bb6a <itsdk_lorawan_setup+0x4a>
		  itsdk_getUniqId(devEui, 8);
 801bb60:	4b67      	ldr	r3, [pc, #412]	; (801bd00 <itsdk_lorawan_setup+0x1e0>)
 801bb62:	2108      	movs	r1, #8
 801bb64:	0018      	movs	r0, r3
 801bb66:	f001 fe47 	bl	801d7f8 <itsdk_getUniqId>
		__config.adrEnable =LORAWAN_ADR_OFF;
		#else
		  #error Invalid ITSDK_LORAWAN_ADR configuration
		#endif
    #else
		__config.adrEnable = (itsdk_config.sdk.lorawan.adrMode == __LORAWAN_ADR_ON)?LORAWAN_ADR_ON:LORAWAN_ADR_OFF;
 801bb6a:	4b69      	ldr	r3, [pc, #420]	; (801bd10 <itsdk_lorawan_setup+0x1f0>)
 801bb6c:	7a9b      	ldrb	r3, [r3, #10]
 801bb6e:	223f      	movs	r2, #63	; 0x3f
 801bb70:	4393      	bics	r3, r2
 801bb72:	b2db      	uxtb	r3, r3
 801bb74:	3b80      	subs	r3, #128	; 0x80
 801bb76:	425a      	negs	r2, r3
 801bb78:	4153      	adcs	r3, r2
 801bb7a:	b2da      	uxtb	r2, r3
 801bb7c:	2114      	movs	r1, #20
 801bb7e:	187b      	adds	r3, r7, r1
 801bb80:	701a      	strb	r2, [r3, #0]
	#endif

	#if ITSDK_CONFIGURATION_MODE == __CONFIG_STATIC
	__config.JoinType = ITSDK_LORAWAN_ACTIVATION;
	#else
	__config.JoinType = itsdk_config.sdk.lorawan.joinMode;
 801bb82:	4b63      	ldr	r3, [pc, #396]	; (801bd10 <itsdk_lorawan_setup+0x1f0>)
 801bb84:	7a9b      	ldrb	r3, [r3, #10]
 801bb86:	079b      	lsls	r3, r3, #30
 801bb88:	0f9b      	lsrs	r3, r3, #30
 801bb8a:	b2db      	uxtb	r3, r3
 801bb8c:	001a      	movs	r2, r3
 801bb8e:	187b      	adds	r3, r7, r1
 801bb90:	719a      	strb	r2, [r3, #6]
	#endif
	__config.devEui = devEui;
 801bb92:	187b      	adds	r3, r7, r1
 801bb94:	4a5a      	ldr	r2, [pc, #360]	; (801bd00 <itsdk_lorawan_setup+0x1e0>)
 801bb96:	609a      	str	r2, [r3, #8]
		__config.enablePublicNetwork = true;
		#else
		__config.enablePublicNetwork = false;
		#endif
	#else
	__config.enablePublicNetwork = (itsdk_config.sdk.lorawan.networkType == __LORAWAN_NWK_PUBLIC);
 801bb98:	4b5d      	ldr	r3, [pc, #372]	; (801bd10 <itsdk_lorawan_setup+0x1f0>)
 801bb9a:	7a9b      	ldrb	r3, [r3, #10]
 801bb9c:	220c      	movs	r2, #12
 801bb9e:	4013      	ands	r3, r2
 801bba0:	b2db      	uxtb	r3, r3
 801bba2:	3b04      	subs	r3, #4
 801bba4:	425a      	negs	r2, r3
 801bba6:	4153      	adcs	r3, r2
 801bba8:	b2da      	uxtb	r2, r3
 801bbaa:	187b      	adds	r3, r7, r1
 801bbac:	709a      	strb	r2, [r3, #2]
	#endif


	__config.region = region;
 801bbae:	187b      	adds	r3, r7, r1
 801bbb0:	1dba      	adds	r2, r7, #6
 801bbb2:	8812      	ldrh	r2, [r2, #0]
 801bbb4:	809a      	strh	r2, [r3, #4]
	__config.txDatarate = ITSDK_LORAWAN_DEFAULT_DR;
 801bbb6:	187b      	adds	r3, r7, r1
 801bbb8:	2201      	movs	r2, #1
 801bbba:	705a      	strb	r2, [r3, #1]
	#if ( ITSDK_LORAWAN_ACTIVATION &  __LORAWAN_OTAA )> 0
	__config.config.otaa.appEui = appEui;
 801bbbc:	187b      	adds	r3, r7, r1
 801bbbe:	4a51      	ldr	r2, [pc, #324]	; (801bd04 <itsdk_lorawan_setup+0x1e4>)
 801bbc0:	60da      	str	r2, [r3, #12]
	__config.config.otaa.appKey = appKey;
 801bbc2:	187b      	adds	r3, r7, r1
 801bbc4:	4a50      	ldr	r2, [pc, #320]	; (801bd08 <itsdk_lorawan_setup+0x1e8>)
 801bbc6:	611a      	str	r2, [r3, #16]
	__config.config.otaa.nwkKey = appKey;
 801bbc8:	187b      	adds	r3, r7, r1
 801bbca:	4a4f      	ldr	r2, [pc, #316]	; (801bd08 <itsdk_lorawan_setup+0x1e8>)
 801bbcc:	615a      	str	r2, [r3, #20]
	#else
		#error "ABP not yest supported"
	#endif

	lorawan_driver_LORA_Init(&__config);
 801bbce:	000c      	movs	r4, r1
 801bbd0:	187b      	adds	r3, r7, r1
 801bbd2:	0018      	movs	r0, r3
 801bbd4:	f7ec f9f4 	bl	8007fc0 <lorawan_driver_LORA_Init>
	bzero(&__config,sizeof(__config));
 801bbd8:	193b      	adds	r3, r7, r4
 801bbda:	2120      	movs	r1, #32
 801bbdc:	0018      	movs	r0, r3
 801bbde:	f002 fad1 	bl	801e184 <bzero>

	if ( channelConfig != NULL ) {
 801bbe2:	683b      	ldr	r3, [r7, #0]
 801bbe4:	2b00      	cmp	r3, #0
 801bbe6:	d100      	bne.n	801bbea <itsdk_lorawan_setup+0xca>
 801bbe8:	e084      	b.n	801bcf4 <itsdk_lorawan_setup+0x1d4>
		switch (region) {
 801bbea:	1dbb      	adds	r3, r7, #6
 801bbec:	881a      	ldrh	r2, [r3, #0]
 801bbee:	2380      	movs	r3, #128	; 0x80
 801bbf0:	005b      	lsls	r3, r3, #1
 801bbf2:	429a      	cmp	r2, r3
 801bbf4:	d142      	bne.n	801bc7c <itsdk_lorawan_setup+0x15c>
		case __LORAWAN_REGION_US915:
		{
			// US915 does not allow to addChannel ; all the possible channel are already defined
			// and activated. Here we basically unactivate the one we do not need
			uint16_t channels[6];
			bzero(channels,6*sizeof(uint16_t));
 801bbf6:	2308      	movs	r3, #8
 801bbf8:	18fb      	adds	r3, r7, r3
 801bbfa:	210c      	movs	r1, #12
 801bbfc:	0018      	movs	r0, r3
 801bbfe:	f002 fac1 	bl	801e184 <bzero>
			for ( int i=0 ; i < channelConfig->num ; i++ ) {
 801bc02:	2300      	movs	r3, #0
 801bc04:	647b      	str	r3, [r7, #68]	; 0x44
 801bc06:	e02a      	b.n	801bc5e <itsdk_lorawan_setup+0x13e>
				int channel = (channelConfig->channels[i].frequency - 902300000) / 200000; // get chan ID on the 72
 801bc08:	683a      	ldr	r2, [r7, #0]
 801bc0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801bc0c:	011b      	lsls	r3, r3, #4
 801bc0e:	18d3      	adds	r3, r2, r3
 801bc10:	3308      	adds	r3, #8
 801bc12:	681b      	ldr	r3, [r3, #0]
 801bc14:	4a3f      	ldr	r2, [pc, #252]	; (801bd14 <itsdk_lorawan_setup+0x1f4>)
 801bc16:	4694      	mov	ip, r2
 801bc18:	4463      	add	r3, ip
 801bc1a:	493f      	ldr	r1, [pc, #252]	; (801bd18 <itsdk_lorawan_setup+0x1f8>)
 801bc1c:	0018      	movs	r0, r3
 801bc1e:	f7e4 fa7b 	bl	8000118 <__udivsi3>
 801bc22:	0003      	movs	r3, r0
 801bc24:	63fb      	str	r3, [r7, #60]	; 0x3c
				int index = channel >> 4; // associated word
 801bc26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801bc28:	111b      	asrs	r3, r3, #4
 801bc2a:	63bb      	str	r3, [r7, #56]	; 0x38
				int shift = channel & 0x0F;
 801bc2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801bc2e:	220f      	movs	r2, #15
 801bc30:	4013      	ands	r3, r2
 801bc32:	637b      	str	r3, [r7, #52]	; 0x34
				channels[index] |= (1 << shift);
 801bc34:	2008      	movs	r0, #8
 801bc36:	183b      	adds	r3, r7, r0
 801bc38:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801bc3a:	0052      	lsls	r2, r2, #1
 801bc3c:	5ad3      	ldrh	r3, [r2, r3]
 801bc3e:	b21a      	sxth	r2, r3
 801bc40:	2101      	movs	r1, #1
 801bc42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bc44:	4099      	lsls	r1, r3
 801bc46:	000b      	movs	r3, r1
 801bc48:	b21b      	sxth	r3, r3
 801bc4a:	4313      	orrs	r3, r2
 801bc4c:	b21b      	sxth	r3, r3
 801bc4e:	b299      	uxth	r1, r3
 801bc50:	183b      	adds	r3, r7, r0
 801bc52:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801bc54:	0052      	lsls	r2, r2, #1
 801bc56:	52d1      	strh	r1, [r2, r3]
			for ( int i=0 ; i < channelConfig->num ; i++ ) {
 801bc58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801bc5a:	3301      	adds	r3, #1
 801bc5c:	647b      	str	r3, [r7, #68]	; 0x44
 801bc5e:	683b      	ldr	r3, [r7, #0]
 801bc60:	781b      	ldrb	r3, [r3, #0]
 801bc62:	001a      	movs	r2, r3
 801bc64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801bc66:	4293      	cmp	r3, r2
 801bc68:	dbce      	blt.n	801bc08 <itsdk_lorawan_setup+0xe8>
				LOG_DEBUG_LORAWANSTK(("Add channel %d at freq %d on idx %d with shift %d\r\n",channel,channelConfig->channels[i].frequency,index,shift));
			}
			lorawan_driver_LORA_SelectChannels(__LORAWAN_REGION_US915,channels);
 801bc6a:	2308      	movs	r3, #8
 801bc6c:	18fa      	adds	r2, r7, r3
 801bc6e:	2380      	movs	r3, #128	; 0x80
 801bc70:	005b      	lsls	r3, r3, #1
 801bc72:	0011      	movs	r1, r2
 801bc74:	0018      	movs	r0, r3
 801bc76:	f7ec fd05 	bl	8008684 <lorawan_driver_LORA_SelectChannels>
		}
		break;
 801bc7a:	e03c      	b.n	801bcf6 <itsdk_lorawan_setup+0x1d6>

		default:
			for ( int i=0 ; i < channelConfig->num ; i++ ) {
 801bc7c:	2300      	movs	r3, #0
 801bc7e:	643b      	str	r3, [r7, #64]	; 0x40
 801bc80:	e031      	b.n	801bce6 <itsdk_lorawan_setup+0x1c6>
				if ( lorawan_driver_LORA_AddChannel(
 801bc82:	683a      	ldr	r2, [r7, #0]
 801bc84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801bc86:	011b      	lsls	r3, r3, #4
 801bc88:	18d3      	adds	r3, r2, r3
 801bc8a:	3304      	adds	r3, #4
 801bc8c:	7818      	ldrb	r0, [r3, #0]
 801bc8e:	683a      	ldr	r2, [r7, #0]
 801bc90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801bc92:	011b      	lsls	r3, r3, #4
 801bc94:	18d3      	adds	r3, r2, r3
 801bc96:	3308      	adds	r3, #8
 801bc98:	681c      	ldr	r4, [r3, #0]
 801bc9a:	683a      	ldr	r2, [r7, #0]
 801bc9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801bc9e:	011b      	lsls	r3, r3, #4
 801bca0:	18d3      	adds	r3, r2, r3
 801bca2:	330c      	adds	r3, #12
 801bca4:	681d      	ldr	r5, [r3, #0]
 801bca6:	683a      	ldr	r2, [r7, #0]
 801bca8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801bcaa:	011b      	lsls	r3, r3, #4
 801bcac:	18d3      	adds	r3, r2, r3
 801bcae:	3310      	adds	r3, #16
 801bcb0:	781e      	ldrb	r6, [r3, #0]
 801bcb2:	683a      	ldr	r2, [r7, #0]
 801bcb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801bcb6:	011b      	lsls	r3, r3, #4
 801bcb8:	18d3      	adds	r3, r2, r3
 801bcba:	3311      	adds	r3, #17
 801bcbc:	781b      	ldrb	r3, [r3, #0]
 801bcbe:	6839      	ldr	r1, [r7, #0]
 801bcc0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801bcc2:	0112      	lsls	r2, r2, #4
 801bcc4:	188a      	adds	r2, r1, r2
 801bcc6:	3212      	adds	r2, #18
 801bcc8:	7812      	ldrb	r2, [r2, #0]
 801bcca:	9201      	str	r2, [sp, #4]
 801bccc:	9300      	str	r3, [sp, #0]
 801bcce:	0033      	movs	r3, r6
 801bcd0:	002a      	movs	r2, r5
 801bcd2:	0021      	movs	r1, r4
 801bcd4:	f7ec fc6c 	bl	80085b0 <lorawan_driver_LORA_AddChannel>
 801bcd8:	1e03      	subs	r3, r0, #0
 801bcda:	d001      	beq.n	801bce0 <itsdk_lorawan_setup+0x1c0>
						channelConfig->channels[i].frequency,
						channelConfig->channels[i].frequencyRx,
						channelConfig->channels[i].minDr,
						channelConfig->channels[i].maxDr,
						channelConfig->channels[i].band
					) != LORAWAN_CHANNEL_SUCCESS ) return LORAWAN_INIT_CHANNEL_FAILED;
 801bcdc:	2301      	movs	r3, #1
 801bcde:	e00b      	b.n	801bcf8 <itsdk_lorawan_setup+0x1d8>
			for ( int i=0 ; i < channelConfig->num ; i++ ) {
 801bce0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801bce2:	3301      	adds	r3, #1
 801bce4:	643b      	str	r3, [r7, #64]	; 0x40
 801bce6:	683b      	ldr	r3, [r7, #0]
 801bce8:	781b      	ldrb	r3, [r3, #0]
 801bcea:	001a      	movs	r2, r3
 801bcec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801bcee:	4293      	cmp	r3, r2
 801bcf0:	dbc7      	blt.n	801bc82 <itsdk_lorawan_setup+0x162>
			}
			break;
 801bcf2:	e000      	b.n	801bcf6 <itsdk_lorawan_setup+0x1d6>
		}
	}
 801bcf4:	46c0      	nop			; (mov r8, r8)
	return LORAWAN_INIT_SUCESS;
 801bcf6:	2300      	movs	r3, #0
}
 801bcf8:	0018      	movs	r0, r3
 801bcfa:	46bd      	mov	sp, r7
 801bcfc:	b013      	add	sp, #76	; 0x4c
 801bcfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bd00:	20001210 	.word	0x20001210
 801bd04:	20001218 	.word	0x20001218
 801bd08:	20001220 	.word	0x20001220
 801bd0c:	08020c58 	.word	0x08020c58
 801bd10:	20001654 	.word	0x20001654
 801bd14:	ca37fea0 	.word	0xca37fea0
 801bd18:	00030d40 	.word	0x00030d40

0801bd1c <itsdk_lorawan_join_sync>:
 *                   it allows to switch low power but is a higher risk in term of timing respect.
 *                   returns (LORAWAN_JOIN_SUCCESS/LORAWAN_JOIN_FAILED)
 *                   in async mode the given function will be called with the join status.
 *                   When no function is proposed, the status can be polled.
 */
itsdk_lorawan_join_t itsdk_lorawan_join_sync() {
 801bd1c:	b580      	push	{r7, lr}
 801bd1e:	af00      	add	r7, sp, #0
	LOG_INFO_LORAWANSTK(("itsdk_lorawan_join_sync\r\n"));
	return lorawan_driver_LORA_Join(LORAWAN_RUN_SYNC);
 801bd20:	2000      	movs	r0, #0
 801bd22:	f7ec fa99 	bl	8008258 <lorawan_driver_LORA_Join>
 801bd26:	0003      	movs	r3, r0
}
 801bd28:	0018      	movs	r0, r3
 801bd2a:	46bd      	mov	sp, r7
 801bd2c:	bd80      	pop	{r7, pc}
	...

0801bd30 <lorawan_driver_onJoinSuccess>:

// Override the underlaying callbacks
static void (*__itsdk_lorawan_join_cb)(itsdk_lorawan_join_t status)  = NULL;
void lorawan_driver_onJoinSuccess() {
 801bd30:	b580      	push	{r7, lr}
 801bd32:	af00      	add	r7, sp, #0
	LOG_INFO_LORAWANSTK(("** onJoinSuccess\r\n"));
	if (__itsdk_lorawan_join_cb != NULL) {
 801bd34:	4b05      	ldr	r3, [pc, #20]	; (801bd4c <lorawan_driver_onJoinSuccess+0x1c>)
 801bd36:	681b      	ldr	r3, [r3, #0]
 801bd38:	2b00      	cmp	r3, #0
 801bd3a:	d003      	beq.n	801bd44 <lorawan_driver_onJoinSuccess+0x14>
		__itsdk_lorawan_join_cb(LORAWAN_JOIN_SUCCESS);
 801bd3c:	4b03      	ldr	r3, [pc, #12]	; (801bd4c <lorawan_driver_onJoinSuccess+0x1c>)
 801bd3e:	681b      	ldr	r3, [r3, #0]
 801bd40:	2001      	movs	r0, #1
 801bd42:	4798      	blx	r3
	}
}
 801bd44:	46c0      	nop			; (mov r8, r8)
 801bd46:	46bd      	mov	sp, r7
 801bd48:	bd80      	pop	{r7, pc}
 801bd4a:	46c0      	nop			; (mov r8, r8)
 801bd4c:	20001208 	.word	0x20001208

0801bd50 <lorawan_driver_onJoinFailed>:
void lorawan_driver_onJoinFailed() {
 801bd50:	b580      	push	{r7, lr}
 801bd52:	af00      	add	r7, sp, #0
	LOG_INFO_LORAWANSTK(("** onJoinFailed\r\n"));
	if (__itsdk_lorawan_join_cb != NULL) {
 801bd54:	4b05      	ldr	r3, [pc, #20]	; (801bd6c <lorawan_driver_onJoinFailed+0x1c>)
 801bd56:	681b      	ldr	r3, [r3, #0]
 801bd58:	2b00      	cmp	r3, #0
 801bd5a:	d003      	beq.n	801bd64 <lorawan_driver_onJoinFailed+0x14>
		__itsdk_lorawan_join_cb(LORAWAN_JOIN_FAILED);
 801bd5c:	4b03      	ldr	r3, [pc, #12]	; (801bd6c <lorawan_driver_onJoinFailed+0x1c>)
 801bd5e:	681b      	ldr	r3, [r3, #0]
 801bd60:	2002      	movs	r0, #2
 801bd62:	4798      	blx	r3
	}
}
 801bd64:	46c0      	nop			; (mov r8, r8)
 801bd66:	46bd      	mov	sp, r7
 801bd68:	bd80      	pop	{r7, pc}
 801bd6a:	46c0      	nop			; (mov r8, r8)
 801bd6c:	20001208 	.word	0x20001208

0801bd70 <itsdk_lorawan_hasjoined>:
}

/**
 * Return true once the device has joined the the network
 */
bool itsdk_lorawan_hasjoined() {
 801bd70:	b580      	push	{r7, lr}
 801bd72:	af00      	add	r7, sp, #0
	LOG_DEBUG_LORAWANSTK(("itsdk_lorawan_hasjoined\r\n"));
	return ( lorawan_driver_LORA_getJoinState() == LORAWAN_STATE_JOIN_SUCCESS);
 801bd74:	f7ec fcac 	bl	80086d0 <lorawan_driver_LORA_getJoinState>
 801bd78:	0003      	movs	r3, r0
 801bd7a:	3b03      	subs	r3, #3
 801bd7c:	425a      	negs	r2, r3
 801bd7e:	4153      	adcs	r3, r2
 801bd80:	b2db      	uxtb	r3, r3
}
 801bd82:	0018      	movs	r0, r3
 801bd84:	46bd      	mov	sp, r7
 801bd86:	bd80      	pop	{r7, pc}

0801bd88 <__itsdk_lorawan_encrypt_payload>:
 */
static void __itsdk_lorawan_encrypt_payload(
	uint8_t * payload,
	uint8_t   payloadSize,
	itdsk_payload_encrypt_t encrypt
){
 801bd88:	b580      	push	{r7, lr}
 801bd8a:	b082      	sub	sp, #8
 801bd8c:	af00      	add	r7, sp, #0
 801bd8e:	6078      	str	r0, [r7, #4]
 801bd90:	0008      	movs	r0, r1
 801bd92:	0011      	movs	r1, r2
 801bd94:	1cfb      	adds	r3, r7, #3
 801bd96:	1c02      	adds	r2, r0, #0
 801bd98:	701a      	strb	r2, [r3, #0]
 801bd9a:	1cbb      	adds	r3, r7, #2
 801bd9c:	1c0a      	adds	r2, r1, #0
 801bd9e:	701a      	strb	r2, [r3, #0]
				sharedKey,							// 24b hardcoded value (hidden with ITSDK_PROTECT_KEY)
				masterKey							// 128B key used for encryption (hidden with ITSDK_PROTECT_KEY)
		);
	}
#endif
}
 801bda0:	46c0      	nop			; (mov r8, r8)
 801bda2:	46bd      	mov	sp, r7
 801bda4:	b002      	add	sp, #8
 801bda6:	bd80      	pop	{r7, pc}

0801bda8 <itsdk_lorawan_send_sync>:
		uint8_t	  retry,
		uint8_t	* rPort,													// In case of reception - Port (uint8_t)
		uint8_t	* rSize,													// In case of reception - Size (uint8_t) - init with buffer max size
		uint8_t * rData,													// In case of recpetion - Data (uint8_t[] bcopied)
		itdsk_payload_encrypt_t encrypt										// End to End encryption mode
) {
 801bda8:	b590      	push	{r4, r7, lr}
 801bdaa:	b089      	sub	sp, #36	; 0x24
 801bdac:	af06      	add	r7, sp, #24
 801bdae:	6078      	str	r0, [r7, #4]
 801bdb0:	000c      	movs	r4, r1
 801bdb2:	0010      	movs	r0, r2
 801bdb4:	0019      	movs	r1, r3
 801bdb6:	1cfb      	adds	r3, r7, #3
 801bdb8:	1c22      	adds	r2, r4, #0
 801bdba:	701a      	strb	r2, [r3, #0]
 801bdbc:	1cbb      	adds	r3, r7, #2
 801bdbe:	1c02      	adds	r2, r0, #0
 801bdc0:	701a      	strb	r2, [r3, #0]
 801bdc2:	1c7b      	adds	r3, r7, #1
 801bdc4:	1c0a      	adds	r2, r1, #0
 801bdc6:	701a      	strb	r2, [r3, #0]
	LOG_INFO_LORAWANSTK(("itsdk_lorawan_send_sync\r\n"));
	__itsdk_lorawan_encrypt_payload(payload,payloadSize,encrypt);
 801bdc8:	232c      	movs	r3, #44	; 0x2c
 801bdca:	18fb      	adds	r3, r7, r3
 801bdcc:	781a      	ldrb	r2, [r3, #0]
 801bdce:	1cfb      	adds	r3, r7, #3
 801bdd0:	7819      	ldrb	r1, [r3, #0]
 801bdd2:	687b      	ldr	r3, [r7, #4]
 801bdd4:	0018      	movs	r0, r3
 801bdd6:	f7ff ffd7 	bl	801bd88 <__itsdk_lorawan_encrypt_payload>
	return lorawan_driver_LORA_Send(payload,payloadSize,port,dataRate,confirm,retry,LORAWAN_RUN_SYNC,rPort,rSize,rData);
 801bdda:	1c7b      	adds	r3, r7, #1
 801bddc:	781c      	ldrb	r4, [r3, #0]
 801bdde:	1cbb      	adds	r3, r7, #2
 801bde0:	781a      	ldrb	r2, [r3, #0]
 801bde2:	1cfb      	adds	r3, r7, #3
 801bde4:	7819      	ldrb	r1, [r3, #0]
 801bde6:	6878      	ldr	r0, [r7, #4]
 801bde8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bdea:	9305      	str	r3, [sp, #20]
 801bdec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bdee:	9304      	str	r3, [sp, #16]
 801bdf0:	6a3b      	ldr	r3, [r7, #32]
 801bdf2:	9303      	str	r3, [sp, #12]
 801bdf4:	2300      	movs	r3, #0
 801bdf6:	9302      	str	r3, [sp, #8]
 801bdf8:	231c      	movs	r3, #28
 801bdfa:	18fb      	adds	r3, r7, r3
 801bdfc:	781b      	ldrb	r3, [r3, #0]
 801bdfe:	9301      	str	r3, [sp, #4]
 801be00:	2318      	movs	r3, #24
 801be02:	18fb      	adds	r3, r7, r3
 801be04:	781b      	ldrb	r3, [r3, #0]
 801be06:	9300      	str	r3, [sp, #0]
 801be08:	0023      	movs	r3, r4
 801be0a:	f7ec fab1 	bl	8008370 <lorawan_driver_LORA_Send>
 801be0e:	0003      	movs	r3, r0
}
 801be10:	0018      	movs	r0, r3
 801be12:	46bd      	mov	sp, r7
 801be14:	b003      	add	sp, #12
 801be16:	bd90      	pop	{r4, r7, pc}

0801be18 <lorawan_driver_onSendSuccessAckFailed>:

static void (*__itsdk_lorawan_send_cb)(itsdk_lorawan_send_t status, uint8_t port, uint8_t size, uint8_t * rxData) = NULL;
void lorawan_driver_onSendSuccessAckFailed() {
 801be18:	b5b0      	push	{r4, r5, r7, lr}
 801be1a:	af00      	add	r7, sp, #0
	LOG_INFO_LORAWANSTK(("**onSendSuccessAckFailed\r\n"));
	if (__itsdk_lorawan_send_cb != NULL) {
 801be1c:	4b06      	ldr	r3, [pc, #24]	; (801be38 <lorawan_driver_onSendSuccessAckFailed+0x20>)
 801be1e:	681b      	ldr	r3, [r3, #0]
 801be20:	2b00      	cmp	r3, #0
 801be22:	d006      	beq.n	801be32 <lorawan_driver_onSendSuccessAckFailed+0x1a>
		__itsdk_lorawan_send_cb(LORAWAN_SEND_SENT,0,0,NULL);
 801be24:	4b04      	ldr	r3, [pc, #16]	; (801be38 <lorawan_driver_onSendSuccessAckFailed+0x20>)
 801be26:	681c      	ldr	r4, [r3, #0]
 801be28:	2300      	movs	r3, #0
 801be2a:	2200      	movs	r2, #0
 801be2c:	2100      	movs	r1, #0
 801be2e:	2001      	movs	r0, #1
 801be30:	47a0      	blx	r4
	}
}
 801be32:	46c0      	nop			; (mov r8, r8)
 801be34:	46bd      	mov	sp, r7
 801be36:	bdb0      	pop	{r4, r5, r7, pc}
 801be38:	2000120c 	.word	0x2000120c

0801be3c <lorawan_driver_onSendAckSuccess>:
void lorawan_driver_onSendAckSuccess() {
 801be3c:	b5b0      	push	{r4, r5, r7, lr}
 801be3e:	af00      	add	r7, sp, #0
	LOG_INFO_LORAWANSTK(("**onSendSuccessAckSuccess\r\n"));
	if (__itsdk_lorawan_send_cb != NULL) {
 801be40:	4b06      	ldr	r3, [pc, #24]	; (801be5c <lorawan_driver_onSendAckSuccess+0x20>)
 801be42:	681b      	ldr	r3, [r3, #0]
 801be44:	2b00      	cmp	r3, #0
 801be46:	d006      	beq.n	801be56 <lorawan_driver_onSendAckSuccess+0x1a>
		__itsdk_lorawan_send_cb(LORAWAN_SEND_ACKED,0,0,NULL);
 801be48:	4b04      	ldr	r3, [pc, #16]	; (801be5c <lorawan_driver_onSendAckSuccess+0x20>)
 801be4a:	681c      	ldr	r4, [r3, #0]
 801be4c:	2300      	movs	r3, #0
 801be4e:	2200      	movs	r2, #0
 801be50:	2100      	movs	r1, #0
 801be52:	2002      	movs	r0, #2
 801be54:	47a0      	blx	r4
	}
}
 801be56:	46c0      	nop			; (mov r8, r8)
 801be58:	46bd      	mov	sp, r7
 801be5a:	bdb0      	pop	{r4, r5, r7, pc}
 801be5c:	2000120c 	.word	0x2000120c

0801be60 <lorawan_driver_onSendSuccess>:
void lorawan_driver_onSendSuccess() {
 801be60:	b5b0      	push	{r4, r5, r7, lr}
 801be62:	af00      	add	r7, sp, #0
	LOG_INFO_LORAWANSTK(("**onSendSuccess\r\n"));
	if (__itsdk_lorawan_send_cb != NULL) {
 801be64:	4b06      	ldr	r3, [pc, #24]	; (801be80 <lorawan_driver_onSendSuccess+0x20>)
 801be66:	681b      	ldr	r3, [r3, #0]
 801be68:	2b00      	cmp	r3, #0
 801be6a:	d006      	beq.n	801be7a <lorawan_driver_onSendSuccess+0x1a>
		__itsdk_lorawan_send_cb(LORAWAN_SEND_SENT,0,0,NULL);
 801be6c:	4b04      	ldr	r3, [pc, #16]	; (801be80 <lorawan_driver_onSendSuccess+0x20>)
 801be6e:	681c      	ldr	r4, [r3, #0]
 801be70:	2300      	movs	r3, #0
 801be72:	2200      	movs	r2, #0
 801be74:	2100      	movs	r1, #0
 801be76:	2001      	movs	r0, #1
 801be78:	47a0      	blx	r4
	}
}
 801be7a:	46c0      	nop			; (mov r8, r8)
 801be7c:	46bd      	mov	sp, r7
 801be7e:	bdb0      	pop	{r4, r5, r7, pc}
 801be80:	2000120c 	.word	0x2000120c

0801be84 <lorawan_driver_onDataReception>:

void lorawan_driver_onDataReception(uint8_t port, uint8_t * data, uint8_t size) {
 801be84:	b590      	push	{r4, r7, lr}
 801be86:	b083      	sub	sp, #12
 801be88:	af00      	add	r7, sp, #0
 801be8a:	6039      	str	r1, [r7, #0]
 801be8c:	0011      	movs	r1, r2
 801be8e:	1dfb      	adds	r3, r7, #7
 801be90:	1c02      	adds	r2, r0, #0
 801be92:	701a      	strb	r2, [r3, #0]
 801be94:	1dbb      	adds	r3, r7, #6
 801be96:	1c0a      	adds	r2, r1, #0
 801be98:	701a      	strb	r2, [r3, #0]
		for ( int i = 0 ; i < size ; i++ ) {
			LOG_INFO_LORAWANSTK(("%02X ",data[i]));
		}
		LOG_INFO_LORAWANSTK(("\n"));
	#endif
	if (__itsdk_lorawan_send_cb != NULL) {
 801be9a:	4b09      	ldr	r3, [pc, #36]	; (801bec0 <lorawan_driver_onDataReception+0x3c>)
 801be9c:	681b      	ldr	r3, [r3, #0]
 801be9e:	2b00      	cmp	r3, #0
 801bea0:	d009      	beq.n	801beb6 <lorawan_driver_onDataReception+0x32>
		__itsdk_lorawan_send_cb(LORAWAN_SEND_ACKED_WITH_DOWNLINK,port,size,data);
 801bea2:	4b07      	ldr	r3, [pc, #28]	; (801bec0 <lorawan_driver_onDataReception+0x3c>)
 801bea4:	681c      	ldr	r4, [r3, #0]
 801bea6:	6838      	ldr	r0, [r7, #0]
 801bea8:	1dbb      	adds	r3, r7, #6
 801beaa:	781a      	ldrb	r2, [r3, #0]
 801beac:	1dfb      	adds	r3, r7, #7
 801beae:	7819      	ldrb	r1, [r3, #0]
 801beb0:	0003      	movs	r3, r0
 801beb2:	2003      	movs	r0, #3
 801beb4:	47a0      	blx	r4
	}
}
 801beb6:	46c0      	nop			; (mov r8, r8)
 801beb8:	46bd      	mov	sp, r7
 801beba:	b003      	add	sp, #12
 801bebc:	bd90      	pop	{r4, r7, pc}
 801bebe:	46c0      	nop			; (mov r8, r8)
 801bec0:	2000120c 	.word	0x2000120c

0801bec4 <lorawan_driver_onPendingDownlink>:

void lorawan_driver_onPendingDownlink() {
 801bec4:	b5b0      	push	{r4, r5, r7, lr}
 801bec6:	af00      	add	r7, sp, #0
	LOG_INFO_LORAWANSTK(("**onPendingDownlink\r\n"));
	if (__itsdk_lorawan_send_cb != NULL) {
 801bec8:	4b06      	ldr	r3, [pc, #24]	; (801bee4 <lorawan_driver_onPendingDownlink+0x20>)
 801beca:	681b      	ldr	r3, [r3, #0]
 801becc:	2b00      	cmp	r3, #0
 801bece:	d006      	beq.n	801bede <lorawan_driver_onPendingDownlink+0x1a>
		__itsdk_lorawan_send_cb(LORAWAN_SEND_ACKED_WITH_DOWNLINK_PENDING,0,0,NULL);
 801bed0:	4b04      	ldr	r3, [pc, #16]	; (801bee4 <lorawan_driver_onPendingDownlink+0x20>)
 801bed2:	681c      	ldr	r4, [r3, #0]
 801bed4:	2300      	movs	r3, #0
 801bed6:	2200      	movs	r2, #0
 801bed8:	2100      	movs	r1, #0
 801beda:	2004      	movs	r0, #4
 801bedc:	47a0      	blx	r4
	}
}
 801bede:	46c0      	nop			; (mov r8, r8)
 801bee0:	46bd      	mov	sp, r7
 801bee2:	bdb0      	pop	{r4, r5, r7, pc}
 801bee4:	2000120c 	.word	0x2000120c

0801bee8 <itsdk_lorawan_getDeviceEUI>:
}

/**
 * Get the device EUI as a uint8_t[]
 */
__weak itsdk_lorawan_return_t itsdk_lorawan_getDeviceEUI(uint8_t * devEui){
 801bee8:	b590      	push	{r4, r7, lr}
 801beea:	b089      	sub	sp, #36	; 0x24
 801beec:	af00      	add	r7, sp, #0
 801beee:	6078      	str	r0, [r7, #4]
	LOG_INFO_LORAWANSTK(("itsdk_lorawan_getDeviceEUI\r\n"));
	#if ITSDK_WITH_SECURESTORE == __ENABLE
		uint8_t d[8];
		uint8_t buffer[16];
		if ( itsdk_secstore_readBlock(ITSDK_SS_LORA_OTAA_DEVEUIAPPEUI, buffer) != SS_SUCCESS ) {
 801bef0:	2308      	movs	r3, #8
 801bef2:	18fb      	adds	r3, r7, r3
 801bef4:	0019      	movs	r1, r3
 801bef6:	2007      	movs	r0, #7
 801bef8:	f7fd fb9a 	bl	8019630 <itsdk_secstore_readBlock>
 801befc:	1e03      	subs	r3, r0, #0
 801befe:	d00b      	beq.n	801bf18 <itsdk_lorawan_getDeviceEUI+0x30>
			#if ITSDK_WITH_ERROR_RPT == __ENABLE
				ITSDK_ERROR_REPORT(ITSDK_ERROR_LORAWAN_SS_INVALID,0);
 801bf00:	4b11      	ldr	r3, [pc, #68]	; (801bf48 <itsdk_lorawan_getDeviceEUI+0x60>)
 801bf02:	2100      	movs	r1, #0
 801bf04:	0018      	movs	r0, r3
 801bf06:	f7ff faad 	bl	801b464 <itsdk_error_report>
			#endif
			bzero(devEui,8);
 801bf0a:	687b      	ldr	r3, [r7, #4]
 801bf0c:	2108      	movs	r1, #8
 801bf0e:	0018      	movs	r0, r3
 801bf10:	f002 f938 	bl	801e184 <bzero>
			return LORAWAN_RETURN_FAILED;
 801bf14:	2301      	movs	r3, #1
 801bf16:	e012      	b.n	801bf3e <itsdk_lorawan_getDeviceEUI+0x56>
		} else {
			memcpy(d,buffer,8);
 801bf18:	2418      	movs	r4, #24
 801bf1a:	193a      	adds	r2, r7, r4
 801bf1c:	2308      	movs	r3, #8
 801bf1e:	18fb      	adds	r3, r7, r3
 801bf20:	0010      	movs	r0, r2
 801bf22:	0019      	movs	r1, r3
 801bf24:	2308      	movs	r3, #8
 801bf26:	001a      	movs	r2, r3
 801bf28:	f002 f95c 	bl	801e1e4 <memcpy>
		}
	#else
		uint8_t d[8] = ITSDK_LORAWAN_DEVEUI;
	#endif
	memcpy(devEui,d,8);
 801bf2c:	687a      	ldr	r2, [r7, #4]
 801bf2e:	193b      	adds	r3, r7, r4
 801bf30:	0010      	movs	r0, r2
 801bf32:	0019      	movs	r1, r3
 801bf34:	2308      	movs	r3, #8
 801bf36:	001a      	movs	r2, r3
 801bf38:	f002 f954 	bl	801e1e4 <memcpy>
	return LORAWAN_RETURN_SUCESS;
 801bf3c:	2300      	movs	r3, #0
}
 801bf3e:	0018      	movs	r0, r3
 801bf40:	46bd      	mov	sp, r7
 801bf42:	b009      	add	sp, #36	; 0x24
 801bf44:	bd90      	pop	{r4, r7, pc}
 801bf46:	46c0      	nop			; (mov r8, r8)
 801bf48:	90000106 	.word	0x90000106

0801bf4c <itsdk_lorawan_getAppEUI>:

/**
 * Get the appEUI as a uint8_t[]
 */
__weak itsdk_lorawan_return_t itsdk_lorawan_getAppEUI(uint8_t * appEui){
 801bf4c:	b590      	push	{r4, r7, lr}
 801bf4e:	b089      	sub	sp, #36	; 0x24
 801bf50:	af00      	add	r7, sp, #0
 801bf52:	6078      	str	r0, [r7, #4]
	LOG_INFO_LORAWANSTK(("itsdk_lorawan_getAppEUI\r\n"));
#if ITSDK_WITH_SECURESTORE == __ENABLE
	uint8_t d[8];
	uint8_t buffer[16];
	if ( itsdk_secstore_readBlock(ITSDK_SS_LORA_OTAA_DEVEUIAPPEUI, buffer) != SS_SUCCESS ) {
 801bf54:	2308      	movs	r3, #8
 801bf56:	18fb      	adds	r3, r7, r3
 801bf58:	0019      	movs	r1, r3
 801bf5a:	2007      	movs	r0, #7
 801bf5c:	f7fd fb68 	bl	8019630 <itsdk_secstore_readBlock>
 801bf60:	1e03      	subs	r3, r0, #0
 801bf62:	d00b      	beq.n	801bf7c <itsdk_lorawan_getAppEUI+0x30>
		#if ITSDK_WITH_ERROR_RPT == __ENABLE
			ITSDK_ERROR_REPORT(ITSDK_ERROR_LORAWAN_SS_INVALID,1);
 801bf64:	4b11      	ldr	r3, [pc, #68]	; (801bfac <itsdk_lorawan_getAppEUI+0x60>)
 801bf66:	2101      	movs	r1, #1
 801bf68:	0018      	movs	r0, r3
 801bf6a:	f7ff fa7b 	bl	801b464 <itsdk_error_report>
		#endif
		bzero(appEui,8);
 801bf6e:	687b      	ldr	r3, [r7, #4]
 801bf70:	2108      	movs	r1, #8
 801bf72:	0018      	movs	r0, r3
 801bf74:	f002 f906 	bl	801e184 <bzero>
		return LORAWAN_RETURN_FAILED;
 801bf78:	2301      	movs	r3, #1
 801bf7a:	e013      	b.n	801bfa4 <itsdk_lorawan_getAppEUI+0x58>
	} else {
		memcpy(d,buffer+8,8);
 801bf7c:	2308      	movs	r3, #8
 801bf7e:	18fb      	adds	r3, r7, r3
 801bf80:	3308      	adds	r3, #8
 801bf82:	2418      	movs	r4, #24
 801bf84:	193a      	adds	r2, r7, r4
 801bf86:	0010      	movs	r0, r2
 801bf88:	0019      	movs	r1, r3
 801bf8a:	2308      	movs	r3, #8
 801bf8c:	001a      	movs	r2, r3
 801bf8e:	f002 f929 	bl	801e1e4 <memcpy>
	}
#else
	uint8_t d[8] = ITSDK_LORAWAN_APPEUI;
#endif
	memcpy(appEui,d,8);
 801bf92:	687a      	ldr	r2, [r7, #4]
 801bf94:	193b      	adds	r3, r7, r4
 801bf96:	0010      	movs	r0, r2
 801bf98:	0019      	movs	r1, r3
 801bf9a:	2308      	movs	r3, #8
 801bf9c:	001a      	movs	r2, r3
 801bf9e:	f002 f921 	bl	801e1e4 <memcpy>
	return LORAWAN_RETURN_SUCESS;
 801bfa2:	2300      	movs	r3, #0
}
 801bfa4:	0018      	movs	r0, r3
 801bfa6:	46bd      	mov	sp, r7
 801bfa8:	b009      	add	sp, #36	; 0x24
 801bfaa:	bd90      	pop	{r4, r7, pc}
 801bfac:	90000106 	.word	0x90000106

0801bfb0 <itsdk_lorawan_getAppKEY>:

/**
 * Get the appKEY as a uint8_t[]
 */
__weak itsdk_lorawan_return_t itsdk_lorawan_getAppKEY(uint8_t * appKey){
 801bfb0:	b580      	push	{r7, lr}
 801bfb2:	b086      	sub	sp, #24
 801bfb4:	af00      	add	r7, sp, #0
 801bfb6:	6078      	str	r0, [r7, #4]
	LOG_INFO_LORAWANSTK(("itsdk_lorawan_getAppKEY\r\n"));
#if ITSDK_WITH_SECURESTORE == __ENABLE
	uint8_t d[16];
	if ( itsdk_secstore_readBlock(ITSDK_SS_LORA_OTAA_APPKEY, d) != SS_SUCCESS ) {
 801bfb8:	2308      	movs	r3, #8
 801bfba:	18fb      	adds	r3, r7, r3
 801bfbc:	0019      	movs	r1, r3
 801bfbe:	2008      	movs	r0, #8
 801bfc0:	f7fd fb36 	bl	8019630 <itsdk_secstore_readBlock>
 801bfc4:	1e03      	subs	r3, r0, #0
 801bfc6:	d00b      	beq.n	801bfe0 <itsdk_lorawan_getAppKEY+0x30>
		#if ITSDK_WITH_ERROR_RPT == __ENABLE
			ITSDK_ERROR_REPORT(ITSDK_ERROR_LORAWAN_SS_INVALID,2);
 801bfc8:	4b0c      	ldr	r3, [pc, #48]	; (801bffc <itsdk_lorawan_getAppKEY+0x4c>)
 801bfca:	2102      	movs	r1, #2
 801bfcc:	0018      	movs	r0, r3
 801bfce:	f7ff fa49 	bl	801b464 <itsdk_error_report>
		#endif
		bzero(appKey,16);
 801bfd2:	687b      	ldr	r3, [r7, #4]
 801bfd4:	2110      	movs	r1, #16
 801bfd6:	0018      	movs	r0, r3
 801bfd8:	f002 f8d4 	bl	801e184 <bzero>
		return LORAWAN_RETURN_FAILED;
 801bfdc:	2301      	movs	r3, #1
 801bfde:	e009      	b.n	801bff4 <itsdk_lorawan_getAppKEY+0x44>
	}
#else
	uint8_t d[16] = ITSDK_LORAWAN_APPKEY;
#endif
	memcpy(appKey,d,16);
 801bfe0:	687a      	ldr	r2, [r7, #4]
 801bfe2:	2308      	movs	r3, #8
 801bfe4:	18fb      	adds	r3, r7, r3
 801bfe6:	0010      	movs	r0, r2
 801bfe8:	0019      	movs	r1, r3
 801bfea:	2310      	movs	r3, #16
 801bfec:	001a      	movs	r2, r3
 801bfee:	f002 f8f9 	bl	801e1e4 <memcpy>
	return LORAWAN_RETURN_SUCESS;
 801bff2:	2300      	movs	r3, #0
}
 801bff4:	0018      	movs	r0, r3
 801bff6:	46bd      	mov	sp, r7
 801bff8:	b006      	add	sp, #24
 801bffa:	bd80      	pop	{r7, pc}
 801bffc:	90000106 	.word	0x90000106

0801c000 <itsdk_lorawan_resetFactoryDefaults>:
 * Configure the SecureStore with the Static values obtained from configLoRaWan.h
 * When force is false, the secure store will be refreshed only if there is no
 * configuration already setup.
 */
#if ITSDK_WITH_SECURESTORE == __ENABLE
itsdk_lorawan_return_t itsdk_lorawan_resetFactoryDefaults(bool force) {
 801c000:	b5b0      	push	{r4, r5, r7, lr}
 801c002:	b090      	sub	sp, #64	; 0x40
 801c004:	af00      	add	r7, sp, #0
 801c006:	0002      	movs	r2, r0
 801c008:	1dfb      	adds	r3, r7, #7
 801c00a:	701a      	strb	r2, [r3, #0]
	uint8_t buffer[16];
	if ( force || itsdk_secstore_readBlock(ITSDK_SS_LORA_OTAA_DEVEUIAPPEUI, buffer) != SS_SUCCESS ) {
 801c00c:	1dfb      	adds	r3, r7, #7
 801c00e:	781b      	ldrb	r3, [r3, #0]
 801c010:	2b00      	cmp	r3, #0
 801c012:	d107      	bne.n	801c024 <itsdk_lorawan_resetFactoryDefaults+0x24>
 801c014:	232c      	movs	r3, #44	; 0x2c
 801c016:	18fb      	adds	r3, r7, r3
 801c018:	0019      	movs	r1, r3
 801c01a:	2007      	movs	r0, #7
 801c01c:	f7fd fb08 	bl	8019630 <itsdk_secstore_readBlock>
 801c020:	1e03      	subs	r3, r0, #0
 801c022:	d038      	beq.n	801c096 <itsdk_lorawan_resetFactoryDefaults+0x96>
		uint8_t de[8] = ITSDK_LORAWAN_DEVEUI;
 801c024:	2324      	movs	r3, #36	; 0x24
 801c026:	18fb      	adds	r3, r7, r3
 801c028:	4a1d      	ldr	r2, [pc, #116]	; (801c0a0 <itsdk_lorawan_resetFactoryDefaults+0xa0>)
 801c02a:	ca03      	ldmia	r2!, {r0, r1}
 801c02c:	c303      	stmia	r3!, {r0, r1}
		uint8_t ap[8] = ITSDK_LORAWAN_APPEUI;
 801c02e:	231c      	movs	r3, #28
 801c030:	18fb      	adds	r3, r7, r3
 801c032:	4a1c      	ldr	r2, [pc, #112]	; (801c0a4 <itsdk_lorawan_resetFactoryDefaults+0xa4>)
 801c034:	ca03      	ldmia	r2!, {r0, r1}
 801c036:	c303      	stmia	r3!, {r0, r1}
		for ( int i = 0 ; i< 8 ; i++) {
 801c038:	2300      	movs	r3, #0
 801c03a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801c03c:	e016      	b.n	801c06c <itsdk_lorawan_resetFactoryDefaults+0x6c>
			buffer[ITSDK_SECSTORE_OTAA_DEV_ID+i] = de[i];
 801c03e:	2324      	movs	r3, #36	; 0x24
 801c040:	18fa      	adds	r2, r7, r3
 801c042:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c044:	18d3      	adds	r3, r2, r3
 801c046:	7819      	ldrb	r1, [r3, #0]
 801c048:	202c      	movs	r0, #44	; 0x2c
 801c04a:	183a      	adds	r2, r7, r0
 801c04c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c04e:	18d3      	adds	r3, r2, r3
 801c050:	1c0a      	adds	r2, r1, #0
 801c052:	701a      	strb	r2, [r3, #0]
			buffer[ITSDK_SECSTORE_OTAA_APP_ID+i] = ap[i];
 801c054:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c056:	3308      	adds	r3, #8
 801c058:	221c      	movs	r2, #28
 801c05a:	18b9      	adds	r1, r7, r2
 801c05c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801c05e:	188a      	adds	r2, r1, r2
 801c060:	7811      	ldrb	r1, [r2, #0]
 801c062:	183a      	adds	r2, r7, r0
 801c064:	54d1      	strb	r1, [r2, r3]
		for ( int i = 0 ; i< 8 ; i++) {
 801c066:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c068:	3301      	adds	r3, #1
 801c06a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801c06c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c06e:	2b07      	cmp	r3, #7
 801c070:	dde5      	ble.n	801c03e <itsdk_lorawan_resetFactoryDefaults+0x3e>
		}
		itsdk_secstore_writeBlock(ITSDK_SS_LORA_OTAA_DEVEUIAPPEUI, buffer);
 801c072:	232c      	movs	r3, #44	; 0x2c
 801c074:	18fb      	adds	r3, r7, r3
 801c076:	0019      	movs	r1, r3
 801c078:	2007      	movs	r0, #7
 801c07a:	f7fd fb26 	bl	80196ca <itsdk_secstore_writeBlock>

		uint8_t appkey[16] = ITSDK_LORAWAN_APPKEY;
 801c07e:	210c      	movs	r1, #12
 801c080:	187b      	adds	r3, r7, r1
 801c082:	4a09      	ldr	r2, [pc, #36]	; (801c0a8 <itsdk_lorawan_resetFactoryDefaults+0xa8>)
 801c084:	ca31      	ldmia	r2!, {r0, r4, r5}
 801c086:	c331      	stmia	r3!, {r0, r4, r5}
 801c088:	6812      	ldr	r2, [r2, #0]
 801c08a:	601a      	str	r2, [r3, #0]
		itsdk_secstore_writeBlock(ITSDK_SS_LORA_OTAA_APPKEY, appkey);
 801c08c:	187b      	adds	r3, r7, r1
 801c08e:	0019      	movs	r1, r3
 801c090:	2008      	movs	r0, #8
 801c092:	f7fd fb1a 	bl	80196ca <itsdk_secstore_writeBlock>
	}
	return LORAWAN_RETURN_SUCESS;
 801c096:	2300      	movs	r3, #0
}
 801c098:	0018      	movs	r0, r3
 801c09a:	46bd      	mov	sp, r7
 801c09c:	b010      	add	sp, #64	; 0x40
 801c09e:	bdb0      	pop	{r4, r5, r7, pc}
 801c0a0:	0802039c 	.word	0x0802039c
 801c0a4:	080203a4 	.word	0x080203a4
 801c0a8:	080203ac 	.word	0x080203ac

0801c0ac <lowPower_enable>:
}

/**
 * Disable LowPower mode
 */
void lowPower_enable() {
 801c0ac:	b580      	push	{r7, lr}
 801c0ae:	af00      	add	r7, sp, #0
	__lowPowerState= LOWPRW_ENABLE;
 801c0b0:	4b02      	ldr	r3, [pc, #8]	; (801c0bc <lowPower_enable+0x10>)
 801c0b2:	2200      	movs	r2, #0
 801c0b4:	701a      	strb	r2, [r3, #0]
}
 801c0b6:	46c0      	nop			; (mov r8, r8)
 801c0b8:	46bd      	mov	sp, r7
 801c0ba:	bd80      	pop	{r7, pc}
 801c0bc:	20001230 	.word	0x20001230

0801c0c0 <lowPower_disable>:

/**
 * Enable LowPower mode
 */
void lowPower_disable() {
 801c0c0:	b580      	push	{r7, lr}
 801c0c2:	af00      	add	r7, sp, #0
	__lowPowerState= LOWPRW_DISABLE;
 801c0c4:	4b02      	ldr	r3, [pc, #8]	; (801c0d0 <lowPower_disable+0x10>)
 801c0c6:	2201      	movs	r2, #1
 801c0c8:	701a      	strb	r2, [r3, #0]
}
 801c0ca:	46c0      	nop			; (mov r8, r8)
 801c0cc:	46bd      	mov	sp, r7
 801c0ce:	bd80      	pop	{r7, pc}
 801c0d0:	20001230 	.word	0x20001230

0801c0d4 <itsdk_setup>:
/**
 * The setup function is called on every MCU Reset but not on wakeup from sleep
 * This function init the SDK library and underlaying hardware.
 * Then it calls the project specific setup function
 */
void itsdk_setup() {
 801c0d4:	b580      	push	{r7, lr}
 801c0d6:	af00      	add	r7, sp, #0

	itsdk_time_init();
 801c0d8:	f000 fb4a 	bl	801c770 <itsdk_time_init>
	#if ITSDK_LOGGER_CONF > 0
	log_init(ITSDK_LOGGER_CONF);
 801c0dc:	20f0      	movs	r0, #240	; 0xf0
 801c0de:	f7ff fb97 	bl	801b810 <log_init>
	  wdg_setupWithMaxMs(ITSDK_WDG_MS);
	#endif
//	serial1_init(); //Fait planter
//	serial2_init();
	#if ITSDK_WITH_CONSOLE == __ENABLE
		itsdk_console_setup();
 801c0e2:	f7fc fae1 	bl	80186a8 <itsdk_console_setup>
	#endif
	#if ITSDK_WITH_ERROR_RPT == __ENABLE
	  itsdk_error_setup();
 801c0e6:	f7ff f98d 	bl	801b404 <itsdk_error_setup>
	  ITSDK_ERROR_REPORT(ITSDK_ERROR_RESET,(uint16_t)itsdk_getResetCause());
 801c0ea:	f001 fadf 	bl	801d6ac <itsdk_getResetCause>
 801c0ee:	0003      	movs	r3, r0
 801c0f0:	b29b      	uxth	r3, r3
 801c0f2:	4a11      	ldr	r2, [pc, #68]	; (801c138 <itsdk_setup+0x64>)
 801c0f4:	0019      	movs	r1, r3
 801c0f6:	0010      	movs	r0, r2
 801c0f8:	f7ff f9b4 	bl	801b464 <itsdk_error_report>
	#endif
	#if ITSDK_WITH_SECURESTORE == __ENABLE
	  // Init the secure store if not yet initialized
	  if ( itsdk_secstore_isInit() != SS_SUCCESS ) {
 801c0fc:	f7fd fbbc 	bl	8019878 <itsdk_secstore_isInit>
 801c100:	1e03      	subs	r3, r0, #0
 801c102:	d008      	beq.n	801c116 <itsdk_setup+0x42>
		  itsdk_secstore_init();
 801c104:	f7fd fb58 	bl	80197b8 <itsdk_secstore_init>
		  itsdk_encrypt_resetFactoryDefaults(BOOL_TRUE);
 801c108:	2001      	movs	r0, #1
 801c10a:	f7fe f888 	bl	801a21e <itsdk_encrypt_resetFactoryDefaults>
		  #if ITSDK_WITH_LORAWAN_LIB == __ENABLE
		    itsdk_lorawan_resetFactoryDefaults(true);
 801c10e:	2001      	movs	r0, #1
 801c110:	f7ff ff76 	bl	801c000 <itsdk_lorawan_resetFactoryDefaults>
 801c114:	e002      	b.n	801c11c <itsdk_setup+0x48>
		  #endif
		  #if ITSDK_WITH_SIGFOX_LIB == __ENABLE
 		    itsdk_sigfox_resetFactoryDefaults(true);
		  #endif
	  } else {
	     itsdk_encrypt_resetFactoryDefaults(BOOL_FALSE);	// on first boot init the ss communication credentials
 801c116:	2000      	movs	r0, #0
 801c118:	f7fe f881 	bl	801a21e <itsdk_encrypt_resetFactoryDefaults>
	  }
	  itsdk_secStore_RegisterConsole();
 801c11c:	f7fd ff7e 	bl	801a01c <itsdk_secStore_RegisterConsole>
	#endif
	// load the configuration according to setting
	itsdk_config_loadConfiguration(CONFIG_NORMAL_LOAD);
 801c120:	2000      	movs	r0, #0
 801c122:	f7fc fcc9 	bl	8018ab8 <itsdk_config_loadConfiguration>
	itsdk_state_init();
 801c126:	f7fd f8dd 	bl	80192e4 <itsdk_state_init>
	// Application setup
	project_setup();
 801c12a:	f7e7 fa11 	bl	8003550 <project_setup>
    #if ITSDK_WITH_ERROR_RPT == __ENABLE
      itsdk_cleanResetCause();
 801c12e:	f001 fafb 	bl	801d728 <itsdk_cleanResetCause>
    #endif

}
 801c132:	46c0      	nop			; (mov r8, r8)
 801c134:	46bd      	mov	sp, r7
 801c136:	bd80      	pop	{r7, pc}
 801c138:	10000001 	.word	0x10000001

0801c13c <itsdk_computeCRC32>:


/**
 * Return CRC32 value for data.
 */
uint32_t itsdk_computeCRC32(const uint8_t *data, uint16_t length) {
 801c13c:	b580      	push	{r7, lr}
 801c13e:	b086      	sub	sp, #24
 801c140:	af00      	add	r7, sp, #0
 801c142:	6078      	str	r0, [r7, #4]
 801c144:	000a      	movs	r2, r1
 801c146:	1cbb      	adds	r3, r7, #2
 801c148:	801a      	strh	r2, [r3, #0]
  uint32_t crc = 0xffffffff;
 801c14a:	2301      	movs	r3, #1
 801c14c:	425b      	negs	r3, r3
 801c14e:	617b      	str	r3, [r7, #20]
  while (length--) {
 801c150:	e039      	b.n	801c1c6 <itsdk_computeCRC32+0x8a>
    uint8_t c = *data++;
 801c152:	687b      	ldr	r3, [r7, #4]
 801c154:	1c5a      	adds	r2, r3, #1
 801c156:	607a      	str	r2, [r7, #4]
 801c158:	220e      	movs	r2, #14
 801c15a:	18ba      	adds	r2, r7, r2
 801c15c:	781b      	ldrb	r3, [r3, #0]
 801c15e:	7013      	strb	r3, [r2, #0]
    for (uint32_t i = 0x80; i > 0; i >>= 1) {
 801c160:	2380      	movs	r3, #128	; 0x80
 801c162:	613b      	str	r3, [r7, #16]
 801c164:	e02c      	b.n	801c1c0 <itsdk_computeCRC32+0x84>
      bool bit = crc & 0x80000000;
 801c166:	697b      	ldr	r3, [r7, #20]
 801c168:	0fdb      	lsrs	r3, r3, #31
 801c16a:	07da      	lsls	r2, r3, #31
 801c16c:	230f      	movs	r3, #15
 801c16e:	18fb      	adds	r3, r7, r3
 801c170:	1e51      	subs	r1, r2, #1
 801c172:	418a      	sbcs	r2, r1
 801c174:	701a      	strb	r2, [r3, #0]
      if (c & i) {
 801c176:	230e      	movs	r3, #14
 801c178:	18fb      	adds	r3, r7, r3
 801c17a:	781b      	ldrb	r3, [r3, #0]
 801c17c:	693a      	ldr	r2, [r7, #16]
 801c17e:	4013      	ands	r3, r2
 801c180:	d00f      	beq.n	801c1a2 <itsdk_computeCRC32+0x66>
        bit = !bit;
 801c182:	210f      	movs	r1, #15
 801c184:	187b      	adds	r3, r7, r1
 801c186:	781b      	ldrb	r3, [r3, #0]
 801c188:	1e5a      	subs	r2, r3, #1
 801c18a:	4193      	sbcs	r3, r2
 801c18c:	b2db      	uxtb	r3, r3
 801c18e:	2201      	movs	r2, #1
 801c190:	4053      	eors	r3, r2
 801c192:	b2db      	uxtb	r3, r3
 801c194:	001a      	movs	r2, r3
 801c196:	187b      	adds	r3, r7, r1
 801c198:	701a      	strb	r2, [r3, #0]
 801c19a:	781a      	ldrb	r2, [r3, #0]
 801c19c:	2101      	movs	r1, #1
 801c19e:	400a      	ands	r2, r1
 801c1a0:	701a      	strb	r2, [r3, #0]
      }
      crc <<= 1;
 801c1a2:	697b      	ldr	r3, [r7, #20]
 801c1a4:	005b      	lsls	r3, r3, #1
 801c1a6:	617b      	str	r3, [r7, #20]
      if (bit) {
 801c1a8:	230f      	movs	r3, #15
 801c1aa:	18fb      	adds	r3, r7, r3
 801c1ac:	781b      	ldrb	r3, [r3, #0]
 801c1ae:	2b00      	cmp	r3, #0
 801c1b0:	d003      	beq.n	801c1ba <itsdk_computeCRC32+0x7e>
        crc ^= 0x04c11db7;
 801c1b2:	697b      	ldr	r3, [r7, #20]
 801c1b4:	4a0a      	ldr	r2, [pc, #40]	; (801c1e0 <itsdk_computeCRC32+0xa4>)
 801c1b6:	4053      	eors	r3, r2
 801c1b8:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0x80; i > 0; i >>= 1) {
 801c1ba:	693b      	ldr	r3, [r7, #16]
 801c1bc:	085b      	lsrs	r3, r3, #1
 801c1be:	613b      	str	r3, [r7, #16]
 801c1c0:	693b      	ldr	r3, [r7, #16]
 801c1c2:	2b00      	cmp	r3, #0
 801c1c4:	d1cf      	bne.n	801c166 <itsdk_computeCRC32+0x2a>
  while (length--) {
 801c1c6:	1cbb      	adds	r3, r7, #2
 801c1c8:	881b      	ldrh	r3, [r3, #0]
 801c1ca:	1cba      	adds	r2, r7, #2
 801c1cc:	1e59      	subs	r1, r3, #1
 801c1ce:	8011      	strh	r1, [r2, #0]
 801c1d0:	2b00      	cmp	r3, #0
 801c1d2:	d1be      	bne.n	801c152 <itsdk_computeCRC32+0x16>
      }
    }
  }
  return crc;
 801c1d4:	697b      	ldr	r3, [r7, #20]
}
 801c1d6:	0018      	movs	r0, r3
 801c1d8:	46bd      	mov	sp, r7
 801c1da:	b006      	add	sp, #24
 801c1dc:	bd80      	pop	{r7, pc}
 801c1de:	46c0      	nop			; (mov r8, r8)
 801c1e0:	04c11db7 	.word	0x04c11db7

0801c1e4 <itdt_convertNumChar2Int>:
}

/* -----------------------------------------------------------
 * Convert 0-9 char to 0-9 value
 */
uint8_t itdt_convertNumChar2Int(char c) {
 801c1e4:	b580      	push	{r7, lr}
 801c1e6:	b082      	sub	sp, #8
 801c1e8:	af00      	add	r7, sp, #0
 801c1ea:	0002      	movs	r2, r0
 801c1ec:	1dfb      	adds	r3, r7, #7
 801c1ee:	701a      	strb	r2, [r3, #0]
	  if ( c >= '0' && c <= '9' ) return c-'0';
 801c1f0:	1dfb      	adds	r3, r7, #7
 801c1f2:	781b      	ldrb	r3, [r3, #0]
 801c1f4:	2b2f      	cmp	r3, #47	; 0x2f
 801c1f6:	d908      	bls.n	801c20a <itdt_convertNumChar2Int+0x26>
 801c1f8:	1dfb      	adds	r3, r7, #7
 801c1fa:	781b      	ldrb	r3, [r3, #0]
 801c1fc:	2b39      	cmp	r3, #57	; 0x39
 801c1fe:	d804      	bhi.n	801c20a <itdt_convertNumChar2Int+0x26>
 801c200:	1dfb      	adds	r3, r7, #7
 801c202:	781b      	ldrb	r3, [r3, #0]
 801c204:	3b30      	subs	r3, #48	; 0x30
 801c206:	b2db      	uxtb	r3, r3
 801c208:	e000      	b.n	801c20c <itdt_convertNumChar2Int+0x28>
	  return 0xFF;
 801c20a:	23ff      	movs	r3, #255	; 0xff
}
 801c20c:	0018      	movs	r0, r3
 801c20e:	46bd      	mov	sp, r7
 801c210:	b002      	add	sp, #8
 801c212:	bd80      	pop	{r7, pc}

0801c214 <itdt_convertHexChar2HalfInt>:

/* -----------------------------------------------------------
 * Convert a 0-F char to a 0-16 value
 */
uint8_t itdt_convertHexChar2HalfInt(char c) {
 801c214:	b580      	push	{r7, lr}
 801c216:	b082      	sub	sp, #8
 801c218:	af00      	add	r7, sp, #0
 801c21a:	0002      	movs	r2, r0
 801c21c:	1dfb      	adds	r3, r7, #7
 801c21e:	701a      	strb	r2, [r3, #0]
  if ( c >= '0' && c <= '9' ) return c-'0';
 801c220:	1dfb      	adds	r3, r7, #7
 801c222:	781b      	ldrb	r3, [r3, #0]
 801c224:	2b2f      	cmp	r3, #47	; 0x2f
 801c226:	d908      	bls.n	801c23a <itdt_convertHexChar2HalfInt+0x26>
 801c228:	1dfb      	adds	r3, r7, #7
 801c22a:	781b      	ldrb	r3, [r3, #0]
 801c22c:	2b39      	cmp	r3, #57	; 0x39
 801c22e:	d804      	bhi.n	801c23a <itdt_convertHexChar2HalfInt+0x26>
 801c230:	1dfb      	adds	r3, r7, #7
 801c232:	781b      	ldrb	r3, [r3, #0]
 801c234:	3b30      	subs	r3, #48	; 0x30
 801c236:	b2db      	uxtb	r3, r3
 801c238:	e01a      	b.n	801c270 <itdt_convertHexChar2HalfInt+0x5c>
  if ( c >= 'a' && c <= 'f' ) return 10+c-'a';
 801c23a:	1dfb      	adds	r3, r7, #7
 801c23c:	781b      	ldrb	r3, [r3, #0]
 801c23e:	2b60      	cmp	r3, #96	; 0x60
 801c240:	d908      	bls.n	801c254 <itdt_convertHexChar2HalfInt+0x40>
 801c242:	1dfb      	adds	r3, r7, #7
 801c244:	781b      	ldrb	r3, [r3, #0]
 801c246:	2b66      	cmp	r3, #102	; 0x66
 801c248:	d804      	bhi.n	801c254 <itdt_convertHexChar2HalfInt+0x40>
 801c24a:	1dfb      	adds	r3, r7, #7
 801c24c:	781b      	ldrb	r3, [r3, #0]
 801c24e:	3b57      	subs	r3, #87	; 0x57
 801c250:	b2db      	uxtb	r3, r3
 801c252:	e00d      	b.n	801c270 <itdt_convertHexChar2HalfInt+0x5c>
  if ( c >= 'A' && c <= 'F' ) return 10+c-'A';
 801c254:	1dfb      	adds	r3, r7, #7
 801c256:	781b      	ldrb	r3, [r3, #0]
 801c258:	2b40      	cmp	r3, #64	; 0x40
 801c25a:	d908      	bls.n	801c26e <itdt_convertHexChar2HalfInt+0x5a>
 801c25c:	1dfb      	adds	r3, r7, #7
 801c25e:	781b      	ldrb	r3, [r3, #0]
 801c260:	2b46      	cmp	r3, #70	; 0x46
 801c262:	d804      	bhi.n	801c26e <itdt_convertHexChar2HalfInt+0x5a>
 801c264:	1dfb      	adds	r3, r7, #7
 801c266:	781b      	ldrb	r3, [r3, #0]
 801c268:	3b37      	subs	r3, #55	; 0x37
 801c26a:	b2db      	uxtb	r3, r3
 801c26c:	e000      	b.n	801c270 <itdt_convertHexChar2HalfInt+0x5c>
  return 0;
 801c26e:	2300      	movs	r3, #0
}
 801c270:	0018      	movs	r0, r3
 801c272:	46bd      	mov	sp, r7
 801c274:	b002      	add	sp, #8
 801c276:	bd80      	pop	{r7, pc}

0801c278 <itdt_convertHexChar2Int>:
}

/* -----------------------------------------------------------
 * Convert a "0"-"FF" value to 0-255 uint8_t value
 */
uint8_t itdt_convertHexChar2Int(char * v) {
 801c278:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c27a:	b085      	sub	sp, #20
 801c27c:	af00      	add	r7, sp, #0
 801c27e:	6078      	str	r0, [r7, #4]
  uint8_t q0 = itdt_convertHexChar2HalfInt(v[0]);
 801c280:	687b      	ldr	r3, [r7, #4]
 801c282:	781b      	ldrb	r3, [r3, #0]
 801c284:	250f      	movs	r5, #15
 801c286:	197c      	adds	r4, r7, r5
 801c288:	0018      	movs	r0, r3
 801c28a:	f7ff ffc3 	bl	801c214 <itdt_convertHexChar2HalfInt>
 801c28e:	0003      	movs	r3, r0
 801c290:	7023      	strb	r3, [r4, #0]
  uint8_t q1 = itdt_convertHexChar2HalfInt(v[1]);
 801c292:	687b      	ldr	r3, [r7, #4]
 801c294:	3301      	adds	r3, #1
 801c296:	781b      	ldrb	r3, [r3, #0]
 801c298:	260e      	movs	r6, #14
 801c29a:	19bc      	adds	r4, r7, r6
 801c29c:	0018      	movs	r0, r3
 801c29e:	f7ff ffb9 	bl	801c214 <itdt_convertHexChar2HalfInt>
 801c2a2:	0003      	movs	r3, r0
 801c2a4:	7023      	strb	r3, [r4, #0]
  return (q0*16)+q1;
 801c2a6:	197b      	adds	r3, r7, r5
 801c2a8:	781b      	ldrb	r3, [r3, #0]
 801c2aa:	011b      	lsls	r3, r3, #4
 801c2ac:	b2da      	uxtb	r2, r3
 801c2ae:	19bb      	adds	r3, r7, r6
 801c2b0:	781b      	ldrb	r3, [r3, #0]
 801c2b2:	18d3      	adds	r3, r2, r3
 801c2b4:	b2db      	uxtb	r3, r3
}
 801c2b6:	0018      	movs	r0, r3
 801c2b8:	46bd      	mov	sp, r7
 801c2ba:	b005      	add	sp, #20
 801c2bc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801c2be <itdt_convertHexChar4Int>:
}

/* -----------------------------------------------------------
 *  Convert a 16bit hex string value into uint16_t value
 */
uint16_t itdt_convertHexChar4Int(char * v) {
 801c2be:	b590      	push	{r4, r7, lr}
 801c2c0:	b085      	sub	sp, #20
 801c2c2:	af00      	add	r7, sp, #0
 801c2c4:	6078      	str	r0, [r7, #4]
  uint16_t ret = itdt_convertHexChar2Int(&v[0]);
 801c2c6:	687b      	ldr	r3, [r7, #4]
 801c2c8:	0018      	movs	r0, r3
 801c2ca:	f7ff ffd5 	bl	801c278 <itdt_convertHexChar2Int>
 801c2ce:	0003      	movs	r3, r0
 801c2d0:	001a      	movs	r2, r3
 801c2d2:	240e      	movs	r4, #14
 801c2d4:	193b      	adds	r3, r7, r4
 801c2d6:	801a      	strh	r2, [r3, #0]
  ret <<= 8;
 801c2d8:	193b      	adds	r3, r7, r4
 801c2da:	193a      	adds	r2, r7, r4
 801c2dc:	8812      	ldrh	r2, [r2, #0]
 801c2de:	0212      	lsls	r2, r2, #8
 801c2e0:	801a      	strh	r2, [r3, #0]
  ret += itdt_convertHexChar2Int(&v[2]);
 801c2e2:	687b      	ldr	r3, [r7, #4]
 801c2e4:	3302      	adds	r3, #2
 801c2e6:	0018      	movs	r0, r3
 801c2e8:	f7ff ffc6 	bl	801c278 <itdt_convertHexChar2Int>
 801c2ec:	0003      	movs	r3, r0
 801c2ee:	b299      	uxth	r1, r3
 801c2f0:	193b      	adds	r3, r7, r4
 801c2f2:	193a      	adds	r2, r7, r4
 801c2f4:	8812      	ldrh	r2, [r2, #0]
 801c2f6:	188a      	adds	r2, r1, r2
 801c2f8:	801a      	strh	r2, [r3, #0]
  return ret;
 801c2fa:	193b      	adds	r3, r7, r4
 801c2fc:	881b      	ldrh	r3, [r3, #0]
}
 801c2fe:	0018      	movs	r0, r3
 801c300:	46bd      	mov	sp, r7
 801c302:	b005      	add	sp, #20
 801c304:	bd90      	pop	{r4, r7, pc}
	...

0801c308 <itdt_convertDecCharNInt>:

/**
 * Convert a signed decimal number from a string to
 * an Int32 value.
 */
int32_t itdt_convertDecCharNInt(char * v, int sz) {
 801c308:	b5b0      	push	{r4, r5, r7, lr}
 801c30a:	b086      	sub	sp, #24
 801c30c:	af00      	add	r7, sp, #0
 801c30e:	6078      	str	r0, [r7, #4]
 801c310:	6039      	str	r1, [r7, #0]
	int sign = 1;
 801c312:	2301      	movs	r3, #1
 801c314:	617b      	str	r3, [r7, #20]
	if ( *v == '-' ) {
 801c316:	687b      	ldr	r3, [r7, #4]
 801c318:	781b      	ldrb	r3, [r3, #0]
 801c31a:	2b2d      	cmp	r3, #45	; 0x2d
 801c31c:	d108      	bne.n	801c330 <itdt_convertDecCharNInt+0x28>
	   sign = -1;
 801c31e:	2301      	movs	r3, #1
 801c320:	425b      	negs	r3, r3
 801c322:	617b      	str	r3, [r7, #20]
	   v++;
 801c324:	687b      	ldr	r3, [r7, #4]
 801c326:	3301      	adds	r3, #1
 801c328:	607b      	str	r3, [r7, #4]
	   sz--;
 801c32a:	683b      	ldr	r3, [r7, #0]
 801c32c:	3b01      	subs	r3, #1
 801c32e:	603b      	str	r3, [r7, #0]
	}
	uint16_t ret = 0;
 801c330:	2312      	movs	r3, #18
 801c332:	18fb      	adds	r3, r7, r3
 801c334:	2200      	movs	r2, #0
 801c336:	801a      	strh	r2, [r3, #0]
	for ( int i = 0 ; i < sz ; i++ ) {
 801c338:	2300      	movs	r3, #0
 801c33a:	60fb      	str	r3, [r7, #12]
 801c33c:	e027      	b.n	801c38e <itdt_convertDecCharNInt+0x86>
	  ret *= 10;
 801c33e:	2312      	movs	r3, #18
 801c340:	18fa      	adds	r2, r7, r3
 801c342:	18fb      	adds	r3, r7, r3
 801c344:	881b      	ldrh	r3, [r3, #0]
 801c346:	1c19      	adds	r1, r3, #0
 801c348:	0089      	lsls	r1, r1, #2
 801c34a:	18cb      	adds	r3, r1, r3
 801c34c:	18db      	adds	r3, r3, r3
 801c34e:	8013      	strh	r3, [r2, #0]
	  uint8_t c = itdt_convertNumChar2Int(*v);
 801c350:	687b      	ldr	r3, [r7, #4]
 801c352:	781b      	ldrb	r3, [r3, #0]
 801c354:	250b      	movs	r5, #11
 801c356:	197c      	adds	r4, r7, r5
 801c358:	0018      	movs	r0, r3
 801c35a:	f7ff ff43 	bl	801c1e4 <itdt_convertNumChar2Int>
 801c35e:	0003      	movs	r3, r0
 801c360:	7023      	strb	r3, [r4, #0]
	  if ( c == 0xFF ) return ITSDK_INVALID_VALUE_32B;
 801c362:	197b      	adds	r3, r7, r5
 801c364:	781b      	ldrb	r3, [r3, #0]
 801c366:	2bff      	cmp	r3, #255	; 0xff
 801c368:	d101      	bne.n	801c36e <itdt_convertDecCharNInt+0x66>
 801c36a:	4b12      	ldr	r3, [pc, #72]	; (801c3b4 <itdt_convertDecCharNInt+0xac>)
 801c36c:	e01d      	b.n	801c3aa <itdt_convertDecCharNInt+0xa2>
	  v++;
 801c36e:	687b      	ldr	r3, [r7, #4]
 801c370:	3301      	adds	r3, #1
 801c372:	607b      	str	r3, [r7, #4]
	  ret+= c;
 801c374:	230b      	movs	r3, #11
 801c376:	18fb      	adds	r3, r7, r3
 801c378:	781b      	ldrb	r3, [r3, #0]
 801c37a:	b299      	uxth	r1, r3
 801c37c:	2212      	movs	r2, #18
 801c37e:	18bb      	adds	r3, r7, r2
 801c380:	18ba      	adds	r2, r7, r2
 801c382:	8812      	ldrh	r2, [r2, #0]
 801c384:	188a      	adds	r2, r1, r2
 801c386:	801a      	strh	r2, [r3, #0]
	for ( int i = 0 ; i < sz ; i++ ) {
 801c388:	68fb      	ldr	r3, [r7, #12]
 801c38a:	3301      	adds	r3, #1
 801c38c:	60fb      	str	r3, [r7, #12]
 801c38e:	68fa      	ldr	r2, [r7, #12]
 801c390:	683b      	ldr	r3, [r7, #0]
 801c392:	429a      	cmp	r2, r3
 801c394:	dbd3      	blt.n	801c33e <itdt_convertDecCharNInt+0x36>
	 }
	 ret *= sign;
 801c396:	697b      	ldr	r3, [r7, #20]
 801c398:	b29a      	uxth	r2, r3
 801c39a:	2012      	movs	r0, #18
 801c39c:	183b      	adds	r3, r7, r0
 801c39e:	1839      	adds	r1, r7, r0
 801c3a0:	8809      	ldrh	r1, [r1, #0]
 801c3a2:	434a      	muls	r2, r1
 801c3a4:	801a      	strh	r2, [r3, #0]
	 return ret;
 801c3a6:	183b      	adds	r3, r7, r0
 801c3a8:	881b      	ldrh	r3, [r3, #0]
}
 801c3aa:	0018      	movs	r0, r3
 801c3ac:	46bd      	mov	sp, r7
 801c3ae:	b006      	add	sp, #24
 801c3b0:	bdb0      	pop	{r4, r5, r7, pc}
 801c3b2:	46c0      	nop			; (mov r8, r8)
 801c3b4:	0fffffff 	.word	0x0fffffff

0801c3b8 <itdt_isHexChar>:
}

/* ----------------------------------------------------------
 * Verify a char is an Hex Char
 */
bool itdt_isHexChar(char c, bool upper) {
 801c3b8:	b580      	push	{r7, lr}
 801c3ba:	b082      	sub	sp, #8
 801c3bc:	af00      	add	r7, sp, #0
 801c3be:	0002      	movs	r2, r0
 801c3c0:	1dfb      	adds	r3, r7, #7
 801c3c2:	701a      	strb	r2, [r3, #0]
 801c3c4:	1dbb      	adds	r3, r7, #6
 801c3c6:	1c0a      	adds	r2, r1, #0
 801c3c8:	701a      	strb	r2, [r3, #0]
  if (    (c >= '0' && c <= '9' )
 801c3ca:	1dfb      	adds	r3, r7, #7
 801c3cc:	781b      	ldrb	r3, [r3, #0]
 801c3ce:	2b2f      	cmp	r3, #47	; 0x2f
 801c3d0:	d903      	bls.n	801c3da <itdt_isHexChar+0x22>
 801c3d2:	1dfb      	adds	r3, r7, #7
 801c3d4:	781b      	ldrb	r3, [r3, #0]
 801c3d6:	2b39      	cmp	r3, #57	; 0x39
 801c3d8:	d916      	bls.n	801c408 <itdt_isHexChar+0x50>
       || (c >= 'A' && c <= 'F' )
 801c3da:	1dfb      	adds	r3, r7, #7
 801c3dc:	781b      	ldrb	r3, [r3, #0]
 801c3de:	2b40      	cmp	r3, #64	; 0x40
 801c3e0:	d903      	bls.n	801c3ea <itdt_isHexChar+0x32>
 801c3e2:	1dfb      	adds	r3, r7, #7
 801c3e4:	781b      	ldrb	r3, [r3, #0]
 801c3e6:	2b46      	cmp	r3, #70	; 0x46
 801c3e8:	d90e      	bls.n	801c408 <itdt_isHexChar+0x50>
     || (!upper   && c >= 'a' && c <= 'f')
 801c3ea:	1dbb      	adds	r3, r7, #6
 801c3ec:	781b      	ldrb	r3, [r3, #0]
 801c3ee:	2201      	movs	r2, #1
 801c3f0:	4053      	eors	r3, r2
 801c3f2:	b2db      	uxtb	r3, r3
 801c3f4:	2b00      	cmp	r3, #0
 801c3f6:	d009      	beq.n	801c40c <itdt_isHexChar+0x54>
 801c3f8:	1dfb      	adds	r3, r7, #7
 801c3fa:	781b      	ldrb	r3, [r3, #0]
 801c3fc:	2b60      	cmp	r3, #96	; 0x60
 801c3fe:	d905      	bls.n	801c40c <itdt_isHexChar+0x54>
 801c400:	1dfb      	adds	r3, r7, #7
 801c402:	781b      	ldrb	r3, [r3, #0]
 801c404:	2b66      	cmp	r3, #102	; 0x66
 801c406:	d801      	bhi.n	801c40c <itdt_isHexChar+0x54>
    ) {
    return true;
 801c408:	2301      	movs	r3, #1
 801c40a:	e000      	b.n	801c40e <itdt_isHexChar+0x56>
  }
  return false;
 801c40c:	2300      	movs	r3, #0
}
 801c40e:	0018      	movs	r0, r3
 801c410:	46bd      	mov	sp, r7
 801c412:	b002      	add	sp, #8
 801c414:	bd80      	pop	{r7, pc}

0801c416 <itdt_isHexString>:

/* ----------------------------------------------------------
 * Verify a string is a valid Hex string with given size
 */
bool itdt_isHexString(char * str,int n,itsdk_bool_e upper) {
 801c416:	b580      	push	{r7, lr}
 801c418:	b086      	sub	sp, #24
 801c41a:	af00      	add	r7, sp, #0
 801c41c:	60f8      	str	r0, [r7, #12]
 801c41e:	60b9      	str	r1, [r7, #8]
 801c420:	1dfb      	adds	r3, r7, #7
 801c422:	701a      	strb	r2, [r3, #0]
  int i = 0;
 801c424:	2300      	movs	r3, #0
 801c426:	617b      	str	r3, [r7, #20]
  while ( i < n && str[i] != 0 ) {
 801c428:	e02d      	b.n	801c486 <itdt_isHexString+0x70>
    if (    (str[i] >= '0' && str[i] <= '9' )
 801c42a:	697b      	ldr	r3, [r7, #20]
 801c42c:	68fa      	ldr	r2, [r7, #12]
 801c42e:	18d3      	adds	r3, r2, r3
 801c430:	781b      	ldrb	r3, [r3, #0]
 801c432:	2b2f      	cmp	r3, #47	; 0x2f
 801c434:	d905      	bls.n	801c442 <itdt_isHexString+0x2c>
 801c436:	697b      	ldr	r3, [r7, #20]
 801c438:	68fa      	ldr	r2, [r7, #12]
 801c43a:	18d3      	adds	r3, r2, r3
 801c43c:	781b      	ldrb	r3, [r3, #0]
 801c43e:	2b39      	cmp	r3, #57	; 0x39
 801c440:	d91b      	bls.n	801c47a <itdt_isHexString+0x64>
       || (str[i] >= 'A' && str[i] <= 'F' )
 801c442:	697b      	ldr	r3, [r7, #20]
 801c444:	68fa      	ldr	r2, [r7, #12]
 801c446:	18d3      	adds	r3, r2, r3
 801c448:	781b      	ldrb	r3, [r3, #0]
 801c44a:	2b40      	cmp	r3, #64	; 0x40
 801c44c:	d905      	bls.n	801c45a <itdt_isHexString+0x44>
 801c44e:	697b      	ldr	r3, [r7, #20]
 801c450:	68fa      	ldr	r2, [r7, #12]
 801c452:	18d3      	adds	r3, r2, r3
 801c454:	781b      	ldrb	r3, [r3, #0]
 801c456:	2b46      	cmp	r3, #70	; 0x46
 801c458:	d90f      	bls.n	801c47a <itdt_isHexString+0x64>
       || (!upper && str[i] >= 'a' && str[i] <= 'f')
 801c45a:	1dfb      	adds	r3, r7, #7
 801c45c:	781b      	ldrb	r3, [r3, #0]
 801c45e:	2b00      	cmp	r3, #0
 801c460:	d10f      	bne.n	801c482 <itdt_isHexString+0x6c>
 801c462:	697b      	ldr	r3, [r7, #20]
 801c464:	68fa      	ldr	r2, [r7, #12]
 801c466:	18d3      	adds	r3, r2, r3
 801c468:	781b      	ldrb	r3, [r3, #0]
 801c46a:	2b60      	cmp	r3, #96	; 0x60
 801c46c:	d909      	bls.n	801c482 <itdt_isHexString+0x6c>
 801c46e:	697b      	ldr	r3, [r7, #20]
 801c470:	68fa      	ldr	r2, [r7, #12]
 801c472:	18d3      	adds	r3, r2, r3
 801c474:	781b      	ldrb	r3, [r3, #0]
 801c476:	2b66      	cmp	r3, #102	; 0x66
 801c478:	d803      	bhi.n	801c482 <itdt_isHexString+0x6c>
       ) {
      i++;
 801c47a:	697b      	ldr	r3, [r7, #20]
 801c47c:	3301      	adds	r3, #1
 801c47e:	617b      	str	r3, [r7, #20]
 801c480:	e001      	b.n	801c486 <itdt_isHexString+0x70>
    } else {
      return false;
 801c482:	2300      	movs	r3, #0
 801c484:	e00f      	b.n	801c4a6 <itdt_isHexString+0x90>
  while ( i < n && str[i] != 0 ) {
 801c486:	697a      	ldr	r2, [r7, #20]
 801c488:	68bb      	ldr	r3, [r7, #8]
 801c48a:	429a      	cmp	r2, r3
 801c48c:	da05      	bge.n	801c49a <itdt_isHexString+0x84>
 801c48e:	697b      	ldr	r3, [r7, #20]
 801c490:	68fa      	ldr	r2, [r7, #12]
 801c492:	18d3      	adds	r3, r2, r3
 801c494:	781b      	ldrb	r3, [r3, #0]
 801c496:	2b00      	cmp	r3, #0
 801c498:	d1c7      	bne.n	801c42a <itdt_isHexString+0x14>
    }
  }
  return ( i == n )?true:false;
 801c49a:	697a      	ldr	r2, [r7, #20]
 801c49c:	68bb      	ldr	r3, [r7, #8]
 801c49e:	1ad3      	subs	r3, r2, r3
 801c4a0:	425a      	negs	r2, r3
 801c4a2:	4153      	adcs	r3, r2
 801c4a4:	b2db      	uxtb	r3, r3
}
 801c4a6:	0018      	movs	r0, r3
 801c4a8:	46bd      	mov	sp, r7
 801c4aa:	b006      	add	sp, #24
 801c4ac:	bd80      	pop	{r7, pc}

0801c4ae <itdt_count_bits_1>:


/* ---------------------------------------------------
 * Count the number of bit at 1 in a given word
 */
uint8_t itdt_count_bits_1(uint32_t v) {
 801c4ae:	b580      	push	{r7, lr}
 801c4b0:	b084      	sub	sp, #16
 801c4b2:	af00      	add	r7, sp, #0
 801c4b4:	6078      	str	r0, [r7, #4]
	uint8_t ret = 0;
 801c4b6:	230f      	movs	r3, #15
 801c4b8:	18fb      	adds	r3, r7, r3
 801c4ba:	2200      	movs	r2, #0
 801c4bc:	701a      	strb	r2, [r3, #0]
	while ( v > 0 ) {
 801c4be:	e00c      	b.n	801c4da <itdt_count_bits_1+0x2c>
		if ( v & 1 ) ret++;
 801c4c0:	687b      	ldr	r3, [r7, #4]
 801c4c2:	2201      	movs	r2, #1
 801c4c4:	4013      	ands	r3, r2
 801c4c6:	d005      	beq.n	801c4d4 <itdt_count_bits_1+0x26>
 801c4c8:	210f      	movs	r1, #15
 801c4ca:	187b      	adds	r3, r7, r1
 801c4cc:	781a      	ldrb	r2, [r3, #0]
 801c4ce:	187b      	adds	r3, r7, r1
 801c4d0:	3201      	adds	r2, #1
 801c4d2:	701a      	strb	r2, [r3, #0]
		v >>= 1;
 801c4d4:	687b      	ldr	r3, [r7, #4]
 801c4d6:	085b      	lsrs	r3, r3, #1
 801c4d8:	607b      	str	r3, [r7, #4]
	while ( v > 0 ) {
 801c4da:	687b      	ldr	r3, [r7, #4]
 801c4dc:	2b00      	cmp	r3, #0
 801c4de:	d1ef      	bne.n	801c4c0 <itdt_count_bits_1+0x12>
	}
	return ret;
 801c4e0:	230f      	movs	r3, #15
 801c4e2:	18fb      	adds	r3, r7, r3
 801c4e4:	781b      	ldrb	r3, [r3, #0]
}
 801c4e6:	0018      	movs	r0, r3
 801c4e8:	46bd      	mov	sp, r7
 801c4ea:	b004      	add	sp, #16
 801c4ec:	bd80      	pop	{r7, pc}
	...

0801c4f0 <itdt_sched_registerSched>:
/**
 * Register a new task in the scheduler with the given period in Ms and the
 * associated function to call. The mode params defines the scheduler behavior
 * Returns the scedId on success or ITSDK_SCHED_ERROR on error.
 */
uint8_t itdt_sched_registerSched(uint32_t periodMs,uint16_t mode, void (*f)(void)) {
 801c4f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c4f2:	b085      	sub	sp, #20
 801c4f4:	af00      	add	r7, sp, #0
 801c4f6:	60f8      	str	r0, [r7, #12]
 801c4f8:	607a      	str	r2, [r7, #4]
 801c4fa:	230a      	movs	r3, #10
 801c4fc:	18fb      	adds	r3, r7, r3
 801c4fe:	1c0a      	adds	r2, r1, #0
 801c500:	801a      	strh	r2, [r3, #0]

	if ( periodMs > ITSDK_SCHED_MAX_PERIOD ) {
 801c502:	68fb      	ldr	r3, [r7, #12]
 801c504:	4a43      	ldr	r2, [pc, #268]	; (801c614 <itdt_sched_registerSched+0x124>)
 801c506:	4293      	cmp	r3, r2
 801c508:	d906      	bls.n	801c518 <itdt_sched_registerSched+0x28>
		ITSDK_ERROR_REPORT(ITSDK_ERROR_SCHED_DURATION_OVERFLOW,0);
 801c50a:	4b43      	ldr	r3, [pc, #268]	; (801c618 <itdt_sched_registerSched+0x128>)
 801c50c:	2100      	movs	r1, #0
 801c50e:	0018      	movs	r0, r3
 801c510:	f7fe ffa8 	bl	801b464 <itsdk_error_report>
		return ITSDK_SCHED_ERROR;
 801c514:	23ff      	movs	r3, #255	; 0xff
 801c516:	e079      	b.n	801c60c <itdt_sched_registerSched+0x11c>
	}
	if ( __sNum < ITSDK_SHEDULER_TASKS ) {
 801c518:	4b40      	ldr	r3, [pc, #256]	; (801c61c <itdt_sched_registerSched+0x12c>)
 801c51a:	781b      	ldrb	r3, [r3, #0]
 801c51c:	2b00      	cmp	r3, #0
 801c51e:	d174      	bne.n	801c60a <itdt_sched_registerSched+0x11a>
		__scheds[__sNum].func=f;
 801c520:	4b3e      	ldr	r3, [pc, #248]	; (801c61c <itdt_sched_registerSched+0x12c>)
 801c522:	781b      	ldrb	r3, [r3, #0]
 801c524:	4a3e      	ldr	r2, [pc, #248]	; (801c620 <itdt_sched_registerSched+0x130>)
 801c526:	011b      	lsls	r3, r3, #4
 801c528:	18d3      	adds	r3, r2, r3
 801c52a:	330c      	adds	r3, #12
 801c52c:	687a      	ldr	r2, [r7, #4]
 801c52e:	601a      	str	r2, [r3, #0]
		__scheds[__sNum].period=periodMs;
 801c530:	4b3a      	ldr	r3, [pc, #232]	; (801c61c <itdt_sched_registerSched+0x12c>)
 801c532:	781b      	ldrb	r3, [r3, #0]
 801c534:	001e      	movs	r6, r3
 801c536:	68fb      	ldr	r3, [r7, #12]
 801c538:	021b      	lsls	r3, r3, #8
 801c53a:	0a1a      	lsrs	r2, r3, #8
 801c53c:	4938      	ldr	r1, [pc, #224]	; (801c620 <itdt_sched_registerSched+0x130>)
 801c53e:	2008      	movs	r0, #8
 801c540:	0133      	lsls	r3, r6, #4
 801c542:	18cb      	adds	r3, r1, r3
 801c544:	181b      	adds	r3, r3, r0
 801c546:	0212      	lsls	r2, r2, #8
 801c548:	0a12      	lsrs	r2, r2, #8
 801c54a:	6819      	ldr	r1, [r3, #0]
 801c54c:	0e09      	lsrs	r1, r1, #24
 801c54e:	0609      	lsls	r1, r1, #24
 801c550:	430a      	orrs	r2, r1
 801c552:	601a      	str	r2, [r3, #0]
		__scheds[__sNum].nextRun=(mode & ITSDK_SCHED_CONF_IMMEDIATE)?itsdk_time_get_ms():itsdk_time_get_ms()+periodMs;
 801c554:	230a      	movs	r3, #10
 801c556:	18fb      	adds	r3, r7, r3
 801c558:	881a      	ldrh	r2, [r3, #0]
 801c55a:	2380      	movs	r3, #128	; 0x80
 801c55c:	005b      	lsls	r3, r3, #1
 801c55e:	4013      	ands	r3, r2
 801c560:	d004      	beq.n	801c56c <itdt_sched_registerSched+0x7c>
 801c562:	f000 f8e7 	bl	801c734 <itsdk_time_get_ms>
 801c566:	0003      	movs	r3, r0
 801c568:	000c      	movs	r4, r1
 801c56a:	e00b      	b.n	801c584 <itdt_sched_registerSched+0x94>
 801c56c:	f000 f8e2 	bl	801c734 <itsdk_time_get_ms>
 801c570:	0002      	movs	r2, r0
 801c572:	000b      	movs	r3, r1
 801c574:	68f9      	ldr	r1, [r7, #12]
 801c576:	000c      	movs	r4, r1
 801c578:	2100      	movs	r1, #0
 801c57a:	000d      	movs	r5, r1
 801c57c:	1912      	adds	r2, r2, r4
 801c57e:	416b      	adcs	r3, r5
 801c580:	001c      	movs	r4, r3
 801c582:	0013      	movs	r3, r2
 801c584:	4a25      	ldr	r2, [pc, #148]	; (801c61c <itdt_sched_registerSched+0x12c>)
 801c586:	7812      	ldrb	r2, [r2, #0]
 801c588:	4925      	ldr	r1, [pc, #148]	; (801c620 <itdt_sched_registerSched+0x130>)
 801c58a:	0112      	lsls	r2, r2, #4
 801c58c:	188a      	adds	r2, r1, r2
 801c58e:	6013      	str	r3, [r2, #0]
 801c590:	6054      	str	r4, [r2, #4]
		__scheds[__sNum].halt=(mode & ITSDK_SCHED_CONF_HALT)?1:0;
 801c592:	250a      	movs	r5, #10
 801c594:	197b      	adds	r3, r7, r5
 801c596:	881b      	ldrh	r3, [r3, #0]
 801c598:	105a      	asrs	r2, r3, #1
 801c59a:	4b20      	ldr	r3, [pc, #128]	; (801c61c <itdt_sched_registerSched+0x12c>)
 801c59c:	781b      	ldrb	r3, [r3, #0]
 801c59e:	001c      	movs	r4, r3
 801c5a0:	2301      	movs	r3, #1
 801c5a2:	4013      	ands	r3, r2
 801c5a4:	b2da      	uxtb	r2, r3
 801c5a6:	491e      	ldr	r1, [pc, #120]	; (801c620 <itdt_sched_registerSched+0x130>)
 801c5a8:	2008      	movs	r0, #8
 801c5aa:	0123      	lsls	r3, r4, #4
 801c5ac:	18cb      	adds	r3, r1, r3
 801c5ae:	181b      	adds	r3, r3, r0
 801c5b0:	2101      	movs	r1, #1
 801c5b2:	400a      	ands	r2, r1
 801c5b4:	1890      	adds	r0, r2, r2
 801c5b6:	78da      	ldrb	r2, [r3, #3]
 801c5b8:	2102      	movs	r1, #2
 801c5ba:	438a      	bics	r2, r1
 801c5bc:	1c11      	adds	r1, r2, #0
 801c5be:	1c02      	adds	r2, r0, #0
 801c5c0:	430a      	orrs	r2, r1
 801c5c2:	70da      	strb	r2, [r3, #3]
		__scheds[__sNum].skip=(mode & ITSDK_SCHED_CONF_SKIP)?1:0;
 801c5c4:	4b15      	ldr	r3, [pc, #84]	; (801c61c <itdt_sched_registerSched+0x12c>)
 801c5c6:	781b      	ldrb	r3, [r3, #0]
 801c5c8:	001c      	movs	r4, r3
 801c5ca:	197b      	adds	r3, r7, r5
 801c5cc:	881b      	ldrh	r3, [r3, #0]
 801c5ce:	1c1a      	adds	r2, r3, #0
 801c5d0:	2301      	movs	r3, #1
 801c5d2:	4013      	ands	r3, r2
 801c5d4:	b2da      	uxtb	r2, r3
 801c5d6:	4912      	ldr	r1, [pc, #72]	; (801c620 <itdt_sched_registerSched+0x130>)
 801c5d8:	2008      	movs	r0, #8
 801c5da:	0123      	lsls	r3, r4, #4
 801c5dc:	18cb      	adds	r3, r1, r3
 801c5de:	181b      	adds	r3, r3, r0
 801c5e0:	2101      	movs	r1, #1
 801c5e2:	400a      	ands	r2, r1
 801c5e4:	0010      	movs	r0, r2
 801c5e6:	78da      	ldrb	r2, [r3, #3]
 801c5e8:	2101      	movs	r1, #1
 801c5ea:	438a      	bics	r2, r1
 801c5ec:	1c11      	adds	r1, r2, #0
 801c5ee:	1c02      	adds	r2, r0, #0
 801c5f0:	430a      	orrs	r2, r1
 801c5f2:	70da      	strb	r2, [r3, #3]
		__sNum++;
 801c5f4:	4b09      	ldr	r3, [pc, #36]	; (801c61c <itdt_sched_registerSched+0x12c>)
 801c5f6:	781b      	ldrb	r3, [r3, #0]
 801c5f8:	3301      	adds	r3, #1
 801c5fa:	b2da      	uxtb	r2, r3
 801c5fc:	4b07      	ldr	r3, [pc, #28]	; (801c61c <itdt_sched_registerSched+0x12c>)
 801c5fe:	701a      	strb	r2, [r3, #0]
		return __sNum-1;
 801c600:	4b06      	ldr	r3, [pc, #24]	; (801c61c <itdt_sched_registerSched+0x12c>)
 801c602:	781b      	ldrb	r3, [r3, #0]
 801c604:	3b01      	subs	r3, #1
 801c606:	b2db      	uxtb	r3, r3
 801c608:	e000      	b.n	801c60c <itdt_sched_registerSched+0x11c>
	} else return ITSDK_SCHED_ERROR;
 801c60a:	23ff      	movs	r3, #255	; 0xff

}
 801c60c:	0018      	movs	r0, r3
 801c60e:	46bd      	mov	sp, r7
 801c610:	b005      	add	sp, #20
 801c612:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c614:	00ffffff 	.word	0x00ffffff
 801c618:	80000050 	.word	0x80000050
 801c61c:	20001231 	.word	0x20001231
 801c620:	20001688 	.word	0x20001688

0801c624 <itsdk_time_add_us>:


/**
 * Add the given number of uS to the uS global timer
 */
void itsdk_time_add_us(uint32_t us) {
 801c624:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c626:	b087      	sub	sp, #28
 801c628:	af00      	add	r7, sp, #0
 801c62a:	60f8      	str	r0, [r7, #12]
	// apply correction
	#if ITSDK_CLK_CORRECTION != 0
	us = us + ( (int64_t)us * ITSDK_CLK_CORRECTION ) / 1000;
 801c62c:	68fb      	ldr	r3, [r7, #12]
 801c62e:	603b      	str	r3, [r7, #0]
 801c630:	2300      	movs	r3, #0
 801c632:	607b      	str	r3, [r7, #4]
 801c634:	22fa      	movs	r2, #250	; 0xfa
 801c636:	0092      	lsls	r2, r2, #2
 801c638:	2300      	movs	r3, #0
 801c63a:	6838      	ldr	r0, [r7, #0]
 801c63c:	6879      	ldr	r1, [r7, #4]
 801c63e:	f7e3 ff63 	bl	8000508 <__aeabi_lmul>
 801c642:	0003      	movs	r3, r0
 801c644:	000c      	movs	r4, r1
 801c646:	0018      	movs	r0, r3
 801c648:	0021      	movs	r1, r4
 801c64a:	22fa      	movs	r2, #250	; 0xfa
 801c64c:	0092      	lsls	r2, r2, #2
 801c64e:	2300      	movs	r3, #0
 801c650:	f7e3 ff16 	bl	8000480 <__aeabi_ldivmod>
 801c654:	0003      	movs	r3, r0
 801c656:	000c      	movs	r4, r1
 801c658:	001a      	movs	r2, r3
 801c65a:	68fb      	ldr	r3, [r7, #12]
 801c65c:	189b      	adds	r3, r3, r2
 801c65e:	60fb      	str	r3, [r7, #12]
	#endif
	uint64_t n = __timeus + us;
 801c660:	68fb      	ldr	r3, [r7, #12]
 801c662:	001d      	movs	r5, r3
 801c664:	2300      	movs	r3, #0
 801c666:	001e      	movs	r6, r3
 801c668:	4b12      	ldr	r3, [pc, #72]	; (801c6b4 <itsdk_time_add_us+0x90>)
 801c66a:	685c      	ldr	r4, [r3, #4]
 801c66c:	681b      	ldr	r3, [r3, #0]
 801c66e:	195b      	adds	r3, r3, r5
 801c670:	4174      	adcs	r4, r6
 801c672:	613b      	str	r3, [r7, #16]
 801c674:	617c      	str	r4, [r7, #20]
	if ( n < __timeus  ) {
 801c676:	4b0f      	ldr	r3, [pc, #60]	; (801c6b4 <itsdk_time_add_us+0x90>)
 801c678:	685c      	ldr	r4, [r3, #4]
 801c67a:	681b      	ldr	r3, [r3, #0]
 801c67c:	697a      	ldr	r2, [r7, #20]
 801c67e:	42a2      	cmp	r2, r4
 801c680:	d305      	bcc.n	801c68e <itsdk_time_add_us+0x6a>
 801c682:	697a      	ldr	r2, [r7, #20]
 801c684:	42a2      	cmp	r2, r4
 801c686:	d10b      	bne.n	801c6a0 <itsdk_time_add_us+0x7c>
 801c688:	693a      	ldr	r2, [r7, #16]
 801c68a:	429a      	cmp	r2, r3
 801c68c:	d208      	bcs.n	801c6a0 <itsdk_time_add_us+0x7c>
		__time_has_overrun=1;
 801c68e:	4b0a      	ldr	r3, [pc, #40]	; (801c6b8 <itsdk_time_add_us+0x94>)
 801c690:	2201      	movs	r2, #1
 801c692:	701a      	strb	r2, [r3, #0]
		__time_overrun_cnt++;
 801c694:	4b09      	ldr	r3, [pc, #36]	; (801c6bc <itsdk_time_add_us+0x98>)
 801c696:	781b      	ldrb	r3, [r3, #0]
 801c698:	3301      	adds	r3, #1
 801c69a:	b2da      	uxtb	r2, r3
 801c69c:	4b07      	ldr	r3, [pc, #28]	; (801c6bc <itsdk_time_add_us+0x98>)
 801c69e:	701a      	strb	r2, [r3, #0]
	}
	__timeus = n;
 801c6a0:	4a04      	ldr	r2, [pc, #16]	; (801c6b4 <itsdk_time_add_us+0x90>)
 801c6a2:	693b      	ldr	r3, [r7, #16]
 801c6a4:	697c      	ldr	r4, [r7, #20]
 801c6a6:	6013      	str	r3, [r2, #0]
 801c6a8:	6054      	str	r4, [r2, #4]
}
 801c6aa:	46c0      	nop			; (mov r8, r8)
 801c6ac:	46bd      	mov	sp, r7
 801c6ae:	b007      	add	sp, #28
 801c6b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c6b2:	46c0      	nop			; (mov r8, r8)
 801c6b4:	20001238 	.word	0x20001238
 801c6b8:	20001240 	.word	0x20001240
 801c6bc:	20001241 	.word	0x20001241

0801c6c0 <itsdk_time_set_ms>:

/**
 * Set current time in ms
 */
void itsdk_time_set_ms(uint64_t ms) {
 801c6c0:	b590      	push	{r4, r7, lr}
 801c6c2:	b085      	sub	sp, #20
 801c6c4:	af00      	add	r7, sp, #0
 801c6c6:	6038      	str	r0, [r7, #0]
 801c6c8:	6079      	str	r1, [r7, #4]
	uint64_t n = ms * 1000L;
 801c6ca:	22fa      	movs	r2, #250	; 0xfa
 801c6cc:	0092      	lsls	r2, r2, #2
 801c6ce:	2300      	movs	r3, #0
 801c6d0:	6838      	ldr	r0, [r7, #0]
 801c6d2:	6879      	ldr	r1, [r7, #4]
 801c6d4:	f7e3 ff18 	bl	8000508 <__aeabi_lmul>
 801c6d8:	0003      	movs	r3, r0
 801c6da:	000c      	movs	r4, r1
 801c6dc:	60bb      	str	r3, [r7, #8]
 801c6de:	60fc      	str	r4, [r7, #12]
	if ( (__timeus - n) > 1000000L   ) {	// difference is > 1m assuming the counter has restarted
 801c6e0:	4b10      	ldr	r3, [pc, #64]	; (801c724 <itsdk_time_set_ms+0x64>)
 801c6e2:	6819      	ldr	r1, [r3, #0]
 801c6e4:	685a      	ldr	r2, [r3, #4]
 801c6e6:	68bb      	ldr	r3, [r7, #8]
 801c6e8:	68fc      	ldr	r4, [r7, #12]
 801c6ea:	1ac9      	subs	r1, r1, r3
 801c6ec:	41a2      	sbcs	r2, r4
 801c6ee:	000b      	movs	r3, r1
 801c6f0:	0014      	movs	r4, r2
 801c6f2:	2c00      	cmp	r4, #0
 801c6f4:	d103      	bne.n	801c6fe <itsdk_time_set_ms+0x3e>
 801c6f6:	d10b      	bne.n	801c710 <itsdk_time_set_ms+0x50>
 801c6f8:	4a0b      	ldr	r2, [pc, #44]	; (801c728 <itsdk_time_set_ms+0x68>)
 801c6fa:	4293      	cmp	r3, r2
 801c6fc:	d908      	bls.n	801c710 <itsdk_time_set_ms+0x50>
		__time_has_overrun=1;
 801c6fe:	4b0b      	ldr	r3, [pc, #44]	; (801c72c <itsdk_time_set_ms+0x6c>)
 801c700:	2201      	movs	r2, #1
 801c702:	701a      	strb	r2, [r3, #0]
		__time_overrun_cnt++;
 801c704:	4b0a      	ldr	r3, [pc, #40]	; (801c730 <itsdk_time_set_ms+0x70>)
 801c706:	781b      	ldrb	r3, [r3, #0]
 801c708:	3301      	adds	r3, #1
 801c70a:	b2da      	uxtb	r2, r3
 801c70c:	4b08      	ldr	r3, [pc, #32]	; (801c730 <itsdk_time_set_ms+0x70>)
 801c70e:	701a      	strb	r2, [r3, #0]
	}
	__timeus = n;
 801c710:	4a04      	ldr	r2, [pc, #16]	; (801c724 <itsdk_time_set_ms+0x64>)
 801c712:	68bb      	ldr	r3, [r7, #8]
 801c714:	68fc      	ldr	r4, [r7, #12]
 801c716:	6013      	str	r3, [r2, #0]
 801c718:	6054      	str	r4, [r2, #4]
}
 801c71a:	46c0      	nop			; (mov r8, r8)
 801c71c:	46bd      	mov	sp, r7
 801c71e:	b005      	add	sp, #20
 801c720:	bd90      	pop	{r4, r7, pc}
 801c722:	46c0      	nop			; (mov r8, r8)
 801c724:	20001238 	.word	0x20001238
 801c728:	000f4240 	.word	0x000f4240
 801c72c:	20001240 	.word	0x20001240
 801c730:	20001241 	.word	0x20001241

0801c734 <itsdk_time_get_ms>:

/**
 * Get current time in ms
 */
uint64_t itsdk_time_get_ms() {
 801c734:	b5b0      	push	{r4, r5, r7, lr}
 801c736:	af00      	add	r7, sp, #0
	return __timeus / 1000;
 801c738:	4b06      	ldr	r3, [pc, #24]	; (801c754 <itsdk_time_get_ms+0x20>)
 801c73a:	6818      	ldr	r0, [r3, #0]
 801c73c:	6859      	ldr	r1, [r3, #4]
 801c73e:	22fa      	movs	r2, #250	; 0xfa
 801c740:	0092      	lsls	r2, r2, #2
 801c742:	2300      	movs	r3, #0
 801c744:	f7e3 fec0 	bl	80004c8 <__aeabi_uldivmod>
 801c748:	0003      	movs	r3, r0
 801c74a:	000c      	movs	r4, r1
}
 801c74c:	0018      	movs	r0, r3
 801c74e:	0021      	movs	r1, r4
 801c750:	46bd      	mov	sp, r7
 801c752:	bdb0      	pop	{r4, r5, r7, pc}
 801c754:	20001238 	.word	0x20001238

0801c758 <itsdk_time_get_us>:

/**
 * Get current time in us
 */
uint64_t itsdk_time_get_us() {
 801c758:	b590      	push	{r4, r7, lr}
 801c75a:	af00      	add	r7, sp, #0
	return __timeus;
 801c75c:	4b03      	ldr	r3, [pc, #12]	; (801c76c <itsdk_time_get_us+0x14>)
 801c75e:	685c      	ldr	r4, [r3, #4]
 801c760:	681b      	ldr	r3, [r3, #0]
}
 801c762:	0018      	movs	r0, r3
 801c764:	0021      	movs	r1, r4
 801c766:	46bd      	mov	sp, r7
 801c768:	bd90      	pop	{r4, r7, pc}
 801c76a:	46c0      	nop			; (mov r8, r8)
 801c76c:	20001238 	.word	0x20001238

0801c770 <itsdk_time_init>:
}

/**
 * Init time functions
 */
void itsdk_time_init() {
 801c770:	b5b0      	push	{r4, r5, r7, lr}
 801c772:	af00      	add	r7, sp, #0
#if ITSDK_PLATFORM == __PLATFORM_STM32L0
  #if ITSDK_WITH_RTC != __RTC_NONE
	rtc_resetTime();
 801c774:	f001 fbb2 	bl	801dedc <rtc_resetTime>
	rtc_adjustTime();
 801c778:	f001 fc10 	bl	801df9c <rtc_adjustTime>
  #endif
	systick_adjustTime();
 801c77c:	f001 fc6c 	bl	801e058 <systick_adjustTime>
  #if ITSDK_WITH_RTC != __RTC_NONE
	itsdk_time_set_ms(rtc_getTimestampMs());
 801c780:	f001 fabe 	bl	801dd00 <rtc_getTimestampMs>
 801c784:	0003      	movs	r3, r0
 801c786:	000c      	movs	r4, r1
 801c788:	0018      	movs	r0, r3
 801c78a:	0021      	movs	r1, r4
 801c78c:	f7ff ff98 	bl	801c6c0 <itsdk_time_set_ms>
  #endif
#else
	#error "platform not supported"
#endif
}
 801c790:	46c0      	nop			; (mov r8, r8)
 801c792:	46bd      	mov	sp, r7
 801c794:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801c798 <itsdk_stimer_register>:
itsdk_timer_return_t itsdk_stimer_register(
		uint32_t ms,
		void (*callback_func)(uint32_t value),
		uint32_t value,
		itsdk_timer_lpAccept allowLowPower
) {
 801c798:	b5b0      	push	{r4, r5, r7, lr}
 801c79a:	b086      	sub	sp, #24
 801c79c:	af00      	add	r7, sp, #0
 801c79e:	60f8      	str	r0, [r7, #12]
 801c7a0:	60b9      	str	r1, [r7, #8]
 801c7a2:	607a      	str	r2, [r7, #4]
 801c7a4:	001a      	movs	r2, r3
 801c7a6:	1cfb      	adds	r3, r7, #3
 801c7a8:	701a      	strb	r2, [r3, #0]
		#endif
		return TIMER_TOO_SHORT;
	}
	*/

	int i = 0;
 801c7aa:	2300      	movs	r3, #0
 801c7ac:	617b      	str	r3, [r7, #20]
	while ( i < ITSDK_TIMER_SLOTS) {
 801c7ae:	e00e      	b.n	801c7ce <itsdk_stimer_register+0x36>
		if (__stimer_slots[i].inUse == false) {
 801c7b0:	492f      	ldr	r1, [pc, #188]	; (801c870 <itsdk_stimer_register+0xd8>)
 801c7b2:	697a      	ldr	r2, [r7, #20]
 801c7b4:	0013      	movs	r3, r2
 801c7b6:	005b      	lsls	r3, r3, #1
 801c7b8:	189b      	adds	r3, r3, r2
 801c7ba:	00db      	lsls	r3, r3, #3
 801c7bc:	5c5b      	ldrb	r3, [r3, r1]
 801c7be:	2201      	movs	r2, #1
 801c7c0:	4053      	eors	r3, r2
 801c7c2:	b2db      	uxtb	r3, r3
 801c7c4:	2b00      	cmp	r3, #0
 801c7c6:	d106      	bne.n	801c7d6 <itsdk_stimer_register+0x3e>
			break;
		}
		i++;
 801c7c8:	697b      	ldr	r3, [r7, #20]
 801c7ca:	3301      	adds	r3, #1
 801c7cc:	617b      	str	r3, [r7, #20]
	while ( i < ITSDK_TIMER_SLOTS) {
 801c7ce:	697b      	ldr	r3, [r7, #20]
 801c7d0:	2b04      	cmp	r3, #4
 801c7d2:	dded      	ble.n	801c7b0 <itsdk_stimer_register+0x18>
 801c7d4:	e000      	b.n	801c7d8 <itsdk_stimer_register+0x40>
			break;
 801c7d6:	46c0      	nop			; (mov r8, r8)
	}
	if ( i < ITSDK_TIMER_SLOTS ) {
 801c7d8:	697b      	ldr	r3, [r7, #20]
 801c7da:	2b04      	cmp	r3, #4
 801c7dc:	dc42      	bgt.n	801c864 <itsdk_stimer_register+0xcc>
		__stimer_slots[i].inUse = true;
 801c7de:	4924      	ldr	r1, [pc, #144]	; (801c870 <itsdk_stimer_register+0xd8>)
 801c7e0:	697a      	ldr	r2, [r7, #20]
 801c7e2:	0013      	movs	r3, r2
 801c7e4:	005b      	lsls	r3, r3, #1
 801c7e6:	189b      	adds	r3, r3, r2
 801c7e8:	00db      	lsls	r3, r3, #3
 801c7ea:	2201      	movs	r2, #1
 801c7ec:	545a      	strb	r2, [r3, r1]
		__stimer_slots[i].allowLowPower = ((allowLowPower==TIMER_ACCEPT_LOWPOWER)?true:false);
 801c7ee:	1cfb      	adds	r3, r7, #3
 801c7f0:	781b      	ldrb	r3, [r3, #0]
 801c7f2:	425a      	negs	r2, r3
 801c7f4:	4153      	adcs	r3, r2
 801c7f6:	b2d8      	uxtb	r0, r3
 801c7f8:	491d      	ldr	r1, [pc, #116]	; (801c870 <itsdk_stimer_register+0xd8>)
 801c7fa:	697a      	ldr	r2, [r7, #20]
 801c7fc:	0013      	movs	r3, r2
 801c7fe:	005b      	lsls	r3, r3, #1
 801c800:	189b      	adds	r3, r3, r2
 801c802:	00db      	lsls	r3, r3, #3
 801c804:	18cb      	adds	r3, r1, r3
 801c806:	3301      	adds	r3, #1
 801c808:	1c02      	adds	r2, r0, #0
 801c80a:	701a      	strb	r2, [r3, #0]
		__stimer_slots[i].customValue = value;
 801c80c:	4918      	ldr	r1, [pc, #96]	; (801c870 <itsdk_stimer_register+0xd8>)
 801c80e:	697a      	ldr	r2, [r7, #20]
 801c810:	0013      	movs	r3, r2
 801c812:	005b      	lsls	r3, r3, #1
 801c814:	189b      	adds	r3, r3, r2
 801c816:	00db      	lsls	r3, r3, #3
 801c818:	18cb      	adds	r3, r1, r3
 801c81a:	3314      	adds	r3, #20
 801c81c:	687a      	ldr	r2, [r7, #4]
 801c81e:	601a      	str	r2, [r3, #0]
		__stimer_slots[i].callback_func = callback_func;
 801c820:	4913      	ldr	r1, [pc, #76]	; (801c870 <itsdk_stimer_register+0xd8>)
 801c822:	697a      	ldr	r2, [r7, #20]
 801c824:	0013      	movs	r3, r2
 801c826:	005b      	lsls	r3, r3, #1
 801c828:	189b      	adds	r3, r3, r2
 801c82a:	00db      	lsls	r3, r3, #3
 801c82c:	18cb      	adds	r3, r1, r3
 801c82e:	3310      	adds	r3, #16
 801c830:	68ba      	ldr	r2, [r7, #8]
 801c832:	601a      	str	r2, [r3, #0]
		__stimer_slots[i].timeoutMs = itsdk_time_get_ms()+(uint64_t)ms;
 801c834:	f7ff ff7e 	bl	801c734 <itsdk_time_get_ms>
 801c838:	0002      	movs	r2, r0
 801c83a:	000b      	movs	r3, r1
 801c83c:	68f9      	ldr	r1, [r7, #12]
 801c83e:	000c      	movs	r4, r1
 801c840:	2100      	movs	r1, #0
 801c842:	000d      	movs	r5, r1
 801c844:	1912      	adds	r2, r2, r4
 801c846:	416b      	adcs	r3, r5
 801c848:	0011      	movs	r1, r2
 801c84a:	001a      	movs	r2, r3
 801c84c:	4c08      	ldr	r4, [pc, #32]	; (801c870 <itsdk_stimer_register+0xd8>)
 801c84e:	6978      	ldr	r0, [r7, #20]
 801c850:	0003      	movs	r3, r0
 801c852:	005b      	lsls	r3, r3, #1
 801c854:	181b      	adds	r3, r3, r0
 801c856:	00db      	lsls	r3, r3, #3
 801c858:	18e3      	adds	r3, r4, r3
 801c85a:	3308      	adds	r3, #8
 801c85c:	6019      	str	r1, [r3, #0]
 801c85e:	605a      	str	r2, [r3, #4]
		return TIMER_INIT_SUCCESS;
 801c860:	2300      	movs	r3, #0
 801c862:	e000      	b.n	801c866 <itsdk_stimer_register+0xce>
	}
	#if (ITSDK_LOGGER_MODULE & __LOG_MOD_STIMER) > 0
	  ITSDK_ERROR_REPORT(ITSDK_ERROR_STIMER_LIST_FULL,0);
	#endif
	return TIMER_LIST_FULL;
 801c864:	2303      	movs	r3, #3
}
 801c866:	0018      	movs	r0, r3
 801c868:	46bd      	mov	sp, r7
 801c86a:	b006      	add	sp, #24
 801c86c:	bdb0      	pop	{r4, r5, r7, pc}
 801c86e:	46c0      	nop			; (mov r8, r8)
 801c870:	20001248 	.word	0x20001248

0801c874 <itsdk_stimer_stop>:
 * identified by function pointer & value
 */
itsdk_timer_return_t itsdk_stimer_stop(
		void (*callback_func)(uint32_t value),
		uint32_t value
) {
 801c874:	b580      	push	{r7, lr}
 801c876:	b084      	sub	sp, #16
 801c878:	af00      	add	r7, sp, #0
 801c87a:	6078      	str	r0, [r7, #4]
 801c87c:	6039      	str	r1, [r7, #0]
	for (int i=0 ; i < ITSDK_TIMER_SLOTS ; i++) {
 801c87e:	2300      	movs	r3, #0
 801c880:	60fb      	str	r3, [r7, #12]
 801c882:	e02d      	b.n	801c8e0 <itsdk_stimer_stop+0x6c>
		if (
				__stimer_slots[i].inUse == true
 801c884:	491a      	ldr	r1, [pc, #104]	; (801c8f0 <itsdk_stimer_stop+0x7c>)
 801c886:	68fa      	ldr	r2, [r7, #12]
 801c888:	0013      	movs	r3, r2
 801c88a:	005b      	lsls	r3, r3, #1
 801c88c:	189b      	adds	r3, r3, r2
 801c88e:	00db      	lsls	r3, r3, #3
 801c890:	5c5b      	ldrb	r3, [r3, r1]
		if (
 801c892:	2b00      	cmp	r3, #0
 801c894:	d021      	beq.n	801c8da <itsdk_stimer_stop+0x66>
			&&  __stimer_slots[i].customValue == value
 801c896:	4916      	ldr	r1, [pc, #88]	; (801c8f0 <itsdk_stimer_stop+0x7c>)
 801c898:	68fa      	ldr	r2, [r7, #12]
 801c89a:	0013      	movs	r3, r2
 801c89c:	005b      	lsls	r3, r3, #1
 801c89e:	189b      	adds	r3, r3, r2
 801c8a0:	00db      	lsls	r3, r3, #3
 801c8a2:	18cb      	adds	r3, r1, r3
 801c8a4:	3314      	adds	r3, #20
 801c8a6:	681b      	ldr	r3, [r3, #0]
 801c8a8:	683a      	ldr	r2, [r7, #0]
 801c8aa:	429a      	cmp	r2, r3
 801c8ac:	d115      	bne.n	801c8da <itsdk_stimer_stop+0x66>
			&&  __stimer_slots[i].callback_func == callback_func
 801c8ae:	4910      	ldr	r1, [pc, #64]	; (801c8f0 <itsdk_stimer_stop+0x7c>)
 801c8b0:	68fa      	ldr	r2, [r7, #12]
 801c8b2:	0013      	movs	r3, r2
 801c8b4:	005b      	lsls	r3, r3, #1
 801c8b6:	189b      	adds	r3, r3, r2
 801c8b8:	00db      	lsls	r3, r3, #3
 801c8ba:	18cb      	adds	r3, r1, r3
 801c8bc:	3310      	adds	r3, #16
 801c8be:	681b      	ldr	r3, [r3, #0]
 801c8c0:	687a      	ldr	r2, [r7, #4]
 801c8c2:	429a      	cmp	r2, r3
 801c8c4:	d109      	bne.n	801c8da <itsdk_stimer_stop+0x66>
		) {
			// found
			__stimer_slots[i].inUse = false;
 801c8c6:	490a      	ldr	r1, [pc, #40]	; (801c8f0 <itsdk_stimer_stop+0x7c>)
 801c8c8:	68fa      	ldr	r2, [r7, #12]
 801c8ca:	0013      	movs	r3, r2
 801c8cc:	005b      	lsls	r3, r3, #1
 801c8ce:	189b      	adds	r3, r3, r2
 801c8d0:	00db      	lsls	r3, r3, #3
 801c8d2:	2200      	movs	r2, #0
 801c8d4:	545a      	strb	r2, [r3, r1]
			return TIMER_INIT_SUCCESS;
 801c8d6:	2300      	movs	r3, #0
 801c8d8:	e006      	b.n	801c8e8 <itsdk_stimer_stop+0x74>
	for (int i=0 ; i < ITSDK_TIMER_SLOTS ; i++) {
 801c8da:	68fb      	ldr	r3, [r7, #12]
 801c8dc:	3301      	adds	r3, #1
 801c8de:	60fb      	str	r3, [r7, #12]
 801c8e0:	68fb      	ldr	r3, [r7, #12]
 801c8e2:	2b04      	cmp	r3, #4
 801c8e4:	ddce      	ble.n	801c884 <itsdk_stimer_stop+0x10>
		}
	}
	return TIMER_NOT_FOUND;
 801c8e6:	2304      	movs	r3, #4
}
 801c8e8:	0018      	movs	r0, r3
 801c8ea:	46bd      	mov	sp, r7
 801c8ec:	b004      	add	sp, #16
 801c8ee:	bd80      	pop	{r7, pc}
 801c8f0:	20001248 	.word	0x20001248

0801c8f4 <itsdk_stimer_get>:
 * Get a timer structure from callback & value
 */
itsdk_stimer_slot_t * itsdk_stimer_get(
		void (*callback_func)(uint32_t value),
		uint32_t value
) {
 801c8f4:	b580      	push	{r7, lr}
 801c8f6:	b084      	sub	sp, #16
 801c8f8:	af00      	add	r7, sp, #0
 801c8fa:	6078      	str	r0, [r7, #4]
 801c8fc:	6039      	str	r1, [r7, #0]
	for (int i=0 ; i < ITSDK_TIMER_SLOTS ; i++) {
 801c8fe:	2300      	movs	r3, #0
 801c900:	60fb      	str	r3, [r7, #12]
 801c902:	e02b      	b.n	801c95c <itsdk_stimer_get+0x68>
		if (
				__stimer_slots[i].inUse == true
 801c904:	4919      	ldr	r1, [pc, #100]	; (801c96c <itsdk_stimer_get+0x78>)
 801c906:	68fa      	ldr	r2, [r7, #12]
 801c908:	0013      	movs	r3, r2
 801c90a:	005b      	lsls	r3, r3, #1
 801c90c:	189b      	adds	r3, r3, r2
 801c90e:	00db      	lsls	r3, r3, #3
 801c910:	5c5b      	ldrb	r3, [r3, r1]
		if (
 801c912:	2b00      	cmp	r3, #0
 801c914:	d01f      	beq.n	801c956 <itsdk_stimer_get+0x62>
			&&  __stimer_slots[i].customValue == value
 801c916:	4915      	ldr	r1, [pc, #84]	; (801c96c <itsdk_stimer_get+0x78>)
 801c918:	68fa      	ldr	r2, [r7, #12]
 801c91a:	0013      	movs	r3, r2
 801c91c:	005b      	lsls	r3, r3, #1
 801c91e:	189b      	adds	r3, r3, r2
 801c920:	00db      	lsls	r3, r3, #3
 801c922:	18cb      	adds	r3, r1, r3
 801c924:	3314      	adds	r3, #20
 801c926:	681b      	ldr	r3, [r3, #0]
 801c928:	683a      	ldr	r2, [r7, #0]
 801c92a:	429a      	cmp	r2, r3
 801c92c:	d113      	bne.n	801c956 <itsdk_stimer_get+0x62>
			&&  __stimer_slots[i].callback_func == callback_func
 801c92e:	490f      	ldr	r1, [pc, #60]	; (801c96c <itsdk_stimer_get+0x78>)
 801c930:	68fa      	ldr	r2, [r7, #12]
 801c932:	0013      	movs	r3, r2
 801c934:	005b      	lsls	r3, r3, #1
 801c936:	189b      	adds	r3, r3, r2
 801c938:	00db      	lsls	r3, r3, #3
 801c93a:	18cb      	adds	r3, r1, r3
 801c93c:	3310      	adds	r3, #16
 801c93e:	681b      	ldr	r3, [r3, #0]
 801c940:	687a      	ldr	r2, [r7, #4]
 801c942:	429a      	cmp	r2, r3
 801c944:	d107      	bne.n	801c956 <itsdk_stimer_get+0x62>
		) {
			// found
			return  &__stimer_slots[i];
 801c946:	68fa      	ldr	r2, [r7, #12]
 801c948:	0013      	movs	r3, r2
 801c94a:	005b      	lsls	r3, r3, #1
 801c94c:	189b      	adds	r3, r3, r2
 801c94e:	00db      	lsls	r3, r3, #3
 801c950:	4a06      	ldr	r2, [pc, #24]	; (801c96c <itsdk_stimer_get+0x78>)
 801c952:	189b      	adds	r3, r3, r2
 801c954:	e006      	b.n	801c964 <itsdk_stimer_get+0x70>
	for (int i=0 ; i < ITSDK_TIMER_SLOTS ; i++) {
 801c956:	68fb      	ldr	r3, [r7, #12]
 801c958:	3301      	adds	r3, #1
 801c95a:	60fb      	str	r3, [r7, #12]
 801c95c:	68fb      	ldr	r3, [r7, #12]
 801c95e:	2b04      	cmp	r3, #4
 801c960:	ddd0      	ble.n	801c904 <itsdk_stimer_get+0x10>
		}
	}
	return NULL;
 801c962:	2300      	movs	r3, #0

}
 801c964:	0018      	movs	r0, r3
 801c966:	46bd      	mov	sp, r7
 801c968:	b004      	add	sp, #16
 801c96a:	bd80      	pop	{r7, pc}
 801c96c:	20001248 	.word	0x20001248

0801c970 <itsdk_stimer_run>:

/**
 * Run the software timer execution. Call this function as much as
 * possible. At least on every wake-up from sleep
 */
void itsdk_stimer_run() {
 801c970:	b590      	push	{r4, r7, lr}
 801c972:	b085      	sub	sp, #20
 801c974:	af00      	add	r7, sp, #0
	uint64_t t = itsdk_time_get_ms();
 801c976:	f7ff fedd 	bl	801c734 <itsdk_time_get_ms>
 801c97a:	0003      	movs	r3, r0
 801c97c:	000c      	movs	r4, r1
 801c97e:	603b      	str	r3, [r7, #0]
 801c980:	607c      	str	r4, [r7, #4]
	for ( int i = 0 ; i < ITSDK_TIMER_SLOTS ; i++ ) {
 801c982:	2300      	movs	r3, #0
 801c984:	60fb      	str	r3, [r7, #12]
 801c986:	e045      	b.n	801ca14 <itsdk_stimer_run+0xa4>
		if ( __stimer_slots[i].inUse && __stimer_slots[i].timeoutMs <= t ) {
 801c988:	4926      	ldr	r1, [pc, #152]	; (801ca24 <itsdk_stimer_run+0xb4>)
 801c98a:	68fa      	ldr	r2, [r7, #12]
 801c98c:	0013      	movs	r3, r2
 801c98e:	005b      	lsls	r3, r3, #1
 801c990:	189b      	adds	r3, r3, r2
 801c992:	00db      	lsls	r3, r3, #3
 801c994:	5c5b      	ldrb	r3, [r3, r1]
 801c996:	2b00      	cmp	r3, #0
 801c998:	d039      	beq.n	801ca0e <itsdk_stimer_run+0x9e>
 801c99a:	4922      	ldr	r1, [pc, #136]	; (801ca24 <itsdk_stimer_run+0xb4>)
 801c99c:	68fa      	ldr	r2, [r7, #12]
 801c99e:	0013      	movs	r3, r2
 801c9a0:	005b      	lsls	r3, r3, #1
 801c9a2:	189b      	adds	r3, r3, r2
 801c9a4:	00db      	lsls	r3, r3, #3
 801c9a6:	18cb      	adds	r3, r1, r3
 801c9a8:	3308      	adds	r3, #8
 801c9aa:	685c      	ldr	r4, [r3, #4]
 801c9ac:	681b      	ldr	r3, [r3, #0]
 801c9ae:	687a      	ldr	r2, [r7, #4]
 801c9b0:	42a2      	cmp	r2, r4
 801c9b2:	d32c      	bcc.n	801ca0e <itsdk_stimer_run+0x9e>
 801c9b4:	687a      	ldr	r2, [r7, #4]
 801c9b6:	42a2      	cmp	r2, r4
 801c9b8:	d102      	bne.n	801c9c0 <itsdk_stimer_run+0x50>
 801c9ba:	683a      	ldr	r2, [r7, #0]
 801c9bc:	429a      	cmp	r2, r3
 801c9be:	d326      	bcc.n	801ca0e <itsdk_stimer_run+0x9e>
			__stimer_slots[i].inUse = false;
 801c9c0:	4918      	ldr	r1, [pc, #96]	; (801ca24 <itsdk_stimer_run+0xb4>)
 801c9c2:	68fa      	ldr	r2, [r7, #12]
 801c9c4:	0013      	movs	r3, r2
 801c9c6:	005b      	lsls	r3, r3, #1
 801c9c8:	189b      	adds	r3, r3, r2
 801c9ca:	00db      	lsls	r3, r3, #3
 801c9cc:	2200      	movs	r2, #0
 801c9ce:	545a      	strb	r2, [r3, r1]
			if (__stimer_slots[i].callback_func != NULL )
 801c9d0:	4914      	ldr	r1, [pc, #80]	; (801ca24 <itsdk_stimer_run+0xb4>)
 801c9d2:	68fa      	ldr	r2, [r7, #12]
 801c9d4:	0013      	movs	r3, r2
 801c9d6:	005b      	lsls	r3, r3, #1
 801c9d8:	189b      	adds	r3, r3, r2
 801c9da:	00db      	lsls	r3, r3, #3
 801c9dc:	18cb      	adds	r3, r1, r3
 801c9de:	3310      	adds	r3, #16
 801c9e0:	681b      	ldr	r3, [r3, #0]
 801c9e2:	2b00      	cmp	r3, #0
 801c9e4:	d013      	beq.n	801ca0e <itsdk_stimer_run+0x9e>
				__stimer_slots[i].callback_func(__stimer_slots[i].customValue);
 801c9e6:	490f      	ldr	r1, [pc, #60]	; (801ca24 <itsdk_stimer_run+0xb4>)
 801c9e8:	68fa      	ldr	r2, [r7, #12]
 801c9ea:	0013      	movs	r3, r2
 801c9ec:	005b      	lsls	r3, r3, #1
 801c9ee:	189b      	adds	r3, r3, r2
 801c9f0:	00db      	lsls	r3, r3, #3
 801c9f2:	18cb      	adds	r3, r1, r3
 801c9f4:	3310      	adds	r3, #16
 801c9f6:	6819      	ldr	r1, [r3, #0]
 801c9f8:	480a      	ldr	r0, [pc, #40]	; (801ca24 <itsdk_stimer_run+0xb4>)
 801c9fa:	68fa      	ldr	r2, [r7, #12]
 801c9fc:	0013      	movs	r3, r2
 801c9fe:	005b      	lsls	r3, r3, #1
 801ca00:	189b      	adds	r3, r3, r2
 801ca02:	00db      	lsls	r3, r3, #3
 801ca04:	18c3      	adds	r3, r0, r3
 801ca06:	3314      	adds	r3, #20
 801ca08:	681b      	ldr	r3, [r3, #0]
 801ca0a:	0018      	movs	r0, r3
 801ca0c:	4788      	blx	r1
	for ( int i = 0 ; i < ITSDK_TIMER_SLOTS ; i++ ) {
 801ca0e:	68fb      	ldr	r3, [r7, #12]
 801ca10:	3301      	adds	r3, #1
 801ca12:	60fb      	str	r3, [r7, #12]
 801ca14:	68fb      	ldr	r3, [r7, #12]
 801ca16:	2b04      	cmp	r3, #4
 801ca18:	ddb6      	ble.n	801c988 <itsdk_stimer_run+0x18>
		}
	}
}
 801ca1a:	46c0      	nop			; (mov r8, r8)
 801ca1c:	46bd      	mov	sp, r7
 801ca1e:	b005      	add	sp, #20
 801ca20:	bd90      	pop	{r4, r7, pc}
 801ca22:	46c0      	nop			; (mov r8, r8)
 801ca24:	20001248 	.word	0x20001248

0801ca28 <__getAdcValue>:
#if ITSDK_ADC_OPTIMIZE_SIZE == __ENABLE

/**
 * Read adc
 */
uint32_t __getAdcValue(uint32_t channel, uint8_t oversampling) {
 801ca28:	b580      	push	{r7, lr}
 801ca2a:	b084      	sub	sp, #16
 801ca2c:	af00      	add	r7, sp, #0
 801ca2e:	6078      	str	r0, [r7, #4]
 801ca30:	000a      	movs	r2, r1
 801ca32:	1cfb      	adds	r3, r7, #3
 801ca34:	701a      	strb	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 801ca36:	b672      	cpsid	i
  uint32_t i;

  __disable_irq();

  // ADC RESET
  RCC->APB2ENR |= RCC_APB2ENR_ADCEN;		// enable ADC clock
 801ca38:	4b73      	ldr	r3, [pc, #460]	; (801cc08 <__getAdcValue+0x1e0>)
 801ca3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801ca3c:	4b72      	ldr	r3, [pc, #456]	; (801cc08 <__getAdcValue+0x1e0>)
 801ca3e:	2180      	movs	r1, #128	; 0x80
 801ca40:	0089      	lsls	r1, r1, #2
 801ca42:	430a      	orrs	r2, r1
 801ca44:	635a      	str	r2, [r3, #52]	; 0x34
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 801ca46:	46c0      	nop			; (mov r8, r8)
 801ca48:	46c0      	nop			; (mov r8, r8)
  __NOP();
  __NOP();
  RCC->APB2RSTR |= RCC_APB2RSTR_ADCRST;
 801ca4a:	4b6f      	ldr	r3, [pc, #444]	; (801cc08 <__getAdcValue+0x1e0>)
 801ca4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801ca4e:	4b6e      	ldr	r3, [pc, #440]	; (801cc08 <__getAdcValue+0x1e0>)
 801ca50:	2180      	movs	r1, #128	; 0x80
 801ca52:	0089      	lsls	r1, r1, #2
 801ca54:	430a      	orrs	r2, r1
 801ca56:	625a      	str	r2, [r3, #36]	; 0x24
 801ca58:	46c0      	nop			; (mov r8, r8)
 801ca5a:	46c0      	nop			; (mov r8, r8)
  __NOP();
  __NOP();
  RCC->APB2RSTR &= ~RCC_APB2RSTR_ADCRST;
 801ca5c:	4b6a      	ldr	r3, [pc, #424]	; (801cc08 <__getAdcValue+0x1e0>)
 801ca5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801ca60:	4b69      	ldr	r3, [pc, #420]	; (801cc08 <__getAdcValue+0x1e0>)
 801ca62:	496a      	ldr	r1, [pc, #424]	; (801cc0c <__getAdcValue+0x1e4>)
 801ca64:	400a      	ands	r2, r1
 801ca66:	625a      	str	r2, [r3, #36]	; 0x24
 801ca68:	46c0      	nop			; (mov r8, r8)
 801ca6a:	46c0      	nop			; (mov r8, r8)
  __NOP();
  __NOP();


  // Enable some basic parts
  ADC1->IER = 0;						// do not allow any interrupts
 801ca6c:	4b68      	ldr	r3, [pc, #416]	; (801cc10 <__getAdcValue+0x1e8>)
 801ca6e:	2200      	movs	r2, #0
 801ca70:	605a      	str	r2, [r3, #4]
  ADC1->CFGR2 &= ~ADC_CFGR2_CKMODE;		// select HSI16 clock
 801ca72:	4b67      	ldr	r3, [pc, #412]	; (801cc10 <__getAdcValue+0x1e8>)
 801ca74:	691a      	ldr	r2, [r3, #16]
 801ca76:	4b66      	ldr	r3, [pc, #408]	; (801cc10 <__getAdcValue+0x1e8>)
 801ca78:	0092      	lsls	r2, r2, #2
 801ca7a:	0892      	lsrs	r2, r2, #2
 801ca7c:	611a      	str	r2, [r3, #16]

  ADC1->CR |= ADC_CR_ADVREGEN;			// enable ADC voltage regulator, probably not required, because this is automatically activated
 801ca7e:	4b64      	ldr	r3, [pc, #400]	; (801cc10 <__getAdcValue+0x1e8>)
 801ca80:	689a      	ldr	r2, [r3, #8]
 801ca82:	4b63      	ldr	r3, [pc, #396]	; (801cc10 <__getAdcValue+0x1e8>)
 801ca84:	2180      	movs	r1, #128	; 0x80
 801ca86:	0549      	lsls	r1, r1, #21
 801ca88:	430a      	orrs	r2, r1
 801ca8a:	609a      	str	r2, [r3, #8]
  ADC->CCR |= ADC_CCR_VREFEN; 			// Wake-up the VREFINT
 801ca8c:	4b61      	ldr	r3, [pc, #388]	; (801cc14 <__getAdcValue+0x1ec>)
 801ca8e:	681a      	ldr	r2, [r3, #0]
 801ca90:	4b60      	ldr	r3, [pc, #384]	; (801cc14 <__getAdcValue+0x1ec>)
 801ca92:	2180      	movs	r1, #128	; 0x80
 801ca94:	03c9      	lsls	r1, r1, #15
 801ca96:	430a      	orrs	r2, r1
 801ca98:	601a      	str	r2, [r3, #0]
  ADC->CCR |= ADC_CCR_TSEN; 			// Wake-up the temperature sensor
 801ca9a:	4b5e      	ldr	r3, [pc, #376]	; (801cc14 <__getAdcValue+0x1ec>)
 801ca9c:	681a      	ldr	r2, [r3, #0]
 801ca9e:	4b5d      	ldr	r3, [pc, #372]	; (801cc14 <__getAdcValue+0x1ec>)
 801caa0:	2180      	movs	r1, #128	; 0x80
 801caa2:	0409      	lsls	r1, r1, #16
 801caa4:	430a      	orrs	r2, r1
 801caa6:	601a      	str	r2, [r3, #0]
 801caa8:	46c0      	nop			; (mov r8, r8)
 801caaa:	46c0      	nop			; (mov r8, r8)
  __NOP();
  __NOP();


  // CALIBRATION
  if ((ADC1->CR & ADC_CR_ADEN) != 0) {		// clear ADEN flag if required
 801caac:	4b58      	ldr	r3, [pc, #352]	; (801cc10 <__getAdcValue+0x1e8>)
 801caae:	689b      	ldr	r3, [r3, #8]
 801cab0:	2201      	movs	r2, #1
 801cab2:	4013      	ands	r3, r2
 801cab4:	d005      	beq.n	801cac2 <__getAdcValue+0x9a>
    ADC1->CR &= (uint32_t)(~ADC_CR_ADEN);
 801cab6:	4b56      	ldr	r3, [pc, #344]	; (801cc10 <__getAdcValue+0x1e8>)
 801cab8:	689a      	ldr	r2, [r3, #8]
 801caba:	4b55      	ldr	r3, [pc, #340]	; (801cc10 <__getAdcValue+0x1e8>)
 801cabc:	2101      	movs	r1, #1
 801cabe:	438a      	bics	r2, r1
 801cac0:	609a      	str	r2, [r3, #8]
  }
  ADC1->CR |= ADC_CR_ADCAL; 				// start calibration
 801cac2:	4b53      	ldr	r3, [pc, #332]	; (801cc10 <__getAdcValue+0x1e8>)
 801cac4:	689a      	ldr	r2, [r3, #8]
 801cac6:	4b52      	ldr	r3, [pc, #328]	; (801cc10 <__getAdcValue+0x1e8>)
 801cac8:	2180      	movs	r1, #128	; 0x80
 801caca:	0609      	lsls	r1, r1, #24
 801cacc:	430a      	orrs	r2, r1
 801cace:	609a      	str	r2, [r3, #8]
  while ((ADC1->ISR & ADC_ISR_EOCAL) == 0);	// wait for calibration finished
 801cad0:	46c0      	nop			; (mov r8, r8)
 801cad2:	4b4f      	ldr	r3, [pc, #316]	; (801cc10 <__getAdcValue+0x1e8>)
 801cad4:	681a      	ldr	r2, [r3, #0]
 801cad6:	2380      	movs	r3, #128	; 0x80
 801cad8:	011b      	lsls	r3, r3, #4
 801cada:	4013      	ands	r3, r2
 801cadc:	d0f9      	beq.n	801cad2 <__getAdcValue+0xaa>
  ADC1->ISR |= ADC_ISR_EOCAL; 				// clear the status flag, by writing 1 to it
 801cade:	4b4c      	ldr	r3, [pc, #304]	; (801cc10 <__getAdcValue+0x1e8>)
 801cae0:	681a      	ldr	r2, [r3, #0]
 801cae2:	4b4b      	ldr	r3, [pc, #300]	; (801cc10 <__getAdcValue+0x1e8>)
 801cae4:	2180      	movs	r1, #128	; 0x80
 801cae6:	0109      	lsls	r1, r1, #4
 801cae8:	430a      	orrs	r2, r1
 801caea:	601a      	str	r2, [r3, #0]
 801caec:	46c0      	nop			; (mov r8, r8)
 801caee:	46c0      	nop			; (mov r8, r8)
 801caf0:	46c0      	nop			; (mov r8, r8)
 801caf2:	46c0      	nop			; (mov r8, r8)
 801caf4:	46c0      	nop			; (mov r8, r8)
 801caf6:	46c0      	nop			; (mov r8, r8)
 801caf8:	46c0      	nop			; (mov r8, r8)
 801cafa:	46c0      	nop			; (mov r8, r8)
 801cafc:	46c0      	nop			; (mov r8, r8)
 801cafe:	46c0      	nop			; (mov r8, r8)
  __NOP();
  __NOP();


  // ENABLE ADC
  ADC1->ISR |= ADC_ISR_ADRDY; 					// clear ready flag
 801cb00:	4b43      	ldr	r3, [pc, #268]	; (801cc10 <__getAdcValue+0x1e8>)
 801cb02:	681a      	ldr	r2, [r3, #0]
 801cb04:	4b42      	ldr	r3, [pc, #264]	; (801cc10 <__getAdcValue+0x1e8>)
 801cb06:	2101      	movs	r1, #1
 801cb08:	430a      	orrs	r2, r1
 801cb0a:	601a      	str	r2, [r3, #0]
  ADC1->CR |= ADC_CR_ADEN; 						// enable ADC
 801cb0c:	4b40      	ldr	r3, [pc, #256]	; (801cc10 <__getAdcValue+0x1e8>)
 801cb0e:	689a      	ldr	r2, [r3, #8]
 801cb10:	4b3f      	ldr	r3, [pc, #252]	; (801cc10 <__getAdcValue+0x1e8>)
 801cb12:	2101      	movs	r1, #1
 801cb14:	430a      	orrs	r2, r1
 801cb16:	609a      	str	r2, [r3, #8]
  while ((ADC1->ISR & ADC_ISR_ADRDY) == 0);		// wait for ADC
 801cb18:	46c0      	nop			; (mov r8, r8)
 801cb1a:	4b3d      	ldr	r3, [pc, #244]	; (801cc10 <__getAdcValue+0x1e8>)
 801cb1c:	681b      	ldr	r3, [r3, #0]
 801cb1e:	2201      	movs	r2, #1
 801cb20:	4013      	ands	r3, r2
 801cb22:	d0fa      	beq.n	801cb1a <__getAdcValue+0xf2>


  // CONFIGURE ADC
  ADC1->CFGR1 &= ~ADC_CFGR1_EXTEN;				// software enabled conversion start
 801cb24:	4b3a      	ldr	r3, [pc, #232]	; (801cc10 <__getAdcValue+0x1e8>)
 801cb26:	68da      	ldr	r2, [r3, #12]
 801cb28:	4b39      	ldr	r3, [pc, #228]	; (801cc10 <__getAdcValue+0x1e8>)
 801cb2a:	493b      	ldr	r1, [pc, #236]	; (801cc18 <__getAdcValue+0x1f0>)
 801cb2c:	400a      	ands	r2, r1
 801cb2e:	60da      	str	r2, [r3, #12]
  ADC1->CFGR1 &= ~ADC_CFGR1_ALIGN;				// right alignment
 801cb30:	4b37      	ldr	r3, [pc, #220]	; (801cc10 <__getAdcValue+0x1e8>)
 801cb32:	68da      	ldr	r2, [r3, #12]
 801cb34:	4b36      	ldr	r3, [pc, #216]	; (801cc10 <__getAdcValue+0x1e8>)
 801cb36:	2120      	movs	r1, #32
 801cb38:	438a      	bics	r2, r1
 801cb3a:	60da      	str	r2, [r3, #12]
  ADC1->CFGR1 &= ~ADC_CFGR1_RES;				// 12 bit resolution
 801cb3c:	4b34      	ldr	r3, [pc, #208]	; (801cc10 <__getAdcValue+0x1e8>)
 801cb3e:	68da      	ldr	r2, [r3, #12]
 801cb40:	4b33      	ldr	r3, [pc, #204]	; (801cc10 <__getAdcValue+0x1e8>)
 801cb42:	2118      	movs	r1, #24
 801cb44:	438a      	bics	r2, r1
 801cb46:	60da      	str	r2, [r3, #12]
  ADC1->CHSELR = channel & ADC_CHANNEL_MASK; 	// Select channel (1 << channel number)
 801cb48:	4b31      	ldr	r3, [pc, #196]	; (801cc10 <__getAdcValue+0x1e8>)
 801cb4a:	687a      	ldr	r2, [r7, #4]
 801cb4c:	0352      	lsls	r2, r2, #13
 801cb4e:	0b52      	lsrs	r2, r2, #13
 801cb50:	629a      	str	r2, [r3, #40]	; 0x28
  ADC1->SMPR |= ADC_SMPR_SMP_0 | ADC_SMPR_SMP_1 | ADC_SMPR_SMP_2;
 801cb52:	4b2f      	ldr	r3, [pc, #188]	; (801cc10 <__getAdcValue+0x1e8>)
 801cb54:	695a      	ldr	r2, [r3, #20]
 801cb56:	4b2e      	ldr	r3, [pc, #184]	; (801cc10 <__getAdcValue+0x1e8>)
 801cb58:	2107      	movs	r1, #7
 801cb5a:	430a      	orrs	r2, r1
 801cb5c:	615a      	str	r2, [r3, #20]
  	  	  	  	  	  	  	  	  	  	  	  	// Select a sampling mode of 111 (very slow)

  // DO MUTIPLE READ & AVERAGE
  data = 0;
 801cb5e:	2300      	movs	r3, #0
 801cb60:	60fb      	str	r3, [r7, #12]
  for( i = 0; i < oversampling ; i++ )
 801cb62:	2300      	movs	r3, #0
 801cb64:	60bb      	str	r3, [r7, #8]
 801cb66:	e013      	b.n	801cb90 <__getAdcValue+0x168>
  {
    ADC1->CR |= ADC_CR_ADSTART; 				// start the ADC conversion
 801cb68:	4b29      	ldr	r3, [pc, #164]	; (801cc10 <__getAdcValue+0x1e8>)
 801cb6a:	689a      	ldr	r2, [r3, #8]
 801cb6c:	4b28      	ldr	r3, [pc, #160]	; (801cc10 <__getAdcValue+0x1e8>)
 801cb6e:	2104      	movs	r1, #4
 801cb70:	430a      	orrs	r2, r1
 801cb72:	609a      	str	r2, [r3, #8]
    while ((ADC1->ISR & ADC_ISR_EOC) == 0); 	// wait end of conversion
 801cb74:	46c0      	nop			; (mov r8, r8)
 801cb76:	4b26      	ldr	r3, [pc, #152]	; (801cc10 <__getAdcValue+0x1e8>)
 801cb78:	681b      	ldr	r3, [r3, #0]
 801cb7a:	2204      	movs	r2, #4
 801cb7c:	4013      	ands	r3, r2
 801cb7e:	d0fa      	beq.n	801cb76 <__getAdcValue+0x14e>
    data += ADC1->DR;							// get ADC result and clear the ISR_EOC flag
 801cb80:	4b23      	ldr	r3, [pc, #140]	; (801cc10 <__getAdcValue+0x1e8>)
 801cb82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801cb84:	68fa      	ldr	r2, [r7, #12]
 801cb86:	18d3      	adds	r3, r2, r3
 801cb88:	60fb      	str	r3, [r7, #12]
  for( i = 0; i < oversampling ; i++ )
 801cb8a:	68bb      	ldr	r3, [r7, #8]
 801cb8c:	3301      	adds	r3, #1
 801cb8e:	60bb      	str	r3, [r7, #8]
 801cb90:	1cfb      	adds	r3, r7, #3
 801cb92:	781b      	ldrb	r3, [r3, #0]
 801cb94:	68ba      	ldr	r2, [r7, #8]
 801cb96:	429a      	cmp	r2, r3
 801cb98:	d3e6      	bcc.n	801cb68 <__getAdcValue+0x140>
  }
  data = data / oversampling;
 801cb9a:	1cfb      	adds	r3, r7, #3
 801cb9c:	781b      	ldrb	r3, [r3, #0]
 801cb9e:	0019      	movs	r1, r3
 801cba0:	68f8      	ldr	r0, [r7, #12]
 801cba2:	f7e3 fab9 	bl	8000118 <__udivsi3>
 801cba6:	0003      	movs	r3, r0
 801cba8:	60fb      	str	r3, [r7, #12]

  // DISABLE ADC
  // at this point the end of sampling and end of sequence bits are also set in ISR registr
  if ( (ADC1->CR & ADC_CR_ADEN) != 0 )
 801cbaa:	4b19      	ldr	r3, [pc, #100]	; (801cc10 <__getAdcValue+0x1e8>)
 801cbac:	689b      	ldr	r3, [r3, #8]
 801cbae:	2201      	movs	r2, #1
 801cbb0:	4013      	ands	r3, r2
 801cbb2:	d00b      	beq.n	801cbcc <__getAdcValue+0x1a4>
  {
    ADC1->CR |= ADC_CR_ADDIS; 					// disable ADC... maybe better execute a reset
 801cbb4:	4b16      	ldr	r3, [pc, #88]	; (801cc10 <__getAdcValue+0x1e8>)
 801cbb6:	689a      	ldr	r2, [r3, #8]
 801cbb8:	4b15      	ldr	r3, [pc, #84]	; (801cc10 <__getAdcValue+0x1e8>)
 801cbba:	2102      	movs	r1, #2
 801cbbc:	430a      	orrs	r2, r1
 801cbbe:	609a      	str	r2, [r3, #8]
    while ((ADC1->CR & ADC_CR_ADEN) != 0); 		// wait for ADC disable, ADEN is also cleared
 801cbc0:	46c0      	nop			; (mov r8, r8)
 801cbc2:	4b13      	ldr	r3, [pc, #76]	; (801cc10 <__getAdcValue+0x1e8>)
 801cbc4:	689b      	ldr	r3, [r3, #8]
 801cbc6:	2201      	movs	r2, #1
 801cbc8:	4013      	ands	r3, r2
 801cbca:	d1fa      	bne.n	801cbc2 <__getAdcValue+0x19a>
  }

  // DISABLE OTHER PARTS, INCLUDING CLOCK
  ADC->CCR &= ~ADC_CCR_VREFEN; 					// disable VREFINT
 801cbcc:	4b11      	ldr	r3, [pc, #68]	; (801cc14 <__getAdcValue+0x1ec>)
 801cbce:	681a      	ldr	r2, [r3, #0]
 801cbd0:	4b10      	ldr	r3, [pc, #64]	; (801cc14 <__getAdcValue+0x1ec>)
 801cbd2:	4912      	ldr	r1, [pc, #72]	; (801cc1c <__getAdcValue+0x1f4>)
 801cbd4:	400a      	ands	r2, r1
 801cbd6:	601a      	str	r2, [r3, #0]
  ADC->CCR &= ~ADC_CCR_TSEN; 					// disable temperature sensor
 801cbd8:	4b0e      	ldr	r3, [pc, #56]	; (801cc14 <__getAdcValue+0x1ec>)
 801cbda:	681a      	ldr	r2, [r3, #0]
 801cbdc:	4b0d      	ldr	r3, [pc, #52]	; (801cc14 <__getAdcValue+0x1ec>)
 801cbde:	4910      	ldr	r1, [pc, #64]	; (801cc20 <__getAdcValue+0x1f8>)
 801cbe0:	400a      	ands	r2, r1
 801cbe2:	601a      	str	r2, [r3, #0]
  ADC1->CR &= ~ADC_CR_ADVREGEN;					// disable ADC voltage regulator
 801cbe4:	4b0a      	ldr	r3, [pc, #40]	; (801cc10 <__getAdcValue+0x1e8>)
 801cbe6:	689a      	ldr	r2, [r3, #8]
 801cbe8:	4b09      	ldr	r3, [pc, #36]	; (801cc10 <__getAdcValue+0x1e8>)
 801cbea:	490e      	ldr	r1, [pc, #56]	; (801cc24 <__getAdcValue+0x1fc>)
 801cbec:	400a      	ands	r2, r1
 801cbee:	609a      	str	r2, [r3, #8]
  RCC->APB2ENR &= ~RCC_APB2ENR_ADCEN;			// disable ADC clock
 801cbf0:	4b05      	ldr	r3, [pc, #20]	; (801cc08 <__getAdcValue+0x1e0>)
 801cbf2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801cbf4:	4b04      	ldr	r3, [pc, #16]	; (801cc08 <__getAdcValue+0x1e0>)
 801cbf6:	4905      	ldr	r1, [pc, #20]	; (801cc0c <__getAdcValue+0x1e4>)
 801cbf8:	400a      	ands	r2, r1
 801cbfa:	635a      	str	r2, [r3, #52]	; 0x34
  __ASM volatile ("cpsie i" : : : "memory");
 801cbfc:	b662      	cpsie	i

  __enable_irq();
  return data;
 801cbfe:	68fb      	ldr	r3, [r7, #12]
}
 801cc00:	0018      	movs	r0, r3
 801cc02:	46bd      	mov	sp, r7
 801cc04:	b004      	add	sp, #16
 801cc06:	bd80      	pop	{r7, pc}
 801cc08:	40021000 	.word	0x40021000
 801cc0c:	fffffdff 	.word	0xfffffdff
 801cc10:	40012400 	.word	0x40012400
 801cc14:	40012708 	.word	0x40012708
 801cc18:	fffff3ff 	.word	0xfffff3ff
 801cc1c:	ffbfffff 	.word	0xffbfffff
 801cc20:	ff7fffff 	.word	0xff7fffff
 801cc24:	efffffff 	.word	0xefffffff

0801cc28 <adc_getTemperature>:
/**
 * Return temperature from Adc the temp is in centi-degrés Celcius
 * Ensure to read Temperature at least 8ms after wake up ...
 * Time to get accurate getVdd response
 */
int16_t adc_getTemperature() {
 801cc28:	b5b0      	push	{r4, r5, r7, lr}
 801cc2a:	b084      	sub	sp, #16
 801cc2c:	af00      	add	r7, sp, #0

	uint16_t vdd = adc_getVdd();
 801cc2e:	240e      	movs	r4, #14
 801cc30:	0025      	movs	r5, r4
 801cc32:	193c      	adds	r4, r7, r4
 801cc34:	f000 f850 	bl	801ccd8 <adc_getVdd>
 801cc38:	0003      	movs	r3, r0
 801cc3a:	8023      	strh	r3, [r4, #0]
	uint32_t v = __getAdcValue(ADC_CHANNEL_TEMPSENSOR,ITSDK_ADC_OVERSAMPLING);
 801cc3c:	4b21      	ldr	r3, [pc, #132]	; (801ccc4 <adc_getTemperature+0x9c>)
 801cc3e:	2110      	movs	r1, #16
 801cc40:	0018      	movs	r0, r3
 801cc42:	f7ff fef1 	bl	801ca28 <__getAdcValue>
 801cc46:	0003      	movs	r3, r0
 801cc48:	60bb      	str	r3, [r7, #8]

	// adapt the calibration values to the current VDD reference
	uint16_t cal1_vdd = (*CAL1_VALUE * VDD_CALIB) / vdd;
 801cc4a:	4b1f      	ldr	r3, [pc, #124]	; (801ccc8 <adc_getTemperature+0xa0>)
 801cc4c:	881b      	ldrh	r3, [r3, #0]
 801cc4e:	001a      	movs	r2, r3
 801cc50:	4b1e      	ldr	r3, [pc, #120]	; (801cccc <adc_getTemperature+0xa4>)
 801cc52:	435a      	muls	r2, r3
 801cc54:	002c      	movs	r4, r5
 801cc56:	193b      	adds	r3, r7, r4
 801cc58:	881b      	ldrh	r3, [r3, #0]
 801cc5a:	0019      	movs	r1, r3
 801cc5c:	0010      	movs	r0, r2
 801cc5e:	f7e3 fae5 	bl	800022c <__divsi3>
 801cc62:	0003      	movs	r3, r0
 801cc64:	001a      	movs	r2, r3
 801cc66:	1dbb      	adds	r3, r7, #6
 801cc68:	801a      	strh	r2, [r3, #0]
	uint16_t cal2_vdd = (*CAL2_VALUE * VDD_CALIB) / vdd;
 801cc6a:	4b19      	ldr	r3, [pc, #100]	; (801ccd0 <adc_getTemperature+0xa8>)
 801cc6c:	881b      	ldrh	r3, [r3, #0]
 801cc6e:	001a      	movs	r2, r3
 801cc70:	4b16      	ldr	r3, [pc, #88]	; (801cccc <adc_getTemperature+0xa4>)
 801cc72:	435a      	muls	r2, r3
 801cc74:	193b      	adds	r3, r7, r4
 801cc76:	881b      	ldrh	r3, [r3, #0]
 801cc78:	0019      	movs	r1, r3
 801cc7a:	0010      	movs	r0, r2
 801cc7c:	f7e3 fad6 	bl	800022c <__divsi3>
 801cc80:	0003      	movs	r3, r0
 801cc82:	001a      	movs	r2, r3
 801cc84:	1d3b      	adds	r3, r7, #4
 801cc86:	801a      	strh	r2, [r3, #0]

	// convert in 0.01�C according to the calibration ref
	int32_t temperature = 100 * (CAL2_TEMP - CAL1_TEMP)*(v - cal1_vdd);
 801cc88:	1dbb      	adds	r3, r7, #6
 801cc8a:	881b      	ldrh	r3, [r3, #0]
 801cc8c:	68ba      	ldr	r2, [r7, #8]
 801cc8e:	1ad3      	subs	r3, r2, r3
 801cc90:	4a10      	ldr	r2, [pc, #64]	; (801ccd4 <adc_getTemperature+0xac>)
 801cc92:	4353      	muls	r3, r2
 801cc94:	603b      	str	r3, [r7, #0]
	temperature /= (cal2_vdd - cal1_vdd);
 801cc96:	1d3b      	adds	r3, r7, #4
 801cc98:	881a      	ldrh	r2, [r3, #0]
 801cc9a:	1dbb      	adds	r3, r7, #6
 801cc9c:	881b      	ldrh	r3, [r3, #0]
 801cc9e:	1ad3      	subs	r3, r2, r3
 801cca0:	0019      	movs	r1, r3
 801cca2:	6838      	ldr	r0, [r7, #0]
 801cca4:	f7e3 fac2 	bl	800022c <__divsi3>
 801cca8:	0003      	movs	r3, r0
 801ccaa:	603b      	str	r3, [r7, #0]
    temperature = temperature + (100*CAL1_TEMP);
 801ccac:	683b      	ldr	r3, [r7, #0]
 801ccae:	4a07      	ldr	r2, [pc, #28]	; (801cccc <adc_getTemperature+0xa4>)
 801ccb0:	4694      	mov	ip, r2
 801ccb2:	4463      	add	r3, ip
 801ccb4:	603b      	str	r3, [r7, #0]
    return (int16_t)temperature;
 801ccb6:	683b      	ldr	r3, [r7, #0]
 801ccb8:	b21b      	sxth	r3, r3

}
 801ccba:	0018      	movs	r0, r3
 801ccbc:	46bd      	mov	sp, r7
 801ccbe:	b004      	add	sp, #16
 801ccc0:	bdb0      	pop	{r4, r5, r7, pc}
 801ccc2:	46c0      	nop			; (mov r8, r8)
 801ccc4:	48040000 	.word	0x48040000
 801ccc8:	1ff8007a 	.word	0x1ff8007a
 801cccc:	00000bb8 	.word	0x00000bb8
 801ccd0:	1ff8007e 	.word	0x1ff8007e
 801ccd4:	00002710 	.word	0x00002710

0801ccd8 <adc_getVdd>:
 * Return VDD in mV ( internal VDD )
 * Be Careful -> right after wakeup from STOP the
 * value can be invalid (200mv error). The solution is to
 * sleep a bit (8ms recommanded) before sampling Vdd
 */
uint16_t adc_getVdd() {
 801ccd8:	b590      	push	{r4, r7, lr}
 801ccda:	b083      	sub	sp, #12
 801ccdc:	af00      	add	r7, sp, #0
	// The value measured is not good until we wait about 8ms after MCU wakeup from stop
	uint64_t t = ( itsdk_time_get_us() - itsdk_state.lastWakeUpTimeUs) / 1000;
 801ccde:	f7ff fd3b 	bl	801c758 <itsdk_time_get_us>
 801cce2:	000a      	movs	r2, r1
 801cce4:	0001      	movs	r1, r0
 801cce6:	4b13      	ldr	r3, [pc, #76]	; (801cd34 <adc_getVdd+0x5c>)
 801cce8:	68dc      	ldr	r4, [r3, #12]
 801ccea:	689b      	ldr	r3, [r3, #8]
 801ccec:	1ac9      	subs	r1, r1, r3
 801ccee:	41a2      	sbcs	r2, r4
 801ccf0:	0008      	movs	r0, r1
 801ccf2:	0011      	movs	r1, r2
 801ccf4:	22fa      	movs	r2, #250	; 0xfa
 801ccf6:	0092      	lsls	r2, r2, #2
 801ccf8:	2300      	movs	r3, #0
 801ccfa:	f7e3 fbe5 	bl	80004c8 <__aeabi_uldivmod>
 801ccfe:	0003      	movs	r3, r0
 801cd00:	000c      	movs	r4, r1
 801cd02:	603b      	str	r3, [r7, #0]
 801cd04:	607c      	str	r4, [r7, #4]
	if ( t < 8 ) {
 801cd06:	687b      	ldr	r3, [r7, #4]
 801cd08:	2b00      	cmp	r3, #0
 801cd0a:	d10b      	bne.n	801cd24 <adc_getVdd+0x4c>
 801cd0c:	687b      	ldr	r3, [r7, #4]
 801cd0e:	2b00      	cmp	r3, #0
 801cd10:	d102      	bne.n	801cd18 <adc_getVdd+0x40>
 801cd12:	683b      	ldr	r3, [r7, #0]
 801cd14:	2b07      	cmp	r3, #7
 801cd16:	d805      	bhi.n	801cd24 <adc_getVdd+0x4c>
		itsdk_delayMs(8 - t);
 801cd18:	683b      	ldr	r3, [r7, #0]
 801cd1a:	2208      	movs	r2, #8
 801cd1c:	1ad3      	subs	r3, r2, r3
 801cd1e:	0018      	movs	r0, r3
 801cd20:	f000 fd10 	bl	801d744 <itsdk_delayMs>
	}
	return adc_getValue(0);
 801cd24:	2000      	movs	r0, #0
 801cd26:	f000 f813 	bl	801cd50 <adc_getValue>
 801cd2a:	0003      	movs	r3, r0
}
 801cd2c:	0018      	movs	r0, r3
 801cd2e:	46bd      	mov	sp, r7
 801cd30:	b003      	add	sp, #12
 801cd32:	bd90      	pop	{r4, r7, pc}
 801cd34:	20001670 	.word	0x20001670

0801cd38 <adc_getVBat>:

/**
 * Return VBAT in mV - external VDD when a VBAT pin has been configured with a voltage divider by 2
 * Assuming VBAT have a /2 in front of the ADC
 */
uint16_t adc_getVBat() {
 801cd38:	b580      	push	{r7, lr}
 801cd3a:	af00      	add	r7, sp, #0
#if ITSDK_VBAT_ADC_PIN >= 0
	return adc_getValue(ITSDK_VBAT_ADC_PIN)*2;
 801cd3c:	2041      	movs	r0, #65	; 0x41
 801cd3e:	f000 f807 	bl	801cd50 <adc_getValue>
 801cd42:	0003      	movs	r3, r0
 801cd44:	18db      	adds	r3, r3, r3
 801cd46:	b29b      	uxth	r3, r3
#else
	return adc_getVdd();
#endif
}
 801cd48:	0018      	movs	r0, r3
 801cd4a:	46bd      	mov	sp, r7
 801cd4c:	bd80      	pop	{r7, pc}
	...

0801cd50 <adc_getValue>:
/**
 * Return ADC Value for an external PIN or internal
 * Get the pin number (hardware one)...
 * Pin 0 = internal VDD
 */
uint16_t adc_getValue(uint32_t pin) {
 801cd50:	b580      	push	{r7, lr}
 801cd52:	b08c      	sub	sp, #48	; 0x30
 801cd54:	af00      	add	r7, sp, #0
 801cd56:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef  GPIO_InitStruct;
	GPIO_TypeDef  	* GPIO_TypeDefStruct = GPIOA;
 801cd58:	23a0      	movs	r3, #160	; 0xa0
 801cd5a:	05db      	lsls	r3, r3, #23
 801cd5c:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 801cd5e:	2108      	movs	r1, #8
 801cd60:	187b      	adds	r3, r7, r1
 801cd62:	2203      	movs	r2, #3
 801cd64:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 801cd66:	187b      	adds	r3, r7, r1
 801cd68:	2200      	movs	r2, #0
 801cd6a:	609a      	str	r2, [r3, #8]
	uint32_t channel = 0;
 801cd6c:	2300      	movs	r3, #0
 801cd6e:	62bb      	str	r3, [r7, #40]	; 0x28
	default:
  	    ITSDK_ERROR_REPORT(ITSDK_ERROR_ADC_INVALID_PIN,(uint16_t)pin);
	}
#elif  ITSDK_DEVICE == __DEVICE_STM32L072XX
	// For the BGA device I consider the pin number as Line||Column 65 => line 6 Column 5
	switch (pin) {
 801cd70:	687b      	ldr	r3, [r7, #4]
 801cd72:	2b4d      	cmp	r3, #77	; 0x4d
 801cd74:	d900      	bls.n	801cd78 <adc_getValue+0x28>
 801cd76:	e085      	b.n	801ce84 <adc_getValue+0x134>
 801cd78:	687b      	ldr	r3, [r7, #4]
 801cd7a:	009a      	lsls	r2, r3, #2
 801cd7c:	4b5f      	ldr	r3, [pc, #380]	; (801cefc <adc_getValue+0x1ac>)
 801cd7e:	18d3      	adds	r3, r2, r3
 801cd80:	681b      	ldr	r3, [r3, #0]
 801cd82:	469f      	mov	pc, r3
	case 0:
		channel = ADC_CHANNEL_VREFINT; 	// VDD
 801cd84:	4b5e      	ldr	r3, [pc, #376]	; (801cf00 <adc_getValue+0x1b0>)
 801cd86:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 801cd88:	e083      	b.n	801ce92 <adc_getValue+0x142>
	case 55:
		GPIO_InitStruct.Pin = GPIO_PIN_0;
 801cd8a:	2308      	movs	r3, #8
 801cd8c:	18fb      	adds	r3, r7, r3
 801cd8e:	2201      	movs	r2, #1
 801cd90:	601a      	str	r2, [r3, #0]
		GPIO_TypeDefStruct = GPIOA;
 801cd92:	23a0      	movs	r3, #160	; 0xa0
 801cd94:	05db      	lsls	r3, r3, #23
 801cd96:	62fb      	str	r3, [r7, #44]	; 0x2c
		channel = ADC_CHANNEL_0;	// PA0
 801cd98:	2301      	movs	r3, #1
 801cd9a:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 801cd9c:	e079      	b.n	801ce92 <adc_getValue+0x142>
	case 54:
		GPIO_InitStruct.Pin = GPIO_PIN_1;
 801cd9e:	2308      	movs	r3, #8
 801cda0:	18fb      	adds	r3, r7, r3
 801cda2:	2202      	movs	r2, #2
 801cda4:	601a      	str	r2, [r3, #0]
		GPIO_TypeDefStruct = GPIOA;
 801cda6:	23a0      	movs	r3, #160	; 0xa0
 801cda8:	05db      	lsls	r3, r3, #23
 801cdaa:	62fb      	str	r3, [r7, #44]	; 0x2c
		channel = ADC_CHANNEL_1;	// PA1
 801cdac:	4b55      	ldr	r3, [pc, #340]	; (801cf04 <adc_getValue+0x1b4>)
 801cdae:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 801cdb0:	e06f      	b.n	801ce92 <adc_getValue+0x142>
	case 66:
		GPIO_InitStruct.Pin = GPIO_PIN_2;
 801cdb2:	2308      	movs	r3, #8
 801cdb4:	18fb      	adds	r3, r7, r3
 801cdb6:	2204      	movs	r2, #4
 801cdb8:	601a      	str	r2, [r3, #0]
		GPIO_TypeDefStruct = GPIOA;
 801cdba:	23a0      	movs	r3, #160	; 0xa0
 801cdbc:	05db      	lsls	r3, r3, #23
 801cdbe:	62fb      	str	r3, [r7, #44]	; 0x2c
		channel = ADC_CHANNEL_2;	// PA2
 801cdc0:	4b51      	ldr	r3, [pc, #324]	; (801cf08 <adc_getValue+0x1b8>)
 801cdc2:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 801cdc4:	e065      	b.n	801ce92 <adc_getValue+0x142>
	case 77:
		GPIO_InitStruct.Pin = GPIO_PIN_3;
 801cdc6:	2308      	movs	r3, #8
 801cdc8:	18fb      	adds	r3, r7, r3
 801cdca:	2208      	movs	r2, #8
 801cdcc:	601a      	str	r2, [r3, #0]
		GPIO_TypeDefStruct = GPIOA;
 801cdce:	23a0      	movs	r3, #160	; 0xa0
 801cdd0:	05db      	lsls	r3, r3, #23
 801cdd2:	62fb      	str	r3, [r7, #44]	; 0x2c
		channel = ADC_CHANNEL_3;	// PA3
 801cdd4:	4b4d      	ldr	r3, [pc, #308]	; (801cf0c <adc_getValue+0x1bc>)
 801cdd6:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 801cdd8:	e05b      	b.n	801ce92 <adc_getValue+0x142>
	case 65:
		GPIO_InitStruct.Pin = GPIO_PIN_4;
 801cdda:	2308      	movs	r3, #8
 801cddc:	18fb      	adds	r3, r7, r3
 801cdde:	2210      	movs	r2, #16
 801cde0:	601a      	str	r2, [r3, #0]
		GPIO_TypeDefStruct = GPIOA;
 801cde2:	23a0      	movs	r3, #160	; 0xa0
 801cde4:	05db      	lsls	r3, r3, #23
 801cde6:	62fb      	str	r3, [r7, #44]	; 0x2c
		channel = ADC_CHANNEL_4; 	// PA4
 801cde8:	4b49      	ldr	r3, [pc, #292]	; (801cf10 <adc_getValue+0x1c0>)
 801cdea:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 801cdec:	e051      	b.n	801ce92 <adc_getValue+0x142>
	case 76:
		GPIO_InitStruct.Pin = GPIO_PIN_5;
 801cdee:	2308      	movs	r3, #8
 801cdf0:	18fb      	adds	r3, r7, r3
 801cdf2:	2220      	movs	r2, #32
 801cdf4:	601a      	str	r2, [r3, #0]
		GPIO_TypeDefStruct = GPIOA;
 801cdf6:	23a0      	movs	r3, #160	; 0xa0
 801cdf8:	05db      	lsls	r3, r3, #23
 801cdfa:	62fb      	str	r3, [r7, #44]	; 0x2c
		channel = ADC_CHANNEL_5;	// PA5
 801cdfc:	4b45      	ldr	r3, [pc, #276]	; (801cf14 <adc_getValue+0x1c4>)
 801cdfe:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 801ce00:	e047      	b.n	801ce92 <adc_getValue+0x142>
	case 75:
		GPIO_InitStruct.Pin = GPIO_PIN_6;
 801ce02:	2308      	movs	r3, #8
 801ce04:	18fb      	adds	r3, r7, r3
 801ce06:	2240      	movs	r2, #64	; 0x40
 801ce08:	601a      	str	r2, [r3, #0]
		GPIO_TypeDefStruct = GPIOA;
 801ce0a:	23a0      	movs	r3, #160	; 0xa0
 801ce0c:	05db      	lsls	r3, r3, #23
 801ce0e:	62fb      	str	r3, [r7, #44]	; 0x2c
		channel = ADC_CHANNEL_6;	// PA6
 801ce10:	4b41      	ldr	r3, [pc, #260]	; (801cf18 <adc_getValue+0x1c8>)
 801ce12:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 801ce14:	e03d      	b.n	801ce92 <adc_getValue+0x142>
	case 64:
		GPIO_InitStruct.Pin = GPIO_PIN_7;
 801ce16:	2308      	movs	r3, #8
 801ce18:	18fb      	adds	r3, r7, r3
 801ce1a:	2280      	movs	r2, #128	; 0x80
 801ce1c:	601a      	str	r2, [r3, #0]
		GPIO_TypeDefStruct = GPIOA;
 801ce1e:	23a0      	movs	r3, #160	; 0xa0
 801ce20:	05db      	lsls	r3, r3, #23
 801ce22:	62fb      	str	r3, [r7, #44]	; 0x2c
		channel = ADC_CHANNEL_7;	// PA7
 801ce24:	4b3d      	ldr	r3, [pc, #244]	; (801cf1c <adc_getValue+0x1cc>)
 801ce26:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 801ce28:	e033      	b.n	801ce92 <adc_getValue+0x142>
	case 74:
		GPIO_InitStruct.Pin = GPIO_PIN_0;
 801ce2a:	2308      	movs	r3, #8
 801ce2c:	18fb      	adds	r3, r7, r3
 801ce2e:	2201      	movs	r2, #1
 801ce30:	601a      	str	r2, [r3, #0]
		GPIO_TypeDefStruct = GPIOB;
 801ce32:	4b3b      	ldr	r3, [pc, #236]	; (801cf20 <adc_getValue+0x1d0>)
 801ce34:	62fb      	str	r3, [r7, #44]	; 0x2c
		channel = ADC_CHANNEL_8;	// PB0
 801ce36:	4b3b      	ldr	r3, [pc, #236]	; (801cf24 <adc_getValue+0x1d4>)
 801ce38:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 801ce3a:	e02a      	b.n	801ce92 <adc_getValue+0x142>
	case 43:
		GPIO_InitStruct.Pin = GPIO_PIN_1;
 801ce3c:	2308      	movs	r3, #8
 801ce3e:	18fb      	adds	r3, r7, r3
 801ce40:	2202      	movs	r2, #2
 801ce42:	601a      	str	r2, [r3, #0]
		GPIO_TypeDefStruct = GPIOB;
 801ce44:	4b36      	ldr	r3, [pc, #216]	; (801cf20 <adc_getValue+0x1d0>)
 801ce46:	62fb      	str	r3, [r7, #44]	; 0x2c
		channel = ADC_CHANNEL_9;	// PB1
 801ce48:	4b37      	ldr	r3, [pc, #220]	; (801cf28 <adc_getValue+0x1d8>)
 801ce4a:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 801ce4c:	e021      	b.n	801ce92 <adc_getValue+0x142>
	case 35:
		GPIO_InitStruct.Pin = GPIO_PIN_0;
 801ce4e:	2308      	movs	r3, #8
 801ce50:	18fb      	adds	r3, r7, r3
 801ce52:	2201      	movs	r2, #1
 801ce54:	601a      	str	r2, [r3, #0]
		GPIO_TypeDefStruct = GPIOC;
 801ce56:	4b35      	ldr	r3, [pc, #212]	; (801cf2c <adc_getValue+0x1dc>)
 801ce58:	62fb      	str	r3, [r7, #44]	; 0x2c
		channel = ADC_CHANNEL_10;	// PC0
 801ce5a:	4b35      	ldr	r3, [pc, #212]	; (801cf30 <adc_getValue+0x1e0>)
 801ce5c:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 801ce5e:	e018      	b.n	801ce92 <adc_getValue+0x142>
	case 34:
		GPIO_InitStruct.Pin = GPIO_PIN_1;
 801ce60:	2308      	movs	r3, #8
 801ce62:	18fb      	adds	r3, r7, r3
 801ce64:	2202      	movs	r2, #2
 801ce66:	601a      	str	r2, [r3, #0]
		GPIO_TypeDefStruct = GPIOC;
 801ce68:	4b30      	ldr	r3, [pc, #192]	; (801cf2c <adc_getValue+0x1dc>)
 801ce6a:	62fb      	str	r3, [r7, #44]	; 0x2c
		channel = ADC_CHANNEL_11;	// PC1
 801ce6c:	4b31      	ldr	r3, [pc, #196]	; (801cf34 <adc_getValue+0x1e4>)
 801ce6e:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 801ce70:	e00f      	b.n	801ce92 <adc_getValue+0x142>
	case 57:
		GPIO_InitStruct.Pin = GPIO_PIN_2;
 801ce72:	2308      	movs	r3, #8
 801ce74:	18fb      	adds	r3, r7, r3
 801ce76:	2204      	movs	r2, #4
 801ce78:	601a      	str	r2, [r3, #0]
		GPIO_TypeDefStruct = GPIOC;
 801ce7a:	4b2c      	ldr	r3, [pc, #176]	; (801cf2c <adc_getValue+0x1dc>)
 801ce7c:	62fb      	str	r3, [r7, #44]	; 0x2c
		channel = ADC_CHANNEL_12;	// PC2
 801ce7e:	4b2e      	ldr	r3, [pc, #184]	; (801cf38 <adc_getValue+0x1e8>)
 801ce80:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 801ce82:	e006      	b.n	801ce92 <adc_getValue+0x142>

	default:
  	    ITSDK_ERROR_REPORT(ITSDK_ERROR_ADC_INVALID_PIN,(uint16_t)pin);
 801ce84:	687b      	ldr	r3, [r7, #4]
 801ce86:	b29b      	uxth	r3, r3
 801ce88:	4a2c      	ldr	r2, [pc, #176]	; (801cf3c <adc_getValue+0x1ec>)
 801ce8a:	0019      	movs	r1, r3
 801ce8c:	0010      	movs	r0, r2
 801ce8e:	f7fe fae9 	bl	801b464 <itsdk_error_report>
  	    ITSDK_ERROR_REPORT(ITSDK_ERROR_ADC_INVALID_PIN,(uint16_t)pin);
	}
#else
	#error DEVICE NOT DEFINED
#endif
	if(pin!= 0) {
 801ce92:	687b      	ldr	r3, [r7, #4]
 801ce94:	2b00      	cmp	r3, #0
 801ce96:	d006      	beq.n	801cea6 <adc_getValue+0x156>
		HAL_GPIO_Init(GPIO_TypeDefStruct, &GPIO_InitStruct);
 801ce98:	2308      	movs	r3, #8
 801ce9a:	18fa      	adds	r2, r7, r3
 801ce9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ce9e:	0011      	movs	r1, r2
 801cea0:	0018      	movs	r0, r3
 801cea2:	f7e7 fb87 	bl	80045b4 <HAL_GPIO_Init>
	}

	uint32_t v = __getAdcValue(channel,ITSDK_ADC_OVERSAMPLING);
 801cea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cea8:	2110      	movs	r1, #16
 801ceaa:	0018      	movs	r0, r3
 801ceac:	f7ff fdbc 	bl	801ca28 <__getAdcValue>
 801ceb0:	0003      	movs	r3, r0
 801ceb2:	627b      	str	r3, [r7, #36]	; 0x24
	if (pin == 0) {
 801ceb4:	687b      	ldr	r3, [r7, #4]
 801ceb6:	2b00      	cmp	r3, #0
 801ceb8:	d112      	bne.n	801cee0 <adc_getValue+0x190>
		if ( v == 0 ) return 0; // securing
 801ceba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cebc:	2b00      	cmp	r3, #0
 801cebe:	d101      	bne.n	801cec4 <adc_getValue+0x174>
 801cec0:	2300      	movs	r3, #0
 801cec2:	e017      	b.n	801cef4 <adc_getValue+0x1a4>
   	    int32_t vdd = ((int32_t)(*VREFINT_CAL) * VDD_CALIB) / v;
 801cec4:	4b1e      	ldr	r3, [pc, #120]	; (801cf40 <adc_getValue+0x1f0>)
 801cec6:	881b      	ldrh	r3, [r3, #0]
 801cec8:	001a      	movs	r2, r3
 801ceca:	4b1e      	ldr	r3, [pc, #120]	; (801cf44 <adc_getValue+0x1f4>)
 801cecc:	4353      	muls	r3, r2
 801cece:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801ced0:	0018      	movs	r0, r3
 801ced2:	f7e3 f921 	bl	8000118 <__udivsi3>
 801ced6:	0003      	movs	r3, r0
 801ced8:	61fb      	str	r3, [r7, #28]
	    return (uint16_t)vdd;
 801ceda:	69fb      	ldr	r3, [r7, #28]
 801cedc:	b29b      	uxth	r3, r3
 801cede:	e009      	b.n	801cef4 <adc_getValue+0x1a4>
	} else {
		int32_t vdd = ((uint32_t)adc_getVdd() * v )/4096;
 801cee0:	f7ff fefa 	bl	801ccd8 <adc_getVdd>
 801cee4:	0003      	movs	r3, r0
 801cee6:	001a      	movs	r2, r3
 801cee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ceea:	4353      	muls	r3, r2
 801ceec:	0b1b      	lsrs	r3, r3, #12
 801ceee:	623b      	str	r3, [r7, #32]
	    return (uint16_t)vdd;
 801cef0:	6a3b      	ldr	r3, [r7, #32]
 801cef2:	b29b      	uxth	r3, r3
	}

}
 801cef4:	0018      	movs	r0, r3
 801cef6:	46bd      	mov	sp, r7
 801cef8:	b00c      	add	sp, #48	; 0x30
 801cefa:	bd80      	pop	{r7, pc}
 801cefc:	08021324 	.word	0x08021324
 801cf00:	44020000 	.word	0x44020000
 801cf04:	04000002 	.word	0x04000002
 801cf08:	08000004 	.word	0x08000004
 801cf0c:	0c000008 	.word	0x0c000008
 801cf10:	10000010 	.word	0x10000010
 801cf14:	14000020 	.word	0x14000020
 801cf18:	18000040 	.word	0x18000040
 801cf1c:	1c000080 	.word	0x1c000080
 801cf20:	50000400 	.word	0x50000400
 801cf24:	20000100 	.word	0x20000100
 801cf28:	24000200 	.word	0x24000200
 801cf2c:	50000800 	.word	0x50000800
 801cf30:	28000400 	.word	0x28000400
 801cf34:	2c000800 	.word	0x2c000800
 801cf38:	30001000 	.word	0x30001000
 801cf3c:	d0000008 	.word	0xd0000008
 801cf40:	1ff80078 	.word	0x1ff80078
 801cf44:	00000bb8 	.word	0x00000bb8

0801cf48 <getPortFromBankId>:
#endif

/**
 * Convert the bankId used as a generic Id to the right GPIO structure
 */
GPIO_TypeDef * getPortFromBankId(uint8_t bankId) {
 801cf48:	b580      	push	{r7, lr}
 801cf4a:	b082      	sub	sp, #8
 801cf4c:	af00      	add	r7, sp, #0
 801cf4e:	0002      	movs	r2, r0
 801cf50:	1dfb      	adds	r3, r7, #7
 801cf52:	701a      	strb	r2, [r3, #0]
	switch ( bankId ) {
 801cf54:	1dfb      	adds	r3, r7, #7
 801cf56:	781b      	ldrb	r3, [r3, #0]
 801cf58:	2b07      	cmp	r3, #7
 801cf5a:	d811      	bhi.n	801cf80 <getPortFromBankId+0x38>
 801cf5c:	009a      	lsls	r2, r3, #2
 801cf5e:	4b0f      	ldr	r3, [pc, #60]	; (801cf9c <getPortFromBankId+0x54>)
 801cf60:	18d3      	adds	r3, r2, r3
 801cf62:	681b      	ldr	r3, [r3, #0]
 801cf64:	469f      	mov	pc, r3
	case __BANK_A: return GPIOA;
 801cf66:	23a0      	movs	r3, #160	; 0xa0
 801cf68:	05db      	lsls	r3, r3, #23
 801cf6a:	e012      	b.n	801cf92 <getPortFromBankId+0x4a>
	case __BANK_B: return GPIOB;
 801cf6c:	4b0c      	ldr	r3, [pc, #48]	; (801cfa0 <getPortFromBankId+0x58>)
 801cf6e:	e010      	b.n	801cf92 <getPortFromBankId+0x4a>
	case __BANK_C: return GPIOC;
 801cf70:	4b0c      	ldr	r3, [pc, #48]	; (801cfa4 <getPortFromBankId+0x5c>)
 801cf72:	e00e      	b.n	801cf92 <getPortFromBankId+0x4a>
#if ITSDK_DEVICE == __DEVICE_STM32L072XX || ITSDK_DEVICE == __DEVICE_STM32L053R8
	case __BANK_D: return GPIOD;
 801cf74:	4b0c      	ldr	r3, [pc, #48]	; (801cfa8 <getPortFromBankId+0x60>)
 801cf76:	e00c      	b.n	801cf92 <getPortFromBankId+0x4a>
#endif
#if ITSDK_DEVICE == __DEVICE_STM32L072XX
	case __BANK_E: return GPIOE;
 801cf78:	4b0c      	ldr	r3, [pc, #48]	; (801cfac <getPortFromBankId+0x64>)
 801cf7a:	e00a      	b.n	801cf92 <getPortFromBankId+0x4a>
#endif
#if ITSDK_DEVICE == __DEVICE_STM32L072XX
	case __BANK_H: return GPIOH;
 801cf7c:	4b0c      	ldr	r3, [pc, #48]	; (801cfb0 <getPortFromBankId+0x68>)
 801cf7e:	e008      	b.n	801cf92 <getPortFromBankId+0x4a>
#endif
	default:
		ITSDK_ERROR_REPORT(ITSDK_ERROR_GPIO_UNSUPPORTED_BANK,(uint16_t)bankId);
 801cf80:	1dfb      	adds	r3, r7, #7
 801cf82:	781b      	ldrb	r3, [r3, #0]
 801cf84:	b29b      	uxth	r3, r3
 801cf86:	4a0b      	ldr	r2, [pc, #44]	; (801cfb4 <getPortFromBankId+0x6c>)
 801cf88:	0019      	movs	r1, r3
 801cf8a:	0010      	movs	r0, r2
 801cf8c:	f7fe fa6a 	bl	801b464 <itsdk_error_report>
	}
	return NULL;
 801cf90:	2300      	movs	r3, #0
}
 801cf92:	0018      	movs	r0, r3
 801cf94:	46bd      	mov	sp, r7
 801cf96:	b002      	add	sp, #8
 801cf98:	bd80      	pop	{r7, pc}
 801cf9a:	46c0      	nop			; (mov r8, r8)
 801cf9c:	0802145c 	.word	0x0802145c
 801cfa0:	50000400 	.word	0x50000400
 801cfa4:	50000800 	.word	0x50000800
 801cfa8:	50000c00 	.word	0x50000c00
 801cfac:	50001000 	.word	0x50001000
 801cfb0:	50001c00 	.word	0x50001c00
 801cfb4:	d0000004 	.word	0xd0000004

0801cfb8 <getPinNumFromPinVector>:

/**
 * Convert the pin vector (every pin is corresponding to a single bit) to a pin number.
 * Internal
 */
uint8_t getPinNumFromPinVector(uint16_t pinId) {
 801cfb8:	b580      	push	{r7, lr}
 801cfba:	b084      	sub	sp, #16
 801cfbc:	af00      	add	r7, sp, #0
 801cfbe:	0002      	movs	r2, r0
 801cfc0:	1dbb      	adds	r3, r7, #6
 801cfc2:	801a      	strh	r2, [r3, #0]
	uint8_t pinPos=0;
 801cfc4:	230f      	movs	r3, #15
 801cfc6:	18fb      	adds	r3, r7, r3
 801cfc8:	2200      	movs	r2, #0
 801cfca:	701a      	strb	r2, [r3, #0]
	if ( ( pinId & 0xFF00 ) != 0) { pinPos |= 0x8; }
 801cfcc:	1dbb      	adds	r3, r7, #6
 801cfce:	881a      	ldrh	r2, [r3, #0]
 801cfd0:	23ff      	movs	r3, #255	; 0xff
 801cfd2:	021b      	lsls	r3, r3, #8
 801cfd4:	4013      	ands	r3, r2
 801cfd6:	d006      	beq.n	801cfe6 <getPinNumFromPinVector+0x2e>
 801cfd8:	220f      	movs	r2, #15
 801cfda:	18bb      	adds	r3, r7, r2
 801cfdc:	18ba      	adds	r2, r7, r2
 801cfde:	7812      	ldrb	r2, [r2, #0]
 801cfe0:	2108      	movs	r1, #8
 801cfe2:	430a      	orrs	r2, r1
 801cfe4:	701a      	strb	r2, [r3, #0]
	if ( ( pinId & 0xF0F0 ) != 0) { pinPos |= 0x4; }
 801cfe6:	1dbb      	adds	r3, r7, #6
 801cfe8:	881b      	ldrh	r3, [r3, #0]
 801cfea:	4a14      	ldr	r2, [pc, #80]	; (801d03c <getPinNumFromPinVector+0x84>)
 801cfec:	4013      	ands	r3, r2
 801cfee:	d006      	beq.n	801cffe <getPinNumFromPinVector+0x46>
 801cff0:	220f      	movs	r2, #15
 801cff2:	18bb      	adds	r3, r7, r2
 801cff4:	18ba      	adds	r2, r7, r2
 801cff6:	7812      	ldrb	r2, [r2, #0]
 801cff8:	2104      	movs	r1, #4
 801cffa:	430a      	orrs	r2, r1
 801cffc:	701a      	strb	r2, [r3, #0]
	if ( ( pinId & 0xCCCC ) != 0) { pinPos |= 0x2; }
 801cffe:	1dbb      	adds	r3, r7, #6
 801d000:	881b      	ldrh	r3, [r3, #0]
 801d002:	4a0f      	ldr	r2, [pc, #60]	; (801d040 <getPinNumFromPinVector+0x88>)
 801d004:	4013      	ands	r3, r2
 801d006:	d006      	beq.n	801d016 <getPinNumFromPinVector+0x5e>
 801d008:	220f      	movs	r2, #15
 801d00a:	18bb      	adds	r3, r7, r2
 801d00c:	18ba      	adds	r2, r7, r2
 801d00e:	7812      	ldrb	r2, [r2, #0]
 801d010:	2102      	movs	r1, #2
 801d012:	430a      	orrs	r2, r1
 801d014:	701a      	strb	r2, [r3, #0]
	if ( ( pinId & 0xAAAA ) != 0) { pinPos |= 0x1; }
 801d016:	1dbb      	adds	r3, r7, #6
 801d018:	881b      	ldrh	r3, [r3, #0]
 801d01a:	4a0a      	ldr	r2, [pc, #40]	; (801d044 <getPinNumFromPinVector+0x8c>)
 801d01c:	4013      	ands	r3, r2
 801d01e:	d006      	beq.n	801d02e <getPinNumFromPinVector+0x76>
 801d020:	220f      	movs	r2, #15
 801d022:	18bb      	adds	r3, r7, r2
 801d024:	18ba      	adds	r2, r7, r2
 801d026:	7812      	ldrb	r2, [r2, #0]
 801d028:	2101      	movs	r1, #1
 801d02a:	430a      	orrs	r2, r1
 801d02c:	701a      	strb	r2, [r3, #0]
	return pinPos;
 801d02e:	230f      	movs	r3, #15
 801d030:	18fb      	adds	r3, r7, r3
 801d032:	781b      	ldrb	r3, [r3, #0]
}
 801d034:	0018      	movs	r0, r3
 801d036:	46bd      	mov	sp, r7
 801d038:	b004      	add	sp, #16
 801d03a:	bd80      	pop	{r7, pc}
 801d03c:	0000f0f0 	.word	0x0000f0f0
 801d040:	0000cccc 	.word	0x0000cccc
 801d044:	0000aaaa 	.word	0x0000aaaa

0801d048 <getIrqFromBankPin>:

/**
 * Convert a GPIO bank/pin into the corresponding ExtI line
 */
IRQn_Type getIrqFromBankPin(uint8_t bankId, uint16_t id) {
 801d048:	b5b0      	push	{r4, r5, r7, lr}
 801d04a:	b084      	sub	sp, #16
 801d04c:	af00      	add	r7, sp, #0
 801d04e:	0002      	movs	r2, r0
 801d050:	1dfb      	adds	r3, r7, #7
 801d052:	701a      	strb	r2, [r3, #0]
 801d054:	1d3b      	adds	r3, r7, #4
 801d056:	1c0a      	adds	r2, r1, #0
 801d058:	801a      	strh	r2, [r3, #0]

	uint8_t pinPos = getPinNumFromPinVector(id);
 801d05a:	250f      	movs	r5, #15
 801d05c:	197c      	adds	r4, r7, r5
 801d05e:	1d3b      	adds	r3, r7, #4
 801d060:	881b      	ldrh	r3, [r3, #0]
 801d062:	0018      	movs	r0, r3
 801d064:	f7ff ffa8 	bl	801cfb8 <getPinNumFromPinVector>
 801d068:	0003      	movs	r3, r0
 801d06a:	7023      	strb	r3, [r4, #0]
	if ( pinPos <= 1 ) {
 801d06c:	197b      	adds	r3, r7, r5
 801d06e:	781b      	ldrb	r3, [r3, #0]
 801d070:	2b01      	cmp	r3, #1
 801d072:	d801      	bhi.n	801d078 <getIrqFromBankPin+0x30>
		return EXTI0_1_IRQn;
 801d074:	2305      	movs	r3, #5
 801d076:	e007      	b.n	801d088 <getIrqFromBankPin+0x40>
	} else if ( pinPos <= 3 ) {
 801d078:	230f      	movs	r3, #15
 801d07a:	18fb      	adds	r3, r7, r3
 801d07c:	781b      	ldrb	r3, [r3, #0]
 801d07e:	2b03      	cmp	r3, #3
 801d080:	d801      	bhi.n	801d086 <getIrqFromBankPin+0x3e>
		return EXTI2_3_IRQn;
 801d082:	2306      	movs	r3, #6
 801d084:	e000      	b.n	801d088 <getIrqFromBankPin+0x40>
	} else {
		return EXTI4_15_IRQn;
 801d086:	2307      	movs	r3, #7
	}
}
 801d088:	0018      	movs	r0, r3
 801d08a:	46bd      	mov	sp, r7
 801d08c:	b004      	add	sp, #16
 801d08e:	bdb0      	pop	{r4, r5, r7, pc}

0801d090 <gpio_configure>:


void gpio_configure(uint8_t bank, uint16_t id, itsdk_gpio_type_t type ) {
 801d090:	b590      	push	{r4, r7, lr}
 801d092:	b085      	sub	sp, #20
 801d094:	af02      	add	r7, sp, #8
 801d096:	0004      	movs	r4, r0
 801d098:	0008      	movs	r0, r1
 801d09a:	0011      	movs	r1, r2
 801d09c:	1dfb      	adds	r3, r7, #7
 801d09e:	1c22      	adds	r2, r4, #0
 801d0a0:	701a      	strb	r2, [r3, #0]
 801d0a2:	1d3b      	adds	r3, r7, #4
 801d0a4:	1c02      	adds	r2, r0, #0
 801d0a6:	801a      	strh	r2, [r3, #0]
 801d0a8:	1dbb      	adds	r3, r7, #6
 801d0aa:	1c0a      	adds	r2, r1, #0
 801d0ac:	701a      	strb	r2, [r3, #0]
	gpio_configure_ext(bank, id, type, ITSDK_GPIO_SPEED_LOW, ITSDK_GPIO_ALT_NONE );
 801d0ae:	1dbb      	adds	r3, r7, #6
 801d0b0:	781a      	ldrb	r2, [r3, #0]
 801d0b2:	1d3b      	adds	r3, r7, #4
 801d0b4:	8819      	ldrh	r1, [r3, #0]
 801d0b6:	1dfb      	adds	r3, r7, #7
 801d0b8:	7818      	ldrb	r0, [r3, #0]
 801d0ba:	2300      	movs	r3, #0
 801d0bc:	9300      	str	r3, [sp, #0]
 801d0be:	2300      	movs	r3, #0
 801d0c0:	f000 f804 	bl	801d0cc <gpio_configure_ext>
}
 801d0c4:	46c0      	nop			; (mov r8, r8)
 801d0c6:	46bd      	mov	sp, r7
 801d0c8:	b003      	add	sp, #12
 801d0ca:	bd90      	pop	{r4, r7, pc}

0801d0cc <gpio_configure_ext>:


void gpio_configure_ext(uint8_t bank, uint16_t id, itsdk_gpio_type_t type, itsdk_gpio_speed_t speed, itsdk_gpio_alternate_t alternate ) {
 801d0cc:	b5b0      	push	{r4, r5, r7, lr}
 801d0ce:	b08e      	sub	sp, #56	; 0x38
 801d0d0:	af00      	add	r7, sp, #0
 801d0d2:	0005      	movs	r5, r0
 801d0d4:	000c      	movs	r4, r1
 801d0d6:	0010      	movs	r0, r2
 801d0d8:	0019      	movs	r1, r3
 801d0da:	1dfb      	adds	r3, r7, #7
 801d0dc:	1c2a      	adds	r2, r5, #0
 801d0de:	701a      	strb	r2, [r3, #0]
 801d0e0:	1d3b      	adds	r3, r7, #4
 801d0e2:	1c22      	adds	r2, r4, #0
 801d0e4:	801a      	strh	r2, [r3, #0]
 801d0e6:	1dbb      	adds	r3, r7, #6
 801d0e8:	1c02      	adds	r2, r0, #0
 801d0ea:	701a      	strb	r2, [r3, #0]
 801d0ec:	1cfb      	adds	r3, r7, #3
 801d0ee:	1c0a      	adds	r2, r1, #0
 801d0f0:	701a      	strb	r2, [r3, #0]

	GPIO_InitTypeDef GPIO_InitStruct;

	switch ( bank ) {
 801d0f2:	1dfb      	adds	r3, r7, #7
 801d0f4:	781b      	ldrb	r3, [r3, #0]
 801d0f6:	2b07      	cmp	r3, #7
 801d0f8:	d852      	bhi.n	801d1a0 <gpio_configure_ext+0xd4>
 801d0fa:	009a      	lsls	r2, r3, #2
 801d0fc:	4bd0      	ldr	r3, [pc, #832]	; (801d440 <gpio_configure_ext+0x374>)
 801d0fe:	18d3      	adds	r3, r2, r3
 801d100:	681b      	ldr	r3, [r3, #0]
 801d102:	469f      	mov	pc, r3
	case __BANK_A:
		  __GPIOA_CLK_ENABLE();
 801d104:	4bcf      	ldr	r3, [pc, #828]	; (801d444 <gpio_configure_ext+0x378>)
 801d106:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801d108:	4bce      	ldr	r3, [pc, #824]	; (801d444 <gpio_configure_ext+0x378>)
 801d10a:	2101      	movs	r1, #1
 801d10c:	430a      	orrs	r2, r1
 801d10e:	62da      	str	r2, [r3, #44]	; 0x2c
 801d110:	4bcc      	ldr	r3, [pc, #816]	; (801d444 <gpio_configure_ext+0x378>)
 801d112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d114:	2201      	movs	r2, #1
 801d116:	4013      	ands	r3, r2
 801d118:	61fb      	str	r3, [r7, #28]
 801d11a:	69fb      	ldr	r3, [r7, #28]
		  break;
 801d11c:	e040      	b.n	801d1a0 <gpio_configure_ext+0xd4>
	case __BANK_B:
		  __GPIOB_CLK_ENABLE();
 801d11e:	4bc9      	ldr	r3, [pc, #804]	; (801d444 <gpio_configure_ext+0x378>)
 801d120:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801d122:	4bc8      	ldr	r3, [pc, #800]	; (801d444 <gpio_configure_ext+0x378>)
 801d124:	2102      	movs	r1, #2
 801d126:	430a      	orrs	r2, r1
 801d128:	62da      	str	r2, [r3, #44]	; 0x2c
 801d12a:	4bc6      	ldr	r3, [pc, #792]	; (801d444 <gpio_configure_ext+0x378>)
 801d12c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d12e:	2202      	movs	r2, #2
 801d130:	4013      	ands	r3, r2
 801d132:	61bb      	str	r3, [r7, #24]
 801d134:	69bb      	ldr	r3, [r7, #24]
		  break;
 801d136:	e033      	b.n	801d1a0 <gpio_configure_ext+0xd4>
	case __BANK_C:
		  __GPIOC_CLK_ENABLE();
 801d138:	4bc2      	ldr	r3, [pc, #776]	; (801d444 <gpio_configure_ext+0x378>)
 801d13a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801d13c:	4bc1      	ldr	r3, [pc, #772]	; (801d444 <gpio_configure_ext+0x378>)
 801d13e:	2104      	movs	r1, #4
 801d140:	430a      	orrs	r2, r1
 801d142:	62da      	str	r2, [r3, #44]	; 0x2c
 801d144:	4bbf      	ldr	r3, [pc, #764]	; (801d444 <gpio_configure_ext+0x378>)
 801d146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d148:	2204      	movs	r2, #4
 801d14a:	4013      	ands	r3, r2
 801d14c:	617b      	str	r3, [r7, #20]
 801d14e:	697b      	ldr	r3, [r7, #20]
		  break;
 801d150:	e026      	b.n	801d1a0 <gpio_configure_ext+0xd4>
    #if ITSDK_DEVICE == __DEVICE_STM32L072XX || ITSDK_DEVICE == __DEVICE_STM32L053R8
	case __BANK_D:
		  __GPIOD_CLK_ENABLE();
 801d152:	4bbc      	ldr	r3, [pc, #752]	; (801d444 <gpio_configure_ext+0x378>)
 801d154:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801d156:	4bbb      	ldr	r3, [pc, #748]	; (801d444 <gpio_configure_ext+0x378>)
 801d158:	2108      	movs	r1, #8
 801d15a:	430a      	orrs	r2, r1
 801d15c:	62da      	str	r2, [r3, #44]	; 0x2c
 801d15e:	4bb9      	ldr	r3, [pc, #740]	; (801d444 <gpio_configure_ext+0x378>)
 801d160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d162:	2208      	movs	r2, #8
 801d164:	4013      	ands	r3, r2
 801d166:	613b      	str	r3, [r7, #16]
 801d168:	693b      	ldr	r3, [r7, #16]
		  break;
 801d16a:	e019      	b.n	801d1a0 <gpio_configure_ext+0xd4>
	#endif
	#if ITSDK_DEVICE == __DEVICE_STM32L072XX
	case __BANK_E:
		  __GPIOE_CLK_ENABLE();
 801d16c:	4bb5      	ldr	r3, [pc, #724]	; (801d444 <gpio_configure_ext+0x378>)
 801d16e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801d170:	4bb4      	ldr	r3, [pc, #720]	; (801d444 <gpio_configure_ext+0x378>)
 801d172:	2110      	movs	r1, #16
 801d174:	430a      	orrs	r2, r1
 801d176:	62da      	str	r2, [r3, #44]	; 0x2c
 801d178:	4bb2      	ldr	r3, [pc, #712]	; (801d444 <gpio_configure_ext+0x378>)
 801d17a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d17c:	2210      	movs	r2, #16
 801d17e:	4013      	ands	r3, r2
 801d180:	60fb      	str	r3, [r7, #12]
 801d182:	68fb      	ldr	r3, [r7, #12]
		  break;
 801d184:	e00c      	b.n	801d1a0 <gpio_configure_ext+0xd4>
    #endif
	#if ITSDK_DEVICE == __DEVICE_STM32L072XX
	case __BANK_H:
		  __GPIOH_CLK_ENABLE();
 801d186:	4baf      	ldr	r3, [pc, #700]	; (801d444 <gpio_configure_ext+0x378>)
 801d188:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801d18a:	4bae      	ldr	r3, [pc, #696]	; (801d444 <gpio_configure_ext+0x378>)
 801d18c:	2180      	movs	r1, #128	; 0x80
 801d18e:	430a      	orrs	r2, r1
 801d190:	62da      	str	r2, [r3, #44]	; 0x2c
 801d192:	4bac      	ldr	r3, [pc, #688]	; (801d444 <gpio_configure_ext+0x378>)
 801d194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d196:	2280      	movs	r2, #128	; 0x80
 801d198:	4013      	ands	r3, r2
 801d19a:	60bb      	str	r3, [r7, #8]
 801d19c:	68bb      	ldr	r3, [r7, #8]
		  break;
 801d19e:	46c0      	nop			; (mov r8, r8)
	#endif
	}

	GPIO_InitStruct.Pin = id;
 801d1a0:	1d3b      	adds	r3, r7, #4
 801d1a2:	881a      	ldrh	r2, [r3, #0]
 801d1a4:	2320      	movs	r3, #32
 801d1a6:	18fb      	adds	r3, r7, r3
 801d1a8:	601a      	str	r2, [r3, #0]
	switch ( speed ) {
 801d1aa:	1cfb      	adds	r3, r7, #3
 801d1ac:	781b      	ldrb	r3, [r3, #0]
 801d1ae:	2b00      	cmp	r3, #0
 801d1b0:	d002      	beq.n	801d1b8 <gpio_configure_ext+0xec>
 801d1b2:	2b01      	cmp	r3, #1
 801d1b4:	d005      	beq.n	801d1c2 <gpio_configure_ext+0xf6>
 801d1b6:	e009      	b.n	801d1cc <gpio_configure_ext+0x100>
	case ITSDK_GPIO_SPEED_LOW:
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801d1b8:	2320      	movs	r3, #32
 801d1ba:	18fb      	adds	r3, r7, r3
 801d1bc:	2200      	movs	r2, #0
 801d1be:	60da      	str	r2, [r3, #12]
		break;
 801d1c0:	e004      	b.n	801d1cc <gpio_configure_ext+0x100>
	case ITSDK_GPIO_SPEED_HIGH:
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801d1c2:	2320      	movs	r3, #32
 801d1c4:	18fb      	adds	r3, r7, r3
 801d1c6:	2203      	movs	r2, #3
 801d1c8:	60da      	str	r2, [r3, #12]
		break;
 801d1ca:	46c0      	nop			; (mov r8, r8)

	}

	switch (type) {
 801d1cc:	1dbb      	adds	r3, r7, #6
 801d1ce:	781b      	ldrb	r3, [r3, #0]
 801d1d0:	2b13      	cmp	r3, #19
 801d1d2:	d900      	bls.n	801d1d6 <gpio_configure_ext+0x10a>
 801d1d4:	e0a4      	b.n	801d320 <gpio_configure_ext+0x254>
 801d1d6:	009a      	lsls	r2, r3, #2
 801d1d8:	4b9b      	ldr	r3, [pc, #620]	; (801d448 <gpio_configure_ext+0x37c>)
 801d1da:	18d3      	adds	r3, r2, r3
 801d1dc:	681b      	ldr	r3, [r3, #0]
 801d1de:	469f      	mov	pc, r3

	case GPIO_OUTPUT_PP:
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801d1e0:	2120      	movs	r1, #32
 801d1e2:	187b      	adds	r3, r7, r1
 801d1e4:	2201      	movs	r2, #1
 801d1e6:	605a      	str	r2, [r3, #4]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 801d1e8:	187b      	adds	r3, r7, r1
 801d1ea:	2200      	movs	r2, #0
 801d1ec:	609a      	str	r2, [r3, #8]
		break;
 801d1ee:	e097      	b.n	801d320 <gpio_configure_ext+0x254>

	case GPIO_OUTPUT_PULLUP:
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801d1f0:	2120      	movs	r1, #32
 801d1f2:	187b      	adds	r3, r7, r1
 801d1f4:	2201      	movs	r2, #1
 801d1f6:	605a      	str	r2, [r3, #4]
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 801d1f8:	187b      	adds	r3, r7, r1
 801d1fa:	2201      	movs	r2, #1
 801d1fc:	609a      	str	r2, [r3, #8]
		break;
 801d1fe:	e08f      	b.n	801d320 <gpio_configure_ext+0x254>

	case GPIO_OUTPUT_PULLDOWN:
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801d200:	2120      	movs	r1, #32
 801d202:	187b      	adds	r3, r7, r1
 801d204:	2201      	movs	r2, #1
 801d206:	605a      	str	r2, [r3, #4]
		GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 801d208:	187b      	adds	r3, r7, r1
 801d20a:	2202      	movs	r2, #2
 801d20c:	609a      	str	r2, [r3, #8]
		break;
 801d20e:	e087      	b.n	801d320 <gpio_configure_ext+0x254>

	case GPIO_OUTPUT_OD:
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 801d210:	2120      	movs	r1, #32
 801d212:	187b      	adds	r3, r7, r1
 801d214:	2211      	movs	r2, #17
 801d216:	605a      	str	r2, [r3, #4]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 801d218:	187b      	adds	r3, r7, r1
 801d21a:	2200      	movs	r2, #0
 801d21c:	609a      	str	r2, [r3, #8]
		break;
 801d21e:	e07f      	b.n	801d320 <gpio_configure_ext+0x254>

	case GPIO_INPUT:
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801d220:	2120      	movs	r1, #32
 801d222:	187b      	adds	r3, r7, r1
 801d224:	2200      	movs	r2, #0
 801d226:	605a      	str	r2, [r3, #4]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 801d228:	187b      	adds	r3, r7, r1
 801d22a:	2200      	movs	r2, #0
 801d22c:	609a      	str	r2, [r3, #8]
		break;
 801d22e:	e077      	b.n	801d320 <gpio_configure_ext+0x254>

	case GPIO_INPUT_PULLUP:
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801d230:	2120      	movs	r1, #32
 801d232:	187b      	adds	r3, r7, r1
 801d234:	2200      	movs	r2, #0
 801d236:	605a      	str	r2, [r3, #4]
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 801d238:	187b      	adds	r3, r7, r1
 801d23a:	2201      	movs	r2, #1
 801d23c:	609a      	str	r2, [r3, #8]
		break;
 801d23e:	e06f      	b.n	801d320 <gpio_configure_ext+0x254>

	case GPIO_INPUT_PULLDOWN:
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801d240:	2120      	movs	r1, #32
 801d242:	187b      	adds	r3, r7, r1
 801d244:	2200      	movs	r2, #0
 801d246:	605a      	str	r2, [r3, #4]
		GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 801d248:	187b      	adds	r3, r7, r1
 801d24a:	2202      	movs	r2, #2
 801d24c:	609a      	str	r2, [r3, #8]
		break;
 801d24e:	e067      	b.n	801d320 <gpio_configure_ext+0x254>

	case GPIO_INTERRUPT_RISING:
	    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 801d250:	2120      	movs	r1, #32
 801d252:	187b      	adds	r3, r7, r1
 801d254:	4a7d      	ldr	r2, [pc, #500]	; (801d44c <gpio_configure_ext+0x380>)
 801d256:	605a      	str	r2, [r3, #4]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801d258:	187b      	adds	r3, r7, r1
 801d25a:	2200      	movs	r2, #0
 801d25c:	609a      	str	r2, [r3, #8]
		break;
 801d25e:	e05f      	b.n	801d320 <gpio_configure_ext+0x254>

	case GPIO_INTERRUPT_RISING_PULLDWN:
	    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 801d260:	2120      	movs	r1, #32
 801d262:	187b      	adds	r3, r7, r1
 801d264:	4a79      	ldr	r2, [pc, #484]	; (801d44c <gpio_configure_ext+0x380>)
 801d266:	605a      	str	r2, [r3, #4]
	    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 801d268:	187b      	adds	r3, r7, r1
 801d26a:	2202      	movs	r2, #2
 801d26c:	609a      	str	r2, [r3, #8]
		break;
 801d26e:	e057      	b.n	801d320 <gpio_configure_ext+0x254>

	case GPIO_INTERRUPT_RISING_PULLUP:
	    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 801d270:	2120      	movs	r1, #32
 801d272:	187b      	adds	r3, r7, r1
 801d274:	4a75      	ldr	r2, [pc, #468]	; (801d44c <gpio_configure_ext+0x380>)
 801d276:	605a      	str	r2, [r3, #4]
	    GPIO_InitStruct.Pull = GPIO_PULLUP;
 801d278:	187b      	adds	r3, r7, r1
 801d27a:	2201      	movs	r2, #1
 801d27c:	609a      	str	r2, [r3, #8]
		break;
 801d27e:	e04f      	b.n	801d320 <gpio_configure_ext+0x254>

	case GPIO_INTERRUPT_FALLING:
	    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 801d280:	2120      	movs	r1, #32
 801d282:	187b      	adds	r3, r7, r1
 801d284:	4a72      	ldr	r2, [pc, #456]	; (801d450 <gpio_configure_ext+0x384>)
 801d286:	605a      	str	r2, [r3, #4]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801d288:	187b      	adds	r3, r7, r1
 801d28a:	2200      	movs	r2, #0
 801d28c:	609a      	str	r2, [r3, #8]
		break;
 801d28e:	e047      	b.n	801d320 <gpio_configure_ext+0x254>

	case GPIO_INTERRUPT_FALLING_PULLUP:
	    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 801d290:	2120      	movs	r1, #32
 801d292:	187b      	adds	r3, r7, r1
 801d294:	4a6e      	ldr	r2, [pc, #440]	; (801d450 <gpio_configure_ext+0x384>)
 801d296:	605a      	str	r2, [r3, #4]
	    GPIO_InitStruct.Pull = GPIO_PULLUP;
 801d298:	187b      	adds	r3, r7, r1
 801d29a:	2201      	movs	r2, #1
 801d29c:	609a      	str	r2, [r3, #8]
		break;
 801d29e:	e03f      	b.n	801d320 <gpio_configure_ext+0x254>

	case GPIO_INTERRUPT_FALLING_PULLDWN:
	    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 801d2a0:	2120      	movs	r1, #32
 801d2a2:	187b      	adds	r3, r7, r1
 801d2a4:	4a6a      	ldr	r2, [pc, #424]	; (801d450 <gpio_configure_ext+0x384>)
 801d2a6:	605a      	str	r2, [r3, #4]
	    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 801d2a8:	187b      	adds	r3, r7, r1
 801d2aa:	2202      	movs	r2, #2
 801d2ac:	609a      	str	r2, [r3, #8]
		break;
 801d2ae:	e037      	b.n	801d320 <gpio_configure_ext+0x254>

	case GPIO_INTERRUPT_ANY:
	    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 801d2b0:	2120      	movs	r1, #32
 801d2b2:	187b      	adds	r3, r7, r1
 801d2b4:	4a67      	ldr	r2, [pc, #412]	; (801d454 <gpio_configure_ext+0x388>)
 801d2b6:	605a      	str	r2, [r3, #4]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801d2b8:	187b      	adds	r3, r7, r1
 801d2ba:	2200      	movs	r2, #0
 801d2bc:	609a      	str	r2, [r3, #8]
		break;
 801d2be:	e02f      	b.n	801d320 <gpio_configure_ext+0x254>

	case GPIO_ANALOG:
	    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 801d2c0:	2120      	movs	r1, #32
 801d2c2:	187b      	adds	r3, r7, r1
 801d2c4:	2203      	movs	r2, #3
 801d2c6:	605a      	str	r2, [r3, #4]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801d2c8:	187b      	adds	r3, r7, r1
 801d2ca:	2200      	movs	r2, #0
 801d2cc:	609a      	str	r2, [r3, #8]
		break;
 801d2ce:	e027      	b.n	801d320 <gpio_configure_ext+0x254>

	case GPIO_OFF:
	    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 801d2d0:	2120      	movs	r1, #32
 801d2d2:	187b      	adds	r3, r7, r1
 801d2d4:	2203      	movs	r2, #3
 801d2d6:	605a      	str	r2, [r3, #4]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801d2d8:	187b      	adds	r3, r7, r1
 801d2da:	2200      	movs	r2, #0
 801d2dc:	609a      	str	r2, [r3, #8]
		break;
 801d2de:	e01f      	b.n	801d320 <gpio_configure_ext+0x254>

	case GPIO_ALTERNATE_PP_NOPULL:
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801d2e0:	2120      	movs	r1, #32
 801d2e2:	187b      	adds	r3, r7, r1
 801d2e4:	2202      	movs	r2, #2
 801d2e6:	605a      	str	r2, [r3, #4]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801d2e8:	187b      	adds	r3, r7, r1
 801d2ea:	2200      	movs	r2, #0
 801d2ec:	609a      	str	r2, [r3, #8]
	    break;
 801d2ee:	e017      	b.n	801d320 <gpio_configure_ext+0x254>

	case GPIO_ALTERNATE_PP_PULLUP:
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801d2f0:	2120      	movs	r1, #32
 801d2f2:	187b      	adds	r3, r7, r1
 801d2f4:	2202      	movs	r2, #2
 801d2f6:	605a      	str	r2, [r3, #4]
	    GPIO_InitStruct.Pull = GPIO_PULLUP;
 801d2f8:	187b      	adds	r3, r7, r1
 801d2fa:	2201      	movs	r2, #1
 801d2fc:	609a      	str	r2, [r3, #8]
	    break;
 801d2fe:	e00f      	b.n	801d320 <gpio_configure_ext+0x254>

	case GPIO_ALTERNATE_PP_PULLDOWN:
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801d300:	2120      	movs	r1, #32
 801d302:	187b      	adds	r3, r7, r1
 801d304:	2202      	movs	r2, #2
 801d306:	605a      	str	r2, [r3, #4]
	    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 801d308:	187b      	adds	r3, r7, r1
 801d30a:	2202      	movs	r2, #2
 801d30c:	609a      	str	r2, [r3, #8]
	    break;
 801d30e:	e007      	b.n	801d320 <gpio_configure_ext+0x254>

	case GPIO_ALTERNATE_OPENDRAIN:
		GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 801d310:	2120      	movs	r1, #32
 801d312:	187b      	adds	r3, r7, r1
 801d314:	2212      	movs	r2, #18
 801d316:	605a      	str	r2, [r3, #4]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801d318:	187b      	adds	r3, r7, r1
 801d31a:	2200      	movs	r2, #0
 801d31c:	609a      	str	r2, [r3, #8]
	    break;
 801d31e:	46c0      	nop			; (mov r8, r8)

	}
	int err=0;
 801d320:	2300      	movs	r3, #0
 801d322:	637b      	str	r3, [r7, #52]	; 0x34
	switch (type) {
 801d324:	1dbb      	adds	r3, r7, #6
 801d326:	781b      	ldrb	r3, [r3, #0]
 801d328:	3b10      	subs	r3, #16
 801d32a:	2b03      	cmp	r3, #3
 801d32c:	d900      	bls.n	801d330 <gpio_configure_ext+0x264>
 801d32e:	e0a1      	b.n	801d474 <gpio_configure_ext+0x3a8>
	case GPIO_ALTERNATE_PP_NOPULL:
	case GPIO_ALTERNATE_PP_PULLUP:
	case GPIO_ALTERNATE_PP_PULLDOWN:
	case GPIO_ALTERNATE_OPENDRAIN:
		switch (alternate) {
 801d330:	2348      	movs	r3, #72	; 0x48
 801d332:	18fb      	adds	r3, r7, r3
 801d334:	781b      	ldrb	r3, [r3, #0]
 801d336:	2b06      	cmp	r3, #6
 801d338:	d900      	bls.n	801d33c <gpio_configure_ext+0x270>
 801d33a:	e092      	b.n	801d462 <gpio_configure_ext+0x396>
 801d33c:	009a      	lsls	r2, r3, #2
 801d33e:	4b46      	ldr	r3, [pc, #280]	; (801d458 <gpio_configure_ext+0x38c>)
 801d340:	18d3      	adds	r3, r2, r3
 801d342:	681b      	ldr	r3, [r3, #0]
 801d344:	469f      	mov	pc, r3
		case ITSDK_GPIO_ALT_TIMER2_TR:
		#if ITSDK_DEVICE == __DEVICE_STM32L072XX ||  ITSDK_DEVICE == __DEVICE_STM32L052T8
			if ( bank == __BANK_A && id == __LP_GPIO_15 ) GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 801d346:	1dfb      	adds	r3, r7, #7
 801d348:	781b      	ldrb	r3, [r3, #0]
 801d34a:	2b00      	cmp	r3, #0
 801d34c:	d10a      	bne.n	801d364 <gpio_configure_ext+0x298>
 801d34e:	1d3b      	adds	r3, r7, #4
 801d350:	881a      	ldrh	r2, [r3, #0]
 801d352:	2380      	movs	r3, #128	; 0x80
 801d354:	021b      	lsls	r3, r3, #8
 801d356:	429a      	cmp	r2, r3
 801d358:	d104      	bne.n	801d364 <gpio_configure_ext+0x298>
 801d35a:	2320      	movs	r3, #32
 801d35c:	18fb      	adds	r3, r7, r3
 801d35e:	2202      	movs	r2, #2
 801d360:	611a      	str	r2, [r3, #16]
 801d362:	e01c      	b.n	801d39e <gpio_configure_ext+0x2d2>
			else if ( bank == __BANK_A && id == __LP_GPIO_5 ) GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 801d364:	1dfb      	adds	r3, r7, #7
 801d366:	781b      	ldrb	r3, [r3, #0]
 801d368:	2b00      	cmp	r3, #0
 801d36a:	d108      	bne.n	801d37e <gpio_configure_ext+0x2b2>
 801d36c:	1d3b      	adds	r3, r7, #4
 801d36e:	881b      	ldrh	r3, [r3, #0]
 801d370:	2b20      	cmp	r3, #32
 801d372:	d104      	bne.n	801d37e <gpio_configure_ext+0x2b2>
 801d374:	2320      	movs	r3, #32
 801d376:	18fb      	adds	r3, r7, r3
 801d378:	2202      	movs	r2, #2
 801d37a:	611a      	str	r2, [r3, #16]
 801d37c:	e00f      	b.n	801d39e <gpio_configure_ext+0x2d2>
			else if ( bank == __BANK_A && id == __LP_GPIO_0 ) GPIO_InitStruct.Alternate = GPIO_AF5_TIM2;
 801d37e:	1dfb      	adds	r3, r7, #7
 801d380:	781b      	ldrb	r3, [r3, #0]
 801d382:	2b00      	cmp	r3, #0
 801d384:	d108      	bne.n	801d398 <gpio_configure_ext+0x2cc>
 801d386:	1d3b      	adds	r3, r7, #4
 801d388:	881b      	ldrh	r3, [r3, #0]
 801d38a:	2b01      	cmp	r3, #1
 801d38c:	d104      	bne.n	801d398 <gpio_configure_ext+0x2cc>
 801d38e:	2320      	movs	r3, #32
 801d390:	18fb      	adds	r3, r7, r3
 801d392:	2205      	movs	r2, #5
 801d394:	611a      	str	r2, [r3, #16]
 801d396:	e002      	b.n	801d39e <gpio_configure_ext+0x2d2>
			else err=1;
 801d398:	2301      	movs	r3, #1
 801d39a:	637b      	str	r3, [r7, #52]	; 0x34
		#else
		  #warning This device will not accept alternate GPIO configuration: code is missing
		#endif
			break;
 801d39c:	e062      	b.n	801d464 <gpio_configure_ext+0x398>
 801d39e:	e061      	b.n	801d464 <gpio_configure_ext+0x398>
		case ITSDK_GPIO_ALT_TIMER2_C1:
		#if ITSDK_DEVICE == __DEVICE_STM32L072XX ||  ITSDK_DEVICE == __DEVICE_STM32L052T8
			if ( bank == __BANK_A && id == __LP_GPIO_15 ) GPIO_InitStruct.Alternate = GPIO_AF5_TIM2;
 801d3a0:	1dfb      	adds	r3, r7, #7
 801d3a2:	781b      	ldrb	r3, [r3, #0]
 801d3a4:	2b00      	cmp	r3, #0
 801d3a6:	d10a      	bne.n	801d3be <gpio_configure_ext+0x2f2>
 801d3a8:	1d3b      	adds	r3, r7, #4
 801d3aa:	881a      	ldrh	r2, [r3, #0]
 801d3ac:	2380      	movs	r3, #128	; 0x80
 801d3ae:	021b      	lsls	r3, r3, #8
 801d3b0:	429a      	cmp	r2, r3
 801d3b2:	d104      	bne.n	801d3be <gpio_configure_ext+0x2f2>
 801d3b4:	2320      	movs	r3, #32
 801d3b6:	18fb      	adds	r3, r7, r3
 801d3b8:	2205      	movs	r2, #5
 801d3ba:	611a      	str	r2, [r3, #16]
 801d3bc:	e01c      	b.n	801d3f8 <gpio_configure_ext+0x32c>
			else if ( bank == __BANK_A && id == __LP_GPIO_5 ) GPIO_InitStruct.Alternate = GPIO_AF5_TIM2;
 801d3be:	1dfb      	adds	r3, r7, #7
 801d3c0:	781b      	ldrb	r3, [r3, #0]
 801d3c2:	2b00      	cmp	r3, #0
 801d3c4:	d108      	bne.n	801d3d8 <gpio_configure_ext+0x30c>
 801d3c6:	1d3b      	adds	r3, r7, #4
 801d3c8:	881b      	ldrh	r3, [r3, #0]
 801d3ca:	2b20      	cmp	r3, #32
 801d3cc:	d104      	bne.n	801d3d8 <gpio_configure_ext+0x30c>
 801d3ce:	2320      	movs	r3, #32
 801d3d0:	18fb      	adds	r3, r7, r3
 801d3d2:	2205      	movs	r2, #5
 801d3d4:	611a      	str	r2, [r3, #16]
 801d3d6:	e00f      	b.n	801d3f8 <gpio_configure_ext+0x32c>
			else if ( bank == __BANK_A && id == __LP_GPIO_0 ) GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 801d3d8:	1dfb      	adds	r3, r7, #7
 801d3da:	781b      	ldrb	r3, [r3, #0]
 801d3dc:	2b00      	cmp	r3, #0
 801d3de:	d108      	bne.n	801d3f2 <gpio_configure_ext+0x326>
 801d3e0:	1d3b      	adds	r3, r7, #4
 801d3e2:	881b      	ldrh	r3, [r3, #0]
 801d3e4:	2b01      	cmp	r3, #1
 801d3e6:	d104      	bne.n	801d3f2 <gpio_configure_ext+0x326>
 801d3e8:	2320      	movs	r3, #32
 801d3ea:	18fb      	adds	r3, r7, r3
 801d3ec:	2202      	movs	r2, #2
 801d3ee:	611a      	str	r2, [r3, #16]
 801d3f0:	e002      	b.n	801d3f8 <gpio_configure_ext+0x32c>
			else err=1;
 801d3f2:	2301      	movs	r3, #1
 801d3f4:	637b      	str	r3, [r7, #52]	; 0x34
		#endif
			break;
 801d3f6:	e035      	b.n	801d464 <gpio_configure_ext+0x398>
 801d3f8:	e034      	b.n	801d464 <gpio_configure_ext+0x398>
		case ITSDK_GPIO_ALT_SPI1_SCLK:
			#if ITSDK_DEVICE == __DEVICE_STM32L072XX
				if ( bank == __BANK_A && id == __LP_GPIO_5 ) GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 801d3fa:	1dfb      	adds	r3, r7, #7
 801d3fc:	781b      	ldrb	r3, [r3, #0]
 801d3fe:	2b00      	cmp	r3, #0
 801d400:	d108      	bne.n	801d414 <gpio_configure_ext+0x348>
 801d402:	1d3b      	adds	r3, r7, #4
 801d404:	881b      	ldrh	r3, [r3, #0]
 801d406:	2b20      	cmp	r3, #32
 801d408:	d104      	bne.n	801d414 <gpio_configure_ext+0x348>
 801d40a:	2320      	movs	r3, #32
 801d40c:	18fb      	adds	r3, r7, r3
 801d40e:	2200      	movs	r2, #0
 801d410:	611a      	str	r2, [r3, #16]
			#elif ITSDK_DEVICE == __DEVICE_STM32L052T8
				if ( bank == __BANK_A && id == __LP_GPIO_5 ) GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
				else if ( bank == __BANK_B && id == __LP_GPIO_3 ) GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
				else err=1;
			#endif
			break;
 801d412:	e027      	b.n	801d464 <gpio_configure_ext+0x398>
				else err=1;
 801d414:	2301      	movs	r3, #1
 801d416:	637b      	str	r3, [r7, #52]	; 0x34
			break;
 801d418:	e024      	b.n	801d464 <gpio_configure_ext+0x398>
		case ITSDK_GPIO_ALT_SPI1_MOSI:
			#if ITSDK_DEVICE == __DEVICE_STM32L072XX
				if ( bank == __BANK_B && id == __LP_GPIO_5 ) GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 801d41a:	1dfb      	adds	r3, r7, #7
 801d41c:	781b      	ldrb	r3, [r3, #0]
 801d41e:	2b01      	cmp	r3, #1
 801d420:	d108      	bne.n	801d434 <gpio_configure_ext+0x368>
 801d422:	1d3b      	adds	r3, r7, #4
 801d424:	881b      	ldrh	r3, [r3, #0]
 801d426:	2b20      	cmp	r3, #32
 801d428:	d104      	bne.n	801d434 <gpio_configure_ext+0x368>
 801d42a:	2320      	movs	r3, #32
 801d42c:	18fb      	adds	r3, r7, r3
 801d42e:	2200      	movs	r2, #0
 801d430:	611a      	str	r2, [r3, #16]
				if ( bank == __BANK_A && id == __LP_GPIO_7 ) GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
				else if ( bank == __BANK_A && id == __LP_GPIO_12 ) GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
				else if ( bank == __BANK_B && id == __LP_GPIO_5 ) GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
				else err=1;
			#endif
			break;
 801d432:	e017      	b.n	801d464 <gpio_configure_ext+0x398>
				else err=1;
 801d434:	2301      	movs	r3, #1
 801d436:	637b      	str	r3, [r7, #52]	; 0x34
			break;
 801d438:	e014      	b.n	801d464 <gpio_configure_ext+0x398>
		case ITSDK_GPIO_ALT_SPI1_MISO:
			#if ITSDK_DEVICE == __DEVICE_STM32L072XX
				err=1;
 801d43a:	2301      	movs	r3, #1
 801d43c:	637b      	str	r3, [r7, #52]	; 0x34
				if ( bank == __BANK_A && id == __LP_GPIO_11 ) GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
				else if( bank == __BANK_A && id == __LP_GPIO_6 ) GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
				else if( bank == __BANK_B && id == __LP_GPIO_4 ) GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
				else err=1;
			#endif
			break;
 801d43e:	e011      	b.n	801d464 <gpio_configure_ext+0x398>
 801d440:	0802147c 	.word	0x0802147c
 801d444:	40021000 	.word	0x40021000
 801d448:	0802149c 	.word	0x0802149c
 801d44c:	10110000 	.word	0x10110000
 801d450:	10210000 	.word	0x10210000
 801d454:	10310000 	.word	0x10310000
 801d458:	080214ec 	.word	0x080214ec
		case ITSDK_GPIO_ALT_SPI1_NSS:
			#if ITSDK_DEVICE == __DEVICE_STM32L072XX
				err=1;
 801d45c:	2301      	movs	r3, #1
 801d45e:	637b      	str	r3, [r7, #52]	; 0x34
			#elif ITSDK_DEVICE == __DEVICE_STM32L052T8
				if ( bank == __BANK_A && id == __LP_GPIO_4 ) GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
				else if( bank == __BANK_A && id == __LP_GPIO_15 ) GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
				else err=1;
			#endif
			break;
 801d460:	e000      	b.n	801d464 <gpio_configure_ext+0x398>
		default:
		case ITSDK_GPIO_ALT_NONE:
			break;
 801d462:	46c0      	nop			; (mov r8, r8)
		}
		if (err>0) {
 801d464:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d466:	2b00      	cmp	r3, #0
 801d468:	dd06      	ble.n	801d478 <gpio_configure_ext+0x3ac>
			log_error("Gpio - invalid alternate\r\n");
 801d46a:	4b0c      	ldr	r3, [pc, #48]	; (801d49c <gpio_configure_ext+0x3d0>)
 801d46c:	0018      	movs	r0, r3
 801d46e:	f7fe fa85 	bl	801b97c <log_error>
		}
		break;
 801d472:	e001      	b.n	801d478 <gpio_configure_ext+0x3ac>
	default:
		break;
 801d474:	46c0      	nop			; (mov r8, r8)
 801d476:	e000      	b.n	801d47a <gpio_configure_ext+0x3ae>
		break;
 801d478:	46c0      	nop			; (mov r8, r8)
	}


	HAL_GPIO_Init(getPortFromBankId(bank), &GPIO_InitStruct);
 801d47a:	1dfb      	adds	r3, r7, #7
 801d47c:	781b      	ldrb	r3, [r3, #0]
 801d47e:	0018      	movs	r0, r3
 801d480:	f7ff fd62 	bl	801cf48 <getPortFromBankId>
 801d484:	0002      	movs	r2, r0
 801d486:	2320      	movs	r3, #32
 801d488:	18fb      	adds	r3, r7, r3
 801d48a:	0019      	movs	r1, r3
 801d48c:	0010      	movs	r0, r2
 801d48e:	f7e7 f891 	bl	80045b4 <HAL_GPIO_Init>

}
 801d492:	46c0      	nop			; (mov r8, r8)
 801d494:	46bd      	mov	sp, r7
 801d496:	b00e      	add	sp, #56	; 0x38
 801d498:	bdb0      	pop	{r4, r5, r7, pc}
 801d49a:	46c0      	nop			; (mov r8, r8)
 801d49c:	080203bc 	.word	0x080203bc

0801d4a0 <gpio_set>:

void gpio_set(uint8_t bank, uint16_t id) {
 801d4a0:	b580      	push	{r7, lr}
 801d4a2:	b082      	sub	sp, #8
 801d4a4:	af00      	add	r7, sp, #0
 801d4a6:	0002      	movs	r2, r0
 801d4a8:	1dfb      	adds	r3, r7, #7
 801d4aa:	701a      	strb	r2, [r3, #0]
 801d4ac:	1d3b      	adds	r3, r7, #4
 801d4ae:	1c0a      	adds	r2, r1, #0
 801d4b0:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(getPortFromBankId(bank), id,GPIO_PIN_SET);
 801d4b2:	1dfb      	adds	r3, r7, #7
 801d4b4:	781b      	ldrb	r3, [r3, #0]
 801d4b6:	0018      	movs	r0, r3
 801d4b8:	f7ff fd46 	bl	801cf48 <getPortFromBankId>
 801d4bc:	1d3b      	adds	r3, r7, #4
 801d4be:	881b      	ldrh	r3, [r3, #0]
 801d4c0:	2201      	movs	r2, #1
 801d4c2:	0019      	movs	r1, r3
 801d4c4:	f7e7 f9f4 	bl	80048b0 <HAL_GPIO_WritePin>
}
 801d4c8:	46c0      	nop			; (mov r8, r8)
 801d4ca:	46bd      	mov	sp, r7
 801d4cc:	b002      	add	sp, #8
 801d4ce:	bd80      	pop	{r7, pc}

0801d4d0 <gpio_reset>:

void gpio_reset(uint8_t bank, uint16_t id) {
 801d4d0:	b580      	push	{r7, lr}
 801d4d2:	b082      	sub	sp, #8
 801d4d4:	af00      	add	r7, sp, #0
 801d4d6:	0002      	movs	r2, r0
 801d4d8:	1dfb      	adds	r3, r7, #7
 801d4da:	701a      	strb	r2, [r3, #0]
 801d4dc:	1d3b      	adds	r3, r7, #4
 801d4de:	1c0a      	adds	r2, r1, #0
 801d4e0:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(getPortFromBankId(bank), id,GPIO_PIN_RESET);
 801d4e2:	1dfb      	adds	r3, r7, #7
 801d4e4:	781b      	ldrb	r3, [r3, #0]
 801d4e6:	0018      	movs	r0, r3
 801d4e8:	f7ff fd2e 	bl	801cf48 <getPortFromBankId>
 801d4ec:	1d3b      	adds	r3, r7, #4
 801d4ee:	881b      	ldrh	r3, [r3, #0]
 801d4f0:	2200      	movs	r2, #0
 801d4f2:	0019      	movs	r1, r3
 801d4f4:	f7e7 f9dc 	bl	80048b0 <HAL_GPIO_WritePin>
}
 801d4f8:	46c0      	nop			; (mov r8, r8)
 801d4fa:	46bd      	mov	sp, r7
 801d4fc:	b002      	add	sp, #8
 801d4fe:	bd80      	pop	{r7, pc}

0801d500 <gpio_interruptEnable>:
uint8_t gpio_read(uint8_t bank, uint16_t id) {
	return HAL_GPIO_ReadPin(getPortFromBankId(bank), id);
}


void gpio_interruptEnable(uint8_t bank, uint16_t id) {
 801d500:	b580      	push	{r7, lr}
 801d502:	b082      	sub	sp, #8
 801d504:	af00      	add	r7, sp, #0
 801d506:	0002      	movs	r2, r0
 801d508:	1dfb      	adds	r3, r7, #7
 801d50a:	701a      	strb	r2, [r3, #0]
 801d50c:	1d3b      	adds	r3, r7, #4
 801d50e:	1c0a      	adds	r2, r1, #0
 801d510:	801a      	strh	r2, [r3, #0]
	HAL_NVIC_EnableIRQ(getIrqFromBankPin(bank,id));
 801d512:	1d3b      	adds	r3, r7, #4
 801d514:	881a      	ldrh	r2, [r3, #0]
 801d516:	1dfb      	adds	r3, r7, #7
 801d518:	781b      	ldrb	r3, [r3, #0]
 801d51a:	0011      	movs	r1, r2
 801d51c:	0018      	movs	r0, r3
 801d51e:	f7ff fd93 	bl	801d048 <getIrqFromBankPin>
 801d522:	0003      	movs	r3, r0
 801d524:	0018      	movs	r0, r3
 801d526:	f7e6 ffe0 	bl	80044ea <HAL_NVIC_EnableIRQ>
}
 801d52a:	46c0      	nop			; (mov r8, r8)
 801d52c:	46bd      	mov	sp, r7
 801d52e:	b002      	add	sp, #8
 801d530:	bd80      	pop	{r7, pc}

0801d532 <gpio_interruptPriority>:
void gpio_interruptDisableAll() {
	  HAL_NVIC_DisableIRQ(EXTI0_1_IRQn);
	  HAL_NVIC_DisableIRQ(EXTI4_15_IRQn);
}

void gpio_interruptPriority(uint8_t bank, uint16_t id, uint8_t nPreemption, uint8_t nSubpriority) {
 801d532:	b5b0      	push	{r4, r5, r7, lr}
 801d534:	b082      	sub	sp, #8
 801d536:	af00      	add	r7, sp, #0
 801d538:	0005      	movs	r5, r0
 801d53a:	000c      	movs	r4, r1
 801d53c:	0010      	movs	r0, r2
 801d53e:	0019      	movs	r1, r3
 801d540:	1dfb      	adds	r3, r7, #7
 801d542:	1c2a      	adds	r2, r5, #0
 801d544:	701a      	strb	r2, [r3, #0]
 801d546:	1d3b      	adds	r3, r7, #4
 801d548:	1c22      	adds	r2, r4, #0
 801d54a:	801a      	strh	r2, [r3, #0]
 801d54c:	1dbb      	adds	r3, r7, #6
 801d54e:	1c02      	adds	r2, r0, #0
 801d550:	701a      	strb	r2, [r3, #0]
 801d552:	1cfb      	adds	r3, r7, #3
 801d554:	1c0a      	adds	r2, r1, #0
 801d556:	701a      	strb	r2, [r3, #0]
	HAL_NVIC_SetPriority(getIrqFromBankPin(bank,id), nPreemption, nSubpriority);
 801d558:	1d3b      	adds	r3, r7, #4
 801d55a:	881a      	ldrh	r2, [r3, #0]
 801d55c:	1dfb      	adds	r3, r7, #7
 801d55e:	781b      	ldrb	r3, [r3, #0]
 801d560:	0011      	movs	r1, r2
 801d562:	0018      	movs	r0, r3
 801d564:	f7ff fd70 	bl	801d048 <getIrqFromBankPin>
 801d568:	0003      	movs	r3, r0
 801d56a:	0018      	movs	r0, r3
 801d56c:	1dbb      	adds	r3, r7, #6
 801d56e:	7819      	ldrb	r1, [r3, #0]
 801d570:	1cfb      	adds	r3, r7, #3
 801d572:	781b      	ldrb	r3, [r3, #0]
 801d574:	001a      	movs	r2, r3
 801d576:	f7e6 ffa3 	bl	80044c0 <HAL_NVIC_SetPriority>
}
 801d57a:	46c0      	nop			; (mov r8, r8)
 801d57c:	46bd      	mov	sp, r7
 801d57e:	b002      	add	sp, #8
 801d580:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801d584 <gpio_interruptClear>:

void gpio_interruptClear(uint8_t bank, uint16_t id) {
 801d584:	b580      	push	{r7, lr}
 801d586:	b082      	sub	sp, #8
 801d588:	af00      	add	r7, sp, #0
 801d58a:	0002      	movs	r2, r0
 801d58c:	1dfb      	adds	r3, r7, #7
 801d58e:	701a      	strb	r2, [r3, #0]
 801d590:	1d3b      	adds	r3, r7, #4
 801d592:	1c0a      	adds	r2, r1, #0
 801d594:	801a      	strh	r2, [r3, #0]
	__HAL_GPIO_EXTI_CLEAR_IT(id);
 801d596:	4b04      	ldr	r3, [pc, #16]	; (801d5a8 <gpio_interruptClear+0x24>)
 801d598:	1d3a      	adds	r2, r7, #4
 801d59a:	8812      	ldrh	r2, [r2, #0]
 801d59c:	615a      	str	r2, [r3, #20]
}
 801d59e:	46c0      	nop			; (mov r8, r8)
 801d5a0:	46bd      	mov	sp, r7
 801d5a2:	b002      	add	sp, #8
 801d5a4:	bd80      	pop	{r7, pc}
 801d5a6:	46c0      	nop			; (mov r8, r8)
 801d5a8:	40010400 	.word	0x40010400

0801d5ac <HAL_GPIO_EXTI_Callback>:
#if !defined ITSDK_WITH_GPIO_HANDLER || ITSDK_WITH_GPIO_HANDLER == __ENABLE
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
#else
void gpio_Callback(uint16_t GPIO_Pin)
#endif
{
 801d5ac:	b580      	push	{r7, lr}
 801d5ae:	b086      	sub	sp, #24
 801d5b0:	af00      	add	r7, sp, #0
 801d5b2:	0002      	movs	r2, r0
 801d5b4:	1dbb      	adds	r3, r7, #6
 801d5b6:	801a      	strh	r2, [r3, #0]

	// When the __gpio_irq_wakeup handler is set this handler is called
	// Because we do not want the normal handler to be called until the
	// MCU is correctly configured when waking up from deep-sleep
	if (__gpio_irq_wakeup != NULL ) {
 801d5b8:	4b1b      	ldr	r3, [pc, #108]	; (801d628 <HAL_GPIO_EXTI_Callback+0x7c>)
 801d5ba:	681b      	ldr	r3, [r3, #0]
 801d5bc:	2b00      	cmp	r3, #0
 801d5be:	d00c      	beq.n	801d5da <HAL_GPIO_EXTI_Callback+0x2e>
		void (*p)(uint16_t p) = __gpio_irq_wakeup->irq_func;
 801d5c0:	4b19      	ldr	r3, [pc, #100]	; (801d628 <HAL_GPIO_EXTI_Callback+0x7c>)
 801d5c2:	681b      	ldr	r3, [r3, #0]
 801d5c4:	681b      	ldr	r3, [r3, #0]
 801d5c6:	613b      	str	r3, [r7, #16]
		if ( p != NULL ) {
 801d5c8:	693b      	ldr	r3, [r7, #16]
 801d5ca:	2b00      	cmp	r3, #0
 801d5cc:	d005      	beq.n	801d5da <HAL_GPIO_EXTI_Callback+0x2e>
			p(GPIO_Pin);
 801d5ce:	1dbb      	adds	r3, r7, #6
 801d5d0:	881a      	ldrh	r2, [r3, #0]
 801d5d2:	693b      	ldr	r3, [r7, #16]
 801d5d4:	0010      	movs	r0, r2
 801d5d6:	4798      	blx	r3
			return;
 801d5d8:	e023      	b.n	801d622 <HAL_GPIO_EXTI_Callback+0x76>
		}
	}
	// Normal non wake-up situation.
	gpio_irq_chain_t * c = &__gpio_irq_chain;
 801d5da:	4b14      	ldr	r3, [pc, #80]	; (801d62c <HAL_GPIO_EXTI_Callback+0x80>)
 801d5dc:	617b      	str	r3, [r7, #20]
	while ( c != NULL ) {
 801d5de:	e019      	b.n	801d614 <HAL_GPIO_EXTI_Callback+0x68>
		void (*p)(uint16_t p) = c->irq_func;
 801d5e0:	697b      	ldr	r3, [r7, #20]
 801d5e2:	681b      	ldr	r3, [r3, #0]
 801d5e4:	60fb      	str	r3, [r7, #12]
		if ( p != NULL && (c->pinMask==0 || ((c->pinMask & GPIO_Pin) > 0) ) ) {
 801d5e6:	68fb      	ldr	r3, [r7, #12]
 801d5e8:	2b00      	cmp	r3, #0
 801d5ea:	d010      	beq.n	801d60e <HAL_GPIO_EXTI_Callback+0x62>
 801d5ec:	697b      	ldr	r3, [r7, #20]
 801d5ee:	889b      	ldrh	r3, [r3, #4]
 801d5f0:	2b00      	cmp	r3, #0
 801d5f2:	d007      	beq.n	801d604 <HAL_GPIO_EXTI_Callback+0x58>
 801d5f4:	697b      	ldr	r3, [r7, #20]
 801d5f6:	889b      	ldrh	r3, [r3, #4]
 801d5f8:	1dba      	adds	r2, r7, #6
 801d5fa:	8812      	ldrh	r2, [r2, #0]
 801d5fc:	4013      	ands	r3, r2
 801d5fe:	b29b      	uxth	r3, r3
 801d600:	2b00      	cmp	r3, #0
 801d602:	d004      	beq.n	801d60e <HAL_GPIO_EXTI_Callback+0x62>
			p(GPIO_Pin);
 801d604:	1dbb      	adds	r3, r7, #6
 801d606:	881a      	ldrh	r2, [r3, #0]
 801d608:	68fb      	ldr	r3, [r7, #12]
 801d60a:	0010      	movs	r0, r2
 801d60c:	4798      	blx	r3
		}
		c = c->next;
 801d60e:	697b      	ldr	r3, [r7, #20]
 801d610:	689b      	ldr	r3, [r3, #8]
 801d612:	617b      	str	r3, [r7, #20]
	while ( c != NULL ) {
 801d614:	697b      	ldr	r3, [r7, #20]
 801d616:	2b00      	cmp	r3, #0
 801d618:	d1e2      	bne.n	801d5e0 <HAL_GPIO_EXTI_Callback+0x34>
	}
	#if !defined ITSDK_WITH_GPIO_HANDLER || ITSDK_WITH_GPIO_HANDLER == __ENABLE
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 801d61a:	4b05      	ldr	r3, [pc, #20]	; (801d630 <HAL_GPIO_EXTI_Callback+0x84>)
 801d61c:	1dba      	adds	r2, r7, #6
 801d61e:	8812      	ldrh	r2, [r2, #0]
 801d620:	615a      	str	r2, [r3, #20]
	#endif
}
 801d622:	46bd      	mov	sp, r7
 801d624:	b006      	add	sp, #24
 801d626:	bd80      	pop	{r7, pc}
 801d628:	200012cc 	.word	0x200012cc
 801d62c:	200012c0 	.word	0x200012c0
 801d630:	40010400 	.word	0x40010400

0801d634 <gpio_registerIrqAction>:
}

/**
 * Add an action to the chain, the action **must be** static
 */
void gpio_registerIrqAction(gpio_irq_chain_t * chain) {
 801d634:	b580      	push	{r7, lr}
 801d636:	b084      	sub	sp, #16
 801d638:	af00      	add	r7, sp, #0
 801d63a:	6078      	str	r0, [r7, #4]
	gpio_irq_chain_t * c = &__gpio_irq_chain;
 801d63c:	4b0f      	ldr	r3, [pc, #60]	; (801d67c <gpio_registerIrqAction+0x48>)
 801d63e:	60fb      	str	r3, [r7, #12]
	while ( c->next != NULL && c->irq_func != chain->irq_func ) {
 801d640:	e002      	b.n	801d648 <gpio_registerIrqAction+0x14>
	  c = c->next;
 801d642:	68fb      	ldr	r3, [r7, #12]
 801d644:	689b      	ldr	r3, [r3, #8]
 801d646:	60fb      	str	r3, [r7, #12]
	while ( c->next != NULL && c->irq_func != chain->irq_func ) {
 801d648:	68fb      	ldr	r3, [r7, #12]
 801d64a:	689b      	ldr	r3, [r3, #8]
 801d64c:	2b00      	cmp	r3, #0
 801d64e:	d005      	beq.n	801d65c <gpio_registerIrqAction+0x28>
 801d650:	68fb      	ldr	r3, [r7, #12]
 801d652:	681a      	ldr	r2, [r3, #0]
 801d654:	687b      	ldr	r3, [r7, #4]
 801d656:	681b      	ldr	r3, [r3, #0]
 801d658:	429a      	cmp	r2, r3
 801d65a:	d1f2      	bne.n	801d642 <gpio_registerIrqAction+0xe>
	}
	if ( c->irq_func != chain->irq_func ) {
 801d65c:	68fb      	ldr	r3, [r7, #12]
 801d65e:	681a      	ldr	r2, [r3, #0]
 801d660:	687b      	ldr	r3, [r7, #4]
 801d662:	681b      	ldr	r3, [r3, #0]
 801d664:	429a      	cmp	r2, r3
 801d666:	d005      	beq.n	801d674 <gpio_registerIrqAction+0x40>
		// the Action is not already existing
		c->next=chain;
 801d668:	68fb      	ldr	r3, [r7, #12]
 801d66a:	687a      	ldr	r2, [r7, #4]
 801d66c:	609a      	str	r2, [r3, #8]
		chain->next = NULL;
 801d66e:	687b      	ldr	r3, [r7, #4]
 801d670:	2200      	movs	r2, #0
 801d672:	609a      	str	r2, [r3, #8]
	}
}
 801d674:	46c0      	nop			; (mov r8, r8)
 801d676:	46bd      	mov	sp, r7
 801d678:	b004      	add	sp, #16
 801d67a:	bd80      	pop	{r7, pc}
 801d67c:	200012c0 	.word	0x200012c0

0801d680 <NVIC_SystemReset>:
{
 801d680:	b580      	push	{r7, lr}
 801d682:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 801d684:	f3bf 8f4f 	dsb	sy
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 801d688:	4b03      	ldr	r3, [pc, #12]	; (801d698 <NVIC_SystemReset+0x18>)
 801d68a:	4a04      	ldr	r2, [pc, #16]	; (801d69c <NVIC_SystemReset+0x1c>)
 801d68c:	60da      	str	r2, [r3, #12]
 801d68e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 801d692:	46c0      	nop			; (mov r8, r8)
    __NOP();
 801d694:	e7fd      	b.n	801d692 <NVIC_SystemReset+0x12>
 801d696:	46c0      	nop			; (mov r8, r8)
 801d698:	e000ed00 	.word	0xe000ed00
 801d69c:	05fa0004 	.word	0x05fa0004

0801d6a0 <itsdk_reset>:
#include "stm32l0xx_hal.h"

/**
 * Reset the device
 */
void itsdk_reset() {
 801d6a0:	b580      	push	{r7, lr}
 801d6a2:	af00      	add	r7, sp, #0
	while(1) NVIC_SystemReset();
 801d6a4:	f7ff ffec 	bl	801d680 <NVIC_SystemReset>
 801d6a8:	e7fc      	b.n	801d6a4 <itsdk_reset+0x4>
	...

0801d6ac <itsdk_getResetCause>:
}

/**
 * Reset Cause
 */
itsdk_reset_cause_t itsdk_getResetCause() {
 801d6ac:	b580      	push	{r7, lr}
 801d6ae:	af00      	add	r7, sp, #0
	if ( RCC->CSR & RCC_CSR_LPWRRSTF ) return RESET_CAUSE_LOWPOWER;
 801d6b0:	4b1c      	ldr	r3, [pc, #112]	; (801d724 <itsdk_getResetCause+0x78>)
 801d6b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801d6b4:	2b00      	cmp	r3, #0
 801d6b6:	da01      	bge.n	801d6bc <itsdk_getResetCause+0x10>
 801d6b8:	2306      	movs	r3, #6
 801d6ba:	e030      	b.n	801d71e <itsdk_getResetCause+0x72>
	if ( RCC->CSR & RCC_CSR_WWDGRSTF ) return RESET_CAUSE_WWDG;
 801d6bc:	4b19      	ldr	r3, [pc, #100]	; (801d724 <itsdk_getResetCause+0x78>)
 801d6be:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801d6c0:	2380      	movs	r3, #128	; 0x80
 801d6c2:	05db      	lsls	r3, r3, #23
 801d6c4:	4013      	ands	r3, r2
 801d6c6:	d001      	beq.n	801d6cc <itsdk_getResetCause+0x20>
 801d6c8:	2305      	movs	r3, #5
 801d6ca:	e028      	b.n	801d71e <itsdk_getResetCause+0x72>
	if ( RCC->CSR & RCC_CSR_IWDGRSTF ) return RESET_CAUSE_IWDG;
 801d6cc:	4b15      	ldr	r3, [pc, #84]	; (801d724 <itsdk_getResetCause+0x78>)
 801d6ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801d6d0:	2380      	movs	r3, #128	; 0x80
 801d6d2:	059b      	lsls	r3, r3, #22
 801d6d4:	4013      	ands	r3, r2
 801d6d6:	d001      	beq.n	801d6dc <itsdk_getResetCause+0x30>
 801d6d8:	2304      	movs	r3, #4
 801d6da:	e020      	b.n	801d71e <itsdk_getResetCause+0x72>
	if ( RCC->CSR & RCC_CSR_SFTRSTF ) return RESET_CAUSE_SOFTWARE;
 801d6dc:	4b11      	ldr	r3, [pc, #68]	; (801d724 <itsdk_getResetCause+0x78>)
 801d6de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801d6e0:	2380      	movs	r3, #128	; 0x80
 801d6e2:	055b      	lsls	r3, r3, #21
 801d6e4:	4013      	ands	r3, r2
 801d6e6:	d001      	beq.n	801d6ec <itsdk_getResetCause+0x40>
 801d6e8:	2303      	movs	r3, #3
 801d6ea:	e018      	b.n	801d71e <itsdk_getResetCause+0x72>
	if ( RCC->CSR & RCC_CSR_PORRSTF ) return RESET_CAUSE_POWER_ON;
 801d6ec:	4b0d      	ldr	r3, [pc, #52]	; (801d724 <itsdk_getResetCause+0x78>)
 801d6ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801d6f0:	2380      	movs	r3, #128	; 0x80
 801d6f2:	051b      	lsls	r3, r3, #20
 801d6f4:	4013      	ands	r3, r2
 801d6f6:	d001      	beq.n	801d6fc <itsdk_getResetCause+0x50>
 801d6f8:	2302      	movs	r3, #2
 801d6fa:	e010      	b.n	801d71e <itsdk_getResetCause+0x72>
	if ( RCC->CSR & RCC_CSR_PINRSTF ) return RESET_CAUSE_RESET_PIN;
 801d6fc:	4b09      	ldr	r3, [pc, #36]	; (801d724 <itsdk_getResetCause+0x78>)
 801d6fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801d700:	2380      	movs	r3, #128	; 0x80
 801d702:	04db      	lsls	r3, r3, #19
 801d704:	4013      	ands	r3, r2
 801d706:	d001      	beq.n	801d70c <itsdk_getResetCause+0x60>
 801d708:	2301      	movs	r3, #1
 801d70a:	e008      	b.n	801d71e <itsdk_getResetCause+0x72>
	if ( RCC->CSR & RCC_CSR_OBLRSTF ) return RESET_CAUSE_LOWPOWER;
 801d70c:	4b05      	ldr	r3, [pc, #20]	; (801d724 <itsdk_getResetCause+0x78>)
 801d70e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801d710:	2380      	movs	r3, #128	; 0x80
 801d712:	049b      	lsls	r3, r3, #18
 801d714:	4013      	ands	r3, r2
 801d716:	d001      	beq.n	801d71c <itsdk_getResetCause+0x70>
 801d718:	2306      	movs	r3, #6
 801d71a:	e000      	b.n	801d71e <itsdk_getResetCause+0x72>
	else return RESET_CAUSE_UNKNONW;
 801d71c:	2307      	movs	r3, #7
}
 801d71e:	0018      	movs	r0, r3
 801d720:	46bd      	mov	sp, r7
 801d722:	bd80      	pop	{r7, pc}
 801d724:	40021000 	.word	0x40021000

0801d728 <itsdk_cleanResetCause>:

void itsdk_cleanResetCause() {
 801d728:	b580      	push	{r7, lr}
 801d72a:	af00      	add	r7, sp, #0
	RCC->CSR |= RCC_CSR_RMVF;
 801d72c:	4b04      	ldr	r3, [pc, #16]	; (801d740 <itsdk_cleanResetCause+0x18>)
 801d72e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801d730:	4b03      	ldr	r3, [pc, #12]	; (801d740 <itsdk_cleanResetCause+0x18>)
 801d732:	2180      	movs	r1, #128	; 0x80
 801d734:	0409      	lsls	r1, r1, #16
 801d736:	430a      	orrs	r2, r1
 801d738:	651a      	str	r2, [r3, #80]	; 0x50
}
 801d73a:	46c0      	nop			; (mov r8, r8)
 801d73c:	46bd      	mov	sp, r7
 801d73e:	bd80      	pop	{r7, pc}
 801d740:	40021000 	.word	0x40021000

0801d744 <itsdk_delayMs>:

/**
 * Delay in ms
 */
void itsdk_delayMs(uint32_t ms) {
 801d744:	b580      	push	{r7, lr}
 801d746:	b082      	sub	sp, #8
 801d748:	af00      	add	r7, sp, #0
 801d74a:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 801d74c:	687b      	ldr	r3, [r7, #4]
 801d74e:	0018      	movs	r0, r3
 801d750:	f7e6 fbc6 	bl	8003ee0 <HAL_Delay>
}
 801d754:	46c0      	nop			; (mov r8, r8)
 801d756:	46bd      	mov	sp, r7
 801d758:	b002      	add	sp, #8
 801d75a:	bd80      	pop	{r7, pc}

0801d75c <itsdk_getIrqMask>:

/**
 * Get the IRQ Mask
 */
uint32_t itsdk_getIrqMask() {
 801d75c:	b580      	push	{r7, lr}
 801d75e:	b082      	sub	sp, #8
 801d760:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801d762:	f3ef 8310 	mrs	r3, PRIMASK
 801d766:	607b      	str	r3, [r7, #4]
  return(result);
 801d768:	687b      	ldr	r3, [r7, #4]
	return __get_PRIMASK();
 801d76a:	46c0      	nop			; (mov r8, r8)
}
 801d76c:	0018      	movs	r0, r3
 801d76e:	46bd      	mov	sp, r7
 801d770:	b002      	add	sp, #8
 801d772:	bd80      	pop	{r7, pc}

0801d774 <itsdk_setIrqMask>:

/**
 * Set / Restore the IRQ Mask
 */
void itsdk_setIrqMask(uint32_t mask) {
 801d774:	b580      	push	{r7, lr}
 801d776:	b084      	sub	sp, #16
 801d778:	af00      	add	r7, sp, #0
 801d77a:	6078      	str	r0, [r7, #4]
 801d77c:	687b      	ldr	r3, [r7, #4]
 801d77e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d780:	68fb      	ldr	r3, [r7, #12]
 801d782:	f383 8810 	msr	PRIMASK, r3
	__set_PRIMASK(mask);
}
 801d786:	46c0      	nop			; (mov r8, r8)
 801d788:	46bd      	mov	sp, r7
 801d78a:	b004      	add	sp, #16
 801d78c:	bd80      	pop	{r7, pc}
	...

0801d790 <itsdk_enterCriticalSection>:
/**
 * Enter a critical section / disable interrupt
 */
static uint32_t __interrupt_mask;
void itsdk_enterCriticalSection() {
 801d790:	b580      	push	{r7, lr}
 801d792:	b082      	sub	sp, #8
 801d794:	af00      	add	r7, sp, #0
	__interrupt_mask = itsdk_getIrqMask();
 801d796:	f7ff ffe1 	bl	801d75c <itsdk_getIrqMask>
 801d79a:	0002      	movs	r2, r0
 801d79c:	4b05      	ldr	r3, [pc, #20]	; (801d7b4 <itsdk_enterCriticalSection+0x24>)
 801d79e:	601a      	str	r2, [r3, #0]
 801d7a0:	2301      	movs	r3, #1
 801d7a2:	607b      	str	r3, [r7, #4]
 801d7a4:	687b      	ldr	r3, [r7, #4]
 801d7a6:	f383 8810 	msr	PRIMASK, r3
	//__disable_irq();
	__set_PRIMASK(1);	// allows to capture but not execute the interruption appearing during the critical section execution
}
 801d7aa:	46c0      	nop			; (mov r8, r8)
 801d7ac:	46bd      	mov	sp, r7
 801d7ae:	b002      	add	sp, #8
 801d7b0:	bd80      	pop	{r7, pc}
 801d7b2:	46c0      	nop			; (mov r8, r8)
 801d7b4:	200012d0 	.word	0x200012d0

0801d7b8 <itsdk_leaveCriticalSection>:

/**
 * Restore the initial irq mask
 * to leave a critical secqtion
 */
void itsdk_leaveCriticalSection() {
 801d7b8:	b580      	push	{r7, lr}
 801d7ba:	af00      	add	r7, sp, #0
	itsdk_setIrqMask(__interrupt_mask);
 801d7bc:	4b03      	ldr	r3, [pc, #12]	; (801d7cc <itsdk_leaveCriticalSection+0x14>)
 801d7be:	681b      	ldr	r3, [r3, #0]
 801d7c0:	0018      	movs	r0, r3
 801d7c2:	f7ff ffd7 	bl	801d774 <itsdk_setIrqMask>
}
 801d7c6:	46c0      	nop			; (mov r8, r8)
 801d7c8:	46bd      	mov	sp, r7
 801d7ca:	bd80      	pop	{r7, pc}
 801d7cc:	200012d0 	.word	0x200012d0

0801d7d0 <itsdk_getRandomSeed>:
	#define  STM32_ID2    ( 0x1FF80054 )
	#define  STM32_ID3    ( 0x1FF80064 )
#else
    #error "You need to define the MCU ID for this platform"
#endif
uint32_t itsdk_getRandomSeed() {
 801d7d0:	b580      	push	{r7, lr}
 801d7d2:	af00      	add	r7, sp, #0
	return ( ( *( uint32_t* )STM32_ID1 ) ^ ( *( uint32_t* )STM32_ID2 ) ^ ( *( uint32_t* )STM32_ID3 ) );
 801d7d4:	4b05      	ldr	r3, [pc, #20]	; (801d7ec <itsdk_getRandomSeed+0x1c>)
 801d7d6:	681a      	ldr	r2, [r3, #0]
 801d7d8:	4b05      	ldr	r3, [pc, #20]	; (801d7f0 <itsdk_getRandomSeed+0x20>)
 801d7da:	681b      	ldr	r3, [r3, #0]
 801d7dc:	405a      	eors	r2, r3
 801d7de:	4b05      	ldr	r3, [pc, #20]	; (801d7f4 <itsdk_getRandomSeed+0x24>)
 801d7e0:	681b      	ldr	r3, [r3, #0]
 801d7e2:	4053      	eors	r3, r2
}
 801d7e4:	0018      	movs	r0, r3
 801d7e6:	46bd      	mov	sp, r7
 801d7e8:	bd80      	pop	{r7, pc}
 801d7ea:	46c0      	nop			; (mov r8, r8)
 801d7ec:	1ff80050 	.word	0x1ff80050
 801d7f0:	1ff80054 	.word	0x1ff80054
 801d7f4:	1ff80064 	.word	0x1ff80064

0801d7f8 <itsdk_getUniqId>:
/**
 * Generate a uniq ID based on the object ID. The id struct is
 * initialized based on this. This size of the id table is given
 * as a parameter. size is in Byte
 */
void itsdk_getUniqId(uint8_t * id, int8_t size){
 801d7f8:	b580      	push	{r7, lr}
 801d7fa:	b086      	sub	sp, #24
 801d7fc:	af00      	add	r7, sp, #0
 801d7fe:	6078      	str	r0, [r7, #4]
 801d800:	000a      	movs	r2, r1
 801d802:	1cfb      	adds	r3, r7, #3
 801d804:	701a      	strb	r2, [r3, #0]

	uint32_t i = (( *( uint32_t* )STM32_ID1 ) << 16) + (( *( uint32_t* )STM32_ID2 )  << 8) + (*( uint32_t* )STM32_ID3 );
 801d806:	4b2c      	ldr	r3, [pc, #176]	; (801d8b8 <itsdk_getUniqId+0xc0>)
 801d808:	681b      	ldr	r3, [r3, #0]
 801d80a:	041a      	lsls	r2, r3, #16
 801d80c:	4b2b      	ldr	r3, [pc, #172]	; (801d8bc <itsdk_getUniqId+0xc4>)
 801d80e:	681b      	ldr	r3, [r3, #0]
 801d810:	021b      	lsls	r3, r3, #8
 801d812:	18d2      	adds	r2, r2, r3
 801d814:	4b2a      	ldr	r3, [pc, #168]	; (801d8c0 <itsdk_getUniqId+0xc8>)
 801d816:	681b      	ldr	r3, [r3, #0]
 801d818:	18d3      	adds	r3, r2, r3
 801d81a:	60fb      	str	r3, [r7, #12]
	uint8_t l=0;
 801d81c:	2317      	movs	r3, #23
 801d81e:	18fb      	adds	r3, r7, r3
 801d820:	2200      	movs	r2, #0
 801d822:	701a      	strb	r2, [r3, #0]
	uint32_t s=i;
 801d824:	68fb      	ldr	r3, [r7, #12]
 801d826:	613b      	str	r3, [r7, #16]
	while ( l < size ) {
 801d828:	e03a      	b.n	801d8a0 <itsdk_getUniqId+0xa8>
		if ( (l & 0x3) == 0 ) {
 801d82a:	2317      	movs	r3, #23
 801d82c:	18fb      	adds	r3, r7, r3
 801d82e:	781b      	ldrb	r3, [r3, #0]
 801d830:	2203      	movs	r2, #3
 801d832:	4013      	ands	r3, r2
 801d834:	d11f      	bne.n	801d876 <itsdk_getUniqId+0x7e>
			switch ( (l >> 2) & 3 ) {
 801d836:	2317      	movs	r3, #23
 801d838:	18fb      	adds	r3, r7, r3
 801d83a:	781b      	ldrb	r3, [r3, #0]
 801d83c:	089b      	lsrs	r3, r3, #2
 801d83e:	b2db      	uxtb	r3, r3
 801d840:	001a      	movs	r2, r3
 801d842:	2303      	movs	r3, #3
 801d844:	4013      	ands	r3, r2
 801d846:	2b01      	cmp	r3, #1
 801d848:	d008      	beq.n	801d85c <itsdk_getUniqId+0x64>
 801d84a:	2b02      	cmp	r3, #2
 801d84c:	d00b      	beq.n	801d866 <itsdk_getUniqId+0x6e>
 801d84e:	2b00      	cmp	r3, #0
 801d850:	d10e      	bne.n	801d870 <itsdk_getUniqId+0x78>
				case 0:	s = i ^ STM32_ID1; break;
 801d852:	68fb      	ldr	r3, [r7, #12]
 801d854:	4a18      	ldr	r2, [pc, #96]	; (801d8b8 <itsdk_getUniqId+0xc0>)
 801d856:	4053      	eors	r3, r2
 801d858:	613b      	str	r3, [r7, #16]
 801d85a:	e00d      	b.n	801d878 <itsdk_getUniqId+0x80>
				case 1: s = i ^ STM32_ID2; break;
 801d85c:	68fb      	ldr	r3, [r7, #12]
 801d85e:	4a17      	ldr	r2, [pc, #92]	; (801d8bc <itsdk_getUniqId+0xc4>)
 801d860:	4053      	eors	r3, r2
 801d862:	613b      	str	r3, [r7, #16]
 801d864:	e008      	b.n	801d878 <itsdk_getUniqId+0x80>
				case 2: s = i ^ STM32_ID3; break;
 801d866:	68fb      	ldr	r3, [r7, #12]
 801d868:	4a15      	ldr	r2, [pc, #84]	; (801d8c0 <itsdk_getUniqId+0xc8>)
 801d86a:	4053      	eors	r3, r2
 801d86c:	613b      	str	r3, [r7, #16]
 801d86e:	e003      	b.n	801d878 <itsdk_getUniqId+0x80>
				default:
				case 3: s = i; break;
 801d870:	68fb      	ldr	r3, [r7, #12]
 801d872:	613b      	str	r3, [r7, #16]
 801d874:	e000      	b.n	801d878 <itsdk_getUniqId+0x80>
			}
		}
 801d876:	46c0      	nop			; (mov r8, r8)
		id[l] = ( s >> (8*(l&3))) & 0xFF;
 801d878:	2017      	movs	r0, #23
 801d87a:	183b      	adds	r3, r7, r0
 801d87c:	781b      	ldrb	r3, [r3, #0]
 801d87e:	2203      	movs	r2, #3
 801d880:	4013      	ands	r3, r2
 801d882:	00db      	lsls	r3, r3, #3
 801d884:	693a      	ldr	r2, [r7, #16]
 801d886:	40da      	lsrs	r2, r3
 801d888:	0011      	movs	r1, r2
 801d88a:	183b      	adds	r3, r7, r0
 801d88c:	781b      	ldrb	r3, [r3, #0]
 801d88e:	687a      	ldr	r2, [r7, #4]
 801d890:	18d3      	adds	r3, r2, r3
 801d892:	b2ca      	uxtb	r2, r1
 801d894:	701a      	strb	r2, [r3, #0]
		l++;
 801d896:	183b      	adds	r3, r7, r0
 801d898:	781a      	ldrb	r2, [r3, #0]
 801d89a:	183b      	adds	r3, r7, r0
 801d89c:	3201      	adds	r2, #1
 801d89e:	701a      	strb	r2, [r3, #0]
	while ( l < size ) {
 801d8a0:	2317      	movs	r3, #23
 801d8a2:	18fb      	adds	r3, r7, r3
 801d8a4:	781a      	ldrb	r2, [r3, #0]
 801d8a6:	1cfb      	adds	r3, r7, #3
 801d8a8:	781b      	ldrb	r3, [r3, #0]
 801d8aa:	b25b      	sxtb	r3, r3
 801d8ac:	429a      	cmp	r2, r3
 801d8ae:	dbbc      	blt.n	801d82a <itsdk_getUniqId+0x32>
	}

}
 801d8b0:	46c0      	nop			; (mov r8, r8)
 801d8b2:	46bd      	mov	sp, r7
 801d8b4:	b006      	add	sp, #24
 801d8b6:	bd80      	pop	{r7, pc}
 801d8b8:	1ff80050 	.word	0x1ff80050
 801d8bc:	1ff80054 	.word	0x1ff80054
 801d8c0:	1ff80064 	.word	0x1ff80064

0801d8c4 <serial1_print>:
	   while(__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
	   while(__HAL_UART_GET_FLAG(&huart1, USART_ISR_TC) == RESET);
  #endif
}

void serial1_print(char * msg) {
 801d8c4:	b580      	push	{r7, lr}
 801d8c6:	b082      	sub	sp, #8
 801d8c8:	af00      	add	r7, sp, #0
 801d8ca:	6078      	str	r0, [r7, #4]
  #if ( ITSDK_WITH_UART & __UART_LPUART1 ) > 0
	HAL_UART_Transmit(&hlpuart1, (uint8_t*)msg, strlen(msg),0xFFFF);
  #elif ( ITSDK_WITH_UART & __UART_USART1 ) > 0
	HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg),0xFFFF);
  #endif
}
 801d8cc:	46c0      	nop			; (mov r8, r8)
 801d8ce:	46bd      	mov	sp, r7
 801d8d0:	b002      	add	sp, #8
 801d8d2:	bd80      	pop	{r7, pc}

0801d8d4 <serial2_print>:
  while((__HAL_UART_GET_FLAG(&huart2, USART_ISR_BUSY)) == SET);
  while((__HAL_UART_GET_FLAG(&huart2, USART_ISR_TC)) == RESET);
  #endif
}

void serial2_print(char * msg) {
 801d8d4:	b580      	push	{r7, lr}
 801d8d6:	b082      	sub	sp, #8
 801d8d8:	af00      	add	r7, sp, #0
 801d8da:	6078      	str	r0, [r7, #4]
  #if ( ITSDK_WITH_UART & __UART_USART2 ) > 0
	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg),0xFFFF);
 801d8dc:	687b      	ldr	r3, [r7, #4]
 801d8de:	0018      	movs	r0, r3
 801d8e0:	f7e2 fc12 	bl	8000108 <strlen>
 801d8e4:	0003      	movs	r3, r0
 801d8e6:	b29a      	uxth	r2, r3
 801d8e8:	4b04      	ldr	r3, [pc, #16]	; (801d8fc <serial2_print+0x28>)
 801d8ea:	6879      	ldr	r1, [r7, #4]
 801d8ec:	4804      	ldr	r0, [pc, #16]	; (801d900 <serial2_print+0x2c>)
 801d8ee:	f7e9 f847 	bl	8006980 <HAL_UART_Transmit>
  #endif
}
 801d8f2:	46c0      	nop			; (mov r8, r8)
 801d8f4:	46bd      	mov	sp, r7
 801d8f6:	b002      	add	sp, #8
 801d8f8:	bd80      	pop	{r7, pc}
 801d8fa:	46c0      	nop			; (mov r8, r8)
 801d8fc:	0000ffff 	.word	0x0000ffff
 801d900:	200014b0 	.word	0x200014b0

0801d904 <HAL_UART_ErrorCallback>:
// Global interrupt management
// ---------------------------------------------------------------------------


#if defined ITSDK_WITH_UART_RXIRQ && ITSDK_WITH_UART_RXIRQ != __UART_NONE
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 801d904:	b580      	push	{r7, lr}
 801d906:	b082      	sub	sp, #8
 801d908:	af00      	add	r7, sp, #0
 801d90a:	6078      	str	r0, [r7, #4]
	// Clear the error flags
	__HAL_UART_CLEAR_FLAG(huart, UART_FLAG_ORE);
 801d90c:	687b      	ldr	r3, [r7, #4]
 801d90e:	681b      	ldr	r3, [r3, #0]
 801d910:	2208      	movs	r2, #8
 801d912:	621a      	str	r2, [r3, #32]
	__HAL_UART_CLEAR_FLAG(huart, UART_FLAG_NE);
 801d914:	687b      	ldr	r3, [r7, #4]
 801d916:	681b      	ldr	r3, [r3, #0]
 801d918:	2204      	movs	r2, #4
 801d91a:	621a      	str	r2, [r3, #32]
	__HAL_UART_CLEAR_FLAG(huart, UART_FLAG_FE);
 801d91c:	687b      	ldr	r3, [r7, #4]
 801d91e:	681b      	ldr	r3, [r3, #0]
 801d920:	2202      	movs	r2, #2
 801d922:	621a      	str	r2, [r3, #32]
}
 801d924:	46c0      	nop			; (mov r8, r8)
 801d926:	46bd      	mov	sp, r7
 801d928:	b002      	add	sp, #8
 801d92a:	bd80      	pop	{r7, pc}

0801d92c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 801d92c:	b580      	push	{r7, lr}
 801d92e:	b082      	sub	sp, #8
 801d930:	af00      	add	r7, sp, #0
 801d932:	6078      	str	r0, [r7, #4]
	  if (huart->Instance == USART1)
 801d934:	687b      	ldr	r3, [r7, #4]
 801d936:	681b      	ldr	r3, [r3, #0]
 801d938:	4a21      	ldr	r2, [pc, #132]	; (801d9c0 <HAL_UART_RxCpltCallback+0x94>)
 801d93a:	4293      	cmp	r3, r2
 801d93c:	d133      	bne.n	801d9a6 <HAL_UART_RxCpltCallback+0x7a>
	  {
		  //log_info("toto uart wrapper.c l 413");
		  static indexOfReceive;
	    /* Transmit one byte with 100 ms timeout */
		  if ((char)byte == 'R'){
 801d93e:	4b21      	ldr	r3, [pc, #132]	; (801d9c4 <HAL_UART_RxCpltCallback+0x98>)
 801d940:	781b      	ldrb	r3, [r3, #0]
 801d942:	2b52      	cmp	r3, #82	; 0x52
 801d944:	d102      	bne.n	801d94c <HAL_UART_RxCpltCallback+0x20>
			  indexOfReceive = 0;
 801d946:	4b20      	ldr	r3, [pc, #128]	; (801d9c8 <HAL_UART_RxCpltCallback+0x9c>)
 801d948:	2200      	movs	r2, #0
 801d94a:	601a      	str	r2, [r3, #0]
		  }
		  tabResult[indexOfReceive] = byte;
 801d94c:	4b1e      	ldr	r3, [pc, #120]	; (801d9c8 <HAL_UART_RxCpltCallback+0x9c>)
 801d94e:	681b      	ldr	r3, [r3, #0]
 801d950:	4a1c      	ldr	r2, [pc, #112]	; (801d9c4 <HAL_UART_RxCpltCallback+0x98>)
 801d952:	7811      	ldrb	r1, [r2, #0]
 801d954:	4a1d      	ldr	r2, [pc, #116]	; (801d9cc <HAL_UART_RxCpltCallback+0xa0>)
 801d956:	54d1      	strb	r1, [r2, r3]
		  indexOfReceive++;
 801d958:	4b1b      	ldr	r3, [pc, #108]	; (801d9c8 <HAL_UART_RxCpltCallback+0x9c>)
 801d95a:	681b      	ldr	r3, [r3, #0]
 801d95c:	1c5a      	adds	r2, r3, #1
 801d95e:	4b1a      	ldr	r3, [pc, #104]	; (801d9c8 <HAL_UART_RxCpltCallback+0x9c>)
 801d960:	601a      	str	r2, [r3, #0]
	    /* Receive one byte in interrupt mode */
		  if (indexOfReceive!=5){
 801d962:	4b19      	ldr	r3, [pc, #100]	; (801d9c8 <HAL_UART_RxCpltCallback+0x9c>)
 801d964:	681b      	ldr	r3, [r3, #0]
 801d966:	2b05      	cmp	r3, #5
 801d968:	d006      	beq.n	801d978 <HAL_UART_RxCpltCallback+0x4c>
			  HAL_UART_Receive_IT(&huart1, &byte, 1);
 801d96a:	4916      	ldr	r1, [pc, #88]	; (801d9c4 <HAL_UART_RxCpltCallback+0x98>)
 801d96c:	4b18      	ldr	r3, [pc, #96]	; (801d9d0 <HAL_UART_RxCpltCallback+0xa4>)
 801d96e:	2201      	movs	r2, #1
 801d970:	0018      	movs	r0, r3
 801d972:	f7e9 f8ad 	bl	8006ad0 <HAL_UART_Receive_IT>

	  }else if (huart -> Instance == USART2){
		  log_info("toto");
	  }

}
 801d976:	e01f      	b.n	801d9b8 <HAL_UART_RxCpltCallback+0x8c>
			  tabToPrint[0] = 0x30; //Force to 0
 801d978:	4b16      	ldr	r3, [pc, #88]	; (801d9d4 <HAL_UART_RxCpltCallback+0xa8>)
 801d97a:	2230      	movs	r2, #48	; 0x30
 801d97c:	701a      	strb	r2, [r3, #0]
			  tabToPrint[1] = tabResult[1];
 801d97e:	4b13      	ldr	r3, [pc, #76]	; (801d9cc <HAL_UART_RxCpltCallback+0xa0>)
 801d980:	785a      	ldrb	r2, [r3, #1]
 801d982:	4b14      	ldr	r3, [pc, #80]	; (801d9d4 <HAL_UART_RxCpltCallback+0xa8>)
 801d984:	705a      	strb	r2, [r3, #1]
			  tabToPrint[2] = tabResult[2];
 801d986:	4b11      	ldr	r3, [pc, #68]	; (801d9cc <HAL_UART_RxCpltCallback+0xa0>)
 801d988:	789a      	ldrb	r2, [r3, #2]
 801d98a:	4b12      	ldr	r3, [pc, #72]	; (801d9d4 <HAL_UART_RxCpltCallback+0xa8>)
 801d98c:	709a      	strb	r2, [r3, #2]
			  tabToPrint[3] = tabResult[3];
 801d98e:	4b0f      	ldr	r3, [pc, #60]	; (801d9cc <HAL_UART_RxCpltCallback+0xa0>)
 801d990:	78da      	ldrb	r2, [r3, #3]
 801d992:	4b10      	ldr	r3, [pc, #64]	; (801d9d4 <HAL_UART_RxCpltCallback+0xa8>)
 801d994:	70da      	strb	r2, [r3, #3]
			  tabToPrint[4] = tabResult[4];
 801d996:	4b0d      	ldr	r3, [pc, #52]	; (801d9cc <HAL_UART_RxCpltCallback+0xa0>)
 801d998:	791a      	ldrb	r2, [r3, #4]
 801d99a:	4b0e      	ldr	r3, [pc, #56]	; (801d9d4 <HAL_UART_RxCpltCallback+0xa8>)
 801d99c:	711a      	strb	r2, [r3, #4]
			  indexOfReceive = 0;
 801d99e:	4b0a      	ldr	r3, [pc, #40]	; (801d9c8 <HAL_UART_RxCpltCallback+0x9c>)
 801d9a0:	2200      	movs	r2, #0
 801d9a2:	601a      	str	r2, [r3, #0]
}
 801d9a4:	e008      	b.n	801d9b8 <HAL_UART_RxCpltCallback+0x8c>
	  }else if (huart -> Instance == USART2){
 801d9a6:	687b      	ldr	r3, [r7, #4]
 801d9a8:	681b      	ldr	r3, [r3, #0]
 801d9aa:	4a0b      	ldr	r2, [pc, #44]	; (801d9d8 <HAL_UART_RxCpltCallback+0xac>)
 801d9ac:	4293      	cmp	r3, r2
 801d9ae:	d103      	bne.n	801d9b8 <HAL_UART_RxCpltCallback+0x8c>
		  log_info("toto");
 801d9b0:	4b0a      	ldr	r3, [pc, #40]	; (801d9dc <HAL_UART_RxCpltCallback+0xb0>)
 801d9b2:	0018      	movs	r0, r3
 801d9b4:	f7fe f86e 	bl	801ba94 <log_info>
}
 801d9b8:	46c0      	nop			; (mov r8, r8)
 801d9ba:	46bd      	mov	sp, r7
 801d9bc:	b002      	add	sp, #8
 801d9be:	bd80      	pop	{r7, pc}
 801d9c0:	40013800 	.word	0x40013800
 801d9c4:	200016e5 	.word	0x200016e5
 801d9c8:	200012d4 	.word	0x200012d4
 801d9cc:	20001698 	.word	0x20001698
 801d9d0:	2000135c 	.word	0x2000135c
 801d9d4:	200016e0 	.word	0x200016e0
 801d9d8:	40004400 	.word	0x40004400
 801d9dc:	080203dc 	.word	0x080203dc

0801d9e0 <debug_print>:
// ---------------------------------------------------------------------------

void debug_flush() {
}

void debug_print(debug_print_type_e lvl, char * msg) {
 801d9e0:	b580      	push	{r7, lr}
 801d9e2:	b082      	sub	sp, #8
 801d9e4:	af00      	add	r7, sp, #0
 801d9e6:	0002      	movs	r2, r0
 801d9e8:	6039      	str	r1, [r7, #0]
 801d9ea:	1dfb      	adds	r3, r7, #7
 801d9ec:	701a      	strb	r2, [r3, #0]
	SEGGER_RTT_WriteString(0, msg);
	SEGGER_RTT_WriteString(0,RTT_CTRL_RESET);
	int v = strlen(msg);
	wasEndLine = ( msg[v-1] == '\r' || msg[v-1] == '\n' )?1:0;
#endif
}
 801d9ee:	46c0      	nop			; (mov r8, r8)
 801d9f0:	46bd      	mov	sp, r7
 801d9f2:	b002      	add	sp, #8
 801d9f4:	bd80      	pop	{r7, pc}
	...

0801d9f8 <_eeprom_write>:
 * Offset allows to write 1 bank in multiple operation where offset is the pointer for bank start
 *  offset is aligned on 32b words
 * Actually bank is not supported, assuming is 0
 * @TODO : manage bank
 */
bool _eeprom_write(uint8_t bank, uint32_t offset, void * data, int len) {
 801d9f8:	b580      	push	{r7, lr}
 801d9fa:	b088      	sub	sp, #32
 801d9fc:	af00      	add	r7, sp, #0
 801d9fe:	60b9      	str	r1, [r7, #8]
 801da00:	607a      	str	r2, [r7, #4]
 801da02:	603b      	str	r3, [r7, #0]
 801da04:	210f      	movs	r1, #15
 801da06:	187b      	adds	r3, r7, r1
 801da08:	1c02      	adds	r2, r0, #0
 801da0a:	701a      	strb	r2, [r3, #0]
	uint8_t *  _data = (uint8_t *)data;
 801da0c:	687b      	ldr	r3, [r7, #4]
 801da0e:	617b      	str	r3, [r7, #20]
	uint32_t   _eepromAddr;
	uint32_t   v;

	if ( bank != 0 || (offset + len) > EEPROM_SIZE) {
 801da10:	187b      	adds	r3, r7, r1
 801da12:	781b      	ldrb	r3, [r3, #0]
 801da14:	2b00      	cmp	r3, #0
 801da16:	d106      	bne.n	801da26 <_eeprom_write+0x2e>
 801da18:	683a      	ldr	r2, [r7, #0]
 801da1a:	68bb      	ldr	r3, [r7, #8]
 801da1c:	18d2      	adds	r2, r2, r3
 801da1e:	23c0      	movs	r3, #192	; 0xc0
 801da20:	015b      	lsls	r3, r3, #5
 801da22:	429a      	cmp	r2, r3
 801da24:	d906      	bls.n	801da34 <_eeprom_write+0x3c>
	    ITSDK_ERROR_REPORT(ITSDK_ERROR_EEPROM_OUTOFBOUNDS,len);
 801da26:	683b      	ldr	r3, [r7, #0]
 801da28:	b29b      	uxth	r3, r3
 801da2a:	4a3f      	ldr	r2, [pc, #252]	; (801db28 <_eeprom_write+0x130>)
 801da2c:	0019      	movs	r1, r3
 801da2e:	0010      	movs	r0, r2
 801da30:	f7fd fd18 	bl	801b464 <itsdk_error_report>
	}
	_eepromAddr = (uint32_t)(EEPROM_START_ADDR+offset);
 801da34:	68bb      	ldr	r3, [r7, #8]
 801da36:	4a3d      	ldr	r2, [pc, #244]	; (801db2c <_eeprom_write+0x134>)
 801da38:	4694      	mov	ip, r2
 801da3a:	4463      	add	r3, ip
 801da3c:	61fb      	str	r3, [r7, #28]
	if ( (_eepromAddr & 0x3) != 0 ) {
 801da3e:	69fb      	ldr	r3, [r7, #28]
 801da40:	2203      	movs	r2, #3
 801da42:	4013      	ands	r3, r2
 801da44:	d006      	beq.n	801da54 <_eeprom_write+0x5c>
	    ITSDK_ERROR_REPORT(ITSDK_ERROR_EEPROM_NOTALIGNED,1);
 801da46:	4b3a      	ldr	r3, [pc, #232]	; (801db30 <_eeprom_write+0x138>)
 801da48:	2101      	movs	r1, #1
 801da4a:	0018      	movs	r0, r3
 801da4c:	f7fd fd0a 	bl	801b464 <itsdk_error_report>
	    return false;
 801da50:	2300      	movs	r3, #0
 801da52:	e064      	b.n	801db1e <_eeprom_write+0x126>
	}

	// Unlock EEPROM
	if (FLASH->PECR & FLASH_PECR_PELOCK) {
 801da54:	4b37      	ldr	r3, [pc, #220]	; (801db34 <_eeprom_write+0x13c>)
 801da56:	685b      	ldr	r3, [r3, #4]
 801da58:	2201      	movs	r2, #1
 801da5a:	4013      	ands	r3, r2
 801da5c:	d005      	beq.n	801da6a <_eeprom_write+0x72>
			FLASH->PEKEYR = FLASH_PEKEY1;
 801da5e:	4b35      	ldr	r3, [pc, #212]	; (801db34 <_eeprom_write+0x13c>)
 801da60:	4a35      	ldr	r2, [pc, #212]	; (801db38 <_eeprom_write+0x140>)
 801da62:	60da      	str	r2, [r3, #12]
			FLASH->PEKEYR = FLASH_PEKEY2;
 801da64:	4b33      	ldr	r3, [pc, #204]	; (801db34 <_eeprom_write+0x13c>)
 801da66:	4a35      	ldr	r2, [pc, #212]	; (801db3c <_eeprom_write+0x144>)
 801da68:	60da      	str	r2, [r3, #12]
	}
	// Copy data
	for (int i = 0; i < len; i += 4) {
 801da6a:	2300      	movs	r3, #0
 801da6c:	61bb      	str	r3, [r7, #24]
 801da6e:	e04b      	b.n	801db08 <_eeprom_write+0x110>
		v = _data[i] << 24;
 801da70:	69bb      	ldr	r3, [r7, #24]
 801da72:	697a      	ldr	r2, [r7, #20]
 801da74:	18d3      	adds	r3, r2, r3
 801da76:	781b      	ldrb	r3, [r3, #0]
 801da78:	061b      	lsls	r3, r3, #24
 801da7a:	613b      	str	r3, [r7, #16]
		v+= (i+1 < len)?_data[i+1]<<16:0;
 801da7c:	69bb      	ldr	r3, [r7, #24]
 801da7e:	3301      	adds	r3, #1
 801da80:	683a      	ldr	r2, [r7, #0]
 801da82:	429a      	cmp	r2, r3
 801da84:	dd07      	ble.n	801da96 <_eeprom_write+0x9e>
 801da86:	69bb      	ldr	r3, [r7, #24]
 801da88:	3301      	adds	r3, #1
 801da8a:	697a      	ldr	r2, [r7, #20]
 801da8c:	18d3      	adds	r3, r2, r3
 801da8e:	781b      	ldrb	r3, [r3, #0]
 801da90:	041b      	lsls	r3, r3, #16
 801da92:	001a      	movs	r2, r3
 801da94:	e000      	b.n	801da98 <_eeprom_write+0xa0>
 801da96:	2200      	movs	r2, #0
 801da98:	693b      	ldr	r3, [r7, #16]
 801da9a:	189b      	adds	r3, r3, r2
 801da9c:	613b      	str	r3, [r7, #16]
		v+= (i+2 < len)?_data[i+2]<<8:0;
 801da9e:	69bb      	ldr	r3, [r7, #24]
 801daa0:	3302      	adds	r3, #2
 801daa2:	683a      	ldr	r2, [r7, #0]
 801daa4:	429a      	cmp	r2, r3
 801daa6:	dd07      	ble.n	801dab8 <_eeprom_write+0xc0>
 801daa8:	69bb      	ldr	r3, [r7, #24]
 801daaa:	3302      	adds	r3, #2
 801daac:	697a      	ldr	r2, [r7, #20]
 801daae:	18d3      	adds	r3, r2, r3
 801dab0:	781b      	ldrb	r3, [r3, #0]
 801dab2:	021b      	lsls	r3, r3, #8
 801dab4:	001a      	movs	r2, r3
 801dab6:	e000      	b.n	801daba <_eeprom_write+0xc2>
 801dab8:	2200      	movs	r2, #0
 801daba:	693b      	ldr	r3, [r7, #16]
 801dabc:	189b      	adds	r3, r3, r2
 801dabe:	613b      	str	r3, [r7, #16]
		v+= (i+3 < len)?_data[i+3]:0;
 801dac0:	69bb      	ldr	r3, [r7, #24]
 801dac2:	3303      	adds	r3, #3
 801dac4:	683a      	ldr	r2, [r7, #0]
 801dac6:	429a      	cmp	r2, r3
 801dac8:	dd06      	ble.n	801dad8 <_eeprom_write+0xe0>
 801daca:	69bb      	ldr	r3, [r7, #24]
 801dacc:	3303      	adds	r3, #3
 801dace:	697a      	ldr	r2, [r7, #20]
 801dad0:	18d3      	adds	r3, r2, r3
 801dad2:	781b      	ldrb	r3, [r3, #0]
 801dad4:	001a      	movs	r2, r3
 801dad6:	e000      	b.n	801dada <_eeprom_write+0xe2>
 801dad8:	2200      	movs	r2, #0
 801dada:	693b      	ldr	r3, [r7, #16]
 801dadc:	189b      	adds	r3, r3, r2
 801dade:	613b      	str	r3, [r7, #16]
		if (v != __eepromRead(_eepromAddr)) __eepromWrite(_eepromAddr,v);
 801dae0:	69fb      	ldr	r3, [r7, #28]
 801dae2:	0018      	movs	r0, r3
 801dae4:	f000 f8a6 	bl	801dc34 <__eepromRead>
 801dae8:	0002      	movs	r2, r0
 801daea:	693b      	ldr	r3, [r7, #16]
 801daec:	4293      	cmp	r3, r2
 801daee:	d005      	beq.n	801dafc <_eeprom_write+0x104>
 801daf0:	693a      	ldr	r2, [r7, #16]
 801daf2:	69fb      	ldr	r3, [r7, #28]
 801daf4:	0011      	movs	r1, r2
 801daf6:	0018      	movs	r0, r3
 801daf8:	f000 f8a6 	bl	801dc48 <__eepromWrite>
		_eepromAddr+=4;
 801dafc:	69fb      	ldr	r3, [r7, #28]
 801dafe:	3304      	adds	r3, #4
 801db00:	61fb      	str	r3, [r7, #28]
	for (int i = 0; i < len; i += 4) {
 801db02:	69bb      	ldr	r3, [r7, #24]
 801db04:	3304      	adds	r3, #4
 801db06:	61bb      	str	r3, [r7, #24]
 801db08:	69ba      	ldr	r2, [r7, #24]
 801db0a:	683b      	ldr	r3, [r7, #0]
 801db0c:	429a      	cmp	r2, r3
 801db0e:	dbaf      	blt.n	801da70 <_eeprom_write+0x78>
	}
	// Lock EEPROM
	FLASH->PECR |= FLASH_PECR_PELOCK;
 801db10:	4b08      	ldr	r3, [pc, #32]	; (801db34 <_eeprom_write+0x13c>)
 801db12:	685a      	ldr	r2, [r3, #4]
 801db14:	4b07      	ldr	r3, [pc, #28]	; (801db34 <_eeprom_write+0x13c>)
 801db16:	2101      	movs	r1, #1
 801db18:	430a      	orrs	r2, r1
 801db1a:	605a      	str	r2, [r3, #4]
	return true;
 801db1c:	2301      	movs	r3, #1
}
 801db1e:	0018      	movs	r0, r3
 801db20:	46bd      	mov	sp, r7
 801db22:	b008      	add	sp, #32
 801db24:	bd80      	pop	{r7, pc}
 801db26:	46c0      	nop			; (mov r8, r8)
 801db28:	d0000030 	.word	0xd0000030
 801db2c:	08080000 	.word	0x08080000
 801db30:	d0000031 	.word	0xd0000031
 801db34:	40022000 	.word	0x40022000
 801db38:	89abcdef 	.word	0x89abcdef
 801db3c:	02030405 	.word	0x02030405

0801db40 <_eeprom_read>:

/**
 * Read a block of data from the EEPROM
 * Offset is to add an offset to bank start - Offset is aligned don 32b word
 */
bool _eeprom_read(uint8_t bank, uint32_t offset, void * data, int len) {
 801db40:	b580      	push	{r7, lr}
 801db42:	b088      	sub	sp, #32
 801db44:	af00      	add	r7, sp, #0
 801db46:	60b9      	str	r1, [r7, #8]
 801db48:	607a      	str	r2, [r7, #4]
 801db4a:	603b      	str	r3, [r7, #0]
 801db4c:	210f      	movs	r1, #15
 801db4e:	187b      	adds	r3, r7, r1
 801db50:	1c02      	adds	r2, r0, #0
 801db52:	701a      	strb	r2, [r3, #0]
	uint8_t  * _data = (uint8_t *)data;
 801db54:	687b      	ldr	r3, [r7, #4]
 801db56:	617b      	str	r3, [r7, #20]
	uint32_t   _eepromAddr;
	uint32_t   v;

	if ( bank != 0 || (offset + len) > EEPROM_SIZE) {
 801db58:	187b      	adds	r3, r7, r1
 801db5a:	781b      	ldrb	r3, [r3, #0]
 801db5c:	2b00      	cmp	r3, #0
 801db5e:	d106      	bne.n	801db6e <_eeprom_read+0x2e>
 801db60:	683a      	ldr	r2, [r7, #0]
 801db62:	68bb      	ldr	r3, [r7, #8]
 801db64:	18d2      	adds	r2, r2, r3
 801db66:	23c0      	movs	r3, #192	; 0xc0
 801db68:	015b      	lsls	r3, r3, #5
 801db6a:	429a      	cmp	r2, r3
 801db6c:	d906      	bls.n	801db7c <_eeprom_read+0x3c>
	    ITSDK_ERROR_REPORT(ITSDK_ERROR_EEPROM_OUTOFBOUNDS,len);
 801db6e:	683b      	ldr	r3, [r7, #0]
 801db70:	b29b      	uxth	r3, r3
 801db72:	4a2d      	ldr	r2, [pc, #180]	; (801dc28 <_eeprom_read+0xe8>)
 801db74:	0019      	movs	r1, r3
 801db76:	0010      	movs	r0, r2
 801db78:	f7fd fc74 	bl	801b464 <itsdk_error_report>
	}
	_eepromAddr = (uint32_t)(EEPROM_START_ADDR+offset);
 801db7c:	68bb      	ldr	r3, [r7, #8]
 801db7e:	4a2b      	ldr	r2, [pc, #172]	; (801dc2c <_eeprom_read+0xec>)
 801db80:	4694      	mov	ip, r2
 801db82:	4463      	add	r3, ip
 801db84:	61fb      	str	r3, [r7, #28]
	if ( (_eepromAddr & 0x3) != 0 ) {
 801db86:	69fb      	ldr	r3, [r7, #28]
 801db88:	2203      	movs	r2, #3
 801db8a:	4013      	ands	r3, r2
 801db8c:	d006      	beq.n	801db9c <_eeprom_read+0x5c>
	    ITSDK_ERROR_REPORT(ITSDK_ERROR_EEPROM_NOTALIGNED,0);
 801db8e:	4b28      	ldr	r3, [pc, #160]	; (801dc30 <_eeprom_read+0xf0>)
 801db90:	2100      	movs	r1, #0
 801db92:	0018      	movs	r0, r3
 801db94:	f7fd fc66 	bl	801b464 <itsdk_error_report>
	    return false;
 801db98:	2300      	movs	r3, #0
 801db9a:	e040      	b.n	801dc1e <_eeprom_read+0xde>
	}

	// Read data
	for (int i = 0; i < len; i += 4) {
 801db9c:	2300      	movs	r3, #0
 801db9e:	61bb      	str	r3, [r7, #24]
 801dba0:	e038      	b.n	801dc14 <_eeprom_read+0xd4>
		v = __eepromRead(_eepromAddr);
 801dba2:	69fb      	ldr	r3, [r7, #28]
 801dba4:	0018      	movs	r0, r3
 801dba6:	f000 f845 	bl	801dc34 <__eepromRead>
 801dbaa:	0003      	movs	r3, r0
 801dbac:	613b      	str	r3, [r7, #16]
		_data[i]=(v & 0xFF000000) >> 24;
 801dbae:	693b      	ldr	r3, [r7, #16]
 801dbb0:	0e19      	lsrs	r1, r3, #24
 801dbb2:	69bb      	ldr	r3, [r7, #24]
 801dbb4:	697a      	ldr	r2, [r7, #20]
 801dbb6:	18d3      	adds	r3, r2, r3
 801dbb8:	b2ca      	uxtb	r2, r1
 801dbba:	701a      	strb	r2, [r3, #0]
		if ( i+1 < len) _data[i+1]=(v & 0x00FF0000) >> 16;
 801dbbc:	69bb      	ldr	r3, [r7, #24]
 801dbbe:	3301      	adds	r3, #1
 801dbc0:	683a      	ldr	r2, [r7, #0]
 801dbc2:	429a      	cmp	r2, r3
 801dbc4:	dd07      	ble.n	801dbd6 <_eeprom_read+0x96>
 801dbc6:	693b      	ldr	r3, [r7, #16]
 801dbc8:	0c19      	lsrs	r1, r3, #16
 801dbca:	69bb      	ldr	r3, [r7, #24]
 801dbcc:	3301      	adds	r3, #1
 801dbce:	697a      	ldr	r2, [r7, #20]
 801dbd0:	18d3      	adds	r3, r2, r3
 801dbd2:	b2ca      	uxtb	r2, r1
 801dbd4:	701a      	strb	r2, [r3, #0]
		if ( i+2 < len) _data[i+2]=(v & 0x0000FF00) >> 8;
 801dbd6:	69bb      	ldr	r3, [r7, #24]
 801dbd8:	3302      	adds	r3, #2
 801dbda:	683a      	ldr	r2, [r7, #0]
 801dbdc:	429a      	cmp	r2, r3
 801dbde:	dd07      	ble.n	801dbf0 <_eeprom_read+0xb0>
 801dbe0:	693b      	ldr	r3, [r7, #16]
 801dbe2:	0a19      	lsrs	r1, r3, #8
 801dbe4:	69bb      	ldr	r3, [r7, #24]
 801dbe6:	3302      	adds	r3, #2
 801dbe8:	697a      	ldr	r2, [r7, #20]
 801dbea:	18d3      	adds	r3, r2, r3
 801dbec:	b2ca      	uxtb	r2, r1
 801dbee:	701a      	strb	r2, [r3, #0]
		if ( i+3 < len) _data[i+3]=(v & 0x000000FF);
 801dbf0:	69bb      	ldr	r3, [r7, #24]
 801dbf2:	3303      	adds	r3, #3
 801dbf4:	683a      	ldr	r2, [r7, #0]
 801dbf6:	429a      	cmp	r2, r3
 801dbf8:	dd06      	ble.n	801dc08 <_eeprom_read+0xc8>
 801dbfa:	69bb      	ldr	r3, [r7, #24]
 801dbfc:	3303      	adds	r3, #3
 801dbfe:	697a      	ldr	r2, [r7, #20]
 801dc00:	18d3      	adds	r3, r2, r3
 801dc02:	693a      	ldr	r2, [r7, #16]
 801dc04:	b2d2      	uxtb	r2, r2
 801dc06:	701a      	strb	r2, [r3, #0]
		_eepromAddr+=4;
 801dc08:	69fb      	ldr	r3, [r7, #28]
 801dc0a:	3304      	adds	r3, #4
 801dc0c:	61fb      	str	r3, [r7, #28]
	for (int i = 0; i < len; i += 4) {
 801dc0e:	69bb      	ldr	r3, [r7, #24]
 801dc10:	3304      	adds	r3, #4
 801dc12:	61bb      	str	r3, [r7, #24]
 801dc14:	69ba      	ldr	r2, [r7, #24]
 801dc16:	683b      	ldr	r3, [r7, #0]
 801dc18:	429a      	cmp	r2, r3
 801dc1a:	dbc2      	blt.n	801dba2 <_eeprom_read+0x62>
	}
	return true;
 801dc1c:	2301      	movs	r3, #1
}
 801dc1e:	0018      	movs	r0, r3
 801dc20:	46bd      	mov	sp, r7
 801dc22:	b008      	add	sp, #32
 801dc24:	bd80      	pop	{r7, pc}
 801dc26:	46c0      	nop			; (mov r8, r8)
 801dc28:	d0000030 	.word	0xd0000030
 801dc2c:	08080000 	.word	0x08080000
 801dc30:	d0000031 	.word	0xd0000031

0801dc34 <__eepromRead>:


/**
 * Read a word in EEPROM area
 */
uint32_t __eepromRead(uint32_t addr) {
 801dc34:	b580      	push	{r7, lr}
 801dc36:	b082      	sub	sp, #8
 801dc38:	af00      	add	r7, sp, #0
 801dc3a:	6078      	str	r0, [r7, #4]
	return (*(volatile uint32_t*)addr);
 801dc3c:	687b      	ldr	r3, [r7, #4]
 801dc3e:	681b      	ldr	r3, [r3, #0]
}
 801dc40:	0018      	movs	r0, r3
 801dc42:	46bd      	mov	sp, r7
 801dc44:	b002      	add	sp, #8
 801dc46:	bd80      	pop	{r7, pc}

0801dc48 <__eepromWrite>:

/**
 * Write a word in EEPROM area
 * Return false when an error occured
 */
bool __eepromWrite(uint32_t addr, uint32_t v) {
 801dc48:	b580      	push	{r7, lr}
 801dc4a:	b084      	sub	sp, #16
 801dc4c:	af00      	add	r7, sp, #0
 801dc4e:	6078      	str	r0, [r7, #4]
 801dc50:	6039      	str	r1, [r7, #0]

	uint16_t tmout = 10000;
 801dc52:	230e      	movs	r3, #14
 801dc54:	18fb      	adds	r3, r7, r3
 801dc56:	4a20      	ldr	r2, [pc, #128]	; (801dcd8 <__eepromWrite+0x90>)
 801dc58:	801a      	strh	r2, [r3, #0]
	while ( (FLASH->SR & FLASH_SR_BSY) && tmout) tmout--;
 801dc5a:	e005      	b.n	801dc68 <__eepromWrite+0x20>
 801dc5c:	210e      	movs	r1, #14
 801dc5e:	187b      	adds	r3, r7, r1
 801dc60:	881a      	ldrh	r2, [r3, #0]
 801dc62:	187b      	adds	r3, r7, r1
 801dc64:	3a01      	subs	r2, #1
 801dc66:	801a      	strh	r2, [r3, #0]
 801dc68:	4b1c      	ldr	r3, [pc, #112]	; (801dcdc <__eepromWrite+0x94>)
 801dc6a:	699b      	ldr	r3, [r3, #24]
 801dc6c:	2201      	movs	r2, #1
 801dc6e:	4013      	ands	r3, r2
 801dc70:	d004      	beq.n	801dc7c <__eepromWrite+0x34>
 801dc72:	230e      	movs	r3, #14
 801dc74:	18fb      	adds	r3, r7, r3
 801dc76:	881b      	ldrh	r3, [r3, #0]
 801dc78:	2b00      	cmp	r3, #0
 801dc7a:	d1ef      	bne.n	801dc5c <__eepromWrite+0x14>
	if ( tmout == 0 ) return false;
 801dc7c:	230e      	movs	r3, #14
 801dc7e:	18fb      	adds	r3, r7, r3
 801dc80:	881b      	ldrh	r3, [r3, #0]
 801dc82:	2b00      	cmp	r3, #0
 801dc84:	d101      	bne.n	801dc8a <__eepromWrite+0x42>
 801dc86:	2300      	movs	r3, #0
 801dc88:	e021      	b.n	801dcce <__eepromWrite+0x86>

	// Clear the FTDW bit (data will be erased before write if it non zero)
	FLASH->PECR &= (uint32_t)(~(uint32_t)FLASH_PECR_FIX);
 801dc8a:	4b14      	ldr	r3, [pc, #80]	; (801dcdc <__eepromWrite+0x94>)
 801dc8c:	685a      	ldr	r2, [r3, #4]
 801dc8e:	4b13      	ldr	r3, [pc, #76]	; (801dcdc <__eepromWrite+0x94>)
 801dc90:	4913      	ldr	r1, [pc, #76]	; (801dce0 <__eepromWrite+0x98>)
 801dc92:	400a      	ands	r2, r1
 801dc94:	605a      	str	r2, [r3, #4]

	*(volatile uint32_t *)addr = v;
 801dc96:	687b      	ldr	r3, [r7, #4]
 801dc98:	683a      	ldr	r2, [r7, #0]
 801dc9a:	601a      	str	r2, [r3, #0]

	while ( (FLASH->SR & FLASH_SR_BSY) && tmout) tmout--;
 801dc9c:	e005      	b.n	801dcaa <__eepromWrite+0x62>
 801dc9e:	210e      	movs	r1, #14
 801dca0:	187b      	adds	r3, r7, r1
 801dca2:	881a      	ldrh	r2, [r3, #0]
 801dca4:	187b      	adds	r3, r7, r1
 801dca6:	3a01      	subs	r2, #1
 801dca8:	801a      	strh	r2, [r3, #0]
 801dcaa:	4b0c      	ldr	r3, [pc, #48]	; (801dcdc <__eepromWrite+0x94>)
 801dcac:	699b      	ldr	r3, [r3, #24]
 801dcae:	2201      	movs	r2, #1
 801dcb0:	4013      	ands	r3, r2
 801dcb2:	d004      	beq.n	801dcbe <__eepromWrite+0x76>
 801dcb4:	230e      	movs	r3, #14
 801dcb6:	18fb      	adds	r3, r7, r3
 801dcb8:	881b      	ldrh	r3, [r3, #0]
 801dcba:	2b00      	cmp	r3, #0
 801dcbc:	d1ef      	bne.n	801dc9e <__eepromWrite+0x56>
	if ( tmout == 0 ) return false;
 801dcbe:	230e      	movs	r3, #14
 801dcc0:	18fb      	adds	r3, r7, r3
 801dcc2:	881b      	ldrh	r3, [r3, #0]
 801dcc4:	2b00      	cmp	r3, #0
 801dcc6:	d101      	bne.n	801dccc <__eepromWrite+0x84>
 801dcc8:	2300      	movs	r3, #0
 801dcca:	e000      	b.n	801dcce <__eepromWrite+0x86>

	return true;
 801dccc:	2301      	movs	r3, #1
}
 801dcce:	0018      	movs	r0, r3
 801dcd0:	46bd      	mov	sp, r7
 801dcd2:	b004      	add	sp, #16
 801dcd4:	bd80      	pop	{r7, pc}
 801dcd6:	46c0      	nop			; (mov r8, r8)
 801dcd8:	00002710 	.word	0x00002710
 801dcdc:	40022000 	.word	0x40022000
 801dce0:	fffffeff 	.word	0xfffffeff

0801dce4 <HAL_UARTEx_WakeupCallback>:
}

#endif

#if  ( ITSDK_LOWPOWER_MOD & ( __LOWPWR_MODE_WAKE_LPUART | __LOWPWR_MODE_WAKE_UART2 | __LOWPWR_MODE_WAKE_UART1 )  ) > 0
void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart) {
 801dce4:	b580      	push	{r7, lr}
 801dce6:	b082      	sub	sp, #8
 801dce8:	af00      	add	r7, sp, #0
 801dcea:	6078      	str	r0, [r7, #4]
   __lowPower_wakeup_reason=LOWPWR_WAKEUP_UART;
 801dcec:	4b03      	ldr	r3, [pc, #12]	; (801dcfc <HAL_UARTEx_WakeupCallback+0x18>)
 801dcee:	2203      	movs	r2, #3
 801dcf0:	701a      	strb	r2, [r3, #0]
}
 801dcf2:	46c0      	nop			; (mov r8, r8)
 801dcf4:	46bd      	mov	sp, r7
 801dcf6:	b002      	add	sp, #8
 801dcf8:	bd80      	pop	{r7, pc}
 801dcfa:	46c0      	nop			; (mov r8, r8)
 801dcfc:	200000b0 	.word	0x200000b0

0801dd00 <rtc_getTimestampMs>:

#ifndef __WE_HAVE_A_LOT_OF_FLASH
uint32_t __rtc_days = 0;			// day index since the begining
uint32_t __rtc_lastTick = 0;		// time in ms in the day
#endif
uint64_t rtc_getTimestampMs() {
 801dd00:	b5b0      	push	{r4, r5, r7, lr}
 801dd02:	af00      	add	r7, sp, #0
	return rtc_getTimestampMsRaw(true);
 801dd04:	2001      	movs	r0, #1
 801dd06:	f000 f807 	bl	801dd18 <rtc_getTimestampMsRaw>
 801dd0a:	0003      	movs	r3, r0
 801dd0c:	000c      	movs	r4, r1
}
 801dd0e:	0018      	movs	r0, r3
 801dd10:	0021      	movs	r1, r4
 801dd12:	46bd      	mov	sp, r7
 801dd14:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801dd18 <rtc_getTimestampMsRaw>:

uint64_t rtc_getTimestampMsRaw(bool adjust) {
 801dd18:	b5f0      	push	{r4, r5, r6, r7, lr}
 801dd1a:	b095      	sub	sp, #84	; 0x54
 801dd1c:	af00      	add	r7, sp, #0
 801dd1e:	0003      	movs	r3, r0
 801dd20:	222f      	movs	r2, #47	; 0x2f
 801dd22:	18ba      	adds	r2, r7, r2
 801dd24:	7013      	strb	r3, [r2, #0]
	uint64_t ms = (timestamp*1000) + ((1000*(uint32_t)(_time.SecondFraction-_time.SubSeconds))/_time.SecondFraction+1);
#else
	RTC_TimeTypeDef _time;
	RTC_DateTypeDef _date;
	uint64_t ms;
	HAL_RTC_GetTime(&hrtc, &_time, RTC_FORMAT_BIN);
 801dd26:	210c      	movs	r1, #12
 801dd28:	000c      	movs	r4, r1
 801dd2a:	2328      	movs	r3, #40	; 0x28
 801dd2c:	469c      	mov	ip, r3
 801dd2e:	44bc      	add	ip, r7
 801dd30:	4461      	add	r1, ip
 801dd32:	4b61      	ldr	r3, [pc, #388]	; (801deb8 <rtc_getTimestampMsRaw+0x1a0>)
 801dd34:	2200      	movs	r2, #0
 801dd36:	0018      	movs	r0, r3
 801dd38:	f7e7 fe70 	bl	8005a1c <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &_date, RTC_FORMAT_BIN);
 801dd3c:	2308      	movs	r3, #8
 801dd3e:	2028      	movs	r0, #40	; 0x28
 801dd40:	183a      	adds	r2, r7, r0
 801dd42:	18d1      	adds	r1, r2, r3
 801dd44:	4b5c      	ldr	r3, [pc, #368]	; (801deb8 <rtc_getTimestampMsRaw+0x1a0>)
 801dd46:	2200      	movs	r2, #0
 801dd48:	0018      	movs	r0, r3
 801dd4a:	f7e7 ff71 	bl	8005c30 <HAL_RTC_GetDate>
	ms  = (uint32_t)_time.Hours*3600*1000;
 801dd4e:	0021      	movs	r1, r4
 801dd50:	2028      	movs	r0, #40	; 0x28
 801dd52:	183b      	adds	r3, r7, r0
 801dd54:	185b      	adds	r3, r3, r1
 801dd56:	781b      	ldrb	r3, [r3, #0]
 801dd58:	001a      	movs	r2, r3
 801dd5a:	4b58      	ldr	r3, [pc, #352]	; (801debc <rtc_getTimestampMsRaw+0x1a4>)
 801dd5c:	4353      	muls	r3, r2
 801dd5e:	64bb      	str	r3, [r7, #72]	; 0x48
 801dd60:	2300      	movs	r3, #0
 801dd62:	64fb      	str	r3, [r7, #76]	; 0x4c
	ms += (uint32_t)_time.Minutes*60*1000;
 801dd64:	183a      	adds	r2, r7, r0
 801dd66:	1853      	adds	r3, r2, r1
 801dd68:	785b      	ldrb	r3, [r3, #1]
 801dd6a:	001a      	movs	r2, r3
 801dd6c:	4b54      	ldr	r3, [pc, #336]	; (801dec0 <rtc_getTimestampMsRaw+0x1a8>)
 801dd6e:	4353      	muls	r3, r2
 801dd70:	623b      	str	r3, [r7, #32]
 801dd72:	2300      	movs	r3, #0
 801dd74:	627b      	str	r3, [r7, #36]	; 0x24
 801dd76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801dd78:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 801dd7a:	6a38      	ldr	r0, [r7, #32]
 801dd7c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801dd7e:	181b      	adds	r3, r3, r0
 801dd80:	414c      	adcs	r4, r1
 801dd82:	64bb      	str	r3, [r7, #72]	; 0x48
 801dd84:	64fc      	str	r4, [r7, #76]	; 0x4c
	ms += (uint32_t)_time.Seconds*1000;
 801dd86:	210c      	movs	r1, #12
 801dd88:	0008      	movs	r0, r1
 801dd8a:	2328      	movs	r3, #40	; 0x28
 801dd8c:	18fa      	adds	r2, r7, r3
 801dd8e:	1853      	adds	r3, r2, r1
 801dd90:	789b      	ldrb	r3, [r3, #2]
 801dd92:	001a      	movs	r2, r3
 801dd94:	0013      	movs	r3, r2
 801dd96:	015b      	lsls	r3, r3, #5
 801dd98:	1a9b      	subs	r3, r3, r2
 801dd9a:	009b      	lsls	r3, r3, #2
 801dd9c:	189b      	adds	r3, r3, r2
 801dd9e:	00db      	lsls	r3, r3, #3
 801dda0:	61bb      	str	r3, [r7, #24]
 801dda2:	2300      	movs	r3, #0
 801dda4:	61fb      	str	r3, [r7, #28]
 801dda6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801dda8:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 801ddaa:	69b9      	ldr	r1, [r7, #24]
 801ddac:	69fa      	ldr	r2, [r7, #28]
 801ddae:	185b      	adds	r3, r3, r1
 801ddb0:	4154      	adcs	r4, r2
 801ddb2:	64bb      	str	r3, [r7, #72]	; 0x48
 801ddb4:	64fc      	str	r4, [r7, #76]	; 0x4c
	ms += ((1000*(uint32_t)(_time.SecondFraction-_time.SubSeconds))/_time.SecondFraction+1);
 801ddb6:	0001      	movs	r1, r0
 801ddb8:	2028      	movs	r0, #40	; 0x28
 801ddba:	183b      	adds	r3, r7, r0
 801ddbc:	185b      	adds	r3, r3, r1
 801ddbe:	689a      	ldr	r2, [r3, #8]
 801ddc0:	183b      	adds	r3, r7, r0
 801ddc2:	185b      	adds	r3, r3, r1
 801ddc4:	685b      	ldr	r3, [r3, #4]
 801ddc6:	1ad2      	subs	r2, r2, r3
 801ddc8:	0013      	movs	r3, r2
 801ddca:	015b      	lsls	r3, r3, #5
 801ddcc:	1a9b      	subs	r3, r3, r2
 801ddce:	009b      	lsls	r3, r3, #2
 801ddd0:	189b      	adds	r3, r3, r2
 801ddd2:	00db      	lsls	r3, r3, #3
 801ddd4:	001a      	movs	r2, r3
 801ddd6:	183b      	adds	r3, r7, r0
 801ddd8:	185b      	adds	r3, r3, r1
 801ddda:	689b      	ldr	r3, [r3, #8]
 801dddc:	0019      	movs	r1, r3
 801ddde:	0010      	movs	r0, r2
 801dde0:	f7e2 f99a 	bl	8000118 <__udivsi3>
 801dde4:	0003      	movs	r3, r0
 801dde6:	3301      	adds	r3, #1
 801dde8:	613b      	str	r3, [r7, #16]
 801ddea:	2300      	movs	r3, #0
 801ddec:	617b      	str	r3, [r7, #20]
 801ddee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801ddf0:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 801ddf2:	6939      	ldr	r1, [r7, #16]
 801ddf4:	697a      	ldr	r2, [r7, #20]
 801ddf6:	185b      	adds	r3, r3, r1
 801ddf8:	4154      	adcs	r4, r2
 801ddfa:	64bb      	str	r3, [r7, #72]	; 0x48
 801ddfc:	64fc      	str	r4, [r7, #76]	; 0x4c

	if ( ms < __rtc_lastTick ) {
 801ddfe:	4b31      	ldr	r3, [pc, #196]	; (801dec4 <rtc_getTimestampMsRaw+0x1ac>)
 801de00:	681b      	ldr	r3, [r3, #0]
 801de02:	001d      	movs	r5, r3
 801de04:	2300      	movs	r3, #0
 801de06:	001e      	movs	r6, r3
 801de08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801de0a:	42b3      	cmp	r3, r6
 801de0c:	d305      	bcc.n	801de1a <rtc_getTimestampMsRaw+0x102>
 801de0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801de10:	42b3      	cmp	r3, r6
 801de12:	d107      	bne.n	801de24 <rtc_getTimestampMsRaw+0x10c>
 801de14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801de16:	42ab      	cmp	r3, r5
 801de18:	d204      	bcs.n	801de24 <rtc_getTimestampMsRaw+0x10c>
		// day has changed
		__rtc_days++;
 801de1a:	4b2b      	ldr	r3, [pc, #172]	; (801dec8 <rtc_getTimestampMsRaw+0x1b0>)
 801de1c:	681b      	ldr	r3, [r3, #0]
 801de1e:	1c5a      	adds	r2, r3, #1
 801de20:	4b29      	ldr	r3, [pc, #164]	; (801dec8 <rtc_getTimestampMsRaw+0x1b0>)
 801de22:	601a      	str	r2, [r3, #0]
	}
	__rtc_lastTick = ms;
 801de24:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801de26:	4b27      	ldr	r3, [pc, #156]	; (801dec4 <rtc_getTimestampMsRaw+0x1ac>)
 801de28:	601a      	str	r2, [r3, #0]
	ms = ( uint64_t )((uint64_t)__rtc_days*3600000L*24L)+(uint64_t)ms;
 801de2a:	4b27      	ldr	r3, [pc, #156]	; (801dec8 <rtc_getTimestampMsRaw+0x1b0>)
 801de2c:	681b      	ldr	r3, [r3, #0]
 801de2e:	60bb      	str	r3, [r7, #8]
 801de30:	2300      	movs	r3, #0
 801de32:	60fb      	str	r3, [r7, #12]
 801de34:	4a25      	ldr	r2, [pc, #148]	; (801decc <rtc_getTimestampMsRaw+0x1b4>)
 801de36:	2300      	movs	r3, #0
 801de38:	68b8      	ldr	r0, [r7, #8]
 801de3a:	68f9      	ldr	r1, [r7, #12]
 801de3c:	f7e2 fb64 	bl	8000508 <__aeabi_lmul>
 801de40:	0003      	movs	r3, r0
 801de42:	000c      	movs	r4, r1
 801de44:	0019      	movs	r1, r3
 801de46:	0022      	movs	r2, r4
 801de48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801de4a:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 801de4c:	185b      	adds	r3, r3, r1
 801de4e:	4154      	adcs	r4, r2
 801de50:	64bb      	str	r3, [r7, #72]	; 0x48
 801de52:	64fc      	str	r4, [r7, #76]	; 0x4c
#endif
	// apply the RTC clock correction and add previous offset
	#if ITSDK_WITH_CLK_ADJUST > 0
		if (adjust && __rtc_init > 0) {
 801de54:	232f      	movs	r3, #47	; 0x2f
 801de56:	18fb      	adds	r3, r7, r3
 801de58:	781b      	ldrb	r3, [r3, #0]
 801de5a:	2b00      	cmp	r3, #0
 801de5c:	d024      	beq.n	801dea8 <rtc_getTimestampMsRaw+0x190>
 801de5e:	4b1c      	ldr	r3, [pc, #112]	; (801ded0 <rtc_getTimestampMsRaw+0x1b8>)
 801de60:	781b      	ldrb	r3, [r3, #0]
 801de62:	2b00      	cmp	r3, #0
 801de64:	d020      	beq.n	801dea8 <rtc_getTimestampMsRaw+0x190>
			ms = (ms * (uint64_t)__rtc_currentRatio) / 1000L;
 801de66:	4b1b      	ldr	r3, [pc, #108]	; (801ded4 <rtc_getTimestampMsRaw+0x1bc>)
 801de68:	681b      	ldr	r3, [r3, #0]
 801de6a:	603b      	str	r3, [r7, #0]
 801de6c:	2300      	movs	r3, #0
 801de6e:	607b      	str	r3, [r7, #4]
 801de70:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801de72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801de74:	6838      	ldr	r0, [r7, #0]
 801de76:	6879      	ldr	r1, [r7, #4]
 801de78:	f7e2 fb46 	bl	8000508 <__aeabi_lmul>
 801de7c:	0003      	movs	r3, r0
 801de7e:	000c      	movs	r4, r1
 801de80:	0018      	movs	r0, r3
 801de82:	0021      	movs	r1, r4
 801de84:	22fa      	movs	r2, #250	; 0xfa
 801de86:	0092      	lsls	r2, r2, #2
 801de88:	2300      	movs	r3, #0
 801de8a:	f7e2 fb1d 	bl	80004c8 <__aeabi_uldivmod>
 801de8e:	0003      	movs	r3, r0
 801de90:	000c      	movs	r4, r1
 801de92:	64bb      	str	r3, [r7, #72]	; 0x48
 801de94:	64fc      	str	r4, [r7, #76]	; 0x4c
			ms += __rtc_offset;
 801de96:	4b10      	ldr	r3, [pc, #64]	; (801ded8 <rtc_getTimestampMsRaw+0x1c0>)
 801de98:	685c      	ldr	r4, [r3, #4]
 801de9a:	681b      	ldr	r3, [r3, #0]
 801de9c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 801de9e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801dea0:	185b      	adds	r3, r3, r1
 801dea2:	4154      	adcs	r4, r2
 801dea4:	64bb      	str	r3, [r7, #72]	; 0x48
 801dea6:	64fc      	str	r4, [r7, #76]	; 0x4c
		}
	#else
		ms = (adjust)?(ms * ITSDK_CLK_CORRECTION) / 1000L:ms;
	#endif
	return ms;
 801dea8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801deaa:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
}
 801deac:	0018      	movs	r0, r3
 801deae:	0021      	movs	r1, r4
 801deb0:	46bd      	mov	sp, r7
 801deb2:	b015      	add	sp, #84	; 0x54
 801deb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801deb6:	46c0      	nop			; (mov r8, r8)
 801deb8:	200013dc 	.word	0x200013dc
 801debc:	0036ee80 	.word	0x0036ee80
 801dec0:	0000ea60 	.word	0x0000ea60
 801dec4:	200012e0 	.word	0x200012e0
 801dec8:	200012dc 	.word	0x200012dc
 801decc:	05265c00 	.word	0x05265c00
 801ded0:	200012d8 	.word	0x200012d8
 801ded4:	20001728 	.word	0x20001728
 801ded8:	20001730 	.word	0x20001730

0801dedc <rtc_resetTime>:


/**
 * Reset RTC to 00:00:00.00 at startup
 */
void rtc_resetTime() {
 801dedc:	b580      	push	{r7, lr}
 801dede:	b086      	sub	sp, #24
 801dee0:	af00      	add	r7, sp, #0
	RTC_DateTypeDef _date;
	_date.Year = 0;
 801dee2:	2114      	movs	r1, #20
 801dee4:	187b      	adds	r3, r7, r1
 801dee6:	2200      	movs	r2, #0
 801dee8:	70da      	strb	r2, [r3, #3]
	_date.Month = 1;
 801deea:	187b      	adds	r3, r7, r1
 801deec:	2201      	movs	r2, #1
 801deee:	705a      	strb	r2, [r3, #1]
	_date.Date = 1;
 801def0:	187b      	adds	r3, r7, r1
 801def2:	2201      	movs	r2, #1
 801def4:	709a      	strb	r2, [r3, #2]
	HAL_RTC_SetDate(&hrtc,&_date,RTC_FORMAT_BIN);
 801def6:	1879      	adds	r1, r7, r1
 801def8:	4b11      	ldr	r3, [pc, #68]	; (801df40 <rtc_resetTime+0x64>)
 801defa:	2200      	movs	r2, #0
 801defc:	0018      	movs	r0, r3
 801defe:	f7e7 fde9 	bl	8005ad4 <HAL_RTC_SetDate>

	RTC_TimeTypeDef _time;
	_time.Hours 		 = 0x0;
 801df02:	003b      	movs	r3, r7
 801df04:	2200      	movs	r2, #0
 801df06:	701a      	strb	r2, [r3, #0]
	_time.Minutes 		 = 0x0;
 801df08:	003b      	movs	r3, r7
 801df0a:	2200      	movs	r2, #0
 801df0c:	705a      	strb	r2, [r3, #1]
	_time.Seconds 		 = 0x0;
 801df0e:	003b      	movs	r3, r7
 801df10:	2200      	movs	r2, #0
 801df12:	709a      	strb	r2, [r3, #2]
	_time.SubSeconds  	 = 0x00;
 801df14:	003b      	movs	r3, r7
 801df16:	2200      	movs	r2, #0
 801df18:	605a      	str	r2, [r3, #4]
	_time.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 801df1a:	003b      	movs	r3, r7
 801df1c:	2200      	movs	r2, #0
 801df1e:	60da      	str	r2, [r3, #12]
	_time.StoreOperation = RTC_STOREOPERATION_RESET;
 801df20:	003b      	movs	r3, r7
 801df22:	2200      	movs	r2, #0
 801df24:	611a      	str	r2, [r3, #16]
	HAL_RTC_SetTime(&hrtc, &_time, RTC_FORMAT_BIN);
 801df26:	0039      	movs	r1, r7
 801df28:	4b05      	ldr	r3, [pc, #20]	; (801df40 <rtc_resetTime+0x64>)
 801df2a:	2200      	movs	r2, #0
 801df2c:	0018      	movs	r0, r3
 801df2e:	f7e7 fcb1 	bl	8005894 <HAL_RTC_SetTime>
	__rtc_lastTick = 0;
 801df32:	4b04      	ldr	r3, [pc, #16]	; (801df44 <rtc_resetTime+0x68>)
 801df34:	2200      	movs	r2, #0
 801df36:	601a      	str	r2, [r3, #0]
}
 801df38:	46c0      	nop			; (mov r8, r8)
 801df3a:	46bd      	mov	sp, r7
 801df3c:	b006      	add	sp, #24
 801df3e:	bd80      	pop	{r7, pc}
 801df40:	200013dc 	.word	0x200013dc
 801df44:	200012e0 	.word	0x200012e0

0801df48 <HAL_RTCEx_WakeUpTimerEventCallback>:
/**
 * RCT Interrupt handler allowing to chain different function
 */
rtc_irq_chain_t __rtc_irq_chain = { NULL, NULL };
void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 801df48:	b580      	push	{r7, lr}
 801df4a:	b084      	sub	sp, #16
 801df4c:	af00      	add	r7, sp, #0
 801df4e:	6078      	str	r0, [r7, #4]
	rtc_irq_chain_t * c = &__rtc_irq_chain;
 801df50:	4b0f      	ldr	r3, [pc, #60]	; (801df90 <HAL_RTCEx_WakeUpTimerEventCallback+0x48>)
 801df52:	60fb      	str	r3, [r7, #12]
	while ( c != NULL ) {
 801df54:	e00c      	b.n	801df70 <HAL_RTCEx_WakeUpTimerEventCallback+0x28>
		void (*p)(RTC_HandleTypeDef *h) = c->irq_func;
 801df56:	68fb      	ldr	r3, [r7, #12]
 801df58:	681b      	ldr	r3, [r3, #0]
 801df5a:	60bb      	str	r3, [r7, #8]
		if ( p != NULL ) {
 801df5c:	68bb      	ldr	r3, [r7, #8]
 801df5e:	2b00      	cmp	r3, #0
 801df60:	d003      	beq.n	801df6a <HAL_RTCEx_WakeUpTimerEventCallback+0x22>
			p(hrtc);
 801df62:	687a      	ldr	r2, [r7, #4]
 801df64:	68bb      	ldr	r3, [r7, #8]
 801df66:	0010      	movs	r0, r2
 801df68:	4798      	blx	r3
		}
		c = c->next;
 801df6a:	68fb      	ldr	r3, [r7, #12]
 801df6c:	685b      	ldr	r3, [r3, #4]
 801df6e:	60fb      	str	r3, [r7, #12]
	while ( c != NULL ) {
 801df70:	68fb      	ldr	r3, [r7, #12]
 801df72:	2b00      	cmp	r3, #0
 801df74:	d1ef      	bne.n	801df56 <HAL_RTCEx_WakeUpTimerEventCallback+0xe>
	}
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 801df76:	4b07      	ldr	r3, [pc, #28]	; (801df94 <HAL_RTCEx_WakeUpTimerEventCallback+0x4c>)
 801df78:	681a      	ldr	r2, [r3, #0]
 801df7a:	4b06      	ldr	r3, [pc, #24]	; (801df94 <HAL_RTCEx_WakeUpTimerEventCallback+0x4c>)
 801df7c:	2104      	movs	r1, #4
 801df7e:	430a      	orrs	r2, r1
 801df80:	601a      	str	r2, [r3, #0]
	__lowPower_wakeup_reason=LOWPWR_WAKEUP_RTC;
 801df82:	4b05      	ldr	r3, [pc, #20]	; (801df98 <HAL_RTCEx_WakeUpTimerEventCallback+0x50>)
 801df84:	2200      	movs	r2, #0
 801df86:	701a      	strb	r2, [r3, #0]
}
 801df88:	46c0      	nop			; (mov r8, r8)
 801df8a:	46bd      	mov	sp, r7
 801df8c:	b004      	add	sp, #16
 801df8e:	bd80      	pop	{r7, pc}
 801df90:	200012e4 	.word	0x200012e4
 801df94:	40007000 	.word	0x40007000
 801df98:	200000b0 	.word	0x200000b0

0801df9c <rtc_adjustTime>:

/**
 * Manage rtc clock adjustement / (re)evaluate the clock ratio
 * Can be called at anytime to reajust
 */
void rtc_adjustTime() {
 801df9c:	b590      	push	{r4, r7, lr}
 801df9e:	b083      	sub	sp, #12
 801dfa0:	af00      	add	r7, sp, #0
#if ITSDK_WITH_CLK_ADJUST > 0
	uint32_t newRatio=rtc_calcClockRatio();
 801dfa2:	f000 f825 	bl	801dff0 <rtc_calcClockRatio>
 801dfa6:	0003      	movs	r3, r0
 801dfa8:	607b      	str	r3, [r7, #4]
	if (__rtc_init > 0) {
 801dfaa:	4b0e      	ldr	r3, [pc, #56]	; (801dfe4 <rtc_adjustTime+0x48>)
 801dfac:	781b      	ldrb	r3, [r3, #0]
 801dfae:	2b00      	cmp	r3, #0
 801dfb0:	d009      	beq.n	801dfc6 <rtc_adjustTime+0x2a>
		__rtc_offset = rtc_getTimestampMs();
 801dfb2:	f7ff fea5 	bl	801dd00 <rtc_getTimestampMs>
 801dfb6:	0003      	movs	r3, r0
 801dfb8:	000c      	movs	r4, r1
 801dfba:	4a0b      	ldr	r2, [pc, #44]	; (801dfe8 <rtc_adjustTime+0x4c>)
 801dfbc:	6013      	str	r3, [r2, #0]
 801dfbe:	6054      	str	r4, [r2, #4]
		rtc_resetTime();
 801dfc0:	f7ff ff8c 	bl	801dedc <rtc_resetTime>
 801dfc4:	e004      	b.n	801dfd0 <rtc_adjustTime+0x34>
	} else {
		__rtc_offset=0;
 801dfc6:	4a08      	ldr	r2, [pc, #32]	; (801dfe8 <rtc_adjustTime+0x4c>)
 801dfc8:	2300      	movs	r3, #0
 801dfca:	2400      	movs	r4, #0
 801dfcc:	6013      	str	r3, [r2, #0]
 801dfce:	6054      	str	r4, [r2, #4]
	}
	__rtc_init=1;
 801dfd0:	4b04      	ldr	r3, [pc, #16]	; (801dfe4 <rtc_adjustTime+0x48>)
 801dfd2:	2201      	movs	r2, #1
 801dfd4:	701a      	strb	r2, [r3, #0]
	__rtc_currentRatio=newRatio;
 801dfd6:	4b05      	ldr	r3, [pc, #20]	; (801dfec <rtc_adjustTime+0x50>)
 801dfd8:	687a      	ldr	r2, [r7, #4]
 801dfda:	601a      	str	r2, [r3, #0]
#endif
}
 801dfdc:	46c0      	nop			; (mov r8, r8)
 801dfde:	46bd      	mov	sp, r7
 801dfe0:	b003      	add	sp, #12
 801dfe2:	bd90      	pop	{r4, r7, pc}
 801dfe4:	200012d8 	.word	0x200012d8
 801dfe8:	20001730 	.word	0x20001730
 801dfec:	20001728 	.word	0x20001728

0801dff0 <rtc_calcClockRatio>:


/**
 * Return the corrected clockRatio => realClock = (calcClockRatio * seenClock)/1000
 */
uint32_t rtc_calcClockRatio() {
 801dff0:	b580      	push	{r7, lr}
 801dff2:	af00      	add	r7, sp, #0
	}

	return (uint32_t)ratio;

#else
	return ITSDK_CLK_CORRECTION;
 801dff4:	23fa      	movs	r3, #250	; 0xfa
 801dff6:	009b      	lsls	r3, r3, #2
#endif
}
 801dff8:	0018      	movs	r0, r3
 801dffa:	46bd      	mov	sp, r7
 801dffc:	bd80      	pop	{r7, pc}
	...

0801e000 <HAL_IncTick>:

/**
 * Action to be executed on Systick
 * The name vary depending on the Firwmare version ... ST, you make me crazy !
 */
void HAL_IncTick(void) {
 801e000:	b580      	push	{r7, lr}
 801e002:	af00      	add	r7, sp, #0
	// add 1ms to the global counter
	if (__enable_systick) itsdk_time_add_us((__TICK_DURATION_US*__systick_ratio)/1000);
 801e004:	4b10      	ldr	r3, [pc, #64]	; (801e048 <HAL_IncTick+0x48>)
 801e006:	781b      	ldrb	r3, [r3, #0]
 801e008:	2b00      	cmp	r3, #0
 801e00a:	d011      	beq.n	801e030 <HAL_IncTick+0x30>
 801e00c:	4b0f      	ldr	r3, [pc, #60]	; (801e04c <HAL_IncTick+0x4c>)
 801e00e:	681a      	ldr	r2, [r3, #0]
 801e010:	0013      	movs	r3, r2
 801e012:	015b      	lsls	r3, r3, #5
 801e014:	1a9b      	subs	r3, r3, r2
 801e016:	009b      	lsls	r3, r3, #2
 801e018:	189b      	adds	r3, r3, r2
 801e01a:	009b      	lsls	r3, r3, #2
 801e01c:	001a      	movs	r2, r3
 801e01e:	23fa      	movs	r3, #250	; 0xfa
 801e020:	0099      	lsls	r1, r3, #2
 801e022:	0010      	movs	r0, r2
 801e024:	f7e2 f878 	bl	8000118 <__udivsi3>
 801e028:	0003      	movs	r3, r0
 801e02a:	0018      	movs	r0, r3
 801e02c:	f7fe fafa 	bl	801c624 <itsdk_time_add_us>
	uwTick++;
 801e030:	4b07      	ldr	r3, [pc, #28]	; (801e050 <HAL_IncTick+0x50>)
 801e032:	681b      	ldr	r3, [r3, #0]
 801e034:	1c5a      	adds	r2, r3, #1
 801e036:	4b06      	ldr	r3, [pc, #24]	; (801e050 <HAL_IncTick+0x50>)
 801e038:	601a      	str	r2, [r3, #0]
	__lowPower_wakeup_reason = LOWPWR_WAKEUP_SYSTICK;
 801e03a:	4b06      	ldr	r3, [pc, #24]	; (801e054 <HAL_IncTick+0x54>)
 801e03c:	2202      	movs	r2, #2
 801e03e:	701a      	strb	r2, [r3, #0]
}
 801e040:	46c0      	nop			; (mov r8, r8)
 801e042:	46bd      	mov	sp, r7
 801e044:	bd80      	pop	{r7, pc}
 801e046:	46c0      	nop			; (mov r8, r8)
 801e048:	200000b1 	.word	0x200000b1
 801e04c:	200000b4 	.word	0x200000b4
 801e050:	20001530 	.word	0x20001530
 801e054:	200000b0 	.word	0x200000b0

0801e058 <systick_adjustTime>:


/**
 * Update the correction tickRatio => realTicks = (calcTickRatio * seenTicks)/1000
 */
void systick_adjustTime() {
 801e058:	b590      	push	{r4, r7, lr}
 801e05a:	b089      	sub	sp, #36	; 0x24
 801e05c:	af00      	add	r7, sp, #0
#if ITSDK_WITH_CLK_ADJUST > 0
	uint64_t start_clk = itsdk_time_get_us()/1000;
 801e05e:	f7fe fb7b 	bl	801c758 <itsdk_time_get_us>
 801e062:	22fa      	movs	r2, #250	; 0xfa
 801e064:	0092      	lsls	r2, r2, #2
 801e066:	2300      	movs	r3, #0
 801e068:	f7e2 fa2e 	bl	80004c8 <__aeabi_uldivmod>
 801e06c:	0003      	movs	r3, r0
 801e06e:	000c      	movs	r4, r1
 801e070:	613b      	str	r3, [r7, #16]
 801e072:	617c      	str	r4, [r7, #20]
	#if ITSDK_CLK_BEST_SOURCE == __CLK_BEST_SRC_RTC
		#if ITSDK_WITH_RTC == __RTC_ENABLED
			uint64_t start_rtc = rtc_getTimestampMsRaw(false);
 801e074:	2000      	movs	r0, #0
 801e076:	f7ff fe4f 	bl	801dd18 <rtc_getTimestampMsRaw>
 801e07a:	0003      	movs	r3, r0
 801e07c:	000c      	movs	r4, r1
 801e07e:	60bb      	str	r3, [r7, #8]
 801e080:	60fc      	str	r4, [r7, #12]
			while ( (rtc_getTimestampMsRaw(false)-start_rtc) < 200 );	// wait for 200ms
 801e082:	46c0      	nop			; (mov r8, r8)
 801e084:	2000      	movs	r0, #0
 801e086:	f7ff fe47 	bl	801dd18 <rtc_getTimestampMsRaw>
 801e08a:	000a      	movs	r2, r1
 801e08c:	0001      	movs	r1, r0
 801e08e:	68bb      	ldr	r3, [r7, #8]
 801e090:	68fc      	ldr	r4, [r7, #12]
 801e092:	1ac9      	subs	r1, r1, r3
 801e094:	41a2      	sbcs	r2, r4
 801e096:	000b      	movs	r3, r1
 801e098:	0014      	movs	r4, r2
 801e09a:	2c00      	cmp	r4, #0
 801e09c:	d103      	bne.n	801e0a6 <systick_adjustTime+0x4e>
 801e09e:	d1f1      	bne.n	801e084 <systick_adjustTime+0x2c>
 801e0a0:	2bc7      	cmp	r3, #199	; 0xc7
 801e0a2:	d800      	bhi.n	801e0a6 <systick_adjustTime+0x4e>
 801e0a4:	e7ee      	b.n	801e084 <systick_adjustTime+0x2c>
				0
		);
	#else
		#error 'INVALID BEST CLK SRC'
	#endif
	uint64_t stop_clk = itsdk_time_get_us()/1000;
 801e0a6:	f7fe fb57 	bl	801c758 <itsdk_time_get_us>
 801e0aa:	22fa      	movs	r2, #250	; 0xfa
 801e0ac:	0092      	lsls	r2, r2, #2
 801e0ae:	2300      	movs	r3, #0
 801e0b0:	f7e2 fa0a 	bl	80004c8 <__aeabi_uldivmod>
 801e0b4:	0003      	movs	r3, r0
 801e0b6:	000c      	movs	r4, r1
 801e0b8:	603b      	str	r3, [r7, #0]
 801e0ba:	607c      	str	r4, [r7, #4]
	uint64_t ratio = (1000*200)/(stop_clk-start_clk);
 801e0bc:	6839      	ldr	r1, [r7, #0]
 801e0be:	687a      	ldr	r2, [r7, #4]
 801e0c0:	693b      	ldr	r3, [r7, #16]
 801e0c2:	697c      	ldr	r4, [r7, #20]
 801e0c4:	1ac9      	subs	r1, r1, r3
 801e0c6:	41a2      	sbcs	r2, r4
 801e0c8:	000b      	movs	r3, r1
 801e0ca:	0014      	movs	r4, r2
 801e0cc:	001a      	movs	r2, r3
 801e0ce:	0023      	movs	r3, r4
 801e0d0:	4818      	ldr	r0, [pc, #96]	; (801e134 <systick_adjustTime+0xdc>)
 801e0d2:	2100      	movs	r1, #0
 801e0d4:	f7e2 f9f8 	bl	80004c8 <__aeabi_uldivmod>
 801e0d8:	0003      	movs	r3, r0
 801e0da:	000c      	movs	r4, r1
 801e0dc:	61bb      	str	r3, [r7, #24]
 801e0de:	61fc      	str	r4, [r7, #28]
	//log_info("ticks : %d / 200ms ==> %d\r\n",(int)(stop_clk-start_clk),(int)ratio);

	// Protection against value too bad, sounds like a problem
	if ( ratio > 1400 || ratio < 600 ) {
 801e0e0:	69fb      	ldr	r3, [r7, #28]
 801e0e2:	2b00      	cmp	r3, #0
 801e0e4:	d111      	bne.n	801e10a <systick_adjustTime+0xb2>
 801e0e6:	69fb      	ldr	r3, [r7, #28]
 801e0e8:	2b00      	cmp	r3, #0
 801e0ea:	d104      	bne.n	801e0f6 <systick_adjustTime+0x9e>
 801e0ec:	69ba      	ldr	r2, [r7, #24]
 801e0ee:	23af      	movs	r3, #175	; 0xaf
 801e0f0:	00db      	lsls	r3, r3, #3
 801e0f2:	429a      	cmp	r2, r3
 801e0f4:	d809      	bhi.n	801e10a <systick_adjustTime+0xb2>
 801e0f6:	69fb      	ldr	r3, [r7, #28]
 801e0f8:	2b00      	cmp	r3, #0
 801e0fa:	d113      	bne.n	801e124 <systick_adjustTime+0xcc>
 801e0fc:	69fb      	ldr	r3, [r7, #28]
 801e0fe:	2b00      	cmp	r3, #0
 801e100:	d103      	bne.n	801e10a <systick_adjustTime+0xb2>
 801e102:	69bb      	ldr	r3, [r7, #24]
 801e104:	4a0c      	ldr	r2, [pc, #48]	; (801e138 <systick_adjustTime+0xe0>)
 801e106:	4293      	cmp	r3, r2
 801e108:	d80c      	bhi.n	801e124 <systick_adjustTime+0xcc>
		ITSDK_ERROR_REPORT(ITSDK_ERROR_TICKS_INVALID_CLKRATIO,(uint16_t)ratio);
 801e10a:	69bb      	ldr	r3, [r7, #24]
 801e10c:	69fc      	ldr	r4, [r7, #28]
 801e10e:	b29b      	uxth	r3, r3
 801e110:	4a0a      	ldr	r2, [pc, #40]	; (801e13c <systick_adjustTime+0xe4>)
 801e112:	0019      	movs	r1, r3
 801e114:	0010      	movs	r0, r2
 801e116:	f7fd f9a5 	bl	801b464 <itsdk_error_report>
		ratio = 1000;
 801e11a:	23fa      	movs	r3, #250	; 0xfa
 801e11c:	009b      	lsls	r3, r3, #2
 801e11e:	2400      	movs	r4, #0
 801e120:	61bb      	str	r3, [r7, #24]
 801e122:	61fc      	str	r4, [r7, #28]
	}
	__systick_ratio=(uint32_t)ratio;
 801e124:	69ba      	ldr	r2, [r7, #24]
 801e126:	4b06      	ldr	r3, [pc, #24]	; (801e140 <systick_adjustTime+0xe8>)
 801e128:	601a      	str	r2, [r3, #0]
#endif
}
 801e12a:	46c0      	nop			; (mov r8, r8)
 801e12c:	46bd      	mov	sp, r7
 801e12e:	b009      	add	sp, #36	; 0x24
 801e130:	bd90      	pop	{r4, r7, pc}
 801e132:	46c0      	nop			; (mov r8, r8)
 801e134:	00030d40 	.word	0x00030d40
 801e138:	00000257 	.word	0x00000257
 801e13c:	90000061 	.word	0x90000061
 801e140:	200000b4 	.word	0x200000b4

0801e144 <spi_rwRegister>:
_SPI_Status spi_rwRegister(
		SPI_HandleTypeDef * spi,
		uint8_t	* toTransmit,
		uint8_t * toReceive,
		uint8_t   sizeToTransmit
) {
 801e144:	b590      	push	{r4, r7, lr}
 801e146:	b087      	sub	sp, #28
 801e148:	af02      	add	r7, sp, #8
 801e14a:	60f8      	str	r0, [r7, #12]
 801e14c:	60b9      	str	r1, [r7, #8]
 801e14e:	607a      	str	r2, [r7, #4]
 801e150:	001a      	movs	r2, r3
 801e152:	1cfb      	adds	r3, r7, #3
 801e154:	701a      	strb	r2, [r3, #0]
	return (_SPI_Status)HAL_SPI_TransmitReceive(
 801e156:	1cfb      	adds	r3, r7, #3
 801e158:	781b      	ldrb	r3, [r3, #0]
 801e15a:	b29c      	uxth	r4, r3
 801e15c:	687a      	ldr	r2, [r7, #4]
 801e15e:	68b9      	ldr	r1, [r7, #8]
 801e160:	68f8      	ldr	r0, [r7, #12]
 801e162:	2364      	movs	r3, #100	; 0x64
 801e164:	9300      	str	r3, [sp, #0]
 801e166:	0023      	movs	r3, r4
 801e168:	f7e8 f94c 	bl	8006404 <HAL_SPI_TransmitReceive>
 801e16c:	0003      	movs	r3, r0
				toTransmit,
				toReceive,
				sizeToTransmit,
				ITSDK_SPI_TIMEOUT
		);
}
 801e16e:	0018      	movs	r0, r3
 801e170:	46bd      	mov	sp, r7
 801e172:	b005      	add	sp, #20
 801e174:	bd90      	pop	{r4, r7, pc}

0801e176 <bcopy>:
 801e176:	000b      	movs	r3, r1
 801e178:	b510      	push	{r4, lr}
 801e17a:	0001      	movs	r1, r0
 801e17c:	0018      	movs	r0, r3
 801e17e:	f000 f83a 	bl	801e1f6 <memmove>
 801e182:	bd10      	pop	{r4, pc}

0801e184 <bzero>:
 801e184:	b510      	push	{r4, lr}
 801e186:	000a      	movs	r2, r1
 801e188:	2100      	movs	r1, #0
 801e18a:	f000 f847 	bl	801e21c <memset>
 801e18e:	bd10      	pop	{r4, pc}

0801e190 <__errno>:
 801e190:	4b01      	ldr	r3, [pc, #4]	; (801e198 <__errno+0x8>)
 801e192:	6818      	ldr	r0, [r3, #0]
 801e194:	4770      	bx	lr
 801e196:	46c0      	nop			; (mov r8, r8)
 801e198:	200000b8 	.word	0x200000b8

0801e19c <__libc_init_array>:
 801e19c:	b570      	push	{r4, r5, r6, lr}
 801e19e:	2600      	movs	r6, #0
 801e1a0:	4d0c      	ldr	r5, [pc, #48]	; (801e1d4 <__libc_init_array+0x38>)
 801e1a2:	4c0d      	ldr	r4, [pc, #52]	; (801e1d8 <__libc_init_array+0x3c>)
 801e1a4:	1b64      	subs	r4, r4, r5
 801e1a6:	10a4      	asrs	r4, r4, #2
 801e1a8:	42a6      	cmp	r6, r4
 801e1aa:	d109      	bne.n	801e1c0 <__libc_init_array+0x24>
 801e1ac:	2600      	movs	r6, #0
 801e1ae:	f001 faaf 	bl	801f710 <_init>
 801e1b2:	4d0a      	ldr	r5, [pc, #40]	; (801e1dc <__libc_init_array+0x40>)
 801e1b4:	4c0a      	ldr	r4, [pc, #40]	; (801e1e0 <__libc_init_array+0x44>)
 801e1b6:	1b64      	subs	r4, r4, r5
 801e1b8:	10a4      	asrs	r4, r4, #2
 801e1ba:	42a6      	cmp	r6, r4
 801e1bc:	d105      	bne.n	801e1ca <__libc_init_array+0x2e>
 801e1be:	bd70      	pop	{r4, r5, r6, pc}
 801e1c0:	00b3      	lsls	r3, r6, #2
 801e1c2:	58eb      	ldr	r3, [r5, r3]
 801e1c4:	4798      	blx	r3
 801e1c6:	3601      	adds	r6, #1
 801e1c8:	e7ee      	b.n	801e1a8 <__libc_init_array+0xc>
 801e1ca:	00b3      	lsls	r3, r6, #2
 801e1cc:	58eb      	ldr	r3, [r5, r3]
 801e1ce:	4798      	blx	r3
 801e1d0:	3601      	adds	r6, #1
 801e1d2:	e7f2      	b.n	801e1ba <__libc_init_array+0x1e>
 801e1d4:	080216cc 	.word	0x080216cc
 801e1d8:	080216cc 	.word	0x080216cc
 801e1dc:	080216cc 	.word	0x080216cc
 801e1e0:	080216d0 	.word	0x080216d0

0801e1e4 <memcpy>:
 801e1e4:	2300      	movs	r3, #0
 801e1e6:	b510      	push	{r4, lr}
 801e1e8:	429a      	cmp	r2, r3
 801e1ea:	d100      	bne.n	801e1ee <memcpy+0xa>
 801e1ec:	bd10      	pop	{r4, pc}
 801e1ee:	5ccc      	ldrb	r4, [r1, r3]
 801e1f0:	54c4      	strb	r4, [r0, r3]
 801e1f2:	3301      	adds	r3, #1
 801e1f4:	e7f8      	b.n	801e1e8 <memcpy+0x4>

0801e1f6 <memmove>:
 801e1f6:	b510      	push	{r4, lr}
 801e1f8:	4288      	cmp	r0, r1
 801e1fa:	d902      	bls.n	801e202 <memmove+0xc>
 801e1fc:	188b      	adds	r3, r1, r2
 801e1fe:	4298      	cmp	r0, r3
 801e200:	d303      	bcc.n	801e20a <memmove+0x14>
 801e202:	2300      	movs	r3, #0
 801e204:	e007      	b.n	801e216 <memmove+0x20>
 801e206:	5c8b      	ldrb	r3, [r1, r2]
 801e208:	5483      	strb	r3, [r0, r2]
 801e20a:	3a01      	subs	r2, #1
 801e20c:	d2fb      	bcs.n	801e206 <memmove+0x10>
 801e20e:	bd10      	pop	{r4, pc}
 801e210:	5ccc      	ldrb	r4, [r1, r3]
 801e212:	54c4      	strb	r4, [r0, r3]
 801e214:	3301      	adds	r3, #1
 801e216:	429a      	cmp	r2, r3
 801e218:	d1fa      	bne.n	801e210 <memmove+0x1a>
 801e21a:	e7f8      	b.n	801e20e <memmove+0x18>

0801e21c <memset>:
 801e21c:	0003      	movs	r3, r0
 801e21e:	1812      	adds	r2, r2, r0
 801e220:	4293      	cmp	r3, r2
 801e222:	d100      	bne.n	801e226 <memset+0xa>
 801e224:	4770      	bx	lr
 801e226:	7019      	strb	r1, [r3, #0]
 801e228:	3301      	adds	r3, #1
 801e22a:	e7f9      	b.n	801e220 <memset+0x4>

0801e22c <siscanf>:
 801e22c:	b40e      	push	{r1, r2, r3}
 801e22e:	2381      	movs	r3, #129	; 0x81
 801e230:	b570      	push	{r4, r5, r6, lr}
 801e232:	b09d      	sub	sp, #116	; 0x74
 801e234:	ac02      	add	r4, sp, #8
 801e236:	ad21      	add	r5, sp, #132	; 0x84
 801e238:	009b      	lsls	r3, r3, #2
 801e23a:	cd40      	ldmia	r5!, {r6}
 801e23c:	81a3      	strh	r3, [r4, #12]
 801e23e:	9002      	str	r0, [sp, #8]
 801e240:	9006      	str	r0, [sp, #24]
 801e242:	f7e1 ff61 	bl	8000108 <strlen>
 801e246:	4b0b      	ldr	r3, [pc, #44]	; (801e274 <siscanf+0x48>)
 801e248:	6060      	str	r0, [r4, #4]
 801e24a:	6263      	str	r3, [r4, #36]	; 0x24
 801e24c:	2300      	movs	r3, #0
 801e24e:	6160      	str	r0, [r4, #20]
 801e250:	4809      	ldr	r0, [pc, #36]	; (801e278 <siscanf+0x4c>)
 801e252:	6363      	str	r3, [r4, #52]	; 0x34
 801e254:	64a3      	str	r3, [r4, #72]	; 0x48
 801e256:	3b01      	subs	r3, #1
 801e258:	81e3      	strh	r3, [r4, #14]
 801e25a:	0032      	movs	r2, r6
 801e25c:	002b      	movs	r3, r5
 801e25e:	0021      	movs	r1, r4
 801e260:	6800      	ldr	r0, [r0, #0]
 801e262:	9501      	str	r5, [sp, #4]
 801e264:	f000 fa00 	bl	801e668 <__ssvfiscanf_r>
 801e268:	b01d      	add	sp, #116	; 0x74
 801e26a:	bc70      	pop	{r4, r5, r6}
 801e26c:	bc08      	pop	{r3}
 801e26e:	b003      	add	sp, #12
 801e270:	4718      	bx	r3
 801e272:	46c0      	nop			; (mov r8, r8)
 801e274:	0801e27d 	.word	0x0801e27d
 801e278:	200000b8 	.word	0x200000b8

0801e27c <__seofread>:
 801e27c:	2000      	movs	r0, #0
 801e27e:	4770      	bx	lr

0801e280 <_vsniprintf_r>:
 801e280:	b530      	push	{r4, r5, lr}
 801e282:	0014      	movs	r4, r2
 801e284:	b09b      	sub	sp, #108	; 0x6c
 801e286:	0005      	movs	r5, r0
 801e288:	001a      	movs	r2, r3
 801e28a:	2c00      	cmp	r4, #0
 801e28c:	da05      	bge.n	801e29a <_vsniprintf_r+0x1a>
 801e28e:	238b      	movs	r3, #139	; 0x8b
 801e290:	6003      	str	r3, [r0, #0]
 801e292:	2001      	movs	r0, #1
 801e294:	4240      	negs	r0, r0
 801e296:	b01b      	add	sp, #108	; 0x6c
 801e298:	bd30      	pop	{r4, r5, pc}
 801e29a:	2382      	movs	r3, #130	; 0x82
 801e29c:	4668      	mov	r0, sp
 801e29e:	009b      	lsls	r3, r3, #2
 801e2a0:	8183      	strh	r3, [r0, #12]
 801e2a2:	2300      	movs	r3, #0
 801e2a4:	9100      	str	r1, [sp, #0]
 801e2a6:	9104      	str	r1, [sp, #16]
 801e2a8:	429c      	cmp	r4, r3
 801e2aa:	d000      	beq.n	801e2ae <_vsniprintf_r+0x2e>
 801e2ac:	1e63      	subs	r3, r4, #1
 801e2ae:	9302      	str	r3, [sp, #8]
 801e2b0:	9305      	str	r3, [sp, #20]
 801e2b2:	2301      	movs	r3, #1
 801e2b4:	4669      	mov	r1, sp
 801e2b6:	425b      	negs	r3, r3
 801e2b8:	81cb      	strh	r3, [r1, #14]
 801e2ba:	0028      	movs	r0, r5
 801e2bc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801e2be:	f000 f879 	bl	801e3b4 <_svfiprintf_r>
 801e2c2:	1c43      	adds	r3, r0, #1
 801e2c4:	da01      	bge.n	801e2ca <_vsniprintf_r+0x4a>
 801e2c6:	238b      	movs	r3, #139	; 0x8b
 801e2c8:	602b      	str	r3, [r5, #0]
 801e2ca:	2c00      	cmp	r4, #0
 801e2cc:	d0e3      	beq.n	801e296 <_vsniprintf_r+0x16>
 801e2ce:	2300      	movs	r3, #0
 801e2d0:	9a00      	ldr	r2, [sp, #0]
 801e2d2:	7013      	strb	r3, [r2, #0]
 801e2d4:	e7df      	b.n	801e296 <_vsniprintf_r+0x16>
	...

0801e2d8 <vsniprintf>:
 801e2d8:	b507      	push	{r0, r1, r2, lr}
 801e2da:	9300      	str	r3, [sp, #0]
 801e2dc:	0013      	movs	r3, r2
 801e2de:	000a      	movs	r2, r1
 801e2e0:	0001      	movs	r1, r0
 801e2e2:	4802      	ldr	r0, [pc, #8]	; (801e2ec <vsniprintf+0x14>)
 801e2e4:	6800      	ldr	r0, [r0, #0]
 801e2e6:	f7ff ffcb 	bl	801e280 <_vsniprintf_r>
 801e2ea:	bd0e      	pop	{r1, r2, r3, pc}
 801e2ec:	200000b8 	.word	0x200000b8

0801e2f0 <__ssputs_r>:
 801e2f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e2f2:	688e      	ldr	r6, [r1, #8]
 801e2f4:	b085      	sub	sp, #20
 801e2f6:	0007      	movs	r7, r0
 801e2f8:	000c      	movs	r4, r1
 801e2fa:	9203      	str	r2, [sp, #12]
 801e2fc:	9301      	str	r3, [sp, #4]
 801e2fe:	429e      	cmp	r6, r3
 801e300:	d83c      	bhi.n	801e37c <__ssputs_r+0x8c>
 801e302:	2390      	movs	r3, #144	; 0x90
 801e304:	898a      	ldrh	r2, [r1, #12]
 801e306:	00db      	lsls	r3, r3, #3
 801e308:	421a      	tst	r2, r3
 801e30a:	d034      	beq.n	801e376 <__ssputs_r+0x86>
 801e30c:	2503      	movs	r5, #3
 801e30e:	6909      	ldr	r1, [r1, #16]
 801e310:	6823      	ldr	r3, [r4, #0]
 801e312:	1a5b      	subs	r3, r3, r1
 801e314:	9302      	str	r3, [sp, #8]
 801e316:	6963      	ldr	r3, [r4, #20]
 801e318:	9802      	ldr	r0, [sp, #8]
 801e31a:	435d      	muls	r5, r3
 801e31c:	0feb      	lsrs	r3, r5, #31
 801e31e:	195d      	adds	r5, r3, r5
 801e320:	9b01      	ldr	r3, [sp, #4]
 801e322:	106d      	asrs	r5, r5, #1
 801e324:	3301      	adds	r3, #1
 801e326:	181b      	adds	r3, r3, r0
 801e328:	42ab      	cmp	r3, r5
 801e32a:	d900      	bls.n	801e32e <__ssputs_r+0x3e>
 801e32c:	001d      	movs	r5, r3
 801e32e:	0553      	lsls	r3, r2, #21
 801e330:	d532      	bpl.n	801e398 <__ssputs_r+0xa8>
 801e332:	0029      	movs	r1, r5
 801e334:	0038      	movs	r0, r7
 801e336:	f000 fff1 	bl	801f31c <_malloc_r>
 801e33a:	1e06      	subs	r6, r0, #0
 801e33c:	d109      	bne.n	801e352 <__ssputs_r+0x62>
 801e33e:	230c      	movs	r3, #12
 801e340:	603b      	str	r3, [r7, #0]
 801e342:	2340      	movs	r3, #64	; 0x40
 801e344:	2001      	movs	r0, #1
 801e346:	89a2      	ldrh	r2, [r4, #12]
 801e348:	4240      	negs	r0, r0
 801e34a:	4313      	orrs	r3, r2
 801e34c:	81a3      	strh	r3, [r4, #12]
 801e34e:	b005      	add	sp, #20
 801e350:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e352:	9a02      	ldr	r2, [sp, #8]
 801e354:	6921      	ldr	r1, [r4, #16]
 801e356:	f7ff ff45 	bl	801e1e4 <memcpy>
 801e35a:	89a3      	ldrh	r3, [r4, #12]
 801e35c:	4a14      	ldr	r2, [pc, #80]	; (801e3b0 <__ssputs_r+0xc0>)
 801e35e:	401a      	ands	r2, r3
 801e360:	2380      	movs	r3, #128	; 0x80
 801e362:	4313      	orrs	r3, r2
 801e364:	81a3      	strh	r3, [r4, #12]
 801e366:	9b02      	ldr	r3, [sp, #8]
 801e368:	6126      	str	r6, [r4, #16]
 801e36a:	18f6      	adds	r6, r6, r3
 801e36c:	6026      	str	r6, [r4, #0]
 801e36e:	6165      	str	r5, [r4, #20]
 801e370:	9e01      	ldr	r6, [sp, #4]
 801e372:	1aed      	subs	r5, r5, r3
 801e374:	60a5      	str	r5, [r4, #8]
 801e376:	9b01      	ldr	r3, [sp, #4]
 801e378:	429e      	cmp	r6, r3
 801e37a:	d900      	bls.n	801e37e <__ssputs_r+0x8e>
 801e37c:	9e01      	ldr	r6, [sp, #4]
 801e37e:	0032      	movs	r2, r6
 801e380:	9903      	ldr	r1, [sp, #12]
 801e382:	6820      	ldr	r0, [r4, #0]
 801e384:	f7ff ff37 	bl	801e1f6 <memmove>
 801e388:	68a3      	ldr	r3, [r4, #8]
 801e38a:	2000      	movs	r0, #0
 801e38c:	1b9b      	subs	r3, r3, r6
 801e38e:	60a3      	str	r3, [r4, #8]
 801e390:	6823      	ldr	r3, [r4, #0]
 801e392:	199e      	adds	r6, r3, r6
 801e394:	6026      	str	r6, [r4, #0]
 801e396:	e7da      	b.n	801e34e <__ssputs_r+0x5e>
 801e398:	002a      	movs	r2, r5
 801e39a:	0038      	movs	r0, r7
 801e39c:	f001 f81c 	bl	801f3d8 <_realloc_r>
 801e3a0:	1e06      	subs	r6, r0, #0
 801e3a2:	d1e0      	bne.n	801e366 <__ssputs_r+0x76>
 801e3a4:	6921      	ldr	r1, [r4, #16]
 801e3a6:	0038      	movs	r0, r7
 801e3a8:	f000 ff6e 	bl	801f288 <_free_r>
 801e3ac:	e7c7      	b.n	801e33e <__ssputs_r+0x4e>
 801e3ae:	46c0      	nop			; (mov r8, r8)
 801e3b0:	fffffb7f 	.word	0xfffffb7f

0801e3b4 <_svfiprintf_r>:
 801e3b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e3b6:	b0a1      	sub	sp, #132	; 0x84
 801e3b8:	9003      	str	r0, [sp, #12]
 801e3ba:	001d      	movs	r5, r3
 801e3bc:	898b      	ldrh	r3, [r1, #12]
 801e3be:	000f      	movs	r7, r1
 801e3c0:	0016      	movs	r6, r2
 801e3c2:	061b      	lsls	r3, r3, #24
 801e3c4:	d511      	bpl.n	801e3ea <_svfiprintf_r+0x36>
 801e3c6:	690b      	ldr	r3, [r1, #16]
 801e3c8:	2b00      	cmp	r3, #0
 801e3ca:	d10e      	bne.n	801e3ea <_svfiprintf_r+0x36>
 801e3cc:	2140      	movs	r1, #64	; 0x40
 801e3ce:	f000 ffa5 	bl	801f31c <_malloc_r>
 801e3d2:	6038      	str	r0, [r7, #0]
 801e3d4:	6138      	str	r0, [r7, #16]
 801e3d6:	2800      	cmp	r0, #0
 801e3d8:	d105      	bne.n	801e3e6 <_svfiprintf_r+0x32>
 801e3da:	230c      	movs	r3, #12
 801e3dc:	9a03      	ldr	r2, [sp, #12]
 801e3de:	3801      	subs	r0, #1
 801e3e0:	6013      	str	r3, [r2, #0]
 801e3e2:	b021      	add	sp, #132	; 0x84
 801e3e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e3e6:	2340      	movs	r3, #64	; 0x40
 801e3e8:	617b      	str	r3, [r7, #20]
 801e3ea:	2300      	movs	r3, #0
 801e3ec:	ac08      	add	r4, sp, #32
 801e3ee:	6163      	str	r3, [r4, #20]
 801e3f0:	3320      	adds	r3, #32
 801e3f2:	7663      	strb	r3, [r4, #25]
 801e3f4:	3310      	adds	r3, #16
 801e3f6:	76a3      	strb	r3, [r4, #26]
 801e3f8:	9507      	str	r5, [sp, #28]
 801e3fa:	0035      	movs	r5, r6
 801e3fc:	782b      	ldrb	r3, [r5, #0]
 801e3fe:	2b00      	cmp	r3, #0
 801e400:	d001      	beq.n	801e406 <_svfiprintf_r+0x52>
 801e402:	2b25      	cmp	r3, #37	; 0x25
 801e404:	d146      	bne.n	801e494 <_svfiprintf_r+0xe0>
 801e406:	1bab      	subs	r3, r5, r6
 801e408:	9305      	str	r3, [sp, #20]
 801e40a:	d00c      	beq.n	801e426 <_svfiprintf_r+0x72>
 801e40c:	0032      	movs	r2, r6
 801e40e:	0039      	movs	r1, r7
 801e410:	9803      	ldr	r0, [sp, #12]
 801e412:	f7ff ff6d 	bl	801e2f0 <__ssputs_r>
 801e416:	1c43      	adds	r3, r0, #1
 801e418:	d100      	bne.n	801e41c <_svfiprintf_r+0x68>
 801e41a:	e0ae      	b.n	801e57a <_svfiprintf_r+0x1c6>
 801e41c:	6962      	ldr	r2, [r4, #20]
 801e41e:	9b05      	ldr	r3, [sp, #20]
 801e420:	4694      	mov	ip, r2
 801e422:	4463      	add	r3, ip
 801e424:	6163      	str	r3, [r4, #20]
 801e426:	782b      	ldrb	r3, [r5, #0]
 801e428:	2b00      	cmp	r3, #0
 801e42a:	d100      	bne.n	801e42e <_svfiprintf_r+0x7a>
 801e42c:	e0a5      	b.n	801e57a <_svfiprintf_r+0x1c6>
 801e42e:	2201      	movs	r2, #1
 801e430:	2300      	movs	r3, #0
 801e432:	4252      	negs	r2, r2
 801e434:	6062      	str	r2, [r4, #4]
 801e436:	a904      	add	r1, sp, #16
 801e438:	3254      	adds	r2, #84	; 0x54
 801e43a:	1852      	adds	r2, r2, r1
 801e43c:	1c6e      	adds	r6, r5, #1
 801e43e:	6023      	str	r3, [r4, #0]
 801e440:	60e3      	str	r3, [r4, #12]
 801e442:	60a3      	str	r3, [r4, #8]
 801e444:	7013      	strb	r3, [r2, #0]
 801e446:	65a3      	str	r3, [r4, #88]	; 0x58
 801e448:	7831      	ldrb	r1, [r6, #0]
 801e44a:	2205      	movs	r2, #5
 801e44c:	4853      	ldr	r0, [pc, #332]	; (801e59c <_svfiprintf_r+0x1e8>)
 801e44e:	f000 ff0f 	bl	801f270 <memchr>
 801e452:	1c75      	adds	r5, r6, #1
 801e454:	2800      	cmp	r0, #0
 801e456:	d11f      	bne.n	801e498 <_svfiprintf_r+0xe4>
 801e458:	6822      	ldr	r2, [r4, #0]
 801e45a:	06d3      	lsls	r3, r2, #27
 801e45c:	d504      	bpl.n	801e468 <_svfiprintf_r+0xb4>
 801e45e:	2353      	movs	r3, #83	; 0x53
 801e460:	a904      	add	r1, sp, #16
 801e462:	185b      	adds	r3, r3, r1
 801e464:	2120      	movs	r1, #32
 801e466:	7019      	strb	r1, [r3, #0]
 801e468:	0713      	lsls	r3, r2, #28
 801e46a:	d504      	bpl.n	801e476 <_svfiprintf_r+0xc2>
 801e46c:	2353      	movs	r3, #83	; 0x53
 801e46e:	a904      	add	r1, sp, #16
 801e470:	185b      	adds	r3, r3, r1
 801e472:	212b      	movs	r1, #43	; 0x2b
 801e474:	7019      	strb	r1, [r3, #0]
 801e476:	7833      	ldrb	r3, [r6, #0]
 801e478:	2b2a      	cmp	r3, #42	; 0x2a
 801e47a:	d016      	beq.n	801e4aa <_svfiprintf_r+0xf6>
 801e47c:	0035      	movs	r5, r6
 801e47e:	2100      	movs	r1, #0
 801e480:	200a      	movs	r0, #10
 801e482:	68e3      	ldr	r3, [r4, #12]
 801e484:	782a      	ldrb	r2, [r5, #0]
 801e486:	1c6e      	adds	r6, r5, #1
 801e488:	3a30      	subs	r2, #48	; 0x30
 801e48a:	2a09      	cmp	r2, #9
 801e48c:	d94e      	bls.n	801e52c <_svfiprintf_r+0x178>
 801e48e:	2900      	cmp	r1, #0
 801e490:	d018      	beq.n	801e4c4 <_svfiprintf_r+0x110>
 801e492:	e010      	b.n	801e4b6 <_svfiprintf_r+0x102>
 801e494:	3501      	adds	r5, #1
 801e496:	e7b1      	b.n	801e3fc <_svfiprintf_r+0x48>
 801e498:	4b40      	ldr	r3, [pc, #256]	; (801e59c <_svfiprintf_r+0x1e8>)
 801e49a:	6822      	ldr	r2, [r4, #0]
 801e49c:	1ac0      	subs	r0, r0, r3
 801e49e:	2301      	movs	r3, #1
 801e4a0:	4083      	lsls	r3, r0
 801e4a2:	4313      	orrs	r3, r2
 801e4a4:	6023      	str	r3, [r4, #0]
 801e4a6:	002e      	movs	r6, r5
 801e4a8:	e7ce      	b.n	801e448 <_svfiprintf_r+0x94>
 801e4aa:	9b07      	ldr	r3, [sp, #28]
 801e4ac:	1d19      	adds	r1, r3, #4
 801e4ae:	681b      	ldr	r3, [r3, #0]
 801e4b0:	9107      	str	r1, [sp, #28]
 801e4b2:	2b00      	cmp	r3, #0
 801e4b4:	db01      	blt.n	801e4ba <_svfiprintf_r+0x106>
 801e4b6:	930b      	str	r3, [sp, #44]	; 0x2c
 801e4b8:	e004      	b.n	801e4c4 <_svfiprintf_r+0x110>
 801e4ba:	425b      	negs	r3, r3
 801e4bc:	60e3      	str	r3, [r4, #12]
 801e4be:	2302      	movs	r3, #2
 801e4c0:	4313      	orrs	r3, r2
 801e4c2:	6023      	str	r3, [r4, #0]
 801e4c4:	782b      	ldrb	r3, [r5, #0]
 801e4c6:	2b2e      	cmp	r3, #46	; 0x2e
 801e4c8:	d10a      	bne.n	801e4e0 <_svfiprintf_r+0x12c>
 801e4ca:	786b      	ldrb	r3, [r5, #1]
 801e4cc:	2b2a      	cmp	r3, #42	; 0x2a
 801e4ce:	d135      	bne.n	801e53c <_svfiprintf_r+0x188>
 801e4d0:	9b07      	ldr	r3, [sp, #28]
 801e4d2:	3502      	adds	r5, #2
 801e4d4:	1d1a      	adds	r2, r3, #4
 801e4d6:	681b      	ldr	r3, [r3, #0]
 801e4d8:	9207      	str	r2, [sp, #28]
 801e4da:	2b00      	cmp	r3, #0
 801e4dc:	db2b      	blt.n	801e536 <_svfiprintf_r+0x182>
 801e4de:	9309      	str	r3, [sp, #36]	; 0x24
 801e4e0:	4e2f      	ldr	r6, [pc, #188]	; (801e5a0 <_svfiprintf_r+0x1ec>)
 801e4e2:	7829      	ldrb	r1, [r5, #0]
 801e4e4:	2203      	movs	r2, #3
 801e4e6:	0030      	movs	r0, r6
 801e4e8:	f000 fec2 	bl	801f270 <memchr>
 801e4ec:	2800      	cmp	r0, #0
 801e4ee:	d006      	beq.n	801e4fe <_svfiprintf_r+0x14a>
 801e4f0:	2340      	movs	r3, #64	; 0x40
 801e4f2:	1b80      	subs	r0, r0, r6
 801e4f4:	4083      	lsls	r3, r0
 801e4f6:	6822      	ldr	r2, [r4, #0]
 801e4f8:	3501      	adds	r5, #1
 801e4fa:	4313      	orrs	r3, r2
 801e4fc:	6023      	str	r3, [r4, #0]
 801e4fe:	7829      	ldrb	r1, [r5, #0]
 801e500:	2206      	movs	r2, #6
 801e502:	4828      	ldr	r0, [pc, #160]	; (801e5a4 <_svfiprintf_r+0x1f0>)
 801e504:	1c6e      	adds	r6, r5, #1
 801e506:	7621      	strb	r1, [r4, #24]
 801e508:	f000 feb2 	bl	801f270 <memchr>
 801e50c:	2800      	cmp	r0, #0
 801e50e:	d03c      	beq.n	801e58a <_svfiprintf_r+0x1d6>
 801e510:	4b25      	ldr	r3, [pc, #148]	; (801e5a8 <_svfiprintf_r+0x1f4>)
 801e512:	2b00      	cmp	r3, #0
 801e514:	d125      	bne.n	801e562 <_svfiprintf_r+0x1ae>
 801e516:	2207      	movs	r2, #7
 801e518:	9b07      	ldr	r3, [sp, #28]
 801e51a:	3307      	adds	r3, #7
 801e51c:	4393      	bics	r3, r2
 801e51e:	3308      	adds	r3, #8
 801e520:	9307      	str	r3, [sp, #28]
 801e522:	6963      	ldr	r3, [r4, #20]
 801e524:	9a04      	ldr	r2, [sp, #16]
 801e526:	189b      	adds	r3, r3, r2
 801e528:	6163      	str	r3, [r4, #20]
 801e52a:	e766      	b.n	801e3fa <_svfiprintf_r+0x46>
 801e52c:	4343      	muls	r3, r0
 801e52e:	2101      	movs	r1, #1
 801e530:	189b      	adds	r3, r3, r2
 801e532:	0035      	movs	r5, r6
 801e534:	e7a6      	b.n	801e484 <_svfiprintf_r+0xd0>
 801e536:	2301      	movs	r3, #1
 801e538:	425b      	negs	r3, r3
 801e53a:	e7d0      	b.n	801e4de <_svfiprintf_r+0x12a>
 801e53c:	2300      	movs	r3, #0
 801e53e:	200a      	movs	r0, #10
 801e540:	001a      	movs	r2, r3
 801e542:	3501      	adds	r5, #1
 801e544:	6063      	str	r3, [r4, #4]
 801e546:	7829      	ldrb	r1, [r5, #0]
 801e548:	1c6e      	adds	r6, r5, #1
 801e54a:	3930      	subs	r1, #48	; 0x30
 801e54c:	2909      	cmp	r1, #9
 801e54e:	d903      	bls.n	801e558 <_svfiprintf_r+0x1a4>
 801e550:	2b00      	cmp	r3, #0
 801e552:	d0c5      	beq.n	801e4e0 <_svfiprintf_r+0x12c>
 801e554:	9209      	str	r2, [sp, #36]	; 0x24
 801e556:	e7c3      	b.n	801e4e0 <_svfiprintf_r+0x12c>
 801e558:	4342      	muls	r2, r0
 801e55a:	2301      	movs	r3, #1
 801e55c:	1852      	adds	r2, r2, r1
 801e55e:	0035      	movs	r5, r6
 801e560:	e7f1      	b.n	801e546 <_svfiprintf_r+0x192>
 801e562:	ab07      	add	r3, sp, #28
 801e564:	9300      	str	r3, [sp, #0]
 801e566:	003a      	movs	r2, r7
 801e568:	4b10      	ldr	r3, [pc, #64]	; (801e5ac <_svfiprintf_r+0x1f8>)
 801e56a:	0021      	movs	r1, r4
 801e56c:	9803      	ldr	r0, [sp, #12]
 801e56e:	e000      	b.n	801e572 <_svfiprintf_r+0x1be>
 801e570:	bf00      	nop
 801e572:	9004      	str	r0, [sp, #16]
 801e574:	9b04      	ldr	r3, [sp, #16]
 801e576:	3301      	adds	r3, #1
 801e578:	d1d3      	bne.n	801e522 <_svfiprintf_r+0x16e>
 801e57a:	89bb      	ldrh	r3, [r7, #12]
 801e57c:	980d      	ldr	r0, [sp, #52]	; 0x34
 801e57e:	065b      	lsls	r3, r3, #25
 801e580:	d400      	bmi.n	801e584 <_svfiprintf_r+0x1d0>
 801e582:	e72e      	b.n	801e3e2 <_svfiprintf_r+0x2e>
 801e584:	2001      	movs	r0, #1
 801e586:	4240      	negs	r0, r0
 801e588:	e72b      	b.n	801e3e2 <_svfiprintf_r+0x2e>
 801e58a:	ab07      	add	r3, sp, #28
 801e58c:	9300      	str	r3, [sp, #0]
 801e58e:	003a      	movs	r2, r7
 801e590:	4b06      	ldr	r3, [pc, #24]	; (801e5ac <_svfiprintf_r+0x1f8>)
 801e592:	0021      	movs	r1, r4
 801e594:	9803      	ldr	r0, [sp, #12]
 801e596:	f000 fa43 	bl	801ea20 <_printf_i>
 801e59a:	e7ea      	b.n	801e572 <_svfiprintf_r+0x1be>
 801e59c:	08021508 	.word	0x08021508
 801e5a0:	0802150e 	.word	0x0802150e
 801e5a4:	08021512 	.word	0x08021512
 801e5a8:	00000000 	.word	0x00000000
 801e5ac:	0801e2f1 	.word	0x0801e2f1

0801e5b0 <_sungetc_r>:
 801e5b0:	b570      	push	{r4, r5, r6, lr}
 801e5b2:	0014      	movs	r4, r2
 801e5b4:	1c4b      	adds	r3, r1, #1
 801e5b6:	d103      	bne.n	801e5c0 <_sungetc_r+0x10>
 801e5b8:	2501      	movs	r5, #1
 801e5ba:	426d      	negs	r5, r5
 801e5bc:	0028      	movs	r0, r5
 801e5be:	bd70      	pop	{r4, r5, r6, pc}
 801e5c0:	8993      	ldrh	r3, [r2, #12]
 801e5c2:	2220      	movs	r2, #32
 801e5c4:	4393      	bics	r3, r2
 801e5c6:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801e5c8:	81a3      	strh	r3, [r4, #12]
 801e5ca:	b2ce      	uxtb	r6, r1
 801e5cc:	b2cd      	uxtb	r5, r1
 801e5ce:	6863      	ldr	r3, [r4, #4]
 801e5d0:	2a00      	cmp	r2, #0
 801e5d2:	d010      	beq.n	801e5f6 <_sungetc_r+0x46>
 801e5d4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801e5d6:	429a      	cmp	r2, r3
 801e5d8:	dd07      	ble.n	801e5ea <_sungetc_r+0x3a>
 801e5da:	6823      	ldr	r3, [r4, #0]
 801e5dc:	3b01      	subs	r3, #1
 801e5de:	6023      	str	r3, [r4, #0]
 801e5e0:	701e      	strb	r6, [r3, #0]
 801e5e2:	6863      	ldr	r3, [r4, #4]
 801e5e4:	3301      	adds	r3, #1
 801e5e6:	6063      	str	r3, [r4, #4]
 801e5e8:	e7e8      	b.n	801e5bc <_sungetc_r+0xc>
 801e5ea:	0021      	movs	r1, r4
 801e5ec:	f000 fdde 	bl	801f1ac <__submore>
 801e5f0:	2800      	cmp	r0, #0
 801e5f2:	d0f2      	beq.n	801e5da <_sungetc_r+0x2a>
 801e5f4:	e7e0      	b.n	801e5b8 <_sungetc_r+0x8>
 801e5f6:	6921      	ldr	r1, [r4, #16]
 801e5f8:	6822      	ldr	r2, [r4, #0]
 801e5fa:	2900      	cmp	r1, #0
 801e5fc:	d007      	beq.n	801e60e <_sungetc_r+0x5e>
 801e5fe:	4291      	cmp	r1, r2
 801e600:	d205      	bcs.n	801e60e <_sungetc_r+0x5e>
 801e602:	1e51      	subs	r1, r2, #1
 801e604:	7808      	ldrb	r0, [r1, #0]
 801e606:	42a8      	cmp	r0, r5
 801e608:	d101      	bne.n	801e60e <_sungetc_r+0x5e>
 801e60a:	6021      	str	r1, [r4, #0]
 801e60c:	e7ea      	b.n	801e5e4 <_sungetc_r+0x34>
 801e60e:	6423      	str	r3, [r4, #64]	; 0x40
 801e610:	0023      	movs	r3, r4
 801e612:	3344      	adds	r3, #68	; 0x44
 801e614:	6363      	str	r3, [r4, #52]	; 0x34
 801e616:	2303      	movs	r3, #3
 801e618:	63a3      	str	r3, [r4, #56]	; 0x38
 801e61a:	0023      	movs	r3, r4
 801e61c:	3346      	adds	r3, #70	; 0x46
 801e61e:	63e2      	str	r2, [r4, #60]	; 0x3c
 801e620:	701e      	strb	r6, [r3, #0]
 801e622:	6023      	str	r3, [r4, #0]
 801e624:	2301      	movs	r3, #1
 801e626:	e7de      	b.n	801e5e6 <_sungetc_r+0x36>

0801e628 <__ssrefill_r>:
 801e628:	b510      	push	{r4, lr}
 801e62a:	000c      	movs	r4, r1
 801e62c:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801e62e:	2900      	cmp	r1, #0
 801e630:	d00e      	beq.n	801e650 <__ssrefill_r+0x28>
 801e632:	0023      	movs	r3, r4
 801e634:	3344      	adds	r3, #68	; 0x44
 801e636:	4299      	cmp	r1, r3
 801e638:	d001      	beq.n	801e63e <__ssrefill_r+0x16>
 801e63a:	f000 fe25 	bl	801f288 <_free_r>
 801e63e:	2000      	movs	r0, #0
 801e640:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801e642:	6360      	str	r0, [r4, #52]	; 0x34
 801e644:	6063      	str	r3, [r4, #4]
 801e646:	4283      	cmp	r3, r0
 801e648:	d002      	beq.n	801e650 <__ssrefill_r+0x28>
 801e64a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801e64c:	6023      	str	r3, [r4, #0]
 801e64e:	bd10      	pop	{r4, pc}
 801e650:	6923      	ldr	r3, [r4, #16]
 801e652:	2001      	movs	r0, #1
 801e654:	6023      	str	r3, [r4, #0]
 801e656:	2300      	movs	r3, #0
 801e658:	89a2      	ldrh	r2, [r4, #12]
 801e65a:	6063      	str	r3, [r4, #4]
 801e65c:	3320      	adds	r3, #32
 801e65e:	4313      	orrs	r3, r2
 801e660:	81a3      	strh	r3, [r4, #12]
 801e662:	4240      	negs	r0, r0
 801e664:	e7f3      	b.n	801e64e <__ssrefill_r+0x26>
	...

0801e668 <__ssvfiscanf_r>:
 801e668:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e66a:	0017      	movs	r7, r2
 801e66c:	2200      	movs	r2, #0
 801e66e:	4cb0      	ldr	r4, [pc, #704]	; (801e930 <__ssvfiscanf_r+0x2c8>)
 801e670:	25c0      	movs	r5, #192	; 0xc0
 801e672:	44a5      	add	sp, r4
 801e674:	9248      	str	r2, [sp, #288]	; 0x120
 801e676:	9249      	str	r2, [sp, #292]	; 0x124
 801e678:	aa05      	add	r2, sp, #20
 801e67a:	924a      	str	r2, [sp, #296]	; 0x128
 801e67c:	22be      	movs	r2, #190	; 0xbe
 801e67e:	000c      	movs	r4, r1
 801e680:	49ac      	ldr	r1, [pc, #688]	; (801e934 <__ssvfiscanf_r+0x2cc>)
 801e682:	9000      	str	r0, [sp, #0]
 801e684:	0052      	lsls	r2, r2, #1
 801e686:	a845      	add	r0, sp, #276	; 0x114
 801e688:	5081      	str	r1, [r0, r2]
 801e68a:	49ab      	ldr	r1, [pc, #684]	; (801e938 <__ssvfiscanf_r+0x2d0>)
 801e68c:	006d      	lsls	r5, r5, #1
 801e68e:	5141      	str	r1, [r0, r5]
 801e690:	9304      	str	r3, [sp, #16]
 801e692:	783b      	ldrb	r3, [r7, #0]
 801e694:	2b00      	cmp	r3, #0
 801e696:	d100      	bne.n	801e69a <__ssvfiscanf_r+0x32>
 801e698:	e148      	b.n	801e92c <__ssvfiscanf_r+0x2c4>
 801e69a:	f000 fdc9 	bl	801f230 <__locale_ctype_ptr>
 801e69e:	2208      	movs	r2, #8
 801e6a0:	783b      	ldrb	r3, [r7, #0]
 801e6a2:	1c7e      	adds	r6, r7, #1
 801e6a4:	18c0      	adds	r0, r0, r3
 801e6a6:	9301      	str	r3, [sp, #4]
 801e6a8:	7843      	ldrb	r3, [r0, #1]
 801e6aa:	4013      	ands	r3, r2
 801e6ac:	d020      	beq.n	801e6f0 <__ssvfiscanf_r+0x88>
 801e6ae:	6863      	ldr	r3, [r4, #4]
 801e6b0:	2b00      	cmp	r3, #0
 801e6b2:	dd14      	ble.n	801e6de <__ssvfiscanf_r+0x76>
 801e6b4:	f000 fdbc 	bl	801f230 <__locale_ctype_ptr>
 801e6b8:	2108      	movs	r1, #8
 801e6ba:	6823      	ldr	r3, [r4, #0]
 801e6bc:	781a      	ldrb	r2, [r3, #0]
 801e6be:	1880      	adds	r0, r0, r2
 801e6c0:	7842      	ldrb	r2, [r0, #1]
 801e6c2:	420a      	tst	r2, r1
 801e6c4:	d101      	bne.n	801e6ca <__ssvfiscanf_r+0x62>
 801e6c6:	0037      	movs	r7, r6
 801e6c8:	e7e3      	b.n	801e692 <__ssvfiscanf_r+0x2a>
 801e6ca:	9a49      	ldr	r2, [sp, #292]	; 0x124
 801e6cc:	3301      	adds	r3, #1
 801e6ce:	9201      	str	r2, [sp, #4]
 801e6d0:	3201      	adds	r2, #1
 801e6d2:	9249      	str	r2, [sp, #292]	; 0x124
 801e6d4:	6862      	ldr	r2, [r4, #4]
 801e6d6:	6023      	str	r3, [r4, #0]
 801e6d8:	3a01      	subs	r2, #1
 801e6da:	6062      	str	r2, [r4, #4]
 801e6dc:	e7e7      	b.n	801e6ae <__ssvfiscanf_r+0x46>
 801e6de:	ab45      	add	r3, sp, #276	; 0x114
 801e6e0:	595b      	ldr	r3, [r3, r5]
 801e6e2:	0021      	movs	r1, r4
 801e6e4:	9800      	ldr	r0, [sp, #0]
 801e6e6:	9301      	str	r3, [sp, #4]
 801e6e8:	4798      	blx	r3
 801e6ea:	2800      	cmp	r0, #0
 801e6ec:	d0e2      	beq.n	801e6b4 <__ssvfiscanf_r+0x4c>
 801e6ee:	e7ea      	b.n	801e6c6 <__ssvfiscanf_r+0x5e>
 801e6f0:	9a01      	ldr	r2, [sp, #4]
 801e6f2:	2a25      	cmp	r2, #37	; 0x25
 801e6f4:	d16d      	bne.n	801e7d2 <__ssvfiscanf_r+0x16a>
 801e6f6:	9347      	str	r3, [sp, #284]	; 0x11c
 801e6f8:	9345      	str	r3, [sp, #276]	; 0x114
 801e6fa:	787b      	ldrb	r3, [r7, #1]
 801e6fc:	2b2a      	cmp	r3, #42	; 0x2a
 801e6fe:	d102      	bne.n	801e706 <__ssvfiscanf_r+0x9e>
 801e700:	3b1a      	subs	r3, #26
 801e702:	9345      	str	r3, [sp, #276]	; 0x114
 801e704:	1cbe      	adds	r6, r7, #2
 801e706:	0037      	movs	r7, r6
 801e708:	220a      	movs	r2, #10
 801e70a:	7839      	ldrb	r1, [r7, #0]
 801e70c:	1c7b      	adds	r3, r7, #1
 801e70e:	9302      	str	r3, [sp, #8]
 801e710:	000b      	movs	r3, r1
 801e712:	3b30      	subs	r3, #48	; 0x30
 801e714:	2b09      	cmp	r3, #9
 801e716:	d924      	bls.n	801e762 <__ssvfiscanf_r+0xfa>
 801e718:	4e88      	ldr	r6, [pc, #544]	; (801e93c <__ssvfiscanf_r+0x2d4>)
 801e71a:	2203      	movs	r2, #3
 801e71c:	0030      	movs	r0, r6
 801e71e:	f000 fda7 	bl	801f270 <memchr>
 801e722:	2800      	cmp	r0, #0
 801e724:	d007      	beq.n	801e736 <__ssvfiscanf_r+0xce>
 801e726:	2301      	movs	r3, #1
 801e728:	1b80      	subs	r0, r0, r6
 801e72a:	4083      	lsls	r3, r0
 801e72c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801e72e:	9f02      	ldr	r7, [sp, #8]
 801e730:	4313      	orrs	r3, r2
 801e732:	9203      	str	r2, [sp, #12]
 801e734:	9345      	str	r3, [sp, #276]	; 0x114
 801e736:	783b      	ldrb	r3, [r7, #0]
 801e738:	1c7e      	adds	r6, r7, #1
 801e73a:	2b67      	cmp	r3, #103	; 0x67
 801e73c:	d835      	bhi.n	801e7aa <__ssvfiscanf_r+0x142>
 801e73e:	2b65      	cmp	r3, #101	; 0x65
 801e740:	d300      	bcc.n	801e744 <__ssvfiscanf_r+0xdc>
 801e742:	e0b8      	b.n	801e8b6 <__ssvfiscanf_r+0x24e>
 801e744:	2b47      	cmp	r3, #71	; 0x47
 801e746:	d814      	bhi.n	801e772 <__ssvfiscanf_r+0x10a>
 801e748:	2b45      	cmp	r3, #69	; 0x45
 801e74a:	d300      	bcc.n	801e74e <__ssvfiscanf_r+0xe6>
 801e74c:	e0b3      	b.n	801e8b6 <__ssvfiscanf_r+0x24e>
 801e74e:	2b00      	cmp	r3, #0
 801e750:	d100      	bne.n	801e754 <__ssvfiscanf_r+0xec>
 801e752:	e0e8      	b.n	801e926 <__ssvfiscanf_r+0x2be>
 801e754:	2b25      	cmp	r3, #37	; 0x25
 801e756:	d03c      	beq.n	801e7d2 <__ssvfiscanf_r+0x16a>
 801e758:	2303      	movs	r3, #3
 801e75a:	934b      	str	r3, [sp, #300]	; 0x12c
 801e75c:	3307      	adds	r3, #7
 801e75e:	9346      	str	r3, [sp, #280]	; 0x118
 801e760:	e066      	b.n	801e830 <__ssvfiscanf_r+0x1c8>
 801e762:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 801e764:	9f02      	ldr	r7, [sp, #8]
 801e766:	9303      	str	r3, [sp, #12]
 801e768:	4353      	muls	r3, r2
 801e76a:	3b30      	subs	r3, #48	; 0x30
 801e76c:	1859      	adds	r1, r3, r1
 801e76e:	9147      	str	r1, [sp, #284]	; 0x11c
 801e770:	e7cb      	b.n	801e70a <__ssvfiscanf_r+0xa2>
 801e772:	2b5b      	cmp	r3, #91	; 0x5b
 801e774:	d100      	bne.n	801e778 <__ssvfiscanf_r+0x110>
 801e776:	e07a      	b.n	801e86e <__ssvfiscanf_r+0x206>
 801e778:	d810      	bhi.n	801e79c <__ssvfiscanf_r+0x134>
 801e77a:	2b58      	cmp	r3, #88	; 0x58
 801e77c:	d1ec      	bne.n	801e758 <__ssvfiscanf_r+0xf0>
 801e77e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801e780:	9201      	str	r2, [sp, #4]
 801e782:	2280      	movs	r2, #128	; 0x80
 801e784:	9901      	ldr	r1, [sp, #4]
 801e786:	0092      	lsls	r2, r2, #2
 801e788:	430a      	orrs	r2, r1
 801e78a:	9245      	str	r2, [sp, #276]	; 0x114
 801e78c:	2210      	movs	r2, #16
 801e78e:	9246      	str	r2, [sp, #280]	; 0x118
 801e790:	226e      	movs	r2, #110	; 0x6e
 801e792:	429a      	cmp	r2, r3
 801e794:	419b      	sbcs	r3, r3
 801e796:	425b      	negs	r3, r3
 801e798:	3303      	adds	r3, #3
 801e79a:	e048      	b.n	801e82e <__ssvfiscanf_r+0x1c6>
 801e79c:	2b63      	cmp	r3, #99	; 0x63
 801e79e:	d100      	bne.n	801e7a2 <__ssvfiscanf_r+0x13a>
 801e7a0:	e072      	b.n	801e888 <__ssvfiscanf_r+0x220>
 801e7a2:	2b64      	cmp	r3, #100	; 0x64
 801e7a4:	d1d8      	bne.n	801e758 <__ssvfiscanf_r+0xf0>
 801e7a6:	220a      	movs	r2, #10
 801e7a8:	e7f1      	b.n	801e78e <__ssvfiscanf_r+0x126>
 801e7aa:	2b70      	cmp	r3, #112	; 0x70
 801e7ac:	d035      	beq.n	801e81a <__ssvfiscanf_r+0x1b2>
 801e7ae:	d808      	bhi.n	801e7c2 <__ssvfiscanf_r+0x15a>
 801e7b0:	2b6e      	cmp	r3, #110	; 0x6e
 801e7b2:	d100      	bne.n	801e7b6 <__ssvfiscanf_r+0x14e>
 801e7b4:	e070      	b.n	801e898 <__ssvfiscanf_r+0x230>
 801e7b6:	d837      	bhi.n	801e828 <__ssvfiscanf_r+0x1c0>
 801e7b8:	2b69      	cmp	r3, #105	; 0x69
 801e7ba:	d1cd      	bne.n	801e758 <__ssvfiscanf_r+0xf0>
 801e7bc:	2300      	movs	r3, #0
 801e7be:	9346      	str	r3, [sp, #280]	; 0x118
 801e7c0:	e7ea      	b.n	801e798 <__ssvfiscanf_r+0x130>
 801e7c2:	2b75      	cmp	r3, #117	; 0x75
 801e7c4:	d0ef      	beq.n	801e7a6 <__ssvfiscanf_r+0x13e>
 801e7c6:	2b78      	cmp	r3, #120	; 0x78
 801e7c8:	d0d9      	beq.n	801e77e <__ssvfiscanf_r+0x116>
 801e7ca:	2b73      	cmp	r3, #115	; 0x73
 801e7cc:	d1c4      	bne.n	801e758 <__ssvfiscanf_r+0xf0>
 801e7ce:	2302      	movs	r3, #2
 801e7d0:	e02d      	b.n	801e82e <__ssvfiscanf_r+0x1c6>
 801e7d2:	6863      	ldr	r3, [r4, #4]
 801e7d4:	2b00      	cmp	r3, #0
 801e7d6:	dd0f      	ble.n	801e7f8 <__ssvfiscanf_r+0x190>
 801e7d8:	6823      	ldr	r3, [r4, #0]
 801e7da:	9901      	ldr	r1, [sp, #4]
 801e7dc:	781a      	ldrb	r2, [r3, #0]
 801e7de:	428a      	cmp	r2, r1
 801e7e0:	d000      	beq.n	801e7e4 <__ssvfiscanf_r+0x17c>
 801e7e2:	e0a3      	b.n	801e92c <__ssvfiscanf_r+0x2c4>
 801e7e4:	3301      	adds	r3, #1
 801e7e6:	6862      	ldr	r2, [r4, #4]
 801e7e8:	6023      	str	r3, [r4, #0]
 801e7ea:	9b49      	ldr	r3, [sp, #292]	; 0x124
 801e7ec:	3a01      	subs	r2, #1
 801e7ee:	9301      	str	r3, [sp, #4]
 801e7f0:	3301      	adds	r3, #1
 801e7f2:	6062      	str	r2, [r4, #4]
 801e7f4:	9349      	str	r3, [sp, #292]	; 0x124
 801e7f6:	e766      	b.n	801e6c6 <__ssvfiscanf_r+0x5e>
 801e7f8:	ab45      	add	r3, sp, #276	; 0x114
 801e7fa:	595b      	ldr	r3, [r3, r5]
 801e7fc:	0021      	movs	r1, r4
 801e7fe:	9800      	ldr	r0, [sp, #0]
 801e800:	9302      	str	r3, [sp, #8]
 801e802:	4798      	blx	r3
 801e804:	2800      	cmp	r0, #0
 801e806:	d0e7      	beq.n	801e7d8 <__ssvfiscanf_r+0x170>
 801e808:	9848      	ldr	r0, [sp, #288]	; 0x120
 801e80a:	2800      	cmp	r0, #0
 801e80c:	d000      	beq.n	801e810 <__ssvfiscanf_r+0x1a8>
 801e80e:	e086      	b.n	801e91e <__ssvfiscanf_r+0x2b6>
 801e810:	3801      	subs	r0, #1
 801e812:	23a7      	movs	r3, #167	; 0xa7
 801e814:	009b      	lsls	r3, r3, #2
 801e816:	449d      	add	sp, r3
 801e818:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e81a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801e81c:	9201      	str	r2, [sp, #4]
 801e81e:	2220      	movs	r2, #32
 801e820:	9901      	ldr	r1, [sp, #4]
 801e822:	430a      	orrs	r2, r1
 801e824:	9245      	str	r2, [sp, #276]	; 0x114
 801e826:	e7aa      	b.n	801e77e <__ssvfiscanf_r+0x116>
 801e828:	2308      	movs	r3, #8
 801e82a:	9346      	str	r3, [sp, #280]	; 0x118
 801e82c:	3b04      	subs	r3, #4
 801e82e:	934b      	str	r3, [sp, #300]	; 0x12c
 801e830:	6863      	ldr	r3, [r4, #4]
 801e832:	2b00      	cmp	r3, #0
 801e834:	dd41      	ble.n	801e8ba <__ssvfiscanf_r+0x252>
 801e836:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801e838:	9301      	str	r3, [sp, #4]
 801e83a:	065b      	lsls	r3, r3, #25
 801e83c:	d408      	bmi.n	801e850 <__ssvfiscanf_r+0x1e8>
 801e83e:	f000 fcf7 	bl	801f230 <__locale_ctype_ptr>
 801e842:	2108      	movs	r1, #8
 801e844:	6823      	ldr	r3, [r4, #0]
 801e846:	781a      	ldrb	r2, [r3, #0]
 801e848:	1880      	adds	r0, r0, r2
 801e84a:	7842      	ldrb	r2, [r0, #1]
 801e84c:	420a      	tst	r2, r1
 801e84e:	d13d      	bne.n	801e8cc <__ssvfiscanf_r+0x264>
 801e850:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
 801e852:	2b02      	cmp	r3, #2
 801e854:	dc4f      	bgt.n	801e8f6 <__ssvfiscanf_r+0x28e>
 801e856:	ab04      	add	r3, sp, #16
 801e858:	0022      	movs	r2, r4
 801e85a:	a945      	add	r1, sp, #276	; 0x114
 801e85c:	9800      	ldr	r0, [sp, #0]
 801e85e:	f000 f9e7 	bl	801ec30 <_scanf_chars>
 801e862:	2801      	cmp	r0, #1
 801e864:	d062      	beq.n	801e92c <__ssvfiscanf_r+0x2c4>
 801e866:	2802      	cmp	r0, #2
 801e868:	d000      	beq.n	801e86c <__ssvfiscanf_r+0x204>
 801e86a:	e72c      	b.n	801e6c6 <__ssvfiscanf_r+0x5e>
 801e86c:	e7cc      	b.n	801e808 <__ssvfiscanf_r+0x1a0>
 801e86e:	0031      	movs	r1, r6
 801e870:	a805      	add	r0, sp, #20
 801e872:	f000 fb45 	bl	801ef00 <__sccl>
 801e876:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801e878:	0006      	movs	r6, r0
 801e87a:	9301      	str	r3, [sp, #4]
 801e87c:	2340      	movs	r3, #64	; 0x40
 801e87e:	9a01      	ldr	r2, [sp, #4]
 801e880:	4313      	orrs	r3, r2
 801e882:	9345      	str	r3, [sp, #276]	; 0x114
 801e884:	2301      	movs	r3, #1
 801e886:	e7d2      	b.n	801e82e <__ssvfiscanf_r+0x1c6>
 801e888:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801e88a:	9301      	str	r3, [sp, #4]
 801e88c:	2340      	movs	r3, #64	; 0x40
 801e88e:	9a01      	ldr	r2, [sp, #4]
 801e890:	4313      	orrs	r3, r2
 801e892:	9345      	str	r3, [sp, #276]	; 0x114
 801e894:	2300      	movs	r3, #0
 801e896:	e7ca      	b.n	801e82e <__ssvfiscanf_r+0x1c6>
 801e898:	9845      	ldr	r0, [sp, #276]	; 0x114
 801e89a:	06c3      	lsls	r3, r0, #27
 801e89c:	d500      	bpl.n	801e8a0 <__ssvfiscanf_r+0x238>
 801e89e:	e712      	b.n	801e6c6 <__ssvfiscanf_r+0x5e>
 801e8a0:	9b04      	ldr	r3, [sp, #16]
 801e8a2:	9a49      	ldr	r2, [sp, #292]	; 0x124
 801e8a4:	1d19      	adds	r1, r3, #4
 801e8a6:	9104      	str	r1, [sp, #16]
 801e8a8:	681b      	ldr	r3, [r3, #0]
 801e8aa:	07c7      	lsls	r7, r0, #31
 801e8ac:	d501      	bpl.n	801e8b2 <__ssvfiscanf_r+0x24a>
 801e8ae:	801a      	strh	r2, [r3, #0]
 801e8b0:	e709      	b.n	801e6c6 <__ssvfiscanf_r+0x5e>
 801e8b2:	601a      	str	r2, [r3, #0]
 801e8b4:	e707      	b.n	801e6c6 <__ssvfiscanf_r+0x5e>
 801e8b6:	2305      	movs	r3, #5
 801e8b8:	e7b9      	b.n	801e82e <__ssvfiscanf_r+0x1c6>
 801e8ba:	ab45      	add	r3, sp, #276	; 0x114
 801e8bc:	595b      	ldr	r3, [r3, r5]
 801e8be:	0021      	movs	r1, r4
 801e8c0:	9800      	ldr	r0, [sp, #0]
 801e8c2:	9301      	str	r3, [sp, #4]
 801e8c4:	4798      	blx	r3
 801e8c6:	2800      	cmp	r0, #0
 801e8c8:	d0b5      	beq.n	801e836 <__ssvfiscanf_r+0x1ce>
 801e8ca:	e79d      	b.n	801e808 <__ssvfiscanf_r+0x1a0>
 801e8cc:	9a49      	ldr	r2, [sp, #292]	; 0x124
 801e8ce:	9201      	str	r2, [sp, #4]
 801e8d0:	3201      	adds	r2, #1
 801e8d2:	9249      	str	r2, [sp, #292]	; 0x124
 801e8d4:	6862      	ldr	r2, [r4, #4]
 801e8d6:	3a01      	subs	r2, #1
 801e8d8:	6062      	str	r2, [r4, #4]
 801e8da:	2a00      	cmp	r2, #0
 801e8dc:	dd02      	ble.n	801e8e4 <__ssvfiscanf_r+0x27c>
 801e8de:	3301      	adds	r3, #1
 801e8e0:	6023      	str	r3, [r4, #0]
 801e8e2:	e7ac      	b.n	801e83e <__ssvfiscanf_r+0x1d6>
 801e8e4:	ab45      	add	r3, sp, #276	; 0x114
 801e8e6:	595b      	ldr	r3, [r3, r5]
 801e8e8:	0021      	movs	r1, r4
 801e8ea:	9800      	ldr	r0, [sp, #0]
 801e8ec:	9301      	str	r3, [sp, #4]
 801e8ee:	4798      	blx	r3
 801e8f0:	2800      	cmp	r0, #0
 801e8f2:	d0a4      	beq.n	801e83e <__ssvfiscanf_r+0x1d6>
 801e8f4:	e788      	b.n	801e808 <__ssvfiscanf_r+0x1a0>
 801e8f6:	2b04      	cmp	r3, #4
 801e8f8:	dc06      	bgt.n	801e908 <__ssvfiscanf_r+0x2a0>
 801e8fa:	ab04      	add	r3, sp, #16
 801e8fc:	0022      	movs	r2, r4
 801e8fe:	a945      	add	r1, sp, #276	; 0x114
 801e900:	9800      	ldr	r0, [sp, #0]
 801e902:	f000 f9fb 	bl	801ecfc <_scanf_i>
 801e906:	e7ac      	b.n	801e862 <__ssvfiscanf_r+0x1fa>
 801e908:	4b0d      	ldr	r3, [pc, #52]	; (801e940 <__ssvfiscanf_r+0x2d8>)
 801e90a:	2b00      	cmp	r3, #0
 801e90c:	d100      	bne.n	801e910 <__ssvfiscanf_r+0x2a8>
 801e90e:	e6da      	b.n	801e6c6 <__ssvfiscanf_r+0x5e>
 801e910:	ab04      	add	r3, sp, #16
 801e912:	0022      	movs	r2, r4
 801e914:	a945      	add	r1, sp, #276	; 0x114
 801e916:	9800      	ldr	r0, [sp, #0]
 801e918:	e000      	b.n	801e91c <__ssvfiscanf_r+0x2b4>
 801e91a:	bf00      	nop
 801e91c:	e7a1      	b.n	801e862 <__ssvfiscanf_r+0x1fa>
 801e91e:	89a3      	ldrh	r3, [r4, #12]
 801e920:	065b      	lsls	r3, r3, #25
 801e922:	d400      	bmi.n	801e926 <__ssvfiscanf_r+0x2be>
 801e924:	e775      	b.n	801e812 <__ssvfiscanf_r+0x1aa>
 801e926:	2001      	movs	r0, #1
 801e928:	4240      	negs	r0, r0
 801e92a:	e772      	b.n	801e812 <__ssvfiscanf_r+0x1aa>
 801e92c:	9848      	ldr	r0, [sp, #288]	; 0x120
 801e92e:	e770      	b.n	801e812 <__ssvfiscanf_r+0x1aa>
 801e930:	fffffd64 	.word	0xfffffd64
 801e934:	0801e5b1 	.word	0x0801e5b1
 801e938:	0801e629 	.word	0x0801e629
 801e93c:	0802150e 	.word	0x0802150e
 801e940:	00000000 	.word	0x00000000

0801e944 <_printf_common>:
 801e944:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801e946:	0015      	movs	r5, r2
 801e948:	9301      	str	r3, [sp, #4]
 801e94a:	688a      	ldr	r2, [r1, #8]
 801e94c:	690b      	ldr	r3, [r1, #16]
 801e94e:	9000      	str	r0, [sp, #0]
 801e950:	000c      	movs	r4, r1
 801e952:	4293      	cmp	r3, r2
 801e954:	da00      	bge.n	801e958 <_printf_common+0x14>
 801e956:	0013      	movs	r3, r2
 801e958:	0022      	movs	r2, r4
 801e95a:	602b      	str	r3, [r5, #0]
 801e95c:	3243      	adds	r2, #67	; 0x43
 801e95e:	7812      	ldrb	r2, [r2, #0]
 801e960:	2a00      	cmp	r2, #0
 801e962:	d001      	beq.n	801e968 <_printf_common+0x24>
 801e964:	3301      	adds	r3, #1
 801e966:	602b      	str	r3, [r5, #0]
 801e968:	6823      	ldr	r3, [r4, #0]
 801e96a:	069b      	lsls	r3, r3, #26
 801e96c:	d502      	bpl.n	801e974 <_printf_common+0x30>
 801e96e:	682b      	ldr	r3, [r5, #0]
 801e970:	3302      	adds	r3, #2
 801e972:	602b      	str	r3, [r5, #0]
 801e974:	2706      	movs	r7, #6
 801e976:	6823      	ldr	r3, [r4, #0]
 801e978:	401f      	ands	r7, r3
 801e97a:	d027      	beq.n	801e9cc <_printf_common+0x88>
 801e97c:	0023      	movs	r3, r4
 801e97e:	3343      	adds	r3, #67	; 0x43
 801e980:	781b      	ldrb	r3, [r3, #0]
 801e982:	1e5a      	subs	r2, r3, #1
 801e984:	4193      	sbcs	r3, r2
 801e986:	6822      	ldr	r2, [r4, #0]
 801e988:	0692      	lsls	r2, r2, #26
 801e98a:	d430      	bmi.n	801e9ee <_printf_common+0xaa>
 801e98c:	0022      	movs	r2, r4
 801e98e:	9901      	ldr	r1, [sp, #4]
 801e990:	3243      	adds	r2, #67	; 0x43
 801e992:	9800      	ldr	r0, [sp, #0]
 801e994:	9e08      	ldr	r6, [sp, #32]
 801e996:	47b0      	blx	r6
 801e998:	1c43      	adds	r3, r0, #1
 801e99a:	d025      	beq.n	801e9e8 <_printf_common+0xa4>
 801e99c:	2306      	movs	r3, #6
 801e99e:	6820      	ldr	r0, [r4, #0]
 801e9a0:	682a      	ldr	r2, [r5, #0]
 801e9a2:	68e1      	ldr	r1, [r4, #12]
 801e9a4:	4003      	ands	r3, r0
 801e9a6:	2500      	movs	r5, #0
 801e9a8:	2b04      	cmp	r3, #4
 801e9aa:	d103      	bne.n	801e9b4 <_printf_common+0x70>
 801e9ac:	1a8d      	subs	r5, r1, r2
 801e9ae:	43eb      	mvns	r3, r5
 801e9b0:	17db      	asrs	r3, r3, #31
 801e9b2:	401d      	ands	r5, r3
 801e9b4:	68a3      	ldr	r3, [r4, #8]
 801e9b6:	6922      	ldr	r2, [r4, #16]
 801e9b8:	4293      	cmp	r3, r2
 801e9ba:	dd01      	ble.n	801e9c0 <_printf_common+0x7c>
 801e9bc:	1a9b      	subs	r3, r3, r2
 801e9be:	18ed      	adds	r5, r5, r3
 801e9c0:	2700      	movs	r7, #0
 801e9c2:	42bd      	cmp	r5, r7
 801e9c4:	d120      	bne.n	801ea08 <_printf_common+0xc4>
 801e9c6:	2000      	movs	r0, #0
 801e9c8:	e010      	b.n	801e9ec <_printf_common+0xa8>
 801e9ca:	3701      	adds	r7, #1
 801e9cc:	68e3      	ldr	r3, [r4, #12]
 801e9ce:	682a      	ldr	r2, [r5, #0]
 801e9d0:	1a9b      	subs	r3, r3, r2
 801e9d2:	42bb      	cmp	r3, r7
 801e9d4:	ddd2      	ble.n	801e97c <_printf_common+0x38>
 801e9d6:	0022      	movs	r2, r4
 801e9d8:	2301      	movs	r3, #1
 801e9da:	3219      	adds	r2, #25
 801e9dc:	9901      	ldr	r1, [sp, #4]
 801e9de:	9800      	ldr	r0, [sp, #0]
 801e9e0:	9e08      	ldr	r6, [sp, #32]
 801e9e2:	47b0      	blx	r6
 801e9e4:	1c43      	adds	r3, r0, #1
 801e9e6:	d1f0      	bne.n	801e9ca <_printf_common+0x86>
 801e9e8:	2001      	movs	r0, #1
 801e9ea:	4240      	negs	r0, r0
 801e9ec:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801e9ee:	2030      	movs	r0, #48	; 0x30
 801e9f0:	18e1      	adds	r1, r4, r3
 801e9f2:	3143      	adds	r1, #67	; 0x43
 801e9f4:	7008      	strb	r0, [r1, #0]
 801e9f6:	0021      	movs	r1, r4
 801e9f8:	1c5a      	adds	r2, r3, #1
 801e9fa:	3145      	adds	r1, #69	; 0x45
 801e9fc:	7809      	ldrb	r1, [r1, #0]
 801e9fe:	18a2      	adds	r2, r4, r2
 801ea00:	3243      	adds	r2, #67	; 0x43
 801ea02:	3302      	adds	r3, #2
 801ea04:	7011      	strb	r1, [r2, #0]
 801ea06:	e7c1      	b.n	801e98c <_printf_common+0x48>
 801ea08:	0022      	movs	r2, r4
 801ea0a:	2301      	movs	r3, #1
 801ea0c:	321a      	adds	r2, #26
 801ea0e:	9901      	ldr	r1, [sp, #4]
 801ea10:	9800      	ldr	r0, [sp, #0]
 801ea12:	9e08      	ldr	r6, [sp, #32]
 801ea14:	47b0      	blx	r6
 801ea16:	1c43      	adds	r3, r0, #1
 801ea18:	d0e6      	beq.n	801e9e8 <_printf_common+0xa4>
 801ea1a:	3701      	adds	r7, #1
 801ea1c:	e7d1      	b.n	801e9c2 <_printf_common+0x7e>
	...

0801ea20 <_printf_i>:
 801ea20:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ea22:	b089      	sub	sp, #36	; 0x24
 801ea24:	9204      	str	r2, [sp, #16]
 801ea26:	000a      	movs	r2, r1
 801ea28:	3243      	adds	r2, #67	; 0x43
 801ea2a:	9305      	str	r3, [sp, #20]
 801ea2c:	9003      	str	r0, [sp, #12]
 801ea2e:	9202      	str	r2, [sp, #8]
 801ea30:	7e0a      	ldrb	r2, [r1, #24]
 801ea32:	000c      	movs	r4, r1
 801ea34:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ea36:	2a6e      	cmp	r2, #110	; 0x6e
 801ea38:	d100      	bne.n	801ea3c <_printf_i+0x1c>
 801ea3a:	e086      	b.n	801eb4a <_printf_i+0x12a>
 801ea3c:	d81f      	bhi.n	801ea7e <_printf_i+0x5e>
 801ea3e:	2a63      	cmp	r2, #99	; 0x63
 801ea40:	d033      	beq.n	801eaaa <_printf_i+0x8a>
 801ea42:	d808      	bhi.n	801ea56 <_printf_i+0x36>
 801ea44:	2a00      	cmp	r2, #0
 801ea46:	d100      	bne.n	801ea4a <_printf_i+0x2a>
 801ea48:	e08c      	b.n	801eb64 <_printf_i+0x144>
 801ea4a:	2a58      	cmp	r2, #88	; 0x58
 801ea4c:	d04d      	beq.n	801eaea <_printf_i+0xca>
 801ea4e:	0025      	movs	r5, r4
 801ea50:	3542      	adds	r5, #66	; 0x42
 801ea52:	702a      	strb	r2, [r5, #0]
 801ea54:	e030      	b.n	801eab8 <_printf_i+0x98>
 801ea56:	2a64      	cmp	r2, #100	; 0x64
 801ea58:	d001      	beq.n	801ea5e <_printf_i+0x3e>
 801ea5a:	2a69      	cmp	r2, #105	; 0x69
 801ea5c:	d1f7      	bne.n	801ea4e <_printf_i+0x2e>
 801ea5e:	6819      	ldr	r1, [r3, #0]
 801ea60:	6825      	ldr	r5, [r4, #0]
 801ea62:	1d0a      	adds	r2, r1, #4
 801ea64:	0628      	lsls	r0, r5, #24
 801ea66:	d529      	bpl.n	801eabc <_printf_i+0x9c>
 801ea68:	6808      	ldr	r0, [r1, #0]
 801ea6a:	601a      	str	r2, [r3, #0]
 801ea6c:	2800      	cmp	r0, #0
 801ea6e:	da03      	bge.n	801ea78 <_printf_i+0x58>
 801ea70:	232d      	movs	r3, #45	; 0x2d
 801ea72:	9a02      	ldr	r2, [sp, #8]
 801ea74:	4240      	negs	r0, r0
 801ea76:	7013      	strb	r3, [r2, #0]
 801ea78:	4e6b      	ldr	r6, [pc, #428]	; (801ec28 <_printf_i+0x208>)
 801ea7a:	270a      	movs	r7, #10
 801ea7c:	e04f      	b.n	801eb1e <_printf_i+0xfe>
 801ea7e:	2a73      	cmp	r2, #115	; 0x73
 801ea80:	d074      	beq.n	801eb6c <_printf_i+0x14c>
 801ea82:	d808      	bhi.n	801ea96 <_printf_i+0x76>
 801ea84:	2a6f      	cmp	r2, #111	; 0x6f
 801ea86:	d01f      	beq.n	801eac8 <_printf_i+0xa8>
 801ea88:	2a70      	cmp	r2, #112	; 0x70
 801ea8a:	d1e0      	bne.n	801ea4e <_printf_i+0x2e>
 801ea8c:	2220      	movs	r2, #32
 801ea8e:	6809      	ldr	r1, [r1, #0]
 801ea90:	430a      	orrs	r2, r1
 801ea92:	6022      	str	r2, [r4, #0]
 801ea94:	e003      	b.n	801ea9e <_printf_i+0x7e>
 801ea96:	2a75      	cmp	r2, #117	; 0x75
 801ea98:	d016      	beq.n	801eac8 <_printf_i+0xa8>
 801ea9a:	2a78      	cmp	r2, #120	; 0x78
 801ea9c:	d1d7      	bne.n	801ea4e <_printf_i+0x2e>
 801ea9e:	0022      	movs	r2, r4
 801eaa0:	2178      	movs	r1, #120	; 0x78
 801eaa2:	3245      	adds	r2, #69	; 0x45
 801eaa4:	7011      	strb	r1, [r2, #0]
 801eaa6:	4e61      	ldr	r6, [pc, #388]	; (801ec2c <_printf_i+0x20c>)
 801eaa8:	e022      	b.n	801eaf0 <_printf_i+0xd0>
 801eaaa:	0025      	movs	r5, r4
 801eaac:	681a      	ldr	r2, [r3, #0]
 801eaae:	3542      	adds	r5, #66	; 0x42
 801eab0:	1d11      	adds	r1, r2, #4
 801eab2:	6019      	str	r1, [r3, #0]
 801eab4:	6813      	ldr	r3, [r2, #0]
 801eab6:	702b      	strb	r3, [r5, #0]
 801eab8:	2301      	movs	r3, #1
 801eaba:	e065      	b.n	801eb88 <_printf_i+0x168>
 801eabc:	6808      	ldr	r0, [r1, #0]
 801eabe:	601a      	str	r2, [r3, #0]
 801eac0:	0669      	lsls	r1, r5, #25
 801eac2:	d5d3      	bpl.n	801ea6c <_printf_i+0x4c>
 801eac4:	b200      	sxth	r0, r0
 801eac6:	e7d1      	b.n	801ea6c <_printf_i+0x4c>
 801eac8:	6819      	ldr	r1, [r3, #0]
 801eaca:	6825      	ldr	r5, [r4, #0]
 801eacc:	1d08      	adds	r0, r1, #4
 801eace:	6018      	str	r0, [r3, #0]
 801ead0:	6808      	ldr	r0, [r1, #0]
 801ead2:	062e      	lsls	r6, r5, #24
 801ead4:	d505      	bpl.n	801eae2 <_printf_i+0xc2>
 801ead6:	4e54      	ldr	r6, [pc, #336]	; (801ec28 <_printf_i+0x208>)
 801ead8:	2708      	movs	r7, #8
 801eada:	2a6f      	cmp	r2, #111	; 0x6f
 801eadc:	d01b      	beq.n	801eb16 <_printf_i+0xf6>
 801eade:	270a      	movs	r7, #10
 801eae0:	e019      	b.n	801eb16 <_printf_i+0xf6>
 801eae2:	066d      	lsls	r5, r5, #25
 801eae4:	d5f7      	bpl.n	801ead6 <_printf_i+0xb6>
 801eae6:	b280      	uxth	r0, r0
 801eae8:	e7f5      	b.n	801ead6 <_printf_i+0xb6>
 801eaea:	3145      	adds	r1, #69	; 0x45
 801eaec:	4e4e      	ldr	r6, [pc, #312]	; (801ec28 <_printf_i+0x208>)
 801eaee:	700a      	strb	r2, [r1, #0]
 801eaf0:	6818      	ldr	r0, [r3, #0]
 801eaf2:	6822      	ldr	r2, [r4, #0]
 801eaf4:	1d01      	adds	r1, r0, #4
 801eaf6:	6800      	ldr	r0, [r0, #0]
 801eaf8:	6019      	str	r1, [r3, #0]
 801eafa:	0615      	lsls	r5, r2, #24
 801eafc:	d521      	bpl.n	801eb42 <_printf_i+0x122>
 801eafe:	07d3      	lsls	r3, r2, #31
 801eb00:	d502      	bpl.n	801eb08 <_printf_i+0xe8>
 801eb02:	2320      	movs	r3, #32
 801eb04:	431a      	orrs	r2, r3
 801eb06:	6022      	str	r2, [r4, #0]
 801eb08:	2710      	movs	r7, #16
 801eb0a:	2800      	cmp	r0, #0
 801eb0c:	d103      	bne.n	801eb16 <_printf_i+0xf6>
 801eb0e:	2320      	movs	r3, #32
 801eb10:	6822      	ldr	r2, [r4, #0]
 801eb12:	439a      	bics	r2, r3
 801eb14:	6022      	str	r2, [r4, #0]
 801eb16:	0023      	movs	r3, r4
 801eb18:	2200      	movs	r2, #0
 801eb1a:	3343      	adds	r3, #67	; 0x43
 801eb1c:	701a      	strb	r2, [r3, #0]
 801eb1e:	6863      	ldr	r3, [r4, #4]
 801eb20:	60a3      	str	r3, [r4, #8]
 801eb22:	2b00      	cmp	r3, #0
 801eb24:	db58      	blt.n	801ebd8 <_printf_i+0x1b8>
 801eb26:	2204      	movs	r2, #4
 801eb28:	6821      	ldr	r1, [r4, #0]
 801eb2a:	4391      	bics	r1, r2
 801eb2c:	6021      	str	r1, [r4, #0]
 801eb2e:	2800      	cmp	r0, #0
 801eb30:	d154      	bne.n	801ebdc <_printf_i+0x1bc>
 801eb32:	9d02      	ldr	r5, [sp, #8]
 801eb34:	2b00      	cmp	r3, #0
 801eb36:	d05a      	beq.n	801ebee <_printf_i+0x1ce>
 801eb38:	0025      	movs	r5, r4
 801eb3a:	7833      	ldrb	r3, [r6, #0]
 801eb3c:	3542      	adds	r5, #66	; 0x42
 801eb3e:	702b      	strb	r3, [r5, #0]
 801eb40:	e055      	b.n	801ebee <_printf_i+0x1ce>
 801eb42:	0655      	lsls	r5, r2, #25
 801eb44:	d5db      	bpl.n	801eafe <_printf_i+0xde>
 801eb46:	b280      	uxth	r0, r0
 801eb48:	e7d9      	b.n	801eafe <_printf_i+0xde>
 801eb4a:	681a      	ldr	r2, [r3, #0]
 801eb4c:	680d      	ldr	r5, [r1, #0]
 801eb4e:	1d10      	adds	r0, r2, #4
 801eb50:	6949      	ldr	r1, [r1, #20]
 801eb52:	6018      	str	r0, [r3, #0]
 801eb54:	6813      	ldr	r3, [r2, #0]
 801eb56:	062e      	lsls	r6, r5, #24
 801eb58:	d501      	bpl.n	801eb5e <_printf_i+0x13e>
 801eb5a:	6019      	str	r1, [r3, #0]
 801eb5c:	e002      	b.n	801eb64 <_printf_i+0x144>
 801eb5e:	066d      	lsls	r5, r5, #25
 801eb60:	d5fb      	bpl.n	801eb5a <_printf_i+0x13a>
 801eb62:	8019      	strh	r1, [r3, #0]
 801eb64:	2300      	movs	r3, #0
 801eb66:	9d02      	ldr	r5, [sp, #8]
 801eb68:	6123      	str	r3, [r4, #16]
 801eb6a:	e04f      	b.n	801ec0c <_printf_i+0x1ec>
 801eb6c:	681a      	ldr	r2, [r3, #0]
 801eb6e:	1d11      	adds	r1, r2, #4
 801eb70:	6019      	str	r1, [r3, #0]
 801eb72:	6815      	ldr	r5, [r2, #0]
 801eb74:	2100      	movs	r1, #0
 801eb76:	6862      	ldr	r2, [r4, #4]
 801eb78:	0028      	movs	r0, r5
 801eb7a:	f000 fb79 	bl	801f270 <memchr>
 801eb7e:	2800      	cmp	r0, #0
 801eb80:	d001      	beq.n	801eb86 <_printf_i+0x166>
 801eb82:	1b40      	subs	r0, r0, r5
 801eb84:	6060      	str	r0, [r4, #4]
 801eb86:	6863      	ldr	r3, [r4, #4]
 801eb88:	6123      	str	r3, [r4, #16]
 801eb8a:	2300      	movs	r3, #0
 801eb8c:	9a02      	ldr	r2, [sp, #8]
 801eb8e:	7013      	strb	r3, [r2, #0]
 801eb90:	e03c      	b.n	801ec0c <_printf_i+0x1ec>
 801eb92:	6923      	ldr	r3, [r4, #16]
 801eb94:	002a      	movs	r2, r5
 801eb96:	9904      	ldr	r1, [sp, #16]
 801eb98:	9803      	ldr	r0, [sp, #12]
 801eb9a:	9d05      	ldr	r5, [sp, #20]
 801eb9c:	47a8      	blx	r5
 801eb9e:	1c43      	adds	r3, r0, #1
 801eba0:	d03e      	beq.n	801ec20 <_printf_i+0x200>
 801eba2:	6823      	ldr	r3, [r4, #0]
 801eba4:	079b      	lsls	r3, r3, #30
 801eba6:	d415      	bmi.n	801ebd4 <_printf_i+0x1b4>
 801eba8:	9b07      	ldr	r3, [sp, #28]
 801ebaa:	68e0      	ldr	r0, [r4, #12]
 801ebac:	4298      	cmp	r0, r3
 801ebae:	da39      	bge.n	801ec24 <_printf_i+0x204>
 801ebb0:	0018      	movs	r0, r3
 801ebb2:	e037      	b.n	801ec24 <_printf_i+0x204>
 801ebb4:	0022      	movs	r2, r4
 801ebb6:	2301      	movs	r3, #1
 801ebb8:	3219      	adds	r2, #25
 801ebba:	9904      	ldr	r1, [sp, #16]
 801ebbc:	9803      	ldr	r0, [sp, #12]
 801ebbe:	9e05      	ldr	r6, [sp, #20]
 801ebc0:	47b0      	blx	r6
 801ebc2:	1c43      	adds	r3, r0, #1
 801ebc4:	d02c      	beq.n	801ec20 <_printf_i+0x200>
 801ebc6:	3501      	adds	r5, #1
 801ebc8:	68e3      	ldr	r3, [r4, #12]
 801ebca:	9a07      	ldr	r2, [sp, #28]
 801ebcc:	1a9b      	subs	r3, r3, r2
 801ebce:	42ab      	cmp	r3, r5
 801ebd0:	dcf0      	bgt.n	801ebb4 <_printf_i+0x194>
 801ebd2:	e7e9      	b.n	801eba8 <_printf_i+0x188>
 801ebd4:	2500      	movs	r5, #0
 801ebd6:	e7f7      	b.n	801ebc8 <_printf_i+0x1a8>
 801ebd8:	2800      	cmp	r0, #0
 801ebda:	d0ad      	beq.n	801eb38 <_printf_i+0x118>
 801ebdc:	9d02      	ldr	r5, [sp, #8]
 801ebde:	0039      	movs	r1, r7
 801ebe0:	f7e1 fb20 	bl	8000224 <__aeabi_uidivmod>
 801ebe4:	5c73      	ldrb	r3, [r6, r1]
 801ebe6:	3d01      	subs	r5, #1
 801ebe8:	702b      	strb	r3, [r5, #0]
 801ebea:	2800      	cmp	r0, #0
 801ebec:	d1f7      	bne.n	801ebde <_printf_i+0x1be>
 801ebee:	2f08      	cmp	r7, #8
 801ebf0:	d109      	bne.n	801ec06 <_printf_i+0x1e6>
 801ebf2:	6823      	ldr	r3, [r4, #0]
 801ebf4:	07db      	lsls	r3, r3, #31
 801ebf6:	d506      	bpl.n	801ec06 <_printf_i+0x1e6>
 801ebf8:	6863      	ldr	r3, [r4, #4]
 801ebfa:	6922      	ldr	r2, [r4, #16]
 801ebfc:	4293      	cmp	r3, r2
 801ebfe:	dc02      	bgt.n	801ec06 <_printf_i+0x1e6>
 801ec00:	2330      	movs	r3, #48	; 0x30
 801ec02:	3d01      	subs	r5, #1
 801ec04:	702b      	strb	r3, [r5, #0]
 801ec06:	9b02      	ldr	r3, [sp, #8]
 801ec08:	1b5b      	subs	r3, r3, r5
 801ec0a:	6123      	str	r3, [r4, #16]
 801ec0c:	9b05      	ldr	r3, [sp, #20]
 801ec0e:	aa07      	add	r2, sp, #28
 801ec10:	9300      	str	r3, [sp, #0]
 801ec12:	0021      	movs	r1, r4
 801ec14:	9b04      	ldr	r3, [sp, #16]
 801ec16:	9803      	ldr	r0, [sp, #12]
 801ec18:	f7ff fe94 	bl	801e944 <_printf_common>
 801ec1c:	1c43      	adds	r3, r0, #1
 801ec1e:	d1b8      	bne.n	801eb92 <_printf_i+0x172>
 801ec20:	2001      	movs	r0, #1
 801ec22:	4240      	negs	r0, r0
 801ec24:	b009      	add	sp, #36	; 0x24
 801ec26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ec28:	08021519 	.word	0x08021519
 801ec2c:	0802152a 	.word	0x0802152a

0801ec30 <_scanf_chars>:
 801ec30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801ec32:	0015      	movs	r5, r2
 801ec34:	688a      	ldr	r2, [r1, #8]
 801ec36:	9001      	str	r0, [sp, #4]
 801ec38:	000c      	movs	r4, r1
 801ec3a:	2a00      	cmp	r2, #0
 801ec3c:	d104      	bne.n	801ec48 <_scanf_chars+0x18>
 801ec3e:	698a      	ldr	r2, [r1, #24]
 801ec40:	2a00      	cmp	r2, #0
 801ec42:	d117      	bne.n	801ec74 <_scanf_chars+0x44>
 801ec44:	3201      	adds	r2, #1
 801ec46:	60a2      	str	r2, [r4, #8]
 801ec48:	6822      	ldr	r2, [r4, #0]
 801ec4a:	06d2      	lsls	r2, r2, #27
 801ec4c:	d403      	bmi.n	801ec56 <_scanf_chars+0x26>
 801ec4e:	681a      	ldr	r2, [r3, #0]
 801ec50:	1d11      	adds	r1, r2, #4
 801ec52:	6019      	str	r1, [r3, #0]
 801ec54:	6817      	ldr	r7, [r2, #0]
 801ec56:	2600      	movs	r6, #0
 801ec58:	69a3      	ldr	r3, [r4, #24]
 801ec5a:	2b00      	cmp	r3, #0
 801ec5c:	d01f      	beq.n	801ec9e <_scanf_chars+0x6e>
 801ec5e:	2b01      	cmp	r3, #1
 801ec60:	d10b      	bne.n	801ec7a <_scanf_chars+0x4a>
 801ec62:	682b      	ldr	r3, [r5, #0]
 801ec64:	6962      	ldr	r2, [r4, #20]
 801ec66:	781b      	ldrb	r3, [r3, #0]
 801ec68:	5cd3      	ldrb	r3, [r2, r3]
 801ec6a:	2b00      	cmp	r3, #0
 801ec6c:	d117      	bne.n	801ec9e <_scanf_chars+0x6e>
 801ec6e:	2e00      	cmp	r6, #0
 801ec70:	d133      	bne.n	801ecda <_scanf_chars+0xaa>
 801ec72:	e009      	b.n	801ec88 <_scanf_chars+0x58>
 801ec74:	2201      	movs	r2, #1
 801ec76:	4252      	negs	r2, r2
 801ec78:	e7e5      	b.n	801ec46 <_scanf_chars+0x16>
 801ec7a:	2b02      	cmp	r3, #2
 801ec7c:	d006      	beq.n	801ec8c <_scanf_chars+0x5c>
 801ec7e:	2e00      	cmp	r6, #0
 801ec80:	d12b      	bne.n	801ecda <_scanf_chars+0xaa>
 801ec82:	69a3      	ldr	r3, [r4, #24]
 801ec84:	2b01      	cmp	r3, #1
 801ec86:	d128      	bne.n	801ecda <_scanf_chars+0xaa>
 801ec88:	2001      	movs	r0, #1
 801ec8a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801ec8c:	f000 fad0 	bl	801f230 <__locale_ctype_ptr>
 801ec90:	2208      	movs	r2, #8
 801ec92:	682b      	ldr	r3, [r5, #0]
 801ec94:	781b      	ldrb	r3, [r3, #0]
 801ec96:	18c0      	adds	r0, r0, r3
 801ec98:	7843      	ldrb	r3, [r0, #1]
 801ec9a:	4213      	tst	r3, r2
 801ec9c:	d1ef      	bne.n	801ec7e <_scanf_chars+0x4e>
 801ec9e:	2210      	movs	r2, #16
 801eca0:	6823      	ldr	r3, [r4, #0]
 801eca2:	3601      	adds	r6, #1
 801eca4:	4213      	tst	r3, r2
 801eca6:	d103      	bne.n	801ecb0 <_scanf_chars+0x80>
 801eca8:	682b      	ldr	r3, [r5, #0]
 801ecaa:	781b      	ldrb	r3, [r3, #0]
 801ecac:	703b      	strb	r3, [r7, #0]
 801ecae:	3701      	adds	r7, #1
 801ecb0:	682a      	ldr	r2, [r5, #0]
 801ecb2:	686b      	ldr	r3, [r5, #4]
 801ecb4:	3201      	adds	r2, #1
 801ecb6:	602a      	str	r2, [r5, #0]
 801ecb8:	68a2      	ldr	r2, [r4, #8]
 801ecba:	3b01      	subs	r3, #1
 801ecbc:	3a01      	subs	r2, #1
 801ecbe:	606b      	str	r3, [r5, #4]
 801ecc0:	60a2      	str	r2, [r4, #8]
 801ecc2:	2a00      	cmp	r2, #0
 801ecc4:	d009      	beq.n	801ecda <_scanf_chars+0xaa>
 801ecc6:	2b00      	cmp	r3, #0
 801ecc8:	dcc6      	bgt.n	801ec58 <_scanf_chars+0x28>
 801ecca:	23c0      	movs	r3, #192	; 0xc0
 801eccc:	005b      	lsls	r3, r3, #1
 801ecce:	58e3      	ldr	r3, [r4, r3]
 801ecd0:	0029      	movs	r1, r5
 801ecd2:	9801      	ldr	r0, [sp, #4]
 801ecd4:	4798      	blx	r3
 801ecd6:	2800      	cmp	r0, #0
 801ecd8:	d0be      	beq.n	801ec58 <_scanf_chars+0x28>
 801ecda:	2310      	movs	r3, #16
 801ecdc:	6822      	ldr	r2, [r4, #0]
 801ecde:	4013      	ands	r3, r2
 801ece0:	d106      	bne.n	801ecf0 <_scanf_chars+0xc0>
 801ece2:	68e2      	ldr	r2, [r4, #12]
 801ece4:	3201      	adds	r2, #1
 801ece6:	60e2      	str	r2, [r4, #12]
 801ece8:	69a2      	ldr	r2, [r4, #24]
 801ecea:	2a00      	cmp	r2, #0
 801ecec:	d000      	beq.n	801ecf0 <_scanf_chars+0xc0>
 801ecee:	703b      	strb	r3, [r7, #0]
 801ecf0:	6923      	ldr	r3, [r4, #16]
 801ecf2:	2000      	movs	r0, #0
 801ecf4:	199e      	adds	r6, r3, r6
 801ecf6:	6126      	str	r6, [r4, #16]
 801ecf8:	e7c7      	b.n	801ec8a <_scanf_chars+0x5a>
	...

0801ecfc <_scanf_i>:
 801ecfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ecfe:	000c      	movs	r4, r1
 801ed00:	b08b      	sub	sp, #44	; 0x2c
 801ed02:	9302      	str	r3, [sp, #8]
 801ed04:	4b78      	ldr	r3, [pc, #480]	; (801eee8 <_scanf_i+0x1ec>)
 801ed06:	9004      	str	r0, [sp, #16]
 801ed08:	0016      	movs	r6, r2
 801ed0a:	aa07      	add	r2, sp, #28
 801ed0c:	cb23      	ldmia	r3!, {r0, r1, r5}
 801ed0e:	c223      	stmia	r2!, {r0, r1, r5}
 801ed10:	4b76      	ldr	r3, [pc, #472]	; (801eeec <_scanf_i+0x1f0>)
 801ed12:	9305      	str	r3, [sp, #20]
 801ed14:	69a3      	ldr	r3, [r4, #24]
 801ed16:	2b03      	cmp	r3, #3
 801ed18:	d101      	bne.n	801ed1e <_scanf_i+0x22>
 801ed1a:	4b75      	ldr	r3, [pc, #468]	; (801eef0 <_scanf_i+0x1f4>)
 801ed1c:	9305      	str	r3, [sp, #20]
 801ed1e:	22ae      	movs	r2, #174	; 0xae
 801ed20:	2000      	movs	r0, #0
 801ed22:	68a3      	ldr	r3, [r4, #8]
 801ed24:	0052      	lsls	r2, r2, #1
 801ed26:	1e59      	subs	r1, r3, #1
 801ed28:	9003      	str	r0, [sp, #12]
 801ed2a:	4291      	cmp	r1, r2
 801ed2c:	d905      	bls.n	801ed3a <_scanf_i+0x3e>
 801ed2e:	3b5e      	subs	r3, #94	; 0x5e
 801ed30:	3bff      	subs	r3, #255	; 0xff
 801ed32:	9303      	str	r3, [sp, #12]
 801ed34:	235e      	movs	r3, #94	; 0x5e
 801ed36:	33ff      	adds	r3, #255	; 0xff
 801ed38:	60a3      	str	r3, [r4, #8]
 801ed3a:	0023      	movs	r3, r4
 801ed3c:	331c      	adds	r3, #28
 801ed3e:	9301      	str	r3, [sp, #4]
 801ed40:	23d0      	movs	r3, #208	; 0xd0
 801ed42:	2700      	movs	r7, #0
 801ed44:	6822      	ldr	r2, [r4, #0]
 801ed46:	011b      	lsls	r3, r3, #4
 801ed48:	4313      	orrs	r3, r2
 801ed4a:	6023      	str	r3, [r4, #0]
 801ed4c:	9b01      	ldr	r3, [sp, #4]
 801ed4e:	9300      	str	r3, [sp, #0]
 801ed50:	6833      	ldr	r3, [r6, #0]
 801ed52:	a807      	add	r0, sp, #28
 801ed54:	7819      	ldrb	r1, [r3, #0]
 801ed56:	00bb      	lsls	r3, r7, #2
 801ed58:	2202      	movs	r2, #2
 801ed5a:	5818      	ldr	r0, [r3, r0]
 801ed5c:	f000 fa88 	bl	801f270 <memchr>
 801ed60:	2800      	cmp	r0, #0
 801ed62:	d02b      	beq.n	801edbc <_scanf_i+0xc0>
 801ed64:	2f01      	cmp	r7, #1
 801ed66:	d162      	bne.n	801ee2e <_scanf_i+0x132>
 801ed68:	6863      	ldr	r3, [r4, #4]
 801ed6a:	2b00      	cmp	r3, #0
 801ed6c:	d106      	bne.n	801ed7c <_scanf_i+0x80>
 801ed6e:	3308      	adds	r3, #8
 801ed70:	6822      	ldr	r2, [r4, #0]
 801ed72:	6063      	str	r3, [r4, #4]
 801ed74:	33f9      	adds	r3, #249	; 0xf9
 801ed76:	33ff      	adds	r3, #255	; 0xff
 801ed78:	4313      	orrs	r3, r2
 801ed7a:	6023      	str	r3, [r4, #0]
 801ed7c:	4b5d      	ldr	r3, [pc, #372]	; (801eef4 <_scanf_i+0x1f8>)
 801ed7e:	6822      	ldr	r2, [r4, #0]
 801ed80:	4013      	ands	r3, r2
 801ed82:	6023      	str	r3, [r4, #0]
 801ed84:	68a3      	ldr	r3, [r4, #8]
 801ed86:	1e5a      	subs	r2, r3, #1
 801ed88:	60a2      	str	r2, [r4, #8]
 801ed8a:	2b00      	cmp	r3, #0
 801ed8c:	d016      	beq.n	801edbc <_scanf_i+0xc0>
 801ed8e:	6833      	ldr	r3, [r6, #0]
 801ed90:	1c5a      	adds	r2, r3, #1
 801ed92:	6032      	str	r2, [r6, #0]
 801ed94:	781b      	ldrb	r3, [r3, #0]
 801ed96:	9a00      	ldr	r2, [sp, #0]
 801ed98:	7013      	strb	r3, [r2, #0]
 801ed9a:	6873      	ldr	r3, [r6, #4]
 801ed9c:	1c55      	adds	r5, r2, #1
 801ed9e:	3b01      	subs	r3, #1
 801eda0:	6073      	str	r3, [r6, #4]
 801eda2:	2b00      	cmp	r3, #0
 801eda4:	dc09      	bgt.n	801edba <_scanf_i+0xbe>
 801eda6:	23c0      	movs	r3, #192	; 0xc0
 801eda8:	005b      	lsls	r3, r3, #1
 801edaa:	58e3      	ldr	r3, [r4, r3]
 801edac:	0031      	movs	r1, r6
 801edae:	9804      	ldr	r0, [sp, #16]
 801edb0:	9300      	str	r3, [sp, #0]
 801edb2:	4798      	blx	r3
 801edb4:	2800      	cmp	r0, #0
 801edb6:	d000      	beq.n	801edba <_scanf_i+0xbe>
 801edb8:	e080      	b.n	801eebc <_scanf_i+0x1c0>
 801edba:	9500      	str	r5, [sp, #0]
 801edbc:	3701      	adds	r7, #1
 801edbe:	2f03      	cmp	r7, #3
 801edc0:	d1c6      	bne.n	801ed50 <_scanf_i+0x54>
 801edc2:	6863      	ldr	r3, [r4, #4]
 801edc4:	2b00      	cmp	r3, #0
 801edc6:	d101      	bne.n	801edcc <_scanf_i+0xd0>
 801edc8:	330a      	adds	r3, #10
 801edca:	6063      	str	r3, [r4, #4]
 801edcc:	2110      	movs	r1, #16
 801edce:	2700      	movs	r7, #0
 801edd0:	6863      	ldr	r3, [r4, #4]
 801edd2:	6960      	ldr	r0, [r4, #20]
 801edd4:	1ac9      	subs	r1, r1, r3
 801edd6:	4b48      	ldr	r3, [pc, #288]	; (801eef8 <_scanf_i+0x1fc>)
 801edd8:	18c9      	adds	r1, r1, r3
 801edda:	f000 f891 	bl	801ef00 <__sccl>
 801edde:	9d00      	ldr	r5, [sp, #0]
 801ede0:	68a3      	ldr	r3, [r4, #8]
 801ede2:	6822      	ldr	r2, [r4, #0]
 801ede4:	9300      	str	r3, [sp, #0]
 801ede6:	2b00      	cmp	r3, #0
 801ede8:	d041      	beq.n	801ee6e <_scanf_i+0x172>
 801edea:	6831      	ldr	r1, [r6, #0]
 801edec:	6963      	ldr	r3, [r4, #20]
 801edee:	7808      	ldrb	r0, [r1, #0]
 801edf0:	5c1b      	ldrb	r3, [r3, r0]
 801edf2:	2b00      	cmp	r3, #0
 801edf4:	d03b      	beq.n	801ee6e <_scanf_i+0x172>
 801edf6:	2830      	cmp	r0, #48	; 0x30
 801edf8:	d129      	bne.n	801ee4e <_scanf_i+0x152>
 801edfa:	2380      	movs	r3, #128	; 0x80
 801edfc:	011b      	lsls	r3, r3, #4
 801edfe:	421a      	tst	r2, r3
 801ee00:	d025      	beq.n	801ee4e <_scanf_i+0x152>
 801ee02:	9b03      	ldr	r3, [sp, #12]
 801ee04:	3701      	adds	r7, #1
 801ee06:	2b00      	cmp	r3, #0
 801ee08:	d005      	beq.n	801ee16 <_scanf_i+0x11a>
 801ee0a:	001a      	movs	r2, r3
 801ee0c:	9b00      	ldr	r3, [sp, #0]
 801ee0e:	3a01      	subs	r2, #1
 801ee10:	3301      	adds	r3, #1
 801ee12:	9203      	str	r2, [sp, #12]
 801ee14:	60a3      	str	r3, [r4, #8]
 801ee16:	6873      	ldr	r3, [r6, #4]
 801ee18:	3b01      	subs	r3, #1
 801ee1a:	6073      	str	r3, [r6, #4]
 801ee1c:	2b00      	cmp	r3, #0
 801ee1e:	dd1d      	ble.n	801ee5c <_scanf_i+0x160>
 801ee20:	6833      	ldr	r3, [r6, #0]
 801ee22:	3301      	adds	r3, #1
 801ee24:	6033      	str	r3, [r6, #0]
 801ee26:	68a3      	ldr	r3, [r4, #8]
 801ee28:	3b01      	subs	r3, #1
 801ee2a:	60a3      	str	r3, [r4, #8]
 801ee2c:	e7d8      	b.n	801ede0 <_scanf_i+0xe4>
 801ee2e:	2f02      	cmp	r7, #2
 801ee30:	d1a8      	bne.n	801ed84 <_scanf_i+0x88>
 801ee32:	21c0      	movs	r1, #192	; 0xc0
 801ee34:	2380      	movs	r3, #128	; 0x80
 801ee36:	6822      	ldr	r2, [r4, #0]
 801ee38:	00c9      	lsls	r1, r1, #3
 801ee3a:	4011      	ands	r1, r2
 801ee3c:	009b      	lsls	r3, r3, #2
 801ee3e:	4299      	cmp	r1, r3
 801ee40:	d1bf      	bne.n	801edc2 <_scanf_i+0xc6>
 801ee42:	3bf1      	subs	r3, #241	; 0xf1
 801ee44:	3bff      	subs	r3, #255	; 0xff
 801ee46:	6063      	str	r3, [r4, #4]
 801ee48:	33f0      	adds	r3, #240	; 0xf0
 801ee4a:	4313      	orrs	r3, r2
 801ee4c:	e799      	b.n	801ed82 <_scanf_i+0x86>
 801ee4e:	4b2b      	ldr	r3, [pc, #172]	; (801eefc <_scanf_i+0x200>)
 801ee50:	4013      	ands	r3, r2
 801ee52:	6023      	str	r3, [r4, #0]
 801ee54:	780b      	ldrb	r3, [r1, #0]
 801ee56:	702b      	strb	r3, [r5, #0]
 801ee58:	3501      	adds	r5, #1
 801ee5a:	e7dc      	b.n	801ee16 <_scanf_i+0x11a>
 801ee5c:	23c0      	movs	r3, #192	; 0xc0
 801ee5e:	005b      	lsls	r3, r3, #1
 801ee60:	58e3      	ldr	r3, [r4, r3]
 801ee62:	0031      	movs	r1, r6
 801ee64:	9804      	ldr	r0, [sp, #16]
 801ee66:	9300      	str	r3, [sp, #0]
 801ee68:	4798      	blx	r3
 801ee6a:	2800      	cmp	r0, #0
 801ee6c:	d0db      	beq.n	801ee26 <_scanf_i+0x12a>
 801ee6e:	6823      	ldr	r3, [r4, #0]
 801ee70:	05db      	lsls	r3, r3, #23
 801ee72:	d50e      	bpl.n	801ee92 <_scanf_i+0x196>
 801ee74:	9b01      	ldr	r3, [sp, #4]
 801ee76:	429d      	cmp	r5, r3
 801ee78:	d907      	bls.n	801ee8a <_scanf_i+0x18e>
 801ee7a:	23be      	movs	r3, #190	; 0xbe
 801ee7c:	3d01      	subs	r5, #1
 801ee7e:	005b      	lsls	r3, r3, #1
 801ee80:	7829      	ldrb	r1, [r5, #0]
 801ee82:	58e3      	ldr	r3, [r4, r3]
 801ee84:	0032      	movs	r2, r6
 801ee86:	9804      	ldr	r0, [sp, #16]
 801ee88:	4798      	blx	r3
 801ee8a:	9b01      	ldr	r3, [sp, #4]
 801ee8c:	2001      	movs	r0, #1
 801ee8e:	429d      	cmp	r5, r3
 801ee90:	d027      	beq.n	801eee2 <_scanf_i+0x1e6>
 801ee92:	2210      	movs	r2, #16
 801ee94:	6823      	ldr	r3, [r4, #0]
 801ee96:	401a      	ands	r2, r3
 801ee98:	d11c      	bne.n	801eed4 <_scanf_i+0x1d8>
 801ee9a:	702a      	strb	r2, [r5, #0]
 801ee9c:	6863      	ldr	r3, [r4, #4]
 801ee9e:	9901      	ldr	r1, [sp, #4]
 801eea0:	9804      	ldr	r0, [sp, #16]
 801eea2:	9e05      	ldr	r6, [sp, #20]
 801eea4:	47b0      	blx	r6
 801eea6:	9b02      	ldr	r3, [sp, #8]
 801eea8:	6821      	ldr	r1, [r4, #0]
 801eeaa:	681b      	ldr	r3, [r3, #0]
 801eeac:	068a      	lsls	r2, r1, #26
 801eeae:	d507      	bpl.n	801eec0 <_scanf_i+0x1c4>
 801eeb0:	1d1a      	adds	r2, r3, #4
 801eeb2:	9902      	ldr	r1, [sp, #8]
 801eeb4:	600a      	str	r2, [r1, #0]
 801eeb6:	681b      	ldr	r3, [r3, #0]
 801eeb8:	6018      	str	r0, [r3, #0]
 801eeba:	e008      	b.n	801eece <_scanf_i+0x1d2>
 801eebc:	2700      	movs	r7, #0
 801eebe:	e7d6      	b.n	801ee6e <_scanf_i+0x172>
 801eec0:	1d1a      	adds	r2, r3, #4
 801eec2:	07ce      	lsls	r6, r1, #31
 801eec4:	d5f5      	bpl.n	801eeb2 <_scanf_i+0x1b6>
 801eec6:	9902      	ldr	r1, [sp, #8]
 801eec8:	600a      	str	r2, [r1, #0]
 801eeca:	681b      	ldr	r3, [r3, #0]
 801eecc:	8018      	strh	r0, [r3, #0]
 801eece:	68e3      	ldr	r3, [r4, #12]
 801eed0:	3301      	adds	r3, #1
 801eed2:	60e3      	str	r3, [r4, #12]
 801eed4:	2000      	movs	r0, #0
 801eed6:	9b01      	ldr	r3, [sp, #4]
 801eed8:	1aed      	subs	r5, r5, r3
 801eeda:	6923      	ldr	r3, [r4, #16]
 801eedc:	19ef      	adds	r7, r5, r7
 801eede:	19df      	adds	r7, r3, r7
 801eee0:	6127      	str	r7, [r4, #16]
 801eee2:	b00b      	add	sp, #44	; 0x2c
 801eee4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801eee6:	46c0      	nop			; (mov r8, r8)
 801eee8:	080203e4 	.word	0x080203e4
 801eeec:	0801f18d 	.word	0x0801f18d
 801eef0:	0801f065 	.word	0x0801f065
 801eef4:	fffffaff 	.word	0xfffffaff
 801eef8:	0802153b 	.word	0x0802153b
 801eefc:	fffff6ff 	.word	0xfffff6ff

0801ef00 <__sccl>:
 801ef00:	b570      	push	{r4, r5, r6, lr}
 801ef02:	780b      	ldrb	r3, [r1, #0]
 801ef04:	0005      	movs	r5, r0
 801ef06:	2b5e      	cmp	r3, #94	; 0x5e
 801ef08:	d018      	beq.n	801ef3c <__sccl+0x3c>
 801ef0a:	1c4a      	adds	r2, r1, #1
 801ef0c:	2100      	movs	r1, #0
 801ef0e:	0028      	movs	r0, r5
 801ef10:	1c6c      	adds	r4, r5, #1
 801ef12:	34ff      	adds	r4, #255	; 0xff
 801ef14:	7001      	strb	r1, [r0, #0]
 801ef16:	3001      	adds	r0, #1
 801ef18:	42a0      	cmp	r0, r4
 801ef1a:	d1fb      	bne.n	801ef14 <__sccl+0x14>
 801ef1c:	1e50      	subs	r0, r2, #1
 801ef1e:	2b00      	cmp	r3, #0
 801ef20:	d00b      	beq.n	801ef3a <__sccl+0x3a>
 801ef22:	2001      	movs	r0, #1
 801ef24:	4041      	eors	r1, r0
 801ef26:	54e9      	strb	r1, [r5, r3]
 801ef28:	7814      	ldrb	r4, [r2, #0]
 801ef2a:	1c50      	adds	r0, r2, #1
 801ef2c:	2c2d      	cmp	r4, #45	; 0x2d
 801ef2e:	d00c      	beq.n	801ef4a <__sccl+0x4a>
 801ef30:	2c5d      	cmp	r4, #93	; 0x5d
 801ef32:	d002      	beq.n	801ef3a <__sccl+0x3a>
 801ef34:	2c00      	cmp	r4, #0
 801ef36:	d105      	bne.n	801ef44 <__sccl+0x44>
 801ef38:	0010      	movs	r0, r2
 801ef3a:	bd70      	pop	{r4, r5, r6, pc}
 801ef3c:	1c8a      	adds	r2, r1, #2
 801ef3e:	784b      	ldrb	r3, [r1, #1]
 801ef40:	2101      	movs	r1, #1
 801ef42:	e7e4      	b.n	801ef0e <__sccl+0xe>
 801ef44:	0023      	movs	r3, r4
 801ef46:	0002      	movs	r2, r0
 801ef48:	e7ed      	b.n	801ef26 <__sccl+0x26>
 801ef4a:	7856      	ldrb	r6, [r2, #1]
 801ef4c:	2e5d      	cmp	r6, #93	; 0x5d
 801ef4e:	d0f9      	beq.n	801ef44 <__sccl+0x44>
 801ef50:	42b3      	cmp	r3, r6
 801ef52:	dcf7      	bgt.n	801ef44 <__sccl+0x44>
 801ef54:	3202      	adds	r2, #2
 801ef56:	3301      	adds	r3, #1
 801ef58:	54e9      	strb	r1, [r5, r3]
 801ef5a:	429e      	cmp	r6, r3
 801ef5c:	dcfb      	bgt.n	801ef56 <__sccl+0x56>
 801ef5e:	e7e3      	b.n	801ef28 <__sccl+0x28>

0801ef60 <_strtol_l.isra.0>:
 801ef60:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ef62:	001f      	movs	r7, r3
 801ef64:	000e      	movs	r6, r1
 801ef66:	b087      	sub	sp, #28
 801ef68:	9005      	str	r0, [sp, #20]
 801ef6a:	9101      	str	r1, [sp, #4]
 801ef6c:	9202      	str	r2, [sp, #8]
 801ef6e:	980c      	ldr	r0, [sp, #48]	; 0x30
 801ef70:	7834      	ldrb	r4, [r6, #0]
 801ef72:	f000 f959 	bl	801f228 <__locale_ctype_ptr_l>
 801ef76:	2208      	movs	r2, #8
 801ef78:	1900      	adds	r0, r0, r4
 801ef7a:	7843      	ldrb	r3, [r0, #1]
 801ef7c:	1c75      	adds	r5, r6, #1
 801ef7e:	4013      	ands	r3, r2
 801ef80:	d136      	bne.n	801eff0 <_strtol_l.isra.0+0x90>
 801ef82:	2c2d      	cmp	r4, #45	; 0x2d
 801ef84:	d136      	bne.n	801eff4 <_strtol_l.isra.0+0x94>
 801ef86:	1cb5      	adds	r5, r6, #2
 801ef88:	7874      	ldrb	r4, [r6, #1]
 801ef8a:	2601      	movs	r6, #1
 801ef8c:	2f00      	cmp	r7, #0
 801ef8e:	d062      	beq.n	801f056 <_strtol_l.isra.0+0xf6>
 801ef90:	2f10      	cmp	r7, #16
 801ef92:	d109      	bne.n	801efa8 <_strtol_l.isra.0+0x48>
 801ef94:	2c30      	cmp	r4, #48	; 0x30
 801ef96:	d107      	bne.n	801efa8 <_strtol_l.isra.0+0x48>
 801ef98:	2220      	movs	r2, #32
 801ef9a:	782b      	ldrb	r3, [r5, #0]
 801ef9c:	4393      	bics	r3, r2
 801ef9e:	2b58      	cmp	r3, #88	; 0x58
 801efa0:	d154      	bne.n	801f04c <_strtol_l.isra.0+0xec>
 801efa2:	2710      	movs	r7, #16
 801efa4:	786c      	ldrb	r4, [r5, #1]
 801efa6:	3502      	adds	r5, #2
 801efa8:	4b2d      	ldr	r3, [pc, #180]	; (801f060 <_strtol_l.isra.0+0x100>)
 801efaa:	0039      	movs	r1, r7
 801efac:	18f3      	adds	r3, r6, r3
 801efae:	0018      	movs	r0, r3
 801efb0:	9303      	str	r3, [sp, #12]
 801efb2:	f7e1 f937 	bl	8000224 <__aeabi_uidivmod>
 801efb6:	9104      	str	r1, [sp, #16]
 801efb8:	2101      	movs	r1, #1
 801efba:	2300      	movs	r3, #0
 801efbc:	4249      	negs	r1, r1
 801efbe:	0002      	movs	r2, r0
 801efc0:	468c      	mov	ip, r1
 801efc2:	0018      	movs	r0, r3
 801efc4:	0021      	movs	r1, r4
 801efc6:	3930      	subs	r1, #48	; 0x30
 801efc8:	2909      	cmp	r1, #9
 801efca:	d81a      	bhi.n	801f002 <_strtol_l.isra.0+0xa2>
 801efcc:	000c      	movs	r4, r1
 801efce:	42a7      	cmp	r7, r4
 801efd0:	dd23      	ble.n	801f01a <_strtol_l.isra.0+0xba>
 801efd2:	1c59      	adds	r1, r3, #1
 801efd4:	d009      	beq.n	801efea <_strtol_l.isra.0+0x8a>
 801efd6:	4663      	mov	r3, ip
 801efd8:	4282      	cmp	r2, r0
 801efda:	d306      	bcc.n	801efea <_strtol_l.isra.0+0x8a>
 801efdc:	d102      	bne.n	801efe4 <_strtol_l.isra.0+0x84>
 801efde:	9904      	ldr	r1, [sp, #16]
 801efe0:	42a1      	cmp	r1, r4
 801efe2:	db02      	blt.n	801efea <_strtol_l.isra.0+0x8a>
 801efe4:	2301      	movs	r3, #1
 801efe6:	4378      	muls	r0, r7
 801efe8:	1820      	adds	r0, r4, r0
 801efea:	782c      	ldrb	r4, [r5, #0]
 801efec:	3501      	adds	r5, #1
 801efee:	e7e9      	b.n	801efc4 <_strtol_l.isra.0+0x64>
 801eff0:	002e      	movs	r6, r5
 801eff2:	e7bc      	b.n	801ef6e <_strtol_l.isra.0+0xe>
 801eff4:	2c2b      	cmp	r4, #43	; 0x2b
 801eff6:	d001      	beq.n	801effc <_strtol_l.isra.0+0x9c>
 801eff8:	001e      	movs	r6, r3
 801effa:	e7c7      	b.n	801ef8c <_strtol_l.isra.0+0x2c>
 801effc:	1cb5      	adds	r5, r6, #2
 801effe:	7874      	ldrb	r4, [r6, #1]
 801f000:	e7fa      	b.n	801eff8 <_strtol_l.isra.0+0x98>
 801f002:	0021      	movs	r1, r4
 801f004:	3941      	subs	r1, #65	; 0x41
 801f006:	2919      	cmp	r1, #25
 801f008:	d801      	bhi.n	801f00e <_strtol_l.isra.0+0xae>
 801f00a:	3c37      	subs	r4, #55	; 0x37
 801f00c:	e7df      	b.n	801efce <_strtol_l.isra.0+0x6e>
 801f00e:	0021      	movs	r1, r4
 801f010:	3961      	subs	r1, #97	; 0x61
 801f012:	2919      	cmp	r1, #25
 801f014:	d801      	bhi.n	801f01a <_strtol_l.isra.0+0xba>
 801f016:	3c57      	subs	r4, #87	; 0x57
 801f018:	e7d9      	b.n	801efce <_strtol_l.isra.0+0x6e>
 801f01a:	1c5a      	adds	r2, r3, #1
 801f01c:	d108      	bne.n	801f030 <_strtol_l.isra.0+0xd0>
 801f01e:	9a05      	ldr	r2, [sp, #20]
 801f020:	3323      	adds	r3, #35	; 0x23
 801f022:	6013      	str	r3, [r2, #0]
 801f024:	9b02      	ldr	r3, [sp, #8]
 801f026:	9803      	ldr	r0, [sp, #12]
 801f028:	2b00      	cmp	r3, #0
 801f02a:	d109      	bne.n	801f040 <_strtol_l.isra.0+0xe0>
 801f02c:	b007      	add	sp, #28
 801f02e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f030:	2e00      	cmp	r6, #0
 801f032:	d000      	beq.n	801f036 <_strtol_l.isra.0+0xd6>
 801f034:	4240      	negs	r0, r0
 801f036:	9a02      	ldr	r2, [sp, #8]
 801f038:	2a00      	cmp	r2, #0
 801f03a:	d0f7      	beq.n	801f02c <_strtol_l.isra.0+0xcc>
 801f03c:	2b00      	cmp	r3, #0
 801f03e:	d001      	beq.n	801f044 <_strtol_l.isra.0+0xe4>
 801f040:	1e6b      	subs	r3, r5, #1
 801f042:	9301      	str	r3, [sp, #4]
 801f044:	9b02      	ldr	r3, [sp, #8]
 801f046:	9a01      	ldr	r2, [sp, #4]
 801f048:	601a      	str	r2, [r3, #0]
 801f04a:	e7ef      	b.n	801f02c <_strtol_l.isra.0+0xcc>
 801f04c:	2430      	movs	r4, #48	; 0x30
 801f04e:	2f00      	cmp	r7, #0
 801f050:	d1aa      	bne.n	801efa8 <_strtol_l.isra.0+0x48>
 801f052:	2708      	movs	r7, #8
 801f054:	e7a8      	b.n	801efa8 <_strtol_l.isra.0+0x48>
 801f056:	2c30      	cmp	r4, #48	; 0x30
 801f058:	d09e      	beq.n	801ef98 <_strtol_l.isra.0+0x38>
 801f05a:	270a      	movs	r7, #10
 801f05c:	e7a4      	b.n	801efa8 <_strtol_l.isra.0+0x48>
 801f05e:	46c0      	nop			; (mov r8, r8)
 801f060:	7fffffff 	.word	0x7fffffff

0801f064 <_strtol_r>:
 801f064:	b513      	push	{r0, r1, r4, lr}
 801f066:	4c05      	ldr	r4, [pc, #20]	; (801f07c <_strtol_r+0x18>)
 801f068:	6824      	ldr	r4, [r4, #0]
 801f06a:	6a24      	ldr	r4, [r4, #32]
 801f06c:	2c00      	cmp	r4, #0
 801f06e:	d100      	bne.n	801f072 <_strtol_r+0xe>
 801f070:	4c03      	ldr	r4, [pc, #12]	; (801f080 <_strtol_r+0x1c>)
 801f072:	9400      	str	r4, [sp, #0]
 801f074:	f7ff ff74 	bl	801ef60 <_strtol_l.isra.0>
 801f078:	bd16      	pop	{r1, r2, r4, pc}
 801f07a:	46c0      	nop			; (mov r8, r8)
 801f07c:	200000b8 	.word	0x200000b8
 801f080:	2000011c 	.word	0x2000011c

0801f084 <_strtoul_l.isra.0>:
 801f084:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f086:	001f      	movs	r7, r3
 801f088:	000e      	movs	r6, r1
 801f08a:	b085      	sub	sp, #20
 801f08c:	9003      	str	r0, [sp, #12]
 801f08e:	9101      	str	r1, [sp, #4]
 801f090:	9202      	str	r2, [sp, #8]
 801f092:	980a      	ldr	r0, [sp, #40]	; 0x28
 801f094:	7834      	ldrb	r4, [r6, #0]
 801f096:	f000 f8c7 	bl	801f228 <__locale_ctype_ptr_l>
 801f09a:	2208      	movs	r2, #8
 801f09c:	1900      	adds	r0, r0, r4
 801f09e:	7843      	ldrb	r3, [r0, #1]
 801f0a0:	1c75      	adds	r5, r6, #1
 801f0a2:	4013      	ands	r3, r2
 801f0a4:	d138      	bne.n	801f118 <_strtoul_l.isra.0+0x94>
 801f0a6:	2c2d      	cmp	r4, #45	; 0x2d
 801f0a8:	d138      	bne.n	801f11c <_strtoul_l.isra.0+0x98>
 801f0aa:	7874      	ldrb	r4, [r6, #1]
 801f0ac:	1cb5      	adds	r5, r6, #2
 801f0ae:	3301      	adds	r3, #1
 801f0b0:	9300      	str	r3, [sp, #0]
 801f0b2:	2f00      	cmp	r7, #0
 801f0b4:	d065      	beq.n	801f182 <_strtoul_l.isra.0+0xfe>
 801f0b6:	2f10      	cmp	r7, #16
 801f0b8:	d109      	bne.n	801f0ce <_strtoul_l.isra.0+0x4a>
 801f0ba:	2c30      	cmp	r4, #48	; 0x30
 801f0bc:	d107      	bne.n	801f0ce <_strtoul_l.isra.0+0x4a>
 801f0be:	2220      	movs	r2, #32
 801f0c0:	782b      	ldrb	r3, [r5, #0]
 801f0c2:	4393      	bics	r3, r2
 801f0c4:	2b58      	cmp	r3, #88	; 0x58
 801f0c6:	d157      	bne.n	801f178 <_strtoul_l.isra.0+0xf4>
 801f0c8:	2710      	movs	r7, #16
 801f0ca:	786c      	ldrb	r4, [r5, #1]
 801f0cc:	3502      	adds	r5, #2
 801f0ce:	2001      	movs	r0, #1
 801f0d0:	0039      	movs	r1, r7
 801f0d2:	4240      	negs	r0, r0
 801f0d4:	f7e1 f820 	bl	8000118 <__udivsi3>
 801f0d8:	0006      	movs	r6, r0
 801f0da:	2001      	movs	r0, #1
 801f0dc:	0039      	movs	r1, r7
 801f0de:	4240      	negs	r0, r0
 801f0e0:	f7e1 f8a0 	bl	8000224 <__aeabi_uidivmod>
 801f0e4:	2300      	movs	r3, #0
 801f0e6:	2201      	movs	r2, #1
 801f0e8:	468c      	mov	ip, r1
 801f0ea:	0018      	movs	r0, r3
 801f0ec:	4252      	negs	r2, r2
 801f0ee:	0021      	movs	r1, r4
 801f0f0:	3930      	subs	r1, #48	; 0x30
 801f0f2:	2909      	cmp	r1, #9
 801f0f4:	d817      	bhi.n	801f126 <_strtoul_l.isra.0+0xa2>
 801f0f6:	000c      	movs	r4, r1
 801f0f8:	42a7      	cmp	r7, r4
 801f0fa:	dd22      	ble.n	801f142 <_strtoul_l.isra.0+0xbe>
 801f0fc:	2b00      	cmp	r3, #0
 801f0fe:	db1e      	blt.n	801f13e <_strtoul_l.isra.0+0xba>
 801f100:	0013      	movs	r3, r2
 801f102:	4286      	cmp	r6, r0
 801f104:	d305      	bcc.n	801f112 <_strtoul_l.isra.0+0x8e>
 801f106:	d101      	bne.n	801f10c <_strtoul_l.isra.0+0x88>
 801f108:	45a4      	cmp	ip, r4
 801f10a:	db02      	blt.n	801f112 <_strtoul_l.isra.0+0x8e>
 801f10c:	2301      	movs	r3, #1
 801f10e:	4378      	muls	r0, r7
 801f110:	1820      	adds	r0, r4, r0
 801f112:	782c      	ldrb	r4, [r5, #0]
 801f114:	3501      	adds	r5, #1
 801f116:	e7ea      	b.n	801f0ee <_strtoul_l.isra.0+0x6a>
 801f118:	002e      	movs	r6, r5
 801f11a:	e7ba      	b.n	801f092 <_strtoul_l.isra.0+0xe>
 801f11c:	2c2b      	cmp	r4, #43	; 0x2b
 801f11e:	d1c7      	bne.n	801f0b0 <_strtoul_l.isra.0+0x2c>
 801f120:	1cb5      	adds	r5, r6, #2
 801f122:	7874      	ldrb	r4, [r6, #1]
 801f124:	e7c4      	b.n	801f0b0 <_strtoul_l.isra.0+0x2c>
 801f126:	0021      	movs	r1, r4
 801f128:	3941      	subs	r1, #65	; 0x41
 801f12a:	2919      	cmp	r1, #25
 801f12c:	d801      	bhi.n	801f132 <_strtoul_l.isra.0+0xae>
 801f12e:	3c37      	subs	r4, #55	; 0x37
 801f130:	e7e2      	b.n	801f0f8 <_strtoul_l.isra.0+0x74>
 801f132:	0021      	movs	r1, r4
 801f134:	3961      	subs	r1, #97	; 0x61
 801f136:	2919      	cmp	r1, #25
 801f138:	d803      	bhi.n	801f142 <_strtoul_l.isra.0+0xbe>
 801f13a:	3c57      	subs	r4, #87	; 0x57
 801f13c:	e7dc      	b.n	801f0f8 <_strtoul_l.isra.0+0x74>
 801f13e:	0013      	movs	r3, r2
 801f140:	e7e7      	b.n	801f112 <_strtoul_l.isra.0+0x8e>
 801f142:	2b00      	cmp	r3, #0
 801f144:	da09      	bge.n	801f15a <_strtoul_l.isra.0+0xd6>
 801f146:	2322      	movs	r3, #34	; 0x22
 801f148:	2001      	movs	r0, #1
 801f14a:	9a03      	ldr	r2, [sp, #12]
 801f14c:	4240      	negs	r0, r0
 801f14e:	6013      	str	r3, [r2, #0]
 801f150:	9b02      	ldr	r3, [sp, #8]
 801f152:	2b00      	cmp	r3, #0
 801f154:	d10a      	bne.n	801f16c <_strtoul_l.isra.0+0xe8>
 801f156:	b005      	add	sp, #20
 801f158:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f15a:	9a00      	ldr	r2, [sp, #0]
 801f15c:	2a00      	cmp	r2, #0
 801f15e:	d000      	beq.n	801f162 <_strtoul_l.isra.0+0xde>
 801f160:	4240      	negs	r0, r0
 801f162:	9a02      	ldr	r2, [sp, #8]
 801f164:	2a00      	cmp	r2, #0
 801f166:	d0f6      	beq.n	801f156 <_strtoul_l.isra.0+0xd2>
 801f168:	2b00      	cmp	r3, #0
 801f16a:	d001      	beq.n	801f170 <_strtoul_l.isra.0+0xec>
 801f16c:	1e6b      	subs	r3, r5, #1
 801f16e:	9301      	str	r3, [sp, #4]
 801f170:	9b02      	ldr	r3, [sp, #8]
 801f172:	9a01      	ldr	r2, [sp, #4]
 801f174:	601a      	str	r2, [r3, #0]
 801f176:	e7ee      	b.n	801f156 <_strtoul_l.isra.0+0xd2>
 801f178:	2430      	movs	r4, #48	; 0x30
 801f17a:	2f00      	cmp	r7, #0
 801f17c:	d1a7      	bne.n	801f0ce <_strtoul_l.isra.0+0x4a>
 801f17e:	2708      	movs	r7, #8
 801f180:	e7a5      	b.n	801f0ce <_strtoul_l.isra.0+0x4a>
 801f182:	2c30      	cmp	r4, #48	; 0x30
 801f184:	d09b      	beq.n	801f0be <_strtoul_l.isra.0+0x3a>
 801f186:	270a      	movs	r7, #10
 801f188:	e7a1      	b.n	801f0ce <_strtoul_l.isra.0+0x4a>
	...

0801f18c <_strtoul_r>:
 801f18c:	b513      	push	{r0, r1, r4, lr}
 801f18e:	4c05      	ldr	r4, [pc, #20]	; (801f1a4 <_strtoul_r+0x18>)
 801f190:	6824      	ldr	r4, [r4, #0]
 801f192:	6a24      	ldr	r4, [r4, #32]
 801f194:	2c00      	cmp	r4, #0
 801f196:	d100      	bne.n	801f19a <_strtoul_r+0xe>
 801f198:	4c03      	ldr	r4, [pc, #12]	; (801f1a8 <_strtoul_r+0x1c>)
 801f19a:	9400      	str	r4, [sp, #0]
 801f19c:	f7ff ff72 	bl	801f084 <_strtoul_l.isra.0>
 801f1a0:	bd16      	pop	{r1, r2, r4, pc}
 801f1a2:	46c0      	nop			; (mov r8, r8)
 801f1a4:	200000b8 	.word	0x200000b8
 801f1a8:	2000011c 	.word	0x2000011c

0801f1ac <__submore>:
 801f1ac:	000b      	movs	r3, r1
 801f1ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801f1b0:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 801f1b2:	3344      	adds	r3, #68	; 0x44
 801f1b4:	000c      	movs	r4, r1
 801f1b6:	429d      	cmp	r5, r3
 801f1b8:	d11c      	bne.n	801f1f4 <__submore+0x48>
 801f1ba:	2680      	movs	r6, #128	; 0x80
 801f1bc:	00f6      	lsls	r6, r6, #3
 801f1be:	0031      	movs	r1, r6
 801f1c0:	f000 f8ac 	bl	801f31c <_malloc_r>
 801f1c4:	2800      	cmp	r0, #0
 801f1c6:	d102      	bne.n	801f1ce <__submore+0x22>
 801f1c8:	2001      	movs	r0, #1
 801f1ca:	4240      	negs	r0, r0
 801f1cc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801f1ce:	0023      	movs	r3, r4
 801f1d0:	6360      	str	r0, [r4, #52]	; 0x34
 801f1d2:	63a6      	str	r6, [r4, #56]	; 0x38
 801f1d4:	3346      	adds	r3, #70	; 0x46
 801f1d6:	781a      	ldrb	r2, [r3, #0]
 801f1d8:	4b10      	ldr	r3, [pc, #64]	; (801f21c <__submore+0x70>)
 801f1da:	54c2      	strb	r2, [r0, r3]
 801f1dc:	0023      	movs	r3, r4
 801f1de:	3345      	adds	r3, #69	; 0x45
 801f1e0:	781a      	ldrb	r2, [r3, #0]
 801f1e2:	4b0f      	ldr	r3, [pc, #60]	; (801f220 <__submore+0x74>)
 801f1e4:	54c2      	strb	r2, [r0, r3]
 801f1e6:	782a      	ldrb	r2, [r5, #0]
 801f1e8:	4b0e      	ldr	r3, [pc, #56]	; (801f224 <__submore+0x78>)
 801f1ea:	54c2      	strb	r2, [r0, r3]
 801f1ec:	18c0      	adds	r0, r0, r3
 801f1ee:	6020      	str	r0, [r4, #0]
 801f1f0:	2000      	movs	r0, #0
 801f1f2:	e7eb      	b.n	801f1cc <__submore+0x20>
 801f1f4:	6b8e      	ldr	r6, [r1, #56]	; 0x38
 801f1f6:	0029      	movs	r1, r5
 801f1f8:	0073      	lsls	r3, r6, #1
 801f1fa:	001a      	movs	r2, r3
 801f1fc:	9301      	str	r3, [sp, #4]
 801f1fe:	f000 f8eb 	bl	801f3d8 <_realloc_r>
 801f202:	1e05      	subs	r5, r0, #0
 801f204:	d0e0      	beq.n	801f1c8 <__submore+0x1c>
 801f206:	1987      	adds	r7, r0, r6
 801f208:	0001      	movs	r1, r0
 801f20a:	0032      	movs	r2, r6
 801f20c:	0038      	movs	r0, r7
 801f20e:	f7fe ffe9 	bl	801e1e4 <memcpy>
 801f212:	9b01      	ldr	r3, [sp, #4]
 801f214:	6027      	str	r7, [r4, #0]
 801f216:	6365      	str	r5, [r4, #52]	; 0x34
 801f218:	63a3      	str	r3, [r4, #56]	; 0x38
 801f21a:	e7e9      	b.n	801f1f0 <__submore+0x44>
 801f21c:	000003ff 	.word	0x000003ff
 801f220:	000003fe 	.word	0x000003fe
 801f224:	000003fd 	.word	0x000003fd

0801f228 <__locale_ctype_ptr_l>:
 801f228:	30ec      	adds	r0, #236	; 0xec
 801f22a:	6800      	ldr	r0, [r0, #0]
 801f22c:	4770      	bx	lr
	...

0801f230 <__locale_ctype_ptr>:
 801f230:	4b04      	ldr	r3, [pc, #16]	; (801f244 <__locale_ctype_ptr+0x14>)
 801f232:	681b      	ldr	r3, [r3, #0]
 801f234:	6a1b      	ldr	r3, [r3, #32]
 801f236:	2b00      	cmp	r3, #0
 801f238:	d100      	bne.n	801f23c <__locale_ctype_ptr+0xc>
 801f23a:	4b03      	ldr	r3, [pc, #12]	; (801f248 <__locale_ctype_ptr+0x18>)
 801f23c:	33ec      	adds	r3, #236	; 0xec
 801f23e:	6818      	ldr	r0, [r3, #0]
 801f240:	4770      	bx	lr
 801f242:	46c0      	nop			; (mov r8, r8)
 801f244:	200000b8 	.word	0x200000b8
 801f248:	2000011c 	.word	0x2000011c

0801f24c <__ascii_mbtowc>:
 801f24c:	b082      	sub	sp, #8
 801f24e:	2900      	cmp	r1, #0
 801f250:	d100      	bne.n	801f254 <__ascii_mbtowc+0x8>
 801f252:	a901      	add	r1, sp, #4
 801f254:	1e10      	subs	r0, r2, #0
 801f256:	d006      	beq.n	801f266 <__ascii_mbtowc+0x1a>
 801f258:	2b00      	cmp	r3, #0
 801f25a:	d006      	beq.n	801f26a <__ascii_mbtowc+0x1e>
 801f25c:	7813      	ldrb	r3, [r2, #0]
 801f25e:	600b      	str	r3, [r1, #0]
 801f260:	7810      	ldrb	r0, [r2, #0]
 801f262:	1e43      	subs	r3, r0, #1
 801f264:	4198      	sbcs	r0, r3
 801f266:	b002      	add	sp, #8
 801f268:	4770      	bx	lr
 801f26a:	2002      	movs	r0, #2
 801f26c:	4240      	negs	r0, r0
 801f26e:	e7fa      	b.n	801f266 <__ascii_mbtowc+0x1a>

0801f270 <memchr>:
 801f270:	b2c9      	uxtb	r1, r1
 801f272:	1882      	adds	r2, r0, r2
 801f274:	4290      	cmp	r0, r2
 801f276:	d101      	bne.n	801f27c <memchr+0xc>
 801f278:	2000      	movs	r0, #0
 801f27a:	4770      	bx	lr
 801f27c:	7803      	ldrb	r3, [r0, #0]
 801f27e:	428b      	cmp	r3, r1
 801f280:	d0fb      	beq.n	801f27a <memchr+0xa>
 801f282:	3001      	adds	r0, #1
 801f284:	e7f6      	b.n	801f274 <memchr+0x4>
	...

0801f288 <_free_r>:
 801f288:	b570      	push	{r4, r5, r6, lr}
 801f28a:	0005      	movs	r5, r0
 801f28c:	2900      	cmp	r1, #0
 801f28e:	d010      	beq.n	801f2b2 <_free_r+0x2a>
 801f290:	1f0c      	subs	r4, r1, #4
 801f292:	6823      	ldr	r3, [r4, #0]
 801f294:	2b00      	cmp	r3, #0
 801f296:	da00      	bge.n	801f29a <_free_r+0x12>
 801f298:	18e4      	adds	r4, r4, r3
 801f29a:	0028      	movs	r0, r5
 801f29c:	f000 f8e0 	bl	801f460 <__malloc_lock>
 801f2a0:	4a1d      	ldr	r2, [pc, #116]	; (801f318 <_free_r+0x90>)
 801f2a2:	6813      	ldr	r3, [r2, #0]
 801f2a4:	2b00      	cmp	r3, #0
 801f2a6:	d105      	bne.n	801f2b4 <_free_r+0x2c>
 801f2a8:	6063      	str	r3, [r4, #4]
 801f2aa:	6014      	str	r4, [r2, #0]
 801f2ac:	0028      	movs	r0, r5
 801f2ae:	f000 f8d8 	bl	801f462 <__malloc_unlock>
 801f2b2:	bd70      	pop	{r4, r5, r6, pc}
 801f2b4:	42a3      	cmp	r3, r4
 801f2b6:	d909      	bls.n	801f2cc <_free_r+0x44>
 801f2b8:	6821      	ldr	r1, [r4, #0]
 801f2ba:	1860      	adds	r0, r4, r1
 801f2bc:	4283      	cmp	r3, r0
 801f2be:	d1f3      	bne.n	801f2a8 <_free_r+0x20>
 801f2c0:	6818      	ldr	r0, [r3, #0]
 801f2c2:	685b      	ldr	r3, [r3, #4]
 801f2c4:	1841      	adds	r1, r0, r1
 801f2c6:	6021      	str	r1, [r4, #0]
 801f2c8:	e7ee      	b.n	801f2a8 <_free_r+0x20>
 801f2ca:	0013      	movs	r3, r2
 801f2cc:	685a      	ldr	r2, [r3, #4]
 801f2ce:	2a00      	cmp	r2, #0
 801f2d0:	d001      	beq.n	801f2d6 <_free_r+0x4e>
 801f2d2:	42a2      	cmp	r2, r4
 801f2d4:	d9f9      	bls.n	801f2ca <_free_r+0x42>
 801f2d6:	6819      	ldr	r1, [r3, #0]
 801f2d8:	1858      	adds	r0, r3, r1
 801f2da:	42a0      	cmp	r0, r4
 801f2dc:	d10b      	bne.n	801f2f6 <_free_r+0x6e>
 801f2de:	6820      	ldr	r0, [r4, #0]
 801f2e0:	1809      	adds	r1, r1, r0
 801f2e2:	1858      	adds	r0, r3, r1
 801f2e4:	6019      	str	r1, [r3, #0]
 801f2e6:	4282      	cmp	r2, r0
 801f2e8:	d1e0      	bne.n	801f2ac <_free_r+0x24>
 801f2ea:	6810      	ldr	r0, [r2, #0]
 801f2ec:	6852      	ldr	r2, [r2, #4]
 801f2ee:	1841      	adds	r1, r0, r1
 801f2f0:	6019      	str	r1, [r3, #0]
 801f2f2:	605a      	str	r2, [r3, #4]
 801f2f4:	e7da      	b.n	801f2ac <_free_r+0x24>
 801f2f6:	42a0      	cmp	r0, r4
 801f2f8:	d902      	bls.n	801f300 <_free_r+0x78>
 801f2fa:	230c      	movs	r3, #12
 801f2fc:	602b      	str	r3, [r5, #0]
 801f2fe:	e7d5      	b.n	801f2ac <_free_r+0x24>
 801f300:	6821      	ldr	r1, [r4, #0]
 801f302:	1860      	adds	r0, r4, r1
 801f304:	4282      	cmp	r2, r0
 801f306:	d103      	bne.n	801f310 <_free_r+0x88>
 801f308:	6810      	ldr	r0, [r2, #0]
 801f30a:	6852      	ldr	r2, [r2, #4]
 801f30c:	1841      	adds	r1, r0, r1
 801f30e:	6021      	str	r1, [r4, #0]
 801f310:	6062      	str	r2, [r4, #4]
 801f312:	605c      	str	r4, [r3, #4]
 801f314:	e7ca      	b.n	801f2ac <_free_r+0x24>
 801f316:	46c0      	nop			; (mov r8, r8)
 801f318:	200012ec 	.word	0x200012ec

0801f31c <_malloc_r>:
 801f31c:	2303      	movs	r3, #3
 801f31e:	b570      	push	{r4, r5, r6, lr}
 801f320:	1ccd      	adds	r5, r1, #3
 801f322:	439d      	bics	r5, r3
 801f324:	3508      	adds	r5, #8
 801f326:	0006      	movs	r6, r0
 801f328:	2d0c      	cmp	r5, #12
 801f32a:	d21e      	bcs.n	801f36a <_malloc_r+0x4e>
 801f32c:	250c      	movs	r5, #12
 801f32e:	42a9      	cmp	r1, r5
 801f330:	d81d      	bhi.n	801f36e <_malloc_r+0x52>
 801f332:	0030      	movs	r0, r6
 801f334:	f000 f894 	bl	801f460 <__malloc_lock>
 801f338:	4a25      	ldr	r2, [pc, #148]	; (801f3d0 <_malloc_r+0xb4>)
 801f33a:	6814      	ldr	r4, [r2, #0]
 801f33c:	0021      	movs	r1, r4
 801f33e:	2900      	cmp	r1, #0
 801f340:	d119      	bne.n	801f376 <_malloc_r+0x5a>
 801f342:	4c24      	ldr	r4, [pc, #144]	; (801f3d4 <_malloc_r+0xb8>)
 801f344:	6823      	ldr	r3, [r4, #0]
 801f346:	2b00      	cmp	r3, #0
 801f348:	d103      	bne.n	801f352 <_malloc_r+0x36>
 801f34a:	0030      	movs	r0, r6
 801f34c:	f000 f86a 	bl	801f424 <_sbrk_r>
 801f350:	6020      	str	r0, [r4, #0]
 801f352:	0029      	movs	r1, r5
 801f354:	0030      	movs	r0, r6
 801f356:	f000 f865 	bl	801f424 <_sbrk_r>
 801f35a:	1c43      	adds	r3, r0, #1
 801f35c:	d12b      	bne.n	801f3b6 <_malloc_r+0x9a>
 801f35e:	230c      	movs	r3, #12
 801f360:	0030      	movs	r0, r6
 801f362:	6033      	str	r3, [r6, #0]
 801f364:	f000 f87d 	bl	801f462 <__malloc_unlock>
 801f368:	e003      	b.n	801f372 <_malloc_r+0x56>
 801f36a:	2d00      	cmp	r5, #0
 801f36c:	dadf      	bge.n	801f32e <_malloc_r+0x12>
 801f36e:	230c      	movs	r3, #12
 801f370:	6033      	str	r3, [r6, #0]
 801f372:	2000      	movs	r0, #0
 801f374:	bd70      	pop	{r4, r5, r6, pc}
 801f376:	680b      	ldr	r3, [r1, #0]
 801f378:	1b5b      	subs	r3, r3, r5
 801f37a:	d419      	bmi.n	801f3b0 <_malloc_r+0x94>
 801f37c:	2b0b      	cmp	r3, #11
 801f37e:	d903      	bls.n	801f388 <_malloc_r+0x6c>
 801f380:	600b      	str	r3, [r1, #0]
 801f382:	18cc      	adds	r4, r1, r3
 801f384:	6025      	str	r5, [r4, #0]
 801f386:	e003      	b.n	801f390 <_malloc_r+0x74>
 801f388:	684b      	ldr	r3, [r1, #4]
 801f38a:	428c      	cmp	r4, r1
 801f38c:	d10d      	bne.n	801f3aa <_malloc_r+0x8e>
 801f38e:	6013      	str	r3, [r2, #0]
 801f390:	0030      	movs	r0, r6
 801f392:	f000 f866 	bl	801f462 <__malloc_unlock>
 801f396:	0020      	movs	r0, r4
 801f398:	2207      	movs	r2, #7
 801f39a:	300b      	adds	r0, #11
 801f39c:	1d23      	adds	r3, r4, #4
 801f39e:	4390      	bics	r0, r2
 801f3a0:	1ac3      	subs	r3, r0, r3
 801f3a2:	d0e7      	beq.n	801f374 <_malloc_r+0x58>
 801f3a4:	425a      	negs	r2, r3
 801f3a6:	50e2      	str	r2, [r4, r3]
 801f3a8:	e7e4      	b.n	801f374 <_malloc_r+0x58>
 801f3aa:	6063      	str	r3, [r4, #4]
 801f3ac:	000c      	movs	r4, r1
 801f3ae:	e7ef      	b.n	801f390 <_malloc_r+0x74>
 801f3b0:	000c      	movs	r4, r1
 801f3b2:	6849      	ldr	r1, [r1, #4]
 801f3b4:	e7c3      	b.n	801f33e <_malloc_r+0x22>
 801f3b6:	2303      	movs	r3, #3
 801f3b8:	1cc4      	adds	r4, r0, #3
 801f3ba:	439c      	bics	r4, r3
 801f3bc:	42a0      	cmp	r0, r4
 801f3be:	d0e1      	beq.n	801f384 <_malloc_r+0x68>
 801f3c0:	1a21      	subs	r1, r4, r0
 801f3c2:	0030      	movs	r0, r6
 801f3c4:	f000 f82e 	bl	801f424 <_sbrk_r>
 801f3c8:	1c43      	adds	r3, r0, #1
 801f3ca:	d1db      	bne.n	801f384 <_malloc_r+0x68>
 801f3cc:	e7c7      	b.n	801f35e <_malloc_r+0x42>
 801f3ce:	46c0      	nop			; (mov r8, r8)
 801f3d0:	200012ec 	.word	0x200012ec
 801f3d4:	200012f0 	.word	0x200012f0

0801f3d8 <_realloc_r>:
 801f3d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f3da:	0007      	movs	r7, r0
 801f3dc:	000d      	movs	r5, r1
 801f3de:	0016      	movs	r6, r2
 801f3e0:	2900      	cmp	r1, #0
 801f3e2:	d105      	bne.n	801f3f0 <_realloc_r+0x18>
 801f3e4:	0011      	movs	r1, r2
 801f3e6:	f7ff ff99 	bl	801f31c <_malloc_r>
 801f3ea:	0004      	movs	r4, r0
 801f3ec:	0020      	movs	r0, r4
 801f3ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f3f0:	2a00      	cmp	r2, #0
 801f3f2:	d103      	bne.n	801f3fc <_realloc_r+0x24>
 801f3f4:	f7ff ff48 	bl	801f288 <_free_r>
 801f3f8:	0034      	movs	r4, r6
 801f3fa:	e7f7      	b.n	801f3ec <_realloc_r+0x14>
 801f3fc:	f000 f832 	bl	801f464 <_malloc_usable_size_r>
 801f400:	002c      	movs	r4, r5
 801f402:	42b0      	cmp	r0, r6
 801f404:	d2f2      	bcs.n	801f3ec <_realloc_r+0x14>
 801f406:	0031      	movs	r1, r6
 801f408:	0038      	movs	r0, r7
 801f40a:	f7ff ff87 	bl	801f31c <_malloc_r>
 801f40e:	1e04      	subs	r4, r0, #0
 801f410:	d0ec      	beq.n	801f3ec <_realloc_r+0x14>
 801f412:	0029      	movs	r1, r5
 801f414:	0032      	movs	r2, r6
 801f416:	f7fe fee5 	bl	801e1e4 <memcpy>
 801f41a:	0029      	movs	r1, r5
 801f41c:	0038      	movs	r0, r7
 801f41e:	f7ff ff33 	bl	801f288 <_free_r>
 801f422:	e7e3      	b.n	801f3ec <_realloc_r+0x14>

0801f424 <_sbrk_r>:
 801f424:	2300      	movs	r3, #0
 801f426:	b570      	push	{r4, r5, r6, lr}
 801f428:	4c06      	ldr	r4, [pc, #24]	; (801f444 <_sbrk_r+0x20>)
 801f42a:	0005      	movs	r5, r0
 801f42c:	0008      	movs	r0, r1
 801f42e:	6023      	str	r3, [r4, #0]
 801f430:	f7e4 fb74 	bl	8003b1c <_sbrk>
 801f434:	1c43      	adds	r3, r0, #1
 801f436:	d103      	bne.n	801f440 <_sbrk_r+0x1c>
 801f438:	6823      	ldr	r3, [r4, #0]
 801f43a:	2b00      	cmp	r3, #0
 801f43c:	d000      	beq.n	801f440 <_sbrk_r+0x1c>
 801f43e:	602b      	str	r3, [r5, #0]
 801f440:	bd70      	pop	{r4, r5, r6, pc}
 801f442:	46c0      	nop			; (mov r8, r8)
 801f444:	20001738 	.word	0x20001738

0801f448 <__ascii_wctomb>:
 801f448:	1e0b      	subs	r3, r1, #0
 801f44a:	d004      	beq.n	801f456 <__ascii_wctomb+0xe>
 801f44c:	2aff      	cmp	r2, #255	; 0xff
 801f44e:	d904      	bls.n	801f45a <__ascii_wctomb+0x12>
 801f450:	238a      	movs	r3, #138	; 0x8a
 801f452:	6003      	str	r3, [r0, #0]
 801f454:	3b8b      	subs	r3, #139	; 0x8b
 801f456:	0018      	movs	r0, r3
 801f458:	4770      	bx	lr
 801f45a:	700a      	strb	r2, [r1, #0]
 801f45c:	2301      	movs	r3, #1
 801f45e:	e7fa      	b.n	801f456 <__ascii_wctomb+0xe>

0801f460 <__malloc_lock>:
 801f460:	4770      	bx	lr

0801f462 <__malloc_unlock>:
 801f462:	4770      	bx	lr

0801f464 <_malloc_usable_size_r>:
 801f464:	1f0b      	subs	r3, r1, #4
 801f466:	681b      	ldr	r3, [r3, #0]
 801f468:	1f18      	subs	r0, r3, #4
 801f46a:	2b00      	cmp	r3, #0
 801f46c:	da01      	bge.n	801f472 <_malloc_usable_size_r+0xe>
 801f46e:	580b      	ldr	r3, [r1, r0]
 801f470:	18c0      	adds	r0, r0, r3
 801f472:	4770      	bx	lr

0801f474 <ceil>:
 801f474:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f476:	004b      	lsls	r3, r1, #1
 801f478:	4a39      	ldr	r2, [pc, #228]	; (801f560 <ceil+0xec>)
 801f47a:	0d5b      	lsrs	r3, r3, #21
 801f47c:	b085      	sub	sp, #20
 801f47e:	189e      	adds	r6, r3, r2
 801f480:	000c      	movs	r4, r1
 801f482:	0005      	movs	r5, r0
 801f484:	9003      	str	r0, [sp, #12]
 801f486:	2e13      	cmp	r6, #19
 801f488:	dc32      	bgt.n	801f4f0 <ceil+0x7c>
 801f48a:	2e00      	cmp	r6, #0
 801f48c:	da13      	bge.n	801f4b6 <ceil+0x42>
 801f48e:	4a35      	ldr	r2, [pc, #212]	; (801f564 <ceil+0xf0>)
 801f490:	4b35      	ldr	r3, [pc, #212]	; (801f568 <ceil+0xf4>)
 801f492:	f7e1 fb63 	bl	8000b5c <__aeabi_dadd>
 801f496:	2200      	movs	r2, #0
 801f498:	2300      	movs	r3, #0
 801f49a:	f7e0 ffdd 	bl	8000458 <__aeabi_dcmpgt>
 801f49e:	2800      	cmp	r0, #0
 801f4a0:	d006      	beq.n	801f4b0 <ceil+0x3c>
 801f4a2:	2c00      	cmp	r4, #0
 801f4a4:	db57      	blt.n	801f556 <ceil+0xe2>
 801f4a6:	432c      	orrs	r4, r5
 801f4a8:	2500      	movs	r5, #0
 801f4aa:	42ac      	cmp	r4, r5
 801f4ac:	d000      	beq.n	801f4b0 <ceil+0x3c>
 801f4ae:	4c2f      	ldr	r4, [pc, #188]	; (801f56c <ceil+0xf8>)
 801f4b0:	0028      	movs	r0, r5
 801f4b2:	0021      	movs	r1, r4
 801f4b4:	e026      	b.n	801f504 <ceil+0x90>
 801f4b6:	4f2e      	ldr	r7, [pc, #184]	; (801f570 <ceil+0xfc>)
 801f4b8:	4137      	asrs	r7, r6
 801f4ba:	003b      	movs	r3, r7
 801f4bc:	400b      	ands	r3, r1
 801f4be:	4303      	orrs	r3, r0
 801f4c0:	d020      	beq.n	801f504 <ceil+0x90>
 801f4c2:	9000      	str	r0, [sp, #0]
 801f4c4:	9101      	str	r1, [sp, #4]
 801f4c6:	4a27      	ldr	r2, [pc, #156]	; (801f564 <ceil+0xf0>)
 801f4c8:	4b27      	ldr	r3, [pc, #156]	; (801f568 <ceil+0xf4>)
 801f4ca:	9800      	ldr	r0, [sp, #0]
 801f4cc:	9901      	ldr	r1, [sp, #4]
 801f4ce:	f7e1 fb45 	bl	8000b5c <__aeabi_dadd>
 801f4d2:	2200      	movs	r2, #0
 801f4d4:	2300      	movs	r3, #0
 801f4d6:	f7e0 ffbf 	bl	8000458 <__aeabi_dcmpgt>
 801f4da:	2800      	cmp	r0, #0
 801f4dc:	d0e8      	beq.n	801f4b0 <ceil+0x3c>
 801f4de:	2c00      	cmp	r4, #0
 801f4e0:	dd03      	ble.n	801f4ea <ceil+0x76>
 801f4e2:	2380      	movs	r3, #128	; 0x80
 801f4e4:	035b      	lsls	r3, r3, #13
 801f4e6:	4133      	asrs	r3, r6
 801f4e8:	18e4      	adds	r4, r4, r3
 801f4ea:	43bc      	bics	r4, r7
 801f4ec:	2500      	movs	r5, #0
 801f4ee:	e7df      	b.n	801f4b0 <ceil+0x3c>
 801f4f0:	2e33      	cmp	r6, #51	; 0x33
 801f4f2:	dd09      	ble.n	801f508 <ceil+0x94>
 801f4f4:	2380      	movs	r3, #128	; 0x80
 801f4f6:	00db      	lsls	r3, r3, #3
 801f4f8:	429e      	cmp	r6, r3
 801f4fa:	d103      	bne.n	801f504 <ceil+0x90>
 801f4fc:	0002      	movs	r2, r0
 801f4fe:	000b      	movs	r3, r1
 801f500:	f7e1 fb2c 	bl	8000b5c <__aeabi_dadd>
 801f504:	b005      	add	sp, #20
 801f506:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f508:	2701      	movs	r7, #1
 801f50a:	4a1a      	ldr	r2, [pc, #104]	; (801f574 <ceil+0x100>)
 801f50c:	427f      	negs	r7, r7
 801f50e:	189b      	adds	r3, r3, r2
 801f510:	40df      	lsrs	r7, r3
 801f512:	4238      	tst	r0, r7
 801f514:	d0f6      	beq.n	801f504 <ceil+0x90>
 801f516:	9000      	str	r0, [sp, #0]
 801f518:	9101      	str	r1, [sp, #4]
 801f51a:	4a12      	ldr	r2, [pc, #72]	; (801f564 <ceil+0xf0>)
 801f51c:	4b12      	ldr	r3, [pc, #72]	; (801f568 <ceil+0xf4>)
 801f51e:	9800      	ldr	r0, [sp, #0]
 801f520:	9901      	ldr	r1, [sp, #4]
 801f522:	f7e1 fb1b 	bl	8000b5c <__aeabi_dadd>
 801f526:	2200      	movs	r2, #0
 801f528:	2300      	movs	r3, #0
 801f52a:	f7e0 ff95 	bl	8000458 <__aeabi_dcmpgt>
 801f52e:	2800      	cmp	r0, #0
 801f530:	d0be      	beq.n	801f4b0 <ceil+0x3c>
 801f532:	2c00      	cmp	r4, #0
 801f534:	dd02      	ble.n	801f53c <ceil+0xc8>
 801f536:	2e14      	cmp	r6, #20
 801f538:	d102      	bne.n	801f540 <ceil+0xcc>
 801f53a:	3401      	adds	r4, #1
 801f53c:	43bd      	bics	r5, r7
 801f53e:	e7b7      	b.n	801f4b0 <ceil+0x3c>
 801f540:	2334      	movs	r3, #52	; 0x34
 801f542:	1b9e      	subs	r6, r3, r6
 801f544:	3b33      	subs	r3, #51	; 0x33
 801f546:	40b3      	lsls	r3, r6
 801f548:	18ed      	adds	r5, r5, r3
 801f54a:	9b03      	ldr	r3, [sp, #12]
 801f54c:	429d      	cmp	r5, r3
 801f54e:	419b      	sbcs	r3, r3
 801f550:	425b      	negs	r3, r3
 801f552:	18e4      	adds	r4, r4, r3
 801f554:	e7f2      	b.n	801f53c <ceil+0xc8>
 801f556:	2480      	movs	r4, #128	; 0x80
 801f558:	2500      	movs	r5, #0
 801f55a:	0624      	lsls	r4, r4, #24
 801f55c:	e7a8      	b.n	801f4b0 <ceil+0x3c>
 801f55e:	46c0      	nop			; (mov r8, r8)
 801f560:	fffffc01 	.word	0xfffffc01
 801f564:	8800759c 	.word	0x8800759c
 801f568:	7e37e43c 	.word	0x7e37e43c
 801f56c:	3ff00000 	.word	0x3ff00000
 801f570:	000fffff 	.word	0x000fffff
 801f574:	fffffbed 	.word	0xfffffbed

0801f578 <floor>:
 801f578:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f57a:	004b      	lsls	r3, r1, #1
 801f57c:	4a39      	ldr	r2, [pc, #228]	; (801f664 <floor+0xec>)
 801f57e:	0d5b      	lsrs	r3, r3, #21
 801f580:	b085      	sub	sp, #20
 801f582:	189e      	adds	r6, r3, r2
 801f584:	000c      	movs	r4, r1
 801f586:	0005      	movs	r5, r0
 801f588:	9003      	str	r0, [sp, #12]
 801f58a:	2e13      	cmp	r6, #19
 801f58c:	dc34      	bgt.n	801f5f8 <floor+0x80>
 801f58e:	2e00      	cmp	r6, #0
 801f590:	da15      	bge.n	801f5be <floor+0x46>
 801f592:	4a35      	ldr	r2, [pc, #212]	; (801f668 <floor+0xf0>)
 801f594:	4b35      	ldr	r3, [pc, #212]	; (801f66c <floor+0xf4>)
 801f596:	f7e1 fae1 	bl	8000b5c <__aeabi_dadd>
 801f59a:	2200      	movs	r2, #0
 801f59c:	2300      	movs	r3, #0
 801f59e:	f7e0 ff5b 	bl	8000458 <__aeabi_dcmpgt>
 801f5a2:	2800      	cmp	r0, #0
 801f5a4:	d008      	beq.n	801f5b8 <floor+0x40>
 801f5a6:	2c00      	cmp	r4, #0
 801f5a8:	da59      	bge.n	801f65e <floor+0xe6>
 801f5aa:	0063      	lsls	r3, r4, #1
 801f5ac:	085b      	lsrs	r3, r3, #1
 801f5ae:	432b      	orrs	r3, r5
 801f5b0:	2500      	movs	r5, #0
 801f5b2:	42ab      	cmp	r3, r5
 801f5b4:	d000      	beq.n	801f5b8 <floor+0x40>
 801f5b6:	4c2e      	ldr	r4, [pc, #184]	; (801f670 <floor+0xf8>)
 801f5b8:	0028      	movs	r0, r5
 801f5ba:	0021      	movs	r1, r4
 801f5bc:	e026      	b.n	801f60c <floor+0x94>
 801f5be:	4f2d      	ldr	r7, [pc, #180]	; (801f674 <floor+0xfc>)
 801f5c0:	4137      	asrs	r7, r6
 801f5c2:	003b      	movs	r3, r7
 801f5c4:	400b      	ands	r3, r1
 801f5c6:	4303      	orrs	r3, r0
 801f5c8:	d020      	beq.n	801f60c <floor+0x94>
 801f5ca:	9000      	str	r0, [sp, #0]
 801f5cc:	9101      	str	r1, [sp, #4]
 801f5ce:	4a26      	ldr	r2, [pc, #152]	; (801f668 <floor+0xf0>)
 801f5d0:	4b26      	ldr	r3, [pc, #152]	; (801f66c <floor+0xf4>)
 801f5d2:	9800      	ldr	r0, [sp, #0]
 801f5d4:	9901      	ldr	r1, [sp, #4]
 801f5d6:	f7e1 fac1 	bl	8000b5c <__aeabi_dadd>
 801f5da:	2200      	movs	r2, #0
 801f5dc:	2300      	movs	r3, #0
 801f5de:	f7e0 ff3b 	bl	8000458 <__aeabi_dcmpgt>
 801f5e2:	2800      	cmp	r0, #0
 801f5e4:	d0e8      	beq.n	801f5b8 <floor+0x40>
 801f5e6:	2c00      	cmp	r4, #0
 801f5e8:	da03      	bge.n	801f5f2 <floor+0x7a>
 801f5ea:	2380      	movs	r3, #128	; 0x80
 801f5ec:	035b      	lsls	r3, r3, #13
 801f5ee:	4133      	asrs	r3, r6
 801f5f0:	18e4      	adds	r4, r4, r3
 801f5f2:	43bc      	bics	r4, r7
 801f5f4:	2500      	movs	r5, #0
 801f5f6:	e7df      	b.n	801f5b8 <floor+0x40>
 801f5f8:	2e33      	cmp	r6, #51	; 0x33
 801f5fa:	dd09      	ble.n	801f610 <floor+0x98>
 801f5fc:	2380      	movs	r3, #128	; 0x80
 801f5fe:	00db      	lsls	r3, r3, #3
 801f600:	429e      	cmp	r6, r3
 801f602:	d103      	bne.n	801f60c <floor+0x94>
 801f604:	0002      	movs	r2, r0
 801f606:	000b      	movs	r3, r1
 801f608:	f7e1 faa8 	bl	8000b5c <__aeabi_dadd>
 801f60c:	b005      	add	sp, #20
 801f60e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f610:	2701      	movs	r7, #1
 801f612:	4a19      	ldr	r2, [pc, #100]	; (801f678 <floor+0x100>)
 801f614:	427f      	negs	r7, r7
 801f616:	189b      	adds	r3, r3, r2
 801f618:	40df      	lsrs	r7, r3
 801f61a:	4238      	tst	r0, r7
 801f61c:	d0f6      	beq.n	801f60c <floor+0x94>
 801f61e:	9000      	str	r0, [sp, #0]
 801f620:	9101      	str	r1, [sp, #4]
 801f622:	4a11      	ldr	r2, [pc, #68]	; (801f668 <floor+0xf0>)
 801f624:	4b11      	ldr	r3, [pc, #68]	; (801f66c <floor+0xf4>)
 801f626:	9800      	ldr	r0, [sp, #0]
 801f628:	9901      	ldr	r1, [sp, #4]
 801f62a:	f7e1 fa97 	bl	8000b5c <__aeabi_dadd>
 801f62e:	2200      	movs	r2, #0
 801f630:	2300      	movs	r3, #0
 801f632:	f7e0 ff11 	bl	8000458 <__aeabi_dcmpgt>
 801f636:	2800      	cmp	r0, #0
 801f638:	d0be      	beq.n	801f5b8 <floor+0x40>
 801f63a:	2c00      	cmp	r4, #0
 801f63c:	da02      	bge.n	801f644 <floor+0xcc>
 801f63e:	2e14      	cmp	r6, #20
 801f640:	d102      	bne.n	801f648 <floor+0xd0>
 801f642:	3401      	adds	r4, #1
 801f644:	43bd      	bics	r5, r7
 801f646:	e7b7      	b.n	801f5b8 <floor+0x40>
 801f648:	2334      	movs	r3, #52	; 0x34
 801f64a:	1b9e      	subs	r6, r3, r6
 801f64c:	3b33      	subs	r3, #51	; 0x33
 801f64e:	40b3      	lsls	r3, r6
 801f650:	18ed      	adds	r5, r5, r3
 801f652:	9b03      	ldr	r3, [sp, #12]
 801f654:	429d      	cmp	r5, r3
 801f656:	419b      	sbcs	r3, r3
 801f658:	425b      	negs	r3, r3
 801f65a:	18e4      	adds	r4, r4, r3
 801f65c:	e7f2      	b.n	801f644 <floor+0xcc>
 801f65e:	2500      	movs	r5, #0
 801f660:	002c      	movs	r4, r5
 801f662:	e7a9      	b.n	801f5b8 <floor+0x40>
 801f664:	fffffc01 	.word	0xfffffc01
 801f668:	8800759c 	.word	0x8800759c
 801f66c:	7e37e43c 	.word	0x7e37e43c
 801f670:	bff00000 	.word	0xbff00000
 801f674:	000fffff 	.word	0x000fffff
 801f678:	fffffbed 	.word	0xfffffbed

0801f67c <round>:
 801f67c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f67e:	004a      	lsls	r2, r1, #1
 801f680:	0007      	movs	r7, r0
 801f682:	481f      	ldr	r0, [pc, #124]	; (801f700 <round+0x84>)
 801f684:	0d52      	lsrs	r2, r2, #21
 801f686:	1815      	adds	r5, r2, r0
 801f688:	000e      	movs	r6, r1
 801f68a:	2d13      	cmp	r5, #19
 801f68c:	dc18      	bgt.n	801f6c0 <round+0x44>
 801f68e:	2d00      	cmp	r5, #0
 801f690:	da09      	bge.n	801f6a6 <round+0x2a>
 801f692:	0fcb      	lsrs	r3, r1, #31
 801f694:	07db      	lsls	r3, r3, #31
 801f696:	2200      	movs	r2, #0
 801f698:	1c69      	adds	r1, r5, #1
 801f69a:	d101      	bne.n	801f6a0 <round+0x24>
 801f69c:	4919      	ldr	r1, [pc, #100]	; (801f704 <round+0x88>)
 801f69e:	430b      	orrs	r3, r1
 801f6a0:	0019      	movs	r1, r3
 801f6a2:	0010      	movs	r0, r2
 801f6a4:	e017      	b.n	801f6d6 <round+0x5a>
 801f6a6:	4a18      	ldr	r2, [pc, #96]	; (801f708 <round+0x8c>)
 801f6a8:	412a      	asrs	r2, r5
 801f6aa:	420a      	tst	r2, r1
 801f6ac:	d101      	bne.n	801f6b2 <round+0x36>
 801f6ae:	2f00      	cmp	r7, #0
 801f6b0:	d012      	beq.n	801f6d8 <round+0x5c>
 801f6b2:	2380      	movs	r3, #128	; 0x80
 801f6b4:	031b      	lsls	r3, r3, #12
 801f6b6:	412b      	asrs	r3, r5
 801f6b8:	199b      	adds	r3, r3, r6
 801f6ba:	4393      	bics	r3, r2
 801f6bc:	2200      	movs	r2, #0
 801f6be:	e7ef      	b.n	801f6a0 <round+0x24>
 801f6c0:	2d33      	cmp	r5, #51	; 0x33
 801f6c2:	dd0b      	ble.n	801f6dc <round+0x60>
 801f6c4:	2380      	movs	r3, #128	; 0x80
 801f6c6:	00db      	lsls	r3, r3, #3
 801f6c8:	429d      	cmp	r5, r3
 801f6ca:	d105      	bne.n	801f6d8 <round+0x5c>
 801f6cc:	003a      	movs	r2, r7
 801f6ce:	000b      	movs	r3, r1
 801f6d0:	0038      	movs	r0, r7
 801f6d2:	f7e1 fa43 	bl	8000b5c <__aeabi_dadd>
 801f6d6:	0007      	movs	r7, r0
 801f6d8:	0038      	movs	r0, r7
 801f6da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f6dc:	2601      	movs	r6, #1
 801f6de:	480b      	ldr	r0, [pc, #44]	; (801f70c <round+0x90>)
 801f6e0:	4276      	negs	r6, r6
 801f6e2:	1812      	adds	r2, r2, r0
 801f6e4:	40d6      	lsrs	r6, r2
 801f6e6:	423e      	tst	r6, r7
 801f6e8:	d0f6      	beq.n	801f6d8 <round+0x5c>
 801f6ea:	2233      	movs	r2, #51	; 0x33
 801f6ec:	1b55      	subs	r5, r2, r5
 801f6ee:	3a32      	subs	r2, #50	; 0x32
 801f6f0:	40aa      	lsls	r2, r5
 801f6f2:	19d2      	adds	r2, r2, r7
 801f6f4:	42ba      	cmp	r2, r7
 801f6f6:	41a4      	sbcs	r4, r4
 801f6f8:	4264      	negs	r4, r4
 801f6fa:	190b      	adds	r3, r1, r4
 801f6fc:	43b2      	bics	r2, r6
 801f6fe:	e7cf      	b.n	801f6a0 <round+0x24>
 801f700:	fffffc01 	.word	0xfffffc01
 801f704:	3ff00000 	.word	0x3ff00000
 801f708:	000fffff 	.word	0x000fffff
 801f70c:	fffffbed 	.word	0xfffffbed

0801f710 <_init>:
 801f710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f712:	46c0      	nop			; (mov r8, r8)
 801f714:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f716:	bc08      	pop	{r3}
 801f718:	469e      	mov	lr, r3
 801f71a:	4770      	bx	lr

0801f71c <_fini>:
 801f71c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f71e:	46c0      	nop			; (mov r8, r8)
 801f720:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f722:	bc08      	pop	{r3}
 801f724:	469e      	mov	lr, r3
 801f726:	4770      	bx	lr
