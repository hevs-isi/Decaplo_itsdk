
itsdk-example-murata-lora.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002058c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001f74  0802064c  0802064c  0003064c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080225c0  080225c0  00040288  2**0
                  CONTENTS
  4 .ARM          00000008  080225c0  080225c0  000325c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080225c8  080225c8  00040288  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080225c8  080225c8  000325c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080225cc  080225cc  000325cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000288  20000000  080225d0  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000014ec  20000288  08022858  00040288  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001774  08022858  00041774  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00040288  2**0
                  CONTENTS, READONLY
 12 .debug_info   00069f8f  00000000  00000000  000402b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000aa4f  00000000  00000000  000aa23f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002948  00000000  00000000  000b4c90  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002538  00000000  00000000  000b75d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00027c41  00000000  00000000  000b9b10  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0003a18b  00000000  00000000  000e1751  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000aded8  00000000  00000000  0011b8dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001c97b4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009914  00000000  00000000  001c9830  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000288 	.word	0x20000288
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08020634 	.word	0x08020634

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000028c 	.word	0x2000028c
 8000104:	08020634 	.word	0x08020634

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	; 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	; 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			; (mov r8, r8)

08000404 <__aeabi_cdrcmple>:
 8000404:	4684      	mov	ip, r0
 8000406:	1c10      	adds	r0, r2, #0
 8000408:	4662      	mov	r2, ip
 800040a:	468c      	mov	ip, r1
 800040c:	1c19      	adds	r1, r3, #0
 800040e:	4663      	mov	r3, ip
 8000410:	e000      	b.n	8000414 <__aeabi_cdcmpeq>
 8000412:	46c0      	nop			; (mov r8, r8)

08000414 <__aeabi_cdcmpeq>:
 8000414:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000416:	f001 fa5f 	bl	80018d8 <__ledf2>
 800041a:	2800      	cmp	r0, #0
 800041c:	d401      	bmi.n	8000422 <__aeabi_cdcmpeq+0xe>
 800041e:	2100      	movs	r1, #0
 8000420:	42c8      	cmn	r0, r1
 8000422:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000424 <__aeabi_dcmpeq>:
 8000424:	b510      	push	{r4, lr}
 8000426:	f001 f9b7 	bl	8001798 <__eqdf2>
 800042a:	4240      	negs	r0, r0
 800042c:	3001      	adds	r0, #1
 800042e:	bd10      	pop	{r4, pc}

08000430 <__aeabi_dcmplt>:
 8000430:	b510      	push	{r4, lr}
 8000432:	f001 fa51 	bl	80018d8 <__ledf2>
 8000436:	2800      	cmp	r0, #0
 8000438:	db01      	blt.n	800043e <__aeabi_dcmplt+0xe>
 800043a:	2000      	movs	r0, #0
 800043c:	bd10      	pop	{r4, pc}
 800043e:	2001      	movs	r0, #1
 8000440:	bd10      	pop	{r4, pc}
 8000442:	46c0      	nop			; (mov r8, r8)

08000444 <__aeabi_dcmple>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f001 fa47 	bl	80018d8 <__ledf2>
 800044a:	2800      	cmp	r0, #0
 800044c:	dd01      	ble.n	8000452 <__aeabi_dcmple+0xe>
 800044e:	2000      	movs	r0, #0
 8000450:	bd10      	pop	{r4, pc}
 8000452:	2001      	movs	r0, #1
 8000454:	bd10      	pop	{r4, pc}
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <__aeabi_dcmpgt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 f9d9 	bl	8001810 <__gedf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	dc01      	bgt.n	8000466 <__aeabi_dcmpgt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmpge>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 f9cf 	bl	8001810 <__gedf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	da01      	bge.n	800047a <__aeabi_dcmpge+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_ldivmod>:
 8000480:	2b00      	cmp	r3, #0
 8000482:	d115      	bne.n	80004b0 <__aeabi_ldivmod+0x30>
 8000484:	2a00      	cmp	r2, #0
 8000486:	d113      	bne.n	80004b0 <__aeabi_ldivmod+0x30>
 8000488:	2900      	cmp	r1, #0
 800048a:	db06      	blt.n	800049a <__aeabi_ldivmod+0x1a>
 800048c:	dc01      	bgt.n	8000492 <__aeabi_ldivmod+0x12>
 800048e:	2800      	cmp	r0, #0
 8000490:	d006      	beq.n	80004a0 <__aeabi_ldivmod+0x20>
 8000492:	2000      	movs	r0, #0
 8000494:	43c0      	mvns	r0, r0
 8000496:	0841      	lsrs	r1, r0, #1
 8000498:	e002      	b.n	80004a0 <__aeabi_ldivmod+0x20>
 800049a:	2180      	movs	r1, #128	; 0x80
 800049c:	0609      	lsls	r1, r1, #24
 800049e:	2000      	movs	r0, #0
 80004a0:	b407      	push	{r0, r1, r2}
 80004a2:	4802      	ldr	r0, [pc, #8]	; (80004ac <__aeabi_ldivmod+0x2c>)
 80004a4:	a101      	add	r1, pc, #4	; (adr r1, 80004ac <__aeabi_ldivmod+0x2c>)
 80004a6:	1840      	adds	r0, r0, r1
 80004a8:	9002      	str	r0, [sp, #8]
 80004aa:	bd03      	pop	{r0, r1, pc}
 80004ac:	ffffff55 	.word	0xffffff55
 80004b0:	b403      	push	{r0, r1}
 80004b2:	4668      	mov	r0, sp
 80004b4:	b501      	push	{r0, lr}
 80004b6:	9802      	ldr	r0, [sp, #8]
 80004b8:	f000 f930 	bl	800071c <__gnu_ldivmod_helper>
 80004bc:	9b01      	ldr	r3, [sp, #4]
 80004be:	469e      	mov	lr, r3
 80004c0:	b002      	add	sp, #8
 80004c2:	bc0c      	pop	{r2, r3}
 80004c4:	4770      	bx	lr
 80004c6:	46c0      	nop			; (mov r8, r8)

080004c8 <__aeabi_uldivmod>:
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d111      	bne.n	80004f0 <__aeabi_uldivmod+0x28>
 80004cc:	2a00      	cmp	r2, #0
 80004ce:	d10f      	bne.n	80004f0 <__aeabi_uldivmod+0x28>
 80004d0:	2900      	cmp	r1, #0
 80004d2:	d100      	bne.n	80004d6 <__aeabi_uldivmod+0xe>
 80004d4:	2800      	cmp	r0, #0
 80004d6:	d002      	beq.n	80004de <__aeabi_uldivmod+0x16>
 80004d8:	2100      	movs	r1, #0
 80004da:	43c9      	mvns	r1, r1
 80004dc:	1c08      	adds	r0, r1, #0
 80004de:	b407      	push	{r0, r1, r2}
 80004e0:	4802      	ldr	r0, [pc, #8]	; (80004ec <__aeabi_uldivmod+0x24>)
 80004e2:	a102      	add	r1, pc, #8	; (adr r1, 80004ec <__aeabi_uldivmod+0x24>)
 80004e4:	1840      	adds	r0, r0, r1
 80004e6:	9002      	str	r0, [sp, #8]
 80004e8:	bd03      	pop	{r0, r1, pc}
 80004ea:	46c0      	nop			; (mov r8, r8)
 80004ec:	ffffff15 	.word	0xffffff15
 80004f0:	b403      	push	{r0, r1}
 80004f2:	4668      	mov	r0, sp
 80004f4:	b501      	push	{r0, lr}
 80004f6:	9802      	ldr	r0, [sp, #8]
 80004f8:	f000 f84e 	bl	8000598 <__udivmoddi4>
 80004fc:	9b01      	ldr	r3, [sp, #4]
 80004fe:	469e      	mov	lr, r3
 8000500:	b002      	add	sp, #8
 8000502:	bc0c      	pop	{r2, r3}
 8000504:	4770      	bx	lr
 8000506:	46c0      	nop			; (mov r8, r8)

08000508 <__aeabi_lmul>:
 8000508:	b5f0      	push	{r4, r5, r6, r7, lr}
 800050a:	46ce      	mov	lr, r9
 800050c:	4647      	mov	r7, r8
 800050e:	0415      	lsls	r5, r2, #16
 8000510:	0c2d      	lsrs	r5, r5, #16
 8000512:	002e      	movs	r6, r5
 8000514:	b580      	push	{r7, lr}
 8000516:	0407      	lsls	r7, r0, #16
 8000518:	0c14      	lsrs	r4, r2, #16
 800051a:	0c3f      	lsrs	r7, r7, #16
 800051c:	4699      	mov	r9, r3
 800051e:	0c03      	lsrs	r3, r0, #16
 8000520:	437e      	muls	r6, r7
 8000522:	435d      	muls	r5, r3
 8000524:	4367      	muls	r7, r4
 8000526:	4363      	muls	r3, r4
 8000528:	197f      	adds	r7, r7, r5
 800052a:	0c34      	lsrs	r4, r6, #16
 800052c:	19e4      	adds	r4, r4, r7
 800052e:	469c      	mov	ip, r3
 8000530:	42a5      	cmp	r5, r4
 8000532:	d903      	bls.n	800053c <__aeabi_lmul+0x34>
 8000534:	2380      	movs	r3, #128	; 0x80
 8000536:	025b      	lsls	r3, r3, #9
 8000538:	4698      	mov	r8, r3
 800053a:	44c4      	add	ip, r8
 800053c:	464b      	mov	r3, r9
 800053e:	4343      	muls	r3, r0
 8000540:	4351      	muls	r1, r2
 8000542:	0c25      	lsrs	r5, r4, #16
 8000544:	0436      	lsls	r6, r6, #16
 8000546:	4465      	add	r5, ip
 8000548:	0c36      	lsrs	r6, r6, #16
 800054a:	0424      	lsls	r4, r4, #16
 800054c:	19a4      	adds	r4, r4, r6
 800054e:	195b      	adds	r3, r3, r5
 8000550:	1859      	adds	r1, r3, r1
 8000552:	0020      	movs	r0, r4
 8000554:	bc0c      	pop	{r2, r3}
 8000556:	4690      	mov	r8, r2
 8000558:	4699      	mov	r9, r3
 800055a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800055c <__aeabi_d2uiz>:
 800055c:	b570      	push	{r4, r5, r6, lr}
 800055e:	2200      	movs	r2, #0
 8000560:	4b0c      	ldr	r3, [pc, #48]	; (8000594 <__aeabi_d2uiz+0x38>)
 8000562:	0004      	movs	r4, r0
 8000564:	000d      	movs	r5, r1
 8000566:	f7ff ff81 	bl	800046c <__aeabi_dcmpge>
 800056a:	2800      	cmp	r0, #0
 800056c:	d104      	bne.n	8000578 <__aeabi_d2uiz+0x1c>
 800056e:	0020      	movs	r0, r4
 8000570:	0029      	movs	r1, r5
 8000572:	f001 ffd3 	bl	800251c <__aeabi_d2iz>
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	4b06      	ldr	r3, [pc, #24]	; (8000594 <__aeabi_d2uiz+0x38>)
 800057a:	2200      	movs	r2, #0
 800057c:	0020      	movs	r0, r4
 800057e:	0029      	movs	r1, r5
 8000580:	f001 fc84 	bl	8001e8c <__aeabi_dsub>
 8000584:	f001 ffca 	bl	800251c <__aeabi_d2iz>
 8000588:	2380      	movs	r3, #128	; 0x80
 800058a:	061b      	lsls	r3, r3, #24
 800058c:	469c      	mov	ip, r3
 800058e:	4460      	add	r0, ip
 8000590:	e7f1      	b.n	8000576 <__aeabi_d2uiz+0x1a>
 8000592:	46c0      	nop			; (mov r8, r8)
 8000594:	41e00000 	.word	0x41e00000

08000598 <__udivmoddi4>:
 8000598:	b5f0      	push	{r4, r5, r6, r7, lr}
 800059a:	464f      	mov	r7, r9
 800059c:	4646      	mov	r6, r8
 800059e:	46d6      	mov	lr, sl
 80005a0:	b5c0      	push	{r6, r7, lr}
 80005a2:	0004      	movs	r4, r0
 80005a4:	b082      	sub	sp, #8
 80005a6:	000d      	movs	r5, r1
 80005a8:	4691      	mov	r9, r2
 80005aa:	4698      	mov	r8, r3
 80005ac:	428b      	cmp	r3, r1
 80005ae:	d82f      	bhi.n	8000610 <__udivmoddi4+0x78>
 80005b0:	d02c      	beq.n	800060c <__udivmoddi4+0x74>
 80005b2:	4641      	mov	r1, r8
 80005b4:	4648      	mov	r0, r9
 80005b6:	f002 f8c3 	bl	8002740 <__clzdi2>
 80005ba:	0029      	movs	r1, r5
 80005bc:	0006      	movs	r6, r0
 80005be:	0020      	movs	r0, r4
 80005c0:	f002 f8be 	bl	8002740 <__clzdi2>
 80005c4:	1a33      	subs	r3, r6, r0
 80005c6:	469c      	mov	ip, r3
 80005c8:	3b20      	subs	r3, #32
 80005ca:	469a      	mov	sl, r3
 80005cc:	d500      	bpl.n	80005d0 <__udivmoddi4+0x38>
 80005ce:	e076      	b.n	80006be <__udivmoddi4+0x126>
 80005d0:	464b      	mov	r3, r9
 80005d2:	4652      	mov	r2, sl
 80005d4:	4093      	lsls	r3, r2
 80005d6:	001f      	movs	r7, r3
 80005d8:	464b      	mov	r3, r9
 80005da:	4662      	mov	r2, ip
 80005dc:	4093      	lsls	r3, r2
 80005de:	001e      	movs	r6, r3
 80005e0:	42af      	cmp	r7, r5
 80005e2:	d828      	bhi.n	8000636 <__udivmoddi4+0x9e>
 80005e4:	d025      	beq.n	8000632 <__udivmoddi4+0x9a>
 80005e6:	4653      	mov	r3, sl
 80005e8:	1ba4      	subs	r4, r4, r6
 80005ea:	41bd      	sbcs	r5, r7
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	da00      	bge.n	80005f2 <__udivmoddi4+0x5a>
 80005f0:	e07b      	b.n	80006ea <__udivmoddi4+0x152>
 80005f2:	2200      	movs	r2, #0
 80005f4:	2300      	movs	r3, #0
 80005f6:	9200      	str	r2, [sp, #0]
 80005f8:	9301      	str	r3, [sp, #4]
 80005fa:	2301      	movs	r3, #1
 80005fc:	4652      	mov	r2, sl
 80005fe:	4093      	lsls	r3, r2
 8000600:	9301      	str	r3, [sp, #4]
 8000602:	2301      	movs	r3, #1
 8000604:	4662      	mov	r2, ip
 8000606:	4093      	lsls	r3, r2
 8000608:	9300      	str	r3, [sp, #0]
 800060a:	e018      	b.n	800063e <__udivmoddi4+0xa6>
 800060c:	4282      	cmp	r2, r0
 800060e:	d9d0      	bls.n	80005b2 <__udivmoddi4+0x1a>
 8000610:	2200      	movs	r2, #0
 8000612:	2300      	movs	r3, #0
 8000614:	9200      	str	r2, [sp, #0]
 8000616:	9301      	str	r3, [sp, #4]
 8000618:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <__udivmoddi4+0x8a>
 800061e:	601c      	str	r4, [r3, #0]
 8000620:	605d      	str	r5, [r3, #4]
 8000622:	9800      	ldr	r0, [sp, #0]
 8000624:	9901      	ldr	r1, [sp, #4]
 8000626:	b002      	add	sp, #8
 8000628:	bc1c      	pop	{r2, r3, r4}
 800062a:	4690      	mov	r8, r2
 800062c:	4699      	mov	r9, r3
 800062e:	46a2      	mov	sl, r4
 8000630:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000632:	42a3      	cmp	r3, r4
 8000634:	d9d7      	bls.n	80005e6 <__udivmoddi4+0x4e>
 8000636:	2200      	movs	r2, #0
 8000638:	2300      	movs	r3, #0
 800063a:	9200      	str	r2, [sp, #0]
 800063c:	9301      	str	r3, [sp, #4]
 800063e:	4663      	mov	r3, ip
 8000640:	2b00      	cmp	r3, #0
 8000642:	d0e9      	beq.n	8000618 <__udivmoddi4+0x80>
 8000644:	07fb      	lsls	r3, r7, #31
 8000646:	4698      	mov	r8, r3
 8000648:	4641      	mov	r1, r8
 800064a:	0872      	lsrs	r2, r6, #1
 800064c:	430a      	orrs	r2, r1
 800064e:	087b      	lsrs	r3, r7, #1
 8000650:	4666      	mov	r6, ip
 8000652:	e00e      	b.n	8000672 <__udivmoddi4+0xda>
 8000654:	42ab      	cmp	r3, r5
 8000656:	d101      	bne.n	800065c <__udivmoddi4+0xc4>
 8000658:	42a2      	cmp	r2, r4
 800065a:	d80c      	bhi.n	8000676 <__udivmoddi4+0xde>
 800065c:	1aa4      	subs	r4, r4, r2
 800065e:	419d      	sbcs	r5, r3
 8000660:	2001      	movs	r0, #1
 8000662:	1924      	adds	r4, r4, r4
 8000664:	416d      	adcs	r5, r5
 8000666:	2100      	movs	r1, #0
 8000668:	3e01      	subs	r6, #1
 800066a:	1824      	adds	r4, r4, r0
 800066c:	414d      	adcs	r5, r1
 800066e:	2e00      	cmp	r6, #0
 8000670:	d006      	beq.n	8000680 <__udivmoddi4+0xe8>
 8000672:	42ab      	cmp	r3, r5
 8000674:	d9ee      	bls.n	8000654 <__udivmoddi4+0xbc>
 8000676:	3e01      	subs	r6, #1
 8000678:	1924      	adds	r4, r4, r4
 800067a:	416d      	adcs	r5, r5
 800067c:	2e00      	cmp	r6, #0
 800067e:	d1f8      	bne.n	8000672 <__udivmoddi4+0xda>
 8000680:	9800      	ldr	r0, [sp, #0]
 8000682:	9901      	ldr	r1, [sp, #4]
 8000684:	4653      	mov	r3, sl
 8000686:	1900      	adds	r0, r0, r4
 8000688:	4169      	adcs	r1, r5
 800068a:	2b00      	cmp	r3, #0
 800068c:	db23      	blt.n	80006d6 <__udivmoddi4+0x13e>
 800068e:	002b      	movs	r3, r5
 8000690:	4652      	mov	r2, sl
 8000692:	40d3      	lsrs	r3, r2
 8000694:	002a      	movs	r2, r5
 8000696:	4664      	mov	r4, ip
 8000698:	40e2      	lsrs	r2, r4
 800069a:	001c      	movs	r4, r3
 800069c:	4653      	mov	r3, sl
 800069e:	0015      	movs	r5, r2
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	db2d      	blt.n	8000700 <__udivmoddi4+0x168>
 80006a4:	0026      	movs	r6, r4
 80006a6:	4657      	mov	r7, sl
 80006a8:	40be      	lsls	r6, r7
 80006aa:	0033      	movs	r3, r6
 80006ac:	0026      	movs	r6, r4
 80006ae:	4667      	mov	r7, ip
 80006b0:	40be      	lsls	r6, r7
 80006b2:	0032      	movs	r2, r6
 80006b4:	1a80      	subs	r0, r0, r2
 80006b6:	4199      	sbcs	r1, r3
 80006b8:	9000      	str	r0, [sp, #0]
 80006ba:	9101      	str	r1, [sp, #4]
 80006bc:	e7ac      	b.n	8000618 <__udivmoddi4+0x80>
 80006be:	4662      	mov	r2, ip
 80006c0:	2320      	movs	r3, #32
 80006c2:	1a9b      	subs	r3, r3, r2
 80006c4:	464a      	mov	r2, r9
 80006c6:	40da      	lsrs	r2, r3
 80006c8:	4661      	mov	r1, ip
 80006ca:	0013      	movs	r3, r2
 80006cc:	4642      	mov	r2, r8
 80006ce:	408a      	lsls	r2, r1
 80006d0:	0017      	movs	r7, r2
 80006d2:	431f      	orrs	r7, r3
 80006d4:	e780      	b.n	80005d8 <__udivmoddi4+0x40>
 80006d6:	4662      	mov	r2, ip
 80006d8:	2320      	movs	r3, #32
 80006da:	1a9b      	subs	r3, r3, r2
 80006dc:	002a      	movs	r2, r5
 80006de:	4666      	mov	r6, ip
 80006e0:	409a      	lsls	r2, r3
 80006e2:	0023      	movs	r3, r4
 80006e4:	40f3      	lsrs	r3, r6
 80006e6:	4313      	orrs	r3, r2
 80006e8:	e7d4      	b.n	8000694 <__udivmoddi4+0xfc>
 80006ea:	4662      	mov	r2, ip
 80006ec:	2320      	movs	r3, #32
 80006ee:	2100      	movs	r1, #0
 80006f0:	1a9b      	subs	r3, r3, r2
 80006f2:	2200      	movs	r2, #0
 80006f4:	9100      	str	r1, [sp, #0]
 80006f6:	9201      	str	r2, [sp, #4]
 80006f8:	2201      	movs	r2, #1
 80006fa:	40da      	lsrs	r2, r3
 80006fc:	9201      	str	r2, [sp, #4]
 80006fe:	e780      	b.n	8000602 <__udivmoddi4+0x6a>
 8000700:	2320      	movs	r3, #32
 8000702:	4662      	mov	r2, ip
 8000704:	0026      	movs	r6, r4
 8000706:	1a9b      	subs	r3, r3, r2
 8000708:	40de      	lsrs	r6, r3
 800070a:	002f      	movs	r7, r5
 800070c:	46b0      	mov	r8, r6
 800070e:	4666      	mov	r6, ip
 8000710:	40b7      	lsls	r7, r6
 8000712:	4646      	mov	r6, r8
 8000714:	003b      	movs	r3, r7
 8000716:	4333      	orrs	r3, r6
 8000718:	e7c8      	b.n	80006ac <__udivmoddi4+0x114>
 800071a:	46c0      	nop			; (mov r8, r8)

0800071c <__gnu_ldivmod_helper>:
 800071c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800071e:	b083      	sub	sp, #12
 8000720:	0016      	movs	r6, r2
 8000722:	001f      	movs	r7, r3
 8000724:	9000      	str	r0, [sp, #0]
 8000726:	9101      	str	r1, [sp, #4]
 8000728:	f002 f816 	bl	8002758 <__divdi3>
 800072c:	0004      	movs	r4, r0
 800072e:	000d      	movs	r5, r1
 8000730:	0002      	movs	r2, r0
 8000732:	000b      	movs	r3, r1
 8000734:	0030      	movs	r0, r6
 8000736:	0039      	movs	r1, r7
 8000738:	f7ff fee6 	bl	8000508 <__aeabi_lmul>
 800073c:	9a00      	ldr	r2, [sp, #0]
 800073e:	9b01      	ldr	r3, [sp, #4]
 8000740:	1a12      	subs	r2, r2, r0
 8000742:	418b      	sbcs	r3, r1
 8000744:	9908      	ldr	r1, [sp, #32]
 8000746:	0020      	movs	r0, r4
 8000748:	600a      	str	r2, [r1, #0]
 800074a:	604b      	str	r3, [r1, #4]
 800074c:	0029      	movs	r1, r5
 800074e:	b003      	add	sp, #12
 8000750:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000752:	46c0      	nop			; (mov r8, r8)

08000754 <__aeabi_fsub>:
 8000754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000756:	4647      	mov	r7, r8
 8000758:	46ce      	mov	lr, r9
 800075a:	0044      	lsls	r4, r0, #1
 800075c:	0fc2      	lsrs	r2, r0, #31
 800075e:	b580      	push	{r7, lr}
 8000760:	0247      	lsls	r7, r0, #9
 8000762:	0248      	lsls	r0, r1, #9
 8000764:	0a40      	lsrs	r0, r0, #9
 8000766:	4684      	mov	ip, r0
 8000768:	4666      	mov	r6, ip
 800076a:	0048      	lsls	r0, r1, #1
 800076c:	0a7f      	lsrs	r7, r7, #9
 800076e:	0e24      	lsrs	r4, r4, #24
 8000770:	00f6      	lsls	r6, r6, #3
 8000772:	0025      	movs	r5, r4
 8000774:	4690      	mov	r8, r2
 8000776:	00fb      	lsls	r3, r7, #3
 8000778:	0e00      	lsrs	r0, r0, #24
 800077a:	0fc9      	lsrs	r1, r1, #31
 800077c:	46b1      	mov	r9, r6
 800077e:	28ff      	cmp	r0, #255	; 0xff
 8000780:	d100      	bne.n	8000784 <__aeabi_fsub+0x30>
 8000782:	e085      	b.n	8000890 <__aeabi_fsub+0x13c>
 8000784:	2601      	movs	r6, #1
 8000786:	4071      	eors	r1, r6
 8000788:	1a26      	subs	r6, r4, r0
 800078a:	4291      	cmp	r1, r2
 800078c:	d057      	beq.n	800083e <__aeabi_fsub+0xea>
 800078e:	2e00      	cmp	r6, #0
 8000790:	dd43      	ble.n	800081a <__aeabi_fsub+0xc6>
 8000792:	2800      	cmp	r0, #0
 8000794:	d000      	beq.n	8000798 <__aeabi_fsub+0x44>
 8000796:	e07f      	b.n	8000898 <__aeabi_fsub+0x144>
 8000798:	4649      	mov	r1, r9
 800079a:	2900      	cmp	r1, #0
 800079c:	d100      	bne.n	80007a0 <__aeabi_fsub+0x4c>
 800079e:	e0aa      	b.n	80008f6 <__aeabi_fsub+0x1a2>
 80007a0:	3e01      	subs	r6, #1
 80007a2:	2e00      	cmp	r6, #0
 80007a4:	d000      	beq.n	80007a8 <__aeabi_fsub+0x54>
 80007a6:	e0f7      	b.n	8000998 <__aeabi_fsub+0x244>
 80007a8:	1a5b      	subs	r3, r3, r1
 80007aa:	015a      	lsls	r2, r3, #5
 80007ac:	d400      	bmi.n	80007b0 <__aeabi_fsub+0x5c>
 80007ae:	e08b      	b.n	80008c8 <__aeabi_fsub+0x174>
 80007b0:	019b      	lsls	r3, r3, #6
 80007b2:	099c      	lsrs	r4, r3, #6
 80007b4:	0020      	movs	r0, r4
 80007b6:	f001 ffa5 	bl	8002704 <__clzsi2>
 80007ba:	3805      	subs	r0, #5
 80007bc:	4084      	lsls	r4, r0
 80007be:	4285      	cmp	r5, r0
 80007c0:	dd00      	ble.n	80007c4 <__aeabi_fsub+0x70>
 80007c2:	e0d3      	b.n	800096c <__aeabi_fsub+0x218>
 80007c4:	1b45      	subs	r5, r0, r5
 80007c6:	0023      	movs	r3, r4
 80007c8:	2020      	movs	r0, #32
 80007ca:	3501      	adds	r5, #1
 80007cc:	40eb      	lsrs	r3, r5
 80007ce:	1b45      	subs	r5, r0, r5
 80007d0:	40ac      	lsls	r4, r5
 80007d2:	1e62      	subs	r2, r4, #1
 80007d4:	4194      	sbcs	r4, r2
 80007d6:	4323      	orrs	r3, r4
 80007d8:	2407      	movs	r4, #7
 80007da:	2500      	movs	r5, #0
 80007dc:	401c      	ands	r4, r3
 80007de:	2201      	movs	r2, #1
 80007e0:	4641      	mov	r1, r8
 80007e2:	400a      	ands	r2, r1
 80007e4:	2c00      	cmp	r4, #0
 80007e6:	d004      	beq.n	80007f2 <__aeabi_fsub+0x9e>
 80007e8:	210f      	movs	r1, #15
 80007ea:	4019      	ands	r1, r3
 80007ec:	2904      	cmp	r1, #4
 80007ee:	d000      	beq.n	80007f2 <__aeabi_fsub+0x9e>
 80007f0:	3304      	adds	r3, #4
 80007f2:	0159      	lsls	r1, r3, #5
 80007f4:	d400      	bmi.n	80007f8 <__aeabi_fsub+0xa4>
 80007f6:	e080      	b.n	80008fa <__aeabi_fsub+0x1a6>
 80007f8:	3501      	adds	r5, #1
 80007fa:	b2ec      	uxtb	r4, r5
 80007fc:	2dff      	cmp	r5, #255	; 0xff
 80007fe:	d000      	beq.n	8000802 <__aeabi_fsub+0xae>
 8000800:	e0a3      	b.n	800094a <__aeabi_fsub+0x1f6>
 8000802:	24ff      	movs	r4, #255	; 0xff
 8000804:	2300      	movs	r3, #0
 8000806:	025b      	lsls	r3, r3, #9
 8000808:	05e4      	lsls	r4, r4, #23
 800080a:	0a58      	lsrs	r0, r3, #9
 800080c:	07d2      	lsls	r2, r2, #31
 800080e:	4320      	orrs	r0, r4
 8000810:	4310      	orrs	r0, r2
 8000812:	bc0c      	pop	{r2, r3}
 8000814:	4690      	mov	r8, r2
 8000816:	4699      	mov	r9, r3
 8000818:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800081a:	2e00      	cmp	r6, #0
 800081c:	d174      	bne.n	8000908 <__aeabi_fsub+0x1b4>
 800081e:	1c60      	adds	r0, r4, #1
 8000820:	b2c0      	uxtb	r0, r0
 8000822:	2801      	cmp	r0, #1
 8000824:	dc00      	bgt.n	8000828 <__aeabi_fsub+0xd4>
 8000826:	e0a7      	b.n	8000978 <__aeabi_fsub+0x224>
 8000828:	464a      	mov	r2, r9
 800082a:	1a9c      	subs	r4, r3, r2
 800082c:	0162      	lsls	r2, r4, #5
 800082e:	d500      	bpl.n	8000832 <__aeabi_fsub+0xde>
 8000830:	e0b6      	b.n	80009a0 <__aeabi_fsub+0x24c>
 8000832:	2c00      	cmp	r4, #0
 8000834:	d1be      	bne.n	80007b4 <__aeabi_fsub+0x60>
 8000836:	2200      	movs	r2, #0
 8000838:	2400      	movs	r4, #0
 800083a:	2300      	movs	r3, #0
 800083c:	e7e3      	b.n	8000806 <__aeabi_fsub+0xb2>
 800083e:	2e00      	cmp	r6, #0
 8000840:	dc00      	bgt.n	8000844 <__aeabi_fsub+0xf0>
 8000842:	e085      	b.n	8000950 <__aeabi_fsub+0x1fc>
 8000844:	2800      	cmp	r0, #0
 8000846:	d046      	beq.n	80008d6 <__aeabi_fsub+0x182>
 8000848:	2cff      	cmp	r4, #255	; 0xff
 800084a:	d049      	beq.n	80008e0 <__aeabi_fsub+0x18c>
 800084c:	2280      	movs	r2, #128	; 0x80
 800084e:	4648      	mov	r0, r9
 8000850:	04d2      	lsls	r2, r2, #19
 8000852:	4310      	orrs	r0, r2
 8000854:	4681      	mov	r9, r0
 8000856:	2201      	movs	r2, #1
 8000858:	2e1b      	cmp	r6, #27
 800085a:	dc09      	bgt.n	8000870 <__aeabi_fsub+0x11c>
 800085c:	2020      	movs	r0, #32
 800085e:	464c      	mov	r4, r9
 8000860:	1b80      	subs	r0, r0, r6
 8000862:	4084      	lsls	r4, r0
 8000864:	464a      	mov	r2, r9
 8000866:	0020      	movs	r0, r4
 8000868:	40f2      	lsrs	r2, r6
 800086a:	1e44      	subs	r4, r0, #1
 800086c:	41a0      	sbcs	r0, r4
 800086e:	4302      	orrs	r2, r0
 8000870:	189b      	adds	r3, r3, r2
 8000872:	015a      	lsls	r2, r3, #5
 8000874:	d528      	bpl.n	80008c8 <__aeabi_fsub+0x174>
 8000876:	3501      	adds	r5, #1
 8000878:	2dff      	cmp	r5, #255	; 0xff
 800087a:	d100      	bne.n	800087e <__aeabi_fsub+0x12a>
 800087c:	e0a8      	b.n	80009d0 <__aeabi_fsub+0x27c>
 800087e:	2201      	movs	r2, #1
 8000880:	2407      	movs	r4, #7
 8000882:	4994      	ldr	r1, [pc, #592]	; (8000ad4 <__aeabi_fsub+0x380>)
 8000884:	401a      	ands	r2, r3
 8000886:	085b      	lsrs	r3, r3, #1
 8000888:	400b      	ands	r3, r1
 800088a:	4313      	orrs	r3, r2
 800088c:	401c      	ands	r4, r3
 800088e:	e7a6      	b.n	80007de <__aeabi_fsub+0x8a>
 8000890:	2e00      	cmp	r6, #0
 8000892:	d000      	beq.n	8000896 <__aeabi_fsub+0x142>
 8000894:	e778      	b.n	8000788 <__aeabi_fsub+0x34>
 8000896:	e775      	b.n	8000784 <__aeabi_fsub+0x30>
 8000898:	2cff      	cmp	r4, #255	; 0xff
 800089a:	d054      	beq.n	8000946 <__aeabi_fsub+0x1f2>
 800089c:	2280      	movs	r2, #128	; 0x80
 800089e:	4649      	mov	r1, r9
 80008a0:	04d2      	lsls	r2, r2, #19
 80008a2:	4311      	orrs	r1, r2
 80008a4:	4689      	mov	r9, r1
 80008a6:	2201      	movs	r2, #1
 80008a8:	2e1b      	cmp	r6, #27
 80008aa:	dc09      	bgt.n	80008c0 <__aeabi_fsub+0x16c>
 80008ac:	2120      	movs	r1, #32
 80008ae:	4648      	mov	r0, r9
 80008b0:	1b89      	subs	r1, r1, r6
 80008b2:	4088      	lsls	r0, r1
 80008b4:	464a      	mov	r2, r9
 80008b6:	0001      	movs	r1, r0
 80008b8:	40f2      	lsrs	r2, r6
 80008ba:	1e48      	subs	r0, r1, #1
 80008bc:	4181      	sbcs	r1, r0
 80008be:	430a      	orrs	r2, r1
 80008c0:	1a9b      	subs	r3, r3, r2
 80008c2:	015a      	lsls	r2, r3, #5
 80008c4:	d500      	bpl.n	80008c8 <__aeabi_fsub+0x174>
 80008c6:	e773      	b.n	80007b0 <__aeabi_fsub+0x5c>
 80008c8:	2201      	movs	r2, #1
 80008ca:	4641      	mov	r1, r8
 80008cc:	400a      	ands	r2, r1
 80008ce:	0759      	lsls	r1, r3, #29
 80008d0:	d000      	beq.n	80008d4 <__aeabi_fsub+0x180>
 80008d2:	e789      	b.n	80007e8 <__aeabi_fsub+0x94>
 80008d4:	e011      	b.n	80008fa <__aeabi_fsub+0x1a6>
 80008d6:	4648      	mov	r0, r9
 80008d8:	2800      	cmp	r0, #0
 80008da:	d158      	bne.n	800098e <__aeabi_fsub+0x23a>
 80008dc:	2cff      	cmp	r4, #255	; 0xff
 80008de:	d10c      	bne.n	80008fa <__aeabi_fsub+0x1a6>
 80008e0:	08db      	lsrs	r3, r3, #3
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d100      	bne.n	80008e8 <__aeabi_fsub+0x194>
 80008e6:	e78c      	b.n	8000802 <__aeabi_fsub+0xae>
 80008e8:	2080      	movs	r0, #128	; 0x80
 80008ea:	03c0      	lsls	r0, r0, #15
 80008ec:	4303      	orrs	r3, r0
 80008ee:	025b      	lsls	r3, r3, #9
 80008f0:	0a5b      	lsrs	r3, r3, #9
 80008f2:	24ff      	movs	r4, #255	; 0xff
 80008f4:	e787      	b.n	8000806 <__aeabi_fsub+0xb2>
 80008f6:	2cff      	cmp	r4, #255	; 0xff
 80008f8:	d025      	beq.n	8000946 <__aeabi_fsub+0x1f2>
 80008fa:	08db      	lsrs	r3, r3, #3
 80008fc:	2dff      	cmp	r5, #255	; 0xff
 80008fe:	d0f0      	beq.n	80008e2 <__aeabi_fsub+0x18e>
 8000900:	025b      	lsls	r3, r3, #9
 8000902:	0a5b      	lsrs	r3, r3, #9
 8000904:	b2ec      	uxtb	r4, r5
 8000906:	e77e      	b.n	8000806 <__aeabi_fsub+0xb2>
 8000908:	2c00      	cmp	r4, #0
 800090a:	d04d      	beq.n	80009a8 <__aeabi_fsub+0x254>
 800090c:	28ff      	cmp	r0, #255	; 0xff
 800090e:	d018      	beq.n	8000942 <__aeabi_fsub+0x1ee>
 8000910:	2480      	movs	r4, #128	; 0x80
 8000912:	04e4      	lsls	r4, r4, #19
 8000914:	4272      	negs	r2, r6
 8000916:	4323      	orrs	r3, r4
 8000918:	2a1b      	cmp	r2, #27
 800091a:	dd00      	ble.n	800091e <__aeabi_fsub+0x1ca>
 800091c:	e0c4      	b.n	8000aa8 <__aeabi_fsub+0x354>
 800091e:	001c      	movs	r4, r3
 8000920:	2520      	movs	r5, #32
 8000922:	40d4      	lsrs	r4, r2
 8000924:	1aaa      	subs	r2, r5, r2
 8000926:	4093      	lsls	r3, r2
 8000928:	1e5a      	subs	r2, r3, #1
 800092a:	4193      	sbcs	r3, r2
 800092c:	4323      	orrs	r3, r4
 800092e:	464a      	mov	r2, r9
 8000930:	0005      	movs	r5, r0
 8000932:	1ad3      	subs	r3, r2, r3
 8000934:	4688      	mov	r8, r1
 8000936:	e738      	b.n	80007aa <__aeabi_fsub+0x56>
 8000938:	1c72      	adds	r2, r6, #1
 800093a:	d0f8      	beq.n	800092e <__aeabi_fsub+0x1da>
 800093c:	43f2      	mvns	r2, r6
 800093e:	28ff      	cmp	r0, #255	; 0xff
 8000940:	d1ea      	bne.n	8000918 <__aeabi_fsub+0x1c4>
 8000942:	000a      	movs	r2, r1
 8000944:	464b      	mov	r3, r9
 8000946:	25ff      	movs	r5, #255	; 0xff
 8000948:	e7d7      	b.n	80008fa <__aeabi_fsub+0x1a6>
 800094a:	019b      	lsls	r3, r3, #6
 800094c:	0a5b      	lsrs	r3, r3, #9
 800094e:	e75a      	b.n	8000806 <__aeabi_fsub+0xb2>
 8000950:	2e00      	cmp	r6, #0
 8000952:	d141      	bne.n	80009d8 <__aeabi_fsub+0x284>
 8000954:	1c65      	adds	r5, r4, #1
 8000956:	b2e9      	uxtb	r1, r5
 8000958:	2901      	cmp	r1, #1
 800095a:	dd45      	ble.n	80009e8 <__aeabi_fsub+0x294>
 800095c:	2dff      	cmp	r5, #255	; 0xff
 800095e:	d100      	bne.n	8000962 <__aeabi_fsub+0x20e>
 8000960:	e74f      	b.n	8000802 <__aeabi_fsub+0xae>
 8000962:	2407      	movs	r4, #7
 8000964:	444b      	add	r3, r9
 8000966:	085b      	lsrs	r3, r3, #1
 8000968:	401c      	ands	r4, r3
 800096a:	e738      	b.n	80007de <__aeabi_fsub+0x8a>
 800096c:	2207      	movs	r2, #7
 800096e:	4b5a      	ldr	r3, [pc, #360]	; (8000ad8 <__aeabi_fsub+0x384>)
 8000970:	1a2d      	subs	r5, r5, r0
 8000972:	4023      	ands	r3, r4
 8000974:	4014      	ands	r4, r2
 8000976:	e732      	b.n	80007de <__aeabi_fsub+0x8a>
 8000978:	2c00      	cmp	r4, #0
 800097a:	d11d      	bne.n	80009b8 <__aeabi_fsub+0x264>
 800097c:	2b00      	cmp	r3, #0
 800097e:	d17a      	bne.n	8000a76 <__aeabi_fsub+0x322>
 8000980:	464b      	mov	r3, r9
 8000982:	2b00      	cmp	r3, #0
 8000984:	d100      	bne.n	8000988 <__aeabi_fsub+0x234>
 8000986:	e091      	b.n	8000aac <__aeabi_fsub+0x358>
 8000988:	000a      	movs	r2, r1
 800098a:	2500      	movs	r5, #0
 800098c:	e7b5      	b.n	80008fa <__aeabi_fsub+0x1a6>
 800098e:	3e01      	subs	r6, #1
 8000990:	2e00      	cmp	r6, #0
 8000992:	d119      	bne.n	80009c8 <__aeabi_fsub+0x274>
 8000994:	444b      	add	r3, r9
 8000996:	e76c      	b.n	8000872 <__aeabi_fsub+0x11e>
 8000998:	2cff      	cmp	r4, #255	; 0xff
 800099a:	d184      	bne.n	80008a6 <__aeabi_fsub+0x152>
 800099c:	25ff      	movs	r5, #255	; 0xff
 800099e:	e7ac      	b.n	80008fa <__aeabi_fsub+0x1a6>
 80009a0:	464a      	mov	r2, r9
 80009a2:	4688      	mov	r8, r1
 80009a4:	1ad4      	subs	r4, r2, r3
 80009a6:	e705      	b.n	80007b4 <__aeabi_fsub+0x60>
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d1c5      	bne.n	8000938 <__aeabi_fsub+0x1e4>
 80009ac:	000a      	movs	r2, r1
 80009ae:	28ff      	cmp	r0, #255	; 0xff
 80009b0:	d0c8      	beq.n	8000944 <__aeabi_fsub+0x1f0>
 80009b2:	0005      	movs	r5, r0
 80009b4:	464b      	mov	r3, r9
 80009b6:	e7a0      	b.n	80008fa <__aeabi_fsub+0x1a6>
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d149      	bne.n	8000a50 <__aeabi_fsub+0x2fc>
 80009bc:	464b      	mov	r3, r9
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d077      	beq.n	8000ab2 <__aeabi_fsub+0x35e>
 80009c2:	000a      	movs	r2, r1
 80009c4:	25ff      	movs	r5, #255	; 0xff
 80009c6:	e798      	b.n	80008fa <__aeabi_fsub+0x1a6>
 80009c8:	2cff      	cmp	r4, #255	; 0xff
 80009ca:	d000      	beq.n	80009ce <__aeabi_fsub+0x27a>
 80009cc:	e743      	b.n	8000856 <__aeabi_fsub+0x102>
 80009ce:	e787      	b.n	80008e0 <__aeabi_fsub+0x18c>
 80009d0:	000a      	movs	r2, r1
 80009d2:	24ff      	movs	r4, #255	; 0xff
 80009d4:	2300      	movs	r3, #0
 80009d6:	e716      	b.n	8000806 <__aeabi_fsub+0xb2>
 80009d8:	2c00      	cmp	r4, #0
 80009da:	d115      	bne.n	8000a08 <__aeabi_fsub+0x2b4>
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d157      	bne.n	8000a90 <__aeabi_fsub+0x33c>
 80009e0:	28ff      	cmp	r0, #255	; 0xff
 80009e2:	d1e6      	bne.n	80009b2 <__aeabi_fsub+0x25e>
 80009e4:	464b      	mov	r3, r9
 80009e6:	e77b      	b.n	80008e0 <__aeabi_fsub+0x18c>
 80009e8:	2c00      	cmp	r4, #0
 80009ea:	d120      	bne.n	8000a2e <__aeabi_fsub+0x2da>
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d057      	beq.n	8000aa0 <__aeabi_fsub+0x34c>
 80009f0:	4649      	mov	r1, r9
 80009f2:	2900      	cmp	r1, #0
 80009f4:	d053      	beq.n	8000a9e <__aeabi_fsub+0x34a>
 80009f6:	444b      	add	r3, r9
 80009f8:	015a      	lsls	r2, r3, #5
 80009fa:	d568      	bpl.n	8000ace <__aeabi_fsub+0x37a>
 80009fc:	2407      	movs	r4, #7
 80009fe:	4a36      	ldr	r2, [pc, #216]	; (8000ad8 <__aeabi_fsub+0x384>)
 8000a00:	401c      	ands	r4, r3
 8000a02:	2501      	movs	r5, #1
 8000a04:	4013      	ands	r3, r2
 8000a06:	e6ea      	b.n	80007de <__aeabi_fsub+0x8a>
 8000a08:	28ff      	cmp	r0, #255	; 0xff
 8000a0a:	d0eb      	beq.n	80009e4 <__aeabi_fsub+0x290>
 8000a0c:	2280      	movs	r2, #128	; 0x80
 8000a0e:	04d2      	lsls	r2, r2, #19
 8000a10:	4276      	negs	r6, r6
 8000a12:	4313      	orrs	r3, r2
 8000a14:	2e1b      	cmp	r6, #27
 8000a16:	dc53      	bgt.n	8000ac0 <__aeabi_fsub+0x36c>
 8000a18:	2520      	movs	r5, #32
 8000a1a:	1bad      	subs	r5, r5, r6
 8000a1c:	001a      	movs	r2, r3
 8000a1e:	40ab      	lsls	r3, r5
 8000a20:	40f2      	lsrs	r2, r6
 8000a22:	1e5c      	subs	r4, r3, #1
 8000a24:	41a3      	sbcs	r3, r4
 8000a26:	4313      	orrs	r3, r2
 8000a28:	444b      	add	r3, r9
 8000a2a:	0005      	movs	r5, r0
 8000a2c:	e721      	b.n	8000872 <__aeabi_fsub+0x11e>
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d0d8      	beq.n	80009e4 <__aeabi_fsub+0x290>
 8000a32:	4649      	mov	r1, r9
 8000a34:	2900      	cmp	r1, #0
 8000a36:	d100      	bne.n	8000a3a <__aeabi_fsub+0x2e6>
 8000a38:	e752      	b.n	80008e0 <__aeabi_fsub+0x18c>
 8000a3a:	2180      	movs	r1, #128	; 0x80
 8000a3c:	03c9      	lsls	r1, r1, #15
 8000a3e:	420f      	tst	r7, r1
 8000a40:	d100      	bne.n	8000a44 <__aeabi_fsub+0x2f0>
 8000a42:	e74d      	b.n	80008e0 <__aeabi_fsub+0x18c>
 8000a44:	4660      	mov	r0, ip
 8000a46:	4208      	tst	r0, r1
 8000a48:	d000      	beq.n	8000a4c <__aeabi_fsub+0x2f8>
 8000a4a:	e749      	b.n	80008e0 <__aeabi_fsub+0x18c>
 8000a4c:	464b      	mov	r3, r9
 8000a4e:	e747      	b.n	80008e0 <__aeabi_fsub+0x18c>
 8000a50:	4648      	mov	r0, r9
 8000a52:	25ff      	movs	r5, #255	; 0xff
 8000a54:	2800      	cmp	r0, #0
 8000a56:	d100      	bne.n	8000a5a <__aeabi_fsub+0x306>
 8000a58:	e74f      	b.n	80008fa <__aeabi_fsub+0x1a6>
 8000a5a:	2280      	movs	r2, #128	; 0x80
 8000a5c:	03d2      	lsls	r2, r2, #15
 8000a5e:	4217      	tst	r7, r2
 8000a60:	d004      	beq.n	8000a6c <__aeabi_fsub+0x318>
 8000a62:	4660      	mov	r0, ip
 8000a64:	4210      	tst	r0, r2
 8000a66:	d101      	bne.n	8000a6c <__aeabi_fsub+0x318>
 8000a68:	464b      	mov	r3, r9
 8000a6a:	4688      	mov	r8, r1
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	4641      	mov	r1, r8
 8000a70:	25ff      	movs	r5, #255	; 0xff
 8000a72:	400a      	ands	r2, r1
 8000a74:	e741      	b.n	80008fa <__aeabi_fsub+0x1a6>
 8000a76:	4648      	mov	r0, r9
 8000a78:	2800      	cmp	r0, #0
 8000a7a:	d01f      	beq.n	8000abc <__aeabi_fsub+0x368>
 8000a7c:	1a1a      	subs	r2, r3, r0
 8000a7e:	0150      	lsls	r0, r2, #5
 8000a80:	d520      	bpl.n	8000ac4 <__aeabi_fsub+0x370>
 8000a82:	464a      	mov	r2, r9
 8000a84:	2407      	movs	r4, #7
 8000a86:	1ad3      	subs	r3, r2, r3
 8000a88:	401c      	ands	r4, r3
 8000a8a:	4688      	mov	r8, r1
 8000a8c:	2500      	movs	r5, #0
 8000a8e:	e6a6      	b.n	80007de <__aeabi_fsub+0x8a>
 8000a90:	1c74      	adds	r4, r6, #1
 8000a92:	d0c9      	beq.n	8000a28 <__aeabi_fsub+0x2d4>
 8000a94:	43f6      	mvns	r6, r6
 8000a96:	28ff      	cmp	r0, #255	; 0xff
 8000a98:	d1bc      	bne.n	8000a14 <__aeabi_fsub+0x2c0>
 8000a9a:	464b      	mov	r3, r9
 8000a9c:	e720      	b.n	80008e0 <__aeabi_fsub+0x18c>
 8000a9e:	4699      	mov	r9, r3
 8000aa0:	464b      	mov	r3, r9
 8000aa2:	2500      	movs	r5, #0
 8000aa4:	08db      	lsrs	r3, r3, #3
 8000aa6:	e72b      	b.n	8000900 <__aeabi_fsub+0x1ac>
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	e740      	b.n	800092e <__aeabi_fsub+0x1da>
 8000aac:	2200      	movs	r2, #0
 8000aae:	2300      	movs	r3, #0
 8000ab0:	e6a9      	b.n	8000806 <__aeabi_fsub+0xb2>
 8000ab2:	2380      	movs	r3, #128	; 0x80
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	03db      	lsls	r3, r3, #15
 8000ab8:	24ff      	movs	r4, #255	; 0xff
 8000aba:	e6a4      	b.n	8000806 <__aeabi_fsub+0xb2>
 8000abc:	2500      	movs	r5, #0
 8000abe:	e71c      	b.n	80008fa <__aeabi_fsub+0x1a6>
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	e7b1      	b.n	8000a28 <__aeabi_fsub+0x2d4>
 8000ac4:	2a00      	cmp	r2, #0
 8000ac6:	d0f1      	beq.n	8000aac <__aeabi_fsub+0x358>
 8000ac8:	0013      	movs	r3, r2
 8000aca:	2500      	movs	r5, #0
 8000acc:	e6fc      	b.n	80008c8 <__aeabi_fsub+0x174>
 8000ace:	2500      	movs	r5, #0
 8000ad0:	e6fa      	b.n	80008c8 <__aeabi_fsub+0x174>
 8000ad2:	46c0      	nop			; (mov r8, r8)
 8000ad4:	7dffffff 	.word	0x7dffffff
 8000ad8:	fbffffff 	.word	0xfbffffff

08000adc <__aeabi_ui2f>:
 8000adc:	b570      	push	{r4, r5, r6, lr}
 8000ade:	1e04      	subs	r4, r0, #0
 8000ae0:	d034      	beq.n	8000b4c <__aeabi_ui2f+0x70>
 8000ae2:	f001 fe0f 	bl	8002704 <__clzsi2>
 8000ae6:	229e      	movs	r2, #158	; 0x9e
 8000ae8:	1a12      	subs	r2, r2, r0
 8000aea:	2a96      	cmp	r2, #150	; 0x96
 8000aec:	dc07      	bgt.n	8000afe <__aeabi_ui2f+0x22>
 8000aee:	b2d2      	uxtb	r2, r2
 8000af0:	2808      	cmp	r0, #8
 8000af2:	dd2e      	ble.n	8000b52 <__aeabi_ui2f+0x76>
 8000af4:	3808      	subs	r0, #8
 8000af6:	4084      	lsls	r4, r0
 8000af8:	0260      	lsls	r0, r4, #9
 8000afa:	0a40      	lsrs	r0, r0, #9
 8000afc:	e021      	b.n	8000b42 <__aeabi_ui2f+0x66>
 8000afe:	2a99      	cmp	r2, #153	; 0x99
 8000b00:	dd09      	ble.n	8000b16 <__aeabi_ui2f+0x3a>
 8000b02:	0003      	movs	r3, r0
 8000b04:	0021      	movs	r1, r4
 8000b06:	331b      	adds	r3, #27
 8000b08:	4099      	lsls	r1, r3
 8000b0a:	1e4b      	subs	r3, r1, #1
 8000b0c:	4199      	sbcs	r1, r3
 8000b0e:	2305      	movs	r3, #5
 8000b10:	1a1b      	subs	r3, r3, r0
 8000b12:	40dc      	lsrs	r4, r3
 8000b14:	430c      	orrs	r4, r1
 8000b16:	2805      	cmp	r0, #5
 8000b18:	dd01      	ble.n	8000b1e <__aeabi_ui2f+0x42>
 8000b1a:	1f43      	subs	r3, r0, #5
 8000b1c:	409c      	lsls	r4, r3
 8000b1e:	0023      	movs	r3, r4
 8000b20:	490d      	ldr	r1, [pc, #52]	; (8000b58 <__aeabi_ui2f+0x7c>)
 8000b22:	400b      	ands	r3, r1
 8000b24:	0765      	lsls	r5, r4, #29
 8000b26:	d009      	beq.n	8000b3c <__aeabi_ui2f+0x60>
 8000b28:	250f      	movs	r5, #15
 8000b2a:	402c      	ands	r4, r5
 8000b2c:	2c04      	cmp	r4, #4
 8000b2e:	d005      	beq.n	8000b3c <__aeabi_ui2f+0x60>
 8000b30:	3304      	adds	r3, #4
 8000b32:	015c      	lsls	r4, r3, #5
 8000b34:	d502      	bpl.n	8000b3c <__aeabi_ui2f+0x60>
 8000b36:	229f      	movs	r2, #159	; 0x9f
 8000b38:	400b      	ands	r3, r1
 8000b3a:	1a12      	subs	r2, r2, r0
 8000b3c:	019b      	lsls	r3, r3, #6
 8000b3e:	0a58      	lsrs	r0, r3, #9
 8000b40:	b2d2      	uxtb	r2, r2
 8000b42:	0240      	lsls	r0, r0, #9
 8000b44:	05d2      	lsls	r2, r2, #23
 8000b46:	0a40      	lsrs	r0, r0, #9
 8000b48:	4310      	orrs	r0, r2
 8000b4a:	bd70      	pop	{r4, r5, r6, pc}
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	2000      	movs	r0, #0
 8000b50:	e7f7      	b.n	8000b42 <__aeabi_ui2f+0x66>
 8000b52:	0260      	lsls	r0, r4, #9
 8000b54:	0a40      	lsrs	r0, r0, #9
 8000b56:	e7f4      	b.n	8000b42 <__aeabi_ui2f+0x66>
 8000b58:	fbffffff 	.word	0xfbffffff

08000b5c <__aeabi_dadd>:
 8000b5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b5e:	464f      	mov	r7, r9
 8000b60:	4646      	mov	r6, r8
 8000b62:	46d6      	mov	lr, sl
 8000b64:	000c      	movs	r4, r1
 8000b66:	0309      	lsls	r1, r1, #12
 8000b68:	b5c0      	push	{r6, r7, lr}
 8000b6a:	0a49      	lsrs	r1, r1, #9
 8000b6c:	0f47      	lsrs	r7, r0, #29
 8000b6e:	005e      	lsls	r6, r3, #1
 8000b70:	4339      	orrs	r1, r7
 8000b72:	031f      	lsls	r7, r3, #12
 8000b74:	0fdb      	lsrs	r3, r3, #31
 8000b76:	469c      	mov	ip, r3
 8000b78:	0065      	lsls	r5, r4, #1
 8000b7a:	0a7b      	lsrs	r3, r7, #9
 8000b7c:	0f57      	lsrs	r7, r2, #29
 8000b7e:	431f      	orrs	r7, r3
 8000b80:	0d6d      	lsrs	r5, r5, #21
 8000b82:	0fe4      	lsrs	r4, r4, #31
 8000b84:	0d76      	lsrs	r6, r6, #21
 8000b86:	46a1      	mov	r9, r4
 8000b88:	00c0      	lsls	r0, r0, #3
 8000b8a:	46b8      	mov	r8, r7
 8000b8c:	00d2      	lsls	r2, r2, #3
 8000b8e:	1bab      	subs	r3, r5, r6
 8000b90:	4564      	cmp	r4, ip
 8000b92:	d07b      	beq.n	8000c8c <__aeabi_dadd+0x130>
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	dd5f      	ble.n	8000c58 <__aeabi_dadd+0xfc>
 8000b98:	2e00      	cmp	r6, #0
 8000b9a:	d000      	beq.n	8000b9e <__aeabi_dadd+0x42>
 8000b9c:	e0a4      	b.n	8000ce8 <__aeabi_dadd+0x18c>
 8000b9e:	003e      	movs	r6, r7
 8000ba0:	4316      	orrs	r6, r2
 8000ba2:	d100      	bne.n	8000ba6 <__aeabi_dadd+0x4a>
 8000ba4:	e112      	b.n	8000dcc <__aeabi_dadd+0x270>
 8000ba6:	1e5e      	subs	r6, r3, #1
 8000ba8:	2e00      	cmp	r6, #0
 8000baa:	d000      	beq.n	8000bae <__aeabi_dadd+0x52>
 8000bac:	e19e      	b.n	8000eec <__aeabi_dadd+0x390>
 8000bae:	1a87      	subs	r7, r0, r2
 8000bb0:	4643      	mov	r3, r8
 8000bb2:	42b8      	cmp	r0, r7
 8000bb4:	4180      	sbcs	r0, r0
 8000bb6:	2501      	movs	r5, #1
 8000bb8:	1ac9      	subs	r1, r1, r3
 8000bba:	4240      	negs	r0, r0
 8000bbc:	1a09      	subs	r1, r1, r0
 8000bbe:	020b      	lsls	r3, r1, #8
 8000bc0:	d400      	bmi.n	8000bc4 <__aeabi_dadd+0x68>
 8000bc2:	e131      	b.n	8000e28 <__aeabi_dadd+0x2cc>
 8000bc4:	0249      	lsls	r1, r1, #9
 8000bc6:	0a4e      	lsrs	r6, r1, #9
 8000bc8:	2e00      	cmp	r6, #0
 8000bca:	d100      	bne.n	8000bce <__aeabi_dadd+0x72>
 8000bcc:	e16e      	b.n	8000eac <__aeabi_dadd+0x350>
 8000bce:	0030      	movs	r0, r6
 8000bd0:	f001 fd98 	bl	8002704 <__clzsi2>
 8000bd4:	0003      	movs	r3, r0
 8000bd6:	3b08      	subs	r3, #8
 8000bd8:	2b1f      	cmp	r3, #31
 8000bda:	dd00      	ble.n	8000bde <__aeabi_dadd+0x82>
 8000bdc:	e161      	b.n	8000ea2 <__aeabi_dadd+0x346>
 8000bde:	2220      	movs	r2, #32
 8000be0:	0039      	movs	r1, r7
 8000be2:	1ad2      	subs	r2, r2, r3
 8000be4:	409e      	lsls	r6, r3
 8000be6:	40d1      	lsrs	r1, r2
 8000be8:	409f      	lsls	r7, r3
 8000bea:	430e      	orrs	r6, r1
 8000bec:	429d      	cmp	r5, r3
 8000bee:	dd00      	ble.n	8000bf2 <__aeabi_dadd+0x96>
 8000bf0:	e151      	b.n	8000e96 <__aeabi_dadd+0x33a>
 8000bf2:	1b5d      	subs	r5, r3, r5
 8000bf4:	1c6b      	adds	r3, r5, #1
 8000bf6:	2b1f      	cmp	r3, #31
 8000bf8:	dd00      	ble.n	8000bfc <__aeabi_dadd+0xa0>
 8000bfa:	e17c      	b.n	8000ef6 <__aeabi_dadd+0x39a>
 8000bfc:	2120      	movs	r1, #32
 8000bfe:	1ac9      	subs	r1, r1, r3
 8000c00:	003d      	movs	r5, r7
 8000c02:	0030      	movs	r0, r6
 8000c04:	408f      	lsls	r7, r1
 8000c06:	4088      	lsls	r0, r1
 8000c08:	40dd      	lsrs	r5, r3
 8000c0a:	1e79      	subs	r1, r7, #1
 8000c0c:	418f      	sbcs	r7, r1
 8000c0e:	0031      	movs	r1, r6
 8000c10:	2207      	movs	r2, #7
 8000c12:	4328      	orrs	r0, r5
 8000c14:	40d9      	lsrs	r1, r3
 8000c16:	2500      	movs	r5, #0
 8000c18:	4307      	orrs	r7, r0
 8000c1a:	403a      	ands	r2, r7
 8000c1c:	2a00      	cmp	r2, #0
 8000c1e:	d009      	beq.n	8000c34 <__aeabi_dadd+0xd8>
 8000c20:	230f      	movs	r3, #15
 8000c22:	403b      	ands	r3, r7
 8000c24:	2b04      	cmp	r3, #4
 8000c26:	d005      	beq.n	8000c34 <__aeabi_dadd+0xd8>
 8000c28:	1d3b      	adds	r3, r7, #4
 8000c2a:	42bb      	cmp	r3, r7
 8000c2c:	41bf      	sbcs	r7, r7
 8000c2e:	427f      	negs	r7, r7
 8000c30:	19c9      	adds	r1, r1, r7
 8000c32:	001f      	movs	r7, r3
 8000c34:	020b      	lsls	r3, r1, #8
 8000c36:	d400      	bmi.n	8000c3a <__aeabi_dadd+0xde>
 8000c38:	e226      	b.n	8001088 <__aeabi_dadd+0x52c>
 8000c3a:	1c6a      	adds	r2, r5, #1
 8000c3c:	4bc6      	ldr	r3, [pc, #792]	; (8000f58 <__aeabi_dadd+0x3fc>)
 8000c3e:	0555      	lsls	r5, r2, #21
 8000c40:	0d6d      	lsrs	r5, r5, #21
 8000c42:	429a      	cmp	r2, r3
 8000c44:	d100      	bne.n	8000c48 <__aeabi_dadd+0xec>
 8000c46:	e106      	b.n	8000e56 <__aeabi_dadd+0x2fa>
 8000c48:	4ac4      	ldr	r2, [pc, #784]	; (8000f5c <__aeabi_dadd+0x400>)
 8000c4a:	08ff      	lsrs	r7, r7, #3
 8000c4c:	400a      	ands	r2, r1
 8000c4e:	0753      	lsls	r3, r2, #29
 8000c50:	0252      	lsls	r2, r2, #9
 8000c52:	433b      	orrs	r3, r7
 8000c54:	0b12      	lsrs	r2, r2, #12
 8000c56:	e08e      	b.n	8000d76 <__aeabi_dadd+0x21a>
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d000      	beq.n	8000c5e <__aeabi_dadd+0x102>
 8000c5c:	e0b8      	b.n	8000dd0 <__aeabi_dadd+0x274>
 8000c5e:	1c6b      	adds	r3, r5, #1
 8000c60:	055b      	lsls	r3, r3, #21
 8000c62:	0d5b      	lsrs	r3, r3, #21
 8000c64:	2b01      	cmp	r3, #1
 8000c66:	dc00      	bgt.n	8000c6a <__aeabi_dadd+0x10e>
 8000c68:	e130      	b.n	8000ecc <__aeabi_dadd+0x370>
 8000c6a:	1a87      	subs	r7, r0, r2
 8000c6c:	4643      	mov	r3, r8
 8000c6e:	42b8      	cmp	r0, r7
 8000c70:	41b6      	sbcs	r6, r6
 8000c72:	1acb      	subs	r3, r1, r3
 8000c74:	4276      	negs	r6, r6
 8000c76:	1b9e      	subs	r6, r3, r6
 8000c78:	0233      	lsls	r3, r6, #8
 8000c7a:	d500      	bpl.n	8000c7e <__aeabi_dadd+0x122>
 8000c7c:	e14c      	b.n	8000f18 <__aeabi_dadd+0x3bc>
 8000c7e:	003b      	movs	r3, r7
 8000c80:	4333      	orrs	r3, r6
 8000c82:	d1a1      	bne.n	8000bc8 <__aeabi_dadd+0x6c>
 8000c84:	2200      	movs	r2, #0
 8000c86:	2400      	movs	r4, #0
 8000c88:	2500      	movs	r5, #0
 8000c8a:	e070      	b.n	8000d6e <__aeabi_dadd+0x212>
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	dc00      	bgt.n	8000c92 <__aeabi_dadd+0x136>
 8000c90:	e0e5      	b.n	8000e5e <__aeabi_dadd+0x302>
 8000c92:	2e00      	cmp	r6, #0
 8000c94:	d100      	bne.n	8000c98 <__aeabi_dadd+0x13c>
 8000c96:	e083      	b.n	8000da0 <__aeabi_dadd+0x244>
 8000c98:	4eaf      	ldr	r6, [pc, #700]	; (8000f58 <__aeabi_dadd+0x3fc>)
 8000c9a:	42b5      	cmp	r5, r6
 8000c9c:	d060      	beq.n	8000d60 <__aeabi_dadd+0x204>
 8000c9e:	2680      	movs	r6, #128	; 0x80
 8000ca0:	0436      	lsls	r6, r6, #16
 8000ca2:	4337      	orrs	r7, r6
 8000ca4:	46b8      	mov	r8, r7
 8000ca6:	2b38      	cmp	r3, #56	; 0x38
 8000ca8:	dc00      	bgt.n	8000cac <__aeabi_dadd+0x150>
 8000caa:	e13e      	b.n	8000f2a <__aeabi_dadd+0x3ce>
 8000cac:	4643      	mov	r3, r8
 8000cae:	4313      	orrs	r3, r2
 8000cb0:	001f      	movs	r7, r3
 8000cb2:	1e7a      	subs	r2, r7, #1
 8000cb4:	4197      	sbcs	r7, r2
 8000cb6:	183f      	adds	r7, r7, r0
 8000cb8:	4287      	cmp	r7, r0
 8000cba:	4180      	sbcs	r0, r0
 8000cbc:	4240      	negs	r0, r0
 8000cbe:	1809      	adds	r1, r1, r0
 8000cc0:	020b      	lsls	r3, r1, #8
 8000cc2:	d400      	bmi.n	8000cc6 <__aeabi_dadd+0x16a>
 8000cc4:	e0b0      	b.n	8000e28 <__aeabi_dadd+0x2cc>
 8000cc6:	4ba4      	ldr	r3, [pc, #656]	; (8000f58 <__aeabi_dadd+0x3fc>)
 8000cc8:	3501      	adds	r5, #1
 8000cca:	429d      	cmp	r5, r3
 8000ccc:	d100      	bne.n	8000cd0 <__aeabi_dadd+0x174>
 8000cce:	e0c3      	b.n	8000e58 <__aeabi_dadd+0x2fc>
 8000cd0:	4aa2      	ldr	r2, [pc, #648]	; (8000f5c <__aeabi_dadd+0x400>)
 8000cd2:	087b      	lsrs	r3, r7, #1
 8000cd4:	400a      	ands	r2, r1
 8000cd6:	2101      	movs	r1, #1
 8000cd8:	400f      	ands	r7, r1
 8000cda:	431f      	orrs	r7, r3
 8000cdc:	0851      	lsrs	r1, r2, #1
 8000cde:	07d3      	lsls	r3, r2, #31
 8000ce0:	2207      	movs	r2, #7
 8000ce2:	431f      	orrs	r7, r3
 8000ce4:	403a      	ands	r2, r7
 8000ce6:	e799      	b.n	8000c1c <__aeabi_dadd+0xc0>
 8000ce8:	4e9b      	ldr	r6, [pc, #620]	; (8000f58 <__aeabi_dadd+0x3fc>)
 8000cea:	42b5      	cmp	r5, r6
 8000cec:	d038      	beq.n	8000d60 <__aeabi_dadd+0x204>
 8000cee:	2680      	movs	r6, #128	; 0x80
 8000cf0:	0436      	lsls	r6, r6, #16
 8000cf2:	4337      	orrs	r7, r6
 8000cf4:	46b8      	mov	r8, r7
 8000cf6:	2b38      	cmp	r3, #56	; 0x38
 8000cf8:	dd00      	ble.n	8000cfc <__aeabi_dadd+0x1a0>
 8000cfa:	e0dc      	b.n	8000eb6 <__aeabi_dadd+0x35a>
 8000cfc:	2b1f      	cmp	r3, #31
 8000cfe:	dc00      	bgt.n	8000d02 <__aeabi_dadd+0x1a6>
 8000d00:	e130      	b.n	8000f64 <__aeabi_dadd+0x408>
 8000d02:	001e      	movs	r6, r3
 8000d04:	4647      	mov	r7, r8
 8000d06:	3e20      	subs	r6, #32
 8000d08:	40f7      	lsrs	r7, r6
 8000d0a:	46bc      	mov	ip, r7
 8000d0c:	2b20      	cmp	r3, #32
 8000d0e:	d004      	beq.n	8000d1a <__aeabi_dadd+0x1be>
 8000d10:	2640      	movs	r6, #64	; 0x40
 8000d12:	1af3      	subs	r3, r6, r3
 8000d14:	4646      	mov	r6, r8
 8000d16:	409e      	lsls	r6, r3
 8000d18:	4332      	orrs	r2, r6
 8000d1a:	0017      	movs	r7, r2
 8000d1c:	4663      	mov	r3, ip
 8000d1e:	1e7a      	subs	r2, r7, #1
 8000d20:	4197      	sbcs	r7, r2
 8000d22:	431f      	orrs	r7, r3
 8000d24:	e0cc      	b.n	8000ec0 <__aeabi_dadd+0x364>
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d100      	bne.n	8000d2c <__aeabi_dadd+0x1d0>
 8000d2a:	e204      	b.n	8001136 <__aeabi_dadd+0x5da>
 8000d2c:	4643      	mov	r3, r8
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	d100      	bne.n	8000d34 <__aeabi_dadd+0x1d8>
 8000d32:	e159      	b.n	8000fe8 <__aeabi_dadd+0x48c>
 8000d34:	074b      	lsls	r3, r1, #29
 8000d36:	08c0      	lsrs	r0, r0, #3
 8000d38:	4318      	orrs	r0, r3
 8000d3a:	2380      	movs	r3, #128	; 0x80
 8000d3c:	08c9      	lsrs	r1, r1, #3
 8000d3e:	031b      	lsls	r3, r3, #12
 8000d40:	4219      	tst	r1, r3
 8000d42:	d008      	beq.n	8000d56 <__aeabi_dadd+0x1fa>
 8000d44:	4645      	mov	r5, r8
 8000d46:	08ed      	lsrs	r5, r5, #3
 8000d48:	421d      	tst	r5, r3
 8000d4a:	d104      	bne.n	8000d56 <__aeabi_dadd+0x1fa>
 8000d4c:	4643      	mov	r3, r8
 8000d4e:	08d0      	lsrs	r0, r2, #3
 8000d50:	0759      	lsls	r1, r3, #29
 8000d52:	4308      	orrs	r0, r1
 8000d54:	0029      	movs	r1, r5
 8000d56:	0f42      	lsrs	r2, r0, #29
 8000d58:	00c9      	lsls	r1, r1, #3
 8000d5a:	4d7f      	ldr	r5, [pc, #508]	; (8000f58 <__aeabi_dadd+0x3fc>)
 8000d5c:	4311      	orrs	r1, r2
 8000d5e:	00c0      	lsls	r0, r0, #3
 8000d60:	074b      	lsls	r3, r1, #29
 8000d62:	08ca      	lsrs	r2, r1, #3
 8000d64:	497c      	ldr	r1, [pc, #496]	; (8000f58 <__aeabi_dadd+0x3fc>)
 8000d66:	08c0      	lsrs	r0, r0, #3
 8000d68:	4303      	orrs	r3, r0
 8000d6a:	428d      	cmp	r5, r1
 8000d6c:	d068      	beq.n	8000e40 <__aeabi_dadd+0x2e4>
 8000d6e:	0312      	lsls	r2, r2, #12
 8000d70:	056d      	lsls	r5, r5, #21
 8000d72:	0b12      	lsrs	r2, r2, #12
 8000d74:	0d6d      	lsrs	r5, r5, #21
 8000d76:	2100      	movs	r1, #0
 8000d78:	0312      	lsls	r2, r2, #12
 8000d7a:	0018      	movs	r0, r3
 8000d7c:	0b13      	lsrs	r3, r2, #12
 8000d7e:	0d0a      	lsrs	r2, r1, #20
 8000d80:	0512      	lsls	r2, r2, #20
 8000d82:	431a      	orrs	r2, r3
 8000d84:	4b76      	ldr	r3, [pc, #472]	; (8000f60 <__aeabi_dadd+0x404>)
 8000d86:	052d      	lsls	r5, r5, #20
 8000d88:	4013      	ands	r3, r2
 8000d8a:	432b      	orrs	r3, r5
 8000d8c:	005b      	lsls	r3, r3, #1
 8000d8e:	07e4      	lsls	r4, r4, #31
 8000d90:	085b      	lsrs	r3, r3, #1
 8000d92:	4323      	orrs	r3, r4
 8000d94:	0019      	movs	r1, r3
 8000d96:	bc1c      	pop	{r2, r3, r4}
 8000d98:	4690      	mov	r8, r2
 8000d9a:	4699      	mov	r9, r3
 8000d9c:	46a2      	mov	sl, r4
 8000d9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000da0:	003e      	movs	r6, r7
 8000da2:	4316      	orrs	r6, r2
 8000da4:	d012      	beq.n	8000dcc <__aeabi_dadd+0x270>
 8000da6:	1e5e      	subs	r6, r3, #1
 8000da8:	2e00      	cmp	r6, #0
 8000daa:	d000      	beq.n	8000dae <__aeabi_dadd+0x252>
 8000dac:	e100      	b.n	8000fb0 <__aeabi_dadd+0x454>
 8000dae:	1887      	adds	r7, r0, r2
 8000db0:	4287      	cmp	r7, r0
 8000db2:	4180      	sbcs	r0, r0
 8000db4:	4441      	add	r1, r8
 8000db6:	4240      	negs	r0, r0
 8000db8:	1809      	adds	r1, r1, r0
 8000dba:	2501      	movs	r5, #1
 8000dbc:	020b      	lsls	r3, r1, #8
 8000dbe:	d533      	bpl.n	8000e28 <__aeabi_dadd+0x2cc>
 8000dc0:	2502      	movs	r5, #2
 8000dc2:	e785      	b.n	8000cd0 <__aeabi_dadd+0x174>
 8000dc4:	4664      	mov	r4, ip
 8000dc6:	0033      	movs	r3, r6
 8000dc8:	4641      	mov	r1, r8
 8000dca:	0010      	movs	r0, r2
 8000dcc:	001d      	movs	r5, r3
 8000dce:	e7c7      	b.n	8000d60 <__aeabi_dadd+0x204>
 8000dd0:	2d00      	cmp	r5, #0
 8000dd2:	d000      	beq.n	8000dd6 <__aeabi_dadd+0x27a>
 8000dd4:	e0da      	b.n	8000f8c <__aeabi_dadd+0x430>
 8000dd6:	000c      	movs	r4, r1
 8000dd8:	4304      	orrs	r4, r0
 8000dda:	d0f3      	beq.n	8000dc4 <__aeabi_dadd+0x268>
 8000ddc:	1c5c      	adds	r4, r3, #1
 8000dde:	d100      	bne.n	8000de2 <__aeabi_dadd+0x286>
 8000de0:	e19f      	b.n	8001122 <__aeabi_dadd+0x5c6>
 8000de2:	4c5d      	ldr	r4, [pc, #372]	; (8000f58 <__aeabi_dadd+0x3fc>)
 8000de4:	42a6      	cmp	r6, r4
 8000de6:	d100      	bne.n	8000dea <__aeabi_dadd+0x28e>
 8000de8:	e12f      	b.n	800104a <__aeabi_dadd+0x4ee>
 8000dea:	43db      	mvns	r3, r3
 8000dec:	2b38      	cmp	r3, #56	; 0x38
 8000dee:	dd00      	ble.n	8000df2 <__aeabi_dadd+0x296>
 8000df0:	e166      	b.n	80010c0 <__aeabi_dadd+0x564>
 8000df2:	2b1f      	cmp	r3, #31
 8000df4:	dd00      	ble.n	8000df8 <__aeabi_dadd+0x29c>
 8000df6:	e183      	b.n	8001100 <__aeabi_dadd+0x5a4>
 8000df8:	2420      	movs	r4, #32
 8000dfa:	0005      	movs	r5, r0
 8000dfc:	1ae4      	subs	r4, r4, r3
 8000dfe:	000f      	movs	r7, r1
 8000e00:	40dd      	lsrs	r5, r3
 8000e02:	40d9      	lsrs	r1, r3
 8000e04:	40a0      	lsls	r0, r4
 8000e06:	4643      	mov	r3, r8
 8000e08:	40a7      	lsls	r7, r4
 8000e0a:	1a5b      	subs	r3, r3, r1
 8000e0c:	1e44      	subs	r4, r0, #1
 8000e0e:	41a0      	sbcs	r0, r4
 8000e10:	4698      	mov	r8, r3
 8000e12:	432f      	orrs	r7, r5
 8000e14:	4338      	orrs	r0, r7
 8000e16:	1a17      	subs	r7, r2, r0
 8000e18:	42ba      	cmp	r2, r7
 8000e1a:	4192      	sbcs	r2, r2
 8000e1c:	4643      	mov	r3, r8
 8000e1e:	4252      	negs	r2, r2
 8000e20:	1a99      	subs	r1, r3, r2
 8000e22:	4664      	mov	r4, ip
 8000e24:	0035      	movs	r5, r6
 8000e26:	e6ca      	b.n	8000bbe <__aeabi_dadd+0x62>
 8000e28:	2207      	movs	r2, #7
 8000e2a:	403a      	ands	r2, r7
 8000e2c:	2a00      	cmp	r2, #0
 8000e2e:	d000      	beq.n	8000e32 <__aeabi_dadd+0x2d6>
 8000e30:	e6f6      	b.n	8000c20 <__aeabi_dadd+0xc4>
 8000e32:	074b      	lsls	r3, r1, #29
 8000e34:	08ca      	lsrs	r2, r1, #3
 8000e36:	4948      	ldr	r1, [pc, #288]	; (8000f58 <__aeabi_dadd+0x3fc>)
 8000e38:	08ff      	lsrs	r7, r7, #3
 8000e3a:	433b      	orrs	r3, r7
 8000e3c:	428d      	cmp	r5, r1
 8000e3e:	d196      	bne.n	8000d6e <__aeabi_dadd+0x212>
 8000e40:	0019      	movs	r1, r3
 8000e42:	4311      	orrs	r1, r2
 8000e44:	d100      	bne.n	8000e48 <__aeabi_dadd+0x2ec>
 8000e46:	e19e      	b.n	8001186 <__aeabi_dadd+0x62a>
 8000e48:	2180      	movs	r1, #128	; 0x80
 8000e4a:	0309      	lsls	r1, r1, #12
 8000e4c:	430a      	orrs	r2, r1
 8000e4e:	0312      	lsls	r2, r2, #12
 8000e50:	0b12      	lsrs	r2, r2, #12
 8000e52:	4d41      	ldr	r5, [pc, #260]	; (8000f58 <__aeabi_dadd+0x3fc>)
 8000e54:	e78f      	b.n	8000d76 <__aeabi_dadd+0x21a>
 8000e56:	0015      	movs	r5, r2
 8000e58:	2200      	movs	r2, #0
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	e78b      	b.n	8000d76 <__aeabi_dadd+0x21a>
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d000      	beq.n	8000e64 <__aeabi_dadd+0x308>
 8000e62:	e0c7      	b.n	8000ff4 <__aeabi_dadd+0x498>
 8000e64:	1c6b      	adds	r3, r5, #1
 8000e66:	055f      	lsls	r7, r3, #21
 8000e68:	0d7f      	lsrs	r7, r7, #21
 8000e6a:	2f01      	cmp	r7, #1
 8000e6c:	dc00      	bgt.n	8000e70 <__aeabi_dadd+0x314>
 8000e6e:	e0f1      	b.n	8001054 <__aeabi_dadd+0x4f8>
 8000e70:	4d39      	ldr	r5, [pc, #228]	; (8000f58 <__aeabi_dadd+0x3fc>)
 8000e72:	42ab      	cmp	r3, r5
 8000e74:	d100      	bne.n	8000e78 <__aeabi_dadd+0x31c>
 8000e76:	e0b9      	b.n	8000fec <__aeabi_dadd+0x490>
 8000e78:	1885      	adds	r5, r0, r2
 8000e7a:	000a      	movs	r2, r1
 8000e7c:	4285      	cmp	r5, r0
 8000e7e:	4189      	sbcs	r1, r1
 8000e80:	4442      	add	r2, r8
 8000e82:	4249      	negs	r1, r1
 8000e84:	1851      	adds	r1, r2, r1
 8000e86:	2207      	movs	r2, #7
 8000e88:	07cf      	lsls	r7, r1, #31
 8000e8a:	086d      	lsrs	r5, r5, #1
 8000e8c:	432f      	orrs	r7, r5
 8000e8e:	0849      	lsrs	r1, r1, #1
 8000e90:	403a      	ands	r2, r7
 8000e92:	001d      	movs	r5, r3
 8000e94:	e6c2      	b.n	8000c1c <__aeabi_dadd+0xc0>
 8000e96:	2207      	movs	r2, #7
 8000e98:	4930      	ldr	r1, [pc, #192]	; (8000f5c <__aeabi_dadd+0x400>)
 8000e9a:	1aed      	subs	r5, r5, r3
 8000e9c:	4031      	ands	r1, r6
 8000e9e:	403a      	ands	r2, r7
 8000ea0:	e6bc      	b.n	8000c1c <__aeabi_dadd+0xc0>
 8000ea2:	003e      	movs	r6, r7
 8000ea4:	3828      	subs	r0, #40	; 0x28
 8000ea6:	4086      	lsls	r6, r0
 8000ea8:	2700      	movs	r7, #0
 8000eaa:	e69f      	b.n	8000bec <__aeabi_dadd+0x90>
 8000eac:	0038      	movs	r0, r7
 8000eae:	f001 fc29 	bl	8002704 <__clzsi2>
 8000eb2:	3020      	adds	r0, #32
 8000eb4:	e68e      	b.n	8000bd4 <__aeabi_dadd+0x78>
 8000eb6:	4643      	mov	r3, r8
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	001f      	movs	r7, r3
 8000ebc:	1e7a      	subs	r2, r7, #1
 8000ebe:	4197      	sbcs	r7, r2
 8000ec0:	1bc7      	subs	r7, r0, r7
 8000ec2:	42b8      	cmp	r0, r7
 8000ec4:	4180      	sbcs	r0, r0
 8000ec6:	4240      	negs	r0, r0
 8000ec8:	1a09      	subs	r1, r1, r0
 8000eca:	e678      	b.n	8000bbe <__aeabi_dadd+0x62>
 8000ecc:	000e      	movs	r6, r1
 8000ece:	003b      	movs	r3, r7
 8000ed0:	4306      	orrs	r6, r0
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	2d00      	cmp	r5, #0
 8000ed6:	d161      	bne.n	8000f9c <__aeabi_dadd+0x440>
 8000ed8:	2e00      	cmp	r6, #0
 8000eda:	d000      	beq.n	8000ede <__aeabi_dadd+0x382>
 8000edc:	e0f4      	b.n	80010c8 <__aeabi_dadd+0x56c>
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d100      	bne.n	8000ee4 <__aeabi_dadd+0x388>
 8000ee2:	e11b      	b.n	800111c <__aeabi_dadd+0x5c0>
 8000ee4:	4664      	mov	r4, ip
 8000ee6:	0039      	movs	r1, r7
 8000ee8:	0010      	movs	r0, r2
 8000eea:	e739      	b.n	8000d60 <__aeabi_dadd+0x204>
 8000eec:	4f1a      	ldr	r7, [pc, #104]	; (8000f58 <__aeabi_dadd+0x3fc>)
 8000eee:	42bb      	cmp	r3, r7
 8000ef0:	d07a      	beq.n	8000fe8 <__aeabi_dadd+0x48c>
 8000ef2:	0033      	movs	r3, r6
 8000ef4:	e6ff      	b.n	8000cf6 <__aeabi_dadd+0x19a>
 8000ef6:	0030      	movs	r0, r6
 8000ef8:	3d1f      	subs	r5, #31
 8000efa:	40e8      	lsrs	r0, r5
 8000efc:	2b20      	cmp	r3, #32
 8000efe:	d003      	beq.n	8000f08 <__aeabi_dadd+0x3ac>
 8000f00:	2140      	movs	r1, #64	; 0x40
 8000f02:	1acb      	subs	r3, r1, r3
 8000f04:	409e      	lsls	r6, r3
 8000f06:	4337      	orrs	r7, r6
 8000f08:	1e7b      	subs	r3, r7, #1
 8000f0a:	419f      	sbcs	r7, r3
 8000f0c:	2207      	movs	r2, #7
 8000f0e:	4307      	orrs	r7, r0
 8000f10:	403a      	ands	r2, r7
 8000f12:	2100      	movs	r1, #0
 8000f14:	2500      	movs	r5, #0
 8000f16:	e789      	b.n	8000e2c <__aeabi_dadd+0x2d0>
 8000f18:	1a17      	subs	r7, r2, r0
 8000f1a:	4643      	mov	r3, r8
 8000f1c:	42ba      	cmp	r2, r7
 8000f1e:	41b6      	sbcs	r6, r6
 8000f20:	1a59      	subs	r1, r3, r1
 8000f22:	4276      	negs	r6, r6
 8000f24:	1b8e      	subs	r6, r1, r6
 8000f26:	4664      	mov	r4, ip
 8000f28:	e64e      	b.n	8000bc8 <__aeabi_dadd+0x6c>
 8000f2a:	2b1f      	cmp	r3, #31
 8000f2c:	dd00      	ble.n	8000f30 <__aeabi_dadd+0x3d4>
 8000f2e:	e0ad      	b.n	800108c <__aeabi_dadd+0x530>
 8000f30:	2620      	movs	r6, #32
 8000f32:	4647      	mov	r7, r8
 8000f34:	1af6      	subs	r6, r6, r3
 8000f36:	40b7      	lsls	r7, r6
 8000f38:	46b9      	mov	r9, r7
 8000f3a:	0017      	movs	r7, r2
 8000f3c:	46b2      	mov	sl, r6
 8000f3e:	40df      	lsrs	r7, r3
 8000f40:	464e      	mov	r6, r9
 8000f42:	433e      	orrs	r6, r7
 8000f44:	0037      	movs	r7, r6
 8000f46:	4656      	mov	r6, sl
 8000f48:	40b2      	lsls	r2, r6
 8000f4a:	1e56      	subs	r6, r2, #1
 8000f4c:	41b2      	sbcs	r2, r6
 8000f4e:	4317      	orrs	r7, r2
 8000f50:	4642      	mov	r2, r8
 8000f52:	40da      	lsrs	r2, r3
 8000f54:	1889      	adds	r1, r1, r2
 8000f56:	e6ae      	b.n	8000cb6 <__aeabi_dadd+0x15a>
 8000f58:	000007ff 	.word	0x000007ff
 8000f5c:	ff7fffff 	.word	0xff7fffff
 8000f60:	800fffff 	.word	0x800fffff
 8000f64:	2620      	movs	r6, #32
 8000f66:	4647      	mov	r7, r8
 8000f68:	1af6      	subs	r6, r6, r3
 8000f6a:	40b7      	lsls	r7, r6
 8000f6c:	46b9      	mov	r9, r7
 8000f6e:	0017      	movs	r7, r2
 8000f70:	46b2      	mov	sl, r6
 8000f72:	40df      	lsrs	r7, r3
 8000f74:	464e      	mov	r6, r9
 8000f76:	433e      	orrs	r6, r7
 8000f78:	0037      	movs	r7, r6
 8000f7a:	4656      	mov	r6, sl
 8000f7c:	40b2      	lsls	r2, r6
 8000f7e:	1e56      	subs	r6, r2, #1
 8000f80:	41b2      	sbcs	r2, r6
 8000f82:	4317      	orrs	r7, r2
 8000f84:	4642      	mov	r2, r8
 8000f86:	40da      	lsrs	r2, r3
 8000f88:	1a89      	subs	r1, r1, r2
 8000f8a:	e799      	b.n	8000ec0 <__aeabi_dadd+0x364>
 8000f8c:	4c7f      	ldr	r4, [pc, #508]	; (800118c <__aeabi_dadd+0x630>)
 8000f8e:	42a6      	cmp	r6, r4
 8000f90:	d05b      	beq.n	800104a <__aeabi_dadd+0x4ee>
 8000f92:	2480      	movs	r4, #128	; 0x80
 8000f94:	0424      	lsls	r4, r4, #16
 8000f96:	425b      	negs	r3, r3
 8000f98:	4321      	orrs	r1, r4
 8000f9a:	e727      	b.n	8000dec <__aeabi_dadd+0x290>
 8000f9c:	2e00      	cmp	r6, #0
 8000f9e:	d10c      	bne.n	8000fba <__aeabi_dadd+0x45e>
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d100      	bne.n	8000fa6 <__aeabi_dadd+0x44a>
 8000fa4:	e0cb      	b.n	800113e <__aeabi_dadd+0x5e2>
 8000fa6:	4664      	mov	r4, ip
 8000fa8:	0039      	movs	r1, r7
 8000faa:	0010      	movs	r0, r2
 8000fac:	4d77      	ldr	r5, [pc, #476]	; (800118c <__aeabi_dadd+0x630>)
 8000fae:	e6d7      	b.n	8000d60 <__aeabi_dadd+0x204>
 8000fb0:	4f76      	ldr	r7, [pc, #472]	; (800118c <__aeabi_dadd+0x630>)
 8000fb2:	42bb      	cmp	r3, r7
 8000fb4:	d018      	beq.n	8000fe8 <__aeabi_dadd+0x48c>
 8000fb6:	0033      	movs	r3, r6
 8000fb8:	e675      	b.n	8000ca6 <__aeabi_dadd+0x14a>
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d014      	beq.n	8000fe8 <__aeabi_dadd+0x48c>
 8000fbe:	074b      	lsls	r3, r1, #29
 8000fc0:	08c0      	lsrs	r0, r0, #3
 8000fc2:	4318      	orrs	r0, r3
 8000fc4:	2380      	movs	r3, #128	; 0x80
 8000fc6:	08c9      	lsrs	r1, r1, #3
 8000fc8:	031b      	lsls	r3, r3, #12
 8000fca:	4219      	tst	r1, r3
 8000fcc:	d007      	beq.n	8000fde <__aeabi_dadd+0x482>
 8000fce:	08fc      	lsrs	r4, r7, #3
 8000fd0:	421c      	tst	r4, r3
 8000fd2:	d104      	bne.n	8000fde <__aeabi_dadd+0x482>
 8000fd4:	0779      	lsls	r1, r7, #29
 8000fd6:	08d0      	lsrs	r0, r2, #3
 8000fd8:	4308      	orrs	r0, r1
 8000fda:	46e1      	mov	r9, ip
 8000fdc:	0021      	movs	r1, r4
 8000fde:	464c      	mov	r4, r9
 8000fe0:	0f42      	lsrs	r2, r0, #29
 8000fe2:	00c9      	lsls	r1, r1, #3
 8000fe4:	4311      	orrs	r1, r2
 8000fe6:	00c0      	lsls	r0, r0, #3
 8000fe8:	4d68      	ldr	r5, [pc, #416]	; (800118c <__aeabi_dadd+0x630>)
 8000fea:	e6b9      	b.n	8000d60 <__aeabi_dadd+0x204>
 8000fec:	001d      	movs	r5, r3
 8000fee:	2200      	movs	r2, #0
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	e6c0      	b.n	8000d76 <__aeabi_dadd+0x21a>
 8000ff4:	2d00      	cmp	r5, #0
 8000ff6:	d15b      	bne.n	80010b0 <__aeabi_dadd+0x554>
 8000ff8:	000d      	movs	r5, r1
 8000ffa:	4305      	orrs	r5, r0
 8000ffc:	d100      	bne.n	8001000 <__aeabi_dadd+0x4a4>
 8000ffe:	e6e2      	b.n	8000dc6 <__aeabi_dadd+0x26a>
 8001000:	1c5d      	adds	r5, r3, #1
 8001002:	d100      	bne.n	8001006 <__aeabi_dadd+0x4aa>
 8001004:	e0b0      	b.n	8001168 <__aeabi_dadd+0x60c>
 8001006:	4d61      	ldr	r5, [pc, #388]	; (800118c <__aeabi_dadd+0x630>)
 8001008:	42ae      	cmp	r6, r5
 800100a:	d01f      	beq.n	800104c <__aeabi_dadd+0x4f0>
 800100c:	43db      	mvns	r3, r3
 800100e:	2b38      	cmp	r3, #56	; 0x38
 8001010:	dc71      	bgt.n	80010f6 <__aeabi_dadd+0x59a>
 8001012:	2b1f      	cmp	r3, #31
 8001014:	dd00      	ble.n	8001018 <__aeabi_dadd+0x4bc>
 8001016:	e096      	b.n	8001146 <__aeabi_dadd+0x5ea>
 8001018:	2520      	movs	r5, #32
 800101a:	000f      	movs	r7, r1
 800101c:	1aed      	subs	r5, r5, r3
 800101e:	40af      	lsls	r7, r5
 8001020:	46b9      	mov	r9, r7
 8001022:	0007      	movs	r7, r0
 8001024:	46aa      	mov	sl, r5
 8001026:	40df      	lsrs	r7, r3
 8001028:	464d      	mov	r5, r9
 800102a:	433d      	orrs	r5, r7
 800102c:	002f      	movs	r7, r5
 800102e:	4655      	mov	r5, sl
 8001030:	40a8      	lsls	r0, r5
 8001032:	40d9      	lsrs	r1, r3
 8001034:	1e45      	subs	r5, r0, #1
 8001036:	41a8      	sbcs	r0, r5
 8001038:	4488      	add	r8, r1
 800103a:	4307      	orrs	r7, r0
 800103c:	18bf      	adds	r7, r7, r2
 800103e:	4297      	cmp	r7, r2
 8001040:	4192      	sbcs	r2, r2
 8001042:	4251      	negs	r1, r2
 8001044:	4441      	add	r1, r8
 8001046:	0035      	movs	r5, r6
 8001048:	e63a      	b.n	8000cc0 <__aeabi_dadd+0x164>
 800104a:	4664      	mov	r4, ip
 800104c:	0035      	movs	r5, r6
 800104e:	4641      	mov	r1, r8
 8001050:	0010      	movs	r0, r2
 8001052:	e685      	b.n	8000d60 <__aeabi_dadd+0x204>
 8001054:	000b      	movs	r3, r1
 8001056:	4303      	orrs	r3, r0
 8001058:	2d00      	cmp	r5, #0
 800105a:	d000      	beq.n	800105e <__aeabi_dadd+0x502>
 800105c:	e663      	b.n	8000d26 <__aeabi_dadd+0x1ca>
 800105e:	2b00      	cmp	r3, #0
 8001060:	d0f5      	beq.n	800104e <__aeabi_dadd+0x4f2>
 8001062:	4643      	mov	r3, r8
 8001064:	4313      	orrs	r3, r2
 8001066:	d100      	bne.n	800106a <__aeabi_dadd+0x50e>
 8001068:	e67a      	b.n	8000d60 <__aeabi_dadd+0x204>
 800106a:	1887      	adds	r7, r0, r2
 800106c:	4287      	cmp	r7, r0
 800106e:	4180      	sbcs	r0, r0
 8001070:	2207      	movs	r2, #7
 8001072:	4441      	add	r1, r8
 8001074:	4240      	negs	r0, r0
 8001076:	1809      	adds	r1, r1, r0
 8001078:	403a      	ands	r2, r7
 800107a:	020b      	lsls	r3, r1, #8
 800107c:	d400      	bmi.n	8001080 <__aeabi_dadd+0x524>
 800107e:	e6d5      	b.n	8000e2c <__aeabi_dadd+0x2d0>
 8001080:	4b43      	ldr	r3, [pc, #268]	; (8001190 <__aeabi_dadd+0x634>)
 8001082:	3501      	adds	r5, #1
 8001084:	4019      	ands	r1, r3
 8001086:	e5c9      	b.n	8000c1c <__aeabi_dadd+0xc0>
 8001088:	0038      	movs	r0, r7
 800108a:	e669      	b.n	8000d60 <__aeabi_dadd+0x204>
 800108c:	001e      	movs	r6, r3
 800108e:	4647      	mov	r7, r8
 8001090:	3e20      	subs	r6, #32
 8001092:	40f7      	lsrs	r7, r6
 8001094:	46bc      	mov	ip, r7
 8001096:	2b20      	cmp	r3, #32
 8001098:	d004      	beq.n	80010a4 <__aeabi_dadd+0x548>
 800109a:	2640      	movs	r6, #64	; 0x40
 800109c:	1af3      	subs	r3, r6, r3
 800109e:	4646      	mov	r6, r8
 80010a0:	409e      	lsls	r6, r3
 80010a2:	4332      	orrs	r2, r6
 80010a4:	0017      	movs	r7, r2
 80010a6:	4663      	mov	r3, ip
 80010a8:	1e7a      	subs	r2, r7, #1
 80010aa:	4197      	sbcs	r7, r2
 80010ac:	431f      	orrs	r7, r3
 80010ae:	e602      	b.n	8000cb6 <__aeabi_dadd+0x15a>
 80010b0:	4d36      	ldr	r5, [pc, #216]	; (800118c <__aeabi_dadd+0x630>)
 80010b2:	42ae      	cmp	r6, r5
 80010b4:	d0ca      	beq.n	800104c <__aeabi_dadd+0x4f0>
 80010b6:	2580      	movs	r5, #128	; 0x80
 80010b8:	042d      	lsls	r5, r5, #16
 80010ba:	425b      	negs	r3, r3
 80010bc:	4329      	orrs	r1, r5
 80010be:	e7a6      	b.n	800100e <__aeabi_dadd+0x4b2>
 80010c0:	4308      	orrs	r0, r1
 80010c2:	1e41      	subs	r1, r0, #1
 80010c4:	4188      	sbcs	r0, r1
 80010c6:	e6a6      	b.n	8000e16 <__aeabi_dadd+0x2ba>
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d100      	bne.n	80010ce <__aeabi_dadd+0x572>
 80010cc:	e648      	b.n	8000d60 <__aeabi_dadd+0x204>
 80010ce:	1a87      	subs	r7, r0, r2
 80010d0:	4643      	mov	r3, r8
 80010d2:	42b8      	cmp	r0, r7
 80010d4:	41b6      	sbcs	r6, r6
 80010d6:	1acb      	subs	r3, r1, r3
 80010d8:	4276      	negs	r6, r6
 80010da:	1b9e      	subs	r6, r3, r6
 80010dc:	0233      	lsls	r3, r6, #8
 80010de:	d54b      	bpl.n	8001178 <__aeabi_dadd+0x61c>
 80010e0:	1a17      	subs	r7, r2, r0
 80010e2:	4643      	mov	r3, r8
 80010e4:	42ba      	cmp	r2, r7
 80010e6:	4192      	sbcs	r2, r2
 80010e8:	1a59      	subs	r1, r3, r1
 80010ea:	4252      	negs	r2, r2
 80010ec:	1a89      	subs	r1, r1, r2
 80010ee:	2207      	movs	r2, #7
 80010f0:	4664      	mov	r4, ip
 80010f2:	403a      	ands	r2, r7
 80010f4:	e592      	b.n	8000c1c <__aeabi_dadd+0xc0>
 80010f6:	4301      	orrs	r1, r0
 80010f8:	000f      	movs	r7, r1
 80010fa:	1e79      	subs	r1, r7, #1
 80010fc:	418f      	sbcs	r7, r1
 80010fe:	e79d      	b.n	800103c <__aeabi_dadd+0x4e0>
 8001100:	001c      	movs	r4, r3
 8001102:	000f      	movs	r7, r1
 8001104:	3c20      	subs	r4, #32
 8001106:	40e7      	lsrs	r7, r4
 8001108:	2b20      	cmp	r3, #32
 800110a:	d003      	beq.n	8001114 <__aeabi_dadd+0x5b8>
 800110c:	2440      	movs	r4, #64	; 0x40
 800110e:	1ae3      	subs	r3, r4, r3
 8001110:	4099      	lsls	r1, r3
 8001112:	4308      	orrs	r0, r1
 8001114:	1e41      	subs	r1, r0, #1
 8001116:	4188      	sbcs	r0, r1
 8001118:	4338      	orrs	r0, r7
 800111a:	e67c      	b.n	8000e16 <__aeabi_dadd+0x2ba>
 800111c:	2200      	movs	r2, #0
 800111e:	2400      	movs	r4, #0
 8001120:	e625      	b.n	8000d6e <__aeabi_dadd+0x212>
 8001122:	1a17      	subs	r7, r2, r0
 8001124:	4643      	mov	r3, r8
 8001126:	42ba      	cmp	r2, r7
 8001128:	4192      	sbcs	r2, r2
 800112a:	1a59      	subs	r1, r3, r1
 800112c:	4252      	negs	r2, r2
 800112e:	1a89      	subs	r1, r1, r2
 8001130:	4664      	mov	r4, ip
 8001132:	0035      	movs	r5, r6
 8001134:	e543      	b.n	8000bbe <__aeabi_dadd+0x62>
 8001136:	4641      	mov	r1, r8
 8001138:	0010      	movs	r0, r2
 800113a:	4d14      	ldr	r5, [pc, #80]	; (800118c <__aeabi_dadd+0x630>)
 800113c:	e610      	b.n	8000d60 <__aeabi_dadd+0x204>
 800113e:	2280      	movs	r2, #128	; 0x80
 8001140:	2400      	movs	r4, #0
 8001142:	0312      	lsls	r2, r2, #12
 8001144:	e680      	b.n	8000e48 <__aeabi_dadd+0x2ec>
 8001146:	001d      	movs	r5, r3
 8001148:	000f      	movs	r7, r1
 800114a:	3d20      	subs	r5, #32
 800114c:	40ef      	lsrs	r7, r5
 800114e:	46bc      	mov	ip, r7
 8001150:	2b20      	cmp	r3, #32
 8001152:	d003      	beq.n	800115c <__aeabi_dadd+0x600>
 8001154:	2540      	movs	r5, #64	; 0x40
 8001156:	1aeb      	subs	r3, r5, r3
 8001158:	4099      	lsls	r1, r3
 800115a:	4308      	orrs	r0, r1
 800115c:	0007      	movs	r7, r0
 800115e:	4663      	mov	r3, ip
 8001160:	1e78      	subs	r0, r7, #1
 8001162:	4187      	sbcs	r7, r0
 8001164:	431f      	orrs	r7, r3
 8001166:	e769      	b.n	800103c <__aeabi_dadd+0x4e0>
 8001168:	1887      	adds	r7, r0, r2
 800116a:	4297      	cmp	r7, r2
 800116c:	419b      	sbcs	r3, r3
 800116e:	4441      	add	r1, r8
 8001170:	425b      	negs	r3, r3
 8001172:	18c9      	adds	r1, r1, r3
 8001174:	0035      	movs	r5, r6
 8001176:	e5a3      	b.n	8000cc0 <__aeabi_dadd+0x164>
 8001178:	003b      	movs	r3, r7
 800117a:	4333      	orrs	r3, r6
 800117c:	d0ce      	beq.n	800111c <__aeabi_dadd+0x5c0>
 800117e:	2207      	movs	r2, #7
 8001180:	0031      	movs	r1, r6
 8001182:	403a      	ands	r2, r7
 8001184:	e652      	b.n	8000e2c <__aeabi_dadd+0x2d0>
 8001186:	2300      	movs	r3, #0
 8001188:	001a      	movs	r2, r3
 800118a:	e5f4      	b.n	8000d76 <__aeabi_dadd+0x21a>
 800118c:	000007ff 	.word	0x000007ff
 8001190:	ff7fffff 	.word	0xff7fffff

08001194 <__aeabi_ddiv>:
 8001194:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001196:	4657      	mov	r7, sl
 8001198:	46de      	mov	lr, fp
 800119a:	464e      	mov	r6, r9
 800119c:	4645      	mov	r5, r8
 800119e:	b5e0      	push	{r5, r6, r7, lr}
 80011a0:	4683      	mov	fp, r0
 80011a2:	0007      	movs	r7, r0
 80011a4:	030e      	lsls	r6, r1, #12
 80011a6:	0048      	lsls	r0, r1, #1
 80011a8:	b085      	sub	sp, #20
 80011aa:	4692      	mov	sl, r2
 80011ac:	001c      	movs	r4, r3
 80011ae:	0b36      	lsrs	r6, r6, #12
 80011b0:	0d40      	lsrs	r0, r0, #21
 80011b2:	0fcd      	lsrs	r5, r1, #31
 80011b4:	2800      	cmp	r0, #0
 80011b6:	d100      	bne.n	80011ba <__aeabi_ddiv+0x26>
 80011b8:	e09d      	b.n	80012f6 <__aeabi_ddiv+0x162>
 80011ba:	4b95      	ldr	r3, [pc, #596]	; (8001410 <__aeabi_ddiv+0x27c>)
 80011bc:	4298      	cmp	r0, r3
 80011be:	d039      	beq.n	8001234 <__aeabi_ddiv+0xa0>
 80011c0:	2380      	movs	r3, #128	; 0x80
 80011c2:	00f6      	lsls	r6, r6, #3
 80011c4:	041b      	lsls	r3, r3, #16
 80011c6:	431e      	orrs	r6, r3
 80011c8:	4a92      	ldr	r2, [pc, #584]	; (8001414 <__aeabi_ddiv+0x280>)
 80011ca:	0f7b      	lsrs	r3, r7, #29
 80011cc:	4333      	orrs	r3, r6
 80011ce:	4699      	mov	r9, r3
 80011d0:	4694      	mov	ip, r2
 80011d2:	0003      	movs	r3, r0
 80011d4:	4463      	add	r3, ip
 80011d6:	9300      	str	r3, [sp, #0]
 80011d8:	2300      	movs	r3, #0
 80011da:	2600      	movs	r6, #0
 80011dc:	00ff      	lsls	r7, r7, #3
 80011de:	9302      	str	r3, [sp, #8]
 80011e0:	0323      	lsls	r3, r4, #12
 80011e2:	0b1b      	lsrs	r3, r3, #12
 80011e4:	4698      	mov	r8, r3
 80011e6:	0063      	lsls	r3, r4, #1
 80011e8:	0fe4      	lsrs	r4, r4, #31
 80011ea:	4652      	mov	r2, sl
 80011ec:	0d5b      	lsrs	r3, r3, #21
 80011ee:	9401      	str	r4, [sp, #4]
 80011f0:	d100      	bne.n	80011f4 <__aeabi_ddiv+0x60>
 80011f2:	e0b3      	b.n	800135c <__aeabi_ddiv+0x1c8>
 80011f4:	4986      	ldr	r1, [pc, #536]	; (8001410 <__aeabi_ddiv+0x27c>)
 80011f6:	428b      	cmp	r3, r1
 80011f8:	d100      	bne.n	80011fc <__aeabi_ddiv+0x68>
 80011fa:	e09e      	b.n	800133a <__aeabi_ddiv+0x1a6>
 80011fc:	4642      	mov	r2, r8
 80011fe:	00d1      	lsls	r1, r2, #3
 8001200:	2280      	movs	r2, #128	; 0x80
 8001202:	0412      	lsls	r2, r2, #16
 8001204:	430a      	orrs	r2, r1
 8001206:	4651      	mov	r1, sl
 8001208:	0f49      	lsrs	r1, r1, #29
 800120a:	4311      	orrs	r1, r2
 800120c:	468b      	mov	fp, r1
 800120e:	4981      	ldr	r1, [pc, #516]	; (8001414 <__aeabi_ddiv+0x280>)
 8001210:	4652      	mov	r2, sl
 8001212:	468c      	mov	ip, r1
 8001214:	9900      	ldr	r1, [sp, #0]
 8001216:	4463      	add	r3, ip
 8001218:	1acb      	subs	r3, r1, r3
 800121a:	2100      	movs	r1, #0
 800121c:	00d2      	lsls	r2, r2, #3
 800121e:	9300      	str	r3, [sp, #0]
 8001220:	002b      	movs	r3, r5
 8001222:	4063      	eors	r3, r4
 8001224:	469a      	mov	sl, r3
 8001226:	2e0f      	cmp	r6, #15
 8001228:	d900      	bls.n	800122c <__aeabi_ddiv+0x98>
 800122a:	e105      	b.n	8001438 <__aeabi_ddiv+0x2a4>
 800122c:	4b7a      	ldr	r3, [pc, #488]	; (8001418 <__aeabi_ddiv+0x284>)
 800122e:	00b6      	lsls	r6, r6, #2
 8001230:	599b      	ldr	r3, [r3, r6]
 8001232:	469f      	mov	pc, r3
 8001234:	465b      	mov	r3, fp
 8001236:	4333      	orrs	r3, r6
 8001238:	4699      	mov	r9, r3
 800123a:	d000      	beq.n	800123e <__aeabi_ddiv+0xaa>
 800123c:	e0b8      	b.n	80013b0 <__aeabi_ddiv+0x21c>
 800123e:	2302      	movs	r3, #2
 8001240:	2608      	movs	r6, #8
 8001242:	2700      	movs	r7, #0
 8001244:	9000      	str	r0, [sp, #0]
 8001246:	9302      	str	r3, [sp, #8]
 8001248:	e7ca      	b.n	80011e0 <__aeabi_ddiv+0x4c>
 800124a:	46cb      	mov	fp, r9
 800124c:	003a      	movs	r2, r7
 800124e:	9902      	ldr	r1, [sp, #8]
 8001250:	9501      	str	r5, [sp, #4]
 8001252:	9b01      	ldr	r3, [sp, #4]
 8001254:	469a      	mov	sl, r3
 8001256:	2902      	cmp	r1, #2
 8001258:	d027      	beq.n	80012aa <__aeabi_ddiv+0x116>
 800125a:	2903      	cmp	r1, #3
 800125c:	d100      	bne.n	8001260 <__aeabi_ddiv+0xcc>
 800125e:	e280      	b.n	8001762 <__aeabi_ddiv+0x5ce>
 8001260:	2901      	cmp	r1, #1
 8001262:	d044      	beq.n	80012ee <__aeabi_ddiv+0x15a>
 8001264:	496d      	ldr	r1, [pc, #436]	; (800141c <__aeabi_ddiv+0x288>)
 8001266:	9b00      	ldr	r3, [sp, #0]
 8001268:	468c      	mov	ip, r1
 800126a:	4463      	add	r3, ip
 800126c:	001c      	movs	r4, r3
 800126e:	2c00      	cmp	r4, #0
 8001270:	dd38      	ble.n	80012e4 <__aeabi_ddiv+0x150>
 8001272:	0753      	lsls	r3, r2, #29
 8001274:	d000      	beq.n	8001278 <__aeabi_ddiv+0xe4>
 8001276:	e213      	b.n	80016a0 <__aeabi_ddiv+0x50c>
 8001278:	08d2      	lsrs	r2, r2, #3
 800127a:	465b      	mov	r3, fp
 800127c:	01db      	lsls	r3, r3, #7
 800127e:	d509      	bpl.n	8001294 <__aeabi_ddiv+0x100>
 8001280:	4659      	mov	r1, fp
 8001282:	4b67      	ldr	r3, [pc, #412]	; (8001420 <__aeabi_ddiv+0x28c>)
 8001284:	4019      	ands	r1, r3
 8001286:	468b      	mov	fp, r1
 8001288:	2180      	movs	r1, #128	; 0x80
 800128a:	00c9      	lsls	r1, r1, #3
 800128c:	468c      	mov	ip, r1
 800128e:	9b00      	ldr	r3, [sp, #0]
 8001290:	4463      	add	r3, ip
 8001292:	001c      	movs	r4, r3
 8001294:	4b63      	ldr	r3, [pc, #396]	; (8001424 <__aeabi_ddiv+0x290>)
 8001296:	429c      	cmp	r4, r3
 8001298:	dc07      	bgt.n	80012aa <__aeabi_ddiv+0x116>
 800129a:	465b      	mov	r3, fp
 800129c:	0564      	lsls	r4, r4, #21
 800129e:	075f      	lsls	r7, r3, #29
 80012a0:	025b      	lsls	r3, r3, #9
 80012a2:	4317      	orrs	r7, r2
 80012a4:	0b1b      	lsrs	r3, r3, #12
 80012a6:	0d62      	lsrs	r2, r4, #21
 80012a8:	e002      	b.n	80012b0 <__aeabi_ddiv+0x11c>
 80012aa:	2300      	movs	r3, #0
 80012ac:	2700      	movs	r7, #0
 80012ae:	4a58      	ldr	r2, [pc, #352]	; (8001410 <__aeabi_ddiv+0x27c>)
 80012b0:	2100      	movs	r1, #0
 80012b2:	031b      	lsls	r3, r3, #12
 80012b4:	0b1c      	lsrs	r4, r3, #12
 80012b6:	0d0b      	lsrs	r3, r1, #20
 80012b8:	051b      	lsls	r3, r3, #20
 80012ba:	4323      	orrs	r3, r4
 80012bc:	0514      	lsls	r4, r2, #20
 80012be:	4a5a      	ldr	r2, [pc, #360]	; (8001428 <__aeabi_ddiv+0x294>)
 80012c0:	0038      	movs	r0, r7
 80012c2:	4013      	ands	r3, r2
 80012c4:	431c      	orrs	r4, r3
 80012c6:	4653      	mov	r3, sl
 80012c8:	0064      	lsls	r4, r4, #1
 80012ca:	07db      	lsls	r3, r3, #31
 80012cc:	0864      	lsrs	r4, r4, #1
 80012ce:	431c      	orrs	r4, r3
 80012d0:	0021      	movs	r1, r4
 80012d2:	b005      	add	sp, #20
 80012d4:	bc3c      	pop	{r2, r3, r4, r5}
 80012d6:	4690      	mov	r8, r2
 80012d8:	4699      	mov	r9, r3
 80012da:	46a2      	mov	sl, r4
 80012dc:	46ab      	mov	fp, r5
 80012de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012e0:	2201      	movs	r2, #1
 80012e2:	4252      	negs	r2, r2
 80012e4:	2301      	movs	r3, #1
 80012e6:	1b1b      	subs	r3, r3, r4
 80012e8:	2b38      	cmp	r3, #56	; 0x38
 80012ea:	dc00      	bgt.n	80012ee <__aeabi_ddiv+0x15a>
 80012ec:	e1ad      	b.n	800164a <__aeabi_ddiv+0x4b6>
 80012ee:	2200      	movs	r2, #0
 80012f0:	2300      	movs	r3, #0
 80012f2:	2700      	movs	r7, #0
 80012f4:	e7dc      	b.n	80012b0 <__aeabi_ddiv+0x11c>
 80012f6:	465b      	mov	r3, fp
 80012f8:	4333      	orrs	r3, r6
 80012fa:	4699      	mov	r9, r3
 80012fc:	d05e      	beq.n	80013bc <__aeabi_ddiv+0x228>
 80012fe:	2e00      	cmp	r6, #0
 8001300:	d100      	bne.n	8001304 <__aeabi_ddiv+0x170>
 8001302:	e18a      	b.n	800161a <__aeabi_ddiv+0x486>
 8001304:	0030      	movs	r0, r6
 8001306:	f001 f9fd 	bl	8002704 <__clzsi2>
 800130a:	0003      	movs	r3, r0
 800130c:	3b0b      	subs	r3, #11
 800130e:	2b1c      	cmp	r3, #28
 8001310:	dd00      	ble.n	8001314 <__aeabi_ddiv+0x180>
 8001312:	e17b      	b.n	800160c <__aeabi_ddiv+0x478>
 8001314:	221d      	movs	r2, #29
 8001316:	1ad3      	subs	r3, r2, r3
 8001318:	465a      	mov	r2, fp
 800131a:	0001      	movs	r1, r0
 800131c:	40da      	lsrs	r2, r3
 800131e:	3908      	subs	r1, #8
 8001320:	408e      	lsls	r6, r1
 8001322:	0013      	movs	r3, r2
 8001324:	465f      	mov	r7, fp
 8001326:	4333      	orrs	r3, r6
 8001328:	4699      	mov	r9, r3
 800132a:	408f      	lsls	r7, r1
 800132c:	4b3f      	ldr	r3, [pc, #252]	; (800142c <__aeabi_ddiv+0x298>)
 800132e:	2600      	movs	r6, #0
 8001330:	1a1b      	subs	r3, r3, r0
 8001332:	9300      	str	r3, [sp, #0]
 8001334:	2300      	movs	r3, #0
 8001336:	9302      	str	r3, [sp, #8]
 8001338:	e752      	b.n	80011e0 <__aeabi_ddiv+0x4c>
 800133a:	4641      	mov	r1, r8
 800133c:	4653      	mov	r3, sl
 800133e:	430b      	orrs	r3, r1
 8001340:	493b      	ldr	r1, [pc, #236]	; (8001430 <__aeabi_ddiv+0x29c>)
 8001342:	469b      	mov	fp, r3
 8001344:	468c      	mov	ip, r1
 8001346:	9b00      	ldr	r3, [sp, #0]
 8001348:	4463      	add	r3, ip
 800134a:	9300      	str	r3, [sp, #0]
 800134c:	465b      	mov	r3, fp
 800134e:	2b00      	cmp	r3, #0
 8001350:	d13b      	bne.n	80013ca <__aeabi_ddiv+0x236>
 8001352:	2302      	movs	r3, #2
 8001354:	2200      	movs	r2, #0
 8001356:	431e      	orrs	r6, r3
 8001358:	2102      	movs	r1, #2
 800135a:	e761      	b.n	8001220 <__aeabi_ddiv+0x8c>
 800135c:	4643      	mov	r3, r8
 800135e:	4313      	orrs	r3, r2
 8001360:	469b      	mov	fp, r3
 8001362:	d037      	beq.n	80013d4 <__aeabi_ddiv+0x240>
 8001364:	4643      	mov	r3, r8
 8001366:	2b00      	cmp	r3, #0
 8001368:	d100      	bne.n	800136c <__aeabi_ddiv+0x1d8>
 800136a:	e162      	b.n	8001632 <__aeabi_ddiv+0x49e>
 800136c:	4640      	mov	r0, r8
 800136e:	f001 f9c9 	bl	8002704 <__clzsi2>
 8001372:	0003      	movs	r3, r0
 8001374:	3b0b      	subs	r3, #11
 8001376:	2b1c      	cmp	r3, #28
 8001378:	dd00      	ble.n	800137c <__aeabi_ddiv+0x1e8>
 800137a:	e153      	b.n	8001624 <__aeabi_ddiv+0x490>
 800137c:	0002      	movs	r2, r0
 800137e:	4641      	mov	r1, r8
 8001380:	3a08      	subs	r2, #8
 8001382:	4091      	lsls	r1, r2
 8001384:	4688      	mov	r8, r1
 8001386:	211d      	movs	r1, #29
 8001388:	1acb      	subs	r3, r1, r3
 800138a:	4651      	mov	r1, sl
 800138c:	40d9      	lsrs	r1, r3
 800138e:	000b      	movs	r3, r1
 8001390:	4641      	mov	r1, r8
 8001392:	430b      	orrs	r3, r1
 8001394:	469b      	mov	fp, r3
 8001396:	4653      	mov	r3, sl
 8001398:	4093      	lsls	r3, r2
 800139a:	001a      	movs	r2, r3
 800139c:	9b00      	ldr	r3, [sp, #0]
 800139e:	4925      	ldr	r1, [pc, #148]	; (8001434 <__aeabi_ddiv+0x2a0>)
 80013a0:	469c      	mov	ip, r3
 80013a2:	4460      	add	r0, ip
 80013a4:	0003      	movs	r3, r0
 80013a6:	468c      	mov	ip, r1
 80013a8:	4463      	add	r3, ip
 80013aa:	9300      	str	r3, [sp, #0]
 80013ac:	2100      	movs	r1, #0
 80013ae:	e737      	b.n	8001220 <__aeabi_ddiv+0x8c>
 80013b0:	2303      	movs	r3, #3
 80013b2:	46b1      	mov	r9, r6
 80013b4:	9000      	str	r0, [sp, #0]
 80013b6:	260c      	movs	r6, #12
 80013b8:	9302      	str	r3, [sp, #8]
 80013ba:	e711      	b.n	80011e0 <__aeabi_ddiv+0x4c>
 80013bc:	2300      	movs	r3, #0
 80013be:	9300      	str	r3, [sp, #0]
 80013c0:	3301      	adds	r3, #1
 80013c2:	2604      	movs	r6, #4
 80013c4:	2700      	movs	r7, #0
 80013c6:	9302      	str	r3, [sp, #8]
 80013c8:	e70a      	b.n	80011e0 <__aeabi_ddiv+0x4c>
 80013ca:	2303      	movs	r3, #3
 80013cc:	46c3      	mov	fp, r8
 80013ce:	431e      	orrs	r6, r3
 80013d0:	2103      	movs	r1, #3
 80013d2:	e725      	b.n	8001220 <__aeabi_ddiv+0x8c>
 80013d4:	3301      	adds	r3, #1
 80013d6:	431e      	orrs	r6, r3
 80013d8:	2200      	movs	r2, #0
 80013da:	2101      	movs	r1, #1
 80013dc:	e720      	b.n	8001220 <__aeabi_ddiv+0x8c>
 80013de:	2300      	movs	r3, #0
 80013e0:	469a      	mov	sl, r3
 80013e2:	2380      	movs	r3, #128	; 0x80
 80013e4:	2700      	movs	r7, #0
 80013e6:	031b      	lsls	r3, r3, #12
 80013e8:	4a09      	ldr	r2, [pc, #36]	; (8001410 <__aeabi_ddiv+0x27c>)
 80013ea:	e761      	b.n	80012b0 <__aeabi_ddiv+0x11c>
 80013ec:	2380      	movs	r3, #128	; 0x80
 80013ee:	4649      	mov	r1, r9
 80013f0:	031b      	lsls	r3, r3, #12
 80013f2:	4219      	tst	r1, r3
 80013f4:	d100      	bne.n	80013f8 <__aeabi_ddiv+0x264>
 80013f6:	e0e2      	b.n	80015be <__aeabi_ddiv+0x42a>
 80013f8:	4659      	mov	r1, fp
 80013fa:	4219      	tst	r1, r3
 80013fc:	d000      	beq.n	8001400 <__aeabi_ddiv+0x26c>
 80013fe:	e0de      	b.n	80015be <__aeabi_ddiv+0x42a>
 8001400:	430b      	orrs	r3, r1
 8001402:	031b      	lsls	r3, r3, #12
 8001404:	0017      	movs	r7, r2
 8001406:	0b1b      	lsrs	r3, r3, #12
 8001408:	46a2      	mov	sl, r4
 800140a:	4a01      	ldr	r2, [pc, #4]	; (8001410 <__aeabi_ddiv+0x27c>)
 800140c:	e750      	b.n	80012b0 <__aeabi_ddiv+0x11c>
 800140e:	46c0      	nop			; (mov r8, r8)
 8001410:	000007ff 	.word	0x000007ff
 8001414:	fffffc01 	.word	0xfffffc01
 8001418:	080212ec 	.word	0x080212ec
 800141c:	000003ff 	.word	0x000003ff
 8001420:	feffffff 	.word	0xfeffffff
 8001424:	000007fe 	.word	0x000007fe
 8001428:	800fffff 	.word	0x800fffff
 800142c:	fffffc0d 	.word	0xfffffc0d
 8001430:	fffff801 	.word	0xfffff801
 8001434:	000003f3 	.word	0x000003f3
 8001438:	45d9      	cmp	r9, fp
 800143a:	d900      	bls.n	800143e <__aeabi_ddiv+0x2aa>
 800143c:	e0cb      	b.n	80015d6 <__aeabi_ddiv+0x442>
 800143e:	d100      	bne.n	8001442 <__aeabi_ddiv+0x2ae>
 8001440:	e0c6      	b.n	80015d0 <__aeabi_ddiv+0x43c>
 8001442:	003c      	movs	r4, r7
 8001444:	4648      	mov	r0, r9
 8001446:	2700      	movs	r7, #0
 8001448:	9b00      	ldr	r3, [sp, #0]
 800144a:	3b01      	subs	r3, #1
 800144c:	9300      	str	r3, [sp, #0]
 800144e:	465b      	mov	r3, fp
 8001450:	0e16      	lsrs	r6, r2, #24
 8001452:	021b      	lsls	r3, r3, #8
 8001454:	431e      	orrs	r6, r3
 8001456:	0213      	lsls	r3, r2, #8
 8001458:	4698      	mov	r8, r3
 800145a:	0433      	lsls	r3, r6, #16
 800145c:	0c1b      	lsrs	r3, r3, #16
 800145e:	4699      	mov	r9, r3
 8001460:	0c31      	lsrs	r1, r6, #16
 8001462:	9101      	str	r1, [sp, #4]
 8001464:	f7fe fede 	bl	8000224 <__aeabi_uidivmod>
 8001468:	464a      	mov	r2, r9
 800146a:	4342      	muls	r2, r0
 800146c:	040b      	lsls	r3, r1, #16
 800146e:	0c21      	lsrs	r1, r4, #16
 8001470:	0005      	movs	r5, r0
 8001472:	4319      	orrs	r1, r3
 8001474:	428a      	cmp	r2, r1
 8001476:	d907      	bls.n	8001488 <__aeabi_ddiv+0x2f4>
 8001478:	1989      	adds	r1, r1, r6
 800147a:	3d01      	subs	r5, #1
 800147c:	428e      	cmp	r6, r1
 800147e:	d803      	bhi.n	8001488 <__aeabi_ddiv+0x2f4>
 8001480:	428a      	cmp	r2, r1
 8001482:	d901      	bls.n	8001488 <__aeabi_ddiv+0x2f4>
 8001484:	1e85      	subs	r5, r0, #2
 8001486:	1989      	adds	r1, r1, r6
 8001488:	1a88      	subs	r0, r1, r2
 800148a:	9901      	ldr	r1, [sp, #4]
 800148c:	f7fe feca 	bl	8000224 <__aeabi_uidivmod>
 8001490:	0409      	lsls	r1, r1, #16
 8001492:	468c      	mov	ip, r1
 8001494:	464a      	mov	r2, r9
 8001496:	0421      	lsls	r1, r4, #16
 8001498:	4664      	mov	r4, ip
 800149a:	4342      	muls	r2, r0
 800149c:	0c09      	lsrs	r1, r1, #16
 800149e:	0003      	movs	r3, r0
 80014a0:	4321      	orrs	r1, r4
 80014a2:	428a      	cmp	r2, r1
 80014a4:	d904      	bls.n	80014b0 <__aeabi_ddiv+0x31c>
 80014a6:	1989      	adds	r1, r1, r6
 80014a8:	3b01      	subs	r3, #1
 80014aa:	428e      	cmp	r6, r1
 80014ac:	d800      	bhi.n	80014b0 <__aeabi_ddiv+0x31c>
 80014ae:	e0f1      	b.n	8001694 <__aeabi_ddiv+0x500>
 80014b0:	042d      	lsls	r5, r5, #16
 80014b2:	431d      	orrs	r5, r3
 80014b4:	46ab      	mov	fp, r5
 80014b6:	4643      	mov	r3, r8
 80014b8:	1a89      	subs	r1, r1, r2
 80014ba:	4642      	mov	r2, r8
 80014bc:	0c28      	lsrs	r0, r5, #16
 80014be:	0412      	lsls	r2, r2, #16
 80014c0:	0c1d      	lsrs	r5, r3, #16
 80014c2:	465b      	mov	r3, fp
 80014c4:	0c14      	lsrs	r4, r2, #16
 80014c6:	0022      	movs	r2, r4
 80014c8:	041b      	lsls	r3, r3, #16
 80014ca:	0c1b      	lsrs	r3, r3, #16
 80014cc:	435a      	muls	r2, r3
 80014ce:	9403      	str	r4, [sp, #12]
 80014d0:	436b      	muls	r3, r5
 80014d2:	4344      	muls	r4, r0
 80014d4:	9502      	str	r5, [sp, #8]
 80014d6:	4368      	muls	r0, r5
 80014d8:	191b      	adds	r3, r3, r4
 80014da:	0c15      	lsrs	r5, r2, #16
 80014dc:	18eb      	adds	r3, r5, r3
 80014de:	429c      	cmp	r4, r3
 80014e0:	d903      	bls.n	80014ea <__aeabi_ddiv+0x356>
 80014e2:	2480      	movs	r4, #128	; 0x80
 80014e4:	0264      	lsls	r4, r4, #9
 80014e6:	46a4      	mov	ip, r4
 80014e8:	4460      	add	r0, ip
 80014ea:	0c1c      	lsrs	r4, r3, #16
 80014ec:	0415      	lsls	r5, r2, #16
 80014ee:	041b      	lsls	r3, r3, #16
 80014f0:	0c2d      	lsrs	r5, r5, #16
 80014f2:	1820      	adds	r0, r4, r0
 80014f4:	195d      	adds	r5, r3, r5
 80014f6:	4281      	cmp	r1, r0
 80014f8:	d377      	bcc.n	80015ea <__aeabi_ddiv+0x456>
 80014fa:	d073      	beq.n	80015e4 <__aeabi_ddiv+0x450>
 80014fc:	1a0c      	subs	r4, r1, r0
 80014fe:	4aa2      	ldr	r2, [pc, #648]	; (8001788 <__aeabi_ddiv+0x5f4>)
 8001500:	1b7d      	subs	r5, r7, r5
 8001502:	42af      	cmp	r7, r5
 8001504:	41bf      	sbcs	r7, r7
 8001506:	4694      	mov	ip, r2
 8001508:	9b00      	ldr	r3, [sp, #0]
 800150a:	427f      	negs	r7, r7
 800150c:	4463      	add	r3, ip
 800150e:	1be0      	subs	r0, r4, r7
 8001510:	001c      	movs	r4, r3
 8001512:	4286      	cmp	r6, r0
 8001514:	d100      	bne.n	8001518 <__aeabi_ddiv+0x384>
 8001516:	e0db      	b.n	80016d0 <__aeabi_ddiv+0x53c>
 8001518:	9901      	ldr	r1, [sp, #4]
 800151a:	f7fe fe83 	bl	8000224 <__aeabi_uidivmod>
 800151e:	464a      	mov	r2, r9
 8001520:	4342      	muls	r2, r0
 8001522:	040b      	lsls	r3, r1, #16
 8001524:	0c29      	lsrs	r1, r5, #16
 8001526:	0007      	movs	r7, r0
 8001528:	4319      	orrs	r1, r3
 800152a:	428a      	cmp	r2, r1
 800152c:	d907      	bls.n	800153e <__aeabi_ddiv+0x3aa>
 800152e:	1989      	adds	r1, r1, r6
 8001530:	3f01      	subs	r7, #1
 8001532:	428e      	cmp	r6, r1
 8001534:	d803      	bhi.n	800153e <__aeabi_ddiv+0x3aa>
 8001536:	428a      	cmp	r2, r1
 8001538:	d901      	bls.n	800153e <__aeabi_ddiv+0x3aa>
 800153a:	1e87      	subs	r7, r0, #2
 800153c:	1989      	adds	r1, r1, r6
 800153e:	1a88      	subs	r0, r1, r2
 8001540:	9901      	ldr	r1, [sp, #4]
 8001542:	f7fe fe6f 	bl	8000224 <__aeabi_uidivmod>
 8001546:	0409      	lsls	r1, r1, #16
 8001548:	464a      	mov	r2, r9
 800154a:	4689      	mov	r9, r1
 800154c:	0429      	lsls	r1, r5, #16
 800154e:	464d      	mov	r5, r9
 8001550:	4342      	muls	r2, r0
 8001552:	0c09      	lsrs	r1, r1, #16
 8001554:	0003      	movs	r3, r0
 8001556:	4329      	orrs	r1, r5
 8001558:	428a      	cmp	r2, r1
 800155a:	d907      	bls.n	800156c <__aeabi_ddiv+0x3d8>
 800155c:	1989      	adds	r1, r1, r6
 800155e:	3b01      	subs	r3, #1
 8001560:	428e      	cmp	r6, r1
 8001562:	d803      	bhi.n	800156c <__aeabi_ddiv+0x3d8>
 8001564:	428a      	cmp	r2, r1
 8001566:	d901      	bls.n	800156c <__aeabi_ddiv+0x3d8>
 8001568:	1e83      	subs	r3, r0, #2
 800156a:	1989      	adds	r1, r1, r6
 800156c:	043f      	lsls	r7, r7, #16
 800156e:	1a89      	subs	r1, r1, r2
 8001570:	003a      	movs	r2, r7
 8001572:	9f03      	ldr	r7, [sp, #12]
 8001574:	431a      	orrs	r2, r3
 8001576:	0038      	movs	r0, r7
 8001578:	0413      	lsls	r3, r2, #16
 800157a:	0c1b      	lsrs	r3, r3, #16
 800157c:	4358      	muls	r0, r3
 800157e:	4681      	mov	r9, r0
 8001580:	9802      	ldr	r0, [sp, #8]
 8001582:	0c15      	lsrs	r5, r2, #16
 8001584:	436f      	muls	r7, r5
 8001586:	4343      	muls	r3, r0
 8001588:	4345      	muls	r5, r0
 800158a:	4648      	mov	r0, r9
 800158c:	0c00      	lsrs	r0, r0, #16
 800158e:	4684      	mov	ip, r0
 8001590:	19db      	adds	r3, r3, r7
 8001592:	4463      	add	r3, ip
 8001594:	429f      	cmp	r7, r3
 8001596:	d903      	bls.n	80015a0 <__aeabi_ddiv+0x40c>
 8001598:	2080      	movs	r0, #128	; 0x80
 800159a:	0240      	lsls	r0, r0, #9
 800159c:	4684      	mov	ip, r0
 800159e:	4465      	add	r5, ip
 80015a0:	4648      	mov	r0, r9
 80015a2:	0c1f      	lsrs	r7, r3, #16
 80015a4:	0400      	lsls	r0, r0, #16
 80015a6:	041b      	lsls	r3, r3, #16
 80015a8:	0c00      	lsrs	r0, r0, #16
 80015aa:	197d      	adds	r5, r7, r5
 80015ac:	1818      	adds	r0, r3, r0
 80015ae:	42a9      	cmp	r1, r5
 80015b0:	d200      	bcs.n	80015b4 <__aeabi_ddiv+0x420>
 80015b2:	e084      	b.n	80016be <__aeabi_ddiv+0x52a>
 80015b4:	d100      	bne.n	80015b8 <__aeabi_ddiv+0x424>
 80015b6:	e07f      	b.n	80016b8 <__aeabi_ddiv+0x524>
 80015b8:	2301      	movs	r3, #1
 80015ba:	431a      	orrs	r2, r3
 80015bc:	e657      	b.n	800126e <__aeabi_ddiv+0xda>
 80015be:	2380      	movs	r3, #128	; 0x80
 80015c0:	464a      	mov	r2, r9
 80015c2:	031b      	lsls	r3, r3, #12
 80015c4:	4313      	orrs	r3, r2
 80015c6:	031b      	lsls	r3, r3, #12
 80015c8:	0b1b      	lsrs	r3, r3, #12
 80015ca:	46aa      	mov	sl, r5
 80015cc:	4a6f      	ldr	r2, [pc, #444]	; (800178c <__aeabi_ddiv+0x5f8>)
 80015ce:	e66f      	b.n	80012b0 <__aeabi_ddiv+0x11c>
 80015d0:	42ba      	cmp	r2, r7
 80015d2:	d900      	bls.n	80015d6 <__aeabi_ddiv+0x442>
 80015d4:	e735      	b.n	8001442 <__aeabi_ddiv+0x2ae>
 80015d6:	464b      	mov	r3, r9
 80015d8:	07dc      	lsls	r4, r3, #31
 80015da:	0858      	lsrs	r0, r3, #1
 80015dc:	087b      	lsrs	r3, r7, #1
 80015de:	431c      	orrs	r4, r3
 80015e0:	07ff      	lsls	r7, r7, #31
 80015e2:	e734      	b.n	800144e <__aeabi_ddiv+0x2ba>
 80015e4:	2400      	movs	r4, #0
 80015e6:	42af      	cmp	r7, r5
 80015e8:	d289      	bcs.n	80014fe <__aeabi_ddiv+0x36a>
 80015ea:	4447      	add	r7, r8
 80015ec:	4547      	cmp	r7, r8
 80015ee:	41a4      	sbcs	r4, r4
 80015f0:	465b      	mov	r3, fp
 80015f2:	4264      	negs	r4, r4
 80015f4:	19a4      	adds	r4, r4, r6
 80015f6:	1864      	adds	r4, r4, r1
 80015f8:	3b01      	subs	r3, #1
 80015fa:	42a6      	cmp	r6, r4
 80015fc:	d21e      	bcs.n	800163c <__aeabi_ddiv+0x4a8>
 80015fe:	42a0      	cmp	r0, r4
 8001600:	d86d      	bhi.n	80016de <__aeabi_ddiv+0x54a>
 8001602:	d100      	bne.n	8001606 <__aeabi_ddiv+0x472>
 8001604:	e0b6      	b.n	8001774 <__aeabi_ddiv+0x5e0>
 8001606:	1a24      	subs	r4, r4, r0
 8001608:	469b      	mov	fp, r3
 800160a:	e778      	b.n	80014fe <__aeabi_ddiv+0x36a>
 800160c:	0003      	movs	r3, r0
 800160e:	465a      	mov	r2, fp
 8001610:	3b28      	subs	r3, #40	; 0x28
 8001612:	409a      	lsls	r2, r3
 8001614:	2700      	movs	r7, #0
 8001616:	4691      	mov	r9, r2
 8001618:	e688      	b.n	800132c <__aeabi_ddiv+0x198>
 800161a:	4658      	mov	r0, fp
 800161c:	f001 f872 	bl	8002704 <__clzsi2>
 8001620:	3020      	adds	r0, #32
 8001622:	e672      	b.n	800130a <__aeabi_ddiv+0x176>
 8001624:	0003      	movs	r3, r0
 8001626:	4652      	mov	r2, sl
 8001628:	3b28      	subs	r3, #40	; 0x28
 800162a:	409a      	lsls	r2, r3
 800162c:	4693      	mov	fp, r2
 800162e:	2200      	movs	r2, #0
 8001630:	e6b4      	b.n	800139c <__aeabi_ddiv+0x208>
 8001632:	4650      	mov	r0, sl
 8001634:	f001 f866 	bl	8002704 <__clzsi2>
 8001638:	3020      	adds	r0, #32
 800163a:	e69a      	b.n	8001372 <__aeabi_ddiv+0x1de>
 800163c:	42a6      	cmp	r6, r4
 800163e:	d1e2      	bne.n	8001606 <__aeabi_ddiv+0x472>
 8001640:	45b8      	cmp	r8, r7
 8001642:	d9dc      	bls.n	80015fe <__aeabi_ddiv+0x46a>
 8001644:	1a34      	subs	r4, r6, r0
 8001646:	469b      	mov	fp, r3
 8001648:	e759      	b.n	80014fe <__aeabi_ddiv+0x36a>
 800164a:	2b1f      	cmp	r3, #31
 800164c:	dc65      	bgt.n	800171a <__aeabi_ddiv+0x586>
 800164e:	4c50      	ldr	r4, [pc, #320]	; (8001790 <__aeabi_ddiv+0x5fc>)
 8001650:	9900      	ldr	r1, [sp, #0]
 8001652:	46a4      	mov	ip, r4
 8001654:	465c      	mov	r4, fp
 8001656:	4461      	add	r1, ip
 8001658:	0008      	movs	r0, r1
 800165a:	408c      	lsls	r4, r1
 800165c:	0011      	movs	r1, r2
 800165e:	4082      	lsls	r2, r0
 8001660:	40d9      	lsrs	r1, r3
 8001662:	1e50      	subs	r0, r2, #1
 8001664:	4182      	sbcs	r2, r0
 8001666:	430c      	orrs	r4, r1
 8001668:	4314      	orrs	r4, r2
 800166a:	465a      	mov	r2, fp
 800166c:	40da      	lsrs	r2, r3
 800166e:	0013      	movs	r3, r2
 8001670:	0762      	lsls	r2, r4, #29
 8001672:	d009      	beq.n	8001688 <__aeabi_ddiv+0x4f4>
 8001674:	220f      	movs	r2, #15
 8001676:	4022      	ands	r2, r4
 8001678:	2a04      	cmp	r2, #4
 800167a:	d005      	beq.n	8001688 <__aeabi_ddiv+0x4f4>
 800167c:	0022      	movs	r2, r4
 800167e:	1d14      	adds	r4, r2, #4
 8001680:	4294      	cmp	r4, r2
 8001682:	4189      	sbcs	r1, r1
 8001684:	4249      	negs	r1, r1
 8001686:	185b      	adds	r3, r3, r1
 8001688:	021a      	lsls	r2, r3, #8
 800168a:	d562      	bpl.n	8001752 <__aeabi_ddiv+0x5be>
 800168c:	2201      	movs	r2, #1
 800168e:	2300      	movs	r3, #0
 8001690:	2700      	movs	r7, #0
 8001692:	e60d      	b.n	80012b0 <__aeabi_ddiv+0x11c>
 8001694:	428a      	cmp	r2, r1
 8001696:	d800      	bhi.n	800169a <__aeabi_ddiv+0x506>
 8001698:	e70a      	b.n	80014b0 <__aeabi_ddiv+0x31c>
 800169a:	1e83      	subs	r3, r0, #2
 800169c:	1989      	adds	r1, r1, r6
 800169e:	e707      	b.n	80014b0 <__aeabi_ddiv+0x31c>
 80016a0:	230f      	movs	r3, #15
 80016a2:	4013      	ands	r3, r2
 80016a4:	2b04      	cmp	r3, #4
 80016a6:	d100      	bne.n	80016aa <__aeabi_ddiv+0x516>
 80016a8:	e5e6      	b.n	8001278 <__aeabi_ddiv+0xe4>
 80016aa:	1d17      	adds	r7, r2, #4
 80016ac:	4297      	cmp	r7, r2
 80016ae:	4192      	sbcs	r2, r2
 80016b0:	4253      	negs	r3, r2
 80016b2:	449b      	add	fp, r3
 80016b4:	08fa      	lsrs	r2, r7, #3
 80016b6:	e5e0      	b.n	800127a <__aeabi_ddiv+0xe6>
 80016b8:	2800      	cmp	r0, #0
 80016ba:	d100      	bne.n	80016be <__aeabi_ddiv+0x52a>
 80016bc:	e5d7      	b.n	800126e <__aeabi_ddiv+0xda>
 80016be:	1871      	adds	r1, r6, r1
 80016c0:	1e53      	subs	r3, r2, #1
 80016c2:	42b1      	cmp	r1, r6
 80016c4:	d327      	bcc.n	8001716 <__aeabi_ddiv+0x582>
 80016c6:	42a9      	cmp	r1, r5
 80016c8:	d315      	bcc.n	80016f6 <__aeabi_ddiv+0x562>
 80016ca:	d058      	beq.n	800177e <__aeabi_ddiv+0x5ea>
 80016cc:	001a      	movs	r2, r3
 80016ce:	e773      	b.n	80015b8 <__aeabi_ddiv+0x424>
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	dc00      	bgt.n	80016d6 <__aeabi_ddiv+0x542>
 80016d4:	e604      	b.n	80012e0 <__aeabi_ddiv+0x14c>
 80016d6:	2301      	movs	r3, #1
 80016d8:	2200      	movs	r2, #0
 80016da:	449b      	add	fp, r3
 80016dc:	e5cd      	b.n	800127a <__aeabi_ddiv+0xe6>
 80016de:	2302      	movs	r3, #2
 80016e0:	4447      	add	r7, r8
 80016e2:	4547      	cmp	r7, r8
 80016e4:	4189      	sbcs	r1, r1
 80016e6:	425b      	negs	r3, r3
 80016e8:	469c      	mov	ip, r3
 80016ea:	4249      	negs	r1, r1
 80016ec:	1989      	adds	r1, r1, r6
 80016ee:	190c      	adds	r4, r1, r4
 80016f0:	44e3      	add	fp, ip
 80016f2:	1a24      	subs	r4, r4, r0
 80016f4:	e703      	b.n	80014fe <__aeabi_ddiv+0x36a>
 80016f6:	4643      	mov	r3, r8
 80016f8:	005f      	lsls	r7, r3, #1
 80016fa:	4547      	cmp	r7, r8
 80016fc:	419b      	sbcs	r3, r3
 80016fe:	46b8      	mov	r8, r7
 8001700:	425b      	negs	r3, r3
 8001702:	199e      	adds	r6, r3, r6
 8001704:	3a02      	subs	r2, #2
 8001706:	1989      	adds	r1, r1, r6
 8001708:	42a9      	cmp	r1, r5
 800170a:	d000      	beq.n	800170e <__aeabi_ddiv+0x57a>
 800170c:	e754      	b.n	80015b8 <__aeabi_ddiv+0x424>
 800170e:	4540      	cmp	r0, r8
 8001710:	d000      	beq.n	8001714 <__aeabi_ddiv+0x580>
 8001712:	e751      	b.n	80015b8 <__aeabi_ddiv+0x424>
 8001714:	e5ab      	b.n	800126e <__aeabi_ddiv+0xda>
 8001716:	001a      	movs	r2, r3
 8001718:	e7f6      	b.n	8001708 <__aeabi_ddiv+0x574>
 800171a:	211f      	movs	r1, #31
 800171c:	465f      	mov	r7, fp
 800171e:	4249      	negs	r1, r1
 8001720:	1b0c      	subs	r4, r1, r4
 8001722:	40e7      	lsrs	r7, r4
 8001724:	2b20      	cmp	r3, #32
 8001726:	d007      	beq.n	8001738 <__aeabi_ddiv+0x5a4>
 8001728:	491a      	ldr	r1, [pc, #104]	; (8001794 <__aeabi_ddiv+0x600>)
 800172a:	9b00      	ldr	r3, [sp, #0]
 800172c:	468c      	mov	ip, r1
 800172e:	4463      	add	r3, ip
 8001730:	0018      	movs	r0, r3
 8001732:	465b      	mov	r3, fp
 8001734:	4083      	lsls	r3, r0
 8001736:	431a      	orrs	r2, r3
 8001738:	1e50      	subs	r0, r2, #1
 800173a:	4182      	sbcs	r2, r0
 800173c:	433a      	orrs	r2, r7
 800173e:	2707      	movs	r7, #7
 8001740:	2300      	movs	r3, #0
 8001742:	4017      	ands	r7, r2
 8001744:	d009      	beq.n	800175a <__aeabi_ddiv+0x5c6>
 8001746:	210f      	movs	r1, #15
 8001748:	2300      	movs	r3, #0
 800174a:	4011      	ands	r1, r2
 800174c:	0014      	movs	r4, r2
 800174e:	2904      	cmp	r1, #4
 8001750:	d195      	bne.n	800167e <__aeabi_ddiv+0x4ea>
 8001752:	0022      	movs	r2, r4
 8001754:	075f      	lsls	r7, r3, #29
 8001756:	025b      	lsls	r3, r3, #9
 8001758:	0b1b      	lsrs	r3, r3, #12
 800175a:	08d2      	lsrs	r2, r2, #3
 800175c:	4317      	orrs	r7, r2
 800175e:	2200      	movs	r2, #0
 8001760:	e5a6      	b.n	80012b0 <__aeabi_ddiv+0x11c>
 8001762:	2380      	movs	r3, #128	; 0x80
 8001764:	4659      	mov	r1, fp
 8001766:	031b      	lsls	r3, r3, #12
 8001768:	430b      	orrs	r3, r1
 800176a:	031b      	lsls	r3, r3, #12
 800176c:	0017      	movs	r7, r2
 800176e:	0b1b      	lsrs	r3, r3, #12
 8001770:	4a06      	ldr	r2, [pc, #24]	; (800178c <__aeabi_ddiv+0x5f8>)
 8001772:	e59d      	b.n	80012b0 <__aeabi_ddiv+0x11c>
 8001774:	42bd      	cmp	r5, r7
 8001776:	d8b2      	bhi.n	80016de <__aeabi_ddiv+0x54a>
 8001778:	469b      	mov	fp, r3
 800177a:	2400      	movs	r4, #0
 800177c:	e6bf      	b.n	80014fe <__aeabi_ddiv+0x36a>
 800177e:	4580      	cmp	r8, r0
 8001780:	d3b9      	bcc.n	80016f6 <__aeabi_ddiv+0x562>
 8001782:	001a      	movs	r2, r3
 8001784:	e7c3      	b.n	800170e <__aeabi_ddiv+0x57a>
 8001786:	46c0      	nop			; (mov r8, r8)
 8001788:	000003ff 	.word	0x000003ff
 800178c:	000007ff 	.word	0x000007ff
 8001790:	0000041e 	.word	0x0000041e
 8001794:	0000043e 	.word	0x0000043e

08001798 <__eqdf2>:
 8001798:	b5f0      	push	{r4, r5, r6, r7, lr}
 800179a:	464f      	mov	r7, r9
 800179c:	4646      	mov	r6, r8
 800179e:	46d6      	mov	lr, sl
 80017a0:	4684      	mov	ip, r0
 80017a2:	b5c0      	push	{r6, r7, lr}
 80017a4:	4680      	mov	r8, r0
 80017a6:	4e19      	ldr	r6, [pc, #100]	; (800180c <__eqdf2+0x74>)
 80017a8:	0318      	lsls	r0, r3, #12
 80017aa:	030f      	lsls	r7, r1, #12
 80017ac:	004d      	lsls	r5, r1, #1
 80017ae:	0b00      	lsrs	r0, r0, #12
 80017b0:	005c      	lsls	r4, r3, #1
 80017b2:	4682      	mov	sl, r0
 80017b4:	0b3f      	lsrs	r7, r7, #12
 80017b6:	0d6d      	lsrs	r5, r5, #21
 80017b8:	0fc9      	lsrs	r1, r1, #31
 80017ba:	4691      	mov	r9, r2
 80017bc:	0d64      	lsrs	r4, r4, #21
 80017be:	0fdb      	lsrs	r3, r3, #31
 80017c0:	2001      	movs	r0, #1
 80017c2:	42b5      	cmp	r5, r6
 80017c4:	d00a      	beq.n	80017dc <__eqdf2+0x44>
 80017c6:	42b4      	cmp	r4, r6
 80017c8:	d003      	beq.n	80017d2 <__eqdf2+0x3a>
 80017ca:	42a5      	cmp	r5, r4
 80017cc:	d101      	bne.n	80017d2 <__eqdf2+0x3a>
 80017ce:	4557      	cmp	r7, sl
 80017d0:	d00c      	beq.n	80017ec <__eqdf2+0x54>
 80017d2:	bc1c      	pop	{r2, r3, r4}
 80017d4:	4690      	mov	r8, r2
 80017d6:	4699      	mov	r9, r3
 80017d8:	46a2      	mov	sl, r4
 80017da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017dc:	4666      	mov	r6, ip
 80017de:	433e      	orrs	r6, r7
 80017e0:	d1f7      	bne.n	80017d2 <__eqdf2+0x3a>
 80017e2:	42ac      	cmp	r4, r5
 80017e4:	d1f5      	bne.n	80017d2 <__eqdf2+0x3a>
 80017e6:	4654      	mov	r4, sl
 80017e8:	4314      	orrs	r4, r2
 80017ea:	d1f2      	bne.n	80017d2 <__eqdf2+0x3a>
 80017ec:	2001      	movs	r0, #1
 80017ee:	45c8      	cmp	r8, r9
 80017f0:	d1ef      	bne.n	80017d2 <__eqdf2+0x3a>
 80017f2:	4299      	cmp	r1, r3
 80017f4:	d007      	beq.n	8001806 <__eqdf2+0x6e>
 80017f6:	2d00      	cmp	r5, #0
 80017f8:	d1eb      	bne.n	80017d2 <__eqdf2+0x3a>
 80017fa:	4663      	mov	r3, ip
 80017fc:	431f      	orrs	r7, r3
 80017fe:	0038      	movs	r0, r7
 8001800:	1e47      	subs	r7, r0, #1
 8001802:	41b8      	sbcs	r0, r7
 8001804:	e7e5      	b.n	80017d2 <__eqdf2+0x3a>
 8001806:	2000      	movs	r0, #0
 8001808:	e7e3      	b.n	80017d2 <__eqdf2+0x3a>
 800180a:	46c0      	nop			; (mov r8, r8)
 800180c:	000007ff 	.word	0x000007ff

08001810 <__gedf2>:
 8001810:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001812:	464f      	mov	r7, r9
 8001814:	4646      	mov	r6, r8
 8001816:	46d6      	mov	lr, sl
 8001818:	004d      	lsls	r5, r1, #1
 800181a:	b5c0      	push	{r6, r7, lr}
 800181c:	030e      	lsls	r6, r1, #12
 800181e:	0fc9      	lsrs	r1, r1, #31
 8001820:	468a      	mov	sl, r1
 8001822:	492c      	ldr	r1, [pc, #176]	; (80018d4 <__gedf2+0xc4>)
 8001824:	031f      	lsls	r7, r3, #12
 8001826:	005c      	lsls	r4, r3, #1
 8001828:	4680      	mov	r8, r0
 800182a:	0b36      	lsrs	r6, r6, #12
 800182c:	0d6d      	lsrs	r5, r5, #21
 800182e:	4691      	mov	r9, r2
 8001830:	0b3f      	lsrs	r7, r7, #12
 8001832:	0d64      	lsrs	r4, r4, #21
 8001834:	0fdb      	lsrs	r3, r3, #31
 8001836:	428d      	cmp	r5, r1
 8001838:	d01e      	beq.n	8001878 <__gedf2+0x68>
 800183a:	428c      	cmp	r4, r1
 800183c:	d016      	beq.n	800186c <__gedf2+0x5c>
 800183e:	2d00      	cmp	r5, #0
 8001840:	d11e      	bne.n	8001880 <__gedf2+0x70>
 8001842:	4330      	orrs	r0, r6
 8001844:	4684      	mov	ip, r0
 8001846:	2c00      	cmp	r4, #0
 8001848:	d101      	bne.n	800184e <__gedf2+0x3e>
 800184a:	433a      	orrs	r2, r7
 800184c:	d023      	beq.n	8001896 <__gedf2+0x86>
 800184e:	4662      	mov	r2, ip
 8001850:	2a00      	cmp	r2, #0
 8001852:	d01a      	beq.n	800188a <__gedf2+0x7a>
 8001854:	459a      	cmp	sl, r3
 8001856:	d029      	beq.n	80018ac <__gedf2+0x9c>
 8001858:	4651      	mov	r1, sl
 800185a:	2002      	movs	r0, #2
 800185c:	3901      	subs	r1, #1
 800185e:	4008      	ands	r0, r1
 8001860:	3801      	subs	r0, #1
 8001862:	bc1c      	pop	{r2, r3, r4}
 8001864:	4690      	mov	r8, r2
 8001866:	4699      	mov	r9, r3
 8001868:	46a2      	mov	sl, r4
 800186a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800186c:	0039      	movs	r1, r7
 800186e:	4311      	orrs	r1, r2
 8001870:	d0e5      	beq.n	800183e <__gedf2+0x2e>
 8001872:	2002      	movs	r0, #2
 8001874:	4240      	negs	r0, r0
 8001876:	e7f4      	b.n	8001862 <__gedf2+0x52>
 8001878:	4330      	orrs	r0, r6
 800187a:	d1fa      	bne.n	8001872 <__gedf2+0x62>
 800187c:	42ac      	cmp	r4, r5
 800187e:	d00f      	beq.n	80018a0 <__gedf2+0x90>
 8001880:	2c00      	cmp	r4, #0
 8001882:	d10f      	bne.n	80018a4 <__gedf2+0x94>
 8001884:	433a      	orrs	r2, r7
 8001886:	d0e7      	beq.n	8001858 <__gedf2+0x48>
 8001888:	e00c      	b.n	80018a4 <__gedf2+0x94>
 800188a:	2201      	movs	r2, #1
 800188c:	3b01      	subs	r3, #1
 800188e:	4393      	bics	r3, r2
 8001890:	0018      	movs	r0, r3
 8001892:	3001      	adds	r0, #1
 8001894:	e7e5      	b.n	8001862 <__gedf2+0x52>
 8001896:	4663      	mov	r3, ip
 8001898:	2000      	movs	r0, #0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d0e1      	beq.n	8001862 <__gedf2+0x52>
 800189e:	e7db      	b.n	8001858 <__gedf2+0x48>
 80018a0:	433a      	orrs	r2, r7
 80018a2:	d1e6      	bne.n	8001872 <__gedf2+0x62>
 80018a4:	459a      	cmp	sl, r3
 80018a6:	d1d7      	bne.n	8001858 <__gedf2+0x48>
 80018a8:	42a5      	cmp	r5, r4
 80018aa:	dcd5      	bgt.n	8001858 <__gedf2+0x48>
 80018ac:	42a5      	cmp	r5, r4
 80018ae:	db05      	blt.n	80018bc <__gedf2+0xac>
 80018b0:	42be      	cmp	r6, r7
 80018b2:	d8d1      	bhi.n	8001858 <__gedf2+0x48>
 80018b4:	d008      	beq.n	80018c8 <__gedf2+0xb8>
 80018b6:	2000      	movs	r0, #0
 80018b8:	42be      	cmp	r6, r7
 80018ba:	d2d2      	bcs.n	8001862 <__gedf2+0x52>
 80018bc:	4650      	mov	r0, sl
 80018be:	2301      	movs	r3, #1
 80018c0:	3801      	subs	r0, #1
 80018c2:	4398      	bics	r0, r3
 80018c4:	3001      	adds	r0, #1
 80018c6:	e7cc      	b.n	8001862 <__gedf2+0x52>
 80018c8:	45c8      	cmp	r8, r9
 80018ca:	d8c5      	bhi.n	8001858 <__gedf2+0x48>
 80018cc:	2000      	movs	r0, #0
 80018ce:	45c8      	cmp	r8, r9
 80018d0:	d3f4      	bcc.n	80018bc <__gedf2+0xac>
 80018d2:	e7c6      	b.n	8001862 <__gedf2+0x52>
 80018d4:	000007ff 	.word	0x000007ff

080018d8 <__ledf2>:
 80018d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018da:	464f      	mov	r7, r9
 80018dc:	4646      	mov	r6, r8
 80018de:	46d6      	mov	lr, sl
 80018e0:	004d      	lsls	r5, r1, #1
 80018e2:	b5c0      	push	{r6, r7, lr}
 80018e4:	030e      	lsls	r6, r1, #12
 80018e6:	0fc9      	lsrs	r1, r1, #31
 80018e8:	468a      	mov	sl, r1
 80018ea:	492e      	ldr	r1, [pc, #184]	; (80019a4 <__ledf2+0xcc>)
 80018ec:	031f      	lsls	r7, r3, #12
 80018ee:	005c      	lsls	r4, r3, #1
 80018f0:	4680      	mov	r8, r0
 80018f2:	0b36      	lsrs	r6, r6, #12
 80018f4:	0d6d      	lsrs	r5, r5, #21
 80018f6:	4691      	mov	r9, r2
 80018f8:	0b3f      	lsrs	r7, r7, #12
 80018fa:	0d64      	lsrs	r4, r4, #21
 80018fc:	0fdb      	lsrs	r3, r3, #31
 80018fe:	428d      	cmp	r5, r1
 8001900:	d018      	beq.n	8001934 <__ledf2+0x5c>
 8001902:	428c      	cmp	r4, r1
 8001904:	d011      	beq.n	800192a <__ledf2+0x52>
 8001906:	2d00      	cmp	r5, #0
 8001908:	d118      	bne.n	800193c <__ledf2+0x64>
 800190a:	4330      	orrs	r0, r6
 800190c:	4684      	mov	ip, r0
 800190e:	2c00      	cmp	r4, #0
 8001910:	d11e      	bne.n	8001950 <__ledf2+0x78>
 8001912:	433a      	orrs	r2, r7
 8001914:	d11c      	bne.n	8001950 <__ledf2+0x78>
 8001916:	4663      	mov	r3, ip
 8001918:	2000      	movs	r0, #0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d030      	beq.n	8001980 <__ledf2+0xa8>
 800191e:	4651      	mov	r1, sl
 8001920:	2002      	movs	r0, #2
 8001922:	3901      	subs	r1, #1
 8001924:	4008      	ands	r0, r1
 8001926:	3801      	subs	r0, #1
 8001928:	e02a      	b.n	8001980 <__ledf2+0xa8>
 800192a:	0039      	movs	r1, r7
 800192c:	4311      	orrs	r1, r2
 800192e:	d0ea      	beq.n	8001906 <__ledf2+0x2e>
 8001930:	2002      	movs	r0, #2
 8001932:	e025      	b.n	8001980 <__ledf2+0xa8>
 8001934:	4330      	orrs	r0, r6
 8001936:	d1fb      	bne.n	8001930 <__ledf2+0x58>
 8001938:	42ac      	cmp	r4, r5
 800193a:	d026      	beq.n	800198a <__ledf2+0xb2>
 800193c:	2c00      	cmp	r4, #0
 800193e:	d126      	bne.n	800198e <__ledf2+0xb6>
 8001940:	433a      	orrs	r2, r7
 8001942:	d124      	bne.n	800198e <__ledf2+0xb6>
 8001944:	4651      	mov	r1, sl
 8001946:	2002      	movs	r0, #2
 8001948:	3901      	subs	r1, #1
 800194a:	4008      	ands	r0, r1
 800194c:	3801      	subs	r0, #1
 800194e:	e017      	b.n	8001980 <__ledf2+0xa8>
 8001950:	4662      	mov	r2, ip
 8001952:	2a00      	cmp	r2, #0
 8001954:	d00f      	beq.n	8001976 <__ledf2+0x9e>
 8001956:	459a      	cmp	sl, r3
 8001958:	d1e1      	bne.n	800191e <__ledf2+0x46>
 800195a:	42a5      	cmp	r5, r4
 800195c:	db05      	blt.n	800196a <__ledf2+0x92>
 800195e:	42be      	cmp	r6, r7
 8001960:	d8dd      	bhi.n	800191e <__ledf2+0x46>
 8001962:	d019      	beq.n	8001998 <__ledf2+0xc0>
 8001964:	2000      	movs	r0, #0
 8001966:	42be      	cmp	r6, r7
 8001968:	d20a      	bcs.n	8001980 <__ledf2+0xa8>
 800196a:	4650      	mov	r0, sl
 800196c:	2301      	movs	r3, #1
 800196e:	3801      	subs	r0, #1
 8001970:	4398      	bics	r0, r3
 8001972:	3001      	adds	r0, #1
 8001974:	e004      	b.n	8001980 <__ledf2+0xa8>
 8001976:	2201      	movs	r2, #1
 8001978:	3b01      	subs	r3, #1
 800197a:	4393      	bics	r3, r2
 800197c:	0018      	movs	r0, r3
 800197e:	3001      	adds	r0, #1
 8001980:	bc1c      	pop	{r2, r3, r4}
 8001982:	4690      	mov	r8, r2
 8001984:	4699      	mov	r9, r3
 8001986:	46a2      	mov	sl, r4
 8001988:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800198a:	433a      	orrs	r2, r7
 800198c:	d1d0      	bne.n	8001930 <__ledf2+0x58>
 800198e:	459a      	cmp	sl, r3
 8001990:	d1c5      	bne.n	800191e <__ledf2+0x46>
 8001992:	42a5      	cmp	r5, r4
 8001994:	dcc3      	bgt.n	800191e <__ledf2+0x46>
 8001996:	e7e0      	b.n	800195a <__ledf2+0x82>
 8001998:	45c8      	cmp	r8, r9
 800199a:	d8c0      	bhi.n	800191e <__ledf2+0x46>
 800199c:	2000      	movs	r0, #0
 800199e:	45c8      	cmp	r8, r9
 80019a0:	d3e3      	bcc.n	800196a <__ledf2+0x92>
 80019a2:	e7ed      	b.n	8001980 <__ledf2+0xa8>
 80019a4:	000007ff 	.word	0x000007ff

080019a8 <__aeabi_dmul>:
 80019a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019aa:	4657      	mov	r7, sl
 80019ac:	46de      	mov	lr, fp
 80019ae:	464e      	mov	r6, r9
 80019b0:	4645      	mov	r5, r8
 80019b2:	b5e0      	push	{r5, r6, r7, lr}
 80019b4:	4683      	mov	fp, r0
 80019b6:	0006      	movs	r6, r0
 80019b8:	030f      	lsls	r7, r1, #12
 80019ba:	0048      	lsls	r0, r1, #1
 80019bc:	b087      	sub	sp, #28
 80019be:	4692      	mov	sl, r2
 80019c0:	001d      	movs	r5, r3
 80019c2:	0b3f      	lsrs	r7, r7, #12
 80019c4:	0d40      	lsrs	r0, r0, #21
 80019c6:	0fcc      	lsrs	r4, r1, #31
 80019c8:	2800      	cmp	r0, #0
 80019ca:	d100      	bne.n	80019ce <__aeabi_dmul+0x26>
 80019cc:	e06f      	b.n	8001aae <__aeabi_dmul+0x106>
 80019ce:	4bde      	ldr	r3, [pc, #888]	; (8001d48 <__aeabi_dmul+0x3a0>)
 80019d0:	4298      	cmp	r0, r3
 80019d2:	d038      	beq.n	8001a46 <__aeabi_dmul+0x9e>
 80019d4:	2380      	movs	r3, #128	; 0x80
 80019d6:	00ff      	lsls	r7, r7, #3
 80019d8:	041b      	lsls	r3, r3, #16
 80019da:	431f      	orrs	r7, r3
 80019dc:	0f73      	lsrs	r3, r6, #29
 80019de:	433b      	orrs	r3, r7
 80019e0:	9301      	str	r3, [sp, #4]
 80019e2:	4bda      	ldr	r3, [pc, #872]	; (8001d4c <__aeabi_dmul+0x3a4>)
 80019e4:	2700      	movs	r7, #0
 80019e6:	4699      	mov	r9, r3
 80019e8:	2300      	movs	r3, #0
 80019ea:	469b      	mov	fp, r3
 80019ec:	00f6      	lsls	r6, r6, #3
 80019ee:	4481      	add	r9, r0
 80019f0:	032b      	lsls	r3, r5, #12
 80019f2:	0069      	lsls	r1, r5, #1
 80019f4:	0b1b      	lsrs	r3, r3, #12
 80019f6:	4652      	mov	r2, sl
 80019f8:	4698      	mov	r8, r3
 80019fa:	0d49      	lsrs	r1, r1, #21
 80019fc:	0fed      	lsrs	r5, r5, #31
 80019fe:	2900      	cmp	r1, #0
 8001a00:	d100      	bne.n	8001a04 <__aeabi_dmul+0x5c>
 8001a02:	e085      	b.n	8001b10 <__aeabi_dmul+0x168>
 8001a04:	4bd0      	ldr	r3, [pc, #832]	; (8001d48 <__aeabi_dmul+0x3a0>)
 8001a06:	4299      	cmp	r1, r3
 8001a08:	d100      	bne.n	8001a0c <__aeabi_dmul+0x64>
 8001a0a:	e073      	b.n	8001af4 <__aeabi_dmul+0x14c>
 8001a0c:	4643      	mov	r3, r8
 8001a0e:	00da      	lsls	r2, r3, #3
 8001a10:	2380      	movs	r3, #128	; 0x80
 8001a12:	041b      	lsls	r3, r3, #16
 8001a14:	4313      	orrs	r3, r2
 8001a16:	4652      	mov	r2, sl
 8001a18:	48cc      	ldr	r0, [pc, #816]	; (8001d4c <__aeabi_dmul+0x3a4>)
 8001a1a:	0f52      	lsrs	r2, r2, #29
 8001a1c:	4684      	mov	ip, r0
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	4652      	mov	r2, sl
 8001a22:	2000      	movs	r0, #0
 8001a24:	4461      	add	r1, ip
 8001a26:	00d2      	lsls	r2, r2, #3
 8001a28:	4489      	add	r9, r1
 8001a2a:	0021      	movs	r1, r4
 8001a2c:	4069      	eors	r1, r5
 8001a2e:	9100      	str	r1, [sp, #0]
 8001a30:	468c      	mov	ip, r1
 8001a32:	2101      	movs	r1, #1
 8001a34:	4449      	add	r1, r9
 8001a36:	468a      	mov	sl, r1
 8001a38:	2f0f      	cmp	r7, #15
 8001a3a:	d900      	bls.n	8001a3e <__aeabi_dmul+0x96>
 8001a3c:	e090      	b.n	8001b60 <__aeabi_dmul+0x1b8>
 8001a3e:	49c4      	ldr	r1, [pc, #784]	; (8001d50 <__aeabi_dmul+0x3a8>)
 8001a40:	00bf      	lsls	r7, r7, #2
 8001a42:	59cf      	ldr	r7, [r1, r7]
 8001a44:	46bf      	mov	pc, r7
 8001a46:	465b      	mov	r3, fp
 8001a48:	433b      	orrs	r3, r7
 8001a4a:	9301      	str	r3, [sp, #4]
 8001a4c:	d000      	beq.n	8001a50 <__aeabi_dmul+0xa8>
 8001a4e:	e16a      	b.n	8001d26 <__aeabi_dmul+0x37e>
 8001a50:	2302      	movs	r3, #2
 8001a52:	2708      	movs	r7, #8
 8001a54:	2600      	movs	r6, #0
 8001a56:	4681      	mov	r9, r0
 8001a58:	469b      	mov	fp, r3
 8001a5a:	e7c9      	b.n	80019f0 <__aeabi_dmul+0x48>
 8001a5c:	0032      	movs	r2, r6
 8001a5e:	4658      	mov	r0, fp
 8001a60:	9b01      	ldr	r3, [sp, #4]
 8001a62:	4661      	mov	r1, ip
 8001a64:	9100      	str	r1, [sp, #0]
 8001a66:	2802      	cmp	r0, #2
 8001a68:	d100      	bne.n	8001a6c <__aeabi_dmul+0xc4>
 8001a6a:	e075      	b.n	8001b58 <__aeabi_dmul+0x1b0>
 8001a6c:	2803      	cmp	r0, #3
 8001a6e:	d100      	bne.n	8001a72 <__aeabi_dmul+0xca>
 8001a70:	e1fe      	b.n	8001e70 <__aeabi_dmul+0x4c8>
 8001a72:	2801      	cmp	r0, #1
 8001a74:	d000      	beq.n	8001a78 <__aeabi_dmul+0xd0>
 8001a76:	e12c      	b.n	8001cd2 <__aeabi_dmul+0x32a>
 8001a78:	2300      	movs	r3, #0
 8001a7a:	2700      	movs	r7, #0
 8001a7c:	2600      	movs	r6, #0
 8001a7e:	2500      	movs	r5, #0
 8001a80:	033f      	lsls	r7, r7, #12
 8001a82:	0d2a      	lsrs	r2, r5, #20
 8001a84:	0b3f      	lsrs	r7, r7, #12
 8001a86:	48b3      	ldr	r0, [pc, #716]	; (8001d54 <__aeabi_dmul+0x3ac>)
 8001a88:	0512      	lsls	r2, r2, #20
 8001a8a:	433a      	orrs	r2, r7
 8001a8c:	4002      	ands	r2, r0
 8001a8e:	051b      	lsls	r3, r3, #20
 8001a90:	4313      	orrs	r3, r2
 8001a92:	9a00      	ldr	r2, [sp, #0]
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	07d1      	lsls	r1, r2, #31
 8001a98:	085b      	lsrs	r3, r3, #1
 8001a9a:	430b      	orrs	r3, r1
 8001a9c:	0030      	movs	r0, r6
 8001a9e:	0019      	movs	r1, r3
 8001aa0:	b007      	add	sp, #28
 8001aa2:	bc3c      	pop	{r2, r3, r4, r5}
 8001aa4:	4690      	mov	r8, r2
 8001aa6:	4699      	mov	r9, r3
 8001aa8:	46a2      	mov	sl, r4
 8001aaa:	46ab      	mov	fp, r5
 8001aac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001aae:	465b      	mov	r3, fp
 8001ab0:	433b      	orrs	r3, r7
 8001ab2:	9301      	str	r3, [sp, #4]
 8001ab4:	d100      	bne.n	8001ab8 <__aeabi_dmul+0x110>
 8001ab6:	e12f      	b.n	8001d18 <__aeabi_dmul+0x370>
 8001ab8:	2f00      	cmp	r7, #0
 8001aba:	d100      	bne.n	8001abe <__aeabi_dmul+0x116>
 8001abc:	e1a5      	b.n	8001e0a <__aeabi_dmul+0x462>
 8001abe:	0038      	movs	r0, r7
 8001ac0:	f000 fe20 	bl	8002704 <__clzsi2>
 8001ac4:	0003      	movs	r3, r0
 8001ac6:	3b0b      	subs	r3, #11
 8001ac8:	2b1c      	cmp	r3, #28
 8001aca:	dd00      	ble.n	8001ace <__aeabi_dmul+0x126>
 8001acc:	e196      	b.n	8001dfc <__aeabi_dmul+0x454>
 8001ace:	221d      	movs	r2, #29
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	465a      	mov	r2, fp
 8001ad4:	0001      	movs	r1, r0
 8001ad6:	40da      	lsrs	r2, r3
 8001ad8:	465e      	mov	r6, fp
 8001ada:	3908      	subs	r1, #8
 8001adc:	408f      	lsls	r7, r1
 8001ade:	0013      	movs	r3, r2
 8001ae0:	408e      	lsls	r6, r1
 8001ae2:	433b      	orrs	r3, r7
 8001ae4:	9301      	str	r3, [sp, #4]
 8001ae6:	4b9c      	ldr	r3, [pc, #624]	; (8001d58 <__aeabi_dmul+0x3b0>)
 8001ae8:	2700      	movs	r7, #0
 8001aea:	1a1b      	subs	r3, r3, r0
 8001aec:	4699      	mov	r9, r3
 8001aee:	2300      	movs	r3, #0
 8001af0:	469b      	mov	fp, r3
 8001af2:	e77d      	b.n	80019f0 <__aeabi_dmul+0x48>
 8001af4:	4641      	mov	r1, r8
 8001af6:	4653      	mov	r3, sl
 8001af8:	430b      	orrs	r3, r1
 8001afa:	4993      	ldr	r1, [pc, #588]	; (8001d48 <__aeabi_dmul+0x3a0>)
 8001afc:	468c      	mov	ip, r1
 8001afe:	44e1      	add	r9, ip
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d000      	beq.n	8001b06 <__aeabi_dmul+0x15e>
 8001b04:	e11a      	b.n	8001d3c <__aeabi_dmul+0x394>
 8001b06:	2202      	movs	r2, #2
 8001b08:	2002      	movs	r0, #2
 8001b0a:	4317      	orrs	r7, r2
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	e78c      	b.n	8001a2a <__aeabi_dmul+0x82>
 8001b10:	4313      	orrs	r3, r2
 8001b12:	d100      	bne.n	8001b16 <__aeabi_dmul+0x16e>
 8001b14:	e10d      	b.n	8001d32 <__aeabi_dmul+0x38a>
 8001b16:	4643      	mov	r3, r8
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d100      	bne.n	8001b1e <__aeabi_dmul+0x176>
 8001b1c:	e181      	b.n	8001e22 <__aeabi_dmul+0x47a>
 8001b1e:	4640      	mov	r0, r8
 8001b20:	f000 fdf0 	bl	8002704 <__clzsi2>
 8001b24:	0002      	movs	r2, r0
 8001b26:	3a0b      	subs	r2, #11
 8001b28:	2a1c      	cmp	r2, #28
 8001b2a:	dd00      	ble.n	8001b2e <__aeabi_dmul+0x186>
 8001b2c:	e172      	b.n	8001e14 <__aeabi_dmul+0x46c>
 8001b2e:	0001      	movs	r1, r0
 8001b30:	4643      	mov	r3, r8
 8001b32:	3908      	subs	r1, #8
 8001b34:	408b      	lsls	r3, r1
 8001b36:	4698      	mov	r8, r3
 8001b38:	231d      	movs	r3, #29
 8001b3a:	1a9a      	subs	r2, r3, r2
 8001b3c:	4653      	mov	r3, sl
 8001b3e:	40d3      	lsrs	r3, r2
 8001b40:	001a      	movs	r2, r3
 8001b42:	4643      	mov	r3, r8
 8001b44:	4313      	orrs	r3, r2
 8001b46:	4652      	mov	r2, sl
 8001b48:	408a      	lsls	r2, r1
 8001b4a:	4649      	mov	r1, r9
 8001b4c:	1a08      	subs	r0, r1, r0
 8001b4e:	4982      	ldr	r1, [pc, #520]	; (8001d58 <__aeabi_dmul+0x3b0>)
 8001b50:	4689      	mov	r9, r1
 8001b52:	4481      	add	r9, r0
 8001b54:	2000      	movs	r0, #0
 8001b56:	e768      	b.n	8001a2a <__aeabi_dmul+0x82>
 8001b58:	4b7b      	ldr	r3, [pc, #492]	; (8001d48 <__aeabi_dmul+0x3a0>)
 8001b5a:	2700      	movs	r7, #0
 8001b5c:	2600      	movs	r6, #0
 8001b5e:	e78e      	b.n	8001a7e <__aeabi_dmul+0xd6>
 8001b60:	0c14      	lsrs	r4, r2, #16
 8001b62:	0412      	lsls	r2, r2, #16
 8001b64:	0c12      	lsrs	r2, r2, #16
 8001b66:	0011      	movs	r1, r2
 8001b68:	0c37      	lsrs	r7, r6, #16
 8001b6a:	0436      	lsls	r6, r6, #16
 8001b6c:	0c35      	lsrs	r5, r6, #16
 8001b6e:	4379      	muls	r1, r7
 8001b70:	0028      	movs	r0, r5
 8001b72:	468c      	mov	ip, r1
 8001b74:	002e      	movs	r6, r5
 8001b76:	4360      	muls	r0, r4
 8001b78:	4460      	add	r0, ip
 8001b7a:	4683      	mov	fp, r0
 8001b7c:	4356      	muls	r6, r2
 8001b7e:	0021      	movs	r1, r4
 8001b80:	0c30      	lsrs	r0, r6, #16
 8001b82:	4680      	mov	r8, r0
 8001b84:	4658      	mov	r0, fp
 8001b86:	4379      	muls	r1, r7
 8001b88:	4440      	add	r0, r8
 8001b8a:	9102      	str	r1, [sp, #8]
 8001b8c:	4584      	cmp	ip, r0
 8001b8e:	d906      	bls.n	8001b9e <__aeabi_dmul+0x1f6>
 8001b90:	4688      	mov	r8, r1
 8001b92:	2180      	movs	r1, #128	; 0x80
 8001b94:	0249      	lsls	r1, r1, #9
 8001b96:	468c      	mov	ip, r1
 8001b98:	44e0      	add	r8, ip
 8001b9a:	4641      	mov	r1, r8
 8001b9c:	9102      	str	r1, [sp, #8]
 8001b9e:	0436      	lsls	r6, r6, #16
 8001ba0:	0c01      	lsrs	r1, r0, #16
 8001ba2:	0c36      	lsrs	r6, r6, #16
 8001ba4:	0400      	lsls	r0, r0, #16
 8001ba6:	468b      	mov	fp, r1
 8001ba8:	1981      	adds	r1, r0, r6
 8001baa:	0c1e      	lsrs	r6, r3, #16
 8001bac:	041b      	lsls	r3, r3, #16
 8001bae:	0c1b      	lsrs	r3, r3, #16
 8001bb0:	9103      	str	r1, [sp, #12]
 8001bb2:	0019      	movs	r1, r3
 8001bb4:	4379      	muls	r1, r7
 8001bb6:	468c      	mov	ip, r1
 8001bb8:	0028      	movs	r0, r5
 8001bba:	4375      	muls	r5, r6
 8001bbc:	4465      	add	r5, ip
 8001bbe:	46a8      	mov	r8, r5
 8001bc0:	4358      	muls	r0, r3
 8001bc2:	0c05      	lsrs	r5, r0, #16
 8001bc4:	4445      	add	r5, r8
 8001bc6:	4377      	muls	r7, r6
 8001bc8:	42a9      	cmp	r1, r5
 8001bca:	d903      	bls.n	8001bd4 <__aeabi_dmul+0x22c>
 8001bcc:	2180      	movs	r1, #128	; 0x80
 8001bce:	0249      	lsls	r1, r1, #9
 8001bd0:	468c      	mov	ip, r1
 8001bd2:	4467      	add	r7, ip
 8001bd4:	0c29      	lsrs	r1, r5, #16
 8001bd6:	468c      	mov	ip, r1
 8001bd8:	0039      	movs	r1, r7
 8001bda:	0400      	lsls	r0, r0, #16
 8001bdc:	0c00      	lsrs	r0, r0, #16
 8001bde:	042d      	lsls	r5, r5, #16
 8001be0:	182d      	adds	r5, r5, r0
 8001be2:	4461      	add	r1, ip
 8001be4:	44ab      	add	fp, r5
 8001be6:	9105      	str	r1, [sp, #20]
 8001be8:	4659      	mov	r1, fp
 8001bea:	9104      	str	r1, [sp, #16]
 8001bec:	9901      	ldr	r1, [sp, #4]
 8001bee:	040f      	lsls	r7, r1, #16
 8001bf0:	0c3f      	lsrs	r7, r7, #16
 8001bf2:	0c08      	lsrs	r0, r1, #16
 8001bf4:	0039      	movs	r1, r7
 8001bf6:	4351      	muls	r1, r2
 8001bf8:	4342      	muls	r2, r0
 8001bfa:	4690      	mov	r8, r2
 8001bfc:	0002      	movs	r2, r0
 8001bfe:	468c      	mov	ip, r1
 8001c00:	0c09      	lsrs	r1, r1, #16
 8001c02:	468b      	mov	fp, r1
 8001c04:	4362      	muls	r2, r4
 8001c06:	437c      	muls	r4, r7
 8001c08:	4444      	add	r4, r8
 8001c0a:	445c      	add	r4, fp
 8001c0c:	45a0      	cmp	r8, r4
 8001c0e:	d903      	bls.n	8001c18 <__aeabi_dmul+0x270>
 8001c10:	2180      	movs	r1, #128	; 0x80
 8001c12:	0249      	lsls	r1, r1, #9
 8001c14:	4688      	mov	r8, r1
 8001c16:	4442      	add	r2, r8
 8001c18:	0c21      	lsrs	r1, r4, #16
 8001c1a:	4688      	mov	r8, r1
 8001c1c:	4661      	mov	r1, ip
 8001c1e:	0409      	lsls	r1, r1, #16
 8001c20:	0c09      	lsrs	r1, r1, #16
 8001c22:	468c      	mov	ip, r1
 8001c24:	0039      	movs	r1, r7
 8001c26:	4359      	muls	r1, r3
 8001c28:	4343      	muls	r3, r0
 8001c2a:	4370      	muls	r0, r6
 8001c2c:	437e      	muls	r6, r7
 8001c2e:	0c0f      	lsrs	r7, r1, #16
 8001c30:	18f6      	adds	r6, r6, r3
 8001c32:	0424      	lsls	r4, r4, #16
 8001c34:	19be      	adds	r6, r7, r6
 8001c36:	4464      	add	r4, ip
 8001c38:	4442      	add	r2, r8
 8001c3a:	468c      	mov	ip, r1
 8001c3c:	42b3      	cmp	r3, r6
 8001c3e:	d903      	bls.n	8001c48 <__aeabi_dmul+0x2a0>
 8001c40:	2380      	movs	r3, #128	; 0x80
 8001c42:	025b      	lsls	r3, r3, #9
 8001c44:	4698      	mov	r8, r3
 8001c46:	4440      	add	r0, r8
 8001c48:	9b02      	ldr	r3, [sp, #8]
 8001c4a:	4661      	mov	r1, ip
 8001c4c:	4698      	mov	r8, r3
 8001c4e:	9b04      	ldr	r3, [sp, #16]
 8001c50:	0437      	lsls	r7, r6, #16
 8001c52:	4443      	add	r3, r8
 8001c54:	469b      	mov	fp, r3
 8001c56:	45ab      	cmp	fp, r5
 8001c58:	41ad      	sbcs	r5, r5
 8001c5a:	426b      	negs	r3, r5
 8001c5c:	040d      	lsls	r5, r1, #16
 8001c5e:	9905      	ldr	r1, [sp, #20]
 8001c60:	0c2d      	lsrs	r5, r5, #16
 8001c62:	468c      	mov	ip, r1
 8001c64:	197f      	adds	r7, r7, r5
 8001c66:	4467      	add	r7, ip
 8001c68:	18fd      	adds	r5, r7, r3
 8001c6a:	46a8      	mov	r8, r5
 8001c6c:	465d      	mov	r5, fp
 8001c6e:	192d      	adds	r5, r5, r4
 8001c70:	42a5      	cmp	r5, r4
 8001c72:	41a4      	sbcs	r4, r4
 8001c74:	4693      	mov	fp, r2
 8001c76:	4264      	negs	r4, r4
 8001c78:	46a4      	mov	ip, r4
 8001c7a:	44c3      	add	fp, r8
 8001c7c:	44dc      	add	ip, fp
 8001c7e:	428f      	cmp	r7, r1
 8001c80:	41bf      	sbcs	r7, r7
 8001c82:	4598      	cmp	r8, r3
 8001c84:	419b      	sbcs	r3, r3
 8001c86:	4593      	cmp	fp, r2
 8001c88:	4192      	sbcs	r2, r2
 8001c8a:	45a4      	cmp	ip, r4
 8001c8c:	41a4      	sbcs	r4, r4
 8001c8e:	425b      	negs	r3, r3
 8001c90:	427f      	negs	r7, r7
 8001c92:	431f      	orrs	r7, r3
 8001c94:	0c36      	lsrs	r6, r6, #16
 8001c96:	4252      	negs	r2, r2
 8001c98:	4264      	negs	r4, r4
 8001c9a:	19bf      	adds	r7, r7, r6
 8001c9c:	4322      	orrs	r2, r4
 8001c9e:	18bf      	adds	r7, r7, r2
 8001ca0:	4662      	mov	r2, ip
 8001ca2:	1838      	adds	r0, r7, r0
 8001ca4:	0243      	lsls	r3, r0, #9
 8001ca6:	0dd2      	lsrs	r2, r2, #23
 8001ca8:	9903      	ldr	r1, [sp, #12]
 8001caa:	4313      	orrs	r3, r2
 8001cac:	026a      	lsls	r2, r5, #9
 8001cae:	430a      	orrs	r2, r1
 8001cb0:	1e50      	subs	r0, r2, #1
 8001cb2:	4182      	sbcs	r2, r0
 8001cb4:	4661      	mov	r1, ip
 8001cb6:	0ded      	lsrs	r5, r5, #23
 8001cb8:	432a      	orrs	r2, r5
 8001cba:	024e      	lsls	r6, r1, #9
 8001cbc:	4332      	orrs	r2, r6
 8001cbe:	01d9      	lsls	r1, r3, #7
 8001cc0:	d400      	bmi.n	8001cc4 <__aeabi_dmul+0x31c>
 8001cc2:	e0b3      	b.n	8001e2c <__aeabi_dmul+0x484>
 8001cc4:	2601      	movs	r6, #1
 8001cc6:	0850      	lsrs	r0, r2, #1
 8001cc8:	4032      	ands	r2, r6
 8001cca:	4302      	orrs	r2, r0
 8001ccc:	07de      	lsls	r6, r3, #31
 8001cce:	4332      	orrs	r2, r6
 8001cd0:	085b      	lsrs	r3, r3, #1
 8001cd2:	4c22      	ldr	r4, [pc, #136]	; (8001d5c <__aeabi_dmul+0x3b4>)
 8001cd4:	4454      	add	r4, sl
 8001cd6:	2c00      	cmp	r4, #0
 8001cd8:	dd62      	ble.n	8001da0 <__aeabi_dmul+0x3f8>
 8001cda:	0751      	lsls	r1, r2, #29
 8001cdc:	d009      	beq.n	8001cf2 <__aeabi_dmul+0x34a>
 8001cde:	200f      	movs	r0, #15
 8001ce0:	4010      	ands	r0, r2
 8001ce2:	2804      	cmp	r0, #4
 8001ce4:	d005      	beq.n	8001cf2 <__aeabi_dmul+0x34a>
 8001ce6:	1d10      	adds	r0, r2, #4
 8001ce8:	4290      	cmp	r0, r2
 8001cea:	4192      	sbcs	r2, r2
 8001cec:	4252      	negs	r2, r2
 8001cee:	189b      	adds	r3, r3, r2
 8001cf0:	0002      	movs	r2, r0
 8001cf2:	01d9      	lsls	r1, r3, #7
 8001cf4:	d504      	bpl.n	8001d00 <__aeabi_dmul+0x358>
 8001cf6:	2480      	movs	r4, #128	; 0x80
 8001cf8:	4819      	ldr	r0, [pc, #100]	; (8001d60 <__aeabi_dmul+0x3b8>)
 8001cfa:	00e4      	lsls	r4, r4, #3
 8001cfc:	4003      	ands	r3, r0
 8001cfe:	4454      	add	r4, sl
 8001d00:	4818      	ldr	r0, [pc, #96]	; (8001d64 <__aeabi_dmul+0x3bc>)
 8001d02:	4284      	cmp	r4, r0
 8001d04:	dd00      	ble.n	8001d08 <__aeabi_dmul+0x360>
 8001d06:	e727      	b.n	8001b58 <__aeabi_dmul+0x1b0>
 8001d08:	075e      	lsls	r6, r3, #29
 8001d0a:	025b      	lsls	r3, r3, #9
 8001d0c:	08d2      	lsrs	r2, r2, #3
 8001d0e:	0b1f      	lsrs	r7, r3, #12
 8001d10:	0563      	lsls	r3, r4, #21
 8001d12:	4316      	orrs	r6, r2
 8001d14:	0d5b      	lsrs	r3, r3, #21
 8001d16:	e6b2      	b.n	8001a7e <__aeabi_dmul+0xd6>
 8001d18:	2300      	movs	r3, #0
 8001d1a:	4699      	mov	r9, r3
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	2704      	movs	r7, #4
 8001d20:	2600      	movs	r6, #0
 8001d22:	469b      	mov	fp, r3
 8001d24:	e664      	b.n	80019f0 <__aeabi_dmul+0x48>
 8001d26:	2303      	movs	r3, #3
 8001d28:	9701      	str	r7, [sp, #4]
 8001d2a:	4681      	mov	r9, r0
 8001d2c:	270c      	movs	r7, #12
 8001d2e:	469b      	mov	fp, r3
 8001d30:	e65e      	b.n	80019f0 <__aeabi_dmul+0x48>
 8001d32:	2201      	movs	r2, #1
 8001d34:	2001      	movs	r0, #1
 8001d36:	4317      	orrs	r7, r2
 8001d38:	2200      	movs	r2, #0
 8001d3a:	e676      	b.n	8001a2a <__aeabi_dmul+0x82>
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	2003      	movs	r0, #3
 8001d40:	431f      	orrs	r7, r3
 8001d42:	4643      	mov	r3, r8
 8001d44:	e671      	b.n	8001a2a <__aeabi_dmul+0x82>
 8001d46:	46c0      	nop			; (mov r8, r8)
 8001d48:	000007ff 	.word	0x000007ff
 8001d4c:	fffffc01 	.word	0xfffffc01
 8001d50:	0802132c 	.word	0x0802132c
 8001d54:	800fffff 	.word	0x800fffff
 8001d58:	fffffc0d 	.word	0xfffffc0d
 8001d5c:	000003ff 	.word	0x000003ff
 8001d60:	feffffff 	.word	0xfeffffff
 8001d64:	000007fe 	.word	0x000007fe
 8001d68:	2300      	movs	r3, #0
 8001d6a:	2780      	movs	r7, #128	; 0x80
 8001d6c:	9300      	str	r3, [sp, #0]
 8001d6e:	033f      	lsls	r7, r7, #12
 8001d70:	2600      	movs	r6, #0
 8001d72:	4b43      	ldr	r3, [pc, #268]	; (8001e80 <__aeabi_dmul+0x4d8>)
 8001d74:	e683      	b.n	8001a7e <__aeabi_dmul+0xd6>
 8001d76:	9b01      	ldr	r3, [sp, #4]
 8001d78:	0032      	movs	r2, r6
 8001d7a:	46a4      	mov	ip, r4
 8001d7c:	4658      	mov	r0, fp
 8001d7e:	e670      	b.n	8001a62 <__aeabi_dmul+0xba>
 8001d80:	46ac      	mov	ip, r5
 8001d82:	e66e      	b.n	8001a62 <__aeabi_dmul+0xba>
 8001d84:	2780      	movs	r7, #128	; 0x80
 8001d86:	9901      	ldr	r1, [sp, #4]
 8001d88:	033f      	lsls	r7, r7, #12
 8001d8a:	4239      	tst	r1, r7
 8001d8c:	d02d      	beq.n	8001dea <__aeabi_dmul+0x442>
 8001d8e:	423b      	tst	r3, r7
 8001d90:	d12b      	bne.n	8001dea <__aeabi_dmul+0x442>
 8001d92:	431f      	orrs	r7, r3
 8001d94:	033f      	lsls	r7, r7, #12
 8001d96:	0b3f      	lsrs	r7, r7, #12
 8001d98:	9500      	str	r5, [sp, #0]
 8001d9a:	0016      	movs	r6, r2
 8001d9c:	4b38      	ldr	r3, [pc, #224]	; (8001e80 <__aeabi_dmul+0x4d8>)
 8001d9e:	e66e      	b.n	8001a7e <__aeabi_dmul+0xd6>
 8001da0:	2501      	movs	r5, #1
 8001da2:	1b2d      	subs	r5, r5, r4
 8001da4:	2d38      	cmp	r5, #56	; 0x38
 8001da6:	dd00      	ble.n	8001daa <__aeabi_dmul+0x402>
 8001da8:	e666      	b.n	8001a78 <__aeabi_dmul+0xd0>
 8001daa:	2d1f      	cmp	r5, #31
 8001dac:	dc40      	bgt.n	8001e30 <__aeabi_dmul+0x488>
 8001dae:	4835      	ldr	r0, [pc, #212]	; (8001e84 <__aeabi_dmul+0x4dc>)
 8001db0:	001c      	movs	r4, r3
 8001db2:	4450      	add	r0, sl
 8001db4:	0016      	movs	r6, r2
 8001db6:	4082      	lsls	r2, r0
 8001db8:	4084      	lsls	r4, r0
 8001dba:	40ee      	lsrs	r6, r5
 8001dbc:	1e50      	subs	r0, r2, #1
 8001dbe:	4182      	sbcs	r2, r0
 8001dc0:	4334      	orrs	r4, r6
 8001dc2:	4314      	orrs	r4, r2
 8001dc4:	40eb      	lsrs	r3, r5
 8001dc6:	0762      	lsls	r2, r4, #29
 8001dc8:	d009      	beq.n	8001dde <__aeabi_dmul+0x436>
 8001dca:	220f      	movs	r2, #15
 8001dcc:	4022      	ands	r2, r4
 8001dce:	2a04      	cmp	r2, #4
 8001dd0:	d005      	beq.n	8001dde <__aeabi_dmul+0x436>
 8001dd2:	0022      	movs	r2, r4
 8001dd4:	1d14      	adds	r4, r2, #4
 8001dd6:	4294      	cmp	r4, r2
 8001dd8:	4180      	sbcs	r0, r0
 8001dda:	4240      	negs	r0, r0
 8001ddc:	181b      	adds	r3, r3, r0
 8001dde:	021a      	lsls	r2, r3, #8
 8001de0:	d53e      	bpl.n	8001e60 <__aeabi_dmul+0x4b8>
 8001de2:	2301      	movs	r3, #1
 8001de4:	2700      	movs	r7, #0
 8001de6:	2600      	movs	r6, #0
 8001de8:	e649      	b.n	8001a7e <__aeabi_dmul+0xd6>
 8001dea:	2780      	movs	r7, #128	; 0x80
 8001dec:	9b01      	ldr	r3, [sp, #4]
 8001dee:	033f      	lsls	r7, r7, #12
 8001df0:	431f      	orrs	r7, r3
 8001df2:	033f      	lsls	r7, r7, #12
 8001df4:	0b3f      	lsrs	r7, r7, #12
 8001df6:	9400      	str	r4, [sp, #0]
 8001df8:	4b21      	ldr	r3, [pc, #132]	; (8001e80 <__aeabi_dmul+0x4d8>)
 8001dfa:	e640      	b.n	8001a7e <__aeabi_dmul+0xd6>
 8001dfc:	0003      	movs	r3, r0
 8001dfe:	465a      	mov	r2, fp
 8001e00:	3b28      	subs	r3, #40	; 0x28
 8001e02:	409a      	lsls	r2, r3
 8001e04:	2600      	movs	r6, #0
 8001e06:	9201      	str	r2, [sp, #4]
 8001e08:	e66d      	b.n	8001ae6 <__aeabi_dmul+0x13e>
 8001e0a:	4658      	mov	r0, fp
 8001e0c:	f000 fc7a 	bl	8002704 <__clzsi2>
 8001e10:	3020      	adds	r0, #32
 8001e12:	e657      	b.n	8001ac4 <__aeabi_dmul+0x11c>
 8001e14:	0003      	movs	r3, r0
 8001e16:	4652      	mov	r2, sl
 8001e18:	3b28      	subs	r3, #40	; 0x28
 8001e1a:	409a      	lsls	r2, r3
 8001e1c:	0013      	movs	r3, r2
 8001e1e:	2200      	movs	r2, #0
 8001e20:	e693      	b.n	8001b4a <__aeabi_dmul+0x1a2>
 8001e22:	4650      	mov	r0, sl
 8001e24:	f000 fc6e 	bl	8002704 <__clzsi2>
 8001e28:	3020      	adds	r0, #32
 8001e2a:	e67b      	b.n	8001b24 <__aeabi_dmul+0x17c>
 8001e2c:	46ca      	mov	sl, r9
 8001e2e:	e750      	b.n	8001cd2 <__aeabi_dmul+0x32a>
 8001e30:	201f      	movs	r0, #31
 8001e32:	001e      	movs	r6, r3
 8001e34:	4240      	negs	r0, r0
 8001e36:	1b04      	subs	r4, r0, r4
 8001e38:	40e6      	lsrs	r6, r4
 8001e3a:	2d20      	cmp	r5, #32
 8001e3c:	d003      	beq.n	8001e46 <__aeabi_dmul+0x49e>
 8001e3e:	4c12      	ldr	r4, [pc, #72]	; (8001e88 <__aeabi_dmul+0x4e0>)
 8001e40:	4454      	add	r4, sl
 8001e42:	40a3      	lsls	r3, r4
 8001e44:	431a      	orrs	r2, r3
 8001e46:	1e50      	subs	r0, r2, #1
 8001e48:	4182      	sbcs	r2, r0
 8001e4a:	4332      	orrs	r2, r6
 8001e4c:	2607      	movs	r6, #7
 8001e4e:	2700      	movs	r7, #0
 8001e50:	4016      	ands	r6, r2
 8001e52:	d009      	beq.n	8001e68 <__aeabi_dmul+0x4c0>
 8001e54:	200f      	movs	r0, #15
 8001e56:	2300      	movs	r3, #0
 8001e58:	4010      	ands	r0, r2
 8001e5a:	0014      	movs	r4, r2
 8001e5c:	2804      	cmp	r0, #4
 8001e5e:	d1b9      	bne.n	8001dd4 <__aeabi_dmul+0x42c>
 8001e60:	0022      	movs	r2, r4
 8001e62:	075e      	lsls	r6, r3, #29
 8001e64:	025b      	lsls	r3, r3, #9
 8001e66:	0b1f      	lsrs	r7, r3, #12
 8001e68:	08d2      	lsrs	r2, r2, #3
 8001e6a:	4316      	orrs	r6, r2
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	e606      	b.n	8001a7e <__aeabi_dmul+0xd6>
 8001e70:	2780      	movs	r7, #128	; 0x80
 8001e72:	033f      	lsls	r7, r7, #12
 8001e74:	431f      	orrs	r7, r3
 8001e76:	033f      	lsls	r7, r7, #12
 8001e78:	0b3f      	lsrs	r7, r7, #12
 8001e7a:	0016      	movs	r6, r2
 8001e7c:	4b00      	ldr	r3, [pc, #0]	; (8001e80 <__aeabi_dmul+0x4d8>)
 8001e7e:	e5fe      	b.n	8001a7e <__aeabi_dmul+0xd6>
 8001e80:	000007ff 	.word	0x000007ff
 8001e84:	0000041e 	.word	0x0000041e
 8001e88:	0000043e 	.word	0x0000043e

08001e8c <__aeabi_dsub>:
 8001e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e8e:	4657      	mov	r7, sl
 8001e90:	464e      	mov	r6, r9
 8001e92:	4645      	mov	r5, r8
 8001e94:	46de      	mov	lr, fp
 8001e96:	000c      	movs	r4, r1
 8001e98:	0309      	lsls	r1, r1, #12
 8001e9a:	b5e0      	push	{r5, r6, r7, lr}
 8001e9c:	0a49      	lsrs	r1, r1, #9
 8001e9e:	0f46      	lsrs	r6, r0, #29
 8001ea0:	005f      	lsls	r7, r3, #1
 8001ea2:	4331      	orrs	r1, r6
 8001ea4:	031e      	lsls	r6, r3, #12
 8001ea6:	0fdb      	lsrs	r3, r3, #31
 8001ea8:	0a76      	lsrs	r6, r6, #9
 8001eaa:	469b      	mov	fp, r3
 8001eac:	0f53      	lsrs	r3, r2, #29
 8001eae:	4333      	orrs	r3, r6
 8001eb0:	4ec8      	ldr	r6, [pc, #800]	; (80021d4 <__aeabi_dsub+0x348>)
 8001eb2:	0065      	lsls	r5, r4, #1
 8001eb4:	00c0      	lsls	r0, r0, #3
 8001eb6:	0fe4      	lsrs	r4, r4, #31
 8001eb8:	00d2      	lsls	r2, r2, #3
 8001eba:	0d6d      	lsrs	r5, r5, #21
 8001ebc:	46a2      	mov	sl, r4
 8001ebe:	4681      	mov	r9, r0
 8001ec0:	0d7f      	lsrs	r7, r7, #21
 8001ec2:	469c      	mov	ip, r3
 8001ec4:	4690      	mov	r8, r2
 8001ec6:	42b7      	cmp	r7, r6
 8001ec8:	d100      	bne.n	8001ecc <__aeabi_dsub+0x40>
 8001eca:	e0b9      	b.n	8002040 <__aeabi_dsub+0x1b4>
 8001ecc:	465b      	mov	r3, fp
 8001ece:	2601      	movs	r6, #1
 8001ed0:	4073      	eors	r3, r6
 8001ed2:	469b      	mov	fp, r3
 8001ed4:	1bee      	subs	r6, r5, r7
 8001ed6:	45a3      	cmp	fp, r4
 8001ed8:	d100      	bne.n	8001edc <__aeabi_dsub+0x50>
 8001eda:	e083      	b.n	8001fe4 <__aeabi_dsub+0x158>
 8001edc:	2e00      	cmp	r6, #0
 8001ede:	dd63      	ble.n	8001fa8 <__aeabi_dsub+0x11c>
 8001ee0:	2f00      	cmp	r7, #0
 8001ee2:	d000      	beq.n	8001ee6 <__aeabi_dsub+0x5a>
 8001ee4:	e0b1      	b.n	800204a <__aeabi_dsub+0x1be>
 8001ee6:	4663      	mov	r3, ip
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	d100      	bne.n	8001eee <__aeabi_dsub+0x62>
 8001eec:	e123      	b.n	8002136 <__aeabi_dsub+0x2aa>
 8001eee:	1e73      	subs	r3, r6, #1
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d000      	beq.n	8001ef6 <__aeabi_dsub+0x6a>
 8001ef4:	e1ba      	b.n	800226c <__aeabi_dsub+0x3e0>
 8001ef6:	1a86      	subs	r6, r0, r2
 8001ef8:	4663      	mov	r3, ip
 8001efa:	42b0      	cmp	r0, r6
 8001efc:	4180      	sbcs	r0, r0
 8001efe:	2501      	movs	r5, #1
 8001f00:	1ac9      	subs	r1, r1, r3
 8001f02:	4240      	negs	r0, r0
 8001f04:	1a09      	subs	r1, r1, r0
 8001f06:	020b      	lsls	r3, r1, #8
 8001f08:	d400      	bmi.n	8001f0c <__aeabi_dsub+0x80>
 8001f0a:	e147      	b.n	800219c <__aeabi_dsub+0x310>
 8001f0c:	0249      	lsls	r1, r1, #9
 8001f0e:	0a4b      	lsrs	r3, r1, #9
 8001f10:	4698      	mov	r8, r3
 8001f12:	4643      	mov	r3, r8
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d100      	bne.n	8001f1a <__aeabi_dsub+0x8e>
 8001f18:	e189      	b.n	800222e <__aeabi_dsub+0x3a2>
 8001f1a:	4640      	mov	r0, r8
 8001f1c:	f000 fbf2 	bl	8002704 <__clzsi2>
 8001f20:	0003      	movs	r3, r0
 8001f22:	3b08      	subs	r3, #8
 8001f24:	2b1f      	cmp	r3, #31
 8001f26:	dd00      	ble.n	8001f2a <__aeabi_dsub+0x9e>
 8001f28:	e17c      	b.n	8002224 <__aeabi_dsub+0x398>
 8001f2a:	2220      	movs	r2, #32
 8001f2c:	0030      	movs	r0, r6
 8001f2e:	1ad2      	subs	r2, r2, r3
 8001f30:	4641      	mov	r1, r8
 8001f32:	40d0      	lsrs	r0, r2
 8001f34:	4099      	lsls	r1, r3
 8001f36:	0002      	movs	r2, r0
 8001f38:	409e      	lsls	r6, r3
 8001f3a:	430a      	orrs	r2, r1
 8001f3c:	429d      	cmp	r5, r3
 8001f3e:	dd00      	ble.n	8001f42 <__aeabi_dsub+0xb6>
 8001f40:	e16a      	b.n	8002218 <__aeabi_dsub+0x38c>
 8001f42:	1b5d      	subs	r5, r3, r5
 8001f44:	1c6b      	adds	r3, r5, #1
 8001f46:	2b1f      	cmp	r3, #31
 8001f48:	dd00      	ble.n	8001f4c <__aeabi_dsub+0xc0>
 8001f4a:	e194      	b.n	8002276 <__aeabi_dsub+0x3ea>
 8001f4c:	2120      	movs	r1, #32
 8001f4e:	0010      	movs	r0, r2
 8001f50:	0035      	movs	r5, r6
 8001f52:	1ac9      	subs	r1, r1, r3
 8001f54:	408e      	lsls	r6, r1
 8001f56:	40da      	lsrs	r2, r3
 8001f58:	4088      	lsls	r0, r1
 8001f5a:	40dd      	lsrs	r5, r3
 8001f5c:	1e71      	subs	r1, r6, #1
 8001f5e:	418e      	sbcs	r6, r1
 8001f60:	0011      	movs	r1, r2
 8001f62:	2207      	movs	r2, #7
 8001f64:	4328      	orrs	r0, r5
 8001f66:	2500      	movs	r5, #0
 8001f68:	4306      	orrs	r6, r0
 8001f6a:	4032      	ands	r2, r6
 8001f6c:	2a00      	cmp	r2, #0
 8001f6e:	d009      	beq.n	8001f84 <__aeabi_dsub+0xf8>
 8001f70:	230f      	movs	r3, #15
 8001f72:	4033      	ands	r3, r6
 8001f74:	2b04      	cmp	r3, #4
 8001f76:	d005      	beq.n	8001f84 <__aeabi_dsub+0xf8>
 8001f78:	1d33      	adds	r3, r6, #4
 8001f7a:	42b3      	cmp	r3, r6
 8001f7c:	41b6      	sbcs	r6, r6
 8001f7e:	4276      	negs	r6, r6
 8001f80:	1989      	adds	r1, r1, r6
 8001f82:	001e      	movs	r6, r3
 8001f84:	020b      	lsls	r3, r1, #8
 8001f86:	d400      	bmi.n	8001f8a <__aeabi_dsub+0xfe>
 8001f88:	e23d      	b.n	8002406 <__aeabi_dsub+0x57a>
 8001f8a:	1c6a      	adds	r2, r5, #1
 8001f8c:	4b91      	ldr	r3, [pc, #580]	; (80021d4 <__aeabi_dsub+0x348>)
 8001f8e:	0555      	lsls	r5, r2, #21
 8001f90:	0d6d      	lsrs	r5, r5, #21
 8001f92:	429a      	cmp	r2, r3
 8001f94:	d100      	bne.n	8001f98 <__aeabi_dsub+0x10c>
 8001f96:	e119      	b.n	80021cc <__aeabi_dsub+0x340>
 8001f98:	4a8f      	ldr	r2, [pc, #572]	; (80021d8 <__aeabi_dsub+0x34c>)
 8001f9a:	08f6      	lsrs	r6, r6, #3
 8001f9c:	400a      	ands	r2, r1
 8001f9e:	0757      	lsls	r7, r2, #29
 8001fa0:	0252      	lsls	r2, r2, #9
 8001fa2:	4337      	orrs	r7, r6
 8001fa4:	0b12      	lsrs	r2, r2, #12
 8001fa6:	e09b      	b.n	80020e0 <__aeabi_dsub+0x254>
 8001fa8:	2e00      	cmp	r6, #0
 8001faa:	d000      	beq.n	8001fae <__aeabi_dsub+0x122>
 8001fac:	e0c5      	b.n	800213a <__aeabi_dsub+0x2ae>
 8001fae:	1c6e      	adds	r6, r5, #1
 8001fb0:	0576      	lsls	r6, r6, #21
 8001fb2:	0d76      	lsrs	r6, r6, #21
 8001fb4:	2e01      	cmp	r6, #1
 8001fb6:	dc00      	bgt.n	8001fba <__aeabi_dsub+0x12e>
 8001fb8:	e148      	b.n	800224c <__aeabi_dsub+0x3c0>
 8001fba:	4667      	mov	r7, ip
 8001fbc:	1a86      	subs	r6, r0, r2
 8001fbe:	1bcb      	subs	r3, r1, r7
 8001fc0:	42b0      	cmp	r0, r6
 8001fc2:	41bf      	sbcs	r7, r7
 8001fc4:	427f      	negs	r7, r7
 8001fc6:	46b8      	mov	r8, r7
 8001fc8:	001f      	movs	r7, r3
 8001fca:	4643      	mov	r3, r8
 8001fcc:	1aff      	subs	r7, r7, r3
 8001fce:	003b      	movs	r3, r7
 8001fd0:	46b8      	mov	r8, r7
 8001fd2:	021b      	lsls	r3, r3, #8
 8001fd4:	d500      	bpl.n	8001fd8 <__aeabi_dsub+0x14c>
 8001fd6:	e15f      	b.n	8002298 <__aeabi_dsub+0x40c>
 8001fd8:	4337      	orrs	r7, r6
 8001fda:	d19a      	bne.n	8001f12 <__aeabi_dsub+0x86>
 8001fdc:	2200      	movs	r2, #0
 8001fde:	2400      	movs	r4, #0
 8001fe0:	2500      	movs	r5, #0
 8001fe2:	e079      	b.n	80020d8 <__aeabi_dsub+0x24c>
 8001fe4:	2e00      	cmp	r6, #0
 8001fe6:	dc00      	bgt.n	8001fea <__aeabi_dsub+0x15e>
 8001fe8:	e0fa      	b.n	80021e0 <__aeabi_dsub+0x354>
 8001fea:	2f00      	cmp	r7, #0
 8001fec:	d100      	bne.n	8001ff0 <__aeabi_dsub+0x164>
 8001fee:	e08d      	b.n	800210c <__aeabi_dsub+0x280>
 8001ff0:	4b78      	ldr	r3, [pc, #480]	; (80021d4 <__aeabi_dsub+0x348>)
 8001ff2:	429d      	cmp	r5, r3
 8001ff4:	d067      	beq.n	80020c6 <__aeabi_dsub+0x23a>
 8001ff6:	2380      	movs	r3, #128	; 0x80
 8001ff8:	4667      	mov	r7, ip
 8001ffa:	041b      	lsls	r3, r3, #16
 8001ffc:	431f      	orrs	r7, r3
 8001ffe:	46bc      	mov	ip, r7
 8002000:	2e38      	cmp	r6, #56	; 0x38
 8002002:	dc00      	bgt.n	8002006 <__aeabi_dsub+0x17a>
 8002004:	e152      	b.n	80022ac <__aeabi_dsub+0x420>
 8002006:	4663      	mov	r3, ip
 8002008:	4313      	orrs	r3, r2
 800200a:	1e5a      	subs	r2, r3, #1
 800200c:	4193      	sbcs	r3, r2
 800200e:	181e      	adds	r6, r3, r0
 8002010:	4286      	cmp	r6, r0
 8002012:	4180      	sbcs	r0, r0
 8002014:	4240      	negs	r0, r0
 8002016:	1809      	adds	r1, r1, r0
 8002018:	020b      	lsls	r3, r1, #8
 800201a:	d400      	bmi.n	800201e <__aeabi_dsub+0x192>
 800201c:	e0be      	b.n	800219c <__aeabi_dsub+0x310>
 800201e:	4b6d      	ldr	r3, [pc, #436]	; (80021d4 <__aeabi_dsub+0x348>)
 8002020:	3501      	adds	r5, #1
 8002022:	429d      	cmp	r5, r3
 8002024:	d100      	bne.n	8002028 <__aeabi_dsub+0x19c>
 8002026:	e0d2      	b.n	80021ce <__aeabi_dsub+0x342>
 8002028:	4a6b      	ldr	r2, [pc, #428]	; (80021d8 <__aeabi_dsub+0x34c>)
 800202a:	0873      	lsrs	r3, r6, #1
 800202c:	400a      	ands	r2, r1
 800202e:	2101      	movs	r1, #1
 8002030:	400e      	ands	r6, r1
 8002032:	431e      	orrs	r6, r3
 8002034:	0851      	lsrs	r1, r2, #1
 8002036:	07d3      	lsls	r3, r2, #31
 8002038:	2207      	movs	r2, #7
 800203a:	431e      	orrs	r6, r3
 800203c:	4032      	ands	r2, r6
 800203e:	e795      	b.n	8001f6c <__aeabi_dsub+0xe0>
 8002040:	001e      	movs	r6, r3
 8002042:	4316      	orrs	r6, r2
 8002044:	d000      	beq.n	8002048 <__aeabi_dsub+0x1bc>
 8002046:	e745      	b.n	8001ed4 <__aeabi_dsub+0x48>
 8002048:	e740      	b.n	8001ecc <__aeabi_dsub+0x40>
 800204a:	4b62      	ldr	r3, [pc, #392]	; (80021d4 <__aeabi_dsub+0x348>)
 800204c:	429d      	cmp	r5, r3
 800204e:	d03a      	beq.n	80020c6 <__aeabi_dsub+0x23a>
 8002050:	2380      	movs	r3, #128	; 0x80
 8002052:	4667      	mov	r7, ip
 8002054:	041b      	lsls	r3, r3, #16
 8002056:	431f      	orrs	r7, r3
 8002058:	46bc      	mov	ip, r7
 800205a:	2e38      	cmp	r6, #56	; 0x38
 800205c:	dd00      	ble.n	8002060 <__aeabi_dsub+0x1d4>
 800205e:	e0eb      	b.n	8002238 <__aeabi_dsub+0x3ac>
 8002060:	2e1f      	cmp	r6, #31
 8002062:	dc00      	bgt.n	8002066 <__aeabi_dsub+0x1da>
 8002064:	e13a      	b.n	80022dc <__aeabi_dsub+0x450>
 8002066:	0033      	movs	r3, r6
 8002068:	4667      	mov	r7, ip
 800206a:	3b20      	subs	r3, #32
 800206c:	40df      	lsrs	r7, r3
 800206e:	003b      	movs	r3, r7
 8002070:	2e20      	cmp	r6, #32
 8002072:	d005      	beq.n	8002080 <__aeabi_dsub+0x1f4>
 8002074:	2740      	movs	r7, #64	; 0x40
 8002076:	1bbf      	subs	r7, r7, r6
 8002078:	4666      	mov	r6, ip
 800207a:	40be      	lsls	r6, r7
 800207c:	4332      	orrs	r2, r6
 800207e:	4690      	mov	r8, r2
 8002080:	4646      	mov	r6, r8
 8002082:	1e72      	subs	r2, r6, #1
 8002084:	4196      	sbcs	r6, r2
 8002086:	4333      	orrs	r3, r6
 8002088:	e0da      	b.n	8002240 <__aeabi_dsub+0x3b4>
 800208a:	2b00      	cmp	r3, #0
 800208c:	d100      	bne.n	8002090 <__aeabi_dsub+0x204>
 800208e:	e214      	b.n	80024ba <__aeabi_dsub+0x62e>
 8002090:	4663      	mov	r3, ip
 8002092:	4313      	orrs	r3, r2
 8002094:	d100      	bne.n	8002098 <__aeabi_dsub+0x20c>
 8002096:	e168      	b.n	800236a <__aeabi_dsub+0x4de>
 8002098:	2380      	movs	r3, #128	; 0x80
 800209a:	074e      	lsls	r6, r1, #29
 800209c:	08c0      	lsrs	r0, r0, #3
 800209e:	08c9      	lsrs	r1, r1, #3
 80020a0:	031b      	lsls	r3, r3, #12
 80020a2:	4306      	orrs	r6, r0
 80020a4:	4219      	tst	r1, r3
 80020a6:	d008      	beq.n	80020ba <__aeabi_dsub+0x22e>
 80020a8:	4660      	mov	r0, ip
 80020aa:	08c0      	lsrs	r0, r0, #3
 80020ac:	4218      	tst	r0, r3
 80020ae:	d104      	bne.n	80020ba <__aeabi_dsub+0x22e>
 80020b0:	4663      	mov	r3, ip
 80020b2:	0001      	movs	r1, r0
 80020b4:	08d2      	lsrs	r2, r2, #3
 80020b6:	075e      	lsls	r6, r3, #29
 80020b8:	4316      	orrs	r6, r2
 80020ba:	00f3      	lsls	r3, r6, #3
 80020bc:	4699      	mov	r9, r3
 80020be:	00c9      	lsls	r1, r1, #3
 80020c0:	0f72      	lsrs	r2, r6, #29
 80020c2:	4d44      	ldr	r5, [pc, #272]	; (80021d4 <__aeabi_dsub+0x348>)
 80020c4:	4311      	orrs	r1, r2
 80020c6:	464b      	mov	r3, r9
 80020c8:	08de      	lsrs	r6, r3, #3
 80020ca:	4b42      	ldr	r3, [pc, #264]	; (80021d4 <__aeabi_dsub+0x348>)
 80020cc:	074f      	lsls	r7, r1, #29
 80020ce:	4337      	orrs	r7, r6
 80020d0:	08ca      	lsrs	r2, r1, #3
 80020d2:	429d      	cmp	r5, r3
 80020d4:	d100      	bne.n	80020d8 <__aeabi_dsub+0x24c>
 80020d6:	e06e      	b.n	80021b6 <__aeabi_dsub+0x32a>
 80020d8:	0312      	lsls	r2, r2, #12
 80020da:	056d      	lsls	r5, r5, #21
 80020dc:	0b12      	lsrs	r2, r2, #12
 80020de:	0d6d      	lsrs	r5, r5, #21
 80020e0:	2100      	movs	r1, #0
 80020e2:	0312      	lsls	r2, r2, #12
 80020e4:	0b13      	lsrs	r3, r2, #12
 80020e6:	0d0a      	lsrs	r2, r1, #20
 80020e8:	0512      	lsls	r2, r2, #20
 80020ea:	431a      	orrs	r2, r3
 80020ec:	4b3b      	ldr	r3, [pc, #236]	; (80021dc <__aeabi_dsub+0x350>)
 80020ee:	052d      	lsls	r5, r5, #20
 80020f0:	4013      	ands	r3, r2
 80020f2:	432b      	orrs	r3, r5
 80020f4:	005b      	lsls	r3, r3, #1
 80020f6:	07e4      	lsls	r4, r4, #31
 80020f8:	085b      	lsrs	r3, r3, #1
 80020fa:	4323      	orrs	r3, r4
 80020fc:	0038      	movs	r0, r7
 80020fe:	0019      	movs	r1, r3
 8002100:	bc3c      	pop	{r2, r3, r4, r5}
 8002102:	4690      	mov	r8, r2
 8002104:	4699      	mov	r9, r3
 8002106:	46a2      	mov	sl, r4
 8002108:	46ab      	mov	fp, r5
 800210a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800210c:	4663      	mov	r3, ip
 800210e:	4313      	orrs	r3, r2
 8002110:	d011      	beq.n	8002136 <__aeabi_dsub+0x2aa>
 8002112:	1e73      	subs	r3, r6, #1
 8002114:	2b00      	cmp	r3, #0
 8002116:	d000      	beq.n	800211a <__aeabi_dsub+0x28e>
 8002118:	e107      	b.n	800232a <__aeabi_dsub+0x49e>
 800211a:	1886      	adds	r6, r0, r2
 800211c:	4286      	cmp	r6, r0
 800211e:	4180      	sbcs	r0, r0
 8002120:	4461      	add	r1, ip
 8002122:	4240      	negs	r0, r0
 8002124:	1809      	adds	r1, r1, r0
 8002126:	2501      	movs	r5, #1
 8002128:	020b      	lsls	r3, r1, #8
 800212a:	d537      	bpl.n	800219c <__aeabi_dsub+0x310>
 800212c:	2502      	movs	r5, #2
 800212e:	e77b      	b.n	8002028 <__aeabi_dsub+0x19c>
 8002130:	003e      	movs	r6, r7
 8002132:	4661      	mov	r1, ip
 8002134:	4691      	mov	r9, r2
 8002136:	0035      	movs	r5, r6
 8002138:	e7c5      	b.n	80020c6 <__aeabi_dsub+0x23a>
 800213a:	465c      	mov	r4, fp
 800213c:	2d00      	cmp	r5, #0
 800213e:	d000      	beq.n	8002142 <__aeabi_dsub+0x2b6>
 8002140:	e0e1      	b.n	8002306 <__aeabi_dsub+0x47a>
 8002142:	000b      	movs	r3, r1
 8002144:	4303      	orrs	r3, r0
 8002146:	d0f3      	beq.n	8002130 <__aeabi_dsub+0x2a4>
 8002148:	1c73      	adds	r3, r6, #1
 800214a:	d100      	bne.n	800214e <__aeabi_dsub+0x2c2>
 800214c:	e1ac      	b.n	80024a8 <__aeabi_dsub+0x61c>
 800214e:	4b21      	ldr	r3, [pc, #132]	; (80021d4 <__aeabi_dsub+0x348>)
 8002150:	429f      	cmp	r7, r3
 8002152:	d100      	bne.n	8002156 <__aeabi_dsub+0x2ca>
 8002154:	e13a      	b.n	80023cc <__aeabi_dsub+0x540>
 8002156:	43f3      	mvns	r3, r6
 8002158:	2b38      	cmp	r3, #56	; 0x38
 800215a:	dd00      	ble.n	800215e <__aeabi_dsub+0x2d2>
 800215c:	e16f      	b.n	800243e <__aeabi_dsub+0x5b2>
 800215e:	2b1f      	cmp	r3, #31
 8002160:	dd00      	ble.n	8002164 <__aeabi_dsub+0x2d8>
 8002162:	e18c      	b.n	800247e <__aeabi_dsub+0x5f2>
 8002164:	2520      	movs	r5, #32
 8002166:	000e      	movs	r6, r1
 8002168:	1aed      	subs	r5, r5, r3
 800216a:	40ae      	lsls	r6, r5
 800216c:	46b0      	mov	r8, r6
 800216e:	0006      	movs	r6, r0
 8002170:	46aa      	mov	sl, r5
 8002172:	40de      	lsrs	r6, r3
 8002174:	4645      	mov	r5, r8
 8002176:	4335      	orrs	r5, r6
 8002178:	002e      	movs	r6, r5
 800217a:	4655      	mov	r5, sl
 800217c:	40d9      	lsrs	r1, r3
 800217e:	40a8      	lsls	r0, r5
 8002180:	4663      	mov	r3, ip
 8002182:	1e45      	subs	r5, r0, #1
 8002184:	41a8      	sbcs	r0, r5
 8002186:	1a5b      	subs	r3, r3, r1
 8002188:	469c      	mov	ip, r3
 800218a:	4330      	orrs	r0, r6
 800218c:	1a16      	subs	r6, r2, r0
 800218e:	42b2      	cmp	r2, r6
 8002190:	4192      	sbcs	r2, r2
 8002192:	4663      	mov	r3, ip
 8002194:	4252      	negs	r2, r2
 8002196:	1a99      	subs	r1, r3, r2
 8002198:	003d      	movs	r5, r7
 800219a:	e6b4      	b.n	8001f06 <__aeabi_dsub+0x7a>
 800219c:	2207      	movs	r2, #7
 800219e:	4032      	ands	r2, r6
 80021a0:	2a00      	cmp	r2, #0
 80021a2:	d000      	beq.n	80021a6 <__aeabi_dsub+0x31a>
 80021a4:	e6e4      	b.n	8001f70 <__aeabi_dsub+0xe4>
 80021a6:	4b0b      	ldr	r3, [pc, #44]	; (80021d4 <__aeabi_dsub+0x348>)
 80021a8:	08f6      	lsrs	r6, r6, #3
 80021aa:	074f      	lsls	r7, r1, #29
 80021ac:	4337      	orrs	r7, r6
 80021ae:	08ca      	lsrs	r2, r1, #3
 80021b0:	429d      	cmp	r5, r3
 80021b2:	d000      	beq.n	80021b6 <__aeabi_dsub+0x32a>
 80021b4:	e790      	b.n	80020d8 <__aeabi_dsub+0x24c>
 80021b6:	003b      	movs	r3, r7
 80021b8:	4313      	orrs	r3, r2
 80021ba:	d100      	bne.n	80021be <__aeabi_dsub+0x332>
 80021bc:	e1a6      	b.n	800250c <__aeabi_dsub+0x680>
 80021be:	2380      	movs	r3, #128	; 0x80
 80021c0:	031b      	lsls	r3, r3, #12
 80021c2:	431a      	orrs	r2, r3
 80021c4:	0312      	lsls	r2, r2, #12
 80021c6:	0b12      	lsrs	r2, r2, #12
 80021c8:	4d02      	ldr	r5, [pc, #8]	; (80021d4 <__aeabi_dsub+0x348>)
 80021ca:	e789      	b.n	80020e0 <__aeabi_dsub+0x254>
 80021cc:	0015      	movs	r5, r2
 80021ce:	2200      	movs	r2, #0
 80021d0:	2700      	movs	r7, #0
 80021d2:	e785      	b.n	80020e0 <__aeabi_dsub+0x254>
 80021d4:	000007ff 	.word	0x000007ff
 80021d8:	ff7fffff 	.word	0xff7fffff
 80021dc:	800fffff 	.word	0x800fffff
 80021e0:	2e00      	cmp	r6, #0
 80021e2:	d000      	beq.n	80021e6 <__aeabi_dsub+0x35a>
 80021e4:	e0c7      	b.n	8002376 <__aeabi_dsub+0x4ea>
 80021e6:	1c6b      	adds	r3, r5, #1
 80021e8:	055e      	lsls	r6, r3, #21
 80021ea:	0d76      	lsrs	r6, r6, #21
 80021ec:	2e01      	cmp	r6, #1
 80021ee:	dc00      	bgt.n	80021f2 <__aeabi_dsub+0x366>
 80021f0:	e0f0      	b.n	80023d4 <__aeabi_dsub+0x548>
 80021f2:	4dc8      	ldr	r5, [pc, #800]	; (8002514 <__aeabi_dsub+0x688>)
 80021f4:	42ab      	cmp	r3, r5
 80021f6:	d100      	bne.n	80021fa <__aeabi_dsub+0x36e>
 80021f8:	e0b9      	b.n	800236e <__aeabi_dsub+0x4e2>
 80021fa:	1885      	adds	r5, r0, r2
 80021fc:	000a      	movs	r2, r1
 80021fe:	4285      	cmp	r5, r0
 8002200:	4189      	sbcs	r1, r1
 8002202:	4462      	add	r2, ip
 8002204:	4249      	negs	r1, r1
 8002206:	1851      	adds	r1, r2, r1
 8002208:	2207      	movs	r2, #7
 800220a:	07ce      	lsls	r6, r1, #31
 800220c:	086d      	lsrs	r5, r5, #1
 800220e:	432e      	orrs	r6, r5
 8002210:	0849      	lsrs	r1, r1, #1
 8002212:	4032      	ands	r2, r6
 8002214:	001d      	movs	r5, r3
 8002216:	e6a9      	b.n	8001f6c <__aeabi_dsub+0xe0>
 8002218:	49bf      	ldr	r1, [pc, #764]	; (8002518 <__aeabi_dsub+0x68c>)
 800221a:	1aed      	subs	r5, r5, r3
 800221c:	4011      	ands	r1, r2
 800221e:	2207      	movs	r2, #7
 8002220:	4032      	ands	r2, r6
 8002222:	e6a3      	b.n	8001f6c <__aeabi_dsub+0xe0>
 8002224:	0032      	movs	r2, r6
 8002226:	3828      	subs	r0, #40	; 0x28
 8002228:	4082      	lsls	r2, r0
 800222a:	2600      	movs	r6, #0
 800222c:	e686      	b.n	8001f3c <__aeabi_dsub+0xb0>
 800222e:	0030      	movs	r0, r6
 8002230:	f000 fa68 	bl	8002704 <__clzsi2>
 8002234:	3020      	adds	r0, #32
 8002236:	e673      	b.n	8001f20 <__aeabi_dsub+0x94>
 8002238:	4663      	mov	r3, ip
 800223a:	4313      	orrs	r3, r2
 800223c:	1e5a      	subs	r2, r3, #1
 800223e:	4193      	sbcs	r3, r2
 8002240:	1ac6      	subs	r6, r0, r3
 8002242:	42b0      	cmp	r0, r6
 8002244:	4180      	sbcs	r0, r0
 8002246:	4240      	negs	r0, r0
 8002248:	1a09      	subs	r1, r1, r0
 800224a:	e65c      	b.n	8001f06 <__aeabi_dsub+0x7a>
 800224c:	000e      	movs	r6, r1
 800224e:	4667      	mov	r7, ip
 8002250:	4306      	orrs	r6, r0
 8002252:	4317      	orrs	r7, r2
 8002254:	2d00      	cmp	r5, #0
 8002256:	d15e      	bne.n	8002316 <__aeabi_dsub+0x48a>
 8002258:	2e00      	cmp	r6, #0
 800225a:	d000      	beq.n	800225e <__aeabi_dsub+0x3d2>
 800225c:	e0f3      	b.n	8002446 <__aeabi_dsub+0x5ba>
 800225e:	2f00      	cmp	r7, #0
 8002260:	d100      	bne.n	8002264 <__aeabi_dsub+0x3d8>
 8002262:	e11e      	b.n	80024a2 <__aeabi_dsub+0x616>
 8002264:	465c      	mov	r4, fp
 8002266:	4661      	mov	r1, ip
 8002268:	4691      	mov	r9, r2
 800226a:	e72c      	b.n	80020c6 <__aeabi_dsub+0x23a>
 800226c:	4fa9      	ldr	r7, [pc, #676]	; (8002514 <__aeabi_dsub+0x688>)
 800226e:	42be      	cmp	r6, r7
 8002270:	d07b      	beq.n	800236a <__aeabi_dsub+0x4de>
 8002272:	001e      	movs	r6, r3
 8002274:	e6f1      	b.n	800205a <__aeabi_dsub+0x1ce>
 8002276:	0010      	movs	r0, r2
 8002278:	3d1f      	subs	r5, #31
 800227a:	40e8      	lsrs	r0, r5
 800227c:	2b20      	cmp	r3, #32
 800227e:	d003      	beq.n	8002288 <__aeabi_dsub+0x3fc>
 8002280:	2140      	movs	r1, #64	; 0x40
 8002282:	1acb      	subs	r3, r1, r3
 8002284:	409a      	lsls	r2, r3
 8002286:	4316      	orrs	r6, r2
 8002288:	1e73      	subs	r3, r6, #1
 800228a:	419e      	sbcs	r6, r3
 800228c:	2207      	movs	r2, #7
 800228e:	4306      	orrs	r6, r0
 8002290:	4032      	ands	r2, r6
 8002292:	2100      	movs	r1, #0
 8002294:	2500      	movs	r5, #0
 8002296:	e783      	b.n	80021a0 <__aeabi_dsub+0x314>
 8002298:	1a16      	subs	r6, r2, r0
 800229a:	4663      	mov	r3, ip
 800229c:	42b2      	cmp	r2, r6
 800229e:	4180      	sbcs	r0, r0
 80022a0:	1a59      	subs	r1, r3, r1
 80022a2:	4240      	negs	r0, r0
 80022a4:	1a0b      	subs	r3, r1, r0
 80022a6:	4698      	mov	r8, r3
 80022a8:	465c      	mov	r4, fp
 80022aa:	e632      	b.n	8001f12 <__aeabi_dsub+0x86>
 80022ac:	2e1f      	cmp	r6, #31
 80022ae:	dd00      	ble.n	80022b2 <__aeabi_dsub+0x426>
 80022b0:	e0ab      	b.n	800240a <__aeabi_dsub+0x57e>
 80022b2:	2720      	movs	r7, #32
 80022b4:	1bbb      	subs	r3, r7, r6
 80022b6:	469a      	mov	sl, r3
 80022b8:	4663      	mov	r3, ip
 80022ba:	4657      	mov	r7, sl
 80022bc:	40bb      	lsls	r3, r7
 80022be:	4699      	mov	r9, r3
 80022c0:	0013      	movs	r3, r2
 80022c2:	464f      	mov	r7, r9
 80022c4:	40f3      	lsrs	r3, r6
 80022c6:	431f      	orrs	r7, r3
 80022c8:	003b      	movs	r3, r7
 80022ca:	4657      	mov	r7, sl
 80022cc:	40ba      	lsls	r2, r7
 80022ce:	1e57      	subs	r7, r2, #1
 80022d0:	41ba      	sbcs	r2, r7
 80022d2:	4313      	orrs	r3, r2
 80022d4:	4662      	mov	r2, ip
 80022d6:	40f2      	lsrs	r2, r6
 80022d8:	1889      	adds	r1, r1, r2
 80022da:	e698      	b.n	800200e <__aeabi_dsub+0x182>
 80022dc:	2720      	movs	r7, #32
 80022de:	1bbb      	subs	r3, r7, r6
 80022e0:	469a      	mov	sl, r3
 80022e2:	4663      	mov	r3, ip
 80022e4:	4657      	mov	r7, sl
 80022e6:	40bb      	lsls	r3, r7
 80022e8:	4699      	mov	r9, r3
 80022ea:	0013      	movs	r3, r2
 80022ec:	464f      	mov	r7, r9
 80022ee:	40f3      	lsrs	r3, r6
 80022f0:	431f      	orrs	r7, r3
 80022f2:	003b      	movs	r3, r7
 80022f4:	4657      	mov	r7, sl
 80022f6:	40ba      	lsls	r2, r7
 80022f8:	1e57      	subs	r7, r2, #1
 80022fa:	41ba      	sbcs	r2, r7
 80022fc:	4313      	orrs	r3, r2
 80022fe:	4662      	mov	r2, ip
 8002300:	40f2      	lsrs	r2, r6
 8002302:	1a89      	subs	r1, r1, r2
 8002304:	e79c      	b.n	8002240 <__aeabi_dsub+0x3b4>
 8002306:	4b83      	ldr	r3, [pc, #524]	; (8002514 <__aeabi_dsub+0x688>)
 8002308:	429f      	cmp	r7, r3
 800230a:	d05f      	beq.n	80023cc <__aeabi_dsub+0x540>
 800230c:	2580      	movs	r5, #128	; 0x80
 800230e:	042d      	lsls	r5, r5, #16
 8002310:	4273      	negs	r3, r6
 8002312:	4329      	orrs	r1, r5
 8002314:	e720      	b.n	8002158 <__aeabi_dsub+0x2cc>
 8002316:	2e00      	cmp	r6, #0
 8002318:	d10c      	bne.n	8002334 <__aeabi_dsub+0x4a8>
 800231a:	2f00      	cmp	r7, #0
 800231c:	d100      	bne.n	8002320 <__aeabi_dsub+0x494>
 800231e:	e0d0      	b.n	80024c2 <__aeabi_dsub+0x636>
 8002320:	465c      	mov	r4, fp
 8002322:	4661      	mov	r1, ip
 8002324:	4691      	mov	r9, r2
 8002326:	4d7b      	ldr	r5, [pc, #492]	; (8002514 <__aeabi_dsub+0x688>)
 8002328:	e6cd      	b.n	80020c6 <__aeabi_dsub+0x23a>
 800232a:	4f7a      	ldr	r7, [pc, #488]	; (8002514 <__aeabi_dsub+0x688>)
 800232c:	42be      	cmp	r6, r7
 800232e:	d01c      	beq.n	800236a <__aeabi_dsub+0x4de>
 8002330:	001e      	movs	r6, r3
 8002332:	e665      	b.n	8002000 <__aeabi_dsub+0x174>
 8002334:	2f00      	cmp	r7, #0
 8002336:	d018      	beq.n	800236a <__aeabi_dsub+0x4de>
 8002338:	08c0      	lsrs	r0, r0, #3
 800233a:	074e      	lsls	r6, r1, #29
 800233c:	4306      	orrs	r6, r0
 800233e:	2080      	movs	r0, #128	; 0x80
 8002340:	08c9      	lsrs	r1, r1, #3
 8002342:	0300      	lsls	r0, r0, #12
 8002344:	4201      	tst	r1, r0
 8002346:	d008      	beq.n	800235a <__aeabi_dsub+0x4ce>
 8002348:	4663      	mov	r3, ip
 800234a:	08dc      	lsrs	r4, r3, #3
 800234c:	4204      	tst	r4, r0
 800234e:	d104      	bne.n	800235a <__aeabi_dsub+0x4ce>
 8002350:	0021      	movs	r1, r4
 8002352:	46da      	mov	sl, fp
 8002354:	08d2      	lsrs	r2, r2, #3
 8002356:	075e      	lsls	r6, r3, #29
 8002358:	4316      	orrs	r6, r2
 800235a:	00f3      	lsls	r3, r6, #3
 800235c:	4699      	mov	r9, r3
 800235e:	2401      	movs	r4, #1
 8002360:	4653      	mov	r3, sl
 8002362:	00c9      	lsls	r1, r1, #3
 8002364:	0f72      	lsrs	r2, r6, #29
 8002366:	4311      	orrs	r1, r2
 8002368:	401c      	ands	r4, r3
 800236a:	4d6a      	ldr	r5, [pc, #424]	; (8002514 <__aeabi_dsub+0x688>)
 800236c:	e6ab      	b.n	80020c6 <__aeabi_dsub+0x23a>
 800236e:	001d      	movs	r5, r3
 8002370:	2200      	movs	r2, #0
 8002372:	2700      	movs	r7, #0
 8002374:	e6b4      	b.n	80020e0 <__aeabi_dsub+0x254>
 8002376:	2d00      	cmp	r5, #0
 8002378:	d159      	bne.n	800242e <__aeabi_dsub+0x5a2>
 800237a:	000b      	movs	r3, r1
 800237c:	4303      	orrs	r3, r0
 800237e:	d100      	bne.n	8002382 <__aeabi_dsub+0x4f6>
 8002380:	e6d6      	b.n	8002130 <__aeabi_dsub+0x2a4>
 8002382:	1c73      	adds	r3, r6, #1
 8002384:	d100      	bne.n	8002388 <__aeabi_dsub+0x4fc>
 8002386:	e0b2      	b.n	80024ee <__aeabi_dsub+0x662>
 8002388:	4b62      	ldr	r3, [pc, #392]	; (8002514 <__aeabi_dsub+0x688>)
 800238a:	429f      	cmp	r7, r3
 800238c:	d01e      	beq.n	80023cc <__aeabi_dsub+0x540>
 800238e:	43f3      	mvns	r3, r6
 8002390:	2b38      	cmp	r3, #56	; 0x38
 8002392:	dc6f      	bgt.n	8002474 <__aeabi_dsub+0x5e8>
 8002394:	2b1f      	cmp	r3, #31
 8002396:	dd00      	ble.n	800239a <__aeabi_dsub+0x50e>
 8002398:	e097      	b.n	80024ca <__aeabi_dsub+0x63e>
 800239a:	2520      	movs	r5, #32
 800239c:	000e      	movs	r6, r1
 800239e:	1aed      	subs	r5, r5, r3
 80023a0:	40ae      	lsls	r6, r5
 80023a2:	46b0      	mov	r8, r6
 80023a4:	0006      	movs	r6, r0
 80023a6:	46aa      	mov	sl, r5
 80023a8:	40de      	lsrs	r6, r3
 80023aa:	4645      	mov	r5, r8
 80023ac:	4335      	orrs	r5, r6
 80023ae:	002e      	movs	r6, r5
 80023b0:	4655      	mov	r5, sl
 80023b2:	40a8      	lsls	r0, r5
 80023b4:	40d9      	lsrs	r1, r3
 80023b6:	1e45      	subs	r5, r0, #1
 80023b8:	41a8      	sbcs	r0, r5
 80023ba:	448c      	add	ip, r1
 80023bc:	4306      	orrs	r6, r0
 80023be:	18b6      	adds	r6, r6, r2
 80023c0:	4296      	cmp	r6, r2
 80023c2:	4192      	sbcs	r2, r2
 80023c4:	4251      	negs	r1, r2
 80023c6:	4461      	add	r1, ip
 80023c8:	003d      	movs	r5, r7
 80023ca:	e625      	b.n	8002018 <__aeabi_dsub+0x18c>
 80023cc:	003d      	movs	r5, r7
 80023ce:	4661      	mov	r1, ip
 80023d0:	4691      	mov	r9, r2
 80023d2:	e678      	b.n	80020c6 <__aeabi_dsub+0x23a>
 80023d4:	000b      	movs	r3, r1
 80023d6:	4303      	orrs	r3, r0
 80023d8:	2d00      	cmp	r5, #0
 80023da:	d000      	beq.n	80023de <__aeabi_dsub+0x552>
 80023dc:	e655      	b.n	800208a <__aeabi_dsub+0x1fe>
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d0f5      	beq.n	80023ce <__aeabi_dsub+0x542>
 80023e2:	4663      	mov	r3, ip
 80023e4:	4313      	orrs	r3, r2
 80023e6:	d100      	bne.n	80023ea <__aeabi_dsub+0x55e>
 80023e8:	e66d      	b.n	80020c6 <__aeabi_dsub+0x23a>
 80023ea:	1886      	adds	r6, r0, r2
 80023ec:	4286      	cmp	r6, r0
 80023ee:	4180      	sbcs	r0, r0
 80023f0:	4461      	add	r1, ip
 80023f2:	4240      	negs	r0, r0
 80023f4:	1809      	adds	r1, r1, r0
 80023f6:	2200      	movs	r2, #0
 80023f8:	020b      	lsls	r3, r1, #8
 80023fa:	d400      	bmi.n	80023fe <__aeabi_dsub+0x572>
 80023fc:	e6d0      	b.n	80021a0 <__aeabi_dsub+0x314>
 80023fe:	4b46      	ldr	r3, [pc, #280]	; (8002518 <__aeabi_dsub+0x68c>)
 8002400:	3501      	adds	r5, #1
 8002402:	4019      	ands	r1, r3
 8002404:	e5b2      	b.n	8001f6c <__aeabi_dsub+0xe0>
 8002406:	46b1      	mov	r9, r6
 8002408:	e65d      	b.n	80020c6 <__aeabi_dsub+0x23a>
 800240a:	0033      	movs	r3, r6
 800240c:	4667      	mov	r7, ip
 800240e:	3b20      	subs	r3, #32
 8002410:	40df      	lsrs	r7, r3
 8002412:	003b      	movs	r3, r7
 8002414:	2e20      	cmp	r6, #32
 8002416:	d005      	beq.n	8002424 <__aeabi_dsub+0x598>
 8002418:	2740      	movs	r7, #64	; 0x40
 800241a:	1bbf      	subs	r7, r7, r6
 800241c:	4666      	mov	r6, ip
 800241e:	40be      	lsls	r6, r7
 8002420:	4332      	orrs	r2, r6
 8002422:	4690      	mov	r8, r2
 8002424:	4646      	mov	r6, r8
 8002426:	1e72      	subs	r2, r6, #1
 8002428:	4196      	sbcs	r6, r2
 800242a:	4333      	orrs	r3, r6
 800242c:	e5ef      	b.n	800200e <__aeabi_dsub+0x182>
 800242e:	4b39      	ldr	r3, [pc, #228]	; (8002514 <__aeabi_dsub+0x688>)
 8002430:	429f      	cmp	r7, r3
 8002432:	d0cb      	beq.n	80023cc <__aeabi_dsub+0x540>
 8002434:	2580      	movs	r5, #128	; 0x80
 8002436:	042d      	lsls	r5, r5, #16
 8002438:	4273      	negs	r3, r6
 800243a:	4329      	orrs	r1, r5
 800243c:	e7a8      	b.n	8002390 <__aeabi_dsub+0x504>
 800243e:	4308      	orrs	r0, r1
 8002440:	1e41      	subs	r1, r0, #1
 8002442:	4188      	sbcs	r0, r1
 8002444:	e6a2      	b.n	800218c <__aeabi_dsub+0x300>
 8002446:	2f00      	cmp	r7, #0
 8002448:	d100      	bne.n	800244c <__aeabi_dsub+0x5c0>
 800244a:	e63c      	b.n	80020c6 <__aeabi_dsub+0x23a>
 800244c:	4663      	mov	r3, ip
 800244e:	1a86      	subs	r6, r0, r2
 8002450:	1acf      	subs	r7, r1, r3
 8002452:	42b0      	cmp	r0, r6
 8002454:	419b      	sbcs	r3, r3
 8002456:	425b      	negs	r3, r3
 8002458:	1afb      	subs	r3, r7, r3
 800245a:	4698      	mov	r8, r3
 800245c:	021b      	lsls	r3, r3, #8
 800245e:	d54e      	bpl.n	80024fe <__aeabi_dsub+0x672>
 8002460:	1a16      	subs	r6, r2, r0
 8002462:	4663      	mov	r3, ip
 8002464:	42b2      	cmp	r2, r6
 8002466:	4192      	sbcs	r2, r2
 8002468:	1a59      	subs	r1, r3, r1
 800246a:	4252      	negs	r2, r2
 800246c:	1a89      	subs	r1, r1, r2
 800246e:	465c      	mov	r4, fp
 8002470:	2200      	movs	r2, #0
 8002472:	e57b      	b.n	8001f6c <__aeabi_dsub+0xe0>
 8002474:	4301      	orrs	r1, r0
 8002476:	000e      	movs	r6, r1
 8002478:	1e71      	subs	r1, r6, #1
 800247a:	418e      	sbcs	r6, r1
 800247c:	e79f      	b.n	80023be <__aeabi_dsub+0x532>
 800247e:	001d      	movs	r5, r3
 8002480:	000e      	movs	r6, r1
 8002482:	3d20      	subs	r5, #32
 8002484:	40ee      	lsrs	r6, r5
 8002486:	46b0      	mov	r8, r6
 8002488:	2b20      	cmp	r3, #32
 800248a:	d004      	beq.n	8002496 <__aeabi_dsub+0x60a>
 800248c:	2540      	movs	r5, #64	; 0x40
 800248e:	1aeb      	subs	r3, r5, r3
 8002490:	4099      	lsls	r1, r3
 8002492:	4308      	orrs	r0, r1
 8002494:	4681      	mov	r9, r0
 8002496:	4648      	mov	r0, r9
 8002498:	4643      	mov	r3, r8
 800249a:	1e41      	subs	r1, r0, #1
 800249c:	4188      	sbcs	r0, r1
 800249e:	4318      	orrs	r0, r3
 80024a0:	e674      	b.n	800218c <__aeabi_dsub+0x300>
 80024a2:	2200      	movs	r2, #0
 80024a4:	2400      	movs	r4, #0
 80024a6:	e617      	b.n	80020d8 <__aeabi_dsub+0x24c>
 80024a8:	1a16      	subs	r6, r2, r0
 80024aa:	4663      	mov	r3, ip
 80024ac:	42b2      	cmp	r2, r6
 80024ae:	4192      	sbcs	r2, r2
 80024b0:	1a59      	subs	r1, r3, r1
 80024b2:	4252      	negs	r2, r2
 80024b4:	1a89      	subs	r1, r1, r2
 80024b6:	003d      	movs	r5, r7
 80024b8:	e525      	b.n	8001f06 <__aeabi_dsub+0x7a>
 80024ba:	4661      	mov	r1, ip
 80024bc:	4691      	mov	r9, r2
 80024be:	4d15      	ldr	r5, [pc, #84]	; (8002514 <__aeabi_dsub+0x688>)
 80024c0:	e601      	b.n	80020c6 <__aeabi_dsub+0x23a>
 80024c2:	2280      	movs	r2, #128	; 0x80
 80024c4:	2400      	movs	r4, #0
 80024c6:	0312      	lsls	r2, r2, #12
 80024c8:	e679      	b.n	80021be <__aeabi_dsub+0x332>
 80024ca:	001d      	movs	r5, r3
 80024cc:	000e      	movs	r6, r1
 80024ce:	3d20      	subs	r5, #32
 80024d0:	40ee      	lsrs	r6, r5
 80024d2:	46b0      	mov	r8, r6
 80024d4:	2b20      	cmp	r3, #32
 80024d6:	d004      	beq.n	80024e2 <__aeabi_dsub+0x656>
 80024d8:	2540      	movs	r5, #64	; 0x40
 80024da:	1aeb      	subs	r3, r5, r3
 80024dc:	4099      	lsls	r1, r3
 80024de:	4308      	orrs	r0, r1
 80024e0:	4681      	mov	r9, r0
 80024e2:	464e      	mov	r6, r9
 80024e4:	4643      	mov	r3, r8
 80024e6:	1e71      	subs	r1, r6, #1
 80024e8:	418e      	sbcs	r6, r1
 80024ea:	431e      	orrs	r6, r3
 80024ec:	e767      	b.n	80023be <__aeabi_dsub+0x532>
 80024ee:	1886      	adds	r6, r0, r2
 80024f0:	4296      	cmp	r6, r2
 80024f2:	419b      	sbcs	r3, r3
 80024f4:	4461      	add	r1, ip
 80024f6:	425b      	negs	r3, r3
 80024f8:	18c9      	adds	r1, r1, r3
 80024fa:	003d      	movs	r5, r7
 80024fc:	e58c      	b.n	8002018 <__aeabi_dsub+0x18c>
 80024fe:	4647      	mov	r7, r8
 8002500:	4337      	orrs	r7, r6
 8002502:	d0ce      	beq.n	80024a2 <__aeabi_dsub+0x616>
 8002504:	2207      	movs	r2, #7
 8002506:	4641      	mov	r1, r8
 8002508:	4032      	ands	r2, r6
 800250a:	e649      	b.n	80021a0 <__aeabi_dsub+0x314>
 800250c:	2700      	movs	r7, #0
 800250e:	003a      	movs	r2, r7
 8002510:	e5e6      	b.n	80020e0 <__aeabi_dsub+0x254>
 8002512:	46c0      	nop			; (mov r8, r8)
 8002514:	000007ff 	.word	0x000007ff
 8002518:	ff7fffff 	.word	0xff7fffff

0800251c <__aeabi_d2iz>:
 800251c:	b530      	push	{r4, r5, lr}
 800251e:	4d14      	ldr	r5, [pc, #80]	; (8002570 <__aeabi_d2iz+0x54>)
 8002520:	030a      	lsls	r2, r1, #12
 8002522:	004b      	lsls	r3, r1, #1
 8002524:	0b12      	lsrs	r2, r2, #12
 8002526:	0d5b      	lsrs	r3, r3, #21
 8002528:	0fc9      	lsrs	r1, r1, #31
 800252a:	2400      	movs	r4, #0
 800252c:	42ab      	cmp	r3, r5
 800252e:	dd11      	ble.n	8002554 <__aeabi_d2iz+0x38>
 8002530:	4c10      	ldr	r4, [pc, #64]	; (8002574 <__aeabi_d2iz+0x58>)
 8002532:	42a3      	cmp	r3, r4
 8002534:	dc10      	bgt.n	8002558 <__aeabi_d2iz+0x3c>
 8002536:	2480      	movs	r4, #128	; 0x80
 8002538:	0364      	lsls	r4, r4, #13
 800253a:	4322      	orrs	r2, r4
 800253c:	4c0e      	ldr	r4, [pc, #56]	; (8002578 <__aeabi_d2iz+0x5c>)
 800253e:	1ae4      	subs	r4, r4, r3
 8002540:	2c1f      	cmp	r4, #31
 8002542:	dd0c      	ble.n	800255e <__aeabi_d2iz+0x42>
 8002544:	480d      	ldr	r0, [pc, #52]	; (800257c <__aeabi_d2iz+0x60>)
 8002546:	1ac3      	subs	r3, r0, r3
 8002548:	40da      	lsrs	r2, r3
 800254a:	0013      	movs	r3, r2
 800254c:	425c      	negs	r4, r3
 800254e:	2900      	cmp	r1, #0
 8002550:	d100      	bne.n	8002554 <__aeabi_d2iz+0x38>
 8002552:	001c      	movs	r4, r3
 8002554:	0020      	movs	r0, r4
 8002556:	bd30      	pop	{r4, r5, pc}
 8002558:	4b09      	ldr	r3, [pc, #36]	; (8002580 <__aeabi_d2iz+0x64>)
 800255a:	18cc      	adds	r4, r1, r3
 800255c:	e7fa      	b.n	8002554 <__aeabi_d2iz+0x38>
 800255e:	4d09      	ldr	r5, [pc, #36]	; (8002584 <__aeabi_d2iz+0x68>)
 8002560:	40e0      	lsrs	r0, r4
 8002562:	46ac      	mov	ip, r5
 8002564:	4463      	add	r3, ip
 8002566:	409a      	lsls	r2, r3
 8002568:	0013      	movs	r3, r2
 800256a:	4303      	orrs	r3, r0
 800256c:	e7ee      	b.n	800254c <__aeabi_d2iz+0x30>
 800256e:	46c0      	nop			; (mov r8, r8)
 8002570:	000003fe 	.word	0x000003fe
 8002574:	0000041d 	.word	0x0000041d
 8002578:	00000433 	.word	0x00000433
 800257c:	00000413 	.word	0x00000413
 8002580:	7fffffff 	.word	0x7fffffff
 8002584:	fffffbed 	.word	0xfffffbed

08002588 <__aeabi_i2d>:
 8002588:	b570      	push	{r4, r5, r6, lr}
 800258a:	2800      	cmp	r0, #0
 800258c:	d02d      	beq.n	80025ea <__aeabi_i2d+0x62>
 800258e:	17c3      	asrs	r3, r0, #31
 8002590:	18c5      	adds	r5, r0, r3
 8002592:	405d      	eors	r5, r3
 8002594:	0fc4      	lsrs	r4, r0, #31
 8002596:	0028      	movs	r0, r5
 8002598:	f000 f8b4 	bl	8002704 <__clzsi2>
 800259c:	4b15      	ldr	r3, [pc, #84]	; (80025f4 <__aeabi_i2d+0x6c>)
 800259e:	1a1b      	subs	r3, r3, r0
 80025a0:	055b      	lsls	r3, r3, #21
 80025a2:	0d5b      	lsrs	r3, r3, #21
 80025a4:	280a      	cmp	r0, #10
 80025a6:	dd15      	ble.n	80025d4 <__aeabi_i2d+0x4c>
 80025a8:	380b      	subs	r0, #11
 80025aa:	4085      	lsls	r5, r0
 80025ac:	2200      	movs	r2, #0
 80025ae:	032d      	lsls	r5, r5, #12
 80025b0:	0b2d      	lsrs	r5, r5, #12
 80025b2:	2100      	movs	r1, #0
 80025b4:	0010      	movs	r0, r2
 80025b6:	032d      	lsls	r5, r5, #12
 80025b8:	0d0a      	lsrs	r2, r1, #20
 80025ba:	0b2d      	lsrs	r5, r5, #12
 80025bc:	0512      	lsls	r2, r2, #20
 80025be:	432a      	orrs	r2, r5
 80025c0:	4d0d      	ldr	r5, [pc, #52]	; (80025f8 <__aeabi_i2d+0x70>)
 80025c2:	051b      	lsls	r3, r3, #20
 80025c4:	402a      	ands	r2, r5
 80025c6:	4313      	orrs	r3, r2
 80025c8:	005b      	lsls	r3, r3, #1
 80025ca:	07e4      	lsls	r4, r4, #31
 80025cc:	085b      	lsrs	r3, r3, #1
 80025ce:	4323      	orrs	r3, r4
 80025d0:	0019      	movs	r1, r3
 80025d2:	bd70      	pop	{r4, r5, r6, pc}
 80025d4:	0002      	movs	r2, r0
 80025d6:	0029      	movs	r1, r5
 80025d8:	3215      	adds	r2, #21
 80025da:	4091      	lsls	r1, r2
 80025dc:	000a      	movs	r2, r1
 80025de:	210b      	movs	r1, #11
 80025e0:	1a08      	subs	r0, r1, r0
 80025e2:	40c5      	lsrs	r5, r0
 80025e4:	032d      	lsls	r5, r5, #12
 80025e6:	0b2d      	lsrs	r5, r5, #12
 80025e8:	e7e3      	b.n	80025b2 <__aeabi_i2d+0x2a>
 80025ea:	2400      	movs	r4, #0
 80025ec:	2300      	movs	r3, #0
 80025ee:	2500      	movs	r5, #0
 80025f0:	2200      	movs	r2, #0
 80025f2:	e7de      	b.n	80025b2 <__aeabi_i2d+0x2a>
 80025f4:	0000041e 	.word	0x0000041e
 80025f8:	800fffff 	.word	0x800fffff

080025fc <__aeabi_ui2d>:
 80025fc:	b510      	push	{r4, lr}
 80025fe:	1e04      	subs	r4, r0, #0
 8002600:	d025      	beq.n	800264e <__aeabi_ui2d+0x52>
 8002602:	f000 f87f 	bl	8002704 <__clzsi2>
 8002606:	4b14      	ldr	r3, [pc, #80]	; (8002658 <__aeabi_ui2d+0x5c>)
 8002608:	1a1b      	subs	r3, r3, r0
 800260a:	055b      	lsls	r3, r3, #21
 800260c:	0d5b      	lsrs	r3, r3, #21
 800260e:	280a      	cmp	r0, #10
 8002610:	dd12      	ble.n	8002638 <__aeabi_ui2d+0x3c>
 8002612:	380b      	subs	r0, #11
 8002614:	4084      	lsls	r4, r0
 8002616:	2200      	movs	r2, #0
 8002618:	0324      	lsls	r4, r4, #12
 800261a:	0b24      	lsrs	r4, r4, #12
 800261c:	2100      	movs	r1, #0
 800261e:	0010      	movs	r0, r2
 8002620:	0324      	lsls	r4, r4, #12
 8002622:	0d0a      	lsrs	r2, r1, #20
 8002624:	0b24      	lsrs	r4, r4, #12
 8002626:	0512      	lsls	r2, r2, #20
 8002628:	4322      	orrs	r2, r4
 800262a:	4c0c      	ldr	r4, [pc, #48]	; (800265c <__aeabi_ui2d+0x60>)
 800262c:	051b      	lsls	r3, r3, #20
 800262e:	4022      	ands	r2, r4
 8002630:	4313      	orrs	r3, r2
 8002632:	005b      	lsls	r3, r3, #1
 8002634:	0859      	lsrs	r1, r3, #1
 8002636:	bd10      	pop	{r4, pc}
 8002638:	0002      	movs	r2, r0
 800263a:	0021      	movs	r1, r4
 800263c:	3215      	adds	r2, #21
 800263e:	4091      	lsls	r1, r2
 8002640:	000a      	movs	r2, r1
 8002642:	210b      	movs	r1, #11
 8002644:	1a08      	subs	r0, r1, r0
 8002646:	40c4      	lsrs	r4, r0
 8002648:	0324      	lsls	r4, r4, #12
 800264a:	0b24      	lsrs	r4, r4, #12
 800264c:	e7e6      	b.n	800261c <__aeabi_ui2d+0x20>
 800264e:	2300      	movs	r3, #0
 8002650:	2400      	movs	r4, #0
 8002652:	2200      	movs	r2, #0
 8002654:	e7e2      	b.n	800261c <__aeabi_ui2d+0x20>
 8002656:	46c0      	nop			; (mov r8, r8)
 8002658:	0000041e 	.word	0x0000041e
 800265c:	800fffff 	.word	0x800fffff

08002660 <__aeabi_f2d>:
 8002660:	0041      	lsls	r1, r0, #1
 8002662:	0e09      	lsrs	r1, r1, #24
 8002664:	1c4b      	adds	r3, r1, #1
 8002666:	b570      	push	{r4, r5, r6, lr}
 8002668:	b2db      	uxtb	r3, r3
 800266a:	0246      	lsls	r6, r0, #9
 800266c:	0a75      	lsrs	r5, r6, #9
 800266e:	0fc4      	lsrs	r4, r0, #31
 8002670:	2b01      	cmp	r3, #1
 8002672:	dd14      	ble.n	800269e <__aeabi_f2d+0x3e>
 8002674:	23e0      	movs	r3, #224	; 0xe0
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	076d      	lsls	r5, r5, #29
 800267a:	0b36      	lsrs	r6, r6, #12
 800267c:	18cb      	adds	r3, r1, r3
 800267e:	2100      	movs	r1, #0
 8002680:	0d0a      	lsrs	r2, r1, #20
 8002682:	0028      	movs	r0, r5
 8002684:	0512      	lsls	r2, r2, #20
 8002686:	4d1c      	ldr	r5, [pc, #112]	; (80026f8 <__aeabi_f2d+0x98>)
 8002688:	4332      	orrs	r2, r6
 800268a:	055b      	lsls	r3, r3, #21
 800268c:	402a      	ands	r2, r5
 800268e:	085b      	lsrs	r3, r3, #1
 8002690:	4313      	orrs	r3, r2
 8002692:	005b      	lsls	r3, r3, #1
 8002694:	07e4      	lsls	r4, r4, #31
 8002696:	085b      	lsrs	r3, r3, #1
 8002698:	4323      	orrs	r3, r4
 800269a:	0019      	movs	r1, r3
 800269c:	bd70      	pop	{r4, r5, r6, pc}
 800269e:	2900      	cmp	r1, #0
 80026a0:	d114      	bne.n	80026cc <__aeabi_f2d+0x6c>
 80026a2:	2d00      	cmp	r5, #0
 80026a4:	d01e      	beq.n	80026e4 <__aeabi_f2d+0x84>
 80026a6:	0028      	movs	r0, r5
 80026a8:	f000 f82c 	bl	8002704 <__clzsi2>
 80026ac:	280a      	cmp	r0, #10
 80026ae:	dc1c      	bgt.n	80026ea <__aeabi_f2d+0x8a>
 80026b0:	230b      	movs	r3, #11
 80026b2:	002a      	movs	r2, r5
 80026b4:	1a1b      	subs	r3, r3, r0
 80026b6:	40da      	lsrs	r2, r3
 80026b8:	0003      	movs	r3, r0
 80026ba:	3315      	adds	r3, #21
 80026bc:	409d      	lsls	r5, r3
 80026be:	4b0f      	ldr	r3, [pc, #60]	; (80026fc <__aeabi_f2d+0x9c>)
 80026c0:	0312      	lsls	r2, r2, #12
 80026c2:	1a1b      	subs	r3, r3, r0
 80026c4:	055b      	lsls	r3, r3, #21
 80026c6:	0b16      	lsrs	r6, r2, #12
 80026c8:	0d5b      	lsrs	r3, r3, #21
 80026ca:	e7d8      	b.n	800267e <__aeabi_f2d+0x1e>
 80026cc:	2d00      	cmp	r5, #0
 80026ce:	d006      	beq.n	80026de <__aeabi_f2d+0x7e>
 80026d0:	0b32      	lsrs	r2, r6, #12
 80026d2:	2680      	movs	r6, #128	; 0x80
 80026d4:	0336      	lsls	r6, r6, #12
 80026d6:	076d      	lsls	r5, r5, #29
 80026d8:	4316      	orrs	r6, r2
 80026da:	4b09      	ldr	r3, [pc, #36]	; (8002700 <__aeabi_f2d+0xa0>)
 80026dc:	e7cf      	b.n	800267e <__aeabi_f2d+0x1e>
 80026de:	4b08      	ldr	r3, [pc, #32]	; (8002700 <__aeabi_f2d+0xa0>)
 80026e0:	2600      	movs	r6, #0
 80026e2:	e7cc      	b.n	800267e <__aeabi_f2d+0x1e>
 80026e4:	2300      	movs	r3, #0
 80026e6:	2600      	movs	r6, #0
 80026e8:	e7c9      	b.n	800267e <__aeabi_f2d+0x1e>
 80026ea:	0003      	movs	r3, r0
 80026ec:	002a      	movs	r2, r5
 80026ee:	3b0b      	subs	r3, #11
 80026f0:	409a      	lsls	r2, r3
 80026f2:	2500      	movs	r5, #0
 80026f4:	e7e3      	b.n	80026be <__aeabi_f2d+0x5e>
 80026f6:	46c0      	nop			; (mov r8, r8)
 80026f8:	800fffff 	.word	0x800fffff
 80026fc:	00000389 	.word	0x00000389
 8002700:	000007ff 	.word	0x000007ff

08002704 <__clzsi2>:
 8002704:	211c      	movs	r1, #28
 8002706:	2301      	movs	r3, #1
 8002708:	041b      	lsls	r3, r3, #16
 800270a:	4298      	cmp	r0, r3
 800270c:	d301      	bcc.n	8002712 <__clzsi2+0xe>
 800270e:	0c00      	lsrs	r0, r0, #16
 8002710:	3910      	subs	r1, #16
 8002712:	0a1b      	lsrs	r3, r3, #8
 8002714:	4298      	cmp	r0, r3
 8002716:	d301      	bcc.n	800271c <__clzsi2+0x18>
 8002718:	0a00      	lsrs	r0, r0, #8
 800271a:	3908      	subs	r1, #8
 800271c:	091b      	lsrs	r3, r3, #4
 800271e:	4298      	cmp	r0, r3
 8002720:	d301      	bcc.n	8002726 <__clzsi2+0x22>
 8002722:	0900      	lsrs	r0, r0, #4
 8002724:	3904      	subs	r1, #4
 8002726:	a202      	add	r2, pc, #8	; (adr r2, 8002730 <__clzsi2+0x2c>)
 8002728:	5c10      	ldrb	r0, [r2, r0]
 800272a:	1840      	adds	r0, r0, r1
 800272c:	4770      	bx	lr
 800272e:	46c0      	nop			; (mov r8, r8)
 8002730:	02020304 	.word	0x02020304
 8002734:	01010101 	.word	0x01010101
	...

08002740 <__clzdi2>:
 8002740:	b510      	push	{r4, lr}
 8002742:	2900      	cmp	r1, #0
 8002744:	d103      	bne.n	800274e <__clzdi2+0xe>
 8002746:	f7ff ffdd 	bl	8002704 <__clzsi2>
 800274a:	3020      	adds	r0, #32
 800274c:	e002      	b.n	8002754 <__clzdi2+0x14>
 800274e:	1c08      	adds	r0, r1, #0
 8002750:	f7ff ffd8 	bl	8002704 <__clzsi2>
 8002754:	bd10      	pop	{r4, pc}
 8002756:	46c0      	nop			; (mov r8, r8)

08002758 <__divdi3>:
 8002758:	b5f0      	push	{r4, r5, r6, r7, lr}
 800275a:	464e      	mov	r6, r9
 800275c:	4657      	mov	r7, sl
 800275e:	46de      	mov	lr, fp
 8002760:	4645      	mov	r5, r8
 8002762:	b5e0      	push	{r5, r6, r7, lr}
 8002764:	000f      	movs	r7, r1
 8002766:	2100      	movs	r1, #0
 8002768:	b083      	sub	sp, #12
 800276a:	0006      	movs	r6, r0
 800276c:	4689      	mov	r9, r1
 800276e:	2f00      	cmp	r7, #0
 8002770:	da06      	bge.n	8002780 <__divdi3+0x28>
 8002772:	0039      	movs	r1, r7
 8002774:	2700      	movs	r7, #0
 8002776:	4246      	negs	r6, r0
 8002778:	418f      	sbcs	r7, r1
 800277a:	2101      	movs	r1, #1
 800277c:	4249      	negs	r1, r1
 800277e:	4689      	mov	r9, r1
 8002780:	2b00      	cmp	r3, #0
 8002782:	da07      	bge.n	8002794 <__divdi3+0x3c>
 8002784:	4649      	mov	r1, r9
 8002786:	43c9      	mvns	r1, r1
 8002788:	0010      	movs	r0, r2
 800278a:	4689      	mov	r9, r1
 800278c:	0019      	movs	r1, r3
 800278e:	2300      	movs	r3, #0
 8002790:	4242      	negs	r2, r0
 8002792:	418b      	sbcs	r3, r1
 8002794:	0034      	movs	r4, r6
 8002796:	003d      	movs	r5, r7
 8002798:	4692      	mov	sl, r2
 800279a:	4698      	mov	r8, r3
 800279c:	42bb      	cmp	r3, r7
 800279e:	d869      	bhi.n	8002874 <__divdi3+0x11c>
 80027a0:	d066      	beq.n	8002870 <__divdi3+0x118>
 80027a2:	4641      	mov	r1, r8
 80027a4:	4650      	mov	r0, sl
 80027a6:	f7ff ffcb 	bl	8002740 <__clzdi2>
 80027aa:	4683      	mov	fp, r0
 80027ac:	0039      	movs	r1, r7
 80027ae:	0030      	movs	r0, r6
 80027b0:	f7ff ffc6 	bl	8002740 <__clzdi2>
 80027b4:	465b      	mov	r3, fp
 80027b6:	1a1b      	subs	r3, r3, r0
 80027b8:	469c      	mov	ip, r3
 80027ba:	3b20      	subs	r3, #32
 80027bc:	469b      	mov	fp, r3
 80027be:	d500      	bpl.n	80027c2 <__divdi3+0x6a>
 80027c0:	e075      	b.n	80028ae <__divdi3+0x156>
 80027c2:	4651      	mov	r1, sl
 80027c4:	4658      	mov	r0, fp
 80027c6:	4081      	lsls	r1, r0
 80027c8:	000b      	movs	r3, r1
 80027ca:	4651      	mov	r1, sl
 80027cc:	4660      	mov	r0, ip
 80027ce:	4081      	lsls	r1, r0
 80027d0:	000a      	movs	r2, r1
 80027d2:	42bb      	cmp	r3, r7
 80027d4:	d861      	bhi.n	800289a <__divdi3+0x142>
 80027d6:	d05e      	beq.n	8002896 <__divdi3+0x13e>
 80027d8:	0034      	movs	r4, r6
 80027da:	003d      	movs	r5, r7
 80027dc:	4659      	mov	r1, fp
 80027de:	1aa4      	subs	r4, r4, r2
 80027e0:	419d      	sbcs	r5, r3
 80027e2:	2900      	cmp	r1, #0
 80027e4:	da00      	bge.n	80027e8 <__divdi3+0x90>
 80027e6:	e07a      	b.n	80028de <__divdi3+0x186>
 80027e8:	2100      	movs	r1, #0
 80027ea:	2000      	movs	r0, #0
 80027ec:	2601      	movs	r6, #1
 80027ee:	9000      	str	r0, [sp, #0]
 80027f0:	9101      	str	r1, [sp, #4]
 80027f2:	4659      	mov	r1, fp
 80027f4:	408e      	lsls	r6, r1
 80027f6:	9601      	str	r6, [sp, #4]
 80027f8:	4661      	mov	r1, ip
 80027fa:	2601      	movs	r6, #1
 80027fc:	408e      	lsls	r6, r1
 80027fe:	4661      	mov	r1, ip
 8002800:	9600      	str	r6, [sp, #0]
 8002802:	2900      	cmp	r1, #0
 8002804:	d050      	beq.n	80028a8 <__divdi3+0x150>
 8002806:	07d9      	lsls	r1, r3, #31
 8002808:	0856      	lsrs	r6, r2, #1
 800280a:	085f      	lsrs	r7, r3, #1
 800280c:	430e      	orrs	r6, r1
 800280e:	4663      	mov	r3, ip
 8002810:	e00e      	b.n	8002830 <__divdi3+0xd8>
 8002812:	42af      	cmp	r7, r5
 8002814:	d101      	bne.n	800281a <__divdi3+0xc2>
 8002816:	42a6      	cmp	r6, r4
 8002818:	d80c      	bhi.n	8002834 <__divdi3+0xdc>
 800281a:	1ba4      	subs	r4, r4, r6
 800281c:	41bd      	sbcs	r5, r7
 800281e:	2101      	movs	r1, #1
 8002820:	1924      	adds	r4, r4, r4
 8002822:	416d      	adcs	r5, r5
 8002824:	2200      	movs	r2, #0
 8002826:	3b01      	subs	r3, #1
 8002828:	1864      	adds	r4, r4, r1
 800282a:	4155      	adcs	r5, r2
 800282c:	2b00      	cmp	r3, #0
 800282e:	d006      	beq.n	800283e <__divdi3+0xe6>
 8002830:	42af      	cmp	r7, r5
 8002832:	d9ee      	bls.n	8002812 <__divdi3+0xba>
 8002834:	3b01      	subs	r3, #1
 8002836:	1924      	adds	r4, r4, r4
 8002838:	416d      	adcs	r5, r5
 800283a:	2b00      	cmp	r3, #0
 800283c:	d1f8      	bne.n	8002830 <__divdi3+0xd8>
 800283e:	9800      	ldr	r0, [sp, #0]
 8002840:	9901      	ldr	r1, [sp, #4]
 8002842:	465b      	mov	r3, fp
 8002844:	1900      	adds	r0, r0, r4
 8002846:	4169      	adcs	r1, r5
 8002848:	2b00      	cmp	r3, #0
 800284a:	db3d      	blt.n	80028c8 <__divdi3+0x170>
 800284c:	002e      	movs	r6, r5
 800284e:	40de      	lsrs	r6, r3
 8002850:	4663      	mov	r3, ip
 8002852:	002c      	movs	r4, r5
 8002854:	40dc      	lsrs	r4, r3
 8002856:	465b      	mov	r3, fp
 8002858:	2b00      	cmp	r3, #0
 800285a:	db4b      	blt.n	80028f4 <__divdi3+0x19c>
 800285c:	0034      	movs	r4, r6
 800285e:	465d      	mov	r5, fp
 8002860:	40ac      	lsls	r4, r5
 8002862:	0023      	movs	r3, r4
 8002864:	4664      	mov	r4, ip
 8002866:	40a6      	lsls	r6, r4
 8002868:	0032      	movs	r2, r6
 800286a:	1a80      	subs	r0, r0, r2
 800286c:	4199      	sbcs	r1, r3
 800286e:	e003      	b.n	8002878 <__divdi3+0x120>
 8002870:	42b2      	cmp	r2, r6
 8002872:	d996      	bls.n	80027a2 <__divdi3+0x4a>
 8002874:	2000      	movs	r0, #0
 8002876:	2100      	movs	r1, #0
 8002878:	464b      	mov	r3, r9
 800287a:	2b00      	cmp	r3, #0
 800287c:	d004      	beq.n	8002888 <__divdi3+0x130>
 800287e:	0003      	movs	r3, r0
 8002880:	000c      	movs	r4, r1
 8002882:	2100      	movs	r1, #0
 8002884:	4258      	negs	r0, r3
 8002886:	41a1      	sbcs	r1, r4
 8002888:	b003      	add	sp, #12
 800288a:	bc3c      	pop	{r2, r3, r4, r5}
 800288c:	4690      	mov	r8, r2
 800288e:	4699      	mov	r9, r3
 8002890:	46a2      	mov	sl, r4
 8002892:	46ab      	mov	fp, r5
 8002894:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002896:	42b1      	cmp	r1, r6
 8002898:	d99e      	bls.n	80027d8 <__divdi3+0x80>
 800289a:	2100      	movs	r1, #0
 800289c:	2000      	movs	r0, #0
 800289e:	9000      	str	r0, [sp, #0]
 80028a0:	9101      	str	r1, [sp, #4]
 80028a2:	4661      	mov	r1, ip
 80028a4:	2900      	cmp	r1, #0
 80028a6:	d1ae      	bne.n	8002806 <__divdi3+0xae>
 80028a8:	9800      	ldr	r0, [sp, #0]
 80028aa:	9901      	ldr	r1, [sp, #4]
 80028ac:	e7e4      	b.n	8002878 <__divdi3+0x120>
 80028ae:	2320      	movs	r3, #32
 80028b0:	4662      	mov	r2, ip
 80028b2:	4651      	mov	r1, sl
 80028b4:	1a9b      	subs	r3, r3, r2
 80028b6:	40d9      	lsrs	r1, r3
 80028b8:	4640      	mov	r0, r8
 80028ba:	9100      	str	r1, [sp, #0]
 80028bc:	4661      	mov	r1, ip
 80028be:	4088      	lsls	r0, r1
 80028c0:	0003      	movs	r3, r0
 80028c2:	9900      	ldr	r1, [sp, #0]
 80028c4:	430b      	orrs	r3, r1
 80028c6:	e780      	b.n	80027ca <__divdi3+0x72>
 80028c8:	4662      	mov	r2, ip
 80028ca:	2320      	movs	r3, #32
 80028cc:	1a9b      	subs	r3, r3, r2
 80028ce:	002a      	movs	r2, r5
 80028d0:	409a      	lsls	r2, r3
 80028d2:	0026      	movs	r6, r4
 80028d4:	0013      	movs	r3, r2
 80028d6:	4662      	mov	r2, ip
 80028d8:	40d6      	lsrs	r6, r2
 80028da:	431e      	orrs	r6, r3
 80028dc:	e7b8      	b.n	8002850 <__divdi3+0xf8>
 80028de:	4661      	mov	r1, ip
 80028e0:	2620      	movs	r6, #32
 80028e2:	2701      	movs	r7, #1
 80028e4:	1a76      	subs	r6, r6, r1
 80028e6:	2000      	movs	r0, #0
 80028e8:	2100      	movs	r1, #0
 80028ea:	40f7      	lsrs	r7, r6
 80028ec:	9000      	str	r0, [sp, #0]
 80028ee:	9101      	str	r1, [sp, #4]
 80028f0:	9701      	str	r7, [sp, #4]
 80028f2:	e781      	b.n	80027f8 <__divdi3+0xa0>
 80028f4:	4667      	mov	r7, ip
 80028f6:	2320      	movs	r3, #32
 80028f8:	4662      	mov	r2, ip
 80028fa:	0035      	movs	r5, r6
 80028fc:	40bc      	lsls	r4, r7
 80028fe:	1a9b      	subs	r3, r3, r2
 8002900:	40dd      	lsrs	r5, r3
 8002902:	0023      	movs	r3, r4
 8002904:	432b      	orrs	r3, r5
 8002906:	e7ad      	b.n	8002864 <__divdi3+0x10c>

08002908 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b082      	sub	sp, #8
 800290c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800290e:	003b      	movs	r3, r7
 8002910:	0018      	movs	r0, r3
 8002912:	2308      	movs	r3, #8
 8002914:	001a      	movs	r2, r3
 8002916:	2100      	movs	r1, #0
 8002918:	f01c fc12 	bl	801f140 <memset>

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 800291c:	4b2a      	ldr	r3, [pc, #168]	; (80029c8 <MX_ADC_Init+0xc0>)
 800291e:	4a2b      	ldr	r2, [pc, #172]	; (80029cc <MX_ADC_Init+0xc4>)
 8002920:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8002922:	4b29      	ldr	r3, [pc, #164]	; (80029c8 <MX_ADC_Init+0xc0>)
 8002924:	2200      	movs	r2, #0
 8002926:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002928:	4b27      	ldr	r3, [pc, #156]	; (80029c8 <MX_ADC_Init+0xc0>)
 800292a:	2280      	movs	r2, #128	; 0x80
 800292c:	05d2      	lsls	r2, r2, #23
 800292e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8002930:	4b25      	ldr	r3, [pc, #148]	; (80029c8 <MX_ADC_Init+0xc0>)
 8002932:	2200      	movs	r2, #0
 8002934:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002936:	4b24      	ldr	r3, [pc, #144]	; (80029c8 <MX_ADC_Init+0xc0>)
 8002938:	2200      	movs	r2, #0
 800293a:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800293c:	4b22      	ldr	r3, [pc, #136]	; (80029c8 <MX_ADC_Init+0xc0>)
 800293e:	2201      	movs	r2, #1
 8002940:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002942:	4b21      	ldr	r3, [pc, #132]	; (80029c8 <MX_ADC_Init+0xc0>)
 8002944:	2200      	movs	r2, #0
 8002946:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8002948:	4b1f      	ldr	r3, [pc, #124]	; (80029c8 <MX_ADC_Init+0xc0>)
 800294a:	2220      	movs	r2, #32
 800294c:	2100      	movs	r1, #0
 800294e:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8002950:	4b1d      	ldr	r3, [pc, #116]	; (80029c8 <MX_ADC_Init+0xc0>)
 8002952:	2221      	movs	r2, #33	; 0x21
 8002954:	2100      	movs	r1, #0
 8002956:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002958:	4b1b      	ldr	r3, [pc, #108]	; (80029c8 <MX_ADC_Init+0xc0>)
 800295a:	2200      	movs	r2, #0
 800295c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800295e:	4b1a      	ldr	r3, [pc, #104]	; (80029c8 <MX_ADC_Init+0xc0>)
 8002960:	22c2      	movs	r2, #194	; 0xc2
 8002962:	32ff      	adds	r2, #255	; 0xff
 8002964:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8002966:	4b18      	ldr	r3, [pc, #96]	; (80029c8 <MX_ADC_Init+0xc0>)
 8002968:	222c      	movs	r2, #44	; 0x2c
 800296a:	2100      	movs	r1, #0
 800296c:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800296e:	4b16      	ldr	r3, [pc, #88]	; (80029c8 <MX_ADC_Init+0xc0>)
 8002970:	2204      	movs	r2, #4
 8002972:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002974:	4b14      	ldr	r3, [pc, #80]	; (80029c8 <MX_ADC_Init+0xc0>)
 8002976:	2200      	movs	r2, #0
 8002978:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 800297a:	4b13      	ldr	r3, [pc, #76]	; (80029c8 <MX_ADC_Init+0xc0>)
 800297c:	2200      	movs	r2, #0
 800297e:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8002980:	4b11      	ldr	r3, [pc, #68]	; (80029c8 <MX_ADC_Init+0xc0>)
 8002982:	2200      	movs	r2, #0
 8002984:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8002986:	4b10      	ldr	r3, [pc, #64]	; (80029c8 <MX_ADC_Init+0xc0>)
 8002988:	2200      	movs	r2, #0
 800298a:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800298c:	4b0e      	ldr	r3, [pc, #56]	; (80029c8 <MX_ADC_Init+0xc0>)
 800298e:	0018      	movs	r0, r3
 8002990:	f001 fab2 	bl	8003ef8 <HAL_ADC_Init>
 8002994:	1e03      	subs	r3, r0, #0
 8002996:	d001      	beq.n	800299c <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8002998:	f000 fafa 	bl	8002f90 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800299c:	003b      	movs	r3, r7
 800299e:	4a0c      	ldr	r2, [pc, #48]	; (80029d0 <MX_ADC_Init+0xc8>)
 80029a0:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80029a2:	003b      	movs	r3, r7
 80029a4:	2280      	movs	r2, #128	; 0x80
 80029a6:	0152      	lsls	r2, r2, #5
 80029a8:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80029aa:	003a      	movs	r2, r7
 80029ac:	4b06      	ldr	r3, [pc, #24]	; (80029c8 <MX_ADC_Init+0xc0>)
 80029ae:	0011      	movs	r1, r2
 80029b0:	0018      	movs	r0, r3
 80029b2:	f001 fc15 	bl	80041e0 <HAL_ADC_ConfigChannel>
 80029b6:	1e03      	subs	r3, r0, #0
 80029b8:	d001      	beq.n	80029be <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 80029ba:	f000 fae9 	bl	8002f90 <Error_Handler>
  }

}
 80029be:	46c0      	nop			; (mov r8, r8)
 80029c0:	46bd      	mov	sp, r7
 80029c2:	b002      	add	sp, #8
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	46c0      	nop			; (mov r8, r8)
 80029c8:	200012ec 	.word	0x200012ec
 80029cc:	40012400 	.word	0x40012400
 80029d0:	48040000 	.word	0x48040000

080029d4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b082      	sub	sp, #8
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC1)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a06      	ldr	r2, [pc, #24]	; (80029fc <HAL_ADC_MspInit+0x28>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d106      	bne.n	80029f4 <HAL_ADC_MspInit+0x20>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80029e6:	4b06      	ldr	r3, [pc, #24]	; (8002a00 <HAL_ADC_MspInit+0x2c>)
 80029e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029ea:	4b05      	ldr	r3, [pc, #20]	; (8002a00 <HAL_ADC_MspInit+0x2c>)
 80029ec:	2180      	movs	r1, #128	; 0x80
 80029ee:	0089      	lsls	r1, r1, #2
 80029f0:	430a      	orrs	r2, r1
 80029f2:	635a      	str	r2, [r3, #52]	; 0x34
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80029f4:	46c0      	nop			; (mov r8, r8)
 80029f6:	46bd      	mov	sp, r7
 80029f8:	b002      	add	sp, #8
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	40012400 	.word	0x40012400
 8002a00:	40021000 	.word	0x40021000

08002a04 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8002a04:	b590      	push	{r4, r7, lr}
 8002a06:	b08f      	sub	sp, #60	; 0x3c
 8002a08:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a0a:	2424      	movs	r4, #36	; 0x24
 8002a0c:	193b      	adds	r3, r7, r4
 8002a0e:	0018      	movs	r0, r3
 8002a10:	2314      	movs	r3, #20
 8002a12:	001a      	movs	r2, r3
 8002a14:	2100      	movs	r1, #0
 8002a16:	f01c fb93 	bl	801f140 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a1a:	4bbf      	ldr	r3, [pc, #764]	; (8002d18 <MX_GPIO_Init+0x314>)
 8002a1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a1e:	4bbe      	ldr	r3, [pc, #760]	; (8002d18 <MX_GPIO_Init+0x314>)
 8002a20:	2101      	movs	r1, #1
 8002a22:	430a      	orrs	r2, r1
 8002a24:	62da      	str	r2, [r3, #44]	; 0x2c
 8002a26:	4bbc      	ldr	r3, [pc, #752]	; (8002d18 <MX_GPIO_Init+0x314>)
 8002a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	60fb      	str	r3, [r7, #12]
 8002a30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a32:	4bb9      	ldr	r3, [pc, #740]	; (8002d18 <MX_GPIO_Init+0x314>)
 8002a34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a36:	4bb8      	ldr	r3, [pc, #736]	; (8002d18 <MX_GPIO_Init+0x314>)
 8002a38:	2102      	movs	r1, #2
 8002a3a:	430a      	orrs	r2, r1
 8002a3c:	62da      	str	r2, [r3, #44]	; 0x2c
 8002a3e:	4bb6      	ldr	r3, [pc, #728]	; (8002d18 <MX_GPIO_Init+0x314>)
 8002a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a42:	2202      	movs	r2, #2
 8002a44:	4013      	ands	r3, r2
 8002a46:	60bb      	str	r3, [r7, #8]
 8002a48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a4a:	4bb3      	ldr	r3, [pc, #716]	; (8002d18 <MX_GPIO_Init+0x314>)
 8002a4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a4e:	4bb2      	ldr	r3, [pc, #712]	; (8002d18 <MX_GPIO_Init+0x314>)
 8002a50:	2104      	movs	r1, #4
 8002a52:	430a      	orrs	r2, r1
 8002a54:	62da      	str	r2, [r3, #44]	; 0x2c
 8002a56:	4bb0      	ldr	r3, [pc, #704]	; (8002d18 <MX_GPIO_Init+0x314>)
 8002a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a5a:	2204      	movs	r2, #4
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	607b      	str	r3, [r7, #4]
 8002a60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002a62:	4bad      	ldr	r3, [pc, #692]	; (8002d18 <MX_GPIO_Init+0x314>)
 8002a64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a66:	4bac      	ldr	r3, [pc, #688]	; (8002d18 <MX_GPIO_Init+0x314>)
 8002a68:	2180      	movs	r1, #128	; 0x80
 8002a6a:	430a      	orrs	r2, r1
 8002a6c:	62da      	str	r2, [r3, #44]	; 0x2c
 8002a6e:	4baa      	ldr	r3, [pc, #680]	; (8002d18 <MX_GPIO_Init+0x314>)
 8002a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a72:	2280      	movs	r2, #128	; 0x80
 8002a74:	4013      	ands	r3, r2
 8002a76:	603b      	str	r3, [r7, #0]
 8002a78:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RADIO_NSS_Pin|RADIO_TCXO_VCC_Pin|RADIO_ANT_SWITCH_RX_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002a7a:	49a8      	ldr	r1, [pc, #672]	; (8002d1c <MX_GPIO_Init+0x318>)
 8002a7c:	23a0      	movs	r3, #160	; 0xa0
 8002a7e:	05db      	lsls	r3, r3, #23
 8002a80:	2200      	movs	r2, #0
 8002a82:	0018      	movs	r0, r3
 8002a84:	f001 ff40 	bl	8004908 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8002a88:	4ba5      	ldr	r3, [pc, #660]	; (8002d20 <MX_GPIO_Init+0x31c>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	21e0      	movs	r1, #224	; 0xe0
 8002a8e:	0018      	movs	r0, r3
 8002a90:	f001 ff3a 	bl	8004908 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RADIO_ANT_SWITCH_TX_BOOST_Pin|RADIO_RESET_Pin|RADIO_ANT_SWITCH_TX_RFO_Pin, GPIO_PIN_RESET);
 8002a94:	4ba3      	ldr	r3, [pc, #652]	; (8002d24 <MX_GPIO_Init+0x320>)
 8002a96:	2200      	movs	r2, #0
 8002a98:	2107      	movs	r1, #7
 8002a9a:	0018      	movs	r0, r3
 8002a9c:	f001 ff34 	bl	8004908 <HAL_GPIO_WritePin>


  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RADIO_NSS_Pin|RADIO_TCXO_VCC_Pin|RADIO_ANT_SWITCH_RX_Pin;
 8002aa0:	193b      	adds	r3, r7, r4
 8002aa2:	4aa1      	ldr	r2, [pc, #644]	; (8002d28 <MX_GPIO_Init+0x324>)
 8002aa4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002aa6:	193b      	adds	r3, r7, r4
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aac:	193b      	adds	r3, r7, r4
 8002aae:	2200      	movs	r2, #0
 8002ab0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ab2:	193b      	adds	r3, r7, r4
 8002ab4:	2202      	movs	r2, #2
 8002ab6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ab8:	193a      	adds	r2, r7, r4
 8002aba:	23a0      	movs	r3, #160	; 0xa0
 8002abc:	05db      	lsls	r3, r3, #23
 8002abe:	0011      	movs	r1, r2
 8002ac0:	0018      	movs	r0, r3
 8002ac2:	f001 fda3 	bl	800460c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD4_Pin;
 8002ac6:	0021      	movs	r1, r4
 8002ac8:	187b      	adds	r3, r7, r1
 8002aca:	22e0      	movs	r2, #224	; 0xe0
 8002acc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ace:	187b      	adds	r3, r7, r1
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad4:	187b      	adds	r3, r7, r1
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ada:	187b      	adds	r3, r7, r1
 8002adc:	2200      	movs	r2, #0
 8002ade:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ae0:	000c      	movs	r4, r1
 8002ae2:	187b      	adds	r3, r7, r1
 8002ae4:	4a8e      	ldr	r2, [pc, #568]	; (8002d20 <MX_GPIO_Init+0x31c>)
 8002ae6:	0019      	movs	r1, r3
 8002ae8:	0010      	movs	r0, r2
 8002aea:	f001 fd8f 	bl	800460c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB9 PB8 PB11 PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_10;
 8002aee:	0021      	movs	r1, r4
 8002af0:	187b      	adds	r3, r7, r1
 8002af2:	22f0      	movs	r2, #240	; 0xf0
 8002af4:	0112      	lsls	r2, r2, #4
 8002af6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002af8:	000c      	movs	r4, r1
 8002afa:	193b      	adds	r3, r7, r4
 8002afc:	2203      	movs	r2, #3
 8002afe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b00:	193b      	adds	r3, r7, r4
 8002b02:	2200      	movs	r2, #0
 8002b04:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b06:	193b      	adds	r3, r7, r4
 8002b08:	4a85      	ldr	r2, [pc, #532]	; (8002d20 <MX_GPIO_Init+0x31c>)
 8002b0a:	0019      	movs	r1, r3
 8002b0c:	0010      	movs	r0, r2
 8002b0e:	f001 fd7d 	bl	800460c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA14 PA10 PA13 PA8
                           PA11 PA9 PA0 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_10|GPIO_PIN_13|GPIO_PIN_8
 8002b12:	193b      	adds	r3, r7, r4
 8002b14:	4a85      	ldr	r2, [pc, #532]	; (8002d2c <MX_GPIO_Init+0x328>)
 8002b16:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_11|GPIO_PIN_9|GPIO_PIN_0|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b18:	193b      	adds	r3, r7, r4
 8002b1a:	2203      	movs	r2, #3
 8002b1c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b1e:	193b      	adds	r3, r7, r4
 8002b20:	2200      	movs	r2, #0
 8002b22:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b24:	193a      	adds	r2, r7, r4
 8002b26:	23a0      	movs	r3, #160	; 0xa0
 8002b28:	05db      	lsls	r3, r3, #23
 8002b2a:	0011      	movs	r1, r2
 8002b2c:	0018      	movs	r0, r3
 8002b2e:	f001 fd6d 	bl	800460c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = RADIO_DIO_0_Pin|RADIO_DIO_1_Pin|RADIO_DIO_2_Pin;
 8002b32:	193b      	adds	r3, r7, r4
 8002b34:	2213      	movs	r2, #19
 8002b36:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002b38:	193b      	adds	r3, r7, r4
 8002b3a:	4a7d      	ldr	r2, [pc, #500]	; (8002d30 <MX_GPIO_Init+0x32c>)
 8002b3c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b3e:	193b      	adds	r3, r7, r4
 8002b40:	2200      	movs	r2, #0
 8002b42:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b44:	193b      	adds	r3, r7, r4
 8002b46:	4a76      	ldr	r2, [pc, #472]	; (8002d20 <MX_GPIO_Init+0x31c>)
 8002b48:	0019      	movs	r1, r3
 8002b4a:	0010      	movs	r0, r2
 8002b4c:	f001 fd5e 	bl	800460c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RADIO_DIO_3_Pin;
 8002b50:	0021      	movs	r1, r4
 8002b52:	187b      	adds	r3, r7, r1
 8002b54:	2280      	movs	r2, #128	; 0x80
 8002b56:	0192      	lsls	r2, r2, #6
 8002b58:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002b5a:	000c      	movs	r4, r1
 8002b5c:	193b      	adds	r3, r7, r4
 8002b5e:	4a74      	ldr	r2, [pc, #464]	; (8002d30 <MX_GPIO_Init+0x32c>)
 8002b60:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b62:	193b      	adds	r3, r7, r4
 8002b64:	2200      	movs	r2, #0
 8002b66:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(RADIO_DIO_3_GPIO_Port, &GPIO_InitStruct);
 8002b68:	193b      	adds	r3, r7, r4
 8002b6a:	4a6e      	ldr	r2, [pc, #440]	; (8002d24 <MX_GPIO_Init+0x320>)
 8002b6c:	0019      	movs	r1, r3
 8002b6e:	0010      	movs	r0, r2
 8002b70:	f001 fd4c 	bl	800460c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RADIO_ANT_SWITCH_TX_BOOST_Pin|RADIO_RESET_Pin|RADIO_ANT_SWITCH_TX_RFO_Pin;
 8002b74:	193b      	adds	r3, r7, r4
 8002b76:	2207      	movs	r2, #7
 8002b78:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b7a:	193b      	adds	r3, r7, r4
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b80:	193b      	adds	r3, r7, r4
 8002b82:	2200      	movs	r2, #0
 8002b84:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b86:	193b      	adds	r3, r7, r4
 8002b88:	2202      	movs	r2, #2
 8002b8a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b8c:	193b      	adds	r3, r7, r4
 8002b8e:	4a65      	ldr	r2, [pc, #404]	; (8002d24 <MX_GPIO_Init+0x320>)
 8002b90:	0019      	movs	r1, r3
 8002b92:	0010      	movs	r0, r2
 8002b94:	f001 fd3a 	bl	800460c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002b98:	193b      	adds	r3, r7, r4
 8002b9a:	2204      	movs	r2, #4
 8002b9c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b9e:	193b      	adds	r3, r7, r4
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ba4:	193b      	adds	r3, r7, r4
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002baa:	193b      	adds	r3, r7, r4
 8002bac:	4a5c      	ldr	r2, [pc, #368]	; (8002d20 <MX_GPIO_Init+0x31c>)
 8002bae:	0019      	movs	r1, r3
 8002bb0:	0010      	movs	r0, r2
 8002bb2:	f001 fd2b 	bl	800460c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002bb6:	193b      	adds	r3, r7, r4
 8002bb8:	2220      	movs	r2, #32
 8002bba:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bbc:	193b      	adds	r3, r7, r4
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc2:	193b      	adds	r3, r7, r4
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bc8:	193b      	adds	r3, r7, r4
 8002bca:	2200      	movs	r2, #0
 8002bcc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002bce:	193a      	adds	r2, r7, r4
 8002bd0:	23a0      	movs	r3, #160	; 0xa0
 8002bd2:	05db      	lsls	r3, r3, #23
 8002bd4:	0011      	movs	r1, r2
 8002bd6:	0018      	movs	r0, r3
 8002bd8:	f001 fd18 	bl	800460c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8002bdc:	2200      	movs	r2, #0
 8002bde:	2100      	movs	r1, #0
 8002be0:	2005      	movs	r0, #5
 8002be2:	f001 fc89 	bl	80044f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8002be6:	2005      	movs	r0, #5
 8002be8:	f001 fc9b 	bl	8004522 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8002bec:	2200      	movs	r2, #0
 8002bee:	2100      	movs	r1, #0
 8002bf0:	2007      	movs	r0, #7
 8002bf2:	f001 fc81 	bl	80044f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8002bf6:	2007      	movs	r0, #7
 8002bf8:	f001 fc93 	bl	8004522 <HAL_NVIC_EnableIRQ>

  /* pim testing low power */


  GPIO_InitStruct.Pin = GPIO_PIN_14 | GPIO_PIN_13 | GPIO_PIN_10 | GPIO_PIN_9 | GPIO_PIN_8 | GPIO_PIN_5| GPIO_PIN_4 | GPIO_PIN_2| GPIO_PIN_0;
 8002bfc:	193b      	adds	r3, r7, r4
 8002bfe:	4a4d      	ldr	r2, [pc, #308]	; (8002d34 <MX_GPIO_Init+0x330>)
 8002c00:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c02:	193b      	adds	r3, r7, r4
 8002c04:	2203      	movs	r2, #3
 8002c06:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c08:	193b      	adds	r3, r7, r4
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c0e:	193a      	adds	r2, r7, r4
 8002c10:	23a0      	movs	r3, #160	; 0xa0
 8002c12:	05db      	lsls	r3, r3, #23
 8002c14:	0011      	movs	r1, r2
 8002c16:	0018      	movs	r0, r3
 8002c18:	f001 fcf8 	bl	800460c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002c1c:	193b      	adds	r3, r7, r4
 8002c1e:	2208      	movs	r2, #8
 8002c20:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c22:	193b      	adds	r3, r7, r4
 8002c24:	2203      	movs	r2, #3
 8002c26:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c28:	193b      	adds	r3, r7, r4
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c2e:	193a      	adds	r2, r7, r4
 8002c30:	23a0      	movs	r3, #160	; 0xa0
 8002c32:	05db      	lsls	r3, r3, #23
 8002c34:	0011      	movs	r1, r2
 8002c36:	0018      	movs	r0, r3
 8002c38:	f001 fce8 	bl	800460c <HAL_GPIO_Init>



  // disable power supply & relay
  GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_8;
 8002c3c:	0021      	movs	r1, r4
 8002c3e:	187b      	adds	r3, r7, r1
 8002c40:	2290      	movs	r2, #144	; 0x90
 8002c42:	0112      	lsls	r2, r2, #4
 8002c44:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c46:	000c      	movs	r4, r1
 8002c48:	193b      	adds	r3, r7, r4
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c4e:	193b      	adds	r3, r7, r4
 8002c50:	2200      	movs	r2, #0
 8002c52:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c54:	193b      	adds	r3, r7, r4
 8002c56:	2200      	movs	r2, #0
 8002c58:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c5a:	193a      	adds	r2, r7, r4
 8002c5c:	23a0      	movs	r3, #160	; 0xa0
 8002c5e:	05db      	lsls	r3, r3, #23
 8002c60:	0011      	movs	r1, r2
 8002c62:	0018      	movs	r0, r3
 8002c64:	f001 fcd2 	bl	800460c <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIOA,GPIO_InitStruct.Pin, GPIO_PIN_RESET);
 8002c68:	193b      	adds	r3, r7, r4
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	b299      	uxth	r1, r3
 8002c6e:	23a0      	movs	r3, #160	; 0xa0
 8002c70:	05db      	lsls	r3, r3, #23
 8002c72:	2200      	movs	r2, #0
 8002c74:	0018      	movs	r0, r3
 8002c76:	f001 fe47 	bl	8004908 <HAL_GPIO_WritePin>

  // disable bat mes & spi_cs
  GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_12;
 8002c7a:	193b      	adds	r3, r7, r4
 8002c7c:	4a2e      	ldr	r2, [pc, #184]	; (8002d38 <MX_GPIO_Init+0x334>)
 8002c7e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c80:	193b      	adds	r3, r7, r4
 8002c82:	2201      	movs	r2, #1
 8002c84:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c86:	193b      	adds	r3, r7, r4
 8002c88:	2200      	movs	r2, #0
 8002c8a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c8c:	193b      	adds	r3, r7, r4
 8002c8e:	2200      	movs	r2, #0
 8002c90:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c92:	193b      	adds	r3, r7, r4
 8002c94:	4a22      	ldr	r2, [pc, #136]	; (8002d20 <MX_GPIO_Init+0x31c>)
 8002c96:	0019      	movs	r1, r3
 8002c98:	0010      	movs	r0, r2
 8002c9a:	f001 fcb7 	bl	800460c <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIOB,GPIO_InitStruct.Pin, GPIO_PIN_RESET);
 8002c9e:	193b      	adds	r3, r7, r4
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	b29b      	uxth	r3, r3
 8002ca4:	481e      	ldr	r0, [pc, #120]	; (8002d20 <MX_GPIO_Init+0x31c>)
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	0019      	movs	r1, r3
 8002caa:	f001 fe2d 	bl	8004908 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin = GPIO_PIN_0| GPIO_PIN_1;
 8002cae:	193b      	adds	r3, r7, r4
 8002cb0:	2203      	movs	r2, #3
 8002cb2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002cb4:	193b      	adds	r3, r7, r4
 8002cb6:	2203      	movs	r2, #3
 8002cb8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cba:	193b      	adds	r3, r7, r4
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002cc0:	193b      	adds	r3, r7, r4
 8002cc2:	4a1e      	ldr	r2, [pc, #120]	; (8002d3c <MX_GPIO_Init+0x338>)
 8002cc4:	0019      	movs	r1, r3
 8002cc6:	0010      	movs	r0, r2
 8002cc8:	f001 fca0 	bl	800460c <HAL_GPIO_Init>


  //desable for lowpower
  GPIO_InitTypeDef GPIO_InitStructure;

  GPIO_InitStructure.Mode = GPIO_MODE_ANALOG;
 8002ccc:	2110      	movs	r1, #16
 8002cce:	187b      	adds	r3, r7, r1
 8002cd0:	2203      	movs	r2, #3
 8002cd2:	605a      	str	r2, [r3, #4]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8002cd4:	187b      	adds	r3, r7, r1
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	609a      	str	r2, [r3, #8]
  GPIO_InitStructure.Pin = (GPIO_PIN_13 | GPIO_PIN_14);
 8002cda:	187b      	adds	r3, r7, r1
 8002cdc:	22c0      	movs	r2, #192	; 0xc0
 8002cde:	01d2      	lsls	r2, r2, #7
 8002ce0:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002ce2:	187a      	adds	r2, r7, r1
 8002ce4:	23a0      	movs	r3, #160	; 0xa0
 8002ce6:	05db      	lsls	r3, r3, #23
 8002ce8:	0011      	movs	r1, r2
 8002cea:	0018      	movs	r0, r3
 8002cec:	f001 fc8e 	bl	800460c <HAL_GPIO_Init>

  __HAL_RCC_DBGMCU_CLK_ENABLE();
 8002cf0:	4b09      	ldr	r3, [pc, #36]	; (8002d18 <MX_GPIO_Init+0x314>)
 8002cf2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cf4:	4b08      	ldr	r3, [pc, #32]	; (8002d18 <MX_GPIO_Init+0x314>)
 8002cf6:	2180      	movs	r1, #128	; 0x80
 8002cf8:	03c9      	lsls	r1, r1, #15
 8002cfa:	430a      	orrs	r2, r1
 8002cfc:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_DBGMCU_DisableDBGStopMode();
 8002cfe:	f001 f8ed 	bl	8003edc <HAL_DBGMCU_DisableDBGStopMode>
  __HAL_RCC_DBGMCU_CLK_DISABLE();
 8002d02:	4b05      	ldr	r3, [pc, #20]	; (8002d18 <MX_GPIO_Init+0x314>)
 8002d04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d06:	4b04      	ldr	r3, [pc, #16]	; (8002d18 <MX_GPIO_Init+0x314>)
 8002d08:	490d      	ldr	r1, [pc, #52]	; (8002d40 <MX_GPIO_Init+0x33c>)
 8002d0a:	400a      	ands	r2, r1
 8002d0c:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002d0e:	46c0      	nop			; (mov r8, r8)
 8002d10:	46bd      	mov	sp, r7
 8002d12:	b00f      	add	sp, #60	; 0x3c
 8002d14:	bd90      	pop	{r4, r7, pc}
 8002d16:	46c0      	nop			; (mov r8, r8)
 8002d18:	40021000 	.word	0x40021000
 8002d1c:	00009022 	.word	0x00009022
 8002d20:	50000400 	.word	0x50000400
 8002d24:	50000800 	.word	0x50000800
 8002d28:	00009002 	.word	0x00009002
 8002d2c:	00006f11 	.word	0x00006f11
 8002d30:	10110000 	.word	0x10110000
 8002d34:	00006735 	.word	0x00006735
 8002d38:	00001004 	.word	0x00001004
 8002d3c:	50001c00 	.word	0x50001c00
 8002d40:	ffbfffff 	.word	0xffbfffff

08002d44 <stm32l_lowPowerRestoreGpioConfig>:

/* USER CODE BEGIN 2 */
void stm32l_lowPowerRestoreGpioConfig() {
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b086      	sub	sp, #24
 8002d48:	af02      	add	r7, sp, #8

	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d4a:	4b3f      	ldr	r3, [pc, #252]	; (8002e48 <stm32l_lowPowerRestoreGpioConfig+0x104>)
 8002d4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d4e:	4b3e      	ldr	r3, [pc, #248]	; (8002e48 <stm32l_lowPowerRestoreGpioConfig+0x104>)
 8002d50:	2101      	movs	r1, #1
 8002d52:	430a      	orrs	r2, r1
 8002d54:	62da      	str	r2, [r3, #44]	; 0x2c
 8002d56:	4b3c      	ldr	r3, [pc, #240]	; (8002e48 <stm32l_lowPowerRestoreGpioConfig+0x104>)
 8002d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	60fb      	str	r3, [r7, #12]
 8002d60:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d62:	4b39      	ldr	r3, [pc, #228]	; (8002e48 <stm32l_lowPowerRestoreGpioConfig+0x104>)
 8002d64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d66:	4b38      	ldr	r3, [pc, #224]	; (8002e48 <stm32l_lowPowerRestoreGpioConfig+0x104>)
 8002d68:	2102      	movs	r1, #2
 8002d6a:	430a      	orrs	r2, r1
 8002d6c:	62da      	str	r2, [r3, #44]	; 0x2c
 8002d6e:	4b36      	ldr	r3, [pc, #216]	; (8002e48 <stm32l_lowPowerRestoreGpioConfig+0x104>)
 8002d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d72:	2202      	movs	r2, #2
 8002d74:	4013      	ands	r3, r2
 8002d76:	60bb      	str	r3, [r7, #8]
 8002d78:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d7a:	4b33      	ldr	r3, [pc, #204]	; (8002e48 <stm32l_lowPowerRestoreGpioConfig+0x104>)
 8002d7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d7e:	4b32      	ldr	r3, [pc, #200]	; (8002e48 <stm32l_lowPowerRestoreGpioConfig+0x104>)
 8002d80:	2104      	movs	r1, #4
 8002d82:	430a      	orrs	r2, r1
 8002d84:	62da      	str	r2, [r3, #44]	; 0x2c
 8002d86:	4b30      	ldr	r3, [pc, #192]	; (8002e48 <stm32l_lowPowerRestoreGpioConfig+0x104>)
 8002d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d8a:	2204      	movs	r2, #4
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	607b      	str	r3, [r7, #4]
 8002d90:	687b      	ldr	r3, [r7, #4]
	  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002d92:	4b2d      	ldr	r3, [pc, #180]	; (8002e48 <stm32l_lowPowerRestoreGpioConfig+0x104>)
 8002d94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d96:	4b2c      	ldr	r3, [pc, #176]	; (8002e48 <stm32l_lowPowerRestoreGpioConfig+0x104>)
 8002d98:	2180      	movs	r1, #128	; 0x80
 8002d9a:	430a      	orrs	r2, r1
 8002d9c:	62da      	str	r2, [r3, #44]	; 0x2c
 8002d9e:	4b2a      	ldr	r3, [pc, #168]	; (8002e48 <stm32l_lowPowerRestoreGpioConfig+0x104>)
 8002da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002da2:	2280      	movs	r2, #128	; 0x80
 8002da4:	4013      	ands	r3, r2
 8002da6:	603b      	str	r3, [r7, #0]
 8002da8:	683b      	ldr	r3, [r7, #0]

	  // RF sw
	  gpio_configure_ext(ITSDK_MURATA_ANTSW_RX_BANK,ITSDK_MURATA_ANTSW_RX_PIN,GPIO_OUTPUT_PP,ITSDK_GPIO_SPEED_HIGH,ITSDK_GPIO_ALT_NONE);
 8002daa:	2300      	movs	r3, #0
 8002dac:	9300      	str	r3, [sp, #0]
 8002dae:	2301      	movs	r3, #1
 8002db0:	2200      	movs	r2, #0
 8002db2:	2102      	movs	r1, #2
 8002db4:	2000      	movs	r0, #0
 8002db6:	f01a fef7 	bl	801dba8 <gpio_configure_ext>

	  // LoRa NSS
	  gpio_configure_ext(ITSDK_SX1276_NSS_BANK,ITSDK_SX1276_NSS_PIN,GPIO_OUTPUT_PULLUP,ITSDK_GPIO_SPEED_HIGH,ITSDK_GPIO_ALT_NONE);
 8002dba:	2380      	movs	r3, #128	; 0x80
 8002dbc:	0219      	lsls	r1, r3, #8
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	9300      	str	r3, [sp, #0]
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	2000      	movs	r0, #0
 8002dc8:	f01a feee 	bl	801dba8 <gpio_configure_ext>

	  // LoRa TCXO
	  gpio_configure_ext(ITSDK_SX1276_TCXO_VCC_BANK,ITSDK_SX1276_TCXO_VCC_PIN,GPIO_OUTPUT_PP,ITSDK_GPIO_SPEED_LOW,ITSDK_GPIO_ALT_NONE);
 8002dcc:	2380      	movs	r3, #128	; 0x80
 8002dce:	0159      	lsls	r1, r3, #5
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	9300      	str	r3, [sp, #0]
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	2000      	movs	r0, #0
 8002dda:	f01a fee5 	bl	801dba8 <gpio_configure_ext>

	  // LoRa DIO0-1-2-3-4
	  gpio_configure_ext(ITSDK_SX1276_DIO_0_BANK,ITSDK_SX1276_DIO_0_PIN,GPIO_INTERRUPT_RISING,ITSDK_GPIO_SPEED_HIGH,ITSDK_GPIO_ALT_NONE);
 8002dde:	2300      	movs	r3, #0
 8002de0:	9300      	str	r3, [sp, #0]
 8002de2:	2301      	movs	r3, #1
 8002de4:	2207      	movs	r2, #7
 8002de6:	2110      	movs	r1, #16
 8002de8:	2001      	movs	r0, #1
 8002dea:	f01a fedd 	bl	801dba8 <gpio_configure_ext>
	  gpio_configure_ext(ITSDK_SX1276_DIO_1_BANK,ITSDK_SX1276_DIO_1_PIN,GPIO_INTERRUPT_RISING,ITSDK_GPIO_SPEED_HIGH,ITSDK_GPIO_ALT_NONE);
 8002dee:	2300      	movs	r3, #0
 8002df0:	9300      	str	r3, [sp, #0]
 8002df2:	2301      	movs	r3, #1
 8002df4:	2207      	movs	r2, #7
 8002df6:	2102      	movs	r1, #2
 8002df8:	2001      	movs	r0, #1
 8002dfa:	f01a fed5 	bl	801dba8 <gpio_configure_ext>
	  gpio_configure_ext(ITSDK_SX1276_DIO_2_BANK,ITSDK_SX1276_DIO_2_PIN,GPIO_INTERRUPT_RISING,ITSDK_GPIO_SPEED_HIGH,ITSDK_GPIO_ALT_NONE);
 8002dfe:	2300      	movs	r3, #0
 8002e00:	9300      	str	r3, [sp, #0]
 8002e02:	2301      	movs	r3, #1
 8002e04:	2207      	movs	r2, #7
 8002e06:	2101      	movs	r1, #1
 8002e08:	2001      	movs	r0, #1
 8002e0a:	f01a fecd 	bl	801dba8 <gpio_configure_ext>
	  gpio_configure_ext(ITSDK_SX1276_DIO_3_BANK,ITSDK_SX1276_DIO_3_PIN,GPIO_INTERRUPT_RISING,ITSDK_GPIO_SPEED_HIGH,ITSDK_GPIO_ALT_NONE);
 8002e0e:	2380      	movs	r3, #128	; 0x80
 8002e10:	0199      	lsls	r1, r3, #6
 8002e12:	2300      	movs	r3, #0
 8002e14:	9300      	str	r3, [sp, #0]
 8002e16:	2301      	movs	r3, #1
 8002e18:	2207      	movs	r2, #7
 8002e1a:	2002      	movs	r0, #2
 8002e1c:	f01a fec4 	bl	801dba8 <gpio_configure_ext>


	  /* EXTI interrupt init*/
	  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8002e20:	2200      	movs	r2, #0
 8002e22:	2100      	movs	r1, #0
 8002e24:	2005      	movs	r0, #5
 8002e26:	f001 fb67 	bl	80044f8 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8002e2a:	2005      	movs	r0, #5
 8002e2c:	f001 fb79 	bl	8004522 <HAL_NVIC_EnableIRQ>

	  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8002e30:	2200      	movs	r2, #0
 8002e32:	2100      	movs	r1, #0
 8002e34:	2007      	movs	r0, #7
 8002e36:	f001 fb5f 	bl	80044f8 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8002e3a:	2007      	movs	r0, #7
 8002e3c:	f001 fb71 	bl	8004522 <HAL_NVIC_EnableIRQ>
	  GPIO_InitStruct.Pin = LD4_Pin;
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);*/
}
 8002e40:	46c0      	nop			; (mov r8, r8)
 8002e42:	46bd      	mov	sp, r7
 8002e44:	b004      	add	sp, #16
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	40021000 	.word	0x40021000

08002e4c <main>:
  */
extern uint8_t byte;
extern uint8_t tabToPrint[5];

int main(void)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002e50:	f000 ffa8 	bl	8003da4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002e54:	f000 f812 	bl	8002e7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002e58:	f7ff fdd4 	bl	8002a04 <MX_GPIO_Init>
  MX_RTC_Init();
 8002e5c:	f000 fbfe 	bl	800365c <MX_RTC_Init>
  MX_SPI1_Init();
 8002e60:	f000 fcc4 	bl	80037ec <MX_SPI1_Init>
//  MX_SPI2_Init();
  MX_USART2_UART_Init();
 8002e64:	f000 febe 	bl	8003be4 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8002e68:	f000 fe8c 	bl	8003b84 <MX_USART1_UART_Init>


//  MX_IWDG_Init();
  MX_ADC_Init();
 8002e6c:	f7ff fd4c 	bl	8002908 <MX_ADC_Init>
//  MX_TIM21_Init();

  /* USER CODE BEGIN 2 */
  itsdk_setup();
 8002e70:	f019 fce4 	bl	801c83c <itsdk_setup>
  {
    /* USER CODE END WHILE */
	/* USER CODE BEGIN 3 */


	 itsdk_loop();
 8002e74:	f019 fd16 	bl	801c8a4 <itsdk_loop>
 8002e78:	e7fc      	b.n	8002e74 <main+0x28>
	...

08002e7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002e7c:	b590      	push	{r4, r7, lr}
 8002e7e:	b09d      	sub	sp, #116	; 0x74
 8002e80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e82:	2438      	movs	r4, #56	; 0x38
 8002e84:	193b      	adds	r3, r7, r4
 8002e86:	0018      	movs	r0, r3
 8002e88:	2338      	movs	r3, #56	; 0x38
 8002e8a:	001a      	movs	r2, r3
 8002e8c:	2100      	movs	r1, #0
 8002e8e:	f01c f957 	bl	801f140 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002e92:	2324      	movs	r3, #36	; 0x24
 8002e94:	18fb      	adds	r3, r7, r3
 8002e96:	0018      	movs	r0, r3
 8002e98:	2314      	movs	r3, #20
 8002e9a:	001a      	movs	r2, r3
 8002e9c:	2100      	movs	r1, #0
 8002e9e:	f01c f94f 	bl	801f140 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002ea2:	003b      	movs	r3, r7
 8002ea4:	0018      	movs	r0, r3
 8002ea6:	2324      	movs	r3, #36	; 0x24
 8002ea8:	001a      	movs	r2, r3
 8002eaa:	2100      	movs	r1, #0
 8002eac:	f01c f948 	bl	801f140 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002eb0:	4b34      	ldr	r3, [pc, #208]	; (8002f84 <SystemClock_Config+0x108>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a34      	ldr	r2, [pc, #208]	; (8002f88 <SystemClock_Config+0x10c>)
 8002eb6:	401a      	ands	r2, r3
 8002eb8:	4b32      	ldr	r3, [pc, #200]	; (8002f84 <SystemClock_Config+0x108>)
 8002eba:	2180      	movs	r1, #128	; 0x80
 8002ebc:	0109      	lsls	r1, r1, #4
 8002ebe:	430a      	orrs	r2, r1
 8002ec0:	601a      	str	r2, [r3, #0]
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002ec2:	f001 fd5b 	bl	800497c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002ec6:	4b31      	ldr	r3, [pc, #196]	; (8002f8c <SystemClock_Config+0x110>)
 8002ec8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002eca:	4b30      	ldr	r3, [pc, #192]	; (8002f8c <SystemClock_Config+0x110>)
 8002ecc:	492e      	ldr	r1, [pc, #184]	; (8002f88 <SystemClock_Config+0x10c>)
 8002ece:	400a      	ands	r2, r1
 8002ed0:	651a      	str	r2, [r3, #80]	; 0x50
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8002ed2:	193b      	adds	r3, r7, r4
 8002ed4:	220e      	movs	r2, #14
 8002ed6:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002ed8:	193b      	adds	r3, r7, r4
 8002eda:	2280      	movs	r2, #128	; 0x80
 8002edc:	0052      	lsls	r2, r2, #1
 8002ede:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002ee0:	0021      	movs	r1, r4
 8002ee2:	187b      	adds	r3, r7, r1
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002ee8:	187b      	adds	r3, r7, r1
 8002eea:	2210      	movs	r2, #16
 8002eec:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002eee:	187b      	adds	r3, r7, r1
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ef4:	187b      	adds	r3, r7, r1
 8002ef6:	2202      	movs	r2, #2
 8002ef8:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002efa:	187b      	adds	r3, r7, r1
 8002efc:	2200      	movs	r2, #0
 8002efe:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_6;
 8002f00:	187b      	adds	r3, r7, r1
 8002f02:	2280      	movs	r2, #128	; 0x80
 8002f04:	0312      	lsls	r2, r2, #12
 8002f06:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 8002f08:	187b      	adds	r3, r7, r1
 8002f0a:	2280      	movs	r2, #128	; 0x80
 8002f0c:	0412      	lsls	r2, r2, #16
 8002f0e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f10:	187b      	adds	r3, r7, r1
 8002f12:	0018      	movs	r0, r3
 8002f14:	f001 fd90 	bl	8004a38 <HAL_RCC_OscConfig>
 8002f18:	1e03      	subs	r3, r0, #0
 8002f1a:	d001      	beq.n	8002f20 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8002f1c:	f000 f838 	bl	8002f90 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002f20:	2124      	movs	r1, #36	; 0x24
 8002f22:	187b      	adds	r3, r7, r1
 8002f24:	220f      	movs	r2, #15
 8002f26:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002f28:	187b      	adds	r3, r7, r1
 8002f2a:	2203      	movs	r2, #3
 8002f2c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f2e:	187b      	adds	r3, r7, r1
 8002f30:	2200      	movs	r2, #0
 8002f32:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002f34:	187b      	adds	r3, r7, r1
 8002f36:	2200      	movs	r2, #0
 8002f38:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002f3a:	187b      	adds	r3, r7, r1
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002f40:	187b      	adds	r3, r7, r1
 8002f42:	2101      	movs	r1, #1
 8002f44:	0018      	movs	r0, r3
 8002f46:	f002 f947 	bl	80051d8 <HAL_RCC_ClockConfig>
 8002f4a:	1e03      	subs	r3, r0, #0
 8002f4c:	d001      	beq.n	8002f52 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8002f4e:	f000 f81f 	bl	8002f90 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_RTC;
 8002f52:	003b      	movs	r3, r7
 8002f54:	2223      	movs	r2, #35	; 0x23
 8002f56:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_HSI;
 8002f58:	003b      	movs	r3, r7
 8002f5a:	2208      	movs	r2, #8
 8002f5c:	60da      	str	r2, [r3, #12]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002f5e:	003b      	movs	r3, r7
 8002f60:	2200      	movs	r2, #0
 8002f62:	609a      	str	r2, [r3, #8]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002f64:	003b      	movs	r3, r7
 8002f66:	2280      	movs	r2, #128	; 0x80
 8002f68:	0252      	lsls	r2, r2, #9
 8002f6a:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f6c:	003b      	movs	r3, r7
 8002f6e:	0018      	movs	r0, r3
 8002f70:	f002 fb16 	bl	80055a0 <HAL_RCCEx_PeriphCLKConfig>
 8002f74:	1e03      	subs	r3, r0, #0
 8002f76:	d001      	beq.n	8002f7c <SystemClock_Config+0x100>
  {
    Error_Handler();
 8002f78:	f000 f80a 	bl	8002f90 <Error_Handler>
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
    if(HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK){
  	  Error_Handler();
    }*/

}
 8002f7c:	46c0      	nop			; (mov r8, r8)
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	b01d      	add	sp, #116	; 0x74
 8002f82:	bd90      	pop	{r4, r7, pc}
 8002f84:	40007000 	.word	0x40007000
 8002f88:	ffffe7ff 	.word	0xffffe7ff
 8002f8c:	40021000 	.word	0x40021000

08002f90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002f94:	46c0      	nop			; (mov r8, r8)
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
	...

08002f9c <task>:
uint8_t readUart();
void resetMeasure(uint8_t * array, uint8_t size);
uint16_t measureUart;												//measure as int
/**************************/

void task() {
 8002f9c:	b5b0      	push	{r4, r5, r7, lr}
 8002f9e:	b084      	sub	sp, #16
 8002fa0:	af00      	add	r7, sp, #0
// readUart();
//	log_info("task measure : %d, measure validity : %d\n\r",measureUart, measureValidity);
	/**
	 * if not joined set the green led to 1
	 */
	if(!itsdk_lorawan_hasjoined()){
 8002fa2:	f019 fa61 	bl	801c468 <itsdk_lorawan_hasjoined>
 8002fa6:	0003      	movs	r3, r0
 8002fa8:	001a      	movs	r2, r3
 8002faa:	2301      	movs	r3, #1
 8002fac:	4053      	eors	r3, r2
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d003      	beq.n	8002fbc <task+0x20>
		gpio_set(LEDGreen_PORT,LEDGreen_PIN);
 8002fb4:	2180      	movs	r1, #128	; 0x80
 8002fb6:	2001      	movs	r0, #1
 8002fb8:	f01a ffe0 	bl	801df7c <gpio_set>
	}


	// wait for the board configuration
	uint8_t i = 0;
 8002fbc:	230f      	movs	r3, #15
 8002fbe:	18fb      	adds	r3, r7, r3
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	701a      	strb	r2, [r3, #0]
	uint8_t devEui[8] = {0};
 8002fc4:	1d3b      	adds	r3, r7, #4
 8002fc6:	0018      	movs	r0, r3
 8002fc8:	2308      	movs	r3, #8
 8002fca:	001a      	movs	r2, r3
 8002fcc:	2100      	movs	r1, #0
 8002fce:	f01c f8b7 	bl	801f140 <memset>
	itsdk_lorawan_getDeviceEUI(devEui);
 8002fd2:	1d3b      	adds	r3, r7, #4
 8002fd4:	0018      	movs	r0, r3
 8002fd6:	f019 fb03 	bl	801c5e0 <itsdk_lorawan_getDeviceEUI>
	while ( i < 8 && devEui[i] == 0 ) i++;
 8002fda:	e005      	b.n	8002fe8 <task+0x4c>
 8002fdc:	210f      	movs	r1, #15
 8002fde:	187b      	adds	r3, r7, r1
 8002fe0:	781a      	ldrb	r2, [r3, #0]
 8002fe2:	187b      	adds	r3, r7, r1
 8002fe4:	3201      	adds	r2, #1
 8002fe6:	701a      	strb	r2, [r3, #0]
 8002fe8:	230f      	movs	r3, #15
 8002fea:	18fb      	adds	r3, r7, r3
 8002fec:	781b      	ldrb	r3, [r3, #0]
 8002fee:	2b07      	cmp	r3, #7
 8002ff0:	d806      	bhi.n	8003000 <task+0x64>
 8002ff2:	230f      	movs	r3, #15
 8002ff4:	18fb      	adds	r3, r7, r3
 8002ff6:	781b      	ldrb	r3, [r3, #0]
 8002ff8:	1d3a      	adds	r2, r7, #4
 8002ffa:	5cd3      	ldrb	r3, [r2, r3]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d0ed      	beq.n	8002fdc <task+0x40>
	if  ( i < 8 ) {
 8003000:	230f      	movs	r3, #15
 8003002:	18fb      	adds	r3, r7, r3
 8003004:	781b      	ldrb	r3, [r3, #0]
 8003006:	2b07      	cmp	r3, #7
 8003008:	d86b      	bhi.n	80030e2 <task+0x146>
		if ( s_state.setup == BOOL_FALSE) {
 800300a:	4b38      	ldr	r3, [pc, #224]	; (80030ec <task+0x150>)
 800300c:	791b      	ldrb	r3, [r3, #4]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d11e      	bne.n	8003050 <task+0xb4>
			log_info("Init LoRawan Stack ");
 8003012:	4b37      	ldr	r3, [pc, #220]	; (80030f0 <task+0x154>)
 8003014:	0018      	movs	r0, r3
 8003016:	f019 f8b9 	bl	801c18c <log_info>
			itsdk_lorawan_init_t r;
			#ifdef ITSDK_LORAWAN_CHANNEL
				static itsdk_lorawan_channelInit_t channels= ITSDK_LORAWAN_CHANNEL;
				r = itsdk_lorawan_setup(itsdk_config.sdk.activeRegion,&channels);
 800301a:	4b36      	ldr	r3, [pc, #216]	; (80030f4 <task+0x158>)
 800301c:	891b      	ldrh	r3, [r3, #8]
 800301e:	250e      	movs	r5, #14
 8003020:	197c      	adds	r4, r7, r5
 8003022:	4a35      	ldr	r2, [pc, #212]	; (80030f8 <task+0x15c>)
 8003024:	0011      	movs	r1, r2
 8003026:	0018      	movs	r0, r3
 8003028:	f019 f8f6 	bl	801c218 <itsdk_lorawan_setup>
 800302c:	0003      	movs	r3, r0
 800302e:	7023      	strb	r3, [r4, #0]
			#else
				r = itsdk_lorawan_setup(itsdk_config.sdk.activeRegion,NULL);
			#endif
			if ( r == LORAWAN_INIT_SUCESS ) {
 8003030:	197b      	adds	r3, r7, r5
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d107      	bne.n	8003048 <task+0xac>
				log_info("success\r\n");
 8003038:	4b30      	ldr	r3, [pc, #192]	; (80030fc <task+0x160>)
 800303a:	0018      	movs	r0, r3
 800303c:	f019 f8a6 	bl	801c18c <log_info>
				s_state.setup = BOOL_TRUE;
 8003040:	4b2a      	ldr	r3, [pc, #168]	; (80030ec <task+0x150>)
 8003042:	2201      	movs	r2, #1
 8003044:	711a      	strb	r2, [r3, #4]
 8003046:	e003      	b.n	8003050 <task+0xb4>
			} else {
				log_info("failed\r\n");
 8003048:	4b2d      	ldr	r3, [pc, #180]	; (8003100 <task+0x164>)
 800304a:	0018      	movs	r0, r3
 800304c:	f019 f89e 	bl	801c18c <log_info>
			}
		}
		if ( s_state.setup == BOOL_TRUE && s_state.lastComMS > COMFREQS) {
 8003050:	4b26      	ldr	r3, [pc, #152]	; (80030ec <task+0x150>)
 8003052:	791b      	ldrb	r3, [r3, #4]
 8003054:	2b01      	cmp	r3, #1
 8003056:	d13d      	bne.n	80030d4 <task+0x138>
 8003058:	4b24      	ldr	r3, [pc, #144]	; (80030ec <task+0x150>)
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	4b29      	ldr	r3, [pc, #164]	; (8003104 <task+0x168>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	429a      	cmp	r2, r3
 8003062:	dd37      	ble.n	80030d4 <task+0x138>
			//check if joined
			if ( !itsdk_lorawan_hasjoined() ) {
 8003064:	f019 fa00 	bl	801c468 <itsdk_lorawan_hasjoined>
 8003068:	0003      	movs	r3, r0
 800306a:	001a      	movs	r2, r3
 800306c:	2301      	movs	r3, #1
 800306e:	4053      	eors	r3, r2
 8003070:	b2db      	uxtb	r3, r3
 8003072:	2b00      	cmp	r3, #0
 8003074:	d01c      	beq.n	80030b0 <task+0x114>
				log_info("Connecting LoRaWAN ");
 8003076:	4b24      	ldr	r3, [pc, #144]	; (8003108 <task+0x16c>)
 8003078:	0018      	movs	r0, r3
 800307a:	f019 f887 	bl	801c18c <log_info>
				if ( itsdk_lorawan_join_sync() == LORAWAN_JOIN_SUCCESS ) {
 800307e:	f019 f9c9 	bl	801c414 <itsdk_lorawan_join_sync>
 8003082:	0003      	movs	r3, r0
 8003084:	2b01      	cmp	r3, #1
 8003086:	d108      	bne.n	800309a <task+0xfe>
					gpio_reset(LEDGreen_PORT,LEDGreen_PIN);
 8003088:	2180      	movs	r1, #128	; 0x80
 800308a:	2001      	movs	r0, #1
 800308c:	f01a ff8e 	bl	801dfac <gpio_reset>
					log_info("success\r\n");
 8003090:	4b1a      	ldr	r3, [pc, #104]	; (80030fc <task+0x160>)
 8003092:	0018      	movs	r0, r3
 8003094:	f019 f87a 	bl	801c18c <log_info>
			if ( !itsdk_lorawan_hasjoined() ) {
 8003098:	e023      	b.n	80030e2 <task+0x146>
				} else {
					log_info("failed\r\n");
 800309a:	4b19      	ldr	r3, [pc, #100]	; (8003100 <task+0x164>)
 800309c:	0018      	movs	r0, r3
 800309e:	f019 f875 	bl	801c18c <log_info>
					s_state.lastComMS = COMFREQS - 30*1000; // retry in 30 seconds
 80030a2:	4b18      	ldr	r3, [pc, #96]	; (8003104 <task+0x168>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a19      	ldr	r2, [pc, #100]	; (800310c <task+0x170>)
 80030a8:	189a      	adds	r2, r3, r2
 80030aa:	4b10      	ldr	r3, [pc, #64]	; (80030ec <task+0x150>)
 80030ac:	601a      	str	r2, [r3, #0]
			if ( !itsdk_lorawan_hasjoined() ) {
 80030ae:	e018      	b.n	80030e2 <task+0x146>
				}
			} else {
				// Send a LoRaWan Frame
				uint8_t measureValidity = readUart();
 80030b0:	250d      	movs	r5, #13
 80030b2:	197c      	adds	r4, r7, r5
 80030b4:	f000 fa10 	bl	80034d8 <readUart>
 80030b8:	0003      	movs	r3, r0
 80030ba:	7023      	strb	r3, [r4, #0]

				sendUplink(measureUart, measureValidity);
 80030bc:	4b14      	ldr	r3, [pc, #80]	; (8003110 <task+0x174>)
 80030be:	881a      	ldrh	r2, [r3, #0]
 80030c0:	197b      	adds	r3, r7, r5
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	0019      	movs	r1, r3
 80030c6:	0010      	movs	r0, r2
 80030c8:	f000 f826 	bl	8003118 <sendUplink>
				s_state.lastComMS = 0;
 80030cc:	4b07      	ldr	r3, [pc, #28]	; (80030ec <task+0x150>)
 80030ce:	2200      	movs	r2, #0
 80030d0:	601a      	str	r2, [r3, #0]
			if ( !itsdk_lorawan_hasjoined() ) {
 80030d2:	e006      	b.n	80030e2 <task+0x146>
			}
		} else {
			s_state.lastComMS += TASKDELAYMS;
 80030d4:	4b05      	ldr	r3, [pc, #20]	; (80030ec <task+0x150>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a0e      	ldr	r2, [pc, #56]	; (8003114 <task+0x178>)
 80030da:	189a      	adds	r2, r3, r2
 80030dc:	4b03      	ldr	r3, [pc, #12]	; (80030ec <task+0x150>)
 80030de:	601a      	str	r2, [r3, #0]
		}
	}
}
 80030e0:	e7ff      	b.n	80030e2 <task+0x146>
 80030e2:	46c0      	nop			; (mov r8, r8)
 80030e4:	46bd      	mov	sp, r7
 80030e6:	b004      	add	sp, #16
 80030e8:	bdb0      	pop	{r4, r5, r7, pc}
 80030ea:	46c0      	nop			; (mov r8, r8)
 80030ec:	20001348 	.word	0x20001348
 80030f0:	0802064c 	.word	0x0802064c
 80030f4:	20001688 	.word	0x20001688
 80030f8:	20000008 	.word	0x20000008
 80030fc:	08020660 	.word	0x08020660
 8003100:	0802066c 	.word	0x0802066c
 8003104:	20000000 	.word	0x20000000
 8003108:	08020678 	.word	0x08020678
 800310c:	ffff8ad0 	.word	0xffff8ad0
 8003110:	20001350 	.word	0x20001350
 8003114:	00002710 	.word	0x00002710

08003118 <sendUplink>:


/****************************************************************************************
 * SendUplink packet
 ****************************************************************************************/
void sendUplink(uint16_t measure, uint8_t validity){
 8003118:	b5f0      	push	{r4, r5, r6, r7, lr}
 800311a:	b095      	sub	sp, #84	; 0x54
 800311c:	af06      	add	r7, sp, #24
 800311e:	0002      	movs	r2, r0
 8003120:	1dbb      	adds	r3, r7, #6
 8003122:	801a      	strh	r2, [r3, #0]
 8003124:	1d7b      	adds	r3, r7, #5
 8003126:	1c0a      	adds	r2, r1, #0
 8003128:	701a      	strb	r2, [r3, #0]
	log_info("Fire a LoRaWAN message \n\r");
 800312a:	4b50      	ldr	r3, [pc, #320]	; (800326c <sendUplink+0x154>)
 800312c:	0018      	movs	r0, r3
 800312e:	f019 f82d 	bl	801c18c <log_info>

	uint16_t vbat = getBatteryLevel();
 8003132:	2536      	movs	r5, #54	; 0x36
 8003134:	197c      	adds	r4, r7, r5
 8003136:	f000 f975 	bl	8003424 <getBatteryLevel>
 800313a:	0003      	movs	r3, r0
 800313c:	8023      	strh	r3, [r4, #0]
	uint8_t port;
	uint8_t size=16;
 800313e:	262d      	movs	r6, #45	; 0x2d
 8003140:	19bb      	adds	r3, r7, r6
 8003142:	2210      	movs	r2, #16
 8003144:	701a      	strb	r2, [r3, #0]
	uint8_t rx[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
 8003146:	231c      	movs	r3, #28
 8003148:	18fb      	adds	r3, r7, r3
 800314a:	0018      	movs	r0, r3
 800314c:	2310      	movs	r3, #16
 800314e:	001a      	movs	r2, r3
 8003150:	2100      	movs	r1, #0
 8003152:	f01b fff5 	bl	801f140 <memset>
	uint8_t sendBuff[20];
	uint32_t sendBuffIndex = 0; //uint32
 8003156:	2300      	movs	r3, #0
 8003158:	633b      	str	r3, [r7, #48]	; 0x30
	
	sendBuff[sendBuffIndex++] = (vbat >> 8 ) & 0xFF;
 800315a:	197b      	adds	r3, r7, r5
 800315c:	881b      	ldrh	r3, [r3, #0]
 800315e:	0a1b      	lsrs	r3, r3, #8
 8003160:	b299      	uxth	r1, r3
 8003162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003164:	1c5a      	adds	r2, r3, #1
 8003166:	633a      	str	r2, [r7, #48]	; 0x30
 8003168:	b2c9      	uxtb	r1, r1
 800316a:	2008      	movs	r0, #8
 800316c:	183a      	adds	r2, r7, r0
 800316e:	54d1      	strb	r1, [r2, r3]
	sendBuff[sendBuffIndex++] = vbat & 0xFF;
 8003170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003172:	1c5a      	adds	r2, r3, #1
 8003174:	633a      	str	r2, [r7, #48]	; 0x30
 8003176:	197a      	adds	r2, r7, r5
 8003178:	8812      	ldrh	r2, [r2, #0]
 800317a:	b2d1      	uxtb	r1, r2
 800317c:	183a      	adds	r2, r7, r0
 800317e:	54d1      	strb	r1, [r2, r3]
	//sendBuff[sendBuffIndex++] = tabToPrint[1];
	//sendBuff[sendBuffIndex++] = tabToPrint[2];
	//sendBuff[sendBuffIndex++] = tabToPrint[3];
	//sendBuff[sendBuffIndex++] = tabToPrint[4];

	sendBuff[sendBuffIndex++] = (measure >> 8 ) & 0xFF;
 8003180:	1dbb      	adds	r3, r7, #6
 8003182:	881b      	ldrh	r3, [r3, #0]
 8003184:	0a1b      	lsrs	r3, r3, #8
 8003186:	b299      	uxth	r1, r3
 8003188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800318a:	1c5a      	adds	r2, r3, #1
 800318c:	633a      	str	r2, [r7, #48]	; 0x30
 800318e:	b2c9      	uxtb	r1, r1
 8003190:	183a      	adds	r2, r7, r0
 8003192:	54d1      	strb	r1, [r2, r3]
	sendBuff[sendBuffIndex++] = measure & 0xFF;
 8003194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003196:	1c5a      	adds	r2, r3, #1
 8003198:	633a      	str	r2, [r7, #48]	; 0x30
 800319a:	1dba      	adds	r2, r7, #6
 800319c:	8812      	ldrh	r2, [r2, #0]
 800319e:	b2d1      	uxtb	r1, r2
 80031a0:	183a      	adds	r2, r7, r0
 80031a2:	54d1      	strb	r1, [r2, r3]
	sendBuff[sendBuffIndex++] = validity;
 80031a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031a6:	1c5a      	adds	r2, r3, #1
 80031a8:	633a      	str	r2, [r7, #48]	; 0x30
 80031aa:	183a      	adds	r2, r7, r0
 80031ac:	1d79      	adds	r1, r7, #5
 80031ae:	7809      	ldrb	r1, [r1, #0]
 80031b0:	54d1      	strb	r1, [r2, r3]


	
	itsdk_lorawan_send_t r = itsdk_lorawan_send_sync(
 80031b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031b4:	b2d9      	uxtb	r1, r3
 80031b6:	4b2e      	ldr	r3, [pc, #184]	; (8003270 <sendUplink+0x158>)
 80031b8:	781a      	ldrb	r2, [r3, #0]
 80031ba:	252f      	movs	r5, #47	; 0x2f
 80031bc:	197c      	adds	r4, r7, r5
 80031be:	1838      	adds	r0, r7, r0
 80031c0:	2300      	movs	r3, #0
 80031c2:	9305      	str	r3, [sp, #20]
 80031c4:	231c      	movs	r3, #28
 80031c6:	18fb      	adds	r3, r7, r3
 80031c8:	9304      	str	r3, [sp, #16]
 80031ca:	19bb      	adds	r3, r7, r6
 80031cc:	9303      	str	r3, [sp, #12]
 80031ce:	232e      	movs	r3, #46	; 0x2e
 80031d0:	18fb      	adds	r3, r7, r3
 80031d2:	9302      	str	r3, [sp, #8]
 80031d4:	2300      	movs	r3, #0
 80031d6:	9301      	str	r3, [sp, #4]
 80031d8:	2301      	movs	r3, #1
 80031da:	9300      	str	r3, [sp, #0]
 80031dc:	0013      	movs	r3, r2
 80031de:	2201      	movs	r2, #1
 80031e0:	f019 f95e 	bl	801c4a0 <itsdk_lorawan_send_sync>
 80031e4:	0003      	movs	r3, r0
 80031e6:	7023      	strb	r3, [r4, #0]
			&port,							// In case of reception - Port (uint8_t)
			&size,							// In case of reception - Size (uint8_t) - init with buffer max size
			rx,								// In case of reception - Data (uint8_t[] bcopied)
			PAYLOAD_ENCRYPT_NONE			// End to End encryption mode
	);
	if ( r == LORAWAN_SEND_SENT || r == LORAWAN_SEND_ACKED || r == LORAWAN_SEND_ACKED_WITH_DOWNLINK || r == LORAWAN_SEND_ACKED_WITH_DOWNLINK_PENDING) {
 80031e8:	197b      	adds	r3, r7, r5
 80031ea:	781b      	ldrb	r3, [r3, #0]
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d00e      	beq.n	800320e <sendUplink+0xf6>
 80031f0:	232f      	movs	r3, #47	; 0x2f
 80031f2:	18fb      	adds	r3, r7, r3
 80031f4:	781b      	ldrb	r3, [r3, #0]
 80031f6:	2b02      	cmp	r3, #2
 80031f8:	d009      	beq.n	800320e <sendUplink+0xf6>
 80031fa:	232f      	movs	r3, #47	; 0x2f
 80031fc:	18fb      	adds	r3, r7, r3
 80031fe:	781b      	ldrb	r3, [r3, #0]
 8003200:	2b03      	cmp	r3, #3
 8003202:	d004      	beq.n	800320e <sendUplink+0xf6>
 8003204:	232f      	movs	r3, #47	; 0x2f
 8003206:	18fb      	adds	r3, r7, r3
 8003208:	781b      	ldrb	r3, [r3, #0]
 800320a:	2b04      	cmp	r3, #4
 800320c:	d122      	bne.n	8003254 <sendUplink+0x13c>
		gpio_set(LEDGreen_PORT,LEDGreen_PIN);
 800320e:	2180      	movs	r1, #128	; 0x80
 8003210:	2001      	movs	r0, #1
 8003212:	f01a feb3 	bl	801df7c <gpio_set>
		log_info("Send Success\r\n",r);
 8003216:	232f      	movs	r3, #47	; 0x2f
 8003218:	18fb      	adds	r3, r7, r3
 800321a:	781a      	ldrb	r2, [r3, #0]
 800321c:	4b15      	ldr	r3, [pc, #84]	; (8003274 <sendUplink+0x15c>)
 800321e:	0011      	movs	r1, r2
 8003220:	0018      	movs	r0, r3
 8003222:	f018 ffb3 	bl	801c18c <log_info>
		itsdk_delayMs(500);
 8003226:	23fa      	movs	r3, #250	; 0xfa
 8003228:	005b      	lsls	r3, r3, #1
 800322a:	0018      	movs	r0, r3
 800322c:	f01b f802 	bl	801e234 <itsdk_delayMs>
		gpio_reset(LEDGreen_PORT,LEDGreen_PIN);
 8003230:	2180      	movs	r1, #128	; 0x80
 8003232:	2001      	movs	r0, #1
 8003234:	f01a feba 	bl	801dfac <gpio_reset>
		process_downlink(port, rx);
 8003238:	242e      	movs	r4, #46	; 0x2e
 800323a:	193b      	adds	r3, r7, r4
 800323c:	781b      	ldrb	r3, [r3, #0]
 800323e:	001a      	movs	r2, r3
 8003240:	231c      	movs	r3, #28
 8003242:	18fb      	adds	r3, r7, r3
 8003244:	0019      	movs	r1, r3
 8003246:	0010      	movs	r0, r2
 8003248:	f000 f818 	bl	800327c <process_downlink>
		port = 0;
 800324c:	193b      	adds	r3, r7, r4
 800324e:	2200      	movs	r2, #0
 8003250:	701a      	strb	r2, [r3, #0]
	if ( r == LORAWAN_SEND_SENT || r == LORAWAN_SEND_ACKED || r == LORAWAN_SEND_ACKED_WITH_DOWNLINK || r == LORAWAN_SEND_ACKED_WITH_DOWNLINK_PENDING) {
 8003252:	e007      	b.n	8003264 <sendUplink+0x14c>
	}else {
		log_info("Send Failed (%d)\r\n",r);
 8003254:	232f      	movs	r3, #47	; 0x2f
 8003256:	18fb      	adds	r3, r7, r3
 8003258:	781a      	ldrb	r2, [r3, #0]
 800325a:	4b07      	ldr	r3, [pc, #28]	; (8003278 <sendUplink+0x160>)
 800325c:	0011      	movs	r1, r2
 800325e:	0018      	movs	r0, r3
 8003260:	f018 ff94 	bl	801c18c <log_info>
	}
}
 8003264:	46c0      	nop			; (mov r8, r8)
 8003266:	46bd      	mov	sp, r7
 8003268:	b00f      	add	sp, #60	; 0x3c
 800326a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800326c:	0802068c 	.word	0x0802068c
 8003270:	20000004 	.word	0x20000004
 8003274:	080206a8 	.word	0x080206a8
 8003278:	080206b8 	.word	0x080206b8

0800327c <process_downlink>:
	*	A201 : adr off
	*	A202 : adr on
	* 0xA3 : set Datarate
 * Send on port 3
 ****************************************************************************************/
void process_downlink(uint8_t port, uint8_t rx[]){
 800327c:	b580      	push	{r7, lr}
 800327e:	b084      	sub	sp, #16
 8003280:	af00      	add	r7, sp, #0
 8003282:	0002      	movs	r2, r0
 8003284:	6039      	str	r1, [r7, #0]
 8003286:	1dfb      	adds	r3, r7, #7
 8003288:	701a      	strb	r2, [r3, #0]

	if(port == 3 && rx[0] != 0){
 800328a:	1dfb      	adds	r3, r7, #7
 800328c:	781b      	ldrb	r3, [r3, #0]
 800328e:	2b03      	cmp	r3, #3
 8003290:	d000      	beq.n	8003294 <process_downlink+0x18>
 8003292:	e08c      	b.n	80033ae <process_downlink+0x132>
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d100      	bne.n	800329e <process_downlink+0x22>
 800329c:	e087      	b.n	80033ae <process_downlink+0x132>
		log_info("Downlink received \n\r");
 800329e:	4b48      	ldr	r3, [pc, #288]	; (80033c0 <process_downlink+0x144>)
 80032a0:	0018      	movs	r0, r3
 80032a2:	f018 ff73 	bl	801c18c <log_info>
		log_info("Port : %d\n\r", port);
 80032a6:	1dfb      	adds	r3, r7, #7
 80032a8:	781a      	ldrb	r2, [r3, #0]
 80032aa:	4b46      	ldr	r3, [pc, #280]	; (80033c4 <process_downlink+0x148>)
 80032ac:	0011      	movs	r1, r2
 80032ae:	0018      	movs	r0, r3
 80032b0:	f018 ff6c 	bl	801c18c <log_info>
		log_info_array("RX : ",rx, 16);
 80032b4:	4b44      	ldr	r3, [pc, #272]	; (80033c8 <process_downlink+0x14c>)
 80032b6:	0018      	movs	r0, r3
 80032b8:	f018 ff68 	bl	801c18c <log_info>
 80032bc:	2300      	movs	r3, #0
 80032be:	60fb      	str	r3, [r7, #12]
 80032c0:	e00c      	b.n	80032dc <process_downlink+0x60>
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	683a      	ldr	r2, [r7, #0]
 80032c6:	18d3      	adds	r3, r2, r3
 80032c8:	781b      	ldrb	r3, [r3, #0]
 80032ca:	001a      	movs	r2, r3
 80032cc:	4b3f      	ldr	r3, [pc, #252]	; (80033cc <process_downlink+0x150>)
 80032ce:	0011      	movs	r1, r2
 80032d0:	0018      	movs	r0, r3
 80032d2:	f018 ff5b 	bl	801c18c <log_info>
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	3301      	adds	r3, #1
 80032da:	60fb      	str	r3, [r7, #12]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2b0f      	cmp	r3, #15
 80032e0:	ddef      	ble.n	80032c2 <process_downlink+0x46>
 80032e2:	4b3b      	ldr	r3, [pc, #236]	; (80033d0 <process_downlink+0x154>)
 80032e4:	0018      	movs	r0, r3
 80032e6:	f018 ff51 	bl	801c18c <log_info>
		switch(rx[0]){
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	781b      	ldrb	r3, [r3, #0]
 80032ee:	2b04      	cmp	r3, #4
 80032f0:	d01f      	beq.n	8003332 <process_downlink+0xb6>
 80032f2:	dc02      	bgt.n	80032fa <process_downlink+0x7e>
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d005      	beq.n	8003304 <process_downlink+0x88>
			case 163:
				//set datarate
				dataRate = setDataRate(rx[1]);
				break;
			default:
				break;
 80032f8:	e05e      	b.n	80033b8 <process_downlink+0x13c>
		switch(rx[0]){
 80032fa:	2ba2      	cmp	r3, #162	; 0xa2
 80032fc:	d021      	beq.n	8003342 <process_downlink+0xc6>
 80032fe:	2ba3      	cmp	r3, #163	; 0xa3
 8003300:	d04a      	beq.n	8003398 <process_downlink+0x11c>
				break;
 8003302:	e059      	b.n	80033b8 <process_downlink+0x13c>
				COMFREQS = ((rx[1]<<16) + (rx[2]<<8) + (rx[3]<<0))*1000;
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	3301      	adds	r3, #1
 8003308:	781b      	ldrb	r3, [r3, #0]
 800330a:	041a      	lsls	r2, r3, #16
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	3302      	adds	r3, #2
 8003310:	781b      	ldrb	r3, [r3, #0]
 8003312:	021b      	lsls	r3, r3, #8
 8003314:	18d3      	adds	r3, r2, r3
 8003316:	683a      	ldr	r2, [r7, #0]
 8003318:	3203      	adds	r2, #3
 800331a:	7812      	ldrb	r2, [r2, #0]
 800331c:	189a      	adds	r2, r3, r2
 800331e:	0013      	movs	r3, r2
 8003320:	015b      	lsls	r3, r3, #5
 8003322:	1a9b      	subs	r3, r3, r2
 8003324:	009b      	lsls	r3, r3, #2
 8003326:	189b      	adds	r3, r3, r2
 8003328:	00db      	lsls	r3, r3, #3
 800332a:	001a      	movs	r2, r3
 800332c:	4b29      	ldr	r3, [pc, #164]	; (80033d4 <process_downlink+0x158>)
 800332e:	601a      	str	r2, [r3, #0]
				break;
 8003330:	e042      	b.n	80033b8 <process_downlink+0x13c>
				if(rx[1] == 15){
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	3301      	adds	r3, #1
 8003336:	781b      	ldrb	r3, [r3, #0]
 8003338:	2b0f      	cmp	r3, #15
 800333a:	d13a      	bne.n	80033b2 <process_downlink+0x136>
					itsdk_reset();
 800333c:	f01a ff28 	bl	801e190 <itsdk_reset>
				break;
 8003340:	e037      	b.n	80033b2 <process_downlink+0x136>
				if(rx[1]==01){
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	3301      	adds	r3, #1
 8003346:	781b      	ldrb	r3, [r3, #0]
 8003348:	2b01      	cmp	r3, #1
 800334a:	d10f      	bne.n	800336c <process_downlink+0xf0>
					itsdk_config_shadow.sdk.lorawan.adrMode = __LORAWAN_ADR_OFF;
 800334c:	4b22      	ldr	r3, [pc, #136]	; (80033d8 <process_downlink+0x15c>)
 800334e:	7a9a      	ldrb	r2, [r3, #10]
 8003350:	213f      	movs	r1, #63	; 0x3f
 8003352:	400a      	ands	r2, r1
 8003354:	1c11      	adds	r1, r2, #0
 8003356:	2240      	movs	r2, #64	; 0x40
 8003358:	430a      	orrs	r2, r1
 800335a:	729a      	strb	r2, [r3, #10]
					itsdk_config_commitConfiguration(CONFIG_COMMIT_SAVE);
 800335c:	2001      	movs	r0, #1
 800335e:	f016 f80b 	bl	8019378 <itsdk_config_commitConfiguration>
					_itsdk_console_printf("OK\r\n");
 8003362:	4b1e      	ldr	r3, [pc, #120]	; (80033dc <process_downlink+0x160>)
 8003364:	0018      	movs	r0, r3
 8003366:	f015 fb97 	bl	8018a98 <_itsdk_console_printf>
				break;
 800336a:	e024      	b.n	80033b6 <process_downlink+0x13a>
				}else if(rx[1]==02){
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	3301      	adds	r3, #1
 8003370:	781b      	ldrb	r3, [r3, #0]
 8003372:	2b02      	cmp	r3, #2
 8003374:	d11f      	bne.n	80033b6 <process_downlink+0x13a>
					itsdk_config_shadow.sdk.lorawan.adrMode = __LORAWAN_ADR_ON;
 8003376:	4b18      	ldr	r3, [pc, #96]	; (80033d8 <process_downlink+0x15c>)
 8003378:	7a9a      	ldrb	r2, [r3, #10]
 800337a:	213f      	movs	r1, #63	; 0x3f
 800337c:	400a      	ands	r2, r1
 800337e:	1c11      	adds	r1, r2, #0
 8003380:	2280      	movs	r2, #128	; 0x80
 8003382:	4252      	negs	r2, r2
 8003384:	430a      	orrs	r2, r1
 8003386:	729a      	strb	r2, [r3, #10]
					itsdk_config_commitConfiguration(CONFIG_COMMIT_SAVE);
 8003388:	2001      	movs	r0, #1
 800338a:	f015 fff5 	bl	8019378 <itsdk_config_commitConfiguration>
					_itsdk_console_printf("OK\r\n");
 800338e:	4b13      	ldr	r3, [pc, #76]	; (80033dc <process_downlink+0x160>)
 8003390:	0018      	movs	r0, r3
 8003392:	f015 fb81 	bl	8018a98 <_itsdk_console_printf>
				break;
 8003396:	e00e      	b.n	80033b6 <process_downlink+0x13a>
				dataRate = setDataRate(rx[1]);
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	3301      	adds	r3, #1
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	0018      	movs	r0, r3
 80033a0:	f000 f820 	bl	80033e4 <setDataRate>
 80033a4:	0003      	movs	r3, r0
 80033a6:	001a      	movs	r2, r3
 80033a8:	4b0d      	ldr	r3, [pc, #52]	; (80033e0 <process_downlink+0x164>)
 80033aa:	701a      	strb	r2, [r3, #0]
				break;
 80033ac:	e004      	b.n	80033b8 <process_downlink+0x13c>
		}

	}
 80033ae:	46c0      	nop			; (mov r8, r8)
 80033b0:	e002      	b.n	80033b8 <process_downlink+0x13c>
				break;
 80033b2:	46c0      	nop			; (mov r8, r8)
 80033b4:	e000      	b.n	80033b8 <process_downlink+0x13c>
				break;
 80033b6:	46c0      	nop			; (mov r8, r8)
}
 80033b8:	46c0      	nop			; (mov r8, r8)
 80033ba:	46bd      	mov	sp, r7
 80033bc:	b004      	add	sp, #16
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	080206cc 	.word	0x080206cc
 80033c4:	080206e4 	.word	0x080206e4
 80033c8:	080206f0 	.word	0x080206f0
 80033cc:	080206f8 	.word	0x080206f8
 80033d0:	08020700 	.word	0x08020700
 80033d4:	20000000 	.word	0x20000000
 80033d8:	2000166c 	.word	0x2000166c
 80033dc:	08020704 	.word	0x08020704
 80033e0:	20000004 	.word	0x20000004

080033e4 <setDataRate>:
/****************************************************************************************
 * return datarate in Function of a number
 ****************************************************************************************/
uint8_t setDataRate(uint8_t nbr){
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b082      	sub	sp, #8
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	0002      	movs	r2, r0
 80033ec:	1dfb      	adds	r3, r7, #7
 80033ee:	701a      	strb	r2, [r3, #0]
	switch(nbr){
 80033f0:	1dfb      	adds	r3, r7, #7
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	2b04      	cmp	r3, #4
 80033f6:	d80e      	bhi.n	8003416 <setDataRate+0x32>
 80033f8:	009a      	lsls	r2, r3, #2
 80033fa:	4b09      	ldr	r3, [pc, #36]	; (8003420 <setDataRate+0x3c>)
 80033fc:	18d3      	adds	r3, r2, r3
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	469f      	mov	pc, r3
	case 0:
		return __LORAWAN_DR_0;
 8003402:	2301      	movs	r3, #1
 8003404:	e008      	b.n	8003418 <setDataRate+0x34>
		break;
	case 1:
		return __LORAWAN_DR_1;
 8003406:	2302      	movs	r3, #2
 8003408:	e006      	b.n	8003418 <setDataRate+0x34>
		break;
	case 2:
		return __LORAWAN_DR_2;
 800340a:	2303      	movs	r3, #3
 800340c:	e004      	b.n	8003418 <setDataRate+0x34>
		break;
	case 3:
		return __LORAWAN_DR_3;
 800340e:	2304      	movs	r3, #4
 8003410:	e002      	b.n	8003418 <setDataRate+0x34>
		break;
	case 4:
		return __LORAWAN_DR_4;
 8003412:	2305      	movs	r3, #5
 8003414:	e000      	b.n	8003418 <setDataRate+0x34>
		break;
	default :
		return __LORAWAN_DR_0;
 8003416:	2301      	movs	r3, #1
		break;

	}
}
 8003418:	0018      	movs	r0, r3
 800341a:	46bd      	mov	sp, r7
 800341c:	b002      	add	sp, #8
 800341e:	bd80      	pop	{r7, pc}
 8003420:	0802136c 	.word	0x0802136c

08003424 <getBatteryLevel>:


/****************************************************************************************
 *	Get the Battery level and print it on console
 ****************************************************************************************/
uint16_t getBatteryLevel(){
 8003424:	b590      	push	{r4, r7, lr}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
	HAL_Delay(8);			//recommended by DISK91
 800342a:	2008      	movs	r0, #8
 800342c:	f000 fd18 	bl	8003e60 <HAL_Delay>
	uint16_t battery=0;
 8003430:	1dbb      	adds	r3, r7, #6
 8003432:	2200      	movs	r2, #0
 8003434:	801a      	strh	r2, [r3, #0]
	gpio_set(__BANK_B, __LP_GPIO_2);
 8003436:	2104      	movs	r1, #4
 8003438:	2001      	movs	r0, #1
 800343a:	f01a fd9f 	bl	801df7c <gpio_set>
	battery = adc_getVBat();
 800343e:	1dbc      	adds	r4, r7, #6
 8003440:	f01a f9e8 	bl	801d814 <adc_getVBat>
 8003444:	0003      	movs	r3, r0
 8003446:	8023      	strh	r3, [r4, #0]

	gpio_reset(VBAT_DIV2_PORT, VBAT_DIV2_PIN);
 8003448:	2104      	movs	r1, #4
 800344a:	2001      	movs	r0, #1
 800344c:	f01a fdae 	bl	801dfac <gpio_reset>

	log_info("ADC value get vbat: %d\n\r", battery);
 8003450:	1dbb      	adds	r3, r7, #6
 8003452:	881a      	ldrh	r2, [r3, #0]
 8003454:	4b05      	ldr	r3, [pc, #20]	; (800346c <getBatteryLevel+0x48>)
 8003456:	0011      	movs	r1, r2
 8003458:	0018      	movs	r0, r3
 800345a:	f018 fe97 	bl	801c18c <log_info>
	return battery;
 800345e:	1dbb      	adds	r3, r7, #6
 8003460:	881b      	ldrh	r3, [r3, #0]
}
 8003462:	0018      	movs	r0, r3
 8003464:	46bd      	mov	sp, r7
 8003466:	b003      	add	sp, #12
 8003468:	bd90      	pop	{r4, r7, pc}
 800346a:	46c0      	nop			; (mov r8, r8)
 800346c:	0802070c 	.word	0x0802070c

08003470 <project_setup>:

/****************************************************************************************
 * Setup
 ****************************************************************************************/
void project_setup() {
 8003470:	b580      	push	{r7, lr}
 8003472:	af00      	add	r7, sp, #0
	SX1276InitLowPower();
 8003474:	f012 fb16 	bl	8015aa4 <SX1276InitLowPower>
	log_info("Starting up\r\n");				// print a message on the USART2
 8003478:	4b0e      	ldr	r3, [pc, #56]	; (80034b4 <project_setup+0x44>)
 800347a:	0018      	movs	r0, r3
 800347c:	f018 fe86 	bl	801c18c <log_info>
	itsdk_delayMs(2000);
 8003480:	23fa      	movs	r3, #250	; 0xfa
 8003482:	00db      	lsls	r3, r3, #3
 8003484:	0018      	movs	r0, r3
 8003486:	f01a fed5 	bl	801e234 <itsdk_delayMs>
	s_state.lastComMS = COMFREQS;
 800348a:	4b0b      	ldr	r3, [pc, #44]	; (80034b8 <project_setup+0x48>)
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	4b0b      	ldr	r3, [pc, #44]	; (80034bc <project_setup+0x4c>)
 8003490:	601a      	str	r2, [r3, #0]
	s_state.setup = BOOL_FALSE;
 8003492:	4b0a      	ldr	r3, [pc, #40]	; (80034bc <project_setup+0x4c>)
 8003494:	2200      	movs	r2, #0
 8003496:	711a      	strb	r2, [r3, #4]
	gpio_reset(LEDGreen_PORT,LEDGreen_PIN);		//set led to 0
 8003498:	2180      	movs	r1, #128	; 0x80
 800349a:	2001      	movs	r0, #1
 800349c:	f01a fd86 	bl	801dfac <gpio_reset>
	itdt_sched_registerSched(TASKDELAYMS,ITSDK_SCHED_CONF_IMMEDIATE, &task);
 80034a0:	4a07      	ldr	r2, [pc, #28]	; (80034c0 <project_setup+0x50>)
 80034a2:	2380      	movs	r3, #128	; 0x80
 80034a4:	005b      	lsls	r3, r3, #1
 80034a6:	4807      	ldr	r0, [pc, #28]	; (80034c4 <project_setup+0x54>)
 80034a8:	0019      	movs	r1, r3
 80034aa:	f019 fbe9 	bl	801cc80 <itdt_sched_registerSched>
}
 80034ae:	46c0      	nop			; (mov r8, r8)
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}
 80034b4:	08020728 	.word	0x08020728
 80034b8:	20000000 	.word	0x20000000
 80034bc:	20001348 	.word	0x20001348
 80034c0:	08002f9d 	.word	0x08002f9d
 80034c4:	00002710 	.word	0x00002710

080034c8 <project_loop>:

/****************************************************************************************
 * Project loop may not contain functional stuff
 * Keep in this loop only really short operations
 ****************************************************************************************/
void project_loop() {
 80034c8:	b580      	push	{r7, lr}
 80034ca:	af00      	add	r7, sp, #0
    itsdk_lorawan_loop();
 80034cc:	f019 f96a 	bl	801c7a4 <itsdk_lorawan_loop>

}
 80034d0:	46c0      	nop			; (mov r8, r8)
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}
	...

080034d8 <readUart>:

/****************************************************************************************
 * UART sensor part
 ****************************************************************************************/
#define debugUart   1
uint8_t readUart(){
 80034d8:	b590      	push	{r4, r7, lr}
 80034da:	b089      	sub	sp, #36	; 0x24
 80034dc:	af00      	add	r7, sp, #0

	  GPIO_InitTypeDef POWER_ACTIVE;
	  POWER_ACTIVE.Pin   = GPIO_PIN_11 ;
 80034de:	2408      	movs	r4, #8
 80034e0:	193b      	adds	r3, r7, r4
 80034e2:	2280      	movs	r2, #128	; 0x80
 80034e4:	0112      	lsls	r2, r2, #4
 80034e6:	601a      	str	r2, [r3, #0]
	  POWER_ACTIVE.Mode  = GPIO_MODE_OUTPUT_PP;
 80034e8:	193b      	adds	r3, r7, r4
 80034ea:	2201      	movs	r2, #1
 80034ec:	605a      	str	r2, [r3, #4]


	 int measureAttempt = 0;
 80034ee:	2300      	movs	r3, #0
 80034f0:	61fb      	str	r3, [r7, #28]
	 resetMeasure(&tabToPrint[0], 4); 							//Reset the return array
 80034f2:	4b3f      	ldr	r3, [pc, #252]	; (80035f0 <readUart+0x118>)
 80034f4:	2104      	movs	r1, #4
 80034f6:	0018      	movs	r0, r3
 80034f8:	f000 f894 	bl	8003624 <resetMeasure>
	 HAL_GPIO_WritePin(GPIOA, POWER_ACTIVE.Pin, GPIO_PIN_SET);  //Set on the ultrasonic sensor
 80034fc:	193b      	adds	r3, r7, r4
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	b299      	uxth	r1, r3
 8003502:	23a0      	movs	r3, #160	; 0xa0
 8003504:	05db      	lsls	r3, r3, #23
 8003506:	2201      	movs	r2, #1
 8003508:	0018      	movs	r0, r3
 800350a:	f001 f9fd 	bl	8004908 <HAL_GPIO_WritePin>

	 log_info("Start the measure !\r\n");
 800350e:	4b39      	ldr	r3, [pc, #228]	; (80035f4 <readUart+0x11c>)
 8003510:	0018      	movs	r0, r3
 8003512:	f018 fe3b 	bl	801c18c <log_info>
	 while(measureAttempt < 90){
 8003516:	e01c      	b.n	8003552 <readUart+0x7a>
	 	HAL_UART_Receive_IT(&huart1, &byte, 1); 				//start measure, result is into tabToPrint
 8003518:	4937      	ldr	r1, [pc, #220]	; (80035f8 <readUart+0x120>)
 800351a:	4b38      	ldr	r3, [pc, #224]	; (80035fc <readUart+0x124>)
 800351c:	2201      	movs	r2, #1
 800351e:	0018      	movs	r0, r3
 8003520:	f003 fbb4 	bl	8006c8c <HAL_UART_Receive_IT>
	 	HAL_Delay(50);											//
 8003524:	2032      	movs	r0, #50	; 0x32
 8003526:	f000 fc9b 	bl	8003e60 <HAL_Delay>

		#if debugUart											//DEBUG
	 	log_info("Measure #%d : ", measureAttempt);				//Print all 90 measure
 800352a:	69fa      	ldr	r2, [r7, #28]
 800352c:	4b34      	ldr	r3, [pc, #208]	; (8003600 <readUart+0x128>)
 800352e:	0011      	movs	r1, r2
 8003530:	0018      	movs	r0, r3
 8003532:	f018 fe2b 	bl	801c18c <log_info>
	 		HAL_UART_Transmit(&huart2, &tabToPrint[0], 5, 500); //
 8003536:	23fa      	movs	r3, #250	; 0xfa
 8003538:	005b      	lsls	r3, r3, #1
 800353a:	492d      	ldr	r1, [pc, #180]	; (80035f0 <readUart+0x118>)
 800353c:	4831      	ldr	r0, [pc, #196]	; (8003604 <readUart+0x12c>)
 800353e:	2205      	movs	r2, #5
 8003540:	f003 fafc 	bl	8006b3c <HAL_UART_Transmit>
	 		log_info("\n\r");									//
 8003544:	4b30      	ldr	r3, [pc, #192]	; (8003608 <readUart+0x130>)
 8003546:	0018      	movs	r0, r3
 8003548:	f018 fe20 	bl	801c18c <log_info>
		#endif
	 	measureAttempt++;
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	3301      	adds	r3, #1
 8003550:	61fb      	str	r3, [r7, #28]
	 while(measureAttempt < 90){
 8003552:	69fb      	ldr	r3, [r7, #28]
 8003554:	2b59      	cmp	r3, #89	; 0x59
 8003556:	dddf      	ble.n	8003518 <readUart+0x40>
	 	 log_info("\n\rWe measure ");							//Print final tabToPrint
	 	 HAL_UART_Transmit(&huart2, &tabToPrint[0], 5, 500);	//
	 	 log_info(" mm\r\n");									//
	 #endif
*/
	 HAL_GPIO_WritePin(GPIOA, POWER_ACTIVE.Pin, GPIO_PIN_RESET);//PowerOff the sensor
 8003558:	2308      	movs	r3, #8
 800355a:	18fb      	adds	r3, r7, r3
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	b299      	uxth	r1, r3
 8003560:	23a0      	movs	r3, #160	; 0xa0
 8003562:	05db      	lsls	r3, r3, #23
 8003564:	2200      	movs	r2, #0
 8003566:	0018      	movs	r0, r3
 8003568:	f001 f9ce 	bl	8004908 <HAL_GPIO_WritePin>

     uint8_t tabToConvert[4];									//remove first 'R' char
	 tabToConvert[0] = tabToPrint[1];							//
 800356c:	4b20      	ldr	r3, [pc, #128]	; (80035f0 <readUart+0x118>)
 800356e:	785a      	ldrb	r2, [r3, #1]
 8003570:	1d3b      	adds	r3, r7, #4
 8003572:	701a      	strb	r2, [r3, #0]
	 tabToConvert[1] = tabToPrint[2];							//
 8003574:	4b1e      	ldr	r3, [pc, #120]	; (80035f0 <readUart+0x118>)
 8003576:	789a      	ldrb	r2, [r3, #2]
 8003578:	1d3b      	adds	r3, r7, #4
 800357a:	705a      	strb	r2, [r3, #1]
	 tabToConvert[2] = tabToPrint[3];							//
 800357c:	4b1c      	ldr	r3, [pc, #112]	; (80035f0 <readUart+0x118>)
 800357e:	78da      	ldrb	r2, [r3, #3]
 8003580:	1d3b      	adds	r3, r7, #4
 8003582:	709a      	strb	r2, [r3, #2]
	 tabToConvert[3] = tabToPrint[4];							//
 8003584:	4b1a      	ldr	r3, [pc, #104]	; (80035f0 <readUart+0x118>)
 8003586:	791a      	ldrb	r2, [r3, #4]
 8003588:	1d3b      	adds	r3, r7, #4
 800358a:	70da      	strb	r2, [r3, #3]


	 sscanf(tabToConvert, "%d", &measureUart);					//convert char[] to int
 800358c:	4a1f      	ldr	r2, [pc, #124]	; (800360c <readUart+0x134>)
 800358e:	4920      	ldr	r1, [pc, #128]	; (8003610 <readUart+0x138>)
 8003590:	1d3b      	adds	r3, r7, #4
 8003592:	0018      	movs	r0, r3
 8003594:	f01b fddc 	bl	801f150 <siscanf>
	 log_info("Final measure : %d", measureUart);				//print final measure
 8003598:	4b1c      	ldr	r3, [pc, #112]	; (800360c <readUart+0x134>)
 800359a:	881b      	ldrh	r3, [r3, #0]
 800359c:	001a      	movs	r2, r3
 800359e:	4b1d      	ldr	r3, [pc, #116]	; (8003614 <readUart+0x13c>)
 80035a0:	0011      	movs	r1, r2
 80035a2:	0018      	movs	r0, r3
 80035a4:	f018 fdf2 	bl	801c18c <log_info>


	 if(measureUart==0 || measureUart<=500 || measureUart>=5000 || measureUart == 4999){	//check if the measure is valid or not
 80035a8:	4b18      	ldr	r3, [pc, #96]	; (800360c <readUart+0x134>)
 80035aa:	881b      	ldrh	r3, [r3, #0]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d00f      	beq.n	80035d0 <readUart+0xf8>
 80035b0:	4b16      	ldr	r3, [pc, #88]	; (800360c <readUart+0x134>)
 80035b2:	881a      	ldrh	r2, [r3, #0]
 80035b4:	23fa      	movs	r3, #250	; 0xfa
 80035b6:	005b      	lsls	r3, r3, #1
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d909      	bls.n	80035d0 <readUart+0xf8>
 80035bc:	4b13      	ldr	r3, [pc, #76]	; (800360c <readUart+0x134>)
 80035be:	881b      	ldrh	r3, [r3, #0]
 80035c0:	4a15      	ldr	r2, [pc, #84]	; (8003618 <readUart+0x140>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d804      	bhi.n	80035d0 <readUart+0xf8>
 80035c6:	4b11      	ldr	r3, [pc, #68]	; (800360c <readUart+0x134>)
 80035c8:	881b      	ldrh	r3, [r3, #0]
 80035ca:	4a13      	ldr	r2, [pc, #76]	; (8003618 <readUart+0x140>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d105      	bne.n	80035dc <readUart+0x104>
		 	 log_info(" Measure is not valid\r\n");
 80035d0:	4b12      	ldr	r3, [pc, #72]	; (800361c <readUart+0x144>)
 80035d2:	0018      	movs	r0, r3
 80035d4:	f018 fdda 	bl	801c18c <log_info>
	 		return 0;
 80035d8:	2300      	movs	r3, #0
 80035da:	e004      	b.n	80035e6 <readUart+0x10e>
	 }else{
	 		log_info(" Measure is valid\r\n");
 80035dc:	4b10      	ldr	r3, [pc, #64]	; (8003620 <readUart+0x148>)
 80035de:	0018      	movs	r0, r3
 80035e0:	f018 fdd4 	bl	801c18c <log_info>
	 		return 1;
 80035e4:	2301      	movs	r3, #1
	 }


}
 80035e6:	0018      	movs	r0, r3
 80035e8:	46bd      	mov	sp, r7
 80035ea:	b009      	add	sp, #36	; 0x24
 80035ec:	bd90      	pop	{r4, r7, pc}
 80035ee:	46c0      	nop			; (mov r8, r8)
 80035f0:	20001718 	.word	0x20001718
 80035f4:	08020738 	.word	0x08020738
 80035f8:	2000171d 	.word	0x2000171d
 80035fc:	20001354 	.word	0x20001354
 8003600:	08020750 	.word	0x08020750
 8003604:	200014e4 	.word	0x200014e4
 8003608:	08020760 	.word	0x08020760
 800360c:	20001350 	.word	0x20001350
 8003610:	08020764 	.word	0x08020764
 8003614:	08020768 	.word	0x08020768
 8003618:	00001387 	.word	0x00001387
 800361c:	0802077c 	.word	0x0802077c
 8003620:	08020794 	.word	0x08020794

08003624 <resetMeasure>:


/**
 * Reset the Uart Buffer
 */
void resetMeasure(uint8_t * array, uint8_t size){
 8003624:	b580      	push	{r7, lr}
 8003626:	b084      	sub	sp, #16
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	000a      	movs	r2, r1
 800362e:	1cfb      	adds	r3, r7, #3
 8003630:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < size; i++){
 8003632:	2300      	movs	r3, #0
 8003634:	60fb      	str	r3, [r7, #12]
 8003636:	e007      	b.n	8003648 <resetMeasure+0x24>
		array[i] = 0x30; //Set to 0
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	687a      	ldr	r2, [r7, #4]
 800363c:	18d3      	adds	r3, r2, r3
 800363e:	2230      	movs	r2, #48	; 0x30
 8003640:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < size; i++){
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	3301      	adds	r3, #1
 8003646:	60fb      	str	r3, [r7, #12]
 8003648:	1cfb      	adds	r3, r7, #3
 800364a:	781b      	ldrb	r3, [r3, #0]
 800364c:	68fa      	ldr	r2, [r7, #12]
 800364e:	429a      	cmp	r2, r3
 8003650:	dbf2      	blt.n	8003638 <resetMeasure+0x14>
	}
}
 8003652:	46c0      	nop			; (mov r8, r8)
 8003654:	46bd      	mov	sp, r7
 8003656:	b004      	add	sp, #16
 8003658:	bd80      	pop	{r7, pc}
	...

0800365c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b090      	sub	sp, #64	; 0x40
 8003660:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 8003662:	232c      	movs	r3, #44	; 0x2c
 8003664:	18fb      	adds	r3, r7, r3
 8003666:	0018      	movs	r0, r3
 8003668:	2314      	movs	r3, #20
 800366a:	001a      	movs	r2, r3
 800366c:	2100      	movs	r1, #0
 800366e:	f01b fd67 	bl	801f140 <memset>
  RTC_DateTypeDef sDate = {0};
 8003672:	2328      	movs	r3, #40	; 0x28
 8003674:	18fb      	adds	r3, r7, r3
 8003676:	2200      	movs	r2, #0
 8003678:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 800367a:	003b      	movs	r3, r7
 800367c:	0018      	movs	r0, r3
 800367e:	2328      	movs	r3, #40	; 0x28
 8003680:	001a      	movs	r2, r3
 8003682:	2100      	movs	r1, #0
 8003684:	f01b fd5c 	bl	801f140 <memset>

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003688:	4b46      	ldr	r3, [pc, #280]	; (80037a4 <MX_RTC_Init+0x148>)
 800368a:	4a47      	ldr	r2, [pc, #284]	; (80037a8 <MX_RTC_Init+0x14c>)
 800368c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800368e:	4b45      	ldr	r3, [pc, #276]	; (80037a4 <MX_RTC_Init+0x148>)
 8003690:	2200      	movs	r2, #0
 8003692:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003694:	4b43      	ldr	r3, [pc, #268]	; (80037a4 <MX_RTC_Init+0x148>)
 8003696:	227f      	movs	r2, #127	; 0x7f
 8003698:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800369a:	4b42      	ldr	r3, [pc, #264]	; (80037a4 <MX_RTC_Init+0x148>)
 800369c:	22ff      	movs	r2, #255	; 0xff
 800369e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80036a0:	4b40      	ldr	r3, [pc, #256]	; (80037a4 <MX_RTC_Init+0x148>)
 80036a2:	2200      	movs	r2, #0
 80036a4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80036a6:	4b3f      	ldr	r3, [pc, #252]	; (80037a4 <MX_RTC_Init+0x148>)
 80036a8:	2200      	movs	r2, #0
 80036aa:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80036ac:	4b3d      	ldr	r3, [pc, #244]	; (80037a4 <MX_RTC_Init+0x148>)
 80036ae:	2200      	movs	r2, #0
 80036b0:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80036b2:	4b3c      	ldr	r3, [pc, #240]	; (80037a4 <MX_RTC_Init+0x148>)
 80036b4:	2200      	movs	r2, #0
 80036b6:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80036b8:	4b3a      	ldr	r3, [pc, #232]	; (80037a4 <MX_RTC_Init+0x148>)
 80036ba:	0018      	movs	r0, r3
 80036bc:	f002 f8c8 	bl	8005850 <HAL_RTC_Init>
 80036c0:	1e03      	subs	r3, r0, #0
 80036c2:	d001      	beq.n	80036c8 <MX_RTC_Init+0x6c>
  {
    Error_Handler();
 80036c4:	f7ff fc64 	bl	8002f90 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 80036c8:	212c      	movs	r1, #44	; 0x2c
 80036ca:	187b      	adds	r3, r7, r1
 80036cc:	2200      	movs	r2, #0
 80036ce:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 80036d0:	187b      	adds	r3, r7, r1
 80036d2:	2200      	movs	r2, #0
 80036d4:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 80036d6:	187b      	adds	r3, r7, r1
 80036d8:	2200      	movs	r2, #0
 80036da:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80036dc:	187b      	adds	r3, r7, r1
 80036de:	2200      	movs	r2, #0
 80036e0:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80036e2:	187b      	adds	r3, r7, r1
 80036e4:	2200      	movs	r2, #0
 80036e6:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80036e8:	1879      	adds	r1, r7, r1
 80036ea:	4b2e      	ldr	r3, [pc, #184]	; (80037a4 <MX_RTC_Init+0x148>)
 80036ec:	2200      	movs	r2, #0
 80036ee:	0018      	movs	r0, r3
 80036f0:	f002 f94c 	bl	800598c <HAL_RTC_SetTime>
 80036f4:	1e03      	subs	r3, r0, #0
 80036f6:	d001      	beq.n	80036fc <MX_RTC_Init+0xa0>
  {
    Error_Handler();
 80036f8:	f7ff fc4a 	bl	8002f90 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80036fc:	2128      	movs	r1, #40	; 0x28
 80036fe:	187b      	adds	r3, r7, r1
 8003700:	2201      	movs	r2, #1
 8003702:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8003704:	187b      	adds	r3, r7, r1
 8003706:	2201      	movs	r2, #1
 8003708:	705a      	strb	r2, [r3, #1]
  sDate.Date = 1;
 800370a:	187b      	adds	r3, r7, r1
 800370c:	2201      	movs	r2, #1
 800370e:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0;
 8003710:	187b      	adds	r3, r7, r1
 8003712:	2200      	movs	r2, #0
 8003714:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8003716:	1879      	adds	r1, r7, r1
 8003718:	4b22      	ldr	r3, [pc, #136]	; (80037a4 <MX_RTC_Init+0x148>)
 800371a:	2200      	movs	r2, #0
 800371c:	0018      	movs	r0, r3
 800371e:	f002 fa55 	bl	8005bcc <HAL_RTC_SetDate>
 8003722:	1e03      	subs	r3, r0, #0
 8003724:	d001      	beq.n	800372a <MX_RTC_Init+0xce>
  {
    Error_Handler();
 8003726:	f7ff fc33 	bl	8002f90 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 800372a:	003b      	movs	r3, r7
 800372c:	2200      	movs	r2, #0
 800372e:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0;
 8003730:	003b      	movs	r3, r7
 8003732:	2200      	movs	r2, #0
 8003734:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0;
 8003736:	003b      	movs	r3, r7
 8003738:	2200      	movs	r2, #0
 800373a:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 800373c:	003b      	movs	r3, r7
 800373e:	2200      	movs	r2, #0
 8003740:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003742:	003b      	movs	r3, r7
 8003744:	2200      	movs	r2, #0
 8003746:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003748:	003b      	movs	r3, r7
 800374a:	2200      	movs	r2, #0
 800374c:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800374e:	003b      	movs	r3, r7
 8003750:	2200      	movs	r2, #0
 8003752:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_NONE;
 8003754:	003b      	movs	r3, r7
 8003756:	22f0      	movs	r2, #240	; 0xf0
 8003758:	0512      	lsls	r2, r2, #20
 800375a:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800375c:	003b      	movs	r3, r7
 800375e:	2200      	movs	r2, #0
 8003760:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 1;
 8003762:	003b      	movs	r3, r7
 8003764:	2220      	movs	r2, #32
 8003766:	2101      	movs	r1, #1
 8003768:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 800376a:	003b      	movs	r3, r7
 800376c:	2280      	movs	r2, #128	; 0x80
 800376e:	0052      	lsls	r2, r2, #1
 8003770:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8003772:	0039      	movs	r1, r7
 8003774:	4b0b      	ldr	r3, [pc, #44]	; (80037a4 <MX_RTC_Init+0x148>)
 8003776:	2200      	movs	r2, #0
 8003778:	0018      	movs	r0, r3
 800377a:	f002 fb23 	bl	8005dc4 <HAL_RTC_SetAlarm_IT>
 800377e:	1e03      	subs	r3, r0, #0
 8003780:	d001      	beq.n	8003786 <MX_RTC_Init+0x12a>
  {
    Error_Handler();
 8003782:	f7ff fc05 	bl	8002f90 <Error_Handler>
  }
  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8003786:	4b07      	ldr	r3, [pc, #28]	; (80037a4 <MX_RTC_Init+0x148>)
 8003788:	2200      	movs	r2, #0
 800378a:	2100      	movs	r1, #0
 800378c:	0018      	movs	r0, r3
 800378e:	f002 fd53 	bl	8006238 <HAL_RTCEx_SetWakeUpTimer_IT>
 8003792:	1e03      	subs	r3, r0, #0
 8003794:	d001      	beq.n	800379a <MX_RTC_Init+0x13e>
  {
    Error_Handler();
 8003796:	f7ff fbfb 	bl	8002f90 <Error_Handler>
  }

}
 800379a:	46c0      	nop			; (mov r8, r8)
 800379c:	46bd      	mov	sp, r7
 800379e:	b010      	add	sp, #64	; 0x40
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	46c0      	nop			; (mov r8, r8)
 80037a4:	200013d4 	.word	0x200013d4
 80037a8:	40002800 	.word	0x40002800

080037ac <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b082      	sub	sp, #8
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a0a      	ldr	r2, [pc, #40]	; (80037e4 <HAL_RTC_MspInit+0x38>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d10e      	bne.n	80037dc <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80037be:	4b0a      	ldr	r3, [pc, #40]	; (80037e8 <HAL_RTC_MspInit+0x3c>)
 80037c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80037c2:	4b09      	ldr	r3, [pc, #36]	; (80037e8 <HAL_RTC_MspInit+0x3c>)
 80037c4:	2180      	movs	r1, #128	; 0x80
 80037c6:	02c9      	lsls	r1, r1, #11
 80037c8:	430a      	orrs	r2, r1
 80037ca:	651a      	str	r2, [r3, #80]	; 0x50

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 80037cc:	2200      	movs	r2, #0
 80037ce:	2100      	movs	r1, #0
 80037d0:	2002      	movs	r0, #2
 80037d2:	f000 fe91 	bl	80044f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 80037d6:	2002      	movs	r0, #2
 80037d8:	f000 fea3 	bl	8004522 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80037dc:	46c0      	nop			; (mov r8, r8)
 80037de:	46bd      	mov	sp, r7
 80037e0:	b002      	add	sp, #8
 80037e2:	bd80      	pop	{r7, pc}
 80037e4:	40002800 	.word	0x40002800
 80037e8:	40021000 	.word	0x40021000

080037ec <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 80037f0:	4b18      	ldr	r3, [pc, #96]	; (8003854 <MX_SPI1_Init+0x68>)
 80037f2:	4a19      	ldr	r2, [pc, #100]	; (8003858 <MX_SPI1_Init+0x6c>)
 80037f4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80037f6:	4b17      	ldr	r3, [pc, #92]	; (8003854 <MX_SPI1_Init+0x68>)
 80037f8:	2282      	movs	r2, #130	; 0x82
 80037fa:	0052      	lsls	r2, r2, #1
 80037fc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80037fe:	4b15      	ldr	r3, [pc, #84]	; (8003854 <MX_SPI1_Init+0x68>)
 8003800:	2200      	movs	r2, #0
 8003802:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003804:	4b13      	ldr	r3, [pc, #76]	; (8003854 <MX_SPI1_Init+0x68>)
 8003806:	2200      	movs	r2, #0
 8003808:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800380a:	4b12      	ldr	r3, [pc, #72]	; (8003854 <MX_SPI1_Init+0x68>)
 800380c:	2200      	movs	r2, #0
 800380e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003810:	4b10      	ldr	r3, [pc, #64]	; (8003854 <MX_SPI1_Init+0x68>)
 8003812:	2200      	movs	r2, #0
 8003814:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003816:	4b0f      	ldr	r3, [pc, #60]	; (8003854 <MX_SPI1_Init+0x68>)
 8003818:	2280      	movs	r2, #128	; 0x80
 800381a:	0092      	lsls	r2, r2, #2
 800381c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800381e:	4b0d      	ldr	r3, [pc, #52]	; (8003854 <MX_SPI1_Init+0x68>)
 8003820:	2220      	movs	r2, #32
 8003822:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003824:	4b0b      	ldr	r3, [pc, #44]	; (8003854 <MX_SPI1_Init+0x68>)
 8003826:	2200      	movs	r2, #0
 8003828:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800382a:	4b0a      	ldr	r3, [pc, #40]	; (8003854 <MX_SPI1_Init+0x68>)
 800382c:	2200      	movs	r2, #0
 800382e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003830:	4b08      	ldr	r3, [pc, #32]	; (8003854 <MX_SPI1_Init+0x68>)
 8003832:	2200      	movs	r2, #0
 8003834:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003836:	4b07      	ldr	r3, [pc, #28]	; (8003854 <MX_SPI1_Init+0x68>)
 8003838:	2207      	movs	r2, #7
 800383a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800383c:	4b05      	ldr	r3, [pc, #20]	; (8003854 <MX_SPI1_Init+0x68>)
 800383e:	0018      	movs	r0, r3
 8003840:	f002 fe54 	bl	80064ec <HAL_SPI_Init>
 8003844:	1e03      	subs	r3, r0, #0
 8003846:	d001      	beq.n	800384c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003848:	f7ff fba2 	bl	8002f90 <Error_Handler>
  }

}
 800384c:	46c0      	nop			; (mov r8, r8)
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
 8003852:	46c0      	nop			; (mov r8, r8)
 8003854:	20001450 	.word	0x20001450
 8003858:	40013000 	.word	0x40013000

0800385c <HAL_SPI_MspInit>:
  }

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800385c:	b590      	push	{r4, r7, lr}
 800385e:	b08b      	sub	sp, #44	; 0x2c
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003864:	2314      	movs	r3, #20
 8003866:	18fb      	adds	r3, r7, r3
 8003868:	0018      	movs	r0, r3
 800386a:	2314      	movs	r3, #20
 800386c:	001a      	movs	r2, r3
 800386e:	2100      	movs	r1, #0
 8003870:	f01b fc66 	bl	801f140 <memset>
  if(spiHandle->Instance==SPI1)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a41      	ldr	r2, [pc, #260]	; (8003980 <HAL_SPI_MspInit+0x124>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d14d      	bne.n	800391a <HAL_SPI_MspInit+0xbe>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800387e:	4b41      	ldr	r3, [pc, #260]	; (8003984 <HAL_SPI_MspInit+0x128>)
 8003880:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003882:	4b40      	ldr	r3, [pc, #256]	; (8003984 <HAL_SPI_MspInit+0x128>)
 8003884:	2180      	movs	r1, #128	; 0x80
 8003886:	0149      	lsls	r1, r1, #5
 8003888:	430a      	orrs	r2, r1
 800388a:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800388c:	4b3d      	ldr	r3, [pc, #244]	; (8003984 <HAL_SPI_MspInit+0x128>)
 800388e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003890:	4b3c      	ldr	r3, [pc, #240]	; (8003984 <HAL_SPI_MspInit+0x128>)
 8003892:	2102      	movs	r1, #2
 8003894:	430a      	orrs	r2, r1
 8003896:	62da      	str	r2, [r3, #44]	; 0x2c
 8003898:	4b3a      	ldr	r3, [pc, #232]	; (8003984 <HAL_SPI_MspInit+0x128>)
 800389a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800389c:	2202      	movs	r2, #2
 800389e:	4013      	ands	r3, r2
 80038a0:	613b      	str	r3, [r7, #16]
 80038a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038a4:	4b37      	ldr	r3, [pc, #220]	; (8003984 <HAL_SPI_MspInit+0x128>)
 80038a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038a8:	4b36      	ldr	r3, [pc, #216]	; (8003984 <HAL_SPI_MspInit+0x128>)
 80038aa:	2101      	movs	r1, #1
 80038ac:	430a      	orrs	r2, r1
 80038ae:	62da      	str	r2, [r3, #44]	; 0x2c
 80038b0:	4b34      	ldr	r3, [pc, #208]	; (8003984 <HAL_SPI_MspInit+0x128>)
 80038b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b4:	2201      	movs	r2, #1
 80038b6:	4013      	ands	r3, r2
 80038b8:	60fb      	str	r3, [r7, #12]
 80038ba:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = RADIO_SCLK_Pin;
 80038bc:	2114      	movs	r1, #20
 80038be:	187b      	adds	r3, r7, r1
 80038c0:	2208      	movs	r2, #8
 80038c2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038c4:	187b      	adds	r3, r7, r1
 80038c6:	2202      	movs	r2, #2
 80038c8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038ca:	187b      	adds	r3, r7, r1
 80038cc:	2200      	movs	r2, #0
 80038ce:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038d0:	187b      	adds	r3, r7, r1
 80038d2:	2203      	movs	r2, #3
 80038d4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80038d6:	187b      	adds	r3, r7, r1
 80038d8:	2200      	movs	r2, #0
 80038da:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(RADIO_SCLK_GPIO_Port, &GPIO_InitStruct);
 80038dc:	000c      	movs	r4, r1
 80038de:	187b      	adds	r3, r7, r1
 80038e0:	4a29      	ldr	r2, [pc, #164]	; (8003988 <HAL_SPI_MspInit+0x12c>)
 80038e2:	0019      	movs	r1, r3
 80038e4:	0010      	movs	r0, r2
 80038e6:	f000 fe91 	bl	800460c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RADIO_MOSI_Pin|RADIO_MISO_Pin;
 80038ea:	0021      	movs	r1, r4
 80038ec:	187b      	adds	r3, r7, r1
 80038ee:	22c0      	movs	r2, #192	; 0xc0
 80038f0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038f2:	187b      	adds	r3, r7, r1
 80038f4:	2202      	movs	r2, #2
 80038f6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038f8:	187b      	adds	r3, r7, r1
 80038fa:	2200      	movs	r2, #0
 80038fc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038fe:	187b      	adds	r3, r7, r1
 8003900:	2203      	movs	r2, #3
 8003902:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8003904:	187b      	adds	r3, r7, r1
 8003906:	2200      	movs	r2, #0
 8003908:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800390a:	187a      	adds	r2, r7, r1
 800390c:	23a0      	movs	r3, #160	; 0xa0
 800390e:	05db      	lsls	r3, r3, #23
 8003910:	0011      	movs	r1, r2
 8003912:	0018      	movs	r0, r3
 8003914:	f000 fe7a 	bl	800460c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8003918:	e02e      	b.n	8003978 <HAL_SPI_MspInit+0x11c>
  else if(spiHandle->Instance==SPI2)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a1b      	ldr	r2, [pc, #108]	; (800398c <HAL_SPI_MspInit+0x130>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d129      	bne.n	8003978 <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003924:	4b17      	ldr	r3, [pc, #92]	; (8003984 <HAL_SPI_MspInit+0x128>)
 8003926:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003928:	4b16      	ldr	r3, [pc, #88]	; (8003984 <HAL_SPI_MspInit+0x128>)
 800392a:	2180      	movs	r1, #128	; 0x80
 800392c:	01c9      	lsls	r1, r1, #7
 800392e:	430a      	orrs	r2, r1
 8003930:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003932:	4b14      	ldr	r3, [pc, #80]	; (8003984 <HAL_SPI_MspInit+0x128>)
 8003934:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003936:	4b13      	ldr	r3, [pc, #76]	; (8003984 <HAL_SPI_MspInit+0x128>)
 8003938:	2102      	movs	r1, #2
 800393a:	430a      	orrs	r2, r1
 800393c:	62da      	str	r2, [r3, #44]	; 0x2c
 800393e:	4b11      	ldr	r3, [pc, #68]	; (8003984 <HAL_SPI_MspInit+0x128>)
 8003940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003942:	2202      	movs	r2, #2
 8003944:	4013      	ands	r3, r2
 8003946:	60bb      	str	r3, [r7, #8]
 8003948:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_12;
 800394a:	2114      	movs	r1, #20
 800394c:	187b      	adds	r3, r7, r1
 800394e:	22f0      	movs	r2, #240	; 0xf0
 8003950:	0212      	lsls	r2, r2, #8
 8003952:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003954:	187b      	adds	r3, r7, r1
 8003956:	2202      	movs	r2, #2
 8003958:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800395a:	187b      	adds	r3, r7, r1
 800395c:	2200      	movs	r2, #0
 800395e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003960:	187b      	adds	r3, r7, r1
 8003962:	2203      	movs	r2, #3
 8003964:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8003966:	187b      	adds	r3, r7, r1
 8003968:	2200      	movs	r2, #0
 800396a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800396c:	187b      	adds	r3, r7, r1
 800396e:	4a06      	ldr	r2, [pc, #24]	; (8003988 <HAL_SPI_MspInit+0x12c>)
 8003970:	0019      	movs	r1, r3
 8003972:	0010      	movs	r0, r2
 8003974:	f000 fe4a 	bl	800460c <HAL_GPIO_Init>
}
 8003978:	46c0      	nop			; (mov r8, r8)
 800397a:	46bd      	mov	sp, r7
 800397c:	b00b      	add	sp, #44	; 0x2c
 800397e:	bd90      	pop	{r4, r7, pc}
 8003980:	40013000 	.word	0x40013000
 8003984:	40021000 	.word	0x40021000
 8003988:	50000400 	.word	0x50000400
 800398c:	40003800 	.word	0x40003800

08003990 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003994:	4b07      	ldr	r3, [pc, #28]	; (80039b4 <HAL_MspInit+0x24>)
 8003996:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003998:	4b06      	ldr	r3, [pc, #24]	; (80039b4 <HAL_MspInit+0x24>)
 800399a:	2101      	movs	r1, #1
 800399c:	430a      	orrs	r2, r1
 800399e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80039a0:	4b04      	ldr	r3, [pc, #16]	; (80039b4 <HAL_MspInit+0x24>)
 80039a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039a4:	4b03      	ldr	r3, [pc, #12]	; (80039b4 <HAL_MspInit+0x24>)
 80039a6:	2180      	movs	r1, #128	; 0x80
 80039a8:	0549      	lsls	r1, r1, #21
 80039aa:	430a      	orrs	r2, r1
 80039ac:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80039ae:	46c0      	nop			; (mov r8, r8)
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}
 80039b4:	40021000 	.word	0x40021000

080039b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80039bc:	46c0      	nop			; (mov r8, r8)
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}

080039c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80039c2:	b580      	push	{r7, lr}
 80039c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80039c6:	e7fe      	b.n	80039c6 <HardFault_Handler+0x4>

080039c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80039cc:	46c0      	nop			; (mov r8, r8)
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}

080039d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80039d2:	b580      	push	{r7, lr}
 80039d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80039d6:	46c0      	nop			; (mov r8, r8)
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}

080039dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80039e0:	f01b faa0 	bl	801ef24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80039e4:	46c0      	nop			; (mov r8, r8)
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}
	...

080039ec <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80039f0:	4b05      	ldr	r3, [pc, #20]	; (8003a08 <RTC_IRQHandler+0x1c>)
 80039f2:	0018      	movs	r0, r3
 80039f4:	f002 fb32 	bl	800605c <HAL_RTC_AlarmIRQHandler>
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80039f8:	4b03      	ldr	r3, [pc, #12]	; (8003a08 <RTC_IRQHandler+0x1c>)
 80039fa:	0018      	movs	r0, r3
 80039fc:	f002 fd44 	bl	8006488 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8003a00:	46c0      	nop			; (mov r8, r8)
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	46c0      	nop			; (mov r8, r8)
 8003a08:	200013d4 	.word	0x200013d4

08003a0c <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8003a10:	2001      	movs	r0, #1
 8003a12:	f000 ff97 	bl	8004944 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8003a16:	2002      	movs	r0, #2
 8003a18:	f000 ff94 	bl	8004944 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8003a1c:	46c0      	nop			; (mov r8, r8)
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}

08003a22 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8003a22:	b580      	push	{r7, lr}
 8003a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8003a26:	2010      	movs	r0, #16
 8003a28:	f000 ff8c 	bl	8004944 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003a2c:	2380      	movs	r3, #128	; 0x80
 8003a2e:	019b      	lsls	r3, r3, #6
 8003a30:	0018      	movs	r0, r3
 8003a32:	f000 ff87 	bl	8004944 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8003a36:	46c0      	nop			; (mov r8, r8)
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}

08003a3c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003a40:	4b03      	ldr	r3, [pc, #12]	; (8003a50 <USART1_IRQHandler+0x14>)
 8003a42:	0018      	movs	r0, r3
 8003a44:	f003 f9da 	bl	8006dfc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003a48:	46c0      	nop			; (mov r8, r8)
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	46c0      	nop			; (mov r8, r8)
 8003a50:	20001354 	.word	0x20001354

08003a54 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003a58:	4b03      	ldr	r3, [pc, #12]	; (8003a68 <USART2_IRQHandler+0x14>)
 8003a5a:	0018      	movs	r0, r3
 8003a5c:	f003 f9ce 	bl	8006dfc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003a60:	46c0      	nop			; (mov r8, r8)
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	46c0      	nop			; (mov r8, r8)
 8003a68:	200014e4 	.word	0x200014e4

08003a6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b086      	sub	sp, #24
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003a74:	4a14      	ldr	r2, [pc, #80]	; (8003ac8 <_sbrk+0x5c>)
 8003a76:	4b15      	ldr	r3, [pc, #84]	; (8003acc <_sbrk+0x60>)
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003a80:	4b13      	ldr	r3, [pc, #76]	; (8003ad0 <_sbrk+0x64>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d102      	bne.n	8003a8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003a88:	4b11      	ldr	r3, [pc, #68]	; (8003ad0 <_sbrk+0x64>)
 8003a8a:	4a12      	ldr	r2, [pc, #72]	; (8003ad4 <_sbrk+0x68>)
 8003a8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003a8e:	4b10      	ldr	r3, [pc, #64]	; (8003ad0 <_sbrk+0x64>)
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	18d3      	adds	r3, r2, r3
 8003a96:	693a      	ldr	r2, [r7, #16]
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d207      	bcs.n	8003aac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003a9c:	f01b fb0a 	bl	801f0b4 <__errno>
 8003aa0:	0003      	movs	r3, r0
 8003aa2:	220c      	movs	r2, #12
 8003aa4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	425b      	negs	r3, r3
 8003aaa:	e009      	b.n	8003ac0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003aac:	4b08      	ldr	r3, [pc, #32]	; (8003ad0 <_sbrk+0x64>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003ab2:	4b07      	ldr	r3, [pc, #28]	; (8003ad0 <_sbrk+0x64>)
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	18d2      	adds	r2, r2, r3
 8003aba:	4b05      	ldr	r3, [pc, #20]	; (8003ad0 <_sbrk+0x64>)
 8003abc:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003abe:	68fb      	ldr	r3, [r7, #12]
}
 8003ac0:	0018      	movs	r0, r3
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	b006      	add	sp, #24
 8003ac6:	bd80      	pop	{r7, pc}
 8003ac8:	20005000 	.word	0x20005000
 8003acc:	00000400 	.word	0x00000400
 8003ad0:	200002a4 	.word	0x200002a4
 8003ad4:	20001778 	.word	0x20001778

08003ad8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8003adc:	4b17      	ldr	r3, [pc, #92]	; (8003b3c <SystemInit+0x64>)
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	4b16      	ldr	r3, [pc, #88]	; (8003b3c <SystemInit+0x64>)
 8003ae2:	2180      	movs	r1, #128	; 0x80
 8003ae4:	0049      	lsls	r1, r1, #1
 8003ae6:	430a      	orrs	r2, r1
 8003ae8:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8003aea:	4b14      	ldr	r3, [pc, #80]	; (8003b3c <SystemInit+0x64>)
 8003aec:	68da      	ldr	r2, [r3, #12]
 8003aee:	4b13      	ldr	r3, [pc, #76]	; (8003b3c <SystemInit+0x64>)
 8003af0:	4913      	ldr	r1, [pc, #76]	; (8003b40 <SystemInit+0x68>)
 8003af2:	400a      	ands	r2, r1
 8003af4:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8003af6:	4b11      	ldr	r3, [pc, #68]	; (8003b3c <SystemInit+0x64>)
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	4b10      	ldr	r3, [pc, #64]	; (8003b3c <SystemInit+0x64>)
 8003afc:	4911      	ldr	r1, [pc, #68]	; (8003b44 <SystemInit+0x6c>)
 8003afe:	400a      	ands	r2, r1
 8003b00:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8003b02:	4b0e      	ldr	r3, [pc, #56]	; (8003b3c <SystemInit+0x64>)
 8003b04:	689a      	ldr	r2, [r3, #8]
 8003b06:	4b0d      	ldr	r3, [pc, #52]	; (8003b3c <SystemInit+0x64>)
 8003b08:	2101      	movs	r1, #1
 8003b0a:	438a      	bics	r2, r1
 8003b0c:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8003b0e:	4b0b      	ldr	r3, [pc, #44]	; (8003b3c <SystemInit+0x64>)
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	4b0a      	ldr	r3, [pc, #40]	; (8003b3c <SystemInit+0x64>)
 8003b14:	490c      	ldr	r1, [pc, #48]	; (8003b48 <SystemInit+0x70>)
 8003b16:	400a      	ands	r2, r1
 8003b18:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8003b1a:	4b08      	ldr	r3, [pc, #32]	; (8003b3c <SystemInit+0x64>)
 8003b1c:	68da      	ldr	r2, [r3, #12]
 8003b1e:	4b07      	ldr	r3, [pc, #28]	; (8003b3c <SystemInit+0x64>)
 8003b20:	490a      	ldr	r1, [pc, #40]	; (8003b4c <SystemInit+0x74>)
 8003b22:	400a      	ands	r2, r1
 8003b24:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8003b26:	4b05      	ldr	r3, [pc, #20]	; (8003b3c <SystemInit+0x64>)
 8003b28:	2200      	movs	r2, #0
 8003b2a:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003b2c:	4b08      	ldr	r3, [pc, #32]	; (8003b50 <SystemInit+0x78>)
 8003b2e:	2280      	movs	r2, #128	; 0x80
 8003b30:	0512      	lsls	r2, r2, #20
 8003b32:	609a      	str	r2, [r3, #8]
#endif
}
 8003b34:	46c0      	nop			; (mov r8, r8)
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}
 8003b3a:	46c0      	nop			; (mov r8, r8)
 8003b3c:	40021000 	.word	0x40021000
 8003b40:	88ff400c 	.word	0x88ff400c
 8003b44:	fef6fff6 	.word	0xfef6fff6
 8003b48:	fffbffff 	.word	0xfffbffff
 8003b4c:	ff02ffff 	.word	0xff02ffff
 8003b50:	e000ed00 	.word	0xe000ed00

08003b54 <HAL_TIM_Base_MspInit>:
  }

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b082      	sub	sp, #8
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM21)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a06      	ldr	r2, [pc, #24]	; (8003b7c <HAL_TIM_Base_MspInit+0x28>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d105      	bne.n	8003b72 <HAL_TIM_Base_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM21_MspInit 0 */

  /* USER CODE END TIM21_MspInit 0 */
    /* TIM21 clock enable */
    __HAL_RCC_TIM21_CLK_ENABLE();
 8003b66:	4b06      	ldr	r3, [pc, #24]	; (8003b80 <HAL_TIM_Base_MspInit+0x2c>)
 8003b68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b6a:	4b05      	ldr	r3, [pc, #20]	; (8003b80 <HAL_TIM_Base_MspInit+0x2c>)
 8003b6c:	2104      	movs	r1, #4
 8003b6e:	430a      	orrs	r2, r1
 8003b70:	635a      	str	r2, [r3, #52]	; 0x34
  /* USER CODE BEGIN TIM21_MspInit 1 */

  /* USER CODE END TIM21_MspInit 1 */
  }
}
 8003b72:	46c0      	nop			; (mov r8, r8)
 8003b74:	46bd      	mov	sp, r7
 8003b76:	b002      	add	sp, #8
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	46c0      	nop			; (mov r8, r8)
 8003b7c:	40010800 	.word	0x40010800
 8003b80:	40021000 	.word	0x40021000

08003b84 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8003b88:	4b14      	ldr	r3, [pc, #80]	; (8003bdc <MX_USART1_UART_Init+0x58>)
 8003b8a:	4a15      	ldr	r2, [pc, #84]	; (8003be0 <MX_USART1_UART_Init+0x5c>)
 8003b8c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8003b8e:	4b13      	ldr	r3, [pc, #76]	; (8003bdc <MX_USART1_UART_Init+0x58>)
 8003b90:	2296      	movs	r2, #150	; 0x96
 8003b92:	0192      	lsls	r2, r2, #6
 8003b94:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003b96:	4b11      	ldr	r3, [pc, #68]	; (8003bdc <MX_USART1_UART_Init+0x58>)
 8003b98:	2200      	movs	r2, #0
 8003b9a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003b9c:	4b0f      	ldr	r3, [pc, #60]	; (8003bdc <MX_USART1_UART_Init+0x58>)
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003ba2:	4b0e      	ldr	r3, [pc, #56]	; (8003bdc <MX_USART1_UART_Init+0x58>)
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;//;
 8003ba8:	4b0c      	ldr	r3, [pc, #48]	; (8003bdc <MX_USART1_UART_Init+0x58>)
 8003baa:	220c      	movs	r2, #12
 8003bac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003bae:	4b0b      	ldr	r3, [pc, #44]	; (8003bdc <MX_USART1_UART_Init+0x58>)
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003bb4:	4b09      	ldr	r3, [pc, #36]	; (8003bdc <MX_USART1_UART_Init+0x58>)
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003bba:	4b08      	ldr	r3, [pc, #32]	; (8003bdc <MX_USART1_UART_Init+0x58>)
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	621a      	str	r2, [r3, #32]
  //huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_TXINVERT_INIT|UART_ADVFEATURE_RXINVERT_INIT;
  //huart1.AdvancedInit.TxPinLevelInvert = UART_ADVFEATURE_TXINV_ENABLE;
  //huart1.AdvancedInit.RxPinLevelInvert = UART_ADVFEATURE_RXINV_ENABLE;
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003bc0:	4b06      	ldr	r3, [pc, #24]	; (8003bdc <MX_USART1_UART_Init+0x58>)
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003bc6:	4b05      	ldr	r3, [pc, #20]	; (8003bdc <MX_USART1_UART_Init+0x58>)
 8003bc8:	0018      	movs	r0, r3
 8003bca:	f002 ff63 	bl	8006a94 <HAL_UART_Init>
 8003bce:	1e03      	subs	r3, r0, #0
 8003bd0:	d001      	beq.n	8003bd6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8003bd2:	f7ff f9dd 	bl	8002f90 <Error_Handler>
  }

}
 8003bd6:	46c0      	nop			; (mov r8, r8)
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}
 8003bdc:	20001354 	.word	0x20001354
 8003be0:	40013800 	.word	0x40013800

08003be4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8003be8:	4b14      	ldr	r3, [pc, #80]	; (8003c3c <MX_USART2_UART_Init+0x58>)
 8003bea:	4a15      	ldr	r2, [pc, #84]	; (8003c40 <MX_USART2_UART_Init+0x5c>)
 8003bec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8003bee:	4b13      	ldr	r3, [pc, #76]	; (8003c3c <MX_USART2_UART_Init+0x58>)
 8003bf0:	2296      	movs	r2, #150	; 0x96
 8003bf2:	0192      	lsls	r2, r2, #6
 8003bf4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003bf6:	4b11      	ldr	r3, [pc, #68]	; (8003c3c <MX_USART2_UART_Init+0x58>)
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003bfc:	4b0f      	ldr	r3, [pc, #60]	; (8003c3c <MX_USART2_UART_Init+0x58>)
 8003bfe:	2200      	movs	r2, #0
 8003c00:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003c02:	4b0e      	ldr	r3, [pc, #56]	; (8003c3c <MX_USART2_UART_Init+0x58>)
 8003c04:	2200      	movs	r2, #0
 8003c06:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003c08:	4b0c      	ldr	r3, [pc, #48]	; (8003c3c <MX_USART2_UART_Init+0x58>)
 8003c0a:	220c      	movs	r2, #12
 8003c0c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003c0e:	4b0b      	ldr	r3, [pc, #44]	; (8003c3c <MX_USART2_UART_Init+0x58>)
 8003c10:	2200      	movs	r2, #0
 8003c12:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003c14:	4b09      	ldr	r3, [pc, #36]	; (8003c3c <MX_USART2_UART_Init+0x58>)
 8003c16:	2200      	movs	r2, #0
 8003c18:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003c1a:	4b08      	ldr	r3, [pc, #32]	; (8003c3c <MX_USART2_UART_Init+0x58>)
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003c20:	4b06      	ldr	r3, [pc, #24]	; (8003c3c <MX_USART2_UART_Init+0x58>)
 8003c22:	2200      	movs	r2, #0
 8003c24:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003c26:	4b05      	ldr	r3, [pc, #20]	; (8003c3c <MX_USART2_UART_Init+0x58>)
 8003c28:	0018      	movs	r0, r3
 8003c2a:	f002 ff33 	bl	8006a94 <HAL_UART_Init>
 8003c2e:	1e03      	subs	r3, r0, #0
 8003c30:	d001      	beq.n	8003c36 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8003c32:	f7ff f9ad 	bl	8002f90 <Error_Handler>
  }

}
 8003c36:	46c0      	nop			; (mov r8, r8)
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}
 8003c3c:	200014e4 	.word	0x200014e4
 8003c40:	40004400 	.word	0x40004400

08003c44 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b08a      	sub	sp, #40	; 0x28
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c4c:	2314      	movs	r3, #20
 8003c4e:	18fb      	adds	r3, r7, r3
 8003c50:	0018      	movs	r0, r3
 8003c52:	2314      	movs	r3, #20
 8003c54:	001a      	movs	r2, r3
 8003c56:	2100      	movs	r1, #0
 8003c58:	f01b fa72 	bl	801f140 <memset>
  if(uartHandle->Instance==USART1)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a38      	ldr	r2, [pc, #224]	; (8003d44 <HAL_UART_MspInit+0x100>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d133      	bne.n	8003cce <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003c66:	4b38      	ldr	r3, [pc, #224]	; (8003d48 <HAL_UART_MspInit+0x104>)
 8003c68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c6a:	4b37      	ldr	r3, [pc, #220]	; (8003d48 <HAL_UART_MspInit+0x104>)
 8003c6c:	2180      	movs	r1, #128	; 0x80
 8003c6e:	01c9      	lsls	r1, r1, #7
 8003c70:	430a      	orrs	r2, r1
 8003c72:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c74:	4b34      	ldr	r3, [pc, #208]	; (8003d48 <HAL_UART_MspInit+0x104>)
 8003c76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c78:	4b33      	ldr	r3, [pc, #204]	; (8003d48 <HAL_UART_MspInit+0x104>)
 8003c7a:	2101      	movs	r1, #1
 8003c7c:	430a      	orrs	r2, r1
 8003c7e:	62da      	str	r2, [r3, #44]	; 0x2c
 8003c80:	4b31      	ldr	r3, [pc, #196]	; (8003d48 <HAL_UART_MspInit+0x104>)
 8003c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c84:	2201      	movs	r2, #1
 8003c86:	4013      	ands	r3, r2
 8003c88:	613b      	str	r3, [r7, #16]
 8003c8a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8003c8c:	2114      	movs	r1, #20
 8003c8e:	187b      	adds	r3, r7, r1
 8003c90:	22c0      	movs	r2, #192	; 0xc0
 8003c92:	00d2      	lsls	r2, r2, #3
 8003c94:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c96:	187b      	adds	r3, r7, r1
 8003c98:	2202      	movs	r2, #2
 8003c9a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c9c:	187b      	adds	r3, r7, r1
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ca2:	187b      	adds	r3, r7, r1
 8003ca4:	2203      	movs	r2, #3
 8003ca6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8003ca8:	187b      	adds	r3, r7, r1
 8003caa:	2204      	movs	r2, #4
 8003cac:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cae:	187a      	adds	r2, r7, r1
 8003cb0:	23a0      	movs	r3, #160	; 0xa0
 8003cb2:	05db      	lsls	r3, r3, #23
 8003cb4:	0011      	movs	r1, r2
 8003cb6:	0018      	movs	r0, r3
 8003cb8:	f000 fca8 	bl	800460c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	2100      	movs	r1, #0
 8003cc0:	201b      	movs	r0, #27
 8003cc2:	f000 fc19 	bl	80044f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003cc6:	201b      	movs	r0, #27
 8003cc8:	f000 fc2b 	bl	8004522 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003ccc:	e036      	b.n	8003d3c <HAL_UART_MspInit+0xf8>
  else if(uartHandle->Instance==USART2)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a1e      	ldr	r2, [pc, #120]	; (8003d4c <HAL_UART_MspInit+0x108>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d131      	bne.n	8003d3c <HAL_UART_MspInit+0xf8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003cd8:	4b1b      	ldr	r3, [pc, #108]	; (8003d48 <HAL_UART_MspInit+0x104>)
 8003cda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cdc:	4b1a      	ldr	r3, [pc, #104]	; (8003d48 <HAL_UART_MspInit+0x104>)
 8003cde:	2180      	movs	r1, #128	; 0x80
 8003ce0:	0289      	lsls	r1, r1, #10
 8003ce2:	430a      	orrs	r2, r1
 8003ce4:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ce6:	4b18      	ldr	r3, [pc, #96]	; (8003d48 <HAL_UART_MspInit+0x104>)
 8003ce8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cea:	4b17      	ldr	r3, [pc, #92]	; (8003d48 <HAL_UART_MspInit+0x104>)
 8003cec:	2101      	movs	r1, #1
 8003cee:	430a      	orrs	r2, r1
 8003cf0:	62da      	str	r2, [r3, #44]	; 0x2c
 8003cf2:	4b15      	ldr	r3, [pc, #84]	; (8003d48 <HAL_UART_MspInit+0x104>)
 8003cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	60fb      	str	r3, [r7, #12]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8003cfe:	2114      	movs	r1, #20
 8003d00:	187b      	adds	r3, r7, r1
 8003d02:	220c      	movs	r2, #12
 8003d04:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d06:	187b      	adds	r3, r7, r1
 8003d08:	2202      	movs	r2, #2
 8003d0a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP; //GPIO_NOPULL
 8003d0c:	187b      	adds	r3, r7, r1
 8003d0e:	2201      	movs	r2, #1
 8003d10:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d12:	187b      	adds	r3, r7, r1
 8003d14:	2203      	movs	r2, #3
 8003d16:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8003d18:	187b      	adds	r3, r7, r1
 8003d1a:	2204      	movs	r2, #4
 8003d1c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d1e:	187a      	adds	r2, r7, r1
 8003d20:	23a0      	movs	r3, #160	; 0xa0
 8003d22:	05db      	lsls	r3, r3, #23
 8003d24:	0011      	movs	r1, r2
 8003d26:	0018      	movs	r0, r3
 8003d28:	f000 fc70 	bl	800460c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	2100      	movs	r1, #0
 8003d30:	201c      	movs	r0, #28
 8003d32:	f000 fbe1 	bl	80044f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003d36:	201c      	movs	r0, #28
 8003d38:	f000 fbf3 	bl	8004522 <HAL_NVIC_EnableIRQ>
}
 8003d3c:	46c0      	nop			; (mov r8, r8)
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	b00a      	add	sp, #40	; 0x28
 8003d42:	bd80      	pop	{r7, pc}
 8003d44:	40013800 	.word	0x40013800
 8003d48:	40021000 	.word	0x40021000
 8003d4c:	40004400 	.word	0x40004400

08003d50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8003d50:	480d      	ldr	r0, [pc, #52]	; (8003d88 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8003d52:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8003d54:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003d56:	e003      	b.n	8003d60 <LoopCopyDataInit>

08003d58 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003d58:	4b0c      	ldr	r3, [pc, #48]	; (8003d8c <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8003d5a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003d5c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003d5e:	3104      	adds	r1, #4

08003d60 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8003d60:	480b      	ldr	r0, [pc, #44]	; (8003d90 <LoopForever+0xa>)
  ldr  r3, =_edata
 8003d62:	4b0c      	ldr	r3, [pc, #48]	; (8003d94 <LoopForever+0xe>)
  adds  r2, r0, r1
 8003d64:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003d66:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003d68:	d3f6      	bcc.n	8003d58 <CopyDataInit>
  ldr  r2, =_sbss
 8003d6a:	4a0b      	ldr	r2, [pc, #44]	; (8003d98 <LoopForever+0x12>)
  b  LoopFillZerobss
 8003d6c:	e002      	b.n	8003d74 <LoopFillZerobss>

08003d6e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8003d6e:	2300      	movs	r3, #0
  str  r3, [r2]
 8003d70:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003d72:	3204      	adds	r2, #4

08003d74 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8003d74:	4b09      	ldr	r3, [pc, #36]	; (8003d9c <LoopForever+0x16>)
  cmp  r2, r3
 8003d76:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003d78:	d3f9      	bcc.n	8003d6e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003d7a:	f7ff fead 	bl	8003ad8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003d7e:	f01b f99f 	bl	801f0c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003d82:	f7ff f863 	bl	8002e4c <main>

08003d86 <LoopForever>:

LoopForever:
    b LoopForever
 8003d86:	e7fe      	b.n	8003d86 <LoopForever>
   ldr   r0, =_estack
 8003d88:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 8003d8c:	080225d0 	.word	0x080225d0
  ldr  r0, =_sdata
 8003d90:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003d94:	20000288 	.word	0x20000288
  ldr  r2, =_sbss
 8003d98:	20000288 	.word	0x20000288
  ldr  r3, = _ebss
 8003d9c:	20001774 	.word	0x20001774

08003da0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003da0:	e7fe      	b.n	8003da0 <ADC1_COMP_IRQHandler>
	...

08003da4 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b082      	sub	sp, #8
 8003da8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003daa:	1dfb      	adds	r3, r7, #7
 8003dac:	2200      	movs	r2, #0
 8003dae:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8003db0:	4b0b      	ldr	r3, [pc, #44]	; (8003de0 <HAL_Init+0x3c>)
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	4b0a      	ldr	r3, [pc, #40]	; (8003de0 <HAL_Init+0x3c>)
 8003db6:	2140      	movs	r1, #64	; 0x40
 8003db8:	430a      	orrs	r2, r1
 8003dba:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003dbc:	2000      	movs	r0, #0
 8003dbe:	f000 f811 	bl	8003de4 <HAL_InitTick>
 8003dc2:	1e03      	subs	r3, r0, #0
 8003dc4:	d003      	beq.n	8003dce <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8003dc6:	1dfb      	adds	r3, r7, #7
 8003dc8:	2201      	movs	r2, #1
 8003dca:	701a      	strb	r2, [r3, #0]
 8003dcc:	e001      	b.n	8003dd2 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003dce:	f7ff fddf 	bl	8003990 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003dd2:	1dfb      	adds	r3, r7, #7
 8003dd4:	781b      	ldrb	r3, [r3, #0]
}
 8003dd6:	0018      	movs	r0, r3
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	b002      	add	sp, #8
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	46c0      	nop			; (mov r8, r8)
 8003de0:	40022000 	.word	0x40022000

08003de4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003de4:	b590      	push	{r4, r7, lr}
 8003de6:	b083      	sub	sp, #12
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003dec:	4b14      	ldr	r3, [pc, #80]	; (8003e40 <HAL_InitTick+0x5c>)
 8003dee:	681c      	ldr	r4, [r3, #0]
 8003df0:	4b14      	ldr	r3, [pc, #80]	; (8003e44 <HAL_InitTick+0x60>)
 8003df2:	781b      	ldrb	r3, [r3, #0]
 8003df4:	0019      	movs	r1, r3
 8003df6:	23fa      	movs	r3, #250	; 0xfa
 8003df8:	0098      	lsls	r0, r3, #2
 8003dfa:	f7fc f98d 	bl	8000118 <__udivsi3>
 8003dfe:	0003      	movs	r3, r0
 8003e00:	0019      	movs	r1, r3
 8003e02:	0020      	movs	r0, r4
 8003e04:	f7fc f988 	bl	8000118 <__udivsi3>
 8003e08:	0003      	movs	r3, r0
 8003e0a:	0018      	movs	r0, r3
 8003e0c:	f000 fba9 	bl	8004562 <HAL_SYSTICK_Config>
 8003e10:	1e03      	subs	r3, r0, #0
 8003e12:	d001      	beq.n	8003e18 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	e00f      	b.n	8003e38 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2b03      	cmp	r3, #3
 8003e1c:	d80b      	bhi.n	8003e36 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003e1e:	6879      	ldr	r1, [r7, #4]
 8003e20:	2301      	movs	r3, #1
 8003e22:	425b      	negs	r3, r3
 8003e24:	2200      	movs	r2, #0
 8003e26:	0018      	movs	r0, r3
 8003e28:	f000 fb66 	bl	80044f8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003e2c:	4b06      	ldr	r3, [pc, #24]	; (8003e48 <HAL_InitTick+0x64>)
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003e32:	2300      	movs	r3, #0
 8003e34:	e000      	b.n	8003e38 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
}
 8003e38:	0018      	movs	r0, r3
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	b003      	add	sp, #12
 8003e3e:	bd90      	pop	{r4, r7, pc}
 8003e40:	2000005c 	.word	0x2000005c
 8003e44:	20000064 	.word	0x20000064
 8003e48:	20000060 	.word	0x20000060

08003e4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	af00      	add	r7, sp, #0
  return uwTick;
 8003e50:	4b02      	ldr	r3, [pc, #8]	; (8003e5c <HAL_GetTick+0x10>)
 8003e52:	681b      	ldr	r3, [r3, #0]
}
 8003e54:	0018      	movs	r0, r3
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	46c0      	nop			; (mov r8, r8)
 8003e5c:	20001564 	.word	0x20001564

08003e60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b084      	sub	sp, #16
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003e68:	f7ff fff0 	bl	8003e4c <HAL_GetTick>
 8003e6c:	0003      	movs	r3, r0
 8003e6e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	3301      	adds	r3, #1
 8003e78:	d005      	beq.n	8003e86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003e7a:	4b09      	ldr	r3, [pc, #36]	; (8003ea0 <HAL_Delay+0x40>)
 8003e7c:	781b      	ldrb	r3, [r3, #0]
 8003e7e:	001a      	movs	r2, r3
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	189b      	adds	r3, r3, r2
 8003e84:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003e86:	46c0      	nop			; (mov r8, r8)
 8003e88:	f7ff ffe0 	bl	8003e4c <HAL_GetTick>
 8003e8c:	0002      	movs	r2, r0
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	68fa      	ldr	r2, [r7, #12]
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d8f7      	bhi.n	8003e88 <HAL_Delay+0x28>
  {
  }
}
 8003e98:	46c0      	nop			; (mov r8, r8)
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	b004      	add	sp, #16
 8003e9e:	bd80      	pop	{r7, pc}
 8003ea0:	20000064 	.word	0x20000064

08003ea4 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8003ea8:	4b04      	ldr	r3, [pc, #16]	; (8003ebc <HAL_SuspendTick+0x18>)
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	4b03      	ldr	r3, [pc, #12]	; (8003ebc <HAL_SuspendTick+0x18>)
 8003eae:	2102      	movs	r1, #2
 8003eb0:	438a      	bics	r2, r1
 8003eb2:	601a      	str	r2, [r3, #0]
}
 8003eb4:	46c0      	nop			; (mov r8, r8)
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}
 8003eba:	46c0      	nop			; (mov r8, r8)
 8003ebc:	e000e010 	.word	0xe000e010

08003ec0 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8003ec4:	4b04      	ldr	r3, [pc, #16]	; (8003ed8 <HAL_ResumeTick+0x18>)
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	4b03      	ldr	r3, [pc, #12]	; (8003ed8 <HAL_ResumeTick+0x18>)
 8003eca:	2102      	movs	r1, #2
 8003ecc:	430a      	orrs	r2, r1
 8003ece:	601a      	str	r2, [r3, #0]
}
 8003ed0:	46c0      	nop			; (mov r8, r8)
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	46c0      	nop			; (mov r8, r8)
 8003ed8:	e000e010 	.word	0xe000e010

08003edc <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disables the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8003ee0:	4b04      	ldr	r3, [pc, #16]	; (8003ef4 <HAL_DBGMCU_DisableDBGStopMode+0x18>)
 8003ee2:	685a      	ldr	r2, [r3, #4]
 8003ee4:	4b03      	ldr	r3, [pc, #12]	; (8003ef4 <HAL_DBGMCU_DisableDBGStopMode+0x18>)
 8003ee6:	2102      	movs	r1, #2
 8003ee8:	438a      	bics	r2, r1
 8003eea:	605a      	str	r2, [r3, #4]
}
 8003eec:	46c0      	nop			; (mov r8, r8)
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	46c0      	nop			; (mov r8, r8)
 8003ef4:	40015800 	.word	0x40015800

08003ef8 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b082      	sub	sp, #8
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d101      	bne.n	8003f0a <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	e159      	b.n	80041be <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d10a      	bne.n	8003f28 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2200      	movs	r2, #0
 8003f16:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2250      	movs	r2, #80	; 0x50
 8003f1c:	2100      	movs	r1, #0
 8003f1e:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	0018      	movs	r0, r3
 8003f24:	f7fe fd56 	bl	80029d4 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f2c:	2210      	movs	r2, #16
 8003f2e:	4013      	ands	r3, r2
 8003f30:	2b10      	cmp	r3, #16
 8003f32:	d005      	beq.n	8003f40 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	2204      	movs	r2, #4
 8003f3c:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8003f3e:	d00b      	beq.n	8003f58 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f44:	2210      	movs	r2, #16
 8003f46:	431a      	orrs	r2, r3
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2250      	movs	r2, #80	; 0x50
 8003f50:	2100      	movs	r1, #0
 8003f52:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	e132      	b.n	80041be <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f5c:	4a9a      	ldr	r2, [pc, #616]	; (80041c8 <HAL_ADC_Init+0x2d0>)
 8003f5e:	4013      	ands	r3, r2
 8003f60:	2202      	movs	r2, #2
 8003f62:	431a      	orrs	r2, r3
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	2203      	movs	r2, #3
 8003f70:	4013      	ands	r3, r2
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d108      	bne.n	8003f88 <HAL_ADC_Init+0x90>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	4013      	ands	r3, r2
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d101      	bne.n	8003f88 <HAL_ADC_Init+0x90>
 8003f84:	2301      	movs	r3, #1
 8003f86:	e000      	b.n	8003f8a <HAL_ADC_Init+0x92>
 8003f88:	2300      	movs	r3, #0
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d149      	bne.n	8004022 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	685a      	ldr	r2, [r3, #4]
 8003f92:	23c0      	movs	r3, #192	; 0xc0
 8003f94:	061b      	lsls	r3, r3, #24
 8003f96:	429a      	cmp	r2, r3
 8003f98:	d00b      	beq.n	8003fb2 <HAL_ADC_Init+0xba>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	685a      	ldr	r2, [r3, #4]
 8003f9e:	2380      	movs	r3, #128	; 0x80
 8003fa0:	05db      	lsls	r3, r3, #23
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d005      	beq.n	8003fb2 <HAL_ADC_Init+0xba>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	685a      	ldr	r2, [r3, #4]
 8003faa:	2380      	movs	r3, #128	; 0x80
 8003fac:	061b      	lsls	r3, r3, #24
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	d111      	bne.n	8003fd6 <HAL_ADC_Init+0xde>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	691a      	ldr	r2, [r3, #16]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	0092      	lsls	r2, r2, #2
 8003fbe:	0892      	lsrs	r2, r2, #2
 8003fc0:	611a      	str	r2, [r3, #16]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	6919      	ldr	r1, [r3, #16]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	685a      	ldr	r2, [r3, #4]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	430a      	orrs	r2, r1
 8003fd2:	611a      	str	r2, [r3, #16]
 8003fd4:	e014      	b.n	8004000 <HAL_ADC_Init+0x108>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	691a      	ldr	r2, [r3, #16]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	0092      	lsls	r2, r2, #2
 8003fe2:	0892      	lsrs	r2, r2, #2
 8003fe4:	611a      	str	r2, [r3, #16]
 8003fe6:	4b79      	ldr	r3, [pc, #484]	; (80041cc <HAL_ADC_Init+0x2d4>)
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	4b78      	ldr	r3, [pc, #480]	; (80041cc <HAL_ADC_Init+0x2d4>)
 8003fec:	4978      	ldr	r1, [pc, #480]	; (80041d0 <HAL_ADC_Init+0x2d8>)
 8003fee:	400a      	ands	r2, r1
 8003ff0:	601a      	str	r2, [r3, #0]
 8003ff2:	4b76      	ldr	r3, [pc, #472]	; (80041cc <HAL_ADC_Init+0x2d4>)
 8003ff4:	6819      	ldr	r1, [r3, #0]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	685a      	ldr	r2, [r3, #4]
 8003ffa:	4b74      	ldr	r3, [pc, #464]	; (80041cc <HAL_ADC_Init+0x2d4>)
 8003ffc:	430a      	orrs	r2, r1
 8003ffe:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	68da      	ldr	r2, [r3, #12]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	2118      	movs	r1, #24
 800400c:	438a      	bics	r2, r1
 800400e:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	68d9      	ldr	r1, [r3, #12]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	689a      	ldr	r2, [r3, #8]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	430a      	orrs	r2, r1
 8004020:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8004022:	4b6a      	ldr	r3, [pc, #424]	; (80041cc <HAL_ADC_Init+0x2d4>)
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	4b69      	ldr	r3, [pc, #420]	; (80041cc <HAL_ADC_Init+0x2d4>)
 8004028:	496a      	ldr	r1, [pc, #424]	; (80041d4 <HAL_ADC_Init+0x2dc>)
 800402a:	400a      	ands	r2, r1
 800402c:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 800402e:	4b67      	ldr	r3, [pc, #412]	; (80041cc <HAL_ADC_Init+0x2d4>)
 8004030:	6819      	ldr	r1, [r3, #0]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004036:	065a      	lsls	r2, r3, #25
 8004038:	4b64      	ldr	r3, [pc, #400]	; (80041cc <HAL_ADC_Init+0x2d4>)
 800403a:	430a      	orrs	r2, r1
 800403c:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	689a      	ldr	r2, [r3, #8]
 8004044:	2380      	movs	r3, #128	; 0x80
 8004046:	055b      	lsls	r3, r3, #21
 8004048:	4013      	ands	r3, r2
 800404a:	d108      	bne.n	800405e <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	689a      	ldr	r2, [r3, #8]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	2180      	movs	r1, #128	; 0x80
 8004058:	0549      	lsls	r1, r1, #21
 800405a:	430a      	orrs	r2, r1
 800405c:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	68da      	ldr	r2, [r3, #12]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	495b      	ldr	r1, [pc, #364]	; (80041d8 <HAL_ADC_Init+0x2e0>)
 800406a:	400a      	ands	r2, r1
 800406c:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	68d9      	ldr	r1, [r3, #12]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	691b      	ldr	r3, [r3, #16]
 800407c:	2b02      	cmp	r3, #2
 800407e:	d101      	bne.n	8004084 <HAL_ADC_Init+0x18c>
 8004080:	2304      	movs	r3, #4
 8004082:	e000      	b.n	8004086 <HAL_ADC_Init+0x18e>
 8004084:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8004086:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2020      	movs	r0, #32
 800408c:	5c1b      	ldrb	r3, [r3, r0]
 800408e:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8004090:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	202c      	movs	r0, #44	; 0x2c
 8004096:	5c1b      	ldrb	r3, [r3, r0]
 8004098:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800409a:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80040a0:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	699b      	ldr	r3, [r3, #24]
 80040a6:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 80040a8:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	69db      	ldr	r3, [r3, #28]
 80040ae:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80040b0:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	430a      	orrs	r2, r1
 80040b8:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80040be:	23c2      	movs	r3, #194	; 0xc2
 80040c0:	33ff      	adds	r3, #255	; 0xff
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d00b      	beq.n	80040de <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	68d9      	ldr	r1, [r3, #12]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80040d4:	431a      	orrs	r2, r3
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	430a      	orrs	r2, r1
 80040dc:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2221      	movs	r2, #33	; 0x21
 80040e2:	5c9b      	ldrb	r3, [r3, r2]
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d11a      	bne.n	800411e <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2220      	movs	r2, #32
 80040ec:	5c9b      	ldrb	r3, [r3, r2]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d109      	bne.n	8004106 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	68da      	ldr	r2, [r3, #12]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	2180      	movs	r1, #128	; 0x80
 80040fe:	0249      	lsls	r1, r1, #9
 8004100:	430a      	orrs	r2, r1
 8004102:	60da      	str	r2, [r3, #12]
 8004104:	e00b      	b.n	800411e <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800410a:	2220      	movs	r2, #32
 800410c:	431a      	orrs	r2, r3
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004116:	2201      	movs	r2, #1
 8004118:	431a      	orrs	r2, r3
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004122:	2b01      	cmp	r3, #1
 8004124:	d11f      	bne.n	8004166 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	691a      	ldr	r2, [r3, #16]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	492a      	ldr	r1, [pc, #168]	; (80041dc <HAL_ADC_Init+0x2e4>)
 8004132:	400a      	ands	r2, r1
 8004134:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	6919      	ldr	r1, [r3, #16]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8004144:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 800414a:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	430a      	orrs	r2, r1
 8004152:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	691a      	ldr	r2, [r3, #16]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	2101      	movs	r1, #1
 8004160:	430a      	orrs	r2, r1
 8004162:	611a      	str	r2, [r3, #16]
 8004164:	e00e      	b.n	8004184 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	691b      	ldr	r3, [r3, #16]
 800416c:	2201      	movs	r2, #1
 800416e:	4013      	ands	r3, r2
 8004170:	2b01      	cmp	r3, #1
 8004172:	d107      	bne.n	8004184 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	691a      	ldr	r2, [r3, #16]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	2101      	movs	r1, #1
 8004180:	438a      	bics	r2, r1
 8004182:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	695a      	ldr	r2, [r3, #20]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	2107      	movs	r1, #7
 8004190:	438a      	bics	r2, r1
 8004192:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	6959      	ldr	r1, [r3, #20]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	430a      	orrs	r2, r1
 80041a4:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2200      	movs	r2, #0
 80041aa:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041b0:	2203      	movs	r2, #3
 80041b2:	4393      	bics	r3, r2
 80041b4:	2201      	movs	r2, #1
 80041b6:	431a      	orrs	r2, r3
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 80041bc:	2300      	movs	r3, #0
}
 80041be:	0018      	movs	r0, r3
 80041c0:	46bd      	mov	sp, r7
 80041c2:	b002      	add	sp, #8
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	46c0      	nop			; (mov r8, r8)
 80041c8:	fffffefd 	.word	0xfffffefd
 80041cc:	40012708 	.word	0x40012708
 80041d0:	ffc3ffff 	.word	0xffc3ffff
 80041d4:	fdffffff 	.word	0xfdffffff
 80041d8:	fffe0219 	.word	0xfffe0219
 80041dc:	fffffc03 	.word	0xfffffc03

080041e0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b082      	sub	sp, #8
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
 80041e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2250      	movs	r2, #80	; 0x50
 80041ee:	5c9b      	ldrb	r3, [r3, r2]
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d101      	bne.n	80041f8 <HAL_ADC_ConfigChannel+0x18>
 80041f4:	2302      	movs	r3, #2
 80041f6:	e06c      	b.n	80042d2 <HAL_ADC_ConfigChannel+0xf2>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2250      	movs	r2, #80	; 0x50
 80041fc:	2101      	movs	r1, #1
 80041fe:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	2204      	movs	r2, #4
 8004208:	4013      	ands	r3, r2
 800420a:	d00b      	beq.n	8004224 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004210:	2220      	movs	r2, #32
 8004212:	431a      	orrs	r2, r3
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2250      	movs	r2, #80	; 0x50
 800421c:	2100      	movs	r1, #0
 800421e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	e056      	b.n	80042d2 <HAL_ADC_ConfigChannel+0xf2>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	4a2c      	ldr	r2, [pc, #176]	; (80042dc <HAL_ADC_ConfigChannel+0xfc>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d028      	beq.n	8004280 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	035b      	lsls	r3, r3, #13
 800423a:	0b5a      	lsrs	r2, r3, #13
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	430a      	orrs	r2, r1
 8004242:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	2380      	movs	r3, #128	; 0x80
 800424a:	02db      	lsls	r3, r3, #11
 800424c:	4013      	ands	r3, r2
 800424e:	d009      	beq.n	8004264 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 8004250:	4b23      	ldr	r3, [pc, #140]	; (80042e0 <HAL_ADC_ConfigChannel+0x100>)
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	4b22      	ldr	r3, [pc, #136]	; (80042e0 <HAL_ADC_ConfigChannel+0x100>)
 8004256:	2180      	movs	r1, #128	; 0x80
 8004258:	0409      	lsls	r1, r1, #16
 800425a:	430a      	orrs	r2, r1
 800425c:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 800425e:	200a      	movs	r0, #10
 8004260:	f000 f844 	bl	80042ec <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	2380      	movs	r3, #128	; 0x80
 800426a:	029b      	lsls	r3, r3, #10
 800426c:	4013      	ands	r3, r2
 800426e:	d02b      	beq.n	80042c8 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 8004270:	4b1b      	ldr	r3, [pc, #108]	; (80042e0 <HAL_ADC_ConfigChannel+0x100>)
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	4b1a      	ldr	r3, [pc, #104]	; (80042e0 <HAL_ADC_ConfigChannel+0x100>)
 8004276:	2180      	movs	r1, #128	; 0x80
 8004278:	03c9      	lsls	r1, r1, #15
 800427a:	430a      	orrs	r2, r1
 800427c:	601a      	str	r2, [r3, #0]
 800427e:	e023      	b.n	80042c8 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	035b      	lsls	r3, r3, #13
 800428c:	0b5b      	lsrs	r3, r3, #13
 800428e:	43d9      	mvns	r1, r3
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	400a      	ands	r2, r1
 8004296:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	2380      	movs	r3, #128	; 0x80
 800429e:	02db      	lsls	r3, r3, #11
 80042a0:	4013      	ands	r3, r2
 80042a2:	d005      	beq.n	80042b0 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 80042a4:	4b0e      	ldr	r3, [pc, #56]	; (80042e0 <HAL_ADC_ConfigChannel+0x100>)
 80042a6:	681a      	ldr	r2, [r3, #0]
 80042a8:	4b0d      	ldr	r3, [pc, #52]	; (80042e0 <HAL_ADC_ConfigChannel+0x100>)
 80042aa:	490e      	ldr	r1, [pc, #56]	; (80042e4 <HAL_ADC_ConfigChannel+0x104>)
 80042ac:	400a      	ands	r2, r1
 80042ae:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	2380      	movs	r3, #128	; 0x80
 80042b6:	029b      	lsls	r3, r3, #10
 80042b8:	4013      	ands	r3, r2
 80042ba:	d005      	beq.n	80042c8 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 80042bc:	4b08      	ldr	r3, [pc, #32]	; (80042e0 <HAL_ADC_ConfigChannel+0x100>)
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	4b07      	ldr	r3, [pc, #28]	; (80042e0 <HAL_ADC_ConfigChannel+0x100>)
 80042c2:	4909      	ldr	r1, [pc, #36]	; (80042e8 <HAL_ADC_ConfigChannel+0x108>)
 80042c4:	400a      	ands	r2, r1
 80042c6:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2250      	movs	r2, #80	; 0x50
 80042cc:	2100      	movs	r1, #0
 80042ce:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 80042d0:	2300      	movs	r3, #0
}
 80042d2:	0018      	movs	r0, r3
 80042d4:	46bd      	mov	sp, r7
 80042d6:	b002      	add	sp, #8
 80042d8:	bd80      	pop	{r7, pc}
 80042da:	46c0      	nop			; (mov r8, r8)
 80042dc:	00001001 	.word	0x00001001
 80042e0:	40012708 	.word	0x40012708
 80042e4:	ff7fffff 	.word	0xff7fffff
 80042e8:	ffbfffff 	.word	0xffbfffff

080042ec <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b084      	sub	sp, #16
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 80042f4:	4b0a      	ldr	r3, [pc, #40]	; (8004320 <ADC_DelayMicroSecond+0x34>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	490a      	ldr	r1, [pc, #40]	; (8004324 <ADC_DelayMicroSecond+0x38>)
 80042fa:	0018      	movs	r0, r3
 80042fc:	f7fb ff0c 	bl	8000118 <__udivsi3>
 8004300:	0003      	movs	r3, r0
 8004302:	001a      	movs	r2, r3
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	4353      	muls	r3, r2
 8004308:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 800430a:	e002      	b.n	8004312 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	3b01      	subs	r3, #1
 8004310:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d1f9      	bne.n	800430c <ADC_DelayMicroSecond+0x20>
  } 
}
 8004318:	46c0      	nop			; (mov r8, r8)
 800431a:	46bd      	mov	sp, r7
 800431c:	b004      	add	sp, #16
 800431e:	bd80      	pop	{r7, pc}
 8004320:	2000005c 	.word	0x2000005c
 8004324:	000f4240 	.word	0x000f4240

08004328 <HAL_ADCEx_EnableVREFINT>:
  *         For more details on procedure and buffer current consumption, refer to device reference manual.
  * @note   This is functional only if the LOCK is not set.
  * @retval None
*/
HAL_StatusTypeDef HAL_ADCEx_EnableVREFINT(void)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b082      	sub	sp, #8
 800432c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800432e:	2300      	movs	r3, #0
 8004330:	607b      	str	r3, [r7, #4]
  
  /* Enable the Buffer for the ADC by setting ENBUF_SENSOR_ADC bit in the CFGR3 register */
  SET_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_ENBUF_VREFINT_ADC);
 8004332:	4b10      	ldr	r3, [pc, #64]	; (8004374 <HAL_ADCEx_EnableVREFINT+0x4c>)
 8004334:	6a1a      	ldr	r2, [r3, #32]
 8004336:	4b0f      	ldr	r3, [pc, #60]	; (8004374 <HAL_ADCEx_EnableVREFINT+0x4c>)
 8004338:	2180      	movs	r1, #128	; 0x80
 800433a:	0049      	lsls	r1, r1, #1
 800433c:	430a      	orrs	r2, r1
 800433e:	621a      	str	r2, [r3, #32]
  
  /* Wait for Vrefint buffer effectively enabled */
  /* Get tick count */
  tickstart = HAL_GetTick();
 8004340:	f7ff fd84 	bl	8003e4c <HAL_GetTick>
 8004344:	0003      	movs	r3, r0
 8004346:	607b      	str	r3, [r7, #4]
  
  while(HAL_IS_BIT_CLR(SYSCFG->CFGR3, SYSCFG_CFGR3_VREFINT_RDYF))
 8004348:	e008      	b.n	800435c <HAL_ADCEx_EnableVREFINT+0x34>
  {
    if((HAL_GetTick() - tickstart) > SYSCFG_BUF_VREFINT_ENABLE_TIMEOUT)
 800434a:	f7ff fd7f 	bl	8003e4c <HAL_GetTick>
 800434e:	0002      	movs	r2, r0
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	1ad3      	subs	r3, r2, r3
 8004354:	2b03      	cmp	r3, #3
 8004356:	d901      	bls.n	800435c <HAL_ADCEx_EnableVREFINT+0x34>
    { 
      return HAL_ERROR;
 8004358:	2301      	movs	r3, #1
 800435a:	e006      	b.n	800436a <HAL_ADCEx_EnableVREFINT+0x42>
  while(HAL_IS_BIT_CLR(SYSCFG->CFGR3, SYSCFG_CFGR3_VREFINT_RDYF))
 800435c:	4b05      	ldr	r3, [pc, #20]	; (8004374 <HAL_ADCEx_EnableVREFINT+0x4c>)
 800435e:	6a1a      	ldr	r2, [r3, #32]
 8004360:	2380      	movs	r3, #128	; 0x80
 8004362:	05db      	lsls	r3, r3, #23
 8004364:	4013      	ands	r3, r2
 8004366:	d0f0      	beq.n	800434a <HAL_ADCEx_EnableVREFINT+0x22>
    }
  }
  
  return HAL_OK;
 8004368:	2300      	movs	r3, #0
}
 800436a:	0018      	movs	r0, r3
 800436c:	46bd      	mov	sp, r7
 800436e:	b002      	add	sp, #8
 8004370:	bd80      	pop	{r7, pc}
 8004372:	46c0      	nop			; (mov r8, r8)
 8004374:	40010000 	.word	0x40010000

08004378 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b082      	sub	sp, #8
 800437c:	af00      	add	r7, sp, #0
 800437e:	0002      	movs	r2, r0
 8004380:	1dfb      	adds	r3, r7, #7
 8004382:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8004384:	1dfb      	adds	r3, r7, #7
 8004386:	781b      	ldrb	r3, [r3, #0]
 8004388:	001a      	movs	r2, r3
 800438a:	231f      	movs	r3, #31
 800438c:	401a      	ands	r2, r3
 800438e:	4b04      	ldr	r3, [pc, #16]	; (80043a0 <NVIC_EnableIRQ+0x28>)
 8004390:	2101      	movs	r1, #1
 8004392:	4091      	lsls	r1, r2
 8004394:	000a      	movs	r2, r1
 8004396:	601a      	str	r2, [r3, #0]
}
 8004398:	46c0      	nop			; (mov r8, r8)
 800439a:	46bd      	mov	sp, r7
 800439c:	b002      	add	sp, #8
 800439e:	bd80      	pop	{r7, pc}
 80043a0:	e000e100 	.word	0xe000e100

080043a4 <NVIC_DisableIRQ>:
  \brief   Disable External Interrupt
  \details Disables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b082      	sub	sp, #8
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	0002      	movs	r2, r0
 80043ac:	1dfb      	adds	r3, r7, #7
 80043ae:	701a      	strb	r2, [r3, #0]
  NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80043b0:	1dfb      	adds	r3, r7, #7
 80043b2:	781b      	ldrb	r3, [r3, #0]
 80043b4:	001a      	movs	r2, r3
 80043b6:	231f      	movs	r3, #31
 80043b8:	4013      	ands	r3, r2
 80043ba:	4905      	ldr	r1, [pc, #20]	; (80043d0 <NVIC_DisableIRQ+0x2c>)
 80043bc:	2201      	movs	r2, #1
 80043be:	409a      	lsls	r2, r3
 80043c0:	0013      	movs	r3, r2
 80043c2:	2280      	movs	r2, #128	; 0x80
 80043c4:	508b      	str	r3, [r1, r2]
}
 80043c6:	46c0      	nop			; (mov r8, r8)
 80043c8:	46bd      	mov	sp, r7
 80043ca:	b002      	add	sp, #8
 80043cc:	bd80      	pop	{r7, pc}
 80043ce:	46c0      	nop			; (mov r8, r8)
 80043d0:	e000e100 	.word	0xe000e100

080043d4 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80043d4:	b590      	push	{r4, r7, lr}
 80043d6:	b083      	sub	sp, #12
 80043d8:	af00      	add	r7, sp, #0
 80043da:	0002      	movs	r2, r0
 80043dc:	6039      	str	r1, [r7, #0]
 80043de:	1dfb      	adds	r3, r7, #7
 80043e0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 80043e2:	1dfb      	adds	r3, r7, #7
 80043e4:	781b      	ldrb	r3, [r3, #0]
 80043e6:	2b7f      	cmp	r3, #127	; 0x7f
 80043e8:	d932      	bls.n	8004450 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80043ea:	4a2f      	ldr	r2, [pc, #188]	; (80044a8 <NVIC_SetPriority+0xd4>)
 80043ec:	1dfb      	adds	r3, r7, #7
 80043ee:	781b      	ldrb	r3, [r3, #0]
 80043f0:	0019      	movs	r1, r3
 80043f2:	230f      	movs	r3, #15
 80043f4:	400b      	ands	r3, r1
 80043f6:	3b08      	subs	r3, #8
 80043f8:	089b      	lsrs	r3, r3, #2
 80043fa:	3306      	adds	r3, #6
 80043fc:	009b      	lsls	r3, r3, #2
 80043fe:	18d3      	adds	r3, r2, r3
 8004400:	3304      	adds	r3, #4
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	1dfa      	adds	r2, r7, #7
 8004406:	7812      	ldrb	r2, [r2, #0]
 8004408:	0011      	movs	r1, r2
 800440a:	2203      	movs	r2, #3
 800440c:	400a      	ands	r2, r1
 800440e:	00d2      	lsls	r2, r2, #3
 8004410:	21ff      	movs	r1, #255	; 0xff
 8004412:	4091      	lsls	r1, r2
 8004414:	000a      	movs	r2, r1
 8004416:	43d2      	mvns	r2, r2
 8004418:	401a      	ands	r2, r3
 800441a:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	019b      	lsls	r3, r3, #6
 8004420:	22ff      	movs	r2, #255	; 0xff
 8004422:	401a      	ands	r2, r3
 8004424:	1dfb      	adds	r3, r7, #7
 8004426:	781b      	ldrb	r3, [r3, #0]
 8004428:	0018      	movs	r0, r3
 800442a:	2303      	movs	r3, #3
 800442c:	4003      	ands	r3, r0
 800442e:	00db      	lsls	r3, r3, #3
 8004430:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004432:	481d      	ldr	r0, [pc, #116]	; (80044a8 <NVIC_SetPriority+0xd4>)
 8004434:	1dfb      	adds	r3, r7, #7
 8004436:	781b      	ldrb	r3, [r3, #0]
 8004438:	001c      	movs	r4, r3
 800443a:	230f      	movs	r3, #15
 800443c:	4023      	ands	r3, r4
 800443e:	3b08      	subs	r3, #8
 8004440:	089b      	lsrs	r3, r3, #2
 8004442:	430a      	orrs	r2, r1
 8004444:	3306      	adds	r3, #6
 8004446:	009b      	lsls	r3, r3, #2
 8004448:	18c3      	adds	r3, r0, r3
 800444a:	3304      	adds	r3, #4
 800444c:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800444e:	e027      	b.n	80044a0 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004450:	4a16      	ldr	r2, [pc, #88]	; (80044ac <NVIC_SetPriority+0xd8>)
 8004452:	1dfb      	adds	r3, r7, #7
 8004454:	781b      	ldrb	r3, [r3, #0]
 8004456:	b25b      	sxtb	r3, r3
 8004458:	089b      	lsrs	r3, r3, #2
 800445a:	33c0      	adds	r3, #192	; 0xc0
 800445c:	009b      	lsls	r3, r3, #2
 800445e:	589b      	ldr	r3, [r3, r2]
 8004460:	1dfa      	adds	r2, r7, #7
 8004462:	7812      	ldrb	r2, [r2, #0]
 8004464:	0011      	movs	r1, r2
 8004466:	2203      	movs	r2, #3
 8004468:	400a      	ands	r2, r1
 800446a:	00d2      	lsls	r2, r2, #3
 800446c:	21ff      	movs	r1, #255	; 0xff
 800446e:	4091      	lsls	r1, r2
 8004470:	000a      	movs	r2, r1
 8004472:	43d2      	mvns	r2, r2
 8004474:	401a      	ands	r2, r3
 8004476:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	019b      	lsls	r3, r3, #6
 800447c:	22ff      	movs	r2, #255	; 0xff
 800447e:	401a      	ands	r2, r3
 8004480:	1dfb      	adds	r3, r7, #7
 8004482:	781b      	ldrb	r3, [r3, #0]
 8004484:	0018      	movs	r0, r3
 8004486:	2303      	movs	r3, #3
 8004488:	4003      	ands	r3, r0
 800448a:	00db      	lsls	r3, r3, #3
 800448c:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800448e:	4807      	ldr	r0, [pc, #28]	; (80044ac <NVIC_SetPriority+0xd8>)
 8004490:	1dfb      	adds	r3, r7, #7
 8004492:	781b      	ldrb	r3, [r3, #0]
 8004494:	b25b      	sxtb	r3, r3
 8004496:	089b      	lsrs	r3, r3, #2
 8004498:	430a      	orrs	r2, r1
 800449a:	33c0      	adds	r3, #192	; 0xc0
 800449c:	009b      	lsls	r3, r3, #2
 800449e:	501a      	str	r2, [r3, r0]
}
 80044a0:	46c0      	nop			; (mov r8, r8)
 80044a2:	46bd      	mov	sp, r7
 80044a4:	b003      	add	sp, #12
 80044a6:	bd90      	pop	{r4, r7, pc}
 80044a8:	e000ed00 	.word	0xe000ed00
 80044ac:	e000e100 	.word	0xe000e100

080044b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b082      	sub	sp, #8
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	3b01      	subs	r3, #1
 80044bc:	4a0c      	ldr	r2, [pc, #48]	; (80044f0 <SysTick_Config+0x40>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d901      	bls.n	80044c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80044c2:	2301      	movs	r3, #1
 80044c4:	e010      	b.n	80044e8 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80044c6:	4b0b      	ldr	r3, [pc, #44]	; (80044f4 <SysTick_Config+0x44>)
 80044c8:	687a      	ldr	r2, [r7, #4]
 80044ca:	3a01      	subs	r2, #1
 80044cc:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80044ce:	2301      	movs	r3, #1
 80044d0:	425b      	negs	r3, r3
 80044d2:	2103      	movs	r1, #3
 80044d4:	0018      	movs	r0, r3
 80044d6:	f7ff ff7d 	bl	80043d4 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80044da:	4b06      	ldr	r3, [pc, #24]	; (80044f4 <SysTick_Config+0x44>)
 80044dc:	2200      	movs	r2, #0
 80044de:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80044e0:	4b04      	ldr	r3, [pc, #16]	; (80044f4 <SysTick_Config+0x44>)
 80044e2:	2207      	movs	r2, #7
 80044e4:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80044e6:	2300      	movs	r3, #0
}
 80044e8:	0018      	movs	r0, r3
 80044ea:	46bd      	mov	sp, r7
 80044ec:	b002      	add	sp, #8
 80044ee:	bd80      	pop	{r7, pc}
 80044f0:	00ffffff 	.word	0x00ffffff
 80044f4:	e000e010 	.word	0xe000e010

080044f8 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b084      	sub	sp, #16
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	60b9      	str	r1, [r7, #8]
 8004500:	607a      	str	r2, [r7, #4]
 8004502:	210f      	movs	r1, #15
 8004504:	187b      	adds	r3, r7, r1
 8004506:	1c02      	adds	r2, r0, #0
 8004508:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800450a:	68ba      	ldr	r2, [r7, #8]
 800450c:	187b      	adds	r3, r7, r1
 800450e:	781b      	ldrb	r3, [r3, #0]
 8004510:	b25b      	sxtb	r3, r3
 8004512:	0011      	movs	r1, r2
 8004514:	0018      	movs	r0, r3
 8004516:	f7ff ff5d 	bl	80043d4 <NVIC_SetPriority>
}
 800451a:	46c0      	nop			; (mov r8, r8)
 800451c:	46bd      	mov	sp, r7
 800451e:	b004      	add	sp, #16
 8004520:	bd80      	pop	{r7, pc}

08004522 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004522:	b580      	push	{r7, lr}
 8004524:	b082      	sub	sp, #8
 8004526:	af00      	add	r7, sp, #0
 8004528:	0002      	movs	r2, r0
 800452a:	1dfb      	adds	r3, r7, #7
 800452c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800452e:	1dfb      	adds	r3, r7, #7
 8004530:	781b      	ldrb	r3, [r3, #0]
 8004532:	b25b      	sxtb	r3, r3
 8004534:	0018      	movs	r0, r3
 8004536:	f7ff ff1f 	bl	8004378 <NVIC_EnableIRQ>
}
 800453a:	46c0      	nop			; (mov r8, r8)
 800453c:	46bd      	mov	sp, r7
 800453e:	b002      	add	sp, #8
 8004540:	bd80      	pop	{r7, pc}

08004542 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004542:	b580      	push	{r7, lr}
 8004544:	b082      	sub	sp, #8
 8004546:	af00      	add	r7, sp, #0
 8004548:	0002      	movs	r2, r0
 800454a:	1dfb      	adds	r3, r7, #7
 800454c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800454e:	1dfb      	adds	r3, r7, #7
 8004550:	781b      	ldrb	r3, [r3, #0]
 8004552:	b25b      	sxtb	r3, r3
 8004554:	0018      	movs	r0, r3
 8004556:	f7ff ff25 	bl	80043a4 <NVIC_DisableIRQ>
}
 800455a:	46c0      	nop			; (mov r8, r8)
 800455c:	46bd      	mov	sp, r7
 800455e:	b002      	add	sp, #8
 8004560:	bd80      	pop	{r7, pc}

08004562 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004562:	b580      	push	{r7, lr}
 8004564:	b082      	sub	sp, #8
 8004566:	af00      	add	r7, sp, #0
 8004568:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	0018      	movs	r0, r3
 800456e:	f7ff ff9f 	bl	80044b0 <SysTick_Config>
 8004572:	0003      	movs	r3, r0
}
 8004574:	0018      	movs	r0, r3
 8004576:	46bd      	mov	sp, r7
 8004578:	b002      	add	sp, #8
 800457a:	bd80      	pop	{r7, pc}

0800457c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b084      	sub	sp, #16
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004584:	230f      	movs	r3, #15
 8004586:	18fb      	adds	r3, r7, r3
 8004588:	2200      	movs	r2, #0
 800458a:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2225      	movs	r2, #37	; 0x25
 8004590:	5c9b      	ldrb	r3, [r3, r2]
 8004592:	b2db      	uxtb	r3, r3
 8004594:	2b02      	cmp	r3, #2
 8004596:	d007      	beq.n	80045a8 <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2204      	movs	r2, #4
 800459c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800459e:	230f      	movs	r3, #15
 80045a0:	18fb      	adds	r3, r7, r3
 80045a2:	2201      	movs	r2, #1
 80045a4:	701a      	strb	r2, [r3, #0]
 80045a6:	e02a      	b.n	80045fe <HAL_DMA_Abort_IT+0x82>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	210e      	movs	r1, #14
 80045b4:	438a      	bics	r2, r1
 80045b6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	2101      	movs	r1, #1
 80045c4:	438a      	bics	r2, r1
 80045c6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045cc:	221c      	movs	r2, #28
 80045ce:	401a      	ands	r2, r3
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d4:	2101      	movs	r1, #1
 80045d6:	4091      	lsls	r1, r2
 80045d8:	000a      	movs	r2, r1
 80045da:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2225      	movs	r2, #37	; 0x25
 80045e0:	2101      	movs	r1, #1
 80045e2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2224      	movs	r2, #36	; 0x24
 80045e8:	2100      	movs	r1, #0
 80045ea:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d004      	beq.n	80045fe <HAL_DMA_Abort_IT+0x82>
    {
      hdma->XferAbortCallback(hdma);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f8:	687a      	ldr	r2, [r7, #4]
 80045fa:	0010      	movs	r0, r2
 80045fc:	4798      	blx	r3
    }
  }
  return status;
 80045fe:	230f      	movs	r3, #15
 8004600:	18fb      	adds	r3, r7, r3
 8004602:	781b      	ldrb	r3, [r3, #0]
}
 8004604:	0018      	movs	r0, r3
 8004606:	46bd      	mov	sp, r7
 8004608:	b004      	add	sp, #16
 800460a:	bd80      	pop	{r7, pc}

0800460c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b086      	sub	sp, #24
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
 8004614:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004616:	2300      	movs	r3, #0
 8004618:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800461a:	2300      	movs	r3, #0
 800461c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800461e:	2300      	movs	r3, #0
 8004620:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8004622:	e155      	b.n	80048d0 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	2101      	movs	r1, #1
 800462a:	697a      	ldr	r2, [r7, #20]
 800462c:	4091      	lsls	r1, r2
 800462e:	000a      	movs	r2, r1
 8004630:	4013      	ands	r3, r2
 8004632:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d100      	bne.n	800463c <HAL_GPIO_Init+0x30>
 800463a:	e146      	b.n	80048ca <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	2b01      	cmp	r3, #1
 8004642:	d00b      	beq.n	800465c <HAL_GPIO_Init+0x50>
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	2b02      	cmp	r3, #2
 800464a:	d007      	beq.n	800465c <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004650:	2b11      	cmp	r3, #17
 8004652:	d003      	beq.n	800465c <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	2b12      	cmp	r3, #18
 800465a:	d130      	bne.n	80046be <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	005b      	lsls	r3, r3, #1
 8004666:	2203      	movs	r2, #3
 8004668:	409a      	lsls	r2, r3
 800466a:	0013      	movs	r3, r2
 800466c:	43da      	mvns	r2, r3
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	4013      	ands	r3, r2
 8004672:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	68da      	ldr	r2, [r3, #12]
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	005b      	lsls	r3, r3, #1
 800467c:	409a      	lsls	r2, r3
 800467e:	0013      	movs	r3, r2
 8004680:	693a      	ldr	r2, [r7, #16]
 8004682:	4313      	orrs	r3, r2
 8004684:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	693a      	ldr	r2, [r7, #16]
 800468a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004692:	2201      	movs	r2, #1
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	409a      	lsls	r2, r3
 8004698:	0013      	movs	r3, r2
 800469a:	43da      	mvns	r2, r3
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	4013      	ands	r3, r2
 80046a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	091b      	lsrs	r3, r3, #4
 80046a8:	2201      	movs	r2, #1
 80046aa:	401a      	ands	r2, r3
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	409a      	lsls	r2, r3
 80046b0:	0013      	movs	r3, r2
 80046b2:	693a      	ldr	r2, [r7, #16]
 80046b4:	4313      	orrs	r3, r2
 80046b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	693a      	ldr	r2, [r7, #16]
 80046bc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	68db      	ldr	r3, [r3, #12]
 80046c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	005b      	lsls	r3, r3, #1
 80046c8:	2203      	movs	r2, #3
 80046ca:	409a      	lsls	r2, r3
 80046cc:	0013      	movs	r3, r2
 80046ce:	43da      	mvns	r2, r3
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	4013      	ands	r3, r2
 80046d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	689a      	ldr	r2, [r3, #8]
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	005b      	lsls	r3, r3, #1
 80046de:	409a      	lsls	r2, r3
 80046e0:	0013      	movs	r3, r2
 80046e2:	693a      	ldr	r2, [r7, #16]
 80046e4:	4313      	orrs	r3, r2
 80046e6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	693a      	ldr	r2, [r7, #16]
 80046ec:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	2b02      	cmp	r3, #2
 80046f4:	d003      	beq.n	80046fe <HAL_GPIO_Init+0xf2>
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	2b12      	cmp	r3, #18
 80046fc:	d123      	bne.n	8004746 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	08da      	lsrs	r2, r3, #3
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	3208      	adds	r2, #8
 8004706:	0092      	lsls	r2, r2, #2
 8004708:	58d3      	ldr	r3, [r2, r3]
 800470a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U));
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	2207      	movs	r2, #7
 8004710:	4013      	ands	r3, r2
 8004712:	009b      	lsls	r3, r3, #2
 8004714:	220f      	movs	r2, #15
 8004716:	409a      	lsls	r2, r3
 8004718:	0013      	movs	r3, r2
 800471a:	43da      	mvns	r2, r3
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	4013      	ands	r3, r2
 8004720:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	691a      	ldr	r2, [r3, #16]
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	2107      	movs	r1, #7
 800472a:	400b      	ands	r3, r1
 800472c:	009b      	lsls	r3, r3, #2
 800472e:	409a      	lsls	r2, r3
 8004730:	0013      	movs	r3, r2
 8004732:	693a      	ldr	r2, [r7, #16]
 8004734:	4313      	orrs	r3, r2
 8004736:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	08da      	lsrs	r2, r3, #3
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	3208      	adds	r2, #8
 8004740:	0092      	lsls	r2, r2, #2
 8004742:	6939      	ldr	r1, [r7, #16]
 8004744:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	005b      	lsls	r3, r3, #1
 8004750:	2203      	movs	r2, #3
 8004752:	409a      	lsls	r2, r3
 8004754:	0013      	movs	r3, r2
 8004756:	43da      	mvns	r2, r3
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	4013      	ands	r3, r2
 800475c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	2203      	movs	r2, #3
 8004764:	401a      	ands	r2, r3
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	005b      	lsls	r3, r3, #1
 800476a:	409a      	lsls	r2, r3
 800476c:	0013      	movs	r3, r2
 800476e:	693a      	ldr	r2, [r7, #16]
 8004770:	4313      	orrs	r3, r2
 8004772:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	693a      	ldr	r2, [r7, #16]
 8004778:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	685a      	ldr	r2, [r3, #4]
 800477e:	2380      	movs	r3, #128	; 0x80
 8004780:	055b      	lsls	r3, r3, #21
 8004782:	4013      	ands	r3, r2
 8004784:	d100      	bne.n	8004788 <HAL_GPIO_Init+0x17c>
 8004786:	e0a0      	b.n	80048ca <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004788:	4b57      	ldr	r3, [pc, #348]	; (80048e8 <HAL_GPIO_Init+0x2dc>)
 800478a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800478c:	4b56      	ldr	r3, [pc, #344]	; (80048e8 <HAL_GPIO_Init+0x2dc>)
 800478e:	2101      	movs	r1, #1
 8004790:	430a      	orrs	r2, r1
 8004792:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8004794:	4a55      	ldr	r2, [pc, #340]	; (80048ec <HAL_GPIO_Init+0x2e0>)
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	089b      	lsrs	r3, r3, #2
 800479a:	3302      	adds	r3, #2
 800479c:	009b      	lsls	r3, r3, #2
 800479e:	589b      	ldr	r3, [r3, r2]
 80047a0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	2203      	movs	r2, #3
 80047a6:	4013      	ands	r3, r2
 80047a8:	009b      	lsls	r3, r3, #2
 80047aa:	220f      	movs	r2, #15
 80047ac:	409a      	lsls	r2, r3
 80047ae:	0013      	movs	r3, r2
 80047b0:	43da      	mvns	r2, r3
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	4013      	ands	r3, r2
 80047b6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80047b8:	687a      	ldr	r2, [r7, #4]
 80047ba:	23a0      	movs	r3, #160	; 0xa0
 80047bc:	05db      	lsls	r3, r3, #23
 80047be:	429a      	cmp	r2, r3
 80047c0:	d01f      	beq.n	8004802 <HAL_GPIO_Init+0x1f6>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	4a4a      	ldr	r2, [pc, #296]	; (80048f0 <HAL_GPIO_Init+0x2e4>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d019      	beq.n	80047fe <HAL_GPIO_Init+0x1f2>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	4a49      	ldr	r2, [pc, #292]	; (80048f4 <HAL_GPIO_Init+0x2e8>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d013      	beq.n	80047fa <HAL_GPIO_Init+0x1ee>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	4a48      	ldr	r2, [pc, #288]	; (80048f8 <HAL_GPIO_Init+0x2ec>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d00d      	beq.n	80047f6 <HAL_GPIO_Init+0x1ea>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	4a47      	ldr	r2, [pc, #284]	; (80048fc <HAL_GPIO_Init+0x2f0>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d007      	beq.n	80047f2 <HAL_GPIO_Init+0x1e6>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	4a46      	ldr	r2, [pc, #280]	; (8004900 <HAL_GPIO_Init+0x2f4>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d101      	bne.n	80047ee <HAL_GPIO_Init+0x1e2>
 80047ea:	2305      	movs	r3, #5
 80047ec:	e00a      	b.n	8004804 <HAL_GPIO_Init+0x1f8>
 80047ee:	2306      	movs	r3, #6
 80047f0:	e008      	b.n	8004804 <HAL_GPIO_Init+0x1f8>
 80047f2:	2304      	movs	r3, #4
 80047f4:	e006      	b.n	8004804 <HAL_GPIO_Init+0x1f8>
 80047f6:	2303      	movs	r3, #3
 80047f8:	e004      	b.n	8004804 <HAL_GPIO_Init+0x1f8>
 80047fa:	2302      	movs	r3, #2
 80047fc:	e002      	b.n	8004804 <HAL_GPIO_Init+0x1f8>
 80047fe:	2301      	movs	r3, #1
 8004800:	e000      	b.n	8004804 <HAL_GPIO_Init+0x1f8>
 8004802:	2300      	movs	r3, #0
 8004804:	697a      	ldr	r2, [r7, #20]
 8004806:	2103      	movs	r1, #3
 8004808:	400a      	ands	r2, r1
 800480a:	0092      	lsls	r2, r2, #2
 800480c:	4093      	lsls	r3, r2
 800480e:	693a      	ldr	r2, [r7, #16]
 8004810:	4313      	orrs	r3, r2
 8004812:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004814:	4935      	ldr	r1, [pc, #212]	; (80048ec <HAL_GPIO_Init+0x2e0>)
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	089b      	lsrs	r3, r3, #2
 800481a:	3302      	adds	r3, #2
 800481c:	009b      	lsls	r3, r3, #2
 800481e:	693a      	ldr	r2, [r7, #16]
 8004820:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004822:	4b38      	ldr	r3, [pc, #224]	; (8004904 <HAL_GPIO_Init+0x2f8>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	43da      	mvns	r2, r3
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	4013      	ands	r3, r2
 8004830:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	685a      	ldr	r2, [r3, #4]
 8004836:	2380      	movs	r3, #128	; 0x80
 8004838:	025b      	lsls	r3, r3, #9
 800483a:	4013      	ands	r3, r2
 800483c:	d003      	beq.n	8004846 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800483e:	693a      	ldr	r2, [r7, #16]
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	4313      	orrs	r3, r2
 8004844:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004846:	4b2f      	ldr	r3, [pc, #188]	; (8004904 <HAL_GPIO_Init+0x2f8>)
 8004848:	693a      	ldr	r2, [r7, #16]
 800484a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800484c:	4b2d      	ldr	r3, [pc, #180]	; (8004904 <HAL_GPIO_Init+0x2f8>)
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	43da      	mvns	r2, r3
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	4013      	ands	r3, r2
 800485a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	685a      	ldr	r2, [r3, #4]
 8004860:	2380      	movs	r3, #128	; 0x80
 8004862:	029b      	lsls	r3, r3, #10
 8004864:	4013      	ands	r3, r2
 8004866:	d003      	beq.n	8004870 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8004868:	693a      	ldr	r2, [r7, #16]
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	4313      	orrs	r3, r2
 800486e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004870:	4b24      	ldr	r3, [pc, #144]	; (8004904 <HAL_GPIO_Init+0x2f8>)
 8004872:	693a      	ldr	r2, [r7, #16]
 8004874:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004876:	4b23      	ldr	r3, [pc, #140]	; (8004904 <HAL_GPIO_Init+0x2f8>)
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	43da      	mvns	r2, r3
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	4013      	ands	r3, r2
 8004884:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	685a      	ldr	r2, [r3, #4]
 800488a:	2380      	movs	r3, #128	; 0x80
 800488c:	035b      	lsls	r3, r3, #13
 800488e:	4013      	ands	r3, r2
 8004890:	d003      	beq.n	800489a <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8004892:	693a      	ldr	r2, [r7, #16]
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	4313      	orrs	r3, r2
 8004898:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800489a:	4b1a      	ldr	r3, [pc, #104]	; (8004904 <HAL_GPIO_Init+0x2f8>)
 800489c:	693a      	ldr	r2, [r7, #16]
 800489e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80048a0:	4b18      	ldr	r3, [pc, #96]	; (8004904 <HAL_GPIO_Init+0x2f8>)
 80048a2:	68db      	ldr	r3, [r3, #12]
 80048a4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	43da      	mvns	r2, r3
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	4013      	ands	r3, r2
 80048ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	685a      	ldr	r2, [r3, #4]
 80048b4:	2380      	movs	r3, #128	; 0x80
 80048b6:	039b      	lsls	r3, r3, #14
 80048b8:	4013      	ands	r3, r2
 80048ba:	d003      	beq.n	80048c4 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 80048bc:	693a      	ldr	r2, [r7, #16]
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	4313      	orrs	r3, r2
 80048c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80048c4:	4b0f      	ldr	r3, [pc, #60]	; (8004904 <HAL_GPIO_Init+0x2f8>)
 80048c6:	693a      	ldr	r2, [r7, #16]
 80048c8:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	3301      	adds	r3, #1
 80048ce:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	681a      	ldr	r2, [r3, #0]
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	40da      	lsrs	r2, r3
 80048d8:	1e13      	subs	r3, r2, #0
 80048da:	d000      	beq.n	80048de <HAL_GPIO_Init+0x2d2>
 80048dc:	e6a2      	b.n	8004624 <HAL_GPIO_Init+0x18>
  }
}
 80048de:	46c0      	nop			; (mov r8, r8)
 80048e0:	46bd      	mov	sp, r7
 80048e2:	b006      	add	sp, #24
 80048e4:	bd80      	pop	{r7, pc}
 80048e6:	46c0      	nop			; (mov r8, r8)
 80048e8:	40021000 	.word	0x40021000
 80048ec:	40010000 	.word	0x40010000
 80048f0:	50000400 	.word	0x50000400
 80048f4:	50000800 	.word	0x50000800
 80048f8:	50000c00 	.word	0x50000c00
 80048fc:	50001000 	.word	0x50001000
 8004900:	50001c00 	.word	0x50001c00
 8004904:	40010400 	.word	0x40010400

08004908 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b082      	sub	sp, #8
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
 8004910:	0008      	movs	r0, r1
 8004912:	0011      	movs	r1, r2
 8004914:	1cbb      	adds	r3, r7, #2
 8004916:	1c02      	adds	r2, r0, #0
 8004918:	801a      	strh	r2, [r3, #0]
 800491a:	1c7b      	adds	r3, r7, #1
 800491c:	1c0a      	adds	r2, r1, #0
 800491e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004920:	1c7b      	adds	r3, r7, #1
 8004922:	781b      	ldrb	r3, [r3, #0]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d004      	beq.n	8004932 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004928:	1cbb      	adds	r3, r7, #2
 800492a:	881a      	ldrh	r2, [r3, #0]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8004930:	e003      	b.n	800493a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8004932:	1cbb      	adds	r3, r7, #2
 8004934:	881a      	ldrh	r2, [r3, #0]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	629a      	str	r2, [r3, #40]	; 0x28
}
 800493a:	46c0      	nop			; (mov r8, r8)
 800493c:	46bd      	mov	sp, r7
 800493e:	b002      	add	sp, #8
 8004940:	bd80      	pop	{r7, pc}
	...

08004944 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b082      	sub	sp, #8
 8004948:	af00      	add	r7, sp, #0
 800494a:	0002      	movs	r2, r0
 800494c:	1dbb      	adds	r3, r7, #6
 800494e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004950:	4b09      	ldr	r3, [pc, #36]	; (8004978 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8004952:	695b      	ldr	r3, [r3, #20]
 8004954:	1dba      	adds	r2, r7, #6
 8004956:	8812      	ldrh	r2, [r2, #0]
 8004958:	4013      	ands	r3, r2
 800495a:	d008      	beq.n	800496e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800495c:	4b06      	ldr	r3, [pc, #24]	; (8004978 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800495e:	1dba      	adds	r2, r7, #6
 8004960:	8812      	ldrh	r2, [r2, #0]
 8004962:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004964:	1dbb      	adds	r3, r7, #6
 8004966:	881b      	ldrh	r3, [r3, #0]
 8004968:	0018      	movs	r0, r3
 800496a:	f019 fb97 	bl	801e09c <HAL_GPIO_EXTI_Callback>
  }
}
 800496e:	46c0      	nop			; (mov r8, r8)
 8004970:	46bd      	mov	sp, r7
 8004972:	b002      	add	sp, #8
 8004974:	bd80      	pop	{r7, pc}
 8004976:	46c0      	nop			; (mov r8, r8)
 8004978:	40010400 	.word	0x40010400

0800497c <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 8004980:	4b04      	ldr	r3, [pc, #16]	; (8004994 <HAL_PWR_EnableBkUpAccess+0x18>)
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	4b03      	ldr	r3, [pc, #12]	; (8004994 <HAL_PWR_EnableBkUpAccess+0x18>)
 8004986:	2180      	movs	r1, #128	; 0x80
 8004988:	0049      	lsls	r1, r1, #1
 800498a:	430a      	orrs	r2, r1
 800498c:	601a      	str	r2, [r3, #0]
}
 800498e:	46c0      	nop			; (mov r8, r8)
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}
 8004994:	40007000 	.word	0x40007000

08004998 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b084      	sub	sp, #16
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
 80049a0:	000a      	movs	r2, r1
 80049a2:	1cfb      	adds	r3, r7, #3
 80049a4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 80049a6:	2300      	movs	r3, #0
 80049a8:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 80049aa:	4b13      	ldr	r3, [pc, #76]	; (80049f8 <HAL_PWR_EnterSTOPMode+0x60>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	60fb      	str	r3, [r7, #12]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2203      	movs	r2, #3
 80049b4:	4393      	bics	r3, r2
 80049b6:	60fb      	str	r3, [r7, #12]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 80049b8:	68fa      	ldr	r2, [r7, #12]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	4313      	orrs	r3, r2
 80049be:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  PWR->CR = tmpreg;
 80049c0:	4b0d      	ldr	r3, [pc, #52]	; (80049f8 <HAL_PWR_EnterSTOPMode+0x60>)
 80049c2:	68fa      	ldr	r2, [r7, #12]
 80049c4:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80049c6:	4b0d      	ldr	r3, [pc, #52]	; (80049fc <HAL_PWR_EnterSTOPMode+0x64>)
 80049c8:	691a      	ldr	r2, [r3, #16]
 80049ca:	4b0c      	ldr	r3, [pc, #48]	; (80049fc <HAL_PWR_EnterSTOPMode+0x64>)
 80049cc:	2104      	movs	r1, #4
 80049ce:	430a      	orrs	r2, r1
 80049d0:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 80049d2:	1cfb      	adds	r3, r7, #3
 80049d4:	781b      	ldrb	r3, [r3, #0]
 80049d6:	2b01      	cmp	r3, #1
 80049d8:	d101      	bne.n	80049de <HAL_PWR_EnterSTOPMode+0x46>
  \brief   Wait For Interrupt
  \details Wait For Interrupt is a hint instruction that suspends execution until one of a number of events occurs.
 */
__attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
 80049da:	bf30      	wfi
 80049dc:	e002      	b.n	80049e4 <HAL_PWR_EnterSTOPMode+0x4c>
  \brief   Send Event
  \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 */
__attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
{
  __ASM volatile ("sev");
 80049de:	bf40      	sev
  __ASM volatile ("wfe");
 80049e0:	bf20      	wfe
 80049e2:	bf20      	wfe
    __WFE();
    __WFE();
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80049e4:	4b05      	ldr	r3, [pc, #20]	; (80049fc <HAL_PWR_EnterSTOPMode+0x64>)
 80049e6:	691a      	ldr	r2, [r3, #16]
 80049e8:	4b04      	ldr	r3, [pc, #16]	; (80049fc <HAL_PWR_EnterSTOPMode+0x64>)
 80049ea:	2104      	movs	r1, #4
 80049ec:	438a      	bics	r2, r1
 80049ee:	611a      	str	r2, [r3, #16]

}
 80049f0:	46c0      	nop			; (mov r8, r8)
 80049f2:	46bd      	mov	sp, r7
 80049f4:	b004      	add	sp, #16
 80049f6:	bd80      	pop	{r7, pc}
 80049f8:	40007000 	.word	0x40007000
 80049fc:	e000ed00 	.word	0xe000ed00

08004a00 <HAL_PWREx_EnableFastWakeUp>:
  *        Means, when ULP = 1 and FWU = 1 :VREFINT startup time is ignored when 
  *        exiting from low power mode.
  * @retval None
  */
void HAL_PWREx_EnableFastWakeUp(void)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	af00      	add	r7, sp, #0
  /* Enable the fast wake up */
  SET_BIT(PWR->CR, PWR_CR_FWU);
 8004a04:	4b04      	ldr	r3, [pc, #16]	; (8004a18 <HAL_PWREx_EnableFastWakeUp+0x18>)
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	4b03      	ldr	r3, [pc, #12]	; (8004a18 <HAL_PWREx_EnableFastWakeUp+0x18>)
 8004a0a:	2180      	movs	r1, #128	; 0x80
 8004a0c:	00c9      	lsls	r1, r1, #3
 8004a0e:	430a      	orrs	r2, r1
 8004a10:	601a      	str	r2, [r3, #0]
}
 8004a12:	46c0      	nop			; (mov r8, r8)
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}
 8004a18:	40007000 	.word	0x40007000

08004a1c <HAL_PWREx_EnableUltraLowPower>:
/**
  * @brief  Enables the Ultra Low Power mode
  * @retval None
  */
void HAL_PWREx_EnableUltraLowPower(void)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	af00      	add	r7, sp, #0
  /* Enable the Ultra Low Power mode */
  SET_BIT(PWR->CR, PWR_CR_ULP);
 8004a20:	4b04      	ldr	r3, [pc, #16]	; (8004a34 <HAL_PWREx_EnableUltraLowPower+0x18>)
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	4b03      	ldr	r3, [pc, #12]	; (8004a34 <HAL_PWREx_EnableUltraLowPower+0x18>)
 8004a26:	2180      	movs	r1, #128	; 0x80
 8004a28:	0089      	lsls	r1, r1, #2
 8004a2a:	430a      	orrs	r2, r1
 8004a2c:	601a      	str	r2, [r3, #0]
}
 8004a2e:	46c0      	nop			; (mov r8, r8)
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}
 8004a34:	40007000 	.word	0x40007000

08004a38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a38:	b5b0      	push	{r4, r5, r7, lr}
 8004a3a:	b08a      	sub	sp, #40	; 0x28
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d102      	bne.n	8004a4c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	f000 fbbc 	bl	80051c4 <HAL_RCC_OscConfig+0x78c>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a4c:	4bc8      	ldr	r3, [pc, #800]	; (8004d70 <HAL_RCC_OscConfig+0x338>)
 8004a4e:	68db      	ldr	r3, [r3, #12]
 8004a50:	220c      	movs	r2, #12
 8004a52:	4013      	ands	r3, r2
 8004a54:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a56:	4bc6      	ldr	r3, [pc, #792]	; (8004d70 <HAL_RCC_OscConfig+0x338>)
 8004a58:	68da      	ldr	r2, [r3, #12]
 8004a5a:	2380      	movs	r3, #128	; 0x80
 8004a5c:	025b      	lsls	r3, r3, #9
 8004a5e:	4013      	ands	r3, r2
 8004a60:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	2201      	movs	r2, #1
 8004a68:	4013      	ands	r3, r2
 8004a6a:	d100      	bne.n	8004a6e <HAL_RCC_OscConfig+0x36>
 8004a6c:	e07e      	b.n	8004b6c <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a6e:	69fb      	ldr	r3, [r7, #28]
 8004a70:	2b08      	cmp	r3, #8
 8004a72:	d007      	beq.n	8004a84 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004a74:	69fb      	ldr	r3, [r7, #28]
 8004a76:	2b0c      	cmp	r3, #12
 8004a78:	d112      	bne.n	8004aa0 <HAL_RCC_OscConfig+0x68>
 8004a7a:	69ba      	ldr	r2, [r7, #24]
 8004a7c:	2380      	movs	r3, #128	; 0x80
 8004a7e:	025b      	lsls	r3, r3, #9
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d10d      	bne.n	8004aa0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a84:	4bba      	ldr	r3, [pc, #744]	; (8004d70 <HAL_RCC_OscConfig+0x338>)
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	2380      	movs	r3, #128	; 0x80
 8004a8a:	029b      	lsls	r3, r3, #10
 8004a8c:	4013      	ands	r3, r2
 8004a8e:	d100      	bne.n	8004a92 <HAL_RCC_OscConfig+0x5a>
 8004a90:	e06b      	b.n	8004b6a <HAL_RCC_OscConfig+0x132>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d167      	bne.n	8004b6a <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	f000 fb92 	bl	80051c4 <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	685a      	ldr	r2, [r3, #4]
 8004aa4:	2380      	movs	r3, #128	; 0x80
 8004aa6:	025b      	lsls	r3, r3, #9
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d107      	bne.n	8004abc <HAL_RCC_OscConfig+0x84>
 8004aac:	4bb0      	ldr	r3, [pc, #704]	; (8004d70 <HAL_RCC_OscConfig+0x338>)
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	4baf      	ldr	r3, [pc, #700]	; (8004d70 <HAL_RCC_OscConfig+0x338>)
 8004ab2:	2180      	movs	r1, #128	; 0x80
 8004ab4:	0249      	lsls	r1, r1, #9
 8004ab6:	430a      	orrs	r2, r1
 8004ab8:	601a      	str	r2, [r3, #0]
 8004aba:	e027      	b.n	8004b0c <HAL_RCC_OscConfig+0xd4>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	685a      	ldr	r2, [r3, #4]
 8004ac0:	23a0      	movs	r3, #160	; 0xa0
 8004ac2:	02db      	lsls	r3, r3, #11
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	d10e      	bne.n	8004ae6 <HAL_RCC_OscConfig+0xae>
 8004ac8:	4ba9      	ldr	r3, [pc, #676]	; (8004d70 <HAL_RCC_OscConfig+0x338>)
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	4ba8      	ldr	r3, [pc, #672]	; (8004d70 <HAL_RCC_OscConfig+0x338>)
 8004ace:	2180      	movs	r1, #128	; 0x80
 8004ad0:	02c9      	lsls	r1, r1, #11
 8004ad2:	430a      	orrs	r2, r1
 8004ad4:	601a      	str	r2, [r3, #0]
 8004ad6:	4ba6      	ldr	r3, [pc, #664]	; (8004d70 <HAL_RCC_OscConfig+0x338>)
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	4ba5      	ldr	r3, [pc, #660]	; (8004d70 <HAL_RCC_OscConfig+0x338>)
 8004adc:	2180      	movs	r1, #128	; 0x80
 8004ade:	0249      	lsls	r1, r1, #9
 8004ae0:	430a      	orrs	r2, r1
 8004ae2:	601a      	str	r2, [r3, #0]
 8004ae4:	e012      	b.n	8004b0c <HAL_RCC_OscConfig+0xd4>
 8004ae6:	4ba2      	ldr	r3, [pc, #648]	; (8004d70 <HAL_RCC_OscConfig+0x338>)
 8004ae8:	681a      	ldr	r2, [r3, #0]
 8004aea:	4ba1      	ldr	r3, [pc, #644]	; (8004d70 <HAL_RCC_OscConfig+0x338>)
 8004aec:	49a1      	ldr	r1, [pc, #644]	; (8004d74 <HAL_RCC_OscConfig+0x33c>)
 8004aee:	400a      	ands	r2, r1
 8004af0:	601a      	str	r2, [r3, #0]
 8004af2:	4b9f      	ldr	r3, [pc, #636]	; (8004d70 <HAL_RCC_OscConfig+0x338>)
 8004af4:	681a      	ldr	r2, [r3, #0]
 8004af6:	2380      	movs	r3, #128	; 0x80
 8004af8:	025b      	lsls	r3, r3, #9
 8004afa:	4013      	ands	r3, r2
 8004afc:	60fb      	str	r3, [r7, #12]
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	4b9b      	ldr	r3, [pc, #620]	; (8004d70 <HAL_RCC_OscConfig+0x338>)
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	4b9a      	ldr	r3, [pc, #616]	; (8004d70 <HAL_RCC_OscConfig+0x338>)
 8004b06:	499c      	ldr	r1, [pc, #624]	; (8004d78 <HAL_RCC_OscConfig+0x340>)
 8004b08:	400a      	ands	r2, r1
 8004b0a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d015      	beq.n	8004b40 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b14:	f7ff f99a 	bl	8003e4c <HAL_GetTick>
 8004b18:	0003      	movs	r3, r0
 8004b1a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004b1c:	e009      	b.n	8004b32 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b1e:	f7ff f995 	bl	8003e4c <HAL_GetTick>
 8004b22:	0002      	movs	r2, r0
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	1ad3      	subs	r3, r2, r3
 8004b28:	2b64      	cmp	r3, #100	; 0x64
 8004b2a:	d902      	bls.n	8004b32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004b2c:	2303      	movs	r3, #3
 8004b2e:	f000 fb49 	bl	80051c4 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004b32:	4b8f      	ldr	r3, [pc, #572]	; (8004d70 <HAL_RCC_OscConfig+0x338>)
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	2380      	movs	r3, #128	; 0x80
 8004b38:	029b      	lsls	r3, r3, #10
 8004b3a:	4013      	ands	r3, r2
 8004b3c:	d0ef      	beq.n	8004b1e <HAL_RCC_OscConfig+0xe6>
 8004b3e:	e015      	b.n	8004b6c <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b40:	f7ff f984 	bl	8003e4c <HAL_GetTick>
 8004b44:	0003      	movs	r3, r0
 8004b46:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004b48:	e008      	b.n	8004b5c <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b4a:	f7ff f97f 	bl	8003e4c <HAL_GetTick>
 8004b4e:	0002      	movs	r2, r0
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	1ad3      	subs	r3, r2, r3
 8004b54:	2b64      	cmp	r3, #100	; 0x64
 8004b56:	d901      	bls.n	8004b5c <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8004b58:	2303      	movs	r3, #3
 8004b5a:	e333      	b.n	80051c4 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004b5c:	4b84      	ldr	r3, [pc, #528]	; (8004d70 <HAL_RCC_OscConfig+0x338>)
 8004b5e:	681a      	ldr	r2, [r3, #0]
 8004b60:	2380      	movs	r3, #128	; 0x80
 8004b62:	029b      	lsls	r3, r3, #10
 8004b64:	4013      	ands	r3, r2
 8004b66:	d1f0      	bne.n	8004b4a <HAL_RCC_OscConfig+0x112>
 8004b68:	e000      	b.n	8004b6c <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b6a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	2202      	movs	r2, #2
 8004b72:	4013      	ands	r3, r2
 8004b74:	d100      	bne.n	8004b78 <HAL_RCC_OscConfig+0x140>
 8004b76:	e098      	b.n	8004caa <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	68db      	ldr	r3, [r3, #12]
 8004b7c:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8004b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b80:	2220      	movs	r2, #32
 8004b82:	4013      	ands	r3, r2
 8004b84:	d009      	beq.n	8004b9a <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8004b86:	4b7a      	ldr	r3, [pc, #488]	; (8004d70 <HAL_RCC_OscConfig+0x338>)
 8004b88:	681a      	ldr	r2, [r3, #0]
 8004b8a:	4b79      	ldr	r3, [pc, #484]	; (8004d70 <HAL_RCC_OscConfig+0x338>)
 8004b8c:	2120      	movs	r1, #32
 8004b8e:	430a      	orrs	r2, r1
 8004b90:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8004b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b94:	2220      	movs	r2, #32
 8004b96:	4393      	bics	r3, r2
 8004b98:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004b9a:	69fb      	ldr	r3, [r7, #28]
 8004b9c:	2b04      	cmp	r3, #4
 8004b9e:	d005      	beq.n	8004bac <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004ba0:	69fb      	ldr	r3, [r7, #28]
 8004ba2:	2b0c      	cmp	r3, #12
 8004ba4:	d13d      	bne.n	8004c22 <HAL_RCC_OscConfig+0x1ea>
 8004ba6:	69bb      	ldr	r3, [r7, #24]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d13a      	bne.n	8004c22 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8004bac:	4b70      	ldr	r3, [pc, #448]	; (8004d70 <HAL_RCC_OscConfig+0x338>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	2204      	movs	r2, #4
 8004bb2:	4013      	ands	r3, r2
 8004bb4:	d004      	beq.n	8004bc0 <HAL_RCC_OscConfig+0x188>
 8004bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d101      	bne.n	8004bc0 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	e301      	b.n	80051c4 <HAL_RCC_OscConfig+0x78c>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bc0:	4b6b      	ldr	r3, [pc, #428]	; (8004d70 <HAL_RCC_OscConfig+0x338>)
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	4a6d      	ldr	r2, [pc, #436]	; (8004d7c <HAL_RCC_OscConfig+0x344>)
 8004bc6:	4013      	ands	r3, r2
 8004bc8:	0019      	movs	r1, r3
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	691b      	ldr	r3, [r3, #16]
 8004bce:	021a      	lsls	r2, r3, #8
 8004bd0:	4b67      	ldr	r3, [pc, #412]	; (8004d70 <HAL_RCC_OscConfig+0x338>)
 8004bd2:	430a      	orrs	r2, r1
 8004bd4:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004bd6:	4b66      	ldr	r3, [pc, #408]	; (8004d70 <HAL_RCC_OscConfig+0x338>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	2209      	movs	r2, #9
 8004bdc:	4393      	bics	r3, r2
 8004bde:	0019      	movs	r1, r3
 8004be0:	4b63      	ldr	r3, [pc, #396]	; (8004d70 <HAL_RCC_OscConfig+0x338>)
 8004be2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004be4:	430a      	orrs	r2, r1
 8004be6:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004be8:	f000 fc20 	bl	800542c <HAL_RCC_GetSysClockFreq>
 8004bec:	0001      	movs	r1, r0
 8004bee:	4b60      	ldr	r3, [pc, #384]	; (8004d70 <HAL_RCC_OscConfig+0x338>)
 8004bf0:	68db      	ldr	r3, [r3, #12]
 8004bf2:	091b      	lsrs	r3, r3, #4
 8004bf4:	220f      	movs	r2, #15
 8004bf6:	4013      	ands	r3, r2
 8004bf8:	4a61      	ldr	r2, [pc, #388]	; (8004d80 <HAL_RCC_OscConfig+0x348>)
 8004bfa:	5cd3      	ldrb	r3, [r2, r3]
 8004bfc:	000a      	movs	r2, r1
 8004bfe:	40da      	lsrs	r2, r3
 8004c00:	4b60      	ldr	r3, [pc, #384]	; (8004d84 <HAL_RCC_OscConfig+0x34c>)
 8004c02:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8004c04:	2513      	movs	r5, #19
 8004c06:	197c      	adds	r4, r7, r5
 8004c08:	2000      	movs	r0, #0
 8004c0a:	f7ff f8eb 	bl	8003de4 <HAL_InitTick>
 8004c0e:	0003      	movs	r3, r0
 8004c10:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8004c12:	197b      	adds	r3, r7, r5
 8004c14:	781b      	ldrb	r3, [r3, #0]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d047      	beq.n	8004caa <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8004c1a:	2313      	movs	r3, #19
 8004c1c:	18fb      	adds	r3, r7, r3
 8004c1e:	781b      	ldrb	r3, [r3, #0]
 8004c20:	e2d0      	b.n	80051c4 <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8004c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d027      	beq.n	8004c78 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004c28:	4b51      	ldr	r3, [pc, #324]	; (8004d70 <HAL_RCC_OscConfig+0x338>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	2209      	movs	r2, #9
 8004c2e:	4393      	bics	r3, r2
 8004c30:	0019      	movs	r1, r3
 8004c32:	4b4f      	ldr	r3, [pc, #316]	; (8004d70 <HAL_RCC_OscConfig+0x338>)
 8004c34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c36:	430a      	orrs	r2, r1
 8004c38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c3a:	f7ff f907 	bl	8003e4c <HAL_GetTick>
 8004c3e:	0003      	movs	r3, r0
 8004c40:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004c42:	e008      	b.n	8004c56 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c44:	f7ff f902 	bl	8003e4c <HAL_GetTick>
 8004c48:	0002      	movs	r2, r0
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	1ad3      	subs	r3, r2, r3
 8004c4e:	2b02      	cmp	r3, #2
 8004c50:	d901      	bls.n	8004c56 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8004c52:	2303      	movs	r3, #3
 8004c54:	e2b6      	b.n	80051c4 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004c56:	4b46      	ldr	r3, [pc, #280]	; (8004d70 <HAL_RCC_OscConfig+0x338>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	2204      	movs	r2, #4
 8004c5c:	4013      	ands	r3, r2
 8004c5e:	d0f1      	beq.n	8004c44 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c60:	4b43      	ldr	r3, [pc, #268]	; (8004d70 <HAL_RCC_OscConfig+0x338>)
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	4a45      	ldr	r2, [pc, #276]	; (8004d7c <HAL_RCC_OscConfig+0x344>)
 8004c66:	4013      	ands	r3, r2
 8004c68:	0019      	movs	r1, r3
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	691b      	ldr	r3, [r3, #16]
 8004c6e:	021a      	lsls	r2, r3, #8
 8004c70:	4b3f      	ldr	r3, [pc, #252]	; (8004d70 <HAL_RCC_OscConfig+0x338>)
 8004c72:	430a      	orrs	r2, r1
 8004c74:	605a      	str	r2, [r3, #4]
 8004c76:	e018      	b.n	8004caa <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c78:	4b3d      	ldr	r3, [pc, #244]	; (8004d70 <HAL_RCC_OscConfig+0x338>)
 8004c7a:	681a      	ldr	r2, [r3, #0]
 8004c7c:	4b3c      	ldr	r3, [pc, #240]	; (8004d70 <HAL_RCC_OscConfig+0x338>)
 8004c7e:	2101      	movs	r1, #1
 8004c80:	438a      	bics	r2, r1
 8004c82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c84:	f7ff f8e2 	bl	8003e4c <HAL_GetTick>
 8004c88:	0003      	movs	r3, r0
 8004c8a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004c8c:	e008      	b.n	8004ca0 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c8e:	f7ff f8dd 	bl	8003e4c <HAL_GetTick>
 8004c92:	0002      	movs	r2, r0
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	1ad3      	subs	r3, r2, r3
 8004c98:	2b02      	cmp	r3, #2
 8004c9a:	d901      	bls.n	8004ca0 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8004c9c:	2303      	movs	r3, #3
 8004c9e:	e291      	b.n	80051c4 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004ca0:	4b33      	ldr	r3, [pc, #204]	; (8004d70 <HAL_RCC_OscConfig+0x338>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	2204      	movs	r2, #4
 8004ca6:	4013      	ands	r3, r2
 8004ca8:	d1f1      	bne.n	8004c8e <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	2210      	movs	r2, #16
 8004cb0:	4013      	ands	r3, r2
 8004cb2:	d100      	bne.n	8004cb6 <HAL_RCC_OscConfig+0x27e>
 8004cb4:	e09f      	b.n	8004df6 <HAL_RCC_OscConfig+0x3be>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8004cb6:	69fb      	ldr	r3, [r7, #28]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d13f      	bne.n	8004d3c <HAL_RCC_OscConfig+0x304>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004cbc:	4b2c      	ldr	r3, [pc, #176]	; (8004d70 <HAL_RCC_OscConfig+0x338>)
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	2380      	movs	r3, #128	; 0x80
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	d005      	beq.n	8004cd4 <HAL_RCC_OscConfig+0x29c>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	69db      	ldr	r3, [r3, #28]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d101      	bne.n	8004cd4 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	e277      	b.n	80051c4 <HAL_RCC_OscConfig+0x78c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004cd4:	4b26      	ldr	r3, [pc, #152]	; (8004d70 <HAL_RCC_OscConfig+0x338>)
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	4a2b      	ldr	r2, [pc, #172]	; (8004d88 <HAL_RCC_OscConfig+0x350>)
 8004cda:	4013      	ands	r3, r2
 8004cdc:	0019      	movs	r1, r3
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ce2:	4b23      	ldr	r3, [pc, #140]	; (8004d70 <HAL_RCC_OscConfig+0x338>)
 8004ce4:	430a      	orrs	r2, r1
 8004ce6:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004ce8:	4b21      	ldr	r3, [pc, #132]	; (8004d70 <HAL_RCC_OscConfig+0x338>)
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	021b      	lsls	r3, r3, #8
 8004cee:	0a19      	lsrs	r1, r3, #8
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6a1b      	ldr	r3, [r3, #32]
 8004cf4:	061a      	lsls	r2, r3, #24
 8004cf6:	4b1e      	ldr	r3, [pc, #120]	; (8004d70 <HAL_RCC_OscConfig+0x338>)
 8004cf8:	430a      	orrs	r2, r1
 8004cfa:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d00:	0b5b      	lsrs	r3, r3, #13
 8004d02:	3301      	adds	r3, #1
 8004d04:	2280      	movs	r2, #128	; 0x80
 8004d06:	0212      	lsls	r2, r2, #8
 8004d08:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8004d0a:	4b19      	ldr	r3, [pc, #100]	; (8004d70 <HAL_RCC_OscConfig+0x338>)
 8004d0c:	68db      	ldr	r3, [r3, #12]
 8004d0e:	091b      	lsrs	r3, r3, #4
 8004d10:	210f      	movs	r1, #15
 8004d12:	400b      	ands	r3, r1
 8004d14:	491a      	ldr	r1, [pc, #104]	; (8004d80 <HAL_RCC_OscConfig+0x348>)
 8004d16:	5ccb      	ldrb	r3, [r1, r3]
 8004d18:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004d1a:	4b1a      	ldr	r3, [pc, #104]	; (8004d84 <HAL_RCC_OscConfig+0x34c>)
 8004d1c:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8004d1e:	2513      	movs	r5, #19
 8004d20:	197c      	adds	r4, r7, r5
 8004d22:	2000      	movs	r0, #0
 8004d24:	f7ff f85e 	bl	8003de4 <HAL_InitTick>
 8004d28:	0003      	movs	r3, r0
 8004d2a:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8004d2c:	197b      	adds	r3, r7, r5
 8004d2e:	781b      	ldrb	r3, [r3, #0]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d060      	beq.n	8004df6 <HAL_RCC_OscConfig+0x3be>
        {
          return status;
 8004d34:	2313      	movs	r3, #19
 8004d36:	18fb      	adds	r3, r7, r3
 8004d38:	781b      	ldrb	r3, [r3, #0]
 8004d3a:	e243      	b.n	80051c4 <HAL_RCC_OscConfig+0x78c>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	69db      	ldr	r3, [r3, #28]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d03e      	beq.n	8004dc2 <HAL_RCC_OscConfig+0x38a>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004d44:	4b0a      	ldr	r3, [pc, #40]	; (8004d70 <HAL_RCC_OscConfig+0x338>)
 8004d46:	681a      	ldr	r2, [r3, #0]
 8004d48:	4b09      	ldr	r3, [pc, #36]	; (8004d70 <HAL_RCC_OscConfig+0x338>)
 8004d4a:	2180      	movs	r1, #128	; 0x80
 8004d4c:	0049      	lsls	r1, r1, #1
 8004d4e:	430a      	orrs	r2, r1
 8004d50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d52:	f7ff f87b 	bl	8003e4c <HAL_GetTick>
 8004d56:	0003      	movs	r3, r0
 8004d58:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004d5a:	e017      	b.n	8004d8c <HAL_RCC_OscConfig+0x354>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004d5c:	f7ff f876 	bl	8003e4c <HAL_GetTick>
 8004d60:	0002      	movs	r2, r0
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	1ad3      	subs	r3, r2, r3
 8004d66:	2b02      	cmp	r3, #2
 8004d68:	d910      	bls.n	8004d8c <HAL_RCC_OscConfig+0x354>
          {
            return HAL_TIMEOUT;
 8004d6a:	2303      	movs	r3, #3
 8004d6c:	e22a      	b.n	80051c4 <HAL_RCC_OscConfig+0x78c>
 8004d6e:	46c0      	nop			; (mov r8, r8)
 8004d70:	40021000 	.word	0x40021000
 8004d74:	fffeffff 	.word	0xfffeffff
 8004d78:	fffbffff 	.word	0xfffbffff
 8004d7c:	ffffe0ff 	.word	0xffffe0ff
 8004d80:	08021380 	.word	0x08021380
 8004d84:	2000005c 	.word	0x2000005c
 8004d88:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004d8c:	4bc6      	ldr	r3, [pc, #792]	; (80050a8 <HAL_RCC_OscConfig+0x670>)
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	2380      	movs	r3, #128	; 0x80
 8004d92:	009b      	lsls	r3, r3, #2
 8004d94:	4013      	ands	r3, r2
 8004d96:	d0e1      	beq.n	8004d5c <HAL_RCC_OscConfig+0x324>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004d98:	4bc3      	ldr	r3, [pc, #780]	; (80050a8 <HAL_RCC_OscConfig+0x670>)
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	4ac3      	ldr	r2, [pc, #780]	; (80050ac <HAL_RCC_OscConfig+0x674>)
 8004d9e:	4013      	ands	r3, r2
 8004da0:	0019      	movs	r1, r3
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004da6:	4bc0      	ldr	r3, [pc, #768]	; (80050a8 <HAL_RCC_OscConfig+0x670>)
 8004da8:	430a      	orrs	r2, r1
 8004daa:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004dac:	4bbe      	ldr	r3, [pc, #760]	; (80050a8 <HAL_RCC_OscConfig+0x670>)
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	021b      	lsls	r3, r3, #8
 8004db2:	0a19      	lsrs	r1, r3, #8
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6a1b      	ldr	r3, [r3, #32]
 8004db8:	061a      	lsls	r2, r3, #24
 8004dba:	4bbb      	ldr	r3, [pc, #748]	; (80050a8 <HAL_RCC_OscConfig+0x670>)
 8004dbc:	430a      	orrs	r2, r1
 8004dbe:	605a      	str	r2, [r3, #4]
 8004dc0:	e019      	b.n	8004df6 <HAL_RCC_OscConfig+0x3be>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004dc2:	4bb9      	ldr	r3, [pc, #740]	; (80050a8 <HAL_RCC_OscConfig+0x670>)
 8004dc4:	681a      	ldr	r2, [r3, #0]
 8004dc6:	4bb8      	ldr	r3, [pc, #736]	; (80050a8 <HAL_RCC_OscConfig+0x670>)
 8004dc8:	49b9      	ldr	r1, [pc, #740]	; (80050b0 <HAL_RCC_OscConfig+0x678>)
 8004dca:	400a      	ands	r2, r1
 8004dcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dce:	f7ff f83d 	bl	8003e4c <HAL_GetTick>
 8004dd2:	0003      	movs	r3, r0
 8004dd4:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004dd6:	e008      	b.n	8004dea <HAL_RCC_OscConfig+0x3b2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004dd8:	f7ff f838 	bl	8003e4c <HAL_GetTick>
 8004ddc:	0002      	movs	r2, r0
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	1ad3      	subs	r3, r2, r3
 8004de2:	2b02      	cmp	r3, #2
 8004de4:	d901      	bls.n	8004dea <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 8004de6:	2303      	movs	r3, #3
 8004de8:	e1ec      	b.n	80051c4 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004dea:	4baf      	ldr	r3, [pc, #700]	; (80050a8 <HAL_RCC_OscConfig+0x670>)
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	2380      	movs	r3, #128	; 0x80
 8004df0:	009b      	lsls	r3, r3, #2
 8004df2:	4013      	ands	r3, r2
 8004df4:	d1f0      	bne.n	8004dd8 <HAL_RCC_OscConfig+0x3a0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	2208      	movs	r2, #8
 8004dfc:	4013      	ands	r3, r2
 8004dfe:	d036      	beq.n	8004e6e <HAL_RCC_OscConfig+0x436>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	695b      	ldr	r3, [r3, #20]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d019      	beq.n	8004e3c <HAL_RCC_OscConfig+0x404>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e08:	4ba7      	ldr	r3, [pc, #668]	; (80050a8 <HAL_RCC_OscConfig+0x670>)
 8004e0a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004e0c:	4ba6      	ldr	r3, [pc, #664]	; (80050a8 <HAL_RCC_OscConfig+0x670>)
 8004e0e:	2101      	movs	r1, #1
 8004e10:	430a      	orrs	r2, r1
 8004e12:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e14:	f7ff f81a 	bl	8003e4c <HAL_GetTick>
 8004e18:	0003      	movs	r3, r0
 8004e1a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004e1c:	e008      	b.n	8004e30 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e1e:	f7ff f815 	bl	8003e4c <HAL_GetTick>
 8004e22:	0002      	movs	r2, r0
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	1ad3      	subs	r3, r2, r3
 8004e28:	2b02      	cmp	r3, #2
 8004e2a:	d901      	bls.n	8004e30 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8004e2c:	2303      	movs	r3, #3
 8004e2e:	e1c9      	b.n	80051c4 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004e30:	4b9d      	ldr	r3, [pc, #628]	; (80050a8 <HAL_RCC_OscConfig+0x670>)
 8004e32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e34:	2202      	movs	r2, #2
 8004e36:	4013      	ands	r3, r2
 8004e38:	d0f1      	beq.n	8004e1e <HAL_RCC_OscConfig+0x3e6>
 8004e3a:	e018      	b.n	8004e6e <HAL_RCC_OscConfig+0x436>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e3c:	4b9a      	ldr	r3, [pc, #616]	; (80050a8 <HAL_RCC_OscConfig+0x670>)
 8004e3e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004e40:	4b99      	ldr	r3, [pc, #612]	; (80050a8 <HAL_RCC_OscConfig+0x670>)
 8004e42:	2101      	movs	r1, #1
 8004e44:	438a      	bics	r2, r1
 8004e46:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e48:	f7ff f800 	bl	8003e4c <HAL_GetTick>
 8004e4c:	0003      	movs	r3, r0
 8004e4e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004e50:	e008      	b.n	8004e64 <HAL_RCC_OscConfig+0x42c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e52:	f7fe fffb 	bl	8003e4c <HAL_GetTick>
 8004e56:	0002      	movs	r2, r0
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	1ad3      	subs	r3, r2, r3
 8004e5c:	2b02      	cmp	r3, #2
 8004e5e:	d901      	bls.n	8004e64 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8004e60:	2303      	movs	r3, #3
 8004e62:	e1af      	b.n	80051c4 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004e64:	4b90      	ldr	r3, [pc, #576]	; (80050a8 <HAL_RCC_OscConfig+0x670>)
 8004e66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e68:	2202      	movs	r2, #2
 8004e6a:	4013      	ands	r3, r2
 8004e6c:	d1f1      	bne.n	8004e52 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	2204      	movs	r2, #4
 8004e74:	4013      	ands	r3, r2
 8004e76:	d100      	bne.n	8004e7a <HAL_RCC_OscConfig+0x442>
 8004e78:	e0af      	b.n	8004fda <HAL_RCC_OscConfig+0x5a2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e7a:	2323      	movs	r3, #35	; 0x23
 8004e7c:	18fb      	adds	r3, r7, r3
 8004e7e:	2200      	movs	r2, #0
 8004e80:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e82:	4b89      	ldr	r3, [pc, #548]	; (80050a8 <HAL_RCC_OscConfig+0x670>)
 8004e84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e86:	2380      	movs	r3, #128	; 0x80
 8004e88:	055b      	lsls	r3, r3, #21
 8004e8a:	4013      	ands	r3, r2
 8004e8c:	d10a      	bne.n	8004ea4 <HAL_RCC_OscConfig+0x46c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e8e:	4b86      	ldr	r3, [pc, #536]	; (80050a8 <HAL_RCC_OscConfig+0x670>)
 8004e90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e92:	4b85      	ldr	r3, [pc, #532]	; (80050a8 <HAL_RCC_OscConfig+0x670>)
 8004e94:	2180      	movs	r1, #128	; 0x80
 8004e96:	0549      	lsls	r1, r1, #21
 8004e98:	430a      	orrs	r2, r1
 8004e9a:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8004e9c:	2323      	movs	r3, #35	; 0x23
 8004e9e:	18fb      	adds	r3, r7, r3
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ea4:	4b83      	ldr	r3, [pc, #524]	; (80050b4 <HAL_RCC_OscConfig+0x67c>)
 8004ea6:	681a      	ldr	r2, [r3, #0]
 8004ea8:	2380      	movs	r3, #128	; 0x80
 8004eaa:	005b      	lsls	r3, r3, #1
 8004eac:	4013      	ands	r3, r2
 8004eae:	d11a      	bne.n	8004ee6 <HAL_RCC_OscConfig+0x4ae>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004eb0:	4b80      	ldr	r3, [pc, #512]	; (80050b4 <HAL_RCC_OscConfig+0x67c>)
 8004eb2:	681a      	ldr	r2, [r3, #0]
 8004eb4:	4b7f      	ldr	r3, [pc, #508]	; (80050b4 <HAL_RCC_OscConfig+0x67c>)
 8004eb6:	2180      	movs	r1, #128	; 0x80
 8004eb8:	0049      	lsls	r1, r1, #1
 8004eba:	430a      	orrs	r2, r1
 8004ebc:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ebe:	f7fe ffc5 	bl	8003e4c <HAL_GetTick>
 8004ec2:	0003      	movs	r3, r0
 8004ec4:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ec6:	e008      	b.n	8004eda <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ec8:	f7fe ffc0 	bl	8003e4c <HAL_GetTick>
 8004ecc:	0002      	movs	r2, r0
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	1ad3      	subs	r3, r2, r3
 8004ed2:	2b64      	cmp	r3, #100	; 0x64
 8004ed4:	d901      	bls.n	8004eda <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004ed6:	2303      	movs	r3, #3
 8004ed8:	e174      	b.n	80051c4 <HAL_RCC_OscConfig+0x78c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004eda:	4b76      	ldr	r3, [pc, #472]	; (80050b4 <HAL_RCC_OscConfig+0x67c>)
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	2380      	movs	r3, #128	; 0x80
 8004ee0:	005b      	lsls	r3, r3, #1
 8004ee2:	4013      	ands	r3, r2
 8004ee4:	d0f0      	beq.n	8004ec8 <HAL_RCC_OscConfig+0x490>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	689a      	ldr	r2, [r3, #8]
 8004eea:	2380      	movs	r3, #128	; 0x80
 8004eec:	005b      	lsls	r3, r3, #1
 8004eee:	429a      	cmp	r2, r3
 8004ef0:	d107      	bne.n	8004f02 <HAL_RCC_OscConfig+0x4ca>
 8004ef2:	4b6d      	ldr	r3, [pc, #436]	; (80050a8 <HAL_RCC_OscConfig+0x670>)
 8004ef4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004ef6:	4b6c      	ldr	r3, [pc, #432]	; (80050a8 <HAL_RCC_OscConfig+0x670>)
 8004ef8:	2180      	movs	r1, #128	; 0x80
 8004efa:	0049      	lsls	r1, r1, #1
 8004efc:	430a      	orrs	r2, r1
 8004efe:	651a      	str	r2, [r3, #80]	; 0x50
 8004f00:	e031      	b.n	8004f66 <HAL_RCC_OscConfig+0x52e>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d10c      	bne.n	8004f24 <HAL_RCC_OscConfig+0x4ec>
 8004f0a:	4b67      	ldr	r3, [pc, #412]	; (80050a8 <HAL_RCC_OscConfig+0x670>)
 8004f0c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004f0e:	4b66      	ldr	r3, [pc, #408]	; (80050a8 <HAL_RCC_OscConfig+0x670>)
 8004f10:	4967      	ldr	r1, [pc, #412]	; (80050b0 <HAL_RCC_OscConfig+0x678>)
 8004f12:	400a      	ands	r2, r1
 8004f14:	651a      	str	r2, [r3, #80]	; 0x50
 8004f16:	4b64      	ldr	r3, [pc, #400]	; (80050a8 <HAL_RCC_OscConfig+0x670>)
 8004f18:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004f1a:	4b63      	ldr	r3, [pc, #396]	; (80050a8 <HAL_RCC_OscConfig+0x670>)
 8004f1c:	4966      	ldr	r1, [pc, #408]	; (80050b8 <HAL_RCC_OscConfig+0x680>)
 8004f1e:	400a      	ands	r2, r1
 8004f20:	651a      	str	r2, [r3, #80]	; 0x50
 8004f22:	e020      	b.n	8004f66 <HAL_RCC_OscConfig+0x52e>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	689a      	ldr	r2, [r3, #8]
 8004f28:	23a0      	movs	r3, #160	; 0xa0
 8004f2a:	00db      	lsls	r3, r3, #3
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	d10e      	bne.n	8004f4e <HAL_RCC_OscConfig+0x516>
 8004f30:	4b5d      	ldr	r3, [pc, #372]	; (80050a8 <HAL_RCC_OscConfig+0x670>)
 8004f32:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004f34:	4b5c      	ldr	r3, [pc, #368]	; (80050a8 <HAL_RCC_OscConfig+0x670>)
 8004f36:	2180      	movs	r1, #128	; 0x80
 8004f38:	00c9      	lsls	r1, r1, #3
 8004f3a:	430a      	orrs	r2, r1
 8004f3c:	651a      	str	r2, [r3, #80]	; 0x50
 8004f3e:	4b5a      	ldr	r3, [pc, #360]	; (80050a8 <HAL_RCC_OscConfig+0x670>)
 8004f40:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004f42:	4b59      	ldr	r3, [pc, #356]	; (80050a8 <HAL_RCC_OscConfig+0x670>)
 8004f44:	2180      	movs	r1, #128	; 0x80
 8004f46:	0049      	lsls	r1, r1, #1
 8004f48:	430a      	orrs	r2, r1
 8004f4a:	651a      	str	r2, [r3, #80]	; 0x50
 8004f4c:	e00b      	b.n	8004f66 <HAL_RCC_OscConfig+0x52e>
 8004f4e:	4b56      	ldr	r3, [pc, #344]	; (80050a8 <HAL_RCC_OscConfig+0x670>)
 8004f50:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004f52:	4b55      	ldr	r3, [pc, #340]	; (80050a8 <HAL_RCC_OscConfig+0x670>)
 8004f54:	4956      	ldr	r1, [pc, #344]	; (80050b0 <HAL_RCC_OscConfig+0x678>)
 8004f56:	400a      	ands	r2, r1
 8004f58:	651a      	str	r2, [r3, #80]	; 0x50
 8004f5a:	4b53      	ldr	r3, [pc, #332]	; (80050a8 <HAL_RCC_OscConfig+0x670>)
 8004f5c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004f5e:	4b52      	ldr	r3, [pc, #328]	; (80050a8 <HAL_RCC_OscConfig+0x670>)
 8004f60:	4955      	ldr	r1, [pc, #340]	; (80050b8 <HAL_RCC_OscConfig+0x680>)
 8004f62:	400a      	ands	r2, r1
 8004f64:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d015      	beq.n	8004f9a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f6e:	f7fe ff6d 	bl	8003e4c <HAL_GetTick>
 8004f72:	0003      	movs	r3, r0
 8004f74:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004f76:	e009      	b.n	8004f8c <HAL_RCC_OscConfig+0x554>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f78:	f7fe ff68 	bl	8003e4c <HAL_GetTick>
 8004f7c:	0002      	movs	r2, r0
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	1ad3      	subs	r3, r2, r3
 8004f82:	4a4e      	ldr	r2, [pc, #312]	; (80050bc <HAL_RCC_OscConfig+0x684>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d901      	bls.n	8004f8c <HAL_RCC_OscConfig+0x554>
        {
          return HAL_TIMEOUT;
 8004f88:	2303      	movs	r3, #3
 8004f8a:	e11b      	b.n	80051c4 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004f8c:	4b46      	ldr	r3, [pc, #280]	; (80050a8 <HAL_RCC_OscConfig+0x670>)
 8004f8e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004f90:	2380      	movs	r3, #128	; 0x80
 8004f92:	009b      	lsls	r3, r3, #2
 8004f94:	4013      	ands	r3, r2
 8004f96:	d0ef      	beq.n	8004f78 <HAL_RCC_OscConfig+0x540>
 8004f98:	e014      	b.n	8004fc4 <HAL_RCC_OscConfig+0x58c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f9a:	f7fe ff57 	bl	8003e4c <HAL_GetTick>
 8004f9e:	0003      	movs	r3, r0
 8004fa0:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004fa2:	e009      	b.n	8004fb8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fa4:	f7fe ff52 	bl	8003e4c <HAL_GetTick>
 8004fa8:	0002      	movs	r2, r0
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	1ad3      	subs	r3, r2, r3
 8004fae:	4a43      	ldr	r2, [pc, #268]	; (80050bc <HAL_RCC_OscConfig+0x684>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d901      	bls.n	8004fb8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004fb4:	2303      	movs	r3, #3
 8004fb6:	e105      	b.n	80051c4 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004fb8:	4b3b      	ldr	r3, [pc, #236]	; (80050a8 <HAL_RCC_OscConfig+0x670>)
 8004fba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004fbc:	2380      	movs	r3, #128	; 0x80
 8004fbe:	009b      	lsls	r3, r3, #2
 8004fc0:	4013      	ands	r3, r2
 8004fc2:	d1ef      	bne.n	8004fa4 <HAL_RCC_OscConfig+0x56c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004fc4:	2323      	movs	r3, #35	; 0x23
 8004fc6:	18fb      	adds	r3, r7, r3
 8004fc8:	781b      	ldrb	r3, [r3, #0]
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d105      	bne.n	8004fda <HAL_RCC_OscConfig+0x5a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fce:	4b36      	ldr	r3, [pc, #216]	; (80050a8 <HAL_RCC_OscConfig+0x670>)
 8004fd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004fd2:	4b35      	ldr	r3, [pc, #212]	; (80050a8 <HAL_RCC_OscConfig+0x670>)
 8004fd4:	493a      	ldr	r1, [pc, #232]	; (80050c0 <HAL_RCC_OscConfig+0x688>)
 8004fd6:	400a      	ands	r2, r1
 8004fd8:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	2220      	movs	r2, #32
 8004fe0:	4013      	ands	r3, r2
 8004fe2:	d049      	beq.n	8005078 <HAL_RCC_OscConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	699b      	ldr	r3, [r3, #24]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d026      	beq.n	800503a <HAL_RCC_OscConfig+0x602>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8004fec:	4b2e      	ldr	r3, [pc, #184]	; (80050a8 <HAL_RCC_OscConfig+0x670>)
 8004fee:	689a      	ldr	r2, [r3, #8]
 8004ff0:	4b2d      	ldr	r3, [pc, #180]	; (80050a8 <HAL_RCC_OscConfig+0x670>)
 8004ff2:	2101      	movs	r1, #1
 8004ff4:	430a      	orrs	r2, r1
 8004ff6:	609a      	str	r2, [r3, #8]
 8004ff8:	4b2b      	ldr	r3, [pc, #172]	; (80050a8 <HAL_RCC_OscConfig+0x670>)
 8004ffa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ffc:	4b2a      	ldr	r3, [pc, #168]	; (80050a8 <HAL_RCC_OscConfig+0x670>)
 8004ffe:	2101      	movs	r1, #1
 8005000:	430a      	orrs	r2, r1
 8005002:	635a      	str	r2, [r3, #52]	; 0x34
 8005004:	4b2f      	ldr	r3, [pc, #188]	; (80050c4 <HAL_RCC_OscConfig+0x68c>)
 8005006:	6a1a      	ldr	r2, [r3, #32]
 8005008:	4b2e      	ldr	r3, [pc, #184]	; (80050c4 <HAL_RCC_OscConfig+0x68c>)
 800500a:	2180      	movs	r1, #128	; 0x80
 800500c:	0189      	lsls	r1, r1, #6
 800500e:	430a      	orrs	r2, r1
 8005010:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005012:	f7fe ff1b 	bl	8003e4c <HAL_GetTick>
 8005016:	0003      	movs	r3, r0
 8005018:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800501a:	e008      	b.n	800502e <HAL_RCC_OscConfig+0x5f6>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800501c:	f7fe ff16 	bl	8003e4c <HAL_GetTick>
 8005020:	0002      	movs	r2, r0
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	1ad3      	subs	r3, r2, r3
 8005026:	2b02      	cmp	r3, #2
 8005028:	d901      	bls.n	800502e <HAL_RCC_OscConfig+0x5f6>
          {
            return HAL_TIMEOUT;
 800502a:	2303      	movs	r3, #3
 800502c:	e0ca      	b.n	80051c4 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800502e:	4b1e      	ldr	r3, [pc, #120]	; (80050a8 <HAL_RCC_OscConfig+0x670>)
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	2202      	movs	r2, #2
 8005034:	4013      	ands	r3, r2
 8005036:	d0f1      	beq.n	800501c <HAL_RCC_OscConfig+0x5e4>
 8005038:	e01e      	b.n	8005078 <HAL_RCC_OscConfig+0x640>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800503a:	4b1b      	ldr	r3, [pc, #108]	; (80050a8 <HAL_RCC_OscConfig+0x670>)
 800503c:	689a      	ldr	r2, [r3, #8]
 800503e:	4b1a      	ldr	r3, [pc, #104]	; (80050a8 <HAL_RCC_OscConfig+0x670>)
 8005040:	2101      	movs	r1, #1
 8005042:	438a      	bics	r2, r1
 8005044:	609a      	str	r2, [r3, #8]
 8005046:	4b1f      	ldr	r3, [pc, #124]	; (80050c4 <HAL_RCC_OscConfig+0x68c>)
 8005048:	6a1a      	ldr	r2, [r3, #32]
 800504a:	4b1e      	ldr	r3, [pc, #120]	; (80050c4 <HAL_RCC_OscConfig+0x68c>)
 800504c:	491e      	ldr	r1, [pc, #120]	; (80050c8 <HAL_RCC_OscConfig+0x690>)
 800504e:	400a      	ands	r2, r1
 8005050:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005052:	f7fe fefb 	bl	8003e4c <HAL_GetTick>
 8005056:	0003      	movs	r3, r0
 8005058:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800505a:	e008      	b.n	800506e <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800505c:	f7fe fef6 	bl	8003e4c <HAL_GetTick>
 8005060:	0002      	movs	r2, r0
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	1ad3      	subs	r3, r2, r3
 8005066:	2b02      	cmp	r3, #2
 8005068:	d901      	bls.n	800506e <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 800506a:	2303      	movs	r3, #3
 800506c:	e0aa      	b.n	80051c4 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800506e:	4b0e      	ldr	r3, [pc, #56]	; (80050a8 <HAL_RCC_OscConfig+0x670>)
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	2202      	movs	r2, #2
 8005074:	4013      	ands	r3, r2
 8005076:	d1f1      	bne.n	800505c <HAL_RCC_OscConfig+0x624>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800507c:	2b00      	cmp	r3, #0
 800507e:	d100      	bne.n	8005082 <HAL_RCC_OscConfig+0x64a>
 8005080:	e09f      	b.n	80051c2 <HAL_RCC_OscConfig+0x78a>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005082:	69fb      	ldr	r3, [r7, #28]
 8005084:	2b0c      	cmp	r3, #12
 8005086:	d100      	bne.n	800508a <HAL_RCC_OscConfig+0x652>
 8005088:	e078      	b.n	800517c <HAL_RCC_OscConfig+0x744>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800508e:	2b02      	cmp	r3, #2
 8005090:	d159      	bne.n	8005146 <HAL_RCC_OscConfig+0x70e>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005092:	4b05      	ldr	r3, [pc, #20]	; (80050a8 <HAL_RCC_OscConfig+0x670>)
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	4b04      	ldr	r3, [pc, #16]	; (80050a8 <HAL_RCC_OscConfig+0x670>)
 8005098:	490c      	ldr	r1, [pc, #48]	; (80050cc <HAL_RCC_OscConfig+0x694>)
 800509a:	400a      	ands	r2, r1
 800509c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800509e:	f7fe fed5 	bl	8003e4c <HAL_GetTick>
 80050a2:	0003      	movs	r3, r0
 80050a4:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80050a6:	e01c      	b.n	80050e2 <HAL_RCC_OscConfig+0x6aa>
 80050a8:	40021000 	.word	0x40021000
 80050ac:	ffff1fff 	.word	0xffff1fff
 80050b0:	fffffeff 	.word	0xfffffeff
 80050b4:	40007000 	.word	0x40007000
 80050b8:	fffffbff 	.word	0xfffffbff
 80050bc:	00001388 	.word	0x00001388
 80050c0:	efffffff 	.word	0xefffffff
 80050c4:	40010000 	.word	0x40010000
 80050c8:	ffffdfff 	.word	0xffffdfff
 80050cc:	feffffff 	.word	0xfeffffff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050d0:	f7fe febc 	bl	8003e4c <HAL_GetTick>
 80050d4:	0002      	movs	r2, r0
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	1ad3      	subs	r3, r2, r3
 80050da:	2b02      	cmp	r3, #2
 80050dc:	d901      	bls.n	80050e2 <HAL_RCC_OscConfig+0x6aa>
          {
            return HAL_TIMEOUT;
 80050de:	2303      	movs	r3, #3
 80050e0:	e070      	b.n	80051c4 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80050e2:	4b3a      	ldr	r3, [pc, #232]	; (80051cc <HAL_RCC_OscConfig+0x794>)
 80050e4:	681a      	ldr	r2, [r3, #0]
 80050e6:	2380      	movs	r3, #128	; 0x80
 80050e8:	049b      	lsls	r3, r3, #18
 80050ea:	4013      	ands	r3, r2
 80050ec:	d1f0      	bne.n	80050d0 <HAL_RCC_OscConfig+0x698>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80050ee:	4b37      	ldr	r3, [pc, #220]	; (80051cc <HAL_RCC_OscConfig+0x794>)
 80050f0:	68db      	ldr	r3, [r3, #12]
 80050f2:	4a37      	ldr	r2, [pc, #220]	; (80051d0 <HAL_RCC_OscConfig+0x798>)
 80050f4:	4013      	ands	r3, r2
 80050f6:	0019      	movs	r1, r3
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005100:	431a      	orrs	r2, r3
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005106:	431a      	orrs	r2, r3
 8005108:	4b30      	ldr	r3, [pc, #192]	; (80051cc <HAL_RCC_OscConfig+0x794>)
 800510a:	430a      	orrs	r2, r1
 800510c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800510e:	4b2f      	ldr	r3, [pc, #188]	; (80051cc <HAL_RCC_OscConfig+0x794>)
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	4b2e      	ldr	r3, [pc, #184]	; (80051cc <HAL_RCC_OscConfig+0x794>)
 8005114:	2180      	movs	r1, #128	; 0x80
 8005116:	0449      	lsls	r1, r1, #17
 8005118:	430a      	orrs	r2, r1
 800511a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800511c:	f7fe fe96 	bl	8003e4c <HAL_GetTick>
 8005120:	0003      	movs	r3, r0
 8005122:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8005124:	e008      	b.n	8005138 <HAL_RCC_OscConfig+0x700>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005126:	f7fe fe91 	bl	8003e4c <HAL_GetTick>
 800512a:	0002      	movs	r2, r0
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	1ad3      	subs	r3, r2, r3
 8005130:	2b02      	cmp	r3, #2
 8005132:	d901      	bls.n	8005138 <HAL_RCC_OscConfig+0x700>
          {
            return HAL_TIMEOUT;
 8005134:	2303      	movs	r3, #3
 8005136:	e045      	b.n	80051c4 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8005138:	4b24      	ldr	r3, [pc, #144]	; (80051cc <HAL_RCC_OscConfig+0x794>)
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	2380      	movs	r3, #128	; 0x80
 800513e:	049b      	lsls	r3, r3, #18
 8005140:	4013      	ands	r3, r2
 8005142:	d0f0      	beq.n	8005126 <HAL_RCC_OscConfig+0x6ee>
 8005144:	e03d      	b.n	80051c2 <HAL_RCC_OscConfig+0x78a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005146:	4b21      	ldr	r3, [pc, #132]	; (80051cc <HAL_RCC_OscConfig+0x794>)
 8005148:	681a      	ldr	r2, [r3, #0]
 800514a:	4b20      	ldr	r3, [pc, #128]	; (80051cc <HAL_RCC_OscConfig+0x794>)
 800514c:	4921      	ldr	r1, [pc, #132]	; (80051d4 <HAL_RCC_OscConfig+0x79c>)
 800514e:	400a      	ands	r2, r1
 8005150:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005152:	f7fe fe7b 	bl	8003e4c <HAL_GetTick>
 8005156:	0003      	movs	r3, r0
 8005158:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800515a:	e008      	b.n	800516e <HAL_RCC_OscConfig+0x736>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800515c:	f7fe fe76 	bl	8003e4c <HAL_GetTick>
 8005160:	0002      	movs	r2, r0
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	1ad3      	subs	r3, r2, r3
 8005166:	2b02      	cmp	r3, #2
 8005168:	d901      	bls.n	800516e <HAL_RCC_OscConfig+0x736>
          {
            return HAL_TIMEOUT;
 800516a:	2303      	movs	r3, #3
 800516c:	e02a      	b.n	80051c4 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800516e:	4b17      	ldr	r3, [pc, #92]	; (80051cc <HAL_RCC_OscConfig+0x794>)
 8005170:	681a      	ldr	r2, [r3, #0]
 8005172:	2380      	movs	r3, #128	; 0x80
 8005174:	049b      	lsls	r3, r3, #18
 8005176:	4013      	ands	r3, r2
 8005178:	d1f0      	bne.n	800515c <HAL_RCC_OscConfig+0x724>
 800517a:	e022      	b.n	80051c2 <HAL_RCC_OscConfig+0x78a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005180:	2b01      	cmp	r3, #1
 8005182:	d101      	bne.n	8005188 <HAL_RCC_OscConfig+0x750>
      {
        return HAL_ERROR;
 8005184:	2301      	movs	r3, #1
 8005186:	e01d      	b.n	80051c4 <HAL_RCC_OscConfig+0x78c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005188:	4b10      	ldr	r3, [pc, #64]	; (80051cc <HAL_RCC_OscConfig+0x794>)
 800518a:	68db      	ldr	r3, [r3, #12]
 800518c:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800518e:	69ba      	ldr	r2, [r7, #24]
 8005190:	2380      	movs	r3, #128	; 0x80
 8005192:	025b      	lsls	r3, r3, #9
 8005194:	401a      	ands	r2, r3
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800519a:	429a      	cmp	r2, r3
 800519c:	d10f      	bne.n	80051be <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800519e:	69ba      	ldr	r2, [r7, #24]
 80051a0:	23f0      	movs	r3, #240	; 0xf0
 80051a2:	039b      	lsls	r3, r3, #14
 80051a4:	401a      	ands	r2, r3
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051aa:	429a      	cmp	r2, r3
 80051ac:	d107      	bne.n	80051be <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80051ae:	69ba      	ldr	r2, [r7, #24]
 80051b0:	23c0      	movs	r3, #192	; 0xc0
 80051b2:	041b      	lsls	r3, r3, #16
 80051b4:	401a      	ands	r2, r3
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80051ba:	429a      	cmp	r2, r3
 80051bc:	d001      	beq.n	80051c2 <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_ERROR;
 80051be:	2301      	movs	r3, #1
 80051c0:	e000      	b.n	80051c4 <HAL_RCC_OscConfig+0x78c>
        }
      }
    }
  }

  return HAL_OK;
 80051c2:	2300      	movs	r3, #0
}
 80051c4:	0018      	movs	r0, r3
 80051c6:	46bd      	mov	sp, r7
 80051c8:	b00a      	add	sp, #40	; 0x28
 80051ca:	bdb0      	pop	{r4, r5, r7, pc}
 80051cc:	40021000 	.word	0x40021000
 80051d0:	ff02ffff 	.word	0xff02ffff
 80051d4:	feffffff 	.word	0xfeffffff

080051d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80051d8:	b5b0      	push	{r4, r5, r7, lr}
 80051da:	b084      	sub	sp, #16
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
 80051e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d101      	bne.n	80051ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80051e8:	2301      	movs	r3, #1
 80051ea:	e10d      	b.n	8005408 <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80051ec:	4b88      	ldr	r3, [pc, #544]	; (8005410 <HAL_RCC_ClockConfig+0x238>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	2201      	movs	r2, #1
 80051f2:	4013      	ands	r3, r2
 80051f4:	683a      	ldr	r2, [r7, #0]
 80051f6:	429a      	cmp	r2, r3
 80051f8:	d911      	bls.n	800521e <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051fa:	4b85      	ldr	r3, [pc, #532]	; (8005410 <HAL_RCC_ClockConfig+0x238>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	2201      	movs	r2, #1
 8005200:	4393      	bics	r3, r2
 8005202:	0019      	movs	r1, r3
 8005204:	4b82      	ldr	r3, [pc, #520]	; (8005410 <HAL_RCC_ClockConfig+0x238>)
 8005206:	683a      	ldr	r2, [r7, #0]
 8005208:	430a      	orrs	r2, r1
 800520a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800520c:	4b80      	ldr	r3, [pc, #512]	; (8005410 <HAL_RCC_ClockConfig+0x238>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	2201      	movs	r2, #1
 8005212:	4013      	ands	r3, r2
 8005214:	683a      	ldr	r2, [r7, #0]
 8005216:	429a      	cmp	r2, r3
 8005218:	d001      	beq.n	800521e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800521a:	2301      	movs	r3, #1
 800521c:	e0f4      	b.n	8005408 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	2202      	movs	r2, #2
 8005224:	4013      	ands	r3, r2
 8005226:	d009      	beq.n	800523c <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005228:	4b7a      	ldr	r3, [pc, #488]	; (8005414 <HAL_RCC_ClockConfig+0x23c>)
 800522a:	68db      	ldr	r3, [r3, #12]
 800522c:	22f0      	movs	r2, #240	; 0xf0
 800522e:	4393      	bics	r3, r2
 8005230:	0019      	movs	r1, r3
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	689a      	ldr	r2, [r3, #8]
 8005236:	4b77      	ldr	r3, [pc, #476]	; (8005414 <HAL_RCC_ClockConfig+0x23c>)
 8005238:	430a      	orrs	r2, r1
 800523a:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	2201      	movs	r2, #1
 8005242:	4013      	ands	r3, r2
 8005244:	d100      	bne.n	8005248 <HAL_RCC_ClockConfig+0x70>
 8005246:	e089      	b.n	800535c <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	2b02      	cmp	r3, #2
 800524e:	d107      	bne.n	8005260 <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005250:	4b70      	ldr	r3, [pc, #448]	; (8005414 <HAL_RCC_ClockConfig+0x23c>)
 8005252:	681a      	ldr	r2, [r3, #0]
 8005254:	2380      	movs	r3, #128	; 0x80
 8005256:	029b      	lsls	r3, r3, #10
 8005258:	4013      	ands	r3, r2
 800525a:	d120      	bne.n	800529e <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 800525c:	2301      	movs	r3, #1
 800525e:	e0d3      	b.n	8005408 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	2b03      	cmp	r3, #3
 8005266:	d107      	bne.n	8005278 <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005268:	4b6a      	ldr	r3, [pc, #424]	; (8005414 <HAL_RCC_ClockConfig+0x23c>)
 800526a:	681a      	ldr	r2, [r3, #0]
 800526c:	2380      	movs	r3, #128	; 0x80
 800526e:	049b      	lsls	r3, r3, #18
 8005270:	4013      	ands	r3, r2
 8005272:	d114      	bne.n	800529e <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	e0c7      	b.n	8005408 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	2b01      	cmp	r3, #1
 800527e:	d106      	bne.n	800528e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005280:	4b64      	ldr	r3, [pc, #400]	; (8005414 <HAL_RCC_ClockConfig+0x23c>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	2204      	movs	r2, #4
 8005286:	4013      	ands	r3, r2
 8005288:	d109      	bne.n	800529e <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	e0bc      	b.n	8005408 <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800528e:	4b61      	ldr	r3, [pc, #388]	; (8005414 <HAL_RCC_ClockConfig+0x23c>)
 8005290:	681a      	ldr	r2, [r3, #0]
 8005292:	2380      	movs	r3, #128	; 0x80
 8005294:	009b      	lsls	r3, r3, #2
 8005296:	4013      	ands	r3, r2
 8005298:	d101      	bne.n	800529e <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	e0b4      	b.n	8005408 <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800529e:	4b5d      	ldr	r3, [pc, #372]	; (8005414 <HAL_RCC_ClockConfig+0x23c>)
 80052a0:	68db      	ldr	r3, [r3, #12]
 80052a2:	2203      	movs	r2, #3
 80052a4:	4393      	bics	r3, r2
 80052a6:	0019      	movs	r1, r3
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	685a      	ldr	r2, [r3, #4]
 80052ac:	4b59      	ldr	r3, [pc, #356]	; (8005414 <HAL_RCC_ClockConfig+0x23c>)
 80052ae:	430a      	orrs	r2, r1
 80052b0:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80052b2:	f7fe fdcb 	bl	8003e4c <HAL_GetTick>
 80052b6:	0003      	movs	r3, r0
 80052b8:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	2b02      	cmp	r3, #2
 80052c0:	d111      	bne.n	80052e6 <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80052c2:	e009      	b.n	80052d8 <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052c4:	f7fe fdc2 	bl	8003e4c <HAL_GetTick>
 80052c8:	0002      	movs	r2, r0
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	1ad3      	subs	r3, r2, r3
 80052ce:	4a52      	ldr	r2, [pc, #328]	; (8005418 <HAL_RCC_ClockConfig+0x240>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d901      	bls.n	80052d8 <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 80052d4:	2303      	movs	r3, #3
 80052d6:	e097      	b.n	8005408 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80052d8:	4b4e      	ldr	r3, [pc, #312]	; (8005414 <HAL_RCC_ClockConfig+0x23c>)
 80052da:	68db      	ldr	r3, [r3, #12]
 80052dc:	220c      	movs	r2, #12
 80052de:	4013      	ands	r3, r2
 80052e0:	2b08      	cmp	r3, #8
 80052e2:	d1ef      	bne.n	80052c4 <HAL_RCC_ClockConfig+0xec>
 80052e4:	e03a      	b.n	800535c <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	2b03      	cmp	r3, #3
 80052ec:	d111      	bne.n	8005312 <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80052ee:	e009      	b.n	8005304 <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052f0:	f7fe fdac 	bl	8003e4c <HAL_GetTick>
 80052f4:	0002      	movs	r2, r0
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	1ad3      	subs	r3, r2, r3
 80052fa:	4a47      	ldr	r2, [pc, #284]	; (8005418 <HAL_RCC_ClockConfig+0x240>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d901      	bls.n	8005304 <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 8005300:	2303      	movs	r3, #3
 8005302:	e081      	b.n	8005408 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005304:	4b43      	ldr	r3, [pc, #268]	; (8005414 <HAL_RCC_ClockConfig+0x23c>)
 8005306:	68db      	ldr	r3, [r3, #12]
 8005308:	220c      	movs	r2, #12
 800530a:	4013      	ands	r3, r2
 800530c:	2b0c      	cmp	r3, #12
 800530e:	d1ef      	bne.n	80052f0 <HAL_RCC_ClockConfig+0x118>
 8005310:	e024      	b.n	800535c <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	2b01      	cmp	r3, #1
 8005318:	d11b      	bne.n	8005352 <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800531a:	e009      	b.n	8005330 <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800531c:	f7fe fd96 	bl	8003e4c <HAL_GetTick>
 8005320:	0002      	movs	r2, r0
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	1ad3      	subs	r3, r2, r3
 8005326:	4a3c      	ldr	r2, [pc, #240]	; (8005418 <HAL_RCC_ClockConfig+0x240>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d901      	bls.n	8005330 <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 800532c:	2303      	movs	r3, #3
 800532e:	e06b      	b.n	8005408 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005330:	4b38      	ldr	r3, [pc, #224]	; (8005414 <HAL_RCC_ClockConfig+0x23c>)
 8005332:	68db      	ldr	r3, [r3, #12]
 8005334:	220c      	movs	r2, #12
 8005336:	4013      	ands	r3, r2
 8005338:	2b04      	cmp	r3, #4
 800533a:	d1ef      	bne.n	800531c <HAL_RCC_ClockConfig+0x144>
 800533c:	e00e      	b.n	800535c <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800533e:	f7fe fd85 	bl	8003e4c <HAL_GetTick>
 8005342:	0002      	movs	r2, r0
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	1ad3      	subs	r3, r2, r3
 8005348:	4a33      	ldr	r2, [pc, #204]	; (8005418 <HAL_RCC_ClockConfig+0x240>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d901      	bls.n	8005352 <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 800534e:	2303      	movs	r3, #3
 8005350:	e05a      	b.n	8005408 <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005352:	4b30      	ldr	r3, [pc, #192]	; (8005414 <HAL_RCC_ClockConfig+0x23c>)
 8005354:	68db      	ldr	r3, [r3, #12]
 8005356:	220c      	movs	r2, #12
 8005358:	4013      	ands	r3, r2
 800535a:	d1f0      	bne.n	800533e <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800535c:	4b2c      	ldr	r3, [pc, #176]	; (8005410 <HAL_RCC_ClockConfig+0x238>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	2201      	movs	r2, #1
 8005362:	4013      	ands	r3, r2
 8005364:	683a      	ldr	r2, [r7, #0]
 8005366:	429a      	cmp	r2, r3
 8005368:	d211      	bcs.n	800538e <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800536a:	4b29      	ldr	r3, [pc, #164]	; (8005410 <HAL_RCC_ClockConfig+0x238>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	2201      	movs	r2, #1
 8005370:	4393      	bics	r3, r2
 8005372:	0019      	movs	r1, r3
 8005374:	4b26      	ldr	r3, [pc, #152]	; (8005410 <HAL_RCC_ClockConfig+0x238>)
 8005376:	683a      	ldr	r2, [r7, #0]
 8005378:	430a      	orrs	r2, r1
 800537a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800537c:	4b24      	ldr	r3, [pc, #144]	; (8005410 <HAL_RCC_ClockConfig+0x238>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	2201      	movs	r2, #1
 8005382:	4013      	ands	r3, r2
 8005384:	683a      	ldr	r2, [r7, #0]
 8005386:	429a      	cmp	r2, r3
 8005388:	d001      	beq.n	800538e <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 800538a:	2301      	movs	r3, #1
 800538c:	e03c      	b.n	8005408 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	2204      	movs	r2, #4
 8005394:	4013      	ands	r3, r2
 8005396:	d009      	beq.n	80053ac <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005398:	4b1e      	ldr	r3, [pc, #120]	; (8005414 <HAL_RCC_ClockConfig+0x23c>)
 800539a:	68db      	ldr	r3, [r3, #12]
 800539c:	4a1f      	ldr	r2, [pc, #124]	; (800541c <HAL_RCC_ClockConfig+0x244>)
 800539e:	4013      	ands	r3, r2
 80053a0:	0019      	movs	r1, r3
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	68da      	ldr	r2, [r3, #12]
 80053a6:	4b1b      	ldr	r3, [pc, #108]	; (8005414 <HAL_RCC_ClockConfig+0x23c>)
 80053a8:	430a      	orrs	r2, r1
 80053aa:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	2208      	movs	r2, #8
 80053b2:	4013      	ands	r3, r2
 80053b4:	d00a      	beq.n	80053cc <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80053b6:	4b17      	ldr	r3, [pc, #92]	; (8005414 <HAL_RCC_ClockConfig+0x23c>)
 80053b8:	68db      	ldr	r3, [r3, #12]
 80053ba:	4a19      	ldr	r2, [pc, #100]	; (8005420 <HAL_RCC_ClockConfig+0x248>)
 80053bc:	4013      	ands	r3, r2
 80053be:	0019      	movs	r1, r3
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	691b      	ldr	r3, [r3, #16]
 80053c4:	00da      	lsls	r2, r3, #3
 80053c6:	4b13      	ldr	r3, [pc, #76]	; (8005414 <HAL_RCC_ClockConfig+0x23c>)
 80053c8:	430a      	orrs	r2, r1
 80053ca:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80053cc:	f000 f82e 	bl	800542c <HAL_RCC_GetSysClockFreq>
 80053d0:	0001      	movs	r1, r0
 80053d2:	4b10      	ldr	r3, [pc, #64]	; (8005414 <HAL_RCC_ClockConfig+0x23c>)
 80053d4:	68db      	ldr	r3, [r3, #12]
 80053d6:	091b      	lsrs	r3, r3, #4
 80053d8:	220f      	movs	r2, #15
 80053da:	4013      	ands	r3, r2
 80053dc:	4a11      	ldr	r2, [pc, #68]	; (8005424 <HAL_RCC_ClockConfig+0x24c>)
 80053de:	5cd3      	ldrb	r3, [r2, r3]
 80053e0:	000a      	movs	r2, r1
 80053e2:	40da      	lsrs	r2, r3
 80053e4:	4b10      	ldr	r3, [pc, #64]	; (8005428 <HAL_RCC_ClockConfig+0x250>)
 80053e6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 80053e8:	250b      	movs	r5, #11
 80053ea:	197c      	adds	r4, r7, r5
 80053ec:	2000      	movs	r0, #0
 80053ee:	f7fe fcf9 	bl	8003de4 <HAL_InitTick>
 80053f2:	0003      	movs	r3, r0
 80053f4:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80053f6:	197b      	adds	r3, r7, r5
 80053f8:	781b      	ldrb	r3, [r3, #0]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d003      	beq.n	8005406 <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 80053fe:	230b      	movs	r3, #11
 8005400:	18fb      	adds	r3, r7, r3
 8005402:	781b      	ldrb	r3, [r3, #0]
 8005404:	e000      	b.n	8005408 <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 8005406:	2300      	movs	r3, #0
}
 8005408:	0018      	movs	r0, r3
 800540a:	46bd      	mov	sp, r7
 800540c:	b004      	add	sp, #16
 800540e:	bdb0      	pop	{r4, r5, r7, pc}
 8005410:	40022000 	.word	0x40022000
 8005414:	40021000 	.word	0x40021000
 8005418:	00001388 	.word	0x00001388
 800541c:	fffff8ff 	.word	0xfffff8ff
 8005420:	ffffc7ff 	.word	0xffffc7ff
 8005424:	08021380 	.word	0x08021380
 8005428:	2000005c 	.word	0x2000005c

0800542c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b086      	sub	sp, #24
 8005430:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8005432:	4b3b      	ldr	r3, [pc, #236]	; (8005520 <HAL_RCC_GetSysClockFreq+0xf4>)
 8005434:	68db      	ldr	r3, [r3, #12]
 8005436:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	220c      	movs	r2, #12
 800543c:	4013      	ands	r3, r2
 800543e:	2b08      	cmp	r3, #8
 8005440:	d00e      	beq.n	8005460 <HAL_RCC_GetSysClockFreq+0x34>
 8005442:	2b0c      	cmp	r3, #12
 8005444:	d00f      	beq.n	8005466 <HAL_RCC_GetSysClockFreq+0x3a>
 8005446:	2b04      	cmp	r3, #4
 8005448:	d157      	bne.n	80054fa <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800544a:	4b35      	ldr	r3, [pc, #212]	; (8005520 <HAL_RCC_GetSysClockFreq+0xf4>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	2210      	movs	r2, #16
 8005450:	4013      	ands	r3, r2
 8005452:	d002      	beq.n	800545a <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8005454:	4b33      	ldr	r3, [pc, #204]	; (8005524 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005456:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8005458:	e05d      	b.n	8005516 <HAL_RCC_GetSysClockFreq+0xea>
        sysclockfreq =  HSI_VALUE;
 800545a:	4b33      	ldr	r3, [pc, #204]	; (8005528 <HAL_RCC_GetSysClockFreq+0xfc>)
 800545c:	613b      	str	r3, [r7, #16]
      break;
 800545e:	e05a      	b.n	8005516 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005460:	4b32      	ldr	r3, [pc, #200]	; (800552c <HAL_RCC_GetSysClockFreq+0x100>)
 8005462:	613b      	str	r3, [r7, #16]
      break;
 8005464:	e057      	b.n	8005516 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	0c9b      	lsrs	r3, r3, #18
 800546a:	220f      	movs	r2, #15
 800546c:	4013      	ands	r3, r2
 800546e:	4a30      	ldr	r2, [pc, #192]	; (8005530 <HAL_RCC_GetSysClockFreq+0x104>)
 8005470:	5cd3      	ldrb	r3, [r2, r3]
 8005472:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	0d9b      	lsrs	r3, r3, #22
 8005478:	2203      	movs	r2, #3
 800547a:	4013      	ands	r3, r2
 800547c:	3301      	adds	r3, #1
 800547e:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005480:	4b27      	ldr	r3, [pc, #156]	; (8005520 <HAL_RCC_GetSysClockFreq+0xf4>)
 8005482:	68da      	ldr	r2, [r3, #12]
 8005484:	2380      	movs	r3, #128	; 0x80
 8005486:	025b      	lsls	r3, r3, #9
 8005488:	4013      	ands	r3, r2
 800548a:	d00f      	beq.n	80054ac <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 800548c:	68b9      	ldr	r1, [r7, #8]
 800548e:	000a      	movs	r2, r1
 8005490:	0152      	lsls	r2, r2, #5
 8005492:	1a52      	subs	r2, r2, r1
 8005494:	0193      	lsls	r3, r2, #6
 8005496:	1a9b      	subs	r3, r3, r2
 8005498:	00db      	lsls	r3, r3, #3
 800549a:	185b      	adds	r3, r3, r1
 800549c:	025b      	lsls	r3, r3, #9
 800549e:	6879      	ldr	r1, [r7, #4]
 80054a0:	0018      	movs	r0, r3
 80054a2:	f7fa fe39 	bl	8000118 <__udivsi3>
 80054a6:	0003      	movs	r3, r0
 80054a8:	617b      	str	r3, [r7, #20]
 80054aa:	e023      	b.n	80054f4 <HAL_RCC_GetSysClockFreq+0xc8>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80054ac:	4b1c      	ldr	r3, [pc, #112]	; (8005520 <HAL_RCC_GetSysClockFreq+0xf4>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	2210      	movs	r2, #16
 80054b2:	4013      	ands	r3, r2
 80054b4:	d00f      	beq.n	80054d6 <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 80054b6:	68b9      	ldr	r1, [r7, #8]
 80054b8:	000a      	movs	r2, r1
 80054ba:	0152      	lsls	r2, r2, #5
 80054bc:	1a52      	subs	r2, r2, r1
 80054be:	0193      	lsls	r3, r2, #6
 80054c0:	1a9b      	subs	r3, r3, r2
 80054c2:	00db      	lsls	r3, r3, #3
 80054c4:	185b      	adds	r3, r3, r1
 80054c6:	021b      	lsls	r3, r3, #8
 80054c8:	6879      	ldr	r1, [r7, #4]
 80054ca:	0018      	movs	r0, r3
 80054cc:	f7fa fe24 	bl	8000118 <__udivsi3>
 80054d0:	0003      	movs	r3, r0
 80054d2:	617b      	str	r3, [r7, #20]
 80054d4:	e00e      	b.n	80054f4 <HAL_RCC_GetSysClockFreq+0xc8>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 80054d6:	68b9      	ldr	r1, [r7, #8]
 80054d8:	000a      	movs	r2, r1
 80054da:	0152      	lsls	r2, r2, #5
 80054dc:	1a52      	subs	r2, r2, r1
 80054de:	0193      	lsls	r3, r2, #6
 80054e0:	1a9b      	subs	r3, r3, r2
 80054e2:	00db      	lsls	r3, r3, #3
 80054e4:	185b      	adds	r3, r3, r1
 80054e6:	029b      	lsls	r3, r3, #10
 80054e8:	6879      	ldr	r1, [r7, #4]
 80054ea:	0018      	movs	r0, r3
 80054ec:	f7fa fe14 	bl	8000118 <__udivsi3>
 80054f0:	0003      	movs	r3, r0
 80054f2:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	613b      	str	r3, [r7, #16]
      break;
 80054f8:	e00d      	b.n	8005516 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80054fa:	4b09      	ldr	r3, [pc, #36]	; (8005520 <HAL_RCC_GetSysClockFreq+0xf4>)
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	0b5b      	lsrs	r3, r3, #13
 8005500:	2207      	movs	r2, #7
 8005502:	4013      	ands	r3, r2
 8005504:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	3301      	adds	r3, #1
 800550a:	2280      	movs	r2, #128	; 0x80
 800550c:	0212      	lsls	r2, r2, #8
 800550e:	409a      	lsls	r2, r3
 8005510:	0013      	movs	r3, r2
 8005512:	613b      	str	r3, [r7, #16]
      break;
 8005514:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8005516:	693b      	ldr	r3, [r7, #16]
}
 8005518:	0018      	movs	r0, r3
 800551a:	46bd      	mov	sp, r7
 800551c:	b006      	add	sp, #24
 800551e:	bd80      	pop	{r7, pc}
 8005520:	40021000 	.word	0x40021000
 8005524:	003d0900 	.word	0x003d0900
 8005528:	00f42400 	.word	0x00f42400
 800552c:	007a1200 	.word	0x007a1200
 8005530:	08021398 	.word	0x08021398

08005534 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005538:	4b02      	ldr	r3, [pc, #8]	; (8005544 <HAL_RCC_GetHCLKFreq+0x10>)
 800553a:	681b      	ldr	r3, [r3, #0]
}
 800553c:	0018      	movs	r0, r3
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}
 8005542:	46c0      	nop			; (mov r8, r8)
 8005544:	2000005c 	.word	0x2000005c

08005548 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800554c:	f7ff fff2 	bl	8005534 <HAL_RCC_GetHCLKFreq>
 8005550:	0001      	movs	r1, r0
 8005552:	4b06      	ldr	r3, [pc, #24]	; (800556c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005554:	68db      	ldr	r3, [r3, #12]
 8005556:	0a1b      	lsrs	r3, r3, #8
 8005558:	2207      	movs	r2, #7
 800555a:	4013      	ands	r3, r2
 800555c:	4a04      	ldr	r2, [pc, #16]	; (8005570 <HAL_RCC_GetPCLK1Freq+0x28>)
 800555e:	5cd3      	ldrb	r3, [r2, r3]
 8005560:	40d9      	lsrs	r1, r3
 8005562:	000b      	movs	r3, r1
}
 8005564:	0018      	movs	r0, r3
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}
 800556a:	46c0      	nop			; (mov r8, r8)
 800556c:	40021000 	.word	0x40021000
 8005570:	08021390 	.word	0x08021390

08005574 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005578:	f7ff ffdc 	bl	8005534 <HAL_RCC_GetHCLKFreq>
 800557c:	0001      	movs	r1, r0
 800557e:	4b06      	ldr	r3, [pc, #24]	; (8005598 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005580:	68db      	ldr	r3, [r3, #12]
 8005582:	0adb      	lsrs	r3, r3, #11
 8005584:	2207      	movs	r2, #7
 8005586:	4013      	ands	r3, r2
 8005588:	4a04      	ldr	r2, [pc, #16]	; (800559c <HAL_RCC_GetPCLK2Freq+0x28>)
 800558a:	5cd3      	ldrb	r3, [r2, r3]
 800558c:	40d9      	lsrs	r1, r3
 800558e:	000b      	movs	r3, r1
}
 8005590:	0018      	movs	r0, r3
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}
 8005596:	46c0      	nop			; (mov r8, r8)
 8005598:	40021000 	.word	0x40021000
 800559c:	08021390 	.word	0x08021390

080055a0 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b086      	sub	sp, #24
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	2220      	movs	r2, #32
 80055ae:	4013      	ands	r3, r2
 80055b0:	d100      	bne.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0x14>
 80055b2:	e0c7      	b.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 80055b4:	2317      	movs	r3, #23
 80055b6:	18fb      	adds	r3, r7, r3
 80055b8:	2200      	movs	r2, #0
 80055ba:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055bc:	4b99      	ldr	r3, [pc, #612]	; (8005824 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80055be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055c0:	2380      	movs	r3, #128	; 0x80
 80055c2:	055b      	lsls	r3, r3, #21
 80055c4:	4013      	ands	r3, r2
 80055c6:	d10a      	bne.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x3e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055c8:	4b96      	ldr	r3, [pc, #600]	; (8005824 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80055ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055cc:	4b95      	ldr	r3, [pc, #596]	; (8005824 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80055ce:	2180      	movs	r1, #128	; 0x80
 80055d0:	0549      	lsls	r1, r1, #21
 80055d2:	430a      	orrs	r2, r1
 80055d4:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80055d6:	2317      	movs	r3, #23
 80055d8:	18fb      	adds	r3, r7, r3
 80055da:	2201      	movs	r2, #1
 80055dc:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055de:	4b92      	ldr	r3, [pc, #584]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80055e0:	681a      	ldr	r2, [r3, #0]
 80055e2:	2380      	movs	r3, #128	; 0x80
 80055e4:	005b      	lsls	r3, r3, #1
 80055e6:	4013      	ands	r3, r2
 80055e8:	d11a      	bne.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80055ea:	4b8f      	ldr	r3, [pc, #572]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	4b8e      	ldr	r3, [pc, #568]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80055f0:	2180      	movs	r1, #128	; 0x80
 80055f2:	0049      	lsls	r1, r1, #1
 80055f4:	430a      	orrs	r2, r1
 80055f6:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80055f8:	f7fe fc28 	bl	8003e4c <HAL_GetTick>
 80055fc:	0003      	movs	r3, r0
 80055fe:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005600:	e008      	b.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x74>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005602:	f7fe fc23 	bl	8003e4c <HAL_GetTick>
 8005606:	0002      	movs	r2, r0
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	1ad3      	subs	r3, r2, r3
 800560c:	2b64      	cmp	r3, #100	; 0x64
 800560e:	d901      	bls.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x74>
        {
          return HAL_TIMEOUT;
 8005610:	2303      	movs	r3, #3
 8005612:	e102      	b.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x27a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005614:	4b84      	ldr	r3, [pc, #528]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005616:	681a      	ldr	r2, [r3, #0]
 8005618:	2380      	movs	r3, #128	; 0x80
 800561a:	005b      	lsls	r3, r3, #1
 800561c:	4013      	ands	r3, r2
 800561e:	d0f0      	beq.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x62>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8005620:	4b80      	ldr	r3, [pc, #512]	; (8005824 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005622:	681a      	ldr	r2, [r3, #0]
 8005624:	23c0      	movs	r3, #192	; 0xc0
 8005626:	039b      	lsls	r3, r3, #14
 8005628:	4013      	ands	r3, r2
 800562a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	685a      	ldr	r2, [r3, #4]
 8005630:	23c0      	movs	r3, #192	; 0xc0
 8005632:	039b      	lsls	r3, r3, #14
 8005634:	4013      	ands	r3, r2
 8005636:	68fa      	ldr	r2, [r7, #12]
 8005638:	429a      	cmp	r2, r3
 800563a:	d013      	beq.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0xc4>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	685a      	ldr	r2, [r3, #4]
 8005640:	23c0      	movs	r3, #192	; 0xc0
 8005642:	029b      	lsls	r3, r3, #10
 8005644:	401a      	ands	r2, r3
 8005646:	23c0      	movs	r3, #192	; 0xc0
 8005648:	029b      	lsls	r3, r3, #10
 800564a:	429a      	cmp	r2, r3
 800564c:	d10a      	bne.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0xc4>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800564e:	4b75      	ldr	r3, [pc, #468]	; (8005824 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005650:	681a      	ldr	r2, [r3, #0]
 8005652:	2380      	movs	r3, #128	; 0x80
 8005654:	029b      	lsls	r3, r3, #10
 8005656:	401a      	ands	r2, r3
 8005658:	2380      	movs	r3, #128	; 0x80
 800565a:	029b      	lsls	r3, r3, #10
 800565c:	429a      	cmp	r2, r3
 800565e:	d101      	bne.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0xc4>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8005660:	2301      	movs	r3, #1
 8005662:	e0da      	b.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x27a>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8005664:	4b6f      	ldr	r3, [pc, #444]	; (8005824 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005666:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005668:	23c0      	movs	r3, #192	; 0xc0
 800566a:	029b      	lsls	r3, r3, #10
 800566c:	4013      	ands	r3, r2
 800566e:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d03b      	beq.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	685a      	ldr	r2, [r3, #4]
 800567a:	23c0      	movs	r3, #192	; 0xc0
 800567c:	029b      	lsls	r3, r3, #10
 800567e:	4013      	ands	r3, r2
 8005680:	68fa      	ldr	r2, [r7, #12]
 8005682:	429a      	cmp	r2, r3
 8005684:	d033      	beq.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0x14e>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	2220      	movs	r2, #32
 800568c:	4013      	ands	r3, r2
 800568e:	d02e      	beq.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0x14e>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8005690:	4b64      	ldr	r3, [pc, #400]	; (8005824 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005692:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005694:	4a65      	ldr	r2, [pc, #404]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005696:	4013      	ands	r3, r2
 8005698:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800569a:	4b62      	ldr	r3, [pc, #392]	; (8005824 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800569c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800569e:	4b61      	ldr	r3, [pc, #388]	; (8005824 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80056a0:	2180      	movs	r1, #128	; 0x80
 80056a2:	0309      	lsls	r1, r1, #12
 80056a4:	430a      	orrs	r2, r1
 80056a6:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80056a8:	4b5e      	ldr	r3, [pc, #376]	; (8005824 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80056aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80056ac:	4b5d      	ldr	r3, [pc, #372]	; (8005824 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80056ae:	4960      	ldr	r1, [pc, #384]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80056b0:	400a      	ands	r2, r1
 80056b2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80056b4:	4b5b      	ldr	r3, [pc, #364]	; (8005824 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80056b6:	68fa      	ldr	r2, [r7, #12]
 80056b8:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80056ba:	68fa      	ldr	r2, [r7, #12]
 80056bc:	2380      	movs	r3, #128	; 0x80
 80056be:	005b      	lsls	r3, r3, #1
 80056c0:	4013      	ands	r3, r2
 80056c2:	d014      	beq.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056c4:	f7fe fbc2 	bl	8003e4c <HAL_GetTick>
 80056c8:	0003      	movs	r3, r0
 80056ca:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80056cc:	e009      	b.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x142>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056ce:	f7fe fbbd 	bl	8003e4c <HAL_GetTick>
 80056d2:	0002      	movs	r2, r0
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	1ad3      	subs	r3, r2, r3
 80056d8:	4a56      	ldr	r2, [pc, #344]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d901      	bls.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x142>
          {
            return HAL_TIMEOUT;
 80056de:	2303      	movs	r3, #3
 80056e0:	e09b      	b.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x27a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80056e2:	4b50      	ldr	r3, [pc, #320]	; (8005824 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80056e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80056e6:	2380      	movs	r3, #128	; 0x80
 80056e8:	009b      	lsls	r3, r3, #2
 80056ea:	4013      	ands	r3, r2
 80056ec:	d0ef      	beq.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0x12e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	685a      	ldr	r2, [r3, #4]
 80056f2:	23c0      	movs	r3, #192	; 0xc0
 80056f4:	029b      	lsls	r3, r3, #10
 80056f6:	401a      	ands	r2, r3
 80056f8:	23c0      	movs	r3, #192	; 0xc0
 80056fa:	029b      	lsls	r3, r3, #10
 80056fc:	429a      	cmp	r2, r3
 80056fe:	d10c      	bne.n	800571a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8005700:	4b48      	ldr	r3, [pc, #288]	; (8005824 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a4c      	ldr	r2, [pc, #304]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8005706:	4013      	ands	r3, r2
 8005708:	0019      	movs	r1, r3
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	685a      	ldr	r2, [r3, #4]
 800570e:	23c0      	movs	r3, #192	; 0xc0
 8005710:	039b      	lsls	r3, r3, #14
 8005712:	401a      	ands	r2, r3
 8005714:	4b43      	ldr	r3, [pc, #268]	; (8005824 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005716:	430a      	orrs	r2, r1
 8005718:	601a      	str	r2, [r3, #0]
 800571a:	4b42      	ldr	r3, [pc, #264]	; (8005824 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800571c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	685a      	ldr	r2, [r3, #4]
 8005722:	23c0      	movs	r3, #192	; 0xc0
 8005724:	029b      	lsls	r3, r3, #10
 8005726:	401a      	ands	r2, r3
 8005728:	4b3e      	ldr	r3, [pc, #248]	; (8005824 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800572a:	430a      	orrs	r2, r1
 800572c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800572e:	2317      	movs	r3, #23
 8005730:	18fb      	adds	r3, r7, r3
 8005732:	781b      	ldrb	r3, [r3, #0]
 8005734:	2b01      	cmp	r3, #1
 8005736:	d105      	bne.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005738:	4b3a      	ldr	r3, [pc, #232]	; (8005824 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800573a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800573c:	4b39      	ldr	r3, [pc, #228]	; (8005824 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800573e:	493f      	ldr	r1, [pc, #252]	; (800583c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005740:	400a      	ands	r2, r1
 8005742:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	2201      	movs	r2, #1
 800574a:	4013      	ands	r3, r2
 800574c:	d009      	beq.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800574e:	4b35      	ldr	r3, [pc, #212]	; (8005824 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005752:	2203      	movs	r2, #3
 8005754:	4393      	bics	r3, r2
 8005756:	0019      	movs	r1, r3
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	689a      	ldr	r2, [r3, #8]
 800575c:	4b31      	ldr	r3, [pc, #196]	; (8005824 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800575e:	430a      	orrs	r2, r1
 8005760:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	2202      	movs	r2, #2
 8005768:	4013      	ands	r3, r2
 800576a:	d009      	beq.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800576c:	4b2d      	ldr	r3, [pc, #180]	; (8005824 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800576e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005770:	220c      	movs	r2, #12
 8005772:	4393      	bics	r3, r2
 8005774:	0019      	movs	r1, r3
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	68da      	ldr	r2, [r3, #12]
 800577a:	4b2a      	ldr	r3, [pc, #168]	; (8005824 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800577c:	430a      	orrs	r2, r1
 800577e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	2204      	movs	r2, #4
 8005786:	4013      	ands	r3, r2
 8005788:	d009      	beq.n	800579e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800578a:	4b26      	ldr	r3, [pc, #152]	; (8005824 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800578c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800578e:	4a2c      	ldr	r2, [pc, #176]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8005790:	4013      	ands	r3, r2
 8005792:	0019      	movs	r1, r3
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	691a      	ldr	r2, [r3, #16]
 8005798:	4b22      	ldr	r3, [pc, #136]	; (8005824 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800579a:	430a      	orrs	r2, r1
 800579c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	2208      	movs	r2, #8
 80057a4:	4013      	ands	r3, r2
 80057a6:	d009      	beq.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80057a8:	4b1e      	ldr	r3, [pc, #120]	; (8005824 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80057aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057ac:	4a25      	ldr	r2, [pc, #148]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 80057ae:	4013      	ands	r3, r2
 80057b0:	0019      	movs	r1, r3
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	695a      	ldr	r2, [r3, #20]
 80057b6:	4b1b      	ldr	r3, [pc, #108]	; (8005824 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80057b8:	430a      	orrs	r2, r1
 80057ba:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681a      	ldr	r2, [r3, #0]
 80057c0:	2380      	movs	r3, #128	; 0x80
 80057c2:	005b      	lsls	r3, r3, #1
 80057c4:	4013      	ands	r3, r2
 80057c6:	d009      	beq.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80057c8:	4b16      	ldr	r3, [pc, #88]	; (8005824 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80057ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057cc:	4a17      	ldr	r2, [pc, #92]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80057ce:	4013      	ands	r3, r2
 80057d0:	0019      	movs	r1, r3
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	699a      	ldr	r2, [r3, #24]
 80057d6:	4b13      	ldr	r3, [pc, #76]	; (8005824 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80057d8:	430a      	orrs	r2, r1
 80057da:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	2240      	movs	r2, #64	; 0x40
 80057e2:	4013      	ands	r3, r2
 80057e4:	d009      	beq.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80057e6:	4b0f      	ldr	r3, [pc, #60]	; (8005824 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80057e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057ea:	4a17      	ldr	r2, [pc, #92]	; (8005848 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 80057ec:	4013      	ands	r3, r2
 80057ee:	0019      	movs	r1, r3
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6a1a      	ldr	r2, [r3, #32]
 80057f4:	4b0b      	ldr	r3, [pc, #44]	; (8005824 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80057f6:	430a      	orrs	r2, r1
 80057f8:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	2280      	movs	r2, #128	; 0x80
 8005800:	4013      	ands	r3, r2
 8005802:	d009      	beq.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8005804:	4b07      	ldr	r3, [pc, #28]	; (8005824 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005806:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005808:	4a10      	ldr	r2, [pc, #64]	; (800584c <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 800580a:	4013      	ands	r3, r2
 800580c:	0019      	movs	r1, r3
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	69da      	ldr	r2, [r3, #28]
 8005812:	4b04      	ldr	r3, [pc, #16]	; (8005824 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005814:	430a      	orrs	r2, r1
 8005816:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8005818:	2300      	movs	r3, #0
}
 800581a:	0018      	movs	r0, r3
 800581c:	46bd      	mov	sp, r7
 800581e:	b006      	add	sp, #24
 8005820:	bd80      	pop	{r7, pc}
 8005822:	46c0      	nop			; (mov r8, r8)
 8005824:	40021000 	.word	0x40021000
 8005828:	40007000 	.word	0x40007000
 800582c:	fffcffff 	.word	0xfffcffff
 8005830:	fff7ffff 	.word	0xfff7ffff
 8005834:	00001388 	.word	0x00001388
 8005838:	ffcfffff 	.word	0xffcfffff
 800583c:	efffffff 	.word	0xefffffff
 8005840:	fffff3ff 	.word	0xfffff3ff
 8005844:	ffffcfff 	.word	0xffffcfff
 8005848:	fbffffff 	.word	0xfbffffff
 800584c:	fff3ffff 	.word	0xfff3ffff

08005850 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b082      	sub	sp, #8
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d101      	bne.n	8005862 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	e08e      	b.n	8005980 <HAL_RTC_Init+0x130>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2221      	movs	r2, #33	; 0x21
 8005866:	5c9b      	ldrb	r3, [r3, r2]
 8005868:	b2db      	uxtb	r3, r3
 800586a:	2b00      	cmp	r3, #0
 800586c:	d107      	bne.n	800587e <HAL_RTC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2220      	movs	r2, #32
 8005872:	2100      	movs	r1, #0
 8005874:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	0018      	movs	r0, r3
 800587a:	f7fd ff97 	bl	80037ac <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2221      	movs	r2, #33	; 0x21
 8005882:	2102      	movs	r1, #2
 8005884:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	22ca      	movs	r2, #202	; 0xca
 800588c:	625a      	str	r2, [r3, #36]	; 0x24
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	2253      	movs	r2, #83	; 0x53
 8005894:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	0018      	movs	r0, r3
 800589a:	f000 fc5c 	bl	8006156 <RTC_EnterInitMode>
 800589e:	1e03      	subs	r3, r0, #0
 80058a0:	d009      	beq.n	80058b6 <HAL_RTC_Init+0x66>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	22ff      	movs	r2, #255	; 0xff
 80058a8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2221      	movs	r2, #33	; 0x21
 80058ae:	2104      	movs	r1, #4
 80058b0:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80058b2:	2301      	movs	r3, #1
 80058b4:	e064      	b.n	8005980 <HAL_RTC_Init+0x130>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	689a      	ldr	r2, [r3, #8]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4931      	ldr	r1, [pc, #196]	; (8005988 <HAL_RTC_Init+0x138>)
 80058c2:	400a      	ands	r2, r1
 80058c4:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	6899      	ldr	r1, [r3, #8]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	685a      	ldr	r2, [r3, #4]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	691b      	ldr	r3, [r3, #16]
 80058d4:	431a      	orrs	r2, r3
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	699b      	ldr	r3, [r3, #24]
 80058da:	431a      	orrs	r2, r3
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	430a      	orrs	r2, r1
 80058e2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	687a      	ldr	r2, [r7, #4]
 80058ea:	68d2      	ldr	r2, [r2, #12]
 80058ec:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	6919      	ldr	r1, [r3, #16]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	689b      	ldr	r3, [r3, #8]
 80058f8:	041a      	lsls	r2, r3, #16
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	430a      	orrs	r2, r1
 8005900:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	68da      	ldr	r2, [r3, #12]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	2180      	movs	r1, #128	; 0x80
 800590e:	438a      	bics	r2, r1
 8005910:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	2103      	movs	r1, #3
 800591e:	438a      	bics	r2, r1
 8005920:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	69da      	ldr	r2, [r3, #28]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	695b      	ldr	r3, [r3, #20]
 8005930:	431a      	orrs	r2, r3
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	430a      	orrs	r2, r1
 8005938:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	689b      	ldr	r3, [r3, #8]
 8005940:	2220      	movs	r2, #32
 8005942:	4013      	ands	r3, r2
 8005944:	d113      	bne.n	800596e <HAL_RTC_Init+0x11e>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	0018      	movs	r0, r3
 800594a:	f000 fbdd 	bl	8006108 <HAL_RTC_WaitForSynchro>
 800594e:	1e03      	subs	r3, r0, #0
 8005950:	d00d      	beq.n	800596e <HAL_RTC_Init+0x11e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	22ff      	movs	r2, #255	; 0xff
 8005958:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2221      	movs	r2, #33	; 0x21
 800595e:	2104      	movs	r1, #4
 8005960:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2220      	movs	r2, #32
 8005966:	2100      	movs	r1, #0
 8005968:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800596a:	2301      	movs	r3, #1
 800596c:	e008      	b.n	8005980 <HAL_RTC_Init+0x130>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	22ff      	movs	r2, #255	; 0xff
 8005974:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2221      	movs	r2, #33	; 0x21
 800597a:	2101      	movs	r1, #1
 800597c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800597e:	2300      	movs	r3, #0
  }
}
 8005980:	0018      	movs	r0, r3
 8005982:	46bd      	mov	sp, r7
 8005984:	b002      	add	sp, #8
 8005986:	bd80      	pop	{r7, pc}
 8005988:	ff8fffbf 	.word	0xff8fffbf

0800598c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800598c:	b590      	push	{r4, r7, lr}
 800598e:	b087      	sub	sp, #28
 8005990:	af00      	add	r7, sp, #0
 8005992:	60f8      	str	r0, [r7, #12]
 8005994:	60b9      	str	r1, [r7, #8]
 8005996:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	2220      	movs	r2, #32
 800599c:	5c9b      	ldrb	r3, [r3, r2]
 800599e:	2b01      	cmp	r3, #1
 80059a0:	d101      	bne.n	80059a6 <HAL_RTC_SetTime+0x1a>
 80059a2:	2302      	movs	r3, #2
 80059a4:	e0ad      	b.n	8005b02 <HAL_RTC_SetTime+0x176>
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2220      	movs	r2, #32
 80059aa:	2101      	movs	r1, #1
 80059ac:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2221      	movs	r2, #33	; 0x21
 80059b2:	2102      	movs	r1, #2
 80059b4:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d125      	bne.n	8005a08 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	689b      	ldr	r3, [r3, #8]
 80059c2:	2240      	movs	r2, #64	; 0x40
 80059c4:	4013      	ands	r3, r2
 80059c6:	d102      	bne.n	80059ce <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	2200      	movs	r2, #0
 80059cc:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	781b      	ldrb	r3, [r3, #0]
 80059d2:	0018      	movs	r0, r3
 80059d4:	f000 fbe9 	bl	80061aa <RTC_ByteToBcd2>
 80059d8:	0003      	movs	r3, r0
 80059da:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	785b      	ldrb	r3, [r3, #1]
 80059e0:	0018      	movs	r0, r3
 80059e2:	f000 fbe2 	bl	80061aa <RTC_ByteToBcd2>
 80059e6:	0003      	movs	r3, r0
 80059e8:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80059ea:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	789b      	ldrb	r3, [r3, #2]
 80059f0:	0018      	movs	r0, r3
 80059f2:	f000 fbda 	bl	80061aa <RTC_ByteToBcd2>
 80059f6:	0003      	movs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80059f8:	0022      	movs	r2, r4
 80059fa:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	78db      	ldrb	r3, [r3, #3]
 8005a00:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005a02:	4313      	orrs	r3, r2
 8005a04:	617b      	str	r3, [r7, #20]
 8005a06:	e017      	b.n	8005a38 <HAL_RTC_SetTime+0xac>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	689b      	ldr	r3, [r3, #8]
 8005a0e:	2240      	movs	r2, #64	; 0x40
 8005a10:	4013      	ands	r3, r2
 8005a12:	d102      	bne.n	8005a1a <HAL_RTC_SetTime+0x8e>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	2200      	movs	r2, #0
 8005a18:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	781b      	ldrb	r3, [r3, #0]
 8005a1e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	785b      	ldrb	r3, [r3, #1]
 8005a24:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005a26:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8005a28:	68ba      	ldr	r2, [r7, #8]
 8005a2a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8005a2c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	78db      	ldrb	r3, [r3, #3]
 8005a32:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005a34:	4313      	orrs	r3, r2
 8005a36:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	22ca      	movs	r2, #202	; 0xca
 8005a3e:	625a      	str	r2, [r3, #36]	; 0x24
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	2253      	movs	r2, #83	; 0x53
 8005a46:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	0018      	movs	r0, r3
 8005a4c:	f000 fb83 	bl	8006156 <RTC_EnterInitMode>
 8005a50:	1e03      	subs	r3, r0, #0
 8005a52:	d00d      	beq.n	8005a70 <HAL_RTC_SetTime+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	22ff      	movs	r2, #255	; 0xff
 8005a5a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2221      	movs	r2, #33	; 0x21
 8005a60:	2104      	movs	r1, #4
 8005a62:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2220      	movs	r2, #32
 8005a68:	2100      	movs	r1, #0
 8005a6a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	e048      	b.n	8005b02 <HAL_RTC_SetTime+0x176>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	697a      	ldr	r2, [r7, #20]
 8005a76:	4925      	ldr	r1, [pc, #148]	; (8005b0c <HAL_RTC_SetTime+0x180>)
 8005a78:	400a      	ands	r2, r1
 8005a7a:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	689a      	ldr	r2, [r3, #8]
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4922      	ldr	r1, [pc, #136]	; (8005b10 <HAL_RTC_SetTime+0x184>)
 8005a88:	400a      	ands	r2, r1
 8005a8a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	6899      	ldr	r1, [r3, #8]
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	68da      	ldr	r2, [r3, #12]
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	691b      	ldr	r3, [r3, #16]
 8005a9a:	431a      	orrs	r2, r3
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	430a      	orrs	r2, r1
 8005aa2:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	68da      	ldr	r2, [r3, #12]
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	2180      	movs	r1, #128	; 0x80
 8005ab0:	438a      	bics	r2, r1
 8005ab2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	689b      	ldr	r3, [r3, #8]
 8005aba:	2220      	movs	r2, #32
 8005abc:	4013      	ands	r3, r2
 8005abe:	d113      	bne.n	8005ae8 <HAL_RTC_SetTime+0x15c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	0018      	movs	r0, r3
 8005ac4:	f000 fb20 	bl	8006108 <HAL_RTC_WaitForSynchro>
 8005ac8:	1e03      	subs	r3, r0, #0
 8005aca:	d00d      	beq.n	8005ae8 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	22ff      	movs	r2, #255	; 0xff
 8005ad2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2221      	movs	r2, #33	; 0x21
 8005ad8:	2104      	movs	r1, #4
 8005ada:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	2220      	movs	r2, #32
 8005ae0:	2100      	movs	r1, #0
 8005ae2:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	e00c      	b.n	8005b02 <HAL_RTC_SetTime+0x176>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	22ff      	movs	r2, #255	; 0xff
 8005aee:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	2221      	movs	r2, #33	; 0x21
 8005af4:	2101      	movs	r1, #1
 8005af6:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hrtc);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2220      	movs	r2, #32
 8005afc:	2100      	movs	r1, #0
 8005afe:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005b00:	2300      	movs	r3, #0
  }
}
 8005b02:	0018      	movs	r0, r3
 8005b04:	46bd      	mov	sp, r7
 8005b06:	b007      	add	sp, #28
 8005b08:	bd90      	pop	{r4, r7, pc}
 8005b0a:	46c0      	nop			; (mov r8, r8)
 8005b0c:	007f7f7f 	.word	0x007f7f7f
 8005b10:	fffbffff 	.word	0xfffbffff

08005b14 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b086      	sub	sp, #24
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	60f8      	str	r0, [r7, #12]
 8005b1c:	60b9      	str	r1, [r7, #8]
 8005b1e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	691b      	ldr	r3, [r3, #16]
 8005b30:	045b      	lsls	r3, r3, #17
 8005b32:	0c5a      	lsrs	r2, r3, #17
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a22      	ldr	r2, [pc, #136]	; (8005bc8 <HAL_RTC_GetTime+0xb4>)
 8005b40:	4013      	ands	r3, r2
 8005b42:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	0c1b      	lsrs	r3, r3, #16
 8005b48:	b2db      	uxtb	r3, r3
 8005b4a:	223f      	movs	r2, #63	; 0x3f
 8005b4c:	4013      	ands	r3, r2
 8005b4e:	b2da      	uxtb	r2, r3
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	0a1b      	lsrs	r3, r3, #8
 8005b58:	b2db      	uxtb	r3, r3
 8005b5a:	227f      	movs	r2, #127	; 0x7f
 8005b5c:	4013      	ands	r3, r2
 8005b5e:	b2da      	uxtb	r2, r3
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	b2db      	uxtb	r3, r3
 8005b68:	227f      	movs	r2, #127	; 0x7f
 8005b6a:	4013      	ands	r3, r2
 8005b6c:	b2da      	uxtb	r2, r3
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	0c1b      	lsrs	r3, r3, #16
 8005b76:	b2db      	uxtb	r3, r3
 8005b78:	2240      	movs	r2, #64	; 0x40
 8005b7a:	4013      	ands	r3, r2
 8005b7c:	b2da      	uxtb	r2, r3
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d11a      	bne.n	8005bbe <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	781b      	ldrb	r3, [r3, #0]
 8005b8c:	0018      	movs	r0, r3
 8005b8e:	f000 fb35 	bl	80061fc <RTC_Bcd2ToByte>
 8005b92:	0003      	movs	r3, r0
 8005b94:	001a      	movs	r2, r3
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	785b      	ldrb	r3, [r3, #1]
 8005b9e:	0018      	movs	r0, r3
 8005ba0:	f000 fb2c 	bl	80061fc <RTC_Bcd2ToByte>
 8005ba4:	0003      	movs	r3, r0
 8005ba6:	001a      	movs	r2, r3
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	789b      	ldrb	r3, [r3, #2]
 8005bb0:	0018      	movs	r0, r3
 8005bb2:	f000 fb23 	bl	80061fc <RTC_Bcd2ToByte>
 8005bb6:	0003      	movs	r3, r0
 8005bb8:	001a      	movs	r2, r3
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005bbe:	2300      	movs	r3, #0
}
 8005bc0:	0018      	movs	r0, r3
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	b006      	add	sp, #24
 8005bc6:	bd80      	pop	{r7, pc}
 8005bc8:	007f7f7f 	.word	0x007f7f7f

08005bcc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005bcc:	b590      	push	{r4, r7, lr}
 8005bce:	b087      	sub	sp, #28
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	60f8      	str	r0, [r7, #12]
 8005bd4:	60b9      	str	r1, [r7, #8]
 8005bd6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	2220      	movs	r2, #32
 8005bdc:	5c9b      	ldrb	r3, [r3, r2]
 8005bde:	2b01      	cmp	r3, #1
 8005be0:	d101      	bne.n	8005be6 <HAL_RTC_SetDate+0x1a>
 8005be2:	2302      	movs	r3, #2
 8005be4:	e099      	b.n	8005d1a <HAL_RTC_SetDate+0x14e>
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	2220      	movs	r2, #32
 8005bea:	2101      	movs	r1, #1
 8005bec:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	2221      	movs	r2, #33	; 0x21
 8005bf2:	2102      	movs	r1, #2
 8005bf4:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d10e      	bne.n	8005c1a <HAL_RTC_SetDate+0x4e>
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	785b      	ldrb	r3, [r3, #1]
 8005c00:	001a      	movs	r2, r3
 8005c02:	2310      	movs	r3, #16
 8005c04:	4013      	ands	r3, r2
 8005c06:	d008      	beq.n	8005c1a <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	785b      	ldrb	r3, [r3, #1]
 8005c0c:	2210      	movs	r2, #16
 8005c0e:	4393      	bics	r3, r2
 8005c10:	b2db      	uxtb	r3, r3
 8005c12:	330a      	adds	r3, #10
 8005c14:	b2da      	uxtb	r2, r3
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d11c      	bne.n	8005c5a <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	78db      	ldrb	r3, [r3, #3]
 8005c24:	0018      	movs	r0, r3
 8005c26:	f000 fac0 	bl	80061aa <RTC_ByteToBcd2>
 8005c2a:	0003      	movs	r3, r0
 8005c2c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	785b      	ldrb	r3, [r3, #1]
 8005c32:	0018      	movs	r0, r3
 8005c34:	f000 fab9 	bl	80061aa <RTC_ByteToBcd2>
 8005c38:	0003      	movs	r3, r0
 8005c3a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005c3c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	789b      	ldrb	r3, [r3, #2]
 8005c42:	0018      	movs	r0, r3
 8005c44:	f000 fab1 	bl	80061aa <RTC_ByteToBcd2>
 8005c48:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8005c4a:	0022      	movs	r2, r4
 8005c4c:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	781b      	ldrb	r3, [r3, #0]
 8005c52:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005c54:	4313      	orrs	r3, r2
 8005c56:	617b      	str	r3, [r7, #20]
 8005c58:	e00e      	b.n	8005c78 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	78db      	ldrb	r3, [r3, #3]
 8005c5e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	785b      	ldrb	r3, [r3, #1]
 8005c64:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005c66:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8005c68:	68ba      	ldr	r2, [r7, #8]
 8005c6a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8005c6c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	781b      	ldrb	r3, [r3, #0]
 8005c72:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005c74:	4313      	orrs	r3, r2
 8005c76:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	22ca      	movs	r2, #202	; 0xca
 8005c7e:	625a      	str	r2, [r3, #36]	; 0x24
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	2253      	movs	r2, #83	; 0x53
 8005c86:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	0018      	movs	r0, r3
 8005c8c:	f000 fa63 	bl	8006156 <RTC_EnterInitMode>
 8005c90:	1e03      	subs	r3, r0, #0
 8005c92:	d00d      	beq.n	8005cb0 <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	22ff      	movs	r2, #255	; 0xff
 8005c9a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	2221      	movs	r2, #33	; 0x21
 8005ca0:	2104      	movs	r1, #4
 8005ca2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	2220      	movs	r2, #32
 8005ca8:	2100      	movs	r1, #0
 8005caa:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8005cac:	2301      	movs	r3, #1
 8005cae:	e034      	b.n	8005d1a <HAL_RTC_SetDate+0x14e>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	697a      	ldr	r2, [r7, #20]
 8005cb6:	491b      	ldr	r1, [pc, #108]	; (8005d24 <HAL_RTC_SetDate+0x158>)
 8005cb8:	400a      	ands	r2, r1
 8005cba:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	68da      	ldr	r2, [r3, #12]
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	2180      	movs	r1, #128	; 0x80
 8005cc8:	438a      	bics	r2, r1
 8005cca:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	689b      	ldr	r3, [r3, #8]
 8005cd2:	2220      	movs	r2, #32
 8005cd4:	4013      	ands	r3, r2
 8005cd6:	d113      	bne.n	8005d00 <HAL_RTC_SetDate+0x134>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	0018      	movs	r0, r3
 8005cdc:	f000 fa14 	bl	8006108 <HAL_RTC_WaitForSynchro>
 8005ce0:	1e03      	subs	r3, r0, #0
 8005ce2:	d00d      	beq.n	8005d00 <HAL_RTC_SetDate+0x134>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	22ff      	movs	r2, #255	; 0xff
 8005cea:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2221      	movs	r2, #33	; 0x21
 8005cf0:	2104      	movs	r1, #4
 8005cf2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2220      	movs	r2, #32
 8005cf8:	2100      	movs	r1, #0
 8005cfa:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	e00c      	b.n	8005d1a <HAL_RTC_SetDate+0x14e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	22ff      	movs	r2, #255	; 0xff
 8005d06:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2221      	movs	r2, #33	; 0x21
 8005d0c:	2101      	movs	r1, #1
 8005d0e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2220      	movs	r2, #32
 8005d14:	2100      	movs	r1, #0
 8005d16:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005d18:	2300      	movs	r3, #0
  }
}
 8005d1a:	0018      	movs	r0, r3
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	b007      	add	sp, #28
 8005d20:	bd90      	pop	{r4, r7, pc}
 8005d22:	46c0      	nop			; (mov r8, r8)
 8005d24:	00ffff3f 	.word	0x00ffff3f

08005d28 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b086      	sub	sp, #24
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	60f8      	str	r0, [r7, #12]
 8005d30:	60b9      	str	r1, [r7, #8]
 8005d32:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	4a21      	ldr	r2, [pc, #132]	; (8005dc0 <HAL_RTC_GetDate+0x98>)
 8005d3c:	4013      	ands	r3, r2
 8005d3e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	0c1b      	lsrs	r3, r3, #16
 8005d44:	b2da      	uxtb	r2, r3
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	0a1b      	lsrs	r3, r3, #8
 8005d4e:	b2db      	uxtb	r3, r3
 8005d50:	221f      	movs	r2, #31
 8005d52:	4013      	ands	r3, r2
 8005d54:	b2da      	uxtb	r2, r3
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	b2db      	uxtb	r3, r3
 8005d5e:	223f      	movs	r2, #63	; 0x3f
 8005d60:	4013      	ands	r3, r2
 8005d62:	b2da      	uxtb	r2, r3
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	0b5b      	lsrs	r3, r3, #13
 8005d6c:	b2db      	uxtb	r3, r3
 8005d6e:	2207      	movs	r2, #7
 8005d70:	4013      	ands	r3, r2
 8005d72:	b2da      	uxtb	r2, r3
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d11a      	bne.n	8005db4 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	78db      	ldrb	r3, [r3, #3]
 8005d82:	0018      	movs	r0, r3
 8005d84:	f000 fa3a 	bl	80061fc <RTC_Bcd2ToByte>
 8005d88:	0003      	movs	r3, r0
 8005d8a:	001a      	movs	r2, r3
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	785b      	ldrb	r3, [r3, #1]
 8005d94:	0018      	movs	r0, r3
 8005d96:	f000 fa31 	bl	80061fc <RTC_Bcd2ToByte>
 8005d9a:	0003      	movs	r3, r0
 8005d9c:	001a      	movs	r2, r3
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	789b      	ldrb	r3, [r3, #2]
 8005da6:	0018      	movs	r0, r3
 8005da8:	f000 fa28 	bl	80061fc <RTC_Bcd2ToByte>
 8005dac:	0003      	movs	r3, r0
 8005dae:	001a      	movs	r2, r3
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005db4:	2300      	movs	r3, #0
}
 8005db6:	0018      	movs	r0, r3
 8005db8:	46bd      	mov	sp, r7
 8005dba:	b006      	add	sp, #24
 8005dbc:	bd80      	pop	{r7, pc}
 8005dbe:	46c0      	nop			; (mov r8, r8)
 8005dc0:	00ffff3f 	.word	0x00ffff3f

08005dc4 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8005dc4:	b590      	push	{r4, r7, lr}
 8005dc6:	b089      	sub	sp, #36	; 0x24
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	60f8      	str	r0, [r7, #12]
 8005dcc:	60b9      	str	r1, [r7, #8]
 8005dce:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	2220      	movs	r2, #32
 8005dd4:	5c9b      	ldrb	r3, [r3, r2]
 8005dd6:	2b01      	cmp	r3, #1
 8005dd8:	d101      	bne.n	8005dde <HAL_RTC_SetAlarm_IT+0x1a>
 8005dda:	2302      	movs	r3, #2
 8005ddc:	e130      	b.n	8006040 <HAL_RTC_SetAlarm_IT+0x27c>
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2220      	movs	r2, #32
 8005de2:	2101      	movs	r1, #1
 8005de4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	2221      	movs	r2, #33	; 0x21
 8005dea:	2102      	movs	r1, #2
 8005dec:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d136      	bne.n	8005e62 <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	689b      	ldr	r3, [r3, #8]
 8005dfa:	2240      	movs	r2, #64	; 0x40
 8005dfc:	4013      	ands	r3, r2
 8005dfe:	d102      	bne.n	8005e06 <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	2200      	movs	r2, #0
 8005e04:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	781b      	ldrb	r3, [r3, #0]
 8005e0a:	0018      	movs	r0, r3
 8005e0c:	f000 f9cd 	bl	80061aa <RTC_ByteToBcd2>
 8005e10:	0003      	movs	r3, r0
 8005e12:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	785b      	ldrb	r3, [r3, #1]
 8005e18:	0018      	movs	r0, r3
 8005e1a:	f000 f9c6 	bl	80061aa <RTC_ByteToBcd2>
 8005e1e:	0003      	movs	r3, r0
 8005e20:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8005e22:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	789b      	ldrb	r3, [r3, #2]
 8005e28:	0018      	movs	r0, r3
 8005e2a:	f000 f9be 	bl	80061aa <RTC_ByteToBcd2>
 8005e2e:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8005e30:	0022      	movs	r2, r4
 8005e32:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	78db      	ldrb	r3, [r3, #3]
 8005e38:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8005e3a:	431a      	orrs	r2, r3
 8005e3c:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	2220      	movs	r2, #32
 8005e42:	5c9b      	ldrb	r3, [r3, r2]
 8005e44:	0018      	movs	r0, r3
 8005e46:	f000 f9b0 	bl	80061aa <RTC_ByteToBcd2>
 8005e4a:	0003      	movs	r3, r0
 8005e4c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8005e4e:	0022      	movs	r2, r4
 8005e50:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005e56:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	61fb      	str	r3, [r7, #28]
 8005e60:	e022      	b.n	8005ea8 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	689b      	ldr	r3, [r3, #8]
 8005e68:	2240      	movs	r2, #64	; 0x40
 8005e6a:	4013      	ands	r3, r2
 8005e6c:	d102      	bne.n	8005e74 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	2200      	movs	r2, #0
 8005e72:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	781b      	ldrb	r3, [r3, #0]
 8005e78:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	785b      	ldrb	r3, [r3, #1]
 8005e7e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8005e80:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8005e82:	68ba      	ldr	r2, [r7, #8]
 8005e84:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8005e86:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	78db      	ldrb	r3, [r3, #3]
 8005e8c:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8005e8e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	2120      	movs	r1, #32
 8005e94:	5c5b      	ldrb	r3, [r3, r1]
 8005e96:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8005e98:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005e9e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	685a      	ldr	r2, [r3, #4]
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	699b      	ldr	r3, [r3, #24]
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	22ca      	movs	r2, #202	; 0xca
 8005eba:	625a      	str	r2, [r3, #36]	; 0x24
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	2253      	movs	r2, #83	; 0x53
 8005ec2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005ec8:	2380      	movs	r3, #128	; 0x80
 8005eca:	005b      	lsls	r3, r3, #1
 8005ecc:	429a      	cmp	r2, r3
 8005ece:	d14e      	bne.n	8005f6e <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	689a      	ldr	r2, [r3, #8]
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	495b      	ldr	r1, [pc, #364]	; (8006048 <HAL_RTC_SetAlarm_IT+0x284>)
 8005edc:	400a      	ands	r2, r1
 8005ede:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	68db      	ldr	r3, [r3, #12]
 8005ee6:	22ff      	movs	r2, #255	; 0xff
 8005ee8:	401a      	ands	r2, r3
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4957      	ldr	r1, [pc, #348]	; (800604c <HAL_RTC_SetAlarm_IT+0x288>)
 8005ef0:	430a      	orrs	r2, r1
 8005ef2:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005ef4:	f7fd ffaa 	bl	8003e4c <HAL_GetTick>
 8005ef8:	0003      	movs	r3, r0
 8005efa:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8005efc:	e016      	b.n	8005f2c <HAL_RTC_SetAlarm_IT+0x168>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005efe:	f7fd ffa5 	bl	8003e4c <HAL_GetTick>
 8005f02:	0002      	movs	r2, r0
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	1ad2      	subs	r2, r2, r3
 8005f08:	23fa      	movs	r3, #250	; 0xfa
 8005f0a:	009b      	lsls	r3, r3, #2
 8005f0c:	429a      	cmp	r2, r3
 8005f0e:	d90d      	bls.n	8005f2c <HAL_RTC_SetAlarm_IT+0x168>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	22ff      	movs	r2, #255	; 0xff
 8005f16:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	2221      	movs	r2, #33	; 0x21
 8005f1c:	2103      	movs	r1, #3
 8005f1e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	2220      	movs	r2, #32
 8005f24:	2100      	movs	r1, #0
 8005f26:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005f28:	2303      	movs	r3, #3
 8005f2a:	e089      	b.n	8006040 <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	68db      	ldr	r3, [r3, #12]
 8005f32:	2201      	movs	r2, #1
 8005f34:	4013      	ands	r3, r2
 8005f36:	d0e2      	beq.n	8005efe <HAL_RTC_SetAlarm_IT+0x13a>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	69fa      	ldr	r2, [r7, #28]
 8005f3e:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	69ba      	ldr	r2, [r7, #24]
 8005f46:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	689a      	ldr	r2, [r3, #8]
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	2180      	movs	r1, #128	; 0x80
 8005f54:	0049      	lsls	r1, r1, #1
 8005f56:	430a      	orrs	r2, r1
 8005f58:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	689a      	ldr	r2, [r3, #8]
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	2180      	movs	r1, #128	; 0x80
 8005f66:	0149      	lsls	r1, r1, #5
 8005f68:	430a      	orrs	r2, r1
 8005f6a:	609a      	str	r2, [r3, #8]
 8005f6c:	e04d      	b.n	800600a <HAL_RTC_SetAlarm_IT+0x246>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	689a      	ldr	r2, [r3, #8]
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4935      	ldr	r1, [pc, #212]	; (8006050 <HAL_RTC_SetAlarm_IT+0x28c>)
 8005f7a:	400a      	ands	r2, r1
 8005f7c:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	68db      	ldr	r3, [r3, #12]
 8005f84:	22ff      	movs	r2, #255	; 0xff
 8005f86:	401a      	ands	r2, r3
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4931      	ldr	r1, [pc, #196]	; (8006054 <HAL_RTC_SetAlarm_IT+0x290>)
 8005f8e:	430a      	orrs	r2, r1
 8005f90:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005f92:	f7fd ff5b 	bl	8003e4c <HAL_GetTick>
 8005f96:	0003      	movs	r3, r0
 8005f98:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8005f9a:	e016      	b.n	8005fca <HAL_RTC_SetAlarm_IT+0x206>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005f9c:	f7fd ff56 	bl	8003e4c <HAL_GetTick>
 8005fa0:	0002      	movs	r2, r0
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	1ad2      	subs	r2, r2, r3
 8005fa6:	23fa      	movs	r3, #250	; 0xfa
 8005fa8:	009b      	lsls	r3, r3, #2
 8005faa:	429a      	cmp	r2, r3
 8005fac:	d90d      	bls.n	8005fca <HAL_RTC_SetAlarm_IT+0x206>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	22ff      	movs	r2, #255	; 0xff
 8005fb4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2221      	movs	r2, #33	; 0x21
 8005fba:	2103      	movs	r1, #3
 8005fbc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2220      	movs	r2, #32
 8005fc2:	2100      	movs	r1, #0
 8005fc4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005fc6:	2303      	movs	r3, #3
 8005fc8:	e03a      	b.n	8006040 <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	68db      	ldr	r3, [r3, #12]
 8005fd0:	2202      	movs	r2, #2
 8005fd2:	4013      	ands	r3, r2
 8005fd4:	d0e2      	beq.n	8005f9c <HAL_RTC_SetAlarm_IT+0x1d8>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	69fa      	ldr	r2, [r7, #28]
 8005fdc:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	69ba      	ldr	r2, [r7, #24]
 8005fe4:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	689a      	ldr	r2, [r3, #8]
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	2180      	movs	r1, #128	; 0x80
 8005ff2:	0089      	lsls	r1, r1, #2
 8005ff4:	430a      	orrs	r2, r1
 8005ff6:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	689a      	ldr	r2, [r3, #8]
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	2180      	movs	r1, #128	; 0x80
 8006004:	0189      	lsls	r1, r1, #6
 8006006:	430a      	orrs	r2, r1
 8006008:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800600a:	4b13      	ldr	r3, [pc, #76]	; (8006058 <HAL_RTC_SetAlarm_IT+0x294>)
 800600c:	681a      	ldr	r2, [r3, #0]
 800600e:	4b12      	ldr	r3, [pc, #72]	; (8006058 <HAL_RTC_SetAlarm_IT+0x294>)
 8006010:	2180      	movs	r1, #128	; 0x80
 8006012:	0289      	lsls	r1, r1, #10
 8006014:	430a      	orrs	r2, r1
 8006016:	601a      	str	r2, [r3, #0]

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8006018:	4b0f      	ldr	r3, [pc, #60]	; (8006058 <HAL_RTC_SetAlarm_IT+0x294>)
 800601a:	689a      	ldr	r2, [r3, #8]
 800601c:	4b0e      	ldr	r3, [pc, #56]	; (8006058 <HAL_RTC_SetAlarm_IT+0x294>)
 800601e:	2180      	movs	r1, #128	; 0x80
 8006020:	0289      	lsls	r1, r1, #10
 8006022:	430a      	orrs	r2, r1
 8006024:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	22ff      	movs	r2, #255	; 0xff
 800602c:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	2221      	movs	r2, #33	; 0x21
 8006032:	2101      	movs	r1, #1
 8006034:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	2220      	movs	r2, #32
 800603a:	2100      	movs	r1, #0
 800603c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800603e:	2300      	movs	r3, #0
}
 8006040:	0018      	movs	r0, r3
 8006042:	46bd      	mov	sp, r7
 8006044:	b009      	add	sp, #36	; 0x24
 8006046:	bd90      	pop	{r4, r7, pc}
 8006048:	fffffeff 	.word	0xfffffeff
 800604c:	fffffe7f 	.word	0xfffffe7f
 8006050:	fffffdff 	.word	0xfffffdff
 8006054:	fffffd7f 	.word	0xfffffd7f
 8006058:	40010400 	.word	0x40010400

0800605c <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b082      	sub	sp, #8
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	689a      	ldr	r2, [r3, #8]
 800606a:	2380      	movs	r3, #128	; 0x80
 800606c:	015b      	lsls	r3, r3, #5
 800606e:	4013      	ands	r3, r2
 8006070:	d014      	beq.n	800609c <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	68da      	ldr	r2, [r3, #12]
 8006078:	2380      	movs	r3, #128	; 0x80
 800607a:	005b      	lsls	r3, r3, #1
 800607c:	4013      	ands	r3, r2
 800607e:	d00d      	beq.n	800609c <HAL_RTC_AlarmIRQHandler+0x40>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	0018      	movs	r0, r3
 8006084:	f000 f838 	bl	80060f8 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	68db      	ldr	r3, [r3, #12]
 800608e:	22ff      	movs	r2, #255	; 0xff
 8006090:	401a      	ands	r2, r3
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4915      	ldr	r1, [pc, #84]	; (80060ec <HAL_RTC_AlarmIRQHandler+0x90>)
 8006098:	430a      	orrs	r2, r1
 800609a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	689a      	ldr	r2, [r3, #8]
 80060a2:	2380      	movs	r3, #128	; 0x80
 80060a4:	019b      	lsls	r3, r3, #6
 80060a6:	4013      	ands	r3, r2
 80060a8:	d014      	beq.n	80060d4 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	68da      	ldr	r2, [r3, #12]
 80060b0:	2380      	movs	r3, #128	; 0x80
 80060b2:	009b      	lsls	r3, r3, #2
 80060b4:	4013      	ands	r3, r2
 80060b6:	d00d      	beq.n	80060d4 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* AlarmB callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	0018      	movs	r0, r3
 80060bc:	f000 fa0e 	bl	80064dc <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	68db      	ldr	r3, [r3, #12]
 80060c6:	22ff      	movs	r2, #255	; 0xff
 80060c8:	401a      	ands	r2, r3
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4908      	ldr	r1, [pc, #32]	; (80060f0 <HAL_RTC_AlarmIRQHandler+0x94>)
 80060d0:	430a      	orrs	r2, r1
 80060d2:	60da      	str	r2, [r3, #12]
    }
  }
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80060d4:	4b07      	ldr	r3, [pc, #28]	; (80060f4 <HAL_RTC_AlarmIRQHandler+0x98>)
 80060d6:	2280      	movs	r2, #128	; 0x80
 80060d8:	0292      	lsls	r2, r2, #10
 80060da:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2221      	movs	r2, #33	; 0x21
 80060e0:	2101      	movs	r1, #1
 80060e2:	5499      	strb	r1, [r3, r2]
}
 80060e4:	46c0      	nop			; (mov r8, r8)
 80060e6:	46bd      	mov	sp, r7
 80060e8:	b002      	add	sp, #8
 80060ea:	bd80      	pop	{r7, pc}
 80060ec:	fffffe7f 	.word	0xfffffe7f
 80060f0:	fffffd7f 	.word	0xfffffd7f
 80060f4:	40010400 	.word	0x40010400

080060f8 <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b082      	sub	sp, #8
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8006100:	46c0      	nop			; (mov r8, r8)
 8006102:	46bd      	mov	sp, r7
 8006104:	b002      	add	sp, #8
 8006106:	bd80      	pop	{r7, pc}

08006108 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b084      	sub	sp, #16
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	68da      	ldr	r2, [r3, #12]
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	21a0      	movs	r1, #160	; 0xa0
 800611c:	438a      	bics	r2, r1
 800611e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006120:	f7fd fe94 	bl	8003e4c <HAL_GetTick>
 8006124:	0003      	movs	r3, r0
 8006126:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006128:	e00a      	b.n	8006140 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800612a:	f7fd fe8f 	bl	8003e4c <HAL_GetTick>
 800612e:	0002      	movs	r2, r0
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	1ad2      	subs	r2, r2, r3
 8006134:	23fa      	movs	r3, #250	; 0xfa
 8006136:	009b      	lsls	r3, r3, #2
 8006138:	429a      	cmp	r2, r3
 800613a:	d901      	bls.n	8006140 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800613c:	2303      	movs	r3, #3
 800613e:	e006      	b.n	800614e <HAL_RTC_WaitForSynchro+0x46>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	68db      	ldr	r3, [r3, #12]
 8006146:	2220      	movs	r2, #32
 8006148:	4013      	ands	r3, r2
 800614a:	d0ee      	beq.n	800612a <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 800614c:	2300      	movs	r3, #0
}
 800614e:	0018      	movs	r0, r3
 8006150:	46bd      	mov	sp, r7
 8006152:	b004      	add	sp, #16
 8006154:	bd80      	pop	{r7, pc}

08006156 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006156:	b580      	push	{r7, lr}
 8006158:	b084      	sub	sp, #16
 800615a:	af00      	add	r7, sp, #0
 800615c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	68db      	ldr	r3, [r3, #12]
 8006164:	2240      	movs	r2, #64	; 0x40
 8006166:	4013      	ands	r3, r2
 8006168:	d11a      	bne.n	80061a0 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	2201      	movs	r2, #1
 8006170:	4252      	negs	r2, r2
 8006172:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006174:	f7fd fe6a 	bl	8003e4c <HAL_GetTick>
 8006178:	0003      	movs	r3, r0
 800617a:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800617c:	e00a      	b.n	8006194 <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800617e:	f7fd fe65 	bl	8003e4c <HAL_GetTick>
 8006182:	0002      	movs	r2, r0
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	1ad2      	subs	r2, r2, r3
 8006188:	23fa      	movs	r3, #250	; 0xfa
 800618a:	009b      	lsls	r3, r3, #2
 800618c:	429a      	cmp	r2, r3
 800618e:	d901      	bls.n	8006194 <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 8006190:	2303      	movs	r3, #3
 8006192:	e006      	b.n	80061a2 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	68db      	ldr	r3, [r3, #12]
 800619a:	2240      	movs	r2, #64	; 0x40
 800619c:	4013      	ands	r3, r2
 800619e:	d0ee      	beq.n	800617e <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 80061a0:	2300      	movs	r3, #0
}
 80061a2:	0018      	movs	r0, r3
 80061a4:	46bd      	mov	sp, r7
 80061a6:	b004      	add	sp, #16
 80061a8:	bd80      	pop	{r7, pc}

080061aa <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80061aa:	b580      	push	{r7, lr}
 80061ac:	b084      	sub	sp, #16
 80061ae:	af00      	add	r7, sp, #0
 80061b0:	0002      	movs	r2, r0
 80061b2:	1dfb      	adds	r3, r7, #7
 80061b4:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 80061b6:	2300      	movs	r3, #0
 80061b8:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 80061ba:	230b      	movs	r3, #11
 80061bc:	18fb      	adds	r3, r7, r3
 80061be:	1dfa      	adds	r2, r7, #7
 80061c0:	7812      	ldrb	r2, [r2, #0]
 80061c2:	701a      	strb	r2, [r3, #0]

  while (Param >= 10U)
 80061c4:	e008      	b.n	80061d8 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	3301      	adds	r3, #1
 80061ca:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 80061cc:	220b      	movs	r2, #11
 80061ce:	18bb      	adds	r3, r7, r2
 80061d0:	18ba      	adds	r2, r7, r2
 80061d2:	7812      	ldrb	r2, [r2, #0]
 80061d4:	3a0a      	subs	r2, #10
 80061d6:	701a      	strb	r2, [r3, #0]
  while (Param >= 10U)
 80061d8:	230b      	movs	r3, #11
 80061da:	18fb      	adds	r3, r7, r3
 80061dc:	781b      	ldrb	r3, [r3, #0]
 80061de:	2b09      	cmp	r3, #9
 80061e0:	d8f1      	bhi.n	80061c6 <RTC_ByteToBcd2+0x1c>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	b2db      	uxtb	r3, r3
 80061e6:	011b      	lsls	r3, r3, #4
 80061e8:	b2da      	uxtb	r2, r3
 80061ea:	230b      	movs	r3, #11
 80061ec:	18fb      	adds	r3, r7, r3
 80061ee:	781b      	ldrb	r3, [r3, #0]
 80061f0:	4313      	orrs	r3, r2
 80061f2:	b2db      	uxtb	r3, r3
}
 80061f4:	0018      	movs	r0, r3
 80061f6:	46bd      	mov	sp, r7
 80061f8:	b004      	add	sp, #16
 80061fa:	bd80      	pop	{r7, pc}

080061fc <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b084      	sub	sp, #16
 8006200:	af00      	add	r7, sp, #0
 8006202:	0002      	movs	r2, r0
 8006204:	1dfb      	adds	r3, r7, #7
 8006206:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8006208:	1dfb      	adds	r3, r7, #7
 800620a:	781b      	ldrb	r3, [r3, #0]
 800620c:	091b      	lsrs	r3, r3, #4
 800620e:	b2db      	uxtb	r3, r3
 8006210:	001a      	movs	r2, r3
 8006212:	0013      	movs	r3, r2
 8006214:	009b      	lsls	r3, r3, #2
 8006216:	189b      	adds	r3, r3, r2
 8006218:	005b      	lsls	r3, r3, #1
 800621a:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	b2da      	uxtb	r2, r3
 8006220:	1dfb      	adds	r3, r7, #7
 8006222:	781b      	ldrb	r3, [r3, #0]
 8006224:	210f      	movs	r1, #15
 8006226:	400b      	ands	r3, r1
 8006228:	b2db      	uxtb	r3, r3
 800622a:	18d3      	adds	r3, r2, r3
 800622c:	b2db      	uxtb	r3, r3
}
 800622e:	0018      	movs	r0, r3
 8006230:	46bd      	mov	sp, r7
 8006232:	b004      	add	sp, #16
 8006234:	bd80      	pop	{r7, pc}
	...

08006238 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b086      	sub	sp, #24
 800623c:	af00      	add	r7, sp, #0
 800623e:	60f8      	str	r0, [r7, #12]
 8006240:	60b9      	str	r1, [r7, #8]
 8006242:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	2220      	movs	r2, #32
 8006248:	5c9b      	ldrb	r3, [r3, r2]
 800624a:	2b01      	cmp	r3, #1
 800624c:	d101      	bne.n	8006252 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 800624e:	2302      	movs	r3, #2
 8006250:	e0ad      	b.n	80063ae <HAL_RTCEx_SetWakeUpTimer_IT+0x176>
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	2220      	movs	r2, #32
 8006256:	2101      	movs	r1, #1
 8006258:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2221      	movs	r2, #33	; 0x21
 800625e:	2102      	movs	r1, #2
 8006260:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	22ca      	movs	r2, #202	; 0xca
 8006268:	625a      	str	r2, [r3, #36]	; 0x24
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	2253      	movs	r2, #83	; 0x53
 8006270:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	689a      	ldr	r2, [r3, #8]
 8006278:	2380      	movs	r3, #128	; 0x80
 800627a:	00db      	lsls	r3, r3, #3
 800627c:	4013      	ands	r3, r2
 800627e:	d021      	beq.n	80062c4 <HAL_RTCEx_SetWakeUpTimer_IT+0x8c>
  {
    tickstart = HAL_GetTick();
 8006280:	f7fd fde4 	bl	8003e4c <HAL_GetTick>
 8006284:	0003      	movs	r3, r0
 8006286:	617b      	str	r3, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8006288:	e016      	b.n	80062b8 <HAL_RTCEx_SetWakeUpTimer_IT+0x80>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800628a:	f7fd fddf 	bl	8003e4c <HAL_GetTick>
 800628e:	0002      	movs	r2, r0
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	1ad2      	subs	r2, r2, r3
 8006294:	23fa      	movs	r3, #250	; 0xfa
 8006296:	009b      	lsls	r3, r3, #2
 8006298:	429a      	cmp	r2, r3
 800629a:	d90d      	bls.n	80062b8 <HAL_RTCEx_SetWakeUpTimer_IT+0x80>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	22ff      	movs	r2, #255	; 0xff
 80062a2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	2221      	movs	r2, #33	; 0x21
 80062a8:	2103      	movs	r1, #3
 80062aa:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	2220      	movs	r2, #32
 80062b0:	2100      	movs	r1, #0
 80062b2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80062b4:	2303      	movs	r3, #3
 80062b6:	e07a      	b.n	80063ae <HAL_RTCEx_SetWakeUpTimer_IT+0x176>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	68db      	ldr	r3, [r3, #12]
 80062be:	2204      	movs	r2, #4
 80062c0:	4013      	ands	r3, r2
 80062c2:	d1e2      	bne.n	800628a <HAL_RTCEx_SetWakeUpTimer_IT+0x52>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	689a      	ldr	r2, [r3, #8]
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	493a      	ldr	r1, [pc, #232]	; (80063b8 <HAL_RTCEx_SetWakeUpTimer_IT+0x180>)
 80062d0:	400a      	ands	r2, r1
 80062d2:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	68db      	ldr	r3, [r3, #12]
 80062da:	22ff      	movs	r2, #255	; 0xff
 80062dc:	401a      	ands	r2, r3
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4936      	ldr	r1, [pc, #216]	; (80063bc <HAL_RTCEx_SetWakeUpTimer_IT+0x184>)
 80062e4:	430a      	orrs	r2, r1
 80062e6:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80062e8:	f7fd fdb0 	bl	8003e4c <HAL_GetTick>
 80062ec:	0003      	movs	r3, r0
 80062ee:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80062f0:	e016      	b.n	8006320 <HAL_RTCEx_SetWakeUpTimer_IT+0xe8>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80062f2:	f7fd fdab 	bl	8003e4c <HAL_GetTick>
 80062f6:	0002      	movs	r2, r0
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	1ad2      	subs	r2, r2, r3
 80062fc:	23fa      	movs	r3, #250	; 0xfa
 80062fe:	009b      	lsls	r3, r3, #2
 8006300:	429a      	cmp	r2, r3
 8006302:	d90d      	bls.n	8006320 <HAL_RTCEx_SetWakeUpTimer_IT+0xe8>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	22ff      	movs	r2, #255	; 0xff
 800630a:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	2221      	movs	r2, #33	; 0x21
 8006310:	2103      	movs	r1, #3
 8006312:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	2220      	movs	r2, #32
 8006318:	2100      	movs	r1, #0
 800631a:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 800631c:	2303      	movs	r3, #3
 800631e:	e046      	b.n	80063ae <HAL_RTCEx_SetWakeUpTimer_IT+0x176>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	68db      	ldr	r3, [r3, #12]
 8006326:	2204      	movs	r2, #4
 8006328:	4013      	ands	r3, r2
 800632a:	d0e2      	beq.n	80062f2 <HAL_RTCEx_SetWakeUpTimer_IT+0xba>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	68ba      	ldr	r2, [r7, #8]
 8006332:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	689a      	ldr	r2, [r3, #8]
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	2107      	movs	r1, #7
 8006340:	438a      	bics	r2, r1
 8006342:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	6899      	ldr	r1, [r3, #8]
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	687a      	ldr	r2, [r7, #4]
 8006350:	430a      	orrs	r2, r1
 8006352:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8006354:	4b1a      	ldr	r3, [pc, #104]	; (80063c0 <HAL_RTCEx_SetWakeUpTimer_IT+0x188>)
 8006356:	681a      	ldr	r2, [r3, #0]
 8006358:	4b19      	ldr	r3, [pc, #100]	; (80063c0 <HAL_RTCEx_SetWakeUpTimer_IT+0x188>)
 800635a:	2180      	movs	r1, #128	; 0x80
 800635c:	0349      	lsls	r1, r1, #13
 800635e:	430a      	orrs	r2, r1
 8006360:	601a      	str	r2, [r3, #0]

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8006362:	4b17      	ldr	r3, [pc, #92]	; (80063c0 <HAL_RTCEx_SetWakeUpTimer_IT+0x188>)
 8006364:	689a      	ldr	r2, [r3, #8]
 8006366:	4b16      	ldr	r3, [pc, #88]	; (80063c0 <HAL_RTCEx_SetWakeUpTimer_IT+0x188>)
 8006368:	2180      	movs	r1, #128	; 0x80
 800636a:	0349      	lsls	r1, r1, #13
 800636c:	430a      	orrs	r2, r1
 800636e:	609a      	str	r2, [r3, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	689a      	ldr	r2, [r3, #8]
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	2180      	movs	r1, #128	; 0x80
 800637c:	01c9      	lsls	r1, r1, #7
 800637e:	430a      	orrs	r2, r1
 8006380:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	689a      	ldr	r2, [r3, #8]
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	2180      	movs	r1, #128	; 0x80
 800638e:	00c9      	lsls	r1, r1, #3
 8006390:	430a      	orrs	r2, r1
 8006392:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	22ff      	movs	r2, #255	; 0xff
 800639a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2221      	movs	r2, #33	; 0x21
 80063a0:	2101      	movs	r1, #1
 80063a2:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	2220      	movs	r2, #32
 80063a8:	2100      	movs	r1, #0
 80063aa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80063ac:	2300      	movs	r3, #0
}
 80063ae:	0018      	movs	r0, r3
 80063b0:	46bd      	mov	sp, r7
 80063b2:	b006      	add	sp, #24
 80063b4:	bd80      	pop	{r7, pc}
 80063b6:	46c0      	nop			; (mov r8, r8)
 80063b8:	fffffbff 	.word	0xfffffbff
 80063bc:	fffffb7f 	.word	0xfffffb7f
 80063c0:	40010400 	.word	0x40010400

080063c4 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b084      	sub	sp, #16
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2220      	movs	r2, #32
 80063d0:	5c9b      	ldrb	r3, [r3, r2]
 80063d2:	2b01      	cmp	r3, #1
 80063d4:	d101      	bne.n	80063da <HAL_RTCEx_DeactivateWakeUpTimer+0x16>
 80063d6:	2302      	movs	r3, #2
 80063d8:	e04e      	b.n	8006478 <HAL_RTCEx_DeactivateWakeUpTimer+0xb4>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2220      	movs	r2, #32
 80063de:	2101      	movs	r1, #1
 80063e0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2221      	movs	r2, #33	; 0x21
 80063e6:	2102      	movs	r1, #2
 80063e8:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	22ca      	movs	r2, #202	; 0xca
 80063f0:	625a      	str	r2, [r3, #36]	; 0x24
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	2253      	movs	r2, #83	; 0x53
 80063f8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	689a      	ldr	r2, [r3, #8]
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	491e      	ldr	r1, [pc, #120]	; (8006480 <HAL_RTCEx_DeactivateWakeUpTimer+0xbc>)
 8006406:	400a      	ands	r2, r1
 8006408:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	689a      	ldr	r2, [r3, #8]
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	491b      	ldr	r1, [pc, #108]	; (8006484 <HAL_RTCEx_DeactivateWakeUpTimer+0xc0>)
 8006416:	400a      	ands	r2, r1
 8006418:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 800641a:	f7fd fd17 	bl	8003e4c <HAL_GetTick>
 800641e:	0003      	movs	r3, r0
 8006420:	60fb      	str	r3, [r7, #12]
  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8006422:	e016      	b.n	8006452 <HAL_RTCEx_DeactivateWakeUpTimer+0x8e>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006424:	f7fd fd12 	bl	8003e4c <HAL_GetTick>
 8006428:	0002      	movs	r2, r0
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	1ad2      	subs	r2, r2, r3
 800642e:	23fa      	movs	r3, #250	; 0xfa
 8006430:	009b      	lsls	r3, r3, #2
 8006432:	429a      	cmp	r2, r3
 8006434:	d90d      	bls.n	8006452 <HAL_RTCEx_DeactivateWakeUpTimer+0x8e>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	22ff      	movs	r2, #255	; 0xff
 800643c:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2221      	movs	r2, #33	; 0x21
 8006442:	2103      	movs	r1, #3
 8006444:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2220      	movs	r2, #32
 800644a:	2100      	movs	r1, #0
 800644c:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 800644e:	2303      	movs	r3, #3
 8006450:	e012      	b.n	8006478 <HAL_RTCEx_DeactivateWakeUpTimer+0xb4>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	68db      	ldr	r3, [r3, #12]
 8006458:	2204      	movs	r2, #4
 800645a:	4013      	ands	r3, r2
 800645c:	d0e2      	beq.n	8006424 <HAL_RTCEx_DeactivateWakeUpTimer+0x60>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	22ff      	movs	r2, #255	; 0xff
 8006464:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2221      	movs	r2, #33	; 0x21
 800646a:	2101      	movs	r1, #1
 800646c:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2220      	movs	r2, #32
 8006472:	2100      	movs	r1, #0
 8006474:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006476:	2300      	movs	r3, #0
}
 8006478:	0018      	movs	r0, r3
 800647a:	46bd      	mov	sp, r7
 800647c:	b004      	add	sp, #16
 800647e:	bd80      	pop	{r7, pc}
 8006480:	fffffbff 	.word	0xfffffbff
 8006484:	ffffbfff 	.word	0xffffbfff

08006488 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b082      	sub	sp, #8
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	68da      	ldr	r2, [r3, #12]
 8006496:	2380      	movs	r3, #128	; 0x80
 8006498:	00db      	lsls	r3, r3, #3
 800649a:	4013      	ands	r3, r2
 800649c:	d00d      	beq.n	80064ba <HAL_RTCEx_WakeUpTimerIRQHandler+0x32>
  {
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	0018      	movs	r0, r3
 80064a2:	f018 fce3 	bl	801ee6c <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	68db      	ldr	r3, [r3, #12]
 80064ac:	22ff      	movs	r2, #255	; 0xff
 80064ae:	401a      	ands	r2, r3
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4907      	ldr	r1, [pc, #28]	; (80064d4 <HAL_RTCEx_WakeUpTimerIRQHandler+0x4c>)
 80064b6:	430a      	orrs	r2, r1
 80064b8:	60da      	str	r2, [r3, #12]
  }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 80064ba:	4b07      	ldr	r3, [pc, #28]	; (80064d8 <HAL_RTCEx_WakeUpTimerIRQHandler+0x50>)
 80064bc:	2280      	movs	r2, #128	; 0x80
 80064be:	0352      	lsls	r2, r2, #13
 80064c0:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2221      	movs	r2, #33	; 0x21
 80064c6:	2101      	movs	r1, #1
 80064c8:	5499      	strb	r1, [r3, r2]
}
 80064ca:	46c0      	nop			; (mov r8, r8)
 80064cc:	46bd      	mov	sp, r7
 80064ce:	b002      	add	sp, #8
 80064d0:	bd80      	pop	{r7, pc}
 80064d2:	46c0      	nop			; (mov r8, r8)
 80064d4:	fffffb7f 	.word	0xfffffb7f
 80064d8:	40010400 	.word	0x40010400

080064dc <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b082      	sub	sp, #8
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80064e4:	46c0      	nop			; (mov r8, r8)
 80064e6:	46bd      	mov	sp, r7
 80064e8:	b002      	add	sp, #8
 80064ea:	bd80      	pop	{r7, pc}

080064ec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b082      	sub	sp, #8
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d101      	bne.n	80064fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80064fa:	2301      	movs	r3, #1
 80064fc:	e059      	b.n	80065b2 <HAL_SPI_Init+0xc6>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2200      	movs	r2, #0
 8006502:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2251      	movs	r2, #81	; 0x51
 8006508:	5c9b      	ldrb	r3, [r3, r2]
 800650a:	b2db      	uxtb	r3, r3
 800650c:	2b00      	cmp	r3, #0
 800650e:	d107      	bne.n	8006520 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2250      	movs	r2, #80	; 0x50
 8006514:	2100      	movs	r1, #0
 8006516:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	0018      	movs	r0, r3
 800651c:	f7fd f99e 	bl	800385c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2251      	movs	r2, #81	; 0x51
 8006524:	2102      	movs	r1, #2
 8006526:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	681a      	ldr	r2, [r3, #0]
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	2140      	movs	r1, #64	; 0x40
 8006534:	438a      	bics	r2, r1
 8006536:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	685a      	ldr	r2, [r3, #4]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	689b      	ldr	r3, [r3, #8]
 8006540:	431a      	orrs	r2, r3
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	68db      	ldr	r3, [r3, #12]
 8006546:	431a      	orrs	r2, r3
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	691b      	ldr	r3, [r3, #16]
 800654c:	431a      	orrs	r2, r3
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	695b      	ldr	r3, [r3, #20]
 8006552:	431a      	orrs	r2, r3
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6999      	ldr	r1, [r3, #24]
 8006558:	2380      	movs	r3, #128	; 0x80
 800655a:	009b      	lsls	r3, r3, #2
 800655c:	400b      	ands	r3, r1
 800655e:	431a      	orrs	r2, r3
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	69db      	ldr	r3, [r3, #28]
 8006564:	431a      	orrs	r2, r3
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6a1b      	ldr	r3, [r3, #32]
 800656a:	431a      	orrs	r2, r3
 800656c:	0011      	movs	r1, r2
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	430a      	orrs	r2, r1
 8006578:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	699b      	ldr	r3, [r3, #24]
 800657e:	0c1b      	lsrs	r3, r3, #16
 8006580:	2204      	movs	r2, #4
 8006582:	4013      	ands	r3, r2
 8006584:	0019      	movs	r1, r3
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	430a      	orrs	r2, r1
 8006590:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	69da      	ldr	r2, [r3, #28]
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4907      	ldr	r1, [pc, #28]	; (80065bc <HAL_SPI_Init+0xd0>)
 800659e:	400a      	ands	r2, r1
 80065a0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2200      	movs	r2, #0
 80065a6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2251      	movs	r2, #81	; 0x51
 80065ac:	2101      	movs	r1, #1
 80065ae:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80065b0:	2300      	movs	r3, #0
}
 80065b2:	0018      	movs	r0, r3
 80065b4:	46bd      	mov	sp, r7
 80065b6:	b002      	add	sp, #8
 80065b8:	bd80      	pop	{r7, pc}
 80065ba:	46c0      	nop			; (mov r8, r8)
 80065bc:	fffff7ff 	.word	0xfffff7ff

080065c0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b08c      	sub	sp, #48	; 0x30
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	60f8      	str	r0, [r7, #12]
 80065c8:	60b9      	str	r1, [r7, #8]
 80065ca:	607a      	str	r2, [r7, #4]
 80065cc:	001a      	movs	r2, r3
 80065ce:	1cbb      	adds	r3, r7, #2
 80065d0:	801a      	strh	r2, [r3, #0]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80065d2:	2301      	movs	r3, #1
 80065d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80065d6:	232b      	movs	r3, #43	; 0x2b
 80065d8:	18fb      	adds	r3, r7, r3
 80065da:	2200      	movs	r2, #0
 80065dc:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	2250      	movs	r2, #80	; 0x50
 80065e2:	5c9b      	ldrb	r3, [r3, r2]
 80065e4:	2b01      	cmp	r3, #1
 80065e6:	d101      	bne.n	80065ec <HAL_SPI_TransmitReceive+0x2c>
 80065e8:	2302      	movs	r3, #2
 80065ea:	e1a1      	b.n	8006930 <HAL_SPI_TransmitReceive+0x370>
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	2250      	movs	r2, #80	; 0x50
 80065f0:	2101      	movs	r1, #1
 80065f2:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80065f4:	f7fd fc2a 	bl	8003e4c <HAL_GetTick>
 80065f8:	0003      	movs	r3, r0
 80065fa:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80065fc:	2023      	movs	r0, #35	; 0x23
 80065fe:	183b      	adds	r3, r7, r0
 8006600:	68fa      	ldr	r2, [r7, #12]
 8006602:	2151      	movs	r1, #81	; 0x51
 8006604:	5c52      	ldrb	r2, [r2, r1]
 8006606:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	685b      	ldr	r3, [r3, #4]
 800660c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800660e:	231a      	movs	r3, #26
 8006610:	18fb      	adds	r3, r7, r3
 8006612:	1cba      	adds	r2, r7, #2
 8006614:	8812      	ldrh	r2, [r2, #0]
 8006616:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006618:	183b      	adds	r3, r7, r0
 800661a:	781b      	ldrb	r3, [r3, #0]
 800661c:	2b01      	cmp	r3, #1
 800661e:	d012      	beq.n	8006646 <HAL_SPI_TransmitReceive+0x86>
 8006620:	69fa      	ldr	r2, [r7, #28]
 8006622:	2382      	movs	r3, #130	; 0x82
 8006624:	005b      	lsls	r3, r3, #1
 8006626:	429a      	cmp	r2, r3
 8006628:	d108      	bne.n	800663c <HAL_SPI_TransmitReceive+0x7c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	689b      	ldr	r3, [r3, #8]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d104      	bne.n	800663c <HAL_SPI_TransmitReceive+0x7c>
 8006632:	2323      	movs	r3, #35	; 0x23
 8006634:	18fb      	adds	r3, r7, r3
 8006636:	781b      	ldrb	r3, [r3, #0]
 8006638:	2b04      	cmp	r3, #4
 800663a:	d004      	beq.n	8006646 <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 800663c:	232b      	movs	r3, #43	; 0x2b
 800663e:	18fb      	adds	r3, r7, r3
 8006640:	2202      	movs	r2, #2
 8006642:	701a      	strb	r2, [r3, #0]
    goto error;
 8006644:	e169      	b.n	800691a <HAL_SPI_TransmitReceive+0x35a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d006      	beq.n	800665a <HAL_SPI_TransmitReceive+0x9a>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d003      	beq.n	800665a <HAL_SPI_TransmitReceive+0x9a>
 8006652:	1cbb      	adds	r3, r7, #2
 8006654:	881b      	ldrh	r3, [r3, #0]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d104      	bne.n	8006664 <HAL_SPI_TransmitReceive+0xa4>
  {
    errorcode = HAL_ERROR;
 800665a:	232b      	movs	r3, #43	; 0x2b
 800665c:	18fb      	adds	r3, r7, r3
 800665e:	2201      	movs	r2, #1
 8006660:	701a      	strb	r2, [r3, #0]
    goto error;
 8006662:	e15a      	b.n	800691a <HAL_SPI_TransmitReceive+0x35a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	2251      	movs	r2, #81	; 0x51
 8006668:	5c9b      	ldrb	r3, [r3, r2]
 800666a:	b2db      	uxtb	r3, r3
 800666c:	2b04      	cmp	r3, #4
 800666e:	d003      	beq.n	8006678 <HAL_SPI_TransmitReceive+0xb8>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	2251      	movs	r2, #81	; 0x51
 8006674:	2105      	movs	r1, #5
 8006676:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	2200      	movs	r2, #0
 800667c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	687a      	ldr	r2, [r7, #4]
 8006682:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	1cba      	adds	r2, r7, #2
 8006688:	8812      	ldrh	r2, [r2, #0]
 800668a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	1cba      	adds	r2, r7, #2
 8006690:	8812      	ldrh	r2, [r2, #0]
 8006692:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	68ba      	ldr	r2, [r7, #8]
 8006698:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	1cba      	adds	r2, r7, #2
 800669e:	8812      	ldrh	r2, [r2, #0]
 80066a0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	1cba      	adds	r2, r7, #2
 80066a6:	8812      	ldrh	r2, [r2, #0]
 80066a8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	2200      	movs	r2, #0
 80066ae:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	2200      	movs	r2, #0
 80066b4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	2240      	movs	r2, #64	; 0x40
 80066be:	4013      	ands	r3, r2
 80066c0:	2b40      	cmp	r3, #64	; 0x40
 80066c2:	d007      	beq.n	80066d4 <HAL_SPI_TransmitReceive+0x114>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	681a      	ldr	r2, [r3, #0]
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	2140      	movs	r1, #64	; 0x40
 80066d0:	430a      	orrs	r2, r1
 80066d2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	68da      	ldr	r2, [r3, #12]
 80066d8:	2380      	movs	r3, #128	; 0x80
 80066da:	011b      	lsls	r3, r3, #4
 80066dc:	429a      	cmp	r2, r3
 80066de:	d000      	beq.n	80066e2 <HAL_SPI_TransmitReceive+0x122>
 80066e0:	e07a      	b.n	80067d8 <HAL_SPI_TransmitReceive+0x218>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	685b      	ldr	r3, [r3, #4]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d004      	beq.n	80066f4 <HAL_SPI_TransmitReceive+0x134>
 80066ea:	231a      	movs	r3, #26
 80066ec:	18fb      	adds	r3, r7, r3
 80066ee:	881b      	ldrh	r3, [r3, #0]
 80066f0:	2b01      	cmp	r3, #1
 80066f2:	d166      	bne.n	80067c2 <HAL_SPI_TransmitReceive+0x202>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066f8:	881a      	ldrh	r2, [r3, #0]
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006704:	1c9a      	adds	r2, r3, #2
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800670e:	b29b      	uxth	r3, r3
 8006710:	3b01      	subs	r3, #1
 8006712:	b29a      	uxth	r2, r3
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006718:	e053      	b.n	80067c2 <HAL_SPI_TransmitReceive+0x202>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	689b      	ldr	r3, [r3, #8]
 8006720:	2202      	movs	r2, #2
 8006722:	4013      	ands	r3, r2
 8006724:	2b02      	cmp	r3, #2
 8006726:	d11b      	bne.n	8006760 <HAL_SPI_TransmitReceive+0x1a0>
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800672c:	b29b      	uxth	r3, r3
 800672e:	2b00      	cmp	r3, #0
 8006730:	d016      	beq.n	8006760 <HAL_SPI_TransmitReceive+0x1a0>
 8006732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006734:	2b01      	cmp	r3, #1
 8006736:	d113      	bne.n	8006760 <HAL_SPI_TransmitReceive+0x1a0>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800673c:	881a      	ldrh	r2, [r3, #0]
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006748:	1c9a      	adds	r2, r3, #2
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006752:	b29b      	uxth	r3, r3
 8006754:	3b01      	subs	r3, #1
 8006756:	b29a      	uxth	r2, r3
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800675c:	2300      	movs	r3, #0
 800675e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	689b      	ldr	r3, [r3, #8]
 8006766:	2201      	movs	r2, #1
 8006768:	4013      	ands	r3, r2
 800676a:	2b01      	cmp	r3, #1
 800676c:	d119      	bne.n	80067a2 <HAL_SPI_TransmitReceive+0x1e2>
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006772:	b29b      	uxth	r3, r3
 8006774:	2b00      	cmp	r3, #0
 8006776:	d014      	beq.n	80067a2 <HAL_SPI_TransmitReceive+0x1e2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	68da      	ldr	r2, [r3, #12]
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006782:	b292      	uxth	r2, r2
 8006784:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800678a:	1c9a      	adds	r2, r3, #2
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006794:	b29b      	uxth	r3, r3
 8006796:	3b01      	subs	r3, #1
 8006798:	b29a      	uxth	r2, r3
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800679e:	2301      	movs	r3, #1
 80067a0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80067a2:	f7fd fb53 	bl	8003e4c <HAL_GetTick>
 80067a6:	0002      	movs	r2, r0
 80067a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067aa:	1ad3      	subs	r3, r2, r3
 80067ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80067ae:	429a      	cmp	r2, r3
 80067b0:	d807      	bhi.n	80067c2 <HAL_SPI_TransmitReceive+0x202>
 80067b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067b4:	3301      	adds	r3, #1
 80067b6:	d004      	beq.n	80067c2 <HAL_SPI_TransmitReceive+0x202>
      {
        errorcode = HAL_TIMEOUT;
 80067b8:	232b      	movs	r3, #43	; 0x2b
 80067ba:	18fb      	adds	r3, r7, r3
 80067bc:	2203      	movs	r2, #3
 80067be:	701a      	strb	r2, [r3, #0]
        goto error;
 80067c0:	e0ab      	b.n	800691a <HAL_SPI_TransmitReceive+0x35a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067c6:	b29b      	uxth	r3, r3
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d1a6      	bne.n	800671a <HAL_SPI_TransmitReceive+0x15a>
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067d0:	b29b      	uxth	r3, r3
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d1a1      	bne.n	800671a <HAL_SPI_TransmitReceive+0x15a>
 80067d6:	e07f      	b.n	80068d8 <HAL_SPI_TransmitReceive+0x318>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	685b      	ldr	r3, [r3, #4]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d005      	beq.n	80067ec <HAL_SPI_TransmitReceive+0x22c>
 80067e0:	231a      	movs	r3, #26
 80067e2:	18fb      	adds	r3, r7, r3
 80067e4:	881b      	ldrh	r3, [r3, #0]
 80067e6:	2b01      	cmp	r3, #1
 80067e8:	d000      	beq.n	80067ec <HAL_SPI_TransmitReceive+0x22c>
 80067ea:	e06b      	b.n	80068c4 <HAL_SPI_TransmitReceive+0x304>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	330c      	adds	r3, #12
 80067f6:	7812      	ldrb	r2, [r2, #0]
 80067f8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067fe:	1c5a      	adds	r2, r3, #1
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006808:	b29b      	uxth	r3, r3
 800680a:	3b01      	subs	r3, #1
 800680c:	b29a      	uxth	r2, r3
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006812:	e057      	b.n	80068c4 <HAL_SPI_TransmitReceive+0x304>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	689b      	ldr	r3, [r3, #8]
 800681a:	2202      	movs	r2, #2
 800681c:	4013      	ands	r3, r2
 800681e:	2b02      	cmp	r3, #2
 8006820:	d11c      	bne.n	800685c <HAL_SPI_TransmitReceive+0x29c>
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006826:	b29b      	uxth	r3, r3
 8006828:	2b00      	cmp	r3, #0
 800682a:	d017      	beq.n	800685c <HAL_SPI_TransmitReceive+0x29c>
 800682c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800682e:	2b01      	cmp	r3, #1
 8006830:	d114      	bne.n	800685c <HAL_SPI_TransmitReceive+0x29c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	330c      	adds	r3, #12
 800683c:	7812      	ldrb	r2, [r2, #0]
 800683e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006844:	1c5a      	adds	r2, r3, #1
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800684e:	b29b      	uxth	r3, r3
 8006850:	3b01      	subs	r3, #1
 8006852:	b29a      	uxth	r2, r3
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006858:	2300      	movs	r3, #0
 800685a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	689b      	ldr	r3, [r3, #8]
 8006862:	2201      	movs	r2, #1
 8006864:	4013      	ands	r3, r2
 8006866:	2b01      	cmp	r3, #1
 8006868:	d119      	bne.n	800689e <HAL_SPI_TransmitReceive+0x2de>
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800686e:	b29b      	uxth	r3, r3
 8006870:	2b00      	cmp	r3, #0
 8006872:	d014      	beq.n	800689e <HAL_SPI_TransmitReceive+0x2de>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	68da      	ldr	r2, [r3, #12]
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800687e:	b2d2      	uxtb	r2, r2
 8006880:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006886:	1c5a      	adds	r2, r3, #1
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006890:	b29b      	uxth	r3, r3
 8006892:	3b01      	subs	r3, #1
 8006894:	b29a      	uxth	r2, r3
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800689a:	2301      	movs	r3, #1
 800689c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800689e:	f7fd fad5 	bl	8003e4c <HAL_GetTick>
 80068a2:	0002      	movs	r2, r0
 80068a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a6:	1ad3      	subs	r3, r2, r3
 80068a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80068aa:	429a      	cmp	r2, r3
 80068ac:	d802      	bhi.n	80068b4 <HAL_SPI_TransmitReceive+0x2f4>
 80068ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068b0:	3301      	adds	r3, #1
 80068b2:	d102      	bne.n	80068ba <HAL_SPI_TransmitReceive+0x2fa>
 80068b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d104      	bne.n	80068c4 <HAL_SPI_TransmitReceive+0x304>
      {
        errorcode = HAL_TIMEOUT;
 80068ba:	232b      	movs	r3, #43	; 0x2b
 80068bc:	18fb      	adds	r3, r7, r3
 80068be:	2203      	movs	r2, #3
 80068c0:	701a      	strb	r2, [r3, #0]
        goto error;
 80068c2:	e02a      	b.n	800691a <HAL_SPI_TransmitReceive+0x35a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80068c8:	b29b      	uxth	r3, r3
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d1a2      	bne.n	8006814 <HAL_SPI_TransmitReceive+0x254>
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068d2:	b29b      	uxth	r3, r3
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d19d      	bne.n	8006814 <HAL_SPI_TransmitReceive+0x254>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80068d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068da:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	0018      	movs	r0, r3
 80068e0:	f000 f89a 	bl	8006a18 <SPI_EndRxTxTransaction>
 80068e4:	1e03      	subs	r3, r0, #0
 80068e6:	d007      	beq.n	80068f8 <HAL_SPI_TransmitReceive+0x338>
  {
    errorcode = HAL_ERROR;
 80068e8:	232b      	movs	r3, #43	; 0x2b
 80068ea:	18fb      	adds	r3, r7, r3
 80068ec:	2201      	movs	r2, #1
 80068ee:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	2220      	movs	r2, #32
 80068f4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80068f6:	e010      	b.n	800691a <HAL_SPI_TransmitReceive+0x35a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	689b      	ldr	r3, [r3, #8]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d10b      	bne.n	8006918 <HAL_SPI_TransmitReceive+0x358>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006900:	2300      	movs	r3, #0
 8006902:	617b      	str	r3, [r7, #20]
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	68db      	ldr	r3, [r3, #12]
 800690a:	617b      	str	r3, [r7, #20]
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	689b      	ldr	r3, [r3, #8]
 8006912:	617b      	str	r3, [r7, #20]
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	e000      	b.n	800691a <HAL_SPI_TransmitReceive+0x35a>
  }

error :
 8006918:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	2251      	movs	r2, #81	; 0x51
 800691e:	2101      	movs	r1, #1
 8006920:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	2250      	movs	r2, #80	; 0x50
 8006926:	2100      	movs	r1, #0
 8006928:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800692a:	232b      	movs	r3, #43	; 0x2b
 800692c:	18fb      	adds	r3, r7, r3
 800692e:	781b      	ldrb	r3, [r3, #0]
}
 8006930:	0018      	movs	r0, r3
 8006932:	46bd      	mov	sp, r7
 8006934:	b00c      	add	sp, #48	; 0x30
 8006936:	bd80      	pop	{r7, pc}

08006938 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b084      	sub	sp, #16
 800693c:	af00      	add	r7, sp, #0
 800693e:	60f8      	str	r0, [r7, #12]
 8006940:	60b9      	str	r1, [r7, #8]
 8006942:	603b      	str	r3, [r7, #0]
 8006944:	1dfb      	adds	r3, r7, #7
 8006946:	701a      	strb	r2, [r3, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006948:	e050      	b.n	80069ec <SPI_WaitFlagStateUntilTimeout+0xb4>
  {
    if (Timeout != HAL_MAX_DELAY)
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	3301      	adds	r3, #1
 800694e:	d04d      	beq.n	80069ec <SPI_WaitFlagStateUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8006950:	f7fd fa7c 	bl	8003e4c <HAL_GetTick>
 8006954:	0002      	movs	r2, r0
 8006956:	69bb      	ldr	r3, [r7, #24]
 8006958:	1ad3      	subs	r3, r2, r3
 800695a:	683a      	ldr	r2, [r7, #0]
 800695c:	429a      	cmp	r2, r3
 800695e:	d902      	bls.n	8006966 <SPI_WaitFlagStateUntilTimeout+0x2e>
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d142      	bne.n	80069ec <SPI_WaitFlagStateUntilTimeout+0xb4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	685a      	ldr	r2, [r3, #4]
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	21e0      	movs	r1, #224	; 0xe0
 8006972:	438a      	bics	r2, r1
 8006974:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	685a      	ldr	r2, [r3, #4]
 800697a:	2382      	movs	r3, #130	; 0x82
 800697c:	005b      	lsls	r3, r3, #1
 800697e:	429a      	cmp	r2, r3
 8006980:	d113      	bne.n	80069aa <SPI_WaitFlagStateUntilTimeout+0x72>
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	689a      	ldr	r2, [r3, #8]
 8006986:	2380      	movs	r3, #128	; 0x80
 8006988:	021b      	lsls	r3, r3, #8
 800698a:	429a      	cmp	r2, r3
 800698c:	d005      	beq.n	800699a <SPI_WaitFlagStateUntilTimeout+0x62>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	689a      	ldr	r2, [r3, #8]
 8006992:	2380      	movs	r3, #128	; 0x80
 8006994:	00db      	lsls	r3, r3, #3
 8006996:	429a      	cmp	r2, r3
 8006998:	d107      	bne.n	80069aa <SPI_WaitFlagStateUntilTimeout+0x72>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	681a      	ldr	r2, [r3, #0]
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	2140      	movs	r1, #64	; 0x40
 80069a6:	438a      	bics	r2, r1
 80069a8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80069ae:	2380      	movs	r3, #128	; 0x80
 80069b0:	019b      	lsls	r3, r3, #6
 80069b2:	429a      	cmp	r2, r3
 80069b4:	d110      	bne.n	80069d8 <SPI_WaitFlagStateUntilTimeout+0xa0>
        {
          SPI_RESET_CRC(hspi);
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	681a      	ldr	r2, [r3, #0]
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4914      	ldr	r1, [pc, #80]	; (8006a14 <SPI_WaitFlagStateUntilTimeout+0xdc>)
 80069c2:	400a      	ands	r2, r1
 80069c4:	601a      	str	r2, [r3, #0]
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	681a      	ldr	r2, [r3, #0]
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	2180      	movs	r1, #128	; 0x80
 80069d2:	0189      	lsls	r1, r1, #6
 80069d4:	430a      	orrs	r2, r1
 80069d6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	2251      	movs	r2, #81	; 0x51
 80069dc:	2101      	movs	r1, #1
 80069de:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	2250      	movs	r2, #80	; 0x50
 80069e4:	2100      	movs	r1, #0
 80069e6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80069e8:	2303      	movs	r3, #3
 80069ea:	e00f      	b.n	8006a0c <SPI_WaitFlagStateUntilTimeout+0xd4>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	689b      	ldr	r3, [r3, #8]
 80069f2:	68ba      	ldr	r2, [r7, #8]
 80069f4:	4013      	ands	r3, r2
 80069f6:	68ba      	ldr	r2, [r7, #8]
 80069f8:	1ad3      	subs	r3, r2, r3
 80069fa:	425a      	negs	r2, r3
 80069fc:	4153      	adcs	r3, r2
 80069fe:	b2db      	uxtb	r3, r3
 8006a00:	001a      	movs	r2, r3
 8006a02:	1dfb      	adds	r3, r7, #7
 8006a04:	781b      	ldrb	r3, [r3, #0]
 8006a06:	429a      	cmp	r2, r3
 8006a08:	d19f      	bne.n	800694a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8006a0a:	2300      	movs	r3, #0
}
 8006a0c:	0018      	movs	r0, r3
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	b004      	add	sp, #16
 8006a12:	bd80      	pop	{r7, pc}
 8006a14:	ffffdfff 	.word	0xffffdfff

08006a18 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b086      	sub	sp, #24
 8006a1c:	af02      	add	r7, sp, #8
 8006a1e:	60f8      	str	r0, [r7, #12]
 8006a20:	60b9      	str	r1, [r7, #8]
 8006a22:	607a      	str	r2, [r7, #4]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	685a      	ldr	r2, [r3, #4]
 8006a28:	2382      	movs	r3, #130	; 0x82
 8006a2a:	005b      	lsls	r3, r3, #1
 8006a2c:	429a      	cmp	r2, r3
 8006a2e:	d112      	bne.n	8006a56 <SPI_EndRxTxTransaction+0x3e>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006a30:	68ba      	ldr	r2, [r7, #8]
 8006a32:	68f8      	ldr	r0, [r7, #12]
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	9300      	str	r3, [sp, #0]
 8006a38:	0013      	movs	r3, r2
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	2180      	movs	r1, #128	; 0x80
 8006a3e:	f7ff ff7b 	bl	8006938 <SPI_WaitFlagStateUntilTimeout>
 8006a42:	1e03      	subs	r3, r0, #0
 8006a44:	d020      	beq.n	8006a88 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a4a:	2220      	movs	r2, #32
 8006a4c:	431a      	orrs	r2, r3
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006a52:	2303      	movs	r3, #3
 8006a54:	e019      	b.n	8006a8a <SPI_EndRxTxTransaction+0x72>
    }
  }
  else
  {
    /* Control RXNE flag in case of Full-Duplex transfer */
    if (hspi->State == HAL_SPI_STATE_BUSY_TX_RX)
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	2251      	movs	r2, #81	; 0x51
 8006a5a:	5c9b      	ldrb	r3, [r3, r2]
 8006a5c:	b2db      	uxtb	r3, r3
 8006a5e:	2b05      	cmp	r3, #5
 8006a60:	d112      	bne.n	8006a88 <SPI_EndRxTxTransaction+0x70>
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006a62:	68ba      	ldr	r2, [r7, #8]
 8006a64:	68f8      	ldr	r0, [r7, #12]
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	9300      	str	r3, [sp, #0]
 8006a6a:	0013      	movs	r3, r2
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	2101      	movs	r1, #1
 8006a70:	f7ff ff62 	bl	8006938 <SPI_WaitFlagStateUntilTimeout>
 8006a74:	1e03      	subs	r3, r0, #0
 8006a76:	d007      	beq.n	8006a88 <SPI_EndRxTxTransaction+0x70>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a7c:	2220      	movs	r2, #32
 8006a7e:	431a      	orrs	r2, r3
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006a84:	2303      	movs	r3, #3
 8006a86:	e000      	b.n	8006a8a <SPI_EndRxTxTransaction+0x72>
      }
    }
  }
  return HAL_OK;
 8006a88:	2300      	movs	r3, #0
}
 8006a8a:	0018      	movs	r0, r3
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	b004      	add	sp, #16
 8006a90:	bd80      	pop	{r7, pc}
	...

08006a94 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b082      	sub	sp, #8
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d101      	bne.n	8006aa6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	e044      	b.n	8006b30 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d107      	bne.n	8006abe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2270      	movs	r2, #112	; 0x70
 8006ab2:	2100      	movs	r1, #0
 8006ab4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	0018      	movs	r0, r3
 8006aba:	f7fd f8c3 	bl	8003c44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2224      	movs	r2, #36	; 0x24
 8006ac2:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	681a      	ldr	r2, [r3, #0]
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	2101      	movs	r1, #1
 8006ad0:	438a      	bics	r2, r1
 8006ad2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	0018      	movs	r0, r3
 8006ad8:	f000 fabe 	bl	8007058 <UART_SetConfig>
 8006adc:	0003      	movs	r3, r0
 8006ade:	2b01      	cmp	r3, #1
 8006ae0:	d101      	bne.n	8006ae6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	e024      	b.n	8006b30 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d003      	beq.n	8006af6 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	0018      	movs	r0, r3
 8006af2:	f000 fde5 	bl	80076c0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	685a      	ldr	r2, [r3, #4]
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	490d      	ldr	r1, [pc, #52]	; (8006b38 <HAL_UART_Init+0xa4>)
 8006b02:	400a      	ands	r2, r1
 8006b04:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	689a      	ldr	r2, [r3, #8]
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	212a      	movs	r1, #42	; 0x2a
 8006b12:	438a      	bics	r2, r1
 8006b14:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	681a      	ldr	r2, [r3, #0]
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	2101      	movs	r1, #1
 8006b22:	430a      	orrs	r2, r1
 8006b24:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	0018      	movs	r0, r3
 8006b2a:	f000 fe7d 	bl	8007828 <UART_CheckIdleState>
 8006b2e:	0003      	movs	r3, r0
}
 8006b30:	0018      	movs	r0, r3
 8006b32:	46bd      	mov	sp, r7
 8006b34:	b002      	add	sp, #8
 8006b36:	bd80      	pop	{r7, pc}
 8006b38:	ffffb7ff 	.word	0xffffb7ff

08006b3c <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b08a      	sub	sp, #40	; 0x28
 8006b40:	af02      	add	r7, sp, #8
 8006b42:	60f8      	str	r0, [r7, #12]
 8006b44:	60b9      	str	r1, [r7, #8]
 8006b46:	603b      	str	r3, [r7, #0]
 8006b48:	1dbb      	adds	r3, r7, #6
 8006b4a:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b50:	2b20      	cmp	r3, #32
 8006b52:	d000      	beq.n	8006b56 <HAL_UART_Transmit+0x1a>
 8006b54:	e094      	b.n	8006c80 <HAL_UART_Transmit+0x144>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d003      	beq.n	8006b64 <HAL_UART_Transmit+0x28>
 8006b5c:	1dbb      	adds	r3, r7, #6
 8006b5e:	881b      	ldrh	r3, [r3, #0]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d101      	bne.n	8006b68 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006b64:	2301      	movs	r3, #1
 8006b66:	e08c      	b.n	8006c82 <HAL_UART_Transmit+0x146>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	689a      	ldr	r2, [r3, #8]
 8006b6c:	2380      	movs	r3, #128	; 0x80
 8006b6e:	015b      	lsls	r3, r3, #5
 8006b70:	429a      	cmp	r2, r3
 8006b72:	d109      	bne.n	8006b88 <HAL_UART_Transmit+0x4c>
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	691b      	ldr	r3, [r3, #16]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d105      	bne.n	8006b88 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1) != 0)
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	2201      	movs	r2, #1
 8006b80:	4013      	ands	r3, r2
 8006b82:	d001      	beq.n	8006b88 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8006b84:	2301      	movs	r3, #1
 8006b86:	e07c      	b.n	8006c82 <HAL_UART_Transmit+0x146>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	2270      	movs	r2, #112	; 0x70
 8006b8c:	5c9b      	ldrb	r3, [r3, r2]
 8006b8e:	2b01      	cmp	r3, #1
 8006b90:	d101      	bne.n	8006b96 <HAL_UART_Transmit+0x5a>
 8006b92:	2302      	movs	r3, #2
 8006b94:	e075      	b.n	8006c82 <HAL_UART_Transmit+0x146>
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	2270      	movs	r2, #112	; 0x70
 8006b9a:	2101      	movs	r1, #1
 8006b9c:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	2221      	movs	r2, #33	; 0x21
 8006ba8:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8006baa:	f7fd f94f 	bl	8003e4c <HAL_GetTick>
 8006bae:	0003      	movs	r3, r0
 8006bb0:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	1dba      	adds	r2, r7, #6
 8006bb6:	2150      	movs	r1, #80	; 0x50
 8006bb8:	8812      	ldrh	r2, [r2, #0]
 8006bba:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	1dba      	adds	r2, r7, #6
 8006bc0:	2152      	movs	r1, #82	; 0x52
 8006bc2:	8812      	ldrh	r2, [r2, #0]
 8006bc4:	525a      	strh	r2, [r3, r1]

        /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	689a      	ldr	r2, [r3, #8]
 8006bca:	2380      	movs	r3, #128	; 0x80
 8006bcc:	015b      	lsls	r3, r3, #5
 8006bce:	429a      	cmp	r2, r3
 8006bd0:	d108      	bne.n	8006be4 <HAL_UART_Transmit+0xa8>
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	691b      	ldr	r3, [r3, #16]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d104      	bne.n	8006be4 <HAL_UART_Transmit+0xa8>
    {
      pdata8bits  = NULL;
 8006bda:	2300      	movs	r3, #0
 8006bdc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	61bb      	str	r3, [r7, #24]
 8006be2:	e003      	b.n	8006bec <HAL_UART_Transmit+0xb0>
    }
    else
    {
      pdata8bits  = pData;
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006be8:	2300      	movs	r3, #0
 8006bea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006bec:	e02c      	b.n	8006c48 <HAL_UART_Transmit+0x10c>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006bee:	697a      	ldr	r2, [r7, #20]
 8006bf0:	68f8      	ldr	r0, [r7, #12]
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	9300      	str	r3, [sp, #0]
 8006bf6:	0013      	movs	r3, r2
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	2180      	movs	r1, #128	; 0x80
 8006bfc:	f000 fe5a 	bl	80078b4 <UART_WaitOnFlagUntilTimeout>
 8006c00:	1e03      	subs	r3, r0, #0
 8006c02:	d001      	beq.n	8006c08 <HAL_UART_Transmit+0xcc>
      {
        return HAL_TIMEOUT;
 8006c04:	2303      	movs	r3, #3
 8006c06:	e03c      	b.n	8006c82 <HAL_UART_Transmit+0x146>
      }
      if (pdata8bits == NULL)
 8006c08:	69fb      	ldr	r3, [r7, #28]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d10b      	bne.n	8006c26 <HAL_UART_Transmit+0xea>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006c0e:	69bb      	ldr	r3, [r7, #24]
 8006c10:	881b      	ldrh	r3, [r3, #0]
 8006c12:	001a      	movs	r2, r3
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	05d2      	lsls	r2, r2, #23
 8006c1a:	0dd2      	lsrs	r2, r2, #23
 8006c1c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006c1e:	69bb      	ldr	r3, [r7, #24]
 8006c20:	3302      	adds	r3, #2
 8006c22:	61bb      	str	r3, [r7, #24]
 8006c24:	e007      	b.n	8006c36 <HAL_UART_Transmit+0xfa>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006c26:	69fb      	ldr	r3, [r7, #28]
 8006c28:	781a      	ldrb	r2, [r3, #0]
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006c30:	69fb      	ldr	r3, [r7, #28]
 8006c32:	3301      	adds	r3, #1
 8006c34:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	2252      	movs	r2, #82	; 0x52
 8006c3a:	5a9b      	ldrh	r3, [r3, r2]
 8006c3c:	b29b      	uxth	r3, r3
 8006c3e:	3b01      	subs	r3, #1
 8006c40:	b299      	uxth	r1, r3
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	2252      	movs	r2, #82	; 0x52
 8006c46:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	2252      	movs	r2, #82	; 0x52
 8006c4c:	5a9b      	ldrh	r3, [r3, r2]
 8006c4e:	b29b      	uxth	r3, r3
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d1cc      	bne.n	8006bee <HAL_UART_Transmit+0xb2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006c54:	697a      	ldr	r2, [r7, #20]
 8006c56:	68f8      	ldr	r0, [r7, #12]
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	9300      	str	r3, [sp, #0]
 8006c5c:	0013      	movs	r3, r2
 8006c5e:	2200      	movs	r2, #0
 8006c60:	2140      	movs	r1, #64	; 0x40
 8006c62:	f000 fe27 	bl	80078b4 <UART_WaitOnFlagUntilTimeout>
 8006c66:	1e03      	subs	r3, r0, #0
 8006c68:	d001      	beq.n	8006c6e <HAL_UART_Transmit+0x132>
    {
      return HAL_TIMEOUT;
 8006c6a:	2303      	movs	r3, #3
 8006c6c:	e009      	b.n	8006c82 <HAL_UART_Transmit+0x146>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	2220      	movs	r2, #32
 8006c72:	675a      	str	r2, [r3, #116]	; 0x74

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	2270      	movs	r2, #112	; 0x70
 8006c78:	2100      	movs	r1, #0
 8006c7a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	e000      	b.n	8006c82 <HAL_UART_Transmit+0x146>
  }
  else
  {
    return HAL_BUSY;
 8006c80:	2302      	movs	r3, #2
  }
}
 8006c82:	0018      	movs	r0, r3
 8006c84:	46bd      	mov	sp, r7
 8006c86:	b008      	add	sp, #32
 8006c88:	bd80      	pop	{r7, pc}
	...

08006c8c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b084      	sub	sp, #16
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	60f8      	str	r0, [r7, #12]
 8006c94:	60b9      	str	r1, [r7, #8]
 8006c96:	1dbb      	adds	r3, r7, #6
 8006c98:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006c9e:	2b20      	cmp	r3, #32
 8006ca0:	d000      	beq.n	8006ca4 <HAL_UART_Receive_IT+0x18>
 8006ca2:	e09f      	b.n	8006de4 <HAL_UART_Receive_IT+0x158>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d003      	beq.n	8006cb2 <HAL_UART_Receive_IT+0x26>
 8006caa:	1dbb      	adds	r3, r7, #6
 8006cac:	881b      	ldrh	r3, [r3, #0]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d101      	bne.n	8006cb6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	e097      	b.n	8006de6 <HAL_UART_Receive_IT+0x15a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	689a      	ldr	r2, [r3, #8]
 8006cba:	2380      	movs	r3, #128	; 0x80
 8006cbc:	015b      	lsls	r3, r3, #5
 8006cbe:	429a      	cmp	r2, r3
 8006cc0:	d109      	bne.n	8006cd6 <HAL_UART_Receive_IT+0x4a>
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	691b      	ldr	r3, [r3, #16]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d105      	bne.n	8006cd6 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1) != 0)
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	2201      	movs	r2, #1
 8006cce:	4013      	ands	r3, r2
 8006cd0:	d001      	beq.n	8006cd6 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	e087      	b.n	8006de6 <HAL_UART_Receive_IT+0x15a>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	2270      	movs	r2, #112	; 0x70
 8006cda:	5c9b      	ldrb	r3, [r3, r2]
 8006cdc:	2b01      	cmp	r3, #1
 8006cde:	d101      	bne.n	8006ce4 <HAL_UART_Receive_IT+0x58>
 8006ce0:	2302      	movs	r3, #2
 8006ce2:	e080      	b.n	8006de6 <HAL_UART_Receive_IT+0x15a>
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	2270      	movs	r2, #112	; 0x70
 8006ce8:	2101      	movs	r1, #1
 8006cea:	5499      	strb	r1, [r3, r2]

    huart->pRxBuffPtr  = pData;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	68ba      	ldr	r2, [r7, #8]
 8006cf0:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	1dba      	adds	r2, r7, #6
 8006cf6:	2158      	movs	r1, #88	; 0x58
 8006cf8:	8812      	ldrh	r2, [r2, #0]
 8006cfa:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	1dba      	adds	r2, r7, #6
 8006d00:	215a      	movs	r1, #90	; 0x5a
 8006d02:	8812      	ldrh	r2, [r2, #0]
 8006d04:	525a      	strh	r2, [r3, r1]
    huart->RxISR       = NULL;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	689a      	ldr	r2, [r3, #8]
 8006d10:	2380      	movs	r3, #128	; 0x80
 8006d12:	015b      	lsls	r3, r3, #5
 8006d14:	429a      	cmp	r2, r3
 8006d16:	d10d      	bne.n	8006d34 <HAL_UART_Receive_IT+0xa8>
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	691b      	ldr	r3, [r3, #16]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d104      	bne.n	8006d2a <HAL_UART_Receive_IT+0x9e>
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	225c      	movs	r2, #92	; 0x5c
 8006d24:	4932      	ldr	r1, [pc, #200]	; (8006df0 <HAL_UART_Receive_IT+0x164>)
 8006d26:	5299      	strh	r1, [r3, r2]
 8006d28:	e02e      	b.n	8006d88 <HAL_UART_Receive_IT+0xfc>
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	225c      	movs	r2, #92	; 0x5c
 8006d2e:	21ff      	movs	r1, #255	; 0xff
 8006d30:	5299      	strh	r1, [r3, r2]
 8006d32:	e029      	b.n	8006d88 <HAL_UART_Receive_IT+0xfc>
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	689b      	ldr	r3, [r3, #8]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d10d      	bne.n	8006d58 <HAL_UART_Receive_IT+0xcc>
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	691b      	ldr	r3, [r3, #16]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d104      	bne.n	8006d4e <HAL_UART_Receive_IT+0xc2>
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	225c      	movs	r2, #92	; 0x5c
 8006d48:	21ff      	movs	r1, #255	; 0xff
 8006d4a:	5299      	strh	r1, [r3, r2]
 8006d4c:	e01c      	b.n	8006d88 <HAL_UART_Receive_IT+0xfc>
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	225c      	movs	r2, #92	; 0x5c
 8006d52:	217f      	movs	r1, #127	; 0x7f
 8006d54:	5299      	strh	r1, [r3, r2]
 8006d56:	e017      	b.n	8006d88 <HAL_UART_Receive_IT+0xfc>
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	689a      	ldr	r2, [r3, #8]
 8006d5c:	2380      	movs	r3, #128	; 0x80
 8006d5e:	055b      	lsls	r3, r3, #21
 8006d60:	429a      	cmp	r2, r3
 8006d62:	d10d      	bne.n	8006d80 <HAL_UART_Receive_IT+0xf4>
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	691b      	ldr	r3, [r3, #16]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d104      	bne.n	8006d76 <HAL_UART_Receive_IT+0xea>
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	225c      	movs	r2, #92	; 0x5c
 8006d70:	217f      	movs	r1, #127	; 0x7f
 8006d72:	5299      	strh	r1, [r3, r2]
 8006d74:	e008      	b.n	8006d88 <HAL_UART_Receive_IT+0xfc>
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	225c      	movs	r2, #92	; 0x5c
 8006d7a:	213f      	movs	r1, #63	; 0x3f
 8006d7c:	5299      	strh	r1, [r3, r2]
 8006d7e:	e003      	b.n	8006d88 <HAL_UART_Receive_IT+0xfc>
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	225c      	movs	r2, #92	; 0x5c
 8006d84:	2100      	movs	r1, #0
 8006d86:	5299      	strh	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	2222      	movs	r2, #34	; 0x22
 8006d92:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	689a      	ldr	r2, [r3, #8]
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	2101      	movs	r1, #1
 8006da0:	430a      	orrs	r2, r1
 8006da2:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	689a      	ldr	r2, [r3, #8]
 8006da8:	2380      	movs	r3, #128	; 0x80
 8006daa:	015b      	lsls	r3, r3, #5
 8006dac:	429a      	cmp	r2, r3
 8006dae:	d107      	bne.n	8006dc0 <HAL_UART_Receive_IT+0x134>
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	691b      	ldr	r3, [r3, #16]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d103      	bne.n	8006dc0 <HAL_UART_Receive_IT+0x134>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	4a0e      	ldr	r2, [pc, #56]	; (8006df4 <HAL_UART_Receive_IT+0x168>)
 8006dbc:	661a      	str	r2, [r3, #96]	; 0x60
 8006dbe:	e002      	b.n	8006dc6 <HAL_UART_Receive_IT+0x13a>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	4a0d      	ldr	r2, [pc, #52]	; (8006df8 <HAL_UART_Receive_IT+0x16c>)
 8006dc4:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	2270      	movs	r2, #112	; 0x70
 8006dca:	2100      	movs	r1, #0
 8006dcc:	5499      	strb	r1, [r3, r2]

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	681a      	ldr	r2, [r3, #0]
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	2190      	movs	r1, #144	; 0x90
 8006dda:	0049      	lsls	r1, r1, #1
 8006ddc:	430a      	orrs	r2, r1
 8006dde:	601a      	str	r2, [r3, #0]
    return HAL_OK;
 8006de0:	2300      	movs	r3, #0
 8006de2:	e000      	b.n	8006de6 <HAL_UART_Receive_IT+0x15a>
  }
  else
  {
    return HAL_BUSY;
 8006de4:	2302      	movs	r3, #2
  }
}
 8006de6:	0018      	movs	r0, r3
 8006de8:	46bd      	mov	sp, r7
 8006dea:	b004      	add	sp, #16
 8006dec:	bd80      	pop	{r7, pc}
 8006dee:	46c0      	nop			; (mov r8, r8)
 8006df0:	000001ff 	.word	0x000001ff
 8006df4:	08007aa9 	.word	0x08007aa9
 8006df8:	080079ed 	.word	0x080079ed

08006dfc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b088      	sub	sp, #32
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	69db      	ldr	r3, [r3, #28]
 8006e0a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	689b      	ldr	r3, [r3, #8]
 8006e1a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8006e1c:	69fb      	ldr	r3, [r7, #28]
 8006e1e:	220f      	movs	r2, #15
 8006e20:	4013      	ands	r3, r2
 8006e22:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8006e24:	693b      	ldr	r3, [r7, #16]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d112      	bne.n	8006e50 <HAL_UART_IRQHandler+0x54>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006e2a:	69fb      	ldr	r3, [r7, #28]
 8006e2c:	2220      	movs	r2, #32
 8006e2e:	4013      	ands	r3, r2
 8006e30:	d00e      	beq.n	8006e50 <HAL_UART_IRQHandler+0x54>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006e32:	69bb      	ldr	r3, [r7, #24]
 8006e34:	2220      	movs	r2, #32
 8006e36:	4013      	ands	r3, r2
 8006e38:	d00a      	beq.n	8006e50 <HAL_UART_IRQHandler+0x54>
    {
      if (huart->RxISR != NULL)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d100      	bne.n	8006e44 <HAL_UART_IRQHandler+0x48>
 8006e42:	e0f6      	b.n	8007032 <HAL_UART_IRQHandler+0x236>
      {
        huart->RxISR(huart);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e48:	687a      	ldr	r2, [r7, #4]
 8006e4a:	0010      	movs	r0, r2
 8006e4c:	4798      	blx	r3
      }
      return;
 8006e4e:	e0f0      	b.n	8007032 <HAL_UART_IRQHandler+0x236>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006e50:	693b      	ldr	r3, [r7, #16]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d100      	bne.n	8006e58 <HAL_UART_IRQHandler+0x5c>
 8006e56:	e0b8      	b.n	8006fca <HAL_UART_IRQHandler+0x1ce>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006e58:	697b      	ldr	r3, [r7, #20]
 8006e5a:	2201      	movs	r2, #1
 8006e5c:	4013      	ands	r3, r2
 8006e5e:	d105      	bne.n	8006e6c <HAL_UART_IRQHandler+0x70>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8006e60:	69ba      	ldr	r2, [r7, #24]
 8006e62:	2390      	movs	r3, #144	; 0x90
 8006e64:	005b      	lsls	r3, r3, #1
 8006e66:	4013      	ands	r3, r2
 8006e68:	d100      	bne.n	8006e6c <HAL_UART_IRQHandler+0x70>
 8006e6a:	e0ae      	b.n	8006fca <HAL_UART_IRQHandler+0x1ce>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006e6c:	69fb      	ldr	r3, [r7, #28]
 8006e6e:	2201      	movs	r2, #1
 8006e70:	4013      	ands	r3, r2
 8006e72:	d00e      	beq.n	8006e92 <HAL_UART_IRQHandler+0x96>
 8006e74:	69ba      	ldr	r2, [r7, #24]
 8006e76:	2380      	movs	r3, #128	; 0x80
 8006e78:	005b      	lsls	r3, r3, #1
 8006e7a:	4013      	ands	r3, r2
 8006e7c:	d009      	beq.n	8006e92 <HAL_UART_IRQHandler+0x96>
    {

      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	2201      	movs	r2, #1
 8006e84:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e8a:	2201      	movs	r2, #1
 8006e8c:	431a      	orrs	r2, r3
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006e92:	69fb      	ldr	r3, [r7, #28]
 8006e94:	2202      	movs	r2, #2
 8006e96:	4013      	ands	r3, r2
 8006e98:	d00d      	beq.n	8006eb6 <HAL_UART_IRQHandler+0xba>
 8006e9a:	697b      	ldr	r3, [r7, #20]
 8006e9c:	2201      	movs	r2, #1
 8006e9e:	4013      	ands	r3, r2
 8006ea0:	d009      	beq.n	8006eb6 <HAL_UART_IRQHandler+0xba>
    {
    	 // log_info("error frame stm32l0xx_hal_uart L2245");

      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	2202      	movs	r2, #2
 8006ea8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006eae:	2204      	movs	r2, #4
 8006eb0:	431a      	orrs	r2, r3
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006eb6:	69fb      	ldr	r3, [r7, #28]
 8006eb8:	2204      	movs	r2, #4
 8006eba:	4013      	ands	r3, r2
 8006ebc:	d00d      	beq.n	8006eda <HAL_UART_IRQHandler+0xde>
 8006ebe:	697b      	ldr	r3, [r7, #20]
 8006ec0:	2201      	movs	r2, #1
 8006ec2:	4013      	ands	r3, r2
 8006ec4:	d009      	beq.n	8006eda <HAL_UART_IRQHandler+0xde>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	2204      	movs	r2, #4
 8006ecc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ed2:	2202      	movs	r2, #2
 8006ed4:	431a      	orrs	r2, r3
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006eda:	69fb      	ldr	r3, [r7, #28]
 8006edc:	2208      	movs	r2, #8
 8006ede:	4013      	ands	r3, r2
 8006ee0:	d011      	beq.n	8006f06 <HAL_UART_IRQHandler+0x10a>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006ee2:	69bb      	ldr	r3, [r7, #24]
 8006ee4:	2220      	movs	r2, #32
 8006ee6:	4013      	ands	r3, r2
 8006ee8:	d103      	bne.n	8006ef2 <HAL_UART_IRQHandler+0xf6>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006eea:	697b      	ldr	r3, [r7, #20]
 8006eec:	2201      	movs	r2, #1
 8006eee:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006ef0:	d009      	beq.n	8006f06 <HAL_UART_IRQHandler+0x10a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	2208      	movs	r2, #8
 8006ef8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006efe:	2208      	movs	r2, #8
 8006f00:	431a      	orrs	r2, r3
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d100      	bne.n	8006f10 <HAL_UART_IRQHandler+0x114>
 8006f0e:	e092      	b.n	8007036 <HAL_UART_IRQHandler+0x23a>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006f10:	69fb      	ldr	r3, [r7, #28]
 8006f12:	2220      	movs	r2, #32
 8006f14:	4013      	ands	r3, r2
 8006f16:	d00c      	beq.n	8006f32 <HAL_UART_IRQHandler+0x136>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006f18:	69bb      	ldr	r3, [r7, #24]
 8006f1a:	2220      	movs	r2, #32
 8006f1c:	4013      	ands	r3, r2
 8006f1e:	d008      	beq.n	8006f32 <HAL_UART_IRQHandler+0x136>
      {
        if (huart->RxISR != NULL)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d004      	beq.n	8006f32 <HAL_UART_IRQHandler+0x136>
        {
          huart->RxISR(huart);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f2c:	687a      	ldr	r2, [r7, #4]
 8006f2e:	0010      	movs	r0, r2
 8006f30:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f36:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	689b      	ldr	r3, [r3, #8]
 8006f3e:	2240      	movs	r2, #64	; 0x40
 8006f40:	4013      	ands	r3, r2
 8006f42:	2b40      	cmp	r3, #64	; 0x40
 8006f44:	d003      	beq.n	8006f4e <HAL_UART_IRQHandler+0x152>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	2208      	movs	r2, #8
 8006f4a:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006f4c:	d033      	beq.n	8006fb6 <HAL_UART_IRQHandler+0x1ba>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	0018      	movs	r0, r3
 8006f52:	f000 fcf9 	bl	8007948 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	689b      	ldr	r3, [r3, #8]
 8006f5c:	2240      	movs	r2, #64	; 0x40
 8006f5e:	4013      	ands	r3, r2
 8006f60:	2b40      	cmp	r3, #64	; 0x40
 8006f62:	d123      	bne.n	8006fac <HAL_UART_IRQHandler+0x1b0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	689a      	ldr	r2, [r3, #8]
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	2140      	movs	r1, #64	; 0x40
 8006f70:	438a      	bics	r2, r1
 8006f72:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d012      	beq.n	8006fa2 <HAL_UART_IRQHandler+0x1a6>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f80:	4a30      	ldr	r2, [pc, #192]	; (8007044 <HAL_UART_IRQHandler+0x248>)
 8006f82:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f88:	0018      	movs	r0, r3
 8006f8a:	f7fd faf7 	bl	800457c <HAL_DMA_Abort_IT>
 8006f8e:	1e03      	subs	r3, r0, #0
 8006f90:	d019      	beq.n	8006fc6 <HAL_UART_IRQHandler+0x1ca>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f9c:	0018      	movs	r0, r3
 8006f9e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fa0:	e011      	b.n	8006fc6 <HAL_UART_IRQHandler+0x1ca>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	0018      	movs	r0, r3
 8006fa6:	f017 fa6f 	bl	801e488 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006faa:	e00c      	b.n	8006fc6 <HAL_UART_IRQHandler+0x1ca>
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/

          HAL_UART_ErrorCallback(huart);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	0018      	movs	r0, r3
 8006fb0:	f017 fa6a 	bl	801e488 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fb4:	e007      	b.n	8006fc6 <HAL_UART_IRQHandler+0x1ca>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	0018      	movs	r0, r3
 8006fba:	f017 fa65 	bl	801e488 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8006fc4:	e037      	b.n	8007036 <HAL_UART_IRQHandler+0x23a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fc6:	46c0      	nop			; (mov r8, r8)
    return;
 8006fc8:	e035      	b.n	8007036 <HAL_UART_IRQHandler+0x23a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006fca:	69fa      	ldr	r2, [r7, #28]
 8006fcc:	2380      	movs	r3, #128	; 0x80
 8006fce:	035b      	lsls	r3, r3, #13
 8006fd0:	4013      	ands	r3, r2
 8006fd2:	d00e      	beq.n	8006ff2 <HAL_UART_IRQHandler+0x1f6>
 8006fd4:	697a      	ldr	r2, [r7, #20]
 8006fd6:	2380      	movs	r3, #128	; 0x80
 8006fd8:	03db      	lsls	r3, r3, #15
 8006fda:	4013      	ands	r3, r2
 8006fdc:	d009      	beq.n	8006ff2 <HAL_UART_IRQHandler+0x1f6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	2280      	movs	r2, #128	; 0x80
 8006fe4:	0352      	lsls	r2, r2, #13
 8006fe6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	0018      	movs	r0, r3
 8006fec:	f017 fd6c 	bl	801eac8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006ff0:	e024      	b.n	800703c <HAL_UART_IRQHandler+0x240>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006ff2:	69fb      	ldr	r3, [r7, #28]
 8006ff4:	2280      	movs	r2, #128	; 0x80
 8006ff6:	4013      	ands	r3, r2
 8006ff8:	d00d      	beq.n	8007016 <HAL_UART_IRQHandler+0x21a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006ffa:	69bb      	ldr	r3, [r7, #24]
 8006ffc:	2280      	movs	r2, #128	; 0x80
 8006ffe:	4013      	ands	r3, r2
 8007000:	d009      	beq.n	8007016 <HAL_UART_IRQHandler+0x21a>
  {
    if (huart->TxISR != NULL)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007006:	2b00      	cmp	r3, #0
 8007008:	d017      	beq.n	800703a <HAL_UART_IRQHandler+0x23e>
    {
      huart->TxISR(huart);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800700e:	687a      	ldr	r2, [r7, #4]
 8007010:	0010      	movs	r0, r2
 8007012:	4798      	blx	r3
    }
    return;
 8007014:	e011      	b.n	800703a <HAL_UART_IRQHandler+0x23e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007016:	69fb      	ldr	r3, [r7, #28]
 8007018:	2240      	movs	r2, #64	; 0x40
 800701a:	4013      	ands	r3, r2
 800701c:	d00e      	beq.n	800703c <HAL_UART_IRQHandler+0x240>
 800701e:	69bb      	ldr	r3, [r7, #24]
 8007020:	2240      	movs	r2, #64	; 0x40
 8007022:	4013      	ands	r3, r2
 8007024:	d00a      	beq.n	800703c <HAL_UART_IRQHandler+0x240>
  {
    UART_EndTransmit_IT(huart);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	0018      	movs	r0, r3
 800702a:	f000 fcc4 	bl	80079b6 <UART_EndTransmit_IT>
    return;
 800702e:	46c0      	nop			; (mov r8, r8)
 8007030:	e004      	b.n	800703c <HAL_UART_IRQHandler+0x240>
      return;
 8007032:	46c0      	nop			; (mov r8, r8)
 8007034:	e002      	b.n	800703c <HAL_UART_IRQHandler+0x240>
    return;
 8007036:	46c0      	nop			; (mov r8, r8)
 8007038:	e000      	b.n	800703c <HAL_UART_IRQHandler+0x240>
    return;
 800703a:	46c0      	nop			; (mov r8, r8)
  }

}
 800703c:	46bd      	mov	sp, r7
 800703e:	b008      	add	sp, #32
 8007040:	bd80      	pop	{r7, pc}
 8007042:	46c0      	nop			; (mov r8, r8)
 8007044:	08007989 	.word	0x08007989

08007048 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b082      	sub	sp, #8
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007050:	46c0      	nop			; (mov r8, r8)
 8007052:	46bd      	mov	sp, r7
 8007054:	b002      	add	sp, #8
 8007056:	bd80      	pop	{r7, pc}

08007058 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007058:	b5b0      	push	{r4, r5, r7, lr}
 800705a:	b08e      	sub	sp, #56	; 0x38
 800705c:	af00      	add	r7, sp, #0
 800705e:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8007060:	231b      	movs	r3, #27
 8007062:	2218      	movs	r2, #24
 8007064:	4694      	mov	ip, r2
 8007066:	44bc      	add	ip, r7
 8007068:	4463      	add	r3, ip
 800706a:	2210      	movs	r2, #16
 800706c:	701a      	strb	r2, [r3, #0]
  uint32_t usartdiv                   = 0x00000000U;
 800706e:	2300      	movs	r3, #0
 8007070:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef ret               = HAL_OK;
 8007072:	2313      	movs	r3, #19
 8007074:	2218      	movs	r2, #24
 8007076:	4694      	mov	ip, r2
 8007078:	44bc      	add	ip, r7
 800707a:	4463      	add	r3, ip
 800707c:	2200      	movs	r2, #0
 800707e:	701a      	strb	r2, [r3, #0]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8007080:	2300      	movs	r3, #0
 8007082:	627b      	str	r3, [r7, #36]	; 0x24
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007084:	69fb      	ldr	r3, [r7, #28]
 8007086:	689a      	ldr	r2, [r3, #8]
 8007088:	69fb      	ldr	r3, [r7, #28]
 800708a:	691b      	ldr	r3, [r3, #16]
 800708c:	431a      	orrs	r2, r3
 800708e:	69fb      	ldr	r3, [r7, #28]
 8007090:	695b      	ldr	r3, [r3, #20]
 8007092:	431a      	orrs	r2, r3
 8007094:	69fb      	ldr	r3, [r7, #28]
 8007096:	69db      	ldr	r3, [r3, #28]
 8007098:	4313      	orrs	r3, r2
 800709a:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800709c:	69fb      	ldr	r3, [r7, #28]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	4aca      	ldr	r2, [pc, #808]	; (80073cc <UART_SetConfig+0x374>)
 80070a4:	4013      	ands	r3, r2
 80070a6:	0019      	movs	r1, r3
 80070a8:	69fb      	ldr	r3, [r7, #28]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80070ae:	430a      	orrs	r2, r1
 80070b0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80070b2:	69fb      	ldr	r3, [r7, #28]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	685b      	ldr	r3, [r3, #4]
 80070b8:	4ac5      	ldr	r2, [pc, #788]	; (80073d0 <UART_SetConfig+0x378>)
 80070ba:	4013      	ands	r3, r2
 80070bc:	0019      	movs	r1, r3
 80070be:	69fb      	ldr	r3, [r7, #28]
 80070c0:	68da      	ldr	r2, [r3, #12]
 80070c2:	69fb      	ldr	r3, [r7, #28]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	430a      	orrs	r2, r1
 80070c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80070ca:	69fb      	ldr	r3, [r7, #28]
 80070cc:	699b      	ldr	r3, [r3, #24]
 80070ce:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80070d0:	69fb      	ldr	r3, [r7, #28]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4abf      	ldr	r2, [pc, #764]	; (80073d4 <UART_SetConfig+0x37c>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d004      	beq.n	80070e4 <UART_SetConfig+0x8c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80070da:	69fb      	ldr	r3, [r7, #28]
 80070dc:	6a1b      	ldr	r3, [r3, #32]
 80070de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80070e0:	4313      	orrs	r3, r2
 80070e2:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80070e4:	69fb      	ldr	r3, [r7, #28]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	689b      	ldr	r3, [r3, #8]
 80070ea:	4abb      	ldr	r2, [pc, #748]	; (80073d8 <UART_SetConfig+0x380>)
 80070ec:	4013      	ands	r3, r2
 80070ee:	0019      	movs	r1, r3
 80070f0:	69fb      	ldr	r3, [r7, #28]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80070f6:	430a      	orrs	r2, r1
 80070f8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80070fa:	69fb      	ldr	r3, [r7, #28]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	4ab7      	ldr	r2, [pc, #732]	; (80073dc <UART_SetConfig+0x384>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d134      	bne.n	800716e <UART_SetConfig+0x116>
 8007104:	4bb6      	ldr	r3, [pc, #728]	; (80073e0 <UART_SetConfig+0x388>)
 8007106:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007108:	2203      	movs	r2, #3
 800710a:	4013      	ands	r3, r2
 800710c:	2b01      	cmp	r3, #1
 800710e:	d015      	beq.n	800713c <UART_SetConfig+0xe4>
 8007110:	d304      	bcc.n	800711c <UART_SetConfig+0xc4>
 8007112:	2b02      	cmp	r3, #2
 8007114:	d00a      	beq.n	800712c <UART_SetConfig+0xd4>
 8007116:	2b03      	cmp	r3, #3
 8007118:	d018      	beq.n	800714c <UART_SetConfig+0xf4>
 800711a:	e01f      	b.n	800715c <UART_SetConfig+0x104>
 800711c:	231b      	movs	r3, #27
 800711e:	2218      	movs	r2, #24
 8007120:	4694      	mov	ip, r2
 8007122:	44bc      	add	ip, r7
 8007124:	4463      	add	r3, ip
 8007126:	2201      	movs	r2, #1
 8007128:	701a      	strb	r2, [r3, #0]
 800712a:	e0c5      	b.n	80072b8 <UART_SetConfig+0x260>
 800712c:	231b      	movs	r3, #27
 800712e:	2218      	movs	r2, #24
 8007130:	4694      	mov	ip, r2
 8007132:	44bc      	add	ip, r7
 8007134:	4463      	add	r3, ip
 8007136:	2202      	movs	r2, #2
 8007138:	701a      	strb	r2, [r3, #0]
 800713a:	e0bd      	b.n	80072b8 <UART_SetConfig+0x260>
 800713c:	231b      	movs	r3, #27
 800713e:	2218      	movs	r2, #24
 8007140:	4694      	mov	ip, r2
 8007142:	44bc      	add	ip, r7
 8007144:	4463      	add	r3, ip
 8007146:	2204      	movs	r2, #4
 8007148:	701a      	strb	r2, [r3, #0]
 800714a:	e0b5      	b.n	80072b8 <UART_SetConfig+0x260>
 800714c:	231b      	movs	r3, #27
 800714e:	2218      	movs	r2, #24
 8007150:	4694      	mov	ip, r2
 8007152:	44bc      	add	ip, r7
 8007154:	4463      	add	r3, ip
 8007156:	2208      	movs	r2, #8
 8007158:	701a      	strb	r2, [r3, #0]
 800715a:	e0ad      	b.n	80072b8 <UART_SetConfig+0x260>
 800715c:	231b      	movs	r3, #27
 800715e:	2218      	movs	r2, #24
 8007160:	4694      	mov	ip, r2
 8007162:	44bc      	add	ip, r7
 8007164:	4463      	add	r3, ip
 8007166:	2210      	movs	r2, #16
 8007168:	701a      	strb	r2, [r3, #0]
 800716a:	46c0      	nop			; (mov r8, r8)
 800716c:	e0a4      	b.n	80072b8 <UART_SetConfig+0x260>
 800716e:	69fb      	ldr	r3, [r7, #28]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	4a9c      	ldr	r2, [pc, #624]	; (80073e4 <UART_SetConfig+0x38c>)
 8007174:	4293      	cmp	r3, r2
 8007176:	d137      	bne.n	80071e8 <UART_SetConfig+0x190>
 8007178:	4b99      	ldr	r3, [pc, #612]	; (80073e0 <UART_SetConfig+0x388>)
 800717a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800717c:	220c      	movs	r2, #12
 800717e:	4013      	ands	r3, r2
 8007180:	2b04      	cmp	r3, #4
 8007182:	d018      	beq.n	80071b6 <UART_SetConfig+0x15e>
 8007184:	d802      	bhi.n	800718c <UART_SetConfig+0x134>
 8007186:	2b00      	cmp	r3, #0
 8007188:	d005      	beq.n	8007196 <UART_SetConfig+0x13e>
 800718a:	e024      	b.n	80071d6 <UART_SetConfig+0x17e>
 800718c:	2b08      	cmp	r3, #8
 800718e:	d00a      	beq.n	80071a6 <UART_SetConfig+0x14e>
 8007190:	2b0c      	cmp	r3, #12
 8007192:	d018      	beq.n	80071c6 <UART_SetConfig+0x16e>
 8007194:	e01f      	b.n	80071d6 <UART_SetConfig+0x17e>
 8007196:	231b      	movs	r3, #27
 8007198:	2218      	movs	r2, #24
 800719a:	4694      	mov	ip, r2
 800719c:	44bc      	add	ip, r7
 800719e:	4463      	add	r3, ip
 80071a0:	2200      	movs	r2, #0
 80071a2:	701a      	strb	r2, [r3, #0]
 80071a4:	e088      	b.n	80072b8 <UART_SetConfig+0x260>
 80071a6:	231b      	movs	r3, #27
 80071a8:	2218      	movs	r2, #24
 80071aa:	4694      	mov	ip, r2
 80071ac:	44bc      	add	ip, r7
 80071ae:	4463      	add	r3, ip
 80071b0:	2202      	movs	r2, #2
 80071b2:	701a      	strb	r2, [r3, #0]
 80071b4:	e080      	b.n	80072b8 <UART_SetConfig+0x260>
 80071b6:	231b      	movs	r3, #27
 80071b8:	2218      	movs	r2, #24
 80071ba:	4694      	mov	ip, r2
 80071bc:	44bc      	add	ip, r7
 80071be:	4463      	add	r3, ip
 80071c0:	2204      	movs	r2, #4
 80071c2:	701a      	strb	r2, [r3, #0]
 80071c4:	e078      	b.n	80072b8 <UART_SetConfig+0x260>
 80071c6:	231b      	movs	r3, #27
 80071c8:	2218      	movs	r2, #24
 80071ca:	4694      	mov	ip, r2
 80071cc:	44bc      	add	ip, r7
 80071ce:	4463      	add	r3, ip
 80071d0:	2208      	movs	r2, #8
 80071d2:	701a      	strb	r2, [r3, #0]
 80071d4:	e070      	b.n	80072b8 <UART_SetConfig+0x260>
 80071d6:	231b      	movs	r3, #27
 80071d8:	2218      	movs	r2, #24
 80071da:	4694      	mov	ip, r2
 80071dc:	44bc      	add	ip, r7
 80071de:	4463      	add	r3, ip
 80071e0:	2210      	movs	r2, #16
 80071e2:	701a      	strb	r2, [r3, #0]
 80071e4:	46c0      	nop			; (mov r8, r8)
 80071e6:	e067      	b.n	80072b8 <UART_SetConfig+0x260>
 80071e8:	69fb      	ldr	r3, [r7, #28]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	4a7e      	ldr	r2, [pc, #504]	; (80073e8 <UART_SetConfig+0x390>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d107      	bne.n	8007202 <UART_SetConfig+0x1aa>
 80071f2:	231b      	movs	r3, #27
 80071f4:	2218      	movs	r2, #24
 80071f6:	4694      	mov	ip, r2
 80071f8:	44bc      	add	ip, r7
 80071fa:	4463      	add	r3, ip
 80071fc:	2200      	movs	r2, #0
 80071fe:	701a      	strb	r2, [r3, #0]
 8007200:	e05a      	b.n	80072b8 <UART_SetConfig+0x260>
 8007202:	69fb      	ldr	r3, [r7, #28]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	4a79      	ldr	r2, [pc, #484]	; (80073ec <UART_SetConfig+0x394>)
 8007208:	4293      	cmp	r3, r2
 800720a:	d107      	bne.n	800721c <UART_SetConfig+0x1c4>
 800720c:	231b      	movs	r3, #27
 800720e:	2218      	movs	r2, #24
 8007210:	4694      	mov	ip, r2
 8007212:	44bc      	add	ip, r7
 8007214:	4463      	add	r3, ip
 8007216:	2200      	movs	r2, #0
 8007218:	701a      	strb	r2, [r3, #0]
 800721a:	e04d      	b.n	80072b8 <UART_SetConfig+0x260>
 800721c:	69fb      	ldr	r3, [r7, #28]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	4a6c      	ldr	r2, [pc, #432]	; (80073d4 <UART_SetConfig+0x37c>)
 8007222:	4293      	cmp	r3, r2
 8007224:	d141      	bne.n	80072aa <UART_SetConfig+0x252>
 8007226:	4b6e      	ldr	r3, [pc, #440]	; (80073e0 <UART_SetConfig+0x388>)
 8007228:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800722a:	23c0      	movs	r3, #192	; 0xc0
 800722c:	011b      	lsls	r3, r3, #4
 800722e:	4013      	ands	r3, r2
 8007230:	2280      	movs	r2, #128	; 0x80
 8007232:	00d2      	lsls	r2, r2, #3
 8007234:	4293      	cmp	r3, r2
 8007236:	d01f      	beq.n	8007278 <UART_SetConfig+0x220>
 8007238:	2280      	movs	r2, #128	; 0x80
 800723a:	00d2      	lsls	r2, r2, #3
 800723c:	4293      	cmp	r3, r2
 800723e:	d802      	bhi.n	8007246 <UART_SetConfig+0x1ee>
 8007240:	2b00      	cmp	r3, #0
 8007242:	d009      	beq.n	8007258 <UART_SetConfig+0x200>
 8007244:	e028      	b.n	8007298 <UART_SetConfig+0x240>
 8007246:	2280      	movs	r2, #128	; 0x80
 8007248:	0112      	lsls	r2, r2, #4
 800724a:	4293      	cmp	r3, r2
 800724c:	d00c      	beq.n	8007268 <UART_SetConfig+0x210>
 800724e:	22c0      	movs	r2, #192	; 0xc0
 8007250:	0112      	lsls	r2, r2, #4
 8007252:	4293      	cmp	r3, r2
 8007254:	d018      	beq.n	8007288 <UART_SetConfig+0x230>
 8007256:	e01f      	b.n	8007298 <UART_SetConfig+0x240>
 8007258:	231b      	movs	r3, #27
 800725a:	2218      	movs	r2, #24
 800725c:	4694      	mov	ip, r2
 800725e:	44bc      	add	ip, r7
 8007260:	4463      	add	r3, ip
 8007262:	2200      	movs	r2, #0
 8007264:	701a      	strb	r2, [r3, #0]
 8007266:	e027      	b.n	80072b8 <UART_SetConfig+0x260>
 8007268:	231b      	movs	r3, #27
 800726a:	2218      	movs	r2, #24
 800726c:	4694      	mov	ip, r2
 800726e:	44bc      	add	ip, r7
 8007270:	4463      	add	r3, ip
 8007272:	2202      	movs	r2, #2
 8007274:	701a      	strb	r2, [r3, #0]
 8007276:	e01f      	b.n	80072b8 <UART_SetConfig+0x260>
 8007278:	231b      	movs	r3, #27
 800727a:	2218      	movs	r2, #24
 800727c:	4694      	mov	ip, r2
 800727e:	44bc      	add	ip, r7
 8007280:	4463      	add	r3, ip
 8007282:	2204      	movs	r2, #4
 8007284:	701a      	strb	r2, [r3, #0]
 8007286:	e017      	b.n	80072b8 <UART_SetConfig+0x260>
 8007288:	231b      	movs	r3, #27
 800728a:	2218      	movs	r2, #24
 800728c:	4694      	mov	ip, r2
 800728e:	44bc      	add	ip, r7
 8007290:	4463      	add	r3, ip
 8007292:	2208      	movs	r2, #8
 8007294:	701a      	strb	r2, [r3, #0]
 8007296:	e00f      	b.n	80072b8 <UART_SetConfig+0x260>
 8007298:	231b      	movs	r3, #27
 800729a:	2218      	movs	r2, #24
 800729c:	4694      	mov	ip, r2
 800729e:	44bc      	add	ip, r7
 80072a0:	4463      	add	r3, ip
 80072a2:	2210      	movs	r2, #16
 80072a4:	701a      	strb	r2, [r3, #0]
 80072a6:	46c0      	nop			; (mov r8, r8)
 80072a8:	e006      	b.n	80072b8 <UART_SetConfig+0x260>
 80072aa:	231b      	movs	r3, #27
 80072ac:	2218      	movs	r2, #24
 80072ae:	4694      	mov	ip, r2
 80072b0:	44bc      	add	ip, r7
 80072b2:	4463      	add	r3, ip
 80072b4:	2210      	movs	r2, #16
 80072b6:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80072b8:	69fb      	ldr	r3, [r7, #28]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	4a45      	ldr	r2, [pc, #276]	; (80073d4 <UART_SetConfig+0x37c>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d000      	beq.n	80072c4 <UART_SetConfig+0x26c>
 80072c2:	e09d      	b.n	8007400 <UART_SetConfig+0x3a8>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80072c4:	231b      	movs	r3, #27
 80072c6:	2218      	movs	r2, #24
 80072c8:	4694      	mov	ip, r2
 80072ca:	44bc      	add	ip, r7
 80072cc:	4463      	add	r3, ip
 80072ce:	781b      	ldrb	r3, [r3, #0]
 80072d0:	2b02      	cmp	r3, #2
 80072d2:	d00d      	beq.n	80072f0 <UART_SetConfig+0x298>
 80072d4:	dc02      	bgt.n	80072dc <UART_SetConfig+0x284>
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d005      	beq.n	80072e6 <UART_SetConfig+0x28e>
 80072da:	e01d      	b.n	8007318 <UART_SetConfig+0x2c0>
 80072dc:	2b04      	cmp	r3, #4
 80072de:	d012      	beq.n	8007306 <UART_SetConfig+0x2ae>
 80072e0:	2b08      	cmp	r3, #8
 80072e2:	d015      	beq.n	8007310 <UART_SetConfig+0x2b8>
 80072e4:	e018      	b.n	8007318 <UART_SetConfig+0x2c0>
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 80072e6:	f7fe f92f 	bl	8005548 <HAL_RCC_GetPCLK1Freq>
 80072ea:	0003      	movs	r3, r0
 80072ec:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80072ee:	e01b      	b.n	8007328 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80072f0:	4b3b      	ldr	r3, [pc, #236]	; (80073e0 <UART_SetConfig+0x388>)
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	2210      	movs	r2, #16
 80072f6:	4013      	ands	r3, r2
 80072f8:	d002      	beq.n	8007300 <UART_SetConfig+0x2a8>
        {
          lpuart_ker_ck_pres = (uint32_t)(HSI_VALUE >> 2U);
 80072fa:	4b3d      	ldr	r3, [pc, #244]	; (80073f0 <UART_SetConfig+0x398>)
 80072fc:	627b      	str	r3, [r7, #36]	; 0x24
        }
        else
        {
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
        }
        break;
 80072fe:	e013      	b.n	8007328 <UART_SetConfig+0x2d0>
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8007300:	4b3c      	ldr	r3, [pc, #240]	; (80073f4 <UART_SetConfig+0x39c>)
 8007302:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007304:	e010      	b.n	8007328 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8007306:	f7fe f891 	bl	800542c <HAL_RCC_GetSysClockFreq>
 800730a:	0003      	movs	r3, r0
 800730c:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800730e:	e00b      	b.n	8007328 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8007310:	2380      	movs	r3, #128	; 0x80
 8007312:	021b      	lsls	r3, r3, #8
 8007314:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007316:	e007      	b.n	8007328 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8007318:	2313      	movs	r3, #19
 800731a:	2218      	movs	r2, #24
 800731c:	4694      	mov	ip, r2
 800731e:	44bc      	add	ip, r7
 8007320:	4463      	add	r3, ip
 8007322:	2201      	movs	r2, #1
 8007324:	701a      	strb	r2, [r3, #0]
        break;
 8007326:	46c0      	nop			; (mov r8, r8)
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8007328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800732a:	2b00      	cmp	r3, #0
 800732c:	d100      	bne.n	8007330 <UART_SetConfig+0x2d8>
 800732e:	e1a6      	b.n	800767e <UART_SetConfig+0x626>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007330:	69fb      	ldr	r3, [r7, #28]
 8007332:	685a      	ldr	r2, [r3, #4]
 8007334:	0013      	movs	r3, r2
 8007336:	005b      	lsls	r3, r3, #1
 8007338:	189b      	adds	r3, r3, r2
 800733a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800733c:	429a      	cmp	r2, r3
 800733e:	d305      	bcc.n	800734c <UART_SetConfig+0x2f4>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007340:	69fb      	ldr	r3, [r7, #28]
 8007342:	685b      	ldr	r3, [r3, #4]
 8007344:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007346:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007348:	429a      	cmp	r2, r3
 800734a:	d907      	bls.n	800735c <UART_SetConfig+0x304>
      {
        ret = HAL_ERROR;
 800734c:	2313      	movs	r3, #19
 800734e:	2218      	movs	r2, #24
 8007350:	4694      	mov	ip, r2
 8007352:	44bc      	add	ip, r7
 8007354:	4463      	add	r3, ip
 8007356:	2201      	movs	r2, #1
 8007358:	701a      	strb	r2, [r3, #0]
 800735a:	e190      	b.n	800767e <UART_SetConfig+0x626>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(lpuart_ker_ck_pres, huart->Init.BaudRate));
 800735c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800735e:	613b      	str	r3, [r7, #16]
 8007360:	2300      	movs	r3, #0
 8007362:	617b      	str	r3, [r7, #20]
 8007364:	6939      	ldr	r1, [r7, #16]
 8007366:	697a      	ldr	r2, [r7, #20]
 8007368:	000b      	movs	r3, r1
 800736a:	0e1b      	lsrs	r3, r3, #24
 800736c:	0010      	movs	r0, r2
 800736e:	0205      	lsls	r5, r0, #8
 8007370:	431d      	orrs	r5, r3
 8007372:	000b      	movs	r3, r1
 8007374:	021c      	lsls	r4, r3, #8
 8007376:	69fb      	ldr	r3, [r7, #28]
 8007378:	685b      	ldr	r3, [r3, #4]
 800737a:	085b      	lsrs	r3, r3, #1
 800737c:	60bb      	str	r3, [r7, #8]
 800737e:	2300      	movs	r3, #0
 8007380:	60fb      	str	r3, [r7, #12]
 8007382:	68b8      	ldr	r0, [r7, #8]
 8007384:	68f9      	ldr	r1, [r7, #12]
 8007386:	1900      	adds	r0, r0, r4
 8007388:	4169      	adcs	r1, r5
 800738a:	69fb      	ldr	r3, [r7, #28]
 800738c:	685b      	ldr	r3, [r3, #4]
 800738e:	603b      	str	r3, [r7, #0]
 8007390:	2300      	movs	r3, #0
 8007392:	607b      	str	r3, [r7, #4]
 8007394:	683a      	ldr	r2, [r7, #0]
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f7f9 f896 	bl	80004c8 <__aeabi_uldivmod>
 800739c:	0003      	movs	r3, r0
 800739e:	000c      	movs	r4, r1
 80073a0:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80073a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073a4:	4a14      	ldr	r2, [pc, #80]	; (80073f8 <UART_SetConfig+0x3a0>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d908      	bls.n	80073bc <UART_SetConfig+0x364>
 80073aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073ac:	4a13      	ldr	r2, [pc, #76]	; (80073fc <UART_SetConfig+0x3a4>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d804      	bhi.n	80073bc <UART_SetConfig+0x364>
        {
          huart->Instance->BRR = usartdiv;
 80073b2:	69fb      	ldr	r3, [r7, #28]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80073b8:	60da      	str	r2, [r3, #12]
 80073ba:	e160      	b.n	800767e <UART_SetConfig+0x626>
        }
        else
        {
          ret = HAL_ERROR;
 80073bc:	2313      	movs	r3, #19
 80073be:	2218      	movs	r2, #24
 80073c0:	4694      	mov	ip, r2
 80073c2:	44bc      	add	ip, r7
 80073c4:	4463      	add	r3, ip
 80073c6:	2201      	movs	r2, #1
 80073c8:	701a      	strb	r2, [r3, #0]
 80073ca:	e158      	b.n	800767e <UART_SetConfig+0x626>
 80073cc:	efff69f3 	.word	0xefff69f3
 80073d0:	ffffcfff 	.word	0xffffcfff
 80073d4:	40004800 	.word	0x40004800
 80073d8:	fffff4ff 	.word	0xfffff4ff
 80073dc:	40013800 	.word	0x40013800
 80073e0:	40021000 	.word	0x40021000
 80073e4:	40004400 	.word	0x40004400
 80073e8:	40004c00 	.word	0x40004c00
 80073ec:	40005000 	.word	0x40005000
 80073f0:	003d0900 	.word	0x003d0900
 80073f4:	00f42400 	.word	0x00f42400
 80073f8:	000002ff 	.word	0x000002ff
 80073fc:	000fffff 	.word	0x000fffff
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007400:	69fb      	ldr	r3, [r7, #28]
 8007402:	69da      	ldr	r2, [r3, #28]
 8007404:	2380      	movs	r3, #128	; 0x80
 8007406:	021b      	lsls	r3, r3, #8
 8007408:	429a      	cmp	r2, r3
 800740a:	d000      	beq.n	800740e <UART_SetConfig+0x3b6>
 800740c:	e0a9      	b.n	8007562 <UART_SetConfig+0x50a>
  {
    switch (clocksource)
 800740e:	231b      	movs	r3, #27
 8007410:	2218      	movs	r2, #24
 8007412:	4694      	mov	ip, r2
 8007414:	44bc      	add	ip, r7
 8007416:	4463      	add	r3, ip
 8007418:	781b      	ldrb	r3, [r3, #0]
 800741a:	2b08      	cmp	r3, #8
 800741c:	d86d      	bhi.n	80074fa <UART_SetConfig+0x4a2>
 800741e:	009a      	lsls	r2, r3, #2
 8007420:	4b9f      	ldr	r3, [pc, #636]	; (80076a0 <UART_SetConfig+0x648>)
 8007422:	18d3      	adds	r3, r2, r3
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8007428:	f7fe f88e 	bl	8005548 <HAL_RCC_GetPCLK1Freq>
 800742c:	0003      	movs	r3, r0
 800742e:	005a      	lsls	r2, r3, #1
 8007430:	69fb      	ldr	r3, [r7, #28]
 8007432:	685b      	ldr	r3, [r3, #4]
 8007434:	085b      	lsrs	r3, r3, #1
 8007436:	18d2      	adds	r2, r2, r3
 8007438:	69fb      	ldr	r3, [r7, #28]
 800743a:	685b      	ldr	r3, [r3, #4]
 800743c:	0019      	movs	r1, r3
 800743e:	0010      	movs	r0, r2
 8007440:	f7f8 fe6a 	bl	8000118 <__udivsi3>
 8007444:	0003      	movs	r3, r0
 8007446:	b29b      	uxth	r3, r3
 8007448:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800744a:	e05e      	b.n	800750a <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800744c:	f7fe f892 	bl	8005574 <HAL_RCC_GetPCLK2Freq>
 8007450:	0003      	movs	r3, r0
 8007452:	005a      	lsls	r2, r3, #1
 8007454:	69fb      	ldr	r3, [r7, #28]
 8007456:	685b      	ldr	r3, [r3, #4]
 8007458:	085b      	lsrs	r3, r3, #1
 800745a:	18d2      	adds	r2, r2, r3
 800745c:	69fb      	ldr	r3, [r7, #28]
 800745e:	685b      	ldr	r3, [r3, #4]
 8007460:	0019      	movs	r1, r3
 8007462:	0010      	movs	r0, r2
 8007464:	f7f8 fe58 	bl	8000118 <__udivsi3>
 8007468:	0003      	movs	r3, r0
 800746a:	b29b      	uxth	r3, r3
 800746c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800746e:	e04c      	b.n	800750a <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007470:	4b8c      	ldr	r3, [pc, #560]	; (80076a4 <UART_SetConfig+0x64c>)
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	2210      	movs	r2, #16
 8007476:	4013      	ands	r3, r2
 8007478:	d00e      	beq.n	8007498 <UART_SetConfig+0x440>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 800747a:	69fb      	ldr	r3, [r7, #28]
 800747c:	685b      	ldr	r3, [r3, #4]
 800747e:	085b      	lsrs	r3, r3, #1
 8007480:	4a89      	ldr	r2, [pc, #548]	; (80076a8 <UART_SetConfig+0x650>)
 8007482:	189a      	adds	r2, r3, r2
 8007484:	69fb      	ldr	r3, [r7, #28]
 8007486:	685b      	ldr	r3, [r3, #4]
 8007488:	0019      	movs	r1, r3
 800748a:	0010      	movs	r0, r2
 800748c:	f7f8 fe44 	bl	8000118 <__udivsi3>
 8007490:	0003      	movs	r3, r0
 8007492:	b29b      	uxth	r3, r3
 8007494:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 8007496:	e038      	b.n	800750a <UART_SetConfig+0x4b2>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8007498:	69fb      	ldr	r3, [r7, #28]
 800749a:	685b      	ldr	r3, [r3, #4]
 800749c:	085b      	lsrs	r3, r3, #1
 800749e:	4a83      	ldr	r2, [pc, #524]	; (80076ac <UART_SetConfig+0x654>)
 80074a0:	189a      	adds	r2, r3, r2
 80074a2:	69fb      	ldr	r3, [r7, #28]
 80074a4:	685b      	ldr	r3, [r3, #4]
 80074a6:	0019      	movs	r1, r3
 80074a8:	0010      	movs	r0, r2
 80074aa:	f7f8 fe35 	bl	8000118 <__udivsi3>
 80074ae:	0003      	movs	r3, r0
 80074b0:	b29b      	uxth	r3, r3
 80074b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80074b4:	e029      	b.n	800750a <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80074b6:	f7fd ffb9 	bl	800542c <HAL_RCC_GetSysClockFreq>
 80074ba:	0003      	movs	r3, r0
 80074bc:	005a      	lsls	r2, r3, #1
 80074be:	69fb      	ldr	r3, [r7, #28]
 80074c0:	685b      	ldr	r3, [r3, #4]
 80074c2:	085b      	lsrs	r3, r3, #1
 80074c4:	18d2      	adds	r2, r2, r3
 80074c6:	69fb      	ldr	r3, [r7, #28]
 80074c8:	685b      	ldr	r3, [r3, #4]
 80074ca:	0019      	movs	r1, r3
 80074cc:	0010      	movs	r0, r2
 80074ce:	f7f8 fe23 	bl	8000118 <__udivsi3>
 80074d2:	0003      	movs	r3, r0
 80074d4:	b29b      	uxth	r3, r3
 80074d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80074d8:	e017      	b.n	800750a <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80074da:	69fb      	ldr	r3, [r7, #28]
 80074dc:	685b      	ldr	r3, [r3, #4]
 80074de:	085b      	lsrs	r3, r3, #1
 80074e0:	2280      	movs	r2, #128	; 0x80
 80074e2:	0252      	lsls	r2, r2, #9
 80074e4:	189a      	adds	r2, r3, r2
 80074e6:	69fb      	ldr	r3, [r7, #28]
 80074e8:	685b      	ldr	r3, [r3, #4]
 80074ea:	0019      	movs	r1, r3
 80074ec:	0010      	movs	r0, r2
 80074ee:	f7f8 fe13 	bl	8000118 <__udivsi3>
 80074f2:	0003      	movs	r3, r0
 80074f4:	b29b      	uxth	r3, r3
 80074f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80074f8:	e007      	b.n	800750a <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80074fa:	2313      	movs	r3, #19
 80074fc:	2218      	movs	r2, #24
 80074fe:	4694      	mov	ip, r2
 8007500:	44bc      	add	ip, r7
 8007502:	4463      	add	r3, ip
 8007504:	2201      	movs	r2, #1
 8007506:	701a      	strb	r2, [r3, #0]
        break;
 8007508:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800750a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800750c:	2b0f      	cmp	r3, #15
 800750e:	d920      	bls.n	8007552 <UART_SetConfig+0x4fa>
 8007510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007512:	4a67      	ldr	r2, [pc, #412]	; (80076b0 <UART_SetConfig+0x658>)
 8007514:	4293      	cmp	r3, r2
 8007516:	d81c      	bhi.n	8007552 <UART_SetConfig+0x4fa>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800751a:	b29a      	uxth	r2, r3
 800751c:	200a      	movs	r0, #10
 800751e:	2418      	movs	r4, #24
 8007520:	193b      	adds	r3, r7, r4
 8007522:	181b      	adds	r3, r3, r0
 8007524:	210f      	movs	r1, #15
 8007526:	438a      	bics	r2, r1
 8007528:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800752a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800752c:	085b      	lsrs	r3, r3, #1
 800752e:	b29b      	uxth	r3, r3
 8007530:	2207      	movs	r2, #7
 8007532:	4013      	ands	r3, r2
 8007534:	b299      	uxth	r1, r3
 8007536:	193b      	adds	r3, r7, r4
 8007538:	181b      	adds	r3, r3, r0
 800753a:	193a      	adds	r2, r7, r4
 800753c:	1812      	adds	r2, r2, r0
 800753e:	8812      	ldrh	r2, [r2, #0]
 8007540:	430a      	orrs	r2, r1
 8007542:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8007544:	69fb      	ldr	r3, [r7, #28]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	193a      	adds	r2, r7, r4
 800754a:	1812      	adds	r2, r2, r0
 800754c:	8812      	ldrh	r2, [r2, #0]
 800754e:	60da      	str	r2, [r3, #12]
 8007550:	e095      	b.n	800767e <UART_SetConfig+0x626>
    }
    else
    {
      ret = HAL_ERROR;
 8007552:	2313      	movs	r3, #19
 8007554:	2218      	movs	r2, #24
 8007556:	4694      	mov	ip, r2
 8007558:	44bc      	add	ip, r7
 800755a:	4463      	add	r3, ip
 800755c:	2201      	movs	r2, #1
 800755e:	701a      	strb	r2, [r3, #0]
 8007560:	e08d      	b.n	800767e <UART_SetConfig+0x626>
    }
  }
  else
  {
    switch (clocksource)
 8007562:	231b      	movs	r3, #27
 8007564:	2218      	movs	r2, #24
 8007566:	4694      	mov	ip, r2
 8007568:	44bc      	add	ip, r7
 800756a:	4463      	add	r3, ip
 800756c:	781b      	ldrb	r3, [r3, #0]
 800756e:	2b08      	cmp	r3, #8
 8007570:	d86a      	bhi.n	8007648 <UART_SetConfig+0x5f0>
 8007572:	009a      	lsls	r2, r3, #2
 8007574:	4b4f      	ldr	r3, [pc, #316]	; (80076b4 <UART_SetConfig+0x65c>)
 8007576:	18d3      	adds	r3, r2, r3
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800757c:	f7fd ffe4 	bl	8005548 <HAL_RCC_GetPCLK1Freq>
 8007580:	0002      	movs	r2, r0
 8007582:	69fb      	ldr	r3, [r7, #28]
 8007584:	685b      	ldr	r3, [r3, #4]
 8007586:	085b      	lsrs	r3, r3, #1
 8007588:	18d2      	adds	r2, r2, r3
 800758a:	69fb      	ldr	r3, [r7, #28]
 800758c:	685b      	ldr	r3, [r3, #4]
 800758e:	0019      	movs	r1, r3
 8007590:	0010      	movs	r0, r2
 8007592:	f7f8 fdc1 	bl	8000118 <__udivsi3>
 8007596:	0003      	movs	r3, r0
 8007598:	b29b      	uxth	r3, r3
 800759a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800759c:	e05c      	b.n	8007658 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800759e:	f7fd ffe9 	bl	8005574 <HAL_RCC_GetPCLK2Freq>
 80075a2:	0002      	movs	r2, r0
 80075a4:	69fb      	ldr	r3, [r7, #28]
 80075a6:	685b      	ldr	r3, [r3, #4]
 80075a8:	085b      	lsrs	r3, r3, #1
 80075aa:	18d2      	adds	r2, r2, r3
 80075ac:	69fb      	ldr	r3, [r7, #28]
 80075ae:	685b      	ldr	r3, [r3, #4]
 80075b0:	0019      	movs	r1, r3
 80075b2:	0010      	movs	r0, r2
 80075b4:	f7f8 fdb0 	bl	8000118 <__udivsi3>
 80075b8:	0003      	movs	r3, r0
 80075ba:	b29b      	uxth	r3, r3
 80075bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80075be:	e04b      	b.n	8007658 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80075c0:	4b38      	ldr	r3, [pc, #224]	; (80076a4 <UART_SetConfig+0x64c>)
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	2210      	movs	r2, #16
 80075c6:	4013      	ands	r3, r2
 80075c8:	d00e      	beq.n	80075e8 <UART_SetConfig+0x590>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 80075ca:	69fb      	ldr	r3, [r7, #28]
 80075cc:	685b      	ldr	r3, [r3, #4]
 80075ce:	085b      	lsrs	r3, r3, #1
 80075d0:	4a39      	ldr	r2, [pc, #228]	; (80076b8 <UART_SetConfig+0x660>)
 80075d2:	189a      	adds	r2, r3, r2
 80075d4:	69fb      	ldr	r3, [r7, #28]
 80075d6:	685b      	ldr	r3, [r3, #4]
 80075d8:	0019      	movs	r1, r3
 80075da:	0010      	movs	r0, r2
 80075dc:	f7f8 fd9c 	bl	8000118 <__udivsi3>
 80075e0:	0003      	movs	r3, r0
 80075e2:	b29b      	uxth	r3, r3
 80075e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 80075e6:	e037      	b.n	8007658 <UART_SetConfig+0x600>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80075e8:	69fb      	ldr	r3, [r7, #28]
 80075ea:	685b      	ldr	r3, [r3, #4]
 80075ec:	085b      	lsrs	r3, r3, #1
 80075ee:	4a33      	ldr	r2, [pc, #204]	; (80076bc <UART_SetConfig+0x664>)
 80075f0:	189a      	adds	r2, r3, r2
 80075f2:	69fb      	ldr	r3, [r7, #28]
 80075f4:	685b      	ldr	r3, [r3, #4]
 80075f6:	0019      	movs	r1, r3
 80075f8:	0010      	movs	r0, r2
 80075fa:	f7f8 fd8d 	bl	8000118 <__udivsi3>
 80075fe:	0003      	movs	r3, r0
 8007600:	b29b      	uxth	r3, r3
 8007602:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007604:	e028      	b.n	8007658 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8007606:	f7fd ff11 	bl	800542c <HAL_RCC_GetSysClockFreq>
 800760a:	0002      	movs	r2, r0
 800760c:	69fb      	ldr	r3, [r7, #28]
 800760e:	685b      	ldr	r3, [r3, #4]
 8007610:	085b      	lsrs	r3, r3, #1
 8007612:	18d2      	adds	r2, r2, r3
 8007614:	69fb      	ldr	r3, [r7, #28]
 8007616:	685b      	ldr	r3, [r3, #4]
 8007618:	0019      	movs	r1, r3
 800761a:	0010      	movs	r0, r2
 800761c:	f7f8 fd7c 	bl	8000118 <__udivsi3>
 8007620:	0003      	movs	r3, r0
 8007622:	b29b      	uxth	r3, r3
 8007624:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007626:	e017      	b.n	8007658 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8007628:	69fb      	ldr	r3, [r7, #28]
 800762a:	685b      	ldr	r3, [r3, #4]
 800762c:	085b      	lsrs	r3, r3, #1
 800762e:	2280      	movs	r2, #128	; 0x80
 8007630:	0212      	lsls	r2, r2, #8
 8007632:	189a      	adds	r2, r3, r2
 8007634:	69fb      	ldr	r3, [r7, #28]
 8007636:	685b      	ldr	r3, [r3, #4]
 8007638:	0019      	movs	r1, r3
 800763a:	0010      	movs	r0, r2
 800763c:	f7f8 fd6c 	bl	8000118 <__udivsi3>
 8007640:	0003      	movs	r3, r0
 8007642:	b29b      	uxth	r3, r3
 8007644:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007646:	e007      	b.n	8007658 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8007648:	2313      	movs	r3, #19
 800764a:	2218      	movs	r2, #24
 800764c:	4694      	mov	ip, r2
 800764e:	44bc      	add	ip, r7
 8007650:	4463      	add	r3, ip
 8007652:	2201      	movs	r2, #1
 8007654:	701a      	strb	r2, [r3, #0]
        break;
 8007656:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800765a:	2b0f      	cmp	r3, #15
 800765c:	d908      	bls.n	8007670 <UART_SetConfig+0x618>
 800765e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007660:	4a13      	ldr	r2, [pc, #76]	; (80076b0 <UART_SetConfig+0x658>)
 8007662:	4293      	cmp	r3, r2
 8007664:	d804      	bhi.n	8007670 <UART_SetConfig+0x618>
    {
      huart->Instance->BRR = usartdiv;
 8007666:	69fb      	ldr	r3, [r7, #28]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800766c:	60da      	str	r2, [r3, #12]
 800766e:	e006      	b.n	800767e <UART_SetConfig+0x626>
    }
    else
    {
      ret = HAL_ERROR;
 8007670:	2313      	movs	r3, #19
 8007672:	2218      	movs	r2, #24
 8007674:	4694      	mov	ip, r2
 8007676:	44bc      	add	ip, r7
 8007678:	4463      	add	r3, ip
 800767a:	2201      	movs	r2, #1
 800767c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800767e:	69fb      	ldr	r3, [r7, #28]
 8007680:	2200      	movs	r2, #0
 8007682:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8007684:	69fb      	ldr	r3, [r7, #28]
 8007686:	2200      	movs	r2, #0
 8007688:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800768a:	2313      	movs	r3, #19
 800768c:	2218      	movs	r2, #24
 800768e:	4694      	mov	ip, r2
 8007690:	44bc      	add	ip, r7
 8007692:	4463      	add	r3, ip
 8007694:	781b      	ldrb	r3, [r3, #0]
}
 8007696:	0018      	movs	r0, r3
 8007698:	46bd      	mov	sp, r7
 800769a:	b00e      	add	sp, #56	; 0x38
 800769c:	bdb0      	pop	{r4, r5, r7, pc}
 800769e:	46c0      	nop			; (mov r8, r8)
 80076a0:	080213a4 	.word	0x080213a4
 80076a4:	40021000 	.word	0x40021000
 80076a8:	007a1200 	.word	0x007a1200
 80076ac:	01e84800 	.word	0x01e84800
 80076b0:	0000ffff 	.word	0x0000ffff
 80076b4:	080213c8 	.word	0x080213c8
 80076b8:	003d0900 	.word	0x003d0900
 80076bc:	00f42400 	.word	0x00f42400

080076c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b082      	sub	sp, #8
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076cc:	2201      	movs	r2, #1
 80076ce:	4013      	ands	r3, r2
 80076d0:	d00b      	beq.n	80076ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	685b      	ldr	r3, [r3, #4]
 80076d8:	4a4a      	ldr	r2, [pc, #296]	; (8007804 <UART_AdvFeatureConfig+0x144>)
 80076da:	4013      	ands	r3, r2
 80076dc:	0019      	movs	r1, r3
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	430a      	orrs	r2, r1
 80076e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ee:	2202      	movs	r2, #2
 80076f0:	4013      	ands	r3, r2
 80076f2:	d00b      	beq.n	800770c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	685b      	ldr	r3, [r3, #4]
 80076fa:	4a43      	ldr	r2, [pc, #268]	; (8007808 <UART_AdvFeatureConfig+0x148>)
 80076fc:	4013      	ands	r3, r2
 80076fe:	0019      	movs	r1, r3
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	430a      	orrs	r2, r1
 800770a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007710:	2204      	movs	r2, #4
 8007712:	4013      	ands	r3, r2
 8007714:	d00b      	beq.n	800772e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	685b      	ldr	r3, [r3, #4]
 800771c:	4a3b      	ldr	r2, [pc, #236]	; (800780c <UART_AdvFeatureConfig+0x14c>)
 800771e:	4013      	ands	r3, r2
 8007720:	0019      	movs	r1, r3
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	430a      	orrs	r2, r1
 800772c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007732:	2208      	movs	r2, #8
 8007734:	4013      	ands	r3, r2
 8007736:	d00b      	beq.n	8007750 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	685b      	ldr	r3, [r3, #4]
 800773e:	4a34      	ldr	r2, [pc, #208]	; (8007810 <UART_AdvFeatureConfig+0x150>)
 8007740:	4013      	ands	r3, r2
 8007742:	0019      	movs	r1, r3
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	430a      	orrs	r2, r1
 800774e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007754:	2210      	movs	r2, #16
 8007756:	4013      	ands	r3, r2
 8007758:	d00b      	beq.n	8007772 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	689b      	ldr	r3, [r3, #8]
 8007760:	4a2c      	ldr	r2, [pc, #176]	; (8007814 <UART_AdvFeatureConfig+0x154>)
 8007762:	4013      	ands	r3, r2
 8007764:	0019      	movs	r1, r3
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	430a      	orrs	r2, r1
 8007770:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007776:	2220      	movs	r2, #32
 8007778:	4013      	ands	r3, r2
 800777a:	d00b      	beq.n	8007794 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	689b      	ldr	r3, [r3, #8]
 8007782:	4a25      	ldr	r2, [pc, #148]	; (8007818 <UART_AdvFeatureConfig+0x158>)
 8007784:	4013      	ands	r3, r2
 8007786:	0019      	movs	r1, r3
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	430a      	orrs	r2, r1
 8007792:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007798:	2240      	movs	r2, #64	; 0x40
 800779a:	4013      	ands	r3, r2
 800779c:	d01d      	beq.n	80077da <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	685b      	ldr	r3, [r3, #4]
 80077a4:	4a1d      	ldr	r2, [pc, #116]	; (800781c <UART_AdvFeatureConfig+0x15c>)
 80077a6:	4013      	ands	r3, r2
 80077a8:	0019      	movs	r1, r3
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	430a      	orrs	r2, r1
 80077b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80077ba:	2380      	movs	r3, #128	; 0x80
 80077bc:	035b      	lsls	r3, r3, #13
 80077be:	429a      	cmp	r2, r3
 80077c0:	d10b      	bne.n	80077da <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	685b      	ldr	r3, [r3, #4]
 80077c8:	4a15      	ldr	r2, [pc, #84]	; (8007820 <UART_AdvFeatureConfig+0x160>)
 80077ca:	4013      	ands	r3, r2
 80077cc:	0019      	movs	r1, r3
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	430a      	orrs	r2, r1
 80077d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077de:	2280      	movs	r2, #128	; 0x80
 80077e0:	4013      	ands	r3, r2
 80077e2:	d00b      	beq.n	80077fc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	685b      	ldr	r3, [r3, #4]
 80077ea:	4a0e      	ldr	r2, [pc, #56]	; (8007824 <UART_AdvFeatureConfig+0x164>)
 80077ec:	4013      	ands	r3, r2
 80077ee:	0019      	movs	r1, r3
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	430a      	orrs	r2, r1
 80077fa:	605a      	str	r2, [r3, #4]
  }
}
 80077fc:	46c0      	nop			; (mov r8, r8)
 80077fe:	46bd      	mov	sp, r7
 8007800:	b002      	add	sp, #8
 8007802:	bd80      	pop	{r7, pc}
 8007804:	fffdffff 	.word	0xfffdffff
 8007808:	fffeffff 	.word	0xfffeffff
 800780c:	fffbffff 	.word	0xfffbffff
 8007810:	ffff7fff 	.word	0xffff7fff
 8007814:	ffffefff 	.word	0xffffefff
 8007818:	ffffdfff 	.word	0xffffdfff
 800781c:	ffefffff 	.word	0xffefffff
 8007820:	ff9fffff 	.word	0xff9fffff
 8007824:	fff7ffff 	.word	0xfff7ffff

08007828 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b086      	sub	sp, #24
 800782c:	af02      	add	r7, sp, #8
 800782e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2200      	movs	r2, #0
 8007834:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8007836:	f7fc fb09 	bl	8003e4c <HAL_GetTick>
 800783a:	0003      	movs	r3, r0
 800783c:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	2208      	movs	r2, #8
 8007846:	4013      	ands	r3, r2
 8007848:	2b08      	cmp	r3, #8
 800784a:	d10d      	bne.n	8007868 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800784c:	68fa      	ldr	r2, [r7, #12]
 800784e:	2380      	movs	r3, #128	; 0x80
 8007850:	0399      	lsls	r1, r3, #14
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	4b16      	ldr	r3, [pc, #88]	; (80078b0 <UART_CheckIdleState+0x88>)
 8007856:	9300      	str	r3, [sp, #0]
 8007858:	0013      	movs	r3, r2
 800785a:	2200      	movs	r2, #0
 800785c:	f000 f82a 	bl	80078b4 <UART_WaitOnFlagUntilTimeout>
 8007860:	1e03      	subs	r3, r0, #0
 8007862:	d001      	beq.n	8007868 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007864:	2303      	movs	r3, #3
 8007866:	e01f      	b.n	80078a8 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	2204      	movs	r2, #4
 8007870:	4013      	ands	r3, r2
 8007872:	2b04      	cmp	r3, #4
 8007874:	d10d      	bne.n	8007892 <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007876:	68fa      	ldr	r2, [r7, #12]
 8007878:	2380      	movs	r3, #128	; 0x80
 800787a:	03d9      	lsls	r1, r3, #15
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	4b0c      	ldr	r3, [pc, #48]	; (80078b0 <UART_CheckIdleState+0x88>)
 8007880:	9300      	str	r3, [sp, #0]
 8007882:	0013      	movs	r3, r2
 8007884:	2200      	movs	r2, #0
 8007886:	f000 f815 	bl	80078b4 <UART_WaitOnFlagUntilTimeout>
 800788a:	1e03      	subs	r3, r0, #0
 800788c:	d001      	beq.n	8007892 <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800788e:	2303      	movs	r3, #3
 8007890:	e00a      	b.n	80078a8 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2220      	movs	r2, #32
 8007896:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2220      	movs	r2, #32
 800789c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2270      	movs	r2, #112	; 0x70
 80078a2:	2100      	movs	r1, #0
 80078a4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80078a6:	2300      	movs	r3, #0
}
 80078a8:	0018      	movs	r0, r3
 80078aa:	46bd      	mov	sp, r7
 80078ac:	b004      	add	sp, #16
 80078ae:	bd80      	pop	{r7, pc}
 80078b0:	01ffffff 	.word	0x01ffffff

080078b4 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b084      	sub	sp, #16
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	60f8      	str	r0, [r7, #12]
 80078bc:	60b9      	str	r1, [r7, #8]
 80078be:	603b      	str	r3, [r7, #0]
 80078c0:	1dfb      	adds	r3, r7, #7
 80078c2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078c4:	e029      	b.n	800791a <UART_WaitOnFlagUntilTimeout+0x66>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80078c6:	69bb      	ldr	r3, [r7, #24]
 80078c8:	3301      	adds	r3, #1
 80078ca:	d026      	beq.n	800791a <UART_WaitOnFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80078cc:	f7fc fabe 	bl	8003e4c <HAL_GetTick>
 80078d0:	0002      	movs	r2, r0
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	1ad3      	subs	r3, r2, r3
 80078d6:	69ba      	ldr	r2, [r7, #24]
 80078d8:	429a      	cmp	r2, r3
 80078da:	d302      	bcc.n	80078e2 <UART_WaitOnFlagUntilTimeout+0x2e>
 80078dc:	69bb      	ldr	r3, [r7, #24]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d11b      	bne.n	800791a <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	681a      	ldr	r2, [r3, #0]
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	4915      	ldr	r1, [pc, #84]	; (8007944 <UART_WaitOnFlagUntilTimeout+0x90>)
 80078ee:	400a      	ands	r2, r1
 80078f0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	689a      	ldr	r2, [r3, #8]
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	2101      	movs	r1, #1
 80078fe:	438a      	bics	r2, r1
 8007900:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	2220      	movs	r2, #32
 8007906:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	2220      	movs	r2, #32
 800790c:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	2270      	movs	r2, #112	; 0x70
 8007912:	2100      	movs	r1, #0
 8007914:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007916:	2303      	movs	r3, #3
 8007918:	e00f      	b.n	800793a <UART_WaitOnFlagUntilTimeout+0x86>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	69db      	ldr	r3, [r3, #28]
 8007920:	68ba      	ldr	r2, [r7, #8]
 8007922:	4013      	ands	r3, r2
 8007924:	68ba      	ldr	r2, [r7, #8]
 8007926:	1ad3      	subs	r3, r2, r3
 8007928:	425a      	negs	r2, r3
 800792a:	4153      	adcs	r3, r2
 800792c:	b2db      	uxtb	r3, r3
 800792e:	001a      	movs	r2, r3
 8007930:	1dfb      	adds	r3, r7, #7
 8007932:	781b      	ldrb	r3, [r3, #0]
 8007934:	429a      	cmp	r2, r3
 8007936:	d0c6      	beq.n	80078c6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007938:	2300      	movs	r3, #0
}
 800793a:	0018      	movs	r0, r3
 800793c:	46bd      	mov	sp, r7
 800793e:	b004      	add	sp, #16
 8007940:	bd80      	pop	{r7, pc}
 8007942:	46c0      	nop			; (mov r8, r8)
 8007944:	fffffe5f 	.word	0xfffffe5f

08007948 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b082      	sub	sp, #8
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	681a      	ldr	r2, [r3, #0]
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	490a      	ldr	r1, [pc, #40]	; (8007984 <UART_EndRxTransfer+0x3c>)
 800795c:	400a      	ands	r2, r1
 800795e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	689a      	ldr	r2, [r3, #8]
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	2101      	movs	r1, #1
 800796c:	438a      	bics	r2, r1
 800796e:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2220      	movs	r2, #32
 8007974:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2200      	movs	r2, #0
 800797a:	661a      	str	r2, [r3, #96]	; 0x60
}
 800797c:	46c0      	nop			; (mov r8, r8)
 800797e:	46bd      	mov	sp, r7
 8007980:	b002      	add	sp, #8
 8007982:	bd80      	pop	{r7, pc}
 8007984:	fffffedf 	.word	0xfffffedf

08007988 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b084      	sub	sp, #16
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007994:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	225a      	movs	r2, #90	; 0x5a
 800799a:	2100      	movs	r1, #0
 800799c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	2252      	movs	r2, #82	; 0x52
 80079a2:	2100      	movs	r1, #0
 80079a4:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	0018      	movs	r0, r3
 80079aa:	f016 fd6d 	bl	801e488 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80079ae:	46c0      	nop			; (mov r8, r8)
 80079b0:	46bd      	mov	sp, r7
 80079b2:	b004      	add	sp, #16
 80079b4:	bd80      	pop	{r7, pc}

080079b6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80079b6:	b580      	push	{r7, lr}
 80079b8:	b082      	sub	sp, #8
 80079ba:	af00      	add	r7, sp, #0
 80079bc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	681a      	ldr	r2, [r3, #0]
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	2140      	movs	r1, #64	; 0x40
 80079ca:	438a      	bics	r2, r1
 80079cc:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2220      	movs	r2, #32
 80079d2:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2200      	movs	r2, #0
 80079d8:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	0018      	movs	r0, r3
 80079de:	f7ff fb33 	bl	8007048 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80079e2:	46c0      	nop			; (mov r8, r8)
 80079e4:	46bd      	mov	sp, r7
 80079e6:	b002      	add	sp, #8
 80079e8:	bd80      	pop	{r7, pc}
	...

080079ec <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b084      	sub	sp, #16
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80079f4:	230e      	movs	r3, #14
 80079f6:	18fb      	adds	r3, r7, r3
 80079f8:	687a      	ldr	r2, [r7, #4]
 80079fa:	215c      	movs	r1, #92	; 0x5c
 80079fc:	5a52      	ldrh	r2, [r2, r1]
 80079fe:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007a04:	2b22      	cmp	r3, #34	; 0x22
 8007a06:	d140      	bne.n	8007a8a <UART_RxISR_8BIT+0x9e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007a0e:	210c      	movs	r1, #12
 8007a10:	187b      	adds	r3, r7, r1
 8007a12:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007a14:	187b      	adds	r3, r7, r1
 8007a16:	881b      	ldrh	r3, [r3, #0]
 8007a18:	b2da      	uxtb	r2, r3
 8007a1a:	230e      	movs	r3, #14
 8007a1c:	18fb      	adds	r3, r7, r3
 8007a1e:	881b      	ldrh	r3, [r3, #0]
 8007a20:	b2d9      	uxtb	r1, r3
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a26:	400a      	ands	r2, r1
 8007a28:	b2d2      	uxtb	r2, r2
 8007a2a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a30:	1c5a      	adds	r2, r3, #1
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	225a      	movs	r2, #90	; 0x5a
 8007a3a:	5a9b      	ldrh	r3, [r3, r2]
 8007a3c:	b29b      	uxth	r3, r3
 8007a3e:	3b01      	subs	r3, #1
 8007a40:	b299      	uxth	r1, r3
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	225a      	movs	r2, #90	; 0x5a
 8007a46:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	225a      	movs	r2, #90	; 0x5a
 8007a4c:	5a9b      	ldrh	r3, [r3, r2]
 8007a4e:	b29b      	uxth	r3, r3
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d122      	bne.n	8007a9a <UART_RxISR_8BIT+0xae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	681a      	ldr	r2, [r3, #0]
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	4911      	ldr	r1, [pc, #68]	; (8007aa4 <UART_RxISR_8BIT+0xb8>)
 8007a60:	400a      	ands	r2, r1
 8007a62:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	689a      	ldr	r2, [r3, #8]
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	2101      	movs	r1, #1
 8007a70:	438a      	bics	r2, r1
 8007a72:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2220      	movs	r2, #32
 8007a78:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	0018      	movs	r0, r3
 8007a84:	f016 fd14 	bl	801e4b0 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007a88:	e007      	b.n	8007a9a <UART_RxISR_8BIT+0xae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	699a      	ldr	r2, [r3, #24]
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	2108      	movs	r1, #8
 8007a96:	430a      	orrs	r2, r1
 8007a98:	619a      	str	r2, [r3, #24]
}
 8007a9a:	46c0      	nop			; (mov r8, r8)
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	b004      	add	sp, #16
 8007aa0:	bd80      	pop	{r7, pc}
 8007aa2:	46c0      	nop			; (mov r8, r8)
 8007aa4:	fffffedf 	.word	0xfffffedf

08007aa8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b084      	sub	sp, #16
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007ab0:	230e      	movs	r3, #14
 8007ab2:	18fb      	adds	r3, r7, r3
 8007ab4:	687a      	ldr	r2, [r7, #4]
 8007ab6:	215c      	movs	r1, #92	; 0x5c
 8007ab8:	5a52      	ldrh	r2, [r2, r1]
 8007aba:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007ac0:	2b22      	cmp	r3, #34	; 0x22
 8007ac2:	d140      	bne.n	8007b46 <UART_RxISR_16BIT+0x9e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007aca:	210c      	movs	r1, #12
 8007acc:	187b      	adds	r3, r7, r1
 8007ace:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ad4:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8007ad6:	187b      	adds	r3, r7, r1
 8007ad8:	220e      	movs	r2, #14
 8007ada:	18ba      	adds	r2, r7, r2
 8007adc:	881b      	ldrh	r3, [r3, #0]
 8007ade:	8812      	ldrh	r2, [r2, #0]
 8007ae0:	4013      	ands	r3, r2
 8007ae2:	b29a      	uxth	r2, r3
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007aec:	1c9a      	adds	r2, r3, #2
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	225a      	movs	r2, #90	; 0x5a
 8007af6:	5a9b      	ldrh	r3, [r3, r2]
 8007af8:	b29b      	uxth	r3, r3
 8007afa:	3b01      	subs	r3, #1
 8007afc:	b299      	uxth	r1, r3
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	225a      	movs	r2, #90	; 0x5a
 8007b02:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	225a      	movs	r2, #90	; 0x5a
 8007b08:	5a9b      	ldrh	r3, [r3, r2]
 8007b0a:	b29b      	uxth	r3, r3
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d122      	bne.n	8007b56 <UART_RxISR_16BIT+0xae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	681a      	ldr	r2, [r3, #0]
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	4911      	ldr	r1, [pc, #68]	; (8007b60 <UART_RxISR_16BIT+0xb8>)
 8007b1c:	400a      	ands	r2, r1
 8007b1e:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	689a      	ldr	r2, [r3, #8]
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	2101      	movs	r1, #1
 8007b2c:	438a      	bics	r2, r1
 8007b2e:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2220      	movs	r2, #32
 8007b34:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2200      	movs	r2, #0
 8007b3a:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	0018      	movs	r0, r3
 8007b40:	f016 fcb6 	bl	801e4b0 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007b44:	e007      	b.n	8007b56 <UART_RxISR_16BIT+0xae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	699a      	ldr	r2, [r3, #24]
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	2108      	movs	r1, #8
 8007b52:	430a      	orrs	r2, r1
 8007b54:	619a      	str	r2, [r3, #24]
}
 8007b56:	46c0      	nop			; (mov r8, r8)
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	b004      	add	sp, #16
 8007b5c:	bd80      	pop	{r7, pc}
 8007b5e:	46c0      	nop			; (mov r8, r8)
 8007b60:	fffffedf 	.word	0xfffffedf

08007b64 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b088      	sub	sp, #32
 8007b68:	af02      	add	r7, sp, #8
 8007b6a:	60f8      	str	r0, [r7, #12]
 8007b6c:	1d3b      	adds	r3, r7, #4
 8007b6e:	6019      	str	r1, [r3, #0]
 8007b70:	605a      	str	r2, [r3, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007b72:	2317      	movs	r3, #23
 8007b74:	18fb      	adds	r3, r7, r3
 8007b76:	2200      	movs	r2, #0
 8007b78:	701a      	strb	r2, [r3, #0]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	2270      	movs	r2, #112	; 0x70
 8007b7e:	5c9b      	ldrb	r3, [r3, r2]
 8007b80:	2b01      	cmp	r3, #1
 8007b82:	d101      	bne.n	8007b88 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x24>
 8007b84:	2302      	movs	r3, #2
 8007b86:	e04b      	b.n	8007c20 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xbc>
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	2270      	movs	r2, #112	; 0x70
 8007b8c:	2101      	movs	r1, #1
 8007b8e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	2224      	movs	r2, #36	; 0x24
 8007b94:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	681a      	ldr	r2, [r3, #0]
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	2101      	movs	r1, #1
 8007ba2:	438a      	bics	r2, r1
 8007ba4:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	689b      	ldr	r3, [r3, #8]
 8007bac:	4a1e      	ldr	r2, [pc, #120]	; (8007c28 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xc4>)
 8007bae:	4013      	ands	r3, r2
 8007bb0:	0019      	movs	r1, r3
 8007bb2:	1d3b      	adds	r3, r7, #4
 8007bb4:	681a      	ldr	r2, [r3, #0]
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	430a      	orrs	r2, r1
 8007bbc:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 8007bbe:	1d3b      	adds	r3, r7, #4
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d105      	bne.n	8007bd2 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x6e>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 8007bc6:	1d3b      	adds	r3, r7, #4
 8007bc8:	68f8      	ldr	r0, [r7, #12]
 8007bca:	6819      	ldr	r1, [r3, #0]
 8007bcc:	685a      	ldr	r2, [r3, #4]
 8007bce:	f000 f84f 	bl	8007c70 <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	681a      	ldr	r2, [r3, #0]
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	2101      	movs	r1, #1
 8007bde:	430a      	orrs	r2, r1
 8007be0:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8007be2:	f7fc f933 	bl	8003e4c <HAL_GetTick>
 8007be6:	0003      	movs	r3, r0
 8007be8:	613b      	str	r3, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007bea:	693a      	ldr	r2, [r7, #16]
 8007bec:	2380      	movs	r3, #128	; 0x80
 8007bee:	03d9      	lsls	r1, r3, #15
 8007bf0:	68f8      	ldr	r0, [r7, #12]
 8007bf2:	4b0e      	ldr	r3, [pc, #56]	; (8007c2c <HAL_UARTEx_StopModeWakeUpSourceConfig+0xc8>)
 8007bf4:	9300      	str	r3, [sp, #0]
 8007bf6:	0013      	movs	r3, r2
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	f7ff fe5b 	bl	80078b4 <UART_WaitOnFlagUntilTimeout>
 8007bfe:	1e03      	subs	r3, r0, #0
 8007c00:	d004      	beq.n	8007c0c <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa8>
  {
    status = HAL_TIMEOUT;
 8007c02:	2317      	movs	r3, #23
 8007c04:	18fb      	adds	r3, r7, r3
 8007c06:	2203      	movs	r2, #3
 8007c08:	701a      	strb	r2, [r3, #0]
 8007c0a:	e002      	b.n	8007c12 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	2220      	movs	r2, #32
 8007c10:	675a      	str	r2, [r3, #116]	; 0x74
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	2270      	movs	r2, #112	; 0x70
 8007c16:	2100      	movs	r1, #0
 8007c18:	5499      	strb	r1, [r3, r2]

  return status;
 8007c1a:	2317      	movs	r3, #23
 8007c1c:	18fb      	adds	r3, r7, r3
 8007c1e:	781b      	ldrb	r3, [r3, #0]
}
 8007c20:	0018      	movs	r0, r3
 8007c22:	46bd      	mov	sp, r7
 8007c24:	b006      	add	sp, #24
 8007c26:	bd80      	pop	{r7, pc}
 8007c28:	ffcfffff 	.word	0xffcfffff
 8007c2c:	01ffffff 	.word	0x01ffffff

08007c30 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b082      	sub	sp, #8
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2270      	movs	r2, #112	; 0x70
 8007c3c:	5c9b      	ldrb	r3, [r3, r2]
 8007c3e:	2b01      	cmp	r3, #1
 8007c40:	d101      	bne.n	8007c46 <HAL_UARTEx_EnableStopMode+0x16>
 8007c42:	2302      	movs	r3, #2
 8007c44:	e010      	b.n	8007c68 <HAL_UARTEx_EnableStopMode+0x38>
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2270      	movs	r2, #112	; 0x70
 8007c4a:	2101      	movs	r1, #1
 8007c4c:	5499      	strb	r1, [r3, r2]

  /* Set UESM bit */
  SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	681a      	ldr	r2, [r3, #0]
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	2102      	movs	r1, #2
 8007c5a:	430a      	orrs	r2, r1
 8007c5c:	601a      	str	r2, [r3, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2270      	movs	r2, #112	; 0x70
 8007c62:	2100      	movs	r1, #0
 8007c64:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007c66:	2300      	movs	r3, #0
}
 8007c68:	0018      	movs	r0, r3
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	b002      	add	sp, #8
 8007c6e:	bd80      	pop	{r7, pc}

08007c70 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b084      	sub	sp, #16
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	60f8      	str	r0, [r7, #12]
 8007c78:	1d3b      	adds	r3, r7, #4
 8007c7a:	6019      	str	r1, [r3, #0]
 8007c7c:	605a      	str	r2, [r3, #4]
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	685b      	ldr	r3, [r3, #4]
 8007c84:	2210      	movs	r2, #16
 8007c86:	4393      	bics	r3, r2
 8007c88:	001a      	movs	r2, r3
 8007c8a:	1d3b      	adds	r3, r7, #4
 8007c8c:	889b      	ldrh	r3, [r3, #4]
 8007c8e:	0019      	movs	r1, r3
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	430a      	orrs	r2, r1
 8007c96:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	685b      	ldr	r3, [r3, #4]
 8007c9e:	021b      	lsls	r3, r3, #8
 8007ca0:	0a19      	lsrs	r1, r3, #8
 8007ca2:	1d3b      	adds	r3, r7, #4
 8007ca4:	799b      	ldrb	r3, [r3, #6]
 8007ca6:	061a      	lsls	r2, r3, #24
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	430a      	orrs	r2, r1
 8007cae:	605a      	str	r2, [r3, #4]
}
 8007cb0:	46c0      	nop			; (mov r8, r8)
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	b004      	add	sp, #16
 8007cb6:	bd80      	pop	{r7, pc}

08007cb8 <certif_running>:
static void OnCertifTxNextPacketTimerEvent( void* context );
static bool certif_tx( void );

/* Exported functions definition---------------------------------------------------------*/
bool certif_running(void)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	af00      	add	r7, sp, #0
    return certifParam.Running;
 8007cbc:	4b02      	ldr	r3, [pc, #8]	; (8007cc8 <certif_running+0x10>)
 8007cbe:	781b      	ldrb	r3, [r3, #0]
}
 8007cc0:	0018      	movs	r0, r3
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bd80      	pop	{r7, pc}
 8007cc6:	46c0      	nop			; (mov r8, r8)
 8007cc8:	200002c0 	.word	0x200002c0

08007ccc <certif_DownLinkIncrement>:

void certif_DownLinkIncrement( void )
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	af00      	add	r7, sp, #0
    certifParam.DownLinkCounter++;
 8007cd0:	4b05      	ldr	r3, [pc, #20]	; (8007ce8 <certif_DownLinkIncrement+0x1c>)
 8007cd2:	2244      	movs	r2, #68	; 0x44
 8007cd4:	5a9b      	ldrh	r3, [r3, r2]
 8007cd6:	3301      	adds	r3, #1
 8007cd8:	b299      	uxth	r1, r3
 8007cda:	4b03      	ldr	r3, [pc, #12]	; (8007ce8 <certif_DownLinkIncrement+0x1c>)
 8007cdc:	2244      	movs	r2, #68	; 0x44
 8007cde:	5299      	strh	r1, [r3, r2]
}
 8007ce0:	46c0      	nop			; (mov r8, r8)
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd80      	pop	{r7, pc}
 8007ce6:	46c0      	nop			; (mov r8, r8)
 8007ce8:	200002c0 	.word	0x200002c0

08007cec <certif_linkCheck>:

void certif_linkCheck(MlmeConfirm_t *mlmeConfirm)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b082      	sub	sp, #8
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
  certifParam.LinkCheck = true;
 8007cf4:	4b08      	ldr	r3, [pc, #32]	; (8007d18 <certif_linkCheck+0x2c>)
 8007cf6:	2246      	movs	r2, #70	; 0x46
 8007cf8:	2101      	movs	r1, #1
 8007cfa:	5499      	strb	r1, [r3, r2]
  certifParam.DemodMargin = mlmeConfirm->DemodMargin;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	7a19      	ldrb	r1, [r3, #8]
 8007d00:	4b05      	ldr	r3, [pc, #20]	; (8007d18 <certif_linkCheck+0x2c>)
 8007d02:	2247      	movs	r2, #71	; 0x47
 8007d04:	5499      	strb	r1, [r3, r2]
  certifParam.NbGateways = mlmeConfirm->NbGateways;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	7a59      	ldrb	r1, [r3, #9]
 8007d0a:	4b03      	ldr	r3, [pc, #12]	; (8007d18 <certif_linkCheck+0x2c>)
 8007d0c:	2248      	movs	r2, #72	; 0x48
 8007d0e:	5499      	strb	r1, [r3, r2]
}
 8007d10:	46c0      	nop			; (mov r8, r8)
 8007d12:	46bd      	mov	sp, r7
 8007d14:	b002      	add	sp, #8
 8007d16:	bd80      	pop	{r7, pc}
 8007d18:	200002c0 	.word	0x200002c0

08007d1c <certif_tx>:

static bool certif_tx( void )
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b086      	sub	sp, #24
 8007d20:	af00      	add	r7, sp, #0
  McpsReq_t mcpsReq;
  LoRaMacTxInfo_t txInfo;
  
  if( certifParam.LinkCheck == true )
 8007d22:	4b47      	ldr	r3, [pc, #284]	; (8007e40 <certif_tx+0x124>)
 8007d24:	2246      	movs	r2, #70	; 0x46
 8007d26:	5c9b      	ldrb	r3, [r3, r2]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d017      	beq.n	8007d5c <certif_tx+0x40>
  {
    certifParam.LinkCheck = false;
 8007d2c:	4b44      	ldr	r3, [pc, #272]	; (8007e40 <certif_tx+0x124>)
 8007d2e:	2246      	movs	r2, #70	; 0x46
 8007d30:	2100      	movs	r1, #0
 8007d32:	5499      	strb	r1, [r3, r2]
    certifParam.DataBufferSize = 3;
 8007d34:	4b42      	ldr	r3, [pc, #264]	; (8007e40 <certif_tx+0x124>)
 8007d36:	2203      	movs	r2, #3
 8007d38:	70da      	strb	r2, [r3, #3]
    certifParam.DataBuffer[0] = 5;
 8007d3a:	4b41      	ldr	r3, [pc, #260]	; (8007e40 <certif_tx+0x124>)
 8007d3c:	2205      	movs	r2, #5
 8007d3e:	711a      	strb	r2, [r3, #4]
    certifParam.DataBuffer[1] = certifParam.DemodMargin;
 8007d40:	4b3f      	ldr	r3, [pc, #252]	; (8007e40 <certif_tx+0x124>)
 8007d42:	2247      	movs	r2, #71	; 0x47
 8007d44:	5c9a      	ldrb	r2, [r3, r2]
 8007d46:	4b3e      	ldr	r3, [pc, #248]	; (8007e40 <certif_tx+0x124>)
 8007d48:	715a      	strb	r2, [r3, #5]
    certifParam.DataBuffer[2] = certifParam.NbGateways;
 8007d4a:	4b3d      	ldr	r3, [pc, #244]	; (8007e40 <certif_tx+0x124>)
 8007d4c:	2248      	movs	r2, #72	; 0x48
 8007d4e:	5c9a      	ldrb	r2, [r3, r2]
 8007d50:	4b3b      	ldr	r3, [pc, #236]	; (8007e40 <certif_tx+0x124>)
 8007d52:	719a      	strb	r2, [r3, #6]
    certifParam.State = 1;
 8007d54:	4b3a      	ldr	r3, [pc, #232]	; (8007e40 <certif_tx+0x124>)
 8007d56:	2201      	movs	r2, #1
 8007d58:	705a      	strb	r2, [r3, #1]
 8007d5a:	e01b      	b.n	8007d94 <certif_tx+0x78>
  }
  else
  {
    switch( certifParam.State )
 8007d5c:	4b38      	ldr	r3, [pc, #224]	; (8007e40 <certif_tx+0x124>)
 8007d5e:	785b      	ldrb	r3, [r3, #1]
 8007d60:	2b01      	cmp	r3, #1
 8007d62:	d005      	beq.n	8007d70 <certif_tx+0x54>
 8007d64:	2b04      	cmp	r3, #4
 8007d66:	d115      	bne.n	8007d94 <certif_tx+0x78>
    {
    case 4:
      certifParam.State = 1;
 8007d68:	4b35      	ldr	r3, [pc, #212]	; (8007e40 <certif_tx+0x124>)
 8007d6a:	2201      	movs	r2, #1
 8007d6c:	705a      	strb	r2, [r3, #1]
      break;
 8007d6e:	e011      	b.n	8007d94 <certif_tx+0x78>
    case 1:
      certifParam.DataBufferSize = 2;
 8007d70:	4b33      	ldr	r3, [pc, #204]	; (8007e40 <certif_tx+0x124>)
 8007d72:	2202      	movs	r2, #2
 8007d74:	70da      	strb	r2, [r3, #3]
      certifParam.DataBuffer[0] = certifParam.DownLinkCounter >> 8;
 8007d76:	4b32      	ldr	r3, [pc, #200]	; (8007e40 <certif_tx+0x124>)
 8007d78:	2244      	movs	r2, #68	; 0x44
 8007d7a:	5a9b      	ldrh	r3, [r3, r2]
 8007d7c:	0a1b      	lsrs	r3, r3, #8
 8007d7e:	b29b      	uxth	r3, r3
 8007d80:	b2da      	uxtb	r2, r3
 8007d82:	4b2f      	ldr	r3, [pc, #188]	; (8007e40 <certif_tx+0x124>)
 8007d84:	711a      	strb	r2, [r3, #4]
      certifParam.DataBuffer[1] = certifParam.DownLinkCounter;
 8007d86:	4b2e      	ldr	r3, [pc, #184]	; (8007e40 <certif_tx+0x124>)
 8007d88:	2244      	movs	r2, #68	; 0x44
 8007d8a:	5a9b      	ldrh	r3, [r3, r2]
 8007d8c:	b2da      	uxtb	r2, r3
 8007d8e:	4b2c      	ldr	r3, [pc, #176]	; (8007e40 <certif_tx+0x124>)
 8007d90:	715a      	strb	r2, [r3, #5]
      break;
 8007d92:	46c0      	nop			; (mov r8, r8)
    }
  }
    
  if( LoRaMacQueryTxPossible( certifParam.DataBufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 8007d94:	4b2a      	ldr	r3, [pc, #168]	; (8007e40 <certif_tx+0x124>)
 8007d96:	78db      	ldrb	r3, [r3, #3]
 8007d98:	1d3a      	adds	r2, r7, #4
 8007d9a:	0011      	movs	r1, r2
 8007d9c:	0018      	movs	r0, r3
 8007d9e:	f006 fdcd 	bl	800e93c <LoRaMacQueryTxPossible>
 8007da2:	1e03      	subs	r3, r0, #0
 8007da4:	d00d      	beq.n	8007dc2 <certif_tx+0xa6>
  {
      // Send empty frame in order to flush MAC commands
      mcpsReq.Type = MCPS_UNCONFIRMED;
 8007da6:	2108      	movs	r1, #8
 8007da8:	187b      	adds	r3, r7, r1
 8007daa:	2200      	movs	r2, #0
 8007dac:	701a      	strb	r2, [r3, #0]
      mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 8007dae:	187b      	adds	r3, r7, r1
 8007db0:	2200      	movs	r2, #0
 8007db2:	609a      	str	r2, [r3, #8]
      mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 8007db4:	187b      	adds	r3, r7, r1
 8007db6:	2200      	movs	r2, #0
 8007db8:	819a      	strh	r2, [r3, #12]
      mcpsReq.Req.Unconfirmed.Datarate = DR_0;
 8007dba:	187b      	adds	r3, r7, r1
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	739a      	strb	r2, [r3, #14]
 8007dc0:	e02b      	b.n	8007e1a <certif_tx+0xfe>
  }
  else
  {
      if( IsTxConfirmed == LORAWAN_UNCONFIRMED_MSG )
 8007dc2:	4b20      	ldr	r3, [pc, #128]	; (8007e44 <certif_tx+0x128>)
 8007dc4:	781b      	ldrb	r3, [r3, #0]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d112      	bne.n	8007df0 <certif_tx+0xd4>
      {
          mcpsReq.Type = MCPS_UNCONFIRMED;
 8007dca:	2108      	movs	r1, #8
 8007dcc:	187b      	adds	r3, r7, r1
 8007dce:	2200      	movs	r2, #0
 8007dd0:	701a      	strb	r2, [r3, #0]
          mcpsReq.Req.Unconfirmed.fPort = CERTIF_PORT;
 8007dd2:	187b      	adds	r3, r7, r1
 8007dd4:	22e0      	movs	r2, #224	; 0xe0
 8007dd6:	711a      	strb	r2, [r3, #4]
          mcpsReq.Req.Unconfirmed.fBufferSize = certifParam.DataBufferSize;
 8007dd8:	4b19      	ldr	r3, [pc, #100]	; (8007e40 <certif_tx+0x124>)
 8007dda:	78db      	ldrb	r3, [r3, #3]
 8007ddc:	b29a      	uxth	r2, r3
 8007dde:	187b      	adds	r3, r7, r1
 8007de0:	819a      	strh	r2, [r3, #12]
          mcpsReq.Req.Unconfirmed.fBuffer = &(certifParam.DataBuffer);
 8007de2:	187b      	adds	r3, r7, r1
 8007de4:	4a18      	ldr	r2, [pc, #96]	; (8007e48 <certif_tx+0x12c>)
 8007de6:	609a      	str	r2, [r3, #8]
          mcpsReq.Req.Unconfirmed.Datarate = DR_0;
 8007de8:	187b      	adds	r3, r7, r1
 8007dea:	2200      	movs	r2, #0
 8007dec:	739a      	strb	r2, [r3, #14]
 8007dee:	e014      	b.n	8007e1a <certif_tx+0xfe>
      }
      else
      {
          mcpsReq.Type = MCPS_CONFIRMED;
 8007df0:	2108      	movs	r1, #8
 8007df2:	187b      	adds	r3, r7, r1
 8007df4:	2201      	movs	r2, #1
 8007df6:	701a      	strb	r2, [r3, #0]
          mcpsReq.Req.Confirmed.fPort = CERTIF_PORT;
 8007df8:	187b      	adds	r3, r7, r1
 8007dfa:	22e0      	movs	r2, #224	; 0xe0
 8007dfc:	711a      	strb	r2, [r3, #4]
          mcpsReq.Req.Confirmed.fBufferSize = certifParam.DataBufferSize;
 8007dfe:	4b10      	ldr	r3, [pc, #64]	; (8007e40 <certif_tx+0x124>)
 8007e00:	78db      	ldrb	r3, [r3, #3]
 8007e02:	b29a      	uxth	r2, r3
 8007e04:	187b      	adds	r3, r7, r1
 8007e06:	819a      	strh	r2, [r3, #12]
          mcpsReq.Req.Confirmed.fBuffer = &(certifParam.DataBuffer);
 8007e08:	187b      	adds	r3, r7, r1
 8007e0a:	4a0f      	ldr	r2, [pc, #60]	; (8007e48 <certif_tx+0x12c>)
 8007e0c:	609a      	str	r2, [r3, #8]
          mcpsReq.Req.Confirmed.NbTrials = 8;
 8007e0e:	187b      	adds	r3, r7, r1
 8007e10:	2208      	movs	r2, #8
 8007e12:	73da      	strb	r2, [r3, #15]
          mcpsReq.Req.Confirmed.Datarate = DR_0;
 8007e14:	187b      	adds	r3, r7, r1
 8007e16:	2200      	movs	r2, #0
 8007e18:	739a      	strb	r2, [r3, #14]
      }
  }

  /*cerification test on-going*/
  TimerStart( &CertifTxNextPacketTimer );
 8007e1a:	4b0c      	ldr	r3, [pc, #48]	; (8007e4c <certif_tx+0x130>)
 8007e1c:	0018      	movs	r0, r3
 8007e1e:	f00d fd01 	bl	8015824 <TimerStart>
	
  if( LoRaMacMcpsRequest( &mcpsReq ) == LORAMAC_STATUS_OK )
 8007e22:	2308      	movs	r3, #8
 8007e24:	18fb      	adds	r3, r7, r3
 8007e26:	0018      	movs	r0, r3
 8007e28:	f007 fdb8 	bl	800f99c <LoRaMacMcpsRequest>
 8007e2c:	1e03      	subs	r3, r0, #0
 8007e2e:	d101      	bne.n	8007e34 <certif_tx+0x118>
  {
      return false;
 8007e30:	2300      	movs	r3, #0
 8007e32:	e000      	b.n	8007e36 <certif_tx+0x11a>
  }
    return true;
 8007e34:	2301      	movs	r3, #1
}
 8007e36:	0018      	movs	r0, r3
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	b006      	add	sp, #24
 8007e3c:	bd80      	pop	{r7, pc}
 8007e3e:	46c0      	nop			; (mov r8, r8)
 8007e40:	200002c0 	.word	0x200002c0
 8007e44:	2000030a 	.word	0x2000030a
 8007e48:	200002c4 	.word	0x200002c4
 8007e4c:	200002a8 	.word	0x200002a8

08007e50 <certif_rx>:

void certif_rx( McpsIndication_t *mcpsIndication, MlmeReqJoin_t* JoinParameters)
{
 8007e50:	b5b0      	push	{r4, r5, r7, lr}
 8007e52:	b0a6      	sub	sp, #152	; 0x98
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
 8007e58:	6039      	str	r1, [r7, #0]
  if( certifParam.Running == false )
 8007e5a:	4bb0      	ldr	r3, [pc, #704]	; (800811c <certif_rx+0x2cc>)
 8007e5c:	781b      	ldrb	r3, [r3, #0]
 8007e5e:	2201      	movs	r2, #1
 8007e60:	4053      	eors	r3, r2
 8007e62:	b2db      	uxtb	r3, r3
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d065      	beq.n	8007f34 <certif_rx+0xe4>
  {
      // Check compliance test enable command (i)
      if( ( mcpsIndication->BufferSize == 4 ) &&
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	7b1b      	ldrb	r3, [r3, #12]
 8007e6c:	2b04      	cmp	r3, #4
 8007e6e:	d000      	beq.n	8007e72 <certif_rx+0x22>
 8007e70:	e145      	b.n	80080fe <certif_rx+0x2ae>
          ( mcpsIndication->Buffer[0] == 0x01 ) &&
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	689b      	ldr	r3, [r3, #8]
 8007e76:	781b      	ldrb	r3, [r3, #0]
      if( ( mcpsIndication->BufferSize == 4 ) &&
 8007e78:	2b01      	cmp	r3, #1
 8007e7a:	d000      	beq.n	8007e7e <certif_rx+0x2e>
 8007e7c:	e13f      	b.n	80080fe <certif_rx+0x2ae>
          ( mcpsIndication->Buffer[1] == 0x01 ) &&
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	689b      	ldr	r3, [r3, #8]
 8007e82:	3301      	adds	r3, #1
 8007e84:	781b      	ldrb	r3, [r3, #0]
          ( mcpsIndication->Buffer[0] == 0x01 ) &&
 8007e86:	2b01      	cmp	r3, #1
 8007e88:	d000      	beq.n	8007e8c <certif_rx+0x3c>
 8007e8a:	e138      	b.n	80080fe <certif_rx+0x2ae>
          ( mcpsIndication->Buffer[2] == 0x01 ) &&
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	689b      	ldr	r3, [r3, #8]
 8007e90:	3302      	adds	r3, #2
 8007e92:	781b      	ldrb	r3, [r3, #0]
          ( mcpsIndication->Buffer[1] == 0x01 ) &&
 8007e94:	2b01      	cmp	r3, #1
 8007e96:	d000      	beq.n	8007e9a <certif_rx+0x4a>
 8007e98:	e131      	b.n	80080fe <certif_rx+0x2ae>
          ( mcpsIndication->Buffer[3] == 0x01 ) )
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	689b      	ldr	r3, [r3, #8]
 8007e9e:	3303      	adds	r3, #3
 8007ea0:	781b      	ldrb	r3, [r3, #0]
          ( mcpsIndication->Buffer[2] == 0x01 ) &&
 8007ea2:	2b01      	cmp	r3, #1
 8007ea4:	d000      	beq.n	8007ea8 <certif_rx+0x58>
 8007ea6:	e12a      	b.n	80080fe <certif_rx+0x2ae>
      {
          MibRequestConfirm_t mibReq;
          IsTxConfirmed = LORAWAN_UNCONFIRMED_MSG;
 8007ea8:	4b9d      	ldr	r3, [pc, #628]	; (8008120 <certif_rx+0x2d0>)
 8007eaa:	2200      	movs	r2, #0
 8007eac:	701a      	strb	r2, [r3, #0]
          certifParam.DataBufferSize = 2;
 8007eae:	4b9b      	ldr	r3, [pc, #620]	; (800811c <certif_rx+0x2cc>)
 8007eb0:	2202      	movs	r2, #2
 8007eb2:	70da      	strb	r2, [r3, #3]
          certifParam.DownLinkCounter = 0;
 8007eb4:	4b99      	ldr	r3, [pc, #612]	; (800811c <certif_rx+0x2cc>)
 8007eb6:	2244      	movs	r2, #68	; 0x44
 8007eb8:	2100      	movs	r1, #0
 8007eba:	5299      	strh	r1, [r3, r2]
          certifParam.LinkCheck = false;
 8007ebc:	4b97      	ldr	r3, [pc, #604]	; (800811c <certif_rx+0x2cc>)
 8007ebe:	2246      	movs	r2, #70	; 0x46
 8007ec0:	2100      	movs	r1, #0
 8007ec2:	5499      	strb	r1, [r3, r2]
          certifParam.DemodMargin = 0;
 8007ec4:	4b95      	ldr	r3, [pc, #596]	; (800811c <certif_rx+0x2cc>)
 8007ec6:	2247      	movs	r2, #71	; 0x47
 8007ec8:	2100      	movs	r1, #0
 8007eca:	5499      	strb	r1, [r3, r2]
          certifParam.NbGateways = 0;
 8007ecc:	4b93      	ldr	r3, [pc, #588]	; (800811c <certif_rx+0x2cc>)
 8007ece:	2248      	movs	r2, #72	; 0x48
 8007ed0:	2100      	movs	r1, #0
 8007ed2:	5499      	strb	r1, [r3, r2]
          certifParam.Running = true;
 8007ed4:	4b91      	ldr	r3, [pc, #580]	; (800811c <certif_rx+0x2cc>)
 8007ed6:	2201      	movs	r2, #1
 8007ed8:	701a      	strb	r2, [r3, #0]
          certifParam.State = 1;
 8007eda:	4b90      	ldr	r3, [pc, #576]	; (800811c <certif_rx+0x2cc>)
 8007edc:	2201      	movs	r2, #1
 8007ede:	705a      	strb	r2, [r3, #1]

          mibReq.Type = MIB_ADR;
 8007ee0:	217c      	movs	r1, #124	; 0x7c
 8007ee2:	187b      	adds	r3, r7, r1
 8007ee4:	2202      	movs	r2, #2
 8007ee6:	701a      	strb	r2, [r3, #0]

          LoRaMacMibGetRequestConfirm( &mibReq );
 8007ee8:	000c      	movs	r4, r1
 8007eea:	187b      	adds	r3, r7, r1
 8007eec:	0018      	movs	r0, r3
 8007eee:	f006 fddf 	bl	800eab0 <LoRaMacMibGetRequestConfirm>
          AdrEnableInit=mibReq.Param.AdrEnable;
 8007ef2:	0021      	movs	r1, r4
 8007ef4:	187b      	adds	r3, r7, r1
 8007ef6:	791a      	ldrb	r2, [r3, #4]
 8007ef8:	4b8a      	ldr	r3, [pc, #552]	; (8008124 <certif_rx+0x2d4>)
 8007efa:	701a      	strb	r2, [r3, #0]
          
          mibReq.Type = MIB_ADR;
 8007efc:	187b      	adds	r3, r7, r1
 8007efe:	2202      	movs	r2, #2
 8007f00:	701a      	strb	r2, [r3, #0]
          mibReq.Param.AdrEnable = true;
 8007f02:	187b      	adds	r3, r7, r1
 8007f04:	2201      	movs	r2, #1
 8007f06:	711a      	strb	r2, [r3, #4]
          LoRaMacMibSetRequestConfirm( &mibReq );
 8007f08:	187b      	adds	r3, r7, r1
 8007f0a:	0018      	movs	r0, r3
 8007f0c:	f006 ff1c 	bl	800ed48 <LoRaMacMibSetRequestConfirm>

  #if defined( REGION_EU868 )
          LoRaMacTestSetDutyCycleOn( false );
 8007f10:	2000      	movs	r0, #0
 8007f12:	f007 fe93 	bl	800fc3c <LoRaMacTestSetDutyCycleOn>
  #endif

         
        TimerInit( &CertifTxNextPacketTimer, OnCertifTxNextPacketTimerEvent );
 8007f16:	4a84      	ldr	r2, [pc, #528]	; (8008128 <certif_rx+0x2d8>)
 8007f18:	4b84      	ldr	r3, [pc, #528]	; (800812c <certif_rx+0x2dc>)
 8007f1a:	0011      	movs	r1, r2
 8007f1c:	0018      	movs	r0, r3
 8007f1e:	f00d fc37 	bl	8015790 <TimerInit>
        TimerSetValue( &CertifTxNextPacketTimer,  TEST_TX_DUTYCYCLE); 
 8007f22:	4a83      	ldr	r2, [pc, #524]	; (8008130 <certif_rx+0x2e0>)
 8007f24:	4b81      	ldr	r3, [pc, #516]	; (800812c <certif_rx+0x2dc>)
 8007f26:	0011      	movs	r1, r2
 8007f28:	0018      	movs	r0, r3
 8007f2a:	f00d fc4f 	bl	80157cc <TimerSetValue>
        
        /*confirm test mode activation */
        certif_tx( );
 8007f2e:	f7ff fef5 	bl	8007d1c <certif_tx>
 8007f32:	e0e4      	b.n	80080fe <certif_rx+0x2ae>
      }
  }

  else
  {
      certifParam.State = mcpsIndication->Buffer[0];
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	689b      	ldr	r3, [r3, #8]
 8007f38:	781a      	ldrb	r2, [r3, #0]
 8007f3a:	4b78      	ldr	r3, [pc, #480]	; (800811c <certif_rx+0x2cc>)
 8007f3c:	705a      	strb	r2, [r3, #1]
      switch( certifParam.State )
 8007f3e:	4b77      	ldr	r3, [pc, #476]	; (800811c <certif_rx+0x2cc>)
 8007f40:	785b      	ldrb	r3, [r3, #1]
 8007f42:	2b07      	cmp	r3, #7
 8007f44:	d900      	bls.n	8007f48 <certif_rx+0xf8>
 8007f46:	e0d9      	b.n	80080fc <certif_rx+0x2ac>
 8007f48:	009a      	lsls	r2, r3, #2
 8007f4a:	4b7a      	ldr	r3, [pc, #488]	; (8008134 <certif_rx+0x2e4>)
 8007f4c:	18d3      	adds	r3, r2, r3
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	469f      	mov	pc, r3
      {
        case 0: // Check compliance test disable command (ii)
        {
          
          certifParam.DownLinkCounter = 0;
 8007f52:	4b72      	ldr	r3, [pc, #456]	; (800811c <certif_rx+0x2cc>)
 8007f54:	2244      	movs	r2, #68	; 0x44
 8007f56:	2100      	movs	r1, #0
 8007f58:	5299      	strh	r1, [r3, r2]
          certifParam.Running = false;
 8007f5a:	4b70      	ldr	r3, [pc, #448]	; (800811c <certif_rx+0x2cc>)
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	701a      	strb	r2, [r3, #0]
          
          MibRequestConfirm_t mibReq;
          mibReq.Type = MIB_ADR;
 8007f60:	2164      	movs	r1, #100	; 0x64
 8007f62:	187b      	adds	r3, r7, r1
 8007f64:	2202      	movs	r2, #2
 8007f66:	701a      	strb	r2, [r3, #0]
          mibReq.Param.AdrEnable = AdrEnableInit;
 8007f68:	4b6e      	ldr	r3, [pc, #440]	; (8008124 <certif_rx+0x2d4>)
 8007f6a:	781a      	ldrb	r2, [r3, #0]
 8007f6c:	187b      	adds	r3, r7, r1
 8007f6e:	711a      	strb	r2, [r3, #4]
          LoRaMacMibSetRequestConfirm( &mibReq );
 8007f70:	187b      	adds	r3, r7, r1
 8007f72:	0018      	movs	r0, r3
 8007f74:	f006 fee8 	bl	800ed48 <LoRaMacMibSetRequestConfirm>
  #if defined( REGION_EU868 )
          LoRaMacTestSetDutyCycleOn( true );
 8007f78:	2001      	movs	r0, #1
 8007f7a:	f007 fe5f 	bl	800fc3c <LoRaMacTestSetDutyCycleOn>
  #endif
          
          break;
 8007f7e:	46c0      	nop			; (mov r8, r8)
 8007f80:	e0bd      	b.n	80080fe <certif_rx+0x2ae>
        }
        case 1: // (iii, iv)
          certifParam.DataBufferSize = 2;
 8007f82:	4b66      	ldr	r3, [pc, #408]	; (800811c <certif_rx+0x2cc>)
 8007f84:	2202      	movs	r2, #2
 8007f86:	70da      	strb	r2, [r3, #3]
          break;
 8007f88:	e0b9      	b.n	80080fe <certif_rx+0x2ae>
        case 2: // Enable confirmed messages (v)
          IsTxConfirmed = LORAWAN_CONFIRMED_MSG;
 8007f8a:	4b65      	ldr	r3, [pc, #404]	; (8008120 <certif_rx+0x2d0>)
 8007f8c:	2201      	movs	r2, #1
 8007f8e:	701a      	strb	r2, [r3, #0]
          certifParam.State = 1;
 8007f90:	4b62      	ldr	r3, [pc, #392]	; (800811c <certif_rx+0x2cc>)
 8007f92:	2201      	movs	r2, #1
 8007f94:	705a      	strb	r2, [r3, #1]
          break;
 8007f96:	e0b2      	b.n	80080fe <certif_rx+0x2ae>
        case 3:  // Disable confirmed messages (vi)
          IsTxConfirmed = LORAWAN_UNCONFIRMED_MSG;
 8007f98:	4b61      	ldr	r3, [pc, #388]	; (8008120 <certif_rx+0x2d0>)
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	701a      	strb	r2, [r3, #0]
          certifParam.State = 1;
 8007f9e:	4b5f      	ldr	r3, [pc, #380]	; (800811c <certif_rx+0x2cc>)
 8007fa0:	2201      	movs	r2, #1
 8007fa2:	705a      	strb	r2, [r3, #1]
          break;
 8007fa4:	e0ab      	b.n	80080fe <certif_rx+0x2ae>
        case 4: // (vii)
          certifParam.DataBufferSize = mcpsIndication->BufferSize;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	7b1a      	ldrb	r2, [r3, #12]
 8007faa:	4b5c      	ldr	r3, [pc, #368]	; (800811c <certif_rx+0x2cc>)
 8007fac:	70da      	strb	r2, [r3, #3]

          certifParam.DataBuffer[0] = 4;
 8007fae:	4b5b      	ldr	r3, [pc, #364]	; (800811c <certif_rx+0x2cc>)
 8007fb0:	2204      	movs	r2, #4
 8007fb2:	711a      	strb	r2, [r3, #4]
          for( uint8_t i = 1; i < certifParam.DataBufferSize; i++ )
 8007fb4:	2397      	movs	r3, #151	; 0x97
 8007fb6:	18fb      	adds	r3, r7, r3
 8007fb8:	2201      	movs	r2, #1
 8007fba:	701a      	strb	r2, [r3, #0]
 8007fbc:	e013      	b.n	8007fe6 <certif_rx+0x196>
          {
              certifParam.DataBuffer[i] = mcpsIndication->Buffer[i] + 1;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	689a      	ldr	r2, [r3, #8]
 8007fc2:	2097      	movs	r0, #151	; 0x97
 8007fc4:	183b      	adds	r3, r7, r0
 8007fc6:	781b      	ldrb	r3, [r3, #0]
 8007fc8:	18d3      	adds	r3, r2, r3
 8007fca:	781a      	ldrb	r2, [r3, #0]
 8007fcc:	183b      	adds	r3, r7, r0
 8007fce:	781b      	ldrb	r3, [r3, #0]
 8007fd0:	3201      	adds	r2, #1
 8007fd2:	b2d1      	uxtb	r1, r2
 8007fd4:	4a51      	ldr	r2, [pc, #324]	; (800811c <certif_rx+0x2cc>)
 8007fd6:	18d3      	adds	r3, r2, r3
 8007fd8:	1c0a      	adds	r2, r1, #0
 8007fda:	711a      	strb	r2, [r3, #4]
          for( uint8_t i = 1; i < certifParam.DataBufferSize; i++ )
 8007fdc:	183b      	adds	r3, r7, r0
 8007fde:	781a      	ldrb	r2, [r3, #0]
 8007fe0:	183b      	adds	r3, r7, r0
 8007fe2:	3201      	adds	r2, #1
 8007fe4:	701a      	strb	r2, [r3, #0]
 8007fe6:	4b4d      	ldr	r3, [pc, #308]	; (800811c <certif_rx+0x2cc>)
 8007fe8:	78db      	ldrb	r3, [r3, #3]
 8007fea:	2297      	movs	r2, #151	; 0x97
 8007fec:	18ba      	adds	r2, r7, r2
 8007fee:	7812      	ldrb	r2, [r2, #0]
 8007ff0:	429a      	cmp	r2, r3
 8007ff2:	d3e4      	bcc.n	8007fbe <certif_rx+0x16e>
          }
          break;
 8007ff4:	e083      	b.n	80080fe <certif_rx+0x2ae>
        case 5: // (viii)
        {
          MlmeReq_t mlmeReq;
          mlmeReq.Type = MLME_LINK_CHECK;
 8007ff6:	2154      	movs	r1, #84	; 0x54
 8007ff8:	187b      	adds	r3, r7, r1
 8007ffa:	2203      	movs	r2, #3
 8007ffc:	701a      	strb	r2, [r3, #0]
          LoRaMacMlmeRequest( &mlmeReq );
 8007ffe:	187b      	adds	r3, r7, r1
 8008000:	0018      	movs	r0, r3
 8008002:	f007 fb59 	bl	800f6b8 <LoRaMacMlmeRequest>
          break;
 8008006:	46c0      	nop			; (mov r8, r8)
 8008008:	e079      	b.n	80080fe <certif_rx+0x2ae>
        {
            MlmeReq_t mlmeReq;

            // Disable TestMode and revert back to normal operation

            certifParam.DownLinkCounter = 0;
 800800a:	4b44      	ldr	r3, [pc, #272]	; (800811c <certif_rx+0x2cc>)
 800800c:	2244      	movs	r2, #68	; 0x44
 800800e:	2100      	movs	r1, #0
 8008010:	5299      	strh	r1, [r3, r2]
            certifParam.Running = false;
 8008012:	4b42      	ldr	r3, [pc, #264]	; (800811c <certif_rx+0x2cc>)
 8008014:	2200      	movs	r2, #0
 8008016:	701a      	strb	r2, [r3, #0]

            MibRequestConfirm_t mibReq;
            mibReq.Type = MIB_ADR;
 8008018:	212c      	movs	r1, #44	; 0x2c
 800801a:	187b      	adds	r3, r7, r1
 800801c:	2202      	movs	r2, #2
 800801e:	701a      	strb	r2, [r3, #0]
            mibReq.Param.AdrEnable = AdrEnableInit;
 8008020:	4b40      	ldr	r3, [pc, #256]	; (8008124 <certif_rx+0x2d4>)
 8008022:	781a      	ldrb	r2, [r3, #0]
 8008024:	187b      	adds	r3, r7, r1
 8008026:	711a      	strb	r2, [r3, #4]
            LoRaMacMibSetRequestConfirm( &mibReq );
 8008028:	187b      	adds	r3, r7, r1
 800802a:	0018      	movs	r0, r3
 800802c:	f006 fe8c 	bl	800ed48 <LoRaMacMibSetRequestConfirm>

            mlmeReq.Type = MLME_JOIN;
 8008030:	2144      	movs	r1, #68	; 0x44
 8008032:	187b      	adds	r3, r7, r1
 8008034:	2200      	movs	r2, #0
 8008036:	701a      	strb	r2, [r3, #0]
            mlmeReq.Req.Join = *JoinParameters;
 8008038:	187b      	adds	r3, r7, r1
 800803a:	683a      	ldr	r2, [r7, #0]
 800803c:	3304      	adds	r3, #4
 800803e:	ca31      	ldmia	r2!, {r0, r4, r5}
 8008040:	c331      	stmia	r3!, {r0, r4, r5}

            LoRaMacMlmeRequest( &mlmeReq );
 8008042:	187b      	adds	r3, r7, r1
 8008044:	0018      	movs	r0, r3
 8008046:	f007 fb37 	bl	800f6b8 <LoRaMacMlmeRequest>
            break;
 800804a:	46c0      	nop			; (mov r8, r8)
 800804c:	e057      	b.n	80080fe <certif_rx+0x2ae>
        }

        case 7: // (x)
        {
          if( mcpsIndication->BufferSize == 3 )
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	7b1b      	ldrb	r3, [r3, #12]
 8008052:	2b03      	cmp	r3, #3
 8008054:	d118      	bne.n	8008088 <certif_rx+0x238>
          {
              MlmeReq_t mlmeReq;
              mlmeReq.Type = MLME_TXCW;
 8008056:	211c      	movs	r1, #28
 8008058:	187b      	adds	r3, r7, r1
 800805a:	2204      	movs	r2, #4
 800805c:	701a      	strb	r2, [r3, #0]
              mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	689b      	ldr	r3, [r3, #8]
 8008062:	3301      	adds	r3, #1
 8008064:	781b      	ldrb	r3, [r3, #0]
 8008066:	021b      	lsls	r3, r3, #8
 8008068:	b21a      	sxth	r2, r3
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	689b      	ldr	r3, [r3, #8]
 800806e:	3302      	adds	r3, #2
 8008070:	781b      	ldrb	r3, [r3, #0]
 8008072:	b21b      	sxth	r3, r3
 8008074:	4313      	orrs	r3, r2
 8008076:	b21b      	sxth	r3, r3
 8008078:	b29a      	uxth	r2, r3
 800807a:	187b      	adds	r3, r7, r1
 800807c:	809a      	strh	r2, [r3, #4]
              LoRaMacMlmeRequest( &mlmeReq );
 800807e:	187b      	adds	r3, r7, r1
 8008080:	0018      	movs	r0, r3
 8008082:	f007 fb19 	bl	800f6b8 <LoRaMacMlmeRequest>
 8008086:	e035      	b.n	80080f4 <certif_rx+0x2a4>
          }
          else if( mcpsIndication->BufferSize == 7 )
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	7b1b      	ldrb	r3, [r3, #12]
 800808c:	2b07      	cmp	r3, #7
 800808e:	d131      	bne.n	80080f4 <certif_rx+0x2a4>
          {
              MlmeReq_t mlmeReq;
              mlmeReq.Type = MLME_TXCW_1;
 8008090:	210c      	movs	r1, #12
 8008092:	187b      	adds	r3, r7, r1
 8008094:	2205      	movs	r2, #5
 8008096:	701a      	strb	r2, [r3, #0]
              mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	689b      	ldr	r3, [r3, #8]
 800809c:	3301      	adds	r3, #1
 800809e:	781b      	ldrb	r3, [r3, #0]
 80080a0:	021b      	lsls	r3, r3, #8
 80080a2:	b21a      	sxth	r2, r3
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	689b      	ldr	r3, [r3, #8]
 80080a8:	3302      	adds	r3, #2
 80080aa:	781b      	ldrb	r3, [r3, #0]
 80080ac:	b21b      	sxth	r3, r3
 80080ae:	4313      	orrs	r3, r2
 80080b0:	b21b      	sxth	r3, r3
 80080b2:	b29a      	uxth	r2, r3
 80080b4:	187b      	adds	r3, r7, r1
 80080b6:	809a      	strh	r2, [r3, #4]
              mlmeReq.Req.TxCw.Frequency = ( uint32_t )( ( mcpsIndication->Buffer[3] << 16 ) | ( mcpsIndication->Buffer[4] << 8 ) | mcpsIndication->Buffer[5] ) * 100;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	689b      	ldr	r3, [r3, #8]
 80080bc:	3303      	adds	r3, #3
 80080be:	781b      	ldrb	r3, [r3, #0]
 80080c0:	041a      	lsls	r2, r3, #16
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	689b      	ldr	r3, [r3, #8]
 80080c6:	3304      	adds	r3, #4
 80080c8:	781b      	ldrb	r3, [r3, #0]
 80080ca:	021b      	lsls	r3, r3, #8
 80080cc:	431a      	orrs	r2, r3
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	689b      	ldr	r3, [r3, #8]
 80080d2:	3305      	adds	r3, #5
 80080d4:	781b      	ldrb	r3, [r3, #0]
 80080d6:	4313      	orrs	r3, r2
 80080d8:	001a      	movs	r2, r3
 80080da:	2364      	movs	r3, #100	; 0x64
 80080dc:	435a      	muls	r2, r3
 80080de:	187b      	adds	r3, r7, r1
 80080e0:	609a      	str	r2, [r3, #8]
              mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[6];
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	689b      	ldr	r3, [r3, #8]
 80080e6:	799a      	ldrb	r2, [r3, #6]
 80080e8:	187b      	adds	r3, r7, r1
 80080ea:	731a      	strb	r2, [r3, #12]
              LoRaMacMlmeRequest( &mlmeReq );
 80080ec:	187b      	adds	r3, r7, r1
 80080ee:	0018      	movs	r0, r3
 80080f0:	f007 fae2 	bl	800f6b8 <LoRaMacMlmeRequest>
          }
          certifParam.State = 1;
 80080f4:	4b09      	ldr	r3, [pc, #36]	; (800811c <certif_rx+0x2cc>)
 80080f6:	2201      	movs	r2, #1
 80080f8:	705a      	strb	r2, [r3, #1]
          break;
 80080fa:	e000      	b.n	80080fe <certif_rx+0x2ae>
          LoRaMacMlmeRequest( &mlmeReq );
          break;
        }
#endif /* LORAMAC_CLASSB_ENABLED */
        default:                  
          break;
 80080fc:	46c0      	nop			; (mov r8, r8)
        }
    }
  
    if ( certifParam.Running == false )
 80080fe:	4b07      	ldr	r3, [pc, #28]	; (800811c <certif_rx+0x2cc>)
 8008100:	781b      	ldrb	r3, [r3, #0]
 8008102:	2201      	movs	r2, #1
 8008104:	4053      	eors	r3, r2
 8008106:	b2db      	uxtb	r3, r3
 8008108:	2b00      	cmp	r3, #0
 800810a:	d003      	beq.n	8008114 <certif_rx+0x2c4>
    {
      /*cerification test stops*/
      TimerStop( &CertifTxNextPacketTimer );
 800810c:	4b07      	ldr	r3, [pc, #28]	; (800812c <certif_rx+0x2dc>)
 800810e:	0018      	movs	r0, r3
 8008110:	f00d fbde 	bl	80158d0 <TimerStop>
    }
}
 8008114:	46c0      	nop			; (mov r8, r8)
 8008116:	46bd      	mov	sp, r7
 8008118:	b026      	add	sp, #152	; 0x98
 800811a:	bdb0      	pop	{r4, r5, r7, pc}
 800811c:	200002c0 	.word	0x200002c0
 8008120:	2000030a 	.word	0x2000030a
 8008124:	2000030b 	.word	0x2000030b
 8008128:	08008139 	.word	0x08008139
 800812c:	200002a8 	.word	0x200002a8
 8008130:	00001388 	.word	0x00001388
 8008134:	080213ec 	.word	0x080213ec

08008138 <OnCertifTxNextPacketTimerEvent>:

/*!
 * \brief Function executed on TxNextPacket Timeout event
 */
static void OnCertifTxNextPacketTimerEvent( void* context )
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b082      	sub	sp, #8
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
    certif_tx( );
 8008140:	f7ff fdec 	bl	8007d1c <certif_tx>

}
 8008144:	46c0      	nop			; (mov r8, r8)
 8008146:	46bd      	mov	sp, r7
 8008148:	b002      	add	sp, #8
 800814a:	bd80      	pop	{r7, pc}

0800814c <lorawan_driver_loop>:
 * lorawan loop : process the LoRaMac
 * This need to be called as much as possible.
 * in Sync mode the function is call by the waitUntilEndOfExecution
 * when switch in async mode you need to call this function as much as possible
 */
void lorawan_driver_loop() {
 800814c:	b580      	push	{r7, lr}
 800814e:	af00      	add	r7, sp, #0

	while (    __loraWanState.joinState != LORAWAN_STATE_NONE
 8008150:	e004      	b.n	800815c <lorawan_driver_loop+0x10>
			&& __loraWanState.joinState != LORAWAN_STATE_INITIALIZED
			&& __loraWanState.reqPending ) {
		__loraWanState.reqPending=false;
 8008152:	4b0b      	ldr	r3, [pc, #44]	; (8008180 <lorawan_driver_loop+0x34>)
 8008154:	2200      	movs	r2, #0
 8008156:	721a      	strb	r2, [r3, #8]
        LoRaMacProcess( );
 8008158:	f003 fc58 	bl	800ba0c <LoRaMacProcess>
	while (    __loraWanState.joinState != LORAWAN_STATE_NONE
 800815c:	4b08      	ldr	r3, [pc, #32]	; (8008180 <lorawan_driver_loop+0x34>)
 800815e:	781b      	ldrb	r3, [r3, #0]
 8008160:	b2db      	uxtb	r3, r3
 8008162:	2b00      	cmp	r3, #0
 8008164:	d008      	beq.n	8008178 <lorawan_driver_loop+0x2c>
			&& __loraWanState.joinState != LORAWAN_STATE_INITIALIZED
 8008166:	4b06      	ldr	r3, [pc, #24]	; (8008180 <lorawan_driver_loop+0x34>)
 8008168:	781b      	ldrb	r3, [r3, #0]
 800816a:	b2db      	uxtb	r3, r3
 800816c:	2b01      	cmp	r3, #1
 800816e:	d003      	beq.n	8008178 <lorawan_driver_loop+0x2c>
			&& __loraWanState.reqPending ) {
 8008170:	4b03      	ldr	r3, [pc, #12]	; (8008180 <lorawan_driver_loop+0x34>)
 8008172:	7a1b      	ldrb	r3, [r3, #8]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d1ec      	bne.n	8008152 <lorawan_driver_loop+0x6>
	}

}
 8008178:	46c0      	nop			; (mov r8, r8)
 800817a:	46bd      	mov	sp, r7
 800817c:	bd80      	pop	{r7, pc}
 800817e:	46c0      	nop			; (mov r8, r8)
 8008180:	2000032c 	.word	0x2000032c

08008184 <lorawan_driver_waitUntilEndOfExecution>:

__weak void lorawan_driver_waitUntilEndOfExecution() {
 8008184:	b580      	push	{r7, lr}
 8008186:	af00      	add	r7, sp, #0

	lorawan_driver_loop();
 8008188:	f7ff ffe0 	bl	800814c <lorawan_driver_loop>
	#if ITSDK_WITH_WDG != __WDG_NONE && ITSDK_WDG_MS > 0
	   wdg_refresh();
	#endif
    itsdk_stimer_run();
 800818c:	f015 f8f2 	bl	801d374 <itsdk_stimer_run>

}
 8008190:	46c0      	nop			; (mov r8, r8)
 8008192:	46bd      	mov	sp, r7
 8008194:	bd80      	pop	{r7, pc}
	...

08008198 <lorawan_driver_battery_level>:
/**
 * Return a batteryLevel from 1 to 254
 * 1 = VBAT_MIN
 * 254 = VBAT_MAX
 */
__weak uint8_t lorawan_driver_battery_level() {
 8008198:	b590      	push	{r4, r7, lr}
 800819a:	b083      	sub	sp, #12
 800819c:	af00      	add	r7, sp, #0
	 uint16_t mv = adc_getVBat();
 800819e:	1dbc      	adds	r4, r7, #6
 80081a0:	f015 fb38 	bl	801d814 <adc_getVBat>
 80081a4:	0003      	movs	r3, r0
 80081a6:	8023      	strh	r3, [r4, #0]
	 if ( mv <= ITSDK_VBAT_MIN ) return 1;
 80081a8:	1dbb      	adds	r3, r7, #6
 80081aa:	881a      	ldrh	r2, [r3, #0]
 80081ac:	23fa      	movs	r3, #250	; 0xfa
 80081ae:	00db      	lsls	r3, r3, #3
 80081b0:	429a      	cmp	r2, r3
 80081b2:	d801      	bhi.n	80081b8 <lorawan_driver_battery_level+0x20>
 80081b4:	2301      	movs	r3, #1
 80081b6:	e014      	b.n	80081e2 <lorawan_driver_battery_level+0x4a>
	 if ( mv >= ITSDK_VBAT_MAX ) return 254;
 80081b8:	1dbb      	adds	r3, r7, #6
 80081ba:	881b      	ldrh	r3, [r3, #0]
 80081bc:	4a0b      	ldr	r2, [pc, #44]	; (80081ec <lorawan_driver_battery_level+0x54>)
 80081be:	4293      	cmp	r3, r2
 80081c0:	d901      	bls.n	80081c6 <lorawan_driver_battery_level+0x2e>
 80081c2:	23fe      	movs	r3, #254	; 0xfe
 80081c4:	e00d      	b.n	80081e2 <lorawan_driver_battery_level+0x4a>
	 return (( (uint32_t) (mv - ITSDK_VBAT_MIN)*ITSDK_VBAT_MAX) /(ITSDK_VBAT_MAX-ITSDK_VBAT_MIN) );
 80081c6:	1dbb      	adds	r3, r7, #6
 80081c8:	881b      	ldrh	r3, [r3, #0]
 80081ca:	4a09      	ldr	r2, [pc, #36]	; (80081f0 <lorawan_driver_battery_level+0x58>)
 80081cc:	4694      	mov	ip, r2
 80081ce:	4463      	add	r3, ip
 80081d0:	001a      	movs	r2, r3
 80081d2:	4b08      	ldr	r3, [pc, #32]	; (80081f4 <lorawan_driver_battery_level+0x5c>)
 80081d4:	4353      	muls	r3, r2
 80081d6:	4908      	ldr	r1, [pc, #32]	; (80081f8 <lorawan_driver_battery_level+0x60>)
 80081d8:	0018      	movs	r0, r3
 80081da:	f7f7 ff9d 	bl	8000118 <__udivsi3>
 80081de:	0003      	movs	r3, r0
 80081e0:	b2db      	uxtb	r3, r3
}
 80081e2:	0018      	movs	r0, r3
 80081e4:	46bd      	mov	sp, r7
 80081e6:	b003      	add	sp, #12
 80081e8:	bd90      	pop	{r4, r7, pc}
 80081ea:	46c0      	nop			; (mov r8, r8)
 80081ec:	00000ce3 	.word	0x00000ce3
 80081f0:	fffff830 	.word	0xfffff830
 80081f4:	00000ce4 	.word	0x00000ce4
 80081f8:	00000514 	.word	0x00000514

080081fc <lorawan_driver_temperature>:

/**
 * Return the temperature
 * temperature in fixed decimal : 8b integer + 8b decimal
 */
__weak uint16_t lorawan_driver_temperature() {
 80081fc:	b590      	push	{r4, r7, lr}
 80081fe:	b083      	sub	sp, #12
 8008200:	af00      	add	r7, sp, #0
	int16_t t = adc_getTemperature();
 8008202:	1dbc      	adds	r4, r7, #6
 8008204:	f015 fa7e 	bl	801d704 <adc_getTemperature>
 8008208:	0003      	movs	r3, r0
 800820a:	8023      	strh	r3, [r4, #0]
	t = (int16_t)(((int32_t)t << 8)/100);
 800820c:	1dbb      	adds	r3, r7, #6
 800820e:	2200      	movs	r2, #0
 8008210:	5e9b      	ldrsh	r3, [r3, r2]
 8008212:	021b      	lsls	r3, r3, #8
 8008214:	2164      	movs	r1, #100	; 0x64
 8008216:	0018      	movs	r0, r3
 8008218:	f7f8 f808 	bl	800022c <__divsi3>
 800821c:	0003      	movs	r3, r0
 800821e:	001a      	movs	r2, r3
 8008220:	1dbb      	adds	r3, r7, #6
 8008222:	801a      	strh	r2, [r3, #0]
	return (uint16_t)t;
 8008224:	1dbb      	adds	r3, r7, #6
 8008226:	881b      	ldrh	r3, [r3, #0]
}
 8008228:	0018      	movs	r0, r3
 800822a:	46bd      	mov	sp, r7
 800822c:	b003      	add	sp, #12
 800822e:	bd90      	pop	{r4, r7, pc}

08008230 <lorawan_driver_macProcessNotify>:

/**
 * Called after IRQ processing
 */
void lorawan_driver_macProcessNotify(void) {
 8008230:	b580      	push	{r7, lr}
 8008232:	af00      	add	r7, sp, #0
  __loraWanState.reqPending=true;
 8008234:	4b02      	ldr	r3, [pc, #8]	; (8008240 <lorawan_driver_macProcessNotify+0x10>)
 8008236:	2201      	movs	r2, #1
 8008238:	721a      	strb	r2, [r3, #8]
}
 800823a:	46c0      	nop			; (mov r8, r8)
 800823c:	46bd      	mov	sp, r7
 800823e:	bd80      	pop	{r7, pc}
 8008240:	2000032c 	.word	0x2000032c

08008244 <lorawan_driver_onTxNeeded>:
}

/**
 * Callback function requesting transmission
 */
__weak void lorawan_driver_onTxNeeded() {
 8008244:	b580      	push	{r7, lr}
 8008246:	af00      	add	r7, sp, #0
	LOG_INFO_LORAWAN(("[LoRaWAN] Network Server is asking for an uplink transmission\r\n"));
}
 8008248:	46c0      	nop			; (mov r8, r8)
 800824a:	46bd      	mov	sp, r7
 800824c:	bd80      	pop	{r7, pc}
	...

08008250 <__convertDR>:


/**
 * Convert Datarate define from ITSDK to LoRaMac
 */
static uint8_t __convertDR(uint8_t itsdkDr) {
 8008250:	b580      	push	{r7, lr}
 8008252:	b082      	sub	sp, #8
 8008254:	af00      	add	r7, sp, #0
 8008256:	0002      	movs	r2, r0
 8008258:	1dfb      	adds	r3, r7, #7
 800825a:	701a      	strb	r2, [r3, #0]
	switch (itsdkDr) {
 800825c:	1dfb      	adds	r3, r7, #7
 800825e:	781b      	ldrb	r3, [r3, #0]
 8008260:	2b16      	cmp	r3, #22
 8008262:	d824      	bhi.n	80082ae <__convertDR+0x5e>
 8008264:	009a      	lsls	r2, r3, #2
 8008266:	4b18      	ldr	r3, [pc, #96]	; (80082c8 <__convertDR+0x78>)
 8008268:	18d3      	adds	r3, r2, r3
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	469f      	mov	pc, r3
	case __LORAWAN_DR_0: return DR_0;
 800826e:	2300      	movs	r3, #0
 8008270:	e026      	b.n	80082c0 <__convertDR+0x70>
	case __LORAWAN_DR_1: return DR_1;
 8008272:	2301      	movs	r3, #1
 8008274:	e024      	b.n	80082c0 <__convertDR+0x70>
	case __LORAWAN_DR_2: return DR_2;
 8008276:	2302      	movs	r3, #2
 8008278:	e022      	b.n	80082c0 <__convertDR+0x70>
	case __LORAWAN_DR_3: return DR_3;
 800827a:	2303      	movs	r3, #3
 800827c:	e020      	b.n	80082c0 <__convertDR+0x70>
	case __LORAWAN_DR_4: return DR_4;
 800827e:	2304      	movs	r3, #4
 8008280:	e01e      	b.n	80082c0 <__convertDR+0x70>
	case __LORAWAN_DR_5: return DR_5;
 8008282:	2305      	movs	r3, #5
 8008284:	e01c      	b.n	80082c0 <__convertDR+0x70>
	case __LORAWAN_DR_6: return DR_6;
 8008286:	2306      	movs	r3, #6
 8008288:	e01a      	b.n	80082c0 <__convertDR+0x70>
	case __LORAWAN_DR_7: return DR_7;
 800828a:	2307      	movs	r3, #7
 800828c:	e018      	b.n	80082c0 <__convertDR+0x70>
	case __LORAWAN_DR_8: return DR_8;
 800828e:	2308      	movs	r3, #8
 8008290:	e016      	b.n	80082c0 <__convertDR+0x70>
	case __LORAWAN_DR_9: return DR_9;
 8008292:	2309      	movs	r3, #9
 8008294:	e014      	b.n	80082c0 <__convertDR+0x70>
	case __LORAWAN_DR_10: return DR_10;
 8008296:	230a      	movs	r3, #10
 8008298:	e012      	b.n	80082c0 <__convertDR+0x70>
	case __LORAWAN_DR_11: return DR_11;
 800829a:	230b      	movs	r3, #11
 800829c:	e010      	b.n	80082c0 <__convertDR+0x70>
	case __LORAWAN_DR_12: return DR_12;
 800829e:	230c      	movs	r3, #12
 80082a0:	e00e      	b.n	80082c0 <__convertDR+0x70>
	case __LORAWAN_DR_13: return DR_13;
 80082a2:	230d      	movs	r3, #13
 80082a4:	e00c      	b.n	80082c0 <__convertDR+0x70>
	case __LORAWAN_DR_14: return DR_14;
 80082a6:	230e      	movs	r3, #14
 80082a8:	e00a      	b.n	80082c0 <__convertDR+0x70>
	case __LORAWAN_DR_15: return DR_15;
 80082aa:	230f      	movs	r3, #15
 80082ac:	e008      	b.n	80082c0 <__convertDR+0x70>
	default:
		ITSDK_ERROR_REPORT(ITSDK_ERROR_LORAWAN_INVALID_DR,(uint16_t)itsdkDr);
 80082ae:	1dfb      	adds	r3, r7, #7
 80082b0:	781b      	ldrb	r3, [r3, #0]
 80082b2:	b29b      	uxth	r3, r3
 80082b4:	4a05      	ldr	r2, [pc, #20]	; (80082cc <__convertDR+0x7c>)
 80082b6:	0019      	movs	r1, r3
 80082b8:	0010      	movs	r0, r2
 80082ba:	f013 fc4f 	bl	801bb5c <itsdk_error_report>
	}
	return 0;	// never reached
 80082be:	2300      	movs	r3, #0
}
 80082c0:	0018      	movs	r0, r3
 80082c2:	46bd      	mov	sp, r7
 80082c4:	b002      	add	sp, #8
 80082c6:	bd80      	pop	{r7, pc}
 80082c8:	0802140c 	.word	0x0802140c
 80082cc:	d0000100 	.word	0xd0000100

080082d0 <lorawan_driver_LORA_Init>:
 *  lora Init - initialize the stack and the associated hardware
 *
 */
void lorawan_driver_LORA_Init(
		lorawan_driver_config_t * config
){
 80082d0:	b590      	push	{r4, r7, lr}
 80082d2:	b089      	sub	sp, #36	; 0x24
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
  LOG_INFO_LORAWAN(("lorawan_driver_LORA_Init\r\n"));

  __loraWanState.joinState = LORAWAN_STATE_NONE;
 80082d8:	4b95      	ldr	r3, [pc, #596]	; (8008530 <lorawan_driver_LORA_Init+0x260>)
 80082da:	2200      	movs	r2, #0
 80082dc:	701a      	strb	r2, [r3, #0]
  __loraWanState.upLinkCounter = 0;
 80082de:	4b94      	ldr	r3, [pc, #592]	; (8008530 <lorawan_driver_LORA_Init+0x260>)
 80082e0:	2200      	movs	r2, #0
 80082e2:	815a      	strh	r2, [r3, #10]
  __loraWanState.downlinkCounter = 0;
 80082e4:	4b92      	ldr	r3, [pc, #584]	; (8008530 <lorawan_driver_LORA_Init+0x260>)
 80082e6:	2200      	movs	r2, #0
 80082e8:	819a      	strh	r2, [r3, #12]
  __loraWanState.lastRssi = LORAWAN_DRIVER_INVALID_RSSI;
 80082ea:	4b91      	ldr	r3, [pc, #580]	; (8008530 <lorawan_driver_LORA_Init+0x260>)
 80082ec:	2201      	movs	r2, #1
 80082ee:	4252      	negs	r2, r2
 80082f0:	81da      	strh	r2, [r3, #14]
  LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 80082f2:	4b90      	ldr	r3, [pc, #576]	; (8008534 <lorawan_driver_LORA_Init+0x264>)
 80082f4:	4a90      	ldr	r2, [pc, #576]	; (8008538 <lorawan_driver_LORA_Init+0x268>)
 80082f6:	601a      	str	r2, [r3, #0]
  LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 80082f8:	4b8e      	ldr	r3, [pc, #568]	; (8008534 <lorawan_driver_LORA_Init+0x264>)
 80082fa:	4a90      	ldr	r2, [pc, #576]	; (800853c <lorawan_driver_LORA_Init+0x26c>)
 80082fc:	605a      	str	r2, [r3, #4]
  LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 80082fe:	4b8d      	ldr	r3, [pc, #564]	; (8008534 <lorawan_driver_LORA_Init+0x264>)
 8008300:	4a8f      	ldr	r2, [pc, #572]	; (8008540 <lorawan_driver_LORA_Init+0x270>)
 8008302:	609a      	str	r2, [r3, #8]
  LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 8008304:	4b8b      	ldr	r3, [pc, #556]	; (8008534 <lorawan_driver_LORA_Init+0x264>)
 8008306:	4a8f      	ldr	r2, [pc, #572]	; (8008544 <lorawan_driver_LORA_Init+0x274>)
 8008308:	60da      	str	r2, [r3, #12]
  LoRaMacCallbacks.GetBatteryLevel = lorawan_driver_battery_level;
 800830a:	4b8f      	ldr	r3, [pc, #572]	; (8008548 <lorawan_driver_LORA_Init+0x278>)
 800830c:	4a8f      	ldr	r2, [pc, #572]	; (800854c <lorawan_driver_LORA_Init+0x27c>)
 800830e:	601a      	str	r2, [r3, #0]
  LoRaMacCallbacks.GetTemperatureLevel = lorawan_driver_temperature;
 8008310:	4b8d      	ldr	r3, [pc, #564]	; (8008548 <lorawan_driver_LORA_Init+0x278>)
 8008312:	4a8f      	ldr	r2, [pc, #572]	; (8008550 <lorawan_driver_LORA_Init+0x280>)
 8008314:	605a      	str	r2, [r3, #4]
  LoRaMacCallbacks.MacProcessNotify = lorawan_driver_macProcessNotify;
 8008316:	4b8c      	ldr	r3, [pc, #560]	; (8008548 <lorawan_driver_LORA_Init+0x278>)
 8008318:	4a8e      	ldr	r2, [pc, #568]	; (8008554 <lorawan_driver_LORA_Init+0x284>)
 800831a:	60da      	str	r2, [r3, #12]



  // Set the Radio configuration
  switch ( config->region ) {
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	889b      	ldrh	r3, [r3, #4]
 8008320:	2b20      	cmp	r3, #32
 8008322:	d146      	bne.n	80083b2 <lorawan_driver_LORA_Init+0xe2>
        	LoRaMacInitialization( &LoRaMacPrimitives, &LoRaMacCallbacks, LORAMAC_REGION_EU433 );
        	break;
		#endif
		#if defined( REGION_EU868 )
        case __LORAWAN_REGION_EU868:
        	LoRaMacInitialization( &LoRaMacPrimitives, &LoRaMacCallbacks, LORAMAC_REGION_EU868 );
 8008324:	4988      	ldr	r1, [pc, #544]	; (8008548 <lorawan_driver_LORA_Init+0x278>)
 8008326:	4b83      	ldr	r3, [pc, #524]	; (8008534 <lorawan_driver_LORA_Init+0x264>)
 8008328:	2205      	movs	r2, #5
 800832a:	0018      	movs	r0, r3
 800832c:	f005 ff1e 	bl	800e16c <LoRaMacInitialization>
        	LoRaMacTestSetDutyCycleOn( true );	// activate duty cycle
 8008330:	2001      	movs	r0, #1
 8008332:	f007 fc83 	bl	800fc3c <LoRaMacTestSetDutyCycleOn>
        	break;
 8008336:	46c0      	nop			; (mov r8, r8)
  	  	mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;	// Change the default RX window margin error (default is +/- 10ms)
  	  	mibReq.Param.SystemMaxRxError = ITSDK_LORAWAN_MAX_RX_ERROR;
  	  	LoRaMacMibSetRequestConfirm( &mibReq );
		#endif

  	    mibReq.Type = MIB_ADR;
 8008338:	2408      	movs	r4, #8
 800833a:	193b      	adds	r3, r7, r4
 800833c:	2202      	movs	r2, #2
 800833e:	701a      	strb	r2, [r3, #0]
  	    mibReq.Param.AdrEnable = config->adrEnable;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	781a      	ldrb	r2, [r3, #0]
 8008344:	193b      	adds	r3, r7, r4
 8008346:	711a      	strb	r2, [r3, #4]
  	    LoRaMacMibSetRequestConfirm( &mibReq );
 8008348:	193b      	adds	r3, r7, r4
 800834a:	0018      	movs	r0, r3
 800834c:	f006 fcfc 	bl	800ed48 <LoRaMacMibSetRequestConfirm>

  	    mibReq.Type = MIB_PUBLIC_NETWORK;
 8008350:	193b      	adds	r3, r7, r4
 8008352:	221a      	movs	r2, #26
 8008354:	701a      	strb	r2, [r3, #0]
  	    mibReq.Param.EnablePublicNetwork = config->enablePublicNetwork;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	789a      	ldrb	r2, [r3, #2]
 800835a:	193b      	adds	r3, r7, r4
 800835c:	711a      	strb	r2, [r3, #4]
  	    LoRaMacMibSetRequestConfirm( &mibReq );
 800835e:	193b      	adds	r3, r7, r4
 8008360:	0018      	movs	r0, r3
 8008362:	f006 fcf1 	bl	800ed48 <LoRaMacMibSetRequestConfirm>

  	    __loraWanState.txDatarate = __convertDR(config->txDatarate);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	785b      	ldrb	r3, [r3, #1]
 800836a:	b25b      	sxtb	r3, r3
 800836c:	b2db      	uxtb	r3, r3
 800836e:	0018      	movs	r0, r3
 8008370:	f7ff ff6e 	bl	8008250 <__convertDR>
 8008374:	0003      	movs	r3, r0
 8008376:	001a      	movs	r2, r3
 8008378:	4b6d      	ldr	r3, [pc, #436]	; (8008530 <lorawan_driver_LORA_Init+0x260>)
 800837a:	749a      	strb	r2, [r3, #18]
  	    mibReq.Type = MIB_CHANNELS_DEFAULT_DATARATE;
 800837c:	193b      	adds	r3, r7, r4
 800837e:	2227      	movs	r2, #39	; 0x27
 8008380:	701a      	strb	r2, [r3, #0]
  	    mibReq.Param.ChannelsDefaultDatarate = __convertDR(config->txDatarate);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	785b      	ldrb	r3, [r3, #1]
 8008386:	b25b      	sxtb	r3, r3
 8008388:	b2db      	uxtb	r3, r3
 800838a:	0018      	movs	r0, r3
 800838c:	f7ff ff60 	bl	8008250 <__convertDR>
 8008390:	0003      	movs	r3, r0
 8008392:	b25a      	sxtb	r2, r3
 8008394:	193b      	adds	r3, r7, r4
 8008396:	711a      	strb	r2, [r3, #4]
  	    LoRaMacMibSetRequestConfirm( &mibReq );
 8008398:	193b      	adds	r3, r7, r4
 800839a:	0018      	movs	r0, r3
 800839c:	f006 fcd4 	bl	800ed48 <LoRaMacMibSetRequestConfirm>

  	    __loraWanState.JoinType = config->JoinType;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	799a      	ldrb	r2, [r3, #6]
 80083a4:	4b62      	ldr	r3, [pc, #392]	; (8008530 <lorawan_driver_LORA_Init+0x260>)
 80083a6:	74da      	strb	r2, [r3, #19]
  	    if ( config->JoinType == __LORAWAN_OTAA ) {
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	799b      	ldrb	r3, [r3, #6]
 80083ac:	2b01      	cmp	r3, #1
 80083ae:	d130      	bne.n	8008412 <lorawan_driver_LORA_Init+0x142>
 80083b0:	e007      	b.n	80083c2 <lorawan_driver_LORA_Init+0xf2>
    		ITSDK_ERROR_REPORT(ITSDK_ERROR_LORAWAN_INVALID_REGION,(uint16_t)config->region);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	889b      	ldrh	r3, [r3, #4]
 80083b6:	4a68      	ldr	r2, [pc, #416]	; (8008558 <lorawan_driver_LORA_Init+0x288>)
 80083b8:	0019      	movs	r1, r3
 80083ba:	0010      	movs	r0, r2
 80083bc:	f013 fbce 	bl	801bb5c <itsdk_error_report>
 80083c0:	e0b2      	b.n	8008528 <lorawan_driver_LORA_Init+0x258>
  	    	mibReq.Type = MIB_APP_KEY;
 80083c2:	2108      	movs	r1, #8
 80083c4:	187b      	adds	r3, r7, r1
 80083c6:	2205      	movs	r2, #5
 80083c8:	701a      	strb	r2, [r3, #0]
  	    	mibReq.Param.AppKey = config->config.otaa.appKey;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	691a      	ldr	r2, [r3, #16]
 80083ce:	187b      	adds	r3, r7, r1
 80083d0:	605a      	str	r2, [r3, #4]
  	    	LoRaMacMibSetRequestConfirm( &mibReq );
 80083d2:	000c      	movs	r4, r1
 80083d4:	187b      	adds	r3, r7, r1
 80083d6:	0018      	movs	r0, r3
 80083d8:	f006 fcb6 	bl	800ed48 <LoRaMacMibSetRequestConfirm>

  	    	mibReq.Type = MIB_NWK_KEY;
 80083dc:	0021      	movs	r1, r4
 80083de:	187b      	adds	r3, r7, r1
 80083e0:	2206      	movs	r2, #6
 80083e2:	701a      	strb	r2, [r3, #0]
  	    	mibReq.Param.NwkKey = config->config.otaa.nwkKey;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	695a      	ldr	r2, [r3, #20]
 80083e8:	187b      	adds	r3, r7, r1
 80083ea:	605a      	str	r2, [r3, #4]
  	    	LoRaMacMibSetRequestConfirm( &mibReq );
 80083ec:	187b      	adds	r3, r7, r1
 80083ee:	0018      	movs	r0, r3
 80083f0:	f006 fcaa 	bl	800ed48 <LoRaMacMibSetRequestConfirm>

  	    	// Store the config element not in MIB
  	        bcopy(config->devEui,__loraWanState.join.otaa.devEui,8);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	689b      	ldr	r3, [r3, #8]
 80083f8:	4958      	ldr	r1, [pc, #352]	; (800855c <lorawan_driver_LORA_Init+0x28c>)
 80083fa:	2208      	movs	r2, #8
 80083fc:	0018      	movs	r0, r3
 80083fe:	f016 fe4c 	bl	801f09a <bcopy>
  	        bcopy(config->config.otaa.appEui,__loraWanState.join.otaa.appEui,8);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	68db      	ldr	r3, [r3, #12]
 8008406:	4956      	ldr	r1, [pc, #344]	; (8008560 <lorawan_driver_LORA_Init+0x290>)
 8008408:	2208      	movs	r2, #8
 800840a:	0018      	movs	r0, r3
 800840c:	f016 fe45 	bl	801f09a <bcopy>
 8008410:	e06e      	b.n	80084f0 <lorawan_driver_LORA_Init+0x220>

  	    } else if (config->JoinType == __LORAWAN_ABP) {
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	799b      	ldrb	r3, [r3, #6]
 8008416:	2b02      	cmp	r3, #2
 8008418:	d16a      	bne.n	80084f0 <lorawan_driver_LORA_Init+0x220>

  	    	if (config->config.abp.devAddr == 0) {
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	69db      	ldr	r3, [r3, #28]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d10e      	bne.n	8008440 <lorawan_driver_LORA_Init+0x170>
				// Choose a random device address
				srand1( itsdk_getRandomSeed( ) );
 8008422:	f015 ff4d 	bl	801e2c0 <itsdk_getRandomSeed>
 8008426:	0003      	movs	r3, r0
 8008428:	0018      	movs	r0, r3
 800842a:	f00d fabd 	bl	80159a8 <srand1>
				config->config.abp.devAddr = randr( 0, 0x01FFFFFF );
 800842e:	4b4d      	ldr	r3, [pc, #308]	; (8008564 <lorawan_driver_LORA_Init+0x294>)
 8008430:	0019      	movs	r1, r3
 8008432:	2000      	movs	r0, #0
 8008434:	f00d fac6 	bl	80159c4 <randr>
 8008438:	0003      	movs	r3, r0
 800843a:	001a      	movs	r2, r3
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	61da      	str	r2, [r3, #28]
  	    	}

  	    	mibReq.Type = MIB_DEV_ADDR;
 8008440:	2108      	movs	r1, #8
 8008442:	187b      	adds	r3, r7, r1
 8008444:	2204      	movs	r2, #4
 8008446:	701a      	strb	r2, [r3, #0]
  	    	mibReq.Param.DevAddr = config->config.abp.devAddr;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	69da      	ldr	r2, [r3, #28]
 800844c:	187b      	adds	r3, r7, r1
 800844e:	605a      	str	r2, [r3, #4]
  	    	LoRaMacMibSetRequestConfirm( &mibReq );
 8008450:	000c      	movs	r4, r1
 8008452:	187b      	adds	r3, r7, r1
 8008454:	0018      	movs	r0, r3
 8008456:	f006 fc77 	bl	800ed48 <LoRaMacMibSetRequestConfirm>

  	    	mibReq.Type = MIB_NET_ID;
 800845a:	0021      	movs	r1, r4
 800845c:	187b      	adds	r3, r7, r1
 800845e:	2203      	movs	r2, #3
 8008460:	701a      	strb	r2, [r3, #0]
  	    	mibReq.Param.NetID = ITSDK_LORAWAN_NETWORKID;
 8008462:	187b      	adds	r3, r7, r1
 8008464:	2200      	movs	r2, #0
 8008466:	605a      	str	r2, [r3, #4]
  	    	LoRaMacMibSetRequestConfirm( &mibReq );
 8008468:	000c      	movs	r4, r1
 800846a:	187b      	adds	r3, r7, r1
 800846c:	0018      	movs	r0, r3
 800846e:	f006 fc6b 	bl	800ed48 <LoRaMacMibSetRequestConfirm>

  	    	mibReq.Type = MIB_F_NWK_S_INT_KEY;
 8008472:	0021      	movs	r1, r4
 8008474:	187b      	adds	r3, r7, r1
 8008476:	2209      	movs	r2, #9
 8008478:	701a      	strb	r2, [r3, #0]
  	    	mibReq.Param.FNwkSIntKey = config->config.abp.FNwkSIntKey;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	68da      	ldr	r2, [r3, #12]
 800847e:	187b      	adds	r3, r7, r1
 8008480:	605a      	str	r2, [r3, #4]
  	    	LoRaMacMibSetRequestConfirm( &mibReq );
 8008482:	000c      	movs	r4, r1
 8008484:	187b      	adds	r3, r7, r1
 8008486:	0018      	movs	r0, r3
 8008488:	f006 fc5e 	bl	800ed48 <LoRaMacMibSetRequestConfirm>

  	    	mibReq.Type = MIB_S_NWK_S_INT_KEY;
 800848c:	0021      	movs	r1, r4
 800848e:	187b      	adds	r3, r7, r1
 8008490:	220a      	movs	r2, #10
 8008492:	701a      	strb	r2, [r3, #0]
  	    	mibReq.Param.SNwkSIntKey = config->config.abp.SNwkSIntKey;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	691a      	ldr	r2, [r3, #16]
 8008498:	187b      	adds	r3, r7, r1
 800849a:	605a      	str	r2, [r3, #4]
  	    	LoRaMacMibSetRequestConfirm( &mibReq );
 800849c:	000c      	movs	r4, r1
 800849e:	187b      	adds	r3, r7, r1
 80084a0:	0018      	movs	r0, r3
 80084a2:	f006 fc51 	bl	800ed48 <LoRaMacMibSetRequestConfirm>

  	    	mibReq.Type = MIB_NWK_S_ENC_KEY;
 80084a6:	0021      	movs	r1, r4
 80084a8:	187b      	adds	r3, r7, r1
 80084aa:	220b      	movs	r2, #11
 80084ac:	701a      	strb	r2, [r3, #0]
  	    	mibReq.Param.NwkSEncKey = config->config.abp.nwkSEncKey;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	695a      	ldr	r2, [r3, #20]
 80084b2:	187b      	adds	r3, r7, r1
 80084b4:	605a      	str	r2, [r3, #4]
  	    	LoRaMacMibSetRequestConfirm( &mibReq );
 80084b6:	000c      	movs	r4, r1
 80084b8:	187b      	adds	r3, r7, r1
 80084ba:	0018      	movs	r0, r3
 80084bc:	f006 fc44 	bl	800ed48 <LoRaMacMibSetRequestConfirm>

  	    	mibReq.Type = MIB_APP_S_KEY;
 80084c0:	0021      	movs	r1, r4
 80084c2:	187b      	adds	r3, r7, r1
 80084c4:	220c      	movs	r2, #12
 80084c6:	701a      	strb	r2, [r3, #0]
  	    	mibReq.Param.AppSKey = config->config.abp.appSKey;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	699a      	ldr	r2, [r3, #24]
 80084cc:	187b      	adds	r3, r7, r1
 80084ce:	605a      	str	r2, [r3, #4]
  	    	LoRaMacMibSetRequestConfirm( &mibReq );
 80084d0:	000c      	movs	r4, r1
 80084d2:	187b      	adds	r3, r7, r1
 80084d4:	0018      	movs	r0, r3
 80084d6:	f006 fc37 	bl	800ed48 <LoRaMacMibSetRequestConfirm>

  	    	mibReq.Type = MIB_NETWORK_ACTIVATION;
 80084da:	0021      	movs	r1, r4
 80084dc:	187b      	adds	r3, r7, r1
 80084de:	2201      	movs	r2, #1
 80084e0:	701a      	strb	r2, [r3, #0]
  	    	mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 80084e2:	187b      	adds	r3, r7, r1
 80084e4:	2201      	movs	r2, #1
 80084e6:	711a      	strb	r2, [r3, #4]
  	    	LoRaMacMibSetRequestConfirm( &mibReq );
 80084e8:	187b      	adds	r3, r7, r1
 80084ea:	0018      	movs	r0, r3
 80084ec:	f006 fc2c 	bl	800ed48 <LoRaMacMibSetRequestConfirm>

  	    }
  	    mibReq.Type = MIB_DEVICE_CLASS;
 80084f0:	2108      	movs	r1, #8
 80084f2:	187b      	adds	r3, r7, r1
 80084f4:	2200      	movs	r2, #0
 80084f6:	701a      	strb	r2, [r3, #0]
  	    mibReq.Param.Class= CLASS_A;
 80084f8:	187b      	adds	r3, r7, r1
 80084fa:	2200      	movs	r2, #0
 80084fc:	711a      	strb	r2, [r3, #4]
  	    LoRaMacMibSetRequestConfirm( &mibReq );
 80084fe:	000c      	movs	r4, r1
 8008500:	187b      	adds	r3, r7, r1
 8008502:	0018      	movs	r0, r3
 8008504:	f006 fc20 	bl	800ed48 <LoRaMacMibSetRequestConfirm>

	    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 8008508:	0021      	movs	r1, r4
 800850a:	187b      	adds	r3, r7, r1
 800850c:	222b      	movs	r2, #43	; 0x2b
 800850e:	701a      	strb	r2, [r3, #0]
		mibReq.Param.SystemMaxRxError = ITSDK_LORAWAN_MAX_RX_ERROR;
 8008510:	187b      	adds	r3, r7, r1
 8008512:	2200      	movs	r2, #0
 8008514:	605a      	str	r2, [r3, #4]
		LoRaMacMibSetRequestConfirm( &mibReq );
 8008516:	187b      	adds	r3, r7, r1
 8008518:	0018      	movs	r0, r3
 800851a:	f006 fc15 	bl	800ed48 <LoRaMacMibSetRequestConfirm>
                LoRaMacMibSetRequestConfirm( &mibReq );
		#endif


         // Init the Mac layer
         LoRaMacStart();
 800851e:	f006 f9ff 	bl	800e920 <LoRaMacStart>
         __loraWanState.joinState = LORAWAN_STATE_INITIALIZED;
 8008522:	4b03      	ldr	r3, [pc, #12]	; (8008530 <lorawan_driver_LORA_Init+0x260>)
 8008524:	2201      	movs	r2, #1
 8008526:	701a      	strb	r2, [r3, #0]

}
 8008528:	46bd      	mov	sp, r7
 800852a:	b009      	add	sp, #36	; 0x24
 800852c:	bd90      	pop	{r4, r7, pc}
 800852e:	46c0      	nop			; (mov r8, r8)
 8008530:	2000032c 	.word	0x2000032c
 8008534:	2000030c 	.word	0x2000030c
 8008538:	080089f5 	.word	0x080089f5
 800853c:	08008a91 	.word	0x08008a91
 8008540:	08008b99 	.word	0x08008b99
 8008544:	08008c0d 	.word	0x08008c0d
 8008548:	2000031c 	.word	0x2000031c
 800854c:	08008199 	.word	0x08008199
 8008550:	080081fd 	.word	0x080081fd
 8008554:	08008231 	.word	0x08008231
 8008558:	d0000102 	.word	0xd0000102
 800855c:	20000340 	.word	0x20000340
 8008560:	20000348 	.word	0x20000348
 8008564:	01ffffff 	.word	0x01ffffff

08008568 <lorawan_driver_LORA_Join>:
// =======================================================================================

static MlmeReqJoin_t JoinParameters;
itsdk_lorawan_join_t lorawan_driver_LORA_Join(
		itsdk_lorawan_run_t 	  runMode
){
 8008568:	b5b0      	push	{r4, r5, r7, lr}
 800856a:	b08e      	sub	sp, #56	; 0x38
 800856c:	af00      	add	r7, sp, #0
 800856e:	0002      	movs	r2, r0
 8008570:	1dfb      	adds	r3, r7, #7
 8008572:	701a      	strb	r2, [r3, #0]
	LOG_INFO_LORAWAN(("lorawan_driver_LORA_Join (mode:%d)\r\n",runMode));

    switch (__loraWanState.JoinType) {
 8008574:	4b3d      	ldr	r3, [pc, #244]	; (800866c <lorawan_driver_LORA_Join+0x104>)
 8008576:	7cdb      	ldrb	r3, [r3, #19]
 8008578:	2b01      	cmp	r3, #1
 800857a:	d002      	beq.n	8008582 <lorawan_driver_LORA_Join+0x1a>
 800857c:	2b02      	cmp	r3, #2
 800857e:	d029      	beq.n	80085d4 <lorawan_driver_LORA_Join+0x6c>
 8008580:	e052      	b.n	8008628 <lorawan_driver_LORA_Join+0xc0>
    case __LORAWAN_OTAA:
    	{
    	    MlmeReq_t mlmeReq;
    	    mlmeReq.Type = MLME_JOIN;
 8008582:	2124      	movs	r1, #36	; 0x24
 8008584:	187b      	adds	r3, r7, r1
 8008586:	2200      	movs	r2, #0
 8008588:	701a      	strb	r2, [r3, #0]
    	    mlmeReq.Req.Join.DevEui = __loraWanState.join.otaa.devEui;
 800858a:	187b      	adds	r3, r7, r1
 800858c:	4a38      	ldr	r2, [pc, #224]	; (8008670 <lorawan_driver_LORA_Join+0x108>)
 800858e:	605a      	str	r2, [r3, #4]
    	    mlmeReq.Req.Join.JoinEui = __loraWanState.join.otaa.appEui;
 8008590:	187b      	adds	r3, r7, r1
 8008592:	4a38      	ldr	r2, [pc, #224]	; (8008674 <lorawan_driver_LORA_Join+0x10c>)
 8008594:	609a      	str	r2, [r3, #8]
    	    mlmeReq.Req.Join.Datarate = __loraWanState.txDatarate;
 8008596:	4b35      	ldr	r3, [pc, #212]	; (800866c <lorawan_driver_LORA_Join+0x104>)
 8008598:	7c9a      	ldrb	r2, [r3, #18]
 800859a:	187b      	adds	r3, r7, r1
 800859c:	731a      	strb	r2, [r3, #12]
    	    JoinParameters = mlmeReq.Req.Join;
 800859e:	4a36      	ldr	r2, [pc, #216]	; (8008678 <lorawan_driver_LORA_Join+0x110>)
 80085a0:	187b      	adds	r3, r7, r1
 80085a2:	3304      	adds	r3, #4
 80085a4:	cb31      	ldmia	r3!, {r0, r4, r5}
 80085a6:	c231      	stmia	r2!, {r0, r4, r5}

    	    LoRaMacStatus_t r = LoRaMacMlmeRequest( &mlmeReq );
 80085a8:	2537      	movs	r5, #55	; 0x37
 80085aa:	197c      	adds	r4, r7, r5
 80085ac:	187b      	adds	r3, r7, r1
 80085ae:	0018      	movs	r0, r3
 80085b0:	f007 f882 	bl	800f6b8 <LoRaMacMlmeRequest>
 80085b4:	0003      	movs	r3, r0
 80085b6:	7023      	strb	r3, [r4, #0]
			if ( r != LORAMAC_STATUS_OK ) {
 80085b8:	197b      	adds	r3, r7, r5
 80085ba:	781b      	ldrb	r3, [r3, #0]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d005      	beq.n	80085cc <lorawan_driver_LORA_Join+0x64>
				LOG_WARN_LORAWAN(("LoRaMacMlmeRequest return error(%d)\r\n",r));
				__loraWanState.joinState = LORAWAN_STATE_JOIN_FAILED;
 80085c0:	4b2a      	ldr	r3, [pc, #168]	; (800866c <lorawan_driver_LORA_Join+0x104>)
 80085c2:	2204      	movs	r2, #4
 80085c4:	701a      	strb	r2, [r3, #0]
				lorawan_driver_onJoinFailed();
 80085c6:	f013 ff3f 	bl	801c448 <lorawan_driver_onJoinFailed>
			} else {
				__loraWanState.joinState = LORAWAN_STATE_JOINING;
			}
    	}
        break;
 80085ca:	e035      	b.n	8008638 <lorawan_driver_LORA_Join+0xd0>
				__loraWanState.joinState = LORAWAN_STATE_JOINING;
 80085cc:	4b27      	ldr	r3, [pc, #156]	; (800866c <lorawan_driver_LORA_Join+0x104>)
 80085ce:	2202      	movs	r2, #2
 80085d0:	701a      	strb	r2, [r3, #0]
        break;
 80085d2:	e031      	b.n	8008638 <lorawan_driver_LORA_Join+0xd0>
    	{
			// Enable legacy mode to operate according to LoRaWAN Spec. 1.0.3
			Version_t abpLrWanVersion;
			MibRequestConfirm_t mibReq;

			abpLrWanVersion.Fields.Major    = 1;
 80085d4:	2120      	movs	r1, #32
 80085d6:	187b      	adds	r3, r7, r1
 80085d8:	2201      	movs	r2, #1
 80085da:	70da      	strb	r2, [r3, #3]
			abpLrWanVersion.Fields.Minor    = 0;
 80085dc:	187b      	adds	r3, r7, r1
 80085de:	2200      	movs	r2, #0
 80085e0:	709a      	strb	r2, [r3, #2]
			abpLrWanVersion.Fields.Revision = 3;
 80085e2:	187b      	adds	r3, r7, r1
 80085e4:	2203      	movs	r2, #3
 80085e6:	705a      	strb	r2, [r3, #1]
			abpLrWanVersion.Fields.Rfu      = 0;
 80085e8:	187b      	adds	r3, r7, r1
 80085ea:	2200      	movs	r2, #0
 80085ec:	701a      	strb	r2, [r3, #0]

			mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 80085ee:	2108      	movs	r1, #8
 80085f0:	187b      	adds	r3, r7, r1
 80085f2:	2230      	movs	r2, #48	; 0x30
 80085f4:	701a      	strb	r2, [r3, #0]
			mibReq.Param.AbpLrWanVersion = abpLrWanVersion;
 80085f6:	187b      	adds	r3, r7, r1
 80085f8:	6a3a      	ldr	r2, [r7, #32]
 80085fa:	605a      	str	r2, [r3, #4]
			LoRaMacMibSetRequestConfirm( &mibReq );
 80085fc:	187b      	adds	r3, r7, r1
 80085fe:	0018      	movs	r0, r3
 8008600:	f006 fba2 	bl	800ed48 <LoRaMacMibSetRequestConfirm>
			__loraWanState.joinState = LORAWAN_STATE_JOIN_SUCCESS;
 8008604:	4b19      	ldr	r3, [pc, #100]	; (800866c <lorawan_driver_LORA_Join+0x104>)
 8008606:	2203      	movs	r2, #3
 8008608:	701a      	strb	r2, [r3, #0]
			__loraWanState.joinTime = (uint32_t)(itsdk_time_get_ms()/1000);
 800860a:	f014 fd69 	bl	801d0e0 <itsdk_time_get_ms>
 800860e:	22fa      	movs	r2, #250	; 0xfa
 8008610:	0092      	lsls	r2, r2, #2
 8008612:	2300      	movs	r3, #0
 8008614:	f7f7 ff58 	bl	80004c8 <__aeabi_uldivmod>
 8008618:	0003      	movs	r3, r0
 800861a:	000c      	movs	r4, r1
 800861c:	001a      	movs	r2, r3
 800861e:	4b13      	ldr	r3, [pc, #76]	; (800866c <lorawan_driver_LORA_Join+0x104>)
 8008620:	605a      	str	r2, [r3, #4]


			lorawan_driver_onJoinSuccess();
 8008622:	f013 ff01 	bl	801c428 <lorawan_driver_onJoinSuccess>
    	}
        break;
 8008626:	e007      	b.n	8008638 <lorawan_driver_LORA_Join+0xd0>
    default:
		ITSDK_ERROR_REPORT(ITSDK_ERROR_LORAWAN_INVALID_JOIN,(uint16_t)__loraWanState.JoinType);
 8008628:	4b10      	ldr	r3, [pc, #64]	; (800866c <lorawan_driver_LORA_Join+0x104>)
 800862a:	7cdb      	ldrb	r3, [r3, #19]
 800862c:	b29b      	uxth	r3, r3
 800862e:	4a13      	ldr	r2, [pc, #76]	; (800867c <lorawan_driver_LORA_Join+0x114>)
 8008630:	0019      	movs	r1, r3
 8008632:	0010      	movs	r0, r2
 8008634:	f013 fa92 	bl	801bb5c <itsdk_error_report>
    }

    if (runMode==LORAWAN_RUN_SYNC) {
 8008638:	1dfb      	adds	r3, r7, #7
 800863a:	781b      	ldrb	r3, [r3, #0]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d110      	bne.n	8008662 <lorawan_driver_LORA_Join+0xfa>
        // Go for synchronous
    	while(__loraWanState.joinState == LORAWAN_STATE_JOINING) {
 8008640:	e001      	b.n	8008646 <lorawan_driver_LORA_Join+0xde>
    		lorawan_driver_waitUntilEndOfExecution();
 8008642:	f7ff fd9f 	bl	8008184 <lorawan_driver_waitUntilEndOfExecution>
    	while(__loraWanState.joinState == LORAWAN_STATE_JOINING) {
 8008646:	4b09      	ldr	r3, [pc, #36]	; (800866c <lorawan_driver_LORA_Join+0x104>)
 8008648:	781b      	ldrb	r3, [r3, #0]
 800864a:	b2db      	uxtb	r3, r3
 800864c:	2b02      	cmp	r3, #2
 800864e:	d0f8      	beq.n	8008642 <lorawan_driver_LORA_Join+0xda>
    	}
    	if ( __loraWanState.joinState == LORAWAN_STATE_JOIN_SUCCESS ) {
 8008650:	4b06      	ldr	r3, [pc, #24]	; (800866c <lorawan_driver_LORA_Join+0x104>)
 8008652:	781b      	ldrb	r3, [r3, #0]
 8008654:	b2db      	uxtb	r3, r3
 8008656:	2b03      	cmp	r3, #3
 8008658:	d101      	bne.n	800865e <lorawan_driver_LORA_Join+0xf6>
    		return LORAWAN_JOIN_SUCCESS;
 800865a:	2301      	movs	r3, #1
 800865c:	e002      	b.n	8008664 <lorawan_driver_LORA_Join+0xfc>
    	} else {
    		return LORAWAN_JOIN_FAILED;
 800865e:	2302      	movs	r3, #2
 8008660:	e000      	b.n	8008664 <lorawan_driver_LORA_Join+0xfc>
    	}
    } else {
    	return LORAWAN_JOIN_PENDING;
 8008662:	2300      	movs	r3, #0
    }

}
 8008664:	0018      	movs	r0, r3
 8008666:	46bd      	mov	sp, r7
 8008668:	b00e      	add	sp, #56	; 0x38
 800866a:	bdb0      	pop	{r4, r5, r7, pc}
 800866c:	2000032c 	.word	0x2000032c
 8008670:	20000340 	.word	0x20000340
 8008674:	20000348 	.word	0x20000348
 8008678:	20000374 	.word	0x20000374
 800867c:	d0000103 	.word	0xd0000103

08008680 <lorawan_driver_LORA_Send>:
		uint8_t					  retry,
		itsdk_lorawan_run_t 	  runMode,
		uint8_t					* rPort,				// for sync mode only - on reception - Port
		uint8_t					* rSize,				// for sync mode only - on reception - DataSize - contains maxSize on input
		uint8_t					* rData					// for sync mode only - on reception - Data (bcopied)
){
 8008680:	b5b0      	push	{r4, r5, r7, lr}
 8008682:	b08e      	sub	sp, #56	; 0x38
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
 8008688:	000c      	movs	r4, r1
 800868a:	0010      	movs	r0, r2
 800868c:	0019      	movs	r1, r3
 800868e:	1cfb      	adds	r3, r7, #3
 8008690:	1c22      	adds	r2, r4, #0
 8008692:	701a      	strb	r2, [r3, #0]
 8008694:	1cbb      	adds	r3, r7, #2
 8008696:	1c02      	adds	r2, r0, #0
 8008698:	701a      	strb	r2, [r3, #0]
 800869a:	1c7b      	adds	r3, r7, #1
 800869c:	1c0a      	adds	r2, r1, #0
 800869e:	701a      	strb	r2, [r3, #0]
	LOG_INFO_LORAWAN(("lorawan_driver_LORA_Send (mode:%d)\r\n",runMode));

    McpsReq_t mcpsReq;
    LoRaMacTxInfo_t txInfo;

    if (__loraWanState.joinState != LORAWAN_STATE_JOIN_SUCCESS ) return LORAWAN_SEND_NOT_JOINED;
 80086a0:	4b83      	ldr	r3, [pc, #524]	; (80088b0 <lorawan_driver_LORA_Send+0x230>)
 80086a2:	781b      	ldrb	r3, [r3, #0]
 80086a4:	b2db      	uxtb	r3, r3
 80086a6:	2b03      	cmp	r3, #3
 80086a8:	d001      	beq.n	80086ae <lorawan_driver_LORA_Send+0x2e>
 80086aa:	2306      	movs	r3, #6
 80086ac:	e0fc      	b.n	80088a8 <lorawan_driver_LORA_Send+0x228>
    if (__loraWanState.sendState == LORAWAN_SEND_STATE_RUNNING ) return LORAWAN_SEND_ALREADYRUNNING;
 80086ae:	4b80      	ldr	r3, [pc, #512]	; (80088b0 <lorawan_driver_LORA_Send+0x230>)
 80086b0:	785b      	ldrb	r3, [r3, #1]
 80086b2:	b2db      	uxtb	r3, r3
 80086b4:	2b01      	cmp	r3, #1
 80086b6:	d101      	bne.n	80086bc <lorawan_driver_LORA_Send+0x3c>
 80086b8:	2308      	movs	r3, #8
 80086ba:	e0f5      	b.n	80088a8 <lorawan_driver_LORA_Send+0x228>

    /*if certification test are on going, application data is not sent*/
    if (certif_running() == true) {
 80086bc:	f7ff fafc 	bl	8007cb8 <certif_running>
 80086c0:	1e03      	subs	r3, r0, #0
 80086c2:	d001      	beq.n	80086c8 <lorawan_driver_LORA_Send+0x48>
      return false;
 80086c4:	2300      	movs	r3, #0
 80086c6:	e0ef      	b.n	80088a8 <lorawan_driver_LORA_Send+0x228>
    }

    // Update the Datarate information this is important to correctly calculate the max size of frame
    // for the LoRaMacQueryTxPossible function
    MibRequestConfirm_t set;
    set.Type = MIB_CHANNELS_DATARATE;
 80086c8:	2408      	movs	r4, #8
 80086ca:	193b      	adds	r3, r7, r4
 80086cc:	2228      	movs	r2, #40	; 0x28
 80086ce:	701a      	strb	r2, [r3, #0]
    set.Param.ChannelsDatarate = __convertDR(dataRate);
 80086d0:	1c7b      	adds	r3, r7, #1
 80086d2:	781b      	ldrb	r3, [r3, #0]
 80086d4:	0018      	movs	r0, r3
 80086d6:	f7ff fdbb 	bl	8008250 <__convertDR>
 80086da:	0003      	movs	r3, r0
 80086dc:	b25a      	sxtb	r2, r3
 80086de:	193b      	adds	r3, r7, r4
 80086e0:	711a      	strb	r2, [r3, #4]
    LoRaMacMibSetRequestConfirm(&set);
 80086e2:	193b      	adds	r3, r7, r4
 80086e4:	0018      	movs	r0, r3
 80086e6:	f006 fb2f 	bl	800ed48 <LoRaMacMibSetRequestConfirm>

    // Verify if a command can be proceed by the MAC Layer
    if( LoRaMacQueryTxPossible( size, &txInfo ) != LORAMAC_STATUS_OK ) {
 80086ea:	2320      	movs	r3, #32
 80086ec:	18fa      	adds	r2, r7, r3
 80086ee:	1cfb      	adds	r3, r7, #3
 80086f0:	781b      	ldrb	r3, [r3, #0]
 80086f2:	0011      	movs	r1, r2
 80086f4:	0018      	movs	r0, r3
 80086f6:	f006 f921 	bl	800e93c <LoRaMacQueryTxPossible>
 80086fa:	1e03      	subs	r3, r0, #0
 80086fc:	d013      	beq.n	8008726 <lorawan_driver_LORA_Send+0xa6>
        // Send empty frame in order to flush MAC commands
        mcpsReq.Type = MCPS_UNCONFIRMED;
 80086fe:	2424      	movs	r4, #36	; 0x24
 8008700:	193b      	adds	r3, r7, r4
 8008702:	2200      	movs	r2, #0
 8008704:	701a      	strb	r2, [r3, #0]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 8008706:	193b      	adds	r3, r7, r4
 8008708:	2200      	movs	r2, #0
 800870a:	609a      	str	r2, [r3, #8]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800870c:	193b      	adds	r3, r7, r4
 800870e:	2200      	movs	r2, #0
 8008710:	819a      	strh	r2, [r3, #12]
        mcpsReq.Req.Unconfirmed.Datarate = __convertDR(dataRate);
 8008712:	1c7b      	adds	r3, r7, #1
 8008714:	781b      	ldrb	r3, [r3, #0]
 8008716:	0018      	movs	r0, r3
 8008718:	f7ff fd9a 	bl	8008250 <__convertDR>
 800871c:	0003      	movs	r3, r0
 800871e:	b25a      	sxtb	r2, r3
 8008720:	193b      	adds	r3, r7, r4
 8008722:	739a      	strb	r2, [r3, #14]
 8008724:	e03f      	b.n	80087a6 <lorawan_driver_LORA_Send+0x126>
        // @TODO here we do not send the expected payload so we may have a callback to notice this
		#warning "Manage the Flush MAC case"
    } else {
    	__loraWanState.lastRetries = 0;
 8008726:	4b62      	ldr	r3, [pc, #392]	; (80088b0 <lorawan_driver_LORA_Send+0x230>)
 8008728:	2200      	movs	r2, #0
 800872a:	745a      	strb	r2, [r3, #17]
    	// Ok To proceed
        if( isTxConfirmed == LORAWAN_SEND_UNCONFIRMED )
 800872c:	2348      	movs	r3, #72	; 0x48
 800872e:	18fb      	adds	r3, r7, r3
 8008730:	781b      	ldrb	r3, [r3, #0]
 8008732:	2b01      	cmp	r3, #1
 8008734:	d119      	bne.n	800876a <lorawan_driver_LORA_Send+0xea>
        {
            mcpsReq.Type = MCPS_UNCONFIRMED;
 8008736:	2424      	movs	r4, #36	; 0x24
 8008738:	193b      	adds	r3, r7, r4
 800873a:	2200      	movs	r2, #0
 800873c:	701a      	strb	r2, [r3, #0]
            mcpsReq.Req.Unconfirmed.fPort = port;
 800873e:	193b      	adds	r3, r7, r4
 8008740:	1cba      	adds	r2, r7, #2
 8008742:	7812      	ldrb	r2, [r2, #0]
 8008744:	711a      	strb	r2, [r3, #4]
            mcpsReq.Req.Unconfirmed.fBufferSize = size;
 8008746:	1cfb      	adds	r3, r7, #3
 8008748:	781b      	ldrb	r3, [r3, #0]
 800874a:	b29a      	uxth	r2, r3
 800874c:	193b      	adds	r3, r7, r4
 800874e:	819a      	strh	r2, [r3, #12]
            mcpsReq.Req.Unconfirmed.fBuffer = payload;
 8008750:	193b      	adds	r3, r7, r4
 8008752:	687a      	ldr	r2, [r7, #4]
 8008754:	609a      	str	r2, [r3, #8]
            mcpsReq.Req.Unconfirmed.Datarate = __convertDR(dataRate);
 8008756:	1c7b      	adds	r3, r7, #1
 8008758:	781b      	ldrb	r3, [r3, #0]
 800875a:	0018      	movs	r0, r3
 800875c:	f7ff fd78 	bl	8008250 <__convertDR>
 8008760:	0003      	movs	r3, r0
 8008762:	b25a      	sxtb	r2, r3
 8008764:	193b      	adds	r3, r7, r4
 8008766:	739a      	strb	r2, [r3, #14]
 8008768:	e01d      	b.n	80087a6 <lorawan_driver_LORA_Send+0x126>
        }
        else
        {
        	mcpsReq.Type = MCPS_CONFIRMED;
 800876a:	2424      	movs	r4, #36	; 0x24
 800876c:	193b      	adds	r3, r7, r4
 800876e:	2201      	movs	r2, #1
 8008770:	701a      	strb	r2, [r3, #0]
            mcpsReq.Req.Confirmed.fPort = port;
 8008772:	193b      	adds	r3, r7, r4
 8008774:	1cba      	adds	r2, r7, #2
 8008776:	7812      	ldrb	r2, [r2, #0]
 8008778:	711a      	strb	r2, [r3, #4]
            mcpsReq.Req.Confirmed.fBufferSize = size;
 800877a:	1cfb      	adds	r3, r7, #3
 800877c:	781b      	ldrb	r3, [r3, #0]
 800877e:	b29a      	uxth	r2, r3
 8008780:	193b      	adds	r3, r7, r4
 8008782:	819a      	strh	r2, [r3, #12]
            mcpsReq.Req.Confirmed.fBuffer = payload;
 8008784:	193b      	adds	r3, r7, r4
 8008786:	687a      	ldr	r2, [r7, #4]
 8008788:	609a      	str	r2, [r3, #8]
            mcpsReq.Req.Confirmed.NbTrials = retry;
 800878a:	193b      	adds	r3, r7, r4
 800878c:	224c      	movs	r2, #76	; 0x4c
 800878e:	18ba      	adds	r2, r7, r2
 8008790:	7812      	ldrb	r2, [r2, #0]
 8008792:	73da      	strb	r2, [r3, #15]
            mcpsReq.Req.Confirmed.Datarate = __convertDR(dataRate);
 8008794:	1c7b      	adds	r3, r7, #1
 8008796:	781b      	ldrb	r3, [r3, #0]
 8008798:	0018      	movs	r0, r3
 800879a:	f7ff fd59 	bl	8008250 <__convertDR>
 800879e:	0003      	movs	r3, r0
 80087a0:	b25a      	sxtb	r2, r3
 80087a2:	193b      	adds	r3, r7, r4
 80087a4:	739a      	strb	r2, [r3, #14]
        }
    }
    __loraWanState.sendState = LORAWAN_SEND_STATE_RUNNING;
 80087a6:	4b42      	ldr	r3, [pc, #264]	; (80088b0 <lorawan_driver_LORA_Send+0x230>)
 80087a8:	2201      	movs	r2, #1
 80087aa:	705a      	strb	r2, [r3, #1]
    LoRaMacStatus_t r = LoRaMacMcpsRequest( &mcpsReq );
 80087ac:	2537      	movs	r5, #55	; 0x37
 80087ae:	197c      	adds	r4, r7, r5
 80087b0:	2324      	movs	r3, #36	; 0x24
 80087b2:	18fb      	adds	r3, r7, r3
 80087b4:	0018      	movs	r0, r3
 80087b6:	f007 f8f1 	bl	800f99c <LoRaMacMcpsRequest>
 80087ba:	0003      	movs	r3, r0
 80087bc:	7023      	strb	r3, [r4, #0]
    switch ( r ) {
 80087be:	197b      	adds	r3, r7, r5
 80087c0:	781b      	ldrb	r3, [r3, #0]
 80087c2:	2b07      	cmp	r3, #7
 80087c4:	d100      	bne.n	80087c8 <lorawan_driver_LORA_Send+0x148>
 80087c6:	e066      	b.n	8008896 <lorawan_driver_LORA_Send+0x216>
 80087c8:	2b0b      	cmp	r3, #11
 80087ca:	d05f      	beq.n	800888c <lorawan_driver_LORA_Send+0x20c>
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d000      	beq.n	80087d2 <lorawan_driver_LORA_Send+0x152>
 80087d0:	e066      	b.n	80088a0 <lorawan_driver_LORA_Send+0x220>
    	case LORAMAC_STATUS_OK:
    		if ( runMode==LORAWAN_RUN_SYNC ) {
 80087d2:	2350      	movs	r3, #80	; 0x50
 80087d4:	18fb      	adds	r3, r7, r3
 80087d6:	781b      	ldrb	r3, [r3, #0]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d155      	bne.n	8008888 <lorawan_driver_LORA_Send+0x208>
    	    	while(  __loraWanState.sendState == LORAWAN_SEND_STATE_RUNNING ) {
 80087dc:	e001      	b.n	80087e2 <lorawan_driver_LORA_Send+0x162>
    	    		lorawan_driver_waitUntilEndOfExecution();
 80087de:	f7ff fcd1 	bl	8008184 <lorawan_driver_waitUntilEndOfExecution>
    	    	while(  __loraWanState.sendState == LORAWAN_SEND_STATE_RUNNING ) {
 80087e2:	4b33      	ldr	r3, [pc, #204]	; (80088b0 <lorawan_driver_LORA_Send+0x230>)
 80087e4:	785b      	ldrb	r3, [r3, #1]
 80087e6:	b2db      	uxtb	r3, r3
 80087e8:	2b01      	cmp	r3, #1
 80087ea:	d0f8      	beq.n	80087de <lorawan_driver_LORA_Send+0x15e>
    	    	}
    	    	switch(__loraWanState.sendState) {
 80087ec:	4b30      	ldr	r3, [pc, #192]	; (80088b0 <lorawan_driver_LORA_Send+0x230>)
 80087ee:	785b      	ldrb	r3, [r3, #1]
 80087f0:	b2db      	uxtb	r3, r3
 80087f2:	2b07      	cmp	r3, #7
 80087f4:	d846      	bhi.n	8008884 <lorawan_driver_LORA_Send+0x204>
 80087f6:	009a      	lsls	r2, r3, #2
 80087f8:	4b2e      	ldr	r3, [pc, #184]	; (80088b4 <lorawan_driver_LORA_Send+0x234>)
 80087fa:	18d3      	adds	r3, r2, r3
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	469f      	mov	pc, r3
    	    	case LORAWAN_SEND_STATE_SENT:
    	    		return LORAWAN_SEND_SENT;
 8008800:	2301      	movs	r3, #1
 8008802:	e051      	b.n	80088a8 <lorawan_driver_LORA_Send+0x228>
    	    	case LORAWAN_SEND_STATE_ACKED_WITH_DOWNLINK:
    	    	case LORAWAN_SEND_STATE_ACKED_DOWNLINK_PENDING:
    	    		if ( rData != NULL && rPort != NULL && rSize != NULL) {
 8008804:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008806:	2b00      	cmp	r3, #0
 8008808:	d02f      	beq.n	800886a <lorawan_driver_LORA_Send+0x1ea>
 800880a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800880c:	2b00      	cmp	r3, #0
 800880e:	d02c      	beq.n	800886a <lorawan_driver_LORA_Send+0x1ea>
 8008810:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008812:	2b00      	cmp	r3, #0
 8008814:	d029      	beq.n	800886a <lorawan_driver_LORA_Send+0x1ea>
						*rPort = __lorawan_driver_lastDownlink.port;
 8008816:	4b28      	ldr	r3, [pc, #160]	; (80088b8 <lorawan_driver_LORA_Send+0x238>)
 8008818:	781a      	ldrb	r2, [r3, #0]
 800881a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800881c:	701a      	strb	r2, [r3, #0]
						if ( *rSize >= __lorawan_driver_lastDownlink.size) {
 800881e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008820:	781a      	ldrb	r2, [r3, #0]
 8008822:	4b25      	ldr	r3, [pc, #148]	; (80088b8 <lorawan_driver_LORA_Send+0x238>)
 8008824:	785b      	ldrb	r3, [r3, #1]
 8008826:	429a      	cmp	r2, r3
 8008828:	d313      	bcc.n	8008852 <lorawan_driver_LORA_Send+0x1d2>
							*rSize = __lorawan_driver_lastDownlink.size;
 800882a:	4b23      	ldr	r3, [pc, #140]	; (80088b8 <lorawan_driver_LORA_Send+0x238>)
 800882c:	785a      	ldrb	r2, [r3, #1]
 800882e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008830:	701a      	strb	r2, [r3, #0]
							bcopy(
								__lorawan_driver_lastDownlink.data,
								rData,
								((ITSDK_LORAWAN_MAX_DWNLNKSZ<__lorawan_driver_lastDownlink.size)?ITSDK_LORAWAN_MAX_DWNLNKSZ:__lorawan_driver_lastDownlink.size)
 8008832:	4b21      	ldr	r3, [pc, #132]	; (80088b8 <lorawan_driver_LORA_Send+0x238>)
 8008834:	785b      	ldrb	r3, [r3, #1]
 8008836:	1c1a      	adds	r2, r3, #0
 8008838:	b2d3      	uxtb	r3, r2
 800883a:	2b20      	cmp	r3, #32
 800883c:	d901      	bls.n	8008842 <lorawan_driver_LORA_Send+0x1c2>
 800883e:	2320      	movs	r3, #32
 8008840:	1c1a      	adds	r2, r3, #0
 8008842:	b2d3      	uxtb	r3, r2
							bcopy(
 8008844:	001a      	movs	r2, r3
 8008846:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8008848:	4b1c      	ldr	r3, [pc, #112]	; (80088bc <lorawan_driver_LORA_Send+0x23c>)
 800884a:	0018      	movs	r0, r3
 800884c:	f016 fc25 	bl	801f09a <bcopy>
 8008850:	e00b      	b.n	800886a <lorawan_driver_LORA_Send+0x1ea>
							);
						} else {
							bcopy(
								__lorawan_driver_lastDownlink.data,
								rData,
								*rSize
 8008852:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008854:	781b      	ldrb	r3, [r3, #0]
							bcopy(
 8008856:	001a      	movs	r2, r3
 8008858:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800885a:	4b18      	ldr	r3, [pc, #96]	; (80088bc <lorawan_driver_LORA_Send+0x23c>)
 800885c:	0018      	movs	r0, r3
 800885e:	f016 fc1c 	bl	801f09a <bcopy>
							);
							*rSize = __lorawan_driver_lastDownlink.size;
 8008862:	4b15      	ldr	r3, [pc, #84]	; (80088b8 <lorawan_driver_LORA_Send+0x238>)
 8008864:	785a      	ldrb	r2, [r3, #1]
 8008866:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008868:	701a      	strb	r2, [r3, #0]
						}
    	    		} else {
    	    			LOG_WARN_LORAWAN(("[LoRaWan] Receiving downlink but can't return it\r\n"));
    	    		}
    	    		return (__loraWanState.sendState ==LORAWAN_SEND_STATE_ACKED_WITH_DOWNLINK)?LORAWAN_SEND_ACKED_WITH_DOWNLINK:LORAWAN_SEND_ACKED_WITH_DOWNLINK_PENDING;
 800886a:	4b11      	ldr	r3, [pc, #68]	; (80088b0 <lorawan_driver_LORA_Send+0x230>)
 800886c:	785b      	ldrb	r3, [r3, #1]
 800886e:	b2db      	uxtb	r3, r3
 8008870:	2b05      	cmp	r3, #5
 8008872:	d101      	bne.n	8008878 <lorawan_driver_LORA_Send+0x1f8>
 8008874:	2303      	movs	r3, #3
 8008876:	e017      	b.n	80088a8 <lorawan_driver_LORA_Send+0x228>
 8008878:	2304      	movs	r3, #4
 800887a:	e015      	b.n	80088a8 <lorawan_driver_LORA_Send+0x228>
    	    	case LORAWAN_SEND_STATE_ACKED_NO_DOWNLINK:
    	    		return LORAWAN_SEND_ACKED;
 800887c:	2302      	movs	r3, #2
 800887e:	e013      	b.n	80088a8 <lorawan_driver_LORA_Send+0x228>
    	    	case LORAWAN_SEND_STATE_NOTACKED:
    	    		return LORAWAN_SEND_SENT;
 8008880:	2301      	movs	r3, #1
 8008882:	e011      	b.n	80088a8 <lorawan_driver_LORA_Send+0x228>
    	    	default:
    	    		LOG_INFO_LORAWAN(("Abnormal state : %d\r\n",__loraWanState.sendState));
    	    		return LORAWAN_SEND_FAILED;
 8008884:	2309      	movs	r3, #9
 8008886:	e00f      	b.n	80088a8 <lorawan_driver_LORA_Send+0x228>
    	    	}
   	    		return LORAWAN_SEND_FAILED;	// Never reached
    		} else {
    			return LORAWAN_SEND_RUNNING;
 8008888:	2305      	movs	r3, #5
 800888a:	e00d      	b.n	80088a8 <lorawan_driver_LORA_Send+0x228>
    		}
    	case LORAMAC_STATUS_DUTYCYCLE_RESTRICTED:
    		__loraWanState.sendState = LORAWAN_SEND_STATE_DUTYCYCLE;
 800888c:	4b08      	ldr	r3, [pc, #32]	; (80088b0 <lorawan_driver_LORA_Send+0x230>)
 800888e:	2209      	movs	r2, #9
 8008890:	705a      	strb	r2, [r3, #1]
    		return LORAWAN_SEND_DUTYCYCLE;
 8008892:	2307      	movs	r3, #7
 8008894:	e008      	b.n	80088a8 <lorawan_driver_LORA_Send+0x228>
    	case LORAMAC_STATUS_NO_NETWORK_JOINED:
    		__loraWanState.sendState = LORAWAN_SEND_STATE_FAILED;
 8008896:	4b06      	ldr	r3, [pc, #24]	; (80088b0 <lorawan_driver_LORA_Send+0x230>)
 8008898:	2208      	movs	r2, #8
 800889a:	705a      	strb	r2, [r3, #1]
    		return LORAWAN_SEND_NOT_JOINED;
 800889c:	2306      	movs	r3, #6
 800889e:	e003      	b.n	80088a8 <lorawan_driver_LORA_Send+0x228>
    	default:
    		__loraWanState.sendState = LORAWAN_SEND_STATE_FAILED;
 80088a0:	4b03      	ldr	r3, [pc, #12]	; (80088b0 <lorawan_driver_LORA_Send+0x230>)
 80088a2:	2208      	movs	r2, #8
 80088a4:	705a      	strb	r2, [r3, #1]
    		LOG_WARN_LORAWAN(("[LoRaWan] can't send err(%d)\r\n",r));
    		return LORAWAN_SEND_FAILED;
 80088a6:	2309      	movs	r3, #9
    }

}
 80088a8:	0018      	movs	r0, r3
 80088aa:	46bd      	mov	sp, r7
 80088ac:	b00e      	add	sp, #56	; 0x38
 80088ae:	bdb0      	pop	{r4, r5, r7, pc}
 80088b0:	2000032c 	.word	0x2000032c
 80088b4:	08021468 	.word	0x08021468
 80088b8:	20000350 	.word	0x20000350
 80088bc:	20000352 	.word	0x20000352

080088c0 <lorawan_driver_LORA_AddChannel>:
		uint32_t 	frequency,
		uint32_t	rx1Frequency,
		uint8_t		minDataRate,
		uint8_t		maxDataRate,
		uint8_t		band
){
 80088c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80088c2:	b089      	sub	sp, #36	; 0x24
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	60b9      	str	r1, [r7, #8]
 80088c8:	607a      	str	r2, [r7, #4]
 80088ca:	0019      	movs	r1, r3
 80088cc:	260f      	movs	r6, #15
 80088ce:	19bb      	adds	r3, r7, r6
 80088d0:	1c02      	adds	r2, r0, #0
 80088d2:	701a      	strb	r2, [r3, #0]
 80088d4:	200e      	movs	r0, #14
 80088d6:	183b      	adds	r3, r7, r0
 80088d8:	1c0a      	adds	r2, r1, #0
 80088da:	701a      	strb	r2, [r3, #0]
	LOG_INFO_LORAWAN(("lorawan_driver_LORA_AddChannel (%d)\r\n",channelId));

	ChannelParams_t params;
	params.Frequency=frequency;
 80088dc:	2410      	movs	r4, #16
 80088de:	193b      	adds	r3, r7, r4
 80088e0:	68ba      	ldr	r2, [r7, #8]
 80088e2:	601a      	str	r2, [r3, #0]
	params.Rx1Frequency=rx1Frequency;
 80088e4:	193b      	adds	r3, r7, r4
 80088e6:	687a      	ldr	r2, [r7, #4]
 80088e8:	605a      	str	r2, [r3, #4]
	params.Band=band;					// Sounds like this parameter is completed during initialization
 80088ea:	193b      	adds	r3, r7, r4
 80088ec:	2234      	movs	r2, #52	; 0x34
 80088ee:	2108      	movs	r1, #8
 80088f0:	468c      	mov	ip, r1
 80088f2:	44bc      	add	ip, r7
 80088f4:	4462      	add	r2, ip
 80088f6:	7812      	ldrb	r2, [r2, #0]
 80088f8:	725a      	strb	r2, [r3, #9]
										// Band definitions are in the different RegionXXMMM.h file
										// This entry is the index in the band definition
	params.DrRange.Fields.Min=__convertDR(minDataRate);
 80088fa:	183b      	adds	r3, r7, r0
 80088fc:	781b      	ldrb	r3, [r3, #0]
 80088fe:	0018      	movs	r0, r3
 8008900:	f7ff fca6 	bl	8008250 <__convertDR>
 8008904:	0003      	movs	r3, r0
 8008906:	011b      	lsls	r3, r3, #4
 8008908:	b25b      	sxtb	r3, r3
 800890a:	111b      	asrs	r3, r3, #4
 800890c:	b25a      	sxtb	r2, r3
 800890e:	193b      	adds	r3, r7, r4
 8008910:	1c11      	adds	r1, r2, #0
 8008912:	220f      	movs	r2, #15
 8008914:	0008      	movs	r0, r1
 8008916:	4010      	ands	r0, r2
 8008918:	7a1a      	ldrb	r2, [r3, #8]
 800891a:	210f      	movs	r1, #15
 800891c:	438a      	bics	r2, r1
 800891e:	1c11      	adds	r1, r2, #0
 8008920:	1c02      	adds	r2, r0, #0
 8008922:	430a      	orrs	r2, r1
 8008924:	721a      	strb	r2, [r3, #8]
	params.DrRange.Fields.Max=__convertDR(maxDataRate);
 8008926:	2330      	movs	r3, #48	; 0x30
 8008928:	2208      	movs	r2, #8
 800892a:	4694      	mov	ip, r2
 800892c:	44bc      	add	ip, r7
 800892e:	4463      	add	r3, ip
 8008930:	781b      	ldrb	r3, [r3, #0]
 8008932:	0018      	movs	r0, r3
 8008934:	f7ff fc8c 	bl	8008250 <__convertDR>
 8008938:	0003      	movs	r3, r0
 800893a:	011b      	lsls	r3, r3, #4
 800893c:	b25b      	sxtb	r3, r3
 800893e:	111b      	asrs	r3, r3, #4
 8008940:	b25a      	sxtb	r2, r3
 8008942:	0025      	movs	r5, r4
 8008944:	193b      	adds	r3, r7, r4
 8008946:	0110      	lsls	r0, r2, #4
 8008948:	7a1a      	ldrb	r2, [r3, #8]
 800894a:	210f      	movs	r1, #15
 800894c:	400a      	ands	r2, r1
 800894e:	1c11      	adds	r1, r2, #0
 8008950:	1c02      	adds	r2, r0, #0
 8008952:	430a      	orrs	r2, r1
 8008954:	721a      	strb	r2, [r3, #8]

	LoRaMacStatus_t r = LoRaMacChannelAdd(channelId, params);
 8008956:	231f      	movs	r3, #31
 8008958:	18fc      	adds	r4, r7, r3
 800895a:	197b      	adds	r3, r7, r5
 800895c:	19ba      	adds	r2, r7, r6
 800895e:	7810      	ldrb	r0, [r2, #0]
 8008960:	6819      	ldr	r1, [r3, #0]
 8008962:	685a      	ldr	r2, [r3, #4]
 8008964:	689b      	ldr	r3, [r3, #8]
 8008966:	f006 fe6f 	bl	800f648 <LoRaMacChannelAdd>
 800896a:	0003      	movs	r3, r0
 800896c:	7023      	strb	r3, [r4, #0]
	switch ( r ) {
 800896e:	231f      	movs	r3, #31
 8008970:	18fb      	adds	r3, r7, r3
 8008972:	781b      	ldrb	r3, [r3, #0]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d004      	beq.n	8008982 <lorawan_driver_LORA_AddChannel+0xc2>
 8008978:	db07      	blt.n	800898a <lorawan_driver_LORA_AddChannel+0xca>
 800897a:	3b03      	subs	r3, #3
 800897c:	2b03      	cmp	r3, #3
 800897e:	d804      	bhi.n	800898a <lorawan_driver_LORA_AddChannel+0xca>
 8008980:	e001      	b.n	8008986 <lorawan_driver_LORA_AddChannel+0xc6>
		case LORAMAC_STATUS_OK:
			return LORAWAN_CHANNEL_SUCCESS;
 8008982:	2300      	movs	r3, #0
 8008984:	e002      	b.n	800898c <lorawan_driver_LORA_AddChannel+0xcc>
		case LORAMAC_STATUS_PARAMETER_INVALID:
		case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
		case LORAMAC_STATUS_DATARATE_INVALID:
		case LORAMAC_STATUS_FREQUENCY_INVALID:
			LOG_WARN_LORAWAN(("[LoRaWan] Invalid channel configuration (%d)\r\n",r));
			return LORAWAN_CHANNEL_INVALID_PARAMS;
 8008986:	2301      	movs	r3, #1
 8008988:	e000      	b.n	800898c <lorawan_driver_LORA_AddChannel+0xcc>
		default:
			LOG_WARN_LORAWAN(("[LoRaWan] Channel configuration error (%d)\r\n",r));
			return LORAWAN_CHANNEL_FAILED;
 800898a:	2302      	movs	r3, #2
	}
}
 800898c:	0018      	movs	r0, r3
 800898e:	46bd      	mov	sp, r7
 8008990:	b009      	add	sp, #36	; 0x24
 8008992:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008994 <lorawan_driver_LORA_SelectChannels>:
 * Change channel mask to enable only the one we need
 * The channels parameter is a table containing x time 16b corresponding
 * to the possible channels
 * for US915 as an example we have 6 entries of 16b in the tab for the 72 possible channels
 */
itsdk_lorawan_channel_t lorawan_driver_LORA_SelectChannels(uint16_t region, uint16_t * channels ){
 8008994:	b580      	push	{r7, lr}
 8008996:	b084      	sub	sp, #16
 8008998:	af00      	add	r7, sp, #0
 800899a:	0002      	movs	r2, r0
 800899c:	6039      	str	r1, [r7, #0]
 800899e:	1dbb      	adds	r3, r7, #6
 80089a0:	801a      	strh	r2, [r3, #0]
	LOG_INFO_LORAWAN(("lorawan_driver_LORA_SelectChannels (%d)\r\n",region));
	ChanMaskSetParams_t chanMaskSet;
	chanMaskSet.ChannelsMaskType = CHANNELS_REINIT_MASK;
 80089a2:	2108      	movs	r1, #8
 80089a4:	187b      	adds	r3, r7, r1
 80089a6:	2202      	movs	r2, #2
 80089a8:	711a      	strb	r2, [r3, #4]
	chanMaskSet.ChannelsMaskIn = channels;
 80089aa:	187b      	adds	r3, r7, r1
 80089ac:	683a      	ldr	r2, [r7, #0]
 80089ae:	601a      	str	r2, [r3, #0]
	switch ( region ) {
 80089b0:	1dbb      	adds	r3, r7, #6
 80089b2:	881a      	ldrh	r2, [r3, #0]
 80089b4:	2380      	movs	r3, #128	; 0x80
 80089b6:	005b      	lsls	r3, r3, #1
 80089b8:	429a      	cmp	r2, r3
 80089ba:	d000      	beq.n	80089be <lorawan_driver_LORA_SelectChannels+0x2a>
		if ( RegionChanMaskSet(LORAMAC_REGION_US915,&chanMaskSet) ) {
			return LORAWAN_CHANNEL_SUCCESS;
		}
		break;
	default:
		break;
 80089bc:	e00a      	b.n	80089d4 <lorawan_driver_LORA_SelectChannels+0x40>
		if ( RegionChanMaskSet(LORAMAC_REGION_US915,&chanMaskSet) ) {
 80089be:	2308      	movs	r3, #8
 80089c0:	18fb      	adds	r3, r7, r3
 80089c2:	0019      	movs	r1, r3
 80089c4:	2008      	movs	r0, #8
 80089c6:	f00a faef 	bl	8012fa8 <RegionChanMaskSet>
 80089ca:	1e03      	subs	r3, r0, #0
 80089cc:	d001      	beq.n	80089d2 <lorawan_driver_LORA_SelectChannels+0x3e>
			return LORAWAN_CHANNEL_SUCCESS;
 80089ce:	2300      	movs	r3, #0
 80089d0:	e001      	b.n	80089d6 <lorawan_driver_LORA_SelectChannels+0x42>
		break;
 80089d2:	46c0      	nop			; (mov r8, r8)
	}
	LOG_WARN_LORAWAN(("[LoRaWan] Channel configuration error\r\n"));
	return LORAWAN_CHANNEL_FAILED;
 80089d4:	2302      	movs	r3, #2
}
 80089d6:	0018      	movs	r0, r3
 80089d8:	46bd      	mov	sp, r7
 80089da:	b004      	add	sp, #16
 80089dc:	bd80      	pop	{r7, pc}
	...

080089e0 <lorawan_driver_LORA_getJoinState>:

/**
 * Return the current JoinState - use to follow the async join procedure
 * if used in polling mode
 */
lorawan_driver_joinState lorawan_driver_LORA_getJoinState(){
 80089e0:	b580      	push	{r7, lr}
 80089e2:	af00      	add	r7, sp, #0
	LOG_DEBUG_LORAWAN(("lorawan_driver_LORA_getJoinState\r\n"));
	return __loraWanState.joinState;
 80089e4:	4b02      	ldr	r3, [pc, #8]	; (80089f0 <lorawan_driver_LORA_getJoinState+0x10>)
 80089e6:	781b      	ldrb	r3, [r3, #0]
 80089e8:	b2db      	uxtb	r3, r3
}
 80089ea:	0018      	movs	r0, r3
 80089ec:	46bd      	mov	sp, r7
 80089ee:	bd80      	pop	{r7, pc}
 80089f0:	2000032c 	.word	0x2000032c

080089f4 <McpsConfirm>:
// MCPS ( TX & RX Operations ) LAYER
// =============================================================================================


static void McpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b082      	sub	sp, #8
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]

    TVL2( PRINTNOW(); PRINTF("APP> McpsConfirm STATUS: %s\r\n", EventInfoStatusStrings[mcpsConfirm->Status] ); )

	switch (mcpsConfirm->Status){
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	785b      	ldrb	r3, [r3, #1]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d002      	beq.n	8008a0a <McpsConfirm+0x16>
 8008a04:	2b04      	cmp	r3, #4
 8008a06:	d028      	beq.n	8008a5a <McpsConfirm+0x66>
 8008a08:	e02f      	b.n	8008a6a <McpsConfirm+0x76>
	case LORAMAC_EVENT_INFO_STATUS_OK:
        switch( mcpsConfirm->McpsRequest )
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	781b      	ldrb	r3, [r3, #0]
 8008a0e:	2b01      	cmp	r3, #1
 8008a10:	d009      	beq.n	8008a26 <McpsConfirm+0x32>
 8008a12:	2b03      	cmp	r3, #3
 8008a14:	d018      	beq.n	8008a48 <McpsConfirm+0x54>
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d11a      	bne.n	8008a50 <McpsConfirm+0x5c>
        {
            case MCPS_UNCONFIRMED:
            {
                // Check Datarate
                // Check TxPower
            	__loraWanState.sendState = LORAWAN_SEND_STATE_SENT;
 8008a1a:	4b1c      	ldr	r3, [pc, #112]	; (8008a8c <McpsConfirm+0x98>)
 8008a1c:	2202      	movs	r2, #2
 8008a1e:	705a      	strb	r2, [r3, #1]
            	lorawan_driver_onSendSuccess();
 8008a20:	f013 fd9a 	bl	801c558 <lorawan_driver_onSendSuccess>
                break;
 8008a24:	e018      	b.n	8008a58 <McpsConfirm+0x64>
            case MCPS_CONFIRMED:
            {
                // Check Datarate
                // Check TxPower
                // Check AckReceived
            	if(mcpsConfirm->AckReceived){
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	791b      	ldrb	r3, [r3, #4]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d004      	beq.n	8008a38 <McpsConfirm+0x44>
            		// There are two type of ACK : w & w/o downlink, we will set the status later in the MLME layer
                	//__loraWanState.sendState = LORAWAN_SEND_STATE_ACKED;
                	lorawan_driver_onSendSuccess();
 8008a2e:	f013 fd93 	bl	801c558 <lorawan_driver_onSendSuccess>
                	lorawan_driver_onSendAckSuccess();
 8008a32:	f013 fd7f 	bl	801c534 <lorawan_driver_onSendAckSuccess>
                	__loraWanState.sendState = LORAWAN_SEND_STATE_NOTACKED;
                	lorawan_driver_onSendSuccess();
                	lorawan_driver_onSendSuccessAckFailed();
            	}
                // Check NbTrials
                break;
 8008a36:	e00f      	b.n	8008a58 <McpsConfirm+0x64>
                	__loraWanState.sendState = LORAWAN_SEND_STATE_NOTACKED;
 8008a38:	4b14      	ldr	r3, [pc, #80]	; (8008a8c <McpsConfirm+0x98>)
 8008a3a:	2207      	movs	r2, #7
 8008a3c:	705a      	strb	r2, [r3, #1]
                	lorawan_driver_onSendSuccess();
 8008a3e:	f013 fd8b 	bl	801c558 <lorawan_driver_onSendSuccess>
                	lorawan_driver_onSendSuccessAckFailed();
 8008a42:	f013 fd65 	bl	801c510 <lorawan_driver_onSendSuccessAckFailed>
                break;
 8008a46:	e007      	b.n	8008a58 <McpsConfirm+0x64>
            }
            case MCPS_PROPRIETARY:
            {
            	__loraWanState.sendState = LORAWAN_SEND_STATE_NONE;
 8008a48:	4b10      	ldr	r3, [pc, #64]	; (8008a8c <McpsConfirm+0x98>)
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	705a      	strb	r2, [r3, #1]
            	break;
 8008a4e:	e003      	b.n	8008a58 <McpsConfirm+0x64>
            }
            default:
            	__loraWanState.sendState = LORAWAN_SEND_STATE_FAILED;
 8008a50:	4b0e      	ldr	r3, [pc, #56]	; (8008a8c <McpsConfirm+0x98>)
 8008a52:	2208      	movs	r2, #8
 8008a54:	705a      	strb	r2, [r3, #1]
                break;
 8008a56:	46c0      	nop			; (mov r8, r8)
        }
        break;
 8008a58:	e00a      	b.n	8008a70 <McpsConfirm+0x7c>
    case LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT:
    	__loraWanState.sendState = LORAWAN_SEND_STATE_NOTACKED;
 8008a5a:	4b0c      	ldr	r3, [pc, #48]	; (8008a8c <McpsConfirm+0x98>)
 8008a5c:	2207      	movs	r2, #7
 8008a5e:	705a      	strb	r2, [r3, #1]
    	lorawan_driver_onSendSuccess();
 8008a60:	f013 fd7a 	bl	801c558 <lorawan_driver_onSendSuccess>
    	lorawan_driver_onSendSuccessAckFailed();
 8008a64:	f013 fd54 	bl	801c510 <lorawan_driver_onSendSuccessAckFailed>
    	break;
 8008a68:	e002      	b.n	8008a70 <McpsConfirm+0x7c>
    default:
    	LOG_WARN_LORAWAN(("[LoRaWan] MCPSc returns(%d)\r\n",mcpsConfirm->Status));
    	__loraWanState.sendState = LORAWAN_SEND_STATE_FAILED;
 8008a6a:	4b08      	ldr	r3, [pc, #32]	; (8008a8c <McpsConfirm+0x98>)
 8008a6c:	2208      	movs	r2, #8
 8008a6e:	705a      	strb	r2, [r3, #1]
	}

    __loraWanState.upLinkCounter = mcpsConfirm->UpLinkCounter;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	68db      	ldr	r3, [r3, #12]
 8008a74:	b29a      	uxth	r2, r3
 8008a76:	4b05      	ldr	r3, [pc, #20]	; (8008a8c <McpsConfirm+0x98>)
 8008a78:	815a      	strh	r2, [r3, #10]
    __loraWanState.lastRetries = mcpsConfirm->NbRetries;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	795a      	ldrb	r2, [r3, #5]
 8008a7e:	4b03      	ldr	r3, [pc, #12]	; (8008a8c <McpsConfirm+0x98>)
 8008a80:	745a      	strb	r2, [r3, #17]

    //implicitely desactivated when VERBOSE_LEVEL < 2
    //TraceUpLinkFrame(mcpsConfirm);

}
 8008a82:	46c0      	nop			; (mov r8, r8)
 8008a84:	46bd      	mov	sp, r7
 8008a86:	b002      	add	sp, #8
 8008a88:	bd80      	pop	{r7, pc}
 8008a8a:	46c0      	nop			; (mov r8, r8)
 8008a8c:	2000032c 	.word	0x2000032c

08008a90 <McpsIndication>:

static void McpsIndication( McpsIndication_t *mcpsIndication )
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b082      	sub	sp, #8
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
    TVL2( PRINTNOW(); PRINTF("APP> McpsInd STATUS: %s\r\n", EventInfoStatusStrings[mcpsIndication->Status] );)

    //lora_AppData_t _AppData;
    if( mcpsIndication->Status != LORAMAC_EVENT_INFO_STATUS_OK )
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	785b      	ldrb	r3, [r3, #1]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d003      	beq.n	8008aa8 <McpsIndication+0x18>
    {
    	LOG_WARN_LORAWAN(("[LoRaWan] MCPSi returns(%d)\r\n",mcpsIndication->Status));
    	__loraWanState.sendState = LORAWAN_SEND_STATE_FAILED;
 8008aa0:	4b39      	ldr	r3, [pc, #228]	; (8008b88 <McpsIndication+0xf8>)
 8008aa2:	2208      	movs	r2, #8
 8008aa4:	705a      	strb	r2, [r3, #1]
        return;
 8008aa6:	e06c      	b.n	8008b82 <McpsIndication+0xf2>
    }

    switch( mcpsIndication->McpsIndication )
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	781b      	ldrb	r3, [r3, #0]
 8008aac:	2b01      	cmp	r3, #1
 8008aae:	d008      	beq.n	8008ac2 <McpsIndication+0x32>
 8008ab0:	dc02      	bgt.n	8008ab8 <McpsIndication+0x28>
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d007      	beq.n	8008ac6 <McpsIndication+0x36>
        case MCPS_MULTICAST:
        {
            break;
        }
        default:
            break;
 8008ab6:	e00b      	b.n	8008ad0 <McpsIndication+0x40>
    switch( mcpsIndication->McpsIndication )
 8008ab8:	2b02      	cmp	r3, #2
 8008aba:	d006      	beq.n	8008aca <McpsIndication+0x3a>
 8008abc:	2b03      	cmp	r3, #3
 8008abe:	d006      	beq.n	8008ace <McpsIndication+0x3e>
            break;
 8008ac0:	e006      	b.n	8008ad0 <McpsIndication+0x40>
            break;
 8008ac2:	46c0      	nop			; (mov r8, r8)
 8008ac4:	e004      	b.n	8008ad0 <McpsIndication+0x40>
            break;
 8008ac6:	46c0      	nop			; (mov r8, r8)
 8008ac8:	e002      	b.n	8008ad0 <McpsIndication+0x40>
            break;
 8008aca:	46c0      	nop			; (mov r8, r8)
 8008acc:	e000      	b.n	8008ad0 <McpsIndication+0x40>
            break;
 8008ace:	46c0      	nop			; (mov r8, r8)
    // Check Buffer
    // Check BufferSize
    // Check Rssi
    // Check Snr
    // Check RxSlot
    if (certif_running() == true )
 8008ad0:	f7ff f8f2 	bl	8007cb8 <certif_running>
 8008ad4:	1e03      	subs	r3, r0, #0
 8008ad6:	d001      	beq.n	8008adc <McpsIndication+0x4c>
    {
      certif_DownLinkIncrement( );
 8008ad8:	f7ff f8f8 	bl	8007ccc <certif_DownLinkIncrement>
    }

    if( mcpsIndication->RxData == true )
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	7b5b      	ldrb	r3, [r3, #13]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d033      	beq.n	8008b4c <McpsIndication+0xbc>
    {
      switch( mcpsIndication->Port )
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	78db      	ldrb	r3, [r3, #3]
 8008ae8:	2be0      	cmp	r3, #224	; 0xe0
 8008aea:	d109      	bne.n	8008b00 <McpsIndication+0x70>
      {
        case CERTIF_PORT:
          // revoir cette partie... pas top de garder des param comme ca en rab
          certif_rx( mcpsIndication, &JoinParameters );
 8008aec:	4a27      	ldr	r2, [pc, #156]	; (8008b8c <McpsIndication+0xfc>)
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	0011      	movs	r1, r2
 8008af2:	0018      	movs	r0, r3
 8008af4:	f7ff f9ac 	bl	8007e50 <certif_rx>
          __loraWanState.sendState = LORAWAN_SEND_STATE_ACKED_WITH_DOWNLINK;
 8008af8:	4b23      	ldr	r3, [pc, #140]	; (8008b88 <McpsIndication+0xf8>)
 8008afa:	2205      	movs	r2, #5
 8008afc:	705a      	strb	r2, [r3, #1]
          break;
 8008afe:	e028      	b.n	8008b52 <McpsIndication+0xc2>
        default:

          LOG_INFO_LORAWAN(("### Data received\r\n"));
          __lorawan_driver_lastDownlink.size = mcpsIndication->BufferSize;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	7b1a      	ldrb	r2, [r3, #12]
 8008b04:	4b22      	ldr	r3, [pc, #136]	; (8008b90 <McpsIndication+0x100>)
 8008b06:	705a      	strb	r2, [r3, #1]
          __lorawan_driver_lastDownlink.port = mcpsIndication->Port;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	78da      	ldrb	r2, [r3, #3]
 8008b0c:	4b20      	ldr	r3, [pc, #128]	; (8008b90 <McpsIndication+0x100>)
 8008b0e:	701a      	strb	r2, [r3, #0]
		  bcopy(
				mcpsIndication->Buffer,
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	6898      	ldr	r0, [r3, #8]
				__lorawan_driver_lastDownlink.data,
				((mcpsIndication->BufferSize<=ITSDK_LORAWAN_MAX_DWNLNKSZ)?mcpsIndication->BufferSize:ITSDK_LORAWAN_MAX_DWNLNKSZ)
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	7b1b      	ldrb	r3, [r3, #12]
 8008b18:	1c1a      	adds	r2, r3, #0
 8008b1a:	b2d3      	uxtb	r3, r2
 8008b1c:	2b20      	cmp	r3, #32
 8008b1e:	d901      	bls.n	8008b24 <McpsIndication+0x94>
 8008b20:	2320      	movs	r3, #32
 8008b22:	1c1a      	adds	r2, r3, #0
 8008b24:	b2d3      	uxtb	r3, r2
		  bcopy(
 8008b26:	001a      	movs	r2, r3
 8008b28:	4b1a      	ldr	r3, [pc, #104]	; (8008b94 <McpsIndication+0x104>)
 8008b2a:	0019      	movs	r1, r3
 8008b2c:	f016 fab5 	bl	801f09a <bcopy>
          );
          lorawan_driver_onDataReception(
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	78d8      	ldrb	r0, [r3, #3]
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	6899      	ldr	r1, [r3, #8]
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	7b1b      	ldrb	r3, [r3, #12]
 8008b3c:	001a      	movs	r2, r3
 8008b3e:	f013 fd1d 	bl	801c57c <lorawan_driver_onDataReception>
        		  mcpsIndication->Port,
				  mcpsIndication->Buffer,
				  mcpsIndication->BufferSize
          );
          __loraWanState.sendState = LORAWAN_SEND_STATE_ACKED_WITH_DOWNLINK;
 8008b42:	4b11      	ldr	r3, [pc, #68]	; (8008b88 <McpsIndication+0xf8>)
 8008b44:	2205      	movs	r2, #5
 8008b46:	705a      	strb	r2, [r3, #1]
          break;
 8008b48:	46c0      	nop			; (mov r8, r8)
 8008b4a:	e002      	b.n	8008b52 <McpsIndication+0xc2>
      }
    } else {
    	__loraWanState.sendState = LORAWAN_SEND_STATE_ACKED_NO_DOWNLINK;
 8008b4c:	4b0e      	ldr	r3, [pc, #56]	; (8008b88 <McpsIndication+0xf8>)
 8008b4e:	2204      	movs	r2, #4
 8008b50:	705a      	strb	r2, [r3, #1]

    // Check Multicast
    // Check Port
    // Check Datarate
    // Check FramePending
    if( mcpsIndication->FramePending == true )
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	795b      	ldrb	r3, [r3, #5]
 8008b56:	2b01      	cmp	r3, #1
 8008b58:	d104      	bne.n	8008b64 <McpsIndication+0xd4>
    {
        // The server signals that it has pending data to be sent.
        // We schedule an uplink as soon as possible to flush the server.
    	LOG_INFO_LORAWAN(("[LoRaWAN] Network Server is asking for an uplink transmission\r\n"));
    	__loraWanState.sendState = LORAWAN_SEND_STATE_ACKED_DOWNLINK_PENDING;
 8008b5a:	4b0b      	ldr	r3, [pc, #44]	; (8008b88 <McpsIndication+0xf8>)
 8008b5c:	2206      	movs	r2, #6
 8008b5e:	705a      	strb	r2, [r3, #1]
    	lorawan_driver_onPendingDownlink();
 8008b60:	f013 fd2c 	bl	801c5bc <lorawan_driver_onPendingDownlink>

    }

    __loraWanState.lastRssi = mcpsIndication->Rssi;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	220e      	movs	r2, #14
 8008b68:	5e9a      	ldrsh	r2, [r3, r2]
 8008b6a:	4b07      	ldr	r3, [pc, #28]	; (8008b88 <McpsIndication+0xf8>)
 8008b6c:	81da      	strh	r2, [r3, #14]
    __loraWanState.downlinkCounter = mcpsIndication->DownLinkCounter;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	695b      	ldr	r3, [r3, #20]
 8008b72:	b29a      	uxth	r2, r3
 8008b74:	4b04      	ldr	r3, [pc, #16]	; (8008b88 <McpsIndication+0xf8>)
 8008b76:	819a      	strh	r2, [r3, #12]
    __loraWanState.lastSnr = mcpsIndication->Snr;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2210      	movs	r2, #16
 8008b7c:	569a      	ldrsb	r2, [r3, r2]
 8008b7e:	4b02      	ldr	r3, [pc, #8]	; (8008b88 <McpsIndication+0xf8>)
 8008b80:	741a      	strb	r2, [r3, #16]

}
 8008b82:	46bd      	mov	sp, r7
 8008b84:	b002      	add	sp, #8
 8008b86:	bd80      	pop	{r7, pc}
 8008b88:	2000032c 	.word	0x2000032c
 8008b8c:	20000374 	.word	0x20000374
 8008b90:	20000350 	.word	0x20000350
 8008b94:	20000352 	.word	0x20000352

08008b98 <MlmeConfirm>:
// =============================================================================================
// MLME ( Management ) LAYER
// =============================================================================================

static void MlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 8008b98:	b590      	push	{r4, r7, lr}
 8008b9a:	b083      	sub	sp, #12
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
#endif /* LORAMAC_CLASSB_ENABLED */

    TVL2( PRINTNOW(); PRINTF("APP> MlmeConfirm STATUS: %s\r\n", EventInfoStatusStrings[mlmeConfirm->Status] );)

    switch( mlmeConfirm->MlmeRequest )
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	781b      	ldrb	r3, [r3, #0]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d002      	beq.n	8008bae <MlmeConfirm+0x16>
 8008ba8:	2b03      	cmp	r3, #3
 8008baa:	d01c      	beq.n	8008be6 <MlmeConfirm+0x4e>
            }
        }
#endif /* USE_DEVICE_TIMING */
#endif /* LORAMAC_CLASSB_ENABLED */
        default:
            break;
 8008bac:	e028      	b.n	8008c00 <MlmeConfirm+0x68>
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	785b      	ldrb	r3, [r3, #1]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d111      	bne.n	8008bda <MlmeConfirm+0x42>
              __loraWanState.joinState = LORAWAN_STATE_JOIN_SUCCESS;
 8008bb6:	4b14      	ldr	r3, [pc, #80]	; (8008c08 <MlmeConfirm+0x70>)
 8008bb8:	2203      	movs	r2, #3
 8008bba:	701a      	strb	r2, [r3, #0]
              __loraWanState.joinTime = (uint32_t)(itsdk_time_get_ms()/1000);
 8008bbc:	f014 fa90 	bl	801d0e0 <itsdk_time_get_ms>
 8008bc0:	22fa      	movs	r2, #250	; 0xfa
 8008bc2:	0092      	lsls	r2, r2, #2
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	f7f7 fc7f 	bl	80004c8 <__aeabi_uldivmod>
 8008bca:	0003      	movs	r3, r0
 8008bcc:	000c      	movs	r4, r1
 8008bce:	001a      	movs	r2, r3
 8008bd0:	4b0d      	ldr	r3, [pc, #52]	; (8008c08 <MlmeConfirm+0x70>)
 8008bd2:	605a      	str	r2, [r3, #4]
              lorawan_driver_onJoinSuccess();
 8008bd4:	f013 fc28 	bl	801c428 <lorawan_driver_onJoinSuccess>
            break;
 8008bd8:	e012      	b.n	8008c00 <MlmeConfirm+0x68>
            	__loraWanState.joinState = LORAWAN_STATE_JOIN_FAILED;
 8008bda:	4b0b      	ldr	r3, [pc, #44]	; (8008c08 <MlmeConfirm+0x70>)
 8008bdc:	2204      	movs	r2, #4
 8008bde:	701a      	strb	r2, [r3, #0]
            	lorawan_driver_onJoinFailed();
 8008be0:	f013 fc32 	bl	801c448 <lorawan_driver_onJoinFailed>
            break;
 8008be4:	e00c      	b.n	8008c00 <MlmeConfirm+0x68>
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	785b      	ldrb	r3, [r3, #1]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d107      	bne.n	8008bfe <MlmeConfirm+0x66>
                if (certif_running() == true ){
 8008bee:	f7ff f863 	bl	8007cb8 <certif_running>
 8008bf2:	1e03      	subs	r3, r0, #0
 8008bf4:	d003      	beq.n	8008bfe <MlmeConfirm+0x66>
                     certif_linkCheck(mlmeConfirm);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	0018      	movs	r0, r3
 8008bfa:	f7ff f877 	bl	8007cec <certif_linkCheck>
            break;
 8008bfe:	46c0      	nop			; (mov r8, r8)
    }
}
 8008c00:	46c0      	nop			; (mov r8, r8)
 8008c02:	46bd      	mov	sp, r7
 8008c04:	b003      	add	sp, #12
 8008c06:	bd90      	pop	{r4, r7, pc}
 8008c08:	2000032c 	.word	0x2000032c

08008c0c <MlmeIndication>:
 * \brief   MLME-Indication event function
 *
 * \param   [IN] MlmeIndication - Pointer to the indication structure.
 */
static void MlmeIndication( MlmeIndication_t *MlmeIndication )
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b082      	sub	sp, #8
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
#endif /* LORAMAC_CLASSB_ENABLED */

    TVL2( PRINTNOW(); PRINTF("APP> MLMEInd STATUS: %s\r\n", EventInfoStatusStrings[MlmeIndication->Status] );    )

    switch( MlmeIndication->MlmeIndication )
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	781b      	ldrb	r3, [r3, #0]
 8008c18:	2b06      	cmp	r3, #6
 8008c1a:	d000      	beq.n	8008c1e <MlmeIndication+0x12>
            break;

        }
#endif /* LORAMAC_CLASSB_ENABLED */
        default:
            break;
 8008c1c:	e002      	b.n	8008c24 <MlmeIndication+0x18>
        	lorawan_driver_onTxNeeded();
 8008c1e:	f7ff fb11 	bl	8008244 <lorawan_driver_onTxNeeded>
            break;
 8008c22:	46c0      	nop			; (mov r8, r8)
    }
}
 8008c24:	46c0      	nop			; (mov r8, r8)
 8008c26:	46bd      	mov	sp, r7
 8008c28:	b002      	add	sp, #8
 8008c2a:	bd80      	pop	{r7, pc}

08008c2c <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b082      	sub	sp, #8
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
 8008c34:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	781a      	ldrb	r2, [r3, #0]
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	3301      	adds	r3, #1
 8008c42:	683a      	ldr	r2, [r7, #0]
 8008c44:	7852      	ldrb	r2, [r2, #1]
 8008c46:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	3302      	adds	r3, #2
 8008c4c:	683a      	ldr	r2, [r7, #0]
 8008c4e:	7892      	ldrb	r2, [r2, #2]
 8008c50:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	3303      	adds	r3, #3
 8008c56:	683a      	ldr	r2, [r7, #0]
 8008c58:	78d2      	ldrb	r2, [r2, #3]
 8008c5a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	3304      	adds	r3, #4
 8008c60:	683a      	ldr	r2, [r7, #0]
 8008c62:	7912      	ldrb	r2, [r2, #4]
 8008c64:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	3305      	adds	r3, #5
 8008c6a:	683a      	ldr	r2, [r7, #0]
 8008c6c:	7952      	ldrb	r2, [r2, #5]
 8008c6e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	3306      	adds	r3, #6
 8008c74:	683a      	ldr	r2, [r7, #0]
 8008c76:	7992      	ldrb	r2, [r2, #6]
 8008c78:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	3307      	adds	r3, #7
 8008c7e:	683a      	ldr	r2, [r7, #0]
 8008c80:	79d2      	ldrb	r2, [r2, #7]
 8008c82:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	3308      	adds	r3, #8
 8008c88:	683a      	ldr	r2, [r7, #0]
 8008c8a:	7a12      	ldrb	r2, [r2, #8]
 8008c8c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	3309      	adds	r3, #9
 8008c92:	683a      	ldr	r2, [r7, #0]
 8008c94:	7a52      	ldrb	r2, [r2, #9]
 8008c96:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	330a      	adds	r3, #10
 8008c9c:	683a      	ldr	r2, [r7, #0]
 8008c9e:	7a92      	ldrb	r2, [r2, #10]
 8008ca0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	330b      	adds	r3, #11
 8008ca6:	683a      	ldr	r2, [r7, #0]
 8008ca8:	7ad2      	ldrb	r2, [r2, #11]
 8008caa:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	330c      	adds	r3, #12
 8008cb0:	683a      	ldr	r2, [r7, #0]
 8008cb2:	7b12      	ldrb	r2, [r2, #12]
 8008cb4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	330d      	adds	r3, #13
 8008cba:	683a      	ldr	r2, [r7, #0]
 8008cbc:	7b52      	ldrb	r2, [r2, #13]
 8008cbe:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	330e      	adds	r3, #14
 8008cc4:	683a      	ldr	r2, [r7, #0]
 8008cc6:	7b92      	ldrb	r2, [r2, #14]
 8008cc8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	330f      	adds	r3, #15
 8008cce:	683a      	ldr	r2, [r7, #0]
 8008cd0:	7bd2      	ldrb	r2, [r2, #15]
 8008cd2:	701a      	strb	r2, [r3, #0]
#endif
}
 8008cd4:	46c0      	nop			; (mov r8, r8)
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	b002      	add	sp, #8
 8008cda:	bd80      	pop	{r7, pc}

08008cdc <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b084      	sub	sp, #16
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	60f8      	str	r0, [r7, #12]
 8008ce4:	60b9      	str	r1, [r7, #8]
 8008ce6:	1dfb      	adds	r3, r7, #7
 8008ce8:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 8008cea:	e007      	b.n	8008cfc <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 8008cec:	68ba      	ldr	r2, [r7, #8]
 8008cee:	1c53      	adds	r3, r2, #1
 8008cf0:	60bb      	str	r3, [r7, #8]
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	1c59      	adds	r1, r3, #1
 8008cf6:	60f9      	str	r1, [r7, #12]
 8008cf8:	7812      	ldrb	r2, [r2, #0]
 8008cfa:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 8008cfc:	1dfb      	adds	r3, r7, #7
 8008cfe:	781b      	ldrb	r3, [r3, #0]
 8008d00:	1dfa      	adds	r2, r7, #7
 8008d02:	1e59      	subs	r1, r3, #1
 8008d04:	7011      	strb	r1, [r2, #0]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d1f0      	bne.n	8008cec <copy_block_nn+0x10>
}
 8008d0a:	46c0      	nop			; (mov r8, r8)
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	b004      	add	sp, #16
 8008d10:	bd80      	pop	{r7, pc}

08008d12 <xor_block>:

static void xor_block( void *d, const void *s )
{
 8008d12:	b580      	push	{r7, lr}
 8008d14:	b082      	sub	sp, #8
 8008d16:	af00      	add	r7, sp, #0
 8008d18:	6078      	str	r0, [r7, #4]
 8008d1a:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	781a      	ldrb	r2, [r3, #0]
 8008d20:	683b      	ldr	r3, [r7, #0]
 8008d22:	781b      	ldrb	r3, [r3, #0]
 8008d24:	4053      	eors	r3, r2
 8008d26:	b2da      	uxtb	r2, r3
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	3301      	adds	r3, #1
 8008d30:	7819      	ldrb	r1, [r3, #0]
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	3301      	adds	r3, #1
 8008d36:	781a      	ldrb	r2, [r3, #0]
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	3301      	adds	r3, #1
 8008d3c:	404a      	eors	r2, r1
 8008d3e:	b2d2      	uxtb	r2, r2
 8008d40:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	3302      	adds	r3, #2
 8008d46:	7819      	ldrb	r1, [r3, #0]
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	3302      	adds	r3, #2
 8008d4c:	781a      	ldrb	r2, [r3, #0]
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	3302      	adds	r3, #2
 8008d52:	404a      	eors	r2, r1
 8008d54:	b2d2      	uxtb	r2, r2
 8008d56:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	3303      	adds	r3, #3
 8008d5c:	7819      	ldrb	r1, [r3, #0]
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	3303      	adds	r3, #3
 8008d62:	781a      	ldrb	r2, [r3, #0]
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	3303      	adds	r3, #3
 8008d68:	404a      	eors	r2, r1
 8008d6a:	b2d2      	uxtb	r2, r2
 8008d6c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	3304      	adds	r3, #4
 8008d72:	7819      	ldrb	r1, [r3, #0]
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	3304      	adds	r3, #4
 8008d78:	781a      	ldrb	r2, [r3, #0]
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	3304      	adds	r3, #4
 8008d7e:	404a      	eors	r2, r1
 8008d80:	b2d2      	uxtb	r2, r2
 8008d82:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	3305      	adds	r3, #5
 8008d88:	7819      	ldrb	r1, [r3, #0]
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	3305      	adds	r3, #5
 8008d8e:	781a      	ldrb	r2, [r3, #0]
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	3305      	adds	r3, #5
 8008d94:	404a      	eors	r2, r1
 8008d96:	b2d2      	uxtb	r2, r2
 8008d98:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	3306      	adds	r3, #6
 8008d9e:	7819      	ldrb	r1, [r3, #0]
 8008da0:	683b      	ldr	r3, [r7, #0]
 8008da2:	3306      	adds	r3, #6
 8008da4:	781a      	ldrb	r2, [r3, #0]
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	3306      	adds	r3, #6
 8008daa:	404a      	eors	r2, r1
 8008dac:	b2d2      	uxtb	r2, r2
 8008dae:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	3307      	adds	r3, #7
 8008db4:	7819      	ldrb	r1, [r3, #0]
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	3307      	adds	r3, #7
 8008dba:	781a      	ldrb	r2, [r3, #0]
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	3307      	adds	r3, #7
 8008dc0:	404a      	eors	r2, r1
 8008dc2:	b2d2      	uxtb	r2, r2
 8008dc4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	3308      	adds	r3, #8
 8008dca:	7819      	ldrb	r1, [r3, #0]
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	3308      	adds	r3, #8
 8008dd0:	781a      	ldrb	r2, [r3, #0]
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	3308      	adds	r3, #8
 8008dd6:	404a      	eors	r2, r1
 8008dd8:	b2d2      	uxtb	r2, r2
 8008dda:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	3309      	adds	r3, #9
 8008de0:	7819      	ldrb	r1, [r3, #0]
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	3309      	adds	r3, #9
 8008de6:	781a      	ldrb	r2, [r3, #0]
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	3309      	adds	r3, #9
 8008dec:	404a      	eors	r2, r1
 8008dee:	b2d2      	uxtb	r2, r2
 8008df0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	330a      	adds	r3, #10
 8008df6:	7819      	ldrb	r1, [r3, #0]
 8008df8:	683b      	ldr	r3, [r7, #0]
 8008dfa:	330a      	adds	r3, #10
 8008dfc:	781a      	ldrb	r2, [r3, #0]
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	330a      	adds	r3, #10
 8008e02:	404a      	eors	r2, r1
 8008e04:	b2d2      	uxtb	r2, r2
 8008e06:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	330b      	adds	r3, #11
 8008e0c:	7819      	ldrb	r1, [r3, #0]
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	330b      	adds	r3, #11
 8008e12:	781a      	ldrb	r2, [r3, #0]
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	330b      	adds	r3, #11
 8008e18:	404a      	eors	r2, r1
 8008e1a:	b2d2      	uxtb	r2, r2
 8008e1c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	330c      	adds	r3, #12
 8008e22:	7819      	ldrb	r1, [r3, #0]
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	330c      	adds	r3, #12
 8008e28:	781a      	ldrb	r2, [r3, #0]
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	330c      	adds	r3, #12
 8008e2e:	404a      	eors	r2, r1
 8008e30:	b2d2      	uxtb	r2, r2
 8008e32:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	330d      	adds	r3, #13
 8008e38:	7819      	ldrb	r1, [r3, #0]
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	330d      	adds	r3, #13
 8008e3e:	781a      	ldrb	r2, [r3, #0]
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	330d      	adds	r3, #13
 8008e44:	404a      	eors	r2, r1
 8008e46:	b2d2      	uxtb	r2, r2
 8008e48:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	330e      	adds	r3, #14
 8008e4e:	7819      	ldrb	r1, [r3, #0]
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	330e      	adds	r3, #14
 8008e54:	781a      	ldrb	r2, [r3, #0]
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	330e      	adds	r3, #14
 8008e5a:	404a      	eors	r2, r1
 8008e5c:	b2d2      	uxtb	r2, r2
 8008e5e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	330f      	adds	r3, #15
 8008e64:	7819      	ldrb	r1, [r3, #0]
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	330f      	adds	r3, #15
 8008e6a:	781a      	ldrb	r2, [r3, #0]
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	330f      	adds	r3, #15
 8008e70:	404a      	eors	r2, r1
 8008e72:	b2d2      	uxtb	r2, r2
 8008e74:	701a      	strb	r2, [r3, #0]
#endif
}
 8008e76:	46c0      	nop			; (mov r8, r8)
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	b002      	add	sp, #8
 8008e7c:	bd80      	pop	{r7, pc}

08008e7e <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 8008e7e:	b580      	push	{r7, lr}
 8008e80:	b084      	sub	sp, #16
 8008e82:	af00      	add	r7, sp, #0
 8008e84:	60f8      	str	r0, [r7, #12]
 8008e86:	60b9      	str	r1, [r7, #8]
 8008e88:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 8008e8a:	68bb      	ldr	r3, [r7, #8]
 8008e8c:	781a      	ldrb	r2, [r3, #0]
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	781b      	ldrb	r3, [r3, #0]
 8008e92:	4053      	eors	r3, r2
 8008e94:	b2da      	uxtb	r2, r3
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 8008e9a:	68bb      	ldr	r3, [r7, #8]
 8008e9c:	3301      	adds	r3, #1
 8008e9e:	7819      	ldrb	r1, [r3, #0]
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	3301      	adds	r3, #1
 8008ea4:	781a      	ldrb	r2, [r3, #0]
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	3301      	adds	r3, #1
 8008eaa:	404a      	eors	r2, r1
 8008eac:	b2d2      	uxtb	r2, r2
 8008eae:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 8008eb0:	68bb      	ldr	r3, [r7, #8]
 8008eb2:	3302      	adds	r3, #2
 8008eb4:	7819      	ldrb	r1, [r3, #0]
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	3302      	adds	r3, #2
 8008eba:	781a      	ldrb	r2, [r3, #0]
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	3302      	adds	r3, #2
 8008ec0:	404a      	eors	r2, r1
 8008ec2:	b2d2      	uxtb	r2, r2
 8008ec4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 8008ec6:	68bb      	ldr	r3, [r7, #8]
 8008ec8:	3303      	adds	r3, #3
 8008eca:	7819      	ldrb	r1, [r3, #0]
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	3303      	adds	r3, #3
 8008ed0:	781a      	ldrb	r2, [r3, #0]
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	3303      	adds	r3, #3
 8008ed6:	404a      	eors	r2, r1
 8008ed8:	b2d2      	uxtb	r2, r2
 8008eda:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 8008edc:	68bb      	ldr	r3, [r7, #8]
 8008ede:	3304      	adds	r3, #4
 8008ee0:	7819      	ldrb	r1, [r3, #0]
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	3304      	adds	r3, #4
 8008ee6:	781a      	ldrb	r2, [r3, #0]
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	3304      	adds	r3, #4
 8008eec:	404a      	eors	r2, r1
 8008eee:	b2d2      	uxtb	r2, r2
 8008ef0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 8008ef2:	68bb      	ldr	r3, [r7, #8]
 8008ef4:	3305      	adds	r3, #5
 8008ef6:	7819      	ldrb	r1, [r3, #0]
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	3305      	adds	r3, #5
 8008efc:	781a      	ldrb	r2, [r3, #0]
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	3305      	adds	r3, #5
 8008f02:	404a      	eors	r2, r1
 8008f04:	b2d2      	uxtb	r2, r2
 8008f06:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 8008f08:	68bb      	ldr	r3, [r7, #8]
 8008f0a:	3306      	adds	r3, #6
 8008f0c:	7819      	ldrb	r1, [r3, #0]
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	3306      	adds	r3, #6
 8008f12:	781a      	ldrb	r2, [r3, #0]
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	3306      	adds	r3, #6
 8008f18:	404a      	eors	r2, r1
 8008f1a:	b2d2      	uxtb	r2, r2
 8008f1c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 8008f1e:	68bb      	ldr	r3, [r7, #8]
 8008f20:	3307      	adds	r3, #7
 8008f22:	7819      	ldrb	r1, [r3, #0]
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	3307      	adds	r3, #7
 8008f28:	781a      	ldrb	r2, [r3, #0]
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	3307      	adds	r3, #7
 8008f2e:	404a      	eors	r2, r1
 8008f30:	b2d2      	uxtb	r2, r2
 8008f32:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 8008f34:	68bb      	ldr	r3, [r7, #8]
 8008f36:	3308      	adds	r3, #8
 8008f38:	7819      	ldrb	r1, [r3, #0]
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	3308      	adds	r3, #8
 8008f3e:	781a      	ldrb	r2, [r3, #0]
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	3308      	adds	r3, #8
 8008f44:	404a      	eors	r2, r1
 8008f46:	b2d2      	uxtb	r2, r2
 8008f48:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 8008f4a:	68bb      	ldr	r3, [r7, #8]
 8008f4c:	3309      	adds	r3, #9
 8008f4e:	7819      	ldrb	r1, [r3, #0]
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	3309      	adds	r3, #9
 8008f54:	781a      	ldrb	r2, [r3, #0]
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	3309      	adds	r3, #9
 8008f5a:	404a      	eors	r2, r1
 8008f5c:	b2d2      	uxtb	r2, r2
 8008f5e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 8008f60:	68bb      	ldr	r3, [r7, #8]
 8008f62:	330a      	adds	r3, #10
 8008f64:	7819      	ldrb	r1, [r3, #0]
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	330a      	adds	r3, #10
 8008f6a:	781a      	ldrb	r2, [r3, #0]
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	330a      	adds	r3, #10
 8008f70:	404a      	eors	r2, r1
 8008f72:	b2d2      	uxtb	r2, r2
 8008f74:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 8008f76:	68bb      	ldr	r3, [r7, #8]
 8008f78:	330b      	adds	r3, #11
 8008f7a:	7819      	ldrb	r1, [r3, #0]
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	330b      	adds	r3, #11
 8008f80:	781a      	ldrb	r2, [r3, #0]
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	330b      	adds	r3, #11
 8008f86:	404a      	eors	r2, r1
 8008f88:	b2d2      	uxtb	r2, r2
 8008f8a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 8008f8c:	68bb      	ldr	r3, [r7, #8]
 8008f8e:	330c      	adds	r3, #12
 8008f90:	7819      	ldrb	r1, [r3, #0]
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	330c      	adds	r3, #12
 8008f96:	781a      	ldrb	r2, [r3, #0]
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	330c      	adds	r3, #12
 8008f9c:	404a      	eors	r2, r1
 8008f9e:	b2d2      	uxtb	r2, r2
 8008fa0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 8008fa2:	68bb      	ldr	r3, [r7, #8]
 8008fa4:	330d      	adds	r3, #13
 8008fa6:	7819      	ldrb	r1, [r3, #0]
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	330d      	adds	r3, #13
 8008fac:	781a      	ldrb	r2, [r3, #0]
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	330d      	adds	r3, #13
 8008fb2:	404a      	eors	r2, r1
 8008fb4:	b2d2      	uxtb	r2, r2
 8008fb6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 8008fb8:	68bb      	ldr	r3, [r7, #8]
 8008fba:	330e      	adds	r3, #14
 8008fbc:	7819      	ldrb	r1, [r3, #0]
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	330e      	adds	r3, #14
 8008fc2:	781a      	ldrb	r2, [r3, #0]
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	330e      	adds	r3, #14
 8008fc8:	404a      	eors	r2, r1
 8008fca:	b2d2      	uxtb	r2, r2
 8008fcc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 8008fce:	68bb      	ldr	r3, [r7, #8]
 8008fd0:	330f      	adds	r3, #15
 8008fd2:	7819      	ldrb	r1, [r3, #0]
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	330f      	adds	r3, #15
 8008fd8:	781a      	ldrb	r2, [r3, #0]
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	330f      	adds	r3, #15
 8008fde:	404a      	eors	r2, r1
 8008fe0:	b2d2      	uxtb	r2, r2
 8008fe2:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 8008fe4:	46c0      	nop			; (mov r8, r8)
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	b004      	add	sp, #16
 8008fea:	bd80      	pop	{r7, pc}

08008fec <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b082      	sub	sp, #8
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
 8008ff4:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 8008ff6:	683a      	ldr	r2, [r7, #0]
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	0011      	movs	r1, r2
 8008ffc:	0018      	movs	r0, r3
 8008ffe:	f7ff fe88 	bl	8008d12 <xor_block>
}
 8009002:	46c0      	nop			; (mov r8, r8)
 8009004:	46bd      	mov	sp, r7
 8009006:	b002      	add	sp, #8
 8009008:	bd80      	pop	{r7, pc}
	...

0800900c <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 800900c:	b580      	push	{r7, lr}
 800900e:	b084      	sub	sp, #16
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	781b      	ldrb	r3, [r3, #0]
 8009018:	001a      	movs	r2, r3
 800901a:	4b4c      	ldr	r3, [pc, #304]	; (800914c <shift_sub_rows+0x140>)
 800901c:	5c9a      	ldrb	r2, [r3, r2]
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	701a      	strb	r2, [r3, #0]
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	3304      	adds	r3, #4
 8009026:	781b      	ldrb	r3, [r3, #0]
 8009028:	0019      	movs	r1, r3
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	3304      	adds	r3, #4
 800902e:	4a47      	ldr	r2, [pc, #284]	; (800914c <shift_sub_rows+0x140>)
 8009030:	5c52      	ldrb	r2, [r2, r1]
 8009032:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	3308      	adds	r3, #8
 8009038:	781b      	ldrb	r3, [r3, #0]
 800903a:	0019      	movs	r1, r3
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	3308      	adds	r3, #8
 8009040:	4a42      	ldr	r2, [pc, #264]	; (800914c <shift_sub_rows+0x140>)
 8009042:	5c52      	ldrb	r2, [r2, r1]
 8009044:	701a      	strb	r2, [r3, #0]
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	330c      	adds	r3, #12
 800904a:	781b      	ldrb	r3, [r3, #0]
 800904c:	0019      	movs	r1, r3
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	330c      	adds	r3, #12
 8009052:	4a3e      	ldr	r2, [pc, #248]	; (800914c <shift_sub_rows+0x140>)
 8009054:	5c52      	ldrb	r2, [r2, r1]
 8009056:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 8009058:	200f      	movs	r0, #15
 800905a:	183b      	adds	r3, r7, r0
 800905c:	687a      	ldr	r2, [r7, #4]
 800905e:	7852      	ldrb	r2, [r2, #1]
 8009060:	701a      	strb	r2, [r3, #0]
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	3305      	adds	r3, #5
 8009066:	781b      	ldrb	r3, [r3, #0]
 8009068:	0019      	movs	r1, r3
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	3301      	adds	r3, #1
 800906e:	4a37      	ldr	r2, [pc, #220]	; (800914c <shift_sub_rows+0x140>)
 8009070:	5c52      	ldrb	r2, [r2, r1]
 8009072:	701a      	strb	r2, [r3, #0]
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	3309      	adds	r3, #9
 8009078:	781b      	ldrb	r3, [r3, #0]
 800907a:	0019      	movs	r1, r3
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	3305      	adds	r3, #5
 8009080:	4a32      	ldr	r2, [pc, #200]	; (800914c <shift_sub_rows+0x140>)
 8009082:	5c52      	ldrb	r2, [r2, r1]
 8009084:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	330d      	adds	r3, #13
 800908a:	781b      	ldrb	r3, [r3, #0]
 800908c:	0019      	movs	r1, r3
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	3309      	adds	r3, #9
 8009092:	4a2e      	ldr	r2, [pc, #184]	; (800914c <shift_sub_rows+0x140>)
 8009094:	5c52      	ldrb	r2, [r2, r1]
 8009096:	701a      	strb	r2, [r3, #0]
 8009098:	183b      	adds	r3, r7, r0
 800909a:	781a      	ldrb	r2, [r3, #0]
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	330d      	adds	r3, #13
 80090a0:	492a      	ldr	r1, [pc, #168]	; (800914c <shift_sub_rows+0x140>)
 80090a2:	5c8a      	ldrb	r2, [r1, r2]
 80090a4:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 80090a6:	183b      	adds	r3, r7, r0
 80090a8:	687a      	ldr	r2, [r7, #4]
 80090aa:	7892      	ldrb	r2, [r2, #2]
 80090ac:	701a      	strb	r2, [r3, #0]
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	330a      	adds	r3, #10
 80090b2:	781b      	ldrb	r3, [r3, #0]
 80090b4:	0019      	movs	r1, r3
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	3302      	adds	r3, #2
 80090ba:	4a24      	ldr	r2, [pc, #144]	; (800914c <shift_sub_rows+0x140>)
 80090bc:	5c52      	ldrb	r2, [r2, r1]
 80090be:	701a      	strb	r2, [r3, #0]
 80090c0:	183b      	adds	r3, r7, r0
 80090c2:	781a      	ldrb	r2, [r3, #0]
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	330a      	adds	r3, #10
 80090c8:	4920      	ldr	r1, [pc, #128]	; (800914c <shift_sub_rows+0x140>)
 80090ca:	5c8a      	ldrb	r2, [r1, r2]
 80090cc:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 80090ce:	183b      	adds	r3, r7, r0
 80090d0:	687a      	ldr	r2, [r7, #4]
 80090d2:	7992      	ldrb	r2, [r2, #6]
 80090d4:	701a      	strb	r2, [r3, #0]
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	330e      	adds	r3, #14
 80090da:	781b      	ldrb	r3, [r3, #0]
 80090dc:	0019      	movs	r1, r3
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	3306      	adds	r3, #6
 80090e2:	4a1a      	ldr	r2, [pc, #104]	; (800914c <shift_sub_rows+0x140>)
 80090e4:	5c52      	ldrb	r2, [r2, r1]
 80090e6:	701a      	strb	r2, [r3, #0]
 80090e8:	183b      	adds	r3, r7, r0
 80090ea:	781a      	ldrb	r2, [r3, #0]
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	330e      	adds	r3, #14
 80090f0:	4916      	ldr	r1, [pc, #88]	; (800914c <shift_sub_rows+0x140>)
 80090f2:	5c8a      	ldrb	r2, [r1, r2]
 80090f4:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 80090f6:	183b      	adds	r3, r7, r0
 80090f8:	687a      	ldr	r2, [r7, #4]
 80090fa:	7bd2      	ldrb	r2, [r2, #15]
 80090fc:	701a      	strb	r2, [r3, #0]
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	330b      	adds	r3, #11
 8009102:	781b      	ldrb	r3, [r3, #0]
 8009104:	0019      	movs	r1, r3
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	330f      	adds	r3, #15
 800910a:	4a10      	ldr	r2, [pc, #64]	; (800914c <shift_sub_rows+0x140>)
 800910c:	5c52      	ldrb	r2, [r2, r1]
 800910e:	701a      	strb	r2, [r3, #0]
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	3307      	adds	r3, #7
 8009114:	781b      	ldrb	r3, [r3, #0]
 8009116:	0019      	movs	r1, r3
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	330b      	adds	r3, #11
 800911c:	4a0b      	ldr	r2, [pc, #44]	; (800914c <shift_sub_rows+0x140>)
 800911e:	5c52      	ldrb	r2, [r2, r1]
 8009120:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	3303      	adds	r3, #3
 8009126:	781b      	ldrb	r3, [r3, #0]
 8009128:	0019      	movs	r1, r3
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	3307      	adds	r3, #7
 800912e:	4a07      	ldr	r2, [pc, #28]	; (800914c <shift_sub_rows+0x140>)
 8009130:	5c52      	ldrb	r2, [r2, r1]
 8009132:	701a      	strb	r2, [r3, #0]
 8009134:	183b      	adds	r3, r7, r0
 8009136:	781a      	ldrb	r2, [r3, #0]
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	3303      	adds	r3, #3
 800913c:	4903      	ldr	r1, [pc, #12]	; (800914c <shift_sub_rows+0x140>)
 800913e:	5c8a      	ldrb	r2, [r1, r2]
 8009140:	701a      	strb	r2, [r3, #0]
}
 8009142:	46c0      	nop			; (mov r8, r8)
 8009144:	46bd      	mov	sp, r7
 8009146:	b004      	add	sp, #16
 8009148:	bd80      	pop	{r7, pc}
 800914a:	46c0      	nop			; (mov r8, r8)
 800914c:	08021488 	.word	0x08021488

08009150 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 8009150:	b590      	push	{r4, r7, lr}
 8009152:	b087      	sub	sp, #28
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 8009158:	687a      	ldr	r2, [r7, #4]
 800915a:	2008      	movs	r0, #8
 800915c:	0004      	movs	r4, r0
 800915e:	183b      	adds	r3, r7, r0
 8009160:	0011      	movs	r1, r2
 8009162:	0018      	movs	r0, r3
 8009164:	f7ff fd62 	bl	8008c2c <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 8009168:	0020      	movs	r0, r4
 800916a:	183b      	adds	r3, r7, r0
 800916c:	781b      	ldrb	r3, [r3, #0]
 800916e:	001a      	movs	r2, r3
 8009170:	4be7      	ldr	r3, [pc, #924]	; (8009510 <mix_sub_columns+0x3c0>)
 8009172:	5c9a      	ldrb	r2, [r3, r2]
 8009174:	183b      	adds	r3, r7, r0
 8009176:	795b      	ldrb	r3, [r3, #5]
 8009178:	0019      	movs	r1, r3
 800917a:	4be6      	ldr	r3, [pc, #920]	; (8009514 <mix_sub_columns+0x3c4>)
 800917c:	5c5b      	ldrb	r3, [r3, r1]
 800917e:	4053      	eors	r3, r2
 8009180:	b2da      	uxtb	r2, r3
 8009182:	183b      	adds	r3, r7, r0
 8009184:	7a9b      	ldrb	r3, [r3, #10]
 8009186:	0019      	movs	r1, r3
 8009188:	4be3      	ldr	r3, [pc, #908]	; (8009518 <mix_sub_columns+0x3c8>)
 800918a:	5c5b      	ldrb	r3, [r3, r1]
 800918c:	4053      	eors	r3, r2
 800918e:	b2da      	uxtb	r2, r3
 8009190:	183b      	adds	r3, r7, r0
 8009192:	7bdb      	ldrb	r3, [r3, #15]
 8009194:	0019      	movs	r1, r3
 8009196:	4be0      	ldr	r3, [pc, #896]	; (8009518 <mix_sub_columns+0x3c8>)
 8009198:	5c5b      	ldrb	r3, [r3, r1]
 800919a:	4053      	eors	r3, r2
 800919c:	b2da      	uxtb	r2, r3
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 80091a2:	183b      	adds	r3, r7, r0
 80091a4:	781b      	ldrb	r3, [r3, #0]
 80091a6:	001a      	movs	r2, r3
 80091a8:	4bdb      	ldr	r3, [pc, #876]	; (8009518 <mix_sub_columns+0x3c8>)
 80091aa:	5c9a      	ldrb	r2, [r3, r2]
 80091ac:	183b      	adds	r3, r7, r0
 80091ae:	795b      	ldrb	r3, [r3, #5]
 80091b0:	0019      	movs	r1, r3
 80091b2:	4bd7      	ldr	r3, [pc, #860]	; (8009510 <mix_sub_columns+0x3c0>)
 80091b4:	5c5b      	ldrb	r3, [r3, r1]
 80091b6:	4053      	eors	r3, r2
 80091b8:	b2da      	uxtb	r2, r3
 80091ba:	183b      	adds	r3, r7, r0
 80091bc:	7a9b      	ldrb	r3, [r3, #10]
 80091be:	0019      	movs	r1, r3
 80091c0:	4bd4      	ldr	r3, [pc, #848]	; (8009514 <mix_sub_columns+0x3c4>)
 80091c2:	5c5b      	ldrb	r3, [r3, r1]
 80091c4:	4053      	eors	r3, r2
 80091c6:	b2d9      	uxtb	r1, r3
 80091c8:	183b      	adds	r3, r7, r0
 80091ca:	7bdb      	ldrb	r3, [r3, #15]
 80091cc:	001a      	movs	r2, r3
 80091ce:	4bd2      	ldr	r3, [pc, #840]	; (8009518 <mix_sub_columns+0x3c8>)
 80091d0:	5c9a      	ldrb	r2, [r3, r2]
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	3301      	adds	r3, #1
 80091d6:	404a      	eors	r2, r1
 80091d8:	b2d2      	uxtb	r2, r2
 80091da:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 80091dc:	183b      	adds	r3, r7, r0
 80091de:	781b      	ldrb	r3, [r3, #0]
 80091e0:	001a      	movs	r2, r3
 80091e2:	4bcd      	ldr	r3, [pc, #820]	; (8009518 <mix_sub_columns+0x3c8>)
 80091e4:	5c9a      	ldrb	r2, [r3, r2]
 80091e6:	183b      	adds	r3, r7, r0
 80091e8:	795b      	ldrb	r3, [r3, #5]
 80091ea:	0019      	movs	r1, r3
 80091ec:	4bca      	ldr	r3, [pc, #808]	; (8009518 <mix_sub_columns+0x3c8>)
 80091ee:	5c5b      	ldrb	r3, [r3, r1]
 80091f0:	4053      	eors	r3, r2
 80091f2:	b2da      	uxtb	r2, r3
 80091f4:	183b      	adds	r3, r7, r0
 80091f6:	7a9b      	ldrb	r3, [r3, #10]
 80091f8:	0019      	movs	r1, r3
 80091fa:	4bc5      	ldr	r3, [pc, #788]	; (8009510 <mix_sub_columns+0x3c0>)
 80091fc:	5c5b      	ldrb	r3, [r3, r1]
 80091fe:	4053      	eors	r3, r2
 8009200:	b2d9      	uxtb	r1, r3
 8009202:	183b      	adds	r3, r7, r0
 8009204:	7bdb      	ldrb	r3, [r3, #15]
 8009206:	001a      	movs	r2, r3
 8009208:	4bc2      	ldr	r3, [pc, #776]	; (8009514 <mix_sub_columns+0x3c4>)
 800920a:	5c9a      	ldrb	r2, [r3, r2]
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	3302      	adds	r3, #2
 8009210:	404a      	eors	r2, r1
 8009212:	b2d2      	uxtb	r2, r2
 8009214:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 8009216:	183b      	adds	r3, r7, r0
 8009218:	781b      	ldrb	r3, [r3, #0]
 800921a:	001a      	movs	r2, r3
 800921c:	4bbd      	ldr	r3, [pc, #756]	; (8009514 <mix_sub_columns+0x3c4>)
 800921e:	5c9a      	ldrb	r2, [r3, r2]
 8009220:	183b      	adds	r3, r7, r0
 8009222:	795b      	ldrb	r3, [r3, #5]
 8009224:	0019      	movs	r1, r3
 8009226:	4bbc      	ldr	r3, [pc, #752]	; (8009518 <mix_sub_columns+0x3c8>)
 8009228:	5c5b      	ldrb	r3, [r3, r1]
 800922a:	4053      	eors	r3, r2
 800922c:	b2da      	uxtb	r2, r3
 800922e:	183b      	adds	r3, r7, r0
 8009230:	7a9b      	ldrb	r3, [r3, #10]
 8009232:	0019      	movs	r1, r3
 8009234:	4bb8      	ldr	r3, [pc, #736]	; (8009518 <mix_sub_columns+0x3c8>)
 8009236:	5c5b      	ldrb	r3, [r3, r1]
 8009238:	4053      	eors	r3, r2
 800923a:	b2d9      	uxtb	r1, r3
 800923c:	183b      	adds	r3, r7, r0
 800923e:	7bdb      	ldrb	r3, [r3, #15]
 8009240:	001a      	movs	r2, r3
 8009242:	4bb3      	ldr	r3, [pc, #716]	; (8009510 <mix_sub_columns+0x3c0>)
 8009244:	5c9a      	ldrb	r2, [r3, r2]
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	3303      	adds	r3, #3
 800924a:	404a      	eors	r2, r1
 800924c:	b2d2      	uxtb	r2, r2
 800924e:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 8009250:	183b      	adds	r3, r7, r0
 8009252:	791b      	ldrb	r3, [r3, #4]
 8009254:	001a      	movs	r2, r3
 8009256:	4bae      	ldr	r3, [pc, #696]	; (8009510 <mix_sub_columns+0x3c0>)
 8009258:	5c9a      	ldrb	r2, [r3, r2]
 800925a:	183b      	adds	r3, r7, r0
 800925c:	7a5b      	ldrb	r3, [r3, #9]
 800925e:	0019      	movs	r1, r3
 8009260:	4bac      	ldr	r3, [pc, #688]	; (8009514 <mix_sub_columns+0x3c4>)
 8009262:	5c5b      	ldrb	r3, [r3, r1]
 8009264:	4053      	eors	r3, r2
 8009266:	b2da      	uxtb	r2, r3
 8009268:	183b      	adds	r3, r7, r0
 800926a:	7b9b      	ldrb	r3, [r3, #14]
 800926c:	0019      	movs	r1, r3
 800926e:	4baa      	ldr	r3, [pc, #680]	; (8009518 <mix_sub_columns+0x3c8>)
 8009270:	5c5b      	ldrb	r3, [r3, r1]
 8009272:	4053      	eors	r3, r2
 8009274:	b2d9      	uxtb	r1, r3
 8009276:	183b      	adds	r3, r7, r0
 8009278:	78db      	ldrb	r3, [r3, #3]
 800927a:	001a      	movs	r2, r3
 800927c:	4ba6      	ldr	r3, [pc, #664]	; (8009518 <mix_sub_columns+0x3c8>)
 800927e:	5c9a      	ldrb	r2, [r3, r2]
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	3304      	adds	r3, #4
 8009284:	404a      	eors	r2, r1
 8009286:	b2d2      	uxtb	r2, r2
 8009288:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800928a:	183b      	adds	r3, r7, r0
 800928c:	791b      	ldrb	r3, [r3, #4]
 800928e:	001a      	movs	r2, r3
 8009290:	4ba1      	ldr	r3, [pc, #644]	; (8009518 <mix_sub_columns+0x3c8>)
 8009292:	5c9a      	ldrb	r2, [r3, r2]
 8009294:	183b      	adds	r3, r7, r0
 8009296:	7a5b      	ldrb	r3, [r3, #9]
 8009298:	0019      	movs	r1, r3
 800929a:	4b9d      	ldr	r3, [pc, #628]	; (8009510 <mix_sub_columns+0x3c0>)
 800929c:	5c5b      	ldrb	r3, [r3, r1]
 800929e:	4053      	eors	r3, r2
 80092a0:	b2da      	uxtb	r2, r3
 80092a2:	183b      	adds	r3, r7, r0
 80092a4:	7b9b      	ldrb	r3, [r3, #14]
 80092a6:	0019      	movs	r1, r3
 80092a8:	4b9a      	ldr	r3, [pc, #616]	; (8009514 <mix_sub_columns+0x3c4>)
 80092aa:	5c5b      	ldrb	r3, [r3, r1]
 80092ac:	4053      	eors	r3, r2
 80092ae:	b2d9      	uxtb	r1, r3
 80092b0:	183b      	adds	r3, r7, r0
 80092b2:	78db      	ldrb	r3, [r3, #3]
 80092b4:	001a      	movs	r2, r3
 80092b6:	4b98      	ldr	r3, [pc, #608]	; (8009518 <mix_sub_columns+0x3c8>)
 80092b8:	5c9a      	ldrb	r2, [r3, r2]
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	3305      	adds	r3, #5
 80092be:	404a      	eors	r2, r1
 80092c0:	b2d2      	uxtb	r2, r2
 80092c2:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 80092c4:	183b      	adds	r3, r7, r0
 80092c6:	791b      	ldrb	r3, [r3, #4]
 80092c8:	001a      	movs	r2, r3
 80092ca:	4b93      	ldr	r3, [pc, #588]	; (8009518 <mix_sub_columns+0x3c8>)
 80092cc:	5c9a      	ldrb	r2, [r3, r2]
 80092ce:	183b      	adds	r3, r7, r0
 80092d0:	7a5b      	ldrb	r3, [r3, #9]
 80092d2:	0019      	movs	r1, r3
 80092d4:	4b90      	ldr	r3, [pc, #576]	; (8009518 <mix_sub_columns+0x3c8>)
 80092d6:	5c5b      	ldrb	r3, [r3, r1]
 80092d8:	4053      	eors	r3, r2
 80092da:	b2da      	uxtb	r2, r3
 80092dc:	183b      	adds	r3, r7, r0
 80092de:	7b9b      	ldrb	r3, [r3, #14]
 80092e0:	0019      	movs	r1, r3
 80092e2:	4b8b      	ldr	r3, [pc, #556]	; (8009510 <mix_sub_columns+0x3c0>)
 80092e4:	5c5b      	ldrb	r3, [r3, r1]
 80092e6:	4053      	eors	r3, r2
 80092e8:	b2d9      	uxtb	r1, r3
 80092ea:	183b      	adds	r3, r7, r0
 80092ec:	78db      	ldrb	r3, [r3, #3]
 80092ee:	001a      	movs	r2, r3
 80092f0:	4b88      	ldr	r3, [pc, #544]	; (8009514 <mix_sub_columns+0x3c4>)
 80092f2:	5c9a      	ldrb	r2, [r3, r2]
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	3306      	adds	r3, #6
 80092f8:	404a      	eors	r2, r1
 80092fa:	b2d2      	uxtb	r2, r2
 80092fc:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 80092fe:	183b      	adds	r3, r7, r0
 8009300:	791b      	ldrb	r3, [r3, #4]
 8009302:	001a      	movs	r2, r3
 8009304:	4b83      	ldr	r3, [pc, #524]	; (8009514 <mix_sub_columns+0x3c4>)
 8009306:	5c9a      	ldrb	r2, [r3, r2]
 8009308:	183b      	adds	r3, r7, r0
 800930a:	7a5b      	ldrb	r3, [r3, #9]
 800930c:	0019      	movs	r1, r3
 800930e:	4b82      	ldr	r3, [pc, #520]	; (8009518 <mix_sub_columns+0x3c8>)
 8009310:	5c5b      	ldrb	r3, [r3, r1]
 8009312:	4053      	eors	r3, r2
 8009314:	b2da      	uxtb	r2, r3
 8009316:	183b      	adds	r3, r7, r0
 8009318:	7b9b      	ldrb	r3, [r3, #14]
 800931a:	0019      	movs	r1, r3
 800931c:	4b7e      	ldr	r3, [pc, #504]	; (8009518 <mix_sub_columns+0x3c8>)
 800931e:	5c5b      	ldrb	r3, [r3, r1]
 8009320:	4053      	eors	r3, r2
 8009322:	b2d9      	uxtb	r1, r3
 8009324:	183b      	adds	r3, r7, r0
 8009326:	78db      	ldrb	r3, [r3, #3]
 8009328:	001a      	movs	r2, r3
 800932a:	4b79      	ldr	r3, [pc, #484]	; (8009510 <mix_sub_columns+0x3c0>)
 800932c:	5c9a      	ldrb	r2, [r3, r2]
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	3307      	adds	r3, #7
 8009332:	404a      	eors	r2, r1
 8009334:	b2d2      	uxtb	r2, r2
 8009336:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 8009338:	183b      	adds	r3, r7, r0
 800933a:	7a1b      	ldrb	r3, [r3, #8]
 800933c:	001a      	movs	r2, r3
 800933e:	4b74      	ldr	r3, [pc, #464]	; (8009510 <mix_sub_columns+0x3c0>)
 8009340:	5c9a      	ldrb	r2, [r3, r2]
 8009342:	183b      	adds	r3, r7, r0
 8009344:	7b5b      	ldrb	r3, [r3, #13]
 8009346:	0019      	movs	r1, r3
 8009348:	4b72      	ldr	r3, [pc, #456]	; (8009514 <mix_sub_columns+0x3c4>)
 800934a:	5c5b      	ldrb	r3, [r3, r1]
 800934c:	4053      	eors	r3, r2
 800934e:	b2da      	uxtb	r2, r3
 8009350:	183b      	adds	r3, r7, r0
 8009352:	789b      	ldrb	r3, [r3, #2]
 8009354:	0019      	movs	r1, r3
 8009356:	4b70      	ldr	r3, [pc, #448]	; (8009518 <mix_sub_columns+0x3c8>)
 8009358:	5c5b      	ldrb	r3, [r3, r1]
 800935a:	4053      	eors	r3, r2
 800935c:	b2d9      	uxtb	r1, r3
 800935e:	183b      	adds	r3, r7, r0
 8009360:	79db      	ldrb	r3, [r3, #7]
 8009362:	001a      	movs	r2, r3
 8009364:	4b6c      	ldr	r3, [pc, #432]	; (8009518 <mix_sub_columns+0x3c8>)
 8009366:	5c9a      	ldrb	r2, [r3, r2]
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	3308      	adds	r3, #8
 800936c:	404a      	eors	r2, r1
 800936e:	b2d2      	uxtb	r2, r2
 8009370:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 8009372:	183b      	adds	r3, r7, r0
 8009374:	7a1b      	ldrb	r3, [r3, #8]
 8009376:	001a      	movs	r2, r3
 8009378:	4b67      	ldr	r3, [pc, #412]	; (8009518 <mix_sub_columns+0x3c8>)
 800937a:	5c9a      	ldrb	r2, [r3, r2]
 800937c:	183b      	adds	r3, r7, r0
 800937e:	7b5b      	ldrb	r3, [r3, #13]
 8009380:	0019      	movs	r1, r3
 8009382:	4b63      	ldr	r3, [pc, #396]	; (8009510 <mix_sub_columns+0x3c0>)
 8009384:	5c5b      	ldrb	r3, [r3, r1]
 8009386:	4053      	eors	r3, r2
 8009388:	b2da      	uxtb	r2, r3
 800938a:	183b      	adds	r3, r7, r0
 800938c:	789b      	ldrb	r3, [r3, #2]
 800938e:	0019      	movs	r1, r3
 8009390:	4b60      	ldr	r3, [pc, #384]	; (8009514 <mix_sub_columns+0x3c4>)
 8009392:	5c5b      	ldrb	r3, [r3, r1]
 8009394:	4053      	eors	r3, r2
 8009396:	b2d9      	uxtb	r1, r3
 8009398:	183b      	adds	r3, r7, r0
 800939a:	79db      	ldrb	r3, [r3, #7]
 800939c:	001a      	movs	r2, r3
 800939e:	4b5e      	ldr	r3, [pc, #376]	; (8009518 <mix_sub_columns+0x3c8>)
 80093a0:	5c9a      	ldrb	r2, [r3, r2]
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	3309      	adds	r3, #9
 80093a6:	404a      	eors	r2, r1
 80093a8:	b2d2      	uxtb	r2, r2
 80093aa:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 80093ac:	183b      	adds	r3, r7, r0
 80093ae:	7a1b      	ldrb	r3, [r3, #8]
 80093b0:	001a      	movs	r2, r3
 80093b2:	4b59      	ldr	r3, [pc, #356]	; (8009518 <mix_sub_columns+0x3c8>)
 80093b4:	5c9a      	ldrb	r2, [r3, r2]
 80093b6:	183b      	adds	r3, r7, r0
 80093b8:	7b5b      	ldrb	r3, [r3, #13]
 80093ba:	0019      	movs	r1, r3
 80093bc:	4b56      	ldr	r3, [pc, #344]	; (8009518 <mix_sub_columns+0x3c8>)
 80093be:	5c5b      	ldrb	r3, [r3, r1]
 80093c0:	4053      	eors	r3, r2
 80093c2:	b2da      	uxtb	r2, r3
 80093c4:	183b      	adds	r3, r7, r0
 80093c6:	789b      	ldrb	r3, [r3, #2]
 80093c8:	0019      	movs	r1, r3
 80093ca:	4b51      	ldr	r3, [pc, #324]	; (8009510 <mix_sub_columns+0x3c0>)
 80093cc:	5c5b      	ldrb	r3, [r3, r1]
 80093ce:	4053      	eors	r3, r2
 80093d0:	b2d9      	uxtb	r1, r3
 80093d2:	183b      	adds	r3, r7, r0
 80093d4:	79db      	ldrb	r3, [r3, #7]
 80093d6:	001a      	movs	r2, r3
 80093d8:	4b4e      	ldr	r3, [pc, #312]	; (8009514 <mix_sub_columns+0x3c4>)
 80093da:	5c9a      	ldrb	r2, [r3, r2]
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	330a      	adds	r3, #10
 80093e0:	404a      	eors	r2, r1
 80093e2:	b2d2      	uxtb	r2, r2
 80093e4:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 80093e6:	183b      	adds	r3, r7, r0
 80093e8:	7a1b      	ldrb	r3, [r3, #8]
 80093ea:	001a      	movs	r2, r3
 80093ec:	4b49      	ldr	r3, [pc, #292]	; (8009514 <mix_sub_columns+0x3c4>)
 80093ee:	5c9a      	ldrb	r2, [r3, r2]
 80093f0:	183b      	adds	r3, r7, r0
 80093f2:	7b5b      	ldrb	r3, [r3, #13]
 80093f4:	0019      	movs	r1, r3
 80093f6:	4b48      	ldr	r3, [pc, #288]	; (8009518 <mix_sub_columns+0x3c8>)
 80093f8:	5c5b      	ldrb	r3, [r3, r1]
 80093fa:	4053      	eors	r3, r2
 80093fc:	b2da      	uxtb	r2, r3
 80093fe:	183b      	adds	r3, r7, r0
 8009400:	789b      	ldrb	r3, [r3, #2]
 8009402:	0019      	movs	r1, r3
 8009404:	4b44      	ldr	r3, [pc, #272]	; (8009518 <mix_sub_columns+0x3c8>)
 8009406:	5c5b      	ldrb	r3, [r3, r1]
 8009408:	4053      	eors	r3, r2
 800940a:	b2d9      	uxtb	r1, r3
 800940c:	183b      	adds	r3, r7, r0
 800940e:	79db      	ldrb	r3, [r3, #7]
 8009410:	001a      	movs	r2, r3
 8009412:	4b3f      	ldr	r3, [pc, #252]	; (8009510 <mix_sub_columns+0x3c0>)
 8009414:	5c9a      	ldrb	r2, [r3, r2]
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	330b      	adds	r3, #11
 800941a:	404a      	eors	r2, r1
 800941c:	b2d2      	uxtb	r2, r2
 800941e:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 8009420:	183b      	adds	r3, r7, r0
 8009422:	7b1b      	ldrb	r3, [r3, #12]
 8009424:	001a      	movs	r2, r3
 8009426:	4b3a      	ldr	r3, [pc, #232]	; (8009510 <mix_sub_columns+0x3c0>)
 8009428:	5c9a      	ldrb	r2, [r3, r2]
 800942a:	183b      	adds	r3, r7, r0
 800942c:	785b      	ldrb	r3, [r3, #1]
 800942e:	0019      	movs	r1, r3
 8009430:	4b38      	ldr	r3, [pc, #224]	; (8009514 <mix_sub_columns+0x3c4>)
 8009432:	5c5b      	ldrb	r3, [r3, r1]
 8009434:	4053      	eors	r3, r2
 8009436:	b2da      	uxtb	r2, r3
 8009438:	183b      	adds	r3, r7, r0
 800943a:	799b      	ldrb	r3, [r3, #6]
 800943c:	0019      	movs	r1, r3
 800943e:	4b36      	ldr	r3, [pc, #216]	; (8009518 <mix_sub_columns+0x3c8>)
 8009440:	5c5b      	ldrb	r3, [r3, r1]
 8009442:	4053      	eors	r3, r2
 8009444:	b2d9      	uxtb	r1, r3
 8009446:	183b      	adds	r3, r7, r0
 8009448:	7adb      	ldrb	r3, [r3, #11]
 800944a:	001a      	movs	r2, r3
 800944c:	4b32      	ldr	r3, [pc, #200]	; (8009518 <mix_sub_columns+0x3c8>)
 800944e:	5c9a      	ldrb	r2, [r3, r2]
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	330c      	adds	r3, #12
 8009454:	404a      	eors	r2, r1
 8009456:	b2d2      	uxtb	r2, r2
 8009458:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800945a:	183b      	adds	r3, r7, r0
 800945c:	7b1b      	ldrb	r3, [r3, #12]
 800945e:	001a      	movs	r2, r3
 8009460:	4b2d      	ldr	r3, [pc, #180]	; (8009518 <mix_sub_columns+0x3c8>)
 8009462:	5c9a      	ldrb	r2, [r3, r2]
 8009464:	183b      	adds	r3, r7, r0
 8009466:	785b      	ldrb	r3, [r3, #1]
 8009468:	0019      	movs	r1, r3
 800946a:	4b29      	ldr	r3, [pc, #164]	; (8009510 <mix_sub_columns+0x3c0>)
 800946c:	5c5b      	ldrb	r3, [r3, r1]
 800946e:	4053      	eors	r3, r2
 8009470:	b2da      	uxtb	r2, r3
 8009472:	183b      	adds	r3, r7, r0
 8009474:	799b      	ldrb	r3, [r3, #6]
 8009476:	0019      	movs	r1, r3
 8009478:	4b26      	ldr	r3, [pc, #152]	; (8009514 <mix_sub_columns+0x3c4>)
 800947a:	5c5b      	ldrb	r3, [r3, r1]
 800947c:	4053      	eors	r3, r2
 800947e:	b2d9      	uxtb	r1, r3
 8009480:	183b      	adds	r3, r7, r0
 8009482:	7adb      	ldrb	r3, [r3, #11]
 8009484:	001a      	movs	r2, r3
 8009486:	4b24      	ldr	r3, [pc, #144]	; (8009518 <mix_sub_columns+0x3c8>)
 8009488:	5c9a      	ldrb	r2, [r3, r2]
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	330d      	adds	r3, #13
 800948e:	404a      	eors	r2, r1
 8009490:	b2d2      	uxtb	r2, r2
 8009492:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 8009494:	183b      	adds	r3, r7, r0
 8009496:	7b1b      	ldrb	r3, [r3, #12]
 8009498:	001a      	movs	r2, r3
 800949a:	4b1f      	ldr	r3, [pc, #124]	; (8009518 <mix_sub_columns+0x3c8>)
 800949c:	5c9a      	ldrb	r2, [r3, r2]
 800949e:	183b      	adds	r3, r7, r0
 80094a0:	785b      	ldrb	r3, [r3, #1]
 80094a2:	0019      	movs	r1, r3
 80094a4:	4b1c      	ldr	r3, [pc, #112]	; (8009518 <mix_sub_columns+0x3c8>)
 80094a6:	5c5b      	ldrb	r3, [r3, r1]
 80094a8:	4053      	eors	r3, r2
 80094aa:	b2da      	uxtb	r2, r3
 80094ac:	183b      	adds	r3, r7, r0
 80094ae:	799b      	ldrb	r3, [r3, #6]
 80094b0:	0019      	movs	r1, r3
 80094b2:	4b17      	ldr	r3, [pc, #92]	; (8009510 <mix_sub_columns+0x3c0>)
 80094b4:	5c5b      	ldrb	r3, [r3, r1]
 80094b6:	4053      	eors	r3, r2
 80094b8:	b2d9      	uxtb	r1, r3
 80094ba:	183b      	adds	r3, r7, r0
 80094bc:	7adb      	ldrb	r3, [r3, #11]
 80094be:	001a      	movs	r2, r3
 80094c0:	4b14      	ldr	r3, [pc, #80]	; (8009514 <mix_sub_columns+0x3c4>)
 80094c2:	5c9a      	ldrb	r2, [r3, r2]
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	330e      	adds	r3, #14
 80094c8:	404a      	eors	r2, r1
 80094ca:	b2d2      	uxtb	r2, r2
 80094cc:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 80094ce:	183b      	adds	r3, r7, r0
 80094d0:	7b1b      	ldrb	r3, [r3, #12]
 80094d2:	001a      	movs	r2, r3
 80094d4:	4b0f      	ldr	r3, [pc, #60]	; (8009514 <mix_sub_columns+0x3c4>)
 80094d6:	5c9a      	ldrb	r2, [r3, r2]
 80094d8:	183b      	adds	r3, r7, r0
 80094da:	785b      	ldrb	r3, [r3, #1]
 80094dc:	0019      	movs	r1, r3
 80094de:	4b0e      	ldr	r3, [pc, #56]	; (8009518 <mix_sub_columns+0x3c8>)
 80094e0:	5c5b      	ldrb	r3, [r3, r1]
 80094e2:	4053      	eors	r3, r2
 80094e4:	b2da      	uxtb	r2, r3
 80094e6:	183b      	adds	r3, r7, r0
 80094e8:	799b      	ldrb	r3, [r3, #6]
 80094ea:	0019      	movs	r1, r3
 80094ec:	4b0a      	ldr	r3, [pc, #40]	; (8009518 <mix_sub_columns+0x3c8>)
 80094ee:	5c5b      	ldrb	r3, [r3, r1]
 80094f0:	4053      	eors	r3, r2
 80094f2:	b2d9      	uxtb	r1, r3
 80094f4:	183b      	adds	r3, r7, r0
 80094f6:	7adb      	ldrb	r3, [r3, #11]
 80094f8:	001a      	movs	r2, r3
 80094fa:	4b05      	ldr	r3, [pc, #20]	; (8009510 <mix_sub_columns+0x3c0>)
 80094fc:	5c9a      	ldrb	r2, [r3, r2]
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	330f      	adds	r3, #15
 8009502:	404a      	eors	r2, r1
 8009504:	b2d2      	uxtb	r2, r2
 8009506:	701a      	strb	r2, [r3, #0]
  }
 8009508:	46c0      	nop			; (mov r8, r8)
 800950a:	46bd      	mov	sp, r7
 800950c:	b007      	add	sp, #28
 800950e:	bd90      	pop	{r4, r7, pc}
 8009510:	08021588 	.word	0x08021588
 8009514:	08021688 	.word	0x08021688
 8009518:	08021488 	.word	0x08021488

0800951c <aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type aes_set_key( const uint8_t key[], length_type keylen, aes_context ctx[1] )
{
 800951c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800951e:	b087      	sub	sp, #28
 8009520:	af00      	add	r7, sp, #0
 8009522:	60f8      	str	r0, [r7, #12]
 8009524:	607a      	str	r2, [r7, #4]
 8009526:	200b      	movs	r0, #11
 8009528:	183b      	adds	r3, r7, r0
 800952a:	1c0a      	adds	r2, r1, #0
 800952c:	701a      	strb	r2, [r3, #0]
    uint8_t cc, rc, hi;

    switch( keylen )
 800952e:	183b      	adds	r3, r7, r0
 8009530:	781b      	ldrb	r3, [r3, #0]
 8009532:	2b18      	cmp	r3, #24
 8009534:	d009      	beq.n	800954a <aes_set_key+0x2e>
 8009536:	2b20      	cmp	r3, #32
 8009538:	d007      	beq.n	800954a <aes_set_key+0x2e>
 800953a:	2b10      	cmp	r3, #16
 800953c:	d005      	beq.n	800954a <aes_set_key+0x2e>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	22f0      	movs	r2, #240	; 0xf0
 8009542:	2100      	movs	r1, #0
 8009544:	5499      	strb	r1, [r3, r2]
        return ( uint8_t )-1;
 8009546:	23ff      	movs	r3, #255	; 0xff
 8009548:	e113      	b.n	8009772 <aes_set_key+0x256>
        break;
 800954a:	46c0      	nop			; (mov r8, r8)
    }
    block_copy_nn(ctx->ksch, key, keylen);
 800954c:	6878      	ldr	r0, [r7, #4]
 800954e:	240b      	movs	r4, #11
 8009550:	193b      	adds	r3, r7, r4
 8009552:	781a      	ldrb	r2, [r3, #0]
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	0019      	movs	r1, r3
 8009558:	f7ff fbc0 	bl	8008cdc <copy_block_nn>
    hi = (keylen + 28) << 2;
 800955c:	0020      	movs	r0, r4
 800955e:	183b      	adds	r3, r7, r0
 8009560:	781b      	ldrb	r3, [r3, #0]
 8009562:	331c      	adds	r3, #28
 8009564:	b2da      	uxtb	r2, r3
 8009566:	2111      	movs	r1, #17
 8009568:	187b      	adds	r3, r7, r1
 800956a:	0092      	lsls	r2, r2, #2
 800956c:	701a      	strb	r2, [r3, #0]
    ctx->rnd = (hi >> 4) - 1;
 800956e:	187b      	adds	r3, r7, r1
 8009570:	781b      	ldrb	r3, [r3, #0]
 8009572:	091b      	lsrs	r3, r3, #4
 8009574:	b2db      	uxtb	r3, r3
 8009576:	3b01      	subs	r3, #1
 8009578:	b2d9      	uxtb	r1, r3
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	22f0      	movs	r2, #240	; 0xf0
 800957e:	5499      	strb	r1, [r3, r2]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8009580:	2317      	movs	r3, #23
 8009582:	18fb      	adds	r3, r7, r3
 8009584:	183a      	adds	r2, r7, r0
 8009586:	7812      	ldrb	r2, [r2, #0]
 8009588:	701a      	strb	r2, [r3, #0]
 800958a:	2316      	movs	r3, #22
 800958c:	18fb      	adds	r3, r7, r3
 800958e:	2201      	movs	r2, #1
 8009590:	701a      	strb	r2, [r3, #0]
 8009592:	e0e4      	b.n	800975e <aes_set_key+0x242>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 8009594:	2017      	movs	r0, #23
 8009596:	183b      	adds	r3, r7, r0
 8009598:	781b      	ldrb	r3, [r3, #0]
 800959a:	1f1a      	subs	r2, r3, #4
 800959c:	2315      	movs	r3, #21
 800959e:	18fb      	adds	r3, r7, r3
 80095a0:	6879      	ldr	r1, [r7, #4]
 80095a2:	5c8a      	ldrb	r2, [r1, r2]
 80095a4:	701a      	strb	r2, [r3, #0]
        t1 = ctx->ksch[cc - 3];
 80095a6:	183b      	adds	r3, r7, r0
 80095a8:	781b      	ldrb	r3, [r3, #0]
 80095aa:	1eda      	subs	r2, r3, #3
 80095ac:	2314      	movs	r3, #20
 80095ae:	18fb      	adds	r3, r7, r3
 80095b0:	6879      	ldr	r1, [r7, #4]
 80095b2:	5c8a      	ldrb	r2, [r1, r2]
 80095b4:	701a      	strb	r2, [r3, #0]
        t2 = ctx->ksch[cc - 2];
 80095b6:	183b      	adds	r3, r7, r0
 80095b8:	781b      	ldrb	r3, [r3, #0]
 80095ba:	1e9a      	subs	r2, r3, #2
 80095bc:	2313      	movs	r3, #19
 80095be:	18fb      	adds	r3, r7, r3
 80095c0:	6879      	ldr	r1, [r7, #4]
 80095c2:	5c8a      	ldrb	r2, [r1, r2]
 80095c4:	701a      	strb	r2, [r3, #0]
        t3 = ctx->ksch[cc - 1];
 80095c6:	183b      	adds	r3, r7, r0
 80095c8:	781b      	ldrb	r3, [r3, #0]
 80095ca:	1e5a      	subs	r2, r3, #1
 80095cc:	2312      	movs	r3, #18
 80095ce:	18fb      	adds	r3, r7, r3
 80095d0:	6879      	ldr	r1, [r7, #4]
 80095d2:	5c8a      	ldrb	r2, [r1, r2]
 80095d4:	701a      	strb	r2, [r3, #0]
        if( cc % keylen == 0 )
 80095d6:	183a      	adds	r2, r7, r0
 80095d8:	230b      	movs	r3, #11
 80095da:	18fb      	adds	r3, r7, r3
 80095dc:	7812      	ldrb	r2, [r2, #0]
 80095de:	781b      	ldrb	r3, [r3, #0]
 80095e0:	0019      	movs	r1, r3
 80095e2:	0010      	movs	r0, r2
 80095e4:	f7f6 fe1e 	bl	8000224 <__aeabi_uidivmod>
 80095e8:	000b      	movs	r3, r1
 80095ea:	b2db      	uxtb	r3, r3
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d13e      	bne.n	800966e <aes_set_key+0x152>
        {
            tt = t0;
 80095f0:	2410      	movs	r4, #16
 80095f2:	193b      	adds	r3, r7, r4
 80095f4:	2015      	movs	r0, #21
 80095f6:	183a      	adds	r2, r7, r0
 80095f8:	7812      	ldrb	r2, [r2, #0]
 80095fa:	701a      	strb	r2, [r3, #0]
            t0 = s_box(t1) ^ rc;
 80095fc:	2514      	movs	r5, #20
 80095fe:	197b      	adds	r3, r7, r5
 8009600:	781b      	ldrb	r3, [r3, #0]
 8009602:	4a5e      	ldr	r2, [pc, #376]	; (800977c <aes_set_key+0x260>)
 8009604:	5cd1      	ldrb	r1, [r2, r3]
 8009606:	183b      	adds	r3, r7, r0
 8009608:	2016      	movs	r0, #22
 800960a:	183a      	adds	r2, r7, r0
 800960c:	7812      	ldrb	r2, [r2, #0]
 800960e:	404a      	eors	r2, r1
 8009610:	701a      	strb	r2, [r3, #0]
            t1 = s_box(t2);
 8009612:	2613      	movs	r6, #19
 8009614:	19bb      	adds	r3, r7, r6
 8009616:	781a      	ldrb	r2, [r3, #0]
 8009618:	197b      	adds	r3, r7, r5
 800961a:	4958      	ldr	r1, [pc, #352]	; (800977c <aes_set_key+0x260>)
 800961c:	5c8a      	ldrb	r2, [r1, r2]
 800961e:	701a      	strb	r2, [r3, #0]
            t2 = s_box(t3);
 8009620:	2512      	movs	r5, #18
 8009622:	197b      	adds	r3, r7, r5
 8009624:	781a      	ldrb	r2, [r3, #0]
 8009626:	19bb      	adds	r3, r7, r6
 8009628:	4954      	ldr	r1, [pc, #336]	; (800977c <aes_set_key+0x260>)
 800962a:	5c8a      	ldrb	r2, [r1, r2]
 800962c:	701a      	strb	r2, [r3, #0]
            t3 = s_box(tt);
 800962e:	193b      	adds	r3, r7, r4
 8009630:	781a      	ldrb	r2, [r3, #0]
 8009632:	197b      	adds	r3, r7, r5
 8009634:	4951      	ldr	r1, [pc, #324]	; (800977c <aes_set_key+0x260>)
 8009636:	5c8a      	ldrb	r2, [r1, r2]
 8009638:	701a      	strb	r2, [r3, #0]
            rc = f2(rc);
 800963a:	183b      	adds	r3, r7, r0
 800963c:	781b      	ldrb	r3, [r3, #0]
 800963e:	005b      	lsls	r3, r3, #1
 8009640:	b25a      	sxtb	r2, r3
 8009642:	0004      	movs	r4, r0
 8009644:	183b      	adds	r3, r7, r0
 8009646:	781b      	ldrb	r3, [r3, #0]
 8009648:	09db      	lsrs	r3, r3, #7
 800964a:	b2db      	uxtb	r3, r3
 800964c:	1c19      	adds	r1, r3, #0
 800964e:	1c0b      	adds	r3, r1, #0
 8009650:	18db      	adds	r3, r3, r3
 8009652:	185b      	adds	r3, r3, r1
 8009654:	1c19      	adds	r1, r3, #0
 8009656:	00c8      	lsls	r0, r1, #3
 8009658:	1c19      	adds	r1, r3, #0
 800965a:	1c03      	adds	r3, r0, #0
 800965c:	18cb      	adds	r3, r1, r3
 800965e:	b2db      	uxtb	r3, r3
 8009660:	b25b      	sxtb	r3, r3
 8009662:	4053      	eors	r3, r2
 8009664:	b25a      	sxtb	r2, r3
 8009666:	0020      	movs	r0, r4
 8009668:	183b      	adds	r3, r7, r0
 800966a:	701a      	strb	r2, [r3, #0]
 800966c:	e02e      	b.n	80096cc <aes_set_key+0x1b0>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 800966e:	230b      	movs	r3, #11
 8009670:	18fb      	adds	r3, r7, r3
 8009672:	781b      	ldrb	r3, [r3, #0]
 8009674:	2b18      	cmp	r3, #24
 8009676:	d929      	bls.n	80096cc <aes_set_key+0x1b0>
 8009678:	2317      	movs	r3, #23
 800967a:	18fa      	adds	r2, r7, r3
 800967c:	230b      	movs	r3, #11
 800967e:	18fb      	adds	r3, r7, r3
 8009680:	7812      	ldrb	r2, [r2, #0]
 8009682:	781b      	ldrb	r3, [r3, #0]
 8009684:	0019      	movs	r1, r3
 8009686:	0010      	movs	r0, r2
 8009688:	f7f6 fdcc 	bl	8000224 <__aeabi_uidivmod>
 800968c:	000b      	movs	r3, r1
 800968e:	b2db      	uxtb	r3, r3
 8009690:	2b10      	cmp	r3, #16
 8009692:	d11b      	bne.n	80096cc <aes_set_key+0x1b0>
        {
            t0 = s_box(t0);
 8009694:	2115      	movs	r1, #21
 8009696:	187b      	adds	r3, r7, r1
 8009698:	781a      	ldrb	r2, [r3, #0]
 800969a:	187b      	adds	r3, r7, r1
 800969c:	4937      	ldr	r1, [pc, #220]	; (800977c <aes_set_key+0x260>)
 800969e:	5c8a      	ldrb	r2, [r1, r2]
 80096a0:	701a      	strb	r2, [r3, #0]
            t1 = s_box(t1);
 80096a2:	2114      	movs	r1, #20
 80096a4:	187b      	adds	r3, r7, r1
 80096a6:	781a      	ldrb	r2, [r3, #0]
 80096a8:	187b      	adds	r3, r7, r1
 80096aa:	4934      	ldr	r1, [pc, #208]	; (800977c <aes_set_key+0x260>)
 80096ac:	5c8a      	ldrb	r2, [r1, r2]
 80096ae:	701a      	strb	r2, [r3, #0]
            t2 = s_box(t2);
 80096b0:	2113      	movs	r1, #19
 80096b2:	187b      	adds	r3, r7, r1
 80096b4:	781a      	ldrb	r2, [r3, #0]
 80096b6:	187b      	adds	r3, r7, r1
 80096b8:	4930      	ldr	r1, [pc, #192]	; (800977c <aes_set_key+0x260>)
 80096ba:	5c8a      	ldrb	r2, [r1, r2]
 80096bc:	701a      	strb	r2, [r3, #0]
            t3 = s_box(t3);
 80096be:	2112      	movs	r1, #18
 80096c0:	187b      	adds	r3, r7, r1
 80096c2:	781a      	ldrb	r2, [r3, #0]
 80096c4:	187b      	adds	r3, r7, r1
 80096c6:	492d      	ldr	r1, [pc, #180]	; (800977c <aes_set_key+0x260>)
 80096c8:	5c8a      	ldrb	r2, [r1, r2]
 80096ca:	701a      	strb	r2, [r3, #0]
        }
        tt = cc - keylen;
 80096cc:	2410      	movs	r4, #16
 80096ce:	193b      	adds	r3, r7, r4
 80096d0:	2017      	movs	r0, #23
 80096d2:	1839      	adds	r1, r7, r0
 80096d4:	220b      	movs	r2, #11
 80096d6:	18ba      	adds	r2, r7, r2
 80096d8:	7809      	ldrb	r1, [r1, #0]
 80096da:	7812      	ldrb	r2, [r2, #0]
 80096dc:	1a8a      	subs	r2, r1, r2
 80096de:	701a      	strb	r2, [r3, #0]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 80096e0:	193b      	adds	r3, r7, r4
 80096e2:	781b      	ldrb	r3, [r3, #0]
 80096e4:	687a      	ldr	r2, [r7, #4]
 80096e6:	5cd1      	ldrb	r1, [r2, r3]
 80096e8:	183b      	adds	r3, r7, r0
 80096ea:	781b      	ldrb	r3, [r3, #0]
 80096ec:	2215      	movs	r2, #21
 80096ee:	18ba      	adds	r2, r7, r2
 80096f0:	7812      	ldrb	r2, [r2, #0]
 80096f2:	404a      	eors	r2, r1
 80096f4:	b2d1      	uxtb	r1, r2
 80096f6:	687a      	ldr	r2, [r7, #4]
 80096f8:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 80096fa:	193b      	adds	r3, r7, r4
 80096fc:	781b      	ldrb	r3, [r3, #0]
 80096fe:	3301      	adds	r3, #1
 8009700:	687a      	ldr	r2, [r7, #4]
 8009702:	5cd1      	ldrb	r1, [r2, r3]
 8009704:	183b      	adds	r3, r7, r0
 8009706:	781b      	ldrb	r3, [r3, #0]
 8009708:	3301      	adds	r3, #1
 800970a:	2214      	movs	r2, #20
 800970c:	18ba      	adds	r2, r7, r2
 800970e:	7812      	ldrb	r2, [r2, #0]
 8009710:	404a      	eors	r2, r1
 8009712:	b2d1      	uxtb	r1, r2
 8009714:	687a      	ldr	r2, [r7, #4]
 8009716:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 8009718:	193b      	adds	r3, r7, r4
 800971a:	781b      	ldrb	r3, [r3, #0]
 800971c:	3302      	adds	r3, #2
 800971e:	687a      	ldr	r2, [r7, #4]
 8009720:	5cd1      	ldrb	r1, [r2, r3]
 8009722:	183b      	adds	r3, r7, r0
 8009724:	781b      	ldrb	r3, [r3, #0]
 8009726:	3302      	adds	r3, #2
 8009728:	2213      	movs	r2, #19
 800972a:	18ba      	adds	r2, r7, r2
 800972c:	7812      	ldrb	r2, [r2, #0]
 800972e:	404a      	eors	r2, r1
 8009730:	b2d1      	uxtb	r1, r2
 8009732:	687a      	ldr	r2, [r7, #4]
 8009734:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 8009736:	193b      	adds	r3, r7, r4
 8009738:	781b      	ldrb	r3, [r3, #0]
 800973a:	3303      	adds	r3, #3
 800973c:	687a      	ldr	r2, [r7, #4]
 800973e:	5cd1      	ldrb	r1, [r2, r3]
 8009740:	183b      	adds	r3, r7, r0
 8009742:	781b      	ldrb	r3, [r3, #0]
 8009744:	3303      	adds	r3, #3
 8009746:	2212      	movs	r2, #18
 8009748:	18ba      	adds	r2, r7, r2
 800974a:	7812      	ldrb	r2, [r2, #0]
 800974c:	404a      	eors	r2, r1
 800974e:	b2d1      	uxtb	r1, r2
 8009750:	687a      	ldr	r2, [r7, #4]
 8009752:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8009754:	183b      	adds	r3, r7, r0
 8009756:	183a      	adds	r2, r7, r0
 8009758:	7812      	ldrb	r2, [r2, #0]
 800975a:	3204      	adds	r2, #4
 800975c:	701a      	strb	r2, [r3, #0]
 800975e:	2317      	movs	r3, #23
 8009760:	18fa      	adds	r2, r7, r3
 8009762:	2311      	movs	r3, #17
 8009764:	18fb      	adds	r3, r7, r3
 8009766:	7812      	ldrb	r2, [r2, #0]
 8009768:	781b      	ldrb	r3, [r3, #0]
 800976a:	429a      	cmp	r2, r3
 800976c:	d200      	bcs.n	8009770 <aes_set_key+0x254>
 800976e:	e711      	b.n	8009594 <aes_set_key+0x78>
    }
    return 0;
 8009770:	2300      	movs	r3, #0
}
 8009772:	0018      	movs	r0, r3
 8009774:	46bd      	mov	sp, r7
 8009776:	b007      	add	sp, #28
 8009778:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800977a:	46c0      	nop			; (mov r8, r8)
 800977c:	08021488 	.word	0x08021488

08009780 <aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const aes_context ctx[1] )
{
 8009780:	b5b0      	push	{r4, r5, r7, lr}
 8009782:	b08a      	sub	sp, #40	; 0x28
 8009784:	af00      	add	r7, sp, #0
 8009786:	60f8      	str	r0, [r7, #12]
 8009788:	60b9      	str	r1, [r7, #8]
 800978a:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	22f0      	movs	r2, #240	; 0xf0
 8009790:	5c9b      	ldrb	r3, [r3, r2]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d03a      	beq.n	800980c <aes_encrypt+0x8c>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 8009796:	687a      	ldr	r2, [r7, #4]
 8009798:	68f9      	ldr	r1, [r7, #12]
 800979a:	2314      	movs	r3, #20
 800979c:	18fb      	adds	r3, r7, r3
 800979e:	0018      	movs	r0, r3
 80097a0:	f7ff fb6d 	bl	8008e7e <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 80097a4:	2327      	movs	r3, #39	; 0x27
 80097a6:	18fb      	adds	r3, r7, r3
 80097a8:	2201      	movs	r2, #1
 80097aa:	701a      	strb	r2, [r3, #0]
 80097ac:	e014      	b.n	80097d8 <aes_encrypt+0x58>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 80097ae:	2514      	movs	r5, #20
 80097b0:	197b      	adds	r3, r7, r5
 80097b2:	0018      	movs	r0, r3
 80097b4:	f7ff fccc 	bl	8009150 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	2427      	movs	r4, #39	; 0x27
 80097bc:	193a      	adds	r2, r7, r4
 80097be:	7812      	ldrb	r2, [r2, #0]
 80097c0:	0112      	lsls	r2, r2, #4
 80097c2:	189a      	adds	r2, r3, r2
 80097c4:	197b      	adds	r3, r7, r5
 80097c6:	0011      	movs	r1, r2
 80097c8:	0018      	movs	r0, r3
 80097ca:	f7ff fc0f 	bl	8008fec <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 80097ce:	193b      	adds	r3, r7, r4
 80097d0:	193a      	adds	r2, r7, r4
 80097d2:	7812      	ldrb	r2, [r2, #0]
 80097d4:	3201      	adds	r2, #1
 80097d6:	701a      	strb	r2, [r3, #0]
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	22f0      	movs	r2, #240	; 0xf0
 80097dc:	5c9b      	ldrb	r3, [r3, r2]
 80097de:	2227      	movs	r2, #39	; 0x27
 80097e0:	18ba      	adds	r2, r7, r2
 80097e2:	7812      	ldrb	r2, [r2, #0]
 80097e4:	429a      	cmp	r2, r3
 80097e6:	d3e2      	bcc.n	80097ae <aes_encrypt+0x2e>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 80097e8:	2414      	movs	r4, #20
 80097ea:	193b      	adds	r3, r7, r4
 80097ec:	0018      	movs	r0, r3
 80097ee:	f7ff fc0d 	bl	800900c <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	2227      	movs	r2, #39	; 0x27
 80097f6:	18ba      	adds	r2, r7, r2
 80097f8:	7812      	ldrb	r2, [r2, #0]
 80097fa:	0112      	lsls	r2, r2, #4
 80097fc:	189a      	adds	r2, r3, r2
 80097fe:	1939      	adds	r1, r7, r4
 8009800:	68bb      	ldr	r3, [r7, #8]
 8009802:	0018      	movs	r0, r3
 8009804:	f7ff fb3b 	bl	8008e7e <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 8009808:	2300      	movs	r3, #0
 800980a:	e000      	b.n	800980e <aes_encrypt+0x8e>
        return ( uint8_t )-1;
 800980c:	23ff      	movs	r3, #255	; 0xff
}
 800980e:	0018      	movs	r0, r3
 8009810:	46bd      	mov	sp, r7
 8009812:	b00a      	add	sp, #40	; 0x28
 8009814:	bdb0      	pop	{r4, r5, r7, pc}

08009816 <AES_CMAC_Init>:
        }                          \
    } while (0) \


void AES_CMAC_Init(AES_CMAC_CTX *ctx)
{
 8009816:	b580      	push	{r7, lr}
 8009818:	b082      	sub	sp, #8
 800981a:	af00      	add	r7, sp, #0
 800981c:	6078      	str	r0, [r7, #4]
            memset1(ctx->X, 0, sizeof ctx->X);
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	33f1      	adds	r3, #241	; 0xf1
 8009822:	2210      	movs	r2, #16
 8009824:	2100      	movs	r1, #0
 8009826:	0018      	movs	r0, r3
 8009828:	f00c f91e 	bl	8015a68 <memset1>
            ctx->M_n = 0;
 800982c:	687a      	ldr	r2, [r7, #4]
 800982e:	238a      	movs	r3, #138	; 0x8a
 8009830:	005b      	lsls	r3, r3, #1
 8009832:	2100      	movs	r1, #0
 8009834:	50d1      	str	r1, [r2, r3]
        memset1(ctx->rijndael.ksch, '\0', 240);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	22f0      	movs	r2, #240	; 0xf0
 800983a:	2100      	movs	r1, #0
 800983c:	0018      	movs	r0, r3
 800983e:	f00c f913 	bl	8015a68 <memset1>
}
 8009842:	46c0      	nop			; (mov r8, r8)
 8009844:	46bd      	mov	sp, r7
 8009846:	b002      	add	sp, #8
 8009848:	bd80      	pop	{r7, pc}

0800984a <AES_CMAC_SetKey>:
    
void AES_CMAC_SetKey(AES_CMAC_CTX *ctx, const uint8_t key[AES_CMAC_KEY_LENGTH])
{
 800984a:	b580      	push	{r7, lr}
 800984c:	b082      	sub	sp, #8
 800984e:	af00      	add	r7, sp, #0
 8009850:	6078      	str	r0, [r7, #4]
 8009852:	6039      	str	r1, [r7, #0]
           //rijndael_set_key_enc_only(&ctx->rijndael, key, 128);
       aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael);
 8009854:	687a      	ldr	r2, [r7, #4]
 8009856:	683b      	ldr	r3, [r7, #0]
 8009858:	2110      	movs	r1, #16
 800985a:	0018      	movs	r0, r3
 800985c:	f7ff fe5e 	bl	800951c <aes_set_key>
}
 8009860:	46c0      	nop			; (mov r8, r8)
 8009862:	46bd      	mov	sp, r7
 8009864:	b002      	add	sp, #8
 8009866:	bd80      	pop	{r7, pc}

08009868 <AES_CMAC_Update>:
    
void AES_CMAC_Update(AES_CMAC_CTX *ctx, const uint8_t *data, uint32_t len)
{
 8009868:	b590      	push	{r4, r7, lr}
 800986a:	b08d      	sub	sp, #52	; 0x34
 800986c:	af00      	add	r7, sp, #0
 800986e:	60f8      	str	r0, [r7, #12]
 8009870:	60b9      	str	r1, [r7, #8]
 8009872:	607a      	str	r2, [r7, #4]
            uint32_t mlen;
        uint8_t in[16];
    
            if (ctx->M_n > 0) {
 8009874:	68fa      	ldr	r2, [r7, #12]
 8009876:	238a      	movs	r3, #138	; 0x8a
 8009878:	005b      	lsls	r3, r3, #1
 800987a:	58d3      	ldr	r3, [r2, r3]
 800987c:	2b00      	cmp	r3, #0
 800987e:	d100      	bne.n	8009882 <AES_CMAC_Update+0x1a>
 8009880:	e097      	b.n	80099b2 <AES_CMAC_Update+0x14a>
                  mlen = MIN(16 - ctx->M_n, len);
 8009882:	68fa      	ldr	r2, [r7, #12]
 8009884:	238a      	movs	r3, #138	; 0x8a
 8009886:	005b      	lsls	r3, r3, #1
 8009888:	58d3      	ldr	r3, [r2, r3]
 800988a:	2210      	movs	r2, #16
 800988c:	1ad2      	subs	r2, r2, r3
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	4293      	cmp	r3, r2
 8009892:	d900      	bls.n	8009896 <AES_CMAC_Update+0x2e>
 8009894:	0013      	movs	r3, r2
 8009896:	627b      	str	r3, [r7, #36]	; 0x24
                    memcpy1(ctx->M_last + ctx->M_n, data, mlen);
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	1c9a      	adds	r2, r3, #2
 800989c:	32ff      	adds	r2, #255	; 0xff
 800989e:	68f9      	ldr	r1, [r7, #12]
 80098a0:	238a      	movs	r3, #138	; 0x8a
 80098a2:	005b      	lsls	r3, r3, #1
 80098a4:	58cb      	ldr	r3, [r1, r3]
 80098a6:	18d3      	adds	r3, r2, r3
 80098a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098aa:	b292      	uxth	r2, r2
 80098ac:	68b9      	ldr	r1, [r7, #8]
 80098ae:	0018      	movs	r0, r3
 80098b0:	f00c f89e 	bl	80159f0 <memcpy1>
                    ctx->M_n += mlen;
 80098b4:	68fa      	ldr	r2, [r7, #12]
 80098b6:	238a      	movs	r3, #138	; 0x8a
 80098b8:	005b      	lsls	r3, r3, #1
 80098ba:	58d2      	ldr	r2, [r2, r3]
 80098bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098be:	18d1      	adds	r1, r2, r3
 80098c0:	68fa      	ldr	r2, [r7, #12]
 80098c2:	238a      	movs	r3, #138	; 0x8a
 80098c4:	005b      	lsls	r3, r3, #1
 80098c6:	50d1      	str	r1, [r2, r3]
                    if (ctx->M_n < 16 || len == mlen)
 80098c8:	68fa      	ldr	r2, [r7, #12]
 80098ca:	238a      	movs	r3, #138	; 0x8a
 80098cc:	005b      	lsls	r3, r3, #1
 80098ce:	58d3      	ldr	r3, [r2, r3]
 80098d0:	2b0f      	cmp	r3, #15
 80098d2:	d800      	bhi.n	80098d6 <AES_CMAC_Update+0x6e>
 80098d4:	e07f      	b.n	80099d6 <AES_CMAC_Update+0x16e>
 80098d6:	687a      	ldr	r2, [r7, #4]
 80098d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098da:	429a      	cmp	r2, r3
 80098dc:	d100      	bne.n	80098e0 <AES_CMAC_Update+0x78>
 80098de:	e07a      	b.n	80099d6 <AES_CMAC_Update+0x16e>
                            return;
                   XOR(ctx->M_last, ctx->X);
 80098e0:	2300      	movs	r3, #0
 80098e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80098e4:	e018      	b.n	8009918 <AES_CMAC_Update+0xb0>
 80098e6:	68fa      	ldr	r2, [r7, #12]
 80098e8:	21f1      	movs	r1, #241	; 0xf1
 80098ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098ec:	18d3      	adds	r3, r2, r3
 80098ee:	185b      	adds	r3, r3, r1
 80098f0:	781a      	ldrb	r2, [r3, #0]
 80098f2:	68f8      	ldr	r0, [r7, #12]
 80098f4:	2302      	movs	r3, #2
 80098f6:	33ff      	adds	r3, #255	; 0xff
 80098f8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80098fa:	1841      	adds	r1, r0, r1
 80098fc:	18cb      	adds	r3, r1, r3
 80098fe:	781b      	ldrb	r3, [r3, #0]
 8009900:	4053      	eors	r3, r2
 8009902:	b2d8      	uxtb	r0, r3
 8009904:	68fa      	ldr	r2, [r7, #12]
 8009906:	21f1      	movs	r1, #241	; 0xf1
 8009908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800990a:	18d3      	adds	r3, r2, r3
 800990c:	185b      	adds	r3, r3, r1
 800990e:	1c02      	adds	r2, r0, #0
 8009910:	701a      	strb	r2, [r3, #0]
 8009912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009914:	3301      	adds	r3, #1
 8009916:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800991a:	2b0f      	cmp	r3, #15
 800991c:	dde3      	ble.n	80098e6 <AES_CMAC_Update+0x7e>
                    //rijndael_encrypt(&ctx->rijndael, ctx->X, ctx->X);
            aes_encrypt( ctx->X, ctx->X, &ctx->rijndael);
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	33f1      	adds	r3, #241	; 0xf1
 8009922:	0018      	movs	r0, r3
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	33f1      	adds	r3, #241	; 0xf1
 8009928:	68fa      	ldr	r2, [r7, #12]
 800992a:	0019      	movs	r1, r3
 800992c:	f7ff ff28 	bl	8009780 <aes_encrypt>
                    data += mlen;
 8009930:	68ba      	ldr	r2, [r7, #8]
 8009932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009934:	18d3      	adds	r3, r2, r3
 8009936:	60bb      	str	r3, [r7, #8]
                    len -= mlen;
 8009938:	687a      	ldr	r2, [r7, #4]
 800993a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800993c:	1ad3      	subs	r3, r2, r3
 800993e:	607b      	str	r3, [r7, #4]
            }
            while (len > 16) {      /* not last block */
 8009940:	e037      	b.n	80099b2 <AES_CMAC_Update+0x14a>

                    XOR(data, ctx->X);
 8009942:	2300      	movs	r3, #0
 8009944:	62bb      	str	r3, [r7, #40]	; 0x28
 8009946:	e015      	b.n	8009974 <AES_CMAC_Update+0x10c>
 8009948:	68fa      	ldr	r2, [r7, #12]
 800994a:	21f1      	movs	r1, #241	; 0xf1
 800994c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800994e:	18d3      	adds	r3, r2, r3
 8009950:	185b      	adds	r3, r3, r1
 8009952:	781a      	ldrb	r2, [r3, #0]
 8009954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009956:	68b9      	ldr	r1, [r7, #8]
 8009958:	18cb      	adds	r3, r1, r3
 800995a:	781b      	ldrb	r3, [r3, #0]
 800995c:	4053      	eors	r3, r2
 800995e:	b2d8      	uxtb	r0, r3
 8009960:	68fa      	ldr	r2, [r7, #12]
 8009962:	21f1      	movs	r1, #241	; 0xf1
 8009964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009966:	18d3      	adds	r3, r2, r3
 8009968:	185b      	adds	r3, r3, r1
 800996a:	1c02      	adds	r2, r0, #0
 800996c:	701a      	strb	r2, [r3, #0]
 800996e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009970:	3301      	adds	r3, #1
 8009972:	62bb      	str	r3, [r7, #40]	; 0x28
 8009974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009976:	2b0f      	cmp	r3, #15
 8009978:	dde6      	ble.n	8009948 <AES_CMAC_Update+0xe0>
                    //rijndael_encrypt(&ctx->rijndael, ctx->X, ctx->X);

                    memcpy1(in, &ctx->X[0], 16); //Bestela ez du ondo iten
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	33f1      	adds	r3, #241	; 0xf1
 800997e:	0019      	movs	r1, r3
 8009980:	2414      	movs	r4, #20
 8009982:	193b      	adds	r3, r7, r4
 8009984:	2210      	movs	r2, #16
 8009986:	0018      	movs	r0, r3
 8009988:	f00c f832 	bl	80159f0 <memcpy1>
            aes_encrypt( in, in, &ctx->rijndael);
 800998c:	68fa      	ldr	r2, [r7, #12]
 800998e:	1939      	adds	r1, r7, r4
 8009990:	193b      	adds	r3, r7, r4
 8009992:	0018      	movs	r0, r3
 8009994:	f7ff fef4 	bl	8009780 <aes_encrypt>
                    memcpy1(&ctx->X[0], in, 16);
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	33f1      	adds	r3, #241	; 0xf1
 800999c:	1939      	adds	r1, r7, r4
 800999e:	2210      	movs	r2, #16
 80099a0:	0018      	movs	r0, r3
 80099a2:	f00c f825 	bl	80159f0 <memcpy1>

                    data += 16;
 80099a6:	68bb      	ldr	r3, [r7, #8]
 80099a8:	3310      	adds	r3, #16
 80099aa:	60bb      	str	r3, [r7, #8]
                    len -= 16;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	3b10      	subs	r3, #16
 80099b0:	607b      	str	r3, [r7, #4]
            while (len > 16) {      /* not last block */
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	2b10      	cmp	r3, #16
 80099b6:	d8c4      	bhi.n	8009942 <AES_CMAC_Update+0xda>
            }
            /* potential last block, save it */
            memcpy1(ctx->M_last, data, len);
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	3302      	adds	r3, #2
 80099bc:	33ff      	adds	r3, #255	; 0xff
 80099be:	687a      	ldr	r2, [r7, #4]
 80099c0:	b292      	uxth	r2, r2
 80099c2:	68b9      	ldr	r1, [r7, #8]
 80099c4:	0018      	movs	r0, r3
 80099c6:	f00c f813 	bl	80159f0 <memcpy1>
            ctx->M_n = len;
 80099ca:	68fa      	ldr	r2, [r7, #12]
 80099cc:	238a      	movs	r3, #138	; 0x8a
 80099ce:	005b      	lsls	r3, r3, #1
 80099d0:	6879      	ldr	r1, [r7, #4]
 80099d2:	50d1      	str	r1, [r2, r3]
 80099d4:	e000      	b.n	80099d8 <AES_CMAC_Update+0x170>
                            return;
 80099d6:	46c0      	nop			; (mov r8, r8)
}
 80099d8:	46bd      	mov	sp, r7
 80099da:	b00d      	add	sp, #52	; 0x34
 80099dc:	bd90      	pop	{r4, r7, pc}

080099de <AES_CMAC_Final>:
   
void AES_CMAC_Final(uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX *ctx)
{
 80099de:	b590      	push	{r4, r7, lr}
 80099e0:	b093      	sub	sp, #76	; 0x4c
 80099e2:	af00      	add	r7, sp, #0
 80099e4:	6078      	str	r0, [r7, #4]
 80099e6:	6039      	str	r1, [r7, #0]
            uint8_t K[16];
        uint8_t in[16];
            /* generate subkey K1 */
            memset1(K, '\0', 16);
 80099e8:	241c      	movs	r4, #28
 80099ea:	193b      	adds	r3, r7, r4
 80099ec:	2210      	movs	r2, #16
 80099ee:	2100      	movs	r1, #0
 80099f0:	0018      	movs	r0, r3
 80099f2:	f00c f839 	bl	8015a68 <memset1>

            //rijndael_encrypt(&ctx->rijndael, K, K);

            aes_encrypt( K, K, &ctx->rijndael);
 80099f6:	683a      	ldr	r2, [r7, #0]
 80099f8:	1939      	adds	r1, r7, r4
 80099fa:	193b      	adds	r3, r7, r4
 80099fc:	0018      	movs	r0, r3
 80099fe:	f7ff febf 	bl	8009780 <aes_encrypt>

            if (K[0] & 0x80) {
 8009a02:	193b      	adds	r3, r7, r4
 8009a04:	781b      	ldrb	r3, [r3, #0]
 8009a06:	b25b      	sxtb	r3, r3
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	da2e      	bge.n	8009a6a <AES_CMAC_Final+0x8c>
                    LSHIFT(K, K);
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	647b      	str	r3, [r7, #68]	; 0x44
 8009a10:	e018      	b.n	8009a44 <AES_CMAC_Final+0x66>
 8009a12:	201c      	movs	r0, #28
 8009a14:	183a      	adds	r2, r7, r0
 8009a16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a18:	18d3      	adds	r3, r2, r3
 8009a1a:	781b      	ldrb	r3, [r3, #0]
 8009a1c:	005b      	lsls	r3, r3, #1
 8009a1e:	b25a      	sxtb	r2, r3
 8009a20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a22:	3301      	adds	r3, #1
 8009a24:	1839      	adds	r1, r7, r0
 8009a26:	5ccb      	ldrb	r3, [r1, r3]
 8009a28:	09db      	lsrs	r3, r3, #7
 8009a2a:	b2db      	uxtb	r3, r3
 8009a2c:	b25b      	sxtb	r3, r3
 8009a2e:	4313      	orrs	r3, r2
 8009a30:	b25b      	sxtb	r3, r3
 8009a32:	b2d9      	uxtb	r1, r3
 8009a34:	183a      	adds	r2, r7, r0
 8009a36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a38:	18d3      	adds	r3, r2, r3
 8009a3a:	1c0a      	adds	r2, r1, #0
 8009a3c:	701a      	strb	r2, [r3, #0]
 8009a3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a40:	3301      	adds	r3, #1
 8009a42:	647b      	str	r3, [r7, #68]	; 0x44
 8009a44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a46:	2b0e      	cmp	r3, #14
 8009a48:	dde3      	ble.n	8009a12 <AES_CMAC_Final+0x34>
 8009a4a:	211c      	movs	r1, #28
 8009a4c:	187b      	adds	r3, r7, r1
 8009a4e:	7bdb      	ldrb	r3, [r3, #15]
 8009a50:	18db      	adds	r3, r3, r3
 8009a52:	b2da      	uxtb	r2, r3
 8009a54:	187b      	adds	r3, r7, r1
 8009a56:	73da      	strb	r2, [r3, #15]
                   K[15] ^= 0x87;
 8009a58:	187b      	adds	r3, r7, r1
 8009a5a:	7bdb      	ldrb	r3, [r3, #15]
 8009a5c:	2279      	movs	r2, #121	; 0x79
 8009a5e:	4252      	negs	r2, r2
 8009a60:	4053      	eors	r3, r2
 8009a62:	b2da      	uxtb	r2, r3
 8009a64:	187b      	adds	r3, r7, r1
 8009a66:	73da      	strb	r2, [r3, #15]
 8009a68:	e025      	b.n	8009ab6 <AES_CMAC_Final+0xd8>
            } else
                    LSHIFT(K, K);
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	643b      	str	r3, [r7, #64]	; 0x40
 8009a6e:	e018      	b.n	8009aa2 <AES_CMAC_Final+0xc4>
 8009a70:	201c      	movs	r0, #28
 8009a72:	183a      	adds	r2, r7, r0
 8009a74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a76:	18d3      	adds	r3, r2, r3
 8009a78:	781b      	ldrb	r3, [r3, #0]
 8009a7a:	005b      	lsls	r3, r3, #1
 8009a7c:	b25a      	sxtb	r2, r3
 8009a7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a80:	3301      	adds	r3, #1
 8009a82:	1839      	adds	r1, r7, r0
 8009a84:	5ccb      	ldrb	r3, [r1, r3]
 8009a86:	09db      	lsrs	r3, r3, #7
 8009a88:	b2db      	uxtb	r3, r3
 8009a8a:	b25b      	sxtb	r3, r3
 8009a8c:	4313      	orrs	r3, r2
 8009a8e:	b25b      	sxtb	r3, r3
 8009a90:	b2d9      	uxtb	r1, r3
 8009a92:	183a      	adds	r2, r7, r0
 8009a94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a96:	18d3      	adds	r3, r2, r3
 8009a98:	1c0a      	adds	r2, r1, #0
 8009a9a:	701a      	strb	r2, [r3, #0]
 8009a9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a9e:	3301      	adds	r3, #1
 8009aa0:	643b      	str	r3, [r7, #64]	; 0x40
 8009aa2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009aa4:	2b0e      	cmp	r3, #14
 8009aa6:	dde3      	ble.n	8009a70 <AES_CMAC_Final+0x92>
 8009aa8:	211c      	movs	r1, #28
 8009aaa:	187b      	adds	r3, r7, r1
 8009aac:	7bdb      	ldrb	r3, [r3, #15]
 8009aae:	18db      	adds	r3, r3, r3
 8009ab0:	b2da      	uxtb	r2, r3
 8009ab2:	187b      	adds	r3, r7, r1
 8009ab4:	73da      	strb	r2, [r3, #15]


            if (ctx->M_n == 16) {
 8009ab6:	683a      	ldr	r2, [r7, #0]
 8009ab8:	238a      	movs	r3, #138	; 0x8a
 8009aba:	005b      	lsls	r3, r3, #1
 8009abc:	58d3      	ldr	r3, [r2, r3]
 8009abe:	2b10      	cmp	r3, #16
 8009ac0:	d11f      	bne.n	8009b02 <AES_CMAC_Final+0x124>
                    /* last block was a complete block */
                    XOR(K, ctx->M_last);
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009ac6:	e018      	b.n	8009afa <AES_CMAC_Final+0x11c>
 8009ac8:	6839      	ldr	r1, [r7, #0]
 8009aca:	2302      	movs	r3, #2
 8009acc:	33ff      	adds	r3, #255	; 0xff
 8009ace:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009ad0:	188a      	adds	r2, r1, r2
 8009ad2:	18d3      	adds	r3, r2, r3
 8009ad4:	781a      	ldrb	r2, [r3, #0]
 8009ad6:	231c      	movs	r3, #28
 8009ad8:	18f9      	adds	r1, r7, r3
 8009ada:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009adc:	18cb      	adds	r3, r1, r3
 8009ade:	781b      	ldrb	r3, [r3, #0]
 8009ae0:	4053      	eors	r3, r2
 8009ae2:	b2d8      	uxtb	r0, r3
 8009ae4:	6839      	ldr	r1, [r7, #0]
 8009ae6:	2302      	movs	r3, #2
 8009ae8:	33ff      	adds	r3, #255	; 0xff
 8009aea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009aec:	188a      	adds	r2, r1, r2
 8009aee:	18d3      	adds	r3, r2, r3
 8009af0:	1c02      	adds	r2, r0, #0
 8009af2:	701a      	strb	r2, [r3, #0]
 8009af4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009af6:	3301      	adds	r3, #1
 8009af8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009afa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009afc:	2b0f      	cmp	r3, #15
 8009afe:	dde3      	ble.n	8009ac8 <AES_CMAC_Final+0xea>
 8009b00:	e09f      	b.n	8009c42 <AES_CMAC_Final+0x264>

           } else {
                   /* generate subkey K2 */
                  if (K[0] & 0x80) {
 8009b02:	231c      	movs	r3, #28
 8009b04:	18fb      	adds	r3, r7, r3
 8009b06:	781b      	ldrb	r3, [r3, #0]
 8009b08:	b25b      	sxtb	r3, r3
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	da2e      	bge.n	8009b6c <AES_CMAC_Final+0x18e>
                          LSHIFT(K, K);
 8009b0e:	2300      	movs	r3, #0
 8009b10:	63bb      	str	r3, [r7, #56]	; 0x38
 8009b12:	e018      	b.n	8009b46 <AES_CMAC_Final+0x168>
 8009b14:	201c      	movs	r0, #28
 8009b16:	183a      	adds	r2, r7, r0
 8009b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b1a:	18d3      	adds	r3, r2, r3
 8009b1c:	781b      	ldrb	r3, [r3, #0]
 8009b1e:	005b      	lsls	r3, r3, #1
 8009b20:	b25a      	sxtb	r2, r3
 8009b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b24:	3301      	adds	r3, #1
 8009b26:	1839      	adds	r1, r7, r0
 8009b28:	5ccb      	ldrb	r3, [r1, r3]
 8009b2a:	09db      	lsrs	r3, r3, #7
 8009b2c:	b2db      	uxtb	r3, r3
 8009b2e:	b25b      	sxtb	r3, r3
 8009b30:	4313      	orrs	r3, r2
 8009b32:	b25b      	sxtb	r3, r3
 8009b34:	b2d9      	uxtb	r1, r3
 8009b36:	183a      	adds	r2, r7, r0
 8009b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b3a:	18d3      	adds	r3, r2, r3
 8009b3c:	1c0a      	adds	r2, r1, #0
 8009b3e:	701a      	strb	r2, [r3, #0]
 8009b40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b42:	3301      	adds	r3, #1
 8009b44:	63bb      	str	r3, [r7, #56]	; 0x38
 8009b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b48:	2b0e      	cmp	r3, #14
 8009b4a:	dde3      	ble.n	8009b14 <AES_CMAC_Final+0x136>
 8009b4c:	211c      	movs	r1, #28
 8009b4e:	187b      	adds	r3, r7, r1
 8009b50:	7bdb      	ldrb	r3, [r3, #15]
 8009b52:	18db      	adds	r3, r3, r3
 8009b54:	b2da      	uxtb	r2, r3
 8009b56:	187b      	adds	r3, r7, r1
 8009b58:	73da      	strb	r2, [r3, #15]
                          K[15] ^= 0x87;
 8009b5a:	187b      	adds	r3, r7, r1
 8009b5c:	7bdb      	ldrb	r3, [r3, #15]
 8009b5e:	2279      	movs	r2, #121	; 0x79
 8009b60:	4252      	negs	r2, r2
 8009b62:	4053      	eors	r3, r2
 8009b64:	b2da      	uxtb	r2, r3
 8009b66:	187b      	adds	r3, r7, r1
 8009b68:	73da      	strb	r2, [r3, #15]
 8009b6a:	e025      	b.n	8009bb8 <AES_CMAC_Final+0x1da>
                  } else
                           LSHIFT(K, K);
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	637b      	str	r3, [r7, #52]	; 0x34
 8009b70:	e018      	b.n	8009ba4 <AES_CMAC_Final+0x1c6>
 8009b72:	201c      	movs	r0, #28
 8009b74:	183a      	adds	r2, r7, r0
 8009b76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b78:	18d3      	adds	r3, r2, r3
 8009b7a:	781b      	ldrb	r3, [r3, #0]
 8009b7c:	005b      	lsls	r3, r3, #1
 8009b7e:	b25a      	sxtb	r2, r3
 8009b80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b82:	3301      	adds	r3, #1
 8009b84:	1839      	adds	r1, r7, r0
 8009b86:	5ccb      	ldrb	r3, [r1, r3]
 8009b88:	09db      	lsrs	r3, r3, #7
 8009b8a:	b2db      	uxtb	r3, r3
 8009b8c:	b25b      	sxtb	r3, r3
 8009b8e:	4313      	orrs	r3, r2
 8009b90:	b25b      	sxtb	r3, r3
 8009b92:	b2d9      	uxtb	r1, r3
 8009b94:	183a      	adds	r2, r7, r0
 8009b96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b98:	18d3      	adds	r3, r2, r3
 8009b9a:	1c0a      	adds	r2, r1, #0
 8009b9c:	701a      	strb	r2, [r3, #0]
 8009b9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ba0:	3301      	adds	r3, #1
 8009ba2:	637b      	str	r3, [r7, #52]	; 0x34
 8009ba4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ba6:	2b0e      	cmp	r3, #14
 8009ba8:	dde3      	ble.n	8009b72 <AES_CMAC_Final+0x194>
 8009baa:	211c      	movs	r1, #28
 8009bac:	187b      	adds	r3, r7, r1
 8009bae:	7bdb      	ldrb	r3, [r3, #15]
 8009bb0:	18db      	adds	r3, r3, r3
 8009bb2:	b2da      	uxtb	r2, r3
 8009bb4:	187b      	adds	r3, r7, r1
 8009bb6:	73da      	strb	r2, [r3, #15]

                   /* padding(M_last) */
                   ctx->M_last[ctx->M_n] = 0x80;
 8009bb8:	683a      	ldr	r2, [r7, #0]
 8009bba:	238a      	movs	r3, #138	; 0x8a
 8009bbc:	005b      	lsls	r3, r3, #1
 8009bbe:	58d2      	ldr	r2, [r2, r3]
 8009bc0:	6839      	ldr	r1, [r7, #0]
 8009bc2:	2302      	movs	r3, #2
 8009bc4:	33ff      	adds	r3, #255	; 0xff
 8009bc6:	188a      	adds	r2, r1, r2
 8009bc8:	18d3      	adds	r3, r2, r3
 8009bca:	2280      	movs	r2, #128	; 0x80
 8009bcc:	701a      	strb	r2, [r3, #0]
                   while (++ctx->M_n < 16)
 8009bce:	e00a      	b.n	8009be6 <AES_CMAC_Final+0x208>
                         ctx->M_last[ctx->M_n] = 0;
 8009bd0:	683a      	ldr	r2, [r7, #0]
 8009bd2:	238a      	movs	r3, #138	; 0x8a
 8009bd4:	005b      	lsls	r3, r3, #1
 8009bd6:	58d2      	ldr	r2, [r2, r3]
 8009bd8:	6839      	ldr	r1, [r7, #0]
 8009bda:	2302      	movs	r3, #2
 8009bdc:	33ff      	adds	r3, #255	; 0xff
 8009bde:	188a      	adds	r2, r1, r2
 8009be0:	18d3      	adds	r3, r2, r3
 8009be2:	2200      	movs	r2, #0
 8009be4:	701a      	strb	r2, [r3, #0]
                   while (++ctx->M_n < 16)
 8009be6:	683a      	ldr	r2, [r7, #0]
 8009be8:	238a      	movs	r3, #138	; 0x8a
 8009bea:	005b      	lsls	r3, r3, #1
 8009bec:	58d3      	ldr	r3, [r2, r3]
 8009bee:	1c59      	adds	r1, r3, #1
 8009bf0:	683a      	ldr	r2, [r7, #0]
 8009bf2:	238a      	movs	r3, #138	; 0x8a
 8009bf4:	005b      	lsls	r3, r3, #1
 8009bf6:	50d1      	str	r1, [r2, r3]
 8009bf8:	683a      	ldr	r2, [r7, #0]
 8009bfa:	238a      	movs	r3, #138	; 0x8a
 8009bfc:	005b      	lsls	r3, r3, #1
 8009bfe:	58d3      	ldr	r3, [r2, r3]
 8009c00:	2b0f      	cmp	r3, #15
 8009c02:	d9e5      	bls.n	8009bd0 <AES_CMAC_Final+0x1f2>
   
                  XOR(K, ctx->M_last);
 8009c04:	2300      	movs	r3, #0
 8009c06:	633b      	str	r3, [r7, #48]	; 0x30
 8009c08:	e018      	b.n	8009c3c <AES_CMAC_Final+0x25e>
 8009c0a:	6839      	ldr	r1, [r7, #0]
 8009c0c:	2302      	movs	r3, #2
 8009c0e:	33ff      	adds	r3, #255	; 0xff
 8009c10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c12:	188a      	adds	r2, r1, r2
 8009c14:	18d3      	adds	r3, r2, r3
 8009c16:	781a      	ldrb	r2, [r3, #0]
 8009c18:	231c      	movs	r3, #28
 8009c1a:	18f9      	adds	r1, r7, r3
 8009c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c1e:	18cb      	adds	r3, r1, r3
 8009c20:	781b      	ldrb	r3, [r3, #0]
 8009c22:	4053      	eors	r3, r2
 8009c24:	b2d8      	uxtb	r0, r3
 8009c26:	6839      	ldr	r1, [r7, #0]
 8009c28:	2302      	movs	r3, #2
 8009c2a:	33ff      	adds	r3, #255	; 0xff
 8009c2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c2e:	188a      	adds	r2, r1, r2
 8009c30:	18d3      	adds	r3, r2, r3
 8009c32:	1c02      	adds	r2, r0, #0
 8009c34:	701a      	strb	r2, [r3, #0]
 8009c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c38:	3301      	adds	r3, #1
 8009c3a:	633b      	str	r3, [r7, #48]	; 0x30
 8009c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c3e:	2b0f      	cmp	r3, #15
 8009c40:	dde3      	ble.n	8009c0a <AES_CMAC_Final+0x22c>


           }
           XOR(ctx->M_last, ctx->X);
 8009c42:	2300      	movs	r3, #0
 8009c44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009c46:	e018      	b.n	8009c7a <AES_CMAC_Final+0x29c>
 8009c48:	683a      	ldr	r2, [r7, #0]
 8009c4a:	21f1      	movs	r1, #241	; 0xf1
 8009c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c4e:	18d3      	adds	r3, r2, r3
 8009c50:	185b      	adds	r3, r3, r1
 8009c52:	781a      	ldrb	r2, [r3, #0]
 8009c54:	6838      	ldr	r0, [r7, #0]
 8009c56:	2302      	movs	r3, #2
 8009c58:	33ff      	adds	r3, #255	; 0xff
 8009c5a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009c5c:	1841      	adds	r1, r0, r1
 8009c5e:	18cb      	adds	r3, r1, r3
 8009c60:	781b      	ldrb	r3, [r3, #0]
 8009c62:	4053      	eors	r3, r2
 8009c64:	b2d8      	uxtb	r0, r3
 8009c66:	683a      	ldr	r2, [r7, #0]
 8009c68:	21f1      	movs	r1, #241	; 0xf1
 8009c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c6c:	18d3      	adds	r3, r2, r3
 8009c6e:	185b      	adds	r3, r3, r1
 8009c70:	1c02      	adds	r2, r0, #0
 8009c72:	701a      	strb	r2, [r3, #0]
 8009c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c76:	3301      	adds	r3, #1
 8009c78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c7c:	2b0f      	cmp	r3, #15
 8009c7e:	dde3      	ble.n	8009c48 <AES_CMAC_Final+0x26a>

           //rijndael_encrypt(&ctx->rijndael, ctx->X, digest);

       memcpy1(in, &ctx->X[0], 16); //Bestela ez du ondo iten
 8009c80:	683b      	ldr	r3, [r7, #0]
 8009c82:	33f1      	adds	r3, #241	; 0xf1
 8009c84:	0019      	movs	r1, r3
 8009c86:	240c      	movs	r4, #12
 8009c88:	193b      	adds	r3, r7, r4
 8009c8a:	2210      	movs	r2, #16
 8009c8c:	0018      	movs	r0, r3
 8009c8e:	f00b feaf 	bl	80159f0 <memcpy1>
       aes_encrypt(in, digest, &ctx->rijndael);
 8009c92:	683a      	ldr	r2, [r7, #0]
 8009c94:	6879      	ldr	r1, [r7, #4]
 8009c96:	193b      	adds	r3, r7, r4
 8009c98:	0018      	movs	r0, r3
 8009c9a:	f7ff fd71 	bl	8009780 <aes_encrypt>
           memset1(K, 0, sizeof K);
 8009c9e:	231c      	movs	r3, #28
 8009ca0:	18fb      	adds	r3, r7, r3
 8009ca2:	2210      	movs	r2, #16
 8009ca4:	2100      	movs	r1, #0
 8009ca6:	0018      	movs	r0, r3
 8009ca8:	f00b fede 	bl	8015a68 <memset1>

}
 8009cac:	46c0      	nop			; (mov r8, r8)
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	b013      	add	sp, #76	; 0x4c
 8009cb2:	bd90      	pop	{r4, r7, pc}

08009cb4 <GetKeyByID>:
 * \param[IN]  keyID          - Key identifier
 * \param[OUT] keyItem        - Key item reference
 * \retval                    - Status of the operation
 */
SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t** keyItem )
{
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	b084      	sub	sp, #16
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	0002      	movs	r2, r0
 8009cbc:	6039      	str	r1, [r7, #0]
 8009cbe:	1dfb      	adds	r3, r7, #7
 8009cc0:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8009cc2:	230f      	movs	r3, #15
 8009cc4:	18fb      	adds	r3, r7, r3
 8009cc6:	2200      	movs	r2, #0
 8009cc8:	701a      	strb	r2, [r3, #0]
 8009cca:	e025      	b.n	8009d18 <GetKeyByID+0x64>
    {
        if( SeNvmCtx.KeyList[i].KeyID == keyID )
 8009ccc:	230f      	movs	r3, #15
 8009cce:	18fb      	adds	r3, r7, r3
 8009cd0:	781a      	ldrb	r2, [r3, #0]
 8009cd2:	4816      	ldr	r0, [pc, #88]	; (8009d2c <GetKeyByID+0x78>)
 8009cd4:	2383      	movs	r3, #131	; 0x83
 8009cd6:	0099      	lsls	r1, r3, #2
 8009cd8:	0013      	movs	r3, r2
 8009cda:	011b      	lsls	r3, r3, #4
 8009cdc:	189b      	adds	r3, r3, r2
 8009cde:	18c3      	adds	r3, r0, r3
 8009ce0:	185b      	adds	r3, r3, r1
 8009ce2:	781b      	ldrb	r3, [r3, #0]
 8009ce4:	1dfa      	adds	r2, r7, #7
 8009ce6:	7812      	ldrb	r2, [r2, #0]
 8009ce8:	429a      	cmp	r2, r3
 8009cea:	d10f      	bne.n	8009d0c <GetKeyByID+0x58>
        {
            *keyItem = &( SeNvmCtx.KeyList[i] );
 8009cec:	230f      	movs	r3, #15
 8009cee:	18fb      	adds	r3, r7, r3
 8009cf0:	781a      	ldrb	r2, [r3, #0]
 8009cf2:	0013      	movs	r3, r2
 8009cf4:	011b      	lsls	r3, r3, #4
 8009cf6:	189b      	adds	r3, r3, r2
 8009cf8:	2282      	movs	r2, #130	; 0x82
 8009cfa:	0092      	lsls	r2, r2, #2
 8009cfc:	189a      	adds	r2, r3, r2
 8009cfe:	4b0b      	ldr	r3, [pc, #44]	; (8009d2c <GetKeyByID+0x78>)
 8009d00:	18d3      	adds	r3, r2, r3
 8009d02:	1d1a      	adds	r2, r3, #4
 8009d04:	683b      	ldr	r3, [r7, #0]
 8009d06:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 8009d08:	2300      	movs	r3, #0
 8009d0a:	e00b      	b.n	8009d24 <GetKeyByID+0x70>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8009d0c:	210f      	movs	r1, #15
 8009d0e:	187b      	adds	r3, r7, r1
 8009d10:	781a      	ldrb	r2, [r3, #0]
 8009d12:	187b      	adds	r3, r7, r1
 8009d14:	3201      	adds	r2, #1
 8009d16:	701a      	strb	r2, [r3, #0]
 8009d18:	230f      	movs	r3, #15
 8009d1a:	18fb      	adds	r3, r7, r3
 8009d1c:	781b      	ldrb	r3, [r3, #0]
 8009d1e:	2b15      	cmp	r3, #21
 8009d20:	d9d4      	bls.n	8009ccc <GetKeyByID+0x18>
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8009d22:	2303      	movs	r3, #3
}
 8009d24:	0018      	movs	r0, r3
 8009d26:	46bd      	mov	sp, r7
 8009d28:	b004      	add	sp, #16
 8009d2a:	bd80      	pop	{r7, pc}
 8009d2c:	20000380 	.word	0x20000380

08009d30 <ComputeCmac>:
 * \param[IN]  keyID          - Key identifier to determine the AES key to be used
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
SecureElementStatus_t ComputeCmac( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID, uint32_t* cmac )
{
 8009d30:	b5b0      	push	{r4, r5, r7, lr}
 8009d32:	b08a      	sub	sp, #40	; 0x28
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	60f8      	str	r0, [r7, #12]
 8009d38:	0008      	movs	r0, r1
 8009d3a:	0011      	movs	r1, r2
 8009d3c:	607b      	str	r3, [r7, #4]
 8009d3e:	230a      	movs	r3, #10
 8009d40:	18fb      	adds	r3, r7, r3
 8009d42:	1c02      	adds	r2, r0, #0
 8009d44:	801a      	strh	r2, [r3, #0]
 8009d46:	2309      	movs	r3, #9
 8009d48:	18fb      	adds	r3, r7, r3
 8009d4a:	1c0a      	adds	r2, r1, #0
 8009d4c:	701a      	strb	r2, [r3, #0]
    if( buffer == NULL || cmac == NULL )
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d002      	beq.n	8009d5a <ComputeCmac+0x2a>
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d101      	bne.n	8009d5e <ComputeCmac+0x2e>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8009d5a:	2302      	movs	r3, #2
 8009d5c:	e03f      	b.n	8009dde <ComputeCmac+0xae>
    }

    uint8_t Cmac[16];

    AES_CMAC_Init( SeNvmCtx.AesCmacCtx );
 8009d5e:	4b22      	ldr	r3, [pc, #136]	; (8009de8 <ComputeCmac+0xb8>)
 8009d60:	0018      	movs	r0, r3
 8009d62:	f7ff fd58 	bl	8009816 <AES_CMAC_Init>

    Key_t* keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 8009d66:	2527      	movs	r5, #39	; 0x27
 8009d68:	197c      	adds	r4, r7, r5
 8009d6a:	2310      	movs	r3, #16
 8009d6c:	18fa      	adds	r2, r7, r3
 8009d6e:	2309      	movs	r3, #9
 8009d70:	18fb      	adds	r3, r7, r3
 8009d72:	781b      	ldrb	r3, [r3, #0]
 8009d74:	0011      	movs	r1, r2
 8009d76:	0018      	movs	r0, r3
 8009d78:	f7ff ff9c 	bl	8009cb4 <GetKeyByID>
 8009d7c:	0003      	movs	r3, r0
 8009d7e:	7023      	strb	r3, [r4, #0]

    if( retval == SECURE_ELEMENT_SUCCESS )
 8009d80:	197b      	adds	r3, r7, r5
 8009d82:	781b      	ldrb	r3, [r3, #0]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d127      	bne.n	8009dd8 <ComputeCmac+0xa8>
    {
        AES_CMAC_SetKey( SeNvmCtx.AesCmacCtx, keyItem->KeyValue );
 8009d88:	693b      	ldr	r3, [r7, #16]
 8009d8a:	1c5a      	adds	r2, r3, #1
 8009d8c:	4b16      	ldr	r3, [pc, #88]	; (8009de8 <ComputeCmac+0xb8>)
 8009d8e:	0011      	movs	r1, r2
 8009d90:	0018      	movs	r0, r3
 8009d92:	f7ff fd5a 	bl	800984a <AES_CMAC_SetKey>

        AES_CMAC_Update( SeNvmCtx.AesCmacCtx, buffer, size );
 8009d96:	230a      	movs	r3, #10
 8009d98:	18fb      	adds	r3, r7, r3
 8009d9a:	881a      	ldrh	r2, [r3, #0]
 8009d9c:	68f9      	ldr	r1, [r7, #12]
 8009d9e:	4b12      	ldr	r3, [pc, #72]	; (8009de8 <ComputeCmac+0xb8>)
 8009da0:	0018      	movs	r0, r3
 8009da2:	f7ff fd61 	bl	8009868 <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, SeNvmCtx.AesCmacCtx );
 8009da6:	4a10      	ldr	r2, [pc, #64]	; (8009de8 <ComputeCmac+0xb8>)
 8009da8:	2114      	movs	r1, #20
 8009daa:	000c      	movs	r4, r1
 8009dac:	187b      	adds	r3, r7, r1
 8009dae:	0011      	movs	r1, r2
 8009db0:	0018      	movs	r0, r3
 8009db2:	f7ff fe14 	bl	80099de <AES_CMAC_Final>

        // Bring into the required format
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 | ( uint32_t ) Cmac[0] );
 8009db6:	0021      	movs	r1, r4
 8009db8:	187b      	adds	r3, r7, r1
 8009dba:	78db      	ldrb	r3, [r3, #3]
 8009dbc:	061a      	lsls	r2, r3, #24
 8009dbe:	187b      	adds	r3, r7, r1
 8009dc0:	789b      	ldrb	r3, [r3, #2]
 8009dc2:	041b      	lsls	r3, r3, #16
 8009dc4:	431a      	orrs	r2, r3
 8009dc6:	187b      	adds	r3, r7, r1
 8009dc8:	785b      	ldrb	r3, [r3, #1]
 8009dca:	021b      	lsls	r3, r3, #8
 8009dcc:	4313      	orrs	r3, r2
 8009dce:	187a      	adds	r2, r7, r1
 8009dd0:	7812      	ldrb	r2, [r2, #0]
 8009dd2:	431a      	orrs	r2, r3
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	601a      	str	r2, [r3, #0]
    }

    return retval;
 8009dd8:	2327      	movs	r3, #39	; 0x27
 8009dda:	18fb      	adds	r3, r7, r3
 8009ddc:	781b      	ldrb	r3, [r3, #0]
}
 8009dde:	0018      	movs	r0, r3
 8009de0:	46bd      	mov	sp, r7
 8009de2:	b00a      	add	sp, #40	; 0x28
 8009de4:	bdb0      	pop	{r4, r5, r7, pc}
 8009de6:	46c0      	nop			; (mov r8, r8)
 8009de8:	20000474 	.word	0x20000474

08009dec <DummyCB>:

/*
 * Dummy callback in case if the user provides NULL function pointer
 */
static void DummyCB( void )
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	af00      	add	r7, sp, #0
    return;
 8009df0:	46c0      	nop			; (mov r8, r8)
}
 8009df2:	46bd      	mov	sp, r7
 8009df4:	bd80      	pop	{r7, pc}
	...

08009df8 <SecureElementInit>:
/*
 * API functions
 */

SecureElementStatus_t SecureElementInit( EventNvmCtxChanged seNvmCtxChanged )
{
 8009df8:	b590      	push	{r4, r7, lr}
 8009dfa:	b085      	sub	sp, #20
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
    // Initialize with defaults
    uint8_t itr = 0;
 8009e00:	240f      	movs	r4, #15
 8009e02:	193b      	adds	r3, r7, r4
 8009e04:	2200      	movs	r2, #0
 8009e06:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = APP_KEY;
 8009e08:	193b      	adds	r3, r7, r4
 8009e0a:	781b      	ldrb	r3, [r3, #0]
 8009e0c:	193a      	adds	r2, r7, r4
 8009e0e:	1c59      	adds	r1, r3, #1
 8009e10:	7011      	strb	r1, [r2, #0]
 8009e12:	0018      	movs	r0, r3
 8009e14:	49b4      	ldr	r1, [pc, #720]	; (800a0e8 <SecureElementInit+0x2f0>)
 8009e16:	2383      	movs	r3, #131	; 0x83
 8009e18:	009a      	lsls	r2, r3, #2
 8009e1a:	0003      	movs	r3, r0
 8009e1c:	011b      	lsls	r3, r3, #4
 8009e1e:	181b      	adds	r3, r3, r0
 8009e20:	18cb      	adds	r3, r1, r3
 8009e22:	189b      	adds	r3, r3, r2
 8009e24:	2200      	movs	r2, #0
 8009e26:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = NWK_KEY;
 8009e28:	193b      	adds	r3, r7, r4
 8009e2a:	781b      	ldrb	r3, [r3, #0]
 8009e2c:	193a      	adds	r2, r7, r4
 8009e2e:	1c59      	adds	r1, r3, #1
 8009e30:	7011      	strb	r1, [r2, #0]
 8009e32:	0018      	movs	r0, r3
 8009e34:	49ac      	ldr	r1, [pc, #688]	; (800a0e8 <SecureElementInit+0x2f0>)
 8009e36:	2383      	movs	r3, #131	; 0x83
 8009e38:	009a      	lsls	r2, r3, #2
 8009e3a:	0003      	movs	r3, r0
 8009e3c:	011b      	lsls	r3, r3, #4
 8009e3e:	181b      	adds	r3, r3, r0
 8009e40:	18cb      	adds	r3, r1, r3
 8009e42:	189b      	adds	r3, r3, r2
 8009e44:	2201      	movs	r2, #1
 8009e46:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = J_S_INT_KEY;
 8009e48:	193b      	adds	r3, r7, r4
 8009e4a:	781b      	ldrb	r3, [r3, #0]
 8009e4c:	193a      	adds	r2, r7, r4
 8009e4e:	1c59      	adds	r1, r3, #1
 8009e50:	7011      	strb	r1, [r2, #0]
 8009e52:	0018      	movs	r0, r3
 8009e54:	49a4      	ldr	r1, [pc, #656]	; (800a0e8 <SecureElementInit+0x2f0>)
 8009e56:	2383      	movs	r3, #131	; 0x83
 8009e58:	009a      	lsls	r2, r3, #2
 8009e5a:	0003      	movs	r3, r0
 8009e5c:	011b      	lsls	r3, r3, #4
 8009e5e:	181b      	adds	r3, r3, r0
 8009e60:	18cb      	adds	r3, r1, r3
 8009e62:	189b      	adds	r3, r3, r2
 8009e64:	2202      	movs	r2, #2
 8009e66:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = J_S_ENC_KEY;
 8009e68:	193b      	adds	r3, r7, r4
 8009e6a:	781b      	ldrb	r3, [r3, #0]
 8009e6c:	193a      	adds	r2, r7, r4
 8009e6e:	1c59      	adds	r1, r3, #1
 8009e70:	7011      	strb	r1, [r2, #0]
 8009e72:	0018      	movs	r0, r3
 8009e74:	499c      	ldr	r1, [pc, #624]	; (800a0e8 <SecureElementInit+0x2f0>)
 8009e76:	2383      	movs	r3, #131	; 0x83
 8009e78:	009a      	lsls	r2, r3, #2
 8009e7a:	0003      	movs	r3, r0
 8009e7c:	011b      	lsls	r3, r3, #4
 8009e7e:	181b      	adds	r3, r3, r0
 8009e80:	18cb      	adds	r3, r1, r3
 8009e82:	189b      	adds	r3, r3, r2
 8009e84:	2203      	movs	r2, #3
 8009e86:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = F_NWK_S_INT_KEY;
 8009e88:	193b      	adds	r3, r7, r4
 8009e8a:	781b      	ldrb	r3, [r3, #0]
 8009e8c:	193a      	adds	r2, r7, r4
 8009e8e:	1c59      	adds	r1, r3, #1
 8009e90:	7011      	strb	r1, [r2, #0]
 8009e92:	0018      	movs	r0, r3
 8009e94:	4994      	ldr	r1, [pc, #592]	; (800a0e8 <SecureElementInit+0x2f0>)
 8009e96:	2383      	movs	r3, #131	; 0x83
 8009e98:	009a      	lsls	r2, r3, #2
 8009e9a:	0003      	movs	r3, r0
 8009e9c:	011b      	lsls	r3, r3, #4
 8009e9e:	181b      	adds	r3, r3, r0
 8009ea0:	18cb      	adds	r3, r1, r3
 8009ea2:	189b      	adds	r3, r3, r2
 8009ea4:	2204      	movs	r2, #4
 8009ea6:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = S_NWK_S_INT_KEY;
 8009ea8:	193b      	adds	r3, r7, r4
 8009eaa:	781b      	ldrb	r3, [r3, #0]
 8009eac:	193a      	adds	r2, r7, r4
 8009eae:	1c59      	adds	r1, r3, #1
 8009eb0:	7011      	strb	r1, [r2, #0]
 8009eb2:	0018      	movs	r0, r3
 8009eb4:	498c      	ldr	r1, [pc, #560]	; (800a0e8 <SecureElementInit+0x2f0>)
 8009eb6:	2383      	movs	r3, #131	; 0x83
 8009eb8:	009a      	lsls	r2, r3, #2
 8009eba:	0003      	movs	r3, r0
 8009ebc:	011b      	lsls	r3, r3, #4
 8009ebe:	181b      	adds	r3, r3, r0
 8009ec0:	18cb      	adds	r3, r1, r3
 8009ec2:	189b      	adds	r3, r3, r2
 8009ec4:	2205      	movs	r2, #5
 8009ec6:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = NWK_S_ENC_KEY;
 8009ec8:	193b      	adds	r3, r7, r4
 8009eca:	781b      	ldrb	r3, [r3, #0]
 8009ecc:	193a      	adds	r2, r7, r4
 8009ece:	1c59      	adds	r1, r3, #1
 8009ed0:	7011      	strb	r1, [r2, #0]
 8009ed2:	0018      	movs	r0, r3
 8009ed4:	4984      	ldr	r1, [pc, #528]	; (800a0e8 <SecureElementInit+0x2f0>)
 8009ed6:	2383      	movs	r3, #131	; 0x83
 8009ed8:	009a      	lsls	r2, r3, #2
 8009eda:	0003      	movs	r3, r0
 8009edc:	011b      	lsls	r3, r3, #4
 8009ede:	181b      	adds	r3, r3, r0
 8009ee0:	18cb      	adds	r3, r1, r3
 8009ee2:	189b      	adds	r3, r3, r2
 8009ee4:	2206      	movs	r2, #6
 8009ee6:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = APP_S_KEY;
 8009ee8:	193b      	adds	r3, r7, r4
 8009eea:	781b      	ldrb	r3, [r3, #0]
 8009eec:	193a      	adds	r2, r7, r4
 8009eee:	1c59      	adds	r1, r3, #1
 8009ef0:	7011      	strb	r1, [r2, #0]
 8009ef2:	0018      	movs	r0, r3
 8009ef4:	497c      	ldr	r1, [pc, #496]	; (800a0e8 <SecureElementInit+0x2f0>)
 8009ef6:	2383      	movs	r3, #131	; 0x83
 8009ef8:	009a      	lsls	r2, r3, #2
 8009efa:	0003      	movs	r3, r0
 8009efc:	011b      	lsls	r3, r3, #4
 8009efe:	181b      	adds	r3, r3, r0
 8009f00:	18cb      	adds	r3, r1, r3
 8009f02:	189b      	adds	r3, r3, r2
 8009f04:	2207      	movs	r2, #7
 8009f06:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_KE_KEY;
 8009f08:	193b      	adds	r3, r7, r4
 8009f0a:	781b      	ldrb	r3, [r3, #0]
 8009f0c:	193a      	adds	r2, r7, r4
 8009f0e:	1c59      	adds	r1, r3, #1
 8009f10:	7011      	strb	r1, [r2, #0]
 8009f12:	0018      	movs	r0, r3
 8009f14:	4974      	ldr	r1, [pc, #464]	; (800a0e8 <SecureElementInit+0x2f0>)
 8009f16:	2383      	movs	r3, #131	; 0x83
 8009f18:	009a      	lsls	r2, r3, #2
 8009f1a:	0003      	movs	r3, r0
 8009f1c:	011b      	lsls	r3, r3, #4
 8009f1e:	181b      	adds	r3, r3, r0
 8009f20:	18cb      	adds	r3, r1, r3
 8009f22:	189b      	adds	r3, r3, r2
 8009f24:	227f      	movs	r2, #127	; 0x7f
 8009f26:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_KEY_0;
 8009f28:	193b      	adds	r3, r7, r4
 8009f2a:	781b      	ldrb	r3, [r3, #0]
 8009f2c:	193a      	adds	r2, r7, r4
 8009f2e:	1c59      	adds	r1, r3, #1
 8009f30:	7011      	strb	r1, [r2, #0]
 8009f32:	0018      	movs	r0, r3
 8009f34:	496c      	ldr	r1, [pc, #432]	; (800a0e8 <SecureElementInit+0x2f0>)
 8009f36:	2383      	movs	r3, #131	; 0x83
 8009f38:	009a      	lsls	r2, r3, #2
 8009f3a:	0003      	movs	r3, r0
 8009f3c:	011b      	lsls	r3, r3, #4
 8009f3e:	181b      	adds	r3, r3, r0
 8009f40:	18cb      	adds	r3, r1, r3
 8009f42:	189b      	adds	r3, r3, r2
 8009f44:	2280      	movs	r2, #128	; 0x80
 8009f46:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_APP_S_KEY_0;
 8009f48:	193b      	adds	r3, r7, r4
 8009f4a:	781b      	ldrb	r3, [r3, #0]
 8009f4c:	193a      	adds	r2, r7, r4
 8009f4e:	1c59      	adds	r1, r3, #1
 8009f50:	7011      	strb	r1, [r2, #0]
 8009f52:	0018      	movs	r0, r3
 8009f54:	4964      	ldr	r1, [pc, #400]	; (800a0e8 <SecureElementInit+0x2f0>)
 8009f56:	2383      	movs	r3, #131	; 0x83
 8009f58:	009a      	lsls	r2, r3, #2
 8009f5a:	0003      	movs	r3, r0
 8009f5c:	011b      	lsls	r3, r3, #4
 8009f5e:	181b      	adds	r3, r3, r0
 8009f60:	18cb      	adds	r3, r1, r3
 8009f62:	189b      	adds	r3, r3, r2
 8009f64:	2281      	movs	r2, #129	; 0x81
 8009f66:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_NWK_S_KEY_0;
 8009f68:	193b      	adds	r3, r7, r4
 8009f6a:	781b      	ldrb	r3, [r3, #0]
 8009f6c:	193a      	adds	r2, r7, r4
 8009f6e:	1c59      	adds	r1, r3, #1
 8009f70:	7011      	strb	r1, [r2, #0]
 8009f72:	0018      	movs	r0, r3
 8009f74:	495c      	ldr	r1, [pc, #368]	; (800a0e8 <SecureElementInit+0x2f0>)
 8009f76:	2383      	movs	r3, #131	; 0x83
 8009f78:	009a      	lsls	r2, r3, #2
 8009f7a:	0003      	movs	r3, r0
 8009f7c:	011b      	lsls	r3, r3, #4
 8009f7e:	181b      	adds	r3, r3, r0
 8009f80:	18cb      	adds	r3, r1, r3
 8009f82:	189b      	adds	r3, r3, r2
 8009f84:	2282      	movs	r2, #130	; 0x82
 8009f86:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_KEY_1;
 8009f88:	193b      	adds	r3, r7, r4
 8009f8a:	781b      	ldrb	r3, [r3, #0]
 8009f8c:	193a      	adds	r2, r7, r4
 8009f8e:	1c59      	adds	r1, r3, #1
 8009f90:	7011      	strb	r1, [r2, #0]
 8009f92:	0018      	movs	r0, r3
 8009f94:	4954      	ldr	r1, [pc, #336]	; (800a0e8 <SecureElementInit+0x2f0>)
 8009f96:	2383      	movs	r3, #131	; 0x83
 8009f98:	009a      	lsls	r2, r3, #2
 8009f9a:	0003      	movs	r3, r0
 8009f9c:	011b      	lsls	r3, r3, #4
 8009f9e:	181b      	adds	r3, r3, r0
 8009fa0:	18cb      	adds	r3, r1, r3
 8009fa2:	189b      	adds	r3, r3, r2
 8009fa4:	2283      	movs	r2, #131	; 0x83
 8009fa6:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_APP_S_KEY_1;
 8009fa8:	193b      	adds	r3, r7, r4
 8009faa:	781b      	ldrb	r3, [r3, #0]
 8009fac:	193a      	adds	r2, r7, r4
 8009fae:	1c59      	adds	r1, r3, #1
 8009fb0:	7011      	strb	r1, [r2, #0]
 8009fb2:	0018      	movs	r0, r3
 8009fb4:	494c      	ldr	r1, [pc, #304]	; (800a0e8 <SecureElementInit+0x2f0>)
 8009fb6:	2383      	movs	r3, #131	; 0x83
 8009fb8:	009a      	lsls	r2, r3, #2
 8009fba:	0003      	movs	r3, r0
 8009fbc:	011b      	lsls	r3, r3, #4
 8009fbe:	181b      	adds	r3, r3, r0
 8009fc0:	18cb      	adds	r3, r1, r3
 8009fc2:	189b      	adds	r3, r3, r2
 8009fc4:	2284      	movs	r2, #132	; 0x84
 8009fc6:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_NWK_S_KEY_1;
 8009fc8:	193b      	adds	r3, r7, r4
 8009fca:	781b      	ldrb	r3, [r3, #0]
 8009fcc:	193a      	adds	r2, r7, r4
 8009fce:	1c59      	adds	r1, r3, #1
 8009fd0:	7011      	strb	r1, [r2, #0]
 8009fd2:	0018      	movs	r0, r3
 8009fd4:	4944      	ldr	r1, [pc, #272]	; (800a0e8 <SecureElementInit+0x2f0>)
 8009fd6:	2383      	movs	r3, #131	; 0x83
 8009fd8:	009a      	lsls	r2, r3, #2
 8009fda:	0003      	movs	r3, r0
 8009fdc:	011b      	lsls	r3, r3, #4
 8009fde:	181b      	adds	r3, r3, r0
 8009fe0:	18cb      	adds	r3, r1, r3
 8009fe2:	189b      	adds	r3, r3, r2
 8009fe4:	2285      	movs	r2, #133	; 0x85
 8009fe6:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_KEY_2;
 8009fe8:	193b      	adds	r3, r7, r4
 8009fea:	781b      	ldrb	r3, [r3, #0]
 8009fec:	193a      	adds	r2, r7, r4
 8009fee:	1c59      	adds	r1, r3, #1
 8009ff0:	7011      	strb	r1, [r2, #0]
 8009ff2:	0018      	movs	r0, r3
 8009ff4:	493c      	ldr	r1, [pc, #240]	; (800a0e8 <SecureElementInit+0x2f0>)
 8009ff6:	2383      	movs	r3, #131	; 0x83
 8009ff8:	009a      	lsls	r2, r3, #2
 8009ffa:	0003      	movs	r3, r0
 8009ffc:	011b      	lsls	r3, r3, #4
 8009ffe:	181b      	adds	r3, r3, r0
 800a000:	18cb      	adds	r3, r1, r3
 800a002:	189b      	adds	r3, r3, r2
 800a004:	2286      	movs	r2, #134	; 0x86
 800a006:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_APP_S_KEY_2;
 800a008:	193b      	adds	r3, r7, r4
 800a00a:	781b      	ldrb	r3, [r3, #0]
 800a00c:	193a      	adds	r2, r7, r4
 800a00e:	1c59      	adds	r1, r3, #1
 800a010:	7011      	strb	r1, [r2, #0]
 800a012:	0018      	movs	r0, r3
 800a014:	4934      	ldr	r1, [pc, #208]	; (800a0e8 <SecureElementInit+0x2f0>)
 800a016:	2383      	movs	r3, #131	; 0x83
 800a018:	009a      	lsls	r2, r3, #2
 800a01a:	0003      	movs	r3, r0
 800a01c:	011b      	lsls	r3, r3, #4
 800a01e:	181b      	adds	r3, r3, r0
 800a020:	18cb      	adds	r3, r1, r3
 800a022:	189b      	adds	r3, r3, r2
 800a024:	2287      	movs	r2, #135	; 0x87
 800a026:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_NWK_S_KEY_2;
 800a028:	193b      	adds	r3, r7, r4
 800a02a:	781b      	ldrb	r3, [r3, #0]
 800a02c:	193a      	adds	r2, r7, r4
 800a02e:	1c59      	adds	r1, r3, #1
 800a030:	7011      	strb	r1, [r2, #0]
 800a032:	0018      	movs	r0, r3
 800a034:	492c      	ldr	r1, [pc, #176]	; (800a0e8 <SecureElementInit+0x2f0>)
 800a036:	2383      	movs	r3, #131	; 0x83
 800a038:	009a      	lsls	r2, r3, #2
 800a03a:	0003      	movs	r3, r0
 800a03c:	011b      	lsls	r3, r3, #4
 800a03e:	181b      	adds	r3, r3, r0
 800a040:	18cb      	adds	r3, r1, r3
 800a042:	189b      	adds	r3, r3, r2
 800a044:	2288      	movs	r2, #136	; 0x88
 800a046:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_KEY_3;
 800a048:	193b      	adds	r3, r7, r4
 800a04a:	781b      	ldrb	r3, [r3, #0]
 800a04c:	193a      	adds	r2, r7, r4
 800a04e:	1c59      	adds	r1, r3, #1
 800a050:	7011      	strb	r1, [r2, #0]
 800a052:	0018      	movs	r0, r3
 800a054:	4924      	ldr	r1, [pc, #144]	; (800a0e8 <SecureElementInit+0x2f0>)
 800a056:	2383      	movs	r3, #131	; 0x83
 800a058:	009a      	lsls	r2, r3, #2
 800a05a:	0003      	movs	r3, r0
 800a05c:	011b      	lsls	r3, r3, #4
 800a05e:	181b      	adds	r3, r3, r0
 800a060:	18cb      	adds	r3, r1, r3
 800a062:	189b      	adds	r3, r3, r2
 800a064:	2289      	movs	r2, #137	; 0x89
 800a066:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_APP_S_KEY_3;
 800a068:	193b      	adds	r3, r7, r4
 800a06a:	781b      	ldrb	r3, [r3, #0]
 800a06c:	193a      	adds	r2, r7, r4
 800a06e:	1c59      	adds	r1, r3, #1
 800a070:	7011      	strb	r1, [r2, #0]
 800a072:	0018      	movs	r0, r3
 800a074:	491c      	ldr	r1, [pc, #112]	; (800a0e8 <SecureElementInit+0x2f0>)
 800a076:	2383      	movs	r3, #131	; 0x83
 800a078:	009a      	lsls	r2, r3, #2
 800a07a:	0003      	movs	r3, r0
 800a07c:	011b      	lsls	r3, r3, #4
 800a07e:	181b      	adds	r3, r3, r0
 800a080:	18cb      	adds	r3, r1, r3
 800a082:	189b      	adds	r3, r3, r2
 800a084:	228a      	movs	r2, #138	; 0x8a
 800a086:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_NWK_S_KEY_3;
 800a088:	193b      	adds	r3, r7, r4
 800a08a:	781b      	ldrb	r3, [r3, #0]
 800a08c:	193a      	adds	r2, r7, r4
 800a08e:	1c59      	adds	r1, r3, #1
 800a090:	7011      	strb	r1, [r2, #0]
 800a092:	0018      	movs	r0, r3
 800a094:	4914      	ldr	r1, [pc, #80]	; (800a0e8 <SecureElementInit+0x2f0>)
 800a096:	2383      	movs	r3, #131	; 0x83
 800a098:	009a      	lsls	r2, r3, #2
 800a09a:	0003      	movs	r3, r0
 800a09c:	011b      	lsls	r3, r3, #4
 800a09e:	181b      	adds	r3, r3, r0
 800a0a0:	18cb      	adds	r3, r1, r3
 800a0a2:	189b      	adds	r3, r3, r2
 800a0a4:	228b      	movs	r2, #139	; 0x8b
 800a0a6:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = SLOT_RAND_ZERO_KEY;
 800a0a8:	193b      	adds	r3, r7, r4
 800a0aa:	781b      	ldrb	r3, [r3, #0]
 800a0ac:	193a      	adds	r2, r7, r4
 800a0ae:	1c59      	adds	r1, r3, #1
 800a0b0:	7011      	strb	r1, [r2, #0]
 800a0b2:	0018      	movs	r0, r3
 800a0b4:	490c      	ldr	r1, [pc, #48]	; (800a0e8 <SecureElementInit+0x2f0>)
 800a0b6:	2383      	movs	r3, #131	; 0x83
 800a0b8:	009a      	lsls	r2, r3, #2
 800a0ba:	0003      	movs	r3, r0
 800a0bc:	011b      	lsls	r3, r3, #4
 800a0be:	181b      	adds	r3, r3, r0
 800a0c0:	18cb      	adds	r3, r1, r3
 800a0c2:	189b      	adds	r3, r3, r2
 800a0c4:	228c      	movs	r2, #140	; 0x8c
 800a0c6:	701a      	strb	r2, [r3, #0]

    // Assign callback
    if( seNvmCtxChanged != 0 )
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d003      	beq.n	800a0d6 <SecureElementInit+0x2de>
    {
        SeNvmCtxChanged = seNvmCtxChanged;
 800a0ce:	4b07      	ldr	r3, [pc, #28]	; (800a0ec <SecureElementInit+0x2f4>)
 800a0d0:	687a      	ldr	r2, [r7, #4]
 800a0d2:	601a      	str	r2, [r3, #0]
 800a0d4:	e002      	b.n	800a0dc <SecureElementInit+0x2e4>
    }
    else
    {
        SeNvmCtxChanged = DummyCB;
 800a0d6:	4b05      	ldr	r3, [pc, #20]	; (800a0ec <SecureElementInit+0x2f4>)
 800a0d8:	4a05      	ldr	r2, [pc, #20]	; (800a0f0 <SecureElementInit+0x2f8>)
 800a0da:	601a      	str	r2, [r3, #0]
    }

    return SECURE_ELEMENT_SUCCESS;
 800a0dc:	2300      	movs	r3, #0
}
 800a0de:	0018      	movs	r0, r3
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	b005      	add	sp, #20
 800a0e4:	bd90      	pop	{r4, r7, pc}
 800a0e6:	46c0      	nop			; (mov r8, r8)
 800a0e8:	20000380 	.word	0x20000380
 800a0ec:	20000704 	.word	0x20000704
 800a0f0:	08009ded 	.word	0x08009ded

0800a0f4 <SecureElementRestoreNvmCtx>:

SecureElementStatus_t SecureElementRestoreNvmCtx( void* seNvmCtx )
{
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	b082      	sub	sp, #8
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
    // Restore nvm context
    if( seNvmCtx != 0 )
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d008      	beq.n	800a114 <SecureElementRestoreNvmCtx+0x20>
    {
        memcpy1( ( uint8_t* ) &SeNvmCtx, ( uint8_t* ) seNvmCtx, sizeof( SeNvmCtx ) );
 800a102:	23e1      	movs	r3, #225	; 0xe1
 800a104:	009a      	lsls	r2, r3, #2
 800a106:	6879      	ldr	r1, [r7, #4]
 800a108:	4b05      	ldr	r3, [pc, #20]	; (800a120 <SecureElementRestoreNvmCtx+0x2c>)
 800a10a:	0018      	movs	r0, r3
 800a10c:	f00b fc70 	bl	80159f0 <memcpy1>
        return SECURE_ELEMENT_SUCCESS;
 800a110:	2300      	movs	r3, #0
 800a112:	e000      	b.n	800a116 <SecureElementRestoreNvmCtx+0x22>
    }
    else
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800a114:	2302      	movs	r3, #2
    }
}
 800a116:	0018      	movs	r0, r3
 800a118:	46bd      	mov	sp, r7
 800a11a:	b002      	add	sp, #8
 800a11c:	bd80      	pop	{r7, pc}
 800a11e:	46c0      	nop			; (mov r8, r8)
 800a120:	20000380 	.word	0x20000380

0800a124 <SecureElementGetNvmCtx>:

void* SecureElementGetNvmCtx( size_t* seNvmCtxSize )
{
 800a124:	b580      	push	{r7, lr}
 800a126:	b082      	sub	sp, #8
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
    *seNvmCtxSize = sizeof( SeNvmCtx );
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	22e1      	movs	r2, #225	; 0xe1
 800a130:	0092      	lsls	r2, r2, #2
 800a132:	601a      	str	r2, [r3, #0]
    return &SeNvmCtx;
 800a134:	4b02      	ldr	r3, [pc, #8]	; (800a140 <SecureElementGetNvmCtx+0x1c>)
}
 800a136:	0018      	movs	r0, r3
 800a138:	46bd      	mov	sp, r7
 800a13a:	b002      	add	sp, #8
 800a13c:	bd80      	pop	{r7, pc}
 800a13e:	46c0      	nop			; (mov r8, r8)
 800a140:	20000380 	.word	0x20000380

0800a144 <SecureElementSetKey>:

SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 800a144:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a146:	b089      	sub	sp, #36	; 0x24
 800a148:	af00      	add	r7, sp, #0
 800a14a:	0002      	movs	r2, r0
 800a14c:	6039      	str	r1, [r7, #0]
 800a14e:	1dfb      	adds	r3, r7, #7
 800a150:	701a      	strb	r2, [r3, #0]
    if( key == NULL )
 800a152:	683b      	ldr	r3, [r7, #0]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d101      	bne.n	800a15c <SecureElementSetKey+0x18>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800a158:	2302      	movs	r3, #2
 800a15a:	e063      	b.n	800a224 <SecureElementSetKey+0xe0>
    }
    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800a15c:	231e      	movs	r3, #30
 800a15e:	18fb      	adds	r3, r7, r3
 800a160:	2206      	movs	r2, #6
 800a162:	701a      	strb	r2, [r3, #0]

    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800a164:	231f      	movs	r3, #31
 800a166:	18fb      	adds	r3, r7, r3
 800a168:	2200      	movs	r2, #0
 800a16a:	701a      	strb	r2, [r3, #0]
 800a16c:	e054      	b.n	800a218 <SecureElementSetKey+0xd4>
    {
        if( SeNvmCtx.KeyList[i].KeyID == keyID )
 800a16e:	231f      	movs	r3, #31
 800a170:	18fb      	adds	r3, r7, r3
 800a172:	781a      	ldrb	r2, [r3, #0]
 800a174:	482d      	ldr	r0, [pc, #180]	; (800a22c <SecureElementSetKey+0xe8>)
 800a176:	2383      	movs	r3, #131	; 0x83
 800a178:	0099      	lsls	r1, r3, #2
 800a17a:	0013      	movs	r3, r2
 800a17c:	011b      	lsls	r3, r3, #4
 800a17e:	189b      	adds	r3, r3, r2
 800a180:	18c3      	adds	r3, r0, r3
 800a182:	185b      	adds	r3, r3, r1
 800a184:	781b      	ldrb	r3, [r3, #0]
 800a186:	1dfa      	adds	r2, r7, #7
 800a188:	7812      	ldrb	r2, [r2, #0]
 800a18a:	429a      	cmp	r2, r3
 800a18c:	d13e      	bne.n	800a20c <SecureElementSetKey+0xc8>
        {
            if( LORAMAC_CRYPTO_MULITCAST_KEYS < SeNvmCtx.KeyList[i].KeyID )
 800a18e:	231f      	movs	r3, #31
 800a190:	18fb      	adds	r3, r7, r3
 800a192:	781a      	ldrb	r2, [r3, #0]
 800a194:	4825      	ldr	r0, [pc, #148]	; (800a22c <SecureElementSetKey+0xe8>)
 800a196:	2383      	movs	r3, #131	; 0x83
 800a198:	0099      	lsls	r1, r3, #2
 800a19a:	0013      	movs	r3, r2
 800a19c:	011b      	lsls	r3, r3, #4
 800a19e:	189b      	adds	r3, r3, r2
 800a1a0:	18c3      	adds	r3, r0, r3
 800a1a2:	185b      	adds	r3, r3, r1
 800a1a4:	781b      	ldrb	r3, [r3, #0]
 800a1a6:	b25b      	sxtb	r3, r3
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	da19      	bge.n	800a1e0 <SecureElementSetKey+0x9c>
            {  // Decrypt the key if its a Mulitcast key

                uint8_t decryptedKey[16] = { 0 };
 800a1ac:	250c      	movs	r5, #12
 800a1ae:	197b      	adds	r3, r7, r5
 800a1b0:	0018      	movs	r0, r3
 800a1b2:	2310      	movs	r3, #16
 800a1b4:	001a      	movs	r2, r3
 800a1b6:	2100      	movs	r1, #0
 800a1b8:	f014 ffc2 	bl	801f140 <memset>

                retval = SecureElementAesEncrypt( key, 16, MC_KE_KEY, decryptedKey );
 800a1bc:	261e      	movs	r6, #30
 800a1be:	19bc      	adds	r4, r7, r6
 800a1c0:	197b      	adds	r3, r7, r5
 800a1c2:	6838      	ldr	r0, [r7, #0]
 800a1c4:	227f      	movs	r2, #127	; 0x7f
 800a1c6:	2110      	movs	r1, #16
 800a1c8:	f000 f89a 	bl	800a300 <SecureElementAesEncrypt>
 800a1cc:	0003      	movs	r3, r0
 800a1ce:	7023      	strb	r3, [r4, #0]
                if( retval != SECURE_ELEMENT_SUCCESS )
 800a1d0:	19bb      	adds	r3, r7, r6
 800a1d2:	781b      	ldrb	r3, [r3, #0]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d019      	beq.n	800a20c <SecureElementSetKey+0xc8>
                {
                    return retval;
 800a1d8:	231e      	movs	r3, #30
 800a1da:	18fb      	adds	r3, r7, r3
 800a1dc:	781b      	ldrb	r3, [r3, #0]
 800a1de:	e021      	b.n	800a224 <SecureElementSetKey+0xe0>
                }
            }
            else
            {
                memcpy1( SeNvmCtx.KeyList[i].KeyValue, key, KEY_SIZE );
 800a1e0:	231f      	movs	r3, #31
 800a1e2:	18fb      	adds	r3, r7, r3
 800a1e4:	781a      	ldrb	r2, [r3, #0]
 800a1e6:	0013      	movs	r3, r2
 800a1e8:	011b      	lsls	r3, r3, #4
 800a1ea:	189b      	adds	r3, r3, r2
 800a1ec:	2282      	movs	r2, #130	; 0x82
 800a1ee:	0092      	lsls	r2, r2, #2
 800a1f0:	189a      	adds	r2, r3, r2
 800a1f2:	4b0e      	ldr	r3, [pc, #56]	; (800a22c <SecureElementSetKey+0xe8>)
 800a1f4:	18d3      	adds	r3, r2, r3
 800a1f6:	3305      	adds	r3, #5
 800a1f8:	6839      	ldr	r1, [r7, #0]
 800a1fa:	2210      	movs	r2, #16
 800a1fc:	0018      	movs	r0, r3
 800a1fe:	f00b fbf7 	bl	80159f0 <memcpy1>
                SeNvmCtxChanged( );
 800a202:	4b0b      	ldr	r3, [pc, #44]	; (800a230 <SecureElementSetKey+0xec>)
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	4798      	blx	r3
                return SECURE_ELEMENT_SUCCESS;
 800a208:	2300      	movs	r3, #0
 800a20a:	e00b      	b.n	800a224 <SecureElementSetKey+0xe0>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800a20c:	211f      	movs	r1, #31
 800a20e:	187b      	adds	r3, r7, r1
 800a210:	781a      	ldrb	r2, [r3, #0]
 800a212:	187b      	adds	r3, r7, r1
 800a214:	3201      	adds	r2, #1
 800a216:	701a      	strb	r2, [r3, #0]
 800a218:	231f      	movs	r3, #31
 800a21a:	18fb      	adds	r3, r7, r3
 800a21c:	781b      	ldrb	r3, [r3, #0]
 800a21e:	2b15      	cmp	r3, #21
 800a220:	d9a5      	bls.n	800a16e <SecureElementSetKey+0x2a>
            }
        }
    }

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800a222:	2303      	movs	r3, #3
}
 800a224:	0018      	movs	r0, r3
 800a226:	46bd      	mov	sp, r7
 800a228:	b009      	add	sp, #36	; 0x24
 800a22a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a22c:	20000380 	.word	0x20000380
 800a230:	20000704 	.word	0x20000704

0800a234 <SecureElementComputeAesCmac>:

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID, uint32_t* cmac )
{
 800a234:	b590      	push	{r4, r7, lr}
 800a236:	b085      	sub	sp, #20
 800a238:	af00      	add	r7, sp, #0
 800a23a:	60f8      	str	r0, [r7, #12]
 800a23c:	0008      	movs	r0, r1
 800a23e:	0011      	movs	r1, r2
 800a240:	607b      	str	r3, [r7, #4]
 800a242:	230a      	movs	r3, #10
 800a244:	18fb      	adds	r3, r7, r3
 800a246:	1c02      	adds	r2, r0, #0
 800a248:	801a      	strh	r2, [r3, #0]
 800a24a:	2009      	movs	r0, #9
 800a24c:	183b      	adds	r3, r7, r0
 800a24e:	1c0a      	adds	r2, r1, #0
 800a250:	701a      	strb	r2, [r3, #0]
    if( keyID >= LORAMAC_CRYPTO_MULITCAST_KEYS )
 800a252:	183b      	adds	r3, r7, r0
 800a254:	781b      	ldrb	r3, [r3, #0]
 800a256:	2b7e      	cmp	r3, #126	; 0x7e
 800a258:	d901      	bls.n	800a25e <SecureElementComputeAesCmac+0x2a>
    {
        //Never accept multicast key identifier for cmac computation
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800a25a:	2303      	movs	r3, #3
 800a25c:	e00b      	b.n	800a276 <SecureElementComputeAesCmac+0x42>
    }

    return ComputeCmac( buffer, size, keyID, cmac );
 800a25e:	687c      	ldr	r4, [r7, #4]
 800a260:	2309      	movs	r3, #9
 800a262:	18fb      	adds	r3, r7, r3
 800a264:	781a      	ldrb	r2, [r3, #0]
 800a266:	230a      	movs	r3, #10
 800a268:	18fb      	adds	r3, r7, r3
 800a26a:	8819      	ldrh	r1, [r3, #0]
 800a26c:	68f8      	ldr	r0, [r7, #12]
 800a26e:	0023      	movs	r3, r4
 800a270:	f7ff fd5e 	bl	8009d30 <ComputeCmac>
 800a274:	0003      	movs	r3, r0
}
 800a276:	0018      	movs	r0, r3
 800a278:	46bd      	mov	sp, r7
 800a27a:	b005      	add	sp, #20
 800a27c:	bd90      	pop	{r4, r7, pc}

0800a27e <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t* buffer, uint16_t size, uint32_t expectedCmac, KeyIdentifier_t keyID )
{
 800a27e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a280:	b087      	sub	sp, #28
 800a282:	af00      	add	r7, sp, #0
 800a284:	60f8      	str	r0, [r7, #12]
 800a286:	0008      	movs	r0, r1
 800a288:	607a      	str	r2, [r7, #4]
 800a28a:	0019      	movs	r1, r3
 800a28c:	230a      	movs	r3, #10
 800a28e:	18fb      	adds	r3, r7, r3
 800a290:	1c02      	adds	r2, r0, #0
 800a292:	801a      	strh	r2, [r3, #0]
 800a294:	2309      	movs	r3, #9
 800a296:	18fb      	adds	r3, r7, r3
 800a298:	1c0a      	adds	r2, r1, #0
 800a29a:	701a      	strb	r2, [r3, #0]
    if( buffer == NULL )
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d101      	bne.n	800a2a6 <SecureElementVerifyAesCmac+0x28>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800a2a2:	2302      	movs	r3, #2
 800a2a4:	e027      	b.n	800a2f6 <SecureElementVerifyAesCmac+0x78>
    }

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800a2a6:	2617      	movs	r6, #23
 800a2a8:	19bb      	adds	r3, r7, r6
 800a2aa:	2206      	movs	r2, #6
 800a2ac:	701a      	strb	r2, [r3, #0]
    uint32_t compCmac = 0;
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	613b      	str	r3, [r7, #16]

    retval = ComputeCmac( buffer, size, keyID, &compCmac );
 800a2b2:	19bc      	adds	r4, r7, r6
 800a2b4:	2310      	movs	r3, #16
 800a2b6:	18fd      	adds	r5, r7, r3
 800a2b8:	2309      	movs	r3, #9
 800a2ba:	18fb      	adds	r3, r7, r3
 800a2bc:	781a      	ldrb	r2, [r3, #0]
 800a2be:	230a      	movs	r3, #10
 800a2c0:	18fb      	adds	r3, r7, r3
 800a2c2:	8819      	ldrh	r1, [r3, #0]
 800a2c4:	68f8      	ldr	r0, [r7, #12]
 800a2c6:	002b      	movs	r3, r5
 800a2c8:	f7ff fd32 	bl	8009d30 <ComputeCmac>
 800a2cc:	0003      	movs	r3, r0
 800a2ce:	7023      	strb	r3, [r4, #0]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800a2d0:	19bb      	adds	r3, r7, r6
 800a2d2:	781b      	ldrb	r3, [r3, #0]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d003      	beq.n	800a2e0 <SecureElementVerifyAesCmac+0x62>
    {
        return retval;
 800a2d8:	2317      	movs	r3, #23
 800a2da:	18fb      	adds	r3, r7, r3
 800a2dc:	781b      	ldrb	r3, [r3, #0]
 800a2de:	e00a      	b.n	800a2f6 <SecureElementVerifyAesCmac+0x78>
    }

    if( expectedCmac != compCmac )
 800a2e0:	693b      	ldr	r3, [r7, #16]
 800a2e2:	687a      	ldr	r2, [r7, #4]
 800a2e4:	429a      	cmp	r2, r3
 800a2e6:	d003      	beq.n	800a2f0 <SecureElementVerifyAesCmac+0x72>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 800a2e8:	2317      	movs	r3, #23
 800a2ea:	18fb      	adds	r3, r7, r3
 800a2ec:	2201      	movs	r2, #1
 800a2ee:	701a      	strb	r2, [r3, #0]
    }

    return retval;
 800a2f0:	2317      	movs	r3, #23
 800a2f2:	18fb      	adds	r3, r7, r3
 800a2f4:	781b      	ldrb	r3, [r3, #0]
}
 800a2f6:	0018      	movs	r0, r3
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	b007      	add	sp, #28
 800a2fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800a300 <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID, uint8_t* encBuffer )
{
 800a300:	b5b0      	push	{r4, r5, r7, lr}
 800a302:	b086      	sub	sp, #24
 800a304:	af00      	add	r7, sp, #0
 800a306:	60f8      	str	r0, [r7, #12]
 800a308:	0008      	movs	r0, r1
 800a30a:	0011      	movs	r1, r2
 800a30c:	607b      	str	r3, [r7, #4]
 800a30e:	230a      	movs	r3, #10
 800a310:	18fb      	adds	r3, r7, r3
 800a312:	1c02      	adds	r2, r0, #0
 800a314:	801a      	strh	r2, [r3, #0]
 800a316:	2309      	movs	r3, #9
 800a318:	18fb      	adds	r3, r7, r3
 800a31a:	1c0a      	adds	r2, r1, #0
 800a31c:	701a      	strb	r2, [r3, #0]
    if( buffer == NULL || encBuffer == NULL )
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d002      	beq.n	800a32a <SecureElementAesEncrypt+0x2a>
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d101      	bne.n	800a32e <SecureElementAesEncrypt+0x2e>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800a32a:	2302      	movs	r3, #2
 800a32c:	e04c      	b.n	800a3c8 <SecureElementAesEncrypt+0xc8>
    }

    // Check if the size is divisible by 16,
    if( ( size % 16 ) != 0 )
 800a32e:	230a      	movs	r3, #10
 800a330:	18fb      	adds	r3, r7, r3
 800a332:	881b      	ldrh	r3, [r3, #0]
 800a334:	220f      	movs	r2, #15
 800a336:	4013      	ands	r3, r2
 800a338:	b29b      	uxth	r3, r3
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d001      	beq.n	800a342 <SecureElementAesEncrypt+0x42>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800a33e:	2305      	movs	r3, #5
 800a340:	e042      	b.n	800a3c8 <SecureElementAesEncrypt+0xc8>
    }

    memset1( SeNvmCtx.AesContext.ksch, '\0', 240 );
 800a342:	4b23      	ldr	r3, [pc, #140]	; (800a3d0 <SecureElementAesEncrypt+0xd0>)
 800a344:	22f0      	movs	r2, #240	; 0xf0
 800a346:	2100      	movs	r1, #0
 800a348:	0018      	movs	r0, r3
 800a34a:	f00b fb8d 	bl	8015a68 <memset1>

    Key_t* pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 800a34e:	2516      	movs	r5, #22
 800a350:	197c      	adds	r4, r7, r5
 800a352:	2310      	movs	r3, #16
 800a354:	18fa      	adds	r2, r7, r3
 800a356:	2309      	movs	r3, #9
 800a358:	18fb      	adds	r3, r7, r3
 800a35a:	781b      	ldrb	r3, [r3, #0]
 800a35c:	0011      	movs	r1, r2
 800a35e:	0018      	movs	r0, r3
 800a360:	f7ff fca8 	bl	8009cb4 <GetKeyByID>
 800a364:	0003      	movs	r3, r0
 800a366:	7023      	strb	r3, [r4, #0]

    if( retval == SECURE_ELEMENT_SUCCESS )
 800a368:	197b      	adds	r3, r7, r5
 800a36a:	781b      	ldrb	r3, [r3, #0]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d128      	bne.n	800a3c2 <SecureElementAesEncrypt+0xc2>
    {
        aes_set_key( pItem->KeyValue, 16, &SeNvmCtx.AesContext );
 800a370:	693b      	ldr	r3, [r7, #16]
 800a372:	3301      	adds	r3, #1
 800a374:	4a16      	ldr	r2, [pc, #88]	; (800a3d0 <SecureElementAesEncrypt+0xd0>)
 800a376:	2110      	movs	r1, #16
 800a378:	0018      	movs	r0, r3
 800a37a:	f7ff f8cf 	bl	800951c <aes_set_key>

        uint8_t block = 0;
 800a37e:	2317      	movs	r3, #23
 800a380:	18fb      	adds	r3, r7, r3
 800a382:	2200      	movs	r2, #0
 800a384:	701a      	strb	r2, [r3, #0]

        while( size != 0 )
 800a386:	e017      	b.n	800a3b8 <SecureElementAesEncrypt+0xb8>
        {
            aes_encrypt( &buffer[block], &encBuffer[block], &SeNvmCtx.AesContext );
 800a388:	2417      	movs	r4, #23
 800a38a:	193b      	adds	r3, r7, r4
 800a38c:	781b      	ldrb	r3, [r3, #0]
 800a38e:	68fa      	ldr	r2, [r7, #12]
 800a390:	18d0      	adds	r0, r2, r3
 800a392:	193b      	adds	r3, r7, r4
 800a394:	781b      	ldrb	r3, [r3, #0]
 800a396:	687a      	ldr	r2, [r7, #4]
 800a398:	18d3      	adds	r3, r2, r3
 800a39a:	4a0d      	ldr	r2, [pc, #52]	; (800a3d0 <SecureElementAesEncrypt+0xd0>)
 800a39c:	0019      	movs	r1, r3
 800a39e:	f7ff f9ef 	bl	8009780 <aes_encrypt>
            block = block + 16;
 800a3a2:	193b      	adds	r3, r7, r4
 800a3a4:	193a      	adds	r2, r7, r4
 800a3a6:	7812      	ldrb	r2, [r2, #0]
 800a3a8:	3210      	adds	r2, #16
 800a3aa:	701a      	strb	r2, [r3, #0]
            size = size - 16;
 800a3ac:	220a      	movs	r2, #10
 800a3ae:	18bb      	adds	r3, r7, r2
 800a3b0:	18ba      	adds	r2, r7, r2
 800a3b2:	8812      	ldrh	r2, [r2, #0]
 800a3b4:	3a10      	subs	r2, #16
 800a3b6:	801a      	strh	r2, [r3, #0]
        while( size != 0 )
 800a3b8:	230a      	movs	r3, #10
 800a3ba:	18fb      	adds	r3, r7, r3
 800a3bc:	881b      	ldrh	r3, [r3, #0]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d1e2      	bne.n	800a388 <SecureElementAesEncrypt+0x88>
        }
    }
    return retval;
 800a3c2:	2316      	movs	r3, #22
 800a3c4:	18fb      	adds	r3, r7, r3
 800a3c6:	781b      	ldrb	r3, [r3, #0]
}
 800a3c8:	0018      	movs	r0, r3
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	b006      	add	sp, #24
 800a3ce:	bdb0      	pop	{r4, r5, r7, pc}
 800a3d0:	20000380 	.word	0x20000380

0800a3d4 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( Version_t version, uint8_t* input, KeyIdentifier_t rootKeyID, KeyIdentifier_t targetKeyID )
{
 800a3d4:	b5b0      	push	{r4, r5, r7, lr}
 800a3d6:	b08a      	sub	sp, #40	; 0x28
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	60f8      	str	r0, [r7, #12]
 800a3dc:	60b9      	str	r1, [r7, #8]
 800a3de:	0019      	movs	r1, r3
 800a3e0:	1dfb      	adds	r3, r7, #7
 800a3e2:	701a      	strb	r2, [r3, #0]
 800a3e4:	1dbb      	adds	r3, r7, #6
 800a3e6:	1c0a      	adds	r2, r1, #0
 800a3e8:	701a      	strb	r2, [r3, #0]
    if( input == NULL )
 800a3ea:	68bb      	ldr	r3, [r7, #8]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d101      	bne.n	800a3f4 <SecureElementDeriveAndStoreKey+0x20>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800a3f0:	2302      	movs	r3, #2
 800a3f2:	e066      	b.n	800a4c2 <SecureElementDeriveAndStoreKey+0xee>
    }

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800a3f4:	2327      	movs	r3, #39	; 0x27
 800a3f6:	18fb      	adds	r3, r7, r3
 800a3f8:	2206      	movs	r2, #6
 800a3fa:	701a      	strb	r2, [r3, #0]
    uint8_t key[16] = { 0 };
 800a3fc:	2314      	movs	r3, #20
 800a3fe:	18fb      	adds	r3, r7, r3
 800a400:	0018      	movs	r0, r3
 800a402:	2310      	movs	r3, #16
 800a404:	001a      	movs	r2, r3
 800a406:	2100      	movs	r1, #0
 800a408:	f014 fe9a 	bl	801f140 <memset>

    // In case of MC_KE_KEY, prevent other keys than NwkKey or AppKey for LoRaWAN 1.1 or later
    if( targetKeyID == MC_KE_KEY )
 800a40c:	1dbb      	adds	r3, r7, #6
 800a40e:	781b      	ldrb	r3, [r3, #0]
 800a410:	2b7f      	cmp	r3, #127	; 0x7f
 800a412:	d10e      	bne.n	800a432 <SecureElementDeriveAndStoreKey+0x5e>
    {
        if( ( ( rootKeyID == APP_KEY ) && ( version.Fields.Minor == 0 ) ) || ( rootKeyID == NWK_KEY ) )
 800a414:	1dfb      	adds	r3, r7, #7
 800a416:	781b      	ldrb	r3, [r3, #0]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d104      	bne.n	800a426 <SecureElementDeriveAndStoreKey+0x52>
 800a41c:	230c      	movs	r3, #12
 800a41e:	18fb      	adds	r3, r7, r3
 800a420:	789b      	ldrb	r3, [r3, #2]
 800a422:	2b00      	cmp	r3, #0
 800a424:	d003      	beq.n	800a42e <SecureElementDeriveAndStoreKey+0x5a>
 800a426:	1dfb      	adds	r3, r7, #7
 800a428:	781b      	ldrb	r3, [r3, #0]
 800a42a:	2b01      	cmp	r3, #1
 800a42c:	d101      	bne.n	800a432 <SecureElementDeriveAndStoreKey+0x5e>
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800a42e:	2303      	movs	r3, #3
 800a430:	e047      	b.n	800a4c2 <SecureElementDeriveAndStoreKey+0xee>
        }
    }

    // In case of McKEKey derivation, the parameter input is concatenated: nonce | DevEUI  | pad16
    // where nonce SHALL be greater than 15
    uint16_t nonce = input[0];
 800a432:	68bb      	ldr	r3, [r7, #8]
 800a434:	781a      	ldrb	r2, [r3, #0]
 800a436:	2124      	movs	r1, #36	; 0x24
 800a438:	187b      	adds	r3, r7, r1
 800a43a:	801a      	strh	r2, [r3, #0]
    nonce |= ( ( uint16_t ) input[1] << 8 );
 800a43c:	68bb      	ldr	r3, [r7, #8]
 800a43e:	3301      	adds	r3, #1
 800a440:	781b      	ldrb	r3, [r3, #0]
 800a442:	021b      	lsls	r3, r3, #8
 800a444:	b21a      	sxth	r2, r3
 800a446:	187b      	adds	r3, r7, r1
 800a448:	2000      	movs	r0, #0
 800a44a:	5e1b      	ldrsh	r3, [r3, r0]
 800a44c:	4313      	orrs	r3, r2
 800a44e:	b21a      	sxth	r2, r3
 800a450:	187b      	adds	r3, r7, r1
 800a452:	801a      	strh	r2, [r3, #0]
    if( ( targetKeyID == MC_KE_KEY ) && ( nonce < 16 ) )
 800a454:	1dbb      	adds	r3, r7, #6
 800a456:	781b      	ldrb	r3, [r3, #0]
 800a458:	2b7f      	cmp	r3, #127	; 0x7f
 800a45a:	d108      	bne.n	800a46e <SecureElementDeriveAndStoreKey+0x9a>
 800a45c:	2324      	movs	r3, #36	; 0x24
 800a45e:	18fb      	adds	r3, r7, r3
 800a460:	881b      	ldrh	r3, [r3, #0]
 800a462:	2b0f      	cmp	r3, #15
 800a464:	d803      	bhi.n	800a46e <SecureElementDeriveAndStoreKey+0x9a>
    {
        return retval;
 800a466:	2327      	movs	r3, #39	; 0x27
 800a468:	18fb      	adds	r3, r7, r3
 800a46a:	781b      	ldrb	r3, [r3, #0]
 800a46c:	e029      	b.n	800a4c2 <SecureElementDeriveAndStoreKey+0xee>
    }

    // Derive key
    retval = SecureElementAesEncrypt( input, 16, rootKeyID, key );
 800a46e:	2527      	movs	r5, #39	; 0x27
 800a470:	197c      	adds	r4, r7, r5
 800a472:	2314      	movs	r3, #20
 800a474:	18f9      	adds	r1, r7, r3
 800a476:	1dfb      	adds	r3, r7, #7
 800a478:	781a      	ldrb	r2, [r3, #0]
 800a47a:	68b8      	ldr	r0, [r7, #8]
 800a47c:	000b      	movs	r3, r1
 800a47e:	2110      	movs	r1, #16
 800a480:	f7ff ff3e 	bl	800a300 <SecureElementAesEncrypt>
 800a484:	0003      	movs	r3, r0
 800a486:	7023      	strb	r3, [r4, #0]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800a488:	197b      	adds	r3, r7, r5
 800a48a:	781b      	ldrb	r3, [r3, #0]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d003      	beq.n	800a498 <SecureElementDeriveAndStoreKey+0xc4>
    {
        return retval;
 800a490:	2327      	movs	r3, #39	; 0x27
 800a492:	18fb      	adds	r3, r7, r3
 800a494:	781b      	ldrb	r3, [r3, #0]
 800a496:	e014      	b.n	800a4c2 <SecureElementDeriveAndStoreKey+0xee>
    }

    // Store key
    retval = SecureElementSetKey( targetKeyID, key );
 800a498:	2527      	movs	r5, #39	; 0x27
 800a49a:	197c      	adds	r4, r7, r5
 800a49c:	2314      	movs	r3, #20
 800a49e:	18fa      	adds	r2, r7, r3
 800a4a0:	1dbb      	adds	r3, r7, #6
 800a4a2:	781b      	ldrb	r3, [r3, #0]
 800a4a4:	0011      	movs	r1, r2
 800a4a6:	0018      	movs	r0, r3
 800a4a8:	f7ff fe4c 	bl	800a144 <SecureElementSetKey>
 800a4ac:	0003      	movs	r3, r0
 800a4ae:	7023      	strb	r3, [r4, #0]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800a4b0:	197b      	adds	r3, r7, r5
 800a4b2:	781b      	ldrb	r3, [r3, #0]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d003      	beq.n	800a4c0 <SecureElementDeriveAndStoreKey+0xec>
    {
        return retval;
 800a4b8:	2327      	movs	r3, #39	; 0x27
 800a4ba:	18fb      	adds	r3, r7, r3
 800a4bc:	781b      	ldrb	r3, [r3, #0]
 800a4be:	e000      	b.n	800a4c2 <SecureElementDeriveAndStoreKey+0xee>
    }

    return SECURE_ELEMENT_SUCCESS;
 800a4c0:	2300      	movs	r3, #0
}
 800a4c2:	0018      	movs	r0, r3
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	b00a      	add	sp, #40	; 0x28
 800a4c8:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800a4cc <OnRadioTxDone>:
    int16_t Rssi;
    int8_t Snr;
}RxDoneParams;

static void OnRadioTxDone( void )
{
 800a4cc:	b590      	push	{r4, r7, lr}
 800a4ce:	b083      	sub	sp, #12
 800a4d0:	af00      	add	r7, sp, #0
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 800a4d2:	f00b fa37 	bl	8015944 <TimerGetCurrentTime>
 800a4d6:	0002      	movs	r2, r0
 800a4d8:	4b1f      	ldr	r3, [pc, #124]	; (800a558 <OnRadioTxDone+0x8c>)
 800a4da:	601a      	str	r2, [r3, #0]
    uint64_t tm = itsdk_time_get_ms();
 800a4dc:	f012 fe00 	bl	801d0e0 <itsdk_time_get_ms>
 800a4e0:	0003      	movs	r3, r0
 800a4e2:	000c      	movs	r4, r1
 800a4e4:	603b      	str	r3, [r7, #0]
 800a4e6:	607c      	str	r4, [r7, #4]
    MacCtx.LastTxSysTime.Seconds = tm/1000;
 800a4e8:	6838      	ldr	r0, [r7, #0]
 800a4ea:	6879      	ldr	r1, [r7, #4]
 800a4ec:	22fa      	movs	r2, #250	; 0xfa
 800a4ee:	0092      	lsls	r2, r2, #2
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	f7f5 ffe9 	bl	80004c8 <__aeabi_uldivmod>
 800a4f6:	0003      	movs	r3, r0
 800a4f8:	000c      	movs	r4, r1
 800a4fa:	0019      	movs	r1, r3
 800a4fc:	4a17      	ldr	r2, [pc, #92]	; (800a55c <OnRadioTxDone+0x90>)
 800a4fe:	23d3      	movs	r3, #211	; 0xd3
 800a500:	009b      	lsls	r3, r3, #2
 800a502:	50d1      	str	r1, [r2, r3]
    MacCtx.LastTxSysTime.SubSeconds = tm % 1000;
 800a504:	6838      	ldr	r0, [r7, #0]
 800a506:	6879      	ldr	r1, [r7, #4]
 800a508:	22fa      	movs	r2, #250	; 0xfa
 800a50a:	0092      	lsls	r2, r2, #2
 800a50c:	2300      	movs	r3, #0
 800a50e:	f7f5 ffdb 	bl	80004c8 <__aeabi_uldivmod>
 800a512:	001c      	movs	r4, r3
 800a514:	0013      	movs	r3, r2
 800a516:	b219      	sxth	r1, r3
 800a518:	4a10      	ldr	r2, [pc, #64]	; (800a55c <OnRadioTxDone+0x90>)
 800a51a:	23d4      	movs	r3, #212	; 0xd4
 800a51c:	009b      	lsls	r3, r3, #2
 800a51e:	52d1      	strh	r1, [r2, r3]

    LoRaMacRadioEvents.Events.TxDone = 1;
 800a520:	4b0f      	ldr	r3, [pc, #60]	; (800a560 <OnRadioTxDone+0x94>)
 800a522:	781a      	ldrb	r2, [r3, #0]
 800a524:	2110      	movs	r1, #16
 800a526:	430a      	orrs	r2, r1
 800a528:	701a      	strb	r2, [r3, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800a52a:	4a0c      	ldr	r2, [pc, #48]	; (800a55c <OnRadioTxDone+0x90>)
 800a52c:	23d7      	movs	r3, #215	; 0xd7
 800a52e:	009b      	lsls	r3, r3, #2
 800a530:	58d3      	ldr	r3, [r2, r3]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d00c      	beq.n	800a550 <OnRadioTxDone+0x84>
 800a536:	4a09      	ldr	r2, [pc, #36]	; (800a55c <OnRadioTxDone+0x90>)
 800a538:	23d7      	movs	r3, #215	; 0xd7
 800a53a:	009b      	lsls	r3, r3, #2
 800a53c:	58d3      	ldr	r3, [r2, r3]
 800a53e:	68db      	ldr	r3, [r3, #12]
 800a540:	2b00      	cmp	r3, #0
 800a542:	d005      	beq.n	800a550 <OnRadioTxDone+0x84>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800a544:	4a05      	ldr	r2, [pc, #20]	; (800a55c <OnRadioTxDone+0x90>)
 800a546:	23d7      	movs	r3, #215	; 0xd7
 800a548:	009b      	lsls	r3, r3, #2
 800a54a:	58d3      	ldr	r3, [r2, r3]
 800a54c:	68db      	ldr	r3, [r3, #12]
 800a54e:	4798      	blx	r3
    }
#if !defined(NO_MAC_PRINTF)
    PRINTNOW(); PRINTF("PHY txDone\n\r" );
#endif
}
 800a550:	46c0      	nop			; (mov r8, r8)
 800a552:	46bd      	mov	sp, r7
 800a554:	b003      	add	sp, #12
 800a556:	bd90      	pop	{r4, r7, pc}
 800a558:	20001568 	.word	0x20001568
 800a55c:	20000708 	.word	0x20000708
 800a560:	20000da8 	.word	0x20000da8

0800a564 <OnRadioRxDone>:

static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 800a564:	b5b0      	push	{r4, r5, r7, lr}
 800a566:	b084      	sub	sp, #16
 800a568:	af00      	add	r7, sp, #0
 800a56a:	60f8      	str	r0, [r7, #12]
 800a56c:	000c      	movs	r4, r1
 800a56e:	0010      	movs	r0, r2
 800a570:	0019      	movs	r1, r3
 800a572:	250a      	movs	r5, #10
 800a574:	197b      	adds	r3, r7, r5
 800a576:	1c22      	adds	r2, r4, #0
 800a578:	801a      	strh	r2, [r3, #0]
 800a57a:	2408      	movs	r4, #8
 800a57c:	193b      	adds	r3, r7, r4
 800a57e:	1c02      	adds	r2, r0, #0
 800a580:	801a      	strh	r2, [r3, #0]
 800a582:	1dfb      	adds	r3, r7, #7
 800a584:	1c0a      	adds	r2, r1, #0
 800a586:	701a      	strb	r2, [r3, #0]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800a588:	f00b f9dc 	bl	8015944 <TimerGetCurrentTime>
 800a58c:	0002      	movs	r2, r0
 800a58e:	4b16      	ldr	r3, [pc, #88]	; (800a5e8 <OnRadioRxDone+0x84>)
 800a590:	601a      	str	r2, [r3, #0]
    RxDoneParams.Payload = payload;
 800a592:	4b15      	ldr	r3, [pc, #84]	; (800a5e8 <OnRadioRxDone+0x84>)
 800a594:	68fa      	ldr	r2, [r7, #12]
 800a596:	605a      	str	r2, [r3, #4]
    RxDoneParams.Size = size;
 800a598:	4b13      	ldr	r3, [pc, #76]	; (800a5e8 <OnRadioRxDone+0x84>)
 800a59a:	197a      	adds	r2, r7, r5
 800a59c:	8812      	ldrh	r2, [r2, #0]
 800a59e:	811a      	strh	r2, [r3, #8]
    RxDoneParams.Rssi = rssi;
 800a5a0:	4b11      	ldr	r3, [pc, #68]	; (800a5e8 <OnRadioRxDone+0x84>)
 800a5a2:	193a      	adds	r2, r7, r4
 800a5a4:	8812      	ldrh	r2, [r2, #0]
 800a5a6:	815a      	strh	r2, [r3, #10]
    RxDoneParams.Snr = snr;
 800a5a8:	4b0f      	ldr	r3, [pc, #60]	; (800a5e8 <OnRadioRxDone+0x84>)
 800a5aa:	1dfa      	adds	r2, r7, #7
 800a5ac:	7812      	ldrb	r2, [r2, #0]
 800a5ae:	731a      	strb	r2, [r3, #12]

    LoRaMacRadioEvents.Events.RxDone = 1;
 800a5b0:	4b0e      	ldr	r3, [pc, #56]	; (800a5ec <OnRadioRxDone+0x88>)
 800a5b2:	781a      	ldrb	r2, [r3, #0]
 800a5b4:	2108      	movs	r1, #8
 800a5b6:	430a      	orrs	r2, r1
 800a5b8:	701a      	strb	r2, [r3, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800a5ba:	4a0d      	ldr	r2, [pc, #52]	; (800a5f0 <OnRadioRxDone+0x8c>)
 800a5bc:	23d7      	movs	r3, #215	; 0xd7
 800a5be:	009b      	lsls	r3, r3, #2
 800a5c0:	58d3      	ldr	r3, [r2, r3]
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d00c      	beq.n	800a5e0 <OnRadioRxDone+0x7c>
 800a5c6:	4a0a      	ldr	r2, [pc, #40]	; (800a5f0 <OnRadioRxDone+0x8c>)
 800a5c8:	23d7      	movs	r3, #215	; 0xd7
 800a5ca:	009b      	lsls	r3, r3, #2
 800a5cc:	58d3      	ldr	r3, [r2, r3]
 800a5ce:	68db      	ldr	r3, [r3, #12]
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d005      	beq.n	800a5e0 <OnRadioRxDone+0x7c>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800a5d4:	4a06      	ldr	r2, [pc, #24]	; (800a5f0 <OnRadioRxDone+0x8c>)
 800a5d6:	23d7      	movs	r3, #215	; 0xd7
 800a5d8:	009b      	lsls	r3, r3, #2
 800a5da:	58d3      	ldr	r3, [r2, r3]
 800a5dc:	68db      	ldr	r3, [r3, #12]
 800a5de:	4798      	blx	r3
    }
#if !defined(NO_MAC_PRINTF)
    PRINTNOW(); PRINTF("PHY rxDone\n\r" );
#endif
}
 800a5e0:	46c0      	nop			; (mov r8, r8)
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	b004      	add	sp, #16
 800a5e6:	bdb0      	pop	{r4, r5, r7, pc}
 800a5e8:	2000156c 	.word	0x2000156c
 800a5ec:	20000da8 	.word	0x20000da8
 800a5f0:	20000708 	.word	0x20000708

0800a5f4 <OnRadioTxTimeout>:

static void OnRadioTxTimeout( void )
{
 800a5f4:	b580      	push	{r7, lr}
 800a5f6:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800a5f8:	4b0d      	ldr	r3, [pc, #52]	; (800a630 <OnRadioTxTimeout+0x3c>)
 800a5fa:	781a      	ldrb	r2, [r3, #0]
 800a5fc:	2104      	movs	r1, #4
 800a5fe:	430a      	orrs	r2, r1
 800a600:	701a      	strb	r2, [r3, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800a602:	4a0c      	ldr	r2, [pc, #48]	; (800a634 <OnRadioTxTimeout+0x40>)
 800a604:	23d7      	movs	r3, #215	; 0xd7
 800a606:	009b      	lsls	r3, r3, #2
 800a608:	58d3      	ldr	r3, [r2, r3]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d00c      	beq.n	800a628 <OnRadioTxTimeout+0x34>
 800a60e:	4a09      	ldr	r2, [pc, #36]	; (800a634 <OnRadioTxTimeout+0x40>)
 800a610:	23d7      	movs	r3, #215	; 0xd7
 800a612:	009b      	lsls	r3, r3, #2
 800a614:	58d3      	ldr	r3, [r2, r3]
 800a616:	68db      	ldr	r3, [r3, #12]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d005      	beq.n	800a628 <OnRadioTxTimeout+0x34>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800a61c:	4a05      	ldr	r2, [pc, #20]	; (800a634 <OnRadioTxTimeout+0x40>)
 800a61e:	23d7      	movs	r3, #215	; 0xd7
 800a620:	009b      	lsls	r3, r3, #2
 800a622:	58d3      	ldr	r3, [r2, r3]
 800a624:	68db      	ldr	r3, [r3, #12]
 800a626:	4798      	blx	r3
    }
#if !defined(NO_MAC_PRINTF)
    PRINTNOW(); PRINTF("PHY txTimeOut\n\r" );
#endif
}
 800a628:	46c0      	nop			; (mov r8, r8)
 800a62a:	46bd      	mov	sp, r7
 800a62c:	bd80      	pop	{r7, pc}
 800a62e:	46c0      	nop			; (mov r8, r8)
 800a630:	20000da8 	.word	0x20000da8
 800a634:	20000708 	.word	0x20000708

0800a638 <OnRadioRxError>:

static void OnRadioRxError( void )
{
 800a638:	b580      	push	{r7, lr}
 800a63a:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxError = 1;
 800a63c:	4b0d      	ldr	r3, [pc, #52]	; (800a674 <OnRadioRxError+0x3c>)
 800a63e:	781a      	ldrb	r2, [r3, #0]
 800a640:	2102      	movs	r1, #2
 800a642:	430a      	orrs	r2, r1
 800a644:	701a      	strb	r2, [r3, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800a646:	4a0c      	ldr	r2, [pc, #48]	; (800a678 <OnRadioRxError+0x40>)
 800a648:	23d7      	movs	r3, #215	; 0xd7
 800a64a:	009b      	lsls	r3, r3, #2
 800a64c:	58d3      	ldr	r3, [r2, r3]
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d00c      	beq.n	800a66c <OnRadioRxError+0x34>
 800a652:	4a09      	ldr	r2, [pc, #36]	; (800a678 <OnRadioRxError+0x40>)
 800a654:	23d7      	movs	r3, #215	; 0xd7
 800a656:	009b      	lsls	r3, r3, #2
 800a658:	58d3      	ldr	r3, [r2, r3]
 800a65a:	68db      	ldr	r3, [r3, #12]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d005      	beq.n	800a66c <OnRadioRxError+0x34>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800a660:	4a05      	ldr	r2, [pc, #20]	; (800a678 <OnRadioRxError+0x40>)
 800a662:	23d7      	movs	r3, #215	; 0xd7
 800a664:	009b      	lsls	r3, r3, #2
 800a666:	58d3      	ldr	r3, [r2, r3]
 800a668:	68db      	ldr	r3, [r3, #12]
 800a66a:	4798      	blx	r3
    }
}
 800a66c:	46c0      	nop			; (mov r8, r8)
 800a66e:	46bd      	mov	sp, r7
 800a670:	bd80      	pop	{r7, pc}
 800a672:	46c0      	nop			; (mov r8, r8)
 800a674:	20000da8 	.word	0x20000da8
 800a678:	20000708 	.word	0x20000708

0800a67c <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
 800a67c:	b580      	push	{r7, lr}
 800a67e:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800a680:	4b0d      	ldr	r3, [pc, #52]	; (800a6b8 <OnRadioRxTimeout+0x3c>)
 800a682:	781a      	ldrb	r2, [r3, #0]
 800a684:	2101      	movs	r1, #1
 800a686:	430a      	orrs	r2, r1
 800a688:	701a      	strb	r2, [r3, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800a68a:	4a0c      	ldr	r2, [pc, #48]	; (800a6bc <OnRadioRxTimeout+0x40>)
 800a68c:	23d7      	movs	r3, #215	; 0xd7
 800a68e:	009b      	lsls	r3, r3, #2
 800a690:	58d3      	ldr	r3, [r2, r3]
 800a692:	2b00      	cmp	r3, #0
 800a694:	d00c      	beq.n	800a6b0 <OnRadioRxTimeout+0x34>
 800a696:	4a09      	ldr	r2, [pc, #36]	; (800a6bc <OnRadioRxTimeout+0x40>)
 800a698:	23d7      	movs	r3, #215	; 0xd7
 800a69a:	009b      	lsls	r3, r3, #2
 800a69c:	58d3      	ldr	r3, [r2, r3]
 800a69e:	68db      	ldr	r3, [r3, #12]
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d005      	beq.n	800a6b0 <OnRadioRxTimeout+0x34>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800a6a4:	4a05      	ldr	r2, [pc, #20]	; (800a6bc <OnRadioRxTimeout+0x40>)
 800a6a6:	23d7      	movs	r3, #215	; 0xd7
 800a6a8:	009b      	lsls	r3, r3, #2
 800a6aa:	58d3      	ldr	r3, [r2, r3]
 800a6ac:	68db      	ldr	r3, [r3, #12]
 800a6ae:	4798      	blx	r3
    }
#if !defined(NO_MAC_PRINTF)
    PRINTNOW(); PRINTF("PHY rxTimeOut\n\r" );
#endif
}
 800a6b0:	46c0      	nop			; (mov r8, r8)
 800a6b2:	46bd      	mov	sp, r7
 800a6b4:	bd80      	pop	{r7, pc}
 800a6b6:	46c0      	nop			; (mov r8, r8)
 800a6b8:	20000da8 	.word	0x20000da8
 800a6bc:	20000708 	.word	0x20000708

0800a6c0 <ProcessRadioTxDone>:

static void ProcessRadioTxDone( void )
{
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b084      	sub	sp, #16
 800a6c4:	af00      	add	r7, sp, #0
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    SetBandTxDoneParams_t txDone;

    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 800a6c6:	4a5e      	ldr	r2, [pc, #376]	; (800a840 <ProcessRadioTxDone+0x180>)
 800a6c8:	238e      	movs	r3, #142	; 0x8e
 800a6ca:	00db      	lsls	r3, r3, #3
 800a6cc:	58d3      	ldr	r3, [r2, r3]
 800a6ce:	22c8      	movs	r2, #200	; 0xc8
 800a6d0:	5c9b      	ldrb	r3, [r3, r2]
 800a6d2:	2b02      	cmp	r3, #2
 800a6d4:	d003      	beq.n	800a6de <ProcessRadioTxDone+0x1e>
    {
        Radio.Sleep( );
 800a6d6:	4b5b      	ldr	r3, [pc, #364]	; (800a844 <ProcessRadioTxDone+0x184>)
 800a6d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6da:	4798      	blx	r3
 800a6dc:	e001      	b.n	800a6e2 <ProcessRadioTxDone+0x22>
    }
    else
    {
        OpenContinuousRx2Window( );
 800a6de:	f002 ff95 	bl	800d60c <OpenContinuousRx2Window>
    }

    // Setup timers
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 800a6e2:	4a57      	ldr	r2, [pc, #348]	; (800a840 <ProcessRadioTxDone+0x180>)
 800a6e4:	23f1      	movs	r3, #241	; 0xf1
 800a6e6:	009b      	lsls	r3, r3, #2
 800a6e8:	58d2      	ldr	r2, [r2, r3]
 800a6ea:	4b57      	ldr	r3, [pc, #348]	; (800a848 <ProcessRadioTxDone+0x188>)
 800a6ec:	0011      	movs	r1, r2
 800a6ee:	0018      	movs	r0, r3
 800a6f0:	f00b f86c 	bl	80157cc <TimerSetValue>
    TimerStart( &MacCtx.RxWindowTimer1 );
 800a6f4:	4b54      	ldr	r3, [pc, #336]	; (800a848 <ProcessRadioTxDone+0x188>)
 800a6f6:	0018      	movs	r0, r3
 800a6f8:	f00b f894 	bl	8015824 <TimerStart>
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 800a6fc:	4a50      	ldr	r2, [pc, #320]	; (800a840 <ProcessRadioTxDone+0x180>)
 800a6fe:	238e      	movs	r3, #142	; 0x8e
 800a700:	00db      	lsls	r3, r3, #3
 800a702:	58d3      	ldr	r3, [r2, r3]
 800a704:	22c8      	movs	r2, #200	; 0xc8
 800a706:	5c9b      	ldrb	r3, [r3, r2]
 800a708:	2b02      	cmp	r3, #2
 800a70a:	d00c      	beq.n	800a726 <ProcessRadioTxDone+0x66>
    {
        TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 800a70c:	4a4c      	ldr	r2, [pc, #304]	; (800a840 <ProcessRadioTxDone+0x180>)
 800a70e:	23f2      	movs	r3, #242	; 0xf2
 800a710:	009b      	lsls	r3, r3, #2
 800a712:	58d2      	ldr	r2, [r2, r3]
 800a714:	4b4d      	ldr	r3, [pc, #308]	; (800a84c <ProcessRadioTxDone+0x18c>)
 800a716:	0011      	movs	r1, r2
 800a718:	0018      	movs	r0, r3
 800a71a:	f00b f857 	bl	80157cc <TimerSetValue>
        TimerStart( &MacCtx.RxWindowTimer2 );
 800a71e:	4b4b      	ldr	r3, [pc, #300]	; (800a84c <ProcessRadioTxDone+0x18c>)
 800a720:	0018      	movs	r0, r3
 800a722:	f00b f87f 	bl	8015824 <TimerStart>
    }
    if( ( MacCtx.NvmCtx->DeviceClass == CLASS_C ) || ( MacCtx.NvmCtx->NodeAckRequested == true ) )
 800a726:	4a46      	ldr	r2, [pc, #280]	; (800a840 <ProcessRadioTxDone+0x180>)
 800a728:	238e      	movs	r3, #142	; 0x8e
 800a72a:	00db      	lsls	r3, r3, #3
 800a72c:	58d3      	ldr	r3, [r2, r3]
 800a72e:	22c8      	movs	r2, #200	; 0xc8
 800a730:	5c9b      	ldrb	r3, [r3, r2]
 800a732:	2b02      	cmp	r3, #2
 800a734:	d007      	beq.n	800a746 <ProcessRadioTxDone+0x86>
 800a736:	4a42      	ldr	r2, [pc, #264]	; (800a840 <ProcessRadioTxDone+0x180>)
 800a738:	238e      	movs	r3, #142	; 0x8e
 800a73a:	00db      	lsls	r3, r3, #3
 800a73c:	58d3      	ldr	r3, [r2, r3]
 800a73e:	4a44      	ldr	r2, [pc, #272]	; (800a850 <ProcessRadioTxDone+0x190>)
 800a740:	5c9b      	ldrb	r3, [r3, r2]
 800a742:	2b00      	cmp	r3, #0
 800a744:	d022      	beq.n	800a78c <ProcessRadioTxDone+0xcc>
    {
        getPhy.Attribute = PHY_ACK_TIMEOUT;
 800a746:	210c      	movs	r1, #12
 800a748:	187b      	adds	r3, r7, r1
 800a74a:	2215      	movs	r2, #21
 800a74c:	701a      	strb	r2, [r3, #0]
        phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a74e:	4a3c      	ldr	r2, [pc, #240]	; (800a840 <ProcessRadioTxDone+0x180>)
 800a750:	238e      	movs	r3, #142	; 0x8e
 800a752:	00db      	lsls	r3, r3, #3
 800a754:	58d3      	ldr	r3, [r2, r3]
 800a756:	781b      	ldrb	r3, [r3, #0]
 800a758:	187a      	adds	r2, r7, r1
 800a75a:	0011      	movs	r1, r2
 800a75c:	0018      	movs	r0, r3
 800a75e:	f008 fb8a 	bl	8012e76 <RegionGetPhyParam>
 800a762:	0003      	movs	r3, r0
 800a764:	001a      	movs	r2, r3
 800a766:	2108      	movs	r1, #8
 800a768:	187b      	adds	r3, r7, r1
 800a76a:	601a      	str	r2, [r3, #0]
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 800a76c:	4a34      	ldr	r2, [pc, #208]	; (800a840 <ProcessRadioTxDone+0x180>)
 800a76e:	23f2      	movs	r3, #242	; 0xf2
 800a770:	009b      	lsls	r3, r3, #2
 800a772:	58d2      	ldr	r2, [r2, r3]
 800a774:	187b      	adds	r3, r7, r1
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	18d2      	adds	r2, r2, r3
 800a77a:	4b36      	ldr	r3, [pc, #216]	; (800a854 <ProcessRadioTxDone+0x194>)
 800a77c:	0011      	movs	r1, r2
 800a77e:	0018      	movs	r0, r3
 800a780:	f00b f824 	bl	80157cc <TimerSetValue>
        TimerStart( &MacCtx.AckTimeoutTimer );
 800a784:	4b33      	ldr	r3, [pc, #204]	; (800a854 <ProcessRadioTxDone+0x194>)
 800a786:	0018      	movs	r0, r3
 800a788:	f00b f84c 	bl	8015824 <TimerStart>
    }

    // Store last Tx channel
    MacCtx.NvmCtx->LastTxChannel = MacCtx.NvmCtx->Channel;
 800a78c:	4a2c      	ldr	r2, [pc, #176]	; (800a840 <ProcessRadioTxDone+0x180>)
 800a78e:	238e      	movs	r3, #142	; 0x8e
 800a790:	00db      	lsls	r3, r3, #3
 800a792:	58d1      	ldr	r1, [r2, r3]
 800a794:	4a2a      	ldr	r2, [pc, #168]	; (800a840 <ProcessRadioTxDone+0x180>)
 800a796:	238e      	movs	r3, #142	; 0x8e
 800a798:	00db      	lsls	r3, r3, #3
 800a79a:	58d2      	ldr	r2, [r2, r3]
 800a79c:	2314      	movs	r3, #20
 800a79e:	33ff      	adds	r3, #255	; 0xff
 800a7a0:	5cc9      	ldrb	r1, [r1, r3]
 800a7a2:	238a      	movs	r3, #138	; 0x8a
 800a7a4:	005b      	lsls	r3, r3, #1
 800a7a6:	54d1      	strb	r1, [r2, r3]
    // Update last tx done time for the current channel
    txDone.Channel = MacCtx.NvmCtx->Channel;
 800a7a8:	4a25      	ldr	r2, [pc, #148]	; (800a840 <ProcessRadioTxDone+0x180>)
 800a7aa:	238e      	movs	r3, #142	; 0x8e
 800a7ac:	00db      	lsls	r3, r3, #3
 800a7ae:	58d2      	ldr	r2, [r2, r3]
 800a7b0:	2314      	movs	r3, #20
 800a7b2:	33ff      	adds	r3, #255	; 0xff
 800a7b4:	5cd2      	ldrb	r2, [r2, r3]
 800a7b6:	003b      	movs	r3, r7
 800a7b8:	701a      	strb	r2, [r3, #0]
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 800a7ba:	4a21      	ldr	r2, [pc, #132]	; (800a840 <ProcessRadioTxDone+0x180>)
 800a7bc:	238e      	movs	r3, #142	; 0x8e
 800a7be:	00db      	lsls	r3, r3, #3
 800a7c0:	58d2      	ldr	r2, [r2, r3]
 800a7c2:	2389      	movs	r3, #137	; 0x89
 800a7c4:	009b      	lsls	r3, r3, #2
 800a7c6:	5cd3      	ldrb	r3, [r2, r3]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d103      	bne.n	800a7d4 <ProcessRadioTxDone+0x114>
    {
        txDone.Joined  = false;
 800a7cc:	003b      	movs	r3, r7
 800a7ce:	2200      	movs	r2, #0
 800a7d0:	705a      	strb	r2, [r3, #1]
 800a7d2:	e002      	b.n	800a7da <ProcessRadioTxDone+0x11a>
    }
    else
    {
        txDone.Joined  = true;
 800a7d4:	003b      	movs	r3, r7
 800a7d6:	2201      	movs	r2, #1
 800a7d8:	705a      	strb	r2, [r3, #1]
    }
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 800a7da:	4b1f      	ldr	r3, [pc, #124]	; (800a858 <ProcessRadioTxDone+0x198>)
 800a7dc:	681a      	ldr	r2, [r3, #0]
 800a7de:	003b      	movs	r3, r7
 800a7e0:	605a      	str	r2, [r3, #4]
    RegionSetBandTxDone( MacCtx.NvmCtx->Region, &txDone );
 800a7e2:	4a17      	ldr	r2, [pc, #92]	; (800a840 <ProcessRadioTxDone+0x180>)
 800a7e4:	238e      	movs	r3, #142	; 0x8e
 800a7e6:	00db      	lsls	r3, r3, #3
 800a7e8:	58d3      	ldr	r3, [r2, r3]
 800a7ea:	781b      	ldrb	r3, [r3, #0]
 800a7ec:	003a      	movs	r2, r7
 800a7ee:	0011      	movs	r1, r2
 800a7f0:	0018      	movs	r0, r3
 800a7f2:	f008 fb68 	bl	8012ec6 <RegionSetBandTxDone>
    // Update Aggregated last tx done time
    MacCtx.AggregatedLastTxDoneTime = TxDoneParams.CurTime;
 800a7f6:	4b18      	ldr	r3, [pc, #96]	; (800a858 <ProcessRadioTxDone+0x198>)
 800a7f8:	6819      	ldr	r1, [r3, #0]
 800a7fa:	4a11      	ldr	r2, [pc, #68]	; (800a840 <ProcessRadioTxDone+0x180>)
 800a7fc:	23d0      	movs	r3, #208	; 0xd0
 800a7fe:	009b      	lsls	r3, r3, #2
 800a800:	50d1      	str	r1, [r2, r3]

    if( MacCtx.NvmCtx->NodeAckRequested == false )
 800a802:	4a0f      	ldr	r2, [pc, #60]	; (800a840 <ProcessRadioTxDone+0x180>)
 800a804:	238e      	movs	r3, #142	; 0x8e
 800a806:	00db      	lsls	r3, r3, #3
 800a808:	58d3      	ldr	r3, [r2, r3]
 800a80a:	4a11      	ldr	r2, [pc, #68]	; (800a850 <ProcessRadioTxDone+0x190>)
 800a80c:	5c9b      	ldrb	r3, [r3, r2]
 800a80e:	2201      	movs	r2, #1
 800a810:	4053      	eors	r3, r2
 800a812:	b2db      	uxtb	r3, r3
 800a814:	2b00      	cmp	r3, #0
 800a816:	d00f      	beq.n	800a838 <ProcessRadioTxDone+0x178>
    {
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800a818:	4b09      	ldr	r3, [pc, #36]	; (800a840 <ProcessRadioTxDone+0x180>)
 800a81a:	4a10      	ldr	r2, [pc, #64]	; (800a85c <ProcessRadioTxDone+0x19c>)
 800a81c:	2100      	movs	r1, #0
 800a81e:	5499      	strb	r1, [r3, r2]
        MacCtx.NvmCtx->ChannelsNbTransCounter++;
 800a820:	4a07      	ldr	r2, [pc, #28]	; (800a840 <ProcessRadioTxDone+0x180>)
 800a822:	238e      	movs	r3, #142	; 0x8e
 800a824:	00db      	lsls	r3, r3, #3
 800a826:	58d3      	ldr	r3, [r2, r3]
 800a828:	2288      	movs	r2, #136	; 0x88
 800a82a:	0052      	lsls	r2, r2, #1
 800a82c:	5c9a      	ldrb	r2, [r3, r2]
 800a82e:	3201      	adds	r2, #1
 800a830:	b2d1      	uxtb	r1, r2
 800a832:	2288      	movs	r2, #136	; 0x88
 800a834:	0052      	lsls	r2, r2, #1
 800a836:	5499      	strb	r1, [r3, r2]
    }
}
 800a838:	46c0      	nop			; (mov r8, r8)
 800a83a:	46bd      	mov	sp, r7
 800a83c:	b004      	add	sp, #16
 800a83e:	bd80      	pop	{r7, pc}
 800a840:	20000708 	.word	0x20000708
 800a844:	08021b54 	.word	0x08021b54
 800a848:	20000a9c 	.word	0x20000a9c
 800a84c:	20000ab4 	.word	0x20000ab4
 800a850:	00000219 	.word	0x00000219
 800a854:	20000afc 	.word	0x20000afc
 800a858:	20001568 	.word	0x20001568
 800a85c:	0000042d 	.word	0x0000042d

0800a860 <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
 800a860:	b580      	push	{r7, lr}
 800a862:	af00      	add	r7, sp, #0
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 800a864:	4a12      	ldr	r2, [pc, #72]	; (800a8b0 <PrepareRxDoneAbort+0x50>)
 800a866:	23d5      	movs	r3, #213	; 0xd5
 800a868:	009b      	lsls	r3, r3, #2
 800a86a:	58d3      	ldr	r3, [r2, r3]
 800a86c:	2280      	movs	r2, #128	; 0x80
 800a86e:	431a      	orrs	r2, r3
 800a870:	0011      	movs	r1, r2
 800a872:	4a0f      	ldr	r2, [pc, #60]	; (800a8b0 <PrepareRxDoneAbort+0x50>)
 800a874:	23d5      	movs	r3, #213	; 0xd5
 800a876:	009b      	lsls	r3, r3, #2
 800a878:	50d1      	str	r1, [r2, r3]

    if( MacCtx.NvmCtx->NodeAckRequested )
 800a87a:	4a0d      	ldr	r2, [pc, #52]	; (800a8b0 <PrepareRxDoneAbort+0x50>)
 800a87c:	238e      	movs	r3, #142	; 0x8e
 800a87e:	00db      	lsls	r3, r3, #3
 800a880:	58d3      	ldr	r3, [r2, r3]
 800a882:	4a0c      	ldr	r2, [pc, #48]	; (800a8b4 <PrepareRxDoneAbort+0x54>)
 800a884:	5c9b      	ldrb	r3, [r3, r2]
 800a886:	2b00      	cmp	r3, #0
 800a888:	d002      	beq.n	800a890 <PrepareRxDoneAbort+0x30>
    {
        OnAckTimeoutTimerEvent( NULL );
 800a88a:	2000      	movs	r0, #0
 800a88c:	f001 fa66 	bl	800bd5c <OnAckTimeoutTimerEvent>
    }

    MacCtx.MacFlags.Bits.McpsInd = 1;
 800a890:	4b07      	ldr	r3, [pc, #28]	; (800a8b0 <PrepareRxDoneAbort+0x50>)
 800a892:	4a09      	ldr	r2, [pc, #36]	; (800a8b8 <PrepareRxDoneAbort+0x58>)
 800a894:	5c99      	ldrb	r1, [r3, r2]
 800a896:	2002      	movs	r0, #2
 800a898:	4301      	orrs	r1, r0
 800a89a:	5499      	strb	r1, [r3, r2]
    MacCtx.MacFlags.Bits.MacDone = 1;
 800a89c:	4b04      	ldr	r3, [pc, #16]	; (800a8b0 <PrepareRxDoneAbort+0x50>)
 800a89e:	4a06      	ldr	r2, [pc, #24]	; (800a8b8 <PrepareRxDoneAbort+0x58>)
 800a8a0:	5c99      	ldrb	r1, [r3, r2]
 800a8a2:	2010      	movs	r0, #16
 800a8a4:	4301      	orrs	r1, r0
 800a8a6:	5499      	strb	r1, [r3, r2]
}
 800a8a8:	46c0      	nop			; (mov r8, r8)
 800a8aa:	46bd      	mov	sp, r7
 800a8ac:	bd80      	pop	{r7, pc}
 800a8ae:	46c0      	nop			; (mov r8, r8)
 800a8b0:	20000708 	.word	0x20000708
 800a8b4:	00000219 	.word	0x00000219
 800a8b8:	0000046d 	.word	0x0000046d

0800a8bc <ProcessRadioRxDone>:

static void ProcessRadioRxDone( void )
{
 800a8bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a8be:	b0a7      	sub	sp, #156	; 0x9c
 800a8c0:	af04      	add	r7, sp, #16
    LoRaMacHeader_t macHdr;
    ApplyCFListParams_t applyCFList;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800a8c2:	2380      	movs	r3, #128	; 0x80
 800a8c4:	18fb      	adds	r3, r7, r3
 800a8c6:	2210      	movs	r2, #16
 800a8c8:	701a      	strb	r2, [r3, #0]

    LoRaMacMessageData_t macMsgData;
    LoRaMacMessageJoinAccept_t macMsgJoinAccept;
    uint8_t *payload = RxDoneParams.Payload;
 800a8ca:	4bda      	ldr	r3, [pc, #872]	; (800ac34 <ProcessRadioRxDone+0x378>)
 800a8cc:	685b      	ldr	r3, [r3, #4]
 800a8ce:	67fb      	str	r3, [r7, #124]	; 0x7c
    uint16_t size = RxDoneParams.Size;
 800a8d0:	247a      	movs	r4, #122	; 0x7a
 800a8d2:	193b      	adds	r3, r7, r4
 800a8d4:	4ad7      	ldr	r2, [pc, #860]	; (800ac34 <ProcessRadioRxDone+0x378>)
 800a8d6:	8912      	ldrh	r2, [r2, #8]
 800a8d8:	801a      	strh	r2, [r3, #0]
    int16_t rssi = RxDoneParams.Rssi;
 800a8da:	2078      	movs	r0, #120	; 0x78
 800a8dc:	183b      	adds	r3, r7, r0
 800a8de:	4ad5      	ldr	r2, [pc, #852]	; (800ac34 <ProcessRadioRxDone+0x378>)
 800a8e0:	8952      	ldrh	r2, [r2, #10]
 800a8e2:	801a      	strh	r2, [r3, #0]
    int8_t snr = RxDoneParams.Snr;
 800a8e4:	2577      	movs	r5, #119	; 0x77
 800a8e6:	197b      	adds	r3, r7, r5
 800a8e8:	4ad2      	ldr	r2, [pc, #840]	; (800ac34 <ProcessRadioRxDone+0x378>)
 800a8ea:	7b12      	ldrb	r2, [r2, #12]
 800a8ec:	701a      	strb	r2, [r3, #0]

    uint8_t pktHeaderLen = 0;
 800a8ee:	2376      	movs	r3, #118	; 0x76
 800a8f0:	18fb      	adds	r3, r7, r3
 800a8f2:	2200      	movs	r2, #0
 800a8f4:	701a      	strb	r2, [r3, #0]

    uint32_t downLinkCounter = 0;
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	60bb      	str	r3, [r7, #8]
    uint32_t address = MacCtx.NvmCtx->DevAddr;
 800a8fa:	4acf      	ldr	r2, [pc, #828]	; (800ac38 <ProcessRadioRxDone+0x37c>)
 800a8fc:	238e      	movs	r3, #142	; 0x8e
 800a8fe:	00db      	lsls	r3, r3, #3
 800a900:	58d3      	ldr	r3, [r2, r3]
 800a902:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a904:	2284      	movs	r2, #132	; 0x84
 800a906:	18ba      	adds	r2, r7, r2
 800a908:	6013      	str	r3, [r2, #0]
    uint8_t multicast = 0;
 800a90a:	2383      	movs	r3, #131	; 0x83
 800a90c:	18fb      	adds	r3, r7, r3
 800a90e:	2200      	movs	r2, #0
 800a910:	701a      	strb	r2, [r3, #0]
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 800a912:	2382      	movs	r3, #130	; 0x82
 800a914:	18fb      	adds	r3, r7, r3
 800a916:	2204      	movs	r2, #4
 800a918:	701a      	strb	r2, [r3, #0]
    LoRaMacFCntHandlerStatus_t fCntHandlerStatus;
    FCntIdentifier_t fCntID;

    MacCtx.McpsConfirm.AckReceived = false;
 800a91a:	4ac7      	ldr	r2, [pc, #796]	; (800ac38 <ProcessRadioRxDone+0x37c>)
 800a91c:	2386      	movs	r3, #134	; 0x86
 800a91e:	00db      	lsls	r3, r3, #3
 800a920:	2100      	movs	r1, #0
 800a922:	54d1      	strb	r1, [r2, r3]
    MacCtx.McpsIndication.Rssi = rssi;
 800a924:	4bc4      	ldr	r3, [pc, #784]	; (800ac38 <ProcessRadioRxDone+0x37c>)
 800a926:	183a      	adds	r2, r7, r0
 800a928:	49c4      	ldr	r1, [pc, #784]	; (800ac3c <ProcessRadioRxDone+0x380>)
 800a92a:	8812      	ldrh	r2, [r2, #0]
 800a92c:	525a      	strh	r2, [r3, r1]
    MacCtx.McpsIndication.Snr = snr;
 800a92e:	4ac2      	ldr	r2, [pc, #776]	; (800ac38 <ProcessRadioRxDone+0x37c>)
 800a930:	1979      	adds	r1, r7, r5
 800a932:	2384      	movs	r3, #132	; 0x84
 800a934:	00db      	lsls	r3, r3, #3
 800a936:	7809      	ldrb	r1, [r1, #0]
 800a938:	54d1      	strb	r1, [r2, r3]
    MacCtx.McpsIndication.RxSlot = MacCtx.RxSlot;
 800a93a:	4bbf      	ldr	r3, [pc, #764]	; (800ac38 <ProcessRadioRxDone+0x37c>)
 800a93c:	4ac0      	ldr	r2, [pc, #768]	; (800ac40 <ProcessRadioRxDone+0x384>)
 800a93e:	5c99      	ldrb	r1, [r3, r2]
 800a940:	4bbd      	ldr	r3, [pc, #756]	; (800ac38 <ProcessRadioRxDone+0x37c>)
 800a942:	4ac0      	ldr	r2, [pc, #768]	; (800ac44 <ProcessRadioRxDone+0x388>)
 800a944:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.Port = 0;
 800a946:	4bbc      	ldr	r3, [pc, #752]	; (800ac38 <ProcessRadioRxDone+0x37c>)
 800a948:	4abf      	ldr	r2, [pc, #764]	; (800ac48 <ProcessRadioRxDone+0x38c>)
 800a94a:	2100      	movs	r1, #0
 800a94c:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.Multicast = 0;
 800a94e:	4bba      	ldr	r3, [pc, #744]	; (800ac38 <ProcessRadioRxDone+0x37c>)
 800a950:	4abe      	ldr	r2, [pc, #760]	; (800ac4c <ProcessRadioRxDone+0x390>)
 800a952:	2100      	movs	r1, #0
 800a954:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.FramePending = 0;
 800a956:	4bb8      	ldr	r3, [pc, #736]	; (800ac38 <ProcessRadioRxDone+0x37c>)
 800a958:	4abd      	ldr	r2, [pc, #756]	; (800ac50 <ProcessRadioRxDone+0x394>)
 800a95a:	2100      	movs	r1, #0
 800a95c:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.Buffer = NULL;
 800a95e:	4ab6      	ldr	r2, [pc, #728]	; (800ac38 <ProcessRadioRxDone+0x37c>)
 800a960:	2383      	movs	r3, #131	; 0x83
 800a962:	00db      	lsls	r3, r3, #3
 800a964:	2100      	movs	r1, #0
 800a966:	50d1      	str	r1, [r2, r3]
    MacCtx.McpsIndication.BufferSize = 0;
 800a968:	4bb3      	ldr	r3, [pc, #716]	; (800ac38 <ProcessRadioRxDone+0x37c>)
 800a96a:	4aba      	ldr	r2, [pc, #744]	; (800ac54 <ProcessRadioRxDone+0x398>)
 800a96c:	2100      	movs	r1, #0
 800a96e:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.RxData = false;
 800a970:	4bb1      	ldr	r3, [pc, #708]	; (800ac38 <ProcessRadioRxDone+0x37c>)
 800a972:	4ab9      	ldr	r2, [pc, #740]	; (800ac58 <ProcessRadioRxDone+0x39c>)
 800a974:	2100      	movs	r1, #0
 800a976:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.AckReceived = false;
 800a978:	4baf      	ldr	r3, [pc, #700]	; (800ac38 <ProcessRadioRxDone+0x37c>)
 800a97a:	4ab8      	ldr	r2, [pc, #736]	; (800ac5c <ProcessRadioRxDone+0x3a0>)
 800a97c:	2100      	movs	r1, #0
 800a97e:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.DownLinkCounter = 0;
 800a980:	4bad      	ldr	r3, [pc, #692]	; (800ac38 <ProcessRadioRxDone+0x37c>)
 800a982:	4ab7      	ldr	r2, [pc, #732]	; (800ac60 <ProcessRadioRxDone+0x3a4>)
 800a984:	2100      	movs	r1, #0
 800a986:	5099      	str	r1, [r3, r2]
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800a988:	4aab      	ldr	r2, [pc, #684]	; (800ac38 <ProcessRadioRxDone+0x37c>)
 800a98a:	2382      	movs	r3, #130	; 0x82
 800a98c:	00db      	lsls	r3, r3, #3
 800a98e:	2100      	movs	r1, #0
 800a990:	54d1      	strb	r1, [r2, r3]
    MacCtx.McpsIndication.DevAddress = 0;
 800a992:	4aa9      	ldr	r2, [pc, #676]	; (800ac38 <ProcessRadioRxDone+0x37c>)
 800a994:	2385      	movs	r3, #133	; 0x85
 800a996:	00db      	lsls	r3, r3, #3
 800a998:	2100      	movs	r1, #0
 800a99a:	50d1      	str	r1, [r2, r3]

    Radio.Sleep( );
 800a99c:	4bb1      	ldr	r3, [pc, #708]	; (800ac64 <ProcessRadioRxDone+0x3a8>)
 800a99e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9a0:	4798      	blx	r3
    TimerStop( &MacCtx.RxWindowTimer2 );
 800a9a2:	4bb1      	ldr	r3, [pc, #708]	; (800ac68 <ProcessRadioRxDone+0x3ac>)
 800a9a4:	0018      	movs	r0, r3
 800a9a6:	f00a ff93 	bl	80158d0 <TimerStop>

    // This function must be called even if we are not in class b mode yet.
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 800a9aa:	193b      	adds	r3, r7, r4
 800a9ac:	881a      	ldrh	r2, [r3, #0]
 800a9ae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a9b0:	0011      	movs	r1, r2
 800a9b2:	0018      	movs	r0, r3
 800a9b4:	f005 fab3 	bl	800ff1e <LoRaMacClassBRxBeacon>
 800a9b8:	1e03      	subs	r3, r0, #0
 800a9ba:	d00d      	beq.n	800a9d8 <ProcessRadioRxDone+0x11c>
    {
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 800a9bc:	4b9e      	ldr	r3, [pc, #632]	; (800ac38 <ProcessRadioRxDone+0x37c>)
 800a9be:	2278      	movs	r2, #120	; 0x78
 800a9c0:	18ba      	adds	r2, r7, r2
 800a9c2:	49aa      	ldr	r1, [pc, #680]	; (800ac6c <ProcessRadioRxDone+0x3b0>)
 800a9c4:	8812      	ldrh	r2, [r2, #0]
 800a9c6:	525a      	strh	r2, [r3, r1]
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 800a9c8:	4b9b      	ldr	r3, [pc, #620]	; (800ac38 <ProcessRadioRxDone+0x37c>)
 800a9ca:	2277      	movs	r2, #119	; 0x77
 800a9cc:	18ba      	adds	r2, r7, r2
 800a9ce:	49a8      	ldr	r1, [pc, #672]	; (800ac70 <ProcessRadioRxDone+0x3b4>)
 800a9d0:	7812      	ldrb	r2, [r2, #0]
 800a9d2:	545a      	strb	r2, [r3, r1]
        return;
 800a9d4:	f000 fc85 	bl	800b2e2 <ProcessRadioRxDone+0xa26>
    }
    // Check if we expect a ping or a multicast slot.
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 800a9d8:	4a97      	ldr	r2, [pc, #604]	; (800ac38 <ProcessRadioRxDone+0x37c>)
 800a9da:	238e      	movs	r3, #142	; 0x8e
 800a9dc:	00db      	lsls	r3, r3, #3
 800a9de:	58d3      	ldr	r3, [r2, r3]
 800a9e0:	22c8      	movs	r2, #200	; 0xc8
 800a9e2:	5c9b      	ldrb	r3, [r3, r2]
 800a9e4:	2b01      	cmp	r3, #1
 800a9e6:	d11c      	bne.n	800aa22 <ProcessRadioRxDone+0x166>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800a9e8:	f005 faab 	bl	800ff42 <LoRaMacClassBIsPingExpected>
 800a9ec:	1e03      	subs	r3, r0, #0
 800a9ee:	d00a      	beq.n	800aa06 <ProcessRadioRxDone+0x14a>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800a9f0:	2000      	movs	r0, #0
 800a9f2:	f005 fa62 	bl	800feba <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800a9f6:	2000      	movs	r0, #0
 800a9f8:	f005 fa81 	bl	800fefe <LoRaMacClassBPingSlotTimerEvent>
             MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_PING_SLOT;
 800a9fc:	4b8e      	ldr	r3, [pc, #568]	; (800ac38 <ProcessRadioRxDone+0x37c>)
 800a9fe:	4a91      	ldr	r2, [pc, #580]	; (800ac44 <ProcessRadioRxDone+0x388>)
 800aa00:	2103      	movs	r1, #3
 800aa02:	5499      	strb	r1, [r3, r2]
 800aa04:	e00d      	b.n	800aa22 <ProcessRadioRxDone+0x166>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800aa06:	f005 faa2 	bl	800ff4e <LoRaMacClassBIsMulticastExpected>
 800aa0a:	1e03      	subs	r3, r0, #0
 800aa0c:	d009      	beq.n	800aa22 <ProcessRadioRxDone+0x166>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800aa0e:	2000      	movs	r0, #0
 800aa10:	f005 fa5d 	bl	800fece <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800aa14:	2000      	movs	r0, #0
 800aa16:	f005 fa7a 	bl	800ff0e <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_MULTICAST_SLOT;
 800aa1a:	4b87      	ldr	r3, [pc, #540]	; (800ac38 <ProcessRadioRxDone+0x37c>)
 800aa1c:	4a89      	ldr	r2, [pc, #548]	; (800ac44 <ProcessRadioRxDone+0x388>)
 800aa1e:	2104      	movs	r1, #4
 800aa20:	5499      	strb	r1, [r3, r2]
        }
    }

    macHdr.Value = payload[pktHeaderLen++];
 800aa22:	2276      	movs	r2, #118	; 0x76
 800aa24:	18bb      	adds	r3, r7, r2
 800aa26:	781b      	ldrb	r3, [r3, #0]
 800aa28:	18ba      	adds	r2, r7, r2
 800aa2a:	1c59      	adds	r1, r3, #1
 800aa2c:	7011      	strb	r1, [r2, #0]
 800aa2e:	001a      	movs	r2, r3
 800aa30:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800aa32:	189b      	adds	r3, r3, r2
 800aa34:	781a      	ldrb	r2, [r3, #0]
 800aa36:	2174      	movs	r1, #116	; 0x74
 800aa38:	187b      	adds	r3, r7, r1
 800aa3a:	701a      	strb	r2, [r3, #0]

    switch( macHdr.Bits.MType )
 800aa3c:	187b      	adds	r3, r7, r1
 800aa3e:	781b      	ldrb	r3, [r3, #0]
 800aa40:	061b      	lsls	r3, r3, #24
 800aa42:	0f5b      	lsrs	r3, r3, #29
 800aa44:	b2db      	uxtb	r3, r3
 800aa46:	2b03      	cmp	r3, #3
 800aa48:	d100      	bne.n	800aa4c <ProcessRadioRxDone+0x190>
 800aa4a:	e11c      	b.n	800ac86 <ProcessRadioRxDone+0x3ca>
 800aa4c:	dc03      	bgt.n	800aa56 <ProcessRadioRxDone+0x19a>
 800aa4e:	2b01      	cmp	r3, #1
 800aa50:	d00a      	beq.n	800aa68 <ProcessRadioRxDone+0x1ac>
 800aa52:	f000 fc18 	bl	800b286 <ProcessRadioRxDone+0x9ca>
 800aa56:	2b05      	cmp	r3, #5
 800aa58:	d100      	bne.n	800aa5c <ProcessRadioRxDone+0x1a0>
 800aa5a:	e10f      	b.n	800ac7c <ProcessRadioRxDone+0x3c0>
 800aa5c:	2b07      	cmp	r3, #7
 800aa5e:	d101      	bne.n	800aa64 <ProcessRadioRxDone+0x1a8>
 800aa60:	f000 fbe6 	bl	800b230 <ProcessRadioRxDone+0x974>
 800aa64:	f000 fc0f 	bl	800b286 <ProcessRadioRxDone+0x9ca>
    {
        case FRAME_TYPE_JOIN_ACCEPT:
            macMsgJoinAccept.Buffer = payload;
 800aa68:	210c      	movs	r1, #12
 800aa6a:	187b      	adds	r3, r7, r1
 800aa6c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800aa6e:	601a      	str	r2, [r3, #0]
            macMsgJoinAccept.BufSize = size;
 800aa70:	237a      	movs	r3, #122	; 0x7a
 800aa72:	18fb      	adds	r3, r7, r3
 800aa74:	881b      	ldrh	r3, [r3, #0]
 800aa76:	b2da      	uxtb	r2, r3
 800aa78:	187b      	adds	r3, r7, r1
 800aa7a:	711a      	strb	r2, [r3, #4]

            // Abort in case if the device isn't joined yet and no rejoin request is ongoing.
            if( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE )
 800aa7c:	4a6e      	ldr	r2, [pc, #440]	; (800ac38 <ProcessRadioRxDone+0x37c>)
 800aa7e:	238e      	movs	r3, #142	; 0x8e
 800aa80:	00db      	lsls	r3, r3, #3
 800aa82:	58d2      	ldr	r2, [r2, r3]
 800aa84:	2389      	movs	r3, #137	; 0x89
 800aa86:	009b      	lsls	r3, r3, #2
 800aa88:	5cd3      	ldrb	r3, [r2, r3]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d007      	beq.n	800aa9e <ProcessRadioRxDone+0x1e2>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800aa8e:	4b6a      	ldr	r3, [pc, #424]	; (800ac38 <ProcessRadioRxDone+0x37c>)
 800aa90:	4a78      	ldr	r2, [pc, #480]	; (800ac74 <ProcessRadioRxDone+0x3b8>)
 800aa92:	2101      	movs	r1, #1
 800aa94:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
 800aa96:	f7ff fee3 	bl	800a860 <PrepareRxDoneAbort>
                return;
 800aa9a:	f000 fc22 	bl	800b2e2 <ProcessRadioRxDone+0xa26>
            }
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, MacCtx.JoinEui, &macMsgJoinAccept );
 800aa9e:	4b66      	ldr	r3, [pc, #408]	; (800ac38 <ProcessRadioRxDone+0x37c>)
 800aaa0:	685b      	ldr	r3, [r3, #4]
 800aaa2:	2580      	movs	r5, #128	; 0x80
 800aaa4:	197c      	adds	r4, r7, r5
 800aaa6:	220c      	movs	r2, #12
 800aaa8:	18ba      	adds	r2, r7, r2
 800aaaa:	0019      	movs	r1, r3
 800aaac:	20ff      	movs	r0, #255	; 0xff
 800aaae:	f006 ffe9 	bl	8011a84 <LoRaMacCryptoHandleJoinAccept>
 800aab2:	0003      	movs	r3, r0
 800aab4:	7023      	strb	r3, [r4, #0]

            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 800aab6:	197b      	adds	r3, r7, r5
 800aab8:	781b      	ldrb	r3, [r3, #0]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d000      	beq.n	800aac0 <ProcessRadioRxDone+0x204>
 800aabe:	e0ad      	b.n	800ac1c <ProcessRadioRxDone+0x360>
            {
                // Network ID
                MacCtx.NvmCtx->NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 800aac0:	240c      	movs	r4, #12
 800aac2:	193b      	adds	r3, r7, r4
 800aac4:	7a59      	ldrb	r1, [r3, #9]
 800aac6:	4a5c      	ldr	r2, [pc, #368]	; (800ac38 <ProcessRadioRxDone+0x37c>)
 800aac8:	238e      	movs	r3, #142	; 0x8e
 800aaca:	00db      	lsls	r3, r3, #3
 800aacc:	58d3      	ldr	r3, [r2, r3]
 800aace:	000a      	movs	r2, r1
 800aad0:	641a      	str	r2, [r3, #64]	; 0x40
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 800aad2:	4a59      	ldr	r2, [pc, #356]	; (800ac38 <ProcessRadioRxDone+0x37c>)
 800aad4:	238e      	movs	r3, #142	; 0x8e
 800aad6:	00db      	lsls	r3, r3, #3
 800aad8:	58d3      	ldr	r3, [r2, r3]
 800aada:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800aadc:	193b      	adds	r3, r7, r4
 800aade:	7a9b      	ldrb	r3, [r3, #10]
 800aae0:	021a      	lsls	r2, r3, #8
 800aae2:	4855      	ldr	r0, [pc, #340]	; (800ac38 <ProcessRadioRxDone+0x37c>)
 800aae4:	238e      	movs	r3, #142	; 0x8e
 800aae6:	00db      	lsls	r3, r3, #3
 800aae8:	58c3      	ldr	r3, [r0, r3]
 800aaea:	430a      	orrs	r2, r1
 800aaec:	641a      	str	r2, [r3, #64]	; 0x40
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800aaee:	4a52      	ldr	r2, [pc, #328]	; (800ac38 <ProcessRadioRxDone+0x37c>)
 800aaf0:	238e      	movs	r3, #142	; 0x8e
 800aaf2:	00db      	lsls	r3, r3, #3
 800aaf4:	58d3      	ldr	r3, [r2, r3]
 800aaf6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800aaf8:	193b      	adds	r3, r7, r4
 800aafa:	7adb      	ldrb	r3, [r3, #11]
 800aafc:	041a      	lsls	r2, r3, #16
 800aafe:	484e      	ldr	r0, [pc, #312]	; (800ac38 <ProcessRadioRxDone+0x37c>)
 800ab00:	238e      	movs	r3, #142	; 0x8e
 800ab02:	00db      	lsls	r3, r3, #3
 800ab04:	58c3      	ldr	r3, [r0, r3]
 800ab06:	430a      	orrs	r2, r1
 800ab08:	641a      	str	r2, [r3, #64]	; 0x40

                // Device Address
                MacCtx.NvmCtx->DevAddr = macMsgJoinAccept.DevAddr;
 800ab0a:	4a4b      	ldr	r2, [pc, #300]	; (800ac38 <ProcessRadioRxDone+0x37c>)
 800ab0c:	238e      	movs	r3, #142	; 0x8e
 800ab0e:	00db      	lsls	r3, r3, #3
 800ab10:	58d3      	ldr	r3, [r2, r3]
 800ab12:	193a      	adds	r2, r7, r4
 800ab14:	68d2      	ldr	r2, [r2, #12]
 800ab16:	645a      	str	r2, [r3, #68]	; 0x44

                // DLSettings
                MacCtx.NvmCtx->MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 800ab18:	193b      	adds	r3, r7, r4
 800ab1a:	7c1b      	ldrb	r3, [r3, #16]
 800ab1c:	065b      	lsls	r3, r3, #25
 800ab1e:	0f5b      	lsrs	r3, r3, #29
 800ab20:	b2d9      	uxtb	r1, r3
 800ab22:	4a45      	ldr	r2, [pc, #276]	; (800ac38 <ProcessRadioRxDone+0x37c>)
 800ab24:	238e      	movs	r3, #142	; 0x8e
 800ab26:	00db      	lsls	r3, r3, #3
 800ab28:	58d3      	ldr	r3, [r2, r3]
 800ab2a:	22f5      	movs	r2, #245	; 0xf5
 800ab2c:	5499      	strb	r1, [r3, r2]
                MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800ab2e:	193b      	adds	r3, r7, r4
 800ab30:	7c1b      	ldrb	r3, [r3, #16]
 800ab32:	071b      	lsls	r3, r3, #28
 800ab34:	0f1b      	lsrs	r3, r3, #28
 800ab36:	b2d9      	uxtb	r1, r3
 800ab38:	4a3f      	ldr	r2, [pc, #252]	; (800ac38 <ProcessRadioRxDone+0x37c>)
 800ab3a:	238e      	movs	r3, #142	; 0x8e
 800ab3c:	00db      	lsls	r3, r3, #3
 800ab3e:	58d3      	ldr	r3, [r2, r3]
 800ab40:	22fc      	movs	r2, #252	; 0xfc
 800ab42:	5499      	strb	r1, [r3, r2]

                // RxDelay
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 800ab44:	193b      	adds	r3, r7, r4
 800ab46:	7c59      	ldrb	r1, [r3, #17]
 800ab48:	4a3b      	ldr	r2, [pc, #236]	; (800ac38 <ProcessRadioRxDone+0x37c>)
 800ab4a:	238e      	movs	r3, #142	; 0x8e
 800ab4c:	00db      	lsls	r3, r3, #3
 800ab4e:	58d3      	ldr	r3, [r2, r3]
 800ab50:	22e4      	movs	r2, #228	; 0xe4
 800ab52:	5099      	str	r1, [r3, r2]
                if( MacCtx.NvmCtx->MacParams.ReceiveDelay1 == 0 )
 800ab54:	4a38      	ldr	r2, [pc, #224]	; (800ac38 <ProcessRadioRxDone+0x37c>)
 800ab56:	238e      	movs	r3, #142	; 0x8e
 800ab58:	00db      	lsls	r3, r3, #3
 800ab5a:	58d3      	ldr	r3, [r2, r3]
 800ab5c:	22e4      	movs	r2, #228	; 0xe4
 800ab5e:	589b      	ldr	r3, [r3, r2]
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d106      	bne.n	800ab72 <ProcessRadioRxDone+0x2b6>
                {
                    MacCtx.NvmCtx->MacParams.ReceiveDelay1 = 1;
 800ab64:	4a34      	ldr	r2, [pc, #208]	; (800ac38 <ProcessRadioRxDone+0x37c>)
 800ab66:	238e      	movs	r3, #142	; 0x8e
 800ab68:	00db      	lsls	r3, r3, #3
 800ab6a:	58d3      	ldr	r3, [r2, r3]
 800ab6c:	22e4      	movs	r2, #228	; 0xe4
 800ab6e:	2101      	movs	r1, #1
 800ab70:	5099      	str	r1, [r3, r2]
                }
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 *= 1000;
 800ab72:	4a31      	ldr	r2, [pc, #196]	; (800ac38 <ProcessRadioRxDone+0x37c>)
 800ab74:	238e      	movs	r3, #142	; 0x8e
 800ab76:	00db      	lsls	r3, r3, #3
 800ab78:	58d3      	ldr	r3, [r2, r3]
 800ab7a:	22e4      	movs	r2, #228	; 0xe4
 800ab7c:	589a      	ldr	r2, [r3, r2]
 800ab7e:	492e      	ldr	r1, [pc, #184]	; (800ac38 <ProcessRadioRxDone+0x37c>)
 800ab80:	238e      	movs	r3, #142	; 0x8e
 800ab82:	00db      	lsls	r3, r3, #3
 800ab84:	58c9      	ldr	r1, [r1, r3]
 800ab86:	0013      	movs	r3, r2
 800ab88:	015b      	lsls	r3, r3, #5
 800ab8a:	1a9b      	subs	r3, r3, r2
 800ab8c:	009b      	lsls	r3, r3, #2
 800ab8e:	189b      	adds	r3, r3, r2
 800ab90:	00db      	lsls	r3, r3, #3
 800ab92:	001a      	movs	r2, r3
 800ab94:	23e4      	movs	r3, #228	; 0xe4
 800ab96:	50ca      	str	r2, [r1, r3]
                MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + 1000;
 800ab98:	4a27      	ldr	r2, [pc, #156]	; (800ac38 <ProcessRadioRxDone+0x37c>)
 800ab9a:	238e      	movs	r3, #142	; 0x8e
 800ab9c:	00db      	lsls	r3, r3, #3
 800ab9e:	58d3      	ldr	r3, [r2, r3]
 800aba0:	22e4      	movs	r2, #228	; 0xe4
 800aba2:	589a      	ldr	r2, [r3, r2]
 800aba4:	4924      	ldr	r1, [pc, #144]	; (800ac38 <ProcessRadioRxDone+0x37c>)
 800aba6:	238e      	movs	r3, #142	; 0x8e
 800aba8:	00db      	lsls	r3, r3, #3
 800abaa:	58cb      	ldr	r3, [r1, r3]
 800abac:	21fa      	movs	r1, #250	; 0xfa
 800abae:	0089      	lsls	r1, r1, #2
 800abb0:	468c      	mov	ip, r1
 800abb2:	4462      	add	r2, ip
 800abb4:	21e8      	movs	r1, #232	; 0xe8
 800abb6:	505a      	str	r2, [r3, r1]

                MacCtx.NvmCtx->Version.Fields.Minor = 0;
 800abb8:	4a1f      	ldr	r2, [pc, #124]	; (800ac38 <ProcessRadioRxDone+0x37c>)
 800abba:	238e      	movs	r3, #142	; 0x8e
 800abbc:	00db      	lsls	r3, r3, #3
 800abbe:	58d3      	ldr	r3, [r2, r3]
 800abc0:	4a2d      	ldr	r2, [pc, #180]	; (800ac78 <ProcessRadioRxDone+0x3bc>)
 800abc2:	2100      	movs	r1, #0
 800abc4:	5499      	strb	r1, [r3, r2]

                // Apply CF list
                applyCFList.Payload = macMsgJoinAccept.CFList;
 800abc6:	216c      	movs	r1, #108	; 0x6c
 800abc8:	187b      	adds	r3, r7, r1
 800abca:	220c      	movs	r2, #12
 800abcc:	18ba      	adds	r2, r7, r2
 800abce:	3212      	adds	r2, #18
 800abd0:	601a      	str	r2, [r3, #0]
                // Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
                applyCFList.Size = size - 17;
 800abd2:	237a      	movs	r3, #122	; 0x7a
 800abd4:	18fb      	adds	r3, r7, r3
 800abd6:	881b      	ldrh	r3, [r3, #0]
 800abd8:	b2db      	uxtb	r3, r3
 800abda:	3b11      	subs	r3, #17
 800abdc:	b2da      	uxtb	r2, r3
 800abde:	187b      	adds	r3, r7, r1
 800abe0:	711a      	strb	r2, [r3, #4]

                RegionApplyCFList( MacCtx.NvmCtx->Region, &applyCFList );
 800abe2:	4a15      	ldr	r2, [pc, #84]	; (800ac38 <ProcessRadioRxDone+0x37c>)
 800abe4:	238e      	movs	r3, #142	; 0x8e
 800abe6:	00db      	lsls	r3, r3, #3
 800abe8:	58d3      	ldr	r3, [r2, r3]
 800abea:	781b      	ldrb	r3, [r3, #0]
 800abec:	187a      	adds	r2, r7, r1
 800abee:	0011      	movs	r1, r2
 800abf0:	0018      	movs	r0, r3
 800abf2:	f008 f9c4 	bl	8012f7e <RegionApplyCFList>

                MacCtx.NvmCtx->NetworkActivation = ACTIVATION_TYPE_OTAA;
 800abf6:	4a10      	ldr	r2, [pc, #64]	; (800ac38 <ProcessRadioRxDone+0x37c>)
 800abf8:	238e      	movs	r3, #142	; 0x8e
 800abfa:	00db      	lsls	r3, r3, #3
 800abfc:	58d2      	ldr	r2, [r2, r3]
 800abfe:	2389      	movs	r3, #137	; 0x89
 800ac00:	009b      	lsls	r3, r3, #2
 800ac02:	2102      	movs	r1, #2
 800ac04:	54d1      	strb	r1, [r2, r3]

                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800ac06:	2000      	movs	r0, #0
 800ac08:	f005 fe6c 	bl	80108e4 <LoRaMacConfirmQueueIsCmdActive>
 800ac0c:	1e03      	subs	r3, r0, #0
 800ac0e:	d100      	bne.n	800ac12 <ProcessRadioRxDone+0x356>
 800ac10:	e340      	b.n	800b294 <ProcessRadioRxDone+0x9d8>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 800ac12:	2100      	movs	r1, #0
 800ac14:	2000      	movs	r0, #0
 800ac16:	f005 fdd7 	bl	80107c8 <LoRaMacConfirmQueueSetStatus>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
                }
            }
            break;
 800ac1a:	e33b      	b.n	800b294 <ProcessRadioRxDone+0x9d8>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800ac1c:	2000      	movs	r0, #0
 800ac1e:	f005 fe61 	bl	80108e4 <LoRaMacConfirmQueueIsCmdActive>
 800ac22:	1e03      	subs	r3, r0, #0
 800ac24:	d100      	bne.n	800ac28 <ProcessRadioRxDone+0x36c>
 800ac26:	e335      	b.n	800b294 <ProcessRadioRxDone+0x9d8>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800ac28:	2100      	movs	r1, #0
 800ac2a:	2007      	movs	r0, #7
 800ac2c:	f005 fdcc 	bl	80107c8 <LoRaMacConfirmQueueSetStatus>
            break;
 800ac30:	e330      	b.n	800b294 <ProcessRadioRxDone+0x9d8>
 800ac32:	46c0      	nop			; (mov r8, r8)
 800ac34:	2000156c 	.word	0x2000156c
 800ac38:	20000708 	.word	0x20000708
 800ac3c:	0000041e 	.word	0x0000041e
 800ac40:	0000046c 	.word	0x0000046c
 800ac44:	00000421 	.word	0x00000421
 800ac48:	00000413 	.word	0x00000413
 800ac4c:	00000412 	.word	0x00000412
 800ac50:	00000415 	.word	0x00000415
 800ac54:	0000041c 	.word	0x0000041c
 800ac58:	0000041d 	.word	0x0000041d
 800ac5c:	00000422 	.word	0x00000422
 800ac60:	00000424 	.word	0x00000424
 800ac64:	08021b54 	.word	0x08021b54
 800ac68:	20000ab4 	.word	0x20000ab4
 800ac6c:	00000462 	.word	0x00000462
 800ac70:	00000464 	.word	0x00000464
 800ac74:	00000411 	.word	0x00000411
 800ac78:	00000222 	.word	0x00000222
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800ac7c:	4ac7      	ldr	r2, [pc, #796]	; (800af9c <ProcessRadioRxDone+0x6e0>)
 800ac7e:	2382      	movs	r3, #130	; 0x82
 800ac80:	00db      	lsls	r3, r3, #3
 800ac82:	2101      	movs	r1, #1
 800ac84:	54d1      	strb	r1, [r2, r3]
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN:
            // Check if the received payload size is valid
            getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800ac86:	4ac5      	ldr	r2, [pc, #788]	; (800af9c <ProcessRadioRxDone+0x6e0>)
 800ac88:	238e      	movs	r3, #142	; 0x8e
 800ac8a:	00db      	lsls	r3, r3, #3
 800ac8c:	58d2      	ldr	r2, [r2, r3]
 800ac8e:	2302      	movs	r3, #2
 800ac90:	33ff      	adds	r3, #255	; 0xff
 800ac92:	5cd2      	ldrb	r2, [r2, r3]
 800ac94:	2168      	movs	r1, #104	; 0x68
 800ac96:	187b      	adds	r3, r7, r1
 800ac98:	709a      	strb	r2, [r3, #2]
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 800ac9a:	4bc0      	ldr	r3, [pc, #768]	; (800af9c <ProcessRadioRxDone+0x6e0>)
 800ac9c:	4ac0      	ldr	r2, [pc, #768]	; (800afa0 <ProcessRadioRxDone+0x6e4>)
 800ac9e:	5c9b      	ldrb	r3, [r3, r2]
 800aca0:	b25a      	sxtb	r2, r3
 800aca2:	187b      	adds	r3, r7, r1
 800aca4:	705a      	strb	r2, [r3, #1]
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 800aca6:	187b      	adds	r3, r7, r1
 800aca8:	220c      	movs	r2, #12
 800acaa:	701a      	strb	r2, [r3, #0]

            // Get the maximum payload length
            if( MacCtx.NvmCtx->RepeaterSupport == true )
 800acac:	4abb      	ldr	r2, [pc, #748]	; (800af9c <ProcessRadioRxDone+0x6e0>)
 800acae:	238e      	movs	r3, #142	; 0x8e
 800acb0:	00db      	lsls	r3, r3, #3
 800acb2:	58d2      	ldr	r2, [r2, r3]
 800acb4:	2316      	movs	r3, #22
 800acb6:	33ff      	adds	r3, #255	; 0xff
 800acb8:	5cd3      	ldrb	r3, [r2, r3]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d003      	beq.n	800acc6 <ProcessRadioRxDone+0x40a>
            {
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800acbe:	2368      	movs	r3, #104	; 0x68
 800acc0:	18fb      	adds	r3, r7, r3
 800acc2:	220d      	movs	r2, #13
 800acc4:	701a      	strb	r2, [r3, #0]
            }
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800acc6:	4ab5      	ldr	r2, [pc, #724]	; (800af9c <ProcessRadioRxDone+0x6e0>)
 800acc8:	238e      	movs	r3, #142	; 0x8e
 800acca:	00db      	lsls	r3, r3, #3
 800accc:	58d3      	ldr	r3, [r2, r3]
 800acce:	781b      	ldrb	r3, [r3, #0]
 800acd0:	2268      	movs	r2, #104	; 0x68
 800acd2:	18ba      	adds	r2, r7, r2
 800acd4:	0011      	movs	r1, r2
 800acd6:	0018      	movs	r0, r3
 800acd8:	f008 f8cd 	bl	8012e76 <RegionGetPhyParam>
 800acdc:	0003      	movs	r3, r0
 800acde:	001a      	movs	r2, r3
 800ace0:	2364      	movs	r3, #100	; 0x64
 800ace2:	18fb      	adds	r3, r7, r3
 800ace4:	601a      	str	r2, [r3, #0]
            if( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORA_MAC_FRMPAYLOAD_OVERHEAD ) ) > ( int16_t )phyParam.Value )
 800ace6:	237a      	movs	r3, #122	; 0x7a
 800ace8:	18fb      	adds	r3, r7, r3
 800acea:	881b      	ldrh	r3, [r3, #0]
 800acec:	3b0d      	subs	r3, #13
 800acee:	b29b      	uxth	r3, r3
 800acf0:	b21b      	sxth	r3, r3
 800acf2:	1c1a      	adds	r2, r3, #0
 800acf4:	b213      	sxth	r3, r2
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	da01      	bge.n	800acfe <ProcessRadioRxDone+0x442>
 800acfa:	2300      	movs	r3, #0
 800acfc:	1c1a      	adds	r2, r3, #0
 800acfe:	b212      	sxth	r2, r2
 800ad00:	2364      	movs	r3, #100	; 0x64
 800ad02:	18fb      	adds	r3, r7, r3
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	b21b      	sxth	r3, r3
 800ad08:	429a      	cmp	r2, r3
 800ad0a:	dd06      	ble.n	800ad1a <ProcessRadioRxDone+0x45e>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ad0c:	4ba3      	ldr	r3, [pc, #652]	; (800af9c <ProcessRadioRxDone+0x6e0>)
 800ad0e:	4aa5      	ldr	r2, [pc, #660]	; (800afa4 <ProcessRadioRxDone+0x6e8>)
 800ad10:	2101      	movs	r1, #1
 800ad12:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
 800ad14:	f7ff fda4 	bl	800a860 <PrepareRxDoneAbort>
                return;
 800ad18:	e2e3      	b.n	800b2e2 <ProcessRadioRxDone+0xa26>
            }
            macMsgData.Buffer = payload;
 800ad1a:	2134      	movs	r1, #52	; 0x34
 800ad1c:	187b      	adds	r3, r7, r1
 800ad1e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800ad20:	601a      	str	r2, [r3, #0]
            macMsgData.BufSize = size;
 800ad22:	237a      	movs	r3, #122	; 0x7a
 800ad24:	18fb      	adds	r3, r7, r3
 800ad26:	881b      	ldrh	r3, [r3, #0]
 800ad28:	b2da      	uxtb	r2, r3
 800ad2a:	187b      	adds	r3, r7, r1
 800ad2c:	711a      	strb	r2, [r3, #4]
            macMsgData.FRMPayload = MacCtx.RxPayload;
 800ad2e:	187b      	adds	r3, r7, r1
 800ad30:	4a9d      	ldr	r2, [pc, #628]	; (800afa8 <ProcessRadioRxDone+0x6ec>)
 800ad32:	625a      	str	r2, [r3, #36]	; 0x24
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 800ad34:	0008      	movs	r0, r1
 800ad36:	187b      	adds	r3, r7, r1
 800ad38:	2228      	movs	r2, #40	; 0x28
 800ad3a:	21ff      	movs	r1, #255	; 0xff
 800ad3c:	5499      	strb	r1, [r3, r2]

            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 800ad3e:	183b      	adds	r3, r7, r0
 800ad40:	0018      	movs	r0, r3
 800ad42:	f007 fdb8 	bl	80128b6 <LoRaMacParserData>
 800ad46:	1e03      	subs	r3, r0, #0
 800ad48:	d006      	beq.n	800ad58 <ProcessRadioRxDone+0x49c>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ad4a:	4b94      	ldr	r3, [pc, #592]	; (800af9c <ProcessRadioRxDone+0x6e0>)
 800ad4c:	4a95      	ldr	r2, [pc, #596]	; (800afa4 <ProcessRadioRxDone+0x6e8>)
 800ad4e:	2101      	movs	r1, #1
 800ad50:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
 800ad52:	f7ff fd85 	bl	800a860 <PrepareRxDoneAbort>
                return;
 800ad56:	e2c4      	b.n	800b2e2 <ProcessRadioRxDone+0xa26>
            }

            // Store device address
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 800ad58:	2034      	movs	r0, #52	; 0x34
 800ad5a:	183b      	adds	r3, r7, r0
 800ad5c:	6899      	ldr	r1, [r3, #8]
 800ad5e:	4a8f      	ldr	r2, [pc, #572]	; (800af9c <ProcessRadioRxDone+0x6e0>)
 800ad60:	2385      	movs	r3, #133	; 0x85
 800ad62:	00db      	lsls	r3, r3, #3
 800ad64:	50d1      	str	r1, [r2, r3]

            FType_t fType;
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 800ad66:	1dba      	adds	r2, r7, #6
 800ad68:	183b      	adds	r3, r7, r0
 800ad6a:	0011      	movs	r1, r2
 800ad6c:	0018      	movs	r0, r3
 800ad6e:	f002 ffcd 	bl	800dd0c <DetermineFrameType>
 800ad72:	1e03      	subs	r3, r0, #0
 800ad74:	d006      	beq.n	800ad84 <ProcessRadioRxDone+0x4c8>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ad76:	4b89      	ldr	r3, [pc, #548]	; (800af9c <ProcessRadioRxDone+0x6e0>)
 800ad78:	4a8a      	ldr	r2, [pc, #552]	; (800afa4 <ProcessRadioRxDone+0x6e8>)
 800ad7a:	2101      	movs	r1, #1
 800ad7c:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
 800ad7e:	f7ff fd6f 	bl	800a860 <PrepareRxDoneAbort>
                return;
 800ad82:	e2ae      	b.n	800b2e2 <ProcessRadioRxDone+0xa26>
            }

            //Check if it is a multicast message
            multicast = 0;
 800ad84:	2383      	movs	r3, #131	; 0x83
 800ad86:	18fb      	adds	r3, r7, r3
 800ad88:	2200      	movs	r2, #0
 800ad8a:	701a      	strb	r2, [r3, #0]
            downLinkCounter = 0;
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	60bb      	str	r3, [r7, #8]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800ad90:	2381      	movs	r3, #129	; 0x81
 800ad92:	18fb      	adds	r3, r7, r3
 800ad94:	2200      	movs	r2, #0
 800ad96:	701a      	strb	r2, [r3, #0]
 800ad98:	e051      	b.n	800ae3e <ProcessRadioRxDone+0x582>
            {
                if( ( MacCtx.NvmCtx->MulticastChannelList[i].Address == macMsgData.FHDR.DevAddr ) &&
 800ad9a:	4a80      	ldr	r2, [pc, #512]	; (800af9c <ProcessRadioRxDone+0x6e0>)
 800ad9c:	238e      	movs	r3, #142	; 0x8e
 800ad9e:	00db      	lsls	r3, r3, #3
 800ada0:	58d2      	ldr	r2, [r2, r3]
 800ada2:	2381      	movs	r3, #129	; 0x81
 800ada4:	18fb      	adds	r3, r7, r3
 800ada6:	781b      	ldrb	r3, [r3, #0]
 800ada8:	015b      	lsls	r3, r3, #5
 800adaa:	18d3      	adds	r3, r2, r3
 800adac:	334c      	adds	r3, #76	; 0x4c
 800adae:	681a      	ldr	r2, [r3, #0]
 800adb0:	2334      	movs	r3, #52	; 0x34
 800adb2:	18fb      	adds	r3, r7, r3
 800adb4:	689b      	ldr	r3, [r3, #8]
 800adb6:	429a      	cmp	r2, r3
 800adb8:	d13b      	bne.n	800ae32 <ProcessRadioRxDone+0x576>
                    ( MacCtx.NvmCtx->MulticastChannelList[i].IsEnabled == true ) )
 800adba:	4a78      	ldr	r2, [pc, #480]	; (800af9c <ProcessRadioRxDone+0x6e0>)
 800adbc:	238e      	movs	r3, #142	; 0x8e
 800adbe:	00db      	lsls	r3, r3, #3
 800adc0:	58d2      	ldr	r2, [r2, r3]
 800adc2:	2381      	movs	r3, #129	; 0x81
 800adc4:	18fb      	adds	r3, r7, r3
 800adc6:	781b      	ldrb	r3, [r3, #0]
 800adc8:	2154      	movs	r1, #84	; 0x54
 800adca:	015b      	lsls	r3, r3, #5
 800adcc:	18d3      	adds	r3, r2, r3
 800adce:	185b      	adds	r3, r3, r1
 800add0:	781b      	ldrb	r3, [r3, #0]
                if( ( MacCtx.NvmCtx->MulticastChannelList[i].Address == macMsgData.FHDR.DevAddr ) &&
 800add2:	2b00      	cmp	r3, #0
 800add4:	d02d      	beq.n	800ae32 <ProcessRadioRxDone+0x576>
                {
                    multicast = 1;
 800add6:	2383      	movs	r3, #131	; 0x83
 800add8:	18fb      	adds	r3, r7, r3
 800adda:	2201      	movs	r2, #1
 800addc:	701a      	strb	r2, [r3, #0]
                    addrID = MacCtx.NvmCtx->MulticastChannelList[i].AddrID;
 800adde:	4a6f      	ldr	r2, [pc, #444]	; (800af9c <ProcessRadioRxDone+0x6e0>)
 800ade0:	238e      	movs	r3, #142	; 0x8e
 800ade2:	00db      	lsls	r3, r3, #3
 800ade4:	58d1      	ldr	r1, [r2, r3]
 800ade6:	2481      	movs	r4, #129	; 0x81
 800ade8:	193b      	adds	r3, r7, r4
 800adea:	781a      	ldrb	r2, [r3, #0]
 800adec:	2382      	movs	r3, #130	; 0x82
 800adee:	18fb      	adds	r3, r7, r3
 800adf0:	2048      	movs	r0, #72	; 0x48
 800adf2:	0152      	lsls	r2, r2, #5
 800adf4:	188a      	adds	r2, r1, r2
 800adf6:	1812      	adds	r2, r2, r0
 800adf8:	7812      	ldrb	r2, [r2, #0]
 800adfa:	701a      	strb	r2, [r3, #0]
                    downLinkCounter = *( MacCtx.NvmCtx->MulticastChannelList[i].DownLinkCounter );
 800adfc:	4a67      	ldr	r2, [pc, #412]	; (800af9c <ProcessRadioRxDone+0x6e0>)
 800adfe:	238e      	movs	r3, #142	; 0x8e
 800ae00:	00db      	lsls	r3, r3, #3
 800ae02:	58d2      	ldr	r2, [r2, r3]
 800ae04:	0021      	movs	r1, r4
 800ae06:	187b      	adds	r3, r7, r1
 800ae08:	781b      	ldrb	r3, [r3, #0]
 800ae0a:	015b      	lsls	r3, r3, #5
 800ae0c:	18d3      	adds	r3, r2, r3
 800ae0e:	3350      	adds	r3, #80	; 0x50
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	60bb      	str	r3, [r7, #8]
                    address = MacCtx.NvmCtx->MulticastChannelList[i].Address;
 800ae16:	4a61      	ldr	r2, [pc, #388]	; (800af9c <ProcessRadioRxDone+0x6e0>)
 800ae18:	238e      	movs	r3, #142	; 0x8e
 800ae1a:	00db      	lsls	r3, r3, #3
 800ae1c:	58d2      	ldr	r2, [r2, r3]
 800ae1e:	187b      	adds	r3, r7, r1
 800ae20:	781b      	ldrb	r3, [r3, #0]
 800ae22:	015b      	lsls	r3, r3, #5
 800ae24:	18d3      	adds	r3, r2, r3
 800ae26:	334c      	adds	r3, #76	; 0x4c
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	2284      	movs	r2, #132	; 0x84
 800ae2c:	18ba      	adds	r2, r7, r2
 800ae2e:	6013      	str	r3, [r2, #0]
                    break;
 800ae30:	e00a      	b.n	800ae48 <ProcessRadioRxDone+0x58c>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800ae32:	2181      	movs	r1, #129	; 0x81
 800ae34:	187b      	adds	r3, r7, r1
 800ae36:	781a      	ldrb	r2, [r3, #0]
 800ae38:	187b      	adds	r3, r7, r1
 800ae3a:	3201      	adds	r2, #1
 800ae3c:	701a      	strb	r2, [r3, #0]
 800ae3e:	2381      	movs	r3, #129	; 0x81
 800ae40:	18fb      	adds	r3, r7, r3
 800ae42:	781b      	ldrb	r3, [r3, #0]
 800ae44:	2b03      	cmp	r3, #3
 800ae46:	d9a8      	bls.n	800ad9a <ProcessRadioRxDone+0x4de>
                }
            }

            // Get maximum allowed counter difference
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 800ae48:	2168      	movs	r1, #104	; 0x68
 800ae4a:	187b      	adds	r3, r7, r1
 800ae4c:	2214      	movs	r2, #20
 800ae4e:	701a      	strb	r2, [r3, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800ae50:	4a52      	ldr	r2, [pc, #328]	; (800af9c <ProcessRadioRxDone+0x6e0>)
 800ae52:	238e      	movs	r3, #142	; 0x8e
 800ae54:	00db      	lsls	r3, r3, #3
 800ae56:	58d3      	ldr	r3, [r2, r3]
 800ae58:	781b      	ldrb	r3, [r3, #0]
 800ae5a:	187a      	adds	r2, r7, r1
 800ae5c:	0011      	movs	r1, r2
 800ae5e:	0018      	movs	r0, r3
 800ae60:	f008 f809 	bl	8012e76 <RegionGetPhyParam>
 800ae64:	0003      	movs	r3, r0
 800ae66:	001a      	movs	r2, r3
 800ae68:	2064      	movs	r0, #100	; 0x64
 800ae6a:	183b      	adds	r3, r7, r0
 800ae6c:	601a      	str	r2, [r3, #0]

            // Get downlink frame counter value
            fCntHandlerStatus = LoRaMacGetFCntDown( addrID, fType, &macMsgData, MacCtx.NvmCtx->Version, phyParam.Value, &fCntID, &downLinkCounter );
 800ae6e:	1dbb      	adds	r3, r7, #6
 800ae70:	781d      	ldrb	r5, [r3, #0]
 800ae72:	4a4a      	ldr	r2, [pc, #296]	; (800af9c <ProcessRadioRxDone+0x6e0>)
 800ae74:	238e      	movs	r3, #142	; 0x8e
 800ae76:	00db      	lsls	r3, r3, #3
 800ae78:	58d1      	ldr	r1, [r2, r3]
 800ae7a:	183b      	adds	r3, r7, r0
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	b29b      	uxth	r3, r3
 800ae80:	2275      	movs	r2, #117	; 0x75
 800ae82:	18bc      	adds	r4, r7, r2
 800ae84:	2288      	movs	r2, #136	; 0x88
 800ae86:	0092      	lsls	r2, r2, #2
 800ae88:	588e      	ldr	r6, [r1, r2]
 800ae8a:	2134      	movs	r1, #52	; 0x34
 800ae8c:	1879      	adds	r1, r7, r1
 800ae8e:	2082      	movs	r0, #130	; 0x82
 800ae90:	183a      	adds	r2, r7, r0
 800ae92:	7810      	ldrb	r0, [r2, #0]
 800ae94:	2208      	movs	r2, #8
 800ae96:	18ba      	adds	r2, r7, r2
 800ae98:	9202      	str	r2, [sp, #8]
 800ae9a:	1dfa      	adds	r2, r7, #7
 800ae9c:	9201      	str	r2, [sp, #4]
 800ae9e:	9300      	str	r3, [sp, #0]
 800aea0:	0033      	movs	r3, r6
 800aea2:	000a      	movs	r2, r1
 800aea4:	0029      	movs	r1, r5
 800aea6:	f007 fab5 	bl	8012414 <LoRaMacGetFCntDown>
 800aeaa:	0003      	movs	r3, r0
 800aeac:	7023      	strb	r3, [r4, #0]
            if( fCntHandlerStatus != LORAMAC_FCNT_HANDLER_SUCCESS )
 800aeae:	2275      	movs	r2, #117	; 0x75
 800aeb0:	18bb      	adds	r3, r7, r2
 800aeb2:	781b      	ldrb	r3, [r3, #0]
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d041      	beq.n	800af3c <ProcessRadioRxDone+0x680>
            {
                if( fCntHandlerStatus == LORAMAC_FCNT_HANDLER_CHECK_FAIL )
 800aeb8:	2375      	movs	r3, #117	; 0x75
 800aeba:	18fb      	adds	r3, r7, r3
 800aebc:	781b      	ldrb	r3, [r3, #0]
 800aebe:	2b01      	cmp	r3, #1
 800aec0:	d127      	bne.n	800af12 <ProcessRadioRxDone+0x656>
                {
                    // Catch the case of repeated downlink frame counter
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 800aec2:	4b36      	ldr	r3, [pc, #216]	; (800af9c <ProcessRadioRxDone+0x6e0>)
 800aec4:	4a37      	ldr	r2, [pc, #220]	; (800afa4 <ProcessRadioRxDone+0x6e8>)
 800aec6:	2108      	movs	r1, #8
 800aec8:	5499      	strb	r1, [r3, r2]
                    if( ( MacCtx.NvmCtx->Version.Fields.Minor == 0 ) && ( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN ) && ( MacCtx.NvmCtx->LastRxMic == macMsgData.MIC ) )
 800aeca:	4a34      	ldr	r2, [pc, #208]	; (800af9c <ProcessRadioRxDone+0x6e0>)
 800aecc:	238e      	movs	r3, #142	; 0x8e
 800aece:	00db      	lsls	r3, r3, #3
 800aed0:	58d3      	ldr	r3, [r2, r3]
 800aed2:	4a36      	ldr	r2, [pc, #216]	; (800afac <ProcessRadioRxDone+0x6f0>)
 800aed4:	5c9b      	ldrb	r3, [r3, r2]
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d129      	bne.n	800af2e <ProcessRadioRxDone+0x672>
 800aeda:	2374      	movs	r3, #116	; 0x74
 800aedc:	18fb      	adds	r3, r7, r3
 800aede:	781b      	ldrb	r3, [r3, #0]
 800aee0:	221f      	movs	r2, #31
 800aee2:	4393      	bics	r3, r2
 800aee4:	b2db      	uxtb	r3, r3
 800aee6:	2ba0      	cmp	r3, #160	; 0xa0
 800aee8:	d121      	bne.n	800af2e <ProcessRadioRxDone+0x672>
 800aeea:	4a2c      	ldr	r2, [pc, #176]	; (800af9c <ProcessRadioRxDone+0x6e0>)
 800aeec:	238e      	movs	r3, #142	; 0x8e
 800aeee:	00db      	lsls	r3, r3, #3
 800aef0:	58d2      	ldr	r2, [r2, r3]
 800aef2:	238a      	movs	r3, #138	; 0x8a
 800aef4:	009b      	lsls	r3, r3, #2
 800aef6:	58d2      	ldr	r2, [r2, r3]
 800aef8:	2334      	movs	r3, #52	; 0x34
 800aefa:	18fb      	adds	r3, r7, r3
 800aefc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aefe:	429a      	cmp	r2, r3
 800af00:	d115      	bne.n	800af2e <ProcessRadioRxDone+0x672>
                    {
                        MacCtx.NvmCtx->SrvAckRequested = true;
 800af02:	4a26      	ldr	r2, [pc, #152]	; (800af9c <ProcessRadioRxDone+0x6e0>)
 800af04:	238e      	movs	r3, #142	; 0x8e
 800af06:	00db      	lsls	r3, r3, #3
 800af08:	58d3      	ldr	r3, [r2, r3]
 800af0a:	4a29      	ldr	r2, [pc, #164]	; (800afb0 <ProcessRadioRxDone+0x6f4>)
 800af0c:	2101      	movs	r1, #1
 800af0e:	5499      	strb	r1, [r3, r2]
 800af10:	e00d      	b.n	800af2e <ProcessRadioRxDone+0x672>
                    }
                }
                else if( fCntHandlerStatus == LORAMAC_FCNT_HANDLER_MAX_GAP_FAIL )
 800af12:	2375      	movs	r3, #117	; 0x75
 800af14:	18fb      	adds	r3, r7, r3
 800af16:	781b      	ldrb	r3, [r3, #0]
 800af18:	2b02      	cmp	r3, #2
 800af1a:	d104      	bne.n	800af26 <ProcessRadioRxDone+0x66a>
                {
                    // Lost too many frames
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS;
 800af1c:	4b1f      	ldr	r3, [pc, #124]	; (800af9c <ProcessRadioRxDone+0x6e0>)
 800af1e:	4a21      	ldr	r2, [pc, #132]	; (800afa4 <ProcessRadioRxDone+0x6e8>)
 800af20:	210a      	movs	r1, #10
 800af22:	5499      	strb	r1, [r3, r2]
 800af24:	e003      	b.n	800af2e <ProcessRadioRxDone+0x672>
                }
                else
                {
                    // Other errors
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800af26:	4b1d      	ldr	r3, [pc, #116]	; (800af9c <ProcessRadioRxDone+0x6e0>)
 800af28:	4a1e      	ldr	r2, [pc, #120]	; (800afa4 <ProcessRadioRxDone+0x6e8>)
 800af2a:	2101      	movs	r1, #1
 800af2c:	5499      	strb	r1, [r3, r2]
                }
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800af2e:	68ba      	ldr	r2, [r7, #8]
 800af30:	4b1a      	ldr	r3, [pc, #104]	; (800af9c <ProcessRadioRxDone+0x6e0>)
 800af32:	4920      	ldr	r1, [pc, #128]	; (800afb4 <ProcessRadioRxDone+0x6f8>)
 800af34:	505a      	str	r2, [r3, r1]
                PrepareRxDoneAbort( );
 800af36:	f7ff fc93 	bl	800a860 <PrepareRxDoneAbort>
                return;
 800af3a:	e1d2      	b.n	800b2e2 <ProcessRadioRxDone+0xa26>
            }

            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 800af3c:	1dfb      	adds	r3, r7, #7
 800af3e:	781a      	ldrb	r2, [r3, #0]
 800af40:	68bd      	ldr	r5, [r7, #8]
 800af42:	2680      	movs	r6, #128	; 0x80
 800af44:	19bc      	adds	r4, r7, r6
 800af46:	2384      	movs	r3, #132	; 0x84
 800af48:	18fb      	adds	r3, r7, r3
 800af4a:	6819      	ldr	r1, [r3, #0]
 800af4c:	2382      	movs	r3, #130	; 0x82
 800af4e:	18fb      	adds	r3, r7, r3
 800af50:	7818      	ldrb	r0, [r3, #0]
 800af52:	2334      	movs	r3, #52	; 0x34
 800af54:	18fb      	adds	r3, r7, r3
 800af56:	9300      	str	r3, [sp, #0]
 800af58:	002b      	movs	r3, r5
 800af5a:	f007 f92f 	bl	80121bc <LoRaMacCryptoUnsecureMessage>
 800af5e:	0003      	movs	r3, r0
 800af60:	7023      	strb	r3, [r4, #0]
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800af62:	19bb      	adds	r3, r7, r6
 800af64:	781b      	ldrb	r3, [r3, #0]
 800af66:	2b00      	cmp	r3, #0
 800af68:	d028      	beq.n	800afbc <ProcessRadioRxDone+0x700>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 800af6a:	2380      	movs	r3, #128	; 0x80
 800af6c:	18fb      	adds	r3, r7, r3
 800af6e:	781b      	ldrb	r3, [r3, #0]
 800af70:	2b02      	cmp	r3, #2
 800af72:	d10c      	bne.n	800af8e <ProcessRadioRxDone+0x6d2>
                {
                    // We are not the destination of this frame.
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 800af74:	4b09      	ldr	r3, [pc, #36]	; (800af9c <ProcessRadioRxDone+0x6e0>)
 800af76:	4a0b      	ldr	r2, [pc, #44]	; (800afa4 <ProcessRadioRxDone+0x6e8>)
 800af78:	210b      	movs	r1, #11
 800af7a:	5499      	strb	r1, [r3, r2]

                    // Abort the reception, if we are not in RX_SLOT_WIN_CLASS_C
                    if( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_CLASS_C )
 800af7c:	4b07      	ldr	r3, [pc, #28]	; (800af9c <ProcessRadioRxDone+0x6e0>)
 800af7e:	4a0e      	ldr	r2, [pc, #56]	; (800afb8 <ProcessRadioRxDone+0x6fc>)
 800af80:	5c9b      	ldrb	r3, [r3, r2]
 800af82:	2b02      	cmp	r3, #2
 800af84:	d100      	bne.n	800af88 <ProcessRadioRxDone+0x6cc>
 800af86:	e1ab      	b.n	800b2e0 <ProcessRadioRxDone+0xa24>
                    {
                        PrepareRxDoneAbort( );
 800af88:	f7ff fc6a 	bl	800a860 <PrepareRxDoneAbort>
                {
                    // MIC calculation fail
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
                    PrepareRxDoneAbort( );
                }
                return;
 800af8c:	e1a8      	b.n	800b2e0 <ProcessRadioRxDone+0xa24>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 800af8e:	4b03      	ldr	r3, [pc, #12]	; (800af9c <ProcessRadioRxDone+0x6e0>)
 800af90:	4a04      	ldr	r2, [pc, #16]	; (800afa4 <ProcessRadioRxDone+0x6e8>)
 800af92:	210c      	movs	r1, #12
 800af94:	5499      	strb	r1, [r3, r2]
                    PrepareRxDoneAbort( );
 800af96:	f7ff fc63 	bl	800a860 <PrepareRxDoneAbort>
                return;
 800af9a:	e1a1      	b.n	800b2e0 <ProcessRadioRxDone+0xa24>
 800af9c:	20000708 	.word	0x20000708
 800afa0:	00000414 	.word	0x00000414
 800afa4:	00000411 	.word	0x00000411
 800afa8:	20000948 	.word	0x20000948
 800afac:	00000222 	.word	0x00000222
 800afb0:	0000021a 	.word	0x0000021a
 800afb4:	00000424 	.word	0x00000424
 800afb8:	00000421 	.word	0x00000421
            }

            // Frame is valid
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800afbc:	4bca      	ldr	r3, [pc, #808]	; (800b2e8 <ProcessRadioRxDone+0xa2c>)
 800afbe:	4acb      	ldr	r2, [pc, #812]	; (800b2ec <ProcessRadioRxDone+0xa30>)
 800afc0:	2100      	movs	r1, #0
 800afc2:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsIndication.Multicast = multicast;
 800afc4:	4bc8      	ldr	r3, [pc, #800]	; (800b2e8 <ProcessRadioRxDone+0xa2c>)
 800afc6:	2483      	movs	r4, #131	; 0x83
 800afc8:	193a      	adds	r2, r7, r4
 800afca:	49c9      	ldr	r1, [pc, #804]	; (800b2f0 <ProcessRadioRxDone+0xa34>)
 800afcc:	7812      	ldrb	r2, [r2, #0]
 800afce:	545a      	strb	r2, [r3, r1]
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 800afd0:	2034      	movs	r0, #52	; 0x34
 800afd2:	183b      	adds	r3, r7, r0
 800afd4:	7b1b      	ldrb	r3, [r3, #12]
 800afd6:	06db      	lsls	r3, r3, #27
 800afd8:	0fdb      	lsrs	r3, r3, #31
 800afda:	b2db      	uxtb	r3, r3
 800afdc:	0019      	movs	r1, r3
 800afde:	4bc2      	ldr	r3, [pc, #776]	; (800b2e8 <ProcessRadioRxDone+0xa2c>)
 800afe0:	4ac4      	ldr	r2, [pc, #784]	; (800b2f4 <ProcessRadioRxDone+0xa38>)
 800afe2:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsIndication.Buffer = NULL;
 800afe4:	4ac0      	ldr	r2, [pc, #768]	; (800b2e8 <ProcessRadioRxDone+0xa2c>)
 800afe6:	2383      	movs	r3, #131	; 0x83
 800afe8:	00db      	lsls	r3, r3, #3
 800afea:	2100      	movs	r1, #0
 800afec:	50d1      	str	r1, [r2, r3]
            MacCtx.McpsIndication.BufferSize = 0;
 800afee:	4bbe      	ldr	r3, [pc, #760]	; (800b2e8 <ProcessRadioRxDone+0xa2c>)
 800aff0:	4ac1      	ldr	r2, [pc, #772]	; (800b2f8 <ProcessRadioRxDone+0xa3c>)
 800aff2:	2100      	movs	r1, #0
 800aff4:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800aff6:	68ba      	ldr	r2, [r7, #8]
 800aff8:	4bbb      	ldr	r3, [pc, #748]	; (800b2e8 <ProcessRadioRxDone+0xa2c>)
 800affa:	49c0      	ldr	r1, [pc, #768]	; (800b2fc <ProcessRadioRxDone+0xa40>)
 800affc:	505a      	str	r2, [r3, r1]
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800affe:	183b      	adds	r3, r7, r0
 800b000:	7b1b      	ldrb	r3, [r3, #12]
 800b002:	069b      	lsls	r3, r3, #26
 800b004:	0fdb      	lsrs	r3, r3, #31
 800b006:	b2db      	uxtb	r3, r3
 800b008:	1e5a      	subs	r2, r3, #1
 800b00a:	4193      	sbcs	r3, r2
 800b00c:	b2d9      	uxtb	r1, r3
 800b00e:	4bb6      	ldr	r3, [pc, #728]	; (800b2e8 <ProcessRadioRxDone+0xa2c>)
 800b010:	4abb      	ldr	r2, [pc, #748]	; (800b300 <ProcessRadioRxDone+0xa44>)
 800b012:	5499      	strb	r1, [r3, r2]

            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800b014:	4bb4      	ldr	r3, [pc, #720]	; (800b2e8 <ProcessRadioRxDone+0xa2c>)
 800b016:	4abb      	ldr	r2, [pc, #748]	; (800b304 <ProcessRadioRxDone+0xa48>)
 800b018:	2100      	movs	r1, #0
 800b01a:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800b01c:	183b      	adds	r3, r7, r0
 800b01e:	7b1b      	ldrb	r3, [r3, #12]
 800b020:	069b      	lsls	r3, r3, #26
 800b022:	0fdb      	lsrs	r3, r3, #31
 800b024:	b2db      	uxtb	r3, r3
 800b026:	1e5a      	subs	r2, r3, #1
 800b028:	4193      	sbcs	r3, r2
 800b02a:	b2d9      	uxtb	r1, r3
 800b02c:	4aae      	ldr	r2, [pc, #696]	; (800b2e8 <ProcessRadioRxDone+0xa2c>)
 800b02e:	2386      	movs	r3, #134	; 0x86
 800b030:	00db      	lsls	r3, r3, #3
 800b032:	54d1      	strb	r1, [r2, r3]

            MacCtx.NvmCtx->AdrAckCounter = 0;
 800b034:	4aac      	ldr	r2, [pc, #688]	; (800b2e8 <ProcessRadioRxDone+0xa2c>)
 800b036:	238e      	movs	r3, #142	; 0x8e
 800b038:	00db      	lsls	r3, r3, #3
 800b03a:	58d3      	ldr	r3, [r2, r3]
 800b03c:	22cc      	movs	r2, #204	; 0xcc
 800b03e:	2100      	movs	r1, #0
 800b040:	5099      	str	r1, [r3, r2]

            // MCPS Indication and ack requested handling
            if( multicast == 1 )
 800b042:	193b      	adds	r3, r7, r4
 800b044:	781b      	ldrb	r3, [r3, #0]
 800b046:	2b01      	cmp	r3, #1
 800b048:	d105      	bne.n	800b056 <ProcessRadioRxDone+0x79a>
            {
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 800b04a:	4aa7      	ldr	r2, [pc, #668]	; (800b2e8 <ProcessRadioRxDone+0xa2c>)
 800b04c:	2382      	movs	r3, #130	; 0x82
 800b04e:	00db      	lsls	r3, r3, #3
 800b050:	2102      	movs	r1, #2
 800b052:	54d1      	strb	r1, [r2, r3]
 800b054:	e032      	b.n	800b0bc <ProcessRadioRxDone+0x800>
            }
            else
            {
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 800b056:	2374      	movs	r3, #116	; 0x74
 800b058:	18fb      	adds	r3, r7, r3
 800b05a:	781b      	ldrb	r3, [r3, #0]
 800b05c:	221f      	movs	r2, #31
 800b05e:	4393      	bics	r3, r2
 800b060:	b2db      	uxtb	r3, r3
 800b062:	2ba0      	cmp	r3, #160	; 0xa0
 800b064:	d11e      	bne.n	800b0a4 <ProcessRadioRxDone+0x7e8>
                {
                    MacCtx.NvmCtx->SrvAckRequested = true;
 800b066:	4aa0      	ldr	r2, [pc, #640]	; (800b2e8 <ProcessRadioRxDone+0xa2c>)
 800b068:	238e      	movs	r3, #142	; 0x8e
 800b06a:	00db      	lsls	r3, r3, #3
 800b06c:	58d3      	ldr	r3, [r2, r3]
 800b06e:	4aa6      	ldr	r2, [pc, #664]	; (800b308 <ProcessRadioRxDone+0xa4c>)
 800b070:	2101      	movs	r1, #1
 800b072:	5499      	strb	r1, [r3, r2]
                    if( MacCtx.NvmCtx->Version.Fields.Minor == 0 )
 800b074:	4a9c      	ldr	r2, [pc, #624]	; (800b2e8 <ProcessRadioRxDone+0xa2c>)
 800b076:	238e      	movs	r3, #142	; 0x8e
 800b078:	00db      	lsls	r3, r3, #3
 800b07a:	58d3      	ldr	r3, [r2, r3]
 800b07c:	4aa3      	ldr	r2, [pc, #652]	; (800b30c <ProcessRadioRxDone+0xa50>)
 800b07e:	5c9b      	ldrb	r3, [r3, r2]
 800b080:	2b00      	cmp	r3, #0
 800b082:	d109      	bne.n	800b098 <ProcessRadioRxDone+0x7dc>
                    {
                        MacCtx.NvmCtx->LastRxMic = macMsgData.MIC;
 800b084:	4a98      	ldr	r2, [pc, #608]	; (800b2e8 <ProcessRadioRxDone+0xa2c>)
 800b086:	238e      	movs	r3, #142	; 0x8e
 800b088:	00db      	lsls	r3, r3, #3
 800b08a:	58d2      	ldr	r2, [r2, r3]
 800b08c:	2334      	movs	r3, #52	; 0x34
 800b08e:	18fb      	adds	r3, r7, r3
 800b090:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800b092:	238a      	movs	r3, #138	; 0x8a
 800b094:	009b      	lsls	r3, r3, #2
 800b096:	50d1      	str	r1, [r2, r3]
                    }
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800b098:	4a93      	ldr	r2, [pc, #588]	; (800b2e8 <ProcessRadioRxDone+0xa2c>)
 800b09a:	2382      	movs	r3, #130	; 0x82
 800b09c:	00db      	lsls	r3, r3, #3
 800b09e:	2101      	movs	r1, #1
 800b0a0:	54d1      	strb	r1, [r2, r3]
 800b0a2:	e00b      	b.n	800b0bc <ProcessRadioRxDone+0x800>
                }
                else
                {
                    MacCtx.NvmCtx->SrvAckRequested = false;
 800b0a4:	4a90      	ldr	r2, [pc, #576]	; (800b2e8 <ProcessRadioRxDone+0xa2c>)
 800b0a6:	238e      	movs	r3, #142	; 0x8e
 800b0a8:	00db      	lsls	r3, r3, #3
 800b0aa:	58d3      	ldr	r3, [r2, r3]
 800b0ac:	4a96      	ldr	r2, [pc, #600]	; (800b308 <ProcessRadioRxDone+0xa4c>)
 800b0ae:	2100      	movs	r1, #0
 800b0b0:	5499      	strb	r1, [r3, r2]
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800b0b2:	4a8d      	ldr	r2, [pc, #564]	; (800b2e8 <ProcessRadioRxDone+0xa2c>)
 800b0b4:	2382      	movs	r3, #130	; 0x82
 800b0b6:	00db      	lsls	r3, r3, #3
 800b0b8:	2100      	movs	r1, #0
 800b0ba:	54d1      	strb	r1, [r2, r3]
                }
            }

            // Update downlink counter in mac context / multicast context.
            if( LORAMAC_FCNT_HANDLER_SUCCESS != LoRaMacSetFCntDown( fCntID, downLinkCounter ) )
 800b0bc:	1dfb      	adds	r3, r7, #7
 800b0be:	781b      	ldrb	r3, [r3, #0]
 800b0c0:	68ba      	ldr	r2, [r7, #8]
 800b0c2:	0011      	movs	r1, r2
 800b0c4:	0018      	movs	r0, r3
 800b0c6:	f007 fa53 	bl	8012570 <LoRaMacSetFCntDown>
 800b0ca:	1e03      	subs	r3, r0, #0
 800b0cc:	d007      	beq.n	800b0de <ProcessRadioRxDone+0x822>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800b0ce:	4b86      	ldr	r3, [pc, #536]	; (800b2e8 <ProcessRadioRxDone+0xa2c>)
 800b0d0:	4a86      	ldr	r2, [pc, #536]	; (800b2ec <ProcessRadioRxDone+0xa30>)
 800b0d2:	2101      	movs	r1, #1
 800b0d4:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
 800b0d6:	f7ff fbc3 	bl	800a860 <PrepareRxDoneAbort>
                return;
 800b0da:	46c0      	nop			; (mov r8, r8)
 800b0dc:	e101      	b.n	800b2e2 <ProcessRadioRxDone+0xa26>
            }

            RemoveMacCommands( MacCtx.McpsIndication.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 800b0de:	4b82      	ldr	r3, [pc, #520]	; (800b2e8 <ProcessRadioRxDone+0xa2c>)
 800b0e0:	4a8b      	ldr	r2, [pc, #556]	; (800b310 <ProcessRadioRxDone+0xa54>)
 800b0e2:	5c98      	ldrb	r0, [r3, r2]
 800b0e4:	4b80      	ldr	r3, [pc, #512]	; (800b2e8 <ProcessRadioRxDone+0xa2c>)
 800b0e6:	4a8b      	ldr	r2, [pc, #556]	; (800b314 <ProcessRadioRxDone+0xa58>)
 800b0e8:	5c9a      	ldrb	r2, [r3, r2]
 800b0ea:	2334      	movs	r3, #52	; 0x34
 800b0ec:	18fb      	adds	r3, r7, r3
 800b0ee:	7b1b      	ldrb	r3, [r3, #12]
 800b0f0:	1c19      	adds	r1, r3, #0
 800b0f2:	f002 f97b 	bl	800d3ec <RemoveMacCommands>

            switch( fType )
 800b0f6:	1dbb      	adds	r3, r7, #6
 800b0f8:	781b      	ldrb	r3, [r3, #0]
 800b0fa:	2b01      	cmp	r3, #1
 800b0fc:	d038      	beq.n	800b170 <ProcessRadioRxDone+0x8b4>
 800b0fe:	dc02      	bgt.n	800b106 <ProcessRadioRxDone+0x84a>
 800b100:	2b00      	cmp	r3, #0
 800b102:	d005      	beq.n	800b110 <ProcessRadioRxDone+0x854>
 800b104:	e086      	b.n	800b214 <ProcessRadioRxDone+0x958>
 800b106:	2b02      	cmp	r3, #2
 800b108:	d052      	beq.n	800b1b0 <ProcessRadioRxDone+0x8f4>
 800b10a:	2b03      	cmp	r3, #3
 800b10c:	d06a      	beq.n	800b1e4 <ProcessRadioRxDone+0x928>
 800b10e:	e081      	b.n	800b214 <ProcessRadioRxDone+0x958>
                    * |    > 0   |   X  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.McpsIndication.RxSlot );
 800b110:	2034      	movs	r0, #52	; 0x34
 800b112:	183b      	adds	r3, r7, r0
 800b114:	7b1b      	ldrb	r3, [r3, #12]
 800b116:	071b      	lsls	r3, r3, #28
 800b118:	0f1b      	lsrs	r3, r3, #28
 800b11a:	b2db      	uxtb	r3, r3
 800b11c:	001c      	movs	r4, r3
 800b11e:	4b72      	ldr	r3, [pc, #456]	; (800b2e8 <ProcessRadioRxDone+0xa2c>)
 800b120:	4a7b      	ldr	r2, [pc, #492]	; (800b310 <ProcessRadioRxDone+0xa54>)
 800b122:	5c9b      	ldrb	r3, [r3, r2]
 800b124:	2277      	movs	r2, #119	; 0x77
 800b126:	18ba      	adds	r2, r7, r2
 800b128:	2100      	movs	r1, #0
 800b12a:	5651      	ldrsb	r1, [r2, r1]
 800b12c:	0005      	movs	r5, r0
 800b12e:	183a      	adds	r2, r7, r0
 800b130:	3210      	adds	r2, #16
 800b132:	0010      	movs	r0, r2
 800b134:	9300      	str	r3, [sp, #0]
 800b136:	000b      	movs	r3, r1
 800b138:	0022      	movs	r2, r4
 800b13a:	2100      	movs	r1, #0
 800b13c:	f000 ffae 	bl	800c09c <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800b140:	0028      	movs	r0, r5
 800b142:	183b      	adds	r3, r7, r0
 800b144:	2220      	movs	r2, #32
 800b146:	5c99      	ldrb	r1, [r3, r2]
 800b148:	4b67      	ldr	r3, [pc, #412]	; (800b2e8 <ProcessRadioRxDone+0xa2c>)
 800b14a:	4a73      	ldr	r2, [pc, #460]	; (800b318 <ProcessRadioRxDone+0xa5c>)
 800b14c:	5499      	strb	r1, [r3, r2]
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800b14e:	183b      	adds	r3, r7, r0
 800b150:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800b152:	4a65      	ldr	r2, [pc, #404]	; (800b2e8 <ProcessRadioRxDone+0xa2c>)
 800b154:	2383      	movs	r3, #131	; 0x83
 800b156:	00db      	lsls	r3, r3, #3
 800b158:	50d1      	str	r1, [r2, r3]
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800b15a:	183b      	adds	r3, r7, r0
 800b15c:	2228      	movs	r2, #40	; 0x28
 800b15e:	5c99      	ldrb	r1, [r3, r2]
 800b160:	4b61      	ldr	r3, [pc, #388]	; (800b2e8 <ProcessRadioRxDone+0xa2c>)
 800b162:	4a65      	ldr	r2, [pc, #404]	; (800b2f8 <ProcessRadioRxDone+0xa3c>)
 800b164:	5499      	strb	r1, [r3, r2]
                    MacCtx.McpsIndication.RxData = true;
 800b166:	4b60      	ldr	r3, [pc, #384]	; (800b2e8 <ProcessRadioRxDone+0xa2c>)
 800b168:	4a6c      	ldr	r2, [pc, #432]	; (800b31c <ProcessRadioRxDone+0xa60>)
 800b16a:	2101      	movs	r1, #1
 800b16c:	5499      	strb	r1, [r3, r2]
                    break;
 800b16e:	e058      	b.n	800b222 <ProcessRadioRxDone+0x966>
                    * |    > 0   |   X  |   -   |       -      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.McpsIndication.RxSlot );
 800b170:	2034      	movs	r0, #52	; 0x34
 800b172:	183b      	adds	r3, r7, r0
 800b174:	7b1b      	ldrb	r3, [r3, #12]
 800b176:	071b      	lsls	r3, r3, #28
 800b178:	0f1b      	lsrs	r3, r3, #28
 800b17a:	b2db      	uxtb	r3, r3
 800b17c:	001c      	movs	r4, r3
 800b17e:	4b5a      	ldr	r3, [pc, #360]	; (800b2e8 <ProcessRadioRxDone+0xa2c>)
 800b180:	4a63      	ldr	r2, [pc, #396]	; (800b310 <ProcessRadioRxDone+0xa54>)
 800b182:	5c9b      	ldrb	r3, [r3, r2]
 800b184:	2277      	movs	r2, #119	; 0x77
 800b186:	18ba      	adds	r2, r7, r2
 800b188:	2100      	movs	r1, #0
 800b18a:	5651      	ldrsb	r1, [r2, r1]
 800b18c:	0005      	movs	r5, r0
 800b18e:	183a      	adds	r2, r7, r0
 800b190:	3210      	adds	r2, #16
 800b192:	0010      	movs	r0, r2
 800b194:	9300      	str	r3, [sp, #0]
 800b196:	000b      	movs	r3, r1
 800b198:	0022      	movs	r2, r4
 800b19a:	2100      	movs	r1, #0
 800b19c:	f000 ff7e 	bl	800c09c <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800b1a0:	0028      	movs	r0, r5
 800b1a2:	183b      	adds	r3, r7, r0
 800b1a4:	2220      	movs	r2, #32
 800b1a6:	5c99      	ldrb	r1, [r3, r2]
 800b1a8:	4b4f      	ldr	r3, [pc, #316]	; (800b2e8 <ProcessRadioRxDone+0xa2c>)
 800b1aa:	4a5b      	ldr	r2, [pc, #364]	; (800b318 <ProcessRadioRxDone+0xa5c>)
 800b1ac:	5499      	strb	r1, [r3, r2]
                    break;
 800b1ae:	e038      	b.n	800b222 <ProcessRadioRxDone+0x966>
                    * |    = 0   |   -  |  = 0  | MAC commands |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FRMPayload
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.McpsIndication.RxSlot );
 800b1b0:	2434      	movs	r4, #52	; 0x34
 800b1b2:	193b      	adds	r3, r7, r4
 800b1b4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800b1b6:	193b      	adds	r3, r7, r4
 800b1b8:	2228      	movs	r2, #40	; 0x28
 800b1ba:	5c99      	ldrb	r1, [r3, r2]
 800b1bc:	4b4a      	ldr	r3, [pc, #296]	; (800b2e8 <ProcessRadioRxDone+0xa2c>)
 800b1be:	4a54      	ldr	r2, [pc, #336]	; (800b310 <ProcessRadioRxDone+0xa54>)
 800b1c0:	5c9b      	ldrb	r3, [r3, r2]
 800b1c2:	2277      	movs	r2, #119	; 0x77
 800b1c4:	18ba      	adds	r2, r7, r2
 800b1c6:	7812      	ldrb	r2, [r2, #0]
 800b1c8:	b252      	sxtb	r2, r2
 800b1ca:	9300      	str	r3, [sp, #0]
 800b1cc:	0013      	movs	r3, r2
 800b1ce:	000a      	movs	r2, r1
 800b1d0:	2100      	movs	r1, #0
 800b1d2:	f000 ff63 	bl	800c09c <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800b1d6:	193b      	adds	r3, r7, r4
 800b1d8:	2220      	movs	r2, #32
 800b1da:	5c99      	ldrb	r1, [r3, r2]
 800b1dc:	4b42      	ldr	r3, [pc, #264]	; (800b2e8 <ProcessRadioRxDone+0xa2c>)
 800b1de:	4a4e      	ldr	r2, [pc, #312]	; (800b318 <ProcessRadioRxDone+0xa5c>)
 800b1e0:	5499      	strb	r1, [r3, r2]
                    break;
 800b1e2:	e01e      	b.n	800b222 <ProcessRadioRxDone+0x966>
                    * |    = 0   |   -  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // No MAC commands just application payload
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800b1e4:	2034      	movs	r0, #52	; 0x34
 800b1e6:	183b      	adds	r3, r7, r0
 800b1e8:	2220      	movs	r2, #32
 800b1ea:	5c99      	ldrb	r1, [r3, r2]
 800b1ec:	4b3e      	ldr	r3, [pc, #248]	; (800b2e8 <ProcessRadioRxDone+0xa2c>)
 800b1ee:	4a4a      	ldr	r2, [pc, #296]	; (800b318 <ProcessRadioRxDone+0xa5c>)
 800b1f0:	5499      	strb	r1, [r3, r2]
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800b1f2:	183b      	adds	r3, r7, r0
 800b1f4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800b1f6:	4a3c      	ldr	r2, [pc, #240]	; (800b2e8 <ProcessRadioRxDone+0xa2c>)
 800b1f8:	2383      	movs	r3, #131	; 0x83
 800b1fa:	00db      	lsls	r3, r3, #3
 800b1fc:	50d1      	str	r1, [r2, r3]
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800b1fe:	183b      	adds	r3, r7, r0
 800b200:	2228      	movs	r2, #40	; 0x28
 800b202:	5c99      	ldrb	r1, [r3, r2]
 800b204:	4b38      	ldr	r3, [pc, #224]	; (800b2e8 <ProcessRadioRxDone+0xa2c>)
 800b206:	4a3c      	ldr	r2, [pc, #240]	; (800b2f8 <ProcessRadioRxDone+0xa3c>)
 800b208:	5499      	strb	r1, [r3, r2]
                    MacCtx.McpsIndication.RxData = true;
 800b20a:	4b37      	ldr	r3, [pc, #220]	; (800b2e8 <ProcessRadioRxDone+0xa2c>)
 800b20c:	4a43      	ldr	r2, [pc, #268]	; (800b31c <ProcessRadioRxDone+0xa60>)
 800b20e:	2101      	movs	r1, #1
 800b210:	5499      	strb	r1, [r3, r2]
                    break;
 800b212:	e006      	b.n	800b222 <ProcessRadioRxDone+0x966>
                }
                default:
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800b214:	4b34      	ldr	r3, [pc, #208]	; (800b2e8 <ProcessRadioRxDone+0xa2c>)
 800b216:	4a35      	ldr	r2, [pc, #212]	; (800b2ec <ProcessRadioRxDone+0xa30>)
 800b218:	2101      	movs	r1, #1
 800b21a:	5499      	strb	r1, [r3, r2]
                    PrepareRxDoneAbort( );
 800b21c:	f7ff fb20 	bl	800a860 <PrepareRxDoneAbort>
                    break;
 800b220:	46c0      	nop			; (mov r8, r8)
            }

            // Provide always an indication, skip the callback to the user application,
            // in case of a confirmed downlink retransmission.
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800b222:	4b31      	ldr	r3, [pc, #196]	; (800b2e8 <ProcessRadioRxDone+0xa2c>)
 800b224:	4a3e      	ldr	r2, [pc, #248]	; (800b320 <ProcessRadioRxDone+0xa64>)
 800b226:	5c99      	ldrb	r1, [r3, r2]
 800b228:	2002      	movs	r0, #2
 800b22a:	4301      	orrs	r1, r0
 800b22c:	5499      	strb	r1, [r3, r2]

            break;
 800b22e:	e032      	b.n	800b296 <ProcessRadioRxDone+0x9da>
        case FRAME_TYPE_PROPRIETARY:
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size );
 800b230:	2476      	movs	r4, #118	; 0x76
 800b232:	193b      	adds	r3, r7, r4
 800b234:	781b      	ldrb	r3, [r3, #0]
 800b236:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800b238:	18d1      	adds	r1, r2, r3
 800b23a:	257a      	movs	r5, #122	; 0x7a
 800b23c:	197b      	adds	r3, r7, r5
 800b23e:	881a      	ldrh	r2, [r3, #0]
 800b240:	4b38      	ldr	r3, [pc, #224]	; (800b324 <ProcessRadioRxDone+0xa68>)
 800b242:	0018      	movs	r0, r3
 800b244:	f00a fbd4 	bl	80159f0 <memcpy1>

            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 800b248:	4a27      	ldr	r2, [pc, #156]	; (800b2e8 <ProcessRadioRxDone+0xa2c>)
 800b24a:	2382      	movs	r3, #130	; 0x82
 800b24c:	00db      	lsls	r3, r3, #3
 800b24e:	2103      	movs	r1, #3
 800b250:	54d1      	strb	r1, [r2, r3]
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800b252:	4b25      	ldr	r3, [pc, #148]	; (800b2e8 <ProcessRadioRxDone+0xa2c>)
 800b254:	4a25      	ldr	r2, [pc, #148]	; (800b2ec <ProcessRadioRxDone+0xa30>)
 800b256:	2100      	movs	r1, #0
 800b258:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 800b25a:	4a23      	ldr	r2, [pc, #140]	; (800b2e8 <ProcessRadioRxDone+0xa2c>)
 800b25c:	2383      	movs	r3, #131	; 0x83
 800b25e:	00db      	lsls	r3, r3, #3
 800b260:	4930      	ldr	r1, [pc, #192]	; (800b324 <ProcessRadioRxDone+0xa68>)
 800b262:	50d1      	str	r1, [r2, r3]
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 800b264:	197b      	adds	r3, r7, r5
 800b266:	881b      	ldrh	r3, [r3, #0]
 800b268:	b2da      	uxtb	r2, r3
 800b26a:	193b      	adds	r3, r7, r4
 800b26c:	781b      	ldrb	r3, [r3, #0]
 800b26e:	1ad3      	subs	r3, r2, r3
 800b270:	b2d9      	uxtb	r1, r3
 800b272:	4b1d      	ldr	r3, [pc, #116]	; (800b2e8 <ProcessRadioRxDone+0xa2c>)
 800b274:	4a20      	ldr	r2, [pc, #128]	; (800b2f8 <ProcessRadioRxDone+0xa3c>)
 800b276:	5499      	strb	r1, [r3, r2]

            MacCtx.MacFlags.Bits.McpsInd = 1;
 800b278:	4b1b      	ldr	r3, [pc, #108]	; (800b2e8 <ProcessRadioRxDone+0xa2c>)
 800b27a:	4a29      	ldr	r2, [pc, #164]	; (800b320 <ProcessRadioRxDone+0xa64>)
 800b27c:	5c99      	ldrb	r1, [r3, r2]
 800b27e:	2002      	movs	r0, #2
 800b280:	4301      	orrs	r1, r0
 800b282:	5499      	strb	r1, [r3, r2]
            break;
 800b284:	e007      	b.n	800b296 <ProcessRadioRxDone+0x9da>
        default:
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800b286:	4b18      	ldr	r3, [pc, #96]	; (800b2e8 <ProcessRadioRxDone+0xa2c>)
 800b288:	4a18      	ldr	r2, [pc, #96]	; (800b2ec <ProcessRadioRxDone+0xa30>)
 800b28a:	2101      	movs	r1, #1
 800b28c:	5499      	strb	r1, [r3, r2]
            PrepareRxDoneAbort( );
 800b28e:	f7ff fae7 	bl	800a860 <PrepareRxDoneAbort>
            break;
 800b292:	e000      	b.n	800b296 <ProcessRadioRxDone+0x9da>
            break;
 800b294:	46c0      	nop			; (mov r8, r8)
    }

    // Verify if we need to disable the AckTimeoutTimer
    CheckToDisableAckTimeout( MacCtx.NvmCtx->NodeAckRequested, MacCtx.NvmCtx->DeviceClass, MacCtx.McpsConfirm.AckReceived );
 800b296:	4a14      	ldr	r2, [pc, #80]	; (800b2e8 <ProcessRadioRxDone+0xa2c>)
 800b298:	238e      	movs	r3, #142	; 0x8e
 800b29a:	00db      	lsls	r3, r3, #3
 800b29c:	58d3      	ldr	r3, [r2, r3]
 800b29e:	4a22      	ldr	r2, [pc, #136]	; (800b328 <ProcessRadioRxDone+0xa6c>)
 800b2a0:	5c98      	ldrb	r0, [r3, r2]
 800b2a2:	4a11      	ldr	r2, [pc, #68]	; (800b2e8 <ProcessRadioRxDone+0xa2c>)
 800b2a4:	238e      	movs	r3, #142	; 0x8e
 800b2a6:	00db      	lsls	r3, r3, #3
 800b2a8:	58d3      	ldr	r3, [r2, r3]
 800b2aa:	22c8      	movs	r2, #200	; 0xc8
 800b2ac:	5c99      	ldrb	r1, [r3, r2]
 800b2ae:	4a0e      	ldr	r2, [pc, #56]	; (800b2e8 <ProcessRadioRxDone+0xa2c>)
 800b2b0:	2386      	movs	r3, #134	; 0x86
 800b2b2:	00db      	lsls	r3, r3, #3
 800b2b4:	5cd3      	ldrb	r3, [r2, r3]
 800b2b6:	001a      	movs	r2, r3
 800b2b8:	f000 fd26 	bl	800bd08 <CheckToDisableAckTimeout>

    if( TimerIsStarted( &MacCtx.AckTimeoutTimer ) == false )
 800b2bc:	4b1b      	ldr	r3, [pc, #108]	; (800b32c <ProcessRadioRxDone+0xa70>)
 800b2be:	0018      	movs	r0, r3
 800b2c0:	f00a fb36 	bl	8015930 <TimerIsStarted>
 800b2c4:	0003      	movs	r3, r0
 800b2c6:	001a      	movs	r2, r3
 800b2c8:	2301      	movs	r3, #1
 800b2ca:	4053      	eors	r3, r2
 800b2cc:	b2db      	uxtb	r3, r3
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d007      	beq.n	800b2e2 <ProcessRadioRxDone+0xa26>
    {  // Procedure is completed when the AckTimeoutTimer is not running anymore
        MacCtx.MacFlags.Bits.MacDone = 1;
 800b2d2:	4b05      	ldr	r3, [pc, #20]	; (800b2e8 <ProcessRadioRxDone+0xa2c>)
 800b2d4:	4a12      	ldr	r2, [pc, #72]	; (800b320 <ProcessRadioRxDone+0xa64>)
 800b2d6:	5c99      	ldrb	r1, [r3, r2]
 800b2d8:	2010      	movs	r0, #16
 800b2da:	4301      	orrs	r1, r0
 800b2dc:	5499      	strb	r1, [r3, r2]
 800b2de:	e000      	b.n	800b2e2 <ProcessRadioRxDone+0xa26>
                return;
 800b2e0:	46c0      	nop			; (mov r8, r8)
    }
}
 800b2e2:	46bd      	mov	sp, r7
 800b2e4:	b023      	add	sp, #140	; 0x8c
 800b2e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b2e8:	20000708 	.word	0x20000708
 800b2ec:	00000411 	.word	0x00000411
 800b2f0:	00000412 	.word	0x00000412
 800b2f4:	00000415 	.word	0x00000415
 800b2f8:	0000041c 	.word	0x0000041c
 800b2fc:	00000424 	.word	0x00000424
 800b300:	00000422 	.word	0x00000422
 800b304:	0000042d 	.word	0x0000042d
 800b308:	0000021a 	.word	0x0000021a
 800b30c:	00000222 	.word	0x00000222
 800b310:	00000421 	.word	0x00000421
 800b314:	0000042c 	.word	0x0000042c
 800b318:	00000413 	.word	0x00000413
 800b31c:	0000041d 	.word	0x0000041d
 800b320:	0000046d 	.word	0x0000046d
 800b324:	20000948 	.word	0x20000948
 800b328:	00000219 	.word	0x00000219
 800b32c:	20000afc 	.word	0x20000afc

0800b330 <ProcessRadioTxTimeout>:

static void ProcessRadioTxTimeout( void )
{
 800b330:	b580      	push	{r7, lr}
 800b332:	af00      	add	r7, sp, #0
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 800b334:	4a0e      	ldr	r2, [pc, #56]	; (800b370 <ProcessRadioTxTimeout+0x40>)
 800b336:	238e      	movs	r3, #142	; 0x8e
 800b338:	00db      	lsls	r3, r3, #3
 800b33a:	58d3      	ldr	r3, [r2, r3]
 800b33c:	22c8      	movs	r2, #200	; 0xc8
 800b33e:	5c9b      	ldrb	r3, [r3, r2]
 800b340:	2b02      	cmp	r3, #2
 800b342:	d003      	beq.n	800b34c <ProcessRadioTxTimeout+0x1c>
    {
        Radio.Sleep( );
 800b344:	4b0b      	ldr	r3, [pc, #44]	; (800b374 <ProcessRadioTxTimeout+0x44>)
 800b346:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b348:	4798      	blx	r3
 800b34a:	e001      	b.n	800b350 <ProcessRadioTxTimeout+0x20>
    }
    else
    {
        OpenContinuousRx2Window( );
 800b34c:	f002 f95e 	bl	800d60c <OpenContinuousRx2Window>
    }

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 800b350:	4b07      	ldr	r3, [pc, #28]	; (800b370 <ProcessRadioTxTimeout+0x40>)
 800b352:	4a09      	ldr	r2, [pc, #36]	; (800b378 <ProcessRadioTxTimeout+0x48>)
 800b354:	2102      	movs	r1, #2
 800b356:	5499      	strb	r1, [r3, r2]
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 800b358:	2002      	movs	r0, #2
 800b35a:	f005 fa87 	bl	801086c <LoRaMacConfirmQueueSetStatusCmn>
    MacCtx.MacFlags.Bits.MacDone = 1;
 800b35e:	4b04      	ldr	r3, [pc, #16]	; (800b370 <ProcessRadioTxTimeout+0x40>)
 800b360:	4a06      	ldr	r2, [pc, #24]	; (800b37c <ProcessRadioTxTimeout+0x4c>)
 800b362:	5c99      	ldrb	r1, [r3, r2]
 800b364:	2010      	movs	r0, #16
 800b366:	4301      	orrs	r1, r0
 800b368:	5499      	strb	r1, [r3, r2]
}
 800b36a:	46c0      	nop			; (mov r8, r8)
 800b36c:	46bd      	mov	sp, r7
 800b36e:	bd80      	pop	{r7, pc}
 800b370:	20000708 	.word	0x20000708
 800b374:	08021b54 	.word	0x08021b54
 800b378:	0000042d 	.word	0x0000042d
 800b37c:	0000046d 	.word	0x0000046d

0800b380 <HandleRadioRxErrorTimeout>:

static void HandleRadioRxErrorTimeout( LoRaMacEventInfoStatus_t rx1EventInfoStatus, LoRaMacEventInfoStatus_t rx2EventInfoStatus )
{
 800b380:	b580      	push	{r7, lr}
 800b382:	b084      	sub	sp, #16
 800b384:	af00      	add	r7, sp, #0
 800b386:	0002      	movs	r2, r0
 800b388:	1dfb      	adds	r3, r7, #7
 800b38a:	701a      	strb	r2, [r3, #0]
 800b38c:	1dbb      	adds	r3, r7, #6
 800b38e:	1c0a      	adds	r2, r1, #0
 800b390:	701a      	strb	r2, [r3, #0]
    bool classBRx = false;
 800b392:	230f      	movs	r3, #15
 800b394:	18fb      	adds	r3, r7, r3
 800b396:	2200      	movs	r2, #0
 800b398:	701a      	strb	r2, [r3, #0]

    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 800b39a:	4a55      	ldr	r2, [pc, #340]	; (800b4f0 <HandleRadioRxErrorTimeout+0x170>)
 800b39c:	238e      	movs	r3, #142	; 0x8e
 800b39e:	00db      	lsls	r3, r3, #3
 800b3a0:	58d3      	ldr	r3, [r2, r3]
 800b3a2:	22c8      	movs	r2, #200	; 0xc8
 800b3a4:	5c9b      	ldrb	r3, [r3, r2]
 800b3a6:	2b02      	cmp	r3, #2
 800b3a8:	d002      	beq.n	800b3b0 <HandleRadioRxErrorTimeout+0x30>
    {
        Radio.Sleep( );
 800b3aa:	4b52      	ldr	r3, [pc, #328]	; (800b4f4 <HandleRadioRxErrorTimeout+0x174>)
 800b3ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3ae:	4798      	blx	r3
    }

    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800b3b0:	f004 fdc1 	bl	800ff36 <LoRaMacClassBIsBeaconExpected>
 800b3b4:	1e03      	subs	r3, r0, #0
 800b3b6:	d009      	beq.n	800b3cc <HandleRadioRxErrorTimeout+0x4c>
    {
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 800b3b8:	2002      	movs	r0, #2
 800b3ba:	f004 fd74 	bl	800fea6 <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 800b3be:	2000      	movs	r0, #0
 800b3c0:	f004 fd95 	bl	800feee <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 800b3c4:	230f      	movs	r3, #15
 800b3c6:	18fb      	adds	r3, r7, r3
 800b3c8:	2201      	movs	r2, #1
 800b3ca:	701a      	strb	r2, [r3, #0]
    }
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 800b3cc:	4a48      	ldr	r2, [pc, #288]	; (800b4f0 <HandleRadioRxErrorTimeout+0x170>)
 800b3ce:	238e      	movs	r3, #142	; 0x8e
 800b3d0:	00db      	lsls	r3, r3, #3
 800b3d2:	58d3      	ldr	r3, [r2, r3]
 800b3d4:	22c8      	movs	r2, #200	; 0xc8
 800b3d6:	5c9b      	ldrb	r3, [r3, r2]
 800b3d8:	2b01      	cmp	r3, #1
 800b3da:	d11b      	bne.n	800b414 <HandleRadioRxErrorTimeout+0x94>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800b3dc:	f004 fdb1 	bl	800ff42 <LoRaMacClassBIsPingExpected>
 800b3e0:	1e03      	subs	r3, r0, #0
 800b3e2:	d009      	beq.n	800b3f8 <HandleRadioRxErrorTimeout+0x78>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800b3e4:	2000      	movs	r0, #0
 800b3e6:	f004 fd68 	bl	800feba <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800b3ea:	2000      	movs	r0, #0
 800b3ec:	f004 fd87 	bl	800fefe <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 800b3f0:	230f      	movs	r3, #15
 800b3f2:	18fb      	adds	r3, r7, r3
 800b3f4:	2201      	movs	r2, #1
 800b3f6:	701a      	strb	r2, [r3, #0]
        }
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 800b3f8:	f004 fda9 	bl	800ff4e <LoRaMacClassBIsMulticastExpected>
 800b3fc:	1e03      	subs	r3, r0, #0
 800b3fe:	d009      	beq.n	800b414 <HandleRadioRxErrorTimeout+0x94>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800b400:	2000      	movs	r0, #0
 800b402:	f004 fd64 	bl	800fece <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800b406:	2000      	movs	r0, #0
 800b408:	f004 fd81 	bl	800ff0e <LoRaMacClassBMulticastSlotTimerEvent>
            classBRx = true;
 800b40c:	230f      	movs	r3, #15
 800b40e:	18fb      	adds	r3, r7, r3
 800b410:	2201      	movs	r2, #1
 800b412:	701a      	strb	r2, [r3, #0]
        }
    }

    if( classBRx == false )
 800b414:	230f      	movs	r3, #15
 800b416:	18fb      	adds	r3, r7, r3
 800b418:	781b      	ldrb	r3, [r3, #0]
 800b41a:	2201      	movs	r2, #1
 800b41c:	4053      	eors	r3, r2
 800b41e:	b2db      	uxtb	r3, r3
 800b420:	2b00      	cmp	r3, #0
 800b422:	d057      	beq.n	800b4d4 <HandleRadioRxErrorTimeout+0x154>
    {
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800b424:	4b32      	ldr	r3, [pc, #200]	; (800b4f0 <HandleRadioRxErrorTimeout+0x170>)
 800b426:	4a34      	ldr	r2, [pc, #208]	; (800b4f8 <HandleRadioRxErrorTimeout+0x178>)
 800b428:	5c9b      	ldrb	r3, [r3, r2]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d132      	bne.n	800b494 <HandleRadioRxErrorTimeout+0x114>
        {
            if( MacCtx.NvmCtx->NodeAckRequested == true )
 800b42e:	4a30      	ldr	r2, [pc, #192]	; (800b4f0 <HandleRadioRxErrorTimeout+0x170>)
 800b430:	238e      	movs	r3, #142	; 0x8e
 800b432:	00db      	lsls	r3, r3, #3
 800b434:	58d3      	ldr	r3, [r2, r3]
 800b436:	4a31      	ldr	r2, [pc, #196]	; (800b4fc <HandleRadioRxErrorTimeout+0x17c>)
 800b438:	5c9b      	ldrb	r3, [r3, r2]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d004      	beq.n	800b448 <HandleRadioRxErrorTimeout+0xc8>
            {
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 800b43e:	4b2c      	ldr	r3, [pc, #176]	; (800b4f0 <HandleRadioRxErrorTimeout+0x170>)
 800b440:	1dfa      	adds	r2, r7, #7
 800b442:	492f      	ldr	r1, [pc, #188]	; (800b500 <HandleRadioRxErrorTimeout+0x180>)
 800b444:	7812      	ldrb	r2, [r2, #0]
 800b446:	545a      	strb	r2, [r3, r1]
            }
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 800b448:	1dfb      	adds	r3, r7, #7
 800b44a:	781b      	ldrb	r3, [r3, #0]
 800b44c:	0018      	movs	r0, r3
 800b44e:	f005 fa0d 	bl	801086c <LoRaMacConfirmQueueSetStatusCmn>

            if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 800b452:	4a27      	ldr	r2, [pc, #156]	; (800b4f0 <HandleRadioRxErrorTimeout+0x170>)
 800b454:	238e      	movs	r3, #142	; 0x8e
 800b456:	00db      	lsls	r3, r3, #3
 800b458:	58d3      	ldr	r3, [r2, r3]
 800b45a:	22c8      	movs	r2, #200	; 0xc8
 800b45c:	5c9b      	ldrb	r3, [r3, r2]
 800b45e:	2b02      	cmp	r3, #2
 800b460:	d038      	beq.n	800b4d4 <HandleRadioRxErrorTimeout+0x154>
            {
                if( TimerGetElapsedTime( MacCtx.AggregatedLastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 800b462:	4a23      	ldr	r2, [pc, #140]	; (800b4f0 <HandleRadioRxErrorTimeout+0x170>)
 800b464:	23d0      	movs	r3, #208	; 0xd0
 800b466:	009b      	lsls	r3, r3, #2
 800b468:	58d3      	ldr	r3, [r2, r3]
 800b46a:	0018      	movs	r0, r3
 800b46c:	f00a fa73 	bl	8015956 <TimerGetElapsedTime>
 800b470:	0001      	movs	r1, r0
 800b472:	4a1f      	ldr	r2, [pc, #124]	; (800b4f0 <HandleRadioRxErrorTimeout+0x170>)
 800b474:	23f2      	movs	r3, #242	; 0xf2
 800b476:	009b      	lsls	r3, r3, #2
 800b478:	58d3      	ldr	r3, [r2, r3]
 800b47a:	4299      	cmp	r1, r3
 800b47c:	d32a      	bcc.n	800b4d4 <HandleRadioRxErrorTimeout+0x154>
                {
                    TimerStop( &MacCtx.RxWindowTimer2 );
 800b47e:	4b21      	ldr	r3, [pc, #132]	; (800b504 <HandleRadioRxErrorTimeout+0x184>)
 800b480:	0018      	movs	r0, r3
 800b482:	f00a fa25 	bl	80158d0 <TimerStop>
                    MacCtx.MacFlags.Bits.MacDone = 1;
 800b486:	4b1a      	ldr	r3, [pc, #104]	; (800b4f0 <HandleRadioRxErrorTimeout+0x170>)
 800b488:	4a1f      	ldr	r2, [pc, #124]	; (800b508 <HandleRadioRxErrorTimeout+0x188>)
 800b48a:	5c99      	ldrb	r1, [r3, r2]
 800b48c:	2010      	movs	r0, #16
 800b48e:	4301      	orrs	r1, r0
 800b490:	5499      	strb	r1, [r3, r2]
 800b492:	e01f      	b.n	800b4d4 <HandleRadioRxErrorTimeout+0x154>
                }
            }
        }
        else
        {
            if( MacCtx.NvmCtx->NodeAckRequested == true )
 800b494:	4a16      	ldr	r2, [pc, #88]	; (800b4f0 <HandleRadioRxErrorTimeout+0x170>)
 800b496:	238e      	movs	r3, #142	; 0x8e
 800b498:	00db      	lsls	r3, r3, #3
 800b49a:	58d3      	ldr	r3, [r2, r3]
 800b49c:	4a17      	ldr	r2, [pc, #92]	; (800b4fc <HandleRadioRxErrorTimeout+0x17c>)
 800b49e:	5c9b      	ldrb	r3, [r3, r2]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d004      	beq.n	800b4ae <HandleRadioRxErrorTimeout+0x12e>
            {
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 800b4a4:	4b12      	ldr	r3, [pc, #72]	; (800b4f0 <HandleRadioRxErrorTimeout+0x170>)
 800b4a6:	1dba      	adds	r2, r7, #6
 800b4a8:	4915      	ldr	r1, [pc, #84]	; (800b500 <HandleRadioRxErrorTimeout+0x180>)
 800b4aa:	7812      	ldrb	r2, [r2, #0]
 800b4ac:	545a      	strb	r2, [r3, r1]
            }
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 800b4ae:	1dbb      	adds	r3, r7, #6
 800b4b0:	781b      	ldrb	r3, [r3, #0]
 800b4b2:	0018      	movs	r0, r3
 800b4b4:	f005 f9da 	bl	801086c <LoRaMacConfirmQueueSetStatusCmn>

            if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 800b4b8:	4a0d      	ldr	r2, [pc, #52]	; (800b4f0 <HandleRadioRxErrorTimeout+0x170>)
 800b4ba:	238e      	movs	r3, #142	; 0x8e
 800b4bc:	00db      	lsls	r3, r3, #3
 800b4be:	58d3      	ldr	r3, [r2, r3]
 800b4c0:	22c8      	movs	r2, #200	; 0xc8
 800b4c2:	5c9b      	ldrb	r3, [r3, r2]
 800b4c4:	2b02      	cmp	r3, #2
 800b4c6:	d005      	beq.n	800b4d4 <HandleRadioRxErrorTimeout+0x154>
            {
                MacCtx.MacFlags.Bits.MacDone = 1;
 800b4c8:	4b09      	ldr	r3, [pc, #36]	; (800b4f0 <HandleRadioRxErrorTimeout+0x170>)
 800b4ca:	4a0f      	ldr	r2, [pc, #60]	; (800b508 <HandleRadioRxErrorTimeout+0x188>)
 800b4cc:	5c99      	ldrb	r1, [r3, r2]
 800b4ce:	2010      	movs	r0, #16
 800b4d0:	4301      	orrs	r1, r0
 800b4d2:	5499      	strb	r1, [r3, r2]
            }
        }
    }

    if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 800b4d4:	4a06      	ldr	r2, [pc, #24]	; (800b4f0 <HandleRadioRxErrorTimeout+0x170>)
 800b4d6:	238e      	movs	r3, #142	; 0x8e
 800b4d8:	00db      	lsls	r3, r3, #3
 800b4da:	58d3      	ldr	r3, [r2, r3]
 800b4dc:	22c8      	movs	r2, #200	; 0xc8
 800b4de:	5c9b      	ldrb	r3, [r3, r2]
 800b4e0:	2b02      	cmp	r3, #2
 800b4e2:	d101      	bne.n	800b4e8 <HandleRadioRxErrorTimeout+0x168>
    {
        OpenContinuousRx2Window( );
 800b4e4:	f002 f892 	bl	800d60c <OpenContinuousRx2Window>
    }
}
 800b4e8:	46c0      	nop			; (mov r8, r8)
 800b4ea:	46bd      	mov	sp, r7
 800b4ec:	b004      	add	sp, #16
 800b4ee:	bd80      	pop	{r7, pc}
 800b4f0:	20000708 	.word	0x20000708
 800b4f4:	08021b54 	.word	0x08021b54
 800b4f8:	0000046c 	.word	0x0000046c
 800b4fc:	00000219 	.word	0x00000219
 800b500:	0000042d 	.word	0x0000042d
 800b504:	20000ab4 	.word	0x20000ab4
 800b508:	0000046d 	.word	0x0000046d

0800b50c <ProcessRadioRxError>:

static void ProcessRadioRxError( void )
{
 800b50c:	b580      	push	{r7, lr}
 800b50e:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 800b510:	2106      	movs	r1, #6
 800b512:	2005      	movs	r0, #5
 800b514:	f7ff ff34 	bl	800b380 <HandleRadioRxErrorTimeout>
}
 800b518:	46c0      	nop			; (mov r8, r8)
 800b51a:	46bd      	mov	sp, r7
 800b51c:	bd80      	pop	{r7, pc}

0800b51e <ProcessRadioRxTimeout>:

static void ProcessRadioRxTimeout( void )
{
 800b51e:	b580      	push	{r7, lr}
 800b520:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 800b522:	2104      	movs	r1, #4
 800b524:	2003      	movs	r0, #3
 800b526:	f7ff ff2b 	bl	800b380 <HandleRadioRxErrorTimeout>
}
 800b52a:	46c0      	nop			; (mov r8, r8)
 800b52c:	46bd      	mov	sp, r7
 800b52e:	bd80      	pop	{r7, pc}

0800b530 <LoRaMacHandleIrqEvents>:

static void LoRaMacHandleIrqEvents( void )
{
 800b530:	b580      	push	{r7, lr}
 800b532:	b082      	sub	sp, #8
 800b534:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents_t events;

    CRITICAL_SECTION_BEGIN( );
 800b536:	f012 fea3 	bl	801e280 <itsdk_enterCriticalSection>
    events = LoRaMacRadioEvents;
 800b53a:	4b1e      	ldr	r3, [pc, #120]	; (800b5b4 <LoRaMacHandleIrqEvents+0x84>)
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	607b      	str	r3, [r7, #4]
    LoRaMacRadioEvents.Value = 0;
 800b540:	4b1c      	ldr	r3, [pc, #112]	; (800b5b4 <LoRaMacHandleIrqEvents+0x84>)
 800b542:	2200      	movs	r2, #0
 800b544:	601a      	str	r2, [r3, #0]
    CRITICAL_SECTION_END( );
 800b546:	f012 feaf 	bl	801e2a8 <itsdk_leaveCriticalSection>

    if( events.Value != 0 )
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d02c      	beq.n	800b5aa <LoRaMacHandleIrqEvents+0x7a>
    {
        if( events.Events.TxDone == 1 )
 800b550:	1d3b      	adds	r3, r7, #4
 800b552:	781b      	ldrb	r3, [r3, #0]
 800b554:	2210      	movs	r2, #16
 800b556:	4013      	ands	r3, r2
 800b558:	b2db      	uxtb	r3, r3
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d001      	beq.n	800b562 <LoRaMacHandleIrqEvents+0x32>
        {
            ProcessRadioTxDone( );
 800b55e:	f7ff f8af 	bl	800a6c0 <ProcessRadioTxDone>
        }
        if( events.Events.RxDone == 1 )
 800b562:	1d3b      	adds	r3, r7, #4
 800b564:	781b      	ldrb	r3, [r3, #0]
 800b566:	2208      	movs	r2, #8
 800b568:	4013      	ands	r3, r2
 800b56a:	b2db      	uxtb	r3, r3
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d001      	beq.n	800b574 <LoRaMacHandleIrqEvents+0x44>
        {
            ProcessRadioRxDone( );
 800b570:	f7ff f9a4 	bl	800a8bc <ProcessRadioRxDone>
        }
        if( events.Events.TxTimeout == 1 )
 800b574:	1d3b      	adds	r3, r7, #4
 800b576:	781b      	ldrb	r3, [r3, #0]
 800b578:	2204      	movs	r2, #4
 800b57a:	4013      	ands	r3, r2
 800b57c:	b2db      	uxtb	r3, r3
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d001      	beq.n	800b586 <LoRaMacHandleIrqEvents+0x56>
        {
            ProcessRadioTxTimeout( );
 800b582:	f7ff fed5 	bl	800b330 <ProcessRadioTxTimeout>
        }
        if( events.Events.RxError == 1 )
 800b586:	1d3b      	adds	r3, r7, #4
 800b588:	781b      	ldrb	r3, [r3, #0]
 800b58a:	2202      	movs	r2, #2
 800b58c:	4013      	ands	r3, r2
 800b58e:	b2db      	uxtb	r3, r3
 800b590:	2b00      	cmp	r3, #0
 800b592:	d001      	beq.n	800b598 <LoRaMacHandleIrqEvents+0x68>
        {
            ProcessRadioRxError( );
 800b594:	f7ff ffba 	bl	800b50c <ProcessRadioRxError>
        }
        if( events.Events.RxTimeout == 1 )
 800b598:	1d3b      	adds	r3, r7, #4
 800b59a:	781b      	ldrb	r3, [r3, #0]
 800b59c:	2201      	movs	r2, #1
 800b59e:	4013      	ands	r3, r2
 800b5a0:	b2db      	uxtb	r3, r3
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d001      	beq.n	800b5aa <LoRaMacHandleIrqEvents+0x7a>
        {
            ProcessRadioRxTimeout( );
 800b5a6:	f7ff ffba 	bl	800b51e <ProcessRadioRxTimeout>
        }
    }
}
 800b5aa:	46c0      	nop			; (mov r8, r8)
 800b5ac:	46bd      	mov	sp, r7
 800b5ae:	b002      	add	sp, #8
 800b5b0:	bd80      	pop	{r7, pc}
 800b5b2:	46c0      	nop			; (mov r8, r8)
 800b5b4:	20000da8 	.word	0x20000da8

0800b5b8 <LoRaMacIsBusy>:

static LoRaMacBoolean_t LoRaMacIsBusy( void )
{
 800b5b8:	b580      	push	{r7, lr}
 800b5ba:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800b5bc:	4a08      	ldr	r2, [pc, #32]	; (800b5e0 <LoRaMacIsBusy+0x28>)
 800b5be:	23d5      	movs	r3, #213	; 0xd5
 800b5c0:	009b      	lsls	r3, r3, #2
 800b5c2:	58d3      	ldr	r3, [r2, r3]
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d106      	bne.n	800b5d6 <LoRaMacIsBusy+0x1e>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 800b5c8:	4b05      	ldr	r3, [pc, #20]	; (800b5e0 <LoRaMacIsBusy+0x28>)
 800b5ca:	4a06      	ldr	r2, [pc, #24]	; (800b5e4 <LoRaMacIsBusy+0x2c>)
 800b5cc:	5c9b      	ldrb	r3, [r3, r2]
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800b5ce:	2b01      	cmp	r3, #1
 800b5d0:	d101      	bne.n	800b5d6 <LoRaMacIsBusy+0x1e>
    {
        return LORAMAC_FALSE;
 800b5d2:	2300      	movs	r3, #0
 800b5d4:	e000      	b.n	800b5d8 <LoRaMacIsBusy+0x20>
    }
    return LORAMAC_TRUE;
 800b5d6:	2301      	movs	r3, #1
}
 800b5d8:	0018      	movs	r0, r3
 800b5da:	46bd      	mov	sp, r7
 800b5dc:	bd80      	pop	{r7, pc}
 800b5de:	46c0      	nop			; (mov r8, r8)
 800b5e0:	20000708 	.word	0x20000708
 800b5e4:	0000046e 	.word	0x0000046e

0800b5e8 <LoRaMacEnableRequests>:


static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
 800b5e8:	b580      	push	{r7, lr}
 800b5ea:	b082      	sub	sp, #8
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	0002      	movs	r2, r0
 800b5f0:	1dfb      	adds	r3, r7, #7
 800b5f2:	701a      	strb	r2, [r3, #0]
    MacCtx.AllowRequests = requestState;
 800b5f4:	4b04      	ldr	r3, [pc, #16]	; (800b608 <LoRaMacEnableRequests+0x20>)
 800b5f6:	1dfa      	adds	r2, r7, #7
 800b5f8:	4904      	ldr	r1, [pc, #16]	; (800b60c <LoRaMacEnableRequests+0x24>)
 800b5fa:	7812      	ldrb	r2, [r2, #0]
 800b5fc:	545a      	strb	r2, [r3, r1]
}
 800b5fe:	46c0      	nop			; (mov r8, r8)
 800b600:	46bd      	mov	sp, r7
 800b602:	b002      	add	sp, #8
 800b604:	bd80      	pop	{r7, pc}
 800b606:	46c0      	nop			; (mov r8, r8)
 800b608:	20000708 	.word	0x20000708
 800b60c:	0000046e 	.word	0x0000046e

0800b610 <LoRaMacHandleRequestEvents>:

static void LoRaMacHandleRequestEvents( void )
{
 800b610:	b580      	push	{r7, lr}
 800b612:	b082      	sub	sp, #8
 800b614:	af00      	add	r7, sp, #0
    // Handle events
    LoRaMacFlags_t reqEvents = MacCtx.MacFlags;
 800b616:	1d3b      	adds	r3, r7, #4
 800b618:	4a2c      	ldr	r2, [pc, #176]	; (800b6cc <LoRaMacHandleRequestEvents+0xbc>)
 800b61a:	492d      	ldr	r1, [pc, #180]	; (800b6d0 <LoRaMacHandleRequestEvents+0xc0>)
 800b61c:	5c52      	ldrb	r2, [r2, r1]
 800b61e:	701a      	strb	r2, [r3, #0]

    if( MacCtx.MacState == LORAMAC_IDLE )
 800b620:	4a2a      	ldr	r2, [pc, #168]	; (800b6cc <LoRaMacHandleRequestEvents+0xbc>)
 800b622:	23d5      	movs	r3, #213	; 0xd5
 800b624:	009b      	lsls	r3, r3, #2
 800b626:	58d3      	ldr	r3, [r2, r3]
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d14a      	bne.n	800b6c2 <LoRaMacHandleRequestEvents+0xb2>
    {
        // Update event bits
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800b62c:	4b27      	ldr	r3, [pc, #156]	; (800b6cc <LoRaMacHandleRequestEvents+0xbc>)
 800b62e:	4a28      	ldr	r2, [pc, #160]	; (800b6d0 <LoRaMacHandleRequestEvents+0xc0>)
 800b630:	5c9b      	ldrb	r3, [r3, r2]
 800b632:	2201      	movs	r2, #1
 800b634:	4013      	ands	r3, r2
 800b636:	b2db      	uxtb	r3, r3
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d005      	beq.n	800b648 <LoRaMacHandleRequestEvents+0x38>
        {
            MacCtx.MacFlags.Bits.McpsReq = 0;
 800b63c:	4b23      	ldr	r3, [pc, #140]	; (800b6cc <LoRaMacHandleRequestEvents+0xbc>)
 800b63e:	4a24      	ldr	r2, [pc, #144]	; (800b6d0 <LoRaMacHandleRequestEvents+0xc0>)
 800b640:	5c99      	ldrb	r1, [r3, r2]
 800b642:	2001      	movs	r0, #1
 800b644:	4381      	bics	r1, r0
 800b646:	5499      	strb	r1, [r3, r2]
        }

        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800b648:	4b20      	ldr	r3, [pc, #128]	; (800b6cc <LoRaMacHandleRequestEvents+0xbc>)
 800b64a:	4a21      	ldr	r2, [pc, #132]	; (800b6d0 <LoRaMacHandleRequestEvents+0xc0>)
 800b64c:	5c9b      	ldrb	r3, [r3, r2]
 800b64e:	2204      	movs	r2, #4
 800b650:	4013      	ands	r3, r2
 800b652:	b2db      	uxtb	r3, r3
 800b654:	2b00      	cmp	r3, #0
 800b656:	d005      	beq.n	800b664 <LoRaMacHandleRequestEvents+0x54>
        {
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800b658:	4b1c      	ldr	r3, [pc, #112]	; (800b6cc <LoRaMacHandleRequestEvents+0xbc>)
 800b65a:	4a1d      	ldr	r2, [pc, #116]	; (800b6d0 <LoRaMacHandleRequestEvents+0xc0>)
 800b65c:	5c99      	ldrb	r1, [r3, r2]
 800b65e:	2004      	movs	r0, #4
 800b660:	4381      	bics	r1, r0
 800b662:	5499      	strb	r1, [r3, r2]
        }

        // Allow requests again
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800b664:	2001      	movs	r0, #1
 800b666:	f7ff ffbf 	bl	800b5e8 <LoRaMacEnableRequests>

        // Handle callbacks
        if( reqEvents.Bits.McpsReq == 1 )
 800b66a:	1d3b      	adds	r3, r7, #4
 800b66c:	781b      	ldrb	r3, [r3, #0]
 800b66e:	2201      	movs	r2, #1
 800b670:	4013      	ands	r3, r2
 800b672:	b2db      	uxtb	r3, r3
 800b674:	2b00      	cmp	r3, #0
 800b676:	d007      	beq.n	800b688 <LoRaMacHandleRequestEvents+0x78>
        {
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 800b678:	4a14      	ldr	r2, [pc, #80]	; (800b6cc <LoRaMacHandleRequestEvents+0xbc>)
 800b67a:	23d6      	movs	r3, #214	; 0xd6
 800b67c:	009b      	lsls	r3, r3, #2
 800b67e:	58d3      	ldr	r3, [r2, r3]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	4a14      	ldr	r2, [pc, #80]	; (800b6d4 <LoRaMacHandleRequestEvents+0xc4>)
 800b684:	0010      	movs	r0, r2
 800b686:	4798      	blx	r3
        }

        if( reqEvents.Bits.MlmeReq == 1 )
 800b688:	1d3b      	adds	r3, r7, #4
 800b68a:	781b      	ldrb	r3, [r3, #0]
 800b68c:	2204      	movs	r2, #4
 800b68e:	4013      	ands	r3, r2
 800b690:	b2db      	uxtb	r3, r3
 800b692:	2b00      	cmp	r3, #0
 800b694:	d00d      	beq.n	800b6b2 <LoRaMacHandleRequestEvents+0xa2>
        {
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 800b696:	4b10      	ldr	r3, [pc, #64]	; (800b6d8 <LoRaMacHandleRequestEvents+0xc8>)
 800b698:	0018      	movs	r0, r3
 800b69a:	f005 f93d 	bl	8010918 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 800b69e:	f005 f99d 	bl	80109dc <LoRaMacConfirmQueueGetCnt>
 800b6a2:	1e03      	subs	r3, r0, #0
 800b6a4:	d005      	beq.n	800b6b2 <LoRaMacHandleRequestEvents+0xa2>
            {
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 800b6a6:	4b09      	ldr	r3, [pc, #36]	; (800b6cc <LoRaMacHandleRequestEvents+0xbc>)
 800b6a8:	4a09      	ldr	r2, [pc, #36]	; (800b6d0 <LoRaMacHandleRequestEvents+0xc0>)
 800b6aa:	5c99      	ldrb	r1, [r3, r2]
 800b6ac:	2004      	movs	r0, #4
 800b6ae:	4301      	orrs	r1, r0
 800b6b0:	5499      	strb	r1, [r3, r2]
            }
        }

        // Start beaconing again
        LoRaMacClassBResumeBeaconing( );
 800b6b2:	f004 fc67 	bl	800ff84 <LoRaMacClassBResumeBeaconing>

        // Procedure done. Reset variables.
        MacCtx.MacFlags.Bits.MacDone = 0;
 800b6b6:	4b05      	ldr	r3, [pc, #20]	; (800b6cc <LoRaMacHandleRequestEvents+0xbc>)
 800b6b8:	4a05      	ldr	r2, [pc, #20]	; (800b6d0 <LoRaMacHandleRequestEvents+0xc0>)
 800b6ba:	5c99      	ldrb	r1, [r3, r2]
 800b6bc:	2010      	movs	r0, #16
 800b6be:	4381      	bics	r1, r0
 800b6c0:	5499      	strb	r1, [r3, r2]
    }
}
 800b6c2:	46c0      	nop			; (mov r8, r8)
 800b6c4:	46bd      	mov	sp, r7
 800b6c6:	b002      	add	sp, #8
 800b6c8:	bd80      	pop	{r7, pc}
 800b6ca:	46c0      	nop			; (mov r8, r8)
 800b6cc:	20000708 	.word	0x20000708
 800b6d0:	0000046d 	.word	0x0000046d
 800b6d4:	20000b34 	.word	0x20000b34
 800b6d8:	20000b48 	.word	0x20000b48

0800b6dc <LoRaMacHandleIndicationEvents>:

static void LoRaMacHandleIndicationEvents( void )
{
 800b6dc:	b580      	push	{r7, lr}
 800b6de:	b082      	sub	sp, #8
 800b6e0:	af00      	add	r7, sp, #0
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 800b6e2:	4b2d      	ldr	r3, [pc, #180]	; (800b798 <LoRaMacHandleIndicationEvents+0xbc>)
 800b6e4:	4a2d      	ldr	r2, [pc, #180]	; (800b79c <LoRaMacHandleIndicationEvents+0xc0>)
 800b6e6:	5c9b      	ldrb	r3, [r3, r2]
 800b6e8:	2208      	movs	r2, #8
 800b6ea:	4013      	ands	r3, r2
 800b6ec:	b2db      	uxtb	r3, r3
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d00d      	beq.n	800b70e <LoRaMacHandleIndicationEvents+0x32>
    {
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication );
 800b6f2:	4a29      	ldr	r2, [pc, #164]	; (800b798 <LoRaMacHandleIndicationEvents+0xbc>)
 800b6f4:	23d6      	movs	r3, #214	; 0xd6
 800b6f6:	009b      	lsls	r3, r3, #2
 800b6f8:	58d3      	ldr	r3, [r2, r3]
 800b6fa:	68db      	ldr	r3, [r3, #12]
 800b6fc:	4a28      	ldr	r2, [pc, #160]	; (800b7a0 <LoRaMacHandleIndicationEvents+0xc4>)
 800b6fe:	0010      	movs	r0, r2
 800b700:	4798      	blx	r3
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 800b702:	4b25      	ldr	r3, [pc, #148]	; (800b798 <LoRaMacHandleIndicationEvents+0xbc>)
 800b704:	4a25      	ldr	r2, [pc, #148]	; (800b79c <LoRaMacHandleIndicationEvents+0xc0>)
 800b706:	5c99      	ldrb	r1, [r3, r2]
 800b708:	2008      	movs	r0, #8
 800b70a:	4381      	bics	r1, r0
 800b70c:	5499      	strb	r1, [r3, r2]
    }

    // Handle events
    if( MacCtx.MacState == LORAMAC_IDLE )
 800b70e:	4a22      	ldr	r2, [pc, #136]	; (800b798 <LoRaMacHandleIndicationEvents+0xbc>)
 800b710:	23d5      	movs	r3, #213	; 0xd5
 800b712:	009b      	lsls	r3, r3, #2
 800b714:	58d3      	ldr	r3, [r2, r3]
 800b716:	2b00      	cmp	r3, #0
 800b718:	d114      	bne.n	800b744 <LoRaMacHandleIndicationEvents+0x68>
    {
        // Verify if sticky MAC commands are pending or not
        bool isStickyMacCommandPending = false;
 800b71a:	1dfb      	adds	r3, r7, #7
 800b71c:	2200      	movs	r2, #0
 800b71e:	701a      	strb	r2, [r3, #0]
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 800b720:	1dfb      	adds	r3, r7, #7
 800b722:	0018      	movs	r0, r3
 800b724:	f004 ff48 	bl	80105b8 <LoRaMacCommandsStickyCmdsPending>
        if( isStickyMacCommandPending == true )
 800b728:	1dfb      	adds	r3, r7, #7
 800b72a:	781b      	ldrb	r3, [r3, #0]
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d009      	beq.n	800b744 <LoRaMacHandleIndicationEvents+0x68>
        {// Setup MLME indication
            SetMlmeScheduleUplinkIndication( );
 800b730:	f000 fc9e 	bl	800c070 <SetMlmeScheduleUplinkIndication>
            MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication );
 800b734:	4a18      	ldr	r2, [pc, #96]	; (800b798 <LoRaMacHandleIndicationEvents+0xbc>)
 800b736:	23d6      	movs	r3, #214	; 0xd6
 800b738:	009b      	lsls	r3, r3, #2
 800b73a:	58d3      	ldr	r3, [r2, r3]
 800b73c:	68db      	ldr	r3, [r3, #12]
 800b73e:	4a18      	ldr	r2, [pc, #96]	; (800b7a0 <LoRaMacHandleIndicationEvents+0xc4>)
 800b740:	0010      	movs	r0, r2
 800b742:	4798      	blx	r3
        }
    }

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800b744:	4b14      	ldr	r3, [pc, #80]	; (800b798 <LoRaMacHandleIndicationEvents+0xbc>)
 800b746:	4a15      	ldr	r2, [pc, #84]	; (800b79c <LoRaMacHandleIndicationEvents+0xc0>)
 800b748:	5c9b      	ldrb	r3, [r3, r2]
 800b74a:	2202      	movs	r2, #2
 800b74c:	4013      	ands	r3, r2
 800b74e:	b2db      	uxtb	r3, r3
 800b750:	2b00      	cmp	r3, #0
 800b752:	d01d      	beq.n	800b790 <LoRaMacHandleIndicationEvents+0xb4>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 800b754:	4b10      	ldr	r3, [pc, #64]	; (800b798 <LoRaMacHandleIndicationEvents+0xbc>)
 800b756:	4a11      	ldr	r2, [pc, #68]	; (800b79c <LoRaMacHandleIndicationEvents+0xc0>)
 800b758:	5c99      	ldrb	r1, [r3, r2]
 800b75a:	2002      	movs	r0, #2
 800b75c:	4381      	bics	r1, r0
 800b75e:	5499      	strb	r1, [r3, r2]
        if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 800b760:	4a0d      	ldr	r2, [pc, #52]	; (800b798 <LoRaMacHandleIndicationEvents+0xbc>)
 800b762:	238e      	movs	r3, #142	; 0x8e
 800b764:	00db      	lsls	r3, r3, #3
 800b766:	58d3      	ldr	r3, [r2, r3]
 800b768:	22c8      	movs	r2, #200	; 0xc8
 800b76a:	5c9b      	ldrb	r3, [r3, r2]
 800b76c:	2b02      	cmp	r3, #2
 800b76e:	d107      	bne.n	800b780 <LoRaMacHandleIndicationEvents+0xa4>
        {// Activate RX2 window for Class C
            if( MacCtx.MacState == LORAMAC_IDLE )
 800b770:	4a09      	ldr	r2, [pc, #36]	; (800b798 <LoRaMacHandleIndicationEvents+0xbc>)
 800b772:	23d5      	movs	r3, #213	; 0xd5
 800b774:	009b      	lsls	r3, r3, #2
 800b776:	58d3      	ldr	r3, [r2, r3]
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d101      	bne.n	800b780 <LoRaMacHandleIndicationEvents+0xa4>
            {
                OpenContinuousRx2Window( );
 800b77c:	f001 ff46 	bl	800d60c <OpenContinuousRx2Window>
            }
        }
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication );
 800b780:	4a05      	ldr	r2, [pc, #20]	; (800b798 <LoRaMacHandleIndicationEvents+0xbc>)
 800b782:	23d6      	movs	r3, #214	; 0xd6
 800b784:	009b      	lsls	r3, r3, #2
 800b786:	58d3      	ldr	r3, [r2, r3]
 800b788:	685b      	ldr	r3, [r3, #4]
 800b78a:	4a06      	ldr	r2, [pc, #24]	; (800b7a4 <LoRaMacHandleIndicationEvents+0xc8>)
 800b78c:	0010      	movs	r0, r2
 800b78e:	4798      	blx	r3
    }
}
 800b790:	46c0      	nop			; (mov r8, r8)
 800b792:	46bd      	mov	sp, r7
 800b794:	b002      	add	sp, #8
 800b796:	bd80      	pop	{r7, pc}
 800b798:	20000708 	.word	0x20000708
 800b79c:	0000046d 	.word	0x0000046d
 800b7a0:	20000b5c 	.word	0x20000b5c
 800b7a4:	20000b18 	.word	0x20000b18

0800b7a8 <LoRaMacHandleMcpsRequest>:

static void LoRaMacHandleMcpsRequest( void )
{
 800b7a8:	b590      	push	{r4, r7, lr}
 800b7aa:	b083      	sub	sp, #12
 800b7ac:	af00      	add	r7, sp, #0
    // Handle MCPS uplinks
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800b7ae:	4b36      	ldr	r3, [pc, #216]	; (800b888 <LoRaMacHandleMcpsRequest+0xe0>)
 800b7b0:	4a36      	ldr	r2, [pc, #216]	; (800b88c <LoRaMacHandleMcpsRequest+0xe4>)
 800b7b2:	5c9b      	ldrb	r3, [r3, r2]
 800b7b4:	2201      	movs	r2, #1
 800b7b6:	4013      	ands	r3, r2
 800b7b8:	b2db      	uxtb	r3, r3
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d05f      	beq.n	800b87e <LoRaMacHandleMcpsRequest+0xd6>
    {
        bool stopRetransmission = false;
 800b7be:	1dfb      	adds	r3, r7, #7
 800b7c0:	2200      	movs	r2, #0
 800b7c2:	701a      	strb	r2, [r3, #0]
        bool waitForRetransmission = false;
 800b7c4:	1dbb      	adds	r3, r7, #6
 800b7c6:	2200      	movs	r2, #0
 800b7c8:	701a      	strb	r2, [r3, #0]

        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800b7ca:	4b2f      	ldr	r3, [pc, #188]	; (800b888 <LoRaMacHandleMcpsRequest+0xe0>)
 800b7cc:	4a30      	ldr	r2, [pc, #192]	; (800b890 <LoRaMacHandleMcpsRequest+0xe8>)
 800b7ce:	5c9b      	ldrb	r3, [r3, r2]
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d004      	beq.n	800b7de <LoRaMacHandleMcpsRequest+0x36>
            ( MacCtx.McpsConfirm.McpsRequest == MCPS_PROPRIETARY ) )
 800b7d4:	4b2c      	ldr	r3, [pc, #176]	; (800b888 <LoRaMacHandleMcpsRequest+0xe0>)
 800b7d6:	4a2e      	ldr	r2, [pc, #184]	; (800b890 <LoRaMacHandleMcpsRequest+0xe8>)
 800b7d8:	5c9b      	ldrb	r3, [r3, r2]
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800b7da:	2b03      	cmp	r3, #3
 800b7dc:	d105      	bne.n	800b7ea <LoRaMacHandleMcpsRequest+0x42>
        {
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 800b7de:	1dfc      	adds	r4, r7, #7
 800b7e0:	f002 fae2 	bl	800dda8 <CheckRetransUnconfirmedUplink>
 800b7e4:	0003      	movs	r3, r0
 800b7e6:	7023      	strb	r3, [r4, #0]
 800b7e8:	e02a      	b.n	800b840 <LoRaMacHandleMcpsRequest+0x98>
        }
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 800b7ea:	4b27      	ldr	r3, [pc, #156]	; (800b888 <LoRaMacHandleMcpsRequest+0xe0>)
 800b7ec:	4a28      	ldr	r2, [pc, #160]	; (800b890 <LoRaMacHandleMcpsRequest+0xe8>)
 800b7ee:	5c9b      	ldrb	r3, [r3, r2]
 800b7f0:	2b01      	cmp	r3, #1
 800b7f2:	d125      	bne.n	800b840 <LoRaMacHandleMcpsRequest+0x98>
        {
            if( MacCtx.NvmCtx->AckTimeoutRetry == true )
 800b7f4:	4a24      	ldr	r2, [pc, #144]	; (800b888 <LoRaMacHandleMcpsRequest+0xe0>)
 800b7f6:	238e      	movs	r3, #142	; 0x8e
 800b7f8:	00db      	lsls	r3, r3, #3
 800b7fa:	58d2      	ldr	r2, [r2, r3]
 800b7fc:	2386      	movs	r3, #134	; 0x86
 800b7fe:	009b      	lsls	r3, r3, #2
 800b800:	5cd3      	ldrb	r3, [r2, r3]
 800b802:	2b00      	cmp	r3, #0
 800b804:	d019      	beq.n	800b83a <LoRaMacHandleMcpsRequest+0x92>
            {
                stopRetransmission = CheckRetransConfirmedUplink( );
 800b806:	1dfc      	adds	r4, r7, #7
 800b808:	f002 fb04 	bl	800de14 <CheckRetransConfirmedUplink>
 800b80c:	0003      	movs	r3, r0
 800b80e:	7023      	strb	r3, [r4, #0]

                if( MacCtx.NvmCtx->Version.Fields.Minor == 0 )
 800b810:	4a1d      	ldr	r2, [pc, #116]	; (800b888 <LoRaMacHandleMcpsRequest+0xe0>)
 800b812:	238e      	movs	r3, #142	; 0x8e
 800b814:	00db      	lsls	r3, r3, #3
 800b816:	58d3      	ldr	r3, [r2, r3]
 800b818:	4a1e      	ldr	r2, [pc, #120]	; (800b894 <LoRaMacHandleMcpsRequest+0xec>)
 800b81a:	5c9b      	ldrb	r3, [r3, r2]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d10f      	bne.n	800b840 <LoRaMacHandleMcpsRequest+0x98>
                {
                    if( stopRetransmission == false )
 800b820:	1dfb      	adds	r3, r7, #7
 800b822:	781b      	ldrb	r3, [r3, #0]
 800b824:	2201      	movs	r2, #1
 800b826:	4053      	eors	r3, r2
 800b828:	b2db      	uxtb	r3, r3
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d002      	beq.n	800b834 <LoRaMacHandleMcpsRequest+0x8c>
                    {
                        AckTimeoutRetriesProcess( );
 800b82e:	f002 fb7b 	bl	800df28 <AckTimeoutRetriesProcess>
 800b832:	e005      	b.n	800b840 <LoRaMacHandleMcpsRequest+0x98>
                    }
                    else
                    {
                        AckTimeoutRetriesFinalize( );
 800b834:	f002 fbdc 	bl	800dff0 <AckTimeoutRetriesFinalize>
 800b838:	e002      	b.n	800b840 <LoRaMacHandleMcpsRequest+0x98>
                    }
                }
            }
            else
            {
                waitForRetransmission = true;
 800b83a:	1dbb      	adds	r3, r7, #6
 800b83c:	2201      	movs	r2, #1
 800b83e:	701a      	strb	r2, [r3, #0]
            }
        }

        if( stopRetransmission == true )
 800b840:	1dfb      	adds	r3, r7, #7
 800b842:	781b      	ldrb	r3, [r3, #0]
 800b844:	2b00      	cmp	r3, #0
 800b846:	d002      	beq.n	800b84e <LoRaMacHandleMcpsRequest+0xa6>
        {// Stop retransmission
            StopRetransmission( );
 800b848:	f002 fb12 	bl	800de70 <StopRetransmission>
            MacCtx.NvmCtx->AckTimeoutRetry = false;
            // Sends the same frame again
            OnTxDelayedTimerEvent( NULL );
        }
    }
}
 800b84c:	e017      	b.n	800b87e <LoRaMacHandleMcpsRequest+0xd6>
        else if( waitForRetransmission == false )
 800b84e:	1dbb      	adds	r3, r7, #6
 800b850:	781b      	ldrb	r3, [r3, #0]
 800b852:	2201      	movs	r2, #1
 800b854:	4053      	eors	r3, r2
 800b856:	b2db      	uxtb	r3, r3
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d010      	beq.n	800b87e <LoRaMacHandleMcpsRequest+0xd6>
            MacCtx.MacFlags.Bits.MacDone = 0;
 800b85c:	4b0a      	ldr	r3, [pc, #40]	; (800b888 <LoRaMacHandleMcpsRequest+0xe0>)
 800b85e:	4a0b      	ldr	r2, [pc, #44]	; (800b88c <LoRaMacHandleMcpsRequest+0xe4>)
 800b860:	5c99      	ldrb	r1, [r3, r2]
 800b862:	2010      	movs	r0, #16
 800b864:	4381      	bics	r1, r0
 800b866:	5499      	strb	r1, [r3, r2]
            MacCtx.NvmCtx->AckTimeoutRetry = false;
 800b868:	4a07      	ldr	r2, [pc, #28]	; (800b888 <LoRaMacHandleMcpsRequest+0xe0>)
 800b86a:	238e      	movs	r3, #142	; 0x8e
 800b86c:	00db      	lsls	r3, r3, #3
 800b86e:	58d2      	ldr	r2, [r2, r3]
 800b870:	2386      	movs	r3, #134	; 0x86
 800b872:	009b      	lsls	r3, r3, #2
 800b874:	2100      	movs	r1, #0
 800b876:	54d1      	strb	r1, [r2, r3]
            OnTxDelayedTimerEvent( NULL );
 800b878:	2000      	movs	r0, #0
 800b87a:	f000 f90b 	bl	800ba94 <OnTxDelayedTimerEvent>
}
 800b87e:	46c0      	nop			; (mov r8, r8)
 800b880:	46bd      	mov	sp, r7
 800b882:	b003      	add	sp, #12
 800b884:	bd90      	pop	{r4, r7, pc}
 800b886:	46c0      	nop			; (mov r8, r8)
 800b888:	20000708 	.word	0x20000708
 800b88c:	0000046d 	.word	0x0000046d
 800b890:	0000042c 	.word	0x0000042c
 800b894:	00000222 	.word	0x00000222

0800b898 <LoRaMacHandleJoinRequest>:

static void LoRaMacHandleJoinRequest( void )
{
 800b898:	b580      	push	{r7, lr}
 800b89a:	af00      	add	r7, sp, #0
    // Handle join request
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) && ( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true ) )
 800b89c:	4b14      	ldr	r3, [pc, #80]	; (800b8f0 <LoRaMacHandleJoinRequest+0x58>)
 800b89e:	4a15      	ldr	r2, [pc, #84]	; (800b8f4 <LoRaMacHandleJoinRequest+0x5c>)
 800b8a0:	5c9b      	ldrb	r3, [r3, r2]
 800b8a2:	2204      	movs	r2, #4
 800b8a4:	4013      	ands	r3, r2
 800b8a6:	b2db      	uxtb	r3, r3
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d01e      	beq.n	800b8ea <LoRaMacHandleJoinRequest+0x52>
 800b8ac:	2000      	movs	r0, #0
 800b8ae:	f005 f819 	bl	80108e4 <LoRaMacConfirmQueueIsCmdActive>
 800b8b2:	1e03      	subs	r3, r0, #0
 800b8b4:	d019      	beq.n	800b8ea <LoRaMacHandleJoinRequest+0x52>
    {
        if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 800b8b6:	2000      	movs	r0, #0
 800b8b8:	f004 ffb2 	bl	8010820 <LoRaMacConfirmQueueGetStatus>
 800b8bc:	1e03      	subs	r3, r0, #0
 800b8be:	d109      	bne.n	800b8d4 <LoRaMacHandleJoinRequest+0x3c>
        {// Node joined successfully
            LoRaMacResetFCnts( );
 800b8c0:	f006 feb8 	bl	8012634 <LoRaMacResetFCnts>
            MacCtx.NvmCtx->ChannelsNbTransCounter = 0;
 800b8c4:	4a0a      	ldr	r2, [pc, #40]	; (800b8f0 <LoRaMacHandleJoinRequest+0x58>)
 800b8c6:	238e      	movs	r3, #142	; 0x8e
 800b8c8:	00db      	lsls	r3, r3, #3
 800b8ca:	58d2      	ldr	r2, [r2, r3]
 800b8cc:	2388      	movs	r3, #136	; 0x88
 800b8ce:	005b      	lsls	r3, r3, #1
 800b8d0:	2100      	movs	r1, #0
 800b8d2:	54d1      	strb	r1, [r2, r3]
        }
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800b8d4:	4a06      	ldr	r2, [pc, #24]	; (800b8f0 <LoRaMacHandleJoinRequest+0x58>)
 800b8d6:	23d5      	movs	r3, #213	; 0xd5
 800b8d8:	009b      	lsls	r3, r3, #2
 800b8da:	58d3      	ldr	r3, [r2, r3]
 800b8dc:	2202      	movs	r2, #2
 800b8de:	4393      	bics	r3, r2
 800b8e0:	0019      	movs	r1, r3
 800b8e2:	4a03      	ldr	r2, [pc, #12]	; (800b8f0 <LoRaMacHandleJoinRequest+0x58>)
 800b8e4:	23d5      	movs	r3, #213	; 0xd5
 800b8e6:	009b      	lsls	r3, r3, #2
 800b8e8:	50d1      	str	r1, [r2, r3]
    }
}
 800b8ea:	46c0      	nop			; (mov r8, r8)
 800b8ec:	46bd      	mov	sp, r7
 800b8ee:	bd80      	pop	{r7, pc}
 800b8f0:	20000708 	.word	0x20000708
 800b8f4:	0000046d 	.word	0x0000046d

0800b8f8 <LoRaMacCheckForTxTimeout>:

static uint8_t LoRaMacCheckForTxTimeout( void )
{
 800b8f8:	b580      	push	{r7, lr}
 800b8fa:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueGetStatusCmn( ) == LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT ) ||
 800b8fc:	f004 ffe8 	bl	80108d0 <LoRaMacConfirmQueueGetStatusCmn>
 800b900:	0003      	movs	r3, r0
 800b902:	2b02      	cmp	r3, #2
 800b904:	d004      	beq.n	800b910 <LoRaMacCheckForTxTimeout+0x18>
        ( MacCtx.McpsConfirm.Status == LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT ) )
 800b906:	4b14      	ldr	r3, [pc, #80]	; (800b958 <LoRaMacCheckForTxTimeout+0x60>)
 800b908:	4a14      	ldr	r2, [pc, #80]	; (800b95c <LoRaMacCheckForTxTimeout+0x64>)
 800b90a:	5c9b      	ldrb	r3, [r3, r2]
    if( ( LoRaMacConfirmQueueGetStatusCmn( ) == LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT ) ||
 800b90c:	2b02      	cmp	r3, #2
 800b90e:	d11e      	bne.n	800b94e <LoRaMacCheckForTxTimeout+0x56>
    {
        // Stop transmit cycle due to tx timeout
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800b910:	4a11      	ldr	r2, [pc, #68]	; (800b958 <LoRaMacCheckForTxTimeout+0x60>)
 800b912:	23d5      	movs	r3, #213	; 0xd5
 800b914:	009b      	lsls	r3, r3, #2
 800b916:	58d3      	ldr	r3, [r2, r3]
 800b918:	2202      	movs	r2, #2
 800b91a:	4393      	bics	r3, r2
 800b91c:	0019      	movs	r1, r3
 800b91e:	4a0e      	ldr	r2, [pc, #56]	; (800b958 <LoRaMacCheckForTxTimeout+0x60>)
 800b920:	23d5      	movs	r3, #213	; 0xd5
 800b922:	009b      	lsls	r3, r3, #2
 800b924:	50d1      	str	r1, [r2, r3]
        MacCtx.McpsConfirm.NbRetries = MacCtx.NvmCtx->AckTimeoutRetriesCounter;
 800b926:	4a0c      	ldr	r2, [pc, #48]	; (800b958 <LoRaMacCheckForTxTimeout+0x60>)
 800b928:	238e      	movs	r3, #142	; 0x8e
 800b92a:	00db      	lsls	r3, r3, #3
 800b92c:	58d3      	ldr	r3, [r2, r3]
 800b92e:	4a0c      	ldr	r2, [pc, #48]	; (800b960 <LoRaMacCheckForTxTimeout+0x68>)
 800b930:	5c99      	ldrb	r1, [r3, r2]
 800b932:	4b09      	ldr	r3, [pc, #36]	; (800b958 <LoRaMacCheckForTxTimeout+0x60>)
 800b934:	4a0b      	ldr	r2, [pc, #44]	; (800b964 <LoRaMacCheckForTxTimeout+0x6c>)
 800b936:	5499      	strb	r1, [r3, r2]
        MacCtx.McpsConfirm.AckReceived = false;
 800b938:	4a07      	ldr	r2, [pc, #28]	; (800b958 <LoRaMacCheckForTxTimeout+0x60>)
 800b93a:	2386      	movs	r3, #134	; 0x86
 800b93c:	00db      	lsls	r3, r3, #3
 800b93e:	2100      	movs	r1, #0
 800b940:	54d1      	strb	r1, [r2, r3]
        MacCtx.McpsConfirm.TxTimeOnAir = 0;
 800b942:	4b05      	ldr	r3, [pc, #20]	; (800b958 <LoRaMacCheckForTxTimeout+0x60>)
 800b944:	4a08      	ldr	r2, [pc, #32]	; (800b968 <LoRaMacCheckForTxTimeout+0x70>)
 800b946:	2100      	movs	r1, #0
 800b948:	5099      	str	r1, [r3, r2]
        return 0x01;
 800b94a:	2301      	movs	r3, #1
 800b94c:	e000      	b.n	800b950 <LoRaMacCheckForTxTimeout+0x58>
    }
    return 0x00;
 800b94e:	2300      	movs	r3, #0
}
 800b950:	0018      	movs	r0, r3
 800b952:	46bd      	mov	sp, r7
 800b954:	bd80      	pop	{r7, pc}
 800b956:	46c0      	nop			; (mov r8, r8)
 800b958:	20000708 	.word	0x20000708
 800b95c:	0000042d 	.word	0x0000042d
 800b960:	00000217 	.word	0x00000217
 800b964:	00000431 	.word	0x00000431
 800b968:	00000434 	.word	0x00000434

0800b96c <LoRaMacCheckForBeaconAcquisition>:

static uint8_t LoRaMacCheckForBeaconAcquisition( void )
{
 800b96c:	b580      	push	{r7, lr}
 800b96e:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800b970:	200b      	movs	r0, #11
 800b972:	f004 ffb7 	bl	80108e4 <LoRaMacConfirmQueueIsCmdActive>
 800b976:	1e03      	subs	r3, r0, #0
 800b978:	d01c      	beq.n	800b9b4 <LoRaMacCheckForBeaconAcquisition+0x48>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 800b97a:	4b10      	ldr	r3, [pc, #64]	; (800b9bc <LoRaMacCheckForBeaconAcquisition+0x50>)
 800b97c:	4a10      	ldr	r2, [pc, #64]	; (800b9c0 <LoRaMacCheckForBeaconAcquisition+0x54>)
 800b97e:	5c9b      	ldrb	r3, [r3, r2]
 800b980:	2201      	movs	r2, #1
 800b982:	4013      	ands	r3, r2
 800b984:	b2db      	uxtb	r3, r3
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800b986:	2b00      	cmp	r3, #0
 800b988:	d114      	bne.n	800b9b4 <LoRaMacCheckForBeaconAcquisition+0x48>
    {
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800b98a:	4b0c      	ldr	r3, [pc, #48]	; (800b9bc <LoRaMacCheckForBeaconAcquisition+0x50>)
 800b98c:	4a0c      	ldr	r2, [pc, #48]	; (800b9c0 <LoRaMacCheckForBeaconAcquisition+0x54>)
 800b98e:	5c9b      	ldrb	r3, [r3, r2]
 800b990:	2204      	movs	r2, #4
 800b992:	4013      	ands	r3, r2
 800b994:	b2db      	uxtb	r3, r3
 800b996:	2b00      	cmp	r3, #0
 800b998:	d00c      	beq.n	800b9b4 <LoRaMacCheckForBeaconAcquisition+0x48>
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800b99a:	4a08      	ldr	r2, [pc, #32]	; (800b9bc <LoRaMacCheckForBeaconAcquisition+0x50>)
 800b99c:	23d5      	movs	r3, #213	; 0xd5
 800b99e:	009b      	lsls	r3, r3, #2
 800b9a0:	58d3      	ldr	r3, [r2, r3]
 800b9a2:	2202      	movs	r2, #2
 800b9a4:	4393      	bics	r3, r2
 800b9a6:	0019      	movs	r1, r3
 800b9a8:	4a04      	ldr	r2, [pc, #16]	; (800b9bc <LoRaMacCheckForBeaconAcquisition+0x50>)
 800b9aa:	23d5      	movs	r3, #213	; 0xd5
 800b9ac:	009b      	lsls	r3, r3, #2
 800b9ae:	50d1      	str	r1, [r2, r3]
            return 0x01;
 800b9b0:	2301      	movs	r3, #1
 800b9b2:	e000      	b.n	800b9b6 <LoRaMacCheckForBeaconAcquisition+0x4a>
        }
    }
    return 0x00;
 800b9b4:	2300      	movs	r3, #0
}
 800b9b6:	0018      	movs	r0, r3
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	bd80      	pop	{r7, pc}
 800b9bc:	20000708 	.word	0x20000708
 800b9c0:	0000046d 	.word	0x0000046d

0800b9c4 <LoRaMacCheckForRxAbort>:

static void LoRaMacCheckForRxAbort( void )
{
 800b9c4:	b580      	push	{r7, lr}
 800b9c6:	af00      	add	r7, sp, #0
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 800b9c8:	4a0f      	ldr	r2, [pc, #60]	; (800ba08 <LoRaMacCheckForRxAbort+0x44>)
 800b9ca:	23d5      	movs	r3, #213	; 0xd5
 800b9cc:	009b      	lsls	r3, r3, #2
 800b9ce:	58d3      	ldr	r3, [r2, r3]
 800b9d0:	2280      	movs	r2, #128	; 0x80
 800b9d2:	4013      	ands	r3, r2
 800b9d4:	d015      	beq.n	800ba02 <LoRaMacCheckForRxAbort+0x3e>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 800b9d6:	4a0c      	ldr	r2, [pc, #48]	; (800ba08 <LoRaMacCheckForRxAbort+0x44>)
 800b9d8:	23d5      	movs	r3, #213	; 0xd5
 800b9da:	009b      	lsls	r3, r3, #2
 800b9dc:	58d3      	ldr	r3, [r2, r3]
 800b9de:	2280      	movs	r2, #128	; 0x80
 800b9e0:	4393      	bics	r3, r2
 800b9e2:	0019      	movs	r1, r3
 800b9e4:	4a08      	ldr	r2, [pc, #32]	; (800ba08 <LoRaMacCheckForRxAbort+0x44>)
 800b9e6:	23d5      	movs	r3, #213	; 0xd5
 800b9e8:	009b      	lsls	r3, r3, #2
 800b9ea:	50d1      	str	r1, [r2, r3]
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800b9ec:	4a06      	ldr	r2, [pc, #24]	; (800ba08 <LoRaMacCheckForRxAbort+0x44>)
 800b9ee:	23d5      	movs	r3, #213	; 0xd5
 800b9f0:	009b      	lsls	r3, r3, #2
 800b9f2:	58d3      	ldr	r3, [r2, r3]
 800b9f4:	2202      	movs	r2, #2
 800b9f6:	4393      	bics	r3, r2
 800b9f8:	0019      	movs	r1, r3
 800b9fa:	4a03      	ldr	r2, [pc, #12]	; (800ba08 <LoRaMacCheckForRxAbort+0x44>)
 800b9fc:	23d5      	movs	r3, #213	; 0xd5
 800b9fe:	009b      	lsls	r3, r3, #2
 800ba00:	50d1      	str	r1, [r2, r3]
    }
}
 800ba02:	46c0      	nop			; (mov r8, r8)
 800ba04:	46bd      	mov	sp, r7
 800ba06:	bd80      	pop	{r7, pc}
 800ba08:	20000708 	.word	0x20000708

0800ba0c <LoRaMacProcess>:


void LoRaMacProcess( void )
{
 800ba0c:	b580      	push	{r7, lr}
 800ba0e:	b082      	sub	sp, #8
 800ba10:	af00      	add	r7, sp, #0
    uint8_t noTx = false;
 800ba12:	1dfb      	adds	r3, r7, #7
 800ba14:	2200      	movs	r2, #0
 800ba16:	701a      	strb	r2, [r3, #0]

    LoRaMacHandleIrqEvents( );
 800ba18:	f7ff fd8a 	bl	800b530 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 800ba1c:	f004 fb0f 	bl	801003e <LoRaMacClassBProcess>

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 800ba20:	4b1a      	ldr	r3, [pc, #104]	; (800ba8c <LoRaMacProcess+0x80>)
 800ba22:	4a1b      	ldr	r2, [pc, #108]	; (800ba90 <LoRaMacProcess+0x84>)
 800ba24:	5c9b      	ldrb	r3, [r3, r2]
 800ba26:	2210      	movs	r2, #16
 800ba28:	4013      	ands	r3, r2
 800ba2a:	b2db      	uxtb	r3, r3
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d027      	beq.n	800ba80 <LoRaMacProcess+0x74>
    {
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 800ba30:	2000      	movs	r0, #0
 800ba32:	f7ff fdd9 	bl	800b5e8 <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 800ba36:	f7ff ffc5 	bl	800b9c4 <LoRaMacCheckForRxAbort>

        // An error occurs during transmitting
        if( IsRequestPending( ) > 0 )
 800ba3a:	f002 fb7b 	bl	800e134 <IsRequestPending>
 800ba3e:	1e03      	subs	r3, r0, #0
 800ba40:	d011      	beq.n	800ba66 <LoRaMacProcess+0x5a>
        {
            noTx |= LoRaMacCheckForTxTimeout( );
 800ba42:	f7ff ff59 	bl	800b8f8 <LoRaMacCheckForTxTimeout>
 800ba46:	0003      	movs	r3, r0
 800ba48:	0019      	movs	r1, r3
 800ba4a:	1dfb      	adds	r3, r7, #7
 800ba4c:	1dfa      	adds	r2, r7, #7
 800ba4e:	7812      	ldrb	r2, [r2, #0]
 800ba50:	430a      	orrs	r2, r1
 800ba52:	701a      	strb	r2, [r3, #0]
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 800ba54:	f7ff ff8a 	bl	800b96c <LoRaMacCheckForBeaconAcquisition>
 800ba58:	0003      	movs	r3, r0
 800ba5a:	0019      	movs	r1, r3
 800ba5c:	1dfb      	adds	r3, r7, #7
 800ba5e:	1dfa      	adds	r2, r7, #7
 800ba60:	7812      	ldrb	r2, [r2, #0]
 800ba62:	430a      	orrs	r2, r1
 800ba64:	701a      	strb	r2, [r3, #0]
        }

        if( noTx == 0x00 )
 800ba66:	1dfb      	adds	r3, r7, #7
 800ba68:	781b      	ldrb	r3, [r3, #0]
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d103      	bne.n	800ba76 <LoRaMacProcess+0x6a>
        {
            LoRaMacHandleJoinRequest( );
 800ba6e:	f7ff ff13 	bl	800b898 <LoRaMacHandleJoinRequest>
            LoRaMacHandleMcpsRequest( );
 800ba72:	f7ff fe99 	bl	800b7a8 <LoRaMacHandleMcpsRequest>
        }
        LoRaMacHandleRequestEvents( );
 800ba76:	f7ff fdcb 	bl	800b610 <LoRaMacHandleRequestEvents>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800ba7a:	2001      	movs	r0, #1
 800ba7c:	f7ff fdb4 	bl	800b5e8 <LoRaMacEnableRequests>
    }
    LoRaMacHandleIndicationEvents( );
 800ba80:	f7ff fe2c 	bl	800b6dc <LoRaMacHandleIndicationEvents>
}
 800ba84:	46c0      	nop			; (mov r8, r8)
 800ba86:	46bd      	mov	sp, r7
 800ba88:	b002      	add	sp, #8
 800ba8a:	bd80      	pop	{r7, pc}
 800ba8c:	20000708 	.word	0x20000708
 800ba90:	0000046d 	.word	0x0000046d

0800ba94 <OnTxDelayedTimerEvent>:

static void OnTxDelayedTimerEvent( void* context )
{
 800ba94:	b580      	push	{r7, lr}
 800ba96:	b082      	sub	sp, #8
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.TxDelayedTimer );
 800ba9c:	4b1b      	ldr	r3, [pc, #108]	; (800bb0c <OnTxDelayedTimerEvent+0x78>)
 800ba9e:	0018      	movs	r0, r3
 800baa0:	f009 ff16 	bl	80158d0 <TimerStop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800baa4:	4a1a      	ldr	r2, [pc, #104]	; (800bb10 <OnTxDelayedTimerEvent+0x7c>)
 800baa6:	23d5      	movs	r3, #213	; 0xd5
 800baa8:	009b      	lsls	r3, r3, #2
 800baaa:	58d3      	ldr	r3, [r2, r3]
 800baac:	2220      	movs	r2, #32
 800baae:	4393      	bics	r3, r2
 800bab0:	0019      	movs	r1, r3
 800bab2:	4a17      	ldr	r2, [pc, #92]	; (800bb10 <OnTxDelayedTimerEvent+0x7c>)
 800bab4:	23d5      	movs	r3, #213	; 0xd5
 800bab6:	009b      	lsls	r3, r3, #2
 800bab8:	50d1      	str	r1, [r2, r3]

    // Schedule frame, allow delayed frame transmissions
    switch( ScheduleTx( true ) )
 800baba:	2001      	movs	r0, #1
 800babc:	f001 fa4a 	bl	800cf54 <ScheduleTx>
 800bac0:	1e03      	subs	r3, r0, #0
 800bac2:	d01e      	beq.n	800bb02 <OnTxDelayedTimerEvent+0x6e>
 800bac4:	2b0b      	cmp	r3, #11
 800bac6:	d01c      	beq.n	800bb02 <OnTxDelayedTimerEvent+0x6e>
            break;
        }
        default:
        {
            // Stop retransmission attempt
            MacCtx.McpsConfirm.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800bac8:	4a11      	ldr	r2, [pc, #68]	; (800bb10 <OnTxDelayedTimerEvent+0x7c>)
 800baca:	238e      	movs	r3, #142	; 0x8e
 800bacc:	00db      	lsls	r3, r3, #3
 800bace:	58d3      	ldr	r3, [r2, r3]
 800bad0:	22d5      	movs	r2, #213	; 0xd5
 800bad2:	569b      	ldrsb	r3, [r3, r2]
 800bad4:	b2d9      	uxtb	r1, r3
 800bad6:	4b0e      	ldr	r3, [pc, #56]	; (800bb10 <OnTxDelayedTimerEvent+0x7c>)
 800bad8:	4a0e      	ldr	r2, [pc, #56]	; (800bb14 <OnTxDelayedTimerEvent+0x80>)
 800bada:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsConfirm.NbRetries = MacCtx.NvmCtx->AckTimeoutRetriesCounter;
 800badc:	4a0c      	ldr	r2, [pc, #48]	; (800bb10 <OnTxDelayedTimerEvent+0x7c>)
 800bade:	238e      	movs	r3, #142	; 0x8e
 800bae0:	00db      	lsls	r3, r3, #3
 800bae2:	58d3      	ldr	r3, [r2, r3]
 800bae4:	4a0c      	ldr	r2, [pc, #48]	; (800bb18 <OnTxDelayedTimerEvent+0x84>)
 800bae6:	5c99      	ldrb	r1, [r3, r2]
 800bae8:	4b09      	ldr	r3, [pc, #36]	; (800bb10 <OnTxDelayedTimerEvent+0x7c>)
 800baea:	4a0c      	ldr	r2, [pc, #48]	; (800bb1c <OnTxDelayedTimerEvent+0x88>)
 800baec:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 800baee:	4b08      	ldr	r3, [pc, #32]	; (800bb10 <OnTxDelayedTimerEvent+0x7c>)
 800baf0:	4a0b      	ldr	r2, [pc, #44]	; (800bb20 <OnTxDelayedTimerEvent+0x8c>)
 800baf2:	2109      	movs	r1, #9
 800baf4:	5499      	strb	r1, [r3, r2]
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 800baf6:	2009      	movs	r0, #9
 800baf8:	f004 feb8 	bl	801086c <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 800bafc:	f002 f9b8 	bl	800de70 <StopRetransmission>
            break;
 800bb00:	e000      	b.n	800bb04 <OnTxDelayedTimerEvent+0x70>
            break;
 800bb02:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 800bb04:	46c0      	nop			; (mov r8, r8)
 800bb06:	46bd      	mov	sp, r7
 800bb08:	b002      	add	sp, #8
 800bb0a:	bd80      	pop	{r7, pc}
 800bb0c:	20000a84 	.word	0x20000a84
 800bb10:	20000708 	.word	0x20000708
 800bb14:	0000042e 	.word	0x0000042e
 800bb18:	00000217 	.word	0x00000217
 800bb1c:	00000431 	.word	0x00000431
 800bb20:	0000042d 	.word	0x0000042d

0800bb24 <OnRxWindow1TimerEvent>:

static void OnRxWindow1TimerEvent( void* context )
{
 800bb24:	b580      	push	{r7, lr}
 800bb26:	b082      	sub	sp, #8
 800bb28:	af00      	add	r7, sp, #0
 800bb2a:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.RxWindowTimer1 );
 800bb2c:	4b30      	ldr	r3, [pc, #192]	; (800bbf0 <OnRxWindow1TimerEvent+0xcc>)
 800bb2e:	0018      	movs	r0, r3
 800bb30:	f009 fece 	bl	80158d0 <TimerStop>
    MacCtx.RxSlot = RX_SLOT_WIN_1;
 800bb34:	4b2f      	ldr	r3, [pc, #188]	; (800bbf4 <OnRxWindow1TimerEvent+0xd0>)
 800bb36:	4a30      	ldr	r2, [pc, #192]	; (800bbf8 <OnRxWindow1TimerEvent+0xd4>)
 800bb38:	2100      	movs	r1, #0
 800bb3a:	5499      	strb	r1, [r3, r2]

    MacCtx.RxWindow1Config.Channel = MacCtx.NvmCtx->Channel;
 800bb3c:	4a2d      	ldr	r2, [pc, #180]	; (800bbf4 <OnRxWindow1TimerEvent+0xd0>)
 800bb3e:	238e      	movs	r3, #142	; 0x8e
 800bb40:	00db      	lsls	r3, r3, #3
 800bb42:	58d2      	ldr	r2, [r2, r3]
 800bb44:	2314      	movs	r3, #20
 800bb46:	33ff      	adds	r3, #255	; 0xff
 800bb48:	5cd1      	ldrb	r1, [r2, r3]
 800bb4a:	4a2a      	ldr	r2, [pc, #168]	; (800bbf4 <OnRxWindow1TimerEvent+0xd0>)
 800bb4c:	23f3      	movs	r3, #243	; 0xf3
 800bb4e:	009b      	lsls	r3, r3, #2
 800bb50:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindow1Config.DrOffset = MacCtx.NvmCtx->MacParams.Rx1DrOffset;
 800bb52:	4a28      	ldr	r2, [pc, #160]	; (800bbf4 <OnRxWindow1TimerEvent+0xd0>)
 800bb54:	238e      	movs	r3, #142	; 0x8e
 800bb56:	00db      	lsls	r3, r3, #3
 800bb58:	58d3      	ldr	r3, [r2, r3]
 800bb5a:	22f5      	movs	r2, #245	; 0xf5
 800bb5c:	5c9b      	ldrb	r3, [r3, r2]
 800bb5e:	b259      	sxtb	r1, r3
 800bb60:	4b24      	ldr	r3, [pc, #144]	; (800bbf4 <OnRxWindow1TimerEvent+0xd0>)
 800bb62:	4a26      	ldr	r2, [pc, #152]	; (800bbfc <OnRxWindow1TimerEvent+0xd8>)
 800bb64:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow1Config.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800bb66:	4a23      	ldr	r2, [pc, #140]	; (800bbf4 <OnRxWindow1TimerEvent+0xd0>)
 800bb68:	238e      	movs	r3, #142	; 0x8e
 800bb6a:	00db      	lsls	r3, r3, #3
 800bb6c:	58d2      	ldr	r2, [r2, r3]
 800bb6e:	2302      	movs	r3, #2
 800bb70:	33ff      	adds	r3, #255	; 0xff
 800bb72:	5cd1      	ldrb	r1, [r2, r3]
 800bb74:	4a1f      	ldr	r2, [pc, #124]	; (800bbf4 <OnRxWindow1TimerEvent+0xd0>)
 800bb76:	23f7      	movs	r3, #247	; 0xf7
 800bb78:	009b      	lsls	r3, r3, #2
 800bb7a:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindow1Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 800bb7c:	4a1d      	ldr	r2, [pc, #116]	; (800bbf4 <OnRxWindow1TimerEvent+0xd0>)
 800bb7e:	238e      	movs	r3, #142	; 0x8e
 800bb80:	00db      	lsls	r3, r3, #3
 800bb82:	58d2      	ldr	r2, [r2, r3]
 800bb84:	2316      	movs	r3, #22
 800bb86:	33ff      	adds	r3, #255	; 0xff
 800bb88:	5cd1      	ldrb	r1, [r2, r3]
 800bb8a:	4b1a      	ldr	r3, [pc, #104]	; (800bbf4 <OnRxWindow1TimerEvent+0xd0>)
 800bb8c:	4a1c      	ldr	r2, [pc, #112]	; (800bc00 <OnRxWindow1TimerEvent+0xdc>)
 800bb8e:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow1Config.RxContinuous = false;
 800bb90:	4b18      	ldr	r3, [pc, #96]	; (800bbf4 <OnRxWindow1TimerEvent+0xd0>)
 800bb92:	4a1c      	ldr	r2, [pc, #112]	; (800bc04 <OnRxWindow1TimerEvent+0xe0>)
 800bb94:	2100      	movs	r1, #0
 800bb96:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow1Config.RxSlot = MacCtx.RxSlot;
 800bb98:	4b16      	ldr	r3, [pc, #88]	; (800bbf4 <OnRxWindow1TimerEvent+0xd0>)
 800bb9a:	4a17      	ldr	r2, [pc, #92]	; (800bbf8 <OnRxWindow1TimerEvent+0xd4>)
 800bb9c:	5c99      	ldrb	r1, [r3, r2]
 800bb9e:	4b15      	ldr	r3, [pc, #84]	; (800bbf4 <OnRxWindow1TimerEvent+0xd0>)
 800bba0:	4a19      	ldr	r2, [pc, #100]	; (800bc08 <OnRxWindow1TimerEvent+0xe4>)
 800bba2:	5499      	strb	r1, [r3, r2]

    if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 800bba4:	4a13      	ldr	r2, [pc, #76]	; (800bbf4 <OnRxWindow1TimerEvent+0xd0>)
 800bba6:	238e      	movs	r3, #142	; 0x8e
 800bba8:	00db      	lsls	r3, r3, #3
 800bbaa:	58d3      	ldr	r3, [r2, r3]
 800bbac:	22c8      	movs	r2, #200	; 0xc8
 800bbae:	5c9b      	ldrb	r3, [r3, r2]
 800bbb0:	2b02      	cmp	r3, #2
 800bbb2:	d102      	bne.n	800bbba <OnRxWindow1TimerEvent+0x96>
    {
        Radio.Standby( );
 800bbb4:	4b15      	ldr	r3, [pc, #84]	; (800bc0c <OnRxWindow1TimerEvent+0xe8>)
 800bbb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbb8:	4798      	blx	r3
    }

    RegionRxConfig( MacCtx.NvmCtx->Region, &MacCtx.RxWindow1Config, ( int8_t* ) &MacCtx.McpsIndication.RxDatarate );
 800bbba:	4a0e      	ldr	r2, [pc, #56]	; (800bbf4 <OnRxWindow1TimerEvent+0xd0>)
 800bbbc:	238e      	movs	r3, #142	; 0x8e
 800bbbe:	00db      	lsls	r3, r3, #3
 800bbc0:	58d3      	ldr	r3, [r2, r3]
 800bbc2:	781b      	ldrb	r3, [r3, #0]
 800bbc4:	4a12      	ldr	r2, [pc, #72]	; (800bc10 <OnRxWindow1TimerEvent+0xec>)
 800bbc6:	4913      	ldr	r1, [pc, #76]	; (800bc14 <OnRxWindow1TimerEvent+0xf0>)
 800bbc8:	0018      	movs	r0, r3
 800bbca:	f007 fa27 	bl	801301c <RegionRxConfig>
    RxWindowSetup( MacCtx.RxWindow1Config.RxContinuous, MacCtx.NvmCtx->MacParams.MaxRxWindow );
 800bbce:	4b09      	ldr	r3, [pc, #36]	; (800bbf4 <OnRxWindow1TimerEvent+0xd0>)
 800bbd0:	4a0c      	ldr	r2, [pc, #48]	; (800bc04 <OnRxWindow1TimerEvent+0xe0>)
 800bbd2:	5c98      	ldrb	r0, [r3, r2]
 800bbd4:	4a07      	ldr	r2, [pc, #28]	; (800bbf4 <OnRxWindow1TimerEvent+0xd0>)
 800bbd6:	238e      	movs	r3, #142	; 0x8e
 800bbd8:	00db      	lsls	r3, r3, #3
 800bbda:	58d3      	ldr	r3, [r2, r3]
 800bbdc:	22e0      	movs	r2, #224	; 0xe0
 800bbde:	589b      	ldr	r3, [r3, r2]
 800bbe0:	0019      	movs	r1, r3
 800bbe2:	f000 f901 	bl	800bde8 <RxWindowSetup>
}
 800bbe6:	46c0      	nop			; (mov r8, r8)
 800bbe8:	46bd      	mov	sp, r7
 800bbea:	b002      	add	sp, #8
 800bbec:	bd80      	pop	{r7, pc}
 800bbee:	46c0      	nop			; (mov r8, r8)
 800bbf0:	20000a9c 	.word	0x20000a9c
 800bbf4:	20000708 	.word	0x20000708
 800bbf8:	0000046c 	.word	0x0000046c
 800bbfc:	000003cf 	.word	0x000003cf
 800bc00:	000003dd 	.word	0x000003dd
 800bc04:	000003de 	.word	0x000003de
 800bc08:	000003df 	.word	0x000003df
 800bc0c:	08021b54 	.word	0x08021b54
 800bc10:	20000b1c 	.word	0x20000b1c
 800bc14:	20000ad4 	.word	0x20000ad4

0800bc18 <OnRxWindow2TimerEvent>:

static void OnRxWindow2TimerEvent( void* context )
{
 800bc18:	b580      	push	{r7, lr}
 800bc1a:	b082      	sub	sp, #8
 800bc1c:	af00      	add	r7, sp, #0
 800bc1e:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.RxWindowTimer2 );
 800bc20:	4b31      	ldr	r3, [pc, #196]	; (800bce8 <OnRxWindow2TimerEvent+0xd0>)
 800bc22:	0018      	movs	r0, r3
 800bc24:	f009 fe54 	bl	80158d0 <TimerStop>

    MacCtx.RxWindow2Config.Channel = MacCtx.NvmCtx->Channel;
 800bc28:	4a30      	ldr	r2, [pc, #192]	; (800bcec <OnRxWindow2TimerEvent+0xd4>)
 800bc2a:	238e      	movs	r3, #142	; 0x8e
 800bc2c:	00db      	lsls	r3, r3, #3
 800bc2e:	58d2      	ldr	r2, [r2, r3]
 800bc30:	2314      	movs	r3, #20
 800bc32:	33ff      	adds	r3, #255	; 0xff
 800bc34:	5cd1      	ldrb	r1, [r2, r3]
 800bc36:	4a2d      	ldr	r2, [pc, #180]	; (800bcec <OnRxWindow2TimerEvent+0xd4>)
 800bc38:	23f8      	movs	r3, #248	; 0xf8
 800bc3a:	009b      	lsls	r3, r3, #2
 800bc3c:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindow2Config.Frequency = MacCtx.NvmCtx->MacParams.Rx2Channel.Frequency;
 800bc3e:	4a2b      	ldr	r2, [pc, #172]	; (800bcec <OnRxWindow2TimerEvent+0xd4>)
 800bc40:	238e      	movs	r3, #142	; 0x8e
 800bc42:	00db      	lsls	r3, r3, #3
 800bc44:	58d3      	ldr	r3, [r2, r3]
 800bc46:	22f8      	movs	r2, #248	; 0xf8
 800bc48:	5899      	ldr	r1, [r3, r2]
 800bc4a:	4a28      	ldr	r2, [pc, #160]	; (800bcec <OnRxWindow2TimerEvent+0xd4>)
 800bc4c:	23f9      	movs	r3, #249	; 0xf9
 800bc4e:	009b      	lsls	r3, r3, #2
 800bc50:	50d1      	str	r1, [r2, r3]
    MacCtx.RxWindow2Config.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800bc52:	4a26      	ldr	r2, [pc, #152]	; (800bcec <OnRxWindow2TimerEvent+0xd4>)
 800bc54:	238e      	movs	r3, #142	; 0x8e
 800bc56:	00db      	lsls	r3, r3, #3
 800bc58:	58d2      	ldr	r2, [r2, r3]
 800bc5a:	2302      	movs	r3, #2
 800bc5c:	33ff      	adds	r3, #255	; 0xff
 800bc5e:	5cd1      	ldrb	r1, [r2, r3]
 800bc60:	4a22      	ldr	r2, [pc, #136]	; (800bcec <OnRxWindow2TimerEvent+0xd4>)
 800bc62:	23fc      	movs	r3, #252	; 0xfc
 800bc64:	009b      	lsls	r3, r3, #2
 800bc66:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindow2Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 800bc68:	4a20      	ldr	r2, [pc, #128]	; (800bcec <OnRxWindow2TimerEvent+0xd4>)
 800bc6a:	238e      	movs	r3, #142	; 0x8e
 800bc6c:	00db      	lsls	r3, r3, #3
 800bc6e:	58d2      	ldr	r2, [r2, r3]
 800bc70:	2316      	movs	r3, #22
 800bc72:	33ff      	adds	r3, #255	; 0xff
 800bc74:	5cd1      	ldrb	r1, [r2, r3]
 800bc76:	4b1d      	ldr	r3, [pc, #116]	; (800bcec <OnRxWindow2TimerEvent+0xd4>)
 800bc78:	4a1d      	ldr	r2, [pc, #116]	; (800bcf0 <OnRxWindow2TimerEvent+0xd8>)
 800bc7a:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800bc7c:	4b1b      	ldr	r3, [pc, #108]	; (800bcec <OnRxWindow2TimerEvent+0xd4>)
 800bc7e:	4a1d      	ldr	r2, [pc, #116]	; (800bcf4 <OnRxWindow2TimerEvent+0xdc>)
 800bc80:	2101      	movs	r1, #1
 800bc82:	5499      	strb	r1, [r3, r2]

    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 800bc84:	4a19      	ldr	r2, [pc, #100]	; (800bcec <OnRxWindow2TimerEvent+0xd4>)
 800bc86:	238e      	movs	r3, #142	; 0x8e
 800bc88:	00db      	lsls	r3, r3, #3
 800bc8a:	58d3      	ldr	r3, [r2, r3]
 800bc8c:	22c8      	movs	r2, #200	; 0xc8
 800bc8e:	5c9b      	ldrb	r3, [r3, r2]
 800bc90:	2b02      	cmp	r3, #2
 800bc92:	d004      	beq.n	800bc9e <OnRxWindow2TimerEvent+0x86>
    {
        MacCtx.RxWindow2Config.RxContinuous = false;
 800bc94:	4b15      	ldr	r3, [pc, #84]	; (800bcec <OnRxWindow2TimerEvent+0xd4>)
 800bc96:	4a18      	ldr	r2, [pc, #96]	; (800bcf8 <OnRxWindow2TimerEvent+0xe0>)
 800bc98:	2100      	movs	r1, #0
 800bc9a:	5499      	strb	r1, [r3, r2]
 800bc9c:	e003      	b.n	800bca6 <OnRxWindow2TimerEvent+0x8e>
    }
    else
    {
        // Setup continuous listening for class c
        MacCtx.RxWindow2Config.RxContinuous = true;
 800bc9e:	4b13      	ldr	r3, [pc, #76]	; (800bcec <OnRxWindow2TimerEvent+0xd4>)
 800bca0:	4a15      	ldr	r2, [pc, #84]	; (800bcf8 <OnRxWindow2TimerEvent+0xe0>)
 800bca2:	2101      	movs	r1, #1
 800bca4:	5499      	strb	r1, [r3, r2]
    }

    if( RegionRxConfig( MacCtx.NvmCtx->Region, &MacCtx.RxWindow2Config, ( int8_t* ) &MacCtx.McpsIndication.RxDatarate ) == true )
 800bca6:	4a11      	ldr	r2, [pc, #68]	; (800bcec <OnRxWindow2TimerEvent+0xd4>)
 800bca8:	238e      	movs	r3, #142	; 0x8e
 800bcaa:	00db      	lsls	r3, r3, #3
 800bcac:	58d3      	ldr	r3, [r2, r3]
 800bcae:	781b      	ldrb	r3, [r3, #0]
 800bcb0:	4a12      	ldr	r2, [pc, #72]	; (800bcfc <OnRxWindow2TimerEvent+0xe4>)
 800bcb2:	4913      	ldr	r1, [pc, #76]	; (800bd00 <OnRxWindow2TimerEvent+0xe8>)
 800bcb4:	0018      	movs	r0, r3
 800bcb6:	f007 f9b1 	bl	801301c <RegionRxConfig>
 800bcba:	1e03      	subs	r3, r0, #0
 800bcbc:	d00f      	beq.n	800bcde <OnRxWindow2TimerEvent+0xc6>
    {
        RxWindowSetup( MacCtx.RxWindow2Config.RxContinuous, MacCtx.NvmCtx->MacParams.MaxRxWindow );
 800bcbe:	4b0b      	ldr	r3, [pc, #44]	; (800bcec <OnRxWindow2TimerEvent+0xd4>)
 800bcc0:	4a0d      	ldr	r2, [pc, #52]	; (800bcf8 <OnRxWindow2TimerEvent+0xe0>)
 800bcc2:	5c98      	ldrb	r0, [r3, r2]
 800bcc4:	4a09      	ldr	r2, [pc, #36]	; (800bcec <OnRxWindow2TimerEvent+0xd4>)
 800bcc6:	238e      	movs	r3, #142	; 0x8e
 800bcc8:	00db      	lsls	r3, r3, #3
 800bcca:	58d3      	ldr	r3, [r2, r3]
 800bccc:	22e0      	movs	r2, #224	; 0xe0
 800bcce:	589b      	ldr	r3, [r3, r2]
 800bcd0:	0019      	movs	r1, r3
 800bcd2:	f000 f889 	bl	800bde8 <RxWindowSetup>
        MacCtx.RxSlot = RX_SLOT_WIN_2;
 800bcd6:	4b05      	ldr	r3, [pc, #20]	; (800bcec <OnRxWindow2TimerEvent+0xd4>)
 800bcd8:	4a0a      	ldr	r2, [pc, #40]	; (800bd04 <OnRxWindow2TimerEvent+0xec>)
 800bcda:	2101      	movs	r1, #1
 800bcdc:	5499      	strb	r1, [r3, r2]
    }
}
 800bcde:	46c0      	nop			; (mov r8, r8)
 800bce0:	46bd      	mov	sp, r7
 800bce2:	b002      	add	sp, #8
 800bce4:	bd80      	pop	{r7, pc}
 800bce6:	46c0      	nop			; (mov r8, r8)
 800bce8:	20000ab4 	.word	0x20000ab4
 800bcec:	20000708 	.word	0x20000708
 800bcf0:	000003f1 	.word	0x000003f1
 800bcf4:	000003f3 	.word	0x000003f3
 800bcf8:	000003f2 	.word	0x000003f2
 800bcfc:	20000b1c 	.word	0x20000b1c
 800bd00:	20000ae8 	.word	0x20000ae8
 800bd04:	0000046c 	.word	0x0000046c

0800bd08 <CheckToDisableAckTimeout>:

static void CheckToDisableAckTimeout( bool nodeAckRequested, DeviceClass_t devClass, bool ackReceived )
{
 800bd08:	b590      	push	{r4, r7, lr}
 800bd0a:	b083      	sub	sp, #12
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	0004      	movs	r4, r0
 800bd10:	0008      	movs	r0, r1
 800bd12:	0011      	movs	r1, r2
 800bd14:	1dfb      	adds	r3, r7, #7
 800bd16:	1c22      	adds	r2, r4, #0
 800bd18:	701a      	strb	r2, [r3, #0]
 800bd1a:	1dbb      	adds	r3, r7, #6
 800bd1c:	1c02      	adds	r2, r0, #0
 800bd1e:	701a      	strb	r2, [r3, #0]
 800bd20:	1d7b      	adds	r3, r7, #5
 800bd22:	1c0a      	adds	r2, r1, #0
 800bd24:	701a      	strb	r2, [r3, #0]
    // There are three cases where we need to stop the AckTimeoutTimer:
    if( nodeAckRequested == false )
 800bd26:	1dfb      	adds	r3, r7, #7
 800bd28:	781b      	ldrb	r3, [r3, #0]
 800bd2a:	2201      	movs	r2, #1
 800bd2c:	4053      	eors	r3, r2
 800bd2e:	b2db      	uxtb	r3, r3
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d007      	beq.n	800bd44 <CheckToDisableAckTimeout+0x3c>
    {
        if( devClass == CLASS_C )
 800bd34:	1dbb      	adds	r3, r7, #6
 800bd36:	781b      	ldrb	r3, [r3, #0]
 800bd38:	2b02      	cmp	r3, #2
 800bd3a:	d10a      	bne.n	800bd52 <CheckToDisableAckTimeout+0x4a>
        {// FIRST CASE
            // We have performed an unconfirmed uplink in class c mode
            // and have received a downlink in RX1 or RX2.
            OnAckTimeoutTimerEvent( NULL );
 800bd3c:	2000      	movs	r0, #0
 800bd3e:	f000 f80d 	bl	800bd5c <OnAckTimeoutTimerEvent>
            // We have performed a confirmed uplink and have received a
            // downlink with a valid ACK.
            OnAckTimeoutTimerEvent( NULL );
        }
    }
}
 800bd42:	e006      	b.n	800bd52 <CheckToDisableAckTimeout+0x4a>
        if( ackReceived == 1 )
 800bd44:	1d7b      	adds	r3, r7, #5
 800bd46:	781b      	ldrb	r3, [r3, #0]
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d002      	beq.n	800bd52 <CheckToDisableAckTimeout+0x4a>
            OnAckTimeoutTimerEvent( NULL );
 800bd4c:	2000      	movs	r0, #0
 800bd4e:	f000 f805 	bl	800bd5c <OnAckTimeoutTimerEvent>
}
 800bd52:	46c0      	nop			; (mov r8, r8)
 800bd54:	46bd      	mov	sp, r7
 800bd56:	b003      	add	sp, #12
 800bd58:	bd90      	pop	{r4, r7, pc}
	...

0800bd5c <OnAckTimeoutTimerEvent>:

static void OnAckTimeoutTimerEvent( void* context )
{
 800bd5c:	b580      	push	{r7, lr}
 800bd5e:	b082      	sub	sp, #8
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.AckTimeoutTimer );
 800bd64:	4b1c      	ldr	r3, [pc, #112]	; (800bdd8 <OnAckTimeoutTimerEvent+0x7c>)
 800bd66:	0018      	movs	r0, r3
 800bd68:	f009 fdb2 	bl	80158d0 <TimerStop>

    if( MacCtx.NvmCtx->NodeAckRequested == true )
 800bd6c:	4a1b      	ldr	r2, [pc, #108]	; (800bddc <OnAckTimeoutTimerEvent+0x80>)
 800bd6e:	238e      	movs	r3, #142	; 0x8e
 800bd70:	00db      	lsls	r3, r3, #3
 800bd72:	58d3      	ldr	r3, [r2, r3]
 800bd74:	4a1a      	ldr	r2, [pc, #104]	; (800bde0 <OnAckTimeoutTimerEvent+0x84>)
 800bd76:	5c9b      	ldrb	r3, [r3, r2]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d007      	beq.n	800bd8c <OnAckTimeoutTimerEvent+0x30>
    {
        MacCtx.NvmCtx->AckTimeoutRetry = true;
 800bd7c:	4a17      	ldr	r2, [pc, #92]	; (800bddc <OnAckTimeoutTimerEvent+0x80>)
 800bd7e:	238e      	movs	r3, #142	; 0x8e
 800bd80:	00db      	lsls	r3, r3, #3
 800bd82:	58d2      	ldr	r2, [r2, r3]
 800bd84:	2386      	movs	r3, #134	; 0x86
 800bd86:	009b      	lsls	r3, r3, #2
 800bd88:	2101      	movs	r1, #1
 800bd8a:	54d1      	strb	r1, [r2, r3]
    }
    if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 800bd8c:	4a13      	ldr	r2, [pc, #76]	; (800bddc <OnAckTimeoutTimerEvent+0x80>)
 800bd8e:	238e      	movs	r3, #142	; 0x8e
 800bd90:	00db      	lsls	r3, r3, #3
 800bd92:	58d3      	ldr	r3, [r2, r3]
 800bd94:	22c8      	movs	r2, #200	; 0xc8
 800bd96:	5c9b      	ldrb	r3, [r3, r2]
 800bd98:	2b02      	cmp	r3, #2
 800bd9a:	d105      	bne.n	800bda8 <OnAckTimeoutTimerEvent+0x4c>
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
 800bd9c:	4b0f      	ldr	r3, [pc, #60]	; (800bddc <OnAckTimeoutTimerEvent+0x80>)
 800bd9e:	4a11      	ldr	r2, [pc, #68]	; (800bde4 <OnAckTimeoutTimerEvent+0x88>)
 800bda0:	5c99      	ldrb	r1, [r3, r2]
 800bda2:	2010      	movs	r0, #16
 800bda4:	4301      	orrs	r1, r0
 800bda6:	5499      	strb	r1, [r3, r2]
    }
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800bda8:	4a0c      	ldr	r2, [pc, #48]	; (800bddc <OnAckTimeoutTimerEvent+0x80>)
 800bdaa:	23d7      	movs	r3, #215	; 0xd7
 800bdac:	009b      	lsls	r3, r3, #2
 800bdae:	58d3      	ldr	r3, [r2, r3]
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d00c      	beq.n	800bdce <OnAckTimeoutTimerEvent+0x72>
 800bdb4:	4a09      	ldr	r2, [pc, #36]	; (800bddc <OnAckTimeoutTimerEvent+0x80>)
 800bdb6:	23d7      	movs	r3, #215	; 0xd7
 800bdb8:	009b      	lsls	r3, r3, #2
 800bdba:	58d3      	ldr	r3, [r2, r3]
 800bdbc:	68db      	ldr	r3, [r3, #12]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d005      	beq.n	800bdce <OnAckTimeoutTimerEvent+0x72>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800bdc2:	4a06      	ldr	r2, [pc, #24]	; (800bddc <OnAckTimeoutTimerEvent+0x80>)
 800bdc4:	23d7      	movs	r3, #215	; 0xd7
 800bdc6:	009b      	lsls	r3, r3, #2
 800bdc8:	58d3      	ldr	r3, [r2, r3]
 800bdca:	68db      	ldr	r3, [r3, #12]
 800bdcc:	4798      	blx	r3
    }
}
 800bdce:	46c0      	nop			; (mov r8, r8)
 800bdd0:	46bd      	mov	sp, r7
 800bdd2:	b002      	add	sp, #8
 800bdd4:	bd80      	pop	{r7, pc}
 800bdd6:	46c0      	nop			; (mov r8, r8)
 800bdd8:	20000afc 	.word	0x20000afc
 800bddc:	20000708 	.word	0x20000708
 800bde0:	00000219 	.word	0x00000219
 800bde4:	0000046d 	.word	0x0000046d

0800bde8 <RxWindowSetup>:

static void RxWindowSetup( bool rxContinuous, uint32_t maxRxWindow )
{
 800bde8:	b580      	push	{r7, lr}
 800bdea:	b082      	sub	sp, #8
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	0002      	movs	r2, r0
 800bdf0:	6039      	str	r1, [r7, #0]
 800bdf2:	1dfb      	adds	r3, r7, #7
 800bdf4:	701a      	strb	r2, [r3, #0]
    if( rxContinuous == false )
 800bdf6:	1dfb      	adds	r3, r7, #7
 800bdf8:	781b      	ldrb	r3, [r3, #0]
 800bdfa:	2201      	movs	r2, #1
 800bdfc:	4053      	eors	r3, r2
 800bdfe:	b2db      	uxtb	r3, r3
 800be00:	2b00      	cmp	r3, #0
 800be02:	d005      	beq.n	800be10 <RxWindowSetup+0x28>
    {
        Radio.Rx( maxRxWindow );
 800be04:	4b06      	ldr	r3, [pc, #24]	; (800be20 <RxWindowSetup+0x38>)
 800be06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be08:	683a      	ldr	r2, [r7, #0]
 800be0a:	0010      	movs	r0, r2
 800be0c:	4798      	blx	r3
    }
    else
    {
        Radio.Rx( 0 ); // Continuous mode
    }
}
 800be0e:	e003      	b.n	800be18 <RxWindowSetup+0x30>
        Radio.Rx( 0 ); // Continuous mode
 800be10:	4b03      	ldr	r3, [pc, #12]	; (800be20 <RxWindowSetup+0x38>)
 800be12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be14:	2000      	movs	r0, #0
 800be16:	4798      	blx	r3
}
 800be18:	46c0      	nop			; (mov r8, r8)
 800be1a:	46bd      	mov	sp, r7
 800be1c:	b002      	add	sp, #8
 800be1e:	bd80      	pop	{r7, pc}
 800be20:	08021b54 	.word	0x08021b54

0800be24 <SwitchClass>:

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
 800be24:	b5b0      	push	{r4, r5, r7, lr}
 800be26:	b086      	sub	sp, #24
 800be28:	af02      	add	r7, sp, #8
 800be2a:	0002      	movs	r2, r0
 800be2c:	1dfb      	adds	r3, r7, #7
 800be2e:	701a      	strb	r2, [r3, #0]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800be30:	230f      	movs	r3, #15
 800be32:	18fb      	adds	r3, r7, r3
 800be34:	2203      	movs	r2, #3
 800be36:	701a      	strb	r2, [r3, #0]

    switch( MacCtx.NvmCtx->DeviceClass )
 800be38:	4a4b      	ldr	r2, [pc, #300]	; (800bf68 <SwitchClass+0x144>)
 800be3a:	238e      	movs	r3, #142	; 0x8e
 800be3c:	00db      	lsls	r3, r3, #3
 800be3e:	58d3      	ldr	r3, [r2, r3]
 800be40:	22c8      	movs	r2, #200	; 0xc8
 800be42:	5c9b      	ldrb	r3, [r3, r2]
 800be44:	2b01      	cmp	r3, #1
 800be46:	d058      	beq.n	800befa <SwitchClass+0xd6>
 800be48:	2b02      	cmp	r3, #2
 800be4a:	d06c      	beq.n	800bf26 <SwitchClass+0x102>
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d000      	beq.n	800be52 <SwitchClass+0x2e>
 800be50:	e082      	b.n	800bf58 <SwitchClass+0x134>
    {
        case CLASS_A:
        {
            if( deviceClass == CLASS_B )
 800be52:	1dfb      	adds	r3, r7, #7
 800be54:	781b      	ldrb	r3, [r3, #0]
 800be56:	2b01      	cmp	r3, #1
 800be58:	d114      	bne.n	800be84 <SwitchClass+0x60>
            {
                status = LoRaMacClassBSwitchClass( deviceClass );
 800be5a:	250f      	movs	r5, #15
 800be5c:	197c      	adds	r4, r7, r5
 800be5e:	1dfb      	adds	r3, r7, #7
 800be60:	781b      	ldrb	r3, [r3, #0]
 800be62:	0018      	movs	r0, r3
 800be64:	f004 f893 	bl	800ff8e <LoRaMacClassBSwitchClass>
 800be68:	0003      	movs	r3, r0
 800be6a:	7023      	strb	r3, [r4, #0]
                if( status == LORAMAC_STATUS_OK )
 800be6c:	197b      	adds	r3, r7, r5
 800be6e:	781b      	ldrb	r3, [r3, #0]
 800be70:	2b00      	cmp	r3, #0
 800be72:	d107      	bne.n	800be84 <SwitchClass+0x60>
                {
                    MacCtx.NvmCtx->DeviceClass = deviceClass;
 800be74:	4a3c      	ldr	r2, [pc, #240]	; (800bf68 <SwitchClass+0x144>)
 800be76:	238e      	movs	r3, #142	; 0x8e
 800be78:	00db      	lsls	r3, r3, #3
 800be7a:	58d3      	ldr	r3, [r2, r3]
 800be7c:	1dfa      	adds	r2, r7, #7
 800be7e:	21c8      	movs	r1, #200	; 0xc8
 800be80:	7812      	ldrb	r2, [r2, #0]
 800be82:	545a      	strb	r2, [r3, r1]
                }
            }

            if( deviceClass == CLASS_C )
 800be84:	1dfb      	adds	r3, r7, #7
 800be86:	781b      	ldrb	r3, [r3, #0]
 800be88:	2b02      	cmp	r3, #2
 800be8a:	d160      	bne.n	800bf4e <SwitchClass+0x12a>
            {
                MacCtx.NvmCtx->DeviceClass = deviceClass;
 800be8c:	4a36      	ldr	r2, [pc, #216]	; (800bf68 <SwitchClass+0x144>)
 800be8e:	238e      	movs	r3, #142	; 0x8e
 800be90:	00db      	lsls	r3, r3, #3
 800be92:	58d3      	ldr	r3, [r2, r3]
 800be94:	1dfa      	adds	r2, r7, #7
 800be96:	21c8      	movs	r1, #200	; 0xc8
 800be98:	7812      	ldrb	r2, [r2, #0]
 800be9a:	545a      	strb	r2, [r3, r1]

                // Set the NodeAckRequested indicator to default
                MacCtx.NvmCtx->NodeAckRequested = false;
 800be9c:	4a32      	ldr	r2, [pc, #200]	; (800bf68 <SwitchClass+0x144>)
 800be9e:	238e      	movs	r3, #142	; 0x8e
 800bea0:	00db      	lsls	r3, r3, #3
 800bea2:	58d3      	ldr	r3, [r2, r3]
 800bea4:	4a31      	ldr	r2, [pc, #196]	; (800bf6c <SwitchClass+0x148>)
 800bea6:	2100      	movs	r1, #0
 800bea8:	5499      	strb	r1, [r3, r2]
                // Set the radio into sleep mode in case we are still in RX mode
                Radio.Sleep( );
 800beaa:	4b31      	ldr	r3, [pc, #196]	; (800bf70 <SwitchClass+0x14c>)
 800beac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800beae:	4798      	blx	r3
                // Compute Rx2 windows parameters in case the RX2 datarate has changed
                RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800beb0:	4a2d      	ldr	r2, [pc, #180]	; (800bf68 <SwitchClass+0x144>)
 800beb2:	238e      	movs	r3, #142	; 0x8e
 800beb4:	00db      	lsls	r3, r3, #3
 800beb6:	58d3      	ldr	r3, [r2, r3]
 800beb8:	7818      	ldrb	r0, [r3, #0]
                                                 MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate,
 800beba:	4a2b      	ldr	r2, [pc, #172]	; (800bf68 <SwitchClass+0x144>)
 800bebc:	238e      	movs	r3, #142	; 0x8e
 800bebe:	00db      	lsls	r3, r3, #3
 800bec0:	58d3      	ldr	r3, [r2, r3]
 800bec2:	22fc      	movs	r2, #252	; 0xfc
 800bec4:	5c9b      	ldrb	r3, [r3, r2]
                RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800bec6:	b259      	sxtb	r1, r3
                                                 MacCtx.NvmCtx->MacParams.MinRxSymbols,
 800bec8:	4a27      	ldr	r2, [pc, #156]	; (800bf68 <SwitchClass+0x144>)
 800beca:	238e      	movs	r3, #142	; 0x8e
 800becc:	00db      	lsls	r3, r3, #3
 800bece:	58d3      	ldr	r3, [r2, r3]
                RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800bed0:	22dc      	movs	r2, #220	; 0xdc
 800bed2:	5c9c      	ldrb	r4, [r3, r2]
                                                 MacCtx.NvmCtx->MacParams.SystemMaxRxError,
 800bed4:	4a24      	ldr	r2, [pc, #144]	; (800bf68 <SwitchClass+0x144>)
 800bed6:	238e      	movs	r3, #142	; 0x8e
 800bed8:	00db      	lsls	r3, r3, #3
 800beda:	58d3      	ldr	r3, [r2, r3]
                RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800bedc:	22d8      	movs	r2, #216	; 0xd8
 800bede:	589a      	ldr	r2, [r3, r2]
 800bee0:	4b24      	ldr	r3, [pc, #144]	; (800bf74 <SwitchClass+0x150>)
 800bee2:	9300      	str	r3, [sp, #0]
 800bee4:	0013      	movs	r3, r2
 800bee6:	0022      	movs	r2, r4
 800bee8:	f007 f874 	bl	8012fd4 <RegionComputeRxWindowParameters>
                                                 &MacCtx.RxWindow2Config );
                OpenContinuousRx2Window( );
 800beec:	f001 fb8e 	bl	800d60c <OpenContinuousRx2Window>

                status = LORAMAC_STATUS_OK;
 800bef0:	230f      	movs	r3, #15
 800bef2:	18fb      	adds	r3, r7, r3
 800bef4:	2200      	movs	r2, #0
 800bef6:	701a      	strb	r2, [r3, #0]
            }
            break;
 800bef8:	e029      	b.n	800bf4e <SwitchClass+0x12a>
        }
        case CLASS_B:
        {
            status = LoRaMacClassBSwitchClass( deviceClass );
 800befa:	250f      	movs	r5, #15
 800befc:	197c      	adds	r4, r7, r5
 800befe:	1dfb      	adds	r3, r7, #7
 800bf00:	781b      	ldrb	r3, [r3, #0]
 800bf02:	0018      	movs	r0, r3
 800bf04:	f004 f843 	bl	800ff8e <LoRaMacClassBSwitchClass>
 800bf08:	0003      	movs	r3, r0
 800bf0a:	7023      	strb	r3, [r4, #0]
            if( status == LORAMAC_STATUS_OK )
 800bf0c:	197b      	adds	r3, r7, r5
 800bf0e:	781b      	ldrb	r3, [r3, #0]
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d11e      	bne.n	800bf52 <SwitchClass+0x12e>
            {
                MacCtx.NvmCtx->DeviceClass = deviceClass;
 800bf14:	4a14      	ldr	r2, [pc, #80]	; (800bf68 <SwitchClass+0x144>)
 800bf16:	238e      	movs	r3, #142	; 0x8e
 800bf18:	00db      	lsls	r3, r3, #3
 800bf1a:	58d3      	ldr	r3, [r2, r3]
 800bf1c:	1dfa      	adds	r2, r7, #7
 800bf1e:	21c8      	movs	r1, #200	; 0xc8
 800bf20:	7812      	ldrb	r2, [r2, #0]
 800bf22:	545a      	strb	r2, [r3, r1]
            }
            break;
 800bf24:	e015      	b.n	800bf52 <SwitchClass+0x12e>
        }
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
 800bf26:	1dfb      	adds	r3, r7, #7
 800bf28:	781b      	ldrb	r3, [r3, #0]
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d113      	bne.n	800bf56 <SwitchClass+0x132>
            {
                MacCtx.NvmCtx->DeviceClass = deviceClass;
 800bf2e:	4a0e      	ldr	r2, [pc, #56]	; (800bf68 <SwitchClass+0x144>)
 800bf30:	238e      	movs	r3, #142	; 0x8e
 800bf32:	00db      	lsls	r3, r3, #3
 800bf34:	58d3      	ldr	r3, [r2, r3]
 800bf36:	1dfa      	adds	r2, r7, #7
 800bf38:	21c8      	movs	r1, #200	; 0xc8
 800bf3a:	7812      	ldrb	r2, [r2, #0]
 800bf3c:	545a      	strb	r2, [r3, r1]

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
 800bf3e:	4b0c      	ldr	r3, [pc, #48]	; (800bf70 <SwitchClass+0x14c>)
 800bf40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf42:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
 800bf44:	230f      	movs	r3, #15
 800bf46:	18fb      	adds	r3, r7, r3
 800bf48:	2200      	movs	r2, #0
 800bf4a:	701a      	strb	r2, [r3, #0]
            }
            break;
 800bf4c:	e003      	b.n	800bf56 <SwitchClass+0x132>
            break;
 800bf4e:	46c0      	nop			; (mov r8, r8)
 800bf50:	e002      	b.n	800bf58 <SwitchClass+0x134>
            break;
 800bf52:	46c0      	nop			; (mov r8, r8)
 800bf54:	e000      	b.n	800bf58 <SwitchClass+0x134>
            break;
 800bf56:	46c0      	nop			; (mov r8, r8)
        }
    }

    return status;
 800bf58:	230f      	movs	r3, #15
 800bf5a:	18fb      	adds	r3, r7, r3
 800bf5c:	781b      	ldrb	r3, [r3, #0]
}
 800bf5e:	0018      	movs	r0, r3
 800bf60:	46bd      	mov	sp, r7
 800bf62:	b004      	add	sp, #16
 800bf64:	bdb0      	pop	{r4, r5, r7, pc}
 800bf66:	46c0      	nop			; (mov r8, r8)
 800bf68:	20000708 	.word	0x20000708
 800bf6c:	00000219 	.word	0x00000219
 800bf70:	08021b54 	.word	0x08021b54
 800bf74:	20000ae8 	.word	0x20000ae8

0800bf78 <GetMaxAppPayloadWithoutFOptsLength>:

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 800bf78:	b580      	push	{r7, lr}
 800bf7a:	b084      	sub	sp, #16
 800bf7c:	af00      	add	r7, sp, #0
 800bf7e:	0002      	movs	r2, r0
 800bf80:	1dfb      	adds	r3, r7, #7
 800bf82:	701a      	strb	r2, [r3, #0]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800bf84:	4a1a      	ldr	r2, [pc, #104]	; (800bff0 <GetMaxAppPayloadWithoutFOptsLength+0x78>)
 800bf86:	238e      	movs	r3, #142	; 0x8e
 800bf88:	00db      	lsls	r3, r3, #3
 800bf8a:	58d2      	ldr	r2, [r2, r3]
 800bf8c:	2380      	movs	r3, #128	; 0x80
 800bf8e:	005b      	lsls	r3, r3, #1
 800bf90:	5cd2      	ldrb	r2, [r2, r3]
 800bf92:	210c      	movs	r1, #12
 800bf94:	187b      	adds	r3, r7, r1
 800bf96:	709a      	strb	r2, [r3, #2]
    getPhy.Datarate = datarate;
 800bf98:	187b      	adds	r3, r7, r1
 800bf9a:	1dfa      	adds	r2, r7, #7
 800bf9c:	7812      	ldrb	r2, [r2, #0]
 800bf9e:	705a      	strb	r2, [r3, #1]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 800bfa0:	187b      	adds	r3, r7, r1
 800bfa2:	220c      	movs	r2, #12
 800bfa4:	701a      	strb	r2, [r3, #0]

    // Get the maximum payload length
    if( MacCtx.NvmCtx->RepeaterSupport == true )
 800bfa6:	4a12      	ldr	r2, [pc, #72]	; (800bff0 <GetMaxAppPayloadWithoutFOptsLength+0x78>)
 800bfa8:	238e      	movs	r3, #142	; 0x8e
 800bfaa:	00db      	lsls	r3, r3, #3
 800bfac:	58d2      	ldr	r2, [r2, r3]
 800bfae:	2316      	movs	r3, #22
 800bfb0:	33ff      	adds	r3, #255	; 0xff
 800bfb2:	5cd3      	ldrb	r3, [r2, r3]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d003      	beq.n	800bfc0 <GetMaxAppPayloadWithoutFOptsLength+0x48>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800bfb8:	230c      	movs	r3, #12
 800bfba:	18fb      	adds	r3, r7, r3
 800bfbc:	220d      	movs	r2, #13
 800bfbe:	701a      	strb	r2, [r3, #0]
    }
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800bfc0:	4a0b      	ldr	r2, [pc, #44]	; (800bff0 <GetMaxAppPayloadWithoutFOptsLength+0x78>)
 800bfc2:	238e      	movs	r3, #142	; 0x8e
 800bfc4:	00db      	lsls	r3, r3, #3
 800bfc6:	58d3      	ldr	r3, [r2, r3]
 800bfc8:	781b      	ldrb	r3, [r3, #0]
 800bfca:	220c      	movs	r2, #12
 800bfcc:	18ba      	adds	r2, r7, r2
 800bfce:	0011      	movs	r1, r2
 800bfd0:	0018      	movs	r0, r3
 800bfd2:	f006 ff50 	bl	8012e76 <RegionGetPhyParam>
 800bfd6:	0003      	movs	r3, r0
 800bfd8:	001a      	movs	r2, r3
 800bfda:	2108      	movs	r1, #8
 800bfdc:	187b      	adds	r3, r7, r1
 800bfde:	601a      	str	r2, [r3, #0]

    return phyParam.Value;
 800bfe0:	187b      	adds	r3, r7, r1
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	b2db      	uxtb	r3, r3
}
 800bfe6:	0018      	movs	r0, r3
 800bfe8:	46bd      	mov	sp, r7
 800bfea:	b004      	add	sp, #16
 800bfec:	bd80      	pop	{r7, pc}
 800bfee:	46c0      	nop			; (mov r8, r8)
 800bff0:	20000708 	.word	0x20000708

0800bff4 <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 800bff4:	b5b0      	push	{r4, r5, r7, lr}
 800bff6:	b084      	sub	sp, #16
 800bff8:	af00      	add	r7, sp, #0
 800bffa:	0004      	movs	r4, r0
 800bffc:	0008      	movs	r0, r1
 800bffe:	0011      	movs	r1, r2
 800c000:	1dfb      	adds	r3, r7, #7
 800c002:	1c22      	adds	r2, r4, #0
 800c004:	701a      	strb	r2, [r3, #0]
 800c006:	1dbb      	adds	r3, r7, #6
 800c008:	1c02      	adds	r2, r0, #0
 800c00a:	701a      	strb	r2, [r3, #0]
 800c00c:	1d7b      	adds	r3, r7, #5
 800c00e:	1c0a      	adds	r2, r1, #0
 800c010:	701a      	strb	r2, [r3, #0]
    uint16_t maxN = 0;
 800c012:	200e      	movs	r0, #14
 800c014:	0004      	movs	r4, r0
 800c016:	183b      	adds	r3, r7, r0
 800c018:	2200      	movs	r2, #0
 800c01a:	801a      	strh	r2, [r3, #0]
    uint16_t payloadSize = 0;
 800c01c:	250c      	movs	r5, #12
 800c01e:	197b      	adds	r3, r7, r5
 800c020:	2200      	movs	r2, #0
 800c022:	801a      	strh	r2, [r3, #0]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800c024:	1dbb      	adds	r3, r7, #6
 800c026:	781b      	ldrb	r3, [r3, #0]
 800c028:	b25b      	sxtb	r3, r3
 800c02a:	0018      	movs	r0, r3
 800c02c:	f7ff ffa4 	bl	800bf78 <GetMaxAppPayloadWithoutFOptsLength>
 800c030:	0003      	movs	r3, r0
 800c032:	001a      	movs	r2, r3
 800c034:	0020      	movs	r0, r4
 800c036:	183b      	adds	r3, r7, r0
 800c038:	801a      	strh	r2, [r3, #0]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 800c03a:	1dfb      	adds	r3, r7, #7
 800c03c:	781b      	ldrb	r3, [r3, #0]
 800c03e:	b299      	uxth	r1, r3
 800c040:	1d7b      	adds	r3, r7, #5
 800c042:	781b      	ldrb	r3, [r3, #0]
 800c044:	b29a      	uxth	r2, r3
 800c046:	197b      	adds	r3, r7, r5
 800c048:	188a      	adds	r2, r1, r2
 800c04a:	801a      	strh	r2, [r3, #0]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 800c04c:	197a      	adds	r2, r7, r5
 800c04e:	183b      	adds	r3, r7, r0
 800c050:	8812      	ldrh	r2, [r2, #0]
 800c052:	881b      	ldrh	r3, [r3, #0]
 800c054:	429a      	cmp	r2, r3
 800c056:	d806      	bhi.n	800c066 <ValidatePayloadLength+0x72>
 800c058:	230c      	movs	r3, #12
 800c05a:	18fb      	adds	r3, r7, r3
 800c05c:	881b      	ldrh	r3, [r3, #0]
 800c05e:	2bff      	cmp	r3, #255	; 0xff
 800c060:	d801      	bhi.n	800c066 <ValidatePayloadLength+0x72>
    {
        return true;
 800c062:	2301      	movs	r3, #1
 800c064:	e000      	b.n	800c068 <ValidatePayloadLength+0x74>
    }
    return false;
 800c066:	2300      	movs	r3, #0
}
 800c068:	0018      	movs	r0, r3
 800c06a:	46bd      	mov	sp, r7
 800c06c:	b004      	add	sp, #16
 800c06e:	bdb0      	pop	{r4, r5, r7, pc}

0800c070 <SetMlmeScheduleUplinkIndication>:

static void SetMlmeScheduleUplinkIndication( void )
{
 800c070:	b580      	push	{r7, lr}
 800c072:	af00      	add	r7, sp, #0
    MacCtx.MlmeIndication.MlmeIndication = MLME_SCHEDULE_UPLINK;
 800c074:	4b06      	ldr	r3, [pc, #24]	; (800c090 <SetMlmeScheduleUplinkIndication+0x20>)
 800c076:	4a07      	ldr	r2, [pc, #28]	; (800c094 <SetMlmeScheduleUplinkIndication+0x24>)
 800c078:	2106      	movs	r1, #6
 800c07a:	5499      	strb	r1, [r3, r2]
    MacCtx.MacFlags.Bits.MlmeInd = 1;
 800c07c:	4b04      	ldr	r3, [pc, #16]	; (800c090 <SetMlmeScheduleUplinkIndication+0x20>)
 800c07e:	4a06      	ldr	r2, [pc, #24]	; (800c098 <SetMlmeScheduleUplinkIndication+0x28>)
 800c080:	5c99      	ldrb	r1, [r3, r2]
 800c082:	2008      	movs	r0, #8
 800c084:	4301      	orrs	r1, r0
 800c086:	5499      	strb	r1, [r3, r2]
}
 800c088:	46c0      	nop			; (mov r8, r8)
 800c08a:	46bd      	mov	sp, r7
 800c08c:	bd80      	pop	{r7, pc}
 800c08e:	46c0      	nop			; (mov r8, r8)
 800c090:	20000708 	.word	0x20000708
 800c094:	00000454 	.word	0x00000454
 800c098:	0000046d 	.word	0x0000046d

0800c09c <ProcessMacCommands>:

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
{
 800c09c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c09e:	b0a5      	sub	sp, #148	; 0x94
 800c0a0:	af02      	add	r7, sp, #8
 800c0a2:	6078      	str	r0, [r7, #4]
 800c0a4:	000c      	movs	r4, r1
 800c0a6:	0010      	movs	r0, r2
 800c0a8:	0019      	movs	r1, r3
 800c0aa:	1cfb      	adds	r3, r7, #3
 800c0ac:	1c22      	adds	r2, r4, #0
 800c0ae:	701a      	strb	r2, [r3, #0]
 800c0b0:	1cbb      	adds	r3, r7, #2
 800c0b2:	1c02      	adds	r2, r0, #0
 800c0b4:	701a      	strb	r2, [r3, #0]
 800c0b6:	1c7b      	adds	r3, r7, #1
 800c0b8:	1c0a      	adds	r2, r1, #0
 800c0ba:	701a      	strb	r2, [r3, #0]
    uint8_t status = 0;
 800c0bc:	236b      	movs	r3, #107	; 0x6b
 800c0be:	18fb      	adds	r3, r7, r3
 800c0c0:	2200      	movs	r2, #0
 800c0c2:	701a      	strb	r2, [r3, #0]
    bool adrBlockFound = false;
 800c0c4:	2387      	movs	r3, #135	; 0x87
 800c0c6:	18fb      	adds	r3, r7, r3
 800c0c8:	2200      	movs	r2, #0
 800c0ca:	701a      	strb	r2, [r3, #0]
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800c0cc:	2168      	movs	r1, #104	; 0x68
 800c0ce:	187b      	adds	r3, r7, r1
 800c0d0:	2200      	movs	r2, #0
 800c0d2:	701a      	strb	r2, [r3, #0]
 800c0d4:	187b      	adds	r3, r7, r1
 800c0d6:	2200      	movs	r2, #0
 800c0d8:	705a      	strb	r2, [r3, #1]

    while( macIndex < commandsSize )
 800c0da:	f000 fd7a 	bl	800cbd2 <ProcessMacCommands+0xb36>
    {
        // Decode Frame MAC commands
        switch( payload[macIndex++] )
 800c0de:	1cfb      	adds	r3, r7, #3
 800c0e0:	781b      	ldrb	r3, [r3, #0]
 800c0e2:	1cfa      	adds	r2, r7, #3
 800c0e4:	1c59      	adds	r1, r3, #1
 800c0e6:	7011      	strb	r1, [r2, #0]
 800c0e8:	001a      	movs	r2, r3
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	189b      	adds	r3, r3, r2
 800c0ee:	781b      	ldrb	r3, [r3, #0]
 800c0f0:	2b13      	cmp	r3, #19
 800c0f2:	d901      	bls.n	800c0f8 <ProcessMacCommands+0x5c>
 800c0f4:	f000 fd76 	bl	800cbe4 <ProcessMacCommands+0xb48>
 800c0f8:	009a      	lsls	r2, r3, #2
 800c0fa:	4be3      	ldr	r3, [pc, #908]	; (800c488 <ProcessMacCommands+0x3ec>)
 800c0fc:	18d3      	adds	r3, r2, r3
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	469f      	mov	pc, r3
        {
            case SRV_MAC_LINK_CHECK_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 800c102:	2003      	movs	r0, #3
 800c104:	f004 fbee 	bl	80108e4 <LoRaMacConfirmQueueIsCmdActive>
 800c108:	1e03      	subs	r3, r0, #0
 800c10a:	d01c      	beq.n	800c146 <ProcessMacCommands+0xaa>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 800c10c:	2103      	movs	r1, #3
 800c10e:	2000      	movs	r0, #0
 800c110:	f004 fb5a 	bl	80107c8 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 800c114:	1cfb      	adds	r3, r7, #3
 800c116:	781b      	ldrb	r3, [r3, #0]
 800c118:	1cfa      	adds	r2, r7, #3
 800c11a:	1c59      	adds	r1, r3, #1
 800c11c:	7011      	strb	r1, [r2, #0]
 800c11e:	001a      	movs	r2, r3
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	189b      	adds	r3, r3, r2
 800c124:	7819      	ldrb	r1, [r3, #0]
 800c126:	4ad9      	ldr	r2, [pc, #868]	; (800c48c <ProcessMacCommands+0x3f0>)
 800c128:	2389      	movs	r3, #137	; 0x89
 800c12a:	00db      	lsls	r3, r3, #3
 800c12c:	54d1      	strb	r1, [r2, r3]
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 800c12e:	1cfb      	adds	r3, r7, #3
 800c130:	781b      	ldrb	r3, [r3, #0]
 800c132:	1cfa      	adds	r2, r7, #3
 800c134:	1c59      	adds	r1, r3, #1
 800c136:	7011      	strb	r1, [r2, #0]
 800c138:	001a      	movs	r2, r3
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	189b      	adds	r3, r3, r2
 800c13e:	7819      	ldrb	r1, [r3, #0]
 800c140:	4bd2      	ldr	r3, [pc, #840]	; (800c48c <ProcessMacCommands+0x3f0>)
 800c142:	4ad3      	ldr	r2, [pc, #844]	; (800c490 <ProcessMacCommands+0x3f4>)
 800c144:	5499      	strb	r1, [r3, r2]
 800c146:	2287      	movs	r2, #135	; 0x87
 800c148:	18bb      	adds	r3, r7, r2
 800c14a:	18ba      	adds	r2, r7, r2
 800c14c:	7812      	ldrb	r2, [r2, #0]
 800c14e:	701a      	strb	r2, [r3, #0]
                }
                break;
 800c150:	f000 fd3f 	bl	800cbd2 <ProcessMacCommands+0xb36>
            }
            case SRV_MAC_LINK_ADR_REQ:
            {
                LinkAdrReqParams_t linkAdrReq;
                int8_t linkAdrDatarate = DR_0;
 800c154:	2357      	movs	r3, #87	; 0x57
 800c156:	18fb      	adds	r3, r7, r3
 800c158:	2200      	movs	r2, #0
 800c15a:	701a      	strb	r2, [r3, #0]
                int8_t linkAdrTxPower = TX_POWER_0;
 800c15c:	2356      	movs	r3, #86	; 0x56
 800c15e:	18fb      	adds	r3, r7, r3
 800c160:	2200      	movs	r2, #0
 800c162:	701a      	strb	r2, [r3, #0]
                uint8_t linkAdrNbRep = 0;
 800c164:	2355      	movs	r3, #85	; 0x55
 800c166:	18fb      	adds	r3, r7, r3
 800c168:	2200      	movs	r2, #0
 800c16a:	701a      	strb	r2, [r3, #0]
                uint8_t linkAdrNbBytesParsed = 0;
 800c16c:	2354      	movs	r3, #84	; 0x54
 800c16e:	18fb      	adds	r3, r7, r3
 800c170:	2200      	movs	r2, #0
 800c172:	701a      	strb	r2, [r3, #0]

                if( adrBlockFound == false )
 800c174:	2387      	movs	r3, #135	; 0x87
 800c176:	18fb      	adds	r3, r7, r3
 800c178:	781b      	ldrb	r3, [r3, #0]
 800c17a:	2201      	movs	r2, #1
 800c17c:	4053      	eors	r3, r2
 800c17e:	b2db      	uxtb	r3, r3
 800c180:	2b00      	cmp	r3, #0
 800c182:	d100      	bne.n	800c186 <ProcessMacCommands+0xea>
 800c184:	e0ae      	b.n	800c2e4 <ProcessMacCommands+0x248>
                {
                    adrBlockFound = true;
 800c186:	2387      	movs	r3, #135	; 0x87
 800c188:	18fb      	adds	r3, r7, r3
 800c18a:	2201      	movs	r2, #1
 800c18c:	701a      	strb	r2, [r3, #0]

                    // Fill parameter structure
                    linkAdrReq.Payload = &payload[macIndex - 1];
 800c18e:	1cfb      	adds	r3, r7, #3
 800c190:	781b      	ldrb	r3, [r3, #0]
 800c192:	3b01      	subs	r3, #1
 800c194:	687a      	ldr	r2, [r7, #4]
 800c196:	18d2      	adds	r2, r2, r3
 800c198:	2158      	movs	r1, #88	; 0x58
 800c19a:	187b      	adds	r3, r7, r1
 800c19c:	605a      	str	r2, [r3, #4]
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 800c19e:	1cba      	adds	r2, r7, #2
 800c1a0:	1cfb      	adds	r3, r7, #3
 800c1a2:	7812      	ldrb	r2, [r2, #0]
 800c1a4:	781b      	ldrb	r3, [r3, #0]
 800c1a6:	1ad3      	subs	r3, r2, r3
 800c1a8:	b2db      	uxtb	r3, r3
 800c1aa:	3301      	adds	r3, #1
 800c1ac:	b2da      	uxtb	r2, r3
 800c1ae:	187b      	adds	r3, r7, r1
 800c1b0:	721a      	strb	r2, [r3, #8]
                    linkAdrReq.AdrEnabled = MacCtx.NvmCtx->AdrCtrlOn;
 800c1b2:	4ab6      	ldr	r2, [pc, #728]	; (800c48c <ProcessMacCommands+0x3f0>)
 800c1b4:	238e      	movs	r3, #142	; 0x8e
 800c1b6:	00db      	lsls	r3, r3, #3
 800c1b8:	58d3      	ldr	r3, [r2, r3]
 800c1ba:	22ca      	movs	r2, #202	; 0xca
 800c1bc:	5c9a      	ldrb	r2, [r3, r2]
 800c1be:	187b      	adds	r3, r7, r1
 800c1c0:	729a      	strb	r2, [r3, #10]
                    linkAdrReq.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800c1c2:	4ab2      	ldr	r2, [pc, #712]	; (800c48c <ProcessMacCommands+0x3f0>)
 800c1c4:	238e      	movs	r3, #142	; 0x8e
 800c1c6:	00db      	lsls	r3, r3, #3
 800c1c8:	58d2      	ldr	r2, [r2, r3]
 800c1ca:	2380      	movs	r3, #128	; 0x80
 800c1cc:	005b      	lsls	r3, r3, #1
 800c1ce:	5cd2      	ldrb	r2, [r2, r3]
 800c1d0:	187b      	adds	r3, r7, r1
 800c1d2:	725a      	strb	r2, [r3, #9]
                    linkAdrReq.CurrentDatarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800c1d4:	4aad      	ldr	r2, [pc, #692]	; (800c48c <ProcessMacCommands+0x3f0>)
 800c1d6:	238e      	movs	r3, #142	; 0x8e
 800c1d8:	00db      	lsls	r3, r3, #3
 800c1da:	58d3      	ldr	r3, [r2, r3]
 800c1dc:	22d5      	movs	r2, #213	; 0xd5
 800c1de:	569a      	ldrsb	r2, [r3, r2]
 800c1e0:	187b      	adds	r3, r7, r1
 800c1e2:	72da      	strb	r2, [r3, #11]
                    linkAdrReq.CurrentTxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 800c1e4:	4aa9      	ldr	r2, [pc, #676]	; (800c48c <ProcessMacCommands+0x3f0>)
 800c1e6:	238e      	movs	r3, #142	; 0x8e
 800c1e8:	00db      	lsls	r3, r3, #3
 800c1ea:	58d3      	ldr	r3, [r2, r3]
 800c1ec:	22d4      	movs	r2, #212	; 0xd4
 800c1ee:	569a      	ldrsb	r2, [r3, r2]
 800c1f0:	187b      	adds	r3, r7, r1
 800c1f2:	731a      	strb	r2, [r3, #12]
                    linkAdrReq.CurrentNbRep = MacCtx.NvmCtx->MacParams.ChannelsNbTrans;
 800c1f4:	4aa5      	ldr	r2, [pc, #660]	; (800c48c <ProcessMacCommands+0x3f0>)
 800c1f6:	238e      	movs	r3, #142	; 0x8e
 800c1f8:	00db      	lsls	r3, r3, #3
 800c1fa:	58d3      	ldr	r3, [r2, r3]
 800c1fc:	22f4      	movs	r2, #244	; 0xf4
 800c1fe:	5c9a      	ldrb	r2, [r3, r2]
 800c200:	000d      	movs	r5, r1
 800c202:	197b      	adds	r3, r7, r5
 800c204:	735a      	strb	r2, [r3, #13]
                    linkAdrReq.Version = MacCtx.NvmCtx->Version;
 800c206:	4aa1      	ldr	r2, [pc, #644]	; (800c48c <ProcessMacCommands+0x3f0>)
 800c208:	238e      	movs	r3, #142	; 0x8e
 800c20a:	00db      	lsls	r3, r3, #3
 800c20c:	58d1      	ldr	r1, [r2, r3]
 800c20e:	197b      	adds	r3, r7, r5
 800c210:	2288      	movs	r2, #136	; 0x88
 800c212:	0092      	lsls	r2, r2, #2
 800c214:	588a      	ldr	r2, [r1, r2]
 800c216:	601a      	str	r2, [r3, #0]

                    // Process the ADR requests
                    status = RegionLinkAdrReq( MacCtx.NvmCtx->Region, &linkAdrReq, &linkAdrDatarate,
 800c218:	4a9c      	ldr	r2, [pc, #624]	; (800c48c <ProcessMacCommands+0x3f0>)
 800c21a:	238e      	movs	r3, #142	; 0x8e
 800c21c:	00db      	lsls	r3, r3, #3
 800c21e:	58d3      	ldr	r3, [r2, r3]
 800c220:	7818      	ldrb	r0, [r3, #0]
 800c222:	2356      	movs	r3, #86	; 0x56
 800c224:	18fc      	adds	r4, r7, r3
 800c226:	2357      	movs	r3, #87	; 0x57
 800c228:	18fa      	adds	r2, r7, r3
 800c22a:	1979      	adds	r1, r7, r5
 800c22c:	2354      	movs	r3, #84	; 0x54
 800c22e:	18fb      	adds	r3, r7, r3
 800c230:	9301      	str	r3, [sp, #4]
 800c232:	2355      	movs	r3, #85	; 0x55
 800c234:	18fb      	adds	r3, r7, r3
 800c236:	9300      	str	r3, [sp, #0]
 800c238:	0023      	movs	r3, r4
 800c23a:	f006 ff24 	bl	8013086 <RegionLinkAdrReq>
 800c23e:	0003      	movs	r3, r0
 800c240:	001a      	movs	r2, r3
 800c242:	216b      	movs	r1, #107	; 0x6b
 800c244:	187b      	adds	r3, r7, r1
 800c246:	701a      	strb	r2, [r3, #0]
                                               &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed );

                    if( ( status & 0x07 ) == 0x07 )
 800c248:	187b      	adds	r3, r7, r1
 800c24a:	781b      	ldrb	r3, [r3, #0]
 800c24c:	001a      	movs	r2, r3
 800c24e:	2307      	movs	r3, #7
 800c250:	4013      	ands	r3, r2
 800c252:	2b07      	cmp	r3, #7
 800c254:	d11c      	bne.n	800c290 <ProcessMacCommands+0x1f4>
                    {
                        MacCtx.NvmCtx->MacParams.ChannelsDatarate = linkAdrDatarate;
 800c256:	4a8d      	ldr	r2, [pc, #564]	; (800c48c <ProcessMacCommands+0x3f0>)
 800c258:	238e      	movs	r3, #142	; 0x8e
 800c25a:	00db      	lsls	r3, r3, #3
 800c25c:	58d3      	ldr	r3, [r2, r3]
 800c25e:	2257      	movs	r2, #87	; 0x57
 800c260:	18ba      	adds	r2, r7, r2
 800c262:	2100      	movs	r1, #0
 800c264:	5651      	ldrsb	r1, [r2, r1]
 800c266:	22d5      	movs	r2, #213	; 0xd5
 800c268:	5499      	strb	r1, [r3, r2]
                        MacCtx.NvmCtx->MacParams.ChannelsTxPower = linkAdrTxPower;
 800c26a:	4a88      	ldr	r2, [pc, #544]	; (800c48c <ProcessMacCommands+0x3f0>)
 800c26c:	238e      	movs	r3, #142	; 0x8e
 800c26e:	00db      	lsls	r3, r3, #3
 800c270:	58d3      	ldr	r3, [r2, r3]
 800c272:	2256      	movs	r2, #86	; 0x56
 800c274:	18ba      	adds	r2, r7, r2
 800c276:	2100      	movs	r1, #0
 800c278:	5651      	ldrsb	r1, [r2, r1]
 800c27a:	22d4      	movs	r2, #212	; 0xd4
 800c27c:	5499      	strb	r1, [r3, r2]
                        MacCtx.NvmCtx->MacParams.ChannelsNbTrans = linkAdrNbRep;
 800c27e:	4a83      	ldr	r2, [pc, #524]	; (800c48c <ProcessMacCommands+0x3f0>)
 800c280:	238e      	movs	r3, #142	; 0x8e
 800c282:	00db      	lsls	r3, r3, #3
 800c284:	58d3      	ldr	r3, [r2, r3]
 800c286:	2255      	movs	r2, #85	; 0x55
 800c288:	18ba      	adds	r2, r7, r2
 800c28a:	7811      	ldrb	r1, [r2, #0]
 800c28c:	22f4      	movs	r2, #244	; 0xf4
 800c28e:	5499      	strb	r1, [r3, r2]
                    }

                    // Add the answers to the buffer
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800c290:	2386      	movs	r3, #134	; 0x86
 800c292:	18fb      	adds	r3, r7, r3
 800c294:	2200      	movs	r2, #0
 800c296:	701a      	strb	r2, [r3, #0]
 800c298:	e00c      	b.n	800c2b4 <ProcessMacCommands+0x218>
                    {
                        LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 800c29a:	236b      	movs	r3, #107	; 0x6b
 800c29c:	18fb      	adds	r3, r7, r3
 800c29e:	2201      	movs	r2, #1
 800c2a0:	0019      	movs	r1, r3
 800c2a2:	2003      	movs	r0, #3
 800c2a4:	f004 f834 	bl	8010310 <LoRaMacCommandsAddCmd>
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800c2a8:	2186      	movs	r1, #134	; 0x86
 800c2aa:	187b      	adds	r3, r7, r1
 800c2ac:	781a      	ldrb	r2, [r3, #0]
 800c2ae:	187b      	adds	r3, r7, r1
 800c2b0:	3201      	adds	r2, #1
 800c2b2:	701a      	strb	r2, [r3, #0]
 800c2b4:	2354      	movs	r3, #84	; 0x54
 800c2b6:	18fb      	adds	r3, r7, r3
 800c2b8:	781b      	ldrb	r3, [r3, #0]
 800c2ba:	2105      	movs	r1, #5
 800c2bc:	0018      	movs	r0, r3
 800c2be:	f7f3 ff2b 	bl	8000118 <__udivsi3>
 800c2c2:	0003      	movs	r3, r0
 800c2c4:	b2db      	uxtb	r3, r3
 800c2c6:	2286      	movs	r2, #134	; 0x86
 800c2c8:	18ba      	adds	r2, r7, r2
 800c2ca:	7812      	ldrb	r2, [r2, #0]
 800c2cc:	429a      	cmp	r2, r3
 800c2ce:	d3e4      	bcc.n	800c29a <ProcessMacCommands+0x1fe>
                    }
                    // Update MAC index
                    macIndex += linkAdrNbBytesParsed - 1;
 800c2d0:	2354      	movs	r3, #84	; 0x54
 800c2d2:	18fb      	adds	r3, r7, r3
 800c2d4:	781a      	ldrb	r2, [r3, #0]
 800c2d6:	1cfb      	adds	r3, r7, #3
 800c2d8:	781b      	ldrb	r3, [r3, #0]
 800c2da:	18d3      	adds	r3, r2, r3
 800c2dc:	b2da      	uxtb	r2, r3
 800c2de:	1cfb      	adds	r3, r7, #3
 800c2e0:	3a01      	subs	r2, #1
 800c2e2:	701a      	strb	r2, [r3, #0]
                }
                break;
 800c2e4:	46c0      	nop			; (mov r8, r8)
 800c2e6:	f000 fc74 	bl	800cbd2 <ProcessMacCommands+0xb36>
            }
            case SRV_MAC_DUTY_CYCLE_REQ:
            {
                MacCtx.NvmCtx->MaxDCycle = payload[macIndex++] & 0x0F;
 800c2ea:	1cfb      	adds	r3, r7, #3
 800c2ec:	781b      	ldrb	r3, [r3, #0]
 800c2ee:	1cfa      	adds	r2, r7, #3
 800c2f0:	1c59      	adds	r1, r3, #1
 800c2f2:	7011      	strb	r1, [r2, #0]
 800c2f4:	001a      	movs	r2, r3
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	189b      	adds	r3, r3, r2
 800c2fa:	781b      	ldrb	r3, [r3, #0]
 800c2fc:	4963      	ldr	r1, [pc, #396]	; (800c48c <ProcessMacCommands+0x3f0>)
 800c2fe:	228e      	movs	r2, #142	; 0x8e
 800c300:	00d2      	lsls	r2, r2, #3
 800c302:	588a      	ldr	r2, [r1, r2]
 800c304:	210f      	movs	r1, #15
 800c306:	400b      	ands	r3, r1
 800c308:	b2d9      	uxtb	r1, r3
 800c30a:	2312      	movs	r3, #18
 800c30c:	33ff      	adds	r3, #255	; 0xff
 800c30e:	54d1      	strb	r1, [r2, r3]
                MacCtx.NvmCtx->AggregatedDCycle = 1 << MacCtx.NvmCtx->MaxDCycle;
 800c310:	4a5e      	ldr	r2, [pc, #376]	; (800c48c <ProcessMacCommands+0x3f0>)
 800c312:	238e      	movs	r3, #142	; 0x8e
 800c314:	00db      	lsls	r3, r3, #3
 800c316:	58d2      	ldr	r2, [r2, r3]
 800c318:	2312      	movs	r3, #18
 800c31a:	33ff      	adds	r3, #255	; 0xff
 800c31c:	5cd3      	ldrb	r3, [r2, r3]
 800c31e:	001a      	movs	r2, r3
 800c320:	2301      	movs	r3, #1
 800c322:	4093      	lsls	r3, r2
 800c324:	0019      	movs	r1, r3
 800c326:	4a59      	ldr	r2, [pc, #356]	; (800c48c <ProcessMacCommands+0x3f0>)
 800c328:	238e      	movs	r3, #142	; 0x8e
 800c32a:	00db      	lsls	r3, r3, #3
 800c32c:	58d2      	ldr	r2, [r2, r3]
 800c32e:	b289      	uxth	r1, r1
 800c330:	2387      	movs	r3, #135	; 0x87
 800c332:	009b      	lsls	r3, r3, #2
 800c334:	52d1      	strh	r1, [r2, r3]
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 800c336:	2368      	movs	r3, #104	; 0x68
 800c338:	18fb      	adds	r3, r7, r3
 800c33a:	2200      	movs	r2, #0
 800c33c:	0019      	movs	r1, r3
 800c33e:	2004      	movs	r0, #4
 800c340:	f003 ffe6 	bl	8010310 <LoRaMacCommandsAddCmd>
 800c344:	2287      	movs	r2, #135	; 0x87
 800c346:	18bb      	adds	r3, r7, r2
 800c348:	18ba      	adds	r2, r7, r2
 800c34a:	7812      	ldrb	r2, [r2, #0]
 800c34c:	701a      	strb	r2, [r3, #0]
                break;
 800c34e:	f000 fc40 	bl	800cbd2 <ProcessMacCommands+0xb36>
            }
            case SRV_MAC_RX_PARAM_SETUP_REQ:
            {
                RxParamSetupReqParams_t rxParamSetupReq;
                status = 0x07;
 800c352:	246b      	movs	r4, #107	; 0x6b
 800c354:	193b      	adds	r3, r7, r4
 800c356:	2207      	movs	r2, #7
 800c358:	701a      	strb	r2, [r3, #0]

                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 800c35a:	1cfb      	adds	r3, r7, #3
 800c35c:	781b      	ldrb	r3, [r3, #0]
 800c35e:	687a      	ldr	r2, [r7, #4]
 800c360:	18d3      	adds	r3, r2, r3
 800c362:	781b      	ldrb	r3, [r3, #0]
 800c364:	091b      	lsrs	r3, r3, #4
 800c366:	b2db      	uxtb	r3, r3
 800c368:	b25b      	sxtb	r3, r3
 800c36a:	2207      	movs	r2, #7
 800c36c:	4013      	ands	r3, r2
 800c36e:	b25a      	sxtb	r2, r3
 800c370:	204c      	movs	r0, #76	; 0x4c
 800c372:	183b      	adds	r3, r7, r0
 800c374:	705a      	strb	r2, [r3, #1]
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 800c376:	1cfb      	adds	r3, r7, #3
 800c378:	781b      	ldrb	r3, [r3, #0]
 800c37a:	687a      	ldr	r2, [r7, #4]
 800c37c:	18d3      	adds	r3, r2, r3
 800c37e:	781b      	ldrb	r3, [r3, #0]
 800c380:	b25b      	sxtb	r3, r3
 800c382:	220f      	movs	r2, #15
 800c384:	4013      	ands	r3, r2
 800c386:	b25a      	sxtb	r2, r3
 800c388:	183b      	adds	r3, r7, r0
 800c38a:	701a      	strb	r2, [r3, #0]
                macIndex++;
 800c38c:	1cfb      	adds	r3, r7, #3
 800c38e:	781a      	ldrb	r2, [r3, #0]
 800c390:	1cfb      	adds	r3, r7, #3
 800c392:	3201      	adds	r2, #1
 800c394:	701a      	strb	r2, [r3, #0]

                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 800c396:	1cfb      	adds	r3, r7, #3
 800c398:	781b      	ldrb	r3, [r3, #0]
 800c39a:	1cfa      	adds	r2, r7, #3
 800c39c:	1c59      	adds	r1, r3, #1
 800c39e:	7011      	strb	r1, [r2, #0]
 800c3a0:	001a      	movs	r2, r3
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	189b      	adds	r3, r3, r2
 800c3a6:	781b      	ldrb	r3, [r3, #0]
 800c3a8:	001a      	movs	r2, r3
 800c3aa:	183b      	adds	r3, r7, r0
 800c3ac:	605a      	str	r2, [r3, #4]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800c3ae:	1cfb      	adds	r3, r7, #3
 800c3b0:	781b      	ldrb	r3, [r3, #0]
 800c3b2:	1cfa      	adds	r2, r7, #3
 800c3b4:	1c59      	adds	r1, r3, #1
 800c3b6:	7011      	strb	r1, [r2, #0]
 800c3b8:	001a      	movs	r2, r3
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	189b      	adds	r3, r3, r2
 800c3be:	781b      	ldrb	r3, [r3, #0]
 800c3c0:	021a      	lsls	r2, r3, #8
 800c3c2:	183b      	adds	r3, r7, r0
 800c3c4:	685b      	ldr	r3, [r3, #4]
 800c3c6:	431a      	orrs	r2, r3
 800c3c8:	183b      	adds	r3, r7, r0
 800c3ca:	605a      	str	r2, [r3, #4]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800c3cc:	1cfb      	adds	r3, r7, #3
 800c3ce:	781b      	ldrb	r3, [r3, #0]
 800c3d0:	1cfa      	adds	r2, r7, #3
 800c3d2:	1c59      	adds	r1, r3, #1
 800c3d4:	7011      	strb	r1, [r2, #0]
 800c3d6:	001a      	movs	r2, r3
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	189b      	adds	r3, r3, r2
 800c3dc:	781b      	ldrb	r3, [r3, #0]
 800c3de:	041a      	lsls	r2, r3, #16
 800c3e0:	0001      	movs	r1, r0
 800c3e2:	187b      	adds	r3, r7, r1
 800c3e4:	685b      	ldr	r3, [r3, #4]
 800c3e6:	431a      	orrs	r2, r3
 800c3e8:	187b      	adds	r3, r7, r1
 800c3ea:	605a      	str	r2, [r3, #4]
                rxParamSetupReq.Frequency *= 100;
 800c3ec:	187b      	adds	r3, r7, r1
 800c3ee:	685b      	ldr	r3, [r3, #4]
 800c3f0:	2264      	movs	r2, #100	; 0x64
 800c3f2:	435a      	muls	r2, r3
 800c3f4:	187b      	adds	r3, r7, r1
 800c3f6:	605a      	str	r2, [r3, #4]

                // Perform request on region
                status = RegionRxParamSetupReq( MacCtx.NvmCtx->Region, &rxParamSetupReq );
 800c3f8:	4a24      	ldr	r2, [pc, #144]	; (800c48c <ProcessMacCommands+0x3f0>)
 800c3fa:	238e      	movs	r3, #142	; 0x8e
 800c3fc:	00db      	lsls	r3, r3, #3
 800c3fe:	58d3      	ldr	r3, [r2, r3]
 800c400:	781b      	ldrb	r3, [r3, #0]
 800c402:	187a      	adds	r2, r7, r1
 800c404:	0011      	movs	r1, r2
 800c406:	0018      	movs	r0, r3
 800c408:	f006 fe5b 	bl	80130c2 <RegionRxParamSetupReq>
 800c40c:	0003      	movs	r3, r0
 800c40e:	001a      	movs	r2, r3
 800c410:	193b      	adds	r3, r7, r4
 800c412:	701a      	strb	r2, [r3, #0]

                if( ( status & 0x07 ) == 0x07 )
 800c414:	193b      	adds	r3, r7, r4
 800c416:	781b      	ldrb	r3, [r3, #0]
 800c418:	001a      	movs	r2, r3
 800c41a:	2307      	movs	r3, #7
 800c41c:	4013      	ands	r3, r2
 800c41e:	2b07      	cmp	r3, #7
 800c420:	d11c      	bne.n	800c45c <ProcessMacCommands+0x3c0>
                {
                    MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 800c422:	204c      	movs	r0, #76	; 0x4c
 800c424:	183b      	adds	r3, r7, r0
 800c426:	2100      	movs	r1, #0
 800c428:	5659      	ldrsb	r1, [r3, r1]
 800c42a:	4a18      	ldr	r2, [pc, #96]	; (800c48c <ProcessMacCommands+0x3f0>)
 800c42c:	238e      	movs	r3, #142	; 0x8e
 800c42e:	00db      	lsls	r3, r3, #3
 800c430:	58d3      	ldr	r3, [r2, r3]
 800c432:	b2c9      	uxtb	r1, r1
 800c434:	22fc      	movs	r2, #252	; 0xfc
 800c436:	5499      	strb	r1, [r3, r2]
                    MacCtx.NvmCtx->MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 800c438:	4a14      	ldr	r2, [pc, #80]	; (800c48c <ProcessMacCommands+0x3f0>)
 800c43a:	238e      	movs	r3, #142	; 0x8e
 800c43c:	00db      	lsls	r3, r3, #3
 800c43e:	58d2      	ldr	r2, [r2, r3]
 800c440:	183b      	adds	r3, r7, r0
 800c442:	685b      	ldr	r3, [r3, #4]
 800c444:	21f8      	movs	r1, #248	; 0xf8
 800c446:	5053      	str	r3, [r2, r1]
                    MacCtx.NvmCtx->MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 800c448:	183b      	adds	r3, r7, r0
 800c44a:	2101      	movs	r1, #1
 800c44c:	5659      	ldrsb	r1, [r3, r1]
 800c44e:	4a0f      	ldr	r2, [pc, #60]	; (800c48c <ProcessMacCommands+0x3f0>)
 800c450:	238e      	movs	r3, #142	; 0x8e
 800c452:	00db      	lsls	r3, r3, #3
 800c454:	58d3      	ldr	r3, [r2, r3]
 800c456:	b2c9      	uxtb	r1, r1
 800c458:	22f5      	movs	r2, #245	; 0xf5
 800c45a:	5499      	strb	r1, [r3, r2]
                }
                macCmdPayload[0] = status;
 800c45c:	236b      	movs	r3, #107	; 0x6b
 800c45e:	18fb      	adds	r3, r7, r3
 800c460:	781a      	ldrb	r2, [r3, #0]
 800c462:	2168      	movs	r1, #104	; 0x68
 800c464:	187b      	adds	r3, r7, r1
 800c466:	701a      	strb	r2, [r3, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 800c468:	187b      	adds	r3, r7, r1
 800c46a:	2201      	movs	r2, #1
 800c46c:	0019      	movs	r1, r3
 800c46e:	2005      	movs	r0, #5
 800c470:	f003 ff4e 	bl	8010310 <LoRaMacCommandsAddCmd>
                // Setup indication to inform the application
                SetMlmeScheduleUplinkIndication( );
 800c474:	f7ff fdfc 	bl	800c070 <SetMlmeScheduleUplinkIndication>
                break;
 800c478:	46c0      	nop			; (mov r8, r8)
 800c47a:	2287      	movs	r2, #135	; 0x87
 800c47c:	18bb      	adds	r3, r7, r2
 800c47e:	18ba      	adds	r2, r7, r2
 800c480:	7812      	ldrb	r2, [r2, #0]
 800c482:	701a      	strb	r2, [r3, #0]
 800c484:	e3a5      	b.n	800cbd2 <ProcessMacCommands+0xb36>
 800c486:	46c0      	nop			; (mov r8, r8)
 800c488:	08021798 	.word	0x08021798
 800c48c:	20000708 	.word	0x20000708
 800c490:	00000449 	.word	0x00000449
            }
            case SRV_MAC_DEV_STATUS_REQ:
            {
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 800c494:	2385      	movs	r3, #133	; 0x85
 800c496:	18fb      	adds	r3, r7, r3
 800c498:	22ff      	movs	r2, #255	; 0xff
 800c49a:	701a      	strb	r2, [r3, #0]
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 800c49c:	4ac5      	ldr	r2, [pc, #788]	; (800c7b4 <ProcessMacCommands+0x718>)
 800c49e:	23d7      	movs	r3, #215	; 0xd7
 800c4a0:	009b      	lsls	r3, r3, #2
 800c4a2:	58d3      	ldr	r3, [r2, r3]
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d010      	beq.n	800c4ca <ProcessMacCommands+0x42e>
 800c4a8:	4ac2      	ldr	r2, [pc, #776]	; (800c7b4 <ProcessMacCommands+0x718>)
 800c4aa:	23d7      	movs	r3, #215	; 0xd7
 800c4ac:	009b      	lsls	r3, r3, #2
 800c4ae:	58d3      	ldr	r3, [r2, r3]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d009      	beq.n	800c4ca <ProcessMacCommands+0x42e>
                {
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 800c4b6:	4abf      	ldr	r2, [pc, #764]	; (800c7b4 <ProcessMacCommands+0x718>)
 800c4b8:	23d7      	movs	r3, #215	; 0xd7
 800c4ba:	009b      	lsls	r3, r3, #2
 800c4bc:	58d3      	ldr	r3, [r2, r3]
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	2285      	movs	r2, #133	; 0x85
 800c4c2:	18bc      	adds	r4, r7, r2
 800c4c4:	4798      	blx	r3
 800c4c6:	0003      	movs	r3, r0
 800c4c8:	7023      	strb	r3, [r4, #0]
                }
                macCmdPayload[0] = batteryLevel;
 800c4ca:	2168      	movs	r1, #104	; 0x68
 800c4cc:	187b      	adds	r3, r7, r1
 800c4ce:	2285      	movs	r2, #133	; 0x85
 800c4d0:	18ba      	adds	r2, r7, r2
 800c4d2:	7812      	ldrb	r2, [r2, #0]
 800c4d4:	701a      	strb	r2, [r3, #0]
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 800c4d6:	1c7b      	adds	r3, r7, #1
 800c4d8:	781b      	ldrb	r3, [r3, #0]
 800c4da:	223f      	movs	r2, #63	; 0x3f
 800c4dc:	4013      	ands	r3, r2
 800c4de:	b2da      	uxtb	r2, r3
 800c4e0:	187b      	adds	r3, r7, r1
 800c4e2:	705a      	strb	r2, [r3, #1]
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 800c4e4:	187b      	adds	r3, r7, r1
 800c4e6:	2202      	movs	r2, #2
 800c4e8:	0019      	movs	r1, r3
 800c4ea:	2006      	movs	r0, #6
 800c4ec:	f003 ff10 	bl	8010310 <LoRaMacCommandsAddCmd>
 800c4f0:	2287      	movs	r2, #135	; 0x87
 800c4f2:	18bb      	adds	r3, r7, r2
 800c4f4:	18ba      	adds	r2, r7, r2
 800c4f6:	7812      	ldrb	r2, [r2, #0]
 800c4f8:	701a      	strb	r2, [r3, #0]
                break;
 800c4fa:	e36a      	b.n	800cbd2 <ProcessMacCommands+0xb36>
            }
            case SRV_MAC_NEW_CHANNEL_REQ:
            {
                NewChannelReqParams_t newChannelReq;
                ChannelParams_t chParam;
                status = 0x03;
 800c4fc:	246b      	movs	r4, #107	; 0x6b
 800c4fe:	193b      	adds	r3, r7, r4
 800c500:	2203      	movs	r2, #3
 800c502:	701a      	strb	r2, [r3, #0]

                newChannelReq.ChannelId = payload[macIndex++];
 800c504:	1cfb      	adds	r3, r7, #3
 800c506:	781b      	ldrb	r3, [r3, #0]
 800c508:	1cfa      	adds	r2, r7, #3
 800c50a:	1c59      	adds	r1, r3, #1
 800c50c:	7011      	strb	r1, [r2, #0]
 800c50e:	001a      	movs	r2, r3
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	189b      	adds	r3, r3, r2
 800c514:	781b      	ldrb	r3, [r3, #0]
 800c516:	b25a      	sxtb	r2, r3
 800c518:	2544      	movs	r5, #68	; 0x44
 800c51a:	197b      	adds	r3, r7, r5
 800c51c:	711a      	strb	r2, [r3, #4]
                newChannelReq.NewChannel = &chParam;
 800c51e:	197b      	adds	r3, r7, r5
 800c520:	2038      	movs	r0, #56	; 0x38
 800c522:	183a      	adds	r2, r7, r0
 800c524:	601a      	str	r2, [r3, #0]

                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 800c526:	1cfb      	adds	r3, r7, #3
 800c528:	781b      	ldrb	r3, [r3, #0]
 800c52a:	1cfa      	adds	r2, r7, #3
 800c52c:	1c59      	adds	r1, r3, #1
 800c52e:	7011      	strb	r1, [r2, #0]
 800c530:	001a      	movs	r2, r3
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	189b      	adds	r3, r3, r2
 800c536:	781b      	ldrb	r3, [r3, #0]
 800c538:	001a      	movs	r2, r3
 800c53a:	183b      	adds	r3, r7, r0
 800c53c:	601a      	str	r2, [r3, #0]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800c53e:	1cfb      	adds	r3, r7, #3
 800c540:	781b      	ldrb	r3, [r3, #0]
 800c542:	1cfa      	adds	r2, r7, #3
 800c544:	1c59      	adds	r1, r3, #1
 800c546:	7011      	strb	r1, [r2, #0]
 800c548:	001a      	movs	r2, r3
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	189b      	adds	r3, r3, r2
 800c54e:	781b      	ldrb	r3, [r3, #0]
 800c550:	021a      	lsls	r2, r3, #8
 800c552:	183b      	adds	r3, r7, r0
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	431a      	orrs	r2, r3
 800c558:	183b      	adds	r3, r7, r0
 800c55a:	601a      	str	r2, [r3, #0]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800c55c:	1cfb      	adds	r3, r7, #3
 800c55e:	781b      	ldrb	r3, [r3, #0]
 800c560:	1cfa      	adds	r2, r7, #3
 800c562:	1c59      	adds	r1, r3, #1
 800c564:	7011      	strb	r1, [r2, #0]
 800c566:	001a      	movs	r2, r3
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	189b      	adds	r3, r3, r2
 800c56c:	781b      	ldrb	r3, [r3, #0]
 800c56e:	041a      	lsls	r2, r3, #16
 800c570:	183b      	adds	r3, r7, r0
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	431a      	orrs	r2, r3
 800c576:	183b      	adds	r3, r7, r0
 800c578:	601a      	str	r2, [r3, #0]
                chParam.Frequency *= 100;
 800c57a:	183b      	adds	r3, r7, r0
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	2264      	movs	r2, #100	; 0x64
 800c580:	435a      	muls	r2, r3
 800c582:	183b      	adds	r3, r7, r0
 800c584:	601a      	str	r2, [r3, #0]
                chParam.Rx1Frequency = 0;
 800c586:	183b      	adds	r3, r7, r0
 800c588:	2200      	movs	r2, #0
 800c58a:	605a      	str	r2, [r3, #4]
                chParam.DrRange.Value = payload[macIndex++];
 800c58c:	1cfb      	adds	r3, r7, #3
 800c58e:	781b      	ldrb	r3, [r3, #0]
 800c590:	1cfa      	adds	r2, r7, #3
 800c592:	1c59      	adds	r1, r3, #1
 800c594:	7011      	strb	r1, [r2, #0]
 800c596:	001a      	movs	r2, r3
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	189b      	adds	r3, r3, r2
 800c59c:	781b      	ldrb	r3, [r3, #0]
 800c59e:	b25a      	sxtb	r2, r3
 800c5a0:	183b      	adds	r3, r7, r0
 800c5a2:	721a      	strb	r2, [r3, #8]

                status = RegionNewChannelReq( MacCtx.NvmCtx->Region, &newChannelReq );
 800c5a4:	4a83      	ldr	r2, [pc, #524]	; (800c7b4 <ProcessMacCommands+0x718>)
 800c5a6:	238e      	movs	r3, #142	; 0x8e
 800c5a8:	00db      	lsls	r3, r3, #3
 800c5aa:	58d3      	ldr	r3, [r2, r3]
 800c5ac:	781b      	ldrb	r3, [r3, #0]
 800c5ae:	197a      	adds	r2, r7, r5
 800c5b0:	0011      	movs	r1, r2
 800c5b2:	0018      	movs	r0, r3
 800c5b4:	f006 fd9b 	bl	80130ee <RegionNewChannelReq>
 800c5b8:	0003      	movs	r3, r0
 800c5ba:	001a      	movs	r2, r3
 800c5bc:	193b      	adds	r3, r7, r4
 800c5be:	701a      	strb	r2, [r3, #0]

                macCmdPayload[0] = status;
 800c5c0:	193b      	adds	r3, r7, r4
 800c5c2:	781a      	ldrb	r2, [r3, #0]
 800c5c4:	2168      	movs	r1, #104	; 0x68
 800c5c6:	187b      	adds	r3, r7, r1
 800c5c8:	701a      	strb	r2, [r3, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 800c5ca:	187b      	adds	r3, r7, r1
 800c5cc:	2201      	movs	r2, #1
 800c5ce:	0019      	movs	r1, r3
 800c5d0:	2007      	movs	r0, #7
 800c5d2:	f003 fe9d 	bl	8010310 <LoRaMacCommandsAddCmd>
                break;
 800c5d6:	46c0      	nop			; (mov r8, r8)
 800c5d8:	2287      	movs	r2, #135	; 0x87
 800c5da:	18bb      	adds	r3, r7, r2
 800c5dc:	18ba      	adds	r2, r7, r2
 800c5de:	7812      	ldrb	r2, [r2, #0]
 800c5e0:	701a      	strb	r2, [r3, #0]
 800c5e2:	e2f6      	b.n	800cbd2 <ProcessMacCommands+0xb36>
            }
            case SRV_MAC_RX_TIMING_SETUP_REQ:
            {
                uint8_t delay = payload[macIndex++] & 0x0F;
 800c5e4:	1cfb      	adds	r3, r7, #3
 800c5e6:	781b      	ldrb	r3, [r3, #0]
 800c5e8:	1cfa      	adds	r2, r7, #3
 800c5ea:	1c59      	adds	r1, r3, #1
 800c5ec:	7011      	strb	r1, [r2, #0]
 800c5ee:	001a      	movs	r2, r3
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	189b      	adds	r3, r3, r2
 800c5f4:	781a      	ldrb	r2, [r3, #0]
 800c5f6:	2084      	movs	r0, #132	; 0x84
 800c5f8:	183b      	adds	r3, r7, r0
 800c5fa:	210f      	movs	r1, #15
 800c5fc:	400a      	ands	r2, r1
 800c5fe:	701a      	strb	r2, [r3, #0]

                if( delay == 0 )
 800c600:	183b      	adds	r3, r7, r0
 800c602:	781b      	ldrb	r3, [r3, #0]
 800c604:	2b00      	cmp	r3, #0
 800c606:	d105      	bne.n	800c614 <ProcessMacCommands+0x578>
                {
                    delay++;
 800c608:	2184      	movs	r1, #132	; 0x84
 800c60a:	187b      	adds	r3, r7, r1
 800c60c:	781a      	ldrb	r2, [r3, #0]
 800c60e:	187b      	adds	r3, r7, r1
 800c610:	3201      	adds	r2, #1
 800c612:	701a      	strb	r2, [r3, #0]
                }
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 = delay * 1000;
 800c614:	2384      	movs	r3, #132	; 0x84
 800c616:	18fb      	adds	r3, r7, r3
 800c618:	781a      	ldrb	r2, [r3, #0]
 800c61a:	0013      	movs	r3, r2
 800c61c:	015b      	lsls	r3, r3, #5
 800c61e:	1a9b      	subs	r3, r3, r2
 800c620:	009b      	lsls	r3, r3, #2
 800c622:	189b      	adds	r3, r3, r2
 800c624:	00db      	lsls	r3, r3, #3
 800c626:	0019      	movs	r1, r3
 800c628:	4a62      	ldr	r2, [pc, #392]	; (800c7b4 <ProcessMacCommands+0x718>)
 800c62a:	238e      	movs	r3, #142	; 0x8e
 800c62c:	00db      	lsls	r3, r3, #3
 800c62e:	58d3      	ldr	r3, [r2, r3]
 800c630:	22e4      	movs	r2, #228	; 0xe4
 800c632:	5099      	str	r1, [r3, r2]
                MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + 1000;
 800c634:	4a5f      	ldr	r2, [pc, #380]	; (800c7b4 <ProcessMacCommands+0x718>)
 800c636:	238e      	movs	r3, #142	; 0x8e
 800c638:	00db      	lsls	r3, r3, #3
 800c63a:	58d3      	ldr	r3, [r2, r3]
 800c63c:	22e4      	movs	r2, #228	; 0xe4
 800c63e:	589a      	ldr	r2, [r3, r2]
 800c640:	495c      	ldr	r1, [pc, #368]	; (800c7b4 <ProcessMacCommands+0x718>)
 800c642:	238e      	movs	r3, #142	; 0x8e
 800c644:	00db      	lsls	r3, r3, #3
 800c646:	58cb      	ldr	r3, [r1, r3]
 800c648:	21fa      	movs	r1, #250	; 0xfa
 800c64a:	0089      	lsls	r1, r1, #2
 800c64c:	468c      	mov	ip, r1
 800c64e:	4462      	add	r2, ip
 800c650:	21e8      	movs	r1, #232	; 0xe8
 800c652:	505a      	str	r2, [r3, r1]
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 800c654:	2368      	movs	r3, #104	; 0x68
 800c656:	18fb      	adds	r3, r7, r3
 800c658:	2200      	movs	r2, #0
 800c65a:	0019      	movs	r1, r3
 800c65c:	2008      	movs	r0, #8
 800c65e:	f003 fe57 	bl	8010310 <LoRaMacCommandsAddCmd>
                // Setup indication to inform the application
                SetMlmeScheduleUplinkIndication( );
 800c662:	f7ff fd05 	bl	800c070 <SetMlmeScheduleUplinkIndication>
 800c666:	2287      	movs	r2, #135	; 0x87
 800c668:	18bb      	adds	r3, r7, r2
 800c66a:	18ba      	adds	r2, r7, r2
 800c66c:	7812      	ldrb	r2, [r2, #0]
 800c66e:	701a      	strb	r2, [r3, #0]
                break;
 800c670:	e2af      	b.n	800cbd2 <ProcessMacCommands+0xb36>
            case SRV_MAC_TX_PARAM_SETUP_REQ:
            {
                TxParamSetupReqParams_t txParamSetupReq;
                GetPhyParams_t getPhy;
                PhyParam_t phyParam;
                uint8_t eirpDwellTime = payload[macIndex++];
 800c672:	1cfb      	adds	r3, r7, #3
 800c674:	781b      	ldrb	r3, [r3, #0]
 800c676:	1cfa      	adds	r2, r7, #3
 800c678:	1c59      	adds	r1, r3, #1
 800c67a:	7011      	strb	r1, [r2, #0]
 800c67c:	001a      	movs	r2, r3
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	189a      	adds	r2, r3, r2
 800c682:	2176      	movs	r1, #118	; 0x76
 800c684:	187b      	adds	r3, r7, r1
 800c686:	7812      	ldrb	r2, [r2, #0]
 800c688:	701a      	strb	r2, [r3, #0]

                txParamSetupReq.UplinkDwellTime = 0;
 800c68a:	2034      	movs	r0, #52	; 0x34
 800c68c:	183b      	adds	r3, r7, r0
 800c68e:	2200      	movs	r2, #0
 800c690:	701a      	strb	r2, [r3, #0]
                txParamSetupReq.DownlinkDwellTime = 0;
 800c692:	183b      	adds	r3, r7, r0
 800c694:	2200      	movs	r2, #0
 800c696:	705a      	strb	r2, [r3, #1]

                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 800c698:	187b      	adds	r3, r7, r1
 800c69a:	781b      	ldrb	r3, [r3, #0]
 800c69c:	2220      	movs	r2, #32
 800c69e:	4013      	ands	r3, r2
 800c6a0:	d003      	beq.n	800c6aa <ProcessMacCommands+0x60e>
                {
                    txParamSetupReq.DownlinkDwellTime = 1;
 800c6a2:	2334      	movs	r3, #52	; 0x34
 800c6a4:	18fb      	adds	r3, r7, r3
 800c6a6:	2201      	movs	r2, #1
 800c6a8:	705a      	strb	r2, [r3, #1]
                }
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 800c6aa:	2376      	movs	r3, #118	; 0x76
 800c6ac:	18fb      	adds	r3, r7, r3
 800c6ae:	781b      	ldrb	r3, [r3, #0]
 800c6b0:	2210      	movs	r2, #16
 800c6b2:	4013      	ands	r3, r2
 800c6b4:	d003      	beq.n	800c6be <ProcessMacCommands+0x622>
                {
                    txParamSetupReq.UplinkDwellTime = 1;
 800c6b6:	2334      	movs	r3, #52	; 0x34
 800c6b8:	18fb      	adds	r3, r7, r3
 800c6ba:	2201      	movs	r2, #1
 800c6bc:	701a      	strb	r2, [r3, #0]
                }
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 800c6be:	2376      	movs	r3, #118	; 0x76
 800c6c0:	18fb      	adds	r3, r7, r3
 800c6c2:	781b      	ldrb	r3, [r3, #0]
 800c6c4:	220f      	movs	r2, #15
 800c6c6:	4013      	ands	r3, r2
 800c6c8:	b2da      	uxtb	r2, r3
 800c6ca:	2134      	movs	r1, #52	; 0x34
 800c6cc:	187b      	adds	r3, r7, r1
 800c6ce:	709a      	strb	r2, [r3, #2]

                // Check the status for correctness
                if( RegionTxParamSetupReq( MacCtx.NvmCtx->Region, &txParamSetupReq ) != -1 )
 800c6d0:	4a38      	ldr	r2, [pc, #224]	; (800c7b4 <ProcessMacCommands+0x718>)
 800c6d2:	238e      	movs	r3, #142	; 0x8e
 800c6d4:	00db      	lsls	r3, r3, #3
 800c6d6:	58d3      	ldr	r3, [r2, r3]
 800c6d8:	781b      	ldrb	r3, [r3, #0]
 800c6da:	187a      	adds	r2, r7, r1
 800c6dc:	0011      	movs	r1, r2
 800c6de:	0018      	movs	r0, r3
 800c6e0:	f006 fd1b 	bl	801311a <RegionTxParamSetupReq>
 800c6e4:	0003      	movs	r3, r0
 800c6e6:	3301      	adds	r3, #1
 800c6e8:	d05c      	beq.n	800c7a4 <ProcessMacCommands+0x708>
                {
                    // Accept command
                    MacCtx.NvmCtx->MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 800c6ea:	4a32      	ldr	r2, [pc, #200]	; (800c7b4 <ProcessMacCommands+0x718>)
 800c6ec:	238e      	movs	r3, #142	; 0x8e
 800c6ee:	00db      	lsls	r3, r3, #3
 800c6f0:	58d2      	ldr	r2, [r2, r3]
 800c6f2:	2034      	movs	r0, #52	; 0x34
 800c6f4:	183b      	adds	r3, r7, r0
 800c6f6:	7819      	ldrb	r1, [r3, #0]
 800c6f8:	2380      	movs	r3, #128	; 0x80
 800c6fa:	005b      	lsls	r3, r3, #1
 800c6fc:	54d1      	strb	r1, [r2, r3]
                    MacCtx.NvmCtx->MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 800c6fe:	4a2d      	ldr	r2, [pc, #180]	; (800c7b4 <ProcessMacCommands+0x718>)
 800c700:	238e      	movs	r3, #142	; 0x8e
 800c702:	00db      	lsls	r3, r3, #3
 800c704:	58d2      	ldr	r2, [r2, r3]
 800c706:	183b      	adds	r3, r7, r0
 800c708:	7859      	ldrb	r1, [r3, #1]
 800c70a:	2302      	movs	r3, #2
 800c70c:	33ff      	adds	r3, #255	; 0xff
 800c70e:	54d1      	strb	r1, [r2, r3]
                    MacCtx.NvmCtx->MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 800c710:	183b      	adds	r3, r7, r0
 800c712:	789b      	ldrb	r3, [r3, #2]
 800c714:	001a      	movs	r2, r3
 800c716:	4b28      	ldr	r3, [pc, #160]	; (800c7b8 <ProcessMacCommands+0x71c>)
 800c718:	5c99      	ldrb	r1, [r3, r2]
 800c71a:	4a26      	ldr	r2, [pc, #152]	; (800c7b4 <ProcessMacCommands+0x718>)
 800c71c:	238e      	movs	r3, #142	; 0x8e
 800c71e:	00db      	lsls	r3, r3, #3
 800c720:	58d4      	ldr	r4, [r2, r3]
 800c722:	0008      	movs	r0, r1
 800c724:	f7f4 f9da 	bl	8000adc <__aeabi_ui2f>
 800c728:	1c02      	adds	r2, r0, #0
 800c72a:	2382      	movs	r3, #130	; 0x82
 800c72c:	005b      	lsls	r3, r3, #1
 800c72e:	50e2      	str	r2, [r4, r3]
                    // Update the datarate in case of the new configuration limits it
                    getPhy.Attribute = PHY_MIN_TX_DR;
 800c730:	2130      	movs	r1, #48	; 0x30
 800c732:	187b      	adds	r3, r7, r1
 800c734:	2201      	movs	r2, #1
 800c736:	701a      	strb	r2, [r3, #0]
                    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800c738:	4a1e      	ldr	r2, [pc, #120]	; (800c7b4 <ProcessMacCommands+0x718>)
 800c73a:	238e      	movs	r3, #142	; 0x8e
 800c73c:	00db      	lsls	r3, r3, #3
 800c73e:	58d2      	ldr	r2, [r2, r3]
 800c740:	2380      	movs	r3, #128	; 0x80
 800c742:	005b      	lsls	r3, r3, #1
 800c744:	5cd2      	ldrb	r2, [r2, r3]
 800c746:	187b      	adds	r3, r7, r1
 800c748:	709a      	strb	r2, [r3, #2]
                    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800c74a:	4a1a      	ldr	r2, [pc, #104]	; (800c7b4 <ProcessMacCommands+0x718>)
 800c74c:	238e      	movs	r3, #142	; 0x8e
 800c74e:	00db      	lsls	r3, r3, #3
 800c750:	58d3      	ldr	r3, [r2, r3]
 800c752:	781b      	ldrb	r3, [r3, #0]
 800c754:	187a      	adds	r2, r7, r1
 800c756:	0011      	movs	r1, r2
 800c758:	0018      	movs	r0, r3
 800c75a:	f006 fb8c 	bl	8012e76 <RegionGetPhyParam>
 800c75e:	0003      	movs	r3, r0
 800c760:	001a      	movs	r2, r3
 800c762:	212c      	movs	r1, #44	; 0x2c
 800c764:	187b      	adds	r3, r7, r1
 800c766:	601a      	str	r2, [r3, #0]
                    MacCtx.NvmCtx->MacParams.ChannelsDatarate = MAX( MacCtx.NvmCtx->MacParams.ChannelsDatarate, ( int8_t )phyParam.Value );
 800c768:	187b      	adds	r3, r7, r1
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	b259      	sxtb	r1, r3
 800c76e:	4a11      	ldr	r2, [pc, #68]	; (800c7b4 <ProcessMacCommands+0x718>)
 800c770:	238e      	movs	r3, #142	; 0x8e
 800c772:	00db      	lsls	r3, r3, #3
 800c774:	58d3      	ldr	r3, [r2, r3]
 800c776:	22d5      	movs	r2, #213	; 0xd5
 800c778:	5698      	ldrsb	r0, [r3, r2]
 800c77a:	4a0e      	ldr	r2, [pc, #56]	; (800c7b4 <ProcessMacCommands+0x718>)
 800c77c:	238e      	movs	r3, #142	; 0x8e
 800c77e:	00db      	lsls	r3, r3, #3
 800c780:	58d3      	ldr	r3, [r2, r3]
 800c782:	1c04      	adds	r4, r0, #0
 800c784:	1c08      	adds	r0, r1, #0
 800c786:	b241      	sxtb	r1, r0
 800c788:	b262      	sxtb	r2, r4
 800c78a:	4291      	cmp	r1, r2
 800c78c:	da00      	bge.n	800c790 <ProcessMacCommands+0x6f4>
 800c78e:	1c20      	adds	r0, r4, #0
 800c790:	b241      	sxtb	r1, r0
 800c792:	22d5      	movs	r2, #213	; 0xd5
 800c794:	5499      	strb	r1, [r3, r2]

                    // Add command response
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 800c796:	2368      	movs	r3, #104	; 0x68
 800c798:	18fb      	adds	r3, r7, r3
 800c79a:	2200      	movs	r2, #0
 800c79c:	0019      	movs	r1, r3
 800c79e:	2009      	movs	r0, #9
 800c7a0:	f003 fdb6 	bl	8010310 <LoRaMacCommandsAddCmd>
                }
                break;
 800c7a4:	46c0      	nop			; (mov r8, r8)
 800c7a6:	2287      	movs	r2, #135	; 0x87
 800c7a8:	18bb      	adds	r3, r7, r2
 800c7aa:	18ba      	adds	r2, r7, r2
 800c7ac:	7812      	ldrb	r2, [r2, #0]
 800c7ae:	701a      	strb	r2, [r3, #0]
 800c7b0:	e20f      	b.n	800cbd2 <ProcessMacCommands+0xb36>
 800c7b2:	46c0      	nop			; (mov r8, r8)
 800c7b4:	20000708 	.word	0x20000708
 800c7b8:	08021788 	.word	0x08021788
            }
            case SRV_MAC_DL_CHANNEL_REQ:
            {
                DlChannelReqParams_t dlChannelReq;
                status = 0x03;
 800c7bc:	246b      	movs	r4, #107	; 0x6b
 800c7be:	193b      	adds	r3, r7, r4
 800c7c0:	2203      	movs	r2, #3
 800c7c2:	701a      	strb	r2, [r3, #0]

                dlChannelReq.ChannelId = payload[macIndex++];
 800c7c4:	1cfb      	adds	r3, r7, #3
 800c7c6:	781b      	ldrb	r3, [r3, #0]
 800c7c8:	1cfa      	adds	r2, r7, #3
 800c7ca:	1c59      	adds	r1, r3, #1
 800c7cc:	7011      	strb	r1, [r2, #0]
 800c7ce:	001a      	movs	r2, r3
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	189b      	adds	r3, r3, r2
 800c7d4:	781a      	ldrb	r2, [r3, #0]
 800c7d6:	2024      	movs	r0, #36	; 0x24
 800c7d8:	183b      	adds	r3, r7, r0
 800c7da:	701a      	strb	r2, [r3, #0]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 800c7dc:	1cfb      	adds	r3, r7, #3
 800c7de:	781b      	ldrb	r3, [r3, #0]
 800c7e0:	1cfa      	adds	r2, r7, #3
 800c7e2:	1c59      	adds	r1, r3, #1
 800c7e4:	7011      	strb	r1, [r2, #0]
 800c7e6:	001a      	movs	r2, r3
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	189b      	adds	r3, r3, r2
 800c7ec:	781b      	ldrb	r3, [r3, #0]
 800c7ee:	001a      	movs	r2, r3
 800c7f0:	183b      	adds	r3, r7, r0
 800c7f2:	605a      	str	r2, [r3, #4]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800c7f4:	1cfb      	adds	r3, r7, #3
 800c7f6:	781b      	ldrb	r3, [r3, #0]
 800c7f8:	1cfa      	adds	r2, r7, #3
 800c7fa:	1c59      	adds	r1, r3, #1
 800c7fc:	7011      	strb	r1, [r2, #0]
 800c7fe:	001a      	movs	r2, r3
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	189b      	adds	r3, r3, r2
 800c804:	781b      	ldrb	r3, [r3, #0]
 800c806:	021a      	lsls	r2, r3, #8
 800c808:	183b      	adds	r3, r7, r0
 800c80a:	685b      	ldr	r3, [r3, #4]
 800c80c:	431a      	orrs	r2, r3
 800c80e:	183b      	adds	r3, r7, r0
 800c810:	605a      	str	r2, [r3, #4]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800c812:	1cfb      	adds	r3, r7, #3
 800c814:	781b      	ldrb	r3, [r3, #0]
 800c816:	1cfa      	adds	r2, r7, #3
 800c818:	1c59      	adds	r1, r3, #1
 800c81a:	7011      	strb	r1, [r2, #0]
 800c81c:	001a      	movs	r2, r3
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	189b      	adds	r3, r3, r2
 800c822:	781b      	ldrb	r3, [r3, #0]
 800c824:	041a      	lsls	r2, r3, #16
 800c826:	0001      	movs	r1, r0
 800c828:	187b      	adds	r3, r7, r1
 800c82a:	685b      	ldr	r3, [r3, #4]
 800c82c:	431a      	orrs	r2, r3
 800c82e:	187b      	adds	r3, r7, r1
 800c830:	605a      	str	r2, [r3, #4]
                dlChannelReq.Rx1Frequency *= 100;
 800c832:	187b      	adds	r3, r7, r1
 800c834:	685b      	ldr	r3, [r3, #4]
 800c836:	2264      	movs	r2, #100	; 0x64
 800c838:	435a      	muls	r2, r3
 800c83a:	187b      	adds	r3, r7, r1
 800c83c:	605a      	str	r2, [r3, #4]

                status = RegionDlChannelReq( MacCtx.NvmCtx->Region, &dlChannelReq );
 800c83e:	4aeb      	ldr	r2, [pc, #940]	; (800cbec <ProcessMacCommands+0xb50>)
 800c840:	238e      	movs	r3, #142	; 0x8e
 800c842:	00db      	lsls	r3, r3, #3
 800c844:	58d3      	ldr	r3, [r2, r3]
 800c846:	781b      	ldrb	r3, [r3, #0]
 800c848:	187a      	adds	r2, r7, r1
 800c84a:	0011      	movs	r1, r2
 800c84c:	0018      	movs	r0, r3
 800c84e:	f006 fc7a 	bl	8013146 <RegionDlChannelReq>
 800c852:	0003      	movs	r3, r0
 800c854:	001a      	movs	r2, r3
 800c856:	193b      	adds	r3, r7, r4
 800c858:	701a      	strb	r2, [r3, #0]
                macCmdPayload[0] = status;
 800c85a:	193b      	adds	r3, r7, r4
 800c85c:	781a      	ldrb	r2, [r3, #0]
 800c85e:	2168      	movs	r1, #104	; 0x68
 800c860:	187b      	adds	r3, r7, r1
 800c862:	701a      	strb	r2, [r3, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 800c864:	187b      	adds	r3, r7, r1
 800c866:	2201      	movs	r2, #1
 800c868:	0019      	movs	r1, r3
 800c86a:	200a      	movs	r0, #10
 800c86c:	f003 fd50 	bl	8010310 <LoRaMacCommandsAddCmd>
                // Setup indication to inform the application
                SetMlmeScheduleUplinkIndication( );
 800c870:	f7ff fbfe 	bl	800c070 <SetMlmeScheduleUplinkIndication>
                break;
 800c874:	46c0      	nop			; (mov r8, r8)
 800c876:	2287      	movs	r2, #135	; 0x87
 800c878:	18bb      	adds	r3, r7, r2
 800c87a:	18ba      	adds	r2, r7, r2
 800c87c:	7812      	ldrb	r2, [r2, #0]
 800c87e:	701a      	strb	r2, [r3, #0]
 800c880:	e1a7      	b.n	800cbd2 <ProcessMacCommands+0xb36>
            }
            case SRV_MAC_DEVICE_TIME_ANS:
            {
                SysTime_t gpsEpochTime = { 0 };
 800c882:	241c      	movs	r4, #28
 800c884:	193b      	adds	r3, r7, r4
 800c886:	0018      	movs	r0, r3
 800c888:	2308      	movs	r3, #8
 800c88a:	001a      	movs	r2, r3
 800c88c:	2100      	movs	r1, #0
 800c88e:	f012 fc57 	bl	801f140 <memset>
                SysTime_t sysTime = { 0 };
 800c892:	2514      	movs	r5, #20
 800c894:	197b      	adds	r3, r7, r5
 800c896:	0018      	movs	r0, r3
 800c898:	2308      	movs	r3, #8
 800c89a:	001a      	movs	r2, r3
 800c89c:	2100      	movs	r1, #0
 800c89e:	f012 fc4f 	bl	801f140 <memset>
                SysTime_t sysTimeCurrent = { 0 };
 800c8a2:	260c      	movs	r6, #12
 800c8a4:	19bb      	adds	r3, r7, r6
 800c8a6:	0018      	movs	r0, r3
 800c8a8:	2308      	movs	r3, #8
 800c8aa:	001a      	movs	r2, r3
 800c8ac:	2100      	movs	r1, #0
 800c8ae:	f012 fc47 	bl	801f140 <memset>

                gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 800c8b2:	1cfb      	adds	r3, r7, #3
 800c8b4:	781b      	ldrb	r3, [r3, #0]
 800c8b6:	1cfa      	adds	r2, r7, #3
 800c8b8:	1c59      	adds	r1, r3, #1
 800c8ba:	7011      	strb	r1, [r2, #0]
 800c8bc:	001a      	movs	r2, r3
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	189b      	adds	r3, r3, r2
 800c8c2:	781b      	ldrb	r3, [r3, #0]
 800c8c4:	001a      	movs	r2, r3
 800c8c6:	0020      	movs	r0, r4
 800c8c8:	183b      	adds	r3, r7, r0
 800c8ca:	601a      	str	r2, [r3, #0]
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 800c8cc:	1cfb      	adds	r3, r7, #3
 800c8ce:	781b      	ldrb	r3, [r3, #0]
 800c8d0:	1cfa      	adds	r2, r7, #3
 800c8d2:	1c59      	adds	r1, r3, #1
 800c8d4:	7011      	strb	r1, [r2, #0]
 800c8d6:	001a      	movs	r2, r3
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	189b      	adds	r3, r3, r2
 800c8dc:	781b      	ldrb	r3, [r3, #0]
 800c8de:	021a      	lsls	r2, r3, #8
 800c8e0:	183b      	adds	r3, r7, r0
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	431a      	orrs	r2, r3
 800c8e6:	183b      	adds	r3, r7, r0
 800c8e8:	601a      	str	r2, [r3, #0]
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 800c8ea:	1cfb      	adds	r3, r7, #3
 800c8ec:	781b      	ldrb	r3, [r3, #0]
 800c8ee:	1cfa      	adds	r2, r7, #3
 800c8f0:	1c59      	adds	r1, r3, #1
 800c8f2:	7011      	strb	r1, [r2, #0]
 800c8f4:	001a      	movs	r2, r3
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	189b      	adds	r3, r3, r2
 800c8fa:	781b      	ldrb	r3, [r3, #0]
 800c8fc:	041a      	lsls	r2, r3, #16
 800c8fe:	183b      	adds	r3, r7, r0
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	431a      	orrs	r2, r3
 800c904:	183b      	adds	r3, r7, r0
 800c906:	601a      	str	r2, [r3, #0]
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 800c908:	1cfb      	adds	r3, r7, #3
 800c90a:	781b      	ldrb	r3, [r3, #0]
 800c90c:	1cfa      	adds	r2, r7, #3
 800c90e:	1c59      	adds	r1, r3, #1
 800c910:	7011      	strb	r1, [r2, #0]
 800c912:	001a      	movs	r2, r3
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	189b      	adds	r3, r3, r2
 800c918:	781b      	ldrb	r3, [r3, #0]
 800c91a:	061a      	lsls	r2, r3, #24
 800c91c:	183b      	adds	r3, r7, r0
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	431a      	orrs	r2, r3
 800c922:	183b      	adds	r3, r7, r0
 800c924:	601a      	str	r2, [r3, #0]
                gpsEpochTime.SubSeconds = payload[macIndex++];
 800c926:	1cfb      	adds	r3, r7, #3
 800c928:	781b      	ldrb	r3, [r3, #0]
 800c92a:	1cfa      	adds	r2, r7, #3
 800c92c:	1c59      	adds	r1, r3, #1
 800c92e:	7011      	strb	r1, [r2, #0]
 800c930:	001a      	movs	r2, r3
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	189b      	adds	r3, r3, r2
 800c936:	781b      	ldrb	r3, [r3, #0]
 800c938:	b21a      	sxth	r2, r3
 800c93a:	183b      	adds	r3, r7, r0
 800c93c:	809a      	strh	r2, [r3, #4]

                // Convert the fractional second received in ms
                // round( pow( 0.5, 8.0 ) * 1000 ) = 3.90625
                gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 800c93e:	0001      	movs	r1, r0
 800c940:	183b      	adds	r3, r7, r0
 800c942:	2204      	movs	r2, #4
 800c944:	5e9b      	ldrsh	r3, [r3, r2]
 800c946:	001a      	movs	r2, r3
 800c948:	0013      	movs	r3, r2
 800c94a:	015b      	lsls	r3, r3, #5
 800c94c:	1a9b      	subs	r3, r3, r2
 800c94e:	009b      	lsls	r3, r3, #2
 800c950:	189b      	adds	r3, r3, r2
 800c952:	00db      	lsls	r3, r3, #3
 800c954:	121b      	asrs	r3, r3, #8
 800c956:	b21a      	sxth	r2, r3
 800c958:	187b      	adds	r3, r7, r1
 800c95a:	809a      	strh	r2, [r3, #4]

                // Copy received GPS Epoch time into system time
                sysTime = gpsEpochTime;
 800c95c:	002c      	movs	r4, r5
 800c95e:	193b      	adds	r3, r7, r4
 800c960:	187a      	adds	r2, r7, r1
 800c962:	ca03      	ldmia	r2!, {r0, r1}
 800c964:	c303      	stmia	r3!, {r0, r1}
                // Add Unix to Gps epcoh offset. The system time is based on Unix time.
                sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 800c966:	193b      	adds	r3, r7, r4
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	4aa1      	ldr	r2, [pc, #644]	; (800cbf0 <ProcessMacCommands+0xb54>)
 800c96c:	189a      	adds	r2, r3, r2
 800c96e:	193b      	adds	r3, r7, r4
 800c970:	601a      	str	r2, [r3, #0]

                // Compensate time difference between Tx Done time and now
                sysTimeCurrent = SysTimeGet( );
 800c972:	19bb      	adds	r3, r7, r6
 800c974:	0018      	movs	r0, r3
 800c976:	f008 fe59 	bl	801562c <SysTimeGet>
                sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 800c97a:	236c      	movs	r3, #108	; 0x6c
 800c97c:	18fd      	adds	r5, r7, r3
 800c97e:	499b      	ldr	r1, [pc, #620]	; (800cbec <ProcessMacCommands+0xb50>)
 800c980:	23d3      	movs	r3, #211	; 0xd3
 800c982:	009b      	lsls	r3, r3, #2
 800c984:	0026      	movs	r6, r4
 800c986:	193a      	adds	r2, r7, r4
 800c988:	2404      	movs	r4, #4
 800c98a:	18c8      	adds	r0, r1, r3
 800c98c:	1900      	adds	r0, r0, r4
 800c98e:	466c      	mov	r4, sp
 800c990:	6800      	ldr	r0, [r0, #0]
 800c992:	6020      	str	r0, [r4, #0]
 800c994:	58cb      	ldr	r3, [r1, r3]
 800c996:	6811      	ldr	r1, [r2, #0]
 800c998:	6852      	ldr	r2, [r2, #4]
 800c99a:	0028      	movs	r0, r5
 800c99c:	f008 fdc6 	bl	801552c <SysTimeSub>
 800c9a0:	0034      	movs	r4, r6
 800c9a2:	0025      	movs	r5, r4
 800c9a4:	193c      	adds	r4, r7, r4
 800c9a6:	236c      	movs	r3, #108	; 0x6c
 800c9a8:	18fb      	adds	r3, r7, r3
 800c9aa:	260c      	movs	r6, #12
 800c9ac:	19ba      	adds	r2, r7, r6
 800c9ae:	4669      	mov	r1, sp
 800c9b0:	6858      	ldr	r0, [r3, #4]
 800c9b2:	6008      	str	r0, [r1, #0]
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	6811      	ldr	r1, [r2, #0]
 800c9b8:	6852      	ldr	r2, [r2, #4]
 800c9ba:	0020      	movs	r0, r4
 800c9bc:	f008 fd5e 	bl	801547c <SysTimeAdd>

                // Apply the new system time.
                SysTimeSet( sysTime );
 800c9c0:	002c      	movs	r4, r5
 800c9c2:	193b      	adds	r3, r7, r4
 800c9c4:	6818      	ldr	r0, [r3, #0]
 800c9c6:	6859      	ldr	r1, [r3, #4]
 800c9c8:	f008 fe04 	bl	80155d4 <SysTimeSet>
                LoRaMacClassBDeviceTimeAns( );
 800c9cc:	f003 fb1b 	bl	8010006 <LoRaMacClassBDeviceTimeAns>
                break;
 800c9d0:	46c0      	nop			; (mov r8, r8)
 800c9d2:	2287      	movs	r2, #135	; 0x87
 800c9d4:	18bb      	adds	r3, r7, r2
 800c9d6:	18ba      	adds	r2, r7, r2
 800c9d8:	7812      	ldrb	r2, [r2, #0]
 800c9da:	701a      	strb	r2, [r3, #0]
 800c9dc:	e0f9      	b.n	800cbd2 <ProcessMacCommands+0xb36>
            }
            case SRV_MAC_PING_SLOT_INFO_ANS:
            {
                // According to the specification, it is not allowed to process this answer in
                // a ping or multicast slot
                if( ( MacCtx.RxSlot != RX_SLOT_WIN_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_MULTICAST_SLOT ) )
 800c9de:	4b83      	ldr	r3, [pc, #524]	; (800cbec <ProcessMacCommands+0xb50>)
 800c9e0:	4a84      	ldr	r2, [pc, #528]	; (800cbf4 <ProcessMacCommands+0xb58>)
 800c9e2:	5c9b      	ldrb	r3, [r3, r2]
 800c9e4:	2b03      	cmp	r3, #3
 800c9e6:	d006      	beq.n	800c9f6 <ProcessMacCommands+0x95a>
 800c9e8:	4b80      	ldr	r3, [pc, #512]	; (800cbec <ProcessMacCommands+0xb50>)
 800c9ea:	4a82      	ldr	r2, [pc, #520]	; (800cbf4 <ProcessMacCommands+0xb58>)
 800c9ec:	5c9b      	ldrb	r3, [r3, r2]
 800c9ee:	2b04      	cmp	r3, #4
 800c9f0:	d001      	beq.n	800c9f6 <ProcessMacCommands+0x95a>
                {
                    LoRaMacClassBPingSlotInfoAns( );
 800c9f2:	f003 fae9 	bl	800ffc8 <LoRaMacClassBPingSlotInfoAns>
 800c9f6:	2287      	movs	r2, #135	; 0x87
 800c9f8:	18bb      	adds	r3, r7, r2
 800c9fa:	18ba      	adds	r2, r7, r2
 800c9fc:	7812      	ldrb	r2, [r2, #0]
 800c9fe:	701a      	strb	r2, [r3, #0]
                }
                break;
 800ca00:	e0e7      	b.n	800cbd2 <ProcessMacCommands+0xb36>
            }
            case SRV_MAC_PING_SLOT_CHANNEL_REQ:
            {
                uint8_t status = 0x03;
 800ca02:	207c      	movs	r0, #124	; 0x7c
 800ca04:	183b      	adds	r3, r7, r0
 800ca06:	2203      	movs	r2, #3
 800ca08:	701a      	strb	r2, [r3, #0]
                uint32_t frequency = 0;
 800ca0a:	2300      	movs	r3, #0
 800ca0c:	67bb      	str	r3, [r7, #120]	; 0x78
                uint8_t datarate;

                frequency = ( uint32_t )payload[macIndex++];
 800ca0e:	1cfb      	adds	r3, r7, #3
 800ca10:	781b      	ldrb	r3, [r3, #0]
 800ca12:	1cfa      	adds	r2, r7, #3
 800ca14:	1c59      	adds	r1, r3, #1
 800ca16:	7011      	strb	r1, [r2, #0]
 800ca18:	001a      	movs	r2, r3
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	189b      	adds	r3, r3, r2
 800ca1e:	781b      	ldrb	r3, [r3, #0]
 800ca20:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 800ca22:	1cfb      	adds	r3, r7, #3
 800ca24:	781b      	ldrb	r3, [r3, #0]
 800ca26:	1cfa      	adds	r2, r7, #3
 800ca28:	1c59      	adds	r1, r3, #1
 800ca2a:	7011      	strb	r1, [r2, #0]
 800ca2c:	001a      	movs	r2, r3
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	189b      	adds	r3, r3, r2
 800ca32:	781b      	ldrb	r3, [r3, #0]
 800ca34:	021b      	lsls	r3, r3, #8
 800ca36:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ca38:	4313      	orrs	r3, r2
 800ca3a:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 800ca3c:	1cfb      	adds	r3, r7, #3
 800ca3e:	781b      	ldrb	r3, [r3, #0]
 800ca40:	1cfa      	adds	r2, r7, #3
 800ca42:	1c59      	adds	r1, r3, #1
 800ca44:	7011      	strb	r1, [r2, #0]
 800ca46:	001a      	movs	r2, r3
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	189b      	adds	r3, r3, r2
 800ca4c:	781b      	ldrb	r3, [r3, #0]
 800ca4e:	041b      	lsls	r3, r3, #16
 800ca50:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ca52:	4313      	orrs	r3, r2
 800ca54:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency *= 100;
 800ca56:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ca58:	2264      	movs	r2, #100	; 0x64
 800ca5a:	4353      	muls	r3, r2
 800ca5c:	67bb      	str	r3, [r7, #120]	; 0x78
                datarate = payload[macIndex++] & 0x0F;
 800ca5e:	1cfb      	adds	r3, r7, #3
 800ca60:	781b      	ldrb	r3, [r3, #0]
 800ca62:	1cfa      	adds	r2, r7, #3
 800ca64:	1c59      	adds	r1, r3, #1
 800ca66:	7011      	strb	r1, [r2, #0]
 800ca68:	001a      	movs	r2, r3
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	189b      	adds	r3, r3, r2
 800ca6e:	781a      	ldrb	r2, [r3, #0]
 800ca70:	2677      	movs	r6, #119	; 0x77
 800ca72:	19bb      	adds	r3, r7, r6
 800ca74:	210f      	movs	r1, #15
 800ca76:	400a      	ands	r2, r1
 800ca78:	701a      	strb	r2, [r3, #0]

                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 800ca7a:	0005      	movs	r5, r0
 800ca7c:	183c      	adds	r4, r7, r0
 800ca7e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ca80:	19bb      	adds	r3, r7, r6
 800ca82:	781b      	ldrb	r3, [r3, #0]
 800ca84:	0011      	movs	r1, r2
 800ca86:	0018      	movs	r0, r3
 800ca88:	f003 faa3 	bl	800ffd2 <LoRaMacClassBPingSlotChannelReq>
 800ca8c:	0003      	movs	r3, r0
 800ca8e:	7023      	strb	r3, [r4, #0]
                macCmdPayload[0] = status;
 800ca90:	2168      	movs	r1, #104	; 0x68
 800ca92:	187b      	adds	r3, r7, r1
 800ca94:	0028      	movs	r0, r5
 800ca96:	183a      	adds	r2, r7, r0
 800ca98:	7812      	ldrb	r2, [r2, #0]
 800ca9a:	701a      	strb	r2, [r3, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
 800ca9c:	187b      	adds	r3, r7, r1
 800ca9e:	2201      	movs	r2, #1
 800caa0:	0019      	movs	r1, r3
 800caa2:	2011      	movs	r0, #17
 800caa4:	f003 fc34 	bl	8010310 <LoRaMacCommandsAddCmd>
 800caa8:	2287      	movs	r2, #135	; 0x87
 800caaa:	18bb      	adds	r3, r7, r2
 800caac:	18ba      	adds	r2, r7, r2
 800caae:	7812      	ldrb	r2, [r2, #0]
 800cab0:	701a      	strb	r2, [r3, #0]
                break;
 800cab2:	e08e      	b.n	800cbd2 <ProcessMacCommands+0xb36>
            }
            case SRV_MAC_BEACON_TIMING_ANS:
            {
                uint16_t beaconTimingDelay = 0;
 800cab4:	207e      	movs	r0, #126	; 0x7e
 800cab6:	183b      	adds	r3, r7, r0
 800cab8:	2200      	movs	r2, #0
 800caba:	801a      	strh	r2, [r3, #0]
                uint8_t beaconTimingChannel = 0;
 800cabc:	247d      	movs	r4, #125	; 0x7d
 800cabe:	193b      	adds	r3, r7, r4
 800cac0:	2200      	movs	r2, #0
 800cac2:	701a      	strb	r2, [r3, #0]

                beaconTimingDelay = ( uint16_t )payload[macIndex++];
 800cac4:	1cfb      	adds	r3, r7, #3
 800cac6:	781b      	ldrb	r3, [r3, #0]
 800cac8:	1cfa      	adds	r2, r7, #3
 800caca:	1c59      	adds	r1, r3, #1
 800cacc:	7011      	strb	r1, [r2, #0]
 800cace:	001a      	movs	r2, r3
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	189b      	adds	r3, r3, r2
 800cad4:	781a      	ldrb	r2, [r3, #0]
 800cad6:	183b      	adds	r3, r7, r0
 800cad8:	801a      	strh	r2, [r3, #0]
                beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 800cada:	1cfb      	adds	r3, r7, #3
 800cadc:	781b      	ldrb	r3, [r3, #0]
 800cade:	1cfa      	adds	r2, r7, #3
 800cae0:	1c59      	adds	r1, r3, #1
 800cae2:	7011      	strb	r1, [r2, #0]
 800cae4:	001a      	movs	r2, r3
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	189b      	adds	r3, r3, r2
 800caea:	781b      	ldrb	r3, [r3, #0]
 800caec:	021b      	lsls	r3, r3, #8
 800caee:	b21a      	sxth	r2, r3
 800caf0:	183b      	adds	r3, r7, r0
 800caf2:	2100      	movs	r1, #0
 800caf4:	5e5b      	ldrsh	r3, [r3, r1]
 800caf6:	4313      	orrs	r3, r2
 800caf8:	b21a      	sxth	r2, r3
 800cafa:	183b      	adds	r3, r7, r0
 800cafc:	801a      	strh	r2, [r3, #0]
                beaconTimingChannel = payload[macIndex++];
 800cafe:	1cfb      	adds	r3, r7, #3
 800cb00:	781b      	ldrb	r3, [r3, #0]
 800cb02:	1cfa      	adds	r2, r7, #3
 800cb04:	1c59      	adds	r1, r3, #1
 800cb06:	7011      	strb	r1, [r2, #0]
 800cb08:	001a      	movs	r2, r3
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	189a      	adds	r2, r3, r2
 800cb0e:	193b      	adds	r3, r7, r4
 800cb10:	7812      	ldrb	r2, [r2, #0]
 800cb12:	701a      	strb	r2, [r3, #0]

                LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 800cb14:	4b38      	ldr	r3, [pc, #224]	; (800cbf8 <ProcessMacCommands+0xb5c>)
 800cb16:	681a      	ldr	r2, [r3, #0]
 800cb18:	193b      	adds	r3, r7, r4
 800cb1a:	7819      	ldrb	r1, [r3, #0]
 800cb1c:	183b      	adds	r3, r7, r0
 800cb1e:	881b      	ldrh	r3, [r3, #0]
 800cb20:	0018      	movs	r0, r3
 800cb22:	f003 fa62 	bl	800ffea <LoRaMacClassBBeaconTimingAns>
 800cb26:	2287      	movs	r2, #135	; 0x87
 800cb28:	18bb      	adds	r3, r7, r2
 800cb2a:	18ba      	adds	r2, r7, r2
 800cb2c:	7812      	ldrb	r2, [r2, #0]
 800cb2e:	701a      	strb	r2, [r3, #0]
                break;
 800cb30:	e04f      	b.n	800cbd2 <ProcessMacCommands+0xb36>
            }
            case SRV_MAC_BEACON_FREQ_REQ:
                {
                    uint32_t frequency = 0;
 800cb32:	2300      	movs	r3, #0
 800cb34:	2080      	movs	r0, #128	; 0x80
 800cb36:	183a      	adds	r2, r7, r0
 800cb38:	6013      	str	r3, [r2, #0]

                    frequency = ( uint32_t )payload[macIndex++];
 800cb3a:	1cfb      	adds	r3, r7, #3
 800cb3c:	781b      	ldrb	r3, [r3, #0]
 800cb3e:	1cfa      	adds	r2, r7, #3
 800cb40:	1c59      	adds	r1, r3, #1
 800cb42:	7011      	strb	r1, [r2, #0]
 800cb44:	001a      	movs	r2, r3
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	189b      	adds	r3, r3, r2
 800cb4a:	781b      	ldrb	r3, [r3, #0]
 800cb4c:	183a      	adds	r2, r7, r0
 800cb4e:	6013      	str	r3, [r2, #0]
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 800cb50:	1cfb      	adds	r3, r7, #3
 800cb52:	781b      	ldrb	r3, [r3, #0]
 800cb54:	1cfa      	adds	r2, r7, #3
 800cb56:	1c59      	adds	r1, r3, #1
 800cb58:	7011      	strb	r1, [r2, #0]
 800cb5a:	001a      	movs	r2, r3
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	189b      	adds	r3, r3, r2
 800cb60:	781b      	ldrb	r3, [r3, #0]
 800cb62:	021b      	lsls	r3, r3, #8
 800cb64:	183a      	adds	r2, r7, r0
 800cb66:	6812      	ldr	r2, [r2, #0]
 800cb68:	4313      	orrs	r3, r2
 800cb6a:	183a      	adds	r2, r7, r0
 800cb6c:	6013      	str	r3, [r2, #0]
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 800cb6e:	1cfb      	adds	r3, r7, #3
 800cb70:	781b      	ldrb	r3, [r3, #0]
 800cb72:	1cfa      	adds	r2, r7, #3
 800cb74:	1c59      	adds	r1, r3, #1
 800cb76:	7011      	strb	r1, [r2, #0]
 800cb78:	001a      	movs	r2, r3
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	189b      	adds	r3, r3, r2
 800cb7e:	781b      	ldrb	r3, [r3, #0]
 800cb80:	041b      	lsls	r3, r3, #16
 800cb82:	183a      	adds	r2, r7, r0
 800cb84:	6812      	ldr	r2, [r2, #0]
 800cb86:	4313      	orrs	r3, r2
 800cb88:	183a      	adds	r2, r7, r0
 800cb8a:	6013      	str	r3, [r2, #0]
                    frequency *= 100;
 800cb8c:	183b      	adds	r3, r7, r0
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	2264      	movs	r2, #100	; 0x64
 800cb92:	4353      	muls	r3, r2
 800cb94:	183a      	adds	r2, r7, r0
 800cb96:	6013      	str	r3, [r2, #0]

                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 800cb98:	183b      	adds	r3, r7, r0
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	0018      	movs	r0, r3
 800cb9e:	f003 fa37 	bl	8010010 <LoRaMacClassBBeaconFreqReq>
 800cba2:	1e03      	subs	r3, r0, #0
 800cba4:	d004      	beq.n	800cbb0 <ProcessMacCommands+0xb14>
                    {
                        macCmdPayload[0] = 1;
 800cba6:	2368      	movs	r3, #104	; 0x68
 800cba8:	18fb      	adds	r3, r7, r3
 800cbaa:	2201      	movs	r2, #1
 800cbac:	701a      	strb	r2, [r3, #0]
 800cbae:	e003      	b.n	800cbb8 <ProcessMacCommands+0xb1c>
                    }
                    else
                    {
                        macCmdPayload[0] = 0;
 800cbb0:	2368      	movs	r3, #104	; 0x68
 800cbb2:	18fb      	adds	r3, r7, r3
 800cbb4:	2200      	movs	r2, #0
 800cbb6:	701a      	strb	r2, [r3, #0]
                    }
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 800cbb8:	2368      	movs	r3, #104	; 0x68
 800cbba:	18fb      	adds	r3, r7, r3
 800cbbc:	2201      	movs	r2, #1
 800cbbe:	0019      	movs	r1, r3
 800cbc0:	2013      	movs	r0, #19
 800cbc2:	f003 fba5 	bl	8010310 <LoRaMacCommandsAddCmd>
 800cbc6:	2287      	movs	r2, #135	; 0x87
 800cbc8:	18bb      	adds	r3, r7, r2
 800cbca:	18ba      	adds	r2, r7, r2
 800cbcc:	7812      	ldrb	r2, [r2, #0]
 800cbce:	701a      	strb	r2, [r3, #0]
                }
                break;
 800cbd0:	46c0      	nop			; (mov r8, r8)
    while( macIndex < commandsSize )
 800cbd2:	1cfa      	adds	r2, r7, #3
 800cbd4:	1cbb      	adds	r3, r7, #2
 800cbd6:	7812      	ldrb	r2, [r2, #0]
 800cbd8:	781b      	ldrb	r3, [r3, #0]
 800cbda:	429a      	cmp	r2, r3
 800cbdc:	d201      	bcs.n	800cbe2 <ProcessMacCommands+0xb46>
 800cbde:	f7ff fa7e 	bl	800c0de <ProcessMacCommands+0x42>
 800cbe2:	e000      	b.n	800cbe6 <ProcessMacCommands+0xb4a>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
 800cbe4:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 800cbe6:	46bd      	mov	sp, r7
 800cbe8:	b023      	add	sp, #140	; 0x8c
 800cbea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cbec:	20000708 	.word	0x20000708
 800cbf0:	12d53d80 	.word	0x12d53d80
 800cbf4:	0000046c 	.word	0x0000046c
 800cbf8:	2000156c 	.word	0x2000156c

0800cbfc <Send>:

LoRaMacStatus_t Send( LoRaMacHeader_t* macHdr, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 800cbfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cbfe:	b08f      	sub	sp, #60	; 0x3c
 800cc00:	af02      	add	r7, sp, #8
 800cc02:	60f8      	str	r0, [r7, #12]
 800cc04:	0008      	movs	r0, r1
 800cc06:	607a      	str	r2, [r7, #4]
 800cc08:	0019      	movs	r1, r3
 800cc0a:	230b      	movs	r3, #11
 800cc0c:	18fb      	adds	r3, r7, r3
 800cc0e:	1c02      	adds	r2, r0, #0
 800cc10:	701a      	strb	r2, [r3, #0]
 800cc12:	2308      	movs	r3, #8
 800cc14:	18fb      	adds	r3, r7, r3
 800cc16:	1c0a      	adds	r2, r1, #0
 800cc18:	801a      	strh	r2, [r3, #0]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800cc1a:	232f      	movs	r3, #47	; 0x2f
 800cc1c:	18fb      	adds	r3, r7, r3
 800cc1e:	2203      	movs	r2, #3
 800cc20:	701a      	strb	r2, [r3, #0]
    int8_t datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800cc22:	4a99      	ldr	r2, [pc, #612]	; (800ce88 <Send+0x28c>)
 800cc24:	238e      	movs	r3, #142	; 0x8e
 800cc26:	00db      	lsls	r3, r3, #3
 800cc28:	58d2      	ldr	r2, [r2, r3]
 800cc2a:	232e      	movs	r3, #46	; 0x2e
 800cc2c:	18fb      	adds	r3, r7, r3
 800cc2e:	21d5      	movs	r1, #213	; 0xd5
 800cc30:	5c52      	ldrb	r2, [r2, r1]
 800cc32:	701a      	strb	r2, [r3, #0]
    int8_t txPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 800cc34:	4a94      	ldr	r2, [pc, #592]	; (800ce88 <Send+0x28c>)
 800cc36:	238e      	movs	r3, #142	; 0x8e
 800cc38:	00db      	lsls	r3, r3, #3
 800cc3a:	58d2      	ldr	r2, [r2, r3]
 800cc3c:	232d      	movs	r3, #45	; 0x2d
 800cc3e:	18fb      	adds	r3, r7, r3
 800cc40:	21d4      	movs	r1, #212	; 0xd4
 800cc42:	5c52      	ldrb	r2, [r2, r1]
 800cc44:	701a      	strb	r2, [r3, #0]
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 800cc46:	4a90      	ldr	r2, [pc, #576]	; (800ce88 <Send+0x28c>)
 800cc48:	238e      	movs	r3, #142	; 0x8e
 800cc4a:	00db      	lsls	r3, r3, #3
 800cc4c:	58d3      	ldr	r3, [r2, r3]
 800cc4e:	22cc      	movs	r2, #204	; 0xcc
 800cc50:	589b      	ldr	r3, [r3, r2]
 800cc52:	62bb      	str	r3, [r7, #40]	; 0x28
    CalcNextAdrParams_t adrNext;

    // Check if we are joined
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 800cc54:	4a8c      	ldr	r2, [pc, #560]	; (800ce88 <Send+0x28c>)
 800cc56:	238e      	movs	r3, #142	; 0x8e
 800cc58:	00db      	lsls	r3, r3, #3
 800cc5a:	58d2      	ldr	r2, [r2, r3]
 800cc5c:	2389      	movs	r3, #137	; 0x89
 800cc5e:	009b      	lsls	r3, r3, #2
 800cc60:	5cd3      	ldrb	r3, [r2, r3]
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d101      	bne.n	800cc6a <Send+0x6e>
    {
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 800cc66:	2307      	movs	r3, #7
 800cc68:	e10a      	b.n	800ce80 <Send+0x284>
    }
    if( MacCtx.NvmCtx->MaxDCycle == 0 )
 800cc6a:	4a87      	ldr	r2, [pc, #540]	; (800ce88 <Send+0x28c>)
 800cc6c:	238e      	movs	r3, #142	; 0x8e
 800cc6e:	00db      	lsls	r3, r3, #3
 800cc70:	58d2      	ldr	r2, [r2, r3]
 800cc72:	2312      	movs	r3, #18
 800cc74:	33ff      	adds	r3, #255	; 0xff
 800cc76:	5cd3      	ldrb	r3, [r2, r3]
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d104      	bne.n	800cc86 <Send+0x8a>
    {
        MacCtx.AggregatedTimeOff = 0;
 800cc7c:	4a82      	ldr	r2, [pc, #520]	; (800ce88 <Send+0x28c>)
 800cc7e:	23d1      	movs	r3, #209	; 0xd1
 800cc80:	009b      	lsls	r3, r3, #2
 800cc82:	2100      	movs	r1, #0
 800cc84:	50d1      	str	r1, [r2, r3]
    }

    fCtrl.Value = 0;
 800cc86:	202c      	movs	r0, #44	; 0x2c
 800cc88:	183b      	adds	r3, r7, r0
 800cc8a:	2200      	movs	r2, #0
 800cc8c:	701a      	strb	r2, [r3, #0]
    fCtrl.Bits.FOptsLen      = 0;
 800cc8e:	183b      	adds	r3, r7, r0
 800cc90:	781a      	ldrb	r2, [r3, #0]
 800cc92:	210f      	movs	r1, #15
 800cc94:	438a      	bics	r2, r1
 800cc96:	701a      	strb	r2, [r3, #0]
    fCtrl.Bits.Adr           = MacCtx.NvmCtx->AdrCtrlOn;
 800cc98:	4a7b      	ldr	r2, [pc, #492]	; (800ce88 <Send+0x28c>)
 800cc9a:	238e      	movs	r3, #142	; 0x8e
 800cc9c:	00db      	lsls	r3, r3, #3
 800cc9e:	58d3      	ldr	r3, [r2, r3]
 800cca0:	22ca      	movs	r2, #202	; 0xca
 800cca2:	5c9a      	ldrb	r2, [r3, r2]
 800cca4:	183b      	adds	r3, r7, r0
 800cca6:	01d0      	lsls	r0, r2, #7
 800cca8:	781a      	ldrb	r2, [r3, #0]
 800ccaa:	217f      	movs	r1, #127	; 0x7f
 800ccac:	400a      	ands	r2, r1
 800ccae:	1c11      	adds	r1, r2, #0
 800ccb0:	1c02      	adds	r2, r0, #0
 800ccb2:	430a      	orrs	r2, r1
 800ccb4:	701a      	strb	r2, [r3, #0]

    // Check class b
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 800ccb6:	4a74      	ldr	r2, [pc, #464]	; (800ce88 <Send+0x28c>)
 800ccb8:	238e      	movs	r3, #142	; 0x8e
 800ccba:	00db      	lsls	r3, r3, #3
 800ccbc:	58d3      	ldr	r3, [r2, r3]
 800ccbe:	22c8      	movs	r2, #200	; 0xc8
 800ccc0:	5c9b      	ldrb	r3, [r3, r2]
 800ccc2:	2b01      	cmp	r3, #1
 800ccc4:	d106      	bne.n	800ccd4 <Send+0xd8>
    {
        fCtrl.Bits.FPending      = 1;
 800ccc6:	232c      	movs	r3, #44	; 0x2c
 800ccc8:	18fb      	adds	r3, r7, r3
 800ccca:	781a      	ldrb	r2, [r3, #0]
 800cccc:	2110      	movs	r1, #16
 800ccce:	430a      	orrs	r2, r1
 800ccd0:	701a      	strb	r2, [r3, #0]
 800ccd2:	e005      	b.n	800cce0 <Send+0xe4>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
 800ccd4:	232c      	movs	r3, #44	; 0x2c
 800ccd6:	18fb      	adds	r3, r7, r3
 800ccd8:	781a      	ldrb	r2, [r3, #0]
 800ccda:	2110      	movs	r1, #16
 800ccdc:	438a      	bics	r2, r1
 800ccde:	701a      	strb	r2, [r3, #0]
    }

    // Check server ack
    if( MacCtx.NvmCtx->SrvAckRequested == true )
 800cce0:	4a69      	ldr	r2, [pc, #420]	; (800ce88 <Send+0x28c>)
 800cce2:	238e      	movs	r3, #142	; 0x8e
 800cce4:	00db      	lsls	r3, r3, #3
 800cce6:	58d3      	ldr	r3, [r2, r3]
 800cce8:	4a68      	ldr	r2, [pc, #416]	; (800ce8c <Send+0x290>)
 800ccea:	5c9b      	ldrb	r3, [r3, r2]
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d005      	beq.n	800ccfc <Send+0x100>
    {
        fCtrl.Bits.Ack = 1;
 800ccf0:	232c      	movs	r3, #44	; 0x2c
 800ccf2:	18fb      	adds	r3, r7, r3
 800ccf4:	781a      	ldrb	r2, [r3, #0]
 800ccf6:	2120      	movs	r1, #32
 800ccf8:	430a      	orrs	r2, r1
 800ccfa:	701a      	strb	r2, [r3, #0]
    }

    // ADR next request
    adrNext.Version = MacCtx.NvmCtx->Version;
 800ccfc:	4a62      	ldr	r2, [pc, #392]	; (800ce88 <Send+0x28c>)
 800ccfe:	238e      	movs	r3, #142	; 0x8e
 800cd00:	00db      	lsls	r3, r3, #3
 800cd02:	58d1      	ldr	r1, [r2, r3]
 800cd04:	2014      	movs	r0, #20
 800cd06:	183b      	adds	r3, r7, r0
 800cd08:	2288      	movs	r2, #136	; 0x88
 800cd0a:	0092      	lsls	r2, r2, #2
 800cd0c:	588a      	ldr	r2, [r1, r2]
 800cd0e:	601a      	str	r2, [r3, #0]
    adrNext.UpdateChanMask = true;
 800cd10:	0001      	movs	r1, r0
 800cd12:	187b      	adds	r3, r7, r1
 800cd14:	2201      	movs	r2, #1
 800cd16:	711a      	strb	r2, [r3, #4]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 800cd18:	242c      	movs	r4, #44	; 0x2c
 800cd1a:	193b      	adds	r3, r7, r4
 800cd1c:	781b      	ldrb	r3, [r3, #0]
 800cd1e:	061b      	lsls	r3, r3, #24
 800cd20:	0fdb      	lsrs	r3, r3, #31
 800cd22:	b2db      	uxtb	r3, r3
 800cd24:	1e5a      	subs	r2, r3, #1
 800cd26:	4193      	sbcs	r3, r2
 800cd28:	b2da      	uxtb	r2, r3
 800cd2a:	0008      	movs	r0, r1
 800cd2c:	183b      	adds	r3, r7, r0
 800cd2e:	715a      	strb	r2, [r3, #5]
    adrNext.AdrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 800cd30:	4a55      	ldr	r2, [pc, #340]	; (800ce88 <Send+0x28c>)
 800cd32:	238e      	movs	r3, #142	; 0x8e
 800cd34:	00db      	lsls	r3, r3, #3
 800cd36:	58d3      	ldr	r3, [r2, r3]
 800cd38:	22cc      	movs	r2, #204	; 0xcc
 800cd3a:	589a      	ldr	r2, [r3, r2]
 800cd3c:	183b      	adds	r3, r7, r0
 800cd3e:	609a      	str	r2, [r3, #8]
    adrNext.AdrAckLimit = MacCtx.NvmCtx->AdrAckLimit;
 800cd40:	4a51      	ldr	r2, [pc, #324]	; (800ce88 <Send+0x28c>)
 800cd42:	238e      	movs	r3, #142	; 0x8e
 800cd44:	00db      	lsls	r3, r3, #3
 800cd46:	58d3      	ldr	r3, [r2, r3]
 800cd48:	22d0      	movs	r2, #208	; 0xd0
 800cd4a:	5a9a      	ldrh	r2, [r3, r2]
 800cd4c:	183b      	adds	r3, r7, r0
 800cd4e:	819a      	strh	r2, [r3, #12]
    adrNext.AdrAckDelay = MacCtx.NvmCtx->AdrAckDelay;
 800cd50:	4a4d      	ldr	r2, [pc, #308]	; (800ce88 <Send+0x28c>)
 800cd52:	238e      	movs	r3, #142	; 0x8e
 800cd54:	00db      	lsls	r3, r3, #3
 800cd56:	58d3      	ldr	r3, [r2, r3]
 800cd58:	22d2      	movs	r2, #210	; 0xd2
 800cd5a:	5a9a      	ldrh	r2, [r3, r2]
 800cd5c:	183b      	adds	r3, r7, r0
 800cd5e:	81da      	strh	r2, [r3, #14]
    adrNext.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800cd60:	4a49      	ldr	r2, [pc, #292]	; (800ce88 <Send+0x28c>)
 800cd62:	238e      	movs	r3, #142	; 0x8e
 800cd64:	00db      	lsls	r3, r3, #3
 800cd66:	58d3      	ldr	r3, [r2, r3]
 800cd68:	22d5      	movs	r2, #213	; 0xd5
 800cd6a:	569a      	ldrsb	r2, [r3, r2]
 800cd6c:	183b      	adds	r3, r7, r0
 800cd6e:	741a      	strb	r2, [r3, #16]
    adrNext.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 800cd70:	4a45      	ldr	r2, [pc, #276]	; (800ce88 <Send+0x28c>)
 800cd72:	238e      	movs	r3, #142	; 0x8e
 800cd74:	00db      	lsls	r3, r3, #3
 800cd76:	58d3      	ldr	r3, [r2, r3]
 800cd78:	22d4      	movs	r2, #212	; 0xd4
 800cd7a:	569a      	ldrsb	r2, [r3, r2]
 800cd7c:	183b      	adds	r3, r7, r0
 800cd7e:	745a      	strb	r2, [r3, #17]
    adrNext.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800cd80:	4a41      	ldr	r2, [pc, #260]	; (800ce88 <Send+0x28c>)
 800cd82:	238e      	movs	r3, #142	; 0x8e
 800cd84:	00db      	lsls	r3, r3, #3
 800cd86:	58d2      	ldr	r2, [r2, r3]
 800cd88:	2380      	movs	r3, #128	; 0x80
 800cd8a:	005b      	lsls	r3, r3, #1
 800cd8c:	5cd2      	ldrb	r2, [r2, r3]
 800cd8e:	183b      	adds	r3, r7, r0
 800cd90:	749a      	strb	r2, [r3, #18]
    adrNext.Region = MacCtx.NvmCtx->Region;
 800cd92:	4a3d      	ldr	r2, [pc, #244]	; (800ce88 <Send+0x28c>)
 800cd94:	238e      	movs	r3, #142	; 0x8e
 800cd96:	00db      	lsls	r3, r3, #3
 800cd98:	58d3      	ldr	r3, [r2, r3]
 800cd9a:	781a      	ldrb	r2, [r3, #0]
 800cd9c:	183b      	adds	r3, r7, r0
 800cd9e:	74da      	strb	r2, [r3, #19]

    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &MacCtx.NvmCtx->MacParams.ChannelsDatarate,
 800cda0:	4a39      	ldr	r2, [pc, #228]	; (800ce88 <Send+0x28c>)
 800cda2:	238e      	movs	r3, #142	; 0x8e
 800cda4:	00db      	lsls	r3, r3, #3
 800cda6:	58d3      	ldr	r3, [r2, r3]
 800cda8:	33d5      	adds	r3, #213	; 0xd5
 800cdaa:	0019      	movs	r1, r3
                                               &MacCtx.NvmCtx->MacParams.ChannelsTxPower, &adrAckCounter );
 800cdac:	4a36      	ldr	r2, [pc, #216]	; (800ce88 <Send+0x28c>)
 800cdae:	238e      	movs	r3, #142	; 0x8e
 800cdb0:	00db      	lsls	r3, r3, #3
 800cdb2:	58d3      	ldr	r3, [r2, r3]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &MacCtx.NvmCtx->MacParams.ChannelsDatarate,
 800cdb4:	33d4      	adds	r3, #212	; 0xd4
 800cdb6:	001a      	movs	r2, r3
 800cdb8:	2328      	movs	r3, #40	; 0x28
 800cdba:	18fb      	adds	r3, r7, r3
 800cdbc:	1838      	adds	r0, r7, r0
 800cdbe:	f003 f83b 	bl	800fe38 <LoRaMacAdrCalcNext>
 800cdc2:	0003      	movs	r3, r0
 800cdc4:	0019      	movs	r1, r3
 800cdc6:	0026      	movs	r6, r4
 800cdc8:	193b      	adds	r3, r7, r4
 800cdca:	2201      	movs	r2, #1
 800cdcc:	400a      	ands	r2, r1
 800cdce:	0190      	lsls	r0, r2, #6
 800cdd0:	781a      	ldrb	r2, [r3, #0]
 800cdd2:	2140      	movs	r1, #64	; 0x40
 800cdd4:	438a      	bics	r2, r1
 800cdd6:	1c11      	adds	r1, r2, #0
 800cdd8:	1c02      	adds	r2, r0, #0
 800cdda:	430a      	orrs	r2, r1
 800cddc:	701a      	strb	r2, [r3, #0]

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 800cdde:	232f      	movs	r3, #47	; 0x2f
 800cde0:	18fc      	adds	r4, r7, r3
 800cde2:	687d      	ldr	r5, [r7, #4]
 800cde4:	220b      	movs	r2, #11
 800cde6:	18bb      	adds	r3, r7, r2
 800cde8:	781a      	ldrb	r2, [r3, #0]
 800cdea:	19b9      	adds	r1, r7, r6
 800cdec:	68f8      	ldr	r0, [r7, #12]
 800cdee:	2608      	movs	r6, #8
 800cdf0:	19bb      	adds	r3, r7, r6
 800cdf2:	881b      	ldrh	r3, [r3, #0]
 800cdf4:	9300      	str	r3, [sp, #0]
 800cdf6:	002b      	movs	r3, r5
 800cdf8:	f000 fc18 	bl	800d62c <PrepareFrame>
 800cdfc:	0003      	movs	r3, r0
 800cdfe:	7023      	strb	r3, [r4, #0]

    // Validate status
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 800ce00:	232f      	movs	r3, #47	; 0x2f
 800ce02:	18fb      	adds	r3, r7, r3
 800ce04:	781b      	ldrb	r3, [r3, #0]
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d004      	beq.n	800ce14 <Send+0x218>
 800ce0a:	232f      	movs	r3, #47	; 0x2f
 800ce0c:	18fb      	adds	r3, r7, r3
 800ce0e:	781b      	ldrb	r3, [r3, #0]
 800ce10:	2b0a      	cmp	r3, #10
 800ce12:	d106      	bne.n	800ce22 <Send+0x226>
    {
        // Schedule frame, do not allow delayed transmissions
        status = ScheduleTx( false );
 800ce14:	232f      	movs	r3, #47	; 0x2f
 800ce16:	18fc      	adds	r4, r7, r3
 800ce18:	2000      	movs	r0, #0
 800ce1a:	f000 f89b 	bl	800cf54 <ScheduleTx>
 800ce1e:	0003      	movs	r3, r0
 800ce20:	7023      	strb	r3, [r4, #0]
    }

    // Post processing
    if( status != LORAMAC_STATUS_OK )
 800ce22:	232f      	movs	r3, #47	; 0x2f
 800ce24:	18fb      	adds	r3, r7, r3
 800ce26:	781b      	ldrb	r3, [r3, #0]
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d012      	beq.n	800ce52 <Send+0x256>
    {
        // Bad case - restore
        // Store local variables
        MacCtx.NvmCtx->MacParams.ChannelsDatarate = datarate;
 800ce2c:	4a16      	ldr	r2, [pc, #88]	; (800ce88 <Send+0x28c>)
 800ce2e:	238e      	movs	r3, #142	; 0x8e
 800ce30:	00db      	lsls	r3, r3, #3
 800ce32:	58d3      	ldr	r3, [r2, r3]
 800ce34:	222e      	movs	r2, #46	; 0x2e
 800ce36:	18ba      	adds	r2, r7, r2
 800ce38:	21d5      	movs	r1, #213	; 0xd5
 800ce3a:	7812      	ldrb	r2, [r2, #0]
 800ce3c:	545a      	strb	r2, [r3, r1]
        MacCtx.NvmCtx->MacParams.ChannelsTxPower = txPower;
 800ce3e:	4a12      	ldr	r2, [pc, #72]	; (800ce88 <Send+0x28c>)
 800ce40:	238e      	movs	r3, #142	; 0x8e
 800ce42:	00db      	lsls	r3, r3, #3
 800ce44:	58d3      	ldr	r3, [r2, r3]
 800ce46:	222d      	movs	r2, #45	; 0x2d
 800ce48:	18ba      	adds	r2, r7, r2
 800ce4a:	21d4      	movs	r1, #212	; 0xd4
 800ce4c:	7812      	ldrb	r2, [r2, #0]
 800ce4e:	545a      	strb	r2, [r3, r1]
 800ce50:	e013      	b.n	800ce7a <Send+0x27e>
    }
    else
    {
        // Good case
        MacCtx.NvmCtx->SrvAckRequested = false;
 800ce52:	4a0d      	ldr	r2, [pc, #52]	; (800ce88 <Send+0x28c>)
 800ce54:	238e      	movs	r3, #142	; 0x8e
 800ce56:	00db      	lsls	r3, r3, #3
 800ce58:	58d3      	ldr	r3, [r2, r3]
 800ce5a:	4a0c      	ldr	r2, [pc, #48]	; (800ce8c <Send+0x290>)
 800ce5c:	2100      	movs	r1, #0
 800ce5e:	5499      	strb	r1, [r3, r2]
        MacCtx.NvmCtx->AdrAckCounter = adrAckCounter;
 800ce60:	4a09      	ldr	r2, [pc, #36]	; (800ce88 <Send+0x28c>)
 800ce62:	238e      	movs	r3, #142	; 0x8e
 800ce64:	00db      	lsls	r3, r3, #3
 800ce66:	58d3      	ldr	r3, [r2, r3]
 800ce68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ce6a:	21cc      	movs	r1, #204	; 0xcc
 800ce6c:	505a      	str	r2, [r3, r1]
        // Remove all none sticky MAC commands
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 800ce6e:	f003 fad9 	bl	8010424 <LoRaMacCommandsRemoveNoneStickyCmds>
 800ce72:	1e03      	subs	r3, r0, #0
 800ce74:	d001      	beq.n	800ce7a <Send+0x27e>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800ce76:	2313      	movs	r3, #19
 800ce78:	e002      	b.n	800ce80 <Send+0x284>
        }
    }
    return status;
 800ce7a:	232f      	movs	r3, #47	; 0x2f
 800ce7c:	18fb      	adds	r3, r7, r3
 800ce7e:	781b      	ldrb	r3, [r3, #0]
}
 800ce80:	0018      	movs	r0, r3
 800ce82:	46bd      	mov	sp, r7
 800ce84:	b00d      	add	sp, #52	; 0x34
 800ce86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce88:	20000708 	.word	0x20000708
 800ce8c:	0000021a 	.word	0x0000021a

0800ce90 <SendReJoinReq>:

LoRaMacStatus_t SendReJoinReq( JoinReqIdentifier_t joinReqType )
{
 800ce90:	b5b0      	push	{r4, r5, r7, lr}
 800ce92:	b084      	sub	sp, #16
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	0002      	movs	r2, r0
 800ce98:	1dfb      	adds	r3, r7, #7
 800ce9a:	701a      	strb	r2, [r3, #0]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ce9c:	230e      	movs	r3, #14
 800ce9e:	18fb      	adds	r3, r7, r3
 800cea0:	2200      	movs	r2, #0
 800cea2:	701a      	strb	r2, [r3, #0]
    LoRaMacHeader_t macHdr;
    macHdr.Value = 0;
 800cea4:	230c      	movs	r3, #12
 800cea6:	18fb      	adds	r3, r7, r3
 800cea8:	2200      	movs	r2, #0
 800ceaa:	701a      	strb	r2, [r3, #0]
    bool allowDelayedTx = true;
 800ceac:	230f      	movs	r3, #15
 800ceae:	18fb      	adds	r3, r7, r3
 800ceb0:	2201      	movs	r2, #1
 800ceb2:	701a      	strb	r2, [r3, #0]

    // Setup join/rejoin message
    switch( joinReqType )
 800ceb4:	1dfb      	adds	r3, r7, #7
 800ceb6:	781b      	ldrb	r3, [r3, #0]
 800ceb8:	2bff      	cmp	r3, #255	; 0xff
 800ceba:	d12d      	bne.n	800cf18 <SendReJoinReq+0x88>
    {
        case JOIN_REQ:
        {
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 800cebc:	4a21      	ldr	r2, [pc, #132]	; (800cf44 <SendReJoinReq+0xb4>)
 800cebe:	2386      	movs	r3, #134	; 0x86
 800cec0:	005b      	lsls	r3, r3, #1
 800cec2:	2100      	movs	r1, #0
 800cec4:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 800cec6:	4a1f      	ldr	r2, [pc, #124]	; (800cf44 <SendReJoinReq+0xb4>)
 800cec8:	2388      	movs	r3, #136	; 0x88
 800ceca:	005b      	lsls	r3, r3, #1
 800cecc:	491e      	ldr	r1, [pc, #120]	; (800cf48 <SendReJoinReq+0xb8>)
 800cece:	50d1      	str	r1, [r2, r3]
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800ced0:	4a1c      	ldr	r2, [pc, #112]	; (800cf44 <SendReJoinReq+0xb4>)
 800ced2:	238a      	movs	r3, #138	; 0x8a
 800ced4:	005b      	lsls	r3, r3, #1
 800ced6:	21ff      	movs	r1, #255	; 0xff
 800ced8:	54d1      	strb	r1, [r2, r3]

            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 800ceda:	200c      	movs	r0, #12
 800cedc:	183b      	adds	r3, r7, r0
 800cede:	781a      	ldrb	r2, [r3, #0]
 800cee0:	211f      	movs	r1, #31
 800cee2:	400a      	ands	r2, r1
 800cee4:	701a      	strb	r2, [r3, #0]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 800cee6:	183b      	adds	r3, r7, r0
 800cee8:	7819      	ldrb	r1, [r3, #0]
 800ceea:	4a16      	ldr	r2, [pc, #88]	; (800cf44 <SendReJoinReq+0xb4>)
 800ceec:	2316      	movs	r3, #22
 800ceee:	33ff      	adds	r3, #255	; 0xff
 800cef0:	54d1      	strb	r1, [r2, r3]

            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, MacCtx.JoinEui, LORAMAC_JOIN_EUI_FIELD_SIZE );
 800cef2:	4b14      	ldr	r3, [pc, #80]	; (800cf44 <SendReJoinReq+0xb4>)
 800cef4:	6859      	ldr	r1, [r3, #4]
 800cef6:	4b15      	ldr	r3, [pc, #84]	; (800cf4c <SendReJoinReq+0xbc>)
 800cef8:	2208      	movs	r2, #8
 800cefa:	0018      	movs	r0, r3
 800cefc:	f008 fd78 	bl	80159f0 <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, MacCtx.DevEui, LORAMAC_DEV_EUI_FIELD_SIZE );
 800cf00:	4b10      	ldr	r3, [pc, #64]	; (800cf44 <SendReJoinReq+0xb4>)
 800cf02:	6819      	ldr	r1, [r3, #0]
 800cf04:	4b12      	ldr	r3, [pc, #72]	; (800cf50 <SendReJoinReq+0xc0>)
 800cf06:	2208      	movs	r2, #8
 800cf08:	0018      	movs	r0, r3
 800cf0a:	f008 fd71 	bl	80159f0 <memcpy1>

            allowDelayedTx = false;
 800cf0e:	230f      	movs	r3, #15
 800cf10:	18fb      	adds	r3, r7, r3
 800cf12:	2200      	movs	r2, #0
 800cf14:	701a      	strb	r2, [r3, #0]

            break;
 800cf16:	e004      	b.n	800cf22 <SendReJoinReq+0x92>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800cf18:	230e      	movs	r3, #14
 800cf1a:	18fb      	adds	r3, r7, r3
 800cf1c:	2202      	movs	r2, #2
 800cf1e:	701a      	strb	r2, [r3, #0]
            break;
 800cf20:	46c0      	nop			; (mov r8, r8)
    }

    // Schedule frame
    status = ScheduleTx( allowDelayedTx );
 800cf22:	250e      	movs	r5, #14
 800cf24:	197c      	adds	r4, r7, r5
 800cf26:	230f      	movs	r3, #15
 800cf28:	18fb      	adds	r3, r7, r3
 800cf2a:	781b      	ldrb	r3, [r3, #0]
 800cf2c:	0018      	movs	r0, r3
 800cf2e:	f000 f811 	bl	800cf54 <ScheduleTx>
 800cf32:	0003      	movs	r3, r0
 800cf34:	7023      	strb	r3, [r4, #0]
    return status;
 800cf36:	197b      	adds	r3, r7, r5
 800cf38:	781b      	ldrb	r3, [r3, #0]
}
 800cf3a:	0018      	movs	r0, r3
 800cf3c:	46bd      	mov	sp, r7
 800cf3e:	b004      	add	sp, #16
 800cf40:	bdb0      	pop	{r4, r5, r7, pc}
 800cf42:	46c0      	nop			; (mov r8, r8)
 800cf44:	20000708 	.word	0x20000708
 800cf48:	20000712 	.word	0x20000712
 800cf4c:	2000081e 	.word	0x2000081e
 800cf50:	20000826 	.word	0x20000826

0800cf54 <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
 800cf54:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cf56:	b08b      	sub	sp, #44	; 0x2c
 800cf58:	af02      	add	r7, sp, #8
 800cf5a:	0002      	movs	r2, r0
 800cf5c:	1dfb      	adds	r3, r7, #7
 800cf5e:	701a      	strb	r2, [r3, #0]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800cf60:	231f      	movs	r3, #31
 800cf62:	18fb      	adds	r3, r7, r3
 800cf64:	2203      	movs	r2, #3
 800cf66:	701a      	strb	r2, [r3, #0]
    TimerTime_t dutyCycleTimeOff = 0;
 800cf68:	2300      	movs	r3, #0
 800cf6a:	61bb      	str	r3, [r7, #24]
    NextChanParams_t nextChan;
    size_t macCmdsSize = 0;
 800cf6c:	2300      	movs	r3, #0
 800cf6e:	60bb      	str	r3, [r7, #8]

    // Update back-off
    CalculateBackOff( MacCtx.NvmCtx->LastTxChannel );
 800cf70:	4ab1      	ldr	r2, [pc, #708]	; (800d238 <ScheduleTx+0x2e4>)
 800cf72:	238e      	movs	r3, #142	; 0x8e
 800cf74:	00db      	lsls	r3, r3, #3
 800cf76:	58d2      	ldr	r2, [r2, r3]
 800cf78:	238a      	movs	r3, #138	; 0x8a
 800cf7a:	005b      	lsls	r3, r3, #1
 800cf7c:	5cd3      	ldrb	r3, [r2, r3]
 800cf7e:	0018      	movs	r0, r3
 800cf80:	f000 f9c4 	bl	800d30c <CalculateBackOff>

    nextChan.AggrTimeOff = MacCtx.AggregatedTimeOff;
 800cf84:	4aac      	ldr	r2, [pc, #688]	; (800d238 <ScheduleTx+0x2e4>)
 800cf86:	23d1      	movs	r3, #209	; 0xd1
 800cf88:	009b      	lsls	r3, r3, #2
 800cf8a:	58d2      	ldr	r2, [r2, r3]
 800cf8c:	210c      	movs	r1, #12
 800cf8e:	187b      	adds	r3, r7, r1
 800cf90:	601a      	str	r2, [r3, #0]
    nextChan.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800cf92:	4aa9      	ldr	r2, [pc, #676]	; (800d238 <ScheduleTx+0x2e4>)
 800cf94:	238e      	movs	r3, #142	; 0x8e
 800cf96:	00db      	lsls	r3, r3, #3
 800cf98:	58d3      	ldr	r3, [r2, r3]
 800cf9a:	22d5      	movs	r2, #213	; 0xd5
 800cf9c:	569a      	ldrsb	r2, [r3, r2]
 800cf9e:	187b      	adds	r3, r7, r1
 800cfa0:	721a      	strb	r2, [r3, #8]
    nextChan.DutyCycleEnabled = MacCtx.NvmCtx->DutyCycleOn;
 800cfa2:	4aa5      	ldr	r2, [pc, #660]	; (800d238 <ScheduleTx+0x2e4>)
 800cfa4:	238e      	movs	r3, #142	; 0x8e
 800cfa6:	00db      	lsls	r3, r3, #3
 800cfa8:	58d2      	ldr	r2, [r2, r3]
 800cfaa:	2389      	movs	r3, #137	; 0x89
 800cfac:	005b      	lsls	r3, r3, #1
 800cfae:	5cd2      	ldrb	r2, [r2, r3]
 800cfb0:	187b      	adds	r3, r7, r1
 800cfb2:	729a      	strb	r2, [r3, #10]
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 800cfb4:	4aa0      	ldr	r2, [pc, #640]	; (800d238 <ScheduleTx+0x2e4>)
 800cfb6:	238e      	movs	r3, #142	; 0x8e
 800cfb8:	00db      	lsls	r3, r3, #3
 800cfba:	58d2      	ldr	r2, [r2, r3]
 800cfbc:	2389      	movs	r3, #137	; 0x89
 800cfbe:	009b      	lsls	r3, r3, #2
 800cfc0:	5cd3      	ldrb	r3, [r2, r3]
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d104      	bne.n	800cfd0 <ScheduleTx+0x7c>
    {
        nextChan.Joined = false;
 800cfc6:	230c      	movs	r3, #12
 800cfc8:	18fb      	adds	r3, r7, r3
 800cfca:	2200      	movs	r2, #0
 800cfcc:	725a      	strb	r2, [r3, #9]
 800cfce:	e003      	b.n	800cfd8 <ScheduleTx+0x84>
    }
    else
    {
        nextChan.Joined = true;
 800cfd0:	230c      	movs	r3, #12
 800cfd2:	18fb      	adds	r3, r7, r3
 800cfd4:	2201      	movs	r2, #1
 800cfd6:	725a      	strb	r2, [r3, #9]
    }
    nextChan.LastAggrTx = MacCtx.AggregatedLastTxDoneTime;
 800cfd8:	4a97      	ldr	r2, [pc, #604]	; (800d238 <ScheduleTx+0x2e4>)
 800cfda:	23d0      	movs	r3, #208	; 0xd0
 800cfdc:	009b      	lsls	r3, r3, #2
 800cfde:	58d2      	ldr	r2, [r2, r3]
 800cfe0:	210c      	movs	r1, #12
 800cfe2:	187b      	adds	r3, r7, r1
 800cfe4:	605a      	str	r2, [r3, #4]

    // Select channel
    status = RegionNextChannel( MacCtx.NvmCtx->Region, &nextChan, &MacCtx.NvmCtx->Channel, &dutyCycleTimeOff, &MacCtx.AggregatedTimeOff );
 800cfe6:	4a94      	ldr	r2, [pc, #592]	; (800d238 <ScheduleTx+0x2e4>)
 800cfe8:	238e      	movs	r3, #142	; 0x8e
 800cfea:	00db      	lsls	r3, r3, #3
 800cfec:	58d3      	ldr	r3, [r2, r3]
 800cfee:	7818      	ldrb	r0, [r3, #0]
 800cff0:	4a91      	ldr	r2, [pc, #580]	; (800d238 <ScheduleTx+0x2e4>)
 800cff2:	238e      	movs	r3, #142	; 0x8e
 800cff4:	00db      	lsls	r3, r3, #3
 800cff6:	58d3      	ldr	r3, [r2, r3]
 800cff8:	3314      	adds	r3, #20
 800cffa:	33ff      	adds	r3, #255	; 0xff
 800cffc:	001a      	movs	r2, r3
 800cffe:	261f      	movs	r6, #31
 800d000:	19bc      	adds	r4, r7, r6
 800d002:	2318      	movs	r3, #24
 800d004:	18fd      	adds	r5, r7, r3
 800d006:	1879      	adds	r1, r7, r1
 800d008:	4b8c      	ldr	r3, [pc, #560]	; (800d23c <ScheduleTx+0x2e8>)
 800d00a:	9300      	str	r3, [sp, #0]
 800d00c:	002b      	movs	r3, r5
 800d00e:	f006 f8e8 	bl	80131e2 <RegionNextChannel>
 800d012:	0003      	movs	r3, r0
 800d014:	7023      	strb	r3, [r4, #0]

    if( status != LORAMAC_STATUS_OK )
 800d016:	19bb      	adds	r3, r7, r6
 800d018:	781b      	ldrb	r3, [r3, #0]
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d026      	beq.n	800d06c <ScheduleTx+0x118>
    {
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 800d01e:	231f      	movs	r3, #31
 800d020:	18fb      	adds	r3, r7, r3
 800d022:	781b      	ldrb	r3, [r3, #0]
 800d024:	2b0b      	cmp	r3, #11
 800d026:	d11d      	bne.n	800d064 <ScheduleTx+0x110>
 800d028:	1dfb      	adds	r3, r7, #7
 800d02a:	781b      	ldrb	r3, [r3, #0]
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d019      	beq.n	800d064 <ScheduleTx+0x110>
            ( allowDelayedTx == true ) )
        {
            // Allow delayed transmissions. We have to allow it in case
            // the MAC must retransmit a frame with the frame repetitions
            if( dutyCycleTimeOff != 0 )
 800d030:	69bb      	ldr	r3, [r7, #24]
 800d032:	2b00      	cmp	r3, #0
 800d034:	d014      	beq.n	800d060 <ScheduleTx+0x10c>
            {// Send later - prepare timer
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 800d036:	4a80      	ldr	r2, [pc, #512]	; (800d238 <ScheduleTx+0x2e4>)
 800d038:	23d5      	movs	r3, #213	; 0xd5
 800d03a:	009b      	lsls	r3, r3, #2
 800d03c:	58d3      	ldr	r3, [r2, r3]
 800d03e:	2220      	movs	r2, #32
 800d040:	431a      	orrs	r2, r3
 800d042:	0011      	movs	r1, r2
 800d044:	4a7c      	ldr	r2, [pc, #496]	; (800d238 <ScheduleTx+0x2e4>)
 800d046:	23d5      	movs	r3, #213	; 0xd5
 800d048:	009b      	lsls	r3, r3, #2
 800d04a:	50d1      	str	r1, [r2, r3]
                TimerSetValue( &MacCtx.TxDelayedTimer, dutyCycleTimeOff );
 800d04c:	69ba      	ldr	r2, [r7, #24]
 800d04e:	4b7c      	ldr	r3, [pc, #496]	; (800d240 <ScheduleTx+0x2ec>)
 800d050:	0011      	movs	r1, r2
 800d052:	0018      	movs	r0, r3
 800d054:	f008 fbba 	bl	80157cc <TimerSetValue>
                TimerStart( &MacCtx.TxDelayedTimer );
 800d058:	4b79      	ldr	r3, [pc, #484]	; (800d240 <ScheduleTx+0x2ec>)
 800d05a:	0018      	movs	r0, r3
 800d05c:	f008 fbe2 	bl	8015824 <TimerStart>
            }
            return LORAMAC_STATUS_OK;
 800d060:	2300      	movs	r3, #0
 800d062:	e0e5      	b.n	800d230 <ScheduleTx+0x2dc>
        }
        else
        {// State where the MAC cannot send a frame
            return status;
 800d064:	231f      	movs	r3, #31
 800d066:	18fb      	adds	r3, r7, r3
 800d068:	781b      	ldrb	r3, [r3, #0]
 800d06a:	e0e1      	b.n	800d230 <ScheduleTx+0x2dc>
        }
    }

    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800d06c:	4a72      	ldr	r2, [pc, #456]	; (800d238 <ScheduleTx+0x2e4>)
 800d06e:	238e      	movs	r3, #142	; 0x8e
 800d070:	00db      	lsls	r3, r3, #3
 800d072:	58d3      	ldr	r3, [r2, r3]
 800d074:	781c      	ldrb	r4, [r3, #0]
                                     RegionApplyDrOffset( MacCtx.NvmCtx->Region, MacCtx.NvmCtx->MacParams.DownlinkDwellTime, MacCtx.NvmCtx->MacParams.ChannelsDatarate, MacCtx.NvmCtx->MacParams.Rx1DrOffset ),
 800d076:	4a70      	ldr	r2, [pc, #448]	; (800d238 <ScheduleTx+0x2e4>)
 800d078:	238e      	movs	r3, #142	; 0x8e
 800d07a:	00db      	lsls	r3, r3, #3
 800d07c:	58d3      	ldr	r3, [r2, r3]
 800d07e:	7818      	ldrb	r0, [r3, #0]
 800d080:	4a6d      	ldr	r2, [pc, #436]	; (800d238 <ScheduleTx+0x2e4>)
 800d082:	238e      	movs	r3, #142	; 0x8e
 800d084:	00db      	lsls	r3, r3, #3
 800d086:	58d2      	ldr	r2, [r2, r3]
 800d088:	2302      	movs	r3, #2
 800d08a:	33ff      	adds	r3, #255	; 0xff
 800d08c:	5cd1      	ldrb	r1, [r2, r3]
 800d08e:	4a6a      	ldr	r2, [pc, #424]	; (800d238 <ScheduleTx+0x2e4>)
 800d090:	238e      	movs	r3, #142	; 0x8e
 800d092:	00db      	lsls	r3, r3, #3
 800d094:	58d3      	ldr	r3, [r2, r3]
 800d096:	22d5      	movs	r2, #213	; 0xd5
 800d098:	569d      	ldrsb	r5, [r3, r2]
 800d09a:	4a67      	ldr	r2, [pc, #412]	; (800d238 <ScheduleTx+0x2e4>)
 800d09c:	238e      	movs	r3, #142	; 0x8e
 800d09e:	00db      	lsls	r3, r3, #3
 800d0a0:	58d3      	ldr	r3, [r2, r3]
 800d0a2:	22f5      	movs	r2, #245	; 0xf5
 800d0a4:	5c9b      	ldrb	r3, [r3, r2]
 800d0a6:	b25b      	sxtb	r3, r3
 800d0a8:	002a      	movs	r2, r5
 800d0aa:	f006 f8e0 	bl	801326e <RegionApplyDrOffset>
 800d0ae:	0003      	movs	r3, r0
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800d0b0:	b259      	sxtb	r1, r3
                                     MacCtx.NvmCtx->MacParams.MinRxSymbols,
 800d0b2:	4a61      	ldr	r2, [pc, #388]	; (800d238 <ScheduleTx+0x2e4>)
 800d0b4:	238e      	movs	r3, #142	; 0x8e
 800d0b6:	00db      	lsls	r3, r3, #3
 800d0b8:	58d3      	ldr	r3, [r2, r3]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800d0ba:	22dc      	movs	r2, #220	; 0xdc
 800d0bc:	5c98      	ldrb	r0, [r3, r2]
                                     MacCtx.NvmCtx->MacParams.SystemMaxRxError,
 800d0be:	4a5e      	ldr	r2, [pc, #376]	; (800d238 <ScheduleTx+0x2e4>)
 800d0c0:	238e      	movs	r3, #142	; 0x8e
 800d0c2:	00db      	lsls	r3, r3, #3
 800d0c4:	58d3      	ldr	r3, [r2, r3]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800d0c6:	22d8      	movs	r2, #216	; 0xd8
 800d0c8:	589a      	ldr	r2, [r3, r2]
 800d0ca:	4b5e      	ldr	r3, [pc, #376]	; (800d244 <ScheduleTx+0x2f0>)
 800d0cc:	9300      	str	r3, [sp, #0]
 800d0ce:	0013      	movs	r3, r2
 800d0d0:	0002      	movs	r2, r0
 800d0d2:	0020      	movs	r0, r4
 800d0d4:	f005 ff7e 	bl	8012fd4 <RegionComputeRxWindowParameters>
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800d0d8:	4a57      	ldr	r2, [pc, #348]	; (800d238 <ScheduleTx+0x2e4>)
 800d0da:	238e      	movs	r3, #142	; 0x8e
 800d0dc:	00db      	lsls	r3, r3, #3
 800d0de:	58d3      	ldr	r3, [r2, r3]
 800d0e0:	7818      	ldrb	r0, [r3, #0]
                                     MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate,
 800d0e2:	4a55      	ldr	r2, [pc, #340]	; (800d238 <ScheduleTx+0x2e4>)
 800d0e4:	238e      	movs	r3, #142	; 0x8e
 800d0e6:	00db      	lsls	r3, r3, #3
 800d0e8:	58d3      	ldr	r3, [r2, r3]
 800d0ea:	22fc      	movs	r2, #252	; 0xfc
 800d0ec:	5c9b      	ldrb	r3, [r3, r2]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800d0ee:	b259      	sxtb	r1, r3
                                     MacCtx.NvmCtx->MacParams.MinRxSymbols,
 800d0f0:	4a51      	ldr	r2, [pc, #324]	; (800d238 <ScheduleTx+0x2e4>)
 800d0f2:	238e      	movs	r3, #142	; 0x8e
 800d0f4:	00db      	lsls	r3, r3, #3
 800d0f6:	58d3      	ldr	r3, [r2, r3]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800d0f8:	22dc      	movs	r2, #220	; 0xdc
 800d0fa:	5c9c      	ldrb	r4, [r3, r2]
                                     MacCtx.NvmCtx->MacParams.SystemMaxRxError,
 800d0fc:	4a4e      	ldr	r2, [pc, #312]	; (800d238 <ScheduleTx+0x2e4>)
 800d0fe:	238e      	movs	r3, #142	; 0x8e
 800d100:	00db      	lsls	r3, r3, #3
 800d102:	58d3      	ldr	r3, [r2, r3]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800d104:	22d8      	movs	r2, #216	; 0xd8
 800d106:	589a      	ldr	r2, [r3, r2]
 800d108:	4b4f      	ldr	r3, [pc, #316]	; (800d248 <ScheduleTx+0x2f4>)
 800d10a:	9300      	str	r3, [sp, #0]
 800d10c:	0013      	movs	r3, r2
 800d10e:	0022      	movs	r2, r4
 800d110:	f005 ff60 	bl	8012fd4 <RegionComputeRxWindowParameters>
                                     &MacCtx.RxWindow2Config );

    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 800d114:	4a48      	ldr	r2, [pc, #288]	; (800d238 <ScheduleTx+0x2e4>)
 800d116:	238e      	movs	r3, #142	; 0x8e
 800d118:	00db      	lsls	r3, r3, #3
 800d11a:	58d2      	ldr	r2, [r2, r3]
 800d11c:	2389      	movs	r3, #137	; 0x89
 800d11e:	009b      	lsls	r3, r3, #2
 800d120:	5cd3      	ldrb	r3, [r2, r3]
 800d122:	2b00      	cmp	r3, #0
 800d124:	d11e      	bne.n	800d164 <ScheduleTx+0x210>
    {
        MacCtx.RxWindow1Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800d126:	4a44      	ldr	r2, [pc, #272]	; (800d238 <ScheduleTx+0x2e4>)
 800d128:	238e      	movs	r3, #142	; 0x8e
 800d12a:	00db      	lsls	r3, r3, #3
 800d12c:	58d3      	ldr	r3, [r2, r3]
 800d12e:	22ec      	movs	r2, #236	; 0xec
 800d130:	589b      	ldr	r3, [r3, r2]
 800d132:	4941      	ldr	r1, [pc, #260]	; (800d238 <ScheduleTx+0x2e4>)
 800d134:	22f6      	movs	r2, #246	; 0xf6
 800d136:	0092      	lsls	r2, r2, #2
 800d138:	588a      	ldr	r2, [r1, r2]
 800d13a:	1899      	adds	r1, r3, r2
 800d13c:	4a3e      	ldr	r2, [pc, #248]	; (800d238 <ScheduleTx+0x2e4>)
 800d13e:	23f1      	movs	r3, #241	; 0xf1
 800d140:	009b      	lsls	r3, r3, #2
 800d142:	50d1      	str	r1, [r2, r3]
        MacCtx.RxWindow2Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800d144:	4a3c      	ldr	r2, [pc, #240]	; (800d238 <ScheduleTx+0x2e4>)
 800d146:	238e      	movs	r3, #142	; 0x8e
 800d148:	00db      	lsls	r3, r3, #3
 800d14a:	58d3      	ldr	r3, [r2, r3]
 800d14c:	22f0      	movs	r2, #240	; 0xf0
 800d14e:	589b      	ldr	r3, [r3, r2]
 800d150:	4939      	ldr	r1, [pc, #228]	; (800d238 <ScheduleTx+0x2e4>)
 800d152:	22fb      	movs	r2, #251	; 0xfb
 800d154:	0092      	lsls	r2, r2, #2
 800d156:	588a      	ldr	r2, [r1, r2]
 800d158:	1899      	adds	r1, r3, r2
 800d15a:	4a37      	ldr	r2, [pc, #220]	; (800d238 <ScheduleTx+0x2e4>)
 800d15c:	23f2      	movs	r3, #242	; 0xf2
 800d15e:	009b      	lsls	r3, r3, #2
 800d160:	50d1      	str	r1, [r2, r3]
 800d162:	e03d      	b.n	800d1e0 <ScheduleTx+0x28c>
    }
    else
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800d164:	2308      	movs	r3, #8
 800d166:	18fb      	adds	r3, r7, r3
 800d168:	0018      	movs	r0, r3
 800d16a:	f003 f9bf 	bl	80104ec <LoRaMacCommandsGetSizeSerializedCmds>
 800d16e:	1e03      	subs	r3, r0, #0
 800d170:	d001      	beq.n	800d176 <ScheduleTx+0x222>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800d172:	2313      	movs	r3, #19
 800d174:	e05c      	b.n	800d230 <ScheduleTx+0x2dc>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, MacCtx.NvmCtx->MacParams.ChannelsDatarate, macCmdsSize ) == false )
 800d176:	4b30      	ldr	r3, [pc, #192]	; (800d238 <ScheduleTx+0x2e4>)
 800d178:	4a34      	ldr	r2, [pc, #208]	; (800d24c <ScheduleTx+0x2f8>)
 800d17a:	5c98      	ldrb	r0, [r3, r2]
 800d17c:	4a2e      	ldr	r2, [pc, #184]	; (800d238 <ScheduleTx+0x2e4>)
 800d17e:	238e      	movs	r3, #142	; 0x8e
 800d180:	00db      	lsls	r3, r3, #3
 800d182:	58d3      	ldr	r3, [r2, r3]
 800d184:	22d5      	movs	r2, #213	; 0xd5
 800d186:	569b      	ldrsb	r3, [r3, r2]
 800d188:	68ba      	ldr	r2, [r7, #8]
 800d18a:	b2d2      	uxtb	r2, r2
 800d18c:	0019      	movs	r1, r3
 800d18e:	f7fe ff31 	bl	800bff4 <ValidatePayloadLength>
 800d192:	0003      	movs	r3, r0
 800d194:	001a      	movs	r2, r3
 800d196:	2301      	movs	r3, #1
 800d198:	4053      	eors	r3, r2
 800d19a:	b2db      	uxtb	r3, r3
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d001      	beq.n	800d1a4 <ScheduleTx+0x250>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
 800d1a0:	2308      	movs	r3, #8
 800d1a2:	e045      	b.n	800d230 <ScheduleTx+0x2dc>
        }
        MacCtx.RxWindow1Delay = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800d1a4:	4a24      	ldr	r2, [pc, #144]	; (800d238 <ScheduleTx+0x2e4>)
 800d1a6:	238e      	movs	r3, #142	; 0x8e
 800d1a8:	00db      	lsls	r3, r3, #3
 800d1aa:	58d3      	ldr	r3, [r2, r3]
 800d1ac:	22e4      	movs	r2, #228	; 0xe4
 800d1ae:	589b      	ldr	r3, [r3, r2]
 800d1b0:	4921      	ldr	r1, [pc, #132]	; (800d238 <ScheduleTx+0x2e4>)
 800d1b2:	22f6      	movs	r2, #246	; 0xf6
 800d1b4:	0092      	lsls	r2, r2, #2
 800d1b6:	588a      	ldr	r2, [r1, r2]
 800d1b8:	1899      	adds	r1, r3, r2
 800d1ba:	4a1f      	ldr	r2, [pc, #124]	; (800d238 <ScheduleTx+0x2e4>)
 800d1bc:	23f1      	movs	r3, #241	; 0xf1
 800d1be:	009b      	lsls	r3, r3, #2
 800d1c0:	50d1      	str	r1, [r2, r3]
        MacCtx.RxWindow2Delay = MacCtx.NvmCtx->MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800d1c2:	4a1d      	ldr	r2, [pc, #116]	; (800d238 <ScheduleTx+0x2e4>)
 800d1c4:	238e      	movs	r3, #142	; 0x8e
 800d1c6:	00db      	lsls	r3, r3, #3
 800d1c8:	58d3      	ldr	r3, [r2, r3]
 800d1ca:	22e8      	movs	r2, #232	; 0xe8
 800d1cc:	589b      	ldr	r3, [r3, r2]
 800d1ce:	491a      	ldr	r1, [pc, #104]	; (800d238 <ScheduleTx+0x2e4>)
 800d1d0:	22fb      	movs	r2, #251	; 0xfb
 800d1d2:	0092      	lsls	r2, r2, #2
 800d1d4:	588a      	ldr	r2, [r1, r2]
 800d1d6:	1899      	adds	r1, r3, r2
 800d1d8:	4a17      	ldr	r2, [pc, #92]	; (800d238 <ScheduleTx+0x2e4>)
 800d1da:	23f2      	movs	r3, #242	; 0xf2
 800d1dc:	009b      	lsls	r3, r3, #2
 800d1de:	50d1      	str	r1, [r2, r3]
    }

    // Secure frame
    LoRaMacStatus_t retval = SecureFrame( MacCtx.NvmCtx->MacParams.ChannelsDatarate, MacCtx.NvmCtx->Channel );
 800d1e0:	4a15      	ldr	r2, [pc, #84]	; (800d238 <ScheduleTx+0x2e4>)
 800d1e2:	238e      	movs	r3, #142	; 0x8e
 800d1e4:	00db      	lsls	r3, r3, #3
 800d1e6:	58d3      	ldr	r3, [r2, r3]
 800d1e8:	22d5      	movs	r2, #213	; 0xd5
 800d1ea:	569b      	ldrsb	r3, [r3, r2]
 800d1ec:	b2d8      	uxtb	r0, r3
 800d1ee:	4a12      	ldr	r2, [pc, #72]	; (800d238 <ScheduleTx+0x2e4>)
 800d1f0:	238e      	movs	r3, #142	; 0x8e
 800d1f2:	00db      	lsls	r3, r3, #3
 800d1f4:	58d2      	ldr	r2, [r2, r3]
 800d1f6:	2314      	movs	r3, #20
 800d1f8:	33ff      	adds	r3, #255	; 0xff
 800d1fa:	5cd3      	ldrb	r3, [r2, r3]
 800d1fc:	251e      	movs	r5, #30
 800d1fe:	197c      	adds	r4, r7, r5
 800d200:	0019      	movs	r1, r3
 800d202:	f000 f825 	bl	800d250 <SecureFrame>
 800d206:	0003      	movs	r3, r0
 800d208:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_STATUS_OK )
 800d20a:	197b      	adds	r3, r7, r5
 800d20c:	781b      	ldrb	r3, [r3, #0]
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d003      	beq.n	800d21a <ScheduleTx+0x2c6>
    {
        return retval;
 800d212:	231e      	movs	r3, #30
 800d214:	18fb      	adds	r3, r7, r3
 800d216:	781b      	ldrb	r3, [r3, #0]
 800d218:	e00a      	b.n	800d230 <ScheduleTx+0x2dc>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.NvmCtx->Channel );
 800d21a:	4a07      	ldr	r2, [pc, #28]	; (800d238 <ScheduleTx+0x2e4>)
 800d21c:	238e      	movs	r3, #142	; 0x8e
 800d21e:	00db      	lsls	r3, r3, #3
 800d220:	58d2      	ldr	r2, [r2, r3]
 800d222:	2314      	movs	r3, #20
 800d224:	33ff      	adds	r3, #255	; 0xff
 800d226:	5cd3      	ldrb	r3, [r2, r3]
 800d228:	0018      	movs	r0, r3
 800d22a:	f000 fb59 	bl	800d8e0 <SendFrameOnChannel>
 800d22e:	0003      	movs	r3, r0
}
 800d230:	0018      	movs	r0, r3
 800d232:	46bd      	mov	sp, r7
 800d234:	b009      	add	sp, #36	; 0x24
 800d236:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d238:	20000708 	.word	0x20000708
 800d23c:	20000a4c 	.word	0x20000a4c
 800d240:	20000a84 	.word	0x20000a84
 800d244:	20000ad4 	.word	0x20000ad4
 800d248:	20000ae8 	.word	0x20000ae8
 800d24c:	0000023f 	.word	0x0000023f

0800d250 <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
 800d250:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d252:	b085      	sub	sp, #20
 800d254:	af00      	add	r7, sp, #0
 800d256:	0002      	movs	r2, r0
 800d258:	1dfb      	adds	r3, r7, #7
 800d25a:	701a      	strb	r2, [r3, #0]
 800d25c:	1dbb      	adds	r3, r7, #6
 800d25e:	1c0a      	adds	r2, r1, #0
 800d260:	701a      	strb	r2, [r3, #0]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800d262:	230f      	movs	r3, #15
 800d264:	18fb      	adds	r3, r7, r3
 800d266:	2210      	movs	r2, #16
 800d268:	701a      	strb	r2, [r3, #0]
    uint32_t fCntUp = 0;
 800d26a:	2300      	movs	r3, #0
 800d26c:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
 800d26e:	4a25      	ldr	r2, [pc, #148]	; (800d304 <SecureFrame+0xb4>)
 800d270:	2386      	movs	r3, #134	; 0x86
 800d272:	005b      	lsls	r3, r3, #1
 800d274:	5cd3      	ldrb	r3, [r2, r3]
 800d276:	2b00      	cmp	r3, #0
 800d278:	d002      	beq.n	800d280 <SecureFrame+0x30>
 800d27a:	2b04      	cmp	r3, #4
 800d27c:	d016      	beq.n	800d2ac <SecureFrame+0x5c>
 800d27e:	e039      	b.n	800d2f4 <SecureFrame+0xa4>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800d280:	250f      	movs	r5, #15
 800d282:	197c      	adds	r4, r7, r5
 800d284:	4b20      	ldr	r3, [pc, #128]	; (800d308 <SecureFrame+0xb8>)
 800d286:	0018      	movs	r0, r3
 800d288:	f004 fb88 	bl	801199c <LoRaMacCryptoPrepareJoinRequest>
 800d28c:	0003      	movs	r3, r0
 800d28e:	7023      	strb	r3, [r4, #0]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800d290:	197b      	adds	r3, r7, r5
 800d292:	781b      	ldrb	r3, [r3, #0]
 800d294:	2b00      	cmp	r3, #0
 800d296:	d001      	beq.n	800d29c <SecureFrame+0x4c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800d298:	2311      	movs	r3, #17
 800d29a:	e02e      	b.n	800d2fa <SecureFrame+0xaa>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 800d29c:	4a19      	ldr	r2, [pc, #100]	; (800d304 <SecureFrame+0xb4>)
 800d29e:	238a      	movs	r3, #138	; 0x8a
 800d2a0:	005b      	lsls	r3, r3, #1
 800d2a2:	5cd3      	ldrb	r3, [r2, r3]
 800d2a4:	b29a      	uxth	r2, r3
 800d2a6:	4b17      	ldr	r3, [pc, #92]	; (800d304 <SecureFrame+0xb4>)
 800d2a8:	811a      	strh	r2, [r3, #8]
            break;
 800d2aa:	e025      	b.n	800d2f8 <SecureFrame+0xa8>
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_FCNT_HANDLER_SUCCESS != LoRaMacGetFCntUp( &fCntUp ) )
 800d2ac:	2308      	movs	r3, #8
 800d2ae:	18fb      	adds	r3, r7, r3
 800d2b0:	0018      	movs	r0, r3
 800d2b2:	f005 f999 	bl	80125e8 <LoRaMacGetFCntUp>
 800d2b6:	1e03      	subs	r3, r0, #0
 800d2b8:	d001      	beq.n	800d2be <SecureFrame+0x6e>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800d2ba:	2312      	movs	r3, #18
 800d2bc:	e01d      	b.n	800d2fa <SecureFrame+0xaa>
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 800d2be:	68b8      	ldr	r0, [r7, #8]
 800d2c0:	260f      	movs	r6, #15
 800d2c2:	19bc      	adds	r4, r7, r6
 800d2c4:	4d10      	ldr	r5, [pc, #64]	; (800d308 <SecureFrame+0xb8>)
 800d2c6:	1dbb      	adds	r3, r7, #6
 800d2c8:	781a      	ldrb	r2, [r3, #0]
 800d2ca:	1dfb      	adds	r3, r7, #7
 800d2cc:	7819      	ldrb	r1, [r3, #0]
 800d2ce:	002b      	movs	r3, r5
 800d2d0:	f004 fe52 	bl	8011f78 <LoRaMacCryptoSecureMessage>
 800d2d4:	0003      	movs	r3, r0
 800d2d6:	7023      	strb	r3, [r4, #0]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800d2d8:	19bb      	adds	r3, r7, r6
 800d2da:	781b      	ldrb	r3, [r3, #0]
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d001      	beq.n	800d2e4 <SecureFrame+0x94>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800d2e0:	2311      	movs	r3, #17
 800d2e2:	e00a      	b.n	800d2fa <SecureFrame+0xaa>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800d2e4:	4a07      	ldr	r2, [pc, #28]	; (800d304 <SecureFrame+0xb4>)
 800d2e6:	238a      	movs	r3, #138	; 0x8a
 800d2e8:	005b      	lsls	r3, r3, #1
 800d2ea:	5cd3      	ldrb	r3, [r2, r3]
 800d2ec:	b29a      	uxth	r2, r3
 800d2ee:	4b05      	ldr	r3, [pc, #20]	; (800d304 <SecureFrame+0xb4>)
 800d2f0:	811a      	strh	r2, [r3, #8]
            break;
 800d2f2:	e001      	b.n	800d2f8 <SecureFrame+0xa8>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 800d2f4:	2303      	movs	r3, #3
 800d2f6:	e000      	b.n	800d2fa <SecureFrame+0xaa>
    }
    return LORAMAC_STATUS_OK;
 800d2f8:	2300      	movs	r3, #0
}
 800d2fa:	0018      	movs	r0, r3
 800d2fc:	46bd      	mov	sp, r7
 800d2fe:	b005      	add	sp, #20
 800d300:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d302:	46c0      	nop			; (mov r8, r8)
 800d304:	20000708 	.word	0x20000708
 800d308:	20000818 	.word	0x20000818

0800d30c <CalculateBackOff>:

static void CalculateBackOff( uint8_t channel )
{
 800d30c:	b590      	push	{r4, r7, lr}
 800d30e:	b087      	sub	sp, #28
 800d310:	af00      	add	r7, sp, #0
 800d312:	0002      	movs	r2, r0
 800d314:	1dfb      	adds	r3, r7, #7
 800d316:	701a      	strb	r2, [r3, #0]
    CalcBackOffParams_t calcBackOff;

    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 800d318:	4a31      	ldr	r2, [pc, #196]	; (800d3e0 <CalculateBackOff+0xd4>)
 800d31a:	238e      	movs	r3, #142	; 0x8e
 800d31c:	00db      	lsls	r3, r3, #3
 800d31e:	58d2      	ldr	r2, [r2, r3]
 800d320:	2389      	movs	r3, #137	; 0x89
 800d322:	009b      	lsls	r3, r3, #2
 800d324:	5cd3      	ldrb	r3, [r2, r3]
 800d326:	2b00      	cmp	r3, #0
 800d328:	d104      	bne.n	800d334 <CalculateBackOff+0x28>
    {
        calcBackOff.Joined = false;
 800d32a:	230c      	movs	r3, #12
 800d32c:	18fb      	adds	r3, r7, r3
 800d32e:	2200      	movs	r2, #0
 800d330:	701a      	strb	r2, [r3, #0]
 800d332:	e003      	b.n	800d33c <CalculateBackOff+0x30>
    }
    else
    {
        calcBackOff.Joined = true;
 800d334:	230c      	movs	r3, #12
 800d336:	18fb      	adds	r3, r7, r3
 800d338:	2201      	movs	r2, #1
 800d33a:	701a      	strb	r2, [r3, #0]
    }
    calcBackOff.DutyCycleEnabled = MacCtx.NvmCtx->DutyCycleOn;
 800d33c:	4a28      	ldr	r2, [pc, #160]	; (800d3e0 <CalculateBackOff+0xd4>)
 800d33e:	238e      	movs	r3, #142	; 0x8e
 800d340:	00db      	lsls	r3, r3, #3
 800d342:	58d2      	ldr	r2, [r2, r3]
 800d344:	2389      	movs	r3, #137	; 0x89
 800d346:	005b      	lsls	r3, r3, #1
 800d348:	5cd2      	ldrb	r2, [r2, r3]
 800d34a:	240c      	movs	r4, #12
 800d34c:	193b      	adds	r3, r7, r4
 800d34e:	709a      	strb	r2, [r3, #2]
    calcBackOff.Channel = channel;
 800d350:	193b      	adds	r3, r7, r4
 800d352:	1dfa      	adds	r2, r7, #7
 800d354:	7812      	ldrb	r2, [r2, #0]
 800d356:	70da      	strb	r2, [r3, #3]
    calcBackOff.ElapsedTime = TimerGetElapsedTime( MacCtx.InitializationTime );
 800d358:	4a21      	ldr	r2, [pc, #132]	; (800d3e0 <CalculateBackOff+0xd4>)
 800d35a:	23d2      	movs	r3, #210	; 0xd2
 800d35c:	009b      	lsls	r3, r3, #2
 800d35e:	58d3      	ldr	r3, [r2, r3]
 800d360:	0018      	movs	r0, r3
 800d362:	f008 faf8 	bl	8015956 <TimerGetElapsedTime>
 800d366:	0002      	movs	r2, r0
 800d368:	193b      	adds	r3, r7, r4
 800d36a:	605a      	str	r2, [r3, #4]
    calcBackOff.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800d36c:	4b1c      	ldr	r3, [pc, #112]	; (800d3e0 <CalculateBackOff+0xd4>)
 800d36e:	4a1d      	ldr	r2, [pc, #116]	; (800d3e4 <CalculateBackOff+0xd8>)
 800d370:	589a      	ldr	r2, [r3, r2]
 800d372:	193b      	adds	r3, r7, r4
 800d374:	609a      	str	r2, [r3, #8]
    calcBackOff.LastTxIsJoinRequest = false;
 800d376:	193b      	adds	r3, r7, r4
 800d378:	2200      	movs	r2, #0
 800d37a:	705a      	strb	r2, [r3, #1]
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) && ( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true ) )
 800d37c:	4b18      	ldr	r3, [pc, #96]	; (800d3e0 <CalculateBackOff+0xd4>)
 800d37e:	4a1a      	ldr	r2, [pc, #104]	; (800d3e8 <CalculateBackOff+0xdc>)
 800d380:	5c9b      	ldrb	r3, [r3, r2]
 800d382:	2204      	movs	r2, #4
 800d384:	4013      	ands	r3, r2
 800d386:	b2db      	uxtb	r3, r3
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d008      	beq.n	800d39e <CalculateBackOff+0x92>
 800d38c:	2000      	movs	r0, #0
 800d38e:	f003 faa9 	bl	80108e4 <LoRaMacConfirmQueueIsCmdActive>
 800d392:	1e03      	subs	r3, r0, #0
 800d394:	d003      	beq.n	800d39e <CalculateBackOff+0x92>
    {
        calcBackOff.LastTxIsJoinRequest = true;
 800d396:	230c      	movs	r3, #12
 800d398:	18fb      	adds	r3, r7, r3
 800d39a:	2201      	movs	r2, #1
 800d39c:	705a      	strb	r2, [r3, #1]
    }

    // Update regional back-off
    RegionCalcBackOff( MacCtx.NvmCtx->Region, &calcBackOff );
 800d39e:	4a10      	ldr	r2, [pc, #64]	; (800d3e0 <CalculateBackOff+0xd4>)
 800d3a0:	238e      	movs	r3, #142	; 0x8e
 800d3a2:	00db      	lsls	r3, r3, #3
 800d3a4:	58d3      	ldr	r3, [r2, r3]
 800d3a6:	781b      	ldrb	r3, [r3, #0]
 800d3a8:	220c      	movs	r2, #12
 800d3aa:	18ba      	adds	r2, r7, r2
 800d3ac:	0011      	movs	r1, r2
 800d3ae:	0018      	movs	r0, r3
 800d3b0:	f005 ff02 	bl	80131b8 <RegionCalcBackOff>

    // Update aggregated time-off. This must be an assignment and no incremental
    // update as we do only calculate the time-off based on the last transmission
    MacCtx.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * MacCtx.NvmCtx->AggregatedDCycle - MacCtx.TxTimeOnAir );
 800d3b4:	4a0a      	ldr	r2, [pc, #40]	; (800d3e0 <CalculateBackOff+0xd4>)
 800d3b6:	238e      	movs	r3, #142	; 0x8e
 800d3b8:	00db      	lsls	r3, r3, #3
 800d3ba:	58d2      	ldr	r2, [r2, r3]
 800d3bc:	2387      	movs	r3, #135	; 0x87
 800d3be:	009b      	lsls	r3, r3, #2
 800d3c0:	5ad3      	ldrh	r3, [r2, r3]
 800d3c2:	3b01      	subs	r3, #1
 800d3c4:	4a06      	ldr	r2, [pc, #24]	; (800d3e0 <CalculateBackOff+0xd4>)
 800d3c6:	4907      	ldr	r1, [pc, #28]	; (800d3e4 <CalculateBackOff+0xd8>)
 800d3c8:	5852      	ldr	r2, [r2, r1]
 800d3ca:	435a      	muls	r2, r3
 800d3cc:	0011      	movs	r1, r2
 800d3ce:	4a04      	ldr	r2, [pc, #16]	; (800d3e0 <CalculateBackOff+0xd4>)
 800d3d0:	23d1      	movs	r3, #209	; 0xd1
 800d3d2:	009b      	lsls	r3, r3, #2
 800d3d4:	50d1      	str	r1, [r2, r3]
}
 800d3d6:	46c0      	nop			; (mov r8, r8)
 800d3d8:	46bd      	mov	sp, r7
 800d3da:	b007      	add	sp, #28
 800d3dc:	bd90      	pop	{r4, r7, pc}
 800d3de:	46c0      	nop			; (mov r8, r8)
 800d3e0:	20000708 	.word	0x20000708
 800d3e4:	0000040c 	.word	0x0000040c
 800d3e8:	0000046d 	.word	0x0000046d

0800d3ec <RemoveMacCommands>:

static void RemoveMacCommands( LoRaMacRxSlot_t rxSlot, LoRaMacFrameCtrl_t fCtrl, Mcps_t request )
{
 800d3ec:	b580      	push	{r7, lr}
 800d3ee:	b082      	sub	sp, #8
 800d3f0:	af00      	add	r7, sp, #0
 800d3f2:	1d3b      	adds	r3, r7, #4
 800d3f4:	7019      	strb	r1, [r3, #0]
 800d3f6:	0011      	movs	r1, r2
 800d3f8:	1dfb      	adds	r3, r7, #7
 800d3fa:	1c02      	adds	r2, r0, #0
 800d3fc:	701a      	strb	r2, [r3, #0]
 800d3fe:	1dbb      	adds	r3, r7, #6
 800d400:	1c0a      	adds	r2, r1, #0
 800d402:	701a      	strb	r2, [r3, #0]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 800d404:	1dfb      	adds	r3, r7, #7
 800d406:	781b      	ldrb	r3, [r3, #0]
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d003      	beq.n	800d414 <RemoveMacCommands+0x28>
 800d40c:	1dfb      	adds	r3, r7, #7
 800d40e:	781b      	ldrb	r3, [r3, #0]
 800d410:	2b01      	cmp	r3, #1
 800d412:	d10f      	bne.n	800d434 <RemoveMacCommands+0x48>
    {
        // Remove all sticky MAC commands answers since we can assume
        // that they have been received by the server.
        if( request == MCPS_CONFIRMED )
 800d414:	1dbb      	adds	r3, r7, #6
 800d416:	781b      	ldrb	r3, [r3, #0]
 800d418:	2b01      	cmp	r3, #1
 800d41a:	d109      	bne.n	800d430 <RemoveMacCommands+0x44>
        {
            if( fCtrl.Bits.Ack == 1 )
 800d41c:	1d3b      	adds	r3, r7, #4
 800d41e:	781b      	ldrb	r3, [r3, #0]
 800d420:	2220      	movs	r2, #32
 800d422:	4013      	ands	r3, r2
 800d424:	b2db      	uxtb	r3, r3
 800d426:	2b00      	cmp	r3, #0
 800d428:	d004      	beq.n	800d434 <RemoveMacCommands+0x48>
            {  // For confirmed uplinks only if we have received an ACK.
                LoRaMacCommandsRemoveStickyAnsCmds( );
 800d42a:	f003 f823 	bl	8010474 <LoRaMacCommandsRemoveStickyAnsCmds>
        else
        {
            LoRaMacCommandsRemoveStickyAnsCmds( );
        }
    }
}
 800d42e:	e001      	b.n	800d434 <RemoveMacCommands+0x48>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 800d430:	f003 f820 	bl	8010474 <LoRaMacCommandsRemoveStickyAnsCmds>
}
 800d434:	46c0      	nop			; (mov r8, r8)
 800d436:	46bd      	mov	sp, r7
 800d438:	b002      	add	sp, #8
 800d43a:	bd80      	pop	{r7, pc}

0800d43c <ResetMacParameters>:


static void ResetMacParameters( void )
{
 800d43c:	b580      	push	{r7, lr}
 800d43e:	b082      	sub	sp, #8
 800d440:	af00      	add	r7, sp, #0
    MacCtx.NvmCtx->NetworkActivation = ACTIVATION_TYPE_NONE;
 800d442:	4a6d      	ldr	r2, [pc, #436]	; (800d5f8 <ResetMacParameters+0x1bc>)
 800d444:	238e      	movs	r3, #142	; 0x8e
 800d446:	00db      	lsls	r3, r3, #3
 800d448:	58d2      	ldr	r2, [r2, r3]
 800d44a:	2389      	movs	r3, #137	; 0x89
 800d44c:	009b      	lsls	r3, r3, #2
 800d44e:	2100      	movs	r1, #0
 800d450:	54d1      	strb	r1, [r2, r3]

    // ADR counter
    MacCtx.NvmCtx->AdrAckCounter = 0;
 800d452:	4a69      	ldr	r2, [pc, #420]	; (800d5f8 <ResetMacParameters+0x1bc>)
 800d454:	238e      	movs	r3, #142	; 0x8e
 800d456:	00db      	lsls	r3, r3, #3
 800d458:	58d3      	ldr	r3, [r2, r3]
 800d45a:	22cc      	movs	r2, #204	; 0xcc
 800d45c:	2100      	movs	r1, #0
 800d45e:	5099      	str	r1, [r3, r2]

    // Initialize the uplink and downlink counters default value
    LoRaMacResetFCnts( );
 800d460:	f005 f8e8 	bl	8012634 <LoRaMacResetFCnts>

    MacCtx.NvmCtx->ChannelsNbTransCounter = 0;
 800d464:	4a64      	ldr	r2, [pc, #400]	; (800d5f8 <ResetMacParameters+0x1bc>)
 800d466:	238e      	movs	r3, #142	; 0x8e
 800d468:	00db      	lsls	r3, r3, #3
 800d46a:	58d2      	ldr	r2, [r2, r3]
 800d46c:	2388      	movs	r3, #136	; 0x88
 800d46e:	005b      	lsls	r3, r3, #1
 800d470:	2100      	movs	r1, #0
 800d472:	54d1      	strb	r1, [r2, r3]
    MacCtx.NvmCtx->AckTimeoutRetries = 1;
 800d474:	4a60      	ldr	r2, [pc, #384]	; (800d5f8 <ResetMacParameters+0x1bc>)
 800d476:	238e      	movs	r3, #142	; 0x8e
 800d478:	00db      	lsls	r3, r3, #3
 800d47a:	58d3      	ldr	r3, [r2, r3]
 800d47c:	4a5f      	ldr	r2, [pc, #380]	; (800d5fc <ResetMacParameters+0x1c0>)
 800d47e:	2101      	movs	r1, #1
 800d480:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->AckTimeoutRetriesCounter = 1;
 800d482:	4a5d      	ldr	r2, [pc, #372]	; (800d5f8 <ResetMacParameters+0x1bc>)
 800d484:	238e      	movs	r3, #142	; 0x8e
 800d486:	00db      	lsls	r3, r3, #3
 800d488:	58d3      	ldr	r3, [r2, r3]
 800d48a:	4a5d      	ldr	r2, [pc, #372]	; (800d600 <ResetMacParameters+0x1c4>)
 800d48c:	2101      	movs	r1, #1
 800d48e:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->AckTimeoutRetry = false;
 800d490:	4a59      	ldr	r2, [pc, #356]	; (800d5f8 <ResetMacParameters+0x1bc>)
 800d492:	238e      	movs	r3, #142	; 0x8e
 800d494:	00db      	lsls	r3, r3, #3
 800d496:	58d2      	ldr	r2, [r2, r3]
 800d498:	2386      	movs	r3, #134	; 0x86
 800d49a:	009b      	lsls	r3, r3, #2
 800d49c:	2100      	movs	r1, #0
 800d49e:	54d1      	strb	r1, [r2, r3]

    MacCtx.NvmCtx->MaxDCycle = 0;
 800d4a0:	4a55      	ldr	r2, [pc, #340]	; (800d5f8 <ResetMacParameters+0x1bc>)
 800d4a2:	238e      	movs	r3, #142	; 0x8e
 800d4a4:	00db      	lsls	r3, r3, #3
 800d4a6:	58d2      	ldr	r2, [r2, r3]
 800d4a8:	2312      	movs	r3, #18
 800d4aa:	33ff      	adds	r3, #255	; 0xff
 800d4ac:	2100      	movs	r1, #0
 800d4ae:	54d1      	strb	r1, [r2, r3]
    MacCtx.NvmCtx->AggregatedDCycle = 1;
 800d4b0:	4a51      	ldr	r2, [pc, #324]	; (800d5f8 <ResetMacParameters+0x1bc>)
 800d4b2:	238e      	movs	r3, #142	; 0x8e
 800d4b4:	00db      	lsls	r3, r3, #3
 800d4b6:	58d2      	ldr	r2, [r2, r3]
 800d4b8:	2387      	movs	r3, #135	; 0x87
 800d4ba:	009b      	lsls	r3, r3, #2
 800d4bc:	2101      	movs	r1, #1
 800d4be:	52d1      	strh	r1, [r2, r3]

    MacCtx.NvmCtx->MacParams.ChannelsTxPower = MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower;
 800d4c0:	4a4d      	ldr	r2, [pc, #308]	; (800d5f8 <ResetMacParameters+0x1bc>)
 800d4c2:	238e      	movs	r3, #142	; 0x8e
 800d4c4:	00db      	lsls	r3, r3, #3
 800d4c6:	58d2      	ldr	r2, [r2, r3]
 800d4c8:	494b      	ldr	r1, [pc, #300]	; (800d5f8 <ResetMacParameters+0x1bc>)
 800d4ca:	238e      	movs	r3, #142	; 0x8e
 800d4cc:	00db      	lsls	r3, r3, #3
 800d4ce:	58cb      	ldr	r3, [r1, r3]
 800d4d0:	2104      	movs	r1, #4
 800d4d2:	5651      	ldrsb	r1, [r2, r1]
 800d4d4:	22d4      	movs	r2, #212	; 0xd4
 800d4d6:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParams.ChannelsDatarate = MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate;
 800d4d8:	4a47      	ldr	r2, [pc, #284]	; (800d5f8 <ResetMacParameters+0x1bc>)
 800d4da:	238e      	movs	r3, #142	; 0x8e
 800d4dc:	00db      	lsls	r3, r3, #3
 800d4de:	58d2      	ldr	r2, [r2, r3]
 800d4e0:	4945      	ldr	r1, [pc, #276]	; (800d5f8 <ResetMacParameters+0x1bc>)
 800d4e2:	238e      	movs	r3, #142	; 0x8e
 800d4e4:	00db      	lsls	r3, r3, #3
 800d4e6:	58cb      	ldr	r3, [r1, r3]
 800d4e8:	2105      	movs	r1, #5
 800d4ea:	5651      	ldrsb	r1, [r2, r1]
 800d4ec:	22d5      	movs	r2, #213	; 0xd5
 800d4ee:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParams.Rx1DrOffset = MacCtx.NvmCtx->MacParamsDefaults.Rx1DrOffset;
 800d4f0:	4a41      	ldr	r2, [pc, #260]	; (800d5f8 <ResetMacParameters+0x1bc>)
 800d4f2:	238e      	movs	r3, #142	; 0x8e
 800d4f4:	00db      	lsls	r3, r3, #3
 800d4f6:	58d2      	ldr	r2, [r2, r3]
 800d4f8:	493f      	ldr	r1, [pc, #252]	; (800d5f8 <ResetMacParameters+0x1bc>)
 800d4fa:	238e      	movs	r3, #142	; 0x8e
 800d4fc:	00db      	lsls	r3, r3, #3
 800d4fe:	58cb      	ldr	r3, [r1, r3]
 800d500:	2125      	movs	r1, #37	; 0x25
 800d502:	5c51      	ldrb	r1, [r2, r1]
 800d504:	22f5      	movs	r2, #245	; 0xf5
 800d506:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParams.Rx2Channel = MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel;
 800d508:	4a3b      	ldr	r2, [pc, #236]	; (800d5f8 <ResetMacParameters+0x1bc>)
 800d50a:	238e      	movs	r3, #142	; 0x8e
 800d50c:	00db      	lsls	r3, r3, #3
 800d50e:	58d2      	ldr	r2, [r2, r3]
 800d510:	4939      	ldr	r1, [pc, #228]	; (800d5f8 <ResetMacParameters+0x1bc>)
 800d512:	238e      	movs	r3, #142	; 0x8e
 800d514:	00db      	lsls	r3, r3, #3
 800d516:	58cb      	ldr	r3, [r1, r3]
 800d518:	21f8      	movs	r1, #248	; 0xf8
 800d51a:	185b      	adds	r3, r3, r1
 800d51c:	3228      	adds	r2, #40	; 0x28
 800d51e:	ca03      	ldmia	r2!, {r0, r1}
 800d520:	c303      	stmia	r3!, {r0, r1}
    MacCtx.NvmCtx->MacParams.UplinkDwellTime = MacCtx.NvmCtx->MacParamsDefaults.UplinkDwellTime;
 800d522:	4a35      	ldr	r2, [pc, #212]	; (800d5f8 <ResetMacParameters+0x1bc>)
 800d524:	238e      	movs	r3, #142	; 0x8e
 800d526:	00db      	lsls	r3, r3, #3
 800d528:	58d3      	ldr	r3, [r2, r3]
 800d52a:	4933      	ldr	r1, [pc, #204]	; (800d5f8 <ResetMacParameters+0x1bc>)
 800d52c:	228e      	movs	r2, #142	; 0x8e
 800d52e:	00d2      	lsls	r2, r2, #3
 800d530:	588a      	ldr	r2, [r1, r2]
 800d532:	2130      	movs	r1, #48	; 0x30
 800d534:	5c59      	ldrb	r1, [r3, r1]
 800d536:	2380      	movs	r3, #128	; 0x80
 800d538:	005b      	lsls	r3, r3, #1
 800d53a:	54d1      	strb	r1, [r2, r3]
    MacCtx.NvmCtx->MacParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParamsDefaults.DownlinkDwellTime;
 800d53c:	4a2e      	ldr	r2, [pc, #184]	; (800d5f8 <ResetMacParameters+0x1bc>)
 800d53e:	238e      	movs	r3, #142	; 0x8e
 800d540:	00db      	lsls	r3, r3, #3
 800d542:	58d3      	ldr	r3, [r2, r3]
 800d544:	492c      	ldr	r1, [pc, #176]	; (800d5f8 <ResetMacParameters+0x1bc>)
 800d546:	228e      	movs	r2, #142	; 0x8e
 800d548:	00d2      	lsls	r2, r2, #3
 800d54a:	588a      	ldr	r2, [r1, r2]
 800d54c:	2131      	movs	r1, #49	; 0x31
 800d54e:	5c59      	ldrb	r1, [r3, r1]
 800d550:	2302      	movs	r3, #2
 800d552:	33ff      	adds	r3, #255	; 0xff
 800d554:	54d1      	strb	r1, [r2, r3]
    MacCtx.NvmCtx->MacParams.MaxEirp = MacCtx.NvmCtx->MacParamsDefaults.MaxEirp;
 800d556:	4a28      	ldr	r2, [pc, #160]	; (800d5f8 <ResetMacParameters+0x1bc>)
 800d558:	238e      	movs	r3, #142	; 0x8e
 800d55a:	00db      	lsls	r3, r3, #3
 800d55c:	58d3      	ldr	r3, [r2, r3]
 800d55e:	4926      	ldr	r1, [pc, #152]	; (800d5f8 <ResetMacParameters+0x1bc>)
 800d560:	228e      	movs	r2, #142	; 0x8e
 800d562:	00d2      	lsls	r2, r2, #3
 800d564:	588a      	ldr	r2, [r1, r2]
 800d566:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800d568:	2382      	movs	r3, #130	; 0x82
 800d56a:	005b      	lsls	r3, r3, #1
 800d56c:	50d1      	str	r1, [r2, r3]
    MacCtx.NvmCtx->MacParams.AntennaGain = MacCtx.NvmCtx->MacParamsDefaults.AntennaGain;
 800d56e:	4a22      	ldr	r2, [pc, #136]	; (800d5f8 <ResetMacParameters+0x1bc>)
 800d570:	238e      	movs	r3, #142	; 0x8e
 800d572:	00db      	lsls	r3, r3, #3
 800d574:	58d3      	ldr	r3, [r2, r3]
 800d576:	4920      	ldr	r1, [pc, #128]	; (800d5f8 <ResetMacParameters+0x1bc>)
 800d578:	228e      	movs	r2, #142	; 0x8e
 800d57a:	00d2      	lsls	r2, r2, #3
 800d57c:	588a      	ldr	r2, [r1, r2]
 800d57e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800d580:	2384      	movs	r3, #132	; 0x84
 800d582:	005b      	lsls	r3, r3, #1
 800d584:	50d1      	str	r1, [r2, r3]

    MacCtx.NvmCtx->NodeAckRequested = false;
 800d586:	4a1c      	ldr	r2, [pc, #112]	; (800d5f8 <ResetMacParameters+0x1bc>)
 800d588:	238e      	movs	r3, #142	; 0x8e
 800d58a:	00db      	lsls	r3, r3, #3
 800d58c:	58d3      	ldr	r3, [r2, r3]
 800d58e:	4a1d      	ldr	r2, [pc, #116]	; (800d604 <ResetMacParameters+0x1c8>)
 800d590:	2100      	movs	r1, #0
 800d592:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->SrvAckRequested = false;
 800d594:	4a18      	ldr	r2, [pc, #96]	; (800d5f8 <ResetMacParameters+0x1bc>)
 800d596:	238e      	movs	r3, #142	; 0x8e
 800d598:	00db      	lsls	r3, r3, #3
 800d59a:	58d3      	ldr	r3, [r2, r3]
 800d59c:	4a1a      	ldr	r2, [pc, #104]	; (800d608 <ResetMacParameters+0x1cc>)
 800d59e:	2100      	movs	r1, #0
 800d5a0:	5499      	strb	r1, [r3, r2]

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESTORE_DEFAULT_CHANNELS;
 800d5a2:	003b      	movs	r3, r7
 800d5a4:	2201      	movs	r2, #1
 800d5a6:	711a      	strb	r2, [r3, #4]
    params.NvmCtx = NULL;
 800d5a8:	003b      	movs	r3, r7
 800d5aa:	2200      	movs	r2, #0
 800d5ac:	601a      	str	r2, [r3, #0]
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 800d5ae:	4a12      	ldr	r2, [pc, #72]	; (800d5f8 <ResetMacParameters+0x1bc>)
 800d5b0:	238e      	movs	r3, #142	; 0x8e
 800d5b2:	00db      	lsls	r3, r3, #3
 800d5b4:	58d3      	ldr	r3, [r2, r3]
 800d5b6:	781b      	ldrb	r3, [r3, #0]
 800d5b8:	003a      	movs	r2, r7
 800d5ba:	0011      	movs	r1, r2
 800d5bc:	0018      	movs	r0, r3
 800d5be:	f005 fc96 	bl	8012eee <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.NvmCtx->Channel = 0;
 800d5c2:	4a0d      	ldr	r2, [pc, #52]	; (800d5f8 <ResetMacParameters+0x1bc>)
 800d5c4:	238e      	movs	r3, #142	; 0x8e
 800d5c6:	00db      	lsls	r3, r3, #3
 800d5c8:	58d2      	ldr	r2, [r2, r3]
 800d5ca:	2314      	movs	r3, #20
 800d5cc:	33ff      	adds	r3, #255	; 0xff
 800d5ce:	2100      	movs	r1, #0
 800d5d0:	54d1      	strb	r1, [r2, r3]
    MacCtx.NvmCtx->LastTxChannel = MacCtx.NvmCtx->Channel;
 800d5d2:	4a09      	ldr	r2, [pc, #36]	; (800d5f8 <ResetMacParameters+0x1bc>)
 800d5d4:	238e      	movs	r3, #142	; 0x8e
 800d5d6:	00db      	lsls	r3, r3, #3
 800d5d8:	58d1      	ldr	r1, [r2, r3]
 800d5da:	4a07      	ldr	r2, [pc, #28]	; (800d5f8 <ResetMacParameters+0x1bc>)
 800d5dc:	238e      	movs	r3, #142	; 0x8e
 800d5de:	00db      	lsls	r3, r3, #3
 800d5e0:	58d2      	ldr	r2, [r2, r3]
 800d5e2:	2314      	movs	r3, #20
 800d5e4:	33ff      	adds	r3, #255	; 0xff
 800d5e6:	5cc9      	ldrb	r1, [r1, r3]
 800d5e8:	238a      	movs	r3, #138	; 0x8a
 800d5ea:	005b      	lsls	r3, r3, #1
 800d5ec:	54d1      	strb	r1, [r2, r3]
}
 800d5ee:	46c0      	nop			; (mov r8, r8)
 800d5f0:	46bd      	mov	sp, r7
 800d5f2:	b002      	add	sp, #8
 800d5f4:	bd80      	pop	{r7, pc}
 800d5f6:	46c0      	nop			; (mov r8, r8)
 800d5f8:	20000708 	.word	0x20000708
 800d5fc:	00000216 	.word	0x00000216
 800d600:	00000217 	.word	0x00000217
 800d604:	00000219 	.word	0x00000219
 800d608:	0000021a 	.word	0x0000021a

0800d60c <OpenContinuousRx2Window>:

static void OpenContinuousRx2Window( void )
{
 800d60c:	b580      	push	{r7, lr}
 800d60e:	af00      	add	r7, sp, #0
    OnRxWindow2TimerEvent( NULL );
 800d610:	2000      	movs	r0, #0
 800d612:	f7fe fb01 	bl	800bc18 <OnRxWindow2TimerEvent>
    MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 800d616:	4b03      	ldr	r3, [pc, #12]	; (800d624 <OpenContinuousRx2Window+0x18>)
 800d618:	4a03      	ldr	r2, [pc, #12]	; (800d628 <OpenContinuousRx2Window+0x1c>)
 800d61a:	2102      	movs	r1, #2
 800d61c:	5499      	strb	r1, [r3, r2]
}
 800d61e:	46c0      	nop			; (mov r8, r8)
 800d620:	46bd      	mov	sp, r7
 800d622:	bd80      	pop	{r7, pc}
 800d624:	20000708 	.word	0x20000708
 800d628:	0000046c 	.word	0x0000046c

0800d62c <PrepareFrame>:

LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t* macHdr, LoRaMacFrameCtrl_t* fCtrl, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 800d62c:	b590      	push	{r4, r7, lr}
 800d62e:	b089      	sub	sp, #36	; 0x24
 800d630:	af00      	add	r7, sp, #0
 800d632:	60f8      	str	r0, [r7, #12]
 800d634:	60b9      	str	r1, [r7, #8]
 800d636:	603b      	str	r3, [r7, #0]
 800d638:	1dfb      	adds	r3, r7, #7
 800d63a:	701a      	strb	r2, [r3, #0]
    MacCtx.PktBufferLen = 0;
 800d63c:	4ba0      	ldr	r3, [pc, #640]	; (800d8c0 <PrepareFrame+0x294>)
 800d63e:	2200      	movs	r2, #0
 800d640:	811a      	strh	r2, [r3, #8]
    MacCtx.NvmCtx->NodeAckRequested = false;
 800d642:	4a9f      	ldr	r2, [pc, #636]	; (800d8c0 <PrepareFrame+0x294>)
 800d644:	238e      	movs	r3, #142	; 0x8e
 800d646:	00db      	lsls	r3, r3, #3
 800d648:	58d3      	ldr	r3, [r2, r3]
 800d64a:	4a9e      	ldr	r2, [pc, #632]	; (800d8c4 <PrepareFrame+0x298>)
 800d64c:	2100      	movs	r1, #0
 800d64e:	5499      	strb	r1, [r3, r2]
    uint32_t fCntUp = 0;
 800d650:	2300      	movs	r3, #0
 800d652:	61bb      	str	r3, [r7, #24]
    size_t macCmdsSize = 0;
 800d654:	2300      	movs	r3, #0
 800d656:	617b      	str	r3, [r7, #20]
    uint8_t availableSize = 0;
 800d658:	231f      	movs	r3, #31
 800d65a:	18fb      	adds	r3, r7, r3
 800d65c:	2200      	movs	r2, #0
 800d65e:	701a      	strb	r2, [r3, #0]

    if( fBuffer == NULL )
 800d660:	683b      	ldr	r3, [r7, #0]
 800d662:	2b00      	cmp	r3, #0
 800d664:	d103      	bne.n	800d66e <PrepareFrame+0x42>
    {
        fBufferSize = 0;
 800d666:	2330      	movs	r3, #48	; 0x30
 800d668:	18fb      	adds	r3, r7, r3
 800d66a:	2200      	movs	r2, #0
 800d66c:	801a      	strh	r2, [r3, #0]
    }

    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 800d66e:	2430      	movs	r4, #48	; 0x30
 800d670:	193b      	adds	r3, r7, r4
 800d672:	881a      	ldrh	r2, [r3, #0]
 800d674:	6839      	ldr	r1, [r7, #0]
 800d676:	4b94      	ldr	r3, [pc, #592]	; (800d8c8 <PrepareFrame+0x29c>)
 800d678:	0018      	movs	r0, r3
 800d67a:	f008 f9b9 	bl	80159f0 <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 800d67e:	193b      	adds	r3, r7, r4
 800d680:	881b      	ldrh	r3, [r3, #0]
 800d682:	b2d9      	uxtb	r1, r3
 800d684:	4b8e      	ldr	r3, [pc, #568]	; (800d8c0 <PrepareFrame+0x294>)
 800d686:	4a91      	ldr	r2, [pc, #580]	; (800d8cc <PrepareFrame+0x2a0>)
 800d688:	5499      	strb	r1, [r3, r2]
    MacCtx.PktBuffer[0] = macHdr->Value;
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	781a      	ldrb	r2, [r3, #0]
 800d68e:	4b8c      	ldr	r3, [pc, #560]	; (800d8c0 <PrepareFrame+0x294>)
 800d690:	729a      	strb	r2, [r3, #10]

    switch( macHdr->Bits.MType )
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	781b      	ldrb	r3, [r3, #0]
 800d696:	061b      	lsls	r3, r3, #24
 800d698:	0f5b      	lsrs	r3, r3, #29
 800d69a:	b2db      	uxtb	r3, r3
 800d69c:	2b04      	cmp	r3, #4
 800d69e:	d005      	beq.n	800d6ac <PrepareFrame+0x80>
 800d6a0:	2b07      	cmp	r3, #7
 800d6a2:	d100      	bne.n	800d6a6 <PrepareFrame+0x7a>
 800d6a4:	e0e7      	b.n	800d876 <PrepareFrame+0x24a>
 800d6a6:	2b02      	cmp	r3, #2
 800d6a8:	d007      	beq.n	800d6ba <PrepareFrame+0x8e>
 800d6aa:	e0fe      	b.n	800d8aa <PrepareFrame+0x27e>
    {
        case FRAME_TYPE_DATA_CONFIRMED_UP:
            MacCtx.NvmCtx->NodeAckRequested = true;
 800d6ac:	4a84      	ldr	r2, [pc, #528]	; (800d8c0 <PrepareFrame+0x294>)
 800d6ae:	238e      	movs	r3, #142	; 0x8e
 800d6b0:	00db      	lsls	r3, r3, #3
 800d6b2:	58d3      	ldr	r3, [r2, r3]
 800d6b4:	4a83      	ldr	r2, [pc, #524]	; (800d8c4 <PrepareFrame+0x298>)
 800d6b6:	2101      	movs	r1, #1
 800d6b8:	5499      	strb	r1, [r3, r2]
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 800d6ba:	4a81      	ldr	r2, [pc, #516]	; (800d8c0 <PrepareFrame+0x294>)
 800d6bc:	2386      	movs	r3, #134	; 0x86
 800d6be:	005b      	lsls	r3, r3, #1
 800d6c0:	2104      	movs	r1, #4
 800d6c2:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 800d6c4:	4a7e      	ldr	r2, [pc, #504]	; (800d8c0 <PrepareFrame+0x294>)
 800d6c6:	2388      	movs	r3, #136	; 0x88
 800d6c8:	005b      	lsls	r3, r3, #1
 800d6ca:	4981      	ldr	r1, [pc, #516]	; (800d8d0 <PrepareFrame+0x2a4>)
 800d6cc:	50d1      	str	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800d6ce:	4a7c      	ldr	r2, [pc, #496]	; (800d8c0 <PrepareFrame+0x294>)
 800d6d0:	238a      	movs	r3, #138	; 0x8a
 800d6d2:	005b      	lsls	r3, r3, #1
 800d6d4:	21ff      	movs	r1, #255	; 0xff
 800d6d6:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	7819      	ldrb	r1, [r3, #0]
 800d6dc:	4a78      	ldr	r2, [pc, #480]	; (800d8c0 <PrepareFrame+0x294>)
 800d6de:	2316      	movs	r3, #22
 800d6e0:	33ff      	adds	r3, #255	; 0xff
 800d6e2:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 800d6e4:	4a76      	ldr	r2, [pc, #472]	; (800d8c0 <PrepareFrame+0x294>)
 800d6e6:	1df9      	adds	r1, r7, #7
 800d6e8:	2398      	movs	r3, #152	; 0x98
 800d6ea:	005b      	lsls	r3, r3, #1
 800d6ec:	7809      	ldrb	r1, [r1, #0]
 800d6ee:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = MacCtx.NvmCtx->DevAddr;
 800d6f0:	4a73      	ldr	r2, [pc, #460]	; (800d8c0 <PrepareFrame+0x294>)
 800d6f2:	238e      	movs	r3, #142	; 0x8e
 800d6f4:	00db      	lsls	r3, r3, #3
 800d6f6:	58d3      	ldr	r3, [r2, r3]
 800d6f8:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800d6fa:	4a71      	ldr	r2, [pc, #452]	; (800d8c0 <PrepareFrame+0x294>)
 800d6fc:	238c      	movs	r3, #140	; 0x8c
 800d6fe:	005b      	lsls	r3, r3, #1
 800d700:	50d1      	str	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800d702:	68bb      	ldr	r3, [r7, #8]
 800d704:	7819      	ldrb	r1, [r3, #0]
 800d706:	4a6e      	ldr	r2, [pc, #440]	; (800d8c0 <PrepareFrame+0x294>)
 800d708:	238e      	movs	r3, #142	; 0x8e
 800d70a:	005b      	lsls	r3, r3, #1
 800d70c:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 800d70e:	4b6c      	ldr	r3, [pc, #432]	; (800d8c0 <PrepareFrame+0x294>)
 800d710:	4a6e      	ldr	r2, [pc, #440]	; (800d8cc <PrepareFrame+0x2a0>)
 800d712:	5c99      	ldrb	r1, [r3, r2]
 800d714:	4a6a      	ldr	r2, [pc, #424]	; (800d8c0 <PrepareFrame+0x294>)
 800d716:	239c      	movs	r3, #156	; 0x9c
 800d718:	005b      	lsls	r3, r3, #1
 800d71a:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 800d71c:	4a68      	ldr	r2, [pc, #416]	; (800d8c0 <PrepareFrame+0x294>)
 800d71e:	239a      	movs	r3, #154	; 0x9a
 800d720:	005b      	lsls	r3, r3, #1
 800d722:	4969      	ldr	r1, [pc, #420]	; (800d8c8 <PrepareFrame+0x29c>)
 800d724:	50d1      	str	r1, [r2, r3]

            if( LORAMAC_FCNT_HANDLER_SUCCESS != LoRaMacGetFCntUp( &fCntUp ) )
 800d726:	2318      	movs	r3, #24
 800d728:	18fb      	adds	r3, r7, r3
 800d72a:	0018      	movs	r0, r3
 800d72c:	f004 ff5c 	bl	80125e8 <LoRaMacGetFCntUp>
 800d730:	1e03      	subs	r3, r0, #0
 800d732:	d001      	beq.n	800d738 <PrepareFrame+0x10c>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800d734:	2312      	movs	r3, #18
 800d736:	e0be      	b.n	800d8b6 <PrepareFrame+0x28a>
            }
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t ) fCntUp;
 800d738:	69bb      	ldr	r3, [r7, #24]
 800d73a:	b299      	uxth	r1, r3
 800d73c:	4a60      	ldr	r2, [pc, #384]	; (800d8c0 <PrepareFrame+0x294>)
 800d73e:	238f      	movs	r3, #143	; 0x8f
 800d740:	005b      	lsls	r3, r3, #1
 800d742:	52d1      	strh	r1, [r2, r3]

            // Reset confirm parameters
            MacCtx.McpsConfirm.NbRetries = 0;
 800d744:	4b5e      	ldr	r3, [pc, #376]	; (800d8c0 <PrepareFrame+0x294>)
 800d746:	4a63      	ldr	r2, [pc, #396]	; (800d8d4 <PrepareFrame+0x2a8>)
 800d748:	2100      	movs	r1, #0
 800d74a:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsConfirm.AckReceived = false;
 800d74c:	4a5c      	ldr	r2, [pc, #368]	; (800d8c0 <PrepareFrame+0x294>)
 800d74e:	2386      	movs	r3, #134	; 0x86
 800d750:	00db      	lsls	r3, r3, #3
 800d752:	2100      	movs	r1, #0
 800d754:	54d1      	strb	r1, [r2, r3]
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 800d756:	69b9      	ldr	r1, [r7, #24]
 800d758:	4a59      	ldr	r2, [pc, #356]	; (800d8c0 <PrepareFrame+0x294>)
 800d75a:	2387      	movs	r3, #135	; 0x87
 800d75c:	00db      	lsls	r3, r3, #3
 800d75e:	50d1      	str	r1, [r2, r3]

            // Handle the MAC commands if there are any available
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800d760:	2314      	movs	r3, #20
 800d762:	18fb      	adds	r3, r7, r3
 800d764:	0018      	movs	r0, r3
 800d766:	f002 fec1 	bl	80104ec <LoRaMacCommandsGetSizeSerializedCmds>
 800d76a:	1e03      	subs	r3, r0, #0
 800d76c:	d001      	beq.n	800d772 <PrepareFrame+0x146>
            {
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800d76e:	2313      	movs	r3, #19
 800d770:	e0a1      	b.n	800d8b6 <PrepareFrame+0x28a>
            }

            if( macCmdsSize > 0 )
 800d772:	697b      	ldr	r3, [r7, #20]
 800d774:	2b00      	cmp	r3, #0
 800d776:	d100      	bne.n	800d77a <PrepareFrame+0x14e>
 800d778:	e099      	b.n	800d8ae <PrepareFrame+0x282>
            {
                availableSize = GetMaxAppPayloadWithoutFOptsLength( MacCtx.NvmCtx->MacParams.ChannelsDatarate );
 800d77a:	4a51      	ldr	r2, [pc, #324]	; (800d8c0 <PrepareFrame+0x294>)
 800d77c:	238e      	movs	r3, #142	; 0x8e
 800d77e:	00db      	lsls	r3, r3, #3
 800d780:	58d3      	ldr	r3, [r2, r3]
 800d782:	22d5      	movs	r2, #213	; 0xd5
 800d784:	569b      	ldrsb	r3, [r3, r2]
 800d786:	221f      	movs	r2, #31
 800d788:	18bc      	adds	r4, r7, r2
 800d78a:	0018      	movs	r0, r3
 800d78c:	f7fe fbf4 	bl	800bf78 <GetMaxAppPayloadWithoutFOptsLength>
 800d790:	0003      	movs	r3, r0
 800d792:	7023      	strb	r3, [r4, #0]

                // There is application payload available and the MAC commands fit into FOpts field.
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 800d794:	4b4a      	ldr	r3, [pc, #296]	; (800d8c0 <PrepareFrame+0x294>)
 800d796:	4a4d      	ldr	r2, [pc, #308]	; (800d8cc <PrepareFrame+0x2a0>)
 800d798:	5c9b      	ldrb	r3, [r3, r2]
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d024      	beq.n	800d7e8 <PrepareFrame+0x1bc>
 800d79e:	697b      	ldr	r3, [r7, #20]
 800d7a0:	2b0f      	cmp	r3, #15
 800d7a2:	d821      	bhi.n	800d7e8 <PrepareFrame+0x1bc>
                {
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 800d7a4:	4a4c      	ldr	r2, [pc, #304]	; (800d8d8 <PrepareFrame+0x2ac>)
 800d7a6:	2314      	movs	r3, #20
 800d7a8:	18fb      	adds	r3, r7, r3
 800d7aa:	0019      	movs	r1, r3
 800d7ac:	200f      	movs	r0, #15
 800d7ae:	f002 feb3 	bl	8010518 <LoRaMacCommandsSerializeCmds>
 800d7b2:	1e03      	subs	r3, r0, #0
 800d7b4:	d001      	beq.n	800d7ba <PrepareFrame+0x18e>
                    {
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800d7b6:	2313      	movs	r3, #19
 800d7b8:	e07d      	b.n	800d8b6 <PrepareFrame+0x28a>
                    }
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 800d7ba:	697b      	ldr	r3, [r7, #20]
 800d7bc:	1c1a      	adds	r2, r3, #0
 800d7be:	230f      	movs	r3, #15
 800d7c0:	4013      	ands	r3, r2
 800d7c2:	b2da      	uxtb	r2, r3
 800d7c4:	68bb      	ldr	r3, [r7, #8]
 800d7c6:	210f      	movs	r1, #15
 800d7c8:	400a      	ands	r2, r1
 800d7ca:	0010      	movs	r0, r2
 800d7cc:	781a      	ldrb	r2, [r3, #0]
 800d7ce:	210f      	movs	r1, #15
 800d7d0:	438a      	bics	r2, r1
 800d7d2:	1c11      	adds	r1, r2, #0
 800d7d4:	1c02      	adds	r2, r0, #0
 800d7d6:	430a      	orrs	r2, r1
 800d7d8:	701a      	strb	r2, [r3, #0]
                    // Update FCtrl field with new value of FOptionsLength
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800d7da:	68bb      	ldr	r3, [r7, #8]
 800d7dc:	7819      	ldrb	r1, [r3, #0]
 800d7de:	4a38      	ldr	r2, [pc, #224]	; (800d8c0 <PrepareFrame+0x294>)
 800d7e0:	238e      	movs	r3, #142	; 0x8e
 800d7e2:	005b      	lsls	r3, r3, #1
 800d7e4:	54d1      	strb	r1, [r2, r3]
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.NvmCtx->MacCommandsBuffer;
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
                }
            }

            break;
 800d7e6:	e062      	b.n	800d8ae <PrepareFrame+0x282>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 800d7e8:	4b35      	ldr	r3, [pc, #212]	; (800d8c0 <PrepareFrame+0x294>)
 800d7ea:	4a38      	ldr	r2, [pc, #224]	; (800d8cc <PrepareFrame+0x2a0>)
 800d7ec:	5c9b      	ldrb	r3, [r3, r2]
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d017      	beq.n	800d822 <PrepareFrame+0x1f6>
 800d7f2:	697b      	ldr	r3, [r7, #20]
 800d7f4:	2b0f      	cmp	r3, #15
 800d7f6:	d914      	bls.n	800d822 <PrepareFrame+0x1f6>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.NvmCtx->MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800d7f8:	231f      	movs	r3, #31
 800d7fa:	18fb      	adds	r3, r7, r3
 800d7fc:	7818      	ldrb	r0, [r3, #0]
 800d7fe:	4a30      	ldr	r2, [pc, #192]	; (800d8c0 <PrepareFrame+0x294>)
 800d800:	238e      	movs	r3, #142	; 0x8e
 800d802:	00db      	lsls	r3, r3, #3
 800d804:	58d3      	ldr	r3, [r2, r3]
 800d806:	3317      	adds	r3, #23
 800d808:	33ff      	adds	r3, #255	; 0xff
 800d80a:	001a      	movs	r2, r3
 800d80c:	2314      	movs	r3, #20
 800d80e:	18fb      	adds	r3, r7, r3
 800d810:	0019      	movs	r1, r3
 800d812:	f002 fe81 	bl	8010518 <LoRaMacCommandsSerializeCmds>
 800d816:	1e03      	subs	r3, r0, #0
 800d818:	d001      	beq.n	800d81e <PrepareFrame+0x1f2>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800d81a:	2313      	movs	r3, #19
 800d81c:	e04b      	b.n	800d8b6 <PrepareFrame+0x28a>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 800d81e:	230a      	movs	r3, #10
 800d820:	e049      	b.n	800d8b6 <PrepareFrame+0x28a>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.NvmCtx->MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800d822:	231f      	movs	r3, #31
 800d824:	18fb      	adds	r3, r7, r3
 800d826:	7818      	ldrb	r0, [r3, #0]
 800d828:	4a25      	ldr	r2, [pc, #148]	; (800d8c0 <PrepareFrame+0x294>)
 800d82a:	238e      	movs	r3, #142	; 0x8e
 800d82c:	00db      	lsls	r3, r3, #3
 800d82e:	58d3      	ldr	r3, [r2, r3]
 800d830:	3317      	adds	r3, #23
 800d832:	33ff      	adds	r3, #255	; 0xff
 800d834:	001a      	movs	r2, r3
 800d836:	2314      	movs	r3, #20
 800d838:	18fb      	adds	r3, r7, r3
 800d83a:	0019      	movs	r1, r3
 800d83c:	f002 fe6c 	bl	8010518 <LoRaMacCommandsSerializeCmds>
 800d840:	1e03      	subs	r3, r0, #0
 800d842:	d001      	beq.n	800d848 <PrepareFrame+0x21c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800d844:	2313      	movs	r3, #19
 800d846:	e036      	b.n	800d8b6 <PrepareFrame+0x28a>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 800d848:	4a1d      	ldr	r2, [pc, #116]	; (800d8c0 <PrepareFrame+0x294>)
 800d84a:	2398      	movs	r3, #152	; 0x98
 800d84c:	005b      	lsls	r3, r3, #1
 800d84e:	2100      	movs	r1, #0
 800d850:	54d1      	strb	r1, [r2, r3]
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.NvmCtx->MacCommandsBuffer;
 800d852:	4a1b      	ldr	r2, [pc, #108]	; (800d8c0 <PrepareFrame+0x294>)
 800d854:	238e      	movs	r3, #142	; 0x8e
 800d856:	00db      	lsls	r3, r3, #3
 800d858:	58d3      	ldr	r3, [r2, r3]
 800d85a:	3317      	adds	r3, #23
 800d85c:	33ff      	adds	r3, #255	; 0xff
 800d85e:	0019      	movs	r1, r3
 800d860:	4a17      	ldr	r2, [pc, #92]	; (800d8c0 <PrepareFrame+0x294>)
 800d862:	239a      	movs	r3, #154	; 0x9a
 800d864:	005b      	lsls	r3, r3, #1
 800d866:	50d1      	str	r1, [r2, r3]
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 800d868:	697b      	ldr	r3, [r7, #20]
 800d86a:	b2d9      	uxtb	r1, r3
 800d86c:	4a14      	ldr	r2, [pc, #80]	; (800d8c0 <PrepareFrame+0x294>)
 800d86e:	239c      	movs	r3, #156	; 0x9c
 800d870:	005b      	lsls	r3, r3, #1
 800d872:	54d1      	strb	r1, [r2, r3]
            break;
 800d874:	e01b      	b.n	800d8ae <PrepareFrame+0x282>
        case FRAME_TYPE_PROPRIETARY:
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 800d876:	683b      	ldr	r3, [r7, #0]
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d01a      	beq.n	800d8b2 <PrepareFrame+0x286>
 800d87c:	4b10      	ldr	r3, [pc, #64]	; (800d8c0 <PrepareFrame+0x294>)
 800d87e:	4a13      	ldr	r2, [pc, #76]	; (800d8cc <PrepareFrame+0x2a0>)
 800d880:	5c9b      	ldrb	r3, [r3, r2]
 800d882:	2b00      	cmp	r3, #0
 800d884:	d015      	beq.n	800d8b2 <PrepareFrame+0x286>
            {
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 800d886:	4815      	ldr	r0, [pc, #84]	; (800d8dc <PrepareFrame+0x2b0>)
 800d888:	4b0d      	ldr	r3, [pc, #52]	; (800d8c0 <PrepareFrame+0x294>)
 800d88a:	4a10      	ldr	r2, [pc, #64]	; (800d8cc <PrepareFrame+0x2a0>)
 800d88c:	5c9b      	ldrb	r3, [r3, r2]
 800d88e:	b29a      	uxth	r2, r3
 800d890:	683b      	ldr	r3, [r7, #0]
 800d892:	0019      	movs	r1, r3
 800d894:	f008 f8ac 	bl	80159f0 <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 800d898:	4b09      	ldr	r3, [pc, #36]	; (800d8c0 <PrepareFrame+0x294>)
 800d89a:	4a0c      	ldr	r2, [pc, #48]	; (800d8cc <PrepareFrame+0x2a0>)
 800d89c:	5c9b      	ldrb	r3, [r3, r2]
 800d89e:	b29b      	uxth	r3, r3
 800d8a0:	3301      	adds	r3, #1
 800d8a2:	b29a      	uxth	r2, r3
 800d8a4:	4b06      	ldr	r3, [pc, #24]	; (800d8c0 <PrepareFrame+0x294>)
 800d8a6:	811a      	strh	r2, [r3, #8]
            }
            break;
 800d8a8:	e003      	b.n	800d8b2 <PrepareFrame+0x286>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 800d8aa:	2302      	movs	r3, #2
 800d8ac:	e003      	b.n	800d8b6 <PrepareFrame+0x28a>
            break;
 800d8ae:	46c0      	nop			; (mov r8, r8)
 800d8b0:	e000      	b.n	800d8b4 <PrepareFrame+0x288>
            break;
 800d8b2:	46c0      	nop			; (mov r8, r8)
    }

    return LORAMAC_STATUS_OK;
 800d8b4:	2300      	movs	r3, #0
}
 800d8b6:	0018      	movs	r0, r3
 800d8b8:	46bd      	mov	sp, r7
 800d8ba:	b009      	add	sp, #36	; 0x24
 800d8bc:	bd90      	pop	{r4, r7, pc}
 800d8be:	46c0      	nop			; (mov r8, r8)
 800d8c0:	20000708 	.word	0x20000708
 800d8c4:	00000219 	.word	0x00000219
 800d8c8:	20000848 	.word	0x20000848
 800d8cc:	0000023f 	.word	0x0000023f
 800d8d0:	20000712 	.word	0x20000712
 800d8d4:	00000431 	.word	0x00000431
 800d8d8:	20000828 	.word	0x20000828
 800d8dc:	20000713 	.word	0x20000713

0800d8e0 <SendFrameOnChannel>:

LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 800d8e0:	b590      	push	{r4, r7, lr}
 800d8e2:	b089      	sub	sp, #36	; 0x24
 800d8e4:	af00      	add	r7, sp, #0
 800d8e6:	0002      	movs	r2, r0
 800d8e8:	1dfb      	adds	r3, r7, #7
 800d8ea:	701a      	strb	r2, [r3, #0]
    TxConfigParams_t txConfig;
    int8_t txPower = 0;
 800d8ec:	230b      	movs	r3, #11
 800d8ee:	18fb      	adds	r3, r7, r3
 800d8f0:	2200      	movs	r2, #0
 800d8f2:	701a      	strb	r2, [r3, #0]

    txConfig.Channel = channel;
 800d8f4:	210c      	movs	r1, #12
 800d8f6:	187b      	adds	r3, r7, r1
 800d8f8:	1dfa      	adds	r2, r7, #7
 800d8fa:	7812      	ldrb	r2, [r2, #0]
 800d8fc:	701a      	strb	r2, [r3, #0]
    txConfig.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800d8fe:	4a4f      	ldr	r2, [pc, #316]	; (800da3c <SendFrameOnChannel+0x15c>)
 800d900:	238e      	movs	r3, #142	; 0x8e
 800d902:	00db      	lsls	r3, r3, #3
 800d904:	58d3      	ldr	r3, [r2, r3]
 800d906:	22d5      	movs	r2, #213	; 0xd5
 800d908:	569a      	ldrsb	r2, [r3, r2]
 800d90a:	187b      	adds	r3, r7, r1
 800d90c:	705a      	strb	r2, [r3, #1]
    txConfig.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 800d90e:	4a4b      	ldr	r2, [pc, #300]	; (800da3c <SendFrameOnChannel+0x15c>)
 800d910:	238e      	movs	r3, #142	; 0x8e
 800d912:	00db      	lsls	r3, r3, #3
 800d914:	58d3      	ldr	r3, [r2, r3]
 800d916:	22d4      	movs	r2, #212	; 0xd4
 800d918:	569a      	ldrsb	r2, [r3, r2]
 800d91a:	187b      	adds	r3, r7, r1
 800d91c:	709a      	strb	r2, [r3, #2]
    txConfig.MaxEirp = MacCtx.NvmCtx->MacParams.MaxEirp;
 800d91e:	4a47      	ldr	r2, [pc, #284]	; (800da3c <SendFrameOnChannel+0x15c>)
 800d920:	238e      	movs	r3, #142	; 0x8e
 800d922:	00db      	lsls	r3, r3, #3
 800d924:	58d2      	ldr	r2, [r2, r3]
 800d926:	2382      	movs	r3, #130	; 0x82
 800d928:	005b      	lsls	r3, r3, #1
 800d92a:	58d2      	ldr	r2, [r2, r3]
 800d92c:	187b      	adds	r3, r7, r1
 800d92e:	605a      	str	r2, [r3, #4]
    txConfig.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 800d930:	4a42      	ldr	r2, [pc, #264]	; (800da3c <SendFrameOnChannel+0x15c>)
 800d932:	238e      	movs	r3, #142	; 0x8e
 800d934:	00db      	lsls	r3, r3, #3
 800d936:	58d2      	ldr	r2, [r2, r3]
 800d938:	2384      	movs	r3, #132	; 0x84
 800d93a:	005b      	lsls	r3, r3, #1
 800d93c:	58d2      	ldr	r2, [r2, r3]
 800d93e:	187b      	adds	r3, r7, r1
 800d940:	609a      	str	r2, [r3, #8]
    txConfig.PktLen = MacCtx.PktBufferLen;
 800d942:	4b3e      	ldr	r3, [pc, #248]	; (800da3c <SendFrameOnChannel+0x15c>)
 800d944:	891a      	ldrh	r2, [r3, #8]
 800d946:	187b      	adds	r3, r7, r1
 800d948:	819a      	strh	r2, [r3, #12]


    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800d94a:	f002 faf4 	bl	800ff36 <LoRaMacClassBIsBeaconExpected>
 800d94e:	1e03      	subs	r3, r0, #0
 800d950:	d001      	beq.n	800d956 <SendFrameOnChannel+0x76>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 800d952:	230e      	movs	r3, #14
 800d954:	e06d      	b.n	800da32 <SendFrameOnChannel+0x152>
    }

    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 800d956:	4a39      	ldr	r2, [pc, #228]	; (800da3c <SendFrameOnChannel+0x15c>)
 800d958:	238e      	movs	r3, #142	; 0x8e
 800d95a:	00db      	lsls	r3, r3, #3
 800d95c:	58d3      	ldr	r3, [r2, r3]
 800d95e:	22c8      	movs	r2, #200	; 0xc8
 800d960:	5c9b      	ldrb	r3, [r3, r2]
 800d962:	2b01      	cmp	r3, #1
 800d964:	d10d      	bne.n	800d982 <SendFrameOnChannel+0xa2>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800d966:	f002 faec 	bl	800ff42 <LoRaMacClassBIsPingExpected>
 800d96a:	1e03      	subs	r3, r0, #0
 800d96c:	d001      	beq.n	800d972 <SendFrameOnChannel+0x92>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800d96e:	230f      	movs	r3, #15
 800d970:	e05f      	b.n	800da32 <SendFrameOnChannel+0x152>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800d972:	f002 faec 	bl	800ff4e <LoRaMacClassBIsMulticastExpected>
 800d976:	1e03      	subs	r3, r0, #0
 800d978:	d001      	beq.n	800d97e <SendFrameOnChannel+0x9e>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800d97a:	230f      	movs	r3, #15
 800d97c:	e059      	b.n	800da32 <SendFrameOnChannel+0x152>
        }
        else
        {
            LoRaMacClassBStopRxSlots( );
 800d97e:	f002 fb59 	bl	8010034 <LoRaMacClassBStopRxSlots>
        }
    }
    RegionTxConfig( MacCtx.NvmCtx->Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 800d982:	4a2e      	ldr	r2, [pc, #184]	; (800da3c <SendFrameOnChannel+0x15c>)
 800d984:	238e      	movs	r3, #142	; 0x8e
 800d986:	00db      	lsls	r3, r3, #3
 800d988:	58d3      	ldr	r3, [r2, r3]
 800d98a:	7818      	ldrb	r0, [r3, #0]
 800d98c:	4b2c      	ldr	r3, [pc, #176]	; (800da40 <SendFrameOnChannel+0x160>)
 800d98e:	240b      	movs	r4, #11
 800d990:	193a      	adds	r2, r7, r4
 800d992:	210c      	movs	r1, #12
 800d994:	1879      	adds	r1, r7, r1
 800d996:	f005 fb5b 	bl	8013050 <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800d99a:	4b28      	ldr	r3, [pc, #160]	; (800da3c <SendFrameOnChannel+0x15c>)
 800d99c:	4a29      	ldr	r2, [pc, #164]	; (800da44 <SendFrameOnChannel+0x164>)
 800d99e:	2101      	movs	r1, #1
 800d9a0:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsConfirm.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800d9a2:	4a26      	ldr	r2, [pc, #152]	; (800da3c <SendFrameOnChannel+0x15c>)
 800d9a4:	238e      	movs	r3, #142	; 0x8e
 800d9a6:	00db      	lsls	r3, r3, #3
 800d9a8:	58d3      	ldr	r3, [r2, r3]
 800d9aa:	22d5      	movs	r2, #213	; 0xd5
 800d9ac:	569b      	ldrsb	r3, [r3, r2]
 800d9ae:	b2d9      	uxtb	r1, r3
 800d9b0:	4b22      	ldr	r3, [pc, #136]	; (800da3c <SendFrameOnChannel+0x15c>)
 800d9b2:	4a25      	ldr	r2, [pc, #148]	; (800da48 <SendFrameOnChannel+0x168>)
 800d9b4:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsConfirm.TxPower = txPower;
 800d9b6:	193b      	adds	r3, r7, r4
 800d9b8:	2100      	movs	r1, #0
 800d9ba:	5659      	ldrsb	r1, [r3, r1]
 800d9bc:	4b1f      	ldr	r3, [pc, #124]	; (800da3c <SendFrameOnChannel+0x15c>)
 800d9be:	4a23      	ldr	r2, [pc, #140]	; (800da4c <SendFrameOnChannel+0x16c>)
 800d9c0:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsConfirm.Channel = channel;
 800d9c2:	1dfb      	adds	r3, r7, #7
 800d9c4:	781a      	ldrb	r2, [r3, #0]
 800d9c6:	4b1d      	ldr	r3, [pc, #116]	; (800da3c <SendFrameOnChannel+0x15c>)
 800d9c8:	4921      	ldr	r1, [pc, #132]	; (800da50 <SendFrameOnChannel+0x170>)
 800d9ca:	505a      	str	r2, [r3, r1]

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800d9cc:	4b1b      	ldr	r3, [pc, #108]	; (800da3c <SendFrameOnChannel+0x15c>)
 800d9ce:	4a21      	ldr	r2, [pc, #132]	; (800da54 <SendFrameOnChannel+0x174>)
 800d9d0:	589a      	ldr	r2, [r3, r2]
 800d9d2:	4b1a      	ldr	r3, [pc, #104]	; (800da3c <SendFrameOnChannel+0x15c>)
 800d9d4:	4920      	ldr	r1, [pc, #128]	; (800da58 <SendFrameOnChannel+0x178>)
 800d9d6:	505a      	str	r2, [r3, r1]
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800d9d8:	4b18      	ldr	r3, [pc, #96]	; (800da3c <SendFrameOnChannel+0x15c>)
 800d9da:	4a1e      	ldr	r2, [pc, #120]	; (800da54 <SendFrameOnChannel+0x174>)
 800d9dc:	589a      	ldr	r2, [r3, r2]
 800d9de:	4b17      	ldr	r3, [pc, #92]	; (800da3c <SendFrameOnChannel+0x15c>)
 800d9e0:	491e      	ldr	r1, [pc, #120]	; (800da5c <SendFrameOnChannel+0x17c>)
 800d9e2:	505a      	str	r2, [r3, r1]

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 800d9e4:	f002 fab9 	bl	800ff5a <LoRaMacClassBIsBeaconModeActive>
 800d9e8:	1e03      	subs	r3, r0, #0
 800d9ea:	d00c      	beq.n	800da06 <SendFrameOnChannel+0x126>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 800d9ec:	4b13      	ldr	r3, [pc, #76]	; (800da3c <SendFrameOnChannel+0x15c>)
 800d9ee:	4a19      	ldr	r2, [pc, #100]	; (800da54 <SendFrameOnChannel+0x174>)
 800d9f0:	589b      	ldr	r3, [r3, r2]
 800d9f2:	0018      	movs	r0, r3
 800d9f4:	f002 fb15 	bl	8010022 <LoRaMacClassBIsUplinkCollision>
 800d9f8:	0003      	movs	r3, r0
 800d9fa:	61fb      	str	r3, [r7, #28]

        if( collisionTime > 0 )
 800d9fc:	69fb      	ldr	r3, [r7, #28]
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d001      	beq.n	800da06 <SendFrameOnChannel+0x126>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 800da02:	2310      	movs	r3, #16
 800da04:	e015      	b.n	800da32 <SendFrameOnChannel+0x152>
        }
    }

    LoRaMacClassBHaltBeaconing( );
 800da06:	f002 fab8 	bl	800ff7a <LoRaMacClassBHaltBeaconing>

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800da0a:	4a0c      	ldr	r2, [pc, #48]	; (800da3c <SendFrameOnChannel+0x15c>)
 800da0c:	23d5      	movs	r3, #213	; 0xd5
 800da0e:	009b      	lsls	r3, r3, #2
 800da10:	58d3      	ldr	r3, [r2, r3]
 800da12:	2202      	movs	r2, #2
 800da14:	431a      	orrs	r2, r3
 800da16:	0011      	movs	r1, r2
 800da18:	4a08      	ldr	r2, [pc, #32]	; (800da3c <SendFrameOnChannel+0x15c>)
 800da1a:	23d5      	movs	r3, #213	; 0xd5
 800da1c:	009b      	lsls	r3, r3, #2
 800da1e:	50d1      	str	r1, [r2, r3]

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 800da20:	4b0f      	ldr	r3, [pc, #60]	; (800da60 <SendFrameOnChannel+0x180>)
 800da22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da24:	4a05      	ldr	r2, [pc, #20]	; (800da3c <SendFrameOnChannel+0x15c>)
 800da26:	8912      	ldrh	r2, [r2, #8]
 800da28:	b2d1      	uxtb	r1, r2
 800da2a:	4a0e      	ldr	r2, [pc, #56]	; (800da64 <SendFrameOnChannel+0x184>)
 800da2c:	0010      	movs	r0, r2
 800da2e:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 800da30:	2300      	movs	r3, #0
}
 800da32:	0018      	movs	r0, r3
 800da34:	46bd      	mov	sp, r7
 800da36:	b009      	add	sp, #36	; 0x24
 800da38:	bd90      	pop	{r4, r7, pc}
 800da3a:	46c0      	nop			; (mov r8, r8)
 800da3c:	20000708 	.word	0x20000708
 800da40:	20000b14 	.word	0x20000b14
 800da44:	0000042d 	.word	0x0000042d
 800da48:	0000042e 	.word	0x0000042e
 800da4c:	0000042f 	.word	0x0000042f
 800da50:	0000043c 	.word	0x0000043c
 800da54:	0000040c 	.word	0x0000040c
 800da58:	00000434 	.word	0x00000434
 800da5c:	00000444 	.word	0x00000444
 800da60:	08021b54 	.word	0x08021b54
 800da64:	20000712 	.word	0x20000712

0800da68 <SetTxContinuousWave>:

LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout )
{
 800da68:	b580      	push	{r7, lr}
 800da6a:	b086      	sub	sp, #24
 800da6c:	af00      	add	r7, sp, #0
 800da6e:	0002      	movs	r2, r0
 800da70:	1dbb      	adds	r3, r7, #6
 800da72:	801a      	strh	r2, [r3, #0]
    ContinuousWaveParams_t continuousWave;

    continuousWave.Channel = MacCtx.NvmCtx->Channel;
 800da74:	4a24      	ldr	r2, [pc, #144]	; (800db08 <SetTxContinuousWave+0xa0>)
 800da76:	238e      	movs	r3, #142	; 0x8e
 800da78:	00db      	lsls	r3, r3, #3
 800da7a:	58d2      	ldr	r2, [r2, r3]
 800da7c:	2314      	movs	r3, #20
 800da7e:	33ff      	adds	r3, #255	; 0xff
 800da80:	5cd2      	ldrb	r2, [r2, r3]
 800da82:	2108      	movs	r1, #8
 800da84:	187b      	adds	r3, r7, r1
 800da86:	701a      	strb	r2, [r3, #0]
    continuousWave.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800da88:	4a1f      	ldr	r2, [pc, #124]	; (800db08 <SetTxContinuousWave+0xa0>)
 800da8a:	238e      	movs	r3, #142	; 0x8e
 800da8c:	00db      	lsls	r3, r3, #3
 800da8e:	58d3      	ldr	r3, [r2, r3]
 800da90:	22d5      	movs	r2, #213	; 0xd5
 800da92:	569a      	ldrsb	r2, [r3, r2]
 800da94:	187b      	adds	r3, r7, r1
 800da96:	705a      	strb	r2, [r3, #1]
    continuousWave.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 800da98:	4a1b      	ldr	r2, [pc, #108]	; (800db08 <SetTxContinuousWave+0xa0>)
 800da9a:	238e      	movs	r3, #142	; 0x8e
 800da9c:	00db      	lsls	r3, r3, #3
 800da9e:	58d3      	ldr	r3, [r2, r3]
 800daa0:	22d4      	movs	r2, #212	; 0xd4
 800daa2:	569a      	ldrsb	r2, [r3, r2]
 800daa4:	187b      	adds	r3, r7, r1
 800daa6:	709a      	strb	r2, [r3, #2]
    continuousWave.MaxEirp = MacCtx.NvmCtx->MacParams.MaxEirp;
 800daa8:	4a17      	ldr	r2, [pc, #92]	; (800db08 <SetTxContinuousWave+0xa0>)
 800daaa:	238e      	movs	r3, #142	; 0x8e
 800daac:	00db      	lsls	r3, r3, #3
 800daae:	58d2      	ldr	r2, [r2, r3]
 800dab0:	2382      	movs	r3, #130	; 0x82
 800dab2:	005b      	lsls	r3, r3, #1
 800dab4:	58d2      	ldr	r2, [r2, r3]
 800dab6:	187b      	adds	r3, r7, r1
 800dab8:	605a      	str	r2, [r3, #4]
    continuousWave.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 800daba:	4a13      	ldr	r2, [pc, #76]	; (800db08 <SetTxContinuousWave+0xa0>)
 800dabc:	238e      	movs	r3, #142	; 0x8e
 800dabe:	00db      	lsls	r3, r3, #3
 800dac0:	58d2      	ldr	r2, [r2, r3]
 800dac2:	2384      	movs	r3, #132	; 0x84
 800dac4:	005b      	lsls	r3, r3, #1
 800dac6:	58d2      	ldr	r2, [r2, r3]
 800dac8:	187b      	adds	r3, r7, r1
 800daca:	609a      	str	r2, [r3, #8]
    continuousWave.Timeout = timeout;
 800dacc:	187b      	adds	r3, r7, r1
 800dace:	1dba      	adds	r2, r7, #6
 800dad0:	8812      	ldrh	r2, [r2, #0]
 800dad2:	819a      	strh	r2, [r3, #12]

    RegionSetContinuousWave( MacCtx.NvmCtx->Region, &continuousWave );
 800dad4:	4a0c      	ldr	r2, [pc, #48]	; (800db08 <SetTxContinuousWave+0xa0>)
 800dad6:	238e      	movs	r3, #142	; 0x8e
 800dad8:	00db      	lsls	r3, r3, #3
 800dada:	58d3      	ldr	r3, [r2, r3]
 800dadc:	781b      	ldrb	r3, [r3, #0]
 800dade:	187a      	adds	r2, r7, r1
 800dae0:	0011      	movs	r1, r2
 800dae2:	0018      	movs	r0, r3
 800dae4:	f005 fbae 	bl	8013244 <RegionSetContinuousWave>

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800dae8:	4a07      	ldr	r2, [pc, #28]	; (800db08 <SetTxContinuousWave+0xa0>)
 800daea:	23d5      	movs	r3, #213	; 0xd5
 800daec:	009b      	lsls	r3, r3, #2
 800daee:	58d3      	ldr	r3, [r2, r3]
 800daf0:	2202      	movs	r2, #2
 800daf2:	431a      	orrs	r2, r3
 800daf4:	0011      	movs	r1, r2
 800daf6:	4a04      	ldr	r2, [pc, #16]	; (800db08 <SetTxContinuousWave+0xa0>)
 800daf8:	23d5      	movs	r3, #213	; 0xd5
 800dafa:	009b      	lsls	r3, r3, #2
 800dafc:	50d1      	str	r1, [r2, r3]

    return LORAMAC_STATUS_OK;
 800dafe:	2300      	movs	r3, #0
}
 800db00:	0018      	movs	r0, r3
 800db02:	46bd      	mov	sp, r7
 800db04:	b006      	add	sp, #24
 800db06:	bd80      	pop	{r7, pc}
 800db08:	20000708 	.word	0x20000708

0800db0c <SetTxContinuousWave1>:

LoRaMacStatus_t SetTxContinuousWave1( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 800db0c:	b580      	push	{r7, lr}
 800db0e:	b082      	sub	sp, #8
 800db10:	af00      	add	r7, sp, #0
 800db12:	6039      	str	r1, [r7, #0]
 800db14:	0011      	movs	r1, r2
 800db16:	1dbb      	adds	r3, r7, #6
 800db18:	1c02      	adds	r2, r0, #0
 800db1a:	801a      	strh	r2, [r3, #0]
 800db1c:	1d7b      	adds	r3, r7, #5
 800db1e:	1c0a      	adds	r2, r1, #0
 800db20:	701a      	strb	r2, [r3, #0]
    Radio.SetTxContinuousWave( frequency, power, timeout );
 800db22:	4b0c      	ldr	r3, [pc, #48]	; (800db54 <SetTxContinuousWave1+0x48>)
 800db24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800db26:	1d7a      	adds	r2, r7, #5
 800db28:	2100      	movs	r1, #0
 800db2a:	5651      	ldrsb	r1, [r2, r1]
 800db2c:	1dba      	adds	r2, r7, #6
 800db2e:	8812      	ldrh	r2, [r2, #0]
 800db30:	6838      	ldr	r0, [r7, #0]
 800db32:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800db34:	4a08      	ldr	r2, [pc, #32]	; (800db58 <SetTxContinuousWave1+0x4c>)
 800db36:	23d5      	movs	r3, #213	; 0xd5
 800db38:	009b      	lsls	r3, r3, #2
 800db3a:	58d3      	ldr	r3, [r2, r3]
 800db3c:	2202      	movs	r2, #2
 800db3e:	431a      	orrs	r2, r3
 800db40:	0011      	movs	r1, r2
 800db42:	4a05      	ldr	r2, [pc, #20]	; (800db58 <SetTxContinuousWave1+0x4c>)
 800db44:	23d5      	movs	r3, #213	; 0xd5
 800db46:	009b      	lsls	r3, r3, #2
 800db48:	50d1      	str	r1, [r2, r3]

    return LORAMAC_STATUS_OK;
 800db4a:	2300      	movs	r3, #0
}
 800db4c:	0018      	movs	r0, r3
 800db4e:	46bd      	mov	sp, r7
 800db50:	b002      	add	sp, #8
 800db52:	bd80      	pop	{r7, pc}
 800db54:	08021b54 	.word	0x08021b54
 800db58:	20000708 	.word	0x20000708

0800db5c <GetCtxs>:

LoRaMacCtxs_t* GetCtxs( void )
{
 800db5c:	b580      	push	{r7, lr}
 800db5e:	b082      	sub	sp, #8
 800db60:	af00      	add	r7, sp, #0
    Contexts.MacNvmCtx = &NvmMacCtx;
 800db62:	4b24      	ldr	r3, [pc, #144]	; (800dbf4 <GetCtxs+0x98>)
 800db64:	4a24      	ldr	r2, [pc, #144]	; (800dbf8 <GetCtxs+0x9c>)
 800db66:	601a      	str	r2, [r3, #0]
    Contexts.MacNvmCtxSize = sizeof( NvmMacCtx );
 800db68:	4b22      	ldr	r3, [pc, #136]	; (800dbf4 <GetCtxs+0x98>)
 800db6a:	228b      	movs	r2, #139	; 0x8b
 800db6c:	0092      	lsls	r2, r2, #2
 800db6e:	605a      	str	r2, [r3, #4]
    Contexts.CryptoNvmCtx = LoRaMacCryptoGetNvmCtx( &Contexts.CryptoNvmCtxSize );
 800db70:	4b22      	ldr	r3, [pc, #136]	; (800dbfc <GetCtxs+0xa0>)
 800db72:	0018      	movs	r0, r3
 800db74:	f003 feec 	bl	8011950 <LoRaMacCryptoGetNvmCtx>
 800db78:	0002      	movs	r2, r0
 800db7a:	4b1e      	ldr	r3, [pc, #120]	; (800dbf4 <GetCtxs+0x98>)
 800db7c:	611a      	str	r2, [r3, #16]
    GetNvmCtxParams_t params ={ 0 };
 800db7e:	2300      	movs	r3, #0
 800db80:	607b      	str	r3, [r7, #4]
    Contexts.RegionNvmCtx = RegionGetNvmCtx( MacCtx.NvmCtx->Region, &params );
 800db82:	4a1f      	ldr	r2, [pc, #124]	; (800dc00 <GetCtxs+0xa4>)
 800db84:	238e      	movs	r3, #142	; 0x8e
 800db86:	00db      	lsls	r3, r3, #3
 800db88:	58d3      	ldr	r3, [r2, r3]
 800db8a:	781b      	ldrb	r3, [r3, #0]
 800db8c:	1d3a      	adds	r2, r7, #4
 800db8e:	0011      	movs	r1, r2
 800db90:	0018      	movs	r0, r3
 800db92:	f005 f9c1 	bl	8012f18 <RegionGetNvmCtx>
 800db96:	0002      	movs	r2, r0
 800db98:	4b16      	ldr	r3, [pc, #88]	; (800dbf4 <GetCtxs+0x98>)
 800db9a:	609a      	str	r2, [r3, #8]
    Contexts.RegionNvmCtxSize = params.nvmCtxSize;
 800db9c:	687a      	ldr	r2, [r7, #4]
 800db9e:	4b15      	ldr	r3, [pc, #84]	; (800dbf4 <GetCtxs+0x98>)
 800dba0:	60da      	str	r2, [r3, #12]
    Contexts.SecureElementNvmCtx = SecureElementGetNvmCtx( &Contexts.SecureElementNvmCtxSize );
 800dba2:	4b18      	ldr	r3, [pc, #96]	; (800dc04 <GetCtxs+0xa8>)
 800dba4:	0018      	movs	r0, r3
 800dba6:	f7fc fabd 	bl	800a124 <SecureElementGetNvmCtx>
 800dbaa:	0002      	movs	r2, r0
 800dbac:	4b11      	ldr	r3, [pc, #68]	; (800dbf4 <GetCtxs+0x98>)
 800dbae:	619a      	str	r2, [r3, #24]
    Contexts.CommandsNvmCtx = LoRaMacCommandsGetNvmCtx( &Contexts.CommandsNvmCtxSize );
 800dbb0:	4b15      	ldr	r3, [pc, #84]	; (800dc08 <GetCtxs+0xac>)
 800dbb2:	0018      	movs	r0, r3
 800dbb4:	f002 fb9e 	bl	80102f4 <LoRaMacCommandsGetNvmCtx>
 800dbb8:	0002      	movs	r2, r0
 800dbba:	4b0e      	ldr	r3, [pc, #56]	; (800dbf4 <GetCtxs+0x98>)
 800dbbc:	621a      	str	r2, [r3, #32]
    Contexts.ClassBNvmCtx = LoRaMacClassBGetNvmCtx( &Contexts.ClassBNvmCtxSize );
 800dbbe:	4b13      	ldr	r3, [pc, #76]	; (800dc0c <GetCtxs+0xb0>)
 800dbc0:	0018      	movs	r0, r3
 800dbc2:	f002 f964 	bl	800fe8e <LoRaMacClassBGetNvmCtx>
 800dbc6:	0002      	movs	r2, r0
 800dbc8:	4b0a      	ldr	r3, [pc, #40]	; (800dbf4 <GetCtxs+0x98>)
 800dbca:	629a      	str	r2, [r3, #40]	; 0x28
    Contexts.ConfirmQueueNvmCtx = LoRaMacConfirmQueueGetNvmCtx( &Contexts.ConfirmQueueNvmCtxSize );
 800dbcc:	4b10      	ldr	r3, [pc, #64]	; (800dc10 <GetCtxs+0xb4>)
 800dbce:	0018      	movs	r0, r3
 800dbd0:	f002 fd9a 	bl	8010708 <LoRaMacConfirmQueueGetNvmCtx>
 800dbd4:	0002      	movs	r2, r0
 800dbd6:	4b07      	ldr	r3, [pc, #28]	; (800dbf4 <GetCtxs+0x98>)
 800dbd8:	631a      	str	r2, [r3, #48]	; 0x30
    Contexts.FCntHandlerNvmCtx = LoRaMacFCntHandlerGetNvmCtx( &Contexts.FCntHandlerNvmCtxSize );
 800dbda:	4b0e      	ldr	r3, [pc, #56]	; (800dc14 <GetCtxs+0xb8>)
 800dbdc:	0018      	movs	r0, r3
 800dbde:	f004 fc0b 	bl	80123f8 <LoRaMacFCntHandlerGetNvmCtx>
 800dbe2:	0002      	movs	r2, r0
 800dbe4:	4b03      	ldr	r3, [pc, #12]	; (800dbf4 <GetCtxs+0x98>)
 800dbe6:	639a      	str	r2, [r3, #56]	; 0x38
    return &Contexts;
 800dbe8:	4b02      	ldr	r3, [pc, #8]	; (800dbf4 <GetCtxs+0x98>)
}
 800dbea:	0018      	movs	r0, r3
 800dbec:	46bd      	mov	sp, r7
 800dbee:	b002      	add	sp, #8
 800dbf0:	bd80      	pop	{r7, pc}
 800dbf2:	46c0      	nop			; (mov r8, r8)
 800dbf4:	2000157c 	.word	0x2000157c
 800dbf8:	20000b7c 	.word	0x20000b7c
 800dbfc:	20001590 	.word	0x20001590
 800dc00:	20000708 	.word	0x20000708
 800dc04:	20001598 	.word	0x20001598
 800dc08:	200015a0 	.word	0x200015a0
 800dc0c:	200015a8 	.word	0x200015a8
 800dc10:	200015b0 	.word	0x200015b0
 800dc14:	200015b8 	.word	0x200015b8

0800dc18 <RestoreCtxs>:

LoRaMacStatus_t RestoreCtxs( LoRaMacCtxs_t* contexts )
{
 800dc18:	b580      	push	{r7, lr}
 800dc1a:	b084      	sub	sp, #16
 800dc1c:	af00      	add	r7, sp, #0
 800dc1e:	6078      	str	r0, [r7, #4]
    if( contexts == NULL )
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d101      	bne.n	800dc2a <RestoreCtxs+0x12>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800dc26:	2303      	movs	r3, #3
 800dc28:	e067      	b.n	800dcfa <RestoreCtxs+0xe2>
    }
    if( MacCtx.MacState != LORAMAC_STOPPED )
 800dc2a:	4a36      	ldr	r2, [pc, #216]	; (800dd04 <RestoreCtxs+0xec>)
 800dc2c:	23d5      	movs	r3, #213	; 0xd5
 800dc2e:	009b      	lsls	r3, r3, #2
 800dc30:	58d3      	ldr	r3, [r2, r3]
 800dc32:	2b01      	cmp	r3, #1
 800dc34:	d001      	beq.n	800dc3a <RestoreCtxs+0x22>
    {
        return LORAMAC_STATUS_BUSY;
 800dc36:	2301      	movs	r3, #1
 800dc38:	e05f      	b.n	800dcfa <RestoreCtxs+0xe2>
    }

    if( contexts->MacNvmCtx != NULL )
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d008      	beq.n	800dc54 <RestoreCtxs+0x3c>
    {
        memcpy1( ( uint8_t* ) &NvmMacCtx, ( uint8_t* ) contexts->MacNvmCtx, contexts->MacNvmCtxSize );
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	6819      	ldr	r1, [r3, #0]
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	685b      	ldr	r3, [r3, #4]
 800dc4a:	b29a      	uxth	r2, r3
 800dc4c:	4b2e      	ldr	r3, [pc, #184]	; (800dd08 <RestoreCtxs+0xf0>)
 800dc4e:	0018      	movs	r0, r3
 800dc50:	f007 fece 	bl	80159f0 <memcpy1>
    }

    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESTORE_CTX;
 800dc54:	2108      	movs	r1, #8
 800dc56:	187b      	adds	r3, r7, r1
 800dc58:	2202      	movs	r2, #2
 800dc5a:	711a      	strb	r2, [r3, #4]
    params.NvmCtx = contexts->RegionNvmCtx;
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	689a      	ldr	r2, [r3, #8]
 800dc60:	187b      	adds	r3, r7, r1
 800dc62:	601a      	str	r2, [r3, #0]
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 800dc64:	4a27      	ldr	r2, [pc, #156]	; (800dd04 <RestoreCtxs+0xec>)
 800dc66:	238e      	movs	r3, #142	; 0x8e
 800dc68:	00db      	lsls	r3, r3, #3
 800dc6a:	58d3      	ldr	r3, [r2, r3]
 800dc6c:	781b      	ldrb	r3, [r3, #0]
 800dc6e:	187a      	adds	r2, r7, r1
 800dc70:	0011      	movs	r1, r2
 800dc72:	0018      	movs	r0, r3
 800dc74:	f005 f93b 	bl	8012eee <RegionInitDefaults>

    if( SecureElementRestoreNvmCtx( contexts->SecureElementNvmCtx ) != SECURE_ELEMENT_SUCCESS )
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	699b      	ldr	r3, [r3, #24]
 800dc7c:	0018      	movs	r0, r3
 800dc7e:	f7fc fa39 	bl	800a0f4 <SecureElementRestoreNvmCtx>
 800dc82:	1e03      	subs	r3, r0, #0
 800dc84:	d001      	beq.n	800dc8a <RestoreCtxs+0x72>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800dc86:	2311      	movs	r3, #17
 800dc88:	e037      	b.n	800dcfa <RestoreCtxs+0xe2>
    }

    if( LoRaMacCryptoRestoreNvmCtx( contexts->CryptoNvmCtx ) != LORAMAC_CRYPTO_SUCCESS )
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	691b      	ldr	r3, [r3, #16]
 800dc8e:	0018      	movs	r0, r3
 800dc90:	f003 fe48 	bl	8011924 <LoRaMacCryptoRestoreNvmCtx>
 800dc94:	1e03      	subs	r3, r0, #0
 800dc96:	d001      	beq.n	800dc9c <RestoreCtxs+0x84>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800dc98:	2311      	movs	r3, #17
 800dc9a:	e02e      	b.n	800dcfa <RestoreCtxs+0xe2>
    }

    if( LoRaMacFCntHandlerRestoreNvmCtx( contexts->FCntHandlerNvmCtx ) != LORAMAC_FCNT_HANDLER_SUCCESS )
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dca0:	0018      	movs	r0, r3
 800dca2:	f004 fb93 	bl	80123cc <LoRaMacFCntHandlerRestoreNvmCtx>
 800dca6:	1e03      	subs	r3, r0, #0
 800dca8:	d001      	beq.n	800dcae <RestoreCtxs+0x96>
    {
        return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800dcaa:	2312      	movs	r3, #18
 800dcac:	e025      	b.n	800dcfa <RestoreCtxs+0xe2>
    }

    if( LoRaMacCommandsRestoreNvmCtx( contexts->CommandsNvmCtx ) != LORAMAC_COMMANDS_SUCCESS )
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	6a1b      	ldr	r3, [r3, #32]
 800dcb2:	0018      	movs	r0, r3
 800dcb4:	f002 fb08 	bl	80102c8 <LoRaMacCommandsRestoreNvmCtx>
 800dcb8:	1e03      	subs	r3, r0, #0
 800dcba:	d001      	beq.n	800dcc0 <RestoreCtxs+0xa8>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800dcbc:	2313      	movs	r3, #19
 800dcbe:	e01c      	b.n	800dcfa <RestoreCtxs+0xe2>
    }

    if( LoRaMacClassBRestoreNvmCtx( contexts->ClassBNvmCtx ) != true )
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dcc4:	0018      	movs	r0, r3
 800dcc6:	f002 f8d9 	bl	800fe7c <LoRaMacClassBRestoreNvmCtx>
 800dcca:	0003      	movs	r3, r0
 800dccc:	001a      	movs	r2, r3
 800dcce:	2301      	movs	r3, #1
 800dcd0:	4053      	eors	r3, r2
 800dcd2:	b2db      	uxtb	r3, r3
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d001      	beq.n	800dcdc <RestoreCtxs+0xc4>
    {
        return LORAMAC_STATUS_CLASS_B_ERROR;
 800dcd8:	2314      	movs	r3, #20
 800dcda:	e00e      	b.n	800dcfa <RestoreCtxs+0xe2>
    }

    if( LoRaMacConfirmQueueRestoreNvmCtx( contexts->ConfirmQueueNvmCtx ) != true )
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dce0:	0018      	movs	r0, r3
 800dce2:	f002 fcfb 	bl	80106dc <LoRaMacConfirmQueueRestoreNvmCtx>
 800dce6:	0003      	movs	r3, r0
 800dce8:	001a      	movs	r2, r3
 800dcea:	2301      	movs	r3, #1
 800dcec:	4053      	eors	r3, r2
 800dcee:	b2db      	uxtb	r3, r3
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d001      	beq.n	800dcf8 <RestoreCtxs+0xe0>
    {
        return LORAMAC_STATUS_CONFIRM_QUEUE_ERROR;
 800dcf4:	2315      	movs	r3, #21
 800dcf6:	e000      	b.n	800dcfa <RestoreCtxs+0xe2>
    }

    return LORAMAC_STATUS_OK;
 800dcf8:	2300      	movs	r3, #0
}
 800dcfa:	0018      	movs	r0, r3
 800dcfc:	46bd      	mov	sp, r7
 800dcfe:	b004      	add	sp, #16
 800dd00:	bd80      	pop	{r7, pc}
 800dd02:	46c0      	nop			; (mov r8, r8)
 800dd04:	20000708 	.word	0x20000708
 800dd08:	20000b7c 	.word	0x20000b7c

0800dd0c <DetermineFrameType>:

LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
 800dd0c:	b580      	push	{r7, lr}
 800dd0e:	b082      	sub	sp, #8
 800dd10:	af00      	add	r7, sp, #0
 800dd12:	6078      	str	r0, [r7, #4]
 800dd14:	6039      	str	r1, [r7, #0]
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d002      	beq.n	800dd22 <DetermineFrameType+0x16>
 800dd1c:	683b      	ldr	r3, [r7, #0]
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d101      	bne.n	800dd26 <DetermineFrameType+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800dd22:	2303      	movs	r3, #3
 800dd24:	e03b      	b.n	800dd9e <DetermineFrameType+0x92>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	7b1b      	ldrb	r3, [r3, #12]
 800dd2a:	220f      	movs	r2, #15
 800dd2c:	4013      	ands	r3, r2
 800dd2e:	b2db      	uxtb	r3, r3
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d008      	beq.n	800dd46 <DetermineFrameType+0x3a>
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	2220      	movs	r2, #32
 800dd38:	5c9b      	ldrb	r3, [r3, r2]
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d003      	beq.n	800dd46 <DetermineFrameType+0x3a>
    {
        *fType = FRAME_TYPE_A;
 800dd3e:	683b      	ldr	r3, [r7, #0]
 800dd40:	2200      	movs	r2, #0
 800dd42:	701a      	strb	r2, [r3, #0]
 800dd44:	e02a      	b.n	800dd9c <DetermineFrameType+0x90>
    }
    else if( macMsg->FRMPayloadSize == 0 )
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	2228      	movs	r2, #40	; 0x28
 800dd4a:	5c9b      	ldrb	r3, [r3, r2]
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d103      	bne.n	800dd58 <DetermineFrameType+0x4c>
    {
        *fType = FRAME_TYPE_B;
 800dd50:	683b      	ldr	r3, [r7, #0]
 800dd52:	2201      	movs	r2, #1
 800dd54:	701a      	strb	r2, [r3, #0]
 800dd56:	e021      	b.n	800dd9c <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	7b1b      	ldrb	r3, [r3, #12]
 800dd5c:	220f      	movs	r2, #15
 800dd5e:	4013      	ands	r3, r2
 800dd60:	b2db      	uxtb	r3, r3
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d108      	bne.n	800dd78 <DetermineFrameType+0x6c>
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	2220      	movs	r2, #32
 800dd6a:	5c9b      	ldrb	r3, [r3, r2]
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d103      	bne.n	800dd78 <DetermineFrameType+0x6c>
    {
        *fType = FRAME_TYPE_C;
 800dd70:	683b      	ldr	r3, [r7, #0]
 800dd72:	2202      	movs	r2, #2
 800dd74:	701a      	strb	r2, [r3, #0]
 800dd76:	e011      	b.n	800dd9c <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	7b1b      	ldrb	r3, [r3, #12]
 800dd7c:	220f      	movs	r2, #15
 800dd7e:	4013      	ands	r3, r2
 800dd80:	b2db      	uxtb	r3, r3
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d108      	bne.n	800dd98 <DetermineFrameType+0x8c>
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	2220      	movs	r2, #32
 800dd8a:	5c9b      	ldrb	r3, [r3, r2]
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d003      	beq.n	800dd98 <DetermineFrameType+0x8c>
    {
        *fType = FRAME_TYPE_D;
 800dd90:	683b      	ldr	r3, [r7, #0]
 800dd92:	2203      	movs	r2, #3
 800dd94:	701a      	strb	r2, [r3, #0]
 800dd96:	e001      	b.n	800dd9c <DetermineFrameType+0x90>
    }
    else
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
 800dd98:	2316      	movs	r3, #22
 800dd9a:	e000      	b.n	800dd9e <DetermineFrameType+0x92>
    }

    return LORAMAC_STATUS_OK;
 800dd9c:	2300      	movs	r3, #0
}
 800dd9e:	0018      	movs	r0, r3
 800dda0:	46bd      	mov	sp, r7
 800dda2:	b002      	add	sp, #8
 800dda4:	bd80      	pop	{r7, pc}
	...

0800dda8 <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
 800dda8:	b580      	push	{r7, lr}
 800ddaa:	af00      	add	r7, sp, #0
    // Unconfirmed uplink, when all retransmissions are done.
    if( MacCtx.NvmCtx->ChannelsNbTransCounter >=
 800ddac:	4a16      	ldr	r2, [pc, #88]	; (800de08 <CheckRetransUnconfirmedUplink+0x60>)
 800ddae:	238e      	movs	r3, #142	; 0x8e
 800ddb0:	00db      	lsls	r3, r3, #3
 800ddb2:	58d2      	ldr	r2, [r2, r3]
 800ddb4:	2388      	movs	r3, #136	; 0x88
 800ddb6:	005b      	lsls	r3, r3, #1
 800ddb8:	5cd2      	ldrb	r2, [r2, r3]
        MacCtx.NvmCtx->MacParams.ChannelsNbTrans )
 800ddba:	4913      	ldr	r1, [pc, #76]	; (800de08 <CheckRetransUnconfirmedUplink+0x60>)
 800ddbc:	238e      	movs	r3, #142	; 0x8e
 800ddbe:	00db      	lsls	r3, r3, #3
 800ddc0:	58cb      	ldr	r3, [r1, r3]
 800ddc2:	21f4      	movs	r1, #244	; 0xf4
 800ddc4:	5c5b      	ldrb	r3, [r3, r1]
    if( MacCtx.NvmCtx->ChannelsNbTransCounter >=
 800ddc6:	429a      	cmp	r2, r3
 800ddc8:	d301      	bcc.n	800ddce <CheckRetransUnconfirmedUplink+0x26>
    {
        return true;
 800ddca:	2301      	movs	r3, #1
 800ddcc:	e019      	b.n	800de02 <CheckRetransUnconfirmedUplink+0x5a>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800ddce:	4b0e      	ldr	r3, [pc, #56]	; (800de08 <CheckRetransUnconfirmedUplink+0x60>)
 800ddd0:	4a0e      	ldr	r2, [pc, #56]	; (800de0c <CheckRetransUnconfirmedUplink+0x64>)
 800ddd2:	5c9b      	ldrb	r3, [r3, r2]
 800ddd4:	2202      	movs	r2, #2
 800ddd6:	4013      	ands	r3, r2
 800ddd8:	b2db      	uxtb	r3, r3
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d010      	beq.n	800de00 <CheckRetransUnconfirmedUplink+0x58>
    {
        // For Class A stop in each case
        if( MacCtx.NvmCtx->DeviceClass == CLASS_A )
 800ddde:	4a0a      	ldr	r2, [pc, #40]	; (800de08 <CheckRetransUnconfirmedUplink+0x60>)
 800dde0:	238e      	movs	r3, #142	; 0x8e
 800dde2:	00db      	lsls	r3, r3, #3
 800dde4:	58d3      	ldr	r3, [r2, r3]
 800dde6:	22c8      	movs	r2, #200	; 0xc8
 800dde8:	5c9b      	ldrb	r3, [r3, r2]
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d101      	bne.n	800ddf2 <CheckRetransUnconfirmedUplink+0x4a>
        {
            return true;
 800ddee:	2301      	movs	r3, #1
 800ddf0:	e007      	b.n	800de02 <CheckRetransUnconfirmedUplink+0x5a>
        }
        else
        {// For Class B & C stop only if the frame was received in RX1 window
            if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800ddf2:	4b05      	ldr	r3, [pc, #20]	; (800de08 <CheckRetransUnconfirmedUplink+0x60>)
 800ddf4:	4a06      	ldr	r2, [pc, #24]	; (800de10 <CheckRetransUnconfirmedUplink+0x68>)
 800ddf6:	5c9b      	ldrb	r3, [r3, r2]
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d101      	bne.n	800de00 <CheckRetransUnconfirmedUplink+0x58>
            {
                return true;
 800ddfc:	2301      	movs	r3, #1
 800ddfe:	e000      	b.n	800de02 <CheckRetransUnconfirmedUplink+0x5a>
            }
        }
    }
    return false;
 800de00:	2300      	movs	r3, #0
}
 800de02:	0018      	movs	r0, r3
 800de04:	46bd      	mov	sp, r7
 800de06:	bd80      	pop	{r7, pc}
 800de08:	20000708 	.word	0x20000708
 800de0c:	0000046d 	.word	0x0000046d
 800de10:	0000046c 	.word	0x0000046c

0800de14 <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 800de14:	b580      	push	{r7, lr}
 800de16:	af00      	add	r7, sp, #0
    // Confirmed uplink, when all retransmissions ( tries to get a ack ) are done.
    if( MacCtx.NvmCtx->AckTimeoutRetriesCounter >=
 800de18:	4a11      	ldr	r2, [pc, #68]	; (800de60 <CheckRetransConfirmedUplink+0x4c>)
 800de1a:	238e      	movs	r3, #142	; 0x8e
 800de1c:	00db      	lsls	r3, r3, #3
 800de1e:	58d3      	ldr	r3, [r2, r3]
 800de20:	4a10      	ldr	r2, [pc, #64]	; (800de64 <CheckRetransConfirmedUplink+0x50>)
 800de22:	5c9a      	ldrb	r2, [r3, r2]
        MacCtx.NvmCtx->AckTimeoutRetries )
 800de24:	490e      	ldr	r1, [pc, #56]	; (800de60 <CheckRetransConfirmedUplink+0x4c>)
 800de26:	238e      	movs	r3, #142	; 0x8e
 800de28:	00db      	lsls	r3, r3, #3
 800de2a:	58cb      	ldr	r3, [r1, r3]
 800de2c:	490e      	ldr	r1, [pc, #56]	; (800de68 <CheckRetransConfirmedUplink+0x54>)
 800de2e:	5c5b      	ldrb	r3, [r3, r1]
    if( MacCtx.NvmCtx->AckTimeoutRetriesCounter >=
 800de30:	429a      	cmp	r2, r3
 800de32:	d301      	bcc.n	800de38 <CheckRetransConfirmedUplink+0x24>
    {
        return true;
 800de34:	2301      	movs	r3, #1
 800de36:	e010      	b.n	800de5a <CheckRetransConfirmedUplink+0x46>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800de38:	4b09      	ldr	r3, [pc, #36]	; (800de60 <CheckRetransConfirmedUplink+0x4c>)
 800de3a:	4a0c      	ldr	r2, [pc, #48]	; (800de6c <CheckRetransConfirmedUplink+0x58>)
 800de3c:	5c9b      	ldrb	r3, [r3, r2]
 800de3e:	2202      	movs	r2, #2
 800de40:	4013      	ands	r3, r2
 800de42:	b2db      	uxtb	r3, r3
 800de44:	2b00      	cmp	r3, #0
 800de46:	d007      	beq.n	800de58 <CheckRetransConfirmedUplink+0x44>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 800de48:	4a05      	ldr	r2, [pc, #20]	; (800de60 <CheckRetransConfirmedUplink+0x4c>)
 800de4a:	2386      	movs	r3, #134	; 0x86
 800de4c:	00db      	lsls	r3, r3, #3
 800de4e:	5cd3      	ldrb	r3, [r2, r3]
 800de50:	2b00      	cmp	r3, #0
 800de52:	d001      	beq.n	800de58 <CheckRetransConfirmedUplink+0x44>
        {
            return true;
 800de54:	2301      	movs	r3, #1
 800de56:	e000      	b.n	800de5a <CheckRetransConfirmedUplink+0x46>
        }
    }
    return false;
 800de58:	2300      	movs	r3, #0
}
 800de5a:	0018      	movs	r0, r3
 800de5c:	46bd      	mov	sp, r7
 800de5e:	bd80      	pop	{r7, pc}
 800de60:	20000708 	.word	0x20000708
 800de64:	00000217 	.word	0x00000217
 800de68:	00000216 	.word	0x00000216
 800de6c:	0000046d 	.word	0x0000046d

0800de70 <StopRetransmission>:


static bool StopRetransmission( void )
{
 800de70:	b580      	push	{r7, lr}
 800de72:	b082      	sub	sp, #8
 800de74:	af00      	add	r7, sp, #0
    // Increase the current value by 1
    uint32_t fCntUp = 0;
 800de76:	2300      	movs	r3, #0
 800de78:	607b      	str	r3, [r7, #4]
    if( LORAMAC_FCNT_HANDLER_SUCCESS != LoRaMacGetFCntUp( &fCntUp ) )
 800de7a:	1d3b      	adds	r3, r7, #4
 800de7c:	0018      	movs	r0, r3
 800de7e:	f004 fbb3 	bl	80125e8 <LoRaMacGetFCntUp>
 800de82:	1e03      	subs	r3, r0, #0
 800de84:	d001      	beq.n	800de8a <StopRetransmission+0x1a>
    {
        return false;
 800de86:	2300      	movs	r3, #0
 800de88:	e043      	b.n	800df12 <StopRetransmission+0xa2>
    }
    if( LORAMAC_FCNT_HANDLER_SUCCESS != LoRaMacSetFCntUp( ( fCntUp ) ) )
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	0018      	movs	r0, r3
 800de8e:	f004 fbc1 	bl	8012614 <LoRaMacSetFCntUp>
 800de92:	1e03      	subs	r3, r0, #0
 800de94:	d001      	beq.n	800de9a <StopRetransmission+0x2a>
    {
        return false;
 800de96:	2300      	movs	r3, #0
 800de98:	e03b      	b.n	800df12 <StopRetransmission+0xa2>
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 0 )
 800de9a:	4b20      	ldr	r3, [pc, #128]	; (800df1c <StopRetransmission+0xac>)
 800de9c:	4a20      	ldr	r2, [pc, #128]	; (800df20 <StopRetransmission+0xb0>)
 800de9e:	5c9b      	ldrb	r3, [r3, r2]
 800dea0:	2202      	movs	r2, #2
 800dea2:	4013      	ands	r3, r2
 800dea4:	b2db      	uxtb	r3, r3
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d110      	bne.n	800decc <StopRetransmission+0x5c>
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( MacCtx.NvmCtx->AdrCtrlOn == true )
 800deaa:	4a1c      	ldr	r2, [pc, #112]	; (800df1c <StopRetransmission+0xac>)
 800deac:	238e      	movs	r3, #142	; 0x8e
 800deae:	00db      	lsls	r3, r3, #3
 800deb0:	58d3      	ldr	r3, [r2, r3]
 800deb2:	22ca      	movs	r2, #202	; 0xca
 800deb4:	5c9b      	ldrb	r3, [r3, r2]
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d008      	beq.n	800decc <StopRetransmission+0x5c>
        {
            MacCtx.NvmCtx->AdrAckCounter++;
 800deba:	4a18      	ldr	r2, [pc, #96]	; (800df1c <StopRetransmission+0xac>)
 800debc:	238e      	movs	r3, #142	; 0x8e
 800debe:	00db      	lsls	r3, r3, #3
 800dec0:	58d3      	ldr	r3, [r2, r3]
 800dec2:	22cc      	movs	r2, #204	; 0xcc
 800dec4:	589a      	ldr	r2, [r3, r2]
 800dec6:	3201      	adds	r2, #1
 800dec8:	21cc      	movs	r1, #204	; 0xcc
 800deca:	505a      	str	r2, [r3, r1]
        }
    }

    MacCtx.NvmCtx->ChannelsNbTransCounter = 0;
 800decc:	4a13      	ldr	r2, [pc, #76]	; (800df1c <StopRetransmission+0xac>)
 800dece:	238e      	movs	r3, #142	; 0x8e
 800ded0:	00db      	lsls	r3, r3, #3
 800ded2:	58d2      	ldr	r2, [r2, r3]
 800ded4:	2388      	movs	r3, #136	; 0x88
 800ded6:	005b      	lsls	r3, r3, #1
 800ded8:	2100      	movs	r1, #0
 800deda:	54d1      	strb	r1, [r2, r3]
    MacCtx.NvmCtx->NodeAckRequested = false;
 800dedc:	4a0f      	ldr	r2, [pc, #60]	; (800df1c <StopRetransmission+0xac>)
 800dede:	238e      	movs	r3, #142	; 0x8e
 800dee0:	00db      	lsls	r3, r3, #3
 800dee2:	58d3      	ldr	r3, [r2, r3]
 800dee4:	4a0f      	ldr	r2, [pc, #60]	; (800df24 <StopRetransmission+0xb4>)
 800dee6:	2100      	movs	r1, #0
 800dee8:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->AckTimeoutRetry = false;
 800deea:	4a0c      	ldr	r2, [pc, #48]	; (800df1c <StopRetransmission+0xac>)
 800deec:	238e      	movs	r3, #142	; 0x8e
 800deee:	00db      	lsls	r3, r3, #3
 800def0:	58d2      	ldr	r2, [r2, r3]
 800def2:	2386      	movs	r3, #134	; 0x86
 800def4:	009b      	lsls	r3, r3, #2
 800def6:	2100      	movs	r1, #0
 800def8:	54d1      	strb	r1, [r2, r3]
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800defa:	4a08      	ldr	r2, [pc, #32]	; (800df1c <StopRetransmission+0xac>)
 800defc:	23d5      	movs	r3, #213	; 0xd5
 800defe:	009b      	lsls	r3, r3, #2
 800df00:	58d3      	ldr	r3, [r2, r3]
 800df02:	2202      	movs	r2, #2
 800df04:	4393      	bics	r3, r2
 800df06:	0019      	movs	r1, r3
 800df08:	4a04      	ldr	r2, [pc, #16]	; (800df1c <StopRetransmission+0xac>)
 800df0a:	23d5      	movs	r3, #213	; 0xd5
 800df0c:	009b      	lsls	r3, r3, #2
 800df0e:	50d1      	str	r1, [r2, r3]

    return true;
 800df10:	2301      	movs	r3, #1
}
 800df12:	0018      	movs	r0, r3
 800df14:	46bd      	mov	sp, r7
 800df16:	b002      	add	sp, #8
 800df18:	bd80      	pop	{r7, pc}
 800df1a:	46c0      	nop			; (mov r8, r8)
 800df1c:	20000708 	.word	0x20000708
 800df20:	0000046d 	.word	0x0000046d
 800df24:	00000219 	.word	0x00000219

0800df28 <AckTimeoutRetriesProcess>:

static void AckTimeoutRetriesProcess( void )
{
 800df28:	b580      	push	{r7, lr}
 800df2a:	b082      	sub	sp, #8
 800df2c:	af00      	add	r7, sp, #0
    if( ( MacCtx.NvmCtx->AckTimeoutRetriesCounter < MacCtx.NvmCtx->AckTimeoutRetries ) && ( MacCtx.NvmCtx->AckTimeoutRetriesCounter <= MAX_ACK_RETRIES ) )
 800df2e:	4a2d      	ldr	r2, [pc, #180]	; (800dfe4 <AckTimeoutRetriesProcess+0xbc>)
 800df30:	238e      	movs	r3, #142	; 0x8e
 800df32:	00db      	lsls	r3, r3, #3
 800df34:	58d3      	ldr	r3, [r2, r3]
 800df36:	4a2c      	ldr	r2, [pc, #176]	; (800dfe8 <AckTimeoutRetriesProcess+0xc0>)
 800df38:	5c9a      	ldrb	r2, [r3, r2]
 800df3a:	492a      	ldr	r1, [pc, #168]	; (800dfe4 <AckTimeoutRetriesProcess+0xbc>)
 800df3c:	238e      	movs	r3, #142	; 0x8e
 800df3e:	00db      	lsls	r3, r3, #3
 800df40:	58cb      	ldr	r3, [r1, r3]
 800df42:	492a      	ldr	r1, [pc, #168]	; (800dfec <AckTimeoutRetriesProcess+0xc4>)
 800df44:	5c5b      	ldrb	r3, [r3, r1]
 800df46:	429a      	cmp	r2, r3
 800df48:	d247      	bcs.n	800dfda <AckTimeoutRetriesProcess+0xb2>
 800df4a:	4a26      	ldr	r2, [pc, #152]	; (800dfe4 <AckTimeoutRetriesProcess+0xbc>)
 800df4c:	238e      	movs	r3, #142	; 0x8e
 800df4e:	00db      	lsls	r3, r3, #3
 800df50:	58d3      	ldr	r3, [r2, r3]
 800df52:	4a25      	ldr	r2, [pc, #148]	; (800dfe8 <AckTimeoutRetriesProcess+0xc0>)
 800df54:	5c9b      	ldrb	r3, [r3, r2]
 800df56:	2b08      	cmp	r3, #8
 800df58:	d83f      	bhi.n	800dfda <AckTimeoutRetriesProcess+0xb2>
    {
        MacCtx.NvmCtx->AckTimeoutRetriesCounter++;
 800df5a:	4a22      	ldr	r2, [pc, #136]	; (800dfe4 <AckTimeoutRetriesProcess+0xbc>)
 800df5c:	238e      	movs	r3, #142	; 0x8e
 800df5e:	00db      	lsls	r3, r3, #3
 800df60:	58d3      	ldr	r3, [r2, r3]
 800df62:	4a21      	ldr	r2, [pc, #132]	; (800dfe8 <AckTimeoutRetriesProcess+0xc0>)
 800df64:	5c9a      	ldrb	r2, [r3, r2]
 800df66:	3201      	adds	r2, #1
 800df68:	b2d1      	uxtb	r1, r2
 800df6a:	4a1f      	ldr	r2, [pc, #124]	; (800dfe8 <AckTimeoutRetriesProcess+0xc0>)
 800df6c:	5499      	strb	r1, [r3, r2]
        if( ( MacCtx.NvmCtx->AckTimeoutRetriesCounter % 2 ) == 1 )
 800df6e:	4a1d      	ldr	r2, [pc, #116]	; (800dfe4 <AckTimeoutRetriesProcess+0xbc>)
 800df70:	238e      	movs	r3, #142	; 0x8e
 800df72:	00db      	lsls	r3, r3, #3
 800df74:	58d3      	ldr	r3, [r2, r3]
 800df76:	4a1c      	ldr	r2, [pc, #112]	; (800dfe8 <AckTimeoutRetriesProcess+0xc0>)
 800df78:	5c9b      	ldrb	r3, [r3, r2]
 800df7a:	2201      	movs	r2, #1
 800df7c:	4013      	ands	r3, r2
 800df7e:	b2db      	uxtb	r3, r3
 800df80:	2b00      	cmp	r3, #0
 800df82:	d02a      	beq.n	800dfda <AckTimeoutRetriesProcess+0xb2>
        {
            GetPhyParams_t getPhy;
            PhyParam_t phyParam;

            getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 800df84:	1d3b      	adds	r3, r7, #4
 800df86:	2221      	movs	r2, #33	; 0x21
 800df88:	701a      	strb	r2, [r3, #0]
            getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800df8a:	4a16      	ldr	r2, [pc, #88]	; (800dfe4 <AckTimeoutRetriesProcess+0xbc>)
 800df8c:	238e      	movs	r3, #142	; 0x8e
 800df8e:	00db      	lsls	r3, r3, #3
 800df90:	58d2      	ldr	r2, [r2, r3]
 800df92:	2380      	movs	r3, #128	; 0x80
 800df94:	005b      	lsls	r3, r3, #1
 800df96:	5cd2      	ldrb	r2, [r2, r3]
 800df98:	1d3b      	adds	r3, r7, #4
 800df9a:	709a      	strb	r2, [r3, #2]
            getPhy.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800df9c:	4a11      	ldr	r2, [pc, #68]	; (800dfe4 <AckTimeoutRetriesProcess+0xbc>)
 800df9e:	238e      	movs	r3, #142	; 0x8e
 800dfa0:	00db      	lsls	r3, r3, #3
 800dfa2:	58d3      	ldr	r3, [r2, r3]
 800dfa4:	22d5      	movs	r2, #213	; 0xd5
 800dfa6:	569a      	ldrsb	r2, [r3, r2]
 800dfa8:	1d3b      	adds	r3, r7, #4
 800dfaa:	705a      	strb	r2, [r3, #1]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800dfac:	4a0d      	ldr	r2, [pc, #52]	; (800dfe4 <AckTimeoutRetriesProcess+0xbc>)
 800dfae:	238e      	movs	r3, #142	; 0x8e
 800dfb0:	00db      	lsls	r3, r3, #3
 800dfb2:	58d3      	ldr	r3, [r2, r3]
 800dfb4:	781b      	ldrb	r3, [r3, #0]
 800dfb6:	1d3a      	adds	r2, r7, #4
 800dfb8:	0011      	movs	r1, r2
 800dfba:	0018      	movs	r0, r3
 800dfbc:	f004 ff5b 	bl	8012e76 <RegionGetPhyParam>
 800dfc0:	0003      	movs	r3, r0
 800dfc2:	001a      	movs	r2, r3
 800dfc4:	003b      	movs	r3, r7
 800dfc6:	601a      	str	r2, [r3, #0]
            MacCtx.NvmCtx->MacParams.ChannelsDatarate = phyParam.Value;
 800dfc8:	003b      	movs	r3, r7
 800dfca:	6819      	ldr	r1, [r3, #0]
 800dfcc:	4a05      	ldr	r2, [pc, #20]	; (800dfe4 <AckTimeoutRetriesProcess+0xbc>)
 800dfce:	238e      	movs	r3, #142	; 0x8e
 800dfd0:	00db      	lsls	r3, r3, #3
 800dfd2:	58d3      	ldr	r3, [r2, r3]
 800dfd4:	b249      	sxtb	r1, r1
 800dfd6:	22d5      	movs	r2, #213	; 0xd5
 800dfd8:	5499      	strb	r1, [r3, r2]
        }
    }
}
 800dfda:	46c0      	nop			; (mov r8, r8)
 800dfdc:	46bd      	mov	sp, r7
 800dfde:	b002      	add	sp, #8
 800dfe0:	bd80      	pop	{r7, pc}
 800dfe2:	46c0      	nop			; (mov r8, r8)
 800dfe4:	20000708 	.word	0x20000708
 800dfe8:	00000217 	.word	0x00000217
 800dfec:	00000216 	.word	0x00000216

0800dff0 <AckTimeoutRetriesFinalize>:

static void AckTimeoutRetriesFinalize( void )
{
 800dff0:	b580      	push	{r7, lr}
 800dff2:	b082      	sub	sp, #8
 800dff4:	af00      	add	r7, sp, #0
    if( MacCtx.McpsConfirm.AckReceived == false )
 800dff6:	4a19      	ldr	r2, [pc, #100]	; (800e05c <AckTimeoutRetriesFinalize+0x6c>)
 800dff8:	2386      	movs	r3, #134	; 0x86
 800dffa:	00db      	lsls	r3, r3, #3
 800dffc:	5cd3      	ldrb	r3, [r2, r3]
 800dffe:	2201      	movs	r2, #1
 800e000:	4053      	eors	r3, r2
 800e002:	b2db      	uxtb	r3, r3
 800e004:	2b00      	cmp	r3, #0
 800e006:	d01c      	beq.n	800e042 <AckTimeoutRetriesFinalize+0x52>
    {
        InitDefaultsParams_t params;
        params.Type = INIT_TYPE_RESTORE_DEFAULT_CHANNELS;
 800e008:	003b      	movs	r3, r7
 800e00a:	2201      	movs	r2, #1
 800e00c:	711a      	strb	r2, [r3, #4]
        params.NvmCtx = Contexts.RegionNvmCtx;
 800e00e:	4b14      	ldr	r3, [pc, #80]	; (800e060 <AckTimeoutRetriesFinalize+0x70>)
 800e010:	689a      	ldr	r2, [r3, #8]
 800e012:	003b      	movs	r3, r7
 800e014:	601a      	str	r2, [r3, #0]
        RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 800e016:	4a11      	ldr	r2, [pc, #68]	; (800e05c <AckTimeoutRetriesFinalize+0x6c>)
 800e018:	238e      	movs	r3, #142	; 0x8e
 800e01a:	00db      	lsls	r3, r3, #3
 800e01c:	58d3      	ldr	r3, [r2, r3]
 800e01e:	781b      	ldrb	r3, [r3, #0]
 800e020:	003a      	movs	r2, r7
 800e022:	0011      	movs	r1, r2
 800e024:	0018      	movs	r0, r3
 800e026:	f004 ff62 	bl	8012eee <RegionInitDefaults>

        MacCtx.NvmCtx->NodeAckRequested = false;
 800e02a:	4a0c      	ldr	r2, [pc, #48]	; (800e05c <AckTimeoutRetriesFinalize+0x6c>)
 800e02c:	238e      	movs	r3, #142	; 0x8e
 800e02e:	00db      	lsls	r3, r3, #3
 800e030:	58d3      	ldr	r3, [r2, r3]
 800e032:	4a0c      	ldr	r2, [pc, #48]	; (800e064 <AckTimeoutRetriesFinalize+0x74>)
 800e034:	2100      	movs	r1, #0
 800e036:	5499      	strb	r1, [r3, r2]
        MacCtx.McpsConfirm.AckReceived = false;
 800e038:	4a08      	ldr	r2, [pc, #32]	; (800e05c <AckTimeoutRetriesFinalize+0x6c>)
 800e03a:	2386      	movs	r3, #134	; 0x86
 800e03c:	00db      	lsls	r3, r3, #3
 800e03e:	2100      	movs	r1, #0
 800e040:	54d1      	strb	r1, [r2, r3]
    }
    MacCtx.McpsConfirm.NbRetries = MacCtx.NvmCtx->AckTimeoutRetriesCounter;
 800e042:	4a06      	ldr	r2, [pc, #24]	; (800e05c <AckTimeoutRetriesFinalize+0x6c>)
 800e044:	238e      	movs	r3, #142	; 0x8e
 800e046:	00db      	lsls	r3, r3, #3
 800e048:	58d3      	ldr	r3, [r2, r3]
 800e04a:	4a07      	ldr	r2, [pc, #28]	; (800e068 <AckTimeoutRetriesFinalize+0x78>)
 800e04c:	5c99      	ldrb	r1, [r3, r2]
 800e04e:	4b03      	ldr	r3, [pc, #12]	; (800e05c <AckTimeoutRetriesFinalize+0x6c>)
 800e050:	4a06      	ldr	r2, [pc, #24]	; (800e06c <AckTimeoutRetriesFinalize+0x7c>)
 800e052:	5499      	strb	r1, [r3, r2]
}
 800e054:	46c0      	nop			; (mov r8, r8)
 800e056:	46bd      	mov	sp, r7
 800e058:	b002      	add	sp, #8
 800e05a:	bd80      	pop	{r7, pc}
 800e05c:	20000708 	.word	0x20000708
 800e060:	2000157c 	.word	0x2000157c
 800e064:	00000219 	.word	0x00000219
 800e068:	00000217 	.word	0x00000217
 800e06c:	00000431 	.word	0x00000431

0800e070 <CallNvmCtxCallback>:

static void CallNvmCtxCallback( LoRaMacNvmCtxModule_t module )
{
 800e070:	b580      	push	{r7, lr}
 800e072:	b082      	sub	sp, #8
 800e074:	af00      	add	r7, sp, #0
 800e076:	0002      	movs	r2, r0
 800e078:	1dfb      	adds	r3, r7, #7
 800e07a:	701a      	strb	r2, [r3, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->NvmContextChange != NULL ) )
 800e07c:	4a0c      	ldr	r2, [pc, #48]	; (800e0b0 <CallNvmCtxCallback+0x40>)
 800e07e:	23d7      	movs	r3, #215	; 0xd7
 800e080:	009b      	lsls	r3, r3, #2
 800e082:	58d3      	ldr	r3, [r2, r3]
 800e084:	2b00      	cmp	r3, #0
 800e086:	d00f      	beq.n	800e0a8 <CallNvmCtxCallback+0x38>
 800e088:	4a09      	ldr	r2, [pc, #36]	; (800e0b0 <CallNvmCtxCallback+0x40>)
 800e08a:	23d7      	movs	r3, #215	; 0xd7
 800e08c:	009b      	lsls	r3, r3, #2
 800e08e:	58d3      	ldr	r3, [r2, r3]
 800e090:	689b      	ldr	r3, [r3, #8]
 800e092:	2b00      	cmp	r3, #0
 800e094:	d008      	beq.n	800e0a8 <CallNvmCtxCallback+0x38>
    {
        MacCtx.MacCallbacks->NvmContextChange( module );
 800e096:	4a06      	ldr	r2, [pc, #24]	; (800e0b0 <CallNvmCtxCallback+0x40>)
 800e098:	23d7      	movs	r3, #215	; 0xd7
 800e09a:	009b      	lsls	r3, r3, #2
 800e09c:	58d3      	ldr	r3, [r2, r3]
 800e09e:	689b      	ldr	r3, [r3, #8]
 800e0a0:	1dfa      	adds	r2, r7, #7
 800e0a2:	7812      	ldrb	r2, [r2, #0]
 800e0a4:	0010      	movs	r0, r2
 800e0a6:	4798      	blx	r3
    }
}
 800e0a8:	46c0      	nop			; (mov r8, r8)
 800e0aa:	46bd      	mov	sp, r7
 800e0ac:	b002      	add	sp, #8
 800e0ae:	bd80      	pop	{r7, pc}
 800e0b0:	20000708 	.word	0x20000708

0800e0b4 <EventMacNvmCtxChanged>:

static void EventMacNvmCtxChanged( void )
{
 800e0b4:	b580      	push	{r7, lr}
 800e0b6:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_MAC );
 800e0b8:	2000      	movs	r0, #0
 800e0ba:	f7ff ffd9 	bl	800e070 <CallNvmCtxCallback>
}
 800e0be:	46c0      	nop			; (mov r8, r8)
 800e0c0:	46bd      	mov	sp, r7
 800e0c2:	bd80      	pop	{r7, pc}

0800e0c4 <EventRegionNvmCtxChanged>:

static void EventRegionNvmCtxChanged( void )
{
 800e0c4:	b580      	push	{r7, lr}
 800e0c6:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_REGION );
 800e0c8:	2001      	movs	r0, #1
 800e0ca:	f7ff ffd1 	bl	800e070 <CallNvmCtxCallback>
}
 800e0ce:	46c0      	nop			; (mov r8, r8)
 800e0d0:	46bd      	mov	sp, r7
 800e0d2:	bd80      	pop	{r7, pc}

0800e0d4 <EventCryptoNvmCtxChanged>:

static void EventCryptoNvmCtxChanged( void )
{
 800e0d4:	b580      	push	{r7, lr}
 800e0d6:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_CRYPTO );
 800e0d8:	2002      	movs	r0, #2
 800e0da:	f7ff ffc9 	bl	800e070 <CallNvmCtxCallback>
}
 800e0de:	46c0      	nop			; (mov r8, r8)
 800e0e0:	46bd      	mov	sp, r7
 800e0e2:	bd80      	pop	{r7, pc}

0800e0e4 <EventSecureElementNvmCtxChanged>:

static void EventSecureElementNvmCtxChanged( void )
{
 800e0e4:	b580      	push	{r7, lr}
 800e0e6:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_SECURE_ELEMENT );
 800e0e8:	2003      	movs	r0, #3
 800e0ea:	f7ff ffc1 	bl	800e070 <CallNvmCtxCallback>
}
 800e0ee:	46c0      	nop			; (mov r8, r8)
 800e0f0:	46bd      	mov	sp, r7
 800e0f2:	bd80      	pop	{r7, pc}

0800e0f4 <EventCommandsNvmCtxChanged>:

static void EventCommandsNvmCtxChanged( void )
{
 800e0f4:	b580      	push	{r7, lr}
 800e0f6:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_COMMANDS );
 800e0f8:	2004      	movs	r0, #4
 800e0fa:	f7ff ffb9 	bl	800e070 <CallNvmCtxCallback>
}
 800e0fe:	46c0      	nop			; (mov r8, r8)
 800e100:	46bd      	mov	sp, r7
 800e102:	bd80      	pop	{r7, pc}

0800e104 <EventClassBNvmCtxChanged>:

static void EventClassBNvmCtxChanged( void )
{
 800e104:	b580      	push	{r7, lr}
 800e106:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_CLASS_B );
 800e108:	2005      	movs	r0, #5
 800e10a:	f7ff ffb1 	bl	800e070 <CallNvmCtxCallback>
}
 800e10e:	46c0      	nop			; (mov r8, r8)
 800e110:	46bd      	mov	sp, r7
 800e112:	bd80      	pop	{r7, pc}

0800e114 <EventConfirmQueueNvmCtxChanged>:

static void EventConfirmQueueNvmCtxChanged( void )
{
 800e114:	b580      	push	{r7, lr}
 800e116:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_CONFIRM_QUEUE );
 800e118:	2006      	movs	r0, #6
 800e11a:	f7ff ffa9 	bl	800e070 <CallNvmCtxCallback>
}
 800e11e:	46c0      	nop			; (mov r8, r8)
 800e120:	46bd      	mov	sp, r7
 800e122:	bd80      	pop	{r7, pc}

0800e124 <EventFCntHandlerNvmCtxChanged>:

static void EventFCntHandlerNvmCtxChanged( void )
{
 800e124:	b580      	push	{r7, lr}
 800e126:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_FCNT_HANDLER );
 800e128:	2007      	movs	r0, #7
 800e12a:	f7ff ffa1 	bl	800e070 <CallNvmCtxCallback>
}
 800e12e:	46c0      	nop			; (mov r8, r8)
 800e130:	46bd      	mov	sp, r7
 800e132:	bd80      	pop	{r7, pc}

0800e134 <IsRequestPending>:

static uint8_t IsRequestPending( void )
{
 800e134:	b580      	push	{r7, lr}
 800e136:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 800e138:	4b0a      	ldr	r3, [pc, #40]	; (800e164 <IsRequestPending+0x30>)
 800e13a:	4a0b      	ldr	r2, [pc, #44]	; (800e168 <IsRequestPending+0x34>)
 800e13c:	5c9b      	ldrb	r3, [r3, r2]
 800e13e:	2204      	movs	r2, #4
 800e140:	4013      	ands	r3, r2
 800e142:	b2db      	uxtb	r3, r3
 800e144:	2b00      	cmp	r3, #0
 800e146:	d107      	bne.n	800e158 <IsRequestPending+0x24>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
 800e148:	4b06      	ldr	r3, [pc, #24]	; (800e164 <IsRequestPending+0x30>)
 800e14a:	4a07      	ldr	r2, [pc, #28]	; (800e168 <IsRequestPending+0x34>)
 800e14c:	5c9b      	ldrb	r3, [r3, r2]
 800e14e:	2201      	movs	r2, #1
 800e150:	4013      	ands	r3, r2
 800e152:	b2db      	uxtb	r3, r3
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 800e154:	2b00      	cmp	r3, #0
 800e156:	d001      	beq.n	800e15c <IsRequestPending+0x28>
    {
        return 1;
 800e158:	2301      	movs	r3, #1
 800e15a:	e000      	b.n	800e15e <IsRequestPending+0x2a>
    }
    return 0;
 800e15c:	2300      	movs	r3, #0
}
 800e15e:	0018      	movs	r0, r3
 800e160:	46bd      	mov	sp, r7
 800e162:	bd80      	pop	{r7, pc}
 800e164:	20000708 	.word	0x20000708
 800e168:	0000046d 	.word	0x0000046d

0800e16c <LoRaMacInitialization>:


LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 800e16c:	b5b0      	push	{r4, r5, r7, lr}
 800e16e:	b094      	sub	sp, #80	; 0x50
 800e170:	af00      	add	r7, sp, #0
 800e172:	60f8      	str	r0, [r7, #12]
 800e174:	60b9      	str	r1, [r7, #8]
 800e176:	1dfb      	adds	r3, r7, #7
 800e178:	701a      	strb	r2, [r3, #0]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    if( ( primitives == NULL ) ||
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d002      	beq.n	800e186 <LoRaMacInitialization+0x1a>
 800e180:	68bb      	ldr	r3, [r7, #8]
 800e182:	2b00      	cmp	r3, #0
 800e184:	d101      	bne.n	800e18a <LoRaMacInitialization+0x1e>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800e186:	2303      	movs	r3, #3
 800e188:	e391      	b.n	800e8ae <LoRaMacInitialization+0x742>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	2b00      	cmp	r3, #0
 800e190:	d00b      	beq.n	800e1aa <LoRaMacInitialization+0x3e>
        ( primitives->MacMcpsIndication == NULL ) ||
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	685b      	ldr	r3, [r3, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 800e196:	2b00      	cmp	r3, #0
 800e198:	d007      	beq.n	800e1aa <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeConfirm == NULL ) ||
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	689b      	ldr	r3, [r3, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d003      	beq.n	800e1aa <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeIndication == NULL ) )
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	68db      	ldr	r3, [r3, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d101      	bne.n	800e1ae <LoRaMacInitialization+0x42>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800e1aa:	2303      	movs	r3, #3
 800e1ac:	e37f      	b.n	800e8ae <LoRaMacInitialization+0x742>
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 800e1ae:	1dfb      	adds	r3, r7, #7
 800e1b0:	781b      	ldrb	r3, [r3, #0]
 800e1b2:	0018      	movs	r0, r3
 800e1b4:	f004 fe4e 	bl	8012e54 <RegionIsActive>
 800e1b8:	0003      	movs	r3, r0
 800e1ba:	001a      	movs	r2, r3
 800e1bc:	2301      	movs	r3, #1
 800e1be:	4053      	eors	r3, r2
 800e1c0:	b2db      	uxtb	r3, r3
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d001      	beq.n	800e1ca <LoRaMacInitialization+0x5e>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 800e1c6:	2309      	movs	r3, #9
 800e1c8:	e371      	b.n	800e8ae <LoRaMacInitialization+0x742>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives, EventConfirmQueueNvmCtxChanged );
 800e1ca:	4afe      	ldr	r2, [pc, #1016]	; (800e5c4 <LoRaMacInitialization+0x458>)
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	0011      	movs	r1, r2
 800e1d0:	0018      	movs	r0, r3
 800e1d2:	f002 fa53 	bl	801067c <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &NvmMacCtx, 0x00, sizeof( LoRaMacNvmCtx_t ) );
 800e1d6:	238b      	movs	r3, #139	; 0x8b
 800e1d8:	009a      	lsls	r2, r3, #2
 800e1da:	4bfb      	ldr	r3, [pc, #1004]	; (800e5c8 <LoRaMacInitialization+0x45c>)
 800e1dc:	2100      	movs	r1, #0
 800e1de:	0018      	movs	r0, r3
 800e1e0:	f007 fc42 	bl	8015a68 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 800e1e4:	4af9      	ldr	r2, [pc, #996]	; (800e5cc <LoRaMacInitialization+0x460>)
 800e1e6:	4bfa      	ldr	r3, [pc, #1000]	; (800e5d0 <LoRaMacInitialization+0x464>)
 800e1e8:	2100      	movs	r1, #0
 800e1ea:	0018      	movs	r0, r3
 800e1ec:	f007 fc3c 	bl	8015a68 <memset1>
    MacCtx.NvmCtx = &NvmMacCtx;
 800e1f0:	4af7      	ldr	r2, [pc, #988]	; (800e5d0 <LoRaMacInitialization+0x464>)
 800e1f2:	238e      	movs	r3, #142	; 0x8e
 800e1f4:	00db      	lsls	r3, r3, #3
 800e1f6:	49f4      	ldr	r1, [pc, #976]	; (800e5c8 <LoRaMacInitialization+0x45c>)
 800e1f8:	50d1      	str	r1, [r2, r3]

    // Set non zero variables to its default value
    MacCtx.NvmCtx->AckTimeoutRetriesCounter = 1;
 800e1fa:	4af5      	ldr	r2, [pc, #980]	; (800e5d0 <LoRaMacInitialization+0x464>)
 800e1fc:	238e      	movs	r3, #142	; 0x8e
 800e1fe:	00db      	lsls	r3, r3, #3
 800e200:	58d3      	ldr	r3, [r2, r3]
 800e202:	4af4      	ldr	r2, [pc, #976]	; (800e5d4 <LoRaMacInitialization+0x468>)
 800e204:	2101      	movs	r1, #1
 800e206:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->AckTimeoutRetries = 1;
 800e208:	4af1      	ldr	r2, [pc, #964]	; (800e5d0 <LoRaMacInitialization+0x464>)
 800e20a:	238e      	movs	r3, #142	; 0x8e
 800e20c:	00db      	lsls	r3, r3, #3
 800e20e:	58d3      	ldr	r3, [r2, r3]
 800e210:	4af1      	ldr	r2, [pc, #964]	; (800e5d8 <LoRaMacInitialization+0x46c>)
 800e212:	2101      	movs	r1, #1
 800e214:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->Region = region;
 800e216:	4aee      	ldr	r2, [pc, #952]	; (800e5d0 <LoRaMacInitialization+0x464>)
 800e218:	238e      	movs	r3, #142	; 0x8e
 800e21a:	00db      	lsls	r3, r3, #3
 800e21c:	58d3      	ldr	r3, [r2, r3]
 800e21e:	1dfa      	adds	r2, r7, #7
 800e220:	7812      	ldrb	r2, [r2, #0]
 800e222:	701a      	strb	r2, [r3, #0]
    MacCtx.NvmCtx->DeviceClass = CLASS_A;
 800e224:	4aea      	ldr	r2, [pc, #936]	; (800e5d0 <LoRaMacInitialization+0x464>)
 800e226:	238e      	movs	r3, #142	; 0x8e
 800e228:	00db      	lsls	r3, r3, #3
 800e22a:	58d3      	ldr	r3, [r2, r3]
 800e22c:	22c8      	movs	r2, #200	; 0xc8
 800e22e:	2100      	movs	r1, #0
 800e230:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->RepeaterSupport = false;
 800e232:	4ae7      	ldr	r2, [pc, #924]	; (800e5d0 <LoRaMacInitialization+0x464>)
 800e234:	238e      	movs	r3, #142	; 0x8e
 800e236:	00db      	lsls	r3, r3, #3
 800e238:	58d2      	ldr	r2, [r2, r3]
 800e23a:	2316      	movs	r3, #22
 800e23c:	33ff      	adds	r3, #255	; 0xff
 800e23e:	2100      	movs	r1, #0
 800e240:	54d1      	strb	r1, [r2, r3]

    Version_t lrWanVersion;
    lrWanVersion.Fields.Major    = 1;
 800e242:	211c      	movs	r1, #28
 800e244:	187b      	adds	r3, r7, r1
 800e246:	2201      	movs	r2, #1
 800e248:	70da      	strb	r2, [r3, #3]
    lrWanVersion.Fields.Minor    = 0;
 800e24a:	187b      	adds	r3, r7, r1
 800e24c:	2200      	movs	r2, #0
 800e24e:	709a      	strb	r2, [r3, #2]
    lrWanVersion.Fields.Revision = 3;
 800e250:	187b      	adds	r3, r7, r1
 800e252:	2203      	movs	r2, #3
 800e254:	705a      	strb	r2, [r3, #1]
    lrWanVersion.Fields.Rfu      = 0;
 800e256:	187b      	adds	r3, r7, r1
 800e258:	2200      	movs	r2, #0
 800e25a:	701a      	strb	r2, [r3, #0]
    MacCtx.NvmCtx->Version = lrWanVersion;
 800e25c:	4adc      	ldr	r2, [pc, #880]	; (800e5d0 <LoRaMacInitialization+0x464>)
 800e25e:	238e      	movs	r3, #142	; 0x8e
 800e260:	00db      	lsls	r3, r3, #3
 800e262:	58d2      	ldr	r2, [r2, r3]
 800e264:	2388      	movs	r3, #136	; 0x88
 800e266:	009b      	lsls	r3, r3, #2
 800e268:	69f9      	ldr	r1, [r7, #28]
 800e26a:	50d1      	str	r1, [r2, r3]

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800e26c:	244c      	movs	r4, #76	; 0x4c
 800e26e:	193b      	adds	r3, r7, r4
 800e270:	220e      	movs	r2, #14
 800e272:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800e274:	4ad6      	ldr	r2, [pc, #856]	; (800e5d0 <LoRaMacInitialization+0x464>)
 800e276:	238e      	movs	r3, #142	; 0x8e
 800e278:	00db      	lsls	r3, r3, #3
 800e27a:	58d3      	ldr	r3, [r2, r3]
 800e27c:	781b      	ldrb	r3, [r3, #0]
 800e27e:	193a      	adds	r2, r7, r4
 800e280:	0011      	movs	r1, r2
 800e282:	0018      	movs	r0, r3
 800e284:	f004 fdf7 	bl	8012e76 <RegionGetPhyParam>
 800e288:	0003      	movs	r3, r0
 800e28a:	001a      	movs	r2, r3
 800e28c:	2548      	movs	r5, #72	; 0x48
 800e28e:	197b      	adds	r3, r7, r5
 800e290:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->DutyCycleOn = ( bool ) phyParam.Value;
 800e292:	197b      	adds	r3, r7, r5
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	49ce      	ldr	r1, [pc, #824]	; (800e5d0 <LoRaMacInitialization+0x464>)
 800e298:	228e      	movs	r2, #142	; 0x8e
 800e29a:	00d2      	lsls	r2, r2, #3
 800e29c:	588a      	ldr	r2, [r1, r2]
 800e29e:	1e59      	subs	r1, r3, #1
 800e2a0:	418b      	sbcs	r3, r1
 800e2a2:	b2d9      	uxtb	r1, r3
 800e2a4:	2389      	movs	r3, #137	; 0x89
 800e2a6:	005b      	lsls	r3, r3, #1
 800e2a8:	54d1      	strb	r1, [r2, r3]

    getPhy.Attribute = PHY_DEF_TX_POWER;
 800e2aa:	193b      	adds	r3, r7, r4
 800e2ac:	2209      	movs	r2, #9
 800e2ae:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800e2b0:	4ac7      	ldr	r2, [pc, #796]	; (800e5d0 <LoRaMacInitialization+0x464>)
 800e2b2:	238e      	movs	r3, #142	; 0x8e
 800e2b4:	00db      	lsls	r3, r3, #3
 800e2b6:	58d3      	ldr	r3, [r2, r3]
 800e2b8:	781b      	ldrb	r3, [r3, #0]
 800e2ba:	193a      	adds	r2, r7, r4
 800e2bc:	0011      	movs	r1, r2
 800e2be:	0018      	movs	r0, r3
 800e2c0:	f004 fdd9 	bl	8012e76 <RegionGetPhyParam>
 800e2c4:	0003      	movs	r3, r0
 800e2c6:	001a      	movs	r2, r3
 800e2c8:	197b      	adds	r3, r7, r5
 800e2ca:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower = phyParam.Value;
 800e2cc:	197b      	adds	r3, r7, r5
 800e2ce:	6819      	ldr	r1, [r3, #0]
 800e2d0:	4abf      	ldr	r2, [pc, #764]	; (800e5d0 <LoRaMacInitialization+0x464>)
 800e2d2:	238e      	movs	r3, #142	; 0x8e
 800e2d4:	00db      	lsls	r3, r3, #3
 800e2d6:	58d3      	ldr	r3, [r2, r3]
 800e2d8:	b24a      	sxtb	r2, r1
 800e2da:	711a      	strb	r2, [r3, #4]

    getPhy.Attribute = PHY_DEF_TX_DR;
 800e2dc:	193b      	adds	r3, r7, r4
 800e2de:	2205      	movs	r2, #5
 800e2e0:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800e2e2:	4abb      	ldr	r2, [pc, #748]	; (800e5d0 <LoRaMacInitialization+0x464>)
 800e2e4:	238e      	movs	r3, #142	; 0x8e
 800e2e6:	00db      	lsls	r3, r3, #3
 800e2e8:	58d3      	ldr	r3, [r2, r3]
 800e2ea:	781b      	ldrb	r3, [r3, #0]
 800e2ec:	193a      	adds	r2, r7, r4
 800e2ee:	0011      	movs	r1, r2
 800e2f0:	0018      	movs	r0, r3
 800e2f2:	f004 fdc0 	bl	8012e76 <RegionGetPhyParam>
 800e2f6:	0003      	movs	r3, r0
 800e2f8:	001a      	movs	r2, r3
 800e2fa:	197b      	adds	r3, r7, r5
 800e2fc:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate = phyParam.Value;
 800e2fe:	197b      	adds	r3, r7, r5
 800e300:	6819      	ldr	r1, [r3, #0]
 800e302:	4ab3      	ldr	r2, [pc, #716]	; (800e5d0 <LoRaMacInitialization+0x464>)
 800e304:	238e      	movs	r3, #142	; 0x8e
 800e306:	00db      	lsls	r3, r3, #3
 800e308:	58d3      	ldr	r3, [r2, r3]
 800e30a:	b24a      	sxtb	r2, r1
 800e30c:	715a      	strb	r2, [r3, #5]

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 800e30e:	193b      	adds	r3, r7, r4
 800e310:	220f      	movs	r2, #15
 800e312:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800e314:	4aae      	ldr	r2, [pc, #696]	; (800e5d0 <LoRaMacInitialization+0x464>)
 800e316:	238e      	movs	r3, #142	; 0x8e
 800e318:	00db      	lsls	r3, r3, #3
 800e31a:	58d3      	ldr	r3, [r2, r3]
 800e31c:	781b      	ldrb	r3, [r3, #0]
 800e31e:	193a      	adds	r2, r7, r4
 800e320:	0011      	movs	r1, r2
 800e322:	0018      	movs	r0, r3
 800e324:	f004 fda7 	bl	8012e76 <RegionGetPhyParam>
 800e328:	0003      	movs	r3, r0
 800e32a:	001a      	movs	r2, r3
 800e32c:	197b      	adds	r3, r7, r5
 800e32e:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.MaxRxWindow = phyParam.Value;
 800e330:	4aa7      	ldr	r2, [pc, #668]	; (800e5d0 <LoRaMacInitialization+0x464>)
 800e332:	238e      	movs	r3, #142	; 0x8e
 800e334:	00db      	lsls	r3, r3, #3
 800e336:	58d3      	ldr	r3, [r2, r3]
 800e338:	197a      	adds	r2, r7, r5
 800e33a:	6812      	ldr	r2, [r2, #0]
 800e33c:	611a      	str	r2, [r3, #16]

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 800e33e:	193b      	adds	r3, r7, r4
 800e340:	2210      	movs	r2, #16
 800e342:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800e344:	4aa2      	ldr	r2, [pc, #648]	; (800e5d0 <LoRaMacInitialization+0x464>)
 800e346:	238e      	movs	r3, #142	; 0x8e
 800e348:	00db      	lsls	r3, r3, #3
 800e34a:	58d3      	ldr	r3, [r2, r3]
 800e34c:	781b      	ldrb	r3, [r3, #0]
 800e34e:	193a      	adds	r2, r7, r4
 800e350:	0011      	movs	r1, r2
 800e352:	0018      	movs	r0, r3
 800e354:	f004 fd8f 	bl	8012e76 <RegionGetPhyParam>
 800e358:	0003      	movs	r3, r0
 800e35a:	001a      	movs	r2, r3
 800e35c:	197b      	adds	r3, r7, r5
 800e35e:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 800e360:	4a9b      	ldr	r2, [pc, #620]	; (800e5d0 <LoRaMacInitialization+0x464>)
 800e362:	238e      	movs	r3, #142	; 0x8e
 800e364:	00db      	lsls	r3, r3, #3
 800e366:	58d3      	ldr	r3, [r2, r3]
 800e368:	197a      	adds	r2, r7, r5
 800e36a:	6812      	ldr	r2, [r2, #0]
 800e36c:	615a      	str	r2, [r3, #20]

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 800e36e:	193b      	adds	r3, r7, r4
 800e370:	2211      	movs	r2, #17
 800e372:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800e374:	4a96      	ldr	r2, [pc, #600]	; (800e5d0 <LoRaMacInitialization+0x464>)
 800e376:	238e      	movs	r3, #142	; 0x8e
 800e378:	00db      	lsls	r3, r3, #3
 800e37a:	58d3      	ldr	r3, [r2, r3]
 800e37c:	781b      	ldrb	r3, [r3, #0]
 800e37e:	193a      	adds	r2, r7, r4
 800e380:	0011      	movs	r1, r2
 800e382:	0018      	movs	r0, r3
 800e384:	f004 fd77 	bl	8012e76 <RegionGetPhyParam>
 800e388:	0003      	movs	r3, r0
 800e38a:	001a      	movs	r2, r3
 800e38c:	197b      	adds	r3, r7, r5
 800e38e:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 800e390:	4a8f      	ldr	r2, [pc, #572]	; (800e5d0 <LoRaMacInitialization+0x464>)
 800e392:	238e      	movs	r3, #142	; 0x8e
 800e394:	00db      	lsls	r3, r3, #3
 800e396:	58d3      	ldr	r3, [r2, r3]
 800e398:	197a      	adds	r2, r7, r5
 800e39a:	6812      	ldr	r2, [r2, #0]
 800e39c:	619a      	str	r2, [r3, #24]

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 800e39e:	193b      	adds	r3, r7, r4
 800e3a0:	2212      	movs	r2, #18
 800e3a2:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800e3a4:	4a8a      	ldr	r2, [pc, #552]	; (800e5d0 <LoRaMacInitialization+0x464>)
 800e3a6:	238e      	movs	r3, #142	; 0x8e
 800e3a8:	00db      	lsls	r3, r3, #3
 800e3aa:	58d3      	ldr	r3, [r2, r3]
 800e3ac:	781b      	ldrb	r3, [r3, #0]
 800e3ae:	193a      	adds	r2, r7, r4
 800e3b0:	0011      	movs	r1, r2
 800e3b2:	0018      	movs	r0, r3
 800e3b4:	f004 fd5f 	bl	8012e76 <RegionGetPhyParam>
 800e3b8:	0003      	movs	r3, r0
 800e3ba:	001a      	movs	r2, r3
 800e3bc:	197b      	adds	r3, r7, r5
 800e3be:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 800e3c0:	4a83      	ldr	r2, [pc, #524]	; (800e5d0 <LoRaMacInitialization+0x464>)
 800e3c2:	238e      	movs	r3, #142	; 0x8e
 800e3c4:	00db      	lsls	r3, r3, #3
 800e3c6:	58d3      	ldr	r3, [r2, r3]
 800e3c8:	197a      	adds	r2, r7, r5
 800e3ca:	6812      	ldr	r2, [r2, #0]
 800e3cc:	61da      	str	r2, [r3, #28]

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 800e3ce:	193b      	adds	r3, r7, r4
 800e3d0:	2213      	movs	r2, #19
 800e3d2:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800e3d4:	4a7e      	ldr	r2, [pc, #504]	; (800e5d0 <LoRaMacInitialization+0x464>)
 800e3d6:	238e      	movs	r3, #142	; 0x8e
 800e3d8:	00db      	lsls	r3, r3, #3
 800e3da:	58d3      	ldr	r3, [r2, r3]
 800e3dc:	781b      	ldrb	r3, [r3, #0]
 800e3de:	193a      	adds	r2, r7, r4
 800e3e0:	0011      	movs	r1, r2
 800e3e2:	0018      	movs	r0, r3
 800e3e4:	f004 fd47 	bl	8012e76 <RegionGetPhyParam>
 800e3e8:	0003      	movs	r3, r0
 800e3ea:	001a      	movs	r2, r3
 800e3ec:	197b      	adds	r3, r7, r5
 800e3ee:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 800e3f0:	4a77      	ldr	r2, [pc, #476]	; (800e5d0 <LoRaMacInitialization+0x464>)
 800e3f2:	238e      	movs	r3, #142	; 0x8e
 800e3f4:	00db      	lsls	r3, r3, #3
 800e3f6:	58d3      	ldr	r3, [r2, r3]
 800e3f8:	197a      	adds	r2, r7, r5
 800e3fa:	6812      	ldr	r2, [r2, #0]
 800e3fc:	621a      	str	r2, [r3, #32]

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 800e3fe:	193b      	adds	r3, r7, r4
 800e400:	2216      	movs	r2, #22
 800e402:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800e404:	4a72      	ldr	r2, [pc, #456]	; (800e5d0 <LoRaMacInitialization+0x464>)
 800e406:	238e      	movs	r3, #142	; 0x8e
 800e408:	00db      	lsls	r3, r3, #3
 800e40a:	58d3      	ldr	r3, [r2, r3]
 800e40c:	781b      	ldrb	r3, [r3, #0]
 800e40e:	193a      	adds	r2, r7, r4
 800e410:	0011      	movs	r1, r2
 800e412:	0018      	movs	r0, r3
 800e414:	f004 fd2f 	bl	8012e76 <RegionGetPhyParam>
 800e418:	0003      	movs	r3, r0
 800e41a:	001a      	movs	r2, r3
 800e41c:	197b      	adds	r3, r7, r5
 800e41e:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 800e420:	197b      	adds	r3, r7, r5
 800e422:	6819      	ldr	r1, [r3, #0]
 800e424:	4a6a      	ldr	r2, [pc, #424]	; (800e5d0 <LoRaMacInitialization+0x464>)
 800e426:	238e      	movs	r3, #142	; 0x8e
 800e428:	00db      	lsls	r3, r3, #3
 800e42a:	58d3      	ldr	r3, [r2, r3]
 800e42c:	b2c9      	uxtb	r1, r1
 800e42e:	2225      	movs	r2, #37	; 0x25
 800e430:	5499      	strb	r1, [r3, r2]

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 800e432:	193b      	adds	r3, r7, r4
 800e434:	2217      	movs	r2, #23
 800e436:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800e438:	4a65      	ldr	r2, [pc, #404]	; (800e5d0 <LoRaMacInitialization+0x464>)
 800e43a:	238e      	movs	r3, #142	; 0x8e
 800e43c:	00db      	lsls	r3, r3, #3
 800e43e:	58d3      	ldr	r3, [r2, r3]
 800e440:	781b      	ldrb	r3, [r3, #0]
 800e442:	193a      	adds	r2, r7, r4
 800e444:	0011      	movs	r1, r2
 800e446:	0018      	movs	r0, r3
 800e448:	f004 fd15 	bl	8012e76 <RegionGetPhyParam>
 800e44c:	0003      	movs	r3, r0
 800e44e:	001a      	movs	r2, r3
 800e450:	197b      	adds	r3, r7, r5
 800e452:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 800e454:	4a5e      	ldr	r2, [pc, #376]	; (800e5d0 <LoRaMacInitialization+0x464>)
 800e456:	238e      	movs	r3, #142	; 0x8e
 800e458:	00db      	lsls	r3, r3, #3
 800e45a:	58d3      	ldr	r3, [r2, r3]
 800e45c:	197a      	adds	r2, r7, r5
 800e45e:	6812      	ldr	r2, [r2, #0]
 800e460:	629a      	str	r2, [r3, #40]	; 0x28

    getPhy.Attribute = PHY_DEF_RX2_DR;
 800e462:	193b      	adds	r3, r7, r4
 800e464:	2218      	movs	r2, #24
 800e466:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800e468:	4a59      	ldr	r2, [pc, #356]	; (800e5d0 <LoRaMacInitialization+0x464>)
 800e46a:	238e      	movs	r3, #142	; 0x8e
 800e46c:	00db      	lsls	r3, r3, #3
 800e46e:	58d3      	ldr	r3, [r2, r3]
 800e470:	781b      	ldrb	r3, [r3, #0]
 800e472:	193a      	adds	r2, r7, r4
 800e474:	0011      	movs	r1, r2
 800e476:	0018      	movs	r0, r3
 800e478:	f004 fcfd 	bl	8012e76 <RegionGetPhyParam>
 800e47c:	0003      	movs	r3, r0
 800e47e:	001a      	movs	r2, r3
 800e480:	197b      	adds	r3, r7, r5
 800e482:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 800e484:	197b      	adds	r3, r7, r5
 800e486:	6819      	ldr	r1, [r3, #0]
 800e488:	4a51      	ldr	r2, [pc, #324]	; (800e5d0 <LoRaMacInitialization+0x464>)
 800e48a:	238e      	movs	r3, #142	; 0x8e
 800e48c:	00db      	lsls	r3, r3, #3
 800e48e:	58d3      	ldr	r3, [r2, r3]
 800e490:	b2c9      	uxtb	r1, r1
 800e492:	222c      	movs	r2, #44	; 0x2c
 800e494:	5499      	strb	r1, [r3, r2]

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 800e496:	193b      	adds	r3, r7, r4
 800e498:	221d      	movs	r2, #29
 800e49a:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800e49c:	4a4c      	ldr	r2, [pc, #304]	; (800e5d0 <LoRaMacInitialization+0x464>)
 800e49e:	238e      	movs	r3, #142	; 0x8e
 800e4a0:	00db      	lsls	r3, r3, #3
 800e4a2:	58d3      	ldr	r3, [r2, r3]
 800e4a4:	781b      	ldrb	r3, [r3, #0]
 800e4a6:	193a      	adds	r2, r7, r4
 800e4a8:	0011      	movs	r1, r2
 800e4aa:	0018      	movs	r0, r3
 800e4ac:	f004 fce3 	bl	8012e76 <RegionGetPhyParam>
 800e4b0:	0003      	movs	r3, r0
 800e4b2:	001a      	movs	r2, r3
 800e4b4:	197b      	adds	r3, r7, r5
 800e4b6:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 800e4b8:	197b      	adds	r3, r7, r5
 800e4ba:	6819      	ldr	r1, [r3, #0]
 800e4bc:	4a44      	ldr	r2, [pc, #272]	; (800e5d0 <LoRaMacInitialization+0x464>)
 800e4be:	238e      	movs	r3, #142	; 0x8e
 800e4c0:	00db      	lsls	r3, r3, #3
 800e4c2:	58d3      	ldr	r3, [r2, r3]
 800e4c4:	b2c9      	uxtb	r1, r1
 800e4c6:	2230      	movs	r2, #48	; 0x30
 800e4c8:	5499      	strb	r1, [r3, r2]

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 800e4ca:	193b      	adds	r3, r7, r4
 800e4cc:	221e      	movs	r2, #30
 800e4ce:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800e4d0:	4a3f      	ldr	r2, [pc, #252]	; (800e5d0 <LoRaMacInitialization+0x464>)
 800e4d2:	238e      	movs	r3, #142	; 0x8e
 800e4d4:	00db      	lsls	r3, r3, #3
 800e4d6:	58d3      	ldr	r3, [r2, r3]
 800e4d8:	781b      	ldrb	r3, [r3, #0]
 800e4da:	193a      	adds	r2, r7, r4
 800e4dc:	0011      	movs	r1, r2
 800e4de:	0018      	movs	r0, r3
 800e4e0:	f004 fcc9 	bl	8012e76 <RegionGetPhyParam>
 800e4e4:	0003      	movs	r3, r0
 800e4e6:	001a      	movs	r2, r3
 800e4e8:	197b      	adds	r3, r7, r5
 800e4ea:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 800e4ec:	197b      	adds	r3, r7, r5
 800e4ee:	6819      	ldr	r1, [r3, #0]
 800e4f0:	4a37      	ldr	r2, [pc, #220]	; (800e5d0 <LoRaMacInitialization+0x464>)
 800e4f2:	238e      	movs	r3, #142	; 0x8e
 800e4f4:	00db      	lsls	r3, r3, #3
 800e4f6:	58d3      	ldr	r3, [r2, r3]
 800e4f8:	b2c9      	uxtb	r1, r1
 800e4fa:	2231      	movs	r2, #49	; 0x31
 800e4fc:	5499      	strb	r1, [r3, r2]

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 800e4fe:	193b      	adds	r3, r7, r4
 800e500:	221f      	movs	r2, #31
 800e502:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800e504:	4a32      	ldr	r2, [pc, #200]	; (800e5d0 <LoRaMacInitialization+0x464>)
 800e506:	238e      	movs	r3, #142	; 0x8e
 800e508:	00db      	lsls	r3, r3, #3
 800e50a:	58d3      	ldr	r3, [r2, r3]
 800e50c:	781b      	ldrb	r3, [r3, #0]
 800e50e:	193a      	adds	r2, r7, r4
 800e510:	0011      	movs	r1, r2
 800e512:	0018      	movs	r0, r3
 800e514:	f004 fcaf 	bl	8012e76 <RegionGetPhyParam>
 800e518:	0003      	movs	r3, r0
 800e51a:	001a      	movs	r2, r3
 800e51c:	197b      	adds	r3, r7, r5
 800e51e:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.MaxEirp = phyParam.fValue;
 800e520:	4a2b      	ldr	r2, [pc, #172]	; (800e5d0 <LoRaMacInitialization+0x464>)
 800e522:	238e      	movs	r3, #142	; 0x8e
 800e524:	00db      	lsls	r3, r3, #3
 800e526:	58d3      	ldr	r3, [r2, r3]
 800e528:	197a      	adds	r2, r7, r5
 800e52a:	6812      	ldr	r2, [r2, #0]
 800e52c:	635a      	str	r2, [r3, #52]	; 0x34

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 800e52e:	193b      	adds	r3, r7, r4
 800e530:	2220      	movs	r2, #32
 800e532:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800e534:	4a26      	ldr	r2, [pc, #152]	; (800e5d0 <LoRaMacInitialization+0x464>)
 800e536:	238e      	movs	r3, #142	; 0x8e
 800e538:	00db      	lsls	r3, r3, #3
 800e53a:	58d3      	ldr	r3, [r2, r3]
 800e53c:	781b      	ldrb	r3, [r3, #0]
 800e53e:	193a      	adds	r2, r7, r4
 800e540:	0011      	movs	r1, r2
 800e542:	0018      	movs	r0, r3
 800e544:	f004 fc97 	bl	8012e76 <RegionGetPhyParam>
 800e548:	0003      	movs	r3, r0
 800e54a:	001a      	movs	r2, r3
 800e54c:	197b      	adds	r3, r7, r5
 800e54e:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.AntennaGain = phyParam.fValue;
 800e550:	4a1f      	ldr	r2, [pc, #124]	; (800e5d0 <LoRaMacInitialization+0x464>)
 800e552:	238e      	movs	r3, #142	; 0x8e
 800e554:	00db      	lsls	r3, r3, #3
 800e556:	58d3      	ldr	r3, [r2, r3]
 800e558:	197a      	adds	r2, r7, r5
 800e55a:	6812      	ldr	r2, [r2, #0]
 800e55c:	639a      	str	r2, [r3, #56]	; 0x38

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 800e55e:	193b      	adds	r3, r7, r4
 800e560:	220a      	movs	r2, #10
 800e562:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800e564:	4a1a      	ldr	r2, [pc, #104]	; (800e5d0 <LoRaMacInitialization+0x464>)
 800e566:	238e      	movs	r3, #142	; 0x8e
 800e568:	00db      	lsls	r3, r3, #3
 800e56a:	58d3      	ldr	r3, [r2, r3]
 800e56c:	781b      	ldrb	r3, [r3, #0]
 800e56e:	193a      	adds	r2, r7, r4
 800e570:	0011      	movs	r1, r2
 800e572:	0018      	movs	r0, r3
 800e574:	f004 fc7f 	bl	8012e76 <RegionGetPhyParam>
 800e578:	0003      	movs	r3, r0
 800e57a:	001a      	movs	r2, r3
 800e57c:	197b      	adds	r3, r7, r5
 800e57e:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->AdrAckLimit = phyParam.Value;
 800e580:	197b      	adds	r3, r7, r5
 800e582:	6819      	ldr	r1, [r3, #0]
 800e584:	4a12      	ldr	r2, [pc, #72]	; (800e5d0 <LoRaMacInitialization+0x464>)
 800e586:	238e      	movs	r3, #142	; 0x8e
 800e588:	00db      	lsls	r3, r3, #3
 800e58a:	58d3      	ldr	r3, [r2, r3]
 800e58c:	b289      	uxth	r1, r1
 800e58e:	22d0      	movs	r2, #208	; 0xd0
 800e590:	5299      	strh	r1, [r3, r2]

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 800e592:	193b      	adds	r3, r7, r4
 800e594:	220b      	movs	r2, #11
 800e596:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800e598:	4a0d      	ldr	r2, [pc, #52]	; (800e5d0 <LoRaMacInitialization+0x464>)
 800e59a:	238e      	movs	r3, #142	; 0x8e
 800e59c:	00db      	lsls	r3, r3, #3
 800e59e:	58d3      	ldr	r3, [r2, r3]
 800e5a0:	781b      	ldrb	r3, [r3, #0]
 800e5a2:	193a      	adds	r2, r7, r4
 800e5a4:	0011      	movs	r1, r2
 800e5a6:	0018      	movs	r0, r3
 800e5a8:	f004 fc65 	bl	8012e76 <RegionGetPhyParam>
 800e5ac:	0003      	movs	r3, r0
 800e5ae:	001a      	movs	r2, r3
 800e5b0:	197b      	adds	r3, r7, r5
 800e5b2:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->AdrAckDelay = phyParam.Value;
 800e5b4:	197b      	adds	r3, r7, r5
 800e5b6:	6819      	ldr	r1, [r3, #0]
 800e5b8:	4a05      	ldr	r2, [pc, #20]	; (800e5d0 <LoRaMacInitialization+0x464>)
 800e5ba:	238e      	movs	r3, #142	; 0x8e
 800e5bc:	00db      	lsls	r3, r3, #3
 800e5be:	58d3      	ldr	r3, [r2, r3]
 800e5c0:	b289      	uxth	r1, r1
 800e5c2:	e00b      	b.n	800e5dc <LoRaMacInitialization+0x470>
 800e5c4:	0800e115 	.word	0x0800e115
 800e5c8:	20000b7c 	.word	0x20000b7c
 800e5cc:	00000474 	.word	0x00000474
 800e5d0:	20000708 	.word	0x20000708
 800e5d4:	00000217 	.word	0x00000217
 800e5d8:	00000216 	.word	0x00000216
 800e5dc:	22d2      	movs	r2, #210	; 0xd2
 800e5de:	5299      	strh	r1, [r3, r2]

    // Init parameters which are not set in function ResetMacParameters
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsNbTrans = 1;
 800e5e0:	4ab5      	ldr	r2, [pc, #724]	; (800e8b8 <LoRaMacInitialization+0x74c>)
 800e5e2:	238e      	movs	r3, #142	; 0x8e
 800e5e4:	00db      	lsls	r3, r3, #3
 800e5e6:	58d3      	ldr	r3, [r2, r3]
 800e5e8:	2224      	movs	r2, #36	; 0x24
 800e5ea:	2101      	movs	r1, #1
 800e5ec:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError = 20;
 800e5ee:	4ab2      	ldr	r2, [pc, #712]	; (800e8b8 <LoRaMacInitialization+0x74c>)
 800e5f0:	238e      	movs	r3, #142	; 0x8e
 800e5f2:	00db      	lsls	r3, r3, #3
 800e5f4:	58d3      	ldr	r3, [r2, r3]
 800e5f6:	2214      	movs	r2, #20
 800e5f8:	609a      	str	r2, [r3, #8]
    MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols = 6;
 800e5fa:	4aaf      	ldr	r2, [pc, #700]	; (800e8b8 <LoRaMacInitialization+0x74c>)
 800e5fc:	238e      	movs	r3, #142	; 0x8e
 800e5fe:	00db      	lsls	r3, r3, #3
 800e600:	58d3      	ldr	r3, [r2, r3]
 800e602:	2206      	movs	r2, #6
 800e604:	731a      	strb	r2, [r3, #12]

    MacCtx.NvmCtx->MacParams.SystemMaxRxError = MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError;
 800e606:	4aac      	ldr	r2, [pc, #688]	; (800e8b8 <LoRaMacInitialization+0x74c>)
 800e608:	238e      	movs	r3, #142	; 0x8e
 800e60a:	00db      	lsls	r3, r3, #3
 800e60c:	58d3      	ldr	r3, [r2, r3]
 800e60e:	49aa      	ldr	r1, [pc, #680]	; (800e8b8 <LoRaMacInitialization+0x74c>)
 800e610:	228e      	movs	r2, #142	; 0x8e
 800e612:	00d2      	lsls	r2, r2, #3
 800e614:	588a      	ldr	r2, [r1, r2]
 800e616:	689b      	ldr	r3, [r3, #8]
 800e618:	21d8      	movs	r1, #216	; 0xd8
 800e61a:	5053      	str	r3, [r2, r1]
    MacCtx.NvmCtx->MacParams.MinRxSymbols = MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols;
 800e61c:	4aa6      	ldr	r2, [pc, #664]	; (800e8b8 <LoRaMacInitialization+0x74c>)
 800e61e:	238e      	movs	r3, #142	; 0x8e
 800e620:	00db      	lsls	r3, r3, #3
 800e622:	58d2      	ldr	r2, [r2, r3]
 800e624:	49a4      	ldr	r1, [pc, #656]	; (800e8b8 <LoRaMacInitialization+0x74c>)
 800e626:	238e      	movs	r3, #142	; 0x8e
 800e628:	00db      	lsls	r3, r3, #3
 800e62a:	58cb      	ldr	r3, [r1, r3]
 800e62c:	7b11      	ldrb	r1, [r2, #12]
 800e62e:	22dc      	movs	r2, #220	; 0xdc
 800e630:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParams.MaxRxWindow = MacCtx.NvmCtx->MacParamsDefaults.MaxRxWindow;
 800e632:	4aa1      	ldr	r2, [pc, #644]	; (800e8b8 <LoRaMacInitialization+0x74c>)
 800e634:	238e      	movs	r3, #142	; 0x8e
 800e636:	00db      	lsls	r3, r3, #3
 800e638:	58d3      	ldr	r3, [r2, r3]
 800e63a:	499f      	ldr	r1, [pc, #636]	; (800e8b8 <LoRaMacInitialization+0x74c>)
 800e63c:	228e      	movs	r2, #142	; 0x8e
 800e63e:	00d2      	lsls	r2, r2, #3
 800e640:	588a      	ldr	r2, [r1, r2]
 800e642:	691b      	ldr	r3, [r3, #16]
 800e644:	21e0      	movs	r1, #224	; 0xe0
 800e646:	5053      	str	r3, [r2, r1]
    MacCtx.NvmCtx->MacParams.ReceiveDelay1 = MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay1;
 800e648:	4a9b      	ldr	r2, [pc, #620]	; (800e8b8 <LoRaMacInitialization+0x74c>)
 800e64a:	238e      	movs	r3, #142	; 0x8e
 800e64c:	00db      	lsls	r3, r3, #3
 800e64e:	58d3      	ldr	r3, [r2, r3]
 800e650:	4999      	ldr	r1, [pc, #612]	; (800e8b8 <LoRaMacInitialization+0x74c>)
 800e652:	228e      	movs	r2, #142	; 0x8e
 800e654:	00d2      	lsls	r2, r2, #3
 800e656:	588a      	ldr	r2, [r1, r2]
 800e658:	695b      	ldr	r3, [r3, #20]
 800e65a:	21e4      	movs	r1, #228	; 0xe4
 800e65c:	5053      	str	r3, [r2, r1]
    MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay2;
 800e65e:	4a96      	ldr	r2, [pc, #600]	; (800e8b8 <LoRaMacInitialization+0x74c>)
 800e660:	238e      	movs	r3, #142	; 0x8e
 800e662:	00db      	lsls	r3, r3, #3
 800e664:	58d3      	ldr	r3, [r2, r3]
 800e666:	4994      	ldr	r1, [pc, #592]	; (800e8b8 <LoRaMacInitialization+0x74c>)
 800e668:	228e      	movs	r2, #142	; 0x8e
 800e66a:	00d2      	lsls	r2, r2, #3
 800e66c:	588a      	ldr	r2, [r1, r2]
 800e66e:	699b      	ldr	r3, [r3, #24]
 800e670:	21e8      	movs	r1, #232	; 0xe8
 800e672:	5053      	str	r3, [r2, r1]
    MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 = MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay1;
 800e674:	4a90      	ldr	r2, [pc, #576]	; (800e8b8 <LoRaMacInitialization+0x74c>)
 800e676:	238e      	movs	r3, #142	; 0x8e
 800e678:	00db      	lsls	r3, r3, #3
 800e67a:	58d3      	ldr	r3, [r2, r3]
 800e67c:	498e      	ldr	r1, [pc, #568]	; (800e8b8 <LoRaMacInitialization+0x74c>)
 800e67e:	228e      	movs	r2, #142	; 0x8e
 800e680:	00d2      	lsls	r2, r2, #3
 800e682:	588a      	ldr	r2, [r1, r2]
 800e684:	69db      	ldr	r3, [r3, #28]
 800e686:	21ec      	movs	r1, #236	; 0xec
 800e688:	5053      	str	r3, [r2, r1]
    MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 = MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay2;
 800e68a:	4a8b      	ldr	r2, [pc, #556]	; (800e8b8 <LoRaMacInitialization+0x74c>)
 800e68c:	238e      	movs	r3, #142	; 0x8e
 800e68e:	00db      	lsls	r3, r3, #3
 800e690:	58d3      	ldr	r3, [r2, r3]
 800e692:	4989      	ldr	r1, [pc, #548]	; (800e8b8 <LoRaMacInitialization+0x74c>)
 800e694:	228e      	movs	r2, #142	; 0x8e
 800e696:	00d2      	lsls	r2, r2, #3
 800e698:	588a      	ldr	r2, [r1, r2]
 800e69a:	6a1b      	ldr	r3, [r3, #32]
 800e69c:	21f0      	movs	r1, #240	; 0xf0
 800e69e:	5053      	str	r3, [r2, r1]
    MacCtx.NvmCtx->MacParams.ChannelsNbTrans = MacCtx.NvmCtx->MacParamsDefaults.ChannelsNbTrans;
 800e6a0:	4a85      	ldr	r2, [pc, #532]	; (800e8b8 <LoRaMacInitialization+0x74c>)
 800e6a2:	238e      	movs	r3, #142	; 0x8e
 800e6a4:	00db      	lsls	r3, r3, #3
 800e6a6:	58d2      	ldr	r2, [r2, r3]
 800e6a8:	4983      	ldr	r1, [pc, #524]	; (800e8b8 <LoRaMacInitialization+0x74c>)
 800e6aa:	238e      	movs	r3, #142	; 0x8e
 800e6ac:	00db      	lsls	r3, r3, #3
 800e6ae:	58cb      	ldr	r3, [r1, r3]
 800e6b0:	2124      	movs	r1, #36	; 0x24
 800e6b2:	5c51      	ldrb	r1, [r2, r1]
 800e6b4:	22f4      	movs	r2, #244	; 0xf4
 800e6b6:	5499      	strb	r1, [r3, r2]

    ResetMacParameters( );
 800e6b8:	f7fe fec0 	bl	800d43c <ResetMacParameters>

    MacCtx.NvmCtx->PublicNetwork = true;
 800e6bc:	4a7e      	ldr	r2, [pc, #504]	; (800e8b8 <LoRaMacInitialization+0x74c>)
 800e6be:	238e      	movs	r3, #142	; 0x8e
 800e6c0:	00db      	lsls	r3, r3, #3
 800e6c2:	58d3      	ldr	r3, [r2, r3]
 800e6c4:	22c9      	movs	r2, #201	; 0xc9
 800e6c6:	2101      	movs	r1, #1
 800e6c8:	5499      	strb	r1, [r3, r2]

    MacCtx.MacPrimitives = primitives;
 800e6ca:	4a7b      	ldr	r2, [pc, #492]	; (800e8b8 <LoRaMacInitialization+0x74c>)
 800e6cc:	23d6      	movs	r3, #214	; 0xd6
 800e6ce:	009b      	lsls	r3, r3, #2
 800e6d0:	68f9      	ldr	r1, [r7, #12]
 800e6d2:	50d1      	str	r1, [r2, r3]
    MacCtx.MacCallbacks = callbacks;
 800e6d4:	4a78      	ldr	r2, [pc, #480]	; (800e8b8 <LoRaMacInitialization+0x74c>)
 800e6d6:	23d7      	movs	r3, #215	; 0xd7
 800e6d8:	009b      	lsls	r3, r3, #2
 800e6da:	68b9      	ldr	r1, [r7, #8]
 800e6dc:	50d1      	str	r1, [r2, r3]
    MacCtx.MacFlags.Value = 0;
 800e6de:	4b76      	ldr	r3, [pc, #472]	; (800e8b8 <LoRaMacInitialization+0x74c>)
 800e6e0:	4a76      	ldr	r2, [pc, #472]	; (800e8bc <LoRaMacInitialization+0x750>)
 800e6e2:	2100      	movs	r1, #0
 800e6e4:	5499      	strb	r1, [r3, r2]
    MacCtx.MacState = LORAMAC_STOPPED;
 800e6e6:	4a74      	ldr	r2, [pc, #464]	; (800e8b8 <LoRaMacInitialization+0x74c>)
 800e6e8:	23d5      	movs	r3, #213	; 0xd5
 800e6ea:	009b      	lsls	r3, r3, #2
 800e6ec:	2101      	movs	r1, #1
 800e6ee:	50d1      	str	r1, [r2, r3]

    // Reset duty cycle times
    MacCtx.AggregatedLastTxDoneTime = 0;
 800e6f0:	4a71      	ldr	r2, [pc, #452]	; (800e8b8 <LoRaMacInitialization+0x74c>)
 800e6f2:	23d0      	movs	r3, #208	; 0xd0
 800e6f4:	009b      	lsls	r3, r3, #2
 800e6f6:	2100      	movs	r1, #0
 800e6f8:	50d1      	str	r1, [r2, r3]
    MacCtx.AggregatedTimeOff = 0;
 800e6fa:	4a6f      	ldr	r2, [pc, #444]	; (800e8b8 <LoRaMacInitialization+0x74c>)
 800e6fc:	23d1      	movs	r3, #209	; 0xd1
 800e6fe:	009b      	lsls	r3, r3, #2
 800e700:	2100      	movs	r1, #0
 800e702:	50d1      	str	r1, [r2, r3]

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 800e704:	4a6e      	ldr	r2, [pc, #440]	; (800e8c0 <LoRaMacInitialization+0x754>)
 800e706:	4b6f      	ldr	r3, [pc, #444]	; (800e8c4 <LoRaMacInitialization+0x758>)
 800e708:	0011      	movs	r1, r2
 800e70a:	0018      	movs	r0, r3
 800e70c:	f007 f840 	bl	8015790 <TimerInit>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 800e710:	4a6d      	ldr	r2, [pc, #436]	; (800e8c8 <LoRaMacInitialization+0x75c>)
 800e712:	4b6e      	ldr	r3, [pc, #440]	; (800e8cc <LoRaMacInitialization+0x760>)
 800e714:	0011      	movs	r1, r2
 800e716:	0018      	movs	r0, r3
 800e718:	f007 f83a 	bl	8015790 <TimerInit>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 800e71c:	4a6c      	ldr	r2, [pc, #432]	; (800e8d0 <LoRaMacInitialization+0x764>)
 800e71e:	4b6d      	ldr	r3, [pc, #436]	; (800e8d4 <LoRaMacInitialization+0x768>)
 800e720:	0011      	movs	r1, r2
 800e722:	0018      	movs	r0, r3
 800e724:	f007 f834 	bl	8015790 <TimerInit>
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
 800e728:	4a6b      	ldr	r2, [pc, #428]	; (800e8d8 <LoRaMacInitialization+0x76c>)
 800e72a:	4b6c      	ldr	r3, [pc, #432]	; (800e8dc <LoRaMacInitialization+0x770>)
 800e72c:	0011      	movs	r1, r2
 800e72e:	0018      	movs	r0, r3
 800e730:	f007 f82e 	bl	8015790 <TimerInit>

    // Store the current initialization time
    MacCtx.InitializationTime = TimerGetCurrentTime( );
 800e734:	f007 f906 	bl	8015944 <TimerGetCurrentTime>
 800e738:	0001      	movs	r1, r0
 800e73a:	4a5f      	ldr	r2, [pc, #380]	; (800e8b8 <LoRaMacInitialization+0x74c>)
 800e73c:	23d2      	movs	r3, #210	; 0xd2
 800e73e:	009b      	lsls	r3, r3, #2
 800e740:	50d1      	str	r1, [r2, r3]

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 800e742:	4a5d      	ldr	r2, [pc, #372]	; (800e8b8 <LoRaMacInitialization+0x74c>)
 800e744:	23d8      	movs	r3, #216	; 0xd8
 800e746:	009b      	lsls	r3, r3, #2
 800e748:	4965      	ldr	r1, [pc, #404]	; (800e8e0 <LoRaMacInitialization+0x774>)
 800e74a:	50d1      	str	r1, [r2, r3]
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 800e74c:	4a5a      	ldr	r2, [pc, #360]	; (800e8b8 <LoRaMacInitialization+0x74c>)
 800e74e:	23da      	movs	r3, #218	; 0xda
 800e750:	009b      	lsls	r3, r3, #2
 800e752:	4964      	ldr	r1, [pc, #400]	; (800e8e4 <LoRaMacInitialization+0x778>)
 800e754:	50d1      	str	r1, [r2, r3]
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 800e756:	4a58      	ldr	r2, [pc, #352]	; (800e8b8 <LoRaMacInitialization+0x74c>)
 800e758:	23dc      	movs	r3, #220	; 0xdc
 800e75a:	009b      	lsls	r3, r3, #2
 800e75c:	4962      	ldr	r1, [pc, #392]	; (800e8e8 <LoRaMacInitialization+0x77c>)
 800e75e:	50d1      	str	r1, [r2, r3]
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 800e760:	4a55      	ldr	r2, [pc, #340]	; (800e8b8 <LoRaMacInitialization+0x74c>)
 800e762:	23d9      	movs	r3, #217	; 0xd9
 800e764:	009b      	lsls	r3, r3, #2
 800e766:	4961      	ldr	r1, [pc, #388]	; (800e8ec <LoRaMacInitialization+0x780>)
 800e768:	50d1      	str	r1, [r2, r3]
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 800e76a:	4a53      	ldr	r2, [pc, #332]	; (800e8b8 <LoRaMacInitialization+0x74c>)
 800e76c:	23db      	movs	r3, #219	; 0xdb
 800e76e:	009b      	lsls	r3, r3, #2
 800e770:	495f      	ldr	r1, [pc, #380]	; (800e8f0 <LoRaMacInitialization+0x784>)
 800e772:	50d1      	str	r1, [r2, r3]
    Radio.Init( &MacCtx.RadioEvents );
 800e774:	4b5f      	ldr	r3, [pc, #380]	; (800e8f4 <LoRaMacInitialization+0x788>)
 800e776:	689b      	ldr	r3, [r3, #8]
 800e778:	4a5f      	ldr	r2, [pc, #380]	; (800e8f8 <LoRaMacInitialization+0x78c>)
 800e77a:	0010      	movs	r0, r2
 800e77c:	4798      	blx	r3

    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_INIT;
 800e77e:	2114      	movs	r1, #20
 800e780:	187b      	adds	r3, r7, r1
 800e782:	2200      	movs	r2, #0
 800e784:	711a      	strb	r2, [r3, #4]
    params.NvmCtx = NULL;
 800e786:	187b      	adds	r3, r7, r1
 800e788:	2200      	movs	r2, #0
 800e78a:	601a      	str	r2, [r3, #0]
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 800e78c:	4a4a      	ldr	r2, [pc, #296]	; (800e8b8 <LoRaMacInitialization+0x74c>)
 800e78e:	238e      	movs	r3, #142	; 0x8e
 800e790:	00db      	lsls	r3, r3, #3
 800e792:	58d3      	ldr	r3, [r2, r3]
 800e794:	781b      	ldrb	r3, [r3, #0]
 800e796:	187a      	adds	r2, r7, r1
 800e798:	0011      	movs	r1, r2
 800e79a:	0018      	movs	r0, r3
 800e79c:	f004 fba7 	bl	8012eee <RegionInitDefaults>

    // Initialize the Secure Element driver
    if( SecureElementInit( EventSecureElementNvmCtxChanged ) != SECURE_ELEMENT_SUCCESS )
 800e7a0:	4b56      	ldr	r3, [pc, #344]	; (800e8fc <LoRaMacInitialization+0x790>)
 800e7a2:	0018      	movs	r0, r3
 800e7a4:	f7fb fb28 	bl	8009df8 <SecureElementInit>
 800e7a8:	1e03      	subs	r3, r0, #0
 800e7aa:	d001      	beq.n	800e7b0 <LoRaMacInitialization+0x644>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800e7ac:	2311      	movs	r3, #17
 800e7ae:	e07e      	b.n	800e8ae <LoRaMacInitialization+0x742>
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( EventCryptoNvmCtxChanged ) != LORAMAC_CRYPTO_SUCCESS )
 800e7b0:	4b53      	ldr	r3, [pc, #332]	; (800e900 <LoRaMacInitialization+0x794>)
 800e7b2:	0018      	movs	r0, r3
 800e7b4:	f003 f858 	bl	8011868 <LoRaMacCryptoInit>
 800e7b8:	1e03      	subs	r3, r0, #0
 800e7ba:	d001      	beq.n	800e7c0 <LoRaMacInitialization+0x654>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800e7bc:	2311      	movs	r3, #17
 800e7be:	e076      	b.n	800e8ae <LoRaMacInitialization+0x742>
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( EventCommandsNvmCtxChanged ) != LORAMAC_COMMANDS_SUCCESS )
 800e7c0:	4b50      	ldr	r3, [pc, #320]	; (800e904 <LoRaMacInitialization+0x798>)
 800e7c2:	0018      	movs	r0, r3
 800e7c4:	f001 fd66 	bl	8010294 <LoRaMacCommandsInit>
 800e7c8:	1e03      	subs	r3, r0, #0
 800e7ca:	d001      	beq.n	800e7d0 <LoRaMacInitialization+0x664>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800e7cc:	2313      	movs	r3, #19
 800e7ce:	e06e      	b.n	800e8ae <LoRaMacInitialization+0x742>
    }

    // Initialize FCnt Handler module
    if( LoRaMacFCntHandlerInit( EventFCntHandlerNvmCtxChanged ) != LORAMAC_FCNT_HANDLER_SUCCESS )
 800e7d0:	4b4d      	ldr	r3, [pc, #308]	; (800e908 <LoRaMacInitialization+0x79c>)
 800e7d2:	0018      	movs	r0, r3
 800e7d4:	f003 fdea 	bl	80123ac <LoRaMacFCntHandlerInit>
 800e7d8:	1e03      	subs	r3, r0, #0
 800e7da:	d001      	beq.n	800e7e0 <LoRaMacInitialization+0x674>
    {
        return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800e7dc:	2312      	movs	r3, #18
 800e7de:	e066      	b.n	800e8ae <LoRaMacInitialization+0x742>
    }

    // Set multicast downlink counter reference
    LoRaMacFCntHandlerSetMulticastReference( MacCtx.NvmCtx->MulticastChannelList );
 800e7e0:	4a35      	ldr	r2, [pc, #212]	; (800e8b8 <LoRaMacInitialization+0x74c>)
 800e7e2:	238e      	movs	r3, #142	; 0x8e
 800e7e4:	00db      	lsls	r3, r3, #3
 800e7e6:	58d3      	ldr	r3, [r2, r3]
 800e7e8:	3348      	adds	r3, #72	; 0x48
 800e7ea:	0018      	movs	r0, r3
 800e7ec:	f003 ff4c 	bl	8012688 <LoRaMacFCntHandlerSetMulticastReference>

    // Random seed initialization
    srand1( Radio.Random( ) );
 800e7f0:	4b40      	ldr	r3, [pc, #256]	; (800e8f4 <LoRaMacInitialization+0x788>)
 800e7f2:	69db      	ldr	r3, [r3, #28]
 800e7f4:	4798      	blx	r3
 800e7f6:	0003      	movs	r3, r0
 800e7f8:	0018      	movs	r0, r3
 800e7fa:	f007 f8d5 	bl	80159a8 <srand1>

    Radio.SetPublicNetwork( MacCtx.NvmCtx->PublicNetwork );
 800e7fe:	4b3d      	ldr	r3, [pc, #244]	; (800e8f4 <LoRaMacInitialization+0x788>)
 800e800:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e802:	492d      	ldr	r1, [pc, #180]	; (800e8b8 <LoRaMacInitialization+0x74c>)
 800e804:	228e      	movs	r2, #142	; 0x8e
 800e806:	00d2      	lsls	r2, r2, #3
 800e808:	588a      	ldr	r2, [r1, r2]
 800e80a:	21c9      	movs	r1, #201	; 0xc9
 800e80c:	5c52      	ldrb	r2, [r2, r1]
 800e80e:	0010      	movs	r0, r2
 800e810:	4798      	blx	r3
    Radio.Sleep( );
 800e812:	4b38      	ldr	r3, [pc, #224]	; (800e8f4 <LoRaMacInitialization+0x788>)
 800e814:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e816:	4798      	blx	r3

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 800e818:	2140      	movs	r1, #64	; 0x40
 800e81a:	187b      	adds	r3, r7, r1
 800e81c:	2200      	movs	r2, #0
 800e81e:	601a      	str	r2, [r3, #0]
    classBCallbacks.MacProcessNotify = NULL;
 800e820:	187b      	adds	r3, r7, r1
 800e822:	2200      	movs	r2, #0
 800e824:	605a      	str	r2, [r3, #4]
    if( callbacks != NULL )
 800e826:	68bb      	ldr	r3, [r7, #8]
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d008      	beq.n	800e83e <LoRaMacInitialization+0x6d2>
    {
        classBCallbacks.GetTemperatureLevel = callbacks->GetTemperatureLevel;
 800e82c:	68bb      	ldr	r3, [r7, #8]
 800e82e:	685a      	ldr	r2, [r3, #4]
 800e830:	2140      	movs	r1, #64	; 0x40
 800e832:	187b      	adds	r3, r7, r1
 800e834:	601a      	str	r2, [r3, #0]
        classBCallbacks.MacProcessNotify = callbacks->MacProcessNotify;
 800e836:	68bb      	ldr	r3, [r7, #8]
 800e838:	68da      	ldr	r2, [r3, #12]
 800e83a:	187b      	adds	r3, r7, r1
 800e83c:	605a      	str	r2, [r3, #4]
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 800e83e:	2120      	movs	r1, #32
 800e840:	187b      	adds	r3, r7, r1
 800e842:	4a32      	ldr	r2, [pc, #200]	; (800e90c <LoRaMacInitialization+0x7a0>)
 800e844:	601a      	str	r2, [r3, #0]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 800e846:	187b      	adds	r3, r7, r1
 800e848:	4a31      	ldr	r2, [pc, #196]	; (800e910 <LoRaMacInitialization+0x7a4>)
 800e84a:	605a      	str	r2, [r3, #4]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 800e84c:	187b      	adds	r3, r7, r1
 800e84e:	4a31      	ldr	r2, [pc, #196]	; (800e914 <LoRaMacInitialization+0x7a8>)
 800e850:	609a      	str	r2, [r3, #8]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 800e852:	187b      	adds	r3, r7, r1
 800e854:	4a30      	ldr	r2, [pc, #192]	; (800e918 <LoRaMacInitialization+0x7ac>)
 800e856:	60da      	str	r2, [r3, #12]
    classBParams.LoRaMacDevAddr = &MacCtx.NvmCtx->DevAddr;
 800e858:	4a17      	ldr	r2, [pc, #92]	; (800e8b8 <LoRaMacInitialization+0x74c>)
 800e85a:	238e      	movs	r3, #142	; 0x8e
 800e85c:	00db      	lsls	r3, r3, #3
 800e85e:	58d3      	ldr	r3, [r2, r3]
 800e860:	3344      	adds	r3, #68	; 0x44
 800e862:	001a      	movs	r2, r3
 800e864:	187b      	adds	r3, r7, r1
 800e866:	611a      	str	r2, [r3, #16]
    classBParams.LoRaMacRegion = &MacCtx.NvmCtx->Region;
 800e868:	4a13      	ldr	r2, [pc, #76]	; (800e8b8 <LoRaMacInitialization+0x74c>)
 800e86a:	238e      	movs	r3, #142	; 0x8e
 800e86c:	00db      	lsls	r3, r3, #3
 800e86e:	58d3      	ldr	r3, [r2, r3]
 800e870:	001a      	movs	r2, r3
 800e872:	187b      	adds	r3, r7, r1
 800e874:	615a      	str	r2, [r3, #20]
    classBParams.LoRaMacParams = &MacCtx.NvmCtx->MacParams;
 800e876:	4a10      	ldr	r2, [pc, #64]	; (800e8b8 <LoRaMacInitialization+0x74c>)
 800e878:	238e      	movs	r3, #142	; 0x8e
 800e87a:	00db      	lsls	r3, r3, #3
 800e87c:	58d3      	ldr	r3, [r2, r3]
 800e87e:	33d4      	adds	r3, #212	; 0xd4
 800e880:	001a      	movs	r2, r3
 800e882:	187b      	adds	r3, r7, r1
 800e884:	619a      	str	r2, [r3, #24]
    classBParams.MulticastChannels = &MacCtx.NvmCtx->MulticastChannelList[0];
 800e886:	4a0c      	ldr	r2, [pc, #48]	; (800e8b8 <LoRaMacInitialization+0x74c>)
 800e888:	238e      	movs	r3, #142	; 0x8e
 800e88a:	00db      	lsls	r3, r3, #3
 800e88c:	58d3      	ldr	r3, [r2, r3]
 800e88e:	3348      	adds	r3, #72	; 0x48
 800e890:	001a      	movs	r2, r3
 800e892:	0008      	movs	r0, r1
 800e894:	187b      	adds	r3, r7, r1
 800e896:	61da      	str	r2, [r3, #28]

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &EventClassBNvmCtxChanged );
 800e898:	4a20      	ldr	r2, [pc, #128]	; (800e91c <LoRaMacInitialization+0x7b0>)
 800e89a:	2340      	movs	r3, #64	; 0x40
 800e89c:	18f9      	adds	r1, r7, r3
 800e89e:	183b      	adds	r3, r7, r0
 800e8a0:	0018      	movs	r0, r3
 800e8a2:	f001 fae1 	bl	800fe68 <LoRaMacClassBInit>

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800e8a6:	2001      	movs	r0, #1
 800e8a8:	f7fc fe9e 	bl	800b5e8 <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 800e8ac:	2300      	movs	r3, #0
}
 800e8ae:	0018      	movs	r0, r3
 800e8b0:	46bd      	mov	sp, r7
 800e8b2:	b014      	add	sp, #80	; 0x50
 800e8b4:	bdb0      	pop	{r4, r5, r7, pc}
 800e8b6:	46c0      	nop			; (mov r8, r8)
 800e8b8:	20000708 	.word	0x20000708
 800e8bc:	0000046d 	.word	0x0000046d
 800e8c0:	0800ba95 	.word	0x0800ba95
 800e8c4:	20000a84 	.word	0x20000a84
 800e8c8:	0800bb25 	.word	0x0800bb25
 800e8cc:	20000a9c 	.word	0x20000a9c
 800e8d0:	0800bc19 	.word	0x0800bc19
 800e8d4:	20000ab4 	.word	0x20000ab4
 800e8d8:	0800bd5d 	.word	0x0800bd5d
 800e8dc:	20000afc 	.word	0x20000afc
 800e8e0:	0800a4cd 	.word	0x0800a4cd
 800e8e4:	0800a565 	.word	0x0800a565
 800e8e8:	0800a639 	.word	0x0800a639
 800e8ec:	0800a5f5 	.word	0x0800a5f5
 800e8f0:	0800a67d 	.word	0x0800a67d
 800e8f4:	08021b54 	.word	0x08021b54
 800e8f8:	20000a68 	.word	0x20000a68
 800e8fc:	0800e0e5 	.word	0x0800e0e5
 800e900:	0800e0d5 	.word	0x0800e0d5
 800e904:	0800e0f5 	.word	0x0800e0f5
 800e908:	0800e125 	.word	0x0800e125
 800e90c:	20000b5c 	.word	0x20000b5c
 800e910:	20000b18 	.word	0x20000b18
 800e914:	20000b48 	.word	0x20000b48
 800e918:	20000b75 	.word	0x20000b75
 800e91c:	0800e105 	.word	0x0800e105

0800e920 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 800e920:	b580      	push	{r7, lr}
 800e922:	af00      	add	r7, sp, #0
    MacCtx.MacState = LORAMAC_IDLE;
 800e924:	4a04      	ldr	r2, [pc, #16]	; (800e938 <LoRaMacStart+0x18>)
 800e926:	23d5      	movs	r3, #213	; 0xd5
 800e928:	009b      	lsls	r3, r3, #2
 800e92a:	2100      	movs	r1, #0
 800e92c:	50d1      	str	r1, [r2, r3]
    return LORAMAC_STATUS_OK;
 800e92e:	2300      	movs	r3, #0
}
 800e930:	0018      	movs	r0, r3
 800e932:	46bd      	mov	sp, r7
 800e934:	bd80      	pop	{r7, pc}
 800e936:	46c0      	nop			; (mov r8, r8)
 800e938:	20000708 	.word	0x20000708

0800e93c <LoRaMacQueryTxPossible>:
    }
    return LORAMAC_STATUS_BUSY;
}

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 800e93c:	b590      	push	{r4, r7, lr}
 800e93e:	b08b      	sub	sp, #44	; 0x2c
 800e940:	af00      	add	r7, sp, #0
 800e942:	0002      	movs	r2, r0
 800e944:	6039      	str	r1, [r7, #0]
 800e946:	1dfb      	adds	r3, r7, #7
 800e948:	701a      	strb	r2, [r3, #0]
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 800e94a:	4a58      	ldr	r2, [pc, #352]	; (800eaac <LoRaMacQueryTxPossible+0x170>)
 800e94c:	238e      	movs	r3, #142	; 0x8e
 800e94e:	00db      	lsls	r3, r3, #3
 800e950:	58d3      	ldr	r3, [r2, r3]
 800e952:	22cc      	movs	r2, #204	; 0xcc
 800e954:	589b      	ldr	r3, [r3, r2]
 800e956:	613b      	str	r3, [r7, #16]
    int8_t datarate = MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate;
 800e958:	4a54      	ldr	r2, [pc, #336]	; (800eaac <LoRaMacQueryTxPossible+0x170>)
 800e95a:	238e      	movs	r3, #142	; 0x8e
 800e95c:	00db      	lsls	r3, r3, #3
 800e95e:	58d3      	ldr	r3, [r2, r3]
 800e960:	2205      	movs	r2, #5
 800e962:	569a      	ldrsb	r2, [r3, r2]
 800e964:	230f      	movs	r3, #15
 800e966:	18fb      	adds	r3, r7, r3
 800e968:	701a      	strb	r2, [r3, #0]
    int8_t txPower = MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower;
 800e96a:	4a50      	ldr	r2, [pc, #320]	; (800eaac <LoRaMacQueryTxPossible+0x170>)
 800e96c:	238e      	movs	r3, #142	; 0x8e
 800e96e:	00db      	lsls	r3, r3, #3
 800e970:	58d3      	ldr	r3, [r2, r3]
 800e972:	2204      	movs	r2, #4
 800e974:	569a      	ldrsb	r2, [r3, r2]
 800e976:	230e      	movs	r3, #14
 800e978:	18fb      	adds	r3, r7, r3
 800e97a:	701a      	strb	r2, [r3, #0]
    size_t macCmdsSize = 0;
 800e97c:	2300      	movs	r3, #0
 800e97e:	60bb      	str	r3, [r7, #8]

    if( txInfo == NULL )
 800e980:	683b      	ldr	r3, [r7, #0]
 800e982:	2b00      	cmp	r3, #0
 800e984:	d101      	bne.n	800e98a <LoRaMacQueryTxPossible+0x4e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800e986:	2303      	movs	r3, #3
 800e988:	e08c      	b.n	800eaa4 <LoRaMacQueryTxPossible+0x168>
    }

    // Setup ADR request
    adrNext.Version = MacCtx.NvmCtx->Version;
 800e98a:	4a48      	ldr	r2, [pc, #288]	; (800eaac <LoRaMacQueryTxPossible+0x170>)
 800e98c:	238e      	movs	r3, #142	; 0x8e
 800e98e:	00db      	lsls	r3, r3, #3
 800e990:	58d1      	ldr	r1, [r2, r3]
 800e992:	2014      	movs	r0, #20
 800e994:	183b      	adds	r3, r7, r0
 800e996:	2288      	movs	r2, #136	; 0x88
 800e998:	0092      	lsls	r2, r2, #2
 800e99a:	588a      	ldr	r2, [r1, r2]
 800e99c:	601a      	str	r2, [r3, #0]
    adrNext.UpdateChanMask = false;
 800e99e:	0001      	movs	r1, r0
 800e9a0:	187b      	adds	r3, r7, r1
 800e9a2:	2200      	movs	r2, #0
 800e9a4:	711a      	strb	r2, [r3, #4]
    adrNext.AdrEnabled = MacCtx.NvmCtx->AdrCtrlOn;
 800e9a6:	4a41      	ldr	r2, [pc, #260]	; (800eaac <LoRaMacQueryTxPossible+0x170>)
 800e9a8:	238e      	movs	r3, #142	; 0x8e
 800e9aa:	00db      	lsls	r3, r3, #3
 800e9ac:	58d3      	ldr	r3, [r2, r3]
 800e9ae:	22ca      	movs	r2, #202	; 0xca
 800e9b0:	5c9a      	ldrb	r2, [r3, r2]
 800e9b2:	187b      	adds	r3, r7, r1
 800e9b4:	715a      	strb	r2, [r3, #5]
    adrNext.AdrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 800e9b6:	4a3d      	ldr	r2, [pc, #244]	; (800eaac <LoRaMacQueryTxPossible+0x170>)
 800e9b8:	238e      	movs	r3, #142	; 0x8e
 800e9ba:	00db      	lsls	r3, r3, #3
 800e9bc:	58d3      	ldr	r3, [r2, r3]
 800e9be:	22cc      	movs	r2, #204	; 0xcc
 800e9c0:	589a      	ldr	r2, [r3, r2]
 800e9c2:	187b      	adds	r3, r7, r1
 800e9c4:	609a      	str	r2, [r3, #8]
    adrNext.AdrAckLimit = MacCtx.NvmCtx->AdrAckLimit;
 800e9c6:	4a39      	ldr	r2, [pc, #228]	; (800eaac <LoRaMacQueryTxPossible+0x170>)
 800e9c8:	238e      	movs	r3, #142	; 0x8e
 800e9ca:	00db      	lsls	r3, r3, #3
 800e9cc:	58d3      	ldr	r3, [r2, r3]
 800e9ce:	22d0      	movs	r2, #208	; 0xd0
 800e9d0:	5a9a      	ldrh	r2, [r3, r2]
 800e9d2:	187b      	adds	r3, r7, r1
 800e9d4:	819a      	strh	r2, [r3, #12]
    adrNext.AdrAckDelay = MacCtx.NvmCtx->AdrAckDelay;
 800e9d6:	4a35      	ldr	r2, [pc, #212]	; (800eaac <LoRaMacQueryTxPossible+0x170>)
 800e9d8:	238e      	movs	r3, #142	; 0x8e
 800e9da:	00db      	lsls	r3, r3, #3
 800e9dc:	58d3      	ldr	r3, [r2, r3]
 800e9de:	22d2      	movs	r2, #210	; 0xd2
 800e9e0:	5a9a      	ldrh	r2, [r3, r2]
 800e9e2:	187b      	adds	r3, r7, r1
 800e9e4:	81da      	strh	r2, [r3, #14]
    adrNext.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800e9e6:	4a31      	ldr	r2, [pc, #196]	; (800eaac <LoRaMacQueryTxPossible+0x170>)
 800e9e8:	238e      	movs	r3, #142	; 0x8e
 800e9ea:	00db      	lsls	r3, r3, #3
 800e9ec:	58d3      	ldr	r3, [r2, r3]
 800e9ee:	22d5      	movs	r2, #213	; 0xd5
 800e9f0:	569a      	ldrsb	r2, [r3, r2]
 800e9f2:	187b      	adds	r3, r7, r1
 800e9f4:	741a      	strb	r2, [r3, #16]
    adrNext.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 800e9f6:	4a2d      	ldr	r2, [pc, #180]	; (800eaac <LoRaMacQueryTxPossible+0x170>)
 800e9f8:	238e      	movs	r3, #142	; 0x8e
 800e9fa:	00db      	lsls	r3, r3, #3
 800e9fc:	58d3      	ldr	r3, [r2, r3]
 800e9fe:	22d4      	movs	r2, #212	; 0xd4
 800ea00:	569a      	ldrsb	r2, [r3, r2]
 800ea02:	187b      	adds	r3, r7, r1
 800ea04:	745a      	strb	r2, [r3, #17]
    adrNext.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800ea06:	4a29      	ldr	r2, [pc, #164]	; (800eaac <LoRaMacQueryTxPossible+0x170>)
 800ea08:	238e      	movs	r3, #142	; 0x8e
 800ea0a:	00db      	lsls	r3, r3, #3
 800ea0c:	58d2      	ldr	r2, [r2, r3]
 800ea0e:	2380      	movs	r3, #128	; 0x80
 800ea10:	005b      	lsls	r3, r3, #1
 800ea12:	5cd2      	ldrb	r2, [r2, r3]
 800ea14:	187b      	adds	r3, r7, r1
 800ea16:	749a      	strb	r2, [r3, #18]
    adrNext.Region = MacCtx.NvmCtx->Region;
 800ea18:	4a24      	ldr	r2, [pc, #144]	; (800eaac <LoRaMacQueryTxPossible+0x170>)
 800ea1a:	238e      	movs	r3, #142	; 0x8e
 800ea1c:	00db      	lsls	r3, r3, #3
 800ea1e:	58d3      	ldr	r3, [r2, r3]
 800ea20:	781a      	ldrb	r2, [r3, #0]
 800ea22:	0008      	movs	r0, r1
 800ea24:	187b      	adds	r3, r7, r1
 800ea26:	74da      	strb	r2, [r3, #19]

    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 800ea28:	2310      	movs	r3, #16
 800ea2a:	18fb      	adds	r3, r7, r3
 800ea2c:	220e      	movs	r2, #14
 800ea2e:	18ba      	adds	r2, r7, r2
 800ea30:	240f      	movs	r4, #15
 800ea32:	1939      	adds	r1, r7, r4
 800ea34:	1838      	adds	r0, r7, r0
 800ea36:	f001 f9ff 	bl	800fe38 <LoRaMacAdrCalcNext>

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800ea3a:	193b      	adds	r3, r7, r4
 800ea3c:	781b      	ldrb	r3, [r3, #0]
 800ea3e:	b25b      	sxtb	r3, r3
 800ea40:	0018      	movs	r0, r3
 800ea42:	f7fd fa99 	bl	800bf78 <GetMaxAppPayloadWithoutFOptsLength>
 800ea46:	0003      	movs	r3, r0
 800ea48:	001a      	movs	r2, r3
 800ea4a:	683b      	ldr	r3, [r7, #0]
 800ea4c:	705a      	strb	r2, [r3, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800ea4e:	2308      	movs	r3, #8
 800ea50:	18fb      	adds	r3, r7, r3
 800ea52:	0018      	movs	r0, r3
 800ea54:	f001 fd4a 	bl	80104ec <LoRaMacCommandsGetSizeSerializedCmds>
 800ea58:	1e03      	subs	r3, r0, #0
 800ea5a:	d001      	beq.n	800ea60 <LoRaMacQueryTxPossible+0x124>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800ea5c:	2313      	movs	r3, #19
 800ea5e:	e021      	b.n	800eaa4 <LoRaMacQueryTxPossible+0x168>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 800ea60:	68bb      	ldr	r3, [r7, #8]
 800ea62:	2b0f      	cmp	r3, #15
 800ea64:	d81a      	bhi.n	800ea9c <LoRaMacQueryTxPossible+0x160>
 800ea66:	683b      	ldr	r3, [r7, #0]
 800ea68:	785b      	ldrb	r3, [r3, #1]
 800ea6a:	001a      	movs	r2, r3
 800ea6c:	68bb      	ldr	r3, [r7, #8]
 800ea6e:	429a      	cmp	r2, r3
 800ea70:	d314      	bcc.n	800ea9c <LoRaMacQueryTxPossible+0x160>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 800ea72:	683b      	ldr	r3, [r7, #0]
 800ea74:	785a      	ldrb	r2, [r3, #1]
 800ea76:	68bb      	ldr	r3, [r7, #8]
 800ea78:	b2db      	uxtb	r3, r3
 800ea7a:	1ad3      	subs	r3, r2, r3
 800ea7c:	b2da      	uxtb	r2, r3
 800ea7e:	683b      	ldr	r3, [r7, #0]
 800ea80:	701a      	strb	r2, [r3, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 800ea82:	683b      	ldr	r3, [r7, #0]
 800ea84:	785b      	ldrb	r3, [r3, #1]
 800ea86:	0019      	movs	r1, r3
 800ea88:	1dfb      	adds	r3, r7, #7
 800ea8a:	781a      	ldrb	r2, [r3, #0]
 800ea8c:	68bb      	ldr	r3, [r7, #8]
 800ea8e:	18d3      	adds	r3, r2, r3
 800ea90:	4299      	cmp	r1, r3
 800ea92:	d301      	bcc.n	800ea98 <LoRaMacQueryTxPossible+0x15c>
        {
            return LORAMAC_STATUS_OK;
 800ea94:	2300      	movs	r3, #0
 800ea96:	e005      	b.n	800eaa4 <LoRaMacQueryTxPossible+0x168>
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 800ea98:	2308      	movs	r3, #8
 800ea9a:	e003      	b.n	800eaa4 <LoRaMacQueryTxPossible+0x168>
        }
    }
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
 800ea9c:	683b      	ldr	r3, [r7, #0]
 800ea9e:	2200      	movs	r2, #0
 800eaa0:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 800eaa2:	2308      	movs	r3, #8
    }
}
 800eaa4:	0018      	movs	r0, r3
 800eaa6:	46bd      	mov	sp, r7
 800eaa8:	b00b      	add	sp, #44	; 0x2c
 800eaaa:	bd90      	pop	{r4, r7, pc}
 800eaac:	20000708 	.word	0x20000708

0800eab0 <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 800eab0:	b590      	push	{r4, r7, lr}
 800eab2:	b087      	sub	sp, #28
 800eab4:	af00      	add	r7, sp, #0
 800eab6:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800eab8:	2317      	movs	r3, #23
 800eaba:	18fb      	adds	r3, r7, r3
 800eabc:	2200      	movs	r2, #0
 800eabe:	701a      	strb	r2, [r3, #0]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d101      	bne.n	800eaca <LoRaMacMibGetRequestConfirm+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800eac6:	2303      	movs	r3, #3
 800eac8:	e135      	b.n	800ed36 <LoRaMacMibGetRequestConfirm+0x286>
    }

    switch( mibGet->Type )
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	781b      	ldrb	r3, [r3, #0]
 800eace:	2b2f      	cmp	r3, #47	; 0x2f
 800ead0:	d900      	bls.n	800ead4 <LoRaMacMibGetRequestConfirm+0x24>
 800ead2:	e124      	b.n	800ed1e <LoRaMacMibGetRequestConfirm+0x26e>
 800ead4:	009a      	lsls	r2, r3, #2
 800ead6:	4b9a      	ldr	r3, [pc, #616]	; (800ed40 <LoRaMacMibGetRequestConfirm+0x290>)
 800ead8:	18d3      	adds	r3, r2, r3
 800eada:	681b      	ldr	r3, [r3, #0]
 800eadc:	469f      	mov	pc, r3
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = MacCtx.NvmCtx->DeviceClass;
 800eade:	4a99      	ldr	r2, [pc, #612]	; (800ed44 <LoRaMacMibGetRequestConfirm+0x294>)
 800eae0:	238e      	movs	r3, #142	; 0x8e
 800eae2:	00db      	lsls	r3, r3, #3
 800eae4:	58d3      	ldr	r3, [r2, r3]
 800eae6:	22c8      	movs	r2, #200	; 0xc8
 800eae8:	5c9a      	ldrb	r2, [r3, r2]
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	711a      	strb	r2, [r3, #4]
            break;
 800eaee:	e11f      	b.n	800ed30 <LoRaMacMibGetRequestConfirm+0x280>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = MacCtx.NvmCtx->NetworkActivation;
 800eaf0:	4a94      	ldr	r2, [pc, #592]	; (800ed44 <LoRaMacMibGetRequestConfirm+0x294>)
 800eaf2:	238e      	movs	r3, #142	; 0x8e
 800eaf4:	00db      	lsls	r3, r3, #3
 800eaf6:	58d2      	ldr	r2, [r2, r3]
 800eaf8:	2389      	movs	r3, #137	; 0x89
 800eafa:	009b      	lsls	r3, r3, #2
 800eafc:	5cd2      	ldrb	r2, [r2, r3]
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	711a      	strb	r2, [r3, #4]
            break;
 800eb02:	e115      	b.n	800ed30 <LoRaMacMibGetRequestConfirm+0x280>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = MacCtx.NvmCtx->AdrCtrlOn;
 800eb04:	4a8f      	ldr	r2, [pc, #572]	; (800ed44 <LoRaMacMibGetRequestConfirm+0x294>)
 800eb06:	238e      	movs	r3, #142	; 0x8e
 800eb08:	00db      	lsls	r3, r3, #3
 800eb0a:	58d3      	ldr	r3, [r2, r3]
 800eb0c:	22ca      	movs	r2, #202	; 0xca
 800eb0e:	5c9a      	ldrb	r2, [r3, r2]
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	711a      	strb	r2, [r3, #4]
            break;
 800eb14:	e10c      	b.n	800ed30 <LoRaMacMibGetRequestConfirm+0x280>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = MacCtx.NvmCtx->NetID;
 800eb16:	4a8b      	ldr	r2, [pc, #556]	; (800ed44 <LoRaMacMibGetRequestConfirm+0x294>)
 800eb18:	238e      	movs	r3, #142	; 0x8e
 800eb1a:	00db      	lsls	r3, r3, #3
 800eb1c:	58d3      	ldr	r3, [r2, r3]
 800eb1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	605a      	str	r2, [r3, #4]
            break;
 800eb24:	e104      	b.n	800ed30 <LoRaMacMibGetRequestConfirm+0x280>
        }
        case MIB_DEV_ADDR:
        {
            mibGet->Param.DevAddr = MacCtx.NvmCtx->DevAddr;
 800eb26:	4a87      	ldr	r2, [pc, #540]	; (800ed44 <LoRaMacMibGetRequestConfirm+0x294>)
 800eb28:	238e      	movs	r3, #142	; 0x8e
 800eb2a:	00db      	lsls	r3, r3, #3
 800eb2c:	58d3      	ldr	r3, [r2, r3]
 800eb2e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	605a      	str	r2, [r3, #4]
            break;
 800eb34:	e0fc      	b.n	800ed30 <LoRaMacMibGetRequestConfirm+0x280>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = MacCtx.NvmCtx->PublicNetwork;
 800eb36:	4a83      	ldr	r2, [pc, #524]	; (800ed44 <LoRaMacMibGetRequestConfirm+0x294>)
 800eb38:	238e      	movs	r3, #142	; 0x8e
 800eb3a:	00db      	lsls	r3, r3, #3
 800eb3c:	58d3      	ldr	r3, [r2, r3]
 800eb3e:	22c9      	movs	r2, #201	; 0xc9
 800eb40:	5c9a      	ldrb	r2, [r3, r2]
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	711a      	strb	r2, [r3, #4]
            break;
 800eb46:	e0f3      	b.n	800ed30 <LoRaMacMibGetRequestConfirm+0x280>
        }
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 800eb48:	4a7e      	ldr	r2, [pc, #504]	; (800ed44 <LoRaMacMibGetRequestConfirm+0x294>)
 800eb4a:	238e      	movs	r3, #142	; 0x8e
 800eb4c:	00db      	lsls	r3, r3, #3
 800eb4e:	58d2      	ldr	r2, [r2, r3]
 800eb50:	2316      	movs	r3, #22
 800eb52:	33ff      	adds	r3, #255	; 0xff
 800eb54:	5cd2      	ldrb	r2, [r2, r3]
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	711a      	strb	r2, [r3, #4]
            break;
 800eb5a:	e0e9      	b.n	800ed30 <LoRaMacMibGetRequestConfirm+0x280>
        }
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 800eb5c:	2110      	movs	r1, #16
 800eb5e:	187b      	adds	r3, r7, r1
 800eb60:	221c      	movs	r2, #28
 800eb62:	701a      	strb	r2, [r3, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800eb64:	4a77      	ldr	r2, [pc, #476]	; (800ed44 <LoRaMacMibGetRequestConfirm+0x294>)
 800eb66:	238e      	movs	r3, #142	; 0x8e
 800eb68:	00db      	lsls	r3, r3, #3
 800eb6a:	58d3      	ldr	r3, [r2, r3]
 800eb6c:	781b      	ldrb	r3, [r3, #0]
 800eb6e:	187a      	adds	r2, r7, r1
 800eb70:	0011      	movs	r1, r2
 800eb72:	0018      	movs	r0, r3
 800eb74:	f004 f97f 	bl	8012e76 <RegionGetPhyParam>
 800eb78:	0003      	movs	r3, r0
 800eb7a:	001a      	movs	r2, r3
 800eb7c:	210c      	movs	r1, #12
 800eb7e:	187b      	adds	r3, r7, r1
 800eb80:	601a      	str	r2, [r3, #0]

            mibGet->Param.ChannelList = phyParam.Channels;
 800eb82:	187b      	adds	r3, r7, r1
 800eb84:	681a      	ldr	r2, [r3, #0]
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	605a      	str	r2, [r3, #4]
            break;
 800eb8a:	e0d1      	b.n	800ed30 <LoRaMacMibGetRequestConfirm+0x280>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = MacCtx.NvmCtx->MacParams.Rx2Channel;
 800eb8c:	4a6d      	ldr	r2, [pc, #436]	; (800ed44 <LoRaMacMibGetRequestConfirm+0x294>)
 800eb8e:	238e      	movs	r3, #142	; 0x8e
 800eb90:	00db      	lsls	r3, r3, #3
 800eb92:	58d2      	ldr	r2, [r2, r3]
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	21f8      	movs	r1, #248	; 0xf8
 800eb98:	3304      	adds	r3, #4
 800eb9a:	1852      	adds	r2, r2, r1
 800eb9c:	ca03      	ldmia	r2!, {r0, r1}
 800eb9e:	c303      	stmia	r3!, {r0, r1}
            break;
 800eba0:	e0c6      	b.n	800ed30 <LoRaMacMibGetRequestConfirm+0x280>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel;
 800eba2:	4a68      	ldr	r2, [pc, #416]	; (800ed44 <LoRaMacMibGetRequestConfirm+0x294>)
 800eba4:	238e      	movs	r3, #142	; 0x8e
 800eba6:	00db      	lsls	r3, r3, #3
 800eba8:	58d2      	ldr	r2, [r2, r3]
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	3304      	adds	r3, #4
 800ebae:	3228      	adds	r2, #40	; 0x28
 800ebb0:	ca03      	ldmia	r2!, {r0, r1}
 800ebb2:	c303      	stmia	r3!, {r0, r1}
            break;
 800ebb4:	e0bc      	b.n	800ed30 <LoRaMacMibGetRequestConfirm+0x280>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 800ebb6:	2110      	movs	r1, #16
 800ebb8:	187b      	adds	r3, r7, r1
 800ebba:	221a      	movs	r2, #26
 800ebbc:	701a      	strb	r2, [r3, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800ebbe:	4a61      	ldr	r2, [pc, #388]	; (800ed44 <LoRaMacMibGetRequestConfirm+0x294>)
 800ebc0:	238e      	movs	r3, #142	; 0x8e
 800ebc2:	00db      	lsls	r3, r3, #3
 800ebc4:	58d3      	ldr	r3, [r2, r3]
 800ebc6:	781b      	ldrb	r3, [r3, #0]
 800ebc8:	187a      	adds	r2, r7, r1
 800ebca:	0011      	movs	r1, r2
 800ebcc:	0018      	movs	r0, r3
 800ebce:	f004 f952 	bl	8012e76 <RegionGetPhyParam>
 800ebd2:	0003      	movs	r3, r0
 800ebd4:	001a      	movs	r2, r3
 800ebd6:	210c      	movs	r1, #12
 800ebd8:	187b      	adds	r3, r7, r1
 800ebda:	601a      	str	r2, [r3, #0]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 800ebdc:	187b      	adds	r3, r7, r1
 800ebde:	681a      	ldr	r2, [r3, #0]
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	605a      	str	r2, [r3, #4]
            break;
 800ebe4:	e0a4      	b.n	800ed30 <LoRaMacMibGetRequestConfirm+0x280>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 800ebe6:	2110      	movs	r1, #16
 800ebe8:	187b      	adds	r3, r7, r1
 800ebea:	2219      	movs	r2, #25
 800ebec:	701a      	strb	r2, [r3, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800ebee:	4a55      	ldr	r2, [pc, #340]	; (800ed44 <LoRaMacMibGetRequestConfirm+0x294>)
 800ebf0:	238e      	movs	r3, #142	; 0x8e
 800ebf2:	00db      	lsls	r3, r3, #3
 800ebf4:	58d3      	ldr	r3, [r2, r3]
 800ebf6:	781b      	ldrb	r3, [r3, #0]
 800ebf8:	187a      	adds	r2, r7, r1
 800ebfa:	0011      	movs	r1, r2
 800ebfc:	0018      	movs	r0, r3
 800ebfe:	f004 f93a 	bl	8012e76 <RegionGetPhyParam>
 800ec02:	0003      	movs	r3, r0
 800ec04:	001a      	movs	r2, r3
 800ec06:	210c      	movs	r1, #12
 800ec08:	187b      	adds	r3, r7, r1
 800ec0a:	601a      	str	r2, [r3, #0]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 800ec0c:	187b      	adds	r3, r7, r1
 800ec0e:	681a      	ldr	r2, [r3, #0]
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	605a      	str	r2, [r3, #4]
            break;
 800ec14:	e08c      	b.n	800ed30 <LoRaMacMibGetRequestConfirm+0x280>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = MacCtx.NvmCtx->MacParams.ChannelsNbTrans;
 800ec16:	4a4b      	ldr	r2, [pc, #300]	; (800ed44 <LoRaMacMibGetRequestConfirm+0x294>)
 800ec18:	238e      	movs	r3, #142	; 0x8e
 800ec1a:	00db      	lsls	r3, r3, #3
 800ec1c:	58d3      	ldr	r3, [r2, r3]
 800ec1e:	22f4      	movs	r2, #244	; 0xf4
 800ec20:	5c9a      	ldrb	r2, [r3, r2]
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	711a      	strb	r2, [r3, #4]
            break;
 800ec26:	e083      	b.n	800ed30 <LoRaMacMibGetRequestConfirm+0x280>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = MacCtx.NvmCtx->MacParams.MaxRxWindow;
 800ec28:	4a46      	ldr	r2, [pc, #280]	; (800ed44 <LoRaMacMibGetRequestConfirm+0x294>)
 800ec2a:	238e      	movs	r3, #142	; 0x8e
 800ec2c:	00db      	lsls	r3, r3, #3
 800ec2e:	58d3      	ldr	r3, [r2, r3]
 800ec30:	22e0      	movs	r2, #224	; 0xe0
 800ec32:	589a      	ldr	r2, [r3, r2]
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	605a      	str	r2, [r3, #4]
            break;
 800ec38:	e07a      	b.n	800ed30 <LoRaMacMibGetRequestConfirm+0x280>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = MacCtx.NvmCtx->MacParams.ReceiveDelay1;
 800ec3a:	4a42      	ldr	r2, [pc, #264]	; (800ed44 <LoRaMacMibGetRequestConfirm+0x294>)
 800ec3c:	238e      	movs	r3, #142	; 0x8e
 800ec3e:	00db      	lsls	r3, r3, #3
 800ec40:	58d3      	ldr	r3, [r2, r3]
 800ec42:	22e4      	movs	r2, #228	; 0xe4
 800ec44:	589a      	ldr	r2, [r3, r2]
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	605a      	str	r2, [r3, #4]
            break;
 800ec4a:	e071      	b.n	800ed30 <LoRaMacMibGetRequestConfirm+0x280>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay2;
 800ec4c:	4a3d      	ldr	r2, [pc, #244]	; (800ed44 <LoRaMacMibGetRequestConfirm+0x294>)
 800ec4e:	238e      	movs	r3, #142	; 0x8e
 800ec50:	00db      	lsls	r3, r3, #3
 800ec52:	58d3      	ldr	r3, [r2, r3]
 800ec54:	22e8      	movs	r2, #232	; 0xe8
 800ec56:	589a      	ldr	r2, [r3, r2]
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	605a      	str	r2, [r3, #4]
            break;
 800ec5c:	e068      	b.n	800ed30 <LoRaMacMibGetRequestConfirm+0x280>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = MacCtx.NvmCtx->MacParams.JoinAcceptDelay1;
 800ec5e:	4a39      	ldr	r2, [pc, #228]	; (800ed44 <LoRaMacMibGetRequestConfirm+0x294>)
 800ec60:	238e      	movs	r3, #142	; 0x8e
 800ec62:	00db      	lsls	r3, r3, #3
 800ec64:	58d3      	ldr	r3, [r2, r3]
 800ec66:	22ec      	movs	r2, #236	; 0xec
 800ec68:	589a      	ldr	r2, [r3, r2]
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	605a      	str	r2, [r3, #4]
            break;
 800ec6e:	e05f      	b.n	800ed30 <LoRaMacMibGetRequestConfirm+0x280>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = MacCtx.NvmCtx->MacParams.JoinAcceptDelay2;
 800ec70:	4a34      	ldr	r2, [pc, #208]	; (800ed44 <LoRaMacMibGetRequestConfirm+0x294>)
 800ec72:	238e      	movs	r3, #142	; 0x8e
 800ec74:	00db      	lsls	r3, r3, #3
 800ec76:	58d3      	ldr	r3, [r2, r3]
 800ec78:	22f0      	movs	r2, #240	; 0xf0
 800ec7a:	589a      	ldr	r2, [r3, r2]
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	605a      	str	r2, [r3, #4]
            break;
 800ec80:	e056      	b.n	800ed30 <LoRaMacMibGetRequestConfirm+0x280>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate;
 800ec82:	4a30      	ldr	r2, [pc, #192]	; (800ed44 <LoRaMacMibGetRequestConfirm+0x294>)
 800ec84:	238e      	movs	r3, #142	; 0x8e
 800ec86:	00db      	lsls	r3, r3, #3
 800ec88:	58d3      	ldr	r3, [r2, r3]
 800ec8a:	2205      	movs	r2, #5
 800ec8c:	569a      	ldrsb	r2, [r3, r2]
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	711a      	strb	r2, [r3, #4]
            break;
 800ec92:	e04d      	b.n	800ed30 <LoRaMacMibGetRequestConfirm+0x280>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800ec94:	4a2b      	ldr	r2, [pc, #172]	; (800ed44 <LoRaMacMibGetRequestConfirm+0x294>)
 800ec96:	238e      	movs	r3, #142	; 0x8e
 800ec98:	00db      	lsls	r3, r3, #3
 800ec9a:	58d3      	ldr	r3, [r2, r3]
 800ec9c:	22d5      	movs	r2, #213	; 0xd5
 800ec9e:	569a      	ldrsb	r2, [r3, r2]
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	711a      	strb	r2, [r3, #4]
            break;
 800eca4:	e044      	b.n	800ed30 <LoRaMacMibGetRequestConfirm+0x280>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower;
 800eca6:	4a27      	ldr	r2, [pc, #156]	; (800ed44 <LoRaMacMibGetRequestConfirm+0x294>)
 800eca8:	238e      	movs	r3, #142	; 0x8e
 800ecaa:	00db      	lsls	r3, r3, #3
 800ecac:	58d3      	ldr	r3, [r2, r3]
 800ecae:	2204      	movs	r2, #4
 800ecb0:	569a      	ldrsb	r2, [r3, r2]
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	711a      	strb	r2, [r3, #4]
            break;
 800ecb6:	e03b      	b.n	800ed30 <LoRaMacMibGetRequestConfirm+0x280>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 800ecb8:	4a22      	ldr	r2, [pc, #136]	; (800ed44 <LoRaMacMibGetRequestConfirm+0x294>)
 800ecba:	238e      	movs	r3, #142	; 0x8e
 800ecbc:	00db      	lsls	r3, r3, #3
 800ecbe:	58d3      	ldr	r3, [r2, r3]
 800ecc0:	22d4      	movs	r2, #212	; 0xd4
 800ecc2:	569a      	ldrsb	r2, [r3, r2]
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	711a      	strb	r2, [r3, #4]
            break;
 800ecc8:	e032      	b.n	800ed30 <LoRaMacMibGetRequestConfirm+0x280>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = MacCtx.NvmCtx->MacParams.SystemMaxRxError;
 800ecca:	4a1e      	ldr	r2, [pc, #120]	; (800ed44 <LoRaMacMibGetRequestConfirm+0x294>)
 800eccc:	238e      	movs	r3, #142	; 0x8e
 800ecce:	00db      	lsls	r3, r3, #3
 800ecd0:	58d3      	ldr	r3, [r2, r3]
 800ecd2:	22d8      	movs	r2, #216	; 0xd8
 800ecd4:	589a      	ldr	r2, [r3, r2]
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	605a      	str	r2, [r3, #4]
            break;
 800ecda:	e029      	b.n	800ed30 <LoRaMacMibGetRequestConfirm+0x280>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = MacCtx.NvmCtx->MacParams.MinRxSymbols;
 800ecdc:	4a19      	ldr	r2, [pc, #100]	; (800ed44 <LoRaMacMibGetRequestConfirm+0x294>)
 800ecde:	238e      	movs	r3, #142	; 0x8e
 800ece0:	00db      	lsls	r3, r3, #3
 800ece2:	58d3      	ldr	r3, [r2, r3]
 800ece4:	22dc      	movs	r2, #220	; 0xdc
 800ece6:	5c9a      	ldrb	r2, [r3, r2]
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	711a      	strb	r2, [r3, #4]
            break;
 800ecec:	e020      	b.n	800ed30 <LoRaMacMibGetRequestConfirm+0x280>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 800ecee:	4a15      	ldr	r2, [pc, #84]	; (800ed44 <LoRaMacMibGetRequestConfirm+0x294>)
 800ecf0:	238e      	movs	r3, #142	; 0x8e
 800ecf2:	00db      	lsls	r3, r3, #3
 800ecf4:	58d2      	ldr	r2, [r2, r3]
 800ecf6:	2384      	movs	r3, #132	; 0x84
 800ecf8:	005b      	lsls	r3, r3, #1
 800ecfa:	58d2      	ldr	r2, [r2, r3]
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	605a      	str	r2, [r3, #4]
            break;
 800ed00:	e016      	b.n	800ed30 <LoRaMacMibGetRequestConfirm+0x280>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = GetCtxs( );
 800ed02:	f7fe ff2b 	bl	800db5c <GetCtxs>
 800ed06:	0002      	movs	r2, r0
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	605a      	str	r2, [r3, #4]
            break;
 800ed0c:	e010      	b.n	800ed30 <LoRaMacMibGetRequestConfirm+0x280>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = MacCtx.NvmCtx->MacParamsDefaults.AntennaGain;
 800ed0e:	4a0d      	ldr	r2, [pc, #52]	; (800ed44 <LoRaMacMibGetRequestConfirm+0x294>)
 800ed10:	238e      	movs	r3, #142	; 0x8e
 800ed12:	00db      	lsls	r3, r3, #3
 800ed14:	58d3      	ldr	r3, [r2, r3]
 800ed16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	605a      	str	r2, [r3, #4]
            break;
 800ed1c:	e008      	b.n	800ed30 <LoRaMacMibGetRequestConfirm+0x280>
        }
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 800ed1e:	2317      	movs	r3, #23
 800ed20:	18fc      	adds	r4, r7, r3
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	0018      	movs	r0, r3
 800ed26:	f001 f93d 	bl	800ffa4 <LoRaMacClassBMibGetRequestConfirm>
 800ed2a:	0003      	movs	r3, r0
 800ed2c:	7023      	strb	r3, [r4, #0]
            break;
 800ed2e:	46c0      	nop			; (mov r8, r8)
        }
    }
    return status;
 800ed30:	2317      	movs	r3, #23
 800ed32:	18fb      	adds	r3, r7, r3
 800ed34:	781b      	ldrb	r3, [r3, #0]
}
 800ed36:	0018      	movs	r0, r3
 800ed38:	46bd      	mov	sp, r7
 800ed3a:	b007      	add	sp, #28
 800ed3c:	bd90      	pop	{r4, r7, pc}
 800ed3e:	46c0      	nop			; (mov r8, r8)
 800ed40:	080217e8 	.word	0x080217e8
 800ed44:	20000708 	.word	0x20000708

0800ed48 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 800ed48:	b590      	push	{r4, r7, lr}
 800ed4a:	b089      	sub	sp, #36	; 0x24
 800ed4c:	af02      	add	r7, sp, #8
 800ed4e:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ed50:	2317      	movs	r3, #23
 800ed52:	18fb      	adds	r3, r7, r3
 800ed54:	2200      	movs	r2, #0
 800ed56:	701a      	strb	r2, [r3, #0]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	d102      	bne.n	800ed64 <LoRaMacMibSetRequestConfirm+0x1c>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800ed5e:	2303      	movs	r3, #3
 800ed60:	f000 fc6b 	bl	800f63a <LoRaMacMibSetRequestConfirm+0x8f2>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 800ed64:	4ad2      	ldr	r2, [pc, #840]	; (800f0b0 <LoRaMacMibSetRequestConfirm+0x368>)
 800ed66:	23d5      	movs	r3, #213	; 0xd5
 800ed68:	009b      	lsls	r3, r3, #2
 800ed6a:	58d3      	ldr	r3, [r2, r3]
 800ed6c:	2202      	movs	r2, #2
 800ed6e:	4013      	ands	r3, r2
 800ed70:	d002      	beq.n	800ed78 <LoRaMacMibSetRequestConfirm+0x30>
    {
        return LORAMAC_STATUS_BUSY;
 800ed72:	2301      	movs	r3, #1
 800ed74:	f000 fc61 	bl	800f63a <LoRaMacMibSetRequestConfirm+0x8f2>
    }

    switch( mibSet->Type )
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	781b      	ldrb	r3, [r3, #0]
 800ed7c:	2b30      	cmp	r3, #48	; 0x30
 800ed7e:	d901      	bls.n	800ed84 <LoRaMacMibSetRequestConfirm+0x3c>
 800ed80:	f000 fc1a 	bl	800f5b8 <LoRaMacMibSetRequestConfirm+0x870>
 800ed84:	009a      	lsls	r2, r3, #2
 800ed86:	4bcb      	ldr	r3, [pc, #812]	; (800f0b4 <LoRaMacMibSetRequestConfirm+0x36c>)
 800ed88:	18d3      	adds	r3, r2, r3
 800ed8a:	681b      	ldr	r3, [r3, #0]
 800ed8c:	469f      	mov	pc, r3
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	791b      	ldrb	r3, [r3, #4]
 800ed92:	2217      	movs	r2, #23
 800ed94:	18bc      	adds	r4, r7, r2
 800ed96:	0018      	movs	r0, r3
 800ed98:	f7fd f844 	bl	800be24 <SwitchClass>
 800ed9c:	0003      	movs	r3, r0
 800ed9e:	7023      	strb	r3, [r4, #0]
            break;
 800eda0:	f000 fc44 	bl	800f62c <LoRaMacMibSetRequestConfirm+0x8e4>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	791b      	ldrb	r3, [r3, #4]
 800eda8:	2b02      	cmp	r3, #2
 800edaa:	d00a      	beq.n	800edc2 <LoRaMacMibSetRequestConfirm+0x7a>
            {
                MacCtx.NvmCtx->NetworkActivation = mibSet->Param.NetworkActivation;
 800edac:	4ac0      	ldr	r2, [pc, #768]	; (800f0b0 <LoRaMacMibSetRequestConfirm+0x368>)
 800edae:	238e      	movs	r3, #142	; 0x8e
 800edb0:	00db      	lsls	r3, r3, #3
 800edb2:	58d2      	ldr	r2, [r2, r3]
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	7919      	ldrb	r1, [r3, #4]
 800edb8:	2389      	movs	r3, #137	; 0x89
 800edba:	009b      	lsls	r3, r3, #2
 800edbc:	54d1      	strb	r1, [r2, r3]
            }
            else
            {   // Do not allow to set ACTIVATION_TYPE_OTAA since the MAC will set it automatically after a successful join process.
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800edbe:	f000 fc35 	bl	800f62c <LoRaMacMibSetRequestConfirm+0x8e4>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800edc2:	2317      	movs	r3, #23
 800edc4:	18fb      	adds	r3, r7, r3
 800edc6:	2203      	movs	r2, #3
 800edc8:	701a      	strb	r2, [r3, #0]
            break;
 800edca:	f000 fc2f 	bl	800f62c <LoRaMacMibSetRequestConfirm+0x8e4>
        }
        case MIB_ADR:
        {
            MacCtx.NvmCtx->AdrCtrlOn = mibSet->Param.AdrEnable;
 800edce:	4ab8      	ldr	r2, [pc, #736]	; (800f0b0 <LoRaMacMibSetRequestConfirm+0x368>)
 800edd0:	238e      	movs	r3, #142	; 0x8e
 800edd2:	00db      	lsls	r3, r3, #3
 800edd4:	58d3      	ldr	r3, [r2, r3]
 800edd6:	687a      	ldr	r2, [r7, #4]
 800edd8:	7911      	ldrb	r1, [r2, #4]
 800edda:	22ca      	movs	r2, #202	; 0xca
 800eddc:	5499      	strb	r1, [r3, r2]
            break;
 800edde:	f000 fc25 	bl	800f62c <LoRaMacMibSetRequestConfirm+0x8e4>
        }
        case MIB_NET_ID:
        {
            MacCtx.NvmCtx->NetID = mibSet->Param.NetID;
 800ede2:	4ab3      	ldr	r2, [pc, #716]	; (800f0b0 <LoRaMacMibSetRequestConfirm+0x368>)
 800ede4:	238e      	movs	r3, #142	; 0x8e
 800ede6:	00db      	lsls	r3, r3, #3
 800ede8:	58d3      	ldr	r3, [r2, r3]
 800edea:	687a      	ldr	r2, [r7, #4]
 800edec:	6852      	ldr	r2, [r2, #4]
 800edee:	641a      	str	r2, [r3, #64]	; 0x40
            break;
 800edf0:	f000 fc1c 	bl	800f62c <LoRaMacMibSetRequestConfirm+0x8e4>
        }
        case MIB_DEV_ADDR:
        {
            MacCtx.NvmCtx->DevAddr = mibSet->Param.DevAddr;
 800edf4:	4aae      	ldr	r2, [pc, #696]	; (800f0b0 <LoRaMacMibSetRequestConfirm+0x368>)
 800edf6:	238e      	movs	r3, #142	; 0x8e
 800edf8:	00db      	lsls	r3, r3, #3
 800edfa:	58d3      	ldr	r3, [r2, r3]
 800edfc:	687a      	ldr	r2, [r7, #4]
 800edfe:	6852      	ldr	r2, [r2, #4]
 800ee00:	645a      	str	r2, [r3, #68]	; 0x44
            break;
 800ee02:	f000 fc13 	bl	800f62c <LoRaMacMibSetRequestConfirm+0x8e4>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	685b      	ldr	r3, [r3, #4]
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	d00c      	beq.n	800ee28 <LoRaMacMibSetRequestConfirm+0xe0>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	685b      	ldr	r3, [r3, #4]
 800ee12:	0019      	movs	r1, r3
 800ee14:	2000      	movs	r0, #0
 800ee16:	f002 fda9 	bl	801196c <LoRaMacCryptoSetKey>
 800ee1a:	1e03      	subs	r3, r0, #0
 800ee1c:	d101      	bne.n	800ee22 <LoRaMacMibSetRequestConfirm+0xda>
 800ee1e:	f000 fbd4 	bl	800f5ca <LoRaMacMibSetRequestConfirm+0x882>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800ee22:	2311      	movs	r3, #17
 800ee24:	f000 fc09 	bl	800f63a <LoRaMacMibSetRequestConfirm+0x8f2>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ee28:	2317      	movs	r3, #23
 800ee2a:	18fb      	adds	r3, r7, r3
 800ee2c:	2203      	movs	r2, #3
 800ee2e:	701a      	strb	r2, [r3, #0]
            }
            break;
 800ee30:	f000 fbcb 	bl	800f5ca <LoRaMacMibSetRequestConfirm+0x882>
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	685b      	ldr	r3, [r3, #4]
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d00c      	beq.n	800ee56 <LoRaMacMibSetRequestConfirm+0x10e>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	685b      	ldr	r3, [r3, #4]
 800ee40:	0019      	movs	r1, r3
 800ee42:	2001      	movs	r0, #1
 800ee44:	f002 fd92 	bl	801196c <LoRaMacCryptoSetKey>
 800ee48:	1e03      	subs	r3, r0, #0
 800ee4a:	d101      	bne.n	800ee50 <LoRaMacMibSetRequestConfirm+0x108>
 800ee4c:	f000 fbbf 	bl	800f5ce <LoRaMacMibSetRequestConfirm+0x886>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800ee50:	2311      	movs	r3, #17
 800ee52:	f000 fbf2 	bl	800f63a <LoRaMacMibSetRequestConfirm+0x8f2>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ee56:	2317      	movs	r3, #23
 800ee58:	18fb      	adds	r3, r7, r3
 800ee5a:	2203      	movs	r2, #3
 800ee5c:	701a      	strb	r2, [r3, #0]
            }
            break;
 800ee5e:	f000 fbb6 	bl	800f5ce <LoRaMacMibSetRequestConfirm+0x886>
        }
        case MIB_J_S_INT_KEY:
        {
            if( mibSet->Param.JSIntKey != NULL )
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	685b      	ldr	r3, [r3, #4]
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d00c      	beq.n	800ee84 <LoRaMacMibSetRequestConfirm+0x13c>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( J_S_INT_KEY, mibSet->Param.JSIntKey ) )
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	685b      	ldr	r3, [r3, #4]
 800ee6e:	0019      	movs	r1, r3
 800ee70:	2002      	movs	r0, #2
 800ee72:	f002 fd7b 	bl	801196c <LoRaMacCryptoSetKey>
 800ee76:	1e03      	subs	r3, r0, #0
 800ee78:	d101      	bne.n	800ee7e <LoRaMacMibSetRequestConfirm+0x136>
 800ee7a:	f000 fbaa 	bl	800f5d2 <LoRaMacMibSetRequestConfirm+0x88a>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800ee7e:	2311      	movs	r3, #17
 800ee80:	f000 fbdb 	bl	800f63a <LoRaMacMibSetRequestConfirm+0x8f2>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ee84:	2317      	movs	r3, #23
 800ee86:	18fb      	adds	r3, r7, r3
 800ee88:	2203      	movs	r2, #3
 800ee8a:	701a      	strb	r2, [r3, #0]
            }
            break;
 800ee8c:	f000 fba1 	bl	800f5d2 <LoRaMacMibSetRequestConfirm+0x88a>
        }
        case MIB_J_S_ENC_KEY:
        {
            if( mibSet->Param.JSEncKey != NULL )
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	685b      	ldr	r3, [r3, #4]
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d00c      	beq.n	800eeb2 <LoRaMacMibSetRequestConfirm+0x16a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( J_S_ENC_KEY, mibSet->Param.JSEncKey ) )
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	685b      	ldr	r3, [r3, #4]
 800ee9c:	0019      	movs	r1, r3
 800ee9e:	2003      	movs	r0, #3
 800eea0:	f002 fd64 	bl	801196c <LoRaMacCryptoSetKey>
 800eea4:	1e03      	subs	r3, r0, #0
 800eea6:	d101      	bne.n	800eeac <LoRaMacMibSetRequestConfirm+0x164>
 800eea8:	f000 fb95 	bl	800f5d6 <LoRaMacMibSetRequestConfirm+0x88e>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800eeac:	2311      	movs	r3, #17
 800eeae:	f000 fbc4 	bl	800f63a <LoRaMacMibSetRequestConfirm+0x8f2>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800eeb2:	2317      	movs	r3, #23
 800eeb4:	18fb      	adds	r3, r7, r3
 800eeb6:	2203      	movs	r2, #3
 800eeb8:	701a      	strb	r2, [r3, #0]
            }
            break;
 800eeba:	f000 fb8c 	bl	800f5d6 <LoRaMacMibSetRequestConfirm+0x88e>
        }
        case MIB_F_NWK_S_INT_KEY:
        {
            if( mibSet->Param.FNwkSIntKey != NULL )
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	685b      	ldr	r3, [r3, #4]
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	d00c      	beq.n	800eee0 <LoRaMacMibSetRequestConfirm+0x198>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( F_NWK_S_INT_KEY, mibSet->Param.FNwkSIntKey ) )
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	685b      	ldr	r3, [r3, #4]
 800eeca:	0019      	movs	r1, r3
 800eecc:	2004      	movs	r0, #4
 800eece:	f002 fd4d 	bl	801196c <LoRaMacCryptoSetKey>
 800eed2:	1e03      	subs	r3, r0, #0
 800eed4:	d101      	bne.n	800eeda <LoRaMacMibSetRequestConfirm+0x192>
 800eed6:	f000 fb80 	bl	800f5da <LoRaMacMibSetRequestConfirm+0x892>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800eeda:	2311      	movs	r3, #17
 800eedc:	f000 fbad 	bl	800f63a <LoRaMacMibSetRequestConfirm+0x8f2>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800eee0:	2317      	movs	r3, #23
 800eee2:	18fb      	adds	r3, r7, r3
 800eee4:	2203      	movs	r2, #3
 800eee6:	701a      	strb	r2, [r3, #0]
            }
            break;
 800eee8:	f000 fb77 	bl	800f5da <LoRaMacMibSetRequestConfirm+0x892>
        }
        case MIB_S_NWK_S_INT_KEY:
        {
            if( mibSet->Param.SNwkSIntKey != NULL )
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	685b      	ldr	r3, [r3, #4]
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	d00c      	beq.n	800ef0e <LoRaMacMibSetRequestConfirm+0x1c6>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( S_NWK_S_INT_KEY, mibSet->Param.SNwkSIntKey ) )
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	685b      	ldr	r3, [r3, #4]
 800eef8:	0019      	movs	r1, r3
 800eefa:	2005      	movs	r0, #5
 800eefc:	f002 fd36 	bl	801196c <LoRaMacCryptoSetKey>
 800ef00:	1e03      	subs	r3, r0, #0
 800ef02:	d101      	bne.n	800ef08 <LoRaMacMibSetRequestConfirm+0x1c0>
 800ef04:	f000 fb6b 	bl	800f5de <LoRaMacMibSetRequestConfirm+0x896>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800ef08:	2311      	movs	r3, #17
 800ef0a:	f000 fb96 	bl	800f63a <LoRaMacMibSetRequestConfirm+0x8f2>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ef0e:	2317      	movs	r3, #23
 800ef10:	18fb      	adds	r3, r7, r3
 800ef12:	2203      	movs	r2, #3
 800ef14:	701a      	strb	r2, [r3, #0]
            }
            break;
 800ef16:	f000 fb62 	bl	800f5de <LoRaMacMibSetRequestConfirm+0x896>
        }
        case MIB_NWK_S_ENC_KEY:
        {
            if( mibSet->Param.NwkSEncKey != NULL )
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	685b      	ldr	r3, [r3, #4]
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d00b      	beq.n	800ef3a <LoRaMacMibSetRequestConfirm+0x1f2>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_ENC_KEY, mibSet->Param.NwkSEncKey ) )
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	685b      	ldr	r3, [r3, #4]
 800ef26:	0019      	movs	r1, r3
 800ef28:	2006      	movs	r0, #6
 800ef2a:	f002 fd1f 	bl	801196c <LoRaMacCryptoSetKey>
 800ef2e:	1e03      	subs	r3, r0, #0
 800ef30:	d100      	bne.n	800ef34 <LoRaMacMibSetRequestConfirm+0x1ec>
 800ef32:	e356      	b.n	800f5e2 <LoRaMacMibSetRequestConfirm+0x89a>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800ef34:	2311      	movs	r3, #17
 800ef36:	f000 fb80 	bl	800f63a <LoRaMacMibSetRequestConfirm+0x8f2>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ef3a:	2317      	movs	r3, #23
 800ef3c:	18fb      	adds	r3, r7, r3
 800ef3e:	2203      	movs	r2, #3
 800ef40:	701a      	strb	r2, [r3, #0]
            }
            break;
 800ef42:	e34e      	b.n	800f5e2 <LoRaMacMibSetRequestConfirm+0x89a>
        }
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	685b      	ldr	r3, [r3, #4]
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	d00b      	beq.n	800ef64 <LoRaMacMibSetRequestConfirm+0x21c>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	685b      	ldr	r3, [r3, #4]
 800ef50:	0019      	movs	r1, r3
 800ef52:	2007      	movs	r0, #7
 800ef54:	f002 fd0a 	bl	801196c <LoRaMacCryptoSetKey>
 800ef58:	1e03      	subs	r3, r0, #0
 800ef5a:	d100      	bne.n	800ef5e <LoRaMacMibSetRequestConfirm+0x216>
 800ef5c:	e343      	b.n	800f5e6 <LoRaMacMibSetRequestConfirm+0x89e>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800ef5e:	2311      	movs	r3, #17
 800ef60:	f000 fb6b 	bl	800f63a <LoRaMacMibSetRequestConfirm+0x8f2>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ef64:	2317      	movs	r3, #23
 800ef66:	18fb      	adds	r3, r7, r3
 800ef68:	2203      	movs	r2, #3
 800ef6a:	701a      	strb	r2, [r3, #0]
            }
            break;
 800ef6c:	e33b      	b.n	800f5e6 <LoRaMacMibSetRequestConfirm+0x89e>
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	685b      	ldr	r3, [r3, #4]
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d00b      	beq.n	800ef8e <LoRaMacMibSetRequestConfirm+0x246>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	685b      	ldr	r3, [r3, #4]
 800ef7a:	0019      	movs	r1, r3
 800ef7c:	207f      	movs	r0, #127	; 0x7f
 800ef7e:	f002 fcf5 	bl	801196c <LoRaMacCryptoSetKey>
 800ef82:	1e03      	subs	r3, r0, #0
 800ef84:	d100      	bne.n	800ef88 <LoRaMacMibSetRequestConfirm+0x240>
 800ef86:	e330      	b.n	800f5ea <LoRaMacMibSetRequestConfirm+0x8a2>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800ef88:	2311      	movs	r3, #17
 800ef8a:	f000 fb56 	bl	800f63a <LoRaMacMibSetRequestConfirm+0x8f2>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ef8e:	2317      	movs	r3, #23
 800ef90:	18fb      	adds	r3, r7, r3
 800ef92:	2203      	movs	r2, #3
 800ef94:	701a      	strb	r2, [r3, #0]
            }
            break;
 800ef96:	e328      	b.n	800f5ea <LoRaMacMibSetRequestConfirm+0x8a2>
        }
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	685b      	ldr	r3, [r3, #4]
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	d00a      	beq.n	800efb6 <LoRaMacMibSetRequestConfirm+0x26e>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	685b      	ldr	r3, [r3, #4]
 800efa4:	0019      	movs	r1, r3
 800efa6:	2080      	movs	r0, #128	; 0x80
 800efa8:	f002 fce0 	bl	801196c <LoRaMacCryptoSetKey>
 800efac:	1e03      	subs	r3, r0, #0
 800efae:	d100      	bne.n	800efb2 <LoRaMacMibSetRequestConfirm+0x26a>
 800efb0:	e31d      	b.n	800f5ee <LoRaMacMibSetRequestConfirm+0x8a6>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800efb2:	2311      	movs	r3, #17
 800efb4:	e341      	b.n	800f63a <LoRaMacMibSetRequestConfirm+0x8f2>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800efb6:	2317      	movs	r3, #23
 800efb8:	18fb      	adds	r3, r7, r3
 800efba:	2203      	movs	r2, #3
 800efbc:	701a      	strb	r2, [r3, #0]
            }
            break;
 800efbe:	e316      	b.n	800f5ee <LoRaMacMibSetRequestConfirm+0x8a6>
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	685b      	ldr	r3, [r3, #4]
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	d00a      	beq.n	800efde <LoRaMacMibSetRequestConfirm+0x296>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	685b      	ldr	r3, [r3, #4]
 800efcc:	0019      	movs	r1, r3
 800efce:	2081      	movs	r0, #129	; 0x81
 800efd0:	f002 fccc 	bl	801196c <LoRaMacCryptoSetKey>
 800efd4:	1e03      	subs	r3, r0, #0
 800efd6:	d100      	bne.n	800efda <LoRaMacMibSetRequestConfirm+0x292>
 800efd8:	e30b      	b.n	800f5f2 <LoRaMacMibSetRequestConfirm+0x8aa>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800efda:	2311      	movs	r3, #17
 800efdc:	e32d      	b.n	800f63a <LoRaMacMibSetRequestConfirm+0x8f2>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800efde:	2317      	movs	r3, #23
 800efe0:	18fb      	adds	r3, r7, r3
 800efe2:	2203      	movs	r2, #3
 800efe4:	701a      	strb	r2, [r3, #0]
            }
            break;
 800efe6:	e304      	b.n	800f5f2 <LoRaMacMibSetRequestConfirm+0x8aa>
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	685b      	ldr	r3, [r3, #4]
 800efec:	2b00      	cmp	r3, #0
 800efee:	d00a      	beq.n	800f006 <LoRaMacMibSetRequestConfirm+0x2be>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	685b      	ldr	r3, [r3, #4]
 800eff4:	0019      	movs	r1, r3
 800eff6:	2082      	movs	r0, #130	; 0x82
 800eff8:	f002 fcb8 	bl	801196c <LoRaMacCryptoSetKey>
 800effc:	1e03      	subs	r3, r0, #0
 800effe:	d100      	bne.n	800f002 <LoRaMacMibSetRequestConfirm+0x2ba>
 800f000:	e2f9      	b.n	800f5f6 <LoRaMacMibSetRequestConfirm+0x8ae>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800f002:	2311      	movs	r3, #17
 800f004:	e319      	b.n	800f63a <LoRaMacMibSetRequestConfirm+0x8f2>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f006:	2317      	movs	r3, #23
 800f008:	18fb      	adds	r3, r7, r3
 800f00a:	2203      	movs	r2, #3
 800f00c:	701a      	strb	r2, [r3, #0]
            }
            break;
 800f00e:	e2f2      	b.n	800f5f6 <LoRaMacMibSetRequestConfirm+0x8ae>
        }
        case MIB_MC_KEY_1:
        {
            if( mibSet->Param.McKey1 != NULL )
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	685b      	ldr	r3, [r3, #4]
 800f014:	2b00      	cmp	r3, #0
 800f016:	d00a      	beq.n	800f02e <LoRaMacMibSetRequestConfirm+0x2e6>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_1, mibSet->Param.McKey1 ) )
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	685b      	ldr	r3, [r3, #4]
 800f01c:	0019      	movs	r1, r3
 800f01e:	2083      	movs	r0, #131	; 0x83
 800f020:	f002 fca4 	bl	801196c <LoRaMacCryptoSetKey>
 800f024:	1e03      	subs	r3, r0, #0
 800f026:	d100      	bne.n	800f02a <LoRaMacMibSetRequestConfirm+0x2e2>
 800f028:	e2e7      	b.n	800f5fa <LoRaMacMibSetRequestConfirm+0x8b2>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800f02a:	2311      	movs	r3, #17
 800f02c:	e305      	b.n	800f63a <LoRaMacMibSetRequestConfirm+0x8f2>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f02e:	2317      	movs	r3, #23
 800f030:	18fb      	adds	r3, r7, r3
 800f032:	2203      	movs	r2, #3
 800f034:	701a      	strb	r2, [r3, #0]
            }
            break;
 800f036:	e2e0      	b.n	800f5fa <LoRaMacMibSetRequestConfirm+0x8b2>
        }
        case MIB_MC_APP_S_KEY_1:
        {
            if( mibSet->Param.McAppSKey1 != NULL )
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	685b      	ldr	r3, [r3, #4]
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	d00a      	beq.n	800f056 <LoRaMacMibSetRequestConfirm+0x30e>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_1, mibSet->Param.McAppSKey1 ) )
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	685b      	ldr	r3, [r3, #4]
 800f044:	0019      	movs	r1, r3
 800f046:	2084      	movs	r0, #132	; 0x84
 800f048:	f002 fc90 	bl	801196c <LoRaMacCryptoSetKey>
 800f04c:	1e03      	subs	r3, r0, #0
 800f04e:	d100      	bne.n	800f052 <LoRaMacMibSetRequestConfirm+0x30a>
 800f050:	e2d5      	b.n	800f5fe <LoRaMacMibSetRequestConfirm+0x8b6>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800f052:	2311      	movs	r3, #17
 800f054:	e2f1      	b.n	800f63a <LoRaMacMibSetRequestConfirm+0x8f2>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f056:	2317      	movs	r3, #23
 800f058:	18fb      	adds	r3, r7, r3
 800f05a:	2203      	movs	r2, #3
 800f05c:	701a      	strb	r2, [r3, #0]
            }
            break;
 800f05e:	e2ce      	b.n	800f5fe <LoRaMacMibSetRequestConfirm+0x8b6>
        }
        case MIB_MC_NWK_S_KEY_1:
        {
            if( mibSet->Param.McNwkSKey1 != NULL )
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	685b      	ldr	r3, [r3, #4]
 800f064:	2b00      	cmp	r3, #0
 800f066:	d00a      	beq.n	800f07e <LoRaMacMibSetRequestConfirm+0x336>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_1, mibSet->Param.McNwkSKey1 ) )
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	685b      	ldr	r3, [r3, #4]
 800f06c:	0019      	movs	r1, r3
 800f06e:	2085      	movs	r0, #133	; 0x85
 800f070:	f002 fc7c 	bl	801196c <LoRaMacCryptoSetKey>
 800f074:	1e03      	subs	r3, r0, #0
 800f076:	d100      	bne.n	800f07a <LoRaMacMibSetRequestConfirm+0x332>
 800f078:	e2c3      	b.n	800f602 <LoRaMacMibSetRequestConfirm+0x8ba>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800f07a:	2311      	movs	r3, #17
 800f07c:	e2dd      	b.n	800f63a <LoRaMacMibSetRequestConfirm+0x8f2>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f07e:	2317      	movs	r3, #23
 800f080:	18fb      	adds	r3, r7, r3
 800f082:	2203      	movs	r2, #3
 800f084:	701a      	strb	r2, [r3, #0]
            }
            break;
 800f086:	e2bc      	b.n	800f602 <LoRaMacMibSetRequestConfirm+0x8ba>
        }
        case MIB_MC_KEY_2:
        {
            if( mibSet->Param.McKey2 != NULL )
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	685b      	ldr	r3, [r3, #4]
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d00a      	beq.n	800f0a6 <LoRaMacMibSetRequestConfirm+0x35e>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_2, mibSet->Param.McKey2 ) )
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	685b      	ldr	r3, [r3, #4]
 800f094:	0019      	movs	r1, r3
 800f096:	2086      	movs	r0, #134	; 0x86
 800f098:	f002 fc68 	bl	801196c <LoRaMacCryptoSetKey>
 800f09c:	1e03      	subs	r3, r0, #0
 800f09e:	d100      	bne.n	800f0a2 <LoRaMacMibSetRequestConfirm+0x35a>
 800f0a0:	e2b1      	b.n	800f606 <LoRaMacMibSetRequestConfirm+0x8be>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800f0a2:	2311      	movs	r3, #17
 800f0a4:	e2c9      	b.n	800f63a <LoRaMacMibSetRequestConfirm+0x8f2>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f0a6:	2317      	movs	r3, #23
 800f0a8:	18fb      	adds	r3, r7, r3
 800f0aa:	2203      	movs	r2, #3
 800f0ac:	701a      	strb	r2, [r3, #0]
            }
            break;
 800f0ae:	e2aa      	b.n	800f606 <LoRaMacMibSetRequestConfirm+0x8be>
 800f0b0:	20000708 	.word	0x20000708
 800f0b4:	080218a8 	.word	0x080218a8
        }
        case MIB_MC_APP_S_KEY_2:
        {
            if( mibSet->Param.McAppSKey2 != NULL )
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	685b      	ldr	r3, [r3, #4]
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d00a      	beq.n	800f0d6 <LoRaMacMibSetRequestConfirm+0x38e>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_2, mibSet->Param.McAppSKey2 ) )
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	685b      	ldr	r3, [r3, #4]
 800f0c4:	0019      	movs	r1, r3
 800f0c6:	2087      	movs	r0, #135	; 0x87
 800f0c8:	f002 fc50 	bl	801196c <LoRaMacCryptoSetKey>
 800f0cc:	1e03      	subs	r3, r0, #0
 800f0ce:	d100      	bne.n	800f0d2 <LoRaMacMibSetRequestConfirm+0x38a>
 800f0d0:	e29b      	b.n	800f60a <LoRaMacMibSetRequestConfirm+0x8c2>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800f0d2:	2311      	movs	r3, #17
 800f0d4:	e2b1      	b.n	800f63a <LoRaMacMibSetRequestConfirm+0x8f2>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f0d6:	2317      	movs	r3, #23
 800f0d8:	18fb      	adds	r3, r7, r3
 800f0da:	2203      	movs	r2, #3
 800f0dc:	701a      	strb	r2, [r3, #0]
            }
            break;
 800f0de:	e294      	b.n	800f60a <LoRaMacMibSetRequestConfirm+0x8c2>
        }
        case MIB_MC_NWK_S_KEY_2:
        {
            if( mibSet->Param.McNwkSKey2 != NULL )
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	685b      	ldr	r3, [r3, #4]
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	d00a      	beq.n	800f0fe <LoRaMacMibSetRequestConfirm+0x3b6>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_2, mibSet->Param.McNwkSKey2 ) )
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	685b      	ldr	r3, [r3, #4]
 800f0ec:	0019      	movs	r1, r3
 800f0ee:	2088      	movs	r0, #136	; 0x88
 800f0f0:	f002 fc3c 	bl	801196c <LoRaMacCryptoSetKey>
 800f0f4:	1e03      	subs	r3, r0, #0
 800f0f6:	d100      	bne.n	800f0fa <LoRaMacMibSetRequestConfirm+0x3b2>
 800f0f8:	e289      	b.n	800f60e <LoRaMacMibSetRequestConfirm+0x8c6>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800f0fa:	2311      	movs	r3, #17
 800f0fc:	e29d      	b.n	800f63a <LoRaMacMibSetRequestConfirm+0x8f2>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f0fe:	2317      	movs	r3, #23
 800f100:	18fb      	adds	r3, r7, r3
 800f102:	2203      	movs	r2, #3
 800f104:	701a      	strb	r2, [r3, #0]
            }
            break;
 800f106:	e282      	b.n	800f60e <LoRaMacMibSetRequestConfirm+0x8c6>
        }
        case MIB_MC_KEY_3:
        {
            if( mibSet->Param.McKey3 != NULL )
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	685b      	ldr	r3, [r3, #4]
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d00a      	beq.n	800f126 <LoRaMacMibSetRequestConfirm+0x3de>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_3, mibSet->Param.McKey3 ) )
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	685b      	ldr	r3, [r3, #4]
 800f114:	0019      	movs	r1, r3
 800f116:	2089      	movs	r0, #137	; 0x89
 800f118:	f002 fc28 	bl	801196c <LoRaMacCryptoSetKey>
 800f11c:	1e03      	subs	r3, r0, #0
 800f11e:	d100      	bne.n	800f122 <LoRaMacMibSetRequestConfirm+0x3da>
 800f120:	e277      	b.n	800f612 <LoRaMacMibSetRequestConfirm+0x8ca>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800f122:	2311      	movs	r3, #17
 800f124:	e289      	b.n	800f63a <LoRaMacMibSetRequestConfirm+0x8f2>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f126:	2317      	movs	r3, #23
 800f128:	18fb      	adds	r3, r7, r3
 800f12a:	2203      	movs	r2, #3
 800f12c:	701a      	strb	r2, [r3, #0]
            }
            break;
 800f12e:	e270      	b.n	800f612 <LoRaMacMibSetRequestConfirm+0x8ca>
        }
        case MIB_MC_APP_S_KEY_3:
        {
            if( mibSet->Param.McAppSKey3 != NULL )
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	685b      	ldr	r3, [r3, #4]
 800f134:	2b00      	cmp	r3, #0
 800f136:	d00a      	beq.n	800f14e <LoRaMacMibSetRequestConfirm+0x406>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_3, mibSet->Param.McAppSKey3 ) )
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	685b      	ldr	r3, [r3, #4]
 800f13c:	0019      	movs	r1, r3
 800f13e:	208a      	movs	r0, #138	; 0x8a
 800f140:	f002 fc14 	bl	801196c <LoRaMacCryptoSetKey>
 800f144:	1e03      	subs	r3, r0, #0
 800f146:	d100      	bne.n	800f14a <LoRaMacMibSetRequestConfirm+0x402>
 800f148:	e265      	b.n	800f616 <LoRaMacMibSetRequestConfirm+0x8ce>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800f14a:	2311      	movs	r3, #17
 800f14c:	e275      	b.n	800f63a <LoRaMacMibSetRequestConfirm+0x8f2>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f14e:	2317      	movs	r3, #23
 800f150:	18fb      	adds	r3, r7, r3
 800f152:	2203      	movs	r2, #3
 800f154:	701a      	strb	r2, [r3, #0]
            }
            break;
 800f156:	e25e      	b.n	800f616 <LoRaMacMibSetRequestConfirm+0x8ce>
        }
        case MIB_MC_NWK_S_KEY_3:
        {
            if( mibSet->Param.McNwkSKey3 != NULL )
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	685b      	ldr	r3, [r3, #4]
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d00a      	beq.n	800f176 <LoRaMacMibSetRequestConfirm+0x42e>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_3, mibSet->Param.McNwkSKey3 ) )
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	685b      	ldr	r3, [r3, #4]
 800f164:	0019      	movs	r1, r3
 800f166:	208b      	movs	r0, #139	; 0x8b
 800f168:	f002 fc00 	bl	801196c <LoRaMacCryptoSetKey>
 800f16c:	1e03      	subs	r3, r0, #0
 800f16e:	d100      	bne.n	800f172 <LoRaMacMibSetRequestConfirm+0x42a>
 800f170:	e253      	b.n	800f61a <LoRaMacMibSetRequestConfirm+0x8d2>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800f172:	2311      	movs	r3, #17
 800f174:	e261      	b.n	800f63a <LoRaMacMibSetRequestConfirm+0x8f2>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f176:	2317      	movs	r3, #23
 800f178:	18fb      	adds	r3, r7, r3
 800f17a:	2203      	movs	r2, #3
 800f17c:	701a      	strb	r2, [r3, #0]
            }
            break;
 800f17e:	e24c      	b.n	800f61a <LoRaMacMibSetRequestConfirm+0x8d2>
        }
        case MIB_PUBLIC_NETWORK:
        {
            MacCtx.NvmCtx->PublicNetwork = mibSet->Param.EnablePublicNetwork;
 800f180:	4adb      	ldr	r2, [pc, #876]	; (800f4f0 <LoRaMacMibSetRequestConfirm+0x7a8>)
 800f182:	238e      	movs	r3, #142	; 0x8e
 800f184:	00db      	lsls	r3, r3, #3
 800f186:	58d3      	ldr	r3, [r2, r3]
 800f188:	687a      	ldr	r2, [r7, #4]
 800f18a:	7911      	ldrb	r1, [r2, #4]
 800f18c:	22c9      	movs	r2, #201	; 0xc9
 800f18e:	5499      	strb	r1, [r3, r2]
            Radio.SetPublicNetwork( MacCtx.NvmCtx->PublicNetwork );
 800f190:	4bd8      	ldr	r3, [pc, #864]	; (800f4f4 <LoRaMacMibSetRequestConfirm+0x7ac>)
 800f192:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f194:	49d6      	ldr	r1, [pc, #856]	; (800f4f0 <LoRaMacMibSetRequestConfirm+0x7a8>)
 800f196:	228e      	movs	r2, #142	; 0x8e
 800f198:	00d2      	lsls	r2, r2, #3
 800f19a:	588a      	ldr	r2, [r1, r2]
 800f19c:	21c9      	movs	r1, #201	; 0xc9
 800f19e:	5c52      	ldrb	r2, [r2, r1]
 800f1a0:	0010      	movs	r0, r2
 800f1a2:	4798      	blx	r3
            break;
 800f1a4:	e242      	b.n	800f62c <LoRaMacMibSetRequestConfirm+0x8e4>
        }
        case MIB_REPEATER_SUPPORT:
        {
            MacCtx.NvmCtx->RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 800f1a6:	4ad2      	ldr	r2, [pc, #840]	; (800f4f0 <LoRaMacMibSetRequestConfirm+0x7a8>)
 800f1a8:	238e      	movs	r3, #142	; 0x8e
 800f1aa:	00db      	lsls	r3, r3, #3
 800f1ac:	58d2      	ldr	r2, [r2, r3]
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	7919      	ldrb	r1, [r3, #4]
 800f1b2:	2316      	movs	r3, #22
 800f1b4:	33ff      	adds	r3, #255	; 0xff
 800f1b6:	54d1      	strb	r1, [r2, r3]
            break;
 800f1b8:	e238      	b.n	800f62c <LoRaMacMibSetRequestConfirm+0x8e4>
        }
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	7a1b      	ldrb	r3, [r3, #8]
 800f1be:	b25a      	sxtb	r2, r3
 800f1c0:	2108      	movs	r1, #8
 800f1c2:	187b      	adds	r3, r7, r1
 800f1c4:	701a      	strb	r2, [r3, #0]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800f1c6:	4aca      	ldr	r2, [pc, #808]	; (800f4f0 <LoRaMacMibSetRequestConfirm+0x7a8>)
 800f1c8:	238e      	movs	r3, #142	; 0x8e
 800f1ca:	00db      	lsls	r3, r3, #3
 800f1cc:	58d2      	ldr	r2, [r2, r3]
 800f1ce:	2302      	movs	r3, #2
 800f1d0:	33ff      	adds	r3, #255	; 0xff
 800f1d2:	5cd2      	ldrb	r2, [r2, r3]
 800f1d4:	187b      	adds	r3, r7, r1
 800f1d6:	705a      	strb	r2, [r3, #1]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 800f1d8:	4ac5      	ldr	r2, [pc, #788]	; (800f4f0 <LoRaMacMibSetRequestConfirm+0x7a8>)
 800f1da:	238e      	movs	r3, #142	; 0x8e
 800f1dc:	00db      	lsls	r3, r3, #3
 800f1de:	58d3      	ldr	r3, [r2, r3]
 800f1e0:	781b      	ldrb	r3, [r3, #0]
 800f1e2:	1879      	adds	r1, r7, r1
 800f1e4:	2206      	movs	r2, #6
 800f1e6:	0018      	movs	r0, r3
 800f1e8:	f003 feac 	bl	8012f44 <RegionVerify>
 800f1ec:	1e03      	subs	r3, r0, #0
 800f1ee:	d040      	beq.n	800f272 <LoRaMacMibSetRequestConfirm+0x52a>
            {
                MacCtx.NvmCtx->MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 800f1f0:	4abf      	ldr	r2, [pc, #764]	; (800f4f0 <LoRaMacMibSetRequestConfirm+0x7a8>)
 800f1f2:	238e      	movs	r3, #142	; 0x8e
 800f1f4:	00db      	lsls	r3, r3, #3
 800f1f6:	58d3      	ldr	r3, [r2, r3]
 800f1f8:	21f8      	movs	r1, #248	; 0xf8
 800f1fa:	687a      	ldr	r2, [r7, #4]
 800f1fc:	185b      	adds	r3, r3, r1
 800f1fe:	3204      	adds	r2, #4
 800f200:	ca03      	ldmia	r2!, {r0, r1}
 800f202:	c303      	stmia	r3!, {r0, r1}

                if( ( MacCtx.NvmCtx->DeviceClass == CLASS_C ) && ( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE ) )
 800f204:	4aba      	ldr	r2, [pc, #744]	; (800f4f0 <LoRaMacMibSetRequestConfirm+0x7a8>)
 800f206:	238e      	movs	r3, #142	; 0x8e
 800f208:	00db      	lsls	r3, r3, #3
 800f20a:	58d3      	ldr	r3, [r2, r3]
 800f20c:	22c8      	movs	r2, #200	; 0xc8
 800f20e:	5c9b      	ldrb	r3, [r3, r2]
 800f210:	2b02      	cmp	r3, #2
 800f212:	d000      	beq.n	800f216 <LoRaMacMibSetRequestConfirm+0x4ce>
 800f214:	e203      	b.n	800f61e <LoRaMacMibSetRequestConfirm+0x8d6>
 800f216:	4ab6      	ldr	r2, [pc, #728]	; (800f4f0 <LoRaMacMibSetRequestConfirm+0x7a8>)
 800f218:	238e      	movs	r3, #142	; 0x8e
 800f21a:	00db      	lsls	r3, r3, #3
 800f21c:	58d2      	ldr	r2, [r2, r3]
 800f21e:	2389      	movs	r3, #137	; 0x89
 800f220:	009b      	lsls	r3, r3, #2
 800f222:	5cd3      	ldrb	r3, [r2, r3]
 800f224:	2b00      	cmp	r3, #0
 800f226:	d100      	bne.n	800f22a <LoRaMacMibSetRequestConfirm+0x4e2>
 800f228:	e1f9      	b.n	800f61e <LoRaMacMibSetRequestConfirm+0x8d6>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 800f22a:	4bb2      	ldr	r3, [pc, #712]	; (800f4f4 <LoRaMacMibSetRequestConfirm+0x7ac>)
 800f22c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f22e:	4798      	blx	r3
                    // Compute Rx2 windows parameters
                    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800f230:	4aaf      	ldr	r2, [pc, #700]	; (800f4f0 <LoRaMacMibSetRequestConfirm+0x7a8>)
 800f232:	238e      	movs	r3, #142	; 0x8e
 800f234:	00db      	lsls	r3, r3, #3
 800f236:	58d3      	ldr	r3, [r2, r3]
 800f238:	7818      	ldrb	r0, [r3, #0]
                                                     MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate,
 800f23a:	4aad      	ldr	r2, [pc, #692]	; (800f4f0 <LoRaMacMibSetRequestConfirm+0x7a8>)
 800f23c:	238e      	movs	r3, #142	; 0x8e
 800f23e:	00db      	lsls	r3, r3, #3
 800f240:	58d3      	ldr	r3, [r2, r3]
 800f242:	22fc      	movs	r2, #252	; 0xfc
 800f244:	5c9b      	ldrb	r3, [r3, r2]
                    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800f246:	b259      	sxtb	r1, r3
                                                     MacCtx.NvmCtx->MacParams.MinRxSymbols,
 800f248:	4aa9      	ldr	r2, [pc, #676]	; (800f4f0 <LoRaMacMibSetRequestConfirm+0x7a8>)
 800f24a:	238e      	movs	r3, #142	; 0x8e
 800f24c:	00db      	lsls	r3, r3, #3
 800f24e:	58d3      	ldr	r3, [r2, r3]
                    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800f250:	22dc      	movs	r2, #220	; 0xdc
 800f252:	5c9c      	ldrb	r4, [r3, r2]
                                                     MacCtx.NvmCtx->MacParams.SystemMaxRxError,
 800f254:	4aa6      	ldr	r2, [pc, #664]	; (800f4f0 <LoRaMacMibSetRequestConfirm+0x7a8>)
 800f256:	238e      	movs	r3, #142	; 0x8e
 800f258:	00db      	lsls	r3, r3, #3
 800f25a:	58d3      	ldr	r3, [r2, r3]
                    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800f25c:	22d8      	movs	r2, #216	; 0xd8
 800f25e:	589a      	ldr	r2, [r3, r2]
 800f260:	4ba5      	ldr	r3, [pc, #660]	; (800f4f8 <LoRaMacMibSetRequestConfirm+0x7b0>)
 800f262:	9300      	str	r3, [sp, #0]
 800f264:	0013      	movs	r3, r2
 800f266:	0022      	movs	r2, r4
 800f268:	f003 feb4 	bl	8012fd4 <RegionComputeRxWindowParameters>
                                                     &MacCtx.RxWindow2Config );
                    OpenContinuousRx2Window( );
 800f26c:	f7fe f9ce 	bl	800d60c <OpenContinuousRx2Window>
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800f270:	e1d5      	b.n	800f61e <LoRaMacMibSetRequestConfirm+0x8d6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f272:	2317      	movs	r3, #23
 800f274:	18fb      	adds	r3, r7, r3
 800f276:	2203      	movs	r2, #3
 800f278:	701a      	strb	r2, [r3, #0]
            break;
 800f27a:	e1d0      	b.n	800f61e <LoRaMacMibSetRequestConfirm+0x8d6>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	7a1b      	ldrb	r3, [r3, #8]
 800f280:	b25a      	sxtb	r2, r3
 800f282:	2108      	movs	r1, #8
 800f284:	187b      	adds	r3, r7, r1
 800f286:	701a      	strb	r2, [r3, #0]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800f288:	4a99      	ldr	r2, [pc, #612]	; (800f4f0 <LoRaMacMibSetRequestConfirm+0x7a8>)
 800f28a:	238e      	movs	r3, #142	; 0x8e
 800f28c:	00db      	lsls	r3, r3, #3
 800f28e:	58d2      	ldr	r2, [r2, r3]
 800f290:	2302      	movs	r3, #2
 800f292:	33ff      	adds	r3, #255	; 0xff
 800f294:	5cd2      	ldrb	r2, [r2, r3]
 800f296:	187b      	adds	r3, r7, r1
 800f298:	705a      	strb	r2, [r3, #1]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 800f29a:	4a95      	ldr	r2, [pc, #596]	; (800f4f0 <LoRaMacMibSetRequestConfirm+0x7a8>)
 800f29c:	238e      	movs	r3, #142	; 0x8e
 800f29e:	00db      	lsls	r3, r3, #3
 800f2a0:	58d3      	ldr	r3, [r2, r3]
 800f2a2:	781b      	ldrb	r3, [r3, #0]
 800f2a4:	1879      	adds	r1, r7, r1
 800f2a6:	2206      	movs	r2, #6
 800f2a8:	0018      	movs	r0, r3
 800f2aa:	f003 fe4b 	bl	8012f44 <RegionVerify>
 800f2ae:	1e03      	subs	r3, r0, #0
 800f2b0:	d009      	beq.n	800f2c6 <LoRaMacMibSetRequestConfirm+0x57e>
            {
                MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 800f2b2:	4a8f      	ldr	r2, [pc, #572]	; (800f4f0 <LoRaMacMibSetRequestConfirm+0x7a8>)
 800f2b4:	238e      	movs	r3, #142	; 0x8e
 800f2b6:	00db      	lsls	r3, r3, #3
 800f2b8:	58d3      	ldr	r3, [r2, r3]
 800f2ba:	687a      	ldr	r2, [r7, #4]
 800f2bc:	3328      	adds	r3, #40	; 0x28
 800f2be:	3204      	adds	r2, #4
 800f2c0:	ca03      	ldmia	r2!, {r0, r1}
 800f2c2:	c303      	stmia	r3!, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800f2c4:	e1b2      	b.n	800f62c <LoRaMacMibSetRequestConfirm+0x8e4>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f2c6:	2317      	movs	r3, #23
 800f2c8:	18fb      	adds	r3, r7, r3
 800f2ca:	2203      	movs	r2, #3
 800f2cc:	701a      	strb	r2, [r3, #0]
            break;
 800f2ce:	e1ad      	b.n	800f62c <LoRaMacMibSetRequestConfirm+0x8e4>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	685a      	ldr	r2, [r3, #4]
 800f2d4:	210c      	movs	r1, #12
 800f2d6:	187b      	adds	r3, r7, r1
 800f2d8:	601a      	str	r2, [r3, #0]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 800f2da:	187b      	adds	r3, r7, r1
 800f2dc:	2201      	movs	r2, #1
 800f2de:	711a      	strb	r2, [r3, #4]

            if( RegionChanMaskSet( MacCtx.NvmCtx->Region, &chanMaskSet ) == false )
 800f2e0:	4a83      	ldr	r2, [pc, #524]	; (800f4f0 <LoRaMacMibSetRequestConfirm+0x7a8>)
 800f2e2:	238e      	movs	r3, #142	; 0x8e
 800f2e4:	00db      	lsls	r3, r3, #3
 800f2e6:	58d3      	ldr	r3, [r2, r3]
 800f2e8:	781b      	ldrb	r3, [r3, #0]
 800f2ea:	187a      	adds	r2, r7, r1
 800f2ec:	0011      	movs	r1, r2
 800f2ee:	0018      	movs	r0, r3
 800f2f0:	f003 fe5a 	bl	8012fa8 <RegionChanMaskSet>
 800f2f4:	0003      	movs	r3, r0
 800f2f6:	001a      	movs	r2, r3
 800f2f8:	2301      	movs	r3, #1
 800f2fa:	4053      	eors	r3, r2
 800f2fc:	b2db      	uxtb	r3, r3
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	d100      	bne.n	800f304 <LoRaMacMibSetRequestConfirm+0x5bc>
 800f302:	e18e      	b.n	800f622 <LoRaMacMibSetRequestConfirm+0x8da>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f304:	2317      	movs	r3, #23
 800f306:	18fb      	adds	r3, r7, r3
 800f308:	2203      	movs	r2, #3
 800f30a:	701a      	strb	r2, [r3, #0]
            }
            break;
 800f30c:	e189      	b.n	800f622 <LoRaMacMibSetRequestConfirm+0x8da>
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	685a      	ldr	r2, [r3, #4]
 800f312:	210c      	movs	r1, #12
 800f314:	187b      	adds	r3, r7, r1
 800f316:	601a      	str	r2, [r3, #0]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 800f318:	187b      	adds	r3, r7, r1
 800f31a:	2200      	movs	r2, #0
 800f31c:	711a      	strb	r2, [r3, #4]

            if( RegionChanMaskSet( MacCtx.NvmCtx->Region, &chanMaskSet ) == false )
 800f31e:	4a74      	ldr	r2, [pc, #464]	; (800f4f0 <LoRaMacMibSetRequestConfirm+0x7a8>)
 800f320:	238e      	movs	r3, #142	; 0x8e
 800f322:	00db      	lsls	r3, r3, #3
 800f324:	58d3      	ldr	r3, [r2, r3]
 800f326:	781b      	ldrb	r3, [r3, #0]
 800f328:	187a      	adds	r2, r7, r1
 800f32a:	0011      	movs	r1, r2
 800f32c:	0018      	movs	r0, r3
 800f32e:	f003 fe3b 	bl	8012fa8 <RegionChanMaskSet>
 800f332:	0003      	movs	r3, r0
 800f334:	001a      	movs	r2, r3
 800f336:	2301      	movs	r3, #1
 800f338:	4053      	eors	r3, r2
 800f33a:	b2db      	uxtb	r3, r3
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d100      	bne.n	800f342 <LoRaMacMibSetRequestConfirm+0x5fa>
 800f340:	e171      	b.n	800f626 <LoRaMacMibSetRequestConfirm+0x8de>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f342:	2317      	movs	r3, #23
 800f344:	18fb      	adds	r3, r7, r3
 800f346:	2203      	movs	r2, #3
 800f348:	701a      	strb	r2, [r3, #0]
            }
            break;
 800f34a:	e16c      	b.n	800f626 <LoRaMacMibSetRequestConfirm+0x8de>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	791b      	ldrb	r3, [r3, #4]
 800f350:	2b00      	cmp	r3, #0
 800f352:	d00c      	beq.n	800f36e <LoRaMacMibSetRequestConfirm+0x626>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	791b      	ldrb	r3, [r3, #4]
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 800f358:	2b0f      	cmp	r3, #15
 800f35a:	d808      	bhi.n	800f36e <LoRaMacMibSetRequestConfirm+0x626>
            {
                MacCtx.NvmCtx->MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 800f35c:	4a64      	ldr	r2, [pc, #400]	; (800f4f0 <LoRaMacMibSetRequestConfirm+0x7a8>)
 800f35e:	238e      	movs	r3, #142	; 0x8e
 800f360:	00db      	lsls	r3, r3, #3
 800f362:	58d3      	ldr	r3, [r2, r3]
 800f364:	687a      	ldr	r2, [r7, #4]
 800f366:	7911      	ldrb	r1, [r2, #4]
 800f368:	22f4      	movs	r2, #244	; 0xf4
 800f36a:	5499      	strb	r1, [r3, r2]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800f36c:	e15e      	b.n	800f62c <LoRaMacMibSetRequestConfirm+0x8e4>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f36e:	2317      	movs	r3, #23
 800f370:	18fb      	adds	r3, r7, r3
 800f372:	2203      	movs	r2, #3
 800f374:	701a      	strb	r2, [r3, #0]
            break;
 800f376:	e159      	b.n	800f62c <LoRaMacMibSetRequestConfirm+0x8e4>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            MacCtx.NvmCtx->MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 800f378:	4a5d      	ldr	r2, [pc, #372]	; (800f4f0 <LoRaMacMibSetRequestConfirm+0x7a8>)
 800f37a:	238e      	movs	r3, #142	; 0x8e
 800f37c:	00db      	lsls	r3, r3, #3
 800f37e:	58d2      	ldr	r2, [r2, r3]
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	685b      	ldr	r3, [r3, #4]
 800f384:	21e0      	movs	r1, #224	; 0xe0
 800f386:	5053      	str	r3, [r2, r1]
            break;
 800f388:	e150      	b.n	800f62c <LoRaMacMibSetRequestConfirm+0x8e4>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            MacCtx.NvmCtx->MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 800f38a:	4a59      	ldr	r2, [pc, #356]	; (800f4f0 <LoRaMacMibSetRequestConfirm+0x7a8>)
 800f38c:	238e      	movs	r3, #142	; 0x8e
 800f38e:	00db      	lsls	r3, r3, #3
 800f390:	58d2      	ldr	r2, [r2, r3]
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	685b      	ldr	r3, [r3, #4]
 800f396:	21e4      	movs	r1, #228	; 0xe4
 800f398:	5053      	str	r3, [r2, r1]
            break;
 800f39a:	e147      	b.n	800f62c <LoRaMacMibSetRequestConfirm+0x8e4>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            MacCtx.NvmCtx->MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 800f39c:	4a54      	ldr	r2, [pc, #336]	; (800f4f0 <LoRaMacMibSetRequestConfirm+0x7a8>)
 800f39e:	238e      	movs	r3, #142	; 0x8e
 800f3a0:	00db      	lsls	r3, r3, #3
 800f3a2:	58d2      	ldr	r2, [r2, r3]
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	685b      	ldr	r3, [r3, #4]
 800f3a8:	21e8      	movs	r1, #232	; 0xe8
 800f3aa:	5053      	str	r3, [r2, r1]
            break;
 800f3ac:	e13e      	b.n	800f62c <LoRaMacMibSetRequestConfirm+0x8e4>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 800f3ae:	4a50      	ldr	r2, [pc, #320]	; (800f4f0 <LoRaMacMibSetRequestConfirm+0x7a8>)
 800f3b0:	238e      	movs	r3, #142	; 0x8e
 800f3b2:	00db      	lsls	r3, r3, #3
 800f3b4:	58d2      	ldr	r2, [r2, r3]
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	685b      	ldr	r3, [r3, #4]
 800f3ba:	21ec      	movs	r1, #236	; 0xec
 800f3bc:	5053      	str	r3, [r2, r1]
            break;
 800f3be:	e135      	b.n	800f62c <LoRaMacMibSetRequestConfirm+0x8e4>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 800f3c0:	4a4b      	ldr	r2, [pc, #300]	; (800f4f0 <LoRaMacMibSetRequestConfirm+0x7a8>)
 800f3c2:	238e      	movs	r3, #142	; 0x8e
 800f3c4:	00db      	lsls	r3, r3, #3
 800f3c6:	58d2      	ldr	r2, [r2, r3]
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	685b      	ldr	r3, [r3, #4]
 800f3cc:	21f0      	movs	r1, #240	; 0xf0
 800f3ce:	5053      	str	r3, [r2, r1]
            break;
 800f3d0:	e12c      	b.n	800f62c <LoRaMacMibSetRequestConfirm+0x8e4>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	2204      	movs	r2, #4
 800f3d6:	569a      	ldrsb	r2, [r3, r2]
 800f3d8:	2108      	movs	r1, #8
 800f3da:	187b      	adds	r3, r7, r1
 800f3dc:	701a      	strb	r2, [r3, #0]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DEF_TX_DR ) == true )
 800f3de:	4a44      	ldr	r2, [pc, #272]	; (800f4f0 <LoRaMacMibSetRequestConfirm+0x7a8>)
 800f3e0:	238e      	movs	r3, #142	; 0x8e
 800f3e2:	00db      	lsls	r3, r3, #3
 800f3e4:	58d3      	ldr	r3, [r2, r3]
 800f3e6:	781b      	ldrb	r3, [r3, #0]
 800f3e8:	1879      	adds	r1, r7, r1
 800f3ea:	2205      	movs	r2, #5
 800f3ec:	0018      	movs	r0, r3
 800f3ee:	f003 fda9 	bl	8012f44 <RegionVerify>
 800f3f2:	1e03      	subs	r3, r0, #0
 800f3f4:	d009      	beq.n	800f40a <LoRaMacMibSetRequestConfirm+0x6c2>
            {
                MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate = verify.DatarateParams.Datarate;
 800f3f6:	4a3e      	ldr	r2, [pc, #248]	; (800f4f0 <LoRaMacMibSetRequestConfirm+0x7a8>)
 800f3f8:	238e      	movs	r3, #142	; 0x8e
 800f3fa:	00db      	lsls	r3, r3, #3
 800f3fc:	58d3      	ldr	r3, [r2, r3]
 800f3fe:	2208      	movs	r2, #8
 800f400:	18ba      	adds	r2, r7, r2
 800f402:	7812      	ldrb	r2, [r2, #0]
 800f404:	b252      	sxtb	r2, r2
 800f406:	715a      	strb	r2, [r3, #5]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800f408:	e110      	b.n	800f62c <LoRaMacMibSetRequestConfirm+0x8e4>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f40a:	2317      	movs	r3, #23
 800f40c:	18fb      	adds	r3, r7, r3
 800f40e:	2203      	movs	r2, #3
 800f410:	701a      	strb	r2, [r3, #0]
            break;
 800f412:	e10b      	b.n	800f62c <LoRaMacMibSetRequestConfirm+0x8e4>
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	2204      	movs	r2, #4
 800f418:	569a      	ldrsb	r2, [r3, r2]
 800f41a:	2108      	movs	r1, #8
 800f41c:	187b      	adds	r3, r7, r1
 800f41e:	701a      	strb	r2, [r3, #0]
            verify.DatarateParams.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800f420:	4a33      	ldr	r2, [pc, #204]	; (800f4f0 <LoRaMacMibSetRequestConfirm+0x7a8>)
 800f422:	238e      	movs	r3, #142	; 0x8e
 800f424:	00db      	lsls	r3, r3, #3
 800f426:	58d2      	ldr	r2, [r2, r3]
 800f428:	2380      	movs	r3, #128	; 0x80
 800f42a:	005b      	lsls	r3, r3, #1
 800f42c:	5cd2      	ldrb	r2, [r2, r3]
 800f42e:	187b      	adds	r3, r7, r1
 800f430:	709a      	strb	r2, [r3, #2]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_DR ) == true )
 800f432:	4a2f      	ldr	r2, [pc, #188]	; (800f4f0 <LoRaMacMibSetRequestConfirm+0x7a8>)
 800f434:	238e      	movs	r3, #142	; 0x8e
 800f436:	00db      	lsls	r3, r3, #3
 800f438:	58d3      	ldr	r3, [r2, r3]
 800f43a:	781b      	ldrb	r3, [r3, #0]
 800f43c:	1879      	adds	r1, r7, r1
 800f43e:	2204      	movs	r2, #4
 800f440:	0018      	movs	r0, r3
 800f442:	f003 fd7f 	bl	8012f44 <RegionVerify>
 800f446:	1e03      	subs	r3, r0, #0
 800f448:	d00a      	beq.n	800f460 <LoRaMacMibSetRequestConfirm+0x718>
            {
                MacCtx.NvmCtx->MacParams.ChannelsDatarate = verify.DatarateParams.Datarate;
 800f44a:	4a29      	ldr	r2, [pc, #164]	; (800f4f0 <LoRaMacMibSetRequestConfirm+0x7a8>)
 800f44c:	238e      	movs	r3, #142	; 0x8e
 800f44e:	00db      	lsls	r3, r3, #3
 800f450:	58d3      	ldr	r3, [r2, r3]
 800f452:	2208      	movs	r2, #8
 800f454:	18ba      	adds	r2, r7, r2
 800f456:	2100      	movs	r1, #0
 800f458:	5651      	ldrsb	r1, [r2, r1]
 800f45a:	22d5      	movs	r2, #213	; 0xd5
 800f45c:	5499      	strb	r1, [r3, r2]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800f45e:	e0e5      	b.n	800f62c <LoRaMacMibSetRequestConfirm+0x8e4>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f460:	2317      	movs	r3, #23
 800f462:	18fb      	adds	r3, r7, r3
 800f464:	2203      	movs	r2, #3
 800f466:	701a      	strb	r2, [r3, #0]
            break;
 800f468:	e0e0      	b.n	800f62c <LoRaMacMibSetRequestConfirm+0x8e4>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	2204      	movs	r2, #4
 800f46e:	569a      	ldrsb	r2, [r3, r2]
 800f470:	2108      	movs	r1, #8
 800f472:	187b      	adds	r3, r7, r1
 800f474:	701a      	strb	r2, [r3, #0]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DEF_TX_POWER ) == true )
 800f476:	4a1e      	ldr	r2, [pc, #120]	; (800f4f0 <LoRaMacMibSetRequestConfirm+0x7a8>)
 800f478:	238e      	movs	r3, #142	; 0x8e
 800f47a:	00db      	lsls	r3, r3, #3
 800f47c:	58d3      	ldr	r3, [r2, r3]
 800f47e:	781b      	ldrb	r3, [r3, #0]
 800f480:	1879      	adds	r1, r7, r1
 800f482:	2209      	movs	r2, #9
 800f484:	0018      	movs	r0, r3
 800f486:	f003 fd5d 	bl	8012f44 <RegionVerify>
 800f48a:	1e03      	subs	r3, r0, #0
 800f48c:	d009      	beq.n	800f4a2 <LoRaMacMibSetRequestConfirm+0x75a>
            {
                MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower = verify.TxPower;
 800f48e:	4a18      	ldr	r2, [pc, #96]	; (800f4f0 <LoRaMacMibSetRequestConfirm+0x7a8>)
 800f490:	238e      	movs	r3, #142	; 0x8e
 800f492:	00db      	lsls	r3, r3, #3
 800f494:	58d3      	ldr	r3, [r2, r3]
 800f496:	2208      	movs	r2, #8
 800f498:	18ba      	adds	r2, r7, r2
 800f49a:	7812      	ldrb	r2, [r2, #0]
 800f49c:	b252      	sxtb	r2, r2
 800f49e:	711a      	strb	r2, [r3, #4]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800f4a0:	e0c4      	b.n	800f62c <LoRaMacMibSetRequestConfirm+0x8e4>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f4a2:	2317      	movs	r3, #23
 800f4a4:	18fb      	adds	r3, r7, r3
 800f4a6:	2203      	movs	r2, #3
 800f4a8:	701a      	strb	r2, [r3, #0]
            break;
 800f4aa:	e0bf      	b.n	800f62c <LoRaMacMibSetRequestConfirm+0x8e4>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	2204      	movs	r2, #4
 800f4b0:	569a      	ldrsb	r2, [r3, r2]
 800f4b2:	2108      	movs	r1, #8
 800f4b4:	187b      	adds	r3, r7, r1
 800f4b6:	701a      	strb	r2, [r3, #0]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_POWER ) == true )
 800f4b8:	4a0d      	ldr	r2, [pc, #52]	; (800f4f0 <LoRaMacMibSetRequestConfirm+0x7a8>)
 800f4ba:	238e      	movs	r3, #142	; 0x8e
 800f4bc:	00db      	lsls	r3, r3, #3
 800f4be:	58d3      	ldr	r3, [r2, r3]
 800f4c0:	781b      	ldrb	r3, [r3, #0]
 800f4c2:	1879      	adds	r1, r7, r1
 800f4c4:	2208      	movs	r2, #8
 800f4c6:	0018      	movs	r0, r3
 800f4c8:	f003 fd3c 	bl	8012f44 <RegionVerify>
 800f4cc:	1e03      	subs	r3, r0, #0
 800f4ce:	d00a      	beq.n	800f4e6 <LoRaMacMibSetRequestConfirm+0x79e>
            {
                MacCtx.NvmCtx->MacParams.ChannelsTxPower = verify.TxPower;
 800f4d0:	4a07      	ldr	r2, [pc, #28]	; (800f4f0 <LoRaMacMibSetRequestConfirm+0x7a8>)
 800f4d2:	238e      	movs	r3, #142	; 0x8e
 800f4d4:	00db      	lsls	r3, r3, #3
 800f4d6:	58d3      	ldr	r3, [r2, r3]
 800f4d8:	2208      	movs	r2, #8
 800f4da:	18ba      	adds	r2, r7, r2
 800f4dc:	2100      	movs	r1, #0
 800f4de:	5651      	ldrsb	r1, [r2, r1]
 800f4e0:	22d4      	movs	r2, #212	; 0xd4
 800f4e2:	5499      	strb	r1, [r3, r2]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800f4e4:	e0a2      	b.n	800f62c <LoRaMacMibSetRequestConfirm+0x8e4>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f4e6:	2317      	movs	r3, #23
 800f4e8:	18fb      	adds	r3, r7, r3
 800f4ea:	2203      	movs	r2, #3
 800f4ec:	701a      	strb	r2, [r3, #0]
            break;
 800f4ee:	e09d      	b.n	800f62c <LoRaMacMibSetRequestConfirm+0x8e4>
 800f4f0:	20000708 	.word	0x20000708
 800f4f4:	08021b54 	.word	0x08021b54
 800f4f8:	20000ae8 	.word	0x20000ae8
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            MacCtx.NvmCtx->MacParams.SystemMaxRxError = MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 800f4fc:	4a51      	ldr	r2, [pc, #324]	; (800f644 <LoRaMacMibSetRequestConfirm+0x8fc>)
 800f4fe:	238e      	movs	r3, #142	; 0x8e
 800f500:	00db      	lsls	r3, r3, #3
 800f502:	58d3      	ldr	r3, [r2, r3]
 800f504:	687a      	ldr	r2, [r7, #4]
 800f506:	6852      	ldr	r2, [r2, #4]
 800f508:	609a      	str	r2, [r3, #8]
 800f50a:	494e      	ldr	r1, [pc, #312]	; (800f644 <LoRaMacMibSetRequestConfirm+0x8fc>)
 800f50c:	228e      	movs	r2, #142	; 0x8e
 800f50e:	00d2      	lsls	r2, r2, #3
 800f510:	588a      	ldr	r2, [r1, r2]
 800f512:	689b      	ldr	r3, [r3, #8]
 800f514:	21d8      	movs	r1, #216	; 0xd8
 800f516:	5053      	str	r3, [r2, r1]
            break;
 800f518:	e088      	b.n	800f62c <LoRaMacMibSetRequestConfirm+0x8e4>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            MacCtx.NvmCtx->MacParams.MinRxSymbols = MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 800f51a:	4a4a      	ldr	r2, [pc, #296]	; (800f644 <LoRaMacMibSetRequestConfirm+0x8fc>)
 800f51c:	238e      	movs	r3, #142	; 0x8e
 800f51e:	00db      	lsls	r3, r3, #3
 800f520:	58d3      	ldr	r3, [r2, r3]
 800f522:	687a      	ldr	r2, [r7, #4]
 800f524:	7912      	ldrb	r2, [r2, #4]
 800f526:	731a      	strb	r2, [r3, #12]
 800f528:	4946      	ldr	r1, [pc, #280]	; (800f644 <LoRaMacMibSetRequestConfirm+0x8fc>)
 800f52a:	228e      	movs	r2, #142	; 0x8e
 800f52c:	00d2      	lsls	r2, r2, #3
 800f52e:	588a      	ldr	r2, [r1, r2]
 800f530:	7b19      	ldrb	r1, [r3, #12]
 800f532:	23dc      	movs	r3, #220	; 0xdc
 800f534:	54d1      	strb	r1, [r2, r3]
            break;
 800f536:	e079      	b.n	800f62c <LoRaMacMibSetRequestConfirm+0x8e4>
        }
        case MIB_ANTENNA_GAIN:
        {
            MacCtx.NvmCtx->MacParams.AntennaGain = mibSet->Param.AntennaGain;
 800f538:	4a42      	ldr	r2, [pc, #264]	; (800f644 <LoRaMacMibSetRequestConfirm+0x8fc>)
 800f53a:	238e      	movs	r3, #142	; 0x8e
 800f53c:	00db      	lsls	r3, r3, #3
 800f53e:	58d2      	ldr	r2, [r2, r3]
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	6859      	ldr	r1, [r3, #4]
 800f544:	2384      	movs	r3, #132	; 0x84
 800f546:	005b      	lsls	r3, r3, #1
 800f548:	50d1      	str	r1, [r2, r3]
            break;
 800f54a:	e06f      	b.n	800f62c <LoRaMacMibSetRequestConfirm+0x8e4>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            MacCtx.NvmCtx->MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 800f54c:	4a3d      	ldr	r2, [pc, #244]	; (800f644 <LoRaMacMibSetRequestConfirm+0x8fc>)
 800f54e:	238e      	movs	r3, #142	; 0x8e
 800f550:	00db      	lsls	r3, r3, #3
 800f552:	58d3      	ldr	r3, [r2, r3]
 800f554:	687a      	ldr	r2, [r7, #4]
 800f556:	6852      	ldr	r2, [r2, #4]
 800f558:	639a      	str	r2, [r3, #56]	; 0x38
            break;
 800f55a:	e067      	b.n	800f62c <LoRaMacMibSetRequestConfirm+0x8e4>
        }
        case MIB_NVM_CTXS:
        {
            if( mibSet->Param.Contexts != 0 )
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	685b      	ldr	r3, [r3, #4]
 800f560:	2b00      	cmp	r3, #0
 800f562:	d009      	beq.n	800f578 <LoRaMacMibSetRequestConfirm+0x830>
            {
                status = RestoreCtxs( mibSet->Param.Contexts );
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	685b      	ldr	r3, [r3, #4]
 800f568:	2217      	movs	r2, #23
 800f56a:	18bc      	adds	r4, r7, r2
 800f56c:	0018      	movs	r0, r3
 800f56e:	f7fe fb53 	bl	800dc18 <RestoreCtxs>
 800f572:	0003      	movs	r3, r0
 800f574:	7023      	strb	r3, [r4, #0]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800f576:	e059      	b.n	800f62c <LoRaMacMibSetRequestConfirm+0x8e4>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f578:	2317      	movs	r3, #23
 800f57a:	18fb      	adds	r3, r7, r3
 800f57c:	2203      	movs	r2, #3
 800f57e:	701a      	strb	r2, [r3, #0]
            break;
 800f580:	e054      	b.n	800f62c <LoRaMacMibSetRequestConfirm+0x8e4>
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	799b      	ldrb	r3, [r3, #6]
 800f586:	2b01      	cmp	r3, #1
 800f588:	d811      	bhi.n	800f5ae <LoRaMacMibSetRequestConfirm+0x866>
            {
                MacCtx.NvmCtx->Version = mibSet->Param.AbpLrWanVersion;
 800f58a:	4a2e      	ldr	r2, [pc, #184]	; (800f644 <LoRaMacMibSetRequestConfirm+0x8fc>)
 800f58c:	238e      	movs	r3, #142	; 0x8e
 800f58e:	00db      	lsls	r3, r3, #3
 800f590:	58d1      	ldr	r1, [r2, r3]
 800f592:	2388      	movs	r3, #136	; 0x88
 800f594:	009a      	lsls	r2, r3, #2
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	685b      	ldr	r3, [r3, #4]
 800f59a:	508b      	str	r3, [r1, r2]

                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	685b      	ldr	r3, [r3, #4]
 800f5a0:	0018      	movs	r0, r3
 800f5a2:	f002 f9b1 	bl	8011908 <LoRaMacCryptoSetLrWanVersion>
 800f5a6:	1e03      	subs	r3, r0, #0
 800f5a8:	d03f      	beq.n	800f62a <LoRaMacMibSetRequestConfirm+0x8e2>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800f5aa:	2311      	movs	r3, #17
 800f5ac:	e045      	b.n	800f63a <LoRaMacMibSetRequestConfirm+0x8f2>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f5ae:	2317      	movs	r3, #23
 800f5b0:	18fb      	adds	r3, r7, r3
 800f5b2:	2203      	movs	r2, #3
 800f5b4:	701a      	strb	r2, [r3, #0]
            }
            break;
 800f5b6:	e038      	b.n	800f62a <LoRaMacMibSetRequestConfirm+0x8e2>
        }
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 800f5b8:	2317      	movs	r3, #23
 800f5ba:	18fc      	adds	r4, r7, r3
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	0018      	movs	r0, r3
 800f5c0:	f000 fcf9 	bl	800ffb6 <LoRaMacMibClassBSetRequestConfirm>
 800f5c4:	0003      	movs	r3, r0
 800f5c6:	7023      	strb	r3, [r4, #0]
            break;
 800f5c8:	e030      	b.n	800f62c <LoRaMacMibSetRequestConfirm+0x8e4>
            break;
 800f5ca:	46c0      	nop			; (mov r8, r8)
 800f5cc:	e02e      	b.n	800f62c <LoRaMacMibSetRequestConfirm+0x8e4>
            break;
 800f5ce:	46c0      	nop			; (mov r8, r8)
 800f5d0:	e02c      	b.n	800f62c <LoRaMacMibSetRequestConfirm+0x8e4>
            break;
 800f5d2:	46c0      	nop			; (mov r8, r8)
 800f5d4:	e02a      	b.n	800f62c <LoRaMacMibSetRequestConfirm+0x8e4>
            break;
 800f5d6:	46c0      	nop			; (mov r8, r8)
 800f5d8:	e028      	b.n	800f62c <LoRaMacMibSetRequestConfirm+0x8e4>
            break;
 800f5da:	46c0      	nop			; (mov r8, r8)
 800f5dc:	e026      	b.n	800f62c <LoRaMacMibSetRequestConfirm+0x8e4>
            break;
 800f5de:	46c0      	nop			; (mov r8, r8)
 800f5e0:	e024      	b.n	800f62c <LoRaMacMibSetRequestConfirm+0x8e4>
            break;
 800f5e2:	46c0      	nop			; (mov r8, r8)
 800f5e4:	e022      	b.n	800f62c <LoRaMacMibSetRequestConfirm+0x8e4>
            break;
 800f5e6:	46c0      	nop			; (mov r8, r8)
 800f5e8:	e020      	b.n	800f62c <LoRaMacMibSetRequestConfirm+0x8e4>
            break;
 800f5ea:	46c0      	nop			; (mov r8, r8)
 800f5ec:	e01e      	b.n	800f62c <LoRaMacMibSetRequestConfirm+0x8e4>
            break;
 800f5ee:	46c0      	nop			; (mov r8, r8)
 800f5f0:	e01c      	b.n	800f62c <LoRaMacMibSetRequestConfirm+0x8e4>
            break;
 800f5f2:	46c0      	nop			; (mov r8, r8)
 800f5f4:	e01a      	b.n	800f62c <LoRaMacMibSetRequestConfirm+0x8e4>
            break;
 800f5f6:	46c0      	nop			; (mov r8, r8)
 800f5f8:	e018      	b.n	800f62c <LoRaMacMibSetRequestConfirm+0x8e4>
            break;
 800f5fa:	46c0      	nop			; (mov r8, r8)
 800f5fc:	e016      	b.n	800f62c <LoRaMacMibSetRequestConfirm+0x8e4>
            break;
 800f5fe:	46c0      	nop			; (mov r8, r8)
 800f600:	e014      	b.n	800f62c <LoRaMacMibSetRequestConfirm+0x8e4>
            break;
 800f602:	46c0      	nop			; (mov r8, r8)
 800f604:	e012      	b.n	800f62c <LoRaMacMibSetRequestConfirm+0x8e4>
            break;
 800f606:	46c0      	nop			; (mov r8, r8)
 800f608:	e010      	b.n	800f62c <LoRaMacMibSetRequestConfirm+0x8e4>
            break;
 800f60a:	46c0      	nop			; (mov r8, r8)
 800f60c:	e00e      	b.n	800f62c <LoRaMacMibSetRequestConfirm+0x8e4>
            break;
 800f60e:	46c0      	nop			; (mov r8, r8)
 800f610:	e00c      	b.n	800f62c <LoRaMacMibSetRequestConfirm+0x8e4>
            break;
 800f612:	46c0      	nop			; (mov r8, r8)
 800f614:	e00a      	b.n	800f62c <LoRaMacMibSetRequestConfirm+0x8e4>
            break;
 800f616:	46c0      	nop			; (mov r8, r8)
 800f618:	e008      	b.n	800f62c <LoRaMacMibSetRequestConfirm+0x8e4>
            break;
 800f61a:	46c0      	nop			; (mov r8, r8)
 800f61c:	e006      	b.n	800f62c <LoRaMacMibSetRequestConfirm+0x8e4>
            break;
 800f61e:	46c0      	nop			; (mov r8, r8)
 800f620:	e004      	b.n	800f62c <LoRaMacMibSetRequestConfirm+0x8e4>
            break;
 800f622:	46c0      	nop			; (mov r8, r8)
 800f624:	e002      	b.n	800f62c <LoRaMacMibSetRequestConfirm+0x8e4>
            break;
 800f626:	46c0      	nop			; (mov r8, r8)
 800f628:	e000      	b.n	800f62c <LoRaMacMibSetRequestConfirm+0x8e4>
            break;
 800f62a:	46c0      	nop			; (mov r8, r8)
        }
    }
    EventRegionNvmCtxChanged( );
 800f62c:	f7fe fd4a 	bl	800e0c4 <EventRegionNvmCtxChanged>
    EventMacNvmCtxChanged( );
 800f630:	f7fe fd40 	bl	800e0b4 <EventMacNvmCtxChanged>
    return status;
 800f634:	2317      	movs	r3, #23
 800f636:	18fb      	adds	r3, r7, r3
 800f638:	781b      	ldrb	r3, [r3, #0]
}
 800f63a:	0018      	movs	r0, r3
 800f63c:	46bd      	mov	sp, r7
 800f63e:	b007      	add	sp, #28
 800f640:	bd90      	pop	{r4, r7, pc}
 800f642:	46c0      	nop			; (mov r8, r8)
 800f644:	20000708 	.word	0x20000708

0800f648 <LoRaMacChannelAdd>:

LoRaMacStatus_t LoRaMacChannelAdd( uint8_t id, ChannelParams_t params )
{
 800f648:	b590      	push	{r4, r7, lr}
 800f64a:	b087      	sub	sp, #28
 800f64c:	af00      	add	r7, sp, #0
 800f64e:	0004      	movs	r4, r0
 800f650:	0038      	movs	r0, r7
 800f652:	6001      	str	r1, [r0, #0]
 800f654:	6042      	str	r2, [r0, #4]
 800f656:	6083      	str	r3, [r0, #8]
 800f658:	230f      	movs	r3, #15
 800f65a:	18fb      	adds	r3, r7, r3
 800f65c:	1c22      	adds	r2, r4, #0
 800f65e:	701a      	strb	r2, [r3, #0]
    ChannelAddParams_t channelAdd;

    // Validate if the MAC is in a correct state
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 800f660:	4a14      	ldr	r2, [pc, #80]	; (800f6b4 <LoRaMacChannelAdd+0x6c>)
 800f662:	23d5      	movs	r3, #213	; 0xd5
 800f664:	009b      	lsls	r3, r3, #2
 800f666:	58d3      	ldr	r3, [r2, r3]
 800f668:	2202      	movs	r2, #2
 800f66a:	4013      	ands	r3, r2
 800f66c:	d008      	beq.n	800f680 <LoRaMacChannelAdd+0x38>
    {
        if( ( MacCtx.MacState & LORAMAC_TX_CONFIG ) != LORAMAC_TX_CONFIG )
 800f66e:	4a11      	ldr	r2, [pc, #68]	; (800f6b4 <LoRaMacChannelAdd+0x6c>)
 800f670:	23d5      	movs	r3, #213	; 0xd5
 800f672:	009b      	lsls	r3, r3, #2
 800f674:	58d3      	ldr	r3, [r2, r3]
 800f676:	2240      	movs	r2, #64	; 0x40
 800f678:	4013      	ands	r3, r2
 800f67a:	d101      	bne.n	800f680 <LoRaMacChannelAdd+0x38>
        {
            return LORAMAC_STATUS_BUSY;
 800f67c:	2301      	movs	r3, #1
 800f67e:	e015      	b.n	800f6ac <LoRaMacChannelAdd+0x64>
        }
    }

    channelAdd.NewChannel = &params;
 800f680:	2410      	movs	r4, #16
 800f682:	193b      	adds	r3, r7, r4
 800f684:	003a      	movs	r2, r7
 800f686:	601a      	str	r2, [r3, #0]
    channelAdd.ChannelId = id;
 800f688:	193b      	adds	r3, r7, r4
 800f68a:	220f      	movs	r2, #15
 800f68c:	18ba      	adds	r2, r7, r2
 800f68e:	7812      	ldrb	r2, [r2, #0]
 800f690:	711a      	strb	r2, [r3, #4]

    EventRegionNvmCtxChanged( );
 800f692:	f7fe fd17 	bl	800e0c4 <EventRegionNvmCtxChanged>
    return RegionChannelAdd( MacCtx.NvmCtx->Region, &channelAdd );
 800f696:	4a07      	ldr	r2, [pc, #28]	; (800f6b4 <LoRaMacChannelAdd+0x6c>)
 800f698:	238e      	movs	r3, #142	; 0x8e
 800f69a:	00db      	lsls	r3, r3, #3
 800f69c:	58d3      	ldr	r3, [r2, r3]
 800f69e:	781b      	ldrb	r3, [r3, #0]
 800f6a0:	193a      	adds	r2, r7, r4
 800f6a2:	0011      	movs	r1, r2
 800f6a4:	0018      	movs	r0, r3
 800f6a6:	f003 fdb7 	bl	8013218 <RegionChannelAdd>
 800f6aa:	0003      	movs	r3, r0
}
 800f6ac:	0018      	movs	r0, r3
 800f6ae:	46bd      	mov	sp, r7
 800f6b0:	b007      	add	sp, #28
 800f6b2:	bd90      	pop	{r4, r7, pc}
 800f6b4:	20000708 	.word	0x20000708

0800f6b8 <LoRaMacMlmeRequest>:
    EventRegionNvmCtxChanged( );
    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 800f6b8:	b5b0      	push	{r4, r5, r7, lr}
 800f6ba:	b086      	sub	sp, #24
 800f6bc:	af00      	add	r7, sp, #0
 800f6be:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800f6c0:	2317      	movs	r3, #23
 800f6c2:	18fb      	adds	r3, r7, r3
 800f6c4:	2202      	movs	r2, #2
 800f6c6:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800f6c8:	210c      	movs	r1, #12
 800f6ca:	187b      	adds	r3, r7, r1
 800f6cc:	2200      	movs	r2, #0
 800f6ce:	701a      	strb	r2, [r3, #0]
 800f6d0:	187b      	adds	r3, r7, r1
 800f6d2:	2200      	movs	r2, #0
 800f6d4:	705a      	strb	r2, [r3, #1]

    if( mlmeRequest == NULL )
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	d101      	bne.n	800f6e0 <LoRaMacMlmeRequest+0x28>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800f6dc:	2303      	movs	r3, #3
 800f6de:	e14c      	b.n	800f97a <LoRaMacMlmeRequest+0x2c2>
    }
    if( LoRaMacIsBusy( ) == LORAMAC_TRUE )
 800f6e0:	f7fb ff6a 	bl	800b5b8 <LoRaMacIsBusy>
 800f6e4:	0003      	movs	r3, r0
 800f6e6:	2b01      	cmp	r3, #1
 800f6e8:	d101      	bne.n	800f6ee <LoRaMacMlmeRequest+0x36>
    {
        return LORAMAC_STATUS_BUSY;
 800f6ea:	2301      	movs	r3, #1
 800f6ec:	e145      	b.n	800f97a <LoRaMacMlmeRequest+0x2c2>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
 800f6ee:	f001 f97f 	bl	80109f0 <LoRaMacConfirmQueueIsFull>
 800f6f2:	1e03      	subs	r3, r0, #0
 800f6f4:	d001      	beq.n	800f6fa <LoRaMacMlmeRequest+0x42>
    {
        return LORAMAC_STATUS_BUSY;
 800f6f6:	2301      	movs	r3, #1
 800f6f8:	e13f      	b.n	800f97a <LoRaMacMlmeRequest+0x2c2>
    }

    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 800f6fa:	f001 f96f 	bl	80109dc <LoRaMacConfirmQueueGetCnt>
 800f6fe:	1e03      	subs	r3, r0, #0
 800f700:	d105      	bne.n	800f70e <LoRaMacMlmeRequest+0x56>
    {
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 800f702:	4ba0      	ldr	r3, [pc, #640]	; (800f984 <LoRaMacMlmeRequest+0x2cc>)
 800f704:	2214      	movs	r2, #20
 800f706:	2100      	movs	r1, #0
 800f708:	0018      	movs	r0, r3
 800f70a:	f006 f9ad 	bl	8015a68 <memset1>
    }
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f70e:	4b9e      	ldr	r3, [pc, #632]	; (800f988 <LoRaMacMlmeRequest+0x2d0>)
 800f710:	4a9e      	ldr	r2, [pc, #632]	; (800f98c <LoRaMacMlmeRequest+0x2d4>)
 800f712:	2101      	movs	r1, #1
 800f714:	5499      	strb	r1, [r3, r2]

    MacCtx.MacFlags.Bits.MlmeReq = 1;
 800f716:	4b9c      	ldr	r3, [pc, #624]	; (800f988 <LoRaMacMlmeRequest+0x2d0>)
 800f718:	4a9d      	ldr	r2, [pc, #628]	; (800f990 <LoRaMacMlmeRequest+0x2d8>)
 800f71a:	5c99      	ldrb	r1, [r3, r2]
 800f71c:	2004      	movs	r0, #4
 800f71e:	4301      	orrs	r1, r0
 800f720:	5499      	strb	r1, [r3, r2]
    queueElement.Request = mlmeRequest->Type;
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	781a      	ldrb	r2, [r3, #0]
 800f726:	2110      	movs	r1, #16
 800f728:	187b      	adds	r3, r7, r1
 800f72a:	701a      	strb	r2, [r3, #0]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f72c:	187b      	adds	r3, r7, r1
 800f72e:	2201      	movs	r2, #1
 800f730:	705a      	strb	r2, [r3, #1]
    queueElement.RestrictCommonReadyToHandle = false;
 800f732:	187b      	adds	r3, r7, r1
 800f734:	2200      	movs	r2, #0
 800f736:	70da      	strb	r2, [r3, #3]

    switch( mlmeRequest->Type )
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	781b      	ldrb	r3, [r3, #0]
 800f73c:	2b0d      	cmp	r3, #13
 800f73e:	d900      	bls.n	800f742 <LoRaMacMlmeRequest+0x8a>
 800f740:	e0ef      	b.n	800f922 <LoRaMacMlmeRequest+0x26a>
 800f742:	009a      	lsls	r2, r3, #2
 800f744:	4b93      	ldr	r3, [pc, #588]	; (800f994 <LoRaMacMlmeRequest+0x2dc>)
 800f746:	18d3      	adds	r3, r2, r3
 800f748:	681b      	ldr	r3, [r3, #0]
 800f74a:	469f      	mov	pc, r3
    {
        case MLME_JOIN:
        {
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 800f74c:	4a8e      	ldr	r2, [pc, #568]	; (800f988 <LoRaMacMlmeRequest+0x2d0>)
 800f74e:	23d5      	movs	r3, #213	; 0xd5
 800f750:	009b      	lsls	r3, r3, #2
 800f752:	58d3      	ldr	r3, [r2, r3]
 800f754:	2220      	movs	r2, #32
 800f756:	4013      	ands	r3, r2
 800f758:	d001      	beq.n	800f75e <LoRaMacMlmeRequest+0xa6>
            {
                return LORAMAC_STATUS_BUSY;
 800f75a:	2301      	movs	r3, #1
 800f75c:	e10d      	b.n	800f97a <LoRaMacMlmeRequest+0x2c2>
            }

            if( ( mlmeRequest->Req.Join.DevEui == NULL ) ||
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	685b      	ldr	r3, [r3, #4]
 800f762:	2b00      	cmp	r3, #0
 800f764:	d003      	beq.n	800f76e <LoRaMacMlmeRequest+0xb6>
                ( mlmeRequest->Req.Join.JoinEui == NULL ) )
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	689b      	ldr	r3, [r3, #8]
            if( ( mlmeRequest->Req.Join.DevEui == NULL ) ||
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	d101      	bne.n	800f772 <LoRaMacMlmeRequest+0xba>
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 800f76e:	2303      	movs	r3, #3
 800f770:	e103      	b.n	800f97a <LoRaMacMlmeRequest+0x2c2>
            }

            MacCtx.NvmCtx->NetworkActivation = ACTIVATION_TYPE_NONE;
 800f772:	4a85      	ldr	r2, [pc, #532]	; (800f988 <LoRaMacMlmeRequest+0x2d0>)
 800f774:	238e      	movs	r3, #142	; 0x8e
 800f776:	00db      	lsls	r3, r3, #3
 800f778:	58d2      	ldr	r2, [r2, r3]
 800f77a:	2389      	movs	r3, #137	; 0x89
 800f77c:	009b      	lsls	r3, r3, #2
 800f77e:	2100      	movs	r1, #0
 800f780:	54d1      	strb	r1, [r2, r3]

            ResetMacParameters( );
 800f782:	f7fd fe5b 	bl	800d43c <ResetMacParameters>

            MacCtx.DevEui = mlmeRequest->Req.Join.DevEui;
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	685a      	ldr	r2, [r3, #4]
 800f78a:	4b7f      	ldr	r3, [pc, #508]	; (800f988 <LoRaMacMlmeRequest+0x2d0>)
 800f78c:	601a      	str	r2, [r3, #0]
            MacCtx.JoinEui = mlmeRequest->Req.Join.JoinEui;
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	689a      	ldr	r2, [r3, #8]
 800f792:	4b7d      	ldr	r3, [pc, #500]	; (800f988 <LoRaMacMlmeRequest+0x2d0>)
 800f794:	605a      	str	r2, [r3, #4]

            MacCtx.NvmCtx->MacParams.ChannelsDatarate = RegionAlternateDr( MacCtx.NvmCtx->Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 800f796:	4a7c      	ldr	r2, [pc, #496]	; (800f988 <LoRaMacMlmeRequest+0x2d0>)
 800f798:	238e      	movs	r3, #142	; 0x8e
 800f79a:	00db      	lsls	r3, r3, #3
 800f79c:	58d3      	ldr	r3, [r2, r3]
 800f79e:	7818      	ldrb	r0, [r3, #0]
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	7b1b      	ldrb	r3, [r3, #12]
 800f7a4:	b259      	sxtb	r1, r3
 800f7a6:	4a78      	ldr	r2, [pc, #480]	; (800f988 <LoRaMacMlmeRequest+0x2d0>)
 800f7a8:	238e      	movs	r3, #142	; 0x8e
 800f7aa:	00db      	lsls	r3, r3, #3
 800f7ac:	58d4      	ldr	r4, [r2, r3]
 800f7ae:	2200      	movs	r2, #0
 800f7b0:	f003 fcdf 	bl	8013172 <RegionAlternateDr>
 800f7b4:	0003      	movs	r3, r0
 800f7b6:	001a      	movs	r2, r3
 800f7b8:	23d5      	movs	r3, #213	; 0xd5
 800f7ba:	54e2      	strb	r2, [r4, r3]

            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 800f7bc:	2310      	movs	r3, #16
 800f7be:	18fb      	adds	r3, r7, r3
 800f7c0:	2207      	movs	r2, #7
 800f7c2:	705a      	strb	r2, [r3, #1]

            status = SendReJoinReq( JOIN_REQ );
 800f7c4:	2517      	movs	r5, #23
 800f7c6:	197c      	adds	r4, r7, r5
 800f7c8:	20ff      	movs	r0, #255	; 0xff
 800f7ca:	f7fd fb61 	bl	800ce90 <SendReJoinReq>
 800f7ce:	0003      	movs	r3, r0
 800f7d0:	7023      	strb	r3, [r4, #0]

            if( status != LORAMAC_STATUS_OK )
 800f7d2:	197b      	adds	r3, r7, r5
 800f7d4:	781b      	ldrb	r3, [r3, #0]
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	d100      	bne.n	800f7dc <LoRaMacMlmeRequest+0x124>
 800f7da:	e0a4      	b.n	800f926 <LoRaMacMlmeRequest+0x26e>
            {
                // Revert back the previous datarate ( mainly used for US915 like regions )
                MacCtx.NvmCtx->MacParams.ChannelsDatarate = RegionAlternateDr( MacCtx.NvmCtx->Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 800f7dc:	4a6a      	ldr	r2, [pc, #424]	; (800f988 <LoRaMacMlmeRequest+0x2d0>)
 800f7de:	238e      	movs	r3, #142	; 0x8e
 800f7e0:	00db      	lsls	r3, r3, #3
 800f7e2:	58d3      	ldr	r3, [r2, r3]
 800f7e4:	7818      	ldrb	r0, [r3, #0]
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	7b1b      	ldrb	r3, [r3, #12]
 800f7ea:	b259      	sxtb	r1, r3
 800f7ec:	4a66      	ldr	r2, [pc, #408]	; (800f988 <LoRaMacMlmeRequest+0x2d0>)
 800f7ee:	238e      	movs	r3, #142	; 0x8e
 800f7f0:	00db      	lsls	r3, r3, #3
 800f7f2:	58d4      	ldr	r4, [r2, r3]
 800f7f4:	2201      	movs	r2, #1
 800f7f6:	f003 fcbc 	bl	8013172 <RegionAlternateDr>
 800f7fa:	0003      	movs	r3, r0
 800f7fc:	001a      	movs	r2, r3
 800f7fe:	23d5      	movs	r3, #213	; 0xd5
 800f800:	54e2      	strb	r2, [r4, r3]
            }
            break;
 800f802:	e090      	b.n	800f926 <LoRaMacMlmeRequest+0x26e>
        }
        case MLME_LINK_CHECK:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 800f804:	2317      	movs	r3, #23
 800f806:	18fb      	adds	r3, r7, r3
 800f808:	2200      	movs	r2, #0
 800f80a:	701a      	strb	r2, [r3, #0]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800f80c:	230c      	movs	r3, #12
 800f80e:	18fb      	adds	r3, r7, r3
 800f810:	2200      	movs	r2, #0
 800f812:	0019      	movs	r1, r3
 800f814:	2002      	movs	r0, #2
 800f816:	f000 fd7b 	bl	8010310 <LoRaMacCommandsAddCmd>
 800f81a:	1e03      	subs	r3, r0, #0
 800f81c:	d100      	bne.n	800f820 <LoRaMacMlmeRequest+0x168>
 800f81e:	e084      	b.n	800f92a <LoRaMacMlmeRequest+0x272>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800f820:	2317      	movs	r3, #23
 800f822:	18fb      	adds	r3, r7, r3
 800f824:	2213      	movs	r2, #19
 800f826:	701a      	strb	r2, [r3, #0]
            }
            break;
 800f828:	e07f      	b.n	800f92a <LoRaMacMlmeRequest+0x272>
        }
        case MLME_TXCW:
        {
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	889b      	ldrh	r3, [r3, #4]
 800f82e:	2217      	movs	r2, #23
 800f830:	18bc      	adds	r4, r7, r2
 800f832:	0018      	movs	r0, r3
 800f834:	f7fe f918 	bl	800da68 <SetTxContinuousWave>
 800f838:	0003      	movs	r3, r0
 800f83a:	7023      	strb	r3, [r4, #0]
            break;
 800f83c:	e07c      	b.n	800f938 <LoRaMacMlmeRequest+0x280>
        }
        case MLME_TXCW_1:
        {

            status = SetTxContinuousWave1( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	8898      	ldrh	r0, [r3, #4]
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	6899      	ldr	r1, [r3, #8]
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	7b1b      	ldrb	r3, [r3, #12]
 800f84a:	2217      	movs	r2, #23
 800f84c:	18bc      	adds	r4, r7, r2
 800f84e:	001a      	movs	r2, r3
 800f850:	f7fe f95c 	bl	800db0c <SetTxContinuousWave1>
 800f854:	0003      	movs	r3, r0
 800f856:	7023      	strb	r3, [r4, #0]
            break;
 800f858:	e06e      	b.n	800f938 <LoRaMacMlmeRequest+0x280>
        }
        case MLME_DEVICE_TIME:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 800f85a:	2317      	movs	r3, #23
 800f85c:	18fb      	adds	r3, r7, r3
 800f85e:	2200      	movs	r2, #0
 800f860:	701a      	strb	r2, [r3, #0]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800f862:	230c      	movs	r3, #12
 800f864:	18fb      	adds	r3, r7, r3
 800f866:	2200      	movs	r2, #0
 800f868:	0019      	movs	r1, r3
 800f86a:	200d      	movs	r0, #13
 800f86c:	f000 fd50 	bl	8010310 <LoRaMacCommandsAddCmd>
 800f870:	1e03      	subs	r3, r0, #0
 800f872:	d05c      	beq.n	800f92e <LoRaMacMlmeRequest+0x276>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800f874:	2317      	movs	r3, #23
 800f876:	18fb      	adds	r3, r7, r3
 800f878:	2213      	movs	r2, #19
 800f87a:	701a      	strb	r2, [r3, #0]
            }
            break;
 800f87c:	e057      	b.n	800f92e <LoRaMacMlmeRequest+0x276>
        }
        case MLME_PING_SLOT_INFO:
        {
            uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 800f87e:	2416      	movs	r4, #22
 800f880:	193b      	adds	r3, r7, r4
 800f882:	687a      	ldr	r2, [r7, #4]
 800f884:	7912      	ldrb	r2, [r2, #4]
 800f886:	701a      	strb	r2, [r3, #0]

            // LoRaMac will send this command piggy-pack
            LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	791b      	ldrb	r3, [r3, #4]
 800f88c:	075b      	lsls	r3, r3, #29
 800f88e:	0f5b      	lsrs	r3, r3, #29
 800f890:	b2db      	uxtb	r3, r3
 800f892:	0018      	movs	r0, r3
 800f894:	f000 fb67 	bl	800ff66 <LoRaMacClassBSetPingSlotInfo>
            macCmdPayload[0] = value;
 800f898:	210c      	movs	r1, #12
 800f89a:	187b      	adds	r3, r7, r1
 800f89c:	193a      	adds	r2, r7, r4
 800f89e:	7812      	ldrb	r2, [r2, #0]
 800f8a0:	701a      	strb	r2, [r3, #0]
            status = LORAMAC_STATUS_OK;
 800f8a2:	2317      	movs	r3, #23
 800f8a4:	18fb      	adds	r3, r7, r3
 800f8a6:	2200      	movs	r2, #0
 800f8a8:	701a      	strb	r2, [r3, #0]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 800f8aa:	187b      	adds	r3, r7, r1
 800f8ac:	2201      	movs	r2, #1
 800f8ae:	0019      	movs	r1, r3
 800f8b0:	2010      	movs	r0, #16
 800f8b2:	f000 fd2d 	bl	8010310 <LoRaMacCommandsAddCmd>
 800f8b6:	1e03      	subs	r3, r0, #0
 800f8b8:	d03b      	beq.n	800f932 <LoRaMacMlmeRequest+0x27a>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800f8ba:	2317      	movs	r3, #23
 800f8bc:	18fb      	adds	r3, r7, r3
 800f8be:	2213      	movs	r2, #19
 800f8c0:	701a      	strb	r2, [r3, #0]
            }
            break;
 800f8c2:	e036      	b.n	800f932 <LoRaMacMlmeRequest+0x27a>
        }
        case MLME_BEACON_TIMING:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 800f8c4:	2317      	movs	r3, #23
 800f8c6:	18fb      	adds	r3, r7, r3
 800f8c8:	2200      	movs	r2, #0
 800f8ca:	701a      	strb	r2, [r3, #0]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800f8cc:	230c      	movs	r3, #12
 800f8ce:	18fb      	adds	r3, r7, r3
 800f8d0:	2200      	movs	r2, #0
 800f8d2:	0019      	movs	r1, r3
 800f8d4:	2012      	movs	r0, #18
 800f8d6:	f000 fd1b 	bl	8010310 <LoRaMacCommandsAddCmd>
 800f8da:	1e03      	subs	r3, r0, #0
 800f8dc:	d02b      	beq.n	800f936 <LoRaMacMlmeRequest+0x27e>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800f8de:	2317      	movs	r3, #23
 800f8e0:	18fb      	adds	r3, r7, r3
 800f8e2:	2213      	movs	r2, #19
 800f8e4:	701a      	strb	r2, [r3, #0]
            }
            break;
 800f8e6:	e026      	b.n	800f936 <LoRaMacMlmeRequest+0x27e>
        }
        case MLME_BEACON_ACQUISITION:
        {
            // Apply the request
            queueElement.RestrictCommonReadyToHandle = true;
 800f8e8:	2310      	movs	r3, #16
 800f8ea:	18fb      	adds	r3, r7, r3
 800f8ec:	2201      	movs	r2, #1
 800f8ee:	70da      	strb	r2, [r3, #3]

            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 800f8f0:	f000 faf7 	bl	800fee2 <LoRaMacClassBIsAcquisitionInProgress>
 800f8f4:	0003      	movs	r3, r0
 800f8f6:	001a      	movs	r2, r3
 800f8f8:	2301      	movs	r3, #1
 800f8fa:	4053      	eors	r3, r2
 800f8fc:	b2db      	uxtb	r3, r3
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	d00a      	beq.n	800f918 <LoRaMacMlmeRequest+0x260>
            {
                // Start class B algorithm
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 800f902:	2000      	movs	r0, #0
 800f904:	f000 facf 	bl	800fea6 <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 800f908:	2000      	movs	r0, #0
 800f90a:	f000 faf0 	bl	800feee <LoRaMacClassBBeaconTimerEvent>

                status = LORAMAC_STATUS_OK;
 800f90e:	2317      	movs	r3, #23
 800f910:	18fb      	adds	r3, r7, r3
 800f912:	2200      	movs	r2, #0
 800f914:	701a      	strb	r2, [r3, #0]
            }
            else
            {
                status = LORAMAC_STATUS_BUSY;
            }
            break;
 800f916:	e00f      	b.n	800f938 <LoRaMacMlmeRequest+0x280>
                status = LORAMAC_STATUS_BUSY;
 800f918:	2317      	movs	r3, #23
 800f91a:	18fb      	adds	r3, r7, r3
 800f91c:	2201      	movs	r2, #1
 800f91e:	701a      	strb	r2, [r3, #0]
            break;
 800f920:	e00a      	b.n	800f938 <LoRaMacMlmeRequest+0x280>
        }
        default:
            break;
 800f922:	46c0      	nop			; (mov r8, r8)
 800f924:	e008      	b.n	800f938 <LoRaMacMlmeRequest+0x280>
            break;
 800f926:	46c0      	nop			; (mov r8, r8)
 800f928:	e006      	b.n	800f938 <LoRaMacMlmeRequest+0x280>
            break;
 800f92a:	46c0      	nop			; (mov r8, r8)
 800f92c:	e004      	b.n	800f938 <LoRaMacMlmeRequest+0x280>
            break;
 800f92e:	46c0      	nop			; (mov r8, r8)
 800f930:	e002      	b.n	800f938 <LoRaMacMlmeRequest+0x280>
            break;
 800f932:	46c0      	nop			; (mov r8, r8)
 800f934:	e000      	b.n	800f938 <LoRaMacMlmeRequest+0x280>
            break;
 800f936:	46c0      	nop			; (mov r8, r8)
    }

    if( status != LORAMAC_STATUS_OK )
 800f938:	2317      	movs	r3, #23
 800f93a:	18fb      	adds	r3, r7, r3
 800f93c:	781b      	ldrb	r3, [r3, #0]
 800f93e:	2b00      	cmp	r3, #0
 800f940:	d011      	beq.n	800f966 <LoRaMacMlmeRequest+0x2ae>
    {
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 800f942:	f001 f84b 	bl	80109dc <LoRaMacConfirmQueueGetCnt>
 800f946:	1e03      	subs	r3, r0, #0
 800f948:	d114      	bne.n	800f974 <LoRaMacMlmeRequest+0x2bc>
        {
            MacCtx.NvmCtx->NodeAckRequested = false;
 800f94a:	4a0f      	ldr	r2, [pc, #60]	; (800f988 <LoRaMacMlmeRequest+0x2d0>)
 800f94c:	238e      	movs	r3, #142	; 0x8e
 800f94e:	00db      	lsls	r3, r3, #3
 800f950:	58d3      	ldr	r3, [r2, r3]
 800f952:	4a11      	ldr	r2, [pc, #68]	; (800f998 <LoRaMacMlmeRequest+0x2e0>)
 800f954:	2100      	movs	r1, #0
 800f956:	5499      	strb	r1, [r3, r2]
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800f958:	4b0b      	ldr	r3, [pc, #44]	; (800f988 <LoRaMacMlmeRequest+0x2d0>)
 800f95a:	4a0d      	ldr	r2, [pc, #52]	; (800f990 <LoRaMacMlmeRequest+0x2d8>)
 800f95c:	5c99      	ldrb	r1, [r3, r2]
 800f95e:	2004      	movs	r0, #4
 800f960:	4381      	bics	r1, r0
 800f962:	5499      	strb	r1, [r3, r2]
 800f964:	e006      	b.n	800f974 <LoRaMacMlmeRequest+0x2bc>
        }
    }
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
 800f966:	2310      	movs	r3, #16
 800f968:	18fb      	adds	r3, r7, r3
 800f96a:	0018      	movs	r0, r3
 800f96c:	f000 feda 	bl	8010724 <LoRaMacConfirmQueueAdd>
        EventMacNvmCtxChanged( );
 800f970:	f7fe fba0 	bl	800e0b4 <EventMacNvmCtxChanged>
    }
    return status;
 800f974:	2317      	movs	r3, #23
 800f976:	18fb      	adds	r3, r7, r3
 800f978:	781b      	ldrb	r3, [r3, #0]
}
 800f97a:	0018      	movs	r0, r3
 800f97c:	46bd      	mov	sp, r7
 800f97e:	b006      	add	sp, #24
 800f980:	bdb0      	pop	{r4, r5, r7, pc}
 800f982:	46c0      	nop			; (mov r8, r8)
 800f984:	20000b48 	.word	0x20000b48
 800f988:	20000708 	.word	0x20000708
 800f98c:	00000441 	.word	0x00000441
 800f990:	0000046d 	.word	0x0000046d
 800f994:	0802196c 	.word	0x0802196c
 800f998:	00000219 	.word	0x00000219

0800f99c <LoRaMacMcpsRequest>:

LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest )
{
 800f99c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f99e:	b08b      	sub	sp, #44	; 0x2c
 800f9a0:	af00      	add	r7, sp, #0
 800f9a2:	6078      	str	r0, [r7, #4]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800f9a4:	2327      	movs	r3, #39	; 0x27
 800f9a6:	18fb      	adds	r3, r7, r3
 800f9a8:	2202      	movs	r2, #2
 800f9aa:	701a      	strb	r2, [r3, #0]
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
 800f9ac:	2326      	movs	r3, #38	; 0x26
 800f9ae:	18fb      	adds	r3, r7, r3
 800f9b0:	2200      	movs	r2, #0
 800f9b2:	701a      	strb	r2, [r3, #0]
    void* fBuffer;
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
 800f9b4:	231d      	movs	r3, #29
 800f9b6:	18fb      	adds	r3, r7, r3
 800f9b8:	2200      	movs	r2, #0
 800f9ba:	701a      	strb	r2, [r3, #0]
    bool readyToSend = false;
 800f9bc:	231c      	movs	r3, #28
 800f9be:	18fb      	adds	r3, r7, r3
 800f9c0:	2200      	movs	r2, #0
 800f9c2:	701a      	strb	r2, [r3, #0]

    if( mcpsRequest == NULL )
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	d101      	bne.n	800f9ce <LoRaMacMcpsRequest+0x32>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800f9ca:	2303      	movs	r3, #3
 800f9cc:	e122      	b.n	800fc14 <LoRaMacMcpsRequest+0x278>
    }
    if( LoRaMacIsBusy( ) == LORAMAC_TRUE )
 800f9ce:	f7fb fdf3 	bl	800b5b8 <LoRaMacIsBusy>
 800f9d2:	0003      	movs	r3, r0
 800f9d4:	2b01      	cmp	r3, #1
 800f9d6:	d101      	bne.n	800f9dc <LoRaMacMcpsRequest+0x40>
    {
        return LORAMAC_STATUS_BUSY;
 800f9d8:	2301      	movs	r3, #1
 800f9da:	e11b      	b.n	800fc14 <LoRaMacMcpsRequest+0x278>
    }

    macHdr.Value = 0;
 800f9dc:	2310      	movs	r3, #16
 800f9de:	18fb      	adds	r3, r7, r3
 800f9e0:	2200      	movs	r2, #0
 800f9e2:	701a      	strb	r2, [r3, #0]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 800f9e4:	4b8d      	ldr	r3, [pc, #564]	; (800fc1c <LoRaMacMcpsRequest+0x280>)
 800f9e6:	2214      	movs	r2, #20
 800f9e8:	2100      	movs	r1, #0
 800f9ea:	0018      	movs	r0, r3
 800f9ec:	f006 f83c 	bl	8015a68 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f9f0:	4b8b      	ldr	r3, [pc, #556]	; (800fc20 <LoRaMacMcpsRequest+0x284>)
 800f9f2:	4a8c      	ldr	r2, [pc, #560]	; (800fc24 <LoRaMacMcpsRequest+0x288>)
 800f9f4:	2101      	movs	r1, #1
 800f9f6:	5499      	strb	r1, [r3, r2]

    // AckTimeoutRetriesCounter must be reset every time a new request (unconfirmed or confirmed) is performed.
    MacCtx.NvmCtx->AckTimeoutRetriesCounter = 1;
 800f9f8:	4a89      	ldr	r2, [pc, #548]	; (800fc20 <LoRaMacMcpsRequest+0x284>)
 800f9fa:	238e      	movs	r3, #142	; 0x8e
 800f9fc:	00db      	lsls	r3, r3, #3
 800f9fe:	58d3      	ldr	r3, [r2, r3]
 800fa00:	4a89      	ldr	r2, [pc, #548]	; (800fc28 <LoRaMacMcpsRequest+0x28c>)
 800fa02:	2101      	movs	r1, #1
 800fa04:	5499      	strb	r1, [r3, r2]

    switch( mcpsRequest->Type )
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	781b      	ldrb	r3, [r3, #0]
 800fa0a:	2b01      	cmp	r3, #1
 800fa0c:	d02b      	beq.n	800fa66 <LoRaMacMcpsRequest+0xca>
 800fa0e:	2b03      	cmp	r3, #3
 800fa10:	d052      	beq.n	800fab8 <LoRaMacMcpsRequest+0x11c>
 800fa12:	2b00      	cmp	r3, #0
 800fa14:	d000      	beq.n	800fa18 <LoRaMacMcpsRequest+0x7c>
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
            datarate = mcpsRequest->Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
 800fa16:	e06f      	b.n	800faf8 <LoRaMacMcpsRequest+0x15c>
            readyToSend = true;
 800fa18:	231c      	movs	r3, #28
 800fa1a:	18fb      	adds	r3, r7, r3
 800fa1c:	2201      	movs	r2, #1
 800fa1e:	701a      	strb	r2, [r3, #0]
            MacCtx.NvmCtx->AckTimeoutRetries = 1;
 800fa20:	4a7f      	ldr	r2, [pc, #508]	; (800fc20 <LoRaMacMcpsRequest+0x284>)
 800fa22:	238e      	movs	r3, #142	; 0x8e
 800fa24:	00db      	lsls	r3, r3, #3
 800fa26:	58d3      	ldr	r3, [r2, r3]
 800fa28:	4a80      	ldr	r2, [pc, #512]	; (800fc2c <LoRaMacMcpsRequest+0x290>)
 800fa2a:	2101      	movs	r1, #1
 800fa2c:	5499      	strb	r1, [r3, r2]
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 800fa2e:	2310      	movs	r3, #16
 800fa30:	18fb      	adds	r3, r7, r3
 800fa32:	781a      	ldrb	r2, [r3, #0]
 800fa34:	211f      	movs	r1, #31
 800fa36:	400a      	ands	r2, r1
 800fa38:	1c11      	adds	r1, r2, #0
 800fa3a:	2240      	movs	r2, #64	; 0x40
 800fa3c:	430a      	orrs	r2, r1
 800fa3e:	701a      	strb	r2, [r3, #0]
            fPort = mcpsRequest->Req.Unconfirmed.fPort;
 800fa40:	2326      	movs	r3, #38	; 0x26
 800fa42:	18fb      	adds	r3, r7, r3
 800fa44:	687a      	ldr	r2, [r7, #4]
 800fa46:	7912      	ldrb	r2, [r2, #4]
 800fa48:	701a      	strb	r2, [r3, #0]
            fBuffer = mcpsRequest->Req.Unconfirmed.fBuffer;
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	689b      	ldr	r3, [r3, #8]
 800fa4e:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Unconfirmed.fBufferSize;
 800fa50:	231e      	movs	r3, #30
 800fa52:	18fb      	adds	r3, r7, r3
 800fa54:	687a      	ldr	r2, [r7, #4]
 800fa56:	8992      	ldrh	r2, [r2, #12]
 800fa58:	801a      	strh	r2, [r3, #0]
            datarate = mcpsRequest->Req.Unconfirmed.Datarate;
 800fa5a:	231d      	movs	r3, #29
 800fa5c:	18fb      	adds	r3, r7, r3
 800fa5e:	687a      	ldr	r2, [r7, #4]
 800fa60:	7b92      	ldrb	r2, [r2, #14]
 800fa62:	701a      	strb	r2, [r3, #0]
            break;
 800fa64:	e048      	b.n	800faf8 <LoRaMacMcpsRequest+0x15c>
            readyToSend = true;
 800fa66:	231c      	movs	r3, #28
 800fa68:	18fb      	adds	r3, r7, r3
 800fa6a:	2201      	movs	r2, #1
 800fa6c:	701a      	strb	r2, [r3, #0]
            MacCtx.NvmCtx->AckTimeoutRetries = mcpsRequest->Req.Confirmed.NbTrials;
 800fa6e:	4a6c      	ldr	r2, [pc, #432]	; (800fc20 <LoRaMacMcpsRequest+0x284>)
 800fa70:	238e      	movs	r3, #142	; 0x8e
 800fa72:	00db      	lsls	r3, r3, #3
 800fa74:	58d3      	ldr	r3, [r2, r3]
 800fa76:	687a      	ldr	r2, [r7, #4]
 800fa78:	7bd1      	ldrb	r1, [r2, #15]
 800fa7a:	4a6c      	ldr	r2, [pc, #432]	; (800fc2c <LoRaMacMcpsRequest+0x290>)
 800fa7c:	5499      	strb	r1, [r3, r2]
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 800fa7e:	2310      	movs	r3, #16
 800fa80:	18fb      	adds	r3, r7, r3
 800fa82:	781a      	ldrb	r2, [r3, #0]
 800fa84:	211f      	movs	r1, #31
 800fa86:	400a      	ands	r2, r1
 800fa88:	1c11      	adds	r1, r2, #0
 800fa8a:	2280      	movs	r2, #128	; 0x80
 800fa8c:	4252      	negs	r2, r2
 800fa8e:	430a      	orrs	r2, r1
 800fa90:	701a      	strb	r2, [r3, #0]
            fPort = mcpsRequest->Req.Confirmed.fPort;
 800fa92:	2326      	movs	r3, #38	; 0x26
 800fa94:	18fb      	adds	r3, r7, r3
 800fa96:	687a      	ldr	r2, [r7, #4]
 800fa98:	7912      	ldrb	r2, [r2, #4]
 800fa9a:	701a      	strb	r2, [r3, #0]
            fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	689b      	ldr	r3, [r3, #8]
 800faa0:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Confirmed.fBufferSize;
 800faa2:	231e      	movs	r3, #30
 800faa4:	18fb      	adds	r3, r7, r3
 800faa6:	687a      	ldr	r2, [r7, #4]
 800faa8:	8992      	ldrh	r2, [r2, #12]
 800faaa:	801a      	strh	r2, [r3, #0]
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 800faac:	231d      	movs	r3, #29
 800faae:	18fb      	adds	r3, r7, r3
 800fab0:	687a      	ldr	r2, [r7, #4]
 800fab2:	7b92      	ldrb	r2, [r2, #14]
 800fab4:	701a      	strb	r2, [r3, #0]
            break;
 800fab6:	e01f      	b.n	800faf8 <LoRaMacMcpsRequest+0x15c>
            readyToSend = true;
 800fab8:	231c      	movs	r3, #28
 800faba:	18fb      	adds	r3, r7, r3
 800fabc:	2201      	movs	r2, #1
 800fabe:	701a      	strb	r2, [r3, #0]
            MacCtx.NvmCtx->AckTimeoutRetries = 1;
 800fac0:	4a57      	ldr	r2, [pc, #348]	; (800fc20 <LoRaMacMcpsRequest+0x284>)
 800fac2:	238e      	movs	r3, #142	; 0x8e
 800fac4:	00db      	lsls	r3, r3, #3
 800fac6:	58d3      	ldr	r3, [r2, r3]
 800fac8:	4a58      	ldr	r2, [pc, #352]	; (800fc2c <LoRaMacMcpsRequest+0x290>)
 800faca:	2101      	movs	r1, #1
 800facc:	5499      	strb	r1, [r3, r2]
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 800face:	2310      	movs	r3, #16
 800fad0:	18fb      	adds	r3, r7, r3
 800fad2:	781a      	ldrb	r2, [r3, #0]
 800fad4:	2120      	movs	r1, #32
 800fad6:	4249      	negs	r1, r1
 800fad8:	430a      	orrs	r2, r1
 800fada:	701a      	strb	r2, [r3, #0]
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	685b      	ldr	r3, [r3, #4]
 800fae0:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
 800fae2:	231e      	movs	r3, #30
 800fae4:	18fb      	adds	r3, r7, r3
 800fae6:	687a      	ldr	r2, [r7, #4]
 800fae8:	8912      	ldrh	r2, [r2, #8]
 800faea:	801a      	strh	r2, [r3, #0]
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 800faec:	231d      	movs	r3, #29
 800faee:	18fb      	adds	r3, r7, r3
 800faf0:	687a      	ldr	r2, [r7, #4]
 800faf2:	7a92      	ldrb	r2, [r2, #10]
 800faf4:	701a      	strb	r2, [r3, #0]
            break;
 800faf6:	46c0      	nop			; (mov r8, r8)
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 800faf8:	2118      	movs	r1, #24
 800fafa:	187b      	adds	r3, r7, r1
 800fafc:	2201      	movs	r2, #1
 800fafe:	701a      	strb	r2, [r3, #0]
    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800fb00:	4a47      	ldr	r2, [pc, #284]	; (800fc20 <LoRaMacMcpsRequest+0x284>)
 800fb02:	238e      	movs	r3, #142	; 0x8e
 800fb04:	00db      	lsls	r3, r3, #3
 800fb06:	58d2      	ldr	r2, [r2, r3]
 800fb08:	2380      	movs	r3, #128	; 0x80
 800fb0a:	005b      	lsls	r3, r3, #1
 800fb0c:	5cd2      	ldrb	r2, [r2, r3]
 800fb0e:	187b      	adds	r3, r7, r1
 800fb10:	709a      	strb	r2, [r3, #2]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800fb12:	4a43      	ldr	r2, [pc, #268]	; (800fc20 <LoRaMacMcpsRequest+0x284>)
 800fb14:	238e      	movs	r3, #142	; 0x8e
 800fb16:	00db      	lsls	r3, r3, #3
 800fb18:	58d3      	ldr	r3, [r2, r3]
 800fb1a:	781b      	ldrb	r3, [r3, #0]
 800fb1c:	187a      	adds	r2, r7, r1
 800fb1e:	0011      	movs	r1, r2
 800fb20:	0018      	movs	r0, r3
 800fb22:	f003 f9a8 	bl	8012e76 <RegionGetPhyParam>
 800fb26:	0003      	movs	r3, r0
 800fb28:	001a      	movs	r2, r3
 800fb2a:	2114      	movs	r1, #20
 800fb2c:	187b      	adds	r3, r7, r1
 800fb2e:	601a      	str	r2, [r3, #0]
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 800fb30:	187b      	adds	r3, r7, r1
 800fb32:	681b      	ldr	r3, [r3, #0]
 800fb34:	b259      	sxtb	r1, r3
 800fb36:	231d      	movs	r3, #29
 800fb38:	18fa      	adds	r2, r7, r3
 800fb3a:	18fb      	adds	r3, r7, r3
 800fb3c:	1c0c      	adds	r4, r1, #0
 800fb3e:	781b      	ldrb	r3, [r3, #0]
 800fb40:	b258      	sxtb	r0, r3
 800fb42:	b261      	sxtb	r1, r4
 800fb44:	4288      	cmp	r0, r1
 800fb46:	da00      	bge.n	800fb4a <LoRaMacMcpsRequest+0x1ae>
 800fb48:	1c23      	adds	r3, r4, #0
 800fb4a:	7013      	strb	r3, [r2, #0]

    if( readyToSend == true )
 800fb4c:	231c      	movs	r3, #28
 800fb4e:	18fb      	adds	r3, r7, r3
 800fb50:	781b      	ldrb	r3, [r3, #0]
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	d059      	beq.n	800fc0a <LoRaMacMcpsRequest+0x26e>
    {
        if( MacCtx.NvmCtx->AdrCtrlOn == false )
 800fb56:	4a32      	ldr	r2, [pc, #200]	; (800fc20 <LoRaMacMcpsRequest+0x284>)
 800fb58:	238e      	movs	r3, #142	; 0x8e
 800fb5a:	00db      	lsls	r3, r3, #3
 800fb5c:	58d3      	ldr	r3, [r2, r3]
 800fb5e:	22ca      	movs	r2, #202	; 0xca
 800fb60:	5c9b      	ldrb	r3, [r3, r2]
 800fb62:	2201      	movs	r2, #1
 800fb64:	4053      	eors	r3, r2
 800fb66:	b2db      	uxtb	r3, r3
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d027      	beq.n	800fbbc <LoRaMacMcpsRequest+0x220>
        {
            verify.DatarateParams.Datarate = datarate;
 800fb6c:	210c      	movs	r1, #12
 800fb6e:	187b      	adds	r3, r7, r1
 800fb70:	221d      	movs	r2, #29
 800fb72:	18ba      	adds	r2, r7, r2
 800fb74:	7812      	ldrb	r2, [r2, #0]
 800fb76:	701a      	strb	r2, [r3, #0]
            verify.DatarateParams.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800fb78:	4a29      	ldr	r2, [pc, #164]	; (800fc20 <LoRaMacMcpsRequest+0x284>)
 800fb7a:	238e      	movs	r3, #142	; 0x8e
 800fb7c:	00db      	lsls	r3, r3, #3
 800fb7e:	58d2      	ldr	r2, [r2, r3]
 800fb80:	2380      	movs	r3, #128	; 0x80
 800fb82:	005b      	lsls	r3, r3, #1
 800fb84:	5cd2      	ldrb	r2, [r2, r3]
 800fb86:	187b      	adds	r3, r7, r1
 800fb88:	709a      	strb	r2, [r3, #2]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_DR ) == true )
 800fb8a:	4a25      	ldr	r2, [pc, #148]	; (800fc20 <LoRaMacMcpsRequest+0x284>)
 800fb8c:	238e      	movs	r3, #142	; 0x8e
 800fb8e:	00db      	lsls	r3, r3, #3
 800fb90:	58d3      	ldr	r3, [r2, r3]
 800fb92:	781b      	ldrb	r3, [r3, #0]
 800fb94:	1879      	adds	r1, r7, r1
 800fb96:	2204      	movs	r2, #4
 800fb98:	0018      	movs	r0, r3
 800fb9a:	f003 f9d3 	bl	8012f44 <RegionVerify>
 800fb9e:	1e03      	subs	r3, r0, #0
 800fba0:	d00a      	beq.n	800fbb8 <LoRaMacMcpsRequest+0x21c>
            {
                MacCtx.NvmCtx->MacParams.ChannelsDatarate = verify.DatarateParams.Datarate;
 800fba2:	4a1f      	ldr	r2, [pc, #124]	; (800fc20 <LoRaMacMcpsRequest+0x284>)
 800fba4:	238e      	movs	r3, #142	; 0x8e
 800fba6:	00db      	lsls	r3, r3, #3
 800fba8:	58d3      	ldr	r3, [r2, r3]
 800fbaa:	220c      	movs	r2, #12
 800fbac:	18ba      	adds	r2, r7, r2
 800fbae:	2100      	movs	r1, #0
 800fbb0:	5651      	ldrsb	r1, [r2, r1]
 800fbb2:	22d5      	movs	r2, #213	; 0xd5
 800fbb4:	5499      	strb	r1, [r3, r2]
 800fbb6:	e001      	b.n	800fbbc <LoRaMacMcpsRequest+0x220>
            }
            else
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 800fbb8:	2303      	movs	r3, #3
 800fbba:	e02b      	b.n	800fc14 <LoRaMacMcpsRequest+0x278>
            }
        }

        status = Send( &macHdr, fPort, fBuffer, fBufferSize );
 800fbbc:	2627      	movs	r6, #39	; 0x27
 800fbbe:	19bc      	adds	r4, r7, r6
 800fbc0:	231e      	movs	r3, #30
 800fbc2:	18fb      	adds	r3, r7, r3
 800fbc4:	881d      	ldrh	r5, [r3, #0]
 800fbc6:	6a3a      	ldr	r2, [r7, #32]
 800fbc8:	2326      	movs	r3, #38	; 0x26
 800fbca:	18fb      	adds	r3, r7, r3
 800fbcc:	7819      	ldrb	r1, [r3, #0]
 800fbce:	2310      	movs	r3, #16
 800fbd0:	18f8      	adds	r0, r7, r3
 800fbd2:	002b      	movs	r3, r5
 800fbd4:	f7fd f812 	bl	800cbfc <Send>
 800fbd8:	0003      	movs	r3, r0
 800fbda:	7023      	strb	r3, [r4, #0]
        if( status == LORAMAC_STATUS_OK )
 800fbdc:	19bb      	adds	r3, r7, r6
 800fbde:	781b      	ldrb	r3, [r3, #0]
 800fbe0:	2b00      	cmp	r3, #0
 800fbe2:	d10b      	bne.n	800fbfc <LoRaMacMcpsRequest+0x260>
        {
            MacCtx.McpsConfirm.McpsRequest = mcpsRequest->Type;
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	7819      	ldrb	r1, [r3, #0]
 800fbe8:	4b0d      	ldr	r3, [pc, #52]	; (800fc20 <LoRaMacMcpsRequest+0x284>)
 800fbea:	4a11      	ldr	r2, [pc, #68]	; (800fc30 <LoRaMacMcpsRequest+0x294>)
 800fbec:	5499      	strb	r1, [r3, r2]
            MacCtx.MacFlags.Bits.McpsReq = 1;
 800fbee:	4b0c      	ldr	r3, [pc, #48]	; (800fc20 <LoRaMacMcpsRequest+0x284>)
 800fbf0:	4a10      	ldr	r2, [pc, #64]	; (800fc34 <LoRaMacMcpsRequest+0x298>)
 800fbf2:	5c99      	ldrb	r1, [r3, r2]
 800fbf4:	2001      	movs	r0, #1
 800fbf6:	4301      	orrs	r1, r0
 800fbf8:	5499      	strb	r1, [r3, r2]
 800fbfa:	e006      	b.n	800fc0a <LoRaMacMcpsRequest+0x26e>
        }
        else
        {
            MacCtx.NvmCtx->NodeAckRequested = false;
 800fbfc:	4a08      	ldr	r2, [pc, #32]	; (800fc20 <LoRaMacMcpsRequest+0x284>)
 800fbfe:	238e      	movs	r3, #142	; 0x8e
 800fc00:	00db      	lsls	r3, r3, #3
 800fc02:	58d3      	ldr	r3, [r2, r3]
 800fc04:	4a0c      	ldr	r2, [pc, #48]	; (800fc38 <LoRaMacMcpsRequest+0x29c>)
 800fc06:	2100      	movs	r1, #0
 800fc08:	5499      	strb	r1, [r3, r2]
        }
    }

    EventMacNvmCtxChanged( );
 800fc0a:	f7fe fa53 	bl	800e0b4 <EventMacNvmCtxChanged>
    return status;
 800fc0e:	2327      	movs	r3, #39	; 0x27
 800fc10:	18fb      	adds	r3, r7, r3
 800fc12:	781b      	ldrb	r3, [r3, #0]
}
 800fc14:	0018      	movs	r0, r3
 800fc16:	46bd      	mov	sp, r7
 800fc18:	b00b      	add	sp, #44	; 0x2c
 800fc1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fc1c:	20000b34 	.word	0x20000b34
 800fc20:	20000708 	.word	0x20000708
 800fc24:	0000042d 	.word	0x0000042d
 800fc28:	00000217 	.word	0x00000217
 800fc2c:	00000216 	.word	0x00000216
 800fc30:	0000042c 	.word	0x0000042c
 800fc34:	0000046d 	.word	0x0000046d
 800fc38:	00000219 	.word	0x00000219

0800fc3c <LoRaMacTestSetDutyCycleOn>:

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 800fc3c:	b580      	push	{r7, lr}
 800fc3e:	b084      	sub	sp, #16
 800fc40:	af00      	add	r7, sp, #0
 800fc42:	0002      	movs	r2, r0
 800fc44:	1dfb      	adds	r3, r7, #7
 800fc46:	701a      	strb	r2, [r3, #0]
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 800fc48:	210c      	movs	r1, #12
 800fc4a:	187b      	adds	r3, r7, r1
 800fc4c:	1dfa      	adds	r2, r7, #7
 800fc4e:	7812      	ldrb	r2, [r2, #0]
 800fc50:	701a      	strb	r2, [r3, #0]

    if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DUTY_CYCLE ) == true )
 800fc52:	4a0c      	ldr	r2, [pc, #48]	; (800fc84 <LoRaMacTestSetDutyCycleOn+0x48>)
 800fc54:	238e      	movs	r3, #142	; 0x8e
 800fc56:	00db      	lsls	r3, r3, #3
 800fc58:	58d3      	ldr	r3, [r2, r3]
 800fc5a:	781b      	ldrb	r3, [r3, #0]
 800fc5c:	1879      	adds	r1, r7, r1
 800fc5e:	220e      	movs	r2, #14
 800fc60:	0018      	movs	r0, r3
 800fc62:	f003 f96f 	bl	8012f44 <RegionVerify>
 800fc66:	1e03      	subs	r3, r0, #0
 800fc68:	d008      	beq.n	800fc7c <LoRaMacTestSetDutyCycleOn+0x40>
    {
        MacCtx.NvmCtx->DutyCycleOn = enable;
 800fc6a:	4a06      	ldr	r2, [pc, #24]	; (800fc84 <LoRaMacTestSetDutyCycleOn+0x48>)
 800fc6c:	238e      	movs	r3, #142	; 0x8e
 800fc6e:	00db      	lsls	r3, r3, #3
 800fc70:	58d2      	ldr	r2, [r2, r3]
 800fc72:	1df9      	adds	r1, r7, #7
 800fc74:	2389      	movs	r3, #137	; 0x89
 800fc76:	005b      	lsls	r3, r3, #1
 800fc78:	7809      	ldrb	r1, [r1, #0]
 800fc7a:	54d1      	strb	r1, [r2, r3]
    }
}
 800fc7c:	46c0      	nop			; (mov r8, r8)
 800fc7e:	46bd      	mov	sp, r7
 800fc80:	b004      	add	sp, #16
 800fc82:	bd80      	pop	{r7, pc}
 800fc84:	20000708 	.word	0x20000708

0800fc88 <CalcNextV10X>:

#include <drivers/lorawan/mac/region/Region.h>
#include <drivers/lorawan/mac/LoRaMacAdr.h>

static bool CalcNextV10X( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 800fc88:	b590      	push	{r4, r7, lr}
 800fc8a:	b08b      	sub	sp, #44	; 0x2c
 800fc8c:	af00      	add	r7, sp, #0
 800fc8e:	60f8      	str	r0, [r7, #12]
 800fc90:	60b9      	str	r1, [r7, #8]
 800fc92:	607a      	str	r2, [r7, #4]
 800fc94:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
 800fc96:	2327      	movs	r3, #39	; 0x27
 800fc98:	18fb      	adds	r3, r7, r3
 800fc9a:	2200      	movs	r2, #0
 800fc9c:	701a      	strb	r2, [r3, #0]
    int8_t datarate = adrNext->Datarate;
 800fc9e:	2326      	movs	r3, #38	; 0x26
 800fca0:	18fb      	adds	r3, r7, r3
 800fca2:	68fa      	ldr	r2, [r7, #12]
 800fca4:	7c12      	ldrb	r2, [r2, #16]
 800fca6:	701a      	strb	r2, [r3, #0]
    int8_t txPower = adrNext->TxPower;
 800fca8:	2325      	movs	r3, #37	; 0x25
 800fcaa:	18fb      	adds	r3, r7, r3
 800fcac:	68fa      	ldr	r2, [r7, #12]
 800fcae:	7c52      	ldrb	r2, [r2, #17]
 800fcb0:	701a      	strb	r2, [r3, #0]
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 800fcb2:	68fb      	ldr	r3, [r7, #12]
 800fcb4:	689a      	ldr	r2, [r3, #8]
 800fcb6:	683b      	ldr	r3, [r7, #0]
 800fcb8:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 800fcba:	68fb      	ldr	r3, [r7, #12]
 800fcbc:	795b      	ldrb	r3, [r3, #5]
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	d100      	bne.n	800fcc4 <CalcNextV10X+0x3c>
 800fcc2:	e0a8      	b.n	800fe16 <CalcNextV10X+0x18e>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 800fcc4:	2120      	movs	r1, #32
 800fcc6:	187b      	adds	r3, r7, r1
 800fcc8:	2201      	movs	r2, #1
 800fcca:	701a      	strb	r2, [r3, #0]
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800fccc:	68fb      	ldr	r3, [r7, #12]
 800fcce:	7c9a      	ldrb	r2, [r3, #18]
 800fcd0:	187b      	adds	r3, r7, r1
 800fcd2:	709a      	strb	r2, [r3, #2]
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800fcd4:	68fb      	ldr	r3, [r7, #12]
 800fcd6:	7cdb      	ldrb	r3, [r3, #19]
 800fcd8:	187a      	adds	r2, r7, r1
 800fcda:	0011      	movs	r1, r2
 800fcdc:	0018      	movs	r0, r3
 800fcde:	f003 f8ca 	bl	8012e76 <RegionGetPhyParam>
 800fce2:	0003      	movs	r3, r0
 800fce4:	001a      	movs	r2, r3
 800fce6:	211c      	movs	r1, #28
 800fce8:	187b      	adds	r3, r7, r1
 800fcea:	601a      	str	r2, [r3, #0]
        minTxDatarate = phyParam.Value;
 800fcec:	187b      	adds	r3, r7, r1
 800fcee:	681a      	ldr	r2, [r3, #0]
 800fcf0:	2124      	movs	r1, #36	; 0x24
 800fcf2:	187b      	adds	r3, r7, r1
 800fcf4:	701a      	strb	r2, [r3, #0]
        datarate = MAX( datarate, minTxDatarate );
 800fcf6:	2026      	movs	r0, #38	; 0x26
 800fcf8:	183a      	adds	r2, r7, r0
 800fcfa:	187b      	adds	r3, r7, r1
 800fcfc:	1839      	adds	r1, r7, r0
 800fcfe:	780c      	ldrb	r4, [r1, #0]
 800fd00:	781b      	ldrb	r3, [r3, #0]
 800fd02:	b258      	sxtb	r0, r3
 800fd04:	b261      	sxtb	r1, r4
 800fd06:	4288      	cmp	r0, r1
 800fd08:	da00      	bge.n	800fd0c <CalcNextV10X+0x84>
 800fd0a:	1c23      	adds	r3, r4, #0
 800fd0c:	7013      	strb	r3, [r2, #0]

        if( datarate == minTxDatarate )
 800fd0e:	2326      	movs	r3, #38	; 0x26
 800fd10:	18fa      	adds	r2, r7, r3
 800fd12:	2324      	movs	r3, #36	; 0x24
 800fd14:	18fb      	adds	r3, r7, r3
 800fd16:	7812      	ldrb	r2, [r2, #0]
 800fd18:	b252      	sxtb	r2, r2
 800fd1a:	781b      	ldrb	r3, [r3, #0]
 800fd1c:	b25b      	sxtb	r3, r3
 800fd1e:	429a      	cmp	r2, r3
 800fd20:	d107      	bne.n	800fd32 <CalcNextV10X+0xaa>
        {
            *adrAckCounter = 0;
 800fd22:	683b      	ldr	r3, [r7, #0]
 800fd24:	2200      	movs	r2, #0
 800fd26:	601a      	str	r2, [r3, #0]
            adrAckReq = false;
 800fd28:	2327      	movs	r3, #39	; 0x27
 800fd2a:	18fb      	adds	r3, r7, r3
 800fd2c:	2200      	movs	r2, #0
 800fd2e:	701a      	strb	r2, [r3, #0]
 800fd30:	e071      	b.n	800fe16 <CalcNextV10X+0x18e>
        }
        else
        {
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 800fd32:	68fb      	ldr	r3, [r7, #12]
 800fd34:	689b      	ldr	r3, [r3, #8]
 800fd36:	68fa      	ldr	r2, [r7, #12]
 800fd38:	8992      	ldrh	r2, [r2, #12]
 800fd3a:	4293      	cmp	r3, r2
 800fd3c:	d319      	bcc.n	800fd72 <CalcNextV10X+0xea>
            {
                adrAckReq = true;
 800fd3e:	2327      	movs	r3, #39	; 0x27
 800fd40:	18fb      	adds	r3, r7, r3
 800fd42:	2201      	movs	r2, #1
 800fd44:	701a      	strb	r2, [r3, #0]
                // Set TX Power to maximum
                getPhy.Attribute = PHY_MAX_TX_POWER;
 800fd46:	2120      	movs	r1, #32
 800fd48:	187b      	adds	r3, r7, r1
 800fd4a:	2207      	movs	r2, #7
 800fd4c:	701a      	strb	r2, [r3, #0]
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800fd4e:	68fb      	ldr	r3, [r7, #12]
 800fd50:	7cdb      	ldrb	r3, [r3, #19]
 800fd52:	187a      	adds	r2, r7, r1
 800fd54:	0011      	movs	r1, r2
 800fd56:	0018      	movs	r0, r3
 800fd58:	f003 f88d 	bl	8012e76 <RegionGetPhyParam>
 800fd5c:	0003      	movs	r3, r0
 800fd5e:	001a      	movs	r2, r3
 800fd60:	211c      	movs	r1, #28
 800fd62:	187b      	adds	r3, r7, r1
 800fd64:	601a      	str	r2, [r3, #0]
                txPower = phyParam.Value;
 800fd66:	187b      	adds	r3, r7, r1
 800fd68:	681a      	ldr	r2, [r3, #0]
 800fd6a:	2325      	movs	r3, #37	; 0x25
 800fd6c:	18fb      	adds	r3, r7, r3
 800fd6e:	701a      	strb	r2, [r3, #0]
 800fd70:	e003      	b.n	800fd7a <CalcNextV10X+0xf2>
            }
            else
            {
                adrAckReq = false;
 800fd72:	2327      	movs	r3, #39	; 0x27
 800fd74:	18fb      	adds	r3, r7, r3
 800fd76:	2200      	movs	r2, #0
 800fd78:	701a      	strb	r2, [r3, #0]
            }
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 800fd7a:	68fb      	ldr	r3, [r7, #12]
 800fd7c:	689b      	ldr	r3, [r3, #8]
 800fd7e:	68fa      	ldr	r2, [r7, #12]
 800fd80:	8992      	ldrh	r2, [r2, #12]
 800fd82:	0011      	movs	r1, r2
 800fd84:	68fa      	ldr	r2, [r7, #12]
 800fd86:	89d2      	ldrh	r2, [r2, #14]
 800fd88:	188a      	adds	r2, r1, r2
 800fd8a:	4293      	cmp	r3, r2
 800fd8c:	d343      	bcc.n	800fe16 <CalcNextV10X+0x18e>
            {
                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 800fd8e:	68fb      	ldr	r3, [r7, #12]
 800fd90:	689a      	ldr	r2, [r3, #8]
 800fd92:	68fb      	ldr	r3, [r7, #12]
 800fd94:	89db      	ldrh	r3, [r3, #14]
 800fd96:	0019      	movs	r1, r3
 800fd98:	0010      	movs	r0, r2
 800fd9a:	f7f0 fa43 	bl	8000224 <__aeabi_uidivmod>
 800fd9e:	000b      	movs	r3, r1
 800fda0:	2b01      	cmp	r3, #1
 800fda2:	d138      	bne.n	800fe16 <CalcNextV10X+0x18e>
                {
                    // Decrease the datarate
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 800fda4:	2120      	movs	r1, #32
 800fda6:	187b      	adds	r3, r7, r1
 800fda8:	2221      	movs	r2, #33	; 0x21
 800fdaa:	701a      	strb	r2, [r3, #0]
                    getPhy.Datarate = datarate;
 800fdac:	187b      	adds	r3, r7, r1
 800fdae:	2426      	movs	r4, #38	; 0x26
 800fdb0:	193a      	adds	r2, r7, r4
 800fdb2:	7812      	ldrb	r2, [r2, #0]
 800fdb4:	705a      	strb	r2, [r3, #1]
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800fdb6:	68fb      	ldr	r3, [r7, #12]
 800fdb8:	7c9a      	ldrb	r2, [r3, #18]
 800fdba:	187b      	adds	r3, r7, r1
 800fdbc:	709a      	strb	r2, [r3, #2]
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800fdbe:	68fb      	ldr	r3, [r7, #12]
 800fdc0:	7cdb      	ldrb	r3, [r3, #19]
 800fdc2:	187a      	adds	r2, r7, r1
 800fdc4:	0011      	movs	r1, r2
 800fdc6:	0018      	movs	r0, r3
 800fdc8:	f003 f855 	bl	8012e76 <RegionGetPhyParam>
 800fdcc:	0003      	movs	r3, r0
 800fdce:	001a      	movs	r2, r3
 800fdd0:	211c      	movs	r1, #28
 800fdd2:	187b      	adds	r3, r7, r1
 800fdd4:	601a      	str	r2, [r3, #0]
                    datarate = phyParam.Value;
 800fdd6:	187b      	adds	r3, r7, r1
 800fdd8:	681a      	ldr	r2, [r3, #0]
 800fdda:	193b      	adds	r3, r7, r4
 800fddc:	701a      	strb	r2, [r3, #0]

                    if( datarate == minTxDatarate )
 800fdde:	193a      	adds	r2, r7, r4
 800fde0:	2324      	movs	r3, #36	; 0x24
 800fde2:	18fb      	adds	r3, r7, r3
 800fde4:	7812      	ldrb	r2, [r2, #0]
 800fde6:	b252      	sxtb	r2, r2
 800fde8:	781b      	ldrb	r3, [r3, #0]
 800fdea:	b25b      	sxtb	r3, r3
 800fdec:	429a      	cmp	r2, r3
 800fdee:	d112      	bne.n	800fe16 <CalcNextV10X+0x18e>
                    {
                        // We must set adrAckReq to false as soon as we reach the lowest datarate
                        adrAckReq = false;
 800fdf0:	2327      	movs	r3, #39	; 0x27
 800fdf2:	18fb      	adds	r3, r7, r3
 800fdf4:	2200      	movs	r2, #0
 800fdf6:	701a      	strb	r2, [r3, #0]
                        if( adrNext->UpdateChanMask == true )
 800fdf8:	68fb      	ldr	r3, [r7, #12]
 800fdfa:	791b      	ldrb	r3, [r3, #4]
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	d00a      	beq.n	800fe16 <CalcNextV10X+0x18e>
                        {
                            InitDefaultsParams_t params;
                            params.Type = INIT_TYPE_RESTORE_DEFAULT_CHANNELS;
 800fe00:	2114      	movs	r1, #20
 800fe02:	187b      	adds	r3, r7, r1
 800fe04:	2201      	movs	r2, #1
 800fe06:	711a      	strb	r2, [r3, #4]
                            RegionInitDefaults( adrNext->Region, &params );
 800fe08:	68fb      	ldr	r3, [r7, #12]
 800fe0a:	7cdb      	ldrb	r3, [r3, #19]
 800fe0c:	187a      	adds	r2, r7, r1
 800fe0e:	0011      	movs	r1, r2
 800fe10:	0018      	movs	r0, r3
 800fe12:	f003 f86c 	bl	8012eee <RegionInitDefaults>
                }
            }
        }
    }

    *drOut = datarate;
 800fe16:	68bb      	ldr	r3, [r7, #8]
 800fe18:	2226      	movs	r2, #38	; 0x26
 800fe1a:	18ba      	adds	r2, r7, r2
 800fe1c:	7812      	ldrb	r2, [r2, #0]
 800fe1e:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	2225      	movs	r2, #37	; 0x25
 800fe24:	18ba      	adds	r2, r7, r2
 800fe26:	7812      	ldrb	r2, [r2, #0]
 800fe28:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
 800fe2a:	2327      	movs	r3, #39	; 0x27
 800fe2c:	18fb      	adds	r3, r7, r3
 800fe2e:	781b      	ldrb	r3, [r3, #0]
}
 800fe30:	0018      	movs	r0, r3
 800fe32:	46bd      	mov	sp, r7
 800fe34:	b00b      	add	sp, #44	; 0x2c
 800fe36:	bd90      	pop	{r4, r7, pc}

0800fe38 <LoRaMacAdrCalcNext>:
 * \param [OUT] adrAckCounter The calculated ADR acknowledgement counter.
 *
 * \retval Returns true, if an ADR request should be performed.
 */
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 800fe38:	b580      	push	{r7, lr}
 800fe3a:	b084      	sub	sp, #16
 800fe3c:	af00      	add	r7, sp, #0
 800fe3e:	60f8      	str	r0, [r7, #12]
 800fe40:	60b9      	str	r1, [r7, #8]
 800fe42:	607a      	str	r2, [r7, #4]
 800fe44:	603b      	str	r3, [r7, #0]
    if( adrNext->Version.Fields.Minor == 0 )
 800fe46:	68fb      	ldr	r3, [r7, #12]
 800fe48:	789b      	ldrb	r3, [r3, #2]
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	d107      	bne.n	800fe5e <LoRaMacAdrCalcNext+0x26>
    {
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
 800fe4e:	683b      	ldr	r3, [r7, #0]
 800fe50:	687a      	ldr	r2, [r7, #4]
 800fe52:	68b9      	ldr	r1, [r7, #8]
 800fe54:	68f8      	ldr	r0, [r7, #12]
 800fe56:	f7ff ff17 	bl	800fc88 <CalcNextV10X>
 800fe5a:	0003      	movs	r3, r0
 800fe5c:	e000      	b.n	800fe60 <LoRaMacAdrCalcNext+0x28>
    }
    return false;
 800fe5e:	2300      	movs	r3, #0
}
 800fe60:	0018      	movs	r0, r3
 800fe62:	46bd      	mov	sp, r7
 800fe64:	b004      	add	sp, #16
 800fe66:	bd80      	pop	{r7, pc}

0800fe68 <LoRaMacClassBInit>:
}

#endif // LORAMAC_CLASSB_ENABLED

void LoRaMacClassBInit( LoRaMacClassBParams_t *classBParams, LoRaMacClassBCallback_t *callbacks, EventNvmCtxChanged classBNvmCtxChanged )
{
 800fe68:	b580      	push	{r7, lr}
 800fe6a:	b084      	sub	sp, #16
 800fe6c:	af00      	add	r7, sp, #0
 800fe6e:	60f8      	str	r0, [r7, #12]
 800fe70:	60b9      	str	r1, [r7, #8]
 800fe72:	607a      	str	r2, [r7, #4]
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassBDefaults( );
#endif // LORAMAC_CLASSB_ENABLED
}
 800fe74:	46c0      	nop			; (mov r8, r8)
 800fe76:	46bd      	mov	sp, r7
 800fe78:	b004      	add	sp, #16
 800fe7a:	bd80      	pop	{r7, pc}

0800fe7c <LoRaMacClassBRestoreNvmCtx>:

bool LoRaMacClassBRestoreNvmCtx( void* classBNvmCtx )
{
 800fe7c:	b580      	push	{r7, lr}
 800fe7e:	b082      	sub	sp, #8
 800fe80:	af00      	add	r7, sp, #0
 800fe82:	6078      	str	r0, [r7, #4]
    else
    {
        return false;
    }
#else
    return true;
 800fe84:	2301      	movs	r3, #1
#endif // LORAMAC_CLASSB_ENABLED
}
 800fe86:	0018      	movs	r0, r3
 800fe88:	46bd      	mov	sp, r7
 800fe8a:	b002      	add	sp, #8
 800fe8c:	bd80      	pop	{r7, pc}

0800fe8e <LoRaMacClassBGetNvmCtx>:

void* LoRaMacClassBGetNvmCtx( size_t* classBNvmCtxSize )
{
 800fe8e:	b580      	push	{r7, lr}
 800fe90:	b082      	sub	sp, #8
 800fe92:	af00      	add	r7, sp, #0
 800fe94:	6078      	str	r0, [r7, #4]
#ifdef LORAMAC_CLASSB_ENABLED
    *classBNvmCtxSize = sizeof( NvmCtx );
    return &NvmCtx;
#else
    *classBNvmCtxSize = 0;
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	2200      	movs	r2, #0
 800fe9a:	601a      	str	r2, [r3, #0]
    return NULL;
 800fe9c:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 800fe9e:	0018      	movs	r0, r3
 800fea0:	46bd      	mov	sp, r7
 800fea2:	b002      	add	sp, #8
 800fea4:	bd80      	pop	{r7, pc}

0800fea6 <LoRaMacClassBSetBeaconState>:

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
 800fea6:	b580      	push	{r7, lr}
 800fea8:	b082      	sub	sp, #8
 800feaa:	af00      	add	r7, sp, #0
 800feac:	0002      	movs	r2, r0
 800feae:	1dfb      	adds	r3, r7, #7
 800feb0:	701a      	strb	r2, [r3, #0]
    }

    NvmContextChange( );

#endif // LORAMAC_CLASSB_ENABLED
}
 800feb2:	46c0      	nop			; (mov r8, r8)
 800feb4:	46bd      	mov	sp, r7
 800feb6:	b002      	add	sp, #8
 800feb8:	bd80      	pop	{r7, pc}

0800feba <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
 800feba:	b580      	push	{r7, lr}
 800febc:	b082      	sub	sp, #8
 800febe:	af00      	add	r7, sp, #0
 800fec0:	0002      	movs	r2, r0
 800fec2:	1dfb      	adds	r3, r7, #7
 800fec4:	701a      	strb	r2, [r3, #0]
#ifdef LORAMAC_CLASSB_ENABLED
    Ctx.NvmCtx->PingSlotState = pingSlotState;
    NvmContextChange( );
#endif // LORAMAC_CLASSB_ENABLED
}
 800fec6:	46c0      	nop			; (mov r8, r8)
 800fec8:	46bd      	mov	sp, r7
 800feca:	b002      	add	sp, #8
 800fecc:	bd80      	pop	{r7, pc}

0800fece <LoRaMacClassBSetMulticastSlotState>:

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
 800fece:	b580      	push	{r7, lr}
 800fed0:	b082      	sub	sp, #8
 800fed2:	af00      	add	r7, sp, #0
 800fed4:	0002      	movs	r2, r0
 800fed6:	1dfb      	adds	r3, r7, #7
 800fed8:	701a      	strb	r2, [r3, #0]
#ifdef LORAMAC_CLASSB_ENABLED
    Ctx.NvmCtx->MulticastSlotState = multicastSlotState;
    NvmContextChange( );
#endif // LORAMAC_CLASSB_ENABLED
}
 800feda:	46c0      	nop			; (mov r8, r8)
 800fedc:	46bd      	mov	sp, r7
 800fede:	b002      	add	sp, #8
 800fee0:	bd80      	pop	{r7, pc}

0800fee2 <LoRaMacClassBIsAcquisitionInProgress>:

bool LoRaMacClassBIsAcquisitionInProgress( void )
{
 800fee2:	b580      	push	{r7, lr}
 800fee4:	af00      	add	r7, sp, #0
        // searches for a beacon.
        return true;
    }
    return false;
#else
    return false;
 800fee6:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 800fee8:	0018      	movs	r0, r3
 800feea:	46bd      	mov	sp, r7
 800feec:	bd80      	pop	{r7, pc}

0800feee <LoRaMacClassBBeaconTimerEvent>:

void LoRaMacClassBBeaconTimerEvent( void* context )
{
 800feee:	b580      	push	{r7, lr}
 800fef0:	b082      	sub	sp, #8
 800fef2:	af00      	add	r7, sp, #0
 800fef4:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 800fef6:	46c0      	nop			; (mov r8, r8)
 800fef8:	46bd      	mov	sp, r7
 800fefa:	b002      	add	sp, #8
 800fefc:	bd80      	pop	{r7, pc}

0800fefe <LoRaMacClassBPingSlotTimerEvent>:
    NvmContextChange( );
}
#endif // LORAMAC_CLASSB_ENABLED

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
 800fefe:	b580      	push	{r7, lr}
 800ff00:	b082      	sub	sp, #8
 800ff02:	af00      	add	r7, sp, #0
 800ff04:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 800ff06:	46c0      	nop			; (mov r8, r8)
 800ff08:	46bd      	mov	sp, r7
 800ff0a:	b002      	add	sp, #8
 800ff0c:	bd80      	pop	{r7, pc}

0800ff0e <LoRaMacClassBMulticastSlotTimerEvent>:
    NvmContextChange( );
}
#endif // LORAMAC_CLASSB_ENABLED

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
 800ff0e:	b580      	push	{r7, lr}
 800ff10:	b082      	sub	sp, #8
 800ff12:	af00      	add	r7, sp, #0
 800ff14:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 800ff16:	46c0      	nop			; (mov r8, r8)
 800ff18:	46bd      	mov	sp, r7
 800ff1a:	b002      	add	sp, #8
 800ff1c:	bd80      	pop	{r7, pc}

0800ff1e <LoRaMacClassBRxBeacon>:
    NvmContextChange( );
}
#endif // LORAMAC_CLASSB_ENABLED

bool LoRaMacClassBRxBeacon( uint8_t *payload, uint16_t size )
{
 800ff1e:	b580      	push	{r7, lr}
 800ff20:	b082      	sub	sp, #8
 800ff22:	af00      	add	r7, sp, #0
 800ff24:	6078      	str	r0, [r7, #4]
 800ff26:	000a      	movs	r2, r1
 800ff28:	1cbb      	adds	r3, r7, #2
 800ff2a:	801a      	strh	r2, [r3, #0]

    NvmContextChange( );

    return beaconProcessed;
#else
    return false;
 800ff2c:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 800ff2e:	0018      	movs	r0, r3
 800ff30:	46bd      	mov	sp, r7
 800ff32:	b002      	add	sp, #8
 800ff34:	bd80      	pop	{r7, pc}

0800ff36 <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
 800ff36:	b580      	push	{r7, lr}
 800ff38:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 800ff3a:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 800ff3c:	0018      	movs	r0, r3
 800ff3e:	46bd      	mov	sp, r7
 800ff40:	bd80      	pop	{r7, pc}

0800ff42 <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
 800ff42:	b580      	push	{r7, lr}
 800ff44:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 800ff46:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 800ff48:	0018      	movs	r0, r3
 800ff4a:	46bd      	mov	sp, r7
 800ff4c:	bd80      	pop	{r7, pc}

0800ff4e <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
 800ff4e:	b580      	push	{r7, lr}
 800ff50:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 800ff52:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 800ff54:	0018      	movs	r0, r3
 800ff56:	46bd      	mov	sp, r7
 800ff58:	bd80      	pop	{r7, pc}

0800ff5a <LoRaMacClassBIsBeaconModeActive>:
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}

bool LoRaMacClassBIsBeaconModeActive( void )
{
 800ff5a:	b580      	push	{r7, lr}
 800ff5c:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 800ff5e:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 800ff60:	0018      	movs	r0, r3
 800ff62:	46bd      	mov	sp, r7
 800ff64:	bd80      	pop	{r7, pc}

0800ff66 <LoRaMacClassBSetPingSlotInfo>:

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
 800ff66:	b580      	push	{r7, lr}
 800ff68:	b082      	sub	sp, #8
 800ff6a:	af00      	add	r7, sp, #0
 800ff6c:	0002      	movs	r2, r0
 800ff6e:	1dfb      	adds	r3, r7, #7
 800ff70:	701a      	strb	r2, [r3, #0]
#ifdef LORAMAC_CLASSB_ENABLED
    Ctx.NvmCtx->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    Ctx.NvmCtx->PingSlotCtx.PingPeriod = CalcPingPeriod( Ctx.NvmCtx->PingSlotCtx.PingNb );
    NvmContextChange( );
#endif // LORAMAC_CLASSB_ENABLED
}
 800ff72:	46c0      	nop			; (mov r8, r8)
 800ff74:	46bd      	mov	sp, r7
 800ff76:	b002      	add	sp, #8
 800ff78:	bd80      	pop	{r7, pc}

0800ff7a <LoRaMacClassBHaltBeaconing>:

void LoRaMacClassBHaltBeaconing( void )
{
 800ff7a:	b580      	push	{r7, lr}
 800ff7c:	af00      	add	r7, sp, #0
        LoRaMacClassBStopRxSlots( );

        NvmContextChange( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 800ff7e:	46c0      	nop			; (mov r8, r8)
 800ff80:	46bd      	mov	sp, r7
 800ff82:	bd80      	pop	{r7, pc}

0800ff84 <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
{
 800ff84:	b580      	push	{r7, lr}
 800ff86:	af00      	add	r7, sp, #0

        LoRaMacClassBBeaconTimerEvent( NULL );
        NvmContextChange( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 800ff88:	46c0      	nop			; (mov r8, r8)
 800ff8a:	46bd      	mov	sp, r7
 800ff8c:	bd80      	pop	{r7, pc}

0800ff8e <LoRaMacClassBSwitchClass>:

LoRaMacStatus_t LoRaMacClassBSwitchClass( DeviceClass_t nextClass )
{
 800ff8e:	b580      	push	{r7, lr}
 800ff90:	b082      	sub	sp, #8
 800ff92:	af00      	add	r7, sp, #0
 800ff94:	0002      	movs	r2, r0
 800ff96:	1dfb      	adds	r3, r7, #7
 800ff98:	701a      	strb	r2, [r3, #0]

        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 800ff9a:	2302      	movs	r3, #2
#endif // LORAMAC_CLASSB_ENABLED
}
 800ff9c:	0018      	movs	r0, r3
 800ff9e:	46bd      	mov	sp, r7
 800ffa0:	b002      	add	sp, #8
 800ffa2:	bd80      	pop	{r7, pc}

0800ffa4 <LoRaMacClassBMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 800ffa4:	b580      	push	{r7, lr}
 800ffa6:	b082      	sub	sp, #8
 800ffa8:	af00      	add	r7, sp, #0
 800ffaa:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 800ffac:	2302      	movs	r3, #2
#endif // LORAMAC_CLASSB_ENABLED
}
 800ffae:	0018      	movs	r0, r3
 800ffb0:	46bd      	mov	sp, r7
 800ffb2:	b002      	add	sp, #8
 800ffb4:	bd80      	pop	{r7, pc}

0800ffb6 <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 800ffb6:	b580      	push	{r7, lr}
 800ffb8:	b082      	sub	sp, #8
 800ffba:	af00      	add	r7, sp, #0
 800ffbc:	6078      	str	r0, [r7, #4]
        }
    }
    NvmContextChange( );
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 800ffbe:	2302      	movs	r3, #2
#endif // LORAMAC_CLASSB_ENABLED
}
 800ffc0:	0018      	movs	r0, r3
 800ffc2:	46bd      	mov	sp, r7
 800ffc4:	b002      	add	sp, #8
 800ffc6:	bd80      	pop	{r7, pc}

0800ffc8 <LoRaMacClassBPingSlotInfoAns>:

void LoRaMacClassBPingSlotInfoAns( void )
{
 800ffc8:	b580      	push	{r7, lr}
 800ffca:	af00      	add	r7, sp, #0
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        Ctx.NvmCtx->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 800ffcc:	46c0      	nop			; (mov r8, r8)
 800ffce:	46bd      	mov	sp, r7
 800ffd0:	bd80      	pop	{r7, pc}

0800ffd2 <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
 800ffd2:	b580      	push	{r7, lr}
 800ffd4:	b082      	sub	sp, #8
 800ffd6:	af00      	add	r7, sp, #0
 800ffd8:	0002      	movs	r2, r0
 800ffda:	6039      	str	r1, [r7, #0]
 800ffdc:	1dfb      	adds	r3, r7, #7
 800ffde:	701a      	strb	r2, [r3, #0]
        NvmContextChange( );
    }

    return status;
#else
    return 0;
 800ffe0:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 800ffe2:	0018      	movs	r0, r3
 800ffe4:	46bd      	mov	sp, r7
 800ffe6:	b002      	add	sp, #8
 800ffe8:	bd80      	pop	{r7, pc}

0800ffea <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
 800ffea:	b580      	push	{r7, lr}
 800ffec:	b082      	sub	sp, #8
 800ffee:	af00      	add	r7, sp, #0
 800fff0:	603a      	str	r2, [r7, #0]
 800fff2:	1dbb      	adds	r3, r7, #6
 800fff4:	1c02      	adds	r2, r0, #0
 800fff6:	801a      	strh	r2, [r3, #0]
 800fff8:	1d7b      	adds	r3, r7, #5
 800fffa:	1c0a      	adds	r2, r1, #0
 800fffc:	701a      	strb	r2, [r3, #0]
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.NvmCtx->BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.NvmCtx->BeaconCtx.BeaconTimingChannel;
    }
    NvmContextChange( );
#endif // LORAMAC_CLASSB_ENABLED
}
 800fffe:	46c0      	nop			; (mov r8, r8)
 8010000:	46bd      	mov	sp, r7
 8010002:	b002      	add	sp, #8
 8010004:	bd80      	pop	{r7, pc}

08010006 <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
 8010006:	b580      	push	{r7, lr}
 8010008:	af00      	add	r7, sp, #0
        }
    }

    NvmContextChange( );
#endif // LORAMAC_CLASSB_ENABLED
}
 801000a:	46c0      	nop			; (mov r8, r8)
 801000c:	46bd      	mov	sp, r7
 801000e:	bd80      	pop	{r7, pc}

08010010 <LoRaMacClassBBeaconFreqReq>:

bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
 8010010:	b580      	push	{r7, lr}
 8010012:	b082      	sub	sp, #8
 8010014:	af00      	add	r7, sp, #0
 8010016:	6078      	str	r0, [r7, #4]
        return true;
    }
    NvmContextChange( );
    return false;
#else
    return false;
 8010018:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 801001a:	0018      	movs	r0, r3
 801001c:	46bd      	mov	sp, r7
 801001e:	b002      	add	sp, #8
 8010020:	bd80      	pop	{r7, pc}

08010022 <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 8010022:	b580      	push	{r7, lr}
 8010024:	b082      	sub	sp, #8
 8010026:	af00      	add	r7, sp, #0
 8010028:	6078      	str	r0, [r7, #4]
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
#else
    return 0;
 801002a:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 801002c:	0018      	movs	r0, r3
 801002e:	46bd      	mov	sp, r7
 8010030:	b002      	add	sp, #8
 8010032:	bd80      	pop	{r7, pc}

08010034 <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 8010034:	b580      	push	{r7, lr}
 8010036:	af00      	add	r7, sp, #0
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif // LORAMAC_CLASSB_ENABLED
}
 8010038:	46c0      	nop			; (mov r8, r8)
 801003a:	46bd      	mov	sp, r7
 801003c:	bd80      	pop	{r7, pc}

0801003e <LoRaMacClassBProcess>:
    }
#endif // LORAMAC_CLASSB_ENABLED
}

void LoRaMacClassBProcess( void )
{
 801003e:	b580      	push	{r7, lr}
 8010040:	af00      	add	r7, sp, #0
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 8010042:	46c0      	nop			; (mov r8, r8)
 8010044:	46bd      	mov	sp, r7
 8010046:	bd80      	pop	{r7, pc}

08010048 <isSlotFree>:
 *
 * \param[IN]     slot           - Slot to check
 * \retval                       - Status of the operation
 */
bool isSlotFree( const MacCommand_t* slot )
{
 8010048:	b580      	push	{r7, lr}
 801004a:	b084      	sub	sp, #16
 801004c:	af00      	add	r7, sp, #0
 801004e:	6078      	str	r0, [r7, #4]
    uint8_t* mem = (uint8_t*) slot;
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8010054:	230e      	movs	r3, #14
 8010056:	18fb      	adds	r3, r7, r3
 8010058:	2200      	movs	r2, #0
 801005a:	801a      	strh	r2, [r3, #0]
 801005c:	e00f      	b.n	801007e <isSlotFree+0x36>
    {
        if( mem[size] != 0x00 )
 801005e:	230e      	movs	r3, #14
 8010060:	18fb      	adds	r3, r7, r3
 8010062:	881b      	ldrh	r3, [r3, #0]
 8010064:	68ba      	ldr	r2, [r7, #8]
 8010066:	18d3      	adds	r3, r2, r3
 8010068:	781b      	ldrb	r3, [r3, #0]
 801006a:	2b00      	cmp	r3, #0
 801006c:	d001      	beq.n	8010072 <isSlotFree+0x2a>
        {
            return false;
 801006e:	2300      	movs	r3, #0
 8010070:	e00b      	b.n	801008a <isSlotFree+0x42>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8010072:	210e      	movs	r1, #14
 8010074:	187b      	adds	r3, r7, r1
 8010076:	881a      	ldrh	r2, [r3, #0]
 8010078:	187b      	adds	r3, r7, r1
 801007a:	3201      	adds	r2, #1
 801007c:	801a      	strh	r2, [r3, #0]
 801007e:	230e      	movs	r3, #14
 8010080:	18fb      	adds	r3, r7, r3
 8010082:	881b      	ldrh	r3, [r3, #0]
 8010084:	2b0f      	cmp	r3, #15
 8010086:	d9ea      	bls.n	801005e <isSlotFree+0x16>
        }
    }
    return true;
 8010088:	2301      	movs	r3, #1
}
 801008a:	0018      	movs	r0, r3
 801008c:	46bd      	mov	sp, r7
 801008e:	b004      	add	sp, #16
 8010090:	bd80      	pop	{r7, pc}
	...

08010094 <mallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
MacCommand_t* mallocNewMacCommandSlot( )
{
 8010094:	b580      	push	{r7, lr}
 8010096:	b082      	sub	sp, #8
 8010098:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
 801009a:	1dfb      	adds	r3, r7, #7
 801009c:	2200      	movs	r2, #0
 801009e:	701a      	strb	r2, [r3, #0]

    while( isSlotFree( ( const MacCommand_t* ) &NvmCtx.MacCommandSlots[itr]) == false )
 80100a0:	e00a      	b.n	80100b8 <mallocNewMacCommandSlot+0x24>
    {
        itr++;
 80100a2:	1dfb      	adds	r3, r7, #7
 80100a4:	781a      	ldrb	r2, [r3, #0]
 80100a6:	1dfb      	adds	r3, r7, #7
 80100a8:	3201      	adds	r2, #1
 80100aa:	701a      	strb	r2, [r3, #0]
        if( itr == NUM_OF_MAC_COMMANDS )
 80100ac:	1dfb      	adds	r3, r7, #7
 80100ae:	781b      	ldrb	r3, [r3, #0]
 80100b0:	2b0f      	cmp	r3, #15
 80100b2:	d101      	bne.n	80100b8 <mallocNewMacCommandSlot+0x24>
        {
            return 0;
 80100b4:	2300      	movs	r3, #0
 80100b6:	e017      	b.n	80100e8 <mallocNewMacCommandSlot+0x54>
    while( isSlotFree( ( const MacCommand_t* ) &NvmCtx.MacCommandSlots[itr]) == false )
 80100b8:	1dfb      	adds	r3, r7, #7
 80100ba:	781b      	ldrb	r3, [r3, #0]
 80100bc:	011b      	lsls	r3, r3, #4
 80100be:	3308      	adds	r3, #8
 80100c0:	001a      	movs	r2, r3
 80100c2:	4b0b      	ldr	r3, [pc, #44]	; (80100f0 <mallocNewMacCommandSlot+0x5c>)
 80100c4:	18d3      	adds	r3, r2, r3
 80100c6:	0018      	movs	r0, r3
 80100c8:	f7ff ffbe 	bl	8010048 <isSlotFree>
 80100cc:	0003      	movs	r3, r0
 80100ce:	001a      	movs	r2, r3
 80100d0:	2301      	movs	r3, #1
 80100d2:	4053      	eors	r3, r2
 80100d4:	b2db      	uxtb	r3, r3
 80100d6:	2b00      	cmp	r3, #0
 80100d8:	d1e3      	bne.n	80100a2 <mallocNewMacCommandSlot+0xe>
        }
    }

    return &NvmCtx.MacCommandSlots[itr];
 80100da:	1dfb      	adds	r3, r7, #7
 80100dc:	781b      	ldrb	r3, [r3, #0]
 80100de:	011b      	lsls	r3, r3, #4
 80100e0:	3308      	adds	r3, #8
 80100e2:	001a      	movs	r2, r3
 80100e4:	4b02      	ldr	r3, [pc, #8]	; (80100f0 <mallocNewMacCommandSlot+0x5c>)
 80100e6:	18d3      	adds	r3, r2, r3
}
 80100e8:	0018      	movs	r0, r3
 80100ea:	46bd      	mov	sp, r7
 80100ec:	b002      	add	sp, #8
 80100ee:	bd80      	pop	{r7, pc}
 80100f0:	20000db0 	.word	0x20000db0

080100f4 <freeMacCommandSlot>:
 * \param[IN]     slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
bool freeMacCommandSlot( MacCommand_t* slot )
{
 80100f4:	b580      	push	{r7, lr}
 80100f6:	b082      	sub	sp, #8
 80100f8:	af00      	add	r7, sp, #0
 80100fa:	6078      	str	r0, [r7, #4]
    if( slot == 0 )
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	2b00      	cmp	r3, #0
 8010100:	d101      	bne.n	8010106 <freeMacCommandSlot+0x12>
    {
        return false;
 8010102:	2300      	movs	r3, #0
 8010104:	e006      	b.n	8010114 <freeMacCommandSlot+0x20>
    }

    memset1( (uint8_t*) slot, 0x00, sizeof( MacCommand_t ));
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	2210      	movs	r2, #16
 801010a:	2100      	movs	r1, #0
 801010c:	0018      	movs	r0, r3
 801010e:	f005 fcab 	bl	8015a68 <memset1>

    return true;
 8010112:	2301      	movs	r3, #1
}
 8010114:	0018      	movs	r0, r3
 8010116:	46bd      	mov	sp, r7
 8010118:	b002      	add	sp, #8
 801011a:	bd80      	pop	{r7, pc}

0801011c <linkedListInit>:
 *
 * \param[IN]     list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool linkedListInit( MacCommandsList_t* list )
{
 801011c:	b580      	push	{r7, lr}
 801011e:	b082      	sub	sp, #8
 8010120:	af00      	add	r7, sp, #0
 8010122:	6078      	str	r0, [r7, #4]
    if( list == 0 )
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	2b00      	cmp	r3, #0
 8010128:	d101      	bne.n	801012e <linkedListInit+0x12>
    {
        return false;
 801012a:	2300      	movs	r3, #0
 801012c:	e006      	b.n	801013c <linkedListInit+0x20>
    }

    list->First = 0;
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	2200      	movs	r2, #0
 8010132:	601a      	str	r2, [r3, #0]
    list->Last = 0;
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	2200      	movs	r2, #0
 8010138:	605a      	str	r2, [r3, #4]

    return true;
 801013a:	2301      	movs	r3, #1
}
 801013c:	0018      	movs	r0, r3
 801013e:	46bd      	mov	sp, r7
 8010140:	b002      	add	sp, #8
 8010142:	bd80      	pop	{r7, pc}

08010144 <linkedListAdd>:
 * \param[IN]     list           - List where the element shall be added.
 * \param[IN]     element        - Element to add
 * \retval                       - Status of the operation
 */
static bool linkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
 8010144:	b580      	push	{r7, lr}
 8010146:	b082      	sub	sp, #8
 8010148:	af00      	add	r7, sp, #0
 801014a:	6078      	str	r0, [r7, #4]
 801014c:	6039      	str	r1, [r7, #0]
    if( ( list == 0 ) && ( element == 0 ) )
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	2b00      	cmp	r3, #0
 8010152:	d104      	bne.n	801015e <linkedListAdd+0x1a>
 8010154:	683b      	ldr	r3, [r7, #0]
 8010156:	2b00      	cmp	r3, #0
 8010158:	d101      	bne.n	801015e <linkedListAdd+0x1a>
    {
        return false;
 801015a:	2300      	movs	r3, #0
 801015c:	e015      	b.n	801018a <linkedListAdd+0x46>
    }

    /* Check if this is the first entry to enter the list. */
    if( list->First == 0 )
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	681b      	ldr	r3, [r3, #0]
 8010162:	2b00      	cmp	r3, #0
 8010164:	d102      	bne.n	801016c <linkedListAdd+0x28>
    {
        list->First = element;
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	683a      	ldr	r2, [r7, #0]
 801016a:	601a      	str	r2, [r3, #0]
    }

    /* Check if the last entry exists and update its next point. */
    if( list->Last )
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	685b      	ldr	r3, [r3, #4]
 8010170:	2b00      	cmp	r3, #0
 8010172:	d003      	beq.n	801017c <linkedListAdd+0x38>
    {
        list->Last->Next = element;
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	685b      	ldr	r3, [r3, #4]
 8010178:	683a      	ldr	r2, [r7, #0]
 801017a:	601a      	str	r2, [r3, #0]
    }

    /* Update the next point of this entry. */
    element->Next = 0;
 801017c:	683b      	ldr	r3, [r7, #0]
 801017e:	2200      	movs	r2, #0
 8010180:	601a      	str	r2, [r3, #0]

    /* Update the last entry of the list. */
    list->Last = element;
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	683a      	ldr	r2, [r7, #0]
 8010186:	605a      	str	r2, [r3, #4]

    return true;
 8010188:	2301      	movs	r3, #1
}
 801018a:	0018      	movs	r0, r3
 801018c:	46bd      	mov	sp, r7
 801018e:	b002      	add	sp, #8
 8010190:	bd80      	pop	{r7, pc}

08010192 <linkedListGetPrevious>:
 * \param[IN]     list           - List
 * \param[IN]     element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* linkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
 8010192:	b580      	push	{r7, lr}
 8010194:	b084      	sub	sp, #16
 8010196:	af00      	add	r7, sp, #0
 8010198:	6078      	str	r0, [r7, #4]
 801019a:	6039      	str	r1, [r7, #0]
    if( ( list == 0 ) && ( element == 0 ) )
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	2b00      	cmp	r3, #0
 80101a0:	d104      	bne.n	80101ac <linkedListGetPrevious+0x1a>
 80101a2:	683b      	ldr	r3, [r7, #0]
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	d101      	bne.n	80101ac <linkedListGetPrevious+0x1a>
    {
        return NULL;
 80101a8:	2300      	movs	r3, #0
 80101aa:	e016      	b.n	80101da <linkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	681b      	ldr	r3, [r3, #0]
 80101b0:	60fb      	str	r3, [r7, #12]

    /*
     * When current element is the first of the list, there's no previous element so we can return NULL immediately.
     */
    if( element != curElement)
 80101b2:	683a      	ldr	r2, [r7, #0]
 80101b4:	68fb      	ldr	r3, [r7, #12]
 80101b6:	429a      	cmp	r2, r3
 80101b8:	d00c      	beq.n	80101d4 <linkedListGetPrevious+0x42>
    {

        // Loop through all elements until the end is reached or the next of current is the current element.
        while(curElement && (curElement->Next != element))
 80101ba:	e002      	b.n	80101c2 <linkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
 80101bc:	68fb      	ldr	r3, [r7, #12]
 80101be:	681b      	ldr	r3, [r3, #0]
 80101c0:	60fb      	str	r3, [r7, #12]
        while(curElement && (curElement->Next != element))
 80101c2:	68fb      	ldr	r3, [r7, #12]
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	d007      	beq.n	80101d8 <linkedListGetPrevious+0x46>
 80101c8:	68fb      	ldr	r3, [r7, #12]
 80101ca:	681b      	ldr	r3, [r3, #0]
 80101cc:	683a      	ldr	r2, [r7, #0]
 80101ce:	429a      	cmp	r2, r3
 80101d0:	d1f4      	bne.n	80101bc <linkedListGetPrevious+0x2a>
 80101d2:	e001      	b.n	80101d8 <linkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
 80101d4:	2300      	movs	r3, #0
 80101d6:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
 80101d8:	68fb      	ldr	r3, [r7, #12]
}
 80101da:	0018      	movs	r0, r3
 80101dc:	46bd      	mov	sp, r7
 80101de:	b004      	add	sp, #16
 80101e0:	bd80      	pop	{r7, pc}

080101e2 <linkedListRemove>:
 * \param[IN]     list           - List where the element shall be removed from.
 * \param[IN]     element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool linkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
 80101e2:	b580      	push	{r7, lr}
 80101e4:	b084      	sub	sp, #16
 80101e6:	af00      	add	r7, sp, #0
 80101e8:	6078      	str	r0, [r7, #4]
 80101ea:	6039      	str	r1, [r7, #0]
    if( ( list == 0 ) && ( element == 0 ) )
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	d104      	bne.n	80101fc <linkedListRemove+0x1a>
 80101f2:	683b      	ldr	r3, [r7, #0]
 80101f4:	2b00      	cmp	r3, #0
 80101f6:	d101      	bne.n	80101fc <linkedListRemove+0x1a>
    {
        return false;
 80101f8:	2300      	movs	r3, #0
 80101fa:	e023      	b.n	8010244 <linkedListRemove+0x62>
    }

    MacCommand_t* PrevElement = linkedListGetPrevious( list, element );
 80101fc:	683a      	ldr	r2, [r7, #0]
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	0011      	movs	r1, r2
 8010202:	0018      	movs	r0, r3
 8010204:	f7ff ffc5 	bl	8010192 <linkedListGetPrevious>
 8010208:	0003      	movs	r3, r0
 801020a:	60fb      	str	r3, [r7, #12]

    if( list->First == element )
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	681b      	ldr	r3, [r3, #0]
 8010210:	683a      	ldr	r2, [r7, #0]
 8010212:	429a      	cmp	r2, r3
 8010214:	d103      	bne.n	801021e <linkedListRemove+0x3c>
    {
        list->First = element->Next;
 8010216:	683b      	ldr	r3, [r7, #0]
 8010218:	681a      	ldr	r2, [r3, #0]
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	685b      	ldr	r3, [r3, #4]
 8010222:	683a      	ldr	r2, [r7, #0]
 8010224:	429a      	cmp	r2, r3
 8010226:	d102      	bne.n	801022e <linkedListRemove+0x4c>
    {
        list->Last = PrevElement;
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	68fa      	ldr	r2, [r7, #12]
 801022c:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement )
 801022e:	68fb      	ldr	r3, [r7, #12]
 8010230:	2b00      	cmp	r3, #0
 8010232:	d003      	beq.n	801023c <linkedListRemove+0x5a>
    {
        PrevElement->Next = element->Next;
 8010234:	683b      	ldr	r3, [r7, #0]
 8010236:	681a      	ldr	r2, [r3, #0]
 8010238:	68fb      	ldr	r3, [r7, #12]
 801023a:	601a      	str	r2, [r3, #0]
    }

    element->Next = 0;
 801023c:	683b      	ldr	r3, [r7, #0]
 801023e:	2200      	movs	r2, #0
 8010240:	601a      	str	r2, [r3, #0]

    return true;
 8010242:	2301      	movs	r3, #1
}
 8010244:	0018      	movs	r0, r3
 8010246:	46bd      	mov	sp, r7
 8010248:	b004      	add	sp, #16
 801024a:	bd80      	pop	{r7, pc}

0801024c <IsSticky>:
 * \param[IN]   cid                - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
 801024c:	b580      	push	{r7, lr}
 801024e:	b082      	sub	sp, #8
 8010250:	af00      	add	r7, sp, #0
 8010252:	0002      	movs	r2, r0
 8010254:	1dfb      	adds	r3, r7, #7
 8010256:	701a      	strb	r2, [r3, #0]
    switch( cid )
 8010258:	1dfb      	adds	r3, r7, #7
 801025a:	781b      	ldrb	r3, [r3, #0]
 801025c:	2b08      	cmp	r3, #8
 801025e:	d003      	beq.n	8010268 <IsSticky+0x1c>
 8010260:	2b0a      	cmp	r3, #10
 8010262:	d001      	beq.n	8010268 <IsSticky+0x1c>
 8010264:	2b05      	cmp	r3, #5
 8010266:	d101      	bne.n	801026c <IsSticky+0x20>
    {
        case MOTE_MAC_DL_CHANNEL_ANS:
        case MOTE_MAC_RX_PARAM_SETUP_ANS:
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
            return true;
 8010268:	2301      	movs	r3, #1
 801026a:	e000      	b.n	801026e <IsSticky+0x22>
        default:
            return false;
 801026c:	2300      	movs	r3, #0
    }
}
 801026e:	0018      	movs	r0, r3
 8010270:	46bd      	mov	sp, r7
 8010272:	b002      	add	sp, #8
 8010274:	bd80      	pop	{r7, pc}
	...

08010278 <NvmCtxCallback>:

/*
 * \brief Wrapper function for the NvmCtx
 */
static void NvmCtxCallback( void )
{
 8010278:	b580      	push	{r7, lr}
 801027a:	af00      	add	r7, sp, #0
    if( CommandsNvmCtxChanged != NULL )
 801027c:	4b04      	ldr	r3, [pc, #16]	; (8010290 <NvmCtxCallback+0x18>)
 801027e:	681b      	ldr	r3, [r3, #0]
 8010280:	2b00      	cmp	r3, #0
 8010282:	d002      	beq.n	801028a <NvmCtxCallback+0x12>
    {
        CommandsNvmCtxChanged( );
 8010284:	4b02      	ldr	r3, [pc, #8]	; (8010290 <NvmCtxCallback+0x18>)
 8010286:	681b      	ldr	r3, [r3, #0]
 8010288:	4798      	blx	r3
    }
}
 801028a:	46c0      	nop			; (mov r8, r8)
 801028c:	46bd      	mov	sp, r7
 801028e:	bd80      	pop	{r7, pc}
 8010290:	20000dac 	.word	0x20000dac

08010294 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( EventNvmCtxChanged commandsNvmCtxChanged )
{
 8010294:	b580      	push	{r7, lr}
 8010296:	b082      	sub	sp, #8
 8010298:	af00      	add	r7, sp, #0
 801029a:	6078      	str	r0, [r7, #4]

    // Initialize with default
    memset1( (uint8_t*)&NvmCtx, 0, sizeof( NvmCtx ) );
 801029c:	4b08      	ldr	r3, [pc, #32]	; (80102c0 <LoRaMacCommandsInit+0x2c>)
 801029e:	22fc      	movs	r2, #252	; 0xfc
 80102a0:	2100      	movs	r1, #0
 80102a2:	0018      	movs	r0, r3
 80102a4:	f005 fbe0 	bl	8015a68 <memset1>

    linkedListInit( &NvmCtx.MacCommandList );
 80102a8:	4b05      	ldr	r3, [pc, #20]	; (80102c0 <LoRaMacCommandsInit+0x2c>)
 80102aa:	0018      	movs	r0, r3
 80102ac:	f7ff ff36 	bl	801011c <linkedListInit>

    // Assign callback
    CommandsNvmCtxChanged = commandsNvmCtxChanged;
 80102b0:	4b04      	ldr	r3, [pc, #16]	; (80102c4 <LoRaMacCommandsInit+0x30>)
 80102b2:	687a      	ldr	r2, [r7, #4]
 80102b4:	601a      	str	r2, [r3, #0]

    return LORAMAC_COMMANDS_SUCCESS;
 80102b6:	2300      	movs	r3, #0
}
 80102b8:	0018      	movs	r0, r3
 80102ba:	46bd      	mov	sp, r7
 80102bc:	b002      	add	sp, #8
 80102be:	bd80      	pop	{r7, pc}
 80102c0:	20000db0 	.word	0x20000db0
 80102c4:	20000dac 	.word	0x20000dac

080102c8 <LoRaMacCommandsRestoreNvmCtx>:

LoRaMacCommandStatus_t LoRaMacCommandsRestoreNvmCtx( void* commandsNvmCtx )
{
 80102c8:	b580      	push	{r7, lr}
 80102ca:	b082      	sub	sp, #8
 80102cc:	af00      	add	r7, sp, #0
 80102ce:	6078      	str	r0, [r7, #4]
    // Restore module context
    if( commandsNvmCtx != NULL )
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	d007      	beq.n	80102e6 <LoRaMacCommandsRestoreNvmCtx+0x1e>
    {
        memcpy1( ( uint8_t* ) &NvmCtx, ( uint8_t* ) commandsNvmCtx, sizeof( NvmCtx ) );
 80102d6:	6879      	ldr	r1, [r7, #4]
 80102d8:	4b05      	ldr	r3, [pc, #20]	; (80102f0 <LoRaMacCommandsRestoreNvmCtx+0x28>)
 80102da:	22fc      	movs	r2, #252	; 0xfc
 80102dc:	0018      	movs	r0, r3
 80102de:	f005 fb87 	bl	80159f0 <memcpy1>
        return LORAMAC_COMMANDS_SUCCESS;
 80102e2:	2300      	movs	r3, #0
 80102e4:	e000      	b.n	80102e8 <LoRaMacCommandsRestoreNvmCtx+0x20>
    }
    else
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80102e6:	2301      	movs	r3, #1
    }
}
 80102e8:	0018      	movs	r0, r3
 80102ea:	46bd      	mov	sp, r7
 80102ec:	b002      	add	sp, #8
 80102ee:	bd80      	pop	{r7, pc}
 80102f0:	20000db0 	.word	0x20000db0

080102f4 <LoRaMacCommandsGetNvmCtx>:

void* LoRaMacCommandsGetNvmCtx( size_t* commandsNvmCtxSize )
{
 80102f4:	b580      	push	{r7, lr}
 80102f6:	b082      	sub	sp, #8
 80102f8:	af00      	add	r7, sp, #0
 80102fa:	6078      	str	r0, [r7, #4]
    *commandsNvmCtxSize = sizeof( NvmCtx );
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	22fc      	movs	r2, #252	; 0xfc
 8010300:	601a      	str	r2, [r3, #0]
    return &NvmCtx;
 8010302:	4b02      	ldr	r3, [pc, #8]	; (801030c <LoRaMacCommandsGetNvmCtx+0x18>)
}
 8010304:	0018      	movs	r0, r3
 8010306:	46bd      	mov	sp, r7
 8010308:	b002      	add	sp, #8
 801030a:	bd80      	pop	{r7, pc}
 801030c:	20000db0 	.word	0x20000db0

08010310 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid,  uint8_t* payload, size_t payloadSize )
{
 8010310:	b590      	push	{r4, r7, lr}
 8010312:	b087      	sub	sp, #28
 8010314:	af00      	add	r7, sp, #0
 8010316:	60b9      	str	r1, [r7, #8]
 8010318:	607a      	str	r2, [r7, #4]
 801031a:	230f      	movs	r3, #15
 801031c:	18fb      	adds	r3, r7, r3
 801031e:	1c02      	adds	r2, r0, #0
 8010320:	701a      	strb	r2, [r3, #0]
    if( payload == 0 )
 8010322:	68bb      	ldr	r3, [r7, #8]
 8010324:	2b00      	cmp	r3, #0
 8010326:	d101      	bne.n	801032c <LoRaMacCommandsAddCmd+0x1c>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8010328:	2301      	movs	r3, #1
 801032a:	e03c      	b.n	80103a6 <LoRaMacCommandsAddCmd+0x96>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = mallocNewMacCommandSlot( );
 801032c:	f7ff feb2 	bl	8010094 <mallocNewMacCommandSlot>
 8010330:	0003      	movs	r3, r0
 8010332:	617b      	str	r3, [r7, #20]

    if( newCmd == 0 )
 8010334:	697b      	ldr	r3, [r7, #20]
 8010336:	2b00      	cmp	r3, #0
 8010338:	d101      	bne.n	801033e <LoRaMacCommandsAddCmd+0x2e>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 801033a:	2302      	movs	r3, #2
 801033c:	e033      	b.n	80103a6 <LoRaMacCommandsAddCmd+0x96>
    }

    // Add it to the list of Mac commands
    if( linkedListAdd( &NvmCtx.MacCommandList, newCmd ) == false )
 801033e:	697a      	ldr	r2, [r7, #20]
 8010340:	4b1b      	ldr	r3, [pc, #108]	; (80103b0 <LoRaMacCommandsAddCmd+0xa0>)
 8010342:	0011      	movs	r1, r2
 8010344:	0018      	movs	r0, r3
 8010346:	f7ff fefd 	bl	8010144 <linkedListAdd>
 801034a:	0003      	movs	r3, r0
 801034c:	001a      	movs	r2, r3
 801034e:	2301      	movs	r3, #1
 8010350:	4053      	eors	r3, r2
 8010352:	b2db      	uxtb	r3, r3
 8010354:	2b00      	cmp	r3, #0
 8010356:	d001      	beq.n	801035c <LoRaMacCommandsAddCmd+0x4c>
    {
        return LORAMAC_COMMANDS_ERROR;
 8010358:	2305      	movs	r3, #5
 801035a:	e024      	b.n	80103a6 <LoRaMacCommandsAddCmd+0x96>
    }

    // Set Values
    newCmd->CID = cid;
 801035c:	697b      	ldr	r3, [r7, #20]
 801035e:	240f      	movs	r4, #15
 8010360:	193a      	adds	r2, r7, r4
 8010362:	7812      	ldrb	r2, [r2, #0]
 8010364:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
 8010366:	697b      	ldr	r3, [r7, #20]
 8010368:	687a      	ldr	r2, [r7, #4]
 801036a:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* ) newCmd->Payload, payload, payloadSize );
 801036c:	697b      	ldr	r3, [r7, #20]
 801036e:	3305      	adds	r3, #5
 8010370:	687a      	ldr	r2, [r7, #4]
 8010372:	b292      	uxth	r2, r2
 8010374:	68b9      	ldr	r1, [r7, #8]
 8010376:	0018      	movs	r0, r3
 8010378:	f005 fb3a 	bl	80159f0 <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 801037c:	193b      	adds	r3, r7, r4
 801037e:	781b      	ldrb	r3, [r3, #0]
 8010380:	0018      	movs	r0, r3
 8010382:	f7ff ff63 	bl	801024c <IsSticky>
 8010386:	0003      	movs	r3, r0
 8010388:	001a      	movs	r2, r3
 801038a:	697b      	ldr	r3, [r7, #20]
 801038c:	731a      	strb	r2, [r3, #12]

    NvmCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 801038e:	4b08      	ldr	r3, [pc, #32]	; (80103b0 <LoRaMacCommandsAddCmd+0xa0>)
 8010390:	22f8      	movs	r2, #248	; 0xf8
 8010392:	589a      	ldr	r2, [r3, r2]
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	18d3      	adds	r3, r2, r3
 8010398:	1c5a      	adds	r2, r3, #1
 801039a:	4b05      	ldr	r3, [pc, #20]	; (80103b0 <LoRaMacCommandsAddCmd+0xa0>)
 801039c:	21f8      	movs	r1, #248	; 0xf8
 801039e:	505a      	str	r2, [r3, r1]

    NvmCtxCallback( );
 80103a0:	f7ff ff6a 	bl	8010278 <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
 80103a4:	2300      	movs	r3, #0
}
 80103a6:	0018      	movs	r0, r3
 80103a8:	46bd      	mov	sp, r7
 80103aa:	b007      	add	sp, #28
 80103ac:	bd90      	pop	{r4, r7, pc}
 80103ae:	46c0      	nop			; (mov r8, r8)
 80103b0:	20000db0 	.word	0x20000db0

080103b4 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 80103b4:	b580      	push	{r7, lr}
 80103b6:	b082      	sub	sp, #8
 80103b8:	af00      	add	r7, sp, #0
 80103ba:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	2b00      	cmp	r3, #0
 80103c0:	d101      	bne.n	80103c6 <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80103c2:	2301      	movs	r3, #1
 80103c4:	e028      	b.n	8010418 <LoRaMacCommandsRemoveCmd+0x64>
    }

    // Remove the Mac command element from MacCommandList
    if( linkedListRemove( &NvmCtx.MacCommandList, macCmd ) == false )
 80103c6:	687a      	ldr	r2, [r7, #4]
 80103c8:	4b15      	ldr	r3, [pc, #84]	; (8010420 <LoRaMacCommandsRemoveCmd+0x6c>)
 80103ca:	0011      	movs	r1, r2
 80103cc:	0018      	movs	r0, r3
 80103ce:	f7ff ff08 	bl	80101e2 <linkedListRemove>
 80103d2:	0003      	movs	r3, r0
 80103d4:	001a      	movs	r2, r3
 80103d6:	2301      	movs	r3, #1
 80103d8:	4053      	eors	r3, r2
 80103da:	b2db      	uxtb	r3, r3
 80103dc:	2b00      	cmp	r3, #0
 80103de:	d001      	beq.n	80103e4 <LoRaMacCommandsRemoveCmd+0x30>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 80103e0:	2303      	movs	r3, #3
 80103e2:	e019      	b.n	8010418 <LoRaMacCommandsRemoveCmd+0x64>
    }

    NvmCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 80103e4:	4b0e      	ldr	r3, [pc, #56]	; (8010420 <LoRaMacCommandsRemoveCmd+0x6c>)
 80103e6:	22f8      	movs	r2, #248	; 0xf8
 80103e8:	589a      	ldr	r2, [r3, r2]
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	689b      	ldr	r3, [r3, #8]
 80103ee:	1ad3      	subs	r3, r2, r3
 80103f0:	1e5a      	subs	r2, r3, #1
 80103f2:	4b0b      	ldr	r3, [pc, #44]	; (8010420 <LoRaMacCommandsRemoveCmd+0x6c>)
 80103f4:	21f8      	movs	r1, #248	; 0xf8
 80103f6:	505a      	str	r2, [r3, r1]

    // Free the MacCommand Slot
    if( freeMacCommandSlot( macCmd ) == false )
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	0018      	movs	r0, r3
 80103fc:	f7ff fe7a 	bl	80100f4 <freeMacCommandSlot>
 8010400:	0003      	movs	r3, r0
 8010402:	001a      	movs	r2, r3
 8010404:	2301      	movs	r3, #1
 8010406:	4053      	eors	r3, r2
 8010408:	b2db      	uxtb	r3, r3
 801040a:	2b00      	cmp	r3, #0
 801040c:	d001      	beq.n	8010412 <LoRaMacCommandsRemoveCmd+0x5e>
    {
        return LORAMAC_COMMANDS_ERROR;
 801040e:	2305      	movs	r3, #5
 8010410:	e002      	b.n	8010418 <LoRaMacCommandsRemoveCmd+0x64>
    }

    NvmCtxCallback( );
 8010412:	f7ff ff31 	bl	8010278 <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
 8010416:	2300      	movs	r3, #0
}
 8010418:	0018      	movs	r0, r3
 801041a:	46bd      	mov	sp, r7
 801041c:	b002      	add	sp, #8
 801041e:	bd80      	pop	{r7, pc}
 8010420:	20000db0 	.word	0x20000db0

08010424 <LoRaMacCommandsRemoveNoneStickyCmds>:

    return LORAMAC_COMMANDS_SUCCESS;
}

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 8010424:	b580      	push	{r7, lr}
 8010426:	b082      	sub	sp, #8
 8010428:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = NvmCtx.MacCommandList.First;
 801042a:	4b11      	ldr	r3, [pc, #68]	; (8010470 <LoRaMacCommandsRemoveNoneStickyCmds+0x4c>)
 801042c:	681b      	ldr	r3, [r3, #0]
 801042e:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement )
 8010430:	e013      	b.n	801045a <LoRaMacCommandsRemoveNoneStickyCmds+0x36>
    {
        if( curElement->IsSticky == false )
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	7b1b      	ldrb	r3, [r3, #12]
 8010436:	2201      	movs	r2, #1
 8010438:	4053      	eors	r3, r2
 801043a:	b2db      	uxtb	r3, r3
 801043c:	2b00      	cmp	r3, #0
 801043e:	d009      	beq.n	8010454 <LoRaMacCommandsRemoveNoneStickyCmds+0x30>
        {
            nexElement = curElement->Next;
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	681b      	ldr	r3, [r3, #0]
 8010444:	603b      	str	r3, [r7, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	0018      	movs	r0, r3
 801044a:	f7ff ffb3 	bl	80103b4 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 801044e:	683b      	ldr	r3, [r7, #0]
 8010450:	607b      	str	r3, [r7, #4]
 8010452:	e002      	b.n	801045a <LoRaMacCommandsRemoveNoneStickyCmds+0x36>
        }
        else
        {
            curElement = curElement->Next;
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	681b      	ldr	r3, [r3, #0]
 8010458:	607b      	str	r3, [r7, #4]
    while( curElement )
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	2b00      	cmp	r3, #0
 801045e:	d1e8      	bne.n	8010432 <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        }
    }

    NvmCtxCallback( );
 8010460:	f7ff ff0a 	bl	8010278 <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
 8010464:	2300      	movs	r3, #0
}
 8010466:	0018      	movs	r0, r3
 8010468:	46bd      	mov	sp, r7
 801046a:	b002      	add	sp, #8
 801046c:	bd80      	pop	{r7, pc}
 801046e:	46c0      	nop			; (mov r8, r8)
 8010470:	20000db0 	.word	0x20000db0

08010474 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 8010474:	b580      	push	{r7, lr}
 8010476:	b084      	sub	sp, #16
 8010478:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = NvmCtx.MacCommandList.First;
 801047a:	4b1a      	ldr	r3, [pc, #104]	; (80104e4 <LoRaMacCommandsRemoveStickyAnsCmds+0x70>)
 801047c:	681b      	ldr	r3, [r3, #0]
 801047e:	60fb      	str	r3, [r7, #12]

    // Loop through all elements
    while( curElement != NULL )
 8010480:	e026      	b.n	80104d0 <LoRaMacCommandsRemoveStickyAnsCmds+0x5c>
    {
        nexElement = curElement->Next;
 8010482:	68fb      	ldr	r3, [r7, #12]
 8010484:	681b      	ldr	r3, [r3, #0]
 8010486:	607b      	str	r3, [r7, #4]
        if( curElement->IsSticky == true )
 8010488:	68fb      	ldr	r3, [r7, #12]
 801048a:	7b1b      	ldrb	r3, [r3, #12]
 801048c:	2b00      	cmp	r3, #0
 801048e:	d01d      	beq.n	80104cc <LoRaMacCommandsRemoveStickyAnsCmds+0x58>
        {
            for( uint8_t i = 0; i < sizeof( CIDsStickyAnsCmds ); i++)
 8010490:	230b      	movs	r3, #11
 8010492:	18fb      	adds	r3, r7, r3
 8010494:	2200      	movs	r2, #0
 8010496:	701a      	strb	r2, [r3, #0]
 8010498:	e013      	b.n	80104c2 <LoRaMacCommandsRemoveStickyAnsCmds+0x4e>
            {
                if( curElement->CID == CIDsStickyAnsCmds[i] )
 801049a:	68fb      	ldr	r3, [r7, #12]
 801049c:	791a      	ldrb	r2, [r3, #4]
 801049e:	230b      	movs	r3, #11
 80104a0:	18fb      	adds	r3, r7, r3
 80104a2:	781b      	ldrb	r3, [r3, #0]
 80104a4:	4910      	ldr	r1, [pc, #64]	; (80104e8 <LoRaMacCommandsRemoveStickyAnsCmds+0x74>)
 80104a6:	5ccb      	ldrb	r3, [r1, r3]
 80104a8:	429a      	cmp	r2, r3
 80104aa:	d104      	bne.n	80104b6 <LoRaMacCommandsRemoveStickyAnsCmds+0x42>
                {
                    LoRaMacCommandsRemoveCmd( curElement );
 80104ac:	68fb      	ldr	r3, [r7, #12]
 80104ae:	0018      	movs	r0, r3
 80104b0:	f7ff ff80 	bl	80103b4 <LoRaMacCommandsRemoveCmd>
                    break;
 80104b4:	e00a      	b.n	80104cc <LoRaMacCommandsRemoveStickyAnsCmds+0x58>
            for( uint8_t i = 0; i < sizeof( CIDsStickyAnsCmds ); i++)
 80104b6:	210b      	movs	r1, #11
 80104b8:	187b      	adds	r3, r7, r1
 80104ba:	781a      	ldrb	r2, [r3, #0]
 80104bc:	187b      	adds	r3, r7, r1
 80104be:	3201      	adds	r2, #1
 80104c0:	701a      	strb	r2, [r3, #0]
 80104c2:	230b      	movs	r3, #11
 80104c4:	18fb      	adds	r3, r7, r3
 80104c6:	781b      	ldrb	r3, [r3, #0]
 80104c8:	2b02      	cmp	r3, #2
 80104ca:	d9e6      	bls.n	801049a <LoRaMacCommandsRemoveStickyAnsCmds+0x26>
                }
            }
        }
        curElement = nexElement;
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	60fb      	str	r3, [r7, #12]
    while( curElement != NULL )
 80104d0:	68fb      	ldr	r3, [r7, #12]
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	d1d5      	bne.n	8010482 <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
    }

    NvmCtxCallback( );
 80104d6:	f7ff fecf 	bl	8010278 <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
 80104da:	2300      	movs	r3, #0
}
 80104dc:	0018      	movs	r0, r3
 80104de:	46bd      	mov	sp, r7
 80104e0:	b004      	add	sp, #16
 80104e2:	bd80      	pop	{r7, pc}
 80104e4:	20000db0 	.word	0x20000db0
 80104e8:	080219a4 	.word	0x080219a4

080104ec <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 80104ec:	b580      	push	{r7, lr}
 80104ee:	b082      	sub	sp, #8
 80104f0:	af00      	add	r7, sp, #0
 80104f2:	6078      	str	r0, [r7, #4]
    if( size == NULL )
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	2b00      	cmp	r3, #0
 80104f8:	d101      	bne.n	80104fe <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80104fa:	2301      	movs	r3, #1
 80104fc:	e005      	b.n	801050a <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = NvmCtx.SerializedCmdsSize;
 80104fe:	4b05      	ldr	r3, [pc, #20]	; (8010514 <LoRaMacCommandsGetSizeSerializedCmds+0x28>)
 8010500:	22f8      	movs	r2, #248	; 0xf8
 8010502:	589a      	ldr	r2, [r3, r2]
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 8010508:	2300      	movs	r3, #0

}
 801050a:	0018      	movs	r0, r3
 801050c:	46bd      	mov	sp, r7
 801050e:	b002      	add	sp, #8
 8010510:	bd80      	pop	{r7, pc}
 8010512:	46c0      	nop			; (mov r8, r8)
 8010514:	20000db0 	.word	0x20000db0

08010518 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize,  uint8_t* buffer )
{
 8010518:	b590      	push	{r4, r7, lr}
 801051a:	b087      	sub	sp, #28
 801051c:	af00      	add	r7, sp, #0
 801051e:	60f8      	str	r0, [r7, #12]
 8010520:	60b9      	str	r1, [r7, #8]
 8010522:	607a      	str	r2, [r7, #4]
    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	2b00      	cmp	r3, #0
 8010528:	d002      	beq.n	8010530 <LoRaMacCommandsSerializeCmds+0x18>
 801052a:	68bb      	ldr	r3, [r7, #8]
 801052c:	2b00      	cmp	r3, #0
 801052e:	d101      	bne.n	8010534 <LoRaMacCommandsSerializeCmds+0x1c>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8010530:	2301      	movs	r3, #1
 8010532:	e03a      	b.n	80105aa <LoRaMacCommandsSerializeCmds+0x92>
    }
    MacCommand_t* curElement;
    curElement = NvmCtx.MacCommandList.First;
 8010534:	4b1f      	ldr	r3, [pc, #124]	; (80105b4 <LoRaMacCommandsSerializeCmds+0x9c>)
 8010536:	681b      	ldr	r3, [r3, #0]
 8010538:	617b      	str	r3, [r7, #20]
    uint8_t itr = 0;
 801053a:	2313      	movs	r3, #19
 801053c:	18fb      	adds	r3, r7, r3
 801053e:	2200      	movs	r2, #0
 8010540:	701a      	strb	r2, [r3, #0]

    // Loop through all elements
    while( curElement )
 8010542:	e02c      	b.n	801059e <LoRaMacCommandsSerializeCmds+0x86>
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 8010544:	2313      	movs	r3, #19
 8010546:	18fb      	adds	r3, r7, r3
 8010548:	781b      	ldrb	r3, [r3, #0]
 801054a:	68fa      	ldr	r2, [r7, #12]
 801054c:	1ad2      	subs	r2, r2, r3
 801054e:	697b      	ldr	r3, [r7, #20]
 8010550:	689b      	ldr	r3, [r3, #8]
 8010552:	3301      	adds	r3, #1
 8010554:	429a      	cmp	r2, r3
 8010556:	d326      	bcc.n	80105a6 <LoRaMacCommandsSerializeCmds+0x8e>
        {
            buffer[itr++] = curElement->CID;
 8010558:	2413      	movs	r4, #19
 801055a:	193b      	adds	r3, r7, r4
 801055c:	781b      	ldrb	r3, [r3, #0]
 801055e:	193a      	adds	r2, r7, r4
 8010560:	1c59      	adds	r1, r3, #1
 8010562:	7011      	strb	r1, [r2, #0]
 8010564:	001a      	movs	r2, r3
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	189b      	adds	r3, r3, r2
 801056a:	697a      	ldr	r2, [r7, #20]
 801056c:	7912      	ldrb	r2, [r2, #4]
 801056e:	701a      	strb	r2, [r3, #0]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 8010570:	193b      	adds	r3, r7, r4
 8010572:	781b      	ldrb	r3, [r3, #0]
 8010574:	687a      	ldr	r2, [r7, #4]
 8010576:	18d0      	adds	r0, r2, r3
 8010578:	697b      	ldr	r3, [r7, #20]
 801057a:	1d59      	adds	r1, r3, #5
 801057c:	697b      	ldr	r3, [r7, #20]
 801057e:	689b      	ldr	r3, [r3, #8]
 8010580:	b29b      	uxth	r3, r3
 8010582:	001a      	movs	r2, r3
 8010584:	f005 fa34 	bl	80159f0 <memcpy1>
            itr = itr + curElement->PayloadSize;
 8010588:	697b      	ldr	r3, [r7, #20]
 801058a:	689b      	ldr	r3, [r3, #8]
 801058c:	b2d9      	uxtb	r1, r3
 801058e:	193b      	adds	r3, r7, r4
 8010590:	193a      	adds	r2, r7, r4
 8010592:	7812      	ldrb	r2, [r2, #0]
 8010594:	188a      	adds	r2, r1, r2
 8010596:	701a      	strb	r2, [r3, #0]
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 8010598:	697b      	ldr	r3, [r7, #20]
 801059a:	681b      	ldr	r3, [r3, #0]
 801059c:	617b      	str	r3, [r7, #20]
    while( curElement )
 801059e:	697b      	ldr	r3, [r7, #20]
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	d1cf      	bne.n	8010544 <LoRaMacCommandsSerializeCmds+0x2c>
 80105a4:	e000      	b.n	80105a8 <LoRaMacCommandsSerializeCmds+0x90>
            break;
 80105a6:	46c0      	nop			; (mov r8, r8)
    }

    return LORAMAC_COMMANDS_SUCCESS;
 80105a8:	2300      	movs	r3, #0
}
 80105aa:	0018      	movs	r0, r3
 80105ac:	46bd      	mov	sp, r7
 80105ae:	b007      	add	sp, #28
 80105b0:	bd90      	pop	{r4, r7, pc}
 80105b2:	46c0      	nop			; (mov r8, r8)
 80105b4:	20000db0 	.word	0x20000db0

080105b8 <LoRaMacCommandsStickyCmdsPending>:

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
 80105b8:	b580      	push	{r7, lr}
 80105ba:	b084      	sub	sp, #16
 80105bc:	af00      	add	r7, sp, #0
 80105be:	6078      	str	r0, [r7, #4]
    if( cmdsPending == NULL )
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	2b00      	cmp	r3, #0
 80105c4:	d101      	bne.n	80105ca <LoRaMacCommandsStickyCmdsPending+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80105c6:	2301      	movs	r3, #1
 80105c8:	e016      	b.n	80105f8 <LoRaMacCommandsStickyCmdsPending+0x40>
    }
    MacCommand_t* curElement;
    curElement = NvmCtx.MacCommandList.First;
 80105ca:	4b0d      	ldr	r3, [pc, #52]	; (8010600 <LoRaMacCommandsStickyCmdsPending+0x48>)
 80105cc:	681b      	ldr	r3, [r3, #0]
 80105ce:	60fb      	str	r3, [r7, #12]

    *cmdsPending = false;
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	2200      	movs	r2, #0
 80105d4:	701a      	strb	r2, [r3, #0]

    // Loop through all elements
    while( curElement )
 80105d6:	e00b      	b.n	80105f0 <LoRaMacCommandsStickyCmdsPending+0x38>
    {
        if( curElement->IsSticky == true )
 80105d8:	68fb      	ldr	r3, [r7, #12]
 80105da:	7b1b      	ldrb	r3, [r3, #12]
 80105dc:	2b00      	cmp	r3, #0
 80105de:	d004      	beq.n	80105ea <LoRaMacCommandsStickyCmdsPending+0x32>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	2201      	movs	r2, #1
 80105e4:	701a      	strb	r2, [r3, #0]
            return LORAMAC_COMMANDS_SUCCESS;
 80105e6:	2300      	movs	r3, #0
 80105e8:	e006      	b.n	80105f8 <LoRaMacCommandsStickyCmdsPending+0x40>
        }
        curElement = curElement->Next;
 80105ea:	68fb      	ldr	r3, [r7, #12]
 80105ec:	681b      	ldr	r3, [r3, #0]
 80105ee:	60fb      	str	r3, [r7, #12]
    while( curElement )
 80105f0:	68fb      	ldr	r3, [r7, #12]
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	d1f0      	bne.n	80105d8 <LoRaMacCommandsStickyCmdsPending+0x20>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 80105f6:	2300      	movs	r3, #0
}
 80105f8:	0018      	movs	r0, r3
 80105fa:	46bd      	mov	sp, r7
 80105fc:	b004      	add	sp, #16
 80105fe:	bd80      	pop	{r7, pc}
 8010600:	20000db0 	.word	0x20000db0

08010604 <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 8010604:	b580      	push	{r7, lr}
 8010606:	b082      	sub	sp, #8
 8010608:	af00      	add	r7, sp, #0
 801060a:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 801060c:	4b08      	ldr	r3, [pc, #32]	; (8010630 <IncreaseBufferPointer+0x2c>)
 801060e:	691b      	ldr	r3, [r3, #16]
 8010610:	3310      	adds	r3, #16
 8010612:	687a      	ldr	r2, [r7, #4]
 8010614:	429a      	cmp	r2, r3
 8010616:	d103      	bne.n	8010620 <IncreaseBufferPointer+0x1c>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 8010618:	4b05      	ldr	r3, [pc, #20]	; (8010630 <IncreaseBufferPointer+0x2c>)
 801061a:	691b      	ldr	r3, [r3, #16]
 801061c:	607b      	str	r3, [r7, #4]
 801061e:	e002      	b.n	8010626 <IncreaseBufferPointer+0x22>
    }
    else
    {
        // Increase
        bufferPointer++;
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	3304      	adds	r3, #4
 8010624:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 8010626:	687b      	ldr	r3, [r7, #4]
}
 8010628:	0018      	movs	r0, r3
 801062a:	46bd      	mov	sp, r7
 801062c:	b002      	add	sp, #8
 801062e:	bd80      	pop	{r7, pc}
 8010630:	20000ec4 	.word	0x20000ec4

08010634 <GetElement>:
    }
    return bufferPointer;
}

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 8010634:	b580      	push	{r7, lr}
 8010636:	b086      	sub	sp, #24
 8010638:	af00      	add	r7, sp, #0
 801063a:	60b9      	str	r1, [r7, #8]
 801063c:	607a      	str	r2, [r7, #4]
 801063e:	230f      	movs	r3, #15
 8010640:	18fb      	adds	r3, r7, r3
 8010642:	1c02      	adds	r2, r0, #0
 8010644:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t* element = bufferStart;
 8010646:	68bb      	ldr	r3, [r7, #8]
 8010648:	617b      	str	r3, [r7, #20]

    while( element != bufferEnd )
 801064a:	e00e      	b.n	801066a <GetElement+0x36>
    {
        if( element->Request == request )
 801064c:	697b      	ldr	r3, [r7, #20]
 801064e:	781b      	ldrb	r3, [r3, #0]
 8010650:	220f      	movs	r2, #15
 8010652:	18ba      	adds	r2, r7, r2
 8010654:	7812      	ldrb	r2, [r2, #0]
 8010656:	429a      	cmp	r2, r3
 8010658:	d101      	bne.n	801065e <GetElement+0x2a>
        {
            // We have found the element
            return element;
 801065a:	697b      	ldr	r3, [r7, #20]
 801065c:	e00a      	b.n	8010674 <GetElement+0x40>
        }
        else
        {
            element = IncreaseBufferPointer( element );
 801065e:	697b      	ldr	r3, [r7, #20]
 8010660:	0018      	movs	r0, r3
 8010662:	f7ff ffcf 	bl	8010604 <IncreaseBufferPointer>
 8010666:	0003      	movs	r3, r0
 8010668:	617b      	str	r3, [r7, #20]
    while( element != bufferEnd )
 801066a:	697a      	ldr	r2, [r7, #20]
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	429a      	cmp	r2, r3
 8010670:	d1ec      	bne.n	801064c <GetElement+0x18>
        }
    }
    return NULL;
 8010672:	2300      	movs	r3, #0
}
 8010674:	0018      	movs	r0, r3
 8010676:	46bd      	mov	sp, r7
 8010678:	b006      	add	sp, #24
 801067a:	bd80      	pop	{r7, pc}

0801067c <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives, EventNvmCtxChanged confirmQueueNvmCtxChanged )
{
 801067c:	b580      	push	{r7, lr}
 801067e:	b082      	sub	sp, #8
 8010680:	af00      	add	r7, sp, #0
 8010682:	6078      	str	r0, [r7, #4]
 8010684:	6039      	str	r1, [r7, #0]
    ConfirmQueueCtx.Primitives = primitives;
 8010686:	4b13      	ldr	r3, [pc, #76]	; (80106d4 <LoRaMacConfirmQueueInit+0x58>)
 8010688:	687a      	ldr	r2, [r7, #4]
 801068a:	601a      	str	r2, [r3, #0]

    // Assign nvm context
    ConfirmQueueCtx.ConfirmQueueNvmCtx = &ConfirmQueueNvmCtx;
 801068c:	4b11      	ldr	r3, [pc, #68]	; (80106d4 <LoRaMacConfirmQueueInit+0x58>)
 801068e:	4a12      	ldr	r2, [pc, #72]	; (80106d8 <LoRaMacConfirmQueueInit+0x5c>)
 8010690:	611a      	str	r2, [r3, #16]

    // Init counter
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt = 0;
 8010692:	4b10      	ldr	r3, [pc, #64]	; (80106d4 <LoRaMacConfirmQueueInit+0x58>)
 8010694:	691b      	ldr	r3, [r3, #16]
 8010696:	2200      	movs	r2, #0
 8010698:	751a      	strb	r2, [r3, #20]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 801069a:	4b0e      	ldr	r3, [pc, #56]	; (80106d4 <LoRaMacConfirmQueueInit+0x58>)
 801069c:	691b      	ldr	r3, [r3, #16]
 801069e:	001a      	movs	r2, r3
 80106a0:	4b0c      	ldr	r3, [pc, #48]	; (80106d4 <LoRaMacConfirmQueueInit+0x58>)
 80106a2:	605a      	str	r2, [r3, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 80106a4:	4b0b      	ldr	r3, [pc, #44]	; (80106d4 <LoRaMacConfirmQueueInit+0x58>)
 80106a6:	691b      	ldr	r3, [r3, #16]
 80106a8:	001a      	movs	r2, r3
 80106aa:	4b0a      	ldr	r3, [pc, #40]	; (80106d4 <LoRaMacConfirmQueueInit+0x58>)
 80106ac:	609a      	str	r2, [r3, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue ) );
 80106ae:	4b09      	ldr	r3, [pc, #36]	; (80106d4 <LoRaMacConfirmQueueInit+0x58>)
 80106b0:	691b      	ldr	r3, [r3, #16]
 80106b2:	2214      	movs	r2, #20
 80106b4:	21ff      	movs	r1, #255	; 0xff
 80106b6:	0018      	movs	r0, r3
 80106b8:	f005 f9d6 	bl	8015a68 <memset1>

    // Common status
    ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80106bc:	4b05      	ldr	r3, [pc, #20]	; (80106d4 <LoRaMacConfirmQueueInit+0x58>)
 80106be:	691b      	ldr	r3, [r3, #16]
 80106c0:	2201      	movs	r2, #1
 80106c2:	755a      	strb	r2, [r3, #21]

    // Assign callback
    ConfirmQueueCtx.EventNvmCtxChanged = confirmQueueNvmCtxChanged;
 80106c4:	4b03      	ldr	r3, [pc, #12]	; (80106d4 <LoRaMacConfirmQueueInit+0x58>)
 80106c6:	683a      	ldr	r2, [r7, #0]
 80106c8:	60da      	str	r2, [r3, #12]
}
 80106ca:	46c0      	nop			; (mov r8, r8)
 80106cc:	46bd      	mov	sp, r7
 80106ce:	b002      	add	sp, #8
 80106d0:	bd80      	pop	{r7, pc}
 80106d2:	46c0      	nop			; (mov r8, r8)
 80106d4:	20000ec4 	.word	0x20000ec4
 80106d8:	20000eac 	.word	0x20000eac

080106dc <LoRaMacConfirmQueueRestoreNvmCtx>:

bool LoRaMacConfirmQueueRestoreNvmCtx( void* confirmQueueNvmCtx )
{
 80106dc:	b580      	push	{r7, lr}
 80106de:	b082      	sub	sp, #8
 80106e0:	af00      	add	r7, sp, #0
 80106e2:	6078      	str	r0, [r7, #4]
    // Restore module context
    if( confirmQueueNvmCtx != NULL )
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	2b00      	cmp	r3, #0
 80106e8:	d007      	beq.n	80106fa <LoRaMacConfirmQueueRestoreNvmCtx+0x1e>
    {
        memcpy1( ( uint8_t* )&ConfirmQueueNvmCtx, ( uint8_t* ) confirmQueueNvmCtx, sizeof( ConfirmQueueNvmCtx ) );
 80106ea:	6879      	ldr	r1, [r7, #4]
 80106ec:	4b05      	ldr	r3, [pc, #20]	; (8010704 <LoRaMacConfirmQueueRestoreNvmCtx+0x28>)
 80106ee:	2216      	movs	r2, #22
 80106f0:	0018      	movs	r0, r3
 80106f2:	f005 f97d 	bl	80159f0 <memcpy1>
        return true;
 80106f6:	2301      	movs	r3, #1
 80106f8:	e000      	b.n	80106fc <LoRaMacConfirmQueueRestoreNvmCtx+0x20>
    }
    else
    {
        return false;
 80106fa:	2300      	movs	r3, #0
    }
}
 80106fc:	0018      	movs	r0, r3
 80106fe:	46bd      	mov	sp, r7
 8010700:	b002      	add	sp, #8
 8010702:	bd80      	pop	{r7, pc}
 8010704:	20000eac 	.word	0x20000eac

08010708 <LoRaMacConfirmQueueGetNvmCtx>:

void* LoRaMacConfirmQueueGetNvmCtx( size_t* confirmQueueNvmCtxSize )
{
 8010708:	b580      	push	{r7, lr}
 801070a:	b082      	sub	sp, #8
 801070c:	af00      	add	r7, sp, #0
 801070e:	6078      	str	r0, [r7, #4]
    *confirmQueueNvmCtxSize = sizeof( ConfirmQueueNvmCtx );
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	2216      	movs	r2, #22
 8010714:	601a      	str	r2, [r3, #0]
    return &ConfirmQueueNvmCtx;
 8010716:	4b02      	ldr	r3, [pc, #8]	; (8010720 <LoRaMacConfirmQueueGetNvmCtx+0x18>)
}
 8010718:	0018      	movs	r0, r3
 801071a:	46bd      	mov	sp, r7
 801071c:	b002      	add	sp, #8
 801071e:	bd80      	pop	{r7, pc}
 8010720:	20000eac 	.word	0x20000eac

08010724 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 8010724:	b580      	push	{r7, lr}
 8010726:	b082      	sub	sp, #8
 8010728:	af00      	add	r7, sp, #0
 801072a:	6078      	str	r0, [r7, #4]
    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 801072c:	4b16      	ldr	r3, [pc, #88]	; (8010788 <LoRaMacConfirmQueueAdd+0x64>)
 801072e:	691b      	ldr	r3, [r3, #16]
 8010730:	7d1b      	ldrb	r3, [r3, #20]
 8010732:	2b04      	cmp	r3, #4
 8010734:	d901      	bls.n	801073a <LoRaMacConfirmQueueAdd+0x16>
    {
        // Protect the buffer against overwrites
        return false;
 8010736:	2300      	movs	r3, #0
 8010738:	e021      	b.n	801077e <LoRaMacConfirmQueueAdd+0x5a>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 801073a:	4b13      	ldr	r3, [pc, #76]	; (8010788 <LoRaMacConfirmQueueAdd+0x64>)
 801073c:	689b      	ldr	r3, [r3, #8]
 801073e:	687a      	ldr	r2, [r7, #4]
 8010740:	7812      	ldrb	r2, [r2, #0]
 8010742:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 8010744:	4b10      	ldr	r3, [pc, #64]	; (8010788 <LoRaMacConfirmQueueAdd+0x64>)
 8010746:	689b      	ldr	r3, [r3, #8]
 8010748:	687a      	ldr	r2, [r7, #4]
 801074a:	7852      	ldrb	r2, [r2, #1]
 801074c:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 801074e:	4b0e      	ldr	r3, [pc, #56]	; (8010788 <LoRaMacConfirmQueueAdd+0x64>)
 8010750:	689b      	ldr	r3, [r3, #8]
 8010752:	687a      	ldr	r2, [r7, #4]
 8010754:	78d2      	ldrb	r2, [r2, #3]
 8010756:	70da      	strb	r2, [r3, #3]
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
 8010758:	4b0b      	ldr	r3, [pc, #44]	; (8010788 <LoRaMacConfirmQueueAdd+0x64>)
 801075a:	689b      	ldr	r3, [r3, #8]
 801075c:	2200      	movs	r2, #0
 801075e:	709a      	strb	r2, [r3, #2]
    // Increase counter
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt++;
 8010760:	4b09      	ldr	r3, [pc, #36]	; (8010788 <LoRaMacConfirmQueueAdd+0x64>)
 8010762:	691b      	ldr	r3, [r3, #16]
 8010764:	7d1a      	ldrb	r2, [r3, #20]
 8010766:	3201      	adds	r2, #1
 8010768:	b2d2      	uxtb	r2, r2
 801076a:	751a      	strb	r2, [r3, #20]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 801076c:	4b06      	ldr	r3, [pc, #24]	; (8010788 <LoRaMacConfirmQueueAdd+0x64>)
 801076e:	689b      	ldr	r3, [r3, #8]
 8010770:	0018      	movs	r0, r3
 8010772:	f7ff ff47 	bl	8010604 <IncreaseBufferPointer>
 8010776:	0002      	movs	r2, r0
 8010778:	4b03      	ldr	r3, [pc, #12]	; (8010788 <LoRaMacConfirmQueueAdd+0x64>)
 801077a:	609a      	str	r2, [r3, #8]

    return true;
 801077c:	2301      	movs	r3, #1
}
 801077e:	0018      	movs	r0, r3
 8010780:	46bd      	mov	sp, r7
 8010782:	b002      	add	sp, #8
 8010784:	bd80      	pop	{r7, pc}
 8010786:	46c0      	nop			; (mov r8, r8)
 8010788:	20000ec4 	.word	0x20000ec4

0801078c <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 801078c:	b580      	push	{r7, lr}
 801078e:	af00      	add	r7, sp, #0
    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt == 0 )
 8010790:	4b0c      	ldr	r3, [pc, #48]	; (80107c4 <LoRaMacConfirmQueueRemoveFirst+0x38>)
 8010792:	691b      	ldr	r3, [r3, #16]
 8010794:	7d1b      	ldrb	r3, [r3, #20]
 8010796:	2b00      	cmp	r3, #0
 8010798:	d101      	bne.n	801079e <LoRaMacConfirmQueueRemoveFirst+0x12>
    {
        return false;
 801079a:	2300      	movs	r3, #0
 801079c:	e00e      	b.n	80107bc <LoRaMacConfirmQueueRemoveFirst+0x30>
    }

    // Increase counter
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt--;
 801079e:	4b09      	ldr	r3, [pc, #36]	; (80107c4 <LoRaMacConfirmQueueRemoveFirst+0x38>)
 80107a0:	691b      	ldr	r3, [r3, #16]
 80107a2:	7d1a      	ldrb	r2, [r3, #20]
 80107a4:	3a01      	subs	r2, #1
 80107a6:	b2d2      	uxtb	r2, r2
 80107a8:	751a      	strb	r2, [r3, #20]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 80107aa:	4b06      	ldr	r3, [pc, #24]	; (80107c4 <LoRaMacConfirmQueueRemoveFirst+0x38>)
 80107ac:	685b      	ldr	r3, [r3, #4]
 80107ae:	0018      	movs	r0, r3
 80107b0:	f7ff ff28 	bl	8010604 <IncreaseBufferPointer>
 80107b4:	0002      	movs	r2, r0
 80107b6:	4b03      	ldr	r3, [pc, #12]	; (80107c4 <LoRaMacConfirmQueueRemoveFirst+0x38>)
 80107b8:	605a      	str	r2, [r3, #4]

    return true;
 80107ba:	2301      	movs	r3, #1
}
 80107bc:	0018      	movs	r0, r3
 80107be:	46bd      	mov	sp, r7
 80107c0:	bd80      	pop	{r7, pc}
 80107c2:	46c0      	nop			; (mov r8, r8)
 80107c4:	20000ec4 	.word	0x20000ec4

080107c8 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 80107c8:	b580      	push	{r7, lr}
 80107ca:	b084      	sub	sp, #16
 80107cc:	af00      	add	r7, sp, #0
 80107ce:	0002      	movs	r2, r0
 80107d0:	1dfb      	adds	r3, r7, #7
 80107d2:	701a      	strb	r2, [r3, #0]
 80107d4:	1dbb      	adds	r3, r7, #6
 80107d6:	1c0a      	adds	r2, r1, #0
 80107d8:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t* element = NULL;
 80107da:	2300      	movs	r3, #0
 80107dc:	60fb      	str	r3, [r7, #12]

    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt > 0 )
 80107de:	4b0f      	ldr	r3, [pc, #60]	; (801081c <LoRaMacConfirmQueueSetStatus+0x54>)
 80107e0:	691b      	ldr	r3, [r3, #16]
 80107e2:	7d1b      	ldrb	r3, [r3, #20]
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	d014      	beq.n	8010812 <LoRaMacConfirmQueueSetStatus+0x4a>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 80107e8:	4b0c      	ldr	r3, [pc, #48]	; (801081c <LoRaMacConfirmQueueSetStatus+0x54>)
 80107ea:	6859      	ldr	r1, [r3, #4]
 80107ec:	4b0b      	ldr	r3, [pc, #44]	; (801081c <LoRaMacConfirmQueueSetStatus+0x54>)
 80107ee:	689a      	ldr	r2, [r3, #8]
 80107f0:	1dbb      	adds	r3, r7, #6
 80107f2:	781b      	ldrb	r3, [r3, #0]
 80107f4:	0018      	movs	r0, r3
 80107f6:	f7ff ff1d 	bl	8010634 <GetElement>
 80107fa:	0003      	movs	r3, r0
 80107fc:	60fb      	str	r3, [r7, #12]
        if( element != NULL )
 80107fe:	68fb      	ldr	r3, [r7, #12]
 8010800:	2b00      	cmp	r3, #0
 8010802:	d006      	beq.n	8010812 <LoRaMacConfirmQueueSetStatus+0x4a>
        {
            element->Status = status;
 8010804:	68fb      	ldr	r3, [r7, #12]
 8010806:	1dfa      	adds	r2, r7, #7
 8010808:	7812      	ldrb	r2, [r2, #0]
 801080a:	705a      	strb	r2, [r3, #1]
            element->ReadyToHandle = true;
 801080c:	68fb      	ldr	r3, [r7, #12]
 801080e:	2201      	movs	r2, #1
 8010810:	709a      	strb	r2, [r3, #2]
        }
    }
}
 8010812:	46c0      	nop			; (mov r8, r8)
 8010814:	46bd      	mov	sp, r7
 8010816:	b004      	add	sp, #16
 8010818:	bd80      	pop	{r7, pc}
 801081a:	46c0      	nop			; (mov r8, r8)
 801081c:	20000ec4 	.word	0x20000ec4

08010820 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 8010820:	b580      	push	{r7, lr}
 8010822:	b084      	sub	sp, #16
 8010824:	af00      	add	r7, sp, #0
 8010826:	0002      	movs	r2, r0
 8010828:	1dfb      	adds	r3, r7, #7
 801082a:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t* element = NULL;
 801082c:	2300      	movs	r3, #0
 801082e:	60fb      	str	r3, [r7, #12]

    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt > 0 )
 8010830:	4b0d      	ldr	r3, [pc, #52]	; (8010868 <LoRaMacConfirmQueueGetStatus+0x48>)
 8010832:	691b      	ldr	r3, [r3, #16]
 8010834:	7d1b      	ldrb	r3, [r3, #20]
 8010836:	2b00      	cmp	r3, #0
 8010838:	d010      	beq.n	801085c <LoRaMacConfirmQueueGetStatus+0x3c>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 801083a:	4b0b      	ldr	r3, [pc, #44]	; (8010868 <LoRaMacConfirmQueueGetStatus+0x48>)
 801083c:	6859      	ldr	r1, [r3, #4]
 801083e:	4b0a      	ldr	r3, [pc, #40]	; (8010868 <LoRaMacConfirmQueueGetStatus+0x48>)
 8010840:	689a      	ldr	r2, [r3, #8]
 8010842:	1dfb      	adds	r3, r7, #7
 8010844:	781b      	ldrb	r3, [r3, #0]
 8010846:	0018      	movs	r0, r3
 8010848:	f7ff fef4 	bl	8010634 <GetElement>
 801084c:	0003      	movs	r3, r0
 801084e:	60fb      	str	r3, [r7, #12]
        if( element != NULL )
 8010850:	68fb      	ldr	r3, [r7, #12]
 8010852:	2b00      	cmp	r3, #0
 8010854:	d002      	beq.n	801085c <LoRaMacConfirmQueueGetStatus+0x3c>
        {
            return element->Status;
 8010856:	68fb      	ldr	r3, [r7, #12]
 8010858:	785b      	ldrb	r3, [r3, #1]
 801085a:	e000      	b.n	801085e <LoRaMacConfirmQueueGetStatus+0x3e>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 801085c:	2301      	movs	r3, #1
}
 801085e:	0018      	movs	r0, r3
 8010860:	46bd      	mov	sp, r7
 8010862:	b004      	add	sp, #16
 8010864:	bd80      	pop	{r7, pc}
 8010866:	46c0      	nop			; (mov r8, r8)
 8010868:	20000ec4 	.word	0x20000ec4

0801086c <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 801086c:	b580      	push	{r7, lr}
 801086e:	b084      	sub	sp, #16
 8010870:	af00      	add	r7, sp, #0
 8010872:	0002      	movs	r2, r0
 8010874:	1dfb      	adds	r3, r7, #7
 8010876:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 8010878:	4b14      	ldr	r3, [pc, #80]	; (80108cc <LoRaMacConfirmQueueSetStatusCmn+0x60>)
 801087a:	685b      	ldr	r3, [r3, #4]
 801087c:	60fb      	str	r3, [r7, #12]

    ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus = status;
 801087e:	4b13      	ldr	r3, [pc, #76]	; (80108cc <LoRaMacConfirmQueueSetStatusCmn+0x60>)
 8010880:	691b      	ldr	r3, [r3, #16]
 8010882:	1dfa      	adds	r2, r7, #7
 8010884:	7812      	ldrb	r2, [r2, #0]
 8010886:	755a      	strb	r2, [r3, #21]

    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt > 0 )
 8010888:	4b10      	ldr	r3, [pc, #64]	; (80108cc <LoRaMacConfirmQueueSetStatusCmn+0x60>)
 801088a:	691b      	ldr	r3, [r3, #16]
 801088c:	7d1b      	ldrb	r3, [r3, #20]
 801088e:	2b00      	cmp	r3, #0
 8010890:	d018      	beq.n	80108c4 <LoRaMacConfirmQueueSetStatusCmn+0x58>
    {
        do
        {
            element->Status = status;
 8010892:	68fb      	ldr	r3, [r7, #12]
 8010894:	1dfa      	adds	r2, r7, #7
 8010896:	7812      	ldrb	r2, [r2, #0]
 8010898:	705a      	strb	r2, [r3, #1]
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
 801089a:	68fb      	ldr	r3, [r7, #12]
 801089c:	78db      	ldrb	r3, [r3, #3]
 801089e:	2201      	movs	r2, #1
 80108a0:	4053      	eors	r3, r2
 80108a2:	b2db      	uxtb	r3, r3
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	d002      	beq.n	80108ae <LoRaMacConfirmQueueSetStatusCmn+0x42>
            {
                element->ReadyToHandle = true;
 80108a8:	68fb      	ldr	r3, [r7, #12]
 80108aa:	2201      	movs	r2, #1
 80108ac:	709a      	strb	r2, [r3, #2]
            }
            element = IncreaseBufferPointer( element );
 80108ae:	68fb      	ldr	r3, [r7, #12]
 80108b0:	0018      	movs	r0, r3
 80108b2:	f7ff fea7 	bl	8010604 <IncreaseBufferPointer>
 80108b6:	0003      	movs	r3, r0
 80108b8:	60fb      	str	r3, [r7, #12]
        }while( element != ConfirmQueueCtx.BufferEnd );
 80108ba:	4b04      	ldr	r3, [pc, #16]	; (80108cc <LoRaMacConfirmQueueSetStatusCmn+0x60>)
 80108bc:	689b      	ldr	r3, [r3, #8]
 80108be:	68fa      	ldr	r2, [r7, #12]
 80108c0:	429a      	cmp	r2, r3
 80108c2:	d1e6      	bne.n	8010892 <LoRaMacConfirmQueueSetStatusCmn+0x26>
    }
}
 80108c4:	46c0      	nop			; (mov r8, r8)
 80108c6:	46bd      	mov	sp, r7
 80108c8:	b004      	add	sp, #16
 80108ca:	bd80      	pop	{r7, pc}
 80108cc:	20000ec4 	.word	0x20000ec4

080108d0 <LoRaMacConfirmQueueGetStatusCmn>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatusCmn( void )
{
 80108d0:	b580      	push	{r7, lr}
 80108d2:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus;
 80108d4:	4b02      	ldr	r3, [pc, #8]	; (80108e0 <LoRaMacConfirmQueueGetStatusCmn+0x10>)
 80108d6:	691b      	ldr	r3, [r3, #16]
 80108d8:	7d5b      	ldrb	r3, [r3, #21]
}
 80108da:	0018      	movs	r0, r3
 80108dc:	46bd      	mov	sp, r7
 80108de:	bd80      	pop	{r7, pc}
 80108e0:	20000ec4 	.word	0x20000ec4

080108e4 <LoRaMacConfirmQueueIsCmdActive>:

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 80108e4:	b580      	push	{r7, lr}
 80108e6:	b082      	sub	sp, #8
 80108e8:	af00      	add	r7, sp, #0
 80108ea:	0002      	movs	r2, r0
 80108ec:	1dfb      	adds	r3, r7, #7
 80108ee:	701a      	strb	r2, [r3, #0]
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 80108f0:	4b08      	ldr	r3, [pc, #32]	; (8010914 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 80108f2:	6859      	ldr	r1, [r3, #4]
 80108f4:	4b07      	ldr	r3, [pc, #28]	; (8010914 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 80108f6:	689a      	ldr	r2, [r3, #8]
 80108f8:	1dfb      	adds	r3, r7, #7
 80108fa:	781b      	ldrb	r3, [r3, #0]
 80108fc:	0018      	movs	r0, r3
 80108fe:	f7ff fe99 	bl	8010634 <GetElement>
 8010902:	1e03      	subs	r3, r0, #0
 8010904:	d001      	beq.n	801090a <LoRaMacConfirmQueueIsCmdActive+0x26>
    {
        return true;
 8010906:	2301      	movs	r3, #1
 8010908:	e000      	b.n	801090c <LoRaMacConfirmQueueIsCmdActive+0x28>
    }
    return false;
 801090a:	2300      	movs	r3, #0
}
 801090c:	0018      	movs	r0, r3
 801090e:	46bd      	mov	sp, r7
 8010910:	b002      	add	sp, #8
 8010912:	bd80      	pop	{r7, pc}
 8010914:	20000ec4 	.word	0x20000ec4

08010918 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 8010918:	b580      	push	{r7, lr}
 801091a:	b084      	sub	sp, #16
 801091c:	af00      	add	r7, sp, #0
 801091e:	6078      	str	r0, [r7, #4]
    uint8_t nbElements = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt;
 8010920:	4b2d      	ldr	r3, [pc, #180]	; (80109d8 <LoRaMacConfirmQueueHandleCb+0xc0>)
 8010922:	691a      	ldr	r2, [r3, #16]
 8010924:	230e      	movs	r3, #14
 8010926:	18fb      	adds	r3, r7, r3
 8010928:	7d12      	ldrb	r2, [r2, #20]
 801092a:	701a      	strb	r2, [r3, #0]
    bool readyToHandle = false;
 801092c:	230d      	movs	r3, #13
 801092e:	18fb      	adds	r3, r7, r3
 8010930:	2200      	movs	r2, #0
 8010932:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 8010934:	230f      	movs	r3, #15
 8010936:	18fb      	adds	r3, r7, r3
 8010938:	2200      	movs	r2, #0
 801093a:	701a      	strb	r2, [r3, #0]
 801093c:	e03f      	b.n	80109be <LoRaMacConfirmQueueHandleCb+0xa6>
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 801093e:	4b26      	ldr	r3, [pc, #152]	; (80109d8 <LoRaMacConfirmQueueHandleCb+0xc0>)
 8010940:	685b      	ldr	r3, [r3, #4]
 8010942:	781a      	ldrb	r2, [r3, #0]
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	701a      	strb	r2, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 8010948:	4b23      	ldr	r3, [pc, #140]	; (80109d8 <LoRaMacConfirmQueueHandleCb+0xc0>)
 801094a:	685b      	ldr	r3, [r3, #4]
 801094c:	785a      	ldrb	r2, [r3, #1]
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	705a      	strb	r2, [r3, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 8010952:	4b21      	ldr	r3, [pc, #132]	; (80109d8 <LoRaMacConfirmQueueHandleCb+0xc0>)
 8010954:	685a      	ldr	r2, [r3, #4]
 8010956:	210d      	movs	r1, #13
 8010958:	187b      	adds	r3, r7, r1
 801095a:	7892      	ldrb	r2, [r2, #2]
 801095c:	701a      	strb	r2, [r3, #0]

        if( readyToHandle == true )
 801095e:	187b      	adds	r3, r7, r1
 8010960:	781b      	ldrb	r3, [r3, #0]
 8010962:	2b00      	cmp	r3, #0
 8010964:	d006      	beq.n	8010974 <LoRaMacConfirmQueueHandleCb+0x5c>
        {
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 8010966:	4b1c      	ldr	r3, [pc, #112]	; (80109d8 <LoRaMacConfirmQueueHandleCb+0xc0>)
 8010968:	681b      	ldr	r3, [r3, #0]
 801096a:	689b      	ldr	r3, [r3, #8]
 801096c:	687a      	ldr	r2, [r7, #4]
 801096e:	0010      	movs	r0, r2
 8010970:	4798      	blx	r3
 8010972:	e00f      	b.n	8010994 <LoRaMacConfirmQueueHandleCb+0x7c>
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 8010974:	4b18      	ldr	r3, [pc, #96]	; (80109d8 <LoRaMacConfirmQueueHandleCb+0xc0>)
 8010976:	685b      	ldr	r3, [r3, #4]
 8010978:	781a      	ldrb	r2, [r3, #0]
 801097a:	2108      	movs	r1, #8
 801097c:	187b      	adds	r3, r7, r1
 801097e:	701a      	strb	r2, [r3, #0]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 8010980:	4b15      	ldr	r3, [pc, #84]	; (80109d8 <LoRaMacConfirmQueueHandleCb+0xc0>)
 8010982:	685b      	ldr	r3, [r3, #4]
 8010984:	785a      	ldrb	r2, [r3, #1]
 8010986:	187b      	adds	r3, r7, r1
 8010988:	705a      	strb	r2, [r3, #1]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 801098a:	4b13      	ldr	r3, [pc, #76]	; (80109d8 <LoRaMacConfirmQueueHandleCb+0xc0>)
 801098c:	685b      	ldr	r3, [r3, #4]
 801098e:	78da      	ldrb	r2, [r3, #3]
 8010990:	187b      	adds	r3, r7, r1
 8010992:	70da      	strb	r2, [r3, #3]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 8010994:	f7ff fefa 	bl	801078c <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 8010998:	230d      	movs	r3, #13
 801099a:	18fb      	adds	r3, r7, r3
 801099c:	781b      	ldrb	r3, [r3, #0]
 801099e:	2201      	movs	r2, #1
 80109a0:	4053      	eors	r3, r2
 80109a2:	b2db      	uxtb	r3, r3
 80109a4:	2b00      	cmp	r3, #0
 80109a6:	d004      	beq.n	80109b2 <LoRaMacConfirmQueueHandleCb+0x9a>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 80109a8:	2308      	movs	r3, #8
 80109aa:	18fb      	adds	r3, r7, r3
 80109ac:	0018      	movs	r0, r3
 80109ae:	f7ff feb9 	bl	8010724 <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 80109b2:	210f      	movs	r1, #15
 80109b4:	187b      	adds	r3, r7, r1
 80109b6:	781a      	ldrb	r2, [r3, #0]
 80109b8:	187b      	adds	r3, r7, r1
 80109ba:	3201      	adds	r2, #1
 80109bc:	701a      	strb	r2, [r3, #0]
 80109be:	230f      	movs	r3, #15
 80109c0:	18fa      	adds	r2, r7, r3
 80109c2:	230e      	movs	r3, #14
 80109c4:	18fb      	adds	r3, r7, r3
 80109c6:	7812      	ldrb	r2, [r2, #0]
 80109c8:	781b      	ldrb	r3, [r3, #0]
 80109ca:	429a      	cmp	r2, r3
 80109cc:	d3b7      	bcc.n	801093e <LoRaMacConfirmQueueHandleCb+0x26>
        }
    }
}
 80109ce:	46c0      	nop			; (mov r8, r8)
 80109d0:	46bd      	mov	sp, r7
 80109d2:	b004      	add	sp, #16
 80109d4:	bd80      	pop	{r7, pc}
 80109d6:	46c0      	nop			; (mov r8, r8)
 80109d8:	20000ec4 	.word	0x20000ec4

080109dc <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 80109dc:	b580      	push	{r7, lr}
 80109de:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt;
 80109e0:	4b02      	ldr	r3, [pc, #8]	; (80109ec <LoRaMacConfirmQueueGetCnt+0x10>)
 80109e2:	691b      	ldr	r3, [r3, #16]
 80109e4:	7d1b      	ldrb	r3, [r3, #20]
}
 80109e6:	0018      	movs	r0, r3
 80109e8:	46bd      	mov	sp, r7
 80109ea:	bd80      	pop	{r7, pc}
 80109ec:	20000ec4 	.word	0x20000ec4

080109f0 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 80109f0:	b580      	push	{r7, lr}
 80109f2:	af00      	add	r7, sp, #0
    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 80109f4:	4b05      	ldr	r3, [pc, #20]	; (8010a0c <LoRaMacConfirmQueueIsFull+0x1c>)
 80109f6:	691b      	ldr	r3, [r3, #16]
 80109f8:	7d1b      	ldrb	r3, [r3, #20]
 80109fa:	2b04      	cmp	r3, #4
 80109fc:	d901      	bls.n	8010a02 <LoRaMacConfirmQueueIsFull+0x12>
    {
        return true;
 80109fe:	2301      	movs	r3, #1
 8010a00:	e000      	b.n	8010a04 <LoRaMacConfirmQueueIsFull+0x14>
    }
    else
    {
        return false;
 8010a02:	2300      	movs	r3, #0
    }
}
 8010a04:	0018      	movs	r0, r3
 8010a06:	46bd      	mov	sp, r7
 8010a08:	bd80      	pop	{r7, pc}
 8010a0a:	46c0      	nop			; (mov r8, r8)
 8010a0c:	20000ec4 	.word	0x20000ec4

08010a10 <PayloadEncrypt>:
 * \param[IN]  size             - Size of data
 * \param[IN/OUT]  buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
 8010a10:	b590      	push	{r4, r7, lr}
 8010a12:	b08f      	sub	sp, #60	; 0x3c
 8010a14:	af00      	add	r7, sp, #0
 8010a16:	60f8      	str	r0, [r7, #12]
 8010a18:	0008      	movs	r0, r1
 8010a1a:	0011      	movs	r1, r2
 8010a1c:	607b      	str	r3, [r7, #4]
 8010a1e:	230a      	movs	r3, #10
 8010a20:	18fb      	adds	r3, r7, r3
 8010a22:	1c02      	adds	r2, r0, #0
 8010a24:	801a      	strh	r2, [r3, #0]
 8010a26:	2309      	movs	r3, #9
 8010a28:	18fb      	adds	r3, r7, r3
 8010a2a:	1c0a      	adds	r2, r1, #0
 8010a2c:	701a      	strb	r2, [r3, #0]
    if( buffer == 0 )
 8010a2e:	68fb      	ldr	r3, [r7, #12]
 8010a30:	2b00      	cmp	r3, #0
 8010a32:	d101      	bne.n	8010a38 <PayloadEncrypt+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8010a34:	2307      	movs	r3, #7
 8010a36:	e0e9      	b.n	8010c0c <PayloadEncrypt+0x1fc>
    }

    uint8_t bufferIndex = 0;
 8010a38:	2337      	movs	r3, #55	; 0x37
 8010a3a:	18fb      	adds	r3, r7, r3
 8010a3c:	2200      	movs	r2, #0
 8010a3e:	701a      	strb	r2, [r3, #0]
    uint16_t ctr = 1;
 8010a40:	2334      	movs	r3, #52	; 0x34
 8010a42:	18fb      	adds	r3, r7, r3
 8010a44:	2201      	movs	r2, #1
 8010a46:	801a      	strh	r2, [r3, #0]
    uint8_t sBlock[16] = { 0 };
 8010a48:	2320      	movs	r3, #32
 8010a4a:	18fb      	adds	r3, r7, r3
 8010a4c:	0018      	movs	r0, r3
 8010a4e:	2310      	movs	r3, #16
 8010a50:	001a      	movs	r2, r3
 8010a52:	2100      	movs	r1, #0
 8010a54:	f00e fb74 	bl	801f140 <memset>
    uint8_t aBlock[16] = { 0 };
 8010a58:	2110      	movs	r1, #16
 8010a5a:	000c      	movs	r4, r1
 8010a5c:	187b      	adds	r3, r7, r1
 8010a5e:	0018      	movs	r0, r3
 8010a60:	2310      	movs	r3, #16
 8010a62:	001a      	movs	r2, r3
 8010a64:	2100      	movs	r1, #0
 8010a66:	f00e fb6b 	bl	801f140 <memset>

    aBlock[0] = 0x01;
 8010a6a:	0021      	movs	r1, r4
 8010a6c:	187b      	adds	r3, r7, r1
 8010a6e:	2201      	movs	r2, #1
 8010a70:	701a      	strb	r2, [r3, #0]

    aBlock[5] = dir;
 8010a72:	187b      	adds	r3, r7, r1
 8010a74:	2240      	movs	r2, #64	; 0x40
 8010a76:	2008      	movs	r0, #8
 8010a78:	4684      	mov	ip, r0
 8010a7a:	44bc      	add	ip, r7
 8010a7c:	4462      	add	r2, ip
 8010a7e:	7812      	ldrb	r2, [r2, #0]
 8010a80:	715a      	strb	r2, [r3, #5]

    aBlock[6] = address & 0xFF;
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	b2da      	uxtb	r2, r3
 8010a86:	187b      	adds	r3, r7, r1
 8010a88:	719a      	strb	r2, [r3, #6]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	0a1b      	lsrs	r3, r3, #8
 8010a8e:	b2da      	uxtb	r2, r3
 8010a90:	187b      	adds	r3, r7, r1
 8010a92:	71da      	strb	r2, [r3, #7]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	0c1b      	lsrs	r3, r3, #16
 8010a98:	b2da      	uxtb	r2, r3
 8010a9a:	187b      	adds	r3, r7, r1
 8010a9c:	721a      	strb	r2, [r3, #8]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	0e1b      	lsrs	r3, r3, #24
 8010aa2:	b2da      	uxtb	r2, r3
 8010aa4:	187b      	adds	r3, r7, r1
 8010aa6:	725a      	strb	r2, [r3, #9]

    aBlock[10] = frameCounter & 0xFF;
 8010aa8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010aaa:	b2da      	uxtb	r2, r3
 8010aac:	187b      	adds	r3, r7, r1
 8010aae:	729a      	strb	r2, [r3, #10]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 8010ab0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010ab2:	0a1b      	lsrs	r3, r3, #8
 8010ab4:	b2da      	uxtb	r2, r3
 8010ab6:	187b      	adds	r3, r7, r1
 8010ab8:	72da      	strb	r2, [r3, #11]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 8010aba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010abc:	0c1b      	lsrs	r3, r3, #16
 8010abe:	b2da      	uxtb	r2, r3
 8010ac0:	187b      	adds	r3, r7, r1
 8010ac2:	731a      	strb	r2, [r3, #12]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 8010ac4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010ac6:	0e1b      	lsrs	r3, r3, #24
 8010ac8:	b2da      	uxtb	r2, r3
 8010aca:	187b      	adds	r3, r7, r1
 8010acc:	735a      	strb	r2, [r3, #13]

    while( size >= 16 )
 8010ace:	e04f      	b.n	8010b70 <PayloadEncrypt+0x160>
    {
        aBlock[15] = ctr & 0xFF;
 8010ad0:	2134      	movs	r1, #52	; 0x34
 8010ad2:	187b      	adds	r3, r7, r1
 8010ad4:	881b      	ldrh	r3, [r3, #0]
 8010ad6:	b2da      	uxtb	r2, r3
 8010ad8:	2010      	movs	r0, #16
 8010ada:	183b      	adds	r3, r7, r0
 8010adc:	73da      	strb	r2, [r3, #15]
        ctr++;
 8010ade:	187b      	adds	r3, r7, r1
 8010ae0:	881a      	ldrh	r2, [r3, #0]
 8010ae2:	187b      	adds	r3, r7, r1
 8010ae4:	3201      	adds	r2, #1
 8010ae6:	801a      	strh	r2, [r3, #0]
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 8010ae8:	2320      	movs	r3, #32
 8010aea:	18f9      	adds	r1, r7, r3
 8010aec:	2309      	movs	r3, #9
 8010aee:	18fb      	adds	r3, r7, r3
 8010af0:	781a      	ldrb	r2, [r3, #0]
 8010af2:	1838      	adds	r0, r7, r0
 8010af4:	000b      	movs	r3, r1
 8010af6:	2110      	movs	r1, #16
 8010af8:	f7f9 fc02 	bl	800a300 <SecureElementAesEncrypt>
 8010afc:	1e03      	subs	r3, r0, #0
 8010afe:	d001      	beq.n	8010b04 <PayloadEncrypt+0xf4>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8010b00:	230c      	movs	r3, #12
 8010b02:	e083      	b.n	8010c0c <PayloadEncrypt+0x1fc>
        }

        for( uint8_t i = 0; i < 16; i++ )
 8010b04:	2333      	movs	r3, #51	; 0x33
 8010b06:	18fb      	adds	r3, r7, r3
 8010b08:	2200      	movs	r2, #0
 8010b0a:	701a      	strb	r2, [r3, #0]
 8010b0c:	e01f      	b.n	8010b4e <PayloadEncrypt+0x13e>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 8010b0e:	2037      	movs	r0, #55	; 0x37
 8010b10:	183b      	adds	r3, r7, r0
 8010b12:	781a      	ldrb	r2, [r3, #0]
 8010b14:	2433      	movs	r4, #51	; 0x33
 8010b16:	193b      	adds	r3, r7, r4
 8010b18:	781b      	ldrb	r3, [r3, #0]
 8010b1a:	18d3      	adds	r3, r2, r3
 8010b1c:	001a      	movs	r2, r3
 8010b1e:	68fb      	ldr	r3, [r7, #12]
 8010b20:	189b      	adds	r3, r3, r2
 8010b22:	7819      	ldrb	r1, [r3, #0]
 8010b24:	193b      	adds	r3, r7, r4
 8010b26:	781b      	ldrb	r3, [r3, #0]
 8010b28:	2220      	movs	r2, #32
 8010b2a:	18ba      	adds	r2, r7, r2
 8010b2c:	5cd2      	ldrb	r2, [r2, r3]
 8010b2e:	183b      	adds	r3, r7, r0
 8010b30:	7818      	ldrb	r0, [r3, #0]
 8010b32:	193b      	adds	r3, r7, r4
 8010b34:	781b      	ldrb	r3, [r3, #0]
 8010b36:	18c3      	adds	r3, r0, r3
 8010b38:	0018      	movs	r0, r3
 8010b3a:	68fb      	ldr	r3, [r7, #12]
 8010b3c:	181b      	adds	r3, r3, r0
 8010b3e:	404a      	eors	r2, r1
 8010b40:	b2d2      	uxtb	r2, r2
 8010b42:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < 16; i++ )
 8010b44:	193b      	adds	r3, r7, r4
 8010b46:	781a      	ldrb	r2, [r3, #0]
 8010b48:	193b      	adds	r3, r7, r4
 8010b4a:	3201      	adds	r2, #1
 8010b4c:	701a      	strb	r2, [r3, #0]
 8010b4e:	2333      	movs	r3, #51	; 0x33
 8010b50:	18fb      	adds	r3, r7, r3
 8010b52:	781b      	ldrb	r3, [r3, #0]
 8010b54:	2b0f      	cmp	r3, #15
 8010b56:	d9da      	bls.n	8010b0e <PayloadEncrypt+0xfe>
        }
        size -= 16;
 8010b58:	220a      	movs	r2, #10
 8010b5a:	18bb      	adds	r3, r7, r2
 8010b5c:	18ba      	adds	r2, r7, r2
 8010b5e:	8812      	ldrh	r2, [r2, #0]
 8010b60:	3a10      	subs	r2, #16
 8010b62:	801a      	strh	r2, [r3, #0]
        bufferIndex += 16;
 8010b64:	2237      	movs	r2, #55	; 0x37
 8010b66:	18bb      	adds	r3, r7, r2
 8010b68:	18ba      	adds	r2, r7, r2
 8010b6a:	7812      	ldrb	r2, [r2, #0]
 8010b6c:	3210      	adds	r2, #16
 8010b6e:	701a      	strb	r2, [r3, #0]
    while( size >= 16 )
 8010b70:	230a      	movs	r3, #10
 8010b72:	18fb      	adds	r3, r7, r3
 8010b74:	881b      	ldrh	r3, [r3, #0]
 8010b76:	2b0f      	cmp	r3, #15
 8010b78:	d8aa      	bhi.n	8010ad0 <PayloadEncrypt+0xc0>
    }

    if( size > 0 )
 8010b7a:	230a      	movs	r3, #10
 8010b7c:	18fb      	adds	r3, r7, r3
 8010b7e:	881b      	ldrh	r3, [r3, #0]
 8010b80:	2b00      	cmp	r3, #0
 8010b82:	d042      	beq.n	8010c0a <PayloadEncrypt+0x1fa>
    {
        aBlock[15] = ctr & 0xFF;
 8010b84:	2334      	movs	r3, #52	; 0x34
 8010b86:	18fb      	adds	r3, r7, r3
 8010b88:	881b      	ldrh	r3, [r3, #0]
 8010b8a:	b2da      	uxtb	r2, r3
 8010b8c:	2010      	movs	r0, #16
 8010b8e:	183b      	adds	r3, r7, r0
 8010b90:	73da      	strb	r2, [r3, #15]
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 8010b92:	2320      	movs	r3, #32
 8010b94:	18f9      	adds	r1, r7, r3
 8010b96:	2309      	movs	r3, #9
 8010b98:	18fb      	adds	r3, r7, r3
 8010b9a:	781a      	ldrb	r2, [r3, #0]
 8010b9c:	1838      	adds	r0, r7, r0
 8010b9e:	000b      	movs	r3, r1
 8010ba0:	2110      	movs	r1, #16
 8010ba2:	f7f9 fbad 	bl	800a300 <SecureElementAesEncrypt>
 8010ba6:	1e03      	subs	r3, r0, #0
 8010ba8:	d001      	beq.n	8010bae <PayloadEncrypt+0x19e>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8010baa:	230c      	movs	r3, #12
 8010bac:	e02e      	b.n	8010c0c <PayloadEncrypt+0x1fc>
        }
        for( uint8_t i = 0; i < size; i++ )
 8010bae:	2332      	movs	r3, #50	; 0x32
 8010bb0:	18fb      	adds	r3, r7, r3
 8010bb2:	2200      	movs	r2, #0
 8010bb4:	701a      	strb	r2, [r3, #0]
 8010bb6:	e01f      	b.n	8010bf8 <PayloadEncrypt+0x1e8>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 8010bb8:	2037      	movs	r0, #55	; 0x37
 8010bba:	183b      	adds	r3, r7, r0
 8010bbc:	781a      	ldrb	r2, [r3, #0]
 8010bbe:	2432      	movs	r4, #50	; 0x32
 8010bc0:	193b      	adds	r3, r7, r4
 8010bc2:	781b      	ldrb	r3, [r3, #0]
 8010bc4:	18d3      	adds	r3, r2, r3
 8010bc6:	001a      	movs	r2, r3
 8010bc8:	68fb      	ldr	r3, [r7, #12]
 8010bca:	189b      	adds	r3, r3, r2
 8010bcc:	7819      	ldrb	r1, [r3, #0]
 8010bce:	193b      	adds	r3, r7, r4
 8010bd0:	781b      	ldrb	r3, [r3, #0]
 8010bd2:	2220      	movs	r2, #32
 8010bd4:	18ba      	adds	r2, r7, r2
 8010bd6:	5cd2      	ldrb	r2, [r2, r3]
 8010bd8:	183b      	adds	r3, r7, r0
 8010bda:	7818      	ldrb	r0, [r3, #0]
 8010bdc:	193b      	adds	r3, r7, r4
 8010bde:	781b      	ldrb	r3, [r3, #0]
 8010be0:	18c3      	adds	r3, r0, r3
 8010be2:	0018      	movs	r0, r3
 8010be4:	68fb      	ldr	r3, [r7, #12]
 8010be6:	181b      	adds	r3, r3, r0
 8010be8:	404a      	eors	r2, r1
 8010bea:	b2d2      	uxtb	r2, r2
 8010bec:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < size; i++ )
 8010bee:	193b      	adds	r3, r7, r4
 8010bf0:	781a      	ldrb	r2, [r3, #0]
 8010bf2:	193b      	adds	r3, r7, r4
 8010bf4:	3201      	adds	r2, #1
 8010bf6:	701a      	strb	r2, [r3, #0]
 8010bf8:	2332      	movs	r3, #50	; 0x32
 8010bfa:	18fb      	adds	r3, r7, r3
 8010bfc:	781b      	ldrb	r3, [r3, #0]
 8010bfe:	b29b      	uxth	r3, r3
 8010c00:	220a      	movs	r2, #10
 8010c02:	18ba      	adds	r2, r7, r2
 8010c04:	8812      	ldrh	r2, [r2, #0]
 8010c06:	429a      	cmp	r2, r3
 8010c08:	d8d6      	bhi.n	8010bb8 <PayloadEncrypt+0x1a8>
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8010c0a:	2300      	movs	r3, #0
}
 8010c0c:	0018      	movs	r0, r3
 8010c0e:	46bd      	mov	sp, r7
 8010c10:	b00f      	add	sp, #60	; 0x3c
 8010c12:	bd90      	pop	{r4, r7, pc}

08010c14 <FOptsEncrypt>:
 * \param[IN]  size             - Size of data
 * \param[IN/OUT]  buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t FOptsEncrypt( uint16_t size, uint32_t address, uint8_t dir, FCntIdentifier_t fCntID, uint32_t frameCounter, uint8_t* buffer )
{
 8010c14:	b590      	push	{r4, r7, lr}
 8010c16:	b08d      	sub	sp, #52	; 0x34
 8010c18:	af00      	add	r7, sp, #0
 8010c1a:	0004      	movs	r4, r0
 8010c1c:	6039      	str	r1, [r7, #0]
 8010c1e:	0010      	movs	r0, r2
 8010c20:	0019      	movs	r1, r3
 8010c22:	1dbb      	adds	r3, r7, #6
 8010c24:	1c22      	adds	r2, r4, #0
 8010c26:	801a      	strh	r2, [r3, #0]
 8010c28:	1d7b      	adds	r3, r7, #5
 8010c2a:	1c02      	adds	r2, r0, #0
 8010c2c:	701a      	strb	r2, [r3, #0]
 8010c2e:	1d3b      	adds	r3, r7, #4
 8010c30:	1c0a      	adds	r2, r1, #0
 8010c32:	701a      	strb	r2, [r3, #0]
    if( buffer == 0 )
 8010c34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010c36:	2b00      	cmp	r3, #0
 8010c38:	d101      	bne.n	8010c3e <FOptsEncrypt+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8010c3a:	2307      	movs	r3, #7
 8010c3c:	e09b      	b.n	8010d76 <FOptsEncrypt+0x162>
    }

    uint8_t bufferIndex = 0;
 8010c3e:	232e      	movs	r3, #46	; 0x2e
 8010c40:	18fb      	adds	r3, r7, r3
 8010c42:	2200      	movs	r2, #0
 8010c44:	701a      	strb	r2, [r3, #0]
    uint8_t sBlock[16] = { 0 };
 8010c46:	231c      	movs	r3, #28
 8010c48:	18fb      	adds	r3, r7, r3
 8010c4a:	0018      	movs	r0, r3
 8010c4c:	2310      	movs	r3, #16
 8010c4e:	001a      	movs	r2, r3
 8010c50:	2100      	movs	r1, #0
 8010c52:	f00e fa75 	bl	801f140 <memset>
    uint8_t aBlock[16] = { 0 };
 8010c56:	240c      	movs	r4, #12
 8010c58:	193b      	adds	r3, r7, r4
 8010c5a:	0018      	movs	r0, r3
 8010c5c:	2310      	movs	r3, #16
 8010c5e:	001a      	movs	r2, r3
 8010c60:	2100      	movs	r1, #0
 8010c62:	f00e fa6d 	bl	801f140 <memset>

    aBlock[0] = 0x01;
 8010c66:	193b      	adds	r3, r7, r4
 8010c68:	2201      	movs	r2, #1
 8010c6a:	701a      	strb	r2, [r3, #0]

    switch( fCntID )
 8010c6c:	1d3b      	adds	r3, r7, #4
 8010c6e:	781b      	ldrb	r3, [r3, #0]
 8010c70:	2b01      	cmp	r3, #1
 8010c72:	d008      	beq.n	8010c86 <FOptsEncrypt+0x72>
 8010c74:	2b02      	cmp	r3, #2
 8010c76:	d00b      	beq.n	8010c90 <FOptsEncrypt+0x7c>
 8010c78:	2b00      	cmp	r3, #0
 8010c7a:	d10e      	bne.n	8010c9a <FOptsEncrypt+0x86>
    {
        case FCNT_UP:
        {
            aBlock[4] = 0x01;
 8010c7c:	230c      	movs	r3, #12
 8010c7e:	18fb      	adds	r3, r7, r3
 8010c80:	2201      	movs	r2, #1
 8010c82:	711a      	strb	r2, [r3, #4]
            break;
 8010c84:	e00b      	b.n	8010c9e <FOptsEncrypt+0x8a>
        }
        case N_FCNT_DOWN:
        {
            aBlock[4] = 0x01;
 8010c86:	230c      	movs	r3, #12
 8010c88:	18fb      	adds	r3, r7, r3
 8010c8a:	2201      	movs	r2, #1
 8010c8c:	711a      	strb	r2, [r3, #4]
            break;
 8010c8e:	e006      	b.n	8010c9e <FOptsEncrypt+0x8a>
        }
        case A_FCNT_DOWN:
        {
            aBlock[4] = 0x02;
 8010c90:	230c      	movs	r3, #12
 8010c92:	18fb      	adds	r3, r7, r3
 8010c94:	2202      	movs	r2, #2
 8010c96:	711a      	strb	r2, [r3, #4]
            break;
 8010c98:	e001      	b.n	8010c9e <FOptsEncrypt+0x8a>
        }
        default:
            return LORAMAC_CRYPTO_FAIL_PARAM;
 8010c9a:	2306      	movs	r3, #6
 8010c9c:	e06b      	b.n	8010d76 <FOptsEncrypt+0x162>
    }

    aBlock[5] = dir;
 8010c9e:	210c      	movs	r1, #12
 8010ca0:	187b      	adds	r3, r7, r1
 8010ca2:	1d7a      	adds	r2, r7, #5
 8010ca4:	7812      	ldrb	r2, [r2, #0]
 8010ca6:	715a      	strb	r2, [r3, #5]

    aBlock[6] = address & 0xFF;
 8010ca8:	683b      	ldr	r3, [r7, #0]
 8010caa:	b2da      	uxtb	r2, r3
 8010cac:	187b      	adds	r3, r7, r1
 8010cae:	719a      	strb	r2, [r3, #6]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 8010cb0:	683b      	ldr	r3, [r7, #0]
 8010cb2:	0a1b      	lsrs	r3, r3, #8
 8010cb4:	b2da      	uxtb	r2, r3
 8010cb6:	187b      	adds	r3, r7, r1
 8010cb8:	71da      	strb	r2, [r3, #7]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 8010cba:	683b      	ldr	r3, [r7, #0]
 8010cbc:	0c1b      	lsrs	r3, r3, #16
 8010cbe:	b2da      	uxtb	r2, r3
 8010cc0:	187b      	adds	r3, r7, r1
 8010cc2:	721a      	strb	r2, [r3, #8]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 8010cc4:	683b      	ldr	r3, [r7, #0]
 8010cc6:	0e1b      	lsrs	r3, r3, #24
 8010cc8:	b2da      	uxtb	r2, r3
 8010cca:	187b      	adds	r3, r7, r1
 8010ccc:	725a      	strb	r2, [r3, #9]

    aBlock[10] = frameCounter & 0xFF;
 8010cce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010cd0:	b2da      	uxtb	r2, r3
 8010cd2:	187b      	adds	r3, r7, r1
 8010cd4:	729a      	strb	r2, [r3, #10]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 8010cd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010cd8:	0a1b      	lsrs	r3, r3, #8
 8010cda:	b2da      	uxtb	r2, r3
 8010cdc:	187b      	adds	r3, r7, r1
 8010cde:	72da      	strb	r2, [r3, #11]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 8010ce0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010ce2:	0c1b      	lsrs	r3, r3, #16
 8010ce4:	b2da      	uxtb	r2, r3
 8010ce6:	187b      	adds	r3, r7, r1
 8010ce8:	731a      	strb	r2, [r3, #12]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 8010cea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010cec:	0e1b      	lsrs	r3, r3, #24
 8010cee:	b2da      	uxtb	r2, r3
 8010cf0:	187b      	adds	r3, r7, r1
 8010cf2:	735a      	strb	r2, [r3, #13]

    aBlock[15] = 0x01;
 8010cf4:	187b      	adds	r3, r7, r1
 8010cf6:	2201      	movs	r2, #1
 8010cf8:	73da      	strb	r2, [r3, #15]

    if( size > 0 )
 8010cfa:	1dbb      	adds	r3, r7, #6
 8010cfc:	881b      	ldrh	r3, [r3, #0]
 8010cfe:	2b00      	cmp	r3, #0
 8010d00:	d038      	beq.n	8010d74 <FOptsEncrypt+0x160>
    {
        if( SecureElementAesEncrypt( aBlock, 16, NWK_S_ENC_KEY, sBlock ) != SECURE_ELEMENT_SUCCESS )
 8010d02:	231c      	movs	r3, #28
 8010d04:	18fb      	adds	r3, r7, r3
 8010d06:	220c      	movs	r2, #12
 8010d08:	18b8      	adds	r0, r7, r2
 8010d0a:	2206      	movs	r2, #6
 8010d0c:	2110      	movs	r1, #16
 8010d0e:	f7f9 faf7 	bl	800a300 <SecureElementAesEncrypt>
 8010d12:	1e03      	subs	r3, r0, #0
 8010d14:	d001      	beq.n	8010d1a <FOptsEncrypt+0x106>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8010d16:	230c      	movs	r3, #12
 8010d18:	e02d      	b.n	8010d76 <FOptsEncrypt+0x162>
        }
        for( uint8_t i = 0; i < size; i++ )
 8010d1a:	232f      	movs	r3, #47	; 0x2f
 8010d1c:	18fb      	adds	r3, r7, r3
 8010d1e:	2200      	movs	r2, #0
 8010d20:	701a      	strb	r2, [r3, #0]
 8010d22:	e01f      	b.n	8010d64 <FOptsEncrypt+0x150>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 8010d24:	202e      	movs	r0, #46	; 0x2e
 8010d26:	183b      	adds	r3, r7, r0
 8010d28:	781a      	ldrb	r2, [r3, #0]
 8010d2a:	242f      	movs	r4, #47	; 0x2f
 8010d2c:	193b      	adds	r3, r7, r4
 8010d2e:	781b      	ldrb	r3, [r3, #0]
 8010d30:	18d3      	adds	r3, r2, r3
 8010d32:	001a      	movs	r2, r3
 8010d34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010d36:	189b      	adds	r3, r3, r2
 8010d38:	7819      	ldrb	r1, [r3, #0]
 8010d3a:	193b      	adds	r3, r7, r4
 8010d3c:	781b      	ldrb	r3, [r3, #0]
 8010d3e:	221c      	movs	r2, #28
 8010d40:	18ba      	adds	r2, r7, r2
 8010d42:	5cd2      	ldrb	r2, [r2, r3]
 8010d44:	183b      	adds	r3, r7, r0
 8010d46:	7818      	ldrb	r0, [r3, #0]
 8010d48:	193b      	adds	r3, r7, r4
 8010d4a:	781b      	ldrb	r3, [r3, #0]
 8010d4c:	18c3      	adds	r3, r0, r3
 8010d4e:	0018      	movs	r0, r3
 8010d50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010d52:	181b      	adds	r3, r3, r0
 8010d54:	404a      	eors	r2, r1
 8010d56:	b2d2      	uxtb	r2, r2
 8010d58:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < size; i++ )
 8010d5a:	193b      	adds	r3, r7, r4
 8010d5c:	781a      	ldrb	r2, [r3, #0]
 8010d5e:	193b      	adds	r3, r7, r4
 8010d60:	3201      	adds	r2, #1
 8010d62:	701a      	strb	r2, [r3, #0]
 8010d64:	232f      	movs	r3, #47	; 0x2f
 8010d66:	18fb      	adds	r3, r7, r3
 8010d68:	781b      	ldrb	r3, [r3, #0]
 8010d6a:	b29b      	uxth	r3, r3
 8010d6c:	1dba      	adds	r2, r7, #6
 8010d6e:	8812      	ldrh	r2, [r2, #0]
 8010d70:	429a      	cmp	r2, r3
 8010d72:	d8d7      	bhi.n	8010d24 <FOptsEncrypt+0x110>
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8010d74:	2300      	movs	r3, #0
}
 8010d76:	0018      	movs	r0, r3
 8010d78:	46bd      	mov	sp, r7
 8010d7a:	b00d      	add	sp, #52	; 0x34
 8010d7c:	bd90      	pop	{r4, r7, pc}

08010d7e <LoraMacCryptoComputeCmac>:
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t LoraMacCryptoComputeCmac( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, uint32_t* cmac );

static LoRaMacCryptoStatus_t LoraMacCryptoComputeCmac( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, uint32_t* cmac )
{
 8010d7e:	b5b0      	push	{r4, r5, r7, lr}
 8010d80:	b084      	sub	sp, #16
 8010d82:	af00      	add	r7, sp, #0
 8010d84:	60f8      	str	r0, [r7, #12]
 8010d86:	0008      	movs	r0, r1
 8010d88:	0011      	movs	r1, r2
 8010d8a:	607b      	str	r3, [r7, #4]
 8010d8c:	250a      	movs	r5, #10
 8010d8e:	197b      	adds	r3, r7, r5
 8010d90:	1c02      	adds	r2, r0, #0
 8010d92:	801a      	strh	r2, [r3, #0]
 8010d94:	2009      	movs	r0, #9
 8010d96:	183b      	adds	r3, r7, r0
 8010d98:	1c0a      	adds	r2, r1, #0
 8010d9a:	701a      	strb	r2, [r3, #0]
    if( SecureElementComputeAesCmac( msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 8010d9c:	687c      	ldr	r4, [r7, #4]
 8010d9e:	183b      	adds	r3, r7, r0
 8010da0:	781a      	ldrb	r2, [r3, #0]
 8010da2:	197b      	adds	r3, r7, r5
 8010da4:	8819      	ldrh	r1, [r3, #0]
 8010da6:	68f8      	ldr	r0, [r7, #12]
 8010da8:	0023      	movs	r3, r4
 8010daa:	f7f9 fa43 	bl	800a234 <SecureElementComputeAesCmac>
 8010dae:	1e03      	subs	r3, r0, #0
 8010db0:	d001      	beq.n	8010db6 <LoraMacCryptoComputeCmac+0x38>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8010db2:	230c      	movs	r3, #12
 8010db4:	e000      	b.n	8010db8 <LoraMacCryptoComputeCmac+0x3a>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8010db6:	2300      	movs	r3, #0
}
 8010db8:	0018      	movs	r0, r3
 8010dba:	46bd      	mov	sp, r7
 8010dbc:	b004      	add	sp, #16
 8010dbe:	bdb0      	pop	{r4, r5, r7, pc}

08010dc0 <VerifyCmac>:
 * \param[in]  expectedCmac   - Expected cmac
 * \param[IN]  keyID          - Key identifier to determine the AES key to be used
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmac( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, uint32_t expectedcmac )
{
 8010dc0:	b5b0      	push	{r4, r5, r7, lr}
 8010dc2:	b084      	sub	sp, #16
 8010dc4:	af00      	add	r7, sp, #0
 8010dc6:	60f8      	str	r0, [r7, #12]
 8010dc8:	0008      	movs	r0, r1
 8010dca:	0011      	movs	r1, r2
 8010dcc:	607b      	str	r3, [r7, #4]
 8010dce:	250a      	movs	r5, #10
 8010dd0:	197b      	adds	r3, r7, r5
 8010dd2:	1c02      	adds	r2, r0, #0
 8010dd4:	801a      	strh	r2, [r3, #0]
 8010dd6:	2009      	movs	r0, #9
 8010dd8:	183b      	adds	r3, r7, r0
 8010dda:	1c0a      	adds	r2, r1, #0
 8010ddc:	701a      	strb	r2, [r3, #0]
    if( SecureElementVerifyAesCmac( msg, len, expectedcmac, keyID ) != SECURE_ELEMENT_SUCCESS )
 8010dde:	183b      	adds	r3, r7, r0
 8010de0:	781c      	ldrb	r4, [r3, #0]
 8010de2:	687a      	ldr	r2, [r7, #4]
 8010de4:	197b      	adds	r3, r7, r5
 8010de6:	8819      	ldrh	r1, [r3, #0]
 8010de8:	68f8      	ldr	r0, [r7, #12]
 8010dea:	0023      	movs	r3, r4
 8010dec:	f7f9 fa47 	bl	800a27e <SecureElementVerifyAesCmac>
 8010df0:	1e03      	subs	r3, r0, #0
 8010df2:	d001      	beq.n	8010df8 <VerifyCmac+0x38>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8010df4:	230c      	movs	r3, #12
 8010df6:	e000      	b.n	8010dfa <VerifyCmac+0x3a>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8010df8:	2300      	movs	r3, #0
}
 8010dfa:	0018      	movs	r0, r3
 8010dfc:	46bd      	mov	sp, r7
 8010dfe:	b004      	add	sp, #16
 8010e00:	bdb0      	pop	{r4, r5, r7, pc}
	...

08010e04 <PrepareB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[IN/OUT]  b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 8010e04:	b5b0      	push	{r4, r5, r7, lr}
 8010e06:	b084      	sub	sp, #16
 8010e08:	af00      	add	r7, sp, #0
 8010e0a:	0005      	movs	r5, r0
 8010e0c:	000c      	movs	r4, r1
 8010e0e:	0010      	movs	r0, r2
 8010e10:	0019      	movs	r1, r3
 8010e12:	1dbb      	adds	r3, r7, #6
 8010e14:	1c2a      	adds	r2, r5, #0
 8010e16:	801a      	strh	r2, [r3, #0]
 8010e18:	1d7b      	adds	r3, r7, #5
 8010e1a:	1c22      	adds	r2, r4, #0
 8010e1c:	701a      	strb	r2, [r3, #0]
 8010e1e:	1d3b      	adds	r3, r7, #4
 8010e20:	1c02      	adds	r2, r0, #0
 8010e22:	701a      	strb	r2, [r3, #0]
 8010e24:	1cfb      	adds	r3, r7, #3
 8010e26:	1c0a      	adds	r2, r1, #0
 8010e28:	701a      	strb	r2, [r3, #0]
    if( b0 == 0 )
 8010e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e2c:	2b00      	cmp	r3, #0
 8010e2e:	d101      	bne.n	8010e34 <PrepareB0+0x30>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8010e30:	2307      	movs	r3, #7
 8010e32:	e079      	b.n	8010f28 <PrepareB0+0x124>
    }

    b0[0] = 0x49;
 8010e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e36:	2249      	movs	r2, #73	; 0x49
 8010e38:	701a      	strb	r2, [r3, #0]

    if( isAck == true )
 8010e3a:	1d3b      	adds	r3, r7, #4
 8010e3c:	781b      	ldrb	r3, [r3, #0]
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	d024      	beq.n	8010e8c <PrepareB0+0x88>
    {
        // confFCnt contains the frame counter value modulo 2^16 of the "confirmed" uplink or downlink frame that is being acknowledged
        uint16_t confFCnt = 0;
 8010e42:	230e      	movs	r3, #14
 8010e44:	18fb      	adds	r3, r7, r3
 8010e46:	2200      	movs	r2, #0
 8010e48:	801a      	strh	r2, [r3, #0]
        if( dir == UPLINK )
 8010e4a:	1cfb      	adds	r3, r7, #3
 8010e4c:	781b      	ldrb	r3, [r3, #0]
 8010e4e:	2b00      	cmp	r3, #0
 8010e50:	d106      	bne.n	8010e60 <PrepareB0+0x5c>
        {
            confFCnt = ( uint16_t )( CryptoCtx.NvmCtx->FCntDown % 65536 );
 8010e52:	4b37      	ldr	r3, [pc, #220]	; (8010f30 <PrepareB0+0x12c>)
 8010e54:	689b      	ldr	r3, [r3, #8]
 8010e56:	695a      	ldr	r2, [r3, #20]
 8010e58:	230e      	movs	r3, #14
 8010e5a:	18fb      	adds	r3, r7, r3
 8010e5c:	801a      	strh	r2, [r3, #0]
 8010e5e:	e005      	b.n	8010e6c <PrepareB0+0x68>
        }
        else
        {
            confFCnt = ( uint16_t )( CryptoCtx.NvmCtx->FCntUp % 65536 );
 8010e60:	4b33      	ldr	r3, [pc, #204]	; (8010f30 <PrepareB0+0x12c>)
 8010e62:	689b      	ldr	r3, [r3, #8]
 8010e64:	689a      	ldr	r2, [r3, #8]
 8010e66:	230e      	movs	r3, #14
 8010e68:	18fb      	adds	r3, r7, r3
 8010e6a:	801a      	strh	r2, [r3, #0]
        }

        b0[1] = confFCnt & 0xFF;
 8010e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e6e:	3301      	adds	r3, #1
 8010e70:	210e      	movs	r1, #14
 8010e72:	187a      	adds	r2, r7, r1
 8010e74:	8812      	ldrh	r2, [r2, #0]
 8010e76:	b2d2      	uxtb	r2, r2
 8010e78:	701a      	strb	r2, [r3, #0]
        b0[2] = ( confFCnt >> 8 ) & 0xFF;
 8010e7a:	187b      	adds	r3, r7, r1
 8010e7c:	881b      	ldrh	r3, [r3, #0]
 8010e7e:	0a1b      	lsrs	r3, r3, #8
 8010e80:	b29a      	uxth	r2, r3
 8010e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e84:	3302      	adds	r3, #2
 8010e86:	b2d2      	uxtb	r2, r2
 8010e88:	701a      	strb	r2, [r3, #0]
 8010e8a:	e007      	b.n	8010e9c <PrepareB0+0x98>
    }
    else
    {
        b0[1] = 0x00;
 8010e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e8e:	3301      	adds	r3, #1
 8010e90:	2200      	movs	r2, #0
 8010e92:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
 8010e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e96:	3302      	adds	r3, #2
 8010e98:	2200      	movs	r2, #0
 8010e9a:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
 8010e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e9e:	3303      	adds	r3, #3
 8010ea0:	2200      	movs	r2, #0
 8010ea2:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
 8010ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ea6:	3304      	adds	r3, #4
 8010ea8:	2200      	movs	r2, #0
 8010eaa:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
 8010eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010eae:	3305      	adds	r3, #5
 8010eb0:	1cfa      	adds	r2, r7, #3
 8010eb2:	7812      	ldrb	r2, [r2, #0]
 8010eb4:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
 8010eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010eb8:	3306      	adds	r3, #6
 8010eba:	6a3a      	ldr	r2, [r7, #32]
 8010ebc:	b2d2      	uxtb	r2, r2
 8010ebe:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 8010ec0:	6a3b      	ldr	r3, [r7, #32]
 8010ec2:	0a1a      	lsrs	r2, r3, #8
 8010ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ec6:	3307      	adds	r3, #7
 8010ec8:	b2d2      	uxtb	r2, r2
 8010eca:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 8010ecc:	6a3b      	ldr	r3, [r7, #32]
 8010ece:	0c1a      	lsrs	r2, r3, #16
 8010ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ed2:	3308      	adds	r3, #8
 8010ed4:	b2d2      	uxtb	r2, r2
 8010ed6:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 8010ed8:	6a3b      	ldr	r3, [r7, #32]
 8010eda:	0e1a      	lsrs	r2, r3, #24
 8010edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ede:	3309      	adds	r3, #9
 8010ee0:	b2d2      	uxtb	r2, r2
 8010ee2:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
 8010ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ee6:	330a      	adds	r3, #10
 8010ee8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010eea:	b2d2      	uxtb	r2, r2
 8010eec:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 8010eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ef0:	0a1a      	lsrs	r2, r3, #8
 8010ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ef4:	330b      	adds	r3, #11
 8010ef6:	b2d2      	uxtb	r2, r2
 8010ef8:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 8010efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010efc:	0c1a      	lsrs	r2, r3, #16
 8010efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f00:	330c      	adds	r3, #12
 8010f02:	b2d2      	uxtb	r2, r2
 8010f04:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 8010f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f08:	0e1a      	lsrs	r2, r3, #24
 8010f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f0c:	330d      	adds	r3, #13
 8010f0e:	b2d2      	uxtb	r2, r2
 8010f10:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
 8010f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f14:	330e      	adds	r3, #14
 8010f16:	2200      	movs	r2, #0
 8010f18:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
 8010f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f1c:	330f      	adds	r3, #15
 8010f1e:	1dba      	adds	r2, r7, #6
 8010f20:	8812      	ldrh	r2, [r2, #0]
 8010f22:	b2d2      	uxtb	r2, r2
 8010f24:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8010f26:	2300      	movs	r3, #0
}
 8010f28:	0018      	movs	r0, r3
 8010f2a:	46bd      	mov	sp, r7
 8010f2c:	b004      	add	sp, #16
 8010f2e:	bdb0      	pop	{r4, r5, r7, pc}
 8010f30:	20000ed8 	.word	0x20000ed8

08010f34 <ComputeCmacB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
 8010f34:	b5b0      	push	{r4, r5, r7, lr}
 8010f36:	b0ca      	sub	sp, #296	; 0x128
 8010f38:	af04      	add	r7, sp, #16
 8010f3a:	6078      	str	r0, [r7, #4]
 8010f3c:	000c      	movs	r4, r1
 8010f3e:	0010      	movs	r0, r2
 8010f40:	0019      	movs	r1, r3
 8010f42:	4b47      	ldr	r3, [pc, #284]	; (8011060 <ComputeCmacB0+0x12c>)
 8010f44:	228c      	movs	r2, #140	; 0x8c
 8010f46:	0052      	lsls	r2, r2, #1
 8010f48:	4694      	mov	ip, r2
 8010f4a:	44bc      	add	ip, r7
 8010f4c:	4463      	add	r3, ip
 8010f4e:	1c22      	adds	r2, r4, #0
 8010f50:	801a      	strh	r2, [r3, #0]
 8010f52:	4b44      	ldr	r3, [pc, #272]	; (8011064 <ComputeCmacB0+0x130>)
 8010f54:	228c      	movs	r2, #140	; 0x8c
 8010f56:	0052      	lsls	r2, r2, #1
 8010f58:	4694      	mov	ip, r2
 8010f5a:	44bc      	add	ip, r7
 8010f5c:	4463      	add	r3, ip
 8010f5e:	1c02      	adds	r2, r0, #0
 8010f60:	701a      	strb	r2, [r3, #0]
 8010f62:	4b41      	ldr	r3, [pc, #260]	; (8011068 <ComputeCmacB0+0x134>)
 8010f64:	228c      	movs	r2, #140	; 0x8c
 8010f66:	0052      	lsls	r2, r2, #1
 8010f68:	4694      	mov	ip, r2
 8010f6a:	44bc      	add	ip, r7
 8010f6c:	4463      	add	r3, ip
 8010f6e:	1c0a      	adds	r2, r1, #0
 8010f70:	701a      	strb	r2, [r3, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	d005      	beq.n	8010f84 <ComputeCmacB0+0x50>
 8010f78:	239a      	movs	r3, #154	; 0x9a
 8010f7a:	005b      	lsls	r3, r3, #1
 8010f7c:	18fb      	adds	r3, r7, r3
 8010f7e:	681b      	ldr	r3, [r3, #0]
 8010f80:	2b00      	cmp	r3, #0
 8010f82:	d101      	bne.n	8010f88 <ComputeCmacB0+0x54>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8010f84:	2307      	movs	r3, #7
 8010f86:	e066      	b.n	8011056 <ComputeCmacB0+0x122>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8010f88:	4b35      	ldr	r3, [pc, #212]	; (8011060 <ComputeCmacB0+0x12c>)
 8010f8a:	228c      	movs	r2, #140	; 0x8c
 8010f8c:	0052      	lsls	r2, r2, #1
 8010f8e:	4694      	mov	ip, r2
 8010f90:	44bc      	add	ip, r7
 8010f92:	4463      	add	r3, ip
 8010f94:	881a      	ldrh	r2, [r3, #0]
 8010f96:	2380      	movs	r3, #128	; 0x80
 8010f98:	005b      	lsls	r3, r3, #1
 8010f9a:	429a      	cmp	r2, r3
 8010f9c:	d901      	bls.n	8010fa2 <ComputeCmacB0+0x6e>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8010f9e:	230b      	movs	r3, #11
 8010fa0:	e059      	b.n	8011056 <ComputeCmacB0+0x122>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 8010fa2:	2388      	movs	r3, #136	; 0x88
 8010fa4:	005a      	lsls	r2, r3, #1
 8010fa6:	2508      	movs	r5, #8
 8010fa8:	197b      	adds	r3, r7, r5
 8010faa:	2100      	movs	r1, #0
 8010fac:	0018      	movs	r0, r3
 8010fae:	f004 fd5b 	bl	8015a68 <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8010fb2:	2394      	movs	r3, #148	; 0x94
 8010fb4:	005b      	lsls	r3, r3, #1
 8010fb6:	18fb      	adds	r3, r7, r3
 8010fb8:	781c      	ldrb	r4, [r3, #0]
 8010fba:	4b2b      	ldr	r3, [pc, #172]	; (8011068 <ComputeCmacB0+0x134>)
 8010fbc:	228c      	movs	r2, #140	; 0x8c
 8010fbe:	0052      	lsls	r2, r2, #1
 8010fc0:	4694      	mov	ip, r2
 8010fc2:	44bc      	add	ip, r7
 8010fc4:	4463      	add	r3, ip
 8010fc6:	781a      	ldrb	r2, [r3, #0]
 8010fc8:	4b26      	ldr	r3, [pc, #152]	; (8011064 <ComputeCmacB0+0x130>)
 8010fca:	218c      	movs	r1, #140	; 0x8c
 8010fcc:	0049      	lsls	r1, r1, #1
 8010fce:	468c      	mov	ip, r1
 8010fd0:	44bc      	add	ip, r7
 8010fd2:	4463      	add	r3, ip
 8010fd4:	7819      	ldrb	r1, [r3, #0]
 8010fd6:	4b22      	ldr	r3, [pc, #136]	; (8011060 <ComputeCmacB0+0x12c>)
 8010fd8:	208c      	movs	r0, #140	; 0x8c
 8010fda:	0040      	lsls	r0, r0, #1
 8010fdc:	4684      	mov	ip, r0
 8010fde:	44bc      	add	ip, r7
 8010fe0:	4463      	add	r3, ip
 8010fe2:	8818      	ldrh	r0, [r3, #0]
 8010fe4:	197b      	adds	r3, r7, r5
 8010fe6:	9302      	str	r3, [sp, #8]
 8010fe8:	2398      	movs	r3, #152	; 0x98
 8010fea:	005b      	lsls	r3, r3, #1
 8010fec:	18fb      	adds	r3, r7, r3
 8010fee:	681b      	ldr	r3, [r3, #0]
 8010ff0:	9301      	str	r3, [sp, #4]
 8010ff2:	2396      	movs	r3, #150	; 0x96
 8010ff4:	005b      	lsls	r3, r3, #1
 8010ff6:	18fb      	adds	r3, r7, r3
 8010ff8:	681b      	ldr	r3, [r3, #0]
 8010ffa:	9300      	str	r3, [sp, #0]
 8010ffc:	0023      	movs	r3, r4
 8010ffe:	f7ff ff01 	bl	8010e04 <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 8011002:	197b      	adds	r3, r7, r5
 8011004:	3310      	adds	r3, #16
 8011006:	4a16      	ldr	r2, [pc, #88]	; (8011060 <ComputeCmacB0+0x12c>)
 8011008:	218c      	movs	r1, #140	; 0x8c
 801100a:	0049      	lsls	r1, r1, #1
 801100c:	468c      	mov	ip, r1
 801100e:	44bc      	add	ip, r7
 8011010:	4462      	add	r2, ip
 8011012:	8812      	ldrh	r2, [r2, #0]
 8011014:	6879      	ldr	r1, [r7, #4]
 8011016:	0018      	movs	r0, r3
 8011018:	f004 fcea 	bl	80159f0 <memcpy1>

    if( SecureElementComputeAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 801101c:	4b10      	ldr	r3, [pc, #64]	; (8011060 <ComputeCmacB0+0x12c>)
 801101e:	228c      	movs	r2, #140	; 0x8c
 8011020:	0052      	lsls	r2, r2, #1
 8011022:	4694      	mov	ip, r2
 8011024:	44bc      	add	ip, r7
 8011026:	4463      	add	r3, ip
 8011028:	881b      	ldrh	r3, [r3, #0]
 801102a:	3310      	adds	r3, #16
 801102c:	b299      	uxth	r1, r3
 801102e:	239a      	movs	r3, #154	; 0x9a
 8011030:	005b      	lsls	r3, r3, #1
 8011032:	18fb      	adds	r3, r7, r3
 8011034:	681c      	ldr	r4, [r3, #0]
 8011036:	4b0b      	ldr	r3, [pc, #44]	; (8011064 <ComputeCmacB0+0x130>)
 8011038:	228c      	movs	r2, #140	; 0x8c
 801103a:	0052      	lsls	r2, r2, #1
 801103c:	4694      	mov	ip, r2
 801103e:	44bc      	add	ip, r7
 8011040:	4463      	add	r3, ip
 8011042:	781a      	ldrb	r2, [r3, #0]
 8011044:	1978      	adds	r0, r7, r5
 8011046:	0023      	movs	r3, r4
 8011048:	f7f9 f8f4 	bl	800a234 <SecureElementComputeAesCmac>
 801104c:	1e03      	subs	r3, r0, #0
 801104e:	d001      	beq.n	8011054 <ComputeCmacB0+0x120>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8011050:	230c      	movs	r3, #12
 8011052:	e000      	b.n	8011056 <ComputeCmacB0+0x122>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8011054:	2300      	movs	r3, #0
}
 8011056:	0018      	movs	r0, r3
 8011058:	46bd      	mov	sp, r7
 801105a:	b046      	add	sp, #280	; 0x118
 801105c:	bdb0      	pop	{r4, r5, r7, pc}
 801105e:	46c0      	nop			; (mov r8, r8)
 8011060:	fffffeea 	.word	0xfffffeea
 8011064:	fffffee9 	.word	0xfffffee9
 8011068:	fffffee8 	.word	0xfffffee8

0801106c <VerifyCmacB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[in]  expectedCmac   - Expected cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
{
 801106c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801106e:	b0cd      	sub	sp, #308	; 0x134
 8011070:	af04      	add	r7, sp, #16
 8011072:	6078      	str	r0, [r7, #4]
 8011074:	000c      	movs	r4, r1
 8011076:	0010      	movs	r0, r2
 8011078:	0019      	movs	r1, r3
 801107a:	4b52      	ldr	r3, [pc, #328]	; (80111c4 <VerifyCmacB0+0x158>)
 801107c:	2290      	movs	r2, #144	; 0x90
 801107e:	0052      	lsls	r2, r2, #1
 8011080:	4694      	mov	ip, r2
 8011082:	44bc      	add	ip, r7
 8011084:	4463      	add	r3, ip
 8011086:	1c22      	adds	r2, r4, #0
 8011088:	801a      	strh	r2, [r3, #0]
 801108a:	4b4f      	ldr	r3, [pc, #316]	; (80111c8 <VerifyCmacB0+0x15c>)
 801108c:	2290      	movs	r2, #144	; 0x90
 801108e:	0052      	lsls	r2, r2, #1
 8011090:	4694      	mov	ip, r2
 8011092:	44bc      	add	ip, r7
 8011094:	4463      	add	r3, ip
 8011096:	1c02      	adds	r2, r0, #0
 8011098:	701a      	strb	r2, [r3, #0]
 801109a:	4b4c      	ldr	r3, [pc, #304]	; (80111cc <VerifyCmacB0+0x160>)
 801109c:	2290      	movs	r2, #144	; 0x90
 801109e:	0052      	lsls	r2, r2, #1
 80110a0:	4694      	mov	ip, r2
 80110a2:	44bc      	add	ip, r7
 80110a4:	4463      	add	r3, ip
 80110a6:	1c0a      	adds	r2, r1, #0
 80110a8:	701a      	strb	r2, [r3, #0]
    if( msg == 0 )
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	2b00      	cmp	r3, #0
 80110ae:	d101      	bne.n	80110b4 <VerifyCmacB0+0x48>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80110b0:	2307      	movs	r3, #7
 80110b2:	e083      	b.n	80111bc <VerifyCmacB0+0x150>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 80110b4:	4b43      	ldr	r3, [pc, #268]	; (80111c4 <VerifyCmacB0+0x158>)
 80110b6:	2290      	movs	r2, #144	; 0x90
 80110b8:	0052      	lsls	r2, r2, #1
 80110ba:	4694      	mov	ip, r2
 80110bc:	44bc      	add	ip, r7
 80110be:	4463      	add	r3, ip
 80110c0:	881a      	ldrh	r2, [r3, #0]
 80110c2:	2380      	movs	r3, #128	; 0x80
 80110c4:	005b      	lsls	r3, r3, #1
 80110c6:	429a      	cmp	r2, r3
 80110c8:	d901      	bls.n	80110ce <VerifyCmacB0+0x62>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 80110ca:	230b      	movs	r3, #11
 80110cc:	e076      	b.n	80111bc <VerifyCmacB0+0x150>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 80110ce:	2388      	movs	r3, #136	; 0x88
 80110d0:	005a      	lsls	r2, r3, #1
 80110d2:	250c      	movs	r5, #12
 80110d4:	197b      	adds	r3, r7, r5
 80110d6:	2100      	movs	r1, #0
 80110d8:	0018      	movs	r0, r3
 80110da:	f004 fcc5 	bl	8015a68 <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 80110de:	2398      	movs	r3, #152	; 0x98
 80110e0:	005b      	lsls	r3, r3, #1
 80110e2:	2208      	movs	r2, #8
 80110e4:	4694      	mov	ip, r2
 80110e6:	44bc      	add	ip, r7
 80110e8:	4463      	add	r3, ip
 80110ea:	781c      	ldrb	r4, [r3, #0]
 80110ec:	4b37      	ldr	r3, [pc, #220]	; (80111cc <VerifyCmacB0+0x160>)
 80110ee:	2290      	movs	r2, #144	; 0x90
 80110f0:	0052      	lsls	r2, r2, #1
 80110f2:	4694      	mov	ip, r2
 80110f4:	44bc      	add	ip, r7
 80110f6:	4463      	add	r3, ip
 80110f8:	781a      	ldrb	r2, [r3, #0]
 80110fa:	4b33      	ldr	r3, [pc, #204]	; (80111c8 <VerifyCmacB0+0x15c>)
 80110fc:	2190      	movs	r1, #144	; 0x90
 80110fe:	0049      	lsls	r1, r1, #1
 8011100:	468c      	mov	ip, r1
 8011102:	44bc      	add	ip, r7
 8011104:	4463      	add	r3, ip
 8011106:	7819      	ldrb	r1, [r3, #0]
 8011108:	4b2e      	ldr	r3, [pc, #184]	; (80111c4 <VerifyCmacB0+0x158>)
 801110a:	2090      	movs	r0, #144	; 0x90
 801110c:	0040      	lsls	r0, r0, #1
 801110e:	4684      	mov	ip, r0
 8011110:	44bc      	add	ip, r7
 8011112:	4463      	add	r3, ip
 8011114:	8818      	ldrh	r0, [r3, #0]
 8011116:	197b      	adds	r3, r7, r5
 8011118:	9302      	str	r3, [sp, #8]
 801111a:	239c      	movs	r3, #156	; 0x9c
 801111c:	005b      	lsls	r3, r3, #1
 801111e:	2608      	movs	r6, #8
 8011120:	46b4      	mov	ip, r6
 8011122:	44bc      	add	ip, r7
 8011124:	4463      	add	r3, ip
 8011126:	681b      	ldr	r3, [r3, #0]
 8011128:	9301      	str	r3, [sp, #4]
 801112a:	239a      	movs	r3, #154	; 0x9a
 801112c:	005b      	lsls	r3, r3, #1
 801112e:	2608      	movs	r6, #8
 8011130:	46b4      	mov	ip, r6
 8011132:	44bc      	add	ip, r7
 8011134:	4463      	add	r3, ip
 8011136:	681b      	ldr	r3, [r3, #0]
 8011138:	9300      	str	r3, [sp, #0]
 801113a:	0023      	movs	r3, r4
 801113c:	f7ff fe62 	bl	8010e04 <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 8011140:	197b      	adds	r3, r7, r5
 8011142:	3310      	adds	r3, #16
 8011144:	4a1f      	ldr	r2, [pc, #124]	; (80111c4 <VerifyCmacB0+0x158>)
 8011146:	2190      	movs	r1, #144	; 0x90
 8011148:	0049      	lsls	r1, r1, #1
 801114a:	468c      	mov	ip, r1
 801114c:	44bc      	add	ip, r7
 801114e:	4462      	add	r2, ip
 8011150:	8812      	ldrh	r2, [r2, #0]
 8011152:	6879      	ldr	r1, [r7, #4]
 8011154:	0018      	movs	r0, r3
 8011156:	f004 fc4b 	bl	80159f0 <memcpy1>

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 801115a:	2620      	movs	r6, #32
 801115c:	36ff      	adds	r6, #255	; 0xff
 801115e:	19bb      	adds	r3, r7, r6
 8011160:	2206      	movs	r2, #6
 8011162:	701a      	strb	r2, [r3, #0]
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 8011164:	4b17      	ldr	r3, [pc, #92]	; (80111c4 <VerifyCmacB0+0x158>)
 8011166:	2290      	movs	r2, #144	; 0x90
 8011168:	0052      	lsls	r2, r2, #1
 801116a:	4694      	mov	ip, r2
 801116c:	44bc      	add	ip, r7
 801116e:	4463      	add	r3, ip
 8011170:	881b      	ldrh	r3, [r3, #0]
 8011172:	3310      	adds	r3, #16
 8011174:	b299      	uxth	r1, r3
 8011176:	19bc      	adds	r4, r7, r6
 8011178:	4b13      	ldr	r3, [pc, #76]	; (80111c8 <VerifyCmacB0+0x15c>)
 801117a:	2290      	movs	r2, #144	; 0x90
 801117c:	0052      	lsls	r2, r2, #1
 801117e:	4694      	mov	ip, r2
 8011180:	44bc      	add	ip, r7
 8011182:	4463      	add	r3, ip
 8011184:	781b      	ldrb	r3, [r3, #0]
 8011186:	229e      	movs	r2, #158	; 0x9e
 8011188:	0052      	lsls	r2, r2, #1
 801118a:	2008      	movs	r0, #8
 801118c:	4684      	mov	ip, r0
 801118e:	44bc      	add	ip, r7
 8011190:	4462      	add	r2, ip
 8011192:	6812      	ldr	r2, [r2, #0]
 8011194:	1978      	adds	r0, r7, r5
 8011196:	f7f9 f872 	bl	800a27e <SecureElementVerifyAesCmac>
 801119a:	0003      	movs	r3, r0
 801119c:	7023      	strb	r3, [r4, #0]

    if( retval == SECURE_ELEMENT_SUCCESS )
 801119e:	19bb      	adds	r3, r7, r6
 80111a0:	781b      	ldrb	r3, [r3, #0]
 80111a2:	2b00      	cmp	r3, #0
 80111a4:	d101      	bne.n	80111aa <VerifyCmacB0+0x13e>
    {
        return LORAMAC_CRYPTO_SUCCESS;
 80111a6:	2300      	movs	r3, #0
 80111a8:	e008      	b.n	80111bc <VerifyCmacB0+0x150>
    }
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 80111aa:	2320      	movs	r3, #32
 80111ac:	33ff      	adds	r3, #255	; 0xff
 80111ae:	18fb      	adds	r3, r7, r3
 80111b0:	781b      	ldrb	r3, [r3, #0]
 80111b2:	2b01      	cmp	r3, #1
 80111b4:	d101      	bne.n	80111ba <VerifyCmacB0+0x14e>
    {
        return LORAMAC_CRYPTO_FAIL_MIC;
 80111b6:	2301      	movs	r3, #1
 80111b8:	e000      	b.n	80111bc <VerifyCmacB0+0x150>
    }

    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80111ba:	230c      	movs	r3, #12
}
 80111bc:	0018      	movs	r0, r3
 80111be:	46bd      	mov	sp, r7
 80111c0:	b049      	add	sp, #292	; 0x124
 80111c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80111c4:	fffffee2 	.word	0xfffffee2
 80111c8:	fffffee1 	.word	0xfffffee1
 80111cc:	fffffee0 	.word	0xfffffee0

080111d0 <PrepareB1>:
 * \param[IN]  fCntUp         - Frame counter
 * \param[IN/OUT]  b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB1( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t txDr, uint8_t txCh, uint32_t devAddr, uint32_t fCntUp, uint8_t* b1 )
{
 80111d0:	b5b0      	push	{r4, r5, r7, lr}
 80111d2:	b084      	sub	sp, #16
 80111d4:	af00      	add	r7, sp, #0
 80111d6:	0005      	movs	r5, r0
 80111d8:	000c      	movs	r4, r1
 80111da:	0010      	movs	r0, r2
 80111dc:	0019      	movs	r1, r3
 80111de:	1dbb      	adds	r3, r7, #6
 80111e0:	1c2a      	adds	r2, r5, #0
 80111e2:	801a      	strh	r2, [r3, #0]
 80111e4:	1d7b      	adds	r3, r7, #5
 80111e6:	1c22      	adds	r2, r4, #0
 80111e8:	701a      	strb	r2, [r3, #0]
 80111ea:	1d3b      	adds	r3, r7, #4
 80111ec:	1c02      	adds	r2, r0, #0
 80111ee:	701a      	strb	r2, [r3, #0]
 80111f0:	1cfb      	adds	r3, r7, #3
 80111f2:	1c0a      	adds	r2, r1, #0
 80111f4:	701a      	strb	r2, [r3, #0]
    if( b1 == 0 )
 80111f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111f8:	2b00      	cmp	r3, #0
 80111fa:	d101      	bne.n	8011200 <PrepareB1+0x30>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80111fc:	2307      	movs	r3, #7
 80111fe:	e06c      	b.n	80112da <PrepareB1+0x10a>
    }

    b1[0] = 0x49;
 8011200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011202:	2249      	movs	r2, #73	; 0x49
 8011204:	701a      	strb	r2, [r3, #0]

    if( isAck == true )
 8011206:	1d3b      	adds	r3, r7, #4
 8011208:	781b      	ldrb	r3, [r3, #0]
 801120a:	2b00      	cmp	r3, #0
 801120c:	d015      	beq.n	801123a <PrepareB1+0x6a>
    {
        // confFCnt contains the frame counter value modulo 2^16 of the "confirmed" uplink frame that is being acknowledged
        uint16_t confFCnt = ( uint16_t )( *CryptoCtx.NvmCtx->LastDownFCnt % 65536 );
 801120e:	4b35      	ldr	r3, [pc, #212]	; (80112e4 <PrepareB1+0x114>)
 8011210:	689b      	ldr	r3, [r3, #8]
 8011212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011214:	681a      	ldr	r2, [r3, #0]
 8011216:	210e      	movs	r1, #14
 8011218:	187b      	adds	r3, r7, r1
 801121a:	801a      	strh	r2, [r3, #0]
        b1[1] = confFCnt & 0xFF;
 801121c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801121e:	3301      	adds	r3, #1
 8011220:	187a      	adds	r2, r7, r1
 8011222:	8812      	ldrh	r2, [r2, #0]
 8011224:	b2d2      	uxtb	r2, r2
 8011226:	701a      	strb	r2, [r3, #0]
        b1[2] = ( confFCnt >> 8 ) & 0xFF;
 8011228:	187b      	adds	r3, r7, r1
 801122a:	881b      	ldrh	r3, [r3, #0]
 801122c:	0a1b      	lsrs	r3, r3, #8
 801122e:	b29a      	uxth	r2, r3
 8011230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011232:	3302      	adds	r3, #2
 8011234:	b2d2      	uxtb	r2, r2
 8011236:	701a      	strb	r2, [r3, #0]
 8011238:	e007      	b.n	801124a <PrepareB1+0x7a>
    }
    else
    {
        b1[1] = 0x00;
 801123a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801123c:	3301      	adds	r3, #1
 801123e:	2200      	movs	r2, #0
 8011240:	701a      	strb	r2, [r3, #0]
        b1[2] = 0x00;
 8011242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011244:	3302      	adds	r3, #2
 8011246:	2200      	movs	r2, #0
 8011248:	701a      	strb	r2, [r3, #0]
    }

    b1[3] = txDr;
 801124a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801124c:	3303      	adds	r3, #3
 801124e:	1cfa      	adds	r2, r7, #3
 8011250:	7812      	ldrb	r2, [r2, #0]
 8011252:	701a      	strb	r2, [r3, #0]
    b1[4] = txCh;
 8011254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011256:	3304      	adds	r3, #4
 8011258:	2220      	movs	r2, #32
 801125a:	18ba      	adds	r2, r7, r2
 801125c:	7812      	ldrb	r2, [r2, #0]
 801125e:	701a      	strb	r2, [r3, #0]
    b1[5] = UPLINK;  // dir = Uplink
 8011260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011262:	3305      	adds	r3, #5
 8011264:	2200      	movs	r2, #0
 8011266:	701a      	strb	r2, [r3, #0]

    b1[6] = devAddr & 0xFF;
 8011268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801126a:	3306      	adds	r3, #6
 801126c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801126e:	b2d2      	uxtb	r2, r2
 8011270:	701a      	strb	r2, [r3, #0]
    b1[7] = ( devAddr >> 8 ) & 0xFF;
 8011272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011274:	0a1a      	lsrs	r2, r3, #8
 8011276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011278:	3307      	adds	r3, #7
 801127a:	b2d2      	uxtb	r2, r2
 801127c:	701a      	strb	r2, [r3, #0]
    b1[8] = ( devAddr >> 16 ) & 0xFF;
 801127e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011280:	0c1a      	lsrs	r2, r3, #16
 8011282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011284:	3308      	adds	r3, #8
 8011286:	b2d2      	uxtb	r2, r2
 8011288:	701a      	strb	r2, [r3, #0]
    b1[9] = ( devAddr >> 24 ) & 0xFF;
 801128a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801128c:	0e1a      	lsrs	r2, r3, #24
 801128e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011290:	3309      	adds	r3, #9
 8011292:	b2d2      	uxtb	r2, r2
 8011294:	701a      	strb	r2, [r3, #0]

    b1[10] = fCntUp & 0xFF;
 8011296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011298:	330a      	adds	r3, #10
 801129a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801129c:	b2d2      	uxtb	r2, r2
 801129e:	701a      	strb	r2, [r3, #0]
    b1[11] = ( fCntUp >> 8 ) & 0xFF;
 80112a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112a2:	0a1a      	lsrs	r2, r3, #8
 80112a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112a6:	330b      	adds	r3, #11
 80112a8:	b2d2      	uxtb	r2, r2
 80112aa:	701a      	strb	r2, [r3, #0]
    b1[12] = ( fCntUp >> 16 ) & 0xFF;
 80112ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112ae:	0c1a      	lsrs	r2, r3, #16
 80112b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112b2:	330c      	adds	r3, #12
 80112b4:	b2d2      	uxtb	r2, r2
 80112b6:	701a      	strb	r2, [r3, #0]
    b1[13] = ( fCntUp >> 24 ) & 0xFF;
 80112b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112ba:	0e1a      	lsrs	r2, r3, #24
 80112bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112be:	330d      	adds	r3, #13
 80112c0:	b2d2      	uxtb	r2, r2
 80112c2:	701a      	strb	r2, [r3, #0]

    b1[14] = 0x00;
 80112c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112c6:	330e      	adds	r3, #14
 80112c8:	2200      	movs	r2, #0
 80112ca:	701a      	strb	r2, [r3, #0]

    b1[15] = msgLen & 0xFF;
 80112cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112ce:	330f      	adds	r3, #15
 80112d0:	1dba      	adds	r2, r7, #6
 80112d2:	8812      	ldrh	r2, [r2, #0]
 80112d4:	b2d2      	uxtb	r2, r2
 80112d6:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 80112d8:	2300      	movs	r3, #0
}
 80112da:	0018      	movs	r0, r3
 80112dc:	46bd      	mov	sp, r7
 80112de:	b004      	add	sp, #16
 80112e0:	bdb0      	pop	{r4, r5, r7, pc}
 80112e2:	46c0      	nop			; (mov r8, r8)
 80112e4:	20000ed8 	.word	0x20000ed8

080112e8 <ComputeCmacB1>:
 * \param[IN]  fCntUp         - Uplink Frame counter
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB1( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t txDr, uint8_t txCh, uint32_t devAddr, uint32_t fCntUp, uint32_t* cmac )
{
 80112e8:	b5b0      	push	{r4, r5, r7, lr}
 80112ea:	b0ca      	sub	sp, #296	; 0x128
 80112ec:	af04      	add	r7, sp, #16
 80112ee:	6078      	str	r0, [r7, #4]
 80112f0:	000c      	movs	r4, r1
 80112f2:	0010      	movs	r0, r2
 80112f4:	0019      	movs	r1, r3
 80112f6:	4b49      	ldr	r3, [pc, #292]	; (801141c <ComputeCmacB1+0x134>)
 80112f8:	228c      	movs	r2, #140	; 0x8c
 80112fa:	0052      	lsls	r2, r2, #1
 80112fc:	4694      	mov	ip, r2
 80112fe:	44bc      	add	ip, r7
 8011300:	4463      	add	r3, ip
 8011302:	1c22      	adds	r2, r4, #0
 8011304:	801a      	strh	r2, [r3, #0]
 8011306:	4b46      	ldr	r3, [pc, #280]	; (8011420 <ComputeCmacB1+0x138>)
 8011308:	228c      	movs	r2, #140	; 0x8c
 801130a:	0052      	lsls	r2, r2, #1
 801130c:	4694      	mov	ip, r2
 801130e:	44bc      	add	ip, r7
 8011310:	4463      	add	r3, ip
 8011312:	1c02      	adds	r2, r0, #0
 8011314:	701a      	strb	r2, [r3, #0]
 8011316:	4b43      	ldr	r3, [pc, #268]	; (8011424 <ComputeCmacB1+0x13c>)
 8011318:	228c      	movs	r2, #140	; 0x8c
 801131a:	0052      	lsls	r2, r2, #1
 801131c:	4694      	mov	ip, r2
 801131e:	44bc      	add	ip, r7
 8011320:	4463      	add	r3, ip
 8011322:	1c0a      	adds	r2, r1, #0
 8011324:	701a      	strb	r2, [r3, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	2b00      	cmp	r3, #0
 801132a:	d005      	beq.n	8011338 <ComputeCmacB1+0x50>
 801132c:	239c      	movs	r3, #156	; 0x9c
 801132e:	005b      	lsls	r3, r3, #1
 8011330:	18fb      	adds	r3, r7, r3
 8011332:	681b      	ldr	r3, [r3, #0]
 8011334:	2b00      	cmp	r3, #0
 8011336:	d101      	bne.n	801133c <ComputeCmacB1+0x54>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8011338:	2307      	movs	r3, #7
 801133a:	e06b      	b.n	8011414 <ComputeCmacB1+0x12c>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 801133c:	4b37      	ldr	r3, [pc, #220]	; (801141c <ComputeCmacB1+0x134>)
 801133e:	228c      	movs	r2, #140	; 0x8c
 8011340:	0052      	lsls	r2, r2, #1
 8011342:	4694      	mov	ip, r2
 8011344:	44bc      	add	ip, r7
 8011346:	4463      	add	r3, ip
 8011348:	881a      	ldrh	r2, [r3, #0]
 801134a:	2380      	movs	r3, #128	; 0x80
 801134c:	005b      	lsls	r3, r3, #1
 801134e:	429a      	cmp	r2, r3
 8011350:	d901      	bls.n	8011356 <ComputeCmacB1+0x6e>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8011352:	230b      	movs	r3, #11
 8011354:	e05e      	b.n	8011414 <ComputeCmacB1+0x12c>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 8011356:	2388      	movs	r3, #136	; 0x88
 8011358:	005a      	lsls	r2, r3, #1
 801135a:	2508      	movs	r5, #8
 801135c:	197b      	adds	r3, r7, r5
 801135e:	2100      	movs	r1, #0
 8011360:	0018      	movs	r0, r3
 8011362:	f004 fb81 	bl	8015a68 <memset1>

    // Initialize the first Block
    PrepareB1( len, keyID, isAck, txDr, txCh, devAddr, fCntUp, micBuff );
 8011366:	2394      	movs	r3, #148	; 0x94
 8011368:	005b      	lsls	r3, r3, #1
 801136a:	18fb      	adds	r3, r7, r3
 801136c:	781c      	ldrb	r4, [r3, #0]
 801136e:	4b2d      	ldr	r3, [pc, #180]	; (8011424 <ComputeCmacB1+0x13c>)
 8011370:	228c      	movs	r2, #140	; 0x8c
 8011372:	0052      	lsls	r2, r2, #1
 8011374:	4694      	mov	ip, r2
 8011376:	44bc      	add	ip, r7
 8011378:	4463      	add	r3, ip
 801137a:	781a      	ldrb	r2, [r3, #0]
 801137c:	4b28      	ldr	r3, [pc, #160]	; (8011420 <ComputeCmacB1+0x138>)
 801137e:	218c      	movs	r1, #140	; 0x8c
 8011380:	0049      	lsls	r1, r1, #1
 8011382:	468c      	mov	ip, r1
 8011384:	44bc      	add	ip, r7
 8011386:	4463      	add	r3, ip
 8011388:	7819      	ldrb	r1, [r3, #0]
 801138a:	4b24      	ldr	r3, [pc, #144]	; (801141c <ComputeCmacB1+0x134>)
 801138c:	208c      	movs	r0, #140	; 0x8c
 801138e:	0040      	lsls	r0, r0, #1
 8011390:	4684      	mov	ip, r0
 8011392:	44bc      	add	ip, r7
 8011394:	4463      	add	r3, ip
 8011396:	8818      	ldrh	r0, [r3, #0]
 8011398:	197b      	adds	r3, r7, r5
 801139a:	9303      	str	r3, [sp, #12]
 801139c:	239a      	movs	r3, #154	; 0x9a
 801139e:	005b      	lsls	r3, r3, #1
 80113a0:	18fb      	adds	r3, r7, r3
 80113a2:	681b      	ldr	r3, [r3, #0]
 80113a4:	9302      	str	r3, [sp, #8]
 80113a6:	2398      	movs	r3, #152	; 0x98
 80113a8:	005b      	lsls	r3, r3, #1
 80113aa:	18fb      	adds	r3, r7, r3
 80113ac:	681b      	ldr	r3, [r3, #0]
 80113ae:	9301      	str	r3, [sp, #4]
 80113b0:	2396      	movs	r3, #150	; 0x96
 80113b2:	005b      	lsls	r3, r3, #1
 80113b4:	18fb      	adds	r3, r7, r3
 80113b6:	781b      	ldrb	r3, [r3, #0]
 80113b8:	9300      	str	r3, [sp, #0]
 80113ba:	0023      	movs	r3, r4
 80113bc:	f7ff ff08 	bl	80111d0 <PrepareB1>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 80113c0:	197b      	adds	r3, r7, r5
 80113c2:	3310      	adds	r3, #16
 80113c4:	4a15      	ldr	r2, [pc, #84]	; (801141c <ComputeCmacB1+0x134>)
 80113c6:	218c      	movs	r1, #140	; 0x8c
 80113c8:	0049      	lsls	r1, r1, #1
 80113ca:	468c      	mov	ip, r1
 80113cc:	44bc      	add	ip, r7
 80113ce:	4462      	add	r2, ip
 80113d0:	8812      	ldrh	r2, [r2, #0]
 80113d2:	6879      	ldr	r1, [r7, #4]
 80113d4:	0018      	movs	r0, r3
 80113d6:	f004 fb0b 	bl	80159f0 <memcpy1>

    if( SecureElementComputeAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 80113da:	4b10      	ldr	r3, [pc, #64]	; (801141c <ComputeCmacB1+0x134>)
 80113dc:	228c      	movs	r2, #140	; 0x8c
 80113de:	0052      	lsls	r2, r2, #1
 80113e0:	4694      	mov	ip, r2
 80113e2:	44bc      	add	ip, r7
 80113e4:	4463      	add	r3, ip
 80113e6:	881b      	ldrh	r3, [r3, #0]
 80113e8:	3310      	adds	r3, #16
 80113ea:	b299      	uxth	r1, r3
 80113ec:	239c      	movs	r3, #156	; 0x9c
 80113ee:	005b      	lsls	r3, r3, #1
 80113f0:	18fb      	adds	r3, r7, r3
 80113f2:	681c      	ldr	r4, [r3, #0]
 80113f4:	4b0a      	ldr	r3, [pc, #40]	; (8011420 <ComputeCmacB1+0x138>)
 80113f6:	228c      	movs	r2, #140	; 0x8c
 80113f8:	0052      	lsls	r2, r2, #1
 80113fa:	4694      	mov	ip, r2
 80113fc:	44bc      	add	ip, r7
 80113fe:	4463      	add	r3, ip
 8011400:	781a      	ldrb	r2, [r3, #0]
 8011402:	1978      	adds	r0, r7, r5
 8011404:	0023      	movs	r3, r4
 8011406:	f7f8 ff15 	bl	800a234 <SecureElementComputeAesCmac>
 801140a:	1e03      	subs	r3, r0, #0
 801140c:	d001      	beq.n	8011412 <ComputeCmacB1+0x12a>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801140e:	230c      	movs	r3, #12
 8011410:	e000      	b.n	8011414 <ComputeCmacB1+0x12c>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8011412:	2300      	movs	r3, #0
}
 8011414:	0018      	movs	r0, r3
 8011416:	46bd      	mov	sp, r7
 8011418:	b046      	add	sp, #280	; 0x118
 801141a:	bdb0      	pop	{r4, r5, r7, pc}
 801141c:	fffffeea 	.word	0xfffffeea
 8011420:	fffffee9 	.word	0xfffffee9
 8011424:	fffffee8 	.word	0xfffffee8

08011428 <GetKeyAddrItem>:
 * \param[IN]  addrID          - Address identifier
 * \param[OUT] keyItem        - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
 8011428:	b580      	push	{r7, lr}
 801142a:	b084      	sub	sp, #16
 801142c:	af00      	add	r7, sp, #0
 801142e:	0002      	movs	r2, r0
 8011430:	6039      	str	r1, [r7, #0]
 8011432:	1dfb      	adds	r3, r7, #7
 8011434:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8011436:	230f      	movs	r3, #15
 8011438:	18fb      	adds	r3, r7, r3
 801143a:	2200      	movs	r2, #0
 801143c:	701a      	strb	r2, [r3, #0]
 801143e:	e019      	b.n	8011474 <GetKeyAddrItem+0x4c>
    {
        if( KeyAddrList[i].AddrID == addrID )
 8011440:	230f      	movs	r3, #15
 8011442:	18fb      	adds	r3, r7, r3
 8011444:	781a      	ldrb	r2, [r3, #0]
 8011446:	4b10      	ldr	r3, [pc, #64]	; (8011488 <GetKeyAddrItem+0x60>)
 8011448:	0092      	lsls	r2, r2, #2
 801144a:	5cd3      	ldrb	r3, [r2, r3]
 801144c:	1dfa      	adds	r2, r7, #7
 801144e:	7812      	ldrb	r2, [r2, #0]
 8011450:	429a      	cmp	r2, r3
 8011452:	d109      	bne.n	8011468 <GetKeyAddrItem+0x40>
        {
            *item = &( KeyAddrList[i] );
 8011454:	230f      	movs	r3, #15
 8011456:	18fb      	adds	r3, r7, r3
 8011458:	781b      	ldrb	r3, [r3, #0]
 801145a:	009a      	lsls	r2, r3, #2
 801145c:	4b0a      	ldr	r3, [pc, #40]	; (8011488 <GetKeyAddrItem+0x60>)
 801145e:	18d2      	adds	r2, r2, r3
 8011460:	683b      	ldr	r3, [r7, #0]
 8011462:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 8011464:	2300      	movs	r3, #0
 8011466:	e00b      	b.n	8011480 <GetKeyAddrItem+0x58>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8011468:	210f      	movs	r1, #15
 801146a:	187b      	adds	r3, r7, r1
 801146c:	781a      	ldrb	r2, [r3, #0]
 801146e:	187b      	adds	r3, r7, r1
 8011470:	3201      	adds	r2, #1
 8011472:	701a      	strb	r2, [r3, #0]
 8011474:	230f      	movs	r3, #15
 8011476:	18fb      	adds	r3, r7, r3
 8011478:	781b      	ldrb	r3, [r3, #0]
 801147a:	2b04      	cmp	r3, #4
 801147c:	d9e0      	bls.n	8011440 <GetKeyAddrItem+0x18>
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 801147e:	2309      	movs	r3, #9
}
 8011480:	0018      	movs	r0, r3
 8011482:	46bd      	mov	sp, r7
 8011484:	b004      	add	sp, #16
 8011486:	bd80      	pop	{r7, pc}
 8011488:	20000068 	.word	0x20000068

0801148c <DeriveSessionKey10x>:
 * \param[IN]  netID          - Network Identifier
 * \param[IN]  deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint8_t* joinNonce, uint8_t* netID, uint8_t* devNonce )
{
 801148c:	b590      	push	{r4, r7, lr}
 801148e:	b089      	sub	sp, #36	; 0x24
 8011490:	af00      	add	r7, sp, #0
 8011492:	60b9      	str	r1, [r7, #8]
 8011494:	607a      	str	r2, [r7, #4]
 8011496:	603b      	str	r3, [r7, #0]
 8011498:	230f      	movs	r3, #15
 801149a:	18fb      	adds	r3, r7, r3
 801149c:	1c02      	adds	r2, r0, #0
 801149e:	701a      	strb	r2, [r3, #0]
    if( ( joinNonce == 0 ) || ( netID == 0 ) || ( devNonce == 0 ) )
 80114a0:	68bb      	ldr	r3, [r7, #8]
 80114a2:	2b00      	cmp	r3, #0
 80114a4:	d005      	beq.n	80114b2 <DeriveSessionKey10x+0x26>
 80114a6:	687b      	ldr	r3, [r7, #4]
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	d002      	beq.n	80114b2 <DeriveSessionKey10x+0x26>
 80114ac:	683b      	ldr	r3, [r7, #0]
 80114ae:	2b00      	cmp	r3, #0
 80114b0:	d101      	bne.n	80114b6 <DeriveSessionKey10x+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80114b2:	2307      	movs	r3, #7
 80114b4:	e042      	b.n	801153c <DeriveSessionKey10x+0xb0>
    }

    uint8_t compBase[16] = { 0 };
 80114b6:	2310      	movs	r3, #16
 80114b8:	18fb      	adds	r3, r7, r3
 80114ba:	0018      	movs	r0, r3
 80114bc:	2310      	movs	r3, #16
 80114be:	001a      	movs	r2, r3
 80114c0:	2100      	movs	r1, #0
 80114c2:	f00d fe3d 	bl	801f140 <memset>

    switch( keyID )
 80114c6:	230f      	movs	r3, #15
 80114c8:	18fb      	adds	r3, r7, r3
 80114ca:	781b      	ldrb	r3, [r3, #0]
 80114cc:	2b04      	cmp	r3, #4
 80114ce:	db0e      	blt.n	80114ee <DeriveSessionKey10x+0x62>
 80114d0:	2b06      	cmp	r3, #6
 80114d2:	dd02      	ble.n	80114da <DeriveSessionKey10x+0x4e>
 80114d4:	2b07      	cmp	r3, #7
 80114d6:	d005      	beq.n	80114e4 <DeriveSessionKey10x+0x58>
 80114d8:	e009      	b.n	80114ee <DeriveSessionKey10x+0x62>
    {
        case F_NWK_S_INT_KEY:
        case S_NWK_S_INT_KEY:
        case NWK_S_ENC_KEY:
            compBase[0] = 0x01;
 80114da:	2310      	movs	r3, #16
 80114dc:	18fb      	adds	r3, r7, r3
 80114de:	2201      	movs	r2, #1
 80114e0:	701a      	strb	r2, [r3, #0]
            break;
 80114e2:	e006      	b.n	80114f2 <DeriveSessionKey10x+0x66>
        case APP_S_KEY:
            compBase[0] = 0x02;
 80114e4:	2310      	movs	r3, #16
 80114e6:	18fb      	adds	r3, r7, r3
 80114e8:	2202      	movs	r2, #2
 80114ea:	701a      	strb	r2, [r3, #0]
            break;
 80114ec:	e001      	b.n	80114f2 <DeriveSessionKey10x+0x66>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 80114ee:	2308      	movs	r3, #8
 80114f0:	e024      	b.n	801153c <DeriveSessionKey10x+0xb0>
    }

    memcpy1( compBase + 1, joinNonce, 3 );
 80114f2:	2410      	movs	r4, #16
 80114f4:	193b      	adds	r3, r7, r4
 80114f6:	3301      	adds	r3, #1
 80114f8:	68b9      	ldr	r1, [r7, #8]
 80114fa:	2203      	movs	r2, #3
 80114fc:	0018      	movs	r0, r3
 80114fe:	f004 fa77 	bl	80159f0 <memcpy1>
    memcpy1( compBase + 4, netID, 3 );
 8011502:	193b      	adds	r3, r7, r4
 8011504:	3304      	adds	r3, #4
 8011506:	6879      	ldr	r1, [r7, #4]
 8011508:	2203      	movs	r2, #3
 801150a:	0018      	movs	r0, r3
 801150c:	f004 fa70 	bl	80159f0 <memcpy1>
    memcpy1( compBase + 7, devNonce, 2 );
 8011510:	193b      	adds	r3, r7, r4
 8011512:	3307      	adds	r3, #7
 8011514:	6839      	ldr	r1, [r7, #0]
 8011516:	2202      	movs	r2, #2
 8011518:	0018      	movs	r0, r3
 801151a:	f004 fa69 	bl	80159f0 <memcpy1>

    if( SecureElementDeriveAndStoreKey( CryptoCtx.LrWanVersion, compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 801151e:	230f      	movs	r3, #15
 8011520:	18fb      	adds	r3, r7, r3
 8011522:	781a      	ldrb	r2, [r3, #0]
 8011524:	1939      	adds	r1, r7, r4
 8011526:	4b07      	ldr	r3, [pc, #28]	; (8011544 <DeriveSessionKey10x+0xb8>)
 8011528:	6818      	ldr	r0, [r3, #0]
 801152a:	0013      	movs	r3, r2
 801152c:	2201      	movs	r2, #1
 801152e:	f7f8 ff51 	bl	800a3d4 <SecureElementDeriveAndStoreKey>
 8011532:	1e03      	subs	r3, r0, #0
 8011534:	d001      	beq.n	801153a <DeriveSessionKey10x+0xae>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8011536:	230c      	movs	r3, #12
 8011538:	e000      	b.n	801153c <DeriveSessionKey10x+0xb0>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 801153a:	2300      	movs	r3, #0
}
 801153c:	0018      	movs	r0, r3
 801153e:	46bd      	mov	sp, r7
 8011540:	b009      	add	sp, #36	; 0x24
 8011542:	bd90      	pop	{r4, r7, pc}
 8011544:	20000ed8 	.word	0x20000ed8

08011548 <DeriveSessionKey11x>:
 * \param[IN]  joinEUI        - Join Server EUI
 * \param[IN]  deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey11x( KeyIdentifier_t keyID, uint8_t* joinNonce, uint8_t* joinEUI, uint8_t* devNonce )
{
 8011548:	b5b0      	push	{r4, r5, r7, lr}
 801154a:	b08a      	sub	sp, #40	; 0x28
 801154c:	af00      	add	r7, sp, #0
 801154e:	60b9      	str	r1, [r7, #8]
 8011550:	607a      	str	r2, [r7, #4]
 8011552:	603b      	str	r3, [r7, #0]
 8011554:	230f      	movs	r3, #15
 8011556:	18fb      	adds	r3, r7, r3
 8011558:	1c02      	adds	r2, r0, #0
 801155a:	701a      	strb	r2, [r3, #0]
    if( ( joinNonce == 0 ) || ( joinEUI == 0 ) || ( devNonce == 0 ) )
 801155c:	68bb      	ldr	r3, [r7, #8]
 801155e:	2b00      	cmp	r3, #0
 8011560:	d005      	beq.n	801156e <DeriveSessionKey11x+0x26>
 8011562:	687b      	ldr	r3, [r7, #4]
 8011564:	2b00      	cmp	r3, #0
 8011566:	d002      	beq.n	801156e <DeriveSessionKey11x+0x26>
 8011568:	683b      	ldr	r3, [r7, #0]
 801156a:	2b00      	cmp	r3, #0
 801156c:	d101      	bne.n	8011572 <DeriveSessionKey11x+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801156e:	2307      	movs	r3, #7
 8011570:	e05a      	b.n	8011628 <DeriveSessionKey11x+0xe0>
    }

    uint8_t compBase[16] = { 0 };
 8011572:	2314      	movs	r3, #20
 8011574:	18fb      	adds	r3, r7, r3
 8011576:	0018      	movs	r0, r3
 8011578:	2310      	movs	r3, #16
 801157a:	001a      	movs	r2, r3
 801157c:	2100      	movs	r1, #0
 801157e:	f00d fddf 	bl	801f140 <memset>
    KeyIdentifier_t rootKeyId = NWK_KEY;
 8011582:	2327      	movs	r3, #39	; 0x27
 8011584:	18fb      	adds	r3, r7, r3
 8011586:	2201      	movs	r2, #1
 8011588:	701a      	strb	r2, [r3, #0]

    switch( keyID )
 801158a:	230f      	movs	r3, #15
 801158c:	18fb      	adds	r3, r7, r3
 801158e:	781b      	ldrb	r3, [r3, #0]
 8011590:	2b05      	cmp	r3, #5
 8011592:	d00d      	beq.n	80115b0 <DeriveSessionKey11x+0x68>
 8011594:	dc02      	bgt.n	801159c <DeriveSessionKey11x+0x54>
 8011596:	2b04      	cmp	r3, #4
 8011598:	d005      	beq.n	80115a6 <DeriveSessionKey11x+0x5e>
 801159a:	e01c      	b.n	80115d6 <DeriveSessionKey11x+0x8e>
 801159c:	2b06      	cmp	r3, #6
 801159e:	d00c      	beq.n	80115ba <DeriveSessionKey11x+0x72>
 80115a0:	2b07      	cmp	r3, #7
 80115a2:	d00f      	beq.n	80115c4 <DeriveSessionKey11x+0x7c>
 80115a4:	e017      	b.n	80115d6 <DeriveSessionKey11x+0x8e>
    {
        case F_NWK_S_INT_KEY:
            compBase[0] = 0x01;
 80115a6:	2314      	movs	r3, #20
 80115a8:	18fb      	adds	r3, r7, r3
 80115aa:	2201      	movs	r2, #1
 80115ac:	701a      	strb	r2, [r3, #0]
            break;
 80115ae:	e014      	b.n	80115da <DeriveSessionKey11x+0x92>
        case S_NWK_S_INT_KEY:
            compBase[0] = 0x03;
 80115b0:	2314      	movs	r3, #20
 80115b2:	18fb      	adds	r3, r7, r3
 80115b4:	2203      	movs	r2, #3
 80115b6:	701a      	strb	r2, [r3, #0]
            break;
 80115b8:	e00f      	b.n	80115da <DeriveSessionKey11x+0x92>
        case NWK_S_ENC_KEY:
            compBase[0] = 0x04;
 80115ba:	2314      	movs	r3, #20
 80115bc:	18fb      	adds	r3, r7, r3
 80115be:	2204      	movs	r2, #4
 80115c0:	701a      	strb	r2, [r3, #0]
            break;
 80115c2:	e00a      	b.n	80115da <DeriveSessionKey11x+0x92>
        case APP_S_KEY:
            rootKeyId = APP_KEY;
 80115c4:	2327      	movs	r3, #39	; 0x27
 80115c6:	18fb      	adds	r3, r7, r3
 80115c8:	2200      	movs	r2, #0
 80115ca:	701a      	strb	r2, [r3, #0]
            compBase[0] = 0x02;
 80115cc:	2314      	movs	r3, #20
 80115ce:	18fb      	adds	r3, r7, r3
 80115d0:	2202      	movs	r2, #2
 80115d2:	701a      	strb	r2, [r3, #0]
            break;
 80115d4:	e001      	b.n	80115da <DeriveSessionKey11x+0x92>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 80115d6:	2308      	movs	r3, #8
 80115d8:	e026      	b.n	8011628 <DeriveSessionKey11x+0xe0>
    }

    memcpy1( compBase + 1, joinNonce, 3 );
 80115da:	2514      	movs	r5, #20
 80115dc:	197b      	adds	r3, r7, r5
 80115de:	3301      	adds	r3, #1
 80115e0:	68b9      	ldr	r1, [r7, #8]
 80115e2:	2203      	movs	r2, #3
 80115e4:	0018      	movs	r0, r3
 80115e6:	f004 fa03 	bl	80159f0 <memcpy1>
    memcpyr( compBase + 4, joinEUI, 8 );
 80115ea:	197b      	adds	r3, r7, r5
 80115ec:	3304      	adds	r3, #4
 80115ee:	6879      	ldr	r1, [r7, #4]
 80115f0:	2208      	movs	r2, #8
 80115f2:	0018      	movs	r0, r3
 80115f4:	f004 fa17 	bl	8015a26 <memcpyr>
    memcpy1( compBase + 12, devNonce, 2 );
 80115f8:	197b      	adds	r3, r7, r5
 80115fa:	330c      	adds	r3, #12
 80115fc:	6839      	ldr	r1, [r7, #0]
 80115fe:	2202      	movs	r2, #2
 8011600:	0018      	movs	r0, r3
 8011602:	f004 f9f5 	bl	80159f0 <memcpy1>

    if( SecureElementDeriveAndStoreKey( CryptoCtx.LrWanVersion, compBase, rootKeyId, keyID ) != SECURE_ELEMENT_SUCCESS )
 8011606:	230f      	movs	r3, #15
 8011608:	18fb      	adds	r3, r7, r3
 801160a:	781c      	ldrb	r4, [r3, #0]
 801160c:	2327      	movs	r3, #39	; 0x27
 801160e:	18fb      	adds	r3, r7, r3
 8011610:	781a      	ldrb	r2, [r3, #0]
 8011612:	1979      	adds	r1, r7, r5
 8011614:	4b06      	ldr	r3, [pc, #24]	; (8011630 <DeriveSessionKey11x+0xe8>)
 8011616:	6818      	ldr	r0, [r3, #0]
 8011618:	0023      	movs	r3, r4
 801161a:	f7f8 fedb 	bl	800a3d4 <SecureElementDeriveAndStoreKey>
 801161e:	1e03      	subs	r3, r0, #0
 8011620:	d001      	beq.n	8011626 <DeriveSessionKey11x+0xde>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8011622:	230c      	movs	r3, #12
 8011624:	e000      	b.n	8011628 <DeriveSessionKey11x+0xe0>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8011626:	2300      	movs	r3, #0
}
 8011628:	0018      	movs	r0, r3
 801162a:	46bd      	mov	sp, r7
 801162c:	b00a      	add	sp, #40	; 0x28
 801162e:	bdb0      	pop	{r4, r5, r7, pc}
 8011630:	20000ed8 	.word	0x20000ed8

08011634 <DeriveLifeTimeSessionKey>:
 * \param[IN]  keyID          - Key Identifier for the key to be calculated
 * \param[IN]  devEUI         - Device EUI
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveLifeTimeSessionKey( KeyIdentifier_t keyID, uint8_t* devEUI )
{
 8011634:	b590      	push	{r4, r7, lr}
 8011636:	b087      	sub	sp, #28
 8011638:	af00      	add	r7, sp, #0
 801163a:	0002      	movs	r2, r0
 801163c:	6039      	str	r1, [r7, #0]
 801163e:	1dfb      	adds	r3, r7, #7
 8011640:	701a      	strb	r2, [r3, #0]
    if( devEUI == 0 )
 8011642:	683b      	ldr	r3, [r7, #0]
 8011644:	2b00      	cmp	r3, #0
 8011646:	d101      	bne.n	801164c <DeriveLifeTimeSessionKey+0x18>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8011648:	2307      	movs	r3, #7
 801164a:	e030      	b.n	80116ae <DeriveLifeTimeSessionKey+0x7a>
    }

    uint8_t compBase[16] = { 0 };
 801164c:	2308      	movs	r3, #8
 801164e:	18fb      	adds	r3, r7, r3
 8011650:	0018      	movs	r0, r3
 8011652:	2310      	movs	r3, #16
 8011654:	001a      	movs	r2, r3
 8011656:	2100      	movs	r1, #0
 8011658:	f00d fd72 	bl	801f140 <memset>

    switch( keyID )
 801165c:	1dfb      	adds	r3, r7, #7
 801165e:	781b      	ldrb	r3, [r3, #0]
 8011660:	2b02      	cmp	r3, #2
 8011662:	d002      	beq.n	801166a <DeriveLifeTimeSessionKey+0x36>
 8011664:	2b03      	cmp	r3, #3
 8011666:	d005      	beq.n	8011674 <DeriveLifeTimeSessionKey+0x40>
 8011668:	e009      	b.n	801167e <DeriveLifeTimeSessionKey+0x4a>
    {
        case J_S_INT_KEY:
            compBase[0] = 0x06;
 801166a:	2308      	movs	r3, #8
 801166c:	18fb      	adds	r3, r7, r3
 801166e:	2206      	movs	r2, #6
 8011670:	701a      	strb	r2, [r3, #0]
            break;
 8011672:	e006      	b.n	8011682 <DeriveLifeTimeSessionKey+0x4e>
        case J_S_ENC_KEY:
            compBase[0] = 0x05;
 8011674:	2308      	movs	r3, #8
 8011676:	18fb      	adds	r3, r7, r3
 8011678:	2205      	movs	r2, #5
 801167a:	701a      	strb	r2, [r3, #0]
            break;
 801167c:	e001      	b.n	8011682 <DeriveLifeTimeSessionKey+0x4e>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 801167e:	2308      	movs	r3, #8
 8011680:	e015      	b.n	80116ae <DeriveLifeTimeSessionKey+0x7a>
    }

    memcpyr( compBase + 1, devEUI, 8 );
 8011682:	2408      	movs	r4, #8
 8011684:	193b      	adds	r3, r7, r4
 8011686:	3301      	adds	r3, #1
 8011688:	6839      	ldr	r1, [r7, #0]
 801168a:	2208      	movs	r2, #8
 801168c:	0018      	movs	r0, r3
 801168e:	f004 f9ca 	bl	8015a26 <memcpyr>

    if( SecureElementDeriveAndStoreKey( CryptoCtx.LrWanVersion, compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 8011692:	1dfb      	adds	r3, r7, #7
 8011694:	781a      	ldrb	r2, [r3, #0]
 8011696:	1939      	adds	r1, r7, r4
 8011698:	4b07      	ldr	r3, [pc, #28]	; (80116b8 <DeriveLifeTimeSessionKey+0x84>)
 801169a:	6818      	ldr	r0, [r3, #0]
 801169c:	0013      	movs	r3, r2
 801169e:	2201      	movs	r2, #1
 80116a0:	f7f8 fe98 	bl	800a3d4 <SecureElementDeriveAndStoreKey>
 80116a4:	1e03      	subs	r3, r0, #0
 80116a6:	d001      	beq.n	80116ac <DeriveLifeTimeSessionKey+0x78>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80116a8:	230c      	movs	r3, #12
 80116aa:	e000      	b.n	80116ae <DeriveLifeTimeSessionKey+0x7a>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80116ac:	2300      	movs	r3, #0
}
 80116ae:	0018      	movs	r0, r3
 80116b0:	46bd      	mov	sp, r7
 80116b2:	b007      	add	sp, #28
 80116b4:	bd90      	pop	{r4, r7, pc}
 80116b6:	46c0      	nop			; (mov r8, r8)
 80116b8:	20000ed8 	.word	0x20000ed8

080116bc <CheckFCntDown>:
 * \param[IN]     currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 80116bc:	b580      	push	{r7, lr}
 80116be:	b084      	sub	sp, #16
 80116c0:	af00      	add	r7, sp, #0
 80116c2:	0002      	movs	r2, r0
 80116c4:	6039      	str	r1, [r7, #0]
 80116c6:	1dfb      	adds	r3, r7, #7
 80116c8:	701a      	strb	r2, [r3, #0]
    uint32_t lastDown = 0;
 80116ca:	2300      	movs	r3, #0
 80116cc:	60fb      	str	r3, [r7, #12]
    switch( fCntID )
 80116ce:	1dfb      	adds	r3, r7, #7
 80116d0:	781b      	ldrb	r3, [r3, #0]
 80116d2:	2b07      	cmp	r3, #7
 80116d4:	d83b      	bhi.n	801174e <CheckFCntDown+0x92>
 80116d6:	009a      	lsls	r2, r3, #2
 80116d8:	4b25      	ldr	r3, [pc, #148]	; (8011770 <CheckFCntDown+0xb4>)
 80116da:	18d3      	adds	r3, r2, r3
 80116dc:	681b      	ldr	r3, [r3, #0]
 80116de:	469f      	mov	pc, r3
    {
        case FCNT_UP:
            return false;
 80116e0:	2300      	movs	r3, #0
 80116e2:	e040      	b.n	8011766 <CheckFCntDown+0xaa>
        case N_FCNT_DOWN:
            lastDown = CryptoCtx.NvmCtx->NFCntDown;
 80116e4:	4b23      	ldr	r3, [pc, #140]	; (8011774 <CheckFCntDown+0xb8>)
 80116e6:	689b      	ldr	r3, [r3, #8]
 80116e8:	68db      	ldr	r3, [r3, #12]
 80116ea:	60fb      	str	r3, [r7, #12]
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->NFCntDown;
 80116ec:	4b21      	ldr	r3, [pc, #132]	; (8011774 <CheckFCntDown+0xb8>)
 80116ee:	689a      	ldr	r2, [r3, #8]
 80116f0:	4b20      	ldr	r3, [pc, #128]	; (8011774 <CheckFCntDown+0xb8>)
 80116f2:	689b      	ldr	r3, [r3, #8]
 80116f4:	320c      	adds	r2, #12
 80116f6:	62da      	str	r2, [r3, #44]	; 0x2c
            break;
 80116f8:	e02b      	b.n	8011752 <CheckFCntDown+0x96>
        case A_FCNT_DOWN:
            lastDown = CryptoCtx.NvmCtx->AFCntDown;
 80116fa:	4b1e      	ldr	r3, [pc, #120]	; (8011774 <CheckFCntDown+0xb8>)
 80116fc:	689b      	ldr	r3, [r3, #8]
 80116fe:	691b      	ldr	r3, [r3, #16]
 8011700:	60fb      	str	r3, [r7, #12]
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->AFCntDown;
 8011702:	4b1c      	ldr	r3, [pc, #112]	; (8011774 <CheckFCntDown+0xb8>)
 8011704:	689a      	ldr	r2, [r3, #8]
 8011706:	4b1b      	ldr	r3, [pc, #108]	; (8011774 <CheckFCntDown+0xb8>)
 8011708:	689b      	ldr	r3, [r3, #8]
 801170a:	3210      	adds	r2, #16
 801170c:	62da      	str	r2, [r3, #44]	; 0x2c
            break;
 801170e:	e020      	b.n	8011752 <CheckFCntDown+0x96>
        case FCNT_DOWN:
            lastDown = CryptoCtx.NvmCtx->FCntDown;
 8011710:	4b18      	ldr	r3, [pc, #96]	; (8011774 <CheckFCntDown+0xb8>)
 8011712:	689b      	ldr	r3, [r3, #8]
 8011714:	695b      	ldr	r3, [r3, #20]
 8011716:	60fb      	str	r3, [r7, #12]
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntDown;
 8011718:	4b16      	ldr	r3, [pc, #88]	; (8011774 <CheckFCntDown+0xb8>)
 801171a:	689a      	ldr	r2, [r3, #8]
 801171c:	4b15      	ldr	r3, [pc, #84]	; (8011774 <CheckFCntDown+0xb8>)
 801171e:	689b      	ldr	r3, [r3, #8]
 8011720:	3214      	adds	r2, #20
 8011722:	62da      	str	r2, [r3, #44]	; 0x2c
            break;
 8011724:	e015      	b.n	8011752 <CheckFCntDown+0x96>
        case MC_FCNT_DOWN_0:
            lastDown = CryptoCtx.NvmCtx->McFCntDown0;
 8011726:	4b13      	ldr	r3, [pc, #76]	; (8011774 <CheckFCntDown+0xb8>)
 8011728:	689b      	ldr	r3, [r3, #8]
 801172a:	699b      	ldr	r3, [r3, #24]
 801172c:	60fb      	str	r3, [r7, #12]
            break;
 801172e:	e010      	b.n	8011752 <CheckFCntDown+0x96>
        case MC_FCNT_DOWN_1:
            lastDown = CryptoCtx.NvmCtx->McFCntDown1;
 8011730:	4b10      	ldr	r3, [pc, #64]	; (8011774 <CheckFCntDown+0xb8>)
 8011732:	689b      	ldr	r3, [r3, #8]
 8011734:	69db      	ldr	r3, [r3, #28]
 8011736:	60fb      	str	r3, [r7, #12]
            break;
 8011738:	e00b      	b.n	8011752 <CheckFCntDown+0x96>
        case MC_FCNT_DOWN_2:
            lastDown = CryptoCtx.NvmCtx->McFCntDown2;
 801173a:	4b0e      	ldr	r3, [pc, #56]	; (8011774 <CheckFCntDown+0xb8>)
 801173c:	689b      	ldr	r3, [r3, #8]
 801173e:	6a1b      	ldr	r3, [r3, #32]
 8011740:	60fb      	str	r3, [r7, #12]
            break;
 8011742:	e006      	b.n	8011752 <CheckFCntDown+0x96>
        case MC_FCNT_DOWN_3:
            lastDown = CryptoCtx.NvmCtx->McFCntDown3;
 8011744:	4b0b      	ldr	r3, [pc, #44]	; (8011774 <CheckFCntDown+0xb8>)
 8011746:	689b      	ldr	r3, [r3, #8]
 8011748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801174a:	60fb      	str	r3, [r7, #12]
            break;
 801174c:	e001      	b.n	8011752 <CheckFCntDown+0x96>
        default:
            return false;
 801174e:	2300      	movs	r3, #0
 8011750:	e009      	b.n	8011766 <CheckFCntDown+0xaa>
    }
    if( ( currentDown > lastDown ) ||
 8011752:	683a      	ldr	r2, [r7, #0]
 8011754:	68fb      	ldr	r3, [r7, #12]
 8011756:	429a      	cmp	r2, r3
 8011758:	d802      	bhi.n	8011760 <CheckFCntDown+0xa4>
 801175a:	68fb      	ldr	r3, [r7, #12]
 801175c:	3301      	adds	r3, #1
 801175e:	d101      	bne.n	8011764 <CheckFCntDown+0xa8>
        // For LoRaWAN 1.0.X only. Allow downlink frames of 0
        ( lastDown == FCNT_DOWN_INITAL_VALUE ) )
    {
        return true;
 8011760:	2301      	movs	r3, #1
 8011762:	e000      	b.n	8011766 <CheckFCntDown+0xaa>
    }
    else
    {
        return false;
 8011764:	2300      	movs	r3, #0
    }
}
 8011766:	0018      	movs	r0, r3
 8011768:	46bd      	mov	sp, r7
 801176a:	b004      	add	sp, #16
 801176c:	bd80      	pop	{r7, pc}
 801176e:	46c0      	nop			; (mov r8, r8)
 8011770:	080219a8 	.word	0x080219a8
 8011774:	20000ed8 	.word	0x20000ed8

08011778 <UpdateFCntDown>:
 * \param[IN]     currentDown   - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8011778:	b580      	push	{r7, lr}
 801177a:	b082      	sub	sp, #8
 801177c:	af00      	add	r7, sp, #0
 801177e:	0002      	movs	r2, r0
 8011780:	6039      	str	r1, [r7, #0]
 8011782:	1dfb      	adds	r3, r7, #7
 8011784:	701a      	strb	r2, [r3, #0]
    switch( fCntID )
 8011786:	1dfb      	adds	r3, r7, #7
 8011788:	781b      	ldrb	r3, [r3, #0]
 801178a:	2b07      	cmp	r3, #7
 801178c:	d827      	bhi.n	80117de <UpdateFCntDown+0x66>
 801178e:	009a      	lsls	r2, r3, #2
 8011790:	4b17      	ldr	r3, [pc, #92]	; (80117f0 <UpdateFCntDown+0x78>)
 8011792:	18d3      	adds	r3, r2, r3
 8011794:	681b      	ldr	r3, [r3, #0]
 8011796:	469f      	mov	pc, r3
    {
        case N_FCNT_DOWN:
            CryptoCtx.NvmCtx->NFCntDown = currentDown;
 8011798:	4b16      	ldr	r3, [pc, #88]	; (80117f4 <UpdateFCntDown+0x7c>)
 801179a:	689b      	ldr	r3, [r3, #8]
 801179c:	683a      	ldr	r2, [r7, #0]
 801179e:	60da      	str	r2, [r3, #12]
            break;
 80117a0:	e01e      	b.n	80117e0 <UpdateFCntDown+0x68>
        case A_FCNT_DOWN:
            CryptoCtx.NvmCtx->AFCntDown = currentDown;
 80117a2:	4b14      	ldr	r3, [pc, #80]	; (80117f4 <UpdateFCntDown+0x7c>)
 80117a4:	689b      	ldr	r3, [r3, #8]
 80117a6:	683a      	ldr	r2, [r7, #0]
 80117a8:	611a      	str	r2, [r3, #16]
            break;
 80117aa:	e019      	b.n	80117e0 <UpdateFCntDown+0x68>
        case FCNT_DOWN:
            CryptoCtx.NvmCtx->FCntDown = currentDown;
 80117ac:	4b11      	ldr	r3, [pc, #68]	; (80117f4 <UpdateFCntDown+0x7c>)
 80117ae:	689b      	ldr	r3, [r3, #8]
 80117b0:	683a      	ldr	r2, [r7, #0]
 80117b2:	615a      	str	r2, [r3, #20]
            break;
 80117b4:	e014      	b.n	80117e0 <UpdateFCntDown+0x68>
        case MC_FCNT_DOWN_0:
            CryptoCtx.NvmCtx->McFCntDown0 = currentDown;
 80117b6:	4b0f      	ldr	r3, [pc, #60]	; (80117f4 <UpdateFCntDown+0x7c>)
 80117b8:	689b      	ldr	r3, [r3, #8]
 80117ba:	683a      	ldr	r2, [r7, #0]
 80117bc:	619a      	str	r2, [r3, #24]
            break;
 80117be:	e00f      	b.n	80117e0 <UpdateFCntDown+0x68>
        case MC_FCNT_DOWN_1:
            CryptoCtx.NvmCtx->McFCntDown1 = currentDown;
 80117c0:	4b0c      	ldr	r3, [pc, #48]	; (80117f4 <UpdateFCntDown+0x7c>)
 80117c2:	689b      	ldr	r3, [r3, #8]
 80117c4:	683a      	ldr	r2, [r7, #0]
 80117c6:	61da      	str	r2, [r3, #28]
            break;
 80117c8:	e00a      	b.n	80117e0 <UpdateFCntDown+0x68>
        case MC_FCNT_DOWN_2:
            CryptoCtx.NvmCtx->McFCntDown2 = currentDown;
 80117ca:	4b0a      	ldr	r3, [pc, #40]	; (80117f4 <UpdateFCntDown+0x7c>)
 80117cc:	689b      	ldr	r3, [r3, #8]
 80117ce:	683a      	ldr	r2, [r7, #0]
 80117d0:	621a      	str	r2, [r3, #32]
            break;
 80117d2:	e005      	b.n	80117e0 <UpdateFCntDown+0x68>
        case MC_FCNT_DOWN_3:
            CryptoCtx.NvmCtx->McFCntDown3 = currentDown;
 80117d4:	4b07      	ldr	r3, [pc, #28]	; (80117f4 <UpdateFCntDown+0x7c>)
 80117d6:	689b      	ldr	r3, [r3, #8]
 80117d8:	683a      	ldr	r2, [r7, #0]
 80117da:	625a      	str	r2, [r3, #36]	; 0x24
            break;
 80117dc:	e000      	b.n	80117e0 <UpdateFCntDown+0x68>
        default:
            break;
 80117de:	46c0      	nop			; (mov r8, r8)
    }
    CryptoCtx.EventCryptoNvmCtxChanged( );
 80117e0:	4b04      	ldr	r3, [pc, #16]	; (80117f4 <UpdateFCntDown+0x7c>)
 80117e2:	68db      	ldr	r3, [r3, #12]
 80117e4:	4798      	blx	r3
}
 80117e6:	46c0      	nop			; (mov r8, r8)
 80117e8:	46bd      	mov	sp, r7
 80117ea:	b002      	add	sp, #8
 80117ec:	bd80      	pop	{r7, pc}
 80117ee:	46c0      	nop			; (mov r8, r8)
 80117f0:	080219c8 	.word	0x080219c8
 80117f4:	20000ed8 	.word	0x20000ed8

080117f8 <ResetFCnts>:

/*!
 * Resets the frame counters
 */
void ResetFCnts( void )
{
 80117f8:	b580      	push	{r7, lr}
 80117fa:	af00      	add	r7, sp, #0

    CryptoCtx.NvmCtx->FCntUp = 0;
 80117fc:	4b16      	ldr	r3, [pc, #88]	; (8011858 <ResetFCnts+0x60>)
 80117fe:	689b      	ldr	r3, [r3, #8]
 8011800:	2200      	movs	r2, #0
 8011802:	609a      	str	r2, [r3, #8]
    CryptoCtx.NvmCtx->NFCntDown = FCNT_DOWN_INITAL_VALUE;
 8011804:	4b14      	ldr	r3, [pc, #80]	; (8011858 <ResetFCnts+0x60>)
 8011806:	689b      	ldr	r3, [r3, #8]
 8011808:	2201      	movs	r2, #1
 801180a:	4252      	negs	r2, r2
 801180c:	60da      	str	r2, [r3, #12]
    CryptoCtx.NvmCtx->AFCntDown = FCNT_DOWN_INITAL_VALUE;
 801180e:	4b12      	ldr	r3, [pc, #72]	; (8011858 <ResetFCnts+0x60>)
 8011810:	689b      	ldr	r3, [r3, #8]
 8011812:	2201      	movs	r2, #1
 8011814:	4252      	negs	r2, r2
 8011816:	611a      	str	r2, [r3, #16]
    CryptoCtx.NvmCtx->FCntDown = FCNT_DOWN_INITAL_VALUE;
 8011818:	4b0f      	ldr	r3, [pc, #60]	; (8011858 <ResetFCnts+0x60>)
 801181a:	689b      	ldr	r3, [r3, #8]
 801181c:	2201      	movs	r2, #1
 801181e:	4252      	negs	r2, r2
 8011820:	615a      	str	r2, [r3, #20]

    CryptoCtx.NvmCtx->McFCntDown0 = FCNT_DOWN_INITAL_VALUE;
 8011822:	4b0d      	ldr	r3, [pc, #52]	; (8011858 <ResetFCnts+0x60>)
 8011824:	689b      	ldr	r3, [r3, #8]
 8011826:	2201      	movs	r2, #1
 8011828:	4252      	negs	r2, r2
 801182a:	619a      	str	r2, [r3, #24]
    CryptoCtx.NvmCtx->McFCntDown1 = FCNT_DOWN_INITAL_VALUE;
 801182c:	4b0a      	ldr	r3, [pc, #40]	; (8011858 <ResetFCnts+0x60>)
 801182e:	689b      	ldr	r3, [r3, #8]
 8011830:	2201      	movs	r2, #1
 8011832:	4252      	negs	r2, r2
 8011834:	61da      	str	r2, [r3, #28]
    CryptoCtx.NvmCtx->McFCntDown2 = FCNT_DOWN_INITAL_VALUE;
 8011836:	4b08      	ldr	r3, [pc, #32]	; (8011858 <ResetFCnts+0x60>)
 8011838:	689b      	ldr	r3, [r3, #8]
 801183a:	2201      	movs	r2, #1
 801183c:	4252      	negs	r2, r2
 801183e:	621a      	str	r2, [r3, #32]
    CryptoCtx.NvmCtx->McFCntDown3 = FCNT_DOWN_INITAL_VALUE;
 8011840:	4b05      	ldr	r3, [pc, #20]	; (8011858 <ResetFCnts+0x60>)
 8011842:	689b      	ldr	r3, [r3, #8]
 8011844:	2201      	movs	r2, #1
 8011846:	4252      	negs	r2, r2
 8011848:	625a      	str	r2, [r3, #36]	; 0x24

    CryptoCtx.EventCryptoNvmCtxChanged( );
 801184a:	4b03      	ldr	r3, [pc, #12]	; (8011858 <ResetFCnts+0x60>)
 801184c:	68db      	ldr	r3, [r3, #12]
 801184e:	4798      	blx	r3
}
 8011850:	46c0      	nop			; (mov r8, r8)
 8011852:	46bd      	mov	sp, r7
 8011854:	bd80      	pop	{r7, pc}
 8011856:	46c0      	nop			; (mov r8, r8)
 8011858:	20000ed8 	.word	0x20000ed8

0801185c <DummyCB>:

/*
 * Dummy callback in case if the user provides NULL function pointer
 */
static void DummyCB( void )
{
 801185c:	b580      	push	{r7, lr}
 801185e:	af00      	add	r7, sp, #0
    return;
 8011860:	46c0      	nop			; (mov r8, r8)
}
 8011862:	46bd      	mov	sp, r7
 8011864:	bd80      	pop	{r7, pc}
	...

08011868 <LoRaMacCryptoInit>:
/*
 *  API functions
 */

LoRaMacCryptoStatus_t LoRaMacCryptoInit( EventNvmCtxChanged cryptoNvmCtxChanged )
{
 8011868:	b580      	push	{r7, lr}
 801186a:	b082      	sub	sp, #8
 801186c:	af00      	add	r7, sp, #0
 801186e:	6078      	str	r0, [r7, #4]
    // Initialize volatile variables
    CryptoCtx.LrWanVersion.Fields.Major = 1;
 8011870:	4b22      	ldr	r3, [pc, #136]	; (80118fc <LoRaMacCryptoInit+0x94>)
 8011872:	2201      	movs	r2, #1
 8011874:	70da      	strb	r2, [r3, #3]
    CryptoCtx.LrWanVersion.Fields.Minor = 1;
 8011876:	4b21      	ldr	r3, [pc, #132]	; (80118fc <LoRaMacCryptoInit+0x94>)
 8011878:	2201      	movs	r2, #1
 801187a:	709a      	strb	r2, [r3, #2]
    CryptoCtx.LrWanVersion.Fields.Revision = 0;
 801187c:	4b1f      	ldr	r3, [pc, #124]	; (80118fc <LoRaMacCryptoInit+0x94>)
 801187e:	2200      	movs	r2, #0
 8011880:	705a      	strb	r2, [r3, #1]
    CryptoCtx.LrWanVersion.Fields.Rfu = 0;
 8011882:	4b1e      	ldr	r3, [pc, #120]	; (80118fc <LoRaMacCryptoInit+0x94>)
 8011884:	2200      	movs	r2, #0
 8011886:	701a      	strb	r2, [r3, #0]
    CryptoCtx.RJcount0 = 0;
 8011888:	4b1c      	ldr	r3, [pc, #112]	; (80118fc <LoRaMacCryptoInit+0x94>)
 801188a:	2200      	movs	r2, #0
 801188c:	809a      	strh	r2, [r3, #4]

    // Assign non volatile context
    CryptoCtx.NvmCtx = &NvmCryptoCtx;
 801188e:	4b1b      	ldr	r3, [pc, #108]	; (80118fc <LoRaMacCryptoInit+0x94>)
 8011890:	4a1b      	ldr	r2, [pc, #108]	; (8011900 <LoRaMacCryptoInit+0x98>)
 8011892:	609a      	str	r2, [r3, #8]

    // Assign callback
    if( cryptoNvmCtxChanged != 0 )
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	2b00      	cmp	r3, #0
 8011898:	d003      	beq.n	80118a2 <LoRaMacCryptoInit+0x3a>
    {
        CryptoCtx.EventCryptoNvmCtxChanged = cryptoNvmCtxChanged;
 801189a:	4b18      	ldr	r3, [pc, #96]	; (80118fc <LoRaMacCryptoInit+0x94>)
 801189c:	687a      	ldr	r2, [r7, #4]
 801189e:	60da      	str	r2, [r3, #12]
 80118a0:	e002      	b.n	80118a8 <LoRaMacCryptoInit+0x40>
    }
    else
    {
        CryptoCtx.EventCryptoNvmCtxChanged = DummyCB;
 80118a2:	4b16      	ldr	r3, [pc, #88]	; (80118fc <LoRaMacCryptoInit+0x94>)
 80118a4:	4a17      	ldr	r2, [pc, #92]	; (8011904 <LoRaMacCryptoInit+0x9c>)
 80118a6:	60da      	str	r2, [r3, #12]
    }

    // Initialize with default
    memset1( (uint8_t*) CryptoCtx.NvmCtx, 0, sizeof( LoRaMacCryptoNvmCtx_t ) );
 80118a8:	4b14      	ldr	r3, [pc, #80]	; (80118fc <LoRaMacCryptoInit+0x94>)
 80118aa:	689b      	ldr	r3, [r3, #8]
 80118ac:	2230      	movs	r2, #48	; 0x30
 80118ae:	2100      	movs	r1, #0
 80118b0:	0018      	movs	r0, r3
 80118b2:	f004 f8d9 	bl	8015a68 <memset1>

    // Reset frame counters
    CryptoCtx.RJcount0 = 0;
 80118b6:	4b11      	ldr	r3, [pc, #68]	; (80118fc <LoRaMacCryptoInit+0x94>)
 80118b8:	2200      	movs	r2, #0
 80118ba:	809a      	strh	r2, [r3, #4]
    CryptoCtx.NvmCtx->FCntUp = 0;
 80118bc:	4b0f      	ldr	r3, [pc, #60]	; (80118fc <LoRaMacCryptoInit+0x94>)
 80118be:	689b      	ldr	r3, [r3, #8]
 80118c0:	2200      	movs	r2, #0
 80118c2:	609a      	str	r2, [r3, #8]
    CryptoCtx.NvmCtx->FCntDown = FCNT_DOWN_INITAL_VALUE;
 80118c4:	4b0d      	ldr	r3, [pc, #52]	; (80118fc <LoRaMacCryptoInit+0x94>)
 80118c6:	689b      	ldr	r3, [r3, #8]
 80118c8:	2201      	movs	r2, #1
 80118ca:	4252      	negs	r2, r2
 80118cc:	615a      	str	r2, [r3, #20]
    CryptoCtx.NvmCtx->NFCntDown = FCNT_DOWN_INITAL_VALUE;
 80118ce:	4b0b      	ldr	r3, [pc, #44]	; (80118fc <LoRaMacCryptoInit+0x94>)
 80118d0:	689b      	ldr	r3, [r3, #8]
 80118d2:	2201      	movs	r2, #1
 80118d4:	4252      	negs	r2, r2
 80118d6:	60da      	str	r2, [r3, #12]
    CryptoCtx.NvmCtx->AFCntDown = FCNT_DOWN_INITAL_VALUE;
 80118d8:	4b08      	ldr	r3, [pc, #32]	; (80118fc <LoRaMacCryptoInit+0x94>)
 80118da:	689b      	ldr	r3, [r3, #8]
 80118dc:	2201      	movs	r2, #1
 80118de:	4252      	negs	r2, r2
 80118e0:	611a      	str	r2, [r3, #16]

    // Set non zero values
    CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntDown;
 80118e2:	4b06      	ldr	r3, [pc, #24]	; (80118fc <LoRaMacCryptoInit+0x94>)
 80118e4:	689a      	ldr	r2, [r3, #8]
 80118e6:	4b05      	ldr	r3, [pc, #20]	; (80118fc <LoRaMacCryptoInit+0x94>)
 80118e8:	689b      	ldr	r3, [r3, #8]
 80118ea:	3214      	adds	r2, #20
 80118ec:	62da      	str	r2, [r3, #44]	; 0x2c
    ResetFCnts( );
 80118ee:	f7ff ff83 	bl	80117f8 <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 80118f2:	2300      	movs	r3, #0
}
 80118f4:	0018      	movs	r0, r3
 80118f6:	46bd      	mov	sp, r7
 80118f8:	b002      	add	sp, #8
 80118fa:	bd80      	pop	{r7, pc}
 80118fc:	20000ed8 	.word	0x20000ed8
 8011900:	20000ee8 	.word	0x20000ee8
 8011904:	0801185d 	.word	0x0801185d

08011908 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
 8011908:	b580      	push	{r7, lr}
 801190a:	b082      	sub	sp, #8
 801190c:	af00      	add	r7, sp, #0
 801190e:	6078      	str	r0, [r7, #4]
    CryptoCtx.LrWanVersion = version;
 8011910:	4b03      	ldr	r3, [pc, #12]	; (8011920 <LoRaMacCryptoSetLrWanVersion+0x18>)
 8011912:	687a      	ldr	r2, [r7, #4]
 8011914:	601a      	str	r2, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 8011916:	2300      	movs	r3, #0
}
 8011918:	0018      	movs	r0, r3
 801191a:	46bd      	mov	sp, r7
 801191c:	b002      	add	sp, #8
 801191e:	bd80      	pop	{r7, pc}
 8011920:	20000ed8 	.word	0x20000ed8

08011924 <LoRaMacCryptoRestoreNvmCtx>:

LoRaMacCryptoStatus_t LoRaMacCryptoRestoreNvmCtx( void* cryptoNvmCtx )
{
 8011924:	b580      	push	{r7, lr}
 8011926:	b082      	sub	sp, #8
 8011928:	af00      	add	r7, sp, #0
 801192a:	6078      	str	r0, [r7, #4]
    // Restore module context
    if( cryptoNvmCtx != 0 )
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	2b00      	cmp	r3, #0
 8011930:	d007      	beq.n	8011942 <LoRaMacCryptoRestoreNvmCtx+0x1e>
    {
        memcpy1( ( uint8_t* ) &NvmCryptoCtx, ( uint8_t* ) cryptoNvmCtx, CRYPTO_NVM_CTX_SIZE );
 8011932:	6879      	ldr	r1, [r7, #4]
 8011934:	4b05      	ldr	r3, [pc, #20]	; (801194c <LoRaMacCryptoRestoreNvmCtx+0x28>)
 8011936:	2230      	movs	r2, #48	; 0x30
 8011938:	0018      	movs	r0, r3
 801193a:	f004 f859 	bl	80159f0 <memcpy1>
        return LORAMAC_CRYPTO_SUCCESS;
 801193e:	2300      	movs	r3, #0
 8011940:	e000      	b.n	8011944 <LoRaMacCryptoRestoreNvmCtx+0x20>
    }
    else
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8011942:	2307      	movs	r3, #7
    }
}
 8011944:	0018      	movs	r0, r3
 8011946:	46bd      	mov	sp, r7
 8011948:	b002      	add	sp, #8
 801194a:	bd80      	pop	{r7, pc}
 801194c:	20000ee8 	.word	0x20000ee8

08011950 <LoRaMacCryptoGetNvmCtx>:

void* LoRaMacCryptoGetNvmCtx( size_t* cryptoNvmCtxSize )
{
 8011950:	b580      	push	{r7, lr}
 8011952:	b082      	sub	sp, #8
 8011954:	af00      	add	r7, sp, #0
 8011956:	6078      	str	r0, [r7, #4]
    *cryptoNvmCtxSize = CRYPTO_NVM_CTX_SIZE;
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	2230      	movs	r2, #48	; 0x30
 801195c:	601a      	str	r2, [r3, #0]
    return &NvmCryptoCtx;
 801195e:	4b02      	ldr	r3, [pc, #8]	; (8011968 <LoRaMacCryptoGetNvmCtx+0x18>)
}
 8011960:	0018      	movs	r0, r3
 8011962:	46bd      	mov	sp, r7
 8011964:	b002      	add	sp, #8
 8011966:	bd80      	pop	{r7, pc}
 8011968:	20000ee8 	.word	0x20000ee8

0801196c <LoRaMacCryptoSetKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 801196c:	b580      	push	{r7, lr}
 801196e:	b082      	sub	sp, #8
 8011970:	af00      	add	r7, sp, #0
 8011972:	0002      	movs	r2, r0
 8011974:	6039      	str	r1, [r7, #0]
 8011976:	1dfb      	adds	r3, r7, #7
 8011978:	701a      	strb	r2, [r3, #0]
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 801197a:	683a      	ldr	r2, [r7, #0]
 801197c:	1dfb      	adds	r3, r7, #7
 801197e:	781b      	ldrb	r3, [r3, #0]
 8011980:	0011      	movs	r1, r2
 8011982:	0018      	movs	r0, r3
 8011984:	f7f8 fbde 	bl	800a144 <SecureElementSetKey>
 8011988:	1e03      	subs	r3, r0, #0
 801198a:	d001      	beq.n	8011990 <LoRaMacCryptoSetKey+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801198c:	230c      	movs	r3, #12
 801198e:	e000      	b.n	8011992 <LoRaMacCryptoSetKey+0x26>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8011990:	2300      	movs	r3, #0
}
 8011992:	0018      	movs	r0, r3
 8011994:	46bd      	mov	sp, r7
 8011996:	b002      	add	sp, #8
 8011998:	bd80      	pop	{r7, pc}
	...

0801199c <LoRaMacCryptoPrepareJoinRequest>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 801199c:	b5b0      	push	{r4, r5, r7, lr}
 801199e:	b084      	sub	sp, #16
 80119a0:	af00      	add	r7, sp, #0
 80119a2:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
 80119a4:	687b      	ldr	r3, [r7, #4]
 80119a6:	2b00      	cmp	r3, #0
 80119a8:	d101      	bne.n	80119ae <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80119aa:	2307      	movs	r3, #7
 80119ac:	e064      	b.n	8011a78 <LoRaMacCryptoPrepareJoinRequest+0xdc>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
 80119ae:	230f      	movs	r3, #15
 80119b0:	18fb      	adds	r3, r7, r3
 80119b2:	2201      	movs	r2, #1
 80119b4:	701a      	strb	r2, [r3, #0]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 80119b6:	240e      	movs	r4, #14
 80119b8:	193b      	adds	r3, r7, r4
 80119ba:	2210      	movs	r2, #16
 80119bc:	701a      	strb	r2, [r3, #0]

    // Add device nonce
#ifdef NONCE_INC
    CryptoCtx.NvmCtx->DevNonce++;
#else  
    CryptoCtx.NvmCtx->DevNonce = (uint16_t) rand1( );
 80119be:	f003 ffd7 	bl	8015970 <rand1>
 80119c2:	0002      	movs	r2, r0
 80119c4:	4b2e      	ldr	r3, [pc, #184]	; (8011a80 <LoRaMacCryptoPrepareJoinRequest+0xe4>)
 80119c6:	689b      	ldr	r3, [r3, #8]
 80119c8:	b292      	uxth	r2, r2
 80119ca:	801a      	strh	r2, [r3, #0]
#endif
    CryptoCtx.EventCryptoNvmCtxChanged( );
 80119cc:	4b2c      	ldr	r3, [pc, #176]	; (8011a80 <LoRaMacCryptoPrepareJoinRequest+0xe4>)
 80119ce:	68db      	ldr	r3, [r3, #12]
 80119d0:	4798      	blx	r3
    macMsg->DevNonce = CryptoCtx.NvmCtx->DevNonce;
 80119d2:	4b2b      	ldr	r3, [pc, #172]	; (8011a80 <LoRaMacCryptoPrepareJoinRequest+0xe4>)
 80119d4:	689b      	ldr	r3, [r3, #8]
 80119d6:	881a      	ldrh	r2, [r3, #0]
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	82da      	strh	r2, [r3, #22]

    // Derive lifetime session keys
    retval = DeriveLifeTimeSessionKey( J_S_INT_KEY, macMsg->DevEUI );
 80119dc:	687b      	ldr	r3, [r7, #4]
 80119de:	330e      	adds	r3, #14
 80119e0:	0025      	movs	r5, r4
 80119e2:	193c      	adds	r4, r7, r4
 80119e4:	0019      	movs	r1, r3
 80119e6:	2002      	movs	r0, #2
 80119e8:	f7ff fe24 	bl	8011634 <DeriveLifeTimeSessionKey>
 80119ec:	0003      	movs	r3, r0
 80119ee:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80119f0:	002c      	movs	r4, r5
 80119f2:	193b      	adds	r3, r7, r4
 80119f4:	781b      	ldrb	r3, [r3, #0]
 80119f6:	2b00      	cmp	r3, #0
 80119f8:	d003      	beq.n	8011a02 <LoRaMacCryptoPrepareJoinRequest+0x66>
    {
        return retval;
 80119fa:	230e      	movs	r3, #14
 80119fc:	18fb      	adds	r3, r7, r3
 80119fe:	781b      	ldrb	r3, [r3, #0]
 8011a00:	e03a      	b.n	8011a78 <LoRaMacCryptoPrepareJoinRequest+0xdc>
    }
    retval = DeriveLifeTimeSessionKey( J_S_ENC_KEY, macMsg->DevEUI );
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	330e      	adds	r3, #14
 8011a06:	250e      	movs	r5, #14
 8011a08:	197c      	adds	r4, r7, r5
 8011a0a:	0019      	movs	r1, r3
 8011a0c:	2003      	movs	r0, #3
 8011a0e:	f7ff fe11 	bl	8011634 <DeriveLifeTimeSessionKey>
 8011a12:	0003      	movs	r3, r0
 8011a14:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8011a16:	197b      	adds	r3, r7, r5
 8011a18:	781b      	ldrb	r3, [r3, #0]
 8011a1a:	2b00      	cmp	r3, #0
 8011a1c:	d003      	beq.n	8011a26 <LoRaMacCryptoPrepareJoinRequest+0x8a>
    {
        return retval;
 8011a1e:	230e      	movs	r3, #14
 8011a20:	18fb      	adds	r3, r7, r3
 8011a22:	781b      	ldrb	r3, [r3, #0]
 8011a24:	e028      	b.n	8011a78 <LoRaMacCryptoPrepareJoinRequest+0xdc>
    }

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	0018      	movs	r0, r3
 8011a2a:	f001 f856 	bl	8012ada <LoRaMacSerializerJoinRequest>
 8011a2e:	1e03      	subs	r3, r0, #0
 8011a30:	d001      	beq.n	8011a36 <LoRaMacCryptoPrepareJoinRequest+0x9a>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8011a32:	230e      	movs	r3, #14
 8011a34:	e020      	b.n	8011a78 <LoRaMacCryptoPrepareJoinRequest+0xdc>
    }

    // Compute mic
    retval = LoraMacCryptoComputeCmac( macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC );
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	6818      	ldr	r0, [r3, #0]
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	3318      	adds	r3, #24
 8011a3e:	0019      	movs	r1, r3
 8011a40:	250e      	movs	r5, #14
 8011a42:	197c      	adds	r4, r7, r5
 8011a44:	230f      	movs	r3, #15
 8011a46:	18fb      	adds	r3, r7, r3
 8011a48:	781a      	ldrb	r2, [r3, #0]
 8011a4a:	000b      	movs	r3, r1
 8011a4c:	2113      	movs	r1, #19
 8011a4e:	f7ff f996 	bl	8010d7e <LoraMacCryptoComputeCmac>
 8011a52:	0003      	movs	r3, r0
 8011a54:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8011a56:	197b      	adds	r3, r7, r5
 8011a58:	781b      	ldrb	r3, [r3, #0]
 8011a5a:	2b00      	cmp	r3, #0
 8011a5c:	d003      	beq.n	8011a66 <LoRaMacCryptoPrepareJoinRequest+0xca>
    {
        return retval;
 8011a5e:	230e      	movs	r3, #14
 8011a60:	18fb      	adds	r3, r7, r3
 8011a62:	781b      	ldrb	r3, [r3, #0]
 8011a64:	e008      	b.n	8011a78 <LoRaMacCryptoPrepareJoinRequest+0xdc>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8011a66:	687b      	ldr	r3, [r7, #4]
 8011a68:	0018      	movs	r0, r3
 8011a6a:	f001 f836 	bl	8012ada <LoRaMacSerializerJoinRequest>
 8011a6e:	1e03      	subs	r3, r0, #0
 8011a70:	d001      	beq.n	8011a76 <LoRaMacCryptoPrepareJoinRequest+0xda>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8011a72:	230e      	movs	r3, #14
 8011a74:	e000      	b.n	8011a78 <LoRaMacCryptoPrepareJoinRequest+0xdc>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8011a76:	2300      	movs	r3, #0
}
 8011a78:	0018      	movs	r0, r3
 8011a7a:	46bd      	mov	sp, r7
 8011a7c:	b004      	add	sp, #16
 8011a7e:	bdb0      	pop	{r4, r5, r7, pc}
 8011a80:	20000ed8 	.word	0x20000ed8

08011a84 <LoRaMacCryptoHandleJoinAccept>:

    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoHandleJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEUI, LoRaMacMessageJoinAccept_t* macMsg )
{
 8011a84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011a86:	b0cd      	sub	sp, #308	; 0x134
 8011a88:	af00      	add	r7, sp, #0
 8011a8a:	60b9      	str	r1, [r7, #8]
 8011a8c:	607a      	str	r2, [r7, #4]
 8011a8e:	4bde      	ldr	r3, [pc, #888]	; (8011e08 <LoRaMacCryptoHandleJoinAccept+0x384>)
 8011a90:	2298      	movs	r2, #152	; 0x98
 8011a92:	0052      	lsls	r2, r2, #1
 8011a94:	4694      	mov	ip, r2
 8011a96:	44bc      	add	ip, r7
 8011a98:	4463      	add	r3, ip
 8011a9a:	1c02      	adds	r2, r0, #0
 8011a9c:	701a      	strb	r2, [r3, #0]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 8011a9e:	687b      	ldr	r3, [r7, #4]
 8011aa0:	2b00      	cmp	r3, #0
 8011aa2:	d002      	beq.n	8011aaa <LoRaMacCryptoHandleJoinAccept+0x26>
 8011aa4:	68bb      	ldr	r3, [r7, #8]
 8011aa6:	2b00      	cmp	r3, #0
 8011aa8:	d101      	bne.n	8011aae <LoRaMacCryptoHandleJoinAccept+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8011aaa:	2307      	movs	r3, #7
 8011aac:	e25e      	b.n	8011f6c <LoRaMacCryptoHandleJoinAccept+0x4e8>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8011aae:	2328      	movs	r3, #40	; 0x28
 8011ab0:	33ff      	adds	r3, #255	; 0xff
 8011ab2:	18fb      	adds	r3, r7, r3
 8011ab4:	2210      	movs	r2, #16
 8011ab6:	701a      	strb	r2, [r3, #0]
    KeyIdentifier_t micComputationKeyID;
    KeyIdentifier_t encryptionKeyID;
    uint8_t micComputationOffset = 0;
 8011ab8:	232e      	movs	r3, #46	; 0x2e
 8011aba:	33ff      	adds	r3, #255	; 0xff
 8011abc:	18fb      	adds	r3, r7, r3
 8011abe:	2200      	movs	r2, #0
 8011ac0:	701a      	strb	r2, [r3, #0]
    uint8_t* devNonceForKeyDerivation = ( uint8_t* ) &CryptoCtx.NvmCtx->DevNonce;
 8011ac2:	4bd2      	ldr	r3, [pc, #840]	; (8011e0c <LoRaMacCryptoHandleJoinAccept+0x388>)
 8011ac4:	689b      	ldr	r3, [r3, #8]
 8011ac6:	2294      	movs	r2, #148	; 0x94
 8011ac8:	0052      	lsls	r2, r2, #1
 8011aca:	18ba      	adds	r2, r7, r2
 8011acc:	6013      	str	r3, [r2, #0]

    // Determine decryption key and DevNonce for key derivation
    if( joinReqType == JOIN_REQ )
 8011ace:	4bce      	ldr	r3, [pc, #824]	; (8011e08 <LoRaMacCryptoHandleJoinAccept+0x384>)
 8011ad0:	2298      	movs	r2, #152	; 0x98
 8011ad2:	0052      	lsls	r2, r2, #1
 8011ad4:	4694      	mov	ip, r2
 8011ad6:	44bc      	add	ip, r7
 8011ad8:	4463      	add	r3, ip
 8011ada:	781b      	ldrb	r3, [r3, #0]
 8011adc:	2bff      	cmp	r3, #255	; 0xff
 8011ade:	d10a      	bne.n	8011af6 <LoRaMacCryptoHandleJoinAccept+0x72>
    {
        encryptionKeyID = NWK_KEY;
 8011ae0:	2397      	movs	r3, #151	; 0x97
 8011ae2:	005b      	lsls	r3, r3, #1
 8011ae4:	18fb      	adds	r3, r7, r3
 8011ae6:	2201      	movs	r2, #1
 8011ae8:	701a      	strb	r2, [r3, #0]
        micComputationOffset = CRYPTO_MIC_COMPUTATION_OFFSET;
 8011aea:	232e      	movs	r3, #46	; 0x2e
 8011aec:	33ff      	adds	r3, #255	; 0xff
 8011aee:	18fb      	adds	r3, r7, r3
 8011af0:	220c      	movs	r2, #12
 8011af2:	701a      	strb	r2, [r3, #0]
 8011af4:	e023      	b.n	8011b3e <LoRaMacCryptoHandleJoinAccept+0xba>
    }
    else
    {
        encryptionKeyID = J_S_ENC_KEY;
 8011af6:	2397      	movs	r3, #151	; 0x97
 8011af8:	005b      	lsls	r3, r3, #1
 8011afa:	18fb      	adds	r3, r7, r3
 8011afc:	2203      	movs	r2, #3
 8011afe:	701a      	strb	r2, [r3, #0]

        // If Join-accept is a reply to a rejoin, the RJcount(0 or 1) replaces DevNonce in the key derivation process.
        if( ( joinReqType == REJOIN_REQ_0 ) || ( joinReqType == REJOIN_REQ_2 ) )
 8011b00:	4bc1      	ldr	r3, [pc, #772]	; (8011e08 <LoRaMacCryptoHandleJoinAccept+0x384>)
 8011b02:	2298      	movs	r2, #152	; 0x98
 8011b04:	0052      	lsls	r2, r2, #1
 8011b06:	4694      	mov	ip, r2
 8011b08:	44bc      	add	ip, r7
 8011b0a:	4463      	add	r3, ip
 8011b0c:	781b      	ldrb	r3, [r3, #0]
 8011b0e:	2b00      	cmp	r3, #0
 8011b10:	d008      	beq.n	8011b24 <LoRaMacCryptoHandleJoinAccept+0xa0>
 8011b12:	4bbd      	ldr	r3, [pc, #756]	; (8011e08 <LoRaMacCryptoHandleJoinAccept+0x384>)
 8011b14:	2298      	movs	r2, #152	; 0x98
 8011b16:	0052      	lsls	r2, r2, #1
 8011b18:	4694      	mov	ip, r2
 8011b1a:	44bc      	add	ip, r7
 8011b1c:	4463      	add	r3, ip
 8011b1e:	781b      	ldrb	r3, [r3, #0]
 8011b20:	2b02      	cmp	r3, #2
 8011b22:	d105      	bne.n	8011b30 <LoRaMacCryptoHandleJoinAccept+0xac>
        {
            devNonceForKeyDerivation = ( uint8_t* ) &CryptoCtx.RJcount0;
 8011b24:	4bba      	ldr	r3, [pc, #744]	; (8011e10 <LoRaMacCryptoHandleJoinAccept+0x38c>)
 8011b26:	2294      	movs	r2, #148	; 0x94
 8011b28:	0052      	lsls	r2, r2, #1
 8011b2a:	18ba      	adds	r2, r7, r2
 8011b2c:	6013      	str	r3, [r2, #0]
 8011b2e:	e006      	b.n	8011b3e <LoRaMacCryptoHandleJoinAccept+0xba>
        }
        else
        {
            devNonceForKeyDerivation = ( uint8_t* ) &CryptoCtx.NvmCtx->RJcount1;
 8011b30:	4bb6      	ldr	r3, [pc, #728]	; (8011e0c <LoRaMacCryptoHandleJoinAccept+0x388>)
 8011b32:	689b      	ldr	r3, [r3, #8]
 8011b34:	3328      	adds	r3, #40	; 0x28
 8011b36:	2294      	movs	r2, #148	; 0x94
 8011b38:	0052      	lsls	r2, r2, #1
 8011b3a:	18ba      	adds	r2, r7, r2
 8011b3c:	6013      	str	r3, [r2, #0]
        }
    }

    // Decrypt header, skip MHDR
    uint8_t procBuffer[CRYPTO_MAXMESSAGE_SIZE + CRYPTO_MIC_COMPUTATION_OFFSET];
    memset1( procBuffer, 0, ( macMsg->BufSize + micComputationOffset ) );
 8011b3e:	687b      	ldr	r3, [r7, #4]
 8011b40:	791b      	ldrb	r3, [r3, #4]
 8011b42:	b29a      	uxth	r2, r3
 8011b44:	242e      	movs	r4, #46	; 0x2e
 8011b46:	34ff      	adds	r4, #255	; 0xff
 8011b48:	193b      	adds	r3, r7, r4
 8011b4a:	781b      	ldrb	r3, [r3, #0]
 8011b4c:	b29b      	uxth	r3, r3
 8011b4e:	18d3      	adds	r3, r2, r3
 8011b50:	b29a      	uxth	r2, r3
 8011b52:	2514      	movs	r5, #20
 8011b54:	197b      	adds	r3, r7, r5
 8011b56:	2100      	movs	r1, #0
 8011b58:	0018      	movs	r0, r3
 8011b5a:	f003 ff85 	bl	8015a68 <memset1>

    if( SecureElementAesEncrypt( macMsg->Buffer + LORAMAC_MHDR_FIELD_SIZE, ( macMsg->BufSize - LORAMAC_MHDR_FIELD_SIZE ), encryptionKeyID, ( procBuffer + micComputationOffset ) ) != SECURE_ELEMENT_SUCCESS )
 8011b5e:	687b      	ldr	r3, [r7, #4]
 8011b60:	681b      	ldr	r3, [r3, #0]
 8011b62:	1c58      	adds	r0, r3, #1
 8011b64:	687b      	ldr	r3, [r7, #4]
 8011b66:	791b      	ldrb	r3, [r3, #4]
 8011b68:	b29b      	uxth	r3, r3
 8011b6a:	3b01      	subs	r3, #1
 8011b6c:	b299      	uxth	r1, r3
 8011b6e:	193b      	adds	r3, r7, r4
 8011b70:	781b      	ldrb	r3, [r3, #0]
 8011b72:	197a      	adds	r2, r7, r5
 8011b74:	18d4      	adds	r4, r2, r3
 8011b76:	2397      	movs	r3, #151	; 0x97
 8011b78:	005b      	lsls	r3, r3, #1
 8011b7a:	18fb      	adds	r3, r7, r3
 8011b7c:	781a      	ldrb	r2, [r3, #0]
 8011b7e:	0023      	movs	r3, r4
 8011b80:	f7f8 fbbe 	bl	800a300 <SecureElementAesEncrypt>
 8011b84:	1e03      	subs	r3, r0, #0
 8011b86:	d001      	beq.n	8011b8c <LoRaMacCryptoHandleJoinAccept+0x108>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8011b88:	230c      	movs	r3, #12
 8011b8a:	e1ef      	b.n	8011f6c <LoRaMacCryptoHandleJoinAccept+0x4e8>
    }
    // Copy the result to an offset location to keep space for additional information which have to be added in case of 1.1 and later
    memcpy1( macMsg->Buffer + LORAMAC_MHDR_FIELD_SIZE, ( procBuffer + micComputationOffset ), ( macMsg->BufSize - LORAMAC_MHDR_FIELD_SIZE ) );
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	681b      	ldr	r3, [r3, #0]
 8011b90:	1c58      	adds	r0, r3, #1
 8011b92:	232e      	movs	r3, #46	; 0x2e
 8011b94:	33ff      	adds	r3, #255	; 0xff
 8011b96:	18fb      	adds	r3, r7, r3
 8011b98:	781b      	ldrb	r3, [r3, #0]
 8011b9a:	2214      	movs	r2, #20
 8011b9c:	18ba      	adds	r2, r7, r2
 8011b9e:	18d1      	adds	r1, r2, r3
 8011ba0:	687b      	ldr	r3, [r7, #4]
 8011ba2:	791b      	ldrb	r3, [r3, #4]
 8011ba4:	b29b      	uxth	r3, r3
 8011ba6:	3b01      	subs	r3, #1
 8011ba8:	b29b      	uxth	r3, r3
 8011baa:	001a      	movs	r2, r3
 8011bac:	f003 ff20 	bl	80159f0 <memcpy1>

    // Parse the message
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	0018      	movs	r0, r3
 8011bb4:	f000 fd8e 	bl	80126d4 <LoRaMacParserJoinAccept>
 8011bb8:	1e03      	subs	r3, r0, #0
 8011bba:	d001      	beq.n	8011bc0 <LoRaMacCryptoHandleJoinAccept+0x13c>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8011bbc:	230d      	movs	r3, #13
 8011bbe:	e1d5      	b.n	8011f6c <LoRaMacCryptoHandleJoinAccept+0x4e8>
    }

    // Is it a LoRaWAN 1.1.0 or later ?
    if( macMsg->DLSettings.Bits.OptNeg == 1 )
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	7c1b      	ldrb	r3, [r3, #16]
 8011bc4:	227f      	movs	r2, #127	; 0x7f
 8011bc6:	4393      	bics	r3, r2
 8011bc8:	b2db      	uxtb	r3, r3
 8011bca:	2b00      	cmp	r3, #0
 8011bcc:	d008      	beq.n	8011be0 <LoRaMacCryptoHandleJoinAccept+0x15c>
    {
        CryptoCtx.LrWanVersion.Fields.Minor = 1;
 8011bce:	4b8f      	ldr	r3, [pc, #572]	; (8011e0c <LoRaMacCryptoHandleJoinAccept+0x388>)
 8011bd0:	2201      	movs	r2, #1
 8011bd2:	709a      	strb	r2, [r3, #2]
        micComputationKeyID = J_S_INT_KEY;
 8011bd4:	2330      	movs	r3, #48	; 0x30
 8011bd6:	33ff      	adds	r3, #255	; 0xff
 8011bd8:	18fb      	adds	r3, r7, r3
 8011bda:	2202      	movs	r2, #2
 8011bdc:	701a      	strb	r2, [r3, #0]
 8011bde:	e007      	b.n	8011bf0 <LoRaMacCryptoHandleJoinAccept+0x16c>
    }
    else
    {
        CryptoCtx.LrWanVersion.Fields.Minor = 0;
 8011be0:	4b8a      	ldr	r3, [pc, #552]	; (8011e0c <LoRaMacCryptoHandleJoinAccept+0x388>)
 8011be2:	2200      	movs	r2, #0
 8011be4:	709a      	strb	r2, [r3, #2]
        micComputationKeyID = NWK_KEY;
 8011be6:	2330      	movs	r3, #48	; 0x30
 8011be8:	33ff      	adds	r3, #255	; 0xff
 8011bea:	18fb      	adds	r3, r7, r3
 8011bec:	2201      	movs	r2, #1
 8011bee:	701a      	strb	r2, [r3, #0]
    }

    // Verify mic
    if( CryptoCtx.LrWanVersion.Fields.Minor == 0 )
 8011bf0:	4b86      	ldr	r3, [pc, #536]	; (8011e0c <LoRaMacCryptoHandleJoinAccept+0x388>)
 8011bf2:	789b      	ldrb	r3, [r3, #2]
 8011bf4:	2b00      	cmp	r3, #0
 8011bf6:	d11e      	bne.n	8011c36 <LoRaMacCryptoHandleJoinAccept+0x1b2>
    {
        // For legacy mode :
        //   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList | CFListType)
        retval = VerifyCmac( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, macMsg->MIC );
 8011bf8:	687b      	ldr	r3, [r7, #4]
 8011bfa:	6818      	ldr	r0, [r3, #0]
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	791b      	ldrb	r3, [r3, #4]
 8011c00:	b29b      	uxth	r3, r3
 8011c02:	3b04      	subs	r3, #4
 8011c04:	b299      	uxth	r1, r3
 8011c06:	687b      	ldr	r3, [r7, #4]
 8011c08:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8011c0a:	2628      	movs	r6, #40	; 0x28
 8011c0c:	36ff      	adds	r6, #255	; 0xff
 8011c0e:	19bc      	adds	r4, r7, r6
 8011c10:	2330      	movs	r3, #48	; 0x30
 8011c12:	33ff      	adds	r3, #255	; 0xff
 8011c14:	18fb      	adds	r3, r7, r3
 8011c16:	781a      	ldrb	r2, [r3, #0]
 8011c18:	002b      	movs	r3, r5
 8011c1a:	f7ff f8d1 	bl	8010dc0 <VerifyCmac>
 8011c1e:	0003      	movs	r3, r0
 8011c20:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8011c22:	19bb      	adds	r3, r7, r6
 8011c24:	781b      	ldrb	r3, [r3, #0]
 8011c26:	2b00      	cmp	r3, #0
 8011c28:	d100      	bne.n	8011c2c <LoRaMacCryptoHandleJoinAccept+0x1a8>
 8011c2a:	e0b9      	b.n	8011da0 <LoRaMacCryptoHandleJoinAccept+0x31c>
        {
            return retval;
 8011c2c:	2328      	movs	r3, #40	; 0x28
 8011c2e:	33ff      	adds	r3, #255	; 0xff
 8011c30:	18fb      	adds	r3, r7, r3
 8011c32:	781b      	ldrb	r3, [r3, #0]
 8011c34:	e19a      	b.n	8011f6c <LoRaMacCryptoHandleJoinAccept+0x4e8>
    {
        // For 1.1 and later:
        //   cmac = aes128_cmac(JSIntKey, JoinReqType | JoinEUI | DevNonce | MHDR | JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList | CFListType)

        // Prepare the msg for integrity check (adding JoinReqType, JoinEUI and DevNonce)
        uint16_t bufItr = 0;
 8011c36:	2092      	movs	r0, #146	; 0x92
 8011c38:	0040      	lsls	r0, r0, #1
 8011c3a:	183b      	adds	r3, r7, r0
 8011c3c:	2200      	movs	r2, #0
 8011c3e:	801a      	strh	r2, [r3, #0]
        procBuffer[bufItr++] = ( uint8_t ) joinReqType;
 8011c40:	183b      	adds	r3, r7, r0
 8011c42:	881b      	ldrh	r3, [r3, #0]
 8011c44:	183a      	adds	r2, r7, r0
 8011c46:	1c59      	adds	r1, r3, #1
 8011c48:	8011      	strh	r1, [r2, #0]
 8011c4a:	0019      	movs	r1, r3
 8011c4c:	4b71      	ldr	r3, [pc, #452]	; (8011e14 <LoRaMacCryptoHandleJoinAccept+0x390>)
 8011c4e:	2298      	movs	r2, #152	; 0x98
 8011c50:	0052      	lsls	r2, r2, #1
 8011c52:	4694      	mov	ip, r2
 8011c54:	44bc      	add	ip, r7
 8011c56:	4463      	add	r3, ip
 8011c58:	4a6b      	ldr	r2, [pc, #428]	; (8011e08 <LoRaMacCryptoHandleJoinAccept+0x384>)
 8011c5a:	2498      	movs	r4, #152	; 0x98
 8011c5c:	0064      	lsls	r4, r4, #1
 8011c5e:	46a4      	mov	ip, r4
 8011c60:	44bc      	add	ip, r7
 8011c62:	4462      	add	r2, ip
 8011c64:	7812      	ldrb	r2, [r2, #0]
 8011c66:	545a      	strb	r2, [r3, r1]

        memcpyr( &procBuffer[bufItr], joinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 8011c68:	0004      	movs	r4, r0
 8011c6a:	183b      	adds	r3, r7, r0
 8011c6c:	881b      	ldrh	r3, [r3, #0]
 8011c6e:	2614      	movs	r6, #20
 8011c70:	19ba      	adds	r2, r7, r6
 8011c72:	18d3      	adds	r3, r2, r3
 8011c74:	68b9      	ldr	r1, [r7, #8]
 8011c76:	2208      	movs	r2, #8
 8011c78:	0018      	movs	r0, r3
 8011c7a:	f003 fed4 	bl	8015a26 <memcpyr>
        bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 8011c7e:	0020      	movs	r0, r4
 8011c80:	183b      	adds	r3, r7, r0
 8011c82:	183a      	adds	r2, r7, r0
 8011c84:	8812      	ldrh	r2, [r2, #0]
 8011c86:	3208      	adds	r2, #8
 8011c88:	801a      	strh	r2, [r3, #0]

        procBuffer[bufItr++] = CryptoCtx.NvmCtx->DevNonce & 0xFF;
 8011c8a:	4b60      	ldr	r3, [pc, #384]	; (8011e0c <LoRaMacCryptoHandleJoinAccept+0x388>)
 8011c8c:	689b      	ldr	r3, [r3, #8]
 8011c8e:	8819      	ldrh	r1, [r3, #0]
 8011c90:	183b      	adds	r3, r7, r0
 8011c92:	881b      	ldrh	r3, [r3, #0]
 8011c94:	0004      	movs	r4, r0
 8011c96:	183a      	adds	r2, r7, r0
 8011c98:	1c58      	adds	r0, r3, #1
 8011c9a:	8010      	strh	r0, [r2, #0]
 8011c9c:	001a      	movs	r2, r3
 8011c9e:	b2c9      	uxtb	r1, r1
 8011ca0:	4b5c      	ldr	r3, [pc, #368]	; (8011e14 <LoRaMacCryptoHandleJoinAccept+0x390>)
 8011ca2:	2098      	movs	r0, #152	; 0x98
 8011ca4:	0040      	lsls	r0, r0, #1
 8011ca6:	4684      	mov	ip, r0
 8011ca8:	44bc      	add	ip, r7
 8011caa:	4463      	add	r3, ip
 8011cac:	5499      	strb	r1, [r3, r2]
        procBuffer[bufItr++] = ( CryptoCtx.NvmCtx->DevNonce >> 8 ) & 0xFF;
 8011cae:	4b57      	ldr	r3, [pc, #348]	; (8011e0c <LoRaMacCryptoHandleJoinAccept+0x388>)
 8011cb0:	689b      	ldr	r3, [r3, #8]
 8011cb2:	881b      	ldrh	r3, [r3, #0]
 8011cb4:	0a1b      	lsrs	r3, r3, #8
 8011cb6:	b299      	uxth	r1, r3
 8011cb8:	193b      	adds	r3, r7, r4
 8011cba:	881b      	ldrh	r3, [r3, #0]
 8011cbc:	193a      	adds	r2, r7, r4
 8011cbe:	1c58      	adds	r0, r3, #1
 8011cc0:	8010      	strh	r0, [r2, #0]
 8011cc2:	001a      	movs	r2, r3
 8011cc4:	b2c9      	uxtb	r1, r1
 8011cc6:	4b53      	ldr	r3, [pc, #332]	; (8011e14 <LoRaMacCryptoHandleJoinAccept+0x390>)
 8011cc8:	2098      	movs	r0, #152	; 0x98
 8011cca:	0040      	lsls	r0, r0, #1
 8011ccc:	4684      	mov	ip, r0
 8011cce:	44bc      	add	ip, r7
 8011cd0:	4463      	add	r3, ip
 8011cd2:	5499      	strb	r1, [r3, r2]

        procBuffer[bufItr++] = macMsg->MHDR.Value;
 8011cd4:	193b      	adds	r3, r7, r4
 8011cd6:	881b      	ldrh	r3, [r3, #0]
 8011cd8:	193a      	adds	r2, r7, r4
 8011cda:	1c59      	adds	r1, r3, #1
 8011cdc:	8011      	strh	r1, [r2, #0]
 8011cde:	001a      	movs	r2, r3
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	7959      	ldrb	r1, [r3, #5]
 8011ce4:	4b4b      	ldr	r3, [pc, #300]	; (8011e14 <LoRaMacCryptoHandleJoinAccept+0x390>)
 8011ce6:	2098      	movs	r0, #152	; 0x98
 8011ce8:	0040      	lsls	r0, r0, #1
 8011cea:	4684      	mov	ip, r0
 8011cec:	44bc      	add	ip, r7
 8011cee:	4463      	add	r3, ip
 8011cf0:	5499      	strb	r1, [r3, r2]

        retval = VerifyCmac( procBuffer, ( macMsg->BufSize + micComputationOffset - LORAMAC_MHDR_FIELD_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, macMsg->MIC );
 8011cf2:	687b      	ldr	r3, [r7, #4]
 8011cf4:	791b      	ldrb	r3, [r3, #4]
 8011cf6:	b29a      	uxth	r2, r3
 8011cf8:	232e      	movs	r3, #46	; 0x2e
 8011cfa:	33ff      	adds	r3, #255	; 0xff
 8011cfc:	18fb      	adds	r3, r7, r3
 8011cfe:	781b      	ldrb	r3, [r3, #0]
 8011d00:	b29b      	uxth	r3, r3
 8011d02:	18d3      	adds	r3, r2, r3
 8011d04:	b29b      	uxth	r3, r3
 8011d06:	3b05      	subs	r3, #5
 8011d08:	b299      	uxth	r1, r3
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8011d0e:	2328      	movs	r3, #40	; 0x28
 8011d10:	33ff      	adds	r3, #255	; 0xff
 8011d12:	18fc      	adds	r4, r7, r3
 8011d14:	2230      	movs	r2, #48	; 0x30
 8011d16:	32ff      	adds	r2, #255	; 0xff
 8011d18:	18bb      	adds	r3, r7, r2
 8011d1a:	781a      	ldrb	r2, [r3, #0]
 8011d1c:	19b8      	adds	r0, r7, r6
 8011d1e:	002b      	movs	r3, r5
 8011d20:	f7ff f84e 	bl	8010dc0 <VerifyCmac>
 8011d24:	0003      	movs	r3, r0
 8011d26:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8011d28:	2328      	movs	r3, #40	; 0x28
 8011d2a:	33ff      	adds	r3, #255	; 0xff
 8011d2c:	18fb      	adds	r3, r7, r3
 8011d2e:	781b      	ldrb	r3, [r3, #0]
 8011d30:	2b00      	cmp	r3, #0
 8011d32:	d004      	beq.n	8011d3e <LoRaMacCryptoHandleJoinAccept+0x2ba>
        {
            return retval;
 8011d34:	2328      	movs	r3, #40	; 0x28
 8011d36:	33ff      	adds	r3, #255	; 0xff
 8011d38:	18fb      	adds	r3, r7, r3
 8011d3a:	781b      	ldrb	r3, [r3, #0]
 8011d3c:	e116      	b.n	8011f6c <LoRaMacCryptoHandleJoinAccept+0x4e8>
        }

        // Check if the JoinNonce is greater as the previous one
        uint32_t currentJoinNonce = 0;
 8011d3e:	2300      	movs	r3, #0
 8011d40:	2290      	movs	r2, #144	; 0x90
 8011d42:	0052      	lsls	r2, r2, #1
 8011d44:	18b9      	adds	r1, r7, r2
 8011d46:	600b      	str	r3, [r1, #0]
        currentJoinNonce = ( uint32_t ) macMsg->JoinNonce[0];
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	799b      	ldrb	r3, [r3, #6]
 8011d4c:	18b9      	adds	r1, r7, r2
 8011d4e:	600b      	str	r3, [r1, #0]
        currentJoinNonce |= ( ( uint32_t ) macMsg->JoinNonce[1] << 8 );
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	79db      	ldrb	r3, [r3, #7]
 8011d54:	021b      	lsls	r3, r3, #8
 8011d56:	0011      	movs	r1, r2
 8011d58:	18ba      	adds	r2, r7, r2
 8011d5a:	6812      	ldr	r2, [r2, #0]
 8011d5c:	4313      	orrs	r3, r2
 8011d5e:	000a      	movs	r2, r1
 8011d60:	18b9      	adds	r1, r7, r2
 8011d62:	600b      	str	r3, [r1, #0]
        currentJoinNonce |= ( ( uint32_t ) macMsg->JoinNonce[2] << 16 );
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	7a1b      	ldrb	r3, [r3, #8]
 8011d68:	041b      	lsls	r3, r3, #16
 8011d6a:	0011      	movs	r1, r2
 8011d6c:	18ba      	adds	r2, r7, r2
 8011d6e:	6812      	ldr	r2, [r2, #0]
 8011d70:	4313      	orrs	r3, r2
 8011d72:	000a      	movs	r2, r1
 8011d74:	18b9      	adds	r1, r7, r2
 8011d76:	600b      	str	r3, [r1, #0]

        if( currentJoinNonce > CryptoCtx.NvmCtx->JoinNonce )
 8011d78:	4b24      	ldr	r3, [pc, #144]	; (8011e0c <LoRaMacCryptoHandleJoinAccept+0x388>)
 8011d7a:	689b      	ldr	r3, [r3, #8]
 8011d7c:	685b      	ldr	r3, [r3, #4]
 8011d7e:	18ba      	adds	r2, r7, r2
 8011d80:	6812      	ldr	r2, [r2, #0]
 8011d82:	429a      	cmp	r2, r3
 8011d84:	d90a      	bls.n	8011d9c <LoRaMacCryptoHandleJoinAccept+0x318>
        {
            CryptoCtx.NvmCtx->JoinNonce = currentJoinNonce;
 8011d86:	4b21      	ldr	r3, [pc, #132]	; (8011e0c <LoRaMacCryptoHandleJoinAccept+0x388>)
 8011d88:	689b      	ldr	r3, [r3, #8]
 8011d8a:	2290      	movs	r2, #144	; 0x90
 8011d8c:	0052      	lsls	r2, r2, #1
 8011d8e:	18ba      	adds	r2, r7, r2
 8011d90:	6812      	ldr	r2, [r2, #0]
 8011d92:	605a      	str	r2, [r3, #4]
            CryptoCtx.EventCryptoNvmCtxChanged( );
 8011d94:	4b1d      	ldr	r3, [pc, #116]	; (8011e0c <LoRaMacCryptoHandleJoinAccept+0x388>)
 8011d96:	68db      	ldr	r3, [r3, #12]
 8011d98:	4798      	blx	r3
 8011d9a:	e001      	b.n	8011da0 <LoRaMacCryptoHandleJoinAccept+0x31c>
        }
        else
        {
            return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 8011d9c:	2303      	movs	r3, #3
 8011d9e:	e0e5      	b.n	8011f6c <LoRaMacCryptoHandleJoinAccept+0x4e8>
        }
    }

    // Derive session keys
    if( CryptoCtx.LrWanVersion.Fields.Minor == 1 )
 8011da0:	4b1a      	ldr	r3, [pc, #104]	; (8011e0c <LoRaMacCryptoHandleJoinAccept+0x388>)
 8011da2:	789b      	ldrb	r3, [r3, #2]
 8011da4:	2b01      	cmp	r3, #1
 8011da6:	d167      	bne.n	8011e78 <LoRaMacCryptoHandleJoinAccept+0x3f4>
    {
        retval = DeriveSessionKey11x( F_NWK_S_INT_KEY, macMsg->JoinNonce, joinEUI, devNonceForKeyDerivation );
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	1d99      	adds	r1, r3, #6
 8011dac:	2528      	movs	r5, #40	; 0x28
 8011dae:	35ff      	adds	r5, #255	; 0xff
 8011db0:	197c      	adds	r4, r7, r5
 8011db2:	2394      	movs	r3, #148	; 0x94
 8011db4:	005b      	lsls	r3, r3, #1
 8011db6:	18fb      	adds	r3, r7, r3
 8011db8:	681b      	ldr	r3, [r3, #0]
 8011dba:	68ba      	ldr	r2, [r7, #8]
 8011dbc:	2004      	movs	r0, #4
 8011dbe:	f7ff fbc3 	bl	8011548 <DeriveSessionKey11x>
 8011dc2:	0003      	movs	r3, r0
 8011dc4:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8011dc6:	197b      	adds	r3, r7, r5
 8011dc8:	781b      	ldrb	r3, [r3, #0]
 8011dca:	2b00      	cmp	r3, #0
 8011dcc:	d004      	beq.n	8011dd8 <LoRaMacCryptoHandleJoinAccept+0x354>
        {
            return retval;
 8011dce:	2328      	movs	r3, #40	; 0x28
 8011dd0:	33ff      	adds	r3, #255	; 0xff
 8011dd2:	18fb      	adds	r3, r7, r3
 8011dd4:	781b      	ldrb	r3, [r3, #0]
 8011dd6:	e0c9      	b.n	8011f6c <LoRaMacCryptoHandleJoinAccept+0x4e8>
        }

        retval = DeriveSessionKey11x( S_NWK_S_INT_KEY, macMsg->JoinNonce, joinEUI, devNonceForKeyDerivation );
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	1d99      	adds	r1, r3, #6
 8011ddc:	2528      	movs	r5, #40	; 0x28
 8011dde:	35ff      	adds	r5, #255	; 0xff
 8011de0:	197c      	adds	r4, r7, r5
 8011de2:	2394      	movs	r3, #148	; 0x94
 8011de4:	005b      	lsls	r3, r3, #1
 8011de6:	18fb      	adds	r3, r7, r3
 8011de8:	681b      	ldr	r3, [r3, #0]
 8011dea:	68ba      	ldr	r2, [r7, #8]
 8011dec:	2005      	movs	r0, #5
 8011dee:	f7ff fbab 	bl	8011548 <DeriveSessionKey11x>
 8011df2:	0003      	movs	r3, r0
 8011df4:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8011df6:	197b      	adds	r3, r7, r5
 8011df8:	781b      	ldrb	r3, [r3, #0]
 8011dfa:	2b00      	cmp	r3, #0
 8011dfc:	d00c      	beq.n	8011e18 <LoRaMacCryptoHandleJoinAccept+0x394>
        {
            return retval;
 8011dfe:	2328      	movs	r3, #40	; 0x28
 8011e00:	33ff      	adds	r3, #255	; 0xff
 8011e02:	18fb      	adds	r3, r7, r3
 8011e04:	781b      	ldrb	r3, [r3, #0]
 8011e06:	e0b1      	b.n	8011f6c <LoRaMacCryptoHandleJoinAccept+0x4e8>
 8011e08:	fffffedf 	.word	0xfffffedf
 8011e0c:	20000ed8 	.word	0x20000ed8
 8011e10:	20000edc 	.word	0x20000edc
 8011e14:	fffffee4 	.word	0xfffffee4
        }

        retval = DeriveSessionKey11x( NWK_S_ENC_KEY, macMsg->JoinNonce, joinEUI, devNonceForKeyDerivation );
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	1d99      	adds	r1, r3, #6
 8011e1c:	2528      	movs	r5, #40	; 0x28
 8011e1e:	35ff      	adds	r5, #255	; 0xff
 8011e20:	197c      	adds	r4, r7, r5
 8011e22:	2394      	movs	r3, #148	; 0x94
 8011e24:	005b      	lsls	r3, r3, #1
 8011e26:	18fb      	adds	r3, r7, r3
 8011e28:	681b      	ldr	r3, [r3, #0]
 8011e2a:	68ba      	ldr	r2, [r7, #8]
 8011e2c:	2006      	movs	r0, #6
 8011e2e:	f7ff fb8b 	bl	8011548 <DeriveSessionKey11x>
 8011e32:	0003      	movs	r3, r0
 8011e34:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8011e36:	197b      	adds	r3, r7, r5
 8011e38:	781b      	ldrb	r3, [r3, #0]
 8011e3a:	2b00      	cmp	r3, #0
 8011e3c:	d004      	beq.n	8011e48 <LoRaMacCryptoHandleJoinAccept+0x3c4>
        {
            return retval;
 8011e3e:	2328      	movs	r3, #40	; 0x28
 8011e40:	33ff      	adds	r3, #255	; 0xff
 8011e42:	18fb      	adds	r3, r7, r3
 8011e44:	781b      	ldrb	r3, [r3, #0]
 8011e46:	e091      	b.n	8011f6c <LoRaMacCryptoHandleJoinAccept+0x4e8>
        }

        retval = DeriveSessionKey11x( APP_S_KEY, macMsg->JoinNonce, joinEUI, devNonceForKeyDerivation );
 8011e48:	687b      	ldr	r3, [r7, #4]
 8011e4a:	1d99      	adds	r1, r3, #6
 8011e4c:	2528      	movs	r5, #40	; 0x28
 8011e4e:	35ff      	adds	r5, #255	; 0xff
 8011e50:	197c      	adds	r4, r7, r5
 8011e52:	2394      	movs	r3, #148	; 0x94
 8011e54:	005b      	lsls	r3, r3, #1
 8011e56:	18fb      	adds	r3, r7, r3
 8011e58:	681b      	ldr	r3, [r3, #0]
 8011e5a:	68ba      	ldr	r2, [r7, #8]
 8011e5c:	2007      	movs	r0, #7
 8011e5e:	f7ff fb73 	bl	8011548 <DeriveSessionKey11x>
 8011e62:	0003      	movs	r3, r0
 8011e64:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8011e66:	197b      	adds	r3, r7, r5
 8011e68:	781b      	ldrb	r3, [r3, #0]
 8011e6a:	2b00      	cmp	r3, #0
 8011e6c:	d064      	beq.n	8011f38 <LoRaMacCryptoHandleJoinAccept+0x4b4>
        {
            return retval;
 8011e6e:	2328      	movs	r3, #40	; 0x28
 8011e70:	33ff      	adds	r3, #255	; 0xff
 8011e72:	18fb      	adds	r3, r7, r3
 8011e74:	781b      	ldrb	r3, [r3, #0]
 8011e76:	e079      	b.n	8011f6c <LoRaMacCryptoHandleJoinAccept+0x4e8>
    }
    else
    {
        // prior LoRaWAN 1.1.0

        retval = DeriveSessionKey10x( APP_S_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* ) &CryptoCtx.NvmCtx->DevNonce );
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	1d99      	adds	r1, r3, #6
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	3309      	adds	r3, #9
 8011e80:	001a      	movs	r2, r3
 8011e82:	4b3c      	ldr	r3, [pc, #240]	; (8011f74 <LoRaMacCryptoHandleJoinAccept+0x4f0>)
 8011e84:	689b      	ldr	r3, [r3, #8]
 8011e86:	2528      	movs	r5, #40	; 0x28
 8011e88:	35ff      	adds	r5, #255	; 0xff
 8011e8a:	197c      	adds	r4, r7, r5
 8011e8c:	2007      	movs	r0, #7
 8011e8e:	f7ff fafd 	bl	801148c <DeriveSessionKey10x>
 8011e92:	0003      	movs	r3, r0
 8011e94:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8011e96:	197b      	adds	r3, r7, r5
 8011e98:	781b      	ldrb	r3, [r3, #0]
 8011e9a:	2b00      	cmp	r3, #0
 8011e9c:	d004      	beq.n	8011ea8 <LoRaMacCryptoHandleJoinAccept+0x424>
        {
            return retval;
 8011e9e:	2328      	movs	r3, #40	; 0x28
 8011ea0:	33ff      	adds	r3, #255	; 0xff
 8011ea2:	18fb      	adds	r3, r7, r3
 8011ea4:	781b      	ldrb	r3, [r3, #0]
 8011ea6:	e061      	b.n	8011f6c <LoRaMacCryptoHandleJoinAccept+0x4e8>
        }

        retval = DeriveSessionKey10x( NWK_S_ENC_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* ) &CryptoCtx.NvmCtx->DevNonce );
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	1d99      	adds	r1, r3, #6
 8011eac:	687b      	ldr	r3, [r7, #4]
 8011eae:	3309      	adds	r3, #9
 8011eb0:	001a      	movs	r2, r3
 8011eb2:	4b30      	ldr	r3, [pc, #192]	; (8011f74 <LoRaMacCryptoHandleJoinAccept+0x4f0>)
 8011eb4:	689b      	ldr	r3, [r3, #8]
 8011eb6:	2528      	movs	r5, #40	; 0x28
 8011eb8:	35ff      	adds	r5, #255	; 0xff
 8011eba:	197c      	adds	r4, r7, r5
 8011ebc:	2006      	movs	r0, #6
 8011ebe:	f7ff fae5 	bl	801148c <DeriveSessionKey10x>
 8011ec2:	0003      	movs	r3, r0
 8011ec4:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8011ec6:	197b      	adds	r3, r7, r5
 8011ec8:	781b      	ldrb	r3, [r3, #0]
 8011eca:	2b00      	cmp	r3, #0
 8011ecc:	d004      	beq.n	8011ed8 <LoRaMacCryptoHandleJoinAccept+0x454>
        {
            return retval;
 8011ece:	2328      	movs	r3, #40	; 0x28
 8011ed0:	33ff      	adds	r3, #255	; 0xff
 8011ed2:	18fb      	adds	r3, r7, r3
 8011ed4:	781b      	ldrb	r3, [r3, #0]
 8011ed6:	e049      	b.n	8011f6c <LoRaMacCryptoHandleJoinAccept+0x4e8>
        }

        retval = DeriveSessionKey10x( F_NWK_S_INT_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* ) &CryptoCtx.NvmCtx->DevNonce );
 8011ed8:	687b      	ldr	r3, [r7, #4]
 8011eda:	1d99      	adds	r1, r3, #6
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	3309      	adds	r3, #9
 8011ee0:	001a      	movs	r2, r3
 8011ee2:	4b24      	ldr	r3, [pc, #144]	; (8011f74 <LoRaMacCryptoHandleJoinAccept+0x4f0>)
 8011ee4:	689b      	ldr	r3, [r3, #8]
 8011ee6:	2528      	movs	r5, #40	; 0x28
 8011ee8:	35ff      	adds	r5, #255	; 0xff
 8011eea:	197c      	adds	r4, r7, r5
 8011eec:	2004      	movs	r0, #4
 8011eee:	f7ff facd 	bl	801148c <DeriveSessionKey10x>
 8011ef2:	0003      	movs	r3, r0
 8011ef4:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8011ef6:	197b      	adds	r3, r7, r5
 8011ef8:	781b      	ldrb	r3, [r3, #0]
 8011efa:	2b00      	cmp	r3, #0
 8011efc:	d004      	beq.n	8011f08 <LoRaMacCryptoHandleJoinAccept+0x484>
        {
            return retval;
 8011efe:	2328      	movs	r3, #40	; 0x28
 8011f00:	33ff      	adds	r3, #255	; 0xff
 8011f02:	18fb      	adds	r3, r7, r3
 8011f04:	781b      	ldrb	r3, [r3, #0]
 8011f06:	e031      	b.n	8011f6c <LoRaMacCryptoHandleJoinAccept+0x4e8>
        }

        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* ) &CryptoCtx.NvmCtx->DevNonce );
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	1d99      	adds	r1, r3, #6
 8011f0c:	687b      	ldr	r3, [r7, #4]
 8011f0e:	3309      	adds	r3, #9
 8011f10:	001a      	movs	r2, r3
 8011f12:	4b18      	ldr	r3, [pc, #96]	; (8011f74 <LoRaMacCryptoHandleJoinAccept+0x4f0>)
 8011f14:	689b      	ldr	r3, [r3, #8]
 8011f16:	2528      	movs	r5, #40	; 0x28
 8011f18:	35ff      	adds	r5, #255	; 0xff
 8011f1a:	197c      	adds	r4, r7, r5
 8011f1c:	2005      	movs	r0, #5
 8011f1e:	f7ff fab5 	bl	801148c <DeriveSessionKey10x>
 8011f22:	0003      	movs	r3, r0
 8011f24:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8011f26:	197b      	adds	r3, r7, r5
 8011f28:	781b      	ldrb	r3, [r3, #0]
 8011f2a:	2b00      	cmp	r3, #0
 8011f2c:	d004      	beq.n	8011f38 <LoRaMacCryptoHandleJoinAccept+0x4b4>
        {
            return retval;
 8011f2e:	2328      	movs	r3, #40	; 0x28
 8011f30:	33ff      	adds	r3, #255	; 0xff
 8011f32:	18fb      	adds	r3, r7, r3
 8011f34:	781b      	ldrb	r3, [r3, #0]
 8011f36:	e019      	b.n	8011f6c <LoRaMacCryptoHandleJoinAccept+0x4e8>
        }
    }

    // Join-Accept is successfully processed, reset frame counters
    CryptoCtx.RJcount0 = 0;
 8011f38:	4b0e      	ldr	r3, [pc, #56]	; (8011f74 <LoRaMacCryptoHandleJoinAccept+0x4f0>)
 8011f3a:	2200      	movs	r2, #0
 8011f3c:	809a      	strh	r2, [r3, #4]
    CryptoCtx.NvmCtx->FCntUp = 0;
 8011f3e:	4b0d      	ldr	r3, [pc, #52]	; (8011f74 <LoRaMacCryptoHandleJoinAccept+0x4f0>)
 8011f40:	689b      	ldr	r3, [r3, #8]
 8011f42:	2200      	movs	r2, #0
 8011f44:	609a      	str	r2, [r3, #8]
    CryptoCtx.NvmCtx->FCntDown = FCNT_DOWN_INITAL_VALUE;
 8011f46:	4b0b      	ldr	r3, [pc, #44]	; (8011f74 <LoRaMacCryptoHandleJoinAccept+0x4f0>)
 8011f48:	689b      	ldr	r3, [r3, #8]
 8011f4a:	2201      	movs	r2, #1
 8011f4c:	4252      	negs	r2, r2
 8011f4e:	615a      	str	r2, [r3, #20]
    CryptoCtx.NvmCtx->NFCntDown = FCNT_DOWN_INITAL_VALUE;
 8011f50:	4b08      	ldr	r3, [pc, #32]	; (8011f74 <LoRaMacCryptoHandleJoinAccept+0x4f0>)
 8011f52:	689b      	ldr	r3, [r3, #8]
 8011f54:	2201      	movs	r2, #1
 8011f56:	4252      	negs	r2, r2
 8011f58:	60da      	str	r2, [r3, #12]
    CryptoCtx.NvmCtx->AFCntDown = FCNT_DOWN_INITAL_VALUE;
 8011f5a:	4b06      	ldr	r3, [pc, #24]	; (8011f74 <LoRaMacCryptoHandleJoinAccept+0x4f0>)
 8011f5c:	689b      	ldr	r3, [r3, #8]
 8011f5e:	2201      	movs	r2, #1
 8011f60:	4252      	negs	r2, r2
 8011f62:	611a      	str	r2, [r3, #16]
    CryptoCtx.EventCryptoNvmCtxChanged( );
 8011f64:	4b03      	ldr	r3, [pc, #12]	; (8011f74 <LoRaMacCryptoHandleJoinAccept+0x4f0>)
 8011f66:	68db      	ldr	r3, [r3, #12]
 8011f68:	4798      	blx	r3

    return LORAMAC_CRYPTO_SUCCESS;
 8011f6a:	2300      	movs	r3, #0
}
 8011f6c:	0018      	movs	r0, r3
 8011f6e:	46bd      	mov	sp, r7
 8011f70:	b04d      	add	sp, #308	; 0x134
 8011f72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011f74:	20000ed8 	.word	0x20000ed8

08011f78 <LoRaMacCryptoSecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 8011f78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011f7a:	b08f      	sub	sp, #60	; 0x3c
 8011f7c:	af06      	add	r7, sp, #24
 8011f7e:	60f8      	str	r0, [r7, #12]
 8011f80:	0008      	movs	r0, r1
 8011f82:	0011      	movs	r1, r2
 8011f84:	607b      	str	r3, [r7, #4]
 8011f86:	230b      	movs	r3, #11
 8011f88:	18fb      	adds	r3, r7, r3
 8011f8a:	1c02      	adds	r2, r0, #0
 8011f8c:	701a      	strb	r2, [r3, #0]
 8011f8e:	230a      	movs	r3, #10
 8011f90:	18fb      	adds	r3, r7, r3
 8011f92:	1c0a      	adds	r2, r1, #0
 8011f94:	701a      	strb	r2, [r3, #0]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8011f96:	231e      	movs	r3, #30
 8011f98:	18fb      	adds	r3, r7, r3
 8011f9a:	2210      	movs	r2, #16
 8011f9c:	701a      	strb	r2, [r3, #0]
    KeyIdentifier_t FRMPayloadDecryptionKeyID = APP_S_KEY;
 8011f9e:	231f      	movs	r3, #31
 8011fa0:	18fb      	adds	r3, r7, r3
 8011fa2:	2207      	movs	r2, #7
 8011fa4:	701a      	strb	r2, [r3, #0]

    if( macMsg == NULL )
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	2b00      	cmp	r3, #0
 8011faa:	d101      	bne.n	8011fb0 <LoRaMacCryptoSecureMessage+0x38>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8011fac:	2307      	movs	r3, #7
 8011fae:	e0ff      	b.n	80121b0 <LoRaMacCryptoSecureMessage+0x238>
    }

    if( fCntUp < CryptoCtx.NvmCtx->FCntUp )
 8011fb0:	4b81      	ldr	r3, [pc, #516]	; (80121b8 <LoRaMacCryptoSecureMessage+0x240>)
 8011fb2:	689b      	ldr	r3, [r3, #8]
 8011fb4:	689b      	ldr	r3, [r3, #8]
 8011fb6:	68fa      	ldr	r2, [r7, #12]
 8011fb8:	429a      	cmp	r2, r3
 8011fba:	d201      	bcs.n	8011fc0 <LoRaMacCryptoSecureMessage+0x48>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT;
 8011fbc:	2305      	movs	r3, #5
 8011fbe:	e0f7      	b.n	80121b0 <LoRaMacCryptoSecureMessage+0x238>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	2220      	movs	r2, #32
 8011fc4:	5c9b      	ldrb	r3, [r3, r2]
 8011fc6:	2b00      	cmp	r3, #0
 8011fc8:	d103      	bne.n	8011fd2 <LoRaMacCryptoSecureMessage+0x5a>
    {
        // Use network session key
        FRMPayloadDecryptionKeyID = NWK_S_ENC_KEY;
 8011fca:	231f      	movs	r3, #31
 8011fcc:	18fb      	adds	r3, r7, r3
 8011fce:	2206      	movs	r2, #6
 8011fd0:	701a      	strb	r2, [r3, #0]
    }

    if( fCntUp > CryptoCtx.NvmCtx->FCntUp )
 8011fd2:	4b79      	ldr	r3, [pc, #484]	; (80121b8 <LoRaMacCryptoSecureMessage+0x240>)
 8011fd4:	689b      	ldr	r3, [r3, #8]
 8011fd6:	689b      	ldr	r3, [r3, #8]
 8011fd8:	68fa      	ldr	r2, [r7, #12]
 8011fda:	429a      	cmp	r2, r3
 8011fdc:	d93e      	bls.n	801205c <LoRaMacCryptoSecureMessage+0xe4>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, FRMPayloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8011fe2:	687b      	ldr	r3, [r7, #4]
 8011fe4:	2228      	movs	r2, #40	; 0x28
 8011fe6:	5c9b      	ldrb	r3, [r3, r2]
 8011fe8:	b299      	uxth	r1, r3
 8011fea:	687b      	ldr	r3, [r7, #4]
 8011fec:	689d      	ldr	r5, [r3, #8]
 8011fee:	261e      	movs	r6, #30
 8011ff0:	19bc      	adds	r4, r7, r6
 8011ff2:	231f      	movs	r3, #31
 8011ff4:	18fb      	adds	r3, r7, r3
 8011ff6:	781a      	ldrb	r2, [r3, #0]
 8011ff8:	68fb      	ldr	r3, [r7, #12]
 8011ffa:	9301      	str	r3, [sp, #4]
 8011ffc:	2300      	movs	r3, #0
 8011ffe:	9300      	str	r3, [sp, #0]
 8012000:	002b      	movs	r3, r5
 8012002:	f7fe fd05 	bl	8010a10 <PayloadEncrypt>
 8012006:	0003      	movs	r3, r0
 8012008:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 801200a:	19bb      	adds	r3, r7, r6
 801200c:	781b      	ldrb	r3, [r3, #0]
 801200e:	2b00      	cmp	r3, #0
 8012010:	d003      	beq.n	801201a <LoRaMacCryptoSecureMessage+0xa2>
        {
            return retval;
 8012012:	231e      	movs	r3, #30
 8012014:	18fb      	adds	r3, r7, r3
 8012016:	781b      	ldrb	r3, [r3, #0]
 8012018:	e0ca      	b.n	80121b0 <LoRaMacCryptoSecureMessage+0x238>
        }

        if( CryptoCtx.LrWanVersion.Fields.Minor == 1 )
 801201a:	4b67      	ldr	r3, [pc, #412]	; (80121b8 <LoRaMacCryptoSecureMessage+0x240>)
 801201c:	789b      	ldrb	r3, [r3, #2]
 801201e:	2b01      	cmp	r3, #1
 8012020:	d11c      	bne.n	801205c <LoRaMacCryptoSecureMessage+0xe4>
        {
            // Encrypt FOpts
            retval = FOptsEncrypt( macMsg->FHDR.FCtrl.Bits.FOptsLen, macMsg->FHDR.DevAddr, UPLINK, FCNT_UP,  fCntUp, macMsg->FHDR.FOpts );
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	7b1b      	ldrb	r3, [r3, #12]
 8012026:	071b      	lsls	r3, r3, #28
 8012028:	0f1b      	lsrs	r3, r3, #28
 801202a:	b2db      	uxtb	r3, r3
 801202c:	b298      	uxth	r0, r3
 801202e:	687b      	ldr	r3, [r7, #4]
 8012030:	6899      	ldr	r1, [r3, #8]
 8012032:	687b      	ldr	r3, [r7, #4]
 8012034:	3310      	adds	r3, #16
 8012036:	251e      	movs	r5, #30
 8012038:	197c      	adds	r4, r7, r5
 801203a:	9301      	str	r3, [sp, #4]
 801203c:	68fb      	ldr	r3, [r7, #12]
 801203e:	9300      	str	r3, [sp, #0]
 8012040:	2300      	movs	r3, #0
 8012042:	2200      	movs	r2, #0
 8012044:	f7fe fde6 	bl	8010c14 <FOptsEncrypt>
 8012048:	0003      	movs	r3, r0
 801204a:	7023      	strb	r3, [r4, #0]
            if( retval != LORAMAC_CRYPTO_SUCCESS )
 801204c:	197b      	adds	r3, r7, r5
 801204e:	781b      	ldrb	r3, [r3, #0]
 8012050:	2b00      	cmp	r3, #0
 8012052:	d003      	beq.n	801205c <LoRaMacCryptoSecureMessage+0xe4>
            {
                return retval;
 8012054:	231e      	movs	r3, #30
 8012056:	18fb      	adds	r3, r7, r3
 8012058:	781b      	ldrb	r3, [r3, #0]
 801205a:	e0a9      	b.n	80121b0 <LoRaMacCryptoSecureMessage+0x238>
            }
        }
    }
    CryptoCtx.NvmCtx->FCntUp = fCntUp;
 801205c:	4b56      	ldr	r3, [pc, #344]	; (80121b8 <LoRaMacCryptoSecureMessage+0x240>)
 801205e:	689b      	ldr	r3, [r3, #8]
 8012060:	68fa      	ldr	r2, [r7, #12]
 8012062:	609a      	str	r2, [r3, #8]
    CryptoCtx.EventCryptoNvmCtxChanged( );
 8012064:	4b54      	ldr	r3, [pc, #336]	; (80121b8 <LoRaMacCryptoSecureMessage+0x240>)
 8012066:	68db      	ldr	r3, [r3, #12]
 8012068:	4798      	blx	r3

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	0018      	movs	r0, r3
 801206e:	f000 fdcf 	bl	8012c10 <LoRaMacSerializerData>
 8012072:	1e03      	subs	r3, r0, #0
 8012074:	d001      	beq.n	801207a <LoRaMacCryptoSecureMessage+0x102>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8012076:	230e      	movs	r3, #14
 8012078:	e09a      	b.n	80121b0 <LoRaMacCryptoSecureMessage+0x238>
    }

    // Compute mic
    if( CryptoCtx.LrWanVersion.Fields.Minor == 1 )
 801207a:	4b4f      	ldr	r3, [pc, #316]	; (80121b8 <LoRaMacCryptoSecureMessage+0x240>)
 801207c:	789b      	ldrb	r3, [r3, #2]
 801207e:	2b01      	cmp	r3, #1
 8012080:	d16a      	bne.n	8012158 <LoRaMacCryptoSecureMessage+0x1e0>
    {
        uint32_t cmacS = 0;
 8012082:	2300      	movs	r3, #0
 8012084:	61bb      	str	r3, [r7, #24]
        uint32_t cmacF = 0;
 8012086:	2300      	movs	r3, #0
 8012088:	617b      	str	r3, [r7, #20]

        // cmacS  = aes128_cmac(SNwkSIntKey, B1 | msg)
        retval = ComputeCmacB1( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), S_NWK_S_INT_KEY, macMsg->FHDR.FCtrl.Bits.Ack, txDr, txCh, macMsg->FHDR.DevAddr, macMsg->FHDR.FCnt, &cmacS );
 801208a:	687b      	ldr	r3, [r7, #4]
 801208c:	6818      	ldr	r0, [r3, #0]
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	791b      	ldrb	r3, [r3, #4]
 8012092:	b29b      	uxth	r3, r3
 8012094:	3b04      	subs	r3, #4
 8012096:	b299      	uxth	r1, r3
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	7b1b      	ldrb	r3, [r3, #12]
 801209c:	069b      	lsls	r3, r3, #26
 801209e:	0fdb      	lsrs	r3, r3, #31
 80120a0:	b2db      	uxtb	r3, r3
 80120a2:	1e5a      	subs	r2, r3, #1
 80120a4:	4193      	sbcs	r3, r2
 80120a6:	b2dd      	uxtb	r5, r3
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	689b      	ldr	r3, [r3, #8]
 80120ac:	687a      	ldr	r2, [r7, #4]
 80120ae:	89d2      	ldrh	r2, [r2, #14]
 80120b0:	0016      	movs	r6, r2
 80120b2:	221e      	movs	r2, #30
 80120b4:	18bc      	adds	r4, r7, r2
 80120b6:	2218      	movs	r2, #24
 80120b8:	18ba      	adds	r2, r7, r2
 80120ba:	9204      	str	r2, [sp, #16]
 80120bc:	9603      	str	r6, [sp, #12]
 80120be:	9302      	str	r3, [sp, #8]
 80120c0:	230a      	movs	r3, #10
 80120c2:	18fb      	adds	r3, r7, r3
 80120c4:	781b      	ldrb	r3, [r3, #0]
 80120c6:	9301      	str	r3, [sp, #4]
 80120c8:	230b      	movs	r3, #11
 80120ca:	18fb      	adds	r3, r7, r3
 80120cc:	781b      	ldrb	r3, [r3, #0]
 80120ce:	9300      	str	r3, [sp, #0]
 80120d0:	002b      	movs	r3, r5
 80120d2:	2205      	movs	r2, #5
 80120d4:	f7ff f908 	bl	80112e8 <ComputeCmacB1>
 80120d8:	0003      	movs	r3, r0
 80120da:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80120dc:	221e      	movs	r2, #30
 80120de:	18bb      	adds	r3, r7, r2
 80120e0:	781b      	ldrb	r3, [r3, #0]
 80120e2:	2b00      	cmp	r3, #0
 80120e4:	d003      	beq.n	80120ee <LoRaMacCryptoSecureMessage+0x176>
        {
            return retval;
 80120e6:	231e      	movs	r3, #30
 80120e8:	18fb      	adds	r3, r7, r3
 80120ea:	781b      	ldrb	r3, [r3, #0]
 80120ec:	e060      	b.n	80121b0 <LoRaMacCryptoSecureMessage+0x238>
        }
        //cmacF = aes128_cmac(FNwkSIntKey, B0 | msg)
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), F_NWK_S_INT_KEY, macMsg->FHDR.FCtrl.Bits.Ack, UPLINK, macMsg->FHDR.DevAddr, macMsg->FHDR.FCnt, &cmacF );
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	6818      	ldr	r0, [r3, #0]
 80120f2:	687b      	ldr	r3, [r7, #4]
 80120f4:	791b      	ldrb	r3, [r3, #4]
 80120f6:	b29b      	uxth	r3, r3
 80120f8:	3b04      	subs	r3, #4
 80120fa:	b299      	uxth	r1, r3
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	7b1b      	ldrb	r3, [r3, #12]
 8012100:	069b      	lsls	r3, r3, #26
 8012102:	0fdb      	lsrs	r3, r3, #31
 8012104:	b2db      	uxtb	r3, r3
 8012106:	1e5a      	subs	r2, r3, #1
 8012108:	4193      	sbcs	r3, r2
 801210a:	b2dd      	uxtb	r5, r3
 801210c:	687b      	ldr	r3, [r7, #4]
 801210e:	689b      	ldr	r3, [r3, #8]
 8012110:	687a      	ldr	r2, [r7, #4]
 8012112:	89d2      	ldrh	r2, [r2, #14]
 8012114:	0016      	movs	r6, r2
 8012116:	221e      	movs	r2, #30
 8012118:	18bc      	adds	r4, r7, r2
 801211a:	2214      	movs	r2, #20
 801211c:	18ba      	adds	r2, r7, r2
 801211e:	9203      	str	r2, [sp, #12]
 8012120:	9602      	str	r6, [sp, #8]
 8012122:	9301      	str	r3, [sp, #4]
 8012124:	2300      	movs	r3, #0
 8012126:	9300      	str	r3, [sp, #0]
 8012128:	002b      	movs	r3, r5
 801212a:	2204      	movs	r2, #4
 801212c:	f7fe ff02 	bl	8010f34 <ComputeCmacB0>
 8012130:	0003      	movs	r3, r0
 8012132:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8012134:	221e      	movs	r2, #30
 8012136:	18bb      	adds	r3, r7, r2
 8012138:	781b      	ldrb	r3, [r3, #0]
 801213a:	2b00      	cmp	r3, #0
 801213c:	d003      	beq.n	8012146 <LoRaMacCryptoSecureMessage+0x1ce>
        {
            return retval;
 801213e:	231e      	movs	r3, #30
 8012140:	18fb      	adds	r3, r7, r3
 8012142:	781b      	ldrb	r3, [r3, #0]
 8012144:	e034      	b.n	80121b0 <LoRaMacCryptoSecureMessage+0x238>
        }
        // MIC = cmacS[0..1] | cmacF[0..1]
        macMsg->MIC = ( ( cmacF << 16 ) & 0xFFFF0000 ) | ( cmacS & 0x0000FFFF );
 8012146:	697b      	ldr	r3, [r7, #20]
 8012148:	041a      	lsls	r2, r3, #16
 801214a:	69bb      	ldr	r3, [r7, #24]
 801214c:	041b      	lsls	r3, r3, #16
 801214e:	0c1b      	lsrs	r3, r3, #16
 8012150:	431a      	orrs	r2, r3
 8012152:	687b      	ldr	r3, [r7, #4]
 8012154:	62da      	str	r2, [r3, #44]	; 0x2c
 8012156:	e022      	b.n	801219e <LoRaMacCryptoSecureMessage+0x226>
    }
    else
    {
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), NWK_S_ENC_KEY, false, UPLINK, macMsg->FHDR.DevAddr, macMsg->FHDR.FCnt, &macMsg->MIC );
 8012158:	687b      	ldr	r3, [r7, #4]
 801215a:	6818      	ldr	r0, [r3, #0]
 801215c:	687b      	ldr	r3, [r7, #4]
 801215e:	791b      	ldrb	r3, [r3, #4]
 8012160:	b29b      	uxth	r3, r3
 8012162:	3b04      	subs	r3, #4
 8012164:	b299      	uxth	r1, r3
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	689b      	ldr	r3, [r3, #8]
 801216a:	687a      	ldr	r2, [r7, #4]
 801216c:	89d2      	ldrh	r2, [r2, #14]
 801216e:	0015      	movs	r5, r2
 8012170:	687a      	ldr	r2, [r7, #4]
 8012172:	322c      	adds	r2, #44	; 0x2c
 8012174:	261e      	movs	r6, #30
 8012176:	19bc      	adds	r4, r7, r6
 8012178:	9203      	str	r2, [sp, #12]
 801217a:	9502      	str	r5, [sp, #8]
 801217c:	9301      	str	r3, [sp, #4]
 801217e:	2300      	movs	r3, #0
 8012180:	9300      	str	r3, [sp, #0]
 8012182:	2300      	movs	r3, #0
 8012184:	2206      	movs	r2, #6
 8012186:	f7fe fed5 	bl	8010f34 <ComputeCmacB0>
 801218a:	0003      	movs	r3, r0
 801218c:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 801218e:	19bb      	adds	r3, r7, r6
 8012190:	781b      	ldrb	r3, [r3, #0]
 8012192:	2b00      	cmp	r3, #0
 8012194:	d003      	beq.n	801219e <LoRaMacCryptoSecureMessage+0x226>
        {
            return retval;
 8012196:	231e      	movs	r3, #30
 8012198:	18fb      	adds	r3, r7, r3
 801219a:	781b      	ldrb	r3, [r3, #0]
 801219c:	e008      	b.n	80121b0 <LoRaMacCryptoSecureMessage+0x238>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 801219e:	687b      	ldr	r3, [r7, #4]
 80121a0:	0018      	movs	r0, r3
 80121a2:	f000 fd35 	bl	8012c10 <LoRaMacSerializerData>
 80121a6:	1e03      	subs	r3, r0, #0
 80121a8:	d001      	beq.n	80121ae <LoRaMacCryptoSecureMessage+0x236>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80121aa:	230e      	movs	r3, #14
 80121ac:	e000      	b.n	80121b0 <LoRaMacCryptoSecureMessage+0x238>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80121ae:	2300      	movs	r3, #0
}
 80121b0:	0018      	movs	r0, r3
 80121b2:	46bd      	mov	sp, r7
 80121b4:	b009      	add	sp, #36	; 0x24
 80121b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80121b8:	20000ed8 	.word	0x20000ed8

080121bc <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 80121bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80121be:	b08b      	sub	sp, #44	; 0x2c
 80121c0:	af04      	add	r7, sp, #16
 80121c2:	60b9      	str	r1, [r7, #8]
 80121c4:	0011      	movs	r1, r2
 80121c6:	607b      	str	r3, [r7, #4]
 80121c8:	230f      	movs	r3, #15
 80121ca:	18fb      	adds	r3, r7, r3
 80121cc:	1c02      	adds	r2, r0, #0
 80121ce:	701a      	strb	r2, [r3, #0]
 80121d0:	230e      	movs	r3, #14
 80121d2:	18fb      	adds	r3, r7, r3
 80121d4:	1c0a      	adds	r2, r1, #0
 80121d6:	701a      	strb	r2, [r3, #0]
    if( macMsg == 0 )
 80121d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121da:	2b00      	cmp	r3, #0
 80121dc:	d101      	bne.n	80121e2 <LoRaMacCryptoUnsecureMessage+0x26>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80121de:	2307      	movs	r3, #7
 80121e0:	e0cf      	b.n	8012382 <LoRaMacCryptoUnsecureMessage+0x1c6>
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 80121e2:	687a      	ldr	r2, [r7, #4]
 80121e4:	230e      	movs	r3, #14
 80121e6:	18fb      	adds	r3, r7, r3
 80121e8:	781b      	ldrb	r3, [r3, #0]
 80121ea:	0011      	movs	r1, r2
 80121ec:	0018      	movs	r0, r3
 80121ee:	f7ff fa65 	bl	80116bc <CheckFCntDown>
 80121f2:	0003      	movs	r3, r0
 80121f4:	001a      	movs	r2, r3
 80121f6:	2301      	movs	r3, #1
 80121f8:	4053      	eors	r3, r2
 80121fa:	b2db      	uxtb	r3, r3
 80121fc:	2b00      	cmp	r3, #0
 80121fe:	d001      	beq.n	8012204 <LoRaMacCryptoUnsecureMessage+0x48>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT;
 8012200:	2305      	movs	r3, #5
 8012202:	e0be      	b.n	8012382 <LoRaMacCryptoUnsecureMessage+0x1c6>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8012204:	2315      	movs	r3, #21
 8012206:	18fb      	adds	r3, r7, r3
 8012208:	2210      	movs	r2, #16
 801220a:	701a      	strb	r2, [r3, #0]
    KeyIdentifier_t FRMPayloadDecryptionKeyID = APP_S_KEY;
 801220c:	2317      	movs	r3, #23
 801220e:	18fb      	adds	r3, r7, r3
 8012210:	2207      	movs	r2, #7
 8012212:	701a      	strb	r2, [r3, #0]
    KeyIdentifier_t micComputationKeyID = S_NWK_S_INT_KEY;
 8012214:	2314      	movs	r3, #20
 8012216:	18fb      	adds	r3, r7, r3
 8012218:	2205      	movs	r2, #5
 801221a:	701a      	strb	r2, [r3, #0]
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 801221c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801221e:	0018      	movs	r0, r3
 8012220:	f000 fb49 	bl	80128b6 <LoRaMacParserData>
 8012224:	1e03      	subs	r3, r0, #0
 8012226:	d001      	beq.n	801222c <LoRaMacCryptoUnsecureMessage+0x70>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8012228:	230d      	movs	r3, #13
 801222a:	e0aa      	b.n	8012382 <LoRaMacCryptoUnsecureMessage+0x1c6>
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 801222c:	2515      	movs	r5, #21
 801222e:	197c      	adds	r4, r7, r5
 8012230:	2310      	movs	r3, #16
 8012232:	18fa      	adds	r2, r7, r3
 8012234:	230f      	movs	r3, #15
 8012236:	18fb      	adds	r3, r7, r3
 8012238:	781b      	ldrb	r3, [r3, #0]
 801223a:	0011      	movs	r1, r2
 801223c:	0018      	movs	r0, r3
 801223e:	f7ff f8f3 	bl	8011428 <GetKeyAddrItem>
 8012242:	0003      	movs	r3, r0
 8012244:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8012246:	197b      	adds	r3, r7, r5
 8012248:	781b      	ldrb	r3, [r3, #0]
 801224a:	2b00      	cmp	r3, #0
 801224c:	d003      	beq.n	8012256 <LoRaMacCryptoUnsecureMessage+0x9a>
    {
        return retval;
 801224e:	2315      	movs	r3, #21
 8012250:	18fb      	adds	r3, r7, r3
 8012252:	781b      	ldrb	r3, [r3, #0]
 8012254:	e095      	b.n	8012382 <LoRaMacCryptoUnsecureMessage+0x1c6>
    }
    FRMPayloadDecryptionKeyID = curItem->AppSkey;
 8012256:	693a      	ldr	r2, [r7, #16]
 8012258:	2317      	movs	r3, #23
 801225a:	18fb      	adds	r3, r7, r3
 801225c:	7852      	ldrb	r2, [r2, #1]
 801225e:	701a      	strb	r2, [r3, #0]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 8012260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012262:	689b      	ldr	r3, [r3, #8]
 8012264:	68ba      	ldr	r2, [r7, #8]
 8012266:	429a      	cmp	r2, r3
 8012268:	d001      	beq.n	801226e <LoRaMacCryptoUnsecureMessage+0xb2>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 801226a:	2302      	movs	r3, #2
 801226c:	e089      	b.n	8012382 <LoRaMacCryptoUnsecureMessage+0x1c6>
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 801226e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012270:	7b1b      	ldrb	r3, [r3, #12]
 8012272:	069b      	lsls	r3, r3, #26
 8012274:	0fdb      	lsrs	r3, r3, #31
 8012276:	b2db      	uxtb	r3, r3
 8012278:	001a      	movs	r2, r3
 801227a:	2316      	movs	r3, #22
 801227c:	18fb      	adds	r3, r7, r3
 801227e:	1e51      	subs	r1, r2, #1
 8012280:	418a      	sbcs	r2, r1
 8012282:	701a      	strb	r2, [r3, #0]
    if( CryptoCtx.LrWanVersion.Fields.Minor == 0 )
 8012284:	4b41      	ldr	r3, [pc, #260]	; (801238c <LoRaMacCryptoUnsecureMessage+0x1d0>)
 8012286:	789b      	ldrb	r3, [r3, #2]
 8012288:	2b00      	cmp	r3, #0
 801228a:	d103      	bne.n	8012294 <LoRaMacCryptoUnsecureMessage+0xd8>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 801228c:	2316      	movs	r3, #22
 801228e:	18fb      	adds	r3, r7, r3
 8012290:	2200      	movs	r2, #0
 8012292:	701a      	strb	r2, [r3, #0]
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 8012294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012296:	6818      	ldr	r0, [r3, #0]
 8012298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801229a:	791b      	ldrb	r3, [r3, #4]
 801229c:	b29b      	uxth	r3, r3
 801229e:	3b04      	subs	r3, #4
 80122a0:	b299      	uxth	r1, r3
 80122a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80122a6:	2615      	movs	r6, #21
 80122a8:	19bc      	adds	r4, r7, r6
 80122aa:	2216      	movs	r2, #22
 80122ac:	18ba      	adds	r2, r7, r2
 80122ae:	7815      	ldrb	r5, [r2, #0]
 80122b0:	2214      	movs	r2, #20
 80122b2:	18ba      	adds	r2, r7, r2
 80122b4:	7812      	ldrb	r2, [r2, #0]
 80122b6:	9303      	str	r3, [sp, #12]
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	9302      	str	r3, [sp, #8]
 80122bc:	68bb      	ldr	r3, [r7, #8]
 80122be:	9301      	str	r3, [sp, #4]
 80122c0:	2301      	movs	r3, #1
 80122c2:	9300      	str	r3, [sp, #0]
 80122c4:	002b      	movs	r3, r5
 80122c6:	f7fe fed1 	bl	801106c <VerifyCmacB0>
 80122ca:	0003      	movs	r3, r0
 80122cc:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80122ce:	19bb      	adds	r3, r7, r6
 80122d0:	781b      	ldrb	r3, [r3, #0]
 80122d2:	2b00      	cmp	r3, #0
 80122d4:	d003      	beq.n	80122de <LoRaMacCryptoUnsecureMessage+0x122>
    {
        return retval;
 80122d6:	2315      	movs	r3, #21
 80122d8:	18fb      	adds	r3, r7, r3
 80122da:	781b      	ldrb	r3, [r3, #0]
 80122dc:	e051      	b.n	8012382 <LoRaMacCryptoUnsecureMessage+0x1c6>
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 80122de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122e0:	2220      	movs	r2, #32
 80122e2:	5c9b      	ldrb	r3, [r3, r2]
 80122e4:	2b00      	cmp	r3, #0
 80122e6:	d103      	bne.n	80122f0 <LoRaMacCryptoUnsecureMessage+0x134>
    {
        // Use network session encryption key
        FRMPayloadDecryptionKeyID = NWK_S_ENC_KEY;
 80122e8:	2317      	movs	r3, #23
 80122ea:	18fb      	adds	r3, r7, r3
 80122ec:	2206      	movs	r2, #6
 80122ee:	701a      	strb	r2, [r3, #0]
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, FRMPayloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 80122f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122f2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80122f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122f6:	2228      	movs	r2, #40	; 0x28
 80122f8:	5c9b      	ldrb	r3, [r3, r2]
 80122fa:	b299      	uxth	r1, r3
 80122fc:	2615      	movs	r6, #21
 80122fe:	19bc      	adds	r4, r7, r6
 8012300:	68bd      	ldr	r5, [r7, #8]
 8012302:	2317      	movs	r3, #23
 8012304:	18fb      	adds	r3, r7, r3
 8012306:	781a      	ldrb	r2, [r3, #0]
 8012308:	687b      	ldr	r3, [r7, #4]
 801230a:	9301      	str	r3, [sp, #4]
 801230c:	2301      	movs	r3, #1
 801230e:	9300      	str	r3, [sp, #0]
 8012310:	002b      	movs	r3, r5
 8012312:	f7fe fb7d 	bl	8010a10 <PayloadEncrypt>
 8012316:	0003      	movs	r3, r0
 8012318:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 801231a:	19bb      	adds	r3, r7, r6
 801231c:	781b      	ldrb	r3, [r3, #0]
 801231e:	2b00      	cmp	r3, #0
 8012320:	d003      	beq.n	801232a <LoRaMacCryptoUnsecureMessage+0x16e>
    {
        return retval;
 8012322:	2315      	movs	r3, #21
 8012324:	18fb      	adds	r3, r7, r3
 8012326:	781b      	ldrb	r3, [r3, #0]
 8012328:	e02b      	b.n	8012382 <LoRaMacCryptoUnsecureMessage+0x1c6>
    }

    if( CryptoCtx.LrWanVersion.Fields.Minor == 1 )
 801232a:	4b18      	ldr	r3, [pc, #96]	; (801238c <LoRaMacCryptoUnsecureMessage+0x1d0>)
 801232c:	789b      	ldrb	r3, [r3, #2]
 801232e:	2b01      	cmp	r3, #1
 8012330:	d11e      	bne.n	8012370 <LoRaMacCryptoUnsecureMessage+0x1b4>
    {
        // Decrypt FOpts
        retval = FOptsEncrypt( macMsg->FHDR.FCtrl.Bits.FOptsLen, address, DOWNLINK, fCntID, fCntDown, macMsg->FHDR.FOpts );
 8012332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012334:	7b1b      	ldrb	r3, [r3, #12]
 8012336:	071b      	lsls	r3, r3, #28
 8012338:	0f1b      	lsrs	r3, r3, #28
 801233a:	b2db      	uxtb	r3, r3
 801233c:	b298      	uxth	r0, r3
 801233e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012340:	3310      	adds	r3, #16
 8012342:	2515      	movs	r5, #21
 8012344:	197c      	adds	r4, r7, r5
 8012346:	220e      	movs	r2, #14
 8012348:	18ba      	adds	r2, r7, r2
 801234a:	7812      	ldrb	r2, [r2, #0]
 801234c:	68b9      	ldr	r1, [r7, #8]
 801234e:	9301      	str	r3, [sp, #4]
 8012350:	687b      	ldr	r3, [r7, #4]
 8012352:	9300      	str	r3, [sp, #0]
 8012354:	0013      	movs	r3, r2
 8012356:	2201      	movs	r2, #1
 8012358:	f7fe fc5c 	bl	8010c14 <FOptsEncrypt>
 801235c:	0003      	movs	r3, r0
 801235e:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8012360:	197b      	adds	r3, r7, r5
 8012362:	781b      	ldrb	r3, [r3, #0]
 8012364:	2b00      	cmp	r3, #0
 8012366:	d003      	beq.n	8012370 <LoRaMacCryptoUnsecureMessage+0x1b4>
        {
            return retval;
 8012368:	2315      	movs	r3, #21
 801236a:	18fb      	adds	r3, r7, r3
 801236c:	781b      	ldrb	r3, [r3, #0]
 801236e:	e008      	b.n	8012382 <LoRaMacCryptoUnsecureMessage+0x1c6>
        }
    }

    UpdateFCntDown( fCntID, fCntDown );
 8012370:	687a      	ldr	r2, [r7, #4]
 8012372:	230e      	movs	r3, #14
 8012374:	18fb      	adds	r3, r7, r3
 8012376:	781b      	ldrb	r3, [r3, #0]
 8012378:	0011      	movs	r1, r2
 801237a:	0018      	movs	r0, r3
 801237c:	f7ff f9fc 	bl	8011778 <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 8012380:	2300      	movs	r3, #0
}
 8012382:	0018      	movs	r0, r3
 8012384:	46bd      	mov	sp, r7
 8012386:	b007      	add	sp, #28
 8012388:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801238a:	46c0      	nop			; (mov r8, r8)
 801238c:	20000ed8 	.word	0x20000ed8

08012390 <NvmCtxChanged>:

/*
 * \brief Wrapper function for the NvmCtx
 */
static void NvmCtxChanged( void )
{
 8012390:	b580      	push	{r7, lr}
 8012392:	af00      	add	r7, sp, #0
    if( FCntHandlerNvmCtxChanged != NULL )
 8012394:	4b04      	ldr	r3, [pc, #16]	; (80123a8 <NvmCtxChanged+0x18>)
 8012396:	681b      	ldr	r3, [r3, #0]
 8012398:	2b00      	cmp	r3, #0
 801239a:	d002      	beq.n	80123a2 <NvmCtxChanged+0x12>
    {
        FCntHandlerNvmCtxChanged( );
 801239c:	4b02      	ldr	r3, [pc, #8]	; (80123a8 <NvmCtxChanged+0x18>)
 801239e:	681b      	ldr	r3, [r3, #0]
 80123a0:	4798      	blx	r3
    }
}
 80123a2:	46c0      	nop			; (mov r8, r8)
 80123a4:	46bd      	mov	sp, r7
 80123a6:	bd80      	pop	{r7, pc}
 80123a8:	20000f38 	.word	0x20000f38

080123ac <LoRaMacFCntHandlerInit>:


LoRaMacFCntHandlerStatus_t LoRaMacFCntHandlerInit( EventNvmCtxChanged fCntHandlerNvmCtxChanged )
{
 80123ac:	b580      	push	{r7, lr}
 80123ae:	b082      	sub	sp, #8
 80123b0:	af00      	add	r7, sp, #0
 80123b2:	6078      	str	r0, [r7, #4]
    // Initialize with default
    LoRaMacResetFCnts( );
 80123b4:	f000 f93e 	bl	8012634 <LoRaMacResetFCnts>

    // Assign callback
    FCntHandlerNvmCtxChanged = fCntHandlerNvmCtxChanged;
 80123b8:	4b03      	ldr	r3, [pc, #12]	; (80123c8 <LoRaMacFCntHandlerInit+0x1c>)
 80123ba:	687a      	ldr	r2, [r7, #4]
 80123bc:	601a      	str	r2, [r3, #0]

    return LORAMAC_FCNT_HANDLER_SUCCESS;
 80123be:	2300      	movs	r3, #0
}
 80123c0:	0018      	movs	r0, r3
 80123c2:	46bd      	mov	sp, r7
 80123c4:	b002      	add	sp, #8
 80123c6:	bd80      	pop	{r7, pc}
 80123c8:	20000f38 	.word	0x20000f38

080123cc <LoRaMacFCntHandlerRestoreNvmCtx>:

LoRaMacFCntHandlerStatus_t LoRaMacFCntHandlerRestoreNvmCtx( void* fCntHandlerNvmCtx )
{
 80123cc:	b580      	push	{r7, lr}
 80123ce:	b082      	sub	sp, #8
 80123d0:	af00      	add	r7, sp, #0
 80123d2:	6078      	str	r0, [r7, #4]
    // Restore module context
    if( fCntHandlerNvmCtx != NULL )
 80123d4:	687b      	ldr	r3, [r7, #4]
 80123d6:	2b00      	cmp	r3, #0
 80123d8:	d007      	beq.n	80123ea <LoRaMacFCntHandlerRestoreNvmCtx+0x1e>
    {
        memcpy1( ( uint8_t* ) &FCntHandlerNvmCtx, ( uint8_t* ) fCntHandlerNvmCtx, sizeof( FCntHandlerNvmCtx ) );
 80123da:	6879      	ldr	r1, [r7, #4]
 80123dc:	4b05      	ldr	r3, [pc, #20]	; (80123f4 <LoRaMacFCntHandlerRestoreNvmCtx+0x28>)
 80123de:	2220      	movs	r2, #32
 80123e0:	0018      	movs	r0, r3
 80123e2:	f003 fb05 	bl	80159f0 <memcpy1>
        return LORAMAC_FCNT_HANDLER_SUCCESS;
 80123e6:	2300      	movs	r3, #0
 80123e8:	e000      	b.n	80123ec <LoRaMacFCntHandlerRestoreNvmCtx+0x20>
    }
    else
    {
        return LORAMAC_FCNT_HANDLER_ERROR_NPE;
 80123ea:	2304      	movs	r3, #4
    }
}
 80123ec:	0018      	movs	r0, r3
 80123ee:	46bd      	mov	sp, r7
 80123f0:	b002      	add	sp, #8
 80123f2:	bd80      	pop	{r7, pc}
 80123f4:	20000f18 	.word	0x20000f18

080123f8 <LoRaMacFCntHandlerGetNvmCtx>:

void* LoRaMacFCntHandlerGetNvmCtx( size_t* fCntHandlerNvmCtxSize )
{
 80123f8:	b580      	push	{r7, lr}
 80123fa:	b082      	sub	sp, #8
 80123fc:	af00      	add	r7, sp, #0
 80123fe:	6078      	str	r0, [r7, #4]
    *fCntHandlerNvmCtxSize = sizeof( FCntHandlerNvmCtx );
 8012400:	687b      	ldr	r3, [r7, #4]
 8012402:	2220      	movs	r2, #32
 8012404:	601a      	str	r2, [r3, #0]
    return &FCntHandlerNvmCtx;
 8012406:	4b02      	ldr	r3, [pc, #8]	; (8012410 <LoRaMacFCntHandlerGetNvmCtx+0x18>)
}
 8012408:	0018      	movs	r0, r3
 801240a:	46bd      	mov	sp, r7
 801240c:	b002      	add	sp, #8
 801240e:	bd80      	pop	{r7, pc}
 8012410:	20000f18 	.word	0x20000f18

08012414 <LoRaMacGetFCntDown>:

LoRaMacFCntHandlerStatus_t LoRaMacGetFCntDown( AddressIdentifier_t addrID, FType_t fType, LoRaMacMessageData_t* macMsg, Version_t lrWanVersion,
                                               uint16_t maxFCntGap, FCntIdentifier_t* fCntID, uint32_t* currentDown )
{
 8012414:	b580      	push	{r7, lr}
 8012416:	b086      	sub	sp, #24
 8012418:	af00      	add	r7, sp, #0
 801241a:	60ba      	str	r2, [r7, #8]
 801241c:	607b      	str	r3, [r7, #4]
 801241e:	230f      	movs	r3, #15
 8012420:	18fb      	adds	r3, r7, r3
 8012422:	1c02      	adds	r2, r0, #0
 8012424:	701a      	strb	r2, [r3, #0]
 8012426:	230e      	movs	r3, #14
 8012428:	18fb      	adds	r3, r7, r3
 801242a:	1c0a      	adds	r2, r1, #0
 801242c:	701a      	strb	r2, [r3, #0]
    uint32_t previousDown = 0;
 801242e:	2300      	movs	r3, #0
 8012430:	617b      	str	r3, [r7, #20]
    int32_t fCntDiff = 0;
 8012432:	2300      	movs	r3, #0
 8012434:	613b      	str	r3, [r7, #16]

    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 8012436:	68bb      	ldr	r3, [r7, #8]
 8012438:	2b00      	cmp	r3, #0
 801243a:	d005      	beq.n	8012448 <LoRaMacGetFCntDown+0x34>
 801243c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801243e:	2b00      	cmp	r3, #0
 8012440:	d002      	beq.n	8012448 <LoRaMacGetFCntDown+0x34>
 8012442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012444:	2b00      	cmp	r3, #0
 8012446:	d101      	bne.n	801244c <LoRaMacGetFCntDown+0x38>
        ( currentDown == NULL ) )
    {
        return LORAMAC_FCNT_HANDLER_ERROR_NPE;
 8012448:	2304      	movs	r3, #4
 801244a:	e088      	b.n	801255e <LoRaMacGetFCntDown+0x14a>
    }

    // Determine the frame counter identifier and choose counter from FCntList
    switch( addrID )
 801244c:	230f      	movs	r3, #15
 801244e:	18fb      	adds	r3, r7, r3
 8012450:	781b      	ldrb	r3, [r3, #0]
 8012452:	2b04      	cmp	r3, #4
 8012454:	d843      	bhi.n	80124de <LoRaMacGetFCntDown+0xca>
 8012456:	009a      	lsls	r2, r3, #2
 8012458:	4b43      	ldr	r3, [pc, #268]	; (8012568 <LoRaMacGetFCntDown+0x154>)
 801245a:	18d3      	adds	r3, r2, r3
 801245c:	681b      	ldr	r3, [r3, #0]
 801245e:	469f      	mov	pc, r3
    {
        case UNICAST_DEV_ADDR:
            if( lrWanVersion.Fields.Minor == 1 )
 8012460:	1d3b      	adds	r3, r7, #4
 8012462:	789b      	ldrb	r3, [r3, #2]
 8012464:	2b01      	cmp	r3, #1
 8012466:	d117      	bne.n	8012498 <LoRaMacGetFCntDown+0x84>
            {
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 8012468:	230e      	movs	r3, #14
 801246a:	18fb      	adds	r3, r7, r3
 801246c:	781b      	ldrb	r3, [r3, #0]
 801246e:	2b00      	cmp	r3, #0
 8012470:	d004      	beq.n	801247c <LoRaMacGetFCntDown+0x68>
 8012472:	230e      	movs	r3, #14
 8012474:	18fb      	adds	r3, r7, r3
 8012476:	781b      	ldrb	r3, [r3, #0]
 8012478:	2b03      	cmp	r3, #3
 801247a:	d106      	bne.n	801248a <LoRaMacGetFCntDown+0x76>
                {
                    *fCntID = A_FCNT_DOWN;
 801247c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801247e:	2202      	movs	r2, #2
 8012480:	701a      	strb	r2, [r3, #0]
                    previousDown = FCntHandlerNvmCtx.FCntList.AFCntDown;
 8012482:	4b3a      	ldr	r3, [pc, #232]	; (801256c <LoRaMacGetFCntDown+0x158>)
 8012484:	689b      	ldr	r3, [r3, #8]
 8012486:	617b      	str	r3, [r7, #20]
            else
            { // For LoRaWAN 1.0.X
                *fCntID = FCNT_DOWN;
                previousDown = FCntHandlerNvmCtx.FCntList.FCntDown;
            }
            break;
 8012488:	e02b      	b.n	80124e2 <LoRaMacGetFCntDown+0xce>
                    *fCntID = N_FCNT_DOWN;
 801248a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801248c:	2201      	movs	r2, #1
 801248e:	701a      	strb	r2, [r3, #0]
                    previousDown = FCntHandlerNvmCtx.FCntList.NFCntDown;
 8012490:	4b36      	ldr	r3, [pc, #216]	; (801256c <LoRaMacGetFCntDown+0x158>)
 8012492:	685b      	ldr	r3, [r3, #4]
 8012494:	617b      	str	r3, [r7, #20]
            break;
 8012496:	e024      	b.n	80124e2 <LoRaMacGetFCntDown+0xce>
                *fCntID = FCNT_DOWN;
 8012498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801249a:	2203      	movs	r2, #3
 801249c:	701a      	strb	r2, [r3, #0]
                previousDown = FCntHandlerNvmCtx.FCntList.FCntDown;
 801249e:	4b33      	ldr	r3, [pc, #204]	; (801256c <LoRaMacGetFCntDown+0x158>)
 80124a0:	68db      	ldr	r3, [r3, #12]
 80124a2:	617b      	str	r3, [r7, #20]
            break;
 80124a4:	e01d      	b.n	80124e2 <LoRaMacGetFCntDown+0xce>
        case MULTICAST_0_ADDR:
            *fCntID = MC_FCNT_DOWN_0;
 80124a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124a8:	2204      	movs	r2, #4
 80124aa:	701a      	strb	r2, [r3, #0]
            previousDown = FCntHandlerNvmCtx.FCntList.McFCntDown0;
 80124ac:	4b2f      	ldr	r3, [pc, #188]	; (801256c <LoRaMacGetFCntDown+0x158>)
 80124ae:	691b      	ldr	r3, [r3, #16]
 80124b0:	617b      	str	r3, [r7, #20]
            break;
 80124b2:	e016      	b.n	80124e2 <LoRaMacGetFCntDown+0xce>
        case MULTICAST_1_ADDR:
            *fCntID = MC_FCNT_DOWN_1;
 80124b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124b6:	2205      	movs	r2, #5
 80124b8:	701a      	strb	r2, [r3, #0]
            previousDown = FCntHandlerNvmCtx.FCntList.McFCntDown1;
 80124ba:	4b2c      	ldr	r3, [pc, #176]	; (801256c <LoRaMacGetFCntDown+0x158>)
 80124bc:	695b      	ldr	r3, [r3, #20]
 80124be:	617b      	str	r3, [r7, #20]
            break;
 80124c0:	e00f      	b.n	80124e2 <LoRaMacGetFCntDown+0xce>
        case MULTICAST_2_ADDR:
            *fCntID = MC_FCNT_DOWN_2;
 80124c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124c4:	2206      	movs	r2, #6
 80124c6:	701a      	strb	r2, [r3, #0]
            previousDown = FCntHandlerNvmCtx.FCntList.McFCntDown3;
 80124c8:	4b28      	ldr	r3, [pc, #160]	; (801256c <LoRaMacGetFCntDown+0x158>)
 80124ca:	69db      	ldr	r3, [r3, #28]
 80124cc:	617b      	str	r3, [r7, #20]
            break;
 80124ce:	e008      	b.n	80124e2 <LoRaMacGetFCntDown+0xce>
        case MULTICAST_3_ADDR:
            *fCntID = MC_FCNT_DOWN_3;
 80124d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124d2:	2207      	movs	r2, #7
 80124d4:	701a      	strb	r2, [r3, #0]
            previousDown = FCntHandlerNvmCtx.FCntList.McFCntDown3;
 80124d6:	4b25      	ldr	r3, [pc, #148]	; (801256c <LoRaMacGetFCntDown+0x158>)
 80124d8:	69db      	ldr	r3, [r3, #28]
 80124da:	617b      	str	r3, [r7, #20]
            break;
 80124dc:	e001      	b.n	80124e2 <LoRaMacGetFCntDown+0xce>
        default:
            return LORAMAC_FCNT_HANDLER_ERROR;
 80124de:	2305      	movs	r3, #5
 80124e0:	e03d      	b.n	801255e <LoRaMacGetFCntDown+0x14a>
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( previousDown == FCNT_DOWN_INITAL_VALUE )
 80124e2:	697b      	ldr	r3, [r7, #20]
 80124e4:	3301      	adds	r3, #1
 80124e6:	d105      	bne.n	80124f4 <LoRaMacGetFCntDown+0xe0>
    {
         *currentDown = macMsg->FHDR.FCnt;
 80124e8:	68bb      	ldr	r3, [r7, #8]
 80124ea:	89db      	ldrh	r3, [r3, #14]
 80124ec:	001a      	movs	r2, r3
 80124ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124f0:	601a      	str	r2, [r3, #0]
 80124f2:	e023      	b.n	801253c <LoRaMacGetFCntDown+0x128>
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )macMsg->FHDR.FCnt - ( int32_t )( previousDown & 0x0000FFFF );
 80124f4:	68bb      	ldr	r3, [r7, #8]
 80124f6:	89db      	ldrh	r3, [r3, #14]
 80124f8:	001a      	movs	r2, r3
 80124fa:	697b      	ldr	r3, [r7, #20]
 80124fc:	041b      	lsls	r3, r3, #16
 80124fe:	0c1b      	lsrs	r3, r3, #16
 8012500:	1ad3      	subs	r3, r2, r3
 8012502:	613b      	str	r3, [r7, #16]

        if( fCntDiff > 0 )
 8012504:	693b      	ldr	r3, [r7, #16]
 8012506:	2b00      	cmp	r3, #0
 8012508:	dd05      	ble.n	8012516 <LoRaMacGetFCntDown+0x102>
        {  // Positive difference
            *currentDown = previousDown + fCntDiff;
 801250a:	693a      	ldr	r2, [r7, #16]
 801250c:	697b      	ldr	r3, [r7, #20]
 801250e:	18d2      	adds	r2, r2, r3
 8012510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012512:	601a      	str	r2, [r3, #0]
 8012514:	e012      	b.n	801253c <LoRaMacGetFCntDown+0x128>
        }
        else if( fCntDiff == 0 )
 8012516:	693b      	ldr	r3, [r7, #16]
 8012518:	2b00      	cmp	r3, #0
 801251a:	d104      	bne.n	8012526 <LoRaMacGetFCntDown+0x112>
        {  // Duplicate FCnt value, keep the current value.
            *currentDown = previousDown;
 801251c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801251e:	697a      	ldr	r2, [r7, #20]
 8012520:	601a      	str	r2, [r3, #0]
            return LORAMAC_FCNT_HANDLER_CHECK_FAIL;
 8012522:	2301      	movs	r3, #1
 8012524:	e01b      	b.n	801255e <LoRaMacGetFCntDown+0x14a>
        }
        else
        {  // Negative difference, assume a roll-over of one uint16_t
            *currentDown = ( previousDown & 0xFFFF0000 ) + 0x10000 + macMsg->FHDR.FCnt;
 8012526:	697b      	ldr	r3, [r7, #20]
 8012528:	0c1b      	lsrs	r3, r3, #16
 801252a:	041b      	lsls	r3, r3, #16
 801252c:	68ba      	ldr	r2, [r7, #8]
 801252e:	89d2      	ldrh	r2, [r2, #14]
 8012530:	189b      	adds	r3, r3, r2
 8012532:	2280      	movs	r2, #128	; 0x80
 8012534:	0252      	lsls	r2, r2, #9
 8012536:	189a      	adds	r2, r3, r2
 8012538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801253a:	601a      	str	r2, [r3, #0]
        }
    }


    // For LoRaWAN 1.0.X only, check maxFCntGap
    if( lrWanVersion.Fields.Minor == 0 )
 801253c:	1d3b      	adds	r3, r7, #4
 801253e:	789b      	ldrb	r3, [r3, #2]
 8012540:	2b00      	cmp	r3, #0
 8012542:	d10b      	bne.n	801255c <LoRaMacGetFCntDown+0x148>
    {
        if( ( ( int32_t )*currentDown - ( int32_t )previousDown ) >= maxFCntGap )
 8012544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012546:	681b      	ldr	r3, [r3, #0]
 8012548:	001a      	movs	r2, r3
 801254a:	697b      	ldr	r3, [r7, #20]
 801254c:	1ad2      	subs	r2, r2, r3
 801254e:	2320      	movs	r3, #32
 8012550:	18fb      	adds	r3, r7, r3
 8012552:	881b      	ldrh	r3, [r3, #0]
 8012554:	429a      	cmp	r2, r3
 8012556:	db01      	blt.n	801255c <LoRaMacGetFCntDown+0x148>
        {
            return LORAMAC_FCNT_HANDLER_MAX_GAP_FAIL;
 8012558:	2302      	movs	r3, #2
 801255a:	e000      	b.n	801255e <LoRaMacGetFCntDown+0x14a>
        }
    }

    return LORAMAC_FCNT_HANDLER_SUCCESS;
 801255c:	2300      	movs	r3, #0
}
 801255e:	0018      	movs	r0, r3
 8012560:	46bd      	mov	sp, r7
 8012562:	b006      	add	sp, #24
 8012564:	bd80      	pop	{r7, pc}
 8012566:	46c0      	nop			; (mov r8, r8)
 8012568:	080219e8 	.word	0x080219e8
 801256c:	20000f18 	.word	0x20000f18

08012570 <LoRaMacSetFCntDown>:

LoRaMacFCntHandlerStatus_t LoRaMacSetFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8012570:	b580      	push	{r7, lr}
 8012572:	b082      	sub	sp, #8
 8012574:	af00      	add	r7, sp, #0
 8012576:	0002      	movs	r2, r0
 8012578:	6039      	str	r1, [r7, #0]
 801257a:	1dfb      	adds	r3, r7, #7
 801257c:	701a      	strb	r2, [r3, #0]
    switch( fCntID )
 801257e:	1dfb      	adds	r3, r7, #7
 8012580:	781b      	ldrb	r3, [r3, #0]
 8012582:	2b07      	cmp	r3, #7
 8012584:	d822      	bhi.n	80125cc <LoRaMacSetFCntDown+0x5c>
 8012586:	009a      	lsls	r2, r3, #2
 8012588:	4b15      	ldr	r3, [pc, #84]	; (80125e0 <LoRaMacSetFCntDown+0x70>)
 801258a:	18d3      	adds	r3, r2, r3
 801258c:	681b      	ldr	r3, [r3, #0]
 801258e:	469f      	mov	pc, r3
    {
        case FCNT_UP:
            return LORAMAC_FCNT_HANDLER_ERROR_INVALID_FCNT_ID;
 8012590:	2303      	movs	r3, #3
 8012592:	e020      	b.n	80125d6 <LoRaMacSetFCntDown+0x66>
        case N_FCNT_DOWN:
            FCntHandlerNvmCtx.FCntList.NFCntDown = currentDown;
 8012594:	4b13      	ldr	r3, [pc, #76]	; (80125e4 <LoRaMacSetFCntDown+0x74>)
 8012596:	683a      	ldr	r2, [r7, #0]
 8012598:	605a      	str	r2, [r3, #4]
            break;
 801259a:	e019      	b.n	80125d0 <LoRaMacSetFCntDown+0x60>
        case A_FCNT_DOWN:
            FCntHandlerNvmCtx.FCntList.AFCntDown = currentDown;
 801259c:	4b11      	ldr	r3, [pc, #68]	; (80125e4 <LoRaMacSetFCntDown+0x74>)
 801259e:	683a      	ldr	r2, [r7, #0]
 80125a0:	609a      	str	r2, [r3, #8]
            break;
 80125a2:	e015      	b.n	80125d0 <LoRaMacSetFCntDown+0x60>
        case FCNT_DOWN:
            FCntHandlerNvmCtx.FCntList.FCntDown = currentDown;
 80125a4:	4b0f      	ldr	r3, [pc, #60]	; (80125e4 <LoRaMacSetFCntDown+0x74>)
 80125a6:	683a      	ldr	r2, [r7, #0]
 80125a8:	60da      	str	r2, [r3, #12]
            break;
 80125aa:	e011      	b.n	80125d0 <LoRaMacSetFCntDown+0x60>
        case MC_FCNT_DOWN_0:
            FCntHandlerNvmCtx.FCntList.McFCntDown0 = currentDown;
 80125ac:	4b0d      	ldr	r3, [pc, #52]	; (80125e4 <LoRaMacSetFCntDown+0x74>)
 80125ae:	683a      	ldr	r2, [r7, #0]
 80125b0:	611a      	str	r2, [r3, #16]
            break;
 80125b2:	e00d      	b.n	80125d0 <LoRaMacSetFCntDown+0x60>
        case MC_FCNT_DOWN_1:
            FCntHandlerNvmCtx.FCntList.McFCntDown1 = currentDown;
 80125b4:	4b0b      	ldr	r3, [pc, #44]	; (80125e4 <LoRaMacSetFCntDown+0x74>)
 80125b6:	683a      	ldr	r2, [r7, #0]
 80125b8:	615a      	str	r2, [r3, #20]
            break;
 80125ba:	e009      	b.n	80125d0 <LoRaMacSetFCntDown+0x60>
        case MC_FCNT_DOWN_2:
            FCntHandlerNvmCtx.FCntList.McFCntDown2 = currentDown;
 80125bc:	4b09      	ldr	r3, [pc, #36]	; (80125e4 <LoRaMacSetFCntDown+0x74>)
 80125be:	683a      	ldr	r2, [r7, #0]
 80125c0:	619a      	str	r2, [r3, #24]
            break;
 80125c2:	e005      	b.n	80125d0 <LoRaMacSetFCntDown+0x60>
        case MC_FCNT_DOWN_3:
            FCntHandlerNvmCtx.FCntList.McFCntDown3 = currentDown;
 80125c4:	4b07      	ldr	r3, [pc, #28]	; (80125e4 <LoRaMacSetFCntDown+0x74>)
 80125c6:	683a      	ldr	r2, [r7, #0]
 80125c8:	61da      	str	r2, [r3, #28]
            break;
 80125ca:	e001      	b.n	80125d0 <LoRaMacSetFCntDown+0x60>
        default:
            return LORAMAC_FCNT_HANDLER_ERROR;
 80125cc:	2305      	movs	r3, #5
 80125ce:	e002      	b.n	80125d6 <LoRaMacSetFCntDown+0x66>
    }

    NvmCtxChanged( );
 80125d0:	f7ff fede 	bl	8012390 <NvmCtxChanged>

    return LORAMAC_FCNT_HANDLER_SUCCESS;
 80125d4:	2300      	movs	r3, #0
}
 80125d6:	0018      	movs	r0, r3
 80125d8:	46bd      	mov	sp, r7
 80125da:	b002      	add	sp, #8
 80125dc:	bd80      	pop	{r7, pc}
 80125de:	46c0      	nop			; (mov r8, r8)
 80125e0:	080219fc 	.word	0x080219fc
 80125e4:	20000f18 	.word	0x20000f18

080125e8 <LoRaMacGetFCntUp>:

LoRaMacFCntHandlerStatus_t LoRaMacGetFCntUp( uint32_t* currentUp )
{
 80125e8:	b580      	push	{r7, lr}
 80125ea:	b082      	sub	sp, #8
 80125ec:	af00      	add	r7, sp, #0
 80125ee:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	2b00      	cmp	r3, #0
 80125f4:	d101      	bne.n	80125fa <LoRaMacGetFCntUp+0x12>
    {
        return LORAMAC_FCNT_HANDLER_ERROR_NPE;
 80125f6:	2304      	movs	r3, #4
 80125f8:	e005      	b.n	8012606 <LoRaMacGetFCntUp+0x1e>
    }

    *currentUp = FCntHandlerNvmCtx.FCntList.FCntUp + 1;
 80125fa:	4b05      	ldr	r3, [pc, #20]	; (8012610 <LoRaMacGetFCntUp+0x28>)
 80125fc:	681b      	ldr	r3, [r3, #0]
 80125fe:	1c5a      	adds	r2, r3, #1
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	601a      	str	r2, [r3, #0]

    return LORAMAC_FCNT_HANDLER_SUCCESS;
 8012604:	2300      	movs	r3, #0
}
 8012606:	0018      	movs	r0, r3
 8012608:	46bd      	mov	sp, r7
 801260a:	b002      	add	sp, #8
 801260c:	bd80      	pop	{r7, pc}
 801260e:	46c0      	nop			; (mov r8, r8)
 8012610:	20000f18 	.word	0x20000f18

08012614 <LoRaMacSetFCntUp>:

LoRaMacFCntHandlerStatus_t LoRaMacSetFCntUp( uint32_t currentUp )
{
 8012614:	b580      	push	{r7, lr}
 8012616:	b082      	sub	sp, #8
 8012618:	af00      	add	r7, sp, #0
 801261a:	6078      	str	r0, [r7, #4]
    FCntHandlerNvmCtx.FCntList.FCntUp = currentUp;
 801261c:	4b04      	ldr	r3, [pc, #16]	; (8012630 <LoRaMacSetFCntUp+0x1c>)
 801261e:	687a      	ldr	r2, [r7, #4]
 8012620:	601a      	str	r2, [r3, #0]

    NvmCtxChanged( );
 8012622:	f7ff feb5 	bl	8012390 <NvmCtxChanged>

    return LORAMAC_FCNT_HANDLER_SUCCESS;
 8012626:	2300      	movs	r3, #0
}
 8012628:	0018      	movs	r0, r3
 801262a:	46bd      	mov	sp, r7
 801262c:	b002      	add	sp, #8
 801262e:	bd80      	pop	{r7, pc}
 8012630:	20000f18 	.word	0x20000f18

08012634 <LoRaMacResetFCnts>:

LoRaMacFCntHandlerStatus_t LoRaMacResetFCnts( void )
{
 8012634:	b580      	push	{r7, lr}
 8012636:	af00      	add	r7, sp, #0

    FCntHandlerNvmCtx.FCntList.FCntUp = 0;
 8012638:	4b12      	ldr	r3, [pc, #72]	; (8012684 <LoRaMacResetFCnts+0x50>)
 801263a:	2200      	movs	r2, #0
 801263c:	601a      	str	r2, [r3, #0]
    FCntHandlerNvmCtx.FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 801263e:	4b11      	ldr	r3, [pc, #68]	; (8012684 <LoRaMacResetFCnts+0x50>)
 8012640:	2201      	movs	r2, #1
 8012642:	4252      	negs	r2, r2
 8012644:	605a      	str	r2, [r3, #4]
    FCntHandlerNvmCtx.FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 8012646:	4b0f      	ldr	r3, [pc, #60]	; (8012684 <LoRaMacResetFCnts+0x50>)
 8012648:	2201      	movs	r2, #1
 801264a:	4252      	negs	r2, r2
 801264c:	609a      	str	r2, [r3, #8]
    FCntHandlerNvmCtx.FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 801264e:	4b0d      	ldr	r3, [pc, #52]	; (8012684 <LoRaMacResetFCnts+0x50>)
 8012650:	2201      	movs	r2, #1
 8012652:	4252      	negs	r2, r2
 8012654:	60da      	str	r2, [r3, #12]

    FCntHandlerNvmCtx.FCntList.McFCntDown0 = FCNT_DOWN_INITAL_VALUE;
 8012656:	4b0b      	ldr	r3, [pc, #44]	; (8012684 <LoRaMacResetFCnts+0x50>)
 8012658:	2201      	movs	r2, #1
 801265a:	4252      	negs	r2, r2
 801265c:	611a      	str	r2, [r3, #16]
    FCntHandlerNvmCtx.FCntList.McFCntDown1 = FCNT_DOWN_INITAL_VALUE;
 801265e:	4b09      	ldr	r3, [pc, #36]	; (8012684 <LoRaMacResetFCnts+0x50>)
 8012660:	2201      	movs	r2, #1
 8012662:	4252      	negs	r2, r2
 8012664:	615a      	str	r2, [r3, #20]
    FCntHandlerNvmCtx.FCntList.McFCntDown2 = FCNT_DOWN_INITAL_VALUE;
 8012666:	4b07      	ldr	r3, [pc, #28]	; (8012684 <LoRaMacResetFCnts+0x50>)
 8012668:	2201      	movs	r2, #1
 801266a:	4252      	negs	r2, r2
 801266c:	619a      	str	r2, [r3, #24]
    FCntHandlerNvmCtx.FCntList.McFCntDown3 = FCNT_DOWN_INITAL_VALUE;
 801266e:	4b05      	ldr	r3, [pc, #20]	; (8012684 <LoRaMacResetFCnts+0x50>)
 8012670:	2201      	movs	r2, #1
 8012672:	4252      	negs	r2, r2
 8012674:	61da      	str	r2, [r3, #28]

    NvmCtxChanged( );
 8012676:	f7ff fe8b 	bl	8012390 <NvmCtxChanged>

    return LORAMAC_FCNT_HANDLER_SUCCESS;
 801267a:	2300      	movs	r3, #0
}
 801267c:	0018      	movs	r0, r3
 801267e:	46bd      	mov	sp, r7
 8012680:	bd80      	pop	{r7, pc}
 8012682:	46c0      	nop			; (mov r8, r8)
 8012684:	20000f18 	.word	0x20000f18

08012688 <LoRaMacFCntHandlerSetMulticastReference>:

LoRaMacFCntHandlerStatus_t LoRaMacFCntHandlerSetMulticastReference( MulticastCtx_t* multicastList )
{
 8012688:	b580      	push	{r7, lr}
 801268a:	b082      	sub	sp, #8
 801268c:	af00      	add	r7, sp, #0
 801268e:	6078      	str	r0, [r7, #4]
    if( multicastList == NULL )
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	2b00      	cmp	r3, #0
 8012694:	d101      	bne.n	801269a <LoRaMacFCntHandlerSetMulticastReference+0x12>
    {
        return LORAMAC_FCNT_HANDLER_ERROR_NPE;
 8012696:	2304      	movs	r3, #4
 8012698:	e00f      	b.n	80126ba <LoRaMacFCntHandlerSetMulticastReference+0x32>
    }

    multicastList[0].DownLinkCounter = &FCntHandlerNvmCtx.FCntList.McFCntDown0;
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	4a09      	ldr	r2, [pc, #36]	; (80126c4 <LoRaMacFCntHandlerSetMulticastReference+0x3c>)
 801269e:	609a      	str	r2, [r3, #8]
    multicastList[1].DownLinkCounter = &FCntHandlerNvmCtx.FCntList.McFCntDown1;
 80126a0:	687b      	ldr	r3, [r7, #4]
 80126a2:	3320      	adds	r3, #32
 80126a4:	4a08      	ldr	r2, [pc, #32]	; (80126c8 <LoRaMacFCntHandlerSetMulticastReference+0x40>)
 80126a6:	609a      	str	r2, [r3, #8]
    multicastList[2].DownLinkCounter = &FCntHandlerNvmCtx.FCntList.McFCntDown2;
 80126a8:	687b      	ldr	r3, [r7, #4]
 80126aa:	3340      	adds	r3, #64	; 0x40
 80126ac:	4a07      	ldr	r2, [pc, #28]	; (80126cc <LoRaMacFCntHandlerSetMulticastReference+0x44>)
 80126ae:	609a      	str	r2, [r3, #8]
    multicastList[3].DownLinkCounter = &FCntHandlerNvmCtx.FCntList.McFCntDown3;
 80126b0:	687b      	ldr	r3, [r7, #4]
 80126b2:	3360      	adds	r3, #96	; 0x60
 80126b4:	4a06      	ldr	r2, [pc, #24]	; (80126d0 <LoRaMacFCntHandlerSetMulticastReference+0x48>)
 80126b6:	609a      	str	r2, [r3, #8]

    return LORAMAC_FCNT_HANDLER_SUCCESS;
 80126b8:	2300      	movs	r3, #0
}
 80126ba:	0018      	movs	r0, r3
 80126bc:	46bd      	mov	sp, r7
 80126be:	b002      	add	sp, #8
 80126c0:	bd80      	pop	{r7, pc}
 80126c2:	46c0      	nop			; (mov r8, r8)
 80126c4:	20000f28 	.word	0x20000f28
 80126c8:	20000f2c 	.word	0x20000f2c
 80126cc:	20000f30 	.word	0x20000f30
 80126d0:	20000f34 	.word	0x20000f34

080126d4 <LoRaMacParserJoinAccept>:

#include <drivers/lorawan/utilities.h>
#include <drivers/lorawan/mac/LoRaMacParser.h>

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 80126d4:	b590      	push	{r4, r7, lr}
 80126d6:	b085      	sub	sp, #20
 80126d8:	af00      	add	r7, sp, #0
 80126da:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80126dc:	687b      	ldr	r3, [r7, #4]
 80126de:	2b00      	cmp	r3, #0
 80126e0:	d003      	beq.n	80126ea <LoRaMacParserJoinAccept+0x16>
 80126e2:	687b      	ldr	r3, [r7, #4]
 80126e4:	681b      	ldr	r3, [r3, #0]
 80126e6:	2b00      	cmp	r3, #0
 80126e8:	d101      	bne.n	80126ee <LoRaMacParserJoinAccept+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 80126ea:	2302      	movs	r3, #2
 80126ec:	e0df      	b.n	80128ae <LoRaMacParserJoinAccept+0x1da>
    }

    uint16_t bufItr = 0;
 80126ee:	240e      	movs	r4, #14
 80126f0:	193b      	adds	r3, r7, r4
 80126f2:	2200      	movs	r2, #0
 80126f4:	801a      	strh	r2, [r3, #0]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 80126f6:	687b      	ldr	r3, [r7, #4]
 80126f8:	681a      	ldr	r2, [r3, #0]
 80126fa:	193b      	adds	r3, r7, r4
 80126fc:	881b      	ldrh	r3, [r3, #0]
 80126fe:	1939      	adds	r1, r7, r4
 8012700:	1c58      	adds	r0, r3, #1
 8012702:	8008      	strh	r0, [r1, #0]
 8012704:	18d3      	adds	r3, r2, r3
 8012706:	781a      	ldrb	r2, [r3, #0]
 8012708:	687b      	ldr	r3, [r7, #4]
 801270a:	715a      	strb	r2, [r3, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 801270c:	687b      	ldr	r3, [r7, #4]
 801270e:	1d98      	adds	r0, r3, #6
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	681a      	ldr	r2, [r3, #0]
 8012714:	193b      	adds	r3, r7, r4
 8012716:	881b      	ldrh	r3, [r3, #0]
 8012718:	18d3      	adds	r3, r2, r3
 801271a:	2203      	movs	r2, #3
 801271c:	0019      	movs	r1, r3
 801271e:	f003 f967 	bl	80159f0 <memcpy1>
    bufItr = bufItr + 3;
 8012722:	193b      	adds	r3, r7, r4
 8012724:	193a      	adds	r2, r7, r4
 8012726:	8812      	ldrh	r2, [r2, #0]
 8012728:	3203      	adds	r2, #3
 801272a:	801a      	strh	r2, [r3, #0]

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 801272c:	687b      	ldr	r3, [r7, #4]
 801272e:	3309      	adds	r3, #9
 8012730:	0018      	movs	r0, r3
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	681a      	ldr	r2, [r3, #0]
 8012736:	193b      	adds	r3, r7, r4
 8012738:	881b      	ldrh	r3, [r3, #0]
 801273a:	18d3      	adds	r3, r2, r3
 801273c:	2203      	movs	r2, #3
 801273e:	0019      	movs	r1, r3
 8012740:	f003 f956 	bl	80159f0 <memcpy1>
    bufItr = bufItr + 3;
 8012744:	193b      	adds	r3, r7, r4
 8012746:	193a      	adds	r2, r7, r4
 8012748:	8812      	ldrh	r2, [r2, #0]
 801274a:	3203      	adds	r2, #3
 801274c:	801a      	strh	r2, [r3, #0]

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 801274e:	687b      	ldr	r3, [r7, #4]
 8012750:	681a      	ldr	r2, [r3, #0]
 8012752:	193b      	adds	r3, r7, r4
 8012754:	881b      	ldrh	r3, [r3, #0]
 8012756:	1939      	adds	r1, r7, r4
 8012758:	1c58      	adds	r0, r3, #1
 801275a:	8008      	strh	r0, [r1, #0]
 801275c:	18d3      	adds	r3, r2, r3
 801275e:	781b      	ldrb	r3, [r3, #0]
 8012760:	001a      	movs	r2, r3
 8012762:	687b      	ldr	r3, [r7, #4]
 8012764:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8012766:	687b      	ldr	r3, [r7, #4]
 8012768:	681a      	ldr	r2, [r3, #0]
 801276a:	193b      	adds	r3, r7, r4
 801276c:	881b      	ldrh	r3, [r3, #0]
 801276e:	1939      	adds	r1, r7, r4
 8012770:	1c58      	adds	r0, r3, #1
 8012772:	8008      	strh	r0, [r1, #0]
 8012774:	18d3      	adds	r3, r2, r3
 8012776:	781b      	ldrb	r3, [r3, #0]
 8012778:	021a      	lsls	r2, r3, #8
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	68db      	ldr	r3, [r3, #12]
 801277e:	431a      	orrs	r2, r3
 8012780:	687b      	ldr	r3, [r7, #4]
 8012782:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8012784:	687b      	ldr	r3, [r7, #4]
 8012786:	681a      	ldr	r2, [r3, #0]
 8012788:	193b      	adds	r3, r7, r4
 801278a:	881b      	ldrh	r3, [r3, #0]
 801278c:	1939      	adds	r1, r7, r4
 801278e:	1c58      	adds	r0, r3, #1
 8012790:	8008      	strh	r0, [r1, #0]
 8012792:	18d3      	adds	r3, r2, r3
 8012794:	781b      	ldrb	r3, [r3, #0]
 8012796:	041a      	lsls	r2, r3, #16
 8012798:	687b      	ldr	r3, [r7, #4]
 801279a:	68db      	ldr	r3, [r3, #12]
 801279c:	431a      	orrs	r2, r3
 801279e:	687b      	ldr	r3, [r7, #4]
 80127a0:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 80127a2:	687b      	ldr	r3, [r7, #4]
 80127a4:	681a      	ldr	r2, [r3, #0]
 80127a6:	193b      	adds	r3, r7, r4
 80127a8:	881b      	ldrh	r3, [r3, #0]
 80127aa:	1939      	adds	r1, r7, r4
 80127ac:	1c58      	adds	r0, r3, #1
 80127ae:	8008      	strh	r0, [r1, #0]
 80127b0:	18d3      	adds	r3, r2, r3
 80127b2:	781b      	ldrb	r3, [r3, #0]
 80127b4:	061a      	lsls	r2, r3, #24
 80127b6:	687b      	ldr	r3, [r7, #4]
 80127b8:	68db      	ldr	r3, [r3, #12]
 80127ba:	431a      	orrs	r2, r3
 80127bc:	687b      	ldr	r3, [r7, #4]
 80127be:	60da      	str	r2, [r3, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 80127c0:	687b      	ldr	r3, [r7, #4]
 80127c2:	681a      	ldr	r2, [r3, #0]
 80127c4:	193b      	adds	r3, r7, r4
 80127c6:	881b      	ldrh	r3, [r3, #0]
 80127c8:	1939      	adds	r1, r7, r4
 80127ca:	1c58      	adds	r0, r3, #1
 80127cc:	8008      	strh	r0, [r1, #0]
 80127ce:	18d3      	adds	r3, r2, r3
 80127d0:	781a      	ldrb	r2, [r3, #0]
 80127d2:	687b      	ldr	r3, [r7, #4]
 80127d4:	741a      	strb	r2, [r3, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 80127d6:	687b      	ldr	r3, [r7, #4]
 80127d8:	681a      	ldr	r2, [r3, #0]
 80127da:	193b      	adds	r3, r7, r4
 80127dc:	881b      	ldrh	r3, [r3, #0]
 80127de:	1939      	adds	r1, r7, r4
 80127e0:	1c58      	adds	r0, r3, #1
 80127e2:	8008      	strh	r0, [r1, #0]
 80127e4:	18d3      	adds	r3, r2, r3
 80127e6:	781a      	ldrb	r2, [r3, #0]
 80127e8:	687b      	ldr	r3, [r7, #4]
 80127ea:	745a      	strb	r2, [r3, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_C_FLIST_FIELD_SIZE )
 80127ec:	687b      	ldr	r3, [r7, #4]
 80127ee:	791b      	ldrb	r3, [r3, #4]
 80127f0:	1f1a      	subs	r2, r3, #4
 80127f2:	193b      	adds	r3, r7, r4
 80127f4:	881b      	ldrh	r3, [r3, #0]
 80127f6:	1ad3      	subs	r3, r2, r3
 80127f8:	2b10      	cmp	r3, #16
 80127fa:	d112      	bne.n	8012822 <LoRaMacParserJoinAccept+0x14e>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_C_FLIST_FIELD_SIZE );
 80127fc:	687b      	ldr	r3, [r7, #4]
 80127fe:	3312      	adds	r3, #18
 8012800:	0018      	movs	r0, r3
 8012802:	687b      	ldr	r3, [r7, #4]
 8012804:	681a      	ldr	r2, [r3, #0]
 8012806:	240e      	movs	r4, #14
 8012808:	193b      	adds	r3, r7, r4
 801280a:	881b      	ldrh	r3, [r3, #0]
 801280c:	18d3      	adds	r3, r2, r3
 801280e:	2210      	movs	r2, #16
 8012810:	0019      	movs	r1, r3
 8012812:	f003 f8ed 	bl	80159f0 <memcpy1>
        bufItr = bufItr + LORAMAC_C_FLIST_FIELD_SIZE;
 8012816:	193b      	adds	r3, r7, r4
 8012818:	193a      	adds	r2, r7, r4
 801281a:	8812      	ldrh	r2, [r2, #0]
 801281c:	3210      	adds	r2, #16
 801281e:	801a      	strh	r2, [r3, #0]
 8012820:	e00a      	b.n	8012838 <LoRaMacParserJoinAccept+0x164>
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 8012822:	687b      	ldr	r3, [r7, #4]
 8012824:	791b      	ldrb	r3, [r3, #4]
 8012826:	1f1a      	subs	r2, r3, #4
 8012828:	230e      	movs	r3, #14
 801282a:	18fb      	adds	r3, r7, r3
 801282c:	881b      	ldrh	r3, [r3, #0]
 801282e:	1ad3      	subs	r3, r2, r3
 8012830:	2b00      	cmp	r3, #0
 8012832:	dd01      	ble.n	8012838 <LoRaMacParserJoinAccept+0x164>
    {
        return LORAMAC_PARSER_FAIL;
 8012834:	2301      	movs	r3, #1
 8012836:	e03a      	b.n	80128ae <LoRaMacParserJoinAccept+0x1da>
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 8012838:	687b      	ldr	r3, [r7, #4]
 801283a:	681a      	ldr	r2, [r3, #0]
 801283c:	240e      	movs	r4, #14
 801283e:	193b      	adds	r3, r7, r4
 8012840:	881b      	ldrh	r3, [r3, #0]
 8012842:	1939      	adds	r1, r7, r4
 8012844:	1c58      	adds	r0, r3, #1
 8012846:	8008      	strh	r0, [r1, #0]
 8012848:	18d3      	adds	r3, r2, r3
 801284a:	781b      	ldrb	r3, [r3, #0]
 801284c:	001a      	movs	r2, r3
 801284e:	687b      	ldr	r3, [r7, #4]
 8012850:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8012852:	687b      	ldr	r3, [r7, #4]
 8012854:	681a      	ldr	r2, [r3, #0]
 8012856:	193b      	adds	r3, r7, r4
 8012858:	881b      	ldrh	r3, [r3, #0]
 801285a:	1939      	adds	r1, r7, r4
 801285c:	1c58      	adds	r0, r3, #1
 801285e:	8008      	strh	r0, [r1, #0]
 8012860:	18d3      	adds	r3, r2, r3
 8012862:	781b      	ldrb	r3, [r3, #0]
 8012864:	021a      	lsls	r2, r3, #8
 8012866:	687b      	ldr	r3, [r7, #4]
 8012868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801286a:	431a      	orrs	r2, r3
 801286c:	687b      	ldr	r3, [r7, #4]
 801286e:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8012870:	687b      	ldr	r3, [r7, #4]
 8012872:	681a      	ldr	r2, [r3, #0]
 8012874:	193b      	adds	r3, r7, r4
 8012876:	881b      	ldrh	r3, [r3, #0]
 8012878:	1939      	adds	r1, r7, r4
 801287a:	1c58      	adds	r0, r3, #1
 801287c:	8008      	strh	r0, [r1, #0]
 801287e:	18d3      	adds	r3, r2, r3
 8012880:	781b      	ldrb	r3, [r3, #0]
 8012882:	041a      	lsls	r2, r3, #16
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012888:	431a      	orrs	r2, r3
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 801288e:	687b      	ldr	r3, [r7, #4]
 8012890:	681a      	ldr	r2, [r3, #0]
 8012892:	193b      	adds	r3, r7, r4
 8012894:	881b      	ldrh	r3, [r3, #0]
 8012896:	1939      	adds	r1, r7, r4
 8012898:	1c58      	adds	r0, r3, #1
 801289a:	8008      	strh	r0, [r1, #0]
 801289c:	18d3      	adds	r3, r2, r3
 801289e:	781b      	ldrb	r3, [r3, #0]
 80128a0:	061a      	lsls	r2, r3, #24
 80128a2:	687b      	ldr	r3, [r7, #4]
 80128a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80128a6:	431a      	orrs	r2, r3
 80128a8:	687b      	ldr	r3, [r7, #4]
 80128aa:	625a      	str	r2, [r3, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 80128ac:	2300      	movs	r3, #0
}
 80128ae:	0018      	movs	r0, r3
 80128b0:	46bd      	mov	sp, r7
 80128b2:	b005      	add	sp, #20
 80128b4:	bd90      	pop	{r4, r7, pc}

080128b6 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 80128b6:	b590      	push	{r4, r7, lr}
 80128b8:	b085      	sub	sp, #20
 80128ba:	af00      	add	r7, sp, #0
 80128bc:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80128be:	687b      	ldr	r3, [r7, #4]
 80128c0:	2b00      	cmp	r3, #0
 80128c2:	d003      	beq.n	80128cc <LoRaMacParserData+0x16>
 80128c4:	687b      	ldr	r3, [r7, #4]
 80128c6:	681b      	ldr	r3, [r3, #0]
 80128c8:	2b00      	cmp	r3, #0
 80128ca:	d101      	bne.n	80128d0 <LoRaMacParserData+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 80128cc:	2302      	movs	r3, #2
 80128ce:	e100      	b.n	8012ad2 <LoRaMacParserData+0x21c>
    }

    uint16_t bufItr = 0;
 80128d0:	240e      	movs	r4, #14
 80128d2:	193b      	adds	r3, r7, r4
 80128d4:	2200      	movs	r2, #0
 80128d6:	801a      	strh	r2, [r3, #0]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 80128d8:	687b      	ldr	r3, [r7, #4]
 80128da:	681a      	ldr	r2, [r3, #0]
 80128dc:	193b      	adds	r3, r7, r4
 80128de:	881b      	ldrh	r3, [r3, #0]
 80128e0:	1939      	adds	r1, r7, r4
 80128e2:	1c58      	adds	r0, r3, #1
 80128e4:	8008      	strh	r0, [r1, #0]
 80128e6:	18d3      	adds	r3, r2, r3
 80128e8:	781a      	ldrb	r2, [r3, #0]
 80128ea:	687b      	ldr	r3, [r7, #4]
 80128ec:	715a      	strb	r2, [r3, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 80128ee:	687b      	ldr	r3, [r7, #4]
 80128f0:	681a      	ldr	r2, [r3, #0]
 80128f2:	193b      	adds	r3, r7, r4
 80128f4:	881b      	ldrh	r3, [r3, #0]
 80128f6:	1939      	adds	r1, r7, r4
 80128f8:	1c58      	adds	r0, r3, #1
 80128fa:	8008      	strh	r0, [r1, #0]
 80128fc:	18d3      	adds	r3, r2, r3
 80128fe:	781b      	ldrb	r3, [r3, #0]
 8012900:	001a      	movs	r2, r3
 8012902:	687b      	ldr	r3, [r7, #4]
 8012904:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8012906:	687b      	ldr	r3, [r7, #4]
 8012908:	681a      	ldr	r2, [r3, #0]
 801290a:	193b      	adds	r3, r7, r4
 801290c:	881b      	ldrh	r3, [r3, #0]
 801290e:	1939      	adds	r1, r7, r4
 8012910:	1c58      	adds	r0, r3, #1
 8012912:	8008      	strh	r0, [r1, #0]
 8012914:	18d3      	adds	r3, r2, r3
 8012916:	781b      	ldrb	r3, [r3, #0]
 8012918:	021a      	lsls	r2, r3, #8
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	689b      	ldr	r3, [r3, #8]
 801291e:	431a      	orrs	r2, r3
 8012920:	687b      	ldr	r3, [r7, #4]
 8012922:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8012924:	687b      	ldr	r3, [r7, #4]
 8012926:	681a      	ldr	r2, [r3, #0]
 8012928:	193b      	adds	r3, r7, r4
 801292a:	881b      	ldrh	r3, [r3, #0]
 801292c:	1939      	adds	r1, r7, r4
 801292e:	1c58      	adds	r0, r3, #1
 8012930:	8008      	strh	r0, [r1, #0]
 8012932:	18d3      	adds	r3, r2, r3
 8012934:	781b      	ldrb	r3, [r3, #0]
 8012936:	041a      	lsls	r2, r3, #16
 8012938:	687b      	ldr	r3, [r7, #4]
 801293a:	689b      	ldr	r3, [r3, #8]
 801293c:	431a      	orrs	r2, r3
 801293e:	687b      	ldr	r3, [r7, #4]
 8012940:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8012942:	687b      	ldr	r3, [r7, #4]
 8012944:	681a      	ldr	r2, [r3, #0]
 8012946:	193b      	adds	r3, r7, r4
 8012948:	881b      	ldrh	r3, [r3, #0]
 801294a:	1939      	adds	r1, r7, r4
 801294c:	1c58      	adds	r0, r3, #1
 801294e:	8008      	strh	r0, [r1, #0]
 8012950:	18d3      	adds	r3, r2, r3
 8012952:	781b      	ldrb	r3, [r3, #0]
 8012954:	061a      	lsls	r2, r3, #24
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	689b      	ldr	r3, [r3, #8]
 801295a:	431a      	orrs	r2, r3
 801295c:	687b      	ldr	r3, [r7, #4]
 801295e:	609a      	str	r2, [r3, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 8012960:	687b      	ldr	r3, [r7, #4]
 8012962:	681a      	ldr	r2, [r3, #0]
 8012964:	193b      	adds	r3, r7, r4
 8012966:	881b      	ldrh	r3, [r3, #0]
 8012968:	1939      	adds	r1, r7, r4
 801296a:	1c58      	adds	r0, r3, #1
 801296c:	8008      	strh	r0, [r1, #0]
 801296e:	18d3      	adds	r3, r2, r3
 8012970:	781a      	ldrb	r2, [r3, #0]
 8012972:	687b      	ldr	r3, [r7, #4]
 8012974:	731a      	strb	r2, [r3, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 8012976:	687b      	ldr	r3, [r7, #4]
 8012978:	681a      	ldr	r2, [r3, #0]
 801297a:	193b      	adds	r3, r7, r4
 801297c:	881b      	ldrh	r3, [r3, #0]
 801297e:	1939      	adds	r1, r7, r4
 8012980:	1c58      	adds	r0, r3, #1
 8012982:	8008      	strh	r0, [r1, #0]
 8012984:	18d3      	adds	r3, r2, r3
 8012986:	781b      	ldrb	r3, [r3, #0]
 8012988:	b29a      	uxth	r2, r3
 801298a:	687b      	ldr	r3, [r7, #4]
 801298c:	81da      	strh	r2, [r3, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 801298e:	687b      	ldr	r3, [r7, #4]
 8012990:	681a      	ldr	r2, [r3, #0]
 8012992:	193b      	adds	r3, r7, r4
 8012994:	881b      	ldrh	r3, [r3, #0]
 8012996:	1939      	adds	r1, r7, r4
 8012998:	1c58      	adds	r0, r3, #1
 801299a:	8008      	strh	r0, [r1, #0]
 801299c:	18d3      	adds	r3, r2, r3
 801299e:	781b      	ldrb	r3, [r3, #0]
 80129a0:	0219      	lsls	r1, r3, #8
 80129a2:	687b      	ldr	r3, [r7, #4]
 80129a4:	89db      	ldrh	r3, [r3, #14]
 80129a6:	b21a      	sxth	r2, r3
 80129a8:	b20b      	sxth	r3, r1
 80129aa:	4313      	orrs	r3, r2
 80129ac:	b21b      	sxth	r3, r3
 80129ae:	b29a      	uxth	r2, r3
 80129b0:	687b      	ldr	r3, [r7, #4]
 80129b2:	81da      	strh	r2, [r3, #14]

    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
    {
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 80129b4:	687b      	ldr	r3, [r7, #4]
 80129b6:	3310      	adds	r3, #16
 80129b8:	0018      	movs	r0, r3
 80129ba:	687b      	ldr	r3, [r7, #4]
 80129bc:	681a      	ldr	r2, [r3, #0]
 80129be:	193b      	adds	r3, r7, r4
 80129c0:	881b      	ldrh	r3, [r3, #0]
 80129c2:	18d1      	adds	r1, r2, r3
 80129c4:	687b      	ldr	r3, [r7, #4]
 80129c6:	7b1b      	ldrb	r3, [r3, #12]
 80129c8:	071b      	lsls	r3, r3, #28
 80129ca:	0f1b      	lsrs	r3, r3, #28
 80129cc:	b2db      	uxtb	r3, r3
 80129ce:	b29b      	uxth	r3, r3
 80129d0:	001a      	movs	r2, r3
 80129d2:	f003 f80d 	bl	80159f0 <memcpy1>
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 80129d6:	687b      	ldr	r3, [r7, #4]
 80129d8:	7b1b      	ldrb	r3, [r3, #12]
 80129da:	071b      	lsls	r3, r3, #28
 80129dc:	0f1b      	lsrs	r3, r3, #28
 80129de:	b2db      	uxtb	r3, r3
 80129e0:	b299      	uxth	r1, r3
 80129e2:	193b      	adds	r3, r7, r4
 80129e4:	193a      	adds	r2, r7, r4
 80129e6:	8812      	ldrh	r2, [r2, #0]
 80129e8:	188a      	adds	r2, r1, r2
 80129ea:	801a      	strh	r2, [r3, #0]
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 80129ec:	687b      	ldr	r3, [r7, #4]
 80129ee:	2220      	movs	r2, #32
 80129f0:	2100      	movs	r1, #0
 80129f2:	5499      	strb	r1, [r3, r2]
    macMsg->FRMPayloadSize = 0;
 80129f4:	687b      	ldr	r3, [r7, #4]
 80129f6:	2228      	movs	r2, #40	; 0x28
 80129f8:	2100      	movs	r1, #0
 80129fa:	5499      	strb	r1, [r3, r2]

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 80129fc:	687b      	ldr	r3, [r7, #4]
 80129fe:	791b      	ldrb	r3, [r3, #4]
 8012a00:	001a      	movs	r2, r3
 8012a02:	193b      	adds	r3, r7, r4
 8012a04:	881b      	ldrh	r3, [r3, #0]
 8012a06:	1ad3      	subs	r3, r2, r3
 8012a08:	3b04      	subs	r3, #4
 8012a0a:	2b00      	cmp	r3, #0
 8012a0c:	dd2f      	ble.n	8012a6e <LoRaMacParserData+0x1b8>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 8012a0e:	687b      	ldr	r3, [r7, #4]
 8012a10:	681a      	ldr	r2, [r3, #0]
 8012a12:	240e      	movs	r4, #14
 8012a14:	193b      	adds	r3, r7, r4
 8012a16:	881b      	ldrh	r3, [r3, #0]
 8012a18:	1939      	adds	r1, r7, r4
 8012a1a:	1c58      	adds	r0, r3, #1
 8012a1c:	8008      	strh	r0, [r1, #0]
 8012a1e:	18d3      	adds	r3, r2, r3
 8012a20:	7819      	ldrb	r1, [r3, #0]
 8012a22:	687b      	ldr	r3, [r7, #4]
 8012a24:	2220      	movs	r2, #32
 8012a26:	5499      	strb	r1, [r3, r2]

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 8012a28:	687b      	ldr	r3, [r7, #4]
 8012a2a:	791a      	ldrb	r2, [r3, #4]
 8012a2c:	193b      	adds	r3, r7, r4
 8012a2e:	881b      	ldrh	r3, [r3, #0]
 8012a30:	b2db      	uxtb	r3, r3
 8012a32:	1ad3      	subs	r3, r2, r3
 8012a34:	b2db      	uxtb	r3, r3
 8012a36:	3b04      	subs	r3, #4
 8012a38:	b2d9      	uxtb	r1, r3
 8012a3a:	687b      	ldr	r3, [r7, #4]
 8012a3c:	2228      	movs	r2, #40	; 0x28
 8012a3e:	5499      	strb	r1, [r3, r2]
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8012a44:	687b      	ldr	r3, [r7, #4]
 8012a46:	681a      	ldr	r2, [r3, #0]
 8012a48:	193b      	adds	r3, r7, r4
 8012a4a:	881b      	ldrh	r3, [r3, #0]
 8012a4c:	18d1      	adds	r1, r2, r3
 8012a4e:	687b      	ldr	r3, [r7, #4]
 8012a50:	2228      	movs	r2, #40	; 0x28
 8012a52:	5c9b      	ldrb	r3, [r3, r2]
 8012a54:	b29b      	uxth	r3, r3
 8012a56:	001a      	movs	r2, r3
 8012a58:	f002 ffca 	bl	80159f0 <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 8012a5c:	687b      	ldr	r3, [r7, #4]
 8012a5e:	2228      	movs	r2, #40	; 0x28
 8012a60:	5c9b      	ldrb	r3, [r3, r2]
 8012a62:	b299      	uxth	r1, r3
 8012a64:	193b      	adds	r3, r7, r4
 8012a66:	193a      	adds	r2, r7, r4
 8012a68:	8812      	ldrh	r2, [r2, #0]
 8012a6a:	188a      	adds	r2, r1, r2
 8012a6c:	801a      	strh	r2, [r3, #0]
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 8012a6e:	687b      	ldr	r3, [r7, #4]
 8012a70:	681a      	ldr	r2, [r3, #0]
 8012a72:	687b      	ldr	r3, [r7, #4]
 8012a74:	791b      	ldrb	r3, [r3, #4]
 8012a76:	3b04      	subs	r3, #4
 8012a78:	18d3      	adds	r3, r2, r3
 8012a7a:	781b      	ldrb	r3, [r3, #0]
 8012a7c:	001a      	movs	r2, r3
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 8012a82:	687b      	ldr	r3, [r7, #4]
 8012a84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012a86:	687b      	ldr	r3, [r7, #4]
 8012a88:	6819      	ldr	r1, [r3, #0]
 8012a8a:	687b      	ldr	r3, [r7, #4]
 8012a8c:	791b      	ldrb	r3, [r3, #4]
 8012a8e:	3b03      	subs	r3, #3
 8012a90:	18cb      	adds	r3, r1, r3
 8012a92:	781b      	ldrb	r3, [r3, #0]
 8012a94:	021b      	lsls	r3, r3, #8
 8012a96:	431a      	orrs	r2, r3
 8012a98:	687b      	ldr	r3, [r7, #4]
 8012a9a:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012aa0:	687b      	ldr	r3, [r7, #4]
 8012aa2:	6819      	ldr	r1, [r3, #0]
 8012aa4:	687b      	ldr	r3, [r7, #4]
 8012aa6:	791b      	ldrb	r3, [r3, #4]
 8012aa8:	3b02      	subs	r3, #2
 8012aaa:	18cb      	adds	r3, r1, r3
 8012aac:	781b      	ldrb	r3, [r3, #0]
 8012aae:	041b      	lsls	r3, r3, #16
 8012ab0:	431a      	orrs	r2, r3
 8012ab2:	687b      	ldr	r3, [r7, #4]
 8012ab4:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 8012ab6:	687b      	ldr	r3, [r7, #4]
 8012ab8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012aba:	687b      	ldr	r3, [r7, #4]
 8012abc:	6819      	ldr	r1, [r3, #0]
 8012abe:	687b      	ldr	r3, [r7, #4]
 8012ac0:	791b      	ldrb	r3, [r3, #4]
 8012ac2:	3b01      	subs	r3, #1
 8012ac4:	18cb      	adds	r3, r1, r3
 8012ac6:	781b      	ldrb	r3, [r3, #0]
 8012ac8:	061b      	lsls	r3, r3, #24
 8012aca:	431a      	orrs	r2, r3
 8012acc:	687b      	ldr	r3, [r7, #4]
 8012ace:	62da      	str	r2, [r3, #44]	; 0x2c

    return LORAMAC_PARSER_SUCCESS;
 8012ad0:	2300      	movs	r3, #0
}
 8012ad2:	0018      	movs	r0, r3
 8012ad4:	46bd      	mov	sp, r7
 8012ad6:	b005      	add	sp, #20
 8012ad8:	bd90      	pop	{r4, r7, pc}

08012ada <LoRaMacSerializerJoinRequest>:
#include <drivers/lorawan/utilities.h>
#include <drivers/lorawan/mac/LoRaMacSerializer.h>


LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8012ada:	b5b0      	push	{r4, r5, r7, lr}
 8012adc:	b084      	sub	sp, #16
 8012ade:	af00      	add	r7, sp, #0
 8012ae0:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8012ae2:	687b      	ldr	r3, [r7, #4]
 8012ae4:	2b00      	cmp	r3, #0
 8012ae6:	d003      	beq.n	8012af0 <LoRaMacSerializerJoinRequest+0x16>
 8012ae8:	687b      	ldr	r3, [r7, #4]
 8012aea:	681b      	ldr	r3, [r3, #0]
 8012aec:	2b00      	cmp	r3, #0
 8012aee:	d101      	bne.n	8012af4 <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8012af0:	2301      	movs	r3, #1
 8012af2:	e089      	b.n	8012c08 <LoRaMacSerializerJoinRequest+0x12e>
    }

    uint16_t bufItr = 0;
 8012af4:	230e      	movs	r3, #14
 8012af6:	18fb      	adds	r3, r7, r3
 8012af8:	2200      	movs	r2, #0
 8012afa:	801a      	strh	r2, [r3, #0]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 8012afc:	687b      	ldr	r3, [r7, #4]
 8012afe:	791b      	ldrb	r3, [r3, #4]
 8012b00:	2b16      	cmp	r3, #22
 8012b02:	d801      	bhi.n	8012b08 <LoRaMacSerializerJoinRequest+0x2e>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8012b04:	2302      	movs	r3, #2
 8012b06:	e07f      	b.n	8012c08 <LoRaMacSerializerJoinRequest+0x12e>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	681a      	ldr	r2, [r3, #0]
 8012b0c:	240e      	movs	r4, #14
 8012b0e:	193b      	adds	r3, r7, r4
 8012b10:	881b      	ldrh	r3, [r3, #0]
 8012b12:	1939      	adds	r1, r7, r4
 8012b14:	1c58      	adds	r0, r3, #1
 8012b16:	8008      	strh	r0, [r1, #0]
 8012b18:	18d3      	adds	r3, r2, r3
 8012b1a:	687a      	ldr	r2, [r7, #4]
 8012b1c:	7952      	ldrb	r2, [r2, #5]
 8012b1e:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 8012b20:	687b      	ldr	r3, [r7, #4]
 8012b22:	681a      	ldr	r2, [r3, #0]
 8012b24:	193b      	adds	r3, r7, r4
 8012b26:	881b      	ldrh	r3, [r3, #0]
 8012b28:	18d0      	adds	r0, r2, r3
 8012b2a:	687b      	ldr	r3, [r7, #4]
 8012b2c:	3306      	adds	r3, #6
 8012b2e:	2208      	movs	r2, #8
 8012b30:	0019      	movs	r1, r3
 8012b32:	f002 ff78 	bl	8015a26 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 8012b36:	193b      	adds	r3, r7, r4
 8012b38:	193a      	adds	r2, r7, r4
 8012b3a:	8812      	ldrh	r2, [r2, #0]
 8012b3c:	3208      	adds	r2, #8
 8012b3e:	801a      	strh	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 8012b40:	687b      	ldr	r3, [r7, #4]
 8012b42:	681a      	ldr	r2, [r3, #0]
 8012b44:	193b      	adds	r3, r7, r4
 8012b46:	881b      	ldrh	r3, [r3, #0]
 8012b48:	18d0      	adds	r0, r2, r3
 8012b4a:	687b      	ldr	r3, [r7, #4]
 8012b4c:	330e      	adds	r3, #14
 8012b4e:	2208      	movs	r2, #8
 8012b50:	0019      	movs	r1, r3
 8012b52:	f002 ff68 	bl	8015a26 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
 8012b56:	193b      	adds	r3, r7, r4
 8012b58:	0025      	movs	r5, r4
 8012b5a:	193a      	adds	r2, r7, r4
 8012b5c:	8812      	ldrh	r2, [r2, #0]
 8012b5e:	3208      	adds	r2, #8
 8012b60:	801a      	strh	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 8012b62:	687b      	ldr	r3, [r7, #4]
 8012b64:	8ad8      	ldrh	r0, [r3, #22]
 8012b66:	687b      	ldr	r3, [r7, #4]
 8012b68:	681a      	ldr	r2, [r3, #0]
 8012b6a:	197b      	adds	r3, r7, r5
 8012b6c:	881b      	ldrh	r3, [r3, #0]
 8012b6e:	1979      	adds	r1, r7, r5
 8012b70:	1c5c      	adds	r4, r3, #1
 8012b72:	800c      	strh	r4, [r1, #0]
 8012b74:	18d3      	adds	r3, r2, r3
 8012b76:	b2c2      	uxtb	r2, r0
 8012b78:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 8012b7a:	687b      	ldr	r3, [r7, #4]
 8012b7c:	8adb      	ldrh	r3, [r3, #22]
 8012b7e:	0a1b      	lsrs	r3, r3, #8
 8012b80:	b298      	uxth	r0, r3
 8012b82:	687b      	ldr	r3, [r7, #4]
 8012b84:	681a      	ldr	r2, [r3, #0]
 8012b86:	197b      	adds	r3, r7, r5
 8012b88:	881b      	ldrh	r3, [r3, #0]
 8012b8a:	1979      	adds	r1, r7, r5
 8012b8c:	1c5c      	adds	r4, r3, #1
 8012b8e:	800c      	strh	r4, [r1, #0]
 8012b90:	18d3      	adds	r3, r2, r3
 8012b92:	b2c2      	uxtb	r2, r0
 8012b94:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8012b96:	687b      	ldr	r3, [r7, #4]
 8012b98:	6998      	ldr	r0, [r3, #24]
 8012b9a:	687b      	ldr	r3, [r7, #4]
 8012b9c:	681a      	ldr	r2, [r3, #0]
 8012b9e:	197b      	adds	r3, r7, r5
 8012ba0:	881b      	ldrh	r3, [r3, #0]
 8012ba2:	1979      	adds	r1, r7, r5
 8012ba4:	1c5c      	adds	r4, r3, #1
 8012ba6:	800c      	strh	r4, [r1, #0]
 8012ba8:	18d3      	adds	r3, r2, r3
 8012baa:	b2c2      	uxtb	r2, r0
 8012bac:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8012bae:	687b      	ldr	r3, [r7, #4]
 8012bb0:	699b      	ldr	r3, [r3, #24]
 8012bb2:	0a18      	lsrs	r0, r3, #8
 8012bb4:	687b      	ldr	r3, [r7, #4]
 8012bb6:	681a      	ldr	r2, [r3, #0]
 8012bb8:	197b      	adds	r3, r7, r5
 8012bba:	881b      	ldrh	r3, [r3, #0]
 8012bbc:	1979      	adds	r1, r7, r5
 8012bbe:	1c5c      	adds	r4, r3, #1
 8012bc0:	800c      	strh	r4, [r1, #0]
 8012bc2:	18d3      	adds	r3, r2, r3
 8012bc4:	b2c2      	uxtb	r2, r0
 8012bc6:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8012bc8:	687b      	ldr	r3, [r7, #4]
 8012bca:	699b      	ldr	r3, [r3, #24]
 8012bcc:	0c18      	lsrs	r0, r3, #16
 8012bce:	687b      	ldr	r3, [r7, #4]
 8012bd0:	681a      	ldr	r2, [r3, #0]
 8012bd2:	197b      	adds	r3, r7, r5
 8012bd4:	881b      	ldrh	r3, [r3, #0]
 8012bd6:	1979      	adds	r1, r7, r5
 8012bd8:	1c5c      	adds	r4, r3, #1
 8012bda:	800c      	strh	r4, [r1, #0]
 8012bdc:	18d3      	adds	r3, r2, r3
 8012bde:	b2c2      	uxtb	r2, r0
 8012be0:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8012be2:	687b      	ldr	r3, [r7, #4]
 8012be4:	699b      	ldr	r3, [r3, #24]
 8012be6:	0e18      	lsrs	r0, r3, #24
 8012be8:	687b      	ldr	r3, [r7, #4]
 8012bea:	681a      	ldr	r2, [r3, #0]
 8012bec:	197b      	adds	r3, r7, r5
 8012bee:	881b      	ldrh	r3, [r3, #0]
 8012bf0:	1979      	adds	r1, r7, r5
 8012bf2:	1c5c      	adds	r4, r3, #1
 8012bf4:	800c      	strh	r4, [r1, #0]
 8012bf6:	18d3      	adds	r3, r2, r3
 8012bf8:	b2c2      	uxtb	r2, r0
 8012bfa:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8012bfc:	197b      	adds	r3, r7, r5
 8012bfe:	881b      	ldrh	r3, [r3, #0]
 8012c00:	b2da      	uxtb	r2, r3
 8012c02:	687b      	ldr	r3, [r7, #4]
 8012c04:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8012c06:	2300      	movs	r3, #0
}
 8012c08:	0018      	movs	r0, r3
 8012c0a:	46bd      	mov	sp, r7
 8012c0c:	b004      	add	sp, #16
 8012c0e:	bdb0      	pop	{r4, r5, r7, pc}

08012c10 <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 8012c10:	b5b0      	push	{r4, r5, r7, lr}
 8012c12:	b084      	sub	sp, #16
 8012c14:	af00      	add	r7, sp, #0
 8012c16:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	2b00      	cmp	r3, #0
 8012c1c:	d003      	beq.n	8012c26 <LoRaMacSerializerData+0x16>
 8012c1e:	687b      	ldr	r3, [r7, #4]
 8012c20:	681b      	ldr	r3, [r3, #0]
 8012c22:	2b00      	cmp	r3, #0
 8012c24:	d101      	bne.n	8012c2a <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8012c26:	2301      	movs	r3, #1
 8012c28:	e110      	b.n	8012e4c <LoRaMacSerializerData+0x23c>
    }

    uint16_t bufItr = 0;
 8012c2a:	230e      	movs	r3, #14
 8012c2c:	18fb      	adds	r3, r7, r3
 8012c2e:	2200      	movs	r2, #0
 8012c30:	801a      	strh	r2, [r3, #0]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
 8012c32:	230c      	movs	r3, #12
 8012c34:	18fb      	adds	r3, r7, r3
 8012c36:	2208      	movs	r2, #8
 8012c38:	801a      	strh	r2, [r3, #0]
                               + LORAMAC_FHDR_DEV_ADD_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    if( macMsg->FRMPayloadSize == 0 )
 8012c3a:	687b      	ldr	r3, [r7, #4]
 8012c3c:	2228      	movs	r2, #40	; 0x28
 8012c3e:	5c9b      	ldrb	r3, [r3, r2]
 8012c40:	2b00      	cmp	r3, #0
 8012c42:	d109      	bne.n	8012c58 <LoRaMacSerializerData+0x48>
    {
        if( macMsg->BufSize < computedBufSize )
 8012c44:	687b      	ldr	r3, [r7, #4]
 8012c46:	791b      	ldrb	r3, [r3, #4]
 8012c48:	b29b      	uxth	r3, r3
 8012c4a:	220c      	movs	r2, #12
 8012c4c:	18ba      	adds	r2, r7, r2
 8012c4e:	8812      	ldrh	r2, [r2, #0]
 8012c50:	429a      	cmp	r2, r3
 8012c52:	d916      	bls.n	8012c82 <LoRaMacSerializerData+0x72>
        {
            return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8012c54:	2302      	movs	r3, #2
 8012c56:	e0f9      	b.n	8012e4c <LoRaMacSerializerData+0x23c>
        }
    }
    else
    {   //If FRMPayload >0, FPort field is present.
        if( macMsg->BufSize < computedBufSize + macMsg->FHDR.FCtrl.Bits.FOptsLen + macMsg->FRMPayloadSize + LORAMAC_F_PORT_FIELD_SIZE )
 8012c58:	687b      	ldr	r3, [r7, #4]
 8012c5a:	791b      	ldrb	r3, [r3, #4]
 8012c5c:	0018      	movs	r0, r3
 8012c5e:	230c      	movs	r3, #12
 8012c60:	18fb      	adds	r3, r7, r3
 8012c62:	881b      	ldrh	r3, [r3, #0]
 8012c64:	687a      	ldr	r2, [r7, #4]
 8012c66:	7b12      	ldrb	r2, [r2, #12]
 8012c68:	0712      	lsls	r2, r2, #28
 8012c6a:	0f12      	lsrs	r2, r2, #28
 8012c6c:	b2d2      	uxtb	r2, r2
 8012c6e:	189b      	adds	r3, r3, r2
 8012c70:	687a      	ldr	r2, [r7, #4]
 8012c72:	2128      	movs	r1, #40	; 0x28
 8012c74:	5c52      	ldrb	r2, [r2, r1]
 8012c76:	189b      	adds	r3, r3, r2
 8012c78:	3301      	adds	r3, #1
 8012c7a:	4298      	cmp	r0, r3
 8012c7c:	da01      	bge.n	8012c82 <LoRaMacSerializerData+0x72>
        {
            return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8012c7e:	2302      	movs	r3, #2
 8012c80:	e0e4      	b.n	8012e4c <LoRaMacSerializerData+0x23c>
        }
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8012c82:	687b      	ldr	r3, [r7, #4]
 8012c84:	681a      	ldr	r2, [r3, #0]
 8012c86:	250e      	movs	r5, #14
 8012c88:	197b      	adds	r3, r7, r5
 8012c8a:	881b      	ldrh	r3, [r3, #0]
 8012c8c:	1979      	adds	r1, r7, r5
 8012c8e:	1c58      	adds	r0, r3, #1
 8012c90:	8008      	strh	r0, [r1, #0]
 8012c92:	18d3      	adds	r3, r2, r3
 8012c94:	687a      	ldr	r2, [r7, #4]
 8012c96:	7952      	ldrb	r2, [r2, #5]
 8012c98:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 8012c9a:	687b      	ldr	r3, [r7, #4]
 8012c9c:	6898      	ldr	r0, [r3, #8]
 8012c9e:	687b      	ldr	r3, [r7, #4]
 8012ca0:	681a      	ldr	r2, [r3, #0]
 8012ca2:	197b      	adds	r3, r7, r5
 8012ca4:	881b      	ldrh	r3, [r3, #0]
 8012ca6:	1979      	adds	r1, r7, r5
 8012ca8:	1c5c      	adds	r4, r3, #1
 8012caa:	800c      	strh	r4, [r1, #0]
 8012cac:	18d3      	adds	r3, r2, r3
 8012cae:	b2c2      	uxtb	r2, r0
 8012cb0:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 8012cb2:	687b      	ldr	r3, [r7, #4]
 8012cb4:	689b      	ldr	r3, [r3, #8]
 8012cb6:	0a18      	lsrs	r0, r3, #8
 8012cb8:	687b      	ldr	r3, [r7, #4]
 8012cba:	681a      	ldr	r2, [r3, #0]
 8012cbc:	197b      	adds	r3, r7, r5
 8012cbe:	881b      	ldrh	r3, [r3, #0]
 8012cc0:	1979      	adds	r1, r7, r5
 8012cc2:	1c5c      	adds	r4, r3, #1
 8012cc4:	800c      	strh	r4, [r1, #0]
 8012cc6:	18d3      	adds	r3, r2, r3
 8012cc8:	b2c2      	uxtb	r2, r0
 8012cca:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 8012ccc:	687b      	ldr	r3, [r7, #4]
 8012cce:	689b      	ldr	r3, [r3, #8]
 8012cd0:	0c18      	lsrs	r0, r3, #16
 8012cd2:	687b      	ldr	r3, [r7, #4]
 8012cd4:	681a      	ldr	r2, [r3, #0]
 8012cd6:	197b      	adds	r3, r7, r5
 8012cd8:	881b      	ldrh	r3, [r3, #0]
 8012cda:	1979      	adds	r1, r7, r5
 8012cdc:	1c5c      	adds	r4, r3, #1
 8012cde:	800c      	strh	r4, [r1, #0]
 8012ce0:	18d3      	adds	r3, r2, r3
 8012ce2:	b2c2      	uxtb	r2, r0
 8012ce4:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 8012ce6:	687b      	ldr	r3, [r7, #4]
 8012ce8:	689b      	ldr	r3, [r3, #8]
 8012cea:	0e18      	lsrs	r0, r3, #24
 8012cec:	687b      	ldr	r3, [r7, #4]
 8012cee:	681a      	ldr	r2, [r3, #0]
 8012cf0:	197b      	adds	r3, r7, r5
 8012cf2:	881b      	ldrh	r3, [r3, #0]
 8012cf4:	1979      	adds	r1, r7, r5
 8012cf6:	1c5c      	adds	r4, r3, #1
 8012cf8:	800c      	strh	r4, [r1, #0]
 8012cfa:	18d3      	adds	r3, r2, r3
 8012cfc:	b2c2      	uxtb	r2, r0
 8012cfe:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	681a      	ldr	r2, [r3, #0]
 8012d04:	197b      	adds	r3, r7, r5
 8012d06:	881b      	ldrh	r3, [r3, #0]
 8012d08:	1979      	adds	r1, r7, r5
 8012d0a:	1c58      	adds	r0, r3, #1
 8012d0c:	8008      	strh	r0, [r1, #0]
 8012d0e:	18d3      	adds	r3, r2, r3
 8012d10:	687a      	ldr	r2, [r7, #4]
 8012d12:	7b12      	ldrb	r2, [r2, #12]
 8012d14:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 8012d16:	687b      	ldr	r3, [r7, #4]
 8012d18:	89d8      	ldrh	r0, [r3, #14]
 8012d1a:	687b      	ldr	r3, [r7, #4]
 8012d1c:	681a      	ldr	r2, [r3, #0]
 8012d1e:	197b      	adds	r3, r7, r5
 8012d20:	881b      	ldrh	r3, [r3, #0]
 8012d22:	1979      	adds	r1, r7, r5
 8012d24:	1c5c      	adds	r4, r3, #1
 8012d26:	800c      	strh	r4, [r1, #0]
 8012d28:	18d3      	adds	r3, r2, r3
 8012d2a:	b2c2      	uxtb	r2, r0
 8012d2c:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 8012d2e:	687b      	ldr	r3, [r7, #4]
 8012d30:	89db      	ldrh	r3, [r3, #14]
 8012d32:	0a1b      	lsrs	r3, r3, #8
 8012d34:	b298      	uxth	r0, r3
 8012d36:	687b      	ldr	r3, [r7, #4]
 8012d38:	681a      	ldr	r2, [r3, #0]
 8012d3a:	197b      	adds	r3, r7, r5
 8012d3c:	881b      	ldrh	r3, [r3, #0]
 8012d3e:	1979      	adds	r1, r7, r5
 8012d40:	1c5c      	adds	r4, r3, #1
 8012d42:	800c      	strh	r4, [r1, #0]
 8012d44:	18d3      	adds	r3, r2, r3
 8012d46:	b2c2      	uxtb	r2, r0
 8012d48:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8012d4a:	687b      	ldr	r3, [r7, #4]
 8012d4c:	681a      	ldr	r2, [r3, #0]
 8012d4e:	002c      	movs	r4, r5
 8012d50:	197b      	adds	r3, r7, r5
 8012d52:	881b      	ldrh	r3, [r3, #0]
 8012d54:	18d0      	adds	r0, r2, r3
 8012d56:	687b      	ldr	r3, [r7, #4]
 8012d58:	3310      	adds	r3, #16
 8012d5a:	0019      	movs	r1, r3
 8012d5c:	687b      	ldr	r3, [r7, #4]
 8012d5e:	7b1b      	ldrb	r3, [r3, #12]
 8012d60:	071b      	lsls	r3, r3, #28
 8012d62:	0f1b      	lsrs	r3, r3, #28
 8012d64:	b2db      	uxtb	r3, r3
 8012d66:	b29b      	uxth	r3, r3
 8012d68:	001a      	movs	r2, r3
 8012d6a:	f002 fe41 	bl	80159f0 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8012d6e:	687b      	ldr	r3, [r7, #4]
 8012d70:	7b1b      	ldrb	r3, [r3, #12]
 8012d72:	071b      	lsls	r3, r3, #28
 8012d74:	0f1b      	lsrs	r3, r3, #28
 8012d76:	b2db      	uxtb	r3, r3
 8012d78:	b299      	uxth	r1, r3
 8012d7a:	193b      	adds	r3, r7, r4
 8012d7c:	193a      	adds	r2, r7, r4
 8012d7e:	8812      	ldrh	r2, [r2, #0]
 8012d80:	188a      	adds	r2, r1, r2
 8012d82:	801a      	strh	r2, [r3, #0]

    if( macMsg->FRMPayloadSize > 0 )
 8012d84:	687b      	ldr	r3, [r7, #4]
 8012d86:	2228      	movs	r2, #40	; 0x28
 8012d88:	5c9b      	ldrb	r3, [r3, r2]
 8012d8a:	2b00      	cmp	r3, #0
 8012d8c:	d00c      	beq.n	8012da8 <LoRaMacSerializerData+0x198>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 8012d8e:	687b      	ldr	r3, [r7, #4]
 8012d90:	681a      	ldr	r2, [r3, #0]
 8012d92:	210e      	movs	r1, #14
 8012d94:	187b      	adds	r3, r7, r1
 8012d96:	881b      	ldrh	r3, [r3, #0]
 8012d98:	1879      	adds	r1, r7, r1
 8012d9a:	1c58      	adds	r0, r3, #1
 8012d9c:	8008      	strh	r0, [r1, #0]
 8012d9e:	18d3      	adds	r3, r2, r3
 8012da0:	687a      	ldr	r2, [r7, #4]
 8012da2:	2120      	movs	r1, #32
 8012da4:	5c52      	ldrb	r2, [r2, r1]
 8012da6:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 8012da8:	687b      	ldr	r3, [r7, #4]
 8012daa:	681a      	ldr	r2, [r3, #0]
 8012dac:	240e      	movs	r4, #14
 8012dae:	193b      	adds	r3, r7, r4
 8012db0:	881b      	ldrh	r3, [r3, #0]
 8012db2:	18d0      	adds	r0, r2, r3
 8012db4:	687b      	ldr	r3, [r7, #4]
 8012db6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8012db8:	687b      	ldr	r3, [r7, #4]
 8012dba:	2228      	movs	r2, #40	; 0x28
 8012dbc:	5c9b      	ldrb	r3, [r3, r2]
 8012dbe:	b29b      	uxth	r3, r3
 8012dc0:	001a      	movs	r2, r3
 8012dc2:	f002 fe15 	bl	80159f0 <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 8012dc6:	687b      	ldr	r3, [r7, #4]
 8012dc8:	2228      	movs	r2, #40	; 0x28
 8012dca:	5c9b      	ldrb	r3, [r3, r2]
 8012dcc:	b299      	uxth	r1, r3
 8012dce:	193b      	adds	r3, r7, r4
 8012dd0:	193a      	adds	r2, r7, r4
 8012dd2:	8812      	ldrh	r2, [r2, #0]
 8012dd4:	188a      	adds	r2, r1, r2
 8012dd6:	801a      	strh	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8012dd8:	687b      	ldr	r3, [r7, #4]
 8012dda:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8012ddc:	687b      	ldr	r3, [r7, #4]
 8012dde:	681a      	ldr	r2, [r3, #0]
 8012de0:	193b      	adds	r3, r7, r4
 8012de2:	881b      	ldrh	r3, [r3, #0]
 8012de4:	0025      	movs	r5, r4
 8012de6:	1939      	adds	r1, r7, r4
 8012de8:	1c5c      	adds	r4, r3, #1
 8012dea:	800c      	strh	r4, [r1, #0]
 8012dec:	18d3      	adds	r3, r2, r3
 8012dee:	b2c2      	uxtb	r2, r0
 8012df0:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8012df2:	687b      	ldr	r3, [r7, #4]
 8012df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012df6:	0a18      	lsrs	r0, r3, #8
 8012df8:	687b      	ldr	r3, [r7, #4]
 8012dfa:	681a      	ldr	r2, [r3, #0]
 8012dfc:	197b      	adds	r3, r7, r5
 8012dfe:	881b      	ldrh	r3, [r3, #0]
 8012e00:	1979      	adds	r1, r7, r5
 8012e02:	1c5c      	adds	r4, r3, #1
 8012e04:	800c      	strh	r4, [r1, #0]
 8012e06:	18d3      	adds	r3, r2, r3
 8012e08:	b2c2      	uxtb	r2, r0
 8012e0a:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e10:	0c18      	lsrs	r0, r3, #16
 8012e12:	687b      	ldr	r3, [r7, #4]
 8012e14:	681a      	ldr	r2, [r3, #0]
 8012e16:	197b      	adds	r3, r7, r5
 8012e18:	881b      	ldrh	r3, [r3, #0]
 8012e1a:	1979      	adds	r1, r7, r5
 8012e1c:	1c5c      	adds	r4, r3, #1
 8012e1e:	800c      	strh	r4, [r1, #0]
 8012e20:	18d3      	adds	r3, r2, r3
 8012e22:	b2c2      	uxtb	r2, r0
 8012e24:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8012e26:	687b      	ldr	r3, [r7, #4]
 8012e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e2a:	0e18      	lsrs	r0, r3, #24
 8012e2c:	687b      	ldr	r3, [r7, #4]
 8012e2e:	681a      	ldr	r2, [r3, #0]
 8012e30:	197b      	adds	r3, r7, r5
 8012e32:	881b      	ldrh	r3, [r3, #0]
 8012e34:	1979      	adds	r1, r7, r5
 8012e36:	1c5c      	adds	r4, r3, #1
 8012e38:	800c      	strh	r4, [r1, #0]
 8012e3a:	18d3      	adds	r3, r2, r3
 8012e3c:	b2c2      	uxtb	r2, r0
 8012e3e:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8012e40:	197b      	adds	r3, r7, r5
 8012e42:	881b      	ldrh	r3, [r3, #0]
 8012e44:	b2da      	uxtb	r2, r3
 8012e46:	687b      	ldr	r3, [r7, #4]
 8012e48:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8012e4a:	2300      	movs	r3, #0
}
 8012e4c:	0018      	movs	r0, r3
 8012e4e:	46bd      	mov	sp, r7
 8012e50:	b004      	add	sp, #16
 8012e52:	bdb0      	pop	{r4, r5, r7, pc}

08012e54 <RegionIsActive>:
#define RU864_APPLY_DR_OFFSET( )
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
 8012e54:	b580      	push	{r7, lr}
 8012e56:	b082      	sub	sp, #8
 8012e58:	af00      	add	r7, sp, #0
 8012e5a:	0002      	movs	r2, r0
 8012e5c:	1dfb      	adds	r3, r7, #7
 8012e5e:	701a      	strb	r2, [r3, #0]
    switch( region )
 8012e60:	1dfb      	adds	r3, r7, #7
 8012e62:	781b      	ldrb	r3, [r3, #0]
 8012e64:	2b05      	cmp	r3, #5
 8012e66:	d101      	bne.n	8012e6c <RegionIsActive+0x18>
        AS923_IS_ACTIVE( );
        AU915_IS_ACTIVE( );
        CN470_IS_ACTIVE( );
        CN779_IS_ACTIVE( );
        EU433_IS_ACTIVE( );
        EU868_IS_ACTIVE( );
 8012e68:	2301      	movs	r3, #1
 8012e6a:	e000      	b.n	8012e6e <RegionIsActive+0x1a>
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 8012e6c:	2300      	movs	r3, #0
        }
    }
}
 8012e6e:	0018      	movs	r0, r3
 8012e70:	46bd      	mov	sp, r7
 8012e72:	b002      	add	sp, #8
 8012e74:	bd80      	pop	{r7, pc}

08012e76 <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 8012e76:	b580      	push	{r7, lr}
 8012e78:	b084      	sub	sp, #16
 8012e7a:	af00      	add	r7, sp, #0
 8012e7c:	0002      	movs	r2, r0
 8012e7e:	6039      	str	r1, [r7, #0]
 8012e80:	1dfb      	adds	r3, r7, #7
 8012e82:	701a      	strb	r2, [r3, #0]
    PhyParam_t phyParam = { 0 };
 8012e84:	2308      	movs	r3, #8
 8012e86:	18fb      	adds	r3, r7, r3
 8012e88:	2200      	movs	r2, #0
 8012e8a:	601a      	str	r2, [r3, #0]
    switch( region )
 8012e8c:	1dfb      	adds	r3, r7, #7
 8012e8e:	781b      	ldrb	r3, [r3, #0]
 8012e90:	2b05      	cmp	r3, #5
 8012e92:	d109      	bne.n	8012ea8 <RegionGetPhyParam+0x32>
        AS923_GET_PHY_PARAM( );
        AU915_GET_PHY_PARAM( );
        CN470_GET_PHY_PARAM( );
        CN779_GET_PHY_PARAM( );
        EU433_GET_PHY_PARAM( );
        EU868_GET_PHY_PARAM( );
 8012e94:	683b      	ldr	r3, [r7, #0]
 8012e96:	0018      	movs	r0, r3
 8012e98:	f001 f958 	bl	801414c <RegionEU868GetPhyParam>
 8012e9c:	0003      	movs	r3, r0
 8012e9e:	001a      	movs	r2, r3
 8012ea0:	230c      	movs	r3, #12
 8012ea2:	18fb      	adds	r3, r7, r3
 8012ea4:	601a      	str	r2, [r3, #0]
 8012ea6:	e005      	b.n	8012eb4 <RegionGetPhyParam+0x3e>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 8012ea8:	230c      	movs	r3, #12
 8012eaa:	18fb      	adds	r3, r7, r3
 8012eac:	2208      	movs	r2, #8
 8012eae:	18ba      	adds	r2, r7, r2
 8012eb0:	6812      	ldr	r2, [r2, #0]
 8012eb2:	601a      	str	r2, [r3, #0]
 8012eb4:	230c      	movs	r3, #12
 8012eb6:	18fb      	adds	r3, r7, r3
 8012eb8:	2200      	movs	r2, #0
 8012eba:	681a      	ldr	r2, [r3, #0]
 8012ebc:	0013      	movs	r3, r2
        }
    }
}
 8012ebe:	0018      	movs	r0, r3
 8012ec0:	46bd      	mov	sp, r7
 8012ec2:	b004      	add	sp, #16
 8012ec4:	bd80      	pop	{r7, pc}

08012ec6 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 8012ec6:	b580      	push	{r7, lr}
 8012ec8:	b082      	sub	sp, #8
 8012eca:	af00      	add	r7, sp, #0
 8012ecc:	0002      	movs	r2, r0
 8012ece:	6039      	str	r1, [r7, #0]
 8012ed0:	1dfb      	adds	r3, r7, #7
 8012ed2:	701a      	strb	r2, [r3, #0]
    switch( region )
 8012ed4:	1dfb      	adds	r3, r7, #7
 8012ed6:	781b      	ldrb	r3, [r3, #0]
 8012ed8:	2b05      	cmp	r3, #5
 8012eda:	d000      	beq.n	8012ede <RegionSetBandTxDone+0x18>
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
        RU864_SET_BAND_TX_DONE( );
        default:
        {
            return;
 8012edc:	e004      	b.n	8012ee8 <RegionSetBandTxDone+0x22>
        EU868_SET_BAND_TX_DONE( );
 8012ede:	683b      	ldr	r3, [r7, #0]
 8012ee0:	0018      	movs	r0, r3
 8012ee2:	f001 fa37 	bl	8014354 <RegionEU868SetBandTxDone>
 8012ee6:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 8012ee8:	46bd      	mov	sp, r7
 8012eea:	b002      	add	sp, #8
 8012eec:	bd80      	pop	{r7, pc}

08012eee <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 8012eee:	b580      	push	{r7, lr}
 8012ef0:	b082      	sub	sp, #8
 8012ef2:	af00      	add	r7, sp, #0
 8012ef4:	0002      	movs	r2, r0
 8012ef6:	6039      	str	r1, [r7, #0]
 8012ef8:	1dfb      	adds	r3, r7, #7
 8012efa:	701a      	strb	r2, [r3, #0]
    switch( region )
 8012efc:	1dfb      	adds	r3, r7, #7
 8012efe:	781b      	ldrb	r3, [r3, #0]
 8012f00:	2b05      	cmp	r3, #5
 8012f02:	d000      	beq.n	8012f06 <RegionInitDefaults+0x18>
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
        RU864_INIT_DEFAULTS( );
        default:
        {
            break;
 8012f04:	e004      	b.n	8012f10 <RegionInitDefaults+0x22>
        EU868_INIT_DEFAULTS( );
 8012f06:	683b      	ldr	r3, [r7, #0]
 8012f08:	0018      	movs	r0, r3
 8012f0a:	f001 fa43 	bl	8014394 <RegionEU868InitDefaults>
 8012f0e:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 8012f10:	46c0      	nop			; (mov r8, r8)
 8012f12:	46bd      	mov	sp, r7
 8012f14:	b002      	add	sp, #8
 8012f16:	bd80      	pop	{r7, pc}

08012f18 <RegionGetNvmCtx>:

void* RegionGetNvmCtx( LoRaMacRegion_t region, GetNvmCtxParams_t* params )
{
 8012f18:	b580      	push	{r7, lr}
 8012f1a:	b082      	sub	sp, #8
 8012f1c:	af00      	add	r7, sp, #0
 8012f1e:	0002      	movs	r2, r0
 8012f20:	6039      	str	r1, [r7, #0]
 8012f22:	1dfb      	adds	r3, r7, #7
 8012f24:	701a      	strb	r2, [r3, #0]
    switch( region )
 8012f26:	1dfb      	adds	r3, r7, #7
 8012f28:	781b      	ldrb	r3, [r3, #0]
 8012f2a:	2b05      	cmp	r3, #5
 8012f2c:	d105      	bne.n	8012f3a <RegionGetNvmCtx+0x22>
        AS923_GET_NVM_CTX( );
        AU915_GET_NVM_CTX( );
        CN470_GET_NVM_CTX( );
        CN779_GET_NVM_CTX( );
        EU433_GET_NVM_CTX( );
        EU868_GET_NVM_CTX( );
 8012f2e:	683b      	ldr	r3, [r7, #0]
 8012f30:	0018      	movs	r0, r3
 8012f32:	f001 faa7 	bl	8014484 <RegionEU868GetNvmCtx>
 8012f36:	0003      	movs	r3, r0
 8012f38:	e000      	b.n	8012f3c <RegionGetNvmCtx+0x24>
        IN865_GET_NVM_CTX( );
        US915_GET_NVM_CTX( );
        RU864_GET_NVM_CTX( );
        default:
        {
           return 0;
 8012f3a:	2300      	movs	r3, #0
        }
    }
}
 8012f3c:	0018      	movs	r0, r3
 8012f3e:	46bd      	mov	sp, r7
 8012f40:	b002      	add	sp, #8
 8012f42:	bd80      	pop	{r7, pc}

08012f44 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8012f44:	b580      	push	{r7, lr}
 8012f46:	b082      	sub	sp, #8
 8012f48:	af00      	add	r7, sp, #0
 8012f4a:	6039      	str	r1, [r7, #0]
 8012f4c:	0011      	movs	r1, r2
 8012f4e:	1dfb      	adds	r3, r7, #7
 8012f50:	1c02      	adds	r2, r0, #0
 8012f52:	701a      	strb	r2, [r3, #0]
 8012f54:	1dbb      	adds	r3, r7, #6
 8012f56:	1c0a      	adds	r2, r1, #0
 8012f58:	701a      	strb	r2, [r3, #0]
    switch( region )
 8012f5a:	1dfb      	adds	r3, r7, #7
 8012f5c:	781b      	ldrb	r3, [r3, #0]
 8012f5e:	2b05      	cmp	r3, #5
 8012f60:	d108      	bne.n	8012f74 <RegionVerify+0x30>
        AS923_VERIFY( );
        AU915_VERIFY( );
        CN470_VERIFY( );
        CN779_VERIFY( );
        EU433_VERIFY( );
        EU868_VERIFY( );
 8012f62:	1dbb      	adds	r3, r7, #6
 8012f64:	781a      	ldrb	r2, [r3, #0]
 8012f66:	683b      	ldr	r3, [r7, #0]
 8012f68:	0011      	movs	r1, r2
 8012f6a:	0018      	movs	r0, r3
 8012f6c:	f001 fa9a 	bl	80144a4 <RegionEU868Verify>
 8012f70:	0003      	movs	r3, r0
 8012f72:	e000      	b.n	8012f76 <RegionVerify+0x32>
        IN865_VERIFY( );
        US915_VERIFY( );
        RU864_VERIFY( );
        default:
        {
            return false;
 8012f74:	2300      	movs	r3, #0
        }
    }
}
 8012f76:	0018      	movs	r0, r3
 8012f78:	46bd      	mov	sp, r7
 8012f7a:	b002      	add	sp, #8
 8012f7c:	bd80      	pop	{r7, pc}

08012f7e <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 8012f7e:	b580      	push	{r7, lr}
 8012f80:	b082      	sub	sp, #8
 8012f82:	af00      	add	r7, sp, #0
 8012f84:	0002      	movs	r2, r0
 8012f86:	6039      	str	r1, [r7, #0]
 8012f88:	1dfb      	adds	r3, r7, #7
 8012f8a:	701a      	strb	r2, [r3, #0]
    switch( region )
 8012f8c:	1dfb      	adds	r3, r7, #7
 8012f8e:	781b      	ldrb	r3, [r3, #0]
 8012f90:	2b05      	cmp	r3, #5
 8012f92:	d000      	beq.n	8012f96 <RegionApplyCFList+0x18>
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
        RU864_APPLY_CF_LIST( );
        default:
        {
            break;
 8012f94:	e004      	b.n	8012fa0 <RegionApplyCFList+0x22>
        EU868_APPLY_CF_LIST( );
 8012f96:	683b      	ldr	r3, [r7, #0]
 8012f98:	0018      	movs	r0, r3
 8012f9a:	f001 fad1 	bl	8014540 <RegionEU868ApplyCFList>
 8012f9e:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 8012fa0:	46c0      	nop			; (mov r8, r8)
 8012fa2:	46bd      	mov	sp, r7
 8012fa4:	b002      	add	sp, #8
 8012fa6:	bd80      	pop	{r7, pc}

08012fa8 <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 8012fa8:	b580      	push	{r7, lr}
 8012faa:	b082      	sub	sp, #8
 8012fac:	af00      	add	r7, sp, #0
 8012fae:	0002      	movs	r2, r0
 8012fb0:	6039      	str	r1, [r7, #0]
 8012fb2:	1dfb      	adds	r3, r7, #7
 8012fb4:	701a      	strb	r2, [r3, #0]
    switch( region )
 8012fb6:	1dfb      	adds	r3, r7, #7
 8012fb8:	781b      	ldrb	r3, [r3, #0]
 8012fba:	2b05      	cmp	r3, #5
 8012fbc:	d105      	bne.n	8012fca <RegionChanMaskSet+0x22>
        AS923_CHAN_MASK_SET( );
        AU915_CHAN_MASK_SET( );
        CN470_CHAN_MASK_SET( );
        CN779_CHAN_MASK_SET( );
        EU433_CHAN_MASK_SET( );
        EU868_CHAN_MASK_SET( );
 8012fbe:	683b      	ldr	r3, [r7, #0]
 8012fc0:	0018      	movs	r0, r3
 8012fc2:	f001 fb4f 	bl	8014664 <RegionEU868ChanMaskSet>
 8012fc6:	0003      	movs	r3, r0
 8012fc8:	e000      	b.n	8012fcc <RegionChanMaskSet+0x24>
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 8012fca:	2300      	movs	r3, #0
        }
    }
}
 8012fcc:	0018      	movs	r0, r3
 8012fce:	46bd      	mov	sp, r7
 8012fd0:	b002      	add	sp, #8
 8012fd2:	bd80      	pop	{r7, pc}

08012fd4 <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8012fd4:	b590      	push	{r4, r7, lr}
 8012fd6:	b083      	sub	sp, #12
 8012fd8:	af00      	add	r7, sp, #0
 8012fda:	0004      	movs	r4, r0
 8012fdc:	0008      	movs	r0, r1
 8012fde:	0011      	movs	r1, r2
 8012fe0:	603b      	str	r3, [r7, #0]
 8012fe2:	1dfb      	adds	r3, r7, #7
 8012fe4:	1c22      	adds	r2, r4, #0
 8012fe6:	701a      	strb	r2, [r3, #0]
 8012fe8:	1dbb      	adds	r3, r7, #6
 8012fea:	1c02      	adds	r2, r0, #0
 8012fec:	701a      	strb	r2, [r3, #0]
 8012fee:	1d7b      	adds	r3, r7, #5
 8012ff0:	1c0a      	adds	r2, r1, #0
 8012ff2:	701a      	strb	r2, [r3, #0]
    switch( region )
 8012ff4:	1dfb      	adds	r3, r7, #7
 8012ff6:	781b      	ldrb	r3, [r3, #0]
 8012ff8:	2b05      	cmp	r3, #5
 8012ffa:	d000      	beq.n	8012ffe <RegionComputeRxWindowParameters+0x2a>
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
 8012ffc:	e00a      	b.n	8013014 <RegionComputeRxWindowParameters+0x40>
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 8012ffe:	69bc      	ldr	r4, [r7, #24]
 8013000:	683a      	ldr	r2, [r7, #0]
 8013002:	1d7b      	adds	r3, r7, #5
 8013004:	7819      	ldrb	r1, [r3, #0]
 8013006:	1dbb      	adds	r3, r7, #6
 8013008:	2000      	movs	r0, #0
 801300a:	5618      	ldrsb	r0, [r3, r0]
 801300c:	0023      	movs	r3, r4
 801300e:	f001 fb4f 	bl	80146b0 <RegionEU868ComputeRxWindowParameters>
 8013012:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 8013014:	46c0      	nop			; (mov r8, r8)
 8013016:	46bd      	mov	sp, r7
 8013018:	b003      	add	sp, #12
 801301a:	bd90      	pop	{r4, r7, pc}

0801301c <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 801301c:	b580      	push	{r7, lr}
 801301e:	b084      	sub	sp, #16
 8013020:	af00      	add	r7, sp, #0
 8013022:	60b9      	str	r1, [r7, #8]
 8013024:	607a      	str	r2, [r7, #4]
 8013026:	210f      	movs	r1, #15
 8013028:	187b      	adds	r3, r7, r1
 801302a:	1c02      	adds	r2, r0, #0
 801302c:	701a      	strb	r2, [r3, #0]
    switch( region )
 801302e:	187b      	adds	r3, r7, r1
 8013030:	781b      	ldrb	r3, [r3, #0]
 8013032:	2b05      	cmp	r3, #5
 8013034:	d107      	bne.n	8013046 <RegionRxConfig+0x2a>
        AS923_RX_CONFIG( );
        AU915_RX_CONFIG( );
        CN470_RX_CONFIG( );
        CN779_RX_CONFIG( );
        EU433_RX_CONFIG( );
        EU868_RX_CONFIG( );
 8013036:	687a      	ldr	r2, [r7, #4]
 8013038:	68bb      	ldr	r3, [r7, #8]
 801303a:	0011      	movs	r1, r2
 801303c:	0018      	movs	r0, r3
 801303e:	f001 fba1 	bl	8014784 <RegionEU868RxConfig>
 8013042:	0003      	movs	r3, r0
 8013044:	e000      	b.n	8013048 <RegionRxConfig+0x2c>
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 8013046:	2300      	movs	r3, #0
        }
    }
}
 8013048:	0018      	movs	r0, r3
 801304a:	46bd      	mov	sp, r7
 801304c:	b004      	add	sp, #16
 801304e:	bd80      	pop	{r7, pc}

08013050 <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8013050:	b580      	push	{r7, lr}
 8013052:	b084      	sub	sp, #16
 8013054:	af00      	add	r7, sp, #0
 8013056:	60b9      	str	r1, [r7, #8]
 8013058:	607a      	str	r2, [r7, #4]
 801305a:	603b      	str	r3, [r7, #0]
 801305c:	210f      	movs	r1, #15
 801305e:	187b      	adds	r3, r7, r1
 8013060:	1c02      	adds	r2, r0, #0
 8013062:	701a      	strb	r2, [r3, #0]
    switch( region )
 8013064:	187b      	adds	r3, r7, r1
 8013066:	781b      	ldrb	r3, [r3, #0]
 8013068:	2b05      	cmp	r3, #5
 801306a:	d107      	bne.n	801307c <RegionTxConfig+0x2c>
        AS923_TX_CONFIG( );
        AU915_TX_CONFIG( );
        CN470_TX_CONFIG( );
        CN779_TX_CONFIG( );
        EU433_TX_CONFIG( );
        EU868_TX_CONFIG( );
 801306c:	683a      	ldr	r2, [r7, #0]
 801306e:	6879      	ldr	r1, [r7, #4]
 8013070:	68bb      	ldr	r3, [r7, #8]
 8013072:	0018      	movs	r0, r3
 8013074:	f001 fc72 	bl	801495c <RegionEU868TxConfig>
 8013078:	0003      	movs	r3, r0
 801307a:	e000      	b.n	801307e <RegionTxConfig+0x2e>
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 801307c:	2300      	movs	r3, #0
        }
    }
}
 801307e:	0018      	movs	r0, r3
 8013080:	46bd      	mov	sp, r7
 8013082:	b004      	add	sp, #16
 8013084:	bd80      	pop	{r7, pc}

08013086 <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8013086:	b590      	push	{r4, r7, lr}
 8013088:	b087      	sub	sp, #28
 801308a:	af02      	add	r7, sp, #8
 801308c:	60b9      	str	r1, [r7, #8]
 801308e:	607a      	str	r2, [r7, #4]
 8013090:	603b      	str	r3, [r7, #0]
 8013092:	210f      	movs	r1, #15
 8013094:	187b      	adds	r3, r7, r1
 8013096:	1c02      	adds	r2, r0, #0
 8013098:	701a      	strb	r2, [r3, #0]
    switch( region )
 801309a:	187b      	adds	r3, r7, r1
 801309c:	781b      	ldrb	r3, [r3, #0]
 801309e:	2b05      	cmp	r3, #5
 80130a0:	d10a      	bne.n	80130b8 <RegionLinkAdrReq+0x32>
        //AS923_LINK_ADR_REQ( );
        //AU915_LINK_ADR_REQ( );
       // CN470_LINK_ADR_REQ( );
       // CN779_LINK_ADR_REQ( );
        EU433_LINK_ADR_REQ( );
        EU868_LINK_ADR_REQ( );
 80130a2:	6a3c      	ldr	r4, [r7, #32]
 80130a4:	683a      	ldr	r2, [r7, #0]
 80130a6:	6879      	ldr	r1, [r7, #4]
 80130a8:	68b8      	ldr	r0, [r7, #8]
 80130aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130ac:	9300      	str	r3, [sp, #0]
 80130ae:	0023      	movs	r3, r4
 80130b0:	f001 fd2c 	bl	8014b0c <RegionEU868LinkAdrReq>
 80130b4:	0003      	movs	r3, r0
 80130b6:	e000      	b.n	80130ba <RegionLinkAdrReq+0x34>
       // IN865_LINK_ADR_REQ( );
       // US915_LINK_ADR_REQ( );
       // RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 80130b8:	2300      	movs	r3, #0
        }
    }
}
 80130ba:	0018      	movs	r0, r3
 80130bc:	46bd      	mov	sp, r7
 80130be:	b005      	add	sp, #20
 80130c0:	bd90      	pop	{r4, r7, pc}

080130c2 <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 80130c2:	b580      	push	{r7, lr}
 80130c4:	b082      	sub	sp, #8
 80130c6:	af00      	add	r7, sp, #0
 80130c8:	0002      	movs	r2, r0
 80130ca:	6039      	str	r1, [r7, #0]
 80130cc:	1dfb      	adds	r3, r7, #7
 80130ce:	701a      	strb	r2, [r3, #0]
    switch( region )
 80130d0:	1dfb      	adds	r3, r7, #7
 80130d2:	781b      	ldrb	r3, [r3, #0]
 80130d4:	2b05      	cmp	r3, #5
 80130d6:	d105      	bne.n	80130e4 <RegionRxParamSetupReq+0x22>
        AS923_RX_PARAM_SETUP_REQ( );
        AU915_RX_PARAM_SETUP_REQ( );
        CN470_RX_PARAM_SETUP_REQ( );
        CN779_RX_PARAM_SETUP_REQ( );
        EU433_RX_PARAM_SETUP_REQ( );
        EU868_RX_PARAM_SETUP_REQ( );
 80130d8:	683b      	ldr	r3, [r7, #0]
 80130da:	0018      	movs	r0, r3
 80130dc:	f001 fe6c 	bl	8014db8 <RegionEU868RxParamSetupReq>
 80130e0:	0003      	movs	r3, r0
 80130e2:	e000      	b.n	80130e6 <RegionRxParamSetupReq+0x24>
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 80130e4:	2300      	movs	r3, #0
        }
    }
}
 80130e6:	0018      	movs	r0, r3
 80130e8:	46bd      	mov	sp, r7
 80130ea:	b002      	add	sp, #8
 80130ec:	bd80      	pop	{r7, pc}

080130ee <RegionNewChannelReq>:

uint8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 80130ee:	b580      	push	{r7, lr}
 80130f0:	b082      	sub	sp, #8
 80130f2:	af00      	add	r7, sp, #0
 80130f4:	0002      	movs	r2, r0
 80130f6:	6039      	str	r1, [r7, #0]
 80130f8:	1dfb      	adds	r3, r7, #7
 80130fa:	701a      	strb	r2, [r3, #0]
    switch( region )
 80130fc:	1dfb      	adds	r3, r7, #7
 80130fe:	781b      	ldrb	r3, [r3, #0]
 8013100:	2b05      	cmp	r3, #5
 8013102:	d105      	bne.n	8013110 <RegionNewChannelReq+0x22>
        AS923_NEW_CHANNEL_REQ( );
        AU915_NEW_CHANNEL_REQ( );
        CN470_NEW_CHANNEL_REQ( );
        CN779_NEW_CHANNEL_REQ( );
        EU433_NEW_CHANNEL_REQ( );
        EU868_NEW_CHANNEL_REQ( );
 8013104:	683b      	ldr	r3, [r7, #0]
 8013106:	0018      	movs	r0, r3
 8013108:	f001 fea0 	bl	8014e4c <RegionEU868NewChannelReq>
 801310c:	0003      	movs	r3, r0
 801310e:	e000      	b.n	8013112 <RegionNewChannelReq+0x24>
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 8013110:	2300      	movs	r3, #0
        }
    }
}
 8013112:	0018      	movs	r0, r3
 8013114:	46bd      	mov	sp, r7
 8013116:	b002      	add	sp, #8
 8013118:	bd80      	pop	{r7, pc}

0801311a <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 801311a:	b580      	push	{r7, lr}
 801311c:	b082      	sub	sp, #8
 801311e:	af00      	add	r7, sp, #0
 8013120:	0002      	movs	r2, r0
 8013122:	6039      	str	r1, [r7, #0]
 8013124:	1dfb      	adds	r3, r7, #7
 8013126:	701a      	strb	r2, [r3, #0]
    switch( region )
 8013128:	1dfb      	adds	r3, r7, #7
 801312a:	781b      	ldrb	r3, [r3, #0]
 801312c:	2b05      	cmp	r3, #5
 801312e:	d105      	bne.n	801313c <RegionTxParamSetupReq+0x22>
        AS923_TX_PARAM_SETUP_REQ( );
        AU915_TX_PARAM_SETUP_REQ( );
        CN470_TX_PARAM_SETUP_REQ( );
        CN779_TX_PARAM_SETUP_REQ( );
        EU433_TX_PARAM_SETUP_REQ( );
        EU868_TX_PARAM_SETUP_REQ( );
 8013130:	683b      	ldr	r3, [r7, #0]
 8013132:	0018      	movs	r0, r3
 8013134:	f001 fef4 	bl	8014f20 <RegionEU868TxParamSetupReq>
 8013138:	0003      	movs	r3, r0
 801313a:	e000      	b.n	801313e <RegionTxParamSetupReq+0x24>
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 801313c:	2300      	movs	r3, #0
        }
    }
}
 801313e:	0018      	movs	r0, r3
 8013140:	46bd      	mov	sp, r7
 8013142:	b002      	add	sp, #8
 8013144:	bd80      	pop	{r7, pc}

08013146 <RegionDlChannelReq>:

uint8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 8013146:	b580      	push	{r7, lr}
 8013148:	b082      	sub	sp, #8
 801314a:	af00      	add	r7, sp, #0
 801314c:	0002      	movs	r2, r0
 801314e:	6039      	str	r1, [r7, #0]
 8013150:	1dfb      	adds	r3, r7, #7
 8013152:	701a      	strb	r2, [r3, #0]
    switch( region )
 8013154:	1dfb      	adds	r3, r7, #7
 8013156:	781b      	ldrb	r3, [r3, #0]
 8013158:	2b05      	cmp	r3, #5
 801315a:	d105      	bne.n	8013168 <RegionDlChannelReq+0x22>
        AS923_DL_CHANNEL_REQ( );
        AU915_DL_CHANNEL_REQ( );
        CN470_DL_CHANNEL_REQ( );
        CN779_DL_CHANNEL_REQ( );
        EU433_DL_CHANNEL_REQ( );
        EU868_DL_CHANNEL_REQ( );
 801315c:	683b      	ldr	r3, [r7, #0]
 801315e:	0018      	movs	r0, r3
 8013160:	f001 fee8 	bl	8014f34 <RegionEU868DlChannelReq>
 8013164:	0003      	movs	r3, r0
 8013166:	e000      	b.n	801316a <RegionDlChannelReq+0x24>
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 8013168:	2300      	movs	r3, #0
        }
    }
}
 801316a:	0018      	movs	r0, r3
 801316c:	46bd      	mov	sp, r7
 801316e:	b002      	add	sp, #8
 8013170:	bd80      	pop	{r7, pc}

08013172 <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 8013172:	b590      	push	{r4, r7, lr}
 8013174:	b083      	sub	sp, #12
 8013176:	af00      	add	r7, sp, #0
 8013178:	0004      	movs	r4, r0
 801317a:	0008      	movs	r0, r1
 801317c:	0011      	movs	r1, r2
 801317e:	1dfb      	adds	r3, r7, #7
 8013180:	1c22      	adds	r2, r4, #0
 8013182:	701a      	strb	r2, [r3, #0]
 8013184:	1dbb      	adds	r3, r7, #6
 8013186:	1c02      	adds	r2, r0, #0
 8013188:	701a      	strb	r2, [r3, #0]
 801318a:	1d7b      	adds	r3, r7, #5
 801318c:	1c0a      	adds	r2, r1, #0
 801318e:	701a      	strb	r2, [r3, #0]
    switch( region )
 8013190:	1dfb      	adds	r3, r7, #7
 8013192:	781b      	ldrb	r3, [r3, #0]
 8013194:	2b05      	cmp	r3, #5
 8013196:	d10a      	bne.n	80131ae <RegionAlternateDr+0x3c>
        AS923_ALTERNATE_DR( );
        AU915_ALTERNATE_DR( );
        CN470_ALTERNATE_DR( );
        CN779_ALTERNATE_DR( );
        EU433_ALTERNATE_DR( );
        EU868_ALTERNATE_DR( );
 8013198:	1d7b      	adds	r3, r7, #5
 801319a:	781a      	ldrb	r2, [r3, #0]
 801319c:	1dbb      	adds	r3, r7, #6
 801319e:	781b      	ldrb	r3, [r3, #0]
 80131a0:	b25b      	sxtb	r3, r3
 80131a2:	0011      	movs	r1, r2
 80131a4:	0018      	movs	r0, r3
 80131a6:	f001 ff13 	bl	8014fd0 <RegionEU868AlternateDr>
 80131aa:	0003      	movs	r3, r0
 80131ac:	e000      	b.n	80131b0 <RegionAlternateDr+0x3e>
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 80131ae:	2300      	movs	r3, #0
        }
    }
}
 80131b0:	0018      	movs	r0, r3
 80131b2:	46bd      	mov	sp, r7
 80131b4:	b003      	add	sp, #12
 80131b6:	bd90      	pop	{r4, r7, pc}

080131b8 <RegionCalcBackOff>:

void RegionCalcBackOff( LoRaMacRegion_t region, CalcBackOffParams_t* calcBackOff )
{
 80131b8:	b580      	push	{r7, lr}
 80131ba:	b082      	sub	sp, #8
 80131bc:	af00      	add	r7, sp, #0
 80131be:	0002      	movs	r2, r0
 80131c0:	6039      	str	r1, [r7, #0]
 80131c2:	1dfb      	adds	r3, r7, #7
 80131c4:	701a      	strb	r2, [r3, #0]
    switch( region )
 80131c6:	1dfb      	adds	r3, r7, #7
 80131c8:	781b      	ldrb	r3, [r3, #0]
 80131ca:	2b05      	cmp	r3, #5
 80131cc:	d000      	beq.n	80131d0 <RegionCalcBackOff+0x18>
        IN865_CALC_BACKOFF( );
        US915_CALC_BACKOFF( );
        RU864_CALC_BACKOFF( );
        default:
        {
            break;
 80131ce:	e004      	b.n	80131da <RegionCalcBackOff+0x22>
        EU868_CALC_BACKOFF( );
 80131d0:	683b      	ldr	r3, [r7, #0]
 80131d2:	0018      	movs	r0, r3
 80131d4:	f001 ff0c 	bl	8014ff0 <RegionEU868CalcBackOff>
 80131d8:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 80131da:	46c0      	nop			; (mov r8, r8)
 80131dc:	46bd      	mov	sp, r7
 80131de:	b002      	add	sp, #8
 80131e0:	bd80      	pop	{r7, pc}

080131e2 <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 80131e2:	b580      	push	{r7, lr}
 80131e4:	b084      	sub	sp, #16
 80131e6:	af00      	add	r7, sp, #0
 80131e8:	60b9      	str	r1, [r7, #8]
 80131ea:	607a      	str	r2, [r7, #4]
 80131ec:	603b      	str	r3, [r7, #0]
 80131ee:	210f      	movs	r1, #15
 80131f0:	187b      	adds	r3, r7, r1
 80131f2:	1c02      	adds	r2, r0, #0
 80131f4:	701a      	strb	r2, [r3, #0]
    switch( region )
 80131f6:	187b      	adds	r3, r7, r1
 80131f8:	781b      	ldrb	r3, [r3, #0]
 80131fa:	2b05      	cmp	r3, #5
 80131fc:	d107      	bne.n	801320e <RegionNextChannel+0x2c>
        AS923_NEXT_CHANNEL( );
        AU915_NEXT_CHANNEL( );
        CN470_NEXT_CHANNEL( );
        CN779_NEXT_CHANNEL( );
        EU433_NEXT_CHANNEL( );
        EU868_NEXT_CHANNEL( );
 80131fe:	69bb      	ldr	r3, [r7, #24]
 8013200:	683a      	ldr	r2, [r7, #0]
 8013202:	6879      	ldr	r1, [r7, #4]
 8013204:	68b8      	ldr	r0, [r7, #8]
 8013206:	f001 ff23 	bl	8015050 <RegionEU868NextChannel>
 801320a:	0003      	movs	r3, r0
 801320c:	e000      	b.n	8013210 <RegionNextChannel+0x2e>
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 801320e:	2309      	movs	r3, #9
        }
    }
}
 8013210:	0018      	movs	r0, r3
 8013212:	46bd      	mov	sp, r7
 8013214:	b004      	add	sp, #16
 8013216:	bd80      	pop	{r7, pc}

08013218 <RegionChannelAdd>:

LoRaMacStatus_t RegionChannelAdd( LoRaMacRegion_t region, ChannelAddParams_t* channelAdd )
{
 8013218:	b580      	push	{r7, lr}
 801321a:	b082      	sub	sp, #8
 801321c:	af00      	add	r7, sp, #0
 801321e:	0002      	movs	r2, r0
 8013220:	6039      	str	r1, [r7, #0]
 8013222:	1dfb      	adds	r3, r7, #7
 8013224:	701a      	strb	r2, [r3, #0]
    switch( region )
 8013226:	1dfb      	adds	r3, r7, #7
 8013228:	781b      	ldrb	r3, [r3, #0]
 801322a:	2b05      	cmp	r3, #5
 801322c:	d105      	bne.n	801323a <RegionChannelAdd+0x22>
        AS923_CHANNEL_ADD( );
        AU915_CHANNEL_ADD( );
        CN470_CHANNEL_ADD( );
        CN779_CHANNEL_ADD( );
        EU433_CHANNEL_ADD( );
        EU868_CHANNEL_ADD( );
 801322e:	683b      	ldr	r3, [r7, #0]
 8013230:	0018      	movs	r0, r3
 8013232:	f001 ffb5 	bl	80151a0 <RegionEU868ChannelAdd>
 8013236:	0003      	movs	r3, r0
 8013238:	e000      	b.n	801323c <RegionChannelAdd+0x24>
        IN865_CHANNEL_ADD( );
        US915_CHANNEL_ADD( );
        RU864_CHANNEL_ADD( );
        default:
        {
            return LORAMAC_STATUS_PARAMETER_INVALID;
 801323a:	2303      	movs	r3, #3
        }
    }
}
 801323c:	0018      	movs	r0, r3
 801323e:	46bd      	mov	sp, r7
 8013240:	b002      	add	sp, #8
 8013242:	bd80      	pop	{r7, pc}

08013244 <RegionSetContinuousWave>:
        }
    }
}

void RegionSetContinuousWave( LoRaMacRegion_t region, ContinuousWaveParams_t* continuousWave )
{
 8013244:	b580      	push	{r7, lr}
 8013246:	b082      	sub	sp, #8
 8013248:	af00      	add	r7, sp, #0
 801324a:	0002      	movs	r2, r0
 801324c:	6039      	str	r1, [r7, #0]
 801324e:	1dfb      	adds	r3, r7, #7
 8013250:	701a      	strb	r2, [r3, #0]
    switch( region )
 8013252:	1dfb      	adds	r3, r7, #7
 8013254:	781b      	ldrb	r3, [r3, #0]
 8013256:	2b05      	cmp	r3, #5
 8013258:	d000      	beq.n	801325c <RegionSetContinuousWave+0x18>
        IN865_SET_CONTINUOUS_WAVE( );
        US915_SET_CONTINUOUS_WAVE( );
        RU864_SET_CONTINUOUS_WAVE( );
        default:
        {
            break;
 801325a:	e004      	b.n	8013266 <RegionSetContinuousWave+0x22>
        EU868_SET_CONTINUOUS_WAVE( );
 801325c:	683b      	ldr	r3, [r7, #0]
 801325e:	0018      	movs	r0, r3
 8013260:	f002 f890 	bl	8015384 <RegionEU868SetContinuousWave>
 8013264:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 8013266:	46c0      	nop			; (mov r8, r8)
 8013268:	46bd      	mov	sp, r7
 801326a:	b002      	add	sp, #8
 801326c:	bd80      	pop	{r7, pc}

0801326e <RegionApplyDrOffset>:

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 801326e:	b5b0      	push	{r4, r5, r7, lr}
 8013270:	b082      	sub	sp, #8
 8013272:	af00      	add	r7, sp, #0
 8013274:	0005      	movs	r5, r0
 8013276:	000c      	movs	r4, r1
 8013278:	0010      	movs	r0, r2
 801327a:	0019      	movs	r1, r3
 801327c:	1dfb      	adds	r3, r7, #7
 801327e:	1c2a      	adds	r2, r5, #0
 8013280:	701a      	strb	r2, [r3, #0]
 8013282:	1dbb      	adds	r3, r7, #6
 8013284:	1c22      	adds	r2, r4, #0
 8013286:	701a      	strb	r2, [r3, #0]
 8013288:	1d7b      	adds	r3, r7, #5
 801328a:	1c02      	adds	r2, r0, #0
 801328c:	701a      	strb	r2, [r3, #0]
 801328e:	1d3b      	adds	r3, r7, #4
 8013290:	1c0a      	adds	r2, r1, #0
 8013292:	701a      	strb	r2, [r3, #0]
    switch( region )
 8013294:	1dfb      	adds	r3, r7, #7
 8013296:	781b      	ldrb	r3, [r3, #0]
 8013298:	2b05      	cmp	r3, #5
 801329a:	d10c      	bne.n	80132b6 <RegionApplyDrOffset+0x48>
        AS923_APPLY_DR_OFFSET( );
        AU915_APPLY_DR_OFFSET( );
        CN470_APPLY_DR_OFFSET( );
        CN779_APPLY_DR_OFFSET( );
        EU433_APPLY_DR_OFFSET( );
        EU868_APPLY_DR_OFFSET( );
 801329c:	1d3b      	adds	r3, r7, #4
 801329e:	2200      	movs	r2, #0
 80132a0:	569a      	ldrsb	r2, [r3, r2]
 80132a2:	1d7b      	adds	r3, r7, #5
 80132a4:	2100      	movs	r1, #0
 80132a6:	5659      	ldrsb	r1, [r3, r1]
 80132a8:	1dbb      	adds	r3, r7, #6
 80132aa:	781b      	ldrb	r3, [r3, #0]
 80132ac:	0018      	movs	r0, r3
 80132ae:	f002 f8bd 	bl	801542c <RegionEU868ApplyDrOffset>
 80132b2:	0003      	movs	r3, r0
 80132b4:	e001      	b.n	80132ba <RegionApplyDrOffset+0x4c>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 80132b6:	1d7b      	adds	r3, r7, #5
 80132b8:	781b      	ldrb	r3, [r3, #0]
        }
    }
}
 80132ba:	0018      	movs	r0, r3
 80132bc:	46bd      	mov	sp, r7
 80132be:	b002      	add	sp, #8
 80132c0:	bdb0      	pop	{r4, r5, r7, pc}

080132c2 <CountChannels>:
#define BACKOFF_DC_1_HOUR       100
#define BACKOFF_DC_10_HOURS     1000
#define BACKOFF_DC_24_HOURS     10000

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 80132c2:	b580      	push	{r7, lr}
 80132c4:	b084      	sub	sp, #16
 80132c6:	af00      	add	r7, sp, #0
 80132c8:	0002      	movs	r2, r0
 80132ca:	1dbb      	adds	r3, r7, #6
 80132cc:	801a      	strh	r2, [r3, #0]
 80132ce:	1d7b      	adds	r3, r7, #5
 80132d0:	1c0a      	adds	r2, r1, #0
 80132d2:	701a      	strb	r2, [r3, #0]
    uint8_t nbActiveBits = 0;
 80132d4:	230f      	movs	r3, #15
 80132d6:	18fb      	adds	r3, r7, r3
 80132d8:	2200      	movs	r2, #0
 80132da:	701a      	strb	r2, [r3, #0]

    for( uint8_t j = 0; j < nbBits; j++ )
 80132dc:	230e      	movs	r3, #14
 80132de:	18fb      	adds	r3, r7, r3
 80132e0:	2200      	movs	r2, #0
 80132e2:	701a      	strb	r2, [r3, #0]
 80132e4:	e01b      	b.n	801331e <CountChannels+0x5c>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 80132e6:	1dbb      	adds	r3, r7, #6
 80132e8:	881b      	ldrh	r3, [r3, #0]
 80132ea:	200e      	movs	r0, #14
 80132ec:	183a      	adds	r2, r7, r0
 80132ee:	7812      	ldrb	r2, [r2, #0]
 80132f0:	2101      	movs	r1, #1
 80132f2:	4091      	lsls	r1, r2
 80132f4:	000a      	movs	r2, r1
 80132f6:	401a      	ands	r2, r3
 80132f8:	183b      	adds	r3, r7, r0
 80132fa:	781b      	ldrb	r3, [r3, #0]
 80132fc:	2101      	movs	r1, #1
 80132fe:	4099      	lsls	r1, r3
 8013300:	000b      	movs	r3, r1
 8013302:	429a      	cmp	r2, r3
 8013304:	d105      	bne.n	8013312 <CountChannels+0x50>
        {
            nbActiveBits++;
 8013306:	210f      	movs	r1, #15
 8013308:	187b      	adds	r3, r7, r1
 801330a:	781a      	ldrb	r2, [r3, #0]
 801330c:	187b      	adds	r3, r7, r1
 801330e:	3201      	adds	r2, #1
 8013310:	701a      	strb	r2, [r3, #0]
    for( uint8_t j = 0; j < nbBits; j++ )
 8013312:	210e      	movs	r1, #14
 8013314:	187b      	adds	r3, r7, r1
 8013316:	781a      	ldrb	r2, [r3, #0]
 8013318:	187b      	adds	r3, r7, r1
 801331a:	3201      	adds	r2, #1
 801331c:	701a      	strb	r2, [r3, #0]
 801331e:	230e      	movs	r3, #14
 8013320:	18fa      	adds	r2, r7, r3
 8013322:	1d7b      	adds	r3, r7, #5
 8013324:	7812      	ldrb	r2, [r2, #0]
 8013326:	781b      	ldrb	r3, [r3, #0]
 8013328:	429a      	cmp	r2, r3
 801332a:	d3dc      	bcc.n	80132e6 <CountChannels+0x24>
        }
    }
    return nbActiveBits;
 801332c:	230f      	movs	r3, #15
 801332e:	18fb      	adds	r3, r7, r3
 8013330:	781b      	ldrb	r3, [r3, #0]
}
 8013332:	0018      	movs	r0, r3
 8013334:	46bd      	mov	sp, r7
 8013336:	b004      	add	sp, #16
 8013338:	bd80      	pop	{r7, pc}
	...

0801333c <RegionCommonGetJoinDc>:

uint16_t RegionCommonGetJoinDc( TimerTime_t elapsedTime )
{
 801333c:	b580      	push	{r7, lr}
 801333e:	b084      	sub	sp, #16
 8013340:	af00      	add	r7, sp, #0
 8013342:	6078      	str	r0, [r7, #4]
    uint16_t dutyCycle = 0;
 8013344:	230e      	movs	r3, #14
 8013346:	18fb      	adds	r3, r7, r3
 8013348:	2200      	movs	r2, #0
 801334a:	801a      	strh	r2, [r3, #0]

    if( elapsedTime < 3600000 )
 801334c:	687b      	ldr	r3, [r7, #4]
 801334e:	4a0e      	ldr	r2, [pc, #56]	; (8013388 <RegionCommonGetJoinDc+0x4c>)
 8013350:	4293      	cmp	r3, r2
 8013352:	d804      	bhi.n	801335e <RegionCommonGetJoinDc+0x22>
    {
        dutyCycle = BACKOFF_DC_1_HOUR;
 8013354:	230e      	movs	r3, #14
 8013356:	18fb      	adds	r3, r7, r3
 8013358:	2264      	movs	r2, #100	; 0x64
 801335a:	801a      	strh	r2, [r3, #0]
 801335c:	e00d      	b.n	801337a <RegionCommonGetJoinDc+0x3e>
    }
    else if( elapsedTime < ( 3600000 + 36000000 ) )
 801335e:	687b      	ldr	r3, [r7, #4]
 8013360:	4a0a      	ldr	r2, [pc, #40]	; (801338c <RegionCommonGetJoinDc+0x50>)
 8013362:	4293      	cmp	r3, r2
 8013364:	d805      	bhi.n	8013372 <RegionCommonGetJoinDc+0x36>
    {
        dutyCycle = BACKOFF_DC_10_HOURS;
 8013366:	230e      	movs	r3, #14
 8013368:	18fb      	adds	r3, r7, r3
 801336a:	22fa      	movs	r2, #250	; 0xfa
 801336c:	0092      	lsls	r2, r2, #2
 801336e:	801a      	strh	r2, [r3, #0]
 8013370:	e003      	b.n	801337a <RegionCommonGetJoinDc+0x3e>
    }
    else
    {
        dutyCycle = BACKOFF_DC_24_HOURS;
 8013372:	230e      	movs	r3, #14
 8013374:	18fb      	adds	r3, r7, r3
 8013376:	4a06      	ldr	r2, [pc, #24]	; (8013390 <RegionCommonGetJoinDc+0x54>)
 8013378:	801a      	strh	r2, [r3, #0]
    }
    return dutyCycle;
 801337a:	230e      	movs	r3, #14
 801337c:	18fb      	adds	r3, r7, r3
 801337e:	881b      	ldrh	r3, [r3, #0]
}
 8013380:	0018      	movs	r0, r3
 8013382:	46bd      	mov	sp, r7
 8013384:	b004      	add	sp, #16
 8013386:	bd80      	pop	{r7, pc}
 8013388:	0036ee7f 	.word	0x0036ee7f
 801338c:	025c3f7f 	.word	0x025c3f7f
 8013390:	00002710 	.word	0x00002710

08013394 <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 8013394:	b590      	push	{r4, r7, lr}
 8013396:	b085      	sub	sp, #20
 8013398:	af00      	add	r7, sp, #0
 801339a:	0004      	movs	r4, r0
 801339c:	6039      	str	r1, [r7, #0]
 801339e:	0010      	movs	r0, r2
 80133a0:	0019      	movs	r1, r3
 80133a2:	1dfb      	adds	r3, r7, #7
 80133a4:	1c22      	adds	r2, r4, #0
 80133a6:	701a      	strb	r2, [r3, #0]
 80133a8:	1dbb      	adds	r3, r7, #6
 80133aa:	1c02      	adds	r2, r0, #0
 80133ac:	701a      	strb	r2, [r3, #0]
 80133ae:	1d7b      	adds	r3, r7, #5
 80133b0:	1c0a      	adds	r2, r1, #0
 80133b2:	701a      	strb	r2, [r3, #0]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 80133b4:	2320      	movs	r3, #32
 80133b6:	18fb      	adds	r3, r7, r3
 80133b8:	2200      	movs	r2, #0
 80133ba:	569a      	ldrsb	r2, [r3, r2]
 80133bc:	1d7b      	adds	r3, r7, #5
 80133be:	2100      	movs	r1, #0
 80133c0:	5659      	ldrsb	r1, [r3, r1]
 80133c2:	1dbb      	adds	r3, r7, #6
 80133c4:	781b      	ldrb	r3, [r3, #0]
 80133c6:	b25b      	sxtb	r3, r3
 80133c8:	0018      	movs	r0, r3
 80133ca:	f000 f87d 	bl	80134c8 <RegionCommonValueInRange>
 80133ce:	1e03      	subs	r3, r0, #0
 80133d0:	d101      	bne.n	80133d6 <RegionCommonChanVerifyDr+0x42>
    {
        return false;
 80133d2:	2300      	movs	r3, #0
 80133d4:	e074      	b.n	80134c0 <RegionCommonChanVerifyDr+0x12c>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 80133d6:	230f      	movs	r3, #15
 80133d8:	18fb      	adds	r3, r7, r3
 80133da:	2200      	movs	r2, #0
 80133dc:	701a      	strb	r2, [r3, #0]
 80133de:	230e      	movs	r3, #14
 80133e0:	18fb      	adds	r3, r7, r3
 80133e2:	2200      	movs	r2, #0
 80133e4:	701a      	strb	r2, [r3, #0]
 80133e6:	e063      	b.n	80134b0 <RegionCommonChanVerifyDr+0x11c>
    {
        for( uint8_t j = 0; j < 16; j++ )
 80133e8:	230d      	movs	r3, #13
 80133ea:	18fb      	adds	r3, r7, r3
 80133ec:	2200      	movs	r2, #0
 80133ee:	701a      	strb	r2, [r3, #0]
 80133f0:	e04d      	b.n	801348e <RegionCommonChanVerifyDr+0xfa>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 80133f2:	230e      	movs	r3, #14
 80133f4:	18fb      	adds	r3, r7, r3
 80133f6:	781b      	ldrb	r3, [r3, #0]
 80133f8:	005b      	lsls	r3, r3, #1
 80133fa:	683a      	ldr	r2, [r7, #0]
 80133fc:	18d3      	adds	r3, r2, r3
 80133fe:	881b      	ldrh	r3, [r3, #0]
 8013400:	001a      	movs	r2, r3
 8013402:	230d      	movs	r3, #13
 8013404:	18fb      	adds	r3, r7, r3
 8013406:	781b      	ldrb	r3, [r3, #0]
 8013408:	411a      	asrs	r2, r3
 801340a:	0013      	movs	r3, r2
 801340c:	2201      	movs	r2, #1
 801340e:	4013      	ands	r3, r2
 8013410:	d037      	beq.n	8013482 <RegionCommonChanVerifyDr+0xee>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8013412:	200f      	movs	r0, #15
 8013414:	183b      	adds	r3, r7, r0
 8013416:	781a      	ldrb	r2, [r3, #0]
 8013418:	240d      	movs	r4, #13
 801341a:	193b      	adds	r3, r7, r4
 801341c:	781b      	ldrb	r3, [r3, #0]
 801341e:	18d3      	adds	r3, r2, r3
 8013420:	001a      	movs	r2, r3
 8013422:	0013      	movs	r3, r2
 8013424:	005b      	lsls	r3, r3, #1
 8013426:	189b      	adds	r3, r3, r2
 8013428:	009b      	lsls	r3, r3, #2
 801342a:	001a      	movs	r2, r3
 801342c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801342e:	189b      	adds	r3, r3, r2
 8013430:	7a1b      	ldrb	r3, [r3, #8]
 8013432:	011b      	lsls	r3, r3, #4
 8013434:	b25b      	sxtb	r3, r3
 8013436:	111b      	asrs	r3, r3, #4
 8013438:	b25b      	sxtb	r3, r3
 801343a:	001a      	movs	r2, r3
 801343c:	230f      	movs	r3, #15
 801343e:	4013      	ands	r3, r2
 8013440:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 8013442:	183b      	adds	r3, r7, r0
 8013444:	781a      	ldrb	r2, [r3, #0]
 8013446:	193b      	adds	r3, r7, r4
 8013448:	781b      	ldrb	r3, [r3, #0]
 801344a:	18d3      	adds	r3, r2, r3
 801344c:	001a      	movs	r2, r3
 801344e:	0013      	movs	r3, r2
 8013450:	005b      	lsls	r3, r3, #1
 8013452:	189b      	adds	r3, r3, r2
 8013454:	009b      	lsls	r3, r3, #2
 8013456:	001a      	movs	r2, r3
 8013458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801345a:	189b      	adds	r3, r3, r2
 801345c:	7a1b      	ldrb	r3, [r3, #8]
 801345e:	b25b      	sxtb	r3, r3
 8013460:	111b      	asrs	r3, r3, #4
 8013462:	b25b      	sxtb	r3, r3
 8013464:	001a      	movs	r2, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8013466:	230f      	movs	r3, #15
 8013468:	4013      	ands	r3, r2
 801346a:	b25a      	sxtb	r2, r3
 801346c:	1dbb      	adds	r3, r7, #6
 801346e:	781b      	ldrb	r3, [r3, #0]
 8013470:	b25b      	sxtb	r3, r3
 8013472:	0018      	movs	r0, r3
 8013474:	f000 f828 	bl	80134c8 <RegionCommonValueInRange>
 8013478:	0003      	movs	r3, r0
 801347a:	2b01      	cmp	r3, #1
 801347c:	d101      	bne.n	8013482 <RegionCommonChanVerifyDr+0xee>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 801347e:	2301      	movs	r3, #1
 8013480:	e01e      	b.n	80134c0 <RegionCommonChanVerifyDr+0x12c>
        for( uint8_t j = 0; j < 16; j++ )
 8013482:	210d      	movs	r1, #13
 8013484:	187b      	adds	r3, r7, r1
 8013486:	781a      	ldrb	r2, [r3, #0]
 8013488:	187b      	adds	r3, r7, r1
 801348a:	3201      	adds	r2, #1
 801348c:	701a      	strb	r2, [r3, #0]
 801348e:	230d      	movs	r3, #13
 8013490:	18fb      	adds	r3, r7, r3
 8013492:	781b      	ldrb	r3, [r3, #0]
 8013494:	2b0f      	cmp	r3, #15
 8013496:	d9ac      	bls.n	80133f2 <RegionCommonChanVerifyDr+0x5e>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8013498:	220f      	movs	r2, #15
 801349a:	18bb      	adds	r3, r7, r2
 801349c:	18ba      	adds	r2, r7, r2
 801349e:	7812      	ldrb	r2, [r2, #0]
 80134a0:	3210      	adds	r2, #16
 80134a2:	701a      	strb	r2, [r3, #0]
 80134a4:	210e      	movs	r1, #14
 80134a6:	187b      	adds	r3, r7, r1
 80134a8:	781a      	ldrb	r2, [r3, #0]
 80134aa:	187b      	adds	r3, r7, r1
 80134ac:	3201      	adds	r2, #1
 80134ae:	701a      	strb	r2, [r3, #0]
 80134b0:	230f      	movs	r3, #15
 80134b2:	18fa      	adds	r2, r7, r3
 80134b4:	1dfb      	adds	r3, r7, #7
 80134b6:	7812      	ldrb	r2, [r2, #0]
 80134b8:	781b      	ldrb	r3, [r3, #0]
 80134ba:	429a      	cmp	r2, r3
 80134bc:	d394      	bcc.n	80133e8 <RegionCommonChanVerifyDr+0x54>
                }
            }
        }
    }
    return false;
 80134be:	2300      	movs	r3, #0
}
 80134c0:	0018      	movs	r0, r3
 80134c2:	46bd      	mov	sp, r7
 80134c4:	b005      	add	sp, #20
 80134c6:	bd90      	pop	{r4, r7, pc}

080134c8 <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 80134c8:	b590      	push	{r4, r7, lr}
 80134ca:	b083      	sub	sp, #12
 80134cc:	af00      	add	r7, sp, #0
 80134ce:	0004      	movs	r4, r0
 80134d0:	0008      	movs	r0, r1
 80134d2:	0011      	movs	r1, r2
 80134d4:	1dfb      	adds	r3, r7, #7
 80134d6:	1c22      	adds	r2, r4, #0
 80134d8:	701a      	strb	r2, [r3, #0]
 80134da:	1dbb      	adds	r3, r7, #6
 80134dc:	1c02      	adds	r2, r0, #0
 80134de:	701a      	strb	r2, [r3, #0]
 80134e0:	1d7b      	adds	r3, r7, #5
 80134e2:	1c0a      	adds	r2, r1, #0
 80134e4:	701a      	strb	r2, [r3, #0]
    if( ( value >= min ) && ( value <= max ) )
 80134e6:	1dfa      	adds	r2, r7, #7
 80134e8:	1dbb      	adds	r3, r7, #6
 80134ea:	7812      	ldrb	r2, [r2, #0]
 80134ec:	b252      	sxtb	r2, r2
 80134ee:	781b      	ldrb	r3, [r3, #0]
 80134f0:	b25b      	sxtb	r3, r3
 80134f2:	429a      	cmp	r2, r3
 80134f4:	db09      	blt.n	801350a <RegionCommonValueInRange+0x42>
 80134f6:	1dfa      	adds	r2, r7, #7
 80134f8:	1d7b      	adds	r3, r7, #5
 80134fa:	7812      	ldrb	r2, [r2, #0]
 80134fc:	b252      	sxtb	r2, r2
 80134fe:	781b      	ldrb	r3, [r3, #0]
 8013500:	b25b      	sxtb	r3, r3
 8013502:	429a      	cmp	r2, r3
 8013504:	dc01      	bgt.n	801350a <RegionCommonValueInRange+0x42>
    {
        return 1;
 8013506:	2301      	movs	r3, #1
 8013508:	e000      	b.n	801350c <RegionCommonValueInRange+0x44>
    }
    return 0;
 801350a:	2300      	movs	r3, #0
}
 801350c:	0018      	movs	r0, r3
 801350e:	46bd      	mov	sp, r7
 8013510:	b003      	add	sp, #12
 8013512:	bd90      	pop	{r4, r7, pc}

08013514 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 8013514:	b580      	push	{r7, lr}
 8013516:	b084      	sub	sp, #16
 8013518:	af00      	add	r7, sp, #0
 801351a:	6078      	str	r0, [r7, #4]
 801351c:	0008      	movs	r0, r1
 801351e:	0011      	movs	r1, r2
 8013520:	1cfb      	adds	r3, r7, #3
 8013522:	1c02      	adds	r2, r0, #0
 8013524:	701a      	strb	r2, [r3, #0]
 8013526:	1cbb      	adds	r3, r7, #2
 8013528:	1c0a      	adds	r2, r1, #0
 801352a:	701a      	strb	r2, [r3, #0]
    uint8_t index = id / 16;
 801352c:	210f      	movs	r1, #15
 801352e:	187b      	adds	r3, r7, r1
 8013530:	1cfa      	adds	r2, r7, #3
 8013532:	7812      	ldrb	r2, [r2, #0]
 8013534:	0912      	lsrs	r2, r2, #4
 8013536:	701a      	strb	r2, [r3, #0]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 8013538:	1cbb      	adds	r3, r7, #2
 801353a:	781b      	ldrb	r3, [r3, #0]
 801353c:	091b      	lsrs	r3, r3, #4
 801353e:	b2db      	uxtb	r3, r3
 8013540:	187a      	adds	r2, r7, r1
 8013542:	7812      	ldrb	r2, [r2, #0]
 8013544:	429a      	cmp	r2, r3
 8013546:	d805      	bhi.n	8013554 <RegionCommonChanDisable+0x40>
 8013548:	1cfa      	adds	r2, r7, #3
 801354a:	1cbb      	adds	r3, r7, #2
 801354c:	7812      	ldrb	r2, [r2, #0]
 801354e:	781b      	ldrb	r3, [r3, #0]
 8013550:	429a      	cmp	r2, r3
 8013552:	d301      	bcc.n	8013558 <RegionCommonChanDisable+0x44>
    {
        return false;
 8013554:	2300      	movs	r3, #0
 8013556:	e01b      	b.n	8013590 <RegionCommonChanDisable+0x7c>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 8013558:	200f      	movs	r0, #15
 801355a:	183b      	adds	r3, r7, r0
 801355c:	781b      	ldrb	r3, [r3, #0]
 801355e:	005b      	lsls	r3, r3, #1
 8013560:	687a      	ldr	r2, [r7, #4]
 8013562:	18d3      	adds	r3, r2, r3
 8013564:	881b      	ldrh	r3, [r3, #0]
 8013566:	b21b      	sxth	r3, r3
 8013568:	1cfa      	adds	r2, r7, #3
 801356a:	7812      	ldrb	r2, [r2, #0]
 801356c:	210f      	movs	r1, #15
 801356e:	400a      	ands	r2, r1
 8013570:	2101      	movs	r1, #1
 8013572:	4091      	lsls	r1, r2
 8013574:	000a      	movs	r2, r1
 8013576:	b212      	sxth	r2, r2
 8013578:	43d2      	mvns	r2, r2
 801357a:	b212      	sxth	r2, r2
 801357c:	4013      	ands	r3, r2
 801357e:	b219      	sxth	r1, r3
 8013580:	183b      	adds	r3, r7, r0
 8013582:	781b      	ldrb	r3, [r3, #0]
 8013584:	005b      	lsls	r3, r3, #1
 8013586:	687a      	ldr	r2, [r7, #4]
 8013588:	18d3      	adds	r3, r2, r3
 801358a:	b28a      	uxth	r2, r1
 801358c:	801a      	strh	r2, [r3, #0]

    return true;
 801358e:	2301      	movs	r3, #1
}
 8013590:	0018      	movs	r0, r3
 8013592:	46bd      	mov	sp, r7
 8013594:	b004      	add	sp, #16
 8013596:	bd80      	pop	{r7, pc}

08013598 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 8013598:	b590      	push	{r4, r7, lr}
 801359a:	b085      	sub	sp, #20
 801359c:	af00      	add	r7, sp, #0
 801359e:	6078      	str	r0, [r7, #4]
 80135a0:	0008      	movs	r0, r1
 80135a2:	0011      	movs	r1, r2
 80135a4:	1cfb      	adds	r3, r7, #3
 80135a6:	1c02      	adds	r2, r0, #0
 80135a8:	701a      	strb	r2, [r3, #0]
 80135aa:	1cbb      	adds	r3, r7, #2
 80135ac:	1c0a      	adds	r2, r1, #0
 80135ae:	701a      	strb	r2, [r3, #0]
    uint8_t nbChannels = 0;
 80135b0:	230f      	movs	r3, #15
 80135b2:	18fb      	adds	r3, r7, r3
 80135b4:	2200      	movs	r2, #0
 80135b6:	701a      	strb	r2, [r3, #0]

    if( channelsMask == NULL )
 80135b8:	687b      	ldr	r3, [r7, #4]
 80135ba:	2b00      	cmp	r3, #0
 80135bc:	d101      	bne.n	80135c2 <RegionCommonCountChannels+0x2a>
    {
        return 0;
 80135be:	2300      	movs	r3, #0
 80135c0:	e027      	b.n	8013612 <RegionCommonCountChannels+0x7a>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 80135c2:	230e      	movs	r3, #14
 80135c4:	18fb      	adds	r3, r7, r3
 80135c6:	1cfa      	adds	r2, r7, #3
 80135c8:	7812      	ldrb	r2, [r2, #0]
 80135ca:	701a      	strb	r2, [r3, #0]
 80135cc:	e017      	b.n	80135fe <RegionCommonCountChannels+0x66>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 80135ce:	240e      	movs	r4, #14
 80135d0:	193b      	adds	r3, r7, r4
 80135d2:	781b      	ldrb	r3, [r3, #0]
 80135d4:	005b      	lsls	r3, r3, #1
 80135d6:	687a      	ldr	r2, [r7, #4]
 80135d8:	18d3      	adds	r3, r2, r3
 80135da:	881b      	ldrh	r3, [r3, #0]
 80135dc:	2110      	movs	r1, #16
 80135de:	0018      	movs	r0, r3
 80135e0:	f7ff fe6f 	bl	80132c2 <CountChannels>
 80135e4:	0003      	movs	r3, r0
 80135e6:	0019      	movs	r1, r3
 80135e8:	220f      	movs	r2, #15
 80135ea:	18bb      	adds	r3, r7, r2
 80135ec:	18ba      	adds	r2, r7, r2
 80135ee:	7812      	ldrb	r2, [r2, #0]
 80135f0:	188a      	adds	r2, r1, r2
 80135f2:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 80135f4:	193b      	adds	r3, r7, r4
 80135f6:	781a      	ldrb	r2, [r3, #0]
 80135f8:	193b      	adds	r3, r7, r4
 80135fa:	3201      	adds	r2, #1
 80135fc:	701a      	strb	r2, [r3, #0]
 80135fe:	230e      	movs	r3, #14
 8013600:	18fa      	adds	r2, r7, r3
 8013602:	1cbb      	adds	r3, r7, #2
 8013604:	7812      	ldrb	r2, [r2, #0]
 8013606:	781b      	ldrb	r3, [r3, #0]
 8013608:	429a      	cmp	r2, r3
 801360a:	d3e0      	bcc.n	80135ce <RegionCommonCountChannels+0x36>
    }

    return nbChannels;
 801360c:	230f      	movs	r3, #15
 801360e:	18fb      	adds	r3, r7, r3
 8013610:	781b      	ldrb	r3, [r3, #0]
}
 8013612:	0018      	movs	r0, r3
 8013614:	46bd      	mov	sp, r7
 8013616:	b005      	add	sp, #20
 8013618:	bd90      	pop	{r4, r7, pc}

0801361a <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 801361a:	b580      	push	{r7, lr}
 801361c:	b086      	sub	sp, #24
 801361e:	af00      	add	r7, sp, #0
 8013620:	60f8      	str	r0, [r7, #12]
 8013622:	60b9      	str	r1, [r7, #8]
 8013624:	1dfb      	adds	r3, r7, #7
 8013626:	701a      	strb	r2, [r3, #0]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 8013628:	68fb      	ldr	r3, [r7, #12]
 801362a:	2b00      	cmp	r3, #0
 801362c:	d020      	beq.n	8013670 <RegionCommonChanMaskCopy+0x56>
 801362e:	68bb      	ldr	r3, [r7, #8]
 8013630:	2b00      	cmp	r3, #0
 8013632:	d01d      	beq.n	8013670 <RegionCommonChanMaskCopy+0x56>
    {
        for( uint8_t i = 0; i < len; i++ )
 8013634:	2317      	movs	r3, #23
 8013636:	18fb      	adds	r3, r7, r3
 8013638:	2200      	movs	r2, #0
 801363a:	701a      	strb	r2, [r3, #0]
 801363c:	e011      	b.n	8013662 <RegionCommonChanMaskCopy+0x48>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 801363e:	2017      	movs	r0, #23
 8013640:	183b      	adds	r3, r7, r0
 8013642:	781b      	ldrb	r3, [r3, #0]
 8013644:	005b      	lsls	r3, r3, #1
 8013646:	68ba      	ldr	r2, [r7, #8]
 8013648:	18d2      	adds	r2, r2, r3
 801364a:	183b      	adds	r3, r7, r0
 801364c:	781b      	ldrb	r3, [r3, #0]
 801364e:	005b      	lsls	r3, r3, #1
 8013650:	68f9      	ldr	r1, [r7, #12]
 8013652:	18cb      	adds	r3, r1, r3
 8013654:	8812      	ldrh	r2, [r2, #0]
 8013656:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 8013658:	183b      	adds	r3, r7, r0
 801365a:	781a      	ldrb	r2, [r3, #0]
 801365c:	183b      	adds	r3, r7, r0
 801365e:	3201      	adds	r2, #1
 8013660:	701a      	strb	r2, [r3, #0]
 8013662:	2317      	movs	r3, #23
 8013664:	18fa      	adds	r2, r7, r3
 8013666:	1dfb      	adds	r3, r7, #7
 8013668:	7812      	ldrb	r2, [r2, #0]
 801366a:	781b      	ldrb	r3, [r3, #0]
 801366c:	429a      	cmp	r2, r3
 801366e:	d3e6      	bcc.n	801363e <RegionCommonChanMaskCopy+0x24>
        }
    }
}
 8013670:	46c0      	nop			; (mov r8, r8)
 8013672:	46bd      	mov	sp, r7
 8013674:	b006      	add	sp, #24
 8013676:	bd80      	pop	{r7, pc}

08013678 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( bool joined, Band_t* band, TimerTime_t lastTxDone )
{
 8013678:	b580      	push	{r7, lr}
 801367a:	b084      	sub	sp, #16
 801367c:	af00      	add	r7, sp, #0
 801367e:	60b9      	str	r1, [r7, #8]
 8013680:	607a      	str	r2, [r7, #4]
 8013682:	210f      	movs	r1, #15
 8013684:	187b      	adds	r3, r7, r1
 8013686:	1c02      	adds	r2, r0, #0
 8013688:	701a      	strb	r2, [r3, #0]
    if( joined == true )
 801368a:	187b      	adds	r3, r7, r1
 801368c:	781b      	ldrb	r3, [r3, #0]
 801368e:	2b00      	cmp	r3, #0
 8013690:	d003      	beq.n	801369a <RegionCommonSetBandTxDone+0x22>
    {
        band->LastTxDoneTime = lastTxDone;
 8013692:	68bb      	ldr	r3, [r7, #8]
 8013694:	687a      	ldr	r2, [r7, #4]
 8013696:	609a      	str	r2, [r3, #8]
    else
    {
        band->LastTxDoneTime = lastTxDone;
        band->LastJoinTxDoneTime = lastTxDone;
    }
}
 8013698:	e005      	b.n	80136a6 <RegionCommonSetBandTxDone+0x2e>
        band->LastTxDoneTime = lastTxDone;
 801369a:	68bb      	ldr	r3, [r7, #8]
 801369c:	687a      	ldr	r2, [r7, #4]
 801369e:	609a      	str	r2, [r3, #8]
        band->LastJoinTxDoneTime = lastTxDone;
 80136a0:	68bb      	ldr	r3, [r7, #8]
 80136a2:	687a      	ldr	r2, [r7, #4]
 80136a4:	605a      	str	r2, [r3, #4]
}
 80136a6:	46c0      	nop			; (mov r8, r8)
 80136a8:	46bd      	mov	sp, r7
 80136aa:	b004      	add	sp, #16
 80136ac:	bd80      	pop	{r7, pc}

080136ae <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, bool dutyCycle, Band_t* bands, uint8_t nbBands )
{
 80136ae:	b590      	push	{r4, r7, lr}
 80136b0:	b087      	sub	sp, #28
 80136b2:	af00      	add	r7, sp, #0
 80136b4:	0004      	movs	r4, r0
 80136b6:	0008      	movs	r0, r1
 80136b8:	603a      	str	r2, [r7, #0]
 80136ba:	0019      	movs	r1, r3
 80136bc:	1dfb      	adds	r3, r7, #7
 80136be:	1c22      	adds	r2, r4, #0
 80136c0:	701a      	strb	r2, [r3, #0]
 80136c2:	1dbb      	adds	r3, r7, #6
 80136c4:	1c02      	adds	r2, r0, #0
 80136c6:	701a      	strb	r2, [r3, #0]
 80136c8:	1d7b      	adds	r3, r7, #5
 80136ca:	1c0a      	adds	r2, r1, #0
 80136cc:	701a      	strb	r2, [r3, #0]
    TimerTime_t nextTxDelay = ( TimerTime_t )( -1 );
 80136ce:	2301      	movs	r3, #1
 80136d0:	425b      	negs	r3, r3
 80136d2:	617b      	str	r3, [r7, #20]

    // Update bands Time OFF
    for( uint8_t i = 0; i < nbBands; i++ )
 80136d4:	2313      	movs	r3, #19
 80136d6:	18fb      	adds	r3, r7, r3
 80136d8:	2200      	movs	r2, #0
 80136da:	701a      	strb	r2, [r3, #0]
 80136dc:	e0cf      	b.n	801387e <RegionCommonUpdateBandTimeOff+0x1d0>
    {
        if( joined == false )
 80136de:	1dfb      	adds	r3, r7, #7
 80136e0:	781b      	ldrb	r3, [r3, #0]
 80136e2:	2201      	movs	r2, #1
 80136e4:	4053      	eors	r3, r2
 80136e6:	b2db      	uxtb	r3, r3
 80136e8:	2b00      	cmp	r3, #0
 80136ea:	d065      	beq.n	80137b8 <RegionCommonUpdateBandTimeOff+0x10a>
        {
            TimerTime_t txDoneTime =  MAX( TimerGetElapsedTime( bands[i].LastJoinTxDoneTime ),
 80136ec:	2313      	movs	r3, #19
 80136ee:	18fb      	adds	r3, r7, r3
 80136f0:	781b      	ldrb	r3, [r3, #0]
 80136f2:	011b      	lsls	r3, r3, #4
 80136f4:	683a      	ldr	r2, [r7, #0]
 80136f6:	18d3      	adds	r3, r2, r3
 80136f8:	685b      	ldr	r3, [r3, #4]
 80136fa:	0018      	movs	r0, r3
 80136fc:	f002 f92b 	bl	8015956 <TimerGetElapsedTime>
 8013700:	0004      	movs	r4, r0
 8013702:	1dbb      	adds	r3, r7, #6
 8013704:	781b      	ldrb	r3, [r3, #0]
 8013706:	2b00      	cmp	r3, #0
 8013708:	d00b      	beq.n	8013722 <RegionCommonUpdateBandTimeOff+0x74>
 801370a:	2313      	movs	r3, #19
 801370c:	18fb      	adds	r3, r7, r3
 801370e:	781b      	ldrb	r3, [r3, #0]
 8013710:	011b      	lsls	r3, r3, #4
 8013712:	683a      	ldr	r2, [r7, #0]
 8013714:	18d3      	adds	r3, r2, r3
 8013716:	689b      	ldr	r3, [r3, #8]
 8013718:	0018      	movs	r0, r3
 801371a:	f002 f91c 	bl	8015956 <TimerGetElapsedTime>
 801371e:	0003      	movs	r3, r0
 8013720:	e000      	b.n	8013724 <RegionCommonUpdateBandTimeOff+0x76>
 8013722:	2300      	movs	r3, #0
 8013724:	42a3      	cmp	r3, r4
 8013726:	d20b      	bcs.n	8013740 <RegionCommonUpdateBandTimeOff+0x92>
 8013728:	2313      	movs	r3, #19
 801372a:	18fb      	adds	r3, r7, r3
 801372c:	781b      	ldrb	r3, [r3, #0]
 801372e:	011b      	lsls	r3, r3, #4
 8013730:	683a      	ldr	r2, [r7, #0]
 8013732:	18d3      	adds	r3, r2, r3
 8013734:	685b      	ldr	r3, [r3, #4]
 8013736:	0018      	movs	r0, r3
 8013738:	f002 f90d 	bl	8015956 <TimerGetElapsedTime>
 801373c:	0003      	movs	r3, r0
 801373e:	e010      	b.n	8013762 <RegionCommonUpdateBandTimeOff+0xb4>
 8013740:	1dbb      	adds	r3, r7, #6
 8013742:	781b      	ldrb	r3, [r3, #0]
 8013744:	2b00      	cmp	r3, #0
 8013746:	d00b      	beq.n	8013760 <RegionCommonUpdateBandTimeOff+0xb2>
 8013748:	2313      	movs	r3, #19
 801374a:	18fb      	adds	r3, r7, r3
 801374c:	781b      	ldrb	r3, [r3, #0]
 801374e:	011b      	lsls	r3, r3, #4
 8013750:	683a      	ldr	r2, [r7, #0]
 8013752:	18d3      	adds	r3, r2, r3
 8013754:	689b      	ldr	r3, [r3, #8]
 8013756:	0018      	movs	r0, r3
 8013758:	f002 f8fd 	bl	8015956 <TimerGetElapsedTime>
 801375c:	0003      	movs	r3, r0
 801375e:	e000      	b.n	8013762 <RegionCommonUpdateBandTimeOff+0xb4>
 8013760:	2300      	movs	r3, #0
 8013762:	60fb      	str	r3, [r7, #12]
                                        ( dutyCycle == true ) ? TimerGetElapsedTime( bands[i].LastTxDoneTime ) : 0 );

            if( bands[i].TimeOff <= txDoneTime )
 8013764:	2313      	movs	r3, #19
 8013766:	18fb      	adds	r3, r7, r3
 8013768:	781b      	ldrb	r3, [r3, #0]
 801376a:	011b      	lsls	r3, r3, #4
 801376c:	683a      	ldr	r2, [r7, #0]
 801376e:	18d3      	adds	r3, r2, r3
 8013770:	68db      	ldr	r3, [r3, #12]
 8013772:	68fa      	ldr	r2, [r7, #12]
 8013774:	429a      	cmp	r2, r3
 8013776:	d307      	bcc.n	8013788 <RegionCommonUpdateBandTimeOff+0xda>
            {
                bands[i].TimeOff = 0;
 8013778:	2313      	movs	r3, #19
 801377a:	18fb      	adds	r3, r7, r3
 801377c:	781b      	ldrb	r3, [r3, #0]
 801377e:	011b      	lsls	r3, r3, #4
 8013780:	683a      	ldr	r2, [r7, #0]
 8013782:	18d3      	adds	r3, r2, r3
 8013784:	2200      	movs	r2, #0
 8013786:	60da      	str	r2, [r3, #12]
            }
            if( bands[i].TimeOff != 0 )
 8013788:	2313      	movs	r3, #19
 801378a:	18fb      	adds	r3, r7, r3
 801378c:	781b      	ldrb	r3, [r3, #0]
 801378e:	011b      	lsls	r3, r3, #4
 8013790:	683a      	ldr	r2, [r7, #0]
 8013792:	18d3      	adds	r3, r2, r3
 8013794:	68db      	ldr	r3, [r3, #12]
 8013796:	2b00      	cmp	r3, #0
 8013798:	d06b      	beq.n	8013872 <RegionCommonUpdateBandTimeOff+0x1c4>
            {
                nextTxDelay = MIN( bands[i].TimeOff - txDoneTime, nextTxDelay );
 801379a:	2313      	movs	r3, #19
 801379c:	18fb      	adds	r3, r7, r3
 801379e:	781b      	ldrb	r3, [r3, #0]
 80137a0:	011b      	lsls	r3, r3, #4
 80137a2:	683a      	ldr	r2, [r7, #0]
 80137a4:	18d3      	adds	r3, r2, r3
 80137a6:	68da      	ldr	r2, [r3, #12]
 80137a8:	68fb      	ldr	r3, [r7, #12]
 80137aa:	1ad2      	subs	r2, r2, r3
 80137ac:	697b      	ldr	r3, [r7, #20]
 80137ae:	4293      	cmp	r3, r2
 80137b0:	d900      	bls.n	80137b4 <RegionCommonUpdateBandTimeOff+0x106>
 80137b2:	0013      	movs	r3, r2
 80137b4:	617b      	str	r3, [r7, #20]
 80137b6:	e05c      	b.n	8013872 <RegionCommonUpdateBandTimeOff+0x1c4>
            }
        }
        else
        {
            if( dutyCycle == true )
 80137b8:	1dbb      	adds	r3, r7, #6
 80137ba:	781b      	ldrb	r3, [r3, #0]
 80137bc:	2b00      	cmp	r3, #0
 80137be:	d04e      	beq.n	801385e <RegionCommonUpdateBandTimeOff+0x1b0>
            {
                if( bands[i].TimeOff <= TimerGetElapsedTime( bands[i].LastTxDoneTime ) )
 80137c0:	2113      	movs	r1, #19
 80137c2:	187b      	adds	r3, r7, r1
 80137c4:	781b      	ldrb	r3, [r3, #0]
 80137c6:	011b      	lsls	r3, r3, #4
 80137c8:	683a      	ldr	r2, [r7, #0]
 80137ca:	18d3      	adds	r3, r2, r3
 80137cc:	68dc      	ldr	r4, [r3, #12]
 80137ce:	187b      	adds	r3, r7, r1
 80137d0:	781b      	ldrb	r3, [r3, #0]
 80137d2:	011b      	lsls	r3, r3, #4
 80137d4:	683a      	ldr	r2, [r7, #0]
 80137d6:	18d3      	adds	r3, r2, r3
 80137d8:	689b      	ldr	r3, [r3, #8]
 80137da:	0018      	movs	r0, r3
 80137dc:	f002 f8bb 	bl	8015956 <TimerGetElapsedTime>
 80137e0:	0003      	movs	r3, r0
 80137e2:	429c      	cmp	r4, r3
 80137e4:	d807      	bhi.n	80137f6 <RegionCommonUpdateBandTimeOff+0x148>
                {
                    bands[i].TimeOff = 0;
 80137e6:	2313      	movs	r3, #19
 80137e8:	18fb      	adds	r3, r7, r3
 80137ea:	781b      	ldrb	r3, [r3, #0]
 80137ec:	011b      	lsls	r3, r3, #4
 80137ee:	683a      	ldr	r2, [r7, #0]
 80137f0:	18d3      	adds	r3, r2, r3
 80137f2:	2200      	movs	r2, #0
 80137f4:	60da      	str	r2, [r3, #12]
                }
                if( bands[i].TimeOff != 0 )
 80137f6:	2313      	movs	r3, #19
 80137f8:	18fb      	adds	r3, r7, r3
 80137fa:	781b      	ldrb	r3, [r3, #0]
 80137fc:	011b      	lsls	r3, r3, #4
 80137fe:	683a      	ldr	r2, [r7, #0]
 8013800:	18d3      	adds	r3, r2, r3
 8013802:	68db      	ldr	r3, [r3, #12]
 8013804:	2b00      	cmp	r3, #0
 8013806:	d034      	beq.n	8013872 <RegionCommonUpdateBandTimeOff+0x1c4>
                {
                    nextTxDelay = MIN( bands[i].TimeOff - TimerGetElapsedTime( bands[i].LastTxDoneTime ),
 8013808:	2113      	movs	r1, #19
 801380a:	187b      	adds	r3, r7, r1
 801380c:	781b      	ldrb	r3, [r3, #0]
 801380e:	011b      	lsls	r3, r3, #4
 8013810:	683a      	ldr	r2, [r7, #0]
 8013812:	18d3      	adds	r3, r2, r3
 8013814:	68dc      	ldr	r4, [r3, #12]
 8013816:	187b      	adds	r3, r7, r1
 8013818:	781b      	ldrb	r3, [r3, #0]
 801381a:	011b      	lsls	r3, r3, #4
 801381c:	683a      	ldr	r2, [r7, #0]
 801381e:	18d3      	adds	r3, r2, r3
 8013820:	689b      	ldr	r3, [r3, #8]
 8013822:	0018      	movs	r0, r3
 8013824:	f002 f897 	bl	8015956 <TimerGetElapsedTime>
 8013828:	0003      	movs	r3, r0
 801382a:	1ae3      	subs	r3, r4, r3
 801382c:	697a      	ldr	r2, [r7, #20]
 801382e:	429a      	cmp	r2, r3
 8013830:	d912      	bls.n	8013858 <RegionCommonUpdateBandTimeOff+0x1aa>
 8013832:	2113      	movs	r1, #19
 8013834:	187b      	adds	r3, r7, r1
 8013836:	781b      	ldrb	r3, [r3, #0]
 8013838:	011b      	lsls	r3, r3, #4
 801383a:	683a      	ldr	r2, [r7, #0]
 801383c:	18d3      	adds	r3, r2, r3
 801383e:	68dc      	ldr	r4, [r3, #12]
 8013840:	187b      	adds	r3, r7, r1
 8013842:	781b      	ldrb	r3, [r3, #0]
 8013844:	011b      	lsls	r3, r3, #4
 8013846:	683a      	ldr	r2, [r7, #0]
 8013848:	18d3      	adds	r3, r2, r3
 801384a:	689b      	ldr	r3, [r3, #8]
 801384c:	0018      	movs	r0, r3
 801384e:	f002 f882 	bl	8015956 <TimerGetElapsedTime>
 8013852:	0003      	movs	r3, r0
 8013854:	1ae3      	subs	r3, r4, r3
 8013856:	e000      	b.n	801385a <RegionCommonUpdateBandTimeOff+0x1ac>
 8013858:	697b      	ldr	r3, [r7, #20]
 801385a:	617b      	str	r3, [r7, #20]
 801385c:	e009      	b.n	8013872 <RegionCommonUpdateBandTimeOff+0x1c4>
                                       nextTxDelay );
                }
            }
            else
            {
                nextTxDelay = 0;
 801385e:	2300      	movs	r3, #0
 8013860:	617b      	str	r3, [r7, #20]
                bands[i].TimeOff = 0;
 8013862:	2313      	movs	r3, #19
 8013864:	18fb      	adds	r3, r7, r3
 8013866:	781b      	ldrb	r3, [r3, #0]
 8013868:	011b      	lsls	r3, r3, #4
 801386a:	683a      	ldr	r2, [r7, #0]
 801386c:	18d3      	adds	r3, r2, r3
 801386e:	2200      	movs	r2, #0
 8013870:	60da      	str	r2, [r3, #12]
    for( uint8_t i = 0; i < nbBands; i++ )
 8013872:	2113      	movs	r1, #19
 8013874:	187b      	adds	r3, r7, r1
 8013876:	781a      	ldrb	r2, [r3, #0]
 8013878:	187b      	adds	r3, r7, r1
 801387a:	3201      	adds	r2, #1
 801387c:	701a      	strb	r2, [r3, #0]
 801387e:	2313      	movs	r3, #19
 8013880:	18fa      	adds	r2, r7, r3
 8013882:	1d7b      	adds	r3, r7, #5
 8013884:	7812      	ldrb	r2, [r2, #0]
 8013886:	781b      	ldrb	r3, [r3, #0]
 8013888:	429a      	cmp	r2, r3
 801388a:	d200      	bcs.n	801388e <RegionCommonUpdateBandTimeOff+0x1e0>
 801388c:	e727      	b.n	80136de <RegionCommonUpdateBandTimeOff+0x30>
            }
        }
    }
    return nextTxDelay;
 801388e:	697b      	ldr	r3, [r7, #20]
}
 8013890:	0018      	movs	r0, r3
 8013892:	46bd      	mov	sp, r7
 8013894:	b007      	add	sp, #28
 8013896:	bd90      	pop	{r4, r7, pc}

08013898 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 8013898:	b580      	push	{r7, lr}
 801389a:	b084      	sub	sp, #16
 801389c:	af00      	add	r7, sp, #0
 801389e:	6078      	str	r0, [r7, #4]
 80138a0:	6039      	str	r1, [r7, #0]
    uint8_t retIndex = 0;
 80138a2:	230f      	movs	r3, #15
 80138a4:	18fb      	adds	r3, r7, r3
 80138a6:	2200      	movs	r2, #0
 80138a8:	701a      	strb	r2, [r3, #0]

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 80138aa:	687b      	ldr	r3, [r7, #4]
 80138ac:	781b      	ldrb	r3, [r3, #0]
 80138ae:	2b03      	cmp	r3, #3
 80138b0:	d141      	bne.n	8013936 <RegionCommonParseLinkAdrReq+0x9e>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 80138b2:	687b      	ldr	r3, [r7, #4]
 80138b4:	3301      	adds	r3, #1
 80138b6:	781b      	ldrb	r3, [r3, #0]
 80138b8:	b25a      	sxtb	r2, r3
 80138ba:	683b      	ldr	r3, [r7, #0]
 80138bc:	705a      	strb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 80138be:	683b      	ldr	r3, [r7, #0]
 80138c0:	785b      	ldrb	r3, [r3, #1]
 80138c2:	b25b      	sxtb	r3, r3
 80138c4:	220f      	movs	r2, #15
 80138c6:	4013      	ands	r3, r2
 80138c8:	b25a      	sxtb	r2, r3
 80138ca:	683b      	ldr	r3, [r7, #0]
 80138cc:	709a      	strb	r2, [r3, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 80138ce:	683b      	ldr	r3, [r7, #0]
 80138d0:	785b      	ldrb	r3, [r3, #1]
 80138d2:	b25b      	sxtb	r3, r3
 80138d4:	b2db      	uxtb	r3, r3
 80138d6:	091b      	lsrs	r3, r3, #4
 80138d8:	b2db      	uxtb	r3, r3
 80138da:	b25a      	sxtb	r2, r3
 80138dc:	683b      	ldr	r3, [r7, #0]
 80138de:	705a      	strb	r2, [r3, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 80138e0:	687b      	ldr	r3, [r7, #4]
 80138e2:	3302      	adds	r3, #2
 80138e4:	781b      	ldrb	r3, [r3, #0]
 80138e6:	b29a      	uxth	r2, r3
 80138e8:	683b      	ldr	r3, [r7, #0]
 80138ea:	809a      	strh	r2, [r3, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 80138ec:	683b      	ldr	r3, [r7, #0]
 80138ee:	889b      	ldrh	r3, [r3, #4]
 80138f0:	b21a      	sxth	r2, r3
 80138f2:	687b      	ldr	r3, [r7, #4]
 80138f4:	3303      	adds	r3, #3
 80138f6:	781b      	ldrb	r3, [r3, #0]
 80138f8:	021b      	lsls	r3, r3, #8
 80138fa:	b21b      	sxth	r3, r3
 80138fc:	4313      	orrs	r3, r2
 80138fe:	b21b      	sxth	r3, r3
 8013900:	b29a      	uxth	r2, r3
 8013902:	683b      	ldr	r3, [r7, #0]
 8013904:	809a      	strh	r2, [r3, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 8013906:	687b      	ldr	r3, [r7, #4]
 8013908:	791a      	ldrb	r2, [r3, #4]
 801390a:	683b      	ldr	r3, [r7, #0]
 801390c:	701a      	strb	r2, [r3, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 801390e:	683b      	ldr	r3, [r7, #0]
 8013910:	781b      	ldrb	r3, [r3, #0]
 8013912:	091b      	lsrs	r3, r3, #4
 8013914:	b2db      	uxtb	r3, r3
 8013916:	2207      	movs	r2, #7
 8013918:	4013      	ands	r3, r2
 801391a:	b2da      	uxtb	r2, r3
 801391c:	683b      	ldr	r3, [r7, #0]
 801391e:	70da      	strb	r2, [r3, #3]
        linkAdrParams->NbRep &= 0x0F;
 8013920:	683b      	ldr	r3, [r7, #0]
 8013922:	781b      	ldrb	r3, [r3, #0]
 8013924:	220f      	movs	r2, #15
 8013926:	4013      	ands	r3, r2
 8013928:	b2da      	uxtb	r2, r3
 801392a:	683b      	ldr	r3, [r7, #0]
 801392c:	701a      	strb	r2, [r3, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 801392e:	230f      	movs	r3, #15
 8013930:	18fb      	adds	r3, r7, r3
 8013932:	2205      	movs	r2, #5
 8013934:	701a      	strb	r2, [r3, #0]
    }
    return retIndex;
 8013936:	230f      	movs	r3, #15
 8013938:	18fb      	adds	r3, r7, r3
 801393a:	781b      	ldrb	r3, [r3, #0]
}
 801393c:	0018      	movs	r0, r3
 801393e:	46bd      	mov	sp, r7
 8013940:	b004      	add	sp, #16
 8013942:	bd80      	pop	{r7, pc}

08013944 <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 8013944:	b5b0      	push	{r4, r5, r7, lr}
 8013946:	b088      	sub	sp, #32
 8013948:	af02      	add	r7, sp, #8
 801394a:	60f8      	str	r0, [r7, #12]
 801394c:	60b9      	str	r1, [r7, #8]
 801394e:	607a      	str	r2, [r7, #4]
 8013950:	603b      	str	r3, [r7, #0]
    uint8_t status = verifyParams->Status;
 8013952:	2317      	movs	r3, #23
 8013954:	18fb      	adds	r3, r7, r3
 8013956:	68fa      	ldr	r2, [r7, #12]
 8013958:	7912      	ldrb	r2, [r2, #4]
 801395a:	701a      	strb	r2, [r3, #0]
    int8_t datarate = verifyParams->Datarate;
 801395c:	2316      	movs	r3, #22
 801395e:	18fb      	adds	r3, r7, r3
 8013960:	68fa      	ldr	r2, [r7, #12]
 8013962:	7992      	ldrb	r2, [r2, #6]
 8013964:	701a      	strb	r2, [r3, #0]
    int8_t txPower = verifyParams->TxPower;
 8013966:	2315      	movs	r3, #21
 8013968:	18fb      	adds	r3, r7, r3
 801396a:	68fa      	ldr	r2, [r7, #12]
 801396c:	79d2      	ldrb	r2, [r2, #7]
 801396e:	701a      	strb	r2, [r3, #0]
    int8_t nbRepetitions = verifyParams->NbRep;
 8013970:	68fb      	ldr	r3, [r7, #12]
 8013972:	7a1a      	ldrb	r2, [r3, #8]
 8013974:	2314      	movs	r3, #20
 8013976:	18fb      	adds	r3, r7, r3
 8013978:	701a      	strb	r2, [r3, #0]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 801397a:	68fb      	ldr	r3, [r7, #12]
 801397c:	795b      	ldrb	r3, [r3, #5]
 801397e:	2201      	movs	r2, #1
 8013980:	4053      	eors	r3, r2
 8013982:	b2db      	uxtb	r3, r3
 8013984:	2b00      	cmp	r3, #0
 8013986:	d00e      	beq.n	80139a6 <RegionCommonLinkAdrReqVerifyParams+0x62>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 8013988:	2314      	movs	r3, #20
 801398a:	18fb      	adds	r3, r7, r3
 801398c:	68fa      	ldr	r2, [r7, #12]
 801398e:	7ad2      	ldrb	r2, [r2, #11]
 8013990:	701a      	strb	r2, [r3, #0]
        datarate =  verifyParams->CurrentDatarate;
 8013992:	2316      	movs	r3, #22
 8013994:	18fb      	adds	r3, r7, r3
 8013996:	68fa      	ldr	r2, [r7, #12]
 8013998:	7a52      	ldrb	r2, [r2, #9]
 801399a:	701a      	strb	r2, [r3, #0]
        txPower =  verifyParams->CurrentTxPower;
 801399c:	2315      	movs	r3, #21
 801399e:	18fb      	adds	r3, r7, r3
 80139a0:	68fa      	ldr	r2, [r7, #12]
 80139a2:	7a92      	ldrb	r2, [r2, #10]
 80139a4:	701a      	strb	r2, [r3, #0]
    }

    if( status != 0 )
 80139a6:	2317      	movs	r3, #23
 80139a8:	18fb      	adds	r3, r7, r3
 80139aa:	781b      	ldrb	r3, [r3, #0]
 80139ac:	2b00      	cmp	r3, #0
 80139ae:	d049      	beq.n	8013a44 <RegionCommonLinkAdrReqVerifyParams+0x100>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 80139b0:	68fb      	ldr	r3, [r7, #12]
 80139b2:	7b18      	ldrb	r0, [r3, #12]
 80139b4:	68fb      	ldr	r3, [r7, #12]
 80139b6:	691c      	ldr	r4, [r3, #16]
 80139b8:	68fb      	ldr	r3, [r7, #12]
 80139ba:	2514      	movs	r5, #20
 80139bc:	575d      	ldrsb	r5, [r3, r5]
 80139be:	68fb      	ldr	r3, [r7, #12]
 80139c0:	2215      	movs	r2, #21
 80139c2:	569a      	ldrsb	r2, [r3, r2]
 80139c4:	68fb      	ldr	r3, [r7, #12]
 80139c6:	699b      	ldr	r3, [r3, #24]
 80139c8:	2116      	movs	r1, #22
 80139ca:	1879      	adds	r1, r7, r1
 80139cc:	7809      	ldrb	r1, [r1, #0]
 80139ce:	b249      	sxtb	r1, r1
 80139d0:	9301      	str	r3, [sp, #4]
 80139d2:	9200      	str	r2, [sp, #0]
 80139d4:	002b      	movs	r3, r5
 80139d6:	000a      	movs	r2, r1
 80139d8:	0021      	movs	r1, r4
 80139da:	f7ff fcdb 	bl	8013394 <RegionCommonChanVerifyDr>
 80139de:	0003      	movs	r3, r0
 80139e0:	001a      	movs	r2, r3
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
 80139e2:	2301      	movs	r3, #1
 80139e4:	4053      	eors	r3, r2
 80139e6:	b2db      	uxtb	r3, r3
        if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 80139e8:	2b00      	cmp	r3, #0
 80139ea:	d006      	beq.n	80139fa <RegionCommonLinkAdrReqVerifyParams+0xb6>
        {
            status &= 0xFD; // Datarate KO
 80139ec:	2217      	movs	r2, #23
 80139ee:	18bb      	adds	r3, r7, r2
 80139f0:	18ba      	adds	r2, r7, r2
 80139f2:	7812      	ldrb	r2, [r2, #0]
 80139f4:	2102      	movs	r1, #2
 80139f6:	438a      	bics	r2, r1
 80139f8:	701a      	strb	r2, [r3, #0]
        }

        // Verify tx power
        if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 80139fa:	68fb      	ldr	r3, [r7, #12]
 80139fc:	211d      	movs	r1, #29
 80139fe:	5659      	ldrsb	r1, [r3, r1]
 8013a00:	68fb      	ldr	r3, [r7, #12]
 8013a02:	221c      	movs	r2, #28
 8013a04:	569a      	ldrsb	r2, [r3, r2]
 8013a06:	2315      	movs	r3, #21
 8013a08:	18fb      	adds	r3, r7, r3
 8013a0a:	781b      	ldrb	r3, [r3, #0]
 8013a0c:	b25b      	sxtb	r3, r3
 8013a0e:	0018      	movs	r0, r3
 8013a10:	f7ff fd5a 	bl	80134c8 <RegionCommonValueInRange>
 8013a14:	1e03      	subs	r3, r0, #0
 8013a16:	d115      	bne.n	8013a44 <RegionCommonLinkAdrReqVerifyParams+0x100>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 8013a18:	68fb      	ldr	r3, [r7, #12]
 8013a1a:	7f5b      	ldrb	r3, [r3, #29]
 8013a1c:	b25b      	sxtb	r3, r3
 8013a1e:	2215      	movs	r2, #21
 8013a20:	18ba      	adds	r2, r7, r2
 8013a22:	7812      	ldrb	r2, [r2, #0]
 8013a24:	b252      	sxtb	r2, r2
 8013a26:	429a      	cmp	r2, r3
 8013a28:	da05      	bge.n	8013a36 <RegionCommonLinkAdrReqVerifyParams+0xf2>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
 8013a2a:	2315      	movs	r3, #21
 8013a2c:	18fb      	adds	r3, r7, r3
 8013a2e:	68fa      	ldr	r2, [r7, #12]
 8013a30:	7f52      	ldrb	r2, [r2, #29]
 8013a32:	701a      	strb	r2, [r3, #0]
 8013a34:	e006      	b.n	8013a44 <RegionCommonLinkAdrReqVerifyParams+0x100>
            }
            else
            {
                status &= 0xFB; // TxPower KO
 8013a36:	2217      	movs	r2, #23
 8013a38:	18bb      	adds	r3, r7, r2
 8013a3a:	18ba      	adds	r2, r7, r2
 8013a3c:	7812      	ldrb	r2, [r2, #0]
 8013a3e:	2104      	movs	r1, #4
 8013a40:	438a      	bics	r2, r1
 8013a42:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 8013a44:	2317      	movs	r3, #23
 8013a46:	18fb      	adds	r3, r7, r3
 8013a48:	781b      	ldrb	r3, [r3, #0]
 8013a4a:	2b07      	cmp	r3, #7
 8013a4c:	d109      	bne.n	8013a62 <RegionCommonLinkAdrReqVerifyParams+0x11e>
    {
        if( nbRepetitions == 0 )
 8013a4e:	2314      	movs	r3, #20
 8013a50:	18fb      	adds	r3, r7, r3
 8013a52:	781b      	ldrb	r3, [r3, #0]
 8013a54:	b25b      	sxtb	r3, r3
 8013a56:	2b00      	cmp	r3, #0
 8013a58:	d103      	bne.n	8013a62 <RegionCommonLinkAdrReqVerifyParams+0x11e>
        { // Restore the default value according to the LoRaWAN specification
            nbRepetitions = 1;
 8013a5a:	2314      	movs	r3, #20
 8013a5c:	18fb      	adds	r3, r7, r3
 8013a5e:	2201      	movs	r2, #1
 8013a60:	701a      	strb	r2, [r3, #0]
        }
    }

    // Apply changes
    *dr = datarate;
 8013a62:	68bb      	ldr	r3, [r7, #8]
 8013a64:	2216      	movs	r2, #22
 8013a66:	18ba      	adds	r2, r7, r2
 8013a68:	7812      	ldrb	r2, [r2, #0]
 8013a6a:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 8013a6c:	687b      	ldr	r3, [r7, #4]
 8013a6e:	2215      	movs	r2, #21
 8013a70:	18ba      	adds	r2, r7, r2
 8013a72:	7812      	ldrb	r2, [r2, #0]
 8013a74:	701a      	strb	r2, [r3, #0]
    *nbRep = nbRepetitions;
 8013a76:	2314      	movs	r3, #20
 8013a78:	18fb      	adds	r3, r7, r3
 8013a7a:	781a      	ldrb	r2, [r3, #0]
 8013a7c:	683b      	ldr	r3, [r7, #0]
 8013a7e:	701a      	strb	r2, [r3, #0]

    return status;
 8013a80:	2317      	movs	r3, #23
 8013a82:	18fb      	adds	r3, r7, r3
 8013a84:	781b      	ldrb	r3, [r3, #0]
}
 8013a86:	0018      	movs	r0, r3
 8013a88:	46bd      	mov	sp, r7
 8013a8a:	b006      	add	sp, #24
 8013a8c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08013a90 <RegionCommonComputeSymbolTimeLoRa>:

double RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidth )
{
 8013a90:	b5b0      	push	{r4, r5, r7, lr}
 8013a92:	b082      	sub	sp, #8
 8013a94:	af00      	add	r7, sp, #0
 8013a96:	0002      	movs	r2, r0
 8013a98:	6039      	str	r1, [r7, #0]
 8013a9a:	1dfb      	adds	r3, r7, #7
 8013a9c:	701a      	strb	r2, [r3, #0]
    return ( ( double )( 1 << phyDr ) / ( double )bandwidth ) * 1000;
 8013a9e:	1dfb      	adds	r3, r7, #7
 8013aa0:	781b      	ldrb	r3, [r3, #0]
 8013aa2:	2201      	movs	r2, #1
 8013aa4:	409a      	lsls	r2, r3
 8013aa6:	0013      	movs	r3, r2
 8013aa8:	0018      	movs	r0, r3
 8013aaa:	f7ee fd6d 	bl	8002588 <__aeabi_i2d>
 8013aae:	0004      	movs	r4, r0
 8013ab0:	000d      	movs	r5, r1
 8013ab2:	6838      	ldr	r0, [r7, #0]
 8013ab4:	f7ee fda2 	bl	80025fc <__aeabi_ui2d>
 8013ab8:	0002      	movs	r2, r0
 8013aba:	000b      	movs	r3, r1
 8013abc:	0020      	movs	r0, r4
 8013abe:	0029      	movs	r1, r5
 8013ac0:	f7ed fb68 	bl	8001194 <__aeabi_ddiv>
 8013ac4:	0003      	movs	r3, r0
 8013ac6:	000c      	movs	r4, r1
 8013ac8:	0018      	movs	r0, r3
 8013aca:	0021      	movs	r1, r4
 8013acc:	2200      	movs	r2, #0
 8013ace:	4b05      	ldr	r3, [pc, #20]	; (8013ae4 <RegionCommonComputeSymbolTimeLoRa+0x54>)
 8013ad0:	f7ed ff6a 	bl	80019a8 <__aeabi_dmul>
 8013ad4:	0003      	movs	r3, r0
 8013ad6:	000c      	movs	r4, r1
}
 8013ad8:	0018      	movs	r0, r3
 8013ada:	0021      	movs	r1, r4
 8013adc:	46bd      	mov	sp, r7
 8013ade:	b002      	add	sp, #8
 8013ae0:	bdb0      	pop	{r4, r5, r7, pc}
 8013ae2:	46c0      	nop			; (mov r8, r8)
 8013ae4:	408f4000 	.word	0x408f4000

08013ae8 <RegionCommonComputeSymbolTimeFsk>:

double RegionCommonComputeSymbolTimeFsk( uint8_t phyDr )
{
 8013ae8:	b590      	push	{r4, r7, lr}
 8013aea:	b083      	sub	sp, #12
 8013aec:	af00      	add	r7, sp, #0
 8013aee:	0002      	movs	r2, r0
 8013af0:	1dfb      	adds	r3, r7, #7
 8013af2:	701a      	strb	r2, [r3, #0]
    return ( 8.0 / ( double )phyDr ); // 1 symbol equals 1 byte
 8013af4:	1dfb      	adds	r3, r7, #7
 8013af6:	781b      	ldrb	r3, [r3, #0]
 8013af8:	0018      	movs	r0, r3
 8013afa:	f7ee fd7f 	bl	80025fc <__aeabi_ui2d>
 8013afe:	0003      	movs	r3, r0
 8013b00:	000c      	movs	r4, r1
 8013b02:	001a      	movs	r2, r3
 8013b04:	0023      	movs	r3, r4
 8013b06:	2000      	movs	r0, #0
 8013b08:	4904      	ldr	r1, [pc, #16]	; (8013b1c <RegionCommonComputeSymbolTimeFsk+0x34>)
 8013b0a:	f7ed fb43 	bl	8001194 <__aeabi_ddiv>
 8013b0e:	0003      	movs	r3, r0
 8013b10:	000c      	movs	r4, r1
}
 8013b12:	0018      	movs	r0, r3
 8013b14:	0021      	movs	r1, r4
 8013b16:	46bd      	mov	sp, r7
 8013b18:	b003      	add	sp, #12
 8013b1a:	bd90      	pop	{r4, r7, pc}
 8013b1c:	40200000 	.word	0x40200000

08013b20 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( double tSymbol, uint8_t minRxSymbols, uint32_t rxError, uint32_t wakeUpTime, uint32_t* windowTimeout, int32_t* windowOffset )
{
 8013b20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013b22:	b085      	sub	sp, #20
 8013b24:	af00      	add	r7, sp, #0
 8013b26:	60b8      	str	r0, [r7, #8]
 8013b28:	60f9      	str	r1, [r7, #12]
 8013b2a:	603b      	str	r3, [r7, #0]
 8013b2c:	1dfb      	adds	r3, r7, #7
 8013b2e:	701a      	strb	r2, [r3, #0]
    *windowTimeout = MAX( ( uint32_t )ceil( ( ( 2 * minRxSymbols - 8 ) * tSymbol + 2 * rxError ) / tSymbol ), minRxSymbols ); // Computed number of symbols
 8013b30:	1dfb      	adds	r3, r7, #7
 8013b32:	781c      	ldrb	r4, [r3, #0]
 8013b34:	1dfb      	adds	r3, r7, #7
 8013b36:	781b      	ldrb	r3, [r3, #0]
 8013b38:	3b04      	subs	r3, #4
 8013b3a:	005b      	lsls	r3, r3, #1
 8013b3c:	0018      	movs	r0, r3
 8013b3e:	f7ee fd23 	bl	8002588 <__aeabi_i2d>
 8013b42:	68ba      	ldr	r2, [r7, #8]
 8013b44:	68fb      	ldr	r3, [r7, #12]
 8013b46:	f7ed ff2f 	bl	80019a8 <__aeabi_dmul>
 8013b4a:	0002      	movs	r2, r0
 8013b4c:	000b      	movs	r3, r1
 8013b4e:	0015      	movs	r5, r2
 8013b50:	001e      	movs	r6, r3
 8013b52:	683b      	ldr	r3, [r7, #0]
 8013b54:	005b      	lsls	r3, r3, #1
 8013b56:	0018      	movs	r0, r3
 8013b58:	f7ee fd50 	bl	80025fc <__aeabi_ui2d>
 8013b5c:	0002      	movs	r2, r0
 8013b5e:	000b      	movs	r3, r1
 8013b60:	0028      	movs	r0, r5
 8013b62:	0031      	movs	r1, r6
 8013b64:	f7ec fffa 	bl	8000b5c <__aeabi_dadd>
 8013b68:	0002      	movs	r2, r0
 8013b6a:	000b      	movs	r3, r1
 8013b6c:	0010      	movs	r0, r2
 8013b6e:	0019      	movs	r1, r3
 8013b70:	68ba      	ldr	r2, [r7, #8]
 8013b72:	68fb      	ldr	r3, [r7, #12]
 8013b74:	f7ed fb0e 	bl	8001194 <__aeabi_ddiv>
 8013b78:	0002      	movs	r2, r0
 8013b7a:	000b      	movs	r3, r1
 8013b7c:	0010      	movs	r0, r2
 8013b7e:	0019      	movs	r1, r3
 8013b80:	f00c fc0a 	bl	8020398 <ceil>
 8013b84:	0002      	movs	r2, r0
 8013b86:	000b      	movs	r3, r1
 8013b88:	0010      	movs	r0, r2
 8013b8a:	0019      	movs	r1, r3
 8013b8c:	f7ec fce6 	bl	800055c <__aeabi_d2uiz>
 8013b90:	0002      	movs	r2, r0
 8013b92:	0023      	movs	r3, r4
 8013b94:	4293      	cmp	r3, r2
 8013b96:	d200      	bcs.n	8013b9a <RegionCommonComputeRxWindowParameters+0x7a>
 8013b98:	0013      	movs	r3, r2
 8013b9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013b9c:	6013      	str	r3, [r2, #0]
    *windowOffset = ( int32_t )ceil( ( 4.0 * tSymbol ) - ( ( *windowTimeout * tSymbol ) / 2.0 ) - wakeUpTime );
 8013b9e:	2200      	movs	r2, #0
 8013ba0:	4b20      	ldr	r3, [pc, #128]	; (8013c24 <RegionCommonComputeRxWindowParameters+0x104>)
 8013ba2:	68b8      	ldr	r0, [r7, #8]
 8013ba4:	68f9      	ldr	r1, [r7, #12]
 8013ba6:	f7ed feff 	bl	80019a8 <__aeabi_dmul>
 8013baa:	0003      	movs	r3, r0
 8013bac:	000c      	movs	r4, r1
 8013bae:	0025      	movs	r5, r4
 8013bb0:	001c      	movs	r4, r3
 8013bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013bb4:	681b      	ldr	r3, [r3, #0]
 8013bb6:	0018      	movs	r0, r3
 8013bb8:	f7ee fd20 	bl	80025fc <__aeabi_ui2d>
 8013bbc:	68ba      	ldr	r2, [r7, #8]
 8013bbe:	68fb      	ldr	r3, [r7, #12]
 8013bc0:	f7ed fef2 	bl	80019a8 <__aeabi_dmul>
 8013bc4:	0002      	movs	r2, r0
 8013bc6:	000b      	movs	r3, r1
 8013bc8:	0010      	movs	r0, r2
 8013bca:	0019      	movs	r1, r3
 8013bcc:	2200      	movs	r2, #0
 8013bce:	2380      	movs	r3, #128	; 0x80
 8013bd0:	05db      	lsls	r3, r3, #23
 8013bd2:	f7ed fadf 	bl	8001194 <__aeabi_ddiv>
 8013bd6:	0002      	movs	r2, r0
 8013bd8:	000b      	movs	r3, r1
 8013bda:	0020      	movs	r0, r4
 8013bdc:	0029      	movs	r1, r5
 8013bde:	f7ee f955 	bl	8001e8c <__aeabi_dsub>
 8013be2:	0003      	movs	r3, r0
 8013be4:	000c      	movs	r4, r1
 8013be6:	0025      	movs	r5, r4
 8013be8:	001c      	movs	r4, r3
 8013bea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013bec:	f7ee fd06 	bl	80025fc <__aeabi_ui2d>
 8013bf0:	0002      	movs	r2, r0
 8013bf2:	000b      	movs	r3, r1
 8013bf4:	0020      	movs	r0, r4
 8013bf6:	0029      	movs	r1, r5
 8013bf8:	f7ee f948 	bl	8001e8c <__aeabi_dsub>
 8013bfc:	0003      	movs	r3, r0
 8013bfe:	000c      	movs	r4, r1
 8013c00:	0018      	movs	r0, r3
 8013c02:	0021      	movs	r1, r4
 8013c04:	f00c fbc8 	bl	8020398 <ceil>
 8013c08:	0003      	movs	r3, r0
 8013c0a:	000c      	movs	r4, r1
 8013c0c:	0018      	movs	r0, r3
 8013c0e:	0021      	movs	r1, r4
 8013c10:	f7ee fc84 	bl	800251c <__aeabi_d2iz>
 8013c14:	0002      	movs	r2, r0
 8013c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c18:	601a      	str	r2, [r3, #0]
}
 8013c1a:	46c0      	nop			; (mov r8, r8)
 8013c1c:	46bd      	mov	sp, r7
 8013c1e:	b005      	add	sp, #20
 8013c20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013c22:	46c0      	nop			; (mov r8, r8)
 8013c24:	40100000 	.word	0x40100000

08013c28 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 8013c28:	b5b0      	push	{r4, r5, r7, lr}
 8013c2a:	b086      	sub	sp, #24
 8013c2c:	af00      	add	r7, sp, #0
 8013c2e:	60b9      	str	r1, [r7, #8]
 8013c30:	607a      	str	r2, [r7, #4]
 8013c32:	210f      	movs	r1, #15
 8013c34:	187b      	adds	r3, r7, r1
 8013c36:	1c02      	adds	r2, r0, #0
 8013c38:	701a      	strb	r2, [r3, #0]
    int8_t phyTxPower = 0;
 8013c3a:	2517      	movs	r5, #23
 8013c3c:	197b      	adds	r3, r7, r5
 8013c3e:	2200      	movs	r2, #0
 8013c40:	701a      	strb	r2, [r3, #0]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 8013c42:	187b      	adds	r3, r7, r1
 8013c44:	781b      	ldrb	r3, [r3, #0]
 8013c46:	b25b      	sxtb	r3, r3
 8013c48:	005b      	lsls	r3, r3, #1
 8013c4a:	0018      	movs	r0, r3
 8013c4c:	f7ec ff46 	bl	8000adc <__aeabi_ui2f>
 8013c50:	1c03      	adds	r3, r0, #0
 8013c52:	1c19      	adds	r1, r3, #0
 8013c54:	68b8      	ldr	r0, [r7, #8]
 8013c56:	f7ec fd7d 	bl	8000754 <__aeabi_fsub>
 8013c5a:	1c03      	adds	r3, r0, #0
 8013c5c:	6879      	ldr	r1, [r7, #4]
 8013c5e:	1c18      	adds	r0, r3, #0
 8013c60:	f7ec fd78 	bl	8000754 <__aeabi_fsub>
 8013c64:	1c03      	adds	r3, r0, #0
 8013c66:	1c18      	adds	r0, r3, #0
 8013c68:	f7ee fcfa 	bl	8002660 <__aeabi_f2d>
 8013c6c:	0003      	movs	r3, r0
 8013c6e:	000c      	movs	r4, r1
 8013c70:	0018      	movs	r0, r3
 8013c72:	0021      	movs	r1, r4
 8013c74:	f00c fc12 	bl	802049c <floor>
 8013c78:	0002      	movs	r2, r0
 8013c7a:	000b      	movs	r3, r1
 8013c7c:	197c      	adds	r4, r7, r5
 8013c7e:	0010      	movs	r0, r2
 8013c80:	0019      	movs	r1, r3
 8013c82:	f7ee fc4b 	bl	800251c <__aeabi_d2iz>
 8013c86:	0003      	movs	r3, r0
 8013c88:	7023      	strb	r3, [r4, #0]

    return phyTxPower;
 8013c8a:	197b      	adds	r3, r7, r5
 8013c8c:	781b      	ldrb	r3, [r3, #0]
 8013c8e:	b25b      	sxtb	r3, r3
}
 8013c90:	0018      	movs	r0, r3
 8013c92:	46bd      	mov	sp, r7
 8013c94:	b006      	add	sp, #24
 8013c96:	bdb0      	pop	{r4, r5, r7, pc}

08013c98 <RegionCommonCalcBackOff>:

void RegionCommonCalcBackOff( RegionCommonCalcBackOffParams_t* calcBackOffParams )
{
 8013c98:	b5b0      	push	{r4, r5, r7, lr}
 8013c9a:	b084      	sub	sp, #16
 8013c9c:	af00      	add	r7, sp, #0
 8013c9e:	6078      	str	r0, [r7, #4]
    uint8_t bandIdx = calcBackOffParams->Channels[calcBackOffParams->Channel].Band;
 8013ca0:	687b      	ldr	r3, [r7, #4]
 8013ca2:	681a      	ldr	r2, [r3, #0]
 8013ca4:	687b      	ldr	r3, [r7, #4]
 8013ca6:	7adb      	ldrb	r3, [r3, #11]
 8013ca8:	0019      	movs	r1, r3
 8013caa:	000b      	movs	r3, r1
 8013cac:	005b      	lsls	r3, r3, #1
 8013cae:	185b      	adds	r3, r3, r1
 8013cb0:	009b      	lsls	r3, r3, #2
 8013cb2:	18d2      	adds	r2, r2, r3
 8013cb4:	210f      	movs	r1, #15
 8013cb6:	187b      	adds	r3, r7, r1
 8013cb8:	7a52      	ldrb	r2, [r2, #9]
 8013cba:	701a      	strb	r2, [r3, #0]
    uint16_t dutyCycle = calcBackOffParams->Bands[bandIdx].DCycle;
 8013cbc:	687b      	ldr	r3, [r7, #4]
 8013cbe:	685a      	ldr	r2, [r3, #4]
 8013cc0:	187b      	adds	r3, r7, r1
 8013cc2:	781b      	ldrb	r3, [r3, #0]
 8013cc4:	011b      	lsls	r3, r3, #4
 8013cc6:	18d2      	adds	r2, r2, r3
 8013cc8:	230c      	movs	r3, #12
 8013cca:	18fb      	adds	r3, r7, r3
 8013ccc:	8812      	ldrh	r2, [r2, #0]
 8013cce:	801a      	strh	r2, [r3, #0]
    uint16_t joinDutyCycle = 0;
 8013cd0:	230a      	movs	r3, #10
 8013cd2:	18fb      	adds	r3, r7, r3
 8013cd4:	2200      	movs	r2, #0
 8013cd6:	801a      	strh	r2, [r3, #0]

    // Reset time-off to initial value.
    calcBackOffParams->Bands[bandIdx].TimeOff = 0;
 8013cd8:	687b      	ldr	r3, [r7, #4]
 8013cda:	685a      	ldr	r2, [r3, #4]
 8013cdc:	187b      	adds	r3, r7, r1
 8013cde:	781b      	ldrb	r3, [r3, #0]
 8013ce0:	011b      	lsls	r3, r3, #4
 8013ce2:	18d3      	adds	r3, r2, r3
 8013ce4:	2200      	movs	r2, #0
 8013ce6:	60da      	str	r2, [r3, #12]

    if( calcBackOffParams->Joined == false )
 8013ce8:	687b      	ldr	r3, [r7, #4]
 8013cea:	7a5b      	ldrb	r3, [r3, #9]
 8013cec:	2201      	movs	r2, #1
 8013cee:	4053      	eors	r3, r2
 8013cf0:	b2db      	uxtb	r3, r3
 8013cf2:	2b00      	cmp	r3, #0
 8013cf4:	d03c      	beq.n	8013d70 <RegionCommonCalcBackOff+0xd8>
    {
        // Get the join duty cycle
        joinDutyCycle = RegionCommonGetJoinDc( calcBackOffParams->ElapsedTime );
 8013cf6:	687b      	ldr	r3, [r7, #4]
 8013cf8:	68db      	ldr	r3, [r3, #12]
 8013cfa:	250a      	movs	r5, #10
 8013cfc:	197c      	adds	r4, r7, r5
 8013cfe:	0018      	movs	r0, r3
 8013d00:	f7ff fb1c 	bl	801333c <RegionCommonGetJoinDc>
 8013d04:	0003      	movs	r3, r0
 8013d06:	8023      	strh	r3, [r4, #0]
        // Apply the most restricting duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 8013d08:	210c      	movs	r1, #12
 8013d0a:	187a      	adds	r2, r7, r1
 8013d0c:	197b      	adds	r3, r7, r5
 8013d0e:	1879      	adds	r1, r7, r1
 8013d10:	880c      	ldrh	r4, [r1, #0]
 8013d12:	881b      	ldrh	r3, [r3, #0]
 8013d14:	b298      	uxth	r0, r3
 8013d16:	b2a1      	uxth	r1, r4
 8013d18:	4288      	cmp	r0, r1
 8013d1a:	d200      	bcs.n	8013d1e <RegionCommonCalcBackOff+0x86>
 8013d1c:	1c23      	adds	r3, r4, #0
 8013d1e:	8013      	strh	r3, [r2, #0]
        // Reset the timeoff if the last frame was not a join request and when the duty cycle is not enabled
        if( ( calcBackOffParams->DutyCycleEnabled == false ) && ( calcBackOffParams->LastTxIsJoinRequest == false ) )
 8013d20:	687b      	ldr	r3, [r7, #4]
 8013d22:	7a9b      	ldrb	r3, [r3, #10]
 8013d24:	2201      	movs	r2, #1
 8013d26:	4053      	eors	r3, r2
 8013d28:	b2db      	uxtb	r3, r3
 8013d2a:	2b00      	cmp	r3, #0
 8013d2c:	d010      	beq.n	8013d50 <RegionCommonCalcBackOff+0xb8>
 8013d2e:	687b      	ldr	r3, [r7, #4]
 8013d30:	7a1b      	ldrb	r3, [r3, #8]
 8013d32:	2201      	movs	r2, #1
 8013d34:	4053      	eors	r3, r2
 8013d36:	b2db      	uxtb	r3, r3
 8013d38:	2b00      	cmp	r3, #0
 8013d3a:	d009      	beq.n	8013d50 <RegionCommonCalcBackOff+0xb8>
        {
            // This is the case when the duty cycle is off and the last uplink frame was not a join.
            // This could happen in case of a rejoin, e.g. in compliance test mode.
            // In this special case we have to set the time off to 0, since the join duty cycle shall only
            // be applied after the first join request.
            calcBackOffParams->Bands[bandIdx].TimeOff = 0;
 8013d3c:	687b      	ldr	r3, [r7, #4]
 8013d3e:	685a      	ldr	r2, [r3, #4]
 8013d40:	230f      	movs	r3, #15
 8013d42:	18fb      	adds	r3, r7, r3
 8013d44:	781b      	ldrb	r3, [r3, #0]
 8013d46:	011b      	lsls	r3, r3, #4
 8013d48:	18d3      	adds	r3, r2, r3
 8013d4a:	2200      	movs	r2, #0
 8013d4c:	60da      	str	r2, [r3, #12]
        else
        {
            calcBackOffParams->Bands[bandIdx].TimeOff = 0;
        }
    }
}
 8013d4e:	e02c      	b.n	8013daa <RegionCommonCalcBackOff+0x112>
            calcBackOffParams->Bands[bandIdx].TimeOff = calcBackOffParams->TxTimeOnAir * dutyCycle - calcBackOffParams->TxTimeOnAir;
 8013d50:	230c      	movs	r3, #12
 8013d52:	18fb      	adds	r3, r7, r3
 8013d54:	881b      	ldrh	r3, [r3, #0]
 8013d56:	1e5a      	subs	r2, r3, #1
 8013d58:	687b      	ldr	r3, [r7, #4]
 8013d5a:	6919      	ldr	r1, [r3, #16]
 8013d5c:	687b      	ldr	r3, [r7, #4]
 8013d5e:	6858      	ldr	r0, [r3, #4]
 8013d60:	230f      	movs	r3, #15
 8013d62:	18fb      	adds	r3, r7, r3
 8013d64:	781b      	ldrb	r3, [r3, #0]
 8013d66:	011b      	lsls	r3, r3, #4
 8013d68:	18c3      	adds	r3, r0, r3
 8013d6a:	434a      	muls	r2, r1
 8013d6c:	60da      	str	r2, [r3, #12]
}
 8013d6e:	e01c      	b.n	8013daa <RegionCommonCalcBackOff+0x112>
        if( calcBackOffParams->DutyCycleEnabled == true )
 8013d70:	687b      	ldr	r3, [r7, #4]
 8013d72:	7a9b      	ldrb	r3, [r3, #10]
 8013d74:	2b00      	cmp	r3, #0
 8013d76:	d00f      	beq.n	8013d98 <RegionCommonCalcBackOff+0x100>
            calcBackOffParams->Bands[bandIdx].TimeOff = calcBackOffParams->TxTimeOnAir * dutyCycle - calcBackOffParams->TxTimeOnAir;
 8013d78:	230c      	movs	r3, #12
 8013d7a:	18fb      	adds	r3, r7, r3
 8013d7c:	881b      	ldrh	r3, [r3, #0]
 8013d7e:	1e5a      	subs	r2, r3, #1
 8013d80:	687b      	ldr	r3, [r7, #4]
 8013d82:	6919      	ldr	r1, [r3, #16]
 8013d84:	687b      	ldr	r3, [r7, #4]
 8013d86:	6858      	ldr	r0, [r3, #4]
 8013d88:	230f      	movs	r3, #15
 8013d8a:	18fb      	adds	r3, r7, r3
 8013d8c:	781b      	ldrb	r3, [r3, #0]
 8013d8e:	011b      	lsls	r3, r3, #4
 8013d90:	18c3      	adds	r3, r0, r3
 8013d92:	434a      	muls	r2, r1
 8013d94:	60da      	str	r2, [r3, #12]
}
 8013d96:	e008      	b.n	8013daa <RegionCommonCalcBackOff+0x112>
            calcBackOffParams->Bands[bandIdx].TimeOff = 0;
 8013d98:	687b      	ldr	r3, [r7, #4]
 8013d9a:	685a      	ldr	r2, [r3, #4]
 8013d9c:	230f      	movs	r3, #15
 8013d9e:	18fb      	adds	r3, r7, r3
 8013da0:	781b      	ldrb	r3, [r3, #0]
 8013da2:	011b      	lsls	r3, r3, #4
 8013da4:	18d3      	adds	r3, r2, r3
 8013da6:	2200      	movs	r2, #0
 8013da8:	60da      	str	r2, [r3, #12]
}
 8013daa:	46c0      	nop			; (mov r8, r8)
 8013dac:	46bd      	mov	sp, r7
 8013dae:	b004      	add	sp, #16
 8013db0:	bdb0      	pop	{r4, r5, r7, pc}

08013db2 <GetNextLowerTxDr>:
 */
static RegionEU868NvmCtx_t NvmCtx;

// Static functions
static int8_t GetNextLowerTxDr( int8_t dr, int8_t minDr )
{
 8013db2:	b580      	push	{r7, lr}
 8013db4:	b084      	sub	sp, #16
 8013db6:	af00      	add	r7, sp, #0
 8013db8:	0002      	movs	r2, r0
 8013dba:	1dfb      	adds	r3, r7, #7
 8013dbc:	701a      	strb	r2, [r3, #0]
 8013dbe:	1dbb      	adds	r3, r7, #6
 8013dc0:	1c0a      	adds	r2, r1, #0
 8013dc2:	701a      	strb	r2, [r3, #0]
    uint8_t nextLowerDr = 0;
 8013dc4:	230f      	movs	r3, #15
 8013dc6:	18fb      	adds	r3, r7, r3
 8013dc8:	2200      	movs	r2, #0
 8013dca:	701a      	strb	r2, [r3, #0]

    if( dr == minDr )
 8013dcc:	1dfa      	adds	r2, r7, #7
 8013dce:	1dbb      	adds	r3, r7, #6
 8013dd0:	7812      	ldrb	r2, [r2, #0]
 8013dd2:	b252      	sxtb	r2, r2
 8013dd4:	781b      	ldrb	r3, [r3, #0]
 8013dd6:	b25b      	sxtb	r3, r3
 8013dd8:	429a      	cmp	r2, r3
 8013dda:	d105      	bne.n	8013de8 <GetNextLowerTxDr+0x36>
    {
        nextLowerDr = minDr;
 8013ddc:	230f      	movs	r3, #15
 8013dde:	18fb      	adds	r3, r7, r3
 8013de0:	1dba      	adds	r2, r7, #6
 8013de2:	7812      	ldrb	r2, [r2, #0]
 8013de4:	701a      	strb	r2, [r3, #0]
 8013de6:	e005      	b.n	8013df4 <GetNextLowerTxDr+0x42>
    }
    else
    {
        nextLowerDr = dr - 1;
 8013de8:	1dfb      	adds	r3, r7, #7
 8013dea:	781a      	ldrb	r2, [r3, #0]
 8013dec:	230f      	movs	r3, #15
 8013dee:	18fb      	adds	r3, r7, r3
 8013df0:	3a01      	subs	r2, #1
 8013df2:	701a      	strb	r2, [r3, #0]
    }
    return nextLowerDr;
 8013df4:	230f      	movs	r3, #15
 8013df6:	18fb      	adds	r3, r7, r3
 8013df8:	781b      	ldrb	r3, [r3, #0]
 8013dfa:	b25b      	sxtb	r3, r3
}
 8013dfc:	0018      	movs	r0, r3
 8013dfe:	46bd      	mov	sp, r7
 8013e00:	b004      	add	sp, #16
 8013e02:	bd80      	pop	{r7, pc}

08013e04 <GetBandwidth>:

static uint32_t GetBandwidth( uint32_t drIndex )
{
 8013e04:	b580      	push	{r7, lr}
 8013e06:	b082      	sub	sp, #8
 8013e08:	af00      	add	r7, sp, #0
 8013e0a:	6078      	str	r0, [r7, #4]
    switch( BandwidthsEU868[drIndex] )
 8013e0c:	4b09      	ldr	r3, [pc, #36]	; (8013e34 <GetBandwidth+0x30>)
 8013e0e:	687a      	ldr	r2, [r7, #4]
 8013e10:	0092      	lsls	r2, r2, #2
 8013e12:	58d3      	ldr	r3, [r2, r3]
 8013e14:	4a08      	ldr	r2, [pc, #32]	; (8013e38 <GetBandwidth+0x34>)
 8013e16:	4293      	cmp	r3, r2
 8013e18:	d004      	beq.n	8013e24 <GetBandwidth+0x20>
 8013e1a:	4a08      	ldr	r2, [pc, #32]	; (8013e3c <GetBandwidth+0x38>)
 8013e1c:	4293      	cmp	r3, r2
 8013e1e:	d003      	beq.n	8013e28 <GetBandwidth+0x24>
    {
        default:
        case 125000:
            return 0;
 8013e20:	2300      	movs	r3, #0
 8013e22:	e002      	b.n	8013e2a <GetBandwidth+0x26>
        case 250000:
            return 1;
 8013e24:	2301      	movs	r3, #1
 8013e26:	e000      	b.n	8013e2a <GetBandwidth+0x26>
        case 500000:
            return 2;
 8013e28:	2302      	movs	r3, #2
    }
}
 8013e2a:	0018      	movs	r0, r3
 8013e2c:	46bd      	mov	sp, r7
 8013e2e:	b002      	add	sp, #8
 8013e30:	bd80      	pop	{r7, pc}
 8013e32:	46c0      	nop			; (mov r8, r8)
 8013e34:	08021a24 	.word	0x08021a24
 8013e38:	0003d090 	.word	0x0003d090
 8013e3c:	0007a120 	.word	0x0007a120

08013e40 <LimitTxPower>:

static int8_t LimitTxPower( int8_t txPower, int8_t maxBandTxPower, int8_t datarate, uint16_t* channelsMask )
{
 8013e40:	b590      	push	{r4, r7, lr}
 8013e42:	b085      	sub	sp, #20
 8013e44:	af00      	add	r7, sp, #0
 8013e46:	0004      	movs	r4, r0
 8013e48:	0008      	movs	r0, r1
 8013e4a:	0011      	movs	r1, r2
 8013e4c:	603b      	str	r3, [r7, #0]
 8013e4e:	1dfb      	adds	r3, r7, #7
 8013e50:	1c22      	adds	r2, r4, #0
 8013e52:	701a      	strb	r2, [r3, #0]
 8013e54:	1dbb      	adds	r3, r7, #6
 8013e56:	1c02      	adds	r2, r0, #0
 8013e58:	701a      	strb	r2, [r3, #0]
 8013e5a:	1d7b      	adds	r3, r7, #5
 8013e5c:	1c0a      	adds	r2, r1, #0
 8013e5e:	701a      	strb	r2, [r3, #0]
    int8_t txPowerResult = txPower;
 8013e60:	210f      	movs	r1, #15
 8013e62:	187b      	adds	r3, r7, r1
 8013e64:	1dfa      	adds	r2, r7, #7
 8013e66:	7812      	ldrb	r2, [r2, #0]
 8013e68:	701a      	strb	r2, [r3, #0]

    // Limit tx power to the band max
    txPowerResult =  MAX( txPower, maxBandTxPower );
 8013e6a:	187a      	adds	r2, r7, r1
 8013e6c:	1dbb      	adds	r3, r7, #6
 8013e6e:	1df9      	adds	r1, r7, #7
 8013e70:	780c      	ldrb	r4, [r1, #0]
 8013e72:	781b      	ldrb	r3, [r3, #0]
 8013e74:	b258      	sxtb	r0, r3
 8013e76:	b261      	sxtb	r1, r4
 8013e78:	4288      	cmp	r0, r1
 8013e7a:	da00      	bge.n	8013e7e <LimitTxPower+0x3e>
 8013e7c:	1c23      	adds	r3, r4, #0
 8013e7e:	7013      	strb	r3, [r2, #0]

    return txPowerResult;
 8013e80:	230f      	movs	r3, #15
 8013e82:	18fb      	adds	r3, r7, r3
 8013e84:	781b      	ldrb	r3, [r3, #0]
 8013e86:	b25b      	sxtb	r3, r3
}
 8013e88:	0018      	movs	r0, r3
 8013e8a:	46bd      	mov	sp, r7
 8013e8c:	b005      	add	sp, #20
 8013e8e:	bd90      	pop	{r4, r7, pc}

08013e90 <VerifyRfFreq>:

static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 8013e90:	b580      	push	{r7, lr}
 8013e92:	b082      	sub	sp, #8
 8013e94:	af00      	add	r7, sp, #0
 8013e96:	6078      	str	r0, [r7, #4]
 8013e98:	6039      	str	r1, [r7, #0]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 8013e9a:	4b2e      	ldr	r3, [pc, #184]	; (8013f54 <VerifyRfFreq+0xc4>)
 8013e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013e9e:	687a      	ldr	r2, [r7, #4]
 8013ea0:	0010      	movs	r0, r2
 8013ea2:	4798      	blx	r3
 8013ea4:	0003      	movs	r3, r0
 8013ea6:	001a      	movs	r2, r3
 8013ea8:	2301      	movs	r3, #1
 8013eaa:	4053      	eors	r3, r2
 8013eac:	b2db      	uxtb	r3, r3
 8013eae:	2b00      	cmp	r3, #0
 8013eb0:	d001      	beq.n	8013eb6 <VerifyRfFreq+0x26>
    {
        return false;
 8013eb2:	2300      	movs	r3, #0
 8013eb4:	e04a      	b.n	8013f4c <VerifyRfFreq+0xbc>
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 8013eb6:	687b      	ldr	r3, [r7, #4]
 8013eb8:	4a27      	ldr	r2, [pc, #156]	; (8013f58 <VerifyRfFreq+0xc8>)
 8013eba:	4293      	cmp	r3, r2
 8013ebc:	d907      	bls.n	8013ece <VerifyRfFreq+0x3e>
 8013ebe:	687b      	ldr	r3, [r7, #4]
 8013ec0:	4a26      	ldr	r2, [pc, #152]	; (8013f5c <VerifyRfFreq+0xcc>)
 8013ec2:	4293      	cmp	r3, r2
 8013ec4:	d803      	bhi.n	8013ece <VerifyRfFreq+0x3e>
    {
        *band = 2;
 8013ec6:	683b      	ldr	r3, [r7, #0]
 8013ec8:	2202      	movs	r2, #2
 8013eca:	701a      	strb	r2, [r3, #0]
 8013ecc:	e03d      	b.n	8013f4a <VerifyRfFreq+0xba>
    }
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 8013ece:	687b      	ldr	r3, [r7, #4]
 8013ed0:	4a22      	ldr	r2, [pc, #136]	; (8013f5c <VerifyRfFreq+0xcc>)
 8013ed2:	4293      	cmp	r3, r2
 8013ed4:	d907      	bls.n	8013ee6 <VerifyRfFreq+0x56>
 8013ed6:	687b      	ldr	r3, [r7, #4]
 8013ed8:	4a21      	ldr	r2, [pc, #132]	; (8013f60 <VerifyRfFreq+0xd0>)
 8013eda:	4293      	cmp	r3, r2
 8013edc:	d803      	bhi.n	8013ee6 <VerifyRfFreq+0x56>
    {
        *band = 0;
 8013ede:	683b      	ldr	r3, [r7, #0]
 8013ee0:	2200      	movs	r2, #0
 8013ee2:	701a      	strb	r2, [r3, #0]
 8013ee4:	e031      	b.n	8013f4a <VerifyRfFreq+0xba>
    }
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 8013ee6:	687b      	ldr	r3, [r7, #4]
 8013ee8:	4a1d      	ldr	r2, [pc, #116]	; (8013f60 <VerifyRfFreq+0xd0>)
 8013eea:	4293      	cmp	r3, r2
 8013eec:	d907      	bls.n	8013efe <VerifyRfFreq+0x6e>
 8013eee:	687b      	ldr	r3, [r7, #4]
 8013ef0:	4a1c      	ldr	r2, [pc, #112]	; (8013f64 <VerifyRfFreq+0xd4>)
 8013ef2:	4293      	cmp	r3, r2
 8013ef4:	d803      	bhi.n	8013efe <VerifyRfFreq+0x6e>
    {
        *band = 1;
 8013ef6:	683b      	ldr	r3, [r7, #0]
 8013ef8:	2201      	movs	r2, #1
 8013efa:	701a      	strb	r2, [r3, #0]
 8013efc:	e025      	b.n	8013f4a <VerifyRfFreq+0xba>
    }
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 8013efe:	687b      	ldr	r3, [r7, #4]
 8013f00:	4a19      	ldr	r2, [pc, #100]	; (8013f68 <VerifyRfFreq+0xd8>)
 8013f02:	4293      	cmp	r3, r2
 8013f04:	d907      	bls.n	8013f16 <VerifyRfFreq+0x86>
 8013f06:	687b      	ldr	r3, [r7, #4]
 8013f08:	4a18      	ldr	r2, [pc, #96]	; (8013f6c <VerifyRfFreq+0xdc>)
 8013f0a:	4293      	cmp	r3, r2
 8013f0c:	d803      	bhi.n	8013f16 <VerifyRfFreq+0x86>
    {
        *band = 2;
 8013f0e:	683b      	ldr	r3, [r7, #0]
 8013f10:	2202      	movs	r2, #2
 8013f12:	701a      	strb	r2, [r3, #0]
 8013f14:	e019      	b.n	8013f4a <VerifyRfFreq+0xba>
    }
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 8013f16:	687b      	ldr	r3, [r7, #4]
 8013f18:	4a15      	ldr	r2, [pc, #84]	; (8013f70 <VerifyRfFreq+0xe0>)
 8013f1a:	4293      	cmp	r3, r2
 8013f1c:	d907      	bls.n	8013f2e <VerifyRfFreq+0x9e>
 8013f1e:	687b      	ldr	r3, [r7, #4]
 8013f20:	4a14      	ldr	r2, [pc, #80]	; (8013f74 <VerifyRfFreq+0xe4>)
 8013f22:	4293      	cmp	r3, r2
 8013f24:	d803      	bhi.n	8013f2e <VerifyRfFreq+0x9e>
    {
        *band = 3;
 8013f26:	683b      	ldr	r3, [r7, #0]
 8013f28:	2203      	movs	r2, #3
 8013f2a:	701a      	strb	r2, [r3, #0]
 8013f2c:	e00d      	b.n	8013f4a <VerifyRfFreq+0xba>
    }
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 8013f2e:	687b      	ldr	r3, [r7, #4]
 8013f30:	4a11      	ldr	r2, [pc, #68]	; (8013f78 <VerifyRfFreq+0xe8>)
 8013f32:	4293      	cmp	r3, r2
 8013f34:	d907      	bls.n	8013f46 <VerifyRfFreq+0xb6>
 8013f36:	687b      	ldr	r3, [r7, #4]
 8013f38:	4a10      	ldr	r2, [pc, #64]	; (8013f7c <VerifyRfFreq+0xec>)
 8013f3a:	4293      	cmp	r3, r2
 8013f3c:	d803      	bhi.n	8013f46 <VerifyRfFreq+0xb6>
    {
        *band = 4;
 8013f3e:	683b      	ldr	r3, [r7, #0]
 8013f40:	2204      	movs	r2, #4
 8013f42:	701a      	strb	r2, [r3, #0]
 8013f44:	e001      	b.n	8013f4a <VerifyRfFreq+0xba>
    }
    else
    {
        return false;
 8013f46:	2300      	movs	r3, #0
 8013f48:	e000      	b.n	8013f4c <VerifyRfFreq+0xbc>
    }
    return true;
 8013f4a:	2301      	movs	r3, #1
}
 8013f4c:	0018      	movs	r0, r3
 8013f4e:	46bd      	mov	sp, r7
 8013f50:	b002      	add	sp, #8
 8013f52:	bd80      	pop	{r7, pc}
 8013f54:	08021b54 	.word	0x08021b54
 8013f58:	337055bf 	.word	0x337055bf
 8013f5c:	338eda3f 	.word	0x338eda3f
 8013f60:	33bca100 	.word	0x33bca100
 8013f64:	33c5c8c0 	.word	0x33c5c8c0
 8013f68:	33c74f5f 	.word	0x33c74f5f
 8013f6c:	33cef080 	.word	0x33cef080
 8013f70:	33d1fdbf 	.word	0x33d1fdbf
 8013f74:	33d5ce50 	.word	0x33d5ce50
 8013f78:	33d6919f 	.word	0x33d6919f
 8013f7c:	33db2580 	.word	0x33db2580

08013f80 <CountNbOfEnabledChannels>:

static uint8_t CountNbOfEnabledChannels( bool joined, uint8_t datarate, uint16_t* channelsMask, ChannelParams_t* channels, Band_t* bands, uint8_t* enabledChannels, uint8_t* delayTx )
{
 8013f80:	b5b0      	push	{r4, r5, r7, lr}
 8013f82:	b086      	sub	sp, #24
 8013f84:	af00      	add	r7, sp, #0
 8013f86:	60ba      	str	r2, [r7, #8]
 8013f88:	607b      	str	r3, [r7, #4]
 8013f8a:	230f      	movs	r3, #15
 8013f8c:	18fb      	adds	r3, r7, r3
 8013f8e:	1c02      	adds	r2, r0, #0
 8013f90:	701a      	strb	r2, [r3, #0]
 8013f92:	230e      	movs	r3, #14
 8013f94:	18fb      	adds	r3, r7, r3
 8013f96:	1c0a      	adds	r2, r1, #0
 8013f98:	701a      	strb	r2, [r3, #0]
    uint8_t nbEnabledChannels = 0;
 8013f9a:	2317      	movs	r3, #23
 8013f9c:	18fb      	adds	r3, r7, r3
 8013f9e:	2200      	movs	r2, #0
 8013fa0:	701a      	strb	r2, [r3, #0]
    uint8_t delayTransmission = 0;
 8013fa2:	2316      	movs	r3, #22
 8013fa4:	18fb      	adds	r3, r7, r3
 8013fa6:	2200      	movs	r2, #0
 8013fa8:	701a      	strb	r2, [r3, #0]

    for( uint8_t i = 0, k = 0; i < EU868_MAX_NB_CHANNELS; i += 16, k++ )
 8013faa:	2315      	movs	r3, #21
 8013fac:	18fb      	adds	r3, r7, r3
 8013fae:	2200      	movs	r2, #0
 8013fb0:	701a      	strb	r2, [r3, #0]
 8013fb2:	2314      	movs	r3, #20
 8013fb4:	18fb      	adds	r3, r7, r3
 8013fb6:	2200      	movs	r2, #0
 8013fb8:	701a      	strb	r2, [r3, #0]
 8013fba:	e0b4      	b.n	8014126 <CountNbOfEnabledChannels+0x1a6>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8013fbc:	2313      	movs	r3, #19
 8013fbe:	18fb      	adds	r3, r7, r3
 8013fc0:	2200      	movs	r2, #0
 8013fc2:	701a      	strb	r2, [r3, #0]
 8013fc4:	e09d      	b.n	8014102 <CountNbOfEnabledChannels+0x182>
        {
            if( ( channelsMask[k] & ( 1 << j ) ) != 0 )
 8013fc6:	2314      	movs	r3, #20
 8013fc8:	18fb      	adds	r3, r7, r3
 8013fca:	781b      	ldrb	r3, [r3, #0]
 8013fcc:	005b      	lsls	r3, r3, #1
 8013fce:	68ba      	ldr	r2, [r7, #8]
 8013fd0:	18d3      	adds	r3, r2, r3
 8013fd2:	881b      	ldrh	r3, [r3, #0]
 8013fd4:	001a      	movs	r2, r3
 8013fd6:	2313      	movs	r3, #19
 8013fd8:	18fb      	adds	r3, r7, r3
 8013fda:	781b      	ldrb	r3, [r3, #0]
 8013fdc:	411a      	asrs	r2, r3
 8013fde:	0013      	movs	r3, r2
 8013fe0:	2201      	movs	r2, #1
 8013fe2:	4013      	ands	r3, r2
 8013fe4:	d100      	bne.n	8013fe8 <CountNbOfEnabledChannels+0x68>
 8013fe6:	e086      	b.n	80140f6 <CountNbOfEnabledChannels+0x176>
            {
                if( channels[i + j].Frequency == 0 )
 8013fe8:	2315      	movs	r3, #21
 8013fea:	18fb      	adds	r3, r7, r3
 8013fec:	781a      	ldrb	r2, [r3, #0]
 8013fee:	2313      	movs	r3, #19
 8013ff0:	18fb      	adds	r3, r7, r3
 8013ff2:	781b      	ldrb	r3, [r3, #0]
 8013ff4:	18d3      	adds	r3, r2, r3
 8013ff6:	001a      	movs	r2, r3
 8013ff8:	0013      	movs	r3, r2
 8013ffa:	005b      	lsls	r3, r3, #1
 8013ffc:	189b      	adds	r3, r3, r2
 8013ffe:	009b      	lsls	r3, r3, #2
 8014000:	001a      	movs	r2, r3
 8014002:	687b      	ldr	r3, [r7, #4]
 8014004:	189b      	adds	r3, r3, r2
 8014006:	681b      	ldr	r3, [r3, #0]
 8014008:	2b00      	cmp	r3, #0
 801400a:	d06f      	beq.n	80140ec <CountNbOfEnabledChannels+0x16c>
                { // Check if the channel is enabled
                    continue;
                }
                if( joined == false )
 801400c:	230f      	movs	r3, #15
 801400e:	18fb      	adds	r3, r7, r3
 8014010:	781b      	ldrb	r3, [r3, #0]
 8014012:	2201      	movs	r2, #1
 8014014:	4053      	eors	r3, r2
 8014016:	b2db      	uxtb	r3, r3
 8014018:	2b00      	cmp	r3, #0
 801401a:	d008      	beq.n	801402e <CountNbOfEnabledChannels+0xae>
                {
                    if( ( EU868_JOIN_CHANNELS & ( 1 << j ) ) == 0 )
 801401c:	2313      	movs	r3, #19
 801401e:	18fb      	adds	r3, r7, r3
 8014020:	781b      	ldrb	r3, [r3, #0]
 8014022:	2207      	movs	r2, #7
 8014024:	411a      	asrs	r2, r3
 8014026:	0013      	movs	r3, r2
 8014028:	2201      	movs	r2, #1
 801402a:	4013      	ands	r3, r2
 801402c:	d060      	beq.n	80140f0 <CountNbOfEnabledChannels+0x170>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( datarate, channels[i + j].DrRange.Fields.Min,
 801402e:	230e      	movs	r3, #14
 8014030:	18fb      	adds	r3, r7, r3
 8014032:	2000      	movs	r0, #0
 8014034:	5618      	ldrsb	r0, [r3, r0]
 8014036:	2415      	movs	r4, #21
 8014038:	193b      	adds	r3, r7, r4
 801403a:	781a      	ldrb	r2, [r3, #0]
 801403c:	2513      	movs	r5, #19
 801403e:	197b      	adds	r3, r7, r5
 8014040:	781b      	ldrb	r3, [r3, #0]
 8014042:	18d3      	adds	r3, r2, r3
 8014044:	001a      	movs	r2, r3
 8014046:	0013      	movs	r3, r2
 8014048:	005b      	lsls	r3, r3, #1
 801404a:	189b      	adds	r3, r3, r2
 801404c:	009b      	lsls	r3, r3, #2
 801404e:	001a      	movs	r2, r3
 8014050:	687b      	ldr	r3, [r7, #4]
 8014052:	189b      	adds	r3, r3, r2
 8014054:	7a1b      	ldrb	r3, [r3, #8]
 8014056:	011b      	lsls	r3, r3, #4
 8014058:	b25b      	sxtb	r3, r3
 801405a:	111b      	asrs	r3, r3, #4
 801405c:	b25b      	sxtb	r3, r3
 801405e:	0019      	movs	r1, r3
                                              channels[i + j].DrRange.Fields.Max ) == false )
 8014060:	193b      	adds	r3, r7, r4
 8014062:	781a      	ldrb	r2, [r3, #0]
 8014064:	197b      	adds	r3, r7, r5
 8014066:	781b      	ldrb	r3, [r3, #0]
 8014068:	18d3      	adds	r3, r2, r3
 801406a:	001a      	movs	r2, r3
 801406c:	0013      	movs	r3, r2
 801406e:	005b      	lsls	r3, r3, #1
 8014070:	189b      	adds	r3, r3, r2
 8014072:	009b      	lsls	r3, r3, #2
 8014074:	001a      	movs	r2, r3
 8014076:	687b      	ldr	r3, [r7, #4]
 8014078:	189b      	adds	r3, r3, r2
 801407a:	7a1b      	ldrb	r3, [r3, #8]
 801407c:	b25b      	sxtb	r3, r3
 801407e:	111b      	asrs	r3, r3, #4
 8014080:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( datarate, channels[i + j].DrRange.Fields.Min,
 8014082:	001a      	movs	r2, r3
 8014084:	f7ff fa20 	bl	80134c8 <RegionCommonValueInRange>
 8014088:	1e03      	subs	r3, r0, #0
 801408a:	d033      	beq.n	80140f4 <CountNbOfEnabledChannels+0x174>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( bands[channels[i + j].Band].TimeOff > 0 )
 801408c:	2315      	movs	r3, #21
 801408e:	18fb      	adds	r3, r7, r3
 8014090:	781a      	ldrb	r2, [r3, #0]
 8014092:	2313      	movs	r3, #19
 8014094:	18fb      	adds	r3, r7, r3
 8014096:	781b      	ldrb	r3, [r3, #0]
 8014098:	18d3      	adds	r3, r2, r3
 801409a:	001a      	movs	r2, r3
 801409c:	0013      	movs	r3, r2
 801409e:	005b      	lsls	r3, r3, #1
 80140a0:	189b      	adds	r3, r3, r2
 80140a2:	009b      	lsls	r3, r3, #2
 80140a4:	001a      	movs	r2, r3
 80140a6:	687b      	ldr	r3, [r7, #4]
 80140a8:	189b      	adds	r3, r3, r2
 80140aa:	7a5b      	ldrb	r3, [r3, #9]
 80140ac:	011b      	lsls	r3, r3, #4
 80140ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80140b0:	18d3      	adds	r3, r2, r3
 80140b2:	68db      	ldr	r3, [r3, #12]
 80140b4:	2b00      	cmp	r3, #0
 80140b6:	d006      	beq.n	80140c6 <CountNbOfEnabledChannels+0x146>
                { // Check if the band is available for transmission
                    delayTransmission++;
 80140b8:	2116      	movs	r1, #22
 80140ba:	187b      	adds	r3, r7, r1
 80140bc:	781a      	ldrb	r2, [r3, #0]
 80140be:	187b      	adds	r3, r7, r1
 80140c0:	3201      	adds	r2, #1
 80140c2:	701a      	strb	r2, [r3, #0]
                    continue;
 80140c4:	e017      	b.n	80140f6 <CountNbOfEnabledChannels+0x176>
                }
                enabledChannels[nbEnabledChannels++] = i + j;
 80140c6:	2217      	movs	r2, #23
 80140c8:	18bb      	adds	r3, r7, r2
 80140ca:	781b      	ldrb	r3, [r3, #0]
 80140cc:	18ba      	adds	r2, r7, r2
 80140ce:	1c59      	adds	r1, r3, #1
 80140d0:	7011      	strb	r1, [r2, #0]
 80140d2:	001a      	movs	r2, r3
 80140d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140d6:	189b      	adds	r3, r3, r2
 80140d8:	2215      	movs	r2, #21
 80140da:	18b9      	adds	r1, r7, r2
 80140dc:	2213      	movs	r2, #19
 80140de:	18ba      	adds	r2, r7, r2
 80140e0:	7809      	ldrb	r1, [r1, #0]
 80140e2:	7812      	ldrb	r2, [r2, #0]
 80140e4:	188a      	adds	r2, r1, r2
 80140e6:	b2d2      	uxtb	r2, r2
 80140e8:	701a      	strb	r2, [r3, #0]
 80140ea:	e004      	b.n	80140f6 <CountNbOfEnabledChannels+0x176>
                    continue;
 80140ec:	46c0      	nop			; (mov r8, r8)
 80140ee:	e002      	b.n	80140f6 <CountNbOfEnabledChannels+0x176>
                        continue;
 80140f0:	46c0      	nop			; (mov r8, r8)
 80140f2:	e000      	b.n	80140f6 <CountNbOfEnabledChannels+0x176>
                    continue;
 80140f4:	46c0      	nop			; (mov r8, r8)
        for( uint8_t j = 0; j < 16; j++ )
 80140f6:	2113      	movs	r1, #19
 80140f8:	187b      	adds	r3, r7, r1
 80140fa:	781a      	ldrb	r2, [r3, #0]
 80140fc:	187b      	adds	r3, r7, r1
 80140fe:	3201      	adds	r2, #1
 8014100:	701a      	strb	r2, [r3, #0]
 8014102:	2313      	movs	r3, #19
 8014104:	18fb      	adds	r3, r7, r3
 8014106:	781b      	ldrb	r3, [r3, #0]
 8014108:	2b0f      	cmp	r3, #15
 801410a:	d800      	bhi.n	801410e <CountNbOfEnabledChannels+0x18e>
 801410c:	e75b      	b.n	8013fc6 <CountNbOfEnabledChannels+0x46>
    for( uint8_t i = 0, k = 0; i < EU868_MAX_NB_CHANNELS; i += 16, k++ )
 801410e:	2215      	movs	r2, #21
 8014110:	18bb      	adds	r3, r7, r2
 8014112:	18ba      	adds	r2, r7, r2
 8014114:	7812      	ldrb	r2, [r2, #0]
 8014116:	3210      	adds	r2, #16
 8014118:	701a      	strb	r2, [r3, #0]
 801411a:	2114      	movs	r1, #20
 801411c:	187b      	adds	r3, r7, r1
 801411e:	781a      	ldrb	r2, [r3, #0]
 8014120:	187b      	adds	r3, r7, r1
 8014122:	3201      	adds	r2, #1
 8014124:	701a      	strb	r2, [r3, #0]
 8014126:	2315      	movs	r3, #21
 8014128:	18fb      	adds	r3, r7, r3
 801412a:	781b      	ldrb	r3, [r3, #0]
 801412c:	2b0f      	cmp	r3, #15
 801412e:	d800      	bhi.n	8014132 <CountNbOfEnabledChannels+0x1b2>
 8014130:	e744      	b.n	8013fbc <CountNbOfEnabledChannels+0x3c>
            }
        }
    }

    *delayTx = delayTransmission;
 8014132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014134:	2216      	movs	r2, #22
 8014136:	18ba      	adds	r2, r7, r2
 8014138:	7812      	ldrb	r2, [r2, #0]
 801413a:	701a      	strb	r2, [r3, #0]
    return nbEnabledChannels;
 801413c:	2317      	movs	r3, #23
 801413e:	18fb      	adds	r3, r7, r3
 8014140:	781b      	ldrb	r3, [r3, #0]
}
 8014142:	0018      	movs	r0, r3
 8014144:	46bd      	mov	sp, r7
 8014146:	b006      	add	sp, #24
 8014148:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801414c <RegionEU868GetPhyParam>:

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 801414c:	b580      	push	{r7, lr}
 801414e:	b084      	sub	sp, #16
 8014150:	af00      	add	r7, sp, #0
 8014152:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 8014154:	2308      	movs	r3, #8
 8014156:	18fb      	adds	r3, r7, r3
 8014158:	2200      	movs	r2, #0
 801415a:	601a      	str	r2, [r3, #0]

    switch( getPhy->Attribute )
 801415c:	687b      	ldr	r3, [r7, #4]
 801415e:	781b      	ldrb	r3, [r3, #0]
 8014160:	2b34      	cmp	r3, #52	; 0x34
 8014162:	d900      	bls.n	8014166 <RegionEU868GetPhyParam+0x1a>
 8014164:	e0ce      	b.n	8014304 <RegionEU868GetPhyParam+0x1b8>
 8014166:	009a      	lsls	r2, r3, #2
 8014168:	4b6e      	ldr	r3, [pc, #440]	; (8014324 <RegionEU868GetPhyParam+0x1d8>)
 801416a:	18d3      	adds	r3, r2, r3
 801416c:	681b      	ldr	r3, [r3, #0]
 801416e:	469f      	mov	pc, r3
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = EU868_RX_MIN_DATARATE;
 8014170:	2308      	movs	r3, #8
 8014172:	18fb      	adds	r3, r7, r3
 8014174:	2200      	movs	r2, #0
 8014176:	601a      	str	r2, [r3, #0]
            break;
 8014178:	e0c5      	b.n	8014306 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = EU868_TX_MIN_DATARATE;
 801417a:	2308      	movs	r3, #8
 801417c:	18fb      	adds	r3, r7, r3
 801417e:	2200      	movs	r2, #0
 8014180:	601a      	str	r2, [r3, #0]
            break;
 8014182:	e0c0      	b.n	8014306 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = EU868_DEFAULT_DATARATE;
 8014184:	2308      	movs	r3, #8
 8014186:	18fb      	adds	r3, r7, r3
 8014188:	2200      	movs	r2, #0
 801418a:	601a      	str	r2, [r3, #0]
            break;
 801418c:	e0bb      	b.n	8014306 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            phyParam.Value = GetNextLowerTxDr( getPhy->Datarate, EU868_TX_MIN_DATARATE );
 801418e:	687b      	ldr	r3, [r7, #4]
 8014190:	785b      	ldrb	r3, [r3, #1]
 8014192:	b25b      	sxtb	r3, r3
 8014194:	2100      	movs	r1, #0
 8014196:	0018      	movs	r0, r3
 8014198:	f7ff fe0b 	bl	8013db2 <GetNextLowerTxDr>
 801419c:	0003      	movs	r3, r0
 801419e:	001a      	movs	r2, r3
 80141a0:	2308      	movs	r3, #8
 80141a2:	18fb      	adds	r3, r7, r3
 80141a4:	601a      	str	r2, [r3, #0]
            break;
 80141a6:	e0ae      	b.n	8014306 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = EU868_MAX_TX_POWER;
 80141a8:	2308      	movs	r3, #8
 80141aa:	18fb      	adds	r3, r7, r3
 80141ac:	2200      	movs	r2, #0
 80141ae:	601a      	str	r2, [r3, #0]
            break;
 80141b0:	e0a9      	b.n	8014306 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = EU868_DEFAULT_TX_POWER;
 80141b2:	2308      	movs	r3, #8
 80141b4:	18fb      	adds	r3, r7, r3
 80141b6:	2200      	movs	r2, #0
 80141b8:	601a      	str	r2, [r3, #0]
            break;
 80141ba:	e0a4      	b.n	8014306 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = EU868_ADR_ACK_LIMIT;
 80141bc:	2308      	movs	r3, #8
 80141be:	18fb      	adds	r3, r7, r3
 80141c0:	2240      	movs	r2, #64	; 0x40
 80141c2:	601a      	str	r2, [r3, #0]
            break;
 80141c4:	e09f      	b.n	8014306 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = EU868_ADR_ACK_DELAY;
 80141c6:	2308      	movs	r3, #8
 80141c8:	18fb      	adds	r3, r7, r3
 80141ca:	2220      	movs	r2, #32
 80141cc:	601a      	str	r2, [r3, #0]
            break;
 80141ce:	e09a      	b.n	8014306 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 80141d0:	687b      	ldr	r3, [r7, #4]
 80141d2:	785b      	ldrb	r3, [r3, #1]
 80141d4:	b25b      	sxtb	r3, r3
 80141d6:	001a      	movs	r2, r3
 80141d8:	4b53      	ldr	r3, [pc, #332]	; (8014328 <RegionEU868GetPhyParam+0x1dc>)
 80141da:	5c9b      	ldrb	r3, [r3, r2]
 80141dc:	001a      	movs	r2, r3
 80141de:	2308      	movs	r3, #8
 80141e0:	18fb      	adds	r3, r7, r3
 80141e2:	601a      	str	r2, [r3, #0]
            break;
 80141e4:	e08f      	b.n	8014306 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 80141e6:	687b      	ldr	r3, [r7, #4]
 80141e8:	785b      	ldrb	r3, [r3, #1]
 80141ea:	b25b      	sxtb	r3, r3
 80141ec:	001a      	movs	r2, r3
 80141ee:	4b4f      	ldr	r3, [pc, #316]	; (801432c <RegionEU868GetPhyParam+0x1e0>)
 80141f0:	5c9b      	ldrb	r3, [r3, r2]
 80141f2:	001a      	movs	r2, r3
 80141f4:	2308      	movs	r3, #8
 80141f6:	18fb      	adds	r3, r7, r3
 80141f8:	601a      	str	r2, [r3, #0]
            break;
 80141fa:	e084      	b.n	8014306 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 80141fc:	2308      	movs	r3, #8
 80141fe:	18fb      	adds	r3, r7, r3
 8014200:	2201      	movs	r2, #1
 8014202:	601a      	str	r2, [r3, #0]
            break;
 8014204:	e07f      	b.n	8014306 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = EU868_MAX_RX_WINDOW;
 8014206:	2308      	movs	r3, #8
 8014208:	18fb      	adds	r3, r7, r3
 801420a:	4a49      	ldr	r2, [pc, #292]	; (8014330 <RegionEU868GetPhyParam+0x1e4>)
 801420c:	601a      	str	r2, [r3, #0]
            break;
 801420e:	e07a      	b.n	8014306 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = EU868_RECEIVE_DELAY1;
 8014210:	2308      	movs	r3, #8
 8014212:	18fb      	adds	r3, r7, r3
 8014214:	22fa      	movs	r2, #250	; 0xfa
 8014216:	0092      	lsls	r2, r2, #2
 8014218:	601a      	str	r2, [r3, #0]
            break;
 801421a:	e074      	b.n	8014306 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = EU868_RECEIVE_DELAY2;
 801421c:	2308      	movs	r3, #8
 801421e:	18fb      	adds	r3, r7, r3
 8014220:	22fa      	movs	r2, #250	; 0xfa
 8014222:	00d2      	lsls	r2, r2, #3
 8014224:	601a      	str	r2, [r3, #0]
            break;
 8014226:	e06e      	b.n	8014306 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = EU868_JOIN_ACCEPT_DELAY1;
 8014228:	2308      	movs	r3, #8
 801422a:	18fb      	adds	r3, r7, r3
 801422c:	4a41      	ldr	r2, [pc, #260]	; (8014334 <RegionEU868GetPhyParam+0x1e8>)
 801422e:	601a      	str	r2, [r3, #0]
            break;
 8014230:	e069      	b.n	8014306 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = EU868_JOIN_ACCEPT_DELAY2;
 8014232:	2308      	movs	r3, #8
 8014234:	18fb      	adds	r3, r7, r3
 8014236:	4a40      	ldr	r2, [pc, #256]	; (8014338 <RegionEU868GetPhyParam+0x1ec>)
 8014238:	601a      	str	r2, [r3, #0]
            break;
 801423a:	e064      	b.n	8014306 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_MAX_FCNT_GAP:
        {
            phyParam.Value = EU868_MAX_FCNT_GAP;
 801423c:	2308      	movs	r3, #8
 801423e:	18fb      	adds	r3, r7, r3
 8014240:	2280      	movs	r2, #128	; 0x80
 8014242:	01d2      	lsls	r2, r2, #7
 8014244:	601a      	str	r2, [r3, #0]
            break;
 8014246:	e05e      	b.n	8014306 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_ACK_TIMEOUT:
        {
            phyParam.Value = ( EU868_ACKTIMEOUT + randr( -EU868_ACK_TIMEOUT_RND, EU868_ACK_TIMEOUT_RND ) );
 8014248:	23fa      	movs	r3, #250	; 0xfa
 801424a:	009b      	lsls	r3, r3, #2
 801424c:	4a3b      	ldr	r2, [pc, #236]	; (801433c <RegionEU868GetPhyParam+0x1f0>)
 801424e:	0019      	movs	r1, r3
 8014250:	0010      	movs	r0, r2
 8014252:	f001 fbb7 	bl	80159c4 <randr>
 8014256:	0003      	movs	r3, r0
 8014258:	22fa      	movs	r2, #250	; 0xfa
 801425a:	00d2      	lsls	r2, r2, #3
 801425c:	4694      	mov	ip, r2
 801425e:	4463      	add	r3, ip
 8014260:	001a      	movs	r2, r3
 8014262:	2308      	movs	r3, #8
 8014264:	18fb      	adds	r3, r7, r3
 8014266:	601a      	str	r2, [r3, #0]
            break;
 8014268:	e04d      	b.n	8014306 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = EU868_DEFAULT_RX1_DR_OFFSET;
 801426a:	2308      	movs	r3, #8
 801426c:	18fb      	adds	r3, r7, r3
 801426e:	2200      	movs	r2, #0
 8014270:	601a      	str	r2, [r3, #0]
            break;
 8014272:	e048      	b.n	8014306 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = EU868_RX_WND_2_FREQ;
 8014274:	2308      	movs	r3, #8
 8014276:	18fb      	adds	r3, r7, r3
 8014278:	4a31      	ldr	r2, [pc, #196]	; (8014340 <RegionEU868GetPhyParam+0x1f4>)
 801427a:	601a      	str	r2, [r3, #0]
            break;
 801427c:	e043      	b.n	8014306 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = EU868_RX_WND_2_DR;
 801427e:	2308      	movs	r3, #8
 8014280:	18fb      	adds	r3, r7, r3
 8014282:	2200      	movs	r2, #0
 8014284:	601a      	str	r2, [r3, #0]
            break;
 8014286:	e03e      	b.n	8014306 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = NvmCtx.ChannelsMask;
 8014288:	2308      	movs	r3, #8
 801428a:	18fb      	adds	r3, r7, r3
 801428c:	4a2d      	ldr	r2, [pc, #180]	; (8014344 <RegionEU868GetPhyParam+0x1f8>)
 801428e:	601a      	str	r2, [r3, #0]
            break;
 8014290:	e039      	b.n	8014306 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = NvmCtx.ChannelsDefaultMask;
 8014292:	2308      	movs	r3, #8
 8014294:	18fb      	adds	r3, r7, r3
 8014296:	4a2c      	ldr	r2, [pc, #176]	; (8014348 <RegionEU868GetPhyParam+0x1fc>)
 8014298:	601a      	str	r2, [r3, #0]
            break;
 801429a:	e034      	b.n	8014306 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 801429c:	2308      	movs	r3, #8
 801429e:	18fb      	adds	r3, r7, r3
 80142a0:	2210      	movs	r2, #16
 80142a2:	601a      	str	r2, [r3, #0]
            break;
 80142a4:	e02f      	b.n	8014306 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = NvmCtx.Channels;
 80142a6:	2308      	movs	r3, #8
 80142a8:	18fb      	adds	r3, r7, r3
 80142aa:	4a28      	ldr	r2, [pc, #160]	; (801434c <RegionEU868GetPhyParam+0x200>)
 80142ac:	601a      	str	r2, [r3, #0]
            break;
 80142ae:	e02a      	b.n	8014306 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = 0;
 80142b0:	2308      	movs	r3, #8
 80142b2:	18fb      	adds	r3, r7, r3
 80142b4:	2200      	movs	r2, #0
 80142b6:	601a      	str	r2, [r3, #0]
            break;
 80142b8:	e025      	b.n	8014306 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 80142ba:	2308      	movs	r3, #8
 80142bc:	18fb      	adds	r3, r7, r3
 80142be:	2283      	movs	r2, #131	; 0x83
 80142c0:	05d2      	lsls	r2, r2, #23
 80142c2:	601a      	str	r2, [r3, #0]
            break;
 80142c4:	e01f      	b.n	8014306 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 80142c6:	2308      	movs	r3, #8
 80142c8:	18fb      	adds	r3, r7, r3
 80142ca:	4a21      	ldr	r2, [pc, #132]	; (8014350 <RegionEU868GetPhyParam+0x204>)
 80142cc:	601a      	str	r2, [r3, #0]
            break;
 80142ce:	e01a      	b.n	8014306 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 80142d0:	2308      	movs	r3, #8
 80142d2:	18fb      	adds	r3, r7, r3
 80142d4:	4a1a      	ldr	r2, [pc, #104]	; (8014340 <RegionEU868GetPhyParam+0x1f4>)
 80142d6:	601a      	str	r2, [r3, #0]
            break;
 80142d8:	e015      	b.n	8014306 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 80142da:	2108      	movs	r1, #8
 80142dc:	187b      	adds	r3, r7, r1
 80142de:	2211      	movs	r2, #17
 80142e0:	701a      	strb	r2, [r3, #0]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 80142e2:	187b      	adds	r3, r7, r1
 80142e4:	2202      	movs	r2, #2
 80142e6:	705a      	strb	r2, [r3, #1]
            phyParam.BeaconFormat.Rfu2Size = EU868_RFU2_SIZE;
 80142e8:	187b      	adds	r3, r7, r1
 80142ea:	2200      	movs	r2, #0
 80142ec:	709a      	strb	r2, [r3, #2]
            break;
 80142ee:	e00a      	b.n	8014306 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 80142f0:	2308      	movs	r3, #8
 80142f2:	18fb      	adds	r3, r7, r3
 80142f4:	2203      	movs	r2, #3
 80142f6:	601a      	str	r2, [r3, #0]
            break;
 80142f8:	e005      	b.n	8014306 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 80142fa:	2308      	movs	r3, #8
 80142fc:	18fb      	adds	r3, r7, r3
 80142fe:	2203      	movs	r2, #3
 8014300:	601a      	str	r2, [r3, #0]
            break;
 8014302:	e000      	b.n	8014306 <RegionEU868GetPhyParam+0x1ba>
        }
        default:
        {
            break;
 8014304:	46c0      	nop			; (mov r8, r8)
        }
    }

    return phyParam;
 8014306:	210c      	movs	r1, #12
 8014308:	187b      	adds	r3, r7, r1
 801430a:	2208      	movs	r2, #8
 801430c:	18ba      	adds	r2, r7, r2
 801430e:	6812      	ldr	r2, [r2, #0]
 8014310:	601a      	str	r2, [r3, #0]
 8014312:	187b      	adds	r3, r7, r1
 8014314:	2200      	movs	r2, #0
 8014316:	681a      	ldr	r2, [r3, #0]
 8014318:	0013      	movs	r3, r2
}
 801431a:	0018      	movs	r0, r3
 801431c:	46bd      	mov	sp, r7
 801431e:	b004      	add	sp, #16
 8014320:	bd80      	pop	{r7, pc}
 8014322:	46c0      	nop			; (mov r8, r8)
 8014324:	08021a54 	.word	0x08021a54
 8014328:	08021a44 	.word	0x08021a44
 801432c:	08021a4c 	.word	0x08021a4c
 8014330:	00000bb8 	.word	0x00000bb8
 8014334:	00001388 	.word	0x00001388
 8014338:	00001770 	.word	0x00001770
 801433c:	fffffc18 	.word	0xfffffc18
 8014340:	33d3e608 	.word	0x33d3e608
 8014344:	2000104c 	.word	0x2000104c
 8014348:	2000104e 	.word	0x2000104e
 801434c:	20000f3c 	.word	0x20000f3c
 8014350:	4009999a 	.word	0x4009999a

08014354 <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8014354:	b580      	push	{r7, lr}
 8014356:	b082      	sub	sp, #8
 8014358:	af00      	add	r7, sp, #0
 801435a:	6078      	str	r0, [r7, #4]
    RegionCommonSetBandTxDone( txDone->Joined, &NvmCtx.Bands[NvmCtx.Channels[txDone->Channel].Band], txDone->LastTxDoneTime );
 801435c:	687b      	ldr	r3, [r7, #4]
 801435e:	7858      	ldrb	r0, [r3, #1]
 8014360:	687b      	ldr	r3, [r7, #4]
 8014362:	781b      	ldrb	r3, [r3, #0]
 8014364:	0019      	movs	r1, r3
 8014366:	4a0a      	ldr	r2, [pc, #40]	; (8014390 <RegionEU868SetBandTxDone+0x3c>)
 8014368:	000b      	movs	r3, r1
 801436a:	005b      	lsls	r3, r3, #1
 801436c:	185b      	adds	r3, r3, r1
 801436e:	009b      	lsls	r3, r3, #2
 8014370:	18d3      	adds	r3, r2, r3
 8014372:	3309      	adds	r3, #9
 8014374:	781b      	ldrb	r3, [r3, #0]
 8014376:	330c      	adds	r3, #12
 8014378:	011a      	lsls	r2, r3, #4
 801437a:	4b05      	ldr	r3, [pc, #20]	; (8014390 <RegionEU868SetBandTxDone+0x3c>)
 801437c:	18d1      	adds	r1, r2, r3
 801437e:	687b      	ldr	r3, [r7, #4]
 8014380:	685b      	ldr	r3, [r3, #4]
 8014382:	001a      	movs	r2, r3
 8014384:	f7ff f978 	bl	8013678 <RegionCommonSetBandTxDone>
}
 8014388:	46c0      	nop			; (mov r8, r8)
 801438a:	46bd      	mov	sp, r7
 801438c:	b002      	add	sp, #8
 801438e:	bd80      	pop	{r7, pc}
 8014390:	20000f3c 	.word	0x20000f3c

08014394 <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 8014394:	b590      	push	{r4, r7, lr}
 8014396:	b097      	sub	sp, #92	; 0x5c
 8014398:	af00      	add	r7, sp, #0
 801439a:	6078      	str	r0, [r7, #4]
    Band_t bands[EU868_MAX_NB_BANDS] =
 801439c:	2108      	movs	r1, #8
 801439e:	000c      	movs	r4, r1
 80143a0:	187b      	adds	r3, r7, r1
 80143a2:	0018      	movs	r0, r3
 80143a4:	2350      	movs	r3, #80	; 0x50
 80143a6:	001a      	movs	r2, r3
 80143a8:	2100      	movs	r1, #0
 80143aa:	f00a fec9 	bl	801f140 <memset>
 80143ae:	0021      	movs	r1, r4
 80143b0:	187b      	adds	r3, r7, r1
 80143b2:	2264      	movs	r2, #100	; 0x64
 80143b4:	801a      	strh	r2, [r3, #0]
 80143b6:	187b      	adds	r3, r7, r1
 80143b8:	2264      	movs	r2, #100	; 0x64
 80143ba:	821a      	strh	r2, [r3, #16]
 80143bc:	187b      	adds	r3, r7, r1
 80143be:	22fa      	movs	r2, #250	; 0xfa
 80143c0:	0092      	lsls	r2, r2, #2
 80143c2:	841a      	strh	r2, [r3, #32]
 80143c4:	187b      	adds	r3, r7, r1
 80143c6:	220a      	movs	r2, #10
 80143c8:	861a      	strh	r2, [r3, #48]	; 0x30
 80143ca:	187b      	adds	r3, r7, r1
 80143cc:	2240      	movs	r2, #64	; 0x40
 80143ce:	2164      	movs	r1, #100	; 0x64
 80143d0:	5299      	strh	r1, [r3, r2]
        EU868_BAND2,
        EU868_BAND3,
        EU868_BAND4,
    };

    switch( params->Type )
 80143d2:	687b      	ldr	r3, [r7, #4]
 80143d4:	791b      	ldrb	r3, [r3, #4]
 80143d6:	2b01      	cmp	r3, #1
 80143d8:	d032      	beq.n	8014440 <RegionEU868InitDefaults+0xac>
 80143da:	2b02      	cmp	r3, #2
 80143dc:	d023      	beq.n	8014426 <RegionEU868InitDefaults+0x92>
 80143de:	2b00      	cmp	r3, #0
 80143e0:	d000      	beq.n	80143e4 <RegionEU868InitDefaults+0x50>
            NvmCtx.ChannelsMask[0] |= NvmCtx.ChannelsDefaultMask[0];
            break;
        }
        default:
        {
            break;
 80143e2:	e03d      	b.n	8014460 <RegionEU868InitDefaults+0xcc>
            memcpy1( ( uint8_t* )NvmCtx.Bands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 80143e4:	2308      	movs	r3, #8
 80143e6:	18f9      	adds	r1, r7, r3
 80143e8:	4b1f      	ldr	r3, [pc, #124]	; (8014468 <RegionEU868InitDefaults+0xd4>)
 80143ea:	2250      	movs	r2, #80	; 0x50
 80143ec:	0018      	movs	r0, r3
 80143ee:	f001 faff 	bl	80159f0 <memcpy1>
            NvmCtx.Channels[0] = ( ChannelParams_t ) EU868_LC1;
 80143f2:	4b1e      	ldr	r3, [pc, #120]	; (801446c <RegionEU868InitDefaults+0xd8>)
 80143f4:	4a1e      	ldr	r2, [pc, #120]	; (8014470 <RegionEU868InitDefaults+0xdc>)
 80143f6:	ca13      	ldmia	r2!, {r0, r1, r4}
 80143f8:	c313      	stmia	r3!, {r0, r1, r4}
            NvmCtx.Channels[1] = ( ChannelParams_t ) EU868_LC2;
 80143fa:	4b1c      	ldr	r3, [pc, #112]	; (801446c <RegionEU868InitDefaults+0xd8>)
 80143fc:	4a1d      	ldr	r2, [pc, #116]	; (8014474 <RegionEU868InitDefaults+0xe0>)
 80143fe:	330c      	adds	r3, #12
 8014400:	ca13      	ldmia	r2!, {r0, r1, r4}
 8014402:	c313      	stmia	r3!, {r0, r1, r4}
            NvmCtx.Channels[2] = ( ChannelParams_t ) EU868_LC3;
 8014404:	4b19      	ldr	r3, [pc, #100]	; (801446c <RegionEU868InitDefaults+0xd8>)
 8014406:	4a1c      	ldr	r2, [pc, #112]	; (8014478 <RegionEU868InitDefaults+0xe4>)
 8014408:	3318      	adds	r3, #24
 801440a:	ca13      	ldmia	r2!, {r0, r1, r4}
 801440c:	c313      	stmia	r3!, {r0, r1, r4}
            NvmCtx.ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 801440e:	4a17      	ldr	r2, [pc, #92]	; (801446c <RegionEU868InitDefaults+0xd8>)
 8014410:	2389      	movs	r3, #137	; 0x89
 8014412:	005b      	lsls	r3, r3, #1
 8014414:	2107      	movs	r1, #7
 8014416:	52d1      	strh	r1, [r2, r3]
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, NvmCtx.ChannelsDefaultMask, 1 );
 8014418:	4918      	ldr	r1, [pc, #96]	; (801447c <RegionEU868InitDefaults+0xe8>)
 801441a:	4b19      	ldr	r3, [pc, #100]	; (8014480 <RegionEU868InitDefaults+0xec>)
 801441c:	2201      	movs	r2, #1
 801441e:	0018      	movs	r0, r3
 8014420:	f7ff f8fb 	bl	801361a <RegionCommonChanMaskCopy>
            break;
 8014424:	e01c      	b.n	8014460 <RegionEU868InitDefaults+0xcc>
            if( params->NvmCtx != 0 )
 8014426:	687b      	ldr	r3, [r7, #4]
 8014428:	681b      	ldr	r3, [r3, #0]
 801442a:	2b00      	cmp	r3, #0
 801442c:	d017      	beq.n	801445e <RegionEU868InitDefaults+0xca>
                memcpy1( (uint8_t*) &NvmCtx, (uint8_t*) params->NvmCtx, sizeof( NvmCtx ) );
 801442e:	687b      	ldr	r3, [r7, #4]
 8014430:	6819      	ldr	r1, [r3, #0]
 8014432:	238a      	movs	r3, #138	; 0x8a
 8014434:	005a      	lsls	r2, r3, #1
 8014436:	4b0d      	ldr	r3, [pc, #52]	; (801446c <RegionEU868InitDefaults+0xd8>)
 8014438:	0018      	movs	r0, r3
 801443a:	f001 fad9 	bl	80159f0 <memcpy1>
            break;
 801443e:	e00e      	b.n	801445e <RegionEU868InitDefaults+0xca>
            NvmCtx.ChannelsMask[0] |= NvmCtx.ChannelsDefaultMask[0];
 8014440:	4a0a      	ldr	r2, [pc, #40]	; (801446c <RegionEU868InitDefaults+0xd8>)
 8014442:	2388      	movs	r3, #136	; 0x88
 8014444:	005b      	lsls	r3, r3, #1
 8014446:	5ad2      	ldrh	r2, [r2, r3]
 8014448:	4908      	ldr	r1, [pc, #32]	; (801446c <RegionEU868InitDefaults+0xd8>)
 801444a:	2389      	movs	r3, #137	; 0x89
 801444c:	005b      	lsls	r3, r3, #1
 801444e:	5acb      	ldrh	r3, [r1, r3]
 8014450:	4313      	orrs	r3, r2
 8014452:	b299      	uxth	r1, r3
 8014454:	4a05      	ldr	r2, [pc, #20]	; (801446c <RegionEU868InitDefaults+0xd8>)
 8014456:	2388      	movs	r3, #136	; 0x88
 8014458:	005b      	lsls	r3, r3, #1
 801445a:	52d1      	strh	r1, [r2, r3]
            break;
 801445c:	e000      	b.n	8014460 <RegionEU868InitDefaults+0xcc>
            break;
 801445e:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 8014460:	46c0      	nop			; (mov r8, r8)
 8014462:	46bd      	mov	sp, r7
 8014464:	b017      	add	sp, #92	; 0x5c
 8014466:	bd90      	pop	{r4, r7, pc}
 8014468:	20000ffc 	.word	0x20000ffc
 801446c:	20000f3c 	.word	0x20000f3c
 8014470:	080207a8 	.word	0x080207a8
 8014474:	080207b4 	.word	0x080207b4
 8014478:	080207c0 	.word	0x080207c0
 801447c:	2000104e 	.word	0x2000104e
 8014480:	2000104c 	.word	0x2000104c

08014484 <RegionEU868GetNvmCtx>:

void* RegionEU868GetNvmCtx( GetNvmCtxParams_t* params )
{
 8014484:	b580      	push	{r7, lr}
 8014486:	b082      	sub	sp, #8
 8014488:	af00      	add	r7, sp, #0
 801448a:	6078      	str	r0, [r7, #4]
    params->nvmCtxSize = sizeof( RegionEU868NvmCtx_t );
 801448c:	687b      	ldr	r3, [r7, #4]
 801448e:	228a      	movs	r2, #138	; 0x8a
 8014490:	0052      	lsls	r2, r2, #1
 8014492:	601a      	str	r2, [r3, #0]
    return &NvmCtx;
 8014494:	4b02      	ldr	r3, [pc, #8]	; (80144a0 <RegionEU868GetNvmCtx+0x1c>)
}
 8014496:	0018      	movs	r0, r3
 8014498:	46bd      	mov	sp, r7
 801449a:	b002      	add	sp, #8
 801449c:	bd80      	pop	{r7, pc}
 801449e:	46c0      	nop			; (mov r8, r8)
 80144a0:	20000f3c 	.word	0x20000f3c

080144a4 <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 80144a4:	b580      	push	{r7, lr}
 80144a6:	b082      	sub	sp, #8
 80144a8:	af00      	add	r7, sp, #0
 80144aa:	6078      	str	r0, [r7, #4]
 80144ac:	000a      	movs	r2, r1
 80144ae:	1cfb      	adds	r3, r7, #3
 80144b0:	701a      	strb	r2, [r3, #0]
    switch( phyAttribute )
 80144b2:	1cfb      	adds	r3, r7, #3
 80144b4:	781b      	ldrb	r3, [r3, #0]
 80144b6:	3b04      	subs	r3, #4
 80144b8:	2b0a      	cmp	r3, #10
 80144ba:	d83a      	bhi.n	8014532 <RegionEU868Verify+0x8e>
 80144bc:	009a      	lsls	r2, r3, #2
 80144be:	4b1f      	ldr	r3, [pc, #124]	; (801453c <RegionEU868Verify+0x98>)
 80144c0:	18d3      	adds	r3, r2, r3
 80144c2:	681b      	ldr	r3, [r3, #0]
 80144c4:	469f      	mov	pc, r3
    {
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 80144c6:	687b      	ldr	r3, [r7, #4]
 80144c8:	781b      	ldrb	r3, [r3, #0]
 80144ca:	b25b      	sxtb	r3, r3
 80144cc:	2207      	movs	r2, #7
 80144ce:	2100      	movs	r1, #0
 80144d0:	0018      	movs	r0, r3
 80144d2:	f7fe fff9 	bl	80134c8 <RegionCommonValueInRange>
 80144d6:	0003      	movs	r3, r0
 80144d8:	1e5a      	subs	r2, r3, #1
 80144da:	4193      	sbcs	r3, r2
 80144dc:	b2db      	uxtb	r3, r3
 80144de:	e029      	b.n	8014534 <RegionEU868Verify+0x90>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 80144e0:	687b      	ldr	r3, [r7, #4]
 80144e2:	781b      	ldrb	r3, [r3, #0]
 80144e4:	b25b      	sxtb	r3, r3
 80144e6:	2205      	movs	r2, #5
 80144e8:	2100      	movs	r1, #0
 80144ea:	0018      	movs	r0, r3
 80144ec:	f7fe ffec 	bl	80134c8 <RegionCommonValueInRange>
 80144f0:	0003      	movs	r3, r0
 80144f2:	1e5a      	subs	r2, r3, #1
 80144f4:	4193      	sbcs	r3, r2
 80144f6:	b2db      	uxtb	r3, r3
 80144f8:	e01c      	b.n	8014534 <RegionEU868Verify+0x90>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 80144fa:	687b      	ldr	r3, [r7, #4]
 80144fc:	781b      	ldrb	r3, [r3, #0]
 80144fe:	b25b      	sxtb	r3, r3
 8014500:	2207      	movs	r2, #7
 8014502:	2100      	movs	r1, #0
 8014504:	0018      	movs	r0, r3
 8014506:	f7fe ffdf 	bl	80134c8 <RegionCommonValueInRange>
 801450a:	0003      	movs	r3, r0
 801450c:	1e5a      	subs	r2, r3, #1
 801450e:	4193      	sbcs	r3, r2
 8014510:	b2db      	uxtb	r3, r3
 8014512:	e00f      	b.n	8014534 <RegionEU868Verify+0x90>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 8014514:	687b      	ldr	r3, [r7, #4]
 8014516:	781b      	ldrb	r3, [r3, #0]
 8014518:	b25b      	sxtb	r3, r3
 801451a:	2207      	movs	r2, #7
 801451c:	2100      	movs	r1, #0
 801451e:	0018      	movs	r0, r3
 8014520:	f7fe ffd2 	bl	80134c8 <RegionCommonValueInRange>
 8014524:	0003      	movs	r3, r0
 8014526:	1e5a      	subs	r2, r3, #1
 8014528:	4193      	sbcs	r3, r2
 801452a:	b2db      	uxtb	r3, r3
 801452c:	e002      	b.n	8014534 <RegionEU868Verify+0x90>
        }
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
 801452e:	2301      	movs	r3, #1
 8014530:	e000      	b.n	8014534 <RegionEU868Verify+0x90>
        }
        default:
            return false;
 8014532:	2300      	movs	r3, #0
    }
}
 8014534:	0018      	movs	r0, r3
 8014536:	46bd      	mov	sp, r7
 8014538:	b002      	add	sp, #8
 801453a:	bd80      	pop	{r7, pc}
 801453c:	08021b28 	.word	0x08021b28

08014540 <RegionEU868ApplyCFList>:

void RegionEU868ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 8014540:	b590      	push	{r4, r7, lr}
 8014542:	b08b      	sub	sp, #44	; 0x2c
 8014544:	af00      	add	r7, sp, #0
 8014546:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 8014548:	2318      	movs	r3, #24
 801454a:	18fb      	adds	r3, r7, r3
 801454c:	2250      	movs	r2, #80	; 0x50
 801454e:	721a      	strb	r2, [r3, #8]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 8014550:	687b      	ldr	r3, [r7, #4]
 8014552:	791b      	ldrb	r3, [r3, #4]
 8014554:	2b10      	cmp	r3, #16
 8014556:	d000      	beq.n	801455a <RegionEU868ApplyCFList+0x1a>
 8014558:	e07d      	b.n	8014656 <RegionEU868ApplyCFList+0x116>
    {
        return;
    }

    // Last byte CFListType must be 0 to indicate the CFList contains a list of frequencies
    if( applyCFList->Payload[15] != 0 )
 801455a:	687b      	ldr	r3, [r7, #4]
 801455c:	681b      	ldr	r3, [r3, #0]
 801455e:	330f      	adds	r3, #15
 8014560:	781b      	ldrb	r3, [r3, #0]
 8014562:	2b00      	cmp	r3, #0
 8014564:	d000      	beq.n	8014568 <RegionEU868ApplyCFList+0x28>
 8014566:	e078      	b.n	801465a <RegionEU868ApplyCFList+0x11a>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8014568:	2327      	movs	r3, #39	; 0x27
 801456a:	18fb      	adds	r3, r7, r3
 801456c:	2200      	movs	r2, #0
 801456e:	701a      	strb	r2, [r3, #0]
 8014570:	2326      	movs	r3, #38	; 0x26
 8014572:	18fb      	adds	r3, r7, r3
 8014574:	2203      	movs	r2, #3
 8014576:	701a      	strb	r2, [r3, #0]
 8014578:	e067      	b.n	801464a <RegionEU868ApplyCFList+0x10a>
    {
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 801457a:	2326      	movs	r3, #38	; 0x26
 801457c:	18fb      	adds	r3, r7, r3
 801457e:	781b      	ldrb	r3, [r3, #0]
 8014580:	2b07      	cmp	r3, #7
 8014582:	d82e      	bhi.n	80145e2 <RegionEU868ApplyCFList+0xa2>
        {
            // Channel frequency
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 8014584:	687b      	ldr	r3, [r7, #4]
 8014586:	681a      	ldr	r2, [r3, #0]
 8014588:	2427      	movs	r4, #39	; 0x27
 801458a:	193b      	adds	r3, r7, r4
 801458c:	781b      	ldrb	r3, [r3, #0]
 801458e:	18d3      	adds	r3, r2, r3
 8014590:	781b      	ldrb	r3, [r3, #0]
 8014592:	001a      	movs	r2, r3
 8014594:	2018      	movs	r0, #24
 8014596:	183b      	adds	r3, r7, r0
 8014598:	601a      	str	r2, [r3, #0]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 801459a:	183b      	adds	r3, r7, r0
 801459c:	681a      	ldr	r2, [r3, #0]
 801459e:	687b      	ldr	r3, [r7, #4]
 80145a0:	6819      	ldr	r1, [r3, #0]
 80145a2:	193b      	adds	r3, r7, r4
 80145a4:	781b      	ldrb	r3, [r3, #0]
 80145a6:	3301      	adds	r3, #1
 80145a8:	18cb      	adds	r3, r1, r3
 80145aa:	781b      	ldrb	r3, [r3, #0]
 80145ac:	021b      	lsls	r3, r3, #8
 80145ae:	431a      	orrs	r2, r3
 80145b0:	183b      	adds	r3, r7, r0
 80145b2:	601a      	str	r2, [r3, #0]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 80145b4:	183b      	adds	r3, r7, r0
 80145b6:	681a      	ldr	r2, [r3, #0]
 80145b8:	687b      	ldr	r3, [r7, #4]
 80145ba:	6819      	ldr	r1, [r3, #0]
 80145bc:	193b      	adds	r3, r7, r4
 80145be:	781b      	ldrb	r3, [r3, #0]
 80145c0:	3302      	adds	r3, #2
 80145c2:	18cb      	adds	r3, r1, r3
 80145c4:	781b      	ldrb	r3, [r3, #0]
 80145c6:	041b      	lsls	r3, r3, #16
 80145c8:	431a      	orrs	r2, r3
 80145ca:	183b      	adds	r3, r7, r0
 80145cc:	601a      	str	r2, [r3, #0]
            newChannel.Frequency *= 100;
 80145ce:	183b      	adds	r3, r7, r0
 80145d0:	681b      	ldr	r3, [r3, #0]
 80145d2:	2264      	movs	r2, #100	; 0x64
 80145d4:	435a      	muls	r2, r3
 80145d6:	183b      	adds	r3, r7, r0
 80145d8:	601a      	str	r2, [r3, #0]

            // Initialize alternative frequency to 0
            newChannel.Rx1Frequency = 0;
 80145da:	183b      	adds	r3, r7, r0
 80145dc:	2200      	movs	r2, #0
 80145de:	605a      	str	r2, [r3, #4]
 80145e0:	e009      	b.n	80145f6 <RegionEU868ApplyCFList+0xb6>
        }
        else
        {
            newChannel.Frequency = 0;
 80145e2:	2118      	movs	r1, #24
 80145e4:	187b      	adds	r3, r7, r1
 80145e6:	2200      	movs	r2, #0
 80145e8:	601a      	str	r2, [r3, #0]
            newChannel.DrRange.Value = 0;
 80145ea:	187b      	adds	r3, r7, r1
 80145ec:	2200      	movs	r2, #0
 80145ee:	721a      	strb	r2, [r3, #8]
            newChannel.Rx1Frequency = 0;
 80145f0:	187b      	adds	r3, r7, r1
 80145f2:	2200      	movs	r2, #0
 80145f4:	605a      	str	r2, [r3, #4]
        }

        if( newChannel.Frequency != 0 )
 80145f6:	2318      	movs	r3, #24
 80145f8:	18fb      	adds	r3, r7, r3
 80145fa:	681b      	ldr	r3, [r3, #0]
 80145fc:	2b00      	cmp	r3, #0
 80145fe:	d00e      	beq.n	801461e <RegionEU868ApplyCFList+0xde>
        {
            channelAdd.NewChannel = &newChannel;
 8014600:	2110      	movs	r1, #16
 8014602:	187b      	adds	r3, r7, r1
 8014604:	2218      	movs	r2, #24
 8014606:	18ba      	adds	r2, r7, r2
 8014608:	601a      	str	r2, [r3, #0]
            channelAdd.ChannelId = chanIdx;
 801460a:	187b      	adds	r3, r7, r1
 801460c:	2226      	movs	r2, #38	; 0x26
 801460e:	18ba      	adds	r2, r7, r2
 8014610:	7812      	ldrb	r2, [r2, #0]
 8014612:	711a      	strb	r2, [r3, #4]

            // Try to add all channels
            RegionEU868ChannelAdd( &channelAdd );
 8014614:	187b      	adds	r3, r7, r1
 8014616:	0018      	movs	r0, r3
 8014618:	f000 fdc2 	bl	80151a0 <RegionEU868ChannelAdd>
 801461c:	e009      	b.n	8014632 <RegionEU868ApplyCFList+0xf2>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 801461e:	210c      	movs	r1, #12
 8014620:	187b      	adds	r3, r7, r1
 8014622:	2226      	movs	r2, #38	; 0x26
 8014624:	18ba      	adds	r2, r7, r2
 8014626:	7812      	ldrb	r2, [r2, #0]
 8014628:	701a      	strb	r2, [r3, #0]

            RegionEU868ChannelsRemove( &channelRemove );
 801462a:	187b      	adds	r3, r7, r1
 801462c:	0018      	movs	r0, r3
 801462e:	f000 fe7b 	bl	8015328 <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8014632:	2227      	movs	r2, #39	; 0x27
 8014634:	18bb      	adds	r3, r7, r2
 8014636:	18ba      	adds	r2, r7, r2
 8014638:	7812      	ldrb	r2, [r2, #0]
 801463a:	3203      	adds	r2, #3
 801463c:	701a      	strb	r2, [r3, #0]
 801463e:	2126      	movs	r1, #38	; 0x26
 8014640:	187b      	adds	r3, r7, r1
 8014642:	781a      	ldrb	r2, [r3, #0]
 8014644:	187b      	adds	r3, r7, r1
 8014646:	3201      	adds	r2, #1
 8014648:	701a      	strb	r2, [r3, #0]
 801464a:	2326      	movs	r3, #38	; 0x26
 801464c:	18fb      	adds	r3, r7, r3
 801464e:	781b      	ldrb	r3, [r3, #0]
 8014650:	2b0f      	cmp	r3, #15
 8014652:	d992      	bls.n	801457a <RegionEU868ApplyCFList+0x3a>
 8014654:	e002      	b.n	801465c <RegionEU868ApplyCFList+0x11c>
        return;
 8014656:	46c0      	nop			; (mov r8, r8)
 8014658:	e000      	b.n	801465c <RegionEU868ApplyCFList+0x11c>
        return;
 801465a:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 801465c:	46bd      	mov	sp, r7
 801465e:	b00b      	add	sp, #44	; 0x2c
 8014660:	bd90      	pop	{r4, r7, pc}
	...

08014664 <RegionEU868ChanMaskSet>:

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 8014664:	b580      	push	{r7, lr}
 8014666:	b082      	sub	sp, #8
 8014668:	af00      	add	r7, sp, #0
 801466a:	6078      	str	r0, [r7, #4]
    switch( chanMaskSet->ChannelsMaskType )
 801466c:	687b      	ldr	r3, [r7, #4]
 801466e:	791b      	ldrb	r3, [r3, #4]
 8014670:	2b00      	cmp	r3, #0
 8014672:	d002      	beq.n	801467a <RegionEU868ChanMaskSet+0x16>
 8014674:	2b01      	cmp	r3, #1
 8014676:	d008      	beq.n	801468a <RegionEU868ChanMaskSet+0x26>
 8014678:	e00f      	b.n	801469a <RegionEU868ChanMaskSet+0x36>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, chanMaskSet->ChannelsMaskIn, 1 );
 801467a:	687b      	ldr	r3, [r7, #4]
 801467c:	6819      	ldr	r1, [r3, #0]
 801467e:	4b0a      	ldr	r3, [pc, #40]	; (80146a8 <RegionEU868ChanMaskSet+0x44>)
 8014680:	2201      	movs	r2, #1
 8014682:	0018      	movs	r0, r3
 8014684:	f7fe ffc9 	bl	801361a <RegionCommonChanMaskCopy>
            break;
 8014688:	e009      	b.n	801469e <RegionEU868ChanMaskSet+0x3a>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( NvmCtx.ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, 1 );
 801468a:	687b      	ldr	r3, [r7, #4]
 801468c:	6819      	ldr	r1, [r3, #0]
 801468e:	4b07      	ldr	r3, [pc, #28]	; (80146ac <RegionEU868ChanMaskSet+0x48>)
 8014690:	2201      	movs	r2, #1
 8014692:	0018      	movs	r0, r3
 8014694:	f7fe ffc1 	bl	801361a <RegionCommonChanMaskCopy>
            break;
 8014698:	e001      	b.n	801469e <RegionEU868ChanMaskSet+0x3a>
        }
        default:
            return false;
 801469a:	2300      	movs	r3, #0
 801469c:	e000      	b.n	80146a0 <RegionEU868ChanMaskSet+0x3c>
    }
    return true;
 801469e:	2301      	movs	r3, #1
}
 80146a0:	0018      	movs	r0, r3
 80146a2:	46bd      	mov	sp, r7
 80146a4:	b002      	add	sp, #8
 80146a6:	bd80      	pop	{r7, pc}
 80146a8:	2000104c 	.word	0x2000104c
 80146ac:	2000104e 	.word	0x2000104e

080146b0 <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 80146b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80146b2:	b08b      	sub	sp, #44	; 0x2c
 80146b4:	af04      	add	r7, sp, #16
 80146b6:	60ba      	str	r2, [r7, #8]
 80146b8:	607b      	str	r3, [r7, #4]
 80146ba:	250f      	movs	r5, #15
 80146bc:	197b      	adds	r3, r7, r5
 80146be:	1c02      	adds	r2, r0, #0
 80146c0:	701a      	strb	r2, [r3, #0]
 80146c2:	230e      	movs	r3, #14
 80146c4:	18fb      	adds	r3, r7, r3
 80146c6:	1c0a      	adds	r2, r1, #0
 80146c8:	701a      	strb	r2, [r3, #0]
    double tSymbol = 0.0;
 80146ca:	2300      	movs	r3, #0
 80146cc:	2400      	movs	r4, #0
 80146ce:	613b      	str	r3, [r7, #16]
 80146d0:	617c      	str	r4, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 80146d2:	197b      	adds	r3, r7, r5
 80146d4:	781b      	ldrb	r3, [r3, #0]
 80146d6:	b25a      	sxtb	r2, r3
 80146d8:	2a07      	cmp	r2, #7
 80146da:	dd00      	ble.n	80146de <RegionEU868ComputeRxWindowParameters+0x2e>
 80146dc:	2307      	movs	r3, #7
 80146de:	b25a      	sxtb	r2, r3
 80146e0:	687b      	ldr	r3, [r7, #4]
 80146e2:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = GetBandwidth( rxConfigParams->Datarate );
 80146e4:	687b      	ldr	r3, [r7, #4]
 80146e6:	785b      	ldrb	r3, [r3, #1]
 80146e8:	b25b      	sxtb	r3, r3
 80146ea:	0018      	movs	r0, r3
 80146ec:	f7ff fb8a 	bl	8013e04 <GetBandwidth>
 80146f0:	0003      	movs	r3, r0
 80146f2:	b2da      	uxtb	r2, r3
 80146f4:	687b      	ldr	r3, [r7, #4]
 80146f6:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 80146f8:	687b      	ldr	r3, [r7, #4]
 80146fa:	785b      	ldrb	r3, [r3, #1]
 80146fc:	b25b      	sxtb	r3, r3
 80146fe:	2b07      	cmp	r3, #7
 8014700:	d10d      	bne.n	801471e <RegionEU868ComputeRxWindowParameters+0x6e>
    { // FSK
        tSymbol = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 8014702:	687b      	ldr	r3, [r7, #4]
 8014704:	785b      	ldrb	r3, [r3, #1]
 8014706:	b25b      	sxtb	r3, r3
 8014708:	001a      	movs	r2, r3
 801470a:	4b1b      	ldr	r3, [pc, #108]	; (8014778 <RegionEU868ComputeRxWindowParameters+0xc8>)
 801470c:	5c9b      	ldrb	r3, [r3, r2]
 801470e:	0018      	movs	r0, r3
 8014710:	f7ff f9ea 	bl	8013ae8 <RegionCommonComputeSymbolTimeFsk>
 8014714:	0003      	movs	r3, r0
 8014716:	000c      	movs	r4, r1
 8014718:	613b      	str	r3, [r7, #16]
 801471a:	617c      	str	r4, [r7, #20]
 801471c:	e013      	b.n	8014746 <RegionEU868ComputeRxWindowParameters+0x96>
    }
    else
    { // LoRa
        tSymbol = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 801471e:	687b      	ldr	r3, [r7, #4]
 8014720:	785b      	ldrb	r3, [r3, #1]
 8014722:	b25b      	sxtb	r3, r3
 8014724:	001a      	movs	r2, r3
 8014726:	4b14      	ldr	r3, [pc, #80]	; (8014778 <RegionEU868ComputeRxWindowParameters+0xc8>)
 8014728:	5c98      	ldrb	r0, [r3, r2]
 801472a:	687b      	ldr	r3, [r7, #4]
 801472c:	785b      	ldrb	r3, [r3, #1]
 801472e:	b25b      	sxtb	r3, r3
 8014730:	001a      	movs	r2, r3
 8014732:	4b12      	ldr	r3, [pc, #72]	; (801477c <RegionEU868ComputeRxWindowParameters+0xcc>)
 8014734:	0092      	lsls	r2, r2, #2
 8014736:	58d3      	ldr	r3, [r2, r3]
 8014738:	0019      	movs	r1, r3
 801473a:	f7ff f9a9 	bl	8013a90 <RegionCommonComputeSymbolTimeLoRa>
 801473e:	0003      	movs	r3, r0
 8014740:	000c      	movs	r4, r1
 8014742:	613b      	str	r3, [r7, #16]
 8014744:	617c      	str	r4, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbol, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8014746:	4b0e      	ldr	r3, [pc, #56]	; (8014780 <RegionEU868ComputeRxWindowParameters+0xd0>)
 8014748:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801474a:	4798      	blx	r3
 801474c:	0006      	movs	r6, r0
 801474e:	687b      	ldr	r3, [r7, #4]
 8014750:	3308      	adds	r3, #8
 8014752:	687a      	ldr	r2, [r7, #4]
 8014754:	320c      	adds	r2, #12
 8014756:	68bd      	ldr	r5, [r7, #8]
 8014758:	210e      	movs	r1, #14
 801475a:	1879      	adds	r1, r7, r1
 801475c:	780c      	ldrb	r4, [r1, #0]
 801475e:	6938      	ldr	r0, [r7, #16]
 8014760:	6979      	ldr	r1, [r7, #20]
 8014762:	9202      	str	r2, [sp, #8]
 8014764:	9301      	str	r3, [sp, #4]
 8014766:	9600      	str	r6, [sp, #0]
 8014768:	002b      	movs	r3, r5
 801476a:	0022      	movs	r2, r4
 801476c:	f7ff f9d8 	bl	8013b20 <RegionCommonComputeRxWindowParameters>
}
 8014770:	46c0      	nop			; (mov r8, r8)
 8014772:	46bd      	mov	sp, r7
 8014774:	b007      	add	sp, #28
 8014776:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014778:	08021a1c 	.word	0x08021a1c
 801477c:	08021a24 	.word	0x08021a24
 8014780:	08021b54 	.word	0x08021b54

08014784 <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8014784:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014786:	b091      	sub	sp, #68	; 0x44
 8014788:	af0a      	add	r7, sp, #40	; 0x28
 801478a:	6078      	str	r0, [r7, #4]
 801478c:	6039      	str	r1, [r7, #0]
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 801478e:	230f      	movs	r3, #15
 8014790:	18fb      	adds	r3, r7, r3
 8014792:	687a      	ldr	r2, [r7, #4]
 8014794:	7852      	ldrb	r2, [r2, #1]
 8014796:	701a      	strb	r2, [r3, #0]
    uint8_t maxPayload = 0;
 8014798:	2316      	movs	r3, #22
 801479a:	18fb      	adds	r3, r7, r3
 801479c:	2200      	movs	r2, #0
 801479e:	701a      	strb	r2, [r3, #0]
    int8_t phyDr = 0;
 80147a0:	230e      	movs	r3, #14
 80147a2:	18fb      	adds	r3, r7, r3
 80147a4:	2200      	movs	r2, #0
 80147a6:	701a      	strb	r2, [r3, #0]
    uint32_t frequency = rxConfig->Frequency;
 80147a8:	687b      	ldr	r3, [r7, #4]
 80147aa:	685b      	ldr	r3, [r3, #4]
 80147ac:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 80147ae:	4b64      	ldr	r3, [pc, #400]	; (8014940 <RegionEU868RxConfig+0x1bc>)
 80147b0:	68db      	ldr	r3, [r3, #12]
 80147b2:	4798      	blx	r3
 80147b4:	1e03      	subs	r3, r0, #0
 80147b6:	d001      	beq.n	80147bc <RegionEU868RxConfig+0x38>
    {
        return false;
 80147b8:	2300      	movs	r3, #0
 80147ba:	e0bc      	b.n	8014936 <RegionEU868RxConfig+0x1b2>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 80147bc:	687b      	ldr	r3, [r7, #4]
 80147be:	7cdb      	ldrb	r3, [r3, #19]
 80147c0:	2b00      	cmp	r3, #0
 80147c2:	d122      	bne.n	801480a <RegionEU868RxConfig+0x86>
    {
        // Apply window 1 frequency
        frequency = NvmCtx.Channels[rxConfig->Channel].Frequency;
 80147c4:	687b      	ldr	r3, [r7, #4]
 80147c6:	781b      	ldrb	r3, [r3, #0]
 80147c8:	0019      	movs	r1, r3
 80147ca:	4a5e      	ldr	r2, [pc, #376]	; (8014944 <RegionEU868RxConfig+0x1c0>)
 80147cc:	000b      	movs	r3, r1
 80147ce:	005b      	lsls	r3, r3, #1
 80147d0:	185b      	adds	r3, r3, r1
 80147d2:	009b      	lsls	r3, r3, #2
 80147d4:	589b      	ldr	r3, [r3, r2]
 80147d6:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( NvmCtx.Channels[rxConfig->Channel].Rx1Frequency != 0 )
 80147d8:	687b      	ldr	r3, [r7, #4]
 80147da:	781b      	ldrb	r3, [r3, #0]
 80147dc:	0019      	movs	r1, r3
 80147de:	4a59      	ldr	r2, [pc, #356]	; (8014944 <RegionEU868RxConfig+0x1c0>)
 80147e0:	000b      	movs	r3, r1
 80147e2:	005b      	lsls	r3, r3, #1
 80147e4:	185b      	adds	r3, r3, r1
 80147e6:	009b      	lsls	r3, r3, #2
 80147e8:	18d3      	adds	r3, r2, r3
 80147ea:	3304      	adds	r3, #4
 80147ec:	681b      	ldr	r3, [r3, #0]
 80147ee:	2b00      	cmp	r3, #0
 80147f0:	d00b      	beq.n	801480a <RegionEU868RxConfig+0x86>
        {
            frequency = NvmCtx.Channels[rxConfig->Channel].Rx1Frequency;
 80147f2:	687b      	ldr	r3, [r7, #4]
 80147f4:	781b      	ldrb	r3, [r3, #0]
 80147f6:	0019      	movs	r1, r3
 80147f8:	4a52      	ldr	r2, [pc, #328]	; (8014944 <RegionEU868RxConfig+0x1c0>)
 80147fa:	000b      	movs	r3, r1
 80147fc:	005b      	lsls	r3, r3, #1
 80147fe:	185b      	adds	r3, r3, r1
 8014800:	009b      	lsls	r3, r3, #2
 8014802:	18d3      	adds	r3, r2, r3
 8014804:	3304      	adds	r3, #4
 8014806:	681b      	ldr	r3, [r3, #0]
 8014808:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 801480a:	240f      	movs	r4, #15
 801480c:	193b      	adds	r3, r7, r4
 801480e:	781b      	ldrb	r3, [r3, #0]
 8014810:	b25b      	sxtb	r3, r3
 8014812:	4a4d      	ldr	r2, [pc, #308]	; (8014948 <RegionEU868RxConfig+0x1c4>)
 8014814:	5cd2      	ldrb	r2, [r2, r3]
 8014816:	230e      	movs	r3, #14
 8014818:	18fb      	adds	r3, r7, r3
 801481a:	701a      	strb	r2, [r3, #0]

    Radio.SetChannel( frequency );
 801481c:	4b48      	ldr	r3, [pc, #288]	; (8014940 <RegionEU868RxConfig+0x1bc>)
 801481e:	695b      	ldr	r3, [r3, #20]
 8014820:	693a      	ldr	r2, [r7, #16]
 8014822:	0010      	movs	r0, r2
 8014824:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 8014826:	193b      	adds	r3, r7, r4
 8014828:	781b      	ldrb	r3, [r3, #0]
 801482a:	b25b      	sxtb	r3, r3
 801482c:	2b07      	cmp	r3, #7
 801482e:	d12f      	bne.n	8014890 <RegionEU868RxConfig+0x10c>
    {
        modem = MODEM_FSK;
 8014830:	2117      	movs	r1, #23
 8014832:	187b      	adds	r3, r7, r1
 8014834:	2200      	movs	r2, #0
 8014836:	701a      	strb	r2, [r3, #0]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 8014838:	4b41      	ldr	r3, [pc, #260]	; (8014940 <RegionEU868RxConfig+0x1bc>)
 801483a:	6a1c      	ldr	r4, [r3, #32]
 801483c:	230e      	movs	r3, #14
 801483e:	18fb      	adds	r3, r7, r3
 8014840:	2200      	movs	r2, #0
 8014842:	569a      	ldrsb	r2, [r3, r2]
 8014844:	0013      	movs	r3, r2
 8014846:	015b      	lsls	r3, r3, #5
 8014848:	1a9b      	subs	r3, r3, r2
 801484a:	009b      	lsls	r3, r3, #2
 801484c:	189b      	adds	r3, r3, r2
 801484e:	00db      	lsls	r3, r3, #3
 8014850:	001e      	movs	r6, r3
 8014852:	687b      	ldr	r3, [r7, #4]
 8014854:	689b      	ldr	r3, [r3, #8]
 8014856:	b29b      	uxth	r3, r3
 8014858:	687a      	ldr	r2, [r7, #4]
 801485a:	7c92      	ldrb	r2, [r2, #18]
 801485c:	4d3b      	ldr	r5, [pc, #236]	; (801494c <RegionEU868RxConfig+0x1c8>)
 801485e:	1879      	adds	r1, r7, r1
 8014860:	7808      	ldrb	r0, [r1, #0]
 8014862:	9209      	str	r2, [sp, #36]	; 0x24
 8014864:	2200      	movs	r2, #0
 8014866:	9208      	str	r2, [sp, #32]
 8014868:	2200      	movs	r2, #0
 801486a:	9207      	str	r2, [sp, #28]
 801486c:	2200      	movs	r2, #0
 801486e:	9206      	str	r2, [sp, #24]
 8014870:	2201      	movs	r2, #1
 8014872:	9205      	str	r2, [sp, #20]
 8014874:	2200      	movs	r2, #0
 8014876:	9204      	str	r2, [sp, #16]
 8014878:	2200      	movs	r2, #0
 801487a:	9203      	str	r2, [sp, #12]
 801487c:	9302      	str	r3, [sp, #8]
 801487e:	2305      	movs	r3, #5
 8014880:	9301      	str	r3, [sp, #4]
 8014882:	4b33      	ldr	r3, [pc, #204]	; (8014950 <RegionEU868RxConfig+0x1cc>)
 8014884:	9300      	str	r3, [sp, #0]
 8014886:	2300      	movs	r3, #0
 8014888:	0032      	movs	r2, r6
 801488a:	0029      	movs	r1, r5
 801488c:	47a0      	blx	r4
 801488e:	e029      	b.n	80148e4 <RegionEU868RxConfig+0x160>
    }
    else
    {
        modem = MODEM_LORA;
 8014890:	2117      	movs	r1, #23
 8014892:	187b      	adds	r3, r7, r1
 8014894:	2201      	movs	r2, #1
 8014896:	701a      	strb	r2, [r3, #0]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 8014898:	4b29      	ldr	r3, [pc, #164]	; (8014940 <RegionEU868RxConfig+0x1bc>)
 801489a:	6a1c      	ldr	r4, [r3, #32]
 801489c:	687b      	ldr	r3, [r7, #4]
 801489e:	789b      	ldrb	r3, [r3, #2]
 80148a0:	001e      	movs	r6, r3
 80148a2:	230e      	movs	r3, #14
 80148a4:	18fb      	adds	r3, r7, r3
 80148a6:	2500      	movs	r5, #0
 80148a8:	575d      	ldrsb	r5, [r3, r5]
 80148aa:	687b      	ldr	r3, [r7, #4]
 80148ac:	689b      	ldr	r3, [r3, #8]
 80148ae:	b29b      	uxth	r3, r3
 80148b0:	687a      	ldr	r2, [r7, #4]
 80148b2:	7c92      	ldrb	r2, [r2, #18]
 80148b4:	1879      	adds	r1, r7, r1
 80148b6:	7808      	ldrb	r0, [r1, #0]
 80148b8:	9209      	str	r2, [sp, #36]	; 0x24
 80148ba:	2201      	movs	r2, #1
 80148bc:	9208      	str	r2, [sp, #32]
 80148be:	2200      	movs	r2, #0
 80148c0:	9207      	str	r2, [sp, #28]
 80148c2:	2200      	movs	r2, #0
 80148c4:	9206      	str	r2, [sp, #24]
 80148c6:	2200      	movs	r2, #0
 80148c8:	9205      	str	r2, [sp, #20]
 80148ca:	2200      	movs	r2, #0
 80148cc:	9204      	str	r2, [sp, #16]
 80148ce:	2200      	movs	r2, #0
 80148d0:	9203      	str	r2, [sp, #12]
 80148d2:	9302      	str	r3, [sp, #8]
 80148d4:	2308      	movs	r3, #8
 80148d6:	9301      	str	r3, [sp, #4]
 80148d8:	2300      	movs	r3, #0
 80148da:	9300      	str	r3, [sp, #0]
 80148dc:	2301      	movs	r3, #1
 80148de:	002a      	movs	r2, r5
 80148e0:	0031      	movs	r1, r6
 80148e2:	47a0      	blx	r4
    }

    if( rxConfig->RepeaterSupport == true )
 80148e4:	687b      	ldr	r3, [r7, #4]
 80148e6:	7c5b      	ldrb	r3, [r3, #17]
 80148e8:	2b00      	cmp	r3, #0
 80148ea:	d009      	beq.n	8014900 <RegionEU868RxConfig+0x17c>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 80148ec:	230f      	movs	r3, #15
 80148ee:	18fb      	adds	r3, r7, r3
 80148f0:	2200      	movs	r2, #0
 80148f2:	569a      	ldrsb	r2, [r3, r2]
 80148f4:	2316      	movs	r3, #22
 80148f6:	18fb      	adds	r3, r7, r3
 80148f8:	4916      	ldr	r1, [pc, #88]	; (8014954 <RegionEU868RxConfig+0x1d0>)
 80148fa:	5c8a      	ldrb	r2, [r1, r2]
 80148fc:	701a      	strb	r2, [r3, #0]
 80148fe:	e008      	b.n	8014912 <RegionEU868RxConfig+0x18e>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 8014900:	230f      	movs	r3, #15
 8014902:	18fb      	adds	r3, r7, r3
 8014904:	2200      	movs	r2, #0
 8014906:	569a      	ldrsb	r2, [r3, r2]
 8014908:	2316      	movs	r3, #22
 801490a:	18fb      	adds	r3, r7, r3
 801490c:	4912      	ldr	r1, [pc, #72]	; (8014958 <RegionEU868RxConfig+0x1d4>)
 801490e:	5c8a      	ldrb	r2, [r1, r2]
 8014910:	701a      	strb	r2, [r3, #0]
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORA_MAC_FRMPAYLOAD_OVERHEAD );
 8014912:	4b0b      	ldr	r3, [pc, #44]	; (8014940 <RegionEU868RxConfig+0x1bc>)
 8014914:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8014916:	2216      	movs	r2, #22
 8014918:	18ba      	adds	r2, r7, r2
 801491a:	7812      	ldrb	r2, [r2, #0]
 801491c:	320d      	adds	r2, #13
 801491e:	b2d1      	uxtb	r1, r2
 8014920:	2217      	movs	r2, #23
 8014922:	18ba      	adds	r2, r7, r2
 8014924:	7812      	ldrb	r2, [r2, #0]
 8014926:	0010      	movs	r0, r2
 8014928:	4798      	blx	r3
    TVL1( PRINTF( "RX on freq %d Hz at DR %d\n\r", frequency, dr );)

    *datarate = (uint8_t) dr;
 801492a:	683b      	ldr	r3, [r7, #0]
 801492c:	220f      	movs	r2, #15
 801492e:	18ba      	adds	r2, r7, r2
 8014930:	7812      	ldrb	r2, [r2, #0]
 8014932:	701a      	strb	r2, [r3, #0]
    return true;
 8014934:	2301      	movs	r3, #1
}
 8014936:	0018      	movs	r0, r3
 8014938:	46bd      	mov	sp, r7
 801493a:	b007      	add	sp, #28
 801493c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801493e:	46c0      	nop			; (mov r8, r8)
 8014940:	08021b54 	.word	0x08021b54
 8014944:	20000f3c 	.word	0x20000f3c
 8014948:	08021a1c 	.word	0x08021a1c
 801494c:	0000c350 	.word	0x0000c350
 8014950:	00014585 	.word	0x00014585
 8014954:	08021a4c 	.word	0x08021a4c
 8014958:	08021a44 	.word	0x08021a44

0801495c <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 801495c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801495e:	b093      	sub	sp, #76	; 0x4c
 8014960:	af0a      	add	r7, sp, #40	; 0x28
 8014962:	60f8      	str	r0, [r7, #12]
 8014964:	60b9      	str	r1, [r7, #8]
 8014966:	607a      	str	r2, [r7, #4]
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 8014968:	68fb      	ldr	r3, [r7, #12]
 801496a:	785b      	ldrb	r3, [r3, #1]
 801496c:	b25b      	sxtb	r3, r3
 801496e:	001a      	movs	r2, r3
 8014970:	4b60      	ldr	r3, [pc, #384]	; (8014af4 <RegionEU868TxConfig+0x198>)
 8014972:	5c9a      	ldrb	r2, [r3, r2]
 8014974:	231e      	movs	r3, #30
 8014976:	18fb      	adds	r3, r7, r3
 8014978:	701a      	strb	r2, [r3, #0]
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, NvmCtx.Bands[NvmCtx.Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, NvmCtx.ChannelsMask );
 801497a:	68fb      	ldr	r3, [r7, #12]
 801497c:	2002      	movs	r0, #2
 801497e:	5618      	ldrsb	r0, [r3, r0]
 8014980:	68fb      	ldr	r3, [r7, #12]
 8014982:	781b      	ldrb	r3, [r3, #0]
 8014984:	0019      	movs	r1, r3
 8014986:	4a5c      	ldr	r2, [pc, #368]	; (8014af8 <RegionEU868TxConfig+0x19c>)
 8014988:	000b      	movs	r3, r1
 801498a:	005b      	lsls	r3, r3, #1
 801498c:	185b      	adds	r3, r3, r1
 801498e:	009b      	lsls	r3, r3, #2
 8014990:	18d3      	adds	r3, r2, r3
 8014992:	3309      	adds	r3, #9
 8014994:	781b      	ldrb	r3, [r3, #0]
 8014996:	4a58      	ldr	r2, [pc, #352]	; (8014af8 <RegionEU868TxConfig+0x19c>)
 8014998:	330c      	adds	r3, #12
 801499a:	011b      	lsls	r3, r3, #4
 801499c:	18d3      	adds	r3, r2, r3
 801499e:	3302      	adds	r3, #2
 80149a0:	2100      	movs	r1, #0
 80149a2:	5659      	ldrsb	r1, [r3, r1]
 80149a4:	68fb      	ldr	r3, [r7, #12]
 80149a6:	2201      	movs	r2, #1
 80149a8:	569a      	ldrsb	r2, [r3, r2]
 80149aa:	251d      	movs	r5, #29
 80149ac:	197c      	adds	r4, r7, r5
 80149ae:	4b53      	ldr	r3, [pc, #332]	; (8014afc <RegionEU868TxConfig+0x1a0>)
 80149b0:	f7ff fa46 	bl	8013e40 <LimitTxPower>
 80149b4:	0003      	movs	r3, r0
 80149b6:	7023      	strb	r3, [r4, #0]
    uint32_t bandwidth = GetBandwidth( txConfig->Datarate );
 80149b8:	68fb      	ldr	r3, [r7, #12]
 80149ba:	785b      	ldrb	r3, [r3, #1]
 80149bc:	b25b      	sxtb	r3, r3
 80149be:	0018      	movs	r0, r3
 80149c0:	f7ff fa20 	bl	8013e04 <GetBandwidth>
 80149c4:	0003      	movs	r3, r0
 80149c6:	61bb      	str	r3, [r7, #24]
    int8_t phyTxPower = 0;
 80149c8:	2017      	movs	r0, #23
 80149ca:	183b      	adds	r3, r7, r0
 80149cc:	2200      	movs	r2, #0
 80149ce:	701a      	strb	r2, [r3, #0]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 80149d0:	68fb      	ldr	r3, [r7, #12]
 80149d2:	6859      	ldr	r1, [r3, #4]
 80149d4:	68fb      	ldr	r3, [r7, #12]
 80149d6:	689a      	ldr	r2, [r3, #8]
 80149d8:	183c      	adds	r4, r7, r0
 80149da:	197b      	adds	r3, r7, r5
 80149dc:	781b      	ldrb	r3, [r3, #0]
 80149de:	b25b      	sxtb	r3, r3
 80149e0:	0018      	movs	r0, r3
 80149e2:	f7ff f921 	bl	8013c28 <RegionCommonComputeTxPower>
 80149e6:	0003      	movs	r3, r0
 80149e8:	7023      	strb	r3, [r4, #0]

    // Setup the radio frequency
    Radio.SetChannel( NvmCtx.Channels[txConfig->Channel].Frequency );
 80149ea:	4b45      	ldr	r3, [pc, #276]	; (8014b00 <RegionEU868TxConfig+0x1a4>)
 80149ec:	695a      	ldr	r2, [r3, #20]
 80149ee:	68fb      	ldr	r3, [r7, #12]
 80149f0:	781b      	ldrb	r3, [r3, #0]
 80149f2:	0018      	movs	r0, r3
 80149f4:	4940      	ldr	r1, [pc, #256]	; (8014af8 <RegionEU868TxConfig+0x19c>)
 80149f6:	0003      	movs	r3, r0
 80149f8:	005b      	lsls	r3, r3, #1
 80149fa:	181b      	adds	r3, r3, r0
 80149fc:	009b      	lsls	r3, r3, #2
 80149fe:	585b      	ldr	r3, [r3, r1]
 8014a00:	0018      	movs	r0, r3
 8014a02:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 8014a04:	68fb      	ldr	r3, [r7, #12]
 8014a06:	785b      	ldrb	r3, [r3, #1]
 8014a08:	b25b      	sxtb	r3, r3
 8014a0a:	2b07      	cmp	r3, #7
 8014a0c:	d12d      	bne.n	8014a6a <RegionEU868TxConfig+0x10e>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 8014a0e:	201f      	movs	r0, #31
 8014a10:	183b      	adds	r3, r7, r0
 8014a12:	2200      	movs	r2, #0
 8014a14:	701a      	strb	r2, [r3, #0]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 3000 );
 8014a16:	4b3a      	ldr	r3, [pc, #232]	; (8014b00 <RegionEU868TxConfig+0x1a4>)
 8014a18:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8014a1a:	231e      	movs	r3, #30
 8014a1c:	18fb      	adds	r3, r7, r3
 8014a1e:	2200      	movs	r2, #0
 8014a20:	569a      	ldrsb	r2, [r3, r2]
 8014a22:	0013      	movs	r3, r2
 8014a24:	015b      	lsls	r3, r3, #5
 8014a26:	1a9b      	subs	r3, r3, r2
 8014a28:	009b      	lsls	r3, r3, #2
 8014a2a:	189b      	adds	r3, r3, r2
 8014a2c:	00db      	lsls	r3, r3, #3
 8014a2e:	001d      	movs	r5, r3
 8014a30:	69ba      	ldr	r2, [r7, #24]
 8014a32:	4e34      	ldr	r6, [pc, #208]	; (8014b04 <RegionEU868TxConfig+0x1a8>)
 8014a34:	2317      	movs	r3, #23
 8014a36:	18fb      	adds	r3, r7, r3
 8014a38:	2100      	movs	r1, #0
 8014a3a:	5659      	ldrsb	r1, [r3, r1]
 8014a3c:	183b      	adds	r3, r7, r0
 8014a3e:	7818      	ldrb	r0, [r3, #0]
 8014a40:	4b31      	ldr	r3, [pc, #196]	; (8014b08 <RegionEU868TxConfig+0x1ac>)
 8014a42:	9308      	str	r3, [sp, #32]
 8014a44:	2300      	movs	r3, #0
 8014a46:	9307      	str	r3, [sp, #28]
 8014a48:	2300      	movs	r3, #0
 8014a4a:	9306      	str	r3, [sp, #24]
 8014a4c:	2300      	movs	r3, #0
 8014a4e:	9305      	str	r3, [sp, #20]
 8014a50:	2301      	movs	r3, #1
 8014a52:	9304      	str	r3, [sp, #16]
 8014a54:	2300      	movs	r3, #0
 8014a56:	9303      	str	r3, [sp, #12]
 8014a58:	2305      	movs	r3, #5
 8014a5a:	9302      	str	r3, [sp, #8]
 8014a5c:	2300      	movs	r3, #0
 8014a5e:	9301      	str	r3, [sp, #4]
 8014a60:	9500      	str	r5, [sp, #0]
 8014a62:	0013      	movs	r3, r2
 8014a64:	0032      	movs	r2, r6
 8014a66:	47a0      	blx	r4
 8014a68:	e024      	b.n	8014ab4 <RegionEU868TxConfig+0x158>
    }
    else
    {
        modem = MODEM_LORA;
 8014a6a:	201f      	movs	r0, #31
 8014a6c:	183b      	adds	r3, r7, r0
 8014a6e:	2201      	movs	r2, #1
 8014a70:	701a      	strb	r2, [r3, #0]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 3000 );
 8014a72:	4b23      	ldr	r3, [pc, #140]	; (8014b00 <RegionEU868TxConfig+0x1a4>)
 8014a74:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8014a76:	231e      	movs	r3, #30
 8014a78:	18fb      	adds	r3, r7, r3
 8014a7a:	781b      	ldrb	r3, [r3, #0]
 8014a7c:	b25b      	sxtb	r3, r3
 8014a7e:	69bd      	ldr	r5, [r7, #24]
 8014a80:	2217      	movs	r2, #23
 8014a82:	18ba      	adds	r2, r7, r2
 8014a84:	2100      	movs	r1, #0
 8014a86:	5651      	ldrsb	r1, [r2, r1]
 8014a88:	183a      	adds	r2, r7, r0
 8014a8a:	7810      	ldrb	r0, [r2, #0]
 8014a8c:	4a1e      	ldr	r2, [pc, #120]	; (8014b08 <RegionEU868TxConfig+0x1ac>)
 8014a8e:	9208      	str	r2, [sp, #32]
 8014a90:	2200      	movs	r2, #0
 8014a92:	9207      	str	r2, [sp, #28]
 8014a94:	2200      	movs	r2, #0
 8014a96:	9206      	str	r2, [sp, #24]
 8014a98:	2200      	movs	r2, #0
 8014a9a:	9205      	str	r2, [sp, #20]
 8014a9c:	2201      	movs	r2, #1
 8014a9e:	9204      	str	r2, [sp, #16]
 8014aa0:	2200      	movs	r2, #0
 8014aa2:	9203      	str	r2, [sp, #12]
 8014aa4:	2208      	movs	r2, #8
 8014aa6:	9202      	str	r2, [sp, #8]
 8014aa8:	2201      	movs	r2, #1
 8014aaa:	9201      	str	r2, [sp, #4]
 8014aac:	9300      	str	r3, [sp, #0]
 8014aae:	002b      	movs	r3, r5
 8014ab0:	2200      	movs	r2, #0
 8014ab2:	47a0      	blx	r4
    }
    TVL1( PRINTF( "TX on freq %d Hz at DR %d\n\r", NvmCtx.Channels[txConfig->Channel].Frequency, txConfig->Datarate );)

    // Setup maximum payload lenght of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 8014ab4:	4b12      	ldr	r3, [pc, #72]	; (8014b00 <RegionEU868TxConfig+0x1a4>)
 8014ab6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8014ab8:	68fa      	ldr	r2, [r7, #12]
 8014aba:	8992      	ldrh	r2, [r2, #12]
 8014abc:	b2d1      	uxtb	r1, r2
 8014abe:	241f      	movs	r4, #31
 8014ac0:	193a      	adds	r2, r7, r4
 8014ac2:	7812      	ldrb	r2, [r2, #0]
 8014ac4:	0010      	movs	r0, r2
 8014ac6:	4798      	blx	r3
    // Get the time-on-air of the next tx frame
    *txTimeOnAir = Radio.TimeOnAir( modem, txConfig->PktLen );
 8014ac8:	4b0d      	ldr	r3, [pc, #52]	; (8014b00 <RegionEU868TxConfig+0x1a4>)
 8014aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014acc:	68fa      	ldr	r2, [r7, #12]
 8014ace:	8992      	ldrh	r2, [r2, #12]
 8014ad0:	b2d1      	uxtb	r1, r2
 8014ad2:	193a      	adds	r2, r7, r4
 8014ad4:	7812      	ldrb	r2, [r2, #0]
 8014ad6:	0010      	movs	r0, r2
 8014ad8:	4798      	blx	r3
 8014ada:	0002      	movs	r2, r0
 8014adc:	687b      	ldr	r3, [r7, #4]
 8014ade:	601a      	str	r2, [r3, #0]

    *txPower = txPowerLimited;
 8014ae0:	68bb      	ldr	r3, [r7, #8]
 8014ae2:	221d      	movs	r2, #29
 8014ae4:	18ba      	adds	r2, r7, r2
 8014ae6:	7812      	ldrb	r2, [r2, #0]
 8014ae8:	701a      	strb	r2, [r3, #0]
    return true;
 8014aea:	2301      	movs	r3, #1
}
 8014aec:	0018      	movs	r0, r3
 8014aee:	46bd      	mov	sp, r7
 8014af0:	b009      	add	sp, #36	; 0x24
 8014af2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014af4:	08021a1c 	.word	0x08021a1c
 8014af8:	20000f3c 	.word	0x20000f3c
 8014afc:	2000104c 	.word	0x2000104c
 8014b00:	08021b54 	.word	0x08021b54
 8014b04:	000061a8 	.word	0x000061a8
 8014b08:	00000bb8 	.word	0x00000bb8

08014b0c <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8014b0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014b0e:	b093      	sub	sp, #76	; 0x4c
 8014b10:	af00      	add	r7, sp, #0
 8014b12:	60f8      	str	r0, [r7, #12]
 8014b14:	60b9      	str	r1, [r7, #8]
 8014b16:	607a      	str	r2, [r7, #4]
 8014b18:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 8014b1a:	2347      	movs	r3, #71	; 0x47
 8014b1c:	18fb      	adds	r3, r7, r3
 8014b1e:	2207      	movs	r2, #7
 8014b20:	701a      	strb	r2, [r3, #0]
    RegionCommonLinkAdrParams_t linkAdrParams;
    uint8_t nextIndex = 0;
 8014b22:	2344      	movs	r3, #68	; 0x44
 8014b24:	18fb      	adds	r3, r7, r3
 8014b26:	2200      	movs	r2, #0
 8014b28:	701a      	strb	r2, [r3, #0]
    uint8_t bytesProcessed = 0;
 8014b2a:	2346      	movs	r3, #70	; 0x46
 8014b2c:	18fb      	adds	r3, r7, r3
 8014b2e:	2200      	movs	r2, #0
 8014b30:	701a      	strb	r2, [r3, #0]
    uint16_t chMask = 0;
 8014b32:	233a      	movs	r3, #58	; 0x3a
 8014b34:	18fb      	adds	r3, r7, r3
 8014b36:	2200      	movs	r2, #0
 8014b38:	801a      	strh	r2, [r3, #0]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 8014b3a:	e09e      	b.n	8014c7a <RegionEU868LinkAdrReq+0x16e>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 8014b3c:	68fb      	ldr	r3, [r7, #12]
 8014b3e:	685a      	ldr	r2, [r3, #4]
 8014b40:	2346      	movs	r3, #70	; 0x46
 8014b42:	18fb      	adds	r3, r7, r3
 8014b44:	781b      	ldrb	r3, [r3, #0]
 8014b46:	18d3      	adds	r3, r2, r3
 8014b48:	2544      	movs	r5, #68	; 0x44
 8014b4a:	197c      	adds	r4, r7, r5
 8014b4c:	223c      	movs	r2, #60	; 0x3c
 8014b4e:	18ba      	adds	r2, r7, r2
 8014b50:	0011      	movs	r1, r2
 8014b52:	0018      	movs	r0, r3
 8014b54:	f7fe fea0 	bl	8013898 <RegionCommonParseLinkAdrReq>
 8014b58:	0003      	movs	r3, r0
 8014b5a:	7023      	strb	r3, [r4, #0]

        if( nextIndex == 0 )
 8014b5c:	197b      	adds	r3, r7, r5
 8014b5e:	781b      	ldrb	r3, [r3, #0]
 8014b60:	2b00      	cmp	r3, #0
 8014b62:	d100      	bne.n	8014b66 <RegionEU868LinkAdrReq+0x5a>
 8014b64:	e092      	b.n	8014c8c <RegionEU868LinkAdrReq+0x180>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 8014b66:	2246      	movs	r2, #70	; 0x46
 8014b68:	18bb      	adds	r3, r7, r2
 8014b6a:	18b9      	adds	r1, r7, r2
 8014b6c:	2244      	movs	r2, #68	; 0x44
 8014b6e:	18ba      	adds	r2, r7, r2
 8014b70:	7809      	ldrb	r1, [r1, #0]
 8014b72:	7812      	ldrb	r2, [r2, #0]
 8014b74:	188a      	adds	r2, r1, r2
 8014b76:	701a      	strb	r2, [r3, #0]

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 8014b78:	2347      	movs	r3, #71	; 0x47
 8014b7a:	18fb      	adds	r3, r7, r3
 8014b7c:	2207      	movs	r2, #7
 8014b7e:	701a      	strb	r2, [r3, #0]

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 8014b80:	213c      	movs	r1, #60	; 0x3c
 8014b82:	187b      	adds	r3, r7, r1
 8014b84:	889a      	ldrh	r2, [r3, #4]
 8014b86:	233a      	movs	r3, #58	; 0x3a
 8014b88:	18fb      	adds	r3, r7, r3
 8014b8a:	801a      	strh	r2, [r3, #0]

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 8014b8c:	187b      	adds	r3, r7, r1
 8014b8e:	78db      	ldrb	r3, [r3, #3]
 8014b90:	2b00      	cmp	r3, #0
 8014b92:	d10c      	bne.n	8014bae <RegionEU868LinkAdrReq+0xa2>
 8014b94:	233a      	movs	r3, #58	; 0x3a
 8014b96:	18fb      	adds	r3, r7, r3
 8014b98:	881b      	ldrh	r3, [r3, #0]
 8014b9a:	2b00      	cmp	r3, #0
 8014b9c:	d107      	bne.n	8014bae <RegionEU868LinkAdrReq+0xa2>
        {
            status &= 0xFE; // Channel mask KO
 8014b9e:	2247      	movs	r2, #71	; 0x47
 8014ba0:	18bb      	adds	r3, r7, r2
 8014ba2:	18ba      	adds	r2, r7, r2
 8014ba4:	7812      	ldrb	r2, [r2, #0]
 8014ba6:	2101      	movs	r1, #1
 8014ba8:	438a      	bics	r2, r1
 8014baa:	701a      	strb	r2, [r3, #0]
 8014bac:	e065      	b.n	8014c7a <RegionEU868LinkAdrReq+0x16e>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8014bae:	233c      	movs	r3, #60	; 0x3c
 8014bb0:	18fb      	adds	r3, r7, r3
 8014bb2:	78db      	ldrb	r3, [r3, #3]
 8014bb4:	2b00      	cmp	r3, #0
 8014bb6:	d004      	beq.n	8014bc2 <RegionEU868LinkAdrReq+0xb6>
 8014bb8:	233c      	movs	r3, #60	; 0x3c
 8014bba:	18fb      	adds	r3, r7, r3
 8014bbc:	78db      	ldrb	r3, [r3, #3]
 8014bbe:	2b05      	cmp	r3, #5
 8014bc0:	d904      	bls.n	8014bcc <RegionEU868LinkAdrReq+0xc0>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 8014bc2:	233c      	movs	r3, #60	; 0x3c
 8014bc4:	18fb      	adds	r3, r7, r3
 8014bc6:	78db      	ldrb	r3, [r3, #3]
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8014bc8:	2b06      	cmp	r3, #6
 8014bca:	d907      	bls.n	8014bdc <RegionEU868LinkAdrReq+0xd0>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 8014bcc:	2247      	movs	r2, #71	; 0x47
 8014bce:	18bb      	adds	r3, r7, r2
 8014bd0:	18ba      	adds	r2, r7, r2
 8014bd2:	7812      	ldrb	r2, [r2, #0]
 8014bd4:	2101      	movs	r1, #1
 8014bd6:	438a      	bics	r2, r1
 8014bd8:	701a      	strb	r2, [r3, #0]
 8014bda:	e04e      	b.n	8014c7a <RegionEU868LinkAdrReq+0x16e>
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8014bdc:	2345      	movs	r3, #69	; 0x45
 8014bde:	18fb      	adds	r3, r7, r3
 8014be0:	2200      	movs	r2, #0
 8014be2:	701a      	strb	r2, [r3, #0]
 8014be4:	e044      	b.n	8014c70 <RegionEU868LinkAdrReq+0x164>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 8014be6:	233c      	movs	r3, #60	; 0x3c
 8014be8:	18fb      	adds	r3, r7, r3
 8014bea:	78db      	ldrb	r3, [r3, #3]
 8014bec:	2b06      	cmp	r3, #6
 8014bee:	d11b      	bne.n	8014c28 <RegionEU868LinkAdrReq+0x11c>
                {
                    if( NvmCtx.Channels[i].Frequency != 0 )
 8014bf0:	2345      	movs	r3, #69	; 0x45
 8014bf2:	18fb      	adds	r3, r7, r3
 8014bf4:	781a      	ldrb	r2, [r3, #0]
 8014bf6:	496e      	ldr	r1, [pc, #440]	; (8014db0 <RegionEU868LinkAdrReq+0x2a4>)
 8014bf8:	0013      	movs	r3, r2
 8014bfa:	005b      	lsls	r3, r3, #1
 8014bfc:	189b      	adds	r3, r3, r2
 8014bfe:	009b      	lsls	r3, r3, #2
 8014c00:	585b      	ldr	r3, [r3, r1]
 8014c02:	2b00      	cmp	r3, #0
 8014c04:	d02e      	beq.n	8014c64 <RegionEU868LinkAdrReq+0x158>
                    {
                        chMask |= 1 << i;
 8014c06:	2345      	movs	r3, #69	; 0x45
 8014c08:	18fb      	adds	r3, r7, r3
 8014c0a:	781b      	ldrb	r3, [r3, #0]
 8014c0c:	2201      	movs	r2, #1
 8014c0e:	409a      	lsls	r2, r3
 8014c10:	0013      	movs	r3, r2
 8014c12:	b21a      	sxth	r2, r3
 8014c14:	213a      	movs	r1, #58	; 0x3a
 8014c16:	187b      	adds	r3, r7, r1
 8014c18:	881b      	ldrh	r3, [r3, #0]
 8014c1a:	b21b      	sxth	r3, r3
 8014c1c:	4313      	orrs	r3, r2
 8014c1e:	b21b      	sxth	r3, r3
 8014c20:	b29a      	uxth	r2, r3
 8014c22:	187b      	adds	r3, r7, r1
 8014c24:	801a      	strh	r2, [r3, #0]
 8014c26:	e01d      	b.n	8014c64 <RegionEU868LinkAdrReq+0x158>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8014c28:	233a      	movs	r3, #58	; 0x3a
 8014c2a:	18fb      	adds	r3, r7, r3
 8014c2c:	881b      	ldrh	r3, [r3, #0]
 8014c2e:	001a      	movs	r2, r3
 8014c30:	2345      	movs	r3, #69	; 0x45
 8014c32:	18fb      	adds	r3, r7, r3
 8014c34:	781b      	ldrb	r3, [r3, #0]
 8014c36:	411a      	asrs	r2, r3
 8014c38:	0013      	movs	r3, r2
 8014c3a:	2201      	movs	r2, #1
 8014c3c:	4013      	ands	r3, r2
 8014c3e:	d011      	beq.n	8014c64 <RegionEU868LinkAdrReq+0x158>
                        ( NvmCtx.Channels[i].Frequency == 0 ) )
 8014c40:	2345      	movs	r3, #69	; 0x45
 8014c42:	18fb      	adds	r3, r7, r3
 8014c44:	781a      	ldrb	r2, [r3, #0]
 8014c46:	495a      	ldr	r1, [pc, #360]	; (8014db0 <RegionEU868LinkAdrReq+0x2a4>)
 8014c48:	0013      	movs	r3, r2
 8014c4a:	005b      	lsls	r3, r3, #1
 8014c4c:	189b      	adds	r3, r3, r2
 8014c4e:	009b      	lsls	r3, r3, #2
 8014c50:	585b      	ldr	r3, [r3, r1]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8014c52:	2b00      	cmp	r3, #0
 8014c54:	d106      	bne.n	8014c64 <RegionEU868LinkAdrReq+0x158>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 8014c56:	2247      	movs	r2, #71	; 0x47
 8014c58:	18bb      	adds	r3, r7, r2
 8014c5a:	18ba      	adds	r2, r7, r2
 8014c5c:	7812      	ldrb	r2, [r2, #0]
 8014c5e:	2101      	movs	r1, #1
 8014c60:	438a      	bics	r2, r1
 8014c62:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8014c64:	2145      	movs	r1, #69	; 0x45
 8014c66:	187b      	adds	r3, r7, r1
 8014c68:	781a      	ldrb	r2, [r3, #0]
 8014c6a:	187b      	adds	r3, r7, r1
 8014c6c:	3201      	adds	r2, #1
 8014c6e:	701a      	strb	r2, [r3, #0]
 8014c70:	2345      	movs	r3, #69	; 0x45
 8014c72:	18fb      	adds	r3, r7, r3
 8014c74:	781b      	ldrb	r3, [r3, #0]
 8014c76:	2b0f      	cmp	r3, #15
 8014c78:	d9b5      	bls.n	8014be6 <RegionEU868LinkAdrReq+0xda>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 8014c7a:	68fb      	ldr	r3, [r7, #12]
 8014c7c:	7a1b      	ldrb	r3, [r3, #8]
 8014c7e:	2246      	movs	r2, #70	; 0x46
 8014c80:	18ba      	adds	r2, r7, r2
 8014c82:	7812      	ldrb	r2, [r2, #0]
 8014c84:	429a      	cmp	r2, r3
 8014c86:	d200      	bcs.n	8014c8a <RegionEU868LinkAdrReq+0x17e>
 8014c88:	e758      	b.n	8014b3c <RegionEU868LinkAdrReq+0x30>
 8014c8a:	e000      	b.n	8014c8e <RegionEU868LinkAdrReq+0x182>
            break; // break loop, since no more request has been found
 8014c8c:	46c0      	nop			; (mov r8, r8)
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8014c8e:	2134      	movs	r1, #52	; 0x34
 8014c90:	187b      	adds	r3, r7, r1
 8014c92:	2201      	movs	r2, #1
 8014c94:	701a      	strb	r2, [r3, #0]
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 8014c96:	68fb      	ldr	r3, [r7, #12]
 8014c98:	7a5a      	ldrb	r2, [r3, #9]
 8014c9a:	187b      	adds	r3, r7, r1
 8014c9c:	709a      	strb	r2, [r3, #2]
    phyParam = RegionEU868GetPhyParam( &getPhy );
 8014c9e:	187b      	adds	r3, r7, r1
 8014ca0:	0018      	movs	r0, r3
 8014ca2:	f7ff fa53 	bl	801414c <RegionEU868GetPhyParam>
 8014ca6:	0003      	movs	r3, r0
 8014ca8:	001a      	movs	r2, r3
 8014caa:	2030      	movs	r0, #48	; 0x30
 8014cac:	183b      	adds	r3, r7, r0
 8014cae:	601a      	str	r2, [r3, #0]

    linkAdrVerifyParams.Status = status;
 8014cb0:	2110      	movs	r1, #16
 8014cb2:	187b      	adds	r3, r7, r1
 8014cb4:	2447      	movs	r4, #71	; 0x47
 8014cb6:	193a      	adds	r2, r7, r4
 8014cb8:	7812      	ldrb	r2, [r2, #0]
 8014cba:	711a      	strb	r2, [r3, #4]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8014cbc:	68fb      	ldr	r3, [r7, #12]
 8014cbe:	7a9a      	ldrb	r2, [r3, #10]
 8014cc0:	187b      	adds	r3, r7, r1
 8014cc2:	715a      	strb	r2, [r3, #5]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 8014cc4:	253c      	movs	r5, #60	; 0x3c
 8014cc6:	197b      	adds	r3, r7, r5
 8014cc8:	2201      	movs	r2, #1
 8014cca:	569a      	ldrsb	r2, [r3, r2]
 8014ccc:	187b      	adds	r3, r7, r1
 8014cce:	719a      	strb	r2, [r3, #6]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8014cd0:	197b      	adds	r3, r7, r5
 8014cd2:	2202      	movs	r2, #2
 8014cd4:	569a      	ldrsb	r2, [r3, r2]
 8014cd6:	187b      	adds	r3, r7, r1
 8014cd8:	71da      	strb	r2, [r3, #7]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 8014cda:	197b      	adds	r3, r7, r5
 8014cdc:	781a      	ldrb	r2, [r3, #0]
 8014cde:	187b      	adds	r3, r7, r1
 8014ce0:	721a      	strb	r2, [r3, #8]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8014ce2:	68fb      	ldr	r3, [r7, #12]
 8014ce4:	220b      	movs	r2, #11
 8014ce6:	569a      	ldrsb	r2, [r3, r2]
 8014ce8:	187b      	adds	r3, r7, r1
 8014cea:	725a      	strb	r2, [r3, #9]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8014cec:	68fb      	ldr	r3, [r7, #12]
 8014cee:	220c      	movs	r2, #12
 8014cf0:	569a      	ldrsb	r2, [r3, r2]
 8014cf2:	187b      	adds	r3, r7, r1
 8014cf4:	729a      	strb	r2, [r3, #10]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8014cf6:	68fb      	ldr	r3, [r7, #12]
 8014cf8:	7b5b      	ldrb	r3, [r3, #13]
 8014cfa:	b25a      	sxtb	r2, r3
 8014cfc:	187b      	adds	r3, r7, r1
 8014cfe:	72da      	strb	r2, [r3, #11]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 8014d00:	187b      	adds	r3, r7, r1
 8014d02:	2210      	movs	r2, #16
 8014d04:	731a      	strb	r2, [r3, #12]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 8014d06:	187b      	adds	r3, r7, r1
 8014d08:	223a      	movs	r2, #58	; 0x3a
 8014d0a:	18ba      	adds	r2, r7, r2
 8014d0c:	611a      	str	r2, [r3, #16]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 8014d0e:	183b      	adds	r3, r7, r0
 8014d10:	681b      	ldr	r3, [r3, #0]
 8014d12:	b25a      	sxtb	r2, r3
 8014d14:	0008      	movs	r0, r1
 8014d16:	183b      	adds	r3, r7, r0
 8014d18:	751a      	strb	r2, [r3, #20]
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 8014d1a:	183b      	adds	r3, r7, r0
 8014d1c:	2207      	movs	r2, #7
 8014d1e:	755a      	strb	r2, [r3, #21]
    linkAdrVerifyParams.Channels = NvmCtx.Channels;
 8014d20:	183b      	adds	r3, r7, r0
 8014d22:	4a23      	ldr	r2, [pc, #140]	; (8014db0 <RegionEU868LinkAdrReq+0x2a4>)
 8014d24:	619a      	str	r2, [r3, #24]
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 8014d26:	183b      	adds	r3, r7, r0
 8014d28:	2207      	movs	r2, #7
 8014d2a:	771a      	strb	r2, [r3, #28]
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 8014d2c:	183b      	adds	r3, r7, r0
 8014d2e:	2200      	movs	r2, #0
 8014d30:	775a      	strb	r2, [r3, #29]
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 8014d32:	183b      	adds	r3, r7, r0
 8014d34:	68fa      	ldr	r2, [r7, #12]
 8014d36:	6812      	ldr	r2, [r2, #0]
 8014d38:	601a      	str	r2, [r3, #0]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8014d3a:	0026      	movs	r6, r4
 8014d3c:	193c      	adds	r4, r7, r4
 8014d3e:	0029      	movs	r1, r5
 8014d40:	187d      	adds	r5, r7, r1
 8014d42:	187b      	adds	r3, r7, r1
 8014d44:	1c9a      	adds	r2, r3, #2
 8014d46:	187b      	adds	r3, r7, r1
 8014d48:	1c59      	adds	r1, r3, #1
 8014d4a:	1838      	adds	r0, r7, r0
 8014d4c:	002b      	movs	r3, r5
 8014d4e:	f7fe fdf9 	bl	8013944 <RegionCommonLinkAdrReqVerifyParams>
 8014d52:	0003      	movs	r3, r0
 8014d54:	7023      	strb	r3, [r4, #0]

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8014d56:	0034      	movs	r4, r6
 8014d58:	193b      	adds	r3, r7, r4
 8014d5a:	781b      	ldrb	r3, [r3, #0]
 8014d5c:	2b07      	cmp	r3, #7
 8014d5e:	d10c      	bne.n	8014d7a <RegionEU868LinkAdrReq+0x26e>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) NvmCtx.ChannelsMask, 0, sizeof( NvmCtx.ChannelsMask ) );
 8014d60:	4b14      	ldr	r3, [pc, #80]	; (8014db4 <RegionEU868LinkAdrReq+0x2a8>)
 8014d62:	2202      	movs	r2, #2
 8014d64:	2100      	movs	r1, #0
 8014d66:	0018      	movs	r0, r3
 8014d68:	f000 fe7e 	bl	8015a68 <memset1>
        // Update the channels mask
        NvmCtx.ChannelsMask[0] = chMask;
 8014d6c:	233a      	movs	r3, #58	; 0x3a
 8014d6e:	18fb      	adds	r3, r7, r3
 8014d70:	8819      	ldrh	r1, [r3, #0]
 8014d72:	4a0f      	ldr	r2, [pc, #60]	; (8014db0 <RegionEU868LinkAdrReq+0x2a4>)
 8014d74:	2388      	movs	r3, #136	; 0x88
 8014d76:	005b      	lsls	r3, r3, #1
 8014d78:	52d1      	strh	r1, [r2, r3]
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 8014d7a:	213c      	movs	r1, #60	; 0x3c
 8014d7c:	187b      	adds	r3, r7, r1
 8014d7e:	2201      	movs	r2, #1
 8014d80:	569a      	ldrsb	r2, [r3, r2]
 8014d82:	68bb      	ldr	r3, [r7, #8]
 8014d84:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 8014d86:	187b      	adds	r3, r7, r1
 8014d88:	2202      	movs	r2, #2
 8014d8a:	569a      	ldrsb	r2, [r3, r2]
 8014d8c:	687b      	ldr	r3, [r7, #4]
 8014d8e:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 8014d90:	187b      	adds	r3, r7, r1
 8014d92:	781a      	ldrb	r2, [r3, #0]
 8014d94:	683b      	ldr	r3, [r7, #0]
 8014d96:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 8014d98:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014d9a:	2246      	movs	r2, #70	; 0x46
 8014d9c:	18ba      	adds	r2, r7, r2
 8014d9e:	7812      	ldrb	r2, [r2, #0]
 8014da0:	701a      	strb	r2, [r3, #0]

    return status;
 8014da2:	2347      	movs	r3, #71	; 0x47
 8014da4:	18fb      	adds	r3, r7, r3
 8014da6:	781b      	ldrb	r3, [r3, #0]
}
 8014da8:	0018      	movs	r0, r3
 8014daa:	46bd      	mov	sp, r7
 8014dac:	b013      	add	sp, #76	; 0x4c
 8014dae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014db0:	20000f3c 	.word	0x20000f3c
 8014db4:	2000104c 	.word	0x2000104c

08014db8 <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8014db8:	b580      	push	{r7, lr}
 8014dba:	b084      	sub	sp, #16
 8014dbc:	af00      	add	r7, sp, #0
 8014dbe:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 8014dc0:	230f      	movs	r3, #15
 8014dc2:	18fb      	adds	r3, r7, r3
 8014dc4:	2207      	movs	r2, #7
 8014dc6:	701a      	strb	r2, [r3, #0]
    uint8_t band = 0;
 8014dc8:	210e      	movs	r1, #14
 8014dca:	187b      	adds	r3, r7, r1
 8014dcc:	2200      	movs	r2, #0
 8014dce:	701a      	strb	r2, [r3, #0]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 8014dd0:	687b      	ldr	r3, [r7, #4]
 8014dd2:	685b      	ldr	r3, [r3, #4]
 8014dd4:	187a      	adds	r2, r7, r1
 8014dd6:	0011      	movs	r1, r2
 8014dd8:	0018      	movs	r0, r3
 8014dda:	f7ff f859 	bl	8013e90 <VerifyRfFreq>
 8014dde:	0003      	movs	r3, r0
 8014de0:	001a      	movs	r2, r3
 8014de2:	2301      	movs	r3, #1
 8014de4:	4053      	eors	r3, r2
 8014de6:	b2db      	uxtb	r3, r3
 8014de8:	2b00      	cmp	r3, #0
 8014dea:	d006      	beq.n	8014dfa <RegionEU868RxParamSetupReq+0x42>
    {
        status &= 0xFE; // Channel frequency KO
 8014dec:	220f      	movs	r2, #15
 8014dee:	18bb      	adds	r3, r7, r2
 8014df0:	18ba      	adds	r2, r7, r2
 8014df2:	7812      	ldrb	r2, [r2, #0]
 8014df4:	2101      	movs	r1, #1
 8014df6:	438a      	bics	r2, r1
 8014df8:	701a      	strb	r2, [r3, #0]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 8014dfa:	687b      	ldr	r3, [r7, #4]
 8014dfc:	781b      	ldrb	r3, [r3, #0]
 8014dfe:	b25b      	sxtb	r3, r3
 8014e00:	2207      	movs	r2, #7
 8014e02:	2100      	movs	r1, #0
 8014e04:	0018      	movs	r0, r3
 8014e06:	f7fe fb5f 	bl	80134c8 <RegionCommonValueInRange>
 8014e0a:	1e03      	subs	r3, r0, #0
 8014e0c:	d106      	bne.n	8014e1c <RegionEU868RxParamSetupReq+0x64>
    {
        status &= 0xFD; // Datarate KO
 8014e0e:	220f      	movs	r2, #15
 8014e10:	18bb      	adds	r3, r7, r2
 8014e12:	18ba      	adds	r2, r7, r2
 8014e14:	7812      	ldrb	r2, [r2, #0]
 8014e16:	2102      	movs	r1, #2
 8014e18:	438a      	bics	r2, r1
 8014e1a:	701a      	strb	r2, [r3, #0]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 8014e1c:	687b      	ldr	r3, [r7, #4]
 8014e1e:	785b      	ldrb	r3, [r3, #1]
 8014e20:	b25b      	sxtb	r3, r3
 8014e22:	2205      	movs	r2, #5
 8014e24:	2100      	movs	r1, #0
 8014e26:	0018      	movs	r0, r3
 8014e28:	f7fe fb4e 	bl	80134c8 <RegionCommonValueInRange>
 8014e2c:	1e03      	subs	r3, r0, #0
 8014e2e:	d106      	bne.n	8014e3e <RegionEU868RxParamSetupReq+0x86>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 8014e30:	220f      	movs	r2, #15
 8014e32:	18bb      	adds	r3, r7, r2
 8014e34:	18ba      	adds	r2, r7, r2
 8014e36:	7812      	ldrb	r2, [r2, #0]
 8014e38:	2104      	movs	r1, #4
 8014e3a:	438a      	bics	r2, r1
 8014e3c:	701a      	strb	r2, [r3, #0]
    }

    return status;
 8014e3e:	230f      	movs	r3, #15
 8014e40:	18fb      	adds	r3, r7, r3
 8014e42:	781b      	ldrb	r3, [r3, #0]
}
 8014e44:	0018      	movs	r0, r3
 8014e46:	46bd      	mov	sp, r7
 8014e48:	b004      	add	sp, #16
 8014e4a:	bd80      	pop	{r7, pc}

08014e4c <RegionEU868NewChannelReq>:

uint8_t RegionEU868NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 8014e4c:	b580      	push	{r7, lr}
 8014e4e:	b086      	sub	sp, #24
 8014e50:	af00      	add	r7, sp, #0
 8014e52:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8014e54:	2317      	movs	r3, #23
 8014e56:	18fb      	adds	r3, r7, r3
 8014e58:	2203      	movs	r2, #3
 8014e5a:	701a      	strb	r2, [r3, #0]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 8014e5c:	687b      	ldr	r3, [r7, #4]
 8014e5e:	681b      	ldr	r3, [r3, #0]
 8014e60:	681b      	ldr	r3, [r3, #0]
 8014e62:	2b00      	cmp	r3, #0
 8014e64:	d119      	bne.n	8014e9a <RegionEU868NewChannelReq+0x4e>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 8014e66:	687b      	ldr	r3, [r7, #4]
 8014e68:	791b      	ldrb	r3, [r3, #4]
 8014e6a:	b25b      	sxtb	r3, r3
 8014e6c:	b2da      	uxtb	r2, r3
 8014e6e:	2108      	movs	r1, #8
 8014e70:	187b      	adds	r3, r7, r1
 8014e72:	701a      	strb	r2, [r3, #0]

        // Remove
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 8014e74:	187b      	adds	r3, r7, r1
 8014e76:	0018      	movs	r0, r3
 8014e78:	f000 fa56 	bl	8015328 <RegionEU868ChannelsRemove>
 8014e7c:	0003      	movs	r3, r0
 8014e7e:	001a      	movs	r2, r3
 8014e80:	2301      	movs	r3, #1
 8014e82:	4053      	eors	r3, r2
 8014e84:	b2db      	uxtb	r3, r3
 8014e86:	2b00      	cmp	r3, #0
 8014e88:	d043      	beq.n	8014f12 <RegionEU868NewChannelReq+0xc6>
        {
            status &= 0xFC;
 8014e8a:	2217      	movs	r2, #23
 8014e8c:	18bb      	adds	r3, r7, r2
 8014e8e:	18ba      	adds	r2, r7, r2
 8014e90:	7812      	ldrb	r2, [r2, #0]
 8014e92:	2103      	movs	r1, #3
 8014e94:	438a      	bics	r2, r1
 8014e96:	701a      	strb	r2, [r3, #0]
 8014e98:	e03b      	b.n	8014f12 <RegionEU868NewChannelReq+0xc6>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 8014e9a:	687b      	ldr	r3, [r7, #4]
 8014e9c:	681a      	ldr	r2, [r3, #0]
 8014e9e:	210c      	movs	r1, #12
 8014ea0:	187b      	adds	r3, r7, r1
 8014ea2:	601a      	str	r2, [r3, #0]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 8014ea4:	687b      	ldr	r3, [r7, #4]
 8014ea6:	791b      	ldrb	r3, [r3, #4]
 8014ea8:	b25b      	sxtb	r3, r3
 8014eaa:	b2da      	uxtb	r2, r3
 8014eac:	187b      	adds	r3, r7, r1
 8014eae:	711a      	strb	r2, [r3, #4]

        switch( RegionEU868ChannelAdd( &channelAdd ) )
 8014eb0:	187b      	adds	r3, r7, r1
 8014eb2:	0018      	movs	r0, r3
 8014eb4:	f000 f974 	bl	80151a0 <RegionEU868ChannelAdd>
 8014eb8:	0003      	movs	r3, r0
 8014eba:	2b04      	cmp	r3, #4
 8014ebc:	d008      	beq.n	8014ed0 <RegionEU868NewChannelReq+0x84>
 8014ebe:	dc02      	bgt.n	8014ec6 <RegionEU868NewChannelReq+0x7a>
 8014ec0:	2b00      	cmp	r3, #0
 8014ec2:	d025      	beq.n	8014f10 <RegionEU868NewChannelReq+0xc4>
 8014ec4:	e01c      	b.n	8014f00 <RegionEU868NewChannelReq+0xb4>
 8014ec6:	2b05      	cmp	r3, #5
 8014ec8:	d00a      	beq.n	8014ee0 <RegionEU868NewChannelReq+0x94>
 8014eca:	2b06      	cmp	r3, #6
 8014ecc:	d010      	beq.n	8014ef0 <RegionEU868NewChannelReq+0xa4>
 8014ece:	e017      	b.n	8014f00 <RegionEU868NewChannelReq+0xb4>
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 8014ed0:	2217      	movs	r2, #23
 8014ed2:	18bb      	adds	r3, r7, r2
 8014ed4:	18ba      	adds	r2, r7, r2
 8014ed6:	7812      	ldrb	r2, [r2, #0]
 8014ed8:	2101      	movs	r1, #1
 8014eda:	438a      	bics	r2, r1
 8014edc:	701a      	strb	r2, [r3, #0]
                break;
 8014ede:	e018      	b.n	8014f12 <RegionEU868NewChannelReq+0xc6>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 8014ee0:	2217      	movs	r2, #23
 8014ee2:	18bb      	adds	r3, r7, r2
 8014ee4:	18ba      	adds	r2, r7, r2
 8014ee6:	7812      	ldrb	r2, [r2, #0]
 8014ee8:	2102      	movs	r1, #2
 8014eea:	438a      	bics	r2, r1
 8014eec:	701a      	strb	r2, [r3, #0]
                break;
 8014eee:	e010      	b.n	8014f12 <RegionEU868NewChannelReq+0xc6>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 8014ef0:	2217      	movs	r2, #23
 8014ef2:	18bb      	adds	r3, r7, r2
 8014ef4:	18ba      	adds	r2, r7, r2
 8014ef6:	7812      	ldrb	r2, [r2, #0]
 8014ef8:	2103      	movs	r1, #3
 8014efa:	438a      	bics	r2, r1
 8014efc:	701a      	strb	r2, [r3, #0]
                break;
 8014efe:	e008      	b.n	8014f12 <RegionEU868NewChannelReq+0xc6>
            }
            default:
            {
                status &= 0xFC;
 8014f00:	2217      	movs	r2, #23
 8014f02:	18bb      	adds	r3, r7, r2
 8014f04:	18ba      	adds	r2, r7, r2
 8014f06:	7812      	ldrb	r2, [r2, #0]
 8014f08:	2103      	movs	r1, #3
 8014f0a:	438a      	bics	r2, r1
 8014f0c:	701a      	strb	r2, [r3, #0]
                break;
 8014f0e:	e000      	b.n	8014f12 <RegionEU868NewChannelReq+0xc6>
                break;
 8014f10:	46c0      	nop			; (mov r8, r8)
            }
        }
    }

    return status;
 8014f12:	2317      	movs	r3, #23
 8014f14:	18fb      	adds	r3, r7, r3
 8014f16:	781b      	ldrb	r3, [r3, #0]
}
 8014f18:	0018      	movs	r0, r3
 8014f1a:	46bd      	mov	sp, r7
 8014f1c:	b006      	add	sp, #24
 8014f1e:	bd80      	pop	{r7, pc}

08014f20 <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 8014f20:	b580      	push	{r7, lr}
 8014f22:	b082      	sub	sp, #8
 8014f24:	af00      	add	r7, sp, #0
 8014f26:	6078      	str	r0, [r7, #4]
    return -1;
 8014f28:	2301      	movs	r3, #1
 8014f2a:	425b      	negs	r3, r3
}
 8014f2c:	0018      	movs	r0, r3
 8014f2e:	46bd      	mov	sp, r7
 8014f30:	b002      	add	sp, #8
 8014f32:	bd80      	pop	{r7, pc}

08014f34 <RegionEU868DlChannelReq>:

uint8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 8014f34:	b580      	push	{r7, lr}
 8014f36:	b084      	sub	sp, #16
 8014f38:	af00      	add	r7, sp, #0
 8014f3a:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8014f3c:	230f      	movs	r3, #15
 8014f3e:	18fb      	adds	r3, r7, r3
 8014f40:	2203      	movs	r2, #3
 8014f42:	701a      	strb	r2, [r3, #0]
    uint8_t band = 0;
 8014f44:	210e      	movs	r1, #14
 8014f46:	187b      	adds	r3, r7, r1
 8014f48:	2200      	movs	r2, #0
 8014f4a:	701a      	strb	r2, [r3, #0]

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 8014f4c:	687b      	ldr	r3, [r7, #4]
 8014f4e:	685b      	ldr	r3, [r3, #4]
 8014f50:	187a      	adds	r2, r7, r1
 8014f52:	0011      	movs	r1, r2
 8014f54:	0018      	movs	r0, r3
 8014f56:	f7fe ff9b 	bl	8013e90 <VerifyRfFreq>
 8014f5a:	0003      	movs	r3, r0
 8014f5c:	001a      	movs	r2, r3
 8014f5e:	2301      	movs	r3, #1
 8014f60:	4053      	eors	r3, r2
 8014f62:	b2db      	uxtb	r3, r3
 8014f64:	2b00      	cmp	r3, #0
 8014f66:	d006      	beq.n	8014f76 <RegionEU868DlChannelReq+0x42>
    {
        status &= 0xFE;
 8014f68:	220f      	movs	r2, #15
 8014f6a:	18bb      	adds	r3, r7, r2
 8014f6c:	18ba      	adds	r2, r7, r2
 8014f6e:	7812      	ldrb	r2, [r2, #0]
 8014f70:	2101      	movs	r1, #1
 8014f72:	438a      	bics	r2, r1
 8014f74:	701a      	strb	r2, [r3, #0]
    }

    // Verify if an uplink frequency exists
    if( NvmCtx.Channels[dlChannelReq->ChannelId].Frequency == 0 )
 8014f76:	687b      	ldr	r3, [r7, #4]
 8014f78:	781b      	ldrb	r3, [r3, #0]
 8014f7a:	0019      	movs	r1, r3
 8014f7c:	4a13      	ldr	r2, [pc, #76]	; (8014fcc <RegionEU868DlChannelReq+0x98>)
 8014f7e:	000b      	movs	r3, r1
 8014f80:	005b      	lsls	r3, r3, #1
 8014f82:	185b      	adds	r3, r3, r1
 8014f84:	009b      	lsls	r3, r3, #2
 8014f86:	589b      	ldr	r3, [r3, r2]
 8014f88:	2b00      	cmp	r3, #0
 8014f8a:	d106      	bne.n	8014f9a <RegionEU868DlChannelReq+0x66>
    {
        status &= 0xFD;
 8014f8c:	220f      	movs	r2, #15
 8014f8e:	18bb      	adds	r3, r7, r2
 8014f90:	18ba      	adds	r2, r7, r2
 8014f92:	7812      	ldrb	r2, [r2, #0]
 8014f94:	2102      	movs	r1, #2
 8014f96:	438a      	bics	r2, r1
 8014f98:	701a      	strb	r2, [r3, #0]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 8014f9a:	230f      	movs	r3, #15
 8014f9c:	18fb      	adds	r3, r7, r3
 8014f9e:	781b      	ldrb	r3, [r3, #0]
 8014fa0:	2b03      	cmp	r3, #3
 8014fa2:	d10c      	bne.n	8014fbe <RegionEU868DlChannelReq+0x8a>
    {
        NvmCtx.Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 8014fa4:	687b      	ldr	r3, [r7, #4]
 8014fa6:	781b      	ldrb	r3, [r3, #0]
 8014fa8:	0018      	movs	r0, r3
 8014faa:	687b      	ldr	r3, [r7, #4]
 8014fac:	685a      	ldr	r2, [r3, #4]
 8014fae:	4907      	ldr	r1, [pc, #28]	; (8014fcc <RegionEU868DlChannelReq+0x98>)
 8014fb0:	0003      	movs	r3, r0
 8014fb2:	005b      	lsls	r3, r3, #1
 8014fb4:	181b      	adds	r3, r3, r0
 8014fb6:	009b      	lsls	r3, r3, #2
 8014fb8:	18cb      	adds	r3, r1, r3
 8014fba:	3304      	adds	r3, #4
 8014fbc:	601a      	str	r2, [r3, #0]
    }

    return status;
 8014fbe:	230f      	movs	r3, #15
 8014fc0:	18fb      	adds	r3, r7, r3
 8014fc2:	781b      	ldrb	r3, [r3, #0]
}
 8014fc4:	0018      	movs	r0, r3
 8014fc6:	46bd      	mov	sp, r7
 8014fc8:	b004      	add	sp, #16
 8014fca:	bd80      	pop	{r7, pc}
 8014fcc:	20000f3c 	.word	0x20000f3c

08014fd0 <RegionEU868AlternateDr>:

int8_t RegionEU868AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 8014fd0:	b580      	push	{r7, lr}
 8014fd2:	b082      	sub	sp, #8
 8014fd4:	af00      	add	r7, sp, #0
 8014fd6:	0002      	movs	r2, r0
 8014fd8:	1dfb      	adds	r3, r7, #7
 8014fda:	701a      	strb	r2, [r3, #0]
 8014fdc:	1dbb      	adds	r3, r7, #6
 8014fde:	1c0a      	adds	r2, r1, #0
 8014fe0:	701a      	strb	r2, [r3, #0]
    return currentDr;
 8014fe2:	1dfb      	adds	r3, r7, #7
 8014fe4:	781b      	ldrb	r3, [r3, #0]
 8014fe6:	b25b      	sxtb	r3, r3
}
 8014fe8:	0018      	movs	r0, r3
 8014fea:	46bd      	mov	sp, r7
 8014fec:	b002      	add	sp, #8
 8014fee:	bd80      	pop	{r7, pc}

08014ff0 <RegionEU868CalcBackOff>:

void RegionEU868CalcBackOff( CalcBackOffParams_t* calcBackOff )
{
 8014ff0:	b580      	push	{r7, lr}
 8014ff2:	b088      	sub	sp, #32
 8014ff4:	af00      	add	r7, sp, #0
 8014ff6:	6078      	str	r0, [r7, #4]
    RegionCommonCalcBackOffParams_t calcBackOffParams;

    calcBackOffParams.Channels = NvmCtx.Channels;
 8014ff8:	210c      	movs	r1, #12
 8014ffa:	187b      	adds	r3, r7, r1
 8014ffc:	4a12      	ldr	r2, [pc, #72]	; (8015048 <RegionEU868CalcBackOff+0x58>)
 8014ffe:	601a      	str	r2, [r3, #0]
    calcBackOffParams.Bands = NvmCtx.Bands;
 8015000:	187b      	adds	r3, r7, r1
 8015002:	4a12      	ldr	r2, [pc, #72]	; (801504c <RegionEU868CalcBackOff+0x5c>)
 8015004:	605a      	str	r2, [r3, #4]
    calcBackOffParams.LastTxIsJoinRequest = calcBackOff->LastTxIsJoinRequest;
 8015006:	687b      	ldr	r3, [r7, #4]
 8015008:	785a      	ldrb	r2, [r3, #1]
 801500a:	187b      	adds	r3, r7, r1
 801500c:	721a      	strb	r2, [r3, #8]
    calcBackOffParams.Joined = calcBackOff->Joined;
 801500e:	687b      	ldr	r3, [r7, #4]
 8015010:	781a      	ldrb	r2, [r3, #0]
 8015012:	187b      	adds	r3, r7, r1
 8015014:	725a      	strb	r2, [r3, #9]
    calcBackOffParams.DutyCycleEnabled = calcBackOff->DutyCycleEnabled;
 8015016:	687b      	ldr	r3, [r7, #4]
 8015018:	789a      	ldrb	r2, [r3, #2]
 801501a:	187b      	adds	r3, r7, r1
 801501c:	729a      	strb	r2, [r3, #10]
    calcBackOffParams.Channel = calcBackOff->Channel;
 801501e:	687b      	ldr	r3, [r7, #4]
 8015020:	78da      	ldrb	r2, [r3, #3]
 8015022:	187b      	adds	r3, r7, r1
 8015024:	72da      	strb	r2, [r3, #11]
    calcBackOffParams.ElapsedTime = calcBackOff->ElapsedTime;
 8015026:	687b      	ldr	r3, [r7, #4]
 8015028:	685a      	ldr	r2, [r3, #4]
 801502a:	187b      	adds	r3, r7, r1
 801502c:	60da      	str	r2, [r3, #12]
    calcBackOffParams.TxTimeOnAir = calcBackOff->TxTimeOnAir;
 801502e:	687b      	ldr	r3, [r7, #4]
 8015030:	689a      	ldr	r2, [r3, #8]
 8015032:	187b      	adds	r3, r7, r1
 8015034:	611a      	str	r2, [r3, #16]

    RegionCommonCalcBackOff( &calcBackOffParams );
 8015036:	187b      	adds	r3, r7, r1
 8015038:	0018      	movs	r0, r3
 801503a:	f7fe fe2d 	bl	8013c98 <RegionCommonCalcBackOff>
}
 801503e:	46c0      	nop			; (mov r8, r8)
 8015040:	46bd      	mov	sp, r7
 8015042:	b008      	add	sp, #32
 8015044:	bd80      	pop	{r7, pc}
 8015046:	46c0      	nop			; (mov r8, r8)
 8015048:	20000f3c 	.word	0x20000f3c
 801504c:	20000ffc 	.word	0x20000ffc

08015050 <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8015050:	b5b0      	push	{r4, r5, r7, lr}
 8015052:	b090      	sub	sp, #64	; 0x40
 8015054:	af04      	add	r7, sp, #16
 8015056:	60f8      	str	r0, [r7, #12]
 8015058:	60b9      	str	r1, [r7, #8]
 801505a:	607a      	str	r2, [r7, #4]
 801505c:	603b      	str	r3, [r7, #0]
    uint8_t nbEnabledChannels = 0;
 801505e:	232f      	movs	r3, #47	; 0x2f
 8015060:	18fb      	adds	r3, r7, r3
 8015062:	2200      	movs	r2, #0
 8015064:	701a      	strb	r2, [r3, #0]
    uint8_t delayTx = 0;
 8015066:	2327      	movs	r3, #39	; 0x27
 8015068:	18fb      	adds	r3, r7, r3
 801506a:	2200      	movs	r2, #0
 801506c:	701a      	strb	r2, [r3, #0]
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 801506e:	2314      	movs	r3, #20
 8015070:	18fb      	adds	r3, r7, r3
 8015072:	0018      	movs	r0, r3
 8015074:	2310      	movs	r3, #16
 8015076:	001a      	movs	r2, r3
 8015078:	2100      	movs	r1, #0
 801507a:	f00a f861 	bl	801f140 <memset>
    TimerTime_t nextTxDelay = 0;
 801507e:	2300      	movs	r3, #0
 8015080:	62bb      	str	r3, [r7, #40]	; 0x28

    if( RegionCommonCountChannels( NvmCtx.ChannelsMask, 0, 1 ) == 0 )
 8015082:	4b44      	ldr	r3, [pc, #272]	; (8015194 <RegionEU868NextChannel+0x144>)
 8015084:	2201      	movs	r2, #1
 8015086:	2100      	movs	r1, #0
 8015088:	0018      	movs	r0, r3
 801508a:	f7fe fa85 	bl	8013598 <RegionCommonCountChannels>
 801508e:	1e03      	subs	r3, r0, #0
 8015090:	d10a      	bne.n	80150a8 <RegionEU868NextChannel+0x58>
    { // Reactivate default channels
        NvmCtx.ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8015092:	4a41      	ldr	r2, [pc, #260]	; (8015198 <RegionEU868NextChannel+0x148>)
 8015094:	2388      	movs	r3, #136	; 0x88
 8015096:	005b      	lsls	r3, r3, #1
 8015098:	5ad3      	ldrh	r3, [r2, r3]
 801509a:	2207      	movs	r2, #7
 801509c:	4313      	orrs	r3, r2
 801509e:	b299      	uxth	r1, r3
 80150a0:	4a3d      	ldr	r2, [pc, #244]	; (8015198 <RegionEU868NextChannel+0x148>)
 80150a2:	2388      	movs	r3, #136	; 0x88
 80150a4:	005b      	lsls	r3, r3, #1
 80150a6:	52d1      	strh	r1, [r2, r3]
    }

    if( nextChanParams->AggrTimeOff <= TimerGetElapsedTime( nextChanParams->LastAggrTx ) )
 80150a8:	68fb      	ldr	r3, [r7, #12]
 80150aa:	681c      	ldr	r4, [r3, #0]
 80150ac:	68fb      	ldr	r3, [r7, #12]
 80150ae:	685b      	ldr	r3, [r3, #4]
 80150b0:	0018      	movs	r0, r3
 80150b2:	f000 fc50 	bl	8015956 <TimerGetElapsedTime>
 80150b6:	0003      	movs	r3, r0
 80150b8:	429c      	cmp	r4, r3
 80150ba:	d824      	bhi.n	8015106 <RegionEU868NextChannel+0xb6>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 80150bc:	683b      	ldr	r3, [r7, #0]
 80150be:	2200      	movs	r2, #0
 80150c0:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        nextTxDelay = RegionCommonUpdateBandTimeOff( nextChanParams->Joined, nextChanParams->DutyCycleEnabled, NvmCtx.Bands, EU868_MAX_NB_BANDS );
 80150c2:	68fb      	ldr	r3, [r7, #12]
 80150c4:	7a58      	ldrb	r0, [r3, #9]
 80150c6:	68fb      	ldr	r3, [r7, #12]
 80150c8:	7a99      	ldrb	r1, [r3, #10]
 80150ca:	4a34      	ldr	r2, [pc, #208]	; (801519c <RegionEU868NextChannel+0x14c>)
 80150cc:	2305      	movs	r3, #5
 80150ce:	f7fe faee 	bl	80136ae <RegionCommonUpdateBandTimeOff>
 80150d2:	0003      	movs	r3, r0
 80150d4:	62bb      	str	r3, [r7, #40]	; 0x28

        // Search how many channels are enabled
        nbEnabledChannels = CountNbOfEnabledChannels( nextChanParams->Joined, nextChanParams->Datarate,
 80150d6:	68fb      	ldr	r3, [r7, #12]
 80150d8:	7a58      	ldrb	r0, [r3, #9]
 80150da:	68fb      	ldr	r3, [r7, #12]
 80150dc:	7a1b      	ldrb	r3, [r3, #8]
 80150de:	b25b      	sxtb	r3, r3
 80150e0:	b2d9      	uxtb	r1, r3
 80150e2:	232f      	movs	r3, #47	; 0x2f
 80150e4:	18fc      	adds	r4, r7, r3
 80150e6:	4d2c      	ldr	r5, [pc, #176]	; (8015198 <RegionEU868NextChannel+0x148>)
 80150e8:	4a2a      	ldr	r2, [pc, #168]	; (8015194 <RegionEU868NextChannel+0x144>)
 80150ea:	2327      	movs	r3, #39	; 0x27
 80150ec:	18fb      	adds	r3, r7, r3
 80150ee:	9302      	str	r3, [sp, #8]
 80150f0:	2314      	movs	r3, #20
 80150f2:	18fb      	adds	r3, r7, r3
 80150f4:	9301      	str	r3, [sp, #4]
 80150f6:	4b29      	ldr	r3, [pc, #164]	; (801519c <RegionEU868NextChannel+0x14c>)
 80150f8:	9300      	str	r3, [sp, #0]
 80150fa:	002b      	movs	r3, r5
 80150fc:	f7fe ff40 	bl	8013f80 <CountNbOfEnabledChannels>
 8015100:	0003      	movs	r3, r0
 8015102:	7023      	strb	r3, [r4, #0]
 8015104:	e010      	b.n	8015128 <RegionEU868NextChannel+0xd8>
                                                      NvmCtx.ChannelsMask, NvmCtx.Channels,
                                                      NvmCtx.Bands, enabledChannels, &delayTx );
    }
    else
    {
        delayTx++;
 8015106:	2127      	movs	r1, #39	; 0x27
 8015108:	187b      	adds	r3, r7, r1
 801510a:	781b      	ldrb	r3, [r3, #0]
 801510c:	3301      	adds	r3, #1
 801510e:	b2da      	uxtb	r2, r3
 8015110:	187b      	adds	r3, r7, r1
 8015112:	701a      	strb	r2, [r3, #0]
        nextTxDelay = nextChanParams->AggrTimeOff - TimerGetElapsedTime( nextChanParams->LastAggrTx );
 8015114:	68fb      	ldr	r3, [r7, #12]
 8015116:	681c      	ldr	r4, [r3, #0]
 8015118:	68fb      	ldr	r3, [r7, #12]
 801511a:	685b      	ldr	r3, [r3, #4]
 801511c:	0018      	movs	r0, r3
 801511e:	f000 fc1a 	bl	8015956 <TimerGetElapsedTime>
 8015122:	0003      	movs	r3, r0
 8015124:	1ae3      	subs	r3, r4, r3
 8015126:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if( nbEnabledChannels > 0 )
 8015128:	232f      	movs	r3, #47	; 0x2f
 801512a:	18fb      	adds	r3, r7, r3
 801512c:	781b      	ldrb	r3, [r3, #0]
 801512e:	2b00      	cmp	r3, #0
 8015130:	d012      	beq.n	8015158 <RegionEU868NextChannel+0x108>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8015132:	232f      	movs	r3, #47	; 0x2f
 8015134:	18fb      	adds	r3, r7, r3
 8015136:	781b      	ldrb	r3, [r3, #0]
 8015138:	3b01      	subs	r3, #1
 801513a:	0019      	movs	r1, r3
 801513c:	2000      	movs	r0, #0
 801513e:	f000 fc41 	bl	80159c4 <randr>
 8015142:	0002      	movs	r2, r0
 8015144:	2314      	movs	r3, #20
 8015146:	18fb      	adds	r3, r7, r3
 8015148:	5c9a      	ldrb	r2, [r3, r2]
 801514a:	68bb      	ldr	r3, [r7, #8]
 801514c:	701a      	strb	r2, [r3, #0]

        *time = 0;
 801514e:	687b      	ldr	r3, [r7, #4]
 8015150:	2200      	movs	r2, #0
 8015152:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 8015154:	2300      	movs	r3, #0
 8015156:	e018      	b.n	801518a <RegionEU868NextChannel+0x13a>
    }
    else
    {
        if( delayTx > 0 )
 8015158:	2327      	movs	r3, #39	; 0x27
 801515a:	18fb      	adds	r3, r7, r3
 801515c:	781b      	ldrb	r3, [r3, #0]
 801515e:	2b00      	cmp	r3, #0
 8015160:	d004      	beq.n	801516c <RegionEU868NextChannel+0x11c>
        {
            // Delay transmission due to AggregatedTimeOff or to a band time off
            *time = nextTxDelay;
 8015162:	687b      	ldr	r3, [r7, #4]
 8015164:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015166:	601a      	str	r2, [r3, #0]
            return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 8015168:	230b      	movs	r3, #11
 801516a:	e00e      	b.n	801518a <RegionEU868NextChannel+0x13a>
        }
        // Datarate not supported by any channel, restore defaults
        NvmCtx.ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 801516c:	4a0a      	ldr	r2, [pc, #40]	; (8015198 <RegionEU868NextChannel+0x148>)
 801516e:	2388      	movs	r3, #136	; 0x88
 8015170:	005b      	lsls	r3, r3, #1
 8015172:	5ad3      	ldrh	r3, [r2, r3]
 8015174:	2207      	movs	r2, #7
 8015176:	4313      	orrs	r3, r2
 8015178:	b299      	uxth	r1, r3
 801517a:	4a07      	ldr	r2, [pc, #28]	; (8015198 <RegionEU868NextChannel+0x148>)
 801517c:	2388      	movs	r3, #136	; 0x88
 801517e:	005b      	lsls	r3, r3, #1
 8015180:	52d1      	strh	r1, [r2, r3]
        *time = 0;
 8015182:	687b      	ldr	r3, [r7, #4]
 8015184:	2200      	movs	r2, #0
 8015186:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8015188:	230c      	movs	r3, #12
    }
}
 801518a:	0018      	movs	r0, r3
 801518c:	46bd      	mov	sp, r7
 801518e:	b00c      	add	sp, #48	; 0x30
 8015190:	bdb0      	pop	{r4, r5, r7, pc}
 8015192:	46c0      	nop			; (mov r8, r8)
 8015194:	2000104c 	.word	0x2000104c
 8015198:	20000f3c 	.word	0x20000f3c
 801519c:	20000ffc 	.word	0x20000ffc

080151a0 <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 80151a0:	b590      	push	{r4, r7, lr}
 80151a2:	b085      	sub	sp, #20
 80151a4:	af00      	add	r7, sp, #0
 80151a6:	6078      	str	r0, [r7, #4]
    uint8_t band = 0;
 80151a8:	230c      	movs	r3, #12
 80151aa:	18fb      	adds	r3, r7, r3
 80151ac:	2200      	movs	r2, #0
 80151ae:	701a      	strb	r2, [r3, #0]
    bool drInvalid = false;
 80151b0:	230f      	movs	r3, #15
 80151b2:	18fb      	adds	r3, r7, r3
 80151b4:	2200      	movs	r2, #0
 80151b6:	701a      	strb	r2, [r3, #0]
    bool freqInvalid = false;
 80151b8:	230e      	movs	r3, #14
 80151ba:	18fb      	adds	r3, r7, r3
 80151bc:	2200      	movs	r2, #0
 80151be:	701a      	strb	r2, [r3, #0]
    uint8_t id = channelAdd->ChannelId;
 80151c0:	210d      	movs	r1, #13
 80151c2:	187b      	adds	r3, r7, r1
 80151c4:	687a      	ldr	r2, [r7, #4]
 80151c6:	7912      	ldrb	r2, [r2, #4]
 80151c8:	701a      	strb	r2, [r3, #0]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 80151ca:	187b      	adds	r3, r7, r1
 80151cc:	781b      	ldrb	r3, [r3, #0]
 80151ce:	2b02      	cmp	r3, #2
 80151d0:	d801      	bhi.n	80151d6 <RegionEU868ChannelAdd+0x36>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 80151d2:	2306      	movs	r3, #6
 80151d4:	e0a2      	b.n	801531c <RegionEU868ChannelAdd+0x17c>
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 80151d6:	230d      	movs	r3, #13
 80151d8:	18fb      	adds	r3, r7, r3
 80151da:	781b      	ldrb	r3, [r3, #0]
 80151dc:	2b0f      	cmp	r3, #15
 80151de:	d901      	bls.n	80151e4 <RegionEU868ChannelAdd+0x44>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80151e0:	2303      	movs	r3, #3
 80151e2:	e09b      	b.n	801531c <RegionEU868ChannelAdd+0x17c>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 80151e4:	687b      	ldr	r3, [r7, #4]
 80151e6:	681b      	ldr	r3, [r3, #0]
 80151e8:	7a1b      	ldrb	r3, [r3, #8]
 80151ea:	011b      	lsls	r3, r3, #4
 80151ec:	b25b      	sxtb	r3, r3
 80151ee:	111b      	asrs	r3, r3, #4
 80151f0:	b25b      	sxtb	r3, r3
 80151f2:	2207      	movs	r2, #7
 80151f4:	2100      	movs	r1, #0
 80151f6:	0018      	movs	r0, r3
 80151f8:	f7fe f966 	bl	80134c8 <RegionCommonValueInRange>
 80151fc:	1e03      	subs	r3, r0, #0
 80151fe:	d103      	bne.n	8015208 <RegionEU868ChannelAdd+0x68>
    {
        drInvalid = true;
 8015200:	230f      	movs	r3, #15
 8015202:	18fb      	adds	r3, r7, r3
 8015204:	2201      	movs	r2, #1
 8015206:	701a      	strb	r2, [r3, #0]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8015208:	687b      	ldr	r3, [r7, #4]
 801520a:	681b      	ldr	r3, [r3, #0]
 801520c:	7a1b      	ldrb	r3, [r3, #8]
 801520e:	b25b      	sxtb	r3, r3
 8015210:	111b      	asrs	r3, r3, #4
 8015212:	b25b      	sxtb	r3, r3
 8015214:	2207      	movs	r2, #7
 8015216:	2100      	movs	r1, #0
 8015218:	0018      	movs	r0, r3
 801521a:	f7fe f955 	bl	80134c8 <RegionCommonValueInRange>
 801521e:	1e03      	subs	r3, r0, #0
 8015220:	d103      	bne.n	801522a <RegionEU868ChannelAdd+0x8a>
    {
        drInvalid = true;
 8015222:	230f      	movs	r3, #15
 8015224:	18fb      	adds	r3, r7, r3
 8015226:	2201      	movs	r2, #1
 8015228:	701a      	strb	r2, [r3, #0]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 801522a:	687b      	ldr	r3, [r7, #4]
 801522c:	681b      	ldr	r3, [r3, #0]
 801522e:	7a1b      	ldrb	r3, [r3, #8]
 8015230:	011b      	lsls	r3, r3, #4
 8015232:	b25b      	sxtb	r3, r3
 8015234:	111b      	asrs	r3, r3, #4
 8015236:	b25a      	sxtb	r2, r3
 8015238:	687b      	ldr	r3, [r7, #4]
 801523a:	681b      	ldr	r3, [r3, #0]
 801523c:	7a1b      	ldrb	r3, [r3, #8]
 801523e:	b25b      	sxtb	r3, r3
 8015240:	111b      	asrs	r3, r3, #4
 8015242:	b25b      	sxtb	r3, r3
 8015244:	429a      	cmp	r2, r3
 8015246:	dd03      	ble.n	8015250 <RegionEU868ChannelAdd+0xb0>
    {
        drInvalid = true;
 8015248:	230f      	movs	r3, #15
 801524a:	18fb      	adds	r3, r7, r3
 801524c:	2201      	movs	r2, #1
 801524e:	701a      	strb	r2, [r3, #0]
    }

    // Check frequency
    if( freqInvalid == false )
 8015250:	230e      	movs	r3, #14
 8015252:	18fb      	adds	r3, r7, r3
 8015254:	781b      	ldrb	r3, [r3, #0]
 8015256:	2201      	movs	r2, #1
 8015258:	4053      	eors	r3, r2
 801525a:	b2db      	uxtb	r3, r3
 801525c:	2b00      	cmp	r3, #0
 801525e:	d013      	beq.n	8015288 <RegionEU868ChannelAdd+0xe8>
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 8015260:	687b      	ldr	r3, [r7, #4]
 8015262:	681b      	ldr	r3, [r3, #0]
 8015264:	681b      	ldr	r3, [r3, #0]
 8015266:	220c      	movs	r2, #12
 8015268:	18ba      	adds	r2, r7, r2
 801526a:	0011      	movs	r1, r2
 801526c:	0018      	movs	r0, r3
 801526e:	f7fe fe0f 	bl	8013e90 <VerifyRfFreq>
 8015272:	0003      	movs	r3, r0
 8015274:	001a      	movs	r2, r3
 8015276:	2301      	movs	r3, #1
 8015278:	4053      	eors	r3, r2
 801527a:	b2db      	uxtb	r3, r3
 801527c:	2b00      	cmp	r3, #0
 801527e:	d003      	beq.n	8015288 <RegionEU868ChannelAdd+0xe8>
        {
            freqInvalid = true;
 8015280:	230e      	movs	r3, #14
 8015282:	18fb      	adds	r3, r7, r3
 8015284:	2201      	movs	r2, #1
 8015286:	701a      	strb	r2, [r3, #0]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 8015288:	230f      	movs	r3, #15
 801528a:	18fb      	adds	r3, r7, r3
 801528c:	781b      	ldrb	r3, [r3, #0]
 801528e:	2b00      	cmp	r3, #0
 8015290:	d006      	beq.n	80152a0 <RegionEU868ChannelAdd+0x100>
 8015292:	230e      	movs	r3, #14
 8015294:	18fb      	adds	r3, r7, r3
 8015296:	781b      	ldrb	r3, [r3, #0]
 8015298:	2b00      	cmp	r3, #0
 801529a:	d001      	beq.n	80152a0 <RegionEU868ChannelAdd+0x100>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 801529c:	2306      	movs	r3, #6
 801529e:	e03d      	b.n	801531c <RegionEU868ChannelAdd+0x17c>
    }
    if( drInvalid == true )
 80152a0:	230f      	movs	r3, #15
 80152a2:	18fb      	adds	r3, r7, r3
 80152a4:	781b      	ldrb	r3, [r3, #0]
 80152a6:	2b00      	cmp	r3, #0
 80152a8:	d001      	beq.n	80152ae <RegionEU868ChannelAdd+0x10e>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 80152aa:	2305      	movs	r3, #5
 80152ac:	e036      	b.n	801531c <RegionEU868ChannelAdd+0x17c>
    }
    if( freqInvalid == true )
 80152ae:	230e      	movs	r3, #14
 80152b0:	18fb      	adds	r3, r7, r3
 80152b2:	781b      	ldrb	r3, [r3, #0]
 80152b4:	2b00      	cmp	r3, #0
 80152b6:	d001      	beq.n	80152bc <RegionEU868ChannelAdd+0x11c>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 80152b8:	2304      	movs	r3, #4
 80152ba:	e02f      	b.n	801531c <RegionEU868ChannelAdd+0x17c>
    }

    memcpy1( ( uint8_t* ) &(NvmCtx.Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( NvmCtx.Channels[id] ) );
 80152bc:	240d      	movs	r4, #13
 80152be:	193b      	adds	r3, r7, r4
 80152c0:	781a      	ldrb	r2, [r3, #0]
 80152c2:	0013      	movs	r3, r2
 80152c4:	005b      	lsls	r3, r3, #1
 80152c6:	189b      	adds	r3, r3, r2
 80152c8:	009b      	lsls	r3, r3, #2
 80152ca:	4a16      	ldr	r2, [pc, #88]	; (8015324 <RegionEU868ChannelAdd+0x184>)
 80152cc:	1898      	adds	r0, r3, r2
 80152ce:	687b      	ldr	r3, [r7, #4]
 80152d0:	681b      	ldr	r3, [r3, #0]
 80152d2:	220c      	movs	r2, #12
 80152d4:	0019      	movs	r1, r3
 80152d6:	f000 fb8b 	bl	80159f0 <memcpy1>
    NvmCtx.Channels[id].Band = band;
 80152da:	193b      	adds	r3, r7, r4
 80152dc:	781a      	ldrb	r2, [r3, #0]
 80152de:	230c      	movs	r3, #12
 80152e0:	18fb      	adds	r3, r7, r3
 80152e2:	7818      	ldrb	r0, [r3, #0]
 80152e4:	490f      	ldr	r1, [pc, #60]	; (8015324 <RegionEU868ChannelAdd+0x184>)
 80152e6:	0013      	movs	r3, r2
 80152e8:	005b      	lsls	r3, r3, #1
 80152ea:	189b      	adds	r3, r3, r2
 80152ec:	009b      	lsls	r3, r3, #2
 80152ee:	18cb      	adds	r3, r1, r3
 80152f0:	3309      	adds	r3, #9
 80152f2:	1c02      	adds	r2, r0, #0
 80152f4:	701a      	strb	r2, [r3, #0]
    NvmCtx.ChannelsMask[0] |= ( 1 << id );
 80152f6:	4a0b      	ldr	r2, [pc, #44]	; (8015324 <RegionEU868ChannelAdd+0x184>)
 80152f8:	2388      	movs	r3, #136	; 0x88
 80152fa:	005b      	lsls	r3, r3, #1
 80152fc:	5ad3      	ldrh	r3, [r2, r3]
 80152fe:	b21a      	sxth	r2, r3
 8015300:	193b      	adds	r3, r7, r4
 8015302:	781b      	ldrb	r3, [r3, #0]
 8015304:	2101      	movs	r1, #1
 8015306:	4099      	lsls	r1, r3
 8015308:	000b      	movs	r3, r1
 801530a:	b21b      	sxth	r3, r3
 801530c:	4313      	orrs	r3, r2
 801530e:	b21b      	sxth	r3, r3
 8015310:	b299      	uxth	r1, r3
 8015312:	4a04      	ldr	r2, [pc, #16]	; (8015324 <RegionEU868ChannelAdd+0x184>)
 8015314:	2388      	movs	r3, #136	; 0x88
 8015316:	005b      	lsls	r3, r3, #1
 8015318:	52d1      	strh	r1, [r2, r3]
    return LORAMAC_STATUS_OK;
 801531a:	2300      	movs	r3, #0
}
 801531c:	0018      	movs	r0, r3
 801531e:	46bd      	mov	sp, r7
 8015320:	b005      	add	sp, #20
 8015322:	bd90      	pop	{r4, r7, pc}
 8015324:	20000f3c 	.word	0x20000f3c

08015328 <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 8015328:	b590      	push	{r4, r7, lr}
 801532a:	b085      	sub	sp, #20
 801532c:	af00      	add	r7, sp, #0
 801532e:	6078      	str	r0, [r7, #4]
    uint8_t id = channelRemove->ChannelId;
 8015330:	210f      	movs	r1, #15
 8015332:	187b      	adds	r3, r7, r1
 8015334:	687a      	ldr	r2, [r7, #4]
 8015336:	7812      	ldrb	r2, [r2, #0]
 8015338:	701a      	strb	r2, [r3, #0]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 801533a:	187b      	adds	r3, r7, r1
 801533c:	781b      	ldrb	r3, [r3, #0]
 801533e:	2b02      	cmp	r3, #2
 8015340:	d801      	bhi.n	8015346 <RegionEU868ChannelsRemove+0x1e>
    {
        return false;
 8015342:	2300      	movs	r3, #0
 8015344:	e015      	b.n	8015372 <RegionEU868ChannelsRemove+0x4a>
    }

    // Remove the channel from the list of channels
    NvmCtx.Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 8015346:	240f      	movs	r4, #15
 8015348:	193b      	adds	r3, r7, r4
 801534a:	781a      	ldrb	r2, [r3, #0]
 801534c:	490b      	ldr	r1, [pc, #44]	; (801537c <RegionEU868ChannelsRemove+0x54>)
 801534e:	0013      	movs	r3, r2
 8015350:	005b      	lsls	r3, r3, #1
 8015352:	189b      	adds	r3, r3, r2
 8015354:	009b      	lsls	r3, r3, #2
 8015356:	18cb      	adds	r3, r1, r3
 8015358:	220c      	movs	r2, #12
 801535a:	2100      	movs	r1, #0
 801535c:	0018      	movs	r0, r3
 801535e:	f009 feef 	bl	801f140 <memset>

    return RegionCommonChanDisable( NvmCtx.ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 8015362:	193b      	adds	r3, r7, r4
 8015364:	7819      	ldrb	r1, [r3, #0]
 8015366:	4b06      	ldr	r3, [pc, #24]	; (8015380 <RegionEU868ChannelsRemove+0x58>)
 8015368:	2210      	movs	r2, #16
 801536a:	0018      	movs	r0, r3
 801536c:	f7fe f8d2 	bl	8013514 <RegionCommonChanDisable>
 8015370:	0003      	movs	r3, r0
}
 8015372:	0018      	movs	r0, r3
 8015374:	46bd      	mov	sp, r7
 8015376:	b005      	add	sp, #20
 8015378:	bd90      	pop	{r4, r7, pc}
 801537a:	46c0      	nop			; (mov r8, r8)
 801537c:	20000f3c 	.word	0x20000f3c
 8015380:	2000104c 	.word	0x2000104c

08015384 <RegionEU868SetContinuousWave>:

void RegionEU868SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 8015384:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015386:	b085      	sub	sp, #20
 8015388:	af00      	add	r7, sp, #0
 801538a:	6078      	str	r0, [r7, #4]
    int8_t txPowerLimited = LimitTxPower( continuousWave->TxPower, NvmCtx.Bands[NvmCtx.Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, NvmCtx.ChannelsMask );
 801538c:	687b      	ldr	r3, [r7, #4]
 801538e:	2002      	movs	r0, #2
 8015390:	5618      	ldrsb	r0, [r3, r0]
 8015392:	687b      	ldr	r3, [r7, #4]
 8015394:	781b      	ldrb	r3, [r3, #0]
 8015396:	0019      	movs	r1, r3
 8015398:	4a21      	ldr	r2, [pc, #132]	; (8015420 <RegionEU868SetContinuousWave+0x9c>)
 801539a:	000b      	movs	r3, r1
 801539c:	005b      	lsls	r3, r3, #1
 801539e:	185b      	adds	r3, r3, r1
 80153a0:	009b      	lsls	r3, r3, #2
 80153a2:	18d3      	adds	r3, r2, r3
 80153a4:	3309      	adds	r3, #9
 80153a6:	781b      	ldrb	r3, [r3, #0]
 80153a8:	4a1d      	ldr	r2, [pc, #116]	; (8015420 <RegionEU868SetContinuousWave+0x9c>)
 80153aa:	330c      	adds	r3, #12
 80153ac:	011b      	lsls	r3, r3, #4
 80153ae:	18d3      	adds	r3, r2, r3
 80153b0:	3302      	adds	r3, #2
 80153b2:	2100      	movs	r1, #0
 80153b4:	5659      	ldrsb	r1, [r3, r1]
 80153b6:	687b      	ldr	r3, [r7, #4]
 80153b8:	2201      	movs	r2, #1
 80153ba:	569a      	ldrsb	r2, [r3, r2]
 80153bc:	260f      	movs	r6, #15
 80153be:	19bc      	adds	r4, r7, r6
 80153c0:	4b18      	ldr	r3, [pc, #96]	; (8015424 <RegionEU868SetContinuousWave+0xa0>)
 80153c2:	f7fe fd3d 	bl	8013e40 <LimitTxPower>
 80153c6:	0003      	movs	r3, r0
 80153c8:	7023      	strb	r3, [r4, #0]
    int8_t phyTxPower = 0;
 80153ca:	200e      	movs	r0, #14
 80153cc:	183b      	adds	r3, r7, r0
 80153ce:	2200      	movs	r2, #0
 80153d0:	701a      	strb	r2, [r3, #0]
    uint32_t frequency = NvmCtx.Channels[continuousWave->Channel].Frequency;
 80153d2:	687b      	ldr	r3, [r7, #4]
 80153d4:	781b      	ldrb	r3, [r3, #0]
 80153d6:	0019      	movs	r1, r3
 80153d8:	4a11      	ldr	r2, [pc, #68]	; (8015420 <RegionEU868SetContinuousWave+0x9c>)
 80153da:	000b      	movs	r3, r1
 80153dc:	005b      	lsls	r3, r3, #1
 80153de:	185b      	adds	r3, r3, r1
 80153e0:	009b      	lsls	r3, r3, #2
 80153e2:	589b      	ldr	r3, [r3, r2]
 80153e4:	60bb      	str	r3, [r7, #8]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 80153e6:	687b      	ldr	r3, [r7, #4]
 80153e8:	6859      	ldr	r1, [r3, #4]
 80153ea:	687b      	ldr	r3, [r7, #4]
 80153ec:	689a      	ldr	r2, [r3, #8]
 80153ee:	0005      	movs	r5, r0
 80153f0:	183c      	adds	r4, r7, r0
 80153f2:	19bb      	adds	r3, r7, r6
 80153f4:	781b      	ldrb	r3, [r3, #0]
 80153f6:	b25b      	sxtb	r3, r3
 80153f8:	0018      	movs	r0, r3
 80153fa:	f7fe fc15 	bl	8013c28 <RegionCommonComputeTxPower>
 80153fe:	0003      	movs	r3, r0
 8015400:	7023      	strb	r3, [r4, #0]

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 8015402:	4b09      	ldr	r3, [pc, #36]	; (8015428 <RegionEU868SetContinuousWave+0xa4>)
 8015404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015406:	687a      	ldr	r2, [r7, #4]
 8015408:	8994      	ldrh	r4, [r2, #12]
 801540a:	0028      	movs	r0, r5
 801540c:	183a      	adds	r2, r7, r0
 801540e:	2100      	movs	r1, #0
 8015410:	5651      	ldrsb	r1, [r2, r1]
 8015412:	68b8      	ldr	r0, [r7, #8]
 8015414:	0022      	movs	r2, r4
 8015416:	4798      	blx	r3
}
 8015418:	46c0      	nop			; (mov r8, r8)
 801541a:	46bd      	mov	sp, r7
 801541c:	b005      	add	sp, #20
 801541e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015420:	20000f3c 	.word	0x20000f3c
 8015424:	2000104c 	.word	0x2000104c
 8015428:	08021b54 	.word	0x08021b54

0801542c <RegionEU868ApplyDrOffset>:

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 801542c:	b590      	push	{r4, r7, lr}
 801542e:	b085      	sub	sp, #20
 8015430:	af00      	add	r7, sp, #0
 8015432:	0004      	movs	r4, r0
 8015434:	0008      	movs	r0, r1
 8015436:	0011      	movs	r1, r2
 8015438:	1dfb      	adds	r3, r7, #7
 801543a:	1c22      	adds	r2, r4, #0
 801543c:	701a      	strb	r2, [r3, #0]
 801543e:	1dbb      	adds	r3, r7, #6
 8015440:	1c02      	adds	r2, r0, #0
 8015442:	701a      	strb	r2, [r3, #0]
 8015444:	1d7b      	adds	r3, r7, #5
 8015446:	1c0a      	adds	r2, r1, #0
 8015448:	701a      	strb	r2, [r3, #0]
    int8_t datarate = dr - drOffset;
 801544a:	1dbb      	adds	r3, r7, #6
 801544c:	781a      	ldrb	r2, [r3, #0]
 801544e:	1d7b      	adds	r3, r7, #5
 8015450:	781b      	ldrb	r3, [r3, #0]
 8015452:	1ad3      	subs	r3, r2, r3
 8015454:	b2da      	uxtb	r2, r3
 8015456:	210f      	movs	r1, #15
 8015458:	187b      	adds	r3, r7, r1
 801545a:	701a      	strb	r2, [r3, #0]

    if( datarate < 0 )
 801545c:	187b      	adds	r3, r7, r1
 801545e:	781b      	ldrb	r3, [r3, #0]
 8015460:	2b7f      	cmp	r3, #127	; 0x7f
 8015462:	d903      	bls.n	801546c <RegionEU868ApplyDrOffset+0x40>
    {
        datarate = DR_0;
 8015464:	230f      	movs	r3, #15
 8015466:	18fb      	adds	r3, r7, r3
 8015468:	2200      	movs	r2, #0
 801546a:	701a      	strb	r2, [r3, #0]
    }
    return datarate;
 801546c:	230f      	movs	r3, #15
 801546e:	18fb      	adds	r3, r7, r3
 8015470:	781b      	ldrb	r3, [r3, #0]
}
 8015472:	0018      	movs	r0, r3
 8015474:	46bd      	mov	sp, r7
 8015476:	b005      	add	sp, #20
 8015478:	bd90      	pop	{r4, r7, pc}
	...

0801547c <SysTimeAdd>:
static void CalendarDiv60( uint32_t in, uint32_t* out, uint32_t* remainder );

const char *WeekDayString[]={ "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" };

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 801547c:	b082      	sub	sp, #8
 801547e:	b580      	push	{r7, lr}
 8015480:	b086      	sub	sp, #24
 8015482:	af00      	add	r7, sp, #0
 8015484:	60f8      	str	r0, [r7, #12]
 8015486:	1d38      	adds	r0, r7, #4
 8015488:	6001      	str	r1, [r0, #0]
 801548a:	6042      	str	r2, [r0, #4]
 801548c:	2204      	movs	r2, #4
 801548e:	2120      	movs	r1, #32
 8015490:	468c      	mov	ip, r1
 8015492:	44bc      	add	ip, r7
 8015494:	4462      	add	r2, ip
 8015496:	6013      	str	r3, [r2, #0]
    SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 8015498:	2110      	movs	r1, #16
 801549a:	187b      	adds	r3, r7, r1
 801549c:	2200      	movs	r2, #0
 801549e:	601a      	str	r2, [r3, #0]
 80154a0:	187b      	adds	r3, r7, r1
 80154a2:	2200      	movs	r2, #0
 80154a4:	809a      	strh	r2, [r3, #4]

    c.Seconds = a.Seconds + b.Seconds;
 80154a6:	1d3b      	adds	r3, r7, #4
 80154a8:	681a      	ldr	r2, [r3, #0]
 80154aa:	2304      	movs	r3, #4
 80154ac:	2020      	movs	r0, #32
 80154ae:	4684      	mov	ip, r0
 80154b0:	44bc      	add	ip, r7
 80154b2:	4463      	add	r3, ip
 80154b4:	681b      	ldr	r3, [r3, #0]
 80154b6:	18d2      	adds	r2, r2, r3
 80154b8:	187b      	adds	r3, r7, r1
 80154ba:	601a      	str	r2, [r3, #0]
    c.SubSeconds = a.SubSeconds + b.SubSeconds;
 80154bc:	1d3b      	adds	r3, r7, #4
 80154be:	2204      	movs	r2, #4
 80154c0:	5e9b      	ldrsh	r3, [r3, r2]
 80154c2:	b29a      	uxth	r2, r3
 80154c4:	2304      	movs	r3, #4
 80154c6:	2020      	movs	r0, #32
 80154c8:	4684      	mov	ip, r0
 80154ca:	44bc      	add	ip, r7
 80154cc:	4463      	add	r3, ip
 80154ce:	2004      	movs	r0, #4
 80154d0:	5e1b      	ldrsh	r3, [r3, r0]
 80154d2:	b29b      	uxth	r3, r3
 80154d4:	18d3      	adds	r3, r2, r3
 80154d6:	b29b      	uxth	r3, r3
 80154d8:	b21a      	sxth	r2, r3
 80154da:	187b      	adds	r3, r7, r1
 80154dc:	809a      	strh	r2, [r3, #4]
    if( c.SubSeconds >= 1000 )
 80154de:	187b      	adds	r3, r7, r1
 80154e0:	2204      	movs	r2, #4
 80154e2:	5e9b      	ldrsh	r3, [r3, r2]
 80154e4:	4a0f      	ldr	r2, [pc, #60]	; (8015524 <SysTimeAdd+0xa8>)
 80154e6:	4293      	cmp	r3, r2
 80154e8:	dd10      	ble.n	801550c <SysTimeAdd+0x90>
    {
        c.Seconds++;
 80154ea:	2110      	movs	r1, #16
 80154ec:	187b      	adds	r3, r7, r1
 80154ee:	681b      	ldr	r3, [r3, #0]
 80154f0:	1c5a      	adds	r2, r3, #1
 80154f2:	187b      	adds	r3, r7, r1
 80154f4:	601a      	str	r2, [r3, #0]
        c.SubSeconds -= 1000;
 80154f6:	187b      	adds	r3, r7, r1
 80154f8:	2204      	movs	r2, #4
 80154fa:	5e9b      	ldrsh	r3, [r3, r2]
 80154fc:	b29b      	uxth	r3, r3
 80154fe:	4a0a      	ldr	r2, [pc, #40]	; (8015528 <SysTimeAdd+0xac>)
 8015500:	4694      	mov	ip, r2
 8015502:	4463      	add	r3, ip
 8015504:	b29b      	uxth	r3, r3
 8015506:	b21a      	sxth	r2, r3
 8015508:	187b      	adds	r3, r7, r1
 801550a:	809a      	strh	r2, [r3, #4]
    }
    return c;
 801550c:	68fb      	ldr	r3, [r7, #12]
 801550e:	2210      	movs	r2, #16
 8015510:	18ba      	adds	r2, r7, r2
 8015512:	ca03      	ldmia	r2!, {r0, r1}
 8015514:	c303      	stmia	r3!, {r0, r1}
}
 8015516:	68f8      	ldr	r0, [r7, #12]
 8015518:	46bd      	mov	sp, r7
 801551a:	b006      	add	sp, #24
 801551c:	bc80      	pop	{r7}
 801551e:	bc08      	pop	{r3}
 8015520:	b002      	add	sp, #8
 8015522:	4718      	bx	r3
 8015524:	000003e7 	.word	0x000003e7
 8015528:	fffffc18 	.word	0xfffffc18

0801552c <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 801552c:	b082      	sub	sp, #8
 801552e:	b580      	push	{r7, lr}
 8015530:	b086      	sub	sp, #24
 8015532:	af00      	add	r7, sp, #0
 8015534:	60f8      	str	r0, [r7, #12]
 8015536:	1d38      	adds	r0, r7, #4
 8015538:	6001      	str	r1, [r0, #0]
 801553a:	6042      	str	r2, [r0, #4]
 801553c:	2204      	movs	r2, #4
 801553e:	2120      	movs	r1, #32
 8015540:	468c      	mov	ip, r1
 8015542:	44bc      	add	ip, r7
 8015544:	4462      	add	r2, ip
 8015546:	6013      	str	r3, [r2, #0]
    SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 8015548:	2110      	movs	r1, #16
 801554a:	187b      	adds	r3, r7, r1
 801554c:	2200      	movs	r2, #0
 801554e:	601a      	str	r2, [r3, #0]
 8015550:	187b      	adds	r3, r7, r1
 8015552:	2200      	movs	r2, #0
 8015554:	809a      	strh	r2, [r3, #4]

    c.Seconds = a.Seconds - b.Seconds;
 8015556:	1d3b      	adds	r3, r7, #4
 8015558:	681a      	ldr	r2, [r3, #0]
 801555a:	2304      	movs	r3, #4
 801555c:	2020      	movs	r0, #32
 801555e:	4684      	mov	ip, r0
 8015560:	44bc      	add	ip, r7
 8015562:	4463      	add	r3, ip
 8015564:	681b      	ldr	r3, [r3, #0]
 8015566:	1ad2      	subs	r2, r2, r3
 8015568:	187b      	adds	r3, r7, r1
 801556a:	601a      	str	r2, [r3, #0]
    c.SubSeconds = a.SubSeconds - b.SubSeconds;
 801556c:	1d3b      	adds	r3, r7, #4
 801556e:	2204      	movs	r2, #4
 8015570:	5e9b      	ldrsh	r3, [r3, r2]
 8015572:	b29a      	uxth	r2, r3
 8015574:	2304      	movs	r3, #4
 8015576:	2020      	movs	r0, #32
 8015578:	4684      	mov	ip, r0
 801557a:	44bc      	add	ip, r7
 801557c:	4463      	add	r3, ip
 801557e:	2004      	movs	r0, #4
 8015580:	5e1b      	ldrsh	r3, [r3, r0]
 8015582:	b29b      	uxth	r3, r3
 8015584:	1ad3      	subs	r3, r2, r3
 8015586:	b29b      	uxth	r3, r3
 8015588:	b21a      	sxth	r2, r3
 801558a:	187b      	adds	r3, r7, r1
 801558c:	809a      	strh	r2, [r3, #4]
    if( c.SubSeconds < 0 )
 801558e:	187b      	adds	r3, r7, r1
 8015590:	2204      	movs	r2, #4
 8015592:	5e9b      	ldrsh	r3, [r3, r2]
 8015594:	2b00      	cmp	r3, #0
 8015596:	da11      	bge.n	80155bc <SysTimeSub+0x90>
    {
        c.Seconds--;
 8015598:	2110      	movs	r1, #16
 801559a:	187b      	adds	r3, r7, r1
 801559c:	681b      	ldr	r3, [r3, #0]
 801559e:	1e5a      	subs	r2, r3, #1
 80155a0:	187b      	adds	r3, r7, r1
 80155a2:	601a      	str	r2, [r3, #0]
        c.SubSeconds += 1000;
 80155a4:	187b      	adds	r3, r7, r1
 80155a6:	2204      	movs	r2, #4
 80155a8:	5e9b      	ldrsh	r3, [r3, r2]
 80155aa:	b29b      	uxth	r3, r3
 80155ac:	22fa      	movs	r2, #250	; 0xfa
 80155ae:	0092      	lsls	r2, r2, #2
 80155b0:	4694      	mov	ip, r2
 80155b2:	4463      	add	r3, ip
 80155b4:	b29b      	uxth	r3, r3
 80155b6:	b21a      	sxth	r2, r3
 80155b8:	187b      	adds	r3, r7, r1
 80155ba:	809a      	strh	r2, [r3, #4]
    }
    return c;
 80155bc:	68fb      	ldr	r3, [r7, #12]
 80155be:	2210      	movs	r2, #16
 80155c0:	18ba      	adds	r2, r7, r2
 80155c2:	ca03      	ldmia	r2!, {r0, r1}
 80155c4:	c303      	stmia	r3!, {r0, r1}
}
 80155c6:	68f8      	ldr	r0, [r7, #12]
 80155c8:	46bd      	mov	sp, r7
 80155ca:	b006      	add	sp, #24
 80155cc:	bc80      	pop	{r7}
 80155ce:	bc08      	pop	{r3}
 80155d0:	b002      	add	sp, #8
 80155d2:	4718      	bx	r3

080155d4 <SysTimeSet>:


void SysTimeSet( SysTime_t sysTime )
{
 80155d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80155d6:	b085      	sub	sp, #20
 80155d8:	af00      	add	r7, sp, #0
 80155da:	003b      	movs	r3, r7
 80155dc:	6018      	str	r0, [r3, #0]
 80155de:	6059      	str	r1, [r3, #4]

	uint64_t t = sysTime.Seconds;
 80155e0:	003b      	movs	r3, r7
 80155e2:	681b      	ldr	r3, [r3, #0]
 80155e4:	60bb      	str	r3, [r7, #8]
 80155e6:	2300      	movs	r3, #0
 80155e8:	60fb      	str	r3, [r7, #12]
	t *= 1000;
 80155ea:	22fa      	movs	r2, #250	; 0xfa
 80155ec:	0092      	lsls	r2, r2, #2
 80155ee:	2300      	movs	r3, #0
 80155f0:	68b8      	ldr	r0, [r7, #8]
 80155f2:	68f9      	ldr	r1, [r7, #12]
 80155f4:	f7ea ff88 	bl	8000508 <__aeabi_lmul>
 80155f8:	0003      	movs	r3, r0
 80155fa:	000c      	movs	r4, r1
 80155fc:	60bb      	str	r3, [r7, #8]
 80155fe:	60fc      	str	r4, [r7, #12]
	t += sysTime.SubSeconds;
 8015600:	003b      	movs	r3, r7
 8015602:	2204      	movs	r2, #4
 8015604:	5e9b      	ldrsh	r3, [r3, r2]
 8015606:	001d      	movs	r5, r3
 8015608:	17db      	asrs	r3, r3, #31
 801560a:	001e      	movs	r6, r3
 801560c:	68bb      	ldr	r3, [r7, #8]
 801560e:	68fc      	ldr	r4, [r7, #12]
 8015610:	195b      	adds	r3, r3, r5
 8015612:	4174      	adcs	r4, r6
 8015614:	60bb      	str	r3, [r7, #8]
 8015616:	60fc      	str	r4, [r7, #12]
    itsdk_time_set_ms(t);
 8015618:	68bb      	ldr	r3, [r7, #8]
 801561a:	68fc      	ldr	r4, [r7, #12]
 801561c:	0018      	movs	r0, r3
 801561e:	0021      	movs	r1, r4
 8015620:	f007 fd24 	bl	801d06c <itsdk_time_set_ms>
    DeltaTime = SysTimeSub( sysTime, calendarTime );


    HW_RTC_BKUPWrite( DeltaTime.Seconds, ( uint32_t )DeltaTime.SubSeconds );
    */
}
 8015624:	46c0      	nop			; (mov r8, r8)
 8015626:	46bd      	mov	sp, r7
 8015628:	b005      	add	sp, #20
 801562a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801562c <SysTimeGet>:


SysTime_t SysTimeGet( void )
{
 801562c:	b5b0      	push	{r4, r5, r7, lr}
 801562e:	b086      	sub	sp, #24
 8015630:	af00      	add	r7, sp, #0
 8015632:	6078      	str	r0, [r7, #4]

    SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 8015634:	2008      	movs	r0, #8
 8015636:	183b      	adds	r3, r7, r0
 8015638:	2200      	movs	r2, #0
 801563a:	601a      	str	r2, [r3, #0]
 801563c:	0005      	movs	r5, r0
 801563e:	183b      	adds	r3, r7, r0
 8015640:	2200      	movs	r2, #0
 8015642:	809a      	strh	r2, [r3, #4]
	uint64_t t = itsdk_time_get_ms();
 8015644:	f007 fd4c 	bl	801d0e0 <itsdk_time_get_ms>
 8015648:	0003      	movs	r3, r0
 801564a:	000c      	movs	r4, r1
 801564c:	613b      	str	r3, [r7, #16]
 801564e:	617c      	str	r4, [r7, #20]
	sysTime.Seconds = t / 1000;
 8015650:	6938      	ldr	r0, [r7, #16]
 8015652:	6979      	ldr	r1, [r7, #20]
 8015654:	22fa      	movs	r2, #250	; 0xfa
 8015656:	0092      	lsls	r2, r2, #2
 8015658:	2300      	movs	r3, #0
 801565a:	f7ea ff35 	bl	80004c8 <__aeabi_uldivmod>
 801565e:	0003      	movs	r3, r0
 8015660:	000c      	movs	r4, r1
 8015662:	001a      	movs	r2, r3
 8015664:	0028      	movs	r0, r5
 8015666:	183b      	adds	r3, r7, r0
 8015668:	601a      	str	r2, [r3, #0]
	sysTime.SubSeconds = t - (sysTime.Seconds*1000);
 801566a:	693b      	ldr	r3, [r7, #16]
 801566c:	697c      	ldr	r4, [r7, #20]
 801566e:	b29a      	uxth	r2, r3
 8015670:	183b      	adds	r3, r7, r0
 8015672:	681b      	ldr	r3, [r3, #0]
 8015674:	b29b      	uxth	r3, r3
 8015676:	21fa      	movs	r1, #250	; 0xfa
 8015678:	0089      	lsls	r1, r1, #2
 801567a:	434b      	muls	r3, r1
 801567c:	b29b      	uxth	r3, r3
 801567e:	1ad3      	subs	r3, r2, r3
 8015680:	b29b      	uxth	r3, r3
 8015682:	b21a      	sxth	r2, r3
 8015684:	183b      	adds	r3, r7, r0
 8015686:	809a      	strh	r2, [r3, #4]

    HW_RTC_BKUPRead( &DeltaTime.Seconds, ( uint32_t* )&DeltaTime.SubSeconds );

    sysTime = SysTimeAdd( DeltaTime, calendarTime );
*/
    return sysTime;
 8015688:	687b      	ldr	r3, [r7, #4]
 801568a:	183a      	adds	r2, r7, r0
 801568c:	ca03      	ldmia	r2!, {r0, r1}
 801568e:	c303      	stmia	r3!, {r0, r1}
}
 8015690:	6878      	ldr	r0, [r7, #4]
 8015692:	46bd      	mov	sp, r7
 8015694:	b006      	add	sp, #24
 8015696:	bdb0      	pop	{r4, r5, r7, pc}

08015698 <removeFromList>:
 */

/**
 * Remove a element from the list
 */
static void removeFromList( TimerEvent_t *obj ) {
 8015698:	b580      	push	{r7, lr}
 801569a:	b084      	sub	sp, #16
 801569c:	af00      	add	r7, sp, #0
 801569e:	6078      	str	r0, [r7, #4]
	if( TimerListHead == obj ) {
 80156a0:	4b11      	ldr	r3, [pc, #68]	; (80156e8 <removeFromList+0x50>)
 80156a2:	681b      	ldr	r3, [r3, #0]
 80156a4:	687a      	ldr	r2, [r7, #4]
 80156a6:	429a      	cmp	r2, r3
 80156a8:	d105      	bne.n	80156b6 <removeFromList+0x1e>
		TimerListHead = TimerListHead->Next;
 80156aa:	4b0f      	ldr	r3, [pc, #60]	; (80156e8 <removeFromList+0x50>)
 80156ac:	681b      	ldr	r3, [r3, #0]
 80156ae:	695a      	ldr	r2, [r3, #20]
 80156b0:	4b0d      	ldr	r3, [pc, #52]	; (80156e8 <removeFromList+0x50>)
 80156b2:	601a      	str	r2, [r3, #0]
			   break;
		   }
		   cur = cur->Next;
		}
	}
}
 80156b4:	e014      	b.n	80156e0 <removeFromList+0x48>
		TimerEvent_t* cur = TimerListHead;
 80156b6:	4b0c      	ldr	r3, [pc, #48]	; (80156e8 <removeFromList+0x50>)
 80156b8:	681b      	ldr	r3, [r3, #0]
 80156ba:	60fb      	str	r3, [r7, #12]
		while( cur != NULL ) {
 80156bc:	e00d      	b.n	80156da <removeFromList+0x42>
		   if( cur->Next == obj ) {
 80156be:	68fb      	ldr	r3, [r7, #12]
 80156c0:	695b      	ldr	r3, [r3, #20]
 80156c2:	687a      	ldr	r2, [r7, #4]
 80156c4:	429a      	cmp	r2, r3
 80156c6:	d105      	bne.n	80156d4 <removeFromList+0x3c>
			   cur->Next = obj->Next;
 80156c8:	687b      	ldr	r3, [r7, #4]
 80156ca:	695a      	ldr	r2, [r3, #20]
 80156cc:	68fb      	ldr	r3, [r7, #12]
 80156ce:	615a      	str	r2, [r3, #20]
			   break;
 80156d0:	46c0      	nop			; (mov r8, r8)
}
 80156d2:	e005      	b.n	80156e0 <removeFromList+0x48>
		   cur = cur->Next;
 80156d4:	68fb      	ldr	r3, [r7, #12]
 80156d6:	695b      	ldr	r3, [r3, #20]
 80156d8:	60fb      	str	r3, [r7, #12]
		while( cur != NULL ) {
 80156da:	68fb      	ldr	r3, [r7, #12]
 80156dc:	2b00      	cmp	r3, #0
 80156de:	d1ee      	bne.n	80156be <removeFromList+0x26>
}
 80156e0:	46c0      	nop			; (mov r8, r8)
 80156e2:	46bd      	mov	sp, r7
 80156e4:	b004      	add	sp, #16
 80156e6:	bd80      	pop	{r7, pc}
 80156e8:	20001050 	.word	0x20001050

080156ec <TimerExists>:

/**
 * Check if the Object to be added is not already in the list
 */
static bool TimerExists( TimerEvent_t *obj )
{
 80156ec:	b580      	push	{r7, lr}
 80156ee:	b084      	sub	sp, #16
 80156f0:	af00      	add	r7, sp, #0
 80156f2:	6078      	str	r0, [r7, #4]
  TimerEvent_t* cur = TimerListHead;
 80156f4:	4b0a      	ldr	r3, [pc, #40]	; (8015720 <TimerExists+0x34>)
 80156f6:	681b      	ldr	r3, [r3, #0]
 80156f8:	60fb      	str	r3, [r7, #12]

  while( cur != NULL ) {
 80156fa:	e008      	b.n	801570e <TimerExists+0x22>
    if( cur == obj ) {
 80156fc:	68fa      	ldr	r2, [r7, #12]
 80156fe:	687b      	ldr	r3, [r7, #4]
 8015700:	429a      	cmp	r2, r3
 8015702:	d101      	bne.n	8015708 <TimerExists+0x1c>
      return true;
 8015704:	2301      	movs	r3, #1
 8015706:	e006      	b.n	8015716 <TimerExists+0x2a>
    }
    cur = cur->Next;
 8015708:	68fb      	ldr	r3, [r7, #12]
 801570a:	695b      	ldr	r3, [r3, #20]
 801570c:	60fb      	str	r3, [r7, #12]
  while( cur != NULL ) {
 801570e:	68fb      	ldr	r3, [r7, #12]
 8015710:	2b00      	cmp	r3, #0
 8015712:	d1f3      	bne.n	80156fc <TimerExists+0x10>
  }
  return false;
 8015714:	2300      	movs	r3, #0

}
 8015716:	0018      	movs	r0, r3
 8015718:	46bd      	mov	sp, r7
 801571a:	b004      	add	sp, #16
 801571c:	bd80      	pop	{r7, pc}
 801571e:	46c0      	nop			; (mov r8, r8)
 8015720:	20001050 	.word	0x20001050

08015724 <TimerInsertTimer>:

/**
 * Insert the timer, as we manage it with no order, just put it on the head
 */
static void TimerInsertTimer( TimerEvent_t *obj)
{
 8015724:	b580      	push	{r7, lr}
 8015726:	b082      	sub	sp, #8
 8015728:	af00      	add	r7, sp, #0
 801572a:	6078      	str	r0, [r7, #4]
	obj->Next = TimerListHead;
 801572c:	4b05      	ldr	r3, [pc, #20]	; (8015744 <TimerInsertTimer+0x20>)
 801572e:	681a      	ldr	r2, [r3, #0]
 8015730:	687b      	ldr	r3, [r7, #4]
 8015732:	615a      	str	r2, [r3, #20]
	TimerListHead = obj;
 8015734:	4b03      	ldr	r3, [pc, #12]	; (8015744 <TimerInsertTimer+0x20>)
 8015736:	687a      	ldr	r2, [r7, #4]
 8015738:	601a      	str	r2, [r3, #0]
}
 801573a:	46c0      	nop			; (mov r8, r8)
 801573c:	46bd      	mov	sp, r7
 801573e:	b002      	add	sp, #8
 8015740:	bd80      	pop	{r7, pc}
 8015742:	46c0      	nop			; (mov r8, r8)
 8015744:	20001050 	.word	0x20001050

08015748 <TimerCallback>:


/** *********************************************************************************
 * This is the callback used for all the timer, it calls the callback function
 */
static void TimerCallback( uint32_t value ) {
 8015748:	b580      	push	{r7, lr}
 801574a:	b084      	sub	sp, #16
 801574c:	af00      	add	r7, sp, #0
 801574e:	6078      	str	r0, [r7, #4]

	TimerEvent_t *obj = (TimerEvent_t *)value;
 8015750:	687b      	ldr	r3, [r7, #4]
 8015752:	60fb      	str	r3, [r7, #12]
	LOG_DEBUG_LORAWAN(("TimerCallback (%d)\r\n",obj->ReloadValue));
	obj->IsStarted = false;
 8015754:	68fb      	ldr	r3, [r7, #12]
 8015756:	2200      	movs	r2, #0
 8015758:	721a      	strb	r2, [r3, #8]
	if (obj->Callback != NULL) {
 801575a:	68fb      	ldr	r3, [r7, #12]
 801575c:	68db      	ldr	r3, [r3, #12]
 801575e:	2b00      	cmp	r3, #0
 8015760:	d006      	beq.n	8015770 <TimerCallback+0x28>
		obj->Callback(obj->Context);
 8015762:	68fb      	ldr	r3, [r7, #12]
 8015764:	68da      	ldr	r2, [r3, #12]
 8015766:	68fb      	ldr	r3, [r7, #12]
 8015768:	691b      	ldr	r3, [r3, #16]
 801576a:	0018      	movs	r0, r3
 801576c:	4790      	blx	r2
 801576e:	e004      	b.n	801577a <TimerCallback+0x32>
	} else {
		ITSDK_ERROR_REPORT(ITSDK_ERROR_LORAWAN_TIME_NOCALLBACK,0);
 8015770:	4b06      	ldr	r3, [pc, #24]	; (801578c <TimerCallback+0x44>)
 8015772:	2100      	movs	r1, #0
 8015774:	0018      	movs	r0, r3
 8015776:	f006 f9f1 	bl	801bb5c <itsdk_error_report>
	}
	removeFromList(obj);
 801577a:	68fb      	ldr	r3, [r7, #12]
 801577c:	0018      	movs	r0, r3
 801577e:	f7ff ff8b 	bl	8015698 <removeFromList>
}
 8015782:	46c0      	nop			; (mov r8, r8)
 8015784:	46bd      	mov	sp, r7
 8015786:	b004      	add	sp, #16
 8015788:	bd80      	pop	{r7, pc}
 801578a:	46c0      	nop			; (mov r8, r8)
 801578c:	c0000104 	.word	0xc0000104

08015790 <TimerInit>:
/** ***********************************************************************************
 * Add / remove timer ...
 */

void TimerInit( TimerEvent_t *obj, void ( *callback )( void *context ) )
{
 8015790:	b580      	push	{r7, lr}
 8015792:	b082      	sub	sp, #8
 8015794:	af00      	add	r7, sp, #0
 8015796:	6078      	str	r0, [r7, #4]
 8015798:	6039      	str	r1, [r7, #0]
  LOG_DEBUG_LORAWAN(("TimerInit\r\n"));

  obj->Timestamp = 0;
 801579a:	687b      	ldr	r3, [r7, #4]
 801579c:	2200      	movs	r2, #0
 801579e:	601a      	str	r2, [r3, #0]
  obj->ReloadValue = 0;
 80157a0:	687b      	ldr	r3, [r7, #4]
 80157a2:	2200      	movs	r2, #0
 80157a4:	605a      	str	r2, [r3, #4]
  obj->IsStarted = false;
 80157a6:	687b      	ldr	r3, [r7, #4]
 80157a8:	2200      	movs	r2, #0
 80157aa:	721a      	strb	r2, [r3, #8]
  obj->IsNext2Expire = false;
 80157ac:	687b      	ldr	r3, [r7, #4]
 80157ae:	2200      	movs	r2, #0
 80157b0:	725a      	strb	r2, [r3, #9]
  obj->Callback = callback;
 80157b2:	687b      	ldr	r3, [r7, #4]
 80157b4:	683a      	ldr	r2, [r7, #0]
 80157b6:	60da      	str	r2, [r3, #12]
  obj->Context = NULL;
 80157b8:	687b      	ldr	r3, [r7, #4]
 80157ba:	2200      	movs	r2, #0
 80157bc:	611a      	str	r2, [r3, #16]
  obj->Next = NULL;
 80157be:	687b      	ldr	r3, [r7, #4]
 80157c0:	2200      	movs	r2, #0
 80157c2:	615a      	str	r2, [r3, #20]
}
 80157c4:	46c0      	nop			; (mov r8, r8)
 80157c6:	46bd      	mov	sp, r7
 80157c8:	b002      	add	sp, #8
 80157ca:	bd80      	pop	{r7, pc}

080157cc <TimerSetValue>:
 * This is changing the duration of the timer. The value is given in ms.
 * We search for the itsdk timer structure and update it when running.
 * If not running the timestamp field will keep the value in ms.
 */
void TimerSetValue( TimerEvent_t *obj, uint32_t value )
{
 80157cc:	b580      	push	{r7, lr}
 80157ce:	b084      	sub	sp, #16
 80157d0:	af00      	add	r7, sp, #0
 80157d2:	6078      	str	r0, [r7, #4]
 80157d4:	6039      	str	r1, [r7, #0]
	LOG_DEBUG_LORAWAN(("TimerSetValue %d\r\n",value));
	// search the real timer based on the context
	itsdk_stimer_slot_t * t = itsdk_stimer_get(TimerCallback,(uint32_t)obj);
 80157d6:	687a      	ldr	r2, [r7, #4]
 80157d8:	4b11      	ldr	r3, [pc, #68]	; (8015820 <TimerSetValue+0x54>)
 80157da:	0011      	movs	r1, r2
 80157dc:	0018      	movs	r0, r3
 80157de:	f007 fd8b 	bl	801d2f8 <itsdk_stimer_get>
 80157e2:	0003      	movs	r3, r0
 80157e4:	60fb      	str	r3, [r7, #12]
	if ( t != NULL ) {
 80157e6:	68fb      	ldr	r3, [r7, #12]
 80157e8:	2b00      	cmp	r3, #0
 80157ea:	d00e      	beq.n	801580a <TimerSetValue+0x3e>
		// best is to stop the timer and restart it with the new duration
		TimerStop(obj);
 80157ec:	687b      	ldr	r3, [r7, #4]
 80157ee:	0018      	movs	r0, r3
 80157f0:	f000 f86e 	bl	80158d0 <TimerStop>
		obj->Timestamp = value;
 80157f4:	687b      	ldr	r3, [r7, #4]
 80157f6:	683a      	ldr	r2, [r7, #0]
 80157f8:	601a      	str	r2, [r3, #0]
		obj->ReloadValue = value;
 80157fa:	687b      	ldr	r3, [r7, #4]
 80157fc:	683a      	ldr	r2, [r7, #0]
 80157fe:	605a      	str	r2, [r3, #4]
		TimerStart(obj);
 8015800:	687b      	ldr	r3, [r7, #4]
 8015802:	0018      	movs	r0, r3
 8015804:	f000 f80e 	bl	8015824 <TimerStart>
	} else {
		// the timer is not running, so we just need to update the local structure
		obj->Timestamp = value;
		obj->ReloadValue = value;
	}
}
 8015808:	e005      	b.n	8015816 <TimerSetValue+0x4a>
		obj->Timestamp = value;
 801580a:	687b      	ldr	r3, [r7, #4]
 801580c:	683a      	ldr	r2, [r7, #0]
 801580e:	601a      	str	r2, [r3, #0]
		obj->ReloadValue = value;
 8015810:	687b      	ldr	r3, [r7, #4]
 8015812:	683a      	ldr	r2, [r7, #0]
 8015814:	605a      	str	r2, [r3, #4]
}
 8015816:	46c0      	nop			; (mov r8, r8)
 8015818:	46bd      	mov	sp, r7
 801581a:	b004      	add	sp, #16
 801581c:	bd80      	pop	{r7, pc}
 801581e:	46c0      	nop			; (mov r8, r8)
 8015820:	08015749 	.word	0x08015749

08015824 <TimerStart>:

/**
 * Add a Timer in the list and start it using the it_sdk timer module
 */
void TimerStart( TimerEvent_t *obj )
{
 8015824:	b5b0      	push	{r4, r5, r7, lr}
 8015826:	b084      	sub	sp, #16
 8015828:	af00      	add	r7, sp, #0
 801582a:	6078      	str	r0, [r7, #4]
	LOG_INFO_LORAWAN(("St %d ms\r\n",obj->ReloadValue));

	itsdk_enterCriticalSection();
 801582c:	f008 fd28 	bl	801e280 <itsdk_enterCriticalSection>
	// do not add a timer already existing
	if( ( obj == NULL ) || ( TimerExists( obj ) == true ) ) {
 8015830:	687b      	ldr	r3, [r7, #4]
 8015832:	2b00      	cmp	r3, #0
 8015834:	d005      	beq.n	8015842 <TimerStart+0x1e>
 8015836:	687b      	ldr	r3, [r7, #4]
 8015838:	0018      	movs	r0, r3
 801583a:	f7ff ff57 	bl	80156ec <TimerExists>
 801583e:	1e03      	subs	r3, r0, #0
 8015840:	d007      	beq.n	8015852 <TimerStart+0x2e>
		itsdk_leaveCriticalSection();
 8015842:	f008 fd31 	bl	801e2a8 <itsdk_leaveCriticalSection>
		ITSDK_ERROR_REPORT(ITSDK_ERROR_STIMER_ALREADY_SET,0);
 8015846:	4b1e      	ldr	r3, [pc, #120]	; (80158c0 <TimerStart+0x9c>)
 8015848:	2100      	movs	r1, #0
 801584a:	0018      	movs	r0, r3
 801584c:	f006 f986 	bl	801bb5c <itsdk_error_report>
	    return;
 8015850:	e032      	b.n	80158b8 <TimerStart+0x94>
	}
	obj->Timestamp = obj->ReloadValue;
 8015852:	687b      	ldr	r3, [r7, #4]
 8015854:	685a      	ldr	r2, [r3, #4]
 8015856:	687b      	ldr	r3, [r7, #4]
 8015858:	601a      	str	r2, [r3, #0]
	obj->IsStarted = true;
 801585a:	687b      	ldr	r3, [r7, #4]
 801585c:	2201      	movs	r2, #1
 801585e:	721a      	strb	r2, [r3, #8]
	obj->IsNext2Expire = false;
 8015860:	687b      	ldr	r3, [r7, #4]
 8015862:	2200      	movs	r2, #0
 8015864:	725a      	strb	r2, [r3, #9]

	if( TimerListHead == NULL ) {
 8015866:	4b17      	ldr	r3, [pc, #92]	; (80158c4 <TimerStart+0xa0>)
 8015868:	681b      	ldr	r3, [r3, #0]
 801586a:	2b00      	cmp	r3, #0
 801586c:	d106      	bne.n	801587c <TimerStart+0x58>
		obj->Next = NULL;
 801586e:	687b      	ldr	r3, [r7, #4]
 8015870:	2200      	movs	r2, #0
 8015872:	615a      	str	r2, [r3, #20]
		TimerListHead = obj;
 8015874:	4b13      	ldr	r3, [pc, #76]	; (80158c4 <TimerStart+0xa0>)
 8015876:	687a      	ldr	r2, [r7, #4]
 8015878:	601a      	str	r2, [r3, #0]
 801587a:	e003      	b.n	8015884 <TimerStart+0x60>
	} else {
	  // obj->Timestamp += elapsedTime; Not needed
      TimerInsertTimer( obj);
 801587c:	687b      	ldr	r3, [r7, #4]
 801587e:	0018      	movs	r0, r3
 8015880:	f7ff ff50 	bl	8015724 <TimerInsertTimer>
	}
	itsdk_timer_return_t ret = itsdk_stimer_register(
 8015884:	687b      	ldr	r3, [r7, #4]
 8015886:	6858      	ldr	r0, [r3, #4]
 8015888:	687a      	ldr	r2, [r7, #4]
 801588a:	250f      	movs	r5, #15
 801588c:	197c      	adds	r4, r7, r5
 801588e:	490e      	ldr	r1, [pc, #56]	; (80158c8 <TimerStart+0xa4>)
 8015890:	2300      	movs	r3, #0
 8015892:	f007 fc57 	bl	801d144 <itsdk_stimer_register>
 8015896:	0003      	movs	r3, r0
 8015898:	7023      	strb	r3, [r4, #0]
									obj->ReloadValue,
									TimerCallback,
									(uint32_t)obj,
									TIMER_ACCEPT_LOWPOWER
		 	 	 	 	 	   );
	if ( ret != TIMER_INIT_SUCCESS ) {
 801589a:	197b      	adds	r3, r7, r5
 801589c:	781b      	ldrb	r3, [r3, #0]
 801589e:	2b00      	cmp	r3, #0
 80158a0:	d008      	beq.n	80158b4 <TimerStart+0x90>
		ITSDK_ERROR_REPORT(ITSDK_ERROR_LORAWAN_TIME_INITFLD,(uint16_t)ret);
 80158a2:	230f      	movs	r3, #15
 80158a4:	18fb      	adds	r3, r7, r3
 80158a6:	781b      	ldrb	r3, [r3, #0]
 80158a8:	b29b      	uxth	r3, r3
 80158aa:	4a08      	ldr	r2, [pc, #32]	; (80158cc <TimerStart+0xa8>)
 80158ac:	0019      	movs	r1, r3
 80158ae:	0010      	movs	r0, r2
 80158b0:	f006 f954 	bl	801bb5c <itsdk_error_report>
	}
	itsdk_leaveCriticalSection();
 80158b4:	f008 fcf8 	bl	801e2a8 <itsdk_leaveCriticalSection>

}
 80158b8:	46bd      	mov	sp, r7
 80158ba:	b004      	add	sp, #16
 80158bc:	bdb0      	pop	{r4, r5, r7, pc}
 80158be:	46c0      	nop			; (mov r8, r8)
 80158c0:	80000011 	.word	0x80000011
 80158c4:	20001050 	.word	0x20001050
 80158c8:	08015749 	.word	0x08015749
 80158cc:	d0000105 	.word	0xd0000105

080158d0 <TimerStop>:

/**
 *
 */
void TimerStop( TimerEvent_t *obj ) 
{
 80158d0:	b580      	push	{r7, lr}
 80158d2:	b082      	sub	sp, #8
 80158d4:	af00      	add	r7, sp, #0
 80158d6:	6078      	str	r0, [r7, #4]
	LOG_INFO_LORAWAN(("Sp %d ms\r\n",obj->ReloadValue));

	itsdk_enterCriticalSection();
 80158d8:	f008 fcd2 	bl	801e280 <itsdk_enterCriticalSection>
	// do not stop a non existing
	if( ( obj == NULL ) || ( TimerExists( obj ) == false ) ) {
 80158dc:	687b      	ldr	r3, [r7, #4]
 80158de:	2b00      	cmp	r3, #0
 80158e0:	d00a      	beq.n	80158f8 <TimerStop+0x28>
 80158e2:	687b      	ldr	r3, [r7, #4]
 80158e4:	0018      	movs	r0, r3
 80158e6:	f7ff ff01 	bl	80156ec <TimerExists>
 80158ea:	0003      	movs	r3, r0
 80158ec:	001a      	movs	r2, r3
 80158ee:	2301      	movs	r3, #1
 80158f0:	4053      	eors	r3, r2
 80158f2:	b2db      	uxtb	r3, r3
 80158f4:	2b00      	cmp	r3, #0
 80158f6:	d002      	beq.n	80158fe <TimerStop+0x2e>
		itsdk_leaveCriticalSection();
 80158f8:	f008 fcd6 	bl	801e2a8 <itsdk_leaveCriticalSection>
	    return;
 80158fc:	e012      	b.n	8015924 <TimerStop+0x54>
	}

	if (obj->IsStarted) {
 80158fe:	687b      	ldr	r3, [r7, #4]
 8015900:	7a1b      	ldrb	r3, [r3, #8]
 8015902:	2b00      	cmp	r3, #0
 8015904:	d008      	beq.n	8015918 <TimerStop+0x48>
		itsdk_stimer_stop(
 8015906:	687a      	ldr	r2, [r7, #4]
 8015908:	4b08      	ldr	r3, [pc, #32]	; (801592c <TimerStop+0x5c>)
 801590a:	0011      	movs	r1, r2
 801590c:	0018      	movs	r0, r3
 801590e:	f007 fc87 	bl	801d220 <itsdk_stimer_stop>
							TimerCallback,
							(uint32_t)obj
						);
		obj->IsStarted = false;
 8015912:	687b      	ldr	r3, [r7, #4]
 8015914:	2200      	movs	r2, #0
 8015916:	721a      	strb	r2, [r3, #8]
	}
	removeFromList(obj);
 8015918:	687b      	ldr	r3, [r7, #4]
 801591a:	0018      	movs	r0, r3
 801591c:	f7ff febc 	bl	8015698 <removeFromList>
	itsdk_leaveCriticalSection();
 8015920:	f008 fcc2 	bl	801e2a8 <itsdk_leaveCriticalSection>
}  
 8015924:	46bd      	mov	sp, r7
 8015926:	b002      	add	sp, #8
 8015928:	bd80      	pop	{r7, pc}
 801592a:	46c0      	nop			; (mov r8, r8)
 801592c:	08015749 	.word	0x08015749

08015930 <TimerIsStarted>:
  TimerStop( obj );
  TimerStart( obj );
}

bool TimerIsStarted( TimerEvent_t *obj )
{
 8015930:	b580      	push	{r7, lr}
 8015932:	b082      	sub	sp, #8
 8015934:	af00      	add	r7, sp, #0
 8015936:	6078      	str	r0, [r7, #4]
  return obj->IsStarted;
 8015938:	687b      	ldr	r3, [r7, #4]
 801593a:	7a1b      	ldrb	r3, [r3, #8]
}
 801593c:	0018      	movs	r0, r3
 801593e:	46bd      	mov	sp, r7
 8015940:	b002      	add	sp, #8
 8015942:	bd80      	pop	{r7, pc}

08015944 <TimerGetCurrentTime>:




TimerTime_t TimerGetCurrentTime( void )
{
 8015944:	b5b0      	push	{r4, r5, r7, lr}
 8015946:	af00      	add	r7, sp, #0
	return (uint32_t)itsdk_time_get_ms();
 8015948:	f007 fbca 	bl	801d0e0 <itsdk_time_get_ms>
 801594c:	0003      	movs	r3, r0
 801594e:	000c      	movs	r4, r1
}
 8015950:	0018      	movs	r0, r3
 8015952:	46bd      	mov	sp, r7
 8015954:	bdb0      	pop	{r4, r5, r7, pc}

08015956 <TimerGetElapsedTime>:

TimerTime_t TimerGetElapsedTime( TimerTime_t past )
{
 8015956:	b580      	push	{r7, lr}
 8015958:	b082      	sub	sp, #8
 801595a:	af00      	add	r7, sp, #0
 801595c:	6078      	str	r0, [r7, #4]
	return TimerGetCurrentTime() - past;
 801595e:	f7ff fff1 	bl	8015944 <TimerGetCurrentTime>
 8015962:	0002      	movs	r2, r0
 8015964:	687b      	ldr	r3, [r7, #4]
 8015966:	1ad3      	subs	r3, r2, r3
}
 8015968:	0018      	movs	r0, r3
 801596a:	46bd      	mov	sp, r7
 801596c:	b002      	add	sp, #8
 801596e:	bd80      	pop	{r7, pc}

08015970 <rand1>:
#define RAND_LOCAL_MAX 2147483647L

static uint32_t next = 1;

int32_t rand1( void )
{
 8015970:	b580      	push	{r7, lr}
 8015972:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 8015974:	4b08      	ldr	r3, [pc, #32]	; (8015998 <rand1+0x28>)
 8015976:	681b      	ldr	r3, [r3, #0]
 8015978:	4a08      	ldr	r2, [pc, #32]	; (801599c <rand1+0x2c>)
 801597a:	4353      	muls	r3, r2
 801597c:	4a08      	ldr	r2, [pc, #32]	; (80159a0 <rand1+0x30>)
 801597e:	189a      	adds	r2, r3, r2
 8015980:	4b05      	ldr	r3, [pc, #20]	; (8015998 <rand1+0x28>)
 8015982:	601a      	str	r2, [r3, #0]
 8015984:	4b04      	ldr	r3, [pc, #16]	; (8015998 <rand1+0x28>)
 8015986:	681b      	ldr	r3, [r3, #0]
 8015988:	4906      	ldr	r1, [pc, #24]	; (80159a4 <rand1+0x34>)
 801598a:	0018      	movs	r0, r3
 801598c:	f7ea fc4a 	bl	8000224 <__aeabi_uidivmod>
 8015990:	000b      	movs	r3, r1
}
 8015992:	0018      	movs	r0, r3
 8015994:	46bd      	mov	sp, r7
 8015996:	bd80      	pop	{r7, pc}
 8015998:	2000007c 	.word	0x2000007c
 801599c:	41c64e6d 	.word	0x41c64e6d
 80159a0:	00003039 	.word	0x00003039
 80159a4:	7fffffff 	.word	0x7fffffff

080159a8 <srand1>:

void srand1( uint32_t seed )
{
 80159a8:	b580      	push	{r7, lr}
 80159aa:	b082      	sub	sp, #8
 80159ac:	af00      	add	r7, sp, #0
 80159ae:	6078      	str	r0, [r7, #4]
    next = seed;
 80159b0:	4b03      	ldr	r3, [pc, #12]	; (80159c0 <srand1+0x18>)
 80159b2:	687a      	ldr	r2, [r7, #4]
 80159b4:	601a      	str	r2, [r3, #0]
}
 80159b6:	46c0      	nop			; (mov r8, r8)
 80159b8:	46bd      	mov	sp, r7
 80159ba:	b002      	add	sp, #8
 80159bc:	bd80      	pop	{r7, pc}
 80159be:	46c0      	nop			; (mov r8, r8)
 80159c0:	2000007c 	.word	0x2000007c

080159c4 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 80159c4:	b580      	push	{r7, lr}
 80159c6:	b082      	sub	sp, #8
 80159c8:	af00      	add	r7, sp, #0
 80159ca:	6078      	str	r0, [r7, #4]
 80159cc:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 80159ce:	f7ff ffcf 	bl	8015970 <rand1>
 80159d2:	683a      	ldr	r2, [r7, #0]
 80159d4:	687b      	ldr	r3, [r7, #4]
 80159d6:	1ad3      	subs	r3, r2, r3
 80159d8:	3301      	adds	r3, #1
 80159da:	0019      	movs	r1, r3
 80159dc:	f7ea fd0c 	bl	80003f8 <__aeabi_idivmod>
 80159e0:	000b      	movs	r3, r1
 80159e2:	001a      	movs	r2, r3
 80159e4:	687b      	ldr	r3, [r7, #4]
 80159e6:	18d3      	adds	r3, r2, r3
}
 80159e8:	0018      	movs	r0, r3
 80159ea:	46bd      	mov	sp, r7
 80159ec:	b002      	add	sp, #8
 80159ee:	bd80      	pop	{r7, pc}

080159f0 <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 80159f0:	b580      	push	{r7, lr}
 80159f2:	b084      	sub	sp, #16
 80159f4:	af00      	add	r7, sp, #0
 80159f6:	60f8      	str	r0, [r7, #12]
 80159f8:	60b9      	str	r1, [r7, #8]
 80159fa:	1dbb      	adds	r3, r7, #6
 80159fc:	801a      	strh	r2, [r3, #0]
    while( size-- )
 80159fe:	e007      	b.n	8015a10 <memcpy1+0x20>
    {
        *dst++ = *src++;
 8015a00:	68ba      	ldr	r2, [r7, #8]
 8015a02:	1c53      	adds	r3, r2, #1
 8015a04:	60bb      	str	r3, [r7, #8]
 8015a06:	68fb      	ldr	r3, [r7, #12]
 8015a08:	1c59      	adds	r1, r3, #1
 8015a0a:	60f9      	str	r1, [r7, #12]
 8015a0c:	7812      	ldrb	r2, [r2, #0]
 8015a0e:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8015a10:	1dbb      	adds	r3, r7, #6
 8015a12:	881b      	ldrh	r3, [r3, #0]
 8015a14:	1dba      	adds	r2, r7, #6
 8015a16:	1e59      	subs	r1, r3, #1
 8015a18:	8011      	strh	r1, [r2, #0]
 8015a1a:	2b00      	cmp	r3, #0
 8015a1c:	d1f0      	bne.n	8015a00 <memcpy1+0x10>
    }
}
 8015a1e:	46c0      	nop			; (mov r8, r8)
 8015a20:	46bd      	mov	sp, r7
 8015a22:	b004      	add	sp, #16
 8015a24:	bd80      	pop	{r7, pc}

08015a26 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8015a26:	b580      	push	{r7, lr}
 8015a28:	b084      	sub	sp, #16
 8015a2a:	af00      	add	r7, sp, #0
 8015a2c:	60f8      	str	r0, [r7, #12]
 8015a2e:	60b9      	str	r1, [r7, #8]
 8015a30:	1dbb      	adds	r3, r7, #6
 8015a32:	801a      	strh	r2, [r3, #0]
    dst = dst + ( size - 1 );
 8015a34:	1dbb      	adds	r3, r7, #6
 8015a36:	881b      	ldrh	r3, [r3, #0]
 8015a38:	3b01      	subs	r3, #1
 8015a3a:	68fa      	ldr	r2, [r7, #12]
 8015a3c:	18d3      	adds	r3, r2, r3
 8015a3e:	60fb      	str	r3, [r7, #12]
    while( size-- )
 8015a40:	e007      	b.n	8015a52 <memcpyr+0x2c>
    {
        *dst-- = *src++;
 8015a42:	68ba      	ldr	r2, [r7, #8]
 8015a44:	1c53      	adds	r3, r2, #1
 8015a46:	60bb      	str	r3, [r7, #8]
 8015a48:	68fb      	ldr	r3, [r7, #12]
 8015a4a:	1e59      	subs	r1, r3, #1
 8015a4c:	60f9      	str	r1, [r7, #12]
 8015a4e:	7812      	ldrb	r2, [r2, #0]
 8015a50:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8015a52:	1dbb      	adds	r3, r7, #6
 8015a54:	881b      	ldrh	r3, [r3, #0]
 8015a56:	1dba      	adds	r2, r7, #6
 8015a58:	1e59      	subs	r1, r3, #1
 8015a5a:	8011      	strh	r1, [r2, #0]
 8015a5c:	2b00      	cmp	r3, #0
 8015a5e:	d1f0      	bne.n	8015a42 <memcpyr+0x1c>
    }
}
 8015a60:	46c0      	nop			; (mov r8, r8)
 8015a62:	46bd      	mov	sp, r7
 8015a64:	b004      	add	sp, #16
 8015a66:	bd80      	pop	{r7, pc}

08015a68 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 8015a68:	b580      	push	{r7, lr}
 8015a6a:	b082      	sub	sp, #8
 8015a6c:	af00      	add	r7, sp, #0
 8015a6e:	6078      	str	r0, [r7, #4]
 8015a70:	0008      	movs	r0, r1
 8015a72:	0011      	movs	r1, r2
 8015a74:	1cfb      	adds	r3, r7, #3
 8015a76:	1c02      	adds	r2, r0, #0
 8015a78:	701a      	strb	r2, [r3, #0]
 8015a7a:	003b      	movs	r3, r7
 8015a7c:	1c0a      	adds	r2, r1, #0
 8015a7e:	801a      	strh	r2, [r3, #0]
    while( size-- )
 8015a80:	e005      	b.n	8015a8e <memset1+0x26>
    {
        *dst++ = value;
 8015a82:	687b      	ldr	r3, [r7, #4]
 8015a84:	1c5a      	adds	r2, r3, #1
 8015a86:	607a      	str	r2, [r7, #4]
 8015a88:	1cfa      	adds	r2, r7, #3
 8015a8a:	7812      	ldrb	r2, [r2, #0]
 8015a8c:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8015a8e:	003b      	movs	r3, r7
 8015a90:	881b      	ldrh	r3, [r3, #0]
 8015a92:	003a      	movs	r2, r7
 8015a94:	1e59      	subs	r1, r3, #1
 8015a96:	8011      	strh	r1, [r2, #0]
 8015a98:	2b00      	cmp	r3, #0
 8015a9a:	d1f2      	bne.n	8015a82 <memset1+0x1a>
    }
}
 8015a9c:	46c0      	nop			; (mov r8, r8)
 8015a9e:	46bd      	mov	sp, r7
 8015aa0:	b002      	add	sp, #8
 8015aa2:	bd80      	pop	{r7, pc}

08015aa4 <SX1276InitLowPower>:

/**
 * Init the SX1276 device and switch it to low power.
 * This allows to have a basic init before executing the full radio init
 */
void SX1276InitLowPower( void ) {
 8015aa4:	b580      	push	{r7, lr}
 8015aa6:	af00      	add	r7, sp, #0

    LOG_INFO_SX1276((">> mSX1276InitLowPower\r\n"));

	gpio_configure(ITSDK_SX1276_TCXO_VCC_BANK, ITSDK_SX1276_TCXO_VCC_PIN, GPIO_OUTPUT_PP );
 8015aa8:	2380      	movs	r3, #128	; 0x80
 8015aaa:	015b      	lsls	r3, r3, #5
 8015aac:	2200      	movs	r2, #0
 8015aae:	0019      	movs	r1, r3
 8015ab0:	2000      	movs	r0, #0
 8015ab2:	f008 f85b 	bl	801db6c <gpio_configure>
    TCXO_ON();
 8015ab6:	2380      	movs	r3, #128	; 0x80
 8015ab8:	015b      	lsls	r3, r3, #5
 8015aba:	0019      	movs	r1, r3
 8015abc:	2000      	movs	r0, #0
 8015abe:	f008 fa5d 	bl	801df7c <gpio_set>
    itsdk_delayMs(ITSDK_MURATA_WAKEUP_TIME);
 8015ac2:	2035      	movs	r0, #53	; 0x35
 8015ac4:	f008 fbb6 	bl	801e234 <itsdk_delayMs>
	if (ITSDK_SX1276_DIO_0_PIN != __LP_GPIO_NONE ) {
		gpio_configure(ITSDK_SX1276_DIO_0_BANK, ITSDK_SX1276_DIO_0_PIN, GPIO_ANALOG );
 8015ac8:	220e      	movs	r2, #14
 8015aca:	2110      	movs	r1, #16
 8015acc:	2001      	movs	r0, #1
 8015ace:	f008 f84d 	bl	801db6c <gpio_configure>
	}
	if (ITSDK_SX1276_DIO_1_PIN != __LP_GPIO_NONE ) {
		gpio_configure(ITSDK_SX1276_DIO_1_BANK, ITSDK_SX1276_DIO_1_PIN, GPIO_ANALOG );
 8015ad2:	220e      	movs	r2, #14
 8015ad4:	2102      	movs	r1, #2
 8015ad6:	2001      	movs	r0, #1
 8015ad8:	f008 f848 	bl	801db6c <gpio_configure>
	}
	if (ITSDK_SX1276_DIO_2_PIN != __LP_GPIO_NONE ) {
		gpio_configure(ITSDK_SX1276_DIO_2_BANK, ITSDK_SX1276_DIO_2_PIN, GPIO_ANALOG );
 8015adc:	220e      	movs	r2, #14
 8015ade:	2101      	movs	r1, #1
 8015ae0:	2001      	movs	r0, #1
 8015ae2:	f008 f843 	bl	801db6c <gpio_configure>
	}
	if (ITSDK_SX1276_DIO_3_PIN != __LP_GPIO_NONE ) {
		gpio_configure(ITSDK_SX1276_DIO_3_BANK, ITSDK_SX1276_DIO_3_PIN, GPIO_ANALOG );
 8015ae6:	2380      	movs	r3, #128	; 0x80
 8015ae8:	019b      	lsls	r3, r3, #6
 8015aea:	220e      	movs	r2, #14
 8015aec:	0019      	movs	r1, r3
 8015aee:	2002      	movs	r0, #2
 8015af0:	f008 f83c 	bl	801db6c <gpio_configure>
		if (ITSDK_SX1276_DIO_5_PIN != __LP_GPIO_NONE ) {
			gpio_configure(ITSDK_SX1276_DIO_5_BANK, ITSDK_SX1276_DIO_5_PIN, GPIO_ANALOG );
		}
	#endif

 	gpio_configure(ITSDK_SX1276_NSS_BANK, ITSDK_SX1276_NSS_PIN, GPIO_OUTPUT_PULLUP );
 8015af4:	2380      	movs	r3, #128	; 0x80
 8015af6:	021b      	lsls	r3, r3, #8
 8015af8:	2201      	movs	r2, #1
 8015afa:	0019      	movs	r1, r3
 8015afc:	2000      	movs	r0, #0
 8015afe:	f008 f835 	bl	801db6c <gpio_configure>
	gpio_set(ITSDK_SX1276_NSS_BANK, ITSDK_SX1276_NSS_PIN);
 8015b02:	2380      	movs	r3, #128	; 0x80
 8015b04:	021b      	lsls	r3, r3, #8
 8015b06:	0019      	movs	r1, r3
 8015b08:	2000      	movs	r0, #0
 8015b0a:	f008 fa37 	bl	801df7c <gpio_set>
	SX1276Reset();
 8015b0e:	f001 fead 	bl	801786c <SX1276Reset>
	SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | RF_OPMODE_SLEEP  );	// SLEEP mode is 1uA when Standby Mode is 1,6mA
 8015b12:	2001      	movs	r0, #1
 8015b14:	f001 ff80 	bl	8017a18 <SX1276Read>
 8015b18:	0003      	movs	r3, r0
 8015b1a:	001a      	movs	r2, r3
 8015b1c:	2307      	movs	r3, #7
 8015b1e:	439a      	bics	r2, r3
 8015b20:	0013      	movs	r3, r2
 8015b22:	b2db      	uxtb	r3, r3
 8015b24:	0019      	movs	r1, r3
 8015b26:	2001      	movs	r0, #1
 8015b28:	f001 ff62 	bl	80179f0 <SX1276Write>
	SX1276SetAntSwLowPower(true);
 8015b2c:	2001      	movs	r0, #1
 8015b2e:	f000 f9fc 	bl	8015f2a <SX1276SetAntSwLowPower>
	itsdk_delayMs(10);
 8015b32:	200a      	movs	r0, #10
 8015b34:	f008 fb7e 	bl	801e234 <itsdk_delayMs>
	TCXO_OFF();
 8015b38:	2380      	movs	r3, #128	; 0x80
 8015b3a:	015b      	lsls	r3, r3, #5
 8015b3c:	0019      	movs	r1, r3
 8015b3e:	2000      	movs	r0, #0
 8015b40:	f008 fa34 	bl	801dfac <gpio_reset>

}
 8015b44:	46c0      	nop			; (mov r8, r8)
 8015b46:	46bd      	mov	sp, r7
 8015b48:	bd80      	pop	{r7, pc}

08015b4a <SX1276GetWakeTime>:


uint32_t SX1276GetWakeTime( void )
{
 8015b4a:	b580      	push	{r7, lr}
 8015b4c:	af00      	add	r7, sp, #0
  LOG_INFO_SX1276((">> mSX1276GetWakeTime\r\n"));
  return  0;
 8015b4e:	2300      	movs	r3, #0
}
 8015b50:	0018      	movs	r0, r3
 8015b52:	46bd      	mov	sp, r7
 8015b54:	bd80      	pop	{r7, pc}

08015b56 <SX1276SetXO>:

void SX1276SetXO( uint8_t state )
{
 8015b56:	b580      	push	{r7, lr}
 8015b58:	b082      	sub	sp, #8
 8015b5a:	af00      	add	r7, sp, #0
 8015b5c:	0002      	movs	r2, r0
 8015b5e:	1dfb      	adds	r3, r7, #7
 8015b60:	701a      	strb	r2, [r3, #0]
  LOG_INFO_SX1276((">> mSX1276SetXO (%s)\r\n",((state==SET)?"ON":"OFF")));

  if (state == SET )
 8015b62:	1dfb      	adds	r3, r7, #7
 8015b64:	781b      	ldrb	r3, [r3, #0]
 8015b66:	2b01      	cmp	r3, #1
 8015b68:	d109      	bne.n	8015b7e <SX1276SetXO+0x28>
  {
    TCXO_ON(); 
 8015b6a:	2380      	movs	r3, #128	; 0x80
 8015b6c:	015b      	lsls	r3, r3, #5
 8015b6e:	0019      	movs	r1, r3
 8015b70:	2000      	movs	r0, #0
 8015b72:	f008 fa03 	bl	801df7c <gpio_set>
    itsdk_delayMs(ITSDK_MURATA_TCXO_WARMUP);
 8015b76:	2032      	movs	r0, #50	; 0x32
 8015b78:	f008 fb5c 	bl	801e234 <itsdk_delayMs>
  else
  {
	itsdk_delayMs(10);
    TCXO_OFF(); 
  }
}
 8015b7c:	e008      	b.n	8015b90 <SX1276SetXO+0x3a>
	itsdk_delayMs(10);
 8015b7e:	200a      	movs	r0, #10
 8015b80:	f008 fb58 	bl	801e234 <itsdk_delayMs>
    TCXO_OFF(); 
 8015b84:	2380      	movs	r3, #128	; 0x80
 8015b86:	015b      	lsls	r3, r3, #5
 8015b88:	0019      	movs	r1, r3
 8015b8a:	2000      	movs	r0, #0
 8015b8c:	f008 fa0e 	bl	801dfac <gpio_reset>
}
 8015b90:	46c0      	nop			; (mov r8, r8)
 8015b92:	46bd      	mov	sp, r7
 8015b94:	b002      	add	sp, #8
 8015b96:	bd80      	pop	{r7, pc}

08015b98 <SX1276IoInit>:
 * --
 * Ensure the IRQ are configured later by calling SX1276IoIrqInit or equivalent.
 * For sigfox STLL_Radio_IoInit does the job.
 */
void SX1276IoInit( void )
{
 8015b98:	b580      	push	{r7, lr}
 8015b9a:	af00      	add	r7, sp, #0
  LOG_INFO_SX1276((">> mSX1276IoInit\r\n"));

  SX1276BoardInit( &BoardCallbacks );
 8015b9c:	4b11      	ldr	r3, [pc, #68]	; (8015be4 <SX1276IoInit+0x4c>)
 8015b9e:	0018      	movs	r0, r3
 8015ba0:	f000 fa48 	bl	8016034 <SX1276BoardInit>
  if ( ITSDK_SX1276_DIO_0_PIN != __LP_GPIO_NONE ) {
     gpio_configure(ITSDK_SX1276_DIO_0_BANK, ITSDK_SX1276_DIO_0_PIN, GPIO_ANALOG );
 8015ba4:	220e      	movs	r2, #14
 8015ba6:	2110      	movs	r1, #16
 8015ba8:	2001      	movs	r0, #1
 8015baa:	f007 ffdf 	bl	801db6c <gpio_configure>
  }
  if ( ITSDK_SX1276_DIO_1_PIN != __LP_GPIO_NONE ) {
     gpio_configure(ITSDK_SX1276_DIO_1_BANK, ITSDK_SX1276_DIO_1_PIN, GPIO_ANALOG );
 8015bae:	220e      	movs	r2, #14
 8015bb0:	2102      	movs	r1, #2
 8015bb2:	2001      	movs	r0, #1
 8015bb4:	f007 ffda 	bl	801db6c <gpio_configure>
  }
  if ( ITSDK_SX1276_DIO_2_PIN != __LP_GPIO_NONE ) {
     gpio_configure(ITSDK_SX1276_DIO_2_BANK, ITSDK_SX1276_DIO_2_PIN, GPIO_ANALOG );
 8015bb8:	220e      	movs	r2, #14
 8015bba:	2101      	movs	r1, #1
 8015bbc:	2001      	movs	r0, #1
 8015bbe:	f007 ffd5 	bl	801db6c <gpio_configure>
  }
  if ( ITSDK_SX1276_DIO_3_PIN != __LP_GPIO_NONE ) {
    gpio_configure(ITSDK_SX1276_DIO_3_BANK, ITSDK_SX1276_DIO_3_PIN, GPIO_ANALOG );
 8015bc2:	2380      	movs	r3, #128	; 0x80
 8015bc4:	019b      	lsls	r3, r3, #6
 8015bc6:	220e      	movs	r2, #14
 8015bc8:	0019      	movs	r1, r3
 8015bca:	2002      	movs	r0, #2
 8015bcc:	f007 ffce 	bl	801db6c <gpio_configure>
#ifdef RADIO_DIO_5
  if ( ITSDK_SX1276_DIO_5_PIN != __LP_GPIO_NONE ) {
     gpio_configure(ITSDK_SX1276_DIO_5_BANK, ITSDK_SX1276_DIO_5_PIN, GPIO_ANALOG );
  }
#endif
  gpio_configure(ITSDK_SX1276_TCXO_VCC_BANK, ITSDK_SX1276_TCXO_VCC_PIN, GPIO_OUTPUT_PP );
 8015bd0:	2380      	movs	r3, #128	; 0x80
 8015bd2:	015b      	lsls	r3, r3, #5
 8015bd4:	2200      	movs	r2, #0
 8015bd6:	0019      	movs	r1, r3
 8015bd8:	2000      	movs	r0, #0
 8015bda:	f007 ffc7 	bl	801db6c <gpio_configure>

}
 8015bde:	46c0      	nop			; (mov r8, r8)
 8015be0:	46bd      	mov	sp, r7
 8015be2:	bd80      	pop	{r7, pc}
 8015be4:	20000080 	.word	0x20000080

08015be8 <SX1276IoIrqInit>:


gpio_irq_chain_t __sx1276_gpio_irq[6] = { 0 };
void SX1276IoIrqInit( DioIrqHandler **irqHandlers )
{
 8015be8:	b580      	push	{r7, lr}
 8015bea:	b082      	sub	sp, #8
 8015bec:	af00      	add	r7, sp, #0
 8015bee:	6078      	str	r0, [r7, #4]
	LOG_INFO_SX1276((">> mSX1276IoIrqInit\r\n"));


	if (ITSDK_SX1276_DIO_0_PIN != __LP_GPIO_NONE ) {
	    gpio_interruptClear(ITSDK_SX1276_DIO_0_BANK, ITSDK_SX1276_DIO_0_PIN);
 8015bf0:	2110      	movs	r1, #16
 8015bf2:	2001      	movs	r0, #1
 8015bf4:	f008 fa3e 	bl	801e074 <gpio_interruptClear>
	    gpio_configure(ITSDK_SX1276_DIO_0_BANK, ITSDK_SX1276_DIO_0_PIN, GPIO_INTERRUPT_RISING );
 8015bf8:	2207      	movs	r2, #7
 8015bfa:	2110      	movs	r1, #16
 8015bfc:	2001      	movs	r0, #1
 8015bfe:	f007 ffb5 	bl	801db6c <gpio_configure>
		gpio_interruptPriority(ITSDK_SX1276_DIO_0_BANK,ITSDK_SX1276_DIO_0_PIN,IRQ_HIGH_PRIORITY,0);
 8015c02:	2300      	movs	r3, #0
 8015c04:	2200      	movs	r2, #0
 8015c06:	2110      	movs	r1, #16
 8015c08:	2001      	movs	r0, #1
 8015c0a:	f008 fa0b 	bl	801e024 <gpio_interruptPriority>
		__sx1276_gpio_irq[0].irq_func = (void (*)(uint16_t))irqHandlers[0];
 8015c0e:	687b      	ldr	r3, [r7, #4]
 8015c10:	681a      	ldr	r2, [r3, #0]
 8015c12:	4b39      	ldr	r3, [pc, #228]	; (8015cf8 <SX1276IoIrqInit+0x110>)
 8015c14:	601a      	str	r2, [r3, #0]
		__sx1276_gpio_irq[0].pinMask = ITSDK_SX1276_DIO_0_PIN;
 8015c16:	4b38      	ldr	r3, [pc, #224]	; (8015cf8 <SX1276IoIrqInit+0x110>)
 8015c18:	2210      	movs	r2, #16
 8015c1a:	809a      	strh	r2, [r3, #4]
		gpio_registerIrqAction(&__sx1276_gpio_irq[0]);
 8015c1c:	4b36      	ldr	r3, [pc, #216]	; (8015cf8 <SX1276IoIrqInit+0x110>)
 8015c1e:	0018      	movs	r0, r3
 8015c20:	f008 fa80 	bl	801e124 <gpio_registerIrqAction>
		gpio_interruptEnable(ITSDK_SX1276_DIO_0_BANK, ITSDK_SX1276_DIO_0_PIN);
 8015c24:	2110      	movs	r1, #16
 8015c26:	2001      	movs	r0, #1
 8015c28:	f008 f9d8 	bl	801dfdc <gpio_interruptEnable>
	}

	if (ITSDK_SX1276_DIO_1_PIN != __LP_GPIO_NONE ) {
	    gpio_interruptClear(ITSDK_SX1276_DIO_1_BANK, ITSDK_SX1276_DIO_1_PIN);
 8015c2c:	2102      	movs	r1, #2
 8015c2e:	2001      	movs	r0, #1
 8015c30:	f008 fa20 	bl	801e074 <gpio_interruptClear>
	    gpio_configure(ITSDK_SX1276_DIO_1_BANK, ITSDK_SX1276_DIO_1_PIN, GPIO_INTERRUPT_RISING );
 8015c34:	2207      	movs	r2, #7
 8015c36:	2102      	movs	r1, #2
 8015c38:	2001      	movs	r0, #1
 8015c3a:	f007 ff97 	bl	801db6c <gpio_configure>
  	    gpio_interruptPriority(ITSDK_SX1276_DIO_1_BANK,ITSDK_SX1276_DIO_1_PIN,IRQ_HIGH_PRIORITY,0);
 8015c3e:	2300      	movs	r3, #0
 8015c40:	2200      	movs	r2, #0
 8015c42:	2102      	movs	r1, #2
 8015c44:	2001      	movs	r0, #1
 8015c46:	f008 f9ed 	bl	801e024 <gpio_interruptPriority>
		__sx1276_gpio_irq[1].irq_func = (void (*)(uint16_t))irqHandlers[1];
 8015c4a:	687b      	ldr	r3, [r7, #4]
 8015c4c:	685a      	ldr	r2, [r3, #4]
 8015c4e:	4b2a      	ldr	r3, [pc, #168]	; (8015cf8 <SX1276IoIrqInit+0x110>)
 8015c50:	60da      	str	r2, [r3, #12]
		__sx1276_gpio_irq[1].pinMask = ITSDK_SX1276_DIO_1_PIN;
 8015c52:	4b29      	ldr	r3, [pc, #164]	; (8015cf8 <SX1276IoIrqInit+0x110>)
 8015c54:	2202      	movs	r2, #2
 8015c56:	821a      	strh	r2, [r3, #16]
		gpio_registerIrqAction(&__sx1276_gpio_irq[1]);
 8015c58:	4b28      	ldr	r3, [pc, #160]	; (8015cfc <SX1276IoIrqInit+0x114>)
 8015c5a:	0018      	movs	r0, r3
 8015c5c:	f008 fa62 	bl	801e124 <gpio_registerIrqAction>
		gpio_interruptEnable(ITSDK_SX1276_DIO_1_BANK, ITSDK_SX1276_DIO_1_PIN);
 8015c60:	2102      	movs	r1, #2
 8015c62:	2001      	movs	r0, #1
 8015c64:	f008 f9ba 	bl	801dfdc <gpio_interruptEnable>
	}

	if (ITSDK_SX1276_DIO_2_PIN != __LP_GPIO_NONE ) {
	    gpio_interruptClear(ITSDK_SX1276_DIO_2_BANK, ITSDK_SX1276_DIO_2_PIN);
 8015c68:	2101      	movs	r1, #1
 8015c6a:	2001      	movs	r0, #1
 8015c6c:	f008 fa02 	bl	801e074 <gpio_interruptClear>
	    gpio_configure(ITSDK_SX1276_DIO_2_BANK, ITSDK_SX1276_DIO_2_PIN, GPIO_INTERRUPT_RISING );
 8015c70:	2207      	movs	r2, #7
 8015c72:	2101      	movs	r1, #1
 8015c74:	2001      	movs	r0, #1
 8015c76:	f007 ff79 	bl	801db6c <gpio_configure>
		gpio_interruptPriority(ITSDK_SX1276_DIO_2_BANK,ITSDK_SX1276_DIO_2_PIN,IRQ_HIGH_PRIORITY,0);
 8015c7a:	2300      	movs	r3, #0
 8015c7c:	2200      	movs	r2, #0
 8015c7e:	2101      	movs	r1, #1
 8015c80:	2001      	movs	r0, #1
 8015c82:	f008 f9cf 	bl	801e024 <gpio_interruptPriority>
		__sx1276_gpio_irq[2].irq_func = (void (*)(uint16_t))irqHandlers[2];
 8015c86:	687b      	ldr	r3, [r7, #4]
 8015c88:	689a      	ldr	r2, [r3, #8]
 8015c8a:	4b1b      	ldr	r3, [pc, #108]	; (8015cf8 <SX1276IoIrqInit+0x110>)
 8015c8c:	619a      	str	r2, [r3, #24]
		__sx1276_gpio_irq[2].pinMask = ITSDK_SX1276_DIO_2_PIN;
 8015c8e:	4b1a      	ldr	r3, [pc, #104]	; (8015cf8 <SX1276IoIrqInit+0x110>)
 8015c90:	2201      	movs	r2, #1
 8015c92:	839a      	strh	r2, [r3, #28]
		gpio_registerIrqAction(&__sx1276_gpio_irq[2]);
 8015c94:	4b1a      	ldr	r3, [pc, #104]	; (8015d00 <SX1276IoIrqInit+0x118>)
 8015c96:	0018      	movs	r0, r3
 8015c98:	f008 fa44 	bl	801e124 <gpio_registerIrqAction>
		gpio_interruptEnable(ITSDK_SX1276_DIO_2_BANK, ITSDK_SX1276_DIO_2_PIN);
 8015c9c:	2101      	movs	r1, #1
 8015c9e:	2001      	movs	r0, #1
 8015ca0:	f008 f99c 	bl	801dfdc <gpio_interruptEnable>
	}

	if (ITSDK_SX1276_DIO_3_PIN != __LP_GPIO_NONE ) {
	    gpio_interruptClear(ITSDK_SX1276_DIO_3_BANK, ITSDK_SX1276_DIO_3_PIN);
 8015ca4:	2380      	movs	r3, #128	; 0x80
 8015ca6:	019b      	lsls	r3, r3, #6
 8015ca8:	0019      	movs	r1, r3
 8015caa:	2002      	movs	r0, #2
 8015cac:	f008 f9e2 	bl	801e074 <gpio_interruptClear>
	    gpio_configure(ITSDK_SX1276_DIO_3_BANK, ITSDK_SX1276_DIO_3_PIN, GPIO_INTERRUPT_RISING );
 8015cb0:	2380      	movs	r3, #128	; 0x80
 8015cb2:	019b      	lsls	r3, r3, #6
 8015cb4:	2207      	movs	r2, #7
 8015cb6:	0019      	movs	r1, r3
 8015cb8:	2002      	movs	r0, #2
 8015cba:	f007 ff57 	bl	801db6c <gpio_configure>
		gpio_interruptPriority(ITSDK_SX1276_DIO_3_BANK,ITSDK_SX1276_DIO_3_PIN,IRQ_HIGH_PRIORITY,0);
 8015cbe:	2380      	movs	r3, #128	; 0x80
 8015cc0:	0199      	lsls	r1, r3, #6
 8015cc2:	2300      	movs	r3, #0
 8015cc4:	2200      	movs	r2, #0
 8015cc6:	2002      	movs	r0, #2
 8015cc8:	f008 f9ac 	bl	801e024 <gpio_interruptPriority>
		__sx1276_gpio_irq[3].irq_func = (void (*)(uint16_t))irqHandlers[3];
 8015ccc:	687b      	ldr	r3, [r7, #4]
 8015cce:	68da      	ldr	r2, [r3, #12]
 8015cd0:	4b09      	ldr	r3, [pc, #36]	; (8015cf8 <SX1276IoIrqInit+0x110>)
 8015cd2:	625a      	str	r2, [r3, #36]	; 0x24
		__sx1276_gpio_irq[3].pinMask = ITSDK_SX1276_DIO_3_PIN;
 8015cd4:	4b08      	ldr	r3, [pc, #32]	; (8015cf8 <SX1276IoIrqInit+0x110>)
 8015cd6:	2280      	movs	r2, #128	; 0x80
 8015cd8:	0192      	lsls	r2, r2, #6
 8015cda:	851a      	strh	r2, [r3, #40]	; 0x28
		gpio_registerIrqAction(&__sx1276_gpio_irq[3]);
 8015cdc:	4b09      	ldr	r3, [pc, #36]	; (8015d04 <SX1276IoIrqInit+0x11c>)
 8015cde:	0018      	movs	r0, r3
 8015ce0:	f008 fa20 	bl	801e124 <gpio_registerIrqAction>
		gpio_interruptEnable(ITSDK_SX1276_DIO_3_BANK, ITSDK_SX1276_DIO_3_PIN);
 8015ce4:	2380      	movs	r3, #128	; 0x80
 8015ce6:	019b      	lsls	r3, r3, #6
 8015ce8:	0019      	movs	r1, r3
 8015cea:	2002      	movs	r0, #2
 8015cec:	f008 f976 	bl	801dfdc <gpio_interruptEnable>
    if ( ITSDK_SX1276_DIO_5_PIN != __LP_GPIO_NONE ) {
        gpio_configure(ITSDK_SX1276_DIO_5_BANK, ITSDK_SX1276_DIO_5_PIN, GPIO_INTERRUPT_RISING );
    }
#endif

}
 8015cf0:	46c0      	nop			; (mov r8, r8)
 8015cf2:	46bd      	mov	sp, r7
 8015cf4:	b002      	add	sp, #8
 8015cf6:	bd80      	pop	{r7, pc}
 8015cf8:	20001054 	.word	0x20001054
 8015cfc:	20001060 	.word	0x20001060
 8015d00:	2000106c 	.word	0x2000106c
 8015d04:	20001078 	.word	0x20001078

08015d08 <SX1276IoDeInit>:



void SX1276IoDeInit( void )
{
 8015d08:	b580      	push	{r7, lr}
 8015d0a:	af00      	add	r7, sp, #0

  LOG_INFO_SX1276((">> mSX1276IoDeInit\r\n"));
	if (ITSDK_SX1276_DIO_0_PIN != __LP_GPIO_NONE ) {
		gpio_configure(ITSDK_SX1276_DIO_0_BANK, ITSDK_SX1276_DIO_0_PIN, GPIO_ANALOG );
 8015d0c:	220e      	movs	r2, #14
 8015d0e:	2110      	movs	r1, #16
 8015d10:	2001      	movs	r0, #1
 8015d12:	f007 ff2b 	bl	801db6c <gpio_configure>
	    gpio_interruptClear(ITSDK_SX1276_DIO_0_BANK, ITSDK_SX1276_DIO_0_PIN);
 8015d16:	2110      	movs	r1, #16
 8015d18:	2001      	movs	r0, #1
 8015d1a:	f008 f9ab 	bl	801e074 <gpio_interruptClear>
	}
	if (ITSDK_SX1276_DIO_1_PIN != __LP_GPIO_NONE ) {
		gpio_configure(ITSDK_SX1276_DIO_1_BANK, ITSDK_SX1276_DIO_1_PIN, GPIO_ANALOG );
 8015d1e:	220e      	movs	r2, #14
 8015d20:	2102      	movs	r1, #2
 8015d22:	2001      	movs	r0, #1
 8015d24:	f007 ff22 	bl	801db6c <gpio_configure>
	    gpio_interruptClear(ITSDK_SX1276_DIO_1_BANK, ITSDK_SX1276_DIO_1_PIN);
 8015d28:	2102      	movs	r1, #2
 8015d2a:	2001      	movs	r0, #1
 8015d2c:	f008 f9a2 	bl	801e074 <gpio_interruptClear>
	}
	if (ITSDK_SX1276_DIO_2_PIN != __LP_GPIO_NONE ) {
		gpio_configure(ITSDK_SX1276_DIO_2_BANK, ITSDK_SX1276_DIO_2_PIN, GPIO_ANALOG );
 8015d30:	220e      	movs	r2, #14
 8015d32:	2101      	movs	r1, #1
 8015d34:	2001      	movs	r0, #1
 8015d36:	f007 ff19 	bl	801db6c <gpio_configure>
	    gpio_interruptClear(ITSDK_SX1276_DIO_2_BANK, ITSDK_SX1276_DIO_2_PIN);
 8015d3a:	2101      	movs	r1, #1
 8015d3c:	2001      	movs	r0, #1
 8015d3e:	f008 f999 	bl	801e074 <gpio_interruptClear>
	}
	if (ITSDK_SX1276_DIO_3_PIN != __LP_GPIO_NONE ) {
		gpio_configure(ITSDK_SX1276_DIO_3_BANK, ITSDK_SX1276_DIO_3_PIN, GPIO_ANALOG );
 8015d42:	2380      	movs	r3, #128	; 0x80
 8015d44:	019b      	lsls	r3, r3, #6
 8015d46:	220e      	movs	r2, #14
 8015d48:	0019      	movs	r1, r3
 8015d4a:	2002      	movs	r0, #2
 8015d4c:	f007 ff0e 	bl	801db6c <gpio_configure>
	    gpio_interruptClear(ITSDK_SX1276_DIO_3_BANK, ITSDK_SX1276_DIO_3_PIN);
 8015d50:	2380      	movs	r3, #128	; 0x80
 8015d52:	019b      	lsls	r3, r3, #6
 8015d54:	0019      	movs	r1, r3
 8015d56:	2002      	movs	r0, #2
 8015d58:	f008 f98c 	bl	801e074 <gpio_interruptClear>
	if (ITSDK_SX1276_DIO_5_PIN != __LP_GPIO_NONE ) {
		gpio_configure(ITSDK_SX1276_DIO_5_BANK, ITSDK_SX1276_DIO_5_PIN, GPIO_ANALOG );
	    gpio_interruptClear(ITSDK_SX1276_DIO_5_BANK, ITSDK_SX1276_DIO_5_PIN);
	}
#endif
}
 8015d5c:	46c0      	nop			; (mov r8, r8)
 8015d5e:	46bd      	mov	sp, r7
 8015d60:	bd80      	pop	{r7, pc}

08015d62 <SX1276SetRfTxPower>:


void SX1276SetRfTxPower( int8_t power )
{
 8015d62:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015d64:	b085      	sub	sp, #20
 8015d66:	af00      	add	r7, sp, #0
 8015d68:	0002      	movs	r2, r0
 8015d6a:	1dfb      	adds	r3, r7, #7
 8015d6c:	701a      	strb	r2, [r3, #0]
	LOG_INFO_SX1276((">> mSX1276SetRfTxPower (%d)\r\n",power));

    uint8_t paConfig = 0;
 8015d6e:	250f      	movs	r5, #15
 8015d70:	197b      	adds	r3, r7, r5
 8015d72:	2200      	movs	r2, #0
 8015d74:	701a      	strb	r2, [r3, #0]
    uint8_t paDac = 0;
 8015d76:	260e      	movs	r6, #14
 8015d78:	19bb      	adds	r3, r7, r6
 8015d7a:	2200      	movs	r2, #0
 8015d7c:	701a      	strb	r2, [r3, #0]
	#ifdef ITSDK_RADIO_POWER_OFFSET
    power += ITSDK_RADIO_POWER_OFFSET;
	#endif


    paConfig = SX1276Read( REG_PACONFIG );
 8015d7e:	197c      	adds	r4, r7, r5
 8015d80:	2009      	movs	r0, #9
 8015d82:	f001 fe49 	bl	8017a18 <SX1276Read>
 8015d86:	0003      	movs	r3, r0
 8015d88:	7023      	strb	r3, [r4, #0]
    paDac = SX1276Read( REG_PADAC );
 8015d8a:	19bc      	adds	r4, r7, r6
 8015d8c:	204d      	movs	r0, #77	; 0x4d
 8015d8e:	f001 fe43 	bl	8017a18 <SX1276Read>
 8015d92:	0003      	movs	r3, r0
 8015d94:	7023      	strb	r3, [r4, #0]

    paConfig = ( paConfig & RF_PACONFIG_PASELECT_MASK ) | SX1276GetPaSelect( power );
 8015d96:	197b      	adds	r3, r7, r5
 8015d98:	781b      	ldrb	r3, [r3, #0]
 8015d9a:	b25b      	sxtb	r3, r3
 8015d9c:	227f      	movs	r2, #127	; 0x7f
 8015d9e:	4013      	ands	r3, r2
 8015da0:	b25c      	sxtb	r4, r3
 8015da2:	1dfb      	adds	r3, r7, #7
 8015da4:	781b      	ldrb	r3, [r3, #0]
 8015da6:	0018      	movs	r0, r3
 8015da8:	f000 f8ae 	bl	8015f08 <SX1276GetPaSelect>
 8015dac:	0003      	movs	r3, r0
 8015dae:	b25b      	sxtb	r3, r3
 8015db0:	4323      	orrs	r3, r4
 8015db2:	b25a      	sxtb	r2, r3
 8015db4:	197b      	adds	r3, r7, r5
 8015db6:	701a      	strb	r2, [r3, #0]
    paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK ) | 0x70;
 8015db8:	197b      	adds	r3, r7, r5
 8015dba:	197a      	adds	r2, r7, r5
 8015dbc:	7812      	ldrb	r2, [r2, #0]
 8015dbe:	2170      	movs	r1, #112	; 0x70
 8015dc0:	430a      	orrs	r2, r1
 8015dc2:	701a      	strb	r2, [r3, #0]

    if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST )
 8015dc4:	197b      	adds	r3, r7, r5
 8015dc6:	781b      	ldrb	r3, [r3, #0]
 8015dc8:	b25b      	sxtb	r3, r3
 8015dca:	2b00      	cmp	r3, #0
 8015dcc:	da67      	bge.n	8015e9e <SX1276SetRfTxPower+0x13c>
    {
        if( power > 17 )
 8015dce:	1dfb      	adds	r3, r7, #7
 8015dd0:	781b      	ldrb	r3, [r3, #0]
 8015dd2:	b25b      	sxtb	r3, r3
 8015dd4:	2b11      	cmp	r3, #17
 8015dd6:	dd07      	ble.n	8015de8 <SX1276SetRfTxPower+0x86>
        {
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_ON;
 8015dd8:	220e      	movs	r2, #14
 8015dda:	18bb      	adds	r3, r7, r2
 8015ddc:	18ba      	adds	r2, r7, r2
 8015dde:	7812      	ldrb	r2, [r2, #0]
 8015de0:	2107      	movs	r1, #7
 8015de2:	430a      	orrs	r2, r1
 8015de4:	701a      	strb	r2, [r3, #0]
 8015de6:	e00b      	b.n	8015e00 <SX1276SetRfTxPower+0x9e>
        }
        else
        {
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_OFF;
 8015de8:	210e      	movs	r1, #14
 8015dea:	187b      	adds	r3, r7, r1
 8015dec:	781b      	ldrb	r3, [r3, #0]
 8015dee:	b25b      	sxtb	r3, r3
 8015df0:	2207      	movs	r2, #7
 8015df2:	4393      	bics	r3, r2
 8015df4:	b25b      	sxtb	r3, r3
 8015df6:	2204      	movs	r2, #4
 8015df8:	4313      	orrs	r3, r2
 8015dfa:	b25a      	sxtb	r2, r3
 8015dfc:	187b      	adds	r3, r7, r1
 8015dfe:	701a      	strb	r2, [r3, #0]
        }
        if( ( paDac & RF_PADAC_20DBM_ON ) == RF_PADAC_20DBM_ON )
 8015e00:	230e      	movs	r3, #14
 8015e02:	18fb      	adds	r3, r7, r3
 8015e04:	781b      	ldrb	r3, [r3, #0]
 8015e06:	2207      	movs	r2, #7
 8015e08:	4013      	ands	r3, r2
 8015e0a:	2b07      	cmp	r3, #7
 8015e0c:	d123      	bne.n	8015e56 <SX1276SetRfTxPower+0xf4>
        {
            if( power < 5 )
 8015e0e:	1dfb      	adds	r3, r7, #7
 8015e10:	781b      	ldrb	r3, [r3, #0]
 8015e12:	b25b      	sxtb	r3, r3
 8015e14:	2b04      	cmp	r3, #4
 8015e16:	dc02      	bgt.n	8015e1e <SX1276SetRfTxPower+0xbc>
            {
                power = 5;
 8015e18:	1dfb      	adds	r3, r7, #7
 8015e1a:	2205      	movs	r2, #5
 8015e1c:	701a      	strb	r2, [r3, #0]
            }
            if( power > 20 )
 8015e1e:	1dfb      	adds	r3, r7, #7
 8015e20:	781b      	ldrb	r3, [r3, #0]
 8015e22:	b25b      	sxtb	r3, r3
 8015e24:	2b14      	cmp	r3, #20
 8015e26:	dd02      	ble.n	8015e2e <SX1276SetRfTxPower+0xcc>
            {
                power = 20;
 8015e28:	1dfb      	adds	r3, r7, #7
 8015e2a:	2214      	movs	r2, #20
 8015e2c:	701a      	strb	r2, [r3, #0]
            }
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 5 ) & 0x0F );
 8015e2e:	200f      	movs	r0, #15
 8015e30:	183b      	adds	r3, r7, r0
 8015e32:	781b      	ldrb	r3, [r3, #0]
 8015e34:	b25b      	sxtb	r3, r3
 8015e36:	220f      	movs	r2, #15
 8015e38:	4393      	bics	r3, r2
 8015e3a:	b25a      	sxtb	r2, r3
 8015e3c:	1dfb      	adds	r3, r7, #7
 8015e3e:	781b      	ldrb	r3, [r3, #0]
 8015e40:	3b05      	subs	r3, #5
 8015e42:	b2db      	uxtb	r3, r3
 8015e44:	b25b      	sxtb	r3, r3
 8015e46:	210f      	movs	r1, #15
 8015e48:	400b      	ands	r3, r1
 8015e4a:	b25b      	sxtb	r3, r3
 8015e4c:	4313      	orrs	r3, r2
 8015e4e:	b25a      	sxtb	r2, r3
 8015e50:	183b      	adds	r3, r7, r0
 8015e52:	701a      	strb	r2, [r3, #0]
 8015e54:	e046      	b.n	8015ee4 <SX1276SetRfTxPower+0x182>
        }
        else
        {
            if( power < 2 )
 8015e56:	1dfb      	adds	r3, r7, #7
 8015e58:	781b      	ldrb	r3, [r3, #0]
 8015e5a:	b25b      	sxtb	r3, r3
 8015e5c:	2b01      	cmp	r3, #1
 8015e5e:	dc02      	bgt.n	8015e66 <SX1276SetRfTxPower+0x104>
            {
                power = 2;
 8015e60:	1dfb      	adds	r3, r7, #7
 8015e62:	2202      	movs	r2, #2
 8015e64:	701a      	strb	r2, [r3, #0]
            }
            if( power > 17 )
 8015e66:	1dfb      	adds	r3, r7, #7
 8015e68:	781b      	ldrb	r3, [r3, #0]
 8015e6a:	b25b      	sxtb	r3, r3
 8015e6c:	2b11      	cmp	r3, #17
 8015e6e:	dd02      	ble.n	8015e76 <SX1276SetRfTxPower+0x114>
            {
                power = 17;
 8015e70:	1dfb      	adds	r3, r7, #7
 8015e72:	2211      	movs	r2, #17
 8015e74:	701a      	strb	r2, [r3, #0]
            }
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 2 ) & 0x0F );
 8015e76:	200f      	movs	r0, #15
 8015e78:	183b      	adds	r3, r7, r0
 8015e7a:	781b      	ldrb	r3, [r3, #0]
 8015e7c:	b25b      	sxtb	r3, r3
 8015e7e:	220f      	movs	r2, #15
 8015e80:	4393      	bics	r3, r2
 8015e82:	b25a      	sxtb	r2, r3
 8015e84:	1dfb      	adds	r3, r7, #7
 8015e86:	781b      	ldrb	r3, [r3, #0]
 8015e88:	3b02      	subs	r3, #2
 8015e8a:	b2db      	uxtb	r3, r3
 8015e8c:	b25b      	sxtb	r3, r3
 8015e8e:	210f      	movs	r1, #15
 8015e90:	400b      	ands	r3, r1
 8015e92:	b25b      	sxtb	r3, r3
 8015e94:	4313      	orrs	r3, r2
 8015e96:	b25a      	sxtb	r2, r3
 8015e98:	183b      	adds	r3, r7, r0
 8015e9a:	701a      	strb	r2, [r3, #0]
 8015e9c:	e022      	b.n	8015ee4 <SX1276SetRfTxPower+0x182>
        }
    }
    else
    {
        if( power < -1 )
 8015e9e:	1dfb      	adds	r3, r7, #7
 8015ea0:	781b      	ldrb	r3, [r3, #0]
 8015ea2:	b25b      	sxtb	r3, r3
 8015ea4:	3301      	adds	r3, #1
 8015ea6:	da02      	bge.n	8015eae <SX1276SetRfTxPower+0x14c>
        {
            power = -1;
 8015ea8:	1dfb      	adds	r3, r7, #7
 8015eaa:	22ff      	movs	r2, #255	; 0xff
 8015eac:	701a      	strb	r2, [r3, #0]
        }
        if( power > 14 )
 8015eae:	1dfb      	adds	r3, r7, #7
 8015eb0:	781b      	ldrb	r3, [r3, #0]
 8015eb2:	b25b      	sxtb	r3, r3
 8015eb4:	2b0e      	cmp	r3, #14
 8015eb6:	dd02      	ble.n	8015ebe <SX1276SetRfTxPower+0x15c>
        {
            power = 14;
 8015eb8:	1dfb      	adds	r3, r7, #7
 8015eba:	220e      	movs	r2, #14
 8015ebc:	701a      	strb	r2, [r3, #0]
        }
        paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power + 1 ) & 0x0F );
 8015ebe:	200f      	movs	r0, #15
 8015ec0:	183b      	adds	r3, r7, r0
 8015ec2:	781b      	ldrb	r3, [r3, #0]
 8015ec4:	b25b      	sxtb	r3, r3
 8015ec6:	220f      	movs	r2, #15
 8015ec8:	4393      	bics	r3, r2
 8015eca:	b25a      	sxtb	r2, r3
 8015ecc:	1dfb      	adds	r3, r7, #7
 8015ece:	781b      	ldrb	r3, [r3, #0]
 8015ed0:	3301      	adds	r3, #1
 8015ed2:	b2db      	uxtb	r3, r3
 8015ed4:	b25b      	sxtb	r3, r3
 8015ed6:	210f      	movs	r1, #15
 8015ed8:	400b      	ands	r3, r1
 8015eda:	b25b      	sxtb	r3, r3
 8015edc:	4313      	orrs	r3, r2
 8015ede:	b25a      	sxtb	r2, r3
 8015ee0:	183b      	adds	r3, r7, r0
 8015ee2:	701a      	strb	r2, [r3, #0]
    }
    SX1276Write( REG_PACONFIG, paConfig );
 8015ee4:	230f      	movs	r3, #15
 8015ee6:	18fb      	adds	r3, r7, r3
 8015ee8:	781b      	ldrb	r3, [r3, #0]
 8015eea:	0019      	movs	r1, r3
 8015eec:	2009      	movs	r0, #9
 8015eee:	f001 fd7f 	bl	80179f0 <SX1276Write>
    SX1276Write( REG_PADAC, paDac );
 8015ef2:	230e      	movs	r3, #14
 8015ef4:	18fb      	adds	r3, r7, r3
 8015ef6:	781b      	ldrb	r3, [r3, #0]
 8015ef8:	0019      	movs	r1, r3
 8015efa:	204d      	movs	r0, #77	; 0x4d
 8015efc:	f001 fd78 	bl	80179f0 <SX1276Write>
}
 8015f00:	46c0      	nop			; (mov r8, r8)
 8015f02:	46bd      	mov	sp, r7
 8015f04:	b005      	add	sp, #20
 8015f06:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015f08 <SX1276GetPaSelect>:

uint8_t SX1276GetPaSelect( uint8_t power )
{
 8015f08:	b580      	push	{r7, lr}
 8015f0a:	b082      	sub	sp, #8
 8015f0c:	af00      	add	r7, sp, #0
 8015f0e:	0002      	movs	r2, r0
 8015f10:	1dfb      	adds	r3, r7, #7
 8015f12:	701a      	strb	r2, [r3, #0]
	LOG_INFO_SX1276((">> mSX1276GetPaSelect\r\n"));

    if (power >14)
 8015f14:	1dfb      	adds	r3, r7, #7
 8015f16:	781b      	ldrb	r3, [r3, #0]
 8015f18:	2b0e      	cmp	r3, #14
 8015f1a:	d901      	bls.n	8015f20 <SX1276GetPaSelect+0x18>
    {
        return RF_PACONFIG_PASELECT_PABOOST;
 8015f1c:	2380      	movs	r3, #128	; 0x80
 8015f1e:	e000      	b.n	8015f22 <SX1276GetPaSelect+0x1a>
    }
    else
    {
        return RF_PACONFIG_PASELECT_RFO;
 8015f20:	2300      	movs	r3, #0
    }
}
 8015f22:	0018      	movs	r0, r3
 8015f24:	46bd      	mov	sp, r7
 8015f26:	b002      	add	sp, #8
 8015f28:	bd80      	pop	{r7, pc}

08015f2a <SX1276SetAntSwLowPower>:

/**
 * Switch PA Low power (true) or Full power (false)
 */
void SX1276SetAntSwLowPower( bool status )
{
 8015f2a:	b580      	push	{r7, lr}
 8015f2c:	b082      	sub	sp, #8
 8015f2e:	af00      	add	r7, sp, #0
 8015f30:	0002      	movs	r2, r0
 8015f32:	1dfb      	adds	r3, r7, #7
 8015f34:	701a      	strb	r2, [r3, #0]
	LOG_INFO_SX1276((">> mSX1276SetAntSwLowPower (%s)\r\n",((status)?"LP":"FP")));

    if( status == false )
 8015f36:	1dfb      	adds	r3, r7, #7
 8015f38:	781b      	ldrb	r3, [r3, #0]
 8015f3a:	2201      	movs	r2, #1
 8015f3c:	4053      	eors	r3, r2
 8015f3e:	b2db      	uxtb	r3, r3
 8015f40:	2b00      	cmp	r3, #0
 8015f42:	d01b      	beq.n	8015f7c <SX1276SetAntSwLowPower+0x52>
    {
    	// FP
    	gpio_configure(ITSDK_MURATA_ANTSW_RX_BANK, ITSDK_MURATA_ANTSW_RX_PIN, GPIO_OUTPUT_PP );
 8015f44:	2200      	movs	r2, #0
 8015f46:	2102      	movs	r1, #2
 8015f48:	2000      	movs	r0, #0
 8015f4a:	f007 fe0f 	bl	801db6c <gpio_configure>
    	gpio_reset(ITSDK_MURATA_ANTSW_RX_BANK,ITSDK_MURATA_ANTSW_RX_PIN);
 8015f4e:	2102      	movs	r1, #2
 8015f50:	2000      	movs	r0, #0
 8015f52:	f008 f82b 	bl	801dfac <gpio_reset>
    	gpio_configure(ITSDK_MURATA_ANTSW_TXBOOST_BANK, ITSDK_MURATA_ANTSW_TXBOOST_PIN, GPIO_OUTPUT_PP );
 8015f56:	2200      	movs	r2, #0
 8015f58:	2102      	movs	r1, #2
 8015f5a:	2002      	movs	r0, #2
 8015f5c:	f007 fe06 	bl	801db6c <gpio_configure>
    	gpio_reset(ITSDK_MURATA_ANTSW_TXBOOST_BANK,ITSDK_MURATA_ANTSW_TXBOOST_PIN);
 8015f60:	2102      	movs	r1, #2
 8015f62:	2002      	movs	r0, #2
 8015f64:	f008 f822 	bl	801dfac <gpio_reset>
    	gpio_configure(ITSDK_MURATA_ANTSW_TXRFO_BANK, ITSDK_MURATA_ANTSW_TXRFO_PIN, GPIO_OUTPUT_PP );
 8015f68:	2200      	movs	r2, #0
 8015f6a:	2104      	movs	r1, #4
 8015f6c:	2002      	movs	r0, #2
 8015f6e:	f007 fdfd 	bl	801db6c <gpio_configure>
    	gpio_reset(ITSDK_MURATA_ANTSW_TXRFO_BANK,ITSDK_MURATA_ANTSW_TXRFO_PIN);
 8015f72:	2104      	movs	r1, #4
 8015f74:	2002      	movs	r0, #2
 8015f76:	f008 f819 	bl	801dfac <gpio_reset>
    	gpio_configure(ITSDK_MURATA_ANTSW_TXBOOST_BANK, ITSDK_MURATA_ANTSW_TXBOOST_PIN, GPIO_ANALOG );
    	gpio_reset(ITSDK_MURATA_ANTSW_TXBOOST_BANK,ITSDK_MURATA_ANTSW_TXBOOST_PIN);
    	gpio_configure(ITSDK_MURATA_ANTSW_TXRFO_BANK, ITSDK_MURATA_ANTSW_TXRFO_PIN, GPIO_ANALOG );
    	gpio_reset(ITSDK_MURATA_ANTSW_TXRFO_BANK,ITSDK_MURATA_ANTSW_TXRFO_PIN);
    }
}
 8015f7a:	e01a      	b.n	8015fb2 <SX1276SetAntSwLowPower+0x88>
    	gpio_configure(ITSDK_MURATA_ANTSW_RX_BANK, ITSDK_MURATA_ANTSW_RX_PIN, GPIO_ANALOG );
 8015f7c:	220e      	movs	r2, #14
 8015f7e:	2102      	movs	r1, #2
 8015f80:	2000      	movs	r0, #0
 8015f82:	f007 fdf3 	bl	801db6c <gpio_configure>
    	gpio_reset(ITSDK_MURATA_ANTSW_RX_BANK,ITSDK_MURATA_ANTSW_RX_PIN);
 8015f86:	2102      	movs	r1, #2
 8015f88:	2000      	movs	r0, #0
 8015f8a:	f008 f80f 	bl	801dfac <gpio_reset>
    	gpio_configure(ITSDK_MURATA_ANTSW_TXBOOST_BANK, ITSDK_MURATA_ANTSW_TXBOOST_PIN, GPIO_ANALOG );
 8015f8e:	220e      	movs	r2, #14
 8015f90:	2102      	movs	r1, #2
 8015f92:	2002      	movs	r0, #2
 8015f94:	f007 fdea 	bl	801db6c <gpio_configure>
    	gpio_reset(ITSDK_MURATA_ANTSW_TXBOOST_BANK,ITSDK_MURATA_ANTSW_TXBOOST_PIN);
 8015f98:	2102      	movs	r1, #2
 8015f9a:	2002      	movs	r0, #2
 8015f9c:	f008 f806 	bl	801dfac <gpio_reset>
    	gpio_configure(ITSDK_MURATA_ANTSW_TXRFO_BANK, ITSDK_MURATA_ANTSW_TXRFO_PIN, GPIO_ANALOG );
 8015fa0:	220e      	movs	r2, #14
 8015fa2:	2104      	movs	r1, #4
 8015fa4:	2002      	movs	r0, #2
 8015fa6:	f007 fde1 	bl	801db6c <gpio_configure>
    	gpio_reset(ITSDK_MURATA_ANTSW_TXRFO_BANK,ITSDK_MURATA_ANTSW_TXRFO_PIN);
 8015faa:	2104      	movs	r1, #4
 8015fac:	2002      	movs	r0, #2
 8015fae:	f007 fffd 	bl	801dfac <gpio_reset>
}
 8015fb2:	46c0      	nop			; (mov r8, r8)
 8015fb4:	46bd      	mov	sp, r7
 8015fb6:	b002      	add	sp, #8
 8015fb8:	bd80      	pop	{r7, pc}
	...

08015fbc <SX1276SetAntSw>:

void SX1276SetAntSw( uint8_t opMode )
{
 8015fbc:	b590      	push	{r4, r7, lr}
 8015fbe:	b085      	sub	sp, #20
 8015fc0:	af00      	add	r7, sp, #0
 8015fc2:	0002      	movs	r2, r0
 8015fc4:	1dfb      	adds	r3, r7, #7
 8015fc6:	701a      	strb	r2, [r3, #0]
	LOG_INFO_SX1276((">> mSX1276SetAntSw (%d)\r\n",opMode));

    uint8_t paConfig =  SX1276Read( REG_PACONFIG );
 8015fc8:	230f      	movs	r3, #15
 8015fca:	18fc      	adds	r4, r7, r3
 8015fcc:	2009      	movs	r0, #9
 8015fce:	f001 fd23 	bl	8017a18 <SX1276Read>
 8015fd2:	0003      	movs	r3, r0
 8015fd4:	7023      	strb	r3, [r4, #0]
    switch( opMode )
 8015fd6:	1dfb      	adds	r3, r7, #7
 8015fd8:	781b      	ldrb	r3, [r3, #0]
 8015fda:	2b03      	cmp	r3, #3
 8015fdc:	d112      	bne.n	8016004 <SX1276SetAntSw+0x48>
    {
    case RFLR_OPMODE_TRANSMITTER:
      if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST ) {
 8015fde:	230f      	movs	r3, #15
 8015fe0:	18fb      	adds	r3, r7, r3
 8015fe2:	781b      	ldrb	r3, [r3, #0]
 8015fe4:	b25b      	sxtb	r3, r3
 8015fe6:	2b00      	cmp	r3, #0
 8015fe8:	da04      	bge.n	8015ff4 <SX1276SetAntSw+0x38>
    	LOG_INFO_SX1276(("   PABOOST\r\n"));
    	gpio_set(ITSDK_MURATA_ANTSW_TXBOOST_BANK,ITSDK_MURATA_ANTSW_TXBOOST_PIN);
 8015fea:	2102      	movs	r1, #2
 8015fec:	2002      	movs	r0, #2
 8015fee:	f007 ffc5 	bl	801df7c <gpio_set>
 8015ff2:	e003      	b.n	8015ffc <SX1276SetAntSw+0x40>
      } else {
      	LOG_INFO_SX1276(("   RFO\r\n"));
        gpio_set(ITSDK_MURATA_ANTSW_TXRFO_BANK,ITSDK_MURATA_ANTSW_TXRFO_PIN);
 8015ff4:	2104      	movs	r1, #4
 8015ff6:	2002      	movs	r0, #2
 8015ff8:	f007 ffc0 	bl	801df7c <gpio_set>
      }
      SX1276.RxTx = 1;
 8015ffc:	4b07      	ldr	r3, [pc, #28]	; (801601c <SX1276SetAntSw+0x60>)
 8015ffe:	2201      	movs	r2, #1
 8016000:	701a      	strb	r2, [r3, #0]
      break;
 8016002:	e007      	b.n	8016014 <SX1276SetAntSw+0x58>
    case RFLR_OPMODE_RECEIVER:
    case RFLR_OPMODE_RECEIVER_SINGLE:
    case RFLR_OPMODE_CAD:
    default:
     LOG_INFO_SX1276(("   Rx Mode\r\n"));
     SX1276.RxTx = 0;
 8016004:	4b05      	ldr	r3, [pc, #20]	; (801601c <SX1276SetAntSw+0x60>)
 8016006:	2200      	movs	r2, #0
 8016008:	701a      	strb	r2, [r3, #0]
     gpio_set(ITSDK_MURATA_ANTSW_RX_BANK,ITSDK_MURATA_ANTSW_RX_PIN);
 801600a:	2102      	movs	r1, #2
 801600c:	2000      	movs	r0, #0
 801600e:	f007 ffb5 	bl	801df7c <gpio_set>
     break;
 8016012:	46c0      	nop			; (mov r8, r8)
    }
}
 8016014:	46c0      	nop			; (mov r8, r8)
 8016016:	46bd      	mov	sp, r7
 8016018:	b005      	add	sp, #20
 801601a:	bd90      	pop	{r4, r7, pc}
 801601c:	200015ec 	.word	0x200015ec

08016020 <SX1276CheckRfFrequency>:

bool SX1276CheckRfFrequency( uint32_t frequency )
{
 8016020:	b580      	push	{r7, lr}
 8016022:	b082      	sub	sp, #8
 8016024:	af00      	add	r7, sp, #0
 8016026:	6078      	str	r0, [r7, #4]
	LOG_INFO_SX1276((">> mSX1276CheckRfFrequency\r\n"));

    // Implement check. Currently all frequencies are supported
    return true;
 8016028:	2301      	movs	r3, #1
}
 801602a:	0018      	movs	r0, r3
 801602c:	46bd      	mov	sp, r7
 801602e:	b002      	add	sp, #8
 8016030:	bd80      	pop	{r7, pc}
	...

08016034 <SX1276BoardInit>:

/*
 * Radio driver functions implementation
 */
void SX1276BoardInit( LoRaBoardCallback_t *callbacks )
{
 8016034:	b580      	push	{r7, lr}
 8016036:	b082      	sub	sp, #8
 8016038:	af00      	add	r7, sp, #0
 801603a:	6078      	str	r0, [r7, #4]
	LOG_INFO_SX1276((">> SX1276BoardInit\r\n"));

    LoRaBoardCallbacks =callbacks;
 801603c:	4b03      	ldr	r3, [pc, #12]	; (801604c <SX1276BoardInit+0x18>)
 801603e:	687a      	ldr	r2, [r7, #4]
 8016040:	601a      	str	r2, [r3, #0]
}
 8016042:	46c0      	nop			; (mov r8, r8)
 8016044:	46bd      	mov	sp, r7
 8016046:	b002      	add	sp, #8
 8016048:	bd80      	pop	{r7, pc}
 801604a:	46c0      	nop			; (mov r8, r8)
 801604c:	200011a0 	.word	0x200011a0

08016050 <SX1276Init>:

uint32_t SX1276Init( RadioEvents_t * events )
{
 8016050:	b590      	push	{r4, r7, lr}
 8016052:	b085      	sub	sp, #20
 8016054:	af00      	add	r7, sp, #0
 8016056:	6078      	str	r0, [r7, #4]
	LOG_INFO_SX1276((">> SX1276Init\r\n"));

    uint8_t i;
    RadioEvents = events;
 8016058:	4b33      	ldr	r3, [pc, #204]	; (8016128 <SX1276Init+0xd8>)
 801605a:	687a      	ldr	r2, [r7, #4]
 801605c:	601a      	str	r2, [r3, #0]

    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
 801605e:	4a33      	ldr	r2, [pc, #204]	; (801612c <SX1276Init+0xdc>)
 8016060:	4b33      	ldr	r3, [pc, #204]	; (8016130 <SX1276Init+0xe0>)
 8016062:	0011      	movs	r1, r2
 8016064:	0018      	movs	r0, r3
 8016066:	f7ff fb93 	bl	8015790 <TimerInit>
    TimerInit( &RxTimeoutTimer, SX1276OnTimeoutIrq );
 801606a:	4a30      	ldr	r2, [pc, #192]	; (801612c <SX1276Init+0xdc>)
 801606c:	4b31      	ldr	r3, [pc, #196]	; (8016134 <SX1276Init+0xe4>)
 801606e:	0011      	movs	r1, r2
 8016070:	0018      	movs	r0, r3
 8016072:	f7ff fb8d 	bl	8015790 <TimerInit>
    TimerInit( &RxTimeoutSyncWord, SX1276OnTimeoutIrq );
 8016076:	4a2d      	ldr	r2, [pc, #180]	; (801612c <SX1276Init+0xdc>)
 8016078:	4b2f      	ldr	r3, [pc, #188]	; (8016138 <SX1276Init+0xe8>)
 801607a:	0011      	movs	r1, r2
 801607c:	0018      	movs	r0, r3
 801607e:	f7ff fb87 	bl	8015790 <TimerInit>


    LoRaBoardCallbacks->SX1276BoardSetXO( SET );
 8016082:	4b2e      	ldr	r3, [pc, #184]	; (801613c <SX1276Init+0xec>)
 8016084:	681b      	ldr	r3, [r3, #0]
 8016086:	681b      	ldr	r3, [r3, #0]
 8016088:	2001      	movs	r0, #1
 801608a:	4798      	blx	r3

    SX1276Reset( );
 801608c:	f001 fbee 	bl	801786c <SX1276Reset>
    RxChainCalibration( );
 8016090:	f000 f936 	bl	8016300 <RxChainCalibration>

    SX1276SetOpMode( RF_OPMODE_SLEEP );
 8016094:	2000      	movs	r0, #0
 8016096:	f001 fc03 	bl	80178a0 <SX1276SetOpMode>

    LoRaBoardCallbacks->SX1276BoardIoIrqInit( DioIrq );
 801609a:	4b28      	ldr	r3, [pc, #160]	; (801613c <SX1276Init+0xec>)
 801609c:	681b      	ldr	r3, [r3, #0]
 801609e:	689b      	ldr	r3, [r3, #8]
 80160a0:	4a27      	ldr	r2, [pc, #156]	; (8016140 <SX1276Init+0xf0>)
 80160a2:	0010      	movs	r0, r2
 80160a4:	4798      	blx	r3

    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 80160a6:	230f      	movs	r3, #15
 80160a8:	18fb      	adds	r3, r7, r3
 80160aa:	2200      	movs	r2, #0
 80160ac:	701a      	strb	r2, [r3, #0]
 80160ae:	e025      	b.n	80160fc <SX1276Init+0xac>
    {
        SX1276SetModem( RadioRegsInit[i].Modem );
 80160b0:	240f      	movs	r4, #15
 80160b2:	193b      	adds	r3, r7, r4
 80160b4:	781a      	ldrb	r2, [r3, #0]
 80160b6:	4923      	ldr	r1, [pc, #140]	; (8016144 <SX1276Init+0xf4>)
 80160b8:	0013      	movs	r3, r2
 80160ba:	005b      	lsls	r3, r3, #1
 80160bc:	189b      	adds	r3, r3, r2
 80160be:	5c5b      	ldrb	r3, [r3, r1]
 80160c0:	0018      	movs	r0, r3
 80160c2:	f001 fc3d 	bl	8017940 <SX1276SetModem>
        SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 80160c6:	193b      	adds	r3, r7, r4
 80160c8:	781a      	ldrb	r2, [r3, #0]
 80160ca:	491e      	ldr	r1, [pc, #120]	; (8016144 <SX1276Init+0xf4>)
 80160cc:	0013      	movs	r3, r2
 80160ce:	005b      	lsls	r3, r3, #1
 80160d0:	189b      	adds	r3, r3, r2
 80160d2:	18cb      	adds	r3, r1, r3
 80160d4:	3301      	adds	r3, #1
 80160d6:	781b      	ldrb	r3, [r3, #0]
 80160d8:	b298      	uxth	r0, r3
 80160da:	193b      	adds	r3, r7, r4
 80160dc:	781a      	ldrb	r2, [r3, #0]
 80160de:	4919      	ldr	r1, [pc, #100]	; (8016144 <SX1276Init+0xf4>)
 80160e0:	0013      	movs	r3, r2
 80160e2:	005b      	lsls	r3, r3, #1
 80160e4:	189b      	adds	r3, r3, r2
 80160e6:	18cb      	adds	r3, r1, r3
 80160e8:	3302      	adds	r3, #2
 80160ea:	781b      	ldrb	r3, [r3, #0]
 80160ec:	0019      	movs	r1, r3
 80160ee:	f001 fc7f 	bl	80179f0 <SX1276Write>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 80160f2:	193b      	adds	r3, r7, r4
 80160f4:	781a      	ldrb	r2, [r3, #0]
 80160f6:	193b      	adds	r3, r7, r4
 80160f8:	3201      	adds	r2, #1
 80160fa:	701a      	strb	r2, [r3, #0]
 80160fc:	230f      	movs	r3, #15
 80160fe:	18fb      	adds	r3, r7, r3
 8016100:	781b      	ldrb	r3, [r3, #0]
 8016102:	2b0f      	cmp	r3, #15
 8016104:	d9d4      	bls.n	80160b0 <SX1276Init+0x60>
    }

    SX1276SetModem( MODEM_FSK );
 8016106:	2000      	movs	r0, #0
 8016108:	f001 fc1a 	bl	8017940 <SX1276SetModem>
    SX1276.Settings.State = RF_IDLE;
 801610c:	4b0e      	ldr	r3, [pc, #56]	; (8016148 <SX1276Init+0xf8>)
 801610e:	2200      	movs	r2, #0
 8016110:	711a      	strb	r2, [r3, #4]

    return ( uint32_t )LoRaBoardCallbacks->SX1276BoardGetWakeTime( ) + ITSDK_MURATA_WAKEUP_TIME;// BOARD_WAKEUP_TIME;
 8016112:	4b0a      	ldr	r3, [pc, #40]	; (801613c <SX1276Init+0xec>)
 8016114:	681b      	ldr	r3, [r3, #0]
 8016116:	685b      	ldr	r3, [r3, #4]
 8016118:	4798      	blx	r3
 801611a:	0003      	movs	r3, r0
 801611c:	3335      	adds	r3, #53	; 0x35
}
 801611e:	0018      	movs	r0, r3
 8016120:	46bd      	mov	sp, r7
 8016122:	b005      	add	sp, #20
 8016124:	bd90      	pop	{r4, r7, pc}
 8016126:	46c0      	nop			; (mov r8, r8)
 8016128:	2000109c 	.word	0x2000109c
 801612c:	08017c91 	.word	0x08017c91
 8016130:	200015bc 	.word	0x200015bc
 8016134:	20001654 	.word	0x20001654
 8016138:	200015d4 	.word	0x200015d4
 801613c:	200011a0 	.word	0x200011a0
 8016140:	20000098 	.word	0x20000098
 8016144:	08021bc8 	.word	0x08021bc8
 8016148:	200015ec 	.word	0x200015ec

0801614c <SX1276GetStatus>:

RadioState_t SX1276GetStatus( void )
{
 801614c:	b580      	push	{r7, lr}
 801614e:	af00      	add	r7, sp, #0
	LOG_INFO_SX1276((">> SX1276GetStatus\r\n"));

    return SX1276.Settings.State;
 8016150:	4b02      	ldr	r3, [pc, #8]	; (801615c <SX1276GetStatus+0x10>)
 8016152:	791b      	ldrb	r3, [r3, #4]
}
 8016154:	0018      	movs	r0, r3
 8016156:	46bd      	mov	sp, r7
 8016158:	bd80      	pop	{r7, pc}
 801615a:	46c0      	nop			; (mov r8, r8)
 801615c:	200015ec 	.word	0x200015ec

08016160 <SX1276SetChannel>:

void SX1276SetChannel( uint32_t freq )
{
 8016160:	b590      	push	{r4, r7, lr}
 8016162:	b087      	sub	sp, #28
 8016164:	af00      	add	r7, sp, #0
 8016166:	6078      	str	r0, [r7, #4]
	LOG_INFO_SX1276((">> SX1276SetChannel %d\r\n",freq));

    uint32_t channel;

    SX1276.Settings.Channel = freq;
 8016168:	4b1d      	ldr	r3, [pc, #116]	; (80161e0 <SX1276SetChannel+0x80>)
 801616a:	687a      	ldr	r2, [r7, #4]
 801616c:	609a      	str	r2, [r3, #8]

    SX_FREQ_TO_CHANNEL( channel, freq );
 801616e:	687b      	ldr	r3, [r7, #4]
 8016170:	491c      	ldr	r1, [pc, #112]	; (80161e4 <SX1276SetChannel+0x84>)
 8016172:	0018      	movs	r0, r3
 8016174:	f7e9 ffd0 	bl	8000118 <__udivsi3>
 8016178:	0003      	movs	r3, r0
 801617a:	617b      	str	r3, [r7, #20]
 801617c:	6979      	ldr	r1, [r7, #20]
 801617e:	000b      	movs	r3, r1
 8016180:	015b      	lsls	r3, r3, #5
 8016182:	1a5b      	subs	r3, r3, r1
 8016184:	019a      	lsls	r2, r3, #6
 8016186:	1ad2      	subs	r2, r2, r3
 8016188:	00d2      	lsls	r2, r2, #3
 801618a:	1853      	adds	r3, r2, r1
 801618c:	687a      	ldr	r2, [r7, #4]
 801618e:	1ad3      	subs	r3, r2, r3
 8016190:	613b      	str	r3, [r7, #16]
 8016192:	697b      	ldr	r3, [r7, #20]
 8016194:	021c      	lsls	r4, r3, #8
 8016196:	693b      	ldr	r3, [r7, #16]
 8016198:	021b      	lsls	r3, r3, #8
 801619a:	4a13      	ldr	r2, [pc, #76]	; (80161e8 <SX1276SetChannel+0x88>)
 801619c:	4694      	mov	ip, r2
 801619e:	4463      	add	r3, ip
 80161a0:	4910      	ldr	r1, [pc, #64]	; (80161e4 <SX1276SetChannel+0x84>)
 80161a2:	0018      	movs	r0, r3
 80161a4:	f7e9 ffb8 	bl	8000118 <__udivsi3>
 80161a8:	0003      	movs	r3, r0
 80161aa:	18e3      	adds	r3, r4, r3
 80161ac:	60fb      	str	r3, [r7, #12]

    SX1276Write( REG_FRFMSB, ( uint8_t )( ( channel >> 16 ) & 0xFF ) );
 80161ae:	68fb      	ldr	r3, [r7, #12]
 80161b0:	0c1b      	lsrs	r3, r3, #16
 80161b2:	b2db      	uxtb	r3, r3
 80161b4:	0019      	movs	r1, r3
 80161b6:	2006      	movs	r0, #6
 80161b8:	f001 fc1a 	bl	80179f0 <SX1276Write>
    SX1276Write( REG_FRFMID, ( uint8_t )( ( channel >> 8 ) & 0xFF ) );
 80161bc:	68fb      	ldr	r3, [r7, #12]
 80161be:	0a1b      	lsrs	r3, r3, #8
 80161c0:	b2db      	uxtb	r3, r3
 80161c2:	0019      	movs	r1, r3
 80161c4:	2007      	movs	r0, #7
 80161c6:	f001 fc13 	bl	80179f0 <SX1276Write>
    SX1276Write( REG_FRFLSB, ( uint8_t )( channel & 0xFF ) );
 80161ca:	68fb      	ldr	r3, [r7, #12]
 80161cc:	b2db      	uxtb	r3, r3
 80161ce:	0019      	movs	r1, r3
 80161d0:	2008      	movs	r0, #8
 80161d2:	f001 fc0d 	bl	80179f0 <SX1276Write>
}
 80161d6:	46c0      	nop			; (mov r8, r8)
 80161d8:	46bd      	mov	sp, r7
 80161da:	b007      	add	sp, #28
 80161dc:	bd90      	pop	{r4, r7, pc}
 80161de:	46c0      	nop			; (mov r8, r8)
 80161e0:	200015ec 	.word	0x200015ec
 80161e4:	00003d09 	.word	0x00003d09
 80161e8:	00001e84 	.word	0x00001e84

080161ec <SX1276IsChannelFree>:

bool SX1276IsChannelFree( RadioModems_t modem, uint32_t freq, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 80161ec:	b5b0      	push	{r4, r5, r7, lr}
 80161ee:	b086      	sub	sp, #24
 80161f0:	af00      	add	r7, sp, #0
 80161f2:	60b9      	str	r1, [r7, #8]
 80161f4:	0011      	movs	r1, r2
 80161f6:	607b      	str	r3, [r7, #4]
 80161f8:	240f      	movs	r4, #15
 80161fa:	193b      	adds	r3, r7, r4
 80161fc:	1c02      	adds	r2, r0, #0
 80161fe:	701a      	strb	r2, [r3, #0]
 8016200:	230c      	movs	r3, #12
 8016202:	18fb      	adds	r3, r7, r3
 8016204:	1c0a      	adds	r2, r1, #0
 8016206:	801a      	strh	r2, [r3, #0]
	LOG_INFO_SX1276((">> SX1276IsChannelFree\r\n"));

    bool status = true;
 8016208:	2317      	movs	r3, #23
 801620a:	18fb      	adds	r3, r7, r3
 801620c:	2201      	movs	r2, #1
 801620e:	701a      	strb	r2, [r3, #0]
    int16_t rssi = 0;
 8016210:	2314      	movs	r3, #20
 8016212:	18fb      	adds	r3, r7, r3
 8016214:	2200      	movs	r2, #0
 8016216:	801a      	strh	r2, [r3, #0]
    uint32_t carrierSenseTime = 0;
 8016218:	2300      	movs	r3, #0
 801621a:	613b      	str	r3, [r7, #16]

    SX1276SetModem( modem );
 801621c:	193b      	adds	r3, r7, r4
 801621e:	781b      	ldrb	r3, [r3, #0]
 8016220:	0018      	movs	r0, r3
 8016222:	f001 fb8d 	bl	8017940 <SX1276SetModem>

    SX1276SetChannel( freq );
 8016226:	68bb      	ldr	r3, [r7, #8]
 8016228:	0018      	movs	r0, r3
 801622a:	f7ff ff99 	bl	8016160 <SX1276SetChannel>

    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 801622e:	2005      	movs	r0, #5
 8016230:	f001 fb36 	bl	80178a0 <SX1276SetOpMode>

    DelayMs( 1 );
 8016234:	2001      	movs	r0, #1
 8016236:	f007 fffd 	bl	801e234 <itsdk_delayMs>

    carrierSenseTime = TimerGetCurrentTime( );
 801623a:	f7ff fb83 	bl	8015944 <TimerGetCurrentTime>
 801623e:	0003      	movs	r3, r0
 8016240:	613b      	str	r3, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8016242:	e017      	b.n	8016274 <SX1276IsChannelFree+0x88>
    {
        rssi = SX1276ReadRssi( modem );
 8016244:	2514      	movs	r5, #20
 8016246:	197c      	adds	r4, r7, r5
 8016248:	230f      	movs	r3, #15
 801624a:	18fb      	adds	r3, r7, r3
 801624c:	781b      	ldrb	r3, [r3, #0]
 801624e:	0018      	movs	r0, r3
 8016250:	f001 fac0 	bl	80177d4 <SX1276ReadRssi>
 8016254:	0003      	movs	r3, r0
 8016256:	8023      	strh	r3, [r4, #0]

        if( rssi > rssiThresh )
 8016258:	197a      	adds	r2, r7, r5
 801625a:	230c      	movs	r3, #12
 801625c:	18fb      	adds	r3, r7, r3
 801625e:	2100      	movs	r1, #0
 8016260:	5e52      	ldrsh	r2, [r2, r1]
 8016262:	2100      	movs	r1, #0
 8016264:	5e5b      	ldrsh	r3, [r3, r1]
 8016266:	429a      	cmp	r2, r3
 8016268:	dd04      	ble.n	8016274 <SX1276IsChannelFree+0x88>
        {
            status = false;
 801626a:	2317      	movs	r3, #23
 801626c:	18fb      	adds	r3, r7, r3
 801626e:	2200      	movs	r2, #0
 8016270:	701a      	strb	r2, [r3, #0]
            break;
 8016272:	e007      	b.n	8016284 <SX1276IsChannelFree+0x98>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8016274:	693b      	ldr	r3, [r7, #16]
 8016276:	0018      	movs	r0, r3
 8016278:	f7ff fb6d 	bl	8015956 <TimerGetElapsedTime>
 801627c:	0002      	movs	r2, r0
 801627e:	687b      	ldr	r3, [r7, #4]
 8016280:	4293      	cmp	r3, r2
 8016282:	d8df      	bhi.n	8016244 <SX1276IsChannelFree+0x58>
        }
    }
    SX1276SetSleep( );
 8016284:	f000 ffde 	bl	8017244 <SX1276SetSleep>
    return status;
 8016288:	2317      	movs	r3, #23
 801628a:	18fb      	adds	r3, r7, r3
 801628c:	781b      	ldrb	r3, [r3, #0]
}
 801628e:	0018      	movs	r0, r3
 8016290:	46bd      	mov	sp, r7
 8016292:	b006      	add	sp, #24
 8016294:	bdb0      	pop	{r4, r5, r7, pc}

08016296 <SX1276Random>:

uint32_t SX1276Random( void )
{
 8016296:	b580      	push	{r7, lr}
 8016298:	b082      	sub	sp, #8
 801629a:	af00      	add	r7, sp, #0
	LOG_INFO_SX1276((">> SX1276Random\r\n"));

    uint8_t i;
    uint32_t rnd = 0;
 801629c:	2300      	movs	r3, #0
 801629e:	603b      	str	r3, [r7, #0]

    /*
     * Radio setup for random number generation
     */
    // Set LoRa modem ON
    SX1276SetModem( MODEM_LORA );
 80162a0:	2001      	movs	r0, #1
 80162a2:	f001 fb4d 	bl	8017940 <SX1276SetModem>

    // Disable LoRa modem interrupts
    SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 80162a6:	21ff      	movs	r1, #255	; 0xff
 80162a8:	2011      	movs	r0, #17
 80162aa:	f001 fba1 	bl	80179f0 <SX1276Write>
                  RFLR_IRQFLAGS_CADDONE |
                  RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                  RFLR_IRQFLAGS_CADDETECTED );

    // Set radio in continuous reception
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 80162ae:	2005      	movs	r0, #5
 80162b0:	f001 faf6 	bl	80178a0 <SX1276SetOpMode>

    for( i = 0; i < 32; i++ )
 80162b4:	1dfb      	adds	r3, r7, #7
 80162b6:	2200      	movs	r2, #0
 80162b8:	701a      	strb	r2, [r3, #0]
 80162ba:	e015      	b.n	80162e8 <SX1276Random+0x52>
    {
        DelayMs( 1 );
 80162bc:	2001      	movs	r0, #1
 80162be:	f007 ffb9 	bl	801e234 <itsdk_delayMs>
        // Unfiltered RSSI value reading. Only takes the LSB value
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
 80162c2:	202c      	movs	r0, #44	; 0x2c
 80162c4:	f001 fba8 	bl	8017a18 <SX1276Read>
 80162c8:	0003      	movs	r3, r0
 80162ca:	001a      	movs	r2, r3
 80162cc:	2301      	movs	r3, #1
 80162ce:	401a      	ands	r2, r3
 80162d0:	1dfb      	adds	r3, r7, #7
 80162d2:	781b      	ldrb	r3, [r3, #0]
 80162d4:	409a      	lsls	r2, r3
 80162d6:	0013      	movs	r3, r2
 80162d8:	683a      	ldr	r2, [r7, #0]
 80162da:	4313      	orrs	r3, r2
 80162dc:	603b      	str	r3, [r7, #0]
    for( i = 0; i < 32; i++ )
 80162de:	1dfb      	adds	r3, r7, #7
 80162e0:	781a      	ldrb	r2, [r3, #0]
 80162e2:	1dfb      	adds	r3, r7, #7
 80162e4:	3201      	adds	r2, #1
 80162e6:	701a      	strb	r2, [r3, #0]
 80162e8:	1dfb      	adds	r3, r7, #7
 80162ea:	781b      	ldrb	r3, [r3, #0]
 80162ec:	2b1f      	cmp	r3, #31
 80162ee:	d9e5      	bls.n	80162bc <SX1276Random+0x26>
    }

    SX1276SetSleep( );
 80162f0:	f000 ffa8 	bl	8017244 <SX1276SetSleep>

    return rnd;
 80162f4:	683b      	ldr	r3, [r7, #0]
}
 80162f6:	0018      	movs	r0, r3
 80162f8:	46bd      	mov	sp, r7
 80162fa:	b002      	add	sp, #8
 80162fc:	bd80      	pop	{r7, pc}
	...

08016300 <RxChainCalibration>:
 * Performs the Rx chain calibration for LF and HF bands
 * \remark Must be called just after the reset so all registers are at their
 *         default values
 */
void RxChainCalibration( void )
{
 8016300:	b590      	push	{r4, r7, lr}
 8016302:	b087      	sub	sp, #28
 8016304:	af00      	add	r7, sp, #0
    uint8_t regPaConfigInitVal;
    uint32_t initialFreq;
    uint32_t channel;

    // Save context
    regPaConfigInitVal = SX1276Read( REG_PACONFIG );
 8016306:	2317      	movs	r3, #23
 8016308:	18fc      	adds	r4, r7, r3
 801630a:	2009      	movs	r0, #9
 801630c:	f001 fb84 	bl	8017a18 <SX1276Read>
 8016310:	0003      	movs	r3, r0
 8016312:	7023      	strb	r3, [r4, #0]

    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8016314:	2006      	movs	r0, #6
 8016316:	f001 fb7f 	bl	8017a18 <SX1276Read>
 801631a:	0003      	movs	r3, r0
 801631c:	041c      	lsls	r4, r3, #16
                ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
 801631e:	2007      	movs	r0, #7
 8016320:	f001 fb7a 	bl	8017a18 <SX1276Read>
 8016324:	0003      	movs	r3, r0
 8016326:	021b      	lsls	r3, r3, #8
    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8016328:	431c      	orrs	r4, r3
                ( ( uint32_t )SX1276Read( REG_FRFLSB ) ) );
 801632a:	2008      	movs	r0, #8
 801632c:	f001 fb74 	bl	8017a18 <SX1276Read>
 8016330:	0003      	movs	r3, r0
    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8016332:	4323      	orrs	r3, r4
 8016334:	613b      	str	r3, [r7, #16]

    SX_CHANNEL_TO_FREQ(channel, initialFreq);
 8016336:	693b      	ldr	r3, [r7, #16]
 8016338:	0a1b      	lsrs	r3, r3, #8
 801633a:	60fb      	str	r3, [r7, #12]
 801633c:	68fb      	ldr	r3, [r7, #12]
 801633e:	021b      	lsls	r3, r3, #8
 8016340:	693a      	ldr	r2, [r7, #16]
 8016342:	1ad3      	subs	r3, r2, r3
 8016344:	60bb      	str	r3, [r7, #8]
 8016346:	68f9      	ldr	r1, [r7, #12]
 8016348:	000b      	movs	r3, r1
 801634a:	015b      	lsls	r3, r3, #5
 801634c:	1a5b      	subs	r3, r3, r1
 801634e:	019a      	lsls	r2, r3, #6
 8016350:	1ad2      	subs	r2, r2, r3
 8016352:	00d2      	lsls	r2, r2, #3
 8016354:	1850      	adds	r0, r2, r1
 8016356:	68b9      	ldr	r1, [r7, #8]
 8016358:	000b      	movs	r3, r1
 801635a:	015b      	lsls	r3, r3, #5
 801635c:	1a5b      	subs	r3, r3, r1
 801635e:	019a      	lsls	r2, r3, #6
 8016360:	1ad2      	subs	r2, r2, r3
 8016362:	00d2      	lsls	r2, r2, #3
 8016364:	1853      	adds	r3, r2, r1
 8016366:	3380      	adds	r3, #128	; 0x80
 8016368:	0a1b      	lsrs	r3, r3, #8
 801636a:	18c3      	adds	r3, r0, r3
 801636c:	607b      	str	r3, [r7, #4]

    // Cut the PA just in case, RFO output, power = -1 dBm
    SX1276Write( REG_PACONFIG, 0x00 );
 801636e:	2100      	movs	r1, #0
 8016370:	2009      	movs	r0, #9
 8016372:	f001 fb3d 	bl	80179f0 <SX1276Write>

    // Launch Rx chain calibration for LF band
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 8016376:	203b      	movs	r0, #59	; 0x3b
 8016378:	f001 fb4e 	bl	8017a18 <SX1276Read>
 801637c:	0003      	movs	r3, r0
 801637e:	001a      	movs	r2, r3
 8016380:	2340      	movs	r3, #64	; 0x40
 8016382:	4313      	orrs	r3, r2
 8016384:	b2db      	uxtb	r3, r3
 8016386:	0019      	movs	r1, r3
 8016388:	203b      	movs	r0, #59	; 0x3b
 801638a:	f001 fb31 	bl	80179f0 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 801638e:	46c0      	nop			; (mov r8, r8)
 8016390:	203b      	movs	r0, #59	; 0x3b
 8016392:	f001 fb41 	bl	8017a18 <SX1276Read>
 8016396:	0003      	movs	r3, r0
 8016398:	001a      	movs	r2, r3
 801639a:	2320      	movs	r3, #32
 801639c:	4013      	ands	r3, r2
 801639e:	2b20      	cmp	r3, #32
 80163a0:	d0f6      	beq.n	8016390 <RxChainCalibration+0x90>
    {
    }

    // Sets a Frequency in HF band
    SX1276SetChannel( 868000000 );
 80163a2:	4b14      	ldr	r3, [pc, #80]	; (80163f4 <RxChainCalibration+0xf4>)
 80163a4:	0018      	movs	r0, r3
 80163a6:	f7ff fedb 	bl	8016160 <SX1276SetChannel>

    // Launch Rx chain calibration for HF band
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 80163aa:	203b      	movs	r0, #59	; 0x3b
 80163ac:	f001 fb34 	bl	8017a18 <SX1276Read>
 80163b0:	0003      	movs	r3, r0
 80163b2:	001a      	movs	r2, r3
 80163b4:	2340      	movs	r3, #64	; 0x40
 80163b6:	4313      	orrs	r3, r2
 80163b8:	b2db      	uxtb	r3, r3
 80163ba:	0019      	movs	r1, r3
 80163bc:	203b      	movs	r0, #59	; 0x3b
 80163be:	f001 fb17 	bl	80179f0 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 80163c2:	46c0      	nop			; (mov r8, r8)
 80163c4:	203b      	movs	r0, #59	; 0x3b
 80163c6:	f001 fb27 	bl	8017a18 <SX1276Read>
 80163ca:	0003      	movs	r3, r0
 80163cc:	001a      	movs	r2, r3
 80163ce:	2320      	movs	r3, #32
 80163d0:	4013      	ands	r3, r2
 80163d2:	2b20      	cmp	r3, #32
 80163d4:	d0f6      	beq.n	80163c4 <RxChainCalibration+0xc4>
    {
    }

    // Restore context
    SX1276Write( REG_PACONFIG, regPaConfigInitVal );
 80163d6:	2317      	movs	r3, #23
 80163d8:	18fb      	adds	r3, r7, r3
 80163da:	781b      	ldrb	r3, [r3, #0]
 80163dc:	0019      	movs	r1, r3
 80163de:	2009      	movs	r0, #9
 80163e0:	f001 fb06 	bl	80179f0 <SX1276Write>
    SX1276SetChannel( initialFreq );
 80163e4:	687b      	ldr	r3, [r7, #4]
 80163e6:	0018      	movs	r0, r3
 80163e8:	f7ff feba 	bl	8016160 <SX1276SetChannel>
}
 80163ec:	46c0      	nop			; (mov r8, r8)
 80163ee:	46bd      	mov	sp, r7
 80163f0:	b007      	add	sp, #28
 80163f2:	bd90      	pop	{r4, r7, pc}
 80163f4:	33bca100 	.word	0x33bca100

080163f8 <GetFskBandwidthRegValue>:
 *
 * \param [IN] bandwidth Bandwidth value in Hz
 * \retval regValue Bandwidth register value.
 */
static uint8_t GetFskBandwidthRegValue( uint32_t bandwidth )
{
 80163f8:	b580      	push	{r7, lr}
 80163fa:	b084      	sub	sp, #16
 80163fc:	af00      	add	r7, sp, #0
 80163fe:	6078      	str	r0, [r7, #4]
	LOG_INFO_SX1276((">> GetFskBandwidthRegValue\r\n"));

    uint8_t i;

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 8016400:	230f      	movs	r3, #15
 8016402:	18fb      	adds	r3, r7, r3
 8016404:	2200      	movs	r2, #0
 8016406:	701a      	strb	r2, [r3, #0]
 8016408:	e021      	b.n	801644e <GetFskBandwidthRegValue+0x56>
    {
        if( ( bandwidth >= FskBandwidths[i].bandwidth ) && ( bandwidth < FskBandwidths[i + 1].bandwidth ) )
 801640a:	230f      	movs	r3, #15
 801640c:	18fb      	adds	r3, r7, r3
 801640e:	781a      	ldrb	r2, [r3, #0]
 8016410:	4b14      	ldr	r3, [pc, #80]	; (8016464 <GetFskBandwidthRegValue+0x6c>)
 8016412:	00d2      	lsls	r2, r2, #3
 8016414:	58d3      	ldr	r3, [r2, r3]
 8016416:	687a      	ldr	r2, [r7, #4]
 8016418:	429a      	cmp	r2, r3
 801641a:	d312      	bcc.n	8016442 <GetFskBandwidthRegValue+0x4a>
 801641c:	230f      	movs	r3, #15
 801641e:	18fb      	adds	r3, r7, r3
 8016420:	781b      	ldrb	r3, [r3, #0]
 8016422:	1c5a      	adds	r2, r3, #1
 8016424:	4b0f      	ldr	r3, [pc, #60]	; (8016464 <GetFskBandwidthRegValue+0x6c>)
 8016426:	00d2      	lsls	r2, r2, #3
 8016428:	58d3      	ldr	r3, [r2, r3]
 801642a:	687a      	ldr	r2, [r7, #4]
 801642c:	429a      	cmp	r2, r3
 801642e:	d208      	bcs.n	8016442 <GetFskBandwidthRegValue+0x4a>
        {
            return FskBandwidths[i].RegValue;
 8016430:	230f      	movs	r3, #15
 8016432:	18fb      	adds	r3, r7, r3
 8016434:	781b      	ldrb	r3, [r3, #0]
 8016436:	4a0b      	ldr	r2, [pc, #44]	; (8016464 <GetFskBandwidthRegValue+0x6c>)
 8016438:	00db      	lsls	r3, r3, #3
 801643a:	18d3      	adds	r3, r2, r3
 801643c:	3304      	adds	r3, #4
 801643e:	781b      	ldrb	r3, [r3, #0]
 8016440:	e00b      	b.n	801645a <GetFskBandwidthRegValue+0x62>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 8016442:	210f      	movs	r1, #15
 8016444:	187b      	adds	r3, r7, r1
 8016446:	781a      	ldrb	r2, [r3, #0]
 8016448:	187b      	adds	r3, r7, r1
 801644a:	3201      	adds	r2, #1
 801644c:	701a      	strb	r2, [r3, #0]
 801644e:	230f      	movs	r3, #15
 8016450:	18fb      	adds	r3, r7, r3
 8016452:	781b      	ldrb	r3, [r3, #0]
 8016454:	2b14      	cmp	r3, #20
 8016456:	d9d8      	bls.n	801640a <GetFskBandwidthRegValue+0x12>
        }
    }
    // ERROR: Value not found
    while( 1 );
 8016458:	e7fe      	b.n	8016458 <GetFskBandwidthRegValue+0x60>
}
 801645a:	0018      	movs	r0, r3
 801645c:	46bd      	mov	sp, r7
 801645e:	b004      	add	sp, #16
 8016460:	bd80      	pop	{r7, pc}
 8016462:	46c0      	nop			; (mov r8, r8)
 8016464:	08021bf8 	.word	0x08021bf8

08016468 <SX1276SetRxConfig>:
                         uint32_t bandwidthAfc, uint16_t preambleLen,
                         uint16_t symbTimeout, bool fixLen,
                         uint8_t payloadLen,
                         bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                         bool iqInverted, bool rxContinuous )
{
 8016468:	b5f0      	push	{r4, r5, r6, r7, lr}
 801646a:	46c6      	mov	lr, r8
 801646c:	b500      	push	{lr}
 801646e:	b084      	sub	sp, #16
 8016470:	af00      	add	r7, sp, #0
 8016472:	60b9      	str	r1, [r7, #8]
 8016474:	607a      	str	r2, [r7, #4]
 8016476:	0019      	movs	r1, r3
 8016478:	240f      	movs	r4, #15
 801647a:	193b      	adds	r3, r7, r4
 801647c:	1c02      	adds	r2, r0, #0
 801647e:	701a      	strb	r2, [r3, #0]
 8016480:	230e      	movs	r3, #14
 8016482:	18fb      	adds	r3, r7, r3
 8016484:	1c0a      	adds	r2, r1, #0
 8016486:	701a      	strb	r2, [r3, #0]
	LOG_INFO_SX1276((">> SX1276SetRxConfig\r\n"));

    SX1276SetModem( modem );
 8016488:	193b      	adds	r3, r7, r4
 801648a:	781b      	ldrb	r3, [r3, #0]
 801648c:	0018      	movs	r0, r3
 801648e:	f001 fa57 	bl	8017940 <SX1276SetModem>

    switch( modem )
 8016492:	193b      	adds	r3, r7, r4
 8016494:	781b      	ldrb	r3, [r3, #0]
 8016496:	2b00      	cmp	r3, #0
 8016498:	d003      	beq.n	80164a2 <SX1276SetRxConfig+0x3a>
 801649a:	2b01      	cmp	r3, #1
 801649c:	d100      	bne.n	80164a0 <SX1276SetRxConfig+0x38>
 801649e:	e100      	b.n	80166a2 <SX1276SetRxConfig+0x23a>
                             RFLR_DETECTIONTHRESH_SF7_TO_SF12 );
            }
        }
        break;
    }
}
 80164a0:	e274      	b.n	801698c <SX1276SetRxConfig+0x524>
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 80164a2:	4bc0      	ldr	r3, [pc, #768]	; (80167a4 <SX1276SetRxConfig+0x33c>)
 80164a4:	68ba      	ldr	r2, [r7, #8]
 80164a6:	615a      	str	r2, [r3, #20]
            SX1276.Settings.Fsk.Datarate = datarate;
 80164a8:	4bbe      	ldr	r3, [pc, #760]	; (80167a4 <SX1276SetRxConfig+0x33c>)
 80164aa:	687a      	ldr	r2, [r7, #4]
 80164ac:	61da      	str	r2, [r3, #28]
            SX1276.Settings.Fsk.BandwidthAfc = bandwidthAfc;
 80164ae:	4bbd      	ldr	r3, [pc, #756]	; (80167a4 <SX1276SetRxConfig+0x33c>)
 80164b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80164b2:	619a      	str	r2, [r3, #24]
            SX1276.Settings.Fsk.FixLen = fixLen;
 80164b4:	4bbb      	ldr	r3, [pc, #748]	; (80167a4 <SX1276SetRxConfig+0x33c>)
 80164b6:	222c      	movs	r2, #44	; 0x2c
 80164b8:	2108      	movs	r1, #8
 80164ba:	468c      	mov	ip, r1
 80164bc:	44bc      	add	ip, r7
 80164be:	4462      	add	r2, ip
 80164c0:	2122      	movs	r1, #34	; 0x22
 80164c2:	7812      	ldrb	r2, [r2, #0]
 80164c4:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.PayloadLen = payloadLen;
 80164c6:	4bb7      	ldr	r3, [pc, #732]	; (80167a4 <SX1276SetRxConfig+0x33c>)
 80164c8:	2130      	movs	r1, #48	; 0x30
 80164ca:	2008      	movs	r0, #8
 80164cc:	183a      	adds	r2, r7, r0
 80164ce:	1852      	adds	r2, r2, r1
 80164d0:	2123      	movs	r1, #35	; 0x23
 80164d2:	7812      	ldrb	r2, [r2, #0]
 80164d4:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.CrcOn = crcOn;
 80164d6:	4bb3      	ldr	r3, [pc, #716]	; (80167a4 <SX1276SetRxConfig+0x33c>)
 80164d8:	2134      	movs	r1, #52	; 0x34
 80164da:	183a      	adds	r2, r7, r0
 80164dc:	1852      	adds	r2, r2, r1
 80164de:	2124      	movs	r1, #36	; 0x24
 80164e0:	7812      	ldrb	r2, [r2, #0]
 80164e2:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 80164e4:	4baf      	ldr	r3, [pc, #700]	; (80167a4 <SX1276SetRxConfig+0x33c>)
 80164e6:	2220      	movs	r2, #32
 80164e8:	2120      	movs	r1, #32
 80164ea:	468c      	mov	ip, r1
 80164ec:	2108      	movs	r1, #8
 80164ee:	4688      	mov	r8, r1
 80164f0:	44b8      	add	r8, r7
 80164f2:	44c4      	add	ip, r8
 80164f4:	4462      	add	r2, ip
 80164f6:	2125      	movs	r1, #37	; 0x25
 80164f8:	7812      	ldrb	r2, [r2, #0]
 80164fa:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.RxContinuous = rxContinuous;
 80164fc:	4ba9      	ldr	r3, [pc, #676]	; (80167a4 <SX1276SetRxConfig+0x33c>)
 80164fe:	2224      	movs	r2, #36	; 0x24
 8016500:	2120      	movs	r1, #32
 8016502:	468c      	mov	ip, r1
 8016504:	2108      	movs	r1, #8
 8016506:	4688      	mov	r8, r1
 8016508:	44b8      	add	r8, r7
 801650a:	44c4      	add	ip, r8
 801650c:	4462      	add	r2, ip
 801650e:	2126      	movs	r1, #38	; 0x26
 8016510:	7812      	ldrb	r2, [r2, #0]
 8016512:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 8016514:	4ba3      	ldr	r3, [pc, #652]	; (80167a4 <SX1276SetRxConfig+0x33c>)
 8016516:	2624      	movs	r6, #36	; 0x24
 8016518:	183a      	adds	r2, r7, r0
 801651a:	1992      	adds	r2, r2, r6
 801651c:	8812      	ldrh	r2, [r2, #0]
 801651e:	841a      	strh	r2, [r3, #32]
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )( symbTimeout * ( ( 1.0 / ( double )datarate ) * 8.0 ) * 1000 );
 8016520:	2328      	movs	r3, #40	; 0x28
 8016522:	2208      	movs	r2, #8
 8016524:	4694      	mov	ip, r2
 8016526:	44bc      	add	ip, r7
 8016528:	4463      	add	r3, ip
 801652a:	881b      	ldrh	r3, [r3, #0]
 801652c:	0018      	movs	r0, r3
 801652e:	f7ec f82b 	bl	8002588 <__aeabi_i2d>
 8016532:	0004      	movs	r4, r0
 8016534:	000d      	movs	r5, r1
 8016536:	6878      	ldr	r0, [r7, #4]
 8016538:	f7ec f860 	bl	80025fc <__aeabi_ui2d>
 801653c:	0002      	movs	r2, r0
 801653e:	000b      	movs	r3, r1
 8016540:	2000      	movs	r0, #0
 8016542:	4999      	ldr	r1, [pc, #612]	; (80167a8 <SX1276SetRxConfig+0x340>)
 8016544:	f7ea fe26 	bl	8001194 <__aeabi_ddiv>
 8016548:	0002      	movs	r2, r0
 801654a:	000b      	movs	r3, r1
 801654c:	0010      	movs	r0, r2
 801654e:	0019      	movs	r1, r3
 8016550:	2200      	movs	r2, #0
 8016552:	4b96      	ldr	r3, [pc, #600]	; (80167ac <SX1276SetRxConfig+0x344>)
 8016554:	f7eb fa28 	bl	80019a8 <__aeabi_dmul>
 8016558:	0002      	movs	r2, r0
 801655a:	000b      	movs	r3, r1
 801655c:	0020      	movs	r0, r4
 801655e:	0029      	movs	r1, r5
 8016560:	f7eb fa22 	bl	80019a8 <__aeabi_dmul>
 8016564:	0003      	movs	r3, r0
 8016566:	000c      	movs	r4, r1
 8016568:	0018      	movs	r0, r3
 801656a:	0021      	movs	r1, r4
 801656c:	2200      	movs	r2, #0
 801656e:	4b90      	ldr	r3, [pc, #576]	; (80167b0 <SX1276SetRxConfig+0x348>)
 8016570:	f7eb fa1a 	bl	80019a8 <__aeabi_dmul>
 8016574:	0003      	movs	r3, r0
 8016576:	000c      	movs	r4, r1
 8016578:	0018      	movs	r0, r3
 801657a:	0021      	movs	r1, r4
 801657c:	f7e9 ffee 	bl	800055c <__aeabi_d2uiz>
 8016580:	0002      	movs	r2, r0
 8016582:	4b88      	ldr	r3, [pc, #544]	; (80167a4 <SX1276SetRxConfig+0x33c>)
 8016584:	62da      	str	r2, [r3, #44]	; 0x2c
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 8016586:	6878      	ldr	r0, [r7, #4]
 8016588:	f7ec f838 	bl	80025fc <__aeabi_ui2d>
 801658c:	0003      	movs	r3, r0
 801658e:	000c      	movs	r4, r1
 8016590:	001a      	movs	r2, r3
 8016592:	0023      	movs	r3, r4
 8016594:	2000      	movs	r0, #0
 8016596:	4987      	ldr	r1, [pc, #540]	; (80167b4 <SX1276SetRxConfig+0x34c>)
 8016598:	f7ea fdfc 	bl	8001194 <__aeabi_ddiv>
 801659c:	0003      	movs	r3, r0
 801659e:	000c      	movs	r4, r1
 80165a0:	0018      	movs	r0, r3
 80165a2:	0021      	movs	r1, r4
 80165a4:	f7e9 ffda 	bl	800055c <__aeabi_d2uiz>
 80165a8:	0003      	movs	r3, r0
 80165aa:	b29b      	uxth	r3, r3
 80165ac:	607b      	str	r3, [r7, #4]
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 80165ae:	687b      	ldr	r3, [r7, #4]
 80165b0:	0a1b      	lsrs	r3, r3, #8
 80165b2:	b2db      	uxtb	r3, r3
 80165b4:	0019      	movs	r1, r3
 80165b6:	2002      	movs	r0, #2
 80165b8:	f001 fa1a 	bl	80179f0 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 80165bc:	687b      	ldr	r3, [r7, #4]
 80165be:	b2db      	uxtb	r3, r3
 80165c0:	0019      	movs	r1, r3
 80165c2:	2003      	movs	r0, #3
 80165c4:	f001 fa14 	bl	80179f0 <SX1276Write>
            SX1276Write( REG_RXBW, GetFskBandwidthRegValue( bandwidth ) );
 80165c8:	68bb      	ldr	r3, [r7, #8]
 80165ca:	0018      	movs	r0, r3
 80165cc:	f7ff ff14 	bl	80163f8 <GetFskBandwidthRegValue>
 80165d0:	0003      	movs	r3, r0
 80165d2:	0019      	movs	r1, r3
 80165d4:	2012      	movs	r0, #18
 80165d6:	f001 fa0b 	bl	80179f0 <SX1276Write>
            SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( bandwidthAfc ) );
 80165da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80165dc:	0018      	movs	r0, r3
 80165de:	f7ff ff0b 	bl	80163f8 <GetFskBandwidthRegValue>
 80165e2:	0003      	movs	r3, r0
 80165e4:	0019      	movs	r1, r3
 80165e6:	2013      	movs	r0, #19
 80165e8:	f001 fa02 	bl	80179f0 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 80165ec:	2008      	movs	r0, #8
 80165ee:	0004      	movs	r4, r0
 80165f0:	183b      	adds	r3, r7, r0
 80165f2:	199b      	adds	r3, r3, r6
 80165f4:	881b      	ldrh	r3, [r3, #0]
 80165f6:	0a1b      	lsrs	r3, r3, #8
 80165f8:	b29b      	uxth	r3, r3
 80165fa:	b2db      	uxtb	r3, r3
 80165fc:	0019      	movs	r1, r3
 80165fe:	2025      	movs	r0, #37	; 0x25
 8016600:	f001 f9f6 	bl	80179f0 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 8016604:	193b      	adds	r3, r7, r4
 8016606:	199b      	adds	r3, r3, r6
 8016608:	881b      	ldrh	r3, [r3, #0]
 801660a:	b2db      	uxtb	r3, r3
 801660c:	0019      	movs	r1, r3
 801660e:	2026      	movs	r0, #38	; 0x26
 8016610:	f001 f9ee 	bl	80179f0 <SX1276Write>
            if( fixLen == 1 )
 8016614:	222c      	movs	r2, #44	; 0x2c
 8016616:	193b      	adds	r3, r7, r4
 8016618:	189b      	adds	r3, r3, r2
 801661a:	781b      	ldrb	r3, [r3, #0]
 801661c:	2b00      	cmp	r3, #0
 801661e:	d00a      	beq.n	8016636 <SX1276SetRxConfig+0x1ce>
                SX1276Write( REG_PAYLOADLENGTH, payloadLen );
 8016620:	2330      	movs	r3, #48	; 0x30
 8016622:	2208      	movs	r2, #8
 8016624:	4694      	mov	ip, r2
 8016626:	44bc      	add	ip, r7
 8016628:	4463      	add	r3, ip
 801662a:	781b      	ldrb	r3, [r3, #0]
 801662c:	0019      	movs	r1, r3
 801662e:	2032      	movs	r0, #50	; 0x32
 8016630:	f001 f9de 	bl	80179f0 <SX1276Write>
 8016634:	e003      	b.n	801663e <SX1276SetRxConfig+0x1d6>
                SX1276Write( REG_PAYLOADLENGTH, 0xFF ); // Set payload length to the maximum
 8016636:	21ff      	movs	r1, #255	; 0xff
 8016638:	2032      	movs	r0, #50	; 0x32
 801663a:	f001 f9d9 	bl	80179f0 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 801663e:	2030      	movs	r0, #48	; 0x30
 8016640:	f001 f9ea 	bl	8017a18 <SX1276Read>
 8016644:	0003      	movs	r3, r0
 8016646:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_CRC_MASK &
 8016648:	226f      	movs	r2, #111	; 0x6f
 801664a:	4013      	ands	r3, r2
 801664c:	b25a      	sxtb	r2, r3
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 801664e:	232c      	movs	r3, #44	; 0x2c
 8016650:	2108      	movs	r1, #8
 8016652:	468c      	mov	ip, r1
 8016654:	44bc      	add	ip, r7
 8016656:	4463      	add	r3, ip
 8016658:	781b      	ldrb	r3, [r3, #0]
 801665a:	2b00      	cmp	r3, #0
 801665c:	d001      	beq.n	8016662 <SX1276SetRxConfig+0x1fa>
 801665e:	2300      	movs	r3, #0
 8016660:	e001      	b.n	8016666 <SX1276SetRxConfig+0x1fe>
 8016662:	2380      	movs	r3, #128	; 0x80
 8016664:	425b      	negs	r3, r3
 8016666:	4313      	orrs	r3, r2
 8016668:	b25a      	sxtb	r2, r3
                           ( crcOn << 4 ) );
 801666a:	2334      	movs	r3, #52	; 0x34
 801666c:	2108      	movs	r1, #8
 801666e:	468c      	mov	ip, r1
 8016670:	44bc      	add	ip, r7
 8016672:	4463      	add	r3, ip
 8016674:	781b      	ldrb	r3, [r3, #0]
 8016676:	011b      	lsls	r3, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 8016678:	b25b      	sxtb	r3, r3
 801667a:	4313      	orrs	r3, r2
 801667c:	b25b      	sxtb	r3, r3
            SX1276Write( REG_PACKETCONFIG1,
 801667e:	b2db      	uxtb	r3, r3
 8016680:	0019      	movs	r1, r3
 8016682:	2030      	movs	r0, #48	; 0x30
 8016684:	f001 f9b4 	bl	80179f0 <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 8016688:	2031      	movs	r0, #49	; 0x31
 801668a:	f001 f9c5 	bl	8017a18 <SX1276Read>
 801668e:	0003      	movs	r3, r0
 8016690:	001a      	movs	r2, r3
 8016692:	2340      	movs	r3, #64	; 0x40
 8016694:	4313      	orrs	r3, r2
 8016696:	b2db      	uxtb	r3, r3
 8016698:	0019      	movs	r1, r3
 801669a:	2031      	movs	r0, #49	; 0x31
 801669c:	f001 f9a8 	bl	80179f0 <SX1276Write>
        break;
 80166a0:	e174      	b.n	801698c <SX1276SetRxConfig+0x524>
            if( bandwidth > 2 )
 80166a2:	68bb      	ldr	r3, [r7, #8]
 80166a4:	2b02      	cmp	r3, #2
 80166a6:	d900      	bls.n	80166aa <SX1276SetRxConfig+0x242>
                while( 1 );
 80166a8:	e7fe      	b.n	80166a8 <SX1276SetRxConfig+0x240>
            bandwidth += 7;
 80166aa:	68bb      	ldr	r3, [r7, #8]
 80166ac:	3307      	adds	r3, #7
 80166ae:	60bb      	str	r3, [r7, #8]
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 80166b0:	4b3c      	ldr	r3, [pc, #240]	; (80167a4 <SX1276SetRxConfig+0x33c>)
 80166b2:	68ba      	ldr	r2, [r7, #8]
 80166b4:	645a      	str	r2, [r3, #68]	; 0x44
            SX1276.Settings.LoRa.Datarate = datarate;
 80166b6:	4b3b      	ldr	r3, [pc, #236]	; (80167a4 <SX1276SetRxConfig+0x33c>)
 80166b8:	687a      	ldr	r2, [r7, #4]
 80166ba:	649a      	str	r2, [r3, #72]	; 0x48
            SX1276.Settings.LoRa.Coderate = coderate;
 80166bc:	4b39      	ldr	r3, [pc, #228]	; (80167a4 <SX1276SetRxConfig+0x33c>)
 80166be:	220e      	movs	r2, #14
 80166c0:	18ba      	adds	r2, r7, r2
 80166c2:	214d      	movs	r1, #77	; 0x4d
 80166c4:	7812      	ldrb	r2, [r2, #0]
 80166c6:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 80166c8:	4b36      	ldr	r3, [pc, #216]	; (80167a4 <SX1276SetRxConfig+0x33c>)
 80166ca:	2224      	movs	r2, #36	; 0x24
 80166cc:	2108      	movs	r1, #8
 80166ce:	468c      	mov	ip, r1
 80166d0:	44bc      	add	ip, r7
 80166d2:	4462      	add	r2, ip
 80166d4:	214e      	movs	r1, #78	; 0x4e
 80166d6:	8812      	ldrh	r2, [r2, #0]
 80166d8:	525a      	strh	r2, [r3, r1]
            SX1276.Settings.LoRa.FixLen = fixLen;
 80166da:	4b32      	ldr	r3, [pc, #200]	; (80167a4 <SX1276SetRxConfig+0x33c>)
 80166dc:	222c      	movs	r2, #44	; 0x2c
 80166de:	2108      	movs	r1, #8
 80166e0:	468c      	mov	ip, r1
 80166e2:	44bc      	add	ip, r7
 80166e4:	4462      	add	r2, ip
 80166e6:	2150      	movs	r1, #80	; 0x50
 80166e8:	7812      	ldrb	r2, [r2, #0]
 80166ea:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.PayloadLen = payloadLen;
 80166ec:	4b2d      	ldr	r3, [pc, #180]	; (80167a4 <SX1276SetRxConfig+0x33c>)
 80166ee:	2230      	movs	r2, #48	; 0x30
 80166f0:	2108      	movs	r1, #8
 80166f2:	468c      	mov	ip, r1
 80166f4:	44bc      	add	ip, r7
 80166f6:	4462      	add	r2, ip
 80166f8:	2151      	movs	r1, #81	; 0x51
 80166fa:	7812      	ldrb	r2, [r2, #0]
 80166fc:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.CrcOn = crcOn;
 80166fe:	4b29      	ldr	r3, [pc, #164]	; (80167a4 <SX1276SetRxConfig+0x33c>)
 8016700:	2234      	movs	r2, #52	; 0x34
 8016702:	2108      	movs	r1, #8
 8016704:	468c      	mov	ip, r1
 8016706:	44bc      	add	ip, r7
 8016708:	4462      	add	r2, ip
 801670a:	2152      	movs	r1, #82	; 0x52
 801670c:	7812      	ldrb	r2, [r2, #0]
 801670e:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 8016710:	4b24      	ldr	r3, [pc, #144]	; (80167a4 <SX1276SetRxConfig+0x33c>)
 8016712:	2238      	movs	r2, #56	; 0x38
 8016714:	2108      	movs	r1, #8
 8016716:	468c      	mov	ip, r1
 8016718:	44bc      	add	ip, r7
 801671a:	4462      	add	r2, ip
 801671c:	2153      	movs	r1, #83	; 0x53
 801671e:	7812      	ldrb	r2, [r2, #0]
 8016720:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 8016722:	4b20      	ldr	r3, [pc, #128]	; (80167a4 <SX1276SetRxConfig+0x33c>)
 8016724:	223c      	movs	r2, #60	; 0x3c
 8016726:	2108      	movs	r1, #8
 8016728:	468c      	mov	ip, r1
 801672a:	44bc      	add	ip, r7
 801672c:	4462      	add	r2, ip
 801672e:	2154      	movs	r1, #84	; 0x54
 8016730:	7812      	ldrb	r2, [r2, #0]
 8016732:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 8016734:	4b1b      	ldr	r3, [pc, #108]	; (80167a4 <SX1276SetRxConfig+0x33c>)
 8016736:	2220      	movs	r2, #32
 8016738:	2120      	movs	r1, #32
 801673a:	468c      	mov	ip, r1
 801673c:	2108      	movs	r1, #8
 801673e:	4688      	mov	r8, r1
 8016740:	44b8      	add	r8, r7
 8016742:	44c4      	add	ip, r8
 8016744:	4462      	add	r2, ip
 8016746:	2155      	movs	r1, #85	; 0x55
 8016748:	7812      	ldrb	r2, [r2, #0]
 801674a:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
 801674c:	4b15      	ldr	r3, [pc, #84]	; (80167a4 <SX1276SetRxConfig+0x33c>)
 801674e:	2224      	movs	r2, #36	; 0x24
 8016750:	2120      	movs	r1, #32
 8016752:	468c      	mov	ip, r1
 8016754:	2108      	movs	r1, #8
 8016756:	4688      	mov	r8, r1
 8016758:	44b8      	add	r8, r7
 801675a:	44c4      	add	ip, r8
 801675c:	4462      	add	r2, ip
 801675e:	2156      	movs	r1, #86	; 0x56
 8016760:	7812      	ldrb	r2, [r2, #0]
 8016762:	545a      	strb	r2, [r3, r1]
            if( datarate > 12 )
 8016764:	687b      	ldr	r3, [r7, #4]
 8016766:	2b0c      	cmp	r3, #12
 8016768:	d902      	bls.n	8016770 <SX1276SetRxConfig+0x308>
                datarate = 12;
 801676a:	230c      	movs	r3, #12
 801676c:	607b      	str	r3, [r7, #4]
 801676e:	e004      	b.n	801677a <SX1276SetRxConfig+0x312>
            else if( datarate < 6 )
 8016770:	687b      	ldr	r3, [r7, #4]
 8016772:	2b05      	cmp	r3, #5
 8016774:	d801      	bhi.n	801677a <SX1276SetRxConfig+0x312>
                datarate = 6;
 8016776:	2306      	movs	r3, #6
 8016778:	607b      	str	r3, [r7, #4]
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801677a:	68bb      	ldr	r3, [r7, #8]
 801677c:	2b07      	cmp	r3, #7
 801677e:	d105      	bne.n	801678c <SX1276SetRxConfig+0x324>
 8016780:	687b      	ldr	r3, [r7, #4]
 8016782:	2b0b      	cmp	r3, #11
 8016784:	d008      	beq.n	8016798 <SX1276SetRxConfig+0x330>
 8016786:	687b      	ldr	r3, [r7, #4]
 8016788:	2b0c      	cmp	r3, #12
 801678a:	d005      	beq.n	8016798 <SX1276SetRxConfig+0x330>
 801678c:	68bb      	ldr	r3, [r7, #8]
 801678e:	2b08      	cmp	r3, #8
 8016790:	d112      	bne.n	80167b8 <SX1276SetRxConfig+0x350>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 8016792:	687b      	ldr	r3, [r7, #4]
 8016794:	2b0c      	cmp	r3, #12
 8016796:	d10f      	bne.n	80167b8 <SX1276SetRxConfig+0x350>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 8016798:	4b02      	ldr	r3, [pc, #8]	; (80167a4 <SX1276SetRxConfig+0x33c>)
 801679a:	224c      	movs	r2, #76	; 0x4c
 801679c:	2101      	movs	r1, #1
 801679e:	5499      	strb	r1, [r3, r2]
 80167a0:	e00e      	b.n	80167c0 <SX1276SetRxConfig+0x358>
 80167a2:	46c0      	nop			; (mov r8, r8)
 80167a4:	200015ec 	.word	0x200015ec
 80167a8:	3ff00000 	.word	0x3ff00000
 80167ac:	40200000 	.word	0x40200000
 80167b0:	408f4000 	.word	0x408f4000
 80167b4:	417e8480 	.word	0x417e8480
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 80167b8:	4b77      	ldr	r3, [pc, #476]	; (8016998 <SX1276SetRxConfig+0x530>)
 80167ba:	224c      	movs	r2, #76	; 0x4c
 80167bc:	2100      	movs	r1, #0
 80167be:	5499      	strb	r1, [r3, r2]
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 80167c0:	201d      	movs	r0, #29
 80167c2:	f001 f929 	bl	8017a18 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 80167c6:	68bb      	ldr	r3, [r7, #8]
 80167c8:	b2db      	uxtb	r3, r3
 80167ca:	011b      	lsls	r3, r3, #4
 80167cc:	b2da      	uxtb	r2, r3
 80167ce:	230e      	movs	r3, #14
 80167d0:	18fb      	adds	r3, r7, r3
 80167d2:	781b      	ldrb	r3, [r3, #0]
 80167d4:	18db      	adds	r3, r3, r3
 80167d6:	b2db      	uxtb	r3, r3
 80167d8:	4313      	orrs	r3, r2
 80167da:	b2da      	uxtb	r2, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 80167dc:	242c      	movs	r4, #44	; 0x2c
 80167de:	2608      	movs	r6, #8
 80167e0:	19bb      	adds	r3, r7, r6
 80167e2:	191b      	adds	r3, r3, r4
 80167e4:	781b      	ldrb	r3, [r3, #0]
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 80167e6:	4313      	orrs	r3, r2
 80167e8:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 80167ea:	0019      	movs	r1, r3
 80167ec:	201d      	movs	r0, #29
 80167ee:	f001 f8ff 	bl	80179f0 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 80167f2:	201e      	movs	r0, #30
 80167f4:	f001 f910 	bl	8017a18 <SX1276Read>
 80167f8:	0003      	movs	r3, r0
 80167fa:	001a      	movs	r2, r3
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK &
 80167fc:	2308      	movs	r3, #8
 80167fe:	4013      	ands	r3, r2
 8016800:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 8016802:	687b      	ldr	r3, [r7, #4]
 8016804:	b2db      	uxtb	r3, r3
 8016806:	011b      	lsls	r3, r3, #4
 8016808:	b2db      	uxtb	r3, r3
                           RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) |
 801680a:	4313      	orrs	r3, r2
 801680c:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 801680e:	2334      	movs	r3, #52	; 0x34
 8016810:	2108      	movs	r1, #8
 8016812:	468c      	mov	ip, r1
 8016814:	44bc      	add	ip, r7
 8016816:	4463      	add	r3, ip
 8016818:	781b      	ldrb	r3, [r3, #0]
 801681a:	009b      	lsls	r3, r3, #2
 801681c:	b2db      	uxtb	r3, r3
 801681e:	4313      	orrs	r3, r2
 8016820:	b2da      	uxtb	r2, r3
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
 8016822:	2528      	movs	r5, #40	; 0x28
 8016824:	19bb      	adds	r3, r7, r6
 8016826:	195b      	adds	r3, r3, r5
 8016828:	881b      	ldrh	r3, [r3, #0]
 801682a:	0a1b      	lsrs	r3, r3, #8
 801682c:	b29b      	uxth	r3, r3
 801682e:	b2db      	uxtb	r3, r3
 8016830:	2103      	movs	r1, #3
 8016832:	400b      	ands	r3, r1
 8016834:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG2,
 8016836:	4313      	orrs	r3, r2
 8016838:	b2db      	uxtb	r3, r3
 801683a:	0019      	movs	r1, r3
 801683c:	201e      	movs	r0, #30
 801683e:	f001 f8d7 	bl	80179f0 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 8016842:	2026      	movs	r0, #38	; 0x26
 8016844:	f001 f8e8 	bl	8017a18 <SX1276Read>
 8016848:	0003      	movs	r3, r0
 801684a:	b25b      	sxtb	r3, r3
 801684c:	2208      	movs	r2, #8
 801684e:	4393      	bics	r3, r2
 8016850:	b25a      	sxtb	r2, r3
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 8016852:	4b51      	ldr	r3, [pc, #324]	; (8016998 <SX1276SetRxConfig+0x530>)
 8016854:	214c      	movs	r1, #76	; 0x4c
 8016856:	5c5b      	ldrb	r3, [r3, r1]
 8016858:	00db      	lsls	r3, r3, #3
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 801685a:	b25b      	sxtb	r3, r3
 801685c:	4313      	orrs	r3, r2
 801685e:	b25b      	sxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG3,
 8016860:	b2db      	uxtb	r3, r3
 8016862:	0019      	movs	r1, r3
 8016864:	2026      	movs	r0, #38	; 0x26
 8016866:	f001 f8c3 	bl	80179f0 <SX1276Write>
            SX1276Write( REG_LR_SYMBTIMEOUTLSB, ( uint8_t )( symbTimeout & 0xFF ) );
 801686a:	19bb      	adds	r3, r7, r6
 801686c:	195b      	adds	r3, r3, r5
 801686e:	881b      	ldrh	r3, [r3, #0]
 8016870:	b2db      	uxtb	r3, r3
 8016872:	0019      	movs	r1, r3
 8016874:	201f      	movs	r0, #31
 8016876:	f001 f8bb 	bl	80179f0 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 801687a:	2524      	movs	r5, #36	; 0x24
 801687c:	19bb      	adds	r3, r7, r6
 801687e:	195b      	adds	r3, r3, r5
 8016880:	881b      	ldrh	r3, [r3, #0]
 8016882:	0a1b      	lsrs	r3, r3, #8
 8016884:	b29b      	uxth	r3, r3
 8016886:	b2db      	uxtb	r3, r3
 8016888:	0019      	movs	r1, r3
 801688a:	2020      	movs	r0, #32
 801688c:	f001 f8b0 	bl	80179f0 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 8016890:	19bb      	adds	r3, r7, r6
 8016892:	195b      	adds	r3, r3, r5
 8016894:	881b      	ldrh	r3, [r3, #0]
 8016896:	b2db      	uxtb	r3, r3
 8016898:	0019      	movs	r1, r3
 801689a:	2021      	movs	r0, #33	; 0x21
 801689c:	f001 f8a8 	bl	80179f0 <SX1276Write>
            if( fixLen == 1 )
 80168a0:	19bb      	adds	r3, r7, r6
 80168a2:	191b      	adds	r3, r3, r4
 80168a4:	781b      	ldrb	r3, [r3, #0]
 80168a6:	2b00      	cmp	r3, #0
 80168a8:	d009      	beq.n	80168be <SX1276SetRxConfig+0x456>
                SX1276Write( REG_LR_PAYLOADLENGTH, payloadLen );
 80168aa:	2330      	movs	r3, #48	; 0x30
 80168ac:	2208      	movs	r2, #8
 80168ae:	4694      	mov	ip, r2
 80168b0:	44bc      	add	ip, r7
 80168b2:	4463      	add	r3, ip
 80168b4:	781b      	ldrb	r3, [r3, #0]
 80168b6:	0019      	movs	r1, r3
 80168b8:	2022      	movs	r0, #34	; 0x22
 80168ba:	f001 f899 	bl	80179f0 <SX1276Write>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 80168be:	4b36      	ldr	r3, [pc, #216]	; (8016998 <SX1276SetRxConfig+0x530>)
 80168c0:	2253      	movs	r2, #83	; 0x53
 80168c2:	5c9b      	ldrb	r3, [r3, r2]
 80168c4:	2b00      	cmp	r3, #0
 80168c6:	d013      	beq.n	80168f0 <SX1276SetRxConfig+0x488>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 80168c8:	2044      	movs	r0, #68	; 0x44
 80168ca:	f001 f8a5 	bl	8017a18 <SX1276Read>
 80168ce:	0003      	movs	r3, r0
 80168d0:	001a      	movs	r2, r3
 80168d2:	2380      	movs	r3, #128	; 0x80
 80168d4:	425b      	negs	r3, r3
 80168d6:	4313      	orrs	r3, r2
 80168d8:	b2db      	uxtb	r3, r3
 80168da:	0019      	movs	r1, r3
 80168dc:	2044      	movs	r0, #68	; 0x44
 80168de:	f001 f887 	bl	80179f0 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 80168e2:	4b2d      	ldr	r3, [pc, #180]	; (8016998 <SX1276SetRxConfig+0x530>)
 80168e4:	2254      	movs	r2, #84	; 0x54
 80168e6:	5c9b      	ldrb	r3, [r3, r2]
 80168e8:	0019      	movs	r1, r3
 80168ea:	2024      	movs	r0, #36	; 0x24
 80168ec:	f001 f880 	bl	80179f0 <SX1276Write>
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 80168f0:	68bb      	ldr	r3, [r7, #8]
 80168f2:	2b09      	cmp	r3, #9
 80168f4:	d10d      	bne.n	8016912 <SX1276SetRxConfig+0x4aa>
 80168f6:	4b28      	ldr	r3, [pc, #160]	; (8016998 <SX1276SetRxConfig+0x530>)
 80168f8:	689b      	ldr	r3, [r3, #8]
 80168fa:	4a28      	ldr	r2, [pc, #160]	; (801699c <SX1276SetRxConfig+0x534>)
 80168fc:	4293      	cmp	r3, r2
 80168fe:	d908      	bls.n	8016912 <SX1276SetRxConfig+0x4aa>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 8016900:	2102      	movs	r1, #2
 8016902:	2036      	movs	r0, #54	; 0x36
 8016904:	f001 f874 	bl	80179f0 <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x64 );
 8016908:	2164      	movs	r1, #100	; 0x64
 801690a:	203a      	movs	r0, #58	; 0x3a
 801690c:	f001 f870 	bl	80179f0 <SX1276Write>
 8016910:	e00f      	b.n	8016932 <SX1276SetRxConfig+0x4ca>
            else if( bandwidth == 9 )
 8016912:	68bb      	ldr	r3, [r7, #8]
 8016914:	2b09      	cmp	r3, #9
 8016916:	d108      	bne.n	801692a <SX1276SetRxConfig+0x4c2>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 8016918:	2102      	movs	r1, #2
 801691a:	2036      	movs	r0, #54	; 0x36
 801691c:	f001 f868 	bl	80179f0 <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x7F );
 8016920:	217f      	movs	r1, #127	; 0x7f
 8016922:	203a      	movs	r0, #58	; 0x3a
 8016924:	f001 f864 	bl	80179f0 <SX1276Write>
 8016928:	e003      	b.n	8016932 <SX1276SetRxConfig+0x4ca>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x03 );
 801692a:	2103      	movs	r1, #3
 801692c:	2036      	movs	r0, #54	; 0x36
 801692e:	f001 f85f 	bl	80179f0 <SX1276Write>
            if( datarate == 6 )
 8016932:	687b      	ldr	r3, [r7, #4]
 8016934:	2b06      	cmp	r3, #6
 8016936:	d114      	bne.n	8016962 <SX1276SetRxConfig+0x4fa>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8016938:	2031      	movs	r0, #49	; 0x31
 801693a:	f001 f86d 	bl	8017a18 <SX1276Read>
 801693e:	0003      	movs	r3, r0
 8016940:	b25b      	sxtb	r3, r3
 8016942:	2207      	movs	r2, #7
 8016944:	4393      	bics	r3, r2
 8016946:	b25b      	sxtb	r3, r3
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 8016948:	2205      	movs	r2, #5
 801694a:	4313      	orrs	r3, r2
 801694c:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 801694e:	b2db      	uxtb	r3, r3
 8016950:	0019      	movs	r1, r3
 8016952:	2031      	movs	r0, #49	; 0x31
 8016954:	f001 f84c 	bl	80179f0 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8016958:	210c      	movs	r1, #12
 801695a:	2037      	movs	r0, #55	; 0x37
 801695c:	f001 f848 	bl	80179f0 <SX1276Write>
        break;
 8016960:	e013      	b.n	801698a <SX1276SetRxConfig+0x522>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8016962:	2031      	movs	r0, #49	; 0x31
 8016964:	f001 f858 	bl	8017a18 <SX1276Read>
 8016968:	0003      	movs	r3, r0
 801696a:	b25b      	sxtb	r3, r3
 801696c:	2207      	movs	r2, #7
 801696e:	4393      	bics	r3, r2
 8016970:	b25b      	sxtb	r3, r3
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 8016972:	2203      	movs	r2, #3
 8016974:	4313      	orrs	r3, r2
 8016976:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8016978:	b2db      	uxtb	r3, r3
 801697a:	0019      	movs	r1, r3
 801697c:	2031      	movs	r0, #49	; 0x31
 801697e:	f001 f837 	bl	80179f0 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8016982:	210a      	movs	r1, #10
 8016984:	2037      	movs	r0, #55	; 0x37
 8016986:	f001 f833 	bl	80179f0 <SX1276Write>
        break;
 801698a:	46c0      	nop			; (mov r8, r8)
}
 801698c:	46c0      	nop			; (mov r8, r8)
 801698e:	46bd      	mov	sp, r7
 8016990:	b004      	add	sp, #16
 8016992:	bc04      	pop	{r2}
 8016994:	4690      	mov	r8, r2
 8016996:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016998:	200015ec 	.word	0x200015ec
 801699c:	1f4add40 	.word	0x1f4add40

080169a0 <SX1276SetTxConfig>:
void SX1276SetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                        uint32_t bandwidth, uint32_t datarate,
                        uint8_t coderate, uint16_t preambleLen,
                        bool fixLen, bool crcOn, bool freqHopOn,
                        uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 80169a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80169a2:	b085      	sub	sp, #20
 80169a4:	af00      	add	r7, sp, #0
 80169a6:	60ba      	str	r2, [r7, #8]
 80169a8:	607b      	str	r3, [r7, #4]
 80169aa:	240f      	movs	r4, #15
 80169ac:	193b      	adds	r3, r7, r4
 80169ae:	1c02      	adds	r2, r0, #0
 80169b0:	701a      	strb	r2, [r3, #0]
 80169b2:	250e      	movs	r5, #14
 80169b4:	197b      	adds	r3, r7, r5
 80169b6:	1c0a      	adds	r2, r1, #0
 80169b8:	701a      	strb	r2, [r3, #0]
	LOG_INFO_SX1276((">> SX1276SetTxConfig\r\n"));

    SX1276SetModem( modem );
 80169ba:	193b      	adds	r3, r7, r4
 80169bc:	781b      	ldrb	r3, [r3, #0]
 80169be:	0018      	movs	r0, r3
 80169c0:	f000 ffbe 	bl	8017940 <SX1276SetModem>

    LoRaBoardCallbacks->SX1276BoardSetRfTxPower( power );
 80169c4:	4be5      	ldr	r3, [pc, #916]	; (8016d5c <SX1276SetTxConfig+0x3bc>)
 80169c6:	681b      	ldr	r3, [r3, #0]
 80169c8:	68db      	ldr	r3, [r3, #12]
 80169ca:	197a      	adds	r2, r7, r5
 80169cc:	7812      	ldrb	r2, [r2, #0]
 80169ce:	b252      	sxtb	r2, r2
 80169d0:	0010      	movs	r0, r2
 80169d2:	4798      	blx	r3

    switch( modem )
 80169d4:	193b      	adds	r3, r7, r4
 80169d6:	781b      	ldrb	r3, [r3, #0]
 80169d8:	2b00      	cmp	r3, #0
 80169da:	d003      	beq.n	80169e4 <SX1276SetTxConfig+0x44>
 80169dc:	2b01      	cmp	r3, #1
 80169de:	d100      	bne.n	80169e2 <SX1276SetTxConfig+0x42>
 80169e0:	e0b1      	b.n	8016b46 <SX1276SetTxConfig+0x1a6>
                             RFLR_DETECTIONTHRESH_SF7_TO_SF12 );
            }
        }
        break;
    }
}
 80169e2:	e1d8      	b.n	8016d96 <SX1276SetTxConfig+0x3f6>
            SX1276.Settings.Fsk.Power = power;
 80169e4:	4bde      	ldr	r3, [pc, #888]	; (8016d60 <SX1276SetTxConfig+0x3c0>)
 80169e6:	220e      	movs	r2, #14
 80169e8:	18ba      	adds	r2, r7, r2
 80169ea:	7812      	ldrb	r2, [r2, #0]
 80169ec:	731a      	strb	r2, [r3, #12]
            SX1276.Settings.Fsk.Fdev = fdev;
 80169ee:	4bdc      	ldr	r3, [pc, #880]	; (8016d60 <SX1276SetTxConfig+0x3c0>)
 80169f0:	68ba      	ldr	r2, [r7, #8]
 80169f2:	611a      	str	r2, [r3, #16]
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 80169f4:	4bda      	ldr	r3, [pc, #872]	; (8016d60 <SX1276SetTxConfig+0x3c0>)
 80169f6:	687a      	ldr	r2, [r7, #4]
 80169f8:	615a      	str	r2, [r3, #20]
            SX1276.Settings.Fsk.Datarate = datarate;
 80169fa:	4bd9      	ldr	r3, [pc, #868]	; (8016d60 <SX1276SetTxConfig+0x3c0>)
 80169fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80169fe:	61da      	str	r2, [r3, #28]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 8016a00:	4bd7      	ldr	r3, [pc, #860]	; (8016d60 <SX1276SetTxConfig+0x3c0>)
 8016a02:	2528      	movs	r5, #40	; 0x28
 8016a04:	2408      	movs	r4, #8
 8016a06:	193a      	adds	r2, r7, r4
 8016a08:	1952      	adds	r2, r2, r5
 8016a0a:	8812      	ldrh	r2, [r2, #0]
 8016a0c:	841a      	strh	r2, [r3, #32]
            SX1276.Settings.Fsk.FixLen = fixLen;
 8016a0e:	4bd4      	ldr	r3, [pc, #848]	; (8016d60 <SX1276SetTxConfig+0x3c0>)
 8016a10:	262c      	movs	r6, #44	; 0x2c
 8016a12:	193a      	adds	r2, r7, r4
 8016a14:	1992      	adds	r2, r2, r6
 8016a16:	2122      	movs	r1, #34	; 0x22
 8016a18:	7812      	ldrb	r2, [r2, #0]
 8016a1a:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.CrcOn = crcOn;
 8016a1c:	4bd0      	ldr	r3, [pc, #832]	; (8016d60 <SX1276SetTxConfig+0x3c0>)
 8016a1e:	2230      	movs	r2, #48	; 0x30
 8016a20:	2108      	movs	r1, #8
 8016a22:	468c      	mov	ip, r1
 8016a24:	44bc      	add	ip, r7
 8016a26:	4462      	add	r2, ip
 8016a28:	2124      	movs	r1, #36	; 0x24
 8016a2a:	7812      	ldrb	r2, [r2, #0]
 8016a2c:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 8016a2e:	4bcc      	ldr	r3, [pc, #816]	; (8016d60 <SX1276SetTxConfig+0x3c0>)
 8016a30:	223c      	movs	r2, #60	; 0x3c
 8016a32:	2108      	movs	r1, #8
 8016a34:	468c      	mov	ip, r1
 8016a36:	44bc      	add	ip, r7
 8016a38:	4462      	add	r2, ip
 8016a3a:	2125      	movs	r1, #37	; 0x25
 8016a3c:	7812      	ldrb	r2, [r2, #0]
 8016a3e:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.TxTimeout = timeout;
 8016a40:	4bc7      	ldr	r3, [pc, #796]	; (8016d60 <SX1276SetTxConfig+0x3c0>)
 8016a42:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8016a44:	629a      	str	r2, [r3, #40]	; 0x28
            fdev = ( uint16_t )( ( double )fdev / ( double )FREQ_STEP );
 8016a46:	68b8      	ldr	r0, [r7, #8]
 8016a48:	f7eb fdd8 	bl	80025fc <__aeabi_ui2d>
 8016a4c:	2200      	movs	r2, #0
 8016a4e:	4bc5      	ldr	r3, [pc, #788]	; (8016d64 <SX1276SetTxConfig+0x3c4>)
 8016a50:	f7ea fba0 	bl	8001194 <__aeabi_ddiv>
 8016a54:	0003      	movs	r3, r0
 8016a56:	000c      	movs	r4, r1
 8016a58:	0018      	movs	r0, r3
 8016a5a:	0021      	movs	r1, r4
 8016a5c:	f7e9 fd7e 	bl	800055c <__aeabi_d2uiz>
 8016a60:	0003      	movs	r3, r0
 8016a62:	b29b      	uxth	r3, r3
 8016a64:	60bb      	str	r3, [r7, #8]
            SX1276Write( REG_FDEVMSB, ( uint8_t )( fdev >> 8 ) );
 8016a66:	68bb      	ldr	r3, [r7, #8]
 8016a68:	0a1b      	lsrs	r3, r3, #8
 8016a6a:	b2db      	uxtb	r3, r3
 8016a6c:	0019      	movs	r1, r3
 8016a6e:	2004      	movs	r0, #4
 8016a70:	f000 ffbe 	bl	80179f0 <SX1276Write>
            SX1276Write( REG_FDEVLSB, ( uint8_t )( fdev & 0xFF ) );
 8016a74:	68bb      	ldr	r3, [r7, #8]
 8016a76:	b2db      	uxtb	r3, r3
 8016a78:	0019      	movs	r1, r3
 8016a7a:	2005      	movs	r0, #5
 8016a7c:	f000 ffb8 	bl	80179f0 <SX1276Write>
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 8016a80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016a82:	f7eb fdbb 	bl	80025fc <__aeabi_ui2d>
 8016a86:	0003      	movs	r3, r0
 8016a88:	000c      	movs	r4, r1
 8016a8a:	001a      	movs	r2, r3
 8016a8c:	0023      	movs	r3, r4
 8016a8e:	2000      	movs	r0, #0
 8016a90:	49b5      	ldr	r1, [pc, #724]	; (8016d68 <SX1276SetTxConfig+0x3c8>)
 8016a92:	f7ea fb7f 	bl	8001194 <__aeabi_ddiv>
 8016a96:	0003      	movs	r3, r0
 8016a98:	000c      	movs	r4, r1
 8016a9a:	0018      	movs	r0, r3
 8016a9c:	0021      	movs	r1, r4
 8016a9e:	f7e9 fd5d 	bl	800055c <__aeabi_d2uiz>
 8016aa2:	0003      	movs	r3, r0
 8016aa4:	b29b      	uxth	r3, r3
 8016aa6:	62bb      	str	r3, [r7, #40]	; 0x28
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 8016aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016aaa:	0a1b      	lsrs	r3, r3, #8
 8016aac:	b2db      	uxtb	r3, r3
 8016aae:	0019      	movs	r1, r3
 8016ab0:	2002      	movs	r0, #2
 8016ab2:	f000 ff9d 	bl	80179f0 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 8016ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ab8:	b2db      	uxtb	r3, r3
 8016aba:	0019      	movs	r1, r3
 8016abc:	2003      	movs	r0, #3
 8016abe:	f000 ff97 	bl	80179f0 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 8016ac2:	2408      	movs	r4, #8
 8016ac4:	193b      	adds	r3, r7, r4
 8016ac6:	195b      	adds	r3, r3, r5
 8016ac8:	881b      	ldrh	r3, [r3, #0]
 8016aca:	0a1b      	lsrs	r3, r3, #8
 8016acc:	b29b      	uxth	r3, r3
 8016ace:	b2db      	uxtb	r3, r3
 8016ad0:	0019      	movs	r1, r3
 8016ad2:	2025      	movs	r0, #37	; 0x25
 8016ad4:	f000 ff8c 	bl	80179f0 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, preambleLen & 0xFF );
 8016ad8:	193b      	adds	r3, r7, r4
 8016ada:	195b      	adds	r3, r3, r5
 8016adc:	881b      	ldrh	r3, [r3, #0]
 8016ade:	b2db      	uxtb	r3, r3
 8016ae0:	0019      	movs	r1, r3
 8016ae2:	2026      	movs	r0, #38	; 0x26
 8016ae4:	f000 ff84 	bl	80179f0 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 8016ae8:	2030      	movs	r0, #48	; 0x30
 8016aea:	f000 ff95 	bl	8017a18 <SX1276Read>
 8016aee:	0003      	movs	r3, r0
 8016af0:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_CRC_MASK &
 8016af2:	226f      	movs	r2, #111	; 0x6f
 8016af4:	4013      	ands	r3, r2
 8016af6:	b25a      	sxtb	r2, r3
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8016af8:	193b      	adds	r3, r7, r4
 8016afa:	199b      	adds	r3, r3, r6
 8016afc:	781b      	ldrb	r3, [r3, #0]
 8016afe:	2b00      	cmp	r3, #0
 8016b00:	d001      	beq.n	8016b06 <SX1276SetTxConfig+0x166>
 8016b02:	2300      	movs	r3, #0
 8016b04:	e001      	b.n	8016b0a <SX1276SetTxConfig+0x16a>
 8016b06:	2380      	movs	r3, #128	; 0x80
 8016b08:	425b      	negs	r3, r3
 8016b0a:	4313      	orrs	r3, r2
 8016b0c:	b25a      	sxtb	r2, r3
                           ( crcOn << 4 ) );
 8016b0e:	2330      	movs	r3, #48	; 0x30
 8016b10:	2108      	movs	r1, #8
 8016b12:	468c      	mov	ip, r1
 8016b14:	44bc      	add	ip, r7
 8016b16:	4463      	add	r3, ip
 8016b18:	781b      	ldrb	r3, [r3, #0]
 8016b1a:	011b      	lsls	r3, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 8016b1c:	b25b      	sxtb	r3, r3
 8016b1e:	4313      	orrs	r3, r2
 8016b20:	b25b      	sxtb	r3, r3
            SX1276Write( REG_PACKETCONFIG1,
 8016b22:	b2db      	uxtb	r3, r3
 8016b24:	0019      	movs	r1, r3
 8016b26:	2030      	movs	r0, #48	; 0x30
 8016b28:	f000 ff62 	bl	80179f0 <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 8016b2c:	2031      	movs	r0, #49	; 0x31
 8016b2e:	f000 ff73 	bl	8017a18 <SX1276Read>
 8016b32:	0003      	movs	r3, r0
 8016b34:	001a      	movs	r2, r3
 8016b36:	2340      	movs	r3, #64	; 0x40
 8016b38:	4313      	orrs	r3, r2
 8016b3a:	b2db      	uxtb	r3, r3
 8016b3c:	0019      	movs	r1, r3
 8016b3e:	2031      	movs	r0, #49	; 0x31
 8016b40:	f000 ff56 	bl	80179f0 <SX1276Write>
        break;
 8016b44:	e127      	b.n	8016d96 <SX1276SetTxConfig+0x3f6>
            SX1276.Settings.LoRa.Power = power;
 8016b46:	4b86      	ldr	r3, [pc, #536]	; (8016d60 <SX1276SetTxConfig+0x3c0>)
 8016b48:	220e      	movs	r2, #14
 8016b4a:	18ba      	adds	r2, r7, r2
 8016b4c:	2140      	movs	r1, #64	; 0x40
 8016b4e:	7812      	ldrb	r2, [r2, #0]
 8016b50:	545a      	strb	r2, [r3, r1]
            if( bandwidth > 2 )
 8016b52:	687b      	ldr	r3, [r7, #4]
 8016b54:	2b02      	cmp	r3, #2
 8016b56:	d900      	bls.n	8016b5a <SX1276SetTxConfig+0x1ba>
                while( 1 );
 8016b58:	e7fe      	b.n	8016b58 <SX1276SetTxConfig+0x1b8>
            bandwidth += 7;
 8016b5a:	687b      	ldr	r3, [r7, #4]
 8016b5c:	3307      	adds	r3, #7
 8016b5e:	607b      	str	r3, [r7, #4]
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 8016b60:	4b7f      	ldr	r3, [pc, #508]	; (8016d60 <SX1276SetTxConfig+0x3c0>)
 8016b62:	687a      	ldr	r2, [r7, #4]
 8016b64:	645a      	str	r2, [r3, #68]	; 0x44
            SX1276.Settings.LoRa.Datarate = datarate;
 8016b66:	4b7e      	ldr	r3, [pc, #504]	; (8016d60 <SX1276SetTxConfig+0x3c0>)
 8016b68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016b6a:	649a      	str	r2, [r3, #72]	; 0x48
            SX1276.Settings.LoRa.Coderate = coderate;
 8016b6c:	4b7c      	ldr	r3, [pc, #496]	; (8016d60 <SX1276SetTxConfig+0x3c0>)
 8016b6e:	2224      	movs	r2, #36	; 0x24
 8016b70:	2108      	movs	r1, #8
 8016b72:	468c      	mov	ip, r1
 8016b74:	44bc      	add	ip, r7
 8016b76:	4462      	add	r2, ip
 8016b78:	214d      	movs	r1, #77	; 0x4d
 8016b7a:	7812      	ldrb	r2, [r2, #0]
 8016b7c:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 8016b7e:	4b78      	ldr	r3, [pc, #480]	; (8016d60 <SX1276SetTxConfig+0x3c0>)
 8016b80:	2228      	movs	r2, #40	; 0x28
 8016b82:	2108      	movs	r1, #8
 8016b84:	468c      	mov	ip, r1
 8016b86:	44bc      	add	ip, r7
 8016b88:	4462      	add	r2, ip
 8016b8a:	214e      	movs	r1, #78	; 0x4e
 8016b8c:	8812      	ldrh	r2, [r2, #0]
 8016b8e:	525a      	strh	r2, [r3, r1]
            SX1276.Settings.LoRa.FixLen = fixLen;
 8016b90:	4b73      	ldr	r3, [pc, #460]	; (8016d60 <SX1276SetTxConfig+0x3c0>)
 8016b92:	222c      	movs	r2, #44	; 0x2c
 8016b94:	2108      	movs	r1, #8
 8016b96:	468c      	mov	ip, r1
 8016b98:	44bc      	add	ip, r7
 8016b9a:	4462      	add	r2, ip
 8016b9c:	2150      	movs	r1, #80	; 0x50
 8016b9e:	7812      	ldrb	r2, [r2, #0]
 8016ba0:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 8016ba2:	4b6f      	ldr	r3, [pc, #444]	; (8016d60 <SX1276SetTxConfig+0x3c0>)
 8016ba4:	2234      	movs	r2, #52	; 0x34
 8016ba6:	2108      	movs	r1, #8
 8016ba8:	468c      	mov	ip, r1
 8016baa:	44bc      	add	ip, r7
 8016bac:	4462      	add	r2, ip
 8016bae:	2153      	movs	r1, #83	; 0x53
 8016bb0:	7812      	ldrb	r2, [r2, #0]
 8016bb2:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 8016bb4:	4b6a      	ldr	r3, [pc, #424]	; (8016d60 <SX1276SetTxConfig+0x3c0>)
 8016bb6:	2238      	movs	r2, #56	; 0x38
 8016bb8:	2108      	movs	r1, #8
 8016bba:	468c      	mov	ip, r1
 8016bbc:	44bc      	add	ip, r7
 8016bbe:	4462      	add	r2, ip
 8016bc0:	2154      	movs	r1, #84	; 0x54
 8016bc2:	7812      	ldrb	r2, [r2, #0]
 8016bc4:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.CrcOn = crcOn;
 8016bc6:	4b66      	ldr	r3, [pc, #408]	; (8016d60 <SX1276SetTxConfig+0x3c0>)
 8016bc8:	2230      	movs	r2, #48	; 0x30
 8016bca:	2108      	movs	r1, #8
 8016bcc:	468c      	mov	ip, r1
 8016bce:	44bc      	add	ip, r7
 8016bd0:	4462      	add	r2, ip
 8016bd2:	2152      	movs	r1, #82	; 0x52
 8016bd4:	7812      	ldrb	r2, [r2, #0]
 8016bd6:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 8016bd8:	4b61      	ldr	r3, [pc, #388]	; (8016d60 <SX1276SetTxConfig+0x3c0>)
 8016bda:	223c      	movs	r2, #60	; 0x3c
 8016bdc:	2108      	movs	r1, #8
 8016bde:	468c      	mov	ip, r1
 8016be0:	44bc      	add	ip, r7
 8016be2:	4462      	add	r2, ip
 8016be4:	2155      	movs	r1, #85	; 0x55
 8016be6:	7812      	ldrb	r2, [r2, #0]
 8016be8:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.TxTimeout = timeout;
 8016bea:	4b5d      	ldr	r3, [pc, #372]	; (8016d60 <SX1276SetTxConfig+0x3c0>)
 8016bec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8016bee:	659a      	str	r2, [r3, #88]	; 0x58
            if( datarate > 12 )
 8016bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016bf2:	2b0c      	cmp	r3, #12
 8016bf4:	d902      	bls.n	8016bfc <SX1276SetTxConfig+0x25c>
                datarate = 12;
 8016bf6:	230c      	movs	r3, #12
 8016bf8:	62bb      	str	r3, [r7, #40]	; 0x28
 8016bfa:	e004      	b.n	8016c06 <SX1276SetTxConfig+0x266>
            else if( datarate < 6 )
 8016bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016bfe:	2b05      	cmp	r3, #5
 8016c00:	d801      	bhi.n	8016c06 <SX1276SetTxConfig+0x266>
                datarate = 6;
 8016c02:	2306      	movs	r3, #6
 8016c04:	62bb      	str	r3, [r7, #40]	; 0x28
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8016c06:	687b      	ldr	r3, [r7, #4]
 8016c08:	2b07      	cmp	r3, #7
 8016c0a:	d105      	bne.n	8016c18 <SX1276SetTxConfig+0x278>
 8016c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c0e:	2b0b      	cmp	r3, #11
 8016c10:	d008      	beq.n	8016c24 <SX1276SetTxConfig+0x284>
 8016c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c14:	2b0c      	cmp	r3, #12
 8016c16:	d005      	beq.n	8016c24 <SX1276SetTxConfig+0x284>
 8016c18:	687b      	ldr	r3, [r7, #4]
 8016c1a:	2b08      	cmp	r3, #8
 8016c1c:	d107      	bne.n	8016c2e <SX1276SetTxConfig+0x28e>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 8016c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c20:	2b0c      	cmp	r3, #12
 8016c22:	d104      	bne.n	8016c2e <SX1276SetTxConfig+0x28e>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 8016c24:	4b4e      	ldr	r3, [pc, #312]	; (8016d60 <SX1276SetTxConfig+0x3c0>)
 8016c26:	224c      	movs	r2, #76	; 0x4c
 8016c28:	2101      	movs	r1, #1
 8016c2a:	5499      	strb	r1, [r3, r2]
 8016c2c:	e003      	b.n	8016c36 <SX1276SetTxConfig+0x296>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 8016c2e:	4b4c      	ldr	r3, [pc, #304]	; (8016d60 <SX1276SetTxConfig+0x3c0>)
 8016c30:	224c      	movs	r2, #76	; 0x4c
 8016c32:	2100      	movs	r1, #0
 8016c34:	5499      	strb	r1, [r3, r2]
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8016c36:	4b4a      	ldr	r3, [pc, #296]	; (8016d60 <SX1276SetTxConfig+0x3c0>)
 8016c38:	2253      	movs	r2, #83	; 0x53
 8016c3a:	5c9b      	ldrb	r3, [r3, r2]
 8016c3c:	2b00      	cmp	r3, #0
 8016c3e:	d013      	beq.n	8016c68 <SX1276SetTxConfig+0x2c8>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 8016c40:	2044      	movs	r0, #68	; 0x44
 8016c42:	f000 fee9 	bl	8017a18 <SX1276Read>
 8016c46:	0003      	movs	r3, r0
 8016c48:	001a      	movs	r2, r3
 8016c4a:	2380      	movs	r3, #128	; 0x80
 8016c4c:	425b      	negs	r3, r3
 8016c4e:	4313      	orrs	r3, r2
 8016c50:	b2db      	uxtb	r3, r3
 8016c52:	0019      	movs	r1, r3
 8016c54:	2044      	movs	r0, #68	; 0x44
 8016c56:	f000 fecb 	bl	80179f0 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 8016c5a:	4b41      	ldr	r3, [pc, #260]	; (8016d60 <SX1276SetTxConfig+0x3c0>)
 8016c5c:	2254      	movs	r2, #84	; 0x54
 8016c5e:	5c9b      	ldrb	r3, [r3, r2]
 8016c60:	0019      	movs	r1, r3
 8016c62:	2024      	movs	r0, #36	; 0x24
 8016c64:	f000 fec4 	bl	80179f0 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 8016c68:	201d      	movs	r0, #29
 8016c6a:	f000 fed5 	bl	8017a18 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8016c6e:	687b      	ldr	r3, [r7, #4]
 8016c70:	b2db      	uxtb	r3, r3
 8016c72:	011b      	lsls	r3, r3, #4
 8016c74:	b2da      	uxtb	r2, r3
 8016c76:	2324      	movs	r3, #36	; 0x24
 8016c78:	2108      	movs	r1, #8
 8016c7a:	468c      	mov	ip, r1
 8016c7c:	44bc      	add	ip, r7
 8016c7e:	4463      	add	r3, ip
 8016c80:	781b      	ldrb	r3, [r3, #0]
 8016c82:	18db      	adds	r3, r3, r3
 8016c84:	b2db      	uxtb	r3, r3
 8016c86:	4313      	orrs	r3, r2
 8016c88:	b2da      	uxtb	r2, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 8016c8a:	232c      	movs	r3, #44	; 0x2c
 8016c8c:	2108      	movs	r1, #8
 8016c8e:	468c      	mov	ip, r1
 8016c90:	44bc      	add	ip, r7
 8016c92:	4463      	add	r3, ip
 8016c94:	781b      	ldrb	r3, [r3, #0]
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8016c96:	4313      	orrs	r3, r2
 8016c98:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 8016c9a:	0019      	movs	r1, r3
 8016c9c:	201d      	movs	r0, #29
 8016c9e:	f000 fea7 	bl	80179f0 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 8016ca2:	201e      	movs	r0, #30
 8016ca4:	f000 feb8 	bl	8017a18 <SX1276Read>
 8016ca8:	0003      	movs	r3, r0
 8016caa:	001a      	movs	r2, r3
                           RFLR_MODEMCONFIG2_SF_MASK &
 8016cac:	230b      	movs	r3, #11
 8016cae:	4013      	ands	r3, r2
 8016cb0:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 8016cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016cb4:	b2db      	uxtb	r3, r3
 8016cb6:	011b      	lsls	r3, r3, #4
 8016cb8:	b2db      	uxtb	r3, r3
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK ) |
 8016cba:	4313      	orrs	r3, r2
 8016cbc:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 8016cbe:	2330      	movs	r3, #48	; 0x30
 8016cc0:	2108      	movs	r1, #8
 8016cc2:	468c      	mov	ip, r1
 8016cc4:	44bc      	add	ip, r7
 8016cc6:	4463      	add	r3, ip
 8016cc8:	781b      	ldrb	r3, [r3, #0]
 8016cca:	009b      	lsls	r3, r3, #2
 8016ccc:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG2,
 8016cce:	4313      	orrs	r3, r2
 8016cd0:	b2db      	uxtb	r3, r3
 8016cd2:	0019      	movs	r1, r3
 8016cd4:	201e      	movs	r0, #30
 8016cd6:	f000 fe8b 	bl	80179f0 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 8016cda:	2026      	movs	r0, #38	; 0x26
 8016cdc:	f000 fe9c 	bl	8017a18 <SX1276Read>
 8016ce0:	0003      	movs	r3, r0
 8016ce2:	b25b      	sxtb	r3, r3
 8016ce4:	2208      	movs	r2, #8
 8016ce6:	4393      	bics	r3, r2
 8016ce8:	b25a      	sxtb	r2, r3
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 8016cea:	4b1d      	ldr	r3, [pc, #116]	; (8016d60 <SX1276SetTxConfig+0x3c0>)
 8016cec:	214c      	movs	r1, #76	; 0x4c
 8016cee:	5c5b      	ldrb	r3, [r3, r1]
 8016cf0:	00db      	lsls	r3, r3, #3
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 8016cf2:	b25b      	sxtb	r3, r3
 8016cf4:	4313      	orrs	r3, r2
 8016cf6:	b25b      	sxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG3,
 8016cf8:	b2db      	uxtb	r3, r3
 8016cfa:	0019      	movs	r1, r3
 8016cfc:	2026      	movs	r0, #38	; 0x26
 8016cfe:	f000 fe77 	bl	80179f0 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 8016d02:	2428      	movs	r4, #40	; 0x28
 8016d04:	2508      	movs	r5, #8
 8016d06:	197b      	adds	r3, r7, r5
 8016d08:	191b      	adds	r3, r3, r4
 8016d0a:	881b      	ldrh	r3, [r3, #0]
 8016d0c:	0a1b      	lsrs	r3, r3, #8
 8016d0e:	b29b      	uxth	r3, r3
 8016d10:	b2db      	uxtb	r3, r3
 8016d12:	0019      	movs	r1, r3
 8016d14:	2020      	movs	r0, #32
 8016d16:	f000 fe6b 	bl	80179f0 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, preambleLen & 0xFF );
 8016d1a:	197b      	adds	r3, r7, r5
 8016d1c:	191b      	adds	r3, r3, r4
 8016d1e:	881b      	ldrh	r3, [r3, #0]
 8016d20:	b2db      	uxtb	r3, r3
 8016d22:	0019      	movs	r1, r3
 8016d24:	2021      	movs	r0, #33	; 0x21
 8016d26:	f000 fe63 	bl	80179f0 <SX1276Write>
            if( datarate == 6 )
 8016d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016d2c:	2b06      	cmp	r3, #6
 8016d2e:	d11d      	bne.n	8016d6c <SX1276SetTxConfig+0x3cc>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8016d30:	2031      	movs	r0, #49	; 0x31
 8016d32:	f000 fe71 	bl	8017a18 <SX1276Read>
 8016d36:	0003      	movs	r3, r0
 8016d38:	b25b      	sxtb	r3, r3
 8016d3a:	2207      	movs	r2, #7
 8016d3c:	4393      	bics	r3, r2
 8016d3e:	b25b      	sxtb	r3, r3
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 8016d40:	2205      	movs	r2, #5
 8016d42:	4313      	orrs	r3, r2
 8016d44:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8016d46:	b2db      	uxtb	r3, r3
 8016d48:	0019      	movs	r1, r3
 8016d4a:	2031      	movs	r0, #49	; 0x31
 8016d4c:	f000 fe50 	bl	80179f0 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8016d50:	210c      	movs	r1, #12
 8016d52:	2037      	movs	r0, #55	; 0x37
 8016d54:	f000 fe4c 	bl	80179f0 <SX1276Write>
        break;
 8016d58:	e01c      	b.n	8016d94 <SX1276SetTxConfig+0x3f4>
 8016d5a:	46c0      	nop			; (mov r8, r8)
 8016d5c:	200011a0 	.word	0x200011a0
 8016d60:	200015ec 	.word	0x200015ec
 8016d64:	404e8480 	.word	0x404e8480
 8016d68:	417e8480 	.word	0x417e8480
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8016d6c:	2031      	movs	r0, #49	; 0x31
 8016d6e:	f000 fe53 	bl	8017a18 <SX1276Read>
 8016d72:	0003      	movs	r3, r0
 8016d74:	b25b      	sxtb	r3, r3
 8016d76:	2207      	movs	r2, #7
 8016d78:	4393      	bics	r3, r2
 8016d7a:	b25b      	sxtb	r3, r3
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 8016d7c:	2203      	movs	r2, #3
 8016d7e:	4313      	orrs	r3, r2
 8016d80:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8016d82:	b2db      	uxtb	r3, r3
 8016d84:	0019      	movs	r1, r3
 8016d86:	2031      	movs	r0, #49	; 0x31
 8016d88:	f000 fe32 	bl	80179f0 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8016d8c:	210a      	movs	r1, #10
 8016d8e:	2037      	movs	r0, #55	; 0x37
 8016d90:	f000 fe2e 	bl	80179f0 <SX1276Write>
        break;
 8016d94:	46c0      	nop			; (mov r8, r8)
}
 8016d96:	46c0      	nop			; (mov r8, r8)
 8016d98:	46bd      	mov	sp, r7
 8016d9a:	b005      	add	sp, #20
 8016d9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016d9e:	46c0      	nop			; (mov r8, r8)

08016da0 <SX1276GetTimeOnAir>:

uint32_t SX1276GetTimeOnAir( RadioModems_t modem, uint8_t pktLen )
{
 8016da0:	b5b0      	push	{r4, r5, r7, lr}
 8016da2:	b094      	sub	sp, #80	; 0x50
 8016da4:	af00      	add	r7, sp, #0
 8016da6:	0002      	movs	r2, r0
 8016da8:	1dfb      	adds	r3, r7, #7
 8016daa:	701a      	strb	r2, [r3, #0]
 8016dac:	1dbb      	adds	r3, r7, #6
 8016dae:	1c0a      	adds	r2, r1, #0
 8016db0:	701a      	strb	r2, [r3, #0]
	LOG_INFO_SX1276((">> SX1276GetTimeOnAir\r\n"));

    uint32_t airTime = 0;
 8016db2:	2300      	movs	r3, #0
 8016db4:	64fb      	str	r3, [r7, #76]	; 0x4c

    switch( modem )
 8016db6:	1dfb      	adds	r3, r7, #7
 8016db8:	781b      	ldrb	r3, [r3, #0]
 8016dba:	2b00      	cmp	r3, #0
 8016dbc:	d003      	beq.n	8016dc6 <SX1276GetTimeOnAir+0x26>
 8016dbe:	2b01      	cmp	r3, #1
 8016dc0:	d100      	bne.n	8016dc4 <SX1276GetTimeOnAir+0x24>
 8016dc2:	e086      	b.n	8016ed2 <SX1276GetTimeOnAir+0x132>
 8016dc4:	e164      	b.n	8017090 <SX1276GetTimeOnAir+0x2f0>
    {
    case MODEM_FSK:
        {
            airTime = (uint32_t) round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 8016dc6:	4bb5      	ldr	r3, [pc, #724]	; (801709c <SX1276GetTimeOnAir+0x2fc>)
 8016dc8:	8c1b      	ldrh	r3, [r3, #32]
 8016dca:	001c      	movs	r4, r3
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 8016dcc:	2027      	movs	r0, #39	; 0x27
 8016dce:	f000 fe23 	bl	8017a18 <SX1276Read>
 8016dd2:	0003      	movs	r3, r0
 8016dd4:	001a      	movs	r2, r3
 8016dd6:	23f8      	movs	r3, #248	; 0xf8
 8016dd8:	439a      	bics	r2, r3
 8016dda:	0013      	movs	r3, r2
 8016ddc:	3301      	adds	r3, #1
            airTime = (uint32_t) round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 8016dde:	18e3      	adds	r3, r4, r3
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 8016de0:	0018      	movs	r0, r3
 8016de2:	f7eb fbd1 	bl	8002588 <__aeabi_i2d>
 8016de6:	0004      	movs	r4, r0
 8016de8:	000d      	movs	r5, r1
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
 8016dea:	4bac      	ldr	r3, [pc, #688]	; (801709c <SX1276GetTimeOnAir+0x2fc>)
 8016dec:	2222      	movs	r2, #34	; 0x22
 8016dee:	5c9b      	ldrb	r3, [r3, r2]
 8016df0:	2b00      	cmp	r3, #0
 8016df2:	d002      	beq.n	8016dfa <SX1276GetTimeOnAir+0x5a>
 8016df4:	2000      	movs	r0, #0
 8016df6:	2100      	movs	r1, #0
 8016df8:	e001      	b.n	8016dfe <SX1276GetTimeOnAir+0x5e>
 8016dfa:	2000      	movs	r0, #0
 8016dfc:	49a8      	ldr	r1, [pc, #672]	; (80170a0 <SX1276GetTimeOnAir+0x300>)
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 8016dfe:	0022      	movs	r2, r4
 8016e00:	002b      	movs	r3, r5
 8016e02:	f7e9 feab 	bl	8000b5c <__aeabi_dadd>
 8016e06:	0003      	movs	r3, r0
 8016e08:	000c      	movs	r4, r1
 8016e0a:	0025      	movs	r5, r4
 8016e0c:	001c      	movs	r4, r3
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 8016e0e:	2030      	movs	r0, #48	; 0x30
 8016e10:	f000 fe02 	bl	8017a18 <SX1276Read>
 8016e14:	0003      	movs	r3, r0
 8016e16:	001a      	movs	r2, r3
 8016e18:	23f9      	movs	r3, #249	; 0xf9
 8016e1a:	439a      	bics	r2, r3
 8016e1c:	1e13      	subs	r3, r2, #0
 8016e1e:	d002      	beq.n	8016e26 <SX1276GetTimeOnAir+0x86>
 8016e20:	2000      	movs	r0, #0
 8016e22:	499f      	ldr	r1, [pc, #636]	; (80170a0 <SX1276GetTimeOnAir+0x300>)
 8016e24:	e001      	b.n	8016e2a <SX1276GetTimeOnAir+0x8a>
 8016e26:	2000      	movs	r0, #0
 8016e28:	2100      	movs	r1, #0
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
 8016e2a:	0022      	movs	r2, r4
 8016e2c:	002b      	movs	r3, r5
 8016e2e:	f7e9 fe95 	bl	8000b5c <__aeabi_dadd>
 8016e32:	0003      	movs	r3, r0
 8016e34:	000c      	movs	r4, r1
 8016e36:	0025      	movs	r5, r4
 8016e38:	001c      	movs	r4, r3
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 8016e3a:	1dbb      	adds	r3, r7, #6
 8016e3c:	781b      	ldrb	r3, [r3, #0]
 8016e3e:	0018      	movs	r0, r3
 8016e40:	f7eb fba2 	bl	8002588 <__aeabi_i2d>
 8016e44:	0002      	movs	r2, r0
 8016e46:	000b      	movs	r3, r1
 8016e48:	0020      	movs	r0, r4
 8016e4a:	0029      	movs	r1, r5
 8016e4c:	f7e9 fe86 	bl	8000b5c <__aeabi_dadd>
 8016e50:	0003      	movs	r3, r0
 8016e52:	000c      	movs	r4, r1
 8016e54:	0025      	movs	r5, r4
 8016e56:	001c      	movs	r4, r3
                                     pktLen +
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
 8016e58:	4b90      	ldr	r3, [pc, #576]	; (801709c <SX1276GetTimeOnAir+0x2fc>)
 8016e5a:	2224      	movs	r2, #36	; 0x24
 8016e5c:	5c9b      	ldrb	r3, [r3, r2]
 8016e5e:	2b00      	cmp	r3, #0
 8016e60:	d003      	beq.n	8016e6a <SX1276GetTimeOnAir+0xca>
 8016e62:	2000      	movs	r0, #0
 8016e64:	2180      	movs	r1, #128	; 0x80
 8016e66:	05c9      	lsls	r1, r1, #23
 8016e68:	e001      	b.n	8016e6e <SX1276GetTimeOnAir+0xce>
 8016e6a:	2000      	movs	r0, #0
 8016e6c:	2100      	movs	r1, #0
                                     pktLen +
 8016e6e:	0022      	movs	r2, r4
 8016e70:	002b      	movs	r3, r5
 8016e72:	f7e9 fe73 	bl	8000b5c <__aeabi_dadd>
 8016e76:	0003      	movs	r3, r0
 8016e78:	000c      	movs	r4, r1
 8016e7a:	0018      	movs	r0, r3
 8016e7c:	0021      	movs	r1, r4
            airTime = (uint32_t) round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 8016e7e:	2200      	movs	r2, #0
 8016e80:	4b88      	ldr	r3, [pc, #544]	; (80170a4 <SX1276GetTimeOnAir+0x304>)
 8016e82:	f7ea fd91 	bl	80019a8 <__aeabi_dmul>
 8016e86:	0003      	movs	r3, r0
 8016e88:	000c      	movs	r4, r1
 8016e8a:	0025      	movs	r5, r4
 8016e8c:	001c      	movs	r4, r3
                                     SX1276.Settings.Fsk.Datarate ) * 1000 );
 8016e8e:	4b83      	ldr	r3, [pc, #524]	; (801709c <SX1276GetTimeOnAir+0x2fc>)
 8016e90:	69db      	ldr	r3, [r3, #28]
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
 8016e92:	0018      	movs	r0, r3
 8016e94:	f7eb fbb2 	bl	80025fc <__aeabi_ui2d>
 8016e98:	0002      	movs	r2, r0
 8016e9a:	000b      	movs	r3, r1
 8016e9c:	0020      	movs	r0, r4
 8016e9e:	0029      	movs	r1, r5
 8016ea0:	f7ea f978 	bl	8001194 <__aeabi_ddiv>
 8016ea4:	0003      	movs	r3, r0
 8016ea6:	000c      	movs	r4, r1
 8016ea8:	0018      	movs	r0, r3
 8016eaa:	0021      	movs	r1, r4
            airTime = (uint32_t) round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 8016eac:	2200      	movs	r2, #0
 8016eae:	4b7e      	ldr	r3, [pc, #504]	; (80170a8 <SX1276GetTimeOnAir+0x308>)
 8016eb0:	f7ea fd7a 	bl	80019a8 <__aeabi_dmul>
 8016eb4:	0003      	movs	r3, r0
 8016eb6:	000c      	movs	r4, r1
 8016eb8:	0018      	movs	r0, r3
 8016eba:	0021      	movs	r1, r4
 8016ebc:	f009 fb70 	bl	80205a0 <round>
 8016ec0:	0003      	movs	r3, r0
 8016ec2:	000c      	movs	r4, r1
 8016ec4:	0018      	movs	r0, r3
 8016ec6:	0021      	movs	r1, r4
 8016ec8:	f7e9 fb48 	bl	800055c <__aeabi_d2uiz>
 8016ecc:	0003      	movs	r3, r0
 8016ece:	64fb      	str	r3, [r7, #76]	; 0x4c
        }
        break;
 8016ed0:	e0de      	b.n	8017090 <SX1276GetTimeOnAir+0x2f0>
    case MODEM_LORA:
        {
            double bw = 0.0;
 8016ed2:	2300      	movs	r3, #0
 8016ed4:	2400      	movs	r4, #0
 8016ed6:	643b      	str	r3, [r7, #64]	; 0x40
 8016ed8:	647c      	str	r4, [r7, #68]	; 0x44
            // REMARK: When using LoRa modem only bandwidths 125, 250 and 500 kHz are supported
            switch( SX1276.Settings.LoRa.Bandwidth )
 8016eda:	4b70      	ldr	r3, [pc, #448]	; (801709c <SX1276GetTimeOnAir+0x2fc>)
 8016edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016ede:	2b08      	cmp	r3, #8
 8016ee0:	d008      	beq.n	8016ef4 <SX1276GetTimeOnAir+0x154>
 8016ee2:	2b09      	cmp	r3, #9
 8016ee4:	d00b      	beq.n	8016efe <SX1276GetTimeOnAir+0x15e>
 8016ee6:	2b07      	cmp	r3, #7
 8016ee8:	d10e      	bne.n	8016f08 <SX1276GetTimeOnAir+0x168>
            //    break;
            //case 6: // 62.5 kHz
            //    bw = 62500;
            //    break;
            case 7: // 125 kHz
                bw = 125000;
 8016eea:	2300      	movs	r3, #0
 8016eec:	4c6f      	ldr	r4, [pc, #444]	; (80170ac <SX1276GetTimeOnAir+0x30c>)
 8016eee:	643b      	str	r3, [r7, #64]	; 0x40
 8016ef0:	647c      	str	r4, [r7, #68]	; 0x44
                break;
 8016ef2:	e009      	b.n	8016f08 <SX1276GetTimeOnAir+0x168>
            case 8: // 250 kHz
                bw = 250000;
 8016ef4:	2300      	movs	r3, #0
 8016ef6:	4c6e      	ldr	r4, [pc, #440]	; (80170b0 <SX1276GetTimeOnAir+0x310>)
 8016ef8:	643b      	str	r3, [r7, #64]	; 0x40
 8016efa:	647c      	str	r4, [r7, #68]	; 0x44
                break;
 8016efc:	e004      	b.n	8016f08 <SX1276GetTimeOnAir+0x168>
            case 9: // 500 kHz
                bw = 500000;
 8016efe:	2300      	movs	r3, #0
 8016f00:	4c6c      	ldr	r4, [pc, #432]	; (80170b4 <SX1276GetTimeOnAir+0x314>)
 8016f02:	643b      	str	r3, [r7, #64]	; 0x40
 8016f04:	647c      	str	r4, [r7, #68]	; 0x44
                break;
 8016f06:	46c0      	nop			; (mov r8, r8)
            }

            // Symbol rate : time for one symbol (secs)
            double rs = bw / ( 1 << SX1276.Settings.LoRa.Datarate );
 8016f08:	4b64      	ldr	r3, [pc, #400]	; (801709c <SX1276GetTimeOnAir+0x2fc>)
 8016f0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016f0c:	2201      	movs	r2, #1
 8016f0e:	409a      	lsls	r2, r3
 8016f10:	0013      	movs	r3, r2
 8016f12:	0018      	movs	r0, r3
 8016f14:	f7eb fb38 	bl	8002588 <__aeabi_i2d>
 8016f18:	0003      	movs	r3, r0
 8016f1a:	000c      	movs	r4, r1
 8016f1c:	001a      	movs	r2, r3
 8016f1e:	0023      	movs	r3, r4
 8016f20:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8016f22:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8016f24:	f7ea f936 	bl	8001194 <__aeabi_ddiv>
 8016f28:	0003      	movs	r3, r0
 8016f2a:	000c      	movs	r4, r1
 8016f2c:	63bb      	str	r3, [r7, #56]	; 0x38
 8016f2e:	63fc      	str	r4, [r7, #60]	; 0x3c
            double ts = 1 / rs;
 8016f30:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016f32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016f34:	2000      	movs	r0, #0
 8016f36:	495a      	ldr	r1, [pc, #360]	; (80170a0 <SX1276GetTimeOnAir+0x300>)
 8016f38:	f7ea f92c 	bl	8001194 <__aeabi_ddiv>
 8016f3c:	0003      	movs	r3, r0
 8016f3e:	000c      	movs	r4, r1
 8016f40:	633b      	str	r3, [r7, #48]	; 0x30
 8016f42:	637c      	str	r4, [r7, #52]	; 0x34
            // time of preamble
            double tPreamble = ( SX1276.Settings.LoRa.PreambleLen + 4.25 ) * ts;
 8016f44:	4b55      	ldr	r3, [pc, #340]	; (801709c <SX1276GetTimeOnAir+0x2fc>)
 8016f46:	224e      	movs	r2, #78	; 0x4e
 8016f48:	5a9b      	ldrh	r3, [r3, r2]
 8016f4a:	0018      	movs	r0, r3
 8016f4c:	f7eb fb1c 	bl	8002588 <__aeabi_i2d>
 8016f50:	2200      	movs	r2, #0
 8016f52:	4b59      	ldr	r3, [pc, #356]	; (80170b8 <SX1276GetTimeOnAir+0x318>)
 8016f54:	f7e9 fe02 	bl	8000b5c <__aeabi_dadd>
 8016f58:	0003      	movs	r3, r0
 8016f5a:	000c      	movs	r4, r1
 8016f5c:	001a      	movs	r2, r3
 8016f5e:	0023      	movs	r3, r4
 8016f60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016f62:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8016f64:	f7ea fd20 	bl	80019a8 <__aeabi_dmul>
 8016f68:	0003      	movs	r3, r0
 8016f6a:	000c      	movs	r4, r1
 8016f6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8016f6e:	62fc      	str	r4, [r7, #44]	; 0x2c
            // Symbol length of payload and time
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 8016f70:	1dbb      	adds	r3, r7, #6
 8016f72:	781b      	ldrb	r3, [r3, #0]
 8016f74:	00db      	lsls	r3, r3, #3
 8016f76:	001a      	movs	r2, r3
 8016f78:	4b48      	ldr	r3, [pc, #288]	; (801709c <SX1276GetTimeOnAir+0x2fc>)
 8016f7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016f7c:	009b      	lsls	r3, r3, #2
 8016f7e:	1ad3      	subs	r3, r2, r3
                                 28 + 16 * SX1276.Settings.LoRa.CrcOn -
 8016f80:	4a46      	ldr	r2, [pc, #280]	; (801709c <SX1276GetTimeOnAir+0x2fc>)
 8016f82:	2152      	movs	r1, #82	; 0x52
 8016f84:	5c52      	ldrb	r2, [r2, r1]
 8016f86:	0112      	lsls	r2, r2, #4
 8016f88:	189a      	adds	r2, r3, r2
                                 ( SX1276.Settings.LoRa.FixLen ? 20 : 0 ) ) /
 8016f8a:	4b44      	ldr	r3, [pc, #272]	; (801709c <SX1276GetTimeOnAir+0x2fc>)
 8016f8c:	2150      	movs	r1, #80	; 0x50
 8016f8e:	5c5b      	ldrb	r3, [r3, r1]
 8016f90:	2b00      	cmp	r3, #0
 8016f92:	d001      	beq.n	8016f98 <SX1276GetTimeOnAir+0x1f8>
 8016f94:	2314      	movs	r3, #20
 8016f96:	e000      	b.n	8016f9a <SX1276GetTimeOnAir+0x1fa>
 8016f98:	2300      	movs	r3, #0
                                 28 + 16 * SX1276.Settings.LoRa.CrcOn -
 8016f9a:	1ad3      	subs	r3, r2, r3
 8016f9c:	331c      	adds	r3, #28
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 8016f9e:	0018      	movs	r0, r3
 8016fa0:	f7eb fb2c 	bl	80025fc <__aeabi_ui2d>
 8016fa4:	0004      	movs	r4, r0
 8016fa6:	000d      	movs	r5, r1
                                 ( double )( 4 * ( SX1276.Settings.LoRa.Datarate -
 8016fa8:	4b3c      	ldr	r3, [pc, #240]	; (801709c <SX1276GetTimeOnAir+0x2fc>)
 8016faa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
 8016fac:	4b3b      	ldr	r3, [pc, #236]	; (801709c <SX1276GetTimeOnAir+0x2fc>)
 8016fae:	214c      	movs	r1, #76	; 0x4c
 8016fb0:	5c5b      	ldrb	r3, [r3, r1]
 8016fb2:	2b00      	cmp	r3, #0
 8016fb4:	d001      	beq.n	8016fba <SX1276GetTimeOnAir+0x21a>
 8016fb6:	2302      	movs	r3, #2
 8016fb8:	e000      	b.n	8016fbc <SX1276GetTimeOnAir+0x21c>
 8016fba:	2300      	movs	r3, #0
                                 ( double )( 4 * ( SX1276.Settings.LoRa.Datarate -
 8016fbc:	1ad3      	subs	r3, r2, r3
 8016fbe:	009b      	lsls	r3, r3, #2
 8016fc0:	0018      	movs	r0, r3
 8016fc2:	f7eb fb1b 	bl	80025fc <__aeabi_ui2d>
 8016fc6:	0002      	movs	r2, r0
 8016fc8:	000b      	movs	r3, r1
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 8016fca:	0020      	movs	r0, r4
 8016fcc:	0029      	movs	r1, r5
 8016fce:	f7ea f8e1 	bl	8001194 <__aeabi_ddiv>
 8016fd2:	0003      	movs	r3, r0
 8016fd4:	000c      	movs	r4, r1
 8016fd6:	0018      	movs	r0, r3
 8016fd8:	0021      	movs	r1, r4
 8016fda:	f009 f9dd 	bl	8020398 <ceil>
 8016fde:	0004      	movs	r4, r0
 8016fe0:	000d      	movs	r5, r1
                                 ( SX1276.Settings.LoRa.Coderate + 4 );
 8016fe2:	4b2e      	ldr	r3, [pc, #184]	; (801709c <SX1276GetTimeOnAir+0x2fc>)
 8016fe4:	224d      	movs	r2, #77	; 0x4d
 8016fe6:	5c9b      	ldrb	r3, [r3, r2]
 8016fe8:	3304      	adds	r3, #4
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
 8016fea:	0018      	movs	r0, r3
 8016fec:	f7eb facc 	bl	8002588 <__aeabi_i2d>
 8016ff0:	0002      	movs	r2, r0
 8016ff2:	000b      	movs	r3, r1
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 8016ff4:	0020      	movs	r0, r4
 8016ff6:	0029      	movs	r1, r5
 8016ff8:	f7ea fcd6 	bl	80019a8 <__aeabi_dmul>
 8016ffc:	0003      	movs	r3, r0
 8016ffe:	000c      	movs	r4, r1
 8017000:	623b      	str	r3, [r7, #32]
 8017002:	627c      	str	r4, [r7, #36]	; 0x24
            double nPayload = 8 + ( ( tmp > 0 ) ? tmp : 0 );
 8017004:	2200      	movs	r2, #0
 8017006:	2300      	movs	r3, #0
 8017008:	6a38      	ldr	r0, [r7, #32]
 801700a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801700c:	f7e9 fa24 	bl	8000458 <__aeabi_dcmpgt>
 8017010:	1e03      	subs	r3, r0, #0
 8017012:	d008      	beq.n	8017026 <SX1276GetTimeOnAir+0x286>
 8017014:	2200      	movs	r2, #0
 8017016:	4b23      	ldr	r3, [pc, #140]	; (80170a4 <SX1276GetTimeOnAir+0x304>)
 8017018:	6a38      	ldr	r0, [r7, #32]
 801701a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801701c:	f7e9 fd9e 	bl	8000b5c <__aeabi_dadd>
 8017020:	0003      	movs	r3, r0
 8017022:	000c      	movs	r4, r1
 8017024:	e001      	b.n	801702a <SX1276GetTimeOnAir+0x28a>
 8017026:	2300      	movs	r3, #0
 8017028:	4c1e      	ldr	r4, [pc, #120]	; (80170a4 <SX1276GetTimeOnAir+0x304>)
 801702a:	61bb      	str	r3, [r7, #24]
 801702c:	61fc      	str	r4, [r7, #28]
            double tPayload = nPayload * ts;
 801702e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017030:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017032:	69b8      	ldr	r0, [r7, #24]
 8017034:	69f9      	ldr	r1, [r7, #28]
 8017036:	f7ea fcb7 	bl	80019a8 <__aeabi_dmul>
 801703a:	0003      	movs	r3, r0
 801703c:	000c      	movs	r4, r1
 801703e:	613b      	str	r3, [r7, #16]
 8017040:	617c      	str	r4, [r7, #20]
            // Time on air
            double tOnAir = tPreamble + tPayload;
 8017042:	693a      	ldr	r2, [r7, #16]
 8017044:	697b      	ldr	r3, [r7, #20]
 8017046:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017048:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801704a:	f7e9 fd87 	bl	8000b5c <__aeabi_dadd>
 801704e:	0003      	movs	r3, r0
 8017050:	000c      	movs	r4, r1
 8017052:	60bb      	str	r3, [r7, #8]
 8017054:	60fc      	str	r4, [r7, #12]
            // return ms secs
            airTime = (uint32_t) floor( tOnAir * 1000 + 0.999 );
 8017056:	2200      	movs	r2, #0
 8017058:	4b13      	ldr	r3, [pc, #76]	; (80170a8 <SX1276GetTimeOnAir+0x308>)
 801705a:	68b8      	ldr	r0, [r7, #8]
 801705c:	68f9      	ldr	r1, [r7, #12]
 801705e:	f7ea fca3 	bl	80019a8 <__aeabi_dmul>
 8017062:	0003      	movs	r3, r0
 8017064:	000c      	movs	r4, r1
 8017066:	0018      	movs	r0, r3
 8017068:	0021      	movs	r1, r4
 801706a:	4a14      	ldr	r2, [pc, #80]	; (80170bc <SX1276GetTimeOnAir+0x31c>)
 801706c:	4b14      	ldr	r3, [pc, #80]	; (80170c0 <SX1276GetTimeOnAir+0x320>)
 801706e:	f7e9 fd75 	bl	8000b5c <__aeabi_dadd>
 8017072:	0003      	movs	r3, r0
 8017074:	000c      	movs	r4, r1
 8017076:	0018      	movs	r0, r3
 8017078:	0021      	movs	r1, r4
 801707a:	f009 fa0f 	bl	802049c <floor>
 801707e:	0003      	movs	r3, r0
 8017080:	000c      	movs	r4, r1
 8017082:	0018      	movs	r0, r3
 8017084:	0021      	movs	r1, r4
 8017086:	f7e9 fa69 	bl	800055c <__aeabi_d2uiz>
 801708a:	0003      	movs	r3, r0
 801708c:	64fb      	str	r3, [r7, #76]	; 0x4c
        }
        break;
 801708e:	46c0      	nop			; (mov r8, r8)
    }
    return airTime;
 8017090:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8017092:	0018      	movs	r0, r3
 8017094:	46bd      	mov	sp, r7
 8017096:	b014      	add	sp, #80	; 0x50
 8017098:	bdb0      	pop	{r4, r5, r7, pc}
 801709a:	46c0      	nop			; (mov r8, r8)
 801709c:	200015ec 	.word	0x200015ec
 80170a0:	3ff00000 	.word	0x3ff00000
 80170a4:	40200000 	.word	0x40200000
 80170a8:	408f4000 	.word	0x408f4000
 80170ac:	40fe8480 	.word	0x40fe8480
 80170b0:	410e8480 	.word	0x410e8480
 80170b4:	411e8480 	.word	0x411e8480
 80170b8:	40110000 	.word	0x40110000
 80170bc:	d916872b 	.word	0xd916872b
 80170c0:	3feff7ce 	.word	0x3feff7ce

080170c4 <SX1276Send>:

void SX1276Send( uint8_t *buffer, uint8_t size )
{
 80170c4:	b580      	push	{r7, lr}
 80170c6:	b084      	sub	sp, #16
 80170c8:	af00      	add	r7, sp, #0
 80170ca:	6078      	str	r0, [r7, #4]
 80170cc:	000a      	movs	r2, r1
 80170ce:	1cfb      	adds	r3, r7, #3
 80170d0:	701a      	strb	r2, [r3, #0]
	LOG_INFO_SX1276((">> SX1276Send %d bytes\r\n",size));

    uint32_t txTimeout = 0;
 80170d2:	2300      	movs	r3, #0
 80170d4:	60fb      	str	r3, [r7, #12]

    switch( SX1276.Settings.Modem )
 80170d6:	4b59      	ldr	r3, [pc, #356]	; (801723c <SX1276Send+0x178>)
 80170d8:	795b      	ldrb	r3, [r3, #5]
 80170da:	2b00      	cmp	r3, #0
 80170dc:	d002      	beq.n	80170e4 <SX1276Send+0x20>
 80170de:	2b01      	cmp	r3, #1
 80170e0:	d04c      	beq.n	801717c <SX1276Send+0xb8>
 80170e2:	e0a2      	b.n	801722a <SX1276Send+0x166>
    {
    case MODEM_FSK:
        {
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 80170e4:	4b55      	ldr	r3, [pc, #340]	; (801723c <SX1276Send+0x178>)
 80170e6:	2200      	movs	r2, #0
 80170e8:	879a      	strh	r2, [r3, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = size;
 80170ea:	1cfb      	adds	r3, r7, #3
 80170ec:	781b      	ldrb	r3, [r3, #0]
 80170ee:	b29a      	uxth	r2, r3
 80170f0:	4b52      	ldr	r3, [pc, #328]	; (801723c <SX1276Send+0x178>)
 80170f2:	875a      	strh	r2, [r3, #58]	; 0x3a

            if( SX1276.Settings.Fsk.FixLen == false )
 80170f4:	4b51      	ldr	r3, [pc, #324]	; (801723c <SX1276Send+0x178>)
 80170f6:	2222      	movs	r2, #34	; 0x22
 80170f8:	5c9b      	ldrb	r3, [r3, r2]
 80170fa:	2201      	movs	r2, #1
 80170fc:	4053      	eors	r3, r2
 80170fe:	b2db      	uxtb	r3, r3
 8017100:	2b00      	cmp	r3, #0
 8017102:	d005      	beq.n	8017110 <SX1276Send+0x4c>
            {
                SX1276WriteFifo( ( uint8_t* )&size, 1 );
 8017104:	1cfb      	adds	r3, r7, #3
 8017106:	2101      	movs	r1, #1
 8017108:	0018      	movs	r0, r3
 801710a:	f000 fd3b 	bl	8017b84 <SX1276WriteFifo>
 801710e:	e005      	b.n	801711c <SX1276Send+0x58>
            }
            else
            {
                SX1276Write( REG_PAYLOADLENGTH, size );
 8017110:	1cfb      	adds	r3, r7, #3
 8017112:	781b      	ldrb	r3, [r3, #0]
 8017114:	0019      	movs	r1, r3
 8017116:	2032      	movs	r0, #50	; 0x32
 8017118:	f000 fc6a 	bl	80179f0 <SX1276Write>
            }

            if( ( size > 0 ) && ( size <= 64 ) )
 801711c:	1cfb      	adds	r3, r7, #3
 801711e:	781b      	ldrb	r3, [r3, #0]
 8017120:	2b00      	cmp	r3, #0
 8017122:	d009      	beq.n	8017138 <SX1276Send+0x74>
 8017124:	1cfb      	adds	r3, r7, #3
 8017126:	781b      	ldrb	r3, [r3, #0]
 8017128:	2b40      	cmp	r3, #64	; 0x40
 801712a:	d805      	bhi.n	8017138 <SX1276Send+0x74>
            {
                SX1276.Settings.FskPacketHandler.ChunkSize = size;
 801712c:	1cfb      	adds	r3, r7, #3
 801712e:	7819      	ldrb	r1, [r3, #0]
 8017130:	4b42      	ldr	r3, [pc, #264]	; (801723c <SX1276Send+0x178>)
 8017132:	223f      	movs	r2, #63	; 0x3f
 8017134:	5499      	strb	r1, [r3, r2]
 8017136:	e00b      	b.n	8017150 <SX1276Send+0x8c>
            }
            else
            {
                memcpy1( RxTxBuffer, buffer, size );
 8017138:	1cfb      	adds	r3, r7, #3
 801713a:	781b      	ldrb	r3, [r3, #0]
 801713c:	b29a      	uxth	r2, r3
 801713e:	6879      	ldr	r1, [r7, #4]
 8017140:	4b3f      	ldr	r3, [pc, #252]	; (8017240 <SX1276Send+0x17c>)
 8017142:	0018      	movs	r0, r3
 8017144:	f7fe fc54 	bl	80159f0 <memcpy1>
                SX1276.Settings.FskPacketHandler.ChunkSize = 32;
 8017148:	4b3c      	ldr	r3, [pc, #240]	; (801723c <SX1276Send+0x178>)
 801714a:	223f      	movs	r2, #63	; 0x3f
 801714c:	2120      	movs	r1, #32
 801714e:	5499      	strb	r1, [r3, r2]
            }

            // Write payload buffer
            SX1276WriteFifo( buffer, SX1276.Settings.FskPacketHandler.ChunkSize );
 8017150:	4b3a      	ldr	r3, [pc, #232]	; (801723c <SX1276Send+0x178>)
 8017152:	223f      	movs	r2, #63	; 0x3f
 8017154:	5c9a      	ldrb	r2, [r3, r2]
 8017156:	687b      	ldr	r3, [r7, #4]
 8017158:	0011      	movs	r1, r2
 801715a:	0018      	movs	r0, r3
 801715c:	f000 fd12 	bl	8017b84 <SX1276WriteFifo>
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 8017160:	4b36      	ldr	r3, [pc, #216]	; (801723c <SX1276Send+0x178>)
 8017162:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 8017164:	4b35      	ldr	r3, [pc, #212]	; (801723c <SX1276Send+0x178>)
 8017166:	213f      	movs	r1, #63	; 0x3f
 8017168:	5c5b      	ldrb	r3, [r3, r1]
 801716a:	b29b      	uxth	r3, r3
 801716c:	18d3      	adds	r3, r2, r3
 801716e:	b29a      	uxth	r2, r3
 8017170:	4b32      	ldr	r3, [pc, #200]	; (801723c <SX1276Send+0x178>)
 8017172:	879a      	strh	r2, [r3, #60]	; 0x3c
            txTimeout = SX1276.Settings.Fsk.TxTimeout;
 8017174:	4b31      	ldr	r3, [pc, #196]	; (801723c <SX1276Send+0x178>)
 8017176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017178:	60fb      	str	r3, [r7, #12]
        }
        break;
 801717a:	e056      	b.n	801722a <SX1276Send+0x166>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.IqInverted == true )
 801717c:	4b2f      	ldr	r3, [pc, #188]	; (801723c <SX1276Send+0x178>)
 801717e:	2255      	movs	r2, #85	; 0x55
 8017180:	5c9b      	ldrb	r3, [r3, r2]
 8017182:	2b00      	cmp	r3, #0
 8017184:	d011      	beq.n	80171aa <SX1276Send+0xe6>
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
 8017186:	2033      	movs	r0, #51	; 0x33
 8017188:	f000 fc46 	bl	8017a18 <SX1276Read>
 801718c:	0003      	movs	r3, r0
 801718e:	001a      	movs	r2, r3
 8017190:	2341      	movs	r3, #65	; 0x41
 8017192:	439a      	bics	r2, r3
 8017194:	0013      	movs	r3, r2
 8017196:	b2db      	uxtb	r3, r3
 8017198:	0019      	movs	r1, r3
 801719a:	2033      	movs	r0, #51	; 0x33
 801719c:	f000 fc28 	bl	80179f0 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 80171a0:	2119      	movs	r1, #25
 80171a2:	203b      	movs	r0, #59	; 0x3b
 80171a4:	f000 fc24 	bl	80179f0 <SX1276Write>
 80171a8:	e013      	b.n	80171d2 <SX1276Send+0x10e>
            }
            else
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 80171aa:	2033      	movs	r0, #51	; 0x33
 80171ac:	f000 fc34 	bl	8017a18 <SX1276Read>
 80171b0:	0003      	movs	r3, r0
 80171b2:	b25b      	sxtb	r3, r3
 80171b4:	2241      	movs	r2, #65	; 0x41
 80171b6:	4393      	bics	r3, r2
 80171b8:	b25b      	sxtb	r3, r3
 80171ba:	2201      	movs	r2, #1
 80171bc:	4313      	orrs	r3, r2
 80171be:	b25b      	sxtb	r3, r3
 80171c0:	b2db      	uxtb	r3, r3
 80171c2:	0019      	movs	r1, r3
 80171c4:	2033      	movs	r0, #51	; 0x33
 80171c6:	f000 fc13 	bl	80179f0 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 80171ca:	211d      	movs	r1, #29
 80171cc:	203b      	movs	r0, #59	; 0x3b
 80171ce:	f000 fc0f 	bl	80179f0 <SX1276Write>
            }

            SX1276.Settings.LoRaPacketHandler.Size = size;
 80171d2:	1cfb      	adds	r3, r7, #3
 80171d4:	7819      	ldrb	r1, [r3, #0]
 80171d6:	4b19      	ldr	r3, [pc, #100]	; (801723c <SX1276Send+0x178>)
 80171d8:	2264      	movs	r2, #100	; 0x64
 80171da:	5499      	strb	r1, [r3, r2]

            // Initializes the payload size
            SX1276Write( REG_LR_PAYLOADLENGTH, size );
 80171dc:	1cfb      	adds	r3, r7, #3
 80171de:	781b      	ldrb	r3, [r3, #0]
 80171e0:	0019      	movs	r1, r3
 80171e2:	2022      	movs	r0, #34	; 0x22
 80171e4:	f000 fc04 	bl	80179f0 <SX1276Write>

            // Full buffer used for Tx
            SX1276Write( REG_LR_FIFOTXBASEADDR, 0 );
 80171e8:	2100      	movs	r1, #0
 80171ea:	200e      	movs	r0, #14
 80171ec:	f000 fc00 	bl	80179f0 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 80171f0:	2100      	movs	r1, #0
 80171f2:	200d      	movs	r0, #13
 80171f4:	f000 fbfc 	bl	80179f0 <SX1276Write>

            // FIFO operations can not take place in Sleep mode
            if( ( SX1276Read( REG_OPMODE ) & ~RF_OPMODE_MASK ) == RF_OPMODE_SLEEP )
 80171f8:	2001      	movs	r0, #1
 80171fa:	f000 fc0d 	bl	8017a18 <SX1276Read>
 80171fe:	0003      	movs	r3, r0
 8017200:	001a      	movs	r2, r3
 8017202:	23f8      	movs	r3, #248	; 0xf8
 8017204:	439a      	bics	r2, r3
 8017206:	1e13      	subs	r3, r2, #0
 8017208:	d104      	bne.n	8017214 <SX1276Send+0x150>
            {
                SX1276SetStby( );
 801720a:	f000 f835 	bl	8017278 <SX1276SetStby>
                DelayMs( 1 );
 801720e:	2001      	movs	r0, #1
 8017210:	f007 f810 	bl	801e234 <itsdk_delayMs>
            }
            // Write payload buffer
            SX1276WriteFifo( buffer, size );
 8017214:	1cfb      	adds	r3, r7, #3
 8017216:	781a      	ldrb	r2, [r3, #0]
 8017218:	687b      	ldr	r3, [r7, #4]
 801721a:	0011      	movs	r1, r2
 801721c:	0018      	movs	r0, r3
 801721e:	f000 fcb1 	bl	8017b84 <SX1276WriteFifo>
            txTimeout = SX1276.Settings.LoRa.TxTimeout;
 8017222:	4b06      	ldr	r3, [pc, #24]	; (801723c <SX1276Send+0x178>)
 8017224:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017226:	60fb      	str	r3, [r7, #12]
        }
        break;
 8017228:	46c0      	nop			; (mov r8, r8)
    }

    SX1276SetTx( txTimeout );
 801722a:	68fb      	ldr	r3, [r7, #12]
 801722c:	0018      	movs	r0, r3
 801722e:	f000 f9cd 	bl	80175cc <SX1276SetTx>
}
 8017232:	46c0      	nop			; (mov r8, r8)
 8017234:	46bd      	mov	sp, r7
 8017236:	b004      	add	sp, #16
 8017238:	bd80      	pop	{r7, pc}
 801723a:	46c0      	nop			; (mov r8, r8)
 801723c:	200015ec 	.word	0x200015ec
 8017240:	200010a0 	.word	0x200010a0

08017244 <SX1276SetSleep>:

void SX1276SetSleep( void )
{
 8017244:	b580      	push	{r7, lr}
 8017246:	af00      	add	r7, sp, #0
	LOG_INFO_SX1276((">> SX1276SetSleep\r\n"));

    TimerStop( &RxTimeoutTimer );
 8017248:	4b08      	ldr	r3, [pc, #32]	; (801726c <SX1276SetSleep+0x28>)
 801724a:	0018      	movs	r0, r3
 801724c:	f7fe fb40 	bl	80158d0 <TimerStop>
    TimerStop( &TxTimeoutTimer );
 8017250:	4b07      	ldr	r3, [pc, #28]	; (8017270 <SX1276SetSleep+0x2c>)
 8017252:	0018      	movs	r0, r3
 8017254:	f7fe fb3c 	bl	80158d0 <TimerStop>

    SX1276SetOpMode( RF_OPMODE_SLEEP );
 8017258:	2000      	movs	r0, #0
 801725a:	f000 fb21 	bl	80178a0 <SX1276SetOpMode>
    SX1276.Settings.State = RF_IDLE;
 801725e:	4b05      	ldr	r3, [pc, #20]	; (8017274 <SX1276SetSleep+0x30>)
 8017260:	2200      	movs	r2, #0
 8017262:	711a      	strb	r2, [r3, #4]
}
 8017264:	46c0      	nop			; (mov r8, r8)
 8017266:	46bd      	mov	sp, r7
 8017268:	bd80      	pop	{r7, pc}
 801726a:	46c0      	nop			; (mov r8, r8)
 801726c:	20001654 	.word	0x20001654
 8017270:	200015bc 	.word	0x200015bc
 8017274:	200015ec 	.word	0x200015ec

08017278 <SX1276SetStby>:

void SX1276SetStby( void )
{
 8017278:	b580      	push	{r7, lr}
 801727a:	af00      	add	r7, sp, #0
	LOG_INFO_SX1276((">> SX1276SetStby\r\n"));

    TimerStop( &RxTimeoutTimer );
 801727c:	4b08      	ldr	r3, [pc, #32]	; (80172a0 <SX1276SetStby+0x28>)
 801727e:	0018      	movs	r0, r3
 8017280:	f7fe fb26 	bl	80158d0 <TimerStop>
    TimerStop( &TxTimeoutTimer );
 8017284:	4b07      	ldr	r3, [pc, #28]	; (80172a4 <SX1276SetStby+0x2c>)
 8017286:	0018      	movs	r0, r3
 8017288:	f7fe fb22 	bl	80158d0 <TimerStop>

    SX1276SetOpMode( RF_OPMODE_STANDBY );
 801728c:	2001      	movs	r0, #1
 801728e:	f000 fb07 	bl	80178a0 <SX1276SetOpMode>
    SX1276.Settings.State = RF_IDLE;
 8017292:	4b05      	ldr	r3, [pc, #20]	; (80172a8 <SX1276SetStby+0x30>)
 8017294:	2200      	movs	r2, #0
 8017296:	711a      	strb	r2, [r3, #4]
}
 8017298:	46c0      	nop			; (mov r8, r8)
 801729a:	46bd      	mov	sp, r7
 801729c:	bd80      	pop	{r7, pc}
 801729e:	46c0      	nop			; (mov r8, r8)
 80172a0:	20001654 	.word	0x20001654
 80172a4:	200015bc 	.word	0x200015bc
 80172a8:	200015ec 	.word	0x200015ec

080172ac <SX1276SetRx>:

void SX1276SetRx( uint32_t timeout )
{
 80172ac:	b580      	push	{r7, lr}
 80172ae:	b084      	sub	sp, #16
 80172b0:	af00      	add	r7, sp, #0
 80172b2:	6078      	str	r0, [r7, #4]
	LOG_INFO_SX1276((">> SX1276SetRx (%d)\r\n",timeout));

    bool rxContinuous = false;
 80172b4:	230f      	movs	r3, #15
 80172b6:	18fb      	adds	r3, r7, r3
 80172b8:	2200      	movs	r2, #0
 80172ba:	701a      	strb	r2, [r3, #0]

    switch( SX1276.Settings.Modem )
 80172bc:	4bb8      	ldr	r3, [pc, #736]	; (80175a0 <SX1276SetRx+0x2f4>)
 80172be:	795b      	ldrb	r3, [r3, #5]
 80172c0:	2b00      	cmp	r3, #0
 80172c2:	d002      	beq.n	80172ca <SX1276SetRx+0x1e>
 80172c4:	2b01      	cmp	r3, #1
 80172c6:	d041      	beq.n	801734c <SX1276SetRx+0xa0>
 80172c8:	e128      	b.n	801751c <SX1276SetRx+0x270>
    {
    case MODEM_FSK:
        {
            rxContinuous = SX1276.Settings.Fsk.RxContinuous;
 80172ca:	230f      	movs	r3, #15
 80172cc:	18fb      	adds	r3, r7, r3
 80172ce:	4ab4      	ldr	r2, [pc, #720]	; (80175a0 <SX1276SetRx+0x2f4>)
 80172d0:	2126      	movs	r1, #38	; 0x26
 80172d2:	5c52      	ldrb	r2, [r2, r1]
 80172d4:	701a      	strb	r2, [r3, #0]
            // DIO1=FifoLevel
            // DIO2=SyncAddr
            // DIO3=FifoEmpty
            // DIO4=Preamble
            // DIO5=ModeReady
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 80172d6:	2040      	movs	r0, #64	; 0x40
 80172d8:	f000 fb9e 	bl	8017a18 <SX1276Read>
 80172dc:	0003      	movs	r3, r0
 80172de:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_MASK &
                                                                            RF_DIOMAPPING1_DIO2_MASK ) |
                                                                            RF_DIOMAPPING1_DIO0_00 |
 80172e0:	2203      	movs	r2, #3
 80172e2:	4013      	ands	r3, r2
 80172e4:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_00 |
 80172e6:	220c      	movs	r2, #12
 80172e8:	4313      	orrs	r3, r2
 80172ea:	b25b      	sxtb	r3, r3
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 80172ec:	b2db      	uxtb	r3, r3
 80172ee:	0019      	movs	r1, r3
 80172f0:	2040      	movs	r0, #64	; 0x40
 80172f2:	f000 fb7d 	bl	80179f0 <SX1276Write>
                                                                            RF_DIOMAPPING1_DIO2_11 );

            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 80172f6:	2041      	movs	r0, #65	; 0x41
 80172f8:	f000 fb8e 	bl	8017a18 <SX1276Read>
 80172fc:	0003      	movs	r3, r0
 80172fe:	001a      	movs	r2, r3
 8017300:	233f      	movs	r3, #63	; 0x3f
 8017302:	425b      	negs	r3, r3
 8017304:	4313      	orrs	r3, r2
 8017306:	b2db      	uxtb	r3, r3
 8017308:	0019      	movs	r1, r3
 801730a:	2041      	movs	r0, #65	; 0x41
 801730c:	f000 fb70 	bl	80179f0 <SX1276Write>
                                                                            RF_DIOMAPPING2_MAP_MASK ) |
                                                                            RF_DIOMAPPING2_DIO4_11 |
                                                                            RF_DIOMAPPING2_MAP_PREAMBLEDETECT );

            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 8017310:	2035      	movs	r0, #53	; 0x35
 8017312:	f000 fb81 	bl	8017a18 <SX1276Read>
 8017316:	0003      	movs	r3, r0
 8017318:	001a      	movs	r2, r3
 801731a:	233f      	movs	r3, #63	; 0x3f
 801731c:	4013      	ands	r3, r2
 801731e:	b2d9      	uxtb	r1, r3
 8017320:	4b9f      	ldr	r3, [pc, #636]	; (80175a0 <SX1276SetRx+0x2f4>)
 8017322:	223e      	movs	r2, #62	; 0x3e
 8017324:	5499      	strb	r1, [r3, r2]

            SX1276Write( REG_RXCONFIG, RF_RXCONFIG_AFCAUTO_ON | RF_RXCONFIG_AGCAUTO_ON | RF_RXCONFIG_RXTRIGER_PREAMBLEDETECT );
 8017326:	211e      	movs	r1, #30
 8017328:	200d      	movs	r0, #13
 801732a:	f000 fb61 	bl	80179f0 <SX1276Write>

            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 801732e:	4b9c      	ldr	r3, [pc, #624]	; (80175a0 <SX1276SetRx+0x2f4>)
 8017330:	2230      	movs	r2, #48	; 0x30
 8017332:	2100      	movs	r1, #0
 8017334:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 8017336:	4b9a      	ldr	r3, [pc, #616]	; (80175a0 <SX1276SetRx+0x2f4>)
 8017338:	2231      	movs	r2, #49	; 0x31
 801733a:	2100      	movs	r1, #0
 801733c:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 801733e:	4b98      	ldr	r3, [pc, #608]	; (80175a0 <SX1276SetRx+0x2f4>)
 8017340:	2200      	movs	r2, #0
 8017342:	879a      	strh	r2, [r3, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = 0;
 8017344:	4b96      	ldr	r3, [pc, #600]	; (80175a0 <SX1276SetRx+0x2f4>)
 8017346:	2200      	movs	r2, #0
 8017348:	875a      	strh	r2, [r3, #58]	; 0x3a
        }
        break;
 801734a:	e0e7      	b.n	801751c <SX1276SetRx+0x270>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.IqInverted == true )
 801734c:	4b94      	ldr	r3, [pc, #592]	; (80175a0 <SX1276SetRx+0x2f4>)
 801734e:	2255      	movs	r2, #85	; 0x55
 8017350:	5c9b      	ldrb	r3, [r3, r2]
 8017352:	2b00      	cmp	r3, #0
 8017354:	d010      	beq.n	8017378 <SX1276SetRx+0xcc>
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
 8017356:	2033      	movs	r0, #51	; 0x33
 8017358:	f000 fb5e 	bl	8017a18 <SX1276Read>
 801735c:	0003      	movs	r3, r0
 801735e:	001a      	movs	r2, r3
 8017360:	2341      	movs	r3, #65	; 0x41
 8017362:	4313      	orrs	r3, r2
 8017364:	b2db      	uxtb	r3, r3
 8017366:	0019      	movs	r1, r3
 8017368:	2033      	movs	r0, #51	; 0x33
 801736a:	f000 fb41 	bl	80179f0 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 801736e:	2119      	movs	r1, #25
 8017370:	203b      	movs	r0, #59	; 0x3b
 8017372:	f000 fb3d 	bl	80179f0 <SX1276Write>
 8017376:	e013      	b.n	80173a0 <SX1276SetRx+0xf4>
            }
            else
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 8017378:	2033      	movs	r0, #51	; 0x33
 801737a:	f000 fb4d 	bl	8017a18 <SX1276Read>
 801737e:	0003      	movs	r3, r0
 8017380:	b25b      	sxtb	r3, r3
 8017382:	2241      	movs	r2, #65	; 0x41
 8017384:	4393      	bics	r3, r2
 8017386:	b25b      	sxtb	r3, r3
 8017388:	2201      	movs	r2, #1
 801738a:	4313      	orrs	r3, r2
 801738c:	b25b      	sxtb	r3, r3
 801738e:	b2db      	uxtb	r3, r3
 8017390:	0019      	movs	r1, r3
 8017392:	2033      	movs	r0, #51	; 0x33
 8017394:	f000 fb2c 	bl	80179f0 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 8017398:	211d      	movs	r1, #29
 801739a:	203b      	movs	r0, #59	; 0x3b
 801739c:	f000 fb28 	bl	80179f0 <SX1276Write>
            }

            // ERRATA 2.3 - Receiver Spurious Reception of a LoRa Signal
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
 80173a0:	4b7f      	ldr	r3, [pc, #508]	; (80175a0 <SX1276SetRx+0x2f4>)
 80173a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80173a4:	2b08      	cmp	r3, #8
 80173a6:	d900      	bls.n	80173aa <SX1276SetRx+0xfe>
 80173a8:	e076      	b.n	8017498 <SX1276SetRx+0x1ec>
            {
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
 80173aa:	2031      	movs	r0, #49	; 0x31
 80173ac:	f000 fb34 	bl	8017a18 <SX1276Read>
 80173b0:	0003      	movs	r3, r0
 80173b2:	001a      	movs	r2, r3
 80173b4:	237f      	movs	r3, #127	; 0x7f
 80173b6:	4013      	ands	r3, r2
 80173b8:	b2db      	uxtb	r3, r3
 80173ba:	0019      	movs	r1, r3
 80173bc:	2031      	movs	r0, #49	; 0x31
 80173be:	f000 fb17 	bl	80179f0 <SX1276Write>
                SX1276Write( REG_LR_IFFREQ2, 0x00 );
 80173c2:	2100      	movs	r1, #0
 80173c4:	2030      	movs	r0, #48	; 0x30
 80173c6:	f000 fb13 	bl	80179f0 <SX1276Write>
                switch( SX1276.Settings.LoRa.Bandwidth )
 80173ca:	4b75      	ldr	r3, [pc, #468]	; (80175a0 <SX1276SetRx+0x2f4>)
 80173cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80173ce:	2b08      	cmp	r3, #8
 80173d0:	d86f      	bhi.n	80174b2 <SX1276SetRx+0x206>
 80173d2:	009a      	lsls	r2, r3, #2
 80173d4:	4b73      	ldr	r3, [pc, #460]	; (80175a4 <SX1276SetRx+0x2f8>)
 80173d6:	18d3      	adds	r3, r2, r3
 80173d8:	681b      	ldr	r3, [r3, #0]
 80173da:	469f      	mov	pc, r3
                {
                case 0: // 7.8 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x48 );
 80173dc:	2148      	movs	r1, #72	; 0x48
 80173de:	202f      	movs	r0, #47	; 0x2f
 80173e0:	f000 fb06 	bl	80179f0 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 7810 );
 80173e4:	4b6e      	ldr	r3, [pc, #440]	; (80175a0 <SX1276SetRx+0x2f4>)
 80173e6:	689b      	ldr	r3, [r3, #8]
 80173e8:	4a6f      	ldr	r2, [pc, #444]	; (80175a8 <SX1276SetRx+0x2fc>)
 80173ea:	4694      	mov	ip, r2
 80173ec:	4463      	add	r3, ip
 80173ee:	0018      	movs	r0, r3
 80173f0:	f7fe feb6 	bl	8016160 <SX1276SetChannel>
                    break;
 80173f4:	e05d      	b.n	80174b2 <SX1276SetRx+0x206>
                case 1: // 10.4 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 80173f6:	2144      	movs	r1, #68	; 0x44
 80173f8:	202f      	movs	r0, #47	; 0x2f
 80173fa:	f000 faf9 	bl	80179f0 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 10420 );
 80173fe:	4b68      	ldr	r3, [pc, #416]	; (80175a0 <SX1276SetRx+0x2f4>)
 8017400:	689b      	ldr	r3, [r3, #8]
 8017402:	4a6a      	ldr	r2, [pc, #424]	; (80175ac <SX1276SetRx+0x300>)
 8017404:	4694      	mov	ip, r2
 8017406:	4463      	add	r3, ip
 8017408:	0018      	movs	r0, r3
 801740a:	f7fe fea9 	bl	8016160 <SX1276SetChannel>
                    break;
 801740e:	e050      	b.n	80174b2 <SX1276SetRx+0x206>
                case 2: // 15.6 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8017410:	2144      	movs	r1, #68	; 0x44
 8017412:	202f      	movs	r0, #47	; 0x2f
 8017414:	f000 faec 	bl	80179f0 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 15620 );
 8017418:	4b61      	ldr	r3, [pc, #388]	; (80175a0 <SX1276SetRx+0x2f4>)
 801741a:	689b      	ldr	r3, [r3, #8]
 801741c:	4a64      	ldr	r2, [pc, #400]	; (80175b0 <SX1276SetRx+0x304>)
 801741e:	4694      	mov	ip, r2
 8017420:	4463      	add	r3, ip
 8017422:	0018      	movs	r0, r3
 8017424:	f7fe fe9c 	bl	8016160 <SX1276SetChannel>
                    break;
 8017428:	e043      	b.n	80174b2 <SX1276SetRx+0x206>
                case 3: // 20.8 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 801742a:	2144      	movs	r1, #68	; 0x44
 801742c:	202f      	movs	r0, #47	; 0x2f
 801742e:	f000 fadf 	bl	80179f0 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 20830 );
 8017432:	4b5b      	ldr	r3, [pc, #364]	; (80175a0 <SX1276SetRx+0x2f4>)
 8017434:	689b      	ldr	r3, [r3, #8]
 8017436:	4a5f      	ldr	r2, [pc, #380]	; (80175b4 <SX1276SetRx+0x308>)
 8017438:	4694      	mov	ip, r2
 801743a:	4463      	add	r3, ip
 801743c:	0018      	movs	r0, r3
 801743e:	f7fe fe8f 	bl	8016160 <SX1276SetChannel>
                    break;
 8017442:	e036      	b.n	80174b2 <SX1276SetRx+0x206>
                case 4: // 31.2 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8017444:	2144      	movs	r1, #68	; 0x44
 8017446:	202f      	movs	r0, #47	; 0x2f
 8017448:	f000 fad2 	bl	80179f0 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 31250 );
 801744c:	4b54      	ldr	r3, [pc, #336]	; (80175a0 <SX1276SetRx+0x2f4>)
 801744e:	689b      	ldr	r3, [r3, #8]
 8017450:	4a59      	ldr	r2, [pc, #356]	; (80175b8 <SX1276SetRx+0x30c>)
 8017452:	4694      	mov	ip, r2
 8017454:	4463      	add	r3, ip
 8017456:	0018      	movs	r0, r3
 8017458:	f7fe fe82 	bl	8016160 <SX1276SetChannel>
                    break;
 801745c:	e029      	b.n	80174b2 <SX1276SetRx+0x206>
                case 5: // 41.4 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 801745e:	2144      	movs	r1, #68	; 0x44
 8017460:	202f      	movs	r0, #47	; 0x2f
 8017462:	f000 fac5 	bl	80179f0 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 41670 );
 8017466:	4b4e      	ldr	r3, [pc, #312]	; (80175a0 <SX1276SetRx+0x2f4>)
 8017468:	689b      	ldr	r3, [r3, #8]
 801746a:	4a54      	ldr	r2, [pc, #336]	; (80175bc <SX1276SetRx+0x310>)
 801746c:	4694      	mov	ip, r2
 801746e:	4463      	add	r3, ip
 8017470:	0018      	movs	r0, r3
 8017472:	f7fe fe75 	bl	8016160 <SX1276SetChannel>
                    break;
 8017476:	e01c      	b.n	80174b2 <SX1276SetRx+0x206>
                case 6: // 62.5 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 8017478:	2140      	movs	r1, #64	; 0x40
 801747a:	202f      	movs	r0, #47	; 0x2f
 801747c:	f000 fab8 	bl	80179f0 <SX1276Write>
                    break;
 8017480:	e017      	b.n	80174b2 <SX1276SetRx+0x206>
                case 7: // 125 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 8017482:	2140      	movs	r1, #64	; 0x40
 8017484:	202f      	movs	r0, #47	; 0x2f
 8017486:	f000 fab3 	bl	80179f0 <SX1276Write>
                    break;
 801748a:	e012      	b.n	80174b2 <SX1276SetRx+0x206>
                case 8: // 250 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 801748c:	2140      	movs	r1, #64	; 0x40
 801748e:	202f      	movs	r0, #47	; 0x2f
 8017490:	f000 faae 	bl	80179f0 <SX1276Write>
                    break;
 8017494:	46c0      	nop			; (mov r8, r8)
 8017496:	e00c      	b.n	80174b2 <SX1276SetRx+0x206>
                }
            }
            else
            {
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) | 0x80 );
 8017498:	2031      	movs	r0, #49	; 0x31
 801749a:	f000 fabd 	bl	8017a18 <SX1276Read>
 801749e:	0003      	movs	r3, r0
 80174a0:	001a      	movs	r2, r3
 80174a2:	2380      	movs	r3, #128	; 0x80
 80174a4:	425b      	negs	r3, r3
 80174a6:	4313      	orrs	r3, r2
 80174a8:	b2db      	uxtb	r3, r3
 80174aa:	0019      	movs	r1, r3
 80174ac:	2031      	movs	r0, #49	; 0x31
 80174ae:	f000 fa9f 	bl	80179f0 <SX1276Write>
            }

            rxContinuous = SX1276.Settings.LoRa.RxContinuous;
 80174b2:	230f      	movs	r3, #15
 80174b4:	18fb      	adds	r3, r7, r3
 80174b6:	4a3a      	ldr	r2, [pc, #232]	; (80175a0 <SX1276SetRx+0x2f4>)
 80174b8:	2156      	movs	r1, #86	; 0x56
 80174ba:	5c52      	ldrb	r2, [r2, r1]
 80174bc:	701a      	strb	r2, [r3, #0]

            if( SX1276.Settings.LoRa.FreqHopOn == true )
 80174be:	4b38      	ldr	r3, [pc, #224]	; (80175a0 <SX1276SetRx+0x2f4>)
 80174c0:	2253      	movs	r2, #83	; 0x53
 80174c2:	5c9b      	ldrb	r3, [r3, r2]
 80174c4:	2b00      	cmp	r3, #0
 80174c6:	d010      	beq.n	80174ea <SX1276SetRx+0x23e>
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 80174c8:	211d      	movs	r1, #29
 80174ca:	2011      	movs	r0, #17
 80174cc:	f000 fa90 	bl	80179f0 <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  //RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=RxDone, DIO2=FhssChangeChannel
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK  ) | RFLR_DIOMAPPING1_DIO0_00 | RFLR_DIOMAPPING1_DIO2_00 );
 80174d0:	2040      	movs	r0, #64	; 0x40
 80174d2:	f000 faa1 	bl	8017a18 <SX1276Read>
 80174d6:	0003      	movs	r3, r0
 80174d8:	001a      	movs	r2, r3
 80174da:	2333      	movs	r3, #51	; 0x33
 80174dc:	4013      	ands	r3, r2
 80174de:	b2db      	uxtb	r3, r3
 80174e0:	0019      	movs	r1, r3
 80174e2:	2040      	movs	r0, #64	; 0x40
 80174e4:	f000 fa84 	bl	80179f0 <SX1276Write>
 80174e8:	e00f      	b.n	801750a <SX1276SetRx+0x25e>
            }
            else
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 80174ea:	211f      	movs	r1, #31
 80174ec:	2011      	movs	r0, #17
 80174ee:	f000 fa7f 	bl	80179f0 <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=RxDone
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 80174f2:	2040      	movs	r0, #64	; 0x40
 80174f4:	f000 fa90 	bl	8017a18 <SX1276Read>
 80174f8:	0003      	movs	r3, r0
 80174fa:	001a      	movs	r2, r3
 80174fc:	233f      	movs	r3, #63	; 0x3f
 80174fe:	4013      	ands	r3, r2
 8017500:	b2db      	uxtb	r3, r3
 8017502:	0019      	movs	r1, r3
 8017504:	2040      	movs	r0, #64	; 0x40
 8017506:	f000 fa73 	bl	80179f0 <SX1276Write>
            }
            SX1276Write( REG_LR_FIFORXBASEADDR, 0 );
 801750a:	2100      	movs	r1, #0
 801750c:	200f      	movs	r0, #15
 801750e:	f000 fa6f 	bl	80179f0 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 8017512:	2100      	movs	r1, #0
 8017514:	200d      	movs	r0, #13
 8017516:	f000 fa6b 	bl	80179f0 <SX1276Write>
        }
        break;
 801751a:	46c0      	nop			; (mov r8, r8)
    }

    memset( RxTxBuffer, 0, ( size_t )RX_BUFFER_SIZE );
 801751c:	2380      	movs	r3, #128	; 0x80
 801751e:	005a      	lsls	r2, r3, #1
 8017520:	4b27      	ldr	r3, [pc, #156]	; (80175c0 <SX1276SetRx+0x314>)
 8017522:	2100      	movs	r1, #0
 8017524:	0018      	movs	r0, r3
 8017526:	f007 fe0b 	bl	801f140 <memset>

    SX1276.Settings.State = RF_RX_RUNNING;
 801752a:	4b1d      	ldr	r3, [pc, #116]	; (80175a0 <SX1276SetRx+0x2f4>)
 801752c:	2201      	movs	r2, #1
 801752e:	711a      	strb	r2, [r3, #4]
    if( timeout != 0 )
 8017530:	687b      	ldr	r3, [r7, #4]
 8017532:	2b00      	cmp	r3, #0
 8017534:	d009      	beq.n	801754a <SX1276SetRx+0x29e>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8017536:	687a      	ldr	r2, [r7, #4]
 8017538:	4b22      	ldr	r3, [pc, #136]	; (80175c4 <SX1276SetRx+0x318>)
 801753a:	0011      	movs	r1, r2
 801753c:	0018      	movs	r0, r3
 801753e:	f7fe f945 	bl	80157cc <TimerSetValue>
        TimerStart( &RxTimeoutTimer );
 8017542:	4b20      	ldr	r3, [pc, #128]	; (80175c4 <SX1276SetRx+0x318>)
 8017544:	0018      	movs	r0, r3
 8017546:	f7fe f96d 	bl	8015824 <TimerStart>
    }

    if( SX1276.Settings.Modem == MODEM_FSK )
 801754a:	4b15      	ldr	r3, [pc, #84]	; (80175a0 <SX1276SetRx+0x2f4>)
 801754c:	795b      	ldrb	r3, [r3, #5]
 801754e:	2b00      	cmp	r3, #0
 8017550:	d116      	bne.n	8017580 <SX1276SetRx+0x2d4>
    {
        SX1276SetOpMode( RF_OPMODE_RECEIVER );
 8017552:	2005      	movs	r0, #5
 8017554:	f000 f9a4 	bl	80178a0 <SX1276SetOpMode>

        if( rxContinuous == false )
 8017558:	230f      	movs	r3, #15
 801755a:	18fb      	adds	r3, r7, r3
 801755c:	781b      	ldrb	r3, [r3, #0]
 801755e:	2201      	movs	r2, #1
 8017560:	4053      	eors	r3, r2
 8017562:	b2db      	uxtb	r3, r3
 8017564:	2b00      	cmp	r3, #0
 8017566:	d017      	beq.n	8017598 <SX1276SetRx+0x2ec>
        {
            TimerSetValue( &RxTimeoutSyncWord, SX1276.Settings.Fsk.RxSingleTimeout );
 8017568:	4b0d      	ldr	r3, [pc, #52]	; (80175a0 <SX1276SetRx+0x2f4>)
 801756a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801756c:	4b16      	ldr	r3, [pc, #88]	; (80175c8 <SX1276SetRx+0x31c>)
 801756e:	0011      	movs	r1, r2
 8017570:	0018      	movs	r0, r3
 8017572:	f7fe f92b 	bl	80157cc <TimerSetValue>
            TimerStart( &RxTimeoutSyncWord );
 8017576:	4b14      	ldr	r3, [pc, #80]	; (80175c8 <SX1276SetRx+0x31c>)
 8017578:	0018      	movs	r0, r3
 801757a:	f7fe f953 	bl	8015824 <TimerStart>
        else
        {
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
        }
    }
}
 801757e:	e00b      	b.n	8017598 <SX1276SetRx+0x2ec>
        if( rxContinuous == true )
 8017580:	230f      	movs	r3, #15
 8017582:	18fb      	adds	r3, r7, r3
 8017584:	781b      	ldrb	r3, [r3, #0]
 8017586:	2b00      	cmp	r3, #0
 8017588:	d003      	beq.n	8017592 <SX1276SetRx+0x2e6>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER );
 801758a:	2005      	movs	r0, #5
 801758c:	f000 f988 	bl	80178a0 <SX1276SetOpMode>
}
 8017590:	e002      	b.n	8017598 <SX1276SetRx+0x2ec>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
 8017592:	2006      	movs	r0, #6
 8017594:	f000 f984 	bl	80178a0 <SX1276SetOpMode>
}
 8017598:	46c0      	nop			; (mov r8, r8)
 801759a:	46bd      	mov	sp, r7
 801759c:	b004      	add	sp, #16
 801759e:	bd80      	pop	{r7, pc}
 80175a0:	200015ec 	.word	0x200015ec
 80175a4:	08021ca8 	.word	0x08021ca8
 80175a8:	00001e82 	.word	0x00001e82
 80175ac:	000028b4 	.word	0x000028b4
 80175b0:	00003d04 	.word	0x00003d04
 80175b4:	0000515e 	.word	0x0000515e
 80175b8:	00007a12 	.word	0x00007a12
 80175bc:	0000a2c6 	.word	0x0000a2c6
 80175c0:	200010a0 	.word	0x200010a0
 80175c4:	20001654 	.word	0x20001654
 80175c8:	200015d4 	.word	0x200015d4

080175cc <SX1276SetTx>:

void SX1276SetTx( uint32_t timeout )
{
 80175cc:	b580      	push	{r7, lr}
 80175ce:	b082      	sub	sp, #8
 80175d0:	af00      	add	r7, sp, #0
 80175d2:	6078      	str	r0, [r7, #4]
    LOG_INFO_SX1276((">> SX1276SetTx (%d)\r\n",timeout));

    TimerSetValue( &TxTimeoutTimer, timeout );
 80175d4:	687a      	ldr	r2, [r7, #4]
 80175d6:	4b38      	ldr	r3, [pc, #224]	; (80176b8 <SX1276SetTx+0xec>)
 80175d8:	0011      	movs	r1, r2
 80175da:	0018      	movs	r0, r3
 80175dc:	f7fe f8f6 	bl	80157cc <TimerSetValue>

    switch( SX1276.Settings.Modem )
 80175e0:	4b36      	ldr	r3, [pc, #216]	; (80176bc <SX1276SetTx+0xf0>)
 80175e2:	795b      	ldrb	r3, [r3, #5]
 80175e4:	2b00      	cmp	r3, #0
 80175e6:	d002      	beq.n	80175ee <SX1276SetTx+0x22>
 80175e8:	2b01      	cmp	r3, #1
 80175ea:	d028      	beq.n	801763e <SX1276SetTx+0x72>
 80175ec:	e056      	b.n	801769c <SX1276SetTx+0xd0>
            // DIO1=FifoEmpty
            // DIO2=FifoFull
            // DIO3=FifoEmpty
            // DIO4=LowBat
            // DIO5=ModeReady
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 80175ee:	2040      	movs	r0, #64	; 0x40
 80175f0:	f000 fa12 	bl	8017a18 <SX1276Read>
 80175f4:	0003      	movs	r3, r0
 80175f6:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_MASK &
 80175f8:	2203      	movs	r2, #3
 80175fa:	4013      	ands	r3, r2
 80175fc:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO2_MASK ) |
 80175fe:	2210      	movs	r2, #16
 8017600:	4313      	orrs	r3, r2
 8017602:	b25b      	sxtb	r3, r3
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8017604:	b2db      	uxtb	r3, r3
 8017606:	0019      	movs	r1, r3
 8017608:	2040      	movs	r0, #64	; 0x40
 801760a:	f000 f9f1 	bl	80179f0 <SX1276Write>
                                                                            RF_DIOMAPPING1_DIO1_01 );

            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 801760e:	2041      	movs	r0, #65	; 0x41
 8017610:	f000 fa02 	bl	8017a18 <SX1276Read>
 8017614:	0003      	movs	r3, r0
 8017616:	001a      	movs	r2, r3
 8017618:	233e      	movs	r3, #62	; 0x3e
 801761a:	4013      	ands	r3, r2
 801761c:	b2db      	uxtb	r3, r3
 801761e:	0019      	movs	r1, r3
 8017620:	2041      	movs	r0, #65	; 0x41
 8017622:	f000 f9e5 	bl	80179f0 <SX1276Write>
                                                                            RF_DIOMAPPING2_MAP_MASK ) );
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 8017626:	2035      	movs	r0, #53	; 0x35
 8017628:	f000 f9f6 	bl	8017a18 <SX1276Read>
 801762c:	0003      	movs	r3, r0
 801762e:	001a      	movs	r2, r3
 8017630:	233f      	movs	r3, #63	; 0x3f
 8017632:	4013      	ands	r3, r2
 8017634:	b2d9      	uxtb	r1, r3
 8017636:	4b21      	ldr	r3, [pc, #132]	; (80176bc <SX1276SetTx+0xf0>)
 8017638:	223e      	movs	r2, #62	; 0x3e
 801763a:	5499      	strb	r1, [r3, r2]
        }
        break;
 801763c:	e02e      	b.n	801769c <SX1276SetTx+0xd0>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 801763e:	4b1f      	ldr	r3, [pc, #124]	; (80176bc <SX1276SetTx+0xf0>)
 8017640:	2253      	movs	r2, #83	; 0x53
 8017642:	5c9b      	ldrb	r3, [r3, r2]
 8017644:	2b00      	cmp	r3, #0
 8017646:	d014      	beq.n	8017672 <SX1276SetTx+0xa6>
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8017648:	21f5      	movs	r1, #245	; 0xf5
 801764a:	2011      	movs	r0, #17
 801764c:	f000 f9d0 	bl	80179f0 <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  //RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=TxDone, DIO2=FhssChangeChannel
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK ) | RFLR_DIOMAPPING1_DIO0_01 | RFLR_DIOMAPPING1_DIO2_00 );
 8017650:	2040      	movs	r0, #64	; 0x40
 8017652:	f000 f9e1 	bl	8017a18 <SX1276Read>
 8017656:	0003      	movs	r3, r0
 8017658:	b25b      	sxtb	r3, r3
 801765a:	2233      	movs	r2, #51	; 0x33
 801765c:	4013      	ands	r3, r2
 801765e:	b25b      	sxtb	r3, r3
 8017660:	2240      	movs	r2, #64	; 0x40
 8017662:	4313      	orrs	r3, r2
 8017664:	b25b      	sxtb	r3, r3
 8017666:	b2db      	uxtb	r3, r3
 8017668:	0019      	movs	r1, r3
 801766a:	2040      	movs	r0, #64	; 0x40
 801766c:	f000 f9c0 	bl	80179f0 <SX1276Write>

                // DIO0=TxDone
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
            }
        }
        break;
 8017670:	e013      	b.n	801769a <SX1276SetTx+0xce>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8017672:	21f7      	movs	r1, #247	; 0xf7
 8017674:	2011      	movs	r0, #17
 8017676:	f000 f9bb 	bl	80179f0 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 801767a:	2040      	movs	r0, #64	; 0x40
 801767c:	f000 f9cc 	bl	8017a18 <SX1276Read>
 8017680:	0003      	movs	r3, r0
 8017682:	b25b      	sxtb	r3, r3
 8017684:	223f      	movs	r2, #63	; 0x3f
 8017686:	4013      	ands	r3, r2
 8017688:	b25b      	sxtb	r3, r3
 801768a:	2240      	movs	r2, #64	; 0x40
 801768c:	4313      	orrs	r3, r2
 801768e:	b25b      	sxtb	r3, r3
 8017690:	b2db      	uxtb	r3, r3
 8017692:	0019      	movs	r1, r3
 8017694:	2040      	movs	r0, #64	; 0x40
 8017696:	f000 f9ab 	bl	80179f0 <SX1276Write>
        break;
 801769a:	46c0      	nop			; (mov r8, r8)
    }

    SX1276.Settings.State = RF_TX_RUNNING;
 801769c:	4b07      	ldr	r3, [pc, #28]	; (80176bc <SX1276SetTx+0xf0>)
 801769e:	2202      	movs	r2, #2
 80176a0:	711a      	strb	r2, [r3, #4]
    TimerStart( &TxTimeoutTimer );
 80176a2:	4b05      	ldr	r3, [pc, #20]	; (80176b8 <SX1276SetTx+0xec>)
 80176a4:	0018      	movs	r0, r3
 80176a6:	f7fe f8bd 	bl	8015824 <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 80176aa:	2003      	movs	r0, #3
 80176ac:	f000 f8f8 	bl	80178a0 <SX1276SetOpMode>
}
 80176b0:	46c0      	nop			; (mov r8, r8)
 80176b2:	46bd      	mov	sp, r7
 80176b4:	b002      	add	sp, #8
 80176b6:	bd80      	pop	{r7, pc}
 80176b8:	200015bc 	.word	0x200015bc
 80176bc:	200015ec 	.word	0x200015ec

080176c0 <SX1276StartCad>:

void SX1276StartCad( void )
{
 80176c0:	b580      	push	{r7, lr}
 80176c2:	af00      	add	r7, sp, #0
	LOG_INFO_SX1276((">> SX1276StartCad\r\n"));

    switch( SX1276.Settings.Modem )
 80176c4:	4b11      	ldr	r3, [pc, #68]	; (801770c <SX1276StartCad+0x4c>)
 80176c6:	795b      	ldrb	r3, [r3, #5]
 80176c8:	2b00      	cmp	r3, #0
 80176ca:	d01a      	beq.n	8017702 <SX1276StartCad+0x42>
 80176cc:	2b01      	cmp	r3, #1
 80176ce:	d000      	beq.n	80176d2 <SX1276StartCad+0x12>
            SX1276.Settings.State = RF_CAD;
            SX1276SetOpMode( RFLR_OPMODE_CAD );
        }
        break;
    default:
        break;
 80176d0:	e018      	b.n	8017704 <SX1276StartCad+0x44>
            SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 80176d2:	21fa      	movs	r1, #250	; 0xfa
 80176d4:	2011      	movs	r0, #17
 80176d6:	f000 f98b 	bl	80179f0 <SX1276Write>
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO3_MASK ) | RFLR_DIOMAPPING1_DIO3_00 );
 80176da:	2040      	movs	r0, #64	; 0x40
 80176dc:	f000 f99c 	bl	8017a18 <SX1276Read>
 80176e0:	0003      	movs	r3, r0
 80176e2:	001a      	movs	r2, r3
 80176e4:	2303      	movs	r3, #3
 80176e6:	439a      	bics	r2, r3
 80176e8:	0013      	movs	r3, r2
 80176ea:	b2db      	uxtb	r3, r3
 80176ec:	0019      	movs	r1, r3
 80176ee:	2040      	movs	r0, #64	; 0x40
 80176f0:	f000 f97e 	bl	80179f0 <SX1276Write>
            SX1276.Settings.State = RF_CAD;
 80176f4:	4b05      	ldr	r3, [pc, #20]	; (801770c <SX1276StartCad+0x4c>)
 80176f6:	2203      	movs	r2, #3
 80176f8:	711a      	strb	r2, [r3, #4]
            SX1276SetOpMode( RFLR_OPMODE_CAD );
 80176fa:	2007      	movs	r0, #7
 80176fc:	f000 f8d0 	bl	80178a0 <SX1276SetOpMode>
        break;
 8017700:	e000      	b.n	8017704 <SX1276StartCad+0x44>
        break;
 8017702:	46c0      	nop			; (mov r8, r8)
    }
}
 8017704:	46c0      	nop			; (mov r8, r8)
 8017706:	46bd      	mov	sp, r7
 8017708:	bd80      	pop	{r7, pc}
 801770a:	46c0      	nop			; (mov r8, r8)
 801770c:	200015ec 	.word	0x200015ec

08017710 <SX1276SetTxContinuousWave>:

void SX1276SetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 8017710:	b580      	push	{r7, lr}
 8017712:	b08e      	sub	sp, #56	; 0x38
 8017714:	af0a      	add	r7, sp, #40	; 0x28
 8017716:	6078      	str	r0, [r7, #4]
 8017718:	0008      	movs	r0, r1
 801771a:	0011      	movs	r1, r2
 801771c:	1cfb      	adds	r3, r7, #3
 801771e:	1c02      	adds	r2, r0, #0
 8017720:	701a      	strb	r2, [r3, #0]
 8017722:	003b      	movs	r3, r7
 8017724:	1c0a      	adds	r2, r1, #0
 8017726:	801a      	strh	r2, [r3, #0]
	LOG_INFO_SX1276((">> SX1276SetTxContinuousWave\r\n"));

    uint32_t timeout = ( uint32_t )( time * 1000 );
 8017728:	003b      	movs	r3, r7
 801772a:	881a      	ldrh	r2, [r3, #0]
 801772c:	0013      	movs	r3, r2
 801772e:	015b      	lsls	r3, r3, #5
 8017730:	1a9b      	subs	r3, r3, r2
 8017732:	009b      	lsls	r3, r3, #2
 8017734:	189b      	adds	r3, r3, r2
 8017736:	00db      	lsls	r3, r3, #3
 8017738:	60fb      	str	r3, [r7, #12]

    SX1276SetChannel( freq );
 801773a:	687b      	ldr	r3, [r7, #4]
 801773c:	0018      	movs	r0, r3
 801773e:	f7fe fd0f 	bl	8016160 <SX1276SetChannel>

    SX1276SetTxConfig( MODEM_FSK, power, 0, 0, 4800, 0, 5, false, false, 0, 0, 0, timeout );
 8017742:	1cfb      	adds	r3, r7, #3
 8017744:	2100      	movs	r1, #0
 8017746:	5659      	ldrsb	r1, [r3, r1]
 8017748:	68fb      	ldr	r3, [r7, #12]
 801774a:	9308      	str	r3, [sp, #32]
 801774c:	2300      	movs	r3, #0
 801774e:	9307      	str	r3, [sp, #28]
 8017750:	2300      	movs	r3, #0
 8017752:	9306      	str	r3, [sp, #24]
 8017754:	2300      	movs	r3, #0
 8017756:	9305      	str	r3, [sp, #20]
 8017758:	2300      	movs	r3, #0
 801775a:	9304      	str	r3, [sp, #16]
 801775c:	2300      	movs	r3, #0
 801775e:	9303      	str	r3, [sp, #12]
 8017760:	2305      	movs	r3, #5
 8017762:	9302      	str	r3, [sp, #8]
 8017764:	2300      	movs	r3, #0
 8017766:	9301      	str	r3, [sp, #4]
 8017768:	2396      	movs	r3, #150	; 0x96
 801776a:	015b      	lsls	r3, r3, #5
 801776c:	9300      	str	r3, [sp, #0]
 801776e:	2300      	movs	r3, #0
 8017770:	2200      	movs	r2, #0
 8017772:	2000      	movs	r0, #0
 8017774:	f7ff f914 	bl	80169a0 <SX1276SetTxConfig>

    SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) & RF_PACKETCONFIG2_DATAMODE_MASK ) );
 8017778:	2031      	movs	r0, #49	; 0x31
 801777a:	f000 f94d 	bl	8017a18 <SX1276Read>
 801777e:	0003      	movs	r3, r0
 8017780:	001a      	movs	r2, r3
 8017782:	2340      	movs	r3, #64	; 0x40
 8017784:	439a      	bics	r2, r3
 8017786:	0013      	movs	r3, r2
 8017788:	b2db      	uxtb	r3, r3
 801778a:	0019      	movs	r1, r3
 801778c:	2031      	movs	r0, #49	; 0x31
 801778e:	f000 f92f 	bl	80179f0 <SX1276Write>
    // Disable radio interrupts
    SX1276Write( REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_11 | RF_DIOMAPPING1_DIO1_11 );
 8017792:	21f0      	movs	r1, #240	; 0xf0
 8017794:	2040      	movs	r0, #64	; 0x40
 8017796:	f000 f92b 	bl	80179f0 <SX1276Write>
    SX1276Write( REG_DIOMAPPING2, RF_DIOMAPPING2_DIO4_10 | RF_DIOMAPPING2_DIO5_10 );
 801779a:	21a0      	movs	r1, #160	; 0xa0
 801779c:	2041      	movs	r0, #65	; 0x41
 801779e:	f000 f927 	bl	80179f0 <SX1276Write>

    TimerSetValue( &TxTimeoutTimer, timeout );
 80177a2:	68fa      	ldr	r2, [r7, #12]
 80177a4:	4b09      	ldr	r3, [pc, #36]	; (80177cc <SX1276SetTxContinuousWave+0xbc>)
 80177a6:	0011      	movs	r1, r2
 80177a8:	0018      	movs	r0, r3
 80177aa:	f7fe f80f 	bl	80157cc <TimerSetValue>

    SX1276.Settings.State = RF_TX_RUNNING;
 80177ae:	4b08      	ldr	r3, [pc, #32]	; (80177d0 <SX1276SetTxContinuousWave+0xc0>)
 80177b0:	2202      	movs	r2, #2
 80177b2:	711a      	strb	r2, [r3, #4]
    TimerStart( &TxTimeoutTimer );
 80177b4:	4b05      	ldr	r3, [pc, #20]	; (80177cc <SX1276SetTxContinuousWave+0xbc>)
 80177b6:	0018      	movs	r0, r3
 80177b8:	f7fe f834 	bl	8015824 <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 80177bc:	2003      	movs	r0, #3
 80177be:	f000 f86f 	bl	80178a0 <SX1276SetOpMode>
}
 80177c2:	46c0      	nop			; (mov r8, r8)
 80177c4:	46bd      	mov	sp, r7
 80177c6:	b004      	add	sp, #16
 80177c8:	bd80      	pop	{r7, pc}
 80177ca:	46c0      	nop			; (mov r8, r8)
 80177cc:	200015bc 	.word	0x200015bc
 80177d0:	200015ec 	.word	0x200015ec

080177d4 <SX1276ReadRssi>:

int16_t SX1276ReadRssi( RadioModems_t modem )
{
 80177d4:	b580      	push	{r7, lr}
 80177d6:	b084      	sub	sp, #16
 80177d8:	af00      	add	r7, sp, #0
 80177da:	0002      	movs	r2, r0
 80177dc:	1dfb      	adds	r3, r7, #7
 80177de:	701a      	strb	r2, [r3, #0]
	LOG_INFO_SX1276((">> SX1276ReadRssi\r\n"));

    int16_t rssi = 0;
 80177e0:	230e      	movs	r3, #14
 80177e2:	18fb      	adds	r3, r7, r3
 80177e4:	2200      	movs	r2, #0
 80177e6:	801a      	strh	r2, [r3, #0]

    switch( modem )
 80177e8:	1dfb      	adds	r3, r7, #7
 80177ea:	781b      	ldrb	r3, [r3, #0]
 80177ec:	2b00      	cmp	r3, #0
 80177ee:	d002      	beq.n	80177f6 <SX1276ReadRssi+0x22>
 80177f0:	2b01      	cmp	r3, #1
 80177f2:	d00d      	beq.n	8017810 <SX1276ReadRssi+0x3c>
 80177f4:	e027      	b.n	8017846 <SX1276ReadRssi+0x72>
    {
    case MODEM_FSK:
        rssi = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 80177f6:	2011      	movs	r0, #17
 80177f8:	f000 f90e 	bl	8017a18 <SX1276Read>
 80177fc:	0003      	movs	r3, r0
 80177fe:	085b      	lsrs	r3, r3, #1
 8017800:	b2db      	uxtb	r3, r3
 8017802:	b29b      	uxth	r3, r3
 8017804:	425b      	negs	r3, r3
 8017806:	b29a      	uxth	r2, r3
 8017808:	230e      	movs	r3, #14
 801780a:	18fb      	adds	r3, r7, r3
 801780c:	801a      	strh	r2, [r3, #0]
        break;
 801780e:	e020      	b.n	8017852 <SX1276ReadRssi+0x7e>
    case MODEM_LORA:
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8017810:	4b14      	ldr	r3, [pc, #80]	; (8017864 <SX1276ReadRssi+0x90>)
 8017812:	689b      	ldr	r3, [r3, #8]
 8017814:	4a14      	ldr	r2, [pc, #80]	; (8017868 <SX1276ReadRssi+0x94>)
 8017816:	4293      	cmp	r3, r2
 8017818:	d90a      	bls.n	8017830 <SX1276ReadRssi+0x5c>
        {
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
 801781a:	201b      	movs	r0, #27
 801781c:	f000 f8fc 	bl	8017a18 <SX1276Read>
 8017820:	0003      	movs	r3, r0
 8017822:	b29b      	uxth	r3, r3
 8017824:	3b9d      	subs	r3, #157	; 0x9d
 8017826:	b29a      	uxth	r2, r3
 8017828:	230e      	movs	r3, #14
 801782a:	18fb      	adds	r3, r7, r3
 801782c:	801a      	strh	r2, [r3, #0]
        }
        else
        {
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
        }
        break;
 801782e:	e010      	b.n	8017852 <SX1276ReadRssi+0x7e>
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
 8017830:	201b      	movs	r0, #27
 8017832:	f000 f8f1 	bl	8017a18 <SX1276Read>
 8017836:	0003      	movs	r3, r0
 8017838:	b29b      	uxth	r3, r3
 801783a:	3ba4      	subs	r3, #164	; 0xa4
 801783c:	b29a      	uxth	r2, r3
 801783e:	230e      	movs	r3, #14
 8017840:	18fb      	adds	r3, r7, r3
 8017842:	801a      	strh	r2, [r3, #0]
        break;
 8017844:	e005      	b.n	8017852 <SX1276ReadRssi+0x7e>
    default:
        rssi = -1;
 8017846:	230e      	movs	r3, #14
 8017848:	18fb      	adds	r3, r7, r3
 801784a:	2201      	movs	r2, #1
 801784c:	4252      	negs	r2, r2
 801784e:	801a      	strh	r2, [r3, #0]
        break;
 8017850:	46c0      	nop			; (mov r8, r8)
    }
    return rssi;
 8017852:	230e      	movs	r3, #14
 8017854:	18fb      	adds	r3, r7, r3
 8017856:	2200      	movs	r2, #0
 8017858:	5e9b      	ldrsh	r3, [r3, r2]
}
 801785a:	0018      	movs	r0, r3
 801785c:	46bd      	mov	sp, r7
 801785e:	b004      	add	sp, #16
 8017860:	bd80      	pop	{r7, pc}
 8017862:	46c0      	nop			; (mov r8, r8)
 8017864:	200015ec 	.word	0x200015ec
 8017868:	1f4add40 	.word	0x1f4add40

0801786c <SX1276Reset>:

void SX1276Reset( void )
{
 801786c:	b580      	push	{r7, lr}
 801786e:	af00      	add	r7, sp, #0
	LOG_INFO_SX1276((">> SX1276Reset\r\n"));

	gpio_configure(ITSDK_SX1276_RESET_BANK,ITSDK_SX1276_RESET_PIN,GPIO_OUTPUT_PP);
 8017870:	2200      	movs	r2, #0
 8017872:	2101      	movs	r1, #1
 8017874:	2002      	movs	r0, #2
 8017876:	f006 f979 	bl	801db6c <gpio_configure>
	gpio_reset(ITSDK_SX1276_RESET_BANK, ITSDK_SX1276_RESET_PIN);
 801787a:	2101      	movs	r1, #1
 801787c:	2002      	movs	r0, #2
 801787e:	f006 fb95 	bl	801dfac <gpio_reset>
	itsdk_delayMs(2);
 8017882:	2002      	movs	r0, #2
 8017884:	f006 fcd6 	bl	801e234 <itsdk_delayMs>
	gpio_configure(ITSDK_SX1276_RESET_BANK,ITSDK_SX1276_RESET_PIN,GPIO_INPUT);
 8017888:	2204      	movs	r2, #4
 801788a:	2101      	movs	r1, #1
 801788c:	2002      	movs	r0, #2
 801788e:	f006 f96d 	bl	801db6c <gpio_configure>
	itsdk_delayMs(10);
 8017892:	200a      	movs	r0, #10
 8017894:	f006 fcce 	bl	801e234 <itsdk_delayMs>
}
 8017898:	46c0      	nop			; (mov r8, r8)
 801789a:	46bd      	mov	sp, r7
 801789c:	bd80      	pop	{r7, pc}
	...

080178a0 <SX1276SetOpMode>:

void SX1276SetOpMode( uint8_t opMode )
{
 80178a0:	b580      	push	{r7, lr}
 80178a2:	b082      	sub	sp, #8
 80178a4:	af00      	add	r7, sp, #0
 80178a6:	0002      	movs	r2, r0
 80178a8:	1dfb      	adds	r3, r7, #7
 80178aa:	701a      	strb	r2, [r3, #0]
		LOG_INFO_SX1276(("Others)\r\n"));
		break;
	}
#endif

    if( opMode == RF_OPMODE_SLEEP )
 80178ac:	1dfb      	adds	r3, r7, #7
 80178ae:	781b      	ldrb	r3, [r3, #0]
 80178b0:	2b00      	cmp	r3, #0
 80178b2:	d11c      	bne.n	80178ee <SX1276SetOpMode+0x4e>
    {
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 80178b4:	2001      	movs	r0, #1
 80178b6:	f000 f8af 	bl	8017a18 <SX1276Read>
 80178ba:	0003      	movs	r3, r0
 80178bc:	b25b      	sxtb	r3, r3
 80178be:	2207      	movs	r2, #7
 80178c0:	4393      	bics	r3, r2
 80178c2:	b25a      	sxtb	r2, r3
 80178c4:	1dfb      	adds	r3, r7, #7
 80178c6:	781b      	ldrb	r3, [r3, #0]
 80178c8:	b25b      	sxtb	r3, r3
 80178ca:	4313      	orrs	r3, r2
 80178cc:	b25b      	sxtb	r3, r3
 80178ce:	b2db      	uxtb	r3, r3
 80178d0:	0019      	movs	r1, r3
 80178d2:	2001      	movs	r0, #1
 80178d4:	f000 f88c 	bl	80179f0 <SX1276Write>
      
      LoRaBoardCallbacks->SX1276BoardSetAntSwLowPower( true );
 80178d8:	4b18      	ldr	r3, [pc, #96]	; (801793c <SX1276SetOpMode+0x9c>)
 80178da:	681b      	ldr	r3, [r3, #0]
 80178dc:	691b      	ldr	r3, [r3, #16]
 80178de:	2001      	movs	r0, #1
 80178e0:	4798      	blx	r3
      
      LoRaBoardCallbacks->SX1276BoardSetXO( RESET ); 
 80178e2:	4b16      	ldr	r3, [pc, #88]	; (801793c <SX1276SetOpMode+0x9c>)
 80178e4:	681b      	ldr	r3, [r3, #0]
 80178e6:	681b      	ldr	r3, [r3, #0]
 80178e8:	2000      	movs	r0, #0
 80178ea:	4798      	blx	r3
      
      LoRaBoardCallbacks->SX1276BoardSetAntSw( opMode );
      
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
    }
}
 80178ec:	e022      	b.n	8017934 <SX1276SetOpMode+0x94>
      LoRaBoardCallbacks->SX1276BoardSetXO( SET ); 
 80178ee:	4b13      	ldr	r3, [pc, #76]	; (801793c <SX1276SetOpMode+0x9c>)
 80178f0:	681b      	ldr	r3, [r3, #0]
 80178f2:	681b      	ldr	r3, [r3, #0]
 80178f4:	2001      	movs	r0, #1
 80178f6:	4798      	blx	r3
      LoRaBoardCallbacks->SX1276BoardSetAntSwLowPower( false );
 80178f8:	4b10      	ldr	r3, [pc, #64]	; (801793c <SX1276SetOpMode+0x9c>)
 80178fa:	681b      	ldr	r3, [r3, #0]
 80178fc:	691b      	ldr	r3, [r3, #16]
 80178fe:	2000      	movs	r0, #0
 8017900:	4798      	blx	r3
      LoRaBoardCallbacks->SX1276BoardSetAntSw( opMode );
 8017902:	4b0e      	ldr	r3, [pc, #56]	; (801793c <SX1276SetOpMode+0x9c>)
 8017904:	681b      	ldr	r3, [r3, #0]
 8017906:	695b      	ldr	r3, [r3, #20]
 8017908:	1dfa      	adds	r2, r7, #7
 801790a:	7812      	ldrb	r2, [r2, #0]
 801790c:	0010      	movs	r0, r2
 801790e:	4798      	blx	r3
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 8017910:	2001      	movs	r0, #1
 8017912:	f000 f881 	bl	8017a18 <SX1276Read>
 8017916:	0003      	movs	r3, r0
 8017918:	b25b      	sxtb	r3, r3
 801791a:	2207      	movs	r2, #7
 801791c:	4393      	bics	r3, r2
 801791e:	b25a      	sxtb	r2, r3
 8017920:	1dfb      	adds	r3, r7, #7
 8017922:	781b      	ldrb	r3, [r3, #0]
 8017924:	b25b      	sxtb	r3, r3
 8017926:	4313      	orrs	r3, r2
 8017928:	b25b      	sxtb	r3, r3
 801792a:	b2db      	uxtb	r3, r3
 801792c:	0019      	movs	r1, r3
 801792e:	2001      	movs	r0, #1
 8017930:	f000 f85e 	bl	80179f0 <SX1276Write>
}
 8017934:	46c0      	nop			; (mov r8, r8)
 8017936:	46bd      	mov	sp, r7
 8017938:	b002      	add	sp, #8
 801793a:	bd80      	pop	{r7, pc}
 801793c:	200011a0 	.word	0x200011a0

08017940 <SX1276SetModem>:

void SX1276SetModem( RadioModems_t modem )
{
 8017940:	b580      	push	{r7, lr}
 8017942:	b082      	sub	sp, #8
 8017944:	af00      	add	r7, sp, #0
 8017946:	0002      	movs	r2, r0
 8017948:	1dfb      	adds	r3, r7, #7
 801794a:	701a      	strb	r2, [r3, #0]
	LOG_INFO_SX1276((">> SX1276SetModem (%s)\r\n",((modem==MODEM_LORA)?"LORA":"FSK")));

    if( ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_ON ) != 0 )
 801794c:	2001      	movs	r0, #1
 801794e:	f000 f863 	bl	8017a18 <SX1276Read>
 8017952:	0003      	movs	r3, r0
 8017954:	b25b      	sxtb	r3, r3
 8017956:	2b00      	cmp	r3, #0
 8017958:	da03      	bge.n	8017962 <SX1276SetModem+0x22>
    {
        SX1276.Settings.Modem = MODEM_LORA;
 801795a:	4b24      	ldr	r3, [pc, #144]	; (80179ec <SX1276SetModem+0xac>)
 801795c:	2201      	movs	r2, #1
 801795e:	715a      	strb	r2, [r3, #5]
 8017960:	e002      	b.n	8017968 <SX1276SetModem+0x28>
    }
    else
    {
        SX1276.Settings.Modem = MODEM_FSK;
 8017962:	4b22      	ldr	r3, [pc, #136]	; (80179ec <SX1276SetModem+0xac>)
 8017964:	2200      	movs	r2, #0
 8017966:	715a      	strb	r2, [r3, #5]
    }

    if( SX1276.Settings.Modem == modem )
 8017968:	4b20      	ldr	r3, [pc, #128]	; (80179ec <SX1276SetModem+0xac>)
 801796a:	795b      	ldrb	r3, [r3, #5]
 801796c:	1dfa      	adds	r2, r7, #7
 801796e:	7812      	ldrb	r2, [r2, #0]
 8017970:	429a      	cmp	r2, r3
 8017972:	d037      	beq.n	80179e4 <SX1276SetModem+0xa4>
    {
        return;
    }

    SX1276.Settings.Modem = modem;
 8017974:	4b1d      	ldr	r3, [pc, #116]	; (80179ec <SX1276SetModem+0xac>)
 8017976:	1dfa      	adds	r2, r7, #7
 8017978:	7812      	ldrb	r2, [r2, #0]
 801797a:	715a      	strb	r2, [r3, #5]
    switch( SX1276.Settings.Modem )
 801797c:	4b1b      	ldr	r3, [pc, #108]	; (80179ec <SX1276SetModem+0xac>)
 801797e:	795b      	ldrb	r3, [r3, #5]
 8017980:	2b01      	cmp	r3, #1
 8017982:	d016      	beq.n	80179b2 <SX1276SetModem+0x72>
    {
    default:
    case MODEM_FSK:
        SX1276SetSleep( );
 8017984:	f7ff fc5e 	bl	8017244 <SX1276SetSleep>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_OFF );
 8017988:	2001      	movs	r0, #1
 801798a:	f000 f845 	bl	8017a18 <SX1276Read>
 801798e:	0003      	movs	r3, r0
 8017990:	001a      	movs	r2, r3
 8017992:	237f      	movs	r3, #127	; 0x7f
 8017994:	4013      	ands	r3, r2
 8017996:	b2db      	uxtb	r3, r3
 8017998:	0019      	movs	r1, r3
 801799a:	2001      	movs	r0, #1
 801799c:	f000 f828 	bl	80179f0 <SX1276Write>

        SX1276Write( REG_DIOMAPPING1, 0x00 );
 80179a0:	2100      	movs	r1, #0
 80179a2:	2040      	movs	r0, #64	; 0x40
 80179a4:	f000 f824 	bl	80179f0 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x30 ); // DIO5=ModeReady
 80179a8:	2130      	movs	r1, #48	; 0x30
 80179aa:	2041      	movs	r0, #65	; 0x41
 80179ac:	f000 f820 	bl	80179f0 <SX1276Write>
        break;
 80179b0:	e019      	b.n	80179e6 <SX1276SetModem+0xa6>
    case MODEM_LORA:
        SX1276SetSleep( );
 80179b2:	f7ff fc47 	bl	8017244 <SX1276SetSleep>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_ON );
 80179b6:	2001      	movs	r0, #1
 80179b8:	f000 f82e 	bl	8017a18 <SX1276Read>
 80179bc:	0003      	movs	r3, r0
 80179be:	001a      	movs	r2, r3
 80179c0:	2380      	movs	r3, #128	; 0x80
 80179c2:	425b      	negs	r3, r3
 80179c4:	4313      	orrs	r3, r2
 80179c6:	b2db      	uxtb	r3, r3
 80179c8:	0019      	movs	r1, r3
 80179ca:	2001      	movs	r0, #1
 80179cc:	f000 f810 	bl	80179f0 <SX1276Write>

        SX1276Write( REG_DIOMAPPING1, 0x00 );
 80179d0:	2100      	movs	r1, #0
 80179d2:	2040      	movs	r0, #64	; 0x40
 80179d4:	f000 f80c 	bl	80179f0 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x00 );
 80179d8:	2100      	movs	r1, #0
 80179da:	2041      	movs	r0, #65	; 0x41
 80179dc:	f000 f808 	bl	80179f0 <SX1276Write>
        break;
 80179e0:	46c0      	nop			; (mov r8, r8)
 80179e2:	e000      	b.n	80179e6 <SX1276SetModem+0xa6>
        return;
 80179e4:	46c0      	nop			; (mov r8, r8)
    }
}
 80179e6:	46bd      	mov	sp, r7
 80179e8:	b002      	add	sp, #8
 80179ea:	bd80      	pop	{r7, pc}
 80179ec:	200015ec 	.word	0x200015ec

080179f0 <SX1276Write>:

void SX1276Write( uint16_t addr, uint8_t data )
{
 80179f0:	b580      	push	{r7, lr}
 80179f2:	b082      	sub	sp, #8
 80179f4:	af00      	add	r7, sp, #0
 80179f6:	0002      	movs	r2, r0
 80179f8:	1dbb      	adds	r3, r7, #6
 80179fa:	801a      	strh	r2, [r3, #0]
 80179fc:	1d7b      	adds	r3, r7, #5
 80179fe:	1c0a      	adds	r2, r1, #0
 8017a00:	701a      	strb	r2, [r3, #0]
	//LOG_INFO_SX1276((">> SX1276Write\r\n"));

    SX1276WriteBuffer( addr, &data, 1 );
 8017a02:	1d79      	adds	r1, r7, #5
 8017a04:	1dbb      	adds	r3, r7, #6
 8017a06:	881b      	ldrh	r3, [r3, #0]
 8017a08:	2201      	movs	r2, #1
 8017a0a:	0018      	movs	r0, r3
 8017a0c:	f000 f818 	bl	8017a40 <SX1276WriteBuffer>
}
 8017a10:	46c0      	nop			; (mov r8, r8)
 8017a12:	46bd      	mov	sp, r7
 8017a14:	b002      	add	sp, #8
 8017a16:	bd80      	pop	{r7, pc}

08017a18 <SX1276Read>:

uint8_t SX1276Read( uint16_t addr )
{
 8017a18:	b590      	push	{r4, r7, lr}
 8017a1a:	b085      	sub	sp, #20
 8017a1c:	af00      	add	r7, sp, #0
 8017a1e:	0002      	movs	r2, r0
 8017a20:	1dbb      	adds	r3, r7, #6
 8017a22:	801a      	strh	r2, [r3, #0]
	//LOG_INFO_SX1276((">> SX1276Read\r\n"));

    uint8_t data;
    SX1276ReadBuffer( addr, &data, 1 );
 8017a24:	240f      	movs	r4, #15
 8017a26:	1939      	adds	r1, r7, r4
 8017a28:	1dbb      	adds	r3, r7, #6
 8017a2a:	881b      	ldrh	r3, [r3, #0]
 8017a2c:	2201      	movs	r2, #1
 8017a2e:	0018      	movs	r0, r3
 8017a30:	f000 f854 	bl	8017adc <SX1276ReadBuffer>
    return data;
 8017a34:	193b      	adds	r3, r7, r4
 8017a36:	781b      	ldrb	r3, [r3, #0]
}
 8017a38:	0018      	movs	r0, r3
 8017a3a:	46bd      	mov	sp, r7
 8017a3c:	b005      	add	sp, #20
 8017a3e:	bd90      	pop	{r4, r7, pc}

08017a40 <SX1276WriteBuffer>:

void SX1276WriteBuffer( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8017a40:	b590      	push	{r4, r7, lr}
 8017a42:	b085      	sub	sp, #20
 8017a44:	af00      	add	r7, sp, #0
 8017a46:	6039      	str	r1, [r7, #0]
 8017a48:	0011      	movs	r1, r2
 8017a4a:	1dbb      	adds	r3, r7, #6
 8017a4c:	1c02      	adds	r2, r0, #0
 8017a4e:	801a      	strh	r2, [r3, #0]
 8017a50:	1d7b      	adds	r3, r7, #5
 8017a52:	1c0a      	adds	r2, r1, #0
 8017a54:	701a      	strb	r2, [r3, #0]
	//LOG_INFO_SX1276((">> SX1276WriteBuffer\r\n"));

    uint8_t i;

    //NSS = 0;
	gpio_reset(ITSDK_SX1276_NSS_BANK, ITSDK_SX1276_NSS_PIN);
 8017a56:	2380      	movs	r3, #128	; 0x80
 8017a58:	021b      	lsls	r3, r3, #8
 8017a5a:	0019      	movs	r1, r3
 8017a5c:	2000      	movs	r0, #0
 8017a5e:	f006 faa5 	bl	801dfac <gpio_reset>

	uint16_t tx = addr | 0x80;
 8017a62:	1dbb      	adds	r3, r7, #6
 8017a64:	881b      	ldrh	r3, [r3, #0]
 8017a66:	2280      	movs	r2, #128	; 0x80
 8017a68:	4313      	orrs	r3, r2
 8017a6a:	b29a      	uxth	r2, r3
 8017a6c:	210c      	movs	r1, #12
 8017a6e:	187b      	adds	r3, r7, r1
 8017a70:	801a      	strh	r2, [r3, #0]
	uint16_t rx;
	spi_rwRegister(&ITSDK_SX1276_SPI,(uint8_t*)&tx,(uint8_t*)&rx,1);
 8017a72:	230a      	movs	r3, #10
 8017a74:	18fa      	adds	r2, r7, r3
 8017a76:	1879      	adds	r1, r7, r1
 8017a78:	4817      	ldr	r0, [pc, #92]	; (8017ad8 <SX1276WriteBuffer+0x98>)
 8017a7a:	2301      	movs	r3, #1
 8017a7c:	f007 faf4 	bl	801f068 <spi_rwRegister>
    for( i = 0; i < size; i++ )
 8017a80:	230f      	movs	r3, #15
 8017a82:	18fb      	adds	r3, r7, r3
 8017a84:	2200      	movs	r2, #0
 8017a86:	701a      	strb	r2, [r3, #0]
 8017a88:	e015      	b.n	8017ab6 <SX1276WriteBuffer+0x76>
    {
    	tx = buffer[i];
 8017a8a:	240f      	movs	r4, #15
 8017a8c:	193b      	adds	r3, r7, r4
 8017a8e:	781b      	ldrb	r3, [r3, #0]
 8017a90:	683a      	ldr	r2, [r7, #0]
 8017a92:	18d3      	adds	r3, r2, r3
 8017a94:	781b      	ldrb	r3, [r3, #0]
 8017a96:	b29a      	uxth	r2, r3
 8017a98:	210c      	movs	r1, #12
 8017a9a:	187b      	adds	r3, r7, r1
 8017a9c:	801a      	strh	r2, [r3, #0]
    	spi_rwRegister(&ITSDK_SX1276_SPI,(uint8_t*)&tx,(uint8_t*)&rx,1);
 8017a9e:	230a      	movs	r3, #10
 8017aa0:	18fa      	adds	r2, r7, r3
 8017aa2:	1879      	adds	r1, r7, r1
 8017aa4:	480c      	ldr	r0, [pc, #48]	; (8017ad8 <SX1276WriteBuffer+0x98>)
 8017aa6:	2301      	movs	r3, #1
 8017aa8:	f007 fade 	bl	801f068 <spi_rwRegister>
    for( i = 0; i < size; i++ )
 8017aac:	193b      	adds	r3, r7, r4
 8017aae:	781a      	ldrb	r2, [r3, #0]
 8017ab0:	193b      	adds	r3, r7, r4
 8017ab2:	3201      	adds	r2, #1
 8017ab4:	701a      	strb	r2, [r3, #0]
 8017ab6:	230f      	movs	r3, #15
 8017ab8:	18fa      	adds	r2, r7, r3
 8017aba:	1d7b      	adds	r3, r7, #5
 8017abc:	7812      	ldrb	r2, [r2, #0]
 8017abe:	781b      	ldrb	r3, [r3, #0]
 8017ac0:	429a      	cmp	r2, r3
 8017ac2:	d3e2      	bcc.n	8017a8a <SX1276WriteBuffer+0x4a>
    }

    //NSS = 1;
	gpio_set(ITSDK_SX1276_NSS_BANK, ITSDK_SX1276_NSS_PIN);
 8017ac4:	2380      	movs	r3, #128	; 0x80
 8017ac6:	021b      	lsls	r3, r3, #8
 8017ac8:	0019      	movs	r1, r3
 8017aca:	2000      	movs	r0, #0
 8017acc:	f006 fa56 	bl	801df7c <gpio_set>
}
 8017ad0:	46c0      	nop			; (mov r8, r8)
 8017ad2:	46bd      	mov	sp, r7
 8017ad4:	b005      	add	sp, #20
 8017ad6:	bd90      	pop	{r4, r7, pc}
 8017ad8:	20001450 	.word	0x20001450

08017adc <SX1276ReadBuffer>:

void SX1276ReadBuffer( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8017adc:	b590      	push	{r4, r7, lr}
 8017ade:	b085      	sub	sp, #20
 8017ae0:	af00      	add	r7, sp, #0
 8017ae2:	6039      	str	r1, [r7, #0]
 8017ae4:	0011      	movs	r1, r2
 8017ae6:	1dbb      	adds	r3, r7, #6
 8017ae8:	1c02      	adds	r2, r0, #0
 8017aea:	801a      	strh	r2, [r3, #0]
 8017aec:	1d7b      	adds	r3, r7, #5
 8017aee:	1c0a      	adds	r2, r1, #0
 8017af0:	701a      	strb	r2, [r3, #0]
	//LOG_INFO_SX1276((">> SX1276ReadBuffer\r\n"));

    uint8_t i;

    //NSS = 0;
	gpio_reset(ITSDK_SX1276_NSS_BANK, ITSDK_SX1276_NSS_PIN);
 8017af2:	2380      	movs	r3, #128	; 0x80
 8017af4:	021b      	lsls	r3, r3, #8
 8017af6:	0019      	movs	r1, r3
 8017af8:	2000      	movs	r0, #0
 8017afa:	f006 fa57 	bl	801dfac <gpio_reset>

	uint16_t tx = addr & 0x7f;
 8017afe:	1dbb      	adds	r3, r7, #6
 8017b00:	881b      	ldrh	r3, [r3, #0]
 8017b02:	227f      	movs	r2, #127	; 0x7f
 8017b04:	4013      	ands	r3, r2
 8017b06:	b29a      	uxth	r2, r3
 8017b08:	210c      	movs	r1, #12
 8017b0a:	187b      	adds	r3, r7, r1
 8017b0c:	801a      	strh	r2, [r3, #0]
	uint16_t rx;
	spi_rwRegister(&ITSDK_SX1276_SPI,(uint8_t*)&tx,(uint8_t*)&rx,1);
 8017b0e:	230a      	movs	r3, #10
 8017b10:	18fa      	adds	r2, r7, r3
 8017b12:	000c      	movs	r4, r1
 8017b14:	1879      	adds	r1, r7, r1
 8017b16:	481a      	ldr	r0, [pc, #104]	; (8017b80 <SX1276ReadBuffer+0xa4>)
 8017b18:	2301      	movs	r3, #1
 8017b1a:	f007 faa5 	bl	801f068 <spi_rwRegister>

	tx = 0;
 8017b1e:	0021      	movs	r1, r4
 8017b20:	187b      	adds	r3, r7, r1
 8017b22:	2200      	movs	r2, #0
 8017b24:	801a      	strh	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 8017b26:	230f      	movs	r3, #15
 8017b28:	18fb      	adds	r3, r7, r3
 8017b2a:	2200      	movs	r2, #0
 8017b2c:	701a      	strb	r2, [r3, #0]
 8017b2e:	e015      	b.n	8017b5c <SX1276ReadBuffer+0x80>
    {
    	spi_rwRegister(&ITSDK_SX1276_SPI,(uint8_t*)&tx,(uint8_t*)&rx,1);
 8017b30:	240a      	movs	r4, #10
 8017b32:	193a      	adds	r2, r7, r4
 8017b34:	230c      	movs	r3, #12
 8017b36:	18f9      	adds	r1, r7, r3
 8017b38:	4811      	ldr	r0, [pc, #68]	; (8017b80 <SX1276ReadBuffer+0xa4>)
 8017b3a:	2301      	movs	r3, #1
 8017b3c:	f007 fa94 	bl	801f068 <spi_rwRegister>
    	buffer[i] = rx;
 8017b40:	193b      	adds	r3, r7, r4
 8017b42:	8819      	ldrh	r1, [r3, #0]
 8017b44:	200f      	movs	r0, #15
 8017b46:	183b      	adds	r3, r7, r0
 8017b48:	781b      	ldrb	r3, [r3, #0]
 8017b4a:	683a      	ldr	r2, [r7, #0]
 8017b4c:	18d3      	adds	r3, r2, r3
 8017b4e:	b2ca      	uxtb	r2, r1
 8017b50:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 8017b52:	183b      	adds	r3, r7, r0
 8017b54:	781a      	ldrb	r2, [r3, #0]
 8017b56:	183b      	adds	r3, r7, r0
 8017b58:	3201      	adds	r2, #1
 8017b5a:	701a      	strb	r2, [r3, #0]
 8017b5c:	230f      	movs	r3, #15
 8017b5e:	18fa      	adds	r2, r7, r3
 8017b60:	1d7b      	adds	r3, r7, #5
 8017b62:	7812      	ldrb	r2, [r2, #0]
 8017b64:	781b      	ldrb	r3, [r3, #0]
 8017b66:	429a      	cmp	r2, r3
 8017b68:	d3e2      	bcc.n	8017b30 <SX1276ReadBuffer+0x54>
    }

    //NSS = 1;
	gpio_set(ITSDK_SX1276_NSS_BANK, ITSDK_SX1276_NSS_PIN);
 8017b6a:	2380      	movs	r3, #128	; 0x80
 8017b6c:	021b      	lsls	r3, r3, #8
 8017b6e:	0019      	movs	r1, r3
 8017b70:	2000      	movs	r0, #0
 8017b72:	f006 fa03 	bl	801df7c <gpio_set>
}
 8017b76:	46c0      	nop			; (mov r8, r8)
 8017b78:	46bd      	mov	sp, r7
 8017b7a:	b005      	add	sp, #20
 8017b7c:	bd90      	pop	{r4, r7, pc}
 8017b7e:	46c0      	nop			; (mov r8, r8)
 8017b80:	20001450 	.word	0x20001450

08017b84 <SX1276WriteFifo>:

void SX1276WriteFifo( uint8_t *buffer, uint8_t size )
{
 8017b84:	b580      	push	{r7, lr}
 8017b86:	b082      	sub	sp, #8
 8017b88:	af00      	add	r7, sp, #0
 8017b8a:	6078      	str	r0, [r7, #4]
 8017b8c:	000a      	movs	r2, r1
 8017b8e:	1cfb      	adds	r3, r7, #3
 8017b90:	701a      	strb	r2, [r3, #0]
	//LOG_INFO_SX1276((">> SX1276WriteFifo\r\n"));
    SX1276WriteBuffer( 0, buffer, size );
 8017b92:	1cfb      	adds	r3, r7, #3
 8017b94:	781a      	ldrb	r2, [r3, #0]
 8017b96:	687b      	ldr	r3, [r7, #4]
 8017b98:	0019      	movs	r1, r3
 8017b9a:	2000      	movs	r0, #0
 8017b9c:	f7ff ff50 	bl	8017a40 <SX1276WriteBuffer>
}
 8017ba0:	46c0      	nop			; (mov r8, r8)
 8017ba2:	46bd      	mov	sp, r7
 8017ba4:	b002      	add	sp, #8
 8017ba6:	bd80      	pop	{r7, pc}

08017ba8 <SX1276ReadFifo>:

void SX1276ReadFifo( uint8_t *buffer, uint8_t size )
{
 8017ba8:	b580      	push	{r7, lr}
 8017baa:	b082      	sub	sp, #8
 8017bac:	af00      	add	r7, sp, #0
 8017bae:	6078      	str	r0, [r7, #4]
 8017bb0:	000a      	movs	r2, r1
 8017bb2:	1cfb      	adds	r3, r7, #3
 8017bb4:	701a      	strb	r2, [r3, #0]
	//LOG_INFO_SX1276((">> SX1276ReadFifo\r\n"));
    SX1276ReadBuffer( 0, buffer, size );
 8017bb6:	1cfb      	adds	r3, r7, #3
 8017bb8:	781a      	ldrb	r2, [r3, #0]
 8017bba:	687b      	ldr	r3, [r7, #4]
 8017bbc:	0019      	movs	r1, r3
 8017bbe:	2000      	movs	r0, #0
 8017bc0:	f7ff ff8c 	bl	8017adc <SX1276ReadBuffer>
}
 8017bc4:	46c0      	nop			; (mov r8, r8)
 8017bc6:	46bd      	mov	sp, r7
 8017bc8:	b002      	add	sp, #8
 8017bca:	bd80      	pop	{r7, pc}

08017bcc <SX1276SetMaxPayloadLength>:

void SX1276SetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 8017bcc:	b580      	push	{r7, lr}
 8017bce:	b082      	sub	sp, #8
 8017bd0:	af00      	add	r7, sp, #0
 8017bd2:	0002      	movs	r2, r0
 8017bd4:	1dfb      	adds	r3, r7, #7
 8017bd6:	701a      	strb	r2, [r3, #0]
 8017bd8:	1dbb      	adds	r3, r7, #6
 8017bda:	1c0a      	adds	r2, r1, #0
 8017bdc:	701a      	strb	r2, [r3, #0]
	LOG_INFO_SX1276((">> SX1276SetMaxPayloadLength\r\n"));
    SX1276SetModem( modem );
 8017bde:	1dfb      	adds	r3, r7, #7
 8017be0:	781b      	ldrb	r3, [r3, #0]
 8017be2:	0018      	movs	r0, r3
 8017be4:	f7ff feac 	bl	8017940 <SX1276SetModem>

    switch( modem )
 8017be8:	1dfb      	adds	r3, r7, #7
 8017bea:	781b      	ldrb	r3, [r3, #0]
 8017bec:	2b00      	cmp	r3, #0
 8017bee:	d002      	beq.n	8017bf6 <SX1276SetMaxPayloadLength+0x2a>
 8017bf0:	2b01      	cmp	r3, #1
 8017bf2:	d00f      	beq.n	8017c14 <SX1276SetMaxPayloadLength+0x48>
        break;
    case MODEM_LORA:
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
        break;
    }
}
 8017bf4:	e016      	b.n	8017c24 <SX1276SetMaxPayloadLength+0x58>
        if( SX1276.Settings.Fsk.FixLen == false )
 8017bf6:	4b0d      	ldr	r3, [pc, #52]	; (8017c2c <SX1276SetMaxPayloadLength+0x60>)
 8017bf8:	2222      	movs	r2, #34	; 0x22
 8017bfa:	5c9b      	ldrb	r3, [r3, r2]
 8017bfc:	2201      	movs	r2, #1
 8017bfe:	4053      	eors	r3, r2
 8017c00:	b2db      	uxtb	r3, r3
 8017c02:	2b00      	cmp	r3, #0
 8017c04:	d00d      	beq.n	8017c22 <SX1276SetMaxPayloadLength+0x56>
            SX1276Write( REG_PAYLOADLENGTH, max );
 8017c06:	1dbb      	adds	r3, r7, #6
 8017c08:	781b      	ldrb	r3, [r3, #0]
 8017c0a:	0019      	movs	r1, r3
 8017c0c:	2032      	movs	r0, #50	; 0x32
 8017c0e:	f7ff feef 	bl	80179f0 <SX1276Write>
        break;
 8017c12:	e006      	b.n	8017c22 <SX1276SetMaxPayloadLength+0x56>
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
 8017c14:	1dbb      	adds	r3, r7, #6
 8017c16:	781b      	ldrb	r3, [r3, #0]
 8017c18:	0019      	movs	r1, r3
 8017c1a:	2023      	movs	r0, #35	; 0x23
 8017c1c:	f7ff fee8 	bl	80179f0 <SX1276Write>
        break;
 8017c20:	e000      	b.n	8017c24 <SX1276SetMaxPayloadLength+0x58>
        break;
 8017c22:	46c0      	nop			; (mov r8, r8)
}
 8017c24:	46c0      	nop			; (mov r8, r8)
 8017c26:	46bd      	mov	sp, r7
 8017c28:	b002      	add	sp, #8
 8017c2a:	bd80      	pop	{r7, pc}
 8017c2c:	200015ec 	.word	0x200015ec

08017c30 <SX1276SetPublicNetwork>:

void SX1276SetPublicNetwork( bool enable )
{
 8017c30:	b580      	push	{r7, lr}
 8017c32:	b082      	sub	sp, #8
 8017c34:	af00      	add	r7, sp, #0
 8017c36:	0002      	movs	r2, r0
 8017c38:	1dfb      	adds	r3, r7, #7
 8017c3a:	701a      	strb	r2, [r3, #0]
	LOG_INFO_SX1276((">> SX1276SetPublicNetwork\r\n"));

    SX1276SetModem( MODEM_LORA );
 8017c3c:	2001      	movs	r0, #1
 8017c3e:	f7ff fe7f 	bl	8017940 <SX1276SetModem>
    SX1276.Settings.LoRa.PublicNetwork = enable;
 8017c42:	4b0b      	ldr	r3, [pc, #44]	; (8017c70 <SX1276SetPublicNetwork+0x40>)
 8017c44:	1dfa      	adds	r2, r7, #7
 8017c46:	215c      	movs	r1, #92	; 0x5c
 8017c48:	7812      	ldrb	r2, [r2, #0]
 8017c4a:	545a      	strb	r2, [r3, r1]
    if( enable == true )
 8017c4c:	1dfb      	adds	r3, r7, #7
 8017c4e:	781b      	ldrb	r3, [r3, #0]
 8017c50:	2b00      	cmp	r3, #0
 8017c52:	d004      	beq.n	8017c5e <SX1276SetPublicNetwork+0x2e>
    {
        // Change LoRa modem SyncWord
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PUBLIC_SYNCWORD );
 8017c54:	2134      	movs	r1, #52	; 0x34
 8017c56:	2039      	movs	r0, #57	; 0x39
 8017c58:	f7ff feca 	bl	80179f0 <SX1276Write>
    else
    {
        // Change LoRa modem SyncWord
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
    }
}
 8017c5c:	e003      	b.n	8017c66 <SX1276SetPublicNetwork+0x36>
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
 8017c5e:	2112      	movs	r1, #18
 8017c60:	2039      	movs	r0, #57	; 0x39
 8017c62:	f7ff fec5 	bl	80179f0 <SX1276Write>
}
 8017c66:	46c0      	nop			; (mov r8, r8)
 8017c68:	46bd      	mov	sp, r7
 8017c6a:	b002      	add	sp, #8
 8017c6c:	bd80      	pop	{r7, pc}
 8017c6e:	46c0      	nop			; (mov r8, r8)
 8017c70:	200015ec 	.word	0x200015ec

08017c74 <SX1276GetWakeupTime>:

uint32_t SX1276GetWakeupTime( void )
{
 8017c74:	b580      	push	{r7, lr}
 8017c76:	af00      	add	r7, sp, #0
	LOG_INFO_SX1276((">> SX1276GetWakeupTime\r\n"));

    return ( uint32_t )LoRaBoardCallbacks->SX1276BoardGetWakeTime( ) + ITSDK_MURATA_WAKEUP_TIME;
 8017c78:	4b04      	ldr	r3, [pc, #16]	; (8017c8c <SX1276GetWakeupTime+0x18>)
 8017c7a:	681b      	ldr	r3, [r3, #0]
 8017c7c:	685b      	ldr	r3, [r3, #4]
 8017c7e:	4798      	blx	r3
 8017c80:	0003      	movs	r3, r0
 8017c82:	3335      	adds	r3, #53	; 0x35
}
 8017c84:	0018      	movs	r0, r3
 8017c86:	46bd      	mov	sp, r7
 8017c88:	bd80      	pop	{r7, pc}
 8017c8a:	46c0      	nop			; (mov r8, r8)
 8017c8c:	200011a0 	.word	0x200011a0

08017c90 <SX1276OnTimeoutIrq>:

void SX1276OnTimeoutIrq( void* context )
{
 8017c90:	b590      	push	{r4, r7, lr}
 8017c92:	b085      	sub	sp, #20
 8017c94:	af00      	add	r7, sp, #0
 8017c96:	6078      	str	r0, [r7, #4]
	LOG_INFO_SX1276((">> SX1276OnTimeoutIrq\r\n"));

    switch( SX1276.Settings.State )
 8017c98:	4b51      	ldr	r3, [pc, #324]	; (8017de0 <SX1276OnTimeoutIrq+0x150>)
 8017c9a:	791b      	ldrb	r3, [r3, #4]
 8017c9c:	2b01      	cmp	r3, #1
 8017c9e:	d002      	beq.n	8017ca6 <SX1276OnTimeoutIrq+0x16>
 8017ca0:	2b02      	cmp	r3, #2
 8017ca2:	d045      	beq.n	8017d30 <SX1276OnTimeoutIrq+0xa0>
        {
            RadioEvents->TxTimeout( );
        }
        break;
    default:
        break;
 8017ca4:	e098      	b.n	8017dd8 <SX1276OnTimeoutIrq+0x148>
        if( SX1276.Settings.Modem == MODEM_FSK )
 8017ca6:	4b4e      	ldr	r3, [pc, #312]	; (8017de0 <SX1276OnTimeoutIrq+0x150>)
 8017ca8:	795b      	ldrb	r3, [r3, #5]
 8017caa:	2b00      	cmp	r3, #0
 8017cac:	d132      	bne.n	8017d14 <SX1276OnTimeoutIrq+0x84>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 8017cae:	4b4c      	ldr	r3, [pc, #304]	; (8017de0 <SX1276OnTimeoutIrq+0x150>)
 8017cb0:	2230      	movs	r2, #48	; 0x30
 8017cb2:	2100      	movs	r1, #0
 8017cb4:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 8017cb6:	4b4a      	ldr	r3, [pc, #296]	; (8017de0 <SX1276OnTimeoutIrq+0x150>)
 8017cb8:	2231      	movs	r2, #49	; 0x31
 8017cba:	2100      	movs	r1, #0
 8017cbc:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8017cbe:	4b48      	ldr	r3, [pc, #288]	; (8017de0 <SX1276OnTimeoutIrq+0x150>)
 8017cc0:	2200      	movs	r2, #0
 8017cc2:	879a      	strh	r2, [r3, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = 0;
 8017cc4:	4b46      	ldr	r3, [pc, #280]	; (8017de0 <SX1276OnTimeoutIrq+0x150>)
 8017cc6:	2200      	movs	r2, #0
 8017cc8:	875a      	strh	r2, [r3, #58]	; 0x3a
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 8017cca:	210b      	movs	r1, #11
 8017ccc:	203e      	movs	r0, #62	; 0x3e
 8017cce:	f7ff fe8f 	bl	80179f0 <SX1276Write>
            SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 8017cd2:	2110      	movs	r1, #16
 8017cd4:	203f      	movs	r0, #63	; 0x3f
 8017cd6:	f7ff fe8b 	bl	80179f0 <SX1276Write>
            if( SX1276.Settings.Fsk.RxContinuous == true )
 8017cda:	4b41      	ldr	r3, [pc, #260]	; (8017de0 <SX1276OnTimeoutIrq+0x150>)
 8017cdc:	2226      	movs	r2, #38	; 0x26
 8017cde:	5c9b      	ldrb	r3, [r3, r2]
 8017ce0:	2b00      	cmp	r3, #0
 8017ce2:	d010      	beq.n	8017d06 <SX1276OnTimeoutIrq+0x76>
                SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 8017ce4:	200d      	movs	r0, #13
 8017ce6:	f7ff fe97 	bl	8017a18 <SX1276Read>
 8017cea:	0003      	movs	r3, r0
 8017cec:	001a      	movs	r2, r3
 8017cee:	2340      	movs	r3, #64	; 0x40
 8017cf0:	4313      	orrs	r3, r2
 8017cf2:	b2db      	uxtb	r3, r3
 8017cf4:	0019      	movs	r1, r3
 8017cf6:	200d      	movs	r0, #13
 8017cf8:	f7ff fe7a 	bl	80179f0 <SX1276Write>
                TimerStart( &RxTimeoutSyncWord );
 8017cfc:	4b39      	ldr	r3, [pc, #228]	; (8017de4 <SX1276OnTimeoutIrq+0x154>)
 8017cfe:	0018      	movs	r0, r3
 8017d00:	f7fd fd90 	bl	8015824 <TimerStart>
 8017d04:	e006      	b.n	8017d14 <SX1276OnTimeoutIrq+0x84>
                SX1276.Settings.State = RF_IDLE;
 8017d06:	4b36      	ldr	r3, [pc, #216]	; (8017de0 <SX1276OnTimeoutIrq+0x150>)
 8017d08:	2200      	movs	r2, #0
 8017d0a:	711a      	strb	r2, [r3, #4]
                TimerStop( &RxTimeoutSyncWord );
 8017d0c:	4b35      	ldr	r3, [pc, #212]	; (8017de4 <SX1276OnTimeoutIrq+0x154>)
 8017d0e:	0018      	movs	r0, r3
 8017d10:	f7fd fdde 	bl	80158d0 <TimerStop>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8017d14:	4b34      	ldr	r3, [pc, #208]	; (8017de8 <SX1276OnTimeoutIrq+0x158>)
 8017d16:	681b      	ldr	r3, [r3, #0]
 8017d18:	2b00      	cmp	r3, #0
 8017d1a:	d05a      	beq.n	8017dd2 <SX1276OnTimeoutIrq+0x142>
 8017d1c:	4b32      	ldr	r3, [pc, #200]	; (8017de8 <SX1276OnTimeoutIrq+0x158>)
 8017d1e:	681b      	ldr	r3, [r3, #0]
 8017d20:	68db      	ldr	r3, [r3, #12]
 8017d22:	2b00      	cmp	r3, #0
 8017d24:	d055      	beq.n	8017dd2 <SX1276OnTimeoutIrq+0x142>
            RadioEvents->RxTimeout( );
 8017d26:	4b30      	ldr	r3, [pc, #192]	; (8017de8 <SX1276OnTimeoutIrq+0x158>)
 8017d28:	681b      	ldr	r3, [r3, #0]
 8017d2a:	68db      	ldr	r3, [r3, #12]
 8017d2c:	4798      	blx	r3
        break;
 8017d2e:	e050      	b.n	8017dd2 <SX1276OnTimeoutIrq+0x142>
        SX1276Reset( );
 8017d30:	f7ff fd9c 	bl	801786c <SX1276Reset>
        RxChainCalibration( );
 8017d34:	f7fe fae4 	bl	8016300 <RxChainCalibration>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 8017d38:	2000      	movs	r0, #0
 8017d3a:	f7ff fdb1 	bl	80178a0 <SX1276SetOpMode>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8017d3e:	230f      	movs	r3, #15
 8017d40:	18fb      	adds	r3, r7, r3
 8017d42:	2200      	movs	r2, #0
 8017d44:	701a      	strb	r2, [r3, #0]
 8017d46:	e025      	b.n	8017d94 <SX1276OnTimeoutIrq+0x104>
            SX1276SetModem( RadioRegsInit[i].Modem );
 8017d48:	240f      	movs	r4, #15
 8017d4a:	193b      	adds	r3, r7, r4
 8017d4c:	781a      	ldrb	r2, [r3, #0]
 8017d4e:	4927      	ldr	r1, [pc, #156]	; (8017dec <SX1276OnTimeoutIrq+0x15c>)
 8017d50:	0013      	movs	r3, r2
 8017d52:	005b      	lsls	r3, r3, #1
 8017d54:	189b      	adds	r3, r3, r2
 8017d56:	5c5b      	ldrb	r3, [r3, r1]
 8017d58:	0018      	movs	r0, r3
 8017d5a:	f7ff fdf1 	bl	8017940 <SX1276SetModem>
            SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 8017d5e:	193b      	adds	r3, r7, r4
 8017d60:	781a      	ldrb	r2, [r3, #0]
 8017d62:	4922      	ldr	r1, [pc, #136]	; (8017dec <SX1276OnTimeoutIrq+0x15c>)
 8017d64:	0013      	movs	r3, r2
 8017d66:	005b      	lsls	r3, r3, #1
 8017d68:	189b      	adds	r3, r3, r2
 8017d6a:	18cb      	adds	r3, r1, r3
 8017d6c:	3301      	adds	r3, #1
 8017d6e:	781b      	ldrb	r3, [r3, #0]
 8017d70:	b298      	uxth	r0, r3
 8017d72:	193b      	adds	r3, r7, r4
 8017d74:	781a      	ldrb	r2, [r3, #0]
 8017d76:	491d      	ldr	r1, [pc, #116]	; (8017dec <SX1276OnTimeoutIrq+0x15c>)
 8017d78:	0013      	movs	r3, r2
 8017d7a:	005b      	lsls	r3, r3, #1
 8017d7c:	189b      	adds	r3, r3, r2
 8017d7e:	18cb      	adds	r3, r1, r3
 8017d80:	3302      	adds	r3, #2
 8017d82:	781b      	ldrb	r3, [r3, #0]
 8017d84:	0019      	movs	r1, r3
 8017d86:	f7ff fe33 	bl	80179f0 <SX1276Write>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8017d8a:	193b      	adds	r3, r7, r4
 8017d8c:	781a      	ldrb	r2, [r3, #0]
 8017d8e:	193b      	adds	r3, r7, r4
 8017d90:	3201      	adds	r2, #1
 8017d92:	701a      	strb	r2, [r3, #0]
 8017d94:	230f      	movs	r3, #15
 8017d96:	18fb      	adds	r3, r7, r3
 8017d98:	781b      	ldrb	r3, [r3, #0]
 8017d9a:	2b0f      	cmp	r3, #15
 8017d9c:	d9d4      	bls.n	8017d48 <SX1276OnTimeoutIrq+0xb8>
        SX1276SetModem( MODEM_FSK );
 8017d9e:	2000      	movs	r0, #0
 8017da0:	f7ff fdce 	bl	8017940 <SX1276SetModem>
        SX1276SetPublicNetwork( SX1276.Settings.LoRa.PublicNetwork );
 8017da4:	4b0e      	ldr	r3, [pc, #56]	; (8017de0 <SX1276OnTimeoutIrq+0x150>)
 8017da6:	225c      	movs	r2, #92	; 0x5c
 8017da8:	5c9b      	ldrb	r3, [r3, r2]
 8017daa:	0018      	movs	r0, r3
 8017dac:	f7ff ff40 	bl	8017c30 <SX1276SetPublicNetwork>
        SX1276.Settings.State = RF_IDLE;
 8017db0:	4b0b      	ldr	r3, [pc, #44]	; (8017de0 <SX1276OnTimeoutIrq+0x150>)
 8017db2:	2200      	movs	r2, #0
 8017db4:	711a      	strb	r2, [r3, #4]
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8017db6:	4b0c      	ldr	r3, [pc, #48]	; (8017de8 <SX1276OnTimeoutIrq+0x158>)
 8017db8:	681b      	ldr	r3, [r3, #0]
 8017dba:	2b00      	cmp	r3, #0
 8017dbc:	d00b      	beq.n	8017dd6 <SX1276OnTimeoutIrq+0x146>
 8017dbe:	4b0a      	ldr	r3, [pc, #40]	; (8017de8 <SX1276OnTimeoutIrq+0x158>)
 8017dc0:	681b      	ldr	r3, [r3, #0]
 8017dc2:	685b      	ldr	r3, [r3, #4]
 8017dc4:	2b00      	cmp	r3, #0
 8017dc6:	d006      	beq.n	8017dd6 <SX1276OnTimeoutIrq+0x146>
            RadioEvents->TxTimeout( );
 8017dc8:	4b07      	ldr	r3, [pc, #28]	; (8017de8 <SX1276OnTimeoutIrq+0x158>)
 8017dca:	681b      	ldr	r3, [r3, #0]
 8017dcc:	685b      	ldr	r3, [r3, #4]
 8017dce:	4798      	blx	r3
        break;
 8017dd0:	e001      	b.n	8017dd6 <SX1276OnTimeoutIrq+0x146>
        break;
 8017dd2:	46c0      	nop			; (mov r8, r8)
 8017dd4:	e000      	b.n	8017dd8 <SX1276OnTimeoutIrq+0x148>
        break;
 8017dd6:	46c0      	nop			; (mov r8, r8)
    }
}
 8017dd8:	46c0      	nop			; (mov r8, r8)
 8017dda:	46bd      	mov	sp, r7
 8017ddc:	b005      	add	sp, #20
 8017dde:	bd90      	pop	{r4, r7, pc}
 8017de0:	200015ec 	.word	0x200015ec
 8017de4:	200015d4 	.word	0x200015d4
 8017de8:	2000109c 	.word	0x2000109c
 8017dec:	08021bc8 	.word	0x08021bc8

08017df0 <SX1276OnDio0Irq>:

void SX1276OnDio0Irq( void* context )
{
 8017df0:	b5b0      	push	{r4, r5, r7, lr}
 8017df2:	b084      	sub	sp, #16
 8017df4:	af00      	add	r7, sp, #0
 8017df6:	6078      	str	r0, [r7, #4]
	LOG_INFO_SX1276((">> SX1276OnDio0Irq\r\n"));

    volatile uint8_t irqFlags = 0;
 8017df8:	230d      	movs	r3, #13
 8017dfa:	18fb      	adds	r3, r7, r3
 8017dfc:	2200      	movs	r2, #0
 8017dfe:	701a      	strb	r2, [r3, #0]

    switch( SX1276.Settings.State )
 8017e00:	4bca      	ldr	r3, [pc, #808]	; (801812c <SX1276OnDio0Irq+0x33c>)
 8017e02:	791b      	ldrb	r3, [r3, #4]
 8017e04:	2b01      	cmp	r3, #1
 8017e06:	d003      	beq.n	8017e10 <SX1276OnDio0Irq+0x20>
 8017e08:	2b02      	cmp	r3, #2
 8017e0a:	d100      	bne.n	8017e0e <SX1276OnDio0Irq+0x1e>
 8017e0c:	e1f2      	b.n	80181f4 <SX1276OnDio0Irq+0x404>
                }
                break;
            }
            break;
        default:
            break;
 8017e0e:	e20f      	b.n	8018230 <SX1276OnDio0Irq+0x440>
            switch( SX1276.Settings.Modem )
 8017e10:	4bc6      	ldr	r3, [pc, #792]	; (801812c <SX1276OnDio0Irq+0x33c>)
 8017e12:	795b      	ldrb	r3, [r3, #5]
 8017e14:	2b00      	cmp	r3, #0
 8017e16:	d003      	beq.n	8017e20 <SX1276OnDio0Irq+0x30>
 8017e18:	2b01      	cmp	r3, #1
 8017e1a:	d100      	bne.n	8017e1e <SX1276OnDio0Irq+0x2e>
 8017e1c:	e0eb      	b.n	8017ff6 <SX1276OnDio0Irq+0x206>
                break;
 8017e1e:	e1e8      	b.n	80181f2 <SX1276OnDio0Irq+0x402>
                if( SX1276.Settings.Fsk.CrcOn == true )
 8017e20:	4bc2      	ldr	r3, [pc, #776]	; (801812c <SX1276OnDio0Irq+0x33c>)
 8017e22:	2224      	movs	r2, #36	; 0x24
 8017e24:	5c9b      	ldrb	r3, [r3, r2]
 8017e26:	2b00      	cmp	r3, #0
 8017e28:	d057      	beq.n	8017eda <SX1276OnDio0Irq+0xea>
                    irqFlags = SX1276Read( REG_IRQFLAGS2 );
 8017e2a:	203f      	movs	r0, #63	; 0x3f
 8017e2c:	f7ff fdf4 	bl	8017a18 <SX1276Read>
 8017e30:	0003      	movs	r3, r0
 8017e32:	001a      	movs	r2, r3
 8017e34:	210d      	movs	r1, #13
 8017e36:	187b      	adds	r3, r7, r1
 8017e38:	701a      	strb	r2, [r3, #0]
                    if( ( irqFlags & RF_IRQFLAGS2_CRCOK ) != RF_IRQFLAGS2_CRCOK )
 8017e3a:	187b      	adds	r3, r7, r1
 8017e3c:	781b      	ldrb	r3, [r3, #0]
 8017e3e:	b2db      	uxtb	r3, r3
 8017e40:	001a      	movs	r2, r3
 8017e42:	2302      	movs	r3, #2
 8017e44:	4013      	ands	r3, r2
 8017e46:	2b02      	cmp	r3, #2
 8017e48:	d047      	beq.n	8017eda <SX1276OnDio0Irq+0xea>
                        SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 8017e4a:	210b      	movs	r1, #11
 8017e4c:	203e      	movs	r0, #62	; 0x3e
 8017e4e:	f7ff fdcf 	bl	80179f0 <SX1276Write>
                        SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 8017e52:	2110      	movs	r1, #16
 8017e54:	203f      	movs	r0, #63	; 0x3f
 8017e56:	f7ff fdcb 	bl	80179f0 <SX1276Write>
                        TimerStop( &RxTimeoutTimer );
 8017e5a:	4bb5      	ldr	r3, [pc, #724]	; (8018130 <SX1276OnDio0Irq+0x340>)
 8017e5c:	0018      	movs	r0, r3
 8017e5e:	f7fd fd37 	bl	80158d0 <TimerStop>
                        if( SX1276.Settings.Fsk.RxContinuous == false )
 8017e62:	4bb2      	ldr	r3, [pc, #712]	; (801812c <SX1276OnDio0Irq+0x33c>)
 8017e64:	2226      	movs	r2, #38	; 0x26
 8017e66:	5c9b      	ldrb	r3, [r3, r2]
 8017e68:	2201      	movs	r2, #1
 8017e6a:	4053      	eors	r3, r2
 8017e6c:	b2db      	uxtb	r3, r3
 8017e6e:	2b00      	cmp	r3, #0
 8017e70:	d007      	beq.n	8017e82 <SX1276OnDio0Irq+0x92>
                            TimerStop( &RxTimeoutSyncWord );
 8017e72:	4bb0      	ldr	r3, [pc, #704]	; (8018134 <SX1276OnDio0Irq+0x344>)
 8017e74:	0018      	movs	r0, r3
 8017e76:	f7fd fd2b 	bl	80158d0 <TimerStop>
                            SX1276.Settings.State = RF_IDLE;
 8017e7a:	4bac      	ldr	r3, [pc, #688]	; (801812c <SX1276OnDio0Irq+0x33c>)
 8017e7c:	2200      	movs	r2, #0
 8017e7e:	711a      	strb	r2, [r3, #4]
 8017e80:	e00f      	b.n	8017ea2 <SX1276OnDio0Irq+0xb2>
                            SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 8017e82:	200d      	movs	r0, #13
 8017e84:	f7ff fdc8 	bl	8017a18 <SX1276Read>
 8017e88:	0003      	movs	r3, r0
 8017e8a:	001a      	movs	r2, r3
 8017e8c:	2340      	movs	r3, #64	; 0x40
 8017e8e:	4313      	orrs	r3, r2
 8017e90:	b2db      	uxtb	r3, r3
 8017e92:	0019      	movs	r1, r3
 8017e94:	200d      	movs	r0, #13
 8017e96:	f7ff fdab 	bl	80179f0 <SX1276Write>
                            TimerStart( &RxTimeoutSyncWord );
 8017e9a:	4ba6      	ldr	r3, [pc, #664]	; (8018134 <SX1276OnDio0Irq+0x344>)
 8017e9c:	0018      	movs	r0, r3
 8017e9e:	f7fd fcc1 	bl	8015824 <TimerStart>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 8017ea2:	4ba5      	ldr	r3, [pc, #660]	; (8018138 <SX1276OnDio0Irq+0x348>)
 8017ea4:	681b      	ldr	r3, [r3, #0]
 8017ea6:	2b00      	cmp	r3, #0
 8017ea8:	d008      	beq.n	8017ebc <SX1276OnDio0Irq+0xcc>
 8017eaa:	4ba3      	ldr	r3, [pc, #652]	; (8018138 <SX1276OnDio0Irq+0x348>)
 8017eac:	681b      	ldr	r3, [r3, #0]
 8017eae:	691b      	ldr	r3, [r3, #16]
 8017eb0:	2b00      	cmp	r3, #0
 8017eb2:	d003      	beq.n	8017ebc <SX1276OnDio0Irq+0xcc>
                            RadioEvents->RxError( );
 8017eb4:	4ba0      	ldr	r3, [pc, #640]	; (8018138 <SX1276OnDio0Irq+0x348>)
 8017eb6:	681b      	ldr	r3, [r3, #0]
 8017eb8:	691b      	ldr	r3, [r3, #16]
 8017eba:	4798      	blx	r3
                        SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 8017ebc:	4b9b      	ldr	r3, [pc, #620]	; (801812c <SX1276OnDio0Irq+0x33c>)
 8017ebe:	2230      	movs	r2, #48	; 0x30
 8017ec0:	2100      	movs	r1, #0
 8017ec2:	5499      	strb	r1, [r3, r2]
                        SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 8017ec4:	4b99      	ldr	r3, [pc, #612]	; (801812c <SX1276OnDio0Irq+0x33c>)
 8017ec6:	2231      	movs	r2, #49	; 0x31
 8017ec8:	2100      	movs	r1, #0
 8017eca:	5499      	strb	r1, [r3, r2]
                        SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8017ecc:	4b97      	ldr	r3, [pc, #604]	; (801812c <SX1276OnDio0Irq+0x33c>)
 8017ece:	2200      	movs	r2, #0
 8017ed0:	879a      	strh	r2, [r3, #60]	; 0x3c
                        SX1276.Settings.FskPacketHandler.Size = 0;
 8017ed2:	4b96      	ldr	r3, [pc, #600]	; (801812c <SX1276OnDio0Irq+0x33c>)
 8017ed4:	2200      	movs	r2, #0
 8017ed6:	875a      	strh	r2, [r3, #58]	; 0x3a
                        break;
 8017ed8:	e18b      	b.n	80181f2 <SX1276OnDio0Irq+0x402>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 8017eda:	4b94      	ldr	r3, [pc, #592]	; (801812c <SX1276OnDio0Irq+0x33c>)
 8017edc:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8017ede:	2b00      	cmp	r3, #0
 8017ee0:	d12d      	bne.n	8017f3e <SX1276OnDio0Irq+0x14e>
 8017ee2:	4b92      	ldr	r3, [pc, #584]	; (801812c <SX1276OnDio0Irq+0x33c>)
 8017ee4:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8017ee6:	2b00      	cmp	r3, #0
 8017ee8:	d129      	bne.n	8017f3e <SX1276OnDio0Irq+0x14e>
                    if( SX1276.Settings.Fsk.FixLen == false )
 8017eea:	4b90      	ldr	r3, [pc, #576]	; (801812c <SX1276OnDio0Irq+0x33c>)
 8017eec:	2222      	movs	r2, #34	; 0x22
 8017eee:	5c9b      	ldrb	r3, [r3, r2]
 8017ef0:	2201      	movs	r2, #1
 8017ef2:	4053      	eors	r3, r2
 8017ef4:	b2db      	uxtb	r3, r3
 8017ef6:	2b00      	cmp	r3, #0
 8017ef8:	d005      	beq.n	8017f06 <SX1276OnDio0Irq+0x116>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 8017efa:	4b90      	ldr	r3, [pc, #576]	; (801813c <SX1276OnDio0Irq+0x34c>)
 8017efc:	2101      	movs	r1, #1
 8017efe:	0018      	movs	r0, r3
 8017f00:	f7ff fe52 	bl	8017ba8 <SX1276ReadFifo>
 8017f04:	e006      	b.n	8017f14 <SX1276OnDio0Irq+0x124>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 8017f06:	2032      	movs	r0, #50	; 0x32
 8017f08:	f7ff fd86 	bl	8017a18 <SX1276Read>
 8017f0c:	0003      	movs	r3, r0
 8017f0e:	b29a      	uxth	r2, r3
 8017f10:	4b86      	ldr	r3, [pc, #536]	; (801812c <SX1276OnDio0Irq+0x33c>)
 8017f12:	875a      	strh	r2, [r3, #58]	; 0x3a
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8017f14:	4b85      	ldr	r3, [pc, #532]	; (801812c <SX1276OnDio0Irq+0x33c>)
 8017f16:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8017f18:	001a      	movs	r2, r3
 8017f1a:	4b89      	ldr	r3, [pc, #548]	; (8018140 <SX1276OnDio0Irq+0x350>)
 8017f1c:	18d0      	adds	r0, r2, r3
 8017f1e:	4b83      	ldr	r3, [pc, #524]	; (801812c <SX1276OnDio0Irq+0x33c>)
 8017f20:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8017f22:	b2da      	uxtb	r2, r3
 8017f24:	4b81      	ldr	r3, [pc, #516]	; (801812c <SX1276OnDio0Irq+0x33c>)
 8017f26:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8017f28:	b2db      	uxtb	r3, r3
 8017f2a:	1ad3      	subs	r3, r2, r3
 8017f2c:	b2db      	uxtb	r3, r3
 8017f2e:	0019      	movs	r1, r3
 8017f30:	f7ff fe3a 	bl	8017ba8 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8017f34:	4b7d      	ldr	r3, [pc, #500]	; (801812c <SX1276OnDio0Irq+0x33c>)
 8017f36:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 8017f38:	4b7c      	ldr	r3, [pc, #496]	; (801812c <SX1276OnDio0Irq+0x33c>)
 8017f3a:	879a      	strh	r2, [r3, #60]	; 0x3c
 8017f3c:	e013      	b.n	8017f66 <SX1276OnDio0Irq+0x176>
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8017f3e:	4b7b      	ldr	r3, [pc, #492]	; (801812c <SX1276OnDio0Irq+0x33c>)
 8017f40:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8017f42:	001a      	movs	r2, r3
 8017f44:	4b7e      	ldr	r3, [pc, #504]	; (8018140 <SX1276OnDio0Irq+0x350>)
 8017f46:	18d0      	adds	r0, r2, r3
 8017f48:	4b78      	ldr	r3, [pc, #480]	; (801812c <SX1276OnDio0Irq+0x33c>)
 8017f4a:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8017f4c:	b2da      	uxtb	r2, r3
 8017f4e:	4b77      	ldr	r3, [pc, #476]	; (801812c <SX1276OnDio0Irq+0x33c>)
 8017f50:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8017f52:	b2db      	uxtb	r3, r3
 8017f54:	1ad3      	subs	r3, r2, r3
 8017f56:	b2db      	uxtb	r3, r3
 8017f58:	0019      	movs	r1, r3
 8017f5a:	f7ff fe25 	bl	8017ba8 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8017f5e:	4b73      	ldr	r3, [pc, #460]	; (801812c <SX1276OnDio0Irq+0x33c>)
 8017f60:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 8017f62:	4b72      	ldr	r3, [pc, #456]	; (801812c <SX1276OnDio0Irq+0x33c>)
 8017f64:	879a      	strh	r2, [r3, #60]	; 0x3c
                TimerStop( &RxTimeoutTimer );
 8017f66:	4b72      	ldr	r3, [pc, #456]	; (8018130 <SX1276OnDio0Irq+0x340>)
 8017f68:	0018      	movs	r0, r3
 8017f6a:	f7fd fcb1 	bl	80158d0 <TimerStop>
                if( SX1276.Settings.Fsk.RxContinuous == false )
 8017f6e:	4b6f      	ldr	r3, [pc, #444]	; (801812c <SX1276OnDio0Irq+0x33c>)
 8017f70:	2226      	movs	r2, #38	; 0x26
 8017f72:	5c9b      	ldrb	r3, [r3, r2]
 8017f74:	2201      	movs	r2, #1
 8017f76:	4053      	eors	r3, r2
 8017f78:	b2db      	uxtb	r3, r3
 8017f7a:	2b00      	cmp	r3, #0
 8017f7c:	d007      	beq.n	8017f8e <SX1276OnDio0Irq+0x19e>
                    SX1276.Settings.State = RF_IDLE;
 8017f7e:	4b6b      	ldr	r3, [pc, #428]	; (801812c <SX1276OnDio0Irq+0x33c>)
 8017f80:	2200      	movs	r2, #0
 8017f82:	711a      	strb	r2, [r3, #4]
                    TimerStop( &RxTimeoutSyncWord );
 8017f84:	4b6b      	ldr	r3, [pc, #428]	; (8018134 <SX1276OnDio0Irq+0x344>)
 8017f86:	0018      	movs	r0, r3
 8017f88:	f7fd fca2 	bl	80158d0 <TimerStop>
 8017f8c:	e00f      	b.n	8017fae <SX1276OnDio0Irq+0x1be>
                    SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 8017f8e:	200d      	movs	r0, #13
 8017f90:	f7ff fd42 	bl	8017a18 <SX1276Read>
 8017f94:	0003      	movs	r3, r0
 8017f96:	001a      	movs	r2, r3
 8017f98:	2340      	movs	r3, #64	; 0x40
 8017f9a:	4313      	orrs	r3, r2
 8017f9c:	b2db      	uxtb	r3, r3
 8017f9e:	0019      	movs	r1, r3
 8017fa0:	200d      	movs	r0, #13
 8017fa2:	f7ff fd25 	bl	80179f0 <SX1276Write>
                    TimerStart( &RxTimeoutSyncWord );
 8017fa6:	4b63      	ldr	r3, [pc, #396]	; (8018134 <SX1276OnDio0Irq+0x344>)
 8017fa8:	0018      	movs	r0, r3
 8017faa:	f7fd fc3b 	bl	8015824 <TimerStart>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8017fae:	4b62      	ldr	r3, [pc, #392]	; (8018138 <SX1276OnDio0Irq+0x348>)
 8017fb0:	681b      	ldr	r3, [r3, #0]
 8017fb2:	2b00      	cmp	r3, #0
 8017fb4:	d010      	beq.n	8017fd8 <SX1276OnDio0Irq+0x1e8>
 8017fb6:	4b60      	ldr	r3, [pc, #384]	; (8018138 <SX1276OnDio0Irq+0x348>)
 8017fb8:	681b      	ldr	r3, [r3, #0]
 8017fba:	689b      	ldr	r3, [r3, #8]
 8017fbc:	2b00      	cmp	r3, #0
 8017fbe:	d00b      	beq.n	8017fd8 <SX1276OnDio0Irq+0x1e8>
                    RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.FskPacketHandler.Size, SX1276.Settings.FskPacketHandler.RssiValue, 0 );
 8017fc0:	4b5d      	ldr	r3, [pc, #372]	; (8018138 <SX1276OnDio0Irq+0x348>)
 8017fc2:	681b      	ldr	r3, [r3, #0]
 8017fc4:	689c      	ldr	r4, [r3, #8]
 8017fc6:	4b59      	ldr	r3, [pc, #356]	; (801812c <SX1276OnDio0Irq+0x33c>)
 8017fc8:	8f59      	ldrh	r1, [r3, #58]	; 0x3a
 8017fca:	4b58      	ldr	r3, [pc, #352]	; (801812c <SX1276OnDio0Irq+0x33c>)
 8017fcc:	2232      	movs	r2, #50	; 0x32
 8017fce:	569b      	ldrsb	r3, [r3, r2]
 8017fd0:	b21a      	sxth	r2, r3
 8017fd2:	485b      	ldr	r0, [pc, #364]	; (8018140 <SX1276OnDio0Irq+0x350>)
 8017fd4:	2300      	movs	r3, #0
 8017fd6:	47a0      	blx	r4
                SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 8017fd8:	4b54      	ldr	r3, [pc, #336]	; (801812c <SX1276OnDio0Irq+0x33c>)
 8017fda:	2230      	movs	r2, #48	; 0x30
 8017fdc:	2100      	movs	r1, #0
 8017fde:	5499      	strb	r1, [r3, r2]
                SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 8017fe0:	4b52      	ldr	r3, [pc, #328]	; (801812c <SX1276OnDio0Irq+0x33c>)
 8017fe2:	2231      	movs	r2, #49	; 0x31
 8017fe4:	2100      	movs	r1, #0
 8017fe6:	5499      	strb	r1, [r3, r2]
                SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8017fe8:	4b50      	ldr	r3, [pc, #320]	; (801812c <SX1276OnDio0Irq+0x33c>)
 8017fea:	2200      	movs	r2, #0
 8017fec:	879a      	strh	r2, [r3, #60]	; 0x3c
                SX1276.Settings.FskPacketHandler.Size = 0;
 8017fee:	4b4f      	ldr	r3, [pc, #316]	; (801812c <SX1276OnDio0Irq+0x33c>)
 8017ff0:	2200      	movs	r2, #0
 8017ff2:	875a      	strh	r2, [r3, #58]	; 0x3a
                break;
 8017ff4:	e0fd      	b.n	80181f2 <SX1276OnDio0Irq+0x402>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXDONE );
 8017ff6:	2140      	movs	r1, #64	; 0x40
 8017ff8:	2012      	movs	r0, #18
 8017ffa:	f7ff fcf9 	bl	80179f0 <SX1276Write>
                    irqFlags = SX1276Read( REG_LR_IRQFLAGS );
 8017ffe:	2012      	movs	r0, #18
 8018000:	f7ff fd0a 	bl	8017a18 <SX1276Read>
 8018004:	0003      	movs	r3, r0
 8018006:	001a      	movs	r2, r3
 8018008:	210d      	movs	r1, #13
 801800a:	187b      	adds	r3, r7, r1
 801800c:	701a      	strb	r2, [r3, #0]
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
 801800e:	187b      	adds	r3, r7, r1
 8018010:	781b      	ldrb	r3, [r3, #0]
 8018012:	b2db      	uxtb	r3, r3
 8018014:	001a      	movs	r2, r3
 8018016:	2320      	movs	r3, #32
 8018018:	4013      	ands	r3, r2
 801801a:	2b20      	cmp	r3, #32
 801801c:	d122      	bne.n	8018064 <SX1276OnDio0Irq+0x274>
                        SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_PAYLOADCRCERROR );
 801801e:	2120      	movs	r1, #32
 8018020:	2012      	movs	r0, #18
 8018022:	f7ff fce5 	bl	80179f0 <SX1276Write>
                        if( SX1276.Settings.LoRa.RxContinuous == false )
 8018026:	4b41      	ldr	r3, [pc, #260]	; (801812c <SX1276OnDio0Irq+0x33c>)
 8018028:	2256      	movs	r2, #86	; 0x56
 801802a:	5c9b      	ldrb	r3, [r3, r2]
 801802c:	2201      	movs	r2, #1
 801802e:	4053      	eors	r3, r2
 8018030:	b2db      	uxtb	r3, r3
 8018032:	2b00      	cmp	r3, #0
 8018034:	d002      	beq.n	801803c <SX1276OnDio0Irq+0x24c>
                            SX1276.Settings.State = RF_IDLE;
 8018036:	4b3d      	ldr	r3, [pc, #244]	; (801812c <SX1276OnDio0Irq+0x33c>)
 8018038:	2200      	movs	r2, #0
 801803a:	711a      	strb	r2, [r3, #4]
                        TimerStop( &RxTimeoutTimer );
 801803c:	4b3c      	ldr	r3, [pc, #240]	; (8018130 <SX1276OnDio0Irq+0x340>)
 801803e:	0018      	movs	r0, r3
 8018040:	f7fd fc46 	bl	80158d0 <TimerStop>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 8018044:	4b3c      	ldr	r3, [pc, #240]	; (8018138 <SX1276OnDio0Irq+0x348>)
 8018046:	681b      	ldr	r3, [r3, #0]
 8018048:	2b00      	cmp	r3, #0
 801804a:	d100      	bne.n	801804e <SX1276OnDio0Irq+0x25e>
 801804c:	e0ce      	b.n	80181ec <SX1276OnDio0Irq+0x3fc>
 801804e:	4b3a      	ldr	r3, [pc, #232]	; (8018138 <SX1276OnDio0Irq+0x348>)
 8018050:	681b      	ldr	r3, [r3, #0]
 8018052:	691b      	ldr	r3, [r3, #16]
 8018054:	2b00      	cmp	r3, #0
 8018056:	d100      	bne.n	801805a <SX1276OnDio0Irq+0x26a>
 8018058:	e0c8      	b.n	80181ec <SX1276OnDio0Irq+0x3fc>
                            RadioEvents->RxError( );
 801805a:	4b37      	ldr	r3, [pc, #220]	; (8018138 <SX1276OnDio0Irq+0x348>)
 801805c:	681b      	ldr	r3, [r3, #0]
 801805e:	691b      	ldr	r3, [r3, #16]
 8018060:	4798      	blx	r3
                        break;
 8018062:	e0c3      	b.n	80181ec <SX1276OnDio0Irq+0x3fc>
                    SX1276.Settings.LoRaPacketHandler.SnrValue = ( ( ( int8_t )SX1276Read( REG_LR_PKTSNRVALUE ) ) + 2 ) >> 2;
 8018064:	2019      	movs	r0, #25
 8018066:	f7ff fcd7 	bl	8017a18 <SX1276Read>
 801806a:	0003      	movs	r3, r0
 801806c:	b25b      	sxtb	r3, r3
 801806e:	3302      	adds	r3, #2
 8018070:	109b      	asrs	r3, r3, #2
 8018072:	b259      	sxtb	r1, r3
 8018074:	4b2d      	ldr	r3, [pc, #180]	; (801812c <SX1276OnDio0Irq+0x33c>)
 8018076:	2260      	movs	r2, #96	; 0x60
 8018078:	5499      	strb	r1, [r3, r2]
                    int16_t rssi = SX1276Read( REG_LR_PKTRSSIVALUE );
 801807a:	201a      	movs	r0, #26
 801807c:	f7ff fccc 	bl	8017a18 <SX1276Read>
 8018080:	0003      	movs	r3, r0
 8018082:	001a      	movs	r2, r3
 8018084:	230e      	movs	r3, #14
 8018086:	18fb      	adds	r3, r7, r3
 8018088:	801a      	strh	r2, [r3, #0]
                    if( SX1276.Settings.LoRaPacketHandler.SnrValue < 0 )
 801808a:	4b28      	ldr	r3, [pc, #160]	; (801812c <SX1276OnDio0Irq+0x33c>)
 801808c:	2260      	movs	r2, #96	; 0x60
 801808e:	569b      	ldrsb	r3, [r3, r2]
 8018090:	2b00      	cmp	r3, #0
 8018092:	da34      	bge.n	80180fe <SX1276OnDio0Irq+0x30e>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8018094:	4b25      	ldr	r3, [pc, #148]	; (801812c <SX1276OnDio0Irq+0x33c>)
 8018096:	689b      	ldr	r3, [r3, #8]
 8018098:	4a2a      	ldr	r2, [pc, #168]	; (8018144 <SX1276OnDio0Irq+0x354>)
 801809a:	4293      	cmp	r3, r2
 801809c:	d917      	bls.n	80180ce <SX1276OnDio0Irq+0x2de>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 801809e:	210e      	movs	r1, #14
 80180a0:	187b      	adds	r3, r7, r1
 80180a2:	2200      	movs	r2, #0
 80180a4:	5e9b      	ldrsh	r3, [r3, r2]
 80180a6:	111b      	asrs	r3, r3, #4
 80180a8:	b21b      	sxth	r3, r3
 80180aa:	b29a      	uxth	r2, r3
 80180ac:	187b      	adds	r3, r7, r1
 80180ae:	881b      	ldrh	r3, [r3, #0]
 80180b0:	18d3      	adds	r3, r2, r3
 80180b2:	b29a      	uxth	r2, r3
                                                                          SX1276.Settings.LoRaPacketHandler.SnrValue;
 80180b4:	4b1d      	ldr	r3, [pc, #116]	; (801812c <SX1276OnDio0Irq+0x33c>)
 80180b6:	2160      	movs	r1, #96	; 0x60
 80180b8:	565b      	ldrsb	r3, [r3, r1]
 80180ba:	b29b      	uxth	r3, r3
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 80180bc:	18d3      	adds	r3, r2, r3
 80180be:	b29b      	uxth	r3, r3
 80180c0:	3b9d      	subs	r3, #157	; 0x9d
 80180c2:	b29b      	uxth	r3, r3
 80180c4:	b219      	sxth	r1, r3
 80180c6:	4b19      	ldr	r3, [pc, #100]	; (801812c <SX1276OnDio0Irq+0x33c>)
 80180c8:	2262      	movs	r2, #98	; 0x62
 80180ca:	5299      	strh	r1, [r3, r2]
 80180cc:	e04d      	b.n	801816a <SX1276OnDio0Irq+0x37a>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 80180ce:	210e      	movs	r1, #14
 80180d0:	187b      	adds	r3, r7, r1
 80180d2:	2200      	movs	r2, #0
 80180d4:	5e9b      	ldrsh	r3, [r3, r2]
 80180d6:	111b      	asrs	r3, r3, #4
 80180d8:	b21b      	sxth	r3, r3
 80180da:	b29a      	uxth	r2, r3
 80180dc:	187b      	adds	r3, r7, r1
 80180de:	881b      	ldrh	r3, [r3, #0]
 80180e0:	18d3      	adds	r3, r2, r3
 80180e2:	b29a      	uxth	r2, r3
                                                                          SX1276.Settings.LoRaPacketHandler.SnrValue;
 80180e4:	4b11      	ldr	r3, [pc, #68]	; (801812c <SX1276OnDio0Irq+0x33c>)
 80180e6:	2160      	movs	r1, #96	; 0x60
 80180e8:	565b      	ldrsb	r3, [r3, r1]
 80180ea:	b29b      	uxth	r3, r3
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 80180ec:	18d3      	adds	r3, r2, r3
 80180ee:	b29b      	uxth	r3, r3
 80180f0:	3ba4      	subs	r3, #164	; 0xa4
 80180f2:	b29b      	uxth	r3, r3
 80180f4:	b219      	sxth	r1, r3
 80180f6:	4b0d      	ldr	r3, [pc, #52]	; (801812c <SX1276OnDio0Irq+0x33c>)
 80180f8:	2262      	movs	r2, #98	; 0x62
 80180fa:	5299      	strh	r1, [r3, r2]
 80180fc:	e035      	b.n	801816a <SX1276OnDio0Irq+0x37a>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 80180fe:	4b0b      	ldr	r3, [pc, #44]	; (801812c <SX1276OnDio0Irq+0x33c>)
 8018100:	689b      	ldr	r3, [r3, #8]
 8018102:	4a10      	ldr	r2, [pc, #64]	; (8018144 <SX1276OnDio0Irq+0x354>)
 8018104:	4293      	cmp	r3, r2
 8018106:	d91f      	bls.n	8018148 <SX1276OnDio0Irq+0x358>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 );
 8018108:	210e      	movs	r1, #14
 801810a:	187b      	adds	r3, r7, r1
 801810c:	2200      	movs	r2, #0
 801810e:	5e9b      	ldrsh	r3, [r3, r2]
 8018110:	111b      	asrs	r3, r3, #4
 8018112:	b21b      	sxth	r3, r3
 8018114:	b29a      	uxth	r2, r3
 8018116:	187b      	adds	r3, r7, r1
 8018118:	881b      	ldrh	r3, [r3, #0]
 801811a:	18d3      	adds	r3, r2, r3
 801811c:	b29b      	uxth	r3, r3
 801811e:	3b9d      	subs	r3, #157	; 0x9d
 8018120:	b29b      	uxth	r3, r3
 8018122:	b219      	sxth	r1, r3
 8018124:	4b01      	ldr	r3, [pc, #4]	; (801812c <SX1276OnDio0Irq+0x33c>)
 8018126:	2262      	movs	r2, #98	; 0x62
 8018128:	5299      	strh	r1, [r3, r2]
 801812a:	e01e      	b.n	801816a <SX1276OnDio0Irq+0x37a>
 801812c:	200015ec 	.word	0x200015ec
 8018130:	20001654 	.word	0x20001654
 8018134:	200015d4 	.word	0x200015d4
 8018138:	2000109c 	.word	0x2000109c
 801813c:	20001626 	.word	0x20001626
 8018140:	200010a0 	.word	0x200010a0
 8018144:	1f4add40 	.word	0x1f4add40
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
 8018148:	210e      	movs	r1, #14
 801814a:	187b      	adds	r3, r7, r1
 801814c:	2200      	movs	r2, #0
 801814e:	5e9b      	ldrsh	r3, [r3, r2]
 8018150:	111b      	asrs	r3, r3, #4
 8018152:	b21b      	sxth	r3, r3
 8018154:	b29a      	uxth	r2, r3
 8018156:	187b      	adds	r3, r7, r1
 8018158:	881b      	ldrh	r3, [r3, #0]
 801815a:	18d3      	adds	r3, r2, r3
 801815c:	b29b      	uxth	r3, r3
 801815e:	3ba4      	subs	r3, #164	; 0xa4
 8018160:	b29b      	uxth	r3, r3
 8018162:	b219      	sxth	r1, r3
 8018164:	4b34      	ldr	r3, [pc, #208]	; (8018238 <SX1276OnDio0Irq+0x448>)
 8018166:	2262      	movs	r2, #98	; 0x62
 8018168:	5299      	strh	r1, [r3, r2]
                    SX1276.Settings.LoRaPacketHandler.Size = SX1276Read( REG_LR_RXNBBYTES );
 801816a:	2013      	movs	r0, #19
 801816c:	f7ff fc54 	bl	8017a18 <SX1276Read>
 8018170:	0003      	movs	r3, r0
 8018172:	0019      	movs	r1, r3
 8018174:	4b30      	ldr	r3, [pc, #192]	; (8018238 <SX1276OnDio0Irq+0x448>)
 8018176:	2264      	movs	r2, #100	; 0x64
 8018178:	5499      	strb	r1, [r3, r2]
                    SX1276Write( REG_LR_FIFOADDRPTR, SX1276Read( REG_LR_FIFORXCURRENTADDR ) );
 801817a:	2010      	movs	r0, #16
 801817c:	f7ff fc4c 	bl	8017a18 <SX1276Read>
 8018180:	0003      	movs	r3, r0
 8018182:	0019      	movs	r1, r3
 8018184:	200d      	movs	r0, #13
 8018186:	f7ff fc33 	bl	80179f0 <SX1276Write>
                    SX1276ReadFifo( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size );
 801818a:	4b2b      	ldr	r3, [pc, #172]	; (8018238 <SX1276OnDio0Irq+0x448>)
 801818c:	2264      	movs	r2, #100	; 0x64
 801818e:	5c9a      	ldrb	r2, [r3, r2]
 8018190:	4b2a      	ldr	r3, [pc, #168]	; (801823c <SX1276OnDio0Irq+0x44c>)
 8018192:	0011      	movs	r1, r2
 8018194:	0018      	movs	r0, r3
 8018196:	f7ff fd07 	bl	8017ba8 <SX1276ReadFifo>
                    if( SX1276.Settings.LoRa.RxContinuous == false )
 801819a:	4b27      	ldr	r3, [pc, #156]	; (8018238 <SX1276OnDio0Irq+0x448>)
 801819c:	2256      	movs	r2, #86	; 0x56
 801819e:	5c9b      	ldrb	r3, [r3, r2]
 80181a0:	2201      	movs	r2, #1
 80181a2:	4053      	eors	r3, r2
 80181a4:	b2db      	uxtb	r3, r3
 80181a6:	2b00      	cmp	r3, #0
 80181a8:	d002      	beq.n	80181b0 <SX1276OnDio0Irq+0x3c0>
                        SX1276.Settings.State = RF_IDLE;
 80181aa:	4b23      	ldr	r3, [pc, #140]	; (8018238 <SX1276OnDio0Irq+0x448>)
 80181ac:	2200      	movs	r2, #0
 80181ae:	711a      	strb	r2, [r3, #4]
                    TimerStop( &RxTimeoutTimer );
 80181b0:	4b23      	ldr	r3, [pc, #140]	; (8018240 <SX1276OnDio0Irq+0x450>)
 80181b2:	0018      	movs	r0, r3
 80181b4:	f7fd fb8c 	bl	80158d0 <TimerStop>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 80181b8:	4b22      	ldr	r3, [pc, #136]	; (8018244 <SX1276OnDio0Irq+0x454>)
 80181ba:	681b      	ldr	r3, [r3, #0]
 80181bc:	2b00      	cmp	r3, #0
 80181be:	d017      	beq.n	80181f0 <SX1276OnDio0Irq+0x400>
 80181c0:	4b20      	ldr	r3, [pc, #128]	; (8018244 <SX1276OnDio0Irq+0x454>)
 80181c2:	681b      	ldr	r3, [r3, #0]
 80181c4:	689b      	ldr	r3, [r3, #8]
 80181c6:	2b00      	cmp	r3, #0
 80181c8:	d012      	beq.n	80181f0 <SX1276OnDio0Irq+0x400>
                        RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size, SX1276.Settings.LoRaPacketHandler.RssiValue, SX1276.Settings.LoRaPacketHandler.SnrValue );
 80181ca:	4b1e      	ldr	r3, [pc, #120]	; (8018244 <SX1276OnDio0Irq+0x454>)
 80181cc:	681b      	ldr	r3, [r3, #0]
 80181ce:	689c      	ldr	r4, [r3, #8]
 80181d0:	4b19      	ldr	r3, [pc, #100]	; (8018238 <SX1276OnDio0Irq+0x448>)
 80181d2:	2264      	movs	r2, #100	; 0x64
 80181d4:	5c9b      	ldrb	r3, [r3, r2]
 80181d6:	b299      	uxth	r1, r3
 80181d8:	4b17      	ldr	r3, [pc, #92]	; (8018238 <SX1276OnDio0Irq+0x448>)
 80181da:	2262      	movs	r2, #98	; 0x62
 80181dc:	5e9d      	ldrsh	r5, [r3, r2]
 80181de:	4b16      	ldr	r3, [pc, #88]	; (8018238 <SX1276OnDio0Irq+0x448>)
 80181e0:	2260      	movs	r2, #96	; 0x60
 80181e2:	569b      	ldrsb	r3, [r3, r2]
 80181e4:	4815      	ldr	r0, [pc, #84]	; (801823c <SX1276OnDio0Irq+0x44c>)
 80181e6:	002a      	movs	r2, r5
 80181e8:	47a0      	blx	r4
                break;
 80181ea:	e001      	b.n	80181f0 <SX1276OnDio0Irq+0x400>
                        break;
 80181ec:	46c0      	nop			; (mov r8, r8)
 80181ee:	e01f      	b.n	8018230 <SX1276OnDio0Irq+0x440>
                break;
 80181f0:	46c0      	nop			; (mov r8, r8)
            break;
 80181f2:	e01d      	b.n	8018230 <SX1276OnDio0Irq+0x440>
            TimerStop( &TxTimeoutTimer );
 80181f4:	4b14      	ldr	r3, [pc, #80]	; (8018248 <SX1276OnDio0Irq+0x458>)
 80181f6:	0018      	movs	r0, r3
 80181f8:	f7fd fb6a 	bl	80158d0 <TimerStop>
            switch( SX1276.Settings.Modem )
 80181fc:	4b0e      	ldr	r3, [pc, #56]	; (8018238 <SX1276OnDio0Irq+0x448>)
 80181fe:	795b      	ldrb	r3, [r3, #5]
 8018200:	2b01      	cmp	r3, #1
 8018202:	d103      	bne.n	801820c <SX1276OnDio0Irq+0x41c>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_TXDONE );
 8018204:	2108      	movs	r1, #8
 8018206:	2012      	movs	r0, #18
 8018208:	f7ff fbf2 	bl	80179f0 <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 801820c:	4b0a      	ldr	r3, [pc, #40]	; (8018238 <SX1276OnDio0Irq+0x448>)
 801820e:	2200      	movs	r2, #0
 8018210:	711a      	strb	r2, [r3, #4]
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8018212:	4b0c      	ldr	r3, [pc, #48]	; (8018244 <SX1276OnDio0Irq+0x454>)
 8018214:	681b      	ldr	r3, [r3, #0]
 8018216:	2b00      	cmp	r3, #0
 8018218:	d008      	beq.n	801822c <SX1276OnDio0Irq+0x43c>
 801821a:	4b0a      	ldr	r3, [pc, #40]	; (8018244 <SX1276OnDio0Irq+0x454>)
 801821c:	681b      	ldr	r3, [r3, #0]
 801821e:	681b      	ldr	r3, [r3, #0]
 8018220:	2b00      	cmp	r3, #0
 8018222:	d003      	beq.n	801822c <SX1276OnDio0Irq+0x43c>
                    RadioEvents->TxDone( );
 8018224:	4b07      	ldr	r3, [pc, #28]	; (8018244 <SX1276OnDio0Irq+0x454>)
 8018226:	681b      	ldr	r3, [r3, #0]
 8018228:	681b      	ldr	r3, [r3, #0]
 801822a:	4798      	blx	r3
                break;
 801822c:	46c0      	nop			; (mov r8, r8)
            break;
 801822e:	46c0      	nop			; (mov r8, r8)
    }
}
 8018230:	46c0      	nop			; (mov r8, r8)
 8018232:	46bd      	mov	sp, r7
 8018234:	b004      	add	sp, #16
 8018236:	bdb0      	pop	{r4, r5, r7, pc}
 8018238:	200015ec 	.word	0x200015ec
 801823c:	200010a0 	.word	0x200010a0
 8018240:	20001654 	.word	0x20001654
 8018244:	2000109c 	.word	0x2000109c
 8018248:	200015bc 	.word	0x200015bc

0801824c <SX1276OnDio1Irq>:

void SX1276OnDio1Irq( void* context )
{
 801824c:	b580      	push	{r7, lr}
 801824e:	b082      	sub	sp, #8
 8018250:	af00      	add	r7, sp, #0
 8018252:	6078      	str	r0, [r7, #4]
	LOG_INFO_SX1276((">> SX1276OnDio1Irq\r\n"));

    switch( SX1276.Settings.State )
 8018254:	4b61      	ldr	r3, [pc, #388]	; (80183dc <SX1276OnDio1Irq+0x190>)
 8018256:	791b      	ldrb	r3, [r3, #4]
 8018258:	2b01      	cmp	r3, #1
 801825a:	d003      	beq.n	8018264 <SX1276OnDio1Irq+0x18>
 801825c:	2b02      	cmp	r3, #2
 801825e:	d100      	bne.n	8018262 <SX1276OnDio1Irq+0x16>
 8018260:	e078      	b.n	8018354 <SX1276OnDio1Irq+0x108>
            default:
                break;
            }
            break;
        default:
            break;
 8018262:	e0b6      	b.n	80183d2 <SX1276OnDio1Irq+0x186>
            switch( SX1276.Settings.Modem )
 8018264:	4b5d      	ldr	r3, [pc, #372]	; (80183dc <SX1276OnDio1Irq+0x190>)
 8018266:	795b      	ldrb	r3, [r3, #5]
 8018268:	2b00      	cmp	r3, #0
 801826a:	d002      	beq.n	8018272 <SX1276OnDio1Irq+0x26>
 801826c:	2b01      	cmp	r3, #1
 801826e:	d057      	beq.n	8018320 <SX1276OnDio1Irq+0xd4>
                break;
 8018270:	e06f      	b.n	8018352 <SX1276OnDio1Irq+0x106>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 8018272:	4b5a      	ldr	r3, [pc, #360]	; (80183dc <SX1276OnDio1Irq+0x190>)
 8018274:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8018276:	2b00      	cmp	r3, #0
 8018278:	d118      	bne.n	80182ac <SX1276OnDio1Irq+0x60>
 801827a:	4b58      	ldr	r3, [pc, #352]	; (80183dc <SX1276OnDio1Irq+0x190>)
 801827c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801827e:	2b00      	cmp	r3, #0
 8018280:	d114      	bne.n	80182ac <SX1276OnDio1Irq+0x60>
                    if( SX1276.Settings.Fsk.FixLen == false )
 8018282:	4b56      	ldr	r3, [pc, #344]	; (80183dc <SX1276OnDio1Irq+0x190>)
 8018284:	2222      	movs	r2, #34	; 0x22
 8018286:	5c9b      	ldrb	r3, [r3, r2]
 8018288:	2201      	movs	r2, #1
 801828a:	4053      	eors	r3, r2
 801828c:	b2db      	uxtb	r3, r3
 801828e:	2b00      	cmp	r3, #0
 8018290:	d005      	beq.n	801829e <SX1276OnDio1Irq+0x52>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 8018292:	4b53      	ldr	r3, [pc, #332]	; (80183e0 <SX1276OnDio1Irq+0x194>)
 8018294:	2101      	movs	r1, #1
 8018296:	0018      	movs	r0, r3
 8018298:	f7ff fc86 	bl	8017ba8 <SX1276ReadFifo>
 801829c:	e006      	b.n	80182ac <SX1276OnDio1Irq+0x60>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 801829e:	2032      	movs	r0, #50	; 0x32
 80182a0:	f7ff fbba 	bl	8017a18 <SX1276Read>
 80182a4:	0003      	movs	r3, r0
 80182a6:	b29a      	uxth	r2, r3
 80182a8:	4b4c      	ldr	r3, [pc, #304]	; (80183dc <SX1276OnDio1Irq+0x190>)
 80182aa:	875a      	strh	r2, [r3, #58]	; 0x3a
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) >= SX1276.Settings.FskPacketHandler.FifoThresh )
 80182ac:	4b4b      	ldr	r3, [pc, #300]	; (80183dc <SX1276OnDio1Irq+0x190>)
 80182ae:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80182b0:	001a      	movs	r2, r3
 80182b2:	4b4a      	ldr	r3, [pc, #296]	; (80183dc <SX1276OnDio1Irq+0x190>)
 80182b4:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80182b6:	1ad3      	subs	r3, r2, r3
 80182b8:	4a48      	ldr	r2, [pc, #288]	; (80183dc <SX1276OnDio1Irq+0x190>)
 80182ba:	213e      	movs	r1, #62	; 0x3e
 80182bc:	5c52      	ldrb	r2, [r2, r1]
 80182be:	4293      	cmp	r3, r2
 80182c0:	db19      	blt.n	80182f6 <SX1276OnDio1Irq+0xaa>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh - 1 );
 80182c2:	4b46      	ldr	r3, [pc, #280]	; (80183dc <SX1276OnDio1Irq+0x190>)
 80182c4:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80182c6:	001a      	movs	r2, r3
 80182c8:	4b46      	ldr	r3, [pc, #280]	; (80183e4 <SX1276OnDio1Irq+0x198>)
 80182ca:	18d0      	adds	r0, r2, r3
 80182cc:	4b43      	ldr	r3, [pc, #268]	; (80183dc <SX1276OnDio1Irq+0x190>)
 80182ce:	223e      	movs	r2, #62	; 0x3e
 80182d0:	5c9b      	ldrb	r3, [r3, r2]
 80182d2:	3b01      	subs	r3, #1
 80182d4:	b2db      	uxtb	r3, r3
 80182d6:	0019      	movs	r1, r3
 80182d8:	f7ff fc66 	bl	8017ba8 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.FifoThresh - 1;
 80182dc:	4b3f      	ldr	r3, [pc, #252]	; (80183dc <SX1276OnDio1Irq+0x190>)
 80182de:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 80182e0:	4b3e      	ldr	r3, [pc, #248]	; (80183dc <SX1276OnDio1Irq+0x190>)
 80182e2:	213e      	movs	r1, #62	; 0x3e
 80182e4:	5c5b      	ldrb	r3, [r3, r1]
 80182e6:	b29b      	uxth	r3, r3
 80182e8:	18d3      	adds	r3, r2, r3
 80182ea:	b29b      	uxth	r3, r3
 80182ec:	3b01      	subs	r3, #1
 80182ee:	b29a      	uxth	r2, r3
 80182f0:	4b3a      	ldr	r3, [pc, #232]	; (80183dc <SX1276OnDio1Irq+0x190>)
 80182f2:	879a      	strh	r2, [r3, #60]	; 0x3c
                break;
 80182f4:	e02d      	b.n	8018352 <SX1276OnDio1Irq+0x106>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 80182f6:	4b39      	ldr	r3, [pc, #228]	; (80183dc <SX1276OnDio1Irq+0x190>)
 80182f8:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80182fa:	001a      	movs	r2, r3
 80182fc:	4b39      	ldr	r3, [pc, #228]	; (80183e4 <SX1276OnDio1Irq+0x198>)
 80182fe:	18d0      	adds	r0, r2, r3
 8018300:	4b36      	ldr	r3, [pc, #216]	; (80183dc <SX1276OnDio1Irq+0x190>)
 8018302:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8018304:	b2da      	uxtb	r2, r3
 8018306:	4b35      	ldr	r3, [pc, #212]	; (80183dc <SX1276OnDio1Irq+0x190>)
 8018308:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801830a:	b2db      	uxtb	r3, r3
 801830c:	1ad3      	subs	r3, r2, r3
 801830e:	b2db      	uxtb	r3, r3
 8018310:	0019      	movs	r1, r3
 8018312:	f7ff fc49 	bl	8017ba8 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8018316:	4b31      	ldr	r3, [pc, #196]	; (80183dc <SX1276OnDio1Irq+0x190>)
 8018318:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 801831a:	4b30      	ldr	r3, [pc, #192]	; (80183dc <SX1276OnDio1Irq+0x190>)
 801831c:	879a      	strh	r2, [r3, #60]	; 0x3c
                break;
 801831e:	e018      	b.n	8018352 <SX1276OnDio1Irq+0x106>
                TimerStop( &RxTimeoutTimer );
 8018320:	4b31      	ldr	r3, [pc, #196]	; (80183e8 <SX1276OnDio1Irq+0x19c>)
 8018322:	0018      	movs	r0, r3
 8018324:	f7fd fad4 	bl	80158d0 <TimerStop>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXTIMEOUT );
 8018328:	2180      	movs	r1, #128	; 0x80
 801832a:	2012      	movs	r0, #18
 801832c:	f7ff fb60 	bl	80179f0 <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 8018330:	4b2a      	ldr	r3, [pc, #168]	; (80183dc <SX1276OnDio1Irq+0x190>)
 8018332:	2200      	movs	r2, #0
 8018334:	711a      	strb	r2, [r3, #4]
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8018336:	4b2d      	ldr	r3, [pc, #180]	; (80183ec <SX1276OnDio1Irq+0x1a0>)
 8018338:	681b      	ldr	r3, [r3, #0]
 801833a:	2b00      	cmp	r3, #0
 801833c:	d008      	beq.n	8018350 <SX1276OnDio1Irq+0x104>
 801833e:	4b2b      	ldr	r3, [pc, #172]	; (80183ec <SX1276OnDio1Irq+0x1a0>)
 8018340:	681b      	ldr	r3, [r3, #0]
 8018342:	68db      	ldr	r3, [r3, #12]
 8018344:	2b00      	cmp	r3, #0
 8018346:	d003      	beq.n	8018350 <SX1276OnDio1Irq+0x104>
                    RadioEvents->RxTimeout( );
 8018348:	4b28      	ldr	r3, [pc, #160]	; (80183ec <SX1276OnDio1Irq+0x1a0>)
 801834a:	681b      	ldr	r3, [r3, #0]
 801834c:	68db      	ldr	r3, [r3, #12]
 801834e:	4798      	blx	r3
                break;
 8018350:	46c0      	nop			; (mov r8, r8)
            break;
 8018352:	e03e      	b.n	80183d2 <SX1276OnDio1Irq+0x186>
            switch( SX1276.Settings.Modem )
 8018354:	4b21      	ldr	r3, [pc, #132]	; (80183dc <SX1276OnDio1Irq+0x190>)
 8018356:	795b      	ldrb	r3, [r3, #5]
 8018358:	2b00      	cmp	r3, #0
 801835a:	d002      	beq.n	8018362 <SX1276OnDio1Irq+0x116>
 801835c:	2b01      	cmp	r3, #1
 801835e:	d036      	beq.n	80183ce <SX1276OnDio1Irq+0x182>
                break;
 8018360:	e036      	b.n	80183d0 <SX1276OnDio1Irq+0x184>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
 8018362:	4b1e      	ldr	r3, [pc, #120]	; (80183dc <SX1276OnDio1Irq+0x190>)
 8018364:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8018366:	001a      	movs	r2, r3
 8018368:	4b1c      	ldr	r3, [pc, #112]	; (80183dc <SX1276OnDio1Irq+0x190>)
 801836a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801836c:	1ad3      	subs	r3, r2, r3
 801836e:	4a1b      	ldr	r2, [pc, #108]	; (80183dc <SX1276OnDio1Irq+0x190>)
 8018370:	213f      	movs	r1, #63	; 0x3f
 8018372:	5c52      	ldrb	r2, [r2, r1]
 8018374:	4293      	cmp	r3, r2
 8018376:	dd15      	ble.n	80183a4 <SX1276OnDio1Irq+0x158>
                    SX1276WriteFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.ChunkSize );
 8018378:	4b18      	ldr	r3, [pc, #96]	; (80183dc <SX1276OnDio1Irq+0x190>)
 801837a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801837c:	001a      	movs	r2, r3
 801837e:	4b19      	ldr	r3, [pc, #100]	; (80183e4 <SX1276OnDio1Irq+0x198>)
 8018380:	18d0      	adds	r0, r2, r3
 8018382:	4b16      	ldr	r3, [pc, #88]	; (80183dc <SX1276OnDio1Irq+0x190>)
 8018384:	223f      	movs	r2, #63	; 0x3f
 8018386:	5c9b      	ldrb	r3, [r3, r2]
 8018388:	0019      	movs	r1, r3
 801838a:	f7ff fbfb 	bl	8017b84 <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 801838e:	4b13      	ldr	r3, [pc, #76]	; (80183dc <SX1276OnDio1Irq+0x190>)
 8018390:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 8018392:	4b12      	ldr	r3, [pc, #72]	; (80183dc <SX1276OnDio1Irq+0x190>)
 8018394:	213f      	movs	r1, #63	; 0x3f
 8018396:	5c5b      	ldrb	r3, [r3, r1]
 8018398:	b29b      	uxth	r3, r3
 801839a:	18d3      	adds	r3, r2, r3
 801839c:	b29a      	uxth	r2, r3
 801839e:	4b0f      	ldr	r3, [pc, #60]	; (80183dc <SX1276OnDio1Irq+0x190>)
 80183a0:	879a      	strh	r2, [r3, #60]	; 0x3c
                break;
 80183a2:	e015      	b.n	80183d0 <SX1276OnDio1Irq+0x184>
                    SX1276WriteFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 80183a4:	4b0d      	ldr	r3, [pc, #52]	; (80183dc <SX1276OnDio1Irq+0x190>)
 80183a6:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80183a8:	001a      	movs	r2, r3
 80183aa:	4b0e      	ldr	r3, [pc, #56]	; (80183e4 <SX1276OnDio1Irq+0x198>)
 80183ac:	18d0      	adds	r0, r2, r3
 80183ae:	4b0b      	ldr	r3, [pc, #44]	; (80183dc <SX1276OnDio1Irq+0x190>)
 80183b0:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80183b2:	b2da      	uxtb	r2, r3
 80183b4:	4b09      	ldr	r3, [pc, #36]	; (80183dc <SX1276OnDio1Irq+0x190>)
 80183b6:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80183b8:	b2db      	uxtb	r3, r3
 80183ba:	1ad3      	subs	r3, r2, r3
 80183bc:	b2db      	uxtb	r3, r3
 80183be:	0019      	movs	r1, r3
 80183c0:	f7ff fbe0 	bl	8017b84 <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
 80183c4:	4b05      	ldr	r3, [pc, #20]	; (80183dc <SX1276OnDio1Irq+0x190>)
 80183c6:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 80183c8:	4b04      	ldr	r3, [pc, #16]	; (80183dc <SX1276OnDio1Irq+0x190>)
 80183ca:	879a      	strh	r2, [r3, #60]	; 0x3c
                break;
 80183cc:	e000      	b.n	80183d0 <SX1276OnDio1Irq+0x184>
                break;
 80183ce:	46c0      	nop			; (mov r8, r8)
            break;
 80183d0:	46c0      	nop			; (mov r8, r8)
    }
}
 80183d2:	46c0      	nop			; (mov r8, r8)
 80183d4:	46bd      	mov	sp, r7
 80183d6:	b002      	add	sp, #8
 80183d8:	bd80      	pop	{r7, pc}
 80183da:	46c0      	nop			; (mov r8, r8)
 80183dc:	200015ec 	.word	0x200015ec
 80183e0:	20001626 	.word	0x20001626
 80183e4:	200010a0 	.word	0x200010a0
 80183e8:	20001654 	.word	0x20001654
 80183ec:	2000109c 	.word	0x2000109c

080183f0 <SX1276OnDio2Irq>:

void SX1276OnDio2Irq( void* context )
{
 80183f0:	b590      	push	{r4, r7, lr}
 80183f2:	b087      	sub	sp, #28
 80183f4:	af00      	add	r7, sp, #0
 80183f6:	6078      	str	r0, [r7, #4]
	LOG_INFO_SX1276((">> SX1276OnDio2Irq\r\n"));

    uint32_t afcChannel = 0;
 80183f8:	2300      	movs	r3, #0
 80183fa:	617b      	str	r3, [r7, #20]

    switch( SX1276.Settings.State )
 80183fc:	4b5c      	ldr	r3, [pc, #368]	; (8018570 <SX1276OnDio2Irq+0x180>)
 80183fe:	791b      	ldrb	r3, [r3, #4]
 8018400:	2b01      	cmp	r3, #1
 8018402:	d003      	beq.n	801840c <SX1276OnDio2Irq+0x1c>
 8018404:	2b02      	cmp	r3, #2
 8018406:	d100      	bne.n	801840a <SX1276OnDio2Irq+0x1a>
 8018408:	e083      	b.n	8018512 <SX1276OnDio2Irq+0x122>
            default:
                break;
            }
            break;
        default:
            break;
 801840a:	e0ad      	b.n	8018568 <SX1276OnDio2Irq+0x178>
            switch( SX1276.Settings.Modem )
 801840c:	4b58      	ldr	r3, [pc, #352]	; (8018570 <SX1276OnDio2Irq+0x180>)
 801840e:	795b      	ldrb	r3, [r3, #5]
 8018410:	2b00      	cmp	r3, #0
 8018412:	d002      	beq.n	801841a <SX1276OnDio2Irq+0x2a>
 8018414:	2b01      	cmp	r3, #1
 8018416:	d058      	beq.n	80184ca <SX1276OnDio2Irq+0xda>
                break;
 8018418:	e07a      	b.n	8018510 <SX1276OnDio2Irq+0x120>
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 801841a:	4b55      	ldr	r3, [pc, #340]	; (8018570 <SX1276OnDio2Irq+0x180>)
 801841c:	2230      	movs	r2, #48	; 0x30
 801841e:	2101      	movs	r1, #1
 8018420:	5499      	strb	r1, [r3, r2]
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected == true ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == false ) )
 8018422:	4b53      	ldr	r3, [pc, #332]	; (8018570 <SX1276OnDio2Irq+0x180>)
 8018424:	2230      	movs	r2, #48	; 0x30
 8018426:	5c9b      	ldrb	r3, [r3, r2]
 8018428:	2b01      	cmp	r3, #1
 801842a:	d16e      	bne.n	801850a <SX1276OnDio2Irq+0x11a>
 801842c:	4b50      	ldr	r3, [pc, #320]	; (8018570 <SX1276OnDio2Irq+0x180>)
 801842e:	2231      	movs	r2, #49	; 0x31
 8018430:	5c9b      	ldrb	r3, [r3, r2]
 8018432:	2b00      	cmp	r3, #0
 8018434:	d169      	bne.n	801850a <SX1276OnDio2Irq+0x11a>
                    TimerStop( &RxTimeoutSyncWord );
 8018436:	4b4f      	ldr	r3, [pc, #316]	; (8018574 <SX1276OnDio2Irq+0x184>)
 8018438:	0018      	movs	r0, r3
 801843a:	f7fd fa49 	bl	80158d0 <TimerStop>
                    SX1276.Settings.FskPacketHandler.SyncWordDetected = true;
 801843e:	4b4c      	ldr	r3, [pc, #304]	; (8018570 <SX1276OnDio2Irq+0x180>)
 8018440:	2231      	movs	r2, #49	; 0x31
 8018442:	2101      	movs	r1, #1
 8018444:	5499      	strb	r1, [r3, r2]
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 8018446:	2011      	movs	r0, #17
 8018448:	f7ff fae6 	bl	8017a18 <SX1276Read>
 801844c:	0003      	movs	r3, r0
 801844e:	085b      	lsrs	r3, r3, #1
 8018450:	b2db      	uxtb	r3, r3
 8018452:	425b      	negs	r3, r3
 8018454:	b2db      	uxtb	r3, r3
 8018456:	b259      	sxtb	r1, r3
 8018458:	4b45      	ldr	r3, [pc, #276]	; (8018570 <SX1276OnDio2Irq+0x180>)
 801845a:	2232      	movs	r2, #50	; 0x32
 801845c:	5499      	strb	r1, [r3, r2]
                    afcChannel = ( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 801845e:	201b      	movs	r0, #27
 8018460:	f7ff fada 	bl	8017a18 <SX1276Read>
 8018464:	0003      	movs	r3, r0
 8018466:	021c      	lsls	r4, r3, #8
                                     ( uint16_t )SX1276Read( REG_AFCLSB ) );
 8018468:	201c      	movs	r0, #28
 801846a:	f7ff fad5 	bl	8017a18 <SX1276Read>
 801846e:	0003      	movs	r3, r0
                    afcChannel = ( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 8018470:	4323      	orrs	r3, r4
 8018472:	617b      	str	r3, [r7, #20]
                    SX_CHANNEL_TO_FREQ( afcChannel, SX1276.Settings.FskPacketHandler.AfcValue );
 8018474:	697b      	ldr	r3, [r7, #20]
 8018476:	0a1b      	lsrs	r3, r3, #8
 8018478:	613b      	str	r3, [r7, #16]
 801847a:	693b      	ldr	r3, [r7, #16]
 801847c:	021b      	lsls	r3, r3, #8
 801847e:	697a      	ldr	r2, [r7, #20]
 8018480:	1ad3      	subs	r3, r2, r3
 8018482:	60fb      	str	r3, [r7, #12]
 8018484:	6939      	ldr	r1, [r7, #16]
 8018486:	000b      	movs	r3, r1
 8018488:	015b      	lsls	r3, r3, #5
 801848a:	1a5b      	subs	r3, r3, r1
 801848c:	019a      	lsls	r2, r3, #6
 801848e:	1ad2      	subs	r2, r2, r3
 8018490:	00d2      	lsls	r2, r2, #3
 8018492:	1850      	adds	r0, r2, r1
 8018494:	68f9      	ldr	r1, [r7, #12]
 8018496:	000b      	movs	r3, r1
 8018498:	015b      	lsls	r3, r3, #5
 801849a:	1a5b      	subs	r3, r3, r1
 801849c:	019a      	lsls	r2, r3, #6
 801849e:	1ad2      	subs	r2, r2, r3
 80184a0:	00d2      	lsls	r2, r2, #3
 80184a2:	1853      	adds	r3, r2, r1
 80184a4:	3380      	adds	r3, #128	; 0x80
 80184a6:	0a1b      	lsrs	r3, r3, #8
 80184a8:	18c3      	adds	r3, r0, r3
 80184aa:	001a      	movs	r2, r3
 80184ac:	4b30      	ldr	r3, [pc, #192]	; (8018570 <SX1276OnDio2Irq+0x180>)
 80184ae:	635a      	str	r2, [r3, #52]	; 0x34
                    SX1276.Settings.FskPacketHandler.RxGain = ( SX1276Read( REG_LNA ) >> 5 ) & 0x07;
 80184b0:	200c      	movs	r0, #12
 80184b2:	f7ff fab1 	bl	8017a18 <SX1276Read>
 80184b6:	0003      	movs	r3, r0
 80184b8:	095b      	lsrs	r3, r3, #5
 80184ba:	b2db      	uxtb	r3, r3
 80184bc:	2207      	movs	r2, #7
 80184be:	4013      	ands	r3, r2
 80184c0:	b2d9      	uxtb	r1, r3
 80184c2:	4b2b      	ldr	r3, [pc, #172]	; (8018570 <SX1276OnDio2Irq+0x180>)
 80184c4:	2238      	movs	r2, #56	; 0x38
 80184c6:	5499      	strb	r1, [r3, r2]
                break;
 80184c8:	e01f      	b.n	801850a <SX1276OnDio2Irq+0x11a>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 80184ca:	4b29      	ldr	r3, [pc, #164]	; (8018570 <SX1276OnDio2Irq+0x180>)
 80184cc:	2253      	movs	r2, #83	; 0x53
 80184ce:	5c9b      	ldrb	r3, [r3, r2]
 80184d0:	2b00      	cmp	r3, #0
 80184d2:	d01c      	beq.n	801850e <SX1276OnDio2Irq+0x11e>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 80184d4:	2102      	movs	r1, #2
 80184d6:	2012      	movs	r0, #18
 80184d8:	f7ff fa8a 	bl	80179f0 <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 80184dc:	4b26      	ldr	r3, [pc, #152]	; (8018578 <SX1276OnDio2Irq+0x188>)
 80184de:	681b      	ldr	r3, [r3, #0]
 80184e0:	2b00      	cmp	r3, #0
 80184e2:	d014      	beq.n	801850e <SX1276OnDio2Irq+0x11e>
 80184e4:	4b24      	ldr	r3, [pc, #144]	; (8018578 <SX1276OnDio2Irq+0x188>)
 80184e6:	681b      	ldr	r3, [r3, #0]
 80184e8:	695b      	ldr	r3, [r3, #20]
 80184ea:	2b00      	cmp	r3, #0
 80184ec:	d00f      	beq.n	801850e <SX1276OnDio2Irq+0x11e>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 80184ee:	4b22      	ldr	r3, [pc, #136]	; (8018578 <SX1276OnDio2Irq+0x188>)
 80184f0:	681b      	ldr	r3, [r3, #0]
 80184f2:	695c      	ldr	r4, [r3, #20]
 80184f4:	201c      	movs	r0, #28
 80184f6:	f7ff fa8f 	bl	8017a18 <SX1276Read>
 80184fa:	0003      	movs	r3, r0
 80184fc:	001a      	movs	r2, r3
 80184fe:	233f      	movs	r3, #63	; 0x3f
 8018500:	4013      	ands	r3, r2
 8018502:	b2db      	uxtb	r3, r3
 8018504:	0018      	movs	r0, r3
 8018506:	47a0      	blx	r4
                break;
 8018508:	e001      	b.n	801850e <SX1276OnDio2Irq+0x11e>
                break;
 801850a:	46c0      	nop			; (mov r8, r8)
 801850c:	e02c      	b.n	8018568 <SX1276OnDio2Irq+0x178>
                break;
 801850e:	46c0      	nop			; (mov r8, r8)
            break;
 8018510:	e02a      	b.n	8018568 <SX1276OnDio2Irq+0x178>
            switch( SX1276.Settings.Modem )
 8018512:	4b17      	ldr	r3, [pc, #92]	; (8018570 <SX1276OnDio2Irq+0x180>)
 8018514:	795b      	ldrb	r3, [r3, #5]
 8018516:	2b00      	cmp	r3, #0
 8018518:	d022      	beq.n	8018560 <SX1276OnDio2Irq+0x170>
 801851a:	2b01      	cmp	r3, #1
 801851c:	d000      	beq.n	8018520 <SX1276OnDio2Irq+0x130>
                break;
 801851e:	e022      	b.n	8018566 <SX1276OnDio2Irq+0x176>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 8018520:	4b13      	ldr	r3, [pc, #76]	; (8018570 <SX1276OnDio2Irq+0x180>)
 8018522:	2253      	movs	r2, #83	; 0x53
 8018524:	5c9b      	ldrb	r3, [r3, r2]
 8018526:	2b00      	cmp	r3, #0
 8018528:	d01c      	beq.n	8018564 <SX1276OnDio2Irq+0x174>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 801852a:	2102      	movs	r1, #2
 801852c:	2012      	movs	r0, #18
 801852e:	f7ff fa5f 	bl	80179f0 <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 8018532:	4b11      	ldr	r3, [pc, #68]	; (8018578 <SX1276OnDio2Irq+0x188>)
 8018534:	681b      	ldr	r3, [r3, #0]
 8018536:	2b00      	cmp	r3, #0
 8018538:	d014      	beq.n	8018564 <SX1276OnDio2Irq+0x174>
 801853a:	4b0f      	ldr	r3, [pc, #60]	; (8018578 <SX1276OnDio2Irq+0x188>)
 801853c:	681b      	ldr	r3, [r3, #0]
 801853e:	695b      	ldr	r3, [r3, #20]
 8018540:	2b00      	cmp	r3, #0
 8018542:	d00f      	beq.n	8018564 <SX1276OnDio2Irq+0x174>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 8018544:	4b0c      	ldr	r3, [pc, #48]	; (8018578 <SX1276OnDio2Irq+0x188>)
 8018546:	681b      	ldr	r3, [r3, #0]
 8018548:	695c      	ldr	r4, [r3, #20]
 801854a:	201c      	movs	r0, #28
 801854c:	f7ff fa64 	bl	8017a18 <SX1276Read>
 8018550:	0003      	movs	r3, r0
 8018552:	001a      	movs	r2, r3
 8018554:	233f      	movs	r3, #63	; 0x3f
 8018556:	4013      	ands	r3, r2
 8018558:	b2db      	uxtb	r3, r3
 801855a:	0018      	movs	r0, r3
 801855c:	47a0      	blx	r4
                break;
 801855e:	e001      	b.n	8018564 <SX1276OnDio2Irq+0x174>
                break;
 8018560:	46c0      	nop			; (mov r8, r8)
 8018562:	e000      	b.n	8018566 <SX1276OnDio2Irq+0x176>
                break;
 8018564:	46c0      	nop			; (mov r8, r8)
            break;
 8018566:	46c0      	nop			; (mov r8, r8)
    }
}
 8018568:	46c0      	nop			; (mov r8, r8)
 801856a:	46bd      	mov	sp, r7
 801856c:	b007      	add	sp, #28
 801856e:	bd90      	pop	{r4, r7, pc}
 8018570:	200015ec 	.word	0x200015ec
 8018574:	200015d4 	.word	0x200015d4
 8018578:	2000109c 	.word	0x2000109c

0801857c <SX1276OnDio3Irq>:

void SX1276OnDio3Irq( void* context )
{
 801857c:	b580      	push	{r7, lr}
 801857e:	b082      	sub	sp, #8
 8018580:	af00      	add	r7, sp, #0
 8018582:	6078      	str	r0, [r7, #4]
	LOG_INFO_SX1276((">> SX1276OnDio3Irq\r\n"));

    switch( SX1276.Settings.Modem )
 8018584:	4b1e      	ldr	r3, [pc, #120]	; (8018600 <SX1276OnDio3Irq+0x84>)
 8018586:	795b      	ldrb	r3, [r3, #5]
 8018588:	2b00      	cmp	r3, #0
 801858a:	d031      	beq.n	80185f0 <SX1276OnDio3Irq+0x74>
 801858c:	2b01      	cmp	r3, #1
 801858e:	d000      	beq.n	8018592 <SX1276OnDio3Irq+0x16>
                RadioEvents->CadDone( false );
            }
        }
        break;
    default:
        break;
 8018590:	e031      	b.n	80185f6 <SX1276OnDio3Irq+0x7a>
        if( ( SX1276Read( REG_LR_IRQFLAGS ) & RFLR_IRQFLAGS_CADDETECTED ) == RFLR_IRQFLAGS_CADDETECTED )
 8018592:	2012      	movs	r0, #18
 8018594:	f7ff fa40 	bl	8017a18 <SX1276Read>
 8018598:	0003      	movs	r3, r0
 801859a:	001a      	movs	r2, r3
 801859c:	2301      	movs	r3, #1
 801859e:	4013      	ands	r3, r2
 80185a0:	2b01      	cmp	r3, #1
 80185a2:	d112      	bne.n	80185ca <SX1276OnDio3Irq+0x4e>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDETECTED | RFLR_IRQFLAGS_CADDONE );
 80185a4:	2105      	movs	r1, #5
 80185a6:	2012      	movs	r0, #18
 80185a8:	f7ff fa22 	bl	80179f0 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 80185ac:	4b15      	ldr	r3, [pc, #84]	; (8018604 <SX1276OnDio3Irq+0x88>)
 80185ae:	681b      	ldr	r3, [r3, #0]
 80185b0:	2b00      	cmp	r3, #0
 80185b2:	d01f      	beq.n	80185f4 <SX1276OnDio3Irq+0x78>
 80185b4:	4b13      	ldr	r3, [pc, #76]	; (8018604 <SX1276OnDio3Irq+0x88>)
 80185b6:	681b      	ldr	r3, [r3, #0]
 80185b8:	699b      	ldr	r3, [r3, #24]
 80185ba:	2b00      	cmp	r3, #0
 80185bc:	d01a      	beq.n	80185f4 <SX1276OnDio3Irq+0x78>
                RadioEvents->CadDone( true );
 80185be:	4b11      	ldr	r3, [pc, #68]	; (8018604 <SX1276OnDio3Irq+0x88>)
 80185c0:	681b      	ldr	r3, [r3, #0]
 80185c2:	699b      	ldr	r3, [r3, #24]
 80185c4:	2001      	movs	r0, #1
 80185c6:	4798      	blx	r3
        break;
 80185c8:	e014      	b.n	80185f4 <SX1276OnDio3Irq+0x78>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDONE );
 80185ca:	2104      	movs	r1, #4
 80185cc:	2012      	movs	r0, #18
 80185ce:	f7ff fa0f 	bl	80179f0 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 80185d2:	4b0c      	ldr	r3, [pc, #48]	; (8018604 <SX1276OnDio3Irq+0x88>)
 80185d4:	681b      	ldr	r3, [r3, #0]
 80185d6:	2b00      	cmp	r3, #0
 80185d8:	d00c      	beq.n	80185f4 <SX1276OnDio3Irq+0x78>
 80185da:	4b0a      	ldr	r3, [pc, #40]	; (8018604 <SX1276OnDio3Irq+0x88>)
 80185dc:	681b      	ldr	r3, [r3, #0]
 80185de:	699b      	ldr	r3, [r3, #24]
 80185e0:	2b00      	cmp	r3, #0
 80185e2:	d007      	beq.n	80185f4 <SX1276OnDio3Irq+0x78>
                RadioEvents->CadDone( false );
 80185e4:	4b07      	ldr	r3, [pc, #28]	; (8018604 <SX1276OnDio3Irq+0x88>)
 80185e6:	681b      	ldr	r3, [r3, #0]
 80185e8:	699b      	ldr	r3, [r3, #24]
 80185ea:	2000      	movs	r0, #0
 80185ec:	4798      	blx	r3
        break;
 80185ee:	e001      	b.n	80185f4 <SX1276OnDio3Irq+0x78>
        break;
 80185f0:	46c0      	nop			; (mov r8, r8)
 80185f2:	e000      	b.n	80185f6 <SX1276OnDio3Irq+0x7a>
        break;
 80185f4:	46c0      	nop			; (mov r8, r8)
    }
}
 80185f6:	46c0      	nop			; (mov r8, r8)
 80185f8:	46bd      	mov	sp, r7
 80185fa:	b002      	add	sp, #8
 80185fc:	bd80      	pop	{r7, pc}
 80185fe:	46c0      	nop			; (mov r8, r8)
 8018600:	200015ec 	.word	0x200015ec
 8018604:	2000109c 	.word	0x2000109c

08018608 <SX1276OnDio4Irq>:

void SX1276OnDio4Irq( void* context )
{
 8018608:	b580      	push	{r7, lr}
 801860a:	b082      	sub	sp, #8
 801860c:	af00      	add	r7, sp, #0
 801860e:	6078      	str	r0, [r7, #4]
	LOG_INFO_SX1276((">> SX1276OnDio4Irq\r\n"));

    switch( SX1276.Settings.Modem )
 8018610:	4b0b      	ldr	r3, [pc, #44]	; (8018640 <SX1276OnDio4Irq+0x38>)
 8018612:	795b      	ldrb	r3, [r3, #5]
 8018614:	2b00      	cmp	r3, #0
 8018616:	d002      	beq.n	801861e <SX1276OnDio4Irq+0x16>
 8018618:	2b01      	cmp	r3, #1
 801861a:	d00a      	beq.n	8018632 <SX1276OnDio4Irq+0x2a>
        }
        break;
    case MODEM_LORA:
        break;
    default:
        break;
 801861c:	e00c      	b.n	8018638 <SX1276OnDio4Irq+0x30>
            if( SX1276.Settings.FskPacketHandler.PreambleDetected == false )
 801861e:	4b08      	ldr	r3, [pc, #32]	; (8018640 <SX1276OnDio4Irq+0x38>)
 8018620:	2230      	movs	r2, #48	; 0x30
 8018622:	5c9b      	ldrb	r3, [r3, r2]
 8018624:	2b00      	cmp	r3, #0
 8018626:	d106      	bne.n	8018636 <SX1276OnDio4Irq+0x2e>
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 8018628:	4b05      	ldr	r3, [pc, #20]	; (8018640 <SX1276OnDio4Irq+0x38>)
 801862a:	2230      	movs	r2, #48	; 0x30
 801862c:	2101      	movs	r1, #1
 801862e:	5499      	strb	r1, [r3, r2]
        break;
 8018630:	e001      	b.n	8018636 <SX1276OnDio4Irq+0x2e>
        break;
 8018632:	46c0      	nop			; (mov r8, r8)
 8018634:	e000      	b.n	8018638 <SX1276OnDio4Irq+0x30>
        break;
 8018636:	46c0      	nop			; (mov r8, r8)
    }
}
 8018638:	46c0      	nop			; (mov r8, r8)
 801863a:	46bd      	mov	sp, r7
 801863c:	b002      	add	sp, #8
 801863e:	bd80      	pop	{r7, pc}
 8018640:	200015ec 	.word	0x200015ec

08018644 <_itsdk_console_private>:

/**
 * Dafault Operation
 */

static itsdk_console_return_e _itsdk_console_private(char * buffer, uint8_t sz) {
 8018644:	b5b0      	push	{r4, r5, r7, lr}
 8018646:	b084      	sub	sp, #16
 8018648:	af00      	add	r7, sp, #0
 801864a:	6078      	str	r0, [r7, #4]
 801864c:	000a      	movs	r2, r1
 801864e:	1cfb      	adds	r3, r7, #3
 8018650:	701a      	strb	r2, [r3, #0]

	if ( sz == 1 ) {
 8018652:	1cfb      	adds	r3, r7, #3
 8018654:	781b      	ldrb	r3, [r3, #0]
 8018656:	2b01      	cmp	r3, #1
 8018658:	d000      	beq.n	801865c <_itsdk_console_private+0x18>
 801865a:	e0d1      	b.n	8018800 <_itsdk_console_private+0x1bc>
		switch ( buffer[0] ) {
 801865c:	687b      	ldr	r3, [r7, #4]
 801865e:	781b      	ldrb	r3, [r3, #0]
 8018660:	3b3f      	subs	r3, #63	; 0x3f
 8018662:	2b35      	cmp	r3, #53	; 0x35
 8018664:	d900      	bls.n	8018668 <_itsdk_console_private+0x24>
 8018666:	e0e5      	b.n	8018834 <_itsdk_console_private+0x1f0>
 8018668:	009a      	lsls	r2, r3, #2
 801866a:	4b78      	ldr	r3, [pc, #480]	; (801884c <_itsdk_console_private+0x208>)
 801866c:	18d3      	adds	r3, r2, r3
 801866e:	681b      	ldr	r3, [r3, #0]
 8018670:	469f      	mov	pc, r3
		case '?':
			// help
			_itsdk_console_printf("X          : exit console\r\n");
 8018672:	4b77      	ldr	r3, [pc, #476]	; (8018850 <_itsdk_console_private+0x20c>)
 8018674:	0018      	movs	r0, r3
 8018676:	f000 fa0f 	bl	8018a98 <_itsdk_console_printf>
			_itsdk_console_printf("R          : reset device\r\n");
 801867a:	4b76      	ldr	r3, [pc, #472]	; (8018854 <_itsdk_console_private+0x210>)
 801867c:	0018      	movs	r0, r3
 801867e:	f000 fa0b 	bl	8018a98 <_itsdk_console_printf>
			_itsdk_console_printf("R!         : clear the whole eeprom\r\n");
 8018682:	4b75      	ldr	r3, [pc, #468]	; (8018858 <_itsdk_console_private+0x214>)
 8018684:	0018      	movs	r0, r3
 8018686:	f000 fa07 	bl	8018a98 <_itsdk_console_printf>
			_itsdk_console_printf("l / L      : switch LowPower ON / OFF\r\n");
 801868a:	4b74      	ldr	r3, [pc, #464]	; (801885c <_itsdk_console_private+0x218>)
 801868c:	0018      	movs	r0, r3
 801868e:	f000 fa03 	bl	8018a98 <_itsdk_console_printf>
			_itsdk_console_printf("s          : print device state\r\n");
 8018692:	4b73      	ldr	r3, [pc, #460]	; (8018860 <_itsdk_console_private+0x21c>)
 8018694:	0018      	movs	r0, r3
 8018696:	f000 f9ff 	bl	8018a98 <_itsdk_console_printf>
			_itsdk_console_printf("t          : print current time in S\r\n");
 801869a:	4b72      	ldr	r3, [pc, #456]	; (8018864 <_itsdk_console_private+0x220>)
 801869c:	0018      	movs	r0, r3
 801869e:	f000 f9fb 	bl	8018a98 <_itsdk_console_printf>
#if ITSDK_WITH_ADC != __ADC_NONE
			_itsdk_console_printf("T          : print current cpu temperature in oC\r\n");
 80186a2:	4b71      	ldr	r3, [pc, #452]	; (8018868 <_itsdk_console_private+0x224>)
 80186a4:	0018      	movs	r0, r3
 80186a6:	f000 f9f7 	bl	8018a98 <_itsdk_console_printf>
			_itsdk_console_printf("b          : print battery level\r\n");
 80186aa:	4b70      	ldr	r3, [pc, #448]	; (801886c <_itsdk_console_private+0x228>)
 80186ac:	0018      	movs	r0, r3
 80186ae:	f000 f9f3 	bl	8018a98 <_itsdk_console_printf>
			_itsdk_console_printf("B          : print VCC level\r\n");
 80186b2:	4b6f      	ldr	r3, [pc, #444]	; (8018870 <_itsdk_console_private+0x22c>)
 80186b4:	0018      	movs	r0, r3
 80186b6:	f000 f9ef 	bl	8018a98 <_itsdk_console_printf>
#endif
			_itsdk_console_printf("r          : print last Reset Cause\r\n");
 80186ba:	4b6e      	ldr	r3, [pc, #440]	; (8018874 <_itsdk_console_private+0x230>)
 80186bc:	0018      	movs	r0, r3
 80186be:	f000 f9eb 	bl	8018a98 <_itsdk_console_printf>
#if ITSDK_RADIO_CERTIF == __ENABLE && (ITSDK_WITH_SIGFOX_LIB == __ENABLE || ITSDK_WITH_LORAWAN_LIB == __ENABLE )
			_itsdk_console_printf("c:0:nnn    : CW for CE tests with power\r\n");
			_itsdk_console_printf("c:1:nnn    : CW for EU Sigfox tests with power\r\n");
#endif

			return ITSDK_CONSOLE_SUCCES;
 80186c2:	2300      	movs	r3, #0
 80186c4:	e0bd      	b.n	8018842 <_itsdk_console_private+0x1fe>
		case 'X':
			// exit console
			__console.loginState=0;
 80186c6:	4b6c      	ldr	r3, [pc, #432]	; (8018878 <_itsdk_console_private+0x234>)
 80186c8:	781a      	ldrb	r2, [r3, #0]
 80186ca:	2101      	movs	r1, #1
 80186cc:	438a      	bics	r2, r1
 80186ce:	701a      	strb	r2, [r3, #0]
			goto success;
 80186d0:	e0b2      	b.n	8018838 <_itsdk_console_private+0x1f4>
		case 't':
			// print time
			_itsdk_console_printf("Run time is %d s\r\n",(uint32_t)(itsdk_time_get_ms()/1000L));
 80186d2:	f004 fd05 	bl	801d0e0 <itsdk_time_get_ms>
 80186d6:	22fa      	movs	r2, #250	; 0xfa
 80186d8:	0092      	lsls	r2, r2, #2
 80186da:	2300      	movs	r3, #0
 80186dc:	f7e7 fef4 	bl	80004c8 <__aeabi_uldivmod>
 80186e0:	0003      	movs	r3, r0
 80186e2:	000c      	movs	r4, r1
 80186e4:	001a      	movs	r2, r3
 80186e6:	4b65      	ldr	r3, [pc, #404]	; (801887c <_itsdk_console_private+0x238>)
 80186e8:	0011      	movs	r1, r2
 80186ea:	0018      	movs	r0, r3
 80186ec:	f000 f9d4 	bl	8018a98 <_itsdk_console_printf>
			goto success;
 80186f0:	e0a2      	b.n	8018838 <_itsdk_console_private+0x1f4>
#if ITSDK_WITH_ADC != __ADC_NONE
		case 'T':
			// print temperature
			{
			uint16_t t = adc_getTemperature();
 80186f2:	f005 f807 	bl	801d704 <adc_getTemperature>
 80186f6:	0003      	movs	r3, r0
 80186f8:	001a      	movs	r2, r3
 80186fa:	240e      	movs	r4, #14
 80186fc:	193b      	adds	r3, r7, r4
 80186fe:	801a      	strh	r2, [r3, #0]
			_itsdk_console_printf("Temperature is %d.%doC\r\n",t/100,t-((t/100)*100));
 8018700:	193b      	adds	r3, r7, r4
 8018702:	881b      	ldrh	r3, [r3, #0]
 8018704:	2164      	movs	r1, #100	; 0x64
 8018706:	0018      	movs	r0, r3
 8018708:	f7e7 fd06 	bl	8000118 <__udivsi3>
 801870c:	0003      	movs	r3, r0
 801870e:	b29b      	uxth	r3, r3
 8018710:	001d      	movs	r5, r3
 8018712:	0022      	movs	r2, r4
 8018714:	18bb      	adds	r3, r7, r2
 8018716:	881c      	ldrh	r4, [r3, #0]
 8018718:	18bb      	adds	r3, r7, r2
 801871a:	881b      	ldrh	r3, [r3, #0]
 801871c:	2164      	movs	r1, #100	; 0x64
 801871e:	0018      	movs	r0, r3
 8018720:	f7e7 fcfa 	bl	8000118 <__udivsi3>
 8018724:	0003      	movs	r3, r0
 8018726:	b29b      	uxth	r3, r3
 8018728:	001a      	movs	r2, r3
 801872a:	0013      	movs	r3, r2
 801872c:	065b      	lsls	r3, r3, #25
 801872e:	1a9b      	subs	r3, r3, r2
 8018730:	009b      	lsls	r3, r3, #2
 8018732:	189b      	adds	r3, r3, r2
 8018734:	00db      	lsls	r3, r3, #3
 8018736:	1a9b      	subs	r3, r3, r2
 8018738:	009b      	lsls	r3, r3, #2
 801873a:	18e2      	adds	r2, r4, r3
 801873c:	4b50      	ldr	r3, [pc, #320]	; (8018880 <_itsdk_console_private+0x23c>)
 801873e:	0029      	movs	r1, r5
 8018740:	0018      	movs	r0, r3
 8018742:	f000 f9a9 	bl	8018a98 <_itsdk_console_printf>
			goto success;
 8018746:	e077      	b.n	8018838 <_itsdk_console_private+0x1f4>
			}
		case 'b':
			// battery level
			_itsdk_console_printf("Battery level %dmV\r\n",(uint32_t)(adc_getVBat()));
 8018748:	f005 f864 	bl	801d814 <adc_getVBat>
 801874c:	0003      	movs	r3, r0
 801874e:	001a      	movs	r2, r3
 8018750:	4b4c      	ldr	r3, [pc, #304]	; (8018884 <_itsdk_console_private+0x240>)
 8018752:	0011      	movs	r1, r2
 8018754:	0018      	movs	r0, r3
 8018756:	f000 f99f 	bl	8018a98 <_itsdk_console_printf>
			goto success;
 801875a:	e06d      	b.n	8018838 <_itsdk_console_private+0x1f4>
		case 'B':
			// Vcc level
			_itsdk_console_printf("VCC level %dmV\r\n",(uint32_t)(adc_getVdd()));
 801875c:	f005 f82a 	bl	801d7b4 <adc_getVdd>
 8018760:	0003      	movs	r3, r0
 8018762:	001a      	movs	r2, r3
 8018764:	4b48      	ldr	r3, [pc, #288]	; (8018888 <_itsdk_console_private+0x244>)
 8018766:	0011      	movs	r1, r2
 8018768:	0018      	movs	r0, r3
 801876a:	f000 f995 	bl	8018a98 <_itsdk_console_printf>
			goto success;
 801876e:	e063      	b.n	8018838 <_itsdk_console_private+0x1f4>
#endif
		case 'r':
			// Last Reset cause
			_itsdk_console_printf("Reset: ");
 8018770:	4b46      	ldr	r3, [pc, #280]	; (801888c <_itsdk_console_private+0x248>)
 8018772:	0018      	movs	r0, r3
 8018774:	f000 f990 	bl	8018a98 <_itsdk_console_printf>
			switch(itsdk_state.lastResetCause) {
 8018778:	4b45      	ldr	r3, [pc, #276]	; (8018890 <_itsdk_console_private+0x24c>)
 801877a:	781b      	ldrb	r3, [r3, #0]
 801877c:	2b06      	cmp	r3, #6
 801877e:	d827      	bhi.n	80187d0 <_itsdk_console_private+0x18c>
 8018780:	009a      	lsls	r2, r3, #2
 8018782:	4b44      	ldr	r3, [pc, #272]	; (8018894 <_itsdk_console_private+0x250>)
 8018784:	18d3      	adds	r3, r2, r3
 8018786:	681b      	ldr	r3, [r3, #0]
 8018788:	469f      	mov	pc, r3
			case RESET_CAUSE_BOR: _itsdk_console_printf("BOR\r\n"); break;
 801878a:	4b43      	ldr	r3, [pc, #268]	; (8018898 <_itsdk_console_private+0x254>)
 801878c:	0018      	movs	r0, r3
 801878e:	f000 f983 	bl	8018a98 <_itsdk_console_printf>
 8018792:	e022      	b.n	80187da <_itsdk_console_private+0x196>
			case RESET_CAUSE_RESET_PIN: _itsdk_console_printf("RESET PIN\r\n"); break;
 8018794:	4b41      	ldr	r3, [pc, #260]	; (801889c <_itsdk_console_private+0x258>)
 8018796:	0018      	movs	r0, r3
 8018798:	f000 f97e 	bl	8018a98 <_itsdk_console_printf>
 801879c:	e01d      	b.n	80187da <_itsdk_console_private+0x196>
			case RESET_CAUSE_POWER_ON: _itsdk_console_printf("POWER ON\r\n"); break;
 801879e:	4b40      	ldr	r3, [pc, #256]	; (80188a0 <_itsdk_console_private+0x25c>)
 80187a0:	0018      	movs	r0, r3
 80187a2:	f000 f979 	bl	8018a98 <_itsdk_console_printf>
 80187a6:	e018      	b.n	80187da <_itsdk_console_private+0x196>
			case RESET_CAUSE_SOFTWARE: _itsdk_console_printf("SOFT\r\n"); break;
 80187a8:	4b3e      	ldr	r3, [pc, #248]	; (80188a4 <_itsdk_console_private+0x260>)
 80187aa:	0018      	movs	r0, r3
 80187ac:	f000 f974 	bl	8018a98 <_itsdk_console_printf>
 80187b0:	e013      	b.n	80187da <_itsdk_console_private+0x196>
			case RESET_CAUSE_IWDG: _itsdk_console_printf("IWDG\r\n"); break;
 80187b2:	4b3d      	ldr	r3, [pc, #244]	; (80188a8 <_itsdk_console_private+0x264>)
 80187b4:	0018      	movs	r0, r3
 80187b6:	f000 f96f 	bl	8018a98 <_itsdk_console_printf>
 80187ba:	e00e      	b.n	80187da <_itsdk_console_private+0x196>
			case RESET_CAUSE_WWDG: _itsdk_console_printf("WWDG\r\n"); break;
 80187bc:	4b3b      	ldr	r3, [pc, #236]	; (80188ac <_itsdk_console_private+0x268>)
 80187be:	0018      	movs	r0, r3
 80187c0:	f000 f96a 	bl	8018a98 <_itsdk_console_printf>
 80187c4:	e009      	b.n	80187da <_itsdk_console_private+0x196>
			case RESET_CAUSE_LOWPOWER: _itsdk_console_printf("LOW POWER"); break;
 80187c6:	4b3a      	ldr	r3, [pc, #232]	; (80188b0 <_itsdk_console_private+0x26c>)
 80187c8:	0018      	movs	r0, r3
 80187ca:	f000 f965 	bl	8018a98 <_itsdk_console_printf>
 80187ce:	e004      	b.n	80187da <_itsdk_console_private+0x196>
			default:
				_itsdk_console_printf("UNKNOWN\r\n"); break;
 80187d0:	4b38      	ldr	r3, [pc, #224]	; (80188b4 <_itsdk_console_private+0x270>)
 80187d2:	0018      	movs	r0, r3
 80187d4:	f000 f960 	bl	8018a98 <_itsdk_console_printf>
 80187d8:	46c0      	nop			; (mov r8, r8)
			}
			goto success;
 80187da:	e02d      	b.n	8018838 <_itsdk_console_private+0x1f4>
		case 'R':
			// Reset device
			_itsdk_console_printf("OK\r\n");
 80187dc:	4b36      	ldr	r3, [pc, #216]	; (80188b8 <_itsdk_console_private+0x274>)
 80187de:	0018      	movs	r0, r3
 80187e0:	f000 f95a 	bl	8018a98 <_itsdk_console_printf>
			itsdk_reset();
 80187e4:	f005 fcd4 	bl	801e190 <itsdk_reset>
			_itsdk_console_printf("KO\r\n");			// never reached...
 80187e8:	4b34      	ldr	r3, [pc, #208]	; (80188bc <_itsdk_console_private+0x278>)
 80187ea:	0018      	movs	r0, r3
 80187ec:	f000 f954 	bl	8018a98 <_itsdk_console_printf>
			return ITSDK_CONSOLE_FAILED;
 80187f0:	2302      	movs	r3, #2
 80187f2:	e026      	b.n	8018842 <_itsdk_console_private+0x1fe>
		case 'l':
			// switch lowPower On
			lowPower_enable();
 80187f4:	f004 f80e 	bl	801c814 <lowPower_enable>
			goto success;
 80187f8:	e01e      	b.n	8018838 <_itsdk_console_private+0x1f4>
		case 'L':
			// switch LowPower Off
			lowPower_disable();
 80187fa:	f004 f815 	bl	801c828 <lowPower_disable>
			goto success;
 80187fe:	e01b      	b.n	8018838 <_itsdk_console_private+0x1f4>
		}
	} else if (sz==2) {
 8018800:	1cfb      	adds	r3, r7, #3
 8018802:	781b      	ldrb	r3, [r3, #0]
 8018804:	2b02      	cmp	r3, #2
 8018806:	d115      	bne.n	8018834 <_itsdk_console_private+0x1f0>
		if ( buffer[0] == 'R' && buffer[1] == '!' ) {
 8018808:	687b      	ldr	r3, [r7, #4]
 801880a:	781b      	ldrb	r3, [r3, #0]
 801880c:	2b52      	cmp	r3, #82	; 0x52
 801880e:	d111      	bne.n	8018834 <_itsdk_console_private+0x1f0>
 8018810:	687b      	ldr	r3, [r7, #4]
 8018812:	3301      	adds	r3, #1
 8018814:	781b      	ldrb	r3, [r3, #0]
 8018816:	2b21      	cmp	r3, #33	; 0x21
 8018818:	d10c      	bne.n	8018834 <_itsdk_console_private+0x1f0>
			// Clear all the eeprom content the reset - hard factory default
			_itsdk_console_printf("OK\r\n");
 801881a:	4b27      	ldr	r3, [pc, #156]	; (80188b8 <_itsdk_console_private+0x274>)
 801881c:	0018      	movs	r0, r3
 801881e:	f000 f93b 	bl	8018a98 <_itsdk_console_printf>
			eeprom_clearAllEprom();
 8018822:	f000 fc23 	bl	801906c <eeprom_clearAllEprom>
			itsdk_delayMs(100);
 8018826:	2064      	movs	r0, #100	; 0x64
 8018828:	f005 fd04 	bl	801e234 <itsdk_delayMs>
			itsdk_reset();
 801882c:	f005 fcb0 	bl	801e190 <itsdk_reset>
			return ITSDK_CONSOLE_FAILED;
 8018830:	2302      	movs	r3, #2
 8018832:	e006      	b.n	8018842 <_itsdk_console_private+0x1fe>
			 goto success;
		 } else goto failed;
		}
	}
#endif
	return ITSDK_CONSOLE_NOTFOUND;
 8018834:	2301      	movs	r3, #1
 8018836:	e004      	b.n	8018842 <_itsdk_console_private+0x1fe>

success:
	_itsdk_console_printf("OK\r\n");
 8018838:	4b1f      	ldr	r3, [pc, #124]	; (80188b8 <_itsdk_console_private+0x274>)
 801883a:	0018      	movs	r0, r3
 801883c:	f000 f92c 	bl	8018a98 <_itsdk_console_printf>
	return ITSDK_CONSOLE_SUCCES;
 8018840:	2300      	movs	r3, #0
failed:
	_itsdk_console_printf("KO\r\n");
	return ITSDK_CONSOLE_FAILED;
}
 8018842:	0018      	movs	r0, r3
 8018844:	46bd      	mov	sp, r7
 8018846:	b004      	add	sp, #16
 8018848:	bdb0      	pop	{r4, r5, r7, pc}
 801884a:	46c0      	nop			; (mov r8, r8)
 801884c:	08021ccc 	.word	0x08021ccc
 8018850:	080207cc 	.word	0x080207cc
 8018854:	080207e8 	.word	0x080207e8
 8018858:	08020804 	.word	0x08020804
 801885c:	0802082c 	.word	0x0802082c
 8018860:	08020854 	.word	0x08020854
 8018864:	08020878 	.word	0x08020878
 8018868:	080208a0 	.word	0x080208a0
 801886c:	080208d4 	.word	0x080208d4
 8018870:	080208f8 	.word	0x080208f8
 8018874:	08020918 	.word	0x08020918
 8018878:	200011a4 	.word	0x200011a4
 801887c:	08020940 	.word	0x08020940
 8018880:	08020954 	.word	0x08020954
 8018884:	08020970 	.word	0x08020970
 8018888:	08020988 	.word	0x08020988
 801888c:	0802099c 	.word	0x0802099c
 8018890:	200016a8 	.word	0x200016a8
 8018894:	08021da4 	.word	0x08021da4
 8018898:	080209a4 	.word	0x080209a4
 801889c:	080209ac 	.word	0x080209ac
 80188a0:	080209b8 	.word	0x080209b8
 80188a4:	080209c4 	.word	0x080209c4
 80188a8:	080209cc 	.word	0x080209cc
 80188ac:	080209d4 	.word	0x080209d4
 80188b0:	080209dc 	.word	0x080209dc
 80188b4:	080209e8 	.word	0x080209e8
 80188b8:	080209f4 	.word	0x080209f4
 80188bc:	080209fc 	.word	0x080209fc

080188c0 <_itsdk_console_public>:

static itsdk_console_return_e _itsdk_console_public(char * buffer, uint8_t sz) {
 80188c0:	b580      	push	{r7, lr}
 80188c2:	b082      	sub	sp, #8
 80188c4:	af00      	add	r7, sp, #0
 80188c6:	6078      	str	r0, [r7, #4]
 80188c8:	000a      	movs	r2, r1
 80188ca:	1cfb      	adds	r3, r7, #3
 80188cc:	701a      	strb	r2, [r3, #0]

	if ( sz == 1 ) {
 80188ce:	1cfb      	adds	r3, r7, #3
 80188d0:	781b      	ldrb	r3, [r3, #0]
 80188d2:	2b01      	cmp	r3, #1
 80188d4:	d14c      	bne.n	8018970 <_itsdk_console_public+0xb0>
		switch ( buffer[0] ) {
 80188d6:	687b      	ldr	r3, [r7, #4]
 80188d8:	781b      	ldrb	r3, [r3, #0]
 80188da:	2b6f      	cmp	r3, #111	; 0x6f
 80188dc:	d020      	beq.n	8018920 <_itsdk_console_public+0x60>
 80188de:	dc04      	bgt.n	80188ea <_itsdk_console_public+0x2a>
 80188e0:	2b21      	cmp	r3, #33	; 0x21
 80188e2:	d023      	beq.n	801892c <_itsdk_console_public+0x6c>
 80188e4:	2b3f      	cmp	r3, #63	; 0x3f
 80188e6:	d005      	beq.n	80188f4 <_itsdk_console_public+0x34>
 80188e8:	e042      	b.n	8018970 <_itsdk_console_public+0xb0>
 80188ea:	2b73      	cmp	r3, #115	; 0x73
 80188ec:	d03c      	beq.n	8018968 <_itsdk_console_public+0xa8>
 80188ee:	2b76      	cmp	r3, #118	; 0x76
 80188f0:	d026      	beq.n	8018940 <_itsdk_console_public+0x80>
 80188f2:	e03d      	b.n	8018970 <_itsdk_console_public+0xb0>
		case '?':
			// help
			_itsdk_console_printf("--- Common\r\n");
 80188f4:	4b21      	ldr	r3, [pc, #132]	; (801897c <_itsdk_console_public+0xbc>)
 80188f6:	0018      	movs	r0, r3
 80188f8:	f000 f8ce 	bl	8018a98 <_itsdk_console_printf>
			_itsdk_console_printf("?          : print help\r\n");
 80188fc:	4b20      	ldr	r3, [pc, #128]	; (8018980 <_itsdk_console_public+0xc0>)
 80188fe:	0018      	movs	r0, r3
 8018900:	f000 f8ca 	bl	8018a98 <_itsdk_console_printf>
			_itsdk_console_printf("!          : print copyright\r\n");
 8018904:	4b1f      	ldr	r3, [pc, #124]	; (8018984 <_itsdk_console_public+0xc4>)
 8018906:	0018      	movs	r0, r3
 8018908:	f000 f8c6 	bl	8018a98 <_itsdk_console_printf>
			_itsdk_console_printf("v          : print version\r\n");
 801890c:	4b1e      	ldr	r3, [pc, #120]	; (8018988 <_itsdk_console_public+0xc8>)
 801890e:	0018      	movs	r0, r3
 8018910:	f000 f8c2 	bl	8018a98 <_itsdk_console_printf>
			_itsdk_console_printf("o          : print OK\r\n");
 8018914:	4b1d      	ldr	r3, [pc, #116]	; (801898c <_itsdk_console_public+0xcc>)
 8018916:	0018      	movs	r0, r3
 8018918:	f000 f8be 	bl	8018a98 <_itsdk_console_printf>
			return ITSDK_CONSOLE_SUCCES;
 801891c:	2300      	movs	r3, #0
 801891e:	e028      	b.n	8018972 <_itsdk_console_public+0xb2>
			break;
		case 'o':
			_itsdk_console_printf("OK\r\n");
 8018920:	4b1b      	ldr	r3, [pc, #108]	; (8018990 <_itsdk_console_public+0xd0>)
 8018922:	0018      	movs	r0, r3
 8018924:	f000 f8b8 	bl	8018a98 <_itsdk_console_printf>
			return ITSDK_CONSOLE_SUCCES;
 8018928:	2300      	movs	r3, #0
 801892a:	e022      	b.n	8018972 <_itsdk_console_public+0xb2>
			break;
		case '!':
			// Copyright
			_itsdk_console_printf("IT_SDK - (c) 2020 - Paul Pinault aka Disk91\r\n");
 801892c:	4b19      	ldr	r3, [pc, #100]	; (8018994 <_itsdk_console_public+0xd4>)
 801892e:	0018      	movs	r0, r3
 8018930:	f000 f8b2 	bl	8018a98 <_itsdk_console_printf>
			_itsdk_console_printf(ITSKD_CONSOLE_COPYRIGHT);
 8018934:	4b18      	ldr	r3, [pc, #96]	; (8018998 <_itsdk_console_public+0xd8>)
 8018936:	0018      	movs	r0, r3
 8018938:	f000 f8ae 	bl	8018a98 <_itsdk_console_printf>
			return ITSDK_CONSOLE_SUCCES;
 801893c:	2300      	movs	r3, #0
 801893e:	e018      	b.n	8018972 <_itsdk_console_public+0xb2>
			break;
		case 'v':
			// Version
			_itsdk_console_printf("FW Version %s\r\n",ITSDK_USER_VERSION);
 8018940:	4a16      	ldr	r2, [pc, #88]	; (801899c <_itsdk_console_public+0xdc>)
 8018942:	4b17      	ldr	r3, [pc, #92]	; (80189a0 <_itsdk_console_public+0xe0>)
 8018944:	0011      	movs	r1, r2
 8018946:	0018      	movs	r0, r3
 8018948:	f000 f8a6 	bl	8018a98 <_itsdk_console_printf>
			_itsdk_console_printf("Build %s %s\r\n",__DATE__, __TIME__);
 801894c:	4a15      	ldr	r2, [pc, #84]	; (80189a4 <_itsdk_console_public+0xe4>)
 801894e:	4916      	ldr	r1, [pc, #88]	; (80189a8 <_itsdk_console_public+0xe8>)
 8018950:	4b16      	ldr	r3, [pc, #88]	; (80189ac <_itsdk_console_public+0xec>)
 8018952:	0018      	movs	r0, r3
 8018954:	f000 f8a0 	bl	8018a98 <_itsdk_console_printf>
			_itsdk_console_printf("IT_SDK Version %s\r\n",ITSDK_VERSION);
 8018958:	4a15      	ldr	r2, [pc, #84]	; (80189b0 <_itsdk_console_public+0xf0>)
 801895a:	4b16      	ldr	r3, [pc, #88]	; (80189b4 <_itsdk_console_public+0xf4>)
 801895c:	0011      	movs	r1, r2
 801895e:	0018      	movs	r0, r3
 8018960:	f000 f89a 	bl	8018a98 <_itsdk_console_printf>
			return ITSDK_CONSOLE_SUCCES;
 8018964:	2300      	movs	r3, #0
 8018966:	e004      	b.n	8018972 <_itsdk_console_public+0xb2>
			break;
		case 's':
			// State
			itsdk_print_state();
 8018968:	f001 f852 	bl	8019a10 <itsdk_print_state>
			return ITSDK_CONSOLE_SUCCES;
 801896c:	2300      	movs	r3, #0
 801896e:	e000      	b.n	8018972 <_itsdk_console_public+0xb2>
			break;
		}
	}
	return ITSDK_CONSOLE_NOTFOUND;
 8018970:	2301      	movs	r3, #1
}
 8018972:	0018      	movs	r0, r3
 8018974:	46bd      	mov	sp, r7
 8018976:	b002      	add	sp, #8
 8018978:	bd80      	pop	{r7, pc}
 801897a:	46c0      	nop			; (mov r8, r8)
 801897c:	08020a04 	.word	0x08020a04
 8018980:	08020a14 	.word	0x08020a14
 8018984:	08020a30 	.word	0x08020a30
 8018988:	08020a50 	.word	0x08020a50
 801898c:	08020a70 	.word	0x08020a70
 8018990:	080209f4 	.word	0x080209f4
 8018994:	08020a88 	.word	0x08020a88
 8018998:	08020ab8 	.word	0x08020ab8
 801899c:	08020ad0 	.word	0x08020ad0
 80189a0:	08020ad4 	.word	0x08020ad4
 80189a4:	08020ae4 	.word	0x08020ae4
 80189a8:	08020af0 	.word	0x08020af0
 80189ac:	08020afc 	.word	0x08020afc
 80189b0:	08020b0c 	.word	0x08020b0c
 80189b4:	08020b1c 	.word	0x08020b1c

080189b8 <itsdk_console_setup>:


/**
 * Setup the console & associated chain
 */
void itsdk_console_setup() {
 80189b8:	b580      	push	{r7, lr}
 80189ba:	af00      	add	r7, sp, #0
	__console.expire = 0;
 80189bc:	4b0c      	ldr	r3, [pc, #48]	; (80189f0 <itsdk_console_setup+0x38>)
 80189be:	2200      	movs	r2, #0
 80189c0:	62da      	str	r2, [r3, #44]	; 0x2c
	__console.loginState = 0;
 80189c2:	4b0b      	ldr	r3, [pc, #44]	; (80189f0 <itsdk_console_setup+0x38>)
 80189c4:	781a      	ldrb	r2, [r3, #0]
 80189c6:	2101      	movs	r1, #1
 80189c8:	438a      	bics	r2, r1
 80189ca:	701a      	strb	r2, [r3, #0]
	__console.pBuffer = 0;
 80189cc:	4b08      	ldr	r3, [pc, #32]	; (80189f0 <itsdk_console_setup+0x38>)
 80189ce:	781a      	ldrb	r2, [r3, #0]
 80189d0:	2101      	movs	r1, #1
 80189d2:	400a      	ands	r2, r1
 80189d4:	701a      	strb	r2, [r3, #0]
	__console_head_chain.console_private = _itsdk_console_private;
 80189d6:	4b07      	ldr	r3, [pc, #28]	; (80189f4 <itsdk_console_setup+0x3c>)
 80189d8:	4a07      	ldr	r2, [pc, #28]	; (80189f8 <itsdk_console_setup+0x40>)
 80189da:	601a      	str	r2, [r3, #0]
	__console_head_chain.console_public = _itsdk_console_public;
 80189dc:	4b05      	ldr	r3, [pc, #20]	; (80189f4 <itsdk_console_setup+0x3c>)
 80189de:	4a07      	ldr	r2, [pc, #28]	; (80189fc <itsdk_console_setup+0x44>)
 80189e0:	605a      	str	r2, [r3, #4]
	__console_head_chain.next = NULL;
 80189e2:	4b04      	ldr	r3, [pc, #16]	; (80189f4 <itsdk_console_setup+0x3c>)
 80189e4:	2200      	movs	r2, #0
 80189e6:	609a      	str	r2, [r3, #8]
}
 80189e8:	46c0      	nop			; (mov r8, r8)
 80189ea:	46bd      	mov	sp, r7
 80189ec:	bd80      	pop	{r7, pc}
 80189ee:	46c0      	nop			; (mov r8, r8)
 80189f0:	200011a4 	.word	0x200011a4
 80189f4:	200011d4 	.word	0x200011d4
 80189f8:	08018645 	.word	0x08018645
 80189fc:	080188c1 	.word	0x080188c1

08018a00 <itsdk_console_loop>:

/**
 * This function is call on every wake-up to proceed the pending characters on the serial
 * port and call the associated services.
 */
void itsdk_console_loop() {
 8018a00:	b5b0      	push	{r4, r5, r7, lr}
 8018a02:	b084      	sub	sp, #16
 8018a04:	af00      	add	r7, sp, #0

	char c;
	serial_read_response_e r;

	// Check the expiration
	if ( __console.loginState == 1 ) {
 8018a06:	4b22      	ldr	r3, [pc, #136]	; (8018a90 <itsdk_console_loop+0x90>)
 8018a08:	781b      	ldrb	r3, [r3, #0]
 8018a0a:	2201      	movs	r2, #1
 8018a0c:	4013      	ands	r3, r2
 8018a0e:	b2db      	uxtb	r3, r3
 8018a10:	2b00      	cmp	r3, #0
 8018a12:	d021      	beq.n	8018a58 <itsdk_console_loop+0x58>
		uint64_t s = itsdk_time_get_ms()/1000;
 8018a14:	f004 fb64 	bl	801d0e0 <itsdk_time_get_ms>
 8018a18:	22fa      	movs	r2, #250	; 0xfa
 8018a1a:	0092      	lsls	r2, r2, #2
 8018a1c:	2300      	movs	r3, #0
 8018a1e:	f7e7 fd53 	bl	80004c8 <__aeabi_uldivmod>
 8018a22:	0002      	movs	r2, r0
 8018a24:	000b      	movs	r3, r1
 8018a26:	60ba      	str	r2, [r7, #8]
 8018a28:	60fb      	str	r3, [r7, #12]
		if ( __console.expire < s ) {
 8018a2a:	4b19      	ldr	r3, [pc, #100]	; (8018a90 <itsdk_console_loop+0x90>)
 8018a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018a2e:	001c      	movs	r4, r3
 8018a30:	2300      	movs	r3, #0
 8018a32:	001d      	movs	r5, r3
 8018a34:	68fb      	ldr	r3, [r7, #12]
 8018a36:	42ab      	cmp	r3, r5
 8018a38:	d805      	bhi.n	8018a46 <itsdk_console_loop+0x46>
 8018a3a:	68fb      	ldr	r3, [r7, #12]
 8018a3c:	42ab      	cmp	r3, r5
 8018a3e:	d10b      	bne.n	8018a58 <itsdk_console_loop+0x58>
 8018a40:	68bb      	ldr	r3, [r7, #8]
 8018a42:	42a3      	cmp	r3, r4
 8018a44:	d908      	bls.n	8018a58 <itsdk_console_loop+0x58>
			 __console.loginState = 0;
 8018a46:	4b12      	ldr	r3, [pc, #72]	; (8018a90 <itsdk_console_loop+0x90>)
 8018a48:	781a      	ldrb	r2, [r3, #0]
 8018a4a:	2101      	movs	r1, #1
 8018a4c:	438a      	bics	r2, r1
 8018a4e:	701a      	strb	r2, [r3, #0]
			 _itsdk_console_printf("logout\r\n");
 8018a50:	4b10      	ldr	r3, [pc, #64]	; (8018a94 <itsdk_console_loop+0x94>)
 8018a52:	0018      	movs	r0, r3
 8018a54:	f000 f820 	bl	8018a98 <_itsdk_console_printf>
		 }
	} while ( r == SERIAL_READ_PENDING_CHAR );
  #endif
  #if ( ITSDK_CONSOLE_SERIAL & __UART_USART2 ) > 0
	do {
		 r = serial2_read(&c);
 8018a58:	1dfc      	adds	r4, r7, #7
 8018a5a:	1dbb      	adds	r3, r7, #6
 8018a5c:	0018      	movs	r0, r3
 8018a5e:	f005 fcd9 	bl	801e414 <serial2_read>
 8018a62:	0003      	movs	r3, r0
 8018a64:	7023      	strb	r3, [r4, #0]
		 if ( r == SERIAL_READ_SUCCESS || r == SERIAL_READ_PENDING_CHAR) {
 8018a66:	1dfb      	adds	r3, r7, #7
 8018a68:	781b      	ldrb	r3, [r3, #0]
 8018a6a:	2b00      	cmp	r3, #0
 8018a6c:	d003      	beq.n	8018a76 <itsdk_console_loop+0x76>
 8018a6e:	1dfb      	adds	r3, r7, #7
 8018a70:	781b      	ldrb	r3, [r3, #0]
 8018a72:	2b01      	cmp	r3, #1
 8018a74:	d104      	bne.n	8018a80 <itsdk_console_loop+0x80>
			 _itsdk_console_processChar(c);
 8018a76:	1dbb      	adds	r3, r7, #6
 8018a78:	781b      	ldrb	r3, [r3, #0]
 8018a7a:	0018      	movs	r0, r3
 8018a7c:	f000 f97e 	bl	8018d7c <_itsdk_console_processChar>
		 }
	} while ( r == SERIAL_READ_PENDING_CHAR );
 8018a80:	1dfb      	adds	r3, r7, #7
 8018a82:	781b      	ldrb	r3, [r3, #0]
 8018a84:	2b01      	cmp	r3, #1
 8018a86:	d0e7      	beq.n	8018a58 <itsdk_console_loop+0x58>
			 _itsdk_console_processChar(c);
		 }
	} while ( r == SERIAL_READ_PENDING_CHAR );
  #endif

}
 8018a88:	46c0      	nop			; (mov r8, r8)
 8018a8a:	46bd      	mov	sp, r7
 8018a8c:	b004      	add	sp, #16
 8018a8e:	bdb0      	pop	{r4, r5, r7, pc}
 8018a90:	200011a4 	.word	0x200011a4
 8018a94:	08020b30 	.word	0x08020b30

08018a98 <_itsdk_console_printf>:
void itsdk_console_customProcess_char(char c) {
	_itsdk_console_processChar(c);
}
#endif

void _itsdk_console_printf(char *format, ...) {
 8018a98:	b40f      	push	{r0, r1, r2, r3}
 8018a9a:	b580      	push	{r7, lr}
 8018a9c:	b096      	sub	sp, #88	; 0x58
 8018a9e:	af00      	add	r7, sp, #0
	va_list args;
	char 	fmtBuffer[LOGGER_MAX_BUF_SZ]; 				// buffer for log line formating before printing
    va_start(args,format);
 8018aa0:	2364      	movs	r3, #100	; 0x64
 8018aa2:	18fb      	adds	r3, r7, r3
 8018aa4:	657b      	str	r3, [r7, #84]	; 0x54
	vsnprintf(fmtBuffer,LOGGER_MAX_BUF_SZ,format,args);
 8018aa6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018aa8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8018aaa:	1d38      	adds	r0, r7, #4
 8018aac:	2150      	movs	r1, #80	; 0x50
 8018aae:	f006 fba5 	bl	801f1fc <vsniprintf>
	va_end(args);
#if ( ITSDK_CONSOLE_SERIAL & ( __UART_LPUART1 | __UART_USART1 ) ) > 0
	serial1_print(fmtBuffer);
#endif
#if ( ITSDK_CONSOLE_SERIAL & __UART_USART2 ) > 0
	serial2_print(fmtBuffer);
 8018ab2:	1d3b      	adds	r3, r7, #4
 8018ab4:	0018      	movs	r0, r3
 8018ab6:	f005 fc95 	bl	801e3e4 <serial2_print>
#endif
#if ( ITSDK_CONSOLE_SERIAL & __UART_CUSTOM ) > 0
	itsdk_console_customSerial_print(fmtBuffer);
#endif
}
 8018aba:	46c0      	nop			; (mov r8, r8)
 8018abc:	46bd      	mov	sp, r7
 8018abe:	b016      	add	sp, #88	; 0x58
 8018ac0:	bc80      	pop	{r7}
 8018ac2:	bc08      	pop	{r3}
 8018ac4:	b004      	add	sp, #16
 8018ac6:	4718      	bx	r3

08018ac8 <_itsdk_console_processLine>:

// =================================================================================================
// Processing input
// =================================================================================================

static void _itsdk_console_processLine() {
 8018ac8:	b5b0      	push	{r4, r5, r7, lr}
 8018aca:	b090      	sub	sp, #64	; 0x40
 8018acc:	af00      	add	r7, sp, #0

	// Empty line
	if ( __console.pBuffer == 0 ) return;
 8018ace:	4ba5      	ldr	r3, [pc, #660]	; (8018d64 <_itsdk_console_processLine+0x29c>)
 8018ad0:	781b      	ldrb	r3, [r3, #0]
 8018ad2:	2201      	movs	r2, #1
 8018ad4:	4393      	bics	r3, r2
 8018ad6:	b2db      	uxtb	r3, r3
 8018ad8:	2b00      	cmp	r3, #0
 8018ada:	d100      	bne.n	8018ade <_itsdk_console_processLine+0x16>
 8018adc:	e13d      	b.n	8018d5a <_itsdk_console_processLine+0x292>

	// Clean the buffer
	if ( __console.pBuffer > 0 && __console.serialBuffer[__console.pBuffer-1] == '\r' ) {
 8018ade:	4ba1      	ldr	r3, [pc, #644]	; (8018d64 <_itsdk_console_processLine+0x29c>)
 8018ae0:	781b      	ldrb	r3, [r3, #0]
 8018ae2:	2201      	movs	r2, #1
 8018ae4:	4393      	bics	r3, r2
 8018ae6:	b2db      	uxtb	r3, r3
 8018ae8:	2b00      	cmp	r3, #0
 8018aea:	d01d      	beq.n	8018b28 <_itsdk_console_processLine+0x60>
 8018aec:	4b9d      	ldr	r3, [pc, #628]	; (8018d64 <_itsdk_console_processLine+0x29c>)
 8018aee:	781b      	ldrb	r3, [r3, #0]
 8018af0:	061b      	lsls	r3, r3, #24
 8018af2:	0e5b      	lsrs	r3, r3, #25
 8018af4:	b2db      	uxtb	r3, r3
 8018af6:	3b01      	subs	r3, #1
 8018af8:	4a9a      	ldr	r2, [pc, #616]	; (8018d64 <_itsdk_console_processLine+0x29c>)
 8018afa:	18d3      	adds	r3, r2, r3
 8018afc:	785b      	ldrb	r3, [r3, #1]
 8018afe:	2b0d      	cmp	r3, #13
 8018b00:	d112      	bne.n	8018b28 <_itsdk_console_processLine+0x60>
		__console.pBuffer--;
 8018b02:	4b98      	ldr	r3, [pc, #608]	; (8018d64 <_itsdk_console_processLine+0x29c>)
 8018b04:	781b      	ldrb	r3, [r3, #0]
 8018b06:	061b      	lsls	r3, r3, #24
 8018b08:	0e5b      	lsrs	r3, r3, #25
 8018b0a:	b2db      	uxtb	r3, r3
 8018b0c:	337f      	adds	r3, #127	; 0x7f
 8018b0e:	1c1a      	adds	r2, r3, #0
 8018b10:	237f      	movs	r3, #127	; 0x7f
 8018b12:	4013      	ands	r3, r2
 8018b14:	b2da      	uxtb	r2, r3
 8018b16:	4b93      	ldr	r3, [pc, #588]	; (8018d64 <_itsdk_console_processLine+0x29c>)
 8018b18:	1890      	adds	r0, r2, r2
 8018b1a:	781a      	ldrb	r2, [r3, #0]
 8018b1c:	2101      	movs	r1, #1
 8018b1e:	400a      	ands	r2, r1
 8018b20:	1c11      	adds	r1, r2, #0
 8018b22:	1c02      	adds	r2, r0, #0
 8018b24:	430a      	orrs	r2, r1
 8018b26:	701a      	strb	r2, [r3, #0]
	}
	for ( int i = __console.pBuffer ; i < ITSDK_CONSOLE_LINEBUFFER ; i++) {
 8018b28:	4b8e      	ldr	r3, [pc, #568]	; (8018d64 <_itsdk_console_processLine+0x29c>)
 8018b2a:	781b      	ldrb	r3, [r3, #0]
 8018b2c:	061b      	lsls	r3, r3, #24
 8018b2e:	0e5b      	lsrs	r3, r3, #25
 8018b30:	b2db      	uxtb	r3, r3
 8018b32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8018b34:	e008      	b.n	8018b48 <_itsdk_console_processLine+0x80>
		__console.serialBuffer[i] = 0;
 8018b36:	4a8b      	ldr	r2, [pc, #556]	; (8018d64 <_itsdk_console_processLine+0x29c>)
 8018b38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018b3a:	18d3      	adds	r3, r2, r3
 8018b3c:	3301      	adds	r3, #1
 8018b3e:	2200      	movs	r2, #0
 8018b40:	701a      	strb	r2, [r3, #0]
	for ( int i = __console.pBuffer ; i < ITSDK_CONSOLE_LINEBUFFER ; i++) {
 8018b42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018b44:	3301      	adds	r3, #1
 8018b46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8018b48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018b4a:	2b27      	cmp	r3, #39	; 0x27
 8018b4c:	ddf3      	ble.n	8018b36 <_itsdk_console_processLine+0x6e>
	}

	if ( __console.loginState == 0 ) {
 8018b4e:	4b85      	ldr	r3, [pc, #532]	; (8018d64 <_itsdk_console_processLine+0x29c>)
 8018b50:	781b      	ldrb	r3, [r3, #0]
 8018b52:	2201      	movs	r2, #1
 8018b54:	4013      	ands	r3, r2
 8018b56:	b2db      	uxtb	r3, r3
 8018b58:	2b00      	cmp	r3, #0
 8018b5a:	d000      	beq.n	8018b5e <_itsdk_console_processLine+0x96>
 8018b5c:	e08e      	b.n	8018c7c <_itsdk_console_processLine+0x1b4>
		// console locked

		// We are going to remove the possible \r and create a 16B array with leading 0 to match with
		// the console password field in Secure Store
		// Password max size is 15 byte.
		if ( __console.pBuffer < 16 ) {
 8018b5e:	4b81      	ldr	r3, [pc, #516]	; (8018d64 <_itsdk_console_processLine+0x29c>)
 8018b60:	781b      	ldrb	r3, [r3, #0]
 8018b62:	061b      	lsls	r3, r3, #24
 8018b64:	0e5b      	lsrs	r3, r3, #25
 8018b66:	b2db      	uxtb	r3, r3
 8018b68:	2b0f      	cmp	r3, #15
 8018b6a:	d82e      	bhi.n	8018bca <_itsdk_console_processLine+0x102>
			 __console.loginState=1;
 8018b6c:	4b7d      	ldr	r3, [pc, #500]	; (8018d64 <_itsdk_console_processLine+0x29c>)
 8018b6e:	781a      	ldrb	r2, [r3, #0]
 8018b70:	2101      	movs	r1, #1
 8018b72:	430a      	orrs	r2, r1
 8018b74:	701a      	strb	r2, [r3, #0]
			#if ITSDK_WITH_SECURESTORE == __DISABLE
				uint8_t passwd[16] = ITSDK_SECSTORE_CONSOLEKEY;
			#else
				uint8_t passwd[16];
				itsdk_secstore_readBlock(ITSDK_SS_CONSOLEKEY, passwd);
 8018b76:	003b      	movs	r3, r7
 8018b78:	0019      	movs	r1, r3
 8018b7a:	2000      	movs	r0, #0
 8018b7c:	f001 f8d4 	bl	8019d28 <itsdk_secstore_readBlock>
			#endif
				for ( int i = 0 ; i < 16 ; i++) {
 8018b80:	2300      	movs	r3, #0
 8018b82:	63bb      	str	r3, [r7, #56]	; 0x38
 8018b84:	e019      	b.n	8018bba <_itsdk_console_processLine+0xf2>
					if (__console.serialBuffer[i] != passwd[i] && __console.loginState == 1) __console.loginState=0;
 8018b86:	4a77      	ldr	r2, [pc, #476]	; (8018d64 <_itsdk_console_processLine+0x29c>)
 8018b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018b8a:	18d3      	adds	r3, r2, r3
 8018b8c:	3301      	adds	r3, #1
 8018b8e:	781a      	ldrb	r2, [r3, #0]
 8018b90:	0039      	movs	r1, r7
 8018b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018b94:	18cb      	adds	r3, r1, r3
 8018b96:	781b      	ldrb	r3, [r3, #0]
 8018b98:	429a      	cmp	r2, r3
 8018b9a:	d00b      	beq.n	8018bb4 <_itsdk_console_processLine+0xec>
 8018b9c:	4b71      	ldr	r3, [pc, #452]	; (8018d64 <_itsdk_console_processLine+0x29c>)
 8018b9e:	781b      	ldrb	r3, [r3, #0]
 8018ba0:	2201      	movs	r2, #1
 8018ba2:	4013      	ands	r3, r2
 8018ba4:	b2db      	uxtb	r3, r3
 8018ba6:	2b00      	cmp	r3, #0
 8018ba8:	d004      	beq.n	8018bb4 <_itsdk_console_processLine+0xec>
 8018baa:	4b6e      	ldr	r3, [pc, #440]	; (8018d64 <_itsdk_console_processLine+0x29c>)
 8018bac:	781a      	ldrb	r2, [r3, #0]
 8018bae:	2101      	movs	r1, #1
 8018bb0:	438a      	bics	r2, r1
 8018bb2:	701a      	strb	r2, [r3, #0]
				for ( int i = 0 ; i < 16 ; i++) {
 8018bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018bb6:	3301      	adds	r3, #1
 8018bb8:	63bb      	str	r3, [r7, #56]	; 0x38
 8018bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018bbc:	2b0f      	cmp	r3, #15
 8018bbe:	dde2      	ble.n	8018b86 <_itsdk_console_processLine+0xbe>
				}
				bzero(passwd,16);
 8018bc0:	003b      	movs	r3, r7
 8018bc2:	2110      	movs	r1, #16
 8018bc4:	0018      	movs	r0, r3
 8018bc6:	f006 fa6f 	bl	801f0a8 <bzero>
		}
		if ( __console.loginState == 1 ) {
 8018bca:	4b66      	ldr	r3, [pc, #408]	; (8018d64 <_itsdk_console_processLine+0x29c>)
 8018bcc:	781b      	ldrb	r3, [r3, #0]
 8018bce:	2201      	movs	r2, #1
 8018bd0:	4013      	ands	r3, r2
 8018bd2:	b2db      	uxtb	r3, r3
 8018bd4:	2b00      	cmp	r3, #0
 8018bd6:	d015      	beq.n	8018c04 <_itsdk_console_processLine+0x13c>
			// Login sucess
			uint64_t s = itsdk_time_get_ms()/1000;
 8018bd8:	f004 fa82 	bl	801d0e0 <itsdk_time_get_ms>
 8018bdc:	22fa      	movs	r2, #250	; 0xfa
 8018bde:	0092      	lsls	r2, r2, #2
 8018be0:	2300      	movs	r3, #0
 8018be2:	f7e7 fc71 	bl	80004c8 <__aeabi_uldivmod>
 8018be6:	0003      	movs	r3, r0
 8018be8:	000c      	movs	r4, r1
 8018bea:	613b      	str	r3, [r7, #16]
 8018bec:	617c      	str	r4, [r7, #20]
			__console.expire = (uint32_t)s + ITSDK_CONSOLE_EXPIRE_S;
 8018bee:	693b      	ldr	r3, [r7, #16]
 8018bf0:	332d      	adds	r3, #45	; 0x2d
 8018bf2:	33ff      	adds	r3, #255	; 0xff
 8018bf4:	001a      	movs	r2, r3
 8018bf6:	4b5b      	ldr	r3, [pc, #364]	; (8018d64 <_itsdk_console_processLine+0x29c>)
 8018bf8:	62da      	str	r2, [r3, #44]	; 0x2c
			_itsdk_console_printf("OK\r\n");
 8018bfa:	4b5b      	ldr	r3, [pc, #364]	; (8018d68 <_itsdk_console_processLine+0x2a0>)
 8018bfc:	0018      	movs	r0, r3
 8018bfe:	f7ff ff4b 	bl	8018a98 <_itsdk_console_printf>
 8018c02:	e0ab      	b.n	8018d5c <_itsdk_console_processLine+0x294>
		} else {
			// Login Failed This can be a public operation request
			itsdk_console_chain_t * c = &__console_head_chain;
 8018c04:	4b59      	ldr	r3, [pc, #356]	; (8018d6c <_itsdk_console_processLine+0x2a4>)
 8018c06:	637b      	str	r3, [r7, #52]	; 0x34
			itsdk_console_return_e  ret = ITSDK_CONSOLE_NOTFOUND;
 8018c08:	2333      	movs	r3, #51	; 0x33
 8018c0a:	18fb      	adds	r3, r7, r3
 8018c0c:	2201      	movs	r2, #1
 8018c0e:	701a      	strb	r2, [r3, #0]
			itsdk_console_return_e  lret;
			while ( c != NULL ) {
 8018c10:	e022      	b.n	8018c58 <_itsdk_console_processLine+0x190>
				if ( c->console_public != NULL ) {
 8018c12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018c14:	685b      	ldr	r3, [r3, #4]
 8018c16:	2b00      	cmp	r3, #0
 8018c18:	d01a      	beq.n	8018c50 <_itsdk_console_processLine+0x188>
  				   lret= c->console_public((char*)__console.serialBuffer,(uint8_t)__console.pBuffer);
 8018c1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018c1c:	685b      	ldr	r3, [r3, #4]
 8018c1e:	4a51      	ldr	r2, [pc, #324]	; (8018d64 <_itsdk_console_processLine+0x29c>)
 8018c20:	7812      	ldrb	r2, [r2, #0]
 8018c22:	0612      	lsls	r2, r2, #24
 8018c24:	0e52      	lsrs	r2, r2, #25
 8018c26:	b2d2      	uxtb	r2, r2
 8018c28:	0011      	movs	r1, r2
 8018c2a:	251e      	movs	r5, #30
 8018c2c:	197c      	adds	r4, r7, r5
 8018c2e:	4a50      	ldr	r2, [pc, #320]	; (8018d70 <_itsdk_console_processLine+0x2a8>)
 8018c30:	0010      	movs	r0, r2
 8018c32:	4798      	blx	r3
 8018c34:	0003      	movs	r3, r0
 8018c36:	7023      	strb	r3, [r4, #0]
				   switch ( lret ) {
 8018c38:	197b      	adds	r3, r7, r5
 8018c3a:	781b      	ldrb	r3, [r3, #0]
 8018c3c:	2b00      	cmp	r3, #0
 8018c3e:	d002      	beq.n	8018c46 <_itsdk_console_processLine+0x17e>
 8018c40:	2b02      	cmp	r3, #2
 8018c42:	d000      	beq.n	8018c46 <_itsdk_console_processLine+0x17e>
					  case ITSDK_CONSOLE_SUCCES:
					  case ITSDK_CONSOLE_FAILED:
						  ret = ITSDK_CONSOLE_SUCCES;
						  break;
					  default:
					      break;
 8018c44:	e005      	b.n	8018c52 <_itsdk_console_processLine+0x18a>
						  ret = ITSDK_CONSOLE_SUCCES;
 8018c46:	2333      	movs	r3, #51	; 0x33
 8018c48:	18fb      	adds	r3, r7, r3
 8018c4a:	2200      	movs	r2, #0
 8018c4c:	701a      	strb	r2, [r3, #0]
						  break;
 8018c4e:	e000      	b.n	8018c52 <_itsdk_console_processLine+0x18a>
				   }
				}
 8018c50:	46c0      	nop			; (mov r8, r8)
			   c = c->next;
 8018c52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018c54:	689b      	ldr	r3, [r3, #8]
 8018c56:	637b      	str	r3, [r7, #52]	; 0x34
			while ( c != NULL ) {
 8018c58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018c5a:	2b00      	cmp	r3, #0
 8018c5c:	d1d9      	bne.n	8018c12 <_itsdk_console_processLine+0x14a>
			}
			// Print the password prompt only when it was not a command
			if ( ret == ITSDK_CONSOLE_NOTFOUND ) {
 8018c5e:	2333      	movs	r3, #51	; 0x33
 8018c60:	18fb      	adds	r3, r7, r3
 8018c62:	781b      	ldrb	r3, [r3, #0]
 8018c64:	2b01      	cmp	r3, #1
 8018c66:	d000      	beq.n	8018c6a <_itsdk_console_processLine+0x1a2>
 8018c68:	e078      	b.n	8018d5c <_itsdk_console_processLine+0x294>
				_itsdk_console_printf("password:\r\n");
 8018c6a:	4b42      	ldr	r3, [pc, #264]	; (8018d74 <_itsdk_console_processLine+0x2ac>)
 8018c6c:	0018      	movs	r0, r3
 8018c6e:	f7ff ff13 	bl	8018a98 <_itsdk_console_printf>
				_itsdk_console_printf("KO\r\n");
 8018c72:	4b41      	ldr	r3, [pc, #260]	; (8018d78 <_itsdk_console_processLine+0x2b0>)
 8018c74:	0018      	movs	r0, r3
 8018c76:	f7ff ff0f 	bl	8018a98 <_itsdk_console_printf>
 8018c7a:	e06f      	b.n	8018d5c <_itsdk_console_processLine+0x294>
			}
		}
	} else {
		if (__console.pBuffer > 0) {
 8018c7c:	4b39      	ldr	r3, [pc, #228]	; (8018d64 <_itsdk_console_processLine+0x29c>)
 8018c7e:	781b      	ldrb	r3, [r3, #0]
 8018c80:	2201      	movs	r2, #1
 8018c82:	4393      	bics	r3, r2
 8018c84:	b2db      	uxtb	r3, r3
 8018c86:	2b00      	cmp	r3, #0
 8018c88:	d068      	beq.n	8018d5c <_itsdk_console_processLine+0x294>
			// We are logged

			// Update session expiration
			uint64_t s = itsdk_time_get_ms()/1000;
 8018c8a:	f004 fa29 	bl	801d0e0 <itsdk_time_get_ms>
 8018c8e:	22fa      	movs	r2, #250	; 0xfa
 8018c90:	0092      	lsls	r2, r2, #2
 8018c92:	2300      	movs	r3, #0
 8018c94:	f7e7 fc18 	bl	80004c8 <__aeabi_uldivmod>
 8018c98:	0003      	movs	r3, r0
 8018c9a:	000c      	movs	r4, r1
 8018c9c:	623b      	str	r3, [r7, #32]
 8018c9e:	627c      	str	r4, [r7, #36]	; 0x24
			__console.expire = (uint32_t)s + ITSDK_CONSOLE_EXPIRE_S;
 8018ca0:	6a3b      	ldr	r3, [r7, #32]
 8018ca2:	332d      	adds	r3, #45	; 0x2d
 8018ca4:	33ff      	adds	r3, #255	; 0xff
 8018ca6:	001a      	movs	r2, r3
 8018ca8:	4b2e      	ldr	r3, [pc, #184]	; (8018d64 <_itsdk_console_processLine+0x29c>)
 8018caa:	62da      	str	r2, [r3, #44]	; 0x2c

			// Process command
			itsdk_console_chain_t * c = &__console_head_chain;
 8018cac:	4b2f      	ldr	r3, [pc, #188]	; (8018d6c <_itsdk_console_processLine+0x2a4>)
 8018cae:	62fb      	str	r3, [r7, #44]	; 0x2c
			itsdk_console_return_e  ret = ITSDK_CONSOLE_NOTFOUND;
 8018cb0:	232b      	movs	r3, #43	; 0x2b
 8018cb2:	18fb      	adds	r3, r7, r3
 8018cb4:	2201      	movs	r2, #1
 8018cb6:	701a      	strb	r2, [r3, #0]
			itsdk_console_return_e  lret;
			while ( c != NULL ) {
 8018cb8:	e042      	b.n	8018d40 <_itsdk_console_processLine+0x278>
			  if ( c->console_public != NULL ) {
 8018cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018cbc:	685b      	ldr	r3, [r3, #4]
 8018cbe:	2b00      	cmp	r3, #0
 8018cc0:	d01a      	beq.n	8018cf8 <_itsdk_console_processLine+0x230>
				  lret = c->console_public((char*)__console.serialBuffer,(uint8_t)__console.pBuffer);
 8018cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018cc4:	685b      	ldr	r3, [r3, #4]
 8018cc6:	4a27      	ldr	r2, [pc, #156]	; (8018d64 <_itsdk_console_processLine+0x29c>)
 8018cc8:	7812      	ldrb	r2, [r2, #0]
 8018cca:	0612      	lsls	r2, r2, #24
 8018ccc:	0e52      	lsrs	r2, r2, #25
 8018cce:	b2d2      	uxtb	r2, r2
 8018cd0:	0011      	movs	r1, r2
 8018cd2:	251f      	movs	r5, #31
 8018cd4:	197c      	adds	r4, r7, r5
 8018cd6:	4a26      	ldr	r2, [pc, #152]	; (8018d70 <_itsdk_console_processLine+0x2a8>)
 8018cd8:	0010      	movs	r0, r2
 8018cda:	4798      	blx	r3
 8018cdc:	0003      	movs	r3, r0
 8018cde:	7023      	strb	r3, [r4, #0]
				  switch ( lret ) {
 8018ce0:	197b      	adds	r3, r7, r5
 8018ce2:	781b      	ldrb	r3, [r3, #0]
 8018ce4:	2b00      	cmp	r3, #0
 8018ce6:	d002      	beq.n	8018cee <_itsdk_console_processLine+0x226>
 8018ce8:	2b02      	cmp	r3, #2
 8018cea:	d000      	beq.n	8018cee <_itsdk_console_processLine+0x226>
					  case ITSDK_CONSOLE_SUCCES:
					  case ITSDK_CONSOLE_FAILED:
						  ret = ITSDK_CONSOLE_SUCCES;
						  break;
					  default:break;
 8018cec:	e005      	b.n	8018cfa <_itsdk_console_processLine+0x232>
						  ret = ITSDK_CONSOLE_SUCCES;
 8018cee:	232b      	movs	r3, #43	; 0x2b
 8018cf0:	18fb      	adds	r3, r7, r3
 8018cf2:	2200      	movs	r2, #0
 8018cf4:	701a      	strb	r2, [r3, #0]
						  break;
 8018cf6:	e000      	b.n	8018cfa <_itsdk_console_processLine+0x232>
				   }
			  }
 8018cf8:	46c0      	nop			; (mov r8, r8)
			  if ( c->console_private != NULL ) {
 8018cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018cfc:	681b      	ldr	r3, [r3, #0]
 8018cfe:	2b00      	cmp	r3, #0
 8018d00:	d01a      	beq.n	8018d38 <_itsdk_console_processLine+0x270>
				  lret = c->console_private((char*)__console.serialBuffer,(uint8_t)__console.pBuffer);
 8018d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018d04:	681b      	ldr	r3, [r3, #0]
 8018d06:	4a17      	ldr	r2, [pc, #92]	; (8018d64 <_itsdk_console_processLine+0x29c>)
 8018d08:	7812      	ldrb	r2, [r2, #0]
 8018d0a:	0612      	lsls	r2, r2, #24
 8018d0c:	0e52      	lsrs	r2, r2, #25
 8018d0e:	b2d2      	uxtb	r2, r2
 8018d10:	0011      	movs	r1, r2
 8018d12:	251f      	movs	r5, #31
 8018d14:	197c      	adds	r4, r7, r5
 8018d16:	4a16      	ldr	r2, [pc, #88]	; (8018d70 <_itsdk_console_processLine+0x2a8>)
 8018d18:	0010      	movs	r0, r2
 8018d1a:	4798      	blx	r3
 8018d1c:	0003      	movs	r3, r0
 8018d1e:	7023      	strb	r3, [r4, #0]
				  switch ( lret ) {
 8018d20:	197b      	adds	r3, r7, r5
 8018d22:	781b      	ldrb	r3, [r3, #0]
 8018d24:	2b00      	cmp	r3, #0
 8018d26:	d002      	beq.n	8018d2e <_itsdk_console_processLine+0x266>
 8018d28:	2b02      	cmp	r3, #2
 8018d2a:	d000      	beq.n	8018d2e <_itsdk_console_processLine+0x266>
					  case ITSDK_CONSOLE_SUCCES:
					  case ITSDK_CONSOLE_FAILED:
						  ret = ITSDK_CONSOLE_SUCCES;
						  break;
					  default:break;
 8018d2c:	e005      	b.n	8018d3a <_itsdk_console_processLine+0x272>
						  ret = ITSDK_CONSOLE_SUCCES;
 8018d2e:	232b      	movs	r3, #43	; 0x2b
 8018d30:	18fb      	adds	r3, r7, r3
 8018d32:	2200      	movs	r2, #0
 8018d34:	701a      	strb	r2, [r3, #0]
						  break;
 8018d36:	e000      	b.n	8018d3a <_itsdk_console_processLine+0x272>
				   }
			  }
 8018d38:	46c0      	nop			; (mov r8, r8)
			  c = c->next;
 8018d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018d3c:	689b      	ldr	r3, [r3, #8]
 8018d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
			while ( c != NULL ) {
 8018d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018d42:	2b00      	cmp	r3, #0
 8018d44:	d1b9      	bne.n	8018cba <_itsdk_console_processLine+0x1f2>
			}
			if ( ret == ITSDK_CONSOLE_NOTFOUND ) {
 8018d46:	232b      	movs	r3, #43	; 0x2b
 8018d48:	18fb      	adds	r3, r7, r3
 8018d4a:	781b      	ldrb	r3, [r3, #0]
 8018d4c:	2b01      	cmp	r3, #1
 8018d4e:	d105      	bne.n	8018d5c <_itsdk_console_processLine+0x294>
				_itsdk_console_printf("KO\r\n");
 8018d50:	4b09      	ldr	r3, [pc, #36]	; (8018d78 <_itsdk_console_processLine+0x2b0>)
 8018d52:	0018      	movs	r0, r3
 8018d54:	f7ff fea0 	bl	8018a98 <_itsdk_console_printf>
 8018d58:	e000      	b.n	8018d5c <_itsdk_console_processLine+0x294>
	if ( __console.pBuffer == 0 ) return;
 8018d5a:	46c0      	nop			; (mov r8, r8)
			}
		}
	}

}
 8018d5c:	46bd      	mov	sp, r7
 8018d5e:	b010      	add	sp, #64	; 0x40
 8018d60:	bdb0      	pop	{r4, r5, r7, pc}
 8018d62:	46c0      	nop			; (mov r8, r8)
 8018d64:	200011a4 	.word	0x200011a4
 8018d68:	080209f4 	.word	0x080209f4
 8018d6c:	200011d4 	.word	0x200011d4
 8018d70:	200011a5 	.word	0x200011a5
 8018d74:	08020b3c 	.word	0x08020b3c
 8018d78:	080209fc 	.word	0x080209fc

08018d7c <_itsdk_console_processChar>:

/**
 * Process 1 char read
 */
static void _itsdk_console_processChar(char c) {
 8018d7c:	b580      	push	{r7, lr}
 8018d7e:	b082      	sub	sp, #8
 8018d80:	af00      	add	r7, sp, #0
 8018d82:	0002      	movs	r2, r0
 8018d84:	1dfb      	adds	r3, r7, #7
 8018d86:	701a      	strb	r2, [r3, #0]

	if ( c == '\n' || c == '\r' || c == '\0' ) {
 8018d88:	1dfb      	adds	r3, r7, #7
 8018d8a:	781b      	ldrb	r3, [r3, #0]
 8018d8c:	2b0a      	cmp	r3, #10
 8018d8e:	d007      	beq.n	8018da0 <_itsdk_console_processChar+0x24>
 8018d90:	1dfb      	adds	r3, r7, #7
 8018d92:	781b      	ldrb	r3, [r3, #0]
 8018d94:	2b0d      	cmp	r3, #13
 8018d96:	d003      	beq.n	8018da0 <_itsdk_console_processChar+0x24>
 8018d98:	1dfb      	adds	r3, r7, #7
 8018d9a:	781b      	ldrb	r3, [r3, #0]
 8018d9c:	2b00      	cmp	r3, #0
 8018d9e:	d10e      	bne.n	8018dbe <_itsdk_console_processChar+0x42>
		if ( __console.pBuffer > 0 ) {
 8018da0:	4b1c      	ldr	r3, [pc, #112]	; (8018e14 <_itsdk_console_processChar+0x98>)
 8018da2:	781b      	ldrb	r3, [r3, #0]
 8018da4:	2201      	movs	r2, #1
 8018da6:	4393      	bics	r3, r2
 8018da8:	b2db      	uxtb	r3, r3
 8018daa:	2b00      	cmp	r3, #0
 8018dac:	d02d      	beq.n	8018e0a <_itsdk_console_processChar+0x8e>
//			log_info("RET");
			_itsdk_console_processLine();
 8018dae:	f7ff fe8b 	bl	8018ac8 <_itsdk_console_processLine>
			__console.pBuffer = 0;
 8018db2:	4b18      	ldr	r3, [pc, #96]	; (8018e14 <_itsdk_console_processChar+0x98>)
 8018db4:	781a      	ldrb	r2, [r3, #0]
 8018db6:	2101      	movs	r1, #1
 8018db8:	400a      	ands	r2, r1
 8018dba:	701a      	strb	r2, [r3, #0]
		if ( __console.pBuffer > 0 ) {
 8018dbc:	e025      	b.n	8018e0a <_itsdk_console_processChar+0x8e>
		}
//		log_info("ESC");
	} else {
		if ( __console.pBuffer < ITSDK_CONSOLE_LINEBUFFER ) {
 8018dbe:	4b15      	ldr	r3, [pc, #84]	; (8018e14 <_itsdk_console_processChar+0x98>)
 8018dc0:	781b      	ldrb	r3, [r3, #0]
 8018dc2:	061b      	lsls	r3, r3, #24
 8018dc4:	0e5b      	lsrs	r3, r3, #25
 8018dc6:	b2db      	uxtb	r3, r3
 8018dc8:	2b27      	cmp	r3, #39	; 0x27
 8018dca:	d81e      	bhi.n	8018e0a <_itsdk_console_processChar+0x8e>

//			if ( c > 32 ) {
//			  log_info("[%c]",c);
//			} else log_info("(%02X)",c);

			__console.serialBuffer[__console.pBuffer] = c;
 8018dcc:	4b11      	ldr	r3, [pc, #68]	; (8018e14 <_itsdk_console_processChar+0x98>)
 8018dce:	781b      	ldrb	r3, [r3, #0]
 8018dd0:	061b      	lsls	r3, r3, #24
 8018dd2:	0e5b      	lsrs	r3, r3, #25
 8018dd4:	b2db      	uxtb	r3, r3
 8018dd6:	001a      	movs	r2, r3
 8018dd8:	4b0e      	ldr	r3, [pc, #56]	; (8018e14 <_itsdk_console_processChar+0x98>)
 8018dda:	189b      	adds	r3, r3, r2
 8018ddc:	1dfa      	adds	r2, r7, #7
 8018dde:	7812      	ldrb	r2, [r2, #0]
 8018de0:	705a      	strb	r2, [r3, #1]
			__console.pBuffer++;
 8018de2:	4b0c      	ldr	r3, [pc, #48]	; (8018e14 <_itsdk_console_processChar+0x98>)
 8018de4:	781b      	ldrb	r3, [r3, #0]
 8018de6:	061b      	lsls	r3, r3, #24
 8018de8:	0e5b      	lsrs	r3, r3, #25
 8018dea:	b2db      	uxtb	r3, r3
 8018dec:	3301      	adds	r3, #1
 8018dee:	1c1a      	adds	r2, r3, #0
 8018df0:	237f      	movs	r3, #127	; 0x7f
 8018df2:	4013      	ands	r3, r2
 8018df4:	b2da      	uxtb	r2, r3
 8018df6:	4b07      	ldr	r3, [pc, #28]	; (8018e14 <_itsdk_console_processChar+0x98>)
 8018df8:	1890      	adds	r0, r2, r2
 8018dfa:	781a      	ldrb	r2, [r3, #0]
 8018dfc:	2101      	movs	r1, #1
 8018dfe:	400a      	ands	r2, r1
 8018e00:	1c11      	adds	r1, r2, #0
 8018e02:	1c02      	adds	r2, r0, #0
 8018e04:	430a      	orrs	r2, r1
 8018e06:	701a      	strb	r2, [r3, #0]
		}
	}

}
 8018e08:	e7ff      	b.n	8018e0a <_itsdk_console_processChar+0x8e>
 8018e0a:	46c0      	nop			; (mov r8, r8)
 8018e0c:	46bd      	mov	sp, r7
 8018e0e:	b002      	add	sp, #8
 8018e10:	bd80      	pop	{r7, pc}
 8018e12:	46c0      	nop			; (mov r8, r8)
 8018e14:	200011a4 	.word	0x200011a4

08018e18 <itsdk_console_registerCommand>:

/**
 * Add an action to the chain, the action **must be** static
 * The action list is added at end of the chain
 */
void itsdk_console_registerCommand(itsdk_console_chain_t * chain) {
 8018e18:	b580      	push	{r7, lr}
 8018e1a:	b084      	sub	sp, #16
 8018e1c:	af00      	add	r7, sp, #0
 8018e1e:	6078      	str	r0, [r7, #4]
	itsdk_console_chain_t * c = &__console_head_chain;
 8018e20:	4b13      	ldr	r3, [pc, #76]	; (8018e70 <itsdk_console_registerCommand+0x58>)
 8018e22:	60fb      	str	r3, [r7, #12]
	if ( c->console_private != _itsdk_console_private ) {
 8018e24:	68fb      	ldr	r3, [r7, #12]
 8018e26:	681a      	ldr	r2, [r3, #0]
 8018e28:	4b12      	ldr	r3, [pc, #72]	; (8018e74 <itsdk_console_registerCommand+0x5c>)
 8018e2a:	429a      	cmp	r2, r3
 8018e2c:	d008      	beq.n	8018e40 <itsdk_console_registerCommand+0x28>
		ITSDK_ERROR_REPORT(ITSDK_ERROR_CONSOLE_NOTSETUP,0);
 8018e2e:	4b12      	ldr	r3, [pc, #72]	; (8018e78 <itsdk_console_registerCommand+0x60>)
 8018e30:	2100      	movs	r1, #0
 8018e32:	0018      	movs	r0, r3
 8018e34:	f002 fe92 	bl	801bb5c <itsdk_error_report>
	}

	while ( c->next != NULL && c->next != chain ) {
 8018e38:	e002      	b.n	8018e40 <itsdk_console_registerCommand+0x28>
	  c = c->next;
 8018e3a:	68fb      	ldr	r3, [r7, #12]
 8018e3c:	689b      	ldr	r3, [r3, #8]
 8018e3e:	60fb      	str	r3, [r7, #12]
	while ( c->next != NULL && c->next != chain ) {
 8018e40:	68fb      	ldr	r3, [r7, #12]
 8018e42:	689b      	ldr	r3, [r3, #8]
 8018e44:	2b00      	cmp	r3, #0
 8018e46:	d004      	beq.n	8018e52 <itsdk_console_registerCommand+0x3a>
 8018e48:	68fb      	ldr	r3, [r7, #12]
 8018e4a:	689b      	ldr	r3, [r3, #8]
 8018e4c:	687a      	ldr	r2, [r7, #4]
 8018e4e:	429a      	cmp	r2, r3
 8018e50:	d1f3      	bne.n	8018e3a <itsdk_console_registerCommand+0x22>
	}
	if ( c->next != chain ) {
 8018e52:	68fb      	ldr	r3, [r7, #12]
 8018e54:	689b      	ldr	r3, [r3, #8]
 8018e56:	687a      	ldr	r2, [r7, #4]
 8018e58:	429a      	cmp	r2, r3
 8018e5a:	d005      	beq.n	8018e68 <itsdk_console_registerCommand+0x50>
		// the Action is not already existing
		c->next=chain;
 8018e5c:	68fb      	ldr	r3, [r7, #12]
 8018e5e:	687a      	ldr	r2, [r7, #4]
 8018e60:	609a      	str	r2, [r3, #8]
		chain->next = NULL;
 8018e62:	687b      	ldr	r3, [r7, #4]
 8018e64:	2200      	movs	r2, #0
 8018e66:	609a      	str	r2, [r3, #8]
	}
}
 8018e68:	46c0      	nop			; (mov r8, r8)
 8018e6a:	46bd      	mov	sp, r7
 8018e6c:	b004      	add	sp, #16
 8018e6e:	bd80      	pop	{r7, pc}
 8018e70:	200011d4 	.word	0x200011d4
 8018e74:	08018645 	.word	0x08018645
 8018e78:	c0000003 	.word	0xc0000003

08018e7c <eeprom_write_config>:
 * ---> ErrorReport
 * ---> Sigfox Nvm
 * ---> Configuration (*) here
 * ---> UserLand
 */
itsdk_bool_e eeprom_write_config(void * data, uint16_t len, uint8_t version) {
 8018e7c:	b590      	push	{r4, r7, lr}
 8018e7e:	b089      	sub	sp, #36	; 0x24
 8018e80:	af00      	add	r7, sp, #0
 8018e82:	6078      	str	r0, [r7, #4]
 8018e84:	0008      	movs	r0, r1
 8018e86:	0011      	movs	r1, r2
 8018e88:	1cbb      	adds	r3, r7, #2
 8018e8a:	1c02      	adds	r2, r0, #0
 8018e8c:	801a      	strh	r2, [r3, #0]
 8018e8e:	1c7b      	adds	r3, r7, #1
 8018e90:	1c0a      	adds	r2, r1, #0
 8018e92:	701a      	strb	r2, [r3, #0]
	t_eeprom_entry t;
	t.magic = ITDT_EEPROM_MAGIC_CONFIG;
 8018e94:	2410      	movs	r4, #16
 8018e96:	193b      	adds	r3, r7, r4
 8018e98:	4a17      	ldr	r2, [pc, #92]	; (8018ef8 <eeprom_write_config+0x7c>)
 8018e9a:	801a      	strh	r2, [r3, #0]
	t.size = len;
 8018e9c:	193b      	adds	r3, r7, r4
 8018e9e:	1cba      	adds	r2, r7, #2
 8018ea0:	8812      	ldrh	r2, [r2, #0]
 8018ea2:	809a      	strh	r2, [r3, #4]
	t.version = version;
 8018ea4:	193b      	adds	r3, r7, r4
 8018ea6:	1c7a      	adds	r2, r7, #1
 8018ea8:	7812      	ldrb	r2, [r2, #0]
 8018eaa:	709a      	strb	r2, [r3, #2]
	t.crc32 = itsdk_computeCRC32((uint8_t*)data, len);
 8018eac:	1cbb      	adds	r3, r7, #2
 8018eae:	881a      	ldrh	r2, [r3, #0]
 8018eb0:	687b      	ldr	r3, [r7, #4]
 8018eb2:	0011      	movs	r1, r2
 8018eb4:	0018      	movs	r0, r3
 8018eb6:	f003 fd09 	bl	801c8cc <itsdk_computeCRC32>
 8018eba:	0002      	movs	r2, r0
 8018ebc:	193b      	adds	r3, r7, r4
 8018ebe:	609a      	str	r2, [r3, #8]

	uint32_t offset = 0;
 8018ec0:	2300      	movs	r3, #0
 8018ec2:	60fb      	str	r3, [r7, #12]
	eeprom_getConfigOffset(&offset);
 8018ec4:	230c      	movs	r3, #12
 8018ec6:	18fb      	adds	r3, r7, r3
 8018ec8:	0018      	movs	r0, r3
 8018eca:	f000 f88f 	bl	8018fec <eeprom_getConfigOffset>

	// Write the data header
	_eeprom_write(ITDT_EEPROM_BANK0, offset, (void *) &t, sizeof(t));
 8018ece:	68f9      	ldr	r1, [r7, #12]
 8018ed0:	193a      	adds	r2, r7, r4
 8018ed2:	2310      	movs	r3, #16
 8018ed4:	2000      	movs	r0, #0
 8018ed6:	f005 fb43 	bl	801e560 <_eeprom_write>
	// Write data
	_eeprom_write(ITDT_EEPROM_BANK0, offset+sizeof(t), (void *) data, len);
 8018eda:	68fb      	ldr	r3, [r7, #12]
 8018edc:	3310      	adds	r3, #16
 8018ede:	0019      	movs	r1, r3
 8018ee0:	1cbb      	adds	r3, r7, #2
 8018ee2:	881b      	ldrh	r3, [r3, #0]
 8018ee4:	687a      	ldr	r2, [r7, #4]
 8018ee6:	2000      	movs	r0, #0
 8018ee8:	f005 fb3a 	bl	801e560 <_eeprom_write>

	_LOG_EEPROM(("[NVM][I] Write %d bytes crc %0X\r\n",len,t.crc32));

	return BOOL_TRUE;
 8018eec:	2301      	movs	r3, #1
}
 8018eee:	0018      	movs	r0, r3
 8018ef0:	46bd      	mov	sp, r7
 8018ef2:	b009      	add	sp, #36	; 0x24
 8018ef4:	bd90      	pop	{r4, r7, pc}
 8018ef6:	46c0      	nop			; (mov r8, r8)
 8018ef8:	ffffa5fc 	.word	0xffffa5fc

08018efc <eeprom_read_config>:
 * ---> Configuration (*) here
 * ---> UserLand
 * BypassTest option allows to read the configuration even if the size has changed an dcrc is invalid
 * Version change is detected with a normal read (bypassTest=BOOL_TRUE), get a False with versiuonR != 0
 */
itsdk_bool_e eeprom_read_config(void * data, uint16_t len, uint8_t version, uint8_t * versionR, itsdk_bool_e bypassTest) {
 8018efc:	b5b0      	push	{r4, r5, r7, lr}
 8018efe:	b08a      	sub	sp, #40	; 0x28
 8018f00:	af00      	add	r7, sp, #0
 8018f02:	60f8      	str	r0, [r7, #12]
 8018f04:	0008      	movs	r0, r1
 8018f06:	0011      	movs	r1, r2
 8018f08:	607b      	str	r3, [r7, #4]
 8018f0a:	230a      	movs	r3, #10
 8018f0c:	18fb      	adds	r3, r7, r3
 8018f0e:	1c02      	adds	r2, r0, #0
 8018f10:	801a      	strh	r2, [r3, #0]
 8018f12:	2309      	movs	r3, #9
 8018f14:	18fb      	adds	r3, r7, r3
 8018f16:	1c0a      	adds	r2, r1, #0
 8018f18:	701a      	strb	r2, [r3, #0]
	t_eeprom_entry t;
	uint32_t offset = 0;
 8018f1a:	2300      	movs	r3, #0
 8018f1c:	613b      	str	r3, [r7, #16]
	eeprom_getConfigOffset(&offset);
 8018f1e:	2310      	movs	r3, #16
 8018f20:	18fb      	adds	r3, r7, r3
 8018f22:	0018      	movs	r0, r3
 8018f24:	f000 f862 	bl	8018fec <eeprom_getConfigOffset>

	// Read the data header
	_eeprom_read(ITDT_EEPROM_BANK0, offset, (void *) &t, sizeof(t));
 8018f28:	6939      	ldr	r1, [r7, #16]
 8018f2a:	2414      	movs	r4, #20
 8018f2c:	193a      	adds	r2, r7, r4
 8018f2e:	2310      	movs	r3, #16
 8018f30:	2000      	movs	r0, #0
 8018f32:	f005 fbb9 	bl	801e6a8 <_eeprom_read>

	// Verify different element
	if ( t.magic != ITDT_EEPROM_MAGIC_CONFIG ) {
 8018f36:	193b      	adds	r3, r7, r4
 8018f38:	881b      	ldrh	r3, [r3, #0]
 8018f3a:	4a2b      	ldr	r2, [pc, #172]	; (8018fe8 <eeprom_read_config+0xec>)
 8018f3c:	4293      	cmp	r3, r2
 8018f3e:	d004      	beq.n	8018f4a <eeprom_read_config+0x4e>
		_LOG_EEPROM(("[NVM][I] Read invalid magic\r\n"));
		*versionR=0;
 8018f40:	687b      	ldr	r3, [r7, #4]
 8018f42:	2200      	movs	r2, #0
 8018f44:	701a      	strb	r2, [r3, #0]
		return BOOL_FALSE;
 8018f46:	2300      	movs	r3, #0
 8018f48:	e049      	b.n	8018fde <eeprom_read_config+0xe2>
	}
	*versionR=t.version;
 8018f4a:	2114      	movs	r1, #20
 8018f4c:	187b      	adds	r3, r7, r1
 8018f4e:	789a      	ldrb	r2, [r3, #2]
 8018f50:	687b      	ldr	r3, [r7, #4]
 8018f52:	701a      	strb	r2, [r3, #0]

	if ( t.version != version ) {
 8018f54:	187b      	adds	r3, r7, r1
 8018f56:	789b      	ldrb	r3, [r3, #2]
 8018f58:	2209      	movs	r2, #9
 8018f5a:	18ba      	adds	r2, r7, r2
 8018f5c:	7812      	ldrb	r2, [r2, #0]
 8018f5e:	429a      	cmp	r2, r3
 8018f60:	d001      	beq.n	8018f66 <eeprom_read_config+0x6a>
		_LOG_EEPROM(("[NVM][I] Read invalid version (%d vs %d)\r\n",version,t.version));
		return BOOL_FALSE;
 8018f62:	2300      	movs	r3, #0
 8018f64:	e03b      	b.n	8018fde <eeprom_read_config+0xe2>
	}

	if ( t.size != len && ! bypassTest ) {
 8018f66:	2314      	movs	r3, #20
 8018f68:	18fb      	adds	r3, r7, r3
 8018f6a:	889b      	ldrh	r3, [r3, #4]
 8018f6c:	220a      	movs	r2, #10
 8018f6e:	18ba      	adds	r2, r7, r2
 8018f70:	8812      	ldrh	r2, [r2, #0]
 8018f72:	429a      	cmp	r2, r3
 8018f74:	d009      	beq.n	8018f8a <eeprom_read_config+0x8e>
 8018f76:	2330      	movs	r3, #48	; 0x30
 8018f78:	2208      	movs	r2, #8
 8018f7a:	4694      	mov	ip, r2
 8018f7c:	44bc      	add	ip, r7
 8018f7e:	4463      	add	r3, ip
 8018f80:	781b      	ldrb	r3, [r3, #0]
 8018f82:	2b00      	cmp	r3, #0
 8018f84:	d101      	bne.n	8018f8a <eeprom_read_config+0x8e>
		_LOG_EEPROM(("[NVM][I] Read invalid size (%d vs %d)\r\n",len,t.size));
		return BOOL_FALSE;
 8018f86:	2300      	movs	r3, #0
 8018f88:	e029      	b.n	8018fde <eeprom_read_config+0xe2>
	} else {
		len = t.size;
 8018f8a:	200a      	movs	r0, #10
 8018f8c:	183b      	adds	r3, r7, r0
 8018f8e:	2514      	movs	r5, #20
 8018f90:	197a      	adds	r2, r7, r5
 8018f92:	8892      	ldrh	r2, [r2, #4]
 8018f94:	801a      	strh	r2, [r3, #0]
	}

	// Read the data
	_eeprom_read(ITDT_EEPROM_BANK0, offset+sizeof(t), (void *) data, len);
 8018f96:	693b      	ldr	r3, [r7, #16]
 8018f98:	3310      	adds	r3, #16
 8018f9a:	0019      	movs	r1, r3
 8018f9c:	0004      	movs	r4, r0
 8018f9e:	183b      	adds	r3, r7, r0
 8018fa0:	881b      	ldrh	r3, [r3, #0]
 8018fa2:	68fa      	ldr	r2, [r7, #12]
 8018fa4:	2000      	movs	r0, #0
 8018fa6:	f005 fb7f 	bl	801e6a8 <_eeprom_read>
	uint32_t _crc = itsdk_computeCRC32((uint8_t*)data, len);
 8018faa:	0020      	movs	r0, r4
 8018fac:	183b      	adds	r3, r7, r0
 8018fae:	881a      	ldrh	r2, [r3, #0]
 8018fb0:	68fb      	ldr	r3, [r7, #12]
 8018fb2:	0011      	movs	r1, r2
 8018fb4:	0018      	movs	r0, r3
 8018fb6:	f003 fc89 	bl	801c8cc <itsdk_computeCRC32>
 8018fba:	0003      	movs	r3, r0
 8018fbc:	627b      	str	r3, [r7, #36]	; 0x24

	if ( t.crc32 != _crc && ! bypassTest ) {
 8018fbe:	197b      	adds	r3, r7, r5
 8018fc0:	689b      	ldr	r3, [r3, #8]
 8018fc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018fc4:	429a      	cmp	r2, r3
 8018fc6:	d009      	beq.n	8018fdc <eeprom_read_config+0xe0>
 8018fc8:	2330      	movs	r3, #48	; 0x30
 8018fca:	2208      	movs	r2, #8
 8018fcc:	4694      	mov	ip, r2
 8018fce:	44bc      	add	ip, r7
 8018fd0:	4463      	add	r3, ip
 8018fd2:	781b      	ldrb	r3, [r3, #0]
 8018fd4:	2b00      	cmp	r3, #0
 8018fd6:	d101      	bne.n	8018fdc <eeprom_read_config+0xe0>
		_LOG_EEPROM(("[NVM][I] Read invalid crc\r\n"));
		return BOOL_FALSE;
 8018fd8:	2300      	movs	r3, #0
 8018fda:	e000      	b.n	8018fde <eeprom_read_config+0xe2>
	}

	return BOOL_TRUE;
 8018fdc:	2301      	movs	r3, #1
}
 8018fde:	0018      	movs	r0, r3
 8018fe0:	46bd      	mov	sp, r7
 8018fe2:	b00a      	add	sp, #40	; 0x28
 8018fe4:	bdb0      	pop	{r4, r5, r7, pc}
 8018fe6:	46c0      	nop			; (mov r8, r8)
 8018fe8:	0000a5fc 	.word	0x0000a5fc

08018fec <eeprom_getConfigOffset>:

/**
 * Compute the EEPROM Config offset
 * Memory have SecureStore then Log then Sigfox config, then Device config
 */
itsdk_bool_e eeprom_getConfigOffset(uint32_t * _offset) {
 8018fec:	b580      	push	{r7, lr}
 8018fee:	b086      	sub	sp, #24
 8018ff0:	af00      	add	r7, sp, #0
 8018ff2:	6078      	str	r0, [r7, #4]
  uint32_t sstore=0, ssError=0, sSigfox=0;
 8018ff4:	2300      	movs	r3, #0
 8018ff6:	613b      	str	r3, [r7, #16]
 8018ff8:	2300      	movs	r3, #0
 8018ffa:	60fb      	str	r3, [r7, #12]
 8018ffc:	2300      	movs	r3, #0
 8018ffe:	617b      	str	r3, [r7, #20]
  #if ITSDK_WITH_SECURESTORE == __ENABLE
	itsdk_secstore_getStoreSize(&sstore);
 8019000:	2310      	movs	r3, #16
 8019002:	18fb      	adds	r3, r7, r3
 8019004:	0018      	movs	r0, r3
 8019006:	f000 fde6 	bl	8019bd6 <itsdk_secstore_getStoreSize>
  #endif
  #if (ITSDK_WITH_ERROR_RPT == __ENABLE) && (ITSDK_ERROR_USE_EPROM == __ENABLE)
	itsdk_error_getSize(&ssError);
 801900a:	230c      	movs	r3, #12
 801900c:	18fb      	adds	r3, r7, r3
 801900e:	0018      	movs	r0, r3
 8019010:	f002 fec9 	bl	801bda6 <itsdk_error_getSize>
  #endif
  #if (ITSDK_WITH_SIGFOX_LIB == __ENABLE)
	itsdk_sigfox_getNvmSize(&sSigfox);
  #endif
  *_offset += sstore + ssError + sSigfox;
 8019014:	687b      	ldr	r3, [r7, #4]
 8019016:	681a      	ldr	r2, [r3, #0]
 8019018:	6939      	ldr	r1, [r7, #16]
 801901a:	68fb      	ldr	r3, [r7, #12]
 801901c:	18c9      	adds	r1, r1, r3
 801901e:	697b      	ldr	r3, [r7, #20]
 8019020:	18cb      	adds	r3, r1, r3
 8019022:	18d2      	adds	r2, r2, r3
 8019024:	687b      	ldr	r3, [r7, #4]
 8019026:	601a      	str	r2, [r3, #0]
  return BOOL_TRUE;
 8019028:	2301      	movs	r3, #1
}
 801902a:	0018      	movs	r0, r3
 801902c:	46bd      	mov	sp, r7
 801902e:	b006      	add	sp, #24
 8019030:	bd80      	pop	{r7, pc}

08019032 <eeprom_getConfigSize>:

/**
 * Get the EEprom config size from the config header
 * it includes the header size
 */
itsdk_bool_e eeprom_getConfigSize(uint32_t * _size) {
 8019032:	b590      	push	{r4, r7, lr}
 8019034:	b089      	sub	sp, #36	; 0x24
 8019036:	af00      	add	r7, sp, #0
 8019038:	6078      	str	r0, [r7, #4]
	t_eeprom_entry t;

	uint32_t offset = 0;
 801903a:	2300      	movs	r3, #0
 801903c:	60fb      	str	r3, [r7, #12]
	eeprom_getConfigOffset(&offset);
 801903e:	230c      	movs	r3, #12
 8019040:	18fb      	adds	r3, r7, r3
 8019042:	0018      	movs	r0, r3
 8019044:	f7ff ffd2 	bl	8018fec <eeprom_getConfigOffset>

	// Read the data header
	_eeprom_read(ITDT_EEPROM_BANK0, offset, (void *) &t, sizeof(t));
 8019048:	68f9      	ldr	r1, [r7, #12]
 801904a:	2410      	movs	r4, #16
 801904c:	193a      	adds	r2, r7, r4
 801904e:	2310      	movs	r3, #16
 8019050:	2000      	movs	r0, #0
 8019052:	f005 fb29 	bl	801e6a8 <_eeprom_read>

	*_size = sizeof(t) + t.size;
 8019056:	193b      	adds	r3, r7, r4
 8019058:	889b      	ldrh	r3, [r3, #4]
 801905a:	3310      	adds	r3, #16
 801905c:	001a      	movs	r2, r3
 801905e:	687b      	ldr	r3, [r7, #4]
 8019060:	601a      	str	r2, [r3, #0]
	return BOOL_TRUE;
 8019062:	2301      	movs	r3, #1
}
 8019064:	0018      	movs	r0, r3
 8019066:	46bd      	mov	sp, r7
 8019068:	b009      	add	sp, #36	; 0x24
 801906a:	bd90      	pop	{r4, r7, pc}

0801906c <eeprom_clearAllEprom>:
}

/**
 * Clear (write 0) into the whole BANK0
 */
void eeprom_clearAllEprom() {
 801906c:	b580      	push	{r7, lr}
 801906e:	b082      	sub	sp, #8
 8019070:	af00      	add	r7, sp, #0
	uint32_t v  = 0;
 8019072:	2300      	movs	r3, #0
 8019074:	603b      	str	r3, [r7, #0]
	for ( int i = 0 ; i < ITSDK_EPROM_SIZE ; i+=sizeof(v) ) {
 8019076:	2300      	movs	r3, #0
 8019078:	607b      	str	r3, [r7, #4]
 801907a:	e008      	b.n	801908e <eeprom_clearAllEprom+0x22>
		_eeprom_write(ITDT_EEPROM_BANK0, i, (void *) &v, sizeof(v));
 801907c:	6879      	ldr	r1, [r7, #4]
 801907e:	003a      	movs	r2, r7
 8019080:	2304      	movs	r3, #4
 8019082:	2000      	movs	r0, #0
 8019084:	f005 fa6c 	bl	801e560 <_eeprom_write>
	for ( int i = 0 ; i < ITSDK_EPROM_SIZE ; i+=sizeof(v) ) {
 8019088:	687b      	ldr	r3, [r7, #4]
 801908a:	3304      	adds	r3, #4
 801908c:	607b      	str	r3, [r7, #4]
 801908e:	687b      	ldr	r3, [r7, #4]
 8019090:	4a03      	ldr	r2, [pc, #12]	; (80190a0 <eeprom_clearAllEprom+0x34>)
 8019092:	4293      	cmp	r3, r2
 8019094:	ddf2      	ble.n	801907c <eeprom_clearAllEprom+0x10>
	}
}
 8019096:	46c0      	nop			; (mov r8, r8)
 8019098:	46bd      	mov	sp, r7
 801909a:	b002      	add	sp, #8
 801909c:	bd80      	pop	{r7, pc}
 801909e:	46c0      	nop			; (mov r8, r8)
 80190a0:	000017ff 	.word	0x000017ff

080190a4 <itsdk_config_sdk_resetToFactory>:

/**
 * The SDK config initialization function
 */
#if ITSDK_CONFIGURATION_MODE != __CONFIG_STATIC
	static itsdk_config_ret_e itsdk_config_sdk_resetToFactory() {
 80190a4:	b580      	push	{r7, lr}
 80190a6:	af00      	add	r7, sp, #0
		ITSDK_ERROR_REPORT(ITSDK_ERROR_CONFIG_SDKFACT_DEFAULT,0);
 80190a8:	4b1b      	ldr	r3, [pc, #108]	; (8019118 <itsdk_config_sdk_resetToFactory+0x74>)
 80190aa:	2100      	movs	r1, #0
 80190ac:	0018      	movs	r0, r3
 80190ae:	f002 fd55 	bl	801bb5c <itsdk_error_report>

		itsdk_config.sdk.version = ITSDK_CONFIGURATION_SDK_VERSION;
 80190b2:	4b1a      	ldr	r3, [pc, #104]	; (801911c <itsdk_config_sdk_resetToFactory+0x78>)
 80190b4:	2216      	movs	r2, #22
 80190b6:	701a      	strb	r2, [r3, #0]
		itsdk_config.sdk.size = sizeof(itsdk_configuration_internal_t);
 80190b8:	4b18      	ldr	r3, [pc, #96]	; (801911c <itsdk_config_sdk_resetToFactory+0x78>)
 80190ba:	2218      	movs	r2, #24
 80190bc:	805a      	strh	r2, [r3, #2]
		// ----------- Network choice ----------------------------------------------------
		#if ITSDK_WITH_SIGFOX_LIB == __ENABLE || ITSDK_WITH_LORAWAN_LIB == __ENABLE
		itsdk_config.sdk.activeNetwork = ITSDK_DEFAULT_NETWORK;
 80190be:	4b17      	ldr	r3, [pc, #92]	; (801911c <itsdk_config_sdk_resetToFactory+0x78>)
 80190c0:	2202      	movs	r2, #2
 80190c2:	80da      	strh	r2, [r3, #6]
		#endif
		// ----------- LoRaWan settings --------------------------------------------------
		#if ITSDK_WITH_LORAWAN_LIB == __ENABLE
		itsdk_config.sdk.lorawan.adrMode = ITSDK_LORAWAN_ADR;
 80190c4:	4b15      	ldr	r3, [pc, #84]	; (801911c <itsdk_config_sdk_resetToFactory+0x78>)
 80190c6:	7a9a      	ldrb	r2, [r3, #10]
 80190c8:	213f      	movs	r1, #63	; 0x3f
 80190ca:	400a      	ands	r2, r1
 80190cc:	1c11      	adds	r1, r2, #0
 80190ce:	2240      	movs	r2, #64	; 0x40
 80190d0:	430a      	orrs	r2, r1
 80190d2:	729a      	strb	r2, [r3, #10]
		itsdk_config.sdk.lorawan.devEuiType = ITSDK_LORAWAN_DEVEUI_SRC;
 80190d4:	4b11      	ldr	r3, [pc, #68]	; (801911c <itsdk_config_sdk_resetToFactory+0x78>)
 80190d6:	7a9a      	ldrb	r2, [r3, #10]
 80190d8:	2130      	movs	r1, #48	; 0x30
 80190da:	438a      	bics	r2, r1
 80190dc:	1c11      	adds	r1, r2, #0
 80190de:	2210      	movs	r2, #16
 80190e0:	430a      	orrs	r2, r1
 80190e2:	729a      	strb	r2, [r3, #10]
		itsdk_config.sdk.lorawan.joinMode = ITSDK_LORAWAN_ACTIVATION;
 80190e4:	4b0d      	ldr	r3, [pc, #52]	; (801911c <itsdk_config_sdk_resetToFactory+0x78>)
 80190e6:	7a9a      	ldrb	r2, [r3, #10]
 80190e8:	2103      	movs	r1, #3
 80190ea:	438a      	bics	r2, r1
 80190ec:	1c11      	adds	r1, r2, #0
 80190ee:	2201      	movs	r2, #1
 80190f0:	430a      	orrs	r2, r1
 80190f2:	729a      	strb	r2, [r3, #10]
		itsdk_config.sdk.lorawan.networkType = ITSDK_LORAWAN_NETWORKTYPE;
 80190f4:	4b09      	ldr	r3, [pc, #36]	; (801911c <itsdk_config_sdk_resetToFactory+0x78>)
 80190f6:	7a9a      	ldrb	r2, [r3, #10]
 80190f8:	210c      	movs	r1, #12
 80190fa:	438a      	bics	r2, r1
 80190fc:	1c11      	adds	r1, r2, #0
 80190fe:	2204      	movs	r2, #4
 8019100:	430a      	orrs	r2, r1
 8019102:	729a      	strb	r2, [r3, #10]
		itsdk_config.sdk.lorawan.retries = ITSDK_LORAWAN_CNF_RETRY;
 8019104:	4b05      	ldr	r3, [pc, #20]	; (801911c <itsdk_config_sdk_resetToFactory+0x78>)
 8019106:	2200      	movs	r2, #0
 8019108:	72da      	strb	r2, [r3, #11]
		itsdk_config.sdk.activeRegion = ITSDK_DEFAULT_REGION;
 801910a:	4b04      	ldr	r3, [pc, #16]	; (801911c <itsdk_config_sdk_resetToFactory+0x78>)
 801910c:	2220      	movs	r2, #32
 801910e:	811a      	strh	r2, [r3, #8]
		  bcopy(pac,itsdk_config.sdk.sigfox.initialPac,8);
		  itsdk_config.sdk.sigfox.deviceId = ITSDK_SIGFOX_ID;
		#endif

		#endif
		return CONFIG_RESTORED_FROM_FACTORY;
 8019110:	2302      	movs	r3, #2
	}
 8019112:	0018      	movs	r0, r3
 8019114:	46bd      	mov	sp, r7
 8019116:	bd80      	pop	{r7, pc}
 8019118:	10000073 	.word	0x10000073
 801911c:	20001688 	.word	0x20001688

08019120 <itsdk_config_app_resetToFactory>:

	#if ITSDK_WITH_CONFIGURATION_APP == __ENABLE
		/**
		 * This function need to be overide - reset the app to factory default
		 */
		__weak itsdk_config_ret_e itsdk_config_app_resetToFactory() {
 8019120:	b580      	push	{r7, lr}
 8019122:	af00      	add	r7, sp, #0
			itsdk_config.app.version = ITSDK_CONFIGURATION_APP_VERSION;
 8019124:	4b05      	ldr	r3, [pc, #20]	; (801913c <itsdk_config_app_resetToFactory+0x1c>)
 8019126:	2201      	movs	r2, #1
 8019128:	761a      	strb	r2, [r3, #24]
		    //ITSDK_ERROR_REPORT(ITSDK_ERROR_CONFIG_SDKFACT_DEFAULT,1);
			ITSDK_ERROR_REPORT(ITSDK_ERROR_CONFIG_OVERRIDE_MISS,0);
 801912a:	4b05      	ldr	r3, [pc, #20]	; (8019140 <itsdk_config_app_resetToFactory+0x20>)
 801912c:	2100      	movs	r1, #0
 801912e:	0018      	movs	r0, r3
 8019130:	f002 fd14 	bl	801bb5c <itsdk_error_report>
			return CONFIG_FAILED;
 8019134:	2304      	movs	r3, #4
		}
 8019136:	0018      	movs	r0, r3
 8019138:	46bd      	mov	sp, r7
 801913a:	bd80      	pop	{r7, pc}
 801913c:	20001688 	.word	0x20001688
 8019140:	40000070 	.word	0x40000070

08019144 <itsdk_config_app_upgradeConfiguration>:
		/**
		 * This function need to be overide - upgrade the app configuration
		 */
		__weak itsdk_config_ret_e itsdk_config_app_upgradeConfiguration() {
 8019144:	b580      	push	{r7, lr}
 8019146:	af00      	add	r7, sp, #0
			itsdk_config.app.version = ITSDK_CONFIGURATION_APP_VERSION;
 8019148:	4b05      	ldr	r3, [pc, #20]	; (8019160 <itsdk_config_app_upgradeConfiguration+0x1c>)
 801914a:	2201      	movs	r2, #1
 801914c:	761a      	strb	r2, [r3, #24]
		    //ITSDK_ERROR_REPORT(ITSDK_ERROR_CONFIG_APPCNF_UPGRADED,1);
			ITSDK_ERROR_REPORT(ITSDK_ERROR_CONFIG_OVERRIDE_MISS,0);
 801914e:	4b05      	ldr	r3, [pc, #20]	; (8019164 <itsdk_config_app_upgradeConfiguration+0x20>)
 8019150:	2100      	movs	r1, #0
 8019152:	0018      	movs	r0, r3
 8019154:	f002 fd02 	bl	801bb5c <itsdk_error_report>
			return CONFIG_FAILED;
 8019158:	2304      	movs	r3, #4
		}
 801915a:	0018      	movs	r0, r3
 801915c:	46bd      	mov	sp, r7
 801915e:	bd80      	pop	{r7, pc}
 8019160:	20001688 	.word	0x20001688
 8019164:	40000070 	.word	0x40000070

08019168 <itsdk_config_resetToFactory>:
	#endif

	/**
	 * Reset to factory default update eeprom & shadow
	 */
	itsdk_config_ret_e itsdk_config_resetToFactory() {
 8019168:	b5b0      	push	{r4, r5, r7, lr}
 801916a:	af00      	add	r7, sp, #0
		 itsdk_config_sdk_resetToFactory();
 801916c:	f7ff ff9a 	bl	80190a4 <itsdk_config_sdk_resetToFactory>
		 #if ITSDK_WITH_CONFIGURATION_APP == __ENABLE
		 itsdk_config_app_resetToFactory();
 8019170:	f7ff ffd6 	bl	8019120 <itsdk_config_app_resetToFactory>
		 #endif
		 #if ITSDK_CONFIGURATION_MODE == __CONFIG_EEPROM
		 eeprom_write_config(&itsdk_config, sizeof(itsdk_configuration_nvm_t), ITSDK_CONFIGURATION_MNG_VERSION);
 8019174:	4b0b      	ldr	r3, [pc, #44]	; (80191a4 <itsdk_config_resetToFactory+0x3c>)
 8019176:	2201      	movs	r2, #1
 8019178:	211c      	movs	r1, #28
 801917a:	0018      	movs	r0, r3
 801917c:	f7ff fe7e 	bl	8018e7c <eeprom_write_config>
		 #endif
	     bcopy(&itsdk_config,&itsdk_config_shadow,sizeof(itsdk_configuration_nvm_t));
 8019180:	4b09      	ldr	r3, [pc, #36]	; (80191a8 <itsdk_config_resetToFactory+0x40>)
 8019182:	4a08      	ldr	r2, [pc, #32]	; (80191a4 <itsdk_config_resetToFactory+0x3c>)
 8019184:	ca13      	ldmia	r2!, {r0, r1, r4}
 8019186:	c313      	stmia	r3!, {r0, r1, r4}
 8019188:	ca13      	ldmia	r2!, {r0, r1, r4}
 801918a:	c313      	stmia	r3!, {r0, r1, r4}
 801918c:	6812      	ldr	r2, [r2, #0]
 801918e:	601a      	str	r2, [r3, #0]
		 ITSDK_ERROR_REPORT(ITSDK_ERROR_CONFIG_FACTORY_DEFAULT,3);
 8019190:	4b06      	ldr	r3, [pc, #24]	; (80191ac <itsdk_config_resetToFactory+0x44>)
 8019192:	2103      	movs	r1, #3
 8019194:	0018      	movs	r0, r3
 8019196:	f002 fce1 	bl	801bb5c <itsdk_error_report>
	     return CONFIG_SUCCESS;
 801919a:	2300      	movs	r3, #0
	}
 801919c:	0018      	movs	r0, r3
 801919e:	46bd      	mov	sp, r7
 80191a0:	bdb0      	pop	{r4, r5, r7, pc}
 80191a2:	46c0      	nop			; (mov r8, r8)
 80191a4:	20001688 	.word	0x20001688
 80191a8:	2000166c 	.word	0x2000166c
 80191ac:	50000071 	.word	0x50000071

080191b0 <itsdk_config_loadConfiguration>:
 * Load the configuration from the NVM, eventually from factory default when the NVM is disabled
 * The Configuration will be restored from default when the version have changed.
 * The factory init functions will be called.
 * When a Application defined configuration exists the initialization function needs to be override.
 */
itsdk_config_ret_e itsdk_config_loadConfiguration(itsdk_config_load_mode_e mode) {
 80191b0:	b590      	push	{r4, r7, lr}
 80191b2:	b087      	sub	sp, #28
 80191b4:	af02      	add	r7, sp, #8
 80191b6:	0002      	movs	r2, r0
 80191b8:	1dfb      	adds	r3, r7, #7
 80191ba:	701a      	strb	r2, [r3, #0]

#if ITSDK_WITH_CONSOLE == __ENABLE
	__console_configMng.console_private = _itsdk_config_consolePriv;
 80191bc:	4b60      	ldr	r3, [pc, #384]	; (8019340 <itsdk_config_loadConfiguration+0x190>)
 80191be:	4a61      	ldr	r2, [pc, #388]	; (8019344 <itsdk_config_loadConfiguration+0x194>)
 80191c0:	601a      	str	r2, [r3, #0]
	__console_configMng.console_public = _itsdk_config_consolePublic;
 80191c2:	4b5f      	ldr	r3, [pc, #380]	; (8019340 <itsdk_config_loadConfiguration+0x190>)
 80191c4:	4a60      	ldr	r2, [pc, #384]	; (8019348 <itsdk_config_loadConfiguration+0x198>)
 80191c6:	605a      	str	r2, [r3, #4]
	__console_configMng.next = NULL;
 80191c8:	4b5d      	ldr	r3, [pc, #372]	; (8019340 <itsdk_config_loadConfiguration+0x190>)
 80191ca:	2200      	movs	r2, #0
 80191cc:	609a      	str	r2, [r3, #8]
	itsdk_console_registerCommand(&__console_configMng);
 80191ce:	4b5c      	ldr	r3, [pc, #368]	; (8019340 <itsdk_config_loadConfiguration+0x190>)
 80191d0:	0018      	movs	r0, r3
 80191d2:	f7ff fe21 	bl	8018e18 <itsdk_console_registerCommand>
#endif

#if ITSDK_CONFIGURATION_MODE == __CONFIG_EEPROM
  uint8_t v;
  uint8_t requestFactoryReset = 0;
 80191d6:	230f      	movs	r3, #15
 80191d8:	18fb      	adds	r3, r7, r3
 80191da:	2200      	movs	r2, #0
 80191dc:	701a      	strb	r2, [r3, #0]
  uint8_t configUpdated = 0;
 80191de:	230e      	movs	r3, #14
 80191e0:	18fb      	adds	r3, r7, r3
 80191e2:	2200      	movs	r2, #0
 80191e4:	701a      	strb	r2, [r3, #0]

  if ( mode != CONFIG_FORCE_TO_FACTORY ) {
 80191e6:	1dfb      	adds	r3, r7, #7
 80191e8:	781b      	ldrb	r3, [r3, #0]
 80191ea:	2b01      	cmp	r3, #1
 80191ec:	d100      	bne.n	80191f0 <itsdk_config_loadConfiguration+0x40>
 80191ee:	e071      	b.n	80192d4 <itsdk_config_loadConfiguration+0x124>
     if ( ! eeprom_read_config(&itsdk_config, sizeof(itsdk_configuration_nvm_t), ITSDK_CONFIGURATION_MNG_VERSION,&v, true) ) {
 80191f0:	230d      	movs	r3, #13
 80191f2:	18fa      	adds	r2, r7, r3
 80191f4:	4855      	ldr	r0, [pc, #340]	; (801934c <itsdk_config_loadConfiguration+0x19c>)
 80191f6:	2301      	movs	r3, #1
 80191f8:	9300      	str	r3, [sp, #0]
 80191fa:	0013      	movs	r3, r2
 80191fc:	2201      	movs	r2, #1
 80191fe:	211c      	movs	r1, #28
 8019200:	f7ff fe7c 	bl	8018efc <eeprom_read_config>
 8019204:	1e03      	subs	r3, r0, #0
 8019206:	d11c      	bne.n	8019242 <itsdk_config_loadConfiguration+0x92>
		 // failed to read configuration
		 if ( v == 0 ) {
 8019208:	230d      	movs	r3, #13
 801920a:	18fb      	adds	r3, r7, r3
 801920c:	781b      	ldrb	r3, [r3, #0]
 801920e:	2b00      	cmp	r3, #0
 8019210:	d109      	bne.n	8019226 <itsdk_config_loadConfiguration+0x76>
  		    ITSDK_ERROR_REPORT(ITSDK_ERROR_CONFIG_CONFIG_BADMAGIC,0);
 8019212:	4b4f      	ldr	r3, [pc, #316]	; (8019350 <itsdk_config_loadConfiguration+0x1a0>)
 8019214:	2100      	movs	r1, #0
 8019216:	0018      	movs	r0, r3
 8019218:	f002 fca0 	bl	801bb5c <itsdk_error_report>
			requestFactoryReset=1;
 801921c:	230f      	movs	r3, #15
 801921e:	18fb      	adds	r3, r7, r3
 8019220:	2201      	movs	r2, #1
 8019222:	701a      	strb	r2, [r3, #0]
 8019224:	e00d      	b.n	8019242 <itsdk_config_loadConfiguration+0x92>
		 } else if ( v!= ITSDK_CONFIGURATION_MNG_VERSION ) {
 8019226:	230d      	movs	r3, #13
 8019228:	18fb      	adds	r3, r7, r3
 801922a:	781b      	ldrb	r3, [r3, #0]
 801922c:	2b01      	cmp	r3, #1
 801922e:	d008      	beq.n	8019242 <itsdk_config_loadConfiguration+0x92>
  		    // magic is invalid or MNG version has changed... impossible to migrate
  		    ITSDK_ERROR_REPORT(ITSDK_ERROR_CONFIG_CONFIG_BADMNGV,0);
 8019230:	4b48      	ldr	r3, [pc, #288]	; (8019354 <itsdk_config_loadConfiguration+0x1a4>)
 8019232:	2100      	movs	r1, #0
 8019234:	0018      	movs	r0, r3
 8019236:	f002 fc91 	bl	801bb5c <itsdk_error_report>
			requestFactoryReset=1;
 801923a:	230f      	movs	r3, #15
 801923c:	18fb      	adds	r3, r7, r3
 801923e:	2201      	movs	r2, #1
 8019240:	701a      	strb	r2, [r3, #0]
	  }
   	  // we have a config loaded but it can be a wrong one
	  // Process SDK
      //   management remains the same but the version & size may have changed.
	  //   migration is possible
	  if ( requestFactoryReset == 0 && (itsdk_config.sdk.version != ITSDK_CONFIGURATION_SDK_VERSION || itsdk_config.sdk.size != sizeof(itsdk_configuration_internal_t) ) ) {
 8019242:	230f      	movs	r3, #15
 8019244:	18fb      	adds	r3, r7, r3
 8019246:	781b      	ldrb	r3, [r3, #0]
 8019248:	2b00      	cmp	r3, #0
 801924a:	d121      	bne.n	8019290 <itsdk_config_loadConfiguration+0xe0>
 801924c:	4b3f      	ldr	r3, [pc, #252]	; (801934c <itsdk_config_loadConfiguration+0x19c>)
 801924e:	781b      	ldrb	r3, [r3, #0]
 8019250:	2b16      	cmp	r3, #22
 8019252:	d103      	bne.n	801925c <itsdk_config_loadConfiguration+0xac>
 8019254:	4b3d      	ldr	r3, [pc, #244]	; (801934c <itsdk_config_loadConfiguration+0x19c>)
 8019256:	885b      	ldrh	r3, [r3, #2]
 8019258:	2b18      	cmp	r3, #24
 801925a:	d019      	beq.n	8019290 <itsdk_config_loadConfiguration+0xe0>
	     // SDK version has changed or compilation option has changed
	     if ( itsdk_config.sdk.size != sizeof(itsdk_configuration_internal_t) ) {
 801925c:	4b3b      	ldr	r3, [pc, #236]	; (801934c <itsdk_config_loadConfiguration+0x19c>)
 801925e:	885b      	ldrh	r3, [r3, #2]
 8019260:	2b18      	cmp	r3, #24
 8019262:	d009      	beq.n	8019278 <itsdk_config_loadConfiguration+0xc8>
	 	    // and the size has changed so we need to force a reset
		    requestFactoryReset=1;
 8019264:	230f      	movs	r3, #15
 8019266:	18fb      	adds	r3, r7, r3
 8019268:	2201      	movs	r2, #1
 801926a:	701a      	strb	r2, [r3, #0]
		    ITSDK_ERROR_REPORT(ITSDK_ERROR_CONFIG_MIGRATE_FAILED,0);
 801926c:	4b3a      	ldr	r3, [pc, #232]	; (8019358 <itsdk_config_loadConfiguration+0x1a8>)
 801926e:	2100      	movs	r1, #0
 8019270:	0018      	movs	r0, r3
 8019272:	f002 fc73 	bl	801bb5c <itsdk_error_report>
 8019276:	e00b      	b.n	8019290 <itsdk_config_loadConfiguration+0xe0>
		 } else {
		    // migration is possible ...
			//  if ( itsdk_config.sdk.version < 0x17 ) {
			//  }
		    itsdk_config.sdk.version = ITSDK_CONFIGURATION_SDK_VERSION;
 8019278:	4b34      	ldr	r3, [pc, #208]	; (801934c <itsdk_config_loadConfiguration+0x19c>)
 801927a:	2216      	movs	r2, #22
 801927c:	701a      	strb	r2, [r3, #0]

		    configUpdated = 1;
 801927e:	230e      	movs	r3, #14
 8019280:	18fb      	adds	r3, r7, r3
 8019282:	2201      	movs	r2, #1
 8019284:	701a      	strb	r2, [r3, #0]
		    ITSDK_ERROR_REPORT(ITSDK_ERROR_CONFIG_SDKCNF_UPGRADED,ITSDK_CONFIGURATION_SDK_VERSION);
 8019286:	4b35      	ldr	r3, [pc, #212]	; (801935c <itsdk_config_loadConfiguration+0x1ac>)
 8019288:	2116      	movs	r1, #22
 801928a:	0018      	movs	r0, r3
 801928c:	f002 fc66 	bl	801bb5c <itsdk_error_report>
		 }
	  }
	  #if ITSDK_WITH_CONFIGURATION_APP == __ENABLE
	  if ( requestFactoryReset == 0 && itsdk_config.app.version != ITSDK_CONFIGURATION_APP_VERSION ) {
 8019290:	230f      	movs	r3, #15
 8019292:	18fb      	adds	r3, r7, r3
 8019294:	781b      	ldrb	r3, [r3, #0]
 8019296:	2b00      	cmp	r3, #0
 8019298:	d120      	bne.n	80192dc <itsdk_config_loadConfiguration+0x12c>
 801929a:	4b2c      	ldr	r3, [pc, #176]	; (801934c <itsdk_config_loadConfiguration+0x19c>)
 801929c:	7e1b      	ldrb	r3, [r3, #24]
 801929e:	2b01      	cmp	r3, #1
 80192a0:	d01c      	beq.n	80192dc <itsdk_config_loadConfiguration+0x12c>
		 // version has changed an upgrade can be possible, lets application level to decide.
		 if ( itsdk_config_app_upgradeConfiguration() == CONFIG_UPGRADED ) {
 80192a2:	f7ff ff4f 	bl	8019144 <itsdk_config_app_upgradeConfiguration>
 80192a6:	0003      	movs	r3, r0
 80192a8:	2b03      	cmp	r3, #3
 80192aa:	d109      	bne.n	80192c0 <itsdk_config_loadConfiguration+0x110>
			 // at least the version has been upgraded
			 configUpdated = 1;
 80192ac:	230e      	movs	r3, #14
 80192ae:	18fb      	adds	r3, r7, r3
 80192b0:	2201      	movs	r2, #1
 80192b2:	701a      	strb	r2, [r3, #0]
			 ITSDK_ERROR_REPORT(ITSDK_ERROR_CONFIG_APPCNF_UPGRADED,ITSDK_CONFIGURATION_APP_VERSION);
 80192b4:	4b2a      	ldr	r3, [pc, #168]	; (8019360 <itsdk_config_loadConfiguration+0x1b0>)
 80192b6:	2101      	movs	r1, #1
 80192b8:	0018      	movs	r0, r3
 80192ba:	f002 fc4f 	bl	801bb5c <itsdk_error_report>
 80192be:	e00d      	b.n	80192dc <itsdk_config_loadConfiguration+0x12c>
		 } else {
			 requestFactoryReset = 1;
 80192c0:	230f      	movs	r3, #15
 80192c2:	18fb      	adds	r3, r7, r3
 80192c4:	2201      	movs	r2, #1
 80192c6:	701a      	strb	r2, [r3, #0]
  		     ITSDK_ERROR_REPORT(ITSDK_ERROR_CONFIG_MIGRATE_FAILED,1);
 80192c8:	4b23      	ldr	r3, [pc, #140]	; (8019358 <itsdk_config_loadConfiguration+0x1a8>)
 80192ca:	2101      	movs	r1, #1
 80192cc:	0018      	movs	r0, r3
 80192ce:	f002 fc45 	bl	801bb5c <itsdk_error_report>
 80192d2:	e003      	b.n	80192dc <itsdk_config_loadConfiguration+0x12c>
		 }
      }
	  #endif

   } else requestFactoryReset = 1;
 80192d4:	230f      	movs	r3, #15
 80192d6:	18fb      	adds	r3, r7, r3
 80192d8:	2201      	movs	r2, #1
 80192da:	701a      	strb	r2, [r3, #0]


   if ( requestFactoryReset == 1 ) {
 80192dc:	230f      	movs	r3, #15
 80192de:	18fb      	adds	r3, r7, r3
 80192e0:	781b      	ldrb	r3, [r3, #0]
 80192e2:	2b01      	cmp	r3, #1
 80192e4:	d10c      	bne.n	8019300 <itsdk_config_loadConfiguration+0x150>
	  itsdk_config_sdk_resetToFactory();
 80192e6:	f7ff fedd 	bl	80190a4 <itsdk_config_sdk_resetToFactory>
	  itsdk_config_app_resetToFactory();
 80192ea:	f7ff ff19 	bl	8019120 <itsdk_config_app_resetToFactory>
	  configUpdated = 1;
 80192ee:	230e      	movs	r3, #14
 80192f0:	18fb      	adds	r3, r7, r3
 80192f2:	2201      	movs	r2, #1
 80192f4:	701a      	strb	r2, [r3, #0]
	  ITSDK_ERROR_REPORT(ITSDK_ERROR_CONFIG_FACTORY_DEFAULT,3);
 80192f6:	4b1b      	ldr	r3, [pc, #108]	; (8019364 <itsdk_config_loadConfiguration+0x1b4>)
 80192f8:	2103      	movs	r1, #3
 80192fa:	0018      	movs	r0, r3
 80192fc:	f002 fc2e 	bl	801bb5c <itsdk_error_report>
   }

   if (configUpdated == 1) {
 8019300:	230e      	movs	r3, #14
 8019302:	18fb      	adds	r3, r7, r3
 8019304:	781b      	ldrb	r3, [r3, #0]
 8019306:	2b01      	cmp	r3, #1
 8019308:	d105      	bne.n	8019316 <itsdk_config_loadConfiguration+0x166>
	  // need to store the configuration
      eeprom_write_config(&itsdk_config, sizeof(itsdk_configuration_nvm_t), ITSDK_CONFIGURATION_MNG_VERSION);
 801930a:	4b10      	ldr	r3, [pc, #64]	; (801934c <itsdk_config_loadConfiguration+0x19c>)
 801930c:	2201      	movs	r2, #1
 801930e:	211c      	movs	r1, #28
 8019310:	0018      	movs	r0, r3
 8019312:	f7ff fdb3 	bl	8018e7c <eeprom_write_config>
   }
   bcopy(&itsdk_config,&itsdk_config_shadow,sizeof(itsdk_configuration_nvm_t));
 8019316:	4b14      	ldr	r3, [pc, #80]	; (8019368 <itsdk_config_loadConfiguration+0x1b8>)
 8019318:	4a0c      	ldr	r2, [pc, #48]	; (801934c <itsdk_config_loadConfiguration+0x19c>)
 801931a:	ca13      	ldmia	r2!, {r0, r1, r4}
 801931c:	c313      	stmia	r3!, {r0, r1, r4}
 801931e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8019320:	c313      	stmia	r3!, {r0, r1, r4}
 8019322:	6812      	ldr	r2, [r2, #0]
 8019324:	601a      	str	r2, [r3, #0]
	  itsdk_config_app_resetToFactory();
    #endif
      bcopy(&itsdk_config,&itsdk_config_shadow,sizeof(itsdk_configuration_nvm_t));
 #endif

   return ( requestFactoryReset == 1 )?CONFIG_RESTORED_FROM_FACTORY:CONFIG_LOADED;
 8019326:	230f      	movs	r3, #15
 8019328:	18fb      	adds	r3, r7, r3
 801932a:	781b      	ldrb	r3, [r3, #0]
 801932c:	2b01      	cmp	r3, #1
 801932e:	d101      	bne.n	8019334 <itsdk_config_loadConfiguration+0x184>
 8019330:	2302      	movs	r3, #2
 8019332:	e000      	b.n	8019336 <itsdk_config_loadConfiguration+0x186>
 8019334:	2301      	movs	r3, #1

}
 8019336:	0018      	movs	r0, r3
 8019338:	46bd      	mov	sp, r7
 801933a:	b005      	add	sp, #20
 801933c:	bd90      	pop	{r4, r7, pc}
 801933e:	46c0      	nop			; (mov r8, r8)
 8019340:	200011e0 	.word	0x200011e0
 8019344:	08019561 	.word	0x08019561
 8019348:	08019419 	.word	0x08019419
 801934c:	20001688 	.word	0x20001688
 8019350:	40000076 	.word	0x40000076
 8019354:	40000077 	.word	0x40000077
 8019358:	50000078 	.word	0x50000078
 801935c:	10000074 	.word	0x10000074
 8019360:	10000075 	.word	0x10000075
 8019364:	50000071 	.word	0x50000071
 8019368:	2000166c 	.word	0x2000166c

0801936c <itsdk_config_app_commitConfiguration>:
// CONFIG SHADOW
// ====================================================================================================

#if ITSDK_CONFIGURATION_MODE != __CONFIG_STATIC

__weak itsdk_config_ret_e itsdk_config_app_commitConfiguration() {
 801936c:	b580      	push	{r7, lr}
 801936e:	af00      	add	r7, sp, #0
	return CONFIG_SUCCESS;
 8019370:	2300      	movs	r3, #0
}
 8019372:	0018      	movs	r0, r3
 8019374:	46bd      	mov	sp, r7
 8019376:	bd80      	pop	{r7, pc}

08019378 <itsdk_config_commitConfiguration>:

/**
 * Commit a shadow configuration into the standard config.
 * Save it
 */
itsdk_config_ret_e itsdk_config_commitConfiguration(itsdk_config_commit_mode_e mode) {
 8019378:	b5b0      	push	{r4, r5, r7, lr}
 801937a:	b084      	sub	sp, #16
 801937c:	af00      	add	r7, sp, #0
 801937e:	0002      	movs	r2, r0
 8019380:	1dfb      	adds	r3, r7, #7
 8019382:	701a      	strb	r2, [r3, #0]

 itsdk_config_ret_e r = itsdk_config_app_commitConfiguration();
 8019384:	250f      	movs	r5, #15
 8019386:	197c      	adds	r4, r7, r5
 8019388:	f7ff fff0 	bl	801936c <itsdk_config_app_commitConfiguration>
 801938c:	0003      	movs	r3, r0
 801938e:	7023      	strb	r3, [r4, #0]
 if ( r != CONFIG_SUCCESS ) return r;
 8019390:	197b      	adds	r3, r7, r5
 8019392:	781b      	ldrb	r3, [r3, #0]
 8019394:	2b00      	cmp	r3, #0
 8019396:	d003      	beq.n	80193a0 <itsdk_config_commitConfiguration+0x28>
 8019398:	230f      	movs	r3, #15
 801939a:	18fb      	adds	r3, r7, r3
 801939c:	781b      	ldrb	r3, [r3, #0]
 801939e:	e023      	b.n	80193e8 <itsdk_config_commitConfiguration+0x70>

 bcopy(&itsdk_config_shadow,&itsdk_config,sizeof(itsdk_configuration_nvm_t));
 80193a0:	4b13      	ldr	r3, [pc, #76]	; (80193f0 <itsdk_config_commitConfiguration+0x78>)
 80193a2:	4a14      	ldr	r2, [pc, #80]	; (80193f4 <itsdk_config_commitConfiguration+0x7c>)
 80193a4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80193a6:	c313      	stmia	r3!, {r0, r1, r4}
 80193a8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80193aa:	c313      	stmia	r3!, {r0, r1, r4}
 80193ac:	6812      	ldr	r2, [r2, #0]
 80193ae:	601a      	str	r2, [r3, #0]
 ITSDK_ERROR_REPORT(ITSDK_ERROR_CONFIG_COMMIT_NEW_CONF,0);
 80193b0:	2100      	movs	r1, #0
 80193b2:	2072      	movs	r0, #114	; 0x72
 80193b4:	f002 fbd2 	bl	801bb5c <itsdk_error_report>

#if ITSDK_CONFIGURATION_MODE == __CONFIG_EEPROM
 if ( mode == CONFIG_COMMIT_SAVE || mode == CONFIG_COMMIT_SAVE_REBOOT ) {
 80193b8:	1dfb      	adds	r3, r7, #7
 80193ba:	781b      	ldrb	r3, [r3, #0]
 80193bc:	2b01      	cmp	r3, #1
 80193be:	d003      	beq.n	80193c8 <itsdk_config_commitConfiguration+0x50>
 80193c0:	1dfb      	adds	r3, r7, #7
 80193c2:	781b      	ldrb	r3, [r3, #0]
 80193c4:	2b02      	cmp	r3, #2
 80193c6:	d105      	bne.n	80193d4 <itsdk_config_commitConfiguration+0x5c>
     eeprom_write_config(&itsdk_config, sizeof(itsdk_configuration_nvm_t), ITSDK_CONFIGURATION_MNG_VERSION);
 80193c8:	4b09      	ldr	r3, [pc, #36]	; (80193f0 <itsdk_config_commitConfiguration+0x78>)
 80193ca:	2201      	movs	r2, #1
 80193cc:	211c      	movs	r1, #28
 80193ce:	0018      	movs	r0, r3
 80193d0:	f7ff fd54 	bl	8018e7c <eeprom_write_config>
 }
 if ( mode == CONFIG_COMMIT_SAVE_REBOOT ) {
 80193d4:	1dfb      	adds	r3, r7, #7
 80193d6:	781b      	ldrb	r3, [r3, #0]
 80193d8:	2b02      	cmp	r3, #2
 80193da:	d104      	bne.n	80193e6 <itsdk_config_commitConfiguration+0x6e>
	 itsdk_delayMs(200);
 80193dc:	20c8      	movs	r0, #200	; 0xc8
 80193de:	f004 ff29 	bl	801e234 <itsdk_delayMs>
	 itsdk_reset();
 80193e2:	f004 fed5 	bl	801e190 <itsdk_reset>
 }
#endif
 return CONFIG_SUCCESS;
 80193e6:	2300      	movs	r3, #0
}
 80193e8:	0018      	movs	r0, r3
 80193ea:	46bd      	mov	sp, r7
 80193ec:	b004      	add	sp, #16
 80193ee:	bdb0      	pop	{r4, r5, r7, pc}
 80193f0:	20001688 	.word	0x20001688
 80193f4:	2000166c 	.word	0x2000166c

080193f8 <itsdk_config_app_printConfig>:

	#if ITSDK_WITH_CONFIGURATION_APP == __ENABLE
		/**
		 * This function need to be overrided
		 */
		__weak void itsdk_config_app_printConfig(itsdk_configuration_nvm_t * c) {
 80193f8:	b580      	push	{r7, lr}
 80193fa:	b082      	sub	sp, #8
 80193fc:	af00      	add	r7, sp, #0
 80193fe:	6078      	str	r0, [r7, #4]
			ITSDK_ERROR_REPORT(ITSDK_ERROR_CONFIG_OVERRIDE_MISS,0);
 8019400:	4b04      	ldr	r3, [pc, #16]	; (8019414 <itsdk_config_app_printConfig+0x1c>)
 8019402:	2100      	movs	r1, #0
 8019404:	0018      	movs	r0, r3
 8019406:	f002 fba9 	bl	801bb5c <itsdk_error_report>
			return;
 801940a:	46c0      	nop			; (mov r8, r8)
		}
 801940c:	46bd      	mov	sp, r7
 801940e:	b002      	add	sp, #8
 8019410:	bd80      	pop	{r7, pc}
 8019412:	46c0      	nop			; (mov r8, r8)
 8019414:	40000070 	.word	0x40000070

08019418 <_itsdk_config_consolePublic>:

	#endif // ITSDK_WITH_CONFIGURATION_APP

	static itsdk_console_return_e _itsdk_config_consolePublic(char * buffer, uint8_t sz) {
 8019418:	b580      	push	{r7, lr}
 801941a:	b084      	sub	sp, #16
 801941c:	af00      	add	r7, sp, #0
 801941e:	6078      	str	r0, [r7, #4]
 8019420:	000a      	movs	r2, r1
 8019422:	1cfb      	adds	r3, r7, #3
 8019424:	701a      	strb	r2, [r3, #0]
	   if ( sz == 1 ) {
 8019426:	1cfb      	adds	r3, r7, #3
 8019428:	781b      	ldrb	r3, [r3, #0]
 801942a:	2b01      	cmp	r3, #1
 801942c:	d000      	beq.n	8019430 <_itsdk_config_consolePublic+0x18>
 801942e:	e074      	b.n	801951a <_itsdk_config_consolePublic+0x102>
		  switch(buffer[0]){
 8019430:	687b      	ldr	r3, [r7, #4]
 8019432:	781b      	ldrb	r3, [r3, #0]
 8019434:	2b43      	cmp	r3, #67	; 0x43
 8019436:	d012      	beq.n	801945e <_itsdk_config_consolePublic+0x46>
 8019438:	2b63      	cmp	r3, #99	; 0x63
 801943a:	d010      	beq.n	801945e <_itsdk_config_consolePublic+0x46>
 801943c:	2b3f      	cmp	r3, #63	; 0x3f
 801943e:	d000      	beq.n	8019442 <_itsdk_config_consolePublic+0x2a>
				  _itsdk_console_printf("OK\r\n");
				}
				return ITSDK_CONSOLE_SUCCES;
				break;
			default:
				break;
 8019440:	e06c      	b.n	801951c <_itsdk_config_consolePublic+0x104>
				_itsdk_console_printf("--- ConfigMng\r\n");
 8019442:	4b39      	ldr	r3, [pc, #228]	; (8019528 <_itsdk_config_consolePublic+0x110>)
 8019444:	0018      	movs	r0, r3
 8019446:	f7ff fb27 	bl	8018a98 <_itsdk_console_printf>
				_itsdk_console_printf("c          : print config\r\n");
 801944a:	4b38      	ldr	r3, [pc, #224]	; (801952c <_itsdk_config_consolePublic+0x114>)
 801944c:	0018      	movs	r0, r3
 801944e:	f7ff fb23 	bl	8018a98 <_itsdk_console_printf>
				_itsdk_console_printf("C          : print shadow config\r\n");
 8019452:	4b37      	ldr	r3, [pc, #220]	; (8019530 <_itsdk_config_consolePublic+0x118>)
 8019454:	0018      	movs	r0, r3
 8019456:	f7ff fb1f 	bl	8018a98 <_itsdk_console_printf>
			  return ITSDK_CONSOLE_SUCCES;
 801945a:	2300      	movs	r3, #0
 801945c:	e05f      	b.n	801951e <_itsdk_config_consolePublic+0x106>
					itsdk_configuration_nvm_t * _c = &itsdk_config;
 801945e:	4b35      	ldr	r3, [pc, #212]	; (8019534 <_itsdk_config_consolePublic+0x11c>)
 8019460:	60fb      	str	r3, [r7, #12]
					if (buffer[0]=='C') _c = &itsdk_config_shadow;
 8019462:	687b      	ldr	r3, [r7, #4]
 8019464:	781b      	ldrb	r3, [r3, #0]
 8019466:	2b43      	cmp	r3, #67	; 0x43
 8019468:	d101      	bne.n	801946e <_itsdk_config_consolePublic+0x56>
 801946a:	4b33      	ldr	r3, [pc, #204]	; (8019538 <_itsdk_config_consolePublic+0x120>)
 801946c:	60fb      	str	r3, [r7, #12]
					_itsdk_console_printf("sdk.version : %02X\r\n",_c->sdk.version);
 801946e:	68fb      	ldr	r3, [r7, #12]
 8019470:	781b      	ldrb	r3, [r3, #0]
 8019472:	001a      	movs	r2, r3
 8019474:	4b31      	ldr	r3, [pc, #196]	; (801953c <_itsdk_config_consolePublic+0x124>)
 8019476:	0011      	movs	r1, r2
 8019478:	0018      	movs	r0, r3
 801947a:	f7ff fb0d 	bl	8018a98 <_itsdk_console_printf>
					_itsdk_console_printf("sdk.activeNetwork : %d\r\n",_c->sdk.activeNetwork);
 801947e:	68fb      	ldr	r3, [r7, #12]
 8019480:	88db      	ldrh	r3, [r3, #6]
 8019482:	001a      	movs	r2, r3
 8019484:	4b2e      	ldr	r3, [pc, #184]	; (8019540 <_itsdk_config_consolePublic+0x128>)
 8019486:	0011      	movs	r1, r2
 8019488:	0018      	movs	r0, r3
 801948a:	f7ff fb05 	bl	8018a98 <_itsdk_console_printf>
					_itsdk_console_printf("sdk.activeRegion : %04X\r\n",_c->sdk.activeRegion);
 801948e:	68fb      	ldr	r3, [r7, #12]
 8019490:	891b      	ldrh	r3, [r3, #8]
 8019492:	001a      	movs	r2, r3
 8019494:	4b2b      	ldr	r3, [pc, #172]	; (8019544 <_itsdk_config_consolePublic+0x12c>)
 8019496:	0011      	movs	r1, r2
 8019498:	0018      	movs	r0, r3
 801949a:	f7ff fafd 	bl	8018a98 <_itsdk_console_printf>
					_itsdk_console_printf("sdk.lora.adrmode : %d\r\n",_c->sdk.lorawan.adrMode);
 801949e:	68fb      	ldr	r3, [r7, #12]
 80194a0:	7a9b      	ldrb	r3, [r3, #10]
 80194a2:	061b      	lsls	r3, r3, #24
 80194a4:	0f9b      	lsrs	r3, r3, #30
 80194a6:	b2db      	uxtb	r3, r3
 80194a8:	001a      	movs	r2, r3
 80194aa:	4b27      	ldr	r3, [pc, #156]	; (8019548 <_itsdk_config_consolePublic+0x130>)
 80194ac:	0011      	movs	r1, r2
 80194ae:	0018      	movs	r0, r3
 80194b0:	f7ff faf2 	bl	8018a98 <_itsdk_console_printf>
					_itsdk_console_printf("sdk.lora.devEuiType : %d\r\n",_c->sdk.lorawan.devEuiType);
 80194b4:	68fb      	ldr	r3, [r7, #12]
 80194b6:	7a9b      	ldrb	r3, [r3, #10]
 80194b8:	069b      	lsls	r3, r3, #26
 80194ba:	0f9b      	lsrs	r3, r3, #30
 80194bc:	b2db      	uxtb	r3, r3
 80194be:	001a      	movs	r2, r3
 80194c0:	4b22      	ldr	r3, [pc, #136]	; (801954c <_itsdk_config_consolePublic+0x134>)
 80194c2:	0011      	movs	r1, r2
 80194c4:	0018      	movs	r0, r3
 80194c6:	f7ff fae7 	bl	8018a98 <_itsdk_console_printf>
					_itsdk_console_printf("sdk.lora.joinMode : %d\r\n",_c->sdk.lorawan.joinMode);
 80194ca:	68fb      	ldr	r3, [r7, #12]
 80194cc:	7a9b      	ldrb	r3, [r3, #10]
 80194ce:	079b      	lsls	r3, r3, #30
 80194d0:	0f9b      	lsrs	r3, r3, #30
 80194d2:	b2db      	uxtb	r3, r3
 80194d4:	001a      	movs	r2, r3
 80194d6:	4b1e      	ldr	r3, [pc, #120]	; (8019550 <_itsdk_config_consolePublic+0x138>)
 80194d8:	0011      	movs	r1, r2
 80194da:	0018      	movs	r0, r3
 80194dc:	f7ff fadc 	bl	8018a98 <_itsdk_console_printf>
					_itsdk_console_printf("sdk.lora.networkType : %d\r\n",_c->sdk.lorawan.networkType);
 80194e0:	68fb      	ldr	r3, [r7, #12]
 80194e2:	7a9b      	ldrb	r3, [r3, #10]
 80194e4:	071b      	lsls	r3, r3, #28
 80194e6:	0f9b      	lsrs	r3, r3, #30
 80194e8:	b2db      	uxtb	r3, r3
 80194ea:	001a      	movs	r2, r3
 80194ec:	4b19      	ldr	r3, [pc, #100]	; (8019554 <_itsdk_config_consolePublic+0x13c>)
 80194ee:	0011      	movs	r1, r2
 80194f0:	0018      	movs	r0, r3
 80194f2:	f7ff fad1 	bl	8018a98 <_itsdk_console_printf>
					_itsdk_console_printf("sdk.lora.retries : %d\r\n",_c->sdk.lorawan.retries);
 80194f6:	68fb      	ldr	r3, [r7, #12]
 80194f8:	7adb      	ldrb	r3, [r3, #11]
 80194fa:	001a      	movs	r2, r3
 80194fc:	4b16      	ldr	r3, [pc, #88]	; (8019558 <_itsdk_config_consolePublic+0x140>)
 80194fe:	0011      	movs	r1, r2
 8019500:	0018      	movs	r0, r3
 8019502:	f7ff fac9 	bl	8018a98 <_itsdk_console_printf>
					   itsdk_config_app_printConfig(_c);
 8019506:	68fb      	ldr	r3, [r7, #12]
 8019508:	0018      	movs	r0, r3
 801950a:	f7ff ff75 	bl	80193f8 <itsdk_config_app_printConfig>
				  _itsdk_console_printf("OK\r\n");
 801950e:	4b13      	ldr	r3, [pc, #76]	; (801955c <_itsdk_config_consolePublic+0x144>)
 8019510:	0018      	movs	r0, r3
 8019512:	f7ff fac1 	bl	8018a98 <_itsdk_console_printf>
				return ITSDK_CONSOLE_SUCCES;
 8019516:	2300      	movs	r3, #0
 8019518:	e001      	b.n	801951e <_itsdk_config_consolePublic+0x106>
		  }
	  } //Sz == 1
 801951a:	46c0      	nop			; (mov r8, r8)
	  return ITSDK_CONSOLE_NOTFOUND;
 801951c:	2301      	movs	r3, #1
	}
 801951e:	0018      	movs	r0, r3
 8019520:	46bd      	mov	sp, r7
 8019522:	b004      	add	sp, #16
 8019524:	bd80      	pop	{r7, pc}
 8019526:	46c0      	nop			; (mov r8, r8)
 8019528:	08020b48 	.word	0x08020b48
 801952c:	08020b58 	.word	0x08020b58
 8019530:	08020b74 	.word	0x08020b74
 8019534:	20001688 	.word	0x20001688
 8019538:	2000166c 	.word	0x2000166c
 801953c:	08020b98 	.word	0x08020b98
 8019540:	08020bb0 	.word	0x08020bb0
 8019544:	08020bcc 	.word	0x08020bcc
 8019548:	08020be8 	.word	0x08020be8
 801954c:	08020c00 	.word	0x08020c00
 8019550:	08020c1c 	.word	0x08020c1c
 8019554:	08020c38 	.word	0x08020c38
 8019558:	08020c54 	.word	0x08020c54
 801955c:	08020c6c 	.word	0x08020c6c

08019560 <_itsdk_config_consolePriv>:

static itsdk_console_return_e _itsdk_config_consolePriv(char * buffer, uint8_t sz) {
 8019560:	b5b0      	push	{r4, r5, r7, lr}
 8019562:	b088      	sub	sp, #32
 8019564:	af00      	add	r7, sp, #0
 8019566:	6078      	str	r0, [r7, #4]
 8019568:	000a      	movs	r2, r1
 801956a:	1cfb      	adds	r3, r7, #3
 801956c:	701a      	strb	r2, [r3, #0]
#if ITSDK_CONFIGURATION_MODE != __CONFIG_STATIC
	if ( sz == 1 ) {
 801956e:	1cfb      	adds	r3, r7, #3
 8019570:	781b      	ldrb	r3, [r3, #0]
 8019572:	2b01      	cmp	r3, #1
 8019574:	d000      	beq.n	8019578 <_itsdk_config_consolePriv+0x18>
 8019576:	e098      	b.n	80196aa <_itsdk_config_consolePriv+0x14a>
	  switch(buffer[0]){
 8019578:	687b      	ldr	r3, [r7, #4]
 801957a:	781b      	ldrb	r3, [r3, #0]
 801957c:	2b46      	cmp	r3, #70	; 0x46
 801957e:	d03b      	beq.n	80195f8 <_itsdk_config_consolePriv+0x98>
 8019580:	dc02      	bgt.n	8019588 <_itsdk_config_consolePriv+0x28>
 8019582:	2b3f      	cmp	r3, #63	; 0x3f
 8019584:	d005      	beq.n	8019592 <_itsdk_config_consolePriv+0x32>
			  _itsdk_console_printf("OK\r\n");
			 return ITSDK_CONSOLE_SUCCES;
			}
		#endif
		default:
			break;
 8019586:	e21c      	b.n	80199c2 <_itsdk_config_consolePriv+0x462>
	  switch(buffer[0]){
 8019588:	2b53      	cmp	r3, #83	; 0x53
 801958a:	d02c      	beq.n	80195e6 <_itsdk_config_consolePriv+0x86>
 801958c:	2b6d      	cmp	r3, #109	; 0x6d
 801958e:	d040      	beq.n	8019612 <_itsdk_config_consolePriv+0xb2>
			break;
 8019590:	e217      	b.n	80199c2 <_itsdk_config_consolePriv+0x462>
			  _itsdk_console_printf("S          : commit configuration\r\n");
 8019592:	4bd9      	ldr	r3, [pc, #868]	; (80198f8 <_itsdk_config_consolePriv+0x398>)
 8019594:	0018      	movs	r0, r3
 8019596:	f7ff fa7f 	bl	8018a98 <_itsdk_console_printf>
			  _itsdk_console_printf("F          : restore factory default config\r\n");
 801959a:	4bd8      	ldr	r3, [pc, #864]	; (80198fc <_itsdk_config_consolePriv+0x39c>)
 801959c:	0018      	movs	r0, r3
 801959e:	f7ff fa7b 	bl	8018a98 <_itsdk_console_printf>
			  _itsdk_console_printf("m          : see eeprom configuration\r\n");
 80195a2:	4bd7      	ldr	r3, [pc, #860]	; (8019900 <_itsdk_config_consolePriv+0x3a0>)
 80195a4:	0018      	movs	r0, r3
 80195a6:	f7ff fa77 	bl	8018a98 <_itsdk_console_printf>
			  _itsdk_console_printf("SC:N:x     : sdk.activeNetwork 1:SFX 2:LoRa\r\n");
 80195aa:	4bd6      	ldr	r3, [pc, #856]	; (8019904 <_itsdk_config_consolePriv+0x3a4>)
 80195ac:	0018      	movs	r0, r3
 80195ae:	f7ff fa73 	bl	8018a98 <_itsdk_console_printf>
			  _itsdk_console_printf("SC:R:xxxx  : sdk.activeRegion __PLWAN_REGION_xx\r\n");
 80195b2:	4bd5      	ldr	r3, [pc, #852]	; (8019908 <_itsdk_config_consolePriv+0x3a8>)
 80195b4:	0018      	movs	r0, r3
 80195b6:	f7ff fa6f 	bl	8018a98 <_itsdk_console_printf>
			  _itsdk_console_printf("SC:0:x     : lora.adrmode 1:OFF/2:ON\r\n");
 80195ba:	4bd4      	ldr	r3, [pc, #848]	; (801990c <_itsdk_config_consolePriv+0x3ac>)
 80195bc:	0018      	movs	r0, r3
 80195be:	f7ff fa6b 	bl	8018a98 <_itsdk_console_printf>
			  _itsdk_console_printf("SC:1:x     : lora.devEuiType 1:STATIC/2:GENERATED\r\n");
 80195c2:	4bd3      	ldr	r3, [pc, #844]	; (8019910 <_itsdk_config_consolePriv+0x3b0>)
 80195c4:	0018      	movs	r0, r3
 80195c6:	f7ff fa67 	bl	8018a98 <_itsdk_console_printf>
			  _itsdk_console_printf("SC:2:x     : lora.joinMode 1:OTAA/2:ABP\r\n");
 80195ca:	4bd2      	ldr	r3, [pc, #840]	; (8019914 <_itsdk_config_consolePriv+0x3b4>)
 80195cc:	0018      	movs	r0, r3
 80195ce:	f7ff fa63 	bl	8018a98 <_itsdk_console_printf>
			  _itsdk_console_printf("SC:3:x     : lora.networkType 1:PUBLIC/2:PRIVATE\r\n");
 80195d2:	4bd1      	ldr	r3, [pc, #836]	; (8019918 <_itsdk_config_consolePriv+0x3b8>)
 80195d4:	0018      	movs	r0, r3
 80195d6:	f7ff fa5f 	bl	8018a98 <_itsdk_console_printf>
			  _itsdk_console_printf("SC:4:nn    : lora.retries 00..99\r\n");
 80195da:	4bd0      	ldr	r3, [pc, #832]	; (801991c <_itsdk_config_consolePriv+0x3bc>)
 80195dc:	0018      	movs	r0, r3
 80195de:	f7ff fa5b 	bl	8018a98 <_itsdk_console_printf>
		  return ITSDK_CONSOLE_SUCCES;
 80195e2:	2300      	movs	r3, #0
 80195e4:	e1ee      	b.n	80199c4 <_itsdk_config_consolePriv+0x464>
			itsdk_config_commitConfiguration(CONFIG_COMMIT_SAVE);
 80195e6:	2001      	movs	r0, #1
 80195e8:	f7ff fec6 	bl	8019378 <itsdk_config_commitConfiguration>
			_itsdk_console_printf("OK\r\n");
 80195ec:	4bcc      	ldr	r3, [pc, #816]	; (8019920 <_itsdk_config_consolePriv+0x3c0>)
 80195ee:	0018      	movs	r0, r3
 80195f0:	f7ff fa52 	bl	8018a98 <_itsdk_console_printf>
			return ITSDK_CONSOLE_SUCCES;
 80195f4:	2300      	movs	r3, #0
 80195f6:	e1e5      	b.n	80199c4 <_itsdk_config_consolePriv+0x464>
			  ITSDK_ERROR_REPORT(ITSDK_ERROR_CONFIG_FACTORY_DEFAULT,3);
 80195f8:	4bca      	ldr	r3, [pc, #808]	; (8019924 <_itsdk_config_consolePriv+0x3c4>)
 80195fa:	2103      	movs	r1, #3
 80195fc:	0018      	movs	r0, r3
 80195fe:	f002 faad 	bl	801bb5c <itsdk_error_report>
			  itsdk_config_resetToFactory();
 8019602:	f7ff fdb1 	bl	8019168 <itsdk_config_resetToFactory>
			  _itsdk_console_printf("OK\r\n");
 8019606:	4bc6      	ldr	r3, [pc, #792]	; (8019920 <_itsdk_config_consolePriv+0x3c0>)
 8019608:	0018      	movs	r0, r3
 801960a:	f7ff fa45 	bl	8018a98 <_itsdk_console_printf>
			 return ITSDK_CONSOLE_SUCCES;
 801960e:	2300      	movs	r3, #0
 8019610:	e1d8      	b.n	80199c4 <_itsdk_config_consolePriv+0x464>
			  uint32_t offset = 0;
 8019612:	2300      	movs	r3, #0
 8019614:	617b      	str	r3, [r7, #20]
			  uint32_t size = 0;
 8019616:	2300      	movs	r3, #0
 8019618:	60fb      	str	r3, [r7, #12]
			  uint32_t totSize = 0;
 801961a:	2300      	movs	r3, #0
 801961c:	613b      	str	r3, [r7, #16]
			  	itsdk_secstore_getStoreSize(&size);
 801961e:	240c      	movs	r4, #12
 8019620:	193b      	adds	r3, r7, r4
 8019622:	0018      	movs	r0, r3
 8019624:	f000 fad7 	bl	8019bd6 <itsdk_secstore_getStoreSize>
			  	_itsdk_console_printf("SecureStore: 0x%08X->0x%08X (%dB)\r\n",offset,offset+size,size);
 8019628:	68fa      	ldr	r2, [r7, #12]
 801962a:	697b      	ldr	r3, [r7, #20]
 801962c:	18d2      	adds	r2, r2, r3
 801962e:	68fb      	ldr	r3, [r7, #12]
 8019630:	6979      	ldr	r1, [r7, #20]
 8019632:	48bd      	ldr	r0, [pc, #756]	; (8019928 <_itsdk_config_consolePriv+0x3c8>)
 8019634:	f7ff fa30 	bl	8018a98 <_itsdk_console_printf>
			  	offset += size;
 8019638:	68fb      	ldr	r3, [r7, #12]
 801963a:	697a      	ldr	r2, [r7, #20]
 801963c:	18d3      	adds	r3, r2, r3
 801963e:	617b      	str	r3, [r7, #20]
			  	totSize += size;
 8019640:	68fb      	ldr	r3, [r7, #12]
 8019642:	693a      	ldr	r2, [r7, #16]
 8019644:	18d3      	adds	r3, r2, r3
 8019646:	613b      	str	r3, [r7, #16]
			  	itsdk_error_getSize(&size);
 8019648:	193b      	adds	r3, r7, r4
 801964a:	0018      	movs	r0, r3
 801964c:	f002 fbab 	bl	801bda6 <itsdk_error_getSize>
			  	_itsdk_console_printf("ErrorLog: 0x%08X->0x%08X (%dB)\r\n",offset,offset+size,size);
 8019650:	68fa      	ldr	r2, [r7, #12]
 8019652:	697b      	ldr	r3, [r7, #20]
 8019654:	18d2      	adds	r2, r2, r3
 8019656:	68fb      	ldr	r3, [r7, #12]
 8019658:	6979      	ldr	r1, [r7, #20]
 801965a:	48b4      	ldr	r0, [pc, #720]	; (801992c <_itsdk_config_consolePriv+0x3cc>)
 801965c:	f7ff fa1c 	bl	8018a98 <_itsdk_console_printf>
			  	offset += size;
 8019660:	68fb      	ldr	r3, [r7, #12]
 8019662:	697a      	ldr	r2, [r7, #20]
 8019664:	18d3      	adds	r3, r2, r3
 8019666:	617b      	str	r3, [r7, #20]
			  	totSize += size;
 8019668:	68fb      	ldr	r3, [r7, #12]
 801966a:	693a      	ldr	r2, [r7, #16]
 801966c:	18d3      	adds	r3, r2, r3
 801966e:	613b      	str	r3, [r7, #16]
			  eeprom_getConfigSize(&size);
 8019670:	193b      	adds	r3, r7, r4
 8019672:	0018      	movs	r0, r3
 8019674:	f7ff fcdd 	bl	8019032 <eeprom_getConfigSize>
  		  	  totSize += size;
 8019678:	68fb      	ldr	r3, [r7, #12]
 801967a:	693a      	ldr	r2, [r7, #16]
 801967c:	18d3      	adds	r3, r2, r3
 801967e:	613b      	str	r3, [r7, #16]
			  _itsdk_console_printf("ApplicationConfig: 0x%08X->0x%08X (%dB)\r\n",offset,offset+size,size);
 8019680:	68fa      	ldr	r2, [r7, #12]
 8019682:	697b      	ldr	r3, [r7, #20]
 8019684:	18d2      	adds	r2, r2, r3
 8019686:	68fb      	ldr	r3, [r7, #12]
 8019688:	6979      	ldr	r1, [r7, #20]
 801968a:	48a9      	ldr	r0, [pc, #676]	; (8019930 <_itsdk_config_consolePriv+0x3d0>)
 801968c:	f7ff fa04 	bl	8018a98 <_itsdk_console_printf>
			  _itsdk_console_printf("UsedMemory: %dB on %dB\r\n",totSize,ITSDK_EPROM_SIZE);
 8019690:	23c0      	movs	r3, #192	; 0xc0
 8019692:	015a      	lsls	r2, r3, #5
 8019694:	6939      	ldr	r1, [r7, #16]
 8019696:	4ba7      	ldr	r3, [pc, #668]	; (8019934 <_itsdk_config_consolePriv+0x3d4>)
 8019698:	0018      	movs	r0, r3
 801969a:	f7ff f9fd 	bl	8018a98 <_itsdk_console_printf>
			  _itsdk_console_printf("OK\r\n");
 801969e:	4ba0      	ldr	r3, [pc, #640]	; (8019920 <_itsdk_config_consolePriv+0x3c0>)
 80196a0:	0018      	movs	r0, r3
 80196a2:	f7ff f9f9 	bl	8018a98 <_itsdk_console_printf>
			 return ITSDK_CONSOLE_SUCCES;
 80196a6:	2300      	movs	r3, #0
 80196a8:	e18c      	b.n	80199c4 <_itsdk_config_consolePriv+0x464>
	  }
	} else if ( sz == 4 ) {
 80196aa:	1cfb      	adds	r3, r7, #3
 80196ac:	781b      	ldrb	r3, [r3, #0]
 80196ae:	2b04      	cmp	r3, #4
 80196b0:	d116      	bne.n	80196e0 <_itsdk_config_consolePriv+0x180>
		if ( buffer[0] == 's' && buffer[1] == 'c' && buffer[2] == ':' ) {
 80196b2:	687b      	ldr	r3, [r7, #4]
 80196b4:	781b      	ldrb	r3, [r3, #0]
 80196b6:	2b73      	cmp	r3, #115	; 0x73
 80196b8:	d000      	beq.n	80196bc <_itsdk_config_consolePriv+0x15c>
 80196ba:	e182      	b.n	80199c2 <_itsdk_config_consolePriv+0x462>
 80196bc:	687b      	ldr	r3, [r7, #4]
 80196be:	3301      	adds	r3, #1
 80196c0:	781b      	ldrb	r3, [r3, #0]
 80196c2:	2b63      	cmp	r3, #99	; 0x63
 80196c4:	d000      	beq.n	80196c8 <_itsdk_config_consolePriv+0x168>
 80196c6:	e17c      	b.n	80199c2 <_itsdk_config_consolePriv+0x462>
 80196c8:	687b      	ldr	r3, [r7, #4]
 80196ca:	3302      	adds	r3, #2
 80196cc:	781b      	ldrb	r3, [r3, #0]
 80196ce:	2b3a      	cmp	r3, #58	; 0x3a
 80196d0:	d000      	beq.n	80196d4 <_itsdk_config_consolePriv+0x174>
 80196d2:	e176      	b.n	80199c2 <_itsdk_config_consolePriv+0x462>
						return ITSDK_CONSOLE_SUCCES;
					}
					break;
				#endif
				default:
					_itsdk_console_printf("KO\r\n");
 80196d4:	4b98      	ldr	r3, [pc, #608]	; (8019938 <_itsdk_config_consolePriv+0x3d8>)
 80196d6:	0018      	movs	r0, r3
 80196d8:	f7ff f9de 	bl	8018a98 <_itsdk_console_printf>
					return ITSDK_CONSOLE_FAILED;
 80196dc:	2302      	movs	r3, #2
 80196de:	e171      	b.n	80199c4 <_itsdk_config_consolePriv+0x464>
			}
		}
	} else if ( sz >= 6 ) {
 80196e0:	1cfb      	adds	r3, r7, #3
 80196e2:	781b      	ldrb	r3, [r3, #0]
 80196e4:	2b05      	cmp	r3, #5
 80196e6:	d800      	bhi.n	80196ea <_itsdk_config_consolePriv+0x18a>
 80196e8:	e168      	b.n	80199bc <_itsdk_config_consolePriv+0x45c>
		if ( buffer[0] == 'S' && buffer[1] == 'C' && buffer[2] == ':' && buffer[4] == ':' ) {
 80196ea:	687b      	ldr	r3, [r7, #4]
 80196ec:	781b      	ldrb	r3, [r3, #0]
 80196ee:	2b53      	cmp	r3, #83	; 0x53
 80196f0:	d000      	beq.n	80196f4 <_itsdk_config_consolePriv+0x194>
 80196f2:	e163      	b.n	80199bc <_itsdk_config_consolePriv+0x45c>
 80196f4:	687b      	ldr	r3, [r7, #4]
 80196f6:	3301      	adds	r3, #1
 80196f8:	781b      	ldrb	r3, [r3, #0]
 80196fa:	2b43      	cmp	r3, #67	; 0x43
 80196fc:	d000      	beq.n	8019700 <_itsdk_config_consolePriv+0x1a0>
 80196fe:	e15d      	b.n	80199bc <_itsdk_config_consolePriv+0x45c>
 8019700:	687b      	ldr	r3, [r7, #4]
 8019702:	3302      	adds	r3, #2
 8019704:	781b      	ldrb	r3, [r3, #0]
 8019706:	2b3a      	cmp	r3, #58	; 0x3a
 8019708:	d000      	beq.n	801970c <_itsdk_config_consolePriv+0x1ac>
 801970a:	e157      	b.n	80199bc <_itsdk_config_consolePriv+0x45c>
 801970c:	687b      	ldr	r3, [r7, #4]
 801970e:	3304      	adds	r3, #4
 8019710:	781b      	ldrb	r3, [r3, #0]
 8019712:	2b3a      	cmp	r3, #58	; 0x3a
 8019714:	d000      	beq.n	8019718 <_itsdk_config_consolePriv+0x1b8>
 8019716:	e151      	b.n	80199bc <_itsdk_config_consolePriv+0x45c>
			switch(buffer[3]) {
 8019718:	687b      	ldr	r3, [r7, #4]
 801971a:	3303      	adds	r3, #3
 801971c:	781b      	ldrb	r3, [r3, #0]
 801971e:	3b30      	subs	r3, #48	; 0x30
 8019720:	2b22      	cmp	r3, #34	; 0x22
 8019722:	d900      	bls.n	8019726 <_itsdk_config_consolePriv+0x1c6>
 8019724:	e14c      	b.n	80199c0 <_itsdk_config_consolePriv+0x460>
 8019726:	009a      	lsls	r2, r3, #2
 8019728:	4b84      	ldr	r3, [pc, #528]	; (801993c <_itsdk_config_consolePriv+0x3dc>)
 801972a:	18d3      	adds	r3, r2, r3
 801972c:	681b      	ldr	r3, [r3, #0]
 801972e:	469f      	mov	pc, r3
			#if ITSDK_WITH_SIGFOX_LIB == __ENABLE || ITSDK_WITH_LORAWAN_LIB == __ENABLE
			case 'N': {
				// sdk.activeNetwork
				switch ( buffer[5] ) {
 8019730:	687b      	ldr	r3, [r7, #4]
 8019732:	3305      	adds	r3, #5
 8019734:	781b      	ldrb	r3, [r3, #0]
 8019736:	2b31      	cmp	r3, #49	; 0x31
 8019738:	d007      	beq.n	801974a <_itsdk_config_consolePriv+0x1ea>
 801973a:	2b32      	cmp	r3, #50	; 0x32
 801973c:	d009      	beq.n	8019752 <_itsdk_config_consolePriv+0x1f2>
 801973e:	2b30      	cmp	r3, #48	; 0x30
 8019740:	d10b      	bne.n	801975a <_itsdk_config_consolePriv+0x1fa>
					case '0':
					   itsdk_config_shadow.sdk.activeNetwork = __ACTIV_NETWORK_NONE;
 8019742:	4b7f      	ldr	r3, [pc, #508]	; (8019940 <_itsdk_config_consolePriv+0x3e0>)
 8019744:	2200      	movs	r2, #0
 8019746:	80da      	strh	r2, [r3, #6]
					   break;
 8019748:	e00d      	b.n	8019766 <_itsdk_config_consolePriv+0x206>
					case '1':
					   itsdk_config_shadow.sdk.activeNetwork = __ACTIV_NETWORK_SIGFOX;
 801974a:	4b7d      	ldr	r3, [pc, #500]	; (8019940 <_itsdk_config_consolePriv+0x3e0>)
 801974c:	2201      	movs	r2, #1
 801974e:	80da      	strh	r2, [r3, #6]
					   break;
 8019750:	e009      	b.n	8019766 <_itsdk_config_consolePriv+0x206>
					case '2':
					   itsdk_config_shadow.sdk.activeNetwork = __ACTIV_NETWORK_LORAWAN;
 8019752:	4b7b      	ldr	r3, [pc, #492]	; (8019940 <_itsdk_config_consolePriv+0x3e0>)
 8019754:	2202      	movs	r2, #2
 8019756:	80da      	strh	r2, [r3, #6]
					   break;
 8019758:	e005      	b.n	8019766 <_itsdk_config_consolePriv+0x206>
					default:
						_itsdk_console_printf("KO\r\n");
 801975a:	4b77      	ldr	r3, [pc, #476]	; (8019938 <_itsdk_config_consolePriv+0x3d8>)
 801975c:	0018      	movs	r0, r3
 801975e:	f7ff f99b 	bl	8018a98 <_itsdk_console_printf>
						return ITSDK_CONSOLE_FAILED;
 8019762:	2302      	movs	r3, #2
 8019764:	e12e      	b.n	80199c4 <_itsdk_config_consolePriv+0x464>
				}
				_itsdk_console_printf("OK\r\n");
 8019766:	4b6e      	ldr	r3, [pc, #440]	; (8019920 <_itsdk_config_consolePriv+0x3c0>)
 8019768:	0018      	movs	r0, r3
 801976a:	f7ff f995 	bl	8018a98 <_itsdk_console_printf>
				return ITSDK_CONSOLE_SUCCES;
 801976e:	2300      	movs	r3, #0
 8019770:	e128      	b.n	80199c4 <_itsdk_config_consolePriv+0x464>
			}
			case 'R': {
				if ( itdt_isHexString( &buffer[5],4,false) ) {
 8019772:	687b      	ldr	r3, [r7, #4]
 8019774:	3305      	adds	r3, #5
 8019776:	2200      	movs	r2, #0
 8019778:	2104      	movs	r1, #4
 801977a:	0018      	movs	r0, r3
 801977c:	f003 fa13 	bl	801cba6 <itdt_isHexString>
 8019780:	1e03      	subs	r3, r0, #0
 8019782:	d01b      	beq.n	80197bc <_itsdk_config_consolePriv+0x25c>
					uint16_t v = itdt_convertHexChar4Int(&buffer[5]);
 8019784:	687b      	ldr	r3, [r7, #4]
 8019786:	3305      	adds	r3, #5
 8019788:	251e      	movs	r5, #30
 801978a:	197c      	adds	r4, r7, r5
 801978c:	0018      	movs	r0, r3
 801978e:	f003 f95e 	bl	801ca4e <itdt_convertHexChar4Int>
 8019792:	0003      	movs	r3, r0
 8019794:	8023      	strh	r3, [r4, #0]
					if ( itdt_count_bits_1(v) <= 1 ) {
 8019796:	197b      	adds	r3, r7, r5
 8019798:	881b      	ldrh	r3, [r3, #0]
 801979a:	0018      	movs	r0, r3
 801979c:	f003 fa4f 	bl	801cc3e <itdt_count_bits_1>
 80197a0:	0003      	movs	r3, r0
 80197a2:	2b01      	cmp	r3, #1
 80197a4:	d80a      	bhi.n	80197bc <_itsdk_config_consolePriv+0x25c>
						itsdk_config_shadow.sdk.activeRegion = v;
 80197a6:	4b66      	ldr	r3, [pc, #408]	; (8019940 <_itsdk_config_consolePriv+0x3e0>)
 80197a8:	221e      	movs	r2, #30
 80197aa:	18ba      	adds	r2, r7, r2
 80197ac:	8812      	ldrh	r2, [r2, #0]
 80197ae:	811a      	strh	r2, [r3, #8]
						_itsdk_console_printf("OK\r\n");
 80197b0:	4b5b      	ldr	r3, [pc, #364]	; (8019920 <_itsdk_config_consolePriv+0x3c0>)
 80197b2:	0018      	movs	r0, r3
 80197b4:	f7ff f970 	bl	8018a98 <_itsdk_console_printf>
						return ITSDK_CONSOLE_SUCCES;
 80197b8:	2300      	movs	r3, #0
 80197ba:	e103      	b.n	80199c4 <_itsdk_config_consolePriv+0x464>
					}
				}
				_itsdk_console_printf("KO\r\n");
 80197bc:	4b5e      	ldr	r3, [pc, #376]	; (8019938 <_itsdk_config_consolePriv+0x3d8>)
 80197be:	0018      	movs	r0, r3
 80197c0:	f7ff f96a 	bl	8018a98 <_itsdk_console_printf>
				return ITSDK_CONSOLE_FAILED;
 80197c4:	2302      	movs	r3, #2
 80197c6:	e0fd      	b.n	80199c4 <_itsdk_config_consolePriv+0x464>
			#endif

 	 	 	#if ITSDK_WITH_LORAWAN_LIB == __ENABLE
			case '0':
				// lora.adrmode
				if ( buffer[5] == '1' ) {
 80197c8:	687b      	ldr	r3, [r7, #4]
 80197ca:	3305      	adds	r3, #5
 80197cc:	781b      	ldrb	r3, [r3, #0]
 80197ce:	2b31      	cmp	r3, #49	; 0x31
 80197d0:	d10d      	bne.n	80197ee <_itsdk_config_consolePriv+0x28e>
					itsdk_config_shadow.sdk.lorawan.adrMode = __LORAWAN_ADR_OFF;
 80197d2:	4b5b      	ldr	r3, [pc, #364]	; (8019940 <_itsdk_config_consolePriv+0x3e0>)
 80197d4:	7a9a      	ldrb	r2, [r3, #10]
 80197d6:	213f      	movs	r1, #63	; 0x3f
 80197d8:	400a      	ands	r2, r1
 80197da:	1c11      	adds	r1, r2, #0
 80197dc:	2240      	movs	r2, #64	; 0x40
 80197de:	430a      	orrs	r2, r1
 80197e0:	729a      	strb	r2, [r3, #10]
					_itsdk_console_printf("OK\r\n");
 80197e2:	4b4f      	ldr	r3, [pc, #316]	; (8019920 <_itsdk_config_consolePriv+0x3c0>)
 80197e4:	0018      	movs	r0, r3
 80197e6:	f7ff f957 	bl	8018a98 <_itsdk_console_printf>
					return ITSDK_CONSOLE_SUCCES;
 80197ea:	2300      	movs	r3, #0
 80197ec:	e0ea      	b.n	80199c4 <_itsdk_config_consolePriv+0x464>
				}
			    if ( buffer[5] == '2' ) {
 80197ee:	687b      	ldr	r3, [r7, #4]
 80197f0:	3305      	adds	r3, #5
 80197f2:	781b      	ldrb	r3, [r3, #0]
 80197f4:	2b32      	cmp	r3, #50	; 0x32
 80197f6:	d10e      	bne.n	8019816 <_itsdk_config_consolePriv+0x2b6>
			    	itsdk_config_shadow.sdk.lorawan.adrMode = __LORAWAN_ADR_ON;
 80197f8:	4b51      	ldr	r3, [pc, #324]	; (8019940 <_itsdk_config_consolePriv+0x3e0>)
 80197fa:	7a9a      	ldrb	r2, [r3, #10]
 80197fc:	213f      	movs	r1, #63	; 0x3f
 80197fe:	400a      	ands	r2, r1
 8019800:	1c11      	adds	r1, r2, #0
 8019802:	2280      	movs	r2, #128	; 0x80
 8019804:	4252      	negs	r2, r2
 8019806:	430a      	orrs	r2, r1
 8019808:	729a      	strb	r2, [r3, #10]
					_itsdk_console_printf("OK\r\n");
 801980a:	4b45      	ldr	r3, [pc, #276]	; (8019920 <_itsdk_config_consolePriv+0x3c0>)
 801980c:	0018      	movs	r0, r3
 801980e:	f7ff f943 	bl	8018a98 <_itsdk_console_printf>
					return ITSDK_CONSOLE_SUCCES;
 8019812:	2300      	movs	r3, #0
 8019814:	e0d6      	b.n	80199c4 <_itsdk_config_consolePriv+0x464>
			    }
				_itsdk_console_printf("KO\r\n");
 8019816:	4b48      	ldr	r3, [pc, #288]	; (8019938 <_itsdk_config_consolePriv+0x3d8>)
 8019818:	0018      	movs	r0, r3
 801981a:	f7ff f93d 	bl	8018a98 <_itsdk_console_printf>
				return ITSDK_CONSOLE_FAILED;
 801981e:	2302      	movs	r3, #2
 8019820:	e0d0      	b.n	80199c4 <_itsdk_config_consolePriv+0x464>
				break;
			case '1':
				// lora.devEuiType
				if ( buffer[5] == '1' ) {
 8019822:	687b      	ldr	r3, [r7, #4]
 8019824:	3305      	adds	r3, #5
 8019826:	781b      	ldrb	r3, [r3, #0]
 8019828:	2b31      	cmp	r3, #49	; 0x31
 801982a:	d10d      	bne.n	8019848 <_itsdk_config_consolePriv+0x2e8>
					itsdk_config_shadow.sdk.lorawan.devEuiType = __LORAWAN_DEVEUI_STATIC;
 801982c:	4b44      	ldr	r3, [pc, #272]	; (8019940 <_itsdk_config_consolePriv+0x3e0>)
 801982e:	7a9a      	ldrb	r2, [r3, #10]
 8019830:	2130      	movs	r1, #48	; 0x30
 8019832:	438a      	bics	r2, r1
 8019834:	1c11      	adds	r1, r2, #0
 8019836:	2210      	movs	r2, #16
 8019838:	430a      	orrs	r2, r1
 801983a:	729a      	strb	r2, [r3, #10]
					_itsdk_console_printf("OK\r\n");
 801983c:	4b38      	ldr	r3, [pc, #224]	; (8019920 <_itsdk_config_consolePriv+0x3c0>)
 801983e:	0018      	movs	r0, r3
 8019840:	f7ff f92a 	bl	8018a98 <_itsdk_console_printf>
					return ITSDK_CONSOLE_SUCCES;
 8019844:	2300      	movs	r3, #0
 8019846:	e0bd      	b.n	80199c4 <_itsdk_config_consolePriv+0x464>
				}
			    if ( buffer[5] == '2' ) {
 8019848:	687b      	ldr	r3, [r7, #4]
 801984a:	3305      	adds	r3, #5
 801984c:	781b      	ldrb	r3, [r3, #0]
 801984e:	2b32      	cmp	r3, #50	; 0x32
 8019850:	d10d      	bne.n	801986e <_itsdk_config_consolePriv+0x30e>
			    	itsdk_config_shadow.sdk.lorawan.devEuiType = __LORAWAN_DEVEUI_GENERATED;
 8019852:	4b3b      	ldr	r3, [pc, #236]	; (8019940 <_itsdk_config_consolePriv+0x3e0>)
 8019854:	7a9a      	ldrb	r2, [r3, #10]
 8019856:	2130      	movs	r1, #48	; 0x30
 8019858:	438a      	bics	r2, r1
 801985a:	1c11      	adds	r1, r2, #0
 801985c:	2220      	movs	r2, #32
 801985e:	430a      	orrs	r2, r1
 8019860:	729a      	strb	r2, [r3, #10]
					_itsdk_console_printf("OK\r\n");
 8019862:	4b2f      	ldr	r3, [pc, #188]	; (8019920 <_itsdk_config_consolePriv+0x3c0>)
 8019864:	0018      	movs	r0, r3
 8019866:	f7ff f917 	bl	8018a98 <_itsdk_console_printf>
					return ITSDK_CONSOLE_SUCCES;
 801986a:	2300      	movs	r3, #0
 801986c:	e0aa      	b.n	80199c4 <_itsdk_config_consolePriv+0x464>
			    }
				_itsdk_console_printf("KO\r\n");
 801986e:	4b32      	ldr	r3, [pc, #200]	; (8019938 <_itsdk_config_consolePriv+0x3d8>)
 8019870:	0018      	movs	r0, r3
 8019872:	f7ff f911 	bl	8018a98 <_itsdk_console_printf>
				return ITSDK_CONSOLE_FAILED;
 8019876:	2302      	movs	r3, #2
 8019878:	e0a4      	b.n	80199c4 <_itsdk_config_consolePriv+0x464>
				break;
			case '2':
				// lora.joinMode
				if ( buffer[5] == '1' ) {
 801987a:	687b      	ldr	r3, [r7, #4]
 801987c:	3305      	adds	r3, #5
 801987e:	781b      	ldrb	r3, [r3, #0]
 8019880:	2b31      	cmp	r3, #49	; 0x31
 8019882:	d10d      	bne.n	80198a0 <_itsdk_config_consolePriv+0x340>
					itsdk_config_shadow.sdk.lorawan.joinMode = __LORAWAN_OTAA;
 8019884:	4b2e      	ldr	r3, [pc, #184]	; (8019940 <_itsdk_config_consolePriv+0x3e0>)
 8019886:	7a9a      	ldrb	r2, [r3, #10]
 8019888:	2103      	movs	r1, #3
 801988a:	438a      	bics	r2, r1
 801988c:	1c11      	adds	r1, r2, #0
 801988e:	2201      	movs	r2, #1
 8019890:	430a      	orrs	r2, r1
 8019892:	729a      	strb	r2, [r3, #10]
					_itsdk_console_printf("OK\r\n");
 8019894:	4b22      	ldr	r3, [pc, #136]	; (8019920 <_itsdk_config_consolePriv+0x3c0>)
 8019896:	0018      	movs	r0, r3
 8019898:	f7ff f8fe 	bl	8018a98 <_itsdk_console_printf>
					return ITSDK_CONSOLE_SUCCES;
 801989c:	2300      	movs	r3, #0
 801989e:	e091      	b.n	80199c4 <_itsdk_config_consolePriv+0x464>
				}
			    if ( buffer[5] == '2' ) {
 80198a0:	687b      	ldr	r3, [r7, #4]
 80198a2:	3305      	adds	r3, #5
 80198a4:	781b      	ldrb	r3, [r3, #0]
 80198a6:	2b32      	cmp	r3, #50	; 0x32
 80198a8:	d10d      	bne.n	80198c6 <_itsdk_config_consolePriv+0x366>
			    	itsdk_config_shadow.sdk.lorawan.joinMode = __LORAWAN_ABP;
 80198aa:	4b25      	ldr	r3, [pc, #148]	; (8019940 <_itsdk_config_consolePriv+0x3e0>)
 80198ac:	7a9a      	ldrb	r2, [r3, #10]
 80198ae:	2103      	movs	r1, #3
 80198b0:	438a      	bics	r2, r1
 80198b2:	1c11      	adds	r1, r2, #0
 80198b4:	2202      	movs	r2, #2
 80198b6:	430a      	orrs	r2, r1
 80198b8:	729a      	strb	r2, [r3, #10]
					_itsdk_console_printf("OK\r\n");
 80198ba:	4b19      	ldr	r3, [pc, #100]	; (8019920 <_itsdk_config_consolePriv+0x3c0>)
 80198bc:	0018      	movs	r0, r3
 80198be:	f7ff f8eb 	bl	8018a98 <_itsdk_console_printf>
					return ITSDK_CONSOLE_SUCCES;
 80198c2:	2300      	movs	r3, #0
 80198c4:	e07e      	b.n	80199c4 <_itsdk_config_consolePriv+0x464>
			    }
				_itsdk_console_printf("KO\r\n");
 80198c6:	4b1c      	ldr	r3, [pc, #112]	; (8019938 <_itsdk_config_consolePriv+0x3d8>)
 80198c8:	0018      	movs	r0, r3
 80198ca:	f7ff f8e5 	bl	8018a98 <_itsdk_console_printf>
				return ITSDK_CONSOLE_FAILED;
 80198ce:	2302      	movs	r3, #2
 80198d0:	e078      	b.n	80199c4 <_itsdk_config_consolePriv+0x464>
				break;
			case '3':
				// lora.networkType
				if ( buffer[5] == '1' ) {
 80198d2:	687b      	ldr	r3, [r7, #4]
 80198d4:	3305      	adds	r3, #5
 80198d6:	781b      	ldrb	r3, [r3, #0]
 80198d8:	2b31      	cmp	r3, #49	; 0x31
 80198da:	d133      	bne.n	8019944 <_itsdk_config_consolePriv+0x3e4>
					itsdk_config_shadow.sdk.lorawan.networkType = __LORAWAN_NWK_PUBLIC;
 80198dc:	4b18      	ldr	r3, [pc, #96]	; (8019940 <_itsdk_config_consolePriv+0x3e0>)
 80198de:	7a9a      	ldrb	r2, [r3, #10]
 80198e0:	210c      	movs	r1, #12
 80198e2:	438a      	bics	r2, r1
 80198e4:	1c11      	adds	r1, r2, #0
 80198e6:	2204      	movs	r2, #4
 80198e8:	430a      	orrs	r2, r1
 80198ea:	729a      	strb	r2, [r3, #10]
					_itsdk_console_printf("OK\r\n");
 80198ec:	4b0c      	ldr	r3, [pc, #48]	; (8019920 <_itsdk_config_consolePriv+0x3c0>)
 80198ee:	0018      	movs	r0, r3
 80198f0:	f7ff f8d2 	bl	8018a98 <_itsdk_console_printf>
					return ITSDK_CONSOLE_SUCCES;
 80198f4:	2300      	movs	r3, #0
 80198f6:	e065      	b.n	80199c4 <_itsdk_config_consolePriv+0x464>
 80198f8:	08020c74 	.word	0x08020c74
 80198fc:	08020c98 	.word	0x08020c98
 8019900:	08020cc8 	.word	0x08020cc8
 8019904:	08020cf0 	.word	0x08020cf0
 8019908:	08020d20 	.word	0x08020d20
 801990c:	08020d54 	.word	0x08020d54
 8019910:	08020d7c 	.word	0x08020d7c
 8019914:	08020db0 	.word	0x08020db0
 8019918:	08020ddc 	.word	0x08020ddc
 801991c:	08020e10 	.word	0x08020e10
 8019920:	08020c6c 	.word	0x08020c6c
 8019924:	50000071 	.word	0x50000071
 8019928:	08020e34 	.word	0x08020e34
 801992c:	08020e58 	.word	0x08020e58
 8019930:	08020e7c 	.word	0x08020e7c
 8019934:	08020ea8 	.word	0x08020ea8
 8019938:	08020ec4 	.word	0x08020ec4
 801993c:	08021dc0 	.word	0x08021dc0
 8019940:	2000166c 	.word	0x2000166c
				}
			    if ( buffer[5] == '2' ) {
 8019944:	687b      	ldr	r3, [r7, #4]
 8019946:	3305      	adds	r3, #5
 8019948:	781b      	ldrb	r3, [r3, #0]
 801994a:	2b32      	cmp	r3, #50	; 0x32
 801994c:	d10d      	bne.n	801996a <_itsdk_config_consolePriv+0x40a>
			    	itsdk_config_shadow.sdk.lorawan.networkType = __LORAWAN_NWK_PRIVATE;
 801994e:	4b1f      	ldr	r3, [pc, #124]	; (80199cc <_itsdk_config_consolePriv+0x46c>)
 8019950:	7a9a      	ldrb	r2, [r3, #10]
 8019952:	210c      	movs	r1, #12
 8019954:	438a      	bics	r2, r1
 8019956:	1c11      	adds	r1, r2, #0
 8019958:	2208      	movs	r2, #8
 801995a:	430a      	orrs	r2, r1
 801995c:	729a      	strb	r2, [r3, #10]
					_itsdk_console_printf("OK\r\n");
 801995e:	4b1c      	ldr	r3, [pc, #112]	; (80199d0 <_itsdk_config_consolePriv+0x470>)
 8019960:	0018      	movs	r0, r3
 8019962:	f7ff f899 	bl	8018a98 <_itsdk_console_printf>
					return ITSDK_CONSOLE_SUCCES;
 8019966:	2300      	movs	r3, #0
 8019968:	e02c      	b.n	80199c4 <_itsdk_config_consolePriv+0x464>
			    }
				_itsdk_console_printf("KO\r\n");
 801996a:	4b1a      	ldr	r3, [pc, #104]	; (80199d4 <_itsdk_config_consolePriv+0x474>)
 801996c:	0018      	movs	r0, r3
 801996e:	f7ff f893 	bl	8018a98 <_itsdk_console_printf>
				return ITSDK_CONSOLE_FAILED;
 8019972:	2302      	movs	r3, #2
 8019974:	e026      	b.n	80199c4 <_itsdk_config_consolePriv+0x464>
				break;
			case '4':
				// lora.retries
				if ( sz >= 7 ) {
 8019976:	1cfb      	adds	r3, r7, #3
 8019978:	781b      	ldrb	r3, [r3, #0]
 801997a:	2b06      	cmp	r3, #6
 801997c:	d918      	bls.n	80199b0 <_itsdk_config_consolePriv+0x450>
					int v = itdt_convertDecCharNInt(&buffer[5],2);
 801997e:	687b      	ldr	r3, [r7, #4]
 8019980:	3305      	adds	r3, #5
 8019982:	2102      	movs	r1, #2
 8019984:	0018      	movs	r0, r3
 8019986:	f003 f887 	bl	801ca98 <itdt_convertDecCharNInt>
 801998a:	0003      	movs	r3, r0
 801998c:	61bb      	str	r3, [r7, #24]
					if ( v != ITSDK_INVALID_VALUE_32B && v <= 5 ) {
 801998e:	69bb      	ldr	r3, [r7, #24]
 8019990:	4a11      	ldr	r2, [pc, #68]	; (80199d8 <_itsdk_config_consolePriv+0x478>)
 8019992:	4293      	cmp	r3, r2
 8019994:	d00c      	beq.n	80199b0 <_itsdk_config_consolePriv+0x450>
 8019996:	69bb      	ldr	r3, [r7, #24]
 8019998:	2b05      	cmp	r3, #5
 801999a:	dc09      	bgt.n	80199b0 <_itsdk_config_consolePriv+0x450>
						itsdk_config_shadow.sdk.lorawan.retries = v;
 801999c:	69bb      	ldr	r3, [r7, #24]
 801999e:	b2da      	uxtb	r2, r3
 80199a0:	4b0a      	ldr	r3, [pc, #40]	; (80199cc <_itsdk_config_consolePriv+0x46c>)
 80199a2:	72da      	strb	r2, [r3, #11]
						_itsdk_console_printf("OK\r\n");
 80199a4:	4b0a      	ldr	r3, [pc, #40]	; (80199d0 <_itsdk_config_consolePriv+0x470>)
 80199a6:	0018      	movs	r0, r3
 80199a8:	f7ff f876 	bl	8018a98 <_itsdk_console_printf>
						return ITSDK_CONSOLE_SUCCES;
 80199ac:	2300      	movs	r3, #0
 80199ae:	e009      	b.n	80199c4 <_itsdk_config_consolePriv+0x464>
					}
				}
				_itsdk_console_printf("KO\r\n");
 80199b0:	4b08      	ldr	r3, [pc, #32]	; (80199d4 <_itsdk_config_consolePriv+0x474>)
 80199b2:	0018      	movs	r0, r3
 80199b4:	f7ff f870 	bl	8018a98 <_itsdk_console_printf>
				return ITSDK_CONSOLE_FAILED;
 80199b8:	2302      	movs	r3, #2
 80199ba:	e003      	b.n	80199c4 <_itsdk_config_consolePriv+0x464>
				break;
			#endif	// ITSDK_WITH_SIGFOX_LIB
			default:
				break;
			}
		}
 80199bc:	46c0      	nop			; (mov r8, r8)
 80199be:	e000      	b.n	80199c2 <_itsdk_config_consolePriv+0x462>
				break;
 80199c0:	46c0      	nop			; (mov r8, r8)
	}
#endif
  return ITSDK_CONSOLE_NOTFOUND;
 80199c2:	2301      	movs	r3, #1
}
 80199c4:	0018      	movs	r0, r3
 80199c6:	46bd      	mov	sp, r7
 80199c8:	b008      	add	sp, #32
 80199ca:	bdb0      	pop	{r4, r5, r7, pc}
 80199cc:	2000166c 	.word	0x2000166c
 80199d0:	08020c6c 	.word	0x08020c6c
 80199d4:	08020ec4 	.word	0x08020ec4
 80199d8:	0fffffff 	.word	0x0fffffff

080199dc <itsdk_state_init>:
#endif
#include <it_sdk/lorawan/lorawan.h>

itsdk_state_t itsdk_state;

void itsdk_state_init() {
 80199dc:	b5b0      	push	{r4, r5, r7, lr}
 80199de:	af00      	add	r7, sp, #0
	itsdk_state.lastWakeUpTimeUs = 0;
 80199e0:	4a09      	ldr	r2, [pc, #36]	; (8019a08 <itsdk_state_init+0x2c>)
 80199e2:	2300      	movs	r3, #0
 80199e4:	2400      	movs	r4, #0
 80199e6:	6093      	str	r3, [r2, #8]
 80199e8:	60d4      	str	r4, [r2, #12]
	itsdk_state.lastResetCause = itsdk_getResetCause();
 80199ea:	f004 fbd7 	bl	801e19c <itsdk_getResetCause>
 80199ee:	0003      	movs	r3, r0
 80199f0:	001a      	movs	r2, r3
 80199f2:	4b05      	ldr	r3, [pc, #20]	; (8019a08 <itsdk_state_init+0x2c>)
 80199f4:	701a      	strb	r2, [r3, #0]

#if ITSDK_CONFIGURATION_MODE != __CONFIG_STATIC
   #if ITSDK_WITH_SIGFOX_LIB == __ENABLE || ITSDK_WITH_LORAWAN_LIB == __ENABLE
	itsdk_state.activeNetwork = (uint8_t)itsdk_config.sdk.activeNetwork;
 80199f6:	4b05      	ldr	r3, [pc, #20]	; (8019a0c <itsdk_state_init+0x30>)
 80199f8:	88db      	ldrh	r3, [r3, #6]
 80199fa:	b2da      	uxtb	r2, r3
 80199fc:	4b02      	ldr	r3, [pc, #8]	; (8019a08 <itsdk_state_init+0x2c>)
 80199fe:	705a      	strb	r2, [r3, #1]
  #else
    #error INVALID ITSDK_SIGFOX_NVM_SOURCE VALUE
  #endif
#endif

	return;
 8019a00:	46c0      	nop			; (mov r8, r8)
}
 8019a02:	46bd      	mov	sp, r7
 8019a04:	bdb0      	pop	{r4, r5, r7, pc}
 8019a06:	46c0      	nop			; (mov r8, r8)
 8019a08:	200016a8 	.word	0x200016a8
 8019a0c:	20001688 	.word	0x20001688

08019a10 <itsdk_print_state>:

#if ITSDK_WITH_CONSOLE == __ENABLE
void itsdk_print_state() {
 8019a10:	b5b0      	push	{r4, r5, r7, lr}
 8019a12:	af00      	add	r7, sp, #0
	_itsdk_console_printf("state.lastWakeUpTimeUs %d ms\r\n",(uint32_t)(itsdk_state.lastWakeUpTimeUs/1000));
 8019a14:	4b19      	ldr	r3, [pc, #100]	; (8019a7c <itsdk_print_state+0x6c>)
 8019a16:	6898      	ldr	r0, [r3, #8]
 8019a18:	68d9      	ldr	r1, [r3, #12]
 8019a1a:	22fa      	movs	r2, #250	; 0xfa
 8019a1c:	0092      	lsls	r2, r2, #2
 8019a1e:	2300      	movs	r3, #0
 8019a20:	f7e6 fd52 	bl	80004c8 <__aeabi_uldivmod>
 8019a24:	0003      	movs	r3, r0
 8019a26:	000c      	movs	r4, r1
 8019a28:	001a      	movs	r2, r3
 8019a2a:	4b15      	ldr	r3, [pc, #84]	; (8019a80 <itsdk_print_state+0x70>)
 8019a2c:	0011      	movs	r1, r2
 8019a2e:	0018      	movs	r0, r3
 8019a30:	f7ff f832 	bl	8018a98 <_itsdk_console_printf>
	_itsdk_console_printf("state.lastResetCause 0x%X \r\n",(uint32_t)(itsdk_state.lastResetCause));
 8019a34:	4b11      	ldr	r3, [pc, #68]	; (8019a7c <itsdk_print_state+0x6c>)
 8019a36:	781b      	ldrb	r3, [r3, #0]
 8019a38:	001a      	movs	r2, r3
 8019a3a:	4b12      	ldr	r3, [pc, #72]	; (8019a84 <itsdk_print_state+0x74>)
 8019a3c:	0011      	movs	r1, r2
 8019a3e:	0018      	movs	r0, r3
 8019a40:	f7ff f82a 	bl	8018a98 <_itsdk_console_printf>
#if ITSDK_CONFIGURATION_MODE != __CONFIG_STATIC
   #if ITSDK_WITH_SIGFOX_LIB == __ENABLE || ITSDK_WITH_LORAWAN_LIB == __ENABLE
	_itsdk_console_printf("state.activeNetwork : %d\r\n",itsdk_state.activeNetwork);
 8019a44:	4b0d      	ldr	r3, [pc, #52]	; (8019a7c <itsdk_print_state+0x6c>)
 8019a46:	785b      	ldrb	r3, [r3, #1]
 8019a48:	001a      	movs	r2, r3
 8019a4a:	4b0f      	ldr	r3, [pc, #60]	; (8019a88 <itsdk_print_state+0x78>)
 8019a4c:	0011      	movs	r1, r2
 8019a4e:	0018      	movs	r0, r3
 8019a50:	f7ff f822 	bl	8018a98 <_itsdk_console_printf>
	#if ITSDK_WITH_SIGFOX_LIB == __ENABLE
	#endif
   #endif
#endif
#if ITSDK_WITH_LORAWAN_LIB == __ENABLE
	if ( itsdk_state.activeNetwork == __ACTIV_NETWORK_LORAWAN ) {
 8019a54:	4b09      	ldr	r3, [pc, #36]	; (8019a7c <itsdk_print_state+0x6c>)
 8019a56:	785b      	ldrb	r3, [r3, #1]
 8019a58:	2b02      	cmp	r3, #2
 8019a5a:	d10b      	bne.n	8019a74 <itsdk_print_state+0x64>
  	  _itsdk_console_printf("state.lorawan.joined: %c\r\n",(itsdk_lorawan_hasjoined()?'Y':'N'));
 8019a5c:	f002 fd04 	bl	801c468 <itsdk_lorawan_hasjoined>
 8019a60:	1e03      	subs	r3, r0, #0
 8019a62:	d001      	beq.n	8019a68 <itsdk_print_state+0x58>
 8019a64:	2359      	movs	r3, #89	; 0x59
 8019a66:	e000      	b.n	8019a6a <itsdk_print_state+0x5a>
 8019a68:	234e      	movs	r3, #78	; 0x4e
 8019a6a:	4a08      	ldr	r2, [pc, #32]	; (8019a8c <itsdk_print_state+0x7c>)
 8019a6c:	0019      	movs	r1, r3
 8019a6e:	0010      	movs	r0, r2
 8019a70:	f7ff f812 	bl	8018a98 <_itsdk_console_printf>
  #else
    #error INVALID ITSDK_SIGFOX_NVM_SOURCE VALUE
  #endif
#endif

}
 8019a74:	46c0      	nop			; (mov r8, r8)
 8019a76:	46bd      	mov	sp, r7
 8019a78:	bdb0      	pop	{r4, r5, r7, pc}
 8019a7a:	46c0      	nop			; (mov r8, r8)
 8019a7c:	200016a8 	.word	0x200016a8
 8019a80:	08020ecc 	.word	0x08020ecc
 8019a84:	08020eec 	.word	0x08020eec
 8019a88:	08020f0c 	.word	0x08020f0c
 8019a8c:	08020f28 	.word	0x08020f28

08019a90 <_itsdk_secstore_getOffset>:
/**
 * Compute the offset of a block in the EEPROM Memory for a given
 * Entry ID.
 *
 */
static itsdk_secStoreReturn_e _itsdk_secstore_getOffset(uint32_t * offset, uint8_t * blockId, itsdk_secStoreBlocks_e block ) {
 8019a90:	b580      	push	{r7, lr}
 8019a92:	b086      	sub	sp, #24
 8019a94:	af00      	add	r7, sp, #0
 8019a96:	60f8      	str	r0, [r7, #12]
 8019a98:	60b9      	str	r1, [r7, #8]
 8019a9a:	1dfb      	adds	r3, r7, #7
 8019a9c:	701a      	strb	r2, [r3, #0]
	itsdk_secStoreBlocks_t * fakeStore = 0;
 8019a9e:	2300      	movs	r3, #0
 8019aa0:	613b      	str	r3, [r7, #16]
	uint32_t _offset;
	switch (block) {
 8019aa2:	1dfb      	adds	r3, r7, #7
 8019aa4:	781b      	ldrb	r3, [r3, #0]
 8019aa6:	2b13      	cmp	r3, #19
 8019aa8:	d83d      	bhi.n	8019b26 <_itsdk_secstore_getOffset+0x96>
 8019aaa:	009a      	lsls	r2, r3, #2
 8019aac:	4b27      	ldr	r3, [pc, #156]	; (8019b4c <_itsdk_secstore_getOffset+0xbc>)
 8019aae:	18d3      	adds	r3, r2, r3
 8019ab0:	681b      	ldr	r3, [r3, #0]
 8019ab2:	469f      	mov	pc, r3
	case ITSDK_SS_CONSOLEKEY:
		_offset = (uint32_t)&fakeStore->consolePasswd;
 8019ab4:	693b      	ldr	r3, [r7, #16]
 8019ab6:	617b      	str	r3, [r7, #20]
		break;
 8019ab8:	e037      	b.n	8019b2a <_itsdk_secstore_getOffset+0x9a>
	case ITSDK_SS_SIGFOXKEY:
	  #if defined(ITSDK_WITH_SIGFOX_LIB) && ITSDK_WITH_SIGFOX_LIB == __ENABLE
		_offset = (uint32_t)&fakeStore->sigfoxKey;
	  #else
		return SS_FAILED_NOTEXISTING;
 8019aba:	2301      	movs	r3, #1
 8019abc:	e041      	b.n	8019b42 <_itsdk_secstore_getOffset+0xb2>
	  #endif
		break;
	case ITSDK_SS_LORA_ABP_NETIDDEVID:
      #if defined(ITSDK_WITH_LORAWAN_LIB) && ITSDK_WITH_LORAWAN_LIB == __ENABLE
		_offset = (uint32_t)&fakeStore->lorawan.abp.netID_devID;
 8019abe:	693b      	ldr	r3, [r7, #16]
 8019ac0:	3310      	adds	r3, #16
 8019ac2:	617b      	str	r3, [r7, #20]
  	  #else
		return SS_FAILED_NOTEXISTING;
	  #endif
		break;
 8019ac4:	e031      	b.n	8019b2a <_itsdk_secstore_getOffset+0x9a>
	case ITSDK_SS_LORA_ABP_NETKEYF:
      #if defined(ITSDK_WITH_LORAWAN_LIB) && ITSDK_WITH_LORAWAN_LIB == __ENABLE
		_offset = (uint32_t)&fakeStore->lorawan.abp.netkeyf;
 8019ac6:	693b      	ldr	r3, [r7, #16]
 8019ac8:	3320      	adds	r3, #32
 8019aca:	617b      	str	r3, [r7, #20]
  	  #else
		return SS_FAILED_NOTEXISTING;
	  #endif
		break;
 8019acc:	e02d      	b.n	8019b2a <_itsdk_secstore_getOffset+0x9a>
	case ITSDK_SS_LORA_ABP_NETKEYS:
      #if defined(ITSDK_WITH_LORAWAN_LIB) && ITSDK_WITH_LORAWAN_LIB == __ENABLE
		_offset = (uint32_t)&fakeStore->lorawan.abp.netkeys;
 8019ace:	693b      	ldr	r3, [r7, #16]
 8019ad0:	3330      	adds	r3, #48	; 0x30
 8019ad2:	617b      	str	r3, [r7, #20]
  	  #else
		return SS_FAILED_NOTEXISTING;
	  #endif
		break;
 8019ad4:	e029      	b.n	8019b2a <_itsdk_secstore_getOffset+0x9a>
	case ITSDK_SS_LORA_ABP_NETSKEY:
      #if defined(ITSDK_WITH_LORAWAN_LIB) && ITSDK_WITH_LORAWAN_LIB == __ENABLE
		_offset = (uint32_t)&fakeStore->lorawan.abp.netSkey;
 8019ad6:	693b      	ldr	r3, [r7, #16]
 8019ad8:	3340      	adds	r3, #64	; 0x40
 8019ada:	617b      	str	r3, [r7, #20]
  	  #else
		return SS_FAILED_NOTEXISTING;
	  #endif
		break;
 8019adc:	e025      	b.n	8019b2a <_itsdk_secstore_getOffset+0x9a>
	case ITSDK_SS_LORA_ABP_APPSKEY:
      #if defined(ITSDK_WITH_LORAWAN_LIB) && ITSDK_WITH_LORAWAN_LIB == __ENABLE
		_offset = (uint32_t)&fakeStore->lorawan.abp.appSkey;
 8019ade:	693b      	ldr	r3, [r7, #16]
 8019ae0:	3350      	adds	r3, #80	; 0x50
 8019ae2:	617b      	str	r3, [r7, #20]
  	  #else
		return SS_FAILED_NOTEXISTING;
	  #endif
		break;
 8019ae4:	e021      	b.n	8019b2a <_itsdk_secstore_getOffset+0x9a>
	case ITSDK_SS_LORA_OTAA_DEVEUIAPPEUI:
      #if defined(ITSDK_WITH_LORAWAN_LIB) && ITSDK_WITH_LORAWAN_LIB == __ENABLE
		_offset = (uint32_t)&fakeStore->lorawan.otaa.devEUI_appAUI;
 8019ae6:	693b      	ldr	r3, [r7, #16]
 8019ae8:	3310      	adds	r3, #16
 8019aea:	617b      	str	r3, [r7, #20]
  	  #else
		return SS_FAILED_NOTEXISTING;
	  #endif
		break;
 8019aec:	e01d      	b.n	8019b2a <_itsdk_secstore_getOffset+0x9a>
	case ITSDK_SS_LORA_OTAA_APPKEY:
      #if defined(ITSDK_WITH_LORAWAN_LIB) && ITSDK_WITH_LORAWAN_LIB == __ENABLE
		_offset = (uint32_t)&fakeStore->lorawan.otaa.appKey;
 8019aee:	693b      	ldr	r3, [r7, #16]
 8019af0:	3320      	adds	r3, #32
 8019af2:	617b      	str	r3, [r7, #20]
  	  #else
		return SS_FAILED_NOTEXISTING;
	  #endif
		break;
 8019af4:	e019      	b.n	8019b2a <_itsdk_secstore_getOffset+0x9a>
	case ITSDK_SS_LORA_OTAA_NWKKEY:
      #if defined(ITSDK_WITH_LORAWAN_LIB) && ITSDK_WITH_LORAWAN_LIB == __ENABLE
		_offset = (uint32_t)&fakeStore->lorawan.otaa.nwkKey;
 8019af6:	693b      	ldr	r3, [r7, #16]
 8019af8:	3330      	adds	r3, #48	; 0x30
 8019afa:	617b      	str	r3, [r7, #20]
  	  #else
		return SS_FAILED_NOTEXISTING;
	  #endif
		break;
 8019afc:	e015      	b.n	8019b2a <_itsdk_secstore_getOffset+0x9a>
	case ITSDK_SS_AES_MASTERK:
      #if ( defined(ITSDK_SIGFOX_ENCRYPTION) && ( ITSDK_SIGFOX_ENCRYPTION & __PAYLOAD_ENCRYPT_AESCTR ) > 0 ) || ( defined(ITSDK_LORAWAN_ENCRYPTION) && (( ITSDK_LORAWAN_ENCRYPTION & __PAYLOAD_ENCRYPT_AESCTR ) > 0) )
		_offset = (uint32_t)&fakeStore->aesMasterKey;
  	  #else
		return SS_FAILED_NOTEXISTING;
 8019afe:	2301      	movs	r3, #1
 8019b00:	e01f      	b.n	8019b42 <_itsdk_secstore_getOffset+0xb2>
		break;
	case ITSDK_SS_AES_SHARED_NONCE_SPECKKEY:
      #if ( defined(ITSDK_SIGFOX_ENCRYPTION) && ( ITSDK_SIGFOX_ENCRYPTION > 0 )) || ( defined(ITSDK_LORAWAN_ENCRYPTION) && ( ITSDK_LORAWAN_ENCRYPTION > 0 ))
		_offset = (uint32_t)&fakeStore->encryptSharedNonceSpeck;
  	  #else
		return SS_FAILED_NOTEXISTING;
 8019b02:	2301      	movs	r3, #1
 8019b04:	e01d      	b.n	8019b42 <_itsdk_secstore_getOffset+0xb2>
		break;
	case ITSDK_SS_USER0:
	  #if ITSDK_SECSTORE_USRBLOCK >= 1
		_offset = (uint32_t)&fakeStore->user[0];
  	  #else
		return SS_FAILED_NOTEXISTING;
 8019b06:	2301      	movs	r3, #1
 8019b08:	e01b      	b.n	8019b42 <_itsdk_secstore_getOffset+0xb2>
		break;
	case ITSDK_SS_USER1:
	  #if ITSDK_SECSTORE_USRBLOCK >= 2
		_offset = (uint32_t)&fakeStore->user[1];
  	  #else
		return SS_FAILED_NOTEXISTING;
 8019b0a:	2301      	movs	r3, #1
 8019b0c:	e019      	b.n	8019b42 <_itsdk_secstore_getOffset+0xb2>
		break;
	case ITSDK_SS_USER2:
	  #if ITSDK_SECSTORE_USRBLOCK >= 3
		_offset = (uint32_t)&fakeStore->user[2];
  	  #else
		return SS_FAILED_NOTEXISTING;
 8019b0e:	2301      	movs	r3, #1
 8019b10:	e017      	b.n	8019b42 <_itsdk_secstore_getOffset+0xb2>
		break;
	case ITSDK_SS_USER3:
	  #if ITSDK_SECSTORE_USRBLOCK >= 4
		_offset = (uint32_t)&fakeStore->user[3];
  	  #else
		return SS_FAILED_NOTEXISTING;
 8019b12:	2301      	movs	r3, #1
 8019b14:	e015      	b.n	8019b42 <_itsdk_secstore_getOffset+0xb2>
		break;
	case ITSDK_SS_USER4:
	  #if ITSDK_SECSTORE_USRBLOCK >= 5
		_offset = (uint32_t)&fakeStore->user[4];
  	  #else
		return SS_FAILED_NOTEXISTING;
 8019b16:	2301      	movs	r3, #1
 8019b18:	e013      	b.n	8019b42 <_itsdk_secstore_getOffset+0xb2>
		break;
	case ITSDK_SS_USER5:
	  #if ITSDK_SECSTORE_USRBLOCK >= 6
		_offset = (uint32_t)&fakeStore->user[5];
  	  #else
		return SS_FAILED_NOTEXISTING;
 8019b1a:	2301      	movs	r3, #1
 8019b1c:	e011      	b.n	8019b42 <_itsdk_secstore_getOffset+0xb2>
		break;
	case ITSDK_SS_USER6:
	  #if ITSDK_SECSTORE_USRBLOCK >= 7
		_offset = (uint32_t)&fakeStore->user[6];
  	  #else
		return SS_FAILED_NOTEXISTING;
 8019b1e:	2301      	movs	r3, #1
 8019b20:	e00f      	b.n	8019b42 <_itsdk_secstore_getOffset+0xb2>
		break;
	case ITSDK_SS_USER7:
	  #if ITSDK_SECSTORE_USRBLOCK >= 8
		_offset = (uint32_t)&fakeStore->user[7];
  	  #else
		return SS_FAILED_NOTEXISTING;
 8019b22:	2301      	movs	r3, #1
 8019b24:	e00d      	b.n	8019b42 <_itsdk_secstore_getOffset+0xb2>
	  #endif
		break;
	default:
		return SS_FAILED_NOTEXISTING;
 8019b26:	2301      	movs	r3, #1
 8019b28:	e00b      	b.n	8019b42 <_itsdk_secstore_getOffset+0xb2>

	}
	*blockId = (_offset/16);
 8019b2a:	697b      	ldr	r3, [r7, #20]
 8019b2c:	091b      	lsrs	r3, r3, #4
 8019b2e:	b2da      	uxtb	r2, r3
 8019b30:	68bb      	ldr	r3, [r7, #8]
 8019b32:	701a      	strb	r2, [r3, #0]
	_offset+=sizeof(itsdk_secStoreHead_t);
 8019b34:	697b      	ldr	r3, [r7, #20]
 8019b36:	3310      	adds	r3, #16
 8019b38:	617b      	str	r3, [r7, #20]
	*offset=_offset;
 8019b3a:	68fb      	ldr	r3, [r7, #12]
 8019b3c:	697a      	ldr	r2, [r7, #20]
 8019b3e:	601a      	str	r2, [r3, #0]
	return SS_SUCCESS;
 8019b40:	2300      	movs	r3, #0
}
 8019b42:	0018      	movs	r0, r3
 8019b44:	46bd      	mov	sp, r7
 8019b46:	b006      	add	sp, #24
 8019b48:	bd80      	pop	{r7, pc}
 8019b4a:	46c0      	nop			; (mov r8, r8)
 8019b4c:	08021e4c 	.word	0x08021e4c

08019b50 <_itsdk_secstore_getEntries>:

/**
 * Evaluate the number of block entries regarding the configuration
 * The size is a static value.
 */
static itsdk_secStoreReturn_e _itsdk_secstore_getEntries(uint8_t * entries) {
 8019b50:	b580      	push	{r7, lr}
 8019b52:	b084      	sub	sp, #16
 8019b54:	af00      	add	r7, sp, #0
 8019b56:	6078      	str	r0, [r7, #4]
	uint8_t _entries=1;	// at lease the console
 8019b58:	210f      	movs	r1, #15
 8019b5a:	187b      	adds	r3, r7, r1
 8019b5c:	2201      	movs	r2, #1
 8019b5e:	701a      	strb	r2, [r3, #0]
   #if defined(ITSDK_WITH_SIGFOX_LIB) && ITSDK_WITH_SIGFOX_LIB == __ENABLE
	_entries++;
   #endif
   #if defined(ITSDK_WITH_LORAWAN_LIB) && ITSDK_WITH_LORAWAN_LIB == __ENABLE
   _entries+=5;
 8019b60:	187b      	adds	r3, r7, r1
 8019b62:	187a      	adds	r2, r7, r1
 8019b64:	7812      	ldrb	r2, [r2, #0]
 8019b66:	3205      	adds	r2, #5
 8019b68:	701a      	strb	r2, [r3, #0]
   #endif
   #if ( defined(ITSDK_SIGFOX_ENCRYPTION) && ( ITSDK_SIGFOX_ENCRYPTION > 0 )) || (defined(ITSDK_LORAWAN_ENCRYPTION) && ( ITSDK_LORAWAN_ENCRYPTION > 0))
	_entries+=2;
   #endif
	_entries+=ITSDK_SECSTORE_USRBLOCK;
 8019b6a:	187b      	adds	r3, r7, r1
 8019b6c:	187a      	adds	r2, r7, r1
 8019b6e:	7812      	ldrb	r2, [r2, #0]
 8019b70:	701a      	strb	r2, [r3, #0]
	*entries=_entries;
 8019b72:	687b      	ldr	r3, [r7, #4]
 8019b74:	187a      	adds	r2, r7, r1
 8019b76:	7812      	ldrb	r2, [r2, #0]
 8019b78:	701a      	strb	r2, [r3, #0]
	return SS_SUCCESS;
 8019b7a:	2300      	movs	r3, #0
}
 8019b7c:	0018      	movs	r0, r3
 8019b7e:	46bd      	mov	sp, r7
 8019b80:	b004      	add	sp, #16
 8019b82:	bd80      	pop	{r7, pc}

08019b84 <_itsdk_secstore_controlHeader>:

static itsdk_secStoreReturn_e _itsdk_secstore_controlHeader(itsdk_secStoreHead_t * _head) {
 8019b84:	b590      	push	{r4, r7, lr}
 8019b86:	b085      	sub	sp, #20
 8019b88:	af00      	add	r7, sp, #0
 8019b8a:	6078      	str	r0, [r7, #4]
	// Read the header
	_eeprom_read(ITDT_EEPROM_BANK0, ITSDK_SECSTORE_EEPROM_OFFSET, (void *) _head, sizeof(itsdk_secStoreHead_t));
 8019b8c:	687a      	ldr	r2, [r7, #4]
 8019b8e:	2310      	movs	r3, #16
 8019b90:	2100      	movs	r1, #0
 8019b92:	2000      	movs	r0, #0
 8019b94:	f004 fd88 	bl	801e6a8 <_eeprom_read>
	// Control the header validity
	if ( _head->magic1 != ITSDK_SECSTORE_EEPROM_MAGIC ) return SS_FAILED_NOTINITIALIZED;
 8019b98:	687b      	ldr	r3, [r7, #4]
 8019b9a:	781b      	ldrb	r3, [r3, #0]
 8019b9c:	220f      	movs	r2, #15
 8019b9e:	4013      	ands	r3, r2
 8019ba0:	b2db      	uxtb	r3, r3
 8019ba2:	2b0c      	cmp	r3, #12
 8019ba4:	d001      	beq.n	8019baa <_itsdk_secstore_controlHeader+0x26>
 8019ba6:	2302      	movs	r3, #2
 8019ba8:	e011      	b.n	8019bce <_itsdk_secstore_controlHeader+0x4a>
	uint8_t _count;
	_itsdk_secstore_getEntries(&_count);
 8019baa:	240f      	movs	r4, #15
 8019bac:	193b      	adds	r3, r7, r4
 8019bae:	0018      	movs	r0, r3
 8019bb0:	f7ff ffce 	bl	8019b50 <_itsdk_secstore_getEntries>
	if ( _head->blockCount != _count) return SS_FAILED_NOTINITIALIZED;
 8019bb4:	687b      	ldr	r3, [r7, #4]
 8019bb6:	781b      	ldrb	r3, [r3, #0]
 8019bb8:	061b      	lsls	r3, r3, #24
 8019bba:	0f1b      	lsrs	r3, r3, #28
 8019bbc:	b2db      	uxtb	r3, r3
 8019bbe:	001a      	movs	r2, r3
 8019bc0:	193b      	adds	r3, r7, r4
 8019bc2:	781b      	ldrb	r3, [r3, #0]
 8019bc4:	429a      	cmp	r2, r3
 8019bc6:	d001      	beq.n	8019bcc <_itsdk_secstore_controlHeader+0x48>
 8019bc8:	2302      	movs	r3, #2
 8019bca:	e000      	b.n	8019bce <_itsdk_secstore_controlHeader+0x4a>
	return SS_SUCCESS;
 8019bcc:	2300      	movs	r3, #0
}
 8019bce:	0018      	movs	r0, r3
 8019bd0:	46bd      	mov	sp, r7
 8019bd2:	b005      	add	sp, #20
 8019bd4:	bd90      	pop	{r4, r7, pc}

08019bd6 <itsdk_secstore_getStoreSize>:

/**
 * Return the store size in byte.
 * This function is use to determine the configuration starting address => after the secureStore
 */
itsdk_secStoreReturn_e itsdk_secstore_getStoreSize(uint32_t * sz) {
 8019bd6:	b580      	push	{r7, lr}
 8019bd8:	b082      	sub	sp, #8
 8019bda:	af00      	add	r7, sp, #0
 8019bdc:	6078      	str	r0, [r7, #4]
	*sz=sizeof(itsdk_secStoreHead_t)+sizeof(itsdk_secStoreBlocks_t);
 8019bde:	687b      	ldr	r3, [r7, #4]
 8019be0:	2270      	movs	r2, #112	; 0x70
 8019be2:	601a      	str	r2, [r3, #0]
	return SS_SUCCESS;
 8019be4:	2300      	movs	r3, #0
}
 8019be6:	0018      	movs	r0, r3
 8019be8:	46bd      	mov	sp, r7
 8019bea:	b002      	add	sp, #8
 8019bec:	bd80      	pop	{r7, pc}

08019bee <itsdk_secstore_generateMasterKey>:
 * For this reason the transformation executed here is going to be simple.
 * Params:
 *   dynamicKey is 12B long
 *   masterKey is 16B long
 */
__weak void itsdk_secstore_generateMasterKey(uint8_t * dynamicKey,uint8_t * masterKey) {
 8019bee:	b580      	push	{r7, lr}
 8019bf0:	b084      	sub	sp, #16
 8019bf2:	af00      	add	r7, sp, #0
 8019bf4:	6078      	str	r0, [r7, #4]
 8019bf6:	6039      	str	r1, [r7, #0]

	// we are creating a 16B array from the elements available
	uint8_t _devId[4];
	itsdk_getUniqId(_devId,4);
 8019bf8:	2308      	movs	r3, #8
 8019bfa:	18fb      	adds	r3, r7, r3
 8019bfc:	2104      	movs	r1, #4
 8019bfe:	0018      	movs	r0, r3
 8019c00:	f004 fb72 	bl	801e2e8 <itsdk_getUniqId>

	for ( int i = 0 ; i < 16 ; i++ ) {
 8019c04:	2300      	movs	r3, #0
 8019c06:	60fb      	str	r3, [r7, #12]
 8019c08:	e081      	b.n	8019d0e <itsdk_secstore_generateMasterKey+0x120>
		if ( i < 2 ) {											// 0, 1
 8019c0a:	68fb      	ldr	r3, [r7, #12]
 8019c0c:	2b01      	cmp	r3, #1
 8019c0e:	dc21      	bgt.n	8019c54 <itsdk_secstore_generateMasterKey+0x66>
			masterKey[i] = _devId[i];
 8019c10:	68fb      	ldr	r3, [r7, #12]
 8019c12:	683a      	ldr	r2, [r7, #0]
 8019c14:	18d3      	adds	r3, r2, r3
 8019c16:	2208      	movs	r2, #8
 8019c18:	18b9      	adds	r1, r7, r2
 8019c1a:	68fa      	ldr	r2, [r7, #12]
 8019c1c:	188a      	adds	r2, r1, r2
 8019c1e:	7812      	ldrb	r2, [r2, #0]
 8019c20:	701a      	strb	r2, [r3, #0]
			masterKey[i] ^= dynamicKey[i];
 8019c22:	68fb      	ldr	r3, [r7, #12]
 8019c24:	683a      	ldr	r2, [r7, #0]
 8019c26:	18d3      	adds	r3, r2, r3
 8019c28:	7819      	ldrb	r1, [r3, #0]
 8019c2a:	68fb      	ldr	r3, [r7, #12]
 8019c2c:	687a      	ldr	r2, [r7, #4]
 8019c2e:	18d3      	adds	r3, r2, r3
 8019c30:	781a      	ldrb	r2, [r3, #0]
 8019c32:	68fb      	ldr	r3, [r7, #12]
 8019c34:	6838      	ldr	r0, [r7, #0]
 8019c36:	18c3      	adds	r3, r0, r3
 8019c38:	404a      	eors	r2, r1
 8019c3a:	b2d2      	uxtb	r2, r2
 8019c3c:	701a      	strb	r2, [r3, #0]
			masterKey[i] += (ITSDK_PROTECT_KEY >> 9) & 0xFF;
 8019c3e:	68fb      	ldr	r3, [r7, #12]
 8019c40:	683a      	ldr	r2, [r7, #0]
 8019c42:	18d3      	adds	r3, r2, r3
 8019c44:	781a      	ldrb	r2, [r3, #0]
 8019c46:	68fb      	ldr	r3, [r7, #12]
 8019c48:	6839      	ldr	r1, [r7, #0]
 8019c4a:	18cb      	adds	r3, r1, r3
 8019c4c:	3a33      	subs	r2, #51	; 0x33
 8019c4e:	b2d2      	uxtb	r2, r2
 8019c50:	701a      	strb	r2, [r3, #0]
 8019c52:	e059      	b.n	8019d08 <itsdk_secstore_generateMasterKey+0x11a>
		} else if ( i < 14 ) {									// 2 .. 13
 8019c54:	68fb      	ldr	r3, [r7, #12]
 8019c56:	2b0d      	cmp	r3, #13
 8019c58:	dc33      	bgt.n	8019cc2 <itsdk_secstore_generateMasterKey+0xd4>
			masterKey[i] = dynamicKey[i-2];
 8019c5a:	68fb      	ldr	r3, [r7, #12]
 8019c5c:	3b02      	subs	r3, #2
 8019c5e:	687a      	ldr	r2, [r7, #4]
 8019c60:	18d2      	adds	r2, r2, r3
 8019c62:	68fb      	ldr	r3, [r7, #12]
 8019c64:	6839      	ldr	r1, [r7, #0]
 8019c66:	18cb      	adds	r3, r1, r3
 8019c68:	7812      	ldrb	r2, [r2, #0]
 8019c6a:	701a      	strb	r2, [r3, #0]
			masterKey[i] ^= _devId[i & 3];
 8019c6c:	68fb      	ldr	r3, [r7, #12]
 8019c6e:	683a      	ldr	r2, [r7, #0]
 8019c70:	18d3      	adds	r3, r2, r3
 8019c72:	7819      	ldrb	r1, [r3, #0]
 8019c74:	68fb      	ldr	r3, [r7, #12]
 8019c76:	2203      	movs	r2, #3
 8019c78:	4013      	ands	r3, r2
 8019c7a:	2208      	movs	r2, #8
 8019c7c:	18ba      	adds	r2, r7, r2
 8019c7e:	5cd2      	ldrb	r2, [r2, r3]
 8019c80:	68fb      	ldr	r3, [r7, #12]
 8019c82:	6838      	ldr	r0, [r7, #0]
 8019c84:	18c3      	adds	r3, r0, r3
 8019c86:	404a      	eors	r2, r1
 8019c88:	b2d2      	uxtb	r2, r2
 8019c8a:	701a      	strb	r2, [r3, #0]
			masterKey[i] ^= (ITSDK_PROTECT_KEY >> 13) & 0xFF;
 8019c8c:	68fb      	ldr	r3, [r7, #12]
 8019c8e:	683a      	ldr	r2, [r7, #0]
 8019c90:	18d3      	adds	r3, r2, r3
 8019c92:	781a      	ldrb	r2, [r3, #0]
 8019c94:	68fb      	ldr	r3, [r7, #12]
 8019c96:	6839      	ldr	r1, [r7, #0]
 8019c98:	18cb      	adds	r3, r1, r3
 8019c9a:	212c      	movs	r1, #44	; 0x2c
 8019c9c:	404a      	eors	r2, r1
 8019c9e:	b2d2      	uxtb	r2, r2
 8019ca0:	701a      	strb	r2, [r3, #0]
			masterKey[i] ^= masterKey[i-1];
 8019ca2:	68fb      	ldr	r3, [r7, #12]
 8019ca4:	683a      	ldr	r2, [r7, #0]
 8019ca6:	18d3      	adds	r3, r2, r3
 8019ca8:	7819      	ldrb	r1, [r3, #0]
 8019caa:	68fb      	ldr	r3, [r7, #12]
 8019cac:	3b01      	subs	r3, #1
 8019cae:	683a      	ldr	r2, [r7, #0]
 8019cb0:	18d3      	adds	r3, r2, r3
 8019cb2:	781a      	ldrb	r2, [r3, #0]
 8019cb4:	68fb      	ldr	r3, [r7, #12]
 8019cb6:	6838      	ldr	r0, [r7, #0]
 8019cb8:	18c3      	adds	r3, r0, r3
 8019cba:	404a      	eors	r2, r1
 8019cbc:	b2d2      	uxtb	r2, r2
 8019cbe:	701a      	strb	r2, [r3, #0]
 8019cc0:	e022      	b.n	8019d08 <itsdk_secstore_generateMasterKey+0x11a>
		} else {												 // 14 .. 15
			masterKey[i] = _devId[3-(15-i)];
 8019cc2:	68fb      	ldr	r3, [r7, #12]
 8019cc4:	3b0c      	subs	r3, #12
 8019cc6:	001a      	movs	r2, r3
 8019cc8:	68fb      	ldr	r3, [r7, #12]
 8019cca:	6839      	ldr	r1, [r7, #0]
 8019ccc:	18cb      	adds	r3, r1, r3
 8019cce:	2108      	movs	r1, #8
 8019cd0:	1879      	adds	r1, r7, r1
 8019cd2:	5c8a      	ldrb	r2, [r1, r2]
 8019cd4:	701a      	strb	r2, [r3, #0]
			masterKey[i] ^= dynamicKey[i-5];
 8019cd6:	68fb      	ldr	r3, [r7, #12]
 8019cd8:	683a      	ldr	r2, [r7, #0]
 8019cda:	18d3      	adds	r3, r2, r3
 8019cdc:	7819      	ldrb	r1, [r3, #0]
 8019cde:	68fb      	ldr	r3, [r7, #12]
 8019ce0:	3b05      	subs	r3, #5
 8019ce2:	687a      	ldr	r2, [r7, #4]
 8019ce4:	18d3      	adds	r3, r2, r3
 8019ce6:	781a      	ldrb	r2, [r3, #0]
 8019ce8:	68fb      	ldr	r3, [r7, #12]
 8019cea:	6838      	ldr	r0, [r7, #0]
 8019cec:	18c3      	adds	r3, r0, r3
 8019cee:	404a      	eors	r2, r1
 8019cf0:	b2d2      	uxtb	r2, r2
 8019cf2:	701a      	strb	r2, [r3, #0]
			masterKey[i] -= (ITSDK_PROTECT_KEY >> 6) & 0xFF;
 8019cf4:	68fb      	ldr	r3, [r7, #12]
 8019cf6:	683a      	ldr	r2, [r7, #0]
 8019cf8:	18d3      	adds	r3, r2, r3
 8019cfa:	781a      	ldrb	r2, [r3, #0]
 8019cfc:	68fb      	ldr	r3, [r7, #12]
 8019cfe:	6839      	ldr	r1, [r7, #0]
 8019d00:	18cb      	adds	r3, r1, r3
 8019d02:	3a6f      	subs	r2, #111	; 0x6f
 8019d04:	b2d2      	uxtb	r2, r2
 8019d06:	701a      	strb	r2, [r3, #0]
	for ( int i = 0 ; i < 16 ; i++ ) {
 8019d08:	68fb      	ldr	r3, [r7, #12]
 8019d0a:	3301      	adds	r3, #1
 8019d0c:	60fb      	str	r3, [r7, #12]
 8019d0e:	68fb      	ldr	r3, [r7, #12]
 8019d10:	2b0f      	cmp	r3, #15
 8019d12:	dc00      	bgt.n	8019d16 <itsdk_secstore_generateMasterKey+0x128>
 8019d14:	e779      	b.n	8019c0a <itsdk_secstore_generateMasterKey+0x1c>
		}
	}
	itsdk_encrypt_cifferKey(masterKey,16);
 8019d16:	683b      	ldr	r3, [r7, #0]
 8019d18:	2110      	movs	r1, #16
 8019d1a:	0018      	movs	r0, r3
 8019d1c:	f000 fd96 	bl	801a84c <itsdk_encrypt_cifferKey>
}
 8019d20:	46c0      	nop			; (mov r8, r8)
 8019d22:	46bd      	mov	sp, r7
 8019d24:	b004      	add	sp, #16
 8019d26:	bd80      	pop	{r7, pc}

08019d28 <itsdk_secstore_readBlock>:

/**
 * Read the given block and returns the decrypted value into the buffer
 */
itsdk_secStoreReturn_e itsdk_secstore_readBlock(itsdk_secStoreBlocks_e blockType, uint8_t * buffer) {
 8019d28:	b590      	push	{r4, r7, lr}
 8019d2a:	b08d      	sub	sp, #52	; 0x34
 8019d2c:	af00      	add	r7, sp, #0
 8019d2e:	0002      	movs	r2, r0
 8019d30:	6039      	str	r1, [r7, #0]
 8019d32:	1dfb      	adds	r3, r7, #7
 8019d34:	701a      	strb	r2, [r3, #0]
	itsdk_secStoreHead_t	_head;

	// Control Header validity
	if ( _itsdk_secstore_controlHeader(&_head) != SS_SUCCESS ) return SS_FAILED_NOTINITIALIZED;
 8019d36:	2320      	movs	r3, #32
 8019d38:	18fb      	adds	r3, r7, r3
 8019d3a:	0018      	movs	r0, r3
 8019d3c:	f7ff ff22 	bl	8019b84 <_itsdk_secstore_controlHeader>
 8019d40:	1e03      	subs	r3, r0, #0
 8019d42:	d001      	beq.n	8019d48 <itsdk_secstore_readBlock+0x20>
 8019d44:	2302      	movs	r3, #2
 8019d46:	e038      	b.n	8019dba <itsdk_secstore_readBlock+0x92>

	// Control the blockId validity
	uint32_t _offset = 0;
 8019d48:	2300      	movs	r3, #0
 8019d4a:	61fb      	str	r3, [r7, #28]
	uint8_t  _id = 0;
 8019d4c:	211b      	movs	r1, #27
 8019d4e:	187b      	adds	r3, r7, r1
 8019d50:	2200      	movs	r2, #0
 8019d52:	701a      	strb	r2, [r3, #0]
	if ( _itsdk_secstore_getOffset(&_offset,&_id, blockType) != SS_SUCCESS ) return SS_FAILED_NOTEXISTING;
 8019d54:	1dfb      	adds	r3, r7, #7
 8019d56:	781a      	ldrb	r2, [r3, #0]
 8019d58:	1879      	adds	r1, r7, r1
 8019d5a:	231c      	movs	r3, #28
 8019d5c:	18fb      	adds	r3, r7, r3
 8019d5e:	0018      	movs	r0, r3
 8019d60:	f7ff fe96 	bl	8019a90 <_itsdk_secstore_getOffset>
 8019d64:	1e03      	subs	r3, r0, #0
 8019d66:	d001      	beq.n	8019d6c <itsdk_secstore_readBlock+0x44>
 8019d68:	2301      	movs	r3, #1
 8019d6a:	e026      	b.n	8019dba <itsdk_secstore_readBlock+0x92>

	// Control the blockId have been initialized
	if ( (_head.blockUsed & ( 1 << _id )) == 0 ) return SS_FAILED_NOTSET;
 8019d6c:	2320      	movs	r3, #32
 8019d6e:	18fb      	adds	r3, r7, r3
 8019d70:	681b      	ldr	r3, [r3, #0]
 8019d72:	021b      	lsls	r3, r3, #8
 8019d74:	0c1b      	lsrs	r3, r3, #16
 8019d76:	b29b      	uxth	r3, r3
 8019d78:	001a      	movs	r2, r3
 8019d7a:	231b      	movs	r3, #27
 8019d7c:	18fb      	adds	r3, r7, r3
 8019d7e:	781b      	ldrb	r3, [r3, #0]
 8019d80:	411a      	asrs	r2, r3
 8019d82:	0013      	movs	r3, r2
 8019d84:	2201      	movs	r2, #1
 8019d86:	4013      	ands	r3, r2
 8019d88:	d101      	bne.n	8019d8e <itsdk_secstore_readBlock+0x66>
 8019d8a:	2303      	movs	r3, #3
 8019d8c:	e015      	b.n	8019dba <itsdk_secstore_readBlock+0x92>

	// Read block
	_eeprom_read(ITDT_EEPROM_BANK0, ITSDK_SECSTORE_EEPROM_OFFSET+_offset, (void *) buffer, ITSDK_SECSTORE_BLOCKSZ);
 8019d8e:	69f9      	ldr	r1, [r7, #28]
 8019d90:	683a      	ldr	r2, [r7, #0]
 8019d92:	2310      	movs	r3, #16
 8019d94:	2000      	movs	r0, #0
 8019d96:	f004 fc87 	bl	801e6a8 <_eeprom_read>

	// Generate the Master key
	uint8_t masterKey[16];
	itsdk_secstore_generateMasterKey(_head.dynamicKey,masterKey);
 8019d9a:	2408      	movs	r4, #8
 8019d9c:	193a      	adds	r2, r7, r4
 8019d9e:	2320      	movs	r3, #32
 8019da0:	18fb      	adds	r3, r7, r3
 8019da2:	3304      	adds	r3, #4
 8019da4:	0011      	movs	r1, r2
 8019da6:	0018      	movs	r0, r3
 8019da8:	f7ff ff21 	bl	8019bee <itsdk_secstore_generateMasterKey>

	// Decode with AES-128
	itsdk_aes_ecb_decrypt_128B(buffer,buffer,ITSDK_SECSTORE_BLOCKSZ,masterKey);
 8019dac:	193b      	adds	r3, r7, r4
 8019dae:	6839      	ldr	r1, [r7, #0]
 8019db0:	6838      	ldr	r0, [r7, #0]
 8019db2:	2210      	movs	r2, #16
 8019db4:	f000 fd0a 	bl	801a7cc <itsdk_aes_ecb_decrypt_128B>

	return SS_SUCCESS;
 8019db8:	2300      	movs	r3, #0
}
 8019dba:	0018      	movs	r0, r3
 8019dbc:	46bd      	mov	sp, r7
 8019dbe:	b00d      	add	sp, #52	; 0x34
 8019dc0:	bd90      	pop	{r4, r7, pc}

08019dc2 <itsdk_secstore_writeBlock>:

/**
 * Encrypt and Write the given block into the store
 */
itsdk_secStoreReturn_e itsdk_secstore_writeBlock(itsdk_secStoreBlocks_e blockType, uint8_t * buffer) {
 8019dc2:	b5b0      	push	{r4, r5, r7, lr}
 8019dc4:	b08c      	sub	sp, #48	; 0x30
 8019dc6:	af00      	add	r7, sp, #0
 8019dc8:	0002      	movs	r2, r0
 8019dca:	6039      	str	r1, [r7, #0]
 8019dcc:	1dfb      	adds	r3, r7, #7
 8019dce:	701a      	strb	r2, [r3, #0]
	itsdk_secStoreHead_t	_head;

	// Control header validity
	if ( _itsdk_secstore_controlHeader(&_head) != SS_SUCCESS ) return SS_FAILED_NOTINITIALIZED;
 8019dd0:	2320      	movs	r3, #32
 8019dd2:	18fb      	adds	r3, r7, r3
 8019dd4:	0018      	movs	r0, r3
 8019dd6:	f7ff fed5 	bl	8019b84 <_itsdk_secstore_controlHeader>
 8019dda:	1e03      	subs	r3, r0, #0
 8019ddc:	d001      	beq.n	8019de2 <itsdk_secstore_writeBlock+0x20>
 8019dde:	2302      	movs	r3, #2
 8019de0:	e061      	b.n	8019ea6 <itsdk_secstore_writeBlock+0xe4>

	// Control the blockId validity
	uint32_t _offset = 0;
 8019de2:	2300      	movs	r3, #0
 8019de4:	61fb      	str	r3, [r7, #28]
	uint8_t  _id = 0;
 8019de6:	211b      	movs	r1, #27
 8019de8:	187b      	adds	r3, r7, r1
 8019dea:	2200      	movs	r2, #0
 8019dec:	701a      	strb	r2, [r3, #0]
	if ( _itsdk_secstore_getOffset(&_offset,&_id, blockType) != SS_SUCCESS ) return SS_FAILED_NOTEXISTING;
 8019dee:	1dfb      	adds	r3, r7, #7
 8019df0:	781a      	ldrb	r2, [r3, #0]
 8019df2:	1879      	adds	r1, r7, r1
 8019df4:	231c      	movs	r3, #28
 8019df6:	18fb      	adds	r3, r7, r3
 8019df8:	0018      	movs	r0, r3
 8019dfa:	f7ff fe49 	bl	8019a90 <_itsdk_secstore_getOffset>
 8019dfe:	1e03      	subs	r3, r0, #0
 8019e00:	d001      	beq.n	8019e06 <itsdk_secstore_writeBlock+0x44>
 8019e02:	2301      	movs	r3, #1
 8019e04:	e04f      	b.n	8019ea6 <itsdk_secstore_writeBlock+0xe4>

	// Generate the Master key
	uint8_t masterKey[16];
	itsdk_secstore_generateMasterKey(_head.dynamicKey,masterKey);
 8019e06:	2408      	movs	r4, #8
 8019e08:	193a      	adds	r2, r7, r4
 8019e0a:	2520      	movs	r5, #32
 8019e0c:	197b      	adds	r3, r7, r5
 8019e0e:	3304      	adds	r3, #4
 8019e10:	0011      	movs	r1, r2
 8019e12:	0018      	movs	r0, r3
 8019e14:	f7ff feeb 	bl	8019bee <itsdk_secstore_generateMasterKey>

	// Encode with AES-128
	itsdk_aes_ecb_encrypt_128B(buffer,buffer,ITSDK_SECSTORE_BLOCKSZ,masterKey);
 8019e18:	193b      	adds	r3, r7, r4
 8019e1a:	6839      	ldr	r1, [r7, #0]
 8019e1c:	6838      	ldr	r0, [r7, #0]
 8019e1e:	2210      	movs	r2, #16
 8019e20:	f000 fc90 	bl	801a744 <itsdk_aes_ecb_encrypt_128B>

	// Write block
	_eeprom_write(ITDT_EEPROM_BANK0, ITSDK_SECSTORE_EEPROM_OFFSET+_offset, (void *) buffer, ITSDK_SECSTORE_BLOCKSZ);
 8019e24:	69f9      	ldr	r1, [r7, #28]
 8019e26:	683a      	ldr	r2, [r7, #0]
 8019e28:	2310      	movs	r3, #16
 8019e2a:	2000      	movs	r0, #0
 8019e2c:	f004 fb98 	bl	801e560 <_eeprom_write>

	// Update the header
	if ( (_head.blockUsed & ( 1 << _id )) == 0 ) {
 8019e30:	197b      	adds	r3, r7, r5
 8019e32:	681b      	ldr	r3, [r3, #0]
 8019e34:	021b      	lsls	r3, r3, #8
 8019e36:	0c1b      	lsrs	r3, r3, #16
 8019e38:	b29b      	uxth	r3, r3
 8019e3a:	001a      	movs	r2, r3
 8019e3c:	231b      	movs	r3, #27
 8019e3e:	18fb      	adds	r3, r7, r3
 8019e40:	781b      	ldrb	r3, [r3, #0]
 8019e42:	411a      	asrs	r2, r3
 8019e44:	0013      	movs	r3, r2
 8019e46:	2201      	movs	r2, #1
 8019e48:	4013      	ands	r3, r2
 8019e4a:	d12b      	bne.n	8019ea4 <itsdk_secstore_writeBlock+0xe2>
		_head.blockUsed |= ( 1 << _id );
 8019e4c:	2520      	movs	r5, #32
 8019e4e:	197b      	adds	r3, r7, r5
 8019e50:	681b      	ldr	r3, [r3, #0]
 8019e52:	021b      	lsls	r3, r3, #8
 8019e54:	0c1b      	lsrs	r3, r3, #16
 8019e56:	b29b      	uxth	r3, r3
 8019e58:	b21a      	sxth	r2, r3
 8019e5a:	231b      	movs	r3, #27
 8019e5c:	18fb      	adds	r3, r7, r3
 8019e5e:	781b      	ldrb	r3, [r3, #0]
 8019e60:	0019      	movs	r1, r3
 8019e62:	2301      	movs	r3, #1
 8019e64:	408b      	lsls	r3, r1
 8019e66:	b21b      	sxth	r3, r3
 8019e68:	4313      	orrs	r3, r2
 8019e6a:	b21b      	sxth	r3, r3
 8019e6c:	b29a      	uxth	r2, r3
 8019e6e:	197b      	adds	r3, r7, r5
 8019e70:	3301      	adds	r3, #1
 8019e72:	21ff      	movs	r1, #255	; 0xff
 8019e74:	4011      	ands	r1, r2
 8019e76:	000c      	movs	r4, r1
 8019e78:	7819      	ldrb	r1, [r3, #0]
 8019e7a:	2000      	movs	r0, #0
 8019e7c:	4001      	ands	r1, r0
 8019e7e:	1c08      	adds	r0, r1, #0
 8019e80:	1c21      	adds	r1, r4, #0
 8019e82:	4301      	orrs	r1, r0
 8019e84:	7019      	strb	r1, [r3, #0]
 8019e86:	0a12      	lsrs	r2, r2, #8
 8019e88:	b290      	uxth	r0, r2
 8019e8a:	785a      	ldrb	r2, [r3, #1]
 8019e8c:	2100      	movs	r1, #0
 8019e8e:	400a      	ands	r2, r1
 8019e90:	1c11      	adds	r1, r2, #0
 8019e92:	1c02      	adds	r2, r0, #0
 8019e94:	430a      	orrs	r2, r1
 8019e96:	705a      	strb	r2, [r3, #1]
		_eeprom_write(ITDT_EEPROM_BANK0, ITSDK_SECSTORE_EEPROM_OFFSET, (void *) &_head, sizeof(itsdk_secStoreHead_t));
 8019e98:	197a      	adds	r2, r7, r5
 8019e9a:	2310      	movs	r3, #16
 8019e9c:	2100      	movs	r1, #0
 8019e9e:	2000      	movs	r0, #0
 8019ea0:	f004 fb5e 	bl	801e560 <_eeprom_write>
	}

	return SS_SUCCESS;
 8019ea4:	2300      	movs	r3, #0
}
 8019ea6:	0018      	movs	r0, r3
 8019ea8:	46bd      	mov	sp, r7
 8019eaa:	b00c      	add	sp, #48	; 0x30
 8019eac:	bdb0      	pop	{r4, r5, r7, pc}
	...

08019eb0 <itsdk_secstore_init>:


/**
 * Init the Secure Store - create the store structure with the default values
 */
itsdk_secStoreReturn_e itsdk_secstore_init() {
 8019eb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019eb2:	b08d      	sub	sp, #52	; 0x34
 8019eb4:	af00      	add	r7, sp, #0
	// Create the header
	itsdk_secStoreHead_t	_head;
	_head.magic1 = ITSDK_SECSTORE_EEPROM_MAGIC;
 8019eb6:	2020      	movs	r0, #32
 8019eb8:	0004      	movs	r4, r0
 8019eba:	183b      	adds	r3, r7, r0
 8019ebc:	781a      	ldrb	r2, [r3, #0]
 8019ebe:	210f      	movs	r1, #15
 8019ec0:	438a      	bics	r2, r1
 8019ec2:	1c11      	adds	r1, r2, #0
 8019ec4:	220c      	movs	r2, #12
 8019ec6:	430a      	orrs	r2, r1
 8019ec8:	701a      	strb	r2, [r3, #0]
	uint8_t	count;
	_itsdk_secstore_getEntries(&count);
 8019eca:	251f      	movs	r5, #31
 8019ecc:	197b      	adds	r3, r7, r5
 8019ece:	0018      	movs	r0, r3
 8019ed0:	f7ff fe3e 	bl	8019b50 <_itsdk_secstore_getEntries>
	_head.blockCount=count;
 8019ed4:	197b      	adds	r3, r7, r5
 8019ed6:	781b      	ldrb	r3, [r3, #0]
 8019ed8:	1c1a      	adds	r2, r3, #0
 8019eda:	230f      	movs	r3, #15
 8019edc:	4013      	ands	r3, r2
 8019ede:	b2da      	uxtb	r2, r3
 8019ee0:	193b      	adds	r3, r7, r4
 8019ee2:	0110      	lsls	r0, r2, #4
 8019ee4:	781a      	ldrb	r2, [r3, #0]
 8019ee6:	210f      	movs	r1, #15
 8019ee8:	400a      	ands	r2, r1
 8019eea:	1c11      	adds	r1, r2, #0
 8019eec:	1c02      	adds	r2, r0, #0
 8019eee:	430a      	orrs	r2, r1
 8019ef0:	701a      	strb	r2, [r3, #0]
	_head.blockUsed = 0x1;
 8019ef2:	0020      	movs	r0, r4
 8019ef4:	193b      	adds	r3, r7, r4
 8019ef6:	3301      	adds	r3, #1
 8019ef8:	781a      	ldrb	r2, [r3, #0]
 8019efa:	2100      	movs	r1, #0
 8019efc:	400a      	ands	r2, r1
 8019efe:	1c11      	adds	r1, r2, #0
 8019f00:	2201      	movs	r2, #1
 8019f02:	430a      	orrs	r2, r1
 8019f04:	701a      	strb	r2, [r3, #0]
 8019f06:	785a      	ldrb	r2, [r3, #1]
 8019f08:	2100      	movs	r1, #0
 8019f0a:	400a      	ands	r2, r1
 8019f0c:	705a      	strb	r2, [r3, #1]
	uint8_t _buff[12] = ITSDK_SECSTORE_DEFKEY;
 8019f0e:	2110      	movs	r1, #16
 8019f10:	187b      	adds	r3, r7, r1
 8019f12:	4a15      	ldr	r2, [pc, #84]	; (8019f68 <itsdk_secstore_init+0xb8>)
 8019f14:	ca70      	ldmia	r2!, {r4, r5, r6}
 8019f16:	c370      	stmia	r3!, {r4, r5, r6}
	memcpy(_head.dynamicKey,_buff,12);
 8019f18:	183b      	adds	r3, r7, r0
 8019f1a:	187a      	adds	r2, r7, r1
 8019f1c:	3304      	adds	r3, #4
 8019f1e:	ca32      	ldmia	r2!, {r1, r4, r5}
 8019f20:	c332      	stmia	r3!, {r1, r4, r5}

	// Store it
	_eeprom_write(ITDT_EEPROM_BANK0, ITSDK_SECSTORE_EEPROM_OFFSET, (void *) &_head, sizeof(itsdk_secStoreHead_t));
 8019f22:	183a      	adds	r2, r7, r0
 8019f24:	2310      	movs	r3, #16
 8019f26:	2100      	movs	r1, #0
 8019f28:	2000      	movs	r0, #0
 8019f2a:	f004 fb19 	bl	801e560 <_eeprom_write>

	// Init the console login
	uint8_t _buff2[16] = ITSDK_SECSTORE_CONSOLEKEY;
 8019f2e:	0039      	movs	r1, r7
 8019f30:	4a0e      	ldr	r2, [pc, #56]	; (8019f6c <itsdk_secstore_init+0xbc>)
 8019f32:	000b      	movs	r3, r1
 8019f34:	ca11      	ldmia	r2!, {r0, r4}
 8019f36:	c311      	stmia	r3!, {r0, r4}
 8019f38:	7812      	ldrb	r2, [r2, #0]
 8019f3a:	701a      	strb	r2, [r3, #0]
 8019f3c:	2309      	movs	r3, #9
 8019f3e:	18cb      	adds	r3, r1, r3
 8019f40:	2207      	movs	r2, #7
 8019f42:	2100      	movs	r1, #0
 8019f44:	0018      	movs	r0, r3
 8019f46:	f005 f8fb 	bl	801f140 <memset>
	itsdk_secstore_writeBlock(ITSDK_SS_CONSOLEKEY,_buff2);
 8019f4a:	003b      	movs	r3, r7
 8019f4c:	0019      	movs	r1, r3
 8019f4e:	2000      	movs	r0, #0
 8019f50:	f7ff ff37 	bl	8019dc2 <itsdk_secstore_writeBlock>
	bzero(_buff2,16);
 8019f54:	003b      	movs	r3, r7
 8019f56:	2110      	movs	r1, #16
 8019f58:	0018      	movs	r0, r3
 8019f5a:	f005 f8a5 	bl	801f0a8 <bzero>

	return SS_SUCCESS;
 8019f5e:	2300      	movs	r3, #0
}
 8019f60:	0018      	movs	r0, r3
 8019f62:	46bd      	mov	sp, r7
 8019f64:	b00d      	add	sp, #52	; 0x34
 8019f66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019f68:	08020f44 	.word	0x08020f44
 8019f6c:	08020f50 	.word	0x08020f50

08019f70 <itsdk_secstore_isInit>:

/**
 * Return SS_SUCCESS when the secure Store is already initialized
 */
itsdk_secStoreReturn_e itsdk_secstore_isInit() {
 8019f70:	b580      	push	{r7, lr}
 8019f72:	b084      	sub	sp, #16
 8019f74:	af00      	add	r7, sp, #0
	itsdk_secStoreHead_t	_head;
	// Control header validity
	return _itsdk_secstore_controlHeader(&_head);
 8019f76:	003b      	movs	r3, r7
 8019f78:	0018      	movs	r0, r3
 8019f7a:	f7ff fe03 	bl	8019b84 <_itsdk_secstore_controlHeader>
 8019f7e:	0003      	movs	r3, r0
}
 8019f80:	0018      	movs	r0, r3
 8019f82:	46bd      	mov	sp, r7
 8019f84:	b004      	add	sp, #16
 8019f86:	bd80      	pop	{r7, pc}

08019f88 <_itsdk_secstore_writeBlockKey>:
								      }

/**
 * Write a block with a specified MasterKey
 */
static itsdk_secStoreReturn_e _itsdk_secstore_writeBlockKey(itsdk_secStoreBlocks_e blockType, uint8_t * buffer, uint8_t * masterKey) {
 8019f88:	b580      	push	{r7, lr}
 8019f8a:	b086      	sub	sp, #24
 8019f8c:	af00      	add	r7, sp, #0
 8019f8e:	60b9      	str	r1, [r7, #8]
 8019f90:	607a      	str	r2, [r7, #4]
 8019f92:	210f      	movs	r1, #15
 8019f94:	187b      	adds	r3, r7, r1
 8019f96:	1c02      	adds	r2, r0, #0
 8019f98:	701a      	strb	r2, [r3, #0]

	// Control the blockId validity
	uint32_t _offset = 0;
 8019f9a:	2300      	movs	r3, #0
 8019f9c:	617b      	str	r3, [r7, #20]
	uint8_t  _id = 0;
 8019f9e:	2013      	movs	r0, #19
 8019fa0:	183b      	adds	r3, r7, r0
 8019fa2:	2200      	movs	r2, #0
 8019fa4:	701a      	strb	r2, [r3, #0]
	if ( _itsdk_secstore_getOffset(&_offset,&_id, blockType) != SS_SUCCESS ) return SS_FAILED_NOTEXISTING;
 8019fa6:	187b      	adds	r3, r7, r1
 8019fa8:	781a      	ldrb	r2, [r3, #0]
 8019faa:	1839      	adds	r1, r7, r0
 8019fac:	2314      	movs	r3, #20
 8019fae:	18fb      	adds	r3, r7, r3
 8019fb0:	0018      	movs	r0, r3
 8019fb2:	f7ff fd6d 	bl	8019a90 <_itsdk_secstore_getOffset>
 8019fb6:	1e03      	subs	r3, r0, #0
 8019fb8:	d001      	beq.n	8019fbe <_itsdk_secstore_writeBlockKey+0x36>
 8019fba:	2301      	movs	r3, #1
 8019fbc:	e00c      	b.n	8019fd8 <_itsdk_secstore_writeBlockKey+0x50>

	// Encode with AES-128
	itsdk_aes_ecb_encrypt_128B(buffer,buffer,ITSDK_SECSTORE_BLOCKSZ,masterKey);
 8019fbe:	687b      	ldr	r3, [r7, #4]
 8019fc0:	68b9      	ldr	r1, [r7, #8]
 8019fc2:	68b8      	ldr	r0, [r7, #8]
 8019fc4:	2210      	movs	r2, #16
 8019fc6:	f000 fbbd 	bl	801a744 <itsdk_aes_ecb_encrypt_128B>

	// Write block
	_eeprom_write(ITDT_EEPROM_BANK0, ITSDK_SECSTORE_EEPROM_OFFSET+_offset, (void *) buffer, ITSDK_SECSTORE_BLOCKSZ);
 8019fca:	6979      	ldr	r1, [r7, #20]
 8019fcc:	68ba      	ldr	r2, [r7, #8]
 8019fce:	2310      	movs	r3, #16
 8019fd0:	2000      	movs	r0, #0
 8019fd2:	f004 fac5 	bl	801e560 <_eeprom_write>

	return SS_SUCCESS;
 8019fd6:	2300      	movs	r3, #0
}
 8019fd8:	0018      	movs	r0, r3
 8019fda:	46bd      	mov	sp, r7
 8019fdc:	b006      	add	sp, #24
 8019fde:	bd80      	pop	{r7, pc}

08019fe0 <_itsk_secstore_rekey>:


/**
 * Change the dyn key and update all the encrypted elements
 */
static itsdk_console_return_e _itsk_secstore_rekey(uint8_t * newKey){
 8019fe0:	b580      	push	{r7, lr}
 8019fe2:	b090      	sub	sp, #64	; 0x40
 8019fe4:	af00      	add	r7, sp, #0
 8019fe6:	6078      	str	r0, [r7, #4]

	itsdk_secStoreHead_t	_head;
	uint8_t _b[ITSDK_SECSTORE_BLOCKSZ];

	// Control Header validity & load previous header
	if ( _itsdk_secstore_controlHeader(&_head) != SS_SUCCESS ) {
 8019fe8:	232c      	movs	r3, #44	; 0x2c
 8019fea:	18fb      	adds	r3, r7, r3
 8019fec:	0018      	movs	r0, r3
 8019fee:	f7ff fdc9 	bl	8019b84 <_itsdk_secstore_controlHeader>
 8019ff2:	1e03      	subs	r3, r0, #0
 8019ff4:	d005      	beq.n	801a002 <_itsk_secstore_rekey+0x22>
		_itsdk_console_printf("KO\r\n");
 8019ff6:	4b4b      	ldr	r3, [pc, #300]	; (801a124 <_itsk_secstore_rekey+0x144>)
 8019ff8:	0018      	movs	r0, r3
 8019ffa:	f7fe fd4d 	bl	8018a98 <_itsdk_console_printf>
		return ITSDK_CONSOLE_FAILED;
 8019ffe:	2302      	movs	r3, #2
 801a000:	e08c      	b.n	801a11c <_itsk_secstore_rekey+0x13c>
	}

	// Generate the Master key
	uint8_t masterKey[16];
	itsdk_secstore_generateMasterKey(newKey,masterKey);
 801a002:	230c      	movs	r3, #12
 801a004:	18fa      	adds	r2, r7, r3
 801a006:	687b      	ldr	r3, [r7, #4]
 801a008:	0011      	movs	r1, r2
 801a00a:	0018      	movs	r0, r3
 801a00c:	f7ff fdef 	bl	8019bee <itsdk_secstore_generateMasterKey>

	if ( itsdk_secstore_readBlock(ITSDK_SS_CONSOLEKEY, _b) != SS_FAILED_NOTSET ) {
 801a010:	231c      	movs	r3, #28
 801a012:	18fb      	adds	r3, r7, r3
 801a014:	0019      	movs	r1, r3
 801a016:	2000      	movs	r0, #0
 801a018:	f7ff fe86 	bl	8019d28 <itsdk_secstore_readBlock>
 801a01c:	0003      	movs	r3, r0
 801a01e:	2b03      	cmp	r3, #3
 801a020:	d007      	beq.n	801a032 <_itsk_secstore_rekey+0x52>
		_itsdk_secstore_writeBlockKey(ITSDK_SS_CONSOLEKEY,_b,masterKey);
 801a022:	230c      	movs	r3, #12
 801a024:	18fa      	adds	r2, r7, r3
 801a026:	231c      	movs	r3, #28
 801a028:	18fb      	adds	r3, r7, r3
 801a02a:	0019      	movs	r1, r3
 801a02c:	2000      	movs	r0, #0
 801a02e:	f7ff ffab 	bl	8019f88 <_itsdk_secstore_writeBlockKey>
		_itsdk_secstore_writeBlockKey(ITSDK_SS_SIGFOXKEY,_b,masterKey);
	}
#endif
#if defined(ITSDK_WITH_LORAWAN_LIB) && ITSDK_WITH_LORAWAN_LIB == __ENABLE
	// we have more ABP in the UNION when Staticly compiled
	if ( itsdk_secstore_readBlock(ITSDK_SS_LORA_ABP_NETIDDEVID, _b) != SS_FAILED_NOTSET ) {
 801a032:	231c      	movs	r3, #28
 801a034:	18fb      	adds	r3, r7, r3
 801a036:	0019      	movs	r1, r3
 801a038:	2002      	movs	r0, #2
 801a03a:	f7ff fe75 	bl	8019d28 <itsdk_secstore_readBlock>
 801a03e:	0003      	movs	r3, r0
 801a040:	2b03      	cmp	r3, #3
 801a042:	d007      	beq.n	801a054 <_itsk_secstore_rekey+0x74>
		_itsdk_secstore_writeBlockKey(ITSDK_SS_LORA_ABP_NETIDDEVID,_b,masterKey);
 801a044:	230c      	movs	r3, #12
 801a046:	18fa      	adds	r2, r7, r3
 801a048:	231c      	movs	r3, #28
 801a04a:	18fb      	adds	r3, r7, r3
 801a04c:	0019      	movs	r1, r3
 801a04e:	2002      	movs	r0, #2
 801a050:	f7ff ff9a 	bl	8019f88 <_itsdk_secstore_writeBlockKey>
	}

	if ( itsdk_secstore_readBlock(ITSDK_SS_LORA_ABP_NETKEYF, _b) != SS_FAILED_NOTSET ) {
 801a054:	231c      	movs	r3, #28
 801a056:	18fb      	adds	r3, r7, r3
 801a058:	0019      	movs	r1, r3
 801a05a:	2003      	movs	r0, #3
 801a05c:	f7ff fe64 	bl	8019d28 <itsdk_secstore_readBlock>
 801a060:	0003      	movs	r3, r0
 801a062:	2b03      	cmp	r3, #3
 801a064:	d007      	beq.n	801a076 <_itsk_secstore_rekey+0x96>
		_itsdk_secstore_writeBlockKey(ITSDK_SS_LORA_ABP_NETKEYF,_b,masterKey);
 801a066:	230c      	movs	r3, #12
 801a068:	18fa      	adds	r2, r7, r3
 801a06a:	231c      	movs	r3, #28
 801a06c:	18fb      	adds	r3, r7, r3
 801a06e:	0019      	movs	r1, r3
 801a070:	2003      	movs	r0, #3
 801a072:	f7ff ff89 	bl	8019f88 <_itsdk_secstore_writeBlockKey>
	}

	if ( itsdk_secstore_readBlock(ITSDK_SS_LORA_ABP_NETKEYS, _b) != SS_FAILED_NOTSET ) {
 801a076:	231c      	movs	r3, #28
 801a078:	18fb      	adds	r3, r7, r3
 801a07a:	0019      	movs	r1, r3
 801a07c:	2004      	movs	r0, #4
 801a07e:	f7ff fe53 	bl	8019d28 <itsdk_secstore_readBlock>
 801a082:	0003      	movs	r3, r0
 801a084:	2b03      	cmp	r3, #3
 801a086:	d007      	beq.n	801a098 <_itsk_secstore_rekey+0xb8>
		_itsdk_secstore_writeBlockKey(ITSDK_SS_LORA_ABP_NETKEYS,_b,masterKey);
 801a088:	230c      	movs	r3, #12
 801a08a:	18fa      	adds	r2, r7, r3
 801a08c:	231c      	movs	r3, #28
 801a08e:	18fb      	adds	r3, r7, r3
 801a090:	0019      	movs	r1, r3
 801a092:	2004      	movs	r0, #4
 801a094:	f7ff ff78 	bl	8019f88 <_itsdk_secstore_writeBlockKey>
	}

	if ( itsdk_secstore_readBlock(ITSDK_SS_LORA_ABP_NETSKEY, _b) != SS_FAILED_NOTSET ) {
 801a098:	231c      	movs	r3, #28
 801a09a:	18fb      	adds	r3, r7, r3
 801a09c:	0019      	movs	r1, r3
 801a09e:	2005      	movs	r0, #5
 801a0a0:	f7ff fe42 	bl	8019d28 <itsdk_secstore_readBlock>
 801a0a4:	0003      	movs	r3, r0
 801a0a6:	2b03      	cmp	r3, #3
 801a0a8:	d007      	beq.n	801a0ba <_itsk_secstore_rekey+0xda>
		_itsdk_secstore_writeBlockKey(ITSDK_SS_LORA_ABP_NETSKEY,_b,masterKey);
 801a0aa:	230c      	movs	r3, #12
 801a0ac:	18fa      	adds	r2, r7, r3
 801a0ae:	231c      	movs	r3, #28
 801a0b0:	18fb      	adds	r3, r7, r3
 801a0b2:	0019      	movs	r1, r3
 801a0b4:	2005      	movs	r0, #5
 801a0b6:	f7ff ff67 	bl	8019f88 <_itsdk_secstore_writeBlockKey>
	}

	if ( itsdk_secstore_readBlock(ITSDK_SS_LORA_ABP_APPSKEY, _b) != SS_FAILED_NOTSET ) {
 801a0ba:	231c      	movs	r3, #28
 801a0bc:	18fb      	adds	r3, r7, r3
 801a0be:	0019      	movs	r1, r3
 801a0c0:	2006      	movs	r0, #6
 801a0c2:	f7ff fe31 	bl	8019d28 <itsdk_secstore_readBlock>
 801a0c6:	0003      	movs	r3, r0
 801a0c8:	2b03      	cmp	r3, #3
 801a0ca:	d007      	beq.n	801a0dc <_itsk_secstore_rekey+0xfc>
		_itsdk_secstore_writeBlockKey(ITSDK_SS_LORA_ABP_APPSKEY,_b,masterKey);
 801a0cc:	230c      	movs	r3, #12
 801a0ce:	18fa      	adds	r2, r7, r3
 801a0d0:	231c      	movs	r3, #28
 801a0d2:	18fb      	adds	r3, r7, r3
 801a0d4:	0019      	movs	r1, r3
 801a0d6:	2006      	movs	r0, #6
 801a0d8:	f7ff ff56 	bl	8019f88 <_itsdk_secstore_writeBlockKey>
		_itsdk_secstore_writeBlockKey(ITSDK_SS_USER7,_b,masterKey);
	}
#endif

	// Write Header
	for ( int i = 0 ; i < 12 ; i++) {
 801a0dc:	2300      	movs	r3, #0
 801a0de:	63fb      	str	r3, [r7, #60]	; 0x3c
 801a0e0:	e00d      	b.n	801a0fe <_itsk_secstore_rekey+0x11e>
		_head.dynamicKey[i] = newKey[i];
 801a0e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a0e4:	687a      	ldr	r2, [r7, #4]
 801a0e6:	18d3      	adds	r3, r2, r3
 801a0e8:	7819      	ldrb	r1, [r3, #0]
 801a0ea:	232c      	movs	r3, #44	; 0x2c
 801a0ec:	18fa      	adds	r2, r7, r3
 801a0ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a0f0:	18d3      	adds	r3, r2, r3
 801a0f2:	3304      	adds	r3, #4
 801a0f4:	1c0a      	adds	r2, r1, #0
 801a0f6:	701a      	strb	r2, [r3, #0]
	for ( int i = 0 ; i < 12 ; i++) {
 801a0f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a0fa:	3301      	adds	r3, #1
 801a0fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 801a0fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a100:	2b0b      	cmp	r3, #11
 801a102:	ddee      	ble.n	801a0e2 <_itsk_secstore_rekey+0x102>
	}
	_eeprom_write(ITDT_EEPROM_BANK0, ITSDK_SECSTORE_EEPROM_OFFSET, (void *) &_head, sizeof(itsdk_secStoreHead_t));
 801a104:	232c      	movs	r3, #44	; 0x2c
 801a106:	18fa      	adds	r2, r7, r3
 801a108:	2310      	movs	r3, #16
 801a10a:	2100      	movs	r1, #0
 801a10c:	2000      	movs	r0, #0
 801a10e:	f004 fa27 	bl	801e560 <_eeprom_write>
	_itsdk_console_printf("OK\r\n");
 801a112:	4b05      	ldr	r3, [pc, #20]	; (801a128 <_itsk_secstore_rekey+0x148>)
 801a114:	0018      	movs	r0, r3
 801a116:	f7fe fcbf 	bl	8018a98 <_itsdk_console_printf>
	return ITSDK_CONSOLE_SUCCES;
 801a11a:	2300      	movs	r3, #0
}
 801a11c:	0018      	movs	r0, r3
 801a11e:	46bd      	mov	sp, r7
 801a120:	b010      	add	sp, #64	; 0x40
 801a122:	bd80      	pop	{r7, pc}
 801a124:	08020f60 	.word	0x08020f60
 801a128:	08020f68 	.word	0x08020f68

0801a12c <__checkAndConvert>:
/**
 * convert and verify a char * hex string into a uint8_t array
 * verify : size of the string regarding the sz
 * verify : format of the char to match Hex number
 */
static bool __checkAndConvert(char * str,uint8_t start,uint8_t stop,uint8_t sz,uint8_t * buf) {
 801a12c:	b590      	push	{r4, r7, lr}
 801a12e:	b085      	sub	sp, #20
 801a130:	af00      	add	r7, sp, #0
 801a132:	6078      	str	r0, [r7, #4]
 801a134:	000c      	movs	r4, r1
 801a136:	0010      	movs	r0, r2
 801a138:	0019      	movs	r1, r3
 801a13a:	1cfb      	adds	r3, r7, #3
 801a13c:	1c22      	adds	r2, r4, #0
 801a13e:	701a      	strb	r2, [r3, #0]
 801a140:	1cbb      	adds	r3, r7, #2
 801a142:	1c02      	adds	r2, r0, #0
 801a144:	701a      	strb	r2, [r3, #0]
 801a146:	1c7b      	adds	r3, r7, #1
 801a148:	1c0a      	adds	r2, r1, #0
 801a14a:	701a      	strb	r2, [r3, #0]
	if ( (stop - start) < 2*sz ) return false;
 801a14c:	1cbb      	adds	r3, r7, #2
 801a14e:	781a      	ldrb	r2, [r3, #0]
 801a150:	1cfb      	adds	r3, r7, #3
 801a152:	781b      	ldrb	r3, [r3, #0]
 801a154:	1ad2      	subs	r2, r2, r3
 801a156:	1c7b      	adds	r3, r7, #1
 801a158:	781b      	ldrb	r3, [r3, #0]
 801a15a:	005b      	lsls	r3, r3, #1
 801a15c:	429a      	cmp	r2, r3
 801a15e:	da01      	bge.n	801a164 <__checkAndConvert+0x38>
 801a160:	2300      	movs	r3, #0
 801a162:	e034      	b.n	801a1ce <__checkAndConvert+0xa2>
	int k = 0;
 801a164:	2300      	movs	r3, #0
 801a166:	60fb      	str	r3, [r7, #12]
	for ( int i = start ; i < stop ; i+=2 ) {
 801a168:	1cfb      	adds	r3, r7, #3
 801a16a:	781b      	ldrb	r3, [r3, #0]
 801a16c:	60bb      	str	r3, [r7, #8]
 801a16e:	e028      	b.n	801a1c2 <__checkAndConvert+0x96>
		if ( itdt_isHexChar(str[i],false) && itdt_isHexChar(str[i+1],false) ) {
 801a170:	68bb      	ldr	r3, [r7, #8]
 801a172:	687a      	ldr	r2, [r7, #4]
 801a174:	18d3      	adds	r3, r2, r3
 801a176:	781b      	ldrb	r3, [r3, #0]
 801a178:	2100      	movs	r1, #0
 801a17a:	0018      	movs	r0, r3
 801a17c:	f002 fce4 	bl	801cb48 <itdt_isHexChar>
 801a180:	1e03      	subs	r3, r0, #0
 801a182:	d01c      	beq.n	801a1be <__checkAndConvert+0x92>
 801a184:	68bb      	ldr	r3, [r7, #8]
 801a186:	3301      	adds	r3, #1
 801a188:	687a      	ldr	r2, [r7, #4]
 801a18a:	18d3      	adds	r3, r2, r3
 801a18c:	781b      	ldrb	r3, [r3, #0]
 801a18e:	2100      	movs	r1, #0
 801a190:	0018      	movs	r0, r3
 801a192:	f002 fcd9 	bl	801cb48 <itdt_isHexChar>
 801a196:	1e03      	subs	r3, r0, #0
 801a198:	d011      	beq.n	801a1be <__checkAndConvert+0x92>
			buf[k] = itdt_convertHexChar2Int(&str[i]);
 801a19a:	68bb      	ldr	r3, [r7, #8]
 801a19c:	687a      	ldr	r2, [r7, #4]
 801a19e:	18d1      	adds	r1, r2, r3
 801a1a0:	68fb      	ldr	r3, [r7, #12]
 801a1a2:	6a3a      	ldr	r2, [r7, #32]
 801a1a4:	18d4      	adds	r4, r2, r3
 801a1a6:	0008      	movs	r0, r1
 801a1a8:	f002 fc2e 	bl	801ca08 <itdt_convertHexChar2Int>
 801a1ac:	0003      	movs	r3, r0
 801a1ae:	7023      	strb	r3, [r4, #0]
			k++;
 801a1b0:	68fb      	ldr	r3, [r7, #12]
 801a1b2:	3301      	adds	r3, #1
 801a1b4:	60fb      	str	r3, [r7, #12]
	for ( int i = start ; i < stop ; i+=2 ) {
 801a1b6:	68bb      	ldr	r3, [r7, #8]
 801a1b8:	3302      	adds	r3, #2
 801a1ba:	60bb      	str	r3, [r7, #8]
 801a1bc:	e001      	b.n	801a1c2 <__checkAndConvert+0x96>
		} else return false;
 801a1be:	2300      	movs	r3, #0
 801a1c0:	e005      	b.n	801a1ce <__checkAndConvert+0xa2>
	for ( int i = start ; i < stop ; i+=2 ) {
 801a1c2:	1cbb      	adds	r3, r7, #2
 801a1c4:	781b      	ldrb	r3, [r3, #0]
 801a1c6:	68ba      	ldr	r2, [r7, #8]
 801a1c8:	429a      	cmp	r2, r3
 801a1ca:	dbd1      	blt.n	801a170 <__checkAndConvert+0x44>
	}
	return true;
 801a1cc:	2301      	movs	r3, #1
}
 801a1ce:	0018      	movs	r0, r3
 801a1d0:	46bd      	mov	sp, r7
 801a1d2:	b005      	add	sp, #20
 801a1d4:	bd90      	pop	{r4, r7, pc}
	...

0801a1d8 <__updateField>:

static itsdk_console_return_e __updateField(char * buffer, uint8_t sz, uint8_t *b, itsdk_secStoreBlocks_e type) {
 801a1d8:	b590      	push	{r4, r7, lr}
 801a1da:	b087      	sub	sp, #28
 801a1dc:	af02      	add	r7, sp, #8
 801a1de:	60f8      	str	r0, [r7, #12]
 801a1e0:	0008      	movs	r0, r1
 801a1e2:	607a      	str	r2, [r7, #4]
 801a1e4:	0019      	movs	r1, r3
 801a1e6:	240b      	movs	r4, #11
 801a1e8:	193b      	adds	r3, r7, r4
 801a1ea:	1c02      	adds	r2, r0, #0
 801a1ec:	701a      	strb	r2, [r3, #0]
 801a1ee:	230a      	movs	r3, #10
 801a1f0:	18fb      	adds	r3, r7, r3
 801a1f2:	1c0a      	adds	r2, r1, #0
 801a1f4:	701a      	strb	r2, [r3, #0]
	if ( __checkAndConvert(buffer,5,sz,16,b) ) {
 801a1f6:	193b      	adds	r3, r7, r4
 801a1f8:	781a      	ldrb	r2, [r3, #0]
 801a1fa:	68f8      	ldr	r0, [r7, #12]
 801a1fc:	687b      	ldr	r3, [r7, #4]
 801a1fe:	9300      	str	r3, [sp, #0]
 801a200:	2310      	movs	r3, #16
 801a202:	2105      	movs	r1, #5
 801a204:	f7ff ff92 	bl	801a12c <__checkAndConvert>
 801a208:	1e03      	subs	r3, r0, #0
 801a20a:	d01f      	beq.n	801a24c <__updateField+0x74>
		if ( type == ITSDK_SS_SIGFOXKEY ) {
 801a20c:	230a      	movs	r3, #10
 801a20e:	18fb      	adds	r3, r7, r3
 801a210:	781b      	ldrb	r3, [r3, #0]
 801a212:	2b01      	cmp	r3, #1
 801a214:	d104      	bne.n	801a220 <__updateField+0x48>
		   itsdk_encrypt_cifferKey(b,16);
 801a216:	687b      	ldr	r3, [r7, #4]
 801a218:	2110      	movs	r1, #16
 801a21a:	0018      	movs	r0, r3
 801a21c:	f000 fb16 	bl	801a84c <itsdk_encrypt_cifferKey>
		}
		if ( itsdk_secstore_writeBlock(type, b) == SS_SUCCESS ) {
 801a220:	687a      	ldr	r2, [r7, #4]
 801a222:	230a      	movs	r3, #10
 801a224:	18fb      	adds	r3, r7, r3
 801a226:	781b      	ldrb	r3, [r3, #0]
 801a228:	0011      	movs	r1, r2
 801a22a:	0018      	movs	r0, r3
 801a22c:	f7ff fdc9 	bl	8019dc2 <itsdk_secstore_writeBlock>
 801a230:	1e03      	subs	r3, r0, #0
 801a232:	d105      	bne.n	801a240 <__updateField+0x68>
			_itsdk_console_printf("OK\r\n");
 801a234:	4b0a      	ldr	r3, [pc, #40]	; (801a260 <__updateField+0x88>)
 801a236:	0018      	movs	r0, r3
 801a238:	f7fe fc2e 	bl	8018a98 <_itsdk_console_printf>
			return ITSDK_CONSOLE_SUCCES;
 801a23c:	2300      	movs	r3, #0
 801a23e:	e00a      	b.n	801a256 <__updateField+0x7e>
		} else {
			_itsdk_console_printf("KO\r\n");
 801a240:	4b08      	ldr	r3, [pc, #32]	; (801a264 <__updateField+0x8c>)
 801a242:	0018      	movs	r0, r3
 801a244:	f7fe fc28 	bl	8018a98 <_itsdk_console_printf>
			return ITSDK_CONSOLE_FAILED;
 801a248:	2302      	movs	r3, #2
 801a24a:	e004      	b.n	801a256 <__updateField+0x7e>
		}
	} else {
		_itsdk_console_printf("KO\r\n");
 801a24c:	4b05      	ldr	r3, [pc, #20]	; (801a264 <__updateField+0x8c>)
 801a24e:	0018      	movs	r0, r3
 801a250:	f7fe fc22 	bl	8018a98 <_itsdk_console_printf>
		return ITSDK_CONSOLE_FAILED;
 801a254:	2302      	movs	r3, #2
	}
}
 801a256:	0018      	movs	r0, r3
 801a258:	46bd      	mov	sp, r7
 801a25a:	b005      	add	sp, #20
 801a25c:	bd90      	pop	{r4, r7, pc}
 801a25e:	46c0      	nop			; (mov r8, r8)
 801a260:	08020f68 	.word	0x08020f68
 801a264:	08020f60 	.word	0x08020f60

0801a268 <__updateField2>:

static itsdk_console_return_e __updateField2(char * buffer, uint8_t sz, uint8_t *b, itsdk_secStoreBlocks_e type, uint8_t offset,uint8_t size) {
 801a268:	b590      	push	{r4, r7, lr}
 801a26a:	b08d      	sub	sp, #52	; 0x34
 801a26c:	af02      	add	r7, sp, #8
 801a26e:	60f8      	str	r0, [r7, #12]
 801a270:	0008      	movs	r0, r1
 801a272:	607a      	str	r2, [r7, #4]
 801a274:	0019      	movs	r1, r3
 801a276:	240b      	movs	r4, #11
 801a278:	193b      	adds	r3, r7, r4
 801a27a:	1c02      	adds	r2, r0, #0
 801a27c:	701a      	strb	r2, [r3, #0]
 801a27e:	230a      	movs	r3, #10
 801a280:	18fb      	adds	r3, r7, r3
 801a282:	1c0a      	adds	r2, r1, #0
 801a284:	701a      	strb	r2, [r3, #0]
	if ( __checkAndConvert(buffer,5,sz,size,b) ) {
 801a286:	2334      	movs	r3, #52	; 0x34
 801a288:	2208      	movs	r2, #8
 801a28a:	4694      	mov	ip, r2
 801a28c:	44bc      	add	ip, r7
 801a28e:	4463      	add	r3, ip
 801a290:	7819      	ldrb	r1, [r3, #0]
 801a292:	193b      	adds	r3, r7, r4
 801a294:	781a      	ldrb	r2, [r3, #0]
 801a296:	68f8      	ldr	r0, [r7, #12]
 801a298:	687b      	ldr	r3, [r7, #4]
 801a29a:	9300      	str	r3, [sp, #0]
 801a29c:	000b      	movs	r3, r1
 801a29e:	2105      	movs	r1, #5
 801a2a0:	f7ff ff44 	bl	801a12c <__checkAndConvert>
 801a2a4:	1e03      	subs	r3, r0, #0
 801a2a6:	d045      	beq.n	801a334 <__updateField2+0xcc>
		uint8_t _b[ITSDK_SECSTORE_BLOCKSZ];
		if ( itsdk_secstore_readBlock(type, _b) != SS_SUCCESS ) {
 801a2a8:	2314      	movs	r3, #20
 801a2aa:	18fa      	adds	r2, r7, r3
 801a2ac:	230a      	movs	r3, #10
 801a2ae:	18fb      	adds	r3, r7, r3
 801a2b0:	781b      	ldrb	r3, [r3, #0]
 801a2b2:	0011      	movs	r1, r2
 801a2b4:	0018      	movs	r0, r3
 801a2b6:	f7ff fd37 	bl	8019d28 <itsdk_secstore_readBlock>
 801a2ba:	1e03      	subs	r3, r0, #0
 801a2bc:	d005      	beq.n	801a2ca <__updateField2+0x62>
			_itsdk_console_printf("KO\r\n");
 801a2be:	4b22      	ldr	r3, [pc, #136]	; (801a348 <__updateField2+0xe0>)
 801a2c0:	0018      	movs	r0, r3
 801a2c2:	f7fe fbe9 	bl	8018a98 <_itsdk_console_printf>
			return ITSDK_CONSOLE_FAILED;
 801a2c6:	2302      	movs	r3, #2
 801a2c8:	e039      	b.n	801a33e <__updateField2+0xd6>
		}
		for ( int i = 0 ; i < size ; i++) {
 801a2ca:	2300      	movs	r3, #0
 801a2cc:	627b      	str	r3, [r7, #36]	; 0x24
 801a2ce:	e011      	b.n	801a2f4 <__updateField2+0x8c>
			_b[i+offset] = b[i];
 801a2d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a2d2:	687a      	ldr	r2, [r7, #4]
 801a2d4:	18d2      	adds	r2, r2, r3
 801a2d6:	2330      	movs	r3, #48	; 0x30
 801a2d8:	2108      	movs	r1, #8
 801a2da:	468c      	mov	ip, r1
 801a2dc:	44bc      	add	ip, r7
 801a2de:	4463      	add	r3, ip
 801a2e0:	7819      	ldrb	r1, [r3, #0]
 801a2e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a2e4:	18cb      	adds	r3, r1, r3
 801a2e6:	7811      	ldrb	r1, [r2, #0]
 801a2e8:	2214      	movs	r2, #20
 801a2ea:	18ba      	adds	r2, r7, r2
 801a2ec:	54d1      	strb	r1, [r2, r3]
		for ( int i = 0 ; i < size ; i++) {
 801a2ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a2f0:	3301      	adds	r3, #1
 801a2f2:	627b      	str	r3, [r7, #36]	; 0x24
 801a2f4:	2334      	movs	r3, #52	; 0x34
 801a2f6:	2208      	movs	r2, #8
 801a2f8:	4694      	mov	ip, r2
 801a2fa:	44bc      	add	ip, r7
 801a2fc:	4463      	add	r3, ip
 801a2fe:	781b      	ldrb	r3, [r3, #0]
 801a300:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a302:	429a      	cmp	r2, r3
 801a304:	dbe4      	blt.n	801a2d0 <__updateField2+0x68>
		}
		if ( itsdk_secstore_writeBlock(type, _b) == SS_SUCCESS ) {
 801a306:	2314      	movs	r3, #20
 801a308:	18fa      	adds	r2, r7, r3
 801a30a:	230a      	movs	r3, #10
 801a30c:	18fb      	adds	r3, r7, r3
 801a30e:	781b      	ldrb	r3, [r3, #0]
 801a310:	0011      	movs	r1, r2
 801a312:	0018      	movs	r0, r3
 801a314:	f7ff fd55 	bl	8019dc2 <itsdk_secstore_writeBlock>
 801a318:	1e03      	subs	r3, r0, #0
 801a31a:	d105      	bne.n	801a328 <__updateField2+0xc0>
			_itsdk_console_printf("OK\r\n");
 801a31c:	4b0b      	ldr	r3, [pc, #44]	; (801a34c <__updateField2+0xe4>)
 801a31e:	0018      	movs	r0, r3
 801a320:	f7fe fbba 	bl	8018a98 <_itsdk_console_printf>
			return ITSDK_CONSOLE_SUCCES;
 801a324:	2300      	movs	r3, #0
 801a326:	e00a      	b.n	801a33e <__updateField2+0xd6>
		} else {
			_itsdk_console_printf("KO\r\n");
 801a328:	4b07      	ldr	r3, [pc, #28]	; (801a348 <__updateField2+0xe0>)
 801a32a:	0018      	movs	r0, r3
 801a32c:	f7fe fbb4 	bl	8018a98 <_itsdk_console_printf>
			return ITSDK_CONSOLE_FAILED;
 801a330:	2302      	movs	r3, #2
 801a332:	e004      	b.n	801a33e <__updateField2+0xd6>
		}
	} else {
		_itsdk_console_printf("KO\r\n");
 801a334:	4b04      	ldr	r3, [pc, #16]	; (801a348 <__updateField2+0xe0>)
 801a336:	0018      	movs	r0, r3
 801a338:	f7fe fbae 	bl	8018a98 <_itsdk_console_printf>
		return ITSDK_CONSOLE_FAILED;
 801a33c:	2302      	movs	r3, #2
	}
}
 801a33e:	0018      	movs	r0, r3
 801a340:	46bd      	mov	sp, r7
 801a342:	b00b      	add	sp, #44	; 0x2c
 801a344:	bd90      	pop	{r4, r7, pc}
 801a346:	46c0      	nop			; (mov r8, r8)
 801a348:	08020f60 	.word	0x08020f60
 801a34c:	08020f68 	.word	0x08020f68

0801a350 <_itsdk_secStore_consolePriv>:

/**
 * Extends the console function
 */
static itsdk_console_return_e _itsdk_secStore_consolePriv(char * buffer, uint8_t sz) {
 801a350:	b5b0      	push	{r4, r5, r7, lr}
 801a352:	b090      	sub	sp, #64	; 0x40
 801a354:	af02      	add	r7, sp, #8
 801a356:	6078      	str	r0, [r7, #4]
 801a358:	000a      	movs	r2, r1
 801a35a:	1cfb      	adds	r3, r7, #3
 801a35c:	701a      	strb	r2, [r3, #0]
	if ( sz == 1 ) {
 801a35e:	1cfb      	adds	r3, r7, #3
 801a360:	781b      	ldrb	r3, [r3, #0]
 801a362:	2b01      	cmp	r3, #1
 801a364:	d136      	bne.n	801a3d4 <_itsdk_secStore_consolePriv+0x84>
		switch(buffer[0]){
 801a366:	687b      	ldr	r3, [r7, #4]
 801a368:	781b      	ldrb	r3, [r3, #0]
 801a36a:	2b3f      	cmp	r3, #63	; 0x3f
 801a36c:	d000      	beq.n	801a370 <_itsdk_secStore_consolePriv+0x20>
			_itsdk_console_printf("SS:P:xxxx  : User change key 7 (16B hex)\r\n");
		  #endif
		  return ITSDK_CONSOLE_SUCCES;
		  break;
		default:
			break;
 801a36e:	e1cb      	b.n	801a708 <_itsdk_secStore_consolePriv+0x3b8>
			_itsdk_console_printf("--- SecureStore\r\n");
 801a370:	4bd3      	ldr	r3, [pc, #844]	; (801a6c0 <_itsdk_secStore_consolePriv+0x370>)
 801a372:	0018      	movs	r0, r3
 801a374:	f7fe fb90 	bl	8018a98 <_itsdk_console_printf>
			_itsdk_console_printf("ss:R       : restore all SS to factory default\r\n");
 801a378:	4bd2      	ldr	r3, [pc, #840]	; (801a6c4 <_itsdk_secStore_consolePriv+0x374>)
 801a37a:	0018      	movs	r0, r3
 801a37c:	f7fe fb8c 	bl	8018a98 <_itsdk_console_printf>
			_itsdk_console_printf("SS:0:xxxx  : change the secure store dyn Key (12B)\r\n");
 801a380:	4bd1      	ldr	r3, [pc, #836]	; (801a6c8 <_itsdk_secStore_consolePriv+0x378>)
 801a382:	0018      	movs	r0, r3
 801a384:	f7fe fb88 	bl	8018a98 <_itsdk_console_printf>
			_itsdk_console_printf("SS:1:xxxx  : change the console password (max 15 char)\r\n");
 801a388:	4bd0      	ldr	r3, [pc, #832]	; (801a6cc <_itsdk_secStore_consolePriv+0x37c>)
 801a38a:	0018      	movs	r0, r3
 801a38c:	f7fe fb84 	bl	8018a98 <_itsdk_console_printf>
			_itsdk_console_printf("ss:Z       : LoRa restore factory setting\r\n");
 801a390:	4bcf      	ldr	r3, [pc, #828]	; (801a6d0 <_itsdk_secStore_consolePriv+0x380>)
 801a392:	0018      	movs	r0, r3
 801a394:	f7fe fb80 	bl	8018a98 <_itsdk_console_printf>
			_itsdk_console_printf("ss:9       : LoRa OTAA print DevEUI (8B hex)\r\n");
 801a398:	4bce      	ldr	r3, [pc, #824]	; (801a6d4 <_itsdk_secStore_consolePriv+0x384>)
 801a39a:	0018      	movs	r0, r3
 801a39c:	f7fe fb7c 	bl	8018a98 <_itsdk_console_printf>
			_itsdk_console_printf("SS:9:xxxx  : LoRa OTAA change DevEUI (8B hex)\r\n");
 801a3a0:	4bcd      	ldr	r3, [pc, #820]	; (801a6d8 <_itsdk_secStore_consolePriv+0x388>)
 801a3a2:	0018      	movs	r0, r3
 801a3a4:	f7fe fb78 	bl	8018a98 <_itsdk_console_printf>
			_itsdk_console_printf("ss:A       : LoRa OTAA print AppEUI (8B hex)\r\n");
 801a3a8:	4bcc      	ldr	r3, [pc, #816]	; (801a6dc <_itsdk_secStore_consolePriv+0x38c>)
 801a3aa:	0018      	movs	r0, r3
 801a3ac:	f7fe fb74 	bl	8018a98 <_itsdk_console_printf>
			_itsdk_console_printf("SS:A:xxxx  : LoRa OTAA change AppEUI (8B hex)\r\n");
 801a3b0:	4bcb      	ldr	r3, [pc, #812]	; (801a6e0 <_itsdk_secStore_consolePriv+0x390>)
 801a3b2:	0018      	movs	r0, r3
 801a3b4:	f7fe fb70 	bl	8018a98 <_itsdk_console_printf>
			_itsdk_console_printf("SS:B:xxxx  : LoRa OTAA change AppKey (16B hex)\r\n");
 801a3b8:	4bca      	ldr	r3, [pc, #808]	; (801a6e4 <_itsdk_secStore_consolePriv+0x394>)
 801a3ba:	0018      	movs	r0, r3
 801a3bc:	f7fe fb6c 	bl	8018a98 <_itsdk_console_printf>
			_itsdk_console_printf("SS:C:xxxx  : LoRa OTAA change NwkKey (16B hex)\r\n");
 801a3c0:	4bc9      	ldr	r3, [pc, #804]	; (801a6e8 <_itsdk_secStore_consolePriv+0x398>)
 801a3c2:	0018      	movs	r0, r3
 801a3c4:	f7fe fb68 	bl	8018a98 <_itsdk_console_printf>
			_itsdk_console_printf("SS:D:xxxx  : LoRa OTAA change Nwk+App (16B hex)\r\n");
 801a3c8:	4bc8      	ldr	r3, [pc, #800]	; (801a6ec <_itsdk_secStore_consolePriv+0x39c>)
 801a3ca:	0018      	movs	r0, r3
 801a3cc:	f7fe fb64 	bl	8018a98 <_itsdk_console_printf>
		  return ITSDK_CONSOLE_SUCCES;
 801a3d0:	2300      	movs	r3, #0
 801a3d2:	e19a      	b.n	801a70a <_itsdk_secStore_consolePriv+0x3ba>
		}
	} else if ( sz >= 4 ) {
 801a3d4:	1cfb      	adds	r3, r7, #3
 801a3d6:	781b      	ldrb	r3, [r3, #0]
 801a3d8:	2b03      	cmp	r3, #3
 801a3da:	d800      	bhi.n	801a3de <_itsdk_secStore_consolePriv+0x8e>
 801a3dc:	e194      	b.n	801a708 <_itsdk_secStore_consolePriv+0x3b8>
		uint8_t b[ITSDK_SECSTORE_BLOCKSZ];
		// READ CASE
		if ( buffer[0] == 's' && buffer[1] == 's' && buffer[2] == ':' ) {
 801a3de:	687b      	ldr	r3, [r7, #4]
 801a3e0:	781b      	ldrb	r3, [r3, #0]
 801a3e2:	2b73      	cmp	r3, #115	; 0x73
 801a3e4:	d000      	beq.n	801a3e8 <_itsdk_secStore_consolePriv+0x98>
 801a3e6:	e096      	b.n	801a516 <_itsdk_secStore_consolePriv+0x1c6>
 801a3e8:	687b      	ldr	r3, [r7, #4]
 801a3ea:	3301      	adds	r3, #1
 801a3ec:	781b      	ldrb	r3, [r3, #0]
 801a3ee:	2b73      	cmp	r3, #115	; 0x73
 801a3f0:	d000      	beq.n	801a3f4 <_itsdk_secStore_consolePriv+0xa4>
 801a3f2:	e090      	b.n	801a516 <_itsdk_secStore_consolePriv+0x1c6>
 801a3f4:	687b      	ldr	r3, [r7, #4]
 801a3f6:	3302      	adds	r3, #2
 801a3f8:	781b      	ldrb	r3, [r3, #0]
 801a3fa:	2b3a      	cmp	r3, #58	; 0x3a
 801a3fc:	d000      	beq.n	801a400 <_itsdk_secStore_consolePriv+0xb0>
 801a3fe:	e08a      	b.n	801a516 <_itsdk_secStore_consolePriv+0x1c6>
			switch(buffer[3]) {
 801a400:	687b      	ldr	r3, [r7, #4]
 801a402:	3303      	adds	r3, #3
 801a404:	781b      	ldrb	r3, [r3, #0]
 801a406:	3b39      	subs	r3, #57	; 0x39
 801a408:	2b28      	cmp	r3, #40	; 0x28
 801a40a:	d900      	bls.n	801a40e <_itsdk_secStore_consolePriv+0xbe>
 801a40c:	e085      	b.n	801a51a <_itsdk_secStore_consolePriv+0x1ca>
 801a40e:	009a      	lsls	r2, r3, #2
 801a410:	4bb7      	ldr	r3, [pc, #732]	; (801a6f0 <_itsdk_secStore_consolePriv+0x3a0>)
 801a412:	18d3      	adds	r3, r2, r3
 801a414:	681b      	ldr	r3, [r3, #0]
 801a416:	469f      	mov	pc, r3
			case 'R':
				// all config factory default
				{
					uint8_t ret = 0;
 801a418:	2337      	movs	r3, #55	; 0x37
 801a41a:	18fb      	adds	r3, r7, r3
 801a41c:	2200      	movs	r2, #0
 801a41e:	701a      	strb	r2, [r3, #0]
					#endif
					#if ( defined(ITSDK_SIGFOX_ENCRYPTION) && ( ITSDK_SIGFOX_ENCRYPTION > 0 )) || (defined(ITSDK_LORAWAN_ENCRYPTION) && ( ITSDK_LORAWAN_ENCRYPTION > 0))
					  if ( itsdk_encrypt_resetFactoryDefaults(BOOL_TRUE) != ENCRYPT_RETURN_SUCESS ) ret =1;
					#endif
					#if defined(ITSDK_WITH_LORAWAN_LIB) && ITSDK_WITH_LORAWAN_LIB == __ENABLE
					  if ( itsdk_lorawan_resetFactoryDefaults(true) != LORAWAN_RETURN_SUCESS ) ret=1;
 801a420:	2001      	movs	r0, #1
 801a422:	f002 f969 	bl	801c6f8 <itsdk_lorawan_resetFactoryDefaults>
 801a426:	1e03      	subs	r3, r0, #0
 801a428:	d003      	beq.n	801a432 <_itsdk_secStore_consolePriv+0xe2>
 801a42a:	2337      	movs	r3, #55	; 0x37
 801a42c:	18fb      	adds	r3, r7, r3
 801a42e:	2201      	movs	r2, #1
 801a430:	701a      	strb	r2, [r3, #0]
					#endif
					if ( ret == 0 ) {
 801a432:	2337      	movs	r3, #55	; 0x37
 801a434:	18fb      	adds	r3, r7, r3
 801a436:	781b      	ldrb	r3, [r3, #0]
 801a438:	2b00      	cmp	r3, #0
 801a43a:	d105      	bne.n	801a448 <_itsdk_secStore_consolePriv+0xf8>
					  _itsdk_console_printf("OK\r\n");
 801a43c:	4bad      	ldr	r3, [pc, #692]	; (801a6f4 <_itsdk_secStore_consolePriv+0x3a4>)
 801a43e:	0018      	movs	r0, r3
 801a440:	f7fe fb2a 	bl	8018a98 <_itsdk_console_printf>
					  return ITSDK_CONSOLE_SUCCES;
 801a444:	2300      	movs	r3, #0
 801a446:	e160      	b.n	801a70a <_itsdk_secStore_consolePriv+0x3ba>
				    } else {
					  _itsdk_console_printf("KO\r\n");
 801a448:	4bab      	ldr	r3, [pc, #684]	; (801a6f8 <_itsdk_secStore_consolePriv+0x3a8>)
 801a44a:	0018      	movs	r0, r3
 801a44c:	f7fe fb24 	bl	8018a98 <_itsdk_console_printf>
					  return ITSDK_CONSOLE_FAILED;
 801a450:	2302      	movs	r3, #2
 801a452:	e15a      	b.n	801a70a <_itsdk_secStore_consolePriv+0x3ba>
				  }
				break;
			 #endif
			 #if defined(ITSDK_WITH_LORAWAN_LIB) && ITSDK_WITH_LORAWAN_LIB == __ENABLE
			  case 'Z':
				  if ( itsdk_lorawan_resetFactoryDefaults(true) == LORAWAN_RETURN_SUCESS ) {
 801a454:	2001      	movs	r0, #1
 801a456:	f002 f94f 	bl	801c6f8 <itsdk_lorawan_resetFactoryDefaults>
 801a45a:	1e03      	subs	r3, r0, #0
 801a45c:	d105      	bne.n	801a46a <_itsdk_secStore_consolePriv+0x11a>
					  _itsdk_console_printf("OK\r\n");
 801a45e:	4ba5      	ldr	r3, [pc, #660]	; (801a6f4 <_itsdk_secStore_consolePriv+0x3a4>)
 801a460:	0018      	movs	r0, r3
 801a462:	f7fe fb19 	bl	8018a98 <_itsdk_console_printf>
					  return ITSDK_CONSOLE_SUCCES;
 801a466:	2300      	movs	r3, #0
 801a468:	e14f      	b.n	801a70a <_itsdk_secStore_consolePriv+0x3ba>
				  } else {
					  _itsdk_console_printf("KO\r\n");
 801a46a:	4ba3      	ldr	r3, [pc, #652]	; (801a6f8 <_itsdk_secStore_consolePriv+0x3a8>)
 801a46c:	0018      	movs	r0, r3
 801a46e:	f7fe fb13 	bl	8018a98 <_itsdk_console_printf>
					  return ITSDK_CONSOLE_FAILED;
 801a472:	2302      	movs	r3, #2
 801a474:	e149      	b.n	801a70a <_itsdk_secStore_consolePriv+0x3ba>
				  }
              #endif
              #if (ITSDK_LORAWAN_ACTTYPE == __LORAWAN_ACTIVATION_STATIC && ITSDK_LORAWAN_ACTIVATION == __LORAWAN_OTAA )  || ITSDK_LORAWAN_ACTTYPE == __LORAWAN_ACTIVATION_DYNAMIC
			  case '9':
				  // ITSDK_SS_LORA_OTAA_DEVEUIAPPEUI
				  if ( itsdk_secstore_readBlock(ITSDK_SS_LORA_OTAA_DEVEUIAPPEUI, b) == SS_SUCCESS ) {
 801a476:	230c      	movs	r3, #12
 801a478:	18fb      	adds	r3, r7, r3
 801a47a:	0019      	movs	r1, r3
 801a47c:	2007      	movs	r0, #7
 801a47e:	f7ff fc53 	bl	8019d28 <itsdk_secstore_readBlock>
 801a482:	1e03      	subs	r3, r0, #0
 801a484:	d119      	bne.n	801a4ba <_itsdk_secStore_consolePriv+0x16a>
					  __console_print_hex(b,0,8);
 801a486:	2300      	movs	r3, #0
 801a488:	633b      	str	r3, [r7, #48]	; 0x30
 801a48a:	e00d      	b.n	801a4a8 <_itsdk_secStore_consolePriv+0x158>
 801a48c:	230c      	movs	r3, #12
 801a48e:	18fa      	adds	r2, r7, r3
 801a490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a492:	18d3      	adds	r3, r2, r3
 801a494:	781b      	ldrb	r3, [r3, #0]
 801a496:	001a      	movs	r2, r3
 801a498:	4b98      	ldr	r3, [pc, #608]	; (801a6fc <_itsdk_secStore_consolePriv+0x3ac>)
 801a49a:	0011      	movs	r1, r2
 801a49c:	0018      	movs	r0, r3
 801a49e:	f7fe fafb 	bl	8018a98 <_itsdk_console_printf>
 801a4a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a4a4:	3301      	adds	r3, #1
 801a4a6:	633b      	str	r3, [r7, #48]	; 0x30
 801a4a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a4aa:	2b07      	cmp	r3, #7
 801a4ac:	ddee      	ble.n	801a48c <_itsdk_secStore_consolePriv+0x13c>
 801a4ae:	4b94      	ldr	r3, [pc, #592]	; (801a700 <_itsdk_secStore_consolePriv+0x3b0>)
 801a4b0:	0018      	movs	r0, r3
 801a4b2:	f7fe faf1 	bl	8018a98 <_itsdk_console_printf>
					  return ITSDK_CONSOLE_SUCCES;
 801a4b6:	2300      	movs	r3, #0
 801a4b8:	e127      	b.n	801a70a <_itsdk_secStore_consolePriv+0x3ba>
				  } else {
					  _itsdk_console_printf("KO\r\n");
 801a4ba:	4b8f      	ldr	r3, [pc, #572]	; (801a6f8 <_itsdk_secStore_consolePriv+0x3a8>)
 801a4bc:	0018      	movs	r0, r3
 801a4be:	f7fe faeb 	bl	8018a98 <_itsdk_console_printf>
					  return ITSDK_CONSOLE_FAILED;
 801a4c2:	2302      	movs	r3, #2
 801a4c4:	e121      	b.n	801a70a <_itsdk_secStore_consolePriv+0x3ba>
				  }
			  case 'A':
			  case 'a':
				  // ITSDK_SS_LORA_OTAA_DEVEUIAPPEUI
				  if ( itsdk_secstore_readBlock(ITSDK_SS_LORA_OTAA_DEVEUIAPPEUI, b) == SS_SUCCESS ) {
 801a4c6:	230c      	movs	r3, #12
 801a4c8:	18fb      	adds	r3, r7, r3
 801a4ca:	0019      	movs	r1, r3
 801a4cc:	2007      	movs	r0, #7
 801a4ce:	f7ff fc2b 	bl	8019d28 <itsdk_secstore_readBlock>
 801a4d2:	1e03      	subs	r3, r0, #0
 801a4d4:	d119      	bne.n	801a50a <_itsdk_secStore_consolePriv+0x1ba>
					  __console_print_hex(b,8,8);
 801a4d6:	2308      	movs	r3, #8
 801a4d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a4da:	e00d      	b.n	801a4f8 <_itsdk_secStore_consolePriv+0x1a8>
 801a4dc:	230c      	movs	r3, #12
 801a4de:	18fa      	adds	r2, r7, r3
 801a4e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a4e2:	18d3      	adds	r3, r2, r3
 801a4e4:	781b      	ldrb	r3, [r3, #0]
 801a4e6:	001a      	movs	r2, r3
 801a4e8:	4b84      	ldr	r3, [pc, #528]	; (801a6fc <_itsdk_secStore_consolePriv+0x3ac>)
 801a4ea:	0011      	movs	r1, r2
 801a4ec:	0018      	movs	r0, r3
 801a4ee:	f7fe fad3 	bl	8018a98 <_itsdk_console_printf>
 801a4f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a4f4:	3301      	adds	r3, #1
 801a4f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a4f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a4fa:	2b0f      	cmp	r3, #15
 801a4fc:	ddee      	ble.n	801a4dc <_itsdk_secStore_consolePriv+0x18c>
 801a4fe:	4b80      	ldr	r3, [pc, #512]	; (801a700 <_itsdk_secStore_consolePriv+0x3b0>)
 801a500:	0018      	movs	r0, r3
 801a502:	f7fe fac9 	bl	8018a98 <_itsdk_console_printf>
					  return ITSDK_CONSOLE_SUCCES;
 801a506:	2300      	movs	r3, #0
 801a508:	e0ff      	b.n	801a70a <_itsdk_secStore_consolePriv+0x3ba>
				  } else {
					  _itsdk_console_printf("KO\r\n");
 801a50a:	4b7b      	ldr	r3, [pc, #492]	; (801a6f8 <_itsdk_secStore_consolePriv+0x3a8>)
 801a50c:	0018      	movs	r0, r3
 801a50e:	f7fe fac3 	bl	8018a98 <_itsdk_console_printf>
					  return ITSDK_CONSOLE_FAILED;
 801a512:	2302      	movs	r3, #2
 801a514:	e0f9      	b.n	801a70a <_itsdk_secStore_consolePriv+0x3ba>
				  return ITSDK_CONSOLE_SUCCES;
			  #endif
			  default:
				  break;
			}
		}
 801a516:	46c0      	nop			; (mov r8, r8)
 801a518:	e000      	b.n	801a51c <_itsdk_secStore_consolePriv+0x1cc>
				  break;
 801a51a:	46c0      	nop			; (mov r8, r8)
		// WRITE CASE
		if ( buffer[0] == 'S' && buffer[1] == 'S' && buffer[2] == ':' && buffer[4] == ':' ) {
 801a51c:	687b      	ldr	r3, [r7, #4]
 801a51e:	781b      	ldrb	r3, [r3, #0]
 801a520:	2b53      	cmp	r3, #83	; 0x53
 801a522:	d000      	beq.n	801a526 <_itsdk_secStore_consolePriv+0x1d6>
 801a524:	e0f0      	b.n	801a708 <_itsdk_secStore_consolePriv+0x3b8>
 801a526:	687b      	ldr	r3, [r7, #4]
 801a528:	3301      	adds	r3, #1
 801a52a:	781b      	ldrb	r3, [r3, #0]
 801a52c:	2b53      	cmp	r3, #83	; 0x53
 801a52e:	d000      	beq.n	801a532 <_itsdk_secStore_consolePriv+0x1e2>
 801a530:	e0ea      	b.n	801a708 <_itsdk_secStore_consolePriv+0x3b8>
 801a532:	687b      	ldr	r3, [r7, #4]
 801a534:	3302      	adds	r3, #2
 801a536:	781b      	ldrb	r3, [r3, #0]
 801a538:	2b3a      	cmp	r3, #58	; 0x3a
 801a53a:	d000      	beq.n	801a53e <_itsdk_secStore_consolePriv+0x1ee>
 801a53c:	e0e4      	b.n	801a708 <_itsdk_secStore_consolePriv+0x3b8>
 801a53e:	687b      	ldr	r3, [r7, #4]
 801a540:	3304      	adds	r3, #4
 801a542:	781b      	ldrb	r3, [r3, #0]
 801a544:	2b3a      	cmp	r3, #58	; 0x3a
 801a546:	d000      	beq.n	801a54a <_itsdk_secStore_consolePriv+0x1fa>
 801a548:	e0de      	b.n	801a708 <_itsdk_secStore_consolePriv+0x3b8>
			int ssz = sz-5;
 801a54a:	1cfb      	adds	r3, r7, #3
 801a54c:	781b      	ldrb	r3, [r3, #0]
 801a54e:	3b05      	subs	r3, #5
 801a550:	61fb      	str	r3, [r7, #28]
			switch(buffer[3]) {
 801a552:	687b      	ldr	r3, [r7, #4]
 801a554:	3303      	adds	r3, #3
 801a556:	781b      	ldrb	r3, [r3, #0]
 801a558:	3b30      	subs	r3, #48	; 0x30
 801a55a:	2b34      	cmp	r3, #52	; 0x34
 801a55c:	d900      	bls.n	801a560 <_itsdk_secStore_consolePriv+0x210>
 801a55e:	e0d3      	b.n	801a708 <_itsdk_secStore_consolePriv+0x3b8>
 801a560:	009a      	lsls	r2, r3, #2
 801a562:	4b68      	ldr	r3, [pc, #416]	; (801a704 <_itsdk_secStore_consolePriv+0x3b4>)
 801a564:	18d3      	adds	r3, r2, r3
 801a566:	681b      	ldr	r3, [r3, #0]
 801a568:	469f      	mov	pc, r3
			case '0':
				// DYNKEY
				if ( __checkAndConvert(buffer,5,sz,12,b) ) {
 801a56a:	1cfb      	adds	r3, r7, #3
 801a56c:	781a      	ldrb	r2, [r3, #0]
 801a56e:	6878      	ldr	r0, [r7, #4]
 801a570:	230c      	movs	r3, #12
 801a572:	18fb      	adds	r3, r7, r3
 801a574:	9300      	str	r3, [sp, #0]
 801a576:	230c      	movs	r3, #12
 801a578:	2105      	movs	r1, #5
 801a57a:	f7ff fdd7 	bl	801a12c <__checkAndConvert>
 801a57e:	1e03      	subs	r3, r0, #0
 801a580:	d006      	beq.n	801a590 <_itsdk_secStore_consolePriv+0x240>
					return _itsk_secstore_rekey(b);
 801a582:	230c      	movs	r3, #12
 801a584:	18fb      	adds	r3, r7, r3
 801a586:	0018      	movs	r0, r3
 801a588:	f7ff fd2a 	bl	8019fe0 <_itsk_secstore_rekey>
 801a58c:	0003      	movs	r3, r0
 801a58e:	e0bc      	b.n	801a70a <_itsdk_secStore_consolePriv+0x3ba>
				} else {
					_itsdk_console_printf("KO\r\n");
 801a590:	4b59      	ldr	r3, [pc, #356]	; (801a6f8 <_itsdk_secStore_consolePriv+0x3a8>)
 801a592:	0018      	movs	r0, r3
 801a594:	f7fe fa80 	bl	8018a98 <_itsdk_console_printf>
					return ITSDK_CONSOLE_FAILED;
 801a598:	2302      	movs	r3, #2
 801a59a:	e0b6      	b.n	801a70a <_itsdk_secStore_consolePriv+0x3ba>
				}
			case '1':
				// ITSDK_SS_CONSOLEKEY
				if ( ssz > 15 ) {
 801a59c:	69fb      	ldr	r3, [r7, #28]
 801a59e:	2b0f      	cmp	r3, #15
 801a5a0:	dd05      	ble.n	801a5ae <_itsdk_secStore_consolePriv+0x25e>
					  _itsdk_console_printf("KO\r\n");
 801a5a2:	4b55      	ldr	r3, [pc, #340]	; (801a6f8 <_itsdk_secStore_consolePriv+0x3a8>)
 801a5a4:	0018      	movs	r0, r3
 801a5a6:	f7fe fa77 	bl	8018a98 <_itsdk_console_printf>
					  return ITSDK_CONSOLE_FAILED;
 801a5aa:	2302      	movs	r3, #2
 801a5ac:	e0ad      	b.n	801a70a <_itsdk_secStore_consolePriv+0x3ba>
				}
				for ( int i = 0 ; i < ssz ; i++) {
 801a5ae:	2300      	movs	r3, #0
 801a5b0:	62bb      	str	r3, [r7, #40]	; 0x28
 801a5b2:	e00d      	b.n	801a5d0 <_itsdk_secStore_consolePriv+0x280>
					b[i] = buffer[i+5];
 801a5b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a5b6:	3305      	adds	r3, #5
 801a5b8:	687a      	ldr	r2, [r7, #4]
 801a5ba:	18d3      	adds	r3, r2, r3
 801a5bc:	7819      	ldrb	r1, [r3, #0]
 801a5be:	230c      	movs	r3, #12
 801a5c0:	18fa      	adds	r2, r7, r3
 801a5c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a5c4:	18d3      	adds	r3, r2, r3
 801a5c6:	1c0a      	adds	r2, r1, #0
 801a5c8:	701a      	strb	r2, [r3, #0]
				for ( int i = 0 ; i < ssz ; i++) {
 801a5ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a5cc:	3301      	adds	r3, #1
 801a5ce:	62bb      	str	r3, [r7, #40]	; 0x28
 801a5d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a5d2:	69fb      	ldr	r3, [r7, #28]
 801a5d4:	429a      	cmp	r2, r3
 801a5d6:	dbed      	blt.n	801a5b4 <_itsdk_secStore_consolePriv+0x264>
				}
				for ( int i = ssz ; i < ITSDK_SECSTORE_BLOCKSZ ; i++) {
 801a5d8:	69fb      	ldr	r3, [r7, #28]
 801a5da:	627b      	str	r3, [r7, #36]	; 0x24
 801a5dc:	e008      	b.n	801a5f0 <_itsdk_secStore_consolePriv+0x2a0>
					b[i] = 0;
 801a5de:	230c      	movs	r3, #12
 801a5e0:	18fa      	adds	r2, r7, r3
 801a5e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a5e4:	18d3      	adds	r3, r2, r3
 801a5e6:	2200      	movs	r2, #0
 801a5e8:	701a      	strb	r2, [r3, #0]
				for ( int i = ssz ; i < ITSDK_SECSTORE_BLOCKSZ ; i++) {
 801a5ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a5ec:	3301      	adds	r3, #1
 801a5ee:	627b      	str	r3, [r7, #36]	; 0x24
 801a5f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a5f2:	2b0f      	cmp	r3, #15
 801a5f4:	ddf3      	ble.n	801a5de <_itsdk_secStore_consolePriv+0x28e>
				}
				if ( itsdk_secstore_writeBlock(ITSDK_SS_CONSOLEKEY, b) == SS_SUCCESS ) {
 801a5f6:	230c      	movs	r3, #12
 801a5f8:	18fb      	adds	r3, r7, r3
 801a5fa:	0019      	movs	r1, r3
 801a5fc:	2000      	movs	r0, #0
 801a5fe:	f7ff fbe0 	bl	8019dc2 <itsdk_secstore_writeBlock>
 801a602:	1e03      	subs	r3, r0, #0
 801a604:	d105      	bne.n	801a612 <_itsdk_secStore_consolePriv+0x2c2>
					_itsdk_console_printf("OK\r\n");
 801a606:	4b3b      	ldr	r3, [pc, #236]	; (801a6f4 <_itsdk_secStore_consolePriv+0x3a4>)
 801a608:	0018      	movs	r0, r3
 801a60a:	f7fe fa45 	bl	8018a98 <_itsdk_console_printf>
					return ITSDK_CONSOLE_SUCCES;
 801a60e:	2300      	movs	r3, #0
 801a610:	e07b      	b.n	801a70a <_itsdk_secStore_consolePriv+0x3ba>
				} else {
					_itsdk_console_printf("KO\r\n");
 801a612:	4b39      	ldr	r3, [pc, #228]	; (801a6f8 <_itsdk_secStore_consolePriv+0x3a8>)
 801a614:	0018      	movs	r0, r3
 801a616:	f7fe fa3f 	bl	8018a98 <_itsdk_console_printf>
					return ITSDK_CONSOLE_FAILED;
 801a61a:	2302      	movs	r3, #2
 801a61c:	e075      	b.n	801a70a <_itsdk_secStore_consolePriv+0x3ba>
				return __updateField(buffer, sz, b, ITSDK_SS_LORA_ABP_APPSKEY);
		#endif
		#if (ITSDK_LORAWAN_ACTTYPE == __LORAWAN_ACTIVATION_STATIC && ITSDK_LORAWAN_ACTIVATION == __LORAWAN_OTAA )  || ITSDK_LORAWAN_ACTTYPE == __LORAWAN_ACTIVATION_DYNAMIC
			case '9':
				// ITSDK_SS_LORA_OTAA_DEVEUIAPPEUI
				return __updateField2(buffer,sz,b,ITSDK_SS_LORA_OTAA_DEVEUIAPPEUI,0,8);
 801a61e:	230c      	movs	r3, #12
 801a620:	18fa      	adds	r2, r7, r3
 801a622:	1cfb      	adds	r3, r7, #3
 801a624:	7819      	ldrb	r1, [r3, #0]
 801a626:	6878      	ldr	r0, [r7, #4]
 801a628:	2308      	movs	r3, #8
 801a62a:	9301      	str	r3, [sp, #4]
 801a62c:	2300      	movs	r3, #0
 801a62e:	9300      	str	r3, [sp, #0]
 801a630:	2307      	movs	r3, #7
 801a632:	f7ff fe19 	bl	801a268 <__updateField2>
 801a636:	0003      	movs	r3, r0
 801a638:	e067      	b.n	801a70a <_itsdk_secStore_consolePriv+0x3ba>
			case 'a':
			case 'A':
				// ITSDK_SS_LORA_OTAA_DEVEUIAPPEUI
				return __updateField2(buffer,sz,b,ITSDK_SS_LORA_OTAA_DEVEUIAPPEUI,8,8);
 801a63a:	230c      	movs	r3, #12
 801a63c:	18fa      	adds	r2, r7, r3
 801a63e:	1cfb      	adds	r3, r7, #3
 801a640:	7819      	ldrb	r1, [r3, #0]
 801a642:	6878      	ldr	r0, [r7, #4]
 801a644:	2308      	movs	r3, #8
 801a646:	9301      	str	r3, [sp, #4]
 801a648:	2308      	movs	r3, #8
 801a64a:	9300      	str	r3, [sp, #0]
 801a64c:	2307      	movs	r3, #7
 801a64e:	f7ff fe0b 	bl	801a268 <__updateField2>
 801a652:	0003      	movs	r3, r0
 801a654:	e059      	b.n	801a70a <_itsdk_secStore_consolePriv+0x3ba>
			case 'b':
			case 'B':
				// ITSDK_SS_LORA_OTAA_APPKEY
				return __updateField(buffer, sz, b, ITSDK_SS_LORA_OTAA_APPKEY);
 801a656:	230c      	movs	r3, #12
 801a658:	18fa      	adds	r2, r7, r3
 801a65a:	1cfb      	adds	r3, r7, #3
 801a65c:	7819      	ldrb	r1, [r3, #0]
 801a65e:	6878      	ldr	r0, [r7, #4]
 801a660:	2308      	movs	r3, #8
 801a662:	f7ff fdb9 	bl	801a1d8 <__updateField>
 801a666:	0003      	movs	r3, r0
 801a668:	e04f      	b.n	801a70a <_itsdk_secStore_consolePriv+0x3ba>
			case 'c':
			case 'C':
				// ITSDK_SS_LORA_OTAA_NWKKEY
				return __updateField(buffer, sz, b, ITSDK_SS_LORA_OTAA_NWKKEY);
 801a66a:	230c      	movs	r3, #12
 801a66c:	18fa      	adds	r2, r7, r3
 801a66e:	1cfb      	adds	r3, r7, #3
 801a670:	7819      	ldrb	r1, [r3, #0]
 801a672:	6878      	ldr	r0, [r7, #4]
 801a674:	2309      	movs	r3, #9
 801a676:	f7ff fdaf 	bl	801a1d8 <__updateField>
 801a67a:	0003      	movs	r3, r0
 801a67c:	e045      	b.n	801a70a <_itsdk_secStore_consolePriv+0x3ba>
			case 'd':
			case 'D': {
				// ITSDK_SS_LORA_OTAA_APPKEY + ITSDK_SS_LORA_OTAA_NWKKEY
				itsdk_console_return_e ret;
				if ( (ret = __updateField(buffer, sz, b, ITSDK_SS_LORA_OTAA_NWKKEY)) == ITSDK_CONSOLE_SUCCES ) {
 801a67e:	2523      	movs	r5, #35	; 0x23
 801a680:	197c      	adds	r4, r7, r5
 801a682:	230c      	movs	r3, #12
 801a684:	18fa      	adds	r2, r7, r3
 801a686:	1cfb      	adds	r3, r7, #3
 801a688:	7819      	ldrb	r1, [r3, #0]
 801a68a:	6878      	ldr	r0, [r7, #4]
 801a68c:	2309      	movs	r3, #9
 801a68e:	f7ff fda3 	bl	801a1d8 <__updateField>
 801a692:	0003      	movs	r3, r0
 801a694:	7023      	strb	r3, [r4, #0]
 801a696:	197b      	adds	r3, r7, r5
 801a698:	781b      	ldrb	r3, [r3, #0]
 801a69a:	2b00      	cmp	r3, #0
 801a69c:	d10b      	bne.n	801a6b6 <_itsdk_secStore_consolePriv+0x366>
					ret = __updateField(buffer, sz, b, ITSDK_SS_LORA_OTAA_APPKEY);
 801a69e:	2323      	movs	r3, #35	; 0x23
 801a6a0:	18fc      	adds	r4, r7, r3
 801a6a2:	230c      	movs	r3, #12
 801a6a4:	18fa      	adds	r2, r7, r3
 801a6a6:	1cfb      	adds	r3, r7, #3
 801a6a8:	7819      	ldrb	r1, [r3, #0]
 801a6aa:	6878      	ldr	r0, [r7, #4]
 801a6ac:	2308      	movs	r3, #8
 801a6ae:	f7ff fd93 	bl	801a1d8 <__updateField>
 801a6b2:	0003      	movs	r3, r0
 801a6b4:	7023      	strb	r3, [r4, #0]
				}
				return ret;
 801a6b6:	2323      	movs	r3, #35	; 0x23
 801a6b8:	18fb      	adds	r3, r7, r3
 801a6ba:	781b      	ldrb	r3, [r3, #0]
 801a6bc:	e025      	b.n	801a70a <_itsdk_secStore_consolePriv+0x3ba>
 801a6be:	46c0      	nop			; (mov r8, r8)
 801a6c0:	08020f70 	.word	0x08020f70
 801a6c4:	08020f84 	.word	0x08020f84
 801a6c8:	08020fb8 	.word	0x08020fb8
 801a6cc:	08020ff0 	.word	0x08020ff0
 801a6d0:	0802102c 	.word	0x0802102c
 801a6d4:	08021058 	.word	0x08021058
 801a6d8:	08021088 	.word	0x08021088
 801a6dc:	080210b8 	.word	0x080210b8
 801a6e0:	080210e8 	.word	0x080210e8
 801a6e4:	08021118 	.word	0x08021118
 801a6e8:	0802114c 	.word	0x0802114c
 801a6ec:	08021180 	.word	0x08021180
 801a6f0:	08021e9c 	.word	0x08021e9c
 801a6f4:	08020f68 	.word	0x08020f68
 801a6f8:	08020f60 	.word	0x08020f60
 801a6fc:	080211b4 	.word	0x080211b4
 801a700:	080211bc 	.word	0x080211bc
 801a704:	08021f40 	.word	0x08021f40
				return __updateField(buffer, sz, b, ITSDK_SS_USER7);
	#endif
			} // switch
		} // Write case end
  } //Sz > 4
  return ITSDK_CONSOLE_NOTFOUND;
 801a708:	2301      	movs	r3, #1
}
 801a70a:	0018      	movs	r0, r3
 801a70c:	46bd      	mov	sp, r7
 801a70e:	b00e      	add	sp, #56	; 0x38
 801a710:	bdb0      	pop	{r4, r5, r7, pc}
 801a712:	46c0      	nop			; (mov r8, r8)

0801a714 <itsdk_secStore_RegisterConsole>:
static itsdk_console_chain_t __console_secStore;

#endif // ITSDK_WITH_CONSOLE

itsdk_secStoreReturn_e itsdk_secStore_RegisterConsole() {
 801a714:	b580      	push	{r7, lr}
 801a716:	af00      	add	r7, sp, #0
#if ITSDK_WITH_CONSOLE == __ENABLE
	__console_secStore.console_private = _itsdk_secStore_consolePriv;
 801a718:	4b08      	ldr	r3, [pc, #32]	; (801a73c <itsdk_secStore_RegisterConsole+0x28>)
 801a71a:	4a09      	ldr	r2, [pc, #36]	; (801a740 <itsdk_secStore_RegisterConsole+0x2c>)
 801a71c:	601a      	str	r2, [r3, #0]
	__console_secStore.console_public = NULL;
 801a71e:	4b07      	ldr	r3, [pc, #28]	; (801a73c <itsdk_secStore_RegisterConsole+0x28>)
 801a720:	2200      	movs	r2, #0
 801a722:	605a      	str	r2, [r3, #4]
	__console_secStore.next = NULL;
 801a724:	4b05      	ldr	r3, [pc, #20]	; (801a73c <itsdk_secStore_RegisterConsole+0x28>)
 801a726:	2200      	movs	r2, #0
 801a728:	609a      	str	r2, [r3, #8]
	itsdk_console_registerCommand(&__console_secStore);
 801a72a:	4b04      	ldr	r3, [pc, #16]	; (801a73c <itsdk_secStore_RegisterConsole+0x28>)
 801a72c:	0018      	movs	r0, r3
 801a72e:	f7fe fb73 	bl	8018e18 <itsdk_console_registerCommand>
#endif
	return SS_SUCCESS;
 801a732:	2300      	movs	r3, #0
}
 801a734:	0018      	movs	r0, r3
 801a736:	46bd      	mov	sp, r7
 801a738:	bd80      	pop	{r7, pc}
 801a73a:	46c0      	nop			; (mov r8, r8)
 801a73c:	200011ec 	.word	0x200011ec
 801a740:	0801a351 	.word	0x0801a351

0801a744 <itsdk_aes_ecb_encrypt_128B>:
void itsdk_aes_ecb_encrypt_128B(
		uint8_t	* clearData,			// Data to be encrypted
		uint8_t * encryptedData,		// Can be the same as clearData
		uint8_t   dataLen,				// Size of data to be encrypted
		uint8_t * masterKey				// 128B key used for encryption (hidden with ITSDK_PROTECT_KEY)
) {
 801a744:	b5b0      	push	{r4, r5, r7, lr}
 801a746:	b0b8      	sub	sp, #224	; 0xe0
 801a748:	af00      	add	r7, sp, #0
 801a74a:	60f8      	str	r0, [r7, #12]
 801a74c:	60b9      	str	r1, [r7, #8]
 801a74e:	603b      	str	r3, [r7, #0]
 801a750:	1dfb      	adds	r3, r7, #7
 801a752:	701a      	strb	r2, [r3, #0]
	uint8_t aesResult[16];
	itsdk_encrypt_unCifferKey(masterKey,16);
 801a754:	683b      	ldr	r3, [r7, #0]
 801a756:	2110      	movs	r1, #16
 801a758:	0018      	movs	r0, r3
 801a75a:	f000 f8cd 	bl	801a8f8 <itsdk_encrypt_unCifferKey>
	struct AES_ctx ctx;
	memcpy(aesResult,clearData,16);
 801a75e:	24d0      	movs	r4, #208	; 0xd0
 801a760:	193a      	adds	r2, r7, r4
 801a762:	68fb      	ldr	r3, [r7, #12]
 801a764:	0010      	movs	r0, r2
 801a766:	0019      	movs	r1, r3
 801a768:	2310      	movs	r3, #16
 801a76a:	001a      	movs	r2, r3
 801a76c:	f004 fccc 	bl	801f108 <memcpy>
	bzero(ctx.Iv,16);
 801a770:	2510      	movs	r5, #16
 801a772:	197b      	adds	r3, r7, r5
 801a774:	33b0      	adds	r3, #176	; 0xb0
 801a776:	2110      	movs	r1, #16
 801a778:	0018      	movs	r0, r3
 801a77a:	f004 fc95 	bl	801f0a8 <bzero>
	tiny_AES_init_ctx(&ctx,masterKey);
 801a77e:	683a      	ldr	r2, [r7, #0]
 801a780:	197b      	adds	r3, r7, r5
 801a782:	0011      	movs	r1, r2
 801a784:	0018      	movs	r0, r3
 801a786:	f000 f9c5 	bl	801ab14 <tiny_AES_init_ctx>
	tiny_AES_CBC_encrypt_buffer(&ctx, aesResult, 16);
 801a78a:	1939      	adds	r1, r7, r4
 801a78c:	197b      	adds	r3, r7, r5
 801a78e:	2210      	movs	r2, #16
 801a790:	0018      	movs	r0, r3
 801a792:	f001 f8d8 	bl	801b946 <tiny_AES_CBC_encrypt_buffer>
	itsdk_encrypt_cifferKey(masterKey,16);
 801a796:	683b      	ldr	r3, [r7, #0]
 801a798:	2110      	movs	r1, #16
 801a79a:	0018      	movs	r0, r3
 801a79c:	f000 f856 	bl	801a84c <itsdk_encrypt_cifferKey>
	memcpy(encryptedData,aesResult,16);
 801a7a0:	68ba      	ldr	r2, [r7, #8]
 801a7a2:	193b      	adds	r3, r7, r4
 801a7a4:	0010      	movs	r0, r2
 801a7a6:	0019      	movs	r1, r3
 801a7a8:	2310      	movs	r3, #16
 801a7aa:	001a      	movs	r2, r3
 801a7ac:	f004 fcac 	bl	801f108 <memcpy>
	bzero(aesResult,16);
 801a7b0:	193b      	adds	r3, r7, r4
 801a7b2:	2110      	movs	r1, #16
 801a7b4:	0018      	movs	r0, r3
 801a7b6:	f004 fc77 	bl	801f0a8 <bzero>
	bzero(&ctx,sizeof(struct AES_ctx));
 801a7ba:	197b      	adds	r3, r7, r5
 801a7bc:	21c0      	movs	r1, #192	; 0xc0
 801a7be:	0018      	movs	r0, r3
 801a7c0:	f004 fc72 	bl	801f0a8 <bzero>
}
 801a7c4:	46c0      	nop			; (mov r8, r8)
 801a7c6:	46bd      	mov	sp, r7
 801a7c8:	b038      	add	sp, #224	; 0xe0
 801a7ca:	bdb0      	pop	{r4, r5, r7, pc}

0801a7cc <itsdk_aes_ecb_decrypt_128B>:
void itsdk_aes_ecb_decrypt_128B(
		uint8_t	* clearData,			// Data to be encrypted
		uint8_t * encryptedData,		// Can be the same as clearData
		uint8_t   dataLen,				// Size of data to be encrypted
		uint8_t * masterKey				// 128B key used for encryption (hidden with ITSDK_PROTECT_KEY)
) {
 801a7cc:	b5b0      	push	{r4, r5, r7, lr}
 801a7ce:	b0b8      	sub	sp, #224	; 0xe0
 801a7d0:	af00      	add	r7, sp, #0
 801a7d2:	60f8      	str	r0, [r7, #12]
 801a7d4:	60b9      	str	r1, [r7, #8]
 801a7d6:	603b      	str	r3, [r7, #0]
 801a7d8:	1dfb      	adds	r3, r7, #7
 801a7da:	701a      	strb	r2, [r3, #0]
	uint8_t aesResult[16];
	itsdk_encrypt_unCifferKey(masterKey,16);
 801a7dc:	683b      	ldr	r3, [r7, #0]
 801a7de:	2110      	movs	r1, #16
 801a7e0:	0018      	movs	r0, r3
 801a7e2:	f000 f889 	bl	801a8f8 <itsdk_encrypt_unCifferKey>
	struct AES_ctx ctx;
	memcpy(aesResult,clearData,16);
 801a7e6:	24d0      	movs	r4, #208	; 0xd0
 801a7e8:	193a      	adds	r2, r7, r4
 801a7ea:	68fb      	ldr	r3, [r7, #12]
 801a7ec:	0010      	movs	r0, r2
 801a7ee:	0019      	movs	r1, r3
 801a7f0:	2310      	movs	r3, #16
 801a7f2:	001a      	movs	r2, r3
 801a7f4:	f004 fc88 	bl	801f108 <memcpy>
	bzero(ctx.Iv,16);
 801a7f8:	2510      	movs	r5, #16
 801a7fa:	197b      	adds	r3, r7, r5
 801a7fc:	33b0      	adds	r3, #176	; 0xb0
 801a7fe:	2110      	movs	r1, #16
 801a800:	0018      	movs	r0, r3
 801a802:	f004 fc51 	bl	801f0a8 <bzero>
	tiny_AES_init_ctx(&ctx,masterKey);
 801a806:	683a      	ldr	r2, [r7, #0]
 801a808:	197b      	adds	r3, r7, r5
 801a80a:	0011      	movs	r1, r2
 801a80c:	0018      	movs	r0, r3
 801a80e:	f000 f981 	bl	801ab14 <tiny_AES_init_ctx>
	tiny_AES_CBC_decrypt_buffer(&ctx, aesResult, 16);
 801a812:	1939      	adds	r1, r7, r4
 801a814:	197b      	adds	r3, r7, r5
 801a816:	2210      	movs	r2, #16
 801a818:	0018      	movs	r0, r3
 801a81a:	f001 f8c3 	bl	801b9a4 <tiny_AES_CBC_decrypt_buffer>
	itsdk_encrypt_cifferKey(masterKey,16);
 801a81e:	683b      	ldr	r3, [r7, #0]
 801a820:	2110      	movs	r1, #16
 801a822:	0018      	movs	r0, r3
 801a824:	f000 f812 	bl	801a84c <itsdk_encrypt_cifferKey>
	memcpy(encryptedData,aesResult,16);
 801a828:	68ba      	ldr	r2, [r7, #8]
 801a82a:	193b      	adds	r3, r7, r4
 801a82c:	0010      	movs	r0, r2
 801a82e:	0019      	movs	r1, r3
 801a830:	2310      	movs	r3, #16
 801a832:	001a      	movs	r2, r3
 801a834:	f004 fc68 	bl	801f108 <memcpy>
	bzero(aesResult,16);
 801a838:	193b      	adds	r3, r7, r4
 801a83a:	2110      	movs	r1, #16
 801a83c:	0018      	movs	r0, r3
 801a83e:	f004 fc33 	bl	801f0a8 <bzero>
}
 801a842:	46c0      	nop			; (mov r8, r8)
 801a844:	46bd      	mov	sp, r7
 801a846:	b038      	add	sp, #224	; 0xe0
 801a848:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801a84c <itsdk_encrypt_cifferKey>:
/**
 * Protect inMemory key with a simple XOR with a hardcoded
 * 32b value. Not good at all but always better than clear
 * text key in memory.
 */
void itsdk_encrypt_cifferKey(uint8_t * key, int len) {
 801a84c:	b580      	push	{r7, lr}
 801a84e:	b084      	sub	sp, #16
 801a850:	af00      	add	r7, sp, #0
 801a852:	6078      	str	r0, [r7, #4]
 801a854:	6039      	str	r1, [r7, #0]

	if ( (len & 3 ) > 0 ) {
 801a856:	683b      	ldr	r3, [r7, #0]
 801a858:	2203      	movs	r2, #3
 801a85a:	4013      	ands	r3, r2
 801a85c:	2b00      	cmp	r3, #0
 801a85e:	dd06      	ble.n	801a86e <itsdk_encrypt_cifferKey+0x22>
		ITSDK_ERROR_REPORT(ITSDK_ERROR_ENCRYP_INVALID_DATALEN,(uint16_t)len);
 801a860:	683b      	ldr	r3, [r7, #0]
 801a862:	b29b      	uxth	r3, r3
 801a864:	4a23      	ldr	r2, [pc, #140]	; (801a8f4 <itsdk_encrypt_cifferKey+0xa8>)
 801a866:	0019      	movs	r1, r3
 801a868:	0010      	movs	r0, r2
 801a86a:	f001 f977 	bl	801bb5c <itsdk_error_report>
	}
	for ( int i = 0 ; i < len ; i+=4 ) {
 801a86e:	2300      	movs	r3, #0
 801a870:	60fb      	str	r3, [r7, #12]
 801a872:	e037      	b.n	801a8e4 <itsdk_encrypt_cifferKey+0x98>
		key[i]   ^= (ITSDK_PROTECT_KEY & 0xFF000000) >> 24;
 801a874:	68fb      	ldr	r3, [r7, #12]
 801a876:	687a      	ldr	r2, [r7, #4]
 801a878:	18d3      	adds	r3, r2, r3
 801a87a:	781a      	ldrb	r2, [r3, #0]
 801a87c:	68fb      	ldr	r3, [r7, #12]
 801a87e:	6879      	ldr	r1, [r7, #4]
 801a880:	18cb      	adds	r3, r1, r3
 801a882:	2159      	movs	r1, #89	; 0x59
 801a884:	4249      	negs	r1, r1
 801a886:	404a      	eors	r2, r1
 801a888:	b2d2      	uxtb	r2, r2
 801a88a:	701a      	strb	r2, [r3, #0]
		key[i+1] ^= (ITSDK_PROTECT_KEY & 0x00FF0000) >> 16;
 801a88c:	68fb      	ldr	r3, [r7, #12]
 801a88e:	3301      	adds	r3, #1
 801a890:	687a      	ldr	r2, [r7, #4]
 801a892:	18d3      	adds	r3, r2, r3
 801a894:	781a      	ldrb	r2, [r3, #0]
 801a896:	68fb      	ldr	r3, [r7, #12]
 801a898:	3301      	adds	r3, #1
 801a89a:	6879      	ldr	r1, [r7, #4]
 801a89c:	18cb      	adds	r3, r1, r3
 801a89e:	2145      	movs	r1, #69	; 0x45
 801a8a0:	404a      	eors	r2, r1
 801a8a2:	b2d2      	uxtb	r2, r2
 801a8a4:	701a      	strb	r2, [r3, #0]
		key[i+2] ^= (ITSDK_PROTECT_KEY & 0x0000FF00) >> 8;
 801a8a6:	68fb      	ldr	r3, [r7, #12]
 801a8a8:	3302      	adds	r3, #2
 801a8aa:	687a      	ldr	r2, [r7, #4]
 801a8ac:	18d3      	adds	r3, r2, r3
 801a8ae:	781a      	ldrb	r2, [r3, #0]
 801a8b0:	68fb      	ldr	r3, [r7, #12]
 801a8b2:	3302      	adds	r3, #2
 801a8b4:	6879      	ldr	r1, [r7, #4]
 801a8b6:	18cb      	adds	r3, r1, r3
 801a8b8:	2165      	movs	r1, #101	; 0x65
 801a8ba:	4249      	negs	r1, r1
 801a8bc:	404a      	eors	r2, r1
 801a8be:	b2d2      	uxtb	r2, r2
 801a8c0:	701a      	strb	r2, [r3, #0]
		key[i+3] ^= (ITSDK_PROTECT_KEY & 0x000000FF);
 801a8c2:	68fb      	ldr	r3, [r7, #12]
 801a8c4:	3303      	adds	r3, #3
 801a8c6:	687a      	ldr	r2, [r7, #4]
 801a8c8:	18d3      	adds	r3, r2, r3
 801a8ca:	781a      	ldrb	r2, [r3, #0]
 801a8cc:	68fb      	ldr	r3, [r7, #12]
 801a8ce:	3303      	adds	r3, #3
 801a8d0:	6879      	ldr	r1, [r7, #4]
 801a8d2:	18cb      	adds	r3, r1, r3
 801a8d4:	213d      	movs	r1, #61	; 0x3d
 801a8d6:	4249      	negs	r1, r1
 801a8d8:	404a      	eors	r2, r1
 801a8da:	b2d2      	uxtb	r2, r2
 801a8dc:	701a      	strb	r2, [r3, #0]
	for ( int i = 0 ; i < len ; i+=4 ) {
 801a8de:	68fb      	ldr	r3, [r7, #12]
 801a8e0:	3304      	adds	r3, #4
 801a8e2:	60fb      	str	r3, [r7, #12]
 801a8e4:	68fa      	ldr	r2, [r7, #12]
 801a8e6:	683b      	ldr	r3, [r7, #0]
 801a8e8:	429a      	cmp	r2, r3
 801a8ea:	dbc3      	blt.n	801a874 <itsdk_encrypt_cifferKey+0x28>
	}
}
 801a8ec:	46c0      	nop			; (mov r8, r8)
 801a8ee:	46bd      	mov	sp, r7
 801a8f0:	b004      	add	sp, #16
 801a8f2:	bd80      	pop	{r7, pc}
 801a8f4:	d0000020 	.word	0xd0000020

0801a8f8 <itsdk_encrypt_unCifferKey>:

/**
 * Un protect inMemory key.
 */
void itsdk_encrypt_unCifferKey(uint8_t * key, int len) {
 801a8f8:	b580      	push	{r7, lr}
 801a8fa:	b082      	sub	sp, #8
 801a8fc:	af00      	add	r7, sp, #0
 801a8fe:	6078      	str	r0, [r7, #4]
 801a900:	6039      	str	r1, [r7, #0]
	itsdk_encrypt_cifferKey(key,len);
 801a902:	683a      	ldr	r2, [r7, #0]
 801a904:	687b      	ldr	r3, [r7, #4]
 801a906:	0011      	movs	r1, r2
 801a908:	0018      	movs	r0, r3
 801a90a:	f7ff ff9f 	bl	801a84c <itsdk_encrypt_cifferKey>
}
 801a90e:	46c0      	nop			; (mov r8, r8)
 801a910:	46bd      	mov	sp, r7
 801a912:	b002      	add	sp, #8
 801a914:	bd80      	pop	{r7, pc}

0801a916 <itsdk_encrypt_resetFactoryDefaults>:
	}
	bzero(buffer,16);
	return ENCRYPT_RETURN_SUCESS;
}
#else
itsdk_encrypt_return_t itsdk_encrypt_resetFactoryDefaults(itsdk_bool_e force) {
 801a916:	b580      	push	{r7, lr}
 801a918:	b082      	sub	sp, #8
 801a91a:	af00      	add	r7, sp, #0
 801a91c:	0002      	movs	r2, r0
 801a91e:	1dfb      	adds	r3, r7, #7
 801a920:	701a      	strb	r2, [r3, #0]
	return ENCRYPT_RETURN_SUCESS;
 801a922:	2300      	movs	r3, #0
}
 801a924:	0018      	movs	r0, r3
 801a926:	46bd      	mov	sp, r7
 801a928:	b002      	add	sp, #8
 801a92a:	bd80      	pop	{r7, pc}

0801a92c <KeyExpansion>:
*/
#define getSBoxInvert(num) (rsbox[(num)])

// This function produces Nb(Nr+1) round keys. The round keys are used in each round to decrypt the states.
static void KeyExpansion(uint8_t* RoundKey, const uint8_t* Key)
{
 801a92c:	b590      	push	{r4, r7, lr}
 801a92e:	b089      	sub	sp, #36	; 0x24
 801a930:	af00      	add	r7, sp, #0
 801a932:	6078      	str	r0, [r7, #4]
 801a934:	6039      	str	r1, [r7, #0]
  unsigned i, j, k;
  uint8_t tempa[4]; // Used for the column/row operations

  // The first round key is the key itself.
  for (i = 0; i < Nk; ++i)
 801a936:	2300      	movs	r3, #0
 801a938:	61fb      	str	r3, [r7, #28]
 801a93a:	e030      	b.n	801a99e <KeyExpansion+0x72>
  {
    RoundKey[(i * 4) + 0] = Key[(i * 4) + 0];
 801a93c:	69fb      	ldr	r3, [r7, #28]
 801a93e:	009b      	lsls	r3, r3, #2
 801a940:	683a      	ldr	r2, [r7, #0]
 801a942:	18d2      	adds	r2, r2, r3
 801a944:	69fb      	ldr	r3, [r7, #28]
 801a946:	009b      	lsls	r3, r3, #2
 801a948:	6879      	ldr	r1, [r7, #4]
 801a94a:	18cb      	adds	r3, r1, r3
 801a94c:	7812      	ldrb	r2, [r2, #0]
 801a94e:	701a      	strb	r2, [r3, #0]
    RoundKey[(i * 4) + 1] = Key[(i * 4) + 1];
 801a950:	69fb      	ldr	r3, [r7, #28]
 801a952:	009b      	lsls	r3, r3, #2
 801a954:	3301      	adds	r3, #1
 801a956:	683a      	ldr	r2, [r7, #0]
 801a958:	18d2      	adds	r2, r2, r3
 801a95a:	69fb      	ldr	r3, [r7, #28]
 801a95c:	009b      	lsls	r3, r3, #2
 801a95e:	3301      	adds	r3, #1
 801a960:	6879      	ldr	r1, [r7, #4]
 801a962:	18cb      	adds	r3, r1, r3
 801a964:	7812      	ldrb	r2, [r2, #0]
 801a966:	701a      	strb	r2, [r3, #0]
    RoundKey[(i * 4) + 2] = Key[(i * 4) + 2];
 801a968:	69fb      	ldr	r3, [r7, #28]
 801a96a:	009b      	lsls	r3, r3, #2
 801a96c:	3302      	adds	r3, #2
 801a96e:	683a      	ldr	r2, [r7, #0]
 801a970:	18d2      	adds	r2, r2, r3
 801a972:	69fb      	ldr	r3, [r7, #28]
 801a974:	009b      	lsls	r3, r3, #2
 801a976:	3302      	adds	r3, #2
 801a978:	6879      	ldr	r1, [r7, #4]
 801a97a:	18cb      	adds	r3, r1, r3
 801a97c:	7812      	ldrb	r2, [r2, #0]
 801a97e:	701a      	strb	r2, [r3, #0]
    RoundKey[(i * 4) + 3] = Key[(i * 4) + 3];
 801a980:	69fb      	ldr	r3, [r7, #28]
 801a982:	009b      	lsls	r3, r3, #2
 801a984:	3303      	adds	r3, #3
 801a986:	683a      	ldr	r2, [r7, #0]
 801a988:	18d2      	adds	r2, r2, r3
 801a98a:	69fb      	ldr	r3, [r7, #28]
 801a98c:	009b      	lsls	r3, r3, #2
 801a98e:	3303      	adds	r3, #3
 801a990:	6879      	ldr	r1, [r7, #4]
 801a992:	18cb      	adds	r3, r1, r3
 801a994:	7812      	ldrb	r2, [r2, #0]
 801a996:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < Nk; ++i)
 801a998:	69fb      	ldr	r3, [r7, #28]
 801a99a:	3301      	adds	r3, #1
 801a99c:	61fb      	str	r3, [r7, #28]
 801a99e:	69fb      	ldr	r3, [r7, #28]
 801a9a0:	2b03      	cmp	r3, #3
 801a9a2:	d9cb      	bls.n	801a93c <KeyExpansion+0x10>
  }

  // All other round keys are found from the previous round keys.
  for (i = Nk; i < Nb * (Nr + 1); ++i)
 801a9a4:	2304      	movs	r3, #4
 801a9a6:	61fb      	str	r3, [r7, #28]
 801a9a8:	e0a4      	b.n	801aaf4 <KeyExpansion+0x1c8>
  {
    {
      k = (i - 1) * 4;
 801a9aa:	69fb      	ldr	r3, [r7, #28]
 801a9ac:	4a55      	ldr	r2, [pc, #340]	; (801ab04 <KeyExpansion+0x1d8>)
 801a9ae:	4694      	mov	ip, r2
 801a9b0:	4463      	add	r3, ip
 801a9b2:	009b      	lsls	r3, r3, #2
 801a9b4:	61bb      	str	r3, [r7, #24]
      tempa[0]=RoundKey[k + 0];
 801a9b6:	687a      	ldr	r2, [r7, #4]
 801a9b8:	69bb      	ldr	r3, [r7, #24]
 801a9ba:	18d3      	adds	r3, r2, r3
 801a9bc:	781a      	ldrb	r2, [r3, #0]
 801a9be:	210c      	movs	r1, #12
 801a9c0:	187b      	adds	r3, r7, r1
 801a9c2:	701a      	strb	r2, [r3, #0]
      tempa[1]=RoundKey[k + 1];
 801a9c4:	69bb      	ldr	r3, [r7, #24]
 801a9c6:	3301      	adds	r3, #1
 801a9c8:	687a      	ldr	r2, [r7, #4]
 801a9ca:	18d3      	adds	r3, r2, r3
 801a9cc:	781a      	ldrb	r2, [r3, #0]
 801a9ce:	187b      	adds	r3, r7, r1
 801a9d0:	705a      	strb	r2, [r3, #1]
      tempa[2]=RoundKey[k + 2];
 801a9d2:	69bb      	ldr	r3, [r7, #24]
 801a9d4:	3302      	adds	r3, #2
 801a9d6:	687a      	ldr	r2, [r7, #4]
 801a9d8:	18d3      	adds	r3, r2, r3
 801a9da:	781a      	ldrb	r2, [r3, #0]
 801a9dc:	187b      	adds	r3, r7, r1
 801a9de:	709a      	strb	r2, [r3, #2]
      tempa[3]=RoundKey[k + 3];
 801a9e0:	69bb      	ldr	r3, [r7, #24]
 801a9e2:	3303      	adds	r3, #3
 801a9e4:	687a      	ldr	r2, [r7, #4]
 801a9e6:	18d3      	adds	r3, r2, r3
 801a9e8:	781a      	ldrb	r2, [r3, #0]
 801a9ea:	187b      	adds	r3, r7, r1
 801a9ec:	70da      	strb	r2, [r3, #3]

    }

    if (i % Nk == 0)
 801a9ee:	69fb      	ldr	r3, [r7, #28]
 801a9f0:	2203      	movs	r2, #3
 801a9f2:	4013      	ands	r3, r2
 801a9f4:	d13b      	bne.n	801aa6e <KeyExpansion+0x142>
      // This function shifts the 4 bytes in a word to the left once.
      // [a0,a1,a2,a3] becomes [a1,a2,a3,a0]

      // Function RotWord()
      {
        const uint8_t u8tmp = tempa[0];
 801a9f6:	2117      	movs	r1, #23
 801a9f8:	187b      	adds	r3, r7, r1
 801a9fa:	200c      	movs	r0, #12
 801a9fc:	183a      	adds	r2, r7, r0
 801a9fe:	7812      	ldrb	r2, [r2, #0]
 801aa00:	701a      	strb	r2, [r3, #0]
        tempa[0] = tempa[1];
 801aa02:	183b      	adds	r3, r7, r0
 801aa04:	785a      	ldrb	r2, [r3, #1]
 801aa06:	183b      	adds	r3, r7, r0
 801aa08:	701a      	strb	r2, [r3, #0]
        tempa[1] = tempa[2];
 801aa0a:	183b      	adds	r3, r7, r0
 801aa0c:	789a      	ldrb	r2, [r3, #2]
 801aa0e:	183b      	adds	r3, r7, r0
 801aa10:	705a      	strb	r2, [r3, #1]
        tempa[2] = tempa[3];
 801aa12:	183b      	adds	r3, r7, r0
 801aa14:	78da      	ldrb	r2, [r3, #3]
 801aa16:	183b      	adds	r3, r7, r0
 801aa18:	709a      	strb	r2, [r3, #2]
        tempa[3] = u8tmp;
 801aa1a:	183b      	adds	r3, r7, r0
 801aa1c:	187a      	adds	r2, r7, r1
 801aa1e:	7812      	ldrb	r2, [r2, #0]
 801aa20:	70da      	strb	r2, [r3, #3]
      // SubWord() is a function that takes a four-byte input word and
      // applies the S-box to each of the four bytes to produce an output word.

      // Function Subword()
      {
        tempa[0] = getSBoxValue(tempa[0]);
 801aa22:	183b      	adds	r3, r7, r0
 801aa24:	781b      	ldrb	r3, [r3, #0]
 801aa26:	001a      	movs	r2, r3
 801aa28:	4b37      	ldr	r3, [pc, #220]	; (801ab08 <KeyExpansion+0x1dc>)
 801aa2a:	5c9a      	ldrb	r2, [r3, r2]
 801aa2c:	183b      	adds	r3, r7, r0
 801aa2e:	701a      	strb	r2, [r3, #0]
        tempa[1] = getSBoxValue(tempa[1]);
 801aa30:	183b      	adds	r3, r7, r0
 801aa32:	785b      	ldrb	r3, [r3, #1]
 801aa34:	001a      	movs	r2, r3
 801aa36:	4b34      	ldr	r3, [pc, #208]	; (801ab08 <KeyExpansion+0x1dc>)
 801aa38:	5c9a      	ldrb	r2, [r3, r2]
 801aa3a:	183b      	adds	r3, r7, r0
 801aa3c:	705a      	strb	r2, [r3, #1]
        tempa[2] = getSBoxValue(tempa[2]);
 801aa3e:	183b      	adds	r3, r7, r0
 801aa40:	789b      	ldrb	r3, [r3, #2]
 801aa42:	001a      	movs	r2, r3
 801aa44:	4b30      	ldr	r3, [pc, #192]	; (801ab08 <KeyExpansion+0x1dc>)
 801aa46:	5c9a      	ldrb	r2, [r3, r2]
 801aa48:	183b      	adds	r3, r7, r0
 801aa4a:	709a      	strb	r2, [r3, #2]
        tempa[3] = getSBoxValue(tempa[3]);
 801aa4c:	183b      	adds	r3, r7, r0
 801aa4e:	78db      	ldrb	r3, [r3, #3]
 801aa50:	001a      	movs	r2, r3
 801aa52:	4b2d      	ldr	r3, [pc, #180]	; (801ab08 <KeyExpansion+0x1dc>)
 801aa54:	5c9a      	ldrb	r2, [r3, r2]
 801aa56:	183b      	adds	r3, r7, r0
 801aa58:	70da      	strb	r2, [r3, #3]
      }

      tempa[0] = tempa[0] ^ Rcon[i/Nk];
 801aa5a:	183b      	adds	r3, r7, r0
 801aa5c:	781a      	ldrb	r2, [r3, #0]
 801aa5e:	69fb      	ldr	r3, [r7, #28]
 801aa60:	089b      	lsrs	r3, r3, #2
 801aa62:	492a      	ldr	r1, [pc, #168]	; (801ab0c <KeyExpansion+0x1e0>)
 801aa64:	5ccb      	ldrb	r3, [r1, r3]
 801aa66:	4053      	eors	r3, r2
 801aa68:	b2da      	uxtb	r2, r3
 801aa6a:	183b      	adds	r3, r7, r0
 801aa6c:	701a      	strb	r2, [r3, #0]
        tempa[2] = getSBoxValue(tempa[2]);
        tempa[3] = getSBoxValue(tempa[3]);
      }
    }
#endif
    j = i * 4; k=(i - Nk) * 4;
 801aa6e:	69fb      	ldr	r3, [r7, #28]
 801aa70:	009b      	lsls	r3, r3, #2
 801aa72:	613b      	str	r3, [r7, #16]
 801aa74:	69fb      	ldr	r3, [r7, #28]
 801aa76:	4a26      	ldr	r2, [pc, #152]	; (801ab10 <KeyExpansion+0x1e4>)
 801aa78:	4694      	mov	ip, r2
 801aa7a:	4463      	add	r3, ip
 801aa7c:	009b      	lsls	r3, r3, #2
 801aa7e:	61bb      	str	r3, [r7, #24]
    RoundKey[j + 0] = RoundKey[k + 0] ^ tempa[0];
 801aa80:	687a      	ldr	r2, [r7, #4]
 801aa82:	69bb      	ldr	r3, [r7, #24]
 801aa84:	18d3      	adds	r3, r2, r3
 801aa86:	7819      	ldrb	r1, [r3, #0]
 801aa88:	240c      	movs	r4, #12
 801aa8a:	193b      	adds	r3, r7, r4
 801aa8c:	781a      	ldrb	r2, [r3, #0]
 801aa8e:	6878      	ldr	r0, [r7, #4]
 801aa90:	693b      	ldr	r3, [r7, #16]
 801aa92:	18c3      	adds	r3, r0, r3
 801aa94:	404a      	eors	r2, r1
 801aa96:	b2d2      	uxtb	r2, r2
 801aa98:	701a      	strb	r2, [r3, #0]
    RoundKey[j + 1] = RoundKey[k + 1] ^ tempa[1];
 801aa9a:	69bb      	ldr	r3, [r7, #24]
 801aa9c:	3301      	adds	r3, #1
 801aa9e:	687a      	ldr	r2, [r7, #4]
 801aaa0:	18d3      	adds	r3, r2, r3
 801aaa2:	7819      	ldrb	r1, [r3, #0]
 801aaa4:	193b      	adds	r3, r7, r4
 801aaa6:	785a      	ldrb	r2, [r3, #1]
 801aaa8:	693b      	ldr	r3, [r7, #16]
 801aaaa:	3301      	adds	r3, #1
 801aaac:	6878      	ldr	r0, [r7, #4]
 801aaae:	18c3      	adds	r3, r0, r3
 801aab0:	404a      	eors	r2, r1
 801aab2:	b2d2      	uxtb	r2, r2
 801aab4:	701a      	strb	r2, [r3, #0]
    RoundKey[j + 2] = RoundKey[k + 2] ^ tempa[2];
 801aab6:	69bb      	ldr	r3, [r7, #24]
 801aab8:	3302      	adds	r3, #2
 801aaba:	687a      	ldr	r2, [r7, #4]
 801aabc:	18d3      	adds	r3, r2, r3
 801aabe:	7819      	ldrb	r1, [r3, #0]
 801aac0:	193b      	adds	r3, r7, r4
 801aac2:	789a      	ldrb	r2, [r3, #2]
 801aac4:	693b      	ldr	r3, [r7, #16]
 801aac6:	3302      	adds	r3, #2
 801aac8:	6878      	ldr	r0, [r7, #4]
 801aaca:	18c3      	adds	r3, r0, r3
 801aacc:	404a      	eors	r2, r1
 801aace:	b2d2      	uxtb	r2, r2
 801aad0:	701a      	strb	r2, [r3, #0]
    RoundKey[j + 3] = RoundKey[k + 3] ^ tempa[3];
 801aad2:	69bb      	ldr	r3, [r7, #24]
 801aad4:	3303      	adds	r3, #3
 801aad6:	687a      	ldr	r2, [r7, #4]
 801aad8:	18d3      	adds	r3, r2, r3
 801aada:	7819      	ldrb	r1, [r3, #0]
 801aadc:	193b      	adds	r3, r7, r4
 801aade:	78da      	ldrb	r2, [r3, #3]
 801aae0:	693b      	ldr	r3, [r7, #16]
 801aae2:	3303      	adds	r3, #3
 801aae4:	6878      	ldr	r0, [r7, #4]
 801aae6:	18c3      	adds	r3, r0, r3
 801aae8:	404a      	eors	r2, r1
 801aaea:	b2d2      	uxtb	r2, r2
 801aaec:	701a      	strb	r2, [r3, #0]
  for (i = Nk; i < Nb * (Nr + 1); ++i)
 801aaee:	69fb      	ldr	r3, [r7, #28]
 801aaf0:	3301      	adds	r3, #1
 801aaf2:	61fb      	str	r3, [r7, #28]
 801aaf4:	69fb      	ldr	r3, [r7, #28]
 801aaf6:	2b2b      	cmp	r3, #43	; 0x2b
 801aaf8:	d800      	bhi.n	801aafc <KeyExpansion+0x1d0>
 801aafa:	e756      	b.n	801a9aa <KeyExpansion+0x7e>
  }
}
 801aafc:	46c0      	nop			; (mov r8, r8)
 801aafe:	46bd      	mov	sp, r7
 801ab00:	b009      	add	sp, #36	; 0x24
 801ab02:	bd90      	pop	{r4, r7, pc}
 801ab04:	3fffffff 	.word	0x3fffffff
 801ab08:	08022014 	.word	0x08022014
 801ab0c:	08022214 	.word	0x08022214
 801ab10:	3ffffffc 	.word	0x3ffffffc

0801ab14 <tiny_AES_init_ctx>:

void tiny_AES_init_ctx(struct AES_ctx* ctx, const uint8_t* key)
{
 801ab14:	b580      	push	{r7, lr}
 801ab16:	b082      	sub	sp, #8
 801ab18:	af00      	add	r7, sp, #0
 801ab1a:	6078      	str	r0, [r7, #4]
 801ab1c:	6039      	str	r1, [r7, #0]
  KeyExpansion(ctx->RoundKey, key);
 801ab1e:	687b      	ldr	r3, [r7, #4]
 801ab20:	683a      	ldr	r2, [r7, #0]
 801ab22:	0011      	movs	r1, r2
 801ab24:	0018      	movs	r0, r3
 801ab26:	f7ff ff01 	bl	801a92c <KeyExpansion>
}
 801ab2a:	46c0      	nop			; (mov r8, r8)
 801ab2c:	46bd      	mov	sp, r7
 801ab2e:	b002      	add	sp, #8
 801ab30:	bd80      	pop	{r7, pc}

0801ab32 <AddRoundKey>:
#endif

// This function adds the round key to state.
// The round key is added to the state by an XOR function.
static void AddRoundKey(uint8_t round,state_t* state,uint8_t* RoundKey)
{
 801ab32:	b5b0      	push	{r4, r5, r7, lr}
 801ab34:	b086      	sub	sp, #24
 801ab36:	af00      	add	r7, sp, #0
 801ab38:	60b9      	str	r1, [r7, #8]
 801ab3a:	607a      	str	r2, [r7, #4]
 801ab3c:	230f      	movs	r3, #15
 801ab3e:	18fb      	adds	r3, r7, r3
 801ab40:	1c02      	adds	r2, r0, #0
 801ab42:	701a      	strb	r2, [r3, #0]
  uint8_t i,j;
  for (i = 0; i < 4; ++i)
 801ab44:	2317      	movs	r3, #23
 801ab46:	18fb      	adds	r3, r7, r3
 801ab48:	2200      	movs	r2, #0
 801ab4a:	701a      	strb	r2, [r3, #0]
 801ab4c:	e038      	b.n	801abc0 <AddRoundKey+0x8e>
  {
    for (j = 0; j < 4; ++j)
 801ab4e:	2316      	movs	r3, #22
 801ab50:	18fb      	adds	r3, r7, r3
 801ab52:	2200      	movs	r2, #0
 801ab54:	701a      	strb	r2, [r3, #0]
 801ab56:	e028      	b.n	801abaa <AddRoundKey+0x78>
    {
      (*state)[i][j] ^= RoundKey[(round * Nb * 4) + (i * Nb) + j];
 801ab58:	2517      	movs	r5, #23
 801ab5a:	197b      	adds	r3, r7, r5
 801ab5c:	781a      	ldrb	r2, [r3, #0]
 801ab5e:	2416      	movs	r4, #22
 801ab60:	193b      	adds	r3, r7, r4
 801ab62:	781b      	ldrb	r3, [r3, #0]
 801ab64:	68b9      	ldr	r1, [r7, #8]
 801ab66:	0092      	lsls	r2, r2, #2
 801ab68:	188a      	adds	r2, r1, r2
 801ab6a:	5cd0      	ldrb	r0, [r2, r3]
 801ab6c:	230f      	movs	r3, #15
 801ab6e:	18fb      	adds	r3, r7, r3
 801ab70:	781b      	ldrb	r3, [r3, #0]
 801ab72:	009a      	lsls	r2, r3, #2
 801ab74:	197b      	adds	r3, r7, r5
 801ab76:	781b      	ldrb	r3, [r3, #0]
 801ab78:	18d3      	adds	r3, r2, r3
 801ab7a:	009a      	lsls	r2, r3, #2
 801ab7c:	193b      	adds	r3, r7, r4
 801ab7e:	781b      	ldrb	r3, [r3, #0]
 801ab80:	18d3      	adds	r3, r2, r3
 801ab82:	001a      	movs	r2, r3
 801ab84:	687b      	ldr	r3, [r7, #4]
 801ab86:	189b      	adds	r3, r3, r2
 801ab88:	7819      	ldrb	r1, [r3, #0]
 801ab8a:	197b      	adds	r3, r7, r5
 801ab8c:	781a      	ldrb	r2, [r3, #0]
 801ab8e:	193b      	adds	r3, r7, r4
 801ab90:	781b      	ldrb	r3, [r3, #0]
 801ab92:	4041      	eors	r1, r0
 801ab94:	b2c8      	uxtb	r0, r1
 801ab96:	68b9      	ldr	r1, [r7, #8]
 801ab98:	0092      	lsls	r2, r2, #2
 801ab9a:	188a      	adds	r2, r1, r2
 801ab9c:	1c01      	adds	r1, r0, #0
 801ab9e:	54d1      	strb	r1, [r2, r3]
    for (j = 0; j < 4; ++j)
 801aba0:	193b      	adds	r3, r7, r4
 801aba2:	193a      	adds	r2, r7, r4
 801aba4:	7812      	ldrb	r2, [r2, #0]
 801aba6:	3201      	adds	r2, #1
 801aba8:	701a      	strb	r2, [r3, #0]
 801abaa:	2316      	movs	r3, #22
 801abac:	18fb      	adds	r3, r7, r3
 801abae:	781b      	ldrb	r3, [r3, #0]
 801abb0:	2b03      	cmp	r3, #3
 801abb2:	d9d1      	bls.n	801ab58 <AddRoundKey+0x26>
  for (i = 0; i < 4; ++i)
 801abb4:	2217      	movs	r2, #23
 801abb6:	18bb      	adds	r3, r7, r2
 801abb8:	18ba      	adds	r2, r7, r2
 801abba:	7812      	ldrb	r2, [r2, #0]
 801abbc:	3201      	adds	r2, #1
 801abbe:	701a      	strb	r2, [r3, #0]
 801abc0:	2317      	movs	r3, #23
 801abc2:	18fb      	adds	r3, r7, r3
 801abc4:	781b      	ldrb	r3, [r3, #0]
 801abc6:	2b03      	cmp	r3, #3
 801abc8:	d9c1      	bls.n	801ab4e <AddRoundKey+0x1c>
    }
  }
}
 801abca:	46c0      	nop			; (mov r8, r8)
 801abcc:	46bd      	mov	sp, r7
 801abce:	b006      	add	sp, #24
 801abd0:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801abd4 <SubBytes>:

// The SubBytes Function Substitutes the values in the
// state matrix with values in an S-box.
static void SubBytes(state_t* state)
{
 801abd4:	b5b0      	push	{r4, r5, r7, lr}
 801abd6:	b084      	sub	sp, #16
 801abd8:	af00      	add	r7, sp, #0
 801abda:	6078      	str	r0, [r7, #4]
  uint8_t i, j;
  for (i = 0; i < 4; ++i)
 801abdc:	230f      	movs	r3, #15
 801abde:	18fb      	adds	r3, r7, r3
 801abe0:	2200      	movs	r2, #0
 801abe2:	701a      	strb	r2, [r3, #0]
 801abe4:	e02a      	b.n	801ac3c <SubBytes+0x68>
  {
    for (j = 0; j < 4; ++j)
 801abe6:	230e      	movs	r3, #14
 801abe8:	18fb      	adds	r3, r7, r3
 801abea:	2200      	movs	r2, #0
 801abec:	701a      	strb	r2, [r3, #0]
 801abee:	e01a      	b.n	801ac26 <SubBytes+0x52>
    {
      (*state)[j][i] = getSBoxValue((*state)[j][i]);
 801abf0:	240e      	movs	r4, #14
 801abf2:	193b      	adds	r3, r7, r4
 801abf4:	781a      	ldrb	r2, [r3, #0]
 801abf6:	250f      	movs	r5, #15
 801abf8:	197b      	adds	r3, r7, r5
 801abfa:	781b      	ldrb	r3, [r3, #0]
 801abfc:	6879      	ldr	r1, [r7, #4]
 801abfe:	0092      	lsls	r2, r2, #2
 801ac00:	188a      	adds	r2, r1, r2
 801ac02:	5cd3      	ldrb	r3, [r2, r3]
 801ac04:	0018      	movs	r0, r3
 801ac06:	193b      	adds	r3, r7, r4
 801ac08:	781a      	ldrb	r2, [r3, #0]
 801ac0a:	197b      	adds	r3, r7, r5
 801ac0c:	781b      	ldrb	r3, [r3, #0]
 801ac0e:	4910      	ldr	r1, [pc, #64]	; (801ac50 <SubBytes+0x7c>)
 801ac10:	5c08      	ldrb	r0, [r1, r0]
 801ac12:	6879      	ldr	r1, [r7, #4]
 801ac14:	0092      	lsls	r2, r2, #2
 801ac16:	188a      	adds	r2, r1, r2
 801ac18:	1c01      	adds	r1, r0, #0
 801ac1a:	54d1      	strb	r1, [r2, r3]
    for (j = 0; j < 4; ++j)
 801ac1c:	193b      	adds	r3, r7, r4
 801ac1e:	193a      	adds	r2, r7, r4
 801ac20:	7812      	ldrb	r2, [r2, #0]
 801ac22:	3201      	adds	r2, #1
 801ac24:	701a      	strb	r2, [r3, #0]
 801ac26:	230e      	movs	r3, #14
 801ac28:	18fb      	adds	r3, r7, r3
 801ac2a:	781b      	ldrb	r3, [r3, #0]
 801ac2c:	2b03      	cmp	r3, #3
 801ac2e:	d9df      	bls.n	801abf0 <SubBytes+0x1c>
  for (i = 0; i < 4; ++i)
 801ac30:	220f      	movs	r2, #15
 801ac32:	18bb      	adds	r3, r7, r2
 801ac34:	18ba      	adds	r2, r7, r2
 801ac36:	7812      	ldrb	r2, [r2, #0]
 801ac38:	3201      	adds	r2, #1
 801ac3a:	701a      	strb	r2, [r3, #0]
 801ac3c:	230f      	movs	r3, #15
 801ac3e:	18fb      	adds	r3, r7, r3
 801ac40:	781b      	ldrb	r3, [r3, #0]
 801ac42:	2b03      	cmp	r3, #3
 801ac44:	d9cf      	bls.n	801abe6 <SubBytes+0x12>
    }
  }
}
 801ac46:	46c0      	nop			; (mov r8, r8)
 801ac48:	46bd      	mov	sp, r7
 801ac4a:	b004      	add	sp, #16
 801ac4c:	bdb0      	pop	{r4, r5, r7, pc}
 801ac4e:	46c0      	nop			; (mov r8, r8)
 801ac50:	08022014 	.word	0x08022014

0801ac54 <ShiftRows>:

// The ShiftRows() function shifts the rows in the state to the left.
// Each row is shifted with different offset.
// Offset = Row number. So the first row is not shifted.
static void ShiftRows(state_t* state)
{
 801ac54:	b580      	push	{r7, lr}
 801ac56:	b084      	sub	sp, #16
 801ac58:	af00      	add	r7, sp, #0
 801ac5a:	6078      	str	r0, [r7, #4]
  uint8_t temp;

  // Rotate first row 1 columns to left
  temp           = (*state)[0][1];
 801ac5c:	210f      	movs	r1, #15
 801ac5e:	187b      	adds	r3, r7, r1
 801ac60:	687a      	ldr	r2, [r7, #4]
 801ac62:	7852      	ldrb	r2, [r2, #1]
 801ac64:	701a      	strb	r2, [r3, #0]
  (*state)[0][1] = (*state)[1][1];
 801ac66:	687b      	ldr	r3, [r7, #4]
 801ac68:	795a      	ldrb	r2, [r3, #5]
 801ac6a:	687b      	ldr	r3, [r7, #4]
 801ac6c:	705a      	strb	r2, [r3, #1]
  (*state)[1][1] = (*state)[2][1];
 801ac6e:	687b      	ldr	r3, [r7, #4]
 801ac70:	7a5a      	ldrb	r2, [r3, #9]
 801ac72:	687b      	ldr	r3, [r7, #4]
 801ac74:	715a      	strb	r2, [r3, #5]
  (*state)[2][1] = (*state)[3][1];
 801ac76:	687b      	ldr	r3, [r7, #4]
 801ac78:	7b5a      	ldrb	r2, [r3, #13]
 801ac7a:	687b      	ldr	r3, [r7, #4]
 801ac7c:	725a      	strb	r2, [r3, #9]
  (*state)[3][1] = temp;
 801ac7e:	687b      	ldr	r3, [r7, #4]
 801ac80:	187a      	adds	r2, r7, r1
 801ac82:	7812      	ldrb	r2, [r2, #0]
 801ac84:	735a      	strb	r2, [r3, #13]

  // Rotate second row 2 columns to left
  temp           = (*state)[0][2];
 801ac86:	187b      	adds	r3, r7, r1
 801ac88:	687a      	ldr	r2, [r7, #4]
 801ac8a:	7892      	ldrb	r2, [r2, #2]
 801ac8c:	701a      	strb	r2, [r3, #0]
  (*state)[0][2] = (*state)[2][2];
 801ac8e:	687b      	ldr	r3, [r7, #4]
 801ac90:	7a9a      	ldrb	r2, [r3, #10]
 801ac92:	687b      	ldr	r3, [r7, #4]
 801ac94:	709a      	strb	r2, [r3, #2]
  (*state)[2][2] = temp;
 801ac96:	687b      	ldr	r3, [r7, #4]
 801ac98:	187a      	adds	r2, r7, r1
 801ac9a:	7812      	ldrb	r2, [r2, #0]
 801ac9c:	729a      	strb	r2, [r3, #10]

  temp           = (*state)[1][2];
 801ac9e:	187b      	adds	r3, r7, r1
 801aca0:	687a      	ldr	r2, [r7, #4]
 801aca2:	7992      	ldrb	r2, [r2, #6]
 801aca4:	701a      	strb	r2, [r3, #0]
  (*state)[1][2] = (*state)[3][2];
 801aca6:	687b      	ldr	r3, [r7, #4]
 801aca8:	7b9a      	ldrb	r2, [r3, #14]
 801acaa:	687b      	ldr	r3, [r7, #4]
 801acac:	719a      	strb	r2, [r3, #6]
  (*state)[3][2] = temp;
 801acae:	687b      	ldr	r3, [r7, #4]
 801acb0:	187a      	adds	r2, r7, r1
 801acb2:	7812      	ldrb	r2, [r2, #0]
 801acb4:	739a      	strb	r2, [r3, #14]

  // Rotate third row 3 columns to left
  temp           = (*state)[0][3];
 801acb6:	187b      	adds	r3, r7, r1
 801acb8:	687a      	ldr	r2, [r7, #4]
 801acba:	78d2      	ldrb	r2, [r2, #3]
 801acbc:	701a      	strb	r2, [r3, #0]
  (*state)[0][3] = (*state)[3][3];
 801acbe:	687b      	ldr	r3, [r7, #4]
 801acc0:	7bda      	ldrb	r2, [r3, #15]
 801acc2:	687b      	ldr	r3, [r7, #4]
 801acc4:	70da      	strb	r2, [r3, #3]
  (*state)[3][3] = (*state)[2][3];
 801acc6:	687b      	ldr	r3, [r7, #4]
 801acc8:	7ada      	ldrb	r2, [r3, #11]
 801acca:	687b      	ldr	r3, [r7, #4]
 801accc:	73da      	strb	r2, [r3, #15]
  (*state)[2][3] = (*state)[1][3];
 801acce:	687b      	ldr	r3, [r7, #4]
 801acd0:	79da      	ldrb	r2, [r3, #7]
 801acd2:	687b      	ldr	r3, [r7, #4]
 801acd4:	72da      	strb	r2, [r3, #11]
  (*state)[1][3] = temp;
 801acd6:	687b      	ldr	r3, [r7, #4]
 801acd8:	187a      	adds	r2, r7, r1
 801acda:	7812      	ldrb	r2, [r2, #0]
 801acdc:	71da      	strb	r2, [r3, #7]
}
 801acde:	46c0      	nop			; (mov r8, r8)
 801ace0:	46bd      	mov	sp, r7
 801ace2:	b004      	add	sp, #16
 801ace4:	bd80      	pop	{r7, pc}

0801ace6 <xtime>:

static uint8_t xtime(uint8_t x)
{
 801ace6:	b580      	push	{r7, lr}
 801ace8:	b082      	sub	sp, #8
 801acea:	af00      	add	r7, sp, #0
 801acec:	0002      	movs	r2, r0
 801acee:	1dfb      	adds	r3, r7, #7
 801acf0:	701a      	strb	r2, [r3, #0]
  return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
 801acf2:	1dfb      	adds	r3, r7, #7
 801acf4:	781b      	ldrb	r3, [r3, #0]
 801acf6:	005b      	lsls	r3, r3, #1
 801acf8:	b25a      	sxtb	r2, r3
 801acfa:	1dfb      	adds	r3, r7, #7
 801acfc:	781b      	ldrb	r3, [r3, #0]
 801acfe:	09db      	lsrs	r3, r3, #7
 801ad00:	b2db      	uxtb	r3, r3
 801ad02:	1c19      	adds	r1, r3, #0
 801ad04:	1c0b      	adds	r3, r1, #0
 801ad06:	18db      	adds	r3, r3, r3
 801ad08:	185b      	adds	r3, r3, r1
 801ad0a:	1c19      	adds	r1, r3, #0
 801ad0c:	00c8      	lsls	r0, r1, #3
 801ad0e:	1c19      	adds	r1, r3, #0
 801ad10:	1c03      	adds	r3, r0, #0
 801ad12:	18cb      	adds	r3, r1, r3
 801ad14:	b2db      	uxtb	r3, r3
 801ad16:	b25b      	sxtb	r3, r3
 801ad18:	4053      	eors	r3, r2
 801ad1a:	b25b      	sxtb	r3, r3
 801ad1c:	b2db      	uxtb	r3, r3
}
 801ad1e:	0018      	movs	r0, r3
 801ad20:	46bd      	mov	sp, r7
 801ad22:	b002      	add	sp, #8
 801ad24:	bd80      	pop	{r7, pc}

0801ad26 <MixColumns>:

// MixColumns function mixes the columns of the state matrix
static void MixColumns(state_t* state)
{
 801ad26:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ad28:	b085      	sub	sp, #20
 801ad2a:	af00      	add	r7, sp, #0
 801ad2c:	6078      	str	r0, [r7, #4]
  uint8_t i;
  uint8_t Tmp, Tm, t;
  for (i = 0; i < 4; ++i)
 801ad2e:	230f      	movs	r3, #15
 801ad30:	18fb      	adds	r3, r7, r3
 801ad32:	2200      	movs	r2, #0
 801ad34:	701a      	strb	r2, [r3, #0]
 801ad36:	e0f0      	b.n	801af1a <MixColumns+0x1f4>
  {
    t   = (*state)[i][0];
 801ad38:	250f      	movs	r5, #15
 801ad3a:	197b      	adds	r3, r7, r5
 801ad3c:	7819      	ldrb	r1, [r3, #0]
 801ad3e:	230e      	movs	r3, #14
 801ad40:	18fb      	adds	r3, r7, r3
 801ad42:	687a      	ldr	r2, [r7, #4]
 801ad44:	0089      	lsls	r1, r1, #2
 801ad46:	5c8a      	ldrb	r2, [r1, r2]
 801ad48:	701a      	strb	r2, [r3, #0]
    Tmp = (*state)[i][0] ^ (*state)[i][1] ^ (*state)[i][2] ^ (*state)[i][3] ;
 801ad4a:	197b      	adds	r3, r7, r5
 801ad4c:	781a      	ldrb	r2, [r3, #0]
 801ad4e:	687b      	ldr	r3, [r7, #4]
 801ad50:	0092      	lsls	r2, r2, #2
 801ad52:	5cd2      	ldrb	r2, [r2, r3]
 801ad54:	197b      	adds	r3, r7, r5
 801ad56:	781b      	ldrb	r3, [r3, #0]
 801ad58:	6879      	ldr	r1, [r7, #4]
 801ad5a:	009b      	lsls	r3, r3, #2
 801ad5c:	18cb      	adds	r3, r1, r3
 801ad5e:	3301      	adds	r3, #1
 801ad60:	781b      	ldrb	r3, [r3, #0]
 801ad62:	4053      	eors	r3, r2
 801ad64:	b2da      	uxtb	r2, r3
 801ad66:	197b      	adds	r3, r7, r5
 801ad68:	781b      	ldrb	r3, [r3, #0]
 801ad6a:	6879      	ldr	r1, [r7, #4]
 801ad6c:	009b      	lsls	r3, r3, #2
 801ad6e:	18cb      	adds	r3, r1, r3
 801ad70:	3302      	adds	r3, #2
 801ad72:	781b      	ldrb	r3, [r3, #0]
 801ad74:	4053      	eors	r3, r2
 801ad76:	b2d9      	uxtb	r1, r3
 801ad78:	197b      	adds	r3, r7, r5
 801ad7a:	781b      	ldrb	r3, [r3, #0]
 801ad7c:	687a      	ldr	r2, [r7, #4]
 801ad7e:	009b      	lsls	r3, r3, #2
 801ad80:	18d3      	adds	r3, r2, r3
 801ad82:	3303      	adds	r3, #3
 801ad84:	781a      	ldrb	r2, [r3, #0]
 801ad86:	230d      	movs	r3, #13
 801ad88:	18fb      	adds	r3, r7, r3
 801ad8a:	404a      	eors	r2, r1
 801ad8c:	701a      	strb	r2, [r3, #0]
    Tm  = (*state)[i][0] ^ (*state)[i][1] ; Tm = xtime(Tm);  (*state)[i][0] ^= Tm ^ Tmp ;
 801ad8e:	197b      	adds	r3, r7, r5
 801ad90:	781a      	ldrb	r2, [r3, #0]
 801ad92:	687b      	ldr	r3, [r7, #4]
 801ad94:	0092      	lsls	r2, r2, #2
 801ad96:	5cd1      	ldrb	r1, [r2, r3]
 801ad98:	197b      	adds	r3, r7, r5
 801ad9a:	781b      	ldrb	r3, [r3, #0]
 801ad9c:	687a      	ldr	r2, [r7, #4]
 801ad9e:	009b      	lsls	r3, r3, #2
 801ada0:	18d3      	adds	r3, r2, r3
 801ada2:	3301      	adds	r3, #1
 801ada4:	781a      	ldrb	r2, [r3, #0]
 801ada6:	200c      	movs	r0, #12
 801ada8:	183b      	adds	r3, r7, r0
 801adaa:	404a      	eors	r2, r1
 801adac:	701a      	strb	r2, [r3, #0]
 801adae:	183c      	adds	r4, r7, r0
 801adb0:	0006      	movs	r6, r0
 801adb2:	183b      	adds	r3, r7, r0
 801adb4:	781b      	ldrb	r3, [r3, #0]
 801adb6:	0018      	movs	r0, r3
 801adb8:	f7ff ff95 	bl	801ace6 <xtime>
 801adbc:	0003      	movs	r3, r0
 801adbe:	7023      	strb	r3, [r4, #0]
 801adc0:	197b      	adds	r3, r7, r5
 801adc2:	781a      	ldrb	r2, [r3, #0]
 801adc4:	687b      	ldr	r3, [r7, #4]
 801adc6:	0092      	lsls	r2, r2, #2
 801adc8:	5cd1      	ldrb	r1, [r2, r3]
 801adca:	0030      	movs	r0, r6
 801adcc:	183a      	adds	r2, r7, r0
 801adce:	230d      	movs	r3, #13
 801add0:	18fb      	adds	r3, r7, r3
 801add2:	7812      	ldrb	r2, [r2, #0]
 801add4:	781b      	ldrb	r3, [r3, #0]
 801add6:	4053      	eors	r3, r2
 801add8:	b2db      	uxtb	r3, r3
 801adda:	197a      	adds	r2, r7, r5
 801addc:	7812      	ldrb	r2, [r2, #0]
 801adde:	404b      	eors	r3, r1
 801ade0:	b2d9      	uxtb	r1, r3
 801ade2:	687b      	ldr	r3, [r7, #4]
 801ade4:	0092      	lsls	r2, r2, #2
 801ade6:	54d1      	strb	r1, [r2, r3]
    Tm  = (*state)[i][1] ^ (*state)[i][2] ; Tm = xtime(Tm);  (*state)[i][1] ^= Tm ^ Tmp ;
 801ade8:	197b      	adds	r3, r7, r5
 801adea:	781b      	ldrb	r3, [r3, #0]
 801adec:	687a      	ldr	r2, [r7, #4]
 801adee:	009b      	lsls	r3, r3, #2
 801adf0:	18d3      	adds	r3, r2, r3
 801adf2:	3301      	adds	r3, #1
 801adf4:	7819      	ldrb	r1, [r3, #0]
 801adf6:	197b      	adds	r3, r7, r5
 801adf8:	781b      	ldrb	r3, [r3, #0]
 801adfa:	687a      	ldr	r2, [r7, #4]
 801adfc:	009b      	lsls	r3, r3, #2
 801adfe:	18d3      	adds	r3, r2, r3
 801ae00:	3302      	adds	r3, #2
 801ae02:	781a      	ldrb	r2, [r3, #0]
 801ae04:	183b      	adds	r3, r7, r0
 801ae06:	404a      	eors	r2, r1
 801ae08:	701a      	strb	r2, [r3, #0]
 801ae0a:	183c      	adds	r4, r7, r0
 801ae0c:	0006      	movs	r6, r0
 801ae0e:	183b      	adds	r3, r7, r0
 801ae10:	781b      	ldrb	r3, [r3, #0]
 801ae12:	0018      	movs	r0, r3
 801ae14:	f7ff ff67 	bl	801ace6 <xtime>
 801ae18:	0003      	movs	r3, r0
 801ae1a:	7023      	strb	r3, [r4, #0]
 801ae1c:	197b      	adds	r3, r7, r5
 801ae1e:	781b      	ldrb	r3, [r3, #0]
 801ae20:	687a      	ldr	r2, [r7, #4]
 801ae22:	009b      	lsls	r3, r3, #2
 801ae24:	18d3      	adds	r3, r2, r3
 801ae26:	3301      	adds	r3, #1
 801ae28:	7819      	ldrb	r1, [r3, #0]
 801ae2a:	0030      	movs	r0, r6
 801ae2c:	183a      	adds	r2, r7, r0
 801ae2e:	230d      	movs	r3, #13
 801ae30:	18fb      	adds	r3, r7, r3
 801ae32:	7812      	ldrb	r2, [r2, #0]
 801ae34:	781b      	ldrb	r3, [r3, #0]
 801ae36:	4053      	eors	r3, r2
 801ae38:	b2da      	uxtb	r2, r3
 801ae3a:	197b      	adds	r3, r7, r5
 801ae3c:	781b      	ldrb	r3, [r3, #0]
 801ae3e:	404a      	eors	r2, r1
 801ae40:	b2d1      	uxtb	r1, r2
 801ae42:	687a      	ldr	r2, [r7, #4]
 801ae44:	009b      	lsls	r3, r3, #2
 801ae46:	18d3      	adds	r3, r2, r3
 801ae48:	3301      	adds	r3, #1
 801ae4a:	1c0a      	adds	r2, r1, #0
 801ae4c:	701a      	strb	r2, [r3, #0]
    Tm  = (*state)[i][2] ^ (*state)[i][3] ; Tm = xtime(Tm);  (*state)[i][2] ^= Tm ^ Tmp ;
 801ae4e:	197b      	adds	r3, r7, r5
 801ae50:	781b      	ldrb	r3, [r3, #0]
 801ae52:	687a      	ldr	r2, [r7, #4]
 801ae54:	009b      	lsls	r3, r3, #2
 801ae56:	18d3      	adds	r3, r2, r3
 801ae58:	3302      	adds	r3, #2
 801ae5a:	7819      	ldrb	r1, [r3, #0]
 801ae5c:	197b      	adds	r3, r7, r5
 801ae5e:	781b      	ldrb	r3, [r3, #0]
 801ae60:	687a      	ldr	r2, [r7, #4]
 801ae62:	009b      	lsls	r3, r3, #2
 801ae64:	18d3      	adds	r3, r2, r3
 801ae66:	3303      	adds	r3, #3
 801ae68:	781a      	ldrb	r2, [r3, #0]
 801ae6a:	183b      	adds	r3, r7, r0
 801ae6c:	404a      	eors	r2, r1
 801ae6e:	701a      	strb	r2, [r3, #0]
 801ae70:	183c      	adds	r4, r7, r0
 801ae72:	0006      	movs	r6, r0
 801ae74:	183b      	adds	r3, r7, r0
 801ae76:	781b      	ldrb	r3, [r3, #0]
 801ae78:	0018      	movs	r0, r3
 801ae7a:	f7ff ff34 	bl	801ace6 <xtime>
 801ae7e:	0003      	movs	r3, r0
 801ae80:	7023      	strb	r3, [r4, #0]
 801ae82:	197b      	adds	r3, r7, r5
 801ae84:	781b      	ldrb	r3, [r3, #0]
 801ae86:	687a      	ldr	r2, [r7, #4]
 801ae88:	009b      	lsls	r3, r3, #2
 801ae8a:	18d3      	adds	r3, r2, r3
 801ae8c:	3302      	adds	r3, #2
 801ae8e:	7819      	ldrb	r1, [r3, #0]
 801ae90:	0030      	movs	r0, r6
 801ae92:	183a      	adds	r2, r7, r0
 801ae94:	230d      	movs	r3, #13
 801ae96:	18fb      	adds	r3, r7, r3
 801ae98:	7812      	ldrb	r2, [r2, #0]
 801ae9a:	781b      	ldrb	r3, [r3, #0]
 801ae9c:	4053      	eors	r3, r2
 801ae9e:	b2da      	uxtb	r2, r3
 801aea0:	197b      	adds	r3, r7, r5
 801aea2:	781b      	ldrb	r3, [r3, #0]
 801aea4:	404a      	eors	r2, r1
 801aea6:	b2d1      	uxtb	r1, r2
 801aea8:	687a      	ldr	r2, [r7, #4]
 801aeaa:	009b      	lsls	r3, r3, #2
 801aeac:	18d3      	adds	r3, r2, r3
 801aeae:	3302      	adds	r3, #2
 801aeb0:	1c0a      	adds	r2, r1, #0
 801aeb2:	701a      	strb	r2, [r3, #0]
    Tm  = (*state)[i][3] ^ t ;              Tm = xtime(Tm);  (*state)[i][3] ^= Tm ^ Tmp ;
 801aeb4:	197b      	adds	r3, r7, r5
 801aeb6:	781b      	ldrb	r3, [r3, #0]
 801aeb8:	687a      	ldr	r2, [r7, #4]
 801aeba:	009b      	lsls	r3, r3, #2
 801aebc:	18d3      	adds	r3, r2, r3
 801aebe:	3303      	adds	r3, #3
 801aec0:	7819      	ldrb	r1, [r3, #0]
 801aec2:	183b      	adds	r3, r7, r0
 801aec4:	220e      	movs	r2, #14
 801aec6:	18ba      	adds	r2, r7, r2
 801aec8:	7812      	ldrb	r2, [r2, #0]
 801aeca:	404a      	eors	r2, r1
 801aecc:	701a      	strb	r2, [r3, #0]
 801aece:	183c      	adds	r4, r7, r0
 801aed0:	0006      	movs	r6, r0
 801aed2:	183b      	adds	r3, r7, r0
 801aed4:	781b      	ldrb	r3, [r3, #0]
 801aed6:	0018      	movs	r0, r3
 801aed8:	f7ff ff05 	bl	801ace6 <xtime>
 801aedc:	0003      	movs	r3, r0
 801aede:	7023      	strb	r3, [r4, #0]
 801aee0:	197b      	adds	r3, r7, r5
 801aee2:	781b      	ldrb	r3, [r3, #0]
 801aee4:	687a      	ldr	r2, [r7, #4]
 801aee6:	009b      	lsls	r3, r3, #2
 801aee8:	18d3      	adds	r3, r2, r3
 801aeea:	3303      	adds	r3, #3
 801aeec:	7819      	ldrb	r1, [r3, #0]
 801aeee:	19ba      	adds	r2, r7, r6
 801aef0:	230d      	movs	r3, #13
 801aef2:	18fb      	adds	r3, r7, r3
 801aef4:	7812      	ldrb	r2, [r2, #0]
 801aef6:	781b      	ldrb	r3, [r3, #0]
 801aef8:	4053      	eors	r3, r2
 801aefa:	b2da      	uxtb	r2, r3
 801aefc:	197b      	adds	r3, r7, r5
 801aefe:	781b      	ldrb	r3, [r3, #0]
 801af00:	404a      	eors	r2, r1
 801af02:	b2d1      	uxtb	r1, r2
 801af04:	687a      	ldr	r2, [r7, #4]
 801af06:	009b      	lsls	r3, r3, #2
 801af08:	18d3      	adds	r3, r2, r3
 801af0a:	3303      	adds	r3, #3
 801af0c:	1c0a      	adds	r2, r1, #0
 801af0e:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < 4; ++i)
 801af10:	197b      	adds	r3, r7, r5
 801af12:	197a      	adds	r2, r7, r5
 801af14:	7812      	ldrb	r2, [r2, #0]
 801af16:	3201      	adds	r2, #1
 801af18:	701a      	strb	r2, [r3, #0]
 801af1a:	230f      	movs	r3, #15
 801af1c:	18fb      	adds	r3, r7, r3
 801af1e:	781b      	ldrb	r3, [r3, #0]
 801af20:	2b03      	cmp	r3, #3
 801af22:	d800      	bhi.n	801af26 <MixColumns+0x200>
 801af24:	e708      	b.n	801ad38 <MixColumns+0x12>
  }
}
 801af26:	46c0      	nop			; (mov r8, r8)
 801af28:	46bd      	mov	sp, r7
 801af2a:	b005      	add	sp, #20
 801af2c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801af2e <InvMixColumns>:

// MixColumns function mixes the columns of the state matrix.
// The method used to multiply may be difficult to understand for the inexperienced.
// Please use the references to gain more information.
static void InvMixColumns(state_t* state)
{
 801af2e:	b5f0      	push	{r4, r5, r6, r7, lr}
 801af30:	b085      	sub	sp, #20
 801af32:	af00      	add	r7, sp, #0
 801af34:	6078      	str	r0, [r7, #4]
  int i;
  uint8_t a, b, c, d;
  for (i = 0; i < 4; ++i)
 801af36:	2300      	movs	r3, #0
 801af38:	60fb      	str	r3, [r7, #12]
 801af3a:	e3c3      	b.n	801b6c4 <InvMixColumns+0x796>
  {
    a = (*state)[i][0];
 801af3c:	260b      	movs	r6, #11
 801af3e:	19bb      	adds	r3, r7, r6
 801af40:	687a      	ldr	r2, [r7, #4]
 801af42:	68f9      	ldr	r1, [r7, #12]
 801af44:	0089      	lsls	r1, r1, #2
 801af46:	5c8a      	ldrb	r2, [r1, r2]
 801af48:	701a      	strb	r2, [r3, #0]
    b = (*state)[i][1];
 801af4a:	250a      	movs	r5, #10
 801af4c:	197b      	adds	r3, r7, r5
 801af4e:	6879      	ldr	r1, [r7, #4]
 801af50:	68fa      	ldr	r2, [r7, #12]
 801af52:	0092      	lsls	r2, r2, #2
 801af54:	188a      	adds	r2, r1, r2
 801af56:	3201      	adds	r2, #1
 801af58:	7812      	ldrb	r2, [r2, #0]
 801af5a:	701a      	strb	r2, [r3, #0]
    c = (*state)[i][2];
 801af5c:	2409      	movs	r4, #9
 801af5e:	193b      	adds	r3, r7, r4
 801af60:	6879      	ldr	r1, [r7, #4]
 801af62:	68fa      	ldr	r2, [r7, #12]
 801af64:	0092      	lsls	r2, r2, #2
 801af66:	188a      	adds	r2, r1, r2
 801af68:	3202      	adds	r2, #2
 801af6a:	7812      	ldrb	r2, [r2, #0]
 801af6c:	701a      	strb	r2, [r3, #0]
    d = (*state)[i][3];
 801af6e:	2308      	movs	r3, #8
 801af70:	18fb      	adds	r3, r7, r3
 801af72:	6879      	ldr	r1, [r7, #4]
 801af74:	68fa      	ldr	r2, [r7, #12]
 801af76:	0092      	lsls	r2, r2, #2
 801af78:	188a      	adds	r2, r1, r2
 801af7a:	3203      	adds	r2, #3
 801af7c:	7812      	ldrb	r2, [r2, #0]
 801af7e:	701a      	strb	r2, [r3, #0]

    (*state)[i][0] = Multiply(a, 0x0e) ^ Multiply(b, 0x0b) ^ Multiply(c, 0x0d) ^ Multiply(d, 0x09);
 801af80:	19bb      	adds	r3, r7, r6
 801af82:	781b      	ldrb	r3, [r3, #0]
 801af84:	0018      	movs	r0, r3
 801af86:	f7ff feae 	bl	801ace6 <xtime>
 801af8a:	0003      	movs	r3, r0
 801af8c:	0018      	movs	r0, r3
 801af8e:	f7ff feaa 	bl	801ace6 <xtime>
 801af92:	0003      	movs	r3, r0
 801af94:	0018      	movs	r0, r3
 801af96:	f7ff fea6 	bl	801ace6 <xtime>
 801af9a:	0003      	movs	r3, r0
 801af9c:	0018      	movs	r0, r3
 801af9e:	f7ff fea2 	bl	801ace6 <xtime>
 801afa2:	197b      	adds	r3, r7, r5
 801afa4:	781b      	ldrb	r3, [r3, #0]
 801afa6:	0018      	movs	r0, r3
 801afa8:	f7ff fe9d 	bl	801ace6 <xtime>
 801afac:	0003      	movs	r3, r0
 801afae:	0018      	movs	r0, r3
 801afb0:	f7ff fe99 	bl	801ace6 <xtime>
 801afb4:	197b      	adds	r3, r7, r5
 801afb6:	781b      	ldrb	r3, [r3, #0]
 801afb8:	0018      	movs	r0, r3
 801afba:	f7ff fe94 	bl	801ace6 <xtime>
 801afbe:	0003      	movs	r3, r0
 801afc0:	0018      	movs	r0, r3
 801afc2:	f7ff fe90 	bl	801ace6 <xtime>
 801afc6:	0003      	movs	r3, r0
 801afc8:	0018      	movs	r0, r3
 801afca:	f7ff fe8c 	bl	801ace6 <xtime>
 801afce:	0003      	movs	r3, r0
 801afd0:	0018      	movs	r0, r3
 801afd2:	f7ff fe88 	bl	801ace6 <xtime>
 801afd6:	193b      	adds	r3, r7, r4
 801afd8:	781b      	ldrb	r3, [r3, #0]
 801afda:	0018      	movs	r0, r3
 801afdc:	f7ff fe83 	bl	801ace6 <xtime>
 801afe0:	193b      	adds	r3, r7, r4
 801afe2:	781b      	ldrb	r3, [r3, #0]
 801afe4:	0018      	movs	r0, r3
 801afe6:	f7ff fe7e 	bl	801ace6 <xtime>
 801afea:	0003      	movs	r3, r0
 801afec:	0018      	movs	r0, r3
 801afee:	f7ff fe7a 	bl	801ace6 <xtime>
 801aff2:	0003      	movs	r3, r0
 801aff4:	0018      	movs	r0, r3
 801aff6:	f7ff fe76 	bl	801ace6 <xtime>
 801affa:	0003      	movs	r3, r0
 801affc:	0018      	movs	r0, r3
 801affe:	f7ff fe72 	bl	801ace6 <xtime>
 801b002:	2308      	movs	r3, #8
 801b004:	001c      	movs	r4, r3
 801b006:	18fb      	adds	r3, r7, r3
 801b008:	781b      	ldrb	r3, [r3, #0]
 801b00a:	0018      	movs	r0, r3
 801b00c:	f7ff fe6b 	bl	801ace6 <xtime>
 801b010:	0023      	movs	r3, r4
 801b012:	001c      	movs	r4, r3
 801b014:	18fb      	adds	r3, r7, r3
 801b016:	781b      	ldrb	r3, [r3, #0]
 801b018:	0018      	movs	r0, r3
 801b01a:	f7ff fe64 	bl	801ace6 <xtime>
 801b01e:	0003      	movs	r3, r0
 801b020:	0018      	movs	r0, r3
 801b022:	f7ff fe60 	bl	801ace6 <xtime>
 801b026:	0023      	movs	r3, r4
 801b028:	18fb      	adds	r3, r7, r3
 801b02a:	781b      	ldrb	r3, [r3, #0]
 801b02c:	0018      	movs	r0, r3
 801b02e:	f7ff fe5a 	bl	801ace6 <xtime>
 801b032:	0003      	movs	r3, r0
 801b034:	0018      	movs	r0, r3
 801b036:	f7ff fe56 	bl	801ace6 <xtime>
 801b03a:	0003      	movs	r3, r0
 801b03c:	0018      	movs	r0, r3
 801b03e:	f7ff fe52 	bl	801ace6 <xtime>
 801b042:	0003      	movs	r3, r0
 801b044:	0018      	movs	r0, r3
 801b046:	f7ff fe4e 	bl	801ace6 <xtime>
 801b04a:	19bb      	adds	r3, r7, r6
 801b04c:	781b      	ldrb	r3, [r3, #0]
 801b04e:	0018      	movs	r0, r3
 801b050:	f7ff fe49 	bl	801ace6 <xtime>
 801b054:	0003      	movs	r3, r0
 801b056:	001c      	movs	r4, r3
 801b058:	19bb      	adds	r3, r7, r6
 801b05a:	781b      	ldrb	r3, [r3, #0]
 801b05c:	0018      	movs	r0, r3
 801b05e:	f7ff fe42 	bl	801ace6 <xtime>
 801b062:	0003      	movs	r3, r0
 801b064:	0018      	movs	r0, r3
 801b066:	f7ff fe3e 	bl	801ace6 <xtime>
 801b06a:	0003      	movs	r3, r0
 801b06c:	4063      	eors	r3, r4
 801b06e:	b2dc      	uxtb	r4, r3
 801b070:	19bb      	adds	r3, r7, r6
 801b072:	781b      	ldrb	r3, [r3, #0]
 801b074:	0018      	movs	r0, r3
 801b076:	f7ff fe36 	bl	801ace6 <xtime>
 801b07a:	0003      	movs	r3, r0
 801b07c:	0018      	movs	r0, r3
 801b07e:	f7ff fe32 	bl	801ace6 <xtime>
 801b082:	0003      	movs	r3, r0
 801b084:	0018      	movs	r0, r3
 801b086:	f7ff fe2e 	bl	801ace6 <xtime>
 801b08a:	0003      	movs	r3, r0
 801b08c:	4063      	eors	r3, r4
 801b08e:	b2dc      	uxtb	r4, r3
 801b090:	197b      	adds	r3, r7, r5
 801b092:	781b      	ldrb	r3, [r3, #0]
 801b094:	0018      	movs	r0, r3
 801b096:	f7ff fe26 	bl	801ace6 <xtime>
 801b09a:	0003      	movs	r3, r0
 801b09c:	001a      	movs	r2, r3
 801b09e:	0029      	movs	r1, r5
 801b0a0:	197b      	adds	r3, r7, r5
 801b0a2:	781b      	ldrb	r3, [r3, #0]
 801b0a4:	4053      	eors	r3, r2
 801b0a6:	b2dd      	uxtb	r5, r3
 801b0a8:	187b      	adds	r3, r7, r1
 801b0aa:	781b      	ldrb	r3, [r3, #0]
 801b0ac:	0018      	movs	r0, r3
 801b0ae:	f7ff fe1a 	bl	801ace6 <xtime>
 801b0b2:	0003      	movs	r3, r0
 801b0b4:	0018      	movs	r0, r3
 801b0b6:	f7ff fe16 	bl	801ace6 <xtime>
 801b0ba:	0003      	movs	r3, r0
 801b0bc:	0018      	movs	r0, r3
 801b0be:	f7ff fe12 	bl	801ace6 <xtime>
 801b0c2:	0003      	movs	r3, r0
 801b0c4:	406b      	eors	r3, r5
 801b0c6:	b2db      	uxtb	r3, r3
 801b0c8:	4063      	eors	r3, r4
 801b0ca:	b2dc      	uxtb	r4, r3
 801b0cc:	2309      	movs	r3, #9
 801b0ce:	001d      	movs	r5, r3
 801b0d0:	18fb      	adds	r3, r7, r3
 801b0d2:	781b      	ldrb	r3, [r3, #0]
 801b0d4:	0018      	movs	r0, r3
 801b0d6:	f7ff fe06 	bl	801ace6 <xtime>
 801b0da:	0003      	movs	r3, r0
 801b0dc:	0018      	movs	r0, r3
 801b0de:	f7ff fe02 	bl	801ace6 <xtime>
 801b0e2:	0003      	movs	r3, r0
 801b0e4:	001a      	movs	r2, r3
 801b0e6:	002b      	movs	r3, r5
 801b0e8:	0018      	movs	r0, r3
 801b0ea:	18fb      	adds	r3, r7, r3
 801b0ec:	781b      	ldrb	r3, [r3, #0]
 801b0ee:	4053      	eors	r3, r2
 801b0f0:	b2dd      	uxtb	r5, r3
 801b0f2:	0003      	movs	r3, r0
 801b0f4:	18fb      	adds	r3, r7, r3
 801b0f6:	781b      	ldrb	r3, [r3, #0]
 801b0f8:	0018      	movs	r0, r3
 801b0fa:	f7ff fdf4 	bl	801ace6 <xtime>
 801b0fe:	0003      	movs	r3, r0
 801b100:	0018      	movs	r0, r3
 801b102:	f7ff fdf0 	bl	801ace6 <xtime>
 801b106:	0003      	movs	r3, r0
 801b108:	0018      	movs	r0, r3
 801b10a:	f7ff fdec 	bl	801ace6 <xtime>
 801b10e:	0003      	movs	r3, r0
 801b110:	406b      	eors	r3, r5
 801b112:	b2db      	uxtb	r3, r3
 801b114:	4063      	eors	r3, r4
 801b116:	b2dc      	uxtb	r4, r3
 801b118:	2308      	movs	r3, #8
 801b11a:	001d      	movs	r5, r3
 801b11c:	18fb      	adds	r3, r7, r3
 801b11e:	781b      	ldrb	r3, [r3, #0]
 801b120:	0018      	movs	r0, r3
 801b122:	f7ff fde0 	bl	801ace6 <xtime>
 801b126:	0003      	movs	r3, r0
 801b128:	0018      	movs	r0, r3
 801b12a:	f7ff fddc 	bl	801ace6 <xtime>
 801b12e:	0003      	movs	r3, r0
 801b130:	0018      	movs	r0, r3
 801b132:	f7ff fdd8 	bl	801ace6 <xtime>
 801b136:	0003      	movs	r3, r0
 801b138:	001a      	movs	r2, r3
 801b13a:	002b      	movs	r3, r5
 801b13c:	18fb      	adds	r3, r7, r3
 801b13e:	781b      	ldrb	r3, [r3, #0]
 801b140:	4053      	eors	r3, r2
 801b142:	b2db      	uxtb	r3, r3
 801b144:	4063      	eors	r3, r4
 801b146:	b2d9      	uxtb	r1, r3
 801b148:	687b      	ldr	r3, [r7, #4]
 801b14a:	68fa      	ldr	r2, [r7, #12]
 801b14c:	0092      	lsls	r2, r2, #2
 801b14e:	54d1      	strb	r1, [r2, r3]
    (*state)[i][1] = Multiply(a, 0x09) ^ Multiply(b, 0x0e) ^ Multiply(c, 0x0b) ^ Multiply(d, 0x0d);
 801b150:	19bb      	adds	r3, r7, r6
 801b152:	781b      	ldrb	r3, [r3, #0]
 801b154:	0018      	movs	r0, r3
 801b156:	f7ff fdc6 	bl	801ace6 <xtime>
 801b15a:	19bb      	adds	r3, r7, r6
 801b15c:	781b      	ldrb	r3, [r3, #0]
 801b15e:	0018      	movs	r0, r3
 801b160:	f7ff fdc1 	bl	801ace6 <xtime>
 801b164:	0003      	movs	r3, r0
 801b166:	0018      	movs	r0, r3
 801b168:	f7ff fdbd 	bl	801ace6 <xtime>
 801b16c:	19bb      	adds	r3, r7, r6
 801b16e:	781b      	ldrb	r3, [r3, #0]
 801b170:	0018      	movs	r0, r3
 801b172:	f7ff fdb8 	bl	801ace6 <xtime>
 801b176:	0003      	movs	r3, r0
 801b178:	0018      	movs	r0, r3
 801b17a:	f7ff fdb4 	bl	801ace6 <xtime>
 801b17e:	0003      	movs	r3, r0
 801b180:	0018      	movs	r0, r3
 801b182:	f7ff fdb0 	bl	801ace6 <xtime>
 801b186:	0003      	movs	r3, r0
 801b188:	0018      	movs	r0, r3
 801b18a:	f7ff fdac 	bl	801ace6 <xtime>
 801b18e:	210a      	movs	r1, #10
 801b190:	000d      	movs	r5, r1
 801b192:	187b      	adds	r3, r7, r1
 801b194:	781b      	ldrb	r3, [r3, #0]
 801b196:	0018      	movs	r0, r3
 801b198:	f7ff fda5 	bl	801ace6 <xtime>
 801b19c:	0003      	movs	r3, r0
 801b19e:	0018      	movs	r0, r3
 801b1a0:	f7ff fda1 	bl	801ace6 <xtime>
 801b1a4:	0003      	movs	r3, r0
 801b1a6:	0018      	movs	r0, r3
 801b1a8:	f7ff fd9d 	bl	801ace6 <xtime>
 801b1ac:	0003      	movs	r3, r0
 801b1ae:	0018      	movs	r0, r3
 801b1b0:	f7ff fd99 	bl	801ace6 <xtime>
 801b1b4:	2409      	movs	r4, #9
 801b1b6:	193b      	adds	r3, r7, r4
 801b1b8:	781b      	ldrb	r3, [r3, #0]
 801b1ba:	0018      	movs	r0, r3
 801b1bc:	f7ff fd93 	bl	801ace6 <xtime>
 801b1c0:	0003      	movs	r3, r0
 801b1c2:	0018      	movs	r0, r3
 801b1c4:	f7ff fd8f 	bl	801ace6 <xtime>
 801b1c8:	193b      	adds	r3, r7, r4
 801b1ca:	781b      	ldrb	r3, [r3, #0]
 801b1cc:	0018      	movs	r0, r3
 801b1ce:	f7ff fd8a 	bl	801ace6 <xtime>
 801b1d2:	0003      	movs	r3, r0
 801b1d4:	0018      	movs	r0, r3
 801b1d6:	f7ff fd86 	bl	801ace6 <xtime>
 801b1da:	0003      	movs	r3, r0
 801b1dc:	0018      	movs	r0, r3
 801b1de:	f7ff fd82 	bl	801ace6 <xtime>
 801b1e2:	0003      	movs	r3, r0
 801b1e4:	0018      	movs	r0, r3
 801b1e6:	f7ff fd7e 	bl	801ace6 <xtime>
 801b1ea:	2308      	movs	r3, #8
 801b1ec:	001c      	movs	r4, r3
 801b1ee:	18fb      	adds	r3, r7, r3
 801b1f0:	781b      	ldrb	r3, [r3, #0]
 801b1f2:	0018      	movs	r0, r3
 801b1f4:	f7ff fd77 	bl	801ace6 <xtime>
 801b1f8:	0023      	movs	r3, r4
 801b1fa:	18fb      	adds	r3, r7, r3
 801b1fc:	781b      	ldrb	r3, [r3, #0]
 801b1fe:	0018      	movs	r0, r3
 801b200:	f7ff fd71 	bl	801ace6 <xtime>
 801b204:	0003      	movs	r3, r0
 801b206:	0018      	movs	r0, r3
 801b208:	f7ff fd6d 	bl	801ace6 <xtime>
 801b20c:	0003      	movs	r3, r0
 801b20e:	0018      	movs	r0, r3
 801b210:	f7ff fd69 	bl	801ace6 <xtime>
 801b214:	0003      	movs	r3, r0
 801b216:	0018      	movs	r0, r3
 801b218:	f7ff fd65 	bl	801ace6 <xtime>
 801b21c:	19bb      	adds	r3, r7, r6
 801b21e:	781b      	ldrb	r3, [r3, #0]
 801b220:	0018      	movs	r0, r3
 801b222:	f7ff fd60 	bl	801ace6 <xtime>
 801b226:	0003      	movs	r3, r0
 801b228:	0018      	movs	r0, r3
 801b22a:	f7ff fd5c 	bl	801ace6 <xtime>
 801b22e:	0003      	movs	r3, r0
 801b230:	0018      	movs	r0, r3
 801b232:	f7ff fd58 	bl	801ace6 <xtime>
 801b236:	0003      	movs	r3, r0
 801b238:	001a      	movs	r2, r3
 801b23a:	19bb      	adds	r3, r7, r6
 801b23c:	781b      	ldrb	r3, [r3, #0]
 801b23e:	4053      	eors	r3, r2
 801b240:	b2dc      	uxtb	r4, r3
 801b242:	197b      	adds	r3, r7, r5
 801b244:	781b      	ldrb	r3, [r3, #0]
 801b246:	0018      	movs	r0, r3
 801b248:	f7ff fd4d 	bl	801ace6 <xtime>
 801b24c:	0003      	movs	r3, r0
 801b24e:	001d      	movs	r5, r3
 801b250:	230a      	movs	r3, #10
 801b252:	18fb      	adds	r3, r7, r3
 801b254:	781b      	ldrb	r3, [r3, #0]
 801b256:	0018      	movs	r0, r3
 801b258:	f7ff fd45 	bl	801ace6 <xtime>
 801b25c:	0003      	movs	r3, r0
 801b25e:	0018      	movs	r0, r3
 801b260:	f7ff fd41 	bl	801ace6 <xtime>
 801b264:	0003      	movs	r3, r0
 801b266:	406b      	eors	r3, r5
 801b268:	b2dd      	uxtb	r5, r3
 801b26a:	230a      	movs	r3, #10
 801b26c:	18fb      	adds	r3, r7, r3
 801b26e:	781b      	ldrb	r3, [r3, #0]
 801b270:	0018      	movs	r0, r3
 801b272:	f7ff fd38 	bl	801ace6 <xtime>
 801b276:	0003      	movs	r3, r0
 801b278:	0018      	movs	r0, r3
 801b27a:	f7ff fd34 	bl	801ace6 <xtime>
 801b27e:	0003      	movs	r3, r0
 801b280:	0018      	movs	r0, r3
 801b282:	f7ff fd30 	bl	801ace6 <xtime>
 801b286:	0003      	movs	r3, r0
 801b288:	406b      	eors	r3, r5
 801b28a:	b2db      	uxtb	r3, r3
 801b28c:	4063      	eors	r3, r4
 801b28e:	b2dc      	uxtb	r4, r3
 801b290:	2209      	movs	r2, #9
 801b292:	0015      	movs	r5, r2
 801b294:	18bb      	adds	r3, r7, r2
 801b296:	781b      	ldrb	r3, [r3, #0]
 801b298:	0018      	movs	r0, r3
 801b29a:	f7ff fd24 	bl	801ace6 <xtime>
 801b29e:	0003      	movs	r3, r0
 801b2a0:	001a      	movs	r2, r3
 801b2a2:	0029      	movs	r1, r5
 801b2a4:	187b      	adds	r3, r7, r1
 801b2a6:	781b      	ldrb	r3, [r3, #0]
 801b2a8:	4053      	eors	r3, r2
 801b2aa:	b2dd      	uxtb	r5, r3
 801b2ac:	187b      	adds	r3, r7, r1
 801b2ae:	781b      	ldrb	r3, [r3, #0]
 801b2b0:	0018      	movs	r0, r3
 801b2b2:	f7ff fd18 	bl	801ace6 <xtime>
 801b2b6:	0003      	movs	r3, r0
 801b2b8:	0018      	movs	r0, r3
 801b2ba:	f7ff fd14 	bl	801ace6 <xtime>
 801b2be:	0003      	movs	r3, r0
 801b2c0:	0018      	movs	r0, r3
 801b2c2:	f7ff fd10 	bl	801ace6 <xtime>
 801b2c6:	0003      	movs	r3, r0
 801b2c8:	406b      	eors	r3, r5
 801b2ca:	b2db      	uxtb	r3, r3
 801b2cc:	4063      	eors	r3, r4
 801b2ce:	b2dc      	uxtb	r4, r3
 801b2d0:	2208      	movs	r2, #8
 801b2d2:	0015      	movs	r5, r2
 801b2d4:	18bb      	adds	r3, r7, r2
 801b2d6:	781b      	ldrb	r3, [r3, #0]
 801b2d8:	0018      	movs	r0, r3
 801b2da:	f7ff fd04 	bl	801ace6 <xtime>
 801b2de:	0003      	movs	r3, r0
 801b2e0:	0018      	movs	r0, r3
 801b2e2:	f7ff fd00 	bl	801ace6 <xtime>
 801b2e6:	0003      	movs	r3, r0
 801b2e8:	001a      	movs	r2, r3
 801b2ea:	0028      	movs	r0, r5
 801b2ec:	183b      	adds	r3, r7, r0
 801b2ee:	781b      	ldrb	r3, [r3, #0]
 801b2f0:	4053      	eors	r3, r2
 801b2f2:	b2dd      	uxtb	r5, r3
 801b2f4:	0002      	movs	r2, r0
 801b2f6:	18bb      	adds	r3, r7, r2
 801b2f8:	781b      	ldrb	r3, [r3, #0]
 801b2fa:	0018      	movs	r0, r3
 801b2fc:	f7ff fcf3 	bl	801ace6 <xtime>
 801b300:	0003      	movs	r3, r0
 801b302:	0018      	movs	r0, r3
 801b304:	f7ff fcef 	bl	801ace6 <xtime>
 801b308:	0003      	movs	r3, r0
 801b30a:	0018      	movs	r0, r3
 801b30c:	f7ff fceb 	bl	801ace6 <xtime>
 801b310:	0003      	movs	r3, r0
 801b312:	406b      	eors	r3, r5
 801b314:	b2db      	uxtb	r3, r3
 801b316:	4063      	eors	r3, r4
 801b318:	b2d9      	uxtb	r1, r3
 801b31a:	687a      	ldr	r2, [r7, #4]
 801b31c:	68fb      	ldr	r3, [r7, #12]
 801b31e:	009b      	lsls	r3, r3, #2
 801b320:	18d3      	adds	r3, r2, r3
 801b322:	3301      	adds	r3, #1
 801b324:	1c0a      	adds	r2, r1, #0
 801b326:	701a      	strb	r2, [r3, #0]
    (*state)[i][2] = Multiply(a, 0x0d) ^ Multiply(b, 0x09) ^ Multiply(c, 0x0e) ^ Multiply(d, 0x0b);
 801b328:	19bb      	adds	r3, r7, r6
 801b32a:	781b      	ldrb	r3, [r3, #0]
 801b32c:	0018      	movs	r0, r3
 801b32e:	f7ff fcda 	bl	801ace6 <xtime>
 801b332:	19bb      	adds	r3, r7, r6
 801b334:	781b      	ldrb	r3, [r3, #0]
 801b336:	0018      	movs	r0, r3
 801b338:	f7ff fcd5 	bl	801ace6 <xtime>
 801b33c:	0003      	movs	r3, r0
 801b33e:	0018      	movs	r0, r3
 801b340:	f7ff fcd1 	bl	801ace6 <xtime>
 801b344:	0003      	movs	r3, r0
 801b346:	0018      	movs	r0, r3
 801b348:	f7ff fccd 	bl	801ace6 <xtime>
 801b34c:	0003      	movs	r3, r0
 801b34e:	0018      	movs	r0, r3
 801b350:	f7ff fcc9 	bl	801ace6 <xtime>
 801b354:	250a      	movs	r5, #10
 801b356:	197b      	adds	r3, r7, r5
 801b358:	781b      	ldrb	r3, [r3, #0]
 801b35a:	0018      	movs	r0, r3
 801b35c:	f7ff fcc3 	bl	801ace6 <xtime>
 801b360:	197b      	adds	r3, r7, r5
 801b362:	781b      	ldrb	r3, [r3, #0]
 801b364:	0018      	movs	r0, r3
 801b366:	f7ff fcbe 	bl	801ace6 <xtime>
 801b36a:	0003      	movs	r3, r0
 801b36c:	0018      	movs	r0, r3
 801b36e:	f7ff fcba 	bl	801ace6 <xtime>
 801b372:	197b      	adds	r3, r7, r5
 801b374:	781b      	ldrb	r3, [r3, #0]
 801b376:	0018      	movs	r0, r3
 801b378:	f7ff fcb5 	bl	801ace6 <xtime>
 801b37c:	0003      	movs	r3, r0
 801b37e:	0018      	movs	r0, r3
 801b380:	f7ff fcb1 	bl	801ace6 <xtime>
 801b384:	0003      	movs	r3, r0
 801b386:	0018      	movs	r0, r3
 801b388:	f7ff fcad 	bl	801ace6 <xtime>
 801b38c:	0003      	movs	r3, r0
 801b38e:	0018      	movs	r0, r3
 801b390:	f7ff fca9 	bl	801ace6 <xtime>
 801b394:	2109      	movs	r1, #9
 801b396:	187b      	adds	r3, r7, r1
 801b398:	781b      	ldrb	r3, [r3, #0]
 801b39a:	0018      	movs	r0, r3
 801b39c:	f7ff fca3 	bl	801ace6 <xtime>
 801b3a0:	0003      	movs	r3, r0
 801b3a2:	0018      	movs	r0, r3
 801b3a4:	f7ff fc9f 	bl	801ace6 <xtime>
 801b3a8:	0003      	movs	r3, r0
 801b3aa:	0018      	movs	r0, r3
 801b3ac:	f7ff fc9b 	bl	801ace6 <xtime>
 801b3b0:	0003      	movs	r3, r0
 801b3b2:	0018      	movs	r0, r3
 801b3b4:	f7ff fc97 	bl	801ace6 <xtime>
 801b3b8:	2408      	movs	r4, #8
 801b3ba:	193b      	adds	r3, r7, r4
 801b3bc:	781b      	ldrb	r3, [r3, #0]
 801b3be:	0018      	movs	r0, r3
 801b3c0:	f7ff fc91 	bl	801ace6 <xtime>
 801b3c4:	0003      	movs	r3, r0
 801b3c6:	0018      	movs	r0, r3
 801b3c8:	f7ff fc8d 	bl	801ace6 <xtime>
 801b3cc:	193b      	adds	r3, r7, r4
 801b3ce:	781b      	ldrb	r3, [r3, #0]
 801b3d0:	0018      	movs	r0, r3
 801b3d2:	f7ff fc88 	bl	801ace6 <xtime>
 801b3d6:	0003      	movs	r3, r0
 801b3d8:	0018      	movs	r0, r3
 801b3da:	f7ff fc84 	bl	801ace6 <xtime>
 801b3de:	0003      	movs	r3, r0
 801b3e0:	0018      	movs	r0, r3
 801b3e2:	f7ff fc80 	bl	801ace6 <xtime>
 801b3e6:	0003      	movs	r3, r0
 801b3e8:	0018      	movs	r0, r3
 801b3ea:	f7ff fc7c 	bl	801ace6 <xtime>
 801b3ee:	19bb      	adds	r3, r7, r6
 801b3f0:	781b      	ldrb	r3, [r3, #0]
 801b3f2:	0018      	movs	r0, r3
 801b3f4:	f7ff fc77 	bl	801ace6 <xtime>
 801b3f8:	0003      	movs	r3, r0
 801b3fa:	0018      	movs	r0, r3
 801b3fc:	f7ff fc73 	bl	801ace6 <xtime>
 801b400:	0003      	movs	r3, r0
 801b402:	001a      	movs	r2, r3
 801b404:	19bb      	adds	r3, r7, r6
 801b406:	781b      	ldrb	r3, [r3, #0]
 801b408:	4053      	eors	r3, r2
 801b40a:	b2dc      	uxtb	r4, r3
 801b40c:	19bb      	adds	r3, r7, r6
 801b40e:	781b      	ldrb	r3, [r3, #0]
 801b410:	0018      	movs	r0, r3
 801b412:	f7ff fc68 	bl	801ace6 <xtime>
 801b416:	0003      	movs	r3, r0
 801b418:	0018      	movs	r0, r3
 801b41a:	f7ff fc64 	bl	801ace6 <xtime>
 801b41e:	0003      	movs	r3, r0
 801b420:	0018      	movs	r0, r3
 801b422:	f7ff fc60 	bl	801ace6 <xtime>
 801b426:	0003      	movs	r3, r0
 801b428:	4063      	eors	r3, r4
 801b42a:	b2dc      	uxtb	r4, r3
 801b42c:	197b      	adds	r3, r7, r5
 801b42e:	781b      	ldrb	r3, [r3, #0]
 801b430:	0018      	movs	r0, r3
 801b432:	f7ff fc58 	bl	801ace6 <xtime>
 801b436:	0003      	movs	r3, r0
 801b438:	0018      	movs	r0, r3
 801b43a:	f7ff fc54 	bl	801ace6 <xtime>
 801b43e:	0003      	movs	r3, r0
 801b440:	0018      	movs	r0, r3
 801b442:	f7ff fc50 	bl	801ace6 <xtime>
 801b446:	0003      	movs	r3, r0
 801b448:	001a      	movs	r2, r3
 801b44a:	197b      	adds	r3, r7, r5
 801b44c:	781b      	ldrb	r3, [r3, #0]
 801b44e:	4053      	eors	r3, r2
 801b450:	b2db      	uxtb	r3, r3
 801b452:	4063      	eors	r3, r4
 801b454:	b2dc      	uxtb	r4, r3
 801b456:	2109      	movs	r1, #9
 801b458:	187b      	adds	r3, r7, r1
 801b45a:	781b      	ldrb	r3, [r3, #0]
 801b45c:	0018      	movs	r0, r3
 801b45e:	f7ff fc42 	bl	801ace6 <xtime>
 801b462:	0003      	movs	r3, r0
 801b464:	001d      	movs	r5, r3
 801b466:	2109      	movs	r1, #9
 801b468:	187b      	adds	r3, r7, r1
 801b46a:	781b      	ldrb	r3, [r3, #0]
 801b46c:	0018      	movs	r0, r3
 801b46e:	f7ff fc3a 	bl	801ace6 <xtime>
 801b472:	0003      	movs	r3, r0
 801b474:	0018      	movs	r0, r3
 801b476:	f7ff fc36 	bl	801ace6 <xtime>
 801b47a:	0003      	movs	r3, r0
 801b47c:	406b      	eors	r3, r5
 801b47e:	b2dd      	uxtb	r5, r3
 801b480:	2109      	movs	r1, #9
 801b482:	187b      	adds	r3, r7, r1
 801b484:	781b      	ldrb	r3, [r3, #0]
 801b486:	0018      	movs	r0, r3
 801b488:	f7ff fc2d 	bl	801ace6 <xtime>
 801b48c:	0003      	movs	r3, r0
 801b48e:	0018      	movs	r0, r3
 801b490:	f7ff fc29 	bl	801ace6 <xtime>
 801b494:	0003      	movs	r3, r0
 801b496:	0018      	movs	r0, r3
 801b498:	f7ff fc25 	bl	801ace6 <xtime>
 801b49c:	0003      	movs	r3, r0
 801b49e:	406b      	eors	r3, r5
 801b4a0:	b2db      	uxtb	r3, r3
 801b4a2:	4063      	eors	r3, r4
 801b4a4:	b2dc      	uxtb	r4, r3
 801b4a6:	2308      	movs	r3, #8
 801b4a8:	001d      	movs	r5, r3
 801b4aa:	18fb      	adds	r3, r7, r3
 801b4ac:	781b      	ldrb	r3, [r3, #0]
 801b4ae:	0018      	movs	r0, r3
 801b4b0:	f7ff fc19 	bl	801ace6 <xtime>
 801b4b4:	0003      	movs	r3, r0
 801b4b6:	001a      	movs	r2, r3
 801b4b8:	0028      	movs	r0, r5
 801b4ba:	183b      	adds	r3, r7, r0
 801b4bc:	781b      	ldrb	r3, [r3, #0]
 801b4be:	4053      	eors	r3, r2
 801b4c0:	b2dd      	uxtb	r5, r3
 801b4c2:	0003      	movs	r3, r0
 801b4c4:	18fb      	adds	r3, r7, r3
 801b4c6:	781b      	ldrb	r3, [r3, #0]
 801b4c8:	0018      	movs	r0, r3
 801b4ca:	f7ff fc0c 	bl	801ace6 <xtime>
 801b4ce:	0003      	movs	r3, r0
 801b4d0:	0018      	movs	r0, r3
 801b4d2:	f7ff fc08 	bl	801ace6 <xtime>
 801b4d6:	0003      	movs	r3, r0
 801b4d8:	0018      	movs	r0, r3
 801b4da:	f7ff fc04 	bl	801ace6 <xtime>
 801b4de:	0003      	movs	r3, r0
 801b4e0:	406b      	eors	r3, r5
 801b4e2:	b2db      	uxtb	r3, r3
 801b4e4:	4063      	eors	r3, r4
 801b4e6:	b2d9      	uxtb	r1, r3
 801b4e8:	687a      	ldr	r2, [r7, #4]
 801b4ea:	68fb      	ldr	r3, [r7, #12]
 801b4ec:	009b      	lsls	r3, r3, #2
 801b4ee:	18d3      	adds	r3, r2, r3
 801b4f0:	3302      	adds	r3, #2
 801b4f2:	1c0a      	adds	r2, r1, #0
 801b4f4:	701a      	strb	r2, [r3, #0]
    (*state)[i][3] = Multiply(a, 0x0b) ^ Multiply(b, 0x0d) ^ Multiply(c, 0x09) ^ Multiply(d, 0x0e);
 801b4f6:	19bb      	adds	r3, r7, r6
 801b4f8:	781b      	ldrb	r3, [r3, #0]
 801b4fa:	0018      	movs	r0, r3
 801b4fc:	f7ff fbf3 	bl	801ace6 <xtime>
 801b500:	0003      	movs	r3, r0
 801b502:	0018      	movs	r0, r3
 801b504:	f7ff fbef 	bl	801ace6 <xtime>
 801b508:	19bb      	adds	r3, r7, r6
 801b50a:	781b      	ldrb	r3, [r3, #0]
 801b50c:	0018      	movs	r0, r3
 801b50e:	f7ff fbea 	bl	801ace6 <xtime>
 801b512:	0003      	movs	r3, r0
 801b514:	0018      	movs	r0, r3
 801b516:	f7ff fbe6 	bl	801ace6 <xtime>
 801b51a:	0003      	movs	r3, r0
 801b51c:	0018      	movs	r0, r3
 801b51e:	f7ff fbe2 	bl	801ace6 <xtime>
 801b522:	0003      	movs	r3, r0
 801b524:	0018      	movs	r0, r3
 801b526:	f7ff fbde 	bl	801ace6 <xtime>
 801b52a:	250a      	movs	r5, #10
 801b52c:	197b      	adds	r3, r7, r5
 801b52e:	781b      	ldrb	r3, [r3, #0]
 801b530:	0018      	movs	r0, r3
 801b532:	f7ff fbd8 	bl	801ace6 <xtime>
 801b536:	197b      	adds	r3, r7, r5
 801b538:	781b      	ldrb	r3, [r3, #0]
 801b53a:	0018      	movs	r0, r3
 801b53c:	f7ff fbd3 	bl	801ace6 <xtime>
 801b540:	0003      	movs	r3, r0
 801b542:	0018      	movs	r0, r3
 801b544:	f7ff fbcf 	bl	801ace6 <xtime>
 801b548:	0003      	movs	r3, r0
 801b54a:	0018      	movs	r0, r3
 801b54c:	f7ff fbcb 	bl	801ace6 <xtime>
 801b550:	0003      	movs	r3, r0
 801b552:	0018      	movs	r0, r3
 801b554:	f7ff fbc7 	bl	801ace6 <xtime>
 801b558:	2109      	movs	r1, #9
 801b55a:	000c      	movs	r4, r1
 801b55c:	187b      	adds	r3, r7, r1
 801b55e:	781b      	ldrb	r3, [r3, #0]
 801b560:	0018      	movs	r0, r3
 801b562:	f7ff fbc0 	bl	801ace6 <xtime>
 801b566:	193b      	adds	r3, r7, r4
 801b568:	781b      	ldrb	r3, [r3, #0]
 801b56a:	0018      	movs	r0, r3
 801b56c:	f7ff fbbb 	bl	801ace6 <xtime>
 801b570:	0003      	movs	r3, r0
 801b572:	0018      	movs	r0, r3
 801b574:	f7ff fbb7 	bl	801ace6 <xtime>
 801b578:	193b      	adds	r3, r7, r4
 801b57a:	781b      	ldrb	r3, [r3, #0]
 801b57c:	0018      	movs	r0, r3
 801b57e:	f7ff fbb2 	bl	801ace6 <xtime>
 801b582:	0003      	movs	r3, r0
 801b584:	0018      	movs	r0, r3
 801b586:	f7ff fbae 	bl	801ace6 <xtime>
 801b58a:	0003      	movs	r3, r0
 801b58c:	0018      	movs	r0, r3
 801b58e:	f7ff fbaa 	bl	801ace6 <xtime>
 801b592:	0003      	movs	r3, r0
 801b594:	0018      	movs	r0, r3
 801b596:	f7ff fba6 	bl	801ace6 <xtime>
 801b59a:	2308      	movs	r3, #8
 801b59c:	18fb      	adds	r3, r7, r3
 801b59e:	781b      	ldrb	r3, [r3, #0]
 801b5a0:	0018      	movs	r0, r3
 801b5a2:	f7ff fba0 	bl	801ace6 <xtime>
 801b5a6:	0003      	movs	r3, r0
 801b5a8:	0018      	movs	r0, r3
 801b5aa:	f7ff fb9c 	bl	801ace6 <xtime>
 801b5ae:	0003      	movs	r3, r0
 801b5b0:	0018      	movs	r0, r3
 801b5b2:	f7ff fb98 	bl	801ace6 <xtime>
 801b5b6:	0003      	movs	r3, r0
 801b5b8:	0018      	movs	r0, r3
 801b5ba:	f7ff fb94 	bl	801ace6 <xtime>
 801b5be:	19bb      	adds	r3, r7, r6
 801b5c0:	781b      	ldrb	r3, [r3, #0]
 801b5c2:	0018      	movs	r0, r3
 801b5c4:	f7ff fb8f 	bl	801ace6 <xtime>
 801b5c8:	0003      	movs	r3, r0
 801b5ca:	001a      	movs	r2, r3
 801b5cc:	19bb      	adds	r3, r7, r6
 801b5ce:	781b      	ldrb	r3, [r3, #0]
 801b5d0:	4053      	eors	r3, r2
 801b5d2:	b2dc      	uxtb	r4, r3
 801b5d4:	19bb      	adds	r3, r7, r6
 801b5d6:	781b      	ldrb	r3, [r3, #0]
 801b5d8:	0018      	movs	r0, r3
 801b5da:	f7ff fb84 	bl	801ace6 <xtime>
 801b5de:	0003      	movs	r3, r0
 801b5e0:	0018      	movs	r0, r3
 801b5e2:	f7ff fb80 	bl	801ace6 <xtime>
 801b5e6:	0003      	movs	r3, r0
 801b5e8:	0018      	movs	r0, r3
 801b5ea:	f7ff fb7c 	bl	801ace6 <xtime>
 801b5ee:	0003      	movs	r3, r0
 801b5f0:	4063      	eors	r3, r4
 801b5f2:	b2dc      	uxtb	r4, r3
 801b5f4:	197b      	adds	r3, r7, r5
 801b5f6:	781b      	ldrb	r3, [r3, #0]
 801b5f8:	0018      	movs	r0, r3
 801b5fa:	f7ff fb74 	bl	801ace6 <xtime>
 801b5fe:	0003      	movs	r3, r0
 801b600:	0018      	movs	r0, r3
 801b602:	f7ff fb70 	bl	801ace6 <xtime>
 801b606:	0003      	movs	r3, r0
 801b608:	001a      	movs	r2, r3
 801b60a:	0029      	movs	r1, r5
 801b60c:	197b      	adds	r3, r7, r5
 801b60e:	781b      	ldrb	r3, [r3, #0]
 801b610:	4053      	eors	r3, r2
 801b612:	b2dd      	uxtb	r5, r3
 801b614:	187b      	adds	r3, r7, r1
 801b616:	781b      	ldrb	r3, [r3, #0]
 801b618:	0018      	movs	r0, r3
 801b61a:	f7ff fb64 	bl	801ace6 <xtime>
 801b61e:	0003      	movs	r3, r0
 801b620:	0018      	movs	r0, r3
 801b622:	f7ff fb60 	bl	801ace6 <xtime>
 801b626:	0003      	movs	r3, r0
 801b628:	0018      	movs	r0, r3
 801b62a:	f7ff fb5c 	bl	801ace6 <xtime>
 801b62e:	0003      	movs	r3, r0
 801b630:	406b      	eors	r3, r5
 801b632:	b2db      	uxtb	r3, r3
 801b634:	4063      	eors	r3, r4
 801b636:	b2dc      	uxtb	r4, r3
 801b638:	2509      	movs	r5, #9
 801b63a:	197b      	adds	r3, r7, r5
 801b63c:	781b      	ldrb	r3, [r3, #0]
 801b63e:	0018      	movs	r0, r3
 801b640:	f7ff fb51 	bl	801ace6 <xtime>
 801b644:	0003      	movs	r3, r0
 801b646:	0018      	movs	r0, r3
 801b648:	f7ff fb4d 	bl	801ace6 <xtime>
 801b64c:	0003      	movs	r3, r0
 801b64e:	0018      	movs	r0, r3
 801b650:	f7ff fb49 	bl	801ace6 <xtime>
 801b654:	0003      	movs	r3, r0
 801b656:	001a      	movs	r2, r3
 801b658:	197b      	adds	r3, r7, r5
 801b65a:	781b      	ldrb	r3, [r3, #0]
 801b65c:	4053      	eors	r3, r2
 801b65e:	b2db      	uxtb	r3, r3
 801b660:	4063      	eors	r3, r4
 801b662:	b2dc      	uxtb	r4, r3
 801b664:	2608      	movs	r6, #8
 801b666:	19bb      	adds	r3, r7, r6
 801b668:	781b      	ldrb	r3, [r3, #0]
 801b66a:	0018      	movs	r0, r3
 801b66c:	f7ff fb3b 	bl	801ace6 <xtime>
 801b670:	0003      	movs	r3, r0
 801b672:	001d      	movs	r5, r3
 801b674:	19bb      	adds	r3, r7, r6
 801b676:	781b      	ldrb	r3, [r3, #0]
 801b678:	0018      	movs	r0, r3
 801b67a:	f7ff fb34 	bl	801ace6 <xtime>
 801b67e:	0003      	movs	r3, r0
 801b680:	0018      	movs	r0, r3
 801b682:	f7ff fb30 	bl	801ace6 <xtime>
 801b686:	0003      	movs	r3, r0
 801b688:	406b      	eors	r3, r5
 801b68a:	b2dd      	uxtb	r5, r3
 801b68c:	19bb      	adds	r3, r7, r6
 801b68e:	781b      	ldrb	r3, [r3, #0]
 801b690:	0018      	movs	r0, r3
 801b692:	f7ff fb28 	bl	801ace6 <xtime>
 801b696:	0003      	movs	r3, r0
 801b698:	0018      	movs	r0, r3
 801b69a:	f7ff fb24 	bl	801ace6 <xtime>
 801b69e:	0003      	movs	r3, r0
 801b6a0:	0018      	movs	r0, r3
 801b6a2:	f7ff fb20 	bl	801ace6 <xtime>
 801b6a6:	0003      	movs	r3, r0
 801b6a8:	406b      	eors	r3, r5
 801b6aa:	b2db      	uxtb	r3, r3
 801b6ac:	4063      	eors	r3, r4
 801b6ae:	b2d9      	uxtb	r1, r3
 801b6b0:	687a      	ldr	r2, [r7, #4]
 801b6b2:	68fb      	ldr	r3, [r7, #12]
 801b6b4:	009b      	lsls	r3, r3, #2
 801b6b6:	18d3      	adds	r3, r2, r3
 801b6b8:	3303      	adds	r3, #3
 801b6ba:	1c0a      	adds	r2, r1, #0
 801b6bc:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < 4; ++i)
 801b6be:	68fb      	ldr	r3, [r7, #12]
 801b6c0:	3301      	adds	r3, #1
 801b6c2:	60fb      	str	r3, [r7, #12]
 801b6c4:	68fb      	ldr	r3, [r7, #12]
 801b6c6:	2b03      	cmp	r3, #3
 801b6c8:	dc00      	bgt.n	801b6cc <InvMixColumns+0x79e>
 801b6ca:	e437      	b.n	801af3c <InvMixColumns+0xe>
  }
}
 801b6cc:	46c0      	nop			; (mov r8, r8)
 801b6ce:	46bd      	mov	sp, r7
 801b6d0:	b005      	add	sp, #20
 801b6d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801b6d4 <InvSubBytes>:


// The SubBytes Function Substitutes the values in the
// state matrix with values in an S-box.
static void InvSubBytes(state_t* state)
{
 801b6d4:	b5b0      	push	{r4, r5, r7, lr}
 801b6d6:	b084      	sub	sp, #16
 801b6d8:	af00      	add	r7, sp, #0
 801b6da:	6078      	str	r0, [r7, #4]
  uint8_t i, j;
  for (i = 0; i < 4; ++i)
 801b6dc:	230f      	movs	r3, #15
 801b6de:	18fb      	adds	r3, r7, r3
 801b6e0:	2200      	movs	r2, #0
 801b6e2:	701a      	strb	r2, [r3, #0]
 801b6e4:	e02a      	b.n	801b73c <InvSubBytes+0x68>
  {
    for (j = 0; j < 4; ++j)
 801b6e6:	230e      	movs	r3, #14
 801b6e8:	18fb      	adds	r3, r7, r3
 801b6ea:	2200      	movs	r2, #0
 801b6ec:	701a      	strb	r2, [r3, #0]
 801b6ee:	e01a      	b.n	801b726 <InvSubBytes+0x52>
    {
      (*state)[j][i] = getSBoxInvert((*state)[j][i]);
 801b6f0:	240e      	movs	r4, #14
 801b6f2:	193b      	adds	r3, r7, r4
 801b6f4:	781a      	ldrb	r2, [r3, #0]
 801b6f6:	250f      	movs	r5, #15
 801b6f8:	197b      	adds	r3, r7, r5
 801b6fa:	781b      	ldrb	r3, [r3, #0]
 801b6fc:	6879      	ldr	r1, [r7, #4]
 801b6fe:	0092      	lsls	r2, r2, #2
 801b700:	188a      	adds	r2, r1, r2
 801b702:	5cd3      	ldrb	r3, [r2, r3]
 801b704:	0018      	movs	r0, r3
 801b706:	193b      	adds	r3, r7, r4
 801b708:	781a      	ldrb	r2, [r3, #0]
 801b70a:	197b      	adds	r3, r7, r5
 801b70c:	781b      	ldrb	r3, [r3, #0]
 801b70e:	4910      	ldr	r1, [pc, #64]	; (801b750 <InvSubBytes+0x7c>)
 801b710:	5c08      	ldrb	r0, [r1, r0]
 801b712:	6879      	ldr	r1, [r7, #4]
 801b714:	0092      	lsls	r2, r2, #2
 801b716:	188a      	adds	r2, r1, r2
 801b718:	1c01      	adds	r1, r0, #0
 801b71a:	54d1      	strb	r1, [r2, r3]
    for (j = 0; j < 4; ++j)
 801b71c:	193b      	adds	r3, r7, r4
 801b71e:	193a      	adds	r2, r7, r4
 801b720:	7812      	ldrb	r2, [r2, #0]
 801b722:	3201      	adds	r2, #1
 801b724:	701a      	strb	r2, [r3, #0]
 801b726:	230e      	movs	r3, #14
 801b728:	18fb      	adds	r3, r7, r3
 801b72a:	781b      	ldrb	r3, [r3, #0]
 801b72c:	2b03      	cmp	r3, #3
 801b72e:	d9df      	bls.n	801b6f0 <InvSubBytes+0x1c>
  for (i = 0; i < 4; ++i)
 801b730:	220f      	movs	r2, #15
 801b732:	18bb      	adds	r3, r7, r2
 801b734:	18ba      	adds	r2, r7, r2
 801b736:	7812      	ldrb	r2, [r2, #0]
 801b738:	3201      	adds	r2, #1
 801b73a:	701a      	strb	r2, [r3, #0]
 801b73c:	230f      	movs	r3, #15
 801b73e:	18fb      	adds	r3, r7, r3
 801b740:	781b      	ldrb	r3, [r3, #0]
 801b742:	2b03      	cmp	r3, #3
 801b744:	d9cf      	bls.n	801b6e6 <InvSubBytes+0x12>
    }
  }
}
 801b746:	46c0      	nop			; (mov r8, r8)
 801b748:	46bd      	mov	sp, r7
 801b74a:	b004      	add	sp, #16
 801b74c:	bdb0      	pop	{r4, r5, r7, pc}
 801b74e:	46c0      	nop			; (mov r8, r8)
 801b750:	08022114 	.word	0x08022114

0801b754 <InvShiftRows>:

static void InvShiftRows(state_t* state)
{
 801b754:	b580      	push	{r7, lr}
 801b756:	b084      	sub	sp, #16
 801b758:	af00      	add	r7, sp, #0
 801b75a:	6078      	str	r0, [r7, #4]
  uint8_t temp;

  // Rotate first row 1 columns to right
  temp = (*state)[3][1];
 801b75c:	210f      	movs	r1, #15
 801b75e:	187b      	adds	r3, r7, r1
 801b760:	687a      	ldr	r2, [r7, #4]
 801b762:	7b52      	ldrb	r2, [r2, #13]
 801b764:	701a      	strb	r2, [r3, #0]
  (*state)[3][1] = (*state)[2][1];
 801b766:	687b      	ldr	r3, [r7, #4]
 801b768:	7a5a      	ldrb	r2, [r3, #9]
 801b76a:	687b      	ldr	r3, [r7, #4]
 801b76c:	735a      	strb	r2, [r3, #13]
  (*state)[2][1] = (*state)[1][1];
 801b76e:	687b      	ldr	r3, [r7, #4]
 801b770:	795a      	ldrb	r2, [r3, #5]
 801b772:	687b      	ldr	r3, [r7, #4]
 801b774:	725a      	strb	r2, [r3, #9]
  (*state)[1][1] = (*state)[0][1];
 801b776:	687b      	ldr	r3, [r7, #4]
 801b778:	785a      	ldrb	r2, [r3, #1]
 801b77a:	687b      	ldr	r3, [r7, #4]
 801b77c:	715a      	strb	r2, [r3, #5]
  (*state)[0][1] = temp;
 801b77e:	687b      	ldr	r3, [r7, #4]
 801b780:	187a      	adds	r2, r7, r1
 801b782:	7812      	ldrb	r2, [r2, #0]
 801b784:	705a      	strb	r2, [r3, #1]

  // Rotate second row 2 columns to right
  temp = (*state)[0][2];
 801b786:	187b      	adds	r3, r7, r1
 801b788:	687a      	ldr	r2, [r7, #4]
 801b78a:	7892      	ldrb	r2, [r2, #2]
 801b78c:	701a      	strb	r2, [r3, #0]
  (*state)[0][2] = (*state)[2][2];
 801b78e:	687b      	ldr	r3, [r7, #4]
 801b790:	7a9a      	ldrb	r2, [r3, #10]
 801b792:	687b      	ldr	r3, [r7, #4]
 801b794:	709a      	strb	r2, [r3, #2]
  (*state)[2][2] = temp;
 801b796:	687b      	ldr	r3, [r7, #4]
 801b798:	187a      	adds	r2, r7, r1
 801b79a:	7812      	ldrb	r2, [r2, #0]
 801b79c:	729a      	strb	r2, [r3, #10]

  temp = (*state)[1][2];
 801b79e:	187b      	adds	r3, r7, r1
 801b7a0:	687a      	ldr	r2, [r7, #4]
 801b7a2:	7992      	ldrb	r2, [r2, #6]
 801b7a4:	701a      	strb	r2, [r3, #0]
  (*state)[1][2] = (*state)[3][2];
 801b7a6:	687b      	ldr	r3, [r7, #4]
 801b7a8:	7b9a      	ldrb	r2, [r3, #14]
 801b7aa:	687b      	ldr	r3, [r7, #4]
 801b7ac:	719a      	strb	r2, [r3, #6]
  (*state)[3][2] = temp;
 801b7ae:	687b      	ldr	r3, [r7, #4]
 801b7b0:	187a      	adds	r2, r7, r1
 801b7b2:	7812      	ldrb	r2, [r2, #0]
 801b7b4:	739a      	strb	r2, [r3, #14]

  // Rotate third row 3 columns to right
  temp = (*state)[0][3];
 801b7b6:	187b      	adds	r3, r7, r1
 801b7b8:	687a      	ldr	r2, [r7, #4]
 801b7ba:	78d2      	ldrb	r2, [r2, #3]
 801b7bc:	701a      	strb	r2, [r3, #0]
  (*state)[0][3] = (*state)[1][3];
 801b7be:	687b      	ldr	r3, [r7, #4]
 801b7c0:	79da      	ldrb	r2, [r3, #7]
 801b7c2:	687b      	ldr	r3, [r7, #4]
 801b7c4:	70da      	strb	r2, [r3, #3]
  (*state)[1][3] = (*state)[2][3];
 801b7c6:	687b      	ldr	r3, [r7, #4]
 801b7c8:	7ada      	ldrb	r2, [r3, #11]
 801b7ca:	687b      	ldr	r3, [r7, #4]
 801b7cc:	71da      	strb	r2, [r3, #7]
  (*state)[2][3] = (*state)[3][3];
 801b7ce:	687b      	ldr	r3, [r7, #4]
 801b7d0:	7bda      	ldrb	r2, [r3, #15]
 801b7d2:	687b      	ldr	r3, [r7, #4]
 801b7d4:	72da      	strb	r2, [r3, #11]
  (*state)[3][3] = temp;
 801b7d6:	687b      	ldr	r3, [r7, #4]
 801b7d8:	187a      	adds	r2, r7, r1
 801b7da:	7812      	ldrb	r2, [r2, #0]
 801b7dc:	73da      	strb	r2, [r3, #15]
}
 801b7de:	46c0      	nop			; (mov r8, r8)
 801b7e0:	46bd      	mov	sp, r7
 801b7e2:	b004      	add	sp, #16
 801b7e4:	bd80      	pop	{r7, pc}

0801b7e6 <Cipher>:


// Cipher is the main function that encrypts the PlainText.
static void Cipher(state_t* state, uint8_t* RoundKey)
{
 801b7e6:	b590      	push	{r4, r7, lr}
 801b7e8:	b085      	sub	sp, #20
 801b7ea:	af00      	add	r7, sp, #0
 801b7ec:	6078      	str	r0, [r7, #4]
 801b7ee:	6039      	str	r1, [r7, #0]
  uint8_t round = 0;
 801b7f0:	240f      	movs	r4, #15
 801b7f2:	193b      	adds	r3, r7, r4
 801b7f4:	2200      	movs	r2, #0
 801b7f6:	701a      	strb	r2, [r3, #0]

  // Add the First round key to the state before starting the rounds.
  AddRoundKey(0, state, RoundKey);
 801b7f8:	683a      	ldr	r2, [r7, #0]
 801b7fa:	687b      	ldr	r3, [r7, #4]
 801b7fc:	0019      	movs	r1, r3
 801b7fe:	2000      	movs	r0, #0
 801b800:	f7ff f997 	bl	801ab32 <AddRoundKey>

  // There will be Nr rounds.
  // The first Nr-1 rounds are identical.
  // These Nr-1 rounds are executed in the loop below.
  for (round = 1; round < Nr; ++round)
 801b804:	193b      	adds	r3, r7, r4
 801b806:	2201      	movs	r2, #1
 801b808:	701a      	strb	r2, [r3, #0]
 801b80a:	e018      	b.n	801b83e <Cipher+0x58>
  {
    SubBytes(state);
 801b80c:	687b      	ldr	r3, [r7, #4]
 801b80e:	0018      	movs	r0, r3
 801b810:	f7ff f9e0 	bl	801abd4 <SubBytes>
    ShiftRows(state);
 801b814:	687b      	ldr	r3, [r7, #4]
 801b816:	0018      	movs	r0, r3
 801b818:	f7ff fa1c 	bl	801ac54 <ShiftRows>
    MixColumns(state);
 801b81c:	687b      	ldr	r3, [r7, #4]
 801b81e:	0018      	movs	r0, r3
 801b820:	f7ff fa81 	bl	801ad26 <MixColumns>
    AddRoundKey(round, state, RoundKey);
 801b824:	683a      	ldr	r2, [r7, #0]
 801b826:	6879      	ldr	r1, [r7, #4]
 801b828:	240f      	movs	r4, #15
 801b82a:	193b      	adds	r3, r7, r4
 801b82c:	781b      	ldrb	r3, [r3, #0]
 801b82e:	0018      	movs	r0, r3
 801b830:	f7ff f97f 	bl	801ab32 <AddRoundKey>
  for (round = 1; round < Nr; ++round)
 801b834:	193b      	adds	r3, r7, r4
 801b836:	193a      	adds	r2, r7, r4
 801b838:	7812      	ldrb	r2, [r2, #0]
 801b83a:	3201      	adds	r2, #1
 801b83c:	701a      	strb	r2, [r3, #0]
 801b83e:	230f      	movs	r3, #15
 801b840:	18fb      	adds	r3, r7, r3
 801b842:	781b      	ldrb	r3, [r3, #0]
 801b844:	2b09      	cmp	r3, #9
 801b846:	d9e1      	bls.n	801b80c <Cipher+0x26>
  }

  // The last round is given below.
  // The MixColumns function is not here in the last round.
  SubBytes(state);
 801b848:	687b      	ldr	r3, [r7, #4]
 801b84a:	0018      	movs	r0, r3
 801b84c:	f7ff f9c2 	bl	801abd4 <SubBytes>
  ShiftRows(state);
 801b850:	687b      	ldr	r3, [r7, #4]
 801b852:	0018      	movs	r0, r3
 801b854:	f7ff f9fe 	bl	801ac54 <ShiftRows>
  AddRoundKey(Nr, state, RoundKey);
 801b858:	683a      	ldr	r2, [r7, #0]
 801b85a:	687b      	ldr	r3, [r7, #4]
 801b85c:	0019      	movs	r1, r3
 801b85e:	200a      	movs	r0, #10
 801b860:	f7ff f967 	bl	801ab32 <AddRoundKey>
}
 801b864:	46c0      	nop			; (mov r8, r8)
 801b866:	46bd      	mov	sp, r7
 801b868:	b005      	add	sp, #20
 801b86a:	bd90      	pop	{r4, r7, pc}

0801b86c <InvCipher>:

static void InvCipher(state_t* state,uint8_t* RoundKey)
{
 801b86c:	b590      	push	{r4, r7, lr}
 801b86e:	b085      	sub	sp, #20
 801b870:	af00      	add	r7, sp, #0
 801b872:	6078      	str	r0, [r7, #4]
 801b874:	6039      	str	r1, [r7, #0]
  uint8_t round = 0;
 801b876:	240f      	movs	r4, #15
 801b878:	193b      	adds	r3, r7, r4
 801b87a:	2200      	movs	r2, #0
 801b87c:	701a      	strb	r2, [r3, #0]

  // Add the First round key to the state before starting the rounds.
  AddRoundKey(Nr, state, RoundKey);
 801b87e:	683a      	ldr	r2, [r7, #0]
 801b880:	687b      	ldr	r3, [r7, #4]
 801b882:	0019      	movs	r1, r3
 801b884:	200a      	movs	r0, #10
 801b886:	f7ff f954 	bl	801ab32 <AddRoundKey>

  // There will be Nr rounds.
  // The first Nr-1 rounds are identical.
  // These Nr-1 rounds are executed in the loop below.
  for (round = (Nr - 1); round > 0; --round)
 801b88a:	193b      	adds	r3, r7, r4
 801b88c:	2209      	movs	r2, #9
 801b88e:	701a      	strb	r2, [r3, #0]
 801b890:	e018      	b.n	801b8c4 <InvCipher+0x58>
  {
    InvShiftRows(state);
 801b892:	687b      	ldr	r3, [r7, #4]
 801b894:	0018      	movs	r0, r3
 801b896:	f7ff ff5d 	bl	801b754 <InvShiftRows>
    InvSubBytes(state);
 801b89a:	687b      	ldr	r3, [r7, #4]
 801b89c:	0018      	movs	r0, r3
 801b89e:	f7ff ff19 	bl	801b6d4 <InvSubBytes>
    AddRoundKey(round, state, RoundKey);
 801b8a2:	683a      	ldr	r2, [r7, #0]
 801b8a4:	6879      	ldr	r1, [r7, #4]
 801b8a6:	240f      	movs	r4, #15
 801b8a8:	193b      	adds	r3, r7, r4
 801b8aa:	781b      	ldrb	r3, [r3, #0]
 801b8ac:	0018      	movs	r0, r3
 801b8ae:	f7ff f940 	bl	801ab32 <AddRoundKey>
    InvMixColumns(state);
 801b8b2:	687b      	ldr	r3, [r7, #4]
 801b8b4:	0018      	movs	r0, r3
 801b8b6:	f7ff fb3a 	bl	801af2e <InvMixColumns>
  for (round = (Nr - 1); round > 0; --round)
 801b8ba:	193b      	adds	r3, r7, r4
 801b8bc:	193a      	adds	r2, r7, r4
 801b8be:	7812      	ldrb	r2, [r2, #0]
 801b8c0:	3a01      	subs	r2, #1
 801b8c2:	701a      	strb	r2, [r3, #0]
 801b8c4:	230f      	movs	r3, #15
 801b8c6:	18fb      	adds	r3, r7, r3
 801b8c8:	781b      	ldrb	r3, [r3, #0]
 801b8ca:	2b00      	cmp	r3, #0
 801b8cc:	d1e1      	bne.n	801b892 <InvCipher+0x26>
  }

  // The last round is given below.
  // The MixColumns function is not here in the last round.
  InvShiftRows(state);
 801b8ce:	687b      	ldr	r3, [r7, #4]
 801b8d0:	0018      	movs	r0, r3
 801b8d2:	f7ff ff3f 	bl	801b754 <InvShiftRows>
  InvSubBytes(state);
 801b8d6:	687b      	ldr	r3, [r7, #4]
 801b8d8:	0018      	movs	r0, r3
 801b8da:	f7ff fefb 	bl	801b6d4 <InvSubBytes>
  AddRoundKey(0, state, RoundKey);
 801b8de:	683a      	ldr	r2, [r7, #0]
 801b8e0:	687b      	ldr	r3, [r7, #4]
 801b8e2:	0019      	movs	r1, r3
 801b8e4:	2000      	movs	r0, #0
 801b8e6:	f7ff f924 	bl	801ab32 <AddRoundKey>
}
 801b8ea:	46c0      	nop			; (mov r8, r8)
 801b8ec:	46bd      	mov	sp, r7
 801b8ee:	b005      	add	sp, #20
 801b8f0:	bd90      	pop	{r4, r7, pc}

0801b8f2 <XorWithIv>:

#if defined(CBC) && (CBC == 1)


static void XorWithIv(uint8_t* buf, uint8_t* Iv)
{
 801b8f2:	b590      	push	{r4, r7, lr}
 801b8f4:	b085      	sub	sp, #20
 801b8f6:	af00      	add	r7, sp, #0
 801b8f8:	6078      	str	r0, [r7, #4]
 801b8fa:	6039      	str	r1, [r7, #0]
  uint8_t i;
  for (i = 0; i < AES_BLOCKLEN; ++i) // The block in AES is always 128bit no matter the key size
 801b8fc:	230f      	movs	r3, #15
 801b8fe:	18fb      	adds	r3, r7, r3
 801b900:	2200      	movs	r2, #0
 801b902:	701a      	strb	r2, [r3, #0]
 801b904:	e016      	b.n	801b934 <XorWithIv+0x42>
  {
    buf[i] ^= Iv[i];
 801b906:	240f      	movs	r4, #15
 801b908:	193b      	adds	r3, r7, r4
 801b90a:	781b      	ldrb	r3, [r3, #0]
 801b90c:	687a      	ldr	r2, [r7, #4]
 801b90e:	18d3      	adds	r3, r2, r3
 801b910:	7819      	ldrb	r1, [r3, #0]
 801b912:	193b      	adds	r3, r7, r4
 801b914:	781b      	ldrb	r3, [r3, #0]
 801b916:	683a      	ldr	r2, [r7, #0]
 801b918:	18d3      	adds	r3, r2, r3
 801b91a:	781a      	ldrb	r2, [r3, #0]
 801b91c:	193b      	adds	r3, r7, r4
 801b91e:	781b      	ldrb	r3, [r3, #0]
 801b920:	6878      	ldr	r0, [r7, #4]
 801b922:	18c3      	adds	r3, r0, r3
 801b924:	404a      	eors	r2, r1
 801b926:	b2d2      	uxtb	r2, r2
 801b928:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < AES_BLOCKLEN; ++i) // The block in AES is always 128bit no matter the key size
 801b92a:	193b      	adds	r3, r7, r4
 801b92c:	193a      	adds	r2, r7, r4
 801b92e:	7812      	ldrb	r2, [r2, #0]
 801b930:	3201      	adds	r2, #1
 801b932:	701a      	strb	r2, [r3, #0]
 801b934:	230f      	movs	r3, #15
 801b936:	18fb      	adds	r3, r7, r3
 801b938:	781b      	ldrb	r3, [r3, #0]
 801b93a:	2b0f      	cmp	r3, #15
 801b93c:	d9e3      	bls.n	801b906 <XorWithIv+0x14>
  }
}
 801b93e:	46c0      	nop			; (mov r8, r8)
 801b940:	46bd      	mov	sp, r7
 801b942:	b005      	add	sp, #20
 801b944:	bd90      	pop	{r4, r7, pc}

0801b946 <tiny_AES_CBC_encrypt_buffer>:

void tiny_AES_CBC_encrypt_buffer(struct AES_ctx *ctx,uint8_t* buf, uint32_t length)
{
 801b946:	b580      	push	{r7, lr}
 801b948:	b086      	sub	sp, #24
 801b94a:	af00      	add	r7, sp, #0
 801b94c:	60f8      	str	r0, [r7, #12]
 801b94e:	60b9      	str	r1, [r7, #8]
 801b950:	607a      	str	r2, [r7, #4]
  uintptr_t i;
  uint8_t *Iv = ctx->Iv;
 801b952:	68fb      	ldr	r3, [r7, #12]
 801b954:	33b0      	adds	r3, #176	; 0xb0
 801b956:	613b      	str	r3, [r7, #16]
  for (i = 0; i < length; i += AES_BLOCKLEN)
 801b958:	2300      	movs	r3, #0
 801b95a:	617b      	str	r3, [r7, #20]
 801b95c:	e013      	b.n	801b986 <tiny_AES_CBC_encrypt_buffer+0x40>
  {
    XorWithIv(buf, Iv);
 801b95e:	693a      	ldr	r2, [r7, #16]
 801b960:	68bb      	ldr	r3, [r7, #8]
 801b962:	0011      	movs	r1, r2
 801b964:	0018      	movs	r0, r3
 801b966:	f7ff ffc4 	bl	801b8f2 <XorWithIv>
    Cipher((state_t*)buf, ctx->RoundKey);
 801b96a:	68fa      	ldr	r2, [r7, #12]
 801b96c:	68bb      	ldr	r3, [r7, #8]
 801b96e:	0011      	movs	r1, r2
 801b970:	0018      	movs	r0, r3
 801b972:	f7ff ff38 	bl	801b7e6 <Cipher>
    Iv = buf;
 801b976:	68bb      	ldr	r3, [r7, #8]
 801b978:	613b      	str	r3, [r7, #16]
    buf += AES_BLOCKLEN;
 801b97a:	68bb      	ldr	r3, [r7, #8]
 801b97c:	3310      	adds	r3, #16
 801b97e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < length; i += AES_BLOCKLEN)
 801b980:	697b      	ldr	r3, [r7, #20]
 801b982:	3310      	adds	r3, #16
 801b984:	617b      	str	r3, [r7, #20]
 801b986:	697a      	ldr	r2, [r7, #20]
 801b988:	687b      	ldr	r3, [r7, #4]
 801b98a:	429a      	cmp	r2, r3
 801b98c:	d3e7      	bcc.n	801b95e <tiny_AES_CBC_encrypt_buffer+0x18>
    //printf("Step %d - %d", i/16, i);
  }
  /* store Iv in ctx for next call */
  memcpy(ctx->Iv, Iv, AES_BLOCKLEN);
 801b98e:	68fb      	ldr	r3, [r7, #12]
 801b990:	33b0      	adds	r3, #176	; 0xb0
 801b992:	6939      	ldr	r1, [r7, #16]
 801b994:	2210      	movs	r2, #16
 801b996:	0018      	movs	r0, r3
 801b998:	f003 fbb6 	bl	801f108 <memcpy>
}
 801b99c:	46c0      	nop			; (mov r8, r8)
 801b99e:	46bd      	mov	sp, r7
 801b9a0:	b006      	add	sp, #24
 801b9a2:	bd80      	pop	{r7, pc}

0801b9a4 <tiny_AES_CBC_decrypt_buffer>:

void tiny_AES_CBC_decrypt_buffer(struct AES_ctx* ctx, uint8_t* buf,  uint32_t length)
{
 801b9a4:	b590      	push	{r4, r7, lr}
 801b9a6:	b08b      	sub	sp, #44	; 0x2c
 801b9a8:	af00      	add	r7, sp, #0
 801b9aa:	60f8      	str	r0, [r7, #12]
 801b9ac:	60b9      	str	r1, [r7, #8]
 801b9ae:	607a      	str	r2, [r7, #4]
  uintptr_t i;
  uint8_t storeNextIv[AES_BLOCKLEN];
  for (i = 0; i < length; i += AES_BLOCKLEN)
 801b9b0:	2300      	movs	r3, #0
 801b9b2:	627b      	str	r3, [r7, #36]	; 0x24
 801b9b4:	e026      	b.n	801ba04 <tiny_AES_CBC_decrypt_buffer+0x60>
  {
    memcpy(storeNextIv, buf, AES_BLOCKLEN);
 801b9b6:	2414      	movs	r4, #20
 801b9b8:	193a      	adds	r2, r7, r4
 801b9ba:	68bb      	ldr	r3, [r7, #8]
 801b9bc:	0010      	movs	r0, r2
 801b9be:	0019      	movs	r1, r3
 801b9c0:	2310      	movs	r3, #16
 801b9c2:	001a      	movs	r2, r3
 801b9c4:	f003 fba0 	bl	801f108 <memcpy>
    InvCipher((state_t*)buf, ctx->RoundKey);
 801b9c8:	68fa      	ldr	r2, [r7, #12]
 801b9ca:	68bb      	ldr	r3, [r7, #8]
 801b9cc:	0011      	movs	r1, r2
 801b9ce:	0018      	movs	r0, r3
 801b9d0:	f7ff ff4c 	bl	801b86c <InvCipher>
    XorWithIv(buf, ctx->Iv);
 801b9d4:	68fb      	ldr	r3, [r7, #12]
 801b9d6:	33b0      	adds	r3, #176	; 0xb0
 801b9d8:	001a      	movs	r2, r3
 801b9da:	68bb      	ldr	r3, [r7, #8]
 801b9dc:	0011      	movs	r1, r2
 801b9de:	0018      	movs	r0, r3
 801b9e0:	f7ff ff87 	bl	801b8f2 <XorWithIv>
    memcpy(ctx->Iv, storeNextIv, AES_BLOCKLEN);
 801b9e4:	68fb      	ldr	r3, [r7, #12]
 801b9e6:	33b0      	adds	r3, #176	; 0xb0
 801b9e8:	001a      	movs	r2, r3
 801b9ea:	193b      	adds	r3, r7, r4
 801b9ec:	0010      	movs	r0, r2
 801b9ee:	0019      	movs	r1, r3
 801b9f0:	2310      	movs	r3, #16
 801b9f2:	001a      	movs	r2, r3
 801b9f4:	f003 fb88 	bl	801f108 <memcpy>
    buf += AES_BLOCKLEN;
 801b9f8:	68bb      	ldr	r3, [r7, #8]
 801b9fa:	3310      	adds	r3, #16
 801b9fc:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < length; i += AES_BLOCKLEN)
 801b9fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ba00:	3310      	adds	r3, #16
 801ba02:	627b      	str	r3, [r7, #36]	; 0x24
 801ba04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ba06:	687b      	ldr	r3, [r7, #4]
 801ba08:	429a      	cmp	r2, r3
 801ba0a:	d3d4      	bcc.n	801b9b6 <tiny_AES_CBC_decrypt_buffer+0x12>
  }

}
 801ba0c:	46c0      	nop			; (mov r8, r8)
 801ba0e:	46bd      	mov	sp, r7
 801ba10:	b00b      	add	sp, #44	; 0x2c
 801ba12:	bd90      	pop	{r4, r7, pc}

0801ba14 <_itsdk_error_readHeader>:


/**
 * Get the header of the error blocks
 */
__weak itsdk_error_ret_e _itsdk_error_readHeader(itsdk_error_head_t * header) {
 801ba14:	b580      	push	{r7, lr}
 801ba16:	b084      	sub	sp, #16
 801ba18:	af00      	add	r7, sp, #0
 801ba1a:	6078      	str	r0, [r7, #4]
	uint32_t offset = 0;
 801ba1c:	2300      	movs	r3, #0
 801ba1e:	60fb      	str	r3, [r7, #12]
	#if ITSDK_WITH_SECURESTORE == __ENABLE
	  itsdk_secstore_getStoreSize(&offset);
 801ba20:	230c      	movs	r3, #12
 801ba22:	18fb      	adds	r3, r7, r3
 801ba24:	0018      	movs	r0, r3
 801ba26:	f7fe f8d6 	bl	8019bd6 <itsdk_secstore_getStoreSize>
	#endif
	_eeprom_read(ITDT_EEPROM_BANK0, offset, (void *) header, sizeof(itsdk_error_head_t));
 801ba2a:	68f9      	ldr	r1, [r7, #12]
 801ba2c:	687a      	ldr	r2, [r7, #4]
 801ba2e:	2308      	movs	r3, #8
 801ba30:	2000      	movs	r0, #0
 801ba32:	f002 fe39 	bl	801e6a8 <_eeprom_read>
	if ( header->magic != ITSDK_ERROR_STRUCT_MAGIC) return ITSDK_ERROR_FAILED;
 801ba36:	687b      	ldr	r3, [r7, #4]
 801ba38:	881b      	ldrh	r3, [r3, #0]
 801ba3a:	4a05      	ldr	r2, [pc, #20]	; (801ba50 <_itsdk_error_readHeader+0x3c>)
 801ba3c:	4293      	cmp	r3, r2
 801ba3e:	d001      	beq.n	801ba44 <_itsdk_error_readHeader+0x30>
 801ba40:	2301      	movs	r3, #1
 801ba42:	e000      	b.n	801ba46 <_itsdk_error_readHeader+0x32>
	return ITSDK_ERROR_SUCCESS;
 801ba44:	2300      	movs	r3, #0
}
 801ba46:	0018      	movs	r0, r3
 801ba48:	46bd      	mov	sp, r7
 801ba4a:	b004      	add	sp, #16
 801ba4c:	bd80      	pop	{r7, pc}
 801ba4e:	46c0      	nop			; (mov r8, r8)
 801ba50:	0000ae73 	.word	0x0000ae73

0801ba54 <_itsdk_error_writeHeader>:

/**
 * Update the header of the error blocks
 */
__weak itsdk_error_ret_e _itsdk_error_writeHeader(itsdk_error_head_t * header) {
 801ba54:	b580      	push	{r7, lr}
 801ba56:	b084      	sub	sp, #16
 801ba58:	af00      	add	r7, sp, #0
 801ba5a:	6078      	str	r0, [r7, #4]
	uint32_t offset = 0;
 801ba5c:	2300      	movs	r3, #0
 801ba5e:	60fb      	str	r3, [r7, #12]
	#if ITSDK_WITH_SECURESTORE == __ENABLE
	  itsdk_secstore_getStoreSize(&offset);
 801ba60:	230c      	movs	r3, #12
 801ba62:	18fb      	adds	r3, r7, r3
 801ba64:	0018      	movs	r0, r3
 801ba66:	f7fe f8b6 	bl	8019bd6 <itsdk_secstore_getStoreSize>
	#endif
	_eeprom_write(ITDT_EEPROM_BANK0, offset, (void *) header, sizeof(itsdk_error_head_t));
 801ba6a:	68f9      	ldr	r1, [r7, #12]
 801ba6c:	687a      	ldr	r2, [r7, #4]
 801ba6e:	2308      	movs	r3, #8
 801ba70:	2000      	movs	r0, #0
 801ba72:	f002 fd75 	bl	801e560 <_eeprom_write>
	return ITSDK_ERROR_SUCCESS;
 801ba76:	2300      	movs	r3, #0
}
 801ba78:	0018      	movs	r0, r3
 801ba7a:	46bd      	mov	sp, r7
 801ba7c:	b004      	add	sp, #16
 801ba7e:	bd80      	pop	{r7, pc}

0801ba80 <_itsdk_error_write>:
/**
 * Write the error in the NVM.
 * This function can be override if the MCU EEPROM is not used for this purpose.
 *
 */
__weak itsdk_error_ret_e _itsdk_error_write(uint16_t blockId, itsdk_error_entry_t * entry) {
 801ba80:	b580      	push	{r7, lr}
 801ba82:	b084      	sub	sp, #16
 801ba84:	af00      	add	r7, sp, #0
 801ba86:	0002      	movs	r2, r0
 801ba88:	6039      	str	r1, [r7, #0]
 801ba8a:	1dbb      	adds	r3, r7, #6
 801ba8c:	801a      	strh	r2, [r3, #0]
	uint32_t offset = 0;
 801ba8e:	2300      	movs	r3, #0
 801ba90:	60fb      	str	r3, [r7, #12]
	#if ITSDK_WITH_SECURESTORE == __ENABLE
	  itsdk_secstore_getStoreSize(&offset);
 801ba92:	230c      	movs	r3, #12
 801ba94:	18fb      	adds	r3, r7, r3
 801ba96:	0018      	movs	r0, r3
 801ba98:	f7fe f89d 	bl	8019bd6 <itsdk_secstore_getStoreSize>
	#endif
	_eeprom_write(
		ITDT_EEPROM_BANK0,
		offset+sizeof(itsdk_error_head_t)+(sizeof(itsdk_error_entry_t)*blockId),
 801ba9c:	1dbb      	adds	r3, r7, #6
 801ba9e:	881b      	ldrh	r3, [r3, #0]
 801baa0:	00da      	lsls	r2, r3, #3
 801baa2:	68fb      	ldr	r3, [r7, #12]
 801baa4:	18d3      	adds	r3, r2, r3
	_eeprom_write(
 801baa6:	3308      	adds	r3, #8
 801baa8:	0019      	movs	r1, r3
 801baaa:	683a      	ldr	r2, [r7, #0]
 801baac:	2308      	movs	r3, #8
 801baae:	2000      	movs	r0, #0
 801bab0:	f002 fd56 	bl	801e560 <_eeprom_write>
		(void *)entry, sizeof(itsdk_error_entry_t)
	);
	return ITSDK_ERROR_SUCCESS;
 801bab4:	2300      	movs	r3, #0
}
 801bab6:	0018      	movs	r0, r3
 801bab8:	46bd      	mov	sp, r7
 801baba:	b004      	add	sp, #16
 801babc:	bd80      	pop	{r7, pc}

0801babe <_itsdk_error_read>:

/**
 * Read a given error Id from the NVM
 */
__weak itsdk_error_ret_e _itsdk_error_read(uint16_t blockId,itsdk_error_entry_t * e) {
 801babe:	b580      	push	{r7, lr}
 801bac0:	b084      	sub	sp, #16
 801bac2:	af00      	add	r7, sp, #0
 801bac4:	0002      	movs	r2, r0
 801bac6:	6039      	str	r1, [r7, #0]
 801bac8:	1dbb      	adds	r3, r7, #6
 801baca:	801a      	strh	r2, [r3, #0]
	uint32_t offset = 0;
 801bacc:	2300      	movs	r3, #0
 801bace:	60fb      	str	r3, [r7, #12]
	#if ITSDK_WITH_SECURESTORE == __ENABLE
	  itsdk_secstore_getStoreSize(&offset);
 801bad0:	230c      	movs	r3, #12
 801bad2:	18fb      	adds	r3, r7, r3
 801bad4:	0018      	movs	r0, r3
 801bad6:	f7fe f87e 	bl	8019bd6 <itsdk_secstore_getStoreSize>
	#endif
	_eeprom_read(
		ITDT_EEPROM_BANK0,
		offset+sizeof(itsdk_error_head_t)+(sizeof(itsdk_error_entry_t)*blockId),
 801bada:	1dbb      	adds	r3, r7, #6
 801badc:	881b      	ldrh	r3, [r3, #0]
 801bade:	00da      	lsls	r2, r3, #3
 801bae0:	68fb      	ldr	r3, [r7, #12]
 801bae2:	18d3      	adds	r3, r2, r3
	_eeprom_read(
 801bae4:	3308      	adds	r3, #8
 801bae6:	0019      	movs	r1, r3
 801bae8:	683a      	ldr	r2, [r7, #0]
 801baea:	2308      	movs	r3, #8
 801baec:	2000      	movs	r0, #0
 801baee:	f002 fddb 	bl	801e6a8 <_eeprom_read>
		(void *)e, sizeof(itsdk_error_entry_t)
	);
	return ITSDK_ERROR_SUCCESS;
 801baf2:	2300      	movs	r3, #0
}
 801baf4:	0018      	movs	r0, r3
 801baf6:	46bd      	mov	sp, r7
 801baf8:	b004      	add	sp, #16
 801bafa:	bd80      	pop	{r7, pc}

0801bafc <itsdk_error_setup>:

/**
 * Init the error block structure if needed
 * This function is called on every device restart
 */
itsdk_error_ret_e itsdk_error_setup() {
 801bafc:	b580      	push	{r7, lr}
 801bafe:	b082      	sub	sp, #8
 801bb00:	af00      	add	r7, sp, #0
	itsdk_error_head_t h;
	if ( _itsdk_error_readHeader(&h) == ITSDK_ERROR_FAILED ) {
 801bb02:	003b      	movs	r3, r7
 801bb04:	0018      	movs	r0, r3
 801bb06:	f7ff ff85 	bl	801ba14 <_itsdk_error_readHeader>
 801bb0a:	0003      	movs	r3, r0
 801bb0c:	2b01      	cmp	r3, #1
 801bb0e:	d10c      	bne.n	801bb2a <itsdk_error_setup+0x2e>
		// init the structure
		h.magic = ITSDK_ERROR_STRUCT_MAGIC;
 801bb10:	003b      	movs	r3, r7
 801bb12:	4a0f      	ldr	r2, [pc, #60]	; (801bb50 <itsdk_error_setup+0x54>)
 801bb14:	801a      	strh	r2, [r3, #0]
		h.readPt = 0;
 801bb16:	003b      	movs	r3, r7
 801bb18:	2200      	movs	r2, #0
 801bb1a:	805a      	strh	r2, [r3, #2]
		h.writePt = 0;
 801bb1c:	003b      	movs	r3, r7
 801bb1e:	2200      	movs	r2, #0
 801bb20:	809a      	strh	r2, [r3, #4]
		_itsdk_error_writeHeader(&h);
 801bb22:	003b      	movs	r3, r7
 801bb24:	0018      	movs	r0, r3
 801bb26:	f7ff ff95 	bl	801ba54 <_itsdk_error_writeHeader>
	}
#if ITSDK_WITH_CONSOLE == __ENABLE
	__console_errorMng.console_private = _itsdk_error_consolePriv;
 801bb2a:	4b0a      	ldr	r3, [pc, #40]	; (801bb54 <itsdk_error_setup+0x58>)
 801bb2c:	4a0a      	ldr	r2, [pc, #40]	; (801bb58 <itsdk_error_setup+0x5c>)
 801bb2e:	601a      	str	r2, [r3, #0]
	__console_errorMng.console_public = NULL;
 801bb30:	4b08      	ldr	r3, [pc, #32]	; (801bb54 <itsdk_error_setup+0x58>)
 801bb32:	2200      	movs	r2, #0
 801bb34:	605a      	str	r2, [r3, #4]
	__console_errorMng.next = NULL;
 801bb36:	4b07      	ldr	r3, [pc, #28]	; (801bb54 <itsdk_error_setup+0x58>)
 801bb38:	2200      	movs	r2, #0
 801bb3a:	609a      	str	r2, [r3, #8]
	itsdk_console_registerCommand(&__console_errorMng);
 801bb3c:	4b05      	ldr	r3, [pc, #20]	; (801bb54 <itsdk_error_setup+0x58>)
 801bb3e:	0018      	movs	r0, r3
 801bb40:	f7fd f96a 	bl	8018e18 <itsdk_console_registerCommand>
#endif

	return ITSDK_ERROR_SUCCESS;
 801bb44:	2300      	movs	r3, #0
}
 801bb46:	0018      	movs	r0, r3
 801bb48:	46bd      	mov	sp, r7
 801bb4a:	b002      	add	sp, #8
 801bb4c:	bd80      	pop	{r7, pc}
 801bb4e:	46c0      	nop			; (mov r8, r8)
 801bb50:	ffffae73 	.word	0xffffae73
 801bb54:	200011f8 	.word	0x200011f8
 801bb58:	0801bdc1 	.word	0x0801bdc1

0801bb5c <itsdk_error_report>:
 * Register an error into the NVM
 * The error is enriched with the value when needed and written in the NVM
 * The NVM write can be override.
 * When the level is critical it loop forever after printing an error message
 */
itsdk_error_ret_e itsdk_error_report(uint32_t error,uint16_t value) {
 801bb5c:	b590      	push	{r4, r7, lr}
 801bb5e:	b08b      	sub	sp, #44	; 0x2c
 801bb60:	af00      	add	r7, sp, #0
 801bb62:	6078      	str	r0, [r7, #4]
 801bb64:	000a      	movs	r2, r1
 801bb66:	1cbb      	adds	r3, r7, #2
 801bb68:	801a      	strh	r2, [r3, #0]
	// Add value into error when needed
	if ( ( error & ITSDK_ERROR_WITH_VALUE ) > 0 ) {
 801bb6a:	687a      	ldr	r2, [r7, #4]
 801bb6c:	2380      	movs	r3, #128	; 0x80
 801bb6e:	055b      	lsls	r3, r3, #21
 801bb70:	4013      	ands	r3, r2
 801bb72:	d008      	beq.n	801bb86 <itsdk_error_report+0x2a>
		error |= (value << ITSDK_ERROR_VALUE_SHIFT) & ITSDK_ERROR_VALUE_MASK;
 801bb74:	1cbb      	adds	r3, r7, #2
 801bb76:	881b      	ldrh	r3, [r3, #0]
 801bb78:	031b      	lsls	r3, r3, #12
 801bb7a:	001a      	movs	r2, r3
 801bb7c:	4b4b      	ldr	r3, [pc, #300]	; (801bcac <itsdk_error_report+0x150>)
 801bb7e:	4013      	ands	r3, r2
 801bb80:	687a      	ldr	r2, [r7, #4]
 801bb82:	4313      	orrs	r3, r2
 801bb84:	607b      	str	r3, [r7, #4]
	}
	uint64_t time = itsdk_time_get_ms() / 1000;
 801bb86:	f001 faab 	bl	801d0e0 <itsdk_time_get_ms>
 801bb8a:	22fa      	movs	r2, #250	; 0xfa
 801bb8c:	0092      	lsls	r2, r2, #2
 801bb8e:	2300      	movs	r3, #0
 801bb90:	f7e4 fc9a 	bl	80004c8 <__aeabi_uldivmod>
 801bb94:	0003      	movs	r3, r0
 801bb96:	000c      	movs	r4, r1
 801bb98:	61bb      	str	r3, [r7, #24]
 801bb9a:	61fc      	str	r4, [r7, #28]
	itsdk_error_entry_t e;
	e.error = error;
 801bb9c:	2110      	movs	r1, #16
 801bb9e:	187b      	adds	r3, r7, r1
 801bba0:	687a      	ldr	r2, [r7, #4]
 801bba2:	605a      	str	r2, [r3, #4]
	e.timeS = (uint32_t)time;
 801bba4:	69ba      	ldr	r2, [r7, #24]
 801bba6:	187b      	adds	r3, r7, r1
 801bba8:	601a      	str	r2, [r3, #0]

	itsdk_error_head_t h;
	if ( _itsdk_error_readHeader(&h) == ITSDK_ERROR_FAILED ) return ITSDK_ERROR_FAILED;
 801bbaa:	2308      	movs	r3, #8
 801bbac:	18fb      	adds	r3, r7, r3
 801bbae:	0018      	movs	r0, r3
 801bbb0:	f7ff ff30 	bl	801ba14 <_itsdk_error_readHeader>
 801bbb4:	0003      	movs	r3, r0
 801bbb6:	2b01      	cmp	r3, #1
 801bbb8:	d101      	bne.n	801bbbe <itsdk_error_report+0x62>
 801bbba:	2301      	movs	r3, #1
 801bbbc:	e072      	b.n	801bca4 <itsdk_error_report+0x148>

	// Register error
	_itsdk_error_write(h.writePt, &e);
 801bbbe:	2408      	movs	r4, #8
 801bbc0:	193b      	adds	r3, r7, r4
 801bbc2:	889b      	ldrh	r3, [r3, #4]
 801bbc4:	2210      	movs	r2, #16
 801bbc6:	18ba      	adds	r2, r7, r2
 801bbc8:	0011      	movs	r1, r2
 801bbca:	0018      	movs	r0, r3
 801bbcc:	f7ff ff58 	bl	801ba80 <_itsdk_error_write>

	// Update the pointers
	h.writePt = (h.writePt + 1) % ITSDK_ERROR_BLOCKS;
 801bbd0:	193b      	adds	r3, r7, r4
 801bbd2:	889b      	ldrh	r3, [r3, #4]
 801bbd4:	3301      	adds	r3, #1
 801bbd6:	4a36      	ldr	r2, [pc, #216]	; (801bcb0 <itsdk_error_report+0x154>)
 801bbd8:	4013      	ands	r3, r2
 801bbda:	d504      	bpl.n	801bbe6 <itsdk_error_report+0x8a>
 801bbdc:	3b01      	subs	r3, #1
 801bbde:	2240      	movs	r2, #64	; 0x40
 801bbe0:	4252      	negs	r2, r2
 801bbe2:	4313      	orrs	r3, r2
 801bbe4:	3301      	adds	r3, #1
 801bbe6:	b29a      	uxth	r2, r3
 801bbe8:	2108      	movs	r1, #8
 801bbea:	187b      	adds	r3, r7, r1
 801bbec:	809a      	strh	r2, [r3, #4]
	if ( h.writePt == h.readPt ) {
 801bbee:	187b      	adds	r3, r7, r1
 801bbf0:	889a      	ldrh	r2, [r3, #4]
 801bbf2:	187b      	adds	r3, r7, r1
 801bbf4:	885b      	ldrh	r3, [r3, #2]
 801bbf6:	429a      	cmp	r2, r3
 801bbf8:	d10f      	bne.n	801bc1a <itsdk_error_report+0xbe>
		h.readPt = (h.readPt + 1) % ITSDK_ERROR_BLOCKS;
 801bbfa:	2308      	movs	r3, #8
 801bbfc:	18fb      	adds	r3, r7, r3
 801bbfe:	885b      	ldrh	r3, [r3, #2]
 801bc00:	3301      	adds	r3, #1
 801bc02:	4a2b      	ldr	r2, [pc, #172]	; (801bcb0 <itsdk_error_report+0x154>)
 801bc04:	4013      	ands	r3, r2
 801bc06:	d504      	bpl.n	801bc12 <itsdk_error_report+0xb6>
 801bc08:	3b01      	subs	r3, #1
 801bc0a:	2240      	movs	r2, #64	; 0x40
 801bc0c:	4252      	negs	r2, r2
 801bc0e:	4313      	orrs	r3, r2
 801bc10:	3301      	adds	r3, #1
 801bc12:	b29a      	uxth	r2, r3
 801bc14:	2308      	movs	r3, #8
 801bc16:	18fb      	adds	r3, r7, r3
 801bc18:	805a      	strh	r2, [r3, #2]
	}
	_itsdk_error_writeHeader(&h);
 801bc1a:	2308      	movs	r3, #8
 801bc1c:	18fb      	adds	r3, r7, r3
 801bc1e:	0018      	movs	r0, r3
 801bc20:	f7ff ff18 	bl	801ba54 <_itsdk_error_writeHeader>

	char t = 'S';
 801bc24:	2327      	movs	r3, #39	; 0x27
 801bc26:	18fb      	adds	r3, r7, r3
 801bc28:	2253      	movs	r2, #83	; 0x53
 801bc2a:	701a      	strb	r2, [r3, #0]
	if ((error & ITSDK_ERROR_TYPE_MASK) == ITSDK_ERROR_TYPE_APP) {
 801bc2c:	687a      	ldr	r2, [r7, #4]
 801bc2e:	2380      	movs	r3, #128	; 0x80
 801bc30:	059b      	lsls	r3, r3, #22
 801bc32:	4013      	ands	r3, r2
 801bc34:	d003      	beq.n	801bc3e <itsdk_error_report+0xe2>
		t = 'A';
 801bc36:	2327      	movs	r3, #39	; 0x27
 801bc38:	18fb      	adds	r3, r7, r3
 801bc3a:	2241      	movs	r2, #65	; 0x41
 801bc3c:	701a      	strb	r2, [r3, #0]
	}

	// Manage critical level
	if ( (error & ITSDK_ERROR_LEVEL_FATAL ) == ITSDK_ERROR_LEVEL_FATAL ){
 801bc3e:	687b      	ldr	r3, [r7, #4]
 801bc40:	0f9b      	lsrs	r3, r3, #30
 801bc42:	079a      	lsls	r2, r3, #30
 801bc44:	23c0      	movs	r3, #192	; 0xc0
 801bc46:	061b      	lsls	r3, r3, #24
 801bc48:	429a      	cmp	r2, r3
 801bc4a:	d108      	bne.n	801bc5e <itsdk_error_report+0x102>
		log_error("[CRITICAL ERROR] %c 0x%08X\r\n",t,error);
 801bc4c:	2327      	movs	r3, #39	; 0x27
 801bc4e:	18fb      	adds	r3, r7, r3
 801bc50:	7819      	ldrb	r1, [r3, #0]
 801bc52:	687a      	ldr	r2, [r7, #4]
 801bc54:	4b17      	ldr	r3, [pc, #92]	; (801bcb4 <itsdk_error_report+0x158>)
 801bc56:	0018      	movs	r0, r3
 801bc58:	f000 fa0c 	bl	801c074 <log_error>
		while(1);
 801bc5c:	e7fe      	b.n	801bc5c <itsdk_error_report+0x100>
	} else if ( (error & ITSDK_ERROR_LEVEL_ERROR ) == ITSDK_ERROR_LEVEL_ERROR ){
 801bc5e:	687b      	ldr	r3, [r7, #4]
 801bc60:	2b00      	cmp	r3, #0
 801bc62:	da08      	bge.n	801bc76 <itsdk_error_report+0x11a>
		log_error("[ERROR] %c 0x%08X\r\n",t,error);
 801bc64:	2327      	movs	r3, #39	; 0x27
 801bc66:	18fb      	adds	r3, r7, r3
 801bc68:	7819      	ldrb	r1, [r3, #0]
 801bc6a:	687a      	ldr	r2, [r7, #4]
 801bc6c:	4b12      	ldr	r3, [pc, #72]	; (801bcb8 <itsdk_error_report+0x15c>)
 801bc6e:	0018      	movs	r0, r3
 801bc70:	f000 fa00 	bl	801c074 <log_error>
 801bc74:	e015      	b.n	801bca2 <itsdk_error_report+0x146>
	} else if ( (error & ITSDK_ERROR_LEVEL_WARN ) == ITSDK_ERROR_LEVEL_WARN ){
 801bc76:	687a      	ldr	r2, [r7, #4]
 801bc78:	2380      	movs	r3, #128	; 0x80
 801bc7a:	05db      	lsls	r3, r3, #23
 801bc7c:	4013      	ands	r3, r2
 801bc7e:	d008      	beq.n	801bc92 <itsdk_error_report+0x136>
		log_warn("[WARN] %c 0x%08X\r\n",t,error);
 801bc80:	2327      	movs	r3, #39	; 0x27
 801bc82:	18fb      	adds	r3, r7, r3
 801bc84:	7819      	ldrb	r1, [r3, #0]
 801bc86:	687a      	ldr	r2, [r7, #4]
 801bc88:	4b0c      	ldr	r3, [pc, #48]	; (801bcbc <itsdk_error_report+0x160>)
 801bc8a:	0018      	movs	r0, r3
 801bc8c:	f000 fa38 	bl	801c100 <log_warn>
 801bc90:	e007      	b.n	801bca2 <itsdk_error_report+0x146>
	} else if ( (error & ITSDK_ERROR_LEVEL_INFO ) == ITSDK_ERROR_LEVEL_INFO ){
		log_info("[INFO] %c 0x%08X\r\n",t,error);
 801bc92:	2327      	movs	r3, #39	; 0x27
 801bc94:	18fb      	adds	r3, r7, r3
 801bc96:	7819      	ldrb	r1, [r3, #0]
 801bc98:	687a      	ldr	r2, [r7, #4]
 801bc9a:	4b09      	ldr	r3, [pc, #36]	; (801bcc0 <itsdk_error_report+0x164>)
 801bc9c:	0018      	movs	r0, r3
 801bc9e:	f000 fa75 	bl	801c18c <log_info>
	}
	return ITSDK_ERROR_SUCCESS;
 801bca2:	2300      	movs	r3, #0
}
 801bca4:	0018      	movs	r0, r3
 801bca6:	46bd      	mov	sp, r7
 801bca8:	b00b      	add	sp, #44	; 0x2c
 801bcaa:	bd90      	pop	{r4, r7, pc}
 801bcac:	0ffff000 	.word	0x0ffff000
 801bcb0:	8000003f 	.word	0x8000003f
 801bcb4:	080211c0 	.word	0x080211c0
 801bcb8:	080211e0 	.word	0x080211e0
 801bcbc:	080211f4 	.word	0x080211f4
 801bcc0:	08021208 	.word	0x08021208

0801bcc4 <itsdk_error_get>:
 * When blockId is ITSDK_ERROR_FIRSTBLOCK the first available block is returned
 * Returns the next blockId to be read. ITSDK_ERROR_LASTBLOCK when no more to read
 * The blockId is updated with next block Id value.
 *
 */
itsdk_error_ret_e itsdk_error_get(uint16_t * blockId,itsdk_error_entry_t * e) {
 801bcc4:	b580      	push	{r7, lr}
 801bcc6:	b084      	sub	sp, #16
 801bcc8:	af00      	add	r7, sp, #0
 801bcca:	6078      	str	r0, [r7, #4]
 801bccc:	6039      	str	r1, [r7, #0]

	itsdk_error_head_t h;
	if ( _itsdk_error_readHeader(&h) == ITSDK_ERROR_SUCCESS ) {
 801bcce:	2308      	movs	r3, #8
 801bcd0:	18fb      	adds	r3, r7, r3
 801bcd2:	0018      	movs	r0, r3
 801bcd4:	f7ff fe9e 	bl	801ba14 <_itsdk_error_readHeader>
 801bcd8:	1e03      	subs	r3, r0, #0
 801bcda:	d138      	bne.n	801bd4e <itsdk_error_get+0x8a>
		// Manage blockId request
		if ( *blockId == ITSDK_ERROR_FIRSTBLOCK ) {
 801bcdc:	687b      	ldr	r3, [r7, #4]
 801bcde:	881b      	ldrh	r3, [r3, #0]
 801bce0:	4a22      	ldr	r2, [pc, #136]	; (801bd6c <itsdk_error_get+0xa8>)
 801bce2:	4293      	cmp	r3, r2
 801bce4:	d104      	bne.n	801bcf0 <itsdk_error_get+0x2c>
			*blockId = h.readPt;
 801bce6:	2308      	movs	r3, #8
 801bce8:	18fb      	adds	r3, r7, r3
 801bcea:	885a      	ldrh	r2, [r3, #2]
 801bcec:	687b      	ldr	r3, [r7, #4]
 801bcee:	801a      	strh	r2, [r3, #0]
		}
		if ( *blockId != h.writePt ) {
 801bcf0:	687b      	ldr	r3, [r7, #4]
 801bcf2:	881a      	ldrh	r2, [r3, #0]
 801bcf4:	2308      	movs	r3, #8
 801bcf6:	18fb      	adds	r3, r7, r3
 801bcf8:	889b      	ldrh	r3, [r3, #4]
 801bcfa:	429a      	cmp	r2, r3
 801bcfc:	d027      	beq.n	801bd4e <itsdk_error_get+0x8a>
			if ( *blockId < ITSDK_ERROR_BLOCKS ) {
 801bcfe:	687b      	ldr	r3, [r7, #4]
 801bd00:	881b      	ldrh	r3, [r3, #0]
 801bd02:	2b3f      	cmp	r3, #63	; 0x3f
 801bd04:	d823      	bhi.n	801bd4e <itsdk_error_get+0x8a>
				// Read the block
				if ( _itsdk_error_read(*blockId,e) == ITSDK_ERROR_SUCCESS ) {
 801bd06:	687b      	ldr	r3, [r7, #4]
 801bd08:	881b      	ldrh	r3, [r3, #0]
 801bd0a:	683a      	ldr	r2, [r7, #0]
 801bd0c:	0011      	movs	r1, r2
 801bd0e:	0018      	movs	r0, r3
 801bd10:	f7ff fed5 	bl	801babe <_itsdk_error_read>
 801bd14:	1e03      	subs	r3, r0, #0
 801bd16:	d11a      	bne.n	801bd4e <itsdk_error_get+0x8a>
					*blockId = (*blockId + 1) % ITSDK_ERROR_BLOCKS;
 801bd18:	687b      	ldr	r3, [r7, #4]
 801bd1a:	881b      	ldrh	r3, [r3, #0]
 801bd1c:	3301      	adds	r3, #1
 801bd1e:	4a14      	ldr	r2, [pc, #80]	; (801bd70 <itsdk_error_get+0xac>)
 801bd20:	4013      	ands	r3, r2
 801bd22:	d504      	bpl.n	801bd2e <itsdk_error_get+0x6a>
 801bd24:	3b01      	subs	r3, #1
 801bd26:	2240      	movs	r2, #64	; 0x40
 801bd28:	4252      	negs	r2, r2
 801bd2a:	4313      	orrs	r3, r2
 801bd2c:	3301      	adds	r3, #1
 801bd2e:	b29a      	uxth	r2, r3
 801bd30:	687b      	ldr	r3, [r7, #4]
 801bd32:	801a      	strh	r2, [r3, #0]
					if ( *blockId == h.writePt ) *blockId = ITSDK_ERROR_LASTBLOCK;
 801bd34:	687b      	ldr	r3, [r7, #4]
 801bd36:	881a      	ldrh	r2, [r3, #0]
 801bd38:	2308      	movs	r3, #8
 801bd3a:	18fb      	adds	r3, r7, r3
 801bd3c:	889b      	ldrh	r3, [r3, #4]
 801bd3e:	429a      	cmp	r2, r3
 801bd40:	d103      	bne.n	801bd4a <itsdk_error_get+0x86>
 801bd42:	687b      	ldr	r3, [r7, #4]
 801bd44:	2201      	movs	r2, #1
 801bd46:	4252      	negs	r2, r2
 801bd48:	801a      	strh	r2, [r3, #0]
					return ITSDK_ERROR_SUCCESS;
 801bd4a:	2300      	movs	r3, #0
 801bd4c:	e00a      	b.n	801bd64 <itsdk_error_get+0xa0>
				}
			}
		}
	}
	e->error = 0;
 801bd4e:	683b      	ldr	r3, [r7, #0]
 801bd50:	2200      	movs	r2, #0
 801bd52:	605a      	str	r2, [r3, #4]
	e->timeS = 0;
 801bd54:	683b      	ldr	r3, [r7, #0]
 801bd56:	2200      	movs	r2, #0
 801bd58:	601a      	str	r2, [r3, #0]
	*blockId = ITSDK_ERROR_LASTBLOCK;
 801bd5a:	687b      	ldr	r3, [r7, #4]
 801bd5c:	2201      	movs	r2, #1
 801bd5e:	4252      	negs	r2, r2
 801bd60:	801a      	strh	r2, [r3, #0]
	return ITSDK_ERROR_FAILED;
 801bd62:	2301      	movs	r3, #1
}
 801bd64:	0018      	movs	r0, r3
 801bd66:	46bd      	mov	sp, r7
 801bd68:	b004      	add	sp, #16
 801bd6a:	bd80      	pop	{r7, pc}
 801bd6c:	0000fffe 	.word	0x0000fffe
 801bd70:	8000003f 	.word	0x8000003f

0801bd74 <itsdk_error_clear>:


/**
 * clear the error log history
 */
itsdk_error_ret_e itsdk_error_clear() {
 801bd74:	b580      	push	{r7, lr}
 801bd76:	b082      	sub	sp, #8
 801bd78:	af00      	add	r7, sp, #0
	itsdk_error_head_t h;
	if ( _itsdk_error_readHeader(&h) == ITSDK_ERROR_FAILED ) return ITSDK_ERROR_FAILED;
 801bd7a:	003b      	movs	r3, r7
 801bd7c:	0018      	movs	r0, r3
 801bd7e:	f7ff fe49 	bl	801ba14 <_itsdk_error_readHeader>
 801bd82:	0003      	movs	r3, r0
 801bd84:	2b01      	cmp	r3, #1
 801bd86:	d101      	bne.n	801bd8c <itsdk_error_clear+0x18>
 801bd88:	2301      	movs	r3, #1
 801bd8a:	e008      	b.n	801bd9e <itsdk_error_clear+0x2a>
	h.readPt = h.writePt;
 801bd8c:	003b      	movs	r3, r7
 801bd8e:	889a      	ldrh	r2, [r3, #4]
 801bd90:	003b      	movs	r3, r7
 801bd92:	805a      	strh	r2, [r3, #2]
	_itsdk_error_writeHeader(&h);
 801bd94:	003b      	movs	r3, r7
 801bd96:	0018      	movs	r0, r3
 801bd98:	f7ff fe5c 	bl	801ba54 <_itsdk_error_writeHeader>
	return ITSDK_ERROR_SUCCESS;
 801bd9c:	2300      	movs	r3, #0
}
 801bd9e:	0018      	movs	r0, r3
 801bda0:	46bd      	mov	sp, r7
 801bda2:	b002      	add	sp, #8
 801bda4:	bd80      	pop	{r7, pc}

0801bda6 <itsdk_error_getSize>:

/**
 * Get the size of the error blocks
 */
itsdk_error_ret_e itsdk_error_getSize(uint32_t * size) {
 801bda6:	b580      	push	{r7, lr}
 801bda8:	b082      	sub	sp, #8
 801bdaa:	af00      	add	r7, sp, #0
 801bdac:	6078      	str	r0, [r7, #4]
	*size=sizeof(itsdk_error_t);
 801bdae:	687b      	ldr	r3, [r7, #4]
 801bdb0:	2282      	movs	r2, #130	; 0x82
 801bdb2:	0092      	lsls	r2, r2, #2
 801bdb4:	601a      	str	r2, [r3, #0]
	return ITSDK_ERROR_SUCCESS;
 801bdb6:	2300      	movs	r3, #0
}
 801bdb8:	0018      	movs	r0, r3
 801bdba:	46bd      	mov	sp, r7
 801bdbc:	b002      	add	sp, #8
 801bdbe:	bd80      	pop	{r7, pc}

0801bdc0 <_itsdk_error_consolePriv>:
// =================================================================================
// Console options
// =================================================================================

#if ITSDK_WITH_CONSOLE == __ENABLE
static itsdk_console_return_e _itsdk_error_consolePriv(char * buffer, uint8_t sz) {
 801bdc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bdc2:	b08b      	sub	sp, #44	; 0x2c
 801bdc4:	af04      	add	r7, sp, #16
 801bdc6:	6078      	str	r0, [r7, #4]
 801bdc8:	000a      	movs	r2, r1
 801bdca:	1cfb      	adds	r3, r7, #3
 801bdcc:	701a      	strb	r2, [r3, #0]
	if ( sz == 1 ) {
 801bdce:	1cfb      	adds	r3, r7, #3
 801bdd0:	781b      	ldrb	r3, [r3, #0]
 801bdd2:	2b01      	cmp	r3, #1
 801bdd4:	d000      	beq.n	801bdd8 <_itsdk_error_consolePriv+0x18>
 801bdd6:	e087      	b.n	801bee8 <_itsdk_error_consolePriv+0x128>
	  switch(buffer[0]){
 801bdd8:	687b      	ldr	r3, [r7, #4]
 801bdda:	781b      	ldrb	r3, [r3, #0]
 801bddc:	2b45      	cmp	r3, #69	; 0x45
 801bdde:	d100      	bne.n	801bde2 <_itsdk_error_consolePriv+0x22>
 801bde0:	e07a      	b.n	801bed8 <_itsdk_error_consolePriv+0x118>
 801bde2:	2b65      	cmp	r3, #101	; 0x65
 801bde4:	d010      	beq.n	801be08 <_itsdk_error_consolePriv+0x48>
 801bde6:	2b3f      	cmp	r3, #63	; 0x3f
 801bde8:	d000      	beq.n	801bdec <_itsdk_error_consolePriv+0x2c>
			itsdk_error_clear();
			_itsdk_console_printf("OK\r\n");
  		    return ITSDK_CONSOLE_SUCCES;
			break;
		default:
			break;
 801bdea:	e07e      	b.n	801beea <_itsdk_error_consolePriv+0x12a>
			_itsdk_console_printf("--- ErrorMng\r\n");
 801bdec:	4b41      	ldr	r3, [pc, #260]	; (801bef4 <_itsdk_error_consolePriv+0x134>)
 801bdee:	0018      	movs	r0, r3
 801bdf0:	f7fc fe52 	bl	8018a98 <_itsdk_console_printf>
			_itsdk_console_printf("e          : print errors log\r\n");
 801bdf4:	4b40      	ldr	r3, [pc, #256]	; (801bef8 <_itsdk_error_consolePriv+0x138>)
 801bdf6:	0018      	movs	r0, r3
 801bdf8:	f7fc fe4e 	bl	8018a98 <_itsdk_console_printf>
			_itsdk_console_printf("E          : Clear the error logs\r\n");
 801bdfc:	4b3f      	ldr	r3, [pc, #252]	; (801befc <_itsdk_error_consolePriv+0x13c>)
 801bdfe:	0018      	movs	r0, r3
 801be00:	f7fc fe4a 	bl	8018a98 <_itsdk_console_printf>
		  return ITSDK_CONSOLE_SUCCES;
 801be04:	2300      	movs	r3, #0
 801be06:	e071      	b.n	801beec <_itsdk_error_consolePriv+0x12c>
				uint16_t blockId = ITSDK_ERROR_FIRSTBLOCK;
 801be08:	2314      	movs	r3, #20
 801be0a:	18fb      	adds	r3, r7, r3
 801be0c:	2202      	movs	r2, #2
 801be0e:	4252      	negs	r2, r2
 801be10:	801a      	strh	r2, [r3, #0]
				while ( itsdk_error_get(&blockId,&e) == ITSDK_ERROR_SUCCESS ) {
 801be12:	e051      	b.n	801beb8 <_itsdk_error_consolePriv+0xf8>
					switch (e.error & ITSDK_ERROR_LEVEL_MASK) {
 801be14:	230c      	movs	r3, #12
 801be16:	18fb      	adds	r3, r7, r3
 801be18:	685b      	ldr	r3, [r3, #4]
 801be1a:	0f9b      	lsrs	r3, r3, #30
 801be1c:	079b      	lsls	r3, r3, #30
 801be1e:	2280      	movs	r2, #128	; 0x80
 801be20:	0612      	lsls	r2, r2, #24
 801be22:	4293      	cmp	r3, r2
 801be24:	d011      	beq.n	801be4a <_itsdk_error_consolePriv+0x8a>
 801be26:	22c0      	movs	r2, #192	; 0xc0
 801be28:	0612      	lsls	r2, r2, #24
 801be2a:	4293      	cmp	r3, r2
 801be2c:	d012      	beq.n	801be54 <_itsdk_error_consolePriv+0x94>
 801be2e:	2280      	movs	r2, #128	; 0x80
 801be30:	05d2      	lsls	r2, r2, #23
 801be32:	4293      	cmp	r3, r2
 801be34:	d004      	beq.n	801be40 <_itsdk_error_consolePriv+0x80>
					case ITSDK_ERROR_LEVEL_INFO:  l = 'I'; break;
 801be36:	2317      	movs	r3, #23
 801be38:	18fb      	adds	r3, r7, r3
 801be3a:	2249      	movs	r2, #73	; 0x49
 801be3c:	701a      	strb	r2, [r3, #0]
 801be3e:	e00e      	b.n	801be5e <_itsdk_error_consolePriv+0x9e>
					case ITSDK_ERROR_LEVEL_WARN:  l = 'W'; break;
 801be40:	2317      	movs	r3, #23
 801be42:	18fb      	adds	r3, r7, r3
 801be44:	2257      	movs	r2, #87	; 0x57
 801be46:	701a      	strb	r2, [r3, #0]
 801be48:	e009      	b.n	801be5e <_itsdk_error_consolePriv+0x9e>
					case ITSDK_ERROR_LEVEL_ERROR: l = 'E'; break;
 801be4a:	2317      	movs	r3, #23
 801be4c:	18fb      	adds	r3, r7, r3
 801be4e:	2245      	movs	r2, #69	; 0x45
 801be50:	701a      	strb	r2, [r3, #0]
 801be52:	e004      	b.n	801be5e <_itsdk_error_consolePriv+0x9e>
					case ITSDK_ERROR_LEVEL_FATAL: l = 'F'; break;
 801be54:	2317      	movs	r3, #23
 801be56:	18fb      	adds	r3, r7, r3
 801be58:	2246      	movs	r2, #70	; 0x46
 801be5a:	701a      	strb	r2, [r3, #0]
 801be5c:	46c0      	nop			; (mov r8, r8)
					_itsdk_console_printf("%c %015d : 0x%08X ( %c 0x%03X / 0x%04X )\r\n",
 801be5e:	2317      	movs	r3, #23
 801be60:	18fb      	adds	r3, r7, r3
 801be62:	781c      	ldrb	r4, [r3, #0]
 801be64:	220c      	movs	r2, #12
 801be66:	18bb      	adds	r3, r7, r2
 801be68:	681d      	ldr	r5, [r3, #0]
 801be6a:	18bb      	adds	r3, r7, r2
 801be6c:	685e      	ldr	r6, [r3, #4]
						(((e.error & ITSDK_ERROR_TYPE_APP) > 0) ? 'A' : 'S'),
 801be6e:	18bb      	adds	r3, r7, r2
 801be70:	685a      	ldr	r2, [r3, #4]
 801be72:	2380      	movs	r3, #128	; 0x80
 801be74:	059b      	lsls	r3, r3, #22
 801be76:	4013      	ands	r3, r2
					_itsdk_console_printf("%c %015d : 0x%08X ( %c 0x%03X / 0x%04X )\r\n",
 801be78:	d001      	beq.n	801be7e <_itsdk_error_consolePriv+0xbe>
 801be7a:	2241      	movs	r2, #65	; 0x41
 801be7c:	e000      	b.n	801be80 <_itsdk_error_consolePriv+0xc0>
 801be7e:	2253      	movs	r2, #83	; 0x53
						(e.error & ITSDK_ERROR_ERROR_MASK) >> ITSDK_ERROR_ERROR_SHIFT,
 801be80:	200c      	movs	r0, #12
 801be82:	183b      	adds	r3, r7, r0
 801be84:	685b      	ldr	r3, [r3, #4]
					_itsdk_console_printf("%c %015d : 0x%08X ( %c 0x%03X / 0x%04X )\r\n",
 801be86:	051b      	lsls	r3, r3, #20
 801be88:	0d19      	lsrs	r1, r3, #20
						( ((e.error & ITSDK_ERROR_WITH_VALUE) > 0)? (e.error & ITSDK_ERROR_VALUE_MASK) >> ITSDK_ERROR_VALUE_SHIFT:0)
 801be8a:	183b      	adds	r3, r7, r0
 801be8c:	6858      	ldr	r0, [r3, #4]
 801be8e:	2380      	movs	r3, #128	; 0x80
 801be90:	055b      	lsls	r3, r3, #21
 801be92:	4003      	ands	r3, r0
					_itsdk_console_printf("%c %015d : 0x%08X ( %c 0x%03X / 0x%04X )\r\n",
 801be94:	d006      	beq.n	801bea4 <_itsdk_error_consolePriv+0xe4>
						( ((e.error & ITSDK_ERROR_WITH_VALUE) > 0)? (e.error & ITSDK_ERROR_VALUE_MASK) >> ITSDK_ERROR_VALUE_SHIFT:0)
 801be96:	230c      	movs	r3, #12
 801be98:	18fb      	adds	r3, r7, r3
 801be9a:	685b      	ldr	r3, [r3, #4]
 801be9c:	0b1b      	lsrs	r3, r3, #12
					_itsdk_console_printf("%c %015d : 0x%08X ( %c 0x%03X / 0x%04X )\r\n",
 801be9e:	041b      	lsls	r3, r3, #16
 801bea0:	0c1b      	lsrs	r3, r3, #16
 801bea2:	e000      	b.n	801bea6 <_itsdk_error_consolePriv+0xe6>
 801bea4:	2300      	movs	r3, #0
 801bea6:	4816      	ldr	r0, [pc, #88]	; (801bf00 <_itsdk_error_consolePriv+0x140>)
 801bea8:	9302      	str	r3, [sp, #8]
 801beaa:	9101      	str	r1, [sp, #4]
 801beac:	9200      	str	r2, [sp, #0]
 801beae:	0033      	movs	r3, r6
 801beb0:	002a      	movs	r2, r5
 801beb2:	0021      	movs	r1, r4
 801beb4:	f7fc fdf0 	bl	8018a98 <_itsdk_console_printf>
				while ( itsdk_error_get(&blockId,&e) == ITSDK_ERROR_SUCCESS ) {
 801beb8:	230c      	movs	r3, #12
 801beba:	18fa      	adds	r2, r7, r3
 801bebc:	2314      	movs	r3, #20
 801bebe:	18fb      	adds	r3, r7, r3
 801bec0:	0011      	movs	r1, r2
 801bec2:	0018      	movs	r0, r3
 801bec4:	f7ff fefe 	bl	801bcc4 <itsdk_error_get>
 801bec8:	1e03      	subs	r3, r0, #0
 801beca:	d0a3      	beq.n	801be14 <_itsdk_error_consolePriv+0x54>
				_itsdk_console_printf("OK\r\n");
 801becc:	4b0d      	ldr	r3, [pc, #52]	; (801bf04 <_itsdk_error_consolePriv+0x144>)
 801bece:	0018      	movs	r0, r3
 801bed0:	f7fc fde2 	bl	8018a98 <_itsdk_console_printf>
  		    return ITSDK_CONSOLE_SUCCES;
 801bed4:	2300      	movs	r3, #0
 801bed6:	e009      	b.n	801beec <_itsdk_error_consolePriv+0x12c>
			itsdk_error_clear();
 801bed8:	f7ff ff4c 	bl	801bd74 <itsdk_error_clear>
			_itsdk_console_printf("OK\r\n");
 801bedc:	4b09      	ldr	r3, [pc, #36]	; (801bf04 <_itsdk_error_consolePriv+0x144>)
 801bede:	0018      	movs	r0, r3
 801bee0:	f7fc fdda 	bl	8018a98 <_itsdk_console_printf>
  		    return ITSDK_CONSOLE_SUCCES;
 801bee4:	2300      	movs	r3, #0
 801bee6:	e001      	b.n	801beec <_itsdk_error_consolePriv+0x12c>
	  }
	} //Sz == 1
 801bee8:	46c0      	nop			; (mov r8, r8)
  return ITSDK_CONSOLE_NOTFOUND;
 801beea:	2301      	movs	r3, #1
}
 801beec:	0018      	movs	r0, r3
 801beee:	46bd      	mov	sp, r7
 801bef0:	b007      	add	sp, #28
 801bef2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bef4:	0802121c 	.word	0x0802121c
 801bef8:	0802122c 	.word	0x0802122c
 801befc:	0802124c 	.word	0x0802124c
 801bf00:	08021270 	.word	0x08021270
 801bf04:	0802129c 	.word	0x0802129c

0801bf08 <log_init>:
__t_log __log;

/**
 * Setup the logging level and target
 */
bool log_init(uint16_t config) {
 801bf08:	b580      	push	{r7, lr}
 801bf0a:	b082      	sub	sp, #8
 801bf0c:	af00      	add	r7, sp, #0
 801bf0e:	0002      	movs	r2, r0
 801bf10:	1dbb      	adds	r3, r7, #6
 801bf12:	801a      	strh	r2, [r3, #0]

  __log.logError  = (( config & LOGGER_CONFIG_ERROR_LVL_MASK  ) > 0)?1:0;
 801bf14:	1dbb      	adds	r3, r7, #6
 801bf16:	881b      	ldrh	r3, [r3, #0]
 801bf18:	4a51      	ldr	r2, [pc, #324]	; (801c060 <log_init+0x158>)
 801bf1a:	4013      	ands	r3, r2
 801bf1c:	17da      	asrs	r2, r3, #31
 801bf1e:	1ad3      	subs	r3, r2, r3
 801bf20:	0fdb      	lsrs	r3, r3, #31
 801bf22:	b2da      	uxtb	r2, r3
 801bf24:	4b4f      	ldr	r3, [pc, #316]	; (801c064 <log_init+0x15c>)
 801bf26:	2101      	movs	r1, #1
 801bf28:	400a      	ands	r2, r1
 801bf2a:	1890      	adds	r0, r2, r2
 801bf2c:	781a      	ldrb	r2, [r3, #0]
 801bf2e:	2102      	movs	r1, #2
 801bf30:	438a      	bics	r2, r1
 801bf32:	1c11      	adds	r1, r2, #0
 801bf34:	1c02      	adds	r2, r0, #0
 801bf36:	430a      	orrs	r2, r1
 801bf38:	701a      	strb	r2, [r3, #0]
  __log.logWarn   = (( config & LOGGER_CONFIG_WARN_LVL_MASK   ) > 0)?1:0;
 801bf3a:	1dbb      	adds	r3, r7, #6
 801bf3c:	881b      	ldrh	r3, [r3, #0]
 801bf3e:	4a4a      	ldr	r2, [pc, #296]	; (801c068 <log_init+0x160>)
 801bf40:	4013      	ands	r3, r2
 801bf42:	17da      	asrs	r2, r3, #31
 801bf44:	1ad3      	subs	r3, r2, r3
 801bf46:	0fdb      	lsrs	r3, r3, #31
 801bf48:	b2da      	uxtb	r2, r3
 801bf4a:	4b46      	ldr	r3, [pc, #280]	; (801c064 <log_init+0x15c>)
 801bf4c:	2101      	movs	r1, #1
 801bf4e:	400a      	ands	r2, r1
 801bf50:	0090      	lsls	r0, r2, #2
 801bf52:	781a      	ldrb	r2, [r3, #0]
 801bf54:	2104      	movs	r1, #4
 801bf56:	438a      	bics	r2, r1
 801bf58:	1c11      	adds	r1, r2, #0
 801bf5a:	1c02      	adds	r2, r0, #0
 801bf5c:	430a      	orrs	r2, r1
 801bf5e:	701a      	strb	r2, [r3, #0]
  __log.logInfo   = (( config & LOGGER_CONFIG_INFO_LVL_MASK   ) > 0)?1:0;
 801bf60:	1dbb      	adds	r3, r7, #6
 801bf62:	881b      	ldrh	r3, [r3, #0]
 801bf64:	4a41      	ldr	r2, [pc, #260]	; (801c06c <log_init+0x164>)
 801bf66:	4013      	ands	r3, r2
 801bf68:	17da      	asrs	r2, r3, #31
 801bf6a:	1ad3      	subs	r3, r2, r3
 801bf6c:	0fdb      	lsrs	r3, r3, #31
 801bf6e:	b2da      	uxtb	r2, r3
 801bf70:	4b3c      	ldr	r3, [pc, #240]	; (801c064 <log_init+0x15c>)
 801bf72:	2101      	movs	r1, #1
 801bf74:	400a      	ands	r2, r1
 801bf76:	00d0      	lsls	r0, r2, #3
 801bf78:	781a      	ldrb	r2, [r3, #0]
 801bf7a:	2108      	movs	r1, #8
 801bf7c:	438a      	bics	r2, r1
 801bf7e:	1c11      	adds	r1, r2, #0
 801bf80:	1c02      	adds	r2, r0, #0
 801bf82:	430a      	orrs	r2, r1
 801bf84:	701a      	strb	r2, [r3, #0]
  __log.logDebug  = (( config & LOGGER_CONFIG_DEBUG_LVL_MASK  ) > 0)?1:0;
 801bf86:	1dbb      	adds	r3, r7, #6
 801bf88:	881b      	ldrh	r3, [r3, #0]
 801bf8a:	4a39      	ldr	r2, [pc, #228]	; (801c070 <log_init+0x168>)
 801bf8c:	4013      	ands	r3, r2
 801bf8e:	17da      	asrs	r2, r3, #31
 801bf90:	1ad3      	subs	r3, r2, r3
 801bf92:	0fdb      	lsrs	r3, r3, #31
 801bf94:	b2da      	uxtb	r2, r3
 801bf96:	4b33      	ldr	r3, [pc, #204]	; (801c064 <log_init+0x15c>)
 801bf98:	2101      	movs	r1, #1
 801bf9a:	400a      	ands	r2, r1
 801bf9c:	0110      	lsls	r0, r2, #4
 801bf9e:	781a      	ldrb	r2, [r3, #0]
 801bfa0:	2110      	movs	r1, #16
 801bfa2:	438a      	bics	r2, r1
 801bfa4:	1c11      	adds	r1, r2, #0
 801bfa6:	1c02      	adds	r2, r0, #0
 801bfa8:	430a      	orrs	r2, r1
 801bfaa:	701a      	strb	r2, [r3, #0]
  __log.onSerial1 = (( config & LOGGER_CONFIG_SERIAL1_MASK    ) > 0)?1:0;
 801bfac:	1dbb      	adds	r3, r7, #6
 801bfae:	881a      	ldrh	r2, [r3, #0]
 801bfb0:	23f0      	movs	r3, #240	; 0xf0
 801bfb2:	011b      	lsls	r3, r3, #4
 801bfb4:	4013      	ands	r3, r2
 801bfb6:	17da      	asrs	r2, r3, #31
 801bfb8:	1ad3      	subs	r3, r2, r3
 801bfba:	0fdb      	lsrs	r3, r3, #31
 801bfbc:	b2da      	uxtb	r2, r3
 801bfbe:	4b29      	ldr	r3, [pc, #164]	; (801c064 <log_init+0x15c>)
 801bfc0:	2101      	movs	r1, #1
 801bfc2:	400a      	ands	r2, r1
 801bfc4:	0150      	lsls	r0, r2, #5
 801bfc6:	781a      	ldrb	r2, [r3, #0]
 801bfc8:	2120      	movs	r1, #32
 801bfca:	438a      	bics	r2, r1
 801bfcc:	1c11      	adds	r1, r2, #0
 801bfce:	1c02      	adds	r2, r0, #0
 801bfd0:	430a      	orrs	r2, r1
 801bfd2:	701a      	strb	r2, [r3, #0]
  __log.onSerial2 = (( config & LOGGER_CONFIG_SERIAL2_MASK    ) > 0)?1:0;
 801bfd4:	1dbb      	adds	r3, r7, #6
 801bfd6:	881b      	ldrh	r3, [r3, #0]
 801bfd8:	22f0      	movs	r2, #240	; 0xf0
 801bfda:	4013      	ands	r3, r2
 801bfdc:	17da      	asrs	r2, r3, #31
 801bfde:	1ad3      	subs	r3, r2, r3
 801bfe0:	0fdb      	lsrs	r3, r3, #31
 801bfe2:	b2da      	uxtb	r2, r3
 801bfe4:	4b1f      	ldr	r3, [pc, #124]	; (801c064 <log_init+0x15c>)
 801bfe6:	2101      	movs	r1, #1
 801bfe8:	400a      	ands	r2, r1
 801bfea:	0190      	lsls	r0, r2, #6
 801bfec:	781a      	ldrb	r2, [r3, #0]
 801bfee:	2140      	movs	r1, #64	; 0x40
 801bff0:	438a      	bics	r2, r1
 801bff2:	1c11      	adds	r1, r2, #0
 801bff4:	1c02      	adds	r2, r0, #0
 801bff6:	430a      	orrs	r2, r1
 801bff8:	701a      	strb	r2, [r3, #0]
  __log.onDebug   = (( config & LOGGER_CONFIG_DEBUGLNK_MASK   ) > 0)?1:0;
 801bffa:	1dbb      	adds	r3, r7, #6
 801bffc:	881b      	ldrh	r3, [r3, #0]
 801bffe:	220f      	movs	r2, #15
 801c000:	4013      	ands	r3, r2
 801c002:	17da      	asrs	r2, r3, #31
 801c004:	1ad3      	subs	r3, r2, r3
 801c006:	0fdb      	lsrs	r3, r3, #31
 801c008:	b2da      	uxtb	r2, r3
 801c00a:	4b16      	ldr	r3, [pc, #88]	; (801c064 <log_init+0x15c>)
 801c00c:	01d0      	lsls	r0, r2, #7
 801c00e:	781a      	ldrb	r2, [r3, #0]
 801c010:	217f      	movs	r1, #127	; 0x7f
 801c012:	400a      	ands	r2, r1
 801c014:	1c11      	adds	r1, r2, #0
 801c016:	1c02      	adds	r2, r0, #0
 801c018:	430a      	orrs	r2, r1
 801c01a:	701a      	strb	r2, [r3, #0]
  __log.onFile    = (( config & LOGGER_CONFIG_FILE_MASK       ) > 0)?1:0;
 801c01c:	1dbb      	adds	r3, r7, #6
 801c01e:	881a      	ldrh	r2, [r3, #0]
 801c020:	23f0      	movs	r3, #240	; 0xf0
 801c022:	021b      	lsls	r3, r3, #8
 801c024:	4013      	ands	r3, r2
 801c026:	17da      	asrs	r2, r3, #31
 801c028:	1ad3      	subs	r3, r2, r3
 801c02a:	0fdb      	lsrs	r3, r3, #31
 801c02c:	b2da      	uxtb	r2, r3
 801c02e:	4b0d      	ldr	r3, [pc, #52]	; (801c064 <log_init+0x15c>)
 801c030:	2101      	movs	r1, #1
 801c032:	400a      	ands	r2, r1
 801c034:	0010      	movs	r0, r2
 801c036:	785a      	ldrb	r2, [r3, #1]
 801c038:	2101      	movs	r1, #1
 801c03a:	438a      	bics	r2, r1
 801c03c:	1c11      	adds	r1, r2, #0
 801c03e:	1c02      	adds	r2, r0, #0
 801c040:	430a      	orrs	r2, r1
 801c042:	705a      	strb	r2, [r3, #1]
  // Init the loggers
  if (__log.onFile) {
	  // Init file logger
	  // @TODO support file logger
  }
  __log.logConf = config;
 801c044:	4b07      	ldr	r3, [pc, #28]	; (801c064 <log_init+0x15c>)
 801c046:	1dba      	adds	r2, r7, #6
 801c048:	8812      	ldrh	r2, [r2, #0]
 801c04a:	805a      	strh	r2, [r3, #2]
  __log.ready = true;
 801c04c:	4b05      	ldr	r3, [pc, #20]	; (801c064 <log_init+0x15c>)
 801c04e:	781a      	ldrb	r2, [r3, #0]
 801c050:	2101      	movs	r1, #1
 801c052:	430a      	orrs	r2, r1
 801c054:	701a      	strb	r2, [r3, #0]
  return true;
 801c056:	2301      	movs	r3, #1
}
 801c058:	0018      	movs	r0, r3
 801c05a:	46bd      	mov	sp, r7
 801c05c:	b002      	add	sp, #8
 801c05e:	bd80      	pop	{r7, pc}
 801c060:	00001111 	.word	0x00001111
 801c064:	200016b8 	.word	0x200016b8
 801c068:	00002222 	.word	0x00002222
 801c06c:	00004444 	.word	0x00004444
 801c070:	00008888 	.word	0x00008888

0801c074 <log_error>:

/**
 * Log an error according to the configuration on the different
 * possible logger
 */
void log_error(char *format, ...) {
 801c074:	b40f      	push	{r0, r1, r2, r3}
 801c076:	b580      	push	{r7, lr}
 801c078:	b096      	sub	sp, #88	; 0x58
 801c07a:	af00      	add	r7, sp, #0
#if ITSDK_LOGGER_CONF > 0
  va_list args;
  char 	fmtBuffer[LOGGER_MAX_BUF_SZ]; 				// buffer for log line formating before printing
  if ( __log.logError && __log.ready ) {
 801c07c:	4b1f      	ldr	r3, [pc, #124]	; (801c0fc <log_error+0x88>)
 801c07e:	781b      	ldrb	r3, [r3, #0]
 801c080:	2202      	movs	r2, #2
 801c082:	4013      	ands	r3, r2
 801c084:	b2db      	uxtb	r3, r3
 801c086:	2b00      	cmp	r3, #0
 801c088:	d031      	beq.n	801c0ee <log_error+0x7a>
 801c08a:	4b1c      	ldr	r3, [pc, #112]	; (801c0fc <log_error+0x88>)
 801c08c:	781b      	ldrb	r3, [r3, #0]
 801c08e:	2201      	movs	r2, #1
 801c090:	4013      	ands	r3, r2
 801c092:	b2db      	uxtb	r3, r3
 801c094:	2b00      	cmp	r3, #0
 801c096:	d02a      	beq.n	801c0ee <log_error+0x7a>
    va_start(args,format);
 801c098:	2364      	movs	r3, #100	; 0x64
 801c09a:	18fb      	adds	r3, r7, r3
 801c09c:	657b      	str	r3, [r7, #84]	; 0x54
    vsnprintf(fmtBuffer,LOGGER_MAX_BUF_SZ,format,args);
 801c09e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c0a0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801c0a2:	1d38      	adds	r0, r7, #4
 801c0a4:	2150      	movs	r1, #80	; 0x50
 801c0a6:	f003 f8a9 	bl	801f1fc <vsniprintf>
    va_end(args);

    if ( __log.onSerial1 ) {
 801c0aa:	4b14      	ldr	r3, [pc, #80]	; (801c0fc <log_error+0x88>)
 801c0ac:	781b      	ldrb	r3, [r3, #0]
 801c0ae:	2220      	movs	r2, #32
 801c0b0:	4013      	ands	r3, r2
 801c0b2:	b2db      	uxtb	r3, r3
 801c0b4:	2b00      	cmp	r3, #0
 801c0b6:	d003      	beq.n	801c0c0 <log_error+0x4c>
      serial1_print(fmtBuffer);
 801c0b8:	1d3b      	adds	r3, r7, #4
 801c0ba:	0018      	movs	r0, r3
 801c0bc:	f002 f97a 	bl	801e3b4 <serial1_print>
    }

    if ( __log.onSerial2 ) {
 801c0c0:	4b0e      	ldr	r3, [pc, #56]	; (801c0fc <log_error+0x88>)
 801c0c2:	781b      	ldrb	r3, [r3, #0]
 801c0c4:	2240      	movs	r2, #64	; 0x40
 801c0c6:	4013      	ands	r3, r2
 801c0c8:	b2db      	uxtb	r3, r3
 801c0ca:	2b00      	cmp	r3, #0
 801c0cc:	d003      	beq.n	801c0d6 <log_error+0x62>
      serial2_print(fmtBuffer);
 801c0ce:	1d3b      	adds	r3, r7, #4
 801c0d0:	0018      	movs	r0, r3
 801c0d2:	f002 f987 	bl	801e3e4 <serial2_print>
    }

    if ( __log.onDebug  ) {
 801c0d6:	4b09      	ldr	r3, [pc, #36]	; (801c0fc <log_error+0x88>)
 801c0d8:	781b      	ldrb	r3, [r3, #0]
 801c0da:	227f      	movs	r2, #127	; 0x7f
 801c0dc:	4393      	bics	r3, r2
 801c0de:	b2db      	uxtb	r3, r3
 801c0e0:	2b00      	cmp	r3, #0
 801c0e2:	d004      	beq.n	801c0ee <log_error+0x7a>
      debug_print(DEBUG_PRINT_ERROR,fmtBuffer);
 801c0e4:	1d3b      	adds	r3, r7, #4
 801c0e6:	0019      	movs	r1, r3
 801c0e8:	2003      	movs	r0, #3
 801c0ea:	f002 fa2d 	bl	801e548 <debug_print>
      //logfile_print(fmtBuffer);
    }

  }
#endif
}
 801c0ee:	46c0      	nop			; (mov r8, r8)
 801c0f0:	46bd      	mov	sp, r7
 801c0f2:	b016      	add	sp, #88	; 0x58
 801c0f4:	bc80      	pop	{r7}
 801c0f6:	bc08      	pop	{r3}
 801c0f8:	b004      	add	sp, #16
 801c0fa:	4718      	bx	r3
 801c0fc:	200016b8 	.word	0x200016b8

0801c100 <log_warn>:

/**
 * Log a warning according to the configuration on the different
 * possible logger
 */
void log_warn(char *format, ...) {
 801c100:	b40f      	push	{r0, r1, r2, r3}
 801c102:	b580      	push	{r7, lr}
 801c104:	b096      	sub	sp, #88	; 0x58
 801c106:	af00      	add	r7, sp, #0
#if ITSDK_LOGGER_CONF > 0
  va_list args;
  char 	fmtBuffer[LOGGER_MAX_BUF_SZ]; 				// buffer for log line formating before printing
  if ( __log.logWarn  && __log.ready ) {
 801c108:	4b1f      	ldr	r3, [pc, #124]	; (801c188 <log_warn+0x88>)
 801c10a:	781b      	ldrb	r3, [r3, #0]
 801c10c:	2204      	movs	r2, #4
 801c10e:	4013      	ands	r3, r2
 801c110:	b2db      	uxtb	r3, r3
 801c112:	2b00      	cmp	r3, #0
 801c114:	d031      	beq.n	801c17a <log_warn+0x7a>
 801c116:	4b1c      	ldr	r3, [pc, #112]	; (801c188 <log_warn+0x88>)
 801c118:	781b      	ldrb	r3, [r3, #0]
 801c11a:	2201      	movs	r2, #1
 801c11c:	4013      	ands	r3, r2
 801c11e:	b2db      	uxtb	r3, r3
 801c120:	2b00      	cmp	r3, #0
 801c122:	d02a      	beq.n	801c17a <log_warn+0x7a>
    va_start(args,format);
 801c124:	2364      	movs	r3, #100	; 0x64
 801c126:	18fb      	adds	r3, r7, r3
 801c128:	657b      	str	r3, [r7, #84]	; 0x54
    vsnprintf(fmtBuffer,LOGGER_MAX_BUF_SZ,format,args);
 801c12a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c12c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801c12e:	1d38      	adds	r0, r7, #4
 801c130:	2150      	movs	r1, #80	; 0x50
 801c132:	f003 f863 	bl	801f1fc <vsniprintf>
    va_end(args);

    if ( __log.onSerial1 ) {
 801c136:	4b14      	ldr	r3, [pc, #80]	; (801c188 <log_warn+0x88>)
 801c138:	781b      	ldrb	r3, [r3, #0]
 801c13a:	2220      	movs	r2, #32
 801c13c:	4013      	ands	r3, r2
 801c13e:	b2db      	uxtb	r3, r3
 801c140:	2b00      	cmp	r3, #0
 801c142:	d003      	beq.n	801c14c <log_warn+0x4c>
    	serial1_print(fmtBuffer);
 801c144:	1d3b      	adds	r3, r7, #4
 801c146:	0018      	movs	r0, r3
 801c148:	f002 f934 	bl	801e3b4 <serial1_print>
    }

    if ( __log.onSerial2 ) {
 801c14c:	4b0e      	ldr	r3, [pc, #56]	; (801c188 <log_warn+0x88>)
 801c14e:	781b      	ldrb	r3, [r3, #0]
 801c150:	2240      	movs	r2, #64	; 0x40
 801c152:	4013      	ands	r3, r2
 801c154:	b2db      	uxtb	r3, r3
 801c156:	2b00      	cmp	r3, #0
 801c158:	d003      	beq.n	801c162 <log_warn+0x62>
    	serial2_print(fmtBuffer);
 801c15a:	1d3b      	adds	r3, r7, #4
 801c15c:	0018      	movs	r0, r3
 801c15e:	f002 f941 	bl	801e3e4 <serial2_print>
    }

    if ( __log.onDebug ) {
 801c162:	4b09      	ldr	r3, [pc, #36]	; (801c188 <log_warn+0x88>)
 801c164:	781b      	ldrb	r3, [r3, #0]
 801c166:	227f      	movs	r2, #127	; 0x7f
 801c168:	4393      	bics	r3, r2
 801c16a:	b2db      	uxtb	r3, r3
 801c16c:	2b00      	cmp	r3, #0
 801c16e:	d004      	beq.n	801c17a <log_warn+0x7a>
    	debug_print(DEBUG_PRINT_WARNING,fmtBuffer);
 801c170:	1d3b      	adds	r3, r7, #4
 801c172:	0019      	movs	r1, r3
 801c174:	2002      	movs	r0, #2
 801c176:	f002 f9e7 	bl	801e548 <debug_print>
        // @ TODO logfile_printf("%lu [warn] ",time_get_ms());
        //logfile_print(fmtBuffer);
    }
  }
#endif
}
 801c17a:	46c0      	nop			; (mov r8, r8)
 801c17c:	46bd      	mov	sp, r7
 801c17e:	b016      	add	sp, #88	; 0x58
 801c180:	bc80      	pop	{r7}
 801c182:	bc08      	pop	{r3}
 801c184:	b004      	add	sp, #16
 801c186:	4718      	bx	r3
 801c188:	200016b8 	.word	0x200016b8

0801c18c <log_info>:

/**
 * Log a info according to the configuration on the different
 * possible logger
 */
void log_info(char *format, ...) {
 801c18c:	b40f      	push	{r0, r1, r2, r3}
 801c18e:	b580      	push	{r7, lr}
 801c190:	b096      	sub	sp, #88	; 0x58
 801c192:	af00      	add	r7, sp, #0
#if ITSDK_LOGGER_CONF > 0
  va_list args;
  char 	fmtBuffer[LOGGER_MAX_BUF_SZ]; 				// buffer for log line formating before printing
  if ( __log.logInfo  && __log.ready ) {
 801c194:	4b1f      	ldr	r3, [pc, #124]	; (801c214 <log_info+0x88>)
 801c196:	781b      	ldrb	r3, [r3, #0]
 801c198:	2208      	movs	r2, #8
 801c19a:	4013      	ands	r3, r2
 801c19c:	b2db      	uxtb	r3, r3
 801c19e:	2b00      	cmp	r3, #0
 801c1a0:	d031      	beq.n	801c206 <log_info+0x7a>
 801c1a2:	4b1c      	ldr	r3, [pc, #112]	; (801c214 <log_info+0x88>)
 801c1a4:	781b      	ldrb	r3, [r3, #0]
 801c1a6:	2201      	movs	r2, #1
 801c1a8:	4013      	ands	r3, r2
 801c1aa:	b2db      	uxtb	r3, r3
 801c1ac:	2b00      	cmp	r3, #0
 801c1ae:	d02a      	beq.n	801c206 <log_info+0x7a>
    va_start(args,format);
 801c1b0:	2364      	movs	r3, #100	; 0x64
 801c1b2:	18fb      	adds	r3, r7, r3
 801c1b4:	657b      	str	r3, [r7, #84]	; 0x54
    vsnprintf(fmtBuffer,LOGGER_MAX_BUF_SZ,format,args);
 801c1b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c1b8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801c1ba:	1d38      	adds	r0, r7, #4
 801c1bc:	2150      	movs	r1, #80	; 0x50
 801c1be:	f003 f81d 	bl	801f1fc <vsniprintf>
    va_end(args);

    if ( __log.onSerial1 ) {
 801c1c2:	4b14      	ldr	r3, [pc, #80]	; (801c214 <log_info+0x88>)
 801c1c4:	781b      	ldrb	r3, [r3, #0]
 801c1c6:	2220      	movs	r2, #32
 801c1c8:	4013      	ands	r3, r2
 801c1ca:	b2db      	uxtb	r3, r3
 801c1cc:	2b00      	cmp	r3, #0
 801c1ce:	d003      	beq.n	801c1d8 <log_info+0x4c>
    	serial1_print(fmtBuffer);
 801c1d0:	1d3b      	adds	r3, r7, #4
 801c1d2:	0018      	movs	r0, r3
 801c1d4:	f002 f8ee 	bl	801e3b4 <serial1_print>
    }

    if ( __log.onSerial2 ) {
 801c1d8:	4b0e      	ldr	r3, [pc, #56]	; (801c214 <log_info+0x88>)
 801c1da:	781b      	ldrb	r3, [r3, #0]
 801c1dc:	2240      	movs	r2, #64	; 0x40
 801c1de:	4013      	ands	r3, r2
 801c1e0:	b2db      	uxtb	r3, r3
 801c1e2:	2b00      	cmp	r3, #0
 801c1e4:	d003      	beq.n	801c1ee <log_info+0x62>
    	serial2_print(fmtBuffer);
 801c1e6:	1d3b      	adds	r3, r7, #4
 801c1e8:	0018      	movs	r0, r3
 801c1ea:	f002 f8fb 	bl	801e3e4 <serial2_print>
    }

    if ( __log.onDebug ) {
 801c1ee:	4b09      	ldr	r3, [pc, #36]	; (801c214 <log_info+0x88>)
 801c1f0:	781b      	ldrb	r3, [r3, #0]
 801c1f2:	227f      	movs	r2, #127	; 0x7f
 801c1f4:	4393      	bics	r3, r2
 801c1f6:	b2db      	uxtb	r3, r3
 801c1f8:	2b00      	cmp	r3, #0
 801c1fa:	d004      	beq.n	801c206 <log_info+0x7a>
    	debug_print(DEBUG_PRINT_INFO, fmtBuffer);
 801c1fc:	1d3b      	adds	r3, r7, #4
 801c1fe:	0019      	movs	r1, r3
 801c200:	2001      	movs	r0, #1
 801c202:	f002 f9a1 	bl	801e548 <debug_print>
        // @ TODO logfile_printf("%lu [info] ",time_get_ms());
        //logfile_print(__log.fmtBuffer);
    }
  }
#endif
}
 801c206:	46c0      	nop			; (mov r8, r8)
 801c208:	46bd      	mov	sp, r7
 801c20a:	b016      	add	sp, #88	; 0x58
 801c20c:	bc80      	pop	{r7}
 801c20e:	bc08      	pop	{r3}
 801c210:	b004      	add	sp, #16
 801c212:	4718      	bx	r3
 801c214:	200016b8 	.word	0x200016b8

0801c218 <itsdk_lorawan_setup>:

/**
 * Init the LoRaWan Stack
 * Actually static
 */
itsdk_lorawan_init_t itsdk_lorawan_setup(uint16_t region, itsdk_lorawan_channelInit_t * channelConfig) {
 801c218:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c21a:	b095      	sub	sp, #84	; 0x54
 801c21c:	af02      	add	r7, sp, #8
 801c21e:	0002      	movs	r2, r0
 801c220:	6039      	str	r1, [r7, #0]
 801c222:	1dbb      	adds	r3, r7, #6
 801c224:	801a      	strh	r2, [r3, #0]
	static uint8_t devEui[8];
	static uint8_t appEui[8];
	static uint8_t appKey[16];

	// On first run we store the configuration into the SecureStore
	itsdk_lorawan_resetFactoryDefaults(false);
 801c226:	2000      	movs	r0, #0
 801c228:	f000 fa66 	bl	801c6f8 <itsdk_lorawan_resetFactoryDefaults>

	itsdk_lorawan_getDeviceEUI(devEui);
 801c22c:	4b72      	ldr	r3, [pc, #456]	; (801c3f8 <itsdk_lorawan_setup+0x1e0>)
 801c22e:	0018      	movs	r0, r3
 801c230:	f000 f9d6 	bl	801c5e0 <itsdk_lorawan_getDeviceEUI>
	itsdk_lorawan_getAppEUI(appEui);
 801c234:	4b71      	ldr	r3, [pc, #452]	; (801c3fc <itsdk_lorawan_setup+0x1e4>)
 801c236:	0018      	movs	r0, r3
 801c238:	f000 fa04 	bl	801c644 <itsdk_lorawan_getAppEUI>
	itsdk_lorawan_getAppKEY(appKey);
 801c23c:	4b70      	ldr	r3, [pc, #448]	; (801c400 <itsdk_lorawan_setup+0x1e8>)
 801c23e:	0018      	movs	r0, r3
 801c240:	f000 fa32 	bl	801c6a8 <itsdk_lorawan_getAppKEY>

//	log_info_array("DEV :",devEui,8);
//	log_info_array("APP :",appEui,8);
//	log_info_array("KEY :",appKey,16);

	Radio.IoInit();
 801c244:	4b6f      	ldr	r3, [pc, #444]	; (801c404 <itsdk_lorawan_setup+0x1ec>)
 801c246:	681b      	ldr	r3, [r3, #0]
 801c248:	4798      	blx	r3
	#if ITSDK_CONFIGURATION_MODE == __CONFIG_STATIC
		#if (ITSDK_LORAWAN_DEVEUI_SRC == __LORAWAN_DEVEUI_GENERATED)
		  itsdk_getUniqId(devEui, 8);
		#endif
	#else
	   if ( itsdk_config.sdk.lorawan.devEuiType == __LORAWAN_DEVEUI_GENERATED ) {
 801c24a:	4b6f      	ldr	r3, [pc, #444]	; (801c408 <itsdk_lorawan_setup+0x1f0>)
 801c24c:	7a9b      	ldrb	r3, [r3, #10]
 801c24e:	2230      	movs	r2, #48	; 0x30
 801c250:	4013      	ands	r3, r2
 801c252:	b2db      	uxtb	r3, r3
 801c254:	2b20      	cmp	r3, #32
 801c256:	d104      	bne.n	801c262 <itsdk_lorawan_setup+0x4a>
		  itsdk_getUniqId(devEui, 8);
 801c258:	4b67      	ldr	r3, [pc, #412]	; (801c3f8 <itsdk_lorawan_setup+0x1e0>)
 801c25a:	2108      	movs	r1, #8
 801c25c:	0018      	movs	r0, r3
 801c25e:	f002 f843 	bl	801e2e8 <itsdk_getUniqId>
		__config.adrEnable =LORAWAN_ADR_OFF;
		#else
		  #error Invalid ITSDK_LORAWAN_ADR configuration
		#endif
    #else
		__config.adrEnable = (itsdk_config.sdk.lorawan.adrMode == __LORAWAN_ADR_ON)?LORAWAN_ADR_ON:LORAWAN_ADR_OFF;
 801c262:	4b69      	ldr	r3, [pc, #420]	; (801c408 <itsdk_lorawan_setup+0x1f0>)
 801c264:	7a9b      	ldrb	r3, [r3, #10]
 801c266:	223f      	movs	r2, #63	; 0x3f
 801c268:	4393      	bics	r3, r2
 801c26a:	b2db      	uxtb	r3, r3
 801c26c:	3b80      	subs	r3, #128	; 0x80
 801c26e:	425a      	negs	r2, r3
 801c270:	4153      	adcs	r3, r2
 801c272:	b2da      	uxtb	r2, r3
 801c274:	2114      	movs	r1, #20
 801c276:	187b      	adds	r3, r7, r1
 801c278:	701a      	strb	r2, [r3, #0]
	#endif

	#if ITSDK_CONFIGURATION_MODE == __CONFIG_STATIC
	__config.JoinType = ITSDK_LORAWAN_ACTIVATION;
	#else
	__config.JoinType = itsdk_config.sdk.lorawan.joinMode;
 801c27a:	4b63      	ldr	r3, [pc, #396]	; (801c408 <itsdk_lorawan_setup+0x1f0>)
 801c27c:	7a9b      	ldrb	r3, [r3, #10]
 801c27e:	079b      	lsls	r3, r3, #30
 801c280:	0f9b      	lsrs	r3, r3, #30
 801c282:	b2db      	uxtb	r3, r3
 801c284:	001a      	movs	r2, r3
 801c286:	187b      	adds	r3, r7, r1
 801c288:	719a      	strb	r2, [r3, #6]
	#endif
	__config.devEui = devEui;
 801c28a:	187b      	adds	r3, r7, r1
 801c28c:	4a5a      	ldr	r2, [pc, #360]	; (801c3f8 <itsdk_lorawan_setup+0x1e0>)
 801c28e:	609a      	str	r2, [r3, #8]
		__config.enablePublicNetwork = true;
		#else
		__config.enablePublicNetwork = false;
		#endif
	#else
	__config.enablePublicNetwork = (itsdk_config.sdk.lorawan.networkType == __LORAWAN_NWK_PUBLIC);
 801c290:	4b5d      	ldr	r3, [pc, #372]	; (801c408 <itsdk_lorawan_setup+0x1f0>)
 801c292:	7a9b      	ldrb	r3, [r3, #10]
 801c294:	220c      	movs	r2, #12
 801c296:	4013      	ands	r3, r2
 801c298:	b2db      	uxtb	r3, r3
 801c29a:	3b04      	subs	r3, #4
 801c29c:	425a      	negs	r2, r3
 801c29e:	4153      	adcs	r3, r2
 801c2a0:	b2da      	uxtb	r2, r3
 801c2a2:	187b      	adds	r3, r7, r1
 801c2a4:	709a      	strb	r2, [r3, #2]
	#endif


	__config.region = region;
 801c2a6:	187b      	adds	r3, r7, r1
 801c2a8:	1dba      	adds	r2, r7, #6
 801c2aa:	8812      	ldrh	r2, [r2, #0]
 801c2ac:	809a      	strh	r2, [r3, #4]
	__config.txDatarate = ITSDK_LORAWAN_DEFAULT_DR;
 801c2ae:	187b      	adds	r3, r7, r1
 801c2b0:	2201      	movs	r2, #1
 801c2b2:	705a      	strb	r2, [r3, #1]
	#if ( ITSDK_LORAWAN_ACTIVATION &  __LORAWAN_OTAA )> 0
	__config.config.otaa.appEui = appEui;
 801c2b4:	187b      	adds	r3, r7, r1
 801c2b6:	4a51      	ldr	r2, [pc, #324]	; (801c3fc <itsdk_lorawan_setup+0x1e4>)
 801c2b8:	60da      	str	r2, [r3, #12]
	__config.config.otaa.appKey = appKey;
 801c2ba:	187b      	adds	r3, r7, r1
 801c2bc:	4a50      	ldr	r2, [pc, #320]	; (801c400 <itsdk_lorawan_setup+0x1e8>)
 801c2be:	611a      	str	r2, [r3, #16]
	__config.config.otaa.nwkKey = appKey;
 801c2c0:	187b      	adds	r3, r7, r1
 801c2c2:	4a4f      	ldr	r2, [pc, #316]	; (801c400 <itsdk_lorawan_setup+0x1e8>)
 801c2c4:	615a      	str	r2, [r3, #20]
	#else
		#error "ABP not yest supported"
	#endif

	lorawan_driver_LORA_Init(&__config);
 801c2c6:	000c      	movs	r4, r1
 801c2c8:	187b      	adds	r3, r7, r1
 801c2ca:	0018      	movs	r0, r3
 801c2cc:	f7ec f800 	bl	80082d0 <lorawan_driver_LORA_Init>
	bzero(&__config,sizeof(__config));
 801c2d0:	193b      	adds	r3, r7, r4
 801c2d2:	2120      	movs	r1, #32
 801c2d4:	0018      	movs	r0, r3
 801c2d6:	f002 fee7 	bl	801f0a8 <bzero>

	if ( channelConfig != NULL ) {
 801c2da:	683b      	ldr	r3, [r7, #0]
 801c2dc:	2b00      	cmp	r3, #0
 801c2de:	d100      	bne.n	801c2e2 <itsdk_lorawan_setup+0xca>
 801c2e0:	e084      	b.n	801c3ec <itsdk_lorawan_setup+0x1d4>
		switch (region) {
 801c2e2:	1dbb      	adds	r3, r7, #6
 801c2e4:	881a      	ldrh	r2, [r3, #0]
 801c2e6:	2380      	movs	r3, #128	; 0x80
 801c2e8:	005b      	lsls	r3, r3, #1
 801c2ea:	429a      	cmp	r2, r3
 801c2ec:	d142      	bne.n	801c374 <itsdk_lorawan_setup+0x15c>
		case __LORAWAN_REGION_US915:
		{
			// US915 does not allow to addChannel ; all the possible channel are already defined
			// and activated. Here we basically unactivate the one we do not need
			uint16_t channels[6];
			bzero(channels,6*sizeof(uint16_t));
 801c2ee:	2308      	movs	r3, #8
 801c2f0:	18fb      	adds	r3, r7, r3
 801c2f2:	210c      	movs	r1, #12
 801c2f4:	0018      	movs	r0, r3
 801c2f6:	f002 fed7 	bl	801f0a8 <bzero>
			for ( int i=0 ; i < channelConfig->num ; i++ ) {
 801c2fa:	2300      	movs	r3, #0
 801c2fc:	647b      	str	r3, [r7, #68]	; 0x44
 801c2fe:	e02a      	b.n	801c356 <itsdk_lorawan_setup+0x13e>
				int channel = (channelConfig->channels[i].frequency - 902300000) / 200000; // get chan ID on the 72
 801c300:	683a      	ldr	r2, [r7, #0]
 801c302:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801c304:	011b      	lsls	r3, r3, #4
 801c306:	18d3      	adds	r3, r2, r3
 801c308:	3308      	adds	r3, #8
 801c30a:	681b      	ldr	r3, [r3, #0]
 801c30c:	4a3f      	ldr	r2, [pc, #252]	; (801c40c <itsdk_lorawan_setup+0x1f4>)
 801c30e:	4694      	mov	ip, r2
 801c310:	4463      	add	r3, ip
 801c312:	493f      	ldr	r1, [pc, #252]	; (801c410 <itsdk_lorawan_setup+0x1f8>)
 801c314:	0018      	movs	r0, r3
 801c316:	f7e3 feff 	bl	8000118 <__udivsi3>
 801c31a:	0003      	movs	r3, r0
 801c31c:	63fb      	str	r3, [r7, #60]	; 0x3c
				int index = channel >> 4; // associated word
 801c31e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c320:	111b      	asrs	r3, r3, #4
 801c322:	63bb      	str	r3, [r7, #56]	; 0x38
				int shift = channel & 0x0F;
 801c324:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c326:	220f      	movs	r2, #15
 801c328:	4013      	ands	r3, r2
 801c32a:	637b      	str	r3, [r7, #52]	; 0x34
				channels[index] |= (1 << shift);
 801c32c:	2008      	movs	r0, #8
 801c32e:	183b      	adds	r3, r7, r0
 801c330:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c332:	0052      	lsls	r2, r2, #1
 801c334:	5ad3      	ldrh	r3, [r2, r3]
 801c336:	b21a      	sxth	r2, r3
 801c338:	2101      	movs	r1, #1
 801c33a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c33c:	4099      	lsls	r1, r3
 801c33e:	000b      	movs	r3, r1
 801c340:	b21b      	sxth	r3, r3
 801c342:	4313      	orrs	r3, r2
 801c344:	b21b      	sxth	r3, r3
 801c346:	b299      	uxth	r1, r3
 801c348:	183b      	adds	r3, r7, r0
 801c34a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c34c:	0052      	lsls	r2, r2, #1
 801c34e:	52d1      	strh	r1, [r2, r3]
			for ( int i=0 ; i < channelConfig->num ; i++ ) {
 801c350:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801c352:	3301      	adds	r3, #1
 801c354:	647b      	str	r3, [r7, #68]	; 0x44
 801c356:	683b      	ldr	r3, [r7, #0]
 801c358:	781b      	ldrb	r3, [r3, #0]
 801c35a:	001a      	movs	r2, r3
 801c35c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801c35e:	4293      	cmp	r3, r2
 801c360:	dbce      	blt.n	801c300 <itsdk_lorawan_setup+0xe8>
				LOG_DEBUG_LORAWANSTK(("Add channel %d at freq %d on idx %d with shift %d\r\n",channel,channelConfig->channels[i].frequency,index,shift));
			}
			lorawan_driver_LORA_SelectChannels(__LORAWAN_REGION_US915,channels);
 801c362:	2308      	movs	r3, #8
 801c364:	18fa      	adds	r2, r7, r3
 801c366:	2380      	movs	r3, #128	; 0x80
 801c368:	005b      	lsls	r3, r3, #1
 801c36a:	0011      	movs	r1, r2
 801c36c:	0018      	movs	r0, r3
 801c36e:	f7ec fb11 	bl	8008994 <lorawan_driver_LORA_SelectChannels>
		}
		break;
 801c372:	e03c      	b.n	801c3ee <itsdk_lorawan_setup+0x1d6>

		default:
			for ( int i=0 ; i < channelConfig->num ; i++ ) {
 801c374:	2300      	movs	r3, #0
 801c376:	643b      	str	r3, [r7, #64]	; 0x40
 801c378:	e031      	b.n	801c3de <itsdk_lorawan_setup+0x1c6>
				if ( lorawan_driver_LORA_AddChannel(
 801c37a:	683a      	ldr	r2, [r7, #0]
 801c37c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c37e:	011b      	lsls	r3, r3, #4
 801c380:	18d3      	adds	r3, r2, r3
 801c382:	3304      	adds	r3, #4
 801c384:	7818      	ldrb	r0, [r3, #0]
 801c386:	683a      	ldr	r2, [r7, #0]
 801c388:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c38a:	011b      	lsls	r3, r3, #4
 801c38c:	18d3      	adds	r3, r2, r3
 801c38e:	3308      	adds	r3, #8
 801c390:	681c      	ldr	r4, [r3, #0]
 801c392:	683a      	ldr	r2, [r7, #0]
 801c394:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c396:	011b      	lsls	r3, r3, #4
 801c398:	18d3      	adds	r3, r2, r3
 801c39a:	330c      	adds	r3, #12
 801c39c:	681d      	ldr	r5, [r3, #0]
 801c39e:	683a      	ldr	r2, [r7, #0]
 801c3a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c3a2:	011b      	lsls	r3, r3, #4
 801c3a4:	18d3      	adds	r3, r2, r3
 801c3a6:	3310      	adds	r3, #16
 801c3a8:	781e      	ldrb	r6, [r3, #0]
 801c3aa:	683a      	ldr	r2, [r7, #0]
 801c3ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c3ae:	011b      	lsls	r3, r3, #4
 801c3b0:	18d3      	adds	r3, r2, r3
 801c3b2:	3311      	adds	r3, #17
 801c3b4:	781b      	ldrb	r3, [r3, #0]
 801c3b6:	6839      	ldr	r1, [r7, #0]
 801c3b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801c3ba:	0112      	lsls	r2, r2, #4
 801c3bc:	188a      	adds	r2, r1, r2
 801c3be:	3212      	adds	r2, #18
 801c3c0:	7812      	ldrb	r2, [r2, #0]
 801c3c2:	9201      	str	r2, [sp, #4]
 801c3c4:	9300      	str	r3, [sp, #0]
 801c3c6:	0033      	movs	r3, r6
 801c3c8:	002a      	movs	r2, r5
 801c3ca:	0021      	movs	r1, r4
 801c3cc:	f7ec fa78 	bl	80088c0 <lorawan_driver_LORA_AddChannel>
 801c3d0:	1e03      	subs	r3, r0, #0
 801c3d2:	d001      	beq.n	801c3d8 <itsdk_lorawan_setup+0x1c0>
						channelConfig->channels[i].frequency,
						channelConfig->channels[i].frequencyRx,
						channelConfig->channels[i].minDr,
						channelConfig->channels[i].maxDr,
						channelConfig->channels[i].band
					) != LORAWAN_CHANNEL_SUCCESS ) return LORAWAN_INIT_CHANNEL_FAILED;
 801c3d4:	2301      	movs	r3, #1
 801c3d6:	e00b      	b.n	801c3f0 <itsdk_lorawan_setup+0x1d8>
			for ( int i=0 ; i < channelConfig->num ; i++ ) {
 801c3d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c3da:	3301      	adds	r3, #1
 801c3dc:	643b      	str	r3, [r7, #64]	; 0x40
 801c3de:	683b      	ldr	r3, [r7, #0]
 801c3e0:	781b      	ldrb	r3, [r3, #0]
 801c3e2:	001a      	movs	r2, r3
 801c3e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c3e6:	4293      	cmp	r3, r2
 801c3e8:	dbc7      	blt.n	801c37a <itsdk_lorawan_setup+0x162>
			}
			break;
 801c3ea:	e000      	b.n	801c3ee <itsdk_lorawan_setup+0x1d6>
		}
	}
 801c3ec:	46c0      	nop			; (mov r8, r8)
	return LORAWAN_INIT_SUCESS;
 801c3ee:	2300      	movs	r3, #0
}
 801c3f0:	0018      	movs	r0, r3
 801c3f2:	46bd      	mov	sp, r7
 801c3f4:	b013      	add	sp, #76	; 0x4c
 801c3f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c3f8:	2000120c 	.word	0x2000120c
 801c3fc:	20001214 	.word	0x20001214
 801c400:	2000121c 	.word	0x2000121c
 801c404:	08021b54 	.word	0x08021b54
 801c408:	20001688 	.word	0x20001688
 801c40c:	ca37fea0 	.word	0xca37fea0
 801c410:	00030d40 	.word	0x00030d40

0801c414 <itsdk_lorawan_join_sync>:
 *                   it allows to switch low power but is a higher risk in term of timing respect.
 *                   returns (LORAWAN_JOIN_SUCCESS/LORAWAN_JOIN_FAILED)
 *                   in async mode the given function will be called with the join status.
 *                   When no function is proposed, the status can be polled.
 */
itsdk_lorawan_join_t itsdk_lorawan_join_sync() {
 801c414:	b580      	push	{r7, lr}
 801c416:	af00      	add	r7, sp, #0
	LOG_INFO_LORAWANSTK(("itsdk_lorawan_join_sync\r\n"));
	return lorawan_driver_LORA_Join(LORAWAN_RUN_SYNC);
 801c418:	2000      	movs	r0, #0
 801c41a:	f7ec f8a5 	bl	8008568 <lorawan_driver_LORA_Join>
 801c41e:	0003      	movs	r3, r0
}
 801c420:	0018      	movs	r0, r3
 801c422:	46bd      	mov	sp, r7
 801c424:	bd80      	pop	{r7, pc}
	...

0801c428 <lorawan_driver_onJoinSuccess>:

// Override the underlaying callbacks
static void (*__itsdk_lorawan_join_cb)(itsdk_lorawan_join_t status)  = NULL;
void lorawan_driver_onJoinSuccess() {
 801c428:	b580      	push	{r7, lr}
 801c42a:	af00      	add	r7, sp, #0
	LOG_INFO_LORAWANSTK(("** onJoinSuccess\r\n"));
	if (__itsdk_lorawan_join_cb != NULL) {
 801c42c:	4b05      	ldr	r3, [pc, #20]	; (801c444 <lorawan_driver_onJoinSuccess+0x1c>)
 801c42e:	681b      	ldr	r3, [r3, #0]
 801c430:	2b00      	cmp	r3, #0
 801c432:	d003      	beq.n	801c43c <lorawan_driver_onJoinSuccess+0x14>
		__itsdk_lorawan_join_cb(LORAWAN_JOIN_SUCCESS);
 801c434:	4b03      	ldr	r3, [pc, #12]	; (801c444 <lorawan_driver_onJoinSuccess+0x1c>)
 801c436:	681b      	ldr	r3, [r3, #0]
 801c438:	2001      	movs	r0, #1
 801c43a:	4798      	blx	r3
	}
}
 801c43c:	46c0      	nop			; (mov r8, r8)
 801c43e:	46bd      	mov	sp, r7
 801c440:	bd80      	pop	{r7, pc}
 801c442:	46c0      	nop			; (mov r8, r8)
 801c444:	20001204 	.word	0x20001204

0801c448 <lorawan_driver_onJoinFailed>:
void lorawan_driver_onJoinFailed() {
 801c448:	b580      	push	{r7, lr}
 801c44a:	af00      	add	r7, sp, #0
	LOG_INFO_LORAWANSTK(("** onJoinFailed\r\n"));
	if (__itsdk_lorawan_join_cb != NULL) {
 801c44c:	4b05      	ldr	r3, [pc, #20]	; (801c464 <lorawan_driver_onJoinFailed+0x1c>)
 801c44e:	681b      	ldr	r3, [r3, #0]
 801c450:	2b00      	cmp	r3, #0
 801c452:	d003      	beq.n	801c45c <lorawan_driver_onJoinFailed+0x14>
		__itsdk_lorawan_join_cb(LORAWAN_JOIN_FAILED);
 801c454:	4b03      	ldr	r3, [pc, #12]	; (801c464 <lorawan_driver_onJoinFailed+0x1c>)
 801c456:	681b      	ldr	r3, [r3, #0]
 801c458:	2002      	movs	r0, #2
 801c45a:	4798      	blx	r3
	}
}
 801c45c:	46c0      	nop			; (mov r8, r8)
 801c45e:	46bd      	mov	sp, r7
 801c460:	bd80      	pop	{r7, pc}
 801c462:	46c0      	nop			; (mov r8, r8)
 801c464:	20001204 	.word	0x20001204

0801c468 <itsdk_lorawan_hasjoined>:
}

/**
 * Return true once the device has joined the the network
 */
bool itsdk_lorawan_hasjoined() {
 801c468:	b580      	push	{r7, lr}
 801c46a:	af00      	add	r7, sp, #0
	LOG_DEBUG_LORAWANSTK(("itsdk_lorawan_hasjoined\r\n"));
	return ( lorawan_driver_LORA_getJoinState() == LORAWAN_STATE_JOIN_SUCCESS);
 801c46c:	f7ec fab8 	bl	80089e0 <lorawan_driver_LORA_getJoinState>
 801c470:	0003      	movs	r3, r0
 801c472:	3b03      	subs	r3, #3
 801c474:	425a      	negs	r2, r3
 801c476:	4153      	adcs	r3, r2
 801c478:	b2db      	uxtb	r3, r3
}
 801c47a:	0018      	movs	r0, r3
 801c47c:	46bd      	mov	sp, r7
 801c47e:	bd80      	pop	{r7, pc}

0801c480 <__itsdk_lorawan_encrypt_payload>:
 */
static void __itsdk_lorawan_encrypt_payload(
	uint8_t * payload,
	uint8_t   payloadSize,
	itdsk_payload_encrypt_t encrypt
){
 801c480:	b580      	push	{r7, lr}
 801c482:	b082      	sub	sp, #8
 801c484:	af00      	add	r7, sp, #0
 801c486:	6078      	str	r0, [r7, #4]
 801c488:	0008      	movs	r0, r1
 801c48a:	0011      	movs	r1, r2
 801c48c:	1cfb      	adds	r3, r7, #3
 801c48e:	1c02      	adds	r2, r0, #0
 801c490:	701a      	strb	r2, [r3, #0]
 801c492:	1cbb      	adds	r3, r7, #2
 801c494:	1c0a      	adds	r2, r1, #0
 801c496:	701a      	strb	r2, [r3, #0]
				sharedKey,							// 24b hardcoded value (hidden with ITSDK_PROTECT_KEY)
				masterKey							// 128B key used for encryption (hidden with ITSDK_PROTECT_KEY)
		);
	}
#endif
}
 801c498:	46c0      	nop			; (mov r8, r8)
 801c49a:	46bd      	mov	sp, r7
 801c49c:	b002      	add	sp, #8
 801c49e:	bd80      	pop	{r7, pc}

0801c4a0 <itsdk_lorawan_send_sync>:
		uint8_t	  retry,
		uint8_t	* rPort,													// In case of reception - Port (uint8_t)
		uint8_t	* rSize,													// In case of reception - Size (uint8_t) - init with buffer max size
		uint8_t * rData,													// In case of recpetion - Data (uint8_t[] bcopied)
		itdsk_payload_encrypt_t encrypt										// End to End encryption mode
) {
 801c4a0:	b590      	push	{r4, r7, lr}
 801c4a2:	b089      	sub	sp, #36	; 0x24
 801c4a4:	af06      	add	r7, sp, #24
 801c4a6:	6078      	str	r0, [r7, #4]
 801c4a8:	000c      	movs	r4, r1
 801c4aa:	0010      	movs	r0, r2
 801c4ac:	0019      	movs	r1, r3
 801c4ae:	1cfb      	adds	r3, r7, #3
 801c4b0:	1c22      	adds	r2, r4, #0
 801c4b2:	701a      	strb	r2, [r3, #0]
 801c4b4:	1cbb      	adds	r3, r7, #2
 801c4b6:	1c02      	adds	r2, r0, #0
 801c4b8:	701a      	strb	r2, [r3, #0]
 801c4ba:	1c7b      	adds	r3, r7, #1
 801c4bc:	1c0a      	adds	r2, r1, #0
 801c4be:	701a      	strb	r2, [r3, #0]
	LOG_INFO_LORAWANSTK(("itsdk_lorawan_send_sync\r\n"));
	__itsdk_lorawan_encrypt_payload(payload,payloadSize,encrypt);
 801c4c0:	232c      	movs	r3, #44	; 0x2c
 801c4c2:	18fb      	adds	r3, r7, r3
 801c4c4:	781a      	ldrb	r2, [r3, #0]
 801c4c6:	1cfb      	adds	r3, r7, #3
 801c4c8:	7819      	ldrb	r1, [r3, #0]
 801c4ca:	687b      	ldr	r3, [r7, #4]
 801c4cc:	0018      	movs	r0, r3
 801c4ce:	f7ff ffd7 	bl	801c480 <__itsdk_lorawan_encrypt_payload>
	return lorawan_driver_LORA_Send(payload,payloadSize,port,dataRate,confirm,retry,LORAWAN_RUN_SYNC,rPort,rSize,rData);
 801c4d2:	1c7b      	adds	r3, r7, #1
 801c4d4:	781c      	ldrb	r4, [r3, #0]
 801c4d6:	1cbb      	adds	r3, r7, #2
 801c4d8:	781a      	ldrb	r2, [r3, #0]
 801c4da:	1cfb      	adds	r3, r7, #3
 801c4dc:	7819      	ldrb	r1, [r3, #0]
 801c4de:	6878      	ldr	r0, [r7, #4]
 801c4e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c4e2:	9305      	str	r3, [sp, #20]
 801c4e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c4e6:	9304      	str	r3, [sp, #16]
 801c4e8:	6a3b      	ldr	r3, [r7, #32]
 801c4ea:	9303      	str	r3, [sp, #12]
 801c4ec:	2300      	movs	r3, #0
 801c4ee:	9302      	str	r3, [sp, #8]
 801c4f0:	231c      	movs	r3, #28
 801c4f2:	18fb      	adds	r3, r7, r3
 801c4f4:	781b      	ldrb	r3, [r3, #0]
 801c4f6:	9301      	str	r3, [sp, #4]
 801c4f8:	2318      	movs	r3, #24
 801c4fa:	18fb      	adds	r3, r7, r3
 801c4fc:	781b      	ldrb	r3, [r3, #0]
 801c4fe:	9300      	str	r3, [sp, #0]
 801c500:	0023      	movs	r3, r4
 801c502:	f7ec f8bd 	bl	8008680 <lorawan_driver_LORA_Send>
 801c506:	0003      	movs	r3, r0
}
 801c508:	0018      	movs	r0, r3
 801c50a:	46bd      	mov	sp, r7
 801c50c:	b003      	add	sp, #12
 801c50e:	bd90      	pop	{r4, r7, pc}

0801c510 <lorawan_driver_onSendSuccessAckFailed>:

static void (*__itsdk_lorawan_send_cb)(itsdk_lorawan_send_t status, uint8_t port, uint8_t size, uint8_t * rxData) = NULL;
void lorawan_driver_onSendSuccessAckFailed() {
 801c510:	b5b0      	push	{r4, r5, r7, lr}
 801c512:	af00      	add	r7, sp, #0
	LOG_INFO_LORAWANSTK(("**onSendSuccessAckFailed\r\n"));
	if (__itsdk_lorawan_send_cb != NULL) {
 801c514:	4b06      	ldr	r3, [pc, #24]	; (801c530 <lorawan_driver_onSendSuccessAckFailed+0x20>)
 801c516:	681b      	ldr	r3, [r3, #0]
 801c518:	2b00      	cmp	r3, #0
 801c51a:	d006      	beq.n	801c52a <lorawan_driver_onSendSuccessAckFailed+0x1a>
		__itsdk_lorawan_send_cb(LORAWAN_SEND_SENT,0,0,NULL);
 801c51c:	4b04      	ldr	r3, [pc, #16]	; (801c530 <lorawan_driver_onSendSuccessAckFailed+0x20>)
 801c51e:	681c      	ldr	r4, [r3, #0]
 801c520:	2300      	movs	r3, #0
 801c522:	2200      	movs	r2, #0
 801c524:	2100      	movs	r1, #0
 801c526:	2001      	movs	r0, #1
 801c528:	47a0      	blx	r4
	}
}
 801c52a:	46c0      	nop			; (mov r8, r8)
 801c52c:	46bd      	mov	sp, r7
 801c52e:	bdb0      	pop	{r4, r5, r7, pc}
 801c530:	20001208 	.word	0x20001208

0801c534 <lorawan_driver_onSendAckSuccess>:
void lorawan_driver_onSendAckSuccess() {
 801c534:	b5b0      	push	{r4, r5, r7, lr}
 801c536:	af00      	add	r7, sp, #0
	LOG_INFO_LORAWANSTK(("**onSendSuccessAckSuccess\r\n"));
	if (__itsdk_lorawan_send_cb != NULL) {
 801c538:	4b06      	ldr	r3, [pc, #24]	; (801c554 <lorawan_driver_onSendAckSuccess+0x20>)
 801c53a:	681b      	ldr	r3, [r3, #0]
 801c53c:	2b00      	cmp	r3, #0
 801c53e:	d006      	beq.n	801c54e <lorawan_driver_onSendAckSuccess+0x1a>
		__itsdk_lorawan_send_cb(LORAWAN_SEND_ACKED,0,0,NULL);
 801c540:	4b04      	ldr	r3, [pc, #16]	; (801c554 <lorawan_driver_onSendAckSuccess+0x20>)
 801c542:	681c      	ldr	r4, [r3, #0]
 801c544:	2300      	movs	r3, #0
 801c546:	2200      	movs	r2, #0
 801c548:	2100      	movs	r1, #0
 801c54a:	2002      	movs	r0, #2
 801c54c:	47a0      	blx	r4
	}
}
 801c54e:	46c0      	nop			; (mov r8, r8)
 801c550:	46bd      	mov	sp, r7
 801c552:	bdb0      	pop	{r4, r5, r7, pc}
 801c554:	20001208 	.word	0x20001208

0801c558 <lorawan_driver_onSendSuccess>:
void lorawan_driver_onSendSuccess() {
 801c558:	b5b0      	push	{r4, r5, r7, lr}
 801c55a:	af00      	add	r7, sp, #0
	LOG_INFO_LORAWANSTK(("**onSendSuccess\r\n"));
	if (__itsdk_lorawan_send_cb != NULL) {
 801c55c:	4b06      	ldr	r3, [pc, #24]	; (801c578 <lorawan_driver_onSendSuccess+0x20>)
 801c55e:	681b      	ldr	r3, [r3, #0]
 801c560:	2b00      	cmp	r3, #0
 801c562:	d006      	beq.n	801c572 <lorawan_driver_onSendSuccess+0x1a>
		__itsdk_lorawan_send_cb(LORAWAN_SEND_SENT,0,0,NULL);
 801c564:	4b04      	ldr	r3, [pc, #16]	; (801c578 <lorawan_driver_onSendSuccess+0x20>)
 801c566:	681c      	ldr	r4, [r3, #0]
 801c568:	2300      	movs	r3, #0
 801c56a:	2200      	movs	r2, #0
 801c56c:	2100      	movs	r1, #0
 801c56e:	2001      	movs	r0, #1
 801c570:	47a0      	blx	r4
	}
}
 801c572:	46c0      	nop			; (mov r8, r8)
 801c574:	46bd      	mov	sp, r7
 801c576:	bdb0      	pop	{r4, r5, r7, pc}
 801c578:	20001208 	.word	0x20001208

0801c57c <lorawan_driver_onDataReception>:

void lorawan_driver_onDataReception(uint8_t port, uint8_t * data, uint8_t size) {
 801c57c:	b590      	push	{r4, r7, lr}
 801c57e:	b083      	sub	sp, #12
 801c580:	af00      	add	r7, sp, #0
 801c582:	6039      	str	r1, [r7, #0]
 801c584:	0011      	movs	r1, r2
 801c586:	1dfb      	adds	r3, r7, #7
 801c588:	1c02      	adds	r2, r0, #0
 801c58a:	701a      	strb	r2, [r3, #0]
 801c58c:	1dbb      	adds	r3, r7, #6
 801c58e:	1c0a      	adds	r2, r1, #0
 801c590:	701a      	strb	r2, [r3, #0]
		for ( int i = 0 ; i < size ; i++ ) {
			LOG_INFO_LORAWANSTK(("%02X ",data[i]));
		}
		LOG_INFO_LORAWANSTK(("\n"));
	#endif
	if (__itsdk_lorawan_send_cb != NULL) {
 801c592:	4b09      	ldr	r3, [pc, #36]	; (801c5b8 <lorawan_driver_onDataReception+0x3c>)
 801c594:	681b      	ldr	r3, [r3, #0]
 801c596:	2b00      	cmp	r3, #0
 801c598:	d009      	beq.n	801c5ae <lorawan_driver_onDataReception+0x32>
		__itsdk_lorawan_send_cb(LORAWAN_SEND_ACKED_WITH_DOWNLINK,port,size,data);
 801c59a:	4b07      	ldr	r3, [pc, #28]	; (801c5b8 <lorawan_driver_onDataReception+0x3c>)
 801c59c:	681c      	ldr	r4, [r3, #0]
 801c59e:	6838      	ldr	r0, [r7, #0]
 801c5a0:	1dbb      	adds	r3, r7, #6
 801c5a2:	781a      	ldrb	r2, [r3, #0]
 801c5a4:	1dfb      	adds	r3, r7, #7
 801c5a6:	7819      	ldrb	r1, [r3, #0]
 801c5a8:	0003      	movs	r3, r0
 801c5aa:	2003      	movs	r0, #3
 801c5ac:	47a0      	blx	r4
	}
}
 801c5ae:	46c0      	nop			; (mov r8, r8)
 801c5b0:	46bd      	mov	sp, r7
 801c5b2:	b003      	add	sp, #12
 801c5b4:	bd90      	pop	{r4, r7, pc}
 801c5b6:	46c0      	nop			; (mov r8, r8)
 801c5b8:	20001208 	.word	0x20001208

0801c5bc <lorawan_driver_onPendingDownlink>:

void lorawan_driver_onPendingDownlink() {
 801c5bc:	b5b0      	push	{r4, r5, r7, lr}
 801c5be:	af00      	add	r7, sp, #0
	LOG_INFO_LORAWANSTK(("**onPendingDownlink\r\n"));
	if (__itsdk_lorawan_send_cb != NULL) {
 801c5c0:	4b06      	ldr	r3, [pc, #24]	; (801c5dc <lorawan_driver_onPendingDownlink+0x20>)
 801c5c2:	681b      	ldr	r3, [r3, #0]
 801c5c4:	2b00      	cmp	r3, #0
 801c5c6:	d006      	beq.n	801c5d6 <lorawan_driver_onPendingDownlink+0x1a>
		__itsdk_lorawan_send_cb(LORAWAN_SEND_ACKED_WITH_DOWNLINK_PENDING,0,0,NULL);
 801c5c8:	4b04      	ldr	r3, [pc, #16]	; (801c5dc <lorawan_driver_onPendingDownlink+0x20>)
 801c5ca:	681c      	ldr	r4, [r3, #0]
 801c5cc:	2300      	movs	r3, #0
 801c5ce:	2200      	movs	r2, #0
 801c5d0:	2100      	movs	r1, #0
 801c5d2:	2004      	movs	r0, #4
 801c5d4:	47a0      	blx	r4
	}
}
 801c5d6:	46c0      	nop			; (mov r8, r8)
 801c5d8:	46bd      	mov	sp, r7
 801c5da:	bdb0      	pop	{r4, r5, r7, pc}
 801c5dc:	20001208 	.word	0x20001208

0801c5e0 <itsdk_lorawan_getDeviceEUI>:
}

/**
 * Get the device EUI as a uint8_t[]
 */
__weak itsdk_lorawan_return_t itsdk_lorawan_getDeviceEUI(uint8_t * devEui){
 801c5e0:	b590      	push	{r4, r7, lr}
 801c5e2:	b089      	sub	sp, #36	; 0x24
 801c5e4:	af00      	add	r7, sp, #0
 801c5e6:	6078      	str	r0, [r7, #4]
	LOG_INFO_LORAWANSTK(("itsdk_lorawan_getDeviceEUI\r\n"));
	#if ITSDK_WITH_SECURESTORE == __ENABLE
		uint8_t d[8];
		uint8_t buffer[16];
		if ( itsdk_secstore_readBlock(ITSDK_SS_LORA_OTAA_DEVEUIAPPEUI, buffer) != SS_SUCCESS ) {
 801c5e8:	2308      	movs	r3, #8
 801c5ea:	18fb      	adds	r3, r7, r3
 801c5ec:	0019      	movs	r1, r3
 801c5ee:	2007      	movs	r0, #7
 801c5f0:	f7fd fb9a 	bl	8019d28 <itsdk_secstore_readBlock>
 801c5f4:	1e03      	subs	r3, r0, #0
 801c5f6:	d00b      	beq.n	801c610 <itsdk_lorawan_getDeviceEUI+0x30>
			#if ITSDK_WITH_ERROR_RPT == __ENABLE
				ITSDK_ERROR_REPORT(ITSDK_ERROR_LORAWAN_SS_INVALID,0);
 801c5f8:	4b11      	ldr	r3, [pc, #68]	; (801c640 <itsdk_lorawan_getDeviceEUI+0x60>)
 801c5fa:	2100      	movs	r1, #0
 801c5fc:	0018      	movs	r0, r3
 801c5fe:	f7ff faad 	bl	801bb5c <itsdk_error_report>
			#endif
			bzero(devEui,8);
 801c602:	687b      	ldr	r3, [r7, #4]
 801c604:	2108      	movs	r1, #8
 801c606:	0018      	movs	r0, r3
 801c608:	f002 fd4e 	bl	801f0a8 <bzero>
			return LORAWAN_RETURN_FAILED;
 801c60c:	2301      	movs	r3, #1
 801c60e:	e012      	b.n	801c636 <itsdk_lorawan_getDeviceEUI+0x56>
		} else {
			memcpy(d,buffer,8);
 801c610:	2418      	movs	r4, #24
 801c612:	193a      	adds	r2, r7, r4
 801c614:	2308      	movs	r3, #8
 801c616:	18fb      	adds	r3, r7, r3
 801c618:	0010      	movs	r0, r2
 801c61a:	0019      	movs	r1, r3
 801c61c:	2308      	movs	r3, #8
 801c61e:	001a      	movs	r2, r3
 801c620:	f002 fd72 	bl	801f108 <memcpy>
		}
	#else
		uint8_t d[8] = ITSDK_LORAWAN_DEVEUI;
	#endif
	memcpy(devEui,d,8);
 801c624:	687a      	ldr	r2, [r7, #4]
 801c626:	193b      	adds	r3, r7, r4
 801c628:	0010      	movs	r0, r2
 801c62a:	0019      	movs	r1, r3
 801c62c:	2308      	movs	r3, #8
 801c62e:	001a      	movs	r2, r3
 801c630:	f002 fd6a 	bl	801f108 <memcpy>
	return LORAWAN_RETURN_SUCESS;
 801c634:	2300      	movs	r3, #0
}
 801c636:	0018      	movs	r0, r3
 801c638:	46bd      	mov	sp, r7
 801c63a:	b009      	add	sp, #36	; 0x24
 801c63c:	bd90      	pop	{r4, r7, pc}
 801c63e:	46c0      	nop			; (mov r8, r8)
 801c640:	90000106 	.word	0x90000106

0801c644 <itsdk_lorawan_getAppEUI>:

/**
 * Get the appEUI as a uint8_t[]
 */
__weak itsdk_lorawan_return_t itsdk_lorawan_getAppEUI(uint8_t * appEui){
 801c644:	b590      	push	{r4, r7, lr}
 801c646:	b089      	sub	sp, #36	; 0x24
 801c648:	af00      	add	r7, sp, #0
 801c64a:	6078      	str	r0, [r7, #4]
	LOG_INFO_LORAWANSTK(("itsdk_lorawan_getAppEUI\r\n"));
#if ITSDK_WITH_SECURESTORE == __ENABLE
	uint8_t d[8];
	uint8_t buffer[16];
	if ( itsdk_secstore_readBlock(ITSDK_SS_LORA_OTAA_DEVEUIAPPEUI, buffer) != SS_SUCCESS ) {
 801c64c:	2308      	movs	r3, #8
 801c64e:	18fb      	adds	r3, r7, r3
 801c650:	0019      	movs	r1, r3
 801c652:	2007      	movs	r0, #7
 801c654:	f7fd fb68 	bl	8019d28 <itsdk_secstore_readBlock>
 801c658:	1e03      	subs	r3, r0, #0
 801c65a:	d00b      	beq.n	801c674 <itsdk_lorawan_getAppEUI+0x30>
		#if ITSDK_WITH_ERROR_RPT == __ENABLE
			ITSDK_ERROR_REPORT(ITSDK_ERROR_LORAWAN_SS_INVALID,1);
 801c65c:	4b11      	ldr	r3, [pc, #68]	; (801c6a4 <itsdk_lorawan_getAppEUI+0x60>)
 801c65e:	2101      	movs	r1, #1
 801c660:	0018      	movs	r0, r3
 801c662:	f7ff fa7b 	bl	801bb5c <itsdk_error_report>
		#endif
		bzero(appEui,8);
 801c666:	687b      	ldr	r3, [r7, #4]
 801c668:	2108      	movs	r1, #8
 801c66a:	0018      	movs	r0, r3
 801c66c:	f002 fd1c 	bl	801f0a8 <bzero>
		return LORAWAN_RETURN_FAILED;
 801c670:	2301      	movs	r3, #1
 801c672:	e013      	b.n	801c69c <itsdk_lorawan_getAppEUI+0x58>
	} else {
		memcpy(d,buffer+8,8);
 801c674:	2308      	movs	r3, #8
 801c676:	18fb      	adds	r3, r7, r3
 801c678:	3308      	adds	r3, #8
 801c67a:	2418      	movs	r4, #24
 801c67c:	193a      	adds	r2, r7, r4
 801c67e:	0010      	movs	r0, r2
 801c680:	0019      	movs	r1, r3
 801c682:	2308      	movs	r3, #8
 801c684:	001a      	movs	r2, r3
 801c686:	f002 fd3f 	bl	801f108 <memcpy>
	}
#else
	uint8_t d[8] = ITSDK_LORAWAN_APPEUI;
#endif
	memcpy(appEui,d,8);
 801c68a:	687a      	ldr	r2, [r7, #4]
 801c68c:	193b      	adds	r3, r7, r4
 801c68e:	0010      	movs	r0, r2
 801c690:	0019      	movs	r1, r3
 801c692:	2308      	movs	r3, #8
 801c694:	001a      	movs	r2, r3
 801c696:	f002 fd37 	bl	801f108 <memcpy>
	return LORAWAN_RETURN_SUCESS;
 801c69a:	2300      	movs	r3, #0
}
 801c69c:	0018      	movs	r0, r3
 801c69e:	46bd      	mov	sp, r7
 801c6a0:	b009      	add	sp, #36	; 0x24
 801c6a2:	bd90      	pop	{r4, r7, pc}
 801c6a4:	90000106 	.word	0x90000106

0801c6a8 <itsdk_lorawan_getAppKEY>:

/**
 * Get the appKEY as a uint8_t[]
 */
__weak itsdk_lorawan_return_t itsdk_lorawan_getAppKEY(uint8_t * appKey){
 801c6a8:	b580      	push	{r7, lr}
 801c6aa:	b086      	sub	sp, #24
 801c6ac:	af00      	add	r7, sp, #0
 801c6ae:	6078      	str	r0, [r7, #4]
	LOG_INFO_LORAWANSTK(("itsdk_lorawan_getAppKEY\r\n"));
#if ITSDK_WITH_SECURESTORE == __ENABLE
	uint8_t d[16];
	if ( itsdk_secstore_readBlock(ITSDK_SS_LORA_OTAA_APPKEY, d) != SS_SUCCESS ) {
 801c6b0:	2308      	movs	r3, #8
 801c6b2:	18fb      	adds	r3, r7, r3
 801c6b4:	0019      	movs	r1, r3
 801c6b6:	2008      	movs	r0, #8
 801c6b8:	f7fd fb36 	bl	8019d28 <itsdk_secstore_readBlock>
 801c6bc:	1e03      	subs	r3, r0, #0
 801c6be:	d00b      	beq.n	801c6d8 <itsdk_lorawan_getAppKEY+0x30>
		#if ITSDK_WITH_ERROR_RPT == __ENABLE
			ITSDK_ERROR_REPORT(ITSDK_ERROR_LORAWAN_SS_INVALID,2);
 801c6c0:	4b0c      	ldr	r3, [pc, #48]	; (801c6f4 <itsdk_lorawan_getAppKEY+0x4c>)
 801c6c2:	2102      	movs	r1, #2
 801c6c4:	0018      	movs	r0, r3
 801c6c6:	f7ff fa49 	bl	801bb5c <itsdk_error_report>
		#endif
		bzero(appKey,16);
 801c6ca:	687b      	ldr	r3, [r7, #4]
 801c6cc:	2110      	movs	r1, #16
 801c6ce:	0018      	movs	r0, r3
 801c6d0:	f002 fcea 	bl	801f0a8 <bzero>
		return LORAWAN_RETURN_FAILED;
 801c6d4:	2301      	movs	r3, #1
 801c6d6:	e009      	b.n	801c6ec <itsdk_lorawan_getAppKEY+0x44>
	}
#else
	uint8_t d[16] = ITSDK_LORAWAN_APPKEY;
#endif
	memcpy(appKey,d,16);
 801c6d8:	687a      	ldr	r2, [r7, #4]
 801c6da:	2308      	movs	r3, #8
 801c6dc:	18fb      	adds	r3, r7, r3
 801c6de:	0010      	movs	r0, r2
 801c6e0:	0019      	movs	r1, r3
 801c6e2:	2310      	movs	r3, #16
 801c6e4:	001a      	movs	r2, r3
 801c6e6:	f002 fd0f 	bl	801f108 <memcpy>
	return LORAWAN_RETURN_SUCESS;
 801c6ea:	2300      	movs	r3, #0
}
 801c6ec:	0018      	movs	r0, r3
 801c6ee:	46bd      	mov	sp, r7
 801c6f0:	b006      	add	sp, #24
 801c6f2:	bd80      	pop	{r7, pc}
 801c6f4:	90000106 	.word	0x90000106

0801c6f8 <itsdk_lorawan_resetFactoryDefaults>:
 * Configure the SecureStore with the Static values obtained from configLoRaWan.h
 * When force is false, the secure store will be refreshed only if there is no
 * configuration already setup.
 */
#if ITSDK_WITH_SECURESTORE == __ENABLE
itsdk_lorawan_return_t itsdk_lorawan_resetFactoryDefaults(bool force) {
 801c6f8:	b5b0      	push	{r4, r5, r7, lr}
 801c6fa:	b090      	sub	sp, #64	; 0x40
 801c6fc:	af00      	add	r7, sp, #0
 801c6fe:	0002      	movs	r2, r0
 801c700:	1dfb      	adds	r3, r7, #7
 801c702:	701a      	strb	r2, [r3, #0]
	uint8_t buffer[16];
	if ( force || itsdk_secstore_readBlock(ITSDK_SS_LORA_OTAA_DEVEUIAPPEUI, buffer) != SS_SUCCESS ) {
 801c704:	1dfb      	adds	r3, r7, #7
 801c706:	781b      	ldrb	r3, [r3, #0]
 801c708:	2b00      	cmp	r3, #0
 801c70a:	d107      	bne.n	801c71c <itsdk_lorawan_resetFactoryDefaults+0x24>
 801c70c:	232c      	movs	r3, #44	; 0x2c
 801c70e:	18fb      	adds	r3, r7, r3
 801c710:	0019      	movs	r1, r3
 801c712:	2007      	movs	r0, #7
 801c714:	f7fd fb08 	bl	8019d28 <itsdk_secstore_readBlock>
 801c718:	1e03      	subs	r3, r0, #0
 801c71a:	d038      	beq.n	801c78e <itsdk_lorawan_resetFactoryDefaults+0x96>
		uint8_t de[8] = ITSDK_LORAWAN_DEVEUI;
 801c71c:	2324      	movs	r3, #36	; 0x24
 801c71e:	18fb      	adds	r3, r7, r3
 801c720:	4a1d      	ldr	r2, [pc, #116]	; (801c798 <itsdk_lorawan_resetFactoryDefaults+0xa0>)
 801c722:	ca03      	ldmia	r2!, {r0, r1}
 801c724:	c303      	stmia	r3!, {r0, r1}
		uint8_t ap[8] = ITSDK_LORAWAN_APPEUI;
 801c726:	231c      	movs	r3, #28
 801c728:	18fb      	adds	r3, r7, r3
 801c72a:	4a1c      	ldr	r2, [pc, #112]	; (801c79c <itsdk_lorawan_resetFactoryDefaults+0xa4>)
 801c72c:	ca03      	ldmia	r2!, {r0, r1}
 801c72e:	c303      	stmia	r3!, {r0, r1}
		for ( int i = 0 ; i< 8 ; i++) {
 801c730:	2300      	movs	r3, #0
 801c732:	63fb      	str	r3, [r7, #60]	; 0x3c
 801c734:	e016      	b.n	801c764 <itsdk_lorawan_resetFactoryDefaults+0x6c>
			buffer[ITSDK_SECSTORE_OTAA_DEV_ID+i] = de[i];
 801c736:	2324      	movs	r3, #36	; 0x24
 801c738:	18fa      	adds	r2, r7, r3
 801c73a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c73c:	18d3      	adds	r3, r2, r3
 801c73e:	7819      	ldrb	r1, [r3, #0]
 801c740:	202c      	movs	r0, #44	; 0x2c
 801c742:	183a      	adds	r2, r7, r0
 801c744:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c746:	18d3      	adds	r3, r2, r3
 801c748:	1c0a      	adds	r2, r1, #0
 801c74a:	701a      	strb	r2, [r3, #0]
			buffer[ITSDK_SECSTORE_OTAA_APP_ID+i] = ap[i];
 801c74c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c74e:	3308      	adds	r3, #8
 801c750:	221c      	movs	r2, #28
 801c752:	18b9      	adds	r1, r7, r2
 801c754:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801c756:	188a      	adds	r2, r1, r2
 801c758:	7811      	ldrb	r1, [r2, #0]
 801c75a:	183a      	adds	r2, r7, r0
 801c75c:	54d1      	strb	r1, [r2, r3]
		for ( int i = 0 ; i< 8 ; i++) {
 801c75e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c760:	3301      	adds	r3, #1
 801c762:	63fb      	str	r3, [r7, #60]	; 0x3c
 801c764:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c766:	2b07      	cmp	r3, #7
 801c768:	dde5      	ble.n	801c736 <itsdk_lorawan_resetFactoryDefaults+0x3e>
		}
		itsdk_secstore_writeBlock(ITSDK_SS_LORA_OTAA_DEVEUIAPPEUI, buffer);
 801c76a:	232c      	movs	r3, #44	; 0x2c
 801c76c:	18fb      	adds	r3, r7, r3
 801c76e:	0019      	movs	r1, r3
 801c770:	2007      	movs	r0, #7
 801c772:	f7fd fb26 	bl	8019dc2 <itsdk_secstore_writeBlock>

		uint8_t appkey[16] = ITSDK_LORAWAN_APPKEY;
 801c776:	210c      	movs	r1, #12
 801c778:	187b      	adds	r3, r7, r1
 801c77a:	4a09      	ldr	r2, [pc, #36]	; (801c7a0 <itsdk_lorawan_resetFactoryDefaults+0xa8>)
 801c77c:	ca31      	ldmia	r2!, {r0, r4, r5}
 801c77e:	c331      	stmia	r3!, {r0, r4, r5}
 801c780:	6812      	ldr	r2, [r2, #0]
 801c782:	601a      	str	r2, [r3, #0]
		itsdk_secstore_writeBlock(ITSDK_SS_LORA_OTAA_APPKEY, appkey);
 801c784:	187b      	adds	r3, r7, r1
 801c786:	0019      	movs	r1, r3
 801c788:	2008      	movs	r0, #8
 801c78a:	f7fd fb1a 	bl	8019dc2 <itsdk_secstore_writeBlock>
	}
	return LORAWAN_RETURN_SUCESS;
 801c78e:	2300      	movs	r3, #0
}
 801c790:	0018      	movs	r0, r3
 801c792:	46bd      	mov	sp, r7
 801c794:	b010      	add	sp, #64	; 0x40
 801c796:	bdb0      	pop	{r4, r5, r7, pc}
 801c798:	080212a4 	.word	0x080212a4
 801c79c:	080212ac 	.word	0x080212ac
 801c7a0:	080212b4 	.word	0x080212b4

0801c7a4 <itsdk_lorawan_loop>:

/**
 * This function need to be called in the project_loop function
 * to manage the lorawan stack ( mandatory for async mode )
 */
void itsdk_lorawan_loop() {
 801c7a4:	b580      	push	{r7, lr}
 801c7a6:	af00      	add	r7, sp, #0
	LOG_DEBUG_LORAWANSTK(("itsdk_lorawan_loop\r\n"));
	lorawan_driver_loop();
 801c7a8:	f7eb fcd0 	bl	800814c <lorawan_driver_loop>
}
 801c7ac:	46c0      	nop			; (mov r8, r8)
 801c7ae:	46bd      	mov	sp, r7
 801c7b0:	bd80      	pop	{r7, pc}
	...

0801c7b4 <lowPower_switch>:
/**
 * Switch to low power mode selected for the expected platform
 */
void __attribute__((optimize("O3"))) lowPower_switch() {

	if (__lowPowerState==LOWPRW_ENABLE) {
 801c7b4:	4b13      	ldr	r3, [pc, #76]	; (801c804 <lowPower_switch+0x50>)
void __attribute__((optimize("O3"))) lowPower_switch() {
 801c7b6:	b570      	push	{r4, r5, r6, lr}
	if (__lowPowerState==LOWPRW_ENABLE) {
 801c7b8:	781b      	ldrb	r3, [r3, #0]
 801c7ba:	2b00      	cmp	r3, #0
 801c7bc:	d000      	beq.n	801c7c0 <lowPower_switch+0xc>
			}
			#endif
		}
	}

}
 801c7be:	bd70      	pop	{r4, r5, r6, pc}
			uint32_t schedDur = itdt_sched_nextRun();
 801c7c0:	f000 fba6 	bl	801cf10 <itdt_sched_nextRun>
			if ( schedDur < duration ) duration = schedDur;
 801c7c4:	4d10      	ldr	r5, [pc, #64]	; (801c808 <lowPower_switch+0x54>)
			uint32_t schedDur = itdt_sched_nextRun();
 801c7c6:	0004      	movs	r4, r0
			if ( schedDur < duration ) duration = schedDur;
 801c7c8:	42a8      	cmp	r0, r5
 801c7ca:	d809      	bhi.n	801c7e0 <lowPower_switch+0x2c>
			uint32_t maxDur = itsdk_stimer_nextTimeoutMs();
 801c7cc:	f000 fe2e 	bl	801d42c <itsdk_stimer_nextTimeoutMs>
 801c7d0:	0003      	movs	r3, r0
 801c7d2:	0020      	movs	r0, r4
 801c7d4:	429c      	cmp	r4, r3
 801c7d6:	d900      	bls.n	801c7da <lowPower_switch+0x26>
 801c7d8:	0018      	movs	r0, r3
		if ( duration > ITSDK_LOWPOWER_MINDUR_MS ) {
 801c7da:	2805      	cmp	r0, #5
 801c7dc:	d9ef      	bls.n	801c7be <lowPower_switch+0xa>
 801c7de:	e004      	b.n	801c7ea <lowPower_switch+0x36>
			uint32_t maxDur = itsdk_stimer_nextTimeoutMs();
 801c7e0:	f000 fe24 	bl	801d42c <itsdk_stimer_nextTimeoutMs>
			if ( maxDur < duration ) duration = maxDur;
 801c7e4:	42a8      	cmp	r0, r5
 801c7e6:	d9f8      	bls.n	801c7da <lowPower_switch+0x26>
			duration = ITSDK_LOWPOWER_RTC_MS;
 801c7e8:	4808      	ldr	r0, [pc, #32]	; (801c80c <lowPower_switch+0x58>)
			if ( stm32l_lowPowerSetup(duration,STM32L_LOWPOWER_NORMAL_STOP) == STM32L_LOWPOWER_SUCCESS ) {
 801c7ea:	2100      	movs	r1, #0
 801c7ec:	f002 f82e 	bl	801e84c <stm32l_lowPowerSetup>
 801c7f0:	2800      	cmp	r0, #0
 801c7f2:	d1e4      	bne.n	801c7be <lowPower_switch+0xa>
				stm32l_lowPowerResume(STM32L_LOWPOWER_NORMAL_STOP);
 801c7f4:	f002 f8a2 	bl	801e93c <stm32l_lowPowerResume>
				itsdk_state.lastWakeUpTimeUs = itsdk_time_get_us();
 801c7f8:	f000 fc84 	bl	801d104 <itsdk_time_get_us>
 801c7fc:	4b04      	ldr	r3, [pc, #16]	; (801c810 <lowPower_switch+0x5c>)
 801c7fe:	6098      	str	r0, [r3, #8]
 801c800:	60d9      	str	r1, [r3, #12]
}
 801c802:	e7dc      	b.n	801c7be <lowPower_switch+0xa>
 801c804:	2000122c 	.word	0x2000122c
 801c808:	0000270f 	.word	0x0000270f
 801c80c:	00002710 	.word	0x00002710
 801c810:	200016a8 	.word	0x200016a8

0801c814 <lowPower_enable>:

/**
 * Disable LowPower mode
 */
void lowPower_enable() {
 801c814:	b580      	push	{r7, lr}
 801c816:	af00      	add	r7, sp, #0
	__lowPowerState= LOWPRW_ENABLE;
 801c818:	4b02      	ldr	r3, [pc, #8]	; (801c824 <lowPower_enable+0x10>)
 801c81a:	2200      	movs	r2, #0
 801c81c:	701a      	strb	r2, [r3, #0]
}
 801c81e:	46c0      	nop			; (mov r8, r8)
 801c820:	46bd      	mov	sp, r7
 801c822:	bd80      	pop	{r7, pc}
 801c824:	2000122c 	.word	0x2000122c

0801c828 <lowPower_disable>:

/**
 * Enable LowPower mode
 */
void lowPower_disable() {
 801c828:	b580      	push	{r7, lr}
 801c82a:	af00      	add	r7, sp, #0
	__lowPowerState= LOWPRW_DISABLE;
 801c82c:	4b02      	ldr	r3, [pc, #8]	; (801c838 <lowPower_disable+0x10>)
 801c82e:	2201      	movs	r2, #1
 801c830:	701a      	strb	r2, [r3, #0]
}
 801c832:	46c0      	nop			; (mov r8, r8)
 801c834:	46bd      	mov	sp, r7
 801c836:	bd80      	pop	{r7, pc}
 801c838:	2000122c 	.word	0x2000122c

0801c83c <itsdk_setup>:
/**
 * The setup function is called on every MCU Reset but not on wakeup from sleep
 * This function init the SDK library and underlaying hardware.
 * Then it calls the project specific setup function
 */
void itsdk_setup() {
 801c83c:	b580      	push	{r7, lr}
 801c83e:	af00      	add	r7, sp, #0

	itsdk_time_init();
 801c840:	f000 fc6c 	bl	801d11c <itsdk_time_init>
	#if ITSDK_LOGGER_CONF > 0
	log_init(ITSDK_LOGGER_CONF);
 801c844:	20f0      	movs	r0, #240	; 0xf0
 801c846:	f7ff fb5f 	bl	801bf08 <log_init>
	  wdg_setupWithMaxMs(ITSDK_WDG_MS);
	#endif
//	serial1_init(); //Fait planter
//	serial2_init();
	#if ITSDK_WITH_CONSOLE == __ENABLE
		itsdk_console_setup();
 801c84a:	f7fc f8b5 	bl	80189b8 <itsdk_console_setup>
	#endif
	#if ITSDK_WITH_ERROR_RPT == __ENABLE
	  itsdk_error_setup();
 801c84e:	f7ff f955 	bl	801bafc <itsdk_error_setup>
	  ITSDK_ERROR_REPORT(ITSDK_ERROR_RESET,(uint16_t)itsdk_getResetCause());
 801c852:	f001 fca3 	bl	801e19c <itsdk_getResetCause>
 801c856:	0003      	movs	r3, r0
 801c858:	b29b      	uxth	r3, r3
 801c85a:	4a11      	ldr	r2, [pc, #68]	; (801c8a0 <itsdk_setup+0x64>)
 801c85c:	0019      	movs	r1, r3
 801c85e:	0010      	movs	r0, r2
 801c860:	f7ff f97c 	bl	801bb5c <itsdk_error_report>
	#endif
	#if ITSDK_WITH_SECURESTORE == __ENABLE
	  // Init the secure store if not yet initialized
	  if ( itsdk_secstore_isInit() != SS_SUCCESS ) {
 801c864:	f7fd fb84 	bl	8019f70 <itsdk_secstore_isInit>
 801c868:	1e03      	subs	r3, r0, #0
 801c86a:	d008      	beq.n	801c87e <itsdk_setup+0x42>
		  itsdk_secstore_init();
 801c86c:	f7fd fb20 	bl	8019eb0 <itsdk_secstore_init>
		  itsdk_encrypt_resetFactoryDefaults(BOOL_TRUE);
 801c870:	2001      	movs	r0, #1
 801c872:	f7fe f850 	bl	801a916 <itsdk_encrypt_resetFactoryDefaults>
		  #if ITSDK_WITH_LORAWAN_LIB == __ENABLE
		    itsdk_lorawan_resetFactoryDefaults(true);
 801c876:	2001      	movs	r0, #1
 801c878:	f7ff ff3e 	bl	801c6f8 <itsdk_lorawan_resetFactoryDefaults>
 801c87c:	e002      	b.n	801c884 <itsdk_setup+0x48>
		  #endif
		  #if ITSDK_WITH_SIGFOX_LIB == __ENABLE
 		    itsdk_sigfox_resetFactoryDefaults(true);
		  #endif
	  } else {
	     itsdk_encrypt_resetFactoryDefaults(BOOL_FALSE);	// on first boot init the ss communication credentials
 801c87e:	2000      	movs	r0, #0
 801c880:	f7fe f849 	bl	801a916 <itsdk_encrypt_resetFactoryDefaults>
	  }
	  itsdk_secStore_RegisterConsole();
 801c884:	f7fd ff46 	bl	801a714 <itsdk_secStore_RegisterConsole>
	#endif
	// load the configuration according to setting
	itsdk_config_loadConfiguration(CONFIG_NORMAL_LOAD);
 801c888:	2000      	movs	r0, #0
 801c88a:	f7fc fc91 	bl	80191b0 <itsdk_config_loadConfiguration>
	itsdk_state_init();
 801c88e:	f7fd f8a5 	bl	80199dc <itsdk_state_init>
	// Application setup
	project_setup();
 801c892:	f7e6 fded 	bl	8003470 <project_setup>
    #if ITSDK_WITH_ERROR_RPT == __ENABLE
      itsdk_cleanResetCause();
 801c896:	f001 fcbf 	bl	801e218 <itsdk_cleanResetCause>
    #endif

}
 801c89a:	46c0      	nop			; (mov r8, r8)
 801c89c:	46bd      	mov	sp, r7
 801c89e:	bd80      	pop	{r7, pc}
 801c8a0:	10000001 	.word	0x10000001

0801c8a4 <itsdk_loop>:
 * if the MCU have no lowpower mode. The function update the time component, call
 * all the recurrent SDK operations to be maintained.
 * When a scheduler has been activated it calls the scheduler task when needed.
 * Then is calls the project specific loop function.
 */
void itsdk_loop() {
 801c8a4:	b580      	push	{r7, lr}
 801c8a6:	af00      	add	r7, sp, #0

    #if ITSDK_WITH_WDG != __WDG_NONE && ITSDK_WDG_MS > 0
	   wdg_refresh();
	#endif
	#if ITSDK_TIMER_SLOTS > 0
	   itsdk_stimer_run();
 801c8a8:	f000 fd64 	bl	801d374 <itsdk_stimer_run>
	#endif
	#if ITSDK_SHEDULER_TASKS > 0
	   itdt_sched_execute();
 801c8ac:	f000 fa82 	bl	801cdb4 <itdt_sched_execute>
	   accel_process_loop();
    #endif
	#if ITSDK_DRIVERS_WITH_GNSS_DRIVER == __ENABLE
	   gnss_process_loop(BOOL_FALSE);
	#endif
	project_loop();
 801c8b0:	f7e6 fe0a 	bl	80034c8 <project_loop>
	#if ITSDK_WITH_CONSOLE == __ENABLE
	   itsdk_console_loop();
 801c8b4:	f7fc f8a4 	bl	8018a00 <itsdk_console_loop>
	#endif
	#if ITSDK_TIMER_SLOTS > 0
		if ( itsdk_stimer_isLowPowerSwitchAutorized() ) {
 801c8b8:	f000 fcf2 	bl	801d2a0 <itsdk_stimer_isLowPowerSwitchAutorized>
 801c8bc:	1e03      	subs	r3, r0, #0
 801c8be:	d001      	beq.n	801c8c4 <itsdk_loop+0x20>
	#endif
			lowPower_switch();
 801c8c0:	f7ff ff78 	bl	801c7b4 <lowPower_switch>
	#if ITSDK_TIMER_SLOTS > 0
		}
	#endif
}
 801c8c4:	46c0      	nop			; (mov r8, r8)
 801c8c6:	46bd      	mov	sp, r7
 801c8c8:	bd80      	pop	{r7, pc}
	...

0801c8cc <itsdk_computeCRC32>:


/**
 * Return CRC32 value for data.
 */
uint32_t itsdk_computeCRC32(const uint8_t *data, uint16_t length) {
 801c8cc:	b580      	push	{r7, lr}
 801c8ce:	b086      	sub	sp, #24
 801c8d0:	af00      	add	r7, sp, #0
 801c8d2:	6078      	str	r0, [r7, #4]
 801c8d4:	000a      	movs	r2, r1
 801c8d6:	1cbb      	adds	r3, r7, #2
 801c8d8:	801a      	strh	r2, [r3, #0]
  uint32_t crc = 0xffffffff;
 801c8da:	2301      	movs	r3, #1
 801c8dc:	425b      	negs	r3, r3
 801c8de:	617b      	str	r3, [r7, #20]
  while (length--) {
 801c8e0:	e039      	b.n	801c956 <itsdk_computeCRC32+0x8a>
    uint8_t c = *data++;
 801c8e2:	687b      	ldr	r3, [r7, #4]
 801c8e4:	1c5a      	adds	r2, r3, #1
 801c8e6:	607a      	str	r2, [r7, #4]
 801c8e8:	220e      	movs	r2, #14
 801c8ea:	18ba      	adds	r2, r7, r2
 801c8ec:	781b      	ldrb	r3, [r3, #0]
 801c8ee:	7013      	strb	r3, [r2, #0]
    for (uint32_t i = 0x80; i > 0; i >>= 1) {
 801c8f0:	2380      	movs	r3, #128	; 0x80
 801c8f2:	613b      	str	r3, [r7, #16]
 801c8f4:	e02c      	b.n	801c950 <itsdk_computeCRC32+0x84>
      bool bit = crc & 0x80000000;
 801c8f6:	697b      	ldr	r3, [r7, #20]
 801c8f8:	0fdb      	lsrs	r3, r3, #31
 801c8fa:	07da      	lsls	r2, r3, #31
 801c8fc:	230f      	movs	r3, #15
 801c8fe:	18fb      	adds	r3, r7, r3
 801c900:	1e51      	subs	r1, r2, #1
 801c902:	418a      	sbcs	r2, r1
 801c904:	701a      	strb	r2, [r3, #0]
      if (c & i) {
 801c906:	230e      	movs	r3, #14
 801c908:	18fb      	adds	r3, r7, r3
 801c90a:	781b      	ldrb	r3, [r3, #0]
 801c90c:	693a      	ldr	r2, [r7, #16]
 801c90e:	4013      	ands	r3, r2
 801c910:	d00f      	beq.n	801c932 <itsdk_computeCRC32+0x66>
        bit = !bit;
 801c912:	210f      	movs	r1, #15
 801c914:	187b      	adds	r3, r7, r1
 801c916:	781b      	ldrb	r3, [r3, #0]
 801c918:	1e5a      	subs	r2, r3, #1
 801c91a:	4193      	sbcs	r3, r2
 801c91c:	b2db      	uxtb	r3, r3
 801c91e:	2201      	movs	r2, #1
 801c920:	4053      	eors	r3, r2
 801c922:	b2db      	uxtb	r3, r3
 801c924:	001a      	movs	r2, r3
 801c926:	187b      	adds	r3, r7, r1
 801c928:	701a      	strb	r2, [r3, #0]
 801c92a:	781a      	ldrb	r2, [r3, #0]
 801c92c:	2101      	movs	r1, #1
 801c92e:	400a      	ands	r2, r1
 801c930:	701a      	strb	r2, [r3, #0]
      }
      crc <<= 1;
 801c932:	697b      	ldr	r3, [r7, #20]
 801c934:	005b      	lsls	r3, r3, #1
 801c936:	617b      	str	r3, [r7, #20]
      if (bit) {
 801c938:	230f      	movs	r3, #15
 801c93a:	18fb      	adds	r3, r7, r3
 801c93c:	781b      	ldrb	r3, [r3, #0]
 801c93e:	2b00      	cmp	r3, #0
 801c940:	d003      	beq.n	801c94a <itsdk_computeCRC32+0x7e>
        crc ^= 0x04c11db7;
 801c942:	697b      	ldr	r3, [r7, #20]
 801c944:	4a0a      	ldr	r2, [pc, #40]	; (801c970 <itsdk_computeCRC32+0xa4>)
 801c946:	4053      	eors	r3, r2
 801c948:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0x80; i > 0; i >>= 1) {
 801c94a:	693b      	ldr	r3, [r7, #16]
 801c94c:	085b      	lsrs	r3, r3, #1
 801c94e:	613b      	str	r3, [r7, #16]
 801c950:	693b      	ldr	r3, [r7, #16]
 801c952:	2b00      	cmp	r3, #0
 801c954:	d1cf      	bne.n	801c8f6 <itsdk_computeCRC32+0x2a>
  while (length--) {
 801c956:	1cbb      	adds	r3, r7, #2
 801c958:	881b      	ldrh	r3, [r3, #0]
 801c95a:	1cba      	adds	r2, r7, #2
 801c95c:	1e59      	subs	r1, r3, #1
 801c95e:	8011      	strh	r1, [r2, #0]
 801c960:	2b00      	cmp	r3, #0
 801c962:	d1be      	bne.n	801c8e2 <itsdk_computeCRC32+0x16>
      }
    }
  }
  return crc;
 801c964:	697b      	ldr	r3, [r7, #20]
}
 801c966:	0018      	movs	r0, r3
 801c968:	46bd      	mov	sp, r7
 801c96a:	b006      	add	sp, #24
 801c96c:	bd80      	pop	{r7, pc}
 801c96e:	46c0      	nop			; (mov r8, r8)
 801c970:	04c11db7 	.word	0x04c11db7

0801c974 <itdt_convertNumChar2Int>:
}

/* -----------------------------------------------------------
 * Convert 0-9 char to 0-9 value
 */
uint8_t itdt_convertNumChar2Int(char c) {
 801c974:	b580      	push	{r7, lr}
 801c976:	b082      	sub	sp, #8
 801c978:	af00      	add	r7, sp, #0
 801c97a:	0002      	movs	r2, r0
 801c97c:	1dfb      	adds	r3, r7, #7
 801c97e:	701a      	strb	r2, [r3, #0]
	  if ( c >= '0' && c <= '9' ) return c-'0';
 801c980:	1dfb      	adds	r3, r7, #7
 801c982:	781b      	ldrb	r3, [r3, #0]
 801c984:	2b2f      	cmp	r3, #47	; 0x2f
 801c986:	d908      	bls.n	801c99a <itdt_convertNumChar2Int+0x26>
 801c988:	1dfb      	adds	r3, r7, #7
 801c98a:	781b      	ldrb	r3, [r3, #0]
 801c98c:	2b39      	cmp	r3, #57	; 0x39
 801c98e:	d804      	bhi.n	801c99a <itdt_convertNumChar2Int+0x26>
 801c990:	1dfb      	adds	r3, r7, #7
 801c992:	781b      	ldrb	r3, [r3, #0]
 801c994:	3b30      	subs	r3, #48	; 0x30
 801c996:	b2db      	uxtb	r3, r3
 801c998:	e000      	b.n	801c99c <itdt_convertNumChar2Int+0x28>
	  return 0xFF;
 801c99a:	23ff      	movs	r3, #255	; 0xff
}
 801c99c:	0018      	movs	r0, r3
 801c99e:	46bd      	mov	sp, r7
 801c9a0:	b002      	add	sp, #8
 801c9a2:	bd80      	pop	{r7, pc}

0801c9a4 <itdt_convertHexChar2HalfInt>:

/* -----------------------------------------------------------
 * Convert a 0-F char to a 0-16 value
 */
uint8_t itdt_convertHexChar2HalfInt(char c) {
 801c9a4:	b580      	push	{r7, lr}
 801c9a6:	b082      	sub	sp, #8
 801c9a8:	af00      	add	r7, sp, #0
 801c9aa:	0002      	movs	r2, r0
 801c9ac:	1dfb      	adds	r3, r7, #7
 801c9ae:	701a      	strb	r2, [r3, #0]
  if ( c >= '0' && c <= '9' ) return c-'0';
 801c9b0:	1dfb      	adds	r3, r7, #7
 801c9b2:	781b      	ldrb	r3, [r3, #0]
 801c9b4:	2b2f      	cmp	r3, #47	; 0x2f
 801c9b6:	d908      	bls.n	801c9ca <itdt_convertHexChar2HalfInt+0x26>
 801c9b8:	1dfb      	adds	r3, r7, #7
 801c9ba:	781b      	ldrb	r3, [r3, #0]
 801c9bc:	2b39      	cmp	r3, #57	; 0x39
 801c9be:	d804      	bhi.n	801c9ca <itdt_convertHexChar2HalfInt+0x26>
 801c9c0:	1dfb      	adds	r3, r7, #7
 801c9c2:	781b      	ldrb	r3, [r3, #0]
 801c9c4:	3b30      	subs	r3, #48	; 0x30
 801c9c6:	b2db      	uxtb	r3, r3
 801c9c8:	e01a      	b.n	801ca00 <itdt_convertHexChar2HalfInt+0x5c>
  if ( c >= 'a' && c <= 'f' ) return 10+c-'a';
 801c9ca:	1dfb      	adds	r3, r7, #7
 801c9cc:	781b      	ldrb	r3, [r3, #0]
 801c9ce:	2b60      	cmp	r3, #96	; 0x60
 801c9d0:	d908      	bls.n	801c9e4 <itdt_convertHexChar2HalfInt+0x40>
 801c9d2:	1dfb      	adds	r3, r7, #7
 801c9d4:	781b      	ldrb	r3, [r3, #0]
 801c9d6:	2b66      	cmp	r3, #102	; 0x66
 801c9d8:	d804      	bhi.n	801c9e4 <itdt_convertHexChar2HalfInt+0x40>
 801c9da:	1dfb      	adds	r3, r7, #7
 801c9dc:	781b      	ldrb	r3, [r3, #0]
 801c9de:	3b57      	subs	r3, #87	; 0x57
 801c9e0:	b2db      	uxtb	r3, r3
 801c9e2:	e00d      	b.n	801ca00 <itdt_convertHexChar2HalfInt+0x5c>
  if ( c >= 'A' && c <= 'F' ) return 10+c-'A';
 801c9e4:	1dfb      	adds	r3, r7, #7
 801c9e6:	781b      	ldrb	r3, [r3, #0]
 801c9e8:	2b40      	cmp	r3, #64	; 0x40
 801c9ea:	d908      	bls.n	801c9fe <itdt_convertHexChar2HalfInt+0x5a>
 801c9ec:	1dfb      	adds	r3, r7, #7
 801c9ee:	781b      	ldrb	r3, [r3, #0]
 801c9f0:	2b46      	cmp	r3, #70	; 0x46
 801c9f2:	d804      	bhi.n	801c9fe <itdt_convertHexChar2HalfInt+0x5a>
 801c9f4:	1dfb      	adds	r3, r7, #7
 801c9f6:	781b      	ldrb	r3, [r3, #0]
 801c9f8:	3b37      	subs	r3, #55	; 0x37
 801c9fa:	b2db      	uxtb	r3, r3
 801c9fc:	e000      	b.n	801ca00 <itdt_convertHexChar2HalfInt+0x5c>
  return 0;
 801c9fe:	2300      	movs	r3, #0
}
 801ca00:	0018      	movs	r0, r3
 801ca02:	46bd      	mov	sp, r7
 801ca04:	b002      	add	sp, #8
 801ca06:	bd80      	pop	{r7, pc}

0801ca08 <itdt_convertHexChar2Int>:
}

/* -----------------------------------------------------------
 * Convert a "0"-"FF" value to 0-255 uint8_t value
 */
uint8_t itdt_convertHexChar2Int(char * v) {
 801ca08:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ca0a:	b085      	sub	sp, #20
 801ca0c:	af00      	add	r7, sp, #0
 801ca0e:	6078      	str	r0, [r7, #4]
  uint8_t q0 = itdt_convertHexChar2HalfInt(v[0]);
 801ca10:	687b      	ldr	r3, [r7, #4]
 801ca12:	781b      	ldrb	r3, [r3, #0]
 801ca14:	250f      	movs	r5, #15
 801ca16:	197c      	adds	r4, r7, r5
 801ca18:	0018      	movs	r0, r3
 801ca1a:	f7ff ffc3 	bl	801c9a4 <itdt_convertHexChar2HalfInt>
 801ca1e:	0003      	movs	r3, r0
 801ca20:	7023      	strb	r3, [r4, #0]
  uint8_t q1 = itdt_convertHexChar2HalfInt(v[1]);
 801ca22:	687b      	ldr	r3, [r7, #4]
 801ca24:	3301      	adds	r3, #1
 801ca26:	781b      	ldrb	r3, [r3, #0]
 801ca28:	260e      	movs	r6, #14
 801ca2a:	19bc      	adds	r4, r7, r6
 801ca2c:	0018      	movs	r0, r3
 801ca2e:	f7ff ffb9 	bl	801c9a4 <itdt_convertHexChar2HalfInt>
 801ca32:	0003      	movs	r3, r0
 801ca34:	7023      	strb	r3, [r4, #0]
  return (q0*16)+q1;
 801ca36:	197b      	adds	r3, r7, r5
 801ca38:	781b      	ldrb	r3, [r3, #0]
 801ca3a:	011b      	lsls	r3, r3, #4
 801ca3c:	b2da      	uxtb	r2, r3
 801ca3e:	19bb      	adds	r3, r7, r6
 801ca40:	781b      	ldrb	r3, [r3, #0]
 801ca42:	18d3      	adds	r3, r2, r3
 801ca44:	b2db      	uxtb	r3, r3
}
 801ca46:	0018      	movs	r0, r3
 801ca48:	46bd      	mov	sp, r7
 801ca4a:	b005      	add	sp, #20
 801ca4c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801ca4e <itdt_convertHexChar4Int>:
}

/* -----------------------------------------------------------
 *  Convert a 16bit hex string value into uint16_t value
 */
uint16_t itdt_convertHexChar4Int(char * v) {
 801ca4e:	b590      	push	{r4, r7, lr}
 801ca50:	b085      	sub	sp, #20
 801ca52:	af00      	add	r7, sp, #0
 801ca54:	6078      	str	r0, [r7, #4]
  uint16_t ret = itdt_convertHexChar2Int(&v[0]);
 801ca56:	687b      	ldr	r3, [r7, #4]
 801ca58:	0018      	movs	r0, r3
 801ca5a:	f7ff ffd5 	bl	801ca08 <itdt_convertHexChar2Int>
 801ca5e:	0003      	movs	r3, r0
 801ca60:	001a      	movs	r2, r3
 801ca62:	240e      	movs	r4, #14
 801ca64:	193b      	adds	r3, r7, r4
 801ca66:	801a      	strh	r2, [r3, #0]
  ret <<= 8;
 801ca68:	193b      	adds	r3, r7, r4
 801ca6a:	193a      	adds	r2, r7, r4
 801ca6c:	8812      	ldrh	r2, [r2, #0]
 801ca6e:	0212      	lsls	r2, r2, #8
 801ca70:	801a      	strh	r2, [r3, #0]
  ret += itdt_convertHexChar2Int(&v[2]);
 801ca72:	687b      	ldr	r3, [r7, #4]
 801ca74:	3302      	adds	r3, #2
 801ca76:	0018      	movs	r0, r3
 801ca78:	f7ff ffc6 	bl	801ca08 <itdt_convertHexChar2Int>
 801ca7c:	0003      	movs	r3, r0
 801ca7e:	b299      	uxth	r1, r3
 801ca80:	193b      	adds	r3, r7, r4
 801ca82:	193a      	adds	r2, r7, r4
 801ca84:	8812      	ldrh	r2, [r2, #0]
 801ca86:	188a      	adds	r2, r1, r2
 801ca88:	801a      	strh	r2, [r3, #0]
  return ret;
 801ca8a:	193b      	adds	r3, r7, r4
 801ca8c:	881b      	ldrh	r3, [r3, #0]
}
 801ca8e:	0018      	movs	r0, r3
 801ca90:	46bd      	mov	sp, r7
 801ca92:	b005      	add	sp, #20
 801ca94:	bd90      	pop	{r4, r7, pc}
	...

0801ca98 <itdt_convertDecCharNInt>:

/**
 * Convert a signed decimal number from a string to
 * an Int32 value.
 */
int32_t itdt_convertDecCharNInt(char * v, int sz) {
 801ca98:	b5b0      	push	{r4, r5, r7, lr}
 801ca9a:	b086      	sub	sp, #24
 801ca9c:	af00      	add	r7, sp, #0
 801ca9e:	6078      	str	r0, [r7, #4]
 801caa0:	6039      	str	r1, [r7, #0]
	int sign = 1;
 801caa2:	2301      	movs	r3, #1
 801caa4:	617b      	str	r3, [r7, #20]
	if ( *v == '-' ) {
 801caa6:	687b      	ldr	r3, [r7, #4]
 801caa8:	781b      	ldrb	r3, [r3, #0]
 801caaa:	2b2d      	cmp	r3, #45	; 0x2d
 801caac:	d108      	bne.n	801cac0 <itdt_convertDecCharNInt+0x28>
	   sign = -1;
 801caae:	2301      	movs	r3, #1
 801cab0:	425b      	negs	r3, r3
 801cab2:	617b      	str	r3, [r7, #20]
	   v++;
 801cab4:	687b      	ldr	r3, [r7, #4]
 801cab6:	3301      	adds	r3, #1
 801cab8:	607b      	str	r3, [r7, #4]
	   sz--;
 801caba:	683b      	ldr	r3, [r7, #0]
 801cabc:	3b01      	subs	r3, #1
 801cabe:	603b      	str	r3, [r7, #0]
	}
	uint16_t ret = 0;
 801cac0:	2312      	movs	r3, #18
 801cac2:	18fb      	adds	r3, r7, r3
 801cac4:	2200      	movs	r2, #0
 801cac6:	801a      	strh	r2, [r3, #0]
	for ( int i = 0 ; i < sz ; i++ ) {
 801cac8:	2300      	movs	r3, #0
 801caca:	60fb      	str	r3, [r7, #12]
 801cacc:	e027      	b.n	801cb1e <itdt_convertDecCharNInt+0x86>
	  ret *= 10;
 801cace:	2312      	movs	r3, #18
 801cad0:	18fa      	adds	r2, r7, r3
 801cad2:	18fb      	adds	r3, r7, r3
 801cad4:	881b      	ldrh	r3, [r3, #0]
 801cad6:	1c19      	adds	r1, r3, #0
 801cad8:	0089      	lsls	r1, r1, #2
 801cada:	18cb      	adds	r3, r1, r3
 801cadc:	18db      	adds	r3, r3, r3
 801cade:	8013      	strh	r3, [r2, #0]
	  uint8_t c = itdt_convertNumChar2Int(*v);
 801cae0:	687b      	ldr	r3, [r7, #4]
 801cae2:	781b      	ldrb	r3, [r3, #0]
 801cae4:	250b      	movs	r5, #11
 801cae6:	197c      	adds	r4, r7, r5
 801cae8:	0018      	movs	r0, r3
 801caea:	f7ff ff43 	bl	801c974 <itdt_convertNumChar2Int>
 801caee:	0003      	movs	r3, r0
 801caf0:	7023      	strb	r3, [r4, #0]
	  if ( c == 0xFF ) return ITSDK_INVALID_VALUE_32B;
 801caf2:	197b      	adds	r3, r7, r5
 801caf4:	781b      	ldrb	r3, [r3, #0]
 801caf6:	2bff      	cmp	r3, #255	; 0xff
 801caf8:	d101      	bne.n	801cafe <itdt_convertDecCharNInt+0x66>
 801cafa:	4b12      	ldr	r3, [pc, #72]	; (801cb44 <itdt_convertDecCharNInt+0xac>)
 801cafc:	e01d      	b.n	801cb3a <itdt_convertDecCharNInt+0xa2>
	  v++;
 801cafe:	687b      	ldr	r3, [r7, #4]
 801cb00:	3301      	adds	r3, #1
 801cb02:	607b      	str	r3, [r7, #4]
	  ret+= c;
 801cb04:	230b      	movs	r3, #11
 801cb06:	18fb      	adds	r3, r7, r3
 801cb08:	781b      	ldrb	r3, [r3, #0]
 801cb0a:	b299      	uxth	r1, r3
 801cb0c:	2212      	movs	r2, #18
 801cb0e:	18bb      	adds	r3, r7, r2
 801cb10:	18ba      	adds	r2, r7, r2
 801cb12:	8812      	ldrh	r2, [r2, #0]
 801cb14:	188a      	adds	r2, r1, r2
 801cb16:	801a      	strh	r2, [r3, #0]
	for ( int i = 0 ; i < sz ; i++ ) {
 801cb18:	68fb      	ldr	r3, [r7, #12]
 801cb1a:	3301      	adds	r3, #1
 801cb1c:	60fb      	str	r3, [r7, #12]
 801cb1e:	68fa      	ldr	r2, [r7, #12]
 801cb20:	683b      	ldr	r3, [r7, #0]
 801cb22:	429a      	cmp	r2, r3
 801cb24:	dbd3      	blt.n	801cace <itdt_convertDecCharNInt+0x36>
	 }
	 ret *= sign;
 801cb26:	697b      	ldr	r3, [r7, #20]
 801cb28:	b29a      	uxth	r2, r3
 801cb2a:	2012      	movs	r0, #18
 801cb2c:	183b      	adds	r3, r7, r0
 801cb2e:	1839      	adds	r1, r7, r0
 801cb30:	8809      	ldrh	r1, [r1, #0]
 801cb32:	434a      	muls	r2, r1
 801cb34:	801a      	strh	r2, [r3, #0]
	 return ret;
 801cb36:	183b      	adds	r3, r7, r0
 801cb38:	881b      	ldrh	r3, [r3, #0]
}
 801cb3a:	0018      	movs	r0, r3
 801cb3c:	46bd      	mov	sp, r7
 801cb3e:	b006      	add	sp, #24
 801cb40:	bdb0      	pop	{r4, r5, r7, pc}
 801cb42:	46c0      	nop			; (mov r8, r8)
 801cb44:	0fffffff 	.word	0x0fffffff

0801cb48 <itdt_isHexChar>:
}

/* ----------------------------------------------------------
 * Verify a char is an Hex Char
 */
bool itdt_isHexChar(char c, bool upper) {
 801cb48:	b580      	push	{r7, lr}
 801cb4a:	b082      	sub	sp, #8
 801cb4c:	af00      	add	r7, sp, #0
 801cb4e:	0002      	movs	r2, r0
 801cb50:	1dfb      	adds	r3, r7, #7
 801cb52:	701a      	strb	r2, [r3, #0]
 801cb54:	1dbb      	adds	r3, r7, #6
 801cb56:	1c0a      	adds	r2, r1, #0
 801cb58:	701a      	strb	r2, [r3, #0]
  if (    (c >= '0' && c <= '9' )
 801cb5a:	1dfb      	adds	r3, r7, #7
 801cb5c:	781b      	ldrb	r3, [r3, #0]
 801cb5e:	2b2f      	cmp	r3, #47	; 0x2f
 801cb60:	d903      	bls.n	801cb6a <itdt_isHexChar+0x22>
 801cb62:	1dfb      	adds	r3, r7, #7
 801cb64:	781b      	ldrb	r3, [r3, #0]
 801cb66:	2b39      	cmp	r3, #57	; 0x39
 801cb68:	d916      	bls.n	801cb98 <itdt_isHexChar+0x50>
       || (c >= 'A' && c <= 'F' )
 801cb6a:	1dfb      	adds	r3, r7, #7
 801cb6c:	781b      	ldrb	r3, [r3, #0]
 801cb6e:	2b40      	cmp	r3, #64	; 0x40
 801cb70:	d903      	bls.n	801cb7a <itdt_isHexChar+0x32>
 801cb72:	1dfb      	adds	r3, r7, #7
 801cb74:	781b      	ldrb	r3, [r3, #0]
 801cb76:	2b46      	cmp	r3, #70	; 0x46
 801cb78:	d90e      	bls.n	801cb98 <itdt_isHexChar+0x50>
     || (!upper   && c >= 'a' && c <= 'f')
 801cb7a:	1dbb      	adds	r3, r7, #6
 801cb7c:	781b      	ldrb	r3, [r3, #0]
 801cb7e:	2201      	movs	r2, #1
 801cb80:	4053      	eors	r3, r2
 801cb82:	b2db      	uxtb	r3, r3
 801cb84:	2b00      	cmp	r3, #0
 801cb86:	d009      	beq.n	801cb9c <itdt_isHexChar+0x54>
 801cb88:	1dfb      	adds	r3, r7, #7
 801cb8a:	781b      	ldrb	r3, [r3, #0]
 801cb8c:	2b60      	cmp	r3, #96	; 0x60
 801cb8e:	d905      	bls.n	801cb9c <itdt_isHexChar+0x54>
 801cb90:	1dfb      	adds	r3, r7, #7
 801cb92:	781b      	ldrb	r3, [r3, #0]
 801cb94:	2b66      	cmp	r3, #102	; 0x66
 801cb96:	d801      	bhi.n	801cb9c <itdt_isHexChar+0x54>
    ) {
    return true;
 801cb98:	2301      	movs	r3, #1
 801cb9a:	e000      	b.n	801cb9e <itdt_isHexChar+0x56>
  }
  return false;
 801cb9c:	2300      	movs	r3, #0
}
 801cb9e:	0018      	movs	r0, r3
 801cba0:	46bd      	mov	sp, r7
 801cba2:	b002      	add	sp, #8
 801cba4:	bd80      	pop	{r7, pc}

0801cba6 <itdt_isHexString>:

/* ----------------------------------------------------------
 * Verify a string is a valid Hex string with given size
 */
bool itdt_isHexString(char * str,int n,itsdk_bool_e upper) {
 801cba6:	b580      	push	{r7, lr}
 801cba8:	b086      	sub	sp, #24
 801cbaa:	af00      	add	r7, sp, #0
 801cbac:	60f8      	str	r0, [r7, #12]
 801cbae:	60b9      	str	r1, [r7, #8]
 801cbb0:	1dfb      	adds	r3, r7, #7
 801cbb2:	701a      	strb	r2, [r3, #0]
  int i = 0;
 801cbb4:	2300      	movs	r3, #0
 801cbb6:	617b      	str	r3, [r7, #20]
  while ( i < n && str[i] != 0 ) {
 801cbb8:	e02d      	b.n	801cc16 <itdt_isHexString+0x70>
    if (    (str[i] >= '0' && str[i] <= '9' )
 801cbba:	697b      	ldr	r3, [r7, #20]
 801cbbc:	68fa      	ldr	r2, [r7, #12]
 801cbbe:	18d3      	adds	r3, r2, r3
 801cbc0:	781b      	ldrb	r3, [r3, #0]
 801cbc2:	2b2f      	cmp	r3, #47	; 0x2f
 801cbc4:	d905      	bls.n	801cbd2 <itdt_isHexString+0x2c>
 801cbc6:	697b      	ldr	r3, [r7, #20]
 801cbc8:	68fa      	ldr	r2, [r7, #12]
 801cbca:	18d3      	adds	r3, r2, r3
 801cbcc:	781b      	ldrb	r3, [r3, #0]
 801cbce:	2b39      	cmp	r3, #57	; 0x39
 801cbd0:	d91b      	bls.n	801cc0a <itdt_isHexString+0x64>
       || (str[i] >= 'A' && str[i] <= 'F' )
 801cbd2:	697b      	ldr	r3, [r7, #20]
 801cbd4:	68fa      	ldr	r2, [r7, #12]
 801cbd6:	18d3      	adds	r3, r2, r3
 801cbd8:	781b      	ldrb	r3, [r3, #0]
 801cbda:	2b40      	cmp	r3, #64	; 0x40
 801cbdc:	d905      	bls.n	801cbea <itdt_isHexString+0x44>
 801cbde:	697b      	ldr	r3, [r7, #20]
 801cbe0:	68fa      	ldr	r2, [r7, #12]
 801cbe2:	18d3      	adds	r3, r2, r3
 801cbe4:	781b      	ldrb	r3, [r3, #0]
 801cbe6:	2b46      	cmp	r3, #70	; 0x46
 801cbe8:	d90f      	bls.n	801cc0a <itdt_isHexString+0x64>
       || (!upper && str[i] >= 'a' && str[i] <= 'f')
 801cbea:	1dfb      	adds	r3, r7, #7
 801cbec:	781b      	ldrb	r3, [r3, #0]
 801cbee:	2b00      	cmp	r3, #0
 801cbf0:	d10f      	bne.n	801cc12 <itdt_isHexString+0x6c>
 801cbf2:	697b      	ldr	r3, [r7, #20]
 801cbf4:	68fa      	ldr	r2, [r7, #12]
 801cbf6:	18d3      	adds	r3, r2, r3
 801cbf8:	781b      	ldrb	r3, [r3, #0]
 801cbfa:	2b60      	cmp	r3, #96	; 0x60
 801cbfc:	d909      	bls.n	801cc12 <itdt_isHexString+0x6c>
 801cbfe:	697b      	ldr	r3, [r7, #20]
 801cc00:	68fa      	ldr	r2, [r7, #12]
 801cc02:	18d3      	adds	r3, r2, r3
 801cc04:	781b      	ldrb	r3, [r3, #0]
 801cc06:	2b66      	cmp	r3, #102	; 0x66
 801cc08:	d803      	bhi.n	801cc12 <itdt_isHexString+0x6c>
       ) {
      i++;
 801cc0a:	697b      	ldr	r3, [r7, #20]
 801cc0c:	3301      	adds	r3, #1
 801cc0e:	617b      	str	r3, [r7, #20]
 801cc10:	e001      	b.n	801cc16 <itdt_isHexString+0x70>
    } else {
      return false;
 801cc12:	2300      	movs	r3, #0
 801cc14:	e00f      	b.n	801cc36 <itdt_isHexString+0x90>
  while ( i < n && str[i] != 0 ) {
 801cc16:	697a      	ldr	r2, [r7, #20]
 801cc18:	68bb      	ldr	r3, [r7, #8]
 801cc1a:	429a      	cmp	r2, r3
 801cc1c:	da05      	bge.n	801cc2a <itdt_isHexString+0x84>
 801cc1e:	697b      	ldr	r3, [r7, #20]
 801cc20:	68fa      	ldr	r2, [r7, #12]
 801cc22:	18d3      	adds	r3, r2, r3
 801cc24:	781b      	ldrb	r3, [r3, #0]
 801cc26:	2b00      	cmp	r3, #0
 801cc28:	d1c7      	bne.n	801cbba <itdt_isHexString+0x14>
    }
  }
  return ( i == n )?true:false;
 801cc2a:	697a      	ldr	r2, [r7, #20]
 801cc2c:	68bb      	ldr	r3, [r7, #8]
 801cc2e:	1ad3      	subs	r3, r2, r3
 801cc30:	425a      	negs	r2, r3
 801cc32:	4153      	adcs	r3, r2
 801cc34:	b2db      	uxtb	r3, r3
}
 801cc36:	0018      	movs	r0, r3
 801cc38:	46bd      	mov	sp, r7
 801cc3a:	b006      	add	sp, #24
 801cc3c:	bd80      	pop	{r7, pc}

0801cc3e <itdt_count_bits_1>:


/* ---------------------------------------------------
 * Count the number of bit at 1 in a given word
 */
uint8_t itdt_count_bits_1(uint32_t v) {
 801cc3e:	b580      	push	{r7, lr}
 801cc40:	b084      	sub	sp, #16
 801cc42:	af00      	add	r7, sp, #0
 801cc44:	6078      	str	r0, [r7, #4]
	uint8_t ret = 0;
 801cc46:	230f      	movs	r3, #15
 801cc48:	18fb      	adds	r3, r7, r3
 801cc4a:	2200      	movs	r2, #0
 801cc4c:	701a      	strb	r2, [r3, #0]
	while ( v > 0 ) {
 801cc4e:	e00c      	b.n	801cc6a <itdt_count_bits_1+0x2c>
		if ( v & 1 ) ret++;
 801cc50:	687b      	ldr	r3, [r7, #4]
 801cc52:	2201      	movs	r2, #1
 801cc54:	4013      	ands	r3, r2
 801cc56:	d005      	beq.n	801cc64 <itdt_count_bits_1+0x26>
 801cc58:	210f      	movs	r1, #15
 801cc5a:	187b      	adds	r3, r7, r1
 801cc5c:	781a      	ldrb	r2, [r3, #0]
 801cc5e:	187b      	adds	r3, r7, r1
 801cc60:	3201      	adds	r2, #1
 801cc62:	701a      	strb	r2, [r3, #0]
		v >>= 1;
 801cc64:	687b      	ldr	r3, [r7, #4]
 801cc66:	085b      	lsrs	r3, r3, #1
 801cc68:	607b      	str	r3, [r7, #4]
	while ( v > 0 ) {
 801cc6a:	687b      	ldr	r3, [r7, #4]
 801cc6c:	2b00      	cmp	r3, #0
 801cc6e:	d1ef      	bne.n	801cc50 <itdt_count_bits_1+0x12>
	}
	return ret;
 801cc70:	230f      	movs	r3, #15
 801cc72:	18fb      	adds	r3, r7, r3
 801cc74:	781b      	ldrb	r3, [r3, #0]
}
 801cc76:	0018      	movs	r0, r3
 801cc78:	46bd      	mov	sp, r7
 801cc7a:	b004      	add	sp, #16
 801cc7c:	bd80      	pop	{r7, pc}
	...

0801cc80 <itdt_sched_registerSched>:
/**
 * Register a new task in the scheduler with the given period in Ms and the
 * associated function to call. The mode params defines the scheduler behavior
 * Returns the scedId on success or ITSDK_SCHED_ERROR on error.
 */
uint8_t itdt_sched_registerSched(uint32_t periodMs,uint16_t mode, void (*f)(void)) {
 801cc80:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cc82:	b085      	sub	sp, #20
 801cc84:	af00      	add	r7, sp, #0
 801cc86:	60f8      	str	r0, [r7, #12]
 801cc88:	607a      	str	r2, [r7, #4]
 801cc8a:	230a      	movs	r3, #10
 801cc8c:	18fb      	adds	r3, r7, r3
 801cc8e:	1c0a      	adds	r2, r1, #0
 801cc90:	801a      	strh	r2, [r3, #0]

	if ( periodMs > ITSDK_SCHED_MAX_PERIOD ) {
 801cc92:	68fb      	ldr	r3, [r7, #12]
 801cc94:	4a43      	ldr	r2, [pc, #268]	; (801cda4 <itdt_sched_registerSched+0x124>)
 801cc96:	4293      	cmp	r3, r2
 801cc98:	d906      	bls.n	801cca8 <itdt_sched_registerSched+0x28>
		ITSDK_ERROR_REPORT(ITSDK_ERROR_SCHED_DURATION_OVERFLOW,0);
 801cc9a:	4b43      	ldr	r3, [pc, #268]	; (801cda8 <itdt_sched_registerSched+0x128>)
 801cc9c:	2100      	movs	r1, #0
 801cc9e:	0018      	movs	r0, r3
 801cca0:	f7fe ff5c 	bl	801bb5c <itsdk_error_report>
		return ITSDK_SCHED_ERROR;
 801cca4:	23ff      	movs	r3, #255	; 0xff
 801cca6:	e079      	b.n	801cd9c <itdt_sched_registerSched+0x11c>
	}
	if ( __sNum < ITSDK_SHEDULER_TASKS ) {
 801cca8:	4b40      	ldr	r3, [pc, #256]	; (801cdac <itdt_sched_registerSched+0x12c>)
 801ccaa:	781b      	ldrb	r3, [r3, #0]
 801ccac:	2b00      	cmp	r3, #0
 801ccae:	d174      	bne.n	801cd9a <itdt_sched_registerSched+0x11a>
		__scheds[__sNum].func=f;
 801ccb0:	4b3e      	ldr	r3, [pc, #248]	; (801cdac <itdt_sched_registerSched+0x12c>)
 801ccb2:	781b      	ldrb	r3, [r3, #0]
 801ccb4:	4a3e      	ldr	r2, [pc, #248]	; (801cdb0 <itdt_sched_registerSched+0x130>)
 801ccb6:	011b      	lsls	r3, r3, #4
 801ccb8:	18d3      	adds	r3, r2, r3
 801ccba:	330c      	adds	r3, #12
 801ccbc:	687a      	ldr	r2, [r7, #4]
 801ccbe:	601a      	str	r2, [r3, #0]
		__scheds[__sNum].period=periodMs;
 801ccc0:	4b3a      	ldr	r3, [pc, #232]	; (801cdac <itdt_sched_registerSched+0x12c>)
 801ccc2:	781b      	ldrb	r3, [r3, #0]
 801ccc4:	001e      	movs	r6, r3
 801ccc6:	68fb      	ldr	r3, [r7, #12]
 801ccc8:	021b      	lsls	r3, r3, #8
 801ccca:	0a1a      	lsrs	r2, r3, #8
 801cccc:	4938      	ldr	r1, [pc, #224]	; (801cdb0 <itdt_sched_registerSched+0x130>)
 801ccce:	2008      	movs	r0, #8
 801ccd0:	0133      	lsls	r3, r6, #4
 801ccd2:	18cb      	adds	r3, r1, r3
 801ccd4:	181b      	adds	r3, r3, r0
 801ccd6:	0212      	lsls	r2, r2, #8
 801ccd8:	0a12      	lsrs	r2, r2, #8
 801ccda:	6819      	ldr	r1, [r3, #0]
 801ccdc:	0e09      	lsrs	r1, r1, #24
 801ccde:	0609      	lsls	r1, r1, #24
 801cce0:	430a      	orrs	r2, r1
 801cce2:	601a      	str	r2, [r3, #0]
		__scheds[__sNum].nextRun=(mode & ITSDK_SCHED_CONF_IMMEDIATE)?itsdk_time_get_ms():itsdk_time_get_ms()+periodMs;
 801cce4:	230a      	movs	r3, #10
 801cce6:	18fb      	adds	r3, r7, r3
 801cce8:	881a      	ldrh	r2, [r3, #0]
 801ccea:	2380      	movs	r3, #128	; 0x80
 801ccec:	005b      	lsls	r3, r3, #1
 801ccee:	4013      	ands	r3, r2
 801ccf0:	d004      	beq.n	801ccfc <itdt_sched_registerSched+0x7c>
 801ccf2:	f000 f9f5 	bl	801d0e0 <itsdk_time_get_ms>
 801ccf6:	0003      	movs	r3, r0
 801ccf8:	000c      	movs	r4, r1
 801ccfa:	e00b      	b.n	801cd14 <itdt_sched_registerSched+0x94>
 801ccfc:	f000 f9f0 	bl	801d0e0 <itsdk_time_get_ms>
 801cd00:	0002      	movs	r2, r0
 801cd02:	000b      	movs	r3, r1
 801cd04:	68f9      	ldr	r1, [r7, #12]
 801cd06:	000c      	movs	r4, r1
 801cd08:	2100      	movs	r1, #0
 801cd0a:	000d      	movs	r5, r1
 801cd0c:	1912      	adds	r2, r2, r4
 801cd0e:	416b      	adcs	r3, r5
 801cd10:	001c      	movs	r4, r3
 801cd12:	0013      	movs	r3, r2
 801cd14:	4a25      	ldr	r2, [pc, #148]	; (801cdac <itdt_sched_registerSched+0x12c>)
 801cd16:	7812      	ldrb	r2, [r2, #0]
 801cd18:	4925      	ldr	r1, [pc, #148]	; (801cdb0 <itdt_sched_registerSched+0x130>)
 801cd1a:	0112      	lsls	r2, r2, #4
 801cd1c:	188a      	adds	r2, r1, r2
 801cd1e:	6013      	str	r3, [r2, #0]
 801cd20:	6054      	str	r4, [r2, #4]
		__scheds[__sNum].halt=(mode & ITSDK_SCHED_CONF_HALT)?1:0;
 801cd22:	250a      	movs	r5, #10
 801cd24:	197b      	adds	r3, r7, r5
 801cd26:	881b      	ldrh	r3, [r3, #0]
 801cd28:	105a      	asrs	r2, r3, #1
 801cd2a:	4b20      	ldr	r3, [pc, #128]	; (801cdac <itdt_sched_registerSched+0x12c>)
 801cd2c:	781b      	ldrb	r3, [r3, #0]
 801cd2e:	001c      	movs	r4, r3
 801cd30:	2301      	movs	r3, #1
 801cd32:	4013      	ands	r3, r2
 801cd34:	b2da      	uxtb	r2, r3
 801cd36:	491e      	ldr	r1, [pc, #120]	; (801cdb0 <itdt_sched_registerSched+0x130>)
 801cd38:	2008      	movs	r0, #8
 801cd3a:	0123      	lsls	r3, r4, #4
 801cd3c:	18cb      	adds	r3, r1, r3
 801cd3e:	181b      	adds	r3, r3, r0
 801cd40:	2101      	movs	r1, #1
 801cd42:	400a      	ands	r2, r1
 801cd44:	1890      	adds	r0, r2, r2
 801cd46:	78da      	ldrb	r2, [r3, #3]
 801cd48:	2102      	movs	r1, #2
 801cd4a:	438a      	bics	r2, r1
 801cd4c:	1c11      	adds	r1, r2, #0
 801cd4e:	1c02      	adds	r2, r0, #0
 801cd50:	430a      	orrs	r2, r1
 801cd52:	70da      	strb	r2, [r3, #3]
		__scheds[__sNum].skip=(mode & ITSDK_SCHED_CONF_SKIP)?1:0;
 801cd54:	4b15      	ldr	r3, [pc, #84]	; (801cdac <itdt_sched_registerSched+0x12c>)
 801cd56:	781b      	ldrb	r3, [r3, #0]
 801cd58:	001c      	movs	r4, r3
 801cd5a:	197b      	adds	r3, r7, r5
 801cd5c:	881b      	ldrh	r3, [r3, #0]
 801cd5e:	1c1a      	adds	r2, r3, #0
 801cd60:	2301      	movs	r3, #1
 801cd62:	4013      	ands	r3, r2
 801cd64:	b2da      	uxtb	r2, r3
 801cd66:	4912      	ldr	r1, [pc, #72]	; (801cdb0 <itdt_sched_registerSched+0x130>)
 801cd68:	2008      	movs	r0, #8
 801cd6a:	0123      	lsls	r3, r4, #4
 801cd6c:	18cb      	adds	r3, r1, r3
 801cd6e:	181b      	adds	r3, r3, r0
 801cd70:	2101      	movs	r1, #1
 801cd72:	400a      	ands	r2, r1
 801cd74:	0010      	movs	r0, r2
 801cd76:	78da      	ldrb	r2, [r3, #3]
 801cd78:	2101      	movs	r1, #1
 801cd7a:	438a      	bics	r2, r1
 801cd7c:	1c11      	adds	r1, r2, #0
 801cd7e:	1c02      	adds	r2, r0, #0
 801cd80:	430a      	orrs	r2, r1
 801cd82:	70da      	strb	r2, [r3, #3]
		__sNum++;
 801cd84:	4b09      	ldr	r3, [pc, #36]	; (801cdac <itdt_sched_registerSched+0x12c>)
 801cd86:	781b      	ldrb	r3, [r3, #0]
 801cd88:	3301      	adds	r3, #1
 801cd8a:	b2da      	uxtb	r2, r3
 801cd8c:	4b07      	ldr	r3, [pc, #28]	; (801cdac <itdt_sched_registerSched+0x12c>)
 801cd8e:	701a      	strb	r2, [r3, #0]
		return __sNum-1;
 801cd90:	4b06      	ldr	r3, [pc, #24]	; (801cdac <itdt_sched_registerSched+0x12c>)
 801cd92:	781b      	ldrb	r3, [r3, #0]
 801cd94:	3b01      	subs	r3, #1
 801cd96:	b2db      	uxtb	r3, r3
 801cd98:	e000      	b.n	801cd9c <itdt_sched_registerSched+0x11c>
	} else return ITSDK_SCHED_ERROR;
 801cd9a:	23ff      	movs	r3, #255	; 0xff

}
 801cd9c:	0018      	movs	r0, r3
 801cd9e:	46bd      	mov	sp, r7
 801cda0:	b005      	add	sp, #20
 801cda2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cda4:	00ffffff 	.word	0x00ffffff
 801cda8:	80000050 	.word	0x80000050
 801cdac:	2000122d 	.word	0x2000122d
 801cdb0:	200016c0 	.word	0x200016c0

0801cdb4 <itdt_sched_execute>:

/**
 * Task executor
 */
void itdt_sched_execute() {
 801cdb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cdb6:	b087      	sub	sp, #28
 801cdb8:	af00      	add	r7, sp, #0

	uint64_t t = itsdk_time_get_ms();
 801cdba:	f000 f991 	bl	801d0e0 <itsdk_time_get_ms>
 801cdbe:	0003      	movs	r3, r0
 801cdc0:	000c      	movs	r4, r1
 801cdc2:	60bb      	str	r3, [r7, #8]
 801cdc4:	60fc      	str	r4, [r7, #12]
	for (int i = 0 ; i < __sNum ; i++) {
 801cdc6:	2300      	movs	r3, #0
 801cdc8:	617b      	str	r3, [r7, #20]
 801cdca:	e091      	b.n	801cef0 <itdt_sched_execute+0x13c>
		do {
			if ( __scheds[i].nextRun <= t ) {
 801cdcc:	4a4e      	ldr	r2, [pc, #312]	; (801cf08 <itdt_sched_execute+0x154>)
 801cdce:	697b      	ldr	r3, [r7, #20]
 801cdd0:	011b      	lsls	r3, r3, #4
 801cdd2:	18d3      	adds	r3, r2, r3
 801cdd4:	685c      	ldr	r4, [r3, #4]
 801cdd6:	681b      	ldr	r3, [r3, #0]
 801cdd8:	68fa      	ldr	r2, [r7, #12]
 801cdda:	42a2      	cmp	r2, r4
 801cddc:	d332      	bcc.n	801ce44 <itdt_sched_execute+0x90>
 801cdde:	68fa      	ldr	r2, [r7, #12]
 801cde0:	42a2      	cmp	r2, r4
 801cde2:	d102      	bne.n	801cdea <itdt_sched_execute+0x36>
 801cde4:	68ba      	ldr	r2, [r7, #8]
 801cde6:	429a      	cmp	r2, r3
 801cde8:	d32c      	bcc.n	801ce44 <itdt_sched_execute+0x90>
	 		    __scheds[i].nextRun += (uint64_t)__scheds[i].period;
 801cdea:	4a47      	ldr	r2, [pc, #284]	; (801cf08 <itdt_sched_execute+0x154>)
 801cdec:	697b      	ldr	r3, [r7, #20]
 801cdee:	011b      	lsls	r3, r3, #4
 801cdf0:	18d3      	adds	r3, r2, r3
 801cdf2:	685c      	ldr	r4, [r3, #4]
 801cdf4:	681b      	ldr	r3, [r3, #0]
 801cdf6:	4944      	ldr	r1, [pc, #272]	; (801cf08 <itdt_sched_execute+0x154>)
 801cdf8:	697a      	ldr	r2, [r7, #20]
 801cdfa:	2008      	movs	r0, #8
 801cdfc:	0112      	lsls	r2, r2, #4
 801cdfe:	188a      	adds	r2, r1, r2
 801ce00:	1812      	adds	r2, r2, r0
 801ce02:	6812      	ldr	r2, [r2, #0]
 801ce04:	0212      	lsls	r2, r2, #8
 801ce06:	0a12      	lsrs	r2, r2, #8
 801ce08:	0015      	movs	r5, r2
 801ce0a:	2200      	movs	r2, #0
 801ce0c:	0016      	movs	r6, r2
 801ce0e:	195b      	adds	r3, r3, r5
 801ce10:	4174      	adcs	r4, r6
 801ce12:	493d      	ldr	r1, [pc, #244]	; (801cf08 <itdt_sched_execute+0x154>)
 801ce14:	697a      	ldr	r2, [r7, #20]
 801ce16:	0112      	lsls	r2, r2, #4
 801ce18:	188a      	adds	r2, r1, r2
 801ce1a:	6013      	str	r3, [r2, #0]
 801ce1c:	6054      	str	r4, [r2, #4]
				if ( !__scheds[i].halt ) {
 801ce1e:	4a3a      	ldr	r2, [pc, #232]	; (801cf08 <itdt_sched_execute+0x154>)
 801ce20:	697b      	ldr	r3, [r7, #20]
 801ce22:	2108      	movs	r1, #8
 801ce24:	011b      	lsls	r3, r3, #4
 801ce26:	18d3      	adds	r3, r2, r3
 801ce28:	185b      	adds	r3, r3, r1
 801ce2a:	78db      	ldrb	r3, [r3, #3]
 801ce2c:	079b      	lsls	r3, r3, #30
 801ce2e:	0fdb      	lsrs	r3, r3, #31
 801ce30:	b2db      	uxtb	r3, r3
 801ce32:	2b00      	cmp	r3, #0
 801ce34:	d106      	bne.n	801ce44 <itdt_sched_execute+0x90>
					_LOG_SCHED(("[sched] (%d) exec @%ld\r\n",i,t));
					(*__scheds[i].func)();
 801ce36:	4a34      	ldr	r2, [pc, #208]	; (801cf08 <itdt_sched_execute+0x154>)
 801ce38:	697b      	ldr	r3, [r7, #20]
 801ce3a:	011b      	lsls	r3, r3, #4
 801ce3c:	18d3      	adds	r3, r2, r3
 801ce3e:	330c      	adds	r3, #12
 801ce40:	681b      	ldr	r3, [r3, #0]
 801ce42:	4798      	blx	r3
				}
			}
		} while (!__scheds[i].skip && __scheds[i].nextRun <= t );
 801ce44:	4a30      	ldr	r2, [pc, #192]	; (801cf08 <itdt_sched_execute+0x154>)
 801ce46:	697b      	ldr	r3, [r7, #20]
 801ce48:	2108      	movs	r1, #8
 801ce4a:	011b      	lsls	r3, r3, #4
 801ce4c:	18d3      	adds	r3, r2, r3
 801ce4e:	185b      	adds	r3, r3, r1
 801ce50:	78db      	ldrb	r3, [r3, #3]
 801ce52:	07db      	lsls	r3, r3, #31
 801ce54:	0fdb      	lsrs	r3, r3, #31
 801ce56:	b2db      	uxtb	r3, r3
 801ce58:	2b00      	cmp	r3, #0
 801ce5a:	d12b      	bne.n	801ceb4 <itdt_sched_execute+0x100>
 801ce5c:	4a2a      	ldr	r2, [pc, #168]	; (801cf08 <itdt_sched_execute+0x154>)
 801ce5e:	697b      	ldr	r3, [r7, #20]
 801ce60:	011b      	lsls	r3, r3, #4
 801ce62:	18d3      	adds	r3, r2, r3
 801ce64:	685c      	ldr	r4, [r3, #4]
 801ce66:	681b      	ldr	r3, [r3, #0]
 801ce68:	68fa      	ldr	r2, [r7, #12]
 801ce6a:	42a2      	cmp	r2, r4
 801ce6c:	d322      	bcc.n	801ceb4 <itdt_sched_execute+0x100>
 801ce6e:	68fa      	ldr	r2, [r7, #12]
 801ce70:	42a2      	cmp	r2, r4
 801ce72:	d1ab      	bne.n	801cdcc <itdt_sched_execute+0x18>
 801ce74:	68ba      	ldr	r2, [r7, #8]
 801ce76:	429a      	cmp	r2, r3
 801ce78:	d31c      	bcc.n	801ceb4 <itdt_sched_execute+0x100>
 801ce7a:	e7a7      	b.n	801cdcc <itdt_sched_execute+0x18>
		while (__scheds[i].skip &&__scheds[i].nextRun <= t) __scheds[i].nextRun += __scheds[i].period;
 801ce7c:	4a22      	ldr	r2, [pc, #136]	; (801cf08 <itdt_sched_execute+0x154>)
 801ce7e:	697b      	ldr	r3, [r7, #20]
 801ce80:	011b      	lsls	r3, r3, #4
 801ce82:	18d3      	adds	r3, r2, r3
 801ce84:	685c      	ldr	r4, [r3, #4]
 801ce86:	681b      	ldr	r3, [r3, #0]
 801ce88:	491f      	ldr	r1, [pc, #124]	; (801cf08 <itdt_sched_execute+0x154>)
 801ce8a:	697a      	ldr	r2, [r7, #20]
 801ce8c:	2008      	movs	r0, #8
 801ce8e:	0112      	lsls	r2, r2, #4
 801ce90:	188a      	adds	r2, r1, r2
 801ce92:	1812      	adds	r2, r2, r0
 801ce94:	6812      	ldr	r2, [r2, #0]
 801ce96:	0212      	lsls	r2, r2, #8
 801ce98:	0a12      	lsrs	r2, r2, #8
 801ce9a:	603a      	str	r2, [r7, #0]
 801ce9c:	2200      	movs	r2, #0
 801ce9e:	607a      	str	r2, [r7, #4]
 801cea0:	6839      	ldr	r1, [r7, #0]
 801cea2:	687a      	ldr	r2, [r7, #4]
 801cea4:	185b      	adds	r3, r3, r1
 801cea6:	4154      	adcs	r4, r2
 801cea8:	4917      	ldr	r1, [pc, #92]	; (801cf08 <itdt_sched_execute+0x154>)
 801ceaa:	697a      	ldr	r2, [r7, #20]
 801ceac:	0112      	lsls	r2, r2, #4
 801ceae:	188a      	adds	r2, r1, r2
 801ceb0:	6013      	str	r3, [r2, #0]
 801ceb2:	6054      	str	r4, [r2, #4]
 801ceb4:	4a14      	ldr	r2, [pc, #80]	; (801cf08 <itdt_sched_execute+0x154>)
 801ceb6:	697b      	ldr	r3, [r7, #20]
 801ceb8:	2108      	movs	r1, #8
 801ceba:	011b      	lsls	r3, r3, #4
 801cebc:	18d3      	adds	r3, r2, r3
 801cebe:	185b      	adds	r3, r3, r1
 801cec0:	78db      	ldrb	r3, [r3, #3]
 801cec2:	07db      	lsls	r3, r3, #31
 801cec4:	0fdb      	lsrs	r3, r3, #31
 801cec6:	b2db      	uxtb	r3, r3
 801cec8:	2b00      	cmp	r3, #0
 801ceca:	d00e      	beq.n	801ceea <itdt_sched_execute+0x136>
 801cecc:	4a0e      	ldr	r2, [pc, #56]	; (801cf08 <itdt_sched_execute+0x154>)
 801cece:	697b      	ldr	r3, [r7, #20]
 801ced0:	011b      	lsls	r3, r3, #4
 801ced2:	18d3      	adds	r3, r2, r3
 801ced4:	685c      	ldr	r4, [r3, #4]
 801ced6:	681b      	ldr	r3, [r3, #0]
 801ced8:	68fa      	ldr	r2, [r7, #12]
 801ceda:	42a2      	cmp	r2, r4
 801cedc:	d305      	bcc.n	801ceea <itdt_sched_execute+0x136>
 801cede:	68fa      	ldr	r2, [r7, #12]
 801cee0:	42a2      	cmp	r2, r4
 801cee2:	d1cb      	bne.n	801ce7c <itdt_sched_execute+0xc8>
 801cee4:	68ba      	ldr	r2, [r7, #8]
 801cee6:	429a      	cmp	r2, r3
 801cee8:	d2c8      	bcs.n	801ce7c <itdt_sched_execute+0xc8>
	for (int i = 0 ; i < __sNum ; i++) {
 801ceea:	697b      	ldr	r3, [r7, #20]
 801ceec:	3301      	adds	r3, #1
 801ceee:	617b      	str	r3, [r7, #20]
 801cef0:	4b06      	ldr	r3, [pc, #24]	; (801cf0c <itdt_sched_execute+0x158>)
 801cef2:	781b      	ldrb	r3, [r3, #0]
 801cef4:	001a      	movs	r2, r3
 801cef6:	697b      	ldr	r3, [r7, #20]
 801cef8:	4293      	cmp	r3, r2
 801cefa:	da00      	bge.n	801cefe <itdt_sched_execute+0x14a>
 801cefc:	e766      	b.n	801cdcc <itdt_sched_execute+0x18>
		_LOG_SCHED(("[sched] (%d) next @%ld\r\n",i,__scheds[i].nextRun));
	}

}
 801cefe:	46c0      	nop			; (mov r8, r8)
 801cf00:	46bd      	mov	sp, r7
 801cf02:	b007      	add	sp, #28
 801cf04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cf06:	46c0      	nop			; (mov r8, r8)
 801cf08:	200016c0 	.word	0x200016c0
 801cf0c:	2000122d 	.word	0x2000122d

0801cf10 <itdt_sched_nextRun>:
}

/**
 * Return time in ms to the next task running
 */
uint32_t itdt_sched_nextRun() {
 801cf10:	b590      	push	{r4, r7, lr}
 801cf12:	b087      	sub	sp, #28
 801cf14:	af00      	add	r7, sp, #0
	uint64_t min = 0;
 801cf16:	2300      	movs	r3, #0
 801cf18:	2400      	movs	r4, #0
 801cf1a:	613b      	str	r3, [r7, #16]
 801cf1c:	617c      	str	r4, [r7, #20]
	for (int i = 0 ; i < __sNum ; i++) {
 801cf1e:	2300      	movs	r3, #0
 801cf20:	60fb      	str	r3, [r7, #12]
 801cf22:	e029      	b.n	801cf78 <itdt_sched_nextRun+0x68>
		if (  !__scheds[i].halt && (min == 0 || min > __scheds[i].nextRun) ) {
 801cf24:	4a28      	ldr	r2, [pc, #160]	; (801cfc8 <itdt_sched_nextRun+0xb8>)
 801cf26:	68fb      	ldr	r3, [r7, #12]
 801cf28:	2108      	movs	r1, #8
 801cf2a:	011b      	lsls	r3, r3, #4
 801cf2c:	18d3      	adds	r3, r2, r3
 801cf2e:	185b      	adds	r3, r3, r1
 801cf30:	78db      	ldrb	r3, [r3, #3]
 801cf32:	079b      	lsls	r3, r3, #30
 801cf34:	0fdb      	lsrs	r3, r3, #31
 801cf36:	b2db      	uxtb	r3, r3
 801cf38:	2b00      	cmp	r3, #0
 801cf3a:	d11a      	bne.n	801cf72 <itdt_sched_nextRun+0x62>
 801cf3c:	693b      	ldr	r3, [r7, #16]
 801cf3e:	697a      	ldr	r2, [r7, #20]
 801cf40:	4313      	orrs	r3, r2
 801cf42:	d00e      	beq.n	801cf62 <itdt_sched_nextRun+0x52>
 801cf44:	4a20      	ldr	r2, [pc, #128]	; (801cfc8 <itdt_sched_nextRun+0xb8>)
 801cf46:	68fb      	ldr	r3, [r7, #12]
 801cf48:	011b      	lsls	r3, r3, #4
 801cf4a:	18d3      	adds	r3, r2, r3
 801cf4c:	685c      	ldr	r4, [r3, #4]
 801cf4e:	681b      	ldr	r3, [r3, #0]
 801cf50:	697a      	ldr	r2, [r7, #20]
 801cf52:	42a2      	cmp	r2, r4
 801cf54:	d805      	bhi.n	801cf62 <itdt_sched_nextRun+0x52>
 801cf56:	697a      	ldr	r2, [r7, #20]
 801cf58:	42a2      	cmp	r2, r4
 801cf5a:	d10a      	bne.n	801cf72 <itdt_sched_nextRun+0x62>
 801cf5c:	693a      	ldr	r2, [r7, #16]
 801cf5e:	429a      	cmp	r2, r3
 801cf60:	d907      	bls.n	801cf72 <itdt_sched_nextRun+0x62>
			min = __scheds[i].nextRun;
 801cf62:	4a19      	ldr	r2, [pc, #100]	; (801cfc8 <itdt_sched_nextRun+0xb8>)
 801cf64:	68fb      	ldr	r3, [r7, #12]
 801cf66:	011b      	lsls	r3, r3, #4
 801cf68:	18d3      	adds	r3, r2, r3
 801cf6a:	685c      	ldr	r4, [r3, #4]
 801cf6c:	681b      	ldr	r3, [r3, #0]
 801cf6e:	613b      	str	r3, [r7, #16]
 801cf70:	617c      	str	r4, [r7, #20]
	for (int i = 0 ; i < __sNum ; i++) {
 801cf72:	68fb      	ldr	r3, [r7, #12]
 801cf74:	3301      	adds	r3, #1
 801cf76:	60fb      	str	r3, [r7, #12]
 801cf78:	4b14      	ldr	r3, [pc, #80]	; (801cfcc <itdt_sched_nextRun+0xbc>)
 801cf7a:	781b      	ldrb	r3, [r3, #0]
 801cf7c:	001a      	movs	r2, r3
 801cf7e:	68fb      	ldr	r3, [r7, #12]
 801cf80:	4293      	cmp	r3, r2
 801cf82:	dbcf      	blt.n	801cf24 <itdt_sched_nextRun+0x14>
		}
	}
	if ( min > 0 ) {
 801cf84:	693b      	ldr	r3, [r7, #16]
 801cf86:	697a      	ldr	r2, [r7, #20]
 801cf88:	4313      	orrs	r3, r2
 801cf8a:	d017      	beq.n	801cfbc <itdt_sched_nextRun+0xac>
		uint64_t t = itsdk_time_get_ms();
 801cf8c:	f000 f8a8 	bl	801d0e0 <itsdk_time_get_ms>
 801cf90:	0003      	movs	r3, r0
 801cf92:	000c      	movs	r4, r1
 801cf94:	603b      	str	r3, [r7, #0]
 801cf96:	607c      	str	r4, [r7, #4]
		if ( min >= t ){
 801cf98:	687a      	ldr	r2, [r7, #4]
 801cf9a:	697b      	ldr	r3, [r7, #20]
 801cf9c:	429a      	cmp	r2, r3
 801cf9e:	d80b      	bhi.n	801cfb8 <itdt_sched_nextRun+0xa8>
 801cfa0:	687a      	ldr	r2, [r7, #4]
 801cfa2:	697b      	ldr	r3, [r7, #20]
 801cfa4:	429a      	cmp	r2, r3
 801cfa6:	d103      	bne.n	801cfb0 <itdt_sched_nextRun+0xa0>
 801cfa8:	683a      	ldr	r2, [r7, #0]
 801cfaa:	693b      	ldr	r3, [r7, #16]
 801cfac:	429a      	cmp	r2, r3
 801cfae:	d803      	bhi.n	801cfb8 <itdt_sched_nextRun+0xa8>
			return (uint32_t)(min - t);
 801cfb0:	693a      	ldr	r2, [r7, #16]
 801cfb2:	683b      	ldr	r3, [r7, #0]
 801cfb4:	1ad3      	subs	r3, r2, r3
 801cfb6:	e003      	b.n	801cfc0 <itdt_sched_nextRun+0xb0>
		} else {
			return 0;
 801cfb8:	2300      	movs	r3, #0
 801cfba:	e001      	b.n	801cfc0 <itdt_sched_nextRun+0xb0>
		}
	} else {
		return __INFINITE_32B; // max duration
 801cfbc:	2301      	movs	r3, #1
 801cfbe:	425b      	negs	r3, r3
	}
}
 801cfc0:	0018      	movs	r0, r3
 801cfc2:	46bd      	mov	sp, r7
 801cfc4:	b007      	add	sp, #28
 801cfc6:	bd90      	pop	{r4, r7, pc}
 801cfc8:	200016c0 	.word	0x200016c0
 801cfcc:	2000122d 	.word	0x2000122d

0801cfd0 <itsdk_time_add_us>:


/**
 * Add the given number of uS to the uS global timer
 */
void itsdk_time_add_us(uint32_t us) {
 801cfd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cfd2:	b087      	sub	sp, #28
 801cfd4:	af00      	add	r7, sp, #0
 801cfd6:	60f8      	str	r0, [r7, #12]
	// apply correction
	#if ITSDK_CLK_CORRECTION != 0
	us = us + ( (int64_t)us * ITSDK_CLK_CORRECTION ) / 1000;
 801cfd8:	68fb      	ldr	r3, [r7, #12]
 801cfda:	603b      	str	r3, [r7, #0]
 801cfdc:	2300      	movs	r3, #0
 801cfde:	607b      	str	r3, [r7, #4]
 801cfe0:	22fa      	movs	r2, #250	; 0xfa
 801cfe2:	0092      	lsls	r2, r2, #2
 801cfe4:	2300      	movs	r3, #0
 801cfe6:	6838      	ldr	r0, [r7, #0]
 801cfe8:	6879      	ldr	r1, [r7, #4]
 801cfea:	f7e3 fa8d 	bl	8000508 <__aeabi_lmul>
 801cfee:	0003      	movs	r3, r0
 801cff0:	000c      	movs	r4, r1
 801cff2:	0018      	movs	r0, r3
 801cff4:	0021      	movs	r1, r4
 801cff6:	22fa      	movs	r2, #250	; 0xfa
 801cff8:	0092      	lsls	r2, r2, #2
 801cffa:	2300      	movs	r3, #0
 801cffc:	f7e3 fa40 	bl	8000480 <__aeabi_ldivmod>
 801d000:	0003      	movs	r3, r0
 801d002:	000c      	movs	r4, r1
 801d004:	001a      	movs	r2, r3
 801d006:	68fb      	ldr	r3, [r7, #12]
 801d008:	189b      	adds	r3, r3, r2
 801d00a:	60fb      	str	r3, [r7, #12]
	#endif
	uint64_t n = __timeus + us;
 801d00c:	68fb      	ldr	r3, [r7, #12]
 801d00e:	001d      	movs	r5, r3
 801d010:	2300      	movs	r3, #0
 801d012:	001e      	movs	r6, r3
 801d014:	4b12      	ldr	r3, [pc, #72]	; (801d060 <itsdk_time_add_us+0x90>)
 801d016:	685c      	ldr	r4, [r3, #4]
 801d018:	681b      	ldr	r3, [r3, #0]
 801d01a:	195b      	adds	r3, r3, r5
 801d01c:	4174      	adcs	r4, r6
 801d01e:	613b      	str	r3, [r7, #16]
 801d020:	617c      	str	r4, [r7, #20]
	if ( n < __timeus  ) {
 801d022:	4b0f      	ldr	r3, [pc, #60]	; (801d060 <itsdk_time_add_us+0x90>)
 801d024:	685c      	ldr	r4, [r3, #4]
 801d026:	681b      	ldr	r3, [r3, #0]
 801d028:	697a      	ldr	r2, [r7, #20]
 801d02a:	42a2      	cmp	r2, r4
 801d02c:	d305      	bcc.n	801d03a <itsdk_time_add_us+0x6a>
 801d02e:	697a      	ldr	r2, [r7, #20]
 801d030:	42a2      	cmp	r2, r4
 801d032:	d10b      	bne.n	801d04c <itsdk_time_add_us+0x7c>
 801d034:	693a      	ldr	r2, [r7, #16]
 801d036:	429a      	cmp	r2, r3
 801d038:	d208      	bcs.n	801d04c <itsdk_time_add_us+0x7c>
		__time_has_overrun=1;
 801d03a:	4b0a      	ldr	r3, [pc, #40]	; (801d064 <itsdk_time_add_us+0x94>)
 801d03c:	2201      	movs	r2, #1
 801d03e:	701a      	strb	r2, [r3, #0]
		__time_overrun_cnt++;
 801d040:	4b09      	ldr	r3, [pc, #36]	; (801d068 <itsdk_time_add_us+0x98>)
 801d042:	781b      	ldrb	r3, [r3, #0]
 801d044:	3301      	adds	r3, #1
 801d046:	b2da      	uxtb	r2, r3
 801d048:	4b07      	ldr	r3, [pc, #28]	; (801d068 <itsdk_time_add_us+0x98>)
 801d04a:	701a      	strb	r2, [r3, #0]
	}
	__timeus = n;
 801d04c:	4a04      	ldr	r2, [pc, #16]	; (801d060 <itsdk_time_add_us+0x90>)
 801d04e:	693b      	ldr	r3, [r7, #16]
 801d050:	697c      	ldr	r4, [r7, #20]
 801d052:	6013      	str	r3, [r2, #0]
 801d054:	6054      	str	r4, [r2, #4]
}
 801d056:	46c0      	nop			; (mov r8, r8)
 801d058:	46bd      	mov	sp, r7
 801d05a:	b007      	add	sp, #28
 801d05c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d05e:	46c0      	nop			; (mov r8, r8)
 801d060:	20001230 	.word	0x20001230
 801d064:	20001238 	.word	0x20001238
 801d068:	20001239 	.word	0x20001239

0801d06c <itsdk_time_set_ms>:

/**
 * Set current time in ms
 */
void itsdk_time_set_ms(uint64_t ms) {
 801d06c:	b590      	push	{r4, r7, lr}
 801d06e:	b085      	sub	sp, #20
 801d070:	af00      	add	r7, sp, #0
 801d072:	6038      	str	r0, [r7, #0]
 801d074:	6079      	str	r1, [r7, #4]
	uint64_t n = ms * 1000L;
 801d076:	22fa      	movs	r2, #250	; 0xfa
 801d078:	0092      	lsls	r2, r2, #2
 801d07a:	2300      	movs	r3, #0
 801d07c:	6838      	ldr	r0, [r7, #0]
 801d07e:	6879      	ldr	r1, [r7, #4]
 801d080:	f7e3 fa42 	bl	8000508 <__aeabi_lmul>
 801d084:	0003      	movs	r3, r0
 801d086:	000c      	movs	r4, r1
 801d088:	60bb      	str	r3, [r7, #8]
 801d08a:	60fc      	str	r4, [r7, #12]
	if ( (__timeus - n) > 1000000L   ) {	// difference is > 1m assuming the counter has restarted
 801d08c:	4b10      	ldr	r3, [pc, #64]	; (801d0d0 <itsdk_time_set_ms+0x64>)
 801d08e:	6819      	ldr	r1, [r3, #0]
 801d090:	685a      	ldr	r2, [r3, #4]
 801d092:	68bb      	ldr	r3, [r7, #8]
 801d094:	68fc      	ldr	r4, [r7, #12]
 801d096:	1ac9      	subs	r1, r1, r3
 801d098:	41a2      	sbcs	r2, r4
 801d09a:	000b      	movs	r3, r1
 801d09c:	0014      	movs	r4, r2
 801d09e:	2c00      	cmp	r4, #0
 801d0a0:	d103      	bne.n	801d0aa <itsdk_time_set_ms+0x3e>
 801d0a2:	d10b      	bne.n	801d0bc <itsdk_time_set_ms+0x50>
 801d0a4:	4a0b      	ldr	r2, [pc, #44]	; (801d0d4 <itsdk_time_set_ms+0x68>)
 801d0a6:	4293      	cmp	r3, r2
 801d0a8:	d908      	bls.n	801d0bc <itsdk_time_set_ms+0x50>
		__time_has_overrun=1;
 801d0aa:	4b0b      	ldr	r3, [pc, #44]	; (801d0d8 <itsdk_time_set_ms+0x6c>)
 801d0ac:	2201      	movs	r2, #1
 801d0ae:	701a      	strb	r2, [r3, #0]
		__time_overrun_cnt++;
 801d0b0:	4b0a      	ldr	r3, [pc, #40]	; (801d0dc <itsdk_time_set_ms+0x70>)
 801d0b2:	781b      	ldrb	r3, [r3, #0]
 801d0b4:	3301      	adds	r3, #1
 801d0b6:	b2da      	uxtb	r2, r3
 801d0b8:	4b08      	ldr	r3, [pc, #32]	; (801d0dc <itsdk_time_set_ms+0x70>)
 801d0ba:	701a      	strb	r2, [r3, #0]
	}
	__timeus = n;
 801d0bc:	4a04      	ldr	r2, [pc, #16]	; (801d0d0 <itsdk_time_set_ms+0x64>)
 801d0be:	68bb      	ldr	r3, [r7, #8]
 801d0c0:	68fc      	ldr	r4, [r7, #12]
 801d0c2:	6013      	str	r3, [r2, #0]
 801d0c4:	6054      	str	r4, [r2, #4]
}
 801d0c6:	46c0      	nop			; (mov r8, r8)
 801d0c8:	46bd      	mov	sp, r7
 801d0ca:	b005      	add	sp, #20
 801d0cc:	bd90      	pop	{r4, r7, pc}
 801d0ce:	46c0      	nop			; (mov r8, r8)
 801d0d0:	20001230 	.word	0x20001230
 801d0d4:	000f4240 	.word	0x000f4240
 801d0d8:	20001238 	.word	0x20001238
 801d0dc:	20001239 	.word	0x20001239

0801d0e0 <itsdk_time_get_ms>:

/**
 * Get current time in ms
 */
uint64_t itsdk_time_get_ms() {
 801d0e0:	b5b0      	push	{r4, r5, r7, lr}
 801d0e2:	af00      	add	r7, sp, #0
	return __timeus / 1000;
 801d0e4:	4b06      	ldr	r3, [pc, #24]	; (801d100 <itsdk_time_get_ms+0x20>)
 801d0e6:	6818      	ldr	r0, [r3, #0]
 801d0e8:	6859      	ldr	r1, [r3, #4]
 801d0ea:	22fa      	movs	r2, #250	; 0xfa
 801d0ec:	0092      	lsls	r2, r2, #2
 801d0ee:	2300      	movs	r3, #0
 801d0f0:	f7e3 f9ea 	bl	80004c8 <__aeabi_uldivmod>
 801d0f4:	0003      	movs	r3, r0
 801d0f6:	000c      	movs	r4, r1
}
 801d0f8:	0018      	movs	r0, r3
 801d0fa:	0021      	movs	r1, r4
 801d0fc:	46bd      	mov	sp, r7
 801d0fe:	bdb0      	pop	{r4, r5, r7, pc}
 801d100:	20001230 	.word	0x20001230

0801d104 <itsdk_time_get_us>:

/**
 * Get current time in us
 */
uint64_t itsdk_time_get_us() {
 801d104:	b590      	push	{r4, r7, lr}
 801d106:	af00      	add	r7, sp, #0
	return __timeus;
 801d108:	4b03      	ldr	r3, [pc, #12]	; (801d118 <itsdk_time_get_us+0x14>)
 801d10a:	685c      	ldr	r4, [r3, #4]
 801d10c:	681b      	ldr	r3, [r3, #0]
}
 801d10e:	0018      	movs	r0, r3
 801d110:	0021      	movs	r1, r4
 801d112:	46bd      	mov	sp, r7
 801d114:	bd90      	pop	{r4, r7, pc}
 801d116:	46c0      	nop			; (mov r8, r8)
 801d118:	20001230 	.word	0x20001230

0801d11c <itsdk_time_init>:
}

/**
 * Init time functions
 */
void itsdk_time_init() {
 801d11c:	b5b0      	push	{r4, r5, r7, lr}
 801d11e:	af00      	add	r7, sp, #0
#if ITSDK_PLATFORM == __PLATFORM_STM32L0
  #if ITSDK_WITH_RTC != __RTC_NONE
	rtc_resetTime();
 801d120:	f001 fe4a 	bl	801edb8 <rtc_resetTime>
	rtc_adjustTime();
 801d124:	f001 fecc 	bl	801eec0 <rtc_adjustTime>
  #endif
	systick_adjustTime();
 801d128:	f001 ff28 	bl	801ef7c <systick_adjustTime>
  #if ITSDK_WITH_RTC != __RTC_NONE
	itsdk_time_set_ms(rtc_getTimestampMs());
 801d12c:	f001 fd56 	bl	801ebdc <rtc_getTimestampMs>
 801d130:	0003      	movs	r3, r0
 801d132:	000c      	movs	r4, r1
 801d134:	0018      	movs	r0, r3
 801d136:	0021      	movs	r1, r4
 801d138:	f7ff ff98 	bl	801d06c <itsdk_time_set_ms>
  #endif
#else
	#error "platform not supported"
#endif
}
 801d13c:	46c0      	nop			; (mov r8, r8)
 801d13e:	46bd      	mov	sp, r7
 801d140:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801d144 <itsdk_stimer_register>:
itsdk_timer_return_t itsdk_stimer_register(
		uint32_t ms,
		void (*callback_func)(uint32_t value),
		uint32_t value,
		itsdk_timer_lpAccept allowLowPower
) {
 801d144:	b5b0      	push	{r4, r5, r7, lr}
 801d146:	b086      	sub	sp, #24
 801d148:	af00      	add	r7, sp, #0
 801d14a:	60f8      	str	r0, [r7, #12]
 801d14c:	60b9      	str	r1, [r7, #8]
 801d14e:	607a      	str	r2, [r7, #4]
 801d150:	001a      	movs	r2, r3
 801d152:	1cfb      	adds	r3, r7, #3
 801d154:	701a      	strb	r2, [r3, #0]
		#endif
		return TIMER_TOO_SHORT;
	}
	*/

	int i = 0;
 801d156:	2300      	movs	r3, #0
 801d158:	617b      	str	r3, [r7, #20]
	while ( i < ITSDK_TIMER_SLOTS) {
 801d15a:	e00e      	b.n	801d17a <itsdk_stimer_register+0x36>
		if (__stimer_slots[i].inUse == false) {
 801d15c:	492f      	ldr	r1, [pc, #188]	; (801d21c <itsdk_stimer_register+0xd8>)
 801d15e:	697a      	ldr	r2, [r7, #20]
 801d160:	0013      	movs	r3, r2
 801d162:	005b      	lsls	r3, r3, #1
 801d164:	189b      	adds	r3, r3, r2
 801d166:	00db      	lsls	r3, r3, #3
 801d168:	5c5b      	ldrb	r3, [r3, r1]
 801d16a:	2201      	movs	r2, #1
 801d16c:	4053      	eors	r3, r2
 801d16e:	b2db      	uxtb	r3, r3
 801d170:	2b00      	cmp	r3, #0
 801d172:	d106      	bne.n	801d182 <itsdk_stimer_register+0x3e>
			break;
		}
		i++;
 801d174:	697b      	ldr	r3, [r7, #20]
 801d176:	3301      	adds	r3, #1
 801d178:	617b      	str	r3, [r7, #20]
	while ( i < ITSDK_TIMER_SLOTS) {
 801d17a:	697b      	ldr	r3, [r7, #20]
 801d17c:	2b04      	cmp	r3, #4
 801d17e:	dded      	ble.n	801d15c <itsdk_stimer_register+0x18>
 801d180:	e000      	b.n	801d184 <itsdk_stimer_register+0x40>
			break;
 801d182:	46c0      	nop			; (mov r8, r8)
	}
	if ( i < ITSDK_TIMER_SLOTS ) {
 801d184:	697b      	ldr	r3, [r7, #20]
 801d186:	2b04      	cmp	r3, #4
 801d188:	dc42      	bgt.n	801d210 <itsdk_stimer_register+0xcc>
		__stimer_slots[i].inUse = true;
 801d18a:	4924      	ldr	r1, [pc, #144]	; (801d21c <itsdk_stimer_register+0xd8>)
 801d18c:	697a      	ldr	r2, [r7, #20]
 801d18e:	0013      	movs	r3, r2
 801d190:	005b      	lsls	r3, r3, #1
 801d192:	189b      	adds	r3, r3, r2
 801d194:	00db      	lsls	r3, r3, #3
 801d196:	2201      	movs	r2, #1
 801d198:	545a      	strb	r2, [r3, r1]
		__stimer_slots[i].allowLowPower = ((allowLowPower==TIMER_ACCEPT_LOWPOWER)?true:false);
 801d19a:	1cfb      	adds	r3, r7, #3
 801d19c:	781b      	ldrb	r3, [r3, #0]
 801d19e:	425a      	negs	r2, r3
 801d1a0:	4153      	adcs	r3, r2
 801d1a2:	b2d8      	uxtb	r0, r3
 801d1a4:	491d      	ldr	r1, [pc, #116]	; (801d21c <itsdk_stimer_register+0xd8>)
 801d1a6:	697a      	ldr	r2, [r7, #20]
 801d1a8:	0013      	movs	r3, r2
 801d1aa:	005b      	lsls	r3, r3, #1
 801d1ac:	189b      	adds	r3, r3, r2
 801d1ae:	00db      	lsls	r3, r3, #3
 801d1b0:	18cb      	adds	r3, r1, r3
 801d1b2:	3301      	adds	r3, #1
 801d1b4:	1c02      	adds	r2, r0, #0
 801d1b6:	701a      	strb	r2, [r3, #0]
		__stimer_slots[i].customValue = value;
 801d1b8:	4918      	ldr	r1, [pc, #96]	; (801d21c <itsdk_stimer_register+0xd8>)
 801d1ba:	697a      	ldr	r2, [r7, #20]
 801d1bc:	0013      	movs	r3, r2
 801d1be:	005b      	lsls	r3, r3, #1
 801d1c0:	189b      	adds	r3, r3, r2
 801d1c2:	00db      	lsls	r3, r3, #3
 801d1c4:	18cb      	adds	r3, r1, r3
 801d1c6:	3314      	adds	r3, #20
 801d1c8:	687a      	ldr	r2, [r7, #4]
 801d1ca:	601a      	str	r2, [r3, #0]
		__stimer_slots[i].callback_func = callback_func;
 801d1cc:	4913      	ldr	r1, [pc, #76]	; (801d21c <itsdk_stimer_register+0xd8>)
 801d1ce:	697a      	ldr	r2, [r7, #20]
 801d1d0:	0013      	movs	r3, r2
 801d1d2:	005b      	lsls	r3, r3, #1
 801d1d4:	189b      	adds	r3, r3, r2
 801d1d6:	00db      	lsls	r3, r3, #3
 801d1d8:	18cb      	adds	r3, r1, r3
 801d1da:	3310      	adds	r3, #16
 801d1dc:	68ba      	ldr	r2, [r7, #8]
 801d1de:	601a      	str	r2, [r3, #0]
		__stimer_slots[i].timeoutMs = itsdk_time_get_ms()+(uint64_t)ms;
 801d1e0:	f7ff ff7e 	bl	801d0e0 <itsdk_time_get_ms>
 801d1e4:	0002      	movs	r2, r0
 801d1e6:	000b      	movs	r3, r1
 801d1e8:	68f9      	ldr	r1, [r7, #12]
 801d1ea:	000c      	movs	r4, r1
 801d1ec:	2100      	movs	r1, #0
 801d1ee:	000d      	movs	r5, r1
 801d1f0:	1912      	adds	r2, r2, r4
 801d1f2:	416b      	adcs	r3, r5
 801d1f4:	0011      	movs	r1, r2
 801d1f6:	001a      	movs	r2, r3
 801d1f8:	4c08      	ldr	r4, [pc, #32]	; (801d21c <itsdk_stimer_register+0xd8>)
 801d1fa:	6978      	ldr	r0, [r7, #20]
 801d1fc:	0003      	movs	r3, r0
 801d1fe:	005b      	lsls	r3, r3, #1
 801d200:	181b      	adds	r3, r3, r0
 801d202:	00db      	lsls	r3, r3, #3
 801d204:	18e3      	adds	r3, r4, r3
 801d206:	3308      	adds	r3, #8
 801d208:	6019      	str	r1, [r3, #0]
 801d20a:	605a      	str	r2, [r3, #4]
		return TIMER_INIT_SUCCESS;
 801d20c:	2300      	movs	r3, #0
 801d20e:	e000      	b.n	801d212 <itsdk_stimer_register+0xce>
	}
	#if (ITSDK_LOGGER_MODULE & __LOG_MOD_STIMER) > 0
	  ITSDK_ERROR_REPORT(ITSDK_ERROR_STIMER_LIST_FULL,0);
	#endif
	return TIMER_LIST_FULL;
 801d210:	2303      	movs	r3, #3
}
 801d212:	0018      	movs	r0, r3
 801d214:	46bd      	mov	sp, r7
 801d216:	b006      	add	sp, #24
 801d218:	bdb0      	pop	{r4, r5, r7, pc}
 801d21a:	46c0      	nop			; (mov r8, r8)
 801d21c:	20001240 	.word	0x20001240

0801d220 <itsdk_stimer_stop>:
 * identified by function pointer & value
 */
itsdk_timer_return_t itsdk_stimer_stop(
		void (*callback_func)(uint32_t value),
		uint32_t value
) {
 801d220:	b580      	push	{r7, lr}
 801d222:	b084      	sub	sp, #16
 801d224:	af00      	add	r7, sp, #0
 801d226:	6078      	str	r0, [r7, #4]
 801d228:	6039      	str	r1, [r7, #0]
	for (int i=0 ; i < ITSDK_TIMER_SLOTS ; i++) {
 801d22a:	2300      	movs	r3, #0
 801d22c:	60fb      	str	r3, [r7, #12]
 801d22e:	e02d      	b.n	801d28c <itsdk_stimer_stop+0x6c>
		if (
				__stimer_slots[i].inUse == true
 801d230:	491a      	ldr	r1, [pc, #104]	; (801d29c <itsdk_stimer_stop+0x7c>)
 801d232:	68fa      	ldr	r2, [r7, #12]
 801d234:	0013      	movs	r3, r2
 801d236:	005b      	lsls	r3, r3, #1
 801d238:	189b      	adds	r3, r3, r2
 801d23a:	00db      	lsls	r3, r3, #3
 801d23c:	5c5b      	ldrb	r3, [r3, r1]
		if (
 801d23e:	2b00      	cmp	r3, #0
 801d240:	d021      	beq.n	801d286 <itsdk_stimer_stop+0x66>
			&&  __stimer_slots[i].customValue == value
 801d242:	4916      	ldr	r1, [pc, #88]	; (801d29c <itsdk_stimer_stop+0x7c>)
 801d244:	68fa      	ldr	r2, [r7, #12]
 801d246:	0013      	movs	r3, r2
 801d248:	005b      	lsls	r3, r3, #1
 801d24a:	189b      	adds	r3, r3, r2
 801d24c:	00db      	lsls	r3, r3, #3
 801d24e:	18cb      	adds	r3, r1, r3
 801d250:	3314      	adds	r3, #20
 801d252:	681b      	ldr	r3, [r3, #0]
 801d254:	683a      	ldr	r2, [r7, #0]
 801d256:	429a      	cmp	r2, r3
 801d258:	d115      	bne.n	801d286 <itsdk_stimer_stop+0x66>
			&&  __stimer_slots[i].callback_func == callback_func
 801d25a:	4910      	ldr	r1, [pc, #64]	; (801d29c <itsdk_stimer_stop+0x7c>)
 801d25c:	68fa      	ldr	r2, [r7, #12]
 801d25e:	0013      	movs	r3, r2
 801d260:	005b      	lsls	r3, r3, #1
 801d262:	189b      	adds	r3, r3, r2
 801d264:	00db      	lsls	r3, r3, #3
 801d266:	18cb      	adds	r3, r1, r3
 801d268:	3310      	adds	r3, #16
 801d26a:	681b      	ldr	r3, [r3, #0]
 801d26c:	687a      	ldr	r2, [r7, #4]
 801d26e:	429a      	cmp	r2, r3
 801d270:	d109      	bne.n	801d286 <itsdk_stimer_stop+0x66>
		) {
			// found
			__stimer_slots[i].inUse = false;
 801d272:	490a      	ldr	r1, [pc, #40]	; (801d29c <itsdk_stimer_stop+0x7c>)
 801d274:	68fa      	ldr	r2, [r7, #12]
 801d276:	0013      	movs	r3, r2
 801d278:	005b      	lsls	r3, r3, #1
 801d27a:	189b      	adds	r3, r3, r2
 801d27c:	00db      	lsls	r3, r3, #3
 801d27e:	2200      	movs	r2, #0
 801d280:	545a      	strb	r2, [r3, r1]
			return TIMER_INIT_SUCCESS;
 801d282:	2300      	movs	r3, #0
 801d284:	e006      	b.n	801d294 <itsdk_stimer_stop+0x74>
	for (int i=0 ; i < ITSDK_TIMER_SLOTS ; i++) {
 801d286:	68fb      	ldr	r3, [r7, #12]
 801d288:	3301      	adds	r3, #1
 801d28a:	60fb      	str	r3, [r7, #12]
 801d28c:	68fb      	ldr	r3, [r7, #12]
 801d28e:	2b04      	cmp	r3, #4
 801d290:	ddce      	ble.n	801d230 <itsdk_stimer_stop+0x10>
		}
	}
	return TIMER_NOT_FOUND;
 801d292:	2304      	movs	r3, #4
}
 801d294:	0018      	movs	r0, r3
 801d296:	46bd      	mov	sp, r7
 801d298:	b004      	add	sp, #16
 801d29a:	bd80      	pop	{r7, pc}
 801d29c:	20001240 	.word	0x20001240

0801d2a0 <itsdk_stimer_isLowPowerSwitchAutorized>:
 * Some soft timers need to have a precise timing and are not supporting
 * the variation due to the deep sleep RTC duration.
 * An improvement will be to moderate the RTC sleep duration to the duration
 * of these timer to avoid the timing GAP. See it later.
 */
bool itsdk_stimer_isLowPowerSwitchAutorized() {
 801d2a0:	b580      	push	{r7, lr}
 801d2a2:	b082      	sub	sp, #8
 801d2a4:	af00      	add	r7, sp, #0
	int i = 0;
 801d2a6:	2300      	movs	r3, #0
 801d2a8:	607b      	str	r3, [r7, #4]
	while ( i < ITSDK_TIMER_SLOTS) {
 801d2aa:	e01b      	b.n	801d2e4 <itsdk_stimer_isLowPowerSwitchAutorized+0x44>
		if (__stimer_slots[i].inUse && __stimer_slots[i].allowLowPower == false ) {
 801d2ac:	4911      	ldr	r1, [pc, #68]	; (801d2f4 <itsdk_stimer_isLowPowerSwitchAutorized+0x54>)
 801d2ae:	687a      	ldr	r2, [r7, #4]
 801d2b0:	0013      	movs	r3, r2
 801d2b2:	005b      	lsls	r3, r3, #1
 801d2b4:	189b      	adds	r3, r3, r2
 801d2b6:	00db      	lsls	r3, r3, #3
 801d2b8:	5c5b      	ldrb	r3, [r3, r1]
 801d2ba:	2b00      	cmp	r3, #0
 801d2bc:	d00f      	beq.n	801d2de <itsdk_stimer_isLowPowerSwitchAutorized+0x3e>
 801d2be:	490d      	ldr	r1, [pc, #52]	; (801d2f4 <itsdk_stimer_isLowPowerSwitchAutorized+0x54>)
 801d2c0:	687a      	ldr	r2, [r7, #4]
 801d2c2:	0013      	movs	r3, r2
 801d2c4:	005b      	lsls	r3, r3, #1
 801d2c6:	189b      	adds	r3, r3, r2
 801d2c8:	00db      	lsls	r3, r3, #3
 801d2ca:	18cb      	adds	r3, r1, r3
 801d2cc:	3301      	adds	r3, #1
 801d2ce:	781b      	ldrb	r3, [r3, #0]
 801d2d0:	2201      	movs	r2, #1
 801d2d2:	4053      	eors	r3, r2
 801d2d4:	b2db      	uxtb	r3, r3
 801d2d6:	2b00      	cmp	r3, #0
 801d2d8:	d001      	beq.n	801d2de <itsdk_stimer_isLowPowerSwitchAutorized+0x3e>
			return false;
 801d2da:	2300      	movs	r3, #0
 801d2dc:	e006      	b.n	801d2ec <itsdk_stimer_isLowPowerSwitchAutorized+0x4c>
		}
		i++;
 801d2de:	687b      	ldr	r3, [r7, #4]
 801d2e0:	3301      	adds	r3, #1
 801d2e2:	607b      	str	r3, [r7, #4]
	while ( i < ITSDK_TIMER_SLOTS) {
 801d2e4:	687b      	ldr	r3, [r7, #4]
 801d2e6:	2b04      	cmp	r3, #4
 801d2e8:	dde0      	ble.n	801d2ac <itsdk_stimer_isLowPowerSwitchAutorized+0xc>
	}
	return true;
 801d2ea:	2301      	movs	r3, #1
}
 801d2ec:	0018      	movs	r0, r3
 801d2ee:	46bd      	mov	sp, r7
 801d2f0:	b002      	add	sp, #8
 801d2f2:	bd80      	pop	{r7, pc}
 801d2f4:	20001240 	.word	0x20001240

0801d2f8 <itsdk_stimer_get>:
 * Get a timer structure from callback & value
 */
itsdk_stimer_slot_t * itsdk_stimer_get(
		void (*callback_func)(uint32_t value),
		uint32_t value
) {
 801d2f8:	b580      	push	{r7, lr}
 801d2fa:	b084      	sub	sp, #16
 801d2fc:	af00      	add	r7, sp, #0
 801d2fe:	6078      	str	r0, [r7, #4]
 801d300:	6039      	str	r1, [r7, #0]
	for (int i=0 ; i < ITSDK_TIMER_SLOTS ; i++) {
 801d302:	2300      	movs	r3, #0
 801d304:	60fb      	str	r3, [r7, #12]
 801d306:	e02b      	b.n	801d360 <itsdk_stimer_get+0x68>
		if (
				__stimer_slots[i].inUse == true
 801d308:	4919      	ldr	r1, [pc, #100]	; (801d370 <itsdk_stimer_get+0x78>)
 801d30a:	68fa      	ldr	r2, [r7, #12]
 801d30c:	0013      	movs	r3, r2
 801d30e:	005b      	lsls	r3, r3, #1
 801d310:	189b      	adds	r3, r3, r2
 801d312:	00db      	lsls	r3, r3, #3
 801d314:	5c5b      	ldrb	r3, [r3, r1]
		if (
 801d316:	2b00      	cmp	r3, #0
 801d318:	d01f      	beq.n	801d35a <itsdk_stimer_get+0x62>
			&&  __stimer_slots[i].customValue == value
 801d31a:	4915      	ldr	r1, [pc, #84]	; (801d370 <itsdk_stimer_get+0x78>)
 801d31c:	68fa      	ldr	r2, [r7, #12]
 801d31e:	0013      	movs	r3, r2
 801d320:	005b      	lsls	r3, r3, #1
 801d322:	189b      	adds	r3, r3, r2
 801d324:	00db      	lsls	r3, r3, #3
 801d326:	18cb      	adds	r3, r1, r3
 801d328:	3314      	adds	r3, #20
 801d32a:	681b      	ldr	r3, [r3, #0]
 801d32c:	683a      	ldr	r2, [r7, #0]
 801d32e:	429a      	cmp	r2, r3
 801d330:	d113      	bne.n	801d35a <itsdk_stimer_get+0x62>
			&&  __stimer_slots[i].callback_func == callback_func
 801d332:	490f      	ldr	r1, [pc, #60]	; (801d370 <itsdk_stimer_get+0x78>)
 801d334:	68fa      	ldr	r2, [r7, #12]
 801d336:	0013      	movs	r3, r2
 801d338:	005b      	lsls	r3, r3, #1
 801d33a:	189b      	adds	r3, r3, r2
 801d33c:	00db      	lsls	r3, r3, #3
 801d33e:	18cb      	adds	r3, r1, r3
 801d340:	3310      	adds	r3, #16
 801d342:	681b      	ldr	r3, [r3, #0]
 801d344:	687a      	ldr	r2, [r7, #4]
 801d346:	429a      	cmp	r2, r3
 801d348:	d107      	bne.n	801d35a <itsdk_stimer_get+0x62>
		) {
			// found
			return  &__stimer_slots[i];
 801d34a:	68fa      	ldr	r2, [r7, #12]
 801d34c:	0013      	movs	r3, r2
 801d34e:	005b      	lsls	r3, r3, #1
 801d350:	189b      	adds	r3, r3, r2
 801d352:	00db      	lsls	r3, r3, #3
 801d354:	4a06      	ldr	r2, [pc, #24]	; (801d370 <itsdk_stimer_get+0x78>)
 801d356:	189b      	adds	r3, r3, r2
 801d358:	e006      	b.n	801d368 <itsdk_stimer_get+0x70>
	for (int i=0 ; i < ITSDK_TIMER_SLOTS ; i++) {
 801d35a:	68fb      	ldr	r3, [r7, #12]
 801d35c:	3301      	adds	r3, #1
 801d35e:	60fb      	str	r3, [r7, #12]
 801d360:	68fb      	ldr	r3, [r7, #12]
 801d362:	2b04      	cmp	r3, #4
 801d364:	ddd0      	ble.n	801d308 <itsdk_stimer_get+0x10>
		}
	}
	return NULL;
 801d366:	2300      	movs	r3, #0

}
 801d368:	0018      	movs	r0, r3
 801d36a:	46bd      	mov	sp, r7
 801d36c:	b004      	add	sp, #16
 801d36e:	bd80      	pop	{r7, pc}
 801d370:	20001240 	.word	0x20001240

0801d374 <itsdk_stimer_run>:

/**
 * Run the software timer execution. Call this function as much as
 * possible. At least on every wake-up from sleep
 */
void itsdk_stimer_run() {
 801d374:	b590      	push	{r4, r7, lr}
 801d376:	b085      	sub	sp, #20
 801d378:	af00      	add	r7, sp, #0
	uint64_t t = itsdk_time_get_ms();
 801d37a:	f7ff feb1 	bl	801d0e0 <itsdk_time_get_ms>
 801d37e:	0003      	movs	r3, r0
 801d380:	000c      	movs	r4, r1
 801d382:	603b      	str	r3, [r7, #0]
 801d384:	607c      	str	r4, [r7, #4]
	for ( int i = 0 ; i < ITSDK_TIMER_SLOTS ; i++ ) {
 801d386:	2300      	movs	r3, #0
 801d388:	60fb      	str	r3, [r7, #12]
 801d38a:	e045      	b.n	801d418 <itsdk_stimer_run+0xa4>
		if ( __stimer_slots[i].inUse && __stimer_slots[i].timeoutMs <= t ) {
 801d38c:	4926      	ldr	r1, [pc, #152]	; (801d428 <itsdk_stimer_run+0xb4>)
 801d38e:	68fa      	ldr	r2, [r7, #12]
 801d390:	0013      	movs	r3, r2
 801d392:	005b      	lsls	r3, r3, #1
 801d394:	189b      	adds	r3, r3, r2
 801d396:	00db      	lsls	r3, r3, #3
 801d398:	5c5b      	ldrb	r3, [r3, r1]
 801d39a:	2b00      	cmp	r3, #0
 801d39c:	d039      	beq.n	801d412 <itsdk_stimer_run+0x9e>
 801d39e:	4922      	ldr	r1, [pc, #136]	; (801d428 <itsdk_stimer_run+0xb4>)
 801d3a0:	68fa      	ldr	r2, [r7, #12]
 801d3a2:	0013      	movs	r3, r2
 801d3a4:	005b      	lsls	r3, r3, #1
 801d3a6:	189b      	adds	r3, r3, r2
 801d3a8:	00db      	lsls	r3, r3, #3
 801d3aa:	18cb      	adds	r3, r1, r3
 801d3ac:	3308      	adds	r3, #8
 801d3ae:	685c      	ldr	r4, [r3, #4]
 801d3b0:	681b      	ldr	r3, [r3, #0]
 801d3b2:	687a      	ldr	r2, [r7, #4]
 801d3b4:	42a2      	cmp	r2, r4
 801d3b6:	d32c      	bcc.n	801d412 <itsdk_stimer_run+0x9e>
 801d3b8:	687a      	ldr	r2, [r7, #4]
 801d3ba:	42a2      	cmp	r2, r4
 801d3bc:	d102      	bne.n	801d3c4 <itsdk_stimer_run+0x50>
 801d3be:	683a      	ldr	r2, [r7, #0]
 801d3c0:	429a      	cmp	r2, r3
 801d3c2:	d326      	bcc.n	801d412 <itsdk_stimer_run+0x9e>
			__stimer_slots[i].inUse = false;
 801d3c4:	4918      	ldr	r1, [pc, #96]	; (801d428 <itsdk_stimer_run+0xb4>)
 801d3c6:	68fa      	ldr	r2, [r7, #12]
 801d3c8:	0013      	movs	r3, r2
 801d3ca:	005b      	lsls	r3, r3, #1
 801d3cc:	189b      	adds	r3, r3, r2
 801d3ce:	00db      	lsls	r3, r3, #3
 801d3d0:	2200      	movs	r2, #0
 801d3d2:	545a      	strb	r2, [r3, r1]
			if (__stimer_slots[i].callback_func != NULL )
 801d3d4:	4914      	ldr	r1, [pc, #80]	; (801d428 <itsdk_stimer_run+0xb4>)
 801d3d6:	68fa      	ldr	r2, [r7, #12]
 801d3d8:	0013      	movs	r3, r2
 801d3da:	005b      	lsls	r3, r3, #1
 801d3dc:	189b      	adds	r3, r3, r2
 801d3de:	00db      	lsls	r3, r3, #3
 801d3e0:	18cb      	adds	r3, r1, r3
 801d3e2:	3310      	adds	r3, #16
 801d3e4:	681b      	ldr	r3, [r3, #0]
 801d3e6:	2b00      	cmp	r3, #0
 801d3e8:	d013      	beq.n	801d412 <itsdk_stimer_run+0x9e>
				__stimer_slots[i].callback_func(__stimer_slots[i].customValue);
 801d3ea:	490f      	ldr	r1, [pc, #60]	; (801d428 <itsdk_stimer_run+0xb4>)
 801d3ec:	68fa      	ldr	r2, [r7, #12]
 801d3ee:	0013      	movs	r3, r2
 801d3f0:	005b      	lsls	r3, r3, #1
 801d3f2:	189b      	adds	r3, r3, r2
 801d3f4:	00db      	lsls	r3, r3, #3
 801d3f6:	18cb      	adds	r3, r1, r3
 801d3f8:	3310      	adds	r3, #16
 801d3fa:	6819      	ldr	r1, [r3, #0]
 801d3fc:	480a      	ldr	r0, [pc, #40]	; (801d428 <itsdk_stimer_run+0xb4>)
 801d3fe:	68fa      	ldr	r2, [r7, #12]
 801d400:	0013      	movs	r3, r2
 801d402:	005b      	lsls	r3, r3, #1
 801d404:	189b      	adds	r3, r3, r2
 801d406:	00db      	lsls	r3, r3, #3
 801d408:	18c3      	adds	r3, r0, r3
 801d40a:	3314      	adds	r3, #20
 801d40c:	681b      	ldr	r3, [r3, #0]
 801d40e:	0018      	movs	r0, r3
 801d410:	4788      	blx	r1
	for ( int i = 0 ; i < ITSDK_TIMER_SLOTS ; i++ ) {
 801d412:	68fb      	ldr	r3, [r7, #12]
 801d414:	3301      	adds	r3, #1
 801d416:	60fb      	str	r3, [r7, #12]
 801d418:	68fb      	ldr	r3, [r7, #12]
 801d41a:	2b04      	cmp	r3, #4
 801d41c:	ddb6      	ble.n	801d38c <itsdk_stimer_run+0x18>
		}
	}
}
 801d41e:	46c0      	nop			; (mov r8, r8)
 801d420:	46bd      	mov	sp, r7
 801d422:	b005      	add	sp, #20
 801d424:	bd90      	pop	{r4, r7, pc}
 801d426:	46c0      	nop			; (mov r8, r8)
 801d428:	20001240 	.word	0x20001240

0801d42c <itsdk_stimer_nextTimeoutMs>:

/**
 * Compute the number of Ms from Now to the next Timer to expire.
 * return ITSDK_STIMER_INFINITE when none are in execution or in the future.
 */
uint32_t itsdk_stimer_nextTimeoutMs(){
 801d42c:	b590      	push	{r4, r7, lr}
 801d42e:	b087      	sub	sp, #28
 801d430:	af00      	add	r7, sp, #0
	uint64_t t = itsdk_time_get_ms();
 801d432:	f7ff fe55 	bl	801d0e0 <itsdk_time_get_ms>
 801d436:	0003      	movs	r3, r0
 801d438:	000c      	movs	r4, r1
 801d43a:	603b      	str	r3, [r7, #0]
 801d43c:	607c      	str	r4, [r7, #4]
	uint64_t min = __INFINITE_64B;
 801d43e:	2301      	movs	r3, #1
 801d440:	425b      	negs	r3, r3
 801d442:	17dc      	asrs	r4, r3, #31
 801d444:	613b      	str	r3, [r7, #16]
 801d446:	617c      	str	r4, [r7, #20]
	for ( int i = 0 ; i < ITSDK_TIMER_SLOTS ; i++ ) {
 801d448:	2300      	movs	r3, #0
 801d44a:	60fb      	str	r3, [r7, #12]
 801d44c:	e03d      	b.n	801d4ca <itsdk_stimer_nextTimeoutMs+0x9e>
		if ( __stimer_slots[i].inUse && __stimer_slots[i].timeoutMs >= t ) {
 801d44e:	492c      	ldr	r1, [pc, #176]	; (801d500 <itsdk_stimer_nextTimeoutMs+0xd4>)
 801d450:	68fa      	ldr	r2, [r7, #12]
 801d452:	0013      	movs	r3, r2
 801d454:	005b      	lsls	r3, r3, #1
 801d456:	189b      	adds	r3, r3, r2
 801d458:	00db      	lsls	r3, r3, #3
 801d45a:	5c5b      	ldrb	r3, [r3, r1]
 801d45c:	2b00      	cmp	r3, #0
 801d45e:	d031      	beq.n	801d4c4 <itsdk_stimer_nextTimeoutMs+0x98>
 801d460:	4927      	ldr	r1, [pc, #156]	; (801d500 <itsdk_stimer_nextTimeoutMs+0xd4>)
 801d462:	68fa      	ldr	r2, [r7, #12]
 801d464:	0013      	movs	r3, r2
 801d466:	005b      	lsls	r3, r3, #1
 801d468:	189b      	adds	r3, r3, r2
 801d46a:	00db      	lsls	r3, r3, #3
 801d46c:	18cb      	adds	r3, r1, r3
 801d46e:	3308      	adds	r3, #8
 801d470:	685c      	ldr	r4, [r3, #4]
 801d472:	681b      	ldr	r3, [r3, #0]
 801d474:	687a      	ldr	r2, [r7, #4]
 801d476:	42a2      	cmp	r2, r4
 801d478:	d824      	bhi.n	801d4c4 <itsdk_stimer_nextTimeoutMs+0x98>
 801d47a:	687a      	ldr	r2, [r7, #4]
 801d47c:	42a2      	cmp	r2, r4
 801d47e:	d102      	bne.n	801d486 <itsdk_stimer_nextTimeoutMs+0x5a>
 801d480:	683a      	ldr	r2, [r7, #0]
 801d482:	429a      	cmp	r2, r3
 801d484:	d81e      	bhi.n	801d4c4 <itsdk_stimer_nextTimeoutMs+0x98>
			if ( __stimer_slots[i].timeoutMs < min ) min = __stimer_slots[i].timeoutMs;
 801d486:	491e      	ldr	r1, [pc, #120]	; (801d500 <itsdk_stimer_nextTimeoutMs+0xd4>)
 801d488:	68fa      	ldr	r2, [r7, #12]
 801d48a:	0013      	movs	r3, r2
 801d48c:	005b      	lsls	r3, r3, #1
 801d48e:	189b      	adds	r3, r3, r2
 801d490:	00db      	lsls	r3, r3, #3
 801d492:	18cb      	adds	r3, r1, r3
 801d494:	3308      	adds	r3, #8
 801d496:	685c      	ldr	r4, [r3, #4]
 801d498:	681b      	ldr	r3, [r3, #0]
 801d49a:	697a      	ldr	r2, [r7, #20]
 801d49c:	42a2      	cmp	r2, r4
 801d49e:	d805      	bhi.n	801d4ac <itsdk_stimer_nextTimeoutMs+0x80>
 801d4a0:	697a      	ldr	r2, [r7, #20]
 801d4a2:	42a2      	cmp	r2, r4
 801d4a4:	d10e      	bne.n	801d4c4 <itsdk_stimer_nextTimeoutMs+0x98>
 801d4a6:	693a      	ldr	r2, [r7, #16]
 801d4a8:	429a      	cmp	r2, r3
 801d4aa:	d90b      	bls.n	801d4c4 <itsdk_stimer_nextTimeoutMs+0x98>
 801d4ac:	4914      	ldr	r1, [pc, #80]	; (801d500 <itsdk_stimer_nextTimeoutMs+0xd4>)
 801d4ae:	68fa      	ldr	r2, [r7, #12]
 801d4b0:	0013      	movs	r3, r2
 801d4b2:	005b      	lsls	r3, r3, #1
 801d4b4:	189b      	adds	r3, r3, r2
 801d4b6:	00db      	lsls	r3, r3, #3
 801d4b8:	18cb      	adds	r3, r1, r3
 801d4ba:	3308      	adds	r3, #8
 801d4bc:	685c      	ldr	r4, [r3, #4]
 801d4be:	681b      	ldr	r3, [r3, #0]
 801d4c0:	613b      	str	r3, [r7, #16]
 801d4c2:	617c      	str	r4, [r7, #20]
	for ( int i = 0 ; i < ITSDK_TIMER_SLOTS ; i++ ) {
 801d4c4:	68fb      	ldr	r3, [r7, #12]
 801d4c6:	3301      	adds	r3, #1
 801d4c8:	60fb      	str	r3, [r7, #12]
 801d4ca:	68fb      	ldr	r3, [r7, #12]
 801d4cc:	2b04      	cmp	r3, #4
 801d4ce:	ddbe      	ble.n	801d44e <itsdk_stimer_nextTimeoutMs+0x22>
		}
	}
	if ( min < __INFINITE_64B ) {
 801d4d0:	693b      	ldr	r3, [r7, #16]
 801d4d2:	3301      	adds	r3, #1
 801d4d4:	d102      	bne.n	801d4dc <itsdk_stimer_nextTimeoutMs+0xb0>
 801d4d6:	697b      	ldr	r3, [r7, #20]
 801d4d8:	3301      	adds	r3, #1
 801d4da:	d00b      	beq.n	801d4f4 <itsdk_stimer_nextTimeoutMs+0xc8>
		min = min - t;
 801d4dc:	6939      	ldr	r1, [r7, #16]
 801d4de:	697a      	ldr	r2, [r7, #20]
 801d4e0:	683b      	ldr	r3, [r7, #0]
 801d4e2:	687c      	ldr	r4, [r7, #4]
 801d4e4:	1ac9      	subs	r1, r1, r3
 801d4e6:	41a2      	sbcs	r2, r4
 801d4e8:	000b      	movs	r3, r1
 801d4ea:	0014      	movs	r4, r2
 801d4ec:	613b      	str	r3, [r7, #16]
 801d4ee:	617c      	str	r4, [r7, #20]
		return min;
 801d4f0:	693b      	ldr	r3, [r7, #16]
 801d4f2:	e001      	b.n	801d4f8 <itsdk_stimer_nextTimeoutMs+0xcc>
	}
	return __INFINITE_32B;
 801d4f4:	2301      	movs	r3, #1
 801d4f6:	425b      	negs	r3, r3
}
 801d4f8:	0018      	movs	r0, r3
 801d4fa:	46bd      	mov	sp, r7
 801d4fc:	b007      	add	sp, #28
 801d4fe:	bd90      	pop	{r4, r7, pc}
 801d500:	20001240 	.word	0x20001240

0801d504 <__getAdcValue>:
#if ITSDK_ADC_OPTIMIZE_SIZE == __ENABLE

/**
 * Read adc
 */
uint32_t __getAdcValue(uint32_t channel, uint8_t oversampling) {
 801d504:	b580      	push	{r7, lr}
 801d506:	b084      	sub	sp, #16
 801d508:	af00      	add	r7, sp, #0
 801d50a:	6078      	str	r0, [r7, #4]
 801d50c:	000a      	movs	r2, r1
 801d50e:	1cfb      	adds	r3, r7, #3
 801d510:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 801d512:	b672      	cpsid	i
  uint32_t i;

  __disable_irq();

  // ADC RESET
  RCC->APB2ENR |= RCC_APB2ENR_ADCEN;		// enable ADC clock
 801d514:	4b73      	ldr	r3, [pc, #460]	; (801d6e4 <__getAdcValue+0x1e0>)
 801d516:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801d518:	4b72      	ldr	r3, [pc, #456]	; (801d6e4 <__getAdcValue+0x1e0>)
 801d51a:	2180      	movs	r1, #128	; 0x80
 801d51c:	0089      	lsls	r1, r1, #2
 801d51e:	430a      	orrs	r2, r1
 801d520:	635a      	str	r2, [r3, #52]	; 0x34
  __ASM volatile ("nop");
 801d522:	46c0      	nop			; (mov r8, r8)
 801d524:	46c0      	nop			; (mov r8, r8)
  __NOP();
  __NOP();
  RCC->APB2RSTR |= RCC_APB2RSTR_ADCRST;
 801d526:	4b6f      	ldr	r3, [pc, #444]	; (801d6e4 <__getAdcValue+0x1e0>)
 801d528:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801d52a:	4b6e      	ldr	r3, [pc, #440]	; (801d6e4 <__getAdcValue+0x1e0>)
 801d52c:	2180      	movs	r1, #128	; 0x80
 801d52e:	0089      	lsls	r1, r1, #2
 801d530:	430a      	orrs	r2, r1
 801d532:	625a      	str	r2, [r3, #36]	; 0x24
 801d534:	46c0      	nop			; (mov r8, r8)
 801d536:	46c0      	nop			; (mov r8, r8)
  __NOP();
  __NOP();
  RCC->APB2RSTR &= ~RCC_APB2RSTR_ADCRST;
 801d538:	4b6a      	ldr	r3, [pc, #424]	; (801d6e4 <__getAdcValue+0x1e0>)
 801d53a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801d53c:	4b69      	ldr	r3, [pc, #420]	; (801d6e4 <__getAdcValue+0x1e0>)
 801d53e:	496a      	ldr	r1, [pc, #424]	; (801d6e8 <__getAdcValue+0x1e4>)
 801d540:	400a      	ands	r2, r1
 801d542:	625a      	str	r2, [r3, #36]	; 0x24
 801d544:	46c0      	nop			; (mov r8, r8)
 801d546:	46c0      	nop			; (mov r8, r8)
  __NOP();
  __NOP();


  // Enable some basic parts
  ADC1->IER = 0;						// do not allow any interrupts
 801d548:	4b68      	ldr	r3, [pc, #416]	; (801d6ec <__getAdcValue+0x1e8>)
 801d54a:	2200      	movs	r2, #0
 801d54c:	605a      	str	r2, [r3, #4]
  ADC1->CFGR2 &= ~ADC_CFGR2_CKMODE;		// select HSI16 clock
 801d54e:	4b67      	ldr	r3, [pc, #412]	; (801d6ec <__getAdcValue+0x1e8>)
 801d550:	691a      	ldr	r2, [r3, #16]
 801d552:	4b66      	ldr	r3, [pc, #408]	; (801d6ec <__getAdcValue+0x1e8>)
 801d554:	0092      	lsls	r2, r2, #2
 801d556:	0892      	lsrs	r2, r2, #2
 801d558:	611a      	str	r2, [r3, #16]

  ADC1->CR |= ADC_CR_ADVREGEN;			// enable ADC voltage regulator, probably not required, because this is automatically activated
 801d55a:	4b64      	ldr	r3, [pc, #400]	; (801d6ec <__getAdcValue+0x1e8>)
 801d55c:	689a      	ldr	r2, [r3, #8]
 801d55e:	4b63      	ldr	r3, [pc, #396]	; (801d6ec <__getAdcValue+0x1e8>)
 801d560:	2180      	movs	r1, #128	; 0x80
 801d562:	0549      	lsls	r1, r1, #21
 801d564:	430a      	orrs	r2, r1
 801d566:	609a      	str	r2, [r3, #8]
  ADC->CCR |= ADC_CCR_VREFEN; 			// Wake-up the VREFINT
 801d568:	4b61      	ldr	r3, [pc, #388]	; (801d6f0 <__getAdcValue+0x1ec>)
 801d56a:	681a      	ldr	r2, [r3, #0]
 801d56c:	4b60      	ldr	r3, [pc, #384]	; (801d6f0 <__getAdcValue+0x1ec>)
 801d56e:	2180      	movs	r1, #128	; 0x80
 801d570:	03c9      	lsls	r1, r1, #15
 801d572:	430a      	orrs	r2, r1
 801d574:	601a      	str	r2, [r3, #0]
  ADC->CCR |= ADC_CCR_TSEN; 			// Wake-up the temperature sensor
 801d576:	4b5e      	ldr	r3, [pc, #376]	; (801d6f0 <__getAdcValue+0x1ec>)
 801d578:	681a      	ldr	r2, [r3, #0]
 801d57a:	4b5d      	ldr	r3, [pc, #372]	; (801d6f0 <__getAdcValue+0x1ec>)
 801d57c:	2180      	movs	r1, #128	; 0x80
 801d57e:	0409      	lsls	r1, r1, #16
 801d580:	430a      	orrs	r2, r1
 801d582:	601a      	str	r2, [r3, #0]
 801d584:	46c0      	nop			; (mov r8, r8)
 801d586:	46c0      	nop			; (mov r8, r8)
  __NOP();
  __NOP();


  // CALIBRATION
  if ((ADC1->CR & ADC_CR_ADEN) != 0) {		// clear ADEN flag if required
 801d588:	4b58      	ldr	r3, [pc, #352]	; (801d6ec <__getAdcValue+0x1e8>)
 801d58a:	689b      	ldr	r3, [r3, #8]
 801d58c:	2201      	movs	r2, #1
 801d58e:	4013      	ands	r3, r2
 801d590:	d005      	beq.n	801d59e <__getAdcValue+0x9a>
    ADC1->CR &= (uint32_t)(~ADC_CR_ADEN);
 801d592:	4b56      	ldr	r3, [pc, #344]	; (801d6ec <__getAdcValue+0x1e8>)
 801d594:	689a      	ldr	r2, [r3, #8]
 801d596:	4b55      	ldr	r3, [pc, #340]	; (801d6ec <__getAdcValue+0x1e8>)
 801d598:	2101      	movs	r1, #1
 801d59a:	438a      	bics	r2, r1
 801d59c:	609a      	str	r2, [r3, #8]
  }
  ADC1->CR |= ADC_CR_ADCAL; 				// start calibration
 801d59e:	4b53      	ldr	r3, [pc, #332]	; (801d6ec <__getAdcValue+0x1e8>)
 801d5a0:	689a      	ldr	r2, [r3, #8]
 801d5a2:	4b52      	ldr	r3, [pc, #328]	; (801d6ec <__getAdcValue+0x1e8>)
 801d5a4:	2180      	movs	r1, #128	; 0x80
 801d5a6:	0609      	lsls	r1, r1, #24
 801d5a8:	430a      	orrs	r2, r1
 801d5aa:	609a      	str	r2, [r3, #8]
  while ((ADC1->ISR & ADC_ISR_EOCAL) == 0);	// wait for calibration finished
 801d5ac:	46c0      	nop			; (mov r8, r8)
 801d5ae:	4b4f      	ldr	r3, [pc, #316]	; (801d6ec <__getAdcValue+0x1e8>)
 801d5b0:	681a      	ldr	r2, [r3, #0]
 801d5b2:	2380      	movs	r3, #128	; 0x80
 801d5b4:	011b      	lsls	r3, r3, #4
 801d5b6:	4013      	ands	r3, r2
 801d5b8:	d0f9      	beq.n	801d5ae <__getAdcValue+0xaa>
  ADC1->ISR |= ADC_ISR_EOCAL; 				// clear the status flag, by writing 1 to it
 801d5ba:	4b4c      	ldr	r3, [pc, #304]	; (801d6ec <__getAdcValue+0x1e8>)
 801d5bc:	681a      	ldr	r2, [r3, #0]
 801d5be:	4b4b      	ldr	r3, [pc, #300]	; (801d6ec <__getAdcValue+0x1e8>)
 801d5c0:	2180      	movs	r1, #128	; 0x80
 801d5c2:	0109      	lsls	r1, r1, #4
 801d5c4:	430a      	orrs	r2, r1
 801d5c6:	601a      	str	r2, [r3, #0]
 801d5c8:	46c0      	nop			; (mov r8, r8)
 801d5ca:	46c0      	nop			; (mov r8, r8)
 801d5cc:	46c0      	nop			; (mov r8, r8)
 801d5ce:	46c0      	nop			; (mov r8, r8)
 801d5d0:	46c0      	nop			; (mov r8, r8)
 801d5d2:	46c0      	nop			; (mov r8, r8)
 801d5d4:	46c0      	nop			; (mov r8, r8)
 801d5d6:	46c0      	nop			; (mov r8, r8)
 801d5d8:	46c0      	nop			; (mov r8, r8)
 801d5da:	46c0      	nop			; (mov r8, r8)
  __NOP();
  __NOP();


  // ENABLE ADC
  ADC1->ISR |= ADC_ISR_ADRDY; 					// clear ready flag
 801d5dc:	4b43      	ldr	r3, [pc, #268]	; (801d6ec <__getAdcValue+0x1e8>)
 801d5de:	681a      	ldr	r2, [r3, #0]
 801d5e0:	4b42      	ldr	r3, [pc, #264]	; (801d6ec <__getAdcValue+0x1e8>)
 801d5e2:	2101      	movs	r1, #1
 801d5e4:	430a      	orrs	r2, r1
 801d5e6:	601a      	str	r2, [r3, #0]
  ADC1->CR |= ADC_CR_ADEN; 						// enable ADC
 801d5e8:	4b40      	ldr	r3, [pc, #256]	; (801d6ec <__getAdcValue+0x1e8>)
 801d5ea:	689a      	ldr	r2, [r3, #8]
 801d5ec:	4b3f      	ldr	r3, [pc, #252]	; (801d6ec <__getAdcValue+0x1e8>)
 801d5ee:	2101      	movs	r1, #1
 801d5f0:	430a      	orrs	r2, r1
 801d5f2:	609a      	str	r2, [r3, #8]
  while ((ADC1->ISR & ADC_ISR_ADRDY) == 0);		// wait for ADC
 801d5f4:	46c0      	nop			; (mov r8, r8)
 801d5f6:	4b3d      	ldr	r3, [pc, #244]	; (801d6ec <__getAdcValue+0x1e8>)
 801d5f8:	681b      	ldr	r3, [r3, #0]
 801d5fa:	2201      	movs	r2, #1
 801d5fc:	4013      	ands	r3, r2
 801d5fe:	d0fa      	beq.n	801d5f6 <__getAdcValue+0xf2>


  // CONFIGURE ADC
  ADC1->CFGR1 &= ~ADC_CFGR1_EXTEN;				// software enabled conversion start
 801d600:	4b3a      	ldr	r3, [pc, #232]	; (801d6ec <__getAdcValue+0x1e8>)
 801d602:	68da      	ldr	r2, [r3, #12]
 801d604:	4b39      	ldr	r3, [pc, #228]	; (801d6ec <__getAdcValue+0x1e8>)
 801d606:	493b      	ldr	r1, [pc, #236]	; (801d6f4 <__getAdcValue+0x1f0>)
 801d608:	400a      	ands	r2, r1
 801d60a:	60da      	str	r2, [r3, #12]
  ADC1->CFGR1 &= ~ADC_CFGR1_ALIGN;				// right alignment
 801d60c:	4b37      	ldr	r3, [pc, #220]	; (801d6ec <__getAdcValue+0x1e8>)
 801d60e:	68da      	ldr	r2, [r3, #12]
 801d610:	4b36      	ldr	r3, [pc, #216]	; (801d6ec <__getAdcValue+0x1e8>)
 801d612:	2120      	movs	r1, #32
 801d614:	438a      	bics	r2, r1
 801d616:	60da      	str	r2, [r3, #12]
  ADC1->CFGR1 &= ~ADC_CFGR1_RES;				// 12 bit resolution
 801d618:	4b34      	ldr	r3, [pc, #208]	; (801d6ec <__getAdcValue+0x1e8>)
 801d61a:	68da      	ldr	r2, [r3, #12]
 801d61c:	4b33      	ldr	r3, [pc, #204]	; (801d6ec <__getAdcValue+0x1e8>)
 801d61e:	2118      	movs	r1, #24
 801d620:	438a      	bics	r2, r1
 801d622:	60da      	str	r2, [r3, #12]
  ADC1->CHSELR = channel & ADC_CHANNEL_MASK; 	// Select channel (1 << channel number)
 801d624:	4b31      	ldr	r3, [pc, #196]	; (801d6ec <__getAdcValue+0x1e8>)
 801d626:	687a      	ldr	r2, [r7, #4]
 801d628:	0352      	lsls	r2, r2, #13
 801d62a:	0b52      	lsrs	r2, r2, #13
 801d62c:	629a      	str	r2, [r3, #40]	; 0x28
  ADC1->SMPR |= ADC_SMPR_SMP_0 | ADC_SMPR_SMP_1 | ADC_SMPR_SMP_2;
 801d62e:	4b2f      	ldr	r3, [pc, #188]	; (801d6ec <__getAdcValue+0x1e8>)
 801d630:	695a      	ldr	r2, [r3, #20]
 801d632:	4b2e      	ldr	r3, [pc, #184]	; (801d6ec <__getAdcValue+0x1e8>)
 801d634:	2107      	movs	r1, #7
 801d636:	430a      	orrs	r2, r1
 801d638:	615a      	str	r2, [r3, #20]
  	  	  	  	  	  	  	  	  	  	  	  	// Select a sampling mode of 111 (very slow)

  // DO MUTIPLE READ & AVERAGE
  data = 0;
 801d63a:	2300      	movs	r3, #0
 801d63c:	60fb      	str	r3, [r7, #12]
  for( i = 0; i < oversampling ; i++ )
 801d63e:	2300      	movs	r3, #0
 801d640:	60bb      	str	r3, [r7, #8]
 801d642:	e013      	b.n	801d66c <__getAdcValue+0x168>
  {
    ADC1->CR |= ADC_CR_ADSTART; 				// start the ADC conversion
 801d644:	4b29      	ldr	r3, [pc, #164]	; (801d6ec <__getAdcValue+0x1e8>)
 801d646:	689a      	ldr	r2, [r3, #8]
 801d648:	4b28      	ldr	r3, [pc, #160]	; (801d6ec <__getAdcValue+0x1e8>)
 801d64a:	2104      	movs	r1, #4
 801d64c:	430a      	orrs	r2, r1
 801d64e:	609a      	str	r2, [r3, #8]
    while ((ADC1->ISR & ADC_ISR_EOC) == 0); 	// wait end of conversion
 801d650:	46c0      	nop			; (mov r8, r8)
 801d652:	4b26      	ldr	r3, [pc, #152]	; (801d6ec <__getAdcValue+0x1e8>)
 801d654:	681b      	ldr	r3, [r3, #0]
 801d656:	2204      	movs	r2, #4
 801d658:	4013      	ands	r3, r2
 801d65a:	d0fa      	beq.n	801d652 <__getAdcValue+0x14e>
    data += ADC1->DR;							// get ADC result and clear the ISR_EOC flag
 801d65c:	4b23      	ldr	r3, [pc, #140]	; (801d6ec <__getAdcValue+0x1e8>)
 801d65e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d660:	68fa      	ldr	r2, [r7, #12]
 801d662:	18d3      	adds	r3, r2, r3
 801d664:	60fb      	str	r3, [r7, #12]
  for( i = 0; i < oversampling ; i++ )
 801d666:	68bb      	ldr	r3, [r7, #8]
 801d668:	3301      	adds	r3, #1
 801d66a:	60bb      	str	r3, [r7, #8]
 801d66c:	1cfb      	adds	r3, r7, #3
 801d66e:	781b      	ldrb	r3, [r3, #0]
 801d670:	68ba      	ldr	r2, [r7, #8]
 801d672:	429a      	cmp	r2, r3
 801d674:	d3e6      	bcc.n	801d644 <__getAdcValue+0x140>
  }
  data = data / oversampling;
 801d676:	1cfb      	adds	r3, r7, #3
 801d678:	781b      	ldrb	r3, [r3, #0]
 801d67a:	0019      	movs	r1, r3
 801d67c:	68f8      	ldr	r0, [r7, #12]
 801d67e:	f7e2 fd4b 	bl	8000118 <__udivsi3>
 801d682:	0003      	movs	r3, r0
 801d684:	60fb      	str	r3, [r7, #12]

  // DISABLE ADC
  // at this point the end of sampling and end of sequence bits are also set in ISR registr
  if ( (ADC1->CR & ADC_CR_ADEN) != 0 )
 801d686:	4b19      	ldr	r3, [pc, #100]	; (801d6ec <__getAdcValue+0x1e8>)
 801d688:	689b      	ldr	r3, [r3, #8]
 801d68a:	2201      	movs	r2, #1
 801d68c:	4013      	ands	r3, r2
 801d68e:	d00b      	beq.n	801d6a8 <__getAdcValue+0x1a4>
  {
    ADC1->CR |= ADC_CR_ADDIS; 					// disable ADC... maybe better execute a reset
 801d690:	4b16      	ldr	r3, [pc, #88]	; (801d6ec <__getAdcValue+0x1e8>)
 801d692:	689a      	ldr	r2, [r3, #8]
 801d694:	4b15      	ldr	r3, [pc, #84]	; (801d6ec <__getAdcValue+0x1e8>)
 801d696:	2102      	movs	r1, #2
 801d698:	430a      	orrs	r2, r1
 801d69a:	609a      	str	r2, [r3, #8]
    while ((ADC1->CR & ADC_CR_ADEN) != 0); 		// wait for ADC disable, ADEN is also cleared
 801d69c:	46c0      	nop			; (mov r8, r8)
 801d69e:	4b13      	ldr	r3, [pc, #76]	; (801d6ec <__getAdcValue+0x1e8>)
 801d6a0:	689b      	ldr	r3, [r3, #8]
 801d6a2:	2201      	movs	r2, #1
 801d6a4:	4013      	ands	r3, r2
 801d6a6:	d1fa      	bne.n	801d69e <__getAdcValue+0x19a>
  }

  // DISABLE OTHER PARTS, INCLUDING CLOCK
  ADC->CCR &= ~ADC_CCR_VREFEN; 					// disable VREFINT
 801d6a8:	4b11      	ldr	r3, [pc, #68]	; (801d6f0 <__getAdcValue+0x1ec>)
 801d6aa:	681a      	ldr	r2, [r3, #0]
 801d6ac:	4b10      	ldr	r3, [pc, #64]	; (801d6f0 <__getAdcValue+0x1ec>)
 801d6ae:	4912      	ldr	r1, [pc, #72]	; (801d6f8 <__getAdcValue+0x1f4>)
 801d6b0:	400a      	ands	r2, r1
 801d6b2:	601a      	str	r2, [r3, #0]
  ADC->CCR &= ~ADC_CCR_TSEN; 					// disable temperature sensor
 801d6b4:	4b0e      	ldr	r3, [pc, #56]	; (801d6f0 <__getAdcValue+0x1ec>)
 801d6b6:	681a      	ldr	r2, [r3, #0]
 801d6b8:	4b0d      	ldr	r3, [pc, #52]	; (801d6f0 <__getAdcValue+0x1ec>)
 801d6ba:	4910      	ldr	r1, [pc, #64]	; (801d6fc <__getAdcValue+0x1f8>)
 801d6bc:	400a      	ands	r2, r1
 801d6be:	601a      	str	r2, [r3, #0]
  ADC1->CR &= ~ADC_CR_ADVREGEN;					// disable ADC voltage regulator
 801d6c0:	4b0a      	ldr	r3, [pc, #40]	; (801d6ec <__getAdcValue+0x1e8>)
 801d6c2:	689a      	ldr	r2, [r3, #8]
 801d6c4:	4b09      	ldr	r3, [pc, #36]	; (801d6ec <__getAdcValue+0x1e8>)
 801d6c6:	490e      	ldr	r1, [pc, #56]	; (801d700 <__getAdcValue+0x1fc>)
 801d6c8:	400a      	ands	r2, r1
 801d6ca:	609a      	str	r2, [r3, #8]
  RCC->APB2ENR &= ~RCC_APB2ENR_ADCEN;			// disable ADC clock
 801d6cc:	4b05      	ldr	r3, [pc, #20]	; (801d6e4 <__getAdcValue+0x1e0>)
 801d6ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801d6d0:	4b04      	ldr	r3, [pc, #16]	; (801d6e4 <__getAdcValue+0x1e0>)
 801d6d2:	4905      	ldr	r1, [pc, #20]	; (801d6e8 <__getAdcValue+0x1e4>)
 801d6d4:	400a      	ands	r2, r1
 801d6d6:	635a      	str	r2, [r3, #52]	; 0x34
  __ASM volatile ("cpsie i" : : : "memory");
 801d6d8:	b662      	cpsie	i

  __enable_irq();
  return data;
 801d6da:	68fb      	ldr	r3, [r7, #12]
}
 801d6dc:	0018      	movs	r0, r3
 801d6de:	46bd      	mov	sp, r7
 801d6e0:	b004      	add	sp, #16
 801d6e2:	bd80      	pop	{r7, pc}
 801d6e4:	40021000 	.word	0x40021000
 801d6e8:	fffffdff 	.word	0xfffffdff
 801d6ec:	40012400 	.word	0x40012400
 801d6f0:	40012708 	.word	0x40012708
 801d6f4:	fffff3ff 	.word	0xfffff3ff
 801d6f8:	ffbfffff 	.word	0xffbfffff
 801d6fc:	ff7fffff 	.word	0xff7fffff
 801d700:	efffffff 	.word	0xefffffff

0801d704 <adc_getTemperature>:
/**
 * Return temperature from Adc the temp is in centi-degrés Celcius
 * Ensure to read Temperature at least 8ms after wake up ...
 * Time to get accurate getVdd response
 */
int16_t adc_getTemperature() {
 801d704:	b5b0      	push	{r4, r5, r7, lr}
 801d706:	b084      	sub	sp, #16
 801d708:	af00      	add	r7, sp, #0

	uint16_t vdd = adc_getVdd();
 801d70a:	240e      	movs	r4, #14
 801d70c:	0025      	movs	r5, r4
 801d70e:	193c      	adds	r4, r7, r4
 801d710:	f000 f850 	bl	801d7b4 <adc_getVdd>
 801d714:	0003      	movs	r3, r0
 801d716:	8023      	strh	r3, [r4, #0]
	uint32_t v = __getAdcValue(ADC_CHANNEL_TEMPSENSOR,ITSDK_ADC_OVERSAMPLING);
 801d718:	4b21      	ldr	r3, [pc, #132]	; (801d7a0 <adc_getTemperature+0x9c>)
 801d71a:	2110      	movs	r1, #16
 801d71c:	0018      	movs	r0, r3
 801d71e:	f7ff fef1 	bl	801d504 <__getAdcValue>
 801d722:	0003      	movs	r3, r0
 801d724:	60bb      	str	r3, [r7, #8]

	// adapt the calibration values to the current VDD reference
	uint16_t cal1_vdd = (*CAL1_VALUE * VDD_CALIB) / vdd;
 801d726:	4b1f      	ldr	r3, [pc, #124]	; (801d7a4 <adc_getTemperature+0xa0>)
 801d728:	881b      	ldrh	r3, [r3, #0]
 801d72a:	001a      	movs	r2, r3
 801d72c:	4b1e      	ldr	r3, [pc, #120]	; (801d7a8 <adc_getTemperature+0xa4>)
 801d72e:	435a      	muls	r2, r3
 801d730:	002c      	movs	r4, r5
 801d732:	193b      	adds	r3, r7, r4
 801d734:	881b      	ldrh	r3, [r3, #0]
 801d736:	0019      	movs	r1, r3
 801d738:	0010      	movs	r0, r2
 801d73a:	f7e2 fd77 	bl	800022c <__divsi3>
 801d73e:	0003      	movs	r3, r0
 801d740:	001a      	movs	r2, r3
 801d742:	1dbb      	adds	r3, r7, #6
 801d744:	801a      	strh	r2, [r3, #0]
	uint16_t cal2_vdd = (*CAL2_VALUE * VDD_CALIB) / vdd;
 801d746:	4b19      	ldr	r3, [pc, #100]	; (801d7ac <adc_getTemperature+0xa8>)
 801d748:	881b      	ldrh	r3, [r3, #0]
 801d74a:	001a      	movs	r2, r3
 801d74c:	4b16      	ldr	r3, [pc, #88]	; (801d7a8 <adc_getTemperature+0xa4>)
 801d74e:	435a      	muls	r2, r3
 801d750:	193b      	adds	r3, r7, r4
 801d752:	881b      	ldrh	r3, [r3, #0]
 801d754:	0019      	movs	r1, r3
 801d756:	0010      	movs	r0, r2
 801d758:	f7e2 fd68 	bl	800022c <__divsi3>
 801d75c:	0003      	movs	r3, r0
 801d75e:	001a      	movs	r2, r3
 801d760:	1d3b      	adds	r3, r7, #4
 801d762:	801a      	strh	r2, [r3, #0]

	// convert in 0.01�C according to the calibration ref
	int32_t temperature = 100 * (CAL2_TEMP - CAL1_TEMP)*(v - cal1_vdd);
 801d764:	1dbb      	adds	r3, r7, #6
 801d766:	881b      	ldrh	r3, [r3, #0]
 801d768:	68ba      	ldr	r2, [r7, #8]
 801d76a:	1ad3      	subs	r3, r2, r3
 801d76c:	4a10      	ldr	r2, [pc, #64]	; (801d7b0 <adc_getTemperature+0xac>)
 801d76e:	4353      	muls	r3, r2
 801d770:	603b      	str	r3, [r7, #0]
	temperature /= (cal2_vdd - cal1_vdd);
 801d772:	1d3b      	adds	r3, r7, #4
 801d774:	881a      	ldrh	r2, [r3, #0]
 801d776:	1dbb      	adds	r3, r7, #6
 801d778:	881b      	ldrh	r3, [r3, #0]
 801d77a:	1ad3      	subs	r3, r2, r3
 801d77c:	0019      	movs	r1, r3
 801d77e:	6838      	ldr	r0, [r7, #0]
 801d780:	f7e2 fd54 	bl	800022c <__divsi3>
 801d784:	0003      	movs	r3, r0
 801d786:	603b      	str	r3, [r7, #0]
    temperature = temperature + (100*CAL1_TEMP);
 801d788:	683b      	ldr	r3, [r7, #0]
 801d78a:	4a07      	ldr	r2, [pc, #28]	; (801d7a8 <adc_getTemperature+0xa4>)
 801d78c:	4694      	mov	ip, r2
 801d78e:	4463      	add	r3, ip
 801d790:	603b      	str	r3, [r7, #0]
    return (int16_t)temperature;
 801d792:	683b      	ldr	r3, [r7, #0]
 801d794:	b21b      	sxth	r3, r3

}
 801d796:	0018      	movs	r0, r3
 801d798:	46bd      	mov	sp, r7
 801d79a:	b004      	add	sp, #16
 801d79c:	bdb0      	pop	{r4, r5, r7, pc}
 801d79e:	46c0      	nop			; (mov r8, r8)
 801d7a0:	48040000 	.word	0x48040000
 801d7a4:	1ff8007a 	.word	0x1ff8007a
 801d7a8:	00000bb8 	.word	0x00000bb8
 801d7ac:	1ff8007e 	.word	0x1ff8007e
 801d7b0:	00002710 	.word	0x00002710

0801d7b4 <adc_getVdd>:
 * Return VDD in mV ( internal VDD )
 * Be Careful -> right after wakeup from STOP the
 * value can be invalid (200mv error). The solution is to
 * sleep a bit (8ms recommanded) before sampling Vdd
 */
uint16_t adc_getVdd() {
 801d7b4:	b590      	push	{r4, r7, lr}
 801d7b6:	b083      	sub	sp, #12
 801d7b8:	af00      	add	r7, sp, #0
	// The value measured is not good until we wait about 8ms after MCU wakeup from stop
	uint64_t t = ( itsdk_time_get_us() - itsdk_state.lastWakeUpTimeUs) / 1000;
 801d7ba:	f7ff fca3 	bl	801d104 <itsdk_time_get_us>
 801d7be:	000a      	movs	r2, r1
 801d7c0:	0001      	movs	r1, r0
 801d7c2:	4b13      	ldr	r3, [pc, #76]	; (801d810 <adc_getVdd+0x5c>)
 801d7c4:	68dc      	ldr	r4, [r3, #12]
 801d7c6:	689b      	ldr	r3, [r3, #8]
 801d7c8:	1ac9      	subs	r1, r1, r3
 801d7ca:	41a2      	sbcs	r2, r4
 801d7cc:	0008      	movs	r0, r1
 801d7ce:	0011      	movs	r1, r2
 801d7d0:	22fa      	movs	r2, #250	; 0xfa
 801d7d2:	0092      	lsls	r2, r2, #2
 801d7d4:	2300      	movs	r3, #0
 801d7d6:	f7e2 fe77 	bl	80004c8 <__aeabi_uldivmod>
 801d7da:	0003      	movs	r3, r0
 801d7dc:	000c      	movs	r4, r1
 801d7de:	603b      	str	r3, [r7, #0]
 801d7e0:	607c      	str	r4, [r7, #4]
	if ( t < 8 ) {
 801d7e2:	687b      	ldr	r3, [r7, #4]
 801d7e4:	2b00      	cmp	r3, #0
 801d7e6:	d10b      	bne.n	801d800 <adc_getVdd+0x4c>
 801d7e8:	687b      	ldr	r3, [r7, #4]
 801d7ea:	2b00      	cmp	r3, #0
 801d7ec:	d102      	bne.n	801d7f4 <adc_getVdd+0x40>
 801d7ee:	683b      	ldr	r3, [r7, #0]
 801d7f0:	2b07      	cmp	r3, #7
 801d7f2:	d805      	bhi.n	801d800 <adc_getVdd+0x4c>
		itsdk_delayMs(8 - t);
 801d7f4:	683b      	ldr	r3, [r7, #0]
 801d7f6:	2208      	movs	r2, #8
 801d7f8:	1ad3      	subs	r3, r2, r3
 801d7fa:	0018      	movs	r0, r3
 801d7fc:	f000 fd1a 	bl	801e234 <itsdk_delayMs>
	}
	return adc_getValue(0);
 801d800:	2000      	movs	r0, #0
 801d802:	f000 f813 	bl	801d82c <adc_getValue>
 801d806:	0003      	movs	r3, r0
}
 801d808:	0018      	movs	r0, r3
 801d80a:	46bd      	mov	sp, r7
 801d80c:	b003      	add	sp, #12
 801d80e:	bd90      	pop	{r4, r7, pc}
 801d810:	200016a8 	.word	0x200016a8

0801d814 <adc_getVBat>:

/**
 * Return VBAT in mV - external VDD when a VBAT pin has been configured with a voltage divider by 2
 * Assuming VBAT have a /2 in front of the ADC
 */
uint16_t adc_getVBat() {
 801d814:	b580      	push	{r7, lr}
 801d816:	af00      	add	r7, sp, #0
#if ITSDK_VBAT_ADC_PIN >= 0
	return adc_getValue(ITSDK_VBAT_ADC_PIN)*2;
 801d818:	2041      	movs	r0, #65	; 0x41
 801d81a:	f000 f807 	bl	801d82c <adc_getValue>
 801d81e:	0003      	movs	r3, r0
 801d820:	18db      	adds	r3, r3, r3
 801d822:	b29b      	uxth	r3, r3
#else
	return adc_getVdd();
#endif
}
 801d824:	0018      	movs	r0, r3
 801d826:	46bd      	mov	sp, r7
 801d828:	bd80      	pop	{r7, pc}
	...

0801d82c <adc_getValue>:
/**
 * Return ADC Value for an external PIN or internal
 * Get the pin number (hardware one)...
 * Pin 0 = internal VDD
 */
uint16_t adc_getValue(uint32_t pin) {
 801d82c:	b580      	push	{r7, lr}
 801d82e:	b08c      	sub	sp, #48	; 0x30
 801d830:	af00      	add	r7, sp, #0
 801d832:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef  GPIO_InitStruct;
	GPIO_TypeDef  	* GPIO_TypeDefStruct = GPIOA;
 801d834:	23a0      	movs	r3, #160	; 0xa0
 801d836:	05db      	lsls	r3, r3, #23
 801d838:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 801d83a:	2108      	movs	r1, #8
 801d83c:	187b      	adds	r3, r7, r1
 801d83e:	2203      	movs	r2, #3
 801d840:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 801d842:	187b      	adds	r3, r7, r1
 801d844:	2200      	movs	r2, #0
 801d846:	609a      	str	r2, [r3, #8]
	uint32_t channel = 0;
 801d848:	2300      	movs	r3, #0
 801d84a:	62bb      	str	r3, [r7, #40]	; 0x28
	default:
  	    ITSDK_ERROR_REPORT(ITSDK_ERROR_ADC_INVALID_PIN,(uint16_t)pin);
	}
#elif  ITSDK_DEVICE == __DEVICE_STM32L072XX
	// For the BGA device I consider the pin number as Line||Column 65 => line 6 Column 5
	switch (pin) {
 801d84c:	687b      	ldr	r3, [r7, #4]
 801d84e:	2b4d      	cmp	r3, #77	; 0x4d
 801d850:	d900      	bls.n	801d854 <adc_getValue+0x28>
 801d852:	e085      	b.n	801d960 <adc_getValue+0x134>
 801d854:	687b      	ldr	r3, [r7, #4]
 801d856:	009a      	lsls	r2, r3, #2
 801d858:	4b5f      	ldr	r3, [pc, #380]	; (801d9d8 <adc_getValue+0x1ac>)
 801d85a:	18d3      	adds	r3, r2, r3
 801d85c:	681b      	ldr	r3, [r3, #0]
 801d85e:	469f      	mov	pc, r3
	case 0:
		channel = ADC_CHANNEL_VREFINT; 	// VDD
 801d860:	4b5e      	ldr	r3, [pc, #376]	; (801d9dc <adc_getValue+0x1b0>)
 801d862:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 801d864:	e083      	b.n	801d96e <adc_getValue+0x142>
	case 55:
		GPIO_InitStruct.Pin = GPIO_PIN_0;
 801d866:	2308      	movs	r3, #8
 801d868:	18fb      	adds	r3, r7, r3
 801d86a:	2201      	movs	r2, #1
 801d86c:	601a      	str	r2, [r3, #0]
		GPIO_TypeDefStruct = GPIOA;
 801d86e:	23a0      	movs	r3, #160	; 0xa0
 801d870:	05db      	lsls	r3, r3, #23
 801d872:	62fb      	str	r3, [r7, #44]	; 0x2c
		channel = ADC_CHANNEL_0;	// PA0
 801d874:	2301      	movs	r3, #1
 801d876:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 801d878:	e079      	b.n	801d96e <adc_getValue+0x142>
	case 54:
		GPIO_InitStruct.Pin = GPIO_PIN_1;
 801d87a:	2308      	movs	r3, #8
 801d87c:	18fb      	adds	r3, r7, r3
 801d87e:	2202      	movs	r2, #2
 801d880:	601a      	str	r2, [r3, #0]
		GPIO_TypeDefStruct = GPIOA;
 801d882:	23a0      	movs	r3, #160	; 0xa0
 801d884:	05db      	lsls	r3, r3, #23
 801d886:	62fb      	str	r3, [r7, #44]	; 0x2c
		channel = ADC_CHANNEL_1;	// PA1
 801d888:	4b55      	ldr	r3, [pc, #340]	; (801d9e0 <adc_getValue+0x1b4>)
 801d88a:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 801d88c:	e06f      	b.n	801d96e <adc_getValue+0x142>
	case 66:
		GPIO_InitStruct.Pin = GPIO_PIN_2;
 801d88e:	2308      	movs	r3, #8
 801d890:	18fb      	adds	r3, r7, r3
 801d892:	2204      	movs	r2, #4
 801d894:	601a      	str	r2, [r3, #0]
		GPIO_TypeDefStruct = GPIOA;
 801d896:	23a0      	movs	r3, #160	; 0xa0
 801d898:	05db      	lsls	r3, r3, #23
 801d89a:	62fb      	str	r3, [r7, #44]	; 0x2c
		channel = ADC_CHANNEL_2;	// PA2
 801d89c:	4b51      	ldr	r3, [pc, #324]	; (801d9e4 <adc_getValue+0x1b8>)
 801d89e:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 801d8a0:	e065      	b.n	801d96e <adc_getValue+0x142>
	case 77:
		GPIO_InitStruct.Pin = GPIO_PIN_3;
 801d8a2:	2308      	movs	r3, #8
 801d8a4:	18fb      	adds	r3, r7, r3
 801d8a6:	2208      	movs	r2, #8
 801d8a8:	601a      	str	r2, [r3, #0]
		GPIO_TypeDefStruct = GPIOA;
 801d8aa:	23a0      	movs	r3, #160	; 0xa0
 801d8ac:	05db      	lsls	r3, r3, #23
 801d8ae:	62fb      	str	r3, [r7, #44]	; 0x2c
		channel = ADC_CHANNEL_3;	// PA3
 801d8b0:	4b4d      	ldr	r3, [pc, #308]	; (801d9e8 <adc_getValue+0x1bc>)
 801d8b2:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 801d8b4:	e05b      	b.n	801d96e <adc_getValue+0x142>
	case 65:
		GPIO_InitStruct.Pin = GPIO_PIN_4;
 801d8b6:	2308      	movs	r3, #8
 801d8b8:	18fb      	adds	r3, r7, r3
 801d8ba:	2210      	movs	r2, #16
 801d8bc:	601a      	str	r2, [r3, #0]
		GPIO_TypeDefStruct = GPIOA;
 801d8be:	23a0      	movs	r3, #160	; 0xa0
 801d8c0:	05db      	lsls	r3, r3, #23
 801d8c2:	62fb      	str	r3, [r7, #44]	; 0x2c
		channel = ADC_CHANNEL_4; 	// PA4
 801d8c4:	4b49      	ldr	r3, [pc, #292]	; (801d9ec <adc_getValue+0x1c0>)
 801d8c6:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 801d8c8:	e051      	b.n	801d96e <adc_getValue+0x142>
	case 76:
		GPIO_InitStruct.Pin = GPIO_PIN_5;
 801d8ca:	2308      	movs	r3, #8
 801d8cc:	18fb      	adds	r3, r7, r3
 801d8ce:	2220      	movs	r2, #32
 801d8d0:	601a      	str	r2, [r3, #0]
		GPIO_TypeDefStruct = GPIOA;
 801d8d2:	23a0      	movs	r3, #160	; 0xa0
 801d8d4:	05db      	lsls	r3, r3, #23
 801d8d6:	62fb      	str	r3, [r7, #44]	; 0x2c
		channel = ADC_CHANNEL_5;	// PA5
 801d8d8:	4b45      	ldr	r3, [pc, #276]	; (801d9f0 <adc_getValue+0x1c4>)
 801d8da:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 801d8dc:	e047      	b.n	801d96e <adc_getValue+0x142>
	case 75:
		GPIO_InitStruct.Pin = GPIO_PIN_6;
 801d8de:	2308      	movs	r3, #8
 801d8e0:	18fb      	adds	r3, r7, r3
 801d8e2:	2240      	movs	r2, #64	; 0x40
 801d8e4:	601a      	str	r2, [r3, #0]
		GPIO_TypeDefStruct = GPIOA;
 801d8e6:	23a0      	movs	r3, #160	; 0xa0
 801d8e8:	05db      	lsls	r3, r3, #23
 801d8ea:	62fb      	str	r3, [r7, #44]	; 0x2c
		channel = ADC_CHANNEL_6;	// PA6
 801d8ec:	4b41      	ldr	r3, [pc, #260]	; (801d9f4 <adc_getValue+0x1c8>)
 801d8ee:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 801d8f0:	e03d      	b.n	801d96e <adc_getValue+0x142>
	case 64:
		GPIO_InitStruct.Pin = GPIO_PIN_7;
 801d8f2:	2308      	movs	r3, #8
 801d8f4:	18fb      	adds	r3, r7, r3
 801d8f6:	2280      	movs	r2, #128	; 0x80
 801d8f8:	601a      	str	r2, [r3, #0]
		GPIO_TypeDefStruct = GPIOA;
 801d8fa:	23a0      	movs	r3, #160	; 0xa0
 801d8fc:	05db      	lsls	r3, r3, #23
 801d8fe:	62fb      	str	r3, [r7, #44]	; 0x2c
		channel = ADC_CHANNEL_7;	// PA7
 801d900:	4b3d      	ldr	r3, [pc, #244]	; (801d9f8 <adc_getValue+0x1cc>)
 801d902:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 801d904:	e033      	b.n	801d96e <adc_getValue+0x142>
	case 74:
		GPIO_InitStruct.Pin = GPIO_PIN_0;
 801d906:	2308      	movs	r3, #8
 801d908:	18fb      	adds	r3, r7, r3
 801d90a:	2201      	movs	r2, #1
 801d90c:	601a      	str	r2, [r3, #0]
		GPIO_TypeDefStruct = GPIOB;
 801d90e:	4b3b      	ldr	r3, [pc, #236]	; (801d9fc <adc_getValue+0x1d0>)
 801d910:	62fb      	str	r3, [r7, #44]	; 0x2c
		channel = ADC_CHANNEL_8;	// PB0
 801d912:	4b3b      	ldr	r3, [pc, #236]	; (801da00 <adc_getValue+0x1d4>)
 801d914:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 801d916:	e02a      	b.n	801d96e <adc_getValue+0x142>
	case 43:
		GPIO_InitStruct.Pin = GPIO_PIN_1;
 801d918:	2308      	movs	r3, #8
 801d91a:	18fb      	adds	r3, r7, r3
 801d91c:	2202      	movs	r2, #2
 801d91e:	601a      	str	r2, [r3, #0]
		GPIO_TypeDefStruct = GPIOB;
 801d920:	4b36      	ldr	r3, [pc, #216]	; (801d9fc <adc_getValue+0x1d0>)
 801d922:	62fb      	str	r3, [r7, #44]	; 0x2c
		channel = ADC_CHANNEL_9;	// PB1
 801d924:	4b37      	ldr	r3, [pc, #220]	; (801da04 <adc_getValue+0x1d8>)
 801d926:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 801d928:	e021      	b.n	801d96e <adc_getValue+0x142>
	case 35:
		GPIO_InitStruct.Pin = GPIO_PIN_0;
 801d92a:	2308      	movs	r3, #8
 801d92c:	18fb      	adds	r3, r7, r3
 801d92e:	2201      	movs	r2, #1
 801d930:	601a      	str	r2, [r3, #0]
		GPIO_TypeDefStruct = GPIOC;
 801d932:	4b35      	ldr	r3, [pc, #212]	; (801da08 <adc_getValue+0x1dc>)
 801d934:	62fb      	str	r3, [r7, #44]	; 0x2c
		channel = ADC_CHANNEL_10;	// PC0
 801d936:	4b35      	ldr	r3, [pc, #212]	; (801da0c <adc_getValue+0x1e0>)
 801d938:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 801d93a:	e018      	b.n	801d96e <adc_getValue+0x142>
	case 34:
		GPIO_InitStruct.Pin = GPIO_PIN_1;
 801d93c:	2308      	movs	r3, #8
 801d93e:	18fb      	adds	r3, r7, r3
 801d940:	2202      	movs	r2, #2
 801d942:	601a      	str	r2, [r3, #0]
		GPIO_TypeDefStruct = GPIOC;
 801d944:	4b30      	ldr	r3, [pc, #192]	; (801da08 <adc_getValue+0x1dc>)
 801d946:	62fb      	str	r3, [r7, #44]	; 0x2c
		channel = ADC_CHANNEL_11;	// PC1
 801d948:	4b31      	ldr	r3, [pc, #196]	; (801da10 <adc_getValue+0x1e4>)
 801d94a:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 801d94c:	e00f      	b.n	801d96e <adc_getValue+0x142>
	case 57:
		GPIO_InitStruct.Pin = GPIO_PIN_2;
 801d94e:	2308      	movs	r3, #8
 801d950:	18fb      	adds	r3, r7, r3
 801d952:	2204      	movs	r2, #4
 801d954:	601a      	str	r2, [r3, #0]
		GPIO_TypeDefStruct = GPIOC;
 801d956:	4b2c      	ldr	r3, [pc, #176]	; (801da08 <adc_getValue+0x1dc>)
 801d958:	62fb      	str	r3, [r7, #44]	; 0x2c
		channel = ADC_CHANNEL_12;	// PC2
 801d95a:	4b2e      	ldr	r3, [pc, #184]	; (801da14 <adc_getValue+0x1e8>)
 801d95c:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 801d95e:	e006      	b.n	801d96e <adc_getValue+0x142>

	default:
  	    ITSDK_ERROR_REPORT(ITSDK_ERROR_ADC_INVALID_PIN,(uint16_t)pin);
 801d960:	687b      	ldr	r3, [r7, #4]
 801d962:	b29b      	uxth	r3, r3
 801d964:	4a2c      	ldr	r2, [pc, #176]	; (801da18 <adc_getValue+0x1ec>)
 801d966:	0019      	movs	r1, r3
 801d968:	0010      	movs	r0, r2
 801d96a:	f7fe f8f7 	bl	801bb5c <itsdk_error_report>
  	    ITSDK_ERROR_REPORT(ITSDK_ERROR_ADC_INVALID_PIN,(uint16_t)pin);
	}
#else
	#error DEVICE NOT DEFINED
#endif
	if(pin!= 0) {
 801d96e:	687b      	ldr	r3, [r7, #4]
 801d970:	2b00      	cmp	r3, #0
 801d972:	d006      	beq.n	801d982 <adc_getValue+0x156>
		HAL_GPIO_Init(GPIO_TypeDefStruct, &GPIO_InitStruct);
 801d974:	2308      	movs	r3, #8
 801d976:	18fa      	adds	r2, r7, r3
 801d978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d97a:	0011      	movs	r1, r2
 801d97c:	0018      	movs	r0, r3
 801d97e:	f7e6 fe45 	bl	800460c <HAL_GPIO_Init>
	}

	uint32_t v = __getAdcValue(channel,ITSDK_ADC_OVERSAMPLING);
 801d982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d984:	2110      	movs	r1, #16
 801d986:	0018      	movs	r0, r3
 801d988:	f7ff fdbc 	bl	801d504 <__getAdcValue>
 801d98c:	0003      	movs	r3, r0
 801d98e:	627b      	str	r3, [r7, #36]	; 0x24
	if (pin == 0) {
 801d990:	687b      	ldr	r3, [r7, #4]
 801d992:	2b00      	cmp	r3, #0
 801d994:	d112      	bne.n	801d9bc <adc_getValue+0x190>
		if ( v == 0 ) return 0; // securing
 801d996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d998:	2b00      	cmp	r3, #0
 801d99a:	d101      	bne.n	801d9a0 <adc_getValue+0x174>
 801d99c:	2300      	movs	r3, #0
 801d99e:	e017      	b.n	801d9d0 <adc_getValue+0x1a4>
   	    int32_t vdd = ((int32_t)(*VREFINT_CAL) * VDD_CALIB) / v;
 801d9a0:	4b1e      	ldr	r3, [pc, #120]	; (801da1c <adc_getValue+0x1f0>)
 801d9a2:	881b      	ldrh	r3, [r3, #0]
 801d9a4:	001a      	movs	r2, r3
 801d9a6:	4b1e      	ldr	r3, [pc, #120]	; (801da20 <adc_getValue+0x1f4>)
 801d9a8:	4353      	muls	r3, r2
 801d9aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801d9ac:	0018      	movs	r0, r3
 801d9ae:	f7e2 fbb3 	bl	8000118 <__udivsi3>
 801d9b2:	0003      	movs	r3, r0
 801d9b4:	61fb      	str	r3, [r7, #28]
	    return (uint16_t)vdd;
 801d9b6:	69fb      	ldr	r3, [r7, #28]
 801d9b8:	b29b      	uxth	r3, r3
 801d9ba:	e009      	b.n	801d9d0 <adc_getValue+0x1a4>
	} else {
		int32_t vdd = ((uint32_t)adc_getVdd() * v )/4096;
 801d9bc:	f7ff fefa 	bl	801d7b4 <adc_getVdd>
 801d9c0:	0003      	movs	r3, r0
 801d9c2:	001a      	movs	r2, r3
 801d9c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d9c6:	4353      	muls	r3, r2
 801d9c8:	0b1b      	lsrs	r3, r3, #12
 801d9ca:	623b      	str	r3, [r7, #32]
	    return (uint16_t)vdd;
 801d9cc:	6a3b      	ldr	r3, [r7, #32]
 801d9ce:	b29b      	uxth	r3, r3
	}

}
 801d9d0:	0018      	movs	r0, r3
 801d9d2:	46bd      	mov	sp, r7
 801d9d4:	b00c      	add	sp, #48	; 0x30
 801d9d6:	bd80      	pop	{r7, pc}
 801d9d8:	08022220 	.word	0x08022220
 801d9dc:	44020000 	.word	0x44020000
 801d9e0:	04000002 	.word	0x04000002
 801d9e4:	08000004 	.word	0x08000004
 801d9e8:	0c000008 	.word	0x0c000008
 801d9ec:	10000010 	.word	0x10000010
 801d9f0:	14000020 	.word	0x14000020
 801d9f4:	18000040 	.word	0x18000040
 801d9f8:	1c000080 	.word	0x1c000080
 801d9fc:	50000400 	.word	0x50000400
 801da00:	20000100 	.word	0x20000100
 801da04:	24000200 	.word	0x24000200
 801da08:	50000800 	.word	0x50000800
 801da0c:	28000400 	.word	0x28000400
 801da10:	2c000800 	.word	0x2c000800
 801da14:	30001000 	.word	0x30001000
 801da18:	d0000008 	.word	0xd0000008
 801da1c:	1ff80078 	.word	0x1ff80078
 801da20:	00000bb8 	.word	0x00000bb8

0801da24 <getPortFromBankId>:
#endif

/**
 * Convert the bankId used as a generic Id to the right GPIO structure
 */
GPIO_TypeDef * getPortFromBankId(uint8_t bankId) {
 801da24:	b580      	push	{r7, lr}
 801da26:	b082      	sub	sp, #8
 801da28:	af00      	add	r7, sp, #0
 801da2a:	0002      	movs	r2, r0
 801da2c:	1dfb      	adds	r3, r7, #7
 801da2e:	701a      	strb	r2, [r3, #0]
	switch ( bankId ) {
 801da30:	1dfb      	adds	r3, r7, #7
 801da32:	781b      	ldrb	r3, [r3, #0]
 801da34:	2b07      	cmp	r3, #7
 801da36:	d811      	bhi.n	801da5c <getPortFromBankId+0x38>
 801da38:	009a      	lsls	r2, r3, #2
 801da3a:	4b0f      	ldr	r3, [pc, #60]	; (801da78 <getPortFromBankId+0x54>)
 801da3c:	18d3      	adds	r3, r2, r3
 801da3e:	681b      	ldr	r3, [r3, #0]
 801da40:	469f      	mov	pc, r3
	case __BANK_A: return GPIOA;
 801da42:	23a0      	movs	r3, #160	; 0xa0
 801da44:	05db      	lsls	r3, r3, #23
 801da46:	e012      	b.n	801da6e <getPortFromBankId+0x4a>
	case __BANK_B: return GPIOB;
 801da48:	4b0c      	ldr	r3, [pc, #48]	; (801da7c <getPortFromBankId+0x58>)
 801da4a:	e010      	b.n	801da6e <getPortFromBankId+0x4a>
	case __BANK_C: return GPIOC;
 801da4c:	4b0c      	ldr	r3, [pc, #48]	; (801da80 <getPortFromBankId+0x5c>)
 801da4e:	e00e      	b.n	801da6e <getPortFromBankId+0x4a>
#if ITSDK_DEVICE == __DEVICE_STM32L072XX || ITSDK_DEVICE == __DEVICE_STM32L053R8
	case __BANK_D: return GPIOD;
 801da50:	4b0c      	ldr	r3, [pc, #48]	; (801da84 <getPortFromBankId+0x60>)
 801da52:	e00c      	b.n	801da6e <getPortFromBankId+0x4a>
#endif
#if ITSDK_DEVICE == __DEVICE_STM32L072XX
	case __BANK_E: return GPIOE;
 801da54:	4b0c      	ldr	r3, [pc, #48]	; (801da88 <getPortFromBankId+0x64>)
 801da56:	e00a      	b.n	801da6e <getPortFromBankId+0x4a>
#endif
#if ITSDK_DEVICE == __DEVICE_STM32L072XX
	case __BANK_H: return GPIOH;
 801da58:	4b0c      	ldr	r3, [pc, #48]	; (801da8c <getPortFromBankId+0x68>)
 801da5a:	e008      	b.n	801da6e <getPortFromBankId+0x4a>
#endif
	default:
		ITSDK_ERROR_REPORT(ITSDK_ERROR_GPIO_UNSUPPORTED_BANK,(uint16_t)bankId);
 801da5c:	1dfb      	adds	r3, r7, #7
 801da5e:	781b      	ldrb	r3, [r3, #0]
 801da60:	b29b      	uxth	r3, r3
 801da62:	4a0b      	ldr	r2, [pc, #44]	; (801da90 <getPortFromBankId+0x6c>)
 801da64:	0019      	movs	r1, r3
 801da66:	0010      	movs	r0, r2
 801da68:	f7fe f878 	bl	801bb5c <itsdk_error_report>
	}
	return NULL;
 801da6c:	2300      	movs	r3, #0
}
 801da6e:	0018      	movs	r0, r3
 801da70:	46bd      	mov	sp, r7
 801da72:	b002      	add	sp, #8
 801da74:	bd80      	pop	{r7, pc}
 801da76:	46c0      	nop			; (mov r8, r8)
 801da78:	08022358 	.word	0x08022358
 801da7c:	50000400 	.word	0x50000400
 801da80:	50000800 	.word	0x50000800
 801da84:	50000c00 	.word	0x50000c00
 801da88:	50001000 	.word	0x50001000
 801da8c:	50001c00 	.word	0x50001c00
 801da90:	d0000004 	.word	0xd0000004

0801da94 <getPinNumFromPinVector>:

/**
 * Convert the pin vector (every pin is corresponding to a single bit) to a pin number.
 * Internal
 */
uint8_t getPinNumFromPinVector(uint16_t pinId) {
 801da94:	b580      	push	{r7, lr}
 801da96:	b084      	sub	sp, #16
 801da98:	af00      	add	r7, sp, #0
 801da9a:	0002      	movs	r2, r0
 801da9c:	1dbb      	adds	r3, r7, #6
 801da9e:	801a      	strh	r2, [r3, #0]
	uint8_t pinPos=0;
 801daa0:	230f      	movs	r3, #15
 801daa2:	18fb      	adds	r3, r7, r3
 801daa4:	2200      	movs	r2, #0
 801daa6:	701a      	strb	r2, [r3, #0]
	if ( ( pinId & 0xFF00 ) != 0) { pinPos |= 0x8; }
 801daa8:	1dbb      	adds	r3, r7, #6
 801daaa:	881a      	ldrh	r2, [r3, #0]
 801daac:	23ff      	movs	r3, #255	; 0xff
 801daae:	021b      	lsls	r3, r3, #8
 801dab0:	4013      	ands	r3, r2
 801dab2:	d006      	beq.n	801dac2 <getPinNumFromPinVector+0x2e>
 801dab4:	220f      	movs	r2, #15
 801dab6:	18bb      	adds	r3, r7, r2
 801dab8:	18ba      	adds	r2, r7, r2
 801daba:	7812      	ldrb	r2, [r2, #0]
 801dabc:	2108      	movs	r1, #8
 801dabe:	430a      	orrs	r2, r1
 801dac0:	701a      	strb	r2, [r3, #0]
	if ( ( pinId & 0xF0F0 ) != 0) { pinPos |= 0x4; }
 801dac2:	1dbb      	adds	r3, r7, #6
 801dac4:	881b      	ldrh	r3, [r3, #0]
 801dac6:	4a14      	ldr	r2, [pc, #80]	; (801db18 <getPinNumFromPinVector+0x84>)
 801dac8:	4013      	ands	r3, r2
 801daca:	d006      	beq.n	801dada <getPinNumFromPinVector+0x46>
 801dacc:	220f      	movs	r2, #15
 801dace:	18bb      	adds	r3, r7, r2
 801dad0:	18ba      	adds	r2, r7, r2
 801dad2:	7812      	ldrb	r2, [r2, #0]
 801dad4:	2104      	movs	r1, #4
 801dad6:	430a      	orrs	r2, r1
 801dad8:	701a      	strb	r2, [r3, #0]
	if ( ( pinId & 0xCCCC ) != 0) { pinPos |= 0x2; }
 801dada:	1dbb      	adds	r3, r7, #6
 801dadc:	881b      	ldrh	r3, [r3, #0]
 801dade:	4a0f      	ldr	r2, [pc, #60]	; (801db1c <getPinNumFromPinVector+0x88>)
 801dae0:	4013      	ands	r3, r2
 801dae2:	d006      	beq.n	801daf2 <getPinNumFromPinVector+0x5e>
 801dae4:	220f      	movs	r2, #15
 801dae6:	18bb      	adds	r3, r7, r2
 801dae8:	18ba      	adds	r2, r7, r2
 801daea:	7812      	ldrb	r2, [r2, #0]
 801daec:	2102      	movs	r1, #2
 801daee:	430a      	orrs	r2, r1
 801daf0:	701a      	strb	r2, [r3, #0]
	if ( ( pinId & 0xAAAA ) != 0) { pinPos |= 0x1; }
 801daf2:	1dbb      	adds	r3, r7, #6
 801daf4:	881b      	ldrh	r3, [r3, #0]
 801daf6:	4a0a      	ldr	r2, [pc, #40]	; (801db20 <getPinNumFromPinVector+0x8c>)
 801daf8:	4013      	ands	r3, r2
 801dafa:	d006      	beq.n	801db0a <getPinNumFromPinVector+0x76>
 801dafc:	220f      	movs	r2, #15
 801dafe:	18bb      	adds	r3, r7, r2
 801db00:	18ba      	adds	r2, r7, r2
 801db02:	7812      	ldrb	r2, [r2, #0]
 801db04:	2101      	movs	r1, #1
 801db06:	430a      	orrs	r2, r1
 801db08:	701a      	strb	r2, [r3, #0]
	return pinPos;
 801db0a:	230f      	movs	r3, #15
 801db0c:	18fb      	adds	r3, r7, r3
 801db0e:	781b      	ldrb	r3, [r3, #0]
}
 801db10:	0018      	movs	r0, r3
 801db12:	46bd      	mov	sp, r7
 801db14:	b004      	add	sp, #16
 801db16:	bd80      	pop	{r7, pc}
 801db18:	0000f0f0 	.word	0x0000f0f0
 801db1c:	0000cccc 	.word	0x0000cccc
 801db20:	0000aaaa 	.word	0x0000aaaa

0801db24 <getIrqFromBankPin>:

/**
 * Convert a GPIO bank/pin into the corresponding ExtI line
 */
IRQn_Type getIrqFromBankPin(uint8_t bankId, uint16_t id) {
 801db24:	b5b0      	push	{r4, r5, r7, lr}
 801db26:	b084      	sub	sp, #16
 801db28:	af00      	add	r7, sp, #0
 801db2a:	0002      	movs	r2, r0
 801db2c:	1dfb      	adds	r3, r7, #7
 801db2e:	701a      	strb	r2, [r3, #0]
 801db30:	1d3b      	adds	r3, r7, #4
 801db32:	1c0a      	adds	r2, r1, #0
 801db34:	801a      	strh	r2, [r3, #0]

	uint8_t pinPos = getPinNumFromPinVector(id);
 801db36:	250f      	movs	r5, #15
 801db38:	197c      	adds	r4, r7, r5
 801db3a:	1d3b      	adds	r3, r7, #4
 801db3c:	881b      	ldrh	r3, [r3, #0]
 801db3e:	0018      	movs	r0, r3
 801db40:	f7ff ffa8 	bl	801da94 <getPinNumFromPinVector>
 801db44:	0003      	movs	r3, r0
 801db46:	7023      	strb	r3, [r4, #0]
	if ( pinPos <= 1 ) {
 801db48:	197b      	adds	r3, r7, r5
 801db4a:	781b      	ldrb	r3, [r3, #0]
 801db4c:	2b01      	cmp	r3, #1
 801db4e:	d801      	bhi.n	801db54 <getIrqFromBankPin+0x30>
		return EXTI0_1_IRQn;
 801db50:	2305      	movs	r3, #5
 801db52:	e007      	b.n	801db64 <getIrqFromBankPin+0x40>
	} else if ( pinPos <= 3 ) {
 801db54:	230f      	movs	r3, #15
 801db56:	18fb      	adds	r3, r7, r3
 801db58:	781b      	ldrb	r3, [r3, #0]
 801db5a:	2b03      	cmp	r3, #3
 801db5c:	d801      	bhi.n	801db62 <getIrqFromBankPin+0x3e>
		return EXTI2_3_IRQn;
 801db5e:	2306      	movs	r3, #6
 801db60:	e000      	b.n	801db64 <getIrqFromBankPin+0x40>
	} else {
		return EXTI4_15_IRQn;
 801db62:	2307      	movs	r3, #7
	}
}
 801db64:	0018      	movs	r0, r3
 801db66:	46bd      	mov	sp, r7
 801db68:	b004      	add	sp, #16
 801db6a:	bdb0      	pop	{r4, r5, r7, pc}

0801db6c <gpio_configure>:


void gpio_configure(uint8_t bank, uint16_t id, itsdk_gpio_type_t type ) {
 801db6c:	b590      	push	{r4, r7, lr}
 801db6e:	b085      	sub	sp, #20
 801db70:	af02      	add	r7, sp, #8
 801db72:	0004      	movs	r4, r0
 801db74:	0008      	movs	r0, r1
 801db76:	0011      	movs	r1, r2
 801db78:	1dfb      	adds	r3, r7, #7
 801db7a:	1c22      	adds	r2, r4, #0
 801db7c:	701a      	strb	r2, [r3, #0]
 801db7e:	1d3b      	adds	r3, r7, #4
 801db80:	1c02      	adds	r2, r0, #0
 801db82:	801a      	strh	r2, [r3, #0]
 801db84:	1dbb      	adds	r3, r7, #6
 801db86:	1c0a      	adds	r2, r1, #0
 801db88:	701a      	strb	r2, [r3, #0]
	gpio_configure_ext(bank, id, type, ITSDK_GPIO_SPEED_LOW, ITSDK_GPIO_ALT_NONE );
 801db8a:	1dbb      	adds	r3, r7, #6
 801db8c:	781a      	ldrb	r2, [r3, #0]
 801db8e:	1d3b      	adds	r3, r7, #4
 801db90:	8819      	ldrh	r1, [r3, #0]
 801db92:	1dfb      	adds	r3, r7, #7
 801db94:	7818      	ldrb	r0, [r3, #0]
 801db96:	2300      	movs	r3, #0
 801db98:	9300      	str	r3, [sp, #0]
 801db9a:	2300      	movs	r3, #0
 801db9c:	f000 f804 	bl	801dba8 <gpio_configure_ext>
}
 801dba0:	46c0      	nop			; (mov r8, r8)
 801dba2:	46bd      	mov	sp, r7
 801dba4:	b003      	add	sp, #12
 801dba6:	bd90      	pop	{r4, r7, pc}

0801dba8 <gpio_configure_ext>:


void gpio_configure_ext(uint8_t bank, uint16_t id, itsdk_gpio_type_t type, itsdk_gpio_speed_t speed, itsdk_gpio_alternate_t alternate ) {
 801dba8:	b5b0      	push	{r4, r5, r7, lr}
 801dbaa:	b08e      	sub	sp, #56	; 0x38
 801dbac:	af00      	add	r7, sp, #0
 801dbae:	0005      	movs	r5, r0
 801dbb0:	000c      	movs	r4, r1
 801dbb2:	0010      	movs	r0, r2
 801dbb4:	0019      	movs	r1, r3
 801dbb6:	1dfb      	adds	r3, r7, #7
 801dbb8:	1c2a      	adds	r2, r5, #0
 801dbba:	701a      	strb	r2, [r3, #0]
 801dbbc:	1d3b      	adds	r3, r7, #4
 801dbbe:	1c22      	adds	r2, r4, #0
 801dbc0:	801a      	strh	r2, [r3, #0]
 801dbc2:	1dbb      	adds	r3, r7, #6
 801dbc4:	1c02      	adds	r2, r0, #0
 801dbc6:	701a      	strb	r2, [r3, #0]
 801dbc8:	1cfb      	adds	r3, r7, #3
 801dbca:	1c0a      	adds	r2, r1, #0
 801dbcc:	701a      	strb	r2, [r3, #0]

	GPIO_InitTypeDef GPIO_InitStruct;

	switch ( bank ) {
 801dbce:	1dfb      	adds	r3, r7, #7
 801dbd0:	781b      	ldrb	r3, [r3, #0]
 801dbd2:	2b07      	cmp	r3, #7
 801dbd4:	d852      	bhi.n	801dc7c <gpio_configure_ext+0xd4>
 801dbd6:	009a      	lsls	r2, r3, #2
 801dbd8:	4bd0      	ldr	r3, [pc, #832]	; (801df1c <gpio_configure_ext+0x374>)
 801dbda:	18d3      	adds	r3, r2, r3
 801dbdc:	681b      	ldr	r3, [r3, #0]
 801dbde:	469f      	mov	pc, r3
	case __BANK_A:
		  __GPIOA_CLK_ENABLE();
 801dbe0:	4bcf      	ldr	r3, [pc, #828]	; (801df20 <gpio_configure_ext+0x378>)
 801dbe2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801dbe4:	4bce      	ldr	r3, [pc, #824]	; (801df20 <gpio_configure_ext+0x378>)
 801dbe6:	2101      	movs	r1, #1
 801dbe8:	430a      	orrs	r2, r1
 801dbea:	62da      	str	r2, [r3, #44]	; 0x2c
 801dbec:	4bcc      	ldr	r3, [pc, #816]	; (801df20 <gpio_configure_ext+0x378>)
 801dbee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801dbf0:	2201      	movs	r2, #1
 801dbf2:	4013      	ands	r3, r2
 801dbf4:	61fb      	str	r3, [r7, #28]
 801dbf6:	69fb      	ldr	r3, [r7, #28]
		  break;
 801dbf8:	e040      	b.n	801dc7c <gpio_configure_ext+0xd4>
	case __BANK_B:
		  __GPIOB_CLK_ENABLE();
 801dbfa:	4bc9      	ldr	r3, [pc, #804]	; (801df20 <gpio_configure_ext+0x378>)
 801dbfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801dbfe:	4bc8      	ldr	r3, [pc, #800]	; (801df20 <gpio_configure_ext+0x378>)
 801dc00:	2102      	movs	r1, #2
 801dc02:	430a      	orrs	r2, r1
 801dc04:	62da      	str	r2, [r3, #44]	; 0x2c
 801dc06:	4bc6      	ldr	r3, [pc, #792]	; (801df20 <gpio_configure_ext+0x378>)
 801dc08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801dc0a:	2202      	movs	r2, #2
 801dc0c:	4013      	ands	r3, r2
 801dc0e:	61bb      	str	r3, [r7, #24]
 801dc10:	69bb      	ldr	r3, [r7, #24]
		  break;
 801dc12:	e033      	b.n	801dc7c <gpio_configure_ext+0xd4>
	case __BANK_C:
		  __GPIOC_CLK_ENABLE();
 801dc14:	4bc2      	ldr	r3, [pc, #776]	; (801df20 <gpio_configure_ext+0x378>)
 801dc16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801dc18:	4bc1      	ldr	r3, [pc, #772]	; (801df20 <gpio_configure_ext+0x378>)
 801dc1a:	2104      	movs	r1, #4
 801dc1c:	430a      	orrs	r2, r1
 801dc1e:	62da      	str	r2, [r3, #44]	; 0x2c
 801dc20:	4bbf      	ldr	r3, [pc, #764]	; (801df20 <gpio_configure_ext+0x378>)
 801dc22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801dc24:	2204      	movs	r2, #4
 801dc26:	4013      	ands	r3, r2
 801dc28:	617b      	str	r3, [r7, #20]
 801dc2a:	697b      	ldr	r3, [r7, #20]
		  break;
 801dc2c:	e026      	b.n	801dc7c <gpio_configure_ext+0xd4>
    #if ITSDK_DEVICE == __DEVICE_STM32L072XX || ITSDK_DEVICE == __DEVICE_STM32L053R8
	case __BANK_D:
		  __GPIOD_CLK_ENABLE();
 801dc2e:	4bbc      	ldr	r3, [pc, #752]	; (801df20 <gpio_configure_ext+0x378>)
 801dc30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801dc32:	4bbb      	ldr	r3, [pc, #748]	; (801df20 <gpio_configure_ext+0x378>)
 801dc34:	2108      	movs	r1, #8
 801dc36:	430a      	orrs	r2, r1
 801dc38:	62da      	str	r2, [r3, #44]	; 0x2c
 801dc3a:	4bb9      	ldr	r3, [pc, #740]	; (801df20 <gpio_configure_ext+0x378>)
 801dc3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801dc3e:	2208      	movs	r2, #8
 801dc40:	4013      	ands	r3, r2
 801dc42:	613b      	str	r3, [r7, #16]
 801dc44:	693b      	ldr	r3, [r7, #16]
		  break;
 801dc46:	e019      	b.n	801dc7c <gpio_configure_ext+0xd4>
	#endif
	#if ITSDK_DEVICE == __DEVICE_STM32L072XX
	case __BANK_E:
		  __GPIOE_CLK_ENABLE();
 801dc48:	4bb5      	ldr	r3, [pc, #724]	; (801df20 <gpio_configure_ext+0x378>)
 801dc4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801dc4c:	4bb4      	ldr	r3, [pc, #720]	; (801df20 <gpio_configure_ext+0x378>)
 801dc4e:	2110      	movs	r1, #16
 801dc50:	430a      	orrs	r2, r1
 801dc52:	62da      	str	r2, [r3, #44]	; 0x2c
 801dc54:	4bb2      	ldr	r3, [pc, #712]	; (801df20 <gpio_configure_ext+0x378>)
 801dc56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801dc58:	2210      	movs	r2, #16
 801dc5a:	4013      	ands	r3, r2
 801dc5c:	60fb      	str	r3, [r7, #12]
 801dc5e:	68fb      	ldr	r3, [r7, #12]
		  break;
 801dc60:	e00c      	b.n	801dc7c <gpio_configure_ext+0xd4>
    #endif
	#if ITSDK_DEVICE == __DEVICE_STM32L072XX
	case __BANK_H:
		  __GPIOH_CLK_ENABLE();
 801dc62:	4baf      	ldr	r3, [pc, #700]	; (801df20 <gpio_configure_ext+0x378>)
 801dc64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801dc66:	4bae      	ldr	r3, [pc, #696]	; (801df20 <gpio_configure_ext+0x378>)
 801dc68:	2180      	movs	r1, #128	; 0x80
 801dc6a:	430a      	orrs	r2, r1
 801dc6c:	62da      	str	r2, [r3, #44]	; 0x2c
 801dc6e:	4bac      	ldr	r3, [pc, #688]	; (801df20 <gpio_configure_ext+0x378>)
 801dc70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801dc72:	2280      	movs	r2, #128	; 0x80
 801dc74:	4013      	ands	r3, r2
 801dc76:	60bb      	str	r3, [r7, #8]
 801dc78:	68bb      	ldr	r3, [r7, #8]
		  break;
 801dc7a:	46c0      	nop			; (mov r8, r8)
	#endif
	}

	GPIO_InitStruct.Pin = id;
 801dc7c:	1d3b      	adds	r3, r7, #4
 801dc7e:	881a      	ldrh	r2, [r3, #0]
 801dc80:	2320      	movs	r3, #32
 801dc82:	18fb      	adds	r3, r7, r3
 801dc84:	601a      	str	r2, [r3, #0]
	switch ( speed ) {
 801dc86:	1cfb      	adds	r3, r7, #3
 801dc88:	781b      	ldrb	r3, [r3, #0]
 801dc8a:	2b00      	cmp	r3, #0
 801dc8c:	d002      	beq.n	801dc94 <gpio_configure_ext+0xec>
 801dc8e:	2b01      	cmp	r3, #1
 801dc90:	d005      	beq.n	801dc9e <gpio_configure_ext+0xf6>
 801dc92:	e009      	b.n	801dca8 <gpio_configure_ext+0x100>
	case ITSDK_GPIO_SPEED_LOW:
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801dc94:	2320      	movs	r3, #32
 801dc96:	18fb      	adds	r3, r7, r3
 801dc98:	2200      	movs	r2, #0
 801dc9a:	60da      	str	r2, [r3, #12]
		break;
 801dc9c:	e004      	b.n	801dca8 <gpio_configure_ext+0x100>
	case ITSDK_GPIO_SPEED_HIGH:
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801dc9e:	2320      	movs	r3, #32
 801dca0:	18fb      	adds	r3, r7, r3
 801dca2:	2203      	movs	r2, #3
 801dca4:	60da      	str	r2, [r3, #12]
		break;
 801dca6:	46c0      	nop			; (mov r8, r8)

	}

	switch (type) {
 801dca8:	1dbb      	adds	r3, r7, #6
 801dcaa:	781b      	ldrb	r3, [r3, #0]
 801dcac:	2b13      	cmp	r3, #19
 801dcae:	d900      	bls.n	801dcb2 <gpio_configure_ext+0x10a>
 801dcb0:	e0a4      	b.n	801ddfc <gpio_configure_ext+0x254>
 801dcb2:	009a      	lsls	r2, r3, #2
 801dcb4:	4b9b      	ldr	r3, [pc, #620]	; (801df24 <gpio_configure_ext+0x37c>)
 801dcb6:	18d3      	adds	r3, r2, r3
 801dcb8:	681b      	ldr	r3, [r3, #0]
 801dcba:	469f      	mov	pc, r3

	case GPIO_OUTPUT_PP:
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801dcbc:	2120      	movs	r1, #32
 801dcbe:	187b      	adds	r3, r7, r1
 801dcc0:	2201      	movs	r2, #1
 801dcc2:	605a      	str	r2, [r3, #4]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 801dcc4:	187b      	adds	r3, r7, r1
 801dcc6:	2200      	movs	r2, #0
 801dcc8:	609a      	str	r2, [r3, #8]
		break;
 801dcca:	e097      	b.n	801ddfc <gpio_configure_ext+0x254>

	case GPIO_OUTPUT_PULLUP:
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801dccc:	2120      	movs	r1, #32
 801dcce:	187b      	adds	r3, r7, r1
 801dcd0:	2201      	movs	r2, #1
 801dcd2:	605a      	str	r2, [r3, #4]
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 801dcd4:	187b      	adds	r3, r7, r1
 801dcd6:	2201      	movs	r2, #1
 801dcd8:	609a      	str	r2, [r3, #8]
		break;
 801dcda:	e08f      	b.n	801ddfc <gpio_configure_ext+0x254>

	case GPIO_OUTPUT_PULLDOWN:
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801dcdc:	2120      	movs	r1, #32
 801dcde:	187b      	adds	r3, r7, r1
 801dce0:	2201      	movs	r2, #1
 801dce2:	605a      	str	r2, [r3, #4]
		GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 801dce4:	187b      	adds	r3, r7, r1
 801dce6:	2202      	movs	r2, #2
 801dce8:	609a      	str	r2, [r3, #8]
		break;
 801dcea:	e087      	b.n	801ddfc <gpio_configure_ext+0x254>

	case GPIO_OUTPUT_OD:
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 801dcec:	2120      	movs	r1, #32
 801dcee:	187b      	adds	r3, r7, r1
 801dcf0:	2211      	movs	r2, #17
 801dcf2:	605a      	str	r2, [r3, #4]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 801dcf4:	187b      	adds	r3, r7, r1
 801dcf6:	2200      	movs	r2, #0
 801dcf8:	609a      	str	r2, [r3, #8]
		break;
 801dcfa:	e07f      	b.n	801ddfc <gpio_configure_ext+0x254>

	case GPIO_INPUT:
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801dcfc:	2120      	movs	r1, #32
 801dcfe:	187b      	adds	r3, r7, r1
 801dd00:	2200      	movs	r2, #0
 801dd02:	605a      	str	r2, [r3, #4]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 801dd04:	187b      	adds	r3, r7, r1
 801dd06:	2200      	movs	r2, #0
 801dd08:	609a      	str	r2, [r3, #8]
		break;
 801dd0a:	e077      	b.n	801ddfc <gpio_configure_ext+0x254>

	case GPIO_INPUT_PULLUP:
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801dd0c:	2120      	movs	r1, #32
 801dd0e:	187b      	adds	r3, r7, r1
 801dd10:	2200      	movs	r2, #0
 801dd12:	605a      	str	r2, [r3, #4]
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 801dd14:	187b      	adds	r3, r7, r1
 801dd16:	2201      	movs	r2, #1
 801dd18:	609a      	str	r2, [r3, #8]
		break;
 801dd1a:	e06f      	b.n	801ddfc <gpio_configure_ext+0x254>

	case GPIO_INPUT_PULLDOWN:
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801dd1c:	2120      	movs	r1, #32
 801dd1e:	187b      	adds	r3, r7, r1
 801dd20:	2200      	movs	r2, #0
 801dd22:	605a      	str	r2, [r3, #4]
		GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 801dd24:	187b      	adds	r3, r7, r1
 801dd26:	2202      	movs	r2, #2
 801dd28:	609a      	str	r2, [r3, #8]
		break;
 801dd2a:	e067      	b.n	801ddfc <gpio_configure_ext+0x254>

	case GPIO_INTERRUPT_RISING:
	    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 801dd2c:	2120      	movs	r1, #32
 801dd2e:	187b      	adds	r3, r7, r1
 801dd30:	4a7d      	ldr	r2, [pc, #500]	; (801df28 <gpio_configure_ext+0x380>)
 801dd32:	605a      	str	r2, [r3, #4]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801dd34:	187b      	adds	r3, r7, r1
 801dd36:	2200      	movs	r2, #0
 801dd38:	609a      	str	r2, [r3, #8]
		break;
 801dd3a:	e05f      	b.n	801ddfc <gpio_configure_ext+0x254>

	case GPIO_INTERRUPT_RISING_PULLDWN:
	    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 801dd3c:	2120      	movs	r1, #32
 801dd3e:	187b      	adds	r3, r7, r1
 801dd40:	4a79      	ldr	r2, [pc, #484]	; (801df28 <gpio_configure_ext+0x380>)
 801dd42:	605a      	str	r2, [r3, #4]
	    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 801dd44:	187b      	adds	r3, r7, r1
 801dd46:	2202      	movs	r2, #2
 801dd48:	609a      	str	r2, [r3, #8]
		break;
 801dd4a:	e057      	b.n	801ddfc <gpio_configure_ext+0x254>

	case GPIO_INTERRUPT_RISING_PULLUP:
	    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 801dd4c:	2120      	movs	r1, #32
 801dd4e:	187b      	adds	r3, r7, r1
 801dd50:	4a75      	ldr	r2, [pc, #468]	; (801df28 <gpio_configure_ext+0x380>)
 801dd52:	605a      	str	r2, [r3, #4]
	    GPIO_InitStruct.Pull = GPIO_PULLUP;
 801dd54:	187b      	adds	r3, r7, r1
 801dd56:	2201      	movs	r2, #1
 801dd58:	609a      	str	r2, [r3, #8]
		break;
 801dd5a:	e04f      	b.n	801ddfc <gpio_configure_ext+0x254>

	case GPIO_INTERRUPT_FALLING:
	    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 801dd5c:	2120      	movs	r1, #32
 801dd5e:	187b      	adds	r3, r7, r1
 801dd60:	4a72      	ldr	r2, [pc, #456]	; (801df2c <gpio_configure_ext+0x384>)
 801dd62:	605a      	str	r2, [r3, #4]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801dd64:	187b      	adds	r3, r7, r1
 801dd66:	2200      	movs	r2, #0
 801dd68:	609a      	str	r2, [r3, #8]
		break;
 801dd6a:	e047      	b.n	801ddfc <gpio_configure_ext+0x254>

	case GPIO_INTERRUPT_FALLING_PULLUP:
	    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 801dd6c:	2120      	movs	r1, #32
 801dd6e:	187b      	adds	r3, r7, r1
 801dd70:	4a6e      	ldr	r2, [pc, #440]	; (801df2c <gpio_configure_ext+0x384>)
 801dd72:	605a      	str	r2, [r3, #4]
	    GPIO_InitStruct.Pull = GPIO_PULLUP;
 801dd74:	187b      	adds	r3, r7, r1
 801dd76:	2201      	movs	r2, #1
 801dd78:	609a      	str	r2, [r3, #8]
		break;
 801dd7a:	e03f      	b.n	801ddfc <gpio_configure_ext+0x254>

	case GPIO_INTERRUPT_FALLING_PULLDWN:
	    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 801dd7c:	2120      	movs	r1, #32
 801dd7e:	187b      	adds	r3, r7, r1
 801dd80:	4a6a      	ldr	r2, [pc, #424]	; (801df2c <gpio_configure_ext+0x384>)
 801dd82:	605a      	str	r2, [r3, #4]
	    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 801dd84:	187b      	adds	r3, r7, r1
 801dd86:	2202      	movs	r2, #2
 801dd88:	609a      	str	r2, [r3, #8]
		break;
 801dd8a:	e037      	b.n	801ddfc <gpio_configure_ext+0x254>

	case GPIO_INTERRUPT_ANY:
	    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 801dd8c:	2120      	movs	r1, #32
 801dd8e:	187b      	adds	r3, r7, r1
 801dd90:	4a67      	ldr	r2, [pc, #412]	; (801df30 <gpio_configure_ext+0x388>)
 801dd92:	605a      	str	r2, [r3, #4]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801dd94:	187b      	adds	r3, r7, r1
 801dd96:	2200      	movs	r2, #0
 801dd98:	609a      	str	r2, [r3, #8]
		break;
 801dd9a:	e02f      	b.n	801ddfc <gpio_configure_ext+0x254>

	case GPIO_ANALOG:
	    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 801dd9c:	2120      	movs	r1, #32
 801dd9e:	187b      	adds	r3, r7, r1
 801dda0:	2203      	movs	r2, #3
 801dda2:	605a      	str	r2, [r3, #4]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801dda4:	187b      	adds	r3, r7, r1
 801dda6:	2200      	movs	r2, #0
 801dda8:	609a      	str	r2, [r3, #8]
		break;
 801ddaa:	e027      	b.n	801ddfc <gpio_configure_ext+0x254>

	case GPIO_OFF:
	    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 801ddac:	2120      	movs	r1, #32
 801ddae:	187b      	adds	r3, r7, r1
 801ddb0:	2203      	movs	r2, #3
 801ddb2:	605a      	str	r2, [r3, #4]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801ddb4:	187b      	adds	r3, r7, r1
 801ddb6:	2200      	movs	r2, #0
 801ddb8:	609a      	str	r2, [r3, #8]
		break;
 801ddba:	e01f      	b.n	801ddfc <gpio_configure_ext+0x254>

	case GPIO_ALTERNATE_PP_NOPULL:
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801ddbc:	2120      	movs	r1, #32
 801ddbe:	187b      	adds	r3, r7, r1
 801ddc0:	2202      	movs	r2, #2
 801ddc2:	605a      	str	r2, [r3, #4]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801ddc4:	187b      	adds	r3, r7, r1
 801ddc6:	2200      	movs	r2, #0
 801ddc8:	609a      	str	r2, [r3, #8]
	    break;
 801ddca:	e017      	b.n	801ddfc <gpio_configure_ext+0x254>

	case GPIO_ALTERNATE_PP_PULLUP:
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801ddcc:	2120      	movs	r1, #32
 801ddce:	187b      	adds	r3, r7, r1
 801ddd0:	2202      	movs	r2, #2
 801ddd2:	605a      	str	r2, [r3, #4]
	    GPIO_InitStruct.Pull = GPIO_PULLUP;
 801ddd4:	187b      	adds	r3, r7, r1
 801ddd6:	2201      	movs	r2, #1
 801ddd8:	609a      	str	r2, [r3, #8]
	    break;
 801ddda:	e00f      	b.n	801ddfc <gpio_configure_ext+0x254>

	case GPIO_ALTERNATE_PP_PULLDOWN:
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801dddc:	2120      	movs	r1, #32
 801ddde:	187b      	adds	r3, r7, r1
 801dde0:	2202      	movs	r2, #2
 801dde2:	605a      	str	r2, [r3, #4]
	    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 801dde4:	187b      	adds	r3, r7, r1
 801dde6:	2202      	movs	r2, #2
 801dde8:	609a      	str	r2, [r3, #8]
	    break;
 801ddea:	e007      	b.n	801ddfc <gpio_configure_ext+0x254>

	case GPIO_ALTERNATE_OPENDRAIN:
		GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 801ddec:	2120      	movs	r1, #32
 801ddee:	187b      	adds	r3, r7, r1
 801ddf0:	2212      	movs	r2, #18
 801ddf2:	605a      	str	r2, [r3, #4]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801ddf4:	187b      	adds	r3, r7, r1
 801ddf6:	2200      	movs	r2, #0
 801ddf8:	609a      	str	r2, [r3, #8]
	    break;
 801ddfa:	46c0      	nop			; (mov r8, r8)

	}
	int err=0;
 801ddfc:	2300      	movs	r3, #0
 801ddfe:	637b      	str	r3, [r7, #52]	; 0x34
	switch (type) {
 801de00:	1dbb      	adds	r3, r7, #6
 801de02:	781b      	ldrb	r3, [r3, #0]
 801de04:	3b10      	subs	r3, #16
 801de06:	2b03      	cmp	r3, #3
 801de08:	d900      	bls.n	801de0c <gpio_configure_ext+0x264>
 801de0a:	e0a1      	b.n	801df50 <gpio_configure_ext+0x3a8>
	case GPIO_ALTERNATE_PP_NOPULL:
	case GPIO_ALTERNATE_PP_PULLUP:
	case GPIO_ALTERNATE_PP_PULLDOWN:
	case GPIO_ALTERNATE_OPENDRAIN:
		switch (alternate) {
 801de0c:	2348      	movs	r3, #72	; 0x48
 801de0e:	18fb      	adds	r3, r7, r3
 801de10:	781b      	ldrb	r3, [r3, #0]
 801de12:	2b06      	cmp	r3, #6
 801de14:	d900      	bls.n	801de18 <gpio_configure_ext+0x270>
 801de16:	e092      	b.n	801df3e <gpio_configure_ext+0x396>
 801de18:	009a      	lsls	r2, r3, #2
 801de1a:	4b46      	ldr	r3, [pc, #280]	; (801df34 <gpio_configure_ext+0x38c>)
 801de1c:	18d3      	adds	r3, r2, r3
 801de1e:	681b      	ldr	r3, [r3, #0]
 801de20:	469f      	mov	pc, r3
		case ITSDK_GPIO_ALT_TIMER2_TR:
		#if ITSDK_DEVICE == __DEVICE_STM32L072XX ||  ITSDK_DEVICE == __DEVICE_STM32L052T8
			if ( bank == __BANK_A && id == __LP_GPIO_15 ) GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 801de22:	1dfb      	adds	r3, r7, #7
 801de24:	781b      	ldrb	r3, [r3, #0]
 801de26:	2b00      	cmp	r3, #0
 801de28:	d10a      	bne.n	801de40 <gpio_configure_ext+0x298>
 801de2a:	1d3b      	adds	r3, r7, #4
 801de2c:	881a      	ldrh	r2, [r3, #0]
 801de2e:	2380      	movs	r3, #128	; 0x80
 801de30:	021b      	lsls	r3, r3, #8
 801de32:	429a      	cmp	r2, r3
 801de34:	d104      	bne.n	801de40 <gpio_configure_ext+0x298>
 801de36:	2320      	movs	r3, #32
 801de38:	18fb      	adds	r3, r7, r3
 801de3a:	2202      	movs	r2, #2
 801de3c:	611a      	str	r2, [r3, #16]
 801de3e:	e01c      	b.n	801de7a <gpio_configure_ext+0x2d2>
			else if ( bank == __BANK_A && id == __LP_GPIO_5 ) GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 801de40:	1dfb      	adds	r3, r7, #7
 801de42:	781b      	ldrb	r3, [r3, #0]
 801de44:	2b00      	cmp	r3, #0
 801de46:	d108      	bne.n	801de5a <gpio_configure_ext+0x2b2>
 801de48:	1d3b      	adds	r3, r7, #4
 801de4a:	881b      	ldrh	r3, [r3, #0]
 801de4c:	2b20      	cmp	r3, #32
 801de4e:	d104      	bne.n	801de5a <gpio_configure_ext+0x2b2>
 801de50:	2320      	movs	r3, #32
 801de52:	18fb      	adds	r3, r7, r3
 801de54:	2202      	movs	r2, #2
 801de56:	611a      	str	r2, [r3, #16]
 801de58:	e00f      	b.n	801de7a <gpio_configure_ext+0x2d2>
			else if ( bank == __BANK_A && id == __LP_GPIO_0 ) GPIO_InitStruct.Alternate = GPIO_AF5_TIM2;
 801de5a:	1dfb      	adds	r3, r7, #7
 801de5c:	781b      	ldrb	r3, [r3, #0]
 801de5e:	2b00      	cmp	r3, #0
 801de60:	d108      	bne.n	801de74 <gpio_configure_ext+0x2cc>
 801de62:	1d3b      	adds	r3, r7, #4
 801de64:	881b      	ldrh	r3, [r3, #0]
 801de66:	2b01      	cmp	r3, #1
 801de68:	d104      	bne.n	801de74 <gpio_configure_ext+0x2cc>
 801de6a:	2320      	movs	r3, #32
 801de6c:	18fb      	adds	r3, r7, r3
 801de6e:	2205      	movs	r2, #5
 801de70:	611a      	str	r2, [r3, #16]
 801de72:	e002      	b.n	801de7a <gpio_configure_ext+0x2d2>
			else err=1;
 801de74:	2301      	movs	r3, #1
 801de76:	637b      	str	r3, [r7, #52]	; 0x34
		#else
		  #warning This device will not accept alternate GPIO configuration: code is missing
		#endif
			break;
 801de78:	e062      	b.n	801df40 <gpio_configure_ext+0x398>
 801de7a:	e061      	b.n	801df40 <gpio_configure_ext+0x398>
		case ITSDK_GPIO_ALT_TIMER2_C1:
		#if ITSDK_DEVICE == __DEVICE_STM32L072XX ||  ITSDK_DEVICE == __DEVICE_STM32L052T8
			if ( bank == __BANK_A && id == __LP_GPIO_15 ) GPIO_InitStruct.Alternate = GPIO_AF5_TIM2;
 801de7c:	1dfb      	adds	r3, r7, #7
 801de7e:	781b      	ldrb	r3, [r3, #0]
 801de80:	2b00      	cmp	r3, #0
 801de82:	d10a      	bne.n	801de9a <gpio_configure_ext+0x2f2>
 801de84:	1d3b      	adds	r3, r7, #4
 801de86:	881a      	ldrh	r2, [r3, #0]
 801de88:	2380      	movs	r3, #128	; 0x80
 801de8a:	021b      	lsls	r3, r3, #8
 801de8c:	429a      	cmp	r2, r3
 801de8e:	d104      	bne.n	801de9a <gpio_configure_ext+0x2f2>
 801de90:	2320      	movs	r3, #32
 801de92:	18fb      	adds	r3, r7, r3
 801de94:	2205      	movs	r2, #5
 801de96:	611a      	str	r2, [r3, #16]
 801de98:	e01c      	b.n	801ded4 <gpio_configure_ext+0x32c>
			else if ( bank == __BANK_A && id == __LP_GPIO_5 ) GPIO_InitStruct.Alternate = GPIO_AF5_TIM2;
 801de9a:	1dfb      	adds	r3, r7, #7
 801de9c:	781b      	ldrb	r3, [r3, #0]
 801de9e:	2b00      	cmp	r3, #0
 801dea0:	d108      	bne.n	801deb4 <gpio_configure_ext+0x30c>
 801dea2:	1d3b      	adds	r3, r7, #4
 801dea4:	881b      	ldrh	r3, [r3, #0]
 801dea6:	2b20      	cmp	r3, #32
 801dea8:	d104      	bne.n	801deb4 <gpio_configure_ext+0x30c>
 801deaa:	2320      	movs	r3, #32
 801deac:	18fb      	adds	r3, r7, r3
 801deae:	2205      	movs	r2, #5
 801deb0:	611a      	str	r2, [r3, #16]
 801deb2:	e00f      	b.n	801ded4 <gpio_configure_ext+0x32c>
			else if ( bank == __BANK_A && id == __LP_GPIO_0 ) GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 801deb4:	1dfb      	adds	r3, r7, #7
 801deb6:	781b      	ldrb	r3, [r3, #0]
 801deb8:	2b00      	cmp	r3, #0
 801deba:	d108      	bne.n	801dece <gpio_configure_ext+0x326>
 801debc:	1d3b      	adds	r3, r7, #4
 801debe:	881b      	ldrh	r3, [r3, #0]
 801dec0:	2b01      	cmp	r3, #1
 801dec2:	d104      	bne.n	801dece <gpio_configure_ext+0x326>
 801dec4:	2320      	movs	r3, #32
 801dec6:	18fb      	adds	r3, r7, r3
 801dec8:	2202      	movs	r2, #2
 801deca:	611a      	str	r2, [r3, #16]
 801decc:	e002      	b.n	801ded4 <gpio_configure_ext+0x32c>
			else err=1;
 801dece:	2301      	movs	r3, #1
 801ded0:	637b      	str	r3, [r7, #52]	; 0x34
		#endif
			break;
 801ded2:	e035      	b.n	801df40 <gpio_configure_ext+0x398>
 801ded4:	e034      	b.n	801df40 <gpio_configure_ext+0x398>
		case ITSDK_GPIO_ALT_SPI1_SCLK:
			#if ITSDK_DEVICE == __DEVICE_STM32L072XX
				if ( bank == __BANK_A && id == __LP_GPIO_5 ) GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 801ded6:	1dfb      	adds	r3, r7, #7
 801ded8:	781b      	ldrb	r3, [r3, #0]
 801deda:	2b00      	cmp	r3, #0
 801dedc:	d108      	bne.n	801def0 <gpio_configure_ext+0x348>
 801dede:	1d3b      	adds	r3, r7, #4
 801dee0:	881b      	ldrh	r3, [r3, #0]
 801dee2:	2b20      	cmp	r3, #32
 801dee4:	d104      	bne.n	801def0 <gpio_configure_ext+0x348>
 801dee6:	2320      	movs	r3, #32
 801dee8:	18fb      	adds	r3, r7, r3
 801deea:	2200      	movs	r2, #0
 801deec:	611a      	str	r2, [r3, #16]
			#elif ITSDK_DEVICE == __DEVICE_STM32L052T8
				if ( bank == __BANK_A && id == __LP_GPIO_5 ) GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
				else if ( bank == __BANK_B && id == __LP_GPIO_3 ) GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
				else err=1;
			#endif
			break;
 801deee:	e027      	b.n	801df40 <gpio_configure_ext+0x398>
				else err=1;
 801def0:	2301      	movs	r3, #1
 801def2:	637b      	str	r3, [r7, #52]	; 0x34
			break;
 801def4:	e024      	b.n	801df40 <gpio_configure_ext+0x398>
		case ITSDK_GPIO_ALT_SPI1_MOSI:
			#if ITSDK_DEVICE == __DEVICE_STM32L072XX
				if ( bank == __BANK_B && id == __LP_GPIO_5 ) GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 801def6:	1dfb      	adds	r3, r7, #7
 801def8:	781b      	ldrb	r3, [r3, #0]
 801defa:	2b01      	cmp	r3, #1
 801defc:	d108      	bne.n	801df10 <gpio_configure_ext+0x368>
 801defe:	1d3b      	adds	r3, r7, #4
 801df00:	881b      	ldrh	r3, [r3, #0]
 801df02:	2b20      	cmp	r3, #32
 801df04:	d104      	bne.n	801df10 <gpio_configure_ext+0x368>
 801df06:	2320      	movs	r3, #32
 801df08:	18fb      	adds	r3, r7, r3
 801df0a:	2200      	movs	r2, #0
 801df0c:	611a      	str	r2, [r3, #16]
				if ( bank == __BANK_A && id == __LP_GPIO_7 ) GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
				else if ( bank == __BANK_A && id == __LP_GPIO_12 ) GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
				else if ( bank == __BANK_B && id == __LP_GPIO_5 ) GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
				else err=1;
			#endif
			break;
 801df0e:	e017      	b.n	801df40 <gpio_configure_ext+0x398>
				else err=1;
 801df10:	2301      	movs	r3, #1
 801df12:	637b      	str	r3, [r7, #52]	; 0x34
			break;
 801df14:	e014      	b.n	801df40 <gpio_configure_ext+0x398>
		case ITSDK_GPIO_ALT_SPI1_MISO:
			#if ITSDK_DEVICE == __DEVICE_STM32L072XX
				err=1;
 801df16:	2301      	movs	r3, #1
 801df18:	637b      	str	r3, [r7, #52]	; 0x34
				if ( bank == __BANK_A && id == __LP_GPIO_11 ) GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
				else if( bank == __BANK_A && id == __LP_GPIO_6 ) GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
				else if( bank == __BANK_B && id == __LP_GPIO_4 ) GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
				else err=1;
			#endif
			break;
 801df1a:	e011      	b.n	801df40 <gpio_configure_ext+0x398>
 801df1c:	08022378 	.word	0x08022378
 801df20:	40021000 	.word	0x40021000
 801df24:	08022398 	.word	0x08022398
 801df28:	10110000 	.word	0x10110000
 801df2c:	10210000 	.word	0x10210000
 801df30:	10310000 	.word	0x10310000
 801df34:	080223e8 	.word	0x080223e8
		case ITSDK_GPIO_ALT_SPI1_NSS:
			#if ITSDK_DEVICE == __DEVICE_STM32L072XX
				err=1;
 801df38:	2301      	movs	r3, #1
 801df3a:	637b      	str	r3, [r7, #52]	; 0x34
			#elif ITSDK_DEVICE == __DEVICE_STM32L052T8
				if ( bank == __BANK_A && id == __LP_GPIO_4 ) GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
				else if( bank == __BANK_A && id == __LP_GPIO_15 ) GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
				else err=1;
			#endif
			break;
 801df3c:	e000      	b.n	801df40 <gpio_configure_ext+0x398>
		default:
		case ITSDK_GPIO_ALT_NONE:
			break;
 801df3e:	46c0      	nop			; (mov r8, r8)
		}
		if (err>0) {
 801df40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801df42:	2b00      	cmp	r3, #0
 801df44:	dd06      	ble.n	801df54 <gpio_configure_ext+0x3ac>
			log_error("Gpio - invalid alternate\r\n");
 801df46:	4b0c      	ldr	r3, [pc, #48]	; (801df78 <gpio_configure_ext+0x3d0>)
 801df48:	0018      	movs	r0, r3
 801df4a:	f7fe f893 	bl	801c074 <log_error>
		}
		break;
 801df4e:	e001      	b.n	801df54 <gpio_configure_ext+0x3ac>
	default:
		break;
 801df50:	46c0      	nop			; (mov r8, r8)
 801df52:	e000      	b.n	801df56 <gpio_configure_ext+0x3ae>
		break;
 801df54:	46c0      	nop			; (mov r8, r8)
	}


	HAL_GPIO_Init(getPortFromBankId(bank), &GPIO_InitStruct);
 801df56:	1dfb      	adds	r3, r7, #7
 801df58:	781b      	ldrb	r3, [r3, #0]
 801df5a:	0018      	movs	r0, r3
 801df5c:	f7ff fd62 	bl	801da24 <getPortFromBankId>
 801df60:	0002      	movs	r2, r0
 801df62:	2320      	movs	r3, #32
 801df64:	18fb      	adds	r3, r7, r3
 801df66:	0019      	movs	r1, r3
 801df68:	0010      	movs	r0, r2
 801df6a:	f7e6 fb4f 	bl	800460c <HAL_GPIO_Init>

}
 801df6e:	46c0      	nop			; (mov r8, r8)
 801df70:	46bd      	mov	sp, r7
 801df72:	b00e      	add	sp, #56	; 0x38
 801df74:	bdb0      	pop	{r4, r5, r7, pc}
 801df76:	46c0      	nop			; (mov r8, r8)
 801df78:	080212c4 	.word	0x080212c4

0801df7c <gpio_set>:

void gpio_set(uint8_t bank, uint16_t id) {
 801df7c:	b580      	push	{r7, lr}
 801df7e:	b082      	sub	sp, #8
 801df80:	af00      	add	r7, sp, #0
 801df82:	0002      	movs	r2, r0
 801df84:	1dfb      	adds	r3, r7, #7
 801df86:	701a      	strb	r2, [r3, #0]
 801df88:	1d3b      	adds	r3, r7, #4
 801df8a:	1c0a      	adds	r2, r1, #0
 801df8c:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(getPortFromBankId(bank), id,GPIO_PIN_SET);
 801df8e:	1dfb      	adds	r3, r7, #7
 801df90:	781b      	ldrb	r3, [r3, #0]
 801df92:	0018      	movs	r0, r3
 801df94:	f7ff fd46 	bl	801da24 <getPortFromBankId>
 801df98:	1d3b      	adds	r3, r7, #4
 801df9a:	881b      	ldrh	r3, [r3, #0]
 801df9c:	2201      	movs	r2, #1
 801df9e:	0019      	movs	r1, r3
 801dfa0:	f7e6 fcb2 	bl	8004908 <HAL_GPIO_WritePin>
}
 801dfa4:	46c0      	nop			; (mov r8, r8)
 801dfa6:	46bd      	mov	sp, r7
 801dfa8:	b002      	add	sp, #8
 801dfaa:	bd80      	pop	{r7, pc}

0801dfac <gpio_reset>:

void gpio_reset(uint8_t bank, uint16_t id) {
 801dfac:	b580      	push	{r7, lr}
 801dfae:	b082      	sub	sp, #8
 801dfb0:	af00      	add	r7, sp, #0
 801dfb2:	0002      	movs	r2, r0
 801dfb4:	1dfb      	adds	r3, r7, #7
 801dfb6:	701a      	strb	r2, [r3, #0]
 801dfb8:	1d3b      	adds	r3, r7, #4
 801dfba:	1c0a      	adds	r2, r1, #0
 801dfbc:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(getPortFromBankId(bank), id,GPIO_PIN_RESET);
 801dfbe:	1dfb      	adds	r3, r7, #7
 801dfc0:	781b      	ldrb	r3, [r3, #0]
 801dfc2:	0018      	movs	r0, r3
 801dfc4:	f7ff fd2e 	bl	801da24 <getPortFromBankId>
 801dfc8:	1d3b      	adds	r3, r7, #4
 801dfca:	881b      	ldrh	r3, [r3, #0]
 801dfcc:	2200      	movs	r2, #0
 801dfce:	0019      	movs	r1, r3
 801dfd0:	f7e6 fc9a 	bl	8004908 <HAL_GPIO_WritePin>
}
 801dfd4:	46c0      	nop			; (mov r8, r8)
 801dfd6:	46bd      	mov	sp, r7
 801dfd8:	b002      	add	sp, #8
 801dfda:	bd80      	pop	{r7, pc}

0801dfdc <gpio_interruptEnable>:
uint8_t gpio_read(uint8_t bank, uint16_t id) {
	return HAL_GPIO_ReadPin(getPortFromBankId(bank), id);
}


void gpio_interruptEnable(uint8_t bank, uint16_t id) {
 801dfdc:	b580      	push	{r7, lr}
 801dfde:	b082      	sub	sp, #8
 801dfe0:	af00      	add	r7, sp, #0
 801dfe2:	0002      	movs	r2, r0
 801dfe4:	1dfb      	adds	r3, r7, #7
 801dfe6:	701a      	strb	r2, [r3, #0]
 801dfe8:	1d3b      	adds	r3, r7, #4
 801dfea:	1c0a      	adds	r2, r1, #0
 801dfec:	801a      	strh	r2, [r3, #0]
	HAL_NVIC_EnableIRQ(getIrqFromBankPin(bank,id));
 801dfee:	1d3b      	adds	r3, r7, #4
 801dff0:	881a      	ldrh	r2, [r3, #0]
 801dff2:	1dfb      	adds	r3, r7, #7
 801dff4:	781b      	ldrb	r3, [r3, #0]
 801dff6:	0011      	movs	r1, r2
 801dff8:	0018      	movs	r0, r3
 801dffa:	f7ff fd93 	bl	801db24 <getIrqFromBankPin>
 801dffe:	0003      	movs	r3, r0
 801e000:	0018      	movs	r0, r3
 801e002:	f7e6 fa8e 	bl	8004522 <HAL_NVIC_EnableIRQ>
}
 801e006:	46c0      	nop			; (mov r8, r8)
 801e008:	46bd      	mov	sp, r7
 801e00a:	b002      	add	sp, #8
 801e00c:	bd80      	pop	{r7, pc}

0801e00e <gpio_interruptDisableAll>:

void gpio_interruptDisable(uint8_t bank, uint16_t id) {
	HAL_NVIC_DisableIRQ(getIrqFromBankPin(bank,id));
}

void gpio_interruptDisableAll() {
 801e00e:	b580      	push	{r7, lr}
 801e010:	af00      	add	r7, sp, #0
	  HAL_NVIC_DisableIRQ(EXTI0_1_IRQn);
 801e012:	2005      	movs	r0, #5
 801e014:	f7e6 fa95 	bl	8004542 <HAL_NVIC_DisableIRQ>
	  HAL_NVIC_DisableIRQ(EXTI4_15_IRQn);
 801e018:	2007      	movs	r0, #7
 801e01a:	f7e6 fa92 	bl	8004542 <HAL_NVIC_DisableIRQ>
}
 801e01e:	46c0      	nop			; (mov r8, r8)
 801e020:	46bd      	mov	sp, r7
 801e022:	bd80      	pop	{r7, pc}

0801e024 <gpio_interruptPriority>:

void gpio_interruptPriority(uint8_t bank, uint16_t id, uint8_t nPreemption, uint8_t nSubpriority) {
 801e024:	b5b0      	push	{r4, r5, r7, lr}
 801e026:	b082      	sub	sp, #8
 801e028:	af00      	add	r7, sp, #0
 801e02a:	0005      	movs	r5, r0
 801e02c:	000c      	movs	r4, r1
 801e02e:	0010      	movs	r0, r2
 801e030:	0019      	movs	r1, r3
 801e032:	1dfb      	adds	r3, r7, #7
 801e034:	1c2a      	adds	r2, r5, #0
 801e036:	701a      	strb	r2, [r3, #0]
 801e038:	1d3b      	adds	r3, r7, #4
 801e03a:	1c22      	adds	r2, r4, #0
 801e03c:	801a      	strh	r2, [r3, #0]
 801e03e:	1dbb      	adds	r3, r7, #6
 801e040:	1c02      	adds	r2, r0, #0
 801e042:	701a      	strb	r2, [r3, #0]
 801e044:	1cfb      	adds	r3, r7, #3
 801e046:	1c0a      	adds	r2, r1, #0
 801e048:	701a      	strb	r2, [r3, #0]
	HAL_NVIC_SetPriority(getIrqFromBankPin(bank,id), nPreemption, nSubpriority);
 801e04a:	1d3b      	adds	r3, r7, #4
 801e04c:	881a      	ldrh	r2, [r3, #0]
 801e04e:	1dfb      	adds	r3, r7, #7
 801e050:	781b      	ldrb	r3, [r3, #0]
 801e052:	0011      	movs	r1, r2
 801e054:	0018      	movs	r0, r3
 801e056:	f7ff fd65 	bl	801db24 <getIrqFromBankPin>
 801e05a:	0003      	movs	r3, r0
 801e05c:	0018      	movs	r0, r3
 801e05e:	1dbb      	adds	r3, r7, #6
 801e060:	7819      	ldrb	r1, [r3, #0]
 801e062:	1cfb      	adds	r3, r7, #3
 801e064:	781b      	ldrb	r3, [r3, #0]
 801e066:	001a      	movs	r2, r3
 801e068:	f7e6 fa46 	bl	80044f8 <HAL_NVIC_SetPriority>
}
 801e06c:	46c0      	nop			; (mov r8, r8)
 801e06e:	46bd      	mov	sp, r7
 801e070:	b002      	add	sp, #8
 801e072:	bdb0      	pop	{r4, r5, r7, pc}

0801e074 <gpio_interruptClear>:

void gpio_interruptClear(uint8_t bank, uint16_t id) {
 801e074:	b580      	push	{r7, lr}
 801e076:	b082      	sub	sp, #8
 801e078:	af00      	add	r7, sp, #0
 801e07a:	0002      	movs	r2, r0
 801e07c:	1dfb      	adds	r3, r7, #7
 801e07e:	701a      	strb	r2, [r3, #0]
 801e080:	1d3b      	adds	r3, r7, #4
 801e082:	1c0a      	adds	r2, r1, #0
 801e084:	801a      	strh	r2, [r3, #0]
	__HAL_GPIO_EXTI_CLEAR_IT(id);
 801e086:	4b04      	ldr	r3, [pc, #16]	; (801e098 <gpio_interruptClear+0x24>)
 801e088:	1d3a      	adds	r2, r7, #4
 801e08a:	8812      	ldrh	r2, [r2, #0]
 801e08c:	615a      	str	r2, [r3, #20]
}
 801e08e:	46c0      	nop			; (mov r8, r8)
 801e090:	46bd      	mov	sp, r7
 801e092:	b002      	add	sp, #8
 801e094:	bd80      	pop	{r7, pc}
 801e096:	46c0      	nop			; (mov r8, r8)
 801e098:	40010400 	.word	0x40010400

0801e09c <HAL_GPIO_EXTI_Callback>:
#if !defined ITSDK_WITH_GPIO_HANDLER || ITSDK_WITH_GPIO_HANDLER == __ENABLE
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
#else
void gpio_Callback(uint16_t GPIO_Pin)
#endif
{
 801e09c:	b580      	push	{r7, lr}
 801e09e:	b086      	sub	sp, #24
 801e0a0:	af00      	add	r7, sp, #0
 801e0a2:	0002      	movs	r2, r0
 801e0a4:	1dbb      	adds	r3, r7, #6
 801e0a6:	801a      	strh	r2, [r3, #0]

	// When the __gpio_irq_wakeup handler is set this handler is called
	// Because we do not want the normal handler to be called until the
	// MCU is correctly configured when waking up from deep-sleep
	if (__gpio_irq_wakeup != NULL ) {
 801e0a8:	4b1b      	ldr	r3, [pc, #108]	; (801e118 <HAL_GPIO_EXTI_Callback+0x7c>)
 801e0aa:	681b      	ldr	r3, [r3, #0]
 801e0ac:	2b00      	cmp	r3, #0
 801e0ae:	d00c      	beq.n	801e0ca <HAL_GPIO_EXTI_Callback+0x2e>
		void (*p)(uint16_t p) = __gpio_irq_wakeup->irq_func;
 801e0b0:	4b19      	ldr	r3, [pc, #100]	; (801e118 <HAL_GPIO_EXTI_Callback+0x7c>)
 801e0b2:	681b      	ldr	r3, [r3, #0]
 801e0b4:	681b      	ldr	r3, [r3, #0]
 801e0b6:	613b      	str	r3, [r7, #16]
		if ( p != NULL ) {
 801e0b8:	693b      	ldr	r3, [r7, #16]
 801e0ba:	2b00      	cmp	r3, #0
 801e0bc:	d005      	beq.n	801e0ca <HAL_GPIO_EXTI_Callback+0x2e>
			p(GPIO_Pin);
 801e0be:	1dbb      	adds	r3, r7, #6
 801e0c0:	881a      	ldrh	r2, [r3, #0]
 801e0c2:	693b      	ldr	r3, [r7, #16]
 801e0c4:	0010      	movs	r0, r2
 801e0c6:	4798      	blx	r3
			return;
 801e0c8:	e023      	b.n	801e112 <HAL_GPIO_EXTI_Callback+0x76>
		}
	}
	// Normal non wake-up situation.
	gpio_irq_chain_t * c = &__gpio_irq_chain;
 801e0ca:	4b14      	ldr	r3, [pc, #80]	; (801e11c <HAL_GPIO_EXTI_Callback+0x80>)
 801e0cc:	617b      	str	r3, [r7, #20]
	while ( c != NULL ) {
 801e0ce:	e019      	b.n	801e104 <HAL_GPIO_EXTI_Callback+0x68>
		void (*p)(uint16_t p) = c->irq_func;
 801e0d0:	697b      	ldr	r3, [r7, #20]
 801e0d2:	681b      	ldr	r3, [r3, #0]
 801e0d4:	60fb      	str	r3, [r7, #12]
		if ( p != NULL && (c->pinMask==0 || ((c->pinMask & GPIO_Pin) > 0) ) ) {
 801e0d6:	68fb      	ldr	r3, [r7, #12]
 801e0d8:	2b00      	cmp	r3, #0
 801e0da:	d010      	beq.n	801e0fe <HAL_GPIO_EXTI_Callback+0x62>
 801e0dc:	697b      	ldr	r3, [r7, #20]
 801e0de:	889b      	ldrh	r3, [r3, #4]
 801e0e0:	2b00      	cmp	r3, #0
 801e0e2:	d007      	beq.n	801e0f4 <HAL_GPIO_EXTI_Callback+0x58>
 801e0e4:	697b      	ldr	r3, [r7, #20]
 801e0e6:	889b      	ldrh	r3, [r3, #4]
 801e0e8:	1dba      	adds	r2, r7, #6
 801e0ea:	8812      	ldrh	r2, [r2, #0]
 801e0ec:	4013      	ands	r3, r2
 801e0ee:	b29b      	uxth	r3, r3
 801e0f0:	2b00      	cmp	r3, #0
 801e0f2:	d004      	beq.n	801e0fe <HAL_GPIO_EXTI_Callback+0x62>
			p(GPIO_Pin);
 801e0f4:	1dbb      	adds	r3, r7, #6
 801e0f6:	881a      	ldrh	r2, [r3, #0]
 801e0f8:	68fb      	ldr	r3, [r7, #12]
 801e0fa:	0010      	movs	r0, r2
 801e0fc:	4798      	blx	r3
		}
		c = c->next;
 801e0fe:	697b      	ldr	r3, [r7, #20]
 801e100:	689b      	ldr	r3, [r3, #8]
 801e102:	617b      	str	r3, [r7, #20]
	while ( c != NULL ) {
 801e104:	697b      	ldr	r3, [r7, #20]
 801e106:	2b00      	cmp	r3, #0
 801e108:	d1e2      	bne.n	801e0d0 <HAL_GPIO_EXTI_Callback+0x34>
	}
	#if !defined ITSDK_WITH_GPIO_HANDLER || ITSDK_WITH_GPIO_HANDLER == __ENABLE
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 801e10a:	4b05      	ldr	r3, [pc, #20]	; (801e120 <HAL_GPIO_EXTI_Callback+0x84>)
 801e10c:	1dba      	adds	r2, r7, #6
 801e10e:	8812      	ldrh	r2, [r2, #0]
 801e110:	615a      	str	r2, [r3, #20]
	#endif
}
 801e112:	46bd      	mov	sp, r7
 801e114:	b006      	add	sp, #24
 801e116:	bd80      	pop	{r7, pc}
 801e118:	200012c4 	.word	0x200012c4
 801e11c:	200012b8 	.word	0x200012b8
 801e120:	40010400 	.word	0x40010400

0801e124 <gpio_registerIrqAction>:
}

/**
 * Add an action to the chain, the action **must be** static
 */
void gpio_registerIrqAction(gpio_irq_chain_t * chain) {
 801e124:	b580      	push	{r7, lr}
 801e126:	b084      	sub	sp, #16
 801e128:	af00      	add	r7, sp, #0
 801e12a:	6078      	str	r0, [r7, #4]
	gpio_irq_chain_t * c = &__gpio_irq_chain;
 801e12c:	4b0f      	ldr	r3, [pc, #60]	; (801e16c <gpio_registerIrqAction+0x48>)
 801e12e:	60fb      	str	r3, [r7, #12]
	while ( c->next != NULL && c->irq_func != chain->irq_func ) {
 801e130:	e002      	b.n	801e138 <gpio_registerIrqAction+0x14>
	  c = c->next;
 801e132:	68fb      	ldr	r3, [r7, #12]
 801e134:	689b      	ldr	r3, [r3, #8]
 801e136:	60fb      	str	r3, [r7, #12]
	while ( c->next != NULL && c->irq_func != chain->irq_func ) {
 801e138:	68fb      	ldr	r3, [r7, #12]
 801e13a:	689b      	ldr	r3, [r3, #8]
 801e13c:	2b00      	cmp	r3, #0
 801e13e:	d005      	beq.n	801e14c <gpio_registerIrqAction+0x28>
 801e140:	68fb      	ldr	r3, [r7, #12]
 801e142:	681a      	ldr	r2, [r3, #0]
 801e144:	687b      	ldr	r3, [r7, #4]
 801e146:	681b      	ldr	r3, [r3, #0]
 801e148:	429a      	cmp	r2, r3
 801e14a:	d1f2      	bne.n	801e132 <gpio_registerIrqAction+0xe>
	}
	if ( c->irq_func != chain->irq_func ) {
 801e14c:	68fb      	ldr	r3, [r7, #12]
 801e14e:	681a      	ldr	r2, [r3, #0]
 801e150:	687b      	ldr	r3, [r7, #4]
 801e152:	681b      	ldr	r3, [r3, #0]
 801e154:	429a      	cmp	r2, r3
 801e156:	d005      	beq.n	801e164 <gpio_registerIrqAction+0x40>
		// the Action is not already existing
		c->next=chain;
 801e158:	68fb      	ldr	r3, [r7, #12]
 801e15a:	687a      	ldr	r2, [r7, #4]
 801e15c:	609a      	str	r2, [r3, #8]
		chain->next = NULL;
 801e15e:	687b      	ldr	r3, [r7, #4]
 801e160:	2200      	movs	r2, #0
 801e162:	609a      	str	r2, [r3, #8]
	}
}
 801e164:	46c0      	nop			; (mov r8, r8)
 801e166:	46bd      	mov	sp, r7
 801e168:	b004      	add	sp, #16
 801e16a:	bd80      	pop	{r7, pc}
 801e16c:	200012b8 	.word	0x200012b8

0801e170 <NVIC_SystemReset>:
{
 801e170:	b580      	push	{r7, lr}
 801e172:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 801e174:	f3bf 8f4f 	dsb	sy
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 801e178:	4b03      	ldr	r3, [pc, #12]	; (801e188 <NVIC_SystemReset+0x18>)
 801e17a:	4a04      	ldr	r2, [pc, #16]	; (801e18c <NVIC_SystemReset+0x1c>)
 801e17c:	60da      	str	r2, [r3, #12]
 801e17e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 801e182:	46c0      	nop			; (mov r8, r8)
    __NOP();
 801e184:	e7fd      	b.n	801e182 <NVIC_SystemReset+0x12>
 801e186:	46c0      	nop			; (mov r8, r8)
 801e188:	e000ed00 	.word	0xe000ed00
 801e18c:	05fa0004 	.word	0x05fa0004

0801e190 <itsdk_reset>:
#include "stm32l0xx_hal.h"

/**
 * Reset the device
 */
void itsdk_reset() {
 801e190:	b580      	push	{r7, lr}
 801e192:	af00      	add	r7, sp, #0
	while(1) NVIC_SystemReset();
 801e194:	f7ff ffec 	bl	801e170 <NVIC_SystemReset>
 801e198:	e7fc      	b.n	801e194 <itsdk_reset+0x4>
	...

0801e19c <itsdk_getResetCause>:
}

/**
 * Reset Cause
 */
itsdk_reset_cause_t itsdk_getResetCause() {
 801e19c:	b580      	push	{r7, lr}
 801e19e:	af00      	add	r7, sp, #0
	if ( RCC->CSR & RCC_CSR_LPWRRSTF ) return RESET_CAUSE_LOWPOWER;
 801e1a0:	4b1c      	ldr	r3, [pc, #112]	; (801e214 <itsdk_getResetCause+0x78>)
 801e1a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801e1a4:	2b00      	cmp	r3, #0
 801e1a6:	da01      	bge.n	801e1ac <itsdk_getResetCause+0x10>
 801e1a8:	2306      	movs	r3, #6
 801e1aa:	e030      	b.n	801e20e <itsdk_getResetCause+0x72>
	if ( RCC->CSR & RCC_CSR_WWDGRSTF ) return RESET_CAUSE_WWDG;
 801e1ac:	4b19      	ldr	r3, [pc, #100]	; (801e214 <itsdk_getResetCause+0x78>)
 801e1ae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801e1b0:	2380      	movs	r3, #128	; 0x80
 801e1b2:	05db      	lsls	r3, r3, #23
 801e1b4:	4013      	ands	r3, r2
 801e1b6:	d001      	beq.n	801e1bc <itsdk_getResetCause+0x20>
 801e1b8:	2305      	movs	r3, #5
 801e1ba:	e028      	b.n	801e20e <itsdk_getResetCause+0x72>
	if ( RCC->CSR & RCC_CSR_IWDGRSTF ) return RESET_CAUSE_IWDG;
 801e1bc:	4b15      	ldr	r3, [pc, #84]	; (801e214 <itsdk_getResetCause+0x78>)
 801e1be:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801e1c0:	2380      	movs	r3, #128	; 0x80
 801e1c2:	059b      	lsls	r3, r3, #22
 801e1c4:	4013      	ands	r3, r2
 801e1c6:	d001      	beq.n	801e1cc <itsdk_getResetCause+0x30>
 801e1c8:	2304      	movs	r3, #4
 801e1ca:	e020      	b.n	801e20e <itsdk_getResetCause+0x72>
	if ( RCC->CSR & RCC_CSR_SFTRSTF ) return RESET_CAUSE_SOFTWARE;
 801e1cc:	4b11      	ldr	r3, [pc, #68]	; (801e214 <itsdk_getResetCause+0x78>)
 801e1ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801e1d0:	2380      	movs	r3, #128	; 0x80
 801e1d2:	055b      	lsls	r3, r3, #21
 801e1d4:	4013      	ands	r3, r2
 801e1d6:	d001      	beq.n	801e1dc <itsdk_getResetCause+0x40>
 801e1d8:	2303      	movs	r3, #3
 801e1da:	e018      	b.n	801e20e <itsdk_getResetCause+0x72>
	if ( RCC->CSR & RCC_CSR_PORRSTF ) return RESET_CAUSE_POWER_ON;
 801e1dc:	4b0d      	ldr	r3, [pc, #52]	; (801e214 <itsdk_getResetCause+0x78>)
 801e1de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801e1e0:	2380      	movs	r3, #128	; 0x80
 801e1e2:	051b      	lsls	r3, r3, #20
 801e1e4:	4013      	ands	r3, r2
 801e1e6:	d001      	beq.n	801e1ec <itsdk_getResetCause+0x50>
 801e1e8:	2302      	movs	r3, #2
 801e1ea:	e010      	b.n	801e20e <itsdk_getResetCause+0x72>
	if ( RCC->CSR & RCC_CSR_PINRSTF ) return RESET_CAUSE_RESET_PIN;
 801e1ec:	4b09      	ldr	r3, [pc, #36]	; (801e214 <itsdk_getResetCause+0x78>)
 801e1ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801e1f0:	2380      	movs	r3, #128	; 0x80
 801e1f2:	04db      	lsls	r3, r3, #19
 801e1f4:	4013      	ands	r3, r2
 801e1f6:	d001      	beq.n	801e1fc <itsdk_getResetCause+0x60>
 801e1f8:	2301      	movs	r3, #1
 801e1fa:	e008      	b.n	801e20e <itsdk_getResetCause+0x72>
	if ( RCC->CSR & RCC_CSR_OBLRSTF ) return RESET_CAUSE_LOWPOWER;
 801e1fc:	4b05      	ldr	r3, [pc, #20]	; (801e214 <itsdk_getResetCause+0x78>)
 801e1fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801e200:	2380      	movs	r3, #128	; 0x80
 801e202:	049b      	lsls	r3, r3, #18
 801e204:	4013      	ands	r3, r2
 801e206:	d001      	beq.n	801e20c <itsdk_getResetCause+0x70>
 801e208:	2306      	movs	r3, #6
 801e20a:	e000      	b.n	801e20e <itsdk_getResetCause+0x72>
	else return RESET_CAUSE_UNKNONW;
 801e20c:	2307      	movs	r3, #7
}
 801e20e:	0018      	movs	r0, r3
 801e210:	46bd      	mov	sp, r7
 801e212:	bd80      	pop	{r7, pc}
 801e214:	40021000 	.word	0x40021000

0801e218 <itsdk_cleanResetCause>:

void itsdk_cleanResetCause() {
 801e218:	b580      	push	{r7, lr}
 801e21a:	af00      	add	r7, sp, #0
	RCC->CSR |= RCC_CSR_RMVF;
 801e21c:	4b04      	ldr	r3, [pc, #16]	; (801e230 <itsdk_cleanResetCause+0x18>)
 801e21e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801e220:	4b03      	ldr	r3, [pc, #12]	; (801e230 <itsdk_cleanResetCause+0x18>)
 801e222:	2180      	movs	r1, #128	; 0x80
 801e224:	0409      	lsls	r1, r1, #16
 801e226:	430a      	orrs	r2, r1
 801e228:	651a      	str	r2, [r3, #80]	; 0x50
}
 801e22a:	46c0      	nop			; (mov r8, r8)
 801e22c:	46bd      	mov	sp, r7
 801e22e:	bd80      	pop	{r7, pc}
 801e230:	40021000 	.word	0x40021000

0801e234 <itsdk_delayMs>:

/**
 * Delay in ms
 */
void itsdk_delayMs(uint32_t ms) {
 801e234:	b580      	push	{r7, lr}
 801e236:	b082      	sub	sp, #8
 801e238:	af00      	add	r7, sp, #0
 801e23a:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 801e23c:	687b      	ldr	r3, [r7, #4]
 801e23e:	0018      	movs	r0, r3
 801e240:	f7e5 fe0e 	bl	8003e60 <HAL_Delay>
}
 801e244:	46c0      	nop			; (mov r8, r8)
 801e246:	46bd      	mov	sp, r7
 801e248:	b002      	add	sp, #8
 801e24a:	bd80      	pop	{r7, pc}

0801e24c <itsdk_getIrqMask>:

/**
 * Get the IRQ Mask
 */
uint32_t itsdk_getIrqMask() {
 801e24c:	b580      	push	{r7, lr}
 801e24e:	b082      	sub	sp, #8
 801e250:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801e252:	f3ef 8310 	mrs	r3, PRIMASK
 801e256:	607b      	str	r3, [r7, #4]
  return(result);
 801e258:	687b      	ldr	r3, [r7, #4]
	return __get_PRIMASK();
 801e25a:	46c0      	nop			; (mov r8, r8)
}
 801e25c:	0018      	movs	r0, r3
 801e25e:	46bd      	mov	sp, r7
 801e260:	b002      	add	sp, #8
 801e262:	bd80      	pop	{r7, pc}

0801e264 <itsdk_setIrqMask>:

/**
 * Set / Restore the IRQ Mask
 */
void itsdk_setIrqMask(uint32_t mask) {
 801e264:	b580      	push	{r7, lr}
 801e266:	b084      	sub	sp, #16
 801e268:	af00      	add	r7, sp, #0
 801e26a:	6078      	str	r0, [r7, #4]
 801e26c:	687b      	ldr	r3, [r7, #4]
 801e26e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e270:	68fb      	ldr	r3, [r7, #12]
 801e272:	f383 8810 	msr	PRIMASK, r3
	__set_PRIMASK(mask);
}
 801e276:	46c0      	nop			; (mov r8, r8)
 801e278:	46bd      	mov	sp, r7
 801e27a:	b004      	add	sp, #16
 801e27c:	bd80      	pop	{r7, pc}
	...

0801e280 <itsdk_enterCriticalSection>:
/**
 * Enter a critical section / disable interrupt
 */
static uint32_t __interrupt_mask;
void itsdk_enterCriticalSection() {
 801e280:	b580      	push	{r7, lr}
 801e282:	b082      	sub	sp, #8
 801e284:	af00      	add	r7, sp, #0
	__interrupt_mask = itsdk_getIrqMask();
 801e286:	f7ff ffe1 	bl	801e24c <itsdk_getIrqMask>
 801e28a:	0002      	movs	r2, r0
 801e28c:	4b05      	ldr	r3, [pc, #20]	; (801e2a4 <itsdk_enterCriticalSection+0x24>)
 801e28e:	601a      	str	r2, [r3, #0]
 801e290:	2301      	movs	r3, #1
 801e292:	607b      	str	r3, [r7, #4]
 801e294:	687b      	ldr	r3, [r7, #4]
 801e296:	f383 8810 	msr	PRIMASK, r3
	//__disable_irq();
	__set_PRIMASK(1);	// allows to capture but not execute the interruption appearing during the critical section execution
}
 801e29a:	46c0      	nop			; (mov r8, r8)
 801e29c:	46bd      	mov	sp, r7
 801e29e:	b002      	add	sp, #8
 801e2a0:	bd80      	pop	{r7, pc}
 801e2a2:	46c0      	nop			; (mov r8, r8)
 801e2a4:	200012c8 	.word	0x200012c8

0801e2a8 <itsdk_leaveCriticalSection>:

/**
 * Restore the initial irq mask
 * to leave a critical secqtion
 */
void itsdk_leaveCriticalSection() {
 801e2a8:	b580      	push	{r7, lr}
 801e2aa:	af00      	add	r7, sp, #0
	itsdk_setIrqMask(__interrupt_mask);
 801e2ac:	4b03      	ldr	r3, [pc, #12]	; (801e2bc <itsdk_leaveCriticalSection+0x14>)
 801e2ae:	681b      	ldr	r3, [r3, #0]
 801e2b0:	0018      	movs	r0, r3
 801e2b2:	f7ff ffd7 	bl	801e264 <itsdk_setIrqMask>
}
 801e2b6:	46c0      	nop			; (mov r8, r8)
 801e2b8:	46bd      	mov	sp, r7
 801e2ba:	bd80      	pop	{r7, pc}
 801e2bc:	200012c8 	.word	0x200012c8

0801e2c0 <itsdk_getRandomSeed>:
	#define  STM32_ID2    ( 0x1FF80054 )
	#define  STM32_ID3    ( 0x1FF80064 )
#else
    #error "You need to define the MCU ID for this platform"
#endif
uint32_t itsdk_getRandomSeed() {
 801e2c0:	b580      	push	{r7, lr}
 801e2c2:	af00      	add	r7, sp, #0
	return ( ( *( uint32_t* )STM32_ID1 ) ^ ( *( uint32_t* )STM32_ID2 ) ^ ( *( uint32_t* )STM32_ID3 ) );
 801e2c4:	4b05      	ldr	r3, [pc, #20]	; (801e2dc <itsdk_getRandomSeed+0x1c>)
 801e2c6:	681a      	ldr	r2, [r3, #0]
 801e2c8:	4b05      	ldr	r3, [pc, #20]	; (801e2e0 <itsdk_getRandomSeed+0x20>)
 801e2ca:	681b      	ldr	r3, [r3, #0]
 801e2cc:	405a      	eors	r2, r3
 801e2ce:	4b05      	ldr	r3, [pc, #20]	; (801e2e4 <itsdk_getRandomSeed+0x24>)
 801e2d0:	681b      	ldr	r3, [r3, #0]
 801e2d2:	4053      	eors	r3, r2
}
 801e2d4:	0018      	movs	r0, r3
 801e2d6:	46bd      	mov	sp, r7
 801e2d8:	bd80      	pop	{r7, pc}
 801e2da:	46c0      	nop			; (mov r8, r8)
 801e2dc:	1ff80050 	.word	0x1ff80050
 801e2e0:	1ff80054 	.word	0x1ff80054
 801e2e4:	1ff80064 	.word	0x1ff80064

0801e2e8 <itsdk_getUniqId>:
/**
 * Generate a uniq ID based on the object ID. The id struct is
 * initialized based on this. This size of the id table is given
 * as a parameter. size is in Byte
 */
void itsdk_getUniqId(uint8_t * id, int8_t size){
 801e2e8:	b580      	push	{r7, lr}
 801e2ea:	b086      	sub	sp, #24
 801e2ec:	af00      	add	r7, sp, #0
 801e2ee:	6078      	str	r0, [r7, #4]
 801e2f0:	000a      	movs	r2, r1
 801e2f2:	1cfb      	adds	r3, r7, #3
 801e2f4:	701a      	strb	r2, [r3, #0]

	uint32_t i = (( *( uint32_t* )STM32_ID1 ) << 16) + (( *( uint32_t* )STM32_ID2 )  << 8) + (*( uint32_t* )STM32_ID3 );
 801e2f6:	4b2c      	ldr	r3, [pc, #176]	; (801e3a8 <itsdk_getUniqId+0xc0>)
 801e2f8:	681b      	ldr	r3, [r3, #0]
 801e2fa:	041a      	lsls	r2, r3, #16
 801e2fc:	4b2b      	ldr	r3, [pc, #172]	; (801e3ac <itsdk_getUniqId+0xc4>)
 801e2fe:	681b      	ldr	r3, [r3, #0]
 801e300:	021b      	lsls	r3, r3, #8
 801e302:	18d2      	adds	r2, r2, r3
 801e304:	4b2a      	ldr	r3, [pc, #168]	; (801e3b0 <itsdk_getUniqId+0xc8>)
 801e306:	681b      	ldr	r3, [r3, #0]
 801e308:	18d3      	adds	r3, r2, r3
 801e30a:	60fb      	str	r3, [r7, #12]
	uint8_t l=0;
 801e30c:	2317      	movs	r3, #23
 801e30e:	18fb      	adds	r3, r7, r3
 801e310:	2200      	movs	r2, #0
 801e312:	701a      	strb	r2, [r3, #0]
	uint32_t s=i;
 801e314:	68fb      	ldr	r3, [r7, #12]
 801e316:	613b      	str	r3, [r7, #16]
	while ( l < size ) {
 801e318:	e03a      	b.n	801e390 <itsdk_getUniqId+0xa8>
		if ( (l & 0x3) == 0 ) {
 801e31a:	2317      	movs	r3, #23
 801e31c:	18fb      	adds	r3, r7, r3
 801e31e:	781b      	ldrb	r3, [r3, #0]
 801e320:	2203      	movs	r2, #3
 801e322:	4013      	ands	r3, r2
 801e324:	d11f      	bne.n	801e366 <itsdk_getUniqId+0x7e>
			switch ( (l >> 2) & 3 ) {
 801e326:	2317      	movs	r3, #23
 801e328:	18fb      	adds	r3, r7, r3
 801e32a:	781b      	ldrb	r3, [r3, #0]
 801e32c:	089b      	lsrs	r3, r3, #2
 801e32e:	b2db      	uxtb	r3, r3
 801e330:	001a      	movs	r2, r3
 801e332:	2303      	movs	r3, #3
 801e334:	4013      	ands	r3, r2
 801e336:	2b01      	cmp	r3, #1
 801e338:	d008      	beq.n	801e34c <itsdk_getUniqId+0x64>
 801e33a:	2b02      	cmp	r3, #2
 801e33c:	d00b      	beq.n	801e356 <itsdk_getUniqId+0x6e>
 801e33e:	2b00      	cmp	r3, #0
 801e340:	d10e      	bne.n	801e360 <itsdk_getUniqId+0x78>
				case 0:	s = i ^ STM32_ID1; break;
 801e342:	68fb      	ldr	r3, [r7, #12]
 801e344:	4a18      	ldr	r2, [pc, #96]	; (801e3a8 <itsdk_getUniqId+0xc0>)
 801e346:	4053      	eors	r3, r2
 801e348:	613b      	str	r3, [r7, #16]
 801e34a:	e00d      	b.n	801e368 <itsdk_getUniqId+0x80>
				case 1: s = i ^ STM32_ID2; break;
 801e34c:	68fb      	ldr	r3, [r7, #12]
 801e34e:	4a17      	ldr	r2, [pc, #92]	; (801e3ac <itsdk_getUniqId+0xc4>)
 801e350:	4053      	eors	r3, r2
 801e352:	613b      	str	r3, [r7, #16]
 801e354:	e008      	b.n	801e368 <itsdk_getUniqId+0x80>
				case 2: s = i ^ STM32_ID3; break;
 801e356:	68fb      	ldr	r3, [r7, #12]
 801e358:	4a15      	ldr	r2, [pc, #84]	; (801e3b0 <itsdk_getUniqId+0xc8>)
 801e35a:	4053      	eors	r3, r2
 801e35c:	613b      	str	r3, [r7, #16]
 801e35e:	e003      	b.n	801e368 <itsdk_getUniqId+0x80>
				default:
				case 3: s = i; break;
 801e360:	68fb      	ldr	r3, [r7, #12]
 801e362:	613b      	str	r3, [r7, #16]
 801e364:	e000      	b.n	801e368 <itsdk_getUniqId+0x80>
			}
		}
 801e366:	46c0      	nop			; (mov r8, r8)
		id[l] = ( s >> (8*(l&3))) & 0xFF;
 801e368:	2017      	movs	r0, #23
 801e36a:	183b      	adds	r3, r7, r0
 801e36c:	781b      	ldrb	r3, [r3, #0]
 801e36e:	2203      	movs	r2, #3
 801e370:	4013      	ands	r3, r2
 801e372:	00db      	lsls	r3, r3, #3
 801e374:	693a      	ldr	r2, [r7, #16]
 801e376:	40da      	lsrs	r2, r3
 801e378:	0011      	movs	r1, r2
 801e37a:	183b      	adds	r3, r7, r0
 801e37c:	781b      	ldrb	r3, [r3, #0]
 801e37e:	687a      	ldr	r2, [r7, #4]
 801e380:	18d3      	adds	r3, r2, r3
 801e382:	b2ca      	uxtb	r2, r1
 801e384:	701a      	strb	r2, [r3, #0]
		l++;
 801e386:	183b      	adds	r3, r7, r0
 801e388:	781a      	ldrb	r2, [r3, #0]
 801e38a:	183b      	adds	r3, r7, r0
 801e38c:	3201      	adds	r2, #1
 801e38e:	701a      	strb	r2, [r3, #0]
	while ( l < size ) {
 801e390:	2317      	movs	r3, #23
 801e392:	18fb      	adds	r3, r7, r3
 801e394:	781a      	ldrb	r2, [r3, #0]
 801e396:	1cfb      	adds	r3, r7, #3
 801e398:	781b      	ldrb	r3, [r3, #0]
 801e39a:	b25b      	sxtb	r3, r3
 801e39c:	429a      	cmp	r2, r3
 801e39e:	dbbc      	blt.n	801e31a <itsdk_getUniqId+0x32>
	}

}
 801e3a0:	46c0      	nop			; (mov r8, r8)
 801e3a2:	46bd      	mov	sp, r7
 801e3a4:	b006      	add	sp, #24
 801e3a6:	bd80      	pop	{r7, pc}
 801e3a8:	1ff80050 	.word	0x1ff80050
 801e3ac:	1ff80054 	.word	0x1ff80054
 801e3b0:	1ff80064 	.word	0x1ff80064

0801e3b4 <serial1_print>:
	   while(__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
	   while(__HAL_UART_GET_FLAG(&huart1, USART_ISR_TC) == RESET);
  #endif
}

void serial1_print(char * msg) {
 801e3b4:	b580      	push	{r7, lr}
 801e3b6:	b082      	sub	sp, #8
 801e3b8:	af00      	add	r7, sp, #0
 801e3ba:	6078      	str	r0, [r7, #4]
  #if ( ITSDK_WITH_UART & __UART_LPUART1 ) > 0
	HAL_UART_Transmit(&hlpuart1, (uint8_t*)msg, strlen(msg),0xFFFF);
  #elif ( ITSDK_WITH_UART & __UART_USART1 ) > 0
	HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg),0xFFFF);
 801e3bc:	687b      	ldr	r3, [r7, #4]
 801e3be:	0018      	movs	r0, r3
 801e3c0:	f7e1 fea2 	bl	8000108 <strlen>
 801e3c4:	0003      	movs	r3, r0
 801e3c6:	b29a      	uxth	r2, r3
 801e3c8:	4b04      	ldr	r3, [pc, #16]	; (801e3dc <serial1_print+0x28>)
 801e3ca:	6879      	ldr	r1, [r7, #4]
 801e3cc:	4804      	ldr	r0, [pc, #16]	; (801e3e0 <serial1_print+0x2c>)
 801e3ce:	f7e8 fbb5 	bl	8006b3c <HAL_UART_Transmit>
  #endif
}
 801e3d2:	46c0      	nop			; (mov r8, r8)
 801e3d4:	46bd      	mov	sp, r7
 801e3d6:	b002      	add	sp, #8
 801e3d8:	bd80      	pop	{r7, pc}
 801e3da:	46c0      	nop			; (mov r8, r8)
 801e3dc:	0000ffff 	.word	0x0000ffff
 801e3e0:	20001354 	.word	0x20001354

0801e3e4 <serial2_print>:
  while((__HAL_UART_GET_FLAG(&huart2, USART_ISR_BUSY)) == SET);
  while((__HAL_UART_GET_FLAG(&huart2, USART_ISR_TC)) == RESET);
  #endif
}

void serial2_print(char * msg) {
 801e3e4:	b580      	push	{r7, lr}
 801e3e6:	b082      	sub	sp, #8
 801e3e8:	af00      	add	r7, sp, #0
 801e3ea:	6078      	str	r0, [r7, #4]
  #if ( ITSDK_WITH_UART & __UART_USART2 ) > 0
	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg),0xFFFF);
 801e3ec:	687b      	ldr	r3, [r7, #4]
 801e3ee:	0018      	movs	r0, r3
 801e3f0:	f7e1 fe8a 	bl	8000108 <strlen>
 801e3f4:	0003      	movs	r3, r0
 801e3f6:	b29a      	uxth	r2, r3
 801e3f8:	4b04      	ldr	r3, [pc, #16]	; (801e40c <serial2_print+0x28>)
 801e3fa:	6879      	ldr	r1, [r7, #4]
 801e3fc:	4804      	ldr	r0, [pc, #16]	; (801e410 <serial2_print+0x2c>)
 801e3fe:	f7e8 fb9d 	bl	8006b3c <HAL_UART_Transmit>
  #endif
}
 801e402:	46c0      	nop			; (mov r8, r8)
 801e404:	46bd      	mov	sp, r7
 801e406:	b002      	add	sp, #8
 801e408:	bd80      	pop	{r7, pc}
 801e40a:	46c0      	nop			; (mov r8, r8)
 801e40c:	0000ffff 	.word	0x0000ffff
 801e410:	200014e4 	.word	0x200014e4

0801e414 <serial2_read>:
	char * eol = "\r\n";
	HAL_UART_Transmit(&huart2, (uint8_t*)eol, strlen(eol),0xFFFF);
  #endif
}

serial_read_response_e serial2_read(char * ch) {
 801e414:	b580      	push	{r7, lr}
 801e416:	b082      	sub	sp, #8
 801e418:	af00      	add	r7, sp, #0
 801e41a:	6078      	str	r0, [r7, #4]

#if  ( ITSDK_WITH_UART_RXIRQ & __UART_USART2 ) > 0

	if ( __serial2_bufferRd != __serial2_bufferWr ) {
 801e41c:	4b17      	ldr	r3, [pc, #92]	; (801e47c <serial2_read+0x68>)
 801e41e:	781b      	ldrb	r3, [r3, #0]
 801e420:	b2da      	uxtb	r2, r3
 801e422:	4b17      	ldr	r3, [pc, #92]	; (801e480 <serial2_read+0x6c>)
 801e424:	781b      	ldrb	r3, [r3, #0]
 801e426:	b2db      	uxtb	r3, r3
 801e428:	429a      	cmp	r2, r3
 801e42a:	d021      	beq.n	801e470 <serial2_read+0x5c>
		// char available
		*ch = __serial2_buffer[__serial2_bufferRd];
 801e42c:	4b13      	ldr	r3, [pc, #76]	; (801e47c <serial2_read+0x68>)
 801e42e:	781b      	ldrb	r3, [r3, #0]
 801e430:	b2db      	uxtb	r3, r3
 801e432:	001a      	movs	r2, r3
 801e434:	4b13      	ldr	r3, [pc, #76]	; (801e484 <serial2_read+0x70>)
 801e436:	5c9a      	ldrb	r2, [r3, r2]
 801e438:	687b      	ldr	r3, [r7, #4]
 801e43a:	701a      	strb	r2, [r3, #0]
		itsdk_enterCriticalSection();
 801e43c:	f7ff ff20 	bl	801e280 <itsdk_enterCriticalSection>
		__serial2_bufferRd = (__serial2_bufferRd + 1) & (ITSDK_WITH_UART_RXIRQ_BUFSZ-1);
 801e440:	4b0e      	ldr	r3, [pc, #56]	; (801e47c <serial2_read+0x68>)
 801e442:	781b      	ldrb	r3, [r3, #0]
 801e444:	b2db      	uxtb	r3, r3
 801e446:	3301      	adds	r3, #1
 801e448:	b2db      	uxtb	r3, r3
 801e44a:	223f      	movs	r2, #63	; 0x3f
 801e44c:	4013      	ands	r3, r2
 801e44e:	b2da      	uxtb	r2, r3
 801e450:	4b0a      	ldr	r3, [pc, #40]	; (801e47c <serial2_read+0x68>)
 801e452:	701a      	strb	r2, [r3, #0]
		itsdk_leaveCriticalSection();
 801e454:	f7ff ff28 	bl	801e2a8 <itsdk_leaveCriticalSection>
		if ( __serial2_bufferRd != __serial2_bufferWr ) {
 801e458:	4b08      	ldr	r3, [pc, #32]	; (801e47c <serial2_read+0x68>)
 801e45a:	781b      	ldrb	r3, [r3, #0]
 801e45c:	b2da      	uxtb	r2, r3
 801e45e:	4b08      	ldr	r3, [pc, #32]	; (801e480 <serial2_read+0x6c>)
 801e460:	781b      	ldrb	r3, [r3, #0]
 801e462:	b2db      	uxtb	r3, r3
 801e464:	429a      	cmp	r2, r3
 801e466:	d001      	beq.n	801e46c <serial2_read+0x58>
			return SERIAL_READ_PENDING_CHAR;
 801e468:	2301      	movs	r3, #1
 801e46a:	e002      	b.n	801e472 <serial2_read+0x5e>
		} else {
			return SERIAL_READ_SUCCESS;
 801e46c:	2300      	movs	r3, #0
 801e46e:	e000      	b.n	801e472 <serial2_read+0x5e>
		}
	} else {
		return SERIAL_READ_NOCHAR;
 801e470:	2302      	movs	r3, #2
	return SERIAL_READ_NOCHAR;
  #else
	return SERIAL_READ_FAILED;
  #endif
#endif
}
 801e472:	0018      	movs	r0, r3
 801e474:	46bd      	mov	sp, r7
 801e476:	b002      	add	sp, #8
 801e478:	bd80      	pop	{r7, pc}
 801e47a:	46c0      	nop			; (mov r8, r8)
 801e47c:	2000171e 	.word	0x2000171e
 801e480:	200016d5 	.word	0x200016d5
 801e484:	200016d8 	.word	0x200016d8

0801e488 <HAL_UART_ErrorCallback>:
// Global interrupt management
// ---------------------------------------------------------------------------


#if defined ITSDK_WITH_UART_RXIRQ && ITSDK_WITH_UART_RXIRQ != __UART_NONE
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 801e488:	b580      	push	{r7, lr}
 801e48a:	b082      	sub	sp, #8
 801e48c:	af00      	add	r7, sp, #0
 801e48e:	6078      	str	r0, [r7, #4]
	// Clear the error flags
	__HAL_UART_CLEAR_FLAG(huart, UART_FLAG_ORE);
 801e490:	687b      	ldr	r3, [r7, #4]
 801e492:	681b      	ldr	r3, [r3, #0]
 801e494:	2208      	movs	r2, #8
 801e496:	621a      	str	r2, [r3, #32]
	__HAL_UART_CLEAR_FLAG(huart, UART_FLAG_NE);
 801e498:	687b      	ldr	r3, [r7, #4]
 801e49a:	681b      	ldr	r3, [r3, #0]
 801e49c:	2204      	movs	r2, #4
 801e49e:	621a      	str	r2, [r3, #32]
	__HAL_UART_CLEAR_FLAG(huart, UART_FLAG_FE);
 801e4a0:	687b      	ldr	r3, [r7, #4]
 801e4a2:	681b      	ldr	r3, [r3, #0]
 801e4a4:	2202      	movs	r2, #2
 801e4a6:	621a      	str	r2, [r3, #32]
}
 801e4a8:	46c0      	nop			; (mov r8, r8)
 801e4aa:	46bd      	mov	sp, r7
 801e4ac:	b002      	add	sp, #8
 801e4ae:	bd80      	pop	{r7, pc}

0801e4b0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 801e4b0:	b580      	push	{r7, lr}
 801e4b2:	b082      	sub	sp, #8
 801e4b4:	af00      	add	r7, sp, #0
 801e4b6:	6078      	str	r0, [r7, #4]
	  if (huart->Instance == USART1)
 801e4b8:	687b      	ldr	r3, [r7, #4]
 801e4ba:	681b      	ldr	r3, [r3, #0]
 801e4bc:	4a1c      	ldr	r2, [pc, #112]	; (801e530 <HAL_UART_RxCpltCallback+0x80>)
 801e4be:	4293      	cmp	r3, r2
 801e4c0:	d132      	bne.n	801e528 <HAL_UART_RxCpltCallback+0x78>
	  {
		  //log_info("toto uart wrapper.c l 413");
		  static indexOfReceive;
	    /* Transmit one byte with 100 ms timeout */
		  if ((char)byte == 'R'){
 801e4c2:	4b1c      	ldr	r3, [pc, #112]	; (801e534 <HAL_UART_RxCpltCallback+0x84>)
 801e4c4:	781b      	ldrb	r3, [r3, #0]
 801e4c6:	2b52      	cmp	r3, #82	; 0x52
 801e4c8:	d102      	bne.n	801e4d0 <HAL_UART_RxCpltCallback+0x20>
			  indexOfReceive = 0;
 801e4ca:	4b1b      	ldr	r3, [pc, #108]	; (801e538 <HAL_UART_RxCpltCallback+0x88>)
 801e4cc:	2200      	movs	r2, #0
 801e4ce:	601a      	str	r2, [r3, #0]
		  }
		  tabResult[indexOfReceive] = byte;
 801e4d0:	4b19      	ldr	r3, [pc, #100]	; (801e538 <HAL_UART_RxCpltCallback+0x88>)
 801e4d2:	681b      	ldr	r3, [r3, #0]
 801e4d4:	4a17      	ldr	r2, [pc, #92]	; (801e534 <HAL_UART_RxCpltCallback+0x84>)
 801e4d6:	7811      	ldrb	r1, [r2, #0]
 801e4d8:	4a18      	ldr	r2, [pc, #96]	; (801e53c <HAL_UART_RxCpltCallback+0x8c>)
 801e4da:	54d1      	strb	r1, [r2, r3]
		  indexOfReceive++;
 801e4dc:	4b16      	ldr	r3, [pc, #88]	; (801e538 <HAL_UART_RxCpltCallback+0x88>)
 801e4de:	681b      	ldr	r3, [r3, #0]
 801e4e0:	1c5a      	adds	r2, r3, #1
 801e4e2:	4b15      	ldr	r3, [pc, #84]	; (801e538 <HAL_UART_RxCpltCallback+0x88>)
 801e4e4:	601a      	str	r2, [r3, #0]
	    /* Receive one byte in interrupt mode */
		  if (indexOfReceive!=5){
 801e4e6:	4b14      	ldr	r3, [pc, #80]	; (801e538 <HAL_UART_RxCpltCallback+0x88>)
 801e4e8:	681b      	ldr	r3, [r3, #0]
 801e4ea:	2b05      	cmp	r3, #5
 801e4ec:	d006      	beq.n	801e4fc <HAL_UART_RxCpltCallback+0x4c>
			  HAL_UART_Receive_IT(&huart1, &byte, 1);
 801e4ee:	4911      	ldr	r1, [pc, #68]	; (801e534 <HAL_UART_RxCpltCallback+0x84>)
 801e4f0:	4b13      	ldr	r3, [pc, #76]	; (801e540 <HAL_UART_RxCpltCallback+0x90>)
 801e4f2:	2201      	movs	r2, #1
 801e4f4:	0018      	movs	r0, r3
 801e4f6:	f7e8 fbc9 	bl	8006c8c <HAL_UART_Receive_IT>
			  indexOfReceive = 0;
		  }

	  }

}
 801e4fa:	e015      	b.n	801e528 <HAL_UART_RxCpltCallback+0x78>
			  tabToPrint[0] = 0x30; //Force to 0
 801e4fc:	4b11      	ldr	r3, [pc, #68]	; (801e544 <HAL_UART_RxCpltCallback+0x94>)
 801e4fe:	2230      	movs	r2, #48	; 0x30
 801e500:	701a      	strb	r2, [r3, #0]
			  tabToPrint[1] = tabResult[1];
 801e502:	4b0e      	ldr	r3, [pc, #56]	; (801e53c <HAL_UART_RxCpltCallback+0x8c>)
 801e504:	785a      	ldrb	r2, [r3, #1]
 801e506:	4b0f      	ldr	r3, [pc, #60]	; (801e544 <HAL_UART_RxCpltCallback+0x94>)
 801e508:	705a      	strb	r2, [r3, #1]
			  tabToPrint[2] = tabResult[2];
 801e50a:	4b0c      	ldr	r3, [pc, #48]	; (801e53c <HAL_UART_RxCpltCallback+0x8c>)
 801e50c:	789a      	ldrb	r2, [r3, #2]
 801e50e:	4b0d      	ldr	r3, [pc, #52]	; (801e544 <HAL_UART_RxCpltCallback+0x94>)
 801e510:	709a      	strb	r2, [r3, #2]
			  tabToPrint[3] = tabResult[3];
 801e512:	4b0a      	ldr	r3, [pc, #40]	; (801e53c <HAL_UART_RxCpltCallback+0x8c>)
 801e514:	78da      	ldrb	r2, [r3, #3]
 801e516:	4b0b      	ldr	r3, [pc, #44]	; (801e544 <HAL_UART_RxCpltCallback+0x94>)
 801e518:	70da      	strb	r2, [r3, #3]
			  tabToPrint[4] = tabResult[4];
 801e51a:	4b08      	ldr	r3, [pc, #32]	; (801e53c <HAL_UART_RxCpltCallback+0x8c>)
 801e51c:	791a      	ldrb	r2, [r3, #4]
 801e51e:	4b09      	ldr	r3, [pc, #36]	; (801e544 <HAL_UART_RxCpltCallback+0x94>)
 801e520:	711a      	strb	r2, [r3, #4]
			  indexOfReceive = 0;
 801e522:	4b05      	ldr	r3, [pc, #20]	; (801e538 <HAL_UART_RxCpltCallback+0x88>)
 801e524:	2200      	movs	r2, #0
 801e526:	601a      	str	r2, [r3, #0]
}
 801e528:	46c0      	nop			; (mov r8, r8)
 801e52a:	46bd      	mov	sp, r7
 801e52c:	b002      	add	sp, #8
 801e52e:	bd80      	pop	{r7, pc}
 801e530:	40013800 	.word	0x40013800
 801e534:	2000171d 	.word	0x2000171d
 801e538:	200012cc 	.word	0x200012cc
 801e53c:	200016d0 	.word	0x200016d0
 801e540:	20001354 	.word	0x20001354
 801e544:	20001718 	.word	0x20001718

0801e548 <debug_print>:
// ---------------------------------------------------------------------------

void debug_flush() {
}

void debug_print(debug_print_type_e lvl, char * msg) {
 801e548:	b580      	push	{r7, lr}
 801e54a:	b082      	sub	sp, #8
 801e54c:	af00      	add	r7, sp, #0
 801e54e:	0002      	movs	r2, r0
 801e550:	6039      	str	r1, [r7, #0]
 801e552:	1dfb      	adds	r3, r7, #7
 801e554:	701a      	strb	r2, [r3, #0]
	SEGGER_RTT_WriteString(0, msg);
	SEGGER_RTT_WriteString(0,RTT_CTRL_RESET);
	int v = strlen(msg);
	wasEndLine = ( msg[v-1] == '\r' || msg[v-1] == '\n' )?1:0;
#endif
}
 801e556:	46c0      	nop			; (mov r8, r8)
 801e558:	46bd      	mov	sp, r7
 801e55a:	b002      	add	sp, #8
 801e55c:	bd80      	pop	{r7, pc}
	...

0801e560 <_eeprom_write>:
 * Offset allows to write 1 bank in multiple operation where offset is the pointer for bank start
 *  offset is aligned on 32b words
 * Actually bank is not supported, assuming is 0
 * @TODO : manage bank
 */
bool _eeprom_write(uint8_t bank, uint32_t offset, void * data, int len) {
 801e560:	b580      	push	{r7, lr}
 801e562:	b088      	sub	sp, #32
 801e564:	af00      	add	r7, sp, #0
 801e566:	60b9      	str	r1, [r7, #8]
 801e568:	607a      	str	r2, [r7, #4]
 801e56a:	603b      	str	r3, [r7, #0]
 801e56c:	210f      	movs	r1, #15
 801e56e:	187b      	adds	r3, r7, r1
 801e570:	1c02      	adds	r2, r0, #0
 801e572:	701a      	strb	r2, [r3, #0]
	uint8_t *  _data = (uint8_t *)data;
 801e574:	687b      	ldr	r3, [r7, #4]
 801e576:	617b      	str	r3, [r7, #20]
	uint32_t   _eepromAddr;
	uint32_t   v;

	if ( bank != 0 || (offset + len) > EEPROM_SIZE) {
 801e578:	187b      	adds	r3, r7, r1
 801e57a:	781b      	ldrb	r3, [r3, #0]
 801e57c:	2b00      	cmp	r3, #0
 801e57e:	d106      	bne.n	801e58e <_eeprom_write+0x2e>
 801e580:	683a      	ldr	r2, [r7, #0]
 801e582:	68bb      	ldr	r3, [r7, #8]
 801e584:	18d2      	adds	r2, r2, r3
 801e586:	23c0      	movs	r3, #192	; 0xc0
 801e588:	015b      	lsls	r3, r3, #5
 801e58a:	429a      	cmp	r2, r3
 801e58c:	d906      	bls.n	801e59c <_eeprom_write+0x3c>
	    ITSDK_ERROR_REPORT(ITSDK_ERROR_EEPROM_OUTOFBOUNDS,len);
 801e58e:	683b      	ldr	r3, [r7, #0]
 801e590:	b29b      	uxth	r3, r3
 801e592:	4a3f      	ldr	r2, [pc, #252]	; (801e690 <_eeprom_write+0x130>)
 801e594:	0019      	movs	r1, r3
 801e596:	0010      	movs	r0, r2
 801e598:	f7fd fae0 	bl	801bb5c <itsdk_error_report>
	}
	_eepromAddr = (uint32_t)(EEPROM_START_ADDR+offset);
 801e59c:	68bb      	ldr	r3, [r7, #8]
 801e59e:	4a3d      	ldr	r2, [pc, #244]	; (801e694 <_eeprom_write+0x134>)
 801e5a0:	4694      	mov	ip, r2
 801e5a2:	4463      	add	r3, ip
 801e5a4:	61fb      	str	r3, [r7, #28]
	if ( (_eepromAddr & 0x3) != 0 ) {
 801e5a6:	69fb      	ldr	r3, [r7, #28]
 801e5a8:	2203      	movs	r2, #3
 801e5aa:	4013      	ands	r3, r2
 801e5ac:	d006      	beq.n	801e5bc <_eeprom_write+0x5c>
	    ITSDK_ERROR_REPORT(ITSDK_ERROR_EEPROM_NOTALIGNED,1);
 801e5ae:	4b3a      	ldr	r3, [pc, #232]	; (801e698 <_eeprom_write+0x138>)
 801e5b0:	2101      	movs	r1, #1
 801e5b2:	0018      	movs	r0, r3
 801e5b4:	f7fd fad2 	bl	801bb5c <itsdk_error_report>
	    return false;
 801e5b8:	2300      	movs	r3, #0
 801e5ba:	e064      	b.n	801e686 <_eeprom_write+0x126>
	}

	// Unlock EEPROM
	if (FLASH->PECR & FLASH_PECR_PELOCK) {
 801e5bc:	4b37      	ldr	r3, [pc, #220]	; (801e69c <_eeprom_write+0x13c>)
 801e5be:	685b      	ldr	r3, [r3, #4]
 801e5c0:	2201      	movs	r2, #1
 801e5c2:	4013      	ands	r3, r2
 801e5c4:	d005      	beq.n	801e5d2 <_eeprom_write+0x72>
			FLASH->PEKEYR = FLASH_PEKEY1;
 801e5c6:	4b35      	ldr	r3, [pc, #212]	; (801e69c <_eeprom_write+0x13c>)
 801e5c8:	4a35      	ldr	r2, [pc, #212]	; (801e6a0 <_eeprom_write+0x140>)
 801e5ca:	60da      	str	r2, [r3, #12]
			FLASH->PEKEYR = FLASH_PEKEY2;
 801e5cc:	4b33      	ldr	r3, [pc, #204]	; (801e69c <_eeprom_write+0x13c>)
 801e5ce:	4a35      	ldr	r2, [pc, #212]	; (801e6a4 <_eeprom_write+0x144>)
 801e5d0:	60da      	str	r2, [r3, #12]
	}
	// Copy data
	for (int i = 0; i < len; i += 4) {
 801e5d2:	2300      	movs	r3, #0
 801e5d4:	61bb      	str	r3, [r7, #24]
 801e5d6:	e04b      	b.n	801e670 <_eeprom_write+0x110>
		v = _data[i] << 24;
 801e5d8:	69bb      	ldr	r3, [r7, #24]
 801e5da:	697a      	ldr	r2, [r7, #20]
 801e5dc:	18d3      	adds	r3, r2, r3
 801e5de:	781b      	ldrb	r3, [r3, #0]
 801e5e0:	061b      	lsls	r3, r3, #24
 801e5e2:	613b      	str	r3, [r7, #16]
		v+= (i+1 < len)?_data[i+1]<<16:0;
 801e5e4:	69bb      	ldr	r3, [r7, #24]
 801e5e6:	3301      	adds	r3, #1
 801e5e8:	683a      	ldr	r2, [r7, #0]
 801e5ea:	429a      	cmp	r2, r3
 801e5ec:	dd07      	ble.n	801e5fe <_eeprom_write+0x9e>
 801e5ee:	69bb      	ldr	r3, [r7, #24]
 801e5f0:	3301      	adds	r3, #1
 801e5f2:	697a      	ldr	r2, [r7, #20]
 801e5f4:	18d3      	adds	r3, r2, r3
 801e5f6:	781b      	ldrb	r3, [r3, #0]
 801e5f8:	041b      	lsls	r3, r3, #16
 801e5fa:	001a      	movs	r2, r3
 801e5fc:	e000      	b.n	801e600 <_eeprom_write+0xa0>
 801e5fe:	2200      	movs	r2, #0
 801e600:	693b      	ldr	r3, [r7, #16]
 801e602:	189b      	adds	r3, r3, r2
 801e604:	613b      	str	r3, [r7, #16]
		v+= (i+2 < len)?_data[i+2]<<8:0;
 801e606:	69bb      	ldr	r3, [r7, #24]
 801e608:	3302      	adds	r3, #2
 801e60a:	683a      	ldr	r2, [r7, #0]
 801e60c:	429a      	cmp	r2, r3
 801e60e:	dd07      	ble.n	801e620 <_eeprom_write+0xc0>
 801e610:	69bb      	ldr	r3, [r7, #24]
 801e612:	3302      	adds	r3, #2
 801e614:	697a      	ldr	r2, [r7, #20]
 801e616:	18d3      	adds	r3, r2, r3
 801e618:	781b      	ldrb	r3, [r3, #0]
 801e61a:	021b      	lsls	r3, r3, #8
 801e61c:	001a      	movs	r2, r3
 801e61e:	e000      	b.n	801e622 <_eeprom_write+0xc2>
 801e620:	2200      	movs	r2, #0
 801e622:	693b      	ldr	r3, [r7, #16]
 801e624:	189b      	adds	r3, r3, r2
 801e626:	613b      	str	r3, [r7, #16]
		v+= (i+3 < len)?_data[i+3]:0;
 801e628:	69bb      	ldr	r3, [r7, #24]
 801e62a:	3303      	adds	r3, #3
 801e62c:	683a      	ldr	r2, [r7, #0]
 801e62e:	429a      	cmp	r2, r3
 801e630:	dd06      	ble.n	801e640 <_eeprom_write+0xe0>
 801e632:	69bb      	ldr	r3, [r7, #24]
 801e634:	3303      	adds	r3, #3
 801e636:	697a      	ldr	r2, [r7, #20]
 801e638:	18d3      	adds	r3, r2, r3
 801e63a:	781b      	ldrb	r3, [r3, #0]
 801e63c:	001a      	movs	r2, r3
 801e63e:	e000      	b.n	801e642 <_eeprom_write+0xe2>
 801e640:	2200      	movs	r2, #0
 801e642:	693b      	ldr	r3, [r7, #16]
 801e644:	189b      	adds	r3, r3, r2
 801e646:	613b      	str	r3, [r7, #16]
		if (v != __eepromRead(_eepromAddr)) __eepromWrite(_eepromAddr,v);
 801e648:	69fb      	ldr	r3, [r7, #28]
 801e64a:	0018      	movs	r0, r3
 801e64c:	f000 f8a6 	bl	801e79c <__eepromRead>
 801e650:	0002      	movs	r2, r0
 801e652:	693b      	ldr	r3, [r7, #16]
 801e654:	4293      	cmp	r3, r2
 801e656:	d005      	beq.n	801e664 <_eeprom_write+0x104>
 801e658:	693a      	ldr	r2, [r7, #16]
 801e65a:	69fb      	ldr	r3, [r7, #28]
 801e65c:	0011      	movs	r1, r2
 801e65e:	0018      	movs	r0, r3
 801e660:	f000 f8a6 	bl	801e7b0 <__eepromWrite>
		_eepromAddr+=4;
 801e664:	69fb      	ldr	r3, [r7, #28]
 801e666:	3304      	adds	r3, #4
 801e668:	61fb      	str	r3, [r7, #28]
	for (int i = 0; i < len; i += 4) {
 801e66a:	69bb      	ldr	r3, [r7, #24]
 801e66c:	3304      	adds	r3, #4
 801e66e:	61bb      	str	r3, [r7, #24]
 801e670:	69ba      	ldr	r2, [r7, #24]
 801e672:	683b      	ldr	r3, [r7, #0]
 801e674:	429a      	cmp	r2, r3
 801e676:	dbaf      	blt.n	801e5d8 <_eeprom_write+0x78>
	}
	// Lock EEPROM
	FLASH->PECR |= FLASH_PECR_PELOCK;
 801e678:	4b08      	ldr	r3, [pc, #32]	; (801e69c <_eeprom_write+0x13c>)
 801e67a:	685a      	ldr	r2, [r3, #4]
 801e67c:	4b07      	ldr	r3, [pc, #28]	; (801e69c <_eeprom_write+0x13c>)
 801e67e:	2101      	movs	r1, #1
 801e680:	430a      	orrs	r2, r1
 801e682:	605a      	str	r2, [r3, #4]
	return true;
 801e684:	2301      	movs	r3, #1
}
 801e686:	0018      	movs	r0, r3
 801e688:	46bd      	mov	sp, r7
 801e68a:	b008      	add	sp, #32
 801e68c:	bd80      	pop	{r7, pc}
 801e68e:	46c0      	nop			; (mov r8, r8)
 801e690:	d0000030 	.word	0xd0000030
 801e694:	08080000 	.word	0x08080000
 801e698:	d0000031 	.word	0xd0000031
 801e69c:	40022000 	.word	0x40022000
 801e6a0:	89abcdef 	.word	0x89abcdef
 801e6a4:	02030405 	.word	0x02030405

0801e6a8 <_eeprom_read>:

/**
 * Read a block of data from the EEPROM
 * Offset is to add an offset to bank start - Offset is aligned don 32b word
 */
bool _eeprom_read(uint8_t bank, uint32_t offset, void * data, int len) {
 801e6a8:	b580      	push	{r7, lr}
 801e6aa:	b088      	sub	sp, #32
 801e6ac:	af00      	add	r7, sp, #0
 801e6ae:	60b9      	str	r1, [r7, #8]
 801e6b0:	607a      	str	r2, [r7, #4]
 801e6b2:	603b      	str	r3, [r7, #0]
 801e6b4:	210f      	movs	r1, #15
 801e6b6:	187b      	adds	r3, r7, r1
 801e6b8:	1c02      	adds	r2, r0, #0
 801e6ba:	701a      	strb	r2, [r3, #0]
	uint8_t  * _data = (uint8_t *)data;
 801e6bc:	687b      	ldr	r3, [r7, #4]
 801e6be:	617b      	str	r3, [r7, #20]
	uint32_t   _eepromAddr;
	uint32_t   v;

	if ( bank != 0 || (offset + len) > EEPROM_SIZE) {
 801e6c0:	187b      	adds	r3, r7, r1
 801e6c2:	781b      	ldrb	r3, [r3, #0]
 801e6c4:	2b00      	cmp	r3, #0
 801e6c6:	d106      	bne.n	801e6d6 <_eeprom_read+0x2e>
 801e6c8:	683a      	ldr	r2, [r7, #0]
 801e6ca:	68bb      	ldr	r3, [r7, #8]
 801e6cc:	18d2      	adds	r2, r2, r3
 801e6ce:	23c0      	movs	r3, #192	; 0xc0
 801e6d0:	015b      	lsls	r3, r3, #5
 801e6d2:	429a      	cmp	r2, r3
 801e6d4:	d906      	bls.n	801e6e4 <_eeprom_read+0x3c>
	    ITSDK_ERROR_REPORT(ITSDK_ERROR_EEPROM_OUTOFBOUNDS,len);
 801e6d6:	683b      	ldr	r3, [r7, #0]
 801e6d8:	b29b      	uxth	r3, r3
 801e6da:	4a2d      	ldr	r2, [pc, #180]	; (801e790 <_eeprom_read+0xe8>)
 801e6dc:	0019      	movs	r1, r3
 801e6de:	0010      	movs	r0, r2
 801e6e0:	f7fd fa3c 	bl	801bb5c <itsdk_error_report>
	}
	_eepromAddr = (uint32_t)(EEPROM_START_ADDR+offset);
 801e6e4:	68bb      	ldr	r3, [r7, #8]
 801e6e6:	4a2b      	ldr	r2, [pc, #172]	; (801e794 <_eeprom_read+0xec>)
 801e6e8:	4694      	mov	ip, r2
 801e6ea:	4463      	add	r3, ip
 801e6ec:	61fb      	str	r3, [r7, #28]
	if ( (_eepromAddr & 0x3) != 0 ) {
 801e6ee:	69fb      	ldr	r3, [r7, #28]
 801e6f0:	2203      	movs	r2, #3
 801e6f2:	4013      	ands	r3, r2
 801e6f4:	d006      	beq.n	801e704 <_eeprom_read+0x5c>
	    ITSDK_ERROR_REPORT(ITSDK_ERROR_EEPROM_NOTALIGNED,0);
 801e6f6:	4b28      	ldr	r3, [pc, #160]	; (801e798 <_eeprom_read+0xf0>)
 801e6f8:	2100      	movs	r1, #0
 801e6fa:	0018      	movs	r0, r3
 801e6fc:	f7fd fa2e 	bl	801bb5c <itsdk_error_report>
	    return false;
 801e700:	2300      	movs	r3, #0
 801e702:	e040      	b.n	801e786 <_eeprom_read+0xde>
	}

	// Read data
	for (int i = 0; i < len; i += 4) {
 801e704:	2300      	movs	r3, #0
 801e706:	61bb      	str	r3, [r7, #24]
 801e708:	e038      	b.n	801e77c <_eeprom_read+0xd4>
		v = __eepromRead(_eepromAddr);
 801e70a:	69fb      	ldr	r3, [r7, #28]
 801e70c:	0018      	movs	r0, r3
 801e70e:	f000 f845 	bl	801e79c <__eepromRead>
 801e712:	0003      	movs	r3, r0
 801e714:	613b      	str	r3, [r7, #16]
		_data[i]=(v & 0xFF000000) >> 24;
 801e716:	693b      	ldr	r3, [r7, #16]
 801e718:	0e19      	lsrs	r1, r3, #24
 801e71a:	69bb      	ldr	r3, [r7, #24]
 801e71c:	697a      	ldr	r2, [r7, #20]
 801e71e:	18d3      	adds	r3, r2, r3
 801e720:	b2ca      	uxtb	r2, r1
 801e722:	701a      	strb	r2, [r3, #0]
		if ( i+1 < len) _data[i+1]=(v & 0x00FF0000) >> 16;
 801e724:	69bb      	ldr	r3, [r7, #24]
 801e726:	3301      	adds	r3, #1
 801e728:	683a      	ldr	r2, [r7, #0]
 801e72a:	429a      	cmp	r2, r3
 801e72c:	dd07      	ble.n	801e73e <_eeprom_read+0x96>
 801e72e:	693b      	ldr	r3, [r7, #16]
 801e730:	0c19      	lsrs	r1, r3, #16
 801e732:	69bb      	ldr	r3, [r7, #24]
 801e734:	3301      	adds	r3, #1
 801e736:	697a      	ldr	r2, [r7, #20]
 801e738:	18d3      	adds	r3, r2, r3
 801e73a:	b2ca      	uxtb	r2, r1
 801e73c:	701a      	strb	r2, [r3, #0]
		if ( i+2 < len) _data[i+2]=(v & 0x0000FF00) >> 8;
 801e73e:	69bb      	ldr	r3, [r7, #24]
 801e740:	3302      	adds	r3, #2
 801e742:	683a      	ldr	r2, [r7, #0]
 801e744:	429a      	cmp	r2, r3
 801e746:	dd07      	ble.n	801e758 <_eeprom_read+0xb0>
 801e748:	693b      	ldr	r3, [r7, #16]
 801e74a:	0a19      	lsrs	r1, r3, #8
 801e74c:	69bb      	ldr	r3, [r7, #24]
 801e74e:	3302      	adds	r3, #2
 801e750:	697a      	ldr	r2, [r7, #20]
 801e752:	18d3      	adds	r3, r2, r3
 801e754:	b2ca      	uxtb	r2, r1
 801e756:	701a      	strb	r2, [r3, #0]
		if ( i+3 < len) _data[i+3]=(v & 0x000000FF);
 801e758:	69bb      	ldr	r3, [r7, #24]
 801e75a:	3303      	adds	r3, #3
 801e75c:	683a      	ldr	r2, [r7, #0]
 801e75e:	429a      	cmp	r2, r3
 801e760:	dd06      	ble.n	801e770 <_eeprom_read+0xc8>
 801e762:	69bb      	ldr	r3, [r7, #24]
 801e764:	3303      	adds	r3, #3
 801e766:	697a      	ldr	r2, [r7, #20]
 801e768:	18d3      	adds	r3, r2, r3
 801e76a:	693a      	ldr	r2, [r7, #16]
 801e76c:	b2d2      	uxtb	r2, r2
 801e76e:	701a      	strb	r2, [r3, #0]
		_eepromAddr+=4;
 801e770:	69fb      	ldr	r3, [r7, #28]
 801e772:	3304      	adds	r3, #4
 801e774:	61fb      	str	r3, [r7, #28]
	for (int i = 0; i < len; i += 4) {
 801e776:	69bb      	ldr	r3, [r7, #24]
 801e778:	3304      	adds	r3, #4
 801e77a:	61bb      	str	r3, [r7, #24]
 801e77c:	69ba      	ldr	r2, [r7, #24]
 801e77e:	683b      	ldr	r3, [r7, #0]
 801e780:	429a      	cmp	r2, r3
 801e782:	dbc2      	blt.n	801e70a <_eeprom_read+0x62>
	}
	return true;
 801e784:	2301      	movs	r3, #1
}
 801e786:	0018      	movs	r0, r3
 801e788:	46bd      	mov	sp, r7
 801e78a:	b008      	add	sp, #32
 801e78c:	bd80      	pop	{r7, pc}
 801e78e:	46c0      	nop			; (mov r8, r8)
 801e790:	d0000030 	.word	0xd0000030
 801e794:	08080000 	.word	0x08080000
 801e798:	d0000031 	.word	0xd0000031

0801e79c <__eepromRead>:


/**
 * Read a word in EEPROM area
 */
uint32_t __eepromRead(uint32_t addr) {
 801e79c:	b580      	push	{r7, lr}
 801e79e:	b082      	sub	sp, #8
 801e7a0:	af00      	add	r7, sp, #0
 801e7a2:	6078      	str	r0, [r7, #4]
	return (*(volatile uint32_t*)addr);
 801e7a4:	687b      	ldr	r3, [r7, #4]
 801e7a6:	681b      	ldr	r3, [r3, #0]
}
 801e7a8:	0018      	movs	r0, r3
 801e7aa:	46bd      	mov	sp, r7
 801e7ac:	b002      	add	sp, #8
 801e7ae:	bd80      	pop	{r7, pc}

0801e7b0 <__eepromWrite>:

/**
 * Write a word in EEPROM area
 * Return false when an error occured
 */
bool __eepromWrite(uint32_t addr, uint32_t v) {
 801e7b0:	b580      	push	{r7, lr}
 801e7b2:	b084      	sub	sp, #16
 801e7b4:	af00      	add	r7, sp, #0
 801e7b6:	6078      	str	r0, [r7, #4]
 801e7b8:	6039      	str	r1, [r7, #0]

	uint16_t tmout = 10000;
 801e7ba:	230e      	movs	r3, #14
 801e7bc:	18fb      	adds	r3, r7, r3
 801e7be:	4a20      	ldr	r2, [pc, #128]	; (801e840 <__eepromWrite+0x90>)
 801e7c0:	801a      	strh	r2, [r3, #0]
	while ( (FLASH->SR & FLASH_SR_BSY) && tmout) tmout--;
 801e7c2:	e005      	b.n	801e7d0 <__eepromWrite+0x20>
 801e7c4:	210e      	movs	r1, #14
 801e7c6:	187b      	adds	r3, r7, r1
 801e7c8:	881a      	ldrh	r2, [r3, #0]
 801e7ca:	187b      	adds	r3, r7, r1
 801e7cc:	3a01      	subs	r2, #1
 801e7ce:	801a      	strh	r2, [r3, #0]
 801e7d0:	4b1c      	ldr	r3, [pc, #112]	; (801e844 <__eepromWrite+0x94>)
 801e7d2:	699b      	ldr	r3, [r3, #24]
 801e7d4:	2201      	movs	r2, #1
 801e7d6:	4013      	ands	r3, r2
 801e7d8:	d004      	beq.n	801e7e4 <__eepromWrite+0x34>
 801e7da:	230e      	movs	r3, #14
 801e7dc:	18fb      	adds	r3, r7, r3
 801e7de:	881b      	ldrh	r3, [r3, #0]
 801e7e0:	2b00      	cmp	r3, #0
 801e7e2:	d1ef      	bne.n	801e7c4 <__eepromWrite+0x14>
	if ( tmout == 0 ) return false;
 801e7e4:	230e      	movs	r3, #14
 801e7e6:	18fb      	adds	r3, r7, r3
 801e7e8:	881b      	ldrh	r3, [r3, #0]
 801e7ea:	2b00      	cmp	r3, #0
 801e7ec:	d101      	bne.n	801e7f2 <__eepromWrite+0x42>
 801e7ee:	2300      	movs	r3, #0
 801e7f0:	e021      	b.n	801e836 <__eepromWrite+0x86>

	// Clear the FTDW bit (data will be erased before write if it non zero)
	FLASH->PECR &= (uint32_t)(~(uint32_t)FLASH_PECR_FIX);
 801e7f2:	4b14      	ldr	r3, [pc, #80]	; (801e844 <__eepromWrite+0x94>)
 801e7f4:	685a      	ldr	r2, [r3, #4]
 801e7f6:	4b13      	ldr	r3, [pc, #76]	; (801e844 <__eepromWrite+0x94>)
 801e7f8:	4913      	ldr	r1, [pc, #76]	; (801e848 <__eepromWrite+0x98>)
 801e7fa:	400a      	ands	r2, r1
 801e7fc:	605a      	str	r2, [r3, #4]

	*(volatile uint32_t *)addr = v;
 801e7fe:	687b      	ldr	r3, [r7, #4]
 801e800:	683a      	ldr	r2, [r7, #0]
 801e802:	601a      	str	r2, [r3, #0]

	while ( (FLASH->SR & FLASH_SR_BSY) && tmout) tmout--;
 801e804:	e005      	b.n	801e812 <__eepromWrite+0x62>
 801e806:	210e      	movs	r1, #14
 801e808:	187b      	adds	r3, r7, r1
 801e80a:	881a      	ldrh	r2, [r3, #0]
 801e80c:	187b      	adds	r3, r7, r1
 801e80e:	3a01      	subs	r2, #1
 801e810:	801a      	strh	r2, [r3, #0]
 801e812:	4b0c      	ldr	r3, [pc, #48]	; (801e844 <__eepromWrite+0x94>)
 801e814:	699b      	ldr	r3, [r3, #24]
 801e816:	2201      	movs	r2, #1
 801e818:	4013      	ands	r3, r2
 801e81a:	d004      	beq.n	801e826 <__eepromWrite+0x76>
 801e81c:	230e      	movs	r3, #14
 801e81e:	18fb      	adds	r3, r7, r3
 801e820:	881b      	ldrh	r3, [r3, #0]
 801e822:	2b00      	cmp	r3, #0
 801e824:	d1ef      	bne.n	801e806 <__eepromWrite+0x56>
	if ( tmout == 0 ) return false;
 801e826:	230e      	movs	r3, #14
 801e828:	18fb      	adds	r3, r7, r3
 801e82a:	881b      	ldrh	r3, [r3, #0]
 801e82c:	2b00      	cmp	r3, #0
 801e82e:	d101      	bne.n	801e834 <__eepromWrite+0x84>
 801e830:	2300      	movs	r3, #0
 801e832:	e000      	b.n	801e836 <__eepromWrite+0x86>

	return true;
 801e834:	2301      	movs	r3, #1
}
 801e836:	0018      	movs	r0, r3
 801e838:	46bd      	mov	sp, r7
 801e83a:	b004      	add	sp, #16
 801e83c:	bd80      	pop	{r7, pc}
 801e83e:	46c0      	nop			; (mov r8, r8)
 801e840:	00002710 	.word	0x00002710
 801e844:	40022000 	.word	0x40022000
 801e848:	fffffeff 	.word	0xfffffeff

0801e84c <stm32l_lowPowerSetup>:

/**
 * Setup the STM32L Low Power mode for the given amount of ms
 * 0xFFFFFFFF ms when no time limit
 */
stm32l_lowPowerReturn_e __attribute__((optimize("O3"))) stm32l_lowPowerSetup(uint32_t durationMs, stm32_lowPowerMode_e mode) {
 801e84c:	b570      	push	{r4, r5, r6, lr}
 801e84e:	000c      	movs	r4, r1
 801e850:	b082      	sub	sp, #8
	if ( ITSDK_LOWPOWER_MOD & __LOWPWR_MODE_STOP ) {
		// -------------------------------------------------------------
		// Configure the STM32L0x1 for switching to low power stop mode
		// -------------------------------------------------------------
		#if ( ITSDK_LOWPOWER_MOD & __LOWPWR_MODE_WAKE_RTC ) > 0
			if ( durationMs == __INFINITE_32B ) {
 801e852:	1c43      	adds	r3, r0, #1
 801e854:	d062      	beq.n	801e91c <stm32l_lowPowerSetup+0xd0>
				#endif
			}
		    if ( durationMs > STM32L_MINIMUM_SLEEPDURATION_MS ) {
			   rtc_configure4LowPower(durationMs);						// Setup RTC wake Up
		    } else {
			   return STM32L_LOWPOWER_TOOSHORT;
 801e856:	2301      	movs	r3, #1
		    if ( durationMs > STM32L_MINIMUM_SLEEPDURATION_MS ) {
 801e858:	2805      	cmp	r0, #5
 801e85a:	d95c      	bls.n	801e916 <stm32l_lowPowerSetup+0xca>
			   rtc_configure4LowPower(durationMs);						// Setup RTC wake Up
 801e85c:	f000 f942 	bl	801eae4 <rtc_configure4LowPower>
			}
		#endif
		HAL_SuspendTick();
 801e860:	f7e5 fb20 	bl	8003ea4 <HAL_SuspendTick>
	    __HAL_RCC_PWR_CLK_ENABLE();				// Enable Power Control clock
 801e864:	2380      	movs	r3, #128	; 0x80
 801e866:	4a2e      	ldr	r2, [pc, #184]	; (801e920 <stm32l_lowPowerSetup+0xd4>)
 801e868:	055b      	lsls	r3, r3, #21
 801e86a:	6b91      	ldr	r1, [r2, #56]	; 0x38
 801e86c:	430b      	orrs	r3, r1
 801e86e:	6393      	str	r3, [r2, #56]	; 0x38
 	    HAL_PWREx_EnableUltraLowPower();		// Ultra low power mode
 801e870:	f7e6 f8d4 	bl	8004a1c <HAL_PWREx_EnableUltraLowPower>
 	    HAL_PWREx_EnableFastWakeUp();			// Fast wake-up for ultra low power mode
 801e874:	f7e6 f8c4 	bl	8004a00 <HAL_PWREx_EnableFastWakeUp>

 	    if ( mode == STM32L_LOWPOWER_NORMAL_STOP ) {
 801e878:	2c00      	cmp	r4, #0
 801e87a:	d144      	bne.n	801e906 <stm32l_lowPowerSetup+0xba>
				while(__HAL_UART_GET_FLAG(&hlpuart1, USART_ISR_BUSY) == SET){};
			#endif

			#if ( ITSDK_WITH_UART & __UART_USART1 ) > 0
				// make sure that no UART transfer is on-going
				while(__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET){};
 801e87c:	2280      	movs	r2, #128	; 0x80
 801e87e:	4d29      	ldr	r5, [pc, #164]	; (801e924 <stm32l_lowPowerSetup+0xd8>)
 801e880:	0252      	lsls	r2, r2, #9
 801e882:	6829      	ldr	r1, [r5, #0]
 801e884:	69cb      	ldr	r3, [r1, #28]
 801e886:	4213      	tst	r3, r2
 801e888:	d1fc      	bne.n	801e884 <stm32l_lowPowerSetup+0x38>
			#endif

			#if ( ITSDK_WITH_UART & __UART_USART2 ) > 0
				// make sure that no UART transfer is on-going
				while(__HAL_UART_GET_FLAG(&huart2, USART_ISR_BUSY) == SET){};
 801e88a:	2180      	movs	r1, #128	; 0x80
 801e88c:	4e26      	ldr	r6, [pc, #152]	; (801e928 <stm32l_lowPowerSetup+0xdc>)
 801e88e:	0249      	lsls	r1, r1, #9
 801e890:	6833      	ldr	r3, [r6, #0]
 801e892:	69da      	ldr	r2, [r3, #28]
 801e894:	420a      	tst	r2, r1
 801e896:	d1fc      	bne.n	801e892 <stm32l_lowPowerSetup+0x46>
			#endif


			#if  ( ITSDK_LOWPOWER_MOD & __LOWPWR_MODE_WAKE_UART2 ) > 0
				// make sure that UART is ready to receive
				while(__HAL_UART_GET_FLAG(&huart2, USART_ISR_REACK) == RESET){}
 801e898:	2480      	movs	r4, #128	; 0x80
 801e89a:	03e4      	lsls	r4, r4, #15
 801e89c:	69da      	ldr	r2, [r3, #28]
 801e89e:	4222      	tst	r2, r4
 801e8a0:	d0fc      	beq.n	801e89c <stm32l_lowPowerSetup+0x50>

				wakeup.WakeUpEvent=UART_WAKEUP_ON_READDATA_NONEMPTY; // UART_WAKEUP_ON_STARTBIT
 801e8a2:	23c0      	movs	r3, #192	; 0xc0
 801e8a4:	039b      	lsls	r3, r3, #14
				HAL_UARTEx_StopModeWakeUpSourceConfig(&huart2,wakeup);
 801e8a6:	0019      	movs	r1, r3
 801e8a8:	9a01      	ldr	r2, [sp, #4]
 801e8aa:	0030      	movs	r0, r6
				wakeup.WakeUpEvent=UART_WAKEUP_ON_READDATA_NONEMPTY; // UART_WAKEUP_ON_STARTBIT
 801e8ac:	9300      	str	r3, [sp, #0]
				HAL_UARTEx_StopModeWakeUpSourceConfig(&huart2,wakeup);
 801e8ae:	f7e9 f959 	bl	8007b64 <HAL_UARTEx_StopModeWakeUpSourceConfig>
				__HAL_UART_ENABLE_IT(&huart2, UART_IT_WUF);
 801e8b2:	6833      	ldr	r3, [r6, #0]
				HAL_UARTEx_EnableStopMode(&huart2);
 801e8b4:	0030      	movs	r0, r6
				__HAL_UART_ENABLE_IT(&huart2, UART_IT_WUF);
 801e8b6:	689a      	ldr	r2, [r3, #8]
 801e8b8:	4314      	orrs	r4, r2
 801e8ba:	609c      	str	r4, [r3, #8]
			  #endif
			#endif

			#if  ( ITSDK_LOWPOWER_MOD & __LOWPWR_MODE_WAKE_UART1 ) > 0
				// make sure that UART is ready to receive
				while(__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET){}
 801e8bc:	2480      	movs	r4, #128	; 0x80
				HAL_UARTEx_EnableStopMode(&huart2);
 801e8be:	f7e9 f9b7 	bl	8007c30 <HAL_UARTEx_EnableStopMode>
				while(__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET){}
 801e8c2:	682a      	ldr	r2, [r5, #0]
 801e8c4:	03e4      	lsls	r4, r4, #15
 801e8c6:	69d3      	ldr	r3, [r2, #28]
 801e8c8:	4223      	tst	r3, r4
 801e8ca:	d0fc      	beq.n	801e8c6 <stm32l_lowPowerSetup+0x7a>

				wakeup.WakeUpEvent=UART_WAKEUP_ON_READDATA_NONEMPTY; // UART_WAKEUP_ON_STARTBIT
				HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1,wakeup);
 801e8cc:	9900      	ldr	r1, [sp, #0]
 801e8ce:	9a01      	ldr	r2, [sp, #4]
 801e8d0:	0028      	movs	r0, r5
 801e8d2:	f7e9 f947 	bl	8007b64 <HAL_UARTEx_StopModeWakeUpSourceConfig>
				__HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 801e8d6:	682b      	ldr	r3, [r5, #0]
				HAL_UARTEx_EnableStopMode(&huart1);
 801e8d8:	0028      	movs	r0, r5
				__HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 801e8da:	689a      	ldr	r2, [r3, #8]
 801e8dc:	4314      	orrs	r4, r2
 801e8de:	609c      	str	r4, [r3, #8]
				HAL_UARTEx_EnableStopMode(&huart1);
 801e8e0:	f7e9 f9a6 	bl	8007c30 <HAL_UARTEx_EnableStopMode>
				#if (ITSDK_WITH_UART & __UART_USART1) > 0
					__HAL_RCC_USART1_CLK_DISABLE();
				#endif
			#endif

			_stm32l_disableGpios();					// Disable GPIOs based on configuration
 801e8e4:	f000 f89a 	bl	801ea1c <_stm32l_disableGpios>
			  // Register interrupt handler
			  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU); 				// Clear wakeUp flag
			  gpio_registerWakeUpAction(&__lowpwer_gpio_irq);	// Install the wakeup handler
																// (the previously existing handler will be bypassed)
			#else
			  gpio_interruptDisableAll();						// Disable GPIOs interrupts
 801e8e8:	f7ff fb91 	bl	801e00e <gpio_interruptDisableAll>
			#endif
			#if ( ITSDK_LOWPOWER_MISC_HALT & __LP_HALT_SPI2 ) > 0
				__HAL_RCC_SPI1_CLK_DISABLE();
			#endif
			#if( ITSDK_LOWPOWER_MISC_HALT & __LP_HALT_TIM21 ) > 0
				__HAL_RCC_TIM21_CLK_DISABLE();
 801e8ec:	2204      	movs	r2, #4
				__HAL_RCC_SPI1_CLK_DISABLE();
 801e8ee:	4b0c      	ldr	r3, [pc, #48]	; (801e920 <stm32l_lowPowerSetup+0xd4>)
 801e8f0:	4c0e      	ldr	r4, [pc, #56]	; (801e92c <stm32l_lowPowerSetup+0xe0>)
 801e8f2:	6b59      	ldr	r1, [r3, #52]	; 0x34
			#endif
			#if( ITSDK_LOWPOWER_MISC_HALT & __LP_HALT_ADC1 ) > 0
				__HAL_RCC_ADC1_CLK_DISABLE();
 801e8f4:	480e      	ldr	r0, [pc, #56]	; (801e930 <stm32l_lowPowerSetup+0xe4>)
				__HAL_RCC_SPI1_CLK_DISABLE();
 801e8f6:	4021      	ands	r1, r4
 801e8f8:	6359      	str	r1, [r3, #52]	; 0x34
				__HAL_RCC_TIM21_CLK_DISABLE();
 801e8fa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 801e8fc:	4391      	bics	r1, r2
 801e8fe:	6359      	str	r1, [r3, #52]	; 0x34
				__HAL_RCC_ADC1_CLK_DISABLE();
 801e900:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801e902:	4002      	ands	r2, r0
 801e904:	635a      	str	r2, [r3, #52]	; 0x34
		// ??? add ?? Not yet tested
		//__HAL_FLASH_SLEEP_POWERDOWN_ENABLE();


 	    // Switch to STOPMode
		__lowPower_wakeup_reason=LOWPWR_WAKEUP_UNDEF;
 801e906:	22ff      	movs	r2, #255	; 0xff
 801e908:	4b0a      	ldr	r3, [pc, #40]	; (801e934 <stm32l_lowPowerSetup+0xe8>)
		#if ( ITSDK_LOWPOWER_MOD & __LOWPWR_MODE_WAKE_GPIO ) > 0
			__lowPower_wakeup_pin=0xFFFF;
		#endif
 	    HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 801e90a:	2101      	movs	r1, #1
 801e90c:	2001      	movs	r0, #1
		__lowPower_wakeup_reason=LOWPWR_WAKEUP_UNDEF;
 801e90e:	701a      	strb	r2, [r3, #0]
 	    HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 801e910:	f7e6 f842 	bl	8004998 <HAL_PWR_EnterSTOPMode>
	}
	return STM32L_LOWPOWER_SUCCESS;
 801e914:	2300      	movs	r3, #0
}
 801e916:	0018      	movs	r0, r3
 801e918:	b002      	add	sp, #8
 801e91a:	bd70      	pop	{r4, r5, r6, pc}
					  durationMs = ITSDK_WDG_MS - 5;
 801e91c:	4806      	ldr	r0, [pc, #24]	; (801e938 <stm32l_lowPowerSetup+0xec>)
 801e91e:	e79d      	b.n	801e85c <stm32l_lowPowerSetup+0x10>
 801e920:	40021000 	.word	0x40021000
 801e924:	20001354 	.word	0x20001354
 801e928:	200014e4 	.word	0x200014e4
 801e92c:	ffffefff 	.word	0xffffefff
 801e930:	fffffdff 	.word	0xfffffdff
 801e934:	200000b0 	.word	0x200000b0
 801e938:	00003e7b 	.word	0x00003e7b

0801e93c <stm32l_lowPowerResume>:


stm32l_lowPowerReturn_e __attribute__((optimize("O3"))) stm32l_lowPowerResume(stm32_lowPowerMode_e mode) {
 801e93c:	b510      	push	{r4, lr}
 801e93e:	0004      	movs	r4, r0
	if ( ITSDK_LOWPOWER_MOD & __LOWPWR_MODE_STOP ) {
		// ------------------------------------------------------------
		// Restore from STOP MODE
		// ------------------------------------------------------------

		SystemClock_Config();
 801e940:	f7e4 fa9c 	bl	8002e7c <SystemClock_Config>
		HAL_SuspendTick();
 801e944:	f7e5 faae 	bl	8003ea4 <HAL_SuspendTick>
		#if  ( ITSDK_LOWPOWER_MOD & __LOWPWR_MODE_WAKE_RTC ) > 0
			rtc_disable4LowPower();
 801e948:	f000 f8dd 	bl	801eb06 <rtc_disable4LowPower>
		#endif

		if ( mode == STM32L_LOWPOWER_NORMAL_STOP ) {
 801e94c:	2c00      	cmp	r4, #0
 801e94e:	d10f      	bne.n	801e970 <stm32l_lowPowerResume+0x34>

			stm32l_lowPowerRestoreGpioConfig();
 801e950:	f7e4 f9f8 	bl	8002d44 <stm32l_lowPowerRestoreGpioConfig>
			#endif
			#if ( ITSDK_LOWPOWER_MISC_HALT & __LP_HALT_I2C2 ) > 0
				HAL_I2C_MspInit(&hi2c2);
			#endif
			#if ( ITSDK_LOWPOWER_MISC_HALT & __LP_HALT_SPI1 ) > 0
				HAL_SPI_MspInit(&hspi1);
 801e954:	4808      	ldr	r0, [pc, #32]	; (801e978 <stm32l_lowPowerResume+0x3c>)
 801e956:	f7e4 ff81 	bl	800385c <HAL_SPI_MspInit>
			#endif
			#if ( ITSDK_LOWPOWER_MISC_HALT & __LP_HALT_SPI2 ) > 0
				HAL_SPI_MspInit(&hspi2);
			#endif
			#if( ITSDK_LOWPOWER_MISC_HALT & __LP_HALT_TIM21 ) > 0
				HAL_TIM_Base_MspInit(&htim21);
 801e95a:	4808      	ldr	r0, [pc, #32]	; (801e97c <stm32l_lowPowerResume+0x40>)
 801e95c:	f7e5 f8fa 	bl	8003b54 <HAL_TIM_Base_MspInit>
			#endif
			#if( ITSDK_LOWPOWER_MISC_HALT & __LP_HALT_ADC1 ) > 0
				__HAL_RCC_ADC1_CLK_ENABLE();
 801e960:	2380      	movs	r3, #128	; 0x80
 801e962:	4a07      	ldr	r2, [pc, #28]	; (801e980 <stm32l_lowPowerResume+0x44>)
 801e964:	009b      	lsls	r3, r3, #2
 801e966:	6b51      	ldr	r1, [r2, #52]	; 0x34
 801e968:	430b      	orrs	r3, r1
 801e96a:	6353      	str	r3, [r2, #52]	; 0x34
				HAL_ADCEx_EnableVREFINT();
 801e96c:	f7e5 fcdc 	bl	8004328 <HAL_ADCEx_EnableVREFINT>
	} else {
		log_info("|");
	}
	#endif

	HAL_ResumeTick();
 801e970:	f7e5 faa6 	bl	8003ec0 <HAL_ResumeTick>
	return STM32L_LOWPOWER_SUCCESS;
}
 801e974:	2000      	movs	r0, #0
 801e976:	bd10      	pop	{r4, pc}
 801e978:	20001450 	.word	0x20001450
 801e97c:	200014a8 	.word	0x200014a8
 801e980:	40021000 	.word	0x40021000

0801e984 <__GpioAnalog>:

/**
 * Switch the GPIO to Low Power
 */
void __GpioAnalog(GPIO_TypeDef  *GPIOx, uint16_t pins)
{
 801e984:	b580      	push	{r7, lr}
 801e986:	b086      	sub	sp, #24
 801e988:	af00      	add	r7, sp, #0
 801e98a:	6078      	str	r0, [r7, #4]
 801e98c:	000a      	movs	r2, r1
 801e98e:	1cbb      	adds	r3, r7, #2
 801e990:	801a      	strh	r2, [r3, #0]
  uint32_t position = 0x00U;
 801e992:	2300      	movs	r3, #0
 801e994:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 801e996:	2300      	movs	r3, #0
 801e998:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 801e99a:	2300      	movs	r3, #0
 801e99c:	60fb      	str	r3, [r7, #12]

  // Configure the port pins //
  while ((pins >> position) != 0)
 801e99e:	e033      	b.n	801ea08 <__GpioAnalog+0x84>
  {
    iocurrent = (pins) & (1U << position);
 801e9a0:	1cbb      	adds	r3, r7, #2
 801e9a2:	881b      	ldrh	r3, [r3, #0]
 801e9a4:	2101      	movs	r1, #1
 801e9a6:	697a      	ldr	r2, [r7, #20]
 801e9a8:	4091      	lsls	r1, r2
 801e9aa:	000a      	movs	r2, r1
 801e9ac:	4013      	ands	r3, r2
 801e9ae:	613b      	str	r3, [r7, #16]
    if(iocurrent)
 801e9b0:	693b      	ldr	r3, [r7, #16]
 801e9b2:	2b00      	cmp	r3, #0
 801e9b4:	d025      	beq.n	801ea02 <__GpioAnalog+0x7e>
    {
      // Configure IO Direction mode (Input, Output, Alternate or Analog)
      temp = GPIOx->MODER;
 801e9b6:	687b      	ldr	r3, [r7, #4]
 801e9b8:	681b      	ldr	r3, [r3, #0]
 801e9ba:	60fb      	str	r3, [r7, #12]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 801e9bc:	697b      	ldr	r3, [r7, #20]
 801e9be:	005b      	lsls	r3, r3, #1
 801e9c0:	2203      	movs	r2, #3
 801e9c2:	409a      	lsls	r2, r3
 801e9c4:	0013      	movs	r3, r2
 801e9c6:	43da      	mvns	r2, r3
 801e9c8:	68fb      	ldr	r3, [r7, #12]
 801e9ca:	4013      	ands	r3, r2
 801e9cc:	60fb      	str	r3, [r7, #12]
      temp |= ((GPIO_MODE_ANALOG) << (position * 2U));
 801e9ce:	697b      	ldr	r3, [r7, #20]
 801e9d0:	005b      	lsls	r3, r3, #1
 801e9d2:	2203      	movs	r2, #3
 801e9d4:	409a      	lsls	r2, r3
 801e9d6:	0013      	movs	r3, r2
 801e9d8:	68fa      	ldr	r2, [r7, #12]
 801e9da:	4313      	orrs	r3, r2
 801e9dc:	60fb      	str	r3, [r7, #12]
      GPIOx->MODER = temp;
 801e9de:	687b      	ldr	r3, [r7, #4]
 801e9e0:	68fa      	ldr	r2, [r7, #12]
 801e9e2:	601a      	str	r2, [r3, #0]

      // Activate the Pull-up or Pull down resistor for the current IO
      temp = GPIOx->PUPDR;
 801e9e4:	687b      	ldr	r3, [r7, #4]
 801e9e6:	68db      	ldr	r3, [r3, #12]
 801e9e8:	60fb      	str	r3, [r7, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 801e9ea:	697b      	ldr	r3, [r7, #20]
 801e9ec:	005b      	lsls	r3, r3, #1
 801e9ee:	2203      	movs	r2, #3
 801e9f0:	409a      	lsls	r2, r3
 801e9f2:	0013      	movs	r3, r2
 801e9f4:	43da      	mvns	r2, r3
 801e9f6:	68fb      	ldr	r3, [r7, #12]
 801e9f8:	4013      	ands	r3, r2
 801e9fa:	60fb      	str	r3, [r7, #12]
      temp |= ((GPIO_NOPULL) << (position * 2U));
      GPIOx->PUPDR = temp;
 801e9fc:	687b      	ldr	r3, [r7, #4]
 801e9fe:	68fa      	ldr	r2, [r7, #12]
 801ea00:	60da      	str	r2, [r3, #12]
    }
    position++;
 801ea02:	697b      	ldr	r3, [r7, #20]
 801ea04:	3301      	adds	r3, #1
 801ea06:	617b      	str	r3, [r7, #20]
  while ((pins >> position) != 0)
 801ea08:	1cbb      	adds	r3, r7, #2
 801ea0a:	881a      	ldrh	r2, [r3, #0]
 801ea0c:	697b      	ldr	r3, [r7, #20]
 801ea0e:	411a      	asrs	r2, r3
 801ea10:	1e13      	subs	r3, r2, #0
 801ea12:	d1c5      	bne.n	801e9a0 <__GpioAnalog+0x1c>
  }
}
 801ea14:	46c0      	nop			; (mov r8, r8)
 801ea16:	46bd      	mov	sp, r7
 801ea18:	b006      	add	sp, #24
 801ea1a:	bd80      	pop	{r7, pc}

0801ea1c <_stm32l_disableGpios>:

/**
 * Disable GPIOS for Low Power switching
 */
void _stm32l_disableGpios() {
 801ea1c:	b580      	push	{r7, lr}
 801ea1e:	af00      	add	r7, sp, #0
    /*       example because communication between ST-link and the device       		*/
    /*       under test is done through UART. All GPIO pins are disabled (set   		*/
    /*       to analog input mode) including  UART I/O pins.           					*/

#ifdef GPIOA
	__GpioAnalog(GPIOA,(~ITSDK_LOWPOWER_GPIO_A_KEEP) & (GPIOA_PIN_AVAILABLE));
 801ea20:	4a1f      	ldr	r2, [pc, #124]	; (801eaa0 <_stm32l_disableGpios+0x84>)
 801ea22:	23a0      	movs	r3, #160	; 0xa0
 801ea24:	05db      	lsls	r3, r3, #23
 801ea26:	0011      	movs	r1, r2
 801ea28:	0018      	movs	r0, r3
 801ea2a:	f7ff ffab 	bl	801e984 <__GpioAnalog>
		__HAL_RCC_GPIOA_CLK_DISABLE();
	}
#endif

#ifdef GPIOB
	__GpioAnalog(GPIOB,(~ITSDK_LOWPOWER_GPIO_B_KEEP) & (GPIOB_PIN_AVAILABLE));
 801ea2e:	4a1d      	ldr	r2, [pc, #116]	; (801eaa4 <_stm32l_disableGpios+0x88>)
 801ea30:	4b1d      	ldr	r3, [pc, #116]	; (801eaa8 <_stm32l_disableGpios+0x8c>)
 801ea32:	0011      	movs	r1, r2
 801ea34:	0018      	movs	r0, r3
 801ea36:	f7ff ffa5 	bl	801e984 <__GpioAnalog>
		__HAL_RCC_GPIOB_CLK_DISABLE();
	}
#endif

#ifdef GPIOC
	__GpioAnalog(GPIOC,(~ITSDK_LOWPOWER_GPIO_C_KEEP) & (GPIOC_PIN_AVAILABLE));
 801ea3a:	4a1c      	ldr	r2, [pc, #112]	; (801eaac <_stm32l_disableGpios+0x90>)
 801ea3c:	4b1c      	ldr	r3, [pc, #112]	; (801eab0 <_stm32l_disableGpios+0x94>)
 801ea3e:	0011      	movs	r1, r2
 801ea40:	0018      	movs	r0, r3
 801ea42:	f7ff ff9f 	bl	801e984 <__GpioAnalog>
	if( ITSDK_LOWPOWER_GPIO_C_KEEP == __LP_GPIO_NONE ) {
		__HAL_RCC_GPIOC_CLK_DISABLE();
 801ea46:	4b1b      	ldr	r3, [pc, #108]	; (801eab4 <_stm32l_disableGpios+0x98>)
 801ea48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801ea4a:	4b1a      	ldr	r3, [pc, #104]	; (801eab4 <_stm32l_disableGpios+0x98>)
 801ea4c:	2104      	movs	r1, #4
 801ea4e:	438a      	bics	r2, r1
 801ea50:	62da      	str	r2, [r3, #44]	; 0x2c
	}
#endif

#ifdef GPIOD
	__GpioAnalog(GPIOD,(~ITSDK_LOWPOWER_GPIO_D_KEEP) & (GPIOD_PIN_AVAILABLE));
 801ea52:	4a16      	ldr	r2, [pc, #88]	; (801eaac <_stm32l_disableGpios+0x90>)
 801ea54:	4b18      	ldr	r3, [pc, #96]	; (801eab8 <_stm32l_disableGpios+0x9c>)
 801ea56:	0011      	movs	r1, r2
 801ea58:	0018      	movs	r0, r3
 801ea5a:	f7ff ff93 	bl	801e984 <__GpioAnalog>
	if( ITSDK_LOWPOWER_GPIO_D_KEEP == __LP_GPIO_NONE ) {
		__HAL_RCC_GPIOD_CLK_DISABLE();
 801ea5e:	4b15      	ldr	r3, [pc, #84]	; (801eab4 <_stm32l_disableGpios+0x98>)
 801ea60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801ea62:	4b14      	ldr	r3, [pc, #80]	; (801eab4 <_stm32l_disableGpios+0x98>)
 801ea64:	2108      	movs	r1, #8
 801ea66:	438a      	bics	r2, r1
 801ea68:	62da      	str	r2, [r3, #44]	; 0x2c
	}
#endif

#ifdef GPIOE
	__GpioAnalog(GPIOE,(~ITSDK_LOWPOWER_GPIO_E_KEEP) & (GPIOE_PIN_AVAILABLE));
 801ea6a:	4a10      	ldr	r2, [pc, #64]	; (801eaac <_stm32l_disableGpios+0x90>)
 801ea6c:	4b13      	ldr	r3, [pc, #76]	; (801eabc <_stm32l_disableGpios+0xa0>)
 801ea6e:	0011      	movs	r1, r2
 801ea70:	0018      	movs	r0, r3
 801ea72:	f7ff ff87 	bl	801e984 <__GpioAnalog>
	if( ITSDK_LOWPOWER_GPIO_E_KEEP == __LP_GPIO_NONE ) {
		__HAL_RCC_GPIOE_CLK_DISABLE();
 801ea76:	4b0f      	ldr	r3, [pc, #60]	; (801eab4 <_stm32l_disableGpios+0x98>)
 801ea78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801ea7a:	4b0e      	ldr	r3, [pc, #56]	; (801eab4 <_stm32l_disableGpios+0x98>)
 801ea7c:	2110      	movs	r1, #16
 801ea7e:	438a      	bics	r2, r1
 801ea80:	62da      	str	r2, [r3, #44]	; 0x2c
	}
#endif

#ifdef GPIOH
	__GpioAnalog(GPIOH,(~ITSDK_LOWPOWER_GPIO_H_KEEP) & (GPIOH_PIN_AVAILABLE));
 801ea82:	4a0f      	ldr	r2, [pc, #60]	; (801eac0 <_stm32l_disableGpios+0xa4>)
 801ea84:	4b0f      	ldr	r3, [pc, #60]	; (801eac4 <_stm32l_disableGpios+0xa8>)
 801ea86:	0011      	movs	r1, r2
 801ea88:	0018      	movs	r0, r3
 801ea8a:	f7ff ff7b 	bl	801e984 <__GpioAnalog>
	if( ITSDK_LOWPOWER_GPIO_H_KEEP == __LP_GPIO_NONE ) {
		__HAL_RCC_GPIOH_CLK_DISABLE();
 801ea8e:	4b09      	ldr	r3, [pc, #36]	; (801eab4 <_stm32l_disableGpios+0x98>)
 801ea90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801ea92:	4b08      	ldr	r3, [pc, #32]	; (801eab4 <_stm32l_disableGpios+0x98>)
 801ea94:	2180      	movs	r1, #128	; 0x80
 801ea96:	438a      	bics	r2, r1
 801ea98:	62da      	str	r2, [r3, #44]	; 0x2c
	}
#endif

}
 801ea9a:	46c0      	nop			; (mov r8, r8)
 801ea9c:	46bd      	mov	sp, r7
 801ea9e:	bd80      	pop	{r7, pc}
 801eaa0:	0000e0f3 	.word	0x0000e0f3
 801eaa4:	0000ef7b 	.word	0x0000ef7b
 801eaa8:	50000400 	.word	0x50000400
 801eaac:	0000ffff 	.word	0x0000ffff
 801eab0:	50000800 	.word	0x50000800
 801eab4:	40021000 	.word	0x40021000
 801eab8:	50000c00 	.word	0x50000c00
 801eabc:	50001000 	.word	0x50001000
 801eac0:	00000603 	.word	0x00000603
 801eac4:	50001c00 	.word	0x50001c00

0801eac8 <HAL_UARTEx_WakeupCallback>:
}

#endif

#if  ( ITSDK_LOWPOWER_MOD & ( __LOWPWR_MODE_WAKE_LPUART | __LOWPWR_MODE_WAKE_UART2 | __LOWPWR_MODE_WAKE_UART1 )  ) > 0
void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart) {
 801eac8:	b580      	push	{r7, lr}
 801eaca:	b082      	sub	sp, #8
 801eacc:	af00      	add	r7, sp, #0
 801eace:	6078      	str	r0, [r7, #4]
   __lowPower_wakeup_reason=LOWPWR_WAKEUP_UART;
 801ead0:	4b03      	ldr	r3, [pc, #12]	; (801eae0 <HAL_UARTEx_WakeupCallback+0x18>)
 801ead2:	2203      	movs	r2, #3
 801ead4:	701a      	strb	r2, [r3, #0]
}
 801ead6:	46c0      	nop			; (mov r8, r8)
 801ead8:	46bd      	mov	sp, r7
 801eada:	b002      	add	sp, #8
 801eadc:	bd80      	pop	{r7, pc}
 801eade:	46c0      	nop			; (mov r8, r8)
 801eae0:	200000b0 	.word	0x200000b0

0801eae4 <rtc_configure4LowPower>:


/**
 * Configure the RTC source clock for running LowPower
 */
void rtc_configure4LowPower(uint32_t ms) {
 801eae4:	b580      	push	{r7, lr}
 801eae6:	b082      	sub	sp, #8
 801eae8:	af00      	add	r7, sp, #0
 801eaea:	6078      	str	r0, [r7, #4]
	rtc_prepareSleepTime();
 801eaec:	f000 f99a 	bl	801ee24 <rtc_prepareSleepTime>
	if ( ms > 0 ) {
 801eaf0:	687b      	ldr	r3, [r7, #4]
 801eaf2:	2b00      	cmp	r3, #0
 801eaf4:	d003      	beq.n	801eafe <rtc_configure4LowPower+0x1a>
		rtc_runRtcUntil(ms);
 801eaf6:	687b      	ldr	r3, [r7, #4]
 801eaf8:	0018      	movs	r0, r3
 801eafa:	f000 f80d 	bl	801eb18 <rtc_runRtcUntil>
	}
}
 801eafe:	46c0      	nop			; (mov r8, r8)
 801eb00:	46bd      	mov	sp, r7
 801eb02:	b002      	add	sp, #8
 801eb04:	bd80      	pop	{r7, pc}

0801eb06 <rtc_disable4LowPower>:

/**
 * Deactivate the WakeUpTimer for not having the IRQ looping
 */
void rtc_disable4LowPower() {
 801eb06:	b580      	push	{r7, lr}
 801eb08:	af00      	add	r7, sp, #0
	rtc_disableWakeUp();
 801eb0a:	f000 f85b 	bl	801ebc4 <rtc_disableWakeUp>
    rtc_updateTimeAfterSleepTime();
 801eb0e:	f000 f99b 	bl	801ee48 <rtc_updateTimeAfterSleepTime>
}
 801eb12:	46c0      	nop			; (mov r8, r8)
 801eb14:	46bd      	mov	sp, r7
 801eb16:	bd80      	pop	{r7, pc}

0801eb18 <rtc_runRtcUntil>:

/**
 * Run Rtc for a given time in ticks
 * Max is 16s
 */
void rtc_runRtcUntil(uint32_t ms) {
 801eb18:	b580      	push	{r7, lr}
 801eb1a:	b084      	sub	sp, #16
 801eb1c:	af00      	add	r7, sp, #0
 801eb1e:	6078      	str	r0, [r7, #4]
	// Issue #48
	// it seems that timer is limited to 16bis (even if 32 bits in the HAL code)
	// So this is limiting in about 30s of sleeping time
	uint32_t ticks = rtc_getTicksFromDuration((uint32_t)ms);
 801eb20:	687b      	ldr	r3, [r7, #4]
 801eb22:	0018      	movs	r0, r3
 801eb24:	f000 f816 	bl	801eb54 <rtc_getTicksFromDuration>
 801eb28:	0003      	movs	r3, r0
 801eb2a:	60fb      	str	r3, [r7, #12]
	if ( ticks < 65536 ) {
 801eb2c:	68fb      	ldr	r3, [r7, #12]
 801eb2e:	4a08      	ldr	r2, [pc, #32]	; (801eb50 <rtc_runRtcUntil+0x38>)
 801eb30:	4293      	cmp	r3, r2
 801eb32:	d804      	bhi.n	801eb3e <rtc_runRtcUntil+0x26>
	    rtc_runRtcUntilTicks(ticks);
 801eb34:	68fb      	ldr	r3, [r7, #12]
 801eb36:	0018      	movs	r0, r3
 801eb38:	f000 f81c 	bl	801eb74 <rtc_runRtcUntilTicks>
	} else {
		// If larger than 65535 we change the RTC clock to have a 1s time base and a longer period of time
		rtc_runRtcUntilMs(ms);
	}
}
 801eb3c:	e003      	b.n	801eb46 <rtc_runRtcUntil+0x2e>
		rtc_runRtcUntilMs(ms);
 801eb3e:	687b      	ldr	r3, [r7, #4]
 801eb40:	0018      	movs	r0, r3
 801eb42:	f000 f827 	bl	801eb94 <rtc_runRtcUntilMs>
}
 801eb46:	46c0      	nop			; (mov r8, r8)
 801eb48:	46bd      	mov	sp, r7
 801eb4a:	b004      	add	sp, #16
 801eb4c:	bd80      	pop	{r7, pc}
 801eb4e:	46c0      	nop			; (mov r8, r8)
 801eb50:	0000ffff 	.word	0x0000ffff

0801eb54 <rtc_getTicksFromDuration>:

/*
 * Convert a duration in ticks (Wake-Up Clock only)
 */
uint32_t rtc_getTicksFromDuration(uint32_t ms) {
 801eb54:	b580      	push	{r7, lr}
 801eb56:	b082      	sub	sp, #8
 801eb58:	af00      	add	r7, sp, #0
 801eb5a:	6078      	str	r0, [r7, #4]
    return (ms * (ITSDK_RTC_CLKFREQ/16)) / 1000;
 801eb5c:	687b      	ldr	r3, [r7, #4]
 801eb5e:	02da      	lsls	r2, r3, #11
 801eb60:	23fa      	movs	r3, #250	; 0xfa
 801eb62:	0099      	lsls	r1, r3, #2
 801eb64:	0010      	movs	r0, r2
 801eb66:	f7e1 fad7 	bl	8000118 <__udivsi3>
 801eb6a:	0003      	movs	r3, r0
}
 801eb6c:	0018      	movs	r0, r3
 801eb6e:	46bd      	mov	sp, r7
 801eb70:	b002      	add	sp, #8
 801eb72:	bd80      	pop	{r7, pc}

0801eb74 <rtc_runRtcUntilTicks>:
}

/**
 * Run the RTC for a given number of ticks
 */
void rtc_runRtcUntilTicks(uint32_t ticks) {
 801eb74:	b580      	push	{r7, lr}
 801eb76:	b082      	sub	sp, #8
 801eb78:	af00      	add	r7, sp, #0
 801eb7a:	6078      	str	r0, [r7, #4]
	HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, ticks, RTC_WAKEUPCLOCK_RTCCLK_DIV16);
 801eb7c:	6879      	ldr	r1, [r7, #4]
 801eb7e:	4b04      	ldr	r3, [pc, #16]	; (801eb90 <rtc_runRtcUntilTicks+0x1c>)
 801eb80:	2200      	movs	r2, #0
 801eb82:	0018      	movs	r0, r3
 801eb84:	f7e7 fb58 	bl	8006238 <HAL_RTCEx_SetWakeUpTimer_IT>
}
 801eb88:	46c0      	nop			; (mov r8, r8)
 801eb8a:	46bd      	mov	sp, r7
 801eb8c:	b002      	add	sp, #8
 801eb8e:	bd80      	pop	{r7, pc}
 801eb90:	200013d4 	.word	0x200013d4

0801eb94 <rtc_runRtcUntilMs>:

/**
 * Run the RTC for a given number of ms
 */
void rtc_runRtcUntilMs(uint32_t ms) {
 801eb94:	b580      	push	{r7, lr}
 801eb96:	b082      	sub	sp, #8
 801eb98:	af00      	add	r7, sp, #0
 801eb9a:	6078      	str	r0, [r7, #4]
	// the scale is 1 second
	HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, (ms / 1000), RTC_WAKEUPCLOCK_CK_SPRE_16BITS);
 801eb9c:	687a      	ldr	r2, [r7, #4]
 801eb9e:	23fa      	movs	r3, #250	; 0xfa
 801eba0:	0099      	lsls	r1, r3, #2
 801eba2:	0010      	movs	r0, r2
 801eba4:	f7e1 fab8 	bl	8000118 <__udivsi3>
 801eba8:	0003      	movs	r3, r0
 801ebaa:	0019      	movs	r1, r3
 801ebac:	4b04      	ldr	r3, [pc, #16]	; (801ebc0 <rtc_runRtcUntilMs+0x2c>)
 801ebae:	2204      	movs	r2, #4
 801ebb0:	0018      	movs	r0, r3
 801ebb2:	f7e7 fb41 	bl	8006238 <HAL_RTCEx_SetWakeUpTimer_IT>
}
 801ebb6:	46c0      	nop			; (mov r8, r8)
 801ebb8:	46bd      	mov	sp, r7
 801ebba:	b002      	add	sp, #8
 801ebbc:	bd80      	pop	{r7, pc}
 801ebbe:	46c0      	nop			; (mov r8, r8)
 801ebc0:	200013d4 	.word	0x200013d4

0801ebc4 <rtc_disableWakeUp>:


void rtc_disableWakeUp() {
 801ebc4:	b580      	push	{r7, lr}
 801ebc6:	af00      	add	r7, sp, #0
	HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 801ebc8:	4b03      	ldr	r3, [pc, #12]	; (801ebd8 <rtc_disableWakeUp+0x14>)
 801ebca:	0018      	movs	r0, r3
 801ebcc:	f7e7 fbfa 	bl	80063c4 <HAL_RTCEx_DeactivateWakeUpTimer>
}
 801ebd0:	46c0      	nop			; (mov r8, r8)
 801ebd2:	46bd      	mov	sp, r7
 801ebd4:	bd80      	pop	{r7, pc}
 801ebd6:	46c0      	nop			; (mov r8, r8)
 801ebd8:	200013d4 	.word	0x200013d4

0801ebdc <rtc_getTimestampMs>:

#ifndef __WE_HAVE_A_LOT_OF_FLASH
uint32_t __rtc_days = 0;			// day index since the begining
uint32_t __rtc_lastTick = 0;		// time in ms in the day
#endif
uint64_t rtc_getTimestampMs() {
 801ebdc:	b5b0      	push	{r4, r5, r7, lr}
 801ebde:	af00      	add	r7, sp, #0
	return rtc_getTimestampMsRaw(true);
 801ebe0:	2001      	movs	r0, #1
 801ebe2:	f000 f807 	bl	801ebf4 <rtc_getTimestampMsRaw>
 801ebe6:	0003      	movs	r3, r0
 801ebe8:	000c      	movs	r4, r1
}
 801ebea:	0018      	movs	r0, r3
 801ebec:	0021      	movs	r1, r4
 801ebee:	46bd      	mov	sp, r7
 801ebf0:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801ebf4 <rtc_getTimestampMsRaw>:

uint64_t rtc_getTimestampMsRaw(bool adjust) {
 801ebf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ebf6:	b095      	sub	sp, #84	; 0x54
 801ebf8:	af00      	add	r7, sp, #0
 801ebfa:	0003      	movs	r3, r0
 801ebfc:	222f      	movs	r2, #47	; 0x2f
 801ebfe:	18ba      	adds	r2, r7, r2
 801ec00:	7013      	strb	r3, [r2, #0]
	uint64_t ms = (timestamp*1000) + ((1000*(uint32_t)(_time.SecondFraction-_time.SubSeconds))/_time.SecondFraction+1);
#else
	RTC_TimeTypeDef _time;
	RTC_DateTypeDef _date;
	uint64_t ms;
	HAL_RTC_GetTime(&hrtc, &_time, RTC_FORMAT_BIN);
 801ec02:	210c      	movs	r1, #12
 801ec04:	000c      	movs	r4, r1
 801ec06:	2328      	movs	r3, #40	; 0x28
 801ec08:	469c      	mov	ip, r3
 801ec0a:	44bc      	add	ip, r7
 801ec0c:	4461      	add	r1, ip
 801ec0e:	4b61      	ldr	r3, [pc, #388]	; (801ed94 <rtc_getTimestampMsRaw+0x1a0>)
 801ec10:	2200      	movs	r2, #0
 801ec12:	0018      	movs	r0, r3
 801ec14:	f7e6 ff7e 	bl	8005b14 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &_date, RTC_FORMAT_BIN);
 801ec18:	2308      	movs	r3, #8
 801ec1a:	2028      	movs	r0, #40	; 0x28
 801ec1c:	183a      	adds	r2, r7, r0
 801ec1e:	18d1      	adds	r1, r2, r3
 801ec20:	4b5c      	ldr	r3, [pc, #368]	; (801ed94 <rtc_getTimestampMsRaw+0x1a0>)
 801ec22:	2200      	movs	r2, #0
 801ec24:	0018      	movs	r0, r3
 801ec26:	f7e7 f87f 	bl	8005d28 <HAL_RTC_GetDate>
	ms  = (uint32_t)_time.Hours*3600*1000;
 801ec2a:	0021      	movs	r1, r4
 801ec2c:	2028      	movs	r0, #40	; 0x28
 801ec2e:	183b      	adds	r3, r7, r0
 801ec30:	185b      	adds	r3, r3, r1
 801ec32:	781b      	ldrb	r3, [r3, #0]
 801ec34:	001a      	movs	r2, r3
 801ec36:	4b58      	ldr	r3, [pc, #352]	; (801ed98 <rtc_getTimestampMsRaw+0x1a4>)
 801ec38:	4353      	muls	r3, r2
 801ec3a:	64bb      	str	r3, [r7, #72]	; 0x48
 801ec3c:	2300      	movs	r3, #0
 801ec3e:	64fb      	str	r3, [r7, #76]	; 0x4c
	ms += (uint32_t)_time.Minutes*60*1000;
 801ec40:	183a      	adds	r2, r7, r0
 801ec42:	1853      	adds	r3, r2, r1
 801ec44:	785b      	ldrb	r3, [r3, #1]
 801ec46:	001a      	movs	r2, r3
 801ec48:	4b54      	ldr	r3, [pc, #336]	; (801ed9c <rtc_getTimestampMsRaw+0x1a8>)
 801ec4a:	4353      	muls	r3, r2
 801ec4c:	623b      	str	r3, [r7, #32]
 801ec4e:	2300      	movs	r3, #0
 801ec50:	627b      	str	r3, [r7, #36]	; 0x24
 801ec52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801ec54:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 801ec56:	6a38      	ldr	r0, [r7, #32]
 801ec58:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801ec5a:	181b      	adds	r3, r3, r0
 801ec5c:	414c      	adcs	r4, r1
 801ec5e:	64bb      	str	r3, [r7, #72]	; 0x48
 801ec60:	64fc      	str	r4, [r7, #76]	; 0x4c
	ms += (uint32_t)_time.Seconds*1000;
 801ec62:	210c      	movs	r1, #12
 801ec64:	0008      	movs	r0, r1
 801ec66:	2328      	movs	r3, #40	; 0x28
 801ec68:	18fa      	adds	r2, r7, r3
 801ec6a:	1853      	adds	r3, r2, r1
 801ec6c:	789b      	ldrb	r3, [r3, #2]
 801ec6e:	001a      	movs	r2, r3
 801ec70:	0013      	movs	r3, r2
 801ec72:	015b      	lsls	r3, r3, #5
 801ec74:	1a9b      	subs	r3, r3, r2
 801ec76:	009b      	lsls	r3, r3, #2
 801ec78:	189b      	adds	r3, r3, r2
 801ec7a:	00db      	lsls	r3, r3, #3
 801ec7c:	61bb      	str	r3, [r7, #24]
 801ec7e:	2300      	movs	r3, #0
 801ec80:	61fb      	str	r3, [r7, #28]
 801ec82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801ec84:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 801ec86:	69b9      	ldr	r1, [r7, #24]
 801ec88:	69fa      	ldr	r2, [r7, #28]
 801ec8a:	185b      	adds	r3, r3, r1
 801ec8c:	4154      	adcs	r4, r2
 801ec8e:	64bb      	str	r3, [r7, #72]	; 0x48
 801ec90:	64fc      	str	r4, [r7, #76]	; 0x4c
	ms += ((1000*(uint32_t)(_time.SecondFraction-_time.SubSeconds))/_time.SecondFraction+1);
 801ec92:	0001      	movs	r1, r0
 801ec94:	2028      	movs	r0, #40	; 0x28
 801ec96:	183b      	adds	r3, r7, r0
 801ec98:	185b      	adds	r3, r3, r1
 801ec9a:	689a      	ldr	r2, [r3, #8]
 801ec9c:	183b      	adds	r3, r7, r0
 801ec9e:	185b      	adds	r3, r3, r1
 801eca0:	685b      	ldr	r3, [r3, #4]
 801eca2:	1ad2      	subs	r2, r2, r3
 801eca4:	0013      	movs	r3, r2
 801eca6:	015b      	lsls	r3, r3, #5
 801eca8:	1a9b      	subs	r3, r3, r2
 801ecaa:	009b      	lsls	r3, r3, #2
 801ecac:	189b      	adds	r3, r3, r2
 801ecae:	00db      	lsls	r3, r3, #3
 801ecb0:	001a      	movs	r2, r3
 801ecb2:	183b      	adds	r3, r7, r0
 801ecb4:	185b      	adds	r3, r3, r1
 801ecb6:	689b      	ldr	r3, [r3, #8]
 801ecb8:	0019      	movs	r1, r3
 801ecba:	0010      	movs	r0, r2
 801ecbc:	f7e1 fa2c 	bl	8000118 <__udivsi3>
 801ecc0:	0003      	movs	r3, r0
 801ecc2:	3301      	adds	r3, #1
 801ecc4:	613b      	str	r3, [r7, #16]
 801ecc6:	2300      	movs	r3, #0
 801ecc8:	617b      	str	r3, [r7, #20]
 801ecca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801eccc:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 801ecce:	6939      	ldr	r1, [r7, #16]
 801ecd0:	697a      	ldr	r2, [r7, #20]
 801ecd2:	185b      	adds	r3, r3, r1
 801ecd4:	4154      	adcs	r4, r2
 801ecd6:	64bb      	str	r3, [r7, #72]	; 0x48
 801ecd8:	64fc      	str	r4, [r7, #76]	; 0x4c

	if ( ms < __rtc_lastTick ) {
 801ecda:	4b31      	ldr	r3, [pc, #196]	; (801eda0 <rtc_getTimestampMsRaw+0x1ac>)
 801ecdc:	681b      	ldr	r3, [r3, #0]
 801ecde:	001d      	movs	r5, r3
 801ece0:	2300      	movs	r3, #0
 801ece2:	001e      	movs	r6, r3
 801ece4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ece6:	42b3      	cmp	r3, r6
 801ece8:	d305      	bcc.n	801ecf6 <rtc_getTimestampMsRaw+0x102>
 801ecea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ecec:	42b3      	cmp	r3, r6
 801ecee:	d107      	bne.n	801ed00 <rtc_getTimestampMsRaw+0x10c>
 801ecf0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801ecf2:	42ab      	cmp	r3, r5
 801ecf4:	d204      	bcs.n	801ed00 <rtc_getTimestampMsRaw+0x10c>
		// day has changed
		__rtc_days++;
 801ecf6:	4b2b      	ldr	r3, [pc, #172]	; (801eda4 <rtc_getTimestampMsRaw+0x1b0>)
 801ecf8:	681b      	ldr	r3, [r3, #0]
 801ecfa:	1c5a      	adds	r2, r3, #1
 801ecfc:	4b29      	ldr	r3, [pc, #164]	; (801eda4 <rtc_getTimestampMsRaw+0x1b0>)
 801ecfe:	601a      	str	r2, [r3, #0]
	}
	__rtc_lastTick = ms;
 801ed00:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801ed02:	4b27      	ldr	r3, [pc, #156]	; (801eda0 <rtc_getTimestampMsRaw+0x1ac>)
 801ed04:	601a      	str	r2, [r3, #0]
	ms = ( uint64_t )((uint64_t)__rtc_days*3600000L*24L)+(uint64_t)ms;
 801ed06:	4b27      	ldr	r3, [pc, #156]	; (801eda4 <rtc_getTimestampMsRaw+0x1b0>)
 801ed08:	681b      	ldr	r3, [r3, #0]
 801ed0a:	60bb      	str	r3, [r7, #8]
 801ed0c:	2300      	movs	r3, #0
 801ed0e:	60fb      	str	r3, [r7, #12]
 801ed10:	4a25      	ldr	r2, [pc, #148]	; (801eda8 <rtc_getTimestampMsRaw+0x1b4>)
 801ed12:	2300      	movs	r3, #0
 801ed14:	68b8      	ldr	r0, [r7, #8]
 801ed16:	68f9      	ldr	r1, [r7, #12]
 801ed18:	f7e1 fbf6 	bl	8000508 <__aeabi_lmul>
 801ed1c:	0003      	movs	r3, r0
 801ed1e:	000c      	movs	r4, r1
 801ed20:	0019      	movs	r1, r3
 801ed22:	0022      	movs	r2, r4
 801ed24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801ed26:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 801ed28:	185b      	adds	r3, r3, r1
 801ed2a:	4154      	adcs	r4, r2
 801ed2c:	64bb      	str	r3, [r7, #72]	; 0x48
 801ed2e:	64fc      	str	r4, [r7, #76]	; 0x4c
#endif
	// apply the RTC clock correction and add previous offset
	#if ITSDK_WITH_CLK_ADJUST > 0
		if (adjust && __rtc_init > 0) {
 801ed30:	232f      	movs	r3, #47	; 0x2f
 801ed32:	18fb      	adds	r3, r7, r3
 801ed34:	781b      	ldrb	r3, [r3, #0]
 801ed36:	2b00      	cmp	r3, #0
 801ed38:	d024      	beq.n	801ed84 <rtc_getTimestampMsRaw+0x190>
 801ed3a:	4b1c      	ldr	r3, [pc, #112]	; (801edac <rtc_getTimestampMsRaw+0x1b8>)
 801ed3c:	781b      	ldrb	r3, [r3, #0]
 801ed3e:	2b00      	cmp	r3, #0
 801ed40:	d020      	beq.n	801ed84 <rtc_getTimestampMsRaw+0x190>
			ms = (ms * (uint64_t)__rtc_currentRatio) / 1000L;
 801ed42:	4b1b      	ldr	r3, [pc, #108]	; (801edb0 <rtc_getTimestampMsRaw+0x1bc>)
 801ed44:	681b      	ldr	r3, [r3, #0]
 801ed46:	603b      	str	r3, [r7, #0]
 801ed48:	2300      	movs	r3, #0
 801ed4a:	607b      	str	r3, [r7, #4]
 801ed4c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801ed4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ed50:	6838      	ldr	r0, [r7, #0]
 801ed52:	6879      	ldr	r1, [r7, #4]
 801ed54:	f7e1 fbd8 	bl	8000508 <__aeabi_lmul>
 801ed58:	0003      	movs	r3, r0
 801ed5a:	000c      	movs	r4, r1
 801ed5c:	0018      	movs	r0, r3
 801ed5e:	0021      	movs	r1, r4
 801ed60:	22fa      	movs	r2, #250	; 0xfa
 801ed62:	0092      	lsls	r2, r2, #2
 801ed64:	2300      	movs	r3, #0
 801ed66:	f7e1 fbaf 	bl	80004c8 <__aeabi_uldivmod>
 801ed6a:	0003      	movs	r3, r0
 801ed6c:	000c      	movs	r4, r1
 801ed6e:	64bb      	str	r3, [r7, #72]	; 0x48
 801ed70:	64fc      	str	r4, [r7, #76]	; 0x4c
			ms += __rtc_offset;
 801ed72:	4b10      	ldr	r3, [pc, #64]	; (801edb4 <rtc_getTimestampMsRaw+0x1c0>)
 801ed74:	685c      	ldr	r4, [r3, #4]
 801ed76:	681b      	ldr	r3, [r3, #0]
 801ed78:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 801ed7a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801ed7c:	185b      	adds	r3, r3, r1
 801ed7e:	4154      	adcs	r4, r2
 801ed80:	64bb      	str	r3, [r7, #72]	; 0x48
 801ed82:	64fc      	str	r4, [r7, #76]	; 0x4c
		}
	#else
		ms = (adjust)?(ms * ITSDK_CLK_CORRECTION) / 1000L:ms;
	#endif
	return ms;
 801ed84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801ed86:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
}
 801ed88:	0018      	movs	r0, r3
 801ed8a:	0021      	movs	r1, r4
 801ed8c:	46bd      	mov	sp, r7
 801ed8e:	b015      	add	sp, #84	; 0x54
 801ed90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ed92:	46c0      	nop			; (mov r8, r8)
 801ed94:	200013d4 	.word	0x200013d4
 801ed98:	0036ee80 	.word	0x0036ee80
 801ed9c:	0000ea60 	.word	0x0000ea60
 801eda0:	200012d8 	.word	0x200012d8
 801eda4:	200012d4 	.word	0x200012d4
 801eda8:	05265c00 	.word	0x05265c00
 801edac:	200012d0 	.word	0x200012d0
 801edb0:	20001760 	.word	0x20001760
 801edb4:	20001768 	.word	0x20001768

0801edb8 <rtc_resetTime>:


/**
 * Reset RTC to 00:00:00.00 at startup
 */
void rtc_resetTime() {
 801edb8:	b580      	push	{r7, lr}
 801edba:	b086      	sub	sp, #24
 801edbc:	af00      	add	r7, sp, #0
	RTC_DateTypeDef _date;
	_date.Year = 0;
 801edbe:	2114      	movs	r1, #20
 801edc0:	187b      	adds	r3, r7, r1
 801edc2:	2200      	movs	r2, #0
 801edc4:	70da      	strb	r2, [r3, #3]
	_date.Month = 1;
 801edc6:	187b      	adds	r3, r7, r1
 801edc8:	2201      	movs	r2, #1
 801edca:	705a      	strb	r2, [r3, #1]
	_date.Date = 1;
 801edcc:	187b      	adds	r3, r7, r1
 801edce:	2201      	movs	r2, #1
 801edd0:	709a      	strb	r2, [r3, #2]
	HAL_RTC_SetDate(&hrtc,&_date,RTC_FORMAT_BIN);
 801edd2:	1879      	adds	r1, r7, r1
 801edd4:	4b11      	ldr	r3, [pc, #68]	; (801ee1c <rtc_resetTime+0x64>)
 801edd6:	2200      	movs	r2, #0
 801edd8:	0018      	movs	r0, r3
 801edda:	f7e6 fef7 	bl	8005bcc <HAL_RTC_SetDate>

	RTC_TimeTypeDef _time;
	_time.Hours 		 = 0x0;
 801edde:	003b      	movs	r3, r7
 801ede0:	2200      	movs	r2, #0
 801ede2:	701a      	strb	r2, [r3, #0]
	_time.Minutes 		 = 0x0;
 801ede4:	003b      	movs	r3, r7
 801ede6:	2200      	movs	r2, #0
 801ede8:	705a      	strb	r2, [r3, #1]
	_time.Seconds 		 = 0x0;
 801edea:	003b      	movs	r3, r7
 801edec:	2200      	movs	r2, #0
 801edee:	709a      	strb	r2, [r3, #2]
	_time.SubSeconds  	 = 0x00;
 801edf0:	003b      	movs	r3, r7
 801edf2:	2200      	movs	r2, #0
 801edf4:	605a      	str	r2, [r3, #4]
	_time.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 801edf6:	003b      	movs	r3, r7
 801edf8:	2200      	movs	r2, #0
 801edfa:	60da      	str	r2, [r3, #12]
	_time.StoreOperation = RTC_STOREOPERATION_RESET;
 801edfc:	003b      	movs	r3, r7
 801edfe:	2200      	movs	r2, #0
 801ee00:	611a      	str	r2, [r3, #16]
	HAL_RTC_SetTime(&hrtc, &_time, RTC_FORMAT_BIN);
 801ee02:	0039      	movs	r1, r7
 801ee04:	4b05      	ldr	r3, [pc, #20]	; (801ee1c <rtc_resetTime+0x64>)
 801ee06:	2200      	movs	r2, #0
 801ee08:	0018      	movs	r0, r3
 801ee0a:	f7e6 fdbf 	bl	800598c <HAL_RTC_SetTime>
	__rtc_lastTick = 0;
 801ee0e:	4b04      	ldr	r3, [pc, #16]	; (801ee20 <rtc_resetTime+0x68>)
 801ee10:	2200      	movs	r2, #0
 801ee12:	601a      	str	r2, [r3, #0]
}
 801ee14:	46c0      	nop			; (mov r8, r8)
 801ee16:	46bd      	mov	sp, r7
 801ee18:	b006      	add	sp, #24
 801ee1a:	bd80      	pop	{r7, pc}
 801ee1c:	200013d4 	.word	0x200013d4
 801ee20:	200012d8 	.word	0x200012d8

0801ee24 <rtc_prepareSleepTime>:

/**
 * Call before any sleep in case there is something to prepare with RTC
 * or others.
 */
void rtc_prepareSleepTime() {
 801ee24:	b580      	push	{r7, lr}
 801ee26:	af00      	add	r7, sp, #0
	__enable_systick=false;
 801ee28:	4b05      	ldr	r3, [pc, #20]	; (801ee40 <rtc_prepareSleepTime+0x1c>)
 801ee2a:	2200      	movs	r2, #0
 801ee2c:	701a      	strb	r2, [r3, #0]

//	HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
//	HAL_PWR_DisableWakeUpPin( PWR_WAKEUP_PIN1 );
//	HAL_PWR_DisableWakeUpPin( PWR_WAKEUP_PIN2 );

	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 801ee2e:	4b05      	ldr	r3, [pc, #20]	; (801ee44 <rtc_prepareSleepTime+0x20>)
 801ee30:	681a      	ldr	r2, [r3, #0]
 801ee32:	4b04      	ldr	r3, [pc, #16]	; (801ee44 <rtc_prepareSleepTime+0x20>)
 801ee34:	2104      	movs	r1, #4
 801ee36:	430a      	orrs	r2, r1
 801ee38:	601a      	str	r2, [r3, #0]
}
 801ee3a:	46c0      	nop			; (mov r8, r8)
 801ee3c:	46bd      	mov	sp, r7
 801ee3e:	bd80      	pop	{r7, pc}
 801ee40:	200000b1 	.word	0x200000b1
 801ee44:	40007000 	.word	0x40007000

0801ee48 <rtc_updateTimeAfterSleepTime>:


/**
 * Get the sleep duration based on RTC counter
 */
void rtc_updateTimeAfterSleepTime() {
 801ee48:	b5b0      	push	{r4, r5, r7, lr}
 801ee4a:	af00      	add	r7, sp, #0

	itsdk_time_set_ms(rtc_getTimestampMs());
 801ee4c:	f7ff fec6 	bl	801ebdc <rtc_getTimestampMs>
 801ee50:	0003      	movs	r3, r0
 801ee52:	000c      	movs	r4, r1
 801ee54:	0018      	movs	r0, r3
 801ee56:	0021      	movs	r1, r4
 801ee58:	f7fe f908 	bl	801d06c <itsdk_time_set_ms>
	__enable_systick=true;
 801ee5c:	4b02      	ldr	r3, [pc, #8]	; (801ee68 <rtc_updateTimeAfterSleepTime+0x20>)
 801ee5e:	2201      	movs	r2, #1
 801ee60:	701a      	strb	r2, [r3, #0]
}
 801ee62:	46c0      	nop			; (mov r8, r8)
 801ee64:	46bd      	mov	sp, r7
 801ee66:	bdb0      	pop	{r4, r5, r7, pc}
 801ee68:	200000b1 	.word	0x200000b1

0801ee6c <HAL_RTCEx_WakeUpTimerEventCallback>:
/**
 * RCT Interrupt handler allowing to chain different function
 */
rtc_irq_chain_t __rtc_irq_chain = { NULL, NULL };
void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 801ee6c:	b580      	push	{r7, lr}
 801ee6e:	b084      	sub	sp, #16
 801ee70:	af00      	add	r7, sp, #0
 801ee72:	6078      	str	r0, [r7, #4]
	rtc_irq_chain_t * c = &__rtc_irq_chain;
 801ee74:	4b0f      	ldr	r3, [pc, #60]	; (801eeb4 <HAL_RTCEx_WakeUpTimerEventCallback+0x48>)
 801ee76:	60fb      	str	r3, [r7, #12]
	while ( c != NULL ) {
 801ee78:	e00c      	b.n	801ee94 <HAL_RTCEx_WakeUpTimerEventCallback+0x28>
		void (*p)(RTC_HandleTypeDef *h) = c->irq_func;
 801ee7a:	68fb      	ldr	r3, [r7, #12]
 801ee7c:	681b      	ldr	r3, [r3, #0]
 801ee7e:	60bb      	str	r3, [r7, #8]
		if ( p != NULL ) {
 801ee80:	68bb      	ldr	r3, [r7, #8]
 801ee82:	2b00      	cmp	r3, #0
 801ee84:	d003      	beq.n	801ee8e <HAL_RTCEx_WakeUpTimerEventCallback+0x22>
			p(hrtc);
 801ee86:	687a      	ldr	r2, [r7, #4]
 801ee88:	68bb      	ldr	r3, [r7, #8]
 801ee8a:	0010      	movs	r0, r2
 801ee8c:	4798      	blx	r3
		}
		c = c->next;
 801ee8e:	68fb      	ldr	r3, [r7, #12]
 801ee90:	685b      	ldr	r3, [r3, #4]
 801ee92:	60fb      	str	r3, [r7, #12]
	while ( c != NULL ) {
 801ee94:	68fb      	ldr	r3, [r7, #12]
 801ee96:	2b00      	cmp	r3, #0
 801ee98:	d1ef      	bne.n	801ee7a <HAL_RTCEx_WakeUpTimerEventCallback+0xe>
	}
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 801ee9a:	4b07      	ldr	r3, [pc, #28]	; (801eeb8 <HAL_RTCEx_WakeUpTimerEventCallback+0x4c>)
 801ee9c:	681a      	ldr	r2, [r3, #0]
 801ee9e:	4b06      	ldr	r3, [pc, #24]	; (801eeb8 <HAL_RTCEx_WakeUpTimerEventCallback+0x4c>)
 801eea0:	2104      	movs	r1, #4
 801eea2:	430a      	orrs	r2, r1
 801eea4:	601a      	str	r2, [r3, #0]
	__lowPower_wakeup_reason=LOWPWR_WAKEUP_RTC;
 801eea6:	4b05      	ldr	r3, [pc, #20]	; (801eebc <HAL_RTCEx_WakeUpTimerEventCallback+0x50>)
 801eea8:	2200      	movs	r2, #0
 801eeaa:	701a      	strb	r2, [r3, #0]
}
 801eeac:	46c0      	nop			; (mov r8, r8)
 801eeae:	46bd      	mov	sp, r7
 801eeb0:	b004      	add	sp, #16
 801eeb2:	bd80      	pop	{r7, pc}
 801eeb4:	200012dc 	.word	0x200012dc
 801eeb8:	40007000 	.word	0x40007000
 801eebc:	200000b0 	.word	0x200000b0

0801eec0 <rtc_adjustTime>:

/**
 * Manage rtc clock adjustement / (re)evaluate the clock ratio
 * Can be called at anytime to reajust
 */
void rtc_adjustTime() {
 801eec0:	b590      	push	{r4, r7, lr}
 801eec2:	b083      	sub	sp, #12
 801eec4:	af00      	add	r7, sp, #0
#if ITSDK_WITH_CLK_ADJUST > 0
	uint32_t newRatio=rtc_calcClockRatio();
 801eec6:	f000 f825 	bl	801ef14 <rtc_calcClockRatio>
 801eeca:	0003      	movs	r3, r0
 801eecc:	607b      	str	r3, [r7, #4]
	if (__rtc_init > 0) {
 801eece:	4b0e      	ldr	r3, [pc, #56]	; (801ef08 <rtc_adjustTime+0x48>)
 801eed0:	781b      	ldrb	r3, [r3, #0]
 801eed2:	2b00      	cmp	r3, #0
 801eed4:	d009      	beq.n	801eeea <rtc_adjustTime+0x2a>
		__rtc_offset = rtc_getTimestampMs();
 801eed6:	f7ff fe81 	bl	801ebdc <rtc_getTimestampMs>
 801eeda:	0003      	movs	r3, r0
 801eedc:	000c      	movs	r4, r1
 801eede:	4a0b      	ldr	r2, [pc, #44]	; (801ef0c <rtc_adjustTime+0x4c>)
 801eee0:	6013      	str	r3, [r2, #0]
 801eee2:	6054      	str	r4, [r2, #4]
		rtc_resetTime();
 801eee4:	f7ff ff68 	bl	801edb8 <rtc_resetTime>
 801eee8:	e004      	b.n	801eef4 <rtc_adjustTime+0x34>
	} else {
		__rtc_offset=0;
 801eeea:	4a08      	ldr	r2, [pc, #32]	; (801ef0c <rtc_adjustTime+0x4c>)
 801eeec:	2300      	movs	r3, #0
 801eeee:	2400      	movs	r4, #0
 801eef0:	6013      	str	r3, [r2, #0]
 801eef2:	6054      	str	r4, [r2, #4]
	}
	__rtc_init=1;
 801eef4:	4b04      	ldr	r3, [pc, #16]	; (801ef08 <rtc_adjustTime+0x48>)
 801eef6:	2201      	movs	r2, #1
 801eef8:	701a      	strb	r2, [r3, #0]
	__rtc_currentRatio=newRatio;
 801eefa:	4b05      	ldr	r3, [pc, #20]	; (801ef10 <rtc_adjustTime+0x50>)
 801eefc:	687a      	ldr	r2, [r7, #4]
 801eefe:	601a      	str	r2, [r3, #0]
#endif
}
 801ef00:	46c0      	nop			; (mov r8, r8)
 801ef02:	46bd      	mov	sp, r7
 801ef04:	b003      	add	sp, #12
 801ef06:	bd90      	pop	{r4, r7, pc}
 801ef08:	200012d0 	.word	0x200012d0
 801ef0c:	20001768 	.word	0x20001768
 801ef10:	20001760 	.word	0x20001760

0801ef14 <rtc_calcClockRatio>:


/**
 * Return the corrected clockRatio => realClock = (calcClockRatio * seenClock)/1000
 */
uint32_t rtc_calcClockRatio() {
 801ef14:	b580      	push	{r7, lr}
 801ef16:	af00      	add	r7, sp, #0
	}

	return (uint32_t)ratio;

#else
	return ITSDK_CLK_CORRECTION;
 801ef18:	23fa      	movs	r3, #250	; 0xfa
 801ef1a:	009b      	lsls	r3, r3, #2
#endif
}
 801ef1c:	0018      	movs	r0, r3
 801ef1e:	46bd      	mov	sp, r7
 801ef20:	bd80      	pop	{r7, pc}
	...

0801ef24 <HAL_IncTick>:

/**
 * Action to be executed on Systick
 * The name vary depending on the Firwmare version ... ST, you make me crazy !
 */
void HAL_IncTick(void) {
 801ef24:	b580      	push	{r7, lr}
 801ef26:	af00      	add	r7, sp, #0
	// add 1ms to the global counter
	if (__enable_systick) itsdk_time_add_us((__TICK_DURATION_US*__systick_ratio)/1000);
 801ef28:	4b10      	ldr	r3, [pc, #64]	; (801ef6c <HAL_IncTick+0x48>)
 801ef2a:	781b      	ldrb	r3, [r3, #0]
 801ef2c:	2b00      	cmp	r3, #0
 801ef2e:	d011      	beq.n	801ef54 <HAL_IncTick+0x30>
 801ef30:	4b0f      	ldr	r3, [pc, #60]	; (801ef70 <HAL_IncTick+0x4c>)
 801ef32:	681a      	ldr	r2, [r3, #0]
 801ef34:	0013      	movs	r3, r2
 801ef36:	015b      	lsls	r3, r3, #5
 801ef38:	1a9b      	subs	r3, r3, r2
 801ef3a:	009b      	lsls	r3, r3, #2
 801ef3c:	189b      	adds	r3, r3, r2
 801ef3e:	009b      	lsls	r3, r3, #2
 801ef40:	001a      	movs	r2, r3
 801ef42:	23fa      	movs	r3, #250	; 0xfa
 801ef44:	0099      	lsls	r1, r3, #2
 801ef46:	0010      	movs	r0, r2
 801ef48:	f7e1 f8e6 	bl	8000118 <__udivsi3>
 801ef4c:	0003      	movs	r3, r0
 801ef4e:	0018      	movs	r0, r3
 801ef50:	f7fe f83e 	bl	801cfd0 <itsdk_time_add_us>
	uwTick++;
 801ef54:	4b07      	ldr	r3, [pc, #28]	; (801ef74 <HAL_IncTick+0x50>)
 801ef56:	681b      	ldr	r3, [r3, #0]
 801ef58:	1c5a      	adds	r2, r3, #1
 801ef5a:	4b06      	ldr	r3, [pc, #24]	; (801ef74 <HAL_IncTick+0x50>)
 801ef5c:	601a      	str	r2, [r3, #0]
	__lowPower_wakeup_reason = LOWPWR_WAKEUP_SYSTICK;
 801ef5e:	4b06      	ldr	r3, [pc, #24]	; (801ef78 <HAL_IncTick+0x54>)
 801ef60:	2202      	movs	r2, #2
 801ef62:	701a      	strb	r2, [r3, #0]
}
 801ef64:	46c0      	nop			; (mov r8, r8)
 801ef66:	46bd      	mov	sp, r7
 801ef68:	bd80      	pop	{r7, pc}
 801ef6a:	46c0      	nop			; (mov r8, r8)
 801ef6c:	200000b1 	.word	0x200000b1
 801ef70:	200000b4 	.word	0x200000b4
 801ef74:	20001564 	.word	0x20001564
 801ef78:	200000b0 	.word	0x200000b0

0801ef7c <systick_adjustTime>:


/**
 * Update the correction tickRatio => realTicks = (calcTickRatio * seenTicks)/1000
 */
void systick_adjustTime() {
 801ef7c:	b590      	push	{r4, r7, lr}
 801ef7e:	b089      	sub	sp, #36	; 0x24
 801ef80:	af00      	add	r7, sp, #0
#if ITSDK_WITH_CLK_ADJUST > 0
	uint64_t start_clk = itsdk_time_get_us()/1000;
 801ef82:	f7fe f8bf 	bl	801d104 <itsdk_time_get_us>
 801ef86:	22fa      	movs	r2, #250	; 0xfa
 801ef88:	0092      	lsls	r2, r2, #2
 801ef8a:	2300      	movs	r3, #0
 801ef8c:	f7e1 fa9c 	bl	80004c8 <__aeabi_uldivmod>
 801ef90:	0003      	movs	r3, r0
 801ef92:	000c      	movs	r4, r1
 801ef94:	613b      	str	r3, [r7, #16]
 801ef96:	617c      	str	r4, [r7, #20]
	#if ITSDK_CLK_BEST_SOURCE == __CLK_BEST_SRC_RTC
		#if ITSDK_WITH_RTC == __RTC_ENABLED
			uint64_t start_rtc = rtc_getTimestampMsRaw(false);
 801ef98:	2000      	movs	r0, #0
 801ef9a:	f7ff fe2b 	bl	801ebf4 <rtc_getTimestampMsRaw>
 801ef9e:	0003      	movs	r3, r0
 801efa0:	000c      	movs	r4, r1
 801efa2:	60bb      	str	r3, [r7, #8]
 801efa4:	60fc      	str	r4, [r7, #12]
			while ( (rtc_getTimestampMsRaw(false)-start_rtc) < 200 );	// wait for 200ms
 801efa6:	46c0      	nop			; (mov r8, r8)
 801efa8:	2000      	movs	r0, #0
 801efaa:	f7ff fe23 	bl	801ebf4 <rtc_getTimestampMsRaw>
 801efae:	000a      	movs	r2, r1
 801efb0:	0001      	movs	r1, r0
 801efb2:	68bb      	ldr	r3, [r7, #8]
 801efb4:	68fc      	ldr	r4, [r7, #12]
 801efb6:	1ac9      	subs	r1, r1, r3
 801efb8:	41a2      	sbcs	r2, r4
 801efba:	000b      	movs	r3, r1
 801efbc:	0014      	movs	r4, r2
 801efbe:	2c00      	cmp	r4, #0
 801efc0:	d103      	bne.n	801efca <systick_adjustTime+0x4e>
 801efc2:	d1f1      	bne.n	801efa8 <systick_adjustTime+0x2c>
 801efc4:	2bc7      	cmp	r3, #199	; 0xc7
 801efc6:	d800      	bhi.n	801efca <systick_adjustTime+0x4e>
 801efc8:	e7ee      	b.n	801efa8 <systick_adjustTime+0x2c>
				0
		);
	#else
		#error 'INVALID BEST CLK SRC'
	#endif
	uint64_t stop_clk = itsdk_time_get_us()/1000;
 801efca:	f7fe f89b 	bl	801d104 <itsdk_time_get_us>
 801efce:	22fa      	movs	r2, #250	; 0xfa
 801efd0:	0092      	lsls	r2, r2, #2
 801efd2:	2300      	movs	r3, #0
 801efd4:	f7e1 fa78 	bl	80004c8 <__aeabi_uldivmod>
 801efd8:	0003      	movs	r3, r0
 801efda:	000c      	movs	r4, r1
 801efdc:	603b      	str	r3, [r7, #0]
 801efde:	607c      	str	r4, [r7, #4]
	uint64_t ratio = (1000*200)/(stop_clk-start_clk);
 801efe0:	6839      	ldr	r1, [r7, #0]
 801efe2:	687a      	ldr	r2, [r7, #4]
 801efe4:	693b      	ldr	r3, [r7, #16]
 801efe6:	697c      	ldr	r4, [r7, #20]
 801efe8:	1ac9      	subs	r1, r1, r3
 801efea:	41a2      	sbcs	r2, r4
 801efec:	000b      	movs	r3, r1
 801efee:	0014      	movs	r4, r2
 801eff0:	001a      	movs	r2, r3
 801eff2:	0023      	movs	r3, r4
 801eff4:	4818      	ldr	r0, [pc, #96]	; (801f058 <systick_adjustTime+0xdc>)
 801eff6:	2100      	movs	r1, #0
 801eff8:	f7e1 fa66 	bl	80004c8 <__aeabi_uldivmod>
 801effc:	0003      	movs	r3, r0
 801effe:	000c      	movs	r4, r1
 801f000:	61bb      	str	r3, [r7, #24]
 801f002:	61fc      	str	r4, [r7, #28]
	//log_info("ticks : %d / 200ms ==> %d\r\n",(int)(stop_clk-start_clk),(int)ratio);

	// Protection against value too bad, sounds like a problem
	if ( ratio > 1400 || ratio < 600 ) {
 801f004:	69fb      	ldr	r3, [r7, #28]
 801f006:	2b00      	cmp	r3, #0
 801f008:	d111      	bne.n	801f02e <systick_adjustTime+0xb2>
 801f00a:	69fb      	ldr	r3, [r7, #28]
 801f00c:	2b00      	cmp	r3, #0
 801f00e:	d104      	bne.n	801f01a <systick_adjustTime+0x9e>
 801f010:	69ba      	ldr	r2, [r7, #24]
 801f012:	23af      	movs	r3, #175	; 0xaf
 801f014:	00db      	lsls	r3, r3, #3
 801f016:	429a      	cmp	r2, r3
 801f018:	d809      	bhi.n	801f02e <systick_adjustTime+0xb2>
 801f01a:	69fb      	ldr	r3, [r7, #28]
 801f01c:	2b00      	cmp	r3, #0
 801f01e:	d113      	bne.n	801f048 <systick_adjustTime+0xcc>
 801f020:	69fb      	ldr	r3, [r7, #28]
 801f022:	2b00      	cmp	r3, #0
 801f024:	d103      	bne.n	801f02e <systick_adjustTime+0xb2>
 801f026:	69bb      	ldr	r3, [r7, #24]
 801f028:	4a0c      	ldr	r2, [pc, #48]	; (801f05c <systick_adjustTime+0xe0>)
 801f02a:	4293      	cmp	r3, r2
 801f02c:	d80c      	bhi.n	801f048 <systick_adjustTime+0xcc>
		ITSDK_ERROR_REPORT(ITSDK_ERROR_TICKS_INVALID_CLKRATIO,(uint16_t)ratio);
 801f02e:	69bb      	ldr	r3, [r7, #24]
 801f030:	69fc      	ldr	r4, [r7, #28]
 801f032:	b29b      	uxth	r3, r3
 801f034:	4a0a      	ldr	r2, [pc, #40]	; (801f060 <systick_adjustTime+0xe4>)
 801f036:	0019      	movs	r1, r3
 801f038:	0010      	movs	r0, r2
 801f03a:	f7fc fd8f 	bl	801bb5c <itsdk_error_report>
		ratio = 1000;
 801f03e:	23fa      	movs	r3, #250	; 0xfa
 801f040:	009b      	lsls	r3, r3, #2
 801f042:	2400      	movs	r4, #0
 801f044:	61bb      	str	r3, [r7, #24]
 801f046:	61fc      	str	r4, [r7, #28]
	}
	__systick_ratio=(uint32_t)ratio;
 801f048:	69ba      	ldr	r2, [r7, #24]
 801f04a:	4b06      	ldr	r3, [pc, #24]	; (801f064 <systick_adjustTime+0xe8>)
 801f04c:	601a      	str	r2, [r3, #0]
#endif
}
 801f04e:	46c0      	nop			; (mov r8, r8)
 801f050:	46bd      	mov	sp, r7
 801f052:	b009      	add	sp, #36	; 0x24
 801f054:	bd90      	pop	{r4, r7, pc}
 801f056:	46c0      	nop			; (mov r8, r8)
 801f058:	00030d40 	.word	0x00030d40
 801f05c:	00000257 	.word	0x00000257
 801f060:	90000061 	.word	0x90000061
 801f064:	200000b4 	.word	0x200000b4

0801f068 <spi_rwRegister>:
_SPI_Status spi_rwRegister(
		SPI_HandleTypeDef * spi,
		uint8_t	* toTransmit,
		uint8_t * toReceive,
		uint8_t   sizeToTransmit
) {
 801f068:	b590      	push	{r4, r7, lr}
 801f06a:	b087      	sub	sp, #28
 801f06c:	af02      	add	r7, sp, #8
 801f06e:	60f8      	str	r0, [r7, #12]
 801f070:	60b9      	str	r1, [r7, #8]
 801f072:	607a      	str	r2, [r7, #4]
 801f074:	001a      	movs	r2, r3
 801f076:	1cfb      	adds	r3, r7, #3
 801f078:	701a      	strb	r2, [r3, #0]
	return (_SPI_Status)HAL_SPI_TransmitReceive(
 801f07a:	1cfb      	adds	r3, r7, #3
 801f07c:	781b      	ldrb	r3, [r3, #0]
 801f07e:	b29c      	uxth	r4, r3
 801f080:	687a      	ldr	r2, [r7, #4]
 801f082:	68b9      	ldr	r1, [r7, #8]
 801f084:	68f8      	ldr	r0, [r7, #12]
 801f086:	2364      	movs	r3, #100	; 0x64
 801f088:	9300      	str	r3, [sp, #0]
 801f08a:	0023      	movs	r3, r4
 801f08c:	f7e7 fa98 	bl	80065c0 <HAL_SPI_TransmitReceive>
 801f090:	0003      	movs	r3, r0
				toTransmit,
				toReceive,
				sizeToTransmit,
				ITSDK_SPI_TIMEOUT
		);
}
 801f092:	0018      	movs	r0, r3
 801f094:	46bd      	mov	sp, r7
 801f096:	b005      	add	sp, #20
 801f098:	bd90      	pop	{r4, r7, pc}

0801f09a <bcopy>:
 801f09a:	000b      	movs	r3, r1
 801f09c:	b510      	push	{r4, lr}
 801f09e:	0001      	movs	r1, r0
 801f0a0:	0018      	movs	r0, r3
 801f0a2:	f000 f83a 	bl	801f11a <memmove>
 801f0a6:	bd10      	pop	{r4, pc}

0801f0a8 <bzero>:
 801f0a8:	b510      	push	{r4, lr}
 801f0aa:	000a      	movs	r2, r1
 801f0ac:	2100      	movs	r1, #0
 801f0ae:	f000 f847 	bl	801f140 <memset>
 801f0b2:	bd10      	pop	{r4, pc}

0801f0b4 <__errno>:
 801f0b4:	4b01      	ldr	r3, [pc, #4]	; (801f0bc <__errno+0x8>)
 801f0b6:	6818      	ldr	r0, [r3, #0]
 801f0b8:	4770      	bx	lr
 801f0ba:	46c0      	nop			; (mov r8, r8)
 801f0bc:	200000b8 	.word	0x200000b8

0801f0c0 <__libc_init_array>:
 801f0c0:	b570      	push	{r4, r5, r6, lr}
 801f0c2:	2600      	movs	r6, #0
 801f0c4:	4d0c      	ldr	r5, [pc, #48]	; (801f0f8 <__libc_init_array+0x38>)
 801f0c6:	4c0d      	ldr	r4, [pc, #52]	; (801f0fc <__libc_init_array+0x3c>)
 801f0c8:	1b64      	subs	r4, r4, r5
 801f0ca:	10a4      	asrs	r4, r4, #2
 801f0cc:	42a6      	cmp	r6, r4
 801f0ce:	d109      	bne.n	801f0e4 <__libc_init_array+0x24>
 801f0d0:	2600      	movs	r6, #0
 801f0d2:	f001 faaf 	bl	8020634 <_init>
 801f0d6:	4d0a      	ldr	r5, [pc, #40]	; (801f100 <__libc_init_array+0x40>)
 801f0d8:	4c0a      	ldr	r4, [pc, #40]	; (801f104 <__libc_init_array+0x44>)
 801f0da:	1b64      	subs	r4, r4, r5
 801f0dc:	10a4      	asrs	r4, r4, #2
 801f0de:	42a6      	cmp	r6, r4
 801f0e0:	d105      	bne.n	801f0ee <__libc_init_array+0x2e>
 801f0e2:	bd70      	pop	{r4, r5, r6, pc}
 801f0e4:	00b3      	lsls	r3, r6, #2
 801f0e6:	58eb      	ldr	r3, [r5, r3]
 801f0e8:	4798      	blx	r3
 801f0ea:	3601      	adds	r6, #1
 801f0ec:	e7ee      	b.n	801f0cc <__libc_init_array+0xc>
 801f0ee:	00b3      	lsls	r3, r6, #2
 801f0f0:	58eb      	ldr	r3, [r5, r3]
 801f0f2:	4798      	blx	r3
 801f0f4:	3601      	adds	r6, #1
 801f0f6:	e7f2      	b.n	801f0de <__libc_init_array+0x1e>
 801f0f8:	080225c8 	.word	0x080225c8
 801f0fc:	080225c8 	.word	0x080225c8
 801f100:	080225c8 	.word	0x080225c8
 801f104:	080225cc 	.word	0x080225cc

0801f108 <memcpy>:
 801f108:	2300      	movs	r3, #0
 801f10a:	b510      	push	{r4, lr}
 801f10c:	429a      	cmp	r2, r3
 801f10e:	d100      	bne.n	801f112 <memcpy+0xa>
 801f110:	bd10      	pop	{r4, pc}
 801f112:	5ccc      	ldrb	r4, [r1, r3]
 801f114:	54c4      	strb	r4, [r0, r3]
 801f116:	3301      	adds	r3, #1
 801f118:	e7f8      	b.n	801f10c <memcpy+0x4>

0801f11a <memmove>:
 801f11a:	b510      	push	{r4, lr}
 801f11c:	4288      	cmp	r0, r1
 801f11e:	d902      	bls.n	801f126 <memmove+0xc>
 801f120:	188b      	adds	r3, r1, r2
 801f122:	4298      	cmp	r0, r3
 801f124:	d303      	bcc.n	801f12e <memmove+0x14>
 801f126:	2300      	movs	r3, #0
 801f128:	e007      	b.n	801f13a <memmove+0x20>
 801f12a:	5c8b      	ldrb	r3, [r1, r2]
 801f12c:	5483      	strb	r3, [r0, r2]
 801f12e:	3a01      	subs	r2, #1
 801f130:	d2fb      	bcs.n	801f12a <memmove+0x10>
 801f132:	bd10      	pop	{r4, pc}
 801f134:	5ccc      	ldrb	r4, [r1, r3]
 801f136:	54c4      	strb	r4, [r0, r3]
 801f138:	3301      	adds	r3, #1
 801f13a:	429a      	cmp	r2, r3
 801f13c:	d1fa      	bne.n	801f134 <memmove+0x1a>
 801f13e:	e7f8      	b.n	801f132 <memmove+0x18>

0801f140 <memset>:
 801f140:	0003      	movs	r3, r0
 801f142:	1812      	adds	r2, r2, r0
 801f144:	4293      	cmp	r3, r2
 801f146:	d100      	bne.n	801f14a <memset+0xa>
 801f148:	4770      	bx	lr
 801f14a:	7019      	strb	r1, [r3, #0]
 801f14c:	3301      	adds	r3, #1
 801f14e:	e7f9      	b.n	801f144 <memset+0x4>

0801f150 <siscanf>:
 801f150:	b40e      	push	{r1, r2, r3}
 801f152:	2381      	movs	r3, #129	; 0x81
 801f154:	b570      	push	{r4, r5, r6, lr}
 801f156:	b09d      	sub	sp, #116	; 0x74
 801f158:	ac02      	add	r4, sp, #8
 801f15a:	ad21      	add	r5, sp, #132	; 0x84
 801f15c:	009b      	lsls	r3, r3, #2
 801f15e:	cd40      	ldmia	r5!, {r6}
 801f160:	81a3      	strh	r3, [r4, #12]
 801f162:	9002      	str	r0, [sp, #8]
 801f164:	9006      	str	r0, [sp, #24]
 801f166:	f7e0 ffcf 	bl	8000108 <strlen>
 801f16a:	4b0b      	ldr	r3, [pc, #44]	; (801f198 <siscanf+0x48>)
 801f16c:	6060      	str	r0, [r4, #4]
 801f16e:	6263      	str	r3, [r4, #36]	; 0x24
 801f170:	2300      	movs	r3, #0
 801f172:	6160      	str	r0, [r4, #20]
 801f174:	4809      	ldr	r0, [pc, #36]	; (801f19c <siscanf+0x4c>)
 801f176:	6363      	str	r3, [r4, #52]	; 0x34
 801f178:	64a3      	str	r3, [r4, #72]	; 0x48
 801f17a:	3b01      	subs	r3, #1
 801f17c:	81e3      	strh	r3, [r4, #14]
 801f17e:	0032      	movs	r2, r6
 801f180:	002b      	movs	r3, r5
 801f182:	0021      	movs	r1, r4
 801f184:	6800      	ldr	r0, [r0, #0]
 801f186:	9501      	str	r5, [sp, #4]
 801f188:	f000 fa00 	bl	801f58c <__ssvfiscanf_r>
 801f18c:	b01d      	add	sp, #116	; 0x74
 801f18e:	bc70      	pop	{r4, r5, r6}
 801f190:	bc08      	pop	{r3}
 801f192:	b003      	add	sp, #12
 801f194:	4718      	bx	r3
 801f196:	46c0      	nop			; (mov r8, r8)
 801f198:	0801f1a1 	.word	0x0801f1a1
 801f19c:	200000b8 	.word	0x200000b8

0801f1a0 <__seofread>:
 801f1a0:	2000      	movs	r0, #0
 801f1a2:	4770      	bx	lr

0801f1a4 <_vsniprintf_r>:
 801f1a4:	b530      	push	{r4, r5, lr}
 801f1a6:	0014      	movs	r4, r2
 801f1a8:	b09b      	sub	sp, #108	; 0x6c
 801f1aa:	0005      	movs	r5, r0
 801f1ac:	001a      	movs	r2, r3
 801f1ae:	2c00      	cmp	r4, #0
 801f1b0:	da05      	bge.n	801f1be <_vsniprintf_r+0x1a>
 801f1b2:	238b      	movs	r3, #139	; 0x8b
 801f1b4:	6003      	str	r3, [r0, #0]
 801f1b6:	2001      	movs	r0, #1
 801f1b8:	4240      	negs	r0, r0
 801f1ba:	b01b      	add	sp, #108	; 0x6c
 801f1bc:	bd30      	pop	{r4, r5, pc}
 801f1be:	2382      	movs	r3, #130	; 0x82
 801f1c0:	4668      	mov	r0, sp
 801f1c2:	009b      	lsls	r3, r3, #2
 801f1c4:	8183      	strh	r3, [r0, #12]
 801f1c6:	2300      	movs	r3, #0
 801f1c8:	9100      	str	r1, [sp, #0]
 801f1ca:	9104      	str	r1, [sp, #16]
 801f1cc:	429c      	cmp	r4, r3
 801f1ce:	d000      	beq.n	801f1d2 <_vsniprintf_r+0x2e>
 801f1d0:	1e63      	subs	r3, r4, #1
 801f1d2:	9302      	str	r3, [sp, #8]
 801f1d4:	9305      	str	r3, [sp, #20]
 801f1d6:	2301      	movs	r3, #1
 801f1d8:	4669      	mov	r1, sp
 801f1da:	425b      	negs	r3, r3
 801f1dc:	81cb      	strh	r3, [r1, #14]
 801f1de:	0028      	movs	r0, r5
 801f1e0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801f1e2:	f000 f879 	bl	801f2d8 <_svfiprintf_r>
 801f1e6:	1c43      	adds	r3, r0, #1
 801f1e8:	da01      	bge.n	801f1ee <_vsniprintf_r+0x4a>
 801f1ea:	238b      	movs	r3, #139	; 0x8b
 801f1ec:	602b      	str	r3, [r5, #0]
 801f1ee:	2c00      	cmp	r4, #0
 801f1f0:	d0e3      	beq.n	801f1ba <_vsniprintf_r+0x16>
 801f1f2:	2300      	movs	r3, #0
 801f1f4:	9a00      	ldr	r2, [sp, #0]
 801f1f6:	7013      	strb	r3, [r2, #0]
 801f1f8:	e7df      	b.n	801f1ba <_vsniprintf_r+0x16>
	...

0801f1fc <vsniprintf>:
 801f1fc:	b507      	push	{r0, r1, r2, lr}
 801f1fe:	9300      	str	r3, [sp, #0]
 801f200:	0013      	movs	r3, r2
 801f202:	000a      	movs	r2, r1
 801f204:	0001      	movs	r1, r0
 801f206:	4802      	ldr	r0, [pc, #8]	; (801f210 <vsniprintf+0x14>)
 801f208:	6800      	ldr	r0, [r0, #0]
 801f20a:	f7ff ffcb 	bl	801f1a4 <_vsniprintf_r>
 801f20e:	bd0e      	pop	{r1, r2, r3, pc}
 801f210:	200000b8 	.word	0x200000b8

0801f214 <__ssputs_r>:
 801f214:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f216:	688e      	ldr	r6, [r1, #8]
 801f218:	b085      	sub	sp, #20
 801f21a:	0007      	movs	r7, r0
 801f21c:	000c      	movs	r4, r1
 801f21e:	9203      	str	r2, [sp, #12]
 801f220:	9301      	str	r3, [sp, #4]
 801f222:	429e      	cmp	r6, r3
 801f224:	d83c      	bhi.n	801f2a0 <__ssputs_r+0x8c>
 801f226:	2390      	movs	r3, #144	; 0x90
 801f228:	898a      	ldrh	r2, [r1, #12]
 801f22a:	00db      	lsls	r3, r3, #3
 801f22c:	421a      	tst	r2, r3
 801f22e:	d034      	beq.n	801f29a <__ssputs_r+0x86>
 801f230:	2503      	movs	r5, #3
 801f232:	6909      	ldr	r1, [r1, #16]
 801f234:	6823      	ldr	r3, [r4, #0]
 801f236:	1a5b      	subs	r3, r3, r1
 801f238:	9302      	str	r3, [sp, #8]
 801f23a:	6963      	ldr	r3, [r4, #20]
 801f23c:	9802      	ldr	r0, [sp, #8]
 801f23e:	435d      	muls	r5, r3
 801f240:	0feb      	lsrs	r3, r5, #31
 801f242:	195d      	adds	r5, r3, r5
 801f244:	9b01      	ldr	r3, [sp, #4]
 801f246:	106d      	asrs	r5, r5, #1
 801f248:	3301      	adds	r3, #1
 801f24a:	181b      	adds	r3, r3, r0
 801f24c:	42ab      	cmp	r3, r5
 801f24e:	d900      	bls.n	801f252 <__ssputs_r+0x3e>
 801f250:	001d      	movs	r5, r3
 801f252:	0553      	lsls	r3, r2, #21
 801f254:	d532      	bpl.n	801f2bc <__ssputs_r+0xa8>
 801f256:	0029      	movs	r1, r5
 801f258:	0038      	movs	r0, r7
 801f25a:	f000 fff1 	bl	8020240 <_malloc_r>
 801f25e:	1e06      	subs	r6, r0, #0
 801f260:	d109      	bne.n	801f276 <__ssputs_r+0x62>
 801f262:	230c      	movs	r3, #12
 801f264:	603b      	str	r3, [r7, #0]
 801f266:	2340      	movs	r3, #64	; 0x40
 801f268:	2001      	movs	r0, #1
 801f26a:	89a2      	ldrh	r2, [r4, #12]
 801f26c:	4240      	negs	r0, r0
 801f26e:	4313      	orrs	r3, r2
 801f270:	81a3      	strh	r3, [r4, #12]
 801f272:	b005      	add	sp, #20
 801f274:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f276:	9a02      	ldr	r2, [sp, #8]
 801f278:	6921      	ldr	r1, [r4, #16]
 801f27a:	f7ff ff45 	bl	801f108 <memcpy>
 801f27e:	89a3      	ldrh	r3, [r4, #12]
 801f280:	4a14      	ldr	r2, [pc, #80]	; (801f2d4 <__ssputs_r+0xc0>)
 801f282:	401a      	ands	r2, r3
 801f284:	2380      	movs	r3, #128	; 0x80
 801f286:	4313      	orrs	r3, r2
 801f288:	81a3      	strh	r3, [r4, #12]
 801f28a:	9b02      	ldr	r3, [sp, #8]
 801f28c:	6126      	str	r6, [r4, #16]
 801f28e:	18f6      	adds	r6, r6, r3
 801f290:	6026      	str	r6, [r4, #0]
 801f292:	6165      	str	r5, [r4, #20]
 801f294:	9e01      	ldr	r6, [sp, #4]
 801f296:	1aed      	subs	r5, r5, r3
 801f298:	60a5      	str	r5, [r4, #8]
 801f29a:	9b01      	ldr	r3, [sp, #4]
 801f29c:	429e      	cmp	r6, r3
 801f29e:	d900      	bls.n	801f2a2 <__ssputs_r+0x8e>
 801f2a0:	9e01      	ldr	r6, [sp, #4]
 801f2a2:	0032      	movs	r2, r6
 801f2a4:	9903      	ldr	r1, [sp, #12]
 801f2a6:	6820      	ldr	r0, [r4, #0]
 801f2a8:	f7ff ff37 	bl	801f11a <memmove>
 801f2ac:	68a3      	ldr	r3, [r4, #8]
 801f2ae:	2000      	movs	r0, #0
 801f2b0:	1b9b      	subs	r3, r3, r6
 801f2b2:	60a3      	str	r3, [r4, #8]
 801f2b4:	6823      	ldr	r3, [r4, #0]
 801f2b6:	199e      	adds	r6, r3, r6
 801f2b8:	6026      	str	r6, [r4, #0]
 801f2ba:	e7da      	b.n	801f272 <__ssputs_r+0x5e>
 801f2bc:	002a      	movs	r2, r5
 801f2be:	0038      	movs	r0, r7
 801f2c0:	f001 f81c 	bl	80202fc <_realloc_r>
 801f2c4:	1e06      	subs	r6, r0, #0
 801f2c6:	d1e0      	bne.n	801f28a <__ssputs_r+0x76>
 801f2c8:	6921      	ldr	r1, [r4, #16]
 801f2ca:	0038      	movs	r0, r7
 801f2cc:	f000 ff6e 	bl	80201ac <_free_r>
 801f2d0:	e7c7      	b.n	801f262 <__ssputs_r+0x4e>
 801f2d2:	46c0      	nop			; (mov r8, r8)
 801f2d4:	fffffb7f 	.word	0xfffffb7f

0801f2d8 <_svfiprintf_r>:
 801f2d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f2da:	b0a1      	sub	sp, #132	; 0x84
 801f2dc:	9003      	str	r0, [sp, #12]
 801f2de:	001d      	movs	r5, r3
 801f2e0:	898b      	ldrh	r3, [r1, #12]
 801f2e2:	000f      	movs	r7, r1
 801f2e4:	0016      	movs	r6, r2
 801f2e6:	061b      	lsls	r3, r3, #24
 801f2e8:	d511      	bpl.n	801f30e <_svfiprintf_r+0x36>
 801f2ea:	690b      	ldr	r3, [r1, #16]
 801f2ec:	2b00      	cmp	r3, #0
 801f2ee:	d10e      	bne.n	801f30e <_svfiprintf_r+0x36>
 801f2f0:	2140      	movs	r1, #64	; 0x40
 801f2f2:	f000 ffa5 	bl	8020240 <_malloc_r>
 801f2f6:	6038      	str	r0, [r7, #0]
 801f2f8:	6138      	str	r0, [r7, #16]
 801f2fa:	2800      	cmp	r0, #0
 801f2fc:	d105      	bne.n	801f30a <_svfiprintf_r+0x32>
 801f2fe:	230c      	movs	r3, #12
 801f300:	9a03      	ldr	r2, [sp, #12]
 801f302:	3801      	subs	r0, #1
 801f304:	6013      	str	r3, [r2, #0]
 801f306:	b021      	add	sp, #132	; 0x84
 801f308:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f30a:	2340      	movs	r3, #64	; 0x40
 801f30c:	617b      	str	r3, [r7, #20]
 801f30e:	2300      	movs	r3, #0
 801f310:	ac08      	add	r4, sp, #32
 801f312:	6163      	str	r3, [r4, #20]
 801f314:	3320      	adds	r3, #32
 801f316:	7663      	strb	r3, [r4, #25]
 801f318:	3310      	adds	r3, #16
 801f31a:	76a3      	strb	r3, [r4, #26]
 801f31c:	9507      	str	r5, [sp, #28]
 801f31e:	0035      	movs	r5, r6
 801f320:	782b      	ldrb	r3, [r5, #0]
 801f322:	2b00      	cmp	r3, #0
 801f324:	d001      	beq.n	801f32a <_svfiprintf_r+0x52>
 801f326:	2b25      	cmp	r3, #37	; 0x25
 801f328:	d146      	bne.n	801f3b8 <_svfiprintf_r+0xe0>
 801f32a:	1bab      	subs	r3, r5, r6
 801f32c:	9305      	str	r3, [sp, #20]
 801f32e:	d00c      	beq.n	801f34a <_svfiprintf_r+0x72>
 801f330:	0032      	movs	r2, r6
 801f332:	0039      	movs	r1, r7
 801f334:	9803      	ldr	r0, [sp, #12]
 801f336:	f7ff ff6d 	bl	801f214 <__ssputs_r>
 801f33a:	1c43      	adds	r3, r0, #1
 801f33c:	d100      	bne.n	801f340 <_svfiprintf_r+0x68>
 801f33e:	e0ae      	b.n	801f49e <_svfiprintf_r+0x1c6>
 801f340:	6962      	ldr	r2, [r4, #20]
 801f342:	9b05      	ldr	r3, [sp, #20]
 801f344:	4694      	mov	ip, r2
 801f346:	4463      	add	r3, ip
 801f348:	6163      	str	r3, [r4, #20]
 801f34a:	782b      	ldrb	r3, [r5, #0]
 801f34c:	2b00      	cmp	r3, #0
 801f34e:	d100      	bne.n	801f352 <_svfiprintf_r+0x7a>
 801f350:	e0a5      	b.n	801f49e <_svfiprintf_r+0x1c6>
 801f352:	2201      	movs	r2, #1
 801f354:	2300      	movs	r3, #0
 801f356:	4252      	negs	r2, r2
 801f358:	6062      	str	r2, [r4, #4]
 801f35a:	a904      	add	r1, sp, #16
 801f35c:	3254      	adds	r2, #84	; 0x54
 801f35e:	1852      	adds	r2, r2, r1
 801f360:	1c6e      	adds	r6, r5, #1
 801f362:	6023      	str	r3, [r4, #0]
 801f364:	60e3      	str	r3, [r4, #12]
 801f366:	60a3      	str	r3, [r4, #8]
 801f368:	7013      	strb	r3, [r2, #0]
 801f36a:	65a3      	str	r3, [r4, #88]	; 0x58
 801f36c:	7831      	ldrb	r1, [r6, #0]
 801f36e:	2205      	movs	r2, #5
 801f370:	4853      	ldr	r0, [pc, #332]	; (801f4c0 <_svfiprintf_r+0x1e8>)
 801f372:	f000 ff0f 	bl	8020194 <memchr>
 801f376:	1c75      	adds	r5, r6, #1
 801f378:	2800      	cmp	r0, #0
 801f37a:	d11f      	bne.n	801f3bc <_svfiprintf_r+0xe4>
 801f37c:	6822      	ldr	r2, [r4, #0]
 801f37e:	06d3      	lsls	r3, r2, #27
 801f380:	d504      	bpl.n	801f38c <_svfiprintf_r+0xb4>
 801f382:	2353      	movs	r3, #83	; 0x53
 801f384:	a904      	add	r1, sp, #16
 801f386:	185b      	adds	r3, r3, r1
 801f388:	2120      	movs	r1, #32
 801f38a:	7019      	strb	r1, [r3, #0]
 801f38c:	0713      	lsls	r3, r2, #28
 801f38e:	d504      	bpl.n	801f39a <_svfiprintf_r+0xc2>
 801f390:	2353      	movs	r3, #83	; 0x53
 801f392:	a904      	add	r1, sp, #16
 801f394:	185b      	adds	r3, r3, r1
 801f396:	212b      	movs	r1, #43	; 0x2b
 801f398:	7019      	strb	r1, [r3, #0]
 801f39a:	7833      	ldrb	r3, [r6, #0]
 801f39c:	2b2a      	cmp	r3, #42	; 0x2a
 801f39e:	d016      	beq.n	801f3ce <_svfiprintf_r+0xf6>
 801f3a0:	0035      	movs	r5, r6
 801f3a2:	2100      	movs	r1, #0
 801f3a4:	200a      	movs	r0, #10
 801f3a6:	68e3      	ldr	r3, [r4, #12]
 801f3a8:	782a      	ldrb	r2, [r5, #0]
 801f3aa:	1c6e      	adds	r6, r5, #1
 801f3ac:	3a30      	subs	r2, #48	; 0x30
 801f3ae:	2a09      	cmp	r2, #9
 801f3b0:	d94e      	bls.n	801f450 <_svfiprintf_r+0x178>
 801f3b2:	2900      	cmp	r1, #0
 801f3b4:	d018      	beq.n	801f3e8 <_svfiprintf_r+0x110>
 801f3b6:	e010      	b.n	801f3da <_svfiprintf_r+0x102>
 801f3b8:	3501      	adds	r5, #1
 801f3ba:	e7b1      	b.n	801f320 <_svfiprintf_r+0x48>
 801f3bc:	4b40      	ldr	r3, [pc, #256]	; (801f4c0 <_svfiprintf_r+0x1e8>)
 801f3be:	6822      	ldr	r2, [r4, #0]
 801f3c0:	1ac0      	subs	r0, r0, r3
 801f3c2:	2301      	movs	r3, #1
 801f3c4:	4083      	lsls	r3, r0
 801f3c6:	4313      	orrs	r3, r2
 801f3c8:	6023      	str	r3, [r4, #0]
 801f3ca:	002e      	movs	r6, r5
 801f3cc:	e7ce      	b.n	801f36c <_svfiprintf_r+0x94>
 801f3ce:	9b07      	ldr	r3, [sp, #28]
 801f3d0:	1d19      	adds	r1, r3, #4
 801f3d2:	681b      	ldr	r3, [r3, #0]
 801f3d4:	9107      	str	r1, [sp, #28]
 801f3d6:	2b00      	cmp	r3, #0
 801f3d8:	db01      	blt.n	801f3de <_svfiprintf_r+0x106>
 801f3da:	930b      	str	r3, [sp, #44]	; 0x2c
 801f3dc:	e004      	b.n	801f3e8 <_svfiprintf_r+0x110>
 801f3de:	425b      	negs	r3, r3
 801f3e0:	60e3      	str	r3, [r4, #12]
 801f3e2:	2302      	movs	r3, #2
 801f3e4:	4313      	orrs	r3, r2
 801f3e6:	6023      	str	r3, [r4, #0]
 801f3e8:	782b      	ldrb	r3, [r5, #0]
 801f3ea:	2b2e      	cmp	r3, #46	; 0x2e
 801f3ec:	d10a      	bne.n	801f404 <_svfiprintf_r+0x12c>
 801f3ee:	786b      	ldrb	r3, [r5, #1]
 801f3f0:	2b2a      	cmp	r3, #42	; 0x2a
 801f3f2:	d135      	bne.n	801f460 <_svfiprintf_r+0x188>
 801f3f4:	9b07      	ldr	r3, [sp, #28]
 801f3f6:	3502      	adds	r5, #2
 801f3f8:	1d1a      	adds	r2, r3, #4
 801f3fa:	681b      	ldr	r3, [r3, #0]
 801f3fc:	9207      	str	r2, [sp, #28]
 801f3fe:	2b00      	cmp	r3, #0
 801f400:	db2b      	blt.n	801f45a <_svfiprintf_r+0x182>
 801f402:	9309      	str	r3, [sp, #36]	; 0x24
 801f404:	4e2f      	ldr	r6, [pc, #188]	; (801f4c4 <_svfiprintf_r+0x1ec>)
 801f406:	7829      	ldrb	r1, [r5, #0]
 801f408:	2203      	movs	r2, #3
 801f40a:	0030      	movs	r0, r6
 801f40c:	f000 fec2 	bl	8020194 <memchr>
 801f410:	2800      	cmp	r0, #0
 801f412:	d006      	beq.n	801f422 <_svfiprintf_r+0x14a>
 801f414:	2340      	movs	r3, #64	; 0x40
 801f416:	1b80      	subs	r0, r0, r6
 801f418:	4083      	lsls	r3, r0
 801f41a:	6822      	ldr	r2, [r4, #0]
 801f41c:	3501      	adds	r5, #1
 801f41e:	4313      	orrs	r3, r2
 801f420:	6023      	str	r3, [r4, #0]
 801f422:	7829      	ldrb	r1, [r5, #0]
 801f424:	2206      	movs	r2, #6
 801f426:	4828      	ldr	r0, [pc, #160]	; (801f4c8 <_svfiprintf_r+0x1f0>)
 801f428:	1c6e      	adds	r6, r5, #1
 801f42a:	7621      	strb	r1, [r4, #24]
 801f42c:	f000 feb2 	bl	8020194 <memchr>
 801f430:	2800      	cmp	r0, #0
 801f432:	d03c      	beq.n	801f4ae <_svfiprintf_r+0x1d6>
 801f434:	4b25      	ldr	r3, [pc, #148]	; (801f4cc <_svfiprintf_r+0x1f4>)
 801f436:	2b00      	cmp	r3, #0
 801f438:	d125      	bne.n	801f486 <_svfiprintf_r+0x1ae>
 801f43a:	2207      	movs	r2, #7
 801f43c:	9b07      	ldr	r3, [sp, #28]
 801f43e:	3307      	adds	r3, #7
 801f440:	4393      	bics	r3, r2
 801f442:	3308      	adds	r3, #8
 801f444:	9307      	str	r3, [sp, #28]
 801f446:	6963      	ldr	r3, [r4, #20]
 801f448:	9a04      	ldr	r2, [sp, #16]
 801f44a:	189b      	adds	r3, r3, r2
 801f44c:	6163      	str	r3, [r4, #20]
 801f44e:	e766      	b.n	801f31e <_svfiprintf_r+0x46>
 801f450:	4343      	muls	r3, r0
 801f452:	2101      	movs	r1, #1
 801f454:	189b      	adds	r3, r3, r2
 801f456:	0035      	movs	r5, r6
 801f458:	e7a6      	b.n	801f3a8 <_svfiprintf_r+0xd0>
 801f45a:	2301      	movs	r3, #1
 801f45c:	425b      	negs	r3, r3
 801f45e:	e7d0      	b.n	801f402 <_svfiprintf_r+0x12a>
 801f460:	2300      	movs	r3, #0
 801f462:	200a      	movs	r0, #10
 801f464:	001a      	movs	r2, r3
 801f466:	3501      	adds	r5, #1
 801f468:	6063      	str	r3, [r4, #4]
 801f46a:	7829      	ldrb	r1, [r5, #0]
 801f46c:	1c6e      	adds	r6, r5, #1
 801f46e:	3930      	subs	r1, #48	; 0x30
 801f470:	2909      	cmp	r1, #9
 801f472:	d903      	bls.n	801f47c <_svfiprintf_r+0x1a4>
 801f474:	2b00      	cmp	r3, #0
 801f476:	d0c5      	beq.n	801f404 <_svfiprintf_r+0x12c>
 801f478:	9209      	str	r2, [sp, #36]	; 0x24
 801f47a:	e7c3      	b.n	801f404 <_svfiprintf_r+0x12c>
 801f47c:	4342      	muls	r2, r0
 801f47e:	2301      	movs	r3, #1
 801f480:	1852      	adds	r2, r2, r1
 801f482:	0035      	movs	r5, r6
 801f484:	e7f1      	b.n	801f46a <_svfiprintf_r+0x192>
 801f486:	ab07      	add	r3, sp, #28
 801f488:	9300      	str	r3, [sp, #0]
 801f48a:	003a      	movs	r2, r7
 801f48c:	4b10      	ldr	r3, [pc, #64]	; (801f4d0 <_svfiprintf_r+0x1f8>)
 801f48e:	0021      	movs	r1, r4
 801f490:	9803      	ldr	r0, [sp, #12]
 801f492:	e000      	b.n	801f496 <_svfiprintf_r+0x1be>
 801f494:	bf00      	nop
 801f496:	9004      	str	r0, [sp, #16]
 801f498:	9b04      	ldr	r3, [sp, #16]
 801f49a:	3301      	adds	r3, #1
 801f49c:	d1d3      	bne.n	801f446 <_svfiprintf_r+0x16e>
 801f49e:	89bb      	ldrh	r3, [r7, #12]
 801f4a0:	980d      	ldr	r0, [sp, #52]	; 0x34
 801f4a2:	065b      	lsls	r3, r3, #25
 801f4a4:	d400      	bmi.n	801f4a8 <_svfiprintf_r+0x1d0>
 801f4a6:	e72e      	b.n	801f306 <_svfiprintf_r+0x2e>
 801f4a8:	2001      	movs	r0, #1
 801f4aa:	4240      	negs	r0, r0
 801f4ac:	e72b      	b.n	801f306 <_svfiprintf_r+0x2e>
 801f4ae:	ab07      	add	r3, sp, #28
 801f4b0:	9300      	str	r3, [sp, #0]
 801f4b2:	003a      	movs	r2, r7
 801f4b4:	4b06      	ldr	r3, [pc, #24]	; (801f4d0 <_svfiprintf_r+0x1f8>)
 801f4b6:	0021      	movs	r1, r4
 801f4b8:	9803      	ldr	r0, [sp, #12]
 801f4ba:	f000 fa43 	bl	801f944 <_printf_i>
 801f4be:	e7ea      	b.n	801f496 <_svfiprintf_r+0x1be>
 801f4c0:	08022404 	.word	0x08022404
 801f4c4:	0802240a 	.word	0x0802240a
 801f4c8:	0802240e 	.word	0x0802240e
 801f4cc:	00000000 	.word	0x00000000
 801f4d0:	0801f215 	.word	0x0801f215

0801f4d4 <_sungetc_r>:
 801f4d4:	b570      	push	{r4, r5, r6, lr}
 801f4d6:	0014      	movs	r4, r2
 801f4d8:	1c4b      	adds	r3, r1, #1
 801f4da:	d103      	bne.n	801f4e4 <_sungetc_r+0x10>
 801f4dc:	2501      	movs	r5, #1
 801f4de:	426d      	negs	r5, r5
 801f4e0:	0028      	movs	r0, r5
 801f4e2:	bd70      	pop	{r4, r5, r6, pc}
 801f4e4:	8993      	ldrh	r3, [r2, #12]
 801f4e6:	2220      	movs	r2, #32
 801f4e8:	4393      	bics	r3, r2
 801f4ea:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801f4ec:	81a3      	strh	r3, [r4, #12]
 801f4ee:	b2ce      	uxtb	r6, r1
 801f4f0:	b2cd      	uxtb	r5, r1
 801f4f2:	6863      	ldr	r3, [r4, #4]
 801f4f4:	2a00      	cmp	r2, #0
 801f4f6:	d010      	beq.n	801f51a <_sungetc_r+0x46>
 801f4f8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801f4fa:	429a      	cmp	r2, r3
 801f4fc:	dd07      	ble.n	801f50e <_sungetc_r+0x3a>
 801f4fe:	6823      	ldr	r3, [r4, #0]
 801f500:	3b01      	subs	r3, #1
 801f502:	6023      	str	r3, [r4, #0]
 801f504:	701e      	strb	r6, [r3, #0]
 801f506:	6863      	ldr	r3, [r4, #4]
 801f508:	3301      	adds	r3, #1
 801f50a:	6063      	str	r3, [r4, #4]
 801f50c:	e7e8      	b.n	801f4e0 <_sungetc_r+0xc>
 801f50e:	0021      	movs	r1, r4
 801f510:	f000 fdde 	bl	80200d0 <__submore>
 801f514:	2800      	cmp	r0, #0
 801f516:	d0f2      	beq.n	801f4fe <_sungetc_r+0x2a>
 801f518:	e7e0      	b.n	801f4dc <_sungetc_r+0x8>
 801f51a:	6921      	ldr	r1, [r4, #16]
 801f51c:	6822      	ldr	r2, [r4, #0]
 801f51e:	2900      	cmp	r1, #0
 801f520:	d007      	beq.n	801f532 <_sungetc_r+0x5e>
 801f522:	4291      	cmp	r1, r2
 801f524:	d205      	bcs.n	801f532 <_sungetc_r+0x5e>
 801f526:	1e51      	subs	r1, r2, #1
 801f528:	7808      	ldrb	r0, [r1, #0]
 801f52a:	42a8      	cmp	r0, r5
 801f52c:	d101      	bne.n	801f532 <_sungetc_r+0x5e>
 801f52e:	6021      	str	r1, [r4, #0]
 801f530:	e7ea      	b.n	801f508 <_sungetc_r+0x34>
 801f532:	6423      	str	r3, [r4, #64]	; 0x40
 801f534:	0023      	movs	r3, r4
 801f536:	3344      	adds	r3, #68	; 0x44
 801f538:	6363      	str	r3, [r4, #52]	; 0x34
 801f53a:	2303      	movs	r3, #3
 801f53c:	63a3      	str	r3, [r4, #56]	; 0x38
 801f53e:	0023      	movs	r3, r4
 801f540:	3346      	adds	r3, #70	; 0x46
 801f542:	63e2      	str	r2, [r4, #60]	; 0x3c
 801f544:	701e      	strb	r6, [r3, #0]
 801f546:	6023      	str	r3, [r4, #0]
 801f548:	2301      	movs	r3, #1
 801f54a:	e7de      	b.n	801f50a <_sungetc_r+0x36>

0801f54c <__ssrefill_r>:
 801f54c:	b510      	push	{r4, lr}
 801f54e:	000c      	movs	r4, r1
 801f550:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801f552:	2900      	cmp	r1, #0
 801f554:	d00e      	beq.n	801f574 <__ssrefill_r+0x28>
 801f556:	0023      	movs	r3, r4
 801f558:	3344      	adds	r3, #68	; 0x44
 801f55a:	4299      	cmp	r1, r3
 801f55c:	d001      	beq.n	801f562 <__ssrefill_r+0x16>
 801f55e:	f000 fe25 	bl	80201ac <_free_r>
 801f562:	2000      	movs	r0, #0
 801f564:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801f566:	6360      	str	r0, [r4, #52]	; 0x34
 801f568:	6063      	str	r3, [r4, #4]
 801f56a:	4283      	cmp	r3, r0
 801f56c:	d002      	beq.n	801f574 <__ssrefill_r+0x28>
 801f56e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801f570:	6023      	str	r3, [r4, #0]
 801f572:	bd10      	pop	{r4, pc}
 801f574:	6923      	ldr	r3, [r4, #16]
 801f576:	2001      	movs	r0, #1
 801f578:	6023      	str	r3, [r4, #0]
 801f57a:	2300      	movs	r3, #0
 801f57c:	89a2      	ldrh	r2, [r4, #12]
 801f57e:	6063      	str	r3, [r4, #4]
 801f580:	3320      	adds	r3, #32
 801f582:	4313      	orrs	r3, r2
 801f584:	81a3      	strh	r3, [r4, #12]
 801f586:	4240      	negs	r0, r0
 801f588:	e7f3      	b.n	801f572 <__ssrefill_r+0x26>
	...

0801f58c <__ssvfiscanf_r>:
 801f58c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f58e:	0017      	movs	r7, r2
 801f590:	2200      	movs	r2, #0
 801f592:	4cb0      	ldr	r4, [pc, #704]	; (801f854 <__ssvfiscanf_r+0x2c8>)
 801f594:	25c0      	movs	r5, #192	; 0xc0
 801f596:	44a5      	add	sp, r4
 801f598:	9248      	str	r2, [sp, #288]	; 0x120
 801f59a:	9249      	str	r2, [sp, #292]	; 0x124
 801f59c:	aa05      	add	r2, sp, #20
 801f59e:	924a      	str	r2, [sp, #296]	; 0x128
 801f5a0:	22be      	movs	r2, #190	; 0xbe
 801f5a2:	000c      	movs	r4, r1
 801f5a4:	49ac      	ldr	r1, [pc, #688]	; (801f858 <__ssvfiscanf_r+0x2cc>)
 801f5a6:	9000      	str	r0, [sp, #0]
 801f5a8:	0052      	lsls	r2, r2, #1
 801f5aa:	a845      	add	r0, sp, #276	; 0x114
 801f5ac:	5081      	str	r1, [r0, r2]
 801f5ae:	49ab      	ldr	r1, [pc, #684]	; (801f85c <__ssvfiscanf_r+0x2d0>)
 801f5b0:	006d      	lsls	r5, r5, #1
 801f5b2:	5141      	str	r1, [r0, r5]
 801f5b4:	9304      	str	r3, [sp, #16]
 801f5b6:	783b      	ldrb	r3, [r7, #0]
 801f5b8:	2b00      	cmp	r3, #0
 801f5ba:	d100      	bne.n	801f5be <__ssvfiscanf_r+0x32>
 801f5bc:	e148      	b.n	801f850 <__ssvfiscanf_r+0x2c4>
 801f5be:	f000 fdc9 	bl	8020154 <__locale_ctype_ptr>
 801f5c2:	2208      	movs	r2, #8
 801f5c4:	783b      	ldrb	r3, [r7, #0]
 801f5c6:	1c7e      	adds	r6, r7, #1
 801f5c8:	18c0      	adds	r0, r0, r3
 801f5ca:	9301      	str	r3, [sp, #4]
 801f5cc:	7843      	ldrb	r3, [r0, #1]
 801f5ce:	4013      	ands	r3, r2
 801f5d0:	d020      	beq.n	801f614 <__ssvfiscanf_r+0x88>
 801f5d2:	6863      	ldr	r3, [r4, #4]
 801f5d4:	2b00      	cmp	r3, #0
 801f5d6:	dd14      	ble.n	801f602 <__ssvfiscanf_r+0x76>
 801f5d8:	f000 fdbc 	bl	8020154 <__locale_ctype_ptr>
 801f5dc:	2108      	movs	r1, #8
 801f5de:	6823      	ldr	r3, [r4, #0]
 801f5e0:	781a      	ldrb	r2, [r3, #0]
 801f5e2:	1880      	adds	r0, r0, r2
 801f5e4:	7842      	ldrb	r2, [r0, #1]
 801f5e6:	420a      	tst	r2, r1
 801f5e8:	d101      	bne.n	801f5ee <__ssvfiscanf_r+0x62>
 801f5ea:	0037      	movs	r7, r6
 801f5ec:	e7e3      	b.n	801f5b6 <__ssvfiscanf_r+0x2a>
 801f5ee:	9a49      	ldr	r2, [sp, #292]	; 0x124
 801f5f0:	3301      	adds	r3, #1
 801f5f2:	9201      	str	r2, [sp, #4]
 801f5f4:	3201      	adds	r2, #1
 801f5f6:	9249      	str	r2, [sp, #292]	; 0x124
 801f5f8:	6862      	ldr	r2, [r4, #4]
 801f5fa:	6023      	str	r3, [r4, #0]
 801f5fc:	3a01      	subs	r2, #1
 801f5fe:	6062      	str	r2, [r4, #4]
 801f600:	e7e7      	b.n	801f5d2 <__ssvfiscanf_r+0x46>
 801f602:	ab45      	add	r3, sp, #276	; 0x114
 801f604:	595b      	ldr	r3, [r3, r5]
 801f606:	0021      	movs	r1, r4
 801f608:	9800      	ldr	r0, [sp, #0]
 801f60a:	9301      	str	r3, [sp, #4]
 801f60c:	4798      	blx	r3
 801f60e:	2800      	cmp	r0, #0
 801f610:	d0e2      	beq.n	801f5d8 <__ssvfiscanf_r+0x4c>
 801f612:	e7ea      	b.n	801f5ea <__ssvfiscanf_r+0x5e>
 801f614:	9a01      	ldr	r2, [sp, #4]
 801f616:	2a25      	cmp	r2, #37	; 0x25
 801f618:	d16d      	bne.n	801f6f6 <__ssvfiscanf_r+0x16a>
 801f61a:	9347      	str	r3, [sp, #284]	; 0x11c
 801f61c:	9345      	str	r3, [sp, #276]	; 0x114
 801f61e:	787b      	ldrb	r3, [r7, #1]
 801f620:	2b2a      	cmp	r3, #42	; 0x2a
 801f622:	d102      	bne.n	801f62a <__ssvfiscanf_r+0x9e>
 801f624:	3b1a      	subs	r3, #26
 801f626:	9345      	str	r3, [sp, #276]	; 0x114
 801f628:	1cbe      	adds	r6, r7, #2
 801f62a:	0037      	movs	r7, r6
 801f62c:	220a      	movs	r2, #10
 801f62e:	7839      	ldrb	r1, [r7, #0]
 801f630:	1c7b      	adds	r3, r7, #1
 801f632:	9302      	str	r3, [sp, #8]
 801f634:	000b      	movs	r3, r1
 801f636:	3b30      	subs	r3, #48	; 0x30
 801f638:	2b09      	cmp	r3, #9
 801f63a:	d924      	bls.n	801f686 <__ssvfiscanf_r+0xfa>
 801f63c:	4e88      	ldr	r6, [pc, #544]	; (801f860 <__ssvfiscanf_r+0x2d4>)
 801f63e:	2203      	movs	r2, #3
 801f640:	0030      	movs	r0, r6
 801f642:	f000 fda7 	bl	8020194 <memchr>
 801f646:	2800      	cmp	r0, #0
 801f648:	d007      	beq.n	801f65a <__ssvfiscanf_r+0xce>
 801f64a:	2301      	movs	r3, #1
 801f64c:	1b80      	subs	r0, r0, r6
 801f64e:	4083      	lsls	r3, r0
 801f650:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801f652:	9f02      	ldr	r7, [sp, #8]
 801f654:	4313      	orrs	r3, r2
 801f656:	9203      	str	r2, [sp, #12]
 801f658:	9345      	str	r3, [sp, #276]	; 0x114
 801f65a:	783b      	ldrb	r3, [r7, #0]
 801f65c:	1c7e      	adds	r6, r7, #1
 801f65e:	2b67      	cmp	r3, #103	; 0x67
 801f660:	d835      	bhi.n	801f6ce <__ssvfiscanf_r+0x142>
 801f662:	2b65      	cmp	r3, #101	; 0x65
 801f664:	d300      	bcc.n	801f668 <__ssvfiscanf_r+0xdc>
 801f666:	e0b8      	b.n	801f7da <__ssvfiscanf_r+0x24e>
 801f668:	2b47      	cmp	r3, #71	; 0x47
 801f66a:	d814      	bhi.n	801f696 <__ssvfiscanf_r+0x10a>
 801f66c:	2b45      	cmp	r3, #69	; 0x45
 801f66e:	d300      	bcc.n	801f672 <__ssvfiscanf_r+0xe6>
 801f670:	e0b3      	b.n	801f7da <__ssvfiscanf_r+0x24e>
 801f672:	2b00      	cmp	r3, #0
 801f674:	d100      	bne.n	801f678 <__ssvfiscanf_r+0xec>
 801f676:	e0e8      	b.n	801f84a <__ssvfiscanf_r+0x2be>
 801f678:	2b25      	cmp	r3, #37	; 0x25
 801f67a:	d03c      	beq.n	801f6f6 <__ssvfiscanf_r+0x16a>
 801f67c:	2303      	movs	r3, #3
 801f67e:	934b      	str	r3, [sp, #300]	; 0x12c
 801f680:	3307      	adds	r3, #7
 801f682:	9346      	str	r3, [sp, #280]	; 0x118
 801f684:	e066      	b.n	801f754 <__ssvfiscanf_r+0x1c8>
 801f686:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 801f688:	9f02      	ldr	r7, [sp, #8]
 801f68a:	9303      	str	r3, [sp, #12]
 801f68c:	4353      	muls	r3, r2
 801f68e:	3b30      	subs	r3, #48	; 0x30
 801f690:	1859      	adds	r1, r3, r1
 801f692:	9147      	str	r1, [sp, #284]	; 0x11c
 801f694:	e7cb      	b.n	801f62e <__ssvfiscanf_r+0xa2>
 801f696:	2b5b      	cmp	r3, #91	; 0x5b
 801f698:	d100      	bne.n	801f69c <__ssvfiscanf_r+0x110>
 801f69a:	e07a      	b.n	801f792 <__ssvfiscanf_r+0x206>
 801f69c:	d810      	bhi.n	801f6c0 <__ssvfiscanf_r+0x134>
 801f69e:	2b58      	cmp	r3, #88	; 0x58
 801f6a0:	d1ec      	bne.n	801f67c <__ssvfiscanf_r+0xf0>
 801f6a2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801f6a4:	9201      	str	r2, [sp, #4]
 801f6a6:	2280      	movs	r2, #128	; 0x80
 801f6a8:	9901      	ldr	r1, [sp, #4]
 801f6aa:	0092      	lsls	r2, r2, #2
 801f6ac:	430a      	orrs	r2, r1
 801f6ae:	9245      	str	r2, [sp, #276]	; 0x114
 801f6b0:	2210      	movs	r2, #16
 801f6b2:	9246      	str	r2, [sp, #280]	; 0x118
 801f6b4:	226e      	movs	r2, #110	; 0x6e
 801f6b6:	429a      	cmp	r2, r3
 801f6b8:	419b      	sbcs	r3, r3
 801f6ba:	425b      	negs	r3, r3
 801f6bc:	3303      	adds	r3, #3
 801f6be:	e048      	b.n	801f752 <__ssvfiscanf_r+0x1c6>
 801f6c0:	2b63      	cmp	r3, #99	; 0x63
 801f6c2:	d100      	bne.n	801f6c6 <__ssvfiscanf_r+0x13a>
 801f6c4:	e072      	b.n	801f7ac <__ssvfiscanf_r+0x220>
 801f6c6:	2b64      	cmp	r3, #100	; 0x64
 801f6c8:	d1d8      	bne.n	801f67c <__ssvfiscanf_r+0xf0>
 801f6ca:	220a      	movs	r2, #10
 801f6cc:	e7f1      	b.n	801f6b2 <__ssvfiscanf_r+0x126>
 801f6ce:	2b70      	cmp	r3, #112	; 0x70
 801f6d0:	d035      	beq.n	801f73e <__ssvfiscanf_r+0x1b2>
 801f6d2:	d808      	bhi.n	801f6e6 <__ssvfiscanf_r+0x15a>
 801f6d4:	2b6e      	cmp	r3, #110	; 0x6e
 801f6d6:	d100      	bne.n	801f6da <__ssvfiscanf_r+0x14e>
 801f6d8:	e070      	b.n	801f7bc <__ssvfiscanf_r+0x230>
 801f6da:	d837      	bhi.n	801f74c <__ssvfiscanf_r+0x1c0>
 801f6dc:	2b69      	cmp	r3, #105	; 0x69
 801f6de:	d1cd      	bne.n	801f67c <__ssvfiscanf_r+0xf0>
 801f6e0:	2300      	movs	r3, #0
 801f6e2:	9346      	str	r3, [sp, #280]	; 0x118
 801f6e4:	e7ea      	b.n	801f6bc <__ssvfiscanf_r+0x130>
 801f6e6:	2b75      	cmp	r3, #117	; 0x75
 801f6e8:	d0ef      	beq.n	801f6ca <__ssvfiscanf_r+0x13e>
 801f6ea:	2b78      	cmp	r3, #120	; 0x78
 801f6ec:	d0d9      	beq.n	801f6a2 <__ssvfiscanf_r+0x116>
 801f6ee:	2b73      	cmp	r3, #115	; 0x73
 801f6f0:	d1c4      	bne.n	801f67c <__ssvfiscanf_r+0xf0>
 801f6f2:	2302      	movs	r3, #2
 801f6f4:	e02d      	b.n	801f752 <__ssvfiscanf_r+0x1c6>
 801f6f6:	6863      	ldr	r3, [r4, #4]
 801f6f8:	2b00      	cmp	r3, #0
 801f6fa:	dd0f      	ble.n	801f71c <__ssvfiscanf_r+0x190>
 801f6fc:	6823      	ldr	r3, [r4, #0]
 801f6fe:	9901      	ldr	r1, [sp, #4]
 801f700:	781a      	ldrb	r2, [r3, #0]
 801f702:	428a      	cmp	r2, r1
 801f704:	d000      	beq.n	801f708 <__ssvfiscanf_r+0x17c>
 801f706:	e0a3      	b.n	801f850 <__ssvfiscanf_r+0x2c4>
 801f708:	3301      	adds	r3, #1
 801f70a:	6862      	ldr	r2, [r4, #4]
 801f70c:	6023      	str	r3, [r4, #0]
 801f70e:	9b49      	ldr	r3, [sp, #292]	; 0x124
 801f710:	3a01      	subs	r2, #1
 801f712:	9301      	str	r3, [sp, #4]
 801f714:	3301      	adds	r3, #1
 801f716:	6062      	str	r2, [r4, #4]
 801f718:	9349      	str	r3, [sp, #292]	; 0x124
 801f71a:	e766      	b.n	801f5ea <__ssvfiscanf_r+0x5e>
 801f71c:	ab45      	add	r3, sp, #276	; 0x114
 801f71e:	595b      	ldr	r3, [r3, r5]
 801f720:	0021      	movs	r1, r4
 801f722:	9800      	ldr	r0, [sp, #0]
 801f724:	9302      	str	r3, [sp, #8]
 801f726:	4798      	blx	r3
 801f728:	2800      	cmp	r0, #0
 801f72a:	d0e7      	beq.n	801f6fc <__ssvfiscanf_r+0x170>
 801f72c:	9848      	ldr	r0, [sp, #288]	; 0x120
 801f72e:	2800      	cmp	r0, #0
 801f730:	d000      	beq.n	801f734 <__ssvfiscanf_r+0x1a8>
 801f732:	e086      	b.n	801f842 <__ssvfiscanf_r+0x2b6>
 801f734:	3801      	subs	r0, #1
 801f736:	23a7      	movs	r3, #167	; 0xa7
 801f738:	009b      	lsls	r3, r3, #2
 801f73a:	449d      	add	sp, r3
 801f73c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f73e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801f740:	9201      	str	r2, [sp, #4]
 801f742:	2220      	movs	r2, #32
 801f744:	9901      	ldr	r1, [sp, #4]
 801f746:	430a      	orrs	r2, r1
 801f748:	9245      	str	r2, [sp, #276]	; 0x114
 801f74a:	e7aa      	b.n	801f6a2 <__ssvfiscanf_r+0x116>
 801f74c:	2308      	movs	r3, #8
 801f74e:	9346      	str	r3, [sp, #280]	; 0x118
 801f750:	3b04      	subs	r3, #4
 801f752:	934b      	str	r3, [sp, #300]	; 0x12c
 801f754:	6863      	ldr	r3, [r4, #4]
 801f756:	2b00      	cmp	r3, #0
 801f758:	dd41      	ble.n	801f7de <__ssvfiscanf_r+0x252>
 801f75a:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801f75c:	9301      	str	r3, [sp, #4]
 801f75e:	065b      	lsls	r3, r3, #25
 801f760:	d408      	bmi.n	801f774 <__ssvfiscanf_r+0x1e8>
 801f762:	f000 fcf7 	bl	8020154 <__locale_ctype_ptr>
 801f766:	2108      	movs	r1, #8
 801f768:	6823      	ldr	r3, [r4, #0]
 801f76a:	781a      	ldrb	r2, [r3, #0]
 801f76c:	1880      	adds	r0, r0, r2
 801f76e:	7842      	ldrb	r2, [r0, #1]
 801f770:	420a      	tst	r2, r1
 801f772:	d13d      	bne.n	801f7f0 <__ssvfiscanf_r+0x264>
 801f774:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
 801f776:	2b02      	cmp	r3, #2
 801f778:	dc4f      	bgt.n	801f81a <__ssvfiscanf_r+0x28e>
 801f77a:	ab04      	add	r3, sp, #16
 801f77c:	0022      	movs	r2, r4
 801f77e:	a945      	add	r1, sp, #276	; 0x114
 801f780:	9800      	ldr	r0, [sp, #0]
 801f782:	f000 f9e7 	bl	801fb54 <_scanf_chars>
 801f786:	2801      	cmp	r0, #1
 801f788:	d062      	beq.n	801f850 <__ssvfiscanf_r+0x2c4>
 801f78a:	2802      	cmp	r0, #2
 801f78c:	d000      	beq.n	801f790 <__ssvfiscanf_r+0x204>
 801f78e:	e72c      	b.n	801f5ea <__ssvfiscanf_r+0x5e>
 801f790:	e7cc      	b.n	801f72c <__ssvfiscanf_r+0x1a0>
 801f792:	0031      	movs	r1, r6
 801f794:	a805      	add	r0, sp, #20
 801f796:	f000 fb45 	bl	801fe24 <__sccl>
 801f79a:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801f79c:	0006      	movs	r6, r0
 801f79e:	9301      	str	r3, [sp, #4]
 801f7a0:	2340      	movs	r3, #64	; 0x40
 801f7a2:	9a01      	ldr	r2, [sp, #4]
 801f7a4:	4313      	orrs	r3, r2
 801f7a6:	9345      	str	r3, [sp, #276]	; 0x114
 801f7a8:	2301      	movs	r3, #1
 801f7aa:	e7d2      	b.n	801f752 <__ssvfiscanf_r+0x1c6>
 801f7ac:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801f7ae:	9301      	str	r3, [sp, #4]
 801f7b0:	2340      	movs	r3, #64	; 0x40
 801f7b2:	9a01      	ldr	r2, [sp, #4]
 801f7b4:	4313      	orrs	r3, r2
 801f7b6:	9345      	str	r3, [sp, #276]	; 0x114
 801f7b8:	2300      	movs	r3, #0
 801f7ba:	e7ca      	b.n	801f752 <__ssvfiscanf_r+0x1c6>
 801f7bc:	9845      	ldr	r0, [sp, #276]	; 0x114
 801f7be:	06c3      	lsls	r3, r0, #27
 801f7c0:	d500      	bpl.n	801f7c4 <__ssvfiscanf_r+0x238>
 801f7c2:	e712      	b.n	801f5ea <__ssvfiscanf_r+0x5e>
 801f7c4:	9b04      	ldr	r3, [sp, #16]
 801f7c6:	9a49      	ldr	r2, [sp, #292]	; 0x124
 801f7c8:	1d19      	adds	r1, r3, #4
 801f7ca:	9104      	str	r1, [sp, #16]
 801f7cc:	681b      	ldr	r3, [r3, #0]
 801f7ce:	07c7      	lsls	r7, r0, #31
 801f7d0:	d501      	bpl.n	801f7d6 <__ssvfiscanf_r+0x24a>
 801f7d2:	801a      	strh	r2, [r3, #0]
 801f7d4:	e709      	b.n	801f5ea <__ssvfiscanf_r+0x5e>
 801f7d6:	601a      	str	r2, [r3, #0]
 801f7d8:	e707      	b.n	801f5ea <__ssvfiscanf_r+0x5e>
 801f7da:	2305      	movs	r3, #5
 801f7dc:	e7b9      	b.n	801f752 <__ssvfiscanf_r+0x1c6>
 801f7de:	ab45      	add	r3, sp, #276	; 0x114
 801f7e0:	595b      	ldr	r3, [r3, r5]
 801f7e2:	0021      	movs	r1, r4
 801f7e4:	9800      	ldr	r0, [sp, #0]
 801f7e6:	9301      	str	r3, [sp, #4]
 801f7e8:	4798      	blx	r3
 801f7ea:	2800      	cmp	r0, #0
 801f7ec:	d0b5      	beq.n	801f75a <__ssvfiscanf_r+0x1ce>
 801f7ee:	e79d      	b.n	801f72c <__ssvfiscanf_r+0x1a0>
 801f7f0:	9a49      	ldr	r2, [sp, #292]	; 0x124
 801f7f2:	9201      	str	r2, [sp, #4]
 801f7f4:	3201      	adds	r2, #1
 801f7f6:	9249      	str	r2, [sp, #292]	; 0x124
 801f7f8:	6862      	ldr	r2, [r4, #4]
 801f7fa:	3a01      	subs	r2, #1
 801f7fc:	6062      	str	r2, [r4, #4]
 801f7fe:	2a00      	cmp	r2, #0
 801f800:	dd02      	ble.n	801f808 <__ssvfiscanf_r+0x27c>
 801f802:	3301      	adds	r3, #1
 801f804:	6023      	str	r3, [r4, #0]
 801f806:	e7ac      	b.n	801f762 <__ssvfiscanf_r+0x1d6>
 801f808:	ab45      	add	r3, sp, #276	; 0x114
 801f80a:	595b      	ldr	r3, [r3, r5]
 801f80c:	0021      	movs	r1, r4
 801f80e:	9800      	ldr	r0, [sp, #0]
 801f810:	9301      	str	r3, [sp, #4]
 801f812:	4798      	blx	r3
 801f814:	2800      	cmp	r0, #0
 801f816:	d0a4      	beq.n	801f762 <__ssvfiscanf_r+0x1d6>
 801f818:	e788      	b.n	801f72c <__ssvfiscanf_r+0x1a0>
 801f81a:	2b04      	cmp	r3, #4
 801f81c:	dc06      	bgt.n	801f82c <__ssvfiscanf_r+0x2a0>
 801f81e:	ab04      	add	r3, sp, #16
 801f820:	0022      	movs	r2, r4
 801f822:	a945      	add	r1, sp, #276	; 0x114
 801f824:	9800      	ldr	r0, [sp, #0]
 801f826:	f000 f9fb 	bl	801fc20 <_scanf_i>
 801f82a:	e7ac      	b.n	801f786 <__ssvfiscanf_r+0x1fa>
 801f82c:	4b0d      	ldr	r3, [pc, #52]	; (801f864 <__ssvfiscanf_r+0x2d8>)
 801f82e:	2b00      	cmp	r3, #0
 801f830:	d100      	bne.n	801f834 <__ssvfiscanf_r+0x2a8>
 801f832:	e6da      	b.n	801f5ea <__ssvfiscanf_r+0x5e>
 801f834:	ab04      	add	r3, sp, #16
 801f836:	0022      	movs	r2, r4
 801f838:	a945      	add	r1, sp, #276	; 0x114
 801f83a:	9800      	ldr	r0, [sp, #0]
 801f83c:	e000      	b.n	801f840 <__ssvfiscanf_r+0x2b4>
 801f83e:	bf00      	nop
 801f840:	e7a1      	b.n	801f786 <__ssvfiscanf_r+0x1fa>
 801f842:	89a3      	ldrh	r3, [r4, #12]
 801f844:	065b      	lsls	r3, r3, #25
 801f846:	d400      	bmi.n	801f84a <__ssvfiscanf_r+0x2be>
 801f848:	e775      	b.n	801f736 <__ssvfiscanf_r+0x1aa>
 801f84a:	2001      	movs	r0, #1
 801f84c:	4240      	negs	r0, r0
 801f84e:	e772      	b.n	801f736 <__ssvfiscanf_r+0x1aa>
 801f850:	9848      	ldr	r0, [sp, #288]	; 0x120
 801f852:	e770      	b.n	801f736 <__ssvfiscanf_r+0x1aa>
 801f854:	fffffd64 	.word	0xfffffd64
 801f858:	0801f4d5 	.word	0x0801f4d5
 801f85c:	0801f54d 	.word	0x0801f54d
 801f860:	0802240a 	.word	0x0802240a
 801f864:	00000000 	.word	0x00000000

0801f868 <_printf_common>:
 801f868:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801f86a:	0015      	movs	r5, r2
 801f86c:	9301      	str	r3, [sp, #4]
 801f86e:	688a      	ldr	r2, [r1, #8]
 801f870:	690b      	ldr	r3, [r1, #16]
 801f872:	9000      	str	r0, [sp, #0]
 801f874:	000c      	movs	r4, r1
 801f876:	4293      	cmp	r3, r2
 801f878:	da00      	bge.n	801f87c <_printf_common+0x14>
 801f87a:	0013      	movs	r3, r2
 801f87c:	0022      	movs	r2, r4
 801f87e:	602b      	str	r3, [r5, #0]
 801f880:	3243      	adds	r2, #67	; 0x43
 801f882:	7812      	ldrb	r2, [r2, #0]
 801f884:	2a00      	cmp	r2, #0
 801f886:	d001      	beq.n	801f88c <_printf_common+0x24>
 801f888:	3301      	adds	r3, #1
 801f88a:	602b      	str	r3, [r5, #0]
 801f88c:	6823      	ldr	r3, [r4, #0]
 801f88e:	069b      	lsls	r3, r3, #26
 801f890:	d502      	bpl.n	801f898 <_printf_common+0x30>
 801f892:	682b      	ldr	r3, [r5, #0]
 801f894:	3302      	adds	r3, #2
 801f896:	602b      	str	r3, [r5, #0]
 801f898:	2706      	movs	r7, #6
 801f89a:	6823      	ldr	r3, [r4, #0]
 801f89c:	401f      	ands	r7, r3
 801f89e:	d027      	beq.n	801f8f0 <_printf_common+0x88>
 801f8a0:	0023      	movs	r3, r4
 801f8a2:	3343      	adds	r3, #67	; 0x43
 801f8a4:	781b      	ldrb	r3, [r3, #0]
 801f8a6:	1e5a      	subs	r2, r3, #1
 801f8a8:	4193      	sbcs	r3, r2
 801f8aa:	6822      	ldr	r2, [r4, #0]
 801f8ac:	0692      	lsls	r2, r2, #26
 801f8ae:	d430      	bmi.n	801f912 <_printf_common+0xaa>
 801f8b0:	0022      	movs	r2, r4
 801f8b2:	9901      	ldr	r1, [sp, #4]
 801f8b4:	3243      	adds	r2, #67	; 0x43
 801f8b6:	9800      	ldr	r0, [sp, #0]
 801f8b8:	9e08      	ldr	r6, [sp, #32]
 801f8ba:	47b0      	blx	r6
 801f8bc:	1c43      	adds	r3, r0, #1
 801f8be:	d025      	beq.n	801f90c <_printf_common+0xa4>
 801f8c0:	2306      	movs	r3, #6
 801f8c2:	6820      	ldr	r0, [r4, #0]
 801f8c4:	682a      	ldr	r2, [r5, #0]
 801f8c6:	68e1      	ldr	r1, [r4, #12]
 801f8c8:	4003      	ands	r3, r0
 801f8ca:	2500      	movs	r5, #0
 801f8cc:	2b04      	cmp	r3, #4
 801f8ce:	d103      	bne.n	801f8d8 <_printf_common+0x70>
 801f8d0:	1a8d      	subs	r5, r1, r2
 801f8d2:	43eb      	mvns	r3, r5
 801f8d4:	17db      	asrs	r3, r3, #31
 801f8d6:	401d      	ands	r5, r3
 801f8d8:	68a3      	ldr	r3, [r4, #8]
 801f8da:	6922      	ldr	r2, [r4, #16]
 801f8dc:	4293      	cmp	r3, r2
 801f8de:	dd01      	ble.n	801f8e4 <_printf_common+0x7c>
 801f8e0:	1a9b      	subs	r3, r3, r2
 801f8e2:	18ed      	adds	r5, r5, r3
 801f8e4:	2700      	movs	r7, #0
 801f8e6:	42bd      	cmp	r5, r7
 801f8e8:	d120      	bne.n	801f92c <_printf_common+0xc4>
 801f8ea:	2000      	movs	r0, #0
 801f8ec:	e010      	b.n	801f910 <_printf_common+0xa8>
 801f8ee:	3701      	adds	r7, #1
 801f8f0:	68e3      	ldr	r3, [r4, #12]
 801f8f2:	682a      	ldr	r2, [r5, #0]
 801f8f4:	1a9b      	subs	r3, r3, r2
 801f8f6:	42bb      	cmp	r3, r7
 801f8f8:	ddd2      	ble.n	801f8a0 <_printf_common+0x38>
 801f8fa:	0022      	movs	r2, r4
 801f8fc:	2301      	movs	r3, #1
 801f8fe:	3219      	adds	r2, #25
 801f900:	9901      	ldr	r1, [sp, #4]
 801f902:	9800      	ldr	r0, [sp, #0]
 801f904:	9e08      	ldr	r6, [sp, #32]
 801f906:	47b0      	blx	r6
 801f908:	1c43      	adds	r3, r0, #1
 801f90a:	d1f0      	bne.n	801f8ee <_printf_common+0x86>
 801f90c:	2001      	movs	r0, #1
 801f90e:	4240      	negs	r0, r0
 801f910:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801f912:	2030      	movs	r0, #48	; 0x30
 801f914:	18e1      	adds	r1, r4, r3
 801f916:	3143      	adds	r1, #67	; 0x43
 801f918:	7008      	strb	r0, [r1, #0]
 801f91a:	0021      	movs	r1, r4
 801f91c:	1c5a      	adds	r2, r3, #1
 801f91e:	3145      	adds	r1, #69	; 0x45
 801f920:	7809      	ldrb	r1, [r1, #0]
 801f922:	18a2      	adds	r2, r4, r2
 801f924:	3243      	adds	r2, #67	; 0x43
 801f926:	3302      	adds	r3, #2
 801f928:	7011      	strb	r1, [r2, #0]
 801f92a:	e7c1      	b.n	801f8b0 <_printf_common+0x48>
 801f92c:	0022      	movs	r2, r4
 801f92e:	2301      	movs	r3, #1
 801f930:	321a      	adds	r2, #26
 801f932:	9901      	ldr	r1, [sp, #4]
 801f934:	9800      	ldr	r0, [sp, #0]
 801f936:	9e08      	ldr	r6, [sp, #32]
 801f938:	47b0      	blx	r6
 801f93a:	1c43      	adds	r3, r0, #1
 801f93c:	d0e6      	beq.n	801f90c <_printf_common+0xa4>
 801f93e:	3701      	adds	r7, #1
 801f940:	e7d1      	b.n	801f8e6 <_printf_common+0x7e>
	...

0801f944 <_printf_i>:
 801f944:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f946:	b089      	sub	sp, #36	; 0x24
 801f948:	9204      	str	r2, [sp, #16]
 801f94a:	000a      	movs	r2, r1
 801f94c:	3243      	adds	r2, #67	; 0x43
 801f94e:	9305      	str	r3, [sp, #20]
 801f950:	9003      	str	r0, [sp, #12]
 801f952:	9202      	str	r2, [sp, #8]
 801f954:	7e0a      	ldrb	r2, [r1, #24]
 801f956:	000c      	movs	r4, r1
 801f958:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f95a:	2a6e      	cmp	r2, #110	; 0x6e
 801f95c:	d100      	bne.n	801f960 <_printf_i+0x1c>
 801f95e:	e086      	b.n	801fa6e <_printf_i+0x12a>
 801f960:	d81f      	bhi.n	801f9a2 <_printf_i+0x5e>
 801f962:	2a63      	cmp	r2, #99	; 0x63
 801f964:	d033      	beq.n	801f9ce <_printf_i+0x8a>
 801f966:	d808      	bhi.n	801f97a <_printf_i+0x36>
 801f968:	2a00      	cmp	r2, #0
 801f96a:	d100      	bne.n	801f96e <_printf_i+0x2a>
 801f96c:	e08c      	b.n	801fa88 <_printf_i+0x144>
 801f96e:	2a58      	cmp	r2, #88	; 0x58
 801f970:	d04d      	beq.n	801fa0e <_printf_i+0xca>
 801f972:	0025      	movs	r5, r4
 801f974:	3542      	adds	r5, #66	; 0x42
 801f976:	702a      	strb	r2, [r5, #0]
 801f978:	e030      	b.n	801f9dc <_printf_i+0x98>
 801f97a:	2a64      	cmp	r2, #100	; 0x64
 801f97c:	d001      	beq.n	801f982 <_printf_i+0x3e>
 801f97e:	2a69      	cmp	r2, #105	; 0x69
 801f980:	d1f7      	bne.n	801f972 <_printf_i+0x2e>
 801f982:	6819      	ldr	r1, [r3, #0]
 801f984:	6825      	ldr	r5, [r4, #0]
 801f986:	1d0a      	adds	r2, r1, #4
 801f988:	0628      	lsls	r0, r5, #24
 801f98a:	d529      	bpl.n	801f9e0 <_printf_i+0x9c>
 801f98c:	6808      	ldr	r0, [r1, #0]
 801f98e:	601a      	str	r2, [r3, #0]
 801f990:	2800      	cmp	r0, #0
 801f992:	da03      	bge.n	801f99c <_printf_i+0x58>
 801f994:	232d      	movs	r3, #45	; 0x2d
 801f996:	9a02      	ldr	r2, [sp, #8]
 801f998:	4240      	negs	r0, r0
 801f99a:	7013      	strb	r3, [r2, #0]
 801f99c:	4e6b      	ldr	r6, [pc, #428]	; (801fb4c <_printf_i+0x208>)
 801f99e:	270a      	movs	r7, #10
 801f9a0:	e04f      	b.n	801fa42 <_printf_i+0xfe>
 801f9a2:	2a73      	cmp	r2, #115	; 0x73
 801f9a4:	d074      	beq.n	801fa90 <_printf_i+0x14c>
 801f9a6:	d808      	bhi.n	801f9ba <_printf_i+0x76>
 801f9a8:	2a6f      	cmp	r2, #111	; 0x6f
 801f9aa:	d01f      	beq.n	801f9ec <_printf_i+0xa8>
 801f9ac:	2a70      	cmp	r2, #112	; 0x70
 801f9ae:	d1e0      	bne.n	801f972 <_printf_i+0x2e>
 801f9b0:	2220      	movs	r2, #32
 801f9b2:	6809      	ldr	r1, [r1, #0]
 801f9b4:	430a      	orrs	r2, r1
 801f9b6:	6022      	str	r2, [r4, #0]
 801f9b8:	e003      	b.n	801f9c2 <_printf_i+0x7e>
 801f9ba:	2a75      	cmp	r2, #117	; 0x75
 801f9bc:	d016      	beq.n	801f9ec <_printf_i+0xa8>
 801f9be:	2a78      	cmp	r2, #120	; 0x78
 801f9c0:	d1d7      	bne.n	801f972 <_printf_i+0x2e>
 801f9c2:	0022      	movs	r2, r4
 801f9c4:	2178      	movs	r1, #120	; 0x78
 801f9c6:	3245      	adds	r2, #69	; 0x45
 801f9c8:	7011      	strb	r1, [r2, #0]
 801f9ca:	4e61      	ldr	r6, [pc, #388]	; (801fb50 <_printf_i+0x20c>)
 801f9cc:	e022      	b.n	801fa14 <_printf_i+0xd0>
 801f9ce:	0025      	movs	r5, r4
 801f9d0:	681a      	ldr	r2, [r3, #0]
 801f9d2:	3542      	adds	r5, #66	; 0x42
 801f9d4:	1d11      	adds	r1, r2, #4
 801f9d6:	6019      	str	r1, [r3, #0]
 801f9d8:	6813      	ldr	r3, [r2, #0]
 801f9da:	702b      	strb	r3, [r5, #0]
 801f9dc:	2301      	movs	r3, #1
 801f9de:	e065      	b.n	801faac <_printf_i+0x168>
 801f9e0:	6808      	ldr	r0, [r1, #0]
 801f9e2:	601a      	str	r2, [r3, #0]
 801f9e4:	0669      	lsls	r1, r5, #25
 801f9e6:	d5d3      	bpl.n	801f990 <_printf_i+0x4c>
 801f9e8:	b200      	sxth	r0, r0
 801f9ea:	e7d1      	b.n	801f990 <_printf_i+0x4c>
 801f9ec:	6819      	ldr	r1, [r3, #0]
 801f9ee:	6825      	ldr	r5, [r4, #0]
 801f9f0:	1d08      	adds	r0, r1, #4
 801f9f2:	6018      	str	r0, [r3, #0]
 801f9f4:	6808      	ldr	r0, [r1, #0]
 801f9f6:	062e      	lsls	r6, r5, #24
 801f9f8:	d505      	bpl.n	801fa06 <_printf_i+0xc2>
 801f9fa:	4e54      	ldr	r6, [pc, #336]	; (801fb4c <_printf_i+0x208>)
 801f9fc:	2708      	movs	r7, #8
 801f9fe:	2a6f      	cmp	r2, #111	; 0x6f
 801fa00:	d01b      	beq.n	801fa3a <_printf_i+0xf6>
 801fa02:	270a      	movs	r7, #10
 801fa04:	e019      	b.n	801fa3a <_printf_i+0xf6>
 801fa06:	066d      	lsls	r5, r5, #25
 801fa08:	d5f7      	bpl.n	801f9fa <_printf_i+0xb6>
 801fa0a:	b280      	uxth	r0, r0
 801fa0c:	e7f5      	b.n	801f9fa <_printf_i+0xb6>
 801fa0e:	3145      	adds	r1, #69	; 0x45
 801fa10:	4e4e      	ldr	r6, [pc, #312]	; (801fb4c <_printf_i+0x208>)
 801fa12:	700a      	strb	r2, [r1, #0]
 801fa14:	6818      	ldr	r0, [r3, #0]
 801fa16:	6822      	ldr	r2, [r4, #0]
 801fa18:	1d01      	adds	r1, r0, #4
 801fa1a:	6800      	ldr	r0, [r0, #0]
 801fa1c:	6019      	str	r1, [r3, #0]
 801fa1e:	0615      	lsls	r5, r2, #24
 801fa20:	d521      	bpl.n	801fa66 <_printf_i+0x122>
 801fa22:	07d3      	lsls	r3, r2, #31
 801fa24:	d502      	bpl.n	801fa2c <_printf_i+0xe8>
 801fa26:	2320      	movs	r3, #32
 801fa28:	431a      	orrs	r2, r3
 801fa2a:	6022      	str	r2, [r4, #0]
 801fa2c:	2710      	movs	r7, #16
 801fa2e:	2800      	cmp	r0, #0
 801fa30:	d103      	bne.n	801fa3a <_printf_i+0xf6>
 801fa32:	2320      	movs	r3, #32
 801fa34:	6822      	ldr	r2, [r4, #0]
 801fa36:	439a      	bics	r2, r3
 801fa38:	6022      	str	r2, [r4, #0]
 801fa3a:	0023      	movs	r3, r4
 801fa3c:	2200      	movs	r2, #0
 801fa3e:	3343      	adds	r3, #67	; 0x43
 801fa40:	701a      	strb	r2, [r3, #0]
 801fa42:	6863      	ldr	r3, [r4, #4]
 801fa44:	60a3      	str	r3, [r4, #8]
 801fa46:	2b00      	cmp	r3, #0
 801fa48:	db58      	blt.n	801fafc <_printf_i+0x1b8>
 801fa4a:	2204      	movs	r2, #4
 801fa4c:	6821      	ldr	r1, [r4, #0]
 801fa4e:	4391      	bics	r1, r2
 801fa50:	6021      	str	r1, [r4, #0]
 801fa52:	2800      	cmp	r0, #0
 801fa54:	d154      	bne.n	801fb00 <_printf_i+0x1bc>
 801fa56:	9d02      	ldr	r5, [sp, #8]
 801fa58:	2b00      	cmp	r3, #0
 801fa5a:	d05a      	beq.n	801fb12 <_printf_i+0x1ce>
 801fa5c:	0025      	movs	r5, r4
 801fa5e:	7833      	ldrb	r3, [r6, #0]
 801fa60:	3542      	adds	r5, #66	; 0x42
 801fa62:	702b      	strb	r3, [r5, #0]
 801fa64:	e055      	b.n	801fb12 <_printf_i+0x1ce>
 801fa66:	0655      	lsls	r5, r2, #25
 801fa68:	d5db      	bpl.n	801fa22 <_printf_i+0xde>
 801fa6a:	b280      	uxth	r0, r0
 801fa6c:	e7d9      	b.n	801fa22 <_printf_i+0xde>
 801fa6e:	681a      	ldr	r2, [r3, #0]
 801fa70:	680d      	ldr	r5, [r1, #0]
 801fa72:	1d10      	adds	r0, r2, #4
 801fa74:	6949      	ldr	r1, [r1, #20]
 801fa76:	6018      	str	r0, [r3, #0]
 801fa78:	6813      	ldr	r3, [r2, #0]
 801fa7a:	062e      	lsls	r6, r5, #24
 801fa7c:	d501      	bpl.n	801fa82 <_printf_i+0x13e>
 801fa7e:	6019      	str	r1, [r3, #0]
 801fa80:	e002      	b.n	801fa88 <_printf_i+0x144>
 801fa82:	066d      	lsls	r5, r5, #25
 801fa84:	d5fb      	bpl.n	801fa7e <_printf_i+0x13a>
 801fa86:	8019      	strh	r1, [r3, #0]
 801fa88:	2300      	movs	r3, #0
 801fa8a:	9d02      	ldr	r5, [sp, #8]
 801fa8c:	6123      	str	r3, [r4, #16]
 801fa8e:	e04f      	b.n	801fb30 <_printf_i+0x1ec>
 801fa90:	681a      	ldr	r2, [r3, #0]
 801fa92:	1d11      	adds	r1, r2, #4
 801fa94:	6019      	str	r1, [r3, #0]
 801fa96:	6815      	ldr	r5, [r2, #0]
 801fa98:	2100      	movs	r1, #0
 801fa9a:	6862      	ldr	r2, [r4, #4]
 801fa9c:	0028      	movs	r0, r5
 801fa9e:	f000 fb79 	bl	8020194 <memchr>
 801faa2:	2800      	cmp	r0, #0
 801faa4:	d001      	beq.n	801faaa <_printf_i+0x166>
 801faa6:	1b40      	subs	r0, r0, r5
 801faa8:	6060      	str	r0, [r4, #4]
 801faaa:	6863      	ldr	r3, [r4, #4]
 801faac:	6123      	str	r3, [r4, #16]
 801faae:	2300      	movs	r3, #0
 801fab0:	9a02      	ldr	r2, [sp, #8]
 801fab2:	7013      	strb	r3, [r2, #0]
 801fab4:	e03c      	b.n	801fb30 <_printf_i+0x1ec>
 801fab6:	6923      	ldr	r3, [r4, #16]
 801fab8:	002a      	movs	r2, r5
 801faba:	9904      	ldr	r1, [sp, #16]
 801fabc:	9803      	ldr	r0, [sp, #12]
 801fabe:	9d05      	ldr	r5, [sp, #20]
 801fac0:	47a8      	blx	r5
 801fac2:	1c43      	adds	r3, r0, #1
 801fac4:	d03e      	beq.n	801fb44 <_printf_i+0x200>
 801fac6:	6823      	ldr	r3, [r4, #0]
 801fac8:	079b      	lsls	r3, r3, #30
 801faca:	d415      	bmi.n	801faf8 <_printf_i+0x1b4>
 801facc:	9b07      	ldr	r3, [sp, #28]
 801face:	68e0      	ldr	r0, [r4, #12]
 801fad0:	4298      	cmp	r0, r3
 801fad2:	da39      	bge.n	801fb48 <_printf_i+0x204>
 801fad4:	0018      	movs	r0, r3
 801fad6:	e037      	b.n	801fb48 <_printf_i+0x204>
 801fad8:	0022      	movs	r2, r4
 801fada:	2301      	movs	r3, #1
 801fadc:	3219      	adds	r2, #25
 801fade:	9904      	ldr	r1, [sp, #16]
 801fae0:	9803      	ldr	r0, [sp, #12]
 801fae2:	9e05      	ldr	r6, [sp, #20]
 801fae4:	47b0      	blx	r6
 801fae6:	1c43      	adds	r3, r0, #1
 801fae8:	d02c      	beq.n	801fb44 <_printf_i+0x200>
 801faea:	3501      	adds	r5, #1
 801faec:	68e3      	ldr	r3, [r4, #12]
 801faee:	9a07      	ldr	r2, [sp, #28]
 801faf0:	1a9b      	subs	r3, r3, r2
 801faf2:	42ab      	cmp	r3, r5
 801faf4:	dcf0      	bgt.n	801fad8 <_printf_i+0x194>
 801faf6:	e7e9      	b.n	801facc <_printf_i+0x188>
 801faf8:	2500      	movs	r5, #0
 801fafa:	e7f7      	b.n	801faec <_printf_i+0x1a8>
 801fafc:	2800      	cmp	r0, #0
 801fafe:	d0ad      	beq.n	801fa5c <_printf_i+0x118>
 801fb00:	9d02      	ldr	r5, [sp, #8]
 801fb02:	0039      	movs	r1, r7
 801fb04:	f7e0 fb8e 	bl	8000224 <__aeabi_uidivmod>
 801fb08:	5c73      	ldrb	r3, [r6, r1]
 801fb0a:	3d01      	subs	r5, #1
 801fb0c:	702b      	strb	r3, [r5, #0]
 801fb0e:	2800      	cmp	r0, #0
 801fb10:	d1f7      	bne.n	801fb02 <_printf_i+0x1be>
 801fb12:	2f08      	cmp	r7, #8
 801fb14:	d109      	bne.n	801fb2a <_printf_i+0x1e6>
 801fb16:	6823      	ldr	r3, [r4, #0]
 801fb18:	07db      	lsls	r3, r3, #31
 801fb1a:	d506      	bpl.n	801fb2a <_printf_i+0x1e6>
 801fb1c:	6863      	ldr	r3, [r4, #4]
 801fb1e:	6922      	ldr	r2, [r4, #16]
 801fb20:	4293      	cmp	r3, r2
 801fb22:	dc02      	bgt.n	801fb2a <_printf_i+0x1e6>
 801fb24:	2330      	movs	r3, #48	; 0x30
 801fb26:	3d01      	subs	r5, #1
 801fb28:	702b      	strb	r3, [r5, #0]
 801fb2a:	9b02      	ldr	r3, [sp, #8]
 801fb2c:	1b5b      	subs	r3, r3, r5
 801fb2e:	6123      	str	r3, [r4, #16]
 801fb30:	9b05      	ldr	r3, [sp, #20]
 801fb32:	aa07      	add	r2, sp, #28
 801fb34:	9300      	str	r3, [sp, #0]
 801fb36:	0021      	movs	r1, r4
 801fb38:	9b04      	ldr	r3, [sp, #16]
 801fb3a:	9803      	ldr	r0, [sp, #12]
 801fb3c:	f7ff fe94 	bl	801f868 <_printf_common>
 801fb40:	1c43      	adds	r3, r0, #1
 801fb42:	d1b8      	bne.n	801fab6 <_printf_i+0x172>
 801fb44:	2001      	movs	r0, #1
 801fb46:	4240      	negs	r0, r0
 801fb48:	b009      	add	sp, #36	; 0x24
 801fb4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801fb4c:	08022415 	.word	0x08022415
 801fb50:	08022426 	.word	0x08022426

0801fb54 <_scanf_chars>:
 801fb54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801fb56:	0015      	movs	r5, r2
 801fb58:	688a      	ldr	r2, [r1, #8]
 801fb5a:	9001      	str	r0, [sp, #4]
 801fb5c:	000c      	movs	r4, r1
 801fb5e:	2a00      	cmp	r2, #0
 801fb60:	d104      	bne.n	801fb6c <_scanf_chars+0x18>
 801fb62:	698a      	ldr	r2, [r1, #24]
 801fb64:	2a00      	cmp	r2, #0
 801fb66:	d117      	bne.n	801fb98 <_scanf_chars+0x44>
 801fb68:	3201      	adds	r2, #1
 801fb6a:	60a2      	str	r2, [r4, #8]
 801fb6c:	6822      	ldr	r2, [r4, #0]
 801fb6e:	06d2      	lsls	r2, r2, #27
 801fb70:	d403      	bmi.n	801fb7a <_scanf_chars+0x26>
 801fb72:	681a      	ldr	r2, [r3, #0]
 801fb74:	1d11      	adds	r1, r2, #4
 801fb76:	6019      	str	r1, [r3, #0]
 801fb78:	6817      	ldr	r7, [r2, #0]
 801fb7a:	2600      	movs	r6, #0
 801fb7c:	69a3      	ldr	r3, [r4, #24]
 801fb7e:	2b00      	cmp	r3, #0
 801fb80:	d01f      	beq.n	801fbc2 <_scanf_chars+0x6e>
 801fb82:	2b01      	cmp	r3, #1
 801fb84:	d10b      	bne.n	801fb9e <_scanf_chars+0x4a>
 801fb86:	682b      	ldr	r3, [r5, #0]
 801fb88:	6962      	ldr	r2, [r4, #20]
 801fb8a:	781b      	ldrb	r3, [r3, #0]
 801fb8c:	5cd3      	ldrb	r3, [r2, r3]
 801fb8e:	2b00      	cmp	r3, #0
 801fb90:	d117      	bne.n	801fbc2 <_scanf_chars+0x6e>
 801fb92:	2e00      	cmp	r6, #0
 801fb94:	d133      	bne.n	801fbfe <_scanf_chars+0xaa>
 801fb96:	e009      	b.n	801fbac <_scanf_chars+0x58>
 801fb98:	2201      	movs	r2, #1
 801fb9a:	4252      	negs	r2, r2
 801fb9c:	e7e5      	b.n	801fb6a <_scanf_chars+0x16>
 801fb9e:	2b02      	cmp	r3, #2
 801fba0:	d006      	beq.n	801fbb0 <_scanf_chars+0x5c>
 801fba2:	2e00      	cmp	r6, #0
 801fba4:	d12b      	bne.n	801fbfe <_scanf_chars+0xaa>
 801fba6:	69a3      	ldr	r3, [r4, #24]
 801fba8:	2b01      	cmp	r3, #1
 801fbaa:	d128      	bne.n	801fbfe <_scanf_chars+0xaa>
 801fbac:	2001      	movs	r0, #1
 801fbae:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801fbb0:	f000 fad0 	bl	8020154 <__locale_ctype_ptr>
 801fbb4:	2208      	movs	r2, #8
 801fbb6:	682b      	ldr	r3, [r5, #0]
 801fbb8:	781b      	ldrb	r3, [r3, #0]
 801fbba:	18c0      	adds	r0, r0, r3
 801fbbc:	7843      	ldrb	r3, [r0, #1]
 801fbbe:	4213      	tst	r3, r2
 801fbc0:	d1ef      	bne.n	801fba2 <_scanf_chars+0x4e>
 801fbc2:	2210      	movs	r2, #16
 801fbc4:	6823      	ldr	r3, [r4, #0]
 801fbc6:	3601      	adds	r6, #1
 801fbc8:	4213      	tst	r3, r2
 801fbca:	d103      	bne.n	801fbd4 <_scanf_chars+0x80>
 801fbcc:	682b      	ldr	r3, [r5, #0]
 801fbce:	781b      	ldrb	r3, [r3, #0]
 801fbd0:	703b      	strb	r3, [r7, #0]
 801fbd2:	3701      	adds	r7, #1
 801fbd4:	682a      	ldr	r2, [r5, #0]
 801fbd6:	686b      	ldr	r3, [r5, #4]
 801fbd8:	3201      	adds	r2, #1
 801fbda:	602a      	str	r2, [r5, #0]
 801fbdc:	68a2      	ldr	r2, [r4, #8]
 801fbde:	3b01      	subs	r3, #1
 801fbe0:	3a01      	subs	r2, #1
 801fbe2:	606b      	str	r3, [r5, #4]
 801fbe4:	60a2      	str	r2, [r4, #8]
 801fbe6:	2a00      	cmp	r2, #0
 801fbe8:	d009      	beq.n	801fbfe <_scanf_chars+0xaa>
 801fbea:	2b00      	cmp	r3, #0
 801fbec:	dcc6      	bgt.n	801fb7c <_scanf_chars+0x28>
 801fbee:	23c0      	movs	r3, #192	; 0xc0
 801fbf0:	005b      	lsls	r3, r3, #1
 801fbf2:	58e3      	ldr	r3, [r4, r3]
 801fbf4:	0029      	movs	r1, r5
 801fbf6:	9801      	ldr	r0, [sp, #4]
 801fbf8:	4798      	blx	r3
 801fbfa:	2800      	cmp	r0, #0
 801fbfc:	d0be      	beq.n	801fb7c <_scanf_chars+0x28>
 801fbfe:	2310      	movs	r3, #16
 801fc00:	6822      	ldr	r2, [r4, #0]
 801fc02:	4013      	ands	r3, r2
 801fc04:	d106      	bne.n	801fc14 <_scanf_chars+0xc0>
 801fc06:	68e2      	ldr	r2, [r4, #12]
 801fc08:	3201      	adds	r2, #1
 801fc0a:	60e2      	str	r2, [r4, #12]
 801fc0c:	69a2      	ldr	r2, [r4, #24]
 801fc0e:	2a00      	cmp	r2, #0
 801fc10:	d000      	beq.n	801fc14 <_scanf_chars+0xc0>
 801fc12:	703b      	strb	r3, [r7, #0]
 801fc14:	6923      	ldr	r3, [r4, #16]
 801fc16:	2000      	movs	r0, #0
 801fc18:	199e      	adds	r6, r3, r6
 801fc1a:	6126      	str	r6, [r4, #16]
 801fc1c:	e7c7      	b.n	801fbae <_scanf_chars+0x5a>
	...

0801fc20 <_scanf_i>:
 801fc20:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fc22:	000c      	movs	r4, r1
 801fc24:	b08b      	sub	sp, #44	; 0x2c
 801fc26:	9302      	str	r3, [sp, #8]
 801fc28:	4b78      	ldr	r3, [pc, #480]	; (801fe0c <_scanf_i+0x1ec>)
 801fc2a:	9004      	str	r0, [sp, #16]
 801fc2c:	0016      	movs	r6, r2
 801fc2e:	aa07      	add	r2, sp, #28
 801fc30:	cb23      	ldmia	r3!, {r0, r1, r5}
 801fc32:	c223      	stmia	r2!, {r0, r1, r5}
 801fc34:	4b76      	ldr	r3, [pc, #472]	; (801fe10 <_scanf_i+0x1f0>)
 801fc36:	9305      	str	r3, [sp, #20]
 801fc38:	69a3      	ldr	r3, [r4, #24]
 801fc3a:	2b03      	cmp	r3, #3
 801fc3c:	d101      	bne.n	801fc42 <_scanf_i+0x22>
 801fc3e:	4b75      	ldr	r3, [pc, #468]	; (801fe14 <_scanf_i+0x1f4>)
 801fc40:	9305      	str	r3, [sp, #20]
 801fc42:	22ae      	movs	r2, #174	; 0xae
 801fc44:	2000      	movs	r0, #0
 801fc46:	68a3      	ldr	r3, [r4, #8]
 801fc48:	0052      	lsls	r2, r2, #1
 801fc4a:	1e59      	subs	r1, r3, #1
 801fc4c:	9003      	str	r0, [sp, #12]
 801fc4e:	4291      	cmp	r1, r2
 801fc50:	d905      	bls.n	801fc5e <_scanf_i+0x3e>
 801fc52:	3b5e      	subs	r3, #94	; 0x5e
 801fc54:	3bff      	subs	r3, #255	; 0xff
 801fc56:	9303      	str	r3, [sp, #12]
 801fc58:	235e      	movs	r3, #94	; 0x5e
 801fc5a:	33ff      	adds	r3, #255	; 0xff
 801fc5c:	60a3      	str	r3, [r4, #8]
 801fc5e:	0023      	movs	r3, r4
 801fc60:	331c      	adds	r3, #28
 801fc62:	9301      	str	r3, [sp, #4]
 801fc64:	23d0      	movs	r3, #208	; 0xd0
 801fc66:	2700      	movs	r7, #0
 801fc68:	6822      	ldr	r2, [r4, #0]
 801fc6a:	011b      	lsls	r3, r3, #4
 801fc6c:	4313      	orrs	r3, r2
 801fc6e:	6023      	str	r3, [r4, #0]
 801fc70:	9b01      	ldr	r3, [sp, #4]
 801fc72:	9300      	str	r3, [sp, #0]
 801fc74:	6833      	ldr	r3, [r6, #0]
 801fc76:	a807      	add	r0, sp, #28
 801fc78:	7819      	ldrb	r1, [r3, #0]
 801fc7a:	00bb      	lsls	r3, r7, #2
 801fc7c:	2202      	movs	r2, #2
 801fc7e:	5818      	ldr	r0, [r3, r0]
 801fc80:	f000 fa88 	bl	8020194 <memchr>
 801fc84:	2800      	cmp	r0, #0
 801fc86:	d02b      	beq.n	801fce0 <_scanf_i+0xc0>
 801fc88:	2f01      	cmp	r7, #1
 801fc8a:	d162      	bne.n	801fd52 <_scanf_i+0x132>
 801fc8c:	6863      	ldr	r3, [r4, #4]
 801fc8e:	2b00      	cmp	r3, #0
 801fc90:	d106      	bne.n	801fca0 <_scanf_i+0x80>
 801fc92:	3308      	adds	r3, #8
 801fc94:	6822      	ldr	r2, [r4, #0]
 801fc96:	6063      	str	r3, [r4, #4]
 801fc98:	33f9      	adds	r3, #249	; 0xf9
 801fc9a:	33ff      	adds	r3, #255	; 0xff
 801fc9c:	4313      	orrs	r3, r2
 801fc9e:	6023      	str	r3, [r4, #0]
 801fca0:	4b5d      	ldr	r3, [pc, #372]	; (801fe18 <_scanf_i+0x1f8>)
 801fca2:	6822      	ldr	r2, [r4, #0]
 801fca4:	4013      	ands	r3, r2
 801fca6:	6023      	str	r3, [r4, #0]
 801fca8:	68a3      	ldr	r3, [r4, #8]
 801fcaa:	1e5a      	subs	r2, r3, #1
 801fcac:	60a2      	str	r2, [r4, #8]
 801fcae:	2b00      	cmp	r3, #0
 801fcb0:	d016      	beq.n	801fce0 <_scanf_i+0xc0>
 801fcb2:	6833      	ldr	r3, [r6, #0]
 801fcb4:	1c5a      	adds	r2, r3, #1
 801fcb6:	6032      	str	r2, [r6, #0]
 801fcb8:	781b      	ldrb	r3, [r3, #0]
 801fcba:	9a00      	ldr	r2, [sp, #0]
 801fcbc:	7013      	strb	r3, [r2, #0]
 801fcbe:	6873      	ldr	r3, [r6, #4]
 801fcc0:	1c55      	adds	r5, r2, #1
 801fcc2:	3b01      	subs	r3, #1
 801fcc4:	6073      	str	r3, [r6, #4]
 801fcc6:	2b00      	cmp	r3, #0
 801fcc8:	dc09      	bgt.n	801fcde <_scanf_i+0xbe>
 801fcca:	23c0      	movs	r3, #192	; 0xc0
 801fccc:	005b      	lsls	r3, r3, #1
 801fcce:	58e3      	ldr	r3, [r4, r3]
 801fcd0:	0031      	movs	r1, r6
 801fcd2:	9804      	ldr	r0, [sp, #16]
 801fcd4:	9300      	str	r3, [sp, #0]
 801fcd6:	4798      	blx	r3
 801fcd8:	2800      	cmp	r0, #0
 801fcda:	d000      	beq.n	801fcde <_scanf_i+0xbe>
 801fcdc:	e080      	b.n	801fde0 <_scanf_i+0x1c0>
 801fcde:	9500      	str	r5, [sp, #0]
 801fce0:	3701      	adds	r7, #1
 801fce2:	2f03      	cmp	r7, #3
 801fce4:	d1c6      	bne.n	801fc74 <_scanf_i+0x54>
 801fce6:	6863      	ldr	r3, [r4, #4]
 801fce8:	2b00      	cmp	r3, #0
 801fcea:	d101      	bne.n	801fcf0 <_scanf_i+0xd0>
 801fcec:	330a      	adds	r3, #10
 801fcee:	6063      	str	r3, [r4, #4]
 801fcf0:	2110      	movs	r1, #16
 801fcf2:	2700      	movs	r7, #0
 801fcf4:	6863      	ldr	r3, [r4, #4]
 801fcf6:	6960      	ldr	r0, [r4, #20]
 801fcf8:	1ac9      	subs	r1, r1, r3
 801fcfa:	4b48      	ldr	r3, [pc, #288]	; (801fe1c <_scanf_i+0x1fc>)
 801fcfc:	18c9      	adds	r1, r1, r3
 801fcfe:	f000 f891 	bl	801fe24 <__sccl>
 801fd02:	9d00      	ldr	r5, [sp, #0]
 801fd04:	68a3      	ldr	r3, [r4, #8]
 801fd06:	6822      	ldr	r2, [r4, #0]
 801fd08:	9300      	str	r3, [sp, #0]
 801fd0a:	2b00      	cmp	r3, #0
 801fd0c:	d041      	beq.n	801fd92 <_scanf_i+0x172>
 801fd0e:	6831      	ldr	r1, [r6, #0]
 801fd10:	6963      	ldr	r3, [r4, #20]
 801fd12:	7808      	ldrb	r0, [r1, #0]
 801fd14:	5c1b      	ldrb	r3, [r3, r0]
 801fd16:	2b00      	cmp	r3, #0
 801fd18:	d03b      	beq.n	801fd92 <_scanf_i+0x172>
 801fd1a:	2830      	cmp	r0, #48	; 0x30
 801fd1c:	d129      	bne.n	801fd72 <_scanf_i+0x152>
 801fd1e:	2380      	movs	r3, #128	; 0x80
 801fd20:	011b      	lsls	r3, r3, #4
 801fd22:	421a      	tst	r2, r3
 801fd24:	d025      	beq.n	801fd72 <_scanf_i+0x152>
 801fd26:	9b03      	ldr	r3, [sp, #12]
 801fd28:	3701      	adds	r7, #1
 801fd2a:	2b00      	cmp	r3, #0
 801fd2c:	d005      	beq.n	801fd3a <_scanf_i+0x11a>
 801fd2e:	001a      	movs	r2, r3
 801fd30:	9b00      	ldr	r3, [sp, #0]
 801fd32:	3a01      	subs	r2, #1
 801fd34:	3301      	adds	r3, #1
 801fd36:	9203      	str	r2, [sp, #12]
 801fd38:	60a3      	str	r3, [r4, #8]
 801fd3a:	6873      	ldr	r3, [r6, #4]
 801fd3c:	3b01      	subs	r3, #1
 801fd3e:	6073      	str	r3, [r6, #4]
 801fd40:	2b00      	cmp	r3, #0
 801fd42:	dd1d      	ble.n	801fd80 <_scanf_i+0x160>
 801fd44:	6833      	ldr	r3, [r6, #0]
 801fd46:	3301      	adds	r3, #1
 801fd48:	6033      	str	r3, [r6, #0]
 801fd4a:	68a3      	ldr	r3, [r4, #8]
 801fd4c:	3b01      	subs	r3, #1
 801fd4e:	60a3      	str	r3, [r4, #8]
 801fd50:	e7d8      	b.n	801fd04 <_scanf_i+0xe4>
 801fd52:	2f02      	cmp	r7, #2
 801fd54:	d1a8      	bne.n	801fca8 <_scanf_i+0x88>
 801fd56:	21c0      	movs	r1, #192	; 0xc0
 801fd58:	2380      	movs	r3, #128	; 0x80
 801fd5a:	6822      	ldr	r2, [r4, #0]
 801fd5c:	00c9      	lsls	r1, r1, #3
 801fd5e:	4011      	ands	r1, r2
 801fd60:	009b      	lsls	r3, r3, #2
 801fd62:	4299      	cmp	r1, r3
 801fd64:	d1bf      	bne.n	801fce6 <_scanf_i+0xc6>
 801fd66:	3bf1      	subs	r3, #241	; 0xf1
 801fd68:	3bff      	subs	r3, #255	; 0xff
 801fd6a:	6063      	str	r3, [r4, #4]
 801fd6c:	33f0      	adds	r3, #240	; 0xf0
 801fd6e:	4313      	orrs	r3, r2
 801fd70:	e799      	b.n	801fca6 <_scanf_i+0x86>
 801fd72:	4b2b      	ldr	r3, [pc, #172]	; (801fe20 <_scanf_i+0x200>)
 801fd74:	4013      	ands	r3, r2
 801fd76:	6023      	str	r3, [r4, #0]
 801fd78:	780b      	ldrb	r3, [r1, #0]
 801fd7a:	702b      	strb	r3, [r5, #0]
 801fd7c:	3501      	adds	r5, #1
 801fd7e:	e7dc      	b.n	801fd3a <_scanf_i+0x11a>
 801fd80:	23c0      	movs	r3, #192	; 0xc0
 801fd82:	005b      	lsls	r3, r3, #1
 801fd84:	58e3      	ldr	r3, [r4, r3]
 801fd86:	0031      	movs	r1, r6
 801fd88:	9804      	ldr	r0, [sp, #16]
 801fd8a:	9300      	str	r3, [sp, #0]
 801fd8c:	4798      	blx	r3
 801fd8e:	2800      	cmp	r0, #0
 801fd90:	d0db      	beq.n	801fd4a <_scanf_i+0x12a>
 801fd92:	6823      	ldr	r3, [r4, #0]
 801fd94:	05db      	lsls	r3, r3, #23
 801fd96:	d50e      	bpl.n	801fdb6 <_scanf_i+0x196>
 801fd98:	9b01      	ldr	r3, [sp, #4]
 801fd9a:	429d      	cmp	r5, r3
 801fd9c:	d907      	bls.n	801fdae <_scanf_i+0x18e>
 801fd9e:	23be      	movs	r3, #190	; 0xbe
 801fda0:	3d01      	subs	r5, #1
 801fda2:	005b      	lsls	r3, r3, #1
 801fda4:	7829      	ldrb	r1, [r5, #0]
 801fda6:	58e3      	ldr	r3, [r4, r3]
 801fda8:	0032      	movs	r2, r6
 801fdaa:	9804      	ldr	r0, [sp, #16]
 801fdac:	4798      	blx	r3
 801fdae:	9b01      	ldr	r3, [sp, #4]
 801fdb0:	2001      	movs	r0, #1
 801fdb2:	429d      	cmp	r5, r3
 801fdb4:	d027      	beq.n	801fe06 <_scanf_i+0x1e6>
 801fdb6:	2210      	movs	r2, #16
 801fdb8:	6823      	ldr	r3, [r4, #0]
 801fdba:	401a      	ands	r2, r3
 801fdbc:	d11c      	bne.n	801fdf8 <_scanf_i+0x1d8>
 801fdbe:	702a      	strb	r2, [r5, #0]
 801fdc0:	6863      	ldr	r3, [r4, #4]
 801fdc2:	9901      	ldr	r1, [sp, #4]
 801fdc4:	9804      	ldr	r0, [sp, #16]
 801fdc6:	9e05      	ldr	r6, [sp, #20]
 801fdc8:	47b0      	blx	r6
 801fdca:	9b02      	ldr	r3, [sp, #8]
 801fdcc:	6821      	ldr	r1, [r4, #0]
 801fdce:	681b      	ldr	r3, [r3, #0]
 801fdd0:	068a      	lsls	r2, r1, #26
 801fdd2:	d507      	bpl.n	801fde4 <_scanf_i+0x1c4>
 801fdd4:	1d1a      	adds	r2, r3, #4
 801fdd6:	9902      	ldr	r1, [sp, #8]
 801fdd8:	600a      	str	r2, [r1, #0]
 801fdda:	681b      	ldr	r3, [r3, #0]
 801fddc:	6018      	str	r0, [r3, #0]
 801fdde:	e008      	b.n	801fdf2 <_scanf_i+0x1d2>
 801fde0:	2700      	movs	r7, #0
 801fde2:	e7d6      	b.n	801fd92 <_scanf_i+0x172>
 801fde4:	1d1a      	adds	r2, r3, #4
 801fde6:	07ce      	lsls	r6, r1, #31
 801fde8:	d5f5      	bpl.n	801fdd6 <_scanf_i+0x1b6>
 801fdea:	9902      	ldr	r1, [sp, #8]
 801fdec:	600a      	str	r2, [r1, #0]
 801fdee:	681b      	ldr	r3, [r3, #0]
 801fdf0:	8018      	strh	r0, [r3, #0]
 801fdf2:	68e3      	ldr	r3, [r4, #12]
 801fdf4:	3301      	adds	r3, #1
 801fdf6:	60e3      	str	r3, [r4, #12]
 801fdf8:	2000      	movs	r0, #0
 801fdfa:	9b01      	ldr	r3, [sp, #4]
 801fdfc:	1aed      	subs	r5, r5, r3
 801fdfe:	6923      	ldr	r3, [r4, #16]
 801fe00:	19ef      	adds	r7, r5, r7
 801fe02:	19df      	adds	r7, r3, r7
 801fe04:	6127      	str	r7, [r4, #16]
 801fe06:	b00b      	add	sp, #44	; 0x2c
 801fe08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801fe0a:	46c0      	nop			; (mov r8, r8)
 801fe0c:	080212e0 	.word	0x080212e0
 801fe10:	080200b1 	.word	0x080200b1
 801fe14:	0801ff89 	.word	0x0801ff89
 801fe18:	fffffaff 	.word	0xfffffaff
 801fe1c:	08022437 	.word	0x08022437
 801fe20:	fffff6ff 	.word	0xfffff6ff

0801fe24 <__sccl>:
 801fe24:	b570      	push	{r4, r5, r6, lr}
 801fe26:	780b      	ldrb	r3, [r1, #0]
 801fe28:	0005      	movs	r5, r0
 801fe2a:	2b5e      	cmp	r3, #94	; 0x5e
 801fe2c:	d018      	beq.n	801fe60 <__sccl+0x3c>
 801fe2e:	1c4a      	adds	r2, r1, #1
 801fe30:	2100      	movs	r1, #0
 801fe32:	0028      	movs	r0, r5
 801fe34:	1c6c      	adds	r4, r5, #1
 801fe36:	34ff      	adds	r4, #255	; 0xff
 801fe38:	7001      	strb	r1, [r0, #0]
 801fe3a:	3001      	adds	r0, #1
 801fe3c:	42a0      	cmp	r0, r4
 801fe3e:	d1fb      	bne.n	801fe38 <__sccl+0x14>
 801fe40:	1e50      	subs	r0, r2, #1
 801fe42:	2b00      	cmp	r3, #0
 801fe44:	d00b      	beq.n	801fe5e <__sccl+0x3a>
 801fe46:	2001      	movs	r0, #1
 801fe48:	4041      	eors	r1, r0
 801fe4a:	54e9      	strb	r1, [r5, r3]
 801fe4c:	7814      	ldrb	r4, [r2, #0]
 801fe4e:	1c50      	adds	r0, r2, #1
 801fe50:	2c2d      	cmp	r4, #45	; 0x2d
 801fe52:	d00c      	beq.n	801fe6e <__sccl+0x4a>
 801fe54:	2c5d      	cmp	r4, #93	; 0x5d
 801fe56:	d002      	beq.n	801fe5e <__sccl+0x3a>
 801fe58:	2c00      	cmp	r4, #0
 801fe5a:	d105      	bne.n	801fe68 <__sccl+0x44>
 801fe5c:	0010      	movs	r0, r2
 801fe5e:	bd70      	pop	{r4, r5, r6, pc}
 801fe60:	1c8a      	adds	r2, r1, #2
 801fe62:	784b      	ldrb	r3, [r1, #1]
 801fe64:	2101      	movs	r1, #1
 801fe66:	e7e4      	b.n	801fe32 <__sccl+0xe>
 801fe68:	0023      	movs	r3, r4
 801fe6a:	0002      	movs	r2, r0
 801fe6c:	e7ed      	b.n	801fe4a <__sccl+0x26>
 801fe6e:	7856      	ldrb	r6, [r2, #1]
 801fe70:	2e5d      	cmp	r6, #93	; 0x5d
 801fe72:	d0f9      	beq.n	801fe68 <__sccl+0x44>
 801fe74:	42b3      	cmp	r3, r6
 801fe76:	dcf7      	bgt.n	801fe68 <__sccl+0x44>
 801fe78:	3202      	adds	r2, #2
 801fe7a:	3301      	adds	r3, #1
 801fe7c:	54e9      	strb	r1, [r5, r3]
 801fe7e:	429e      	cmp	r6, r3
 801fe80:	dcfb      	bgt.n	801fe7a <__sccl+0x56>
 801fe82:	e7e3      	b.n	801fe4c <__sccl+0x28>

0801fe84 <_strtol_l.isra.0>:
 801fe84:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fe86:	001f      	movs	r7, r3
 801fe88:	000e      	movs	r6, r1
 801fe8a:	b087      	sub	sp, #28
 801fe8c:	9005      	str	r0, [sp, #20]
 801fe8e:	9101      	str	r1, [sp, #4]
 801fe90:	9202      	str	r2, [sp, #8]
 801fe92:	980c      	ldr	r0, [sp, #48]	; 0x30
 801fe94:	7834      	ldrb	r4, [r6, #0]
 801fe96:	f000 f959 	bl	802014c <__locale_ctype_ptr_l>
 801fe9a:	2208      	movs	r2, #8
 801fe9c:	1900      	adds	r0, r0, r4
 801fe9e:	7843      	ldrb	r3, [r0, #1]
 801fea0:	1c75      	adds	r5, r6, #1
 801fea2:	4013      	ands	r3, r2
 801fea4:	d136      	bne.n	801ff14 <_strtol_l.isra.0+0x90>
 801fea6:	2c2d      	cmp	r4, #45	; 0x2d
 801fea8:	d136      	bne.n	801ff18 <_strtol_l.isra.0+0x94>
 801feaa:	1cb5      	adds	r5, r6, #2
 801feac:	7874      	ldrb	r4, [r6, #1]
 801feae:	2601      	movs	r6, #1
 801feb0:	2f00      	cmp	r7, #0
 801feb2:	d062      	beq.n	801ff7a <_strtol_l.isra.0+0xf6>
 801feb4:	2f10      	cmp	r7, #16
 801feb6:	d109      	bne.n	801fecc <_strtol_l.isra.0+0x48>
 801feb8:	2c30      	cmp	r4, #48	; 0x30
 801feba:	d107      	bne.n	801fecc <_strtol_l.isra.0+0x48>
 801febc:	2220      	movs	r2, #32
 801febe:	782b      	ldrb	r3, [r5, #0]
 801fec0:	4393      	bics	r3, r2
 801fec2:	2b58      	cmp	r3, #88	; 0x58
 801fec4:	d154      	bne.n	801ff70 <_strtol_l.isra.0+0xec>
 801fec6:	2710      	movs	r7, #16
 801fec8:	786c      	ldrb	r4, [r5, #1]
 801feca:	3502      	adds	r5, #2
 801fecc:	4b2d      	ldr	r3, [pc, #180]	; (801ff84 <_strtol_l.isra.0+0x100>)
 801fece:	0039      	movs	r1, r7
 801fed0:	18f3      	adds	r3, r6, r3
 801fed2:	0018      	movs	r0, r3
 801fed4:	9303      	str	r3, [sp, #12]
 801fed6:	f7e0 f9a5 	bl	8000224 <__aeabi_uidivmod>
 801feda:	9104      	str	r1, [sp, #16]
 801fedc:	2101      	movs	r1, #1
 801fede:	2300      	movs	r3, #0
 801fee0:	4249      	negs	r1, r1
 801fee2:	0002      	movs	r2, r0
 801fee4:	468c      	mov	ip, r1
 801fee6:	0018      	movs	r0, r3
 801fee8:	0021      	movs	r1, r4
 801feea:	3930      	subs	r1, #48	; 0x30
 801feec:	2909      	cmp	r1, #9
 801feee:	d81a      	bhi.n	801ff26 <_strtol_l.isra.0+0xa2>
 801fef0:	000c      	movs	r4, r1
 801fef2:	42a7      	cmp	r7, r4
 801fef4:	dd23      	ble.n	801ff3e <_strtol_l.isra.0+0xba>
 801fef6:	1c59      	adds	r1, r3, #1
 801fef8:	d009      	beq.n	801ff0e <_strtol_l.isra.0+0x8a>
 801fefa:	4663      	mov	r3, ip
 801fefc:	4282      	cmp	r2, r0
 801fefe:	d306      	bcc.n	801ff0e <_strtol_l.isra.0+0x8a>
 801ff00:	d102      	bne.n	801ff08 <_strtol_l.isra.0+0x84>
 801ff02:	9904      	ldr	r1, [sp, #16]
 801ff04:	42a1      	cmp	r1, r4
 801ff06:	db02      	blt.n	801ff0e <_strtol_l.isra.0+0x8a>
 801ff08:	2301      	movs	r3, #1
 801ff0a:	4378      	muls	r0, r7
 801ff0c:	1820      	adds	r0, r4, r0
 801ff0e:	782c      	ldrb	r4, [r5, #0]
 801ff10:	3501      	adds	r5, #1
 801ff12:	e7e9      	b.n	801fee8 <_strtol_l.isra.0+0x64>
 801ff14:	002e      	movs	r6, r5
 801ff16:	e7bc      	b.n	801fe92 <_strtol_l.isra.0+0xe>
 801ff18:	2c2b      	cmp	r4, #43	; 0x2b
 801ff1a:	d001      	beq.n	801ff20 <_strtol_l.isra.0+0x9c>
 801ff1c:	001e      	movs	r6, r3
 801ff1e:	e7c7      	b.n	801feb0 <_strtol_l.isra.0+0x2c>
 801ff20:	1cb5      	adds	r5, r6, #2
 801ff22:	7874      	ldrb	r4, [r6, #1]
 801ff24:	e7fa      	b.n	801ff1c <_strtol_l.isra.0+0x98>
 801ff26:	0021      	movs	r1, r4
 801ff28:	3941      	subs	r1, #65	; 0x41
 801ff2a:	2919      	cmp	r1, #25
 801ff2c:	d801      	bhi.n	801ff32 <_strtol_l.isra.0+0xae>
 801ff2e:	3c37      	subs	r4, #55	; 0x37
 801ff30:	e7df      	b.n	801fef2 <_strtol_l.isra.0+0x6e>
 801ff32:	0021      	movs	r1, r4
 801ff34:	3961      	subs	r1, #97	; 0x61
 801ff36:	2919      	cmp	r1, #25
 801ff38:	d801      	bhi.n	801ff3e <_strtol_l.isra.0+0xba>
 801ff3a:	3c57      	subs	r4, #87	; 0x57
 801ff3c:	e7d9      	b.n	801fef2 <_strtol_l.isra.0+0x6e>
 801ff3e:	1c5a      	adds	r2, r3, #1
 801ff40:	d108      	bne.n	801ff54 <_strtol_l.isra.0+0xd0>
 801ff42:	9a05      	ldr	r2, [sp, #20]
 801ff44:	3323      	adds	r3, #35	; 0x23
 801ff46:	6013      	str	r3, [r2, #0]
 801ff48:	9b02      	ldr	r3, [sp, #8]
 801ff4a:	9803      	ldr	r0, [sp, #12]
 801ff4c:	2b00      	cmp	r3, #0
 801ff4e:	d109      	bne.n	801ff64 <_strtol_l.isra.0+0xe0>
 801ff50:	b007      	add	sp, #28
 801ff52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ff54:	2e00      	cmp	r6, #0
 801ff56:	d000      	beq.n	801ff5a <_strtol_l.isra.0+0xd6>
 801ff58:	4240      	negs	r0, r0
 801ff5a:	9a02      	ldr	r2, [sp, #8]
 801ff5c:	2a00      	cmp	r2, #0
 801ff5e:	d0f7      	beq.n	801ff50 <_strtol_l.isra.0+0xcc>
 801ff60:	2b00      	cmp	r3, #0
 801ff62:	d001      	beq.n	801ff68 <_strtol_l.isra.0+0xe4>
 801ff64:	1e6b      	subs	r3, r5, #1
 801ff66:	9301      	str	r3, [sp, #4]
 801ff68:	9b02      	ldr	r3, [sp, #8]
 801ff6a:	9a01      	ldr	r2, [sp, #4]
 801ff6c:	601a      	str	r2, [r3, #0]
 801ff6e:	e7ef      	b.n	801ff50 <_strtol_l.isra.0+0xcc>
 801ff70:	2430      	movs	r4, #48	; 0x30
 801ff72:	2f00      	cmp	r7, #0
 801ff74:	d1aa      	bne.n	801fecc <_strtol_l.isra.0+0x48>
 801ff76:	2708      	movs	r7, #8
 801ff78:	e7a8      	b.n	801fecc <_strtol_l.isra.0+0x48>
 801ff7a:	2c30      	cmp	r4, #48	; 0x30
 801ff7c:	d09e      	beq.n	801febc <_strtol_l.isra.0+0x38>
 801ff7e:	270a      	movs	r7, #10
 801ff80:	e7a4      	b.n	801fecc <_strtol_l.isra.0+0x48>
 801ff82:	46c0      	nop			; (mov r8, r8)
 801ff84:	7fffffff 	.word	0x7fffffff

0801ff88 <_strtol_r>:
 801ff88:	b513      	push	{r0, r1, r4, lr}
 801ff8a:	4c05      	ldr	r4, [pc, #20]	; (801ffa0 <_strtol_r+0x18>)
 801ff8c:	6824      	ldr	r4, [r4, #0]
 801ff8e:	6a24      	ldr	r4, [r4, #32]
 801ff90:	2c00      	cmp	r4, #0
 801ff92:	d100      	bne.n	801ff96 <_strtol_r+0xe>
 801ff94:	4c03      	ldr	r4, [pc, #12]	; (801ffa4 <_strtol_r+0x1c>)
 801ff96:	9400      	str	r4, [sp, #0]
 801ff98:	f7ff ff74 	bl	801fe84 <_strtol_l.isra.0>
 801ff9c:	bd16      	pop	{r1, r2, r4, pc}
 801ff9e:	46c0      	nop			; (mov r8, r8)
 801ffa0:	200000b8 	.word	0x200000b8
 801ffa4:	2000011c 	.word	0x2000011c

0801ffa8 <_strtoul_l.isra.0>:
 801ffa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ffaa:	001f      	movs	r7, r3
 801ffac:	000e      	movs	r6, r1
 801ffae:	b085      	sub	sp, #20
 801ffb0:	9003      	str	r0, [sp, #12]
 801ffb2:	9101      	str	r1, [sp, #4]
 801ffb4:	9202      	str	r2, [sp, #8]
 801ffb6:	980a      	ldr	r0, [sp, #40]	; 0x28
 801ffb8:	7834      	ldrb	r4, [r6, #0]
 801ffba:	f000 f8c7 	bl	802014c <__locale_ctype_ptr_l>
 801ffbe:	2208      	movs	r2, #8
 801ffc0:	1900      	adds	r0, r0, r4
 801ffc2:	7843      	ldrb	r3, [r0, #1]
 801ffc4:	1c75      	adds	r5, r6, #1
 801ffc6:	4013      	ands	r3, r2
 801ffc8:	d138      	bne.n	802003c <_strtoul_l.isra.0+0x94>
 801ffca:	2c2d      	cmp	r4, #45	; 0x2d
 801ffcc:	d138      	bne.n	8020040 <_strtoul_l.isra.0+0x98>
 801ffce:	7874      	ldrb	r4, [r6, #1]
 801ffd0:	1cb5      	adds	r5, r6, #2
 801ffd2:	3301      	adds	r3, #1
 801ffd4:	9300      	str	r3, [sp, #0]
 801ffd6:	2f00      	cmp	r7, #0
 801ffd8:	d065      	beq.n	80200a6 <_strtoul_l.isra.0+0xfe>
 801ffda:	2f10      	cmp	r7, #16
 801ffdc:	d109      	bne.n	801fff2 <_strtoul_l.isra.0+0x4a>
 801ffde:	2c30      	cmp	r4, #48	; 0x30
 801ffe0:	d107      	bne.n	801fff2 <_strtoul_l.isra.0+0x4a>
 801ffe2:	2220      	movs	r2, #32
 801ffe4:	782b      	ldrb	r3, [r5, #0]
 801ffe6:	4393      	bics	r3, r2
 801ffe8:	2b58      	cmp	r3, #88	; 0x58
 801ffea:	d157      	bne.n	802009c <_strtoul_l.isra.0+0xf4>
 801ffec:	2710      	movs	r7, #16
 801ffee:	786c      	ldrb	r4, [r5, #1]
 801fff0:	3502      	adds	r5, #2
 801fff2:	2001      	movs	r0, #1
 801fff4:	0039      	movs	r1, r7
 801fff6:	4240      	negs	r0, r0
 801fff8:	f7e0 f88e 	bl	8000118 <__udivsi3>
 801fffc:	0006      	movs	r6, r0
 801fffe:	2001      	movs	r0, #1
 8020000:	0039      	movs	r1, r7
 8020002:	4240      	negs	r0, r0
 8020004:	f7e0 f90e 	bl	8000224 <__aeabi_uidivmod>
 8020008:	2300      	movs	r3, #0
 802000a:	2201      	movs	r2, #1
 802000c:	468c      	mov	ip, r1
 802000e:	0018      	movs	r0, r3
 8020010:	4252      	negs	r2, r2
 8020012:	0021      	movs	r1, r4
 8020014:	3930      	subs	r1, #48	; 0x30
 8020016:	2909      	cmp	r1, #9
 8020018:	d817      	bhi.n	802004a <_strtoul_l.isra.0+0xa2>
 802001a:	000c      	movs	r4, r1
 802001c:	42a7      	cmp	r7, r4
 802001e:	dd22      	ble.n	8020066 <_strtoul_l.isra.0+0xbe>
 8020020:	2b00      	cmp	r3, #0
 8020022:	db1e      	blt.n	8020062 <_strtoul_l.isra.0+0xba>
 8020024:	0013      	movs	r3, r2
 8020026:	4286      	cmp	r6, r0
 8020028:	d305      	bcc.n	8020036 <_strtoul_l.isra.0+0x8e>
 802002a:	d101      	bne.n	8020030 <_strtoul_l.isra.0+0x88>
 802002c:	45a4      	cmp	ip, r4
 802002e:	db02      	blt.n	8020036 <_strtoul_l.isra.0+0x8e>
 8020030:	2301      	movs	r3, #1
 8020032:	4378      	muls	r0, r7
 8020034:	1820      	adds	r0, r4, r0
 8020036:	782c      	ldrb	r4, [r5, #0]
 8020038:	3501      	adds	r5, #1
 802003a:	e7ea      	b.n	8020012 <_strtoul_l.isra.0+0x6a>
 802003c:	002e      	movs	r6, r5
 802003e:	e7ba      	b.n	801ffb6 <_strtoul_l.isra.0+0xe>
 8020040:	2c2b      	cmp	r4, #43	; 0x2b
 8020042:	d1c7      	bne.n	801ffd4 <_strtoul_l.isra.0+0x2c>
 8020044:	1cb5      	adds	r5, r6, #2
 8020046:	7874      	ldrb	r4, [r6, #1]
 8020048:	e7c4      	b.n	801ffd4 <_strtoul_l.isra.0+0x2c>
 802004a:	0021      	movs	r1, r4
 802004c:	3941      	subs	r1, #65	; 0x41
 802004e:	2919      	cmp	r1, #25
 8020050:	d801      	bhi.n	8020056 <_strtoul_l.isra.0+0xae>
 8020052:	3c37      	subs	r4, #55	; 0x37
 8020054:	e7e2      	b.n	802001c <_strtoul_l.isra.0+0x74>
 8020056:	0021      	movs	r1, r4
 8020058:	3961      	subs	r1, #97	; 0x61
 802005a:	2919      	cmp	r1, #25
 802005c:	d803      	bhi.n	8020066 <_strtoul_l.isra.0+0xbe>
 802005e:	3c57      	subs	r4, #87	; 0x57
 8020060:	e7dc      	b.n	802001c <_strtoul_l.isra.0+0x74>
 8020062:	0013      	movs	r3, r2
 8020064:	e7e7      	b.n	8020036 <_strtoul_l.isra.0+0x8e>
 8020066:	2b00      	cmp	r3, #0
 8020068:	da09      	bge.n	802007e <_strtoul_l.isra.0+0xd6>
 802006a:	2322      	movs	r3, #34	; 0x22
 802006c:	2001      	movs	r0, #1
 802006e:	9a03      	ldr	r2, [sp, #12]
 8020070:	4240      	negs	r0, r0
 8020072:	6013      	str	r3, [r2, #0]
 8020074:	9b02      	ldr	r3, [sp, #8]
 8020076:	2b00      	cmp	r3, #0
 8020078:	d10a      	bne.n	8020090 <_strtoul_l.isra.0+0xe8>
 802007a:	b005      	add	sp, #20
 802007c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802007e:	9a00      	ldr	r2, [sp, #0]
 8020080:	2a00      	cmp	r2, #0
 8020082:	d000      	beq.n	8020086 <_strtoul_l.isra.0+0xde>
 8020084:	4240      	negs	r0, r0
 8020086:	9a02      	ldr	r2, [sp, #8]
 8020088:	2a00      	cmp	r2, #0
 802008a:	d0f6      	beq.n	802007a <_strtoul_l.isra.0+0xd2>
 802008c:	2b00      	cmp	r3, #0
 802008e:	d001      	beq.n	8020094 <_strtoul_l.isra.0+0xec>
 8020090:	1e6b      	subs	r3, r5, #1
 8020092:	9301      	str	r3, [sp, #4]
 8020094:	9b02      	ldr	r3, [sp, #8]
 8020096:	9a01      	ldr	r2, [sp, #4]
 8020098:	601a      	str	r2, [r3, #0]
 802009a:	e7ee      	b.n	802007a <_strtoul_l.isra.0+0xd2>
 802009c:	2430      	movs	r4, #48	; 0x30
 802009e:	2f00      	cmp	r7, #0
 80200a0:	d1a7      	bne.n	801fff2 <_strtoul_l.isra.0+0x4a>
 80200a2:	2708      	movs	r7, #8
 80200a4:	e7a5      	b.n	801fff2 <_strtoul_l.isra.0+0x4a>
 80200a6:	2c30      	cmp	r4, #48	; 0x30
 80200a8:	d09b      	beq.n	801ffe2 <_strtoul_l.isra.0+0x3a>
 80200aa:	270a      	movs	r7, #10
 80200ac:	e7a1      	b.n	801fff2 <_strtoul_l.isra.0+0x4a>
	...

080200b0 <_strtoul_r>:
 80200b0:	b513      	push	{r0, r1, r4, lr}
 80200b2:	4c05      	ldr	r4, [pc, #20]	; (80200c8 <_strtoul_r+0x18>)
 80200b4:	6824      	ldr	r4, [r4, #0]
 80200b6:	6a24      	ldr	r4, [r4, #32]
 80200b8:	2c00      	cmp	r4, #0
 80200ba:	d100      	bne.n	80200be <_strtoul_r+0xe>
 80200bc:	4c03      	ldr	r4, [pc, #12]	; (80200cc <_strtoul_r+0x1c>)
 80200be:	9400      	str	r4, [sp, #0]
 80200c0:	f7ff ff72 	bl	801ffa8 <_strtoul_l.isra.0>
 80200c4:	bd16      	pop	{r1, r2, r4, pc}
 80200c6:	46c0      	nop			; (mov r8, r8)
 80200c8:	200000b8 	.word	0x200000b8
 80200cc:	2000011c 	.word	0x2000011c

080200d0 <__submore>:
 80200d0:	000b      	movs	r3, r1
 80200d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80200d4:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 80200d6:	3344      	adds	r3, #68	; 0x44
 80200d8:	000c      	movs	r4, r1
 80200da:	429d      	cmp	r5, r3
 80200dc:	d11c      	bne.n	8020118 <__submore+0x48>
 80200de:	2680      	movs	r6, #128	; 0x80
 80200e0:	00f6      	lsls	r6, r6, #3
 80200e2:	0031      	movs	r1, r6
 80200e4:	f000 f8ac 	bl	8020240 <_malloc_r>
 80200e8:	2800      	cmp	r0, #0
 80200ea:	d102      	bne.n	80200f2 <__submore+0x22>
 80200ec:	2001      	movs	r0, #1
 80200ee:	4240      	negs	r0, r0
 80200f0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80200f2:	0023      	movs	r3, r4
 80200f4:	6360      	str	r0, [r4, #52]	; 0x34
 80200f6:	63a6      	str	r6, [r4, #56]	; 0x38
 80200f8:	3346      	adds	r3, #70	; 0x46
 80200fa:	781a      	ldrb	r2, [r3, #0]
 80200fc:	4b10      	ldr	r3, [pc, #64]	; (8020140 <__submore+0x70>)
 80200fe:	54c2      	strb	r2, [r0, r3]
 8020100:	0023      	movs	r3, r4
 8020102:	3345      	adds	r3, #69	; 0x45
 8020104:	781a      	ldrb	r2, [r3, #0]
 8020106:	4b0f      	ldr	r3, [pc, #60]	; (8020144 <__submore+0x74>)
 8020108:	54c2      	strb	r2, [r0, r3]
 802010a:	782a      	ldrb	r2, [r5, #0]
 802010c:	4b0e      	ldr	r3, [pc, #56]	; (8020148 <__submore+0x78>)
 802010e:	54c2      	strb	r2, [r0, r3]
 8020110:	18c0      	adds	r0, r0, r3
 8020112:	6020      	str	r0, [r4, #0]
 8020114:	2000      	movs	r0, #0
 8020116:	e7eb      	b.n	80200f0 <__submore+0x20>
 8020118:	6b8e      	ldr	r6, [r1, #56]	; 0x38
 802011a:	0029      	movs	r1, r5
 802011c:	0073      	lsls	r3, r6, #1
 802011e:	001a      	movs	r2, r3
 8020120:	9301      	str	r3, [sp, #4]
 8020122:	f000 f8eb 	bl	80202fc <_realloc_r>
 8020126:	1e05      	subs	r5, r0, #0
 8020128:	d0e0      	beq.n	80200ec <__submore+0x1c>
 802012a:	1987      	adds	r7, r0, r6
 802012c:	0001      	movs	r1, r0
 802012e:	0032      	movs	r2, r6
 8020130:	0038      	movs	r0, r7
 8020132:	f7fe ffe9 	bl	801f108 <memcpy>
 8020136:	9b01      	ldr	r3, [sp, #4]
 8020138:	6027      	str	r7, [r4, #0]
 802013a:	6365      	str	r5, [r4, #52]	; 0x34
 802013c:	63a3      	str	r3, [r4, #56]	; 0x38
 802013e:	e7e9      	b.n	8020114 <__submore+0x44>
 8020140:	000003ff 	.word	0x000003ff
 8020144:	000003fe 	.word	0x000003fe
 8020148:	000003fd 	.word	0x000003fd

0802014c <__locale_ctype_ptr_l>:
 802014c:	30ec      	adds	r0, #236	; 0xec
 802014e:	6800      	ldr	r0, [r0, #0]
 8020150:	4770      	bx	lr
	...

08020154 <__locale_ctype_ptr>:
 8020154:	4b04      	ldr	r3, [pc, #16]	; (8020168 <__locale_ctype_ptr+0x14>)
 8020156:	681b      	ldr	r3, [r3, #0]
 8020158:	6a1b      	ldr	r3, [r3, #32]
 802015a:	2b00      	cmp	r3, #0
 802015c:	d100      	bne.n	8020160 <__locale_ctype_ptr+0xc>
 802015e:	4b03      	ldr	r3, [pc, #12]	; (802016c <__locale_ctype_ptr+0x18>)
 8020160:	33ec      	adds	r3, #236	; 0xec
 8020162:	6818      	ldr	r0, [r3, #0]
 8020164:	4770      	bx	lr
 8020166:	46c0      	nop			; (mov r8, r8)
 8020168:	200000b8 	.word	0x200000b8
 802016c:	2000011c 	.word	0x2000011c

08020170 <__ascii_mbtowc>:
 8020170:	b082      	sub	sp, #8
 8020172:	2900      	cmp	r1, #0
 8020174:	d100      	bne.n	8020178 <__ascii_mbtowc+0x8>
 8020176:	a901      	add	r1, sp, #4
 8020178:	1e10      	subs	r0, r2, #0
 802017a:	d006      	beq.n	802018a <__ascii_mbtowc+0x1a>
 802017c:	2b00      	cmp	r3, #0
 802017e:	d006      	beq.n	802018e <__ascii_mbtowc+0x1e>
 8020180:	7813      	ldrb	r3, [r2, #0]
 8020182:	600b      	str	r3, [r1, #0]
 8020184:	7810      	ldrb	r0, [r2, #0]
 8020186:	1e43      	subs	r3, r0, #1
 8020188:	4198      	sbcs	r0, r3
 802018a:	b002      	add	sp, #8
 802018c:	4770      	bx	lr
 802018e:	2002      	movs	r0, #2
 8020190:	4240      	negs	r0, r0
 8020192:	e7fa      	b.n	802018a <__ascii_mbtowc+0x1a>

08020194 <memchr>:
 8020194:	b2c9      	uxtb	r1, r1
 8020196:	1882      	adds	r2, r0, r2
 8020198:	4290      	cmp	r0, r2
 802019a:	d101      	bne.n	80201a0 <memchr+0xc>
 802019c:	2000      	movs	r0, #0
 802019e:	4770      	bx	lr
 80201a0:	7803      	ldrb	r3, [r0, #0]
 80201a2:	428b      	cmp	r3, r1
 80201a4:	d0fb      	beq.n	802019e <memchr+0xa>
 80201a6:	3001      	adds	r0, #1
 80201a8:	e7f6      	b.n	8020198 <memchr+0x4>
	...

080201ac <_free_r>:
 80201ac:	b570      	push	{r4, r5, r6, lr}
 80201ae:	0005      	movs	r5, r0
 80201b0:	2900      	cmp	r1, #0
 80201b2:	d010      	beq.n	80201d6 <_free_r+0x2a>
 80201b4:	1f0c      	subs	r4, r1, #4
 80201b6:	6823      	ldr	r3, [r4, #0]
 80201b8:	2b00      	cmp	r3, #0
 80201ba:	da00      	bge.n	80201be <_free_r+0x12>
 80201bc:	18e4      	adds	r4, r4, r3
 80201be:	0028      	movs	r0, r5
 80201c0:	f000 f8e0 	bl	8020384 <__malloc_lock>
 80201c4:	4a1d      	ldr	r2, [pc, #116]	; (802023c <_free_r+0x90>)
 80201c6:	6813      	ldr	r3, [r2, #0]
 80201c8:	2b00      	cmp	r3, #0
 80201ca:	d105      	bne.n	80201d8 <_free_r+0x2c>
 80201cc:	6063      	str	r3, [r4, #4]
 80201ce:	6014      	str	r4, [r2, #0]
 80201d0:	0028      	movs	r0, r5
 80201d2:	f000 f8d8 	bl	8020386 <__malloc_unlock>
 80201d6:	bd70      	pop	{r4, r5, r6, pc}
 80201d8:	42a3      	cmp	r3, r4
 80201da:	d909      	bls.n	80201f0 <_free_r+0x44>
 80201dc:	6821      	ldr	r1, [r4, #0]
 80201de:	1860      	adds	r0, r4, r1
 80201e0:	4283      	cmp	r3, r0
 80201e2:	d1f3      	bne.n	80201cc <_free_r+0x20>
 80201e4:	6818      	ldr	r0, [r3, #0]
 80201e6:	685b      	ldr	r3, [r3, #4]
 80201e8:	1841      	adds	r1, r0, r1
 80201ea:	6021      	str	r1, [r4, #0]
 80201ec:	e7ee      	b.n	80201cc <_free_r+0x20>
 80201ee:	0013      	movs	r3, r2
 80201f0:	685a      	ldr	r2, [r3, #4]
 80201f2:	2a00      	cmp	r2, #0
 80201f4:	d001      	beq.n	80201fa <_free_r+0x4e>
 80201f6:	42a2      	cmp	r2, r4
 80201f8:	d9f9      	bls.n	80201ee <_free_r+0x42>
 80201fa:	6819      	ldr	r1, [r3, #0]
 80201fc:	1858      	adds	r0, r3, r1
 80201fe:	42a0      	cmp	r0, r4
 8020200:	d10b      	bne.n	802021a <_free_r+0x6e>
 8020202:	6820      	ldr	r0, [r4, #0]
 8020204:	1809      	adds	r1, r1, r0
 8020206:	1858      	adds	r0, r3, r1
 8020208:	6019      	str	r1, [r3, #0]
 802020a:	4282      	cmp	r2, r0
 802020c:	d1e0      	bne.n	80201d0 <_free_r+0x24>
 802020e:	6810      	ldr	r0, [r2, #0]
 8020210:	6852      	ldr	r2, [r2, #4]
 8020212:	1841      	adds	r1, r0, r1
 8020214:	6019      	str	r1, [r3, #0]
 8020216:	605a      	str	r2, [r3, #4]
 8020218:	e7da      	b.n	80201d0 <_free_r+0x24>
 802021a:	42a0      	cmp	r0, r4
 802021c:	d902      	bls.n	8020224 <_free_r+0x78>
 802021e:	230c      	movs	r3, #12
 8020220:	602b      	str	r3, [r5, #0]
 8020222:	e7d5      	b.n	80201d0 <_free_r+0x24>
 8020224:	6821      	ldr	r1, [r4, #0]
 8020226:	1860      	adds	r0, r4, r1
 8020228:	4282      	cmp	r2, r0
 802022a:	d103      	bne.n	8020234 <_free_r+0x88>
 802022c:	6810      	ldr	r0, [r2, #0]
 802022e:	6852      	ldr	r2, [r2, #4]
 8020230:	1841      	adds	r1, r0, r1
 8020232:	6021      	str	r1, [r4, #0]
 8020234:	6062      	str	r2, [r4, #4]
 8020236:	605c      	str	r4, [r3, #4]
 8020238:	e7ca      	b.n	80201d0 <_free_r+0x24>
 802023a:	46c0      	nop			; (mov r8, r8)
 802023c:	200012e4 	.word	0x200012e4

08020240 <_malloc_r>:
 8020240:	2303      	movs	r3, #3
 8020242:	b570      	push	{r4, r5, r6, lr}
 8020244:	1ccd      	adds	r5, r1, #3
 8020246:	439d      	bics	r5, r3
 8020248:	3508      	adds	r5, #8
 802024a:	0006      	movs	r6, r0
 802024c:	2d0c      	cmp	r5, #12
 802024e:	d21e      	bcs.n	802028e <_malloc_r+0x4e>
 8020250:	250c      	movs	r5, #12
 8020252:	42a9      	cmp	r1, r5
 8020254:	d81d      	bhi.n	8020292 <_malloc_r+0x52>
 8020256:	0030      	movs	r0, r6
 8020258:	f000 f894 	bl	8020384 <__malloc_lock>
 802025c:	4a25      	ldr	r2, [pc, #148]	; (80202f4 <_malloc_r+0xb4>)
 802025e:	6814      	ldr	r4, [r2, #0]
 8020260:	0021      	movs	r1, r4
 8020262:	2900      	cmp	r1, #0
 8020264:	d119      	bne.n	802029a <_malloc_r+0x5a>
 8020266:	4c24      	ldr	r4, [pc, #144]	; (80202f8 <_malloc_r+0xb8>)
 8020268:	6823      	ldr	r3, [r4, #0]
 802026a:	2b00      	cmp	r3, #0
 802026c:	d103      	bne.n	8020276 <_malloc_r+0x36>
 802026e:	0030      	movs	r0, r6
 8020270:	f000 f86a 	bl	8020348 <_sbrk_r>
 8020274:	6020      	str	r0, [r4, #0]
 8020276:	0029      	movs	r1, r5
 8020278:	0030      	movs	r0, r6
 802027a:	f000 f865 	bl	8020348 <_sbrk_r>
 802027e:	1c43      	adds	r3, r0, #1
 8020280:	d12b      	bne.n	80202da <_malloc_r+0x9a>
 8020282:	230c      	movs	r3, #12
 8020284:	0030      	movs	r0, r6
 8020286:	6033      	str	r3, [r6, #0]
 8020288:	f000 f87d 	bl	8020386 <__malloc_unlock>
 802028c:	e003      	b.n	8020296 <_malloc_r+0x56>
 802028e:	2d00      	cmp	r5, #0
 8020290:	dadf      	bge.n	8020252 <_malloc_r+0x12>
 8020292:	230c      	movs	r3, #12
 8020294:	6033      	str	r3, [r6, #0]
 8020296:	2000      	movs	r0, #0
 8020298:	bd70      	pop	{r4, r5, r6, pc}
 802029a:	680b      	ldr	r3, [r1, #0]
 802029c:	1b5b      	subs	r3, r3, r5
 802029e:	d419      	bmi.n	80202d4 <_malloc_r+0x94>
 80202a0:	2b0b      	cmp	r3, #11
 80202a2:	d903      	bls.n	80202ac <_malloc_r+0x6c>
 80202a4:	600b      	str	r3, [r1, #0]
 80202a6:	18cc      	adds	r4, r1, r3
 80202a8:	6025      	str	r5, [r4, #0]
 80202aa:	e003      	b.n	80202b4 <_malloc_r+0x74>
 80202ac:	684b      	ldr	r3, [r1, #4]
 80202ae:	428c      	cmp	r4, r1
 80202b0:	d10d      	bne.n	80202ce <_malloc_r+0x8e>
 80202b2:	6013      	str	r3, [r2, #0]
 80202b4:	0030      	movs	r0, r6
 80202b6:	f000 f866 	bl	8020386 <__malloc_unlock>
 80202ba:	0020      	movs	r0, r4
 80202bc:	2207      	movs	r2, #7
 80202be:	300b      	adds	r0, #11
 80202c0:	1d23      	adds	r3, r4, #4
 80202c2:	4390      	bics	r0, r2
 80202c4:	1ac3      	subs	r3, r0, r3
 80202c6:	d0e7      	beq.n	8020298 <_malloc_r+0x58>
 80202c8:	425a      	negs	r2, r3
 80202ca:	50e2      	str	r2, [r4, r3]
 80202cc:	e7e4      	b.n	8020298 <_malloc_r+0x58>
 80202ce:	6063      	str	r3, [r4, #4]
 80202d0:	000c      	movs	r4, r1
 80202d2:	e7ef      	b.n	80202b4 <_malloc_r+0x74>
 80202d4:	000c      	movs	r4, r1
 80202d6:	6849      	ldr	r1, [r1, #4]
 80202d8:	e7c3      	b.n	8020262 <_malloc_r+0x22>
 80202da:	2303      	movs	r3, #3
 80202dc:	1cc4      	adds	r4, r0, #3
 80202de:	439c      	bics	r4, r3
 80202e0:	42a0      	cmp	r0, r4
 80202e2:	d0e1      	beq.n	80202a8 <_malloc_r+0x68>
 80202e4:	1a21      	subs	r1, r4, r0
 80202e6:	0030      	movs	r0, r6
 80202e8:	f000 f82e 	bl	8020348 <_sbrk_r>
 80202ec:	1c43      	adds	r3, r0, #1
 80202ee:	d1db      	bne.n	80202a8 <_malloc_r+0x68>
 80202f0:	e7c7      	b.n	8020282 <_malloc_r+0x42>
 80202f2:	46c0      	nop			; (mov r8, r8)
 80202f4:	200012e4 	.word	0x200012e4
 80202f8:	200012e8 	.word	0x200012e8

080202fc <_realloc_r>:
 80202fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80202fe:	0007      	movs	r7, r0
 8020300:	000d      	movs	r5, r1
 8020302:	0016      	movs	r6, r2
 8020304:	2900      	cmp	r1, #0
 8020306:	d105      	bne.n	8020314 <_realloc_r+0x18>
 8020308:	0011      	movs	r1, r2
 802030a:	f7ff ff99 	bl	8020240 <_malloc_r>
 802030e:	0004      	movs	r4, r0
 8020310:	0020      	movs	r0, r4
 8020312:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020314:	2a00      	cmp	r2, #0
 8020316:	d103      	bne.n	8020320 <_realloc_r+0x24>
 8020318:	f7ff ff48 	bl	80201ac <_free_r>
 802031c:	0034      	movs	r4, r6
 802031e:	e7f7      	b.n	8020310 <_realloc_r+0x14>
 8020320:	f000 f832 	bl	8020388 <_malloc_usable_size_r>
 8020324:	002c      	movs	r4, r5
 8020326:	42b0      	cmp	r0, r6
 8020328:	d2f2      	bcs.n	8020310 <_realloc_r+0x14>
 802032a:	0031      	movs	r1, r6
 802032c:	0038      	movs	r0, r7
 802032e:	f7ff ff87 	bl	8020240 <_malloc_r>
 8020332:	1e04      	subs	r4, r0, #0
 8020334:	d0ec      	beq.n	8020310 <_realloc_r+0x14>
 8020336:	0029      	movs	r1, r5
 8020338:	0032      	movs	r2, r6
 802033a:	f7fe fee5 	bl	801f108 <memcpy>
 802033e:	0029      	movs	r1, r5
 8020340:	0038      	movs	r0, r7
 8020342:	f7ff ff33 	bl	80201ac <_free_r>
 8020346:	e7e3      	b.n	8020310 <_realloc_r+0x14>

08020348 <_sbrk_r>:
 8020348:	2300      	movs	r3, #0
 802034a:	b570      	push	{r4, r5, r6, lr}
 802034c:	4c06      	ldr	r4, [pc, #24]	; (8020368 <_sbrk_r+0x20>)
 802034e:	0005      	movs	r5, r0
 8020350:	0008      	movs	r0, r1
 8020352:	6023      	str	r3, [r4, #0]
 8020354:	f7e3 fb8a 	bl	8003a6c <_sbrk>
 8020358:	1c43      	adds	r3, r0, #1
 802035a:	d103      	bne.n	8020364 <_sbrk_r+0x1c>
 802035c:	6823      	ldr	r3, [r4, #0]
 802035e:	2b00      	cmp	r3, #0
 8020360:	d000      	beq.n	8020364 <_sbrk_r+0x1c>
 8020362:	602b      	str	r3, [r5, #0]
 8020364:	bd70      	pop	{r4, r5, r6, pc}
 8020366:	46c0      	nop			; (mov r8, r8)
 8020368:	20001770 	.word	0x20001770

0802036c <__ascii_wctomb>:
 802036c:	1e0b      	subs	r3, r1, #0
 802036e:	d004      	beq.n	802037a <__ascii_wctomb+0xe>
 8020370:	2aff      	cmp	r2, #255	; 0xff
 8020372:	d904      	bls.n	802037e <__ascii_wctomb+0x12>
 8020374:	238a      	movs	r3, #138	; 0x8a
 8020376:	6003      	str	r3, [r0, #0]
 8020378:	3b8b      	subs	r3, #139	; 0x8b
 802037a:	0018      	movs	r0, r3
 802037c:	4770      	bx	lr
 802037e:	700a      	strb	r2, [r1, #0]
 8020380:	2301      	movs	r3, #1
 8020382:	e7fa      	b.n	802037a <__ascii_wctomb+0xe>

08020384 <__malloc_lock>:
 8020384:	4770      	bx	lr

08020386 <__malloc_unlock>:
 8020386:	4770      	bx	lr

08020388 <_malloc_usable_size_r>:
 8020388:	1f0b      	subs	r3, r1, #4
 802038a:	681b      	ldr	r3, [r3, #0]
 802038c:	1f18      	subs	r0, r3, #4
 802038e:	2b00      	cmp	r3, #0
 8020390:	da01      	bge.n	8020396 <_malloc_usable_size_r+0xe>
 8020392:	580b      	ldr	r3, [r1, r0]
 8020394:	18c0      	adds	r0, r0, r3
 8020396:	4770      	bx	lr

08020398 <ceil>:
 8020398:	b5f0      	push	{r4, r5, r6, r7, lr}
 802039a:	004b      	lsls	r3, r1, #1
 802039c:	4a39      	ldr	r2, [pc, #228]	; (8020484 <ceil+0xec>)
 802039e:	0d5b      	lsrs	r3, r3, #21
 80203a0:	b085      	sub	sp, #20
 80203a2:	189e      	adds	r6, r3, r2
 80203a4:	000c      	movs	r4, r1
 80203a6:	0005      	movs	r5, r0
 80203a8:	9003      	str	r0, [sp, #12]
 80203aa:	2e13      	cmp	r6, #19
 80203ac:	dc32      	bgt.n	8020414 <ceil+0x7c>
 80203ae:	2e00      	cmp	r6, #0
 80203b0:	da13      	bge.n	80203da <ceil+0x42>
 80203b2:	4a35      	ldr	r2, [pc, #212]	; (8020488 <ceil+0xf0>)
 80203b4:	4b35      	ldr	r3, [pc, #212]	; (802048c <ceil+0xf4>)
 80203b6:	f7e0 fbd1 	bl	8000b5c <__aeabi_dadd>
 80203ba:	2200      	movs	r2, #0
 80203bc:	2300      	movs	r3, #0
 80203be:	f7e0 f84b 	bl	8000458 <__aeabi_dcmpgt>
 80203c2:	2800      	cmp	r0, #0
 80203c4:	d006      	beq.n	80203d4 <ceil+0x3c>
 80203c6:	2c00      	cmp	r4, #0
 80203c8:	db57      	blt.n	802047a <ceil+0xe2>
 80203ca:	432c      	orrs	r4, r5
 80203cc:	2500      	movs	r5, #0
 80203ce:	42ac      	cmp	r4, r5
 80203d0:	d000      	beq.n	80203d4 <ceil+0x3c>
 80203d2:	4c2f      	ldr	r4, [pc, #188]	; (8020490 <ceil+0xf8>)
 80203d4:	0028      	movs	r0, r5
 80203d6:	0021      	movs	r1, r4
 80203d8:	e026      	b.n	8020428 <ceil+0x90>
 80203da:	4f2e      	ldr	r7, [pc, #184]	; (8020494 <ceil+0xfc>)
 80203dc:	4137      	asrs	r7, r6
 80203de:	003b      	movs	r3, r7
 80203e0:	400b      	ands	r3, r1
 80203e2:	4303      	orrs	r3, r0
 80203e4:	d020      	beq.n	8020428 <ceil+0x90>
 80203e6:	9000      	str	r0, [sp, #0]
 80203e8:	9101      	str	r1, [sp, #4]
 80203ea:	4a27      	ldr	r2, [pc, #156]	; (8020488 <ceil+0xf0>)
 80203ec:	4b27      	ldr	r3, [pc, #156]	; (802048c <ceil+0xf4>)
 80203ee:	9800      	ldr	r0, [sp, #0]
 80203f0:	9901      	ldr	r1, [sp, #4]
 80203f2:	f7e0 fbb3 	bl	8000b5c <__aeabi_dadd>
 80203f6:	2200      	movs	r2, #0
 80203f8:	2300      	movs	r3, #0
 80203fa:	f7e0 f82d 	bl	8000458 <__aeabi_dcmpgt>
 80203fe:	2800      	cmp	r0, #0
 8020400:	d0e8      	beq.n	80203d4 <ceil+0x3c>
 8020402:	2c00      	cmp	r4, #0
 8020404:	dd03      	ble.n	802040e <ceil+0x76>
 8020406:	2380      	movs	r3, #128	; 0x80
 8020408:	035b      	lsls	r3, r3, #13
 802040a:	4133      	asrs	r3, r6
 802040c:	18e4      	adds	r4, r4, r3
 802040e:	43bc      	bics	r4, r7
 8020410:	2500      	movs	r5, #0
 8020412:	e7df      	b.n	80203d4 <ceil+0x3c>
 8020414:	2e33      	cmp	r6, #51	; 0x33
 8020416:	dd09      	ble.n	802042c <ceil+0x94>
 8020418:	2380      	movs	r3, #128	; 0x80
 802041a:	00db      	lsls	r3, r3, #3
 802041c:	429e      	cmp	r6, r3
 802041e:	d103      	bne.n	8020428 <ceil+0x90>
 8020420:	0002      	movs	r2, r0
 8020422:	000b      	movs	r3, r1
 8020424:	f7e0 fb9a 	bl	8000b5c <__aeabi_dadd>
 8020428:	b005      	add	sp, #20
 802042a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802042c:	2701      	movs	r7, #1
 802042e:	4a1a      	ldr	r2, [pc, #104]	; (8020498 <ceil+0x100>)
 8020430:	427f      	negs	r7, r7
 8020432:	189b      	adds	r3, r3, r2
 8020434:	40df      	lsrs	r7, r3
 8020436:	4238      	tst	r0, r7
 8020438:	d0f6      	beq.n	8020428 <ceil+0x90>
 802043a:	9000      	str	r0, [sp, #0]
 802043c:	9101      	str	r1, [sp, #4]
 802043e:	4a12      	ldr	r2, [pc, #72]	; (8020488 <ceil+0xf0>)
 8020440:	4b12      	ldr	r3, [pc, #72]	; (802048c <ceil+0xf4>)
 8020442:	9800      	ldr	r0, [sp, #0]
 8020444:	9901      	ldr	r1, [sp, #4]
 8020446:	f7e0 fb89 	bl	8000b5c <__aeabi_dadd>
 802044a:	2200      	movs	r2, #0
 802044c:	2300      	movs	r3, #0
 802044e:	f7e0 f803 	bl	8000458 <__aeabi_dcmpgt>
 8020452:	2800      	cmp	r0, #0
 8020454:	d0be      	beq.n	80203d4 <ceil+0x3c>
 8020456:	2c00      	cmp	r4, #0
 8020458:	dd02      	ble.n	8020460 <ceil+0xc8>
 802045a:	2e14      	cmp	r6, #20
 802045c:	d102      	bne.n	8020464 <ceil+0xcc>
 802045e:	3401      	adds	r4, #1
 8020460:	43bd      	bics	r5, r7
 8020462:	e7b7      	b.n	80203d4 <ceil+0x3c>
 8020464:	2334      	movs	r3, #52	; 0x34
 8020466:	1b9e      	subs	r6, r3, r6
 8020468:	3b33      	subs	r3, #51	; 0x33
 802046a:	40b3      	lsls	r3, r6
 802046c:	18ed      	adds	r5, r5, r3
 802046e:	9b03      	ldr	r3, [sp, #12]
 8020470:	429d      	cmp	r5, r3
 8020472:	419b      	sbcs	r3, r3
 8020474:	425b      	negs	r3, r3
 8020476:	18e4      	adds	r4, r4, r3
 8020478:	e7f2      	b.n	8020460 <ceil+0xc8>
 802047a:	2480      	movs	r4, #128	; 0x80
 802047c:	2500      	movs	r5, #0
 802047e:	0624      	lsls	r4, r4, #24
 8020480:	e7a8      	b.n	80203d4 <ceil+0x3c>
 8020482:	46c0      	nop			; (mov r8, r8)
 8020484:	fffffc01 	.word	0xfffffc01
 8020488:	8800759c 	.word	0x8800759c
 802048c:	7e37e43c 	.word	0x7e37e43c
 8020490:	3ff00000 	.word	0x3ff00000
 8020494:	000fffff 	.word	0x000fffff
 8020498:	fffffbed 	.word	0xfffffbed

0802049c <floor>:
 802049c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802049e:	004b      	lsls	r3, r1, #1
 80204a0:	4a39      	ldr	r2, [pc, #228]	; (8020588 <floor+0xec>)
 80204a2:	0d5b      	lsrs	r3, r3, #21
 80204a4:	b085      	sub	sp, #20
 80204a6:	189e      	adds	r6, r3, r2
 80204a8:	000c      	movs	r4, r1
 80204aa:	0005      	movs	r5, r0
 80204ac:	9003      	str	r0, [sp, #12]
 80204ae:	2e13      	cmp	r6, #19
 80204b0:	dc34      	bgt.n	802051c <floor+0x80>
 80204b2:	2e00      	cmp	r6, #0
 80204b4:	da15      	bge.n	80204e2 <floor+0x46>
 80204b6:	4a35      	ldr	r2, [pc, #212]	; (802058c <floor+0xf0>)
 80204b8:	4b35      	ldr	r3, [pc, #212]	; (8020590 <floor+0xf4>)
 80204ba:	f7e0 fb4f 	bl	8000b5c <__aeabi_dadd>
 80204be:	2200      	movs	r2, #0
 80204c0:	2300      	movs	r3, #0
 80204c2:	f7df ffc9 	bl	8000458 <__aeabi_dcmpgt>
 80204c6:	2800      	cmp	r0, #0
 80204c8:	d008      	beq.n	80204dc <floor+0x40>
 80204ca:	2c00      	cmp	r4, #0
 80204cc:	da59      	bge.n	8020582 <floor+0xe6>
 80204ce:	0063      	lsls	r3, r4, #1
 80204d0:	085b      	lsrs	r3, r3, #1
 80204d2:	432b      	orrs	r3, r5
 80204d4:	2500      	movs	r5, #0
 80204d6:	42ab      	cmp	r3, r5
 80204d8:	d000      	beq.n	80204dc <floor+0x40>
 80204da:	4c2e      	ldr	r4, [pc, #184]	; (8020594 <floor+0xf8>)
 80204dc:	0028      	movs	r0, r5
 80204de:	0021      	movs	r1, r4
 80204e0:	e026      	b.n	8020530 <floor+0x94>
 80204e2:	4f2d      	ldr	r7, [pc, #180]	; (8020598 <floor+0xfc>)
 80204e4:	4137      	asrs	r7, r6
 80204e6:	003b      	movs	r3, r7
 80204e8:	400b      	ands	r3, r1
 80204ea:	4303      	orrs	r3, r0
 80204ec:	d020      	beq.n	8020530 <floor+0x94>
 80204ee:	9000      	str	r0, [sp, #0]
 80204f0:	9101      	str	r1, [sp, #4]
 80204f2:	4a26      	ldr	r2, [pc, #152]	; (802058c <floor+0xf0>)
 80204f4:	4b26      	ldr	r3, [pc, #152]	; (8020590 <floor+0xf4>)
 80204f6:	9800      	ldr	r0, [sp, #0]
 80204f8:	9901      	ldr	r1, [sp, #4]
 80204fa:	f7e0 fb2f 	bl	8000b5c <__aeabi_dadd>
 80204fe:	2200      	movs	r2, #0
 8020500:	2300      	movs	r3, #0
 8020502:	f7df ffa9 	bl	8000458 <__aeabi_dcmpgt>
 8020506:	2800      	cmp	r0, #0
 8020508:	d0e8      	beq.n	80204dc <floor+0x40>
 802050a:	2c00      	cmp	r4, #0
 802050c:	da03      	bge.n	8020516 <floor+0x7a>
 802050e:	2380      	movs	r3, #128	; 0x80
 8020510:	035b      	lsls	r3, r3, #13
 8020512:	4133      	asrs	r3, r6
 8020514:	18e4      	adds	r4, r4, r3
 8020516:	43bc      	bics	r4, r7
 8020518:	2500      	movs	r5, #0
 802051a:	e7df      	b.n	80204dc <floor+0x40>
 802051c:	2e33      	cmp	r6, #51	; 0x33
 802051e:	dd09      	ble.n	8020534 <floor+0x98>
 8020520:	2380      	movs	r3, #128	; 0x80
 8020522:	00db      	lsls	r3, r3, #3
 8020524:	429e      	cmp	r6, r3
 8020526:	d103      	bne.n	8020530 <floor+0x94>
 8020528:	0002      	movs	r2, r0
 802052a:	000b      	movs	r3, r1
 802052c:	f7e0 fb16 	bl	8000b5c <__aeabi_dadd>
 8020530:	b005      	add	sp, #20
 8020532:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020534:	2701      	movs	r7, #1
 8020536:	4a19      	ldr	r2, [pc, #100]	; (802059c <floor+0x100>)
 8020538:	427f      	negs	r7, r7
 802053a:	189b      	adds	r3, r3, r2
 802053c:	40df      	lsrs	r7, r3
 802053e:	4238      	tst	r0, r7
 8020540:	d0f6      	beq.n	8020530 <floor+0x94>
 8020542:	9000      	str	r0, [sp, #0]
 8020544:	9101      	str	r1, [sp, #4]
 8020546:	4a11      	ldr	r2, [pc, #68]	; (802058c <floor+0xf0>)
 8020548:	4b11      	ldr	r3, [pc, #68]	; (8020590 <floor+0xf4>)
 802054a:	9800      	ldr	r0, [sp, #0]
 802054c:	9901      	ldr	r1, [sp, #4]
 802054e:	f7e0 fb05 	bl	8000b5c <__aeabi_dadd>
 8020552:	2200      	movs	r2, #0
 8020554:	2300      	movs	r3, #0
 8020556:	f7df ff7f 	bl	8000458 <__aeabi_dcmpgt>
 802055a:	2800      	cmp	r0, #0
 802055c:	d0be      	beq.n	80204dc <floor+0x40>
 802055e:	2c00      	cmp	r4, #0
 8020560:	da02      	bge.n	8020568 <floor+0xcc>
 8020562:	2e14      	cmp	r6, #20
 8020564:	d102      	bne.n	802056c <floor+0xd0>
 8020566:	3401      	adds	r4, #1
 8020568:	43bd      	bics	r5, r7
 802056a:	e7b7      	b.n	80204dc <floor+0x40>
 802056c:	2334      	movs	r3, #52	; 0x34
 802056e:	1b9e      	subs	r6, r3, r6
 8020570:	3b33      	subs	r3, #51	; 0x33
 8020572:	40b3      	lsls	r3, r6
 8020574:	18ed      	adds	r5, r5, r3
 8020576:	9b03      	ldr	r3, [sp, #12]
 8020578:	429d      	cmp	r5, r3
 802057a:	419b      	sbcs	r3, r3
 802057c:	425b      	negs	r3, r3
 802057e:	18e4      	adds	r4, r4, r3
 8020580:	e7f2      	b.n	8020568 <floor+0xcc>
 8020582:	2500      	movs	r5, #0
 8020584:	002c      	movs	r4, r5
 8020586:	e7a9      	b.n	80204dc <floor+0x40>
 8020588:	fffffc01 	.word	0xfffffc01
 802058c:	8800759c 	.word	0x8800759c
 8020590:	7e37e43c 	.word	0x7e37e43c
 8020594:	bff00000 	.word	0xbff00000
 8020598:	000fffff 	.word	0x000fffff
 802059c:	fffffbed 	.word	0xfffffbed

080205a0 <round>:
 80205a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80205a2:	004a      	lsls	r2, r1, #1
 80205a4:	0007      	movs	r7, r0
 80205a6:	481f      	ldr	r0, [pc, #124]	; (8020624 <round+0x84>)
 80205a8:	0d52      	lsrs	r2, r2, #21
 80205aa:	1815      	adds	r5, r2, r0
 80205ac:	000e      	movs	r6, r1
 80205ae:	2d13      	cmp	r5, #19
 80205b0:	dc18      	bgt.n	80205e4 <round+0x44>
 80205b2:	2d00      	cmp	r5, #0
 80205b4:	da09      	bge.n	80205ca <round+0x2a>
 80205b6:	0fcb      	lsrs	r3, r1, #31
 80205b8:	07db      	lsls	r3, r3, #31
 80205ba:	2200      	movs	r2, #0
 80205bc:	1c69      	adds	r1, r5, #1
 80205be:	d101      	bne.n	80205c4 <round+0x24>
 80205c0:	4919      	ldr	r1, [pc, #100]	; (8020628 <round+0x88>)
 80205c2:	430b      	orrs	r3, r1
 80205c4:	0019      	movs	r1, r3
 80205c6:	0010      	movs	r0, r2
 80205c8:	e017      	b.n	80205fa <round+0x5a>
 80205ca:	4a18      	ldr	r2, [pc, #96]	; (802062c <round+0x8c>)
 80205cc:	412a      	asrs	r2, r5
 80205ce:	420a      	tst	r2, r1
 80205d0:	d101      	bne.n	80205d6 <round+0x36>
 80205d2:	2f00      	cmp	r7, #0
 80205d4:	d012      	beq.n	80205fc <round+0x5c>
 80205d6:	2380      	movs	r3, #128	; 0x80
 80205d8:	031b      	lsls	r3, r3, #12
 80205da:	412b      	asrs	r3, r5
 80205dc:	199b      	adds	r3, r3, r6
 80205de:	4393      	bics	r3, r2
 80205e0:	2200      	movs	r2, #0
 80205e2:	e7ef      	b.n	80205c4 <round+0x24>
 80205e4:	2d33      	cmp	r5, #51	; 0x33
 80205e6:	dd0b      	ble.n	8020600 <round+0x60>
 80205e8:	2380      	movs	r3, #128	; 0x80
 80205ea:	00db      	lsls	r3, r3, #3
 80205ec:	429d      	cmp	r5, r3
 80205ee:	d105      	bne.n	80205fc <round+0x5c>
 80205f0:	003a      	movs	r2, r7
 80205f2:	000b      	movs	r3, r1
 80205f4:	0038      	movs	r0, r7
 80205f6:	f7e0 fab1 	bl	8000b5c <__aeabi_dadd>
 80205fa:	0007      	movs	r7, r0
 80205fc:	0038      	movs	r0, r7
 80205fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020600:	2601      	movs	r6, #1
 8020602:	480b      	ldr	r0, [pc, #44]	; (8020630 <round+0x90>)
 8020604:	4276      	negs	r6, r6
 8020606:	1812      	adds	r2, r2, r0
 8020608:	40d6      	lsrs	r6, r2
 802060a:	423e      	tst	r6, r7
 802060c:	d0f6      	beq.n	80205fc <round+0x5c>
 802060e:	2233      	movs	r2, #51	; 0x33
 8020610:	1b55      	subs	r5, r2, r5
 8020612:	3a32      	subs	r2, #50	; 0x32
 8020614:	40aa      	lsls	r2, r5
 8020616:	19d2      	adds	r2, r2, r7
 8020618:	42ba      	cmp	r2, r7
 802061a:	41a4      	sbcs	r4, r4
 802061c:	4264      	negs	r4, r4
 802061e:	190b      	adds	r3, r1, r4
 8020620:	43b2      	bics	r2, r6
 8020622:	e7cf      	b.n	80205c4 <round+0x24>
 8020624:	fffffc01 	.word	0xfffffc01
 8020628:	3ff00000 	.word	0x3ff00000
 802062c:	000fffff 	.word	0x000fffff
 8020630:	fffffbed 	.word	0xfffffbed

08020634 <_init>:
 8020634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020636:	46c0      	nop			; (mov r8, r8)
 8020638:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802063a:	bc08      	pop	{r3}
 802063c:	469e      	mov	lr, r3
 802063e:	4770      	bx	lr

08020640 <_fini>:
 8020640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020642:	46c0      	nop			; (mov r8, r8)
 8020644:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8020646:	bc08      	pop	{r3}
 8020648:	469e      	mov	lr, r3
 802064a:	4770      	bx	lr
